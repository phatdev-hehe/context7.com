TITLE: Enabling pgvector Extension in Postgres
DESCRIPTION: SQL command to enable the pgvector extension for vector operations in Postgres.

LANGUAGE: sql
CODE:
create extension vector
with
  schema extensions;

----------------------------------------

TITLE: Creating Function with Custom Timeout in PostgreSQL
DESCRIPTION: Defines a function 'myfunc' with a custom statement timeout of 4 seconds. This approach allows setting timeouts for specific functions, useful for recurring functions that need special runtime exemptions.

LANGUAGE: sql
CODE:
create or replace function myfunc()
returns void as $$
 select pg_sleep(3); -- simulating some long-running process
$$
language sql
set statement_timeout TO '4s'; -- set custom timeout

----------------------------------------

TITLE: Adding Supabase Status Feed to Slack
DESCRIPTION: Slack command for subscribing to Supabase platform status updates using the built-in RSS functionality

LANGUAGE: shell
CODE:
/feed subscribe https://status.supabase.com/history.atom

----------------------------------------

TITLE: Basic Full Text Search Query in PostgreSQL
DESCRIPTION: SQL and various language examples to perform a basic full text search on a single column.

LANGUAGE: sql
CODE:
select
  *
from
  books
where
  to_tsvector(description)
  @@ to_tsquery('big');

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('books').select().textSearch('description', `'big'`)

LANGUAGE: dart
CODE:
final result = await client
  .from('books')
  .select()
  .textSearch('description', "'big'");

LANGUAGE: swift
CODE:
let response = await client.from("books")
  .select()
  .textSearch("description", value: "'big'")
  .execute()

LANGUAGE: kotlin
CODE:
val data = supabase.from("books").select {
    filter {
        textSearch("description", "'big'", TextSearchType.NONE)
    }
}

LANGUAGE: python
CODE:
data = supabase.from_('books').select().text_search('description', "'big'").execute()

----------------------------------------

TITLE: Creating Document Storage Schema in SQL
DESCRIPTION: SQL schema creation for storing documents and their sections with vector embeddings, including owner tracking through foreign key relationships.

LANGUAGE: sql
CODE:
create table documents (
  id bigint primary key generated always as identity,
  name text not null,
  owner_id uuid not null references auth.users (id) default auth.uid(),
  created_at timestamp with time zone not null default now()
);

create table document_sections (
  id bigint primary key generated always as identity,
  document_id bigint not null references documents (id),
  content text not null,
  embedding vector (384)
);

----------------------------------------

TITLE: React/JSX Component Mapping Example
DESCRIPTION: A React/JSX code snippet that maps through framework quickstart options to render GlassPanel components wrapped in Link elements.

LANGUAGE: jsx
CODE:
{[
    {
      title: 'Next.js',
      href: '/guides/auth/server-side/nextjs',
      description:
        'Automatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.',
      icon: '/docs/img/icons/nextjs-icon',
    },
    {
      title: 'SvelteKit',
      href: '/guides/auth/server-side/sveltekit',
      description:
        'Automatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.',
      icon: '/docs/img/icons/svelte-icon',
    },
  ].map((item) => {
    return (
      <Link href={`${item.href}`} key={item.title} passHref>
        <GlassPanel title={item.title} background={false} icon={item.icon}>
          {item.description}
        </GlassPanel>
      </Link>
    )
  })}

----------------------------------------

TITLE: Enforcing MFA for New Users in PostgreSQL
DESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that enforces MFA for new users created after a specific date, while allowing both 'aal1' and 'aal2' levels for existing users.

LANGUAGE: sql
CODE:
create policy "Policy name."
  on table_name
  as restrictive -- very important!
  to authenticated
  using
    (array[(select auth.jwt()->>'aal')] <@ (
       select
         case
           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']
           else array['aal1', 'aal2']
         end as aal
       from auth.users
       where (select auth.uid()) = id));

----------------------------------------

TITLE: Creating a Policy Using auth.jwt() Function
DESCRIPTION: This SQL snippet demonstrates how to use the auth.jwt() function in a policy to check if a user belongs to a team.

LANGUAGE: sql
CODE:
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));

----------------------------------------

TITLE: Implementing Spotify OAuth Sign In - JavaScript
DESCRIPTION: JavaScript implementation for signing in users with Spotify OAuth using Supabase Auth. Uses the signInWithOAuth method with 'spotify' as the provider.

LANGUAGE: javascript
CODE:
async function signInWithSpotify() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'spotify',
  })
}

----------------------------------------

TITLE: Creating an UPDATE Policy for User Profiles
DESCRIPTION: This SQL snippet shows how to create a policy that allows users to update only their own profile.

LANGUAGE: sql
CODE:
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

alter table profiles enable row level security;

create policy "Users can update their own profile."
on profiles for update
to authenticated
using ( (select auth.uid()) = user_id )
with check ( (select auth.uid()) = user_id );

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Initialize a new Supabase project using the CLI command.

LANGUAGE: shell
CODE:
supabase init

----------------------------------------

TITLE: Role Permissions Seed Data
DESCRIPTION: SQL code for inserting initial role permissions data into the database.

LANGUAGE: sql
CODE:
insert into public.role_permissions (role, permission)
values
  ('admin', 'channels.delete'),
  ('admin', 'messages.delete'),
  ('moderator', 'messages.delete');

----------------------------------------

TITLE: Setting up environment variables for Supabase in Next.js
DESCRIPTION: Create a .env.local file with Supabase URL and anonymous key for Next.js application.

LANGUAGE: text
CODE:
NEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>

----------------------------------------

TITLE: Creating Vector Table in PostgreSQL
DESCRIPTION: SQL command to create a table that can store vector embeddings. The table includes columns for ID, title, body text, and a vector embedding of dimension 384.

LANGUAGE: sql
CODE:
create table posts (
  id serial primary key,
  title text not null,
  body text not null,
  embedding vector(384)
);

----------------------------------------

TITLE: Implementing Login and Signup Actions
DESCRIPTION: Server-side actions for handling user login and signup using Supabase authentication.

LANGUAGE: javascript
CODE:
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { createClient } from '@/utils/supabase/server'

export async function login(formData) {
  const supabase = await createClient()
  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }
  const { error } = await supabase.auth.signInWithPassword(data)
  if (error) {
    redirect('/error')
  }
  revalidatePath('/', 'layout')
  redirect('/account')
}

export async function signup(formData) {
  const supabase = await createClient()
  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }
  const { error } = await supabase.auth.signUp(data)
  if (error) {
    redirect('/error')
  }
  revalidatePath('/', 'layout')
  redirect('/account')
}

----------------------------------------

TITLE: Creating IVFFlat Index for Inner Product in SQL
DESCRIPTION: SQL command to create an IVFFlat index using the vector_ip_ops operator class for inner product distance. The index is created on the 'column_name' of the 'items' table with 100 lists.

LANGUAGE: sql
CODE:
create index on items using ivfflat (column_name vector_ip_ops) with (lists = 100);

----------------------------------------

TITLE: Creating an Index for RLS Performance
DESCRIPTION: This SQL snippet demonstrates how to create an index to improve RLS performance on a frequently used column in policies.

LANGUAGE: sql
CODE:
create index userid
on test_table
using btree (user_id);

----------------------------------------

TITLE: Creating trigger function for new user profiles in SQL for Supabase
DESCRIPTION: SQL code to create a function and trigger that automatically inserts a row into public.profiles when a new user is created in auth.users.

LANGUAGE: sql
CODE:
-- inserts a row into public.profiles
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, first_name, last_name)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

----------------------------------------

TITLE: Creating a DELETE Policy for User Profiles
DESCRIPTION: This SQL snippet demonstrates how to create a policy that allows users to delete only their own profile.

LANGUAGE: sql
CODE:
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

alter table profiles enable row level security;

create policy "Users can delete a profile."
on profiles for delete
to authenticated
using ( (select auth.uid()) = user_id );

----------------------------------------

TITLE: Advanced Full Text Search Query with Proximity Operator
DESCRIPTION: SQL and various language examples to perform a full text search using the proximity operator.

LANGUAGE: sql
CODE:
select
  *
from
  books
where
  to_tsvector(description) @@ to_tsquery('big <-> dreams');

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('books')
  .select()
  .textSearch('description', `'big' <-> 'dreams'`)

LANGUAGE: dart
CODE:
final result = await client
  .from('books')
  .select()
  .textSearch('description', "'big' <-> 'dreams'");

LANGUAGE: swift
CODE:
let response = try await client
  .from("books")
  .select()
  .textSearch("description", value: "'big' <-> 'dreams'")
  .execute()

LANGUAGE: kotlin
CODE:
val data = supabase.from("books").select {
    filter {
        textSearch("description", "'big' <-> 'dreams'", TextSearchType.NONE)
    }
}

LANGUAGE: python
CODE:
data = client.from_('books').select().text_search('description', "'big' <-> 'dreams'").execute()

----------------------------------------

TITLE: Implementing Supabase Auth in React
DESCRIPTION: React component implementation that initializes Supabase client and handles authentication state using the Auth UI component. Includes session management and auth state change subscription.

LANGUAGE: javascript
CODE:
import './index.css'
import { useState, useEffect } from 'react'
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

export default function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })

    return () => subscription.unsubscribe()
  }, [])

  if (!session) {
    return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)
  }
  else {
    return (<div>Logged in!</div>)
  }
}

----------------------------------------

TITLE: Querying Todos with Client Libraries
DESCRIPTION: Examples of fetching todos using various Supabase client libraries.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('todos').select()

LANGUAGE: dart
CODE:
final data = await supabase.from('todos').select('*');

LANGUAGE: python
CODE:
response = supabase.table('todos').select("*").execute()

LANGUAGE: swift
CODE:
let response = try await supabase.from("todos").select()

----------------------------------------

TITLE: Creating React Application
DESCRIPTION: Command to create a new React application using create-react-app scaffolding tool.

LANGUAGE: bash
CODE:
npx create-react-app my-app

----------------------------------------

TITLE: Creating a Hybrid Structured and Unstructured Metadata Table in SQL
DESCRIPTION: This SQL snippet creates a table that combines structured metadata columns with an unstructured JSONB column. It allows for both known fields with dedicated columns and flexible unknown fields in the JSON data.

LANGUAGE: sql
CODE:
create table docs (
  id uuid primary key,
  embedding vector(3),
  content text,
  url string,
  meta jsonb
);

insert into docs
  (id, embedding, content, url, meta)
values
  (
    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',
    array[0.1, 0.2, 0.3],
    'Hello world',
    '/hello-world',
    '{"key": "value"}'
  );

----------------------------------------

TITLE: Using Generated Types with supabase-js v2
DESCRIPTION: This example demonstrates how to use the generated TypeScript types to enhance type support when interacting with the Supabase client in v2.

LANGUAGE: typescript
CODE:
import type { Database } from './DatabaseDefinitions'

const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)

const { data } = await supabase.from('messages').select().match({ id: 1 })

----------------------------------------

TITLE: Executing a Database Function in SQL and Various Client Libraries
DESCRIPTION: This snippet shows how to execute the 'hello_world' function using SQL and different Supabase client libraries.

LANGUAGE: sql
CODE:
select hello_world();

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.rpc('hello_world')

LANGUAGE: dart
CODE:
final data = await supabase
  .rpc('hello_world');

LANGUAGE: swift
CODE:
try await supabase.rpc("hello_world").execute()

LANGUAGE: kotlin
CODE:
val data = supabase.postgrest.rpc("hello_world")

LANGUAGE: python
CODE:
data = supabase.rpc('hello_world').execute()

----------------------------------------

TITLE: Inserting Data into a Table using JavaScript
DESCRIPTION: JavaScript code using Supabase client to insert multiple rows into the 'movies' table.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('movies').insert([
  {
    name: 'The Empire Strikes Back',
    description:
      'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.',
  },
  {
    name: 'Return of the Jedi',
    description:
      'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.',
  },
])

----------------------------------------

TITLE: Connecting to Supabase Database with Drizzle ORM
DESCRIPTION: Set up a connection to the Supabase database using the Connection Pooler and Drizzle ORM. This code uses environment variables for the database URL.

LANGUAGE: typescript
CODE:
import 'dotenv/config'

import { drizzle } from 'drizzle-orm/postgres-js'
import postgres from 'postgres'

const connectionString = process.env.DATABASE_URL

// Disable prefetch as it is not supported for "Transaction" pool mode
export const client = postgres(connectionString, { prepare: false })
export const db = drizzle(client);

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in JavaScript
DESCRIPTION: This code snippet demonstrates how to implement Magic Link authentication using Supabase Auth in JavaScript. It includes options for preventing automatic user creation and specifying a redirect URL.

LANGUAGE: javascript
CODE:
async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithOtp({
    email: 'valid.email@supabase.io',
    options: {
      // set this to false if you do not want the user to be automatically signed up
      shouldCreateUser: false,
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}

----------------------------------------

TITLE: Initializing Supabase Vecs Client in Python
DESCRIPTION: Sets up a connection to Supabase database using vecs client. Requires a valid PostgreSQL connection string with pooling support for Google Colab compatibility.

LANGUAGE: python
CODE:
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

----------------------------------------

TITLE: Enforcing MFA for All Users in PostgreSQL
DESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that enforces MFA for all authenticated users by requiring an 'aal2' level JWT.

LANGUAGE: sql
CODE:
create policy "Policy name."
  on table_name
  as restrictive
  to authenticated
  using ((select auth.jwt()->>'aal') = 'aal2');

----------------------------------------

TITLE: Configuring Next.js Middleware for Supabase Auth
DESCRIPTION: Set up middleware to handle session refreshing and route protection for Supabase authentication.

LANGUAGE: javascript
CODE:
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })
  await supabase.auth.getUser()
  return res
}

export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
}

----------------------------------------

TITLE: Implementing Next.js Middleware for Session Management
DESCRIPTION: Setup of Next.js middleware to handle Supabase authentication and session management

LANGUAGE: typescript
CODE:
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  const {
    data: { user },
  } = await supabase.auth.getUser()

  return supabaseResponse
}

----------------------------------------

TITLE: Configuring Column Level Privileges in PostgreSQL
DESCRIPTION: Revokes table-level UPDATE privilege and grants column-level UPDATE privilege on specific columns for the authenticated role.

LANGUAGE: sql
CODE:
revoke
update
  on table public.posts
from
  authenticated;

grant
update
  (title, content) on table public.posts to authenticated;

----------------------------------------

TITLE: Using TypeScript with Supabase.js v2
DESCRIPTION: Demonstrates how to use TypeScript with Supabase.js v2, including importing database definitions and creating a typed client.

LANGUAGE: ts
CODE:
import type { Database } from './DatabaseDefinitions'

const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)

const { data } = await supabase.from('messages').select().match({ id: 1 })

----------------------------------------

TITLE: Creating an INSERT Policy for Authenticated Users
DESCRIPTION: This SQL snippet demonstrates how to create a policy that allows authenticated users to insert their own profile.

LANGUAGE: sql
CODE:
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

alter table profiles enable row level security;

create policy "Users can create a profile."
on profiles for insert
to authenticated
with check ( (select auth.uid()) = user_id );

----------------------------------------

TITLE: Enabling pg_stat_statements Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pg_stat_statements extension. It's recommended to create the extension within a separate schema to keep the public schema clean.

LANGUAGE: sql
CODE:
-- Enable the "pg_stat_statements" extension
create extension pg_stat_statements with schema extensions;

-- Disable the "pg_stat_statements" extension
drop extension if exists pg_stat_statements;

----------------------------------------

TITLE: Protecting API Routes in SvelteKit
DESCRIPTION: TypeScript code for protecting an API route in SvelteKit using Supabase authentication.

LANGUAGE: typescript
CODE:
import { json, error } from '@sveltejs/kit'

export const GET = async ({ locals: { supabase, safeGetSession } }) => {
  const { session } = await safeGetSession()
  if (!session) {
    // the user is not signed in
    throw error(401, { message: 'Unauthorized' })
  }
  const { data } = await supabase.from('test').select('*')

  return json({ data })
}

----------------------------------------

TITLE: Connecting to a Realtime Channel in TypeScript
DESCRIPTION: This snippet demonstrates how to connect to a Supabase Realtime Channel using the Supabase JavaScript client. It shows the process of creating a client, setting authentication, and subscribing to a channel.

LANGUAGE: tsx
CODE:
import { createClient } from '@supabase/supabase-js'

// Prepare client with authenticated user
const client = createClient('<url>', '<anon_key>')
client.realtime.setAuth(token)

// Prepare the realtime channel
const channel = client.channel('topic')

channel
.subscribe((status: string, err: any) => {
  if (status === 'SUBSCRIBED') {
    console.log('Connected')
  }
})

----------------------------------------

TITLE: Creating a Table with Primary Key in SQL
DESCRIPTION: SQL command to create a table named 'movies' with an auto-incrementing primary key and two text columns.

LANGUAGE: sql
CODE:
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);

----------------------------------------

TITLE: Creating a SELECT Policy for Public Access
DESCRIPTION: This SQL snippet shows how to create a policy that allows public read access to a profiles table.

LANGUAGE: sql
CODE:
create table profiles (
  id uuid primary key,
  user_id references auth.users,
  avatar_url text
);

alter table profiles enable row level security;

create policy "Public profiles are visible to everyone."
on profiles for select
to anon
using ( true );

----------------------------------------

TITLE: Creating a Next.js app with Supabase integration
DESCRIPTION: Uses create-next-app command with the with-supabase template to set up a Next.js project pre-configured with Cookie-based Auth, TypeScript, and Tailwind CSS.

LANGUAGE: bash
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Implementing Postgres Driver for Kysely
DESCRIPTION: Custom Postgres driver implementation for Kysely that manages database connections using deno-postgres. Includes connection pooling, transaction management, and query execution capabilities.

LANGUAGE: typescript
CODE:
import {
  CompiledQuery,
  DatabaseConnection,
  Driver,
  PostgresCursorConstructor,
  QueryResult,
  TransactionSettings,
} from 'https://esm.sh/kysely@0.23.4'
import { freeze, isFunction } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/object-utils.js'
import { extendStackTrace } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/stack-trace-utils.js'
import { Pool, PoolClient } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'

export interface PostgresDialectConfig {
  pool: Pool | (() => Promise<Pool>)
  cursor?: PostgresCursorConstructor
  onCreateConnection?: (connection: DatabaseConnection) => Promise<void>
}

const PRIVATE_RELEASE_METHOD = Symbol()

export class PostgresDriver implements Driver {
  readonly #config: PostgresDialectConfig
  readonly #connections = new WeakMap<PoolClient, DatabaseConnection>()
  #pool?: Pool

  constructor(config: PostgresDialectConfig) {
    this.#config = freeze({ ...config })
  }

  async init(): Promise<void> {
    this.#pool = isFunction(this.#config.pool) ? await this.#config.pool() : this.#config.pool
  }

  async acquireConnection(): Promise<DatabaseConnection> {
    const client = await this.#pool!.connect()
    let connection = this.#connections.get(client)

    if (!connection) {
      connection = new PostgresConnection(client, {
        cursor: this.#config.cursor ?? null,
      })
      this.#connections.set(client, connection)

      if (this.#config?.onCreateConnection) {
        await this.#config.onCreateConnection(connection)
      }
    }

    return connection
  }

  async beginTransaction(
    connection: DatabaseConnection,
    settings: TransactionSettings
  ): Promise<void> {
    if (settings.isolationLevel) {
      await connection.executeQuery(
        CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`)
      )
    } else {
      await connection.executeQuery(CompiledQuery.raw('begin'))
    }
  }

  async commitTransaction(connection: DatabaseConnection): Promise<void> {
    await connection.executeQuery(CompiledQuery.raw('commit'))
  }

  async rollbackTransaction(connection: DatabaseConnection): Promise<void> {
    await connection.executeQuery(CompiledQuery.raw('rollback'))
  }

  async releaseConnection(connection: PostgresConnection): Promise<void> {
    connection[PRIVATE_RELEASE_METHOD]()
  }

  async destroy(): Promise<void> {
    if (this.#pool) {
      const pool = this.#pool
      this.#pool = undefined
      await pool.end()
    }
  }
}

interface PostgresConnectionOptions {
  cursor: PostgresCursorConstructor | null
}

class PostgresConnection implements DatabaseConnection {
  #client: PoolClient
  #options: PostgresConnectionOptions

  constructor(client: PoolClient, options: PostgresConnectionOptions) {
    this.#client = client
    this.#options = options
  }

  async executeQuery<O>(compiledQuery: CompiledQuery): Promise<QueryResult<O>> {
    try {
      const result = await this.#client.queryObject<O>(compiledQuery.sql, [
        ...compiledQuery.parameters,
      ])

      if (
        result.command === 'INSERT' ||
        result.command === 'UPDATE' ||
        result.command === 'DELETE'
      ) {
        const numAffectedRows = BigInt(result.rowCount || 0)

        return {
          numUpdatedOrDeletedRows: numAffectedRows,
          numAffectedRows,
          rows: result.rows ?? [],
        } as any
      }

      return {
        rows: result.rows ?? [],
      }
    } catch (err) {
      throw extendStackTrace(err, new Error())
    }
  }

  async *streamQuery<O>(
    _compiledQuery: CompiledQuery,
    chunkSize: number
  ): AsyncIterableIterator<QueryResult<O>> {
    if (!this.#options.cursor) {
      throw new Error(
        "'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres."
      )
    }

    if (!Number.isInteger(chunkSize) || chunkSize <= 0) {
      throw new Error('chunkSize must be a positive integer')
    }

    return null
  }

  [PRIVATE_RELEASE_METHOD](): void {
    this.#client.release()
  }
}

----------------------------------------

TITLE: Signing in with Facebook OAuth using Supabase in Flutter
DESCRIPTION: This snippet shows how to implement Facebook OAuth sign-in using Supabase in a Flutter application. It uses the signInWithOAuth method from the Supabase Auth API and includes options for handling redirects and launch modes.

LANGUAGE: dart
CODE:
Future<void> signInWithFacebook() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.facebook,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Querying All Timezones in Postgres
DESCRIPTION: This SQL query retrieves a full list of timezones supported by the database. It returns the name, abbreviation, UTC offset, and daylight saving status for each timezone.

LANGUAGE: sql
CODE:
select name, abbrev, utc_offset, is_dst
from pg_timezone_names()
order by name;

----------------------------------------

TITLE: Implementing Middleware for Supabase Auth in Next.js
DESCRIPTION: This middleware function sets up Supabase authentication for a Next.js application. It creates a server client, handles cookie management, checks user authentication status, and manages redirects for unauthenticated users.

LANGUAGE: typescript
CODE:
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  return supabaseResponse
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}

----------------------------------------

TITLE: Querying JSON Data in PostgreSQL
DESCRIPTION: SQL query to select specific JSON fields from the 'metadata' column in the 'books' table, demonstrating the use of JSON operators.

LANGUAGE: sql
CODE:
select
  title,
  metadata ->> 'description' as description, -- returned as text
  metadata -> 'price' as price,
  metadata -> 'ages' -> 0 as low_age,
  metadata -> 'ages' -> 1 as high_age
from books;

----------------------------------------

TITLE: Analyzing Query Execution Plan in SQL
DESCRIPTION: Using the EXPLAIN command to analyze the query execution plan and identify potential areas for optimization.

LANGUAGE: sql
CODE:
explain select * from customers where sign_up_date > 25;

----------------------------------------

TITLE: Advanced Metadata Filtering with LangChain and Supabase (JavaScript)
DESCRIPTION: JavaScript code demonstrating advanced metadata filtering using LangChain with Supabase. It shows how to use query builder-style filtering and perform complex similarity searches with metadata filters.

LANGUAGE: javascript
CODE:
import { SupabaseFilterRPCCall, SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

// First, follow set-up instructions above

const privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const embeddings = new OpenAIEmbeddings()

  const store = new SupabaseVectorStore(embeddings, {
    client,
    tableName: 'documents',
  })

  const docs = [
    {
      pageContent:
        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to expand upon the notion of quantum fluff, a theoretical concept where subatomic particles coalesce to form transient multidimensional spaces. Yet, this abstraction holds no real-world application or comprehensible meaning, reflecting a cosmic puzzle.',
      metadata: { b: 1, c: 10, stuff: 'right' },
    },
    {
      pageContent:
        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to proceed by discussing the echo of virtual tweets in the binary corridors of the digital universe. Each tweet, like a pixelated canary, hums in an unseen frequency, a fascinatingly perplexing phenomenon that, while conjuring vivid imagery, lacks any concrete implication or real-world relevance, portraying a paradox of multidimensional spaces in the age of cyber folklore.',
      metadata: { b: 2, c: 9, stuff: 'right' },
    },
    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'right' } },
    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'wrong' } },
    { pageContent: 'hi', metadata: { b: 2, c: 8, stuff: 'right' } },
    { pageContent: 'bye', metadata: { b: 3, c: 7, stuff: 'right' } },
    { pageContent: "what's this", metadata: { b: 4, c: 6, stuff: 'right' } },
  ]

  await store.addDocuments(docs)

  const funcFilterA: SupabaseFilterRPCCall = (rpc) =>
    rpc
      .filter('metadata->b::int', 'lt', 3)
      .filter('metadata->c::int', 'gt', 7)
      .textSearch('content', `'multidimensional' & 'spaces'`, {
        config: 'english',
      })

  const resultA = await store.similaritySearch('quantum', 4, funcFilterA)

  const funcFilterB: SupabaseFilterRPCCall = (rpc) =>
    rpc
      .filter('metadata->b::int', 'lt', 3)
      .filter('metadata->c::int', 'gt', 7)
      .filter('metadata->>stuff', 'eq', 'right')

  const resultB = await store.similaritySearch('hello', 2, funcFilterB)

  console.log(resultA, resultB)
}

----------------------------------------

TITLE: Implementing MFA Verification Attempt Hook (SQL)
DESCRIPTION: SQL function to implement the MFA verification attempt hook, limiting failed attempts to once every 2 seconds and handling various scenarios.

LANGUAGE: sql
CODE:
create function public.hook_mfa_verification_attempt(event jsonb)
  returns jsonb
  language plpgsql
as $$
  declare
    last_failed_at timestamp;
  begin
    if event->'valid' is true then
      -- code is valid, accept it
      return jsonb_build_object('decision', 'continue');
    end if;

    select last_failed_at into last_failed_at
      from public.mfa_failed_verification_attempts
      where
        user_id = event->'user_id'
          and
        factor_id = event->'factor_id';

    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then
      -- last attempt was done too quickly
      return jsonb_build_object(
        'error', jsonb_build_object(
          'http_code', 429,
          'message',   'Please wait a moment before trying again.'
        )
      );
    end if;

    -- record this failed attempt
    insert into public.mfa_failed_verification_attempts
      (
        user_id,
        factor_id,
        last_refreshed_at
      )
      values
      (
        event->'user_id',
        event->'factor_id',
        now()
      )
      on conflict do update
        set last_refreshed_at = now();

    -- finally let Supabase Auth do the default behavior for a failed attempt
    return jsonb_build_object('decision', 'continue');
  end;
$$;

-- Assign appropriate permissions and revoke access
grant all
  on table public.mfa_failed_verification_attempts
  to supabase_auth_admin;

revoke all
  on table public.mfa_failed_verification_attempts
  from authenticated, anon, public;

----------------------------------------

TITLE: Listing User-Context Settings
DESCRIPTION: SQL query to list all Postgres settings with a 'user' context, which can be changed at the role or database level.

LANGUAGE: sql
CODE:
select * from pg_settings where context = 'user';

----------------------------------------

TITLE: Email Signup with Supabase Auth
DESCRIPTION: Demonstrates how to implement email signup with password using Supabase Auth. Includes options for email redirect after confirmation.

LANGUAGE: javascript
CODE:
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}

----------------------------------------

TITLE: Querying CLIP Embeddings from Supabase
DESCRIPTION: Python code to query CLIP embeddings from Supabase vector database using text input. Requires Roboflow API for text embedding and Supabase connection.

LANGUAGE: python
CODE:
infer_clip_payload = {
    "text": "cat",
}

res = requests.post(
    f"{SERVER_URL}/clip/embed_text?api_key={API_KEY}",
    json=infer_clip_payload,
)

embeddings = res.json()['embeddings']

result = images.query(
    data=embeddings[0],
    limit=1
)

print(result[0])

----------------------------------------

TITLE: Enabling and Disabling Postgres Extensions in SQL
DESCRIPTION: Demonstrates how to enable the 'pgtap' extension and disable it using SQL commands. The 'create extension' command is used to enable an extension, while 'drop extension' is used to disable it.

LANGUAGE: sql
CODE:
 -- Example: enable the "pgtap" extension and ensure it is installed
create extension pgtap
with
  schema extensions;

-- Example: disable the "pgtap" extension
drop
  extension pgtap;

----------------------------------------

TITLE: Rendering Resource Links in JSX
DESCRIPTION: This code snippet maps over an array of resources and renders them as Link components with GlassPanel content. It's used to display featured resources like Features, Architecture, and Local Development.

LANGUAGE: JSX
CODE:
{[
  {
    title: 'Features',
    hasLightIcon: true,
    href: '/guides/getting-started/features',
    description: 'A non-exhaustive list of features that Supabase provides for every project.'
  },
  {
    title: 'Architecture',
    hasLightIcon: true,
    href: '/guides/getting-started/architecture',
    description: "An overview of Supabase's architecture and product principles.",
  },
  {
    title: 'Local Development',
    hasLightIcon: true,
    href: '/guides/cli/getting-started',
    description: 'Use the Supabase CLI to develop locally and collaborate between teams.',
  }
].map((resource) => {
  return (
    <Link
      href={`${resource.href}`}
      key={resource.title}
      className={'col-span-12 md:col-span-4'}
      passHref
    >
      <GlassPanel {...resource} background={false} showIconBg={true}>
        {resource.description}
      </GlassPanel>
    </Link>
  )
})}

----------------------------------------

TITLE: Add Admin Role Custom Access Token Hook in SQL
DESCRIPTION: This SQL function creates a custom access token hook that adds an 'admin' claim to the token for users marked as admins in a profiles table. It demonstrates how to grant special permissions to certain users.

LANGUAGE: sql
CODE:
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    claims jsonb;
    is_admin boolean;
  begin
    -- Check if the user is marked as admin in the profiles table
    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;

    -- Proceed only if the user is an admin
    if is_admin then
      claims := event->'claims';

      -- Check if 'app_metadata' exists in claims
      if jsonb_typeof(claims->'app_metadata') is null then
        -- If 'app_metadata' does not exist, create an empty object
        claims := jsonb_set(claims, '{app_metadata}', '{}');
      end if;

      -- Set a claim of 'admin'
      claims := jsonb_set(claims, '{app_metadata, admin}', 'true');

      -- Update the 'claims' object in the original event
      event := jsonb_set(event, '{claims}', claims);
    end if;

    -- Return the modified or original event
    return event;
  end;
$$;

grant all
  on table public.profiles
  to supabase_auth_admin;

revoke all
  on table public.profiles
  from authenticated, anon, public;

----------------------------------------

TITLE: Creating Basic Postgres Role
DESCRIPTION: Creates a new role in Postgres without any special privileges.

LANGUAGE: sql
CODE:
create role "role_name";

----------------------------------------

TITLE: Native Apple Sign In with Expo React Native
DESCRIPTION: Implement Apple Sign In using Expo's AppleAuthentication library and pass the obtained ID token to Supabase Auth.

LANGUAGE: typescript
CODE:
import { Platform } from 'react-native'
import * as AppleAuthentication from 'expo-apple-authentication'
import { supabase } from 'app/utils/supabase'

export function Auth() {
  if (Platform.OS === 'ios')
    return (
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={{ width: 200, height: 64 }}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            })
            // Sign in via Supabase Auth.
            if (credential.identityToken) {
              const {
                error,
                data: { user },
              } = await supabase.auth.signInWithIdToken({
                provider: 'apple',
                token: credential.identityToken,
              })
              console.log(JSON.stringify({ error, user }, null, 2))
              if (!error) {
                // User is signed in.
              }
            } else {
              throw new Error('No identityToken.')
            }
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    )
  return <>{/* Implement Android Auth options. */}</>
}

----------------------------------------

TITLE: Creating a Similarity Search Function in SQL
DESCRIPTION: SQL function to perform similarity search on vector embeddings. It uses cosine distance to compare embeddings and returns matching documents above a specified threshold.

LANGUAGE: sql
CODE:
create or replace function match_documents (
  query_embedding vector(384),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  title text,
  body text,
  similarity float
)
language sql stable
as $$
  select
    documents.id,
    documents.title,
    documents.body,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where 1 - (documents.embedding <=> query_embedding) > match_threshold
  order by (documents.embedding <=> query_embedding) asc
  limit match_count;
$$;

----------------------------------------

TITLE: Using LangChain with Supabase for Vector Search (JavaScript)
DESCRIPTION: JavaScript code demonstrating how to use LangChain with Supabase for vector search. It shows initialization of the Supabase client, creation of a vector store, and performing a similarity search.

LANGUAGE: javascript
CODE:
import { SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!supabaseKey) throw new Error(`Expected SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, supabaseKey)

  const vectorStore = await SupabaseVectorStore.fromTexts(
    ['Hello world', 'Bye bye', "What's this?"],
    [{ id: 2 }, { id: 1 }, { id: 3 }],
    new OpenAIEmbeddings(),
    {
      client,
      tableName: 'documents',
      queryName: 'match_documents',
    }
  )

  const resultOne = await vectorStore.similaritySearch('Hello world', 1)

  console.log(resultOne)
}

----------------------------------------

TITLE: Creating Main Application Component
DESCRIPTION: Main React component that manages authentication state and renders appropriate components.

LANGUAGE: jsx
CODE:
import './App.css'
import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'
import Auth from './Auth'
import Account from './Account'

function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <div className="container" style={{ padding: '50px 0 100px 0' }}>
      {!session ? <Auth /> : <Account key={session.user.id} session={session} />}
    </div>
  )
}

export default App

----------------------------------------

TITLE: Creating and Populating a Books Table in PostgreSQL
DESCRIPTION: SQL code to create a 'books' table and insert sample data for full text search examples.

LANGUAGE: sql
CODE:
create table books (
  id serial primary key,
  title text,
  author text,
  description text
);

insert into books
  (title, author, description)
values
  (
    'The Poky Little Puppy',
    'Janette Sebring Lowrey',
    'Puppy is slower than other, bigger animals.'
  ),
  ('The Tale of Peter Rabbit', 'Beatrix Potter', 'Rabbit eats some vegetables.'),
  ('Tootle', 'Gertrude Crampton', 'Little toy train has big dreams.'),
  (
    'Green Eggs and Ham',
    'Dr. Seuss',
    'Sam has changing food preferences and eats unusually colored food.'
  ),
  (
    'Harry Potter and the Goblet of Fire',
    'J.K. Rowling',
    'Fourth year of school starts, big drama ensues.'
  );

----------------------------------------

TITLE: Creating After Delete Trigger
DESCRIPTION: Example of creating a trigger that executes after delete operations on a customers table.

LANGUAGE: sql
CODE:
create trigger after_delete_trigger
after delete on customers
for each row
execute function after_delete_function();

----------------------------------------

TITLE: Creating public profiles table in SQL for Supabase
DESCRIPTION: SQL code to create a public profiles table that references the auth.users table, enabling row level security and cascading deletions.

LANGUAGE: sql
CODE:
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  first_name text,
  last_name text,

  primary key (id)
);

alter table public.profiles enable row level security;

----------------------------------------

TITLE: Installing Supabase packages for SvelteKit
DESCRIPTION: Install the required Supabase packages for server-side authentication in SvelteKit.

LANGUAGE: sh
CODE:
npm install @supabase/supabase-js @supabase/ssr

----------------------------------------

TITLE: Creating Tables for Many-to-Many Relationships in SQL
DESCRIPTION: SQL code to create tables for users, teams, and a joining table for members, establishing a many-to-many relationship.

LANGUAGE: sql
CODE:
create table users (
  "id" serial primary key,
  "name" text
);

create table teams (
  "id" serial primary key,
  "team_name" text
);

create table members (
  "user_id" int references users,
  "team_id" int references teams,
  primary key (user_id, team_id)
);

----------------------------------------

TITLE: GitLab OAuth Sign In - JavaScript
DESCRIPTION: Implements GitLab OAuth authentication using Supabase Auth in JavaScript. Uses the signInWithOAuth method to initiate the OAuth flow with GitLab as the provider.

LANGUAGE: javascript
CODE:
async function signInWithGitLab() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'gitlab',
  })
}

----------------------------------------

TITLE: Revoking Column Level UPDATE Privilege in PostgreSQL
DESCRIPTION: Revokes the column-level UPDATE privilege for the 'title' column from the authenticated role.

LANGUAGE: sql
CODE:
revoke
update
  (title) on table public.posts
from
  authenticated;

----------------------------------------

TITLE: Creating a Hypertable for Time-Series Data in TimescaleDB
DESCRIPTION: SQL commands to create a table for storing temperature data and convert it into a TimescaleDB hypertable. This partitions the data based on time intervals for efficient querying.

LANGUAGE: sql
CODE:
create table temperatures (
  time timestamptz not null,
  sensor_id int not null,
  temperature double precision not null
);

select create_hypertable('temperatures', 'time');

----------------------------------------

TITLE: Creating a Secret with Custom Key ID in Supabase Vault
DESCRIPTION: This example demonstrates creating a secret with a custom key ID using the vault.create_secret() function. It shows how to generate a new key ID using pgsodium.create_key() and use it for the secret.

LANGUAGE: sql
CODE:
select vault.create_secret(
  'another_s3kre3t_key', 
  'another_unique_name',
  'This is another description',
  (pgsodium.create_key()).id
);

----------------------------------------

TITLE: Signing Out Users with Scope in JavaScript using Supabase Auth
DESCRIPTION: This snippet shows how to sign out users with different scopes using the Supabase JavaScript client library. It demonstrates both the default global scope and the local scope for signing out.

LANGUAGE: javascript
CODE:
// defaults to the global scope
await supabase.auth.signOut()

// sign out from the current session only
await supabase.auth.signOut({ scope: 'local' })

----------------------------------------

TITLE: Creating Embeddings Table with pgvector in PostgreSQL
DESCRIPTION: SQL code to create a table for storing text content and its vector embeddings using the pgvector extension. It also sets up an index for efficient similarity search.

LANGUAGE: sql
CODE:
create extension if not exists vector with schema extensions;

create table embeddings (
  id bigint primary key generated always as identity,
  content text not null,
  embedding vector (384)
);
alter table embeddings enable row level security;

create index on embeddings using hnsw (embedding vector_ip_ops);

----------------------------------------

TITLE: Client-Side Authentication with Supabase in Next.js
DESCRIPTION: Implement client-side authentication using Supabase in a Next.js Client Component.

LANGUAGE: jsx
CODE:
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()
  const supabase = createClientComponentClient()

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
    router.refresh()
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
    router.refresh()
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.refresh()
  }

  return (
    <>
      <input name="email" onChange={(e) => setEmail(e.target.value)} value={email} />
      <input
        type="password"
        name="password"
        onChange={(e) => setPassword(e.target.value)}
        value={password}
      />
      <button onClick={handleSignUp}>Sign up</button>
      <button onClick={handleSignIn}>Sign in</button>
      <button onClick={handleSignOut}>Sign out</button>
    </>
  )
}

----------------------------------------

TITLE: Creating Index After Data Import
DESCRIPTION: SQL command to create an index on a table after completing data import to optimize query performance.

LANGUAGE: sql
CODE:
-- Create an index on a table
create index index_name on table_name (column_name);

----------------------------------------

TITLE: Adding user metadata on signup in Swift for Supabase
DESCRIPTION: Swift code snippet illustrating how to add metadata to a user during the signup process using Supabase authentication.

LANGUAGE: swift
CODE:
try await supabase.auth.signUp(
  email: "valid.email@supabase.io",
  password: "example-password",
  data: [
    "first_name": .string("John"),
    "age": .integer(27),
  ]
)

----------------------------------------

TITLE: Querying Many-to-Many Joins in JavaScript
DESCRIPTION: JavaScript code using Supabase client to query teams with their related users, demonstrating a many-to-many join.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('teams').select(`
  id,
  team_name,
  users ( id, name )
`)

----------------------------------------

TITLE: Adding a CASCADE Delete Constraint in PostgreSQL
DESCRIPTION: This SQL snippet adds a new column 'mother' to the child table with a CASCADE delete constraint. It also updates an existing record to set the mother value.

LANGUAGE: sql
CODE:
alter table child
add column mother integer references parent (id)
  on delete cascade;

update child
set mother = 2
where id = 1;

----------------------------------------

TITLE: Adding Embeddings to Vector Collection
DESCRIPTION: Demonstrates how to insert vector embeddings with metadata into a collection using the upsert() method. Each vector has 3 dimensions and associated metadata.

LANGUAGE: python
CODE:
import vecs

# create vector store client
docs = vecs.get_or_create_collection(name="docs", dimension=3)

# a collection of vectors with 3 dimensions
vectors=[
  ("vec0", [0.1, 0.2, 0.3], {"year": 1973}),
  ("vec1", [0.7, 0.8, 0.9], {"year": 2012})
]

# insert our vectors
docs.upsert(vectors=vectors)

----------------------------------------

TITLE: Implementing Code Exchange for Supabase Auth
DESCRIPTION: Create a route handler to exchange an auth code for a user session in Next.js.

LANGUAGE: javascript
CODE:
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function GET(request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = cookies()
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
    await supabase.auth.exchangeCodeForSession(code)
  }

  return NextResponse.redirect(requestUrl.origin)
}

----------------------------------------

TITLE: Initializing React Project with Vite
DESCRIPTION: Commands to create a new React project using Vite and install Supabase dependencies.

LANGUAGE: bash
CODE:
npm create vite@latest supabase-react -- --template react
cd supabase-react
npm install @supabase/supabase-js

----------------------------------------

TITLE: Creating a Function for Similarity Search
DESCRIPTION: SQL function to perform similarity search on stored embeddings using cosine distance.

LANGUAGE: sql
CODE:
create or replace function match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  content text,
  similarity float
)
language sql stable
as $$
  select
    documents.id,
    documents.content,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where documents.embedding <=> query_embedding < 1 - match_threshold
  order by documents.embedding <=> query_embedding
  limit match_count;
$$;

----------------------------------------

TITLE: Creating Indexes for Query Optimization in SQL
DESCRIPTION: SQL commands to create indexes on columns used in WHERE clauses, JOIN conditions, and ORDER BY clauses to optimize query performance.

LANGUAGE: sql
CODE:
create index idx_customers_sign_up_date on customers (sign_up_date);

create index idx_orders_status on orders (status);

create index idx_orders_customer_id on orders (customer_id);

create index idx_orders_date_of_purchase on orders (date_of_purchase);

----------------------------------------

TITLE: Creating a Secret in Supabase Vault using SQL
DESCRIPTION: This snippet demonstrates how to create a secret in the Supabase Vault using the vault.create_secret() function. It shows the basic usage and the returned UUID of the new secret.

LANGUAGE: sql
CODE:
select vault.create_secret('my_s3kre3t');

----------------------------------------

TITLE: Creating Custom API Schema in SQL
DESCRIPTION: Creates a new 'api' schema and grants usage permissions to 'anon' and 'authenticated' roles. This is part of the process to expose a custom schema instead of 'public' for increased security in Supabase.

LANGUAGE: sql
CODE:
create schema if not exists api;

LANGUAGE: sql
CODE:
grant usage on schema api to anon, authenticated;

----------------------------------------

TITLE: External Database Schema with FDW
DESCRIPTION: SQL commands for setting up foreign data wrapper and creating external table references.

LANGUAGE: sql
CODE:
create schema external;
create extension postgres_fdw with schema extensions;

create server foreign_server
  foreign data wrapper postgres_fdw
  options (host '<db-host>', port '<db-port>', dbname '<db-name>');

create user mapping for authenticated
  server foreign_server
  options (user 'postgres', password '<user-password>');

import foreign schema public limit to (users, documents)
  from server foreign_server into external;

----------------------------------------

TITLE: Creating a B-Tree Index in PostgreSQL
DESCRIPTION: This SQL command creates a B-Tree index on the 'age' column of the 'persons' table to improve query performance.

LANGUAGE: sql
CODE:
create index idx_persons_age on persons (age);

----------------------------------------

TITLE: Creating a Postgres Function for Custom Access Token Hook
DESCRIPTION: SQL code to create a Postgres function that can be used as a Custom Access Token Hook in Supabase Auth.

LANGUAGE: sql
CODE:
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
declare
  -- Insert variables here
begin
  -- Insert logic here
  return event;
end;
$$;

----------------------------------------

TITLE: Creating a Function to Return a Data Set in SQL
DESCRIPTION: This example shows how to create a function that returns a set of data from a table. It uses the 'planets' table as an example.

LANGUAGE: sql
CODE:
create or replace function get_planets()
returns setof planets
language sql
as $$
  select * from planets;
$$;

----------------------------------------

TITLE: Creating a Table for Storing Documents and Embeddings
DESCRIPTION: SQL command to create a table for storing document content and their corresponding embeddings as vectors.

LANGUAGE: sql
CODE:
create table documents (
  id bigserial primary key,
  content text,
  embedding vector(1536)
);

----------------------------------------

TITLE: Overriding Auth UI Theme Variables
DESCRIPTION: Demonstrates how to override specific theme variables to customize the appearance of the Auth component.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{
      theme: ThemeSupa,
      variables: {
        default: {
          colors: {
            brand: 'red',
            brandAccent: 'darkred',
          },
        },
      },
    }}
  />
)

----------------------------------------

TITLE: Reindexing All Indexes on a Table Concurrently in PostgreSQL
DESCRIPTION: This SQL command rebuilds all indexes on the 'persons' table concurrently, allowing reads and writes during the process.

LANGUAGE: sql
CODE:
reindex table concurrently persons;

----------------------------------------

TITLE: Creating a Full Text Search Index in PostgreSQL
DESCRIPTION: SQL code to add a tsvector column and create an index for faster full text searches.

LANGUAGE: sql
CODE:
alter table
  books
add column
  fts tsvector generated always as (to_tsvector('english', description || ' ' || title)) stored;

create index books_fts on books using gin (fts);

select id, fts
from books;

----------------------------------------

TITLE: Creating a Partial Index in PostgreSQL
DESCRIPTION: This SQL command creates a partial index on the 'age' column for non-deceased persons, optimizing queries on living persons.

LANGUAGE: sql
CODE:
create index idx_living_persons_age on persons (age)
where deceased is false;

----------------------------------------

TITLE: Explaining Query Execution Plan in PostgreSQL
DESCRIPTION: This SQL command explains the execution plan for the previous query, showing how Postgres would perform a sequential scan without an index.

LANGUAGE: sql
CODE:
explain select name from persons where age = 32;

----------------------------------------

TITLE: Implementing login and signup actions with Supabase in Next.js
DESCRIPTION: Server actions for handling login and signup functionality using Supabase in a Next.js application.

LANGUAGE: typescript
CODE:
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData: FormData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

export async function signup(formData: FormData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

----------------------------------------

TITLE: Creating Local Environment File for Supabase Functions
DESCRIPTION: This bash command creates a local .env file for storing development secrets in Supabase functions.

LANGUAGE: bash
CODE:
echo "MY_NAME=Yoda" >> ./supabase/.env.local

----------------------------------------

TITLE: Multi-Owner Document Schema
DESCRIPTION: SQL schema for implementing many-to-many relationships between documents and owners using a join table.

LANGUAGE: sql
CODE:
create table document_owners (
  id bigint primary key generated always as identity,
  owner_id uuid not null references auth.users (id) default auth.uid(),
  document_id bigint not null references documents (id)
);

----------------------------------------

TITLE: Sign Out Implementation - Flutter
DESCRIPTION: Flutter function to handle user sign out and clear session data.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Validating JSON Data with pg_jsonschema in PostgreSQL
DESCRIPTION: SQL commands to create a table with a JSON column and add a check constraint using pg_jsonschema for JSON validation.

LANGUAGE: sql
CODE:
create table customers (
  id serial primary key,
  metadata json
);

alter table customers
add constraint check_metadata check (
  json_matches_schema(
    '{
        "type": "object",
        "properties": {
            "tags": {
                "type": "array",
                "items": {
                    "type": "string",
                    "maxLength": 16
                }
            }
        }
    }',
    metadata
  )
);

----------------------------------------

TITLE: Creating Pre-Request Check Function
DESCRIPTION: Creates a Postgres function that runs before each API request to perform security checks.

LANGUAGE: sql
CODE:
create function public.check_request()
  returns void
  language plpgsql
  security definer
  as $$
begin
  -- your logic here
end;
$$;

----------------------------------------

TITLE: Initializing SolidJS Project Setup
DESCRIPTION: Commands to create a new SolidJS project and install Supabase dependencies.

LANGUAGE: bash
CODE:
npx degit solidjs/templates/ts supabase-solid
cd supabase-solid
npm install @supabase/supabase-js

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the vector extension in PostgreSQL. The extension can be enabled using create extension and disabled using drop extension.

LANGUAGE: sql
CODE:
 -- Example: enable the "vector" extension.
create extension vector
with
  schema extensions;

-- Example: disable the "vector" extension
drop
  extension if exists vector;

----------------------------------------

TITLE: Creating a Foreign Key Constraint with CASCADE Delete in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a foreign key constraint with the CASCADE delete option. When a row is deleted from the parent table, all related rows in the child table will be automatically deleted.

LANGUAGE: sql
CODE:
alter table child_table
add constraint fk_parent foreign key (parent_id) references parent_table (id)
  on delete cascade;

----------------------------------------

TITLE: Exporting users with SQL query in Supabase
DESCRIPTION: SQL query to extract all users from the auth.users table in Supabase.

LANGUAGE: sql
CODE:
select * from auth.users;

----------------------------------------

TITLE: Querying Books with SQL in Supabase
DESCRIPTION: This SQL query selects the title and description from the books table, filtering for descriptions containing 'cheese', ordering by title in descending order, limiting to 5 results, and offsetting by 10.

LANGUAGE: sql
CODE:
select
  title,
  description
from
  books
where
  description ilike '%cheese%'
order by
  title desc
limit
  5
offset
  10

----------------------------------------

TITLE: Setting Auth Context in Supabase Edge Function
DESCRIPTION: Demonstrates how to initialize a Supabase client and set the authentication context using the Authorization header from the request. Uses the Supabase client to get user information from the auth token.

LANGUAGE: javascript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data } = await supabaseClient.auth.getUser(token);

})

----------------------------------------

TITLE: Enabling Row Level Security on a Table
DESCRIPTION: This SQL snippet demonstrates how to enable Row Level Security on a table in Supabase.

LANGUAGE: sql
CODE:
alter table <schema_name>.<table_name>
enable row level security;

----------------------------------------

TITLE: Inserting Array Data with Python Supabase Client
DESCRIPTION: Python code using Supabase client to insert a record containing an array.

LANGUAGE: python
CODE:
supabase.from_('arraytest').insert(
  [
    {
      id: 2,
      textarray: ["one", "two", "three", "four"]
    }
  ]
)
.execute()

----------------------------------------

TITLE: Granting Permissions for Custom Schema in SQL
DESCRIPTION: SQL commands to grant necessary permissions on the custom schema to different roles. Replace 'myschema' with your schema name.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA myschema TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON TABLES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: React component that handles user authentication using Supabase Magic Links.

LANGUAGE: jsx
CODE:
import { useState } from 'react'
import { supabase } from './supabaseClient'

export default function Auth() {
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')

  const handleLogin = async (event) => {
    event.preventDefault()

    setLoading(true)
    const { error } = await supabase.auth.signInWithOtp({ email })

    if (error) {
      alert(error.error_description || error.message)
    } else {
      alert('Check your email for the login link!')
    }
    setLoading(false)
  }

  return (
    <div className="row flex flex-center">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + React</h1>
        <p className="description">Sign in via magic link with your email below</p>
        <form className="form-widget" onSubmit={handleLogin}>
          <div>
            <input
              className="inputField"
              type="email"
              placeholder="Your email"
              value={email}
              required={true}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div>
            <button className={'button block'} disabled={loading}>
              {loading ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

----------------------------------------

TITLE: Enabling pgvector Extension in Supabase SQL
DESCRIPTION: SQL commands to enable and disable the pgvector extension in Supabase. This allows the use of vector data types in Postgres tables.

LANGUAGE: sql
CODE:
-- Example: enable the "vector" extension.
create extension vector
with
  schema extensions;

-- Example: disable the "vector" extension
drop
  extension if exists vector;

----------------------------------------

TITLE: Creating Audit Schema and Table in PostgreSQL
DESCRIPTION: Sets up a separate schema named 'audit' and creates a table 'record_version' to store audit data using JSONB for flexibility.

LANGUAGE: sql
CODE:
create schema if not exists audit;

create table audit.record_version (
  id bigserial primary key,
  -- auditing metadata
  record_id uuid, -- identifies a new record by it's table + primary key
  old_record_id uuid, -- ^
  op varchar(8) not null, -- INSERT/UPDATE/DELETE/TRUNCATE
  ts timestamptz not null default now(),
  -- table identifiers
  table_oid oid not null, -- pg internal id for a table
  table_schema name not null, -- audited table's schema name e.g. 'public'
  table_name name not null, -- audited table's table name e.g. 'account'
  -- record data
  record jsonb, -- contents of the new record
  old_record jsonb -- previous record contents (for UPDATE/DELETE)
);

----------------------------------------

TITLE: Implementing Edge Function Tests with Deno
DESCRIPTION: Complete example of a test script for Edge Functions, including client creation tests and function invocation tests using Deno's testing framework

LANGUAGE: typescript
CODE:
// Import required libraries and modules
import { assert, assertEquals } from 'https://deno.land/std@0.192.0/testing/asserts.ts'
import { createClient, SupabaseClient } from 'jsr:@supabase/supabase-js@2'

// Will load the .env file to Deno.env
import 'https://deno.land/x/dotenv@v3.2.2/load.ts'

// Set up the configuration for the Supabase client
const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? ''
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY') ?? ''
const options = {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
    detectSessionInUrl: false,
  },
}

// Test the creation and functionality of the Supabase client
const testClientCreation = async () => {
  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)

  // Verify if the Supabase URL and key are provided
  if (!supabaseUrl) throw new Error('supabaseUrl is required.')
  if (!supabaseKey) throw new Error('supabaseKey is required.')

  // Test a simple query to the database
  const { data: table_data, error: table_error } = await client
    .from('my_table')
    .select('*')
    .limit(1)
  if (table_error) {
    throw new Error('Invalid Supabase client: ' + table_error.message)
  }
  assert(table_data, 'Data should be returned from the query.')
}

// Test the 'hello-world' function
const testHelloWorld = async () => {
  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)

  // Invoke the 'hello-world' function with a parameter
  const { data: func_data, error: func_error } = await client.functions.invoke('hello-world', {
    body: { name: 'bar' },
  })

  // Check for errors from the function invocation
  if (func_error) {
    throw new Error('Invalid response: ' + func_error.message)
  }

  // Log the response from the function
  console.log(JSON.stringify(func_data, null, 2))

  // Assert that the function returned the expected result
  assertEquals(func_data.message, 'Hello bar!')
}

// Register and run the tests
Deno.test('Client Creation Test', testClientCreation)
Deno.test('Hello-world Function Test', testHelloWorld)

----------------------------------------

TITLE: Creating Main App View with Authentication State Management in SwiftUI
DESCRIPTION: Implements the main app view that manages authentication state and routes users to the appropriate view based on their authentication status.

LANGUAGE: swift
CODE:
import SwiftUI

struct AppView: View {
  @State var isAuthenticated = false

  var body: some View {
    Group {
      if isAuthenticated {
        ProfileView()
      } else {
        AuthView()
      }
    }
    .task {
      for await state in supabase.auth.authStateChanges {
        if [.initialSession, .signedIn, .signedOut].contains(state.event) {
          isAuthenticated = state.session != nil
        }
      }
    }
  }
}

----------------------------------------

TITLE: Fetching Todos via cURL
DESCRIPTION: Makes an HTTP request to the Supabase REST API endpoint to fetch todos using cURL.

LANGUAGE: bash
CODE:
curl 'https://<PROJECT_REF>.supabase.co/rest/v1/todos' \
-H "apikey: <ANON_KEY>" \
-H "Authorization: Bearer <ANON_KEY>"

----------------------------------------

TITLE: Creating Vector Table in Postgres
DESCRIPTION: SQL commands to create a new table with vector column or add vector column to existing table for storing embeddings.

LANGUAGE: sql
CODE:
create table documents (
  id bigint primary key generated always as identity,
  content text,
  embedding vector(512)
);

LANGUAGE: sql
CODE:
alter table documents
add column embedding vector(512);

----------------------------------------

TITLE: Select Statement with Basic Clauses in SQL and JavaScript
DESCRIPTION: Demonstrates how to select specific columns from a table with where, order by, and limit clauses using both SQL and the Supabase JavaScript API.

LANGUAGE: sql
CODE:
select first_name, last_name, team_id, age
from players
where age between 20 and 24 and team_id != 'STL'
order by last_name, first_name desc
limit 20;

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('players')
  .select('first_name,last_name,team_id,age')
  .gte('age', 20)
  .lte('age', 24)
  .not('team_id', 'eq', 'STL')
  .order('last_name', { ascending: true }) // or just .order('last_name')
  .order('first_name', { ascending: false })
  .limit(20)

----------------------------------------

TITLE: Updating User's Phone Number in JavaScript
DESCRIPTION: Use the supabase.auth.updateUser method to update a logged-in user's phone number. The user will receive an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.updateUser({
  phone: '123456789',
})

----------------------------------------

TITLE: Creating a Function to Find Restaurants in a Bounding Box in SQL
DESCRIPTION: SQL function to find restaurants within a given bounding box defined by minimum and maximum latitude and longitude.

LANGUAGE: sql
CODE:
create or replace function restaurants_in_view(min_lat float, min_long float, max_lat float, max_long float)
returns table (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, lat float, long float)
set search_path to ''
language sql
as $$
	select id, name, gis.st_y(location::gis.geometry) as lat, gis.st_x(location::gis.geometry) as long
	from public.restaurants
	where location operator(gis.&&) gis.ST_SetSRID(gis.ST_MakeBox2D(gis.ST_Point(min_long, min_lat), gis.ST_Point(max_long, max_lat)), 4326)
$$;

----------------------------------------

TITLE: Implementing Rate Limited Password Verification in SQL
DESCRIPTION: SQL implementation of a password verification hook that limits failed attempts to once every 10 seconds, including table creation and function definition.

LANGUAGE: sql
CODE:
create table public.password_failed_verification_attempts (
  user_id uuid not null,
  last_failed_at timestamp not null default now(),
  primary key (user_id)
);

create function public.hook_password_verification_attempt(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    last_failed_at timestamp;
  begin
    if event->'valid' is true then
      -- password is valid, accept it
      return jsonb_build_object('decision', 'continue');
    end if;

    select last_failed_at into last_failed_at
      from public.password_failed_verification_attempts
      where
        user_id = event->'user_id';

    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then
      -- last attempt was done too quickly
      return jsonb_build_object(
        'error', jsonb_build_object(
          'http_code', 429,
          'message',   'Please wait a moment before trying again.'
        )
      );
    end if;

    -- record this failed attempt
    insert into public.password_failed_verification_attempts
      (
        user_id,
        last_failed_at
      )
      values
      (
        event->'user_id',
        now()
      )
      on conflict do update
        set last_failed_at = now();

    -- finally let Supabase Auth do the default behavior for a failed attempt
    return jsonb_build_object('decision', 'continue');
  end;
$$;

----------------------------------------

TITLE: Supavisor Session Mode Connection String for Supabase
DESCRIPTION: Example of a session mode connection string for connecting to a Supabase Postgres database via a proxy. This method is ideal for persistent servers when IPv6 is not supported.

LANGUAGE: sql
CODE:
postgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Signing in with Phone OTP in JavaScript
DESCRIPTION: Use the supabase.auth.signInWithOtp method to initiate a phone login. The user receives an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signInWithOtp({
  phone: '+13334445555',
})

----------------------------------------

TITLE: Creating Stripe Products Foreign Table in SQL
DESCRIPTION: This SQL snippet shows how to create a foreign table that maps to Stripe products data using a Foreign Data Wrapper.

LANGUAGE: sql
CODE:
create foreign table stripe.stripe_products (
  id text,
  name text,
  active bool,
  default_price text,
  description text,
  created timestamp,
  updated timestamp,
  attrs jsonb
)
  server stripe_fdw_server
  options (
    object 'products',
    rowid_column 'id'
  );

----------------------------------------

TITLE: Signing out using Supabase in Flutter
DESCRIPTION: This snippet shows how to sign out a user using the Supabase Flutter client. It utilizes the signOut method to remove the user from the session and clear any stored objects.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Creating OpenAI Edge Function
DESCRIPTION: Command to scaffold a new edge function for OpenAI integration.

LANGUAGE: shell
CODE:
supabase functions new openai

----------------------------------------

TITLE: Querying Supabase data in Next.js server component
DESCRIPTION: Creates a server component that fetches data from the 'instruments' table in Supabase and renders it on the page. Uses the createClient utility for server-side Supabase interactions.

LANGUAGE: typescript
CODE:
import { createClient } from '@/utils/supabase/server';

export default async function Instruments() {
  const supabase = await createClient();
  const { data: instruments } = await supabase.from("instruments").select();

  return <pre>{JSON.stringify(instruments, null, 2)}</pre>
}

----------------------------------------

TITLE: Fetching User Data in Supabase Edge Function
DESCRIPTION: Shows how to fetch and return user data from an authenticated request. Creates a Supabase client, extracts the auth token, and returns the user object as a JSON response.

LANGUAGE: javascript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  )

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!
  const token = authHeader.replace('Bearer ', '')
  const { data } = await supabaseClient.auth.getUser(token)
  const user = data.user

  return new Response(JSON.stringify({ user }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200,
  })

})

----------------------------------------

TITLE: Executing Similarity Search with Supabase JavaScript Client
DESCRIPTION: JavaScript code to call the similarity search function using Supabase client's RPC method. It passes the query embedding and search parameters.

LANGUAGE: javascript
CODE:
const { data: documents } = await supabaseClient.rpc('match_documents', {
  query_embedding: embedding, // Pass the embedding you want to compare
  match_threshold: 0.78, // Choose an appropriate threshold for your data
  match_count: 10, // Choose the number of matches
})

----------------------------------------

TITLE: Querying Most Frequently Called Queries
DESCRIPTION: SQL query to retrieve statistics about the most frequently called queries, including execution times and average rows returned.

LANGUAGE: sql
CODE:
select
  auth.rolname,
  statements.query,
  statements.calls,
  -- -- Postgres 13, 14, 15
  statements.total_exec_time + statements.total_plan_time as total_time,
  statements.min_exec_time + statements.min_plan_time as min_time,
  statements.max_exec_time + statements.max_plan_time as max_time,
  statements.mean_exec_time + statements.mean_plan_time as mean_time,
  -- -- Postgres <= 12
  -- total_time,
  -- min_time,
  -- max_time,
  -- mean_time,
  statements.rows / statements.calls as avg_rows
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by statements.calls desc
limit 100;

----------------------------------------

TITLE: Customizing Labels in Auth UI
DESCRIPTION: Example of how to customize labels for different elements in the Auth component using localization variables.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => (
  <Auth
    supabaseClient={supabase}
    localization={{
      variables: {
        sign_in: {
          email_label: 'Your email address',
          password_label: 'Your strong password',
        },
      },
    }}
  />
)

----------------------------------------

TITLE: Creating BRIN Index for Timestamp Column in SQL
DESCRIPTION: Example of creating a BRIN (Block Range INdex) index on a timestamp column for efficient querying of time-based data.

LANGUAGE: sql
CODE:
create index idx_orders_created_at ON customers using brin(created_at);

----------------------------------------

TITLE: Signing in with Email OTP using Supabase Auth in JavaScript
DESCRIPTION: This code snippet demonstrates how to implement Email OTP authentication using Supabase Auth in JavaScript. It includes an option to prevent automatic user creation.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signInWithOtp({
  email: 'valid.email@supabase.io',
  options: {
    // set this to false if you do not want the user to be automatically signed up
    shouldCreateUser: false,
  },
})

----------------------------------------

TITLE: HTTP GET Request with pg_net
DESCRIPTION: Example of making an asynchronous HTTP GET request using pg_net's http_get function.

LANGUAGE: sql
CODE:
select
    net.http_get('https://news.ycombinator.com')
    as request_id;

----------------------------------------

TITLE: Creating Tables for Orchestral Sections and Instruments in SQL
DESCRIPTION: SQL code to create and populate tables for orchestral sections and instruments, establishing a one-to-many relationship.

LANGUAGE: sql
CODE:
create table orchestral_sections (
  "id" serial primary key,
  "name" text
);

insert into orchestral_sections
  (id, name)
values
  (1, 'strings'),
  (2, 'woodwinds');

create table instruments (
  "id" serial primary key,
  "name" text,
  "section_id" int references "orchestral_sections"
);

insert into instruments
  (name, section_id)
values
  ('violin', 1),
  ('viola', 1),
  ('flute', 2),
  ('oboe', 2);

----------------------------------------

TITLE: OpenAI Text Completion Implementation
DESCRIPTION: TypeScript code implementing text completion using OpenAI's API with streaming response handling

LANGUAGE: typescript
CODE:
const handleConfirm = React.useCallback(
  async (query: string) => {
    setAnswer(undefined)
    setQuestion(query)
    setSearch('')
    dispatchPromptData({ index: promptIndex, answer: undefined, query })
    setHasError(false)
    setIsLoading(true)

    const eventSource = new SSE(`api/vector-search`, {
      headers: {
        apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? '',
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify({ query }),
    })

    function handleError<T>(err: T) {
      setIsLoading(false)
      setHasError(true)
      console.error(err)
    }

    eventSource.addEventListener('error', handleError)
    eventSource.addEventListener('message', (e: any) => {
      try {
        setIsLoading(false)

        if (e.data === '[DONE]') {
          setPromptIndex((x) => {
            return x + 1
          })
          return
        }

        const completionResponse: CreateCompletionResponse = JSON.parse(e.data)
        const text = completionResponse.choices[0].text

        setAnswer((answer) => {
          const currentAnswer = answer ?? ''

          dispatchPromptData({
            index: promptIndex,
            answer: currentAnswer + text,
          })

          return (answer ?? '') + text
        })
      } catch (err) {
        handleError(err)
      }
    })

    eventSource.stream()

    eventSourceRef.current = eventSource

    setIsLoading(true)
  },
  [promptIndex, promptData]
)

----------------------------------------

TITLE: Creating Range Partitioned Sales Table in Postgres
DESCRIPTION: This snippet demonstrates how to create a range partitioned 'sales' table based on order dates. It includes the creation of the parent table and two monthly partitions.

LANGUAGE: sql
CODE:
create table sales (
    id bigint generated by default as identity,
    order_date date not null,
    customer_id bigint,
    amount bigint,

    -- We need to include all the
    -- partitioning columns in constraints:
    primary key (order_date, id)
)
partition by range (order_date);

create table sales_2000_01
	partition of sales
  for values from ('2000-01-01') to ('2000-02-01');

create table sales_2000_02
	partition of sales
	for values from ('2000-02-01') to ('2000-03-01');

----------------------------------------

TITLE: Enrolling MFA Factor in React
DESCRIPTION: This code snippet demonstrates how to create a React component for enrolling a new MFA factor. It includes functions for enrolling the factor, sending OTP codes, and verifying the codes.

LANGUAGE: tsx
CODE:
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [phoneNumber, setPhoneNumber] = useState('')
  const [factorId, setFactorId] = useState('')
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')
  const [challengeId, setChallengeId] = useState('')

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const verify = await auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }
  const onEnrollClicked = async () => {
    setError('')
    try {
      const factor = await auth.mfa.enroll({
        phone: phoneNumber,
        factorType: 'phone',
      })
      if (factor.error) {
        setError(factor.error.message)
        throw factor.error
      }

      setFactorId(factor.data.id)
    } catch (error) {
      setError('Failed to Enroll the Factor.')
    }
  }

  const onSendOTPClicked = async () => {
    setError('')
    try {
      const challenge = await auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      setChallengeId(challenge.data.id)
    } catch (error) {
      setError('Failed to resend the code.')
    }
  }

  return (
    <>
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        placeholder="Phone Number"
        value={phoneNumber}
        onChange={(e) => setPhoneNumber(e.target.value.trim())}
      />
      <input
        type="text"
        placeholder="Verification Code"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enroll" onClick={onEnrollClicked} />
      <input type="button" value="Submit Code" onClick={onEnableClicked} />
      <input type="button" value="Send OTP Code" onClick={onSendOTPClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}

----------------------------------------

TITLE: Enabling HypoPG Extension in SQL
DESCRIPTION: SQL commands to enable and disable the HypoPG extension in Postgres. It's recommended to create the extension in a separate schema.

LANGUAGE: sql
CODE:
-- Enable the "hypopg" extension
create extension hypopg with schema extensions;

-- Disable the "hypopg" extension
drop extension if exists hypopg;

----------------------------------------

TITLE: Custom Claims JSON Structure Example
DESCRIPTION: Example JSON structure showing custom claims that can be attached to a user for access control.

LANGUAGE: json
CODE:
{
  "user_role": "admin",
  "plan": "TRIAL",
  "user_level": 100,
  "group_name": "Super Guild!",
  "joined_on": "2022-05-20T14:28:18.217Z",
  "group_manager": false,
  "items": ["toothpick", "string", "ring"]
}

----------------------------------------

TITLE: Simple Metadata Filtering with LangChain and Supabase (JavaScript)
DESCRIPTION: JavaScript code showing how to perform simple metadata filtering when using LangChain with Supabase. It demonstrates creating a vector store and performing a similarity search with a metadata filter.

LANGUAGE: javascript
CODE:
import { SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

// First, follow set-up instructions above

const privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const vectorStore = await SupabaseVectorStore.fromTexts(
    ['Hello world', 'Hello world', 'Hello world'],
    [{ user_id: 2 }, { user_id: 1 }, { user_id: 3 }],
    new OpenAIEmbeddings(),
    {
      client,
      tableName: 'documents',
      queryName: 'match_documents',
    }
  )

  const result = await vectorStore.similaritySearch('Hello world', 1, {
    user_id: 3,
  })

  console.log(result)
}

----------------------------------------

TITLE: Downloading a File using Python
DESCRIPTION: This Python code demonstrates how to download a file from the 'avatars' bucket using the Supabase client library.

LANGUAGE: python
CODE:
response = supabase.storage.from_('avatars').download('public/avatar1.png')

----------------------------------------

TITLE: Creating Custom Prisma User in SQL
DESCRIPTION: SQL commands to create a custom Prisma user with necessary permissions on the public schema. This includes creating the user, granting privileges, and setting up default permissions.

LANGUAGE: sql
CODE:
-- Create custom user
create user "prisma" with password 'custom_password' bypassrls createdb;

-- extend prisma's privileges to postgres (necessary to view changes in Dashboard)
grant "prisma" to "postgres";

-- Grant it necessary permissions over the relevant schemas (public)
grant usage on schema public to prisma;
grant create on schema public to prisma;
grant all on all tables in schema public to prisma;
grant all on all routines in schema public to prisma;
grant all on all sequences in schema public to prisma;
alter default privileges for role postgres in schema public grant all on tables to prisma;
alter default privileges for role postgres in schema public grant all on routines to prisma;
alter default privileges for role postgres in schema public grant all on sequences to prisma;

LANGUAGE: sql
CODE:
-- alter prisma password if needed
alter user "prisma" with password 'new_password';

----------------------------------------

TITLE: Signing Out Users in JavaScript with Supabase Auth
DESCRIPTION: This snippet demonstrates how to sign out a user using the Supabase JavaScript client library. It uses an async function to call the signOut method from the auth module.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Enabling Realtime for Table in SQL
DESCRIPTION: SQL command to add a table to the supabase_realtime publication to enable real-time change notifications.

LANGUAGE: sql
CODE:
alter
  publication supabase_realtime add table todos;

----------------------------------------

TITLE: Uninstalling Auth Helpers Package for Next.js
DESCRIPTION: Command to uninstall the Supabase Auth Helpers package for Next.js.

LANGUAGE: bash
CODE:
npm uninstall @supabase/auth-helpers-nextjs

----------------------------------------

TITLE: Creating Hash Partitioned Products Table in Postgres
DESCRIPTION: This snippet shows how to create a hash partitioned 'products' table based on the id column. It includes the creation of the parent table and two partitions using modulus and remainder for even distribution.

LANGUAGE: sql
CODE:
create table products (
    id bigint generated by default as identity,
    name text,
    category text,
    price bigint
)
partition by hash (id);

create table products_one
	partition of products
  for values with (modulus 2, remainder 1);

create table products_two
	partition of products
  for values with (modulus 2, remainder 0);

----------------------------------------

TITLE: Viewing Decrypted Secrets in Supabase Vault
DESCRIPTION: This example shows how to query the vault.decrypted_secrets view to retrieve decrypted secret data. It demonstrates selecting all columns and ordering by creation date.

LANGUAGE: sql
CODE:
select * 
from vault.decrypted_secrets 
order by created_at desc 
limit 3;

----------------------------------------

TITLE: Creating Tables in Postgres SQL
DESCRIPTION: Example of creating a table with identity primary key, foreign key reference, and table comment following naming conventions

LANGUAGE: sql
CODE:
create table books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references authors (id)
);
comment on table books is 'A list of all the books in the library.';

----------------------------------------

TITLE: Retrieving user metadata in Dart for Supabase
DESCRIPTION: Dart code snippet demonstrating how to retrieve user metadata using Supabase authentication.

LANGUAGE: dart
CODE:
final User? user = supabase.auth.currentUser;
final Map<String, dynamic>? metadata = user?.userMetadata;

----------------------------------------

TITLE: Creating a Supabase client for server-side operations in Next.js
DESCRIPTION: Defines a utility function to create a Supabase client for server-side operations, handling cookie management for authentication and session management.

LANGUAGE: typescript
CODE:
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

----------------------------------------

TITLE: Linking OAuth Identity to Anonymous User in Supabase
DESCRIPTION: Demonstrates how to link an OAuth identity (e.g., Google) to an anonymous user using the linkIdentity() method.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })

----------------------------------------

TITLE: Initiating OAuth Sign-In with PKCE (Client-Side)
DESCRIPTION: This snippet shows how to initiate OAuth sign-in with PKCE flow on the client-side using Supabase. It sets a redirect URL for the callback.

LANGUAGE: javascript
CODE:
await supabase.auth.signInWithOAuth({
  provider,
  options: {
    redirectTo: `http://example.com/auth/callback`,
  },
})

----------------------------------------

TITLE: Creating and Inserting Structured Metadata with Embeddings in SQL
DESCRIPTION: This snippet demonstrates how to create a table with structured metadata columns and insert an embedding with associated metadata. It uses dedicated columns for content and URL.

LANGUAGE: sql
CODE:
create table docs (
  id uuid primary key,
  embedding vector(3),
  content text,
  url text
);

insert into docs
  (id, embedding, content, url)
values
  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', array[0.1, 0.2, 0.3], 'Hello world', '/hello-world');

----------------------------------------

TITLE: Configuring Pre-Token Generation Trigger for Amazon Cognito in Node.js
DESCRIPTION: This Lambda function demonstrates how to set up a Pre-Token Generation Trigger for Amazon Cognito to assign the 'authenticated' role to the JWT claims.

LANGUAGE: javascript
CODE:
export const handler = async (event) => {
  event.response = {
    claimsOverrideDetails: {
      claimsToAddOrOverride: {
        role: 'authenticated',
      },
    },
  }

  return event
}

----------------------------------------

TITLE: Creating Documents Table for ChatGPT Retrieval Plugin in SQL
DESCRIPTION: SQL script to create a 'documents' table for storing document embeddings. This table is used by both Postgres and Supabase implementations of the ChatGPT Retrieval Plugin.

LANGUAGE: sql
CODE:
create table if not exists documents (
    id text primary key default gen_random_uuid()::text,
    source text,
    source_id text,
    content text,
    document_id text,
    author text,
    url text,
    created_at timestamptz default now(),
    embedding vector(1536)
);

----------------------------------------

TITLE: Initializing Database for LangChain in Supabase (SQL)
DESCRIPTION: SQL script to enable pgvector extension, create a documents table, and define a function for document matching. This setup is necessary for using Supabase as a vector store with LangChain.

LANGUAGE: sql
CODE:
-- Enable the pgvector extension to work with embedding vectors
create extension vector;

-- Create a table to store your documents
create table documents (
  id bigserial primary key,
  content text, -- corresponds to Document.pageContent
  metadata jsonb, -- corresponds to Document.metadata
  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

-- Create a function to search for documents
create function match_documents (
  query_embedding vector(1536),
  match_count int default null,
  filter jsonb DEFAULT '{}'
) returns table (
  id bigint,
  content text,
  metadata jsonb,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding
  limit match_count;
end;
$$;

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users to Send Presence
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to send presence messages if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can track presence on topic"
on "realtime"."messages"
for insert
to authenticated
with check (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and name = (select realtime.topic())
      and realtime.messages.extension in ('presence')
  )
);

----------------------------------------

TITLE: Creating a Named Secret with Description in Supabase Vault
DESCRIPTION: This example shows how to create a secret with an optional unique name and description using the vault.create_secret() function. It includes all three parameters: secret value, name, and description.

LANGUAGE: sql
CODE:
select vault.create_secret('another_s3kre3t', 'unique_name', 'This is the description');

----------------------------------------

TITLE: Enabling Required Postgres Extensions
DESCRIPTION: SQL commands to enable necessary Postgres extensions including vector, pgmq, pg_net, pg_cron, and hstore for the embedding system.

LANGUAGE: sql
CODE:
create extension if not exists vector with schema extensions;
create extension if not exists pgmq;
create extension if not exists pg_net with schema extensions;
create extension if not exists pg_cron;
create extension if not exists hstore with schema extensions;

----------------------------------------

TITLE: Creating PostgreSQL Function for Vector Similarity Search
DESCRIPTION: SQL function that performs vector similarity search on embeddings. It uses the inner product distance metric and allows for filtering based on a match threshold.

LANGUAGE: sql
CODE:
create or replace function query_embeddings(embedding vector(384), match_threshold float)
returns setof embeddings
language plpgsql
as $$
begin
  return query
  select *
  from embeddings

  -- The inner product is negative, so we negate match_threshold
  where embeddings.embedding <#> embedding < -match_threshold

  -- Our embeddings are normalized to length 1, so cosine similarity
  -- and inner product will produce the same query results.
  -- Using inner product which can be computed faster.
  --
  -- For the different distance functions, see https://github.com/pgvector/pgvector
  order by embeddings.embedding <#> embedding;
end;
$$;

----------------------------------------

TITLE: Creating OG Image Handler with React in TypeScript
DESCRIPTION: Implements a React component that generates an Open Graph image using the ImageResponse API. The component creates a centered text display with a lavender background.

LANGUAGE: tsx
CODE:
import React from 'https://esm.sh/react@18.2.0'
import { ImageResponse } from 'https://deno.land/x/og_edge@0.0.4/mod.ts'

export default function handler(req: Request) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 128,
          background: 'lavender',
        }}
      >
        Hello OG Image!
      </div>
    )
  )
}

----------------------------------------

TITLE: Creating a Storage Bucket using Dart
DESCRIPTION: This Dart code demonstrates how to create a storage bucket named 'avatars' using the Supabase client library.

LANGUAGE: dart
CODE:
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .createBucket('avatars');
}

----------------------------------------

TITLE: Creating Tables with Foreign Key Constraints in PostgreSQL
DESCRIPTION: This SQL snippet creates three tables (grandparent, parent, and child) with foreign key constraints. It demonstrates different delete options including CASCADE and RESTRICT.

LANGUAGE: sql
CODE:
create table grandparent (
  id serial primary key,
  name text
);

create table parent (
  id serial primary key,
  name text,
  parent_id integer references grandparent (id)
    on delete cascade
);

create table child (
  id serial primary key,
  name text,
  father integer references parent (id)
    on delete restrict
);

insert into grandparent
  (id, name)
values
  (1, 'Elizabeth');

insert into parent
  (id, name, parent_id)
values
  (1, 'Charles', 1);

insert into parent
  (id, name, parent_id)
values
  (2, 'Diana', 1);

-- We'll just link the father for now
insert into child
  (id, name, father)
values
  (1, 'William', 1);

----------------------------------------

TITLE: Creating Supabase Storage Bucket in JavaScript
DESCRIPTION: This snippet demonstrates how to create a public storage bucket named 'avatars' using the Supabase JavaScript library. It utilizes the createBucket method from the storage module.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage.createBucket('avatars', {
  public: true, // default: false
})

----------------------------------------

TITLE: Debugging Request Example with pg_net
DESCRIPTION: Function example showing how to debug pg_net requests using Postman Echo API and logging.

LANGUAGE: sql
CODE:
create or replace function debugging_example (row_id int)
returns jsonb as $$
declare
    row_data_var jsonb;
begin
    select to_jsonb("<example_table>".*) into row_data_var
    from "<example_table>"
    where "<example_table>".id = row_id;

    perform
        net.http_post(
            url := 'https://postman-echo.com/post',
            body := row_data_var
        ) as request_id;

    raise log 'Logging an entire row as JSON (%)', row_data_var;

    return row_data_var;

exception
    when others then
        raise exception 'An error occurred: %', SQLERRM;
end;
$$ language plpgsql;

----------------------------------------

TITLE: Creating a View in SQL
DESCRIPTION: SQL command to create a view named 'transcripts' that joins multiple tables.

LANGUAGE: sql
CODE:
create view transcripts as
    select
        students.name,
        students.type,
        courses.title,
        courses.code,
        grades.result
    from grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

grant all on table transcripts to authenticated;

----------------------------------------

TITLE: Calculating Storage Cache Hit Ratio in SQL
DESCRIPTION: SQL query to calculate cache hit ratios over time from edge_logs. Groups results by hour and calculates the ratio of cache hits to total requests for storage object GET requests.

LANGUAGE: sql
CODE:
select
  timestamp_trunc(timestamp, hour) as timestamp,
  countif(h.cf_cache_status in ('HIT', 'STALE', 'REVALIDATED', 'UPDATING')) / count(f.id) as ratio
from
  edge_logs as f
  cross join unnest(f.metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(m.response) as res
  cross join unnest(res.headers) as h
where starts_with(r.path, '/storage/v1/object') and r.method = 'GET'
group by timestamp
order by timestamp desc;

----------------------------------------

TITLE: Querying One-to-Many Joins in JavaScript
DESCRIPTION: JavaScript code using Supabase client to query orchestral sections with their related instruments, demonstrating a one-to-many join.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('orchestral_sections').select(`
  id,
  name,
  instruments ( id, name )
`)

----------------------------------------

TITLE: Connecting to Postgres using supabase-js in Edge Functions
DESCRIPTION: Example of using supabase-js client to connect to a Supabase database from an Edge Function. Includes authentication handling and JSON response formatting.

LANGUAGE: typescript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req) => {
  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data, error } = await supabase.from('countries').select('*')

    if (error) {
      throw error
    }

    return new Response(JSON.stringify({ data }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (err) {
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})

----------------------------------------

TITLE: Creating private routes in SvelteKit with Supabase
DESCRIPTION: Implement private routes that are only accessible to authenticated users using Supabase in a SvelteKit application.

LANGUAGE: svelte
CODE:
<script>
  let { data, children } = $props()
  let { supabase } = $derived(data)

  const logout = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) {
      console.error(error)
    }
  }
</script>

<header>
  <nav>
    <a href="/">Home</a>
  </nav>
  <button onclick={logout}>Logout</button>
</header>
<main>
  {@render children()}
</main>

LANGUAGE: sql
CODE:
create table notes (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone not null default now(),
  user_id uuid references auth.users on delete cascade not null default auth.uid(),
  note text not null
);

alter table notes enable row level security;

revoke all on table notes from authenticated;
revoke all on table notes from anon;

grant all (note) on table notes to authenticated;
grant select (id) on table notes to authenticated;
grant delete on table notes to authenticated;

create policy "Users can access and modify their own notes"
on notes
for all
to authenticated
using ((select auth.uid()) = user_id);

LANGUAGE: svelte
CODE:
<script lang="ts">
  import { invalidate } from '$app/navigation'
  import type { EventHandler } from 'svelte/elements'

  import type { PageData } from './$types'

  let { data } = $props()
  let { notes, supabase, user } = $derived(data)

  const handleSubmit: EventHandler<SubmitEvent, HTMLFormElement> = async (evt) => {
    evt.preventDefault()
    if (!evt.target) return

    const form = evt.target as HTMLFormElement

    const note = (new FormData(form).get('note') ?? '') as string
    if (!note) return

    const { error } = await supabase.from('notes').insert({ note })
    if (error) console.error(error)

    invalidate('supabase:db:notes')
    form.reset()
  }
</script>

<h1>Private page for user: {user?.email}</h1>
<h2>Notes</h2>
<ul>
  {#each notes as note}
    <li>{note.note}</li>
  {/each}
</ul>
<form onsubmit={handleSubmit}>
  <label>
    Add a note
    <input name="note" type="text" />
  </label>
</form>

----------------------------------------

TITLE: Creating a Policy to Enforce Multi-Factor Authentication
DESCRIPTION: This SQL snippet shows how to create a policy that restricts updates based on the user's authentication assurance level.

LANGUAGE: sql
CODE:
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);

----------------------------------------

TITLE: Changing Transaction Access Mode in Postgres
DESCRIPTION: This SQL command sets the current session characteristics to allow read-write transactions, which is useful when disabling read-only mode.

LANGUAGE: sql
CODE:
set session characteristics as transaction read write;

----------------------------------------

TITLE: Creating Supabase Migration Filename
DESCRIPTION: Demonstrates the correct naming convention for Supabase migration files. The filename includes a timestamp in UTC and a short description of the migration's purpose.

LANGUAGE: plaintext
CODE:
20240906123045_create_profiles.sql

----------------------------------------

TITLE: Retrieving user metadata in Kotlin for Supabase
DESCRIPTION: Kotlin code snippet showing how to retrieve user metadata using Supabase authentication.

LANGUAGE: kotlin
CODE:
val user = supabase.auth.retrieveUserForCurrentSession()
//Or you can use the user from the current session:
val user = supabase.auth.currentUserOrNull()
val metadata = user?.userMetadata

----------------------------------------

TITLE: Server-Side Authentication with Supabase in Next.js
DESCRIPTION: Implement server-side authentication using Supabase in Next.js Server Components and Route Handlers.

LANGUAGE: jsx
CODE:
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'

export default async function ServerComponent() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}

----------------------------------------

TITLE: Querying Slowest Queries by Execution Time
DESCRIPTION: SQL query to identify the slowest queries based on maximum execution time, useful for finding outliers and optimization candidates.

LANGUAGE: sql
CODE:
select
  auth.rolname,
  statements.query,
  statements.calls,
  -- -- Postgres 13, 14, 15
  statements.total_exec_time + statements.total_plan_time as total_time,
  statements.min_exec_time + statements.min_plan_time as min_time,
  statements.max_exec_time + statements.max_plan_time as max_time,
  statements.mean_exec_time + statements.mean_plan_time as mean_time,
  -- -- Postgres <= 12
  -- total_time,
  -- min_time,
  -- max_time,
  -- mean_time,
  statements.rows / statements.calls as avg_rows
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by max_time desc
limit 100;

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to start the Next.js development server for local testing and development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating a Sample Blog Table in PostgreSQL
DESCRIPTION: SQL commands to create a 'Blog' table with id, name, and description fields, and insert a sample record. This table will be used to demonstrate GraphQL queries.

LANGUAGE: sql
CODE:
create table "Blog"(
  id serial primary key,
  name text not null,
  description text
);

insert into "Blog"(name)
values ('My Blog');

----------------------------------------

TITLE: Applying Custom Inline Styles to Auth UI
DESCRIPTION: Demonstrates how to use custom inline styles for different elements of the Auth component.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{
      style: {
        button: { background: 'red', color: 'white' },
        anchor: { color: 'blue' },
        //...
      },
    }}
  />
)

----------------------------------------

TITLE: Creating Subscription in External Postgres Database
DESCRIPTION: Creates a subscription in the external Postgres database to receive data from the Supabase publication. Requires direct connection to the Supabase database and proper authentication.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION example_sub
CONNECTION 'host=db.oaguxblfdassqxvvwtfe.supabase.co user=postgres password=YOUR_PASS dbname=postgres'
PUBLICATION example_pub
WITH (copy_data = true, create_slot=false, slot_name=example_slot);

----------------------------------------

TITLE: Creating List Partitioned Customers Table in Postgres
DESCRIPTION: This snippet demonstrates how to create a list partitioned 'customers' table based on countries. It includes the creation of the parent table and two partitions for different regions.

LANGUAGE: sql
CODE:
create table customers (
    id bigint generated by default as identity,
    name text,
    country text,

    -- We need to include all the
    -- partitioning columns in constraints:
    primary key (country, id)
)
partition by list(country);

create table customers_americas
	partition of customers
	for values in ('US', 'CANADA');

create table customers_asia
	partition of customers
  for values in ('INDIA', 'CHINA', 'JAPAN');

----------------------------------------

TITLE: Implementing TOTP MFA Enrollment Component in React
DESCRIPTION: React component that handles the MFA enrollment process, including QR code display and verification. Uses Supabase Auth MFA APIs to enroll, challenge, and verify TOTP factors.

LANGUAGE: tsx
CODE:
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [factorId, setFactorId] = useState('')
  const [qr, setQR] = useState('')
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      const challengeId = challenge.data.id

      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.auth.mfa.enroll({
        factorType: 'totp',
      })
      if (error) {
        throw error
      }

      setFactorId(data.id)
      setQR(data.totp.qr_code)
    })()
  }, [])

  return (
    <>
      {error && <div className="error">{error}</div>}
      <img src={qr} />
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enable" onClick={onEnableClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}

----------------------------------------

TITLE: HTTP POST Request with pg_net
DESCRIPTION: Example of making an asynchronous HTTP POST request with JSON body using pg_net's http_post function.

LANGUAGE: sql
CODE:
select
    net.http_post(
        url:='https://httpbin.org/post',
        body:='{"hello": "world"}'::jsonb
    ) as request_id;

----------------------------------------

TITLE: Enforcing MFA for Opted-in Users in PostgreSQL
DESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that enforces MFA only for users who have opted-in by verifying at least one MFA factor.

LANGUAGE: sql
CODE:
create policy "Policy name."
  on table_name
  as restrictive -- very important!
  to authenticated
  using (
    array[(select auth.jwt()->>'aal')] <@ (
      select
          case
            when count(id) > 0 then array['aal2']
            else array['aal1', 'aal2']
          end as aal
        from auth.mfa_factors
        where ((select auth.uid()) = user_id) and status = 'verified'
    ));

----------------------------------------

TITLE: Creating a login page with Supabase authentication in Next.js
DESCRIPTION: Implement a login page using Supabase authentication in a Next.js application.

LANGUAGE: typescript
CODE:
import { login, signup } from './actions'

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  )
}

----------------------------------------

TITLE: Unenrolling MFA Factor in React
DESCRIPTION: This React component demonstrates how to list and unenroll MFA factors using Supabase Auth. It fetches existing factors, displays them in a table, and provides a button to unenroll a selected factor.

LANGUAGE: tsx
CODE:
/**
 * UnenrollMFA shows a simple table with the list of factors together with a button to unenroll.
 * When a user types in the factorId of the factor that they wish to unenroll and clicks unenroll
 * the corresponding factor will be unenrolled.
 */
export function UnenrollMFA() {
  const [factorId, setFactorId] = useState('')
  const [factors, setFactors] = useState([])
  const [error, setError] = useState('') // holds an error message

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.auth.mfa.listFactors()
      if (error) {
        throw error
      }

      setFactors([...data.totp, ...data.phone])
    })()
  }, [])

  return (
    <>
      {error && <div className="error">{error}</div>}
      <tbody>
        <tr>
          <td>Factor ID</td>
          <td>Friendly Name</td>
          <td>Factor Status</td>
          <td>Phone Number</td>
        </tr>
        {factors.map((factor) => (
          <tr>
            <td>{factor.id}</td>
            <td>{factor.friendly_name}</td>
            <td>{factor.factor_type}</td>
            <td>{factor.status}</td>
            <td>{factor.phone}</td>
          </tr>
        ))}
      </tbody>
      <input type="text" value={verifyCode} onChange={(e) => setFactorId(e.target.value.trim())} />
      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>
    </>
  )
}

----------------------------------------

TITLE: Executing a Function with Parameters in SQL and Client Libraries
DESCRIPTION: This example shows how to execute the 'add_planet' function with parameters using SQL and various Supabase client libraries.

LANGUAGE: sql
CODE:
select * from add_planet('Jakku');

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.rpc('add_planet', { name: 'Jakku' })

LANGUAGE: dart
CODE:
final data = await supabase
  .rpc('add_planet', params: { 'name': 'Jakku' });

LANGUAGE: swift
CODE:
try await supabase.rpc(
  "add_planet",
  params: ["name": AnyJSON.string("Jakku")]
)
.execute()

LANGUAGE: kotlin
CODE:
val data = supabase.postgrest.rpc(
    function = "add_planet",
    parameters = buildJsonObject {
        put("name", "Jakku")
    }
)

LANGUAGE: python
CODE:
data = supabase.rpc('add_planet', params={'name': 'Jakku'}).execute()

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in Dart
DESCRIPTION: This code snippet demonstrates how to implement Magic Link authentication using Supabase Auth in Dart. It uses the signinwithotp method to initiate the authentication process.

LANGUAGE: dart
CODE:
Future<void> signInWithEmail() async {
  final AuthResponse res = await supabase.auth.signinwithotp(email: 'valid.email@supabase.io');
}

----------------------------------------

TITLE: Using storage.foldername() in SQL policy for authenticated uploads
DESCRIPTION: This SQL snippet shows how to create a policy that allows authenticated users to upload files to a specific folder (private) using the storage.foldername() function.

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  (storage.foldername(name))[1] = 'private'
);

----------------------------------------

TITLE: Implementing Supabase Data Query in React
DESCRIPTION: Sets up a React component that connects to Supabase, fetches instrument data from the database, and displays it in a list. Uses React hooks for state management and effect handling.

LANGUAGE: javascript
CODE:
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient("https://<project>.supabase.co", "<your-anon-key>");

function App() {
  const [instruments, setInstruments] = useState([]);

  useEffect(() => {
    getInstruments();
  }, []);

  async function getInstruments() {
    const { data } = await supabase.from("instruments").select();
    setInstruments(data);
  }

  return (
    <ul>
      {instruments.map((instrument) => (
        <li key={instrument.name}>{instrument.name}</li>
      ))}
    </ul>
  );
}

export default App;

----------------------------------------

TITLE: Creating Table with JSON Schema Check Constraint in PostgreSQL
DESCRIPTION: Example of creating a table with a JSON column and a check constraint using json_matches_schema to enforce a specific JSON Schema.

LANGUAGE: sql
CODE:
create table customer(
    id serial primary key,
    ...
    metadata json,

    check (
        json_matches_schema(
            '{
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 16
                        }
                    }
                }
            }',
            metadata
        )
    )
);

-- Example: Valid Payload
insert into customer(metadata)
values ('{"tags": ["vip", "darkmode-ui"]}');
-- Result:
--   INSERT 0 1

-- Example: Invalid Payload
insert into customer(metadata)
values ('{"tags": [1, 3]}');
-- Result:
--   ERROR:  new row for relation "customer" violates check constraint "customer_metadata_check"
--   DETAIL:  Failing row contains (2, {"tags": [1, 3]}).

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users to Send Broadcasts
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to send broadcast messages if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can send broadcast on topic"
on "realtime"."messages"
for insert
to authenticated
with check (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('broadcast')
  )
);

----------------------------------------

TITLE: Adding Tables to an Existing Publication in SQL
DESCRIPTION: This SQL command adds a new table to an existing publication.

LANGUAGE: sql
CODE:
alter publication publication_name
add table table_name;

----------------------------------------

TITLE: Copying Data from Production to Data Warehouse using SQL
DESCRIPTION: This SQL snippet demonstrates how to use a Foreign Data Wrapper to copy data from a production database to a data warehouse for the last 24 hours.

LANGUAGE: sql
CODE:
insert into warehouse.analytics
select * from public.analytics
where ts > (now() - interval '1 DAY');

----------------------------------------

TITLE: Configuring Database Connection
DESCRIPTION: Set up the database connection using environment variables and create a reusable SQL client instance. The connection string should be configured based on the Supabase dashboard settings.

LANGUAGE: typescript
CODE:
// db.js
import postgres from 'postgres'

const connectionString = process.env.DATABASE_URL
const sql = postgres(connectionString)

export default sql

----------------------------------------

TITLE: Creating MFA Failed Verification Attempts Table (SQL)
DESCRIPTION: SQL command to create a table for recording the last failed MFA verification attempt for each user and factor combination.

LANGUAGE: sql
CODE:
create table public.mfa_failed_verification_attempts (
  user_id uuid not null,
  factor_id uuid not null,
  last_failed_at timestamp not null default now(),
  primary key (user_id, factor_id)
);

----------------------------------------

TITLE: Signing out using Supabase in JavaScript
DESCRIPTION: This snippet shows how to implement sign-out functionality using Supabase's JavaScript client. It uses the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users to Read Messages on Topic
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to read messages on a specific topic using the realtime.topic() function.

LANGUAGE: sql
CODE:
create policy "authenticated can read all messages on topic"
on "realtime"."messages"
for select
to authenticated
using (
  (select realtime.topic()) = 'room-1'
);

----------------------------------------

TITLE: Implementing Resumable Uploads with Uppy and TUS in React
DESCRIPTION: This snippet shows how to use the Uppy library with the TUS plugin to implement resumable uploads in a React application. It includes setting up the Uppy dashboard and configuring the TUS plugin for Supabase Storage.

LANGUAGE: javascript
CODE:
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";
import Uppy from "@uppy/core";
import Tus from "@uppy/tus";
import Dashboard from "@uppy/dashboard";
import "@uppy/core/dist/style.min.css";
import "@uppy/dashboard/dist/style.min.css";

function App() {
    // Initialize Uppy instance with the 'sample' bucket specified for uploads
    const uppy = useUppyWithSupabase({ bucketName: "sample" });

    useEffect(() => {
        // Set up Uppy Dashboard to display as an inline component within a specified target
        uppy.use(Dashboard, {
            inline: true, // Ensures the dashboard is rendered inline
            target: "#drag-drop-area", // HTML element where the dashboard renders
            showProgressDetails: true, // Show progress details for file uploads
        });
    }, []);

    return (
        <div id="drag-drop-area">
        </div>
        {/* Target element for the Uppy Dashboard */}
    );
}

export default App;

/**
 * Custom hook for configuring Uppy with Supabase authentication and TUS resumable uploads
 * @param {Object} options - Configuration options for the Uppy instance.
 * @param {string} options.bucketName - The bucket name in Supabase where files are stored.
 * @returns {Object} uppy - Uppy instance with configured upload settings.
 */
export const useUppyWithSupabase = ({ bucketName }: { bucketName: string }) => {
    // Initialize Uppy instance only once
    const [uppy] = useState(() => new Uppy());
    // Initialize Supabase client with project URL and anon key
    const supabase = createClient(projectURL, anonKey);

    useEffect(() => {
        const initializeUppy = async () => {
        // Retrieve the current user's session for authentication
        const {
            data: { session },
        } = await supabase.auth.getSession();

        uppy.use(Tus, {
                endpoint: `${projectURL}/storage/v1/upload/resumable`, // Supabase TUS endpoint
                retryDelays: [0, 3000, 5000, 10000, 20000], // Retry delays for resumable uploads
                headers: {
                    authorization: `Bearer ${session?.access_token}`, // User session access token
                    apikey: anonKey, // API key for Supabase
                },
                uploadDataDuringCreation: true, // Send metadata with file chunks
                removeFingerprintOnSuccess: true, // Remove fingerprint after successful upload
                chunkSize: 6 * 1024 * 1024, // Chunk size for TUS uploads (6MB)
                allowedMetaFields: [
                    "bucketName",
                    "objectName",
                    "contentType",
                    "cacheControl",
                ], // Metadata fields allowed for the upload
                onError: (error) => console.error("Upload error:", error), // Error handling for uploads
            }).on("file-added", (file) => {
                // Attach metadata to each file, including bucket name and content type
                file.meta = {
                    ...file.meta,
                    bucketName, // Bucket specified by the user of the hook
                    objectName: file.name, // Use file name as object name
                    contentType: file.type, // Set content type based on file MIME type
                };
            });
        };

        // Initialize Uppy with Supabase settings
        initializeUppy();
    }, [uppy, bucketName]);

    // Return the configured Uppy instance
    return uppy;
};

----------------------------------------

TITLE: Installing and Generating Prisma Client
DESCRIPTION: Bash commands to install the Prisma client and generate its model using npm.

LANGUAGE: bash
CODE:
npm install @prisma/client
npx prisma generate

----------------------------------------

TITLE: Resend Email Provider Integration
DESCRIPTION: JavaScript implementation for integrating Resend as a custom email provider using Edge Functions.

LANGUAGE: javascript
CODE:
import { Webhook } from "https://esm.sh/standardwebhooks@1.0.0";
import { Resend } from "npm:resend";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
// ... rest of implementation

----------------------------------------

TITLE: Local Edge Function Testing Setup Commands
DESCRIPTION: Commands for setting up and running Edge Functions locally, including starting Supabase server, serving functions, and configuring environment variables

LANGUAGE: bash
CODE:
supabase start

LANGUAGE: bash
CODE:
supabase functions serve

LANGUAGE: bash
CODE:
# creates the file
touch .env
# adds the SUPABASE_URL secret
echo "SUPABASE_URL=http://localhost:54321" >> .env
# adds the SUPABASE_ANON_KEY secret
echo "SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> .env
# Alternatively, you can open it in your editor:
open .env

LANGUAGE: bash
CODE:
deno test --allow-all supabase/functions/tests/function-one-test.ts

----------------------------------------

TITLE: Creating Employees Table SQL Migration
DESCRIPTION: SQL code to create the employees table with id, name, email, and created_at columns.

LANGUAGE: sql
CODE:
create table if not exists employees (
  id bigint primary key generated always as identity,
  name text not null,
  email text,
  created_at timestamptz default now()
);

----------------------------------------

TITLE: Enabling pg_jsonschema Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pg_jsonschema extension in PostgreSQL. It's recommended to create the extension in a separate schema like 'extensions'.

LANGUAGE: sql
CODE:
-- Enable the "pg_jsonschema" extension
create extension pg_jsonschema with schema extensions;

-- Disable the "pg_jsonschema" extension
drop extension if exists pg_jsonschema;

----------------------------------------

TITLE: Signing out using Supabase in JavaScript
DESCRIPTION: This code demonstrates how to sign out a user using the Supabase JavaScript client. It calls the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Creating Posts Table with Row and Column Level Security in PostgreSQL
DESCRIPTION: Creates a 'posts' table, adds row-level security policy, and implements column-level security by revoking UPDATE privilege on the 'title' column.

LANGUAGE: sql
CODE:
create table
posts (
id bigint primary key generated always as identity,
user_id text,
title text,
content text,
created_at timestamptz default now()
updated_at timestamptz default now()
);

-- Add row-level security
create policy "Allow update for owners" on posts for
update
using ((select auth.uid()) = user_id);

-- Add column-level security
revoke
update
(title) on table public.posts
from
authenticated;

----------------------------------------

TITLE: Setting Supabase environment variables in Next.js
DESCRIPTION: Configures the .env.local file with Supabase URL and anonymous key for connecting to the Supabase project.

LANGUAGE: text
CODE:
NEXT_PUBLIC_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>

----------------------------------------

TITLE: Creating a Table with Geographic Data in SQL
DESCRIPTION: SQL command to create a table with a geographic Point type column and set a spatial index on it.

LANGUAGE: sql
CODE:
create table if not exists public.restaurants (
	id int generated by default as identity primary key,
	name text not null,
	location gis.geography(POINT) not null
);

create index restaurants_geo_index
  on public.restaurants
  using GIST (location);

----------------------------------------

TITLE: Defining CORS Headers in TypeScript
DESCRIPTION: Creates reusable CORS headers configuration in a shared module. Defines essential headers for cross-origin access including origin, allowed headers, and authentication-related parameters.

LANGUAGE: typescript
CODE:
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

----------------------------------------

TITLE: Querying Time-Series Data with TimescaleDB Functions
DESCRIPTION: SQL query using TimescaleDB's time_bucket function to group and analyze time-series data. This example calculates average temperature readings for a specific sensor within hourly intervals.

LANGUAGE: sql
CODE:
select
    time_bucket('1 hour', time) AS hour,
    avg(temperature) AS average_temperature
from
    temperatures
where
    sensor_id = 1
    and time > NOW() - interval '1 hour'
group by
    hour;

----------------------------------------

TITLE: Copying Objects Within Same Bucket in Supabase Storage (JavaScript)
DESCRIPTION: This snippet demonstrates how to copy an object within the same bucket using the Supabase Storage API. It uses the 'copy' method to duplicate an object from one location to another in the 'avatars' bucket.

LANGUAGE: javascript
CODE:
await supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png')

----------------------------------------

TITLE: Implementing login and signup in SvelteKit with Supabase
DESCRIPTION: Create a login page with signup and login functionality using Supabase authentication in a SvelteKit application.

LANGUAGE: ts
CODE:
import { redirect } from '@sveltejs/kit'

import type { Actions } from './$types'

export const actions: Actions = {
  signup: async ({ request, locals: { supabase } }) => {
    const formData = await request.formData()
    const email = formData.get('email') as string
    const password = formData.get('password') as string

    const { error } = await supabase.auth.signUp({ email, password })
    if (error) {
      console.error(error)
      redirect(303, '/auth/error')
    } else {
      redirect(303, '/')
    }
  },
  login: async ({ request, locals: { supabase } }) => {
    const formData = await request.formData()
    const email = formData.get('email') as string
    const password = formData.get('password') as string

    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) {
      console.error(error)
      redirect(303, '/auth/error')
    } else {
      redirect(303, '/private')
    }
  },
}

LANGUAGE: svelte
CODE:
<form method="POST" action="?/login">
  <label>
    Email
    <input name="email" type="email" />
  </label>
  <label>
    Password
    <input name="password" type="password" />
  </label>
  <button>Login</button>
  <button formaction="?/signup">Sign up</button>
</form>

----------------------------------------

TITLE: Filtering Postgres Logs for Errors with Unnested Metadata in SQL
DESCRIPTION: This comprehensive example shows how to filter Postgres logs for error messages, unnesting the metadata to access specific fields. It selects the timestamp, error severity, user name, and event message, ordering results by timestamp descending.

LANGUAGE: sql
CODE:
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  parsed.error_severity,
  parsed.user_name,
  event_message
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Creates a Supabase client instance with project URL and anon key

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://<project>.supabase.co',
  '<your-anon-key>'
)

----------------------------------------

TITLE: Implementing Phone Authentication in Flutter
DESCRIPTION: Implementation of phone authentication form with sign-up action.

LANGUAGE: dart
CODE:
SupaPhoneAuth(
  authAction: SupaAuthAction.signUp,
  onSuccess: (AuthResponse response) {},
)

----------------------------------------

TITLE: Implementing Hybrid Search Function in PostgreSQL
DESCRIPTION: SQL function that implements hybrid search combining full text and semantic search using Reciprocal Rank Fusion (RRF).

LANGUAGE: sql
CODE:
create or replace function hybrid_search(
  query_text text,
  query_embedding vector(512),
  match_count int,
  full_text_weight float = 1,
  semantic_weight float = 1,
  rrf_k int = 50
)
returns setof documents
language sql
as $$
with full_text as (
  select
    id,
    row_number() over(order by ts_rank_cd(fts, websearch_to_tsquery(query_text)) desc) as rank_ix
  from
    documents
  where
    fts @@ websearch_to_tsquery(query_text)
  order by rank_ix
  limit least(match_count, 30) * 2
),
semantic as (
  select
    id,
    row_number() over (order by embedding <#> query_embedding) as rank_ix
  from
    documents
  order by rank_ix
  limit least(match_count, 30) * 2
)
select
  documents.*
from
  full_text
  full outer join semantic
    on full_text.id = semantic.id
  join documents
    on coalesce(full_text.id, semantic.id) = documents.id
order by
  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +
  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight
  desc
limit
  least(match_count, 30)
$$;

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Kotlin
DESCRIPTION: This snippet shows how to upload a file to Supabase Storage using the standard upload method in Kotlin. It provides two options: uploading bytes or streaming from a file on JVM/Android.

LANGUAGE: kotlin
CODE:
supabase.storage.from("bucket_name").upload("file_path", bytes)

//Or on JVM/Android: (This will stream the data from the file to supabase)
supabase.storage.from("bucket_name").upload("file_path", file)

----------------------------------------

TITLE: Streaming Updates with Supabase in JavaScript
DESCRIPTION: This JavaScript snippet shows how to use Supabase client to subscribe to UPDATE events on a database. It creates a channel and listens for postgres_changes events with the 'UPDATE' type in the 'public' schema.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Creating Composite Index in SQL
DESCRIPTION: Creating a composite index on multiple columns to optimize queries that filter or join on these columns simultaneously.

LANGUAGE: sql
CODE:
create index idx_customers_sign_up_date_priority on customers (sign_up_date, priority);

----------------------------------------

TITLE: Implementing WorkOS OAuth Sign-in with Supabase
DESCRIPTION: Function to initiate WorkOS OAuth authentication flow using Supabase's auth client. Includes provider configuration and redirect handling.

LANGUAGE: javascript
CODE:
async function signInWithWorkOS() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'workos',
    options: {
      redirectTo: 'http://example.com/auth/v1/callback',
      queryParams: {
        connection: '<connection_id>',
      },
    },
  })

  if (data.url) {
    redirect(data.url)
  }
}

----------------------------------------

TITLE: Deploying Edge Functions with GitLab CI
DESCRIPTION: GitLab CI pipeline configuration that sets up Node.js environment and deploys Edge Functions. Includes stages for setup and deployment, with NPM dependency caching and Docker service integration.

LANGUAGE: yaml
CODE:
image: node:20

stages:
  - setup
  - deploy

setup-npm:
  stage: setup
  script:
    - npm i supabase
  cache:
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/

deploy-function:
  stage: deploy
  script:
    - npx supabase init
    - npx supabase functions deploy --debug
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375

----------------------------------------

TITLE: Connecting to Supabase Postgres with SSL Verification
DESCRIPTION: This command demonstrates how to connect to a Supabase Postgres database using psql with full SSL verification.

LANGUAGE: bash
CODE:
psql "postgresql://aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=verify-full" -U postgres.<user>

----------------------------------------

TITLE: Granting Table Permissions in Custom API Schema
DESCRIPTION: Demonstrates how to grant specific permissions on tables within the custom 'api' schema to 'anon' and 'authenticated' roles. This allows for fine-grained control over data access in Supabase.

LANGUAGE: sql
CODE:
grant select on table api.<your_table> to anon;
grant select, insert, update, delete on table api.<your_table> to authenticated;

----------------------------------------

TITLE: Extended JWT Payload with Custom Data in JavaScript
DESCRIPTION: Shows how additional custom data can be included in a JWT payload, such as user preferences.

LANGUAGE: javascript
CODE:
{
  "sub": "0002",
  "name": "Věra Hrabánková",
  "iat": 1516239022,
  "exp": 1518239022,
  "theme": {
      "primary" : "#D80C14",
      "secondary" : "#FFFFFF"
  }
}

----------------------------------------

TITLE: Signing JWT with jsonwebtoken Library in JavaScript
DESCRIPTION: Demonstrates how to sign a JWT using the jsonwebtoken library in JavaScript.

LANGUAGE: javascript
CODE:
let token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Setup of Supabase client using environment variables in TypeScript.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

----------------------------------------

TITLE: Scheduling a Cron Job in SQL
DESCRIPTION: Creates a new scheduled job using cron syntax. The job name must be unique and cannot be edited once created.

LANGUAGE: sql
CODE:
select cron.schedule('permanent-cron-job-name', '30 seconds', 'CALL do_something()');

----------------------------------------

TITLE: Verifying OTP and Handling Server-Side Authentication in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to verify the OTP on the server-side using the verifyOtp method from Supabase Auth. It extracts parameters from the URL and authenticates the user.

LANGUAGE: javascript
CODE:
const { token_hash, type } = Object.fromEntries(new URLSearchParams(window.location.search))
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({ token_hash, type })

// subsequently redirect the user back to the client using the redirect_to param
// ...

----------------------------------------

TITLE: TypeScript Types for Joins in Supabase
DESCRIPTION: TypeScript code demonstrating how to use helper types to get strongly-typed results from Supabase queries, including nested types for database joins.

LANGUAGE: typescript
CODE:
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const sectionsWithInstrumentsQuery = supabase.from('orchestral_sections').select(`
  id,
  name,
  instruments (
    id,
    name
  )
`)
type SectionsWithInstruments = QueryData<typeof sectionsWithInstrumentsQuery>

const { data, error } = await sectionsWithInstrumentsQuery
if (error) throw error
const sectionsWithInstruments: SectionsWithInstruments = data

----------------------------------------

TITLE: Signing in with Facebook OAuth using Supabase in Swift
DESCRIPTION: This snippet illustrates how to implement Facebook OAuth sign-in using Supabase in a Swift application. It uses the signInWithOAuth method from the Supabase Auth API and includes handling for custom URL schemes and OAuth flow.

LANGUAGE: swift
CODE:
func signInWithFacebook() async throws {
  try await supabase.auth.signInWithOAuth(
    provider: .facebook,
    redirectTo: URL(string: "my.scheme://my-host")!,
    launchFlow: { url in
      // use url to start OAuth flow
      // and return a result url that contains the OAuth token.
      // ...
      return resultURL
    }
  )
}

----------------------------------------

TITLE: Creating pgcrypto Extension and Encrypting User Emails in PostgreSQL
DESCRIPTION: This snippet demonstrates creating the pgcrypto extension and using it to encrypt user emails with a symmetric key. It highlights the issue of using raw keys in encryption functions.

LANGUAGE: sql
CODE:
create extension pgcrypto;

create table users (
  id serial primary key,
  email varchar not null unique
);

insert into users
  (email)
values
  (pgp_sym_encrypt('alice@supabase.io', 's3kr3t_k3y')),
  (pgp_sym_encrypt('bob@supabase.io', 's3kr3t_key'));

----------------------------------------

TITLE: Revoking Role Permissions
DESCRIPTION: Removes specific permissions from a role for a given database object.

LANGUAGE: sql
CODE:
REVOKE permission_type ON object_name FROM role_name;

----------------------------------------

TITLE: Building Complete Form with React Hook Form and Custom Components
DESCRIPTION: Demonstrates the full implementation of a form using React Hook Form, custom Form components, and Zod validation.

LANGUAGE: tsx
CODE:
'use client'

import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { Button } from '@/components/ui/button'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'

const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>This is your public display name.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}

----------------------------------------

TITLE: Deleting Objects from Supabase Storage Bucket using JavaScript
DESCRIPTION: Demonstrates how to remove single or multiple objects from a Supabase storage bucket using the remove method. Objects are specified by their paths in an array format.

LANGUAGE: javascript
CODE:
await supabase.storage.from('bucket').remove(['object-path-2', 'folder/avatar2.png'])

----------------------------------------

TITLE: Querying RUM Index with Text Distance Operator
DESCRIPTION: Example of querying a RUM index using text distance operator for ranked search results.

LANGUAGE: sql
CODE:
SELECT t, a `<=>` to_tsquery('english', 'beautiful | place') AS rank
    FROM test_rum
    WHERE a @@ to_tsquery('english', 'beautiful | place')
    ORDER BY a `<=>` to_tsquery('english', 'beautiful | place');

----------------------------------------

TITLE: Implementing SMS Job Queue System in SQL
DESCRIPTION: Creates a job queue system for sending SMS messages in periodic intervals using PostgreSQL and pg_cron. Includes table creation, job management functions, and scheduling logic.

LANGUAGE: sql
CODE:
create table job_queue (
  job_id uuid primary key default gen_random_uuid(),
  job_data jsonb not null,
  created_at timestamp default now(),
  status text default 'pending',
  priority int default 0,
  retry_count int default 0,
  max_retries int default 2,
  scheduled_at timestamp default now()
);

LANGUAGE: sql
CODE:
create or replace function send_sms(event jsonb) returns void as $$
declare
    job_data jsonb;
    scheduled_time timestamp;
    priority int;
begin
    job_data := jsonb_build_object(
        'phone', event->'user'->>'phone',
        'otp', event->'sms'->>'otp'
    );
    scheduled_time := date_trunc('minute', now()) + interval '5 minute' * floor(extract('epoch' from (now() - date_trunc('minute', now())) / 60) / 5);
    priority := extract('epoch' from (scheduled_time - now()))::int;
    insert into job_queue (job_data, priority, scheduled_at, max_retries)
    values (job_data, priority, scheduled_time, 2);
end;
$$ language plpgsql;

----------------------------------------

TITLE: Implementing Postgres Notifications in Elixir
DESCRIPTION: This code demonstrates how to use Postgrex to listen for and send Postgres notifications in Elixir. It sets up a connection, listens on a channel, sends a notification, and receives the message.

LANGUAGE: elixir
CODE:
Mix.install([{:postgrex, "~> 0.17.3"}])
config = [
  hostname: "localhost",
  username: "postgres",
  password: "postgres",
  database: "postgres",
  port: 5432
]
{:ok, db_notification_pid} = Postgrex.Notifications.start_link(config)
Postgrex.Notifications.listen!(db_notification_pid, "channel")
{:ok, db_conn_pid} = Postgrex.start_link(config)
Postgrex.query!(db_conn_pid, "NOTIFY channel, 'payload'", [])

receive do msg -> IO.inspect(msg) end
# Mailbox will have a message with the following content:
# {:notification, #PID<0.223.0>, #Reference<0.57446457.3896770561.212335>, "channel", "test"}

----------------------------------------

TITLE: Deploying Supabase Edge Function
DESCRIPTION: Commands to deploy the Edge Function and set environment secrets.

LANGUAGE: bash
CODE:
supabase functions deploy upstash-redis-counter --no-verify-jwt
supabase secrets set --env-file supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Granting Select Permission to Service Role in SQL
DESCRIPTION: This SQL snippet shows how to grant SELECT permission on the 'auth.users' table to the 'service_role', which is useful for running data analytics jobs on the backend.

LANGUAGE: sql
CODE:
grant
select
  on table auth.users to service_role;

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Helper file to initialize the Supabase client with environment variables.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

----------------------------------------

TITLE: Writing pgTAP Test for Supabase Database Column
DESCRIPTION: Demonstrates how to write a simple pgTAP test to check for the existence of an 'id' column in the 'auth.users' table.

LANGUAGE: sql
CODE:
begin;
select plan(1); -- only one statement to run

SELECT has_column(
    'auth',
    'users',
    'id',
    'id should exist'
);

select * from finish();
rollback;

----------------------------------------

TITLE: Updating Anonymous User to Permanent User in Supabase
DESCRIPTION: Shows how to convert an anonymous user to a permanent user by updating their email and password using the updateUser() method.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.updateUser({ email: 'valid.email@supabase.io' })

// verify the user's email by clicking on the email change link
// or entering the 6-digit OTP sent to the email address

// once the user has been verified, update the password
const { data, error } = await supabase.auth.updateUser({ password: 'password' })

----------------------------------------

TITLE: Creating a View for Monitoring Blocked Transactions in PostgreSQL
DESCRIPTION: This SQL script creates a view named 'lock_monitor' that helps in monitoring currently blocked database transactions during the ALTER TABLE process. It provides detailed information about locked items, waiting duration, and blocked/blocking queries.

LANGUAGE: sql
CODE:
create view  public.lock_monitor as
select
  coalesce(
    blockingl.relation::regclass::text,
    blockingl.locktype
  ) as locked_item,
  now() - blockeda.query_start as waiting_duration,
  blockeda.pid as blocked_pid,
  blockeda.query as blocked_query,
  blockedl.mode as blocked_mode,
  blockinga.pid as blocking_pid,
  blockinga.query as blocking_query,
  blockingl.mode as blocking_mode
from
  pg_locks blockedl
  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid
  join pg_locks blockingl on (
    blockingl.transactionid = blockedl.transactionid
    or blockingl.relation = blockedl.relation
    and blockingl.locktype = blockedl.locktype
  )
  and blockedl.pid <> blockingl.pid
  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid
  and blockinga.datid = blockeda.datid
where
  not blockedl.granted
  and blockinga.datname = current_database();

----------------------------------------

TITLE: Creating Todo Table with Row Level Security in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'todos' table with user authentication, sets up row level security, and defines policies for CRUD operations. It ensures that users can only access and modify their own todos.

LANGUAGE: sql
CODE:
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);

----------------------------------------

TITLE: Making API Request with Supabase Anon Key in Bash
DESCRIPTION: Shows how to make an API request to Supabase using the anon key JWT for authentication.

LANGUAGE: bash
CODE:
curl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \
-H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c"

----------------------------------------

TITLE: Implementing Semantic Search Function with Cosine Distance
DESCRIPTION: SQL function that performs semantic search using cosine distance operator for comparing embeddings.

LANGUAGE: sql
CODE:
create or replace function match_documents (
  query_embedding vector(512),
  match_threshold float,
  match_count int
)
returns setof documents
language sql
as $$
  select *
  from documents
  where documents.embedding <=> query_embedding < 1 - match_threshold
  order by documents.embedding <=> query_embedding asc
  limit least(match_count, 200);
$$;

----------------------------------------

TITLE: Creating Login Role with Password
DESCRIPTION: Creates a role with login privileges and password authentication capabilities.

LANGUAGE: sql
CODE:
create role "role_name" with login password 'extremely_secure_password';

----------------------------------------

TITLE: Creating Before Insert Trigger
DESCRIPTION: Example of creating a trigger that executes before insert operations on an orders table.

LANGUAGE: sql
CODE:
create trigger before_insert_trigger
before insert on orders
for each row
execute function before_insert_function();

----------------------------------------

TITLE: Signing in with Twitch OAuth using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Twitch OAuth sign-in using the Supabase JavaScript client. It uses the signInWithOAuth method with 'twitch' as the provider.

LANGUAGE: javascript
CODE:
async function signInWithTwitch() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'twitch',
  })
}

----------------------------------------

TITLE: Adding user metadata on signup in JavaScript for Supabase
DESCRIPTION: JavaScript code snippet demonstrating how to add metadata to a user during the signup process using Supabase authentication.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'example-password',
  options: {
    data: {
      first_name: 'John',
      age: 27,
    },
  },
})

----------------------------------------

TITLE: Applying Predefined Theme to Auth UI
DESCRIPTION: Demonstrates how to import and apply a predefined theme (ThemeSupa) to the Auth component.

LANGUAGE: javascript
CODE:
import { Auth } from '@supabase/auth-ui-react'
import {
  // Import predefined theme
  ThemeSupa,
} from '@supabase/auth-ui-shared'

const supabase = createClient(
  '<INSERT PROJECT URL>',
  '<INSERT PROJECT ANON API KEY>'
)

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{ theme: ThemeSupa }}
  />
)

----------------------------------------

TITLE: Resetting Sequence Value in PostgreSQL
DESCRIPTION: This SQL command resets the sequence to the next available value that's higher than any existing primary key in the sequence. It should be run after backing up the database to ensure data safety.

LANGUAGE: sql
CODE:
SELECT SETVAL('public.<table_name>_<column_nam>_seq', (SELECT MAX(<column_name>) FROM <table_name>)+1);

----------------------------------------

TITLE: Configuring Pre-Request Function
DESCRIPTION: SQL commands to configure and activate the pre-request check function.

LANGUAGE: sql
CODE:
alter role authenticator
  set pgrst.db_pre_request = 'public.check_request';

LANGUAGE: sql
CODE:
notify pgrst, 'reload config';

----------------------------------------

TITLE: pgTAP Database Unit Tests
DESCRIPTION: SQL test cases using pgTAP to verify Row Level Security policies, including user access control and data manipulation restrictions.

LANGUAGE: sql
CODE:
begin;
-- install tests utilities
-- install pgtap extension for testing
create extension if not exists pgtap with schema extensions;
-- Start declare we'll have 4 test cases in our test suite
select plan(4);

-- Setup our testing data
-- Set up auth.users entries
insert into auth.users (id, email) values
	('123e4567-e89b-12d3-a456-426614174000', 'user1@test.com'),
	('987fcdeb-51a2-43d7-9012-345678901234', 'user2@test.com');

-- Create test todos
insert into public.todos (task, user_id) values
	('User 1 Task 1', '123e4567-e89b-12d3-a456-426614174000'),
	('User 1 Task 2', '123e4567-e89b-12d3-a456-426614174000'),
	('User 2 Task 1', '987fcdeb-51a2-43d7-9012-345678901234');

-- as User 1
set local role authenticated;
set local request.jwt.claim.sub = '123e4567-e89b-12d3-a456-426614174000';

-- Test 1: User 1 should only see their own todos
select results_eq(
	'select count(*) from todos',
	ARRAY[2::bigint],
	'User 1 should only see their 2 todos'
);

-- Test 2: User 1 can create their own todo
select lives_ok(
	$$insert into todos (task, user_id) values ('New Task', '123e4567-e89b-12d3-a456-426614174000'::uuid)$$,
	'User 1 can create their own todo'
);

-- as User 2
set local request.jwt.claim.sub = '987fcdeb-51a2-43d7-9012-345678901234';

-- Test 3: User 2 should only see their own todos
select results_eq(
	'select count(*) from todos',
	ARRAY[1::bigint],
	'User 2 should only see their 1 todo'
);

-- Test 4: User 2 cannot modify User 1's todo
SELECT results_ne(
	$$ update todos set task = 'Hacked!' where user_id = '123e4567-e89b-12d3-a456-426614174000'::uuid returning 1 $$,
	$$ values(1) $$,
	'User 2 cannot modify User 1 todos'
);

select * from finish();
rollback;

----------------------------------------

TITLE: Signing in with Twitter OAuth using Supabase in Flutter
DESCRIPTION: This snippet shows how to implement Twitter OAuth sign-in using Supabase's Flutter client. It uses the signInWithOAuth method with OAuthProvider.twitter as the provider and includes optional parameters for redirect and launch mode.

LANGUAGE: dart
CODE:
Future<void> signInWithTwitter() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.twitter,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Signing in with Twitch OAuth using Supabase in Flutter
DESCRIPTION: This code snippet shows how to implement Twitch OAuth sign-in using the Supabase Flutter client. It uses the signInWithOAuth method with OAuthProvider.twitch as the provider and includes options for redirect and launch mode.

LANGUAGE: dart
CODE:
Future<void> signInWithTwitch() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.twitch,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Creating a View for Vector Collection in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a view to expose a vector collection ('docs') in the public schema. It selects the id, embedding, metadata, and extracts the URL from the metadata.

LANGUAGE: sql
CODE:
create view public.docs as
select
  id,
  embedding,
  metadata, # Expose the metadata as JSON
  (metadata->>'url')::text as url # Extract the URL as a string
from vector

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in Python
DESCRIPTION: This code snippet shows how to implement Magic Link authentication using Supabase Auth in Python. It includes options for preventing automatic user creation and specifying a redirect URL.

LANGUAGE: python
CODE:
response = supabase.auth.sign_in_with_otp({
  'email': 'valid.email@supabase.io',
  'options': {
    # set this to false if you do not want the user to be automatically signed up
    'should_create_user': False,
    'email_redirect_to': 'https://example.com/welcome',
  },
})

----------------------------------------

TITLE: Querying Cache and Index Hit Rates
DESCRIPTION: SQL query to check the cache and index hit rates, which indicate how efficiently the database is using its memory cache.

LANGUAGE: sql
CODE:
select
  'index hit rate' as name,
  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) * 100 as ratio
from pg_statio_user_indexes
union all
select
  'table hit rate' as name,
  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) * 100 as ratio
from pg_statio_user_tables;

----------------------------------------

TITLE: Creating Signed URL for Private Supabase Storage Asset
DESCRIPTION: Demonstrates how to create a time-limited signed URL for accessing a private asset in Supabase Storage. This method allows controlled access to private files for a specified duration.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage
  .from('bucket')
  .createSignedUrl('private-document.pdf', 3600)

if (data) {
  console.log(data.signedUrl)
}

----------------------------------------

TITLE: Creating Hypothetical Index and Analyzing Query Plan
DESCRIPTION: SQL commands to create a hypothetical index using HypoPG and re-run the explain plan, demonstrating the potential benefit of an index.

LANGUAGE: sql
CODE:
select * from hypopg_create_index('create index on account(id)');

explain select * from account where id=1;

----------------------------------------

TITLE: Initializing Supabase Client with Explicit Options
DESCRIPTION: Example of creating a Supabase client with explicit constructor options for database, authentication, realtime, and global settings.

LANGUAGE: jsx
CODE:
const supabase = createClient(apiURL, apiKey, {
  db: {
    schema: 'public',
  },
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
  realtime: {
    channels,
    endpoint,
  },
  global: {
    fetch: customFetch,
    headers: DEFAULT_HEADERS,
  },
})

----------------------------------------

TITLE: Custom Error Response Example
DESCRIPTION: Example of raising a custom HTTP error response with additional headers and details.

LANGUAGE: sql
CODE:
raise sqlstate 'PGRST' using
  message = json_build_object(
    'code',    '123',
    'message', 'Payment Required',
    'details', 'Quota exceeded',
    'hint',    'Upgrade your plan')::text,
  detail = json_build_object(
    'status',  402,
    'headers', json_build_object(
      'X-Powered-By', 'Nerd Rage'))::text;

----------------------------------------

TITLE: Installing Dependencies for Hono and Supabase
DESCRIPTION: Install the necessary dependencies, including @supabase/supabase-js and @supabase/ssr for server-side authentication.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Sending a Message to PGMQ Queue in SQL
DESCRIPTION: Sends a single message to a queue using the pgmq.send function.

LANGUAGE: sql
CODE:
select * from pgmq.send('my_queue', '{"hello": "world"}');

----------------------------------------

TITLE: Testing Table Columns with pgTAP
DESCRIPTION: Tests for verifying column existence and primary key constraints. Checks if a specific column exists and if it's configured as a primary key.

LANGUAGE: sql
CODE:
begin;
select plan( 2 );

select has_column( 'profiles', 'id' ); -- test that the "id" column exists in the "profiles" table
select col_is_pk( 'profiles', 'id' ); -- test that the "id" column is a primary key

select * from finish();
rollback;

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: JavaScript code to initialize the Supabase client with project URL and anonymous key.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String for Supabase
DESCRIPTION: Example of a transaction mode connection string for connecting to a Supabase Postgres database via a proxy that serves as a connection pooler. This method is ideal for serverless or edge functions requiring many transient connections.

LANGUAGE: sql
CODE:
postgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Implementing CORS in Edge Function Handler
DESCRIPTION: Creates a Deno server that handles CORS preflight requests and implements CORS headers in API responses. Includes error handling and proper response formatting with CORS headers for both success and error cases.

LANGUAGE: typescript
CODE:
import { corsHeaders } from '../_shared/cors.ts'

console.log(`Function "browser-with-cors" up and running!`)

Deno.serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { name } = await req.json()
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})

----------------------------------------

TITLE: Creating an Authentication Component in Vue 3
DESCRIPTION: Implement a Vue component for user authentication using Supabase magic links.

LANGUAGE: vue
CODE:
<script setup>
const supabase = useSupabaseClient()

const loading = ref(false)
const email = ref('')

const handleLogin = async () => {
  try {
    loading.value = true
    const { error } = await supabase.auth.signInWithOtp({ email: email.value })
    if (error) throw error
    alert('Check your email for the login link!')
  } catch (error) {
    alert(error.error_description || error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="row flex-center flex" @submit.prevent="handleLogin">
    <div class="col-6 form-widget">
      <h1 class="header">Supabase + Nuxt 3</h1>
      <p class="description">Sign in via magic link with your email below</p>
      <div>
        <input class="inputField" type="email" placeholder="Your email" v-model="email" />
      </div>
      <div>
        <input
          type="submit"
          class="button block"
          :value="loading ? 'Loading' : 'Send magic link'"
          :disabled="loading"
        />
      </div>
    </div>
  </form>
</template>

----------------------------------------

TITLE: Deploying Supabase Function for OG Image Generation
DESCRIPTION: This command deploys the 'og-image-with-storage-cdn' function to Supabase without JWT verification, making it available for production use.

LANGUAGE: bash
CODE:
supabase functions deploy og-image-with-storage-cdn --no-verify-jwt

----------------------------------------

TITLE: Defining Drizzle ORM Models in TypeScript
DESCRIPTION: Create a schema.ts file to define database models using Drizzle ORM's table and column definitions.

LANGUAGE: typescript
CODE:
import { pgTable, serial, text, varchar } from "drizzle-orm/pg-core";

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  fullName: text('full_name'),
  phone: varchar('phone', { length: 256 }),
});

----------------------------------------

TITLE: Setting Specific View for Auth UI
DESCRIPTION: Demonstrates how to set a specific view (sign up or sign in) for the Auth component using the view prop.

LANGUAGE: jsx
CODE:
<Auth
  supabaseClient={supabase}
  view="sign_up"
/>

----------------------------------------

TITLE: Deploying a Specific Edge Function
DESCRIPTION: Command to deploy a single Edge Function by specifying its name.

LANGUAGE: bash
CODE:
supabase functions deploy hello-world

----------------------------------------

TITLE: Sign Out Implementation - Flutter
DESCRIPTION: Implements the sign-out functionality using Supabase Auth in Flutter. Removes the user from browser session and clears localStorage.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Creating Account Management Form
DESCRIPTION: React component for user account management, including profile updates and signout functionality.

LANGUAGE: jsx
CODE:
'use client'
import { useCallback, useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'

export default function AccountForm({ user }) {
  const supabase = createClient()
  const [loading, setLoading] = useState(true)
  const [fullname, setFullname] = useState(null)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  const getProfile = useCallback(async () => {
    try {
      setLoading(true)
      const { data, error, status } = await supabase
        .from('profiles')
        .select(`full_name, username, website, avatar_url`)
        .eq('id', user?.id)
        .single()
      if (error && status !== 406) throw error
      if (data) {
        setFullname(data.full_name)
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      alert('Error loading user data!')
    } finally {
      setLoading(false)
    }
  }, [user, supabase])

  useEffect(() => {
    getProfile()
  }, [user, getProfile])

  async function updateProfile({ username, website, avatar_url }) {
    try {
      setLoading(true)
      const { error } = await supabase.from('profiles').upsert({
        id: user?.id,
        full_name: fullname,
        username,
        website,
        avatar_url,
        updated_at: new Date().toISOString(),
      })
      if (error) throw error
      alert('Profile updated!')
    } catch (error) {
      alert('Error updating the data!')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="form-widget">
      {/* Form fields and buttons */}
    </div>
  )
}

----------------------------------------

TITLE: Downloading a File using Swift
DESCRIPTION: This Swift code shows how to download a file from the 'avatars' bucket using the Supabase client library.

LANGUAGE: swift
CODE:
let response = try await supabase.storage.from("avatars").download(path: "public/avatar1.png")

----------------------------------------

TITLE: Implementing Vue Component with Supabase Query
DESCRIPTION: Vue component that fetches and displays instruments data from Supabase database using the client library

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted } from 'vue'
import { supabase } from './lib/supabaseClient'

const instruments = ref([])

async function getInstruments() {
  const { data } = await supabase.from('instruments').select()
  instruments.value = data
}

onMounted(() => {
  getInstruments()
})
</script>

<template>
  <ul>
    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.name }}</li>
  </ul>
</template>

----------------------------------------

TITLE: Creating Instruments Table and Inserting Sample Data in SQL
DESCRIPTION: This SQL snippet creates an 'instruments' table with an auto-incrementing ID and a name column. It then inserts sample data for violin, viola, and cello. Finally, it enables Row Level Security for the table.

LANGUAGE: sql
CODE:
-- Create the table
create table instruments (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
  ('violin'),
  ('viola'),
  ('cello');

alter table instruments enable row level security;

----------------------------------------

TITLE: Calling plv8 Functions in SQL, JavaScript, and Kotlin
DESCRIPTION: Examples of how to call plv8 functions using SQL, JavaScript with Supabase, and Kotlin with Supabase.

LANGUAGE: sql
CODE:
select function_name();

LANGUAGE: javascript
CODE:
const { data, error } = supabase.rpc('function_name')

LANGUAGE: kotlin
CODE:
val data = supabase.postgrest.rpc("function_name")

----------------------------------------

TITLE: Stripe Webhook Handler in TypeScript
DESCRIPTION: Implementation of a Stripe webhook handler using Supabase Edge Functions. Processes signed webhooks from Stripe to handle payment events and notifications securely.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.131.0/http/server.ts'
import Stripe from 'stripe'

const stripe = Stripe(Deno.env.get('STRIPE_API_KEY') ?? '', {
  // This is needed to use the Fetch API rather than Node's HTTP client
  apiVersion: '2020-08-27',
  httpClient: Stripe.createFetchHttpClient(),
})

const handler = async (request: Request) => {
  const signature = request.headers.get('Stripe-Signature')

  if (!signature) {
    return new Response('No signature', {
      status: 400,
    })
  }

  const webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SIGNING_SECRET')
  if (!webhookSecret) {
    return new Response('No webhook secret', {
      status: 400,
    })
  }

  try {
    const body = await request.text()
    const event = await stripe.webhooks.constructEventAsync(
      body,
      signature,
      webhookSecret,
      undefined,
      Stripe.createSubtleCryptoProvider()
    )

    console.log(`🔔 Event type: ${event.type}`)
    console.log(`🔔 Event data:`, event.data)

    return new Response(JSON.stringify({ ok: true }), {
      headers: { 'Content-Type': 'application/json' },
    })
  } catch (err) {
    console.error(err)
    return new Response(err.message, {
      status: 400,
    })
  }
}

serve(handler)

----------------------------------------

TITLE: Invoking Remote Edge Function using JavaScript
DESCRIPTION: Example of invoking a deployed Edge Function using JavaScript with the Supabase client library.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Create a single supabase client for interacting with your database
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
})

----------------------------------------

TITLE: Implementing Semantic Search Function with Inner Product
DESCRIPTION: SQL function that performs semantic search using negative inner product operator for comparing normalized embeddings.

LANGUAGE: sql
CODE:
create or replace function match_documents (
  query_embedding vector(512),
  match_threshold float,
  match_count int
)
returns setof documents
language sql
as $$
  select *
  from documents
  where documents.embedding <#> query_embedding < -match_threshold
  order by documents.embedding <#> query_embedding asc
  limit least(match_count, 200);
$$;

----------------------------------------

TITLE: Creating Sample Table for HypoPG Demonstration
DESCRIPTION: SQL commands to create a sample 'account' table and insert 10,000 rows of data for demonstrating HypoPG functionality.

LANGUAGE: sql
CODE:
create table account (
  id int,
  address text
);

insert into account(id, address)
select
  id,
  id || ' main street'
from
  generate_series(1, 10000) id;

----------------------------------------

TITLE: Initializing Supabase Realtime Channel in JavaScript
DESCRIPTION: This snippet demonstrates how to create a Supabase client and initialize a Realtime channel. It sets up a channel with a specific topic for bi-directional communication.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

const roomOne = supabase.channel('room-one') // set your topic here

----------------------------------------

TITLE: Installing Supabase packages for Next.js
DESCRIPTION: Install the required Supabase packages for Next.js authentication.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js @supabase/ssr

----------------------------------------

TITLE: Creating Supabase Client for Server-Side Rendering
DESCRIPTION: TypeScript code to set up a Supabase client with SSR support in SvelteKit's hooks.server.ts file.

LANGUAGE: typescript
CODE:
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createServerClient } from '@supabase/ssr'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, value, options }) => {
          event.cookies.set(name, value, { ...options, path: '/' })
        })
      },
    },
  })

  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null }
    }

    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

----------------------------------------

TITLE: Implementing hCaptcha in React Component
DESCRIPTION: Complete React implementation showing how to integrate hCaptcha with Supabase authentication, including state management and token handling

LANGUAGE: jsx
CODE:
const [captchaToken, setCaptchaToken] = useState()

<HCaptcha
  ref={captcha}
  sitekey="your-sitekey"
  onVerify={(token) => {
    setCaptchaToken(token)
  }}
/>

----------------------------------------

TITLE: Using pg_hashids to Generate Short IDs for Orders
DESCRIPTION: Example of creating an orders table and using pg_hashids to generate short IDs from the sequential id column. It demonstrates the use of the id_encode function to create a short_id for each order.

LANGUAGE: sql
CODE:
create table orders (
  id serial primary key,
  description text,
  price_cents bigint
);

insert into orders (description, price_cents)
values ('a book', 9095);

select
  id,
  id_encode(id) as short_id,
  description,
  price_cents
from
  orders;

  id | short_id | description | price_cents
----+----------+-------------+-------------
  1 | jR       | a book      |        9095
(1 row)

----------------------------------------

TITLE: Examining Query Plans for Cost Comparison in Postgres
DESCRIPTION: Uses EXPLAIN to show the cost difference between a single-record select and a whole-table select, which will be used to demonstrate pg_plan_filter's behavior.

LANGUAGE: sql
CODE:
explain select * from book where id =1;
                                QUERY PLAN
---------------------------------------------------------------------------
 Index Only Scan using book_pkey on book  (cost=0.28..2.49 rows=1 width=4)
   Index Cond: (id = 1)
(2 rows)

explain select * from book;
                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on book  (cost=0.00..135.00 rows=10000 width=4)
(1 row)

----------------------------------------

TITLE: Configuring Storage Buckets in Supabase
DESCRIPTION: Example configuration in config.toml for defining storage buckets.

LANGUAGE: bash
CODE:
[storage.buckets.images]
public = false
file_size_limit = "50MiB"
allowed_mime_types = ["image/png", "image/jpeg"]
objects_path = "./images"

----------------------------------------

TITLE: Querying Complex Joins with Multiple Foreign Keys in JavaScript
DESCRIPTION: JavaScript code using Supabase client to query shifts with related scan information, demonstrating how to handle joins with multiple foreign keys to the same table.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('shifts').select(
  `
    *,
    start_scan:scans!scan_id_start (
      id,
      user_id,
      badge_scan_time
    ),
   end_scan:scans!scan_id_end (
     id,
     user_id,
     badge_scan_time
    )
  `
)

----------------------------------------

TITLE: Customizing Auth UI with Query Parameters and Provider Scopes
DESCRIPTION: Shows how to add query parameters and provider scopes to the Auth component for additional configuration.

LANGUAGE: jsx
CODE:
<Auth
  supabaseClient={supabase}
  providers={['google']}
  queryParams={{
    access_type: 'offline',
    prompt: 'consent',
    hd: 'domain.com',
  }}
  providerScopes={{
    google: 'https://www.googleapis.com/auth/calendar.readonly',
  }}
/>

----------------------------------------

TITLE: Creating JWT using pgjwt Extension in PostgreSQL
DESCRIPTION: Example of using the sign function from the pgjwt extension to create a JSON Web Token. It demonstrates how to provide payload, secret, and algorithm parameters.

LANGUAGE: sql
CODE:
select
  extensions.sign(
    payload   := '{"sub":"1234567890","name":"John Doe","iat":1516239022}',
    secret    := 'secret',
    algorithm := 'HS256'
  );

----------------------------------------

TITLE: Implementing RLS Policy for Owner-only Object Deletion in SQL
DESCRIPTION: This SQL snippet creates a policy that allows authenticated users to delete only their own objects in Supabase Storage. It compares the object's owner_id with the authenticated user's ID.

LANGUAGE: sql
CODE:
create policy "User can delete their own objects"
on storage.objects
for delete
to authenticated
using (
    owner_id = (select auth.uid())
);

----------------------------------------

TITLE: Creating Indexes in OrioleDB
DESCRIPTION: Shows how to create secondary B-tree indexes on OrioleDB tables, including a basic index on published_at and a conditional index on views.

LANGUAGE: sql
CODE:
create index blog_post_published_at on blog_post (published_at);

create index blog_post_views on blog_post (views) where (views > 1000);

----------------------------------------

TITLE: Implementing Next.js Middleware for Session Refresh
DESCRIPTION: Middleware to refresh expired auth tokens and manage cookies for server-side rendering.

LANGUAGE: javascript
CODE:
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}

----------------------------------------

TITLE: Executing Full Vacuum Operation in PostgreSQL
DESCRIPTION: Demonstrates how to perform a full vacuum operation on a table to reclaim filesystem space. This operation requires exclusive table locks and should be run during low-traffic periods.

LANGUAGE: sql
CODE:
VACUUM FULL mytable;

----------------------------------------

TITLE: Verifying HTTP Hook Payload with Standard Webhooks
DESCRIPTION: JavaScript code snippet demonstrating how to verify the payload of an HTTP Hook using the Standard Webhooks library in a Deno environment.

LANGUAGE: javascript
CODE:
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'

Deno.serve(async (req) => {
  const payload = await req.text()
  const hookSecret = Deno.env.get('SEND_SMS_HOOK_SECRETS').replace('v1,whsec_', '')
  // Extract headers and security specific fields
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(hookSecret)
  const data = wh.verify(payload, headers)

  // Payload data is verified, continue with business logic here
  // ...
})

----------------------------------------

TITLE: Creating Profiles table and setting up Row Level Security in PostgreSQL
DESCRIPTION: SQL script to create a profiles table with references to auth.users, enable row level security, and define policies for public viewing, user insertion, and updating. It also sets up Realtime and Storage configurations.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');

----------------------------------------

TITLE: Dropping PostgreSQL Trigger
DESCRIPTION: SQL command to remove an existing trigger from a table.

LANGUAGE: sql
CODE:
drop trigger "trigger_name" on "table_name";

----------------------------------------

TITLE: Inserting a Secret Directly into Vault Secrets Table
DESCRIPTION: This snippet demonstrates how to create a secret by directly inserting data into the vault.secret table. It shows the SQL insert statement and the returned encrypted secret data.

LANGUAGE: sql
CODE:
insert into vault.secrets (secret)
values ('s3kre3t_k3y') returning *;

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in Kotlin
DESCRIPTION: This code snippet demonstrates how to implement Magic Link authentication using Supabase Auth in Kotlin. It uses the signInWith method with OTP type to initiate the authentication process.

LANGUAGE: kotlin
CODE:
suspend fun signInWithEmail() {
	supabase.auth.signInWith(OTP) {
		email = "valid.email@supabase.io"
	}
}

----------------------------------------

TITLE: Creating User with Custom Metadata in Supabase Auth (TypeScript)
DESCRIPTION: This snippet shows how to create a user with custom user metadata and app metadata in Supabase Auth, which is useful for mapping user-specific data from Auth0.

LANGUAGE: typescript
CODE:
const { data, error } = await supabase.auth.admin.createUser({
  email: 'valid.email@supabase.io',
  user_metadata: {
    full_name: 'Foo Bar',
  },
  app_metadata: {
    role: 'admin',
  },
})

----------------------------------------

TITLE: Seeding Storage Buckets in Supabase CLI
DESCRIPTION: Command to seed storage buckets with files from a local directory.

LANGUAGE: bash
CODE:
supabase seed buckets

----------------------------------------

TITLE: Accessing Custom Schema with Supabase JavaScript Client
DESCRIPTION: JavaScript code demonstrating how to initialize the Supabase client with a custom schema and make queries. Shows both global schema setting and per-query schema selection.

LANGUAGE: javascript
CODE:
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { db: { schema: 'myschema' } })

// Make a request
const { data: todos, error } = await supabase.from('todos').select('*')

// You can also change the target schema on a per-query basis
const { data: todos, error } = await supabase.schema('myschema').from('todos').select('*')

----------------------------------------

TITLE: Querying Storage Cache Misses in SQL
DESCRIPTION: SQL query to analyze top cache misses from edge_logs. Returns path, search parameters, and count of cache misses, filtered for storage object GET requests with specific cache status values.

LANGUAGE: sql
CODE:
select
  r.path as path,
  r.search as search,
  count(id) as count
from
  edge_logs as f
  cross join unnest(f.metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(m.response) as res
  cross join unnest(res.headers) as h
where
  starts_with(r.path, '/storage/v1/object')
  and r.method = 'GET'
  and h.cf_cache_status in ('MISS', 'NONE/UNKNOWN', 'EXPIRED', 'BYPASS', 'DYNAMIC')
group by path, search
order by count desc
limit 50;

----------------------------------------

TITLE: Response Analysis Query for pg_net
DESCRIPTION: SQL query to inspect responses from pg_net HTTP requests stored in the _http_response table.

LANGUAGE: sql
CODE:
select * from net._http_response;

----------------------------------------

TITLE: Creating a Function with Parameters in SQL
DESCRIPTION: This snippet demonstrates how to create a function that accepts parameters. It inserts a new planet into the 'planets' table and returns the new ID.

LANGUAGE: sql
CODE:
create or replace function add_planet(name text)
returns bigint
language plpgsql
as $$
declare
  new_row bigint;
begin
  insert into planets(name)
  values (add_planet.name)
  returning id into new_row;

  return new_row;
end;
$$;

----------------------------------------

TITLE: Creating Supabase Edge Function for Speech Generation
DESCRIPTION: Command to create a new Edge Function using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase functions new text-to-speech

----------------------------------------

TITLE: Implementing Telegram Bot Edge Function
DESCRIPTION: TypeScript implementation of the Telegram bot using grammY framework and ElevenLabs API for speech-to-text conversion

LANGUAGE: typescript
CODE:
import { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.34.0/mod.ts'
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { ElevenLabsClient } from 'npm:elevenlabs@1.50.5'

console.log(`Function "elevenlabs-scribe-bot" up and running!`)

const elevenLabsClient = new ElevenLabsClient({
  apiKey: Deno.env.get('ELEVENLABS_API_KEY') || '',
})

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') || '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
)

async function scribe({
  fileURL,
  fileType,
  duration,
  chatId,
  messageId,
  username,
}: {
  fileURL: string
  fileType: string
  duration: number
  chatId: number
  messageId: number
  username: string
}) {
  let transcript: string | null = null
  let languageCode: string | null = null
  let errorMsg: string | null = null
  try {
    const sourceFileArrayBuffer = await fetch(fileURL).then((res) => res.arrayBuffer())
    const sourceBlob = new Blob([sourceFileArrayBuffer], {
      type: fileType,
    })

    const scribeResult = await elevenLabsClient.speechToText.convert({
      file: sourceBlob,
      model_id: 'scribe_v1',
      tag_audio_events: false,
    })

    transcript = scribeResult.text
    languageCode = scribeResult.language_code

    await bot.api.sendMessage(chatId, transcript, {
      reply_parameters: { message_id: messageId },
    })
  } catch (error) {
    errorMsg = error.message
    console.log(errorMsg)
    await bot.api.sendMessage(chatId, 'Sorry, there was an error. Please try again.', {
      reply_parameters: { message_id: messageId },
    })
  }
  const logLine = {
    file_type: fileType,
    duration,
    chat_id: chatId,
    message_id: messageId,
    username,
    language_code: languageCode,
    error: errorMsg,
  }
  console.log({ logLine })
  await supabase.from('transcription_logs').insert({ ...logLine, transcript })
}

const telegramBotToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
const bot = new Bot(telegramBotToken || '')
const startMessage = `Welcome to the ElevenLabs Scribe Bot\! I can transcribe speech in 99 languages with super high accuracy\!
    \nTry it out by sending or forwarding me a voice message, video, or audio file\!
    \n[Learn more about Scribe](https://elevenlabs.io/speech-to-text) or [build your own bot](https://elevenlabs.io/docs/cookbooks/speech-to-text/telegram-bot)\!
  `
bot.command('start', (ctx) => ctx.reply(startMessage.trim(), { parse_mode: 'MarkdownV2' }))

bot.on([':voice', ':audio', ':video'], async (ctx) => {
  try {
    const file = await ctx.getFile()
    const fileURL = `https://api.telegram.org/file/bot${telegramBotToken}/${file.file_path}`
    const fileMeta = ctx.message?.video ?? ctx.message?.voice ?? ctx.message?.audio

    if (!fileMeta) {
      return ctx.reply('No video|audio|voice metadata found. Please try again.')
    }

    EdgeRuntime.waitUntil(
      scribe({
        fileURL,
        fileType: fileMeta.mime_type!,
        duration: fileMeta.duration,
        chatId: ctx.chat.id,
        messageId: ctx.message?.message_id!,
        username: ctx.from?.username || '',
      })
    )

    return ctx.reply('Received. Scribing...')
  } catch (error) {
    console.error(error)
    return ctx.reply(
      'Sorry, there was an error getting the file. Please try again with a smaller file!'
    )
  }
})

const handleUpdate = webhookCallback(bot, 'std/http')

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url)
    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {
      return new Response('not allowed', { status: 405 })
    }

    return await handleUpdate(req)
  } catch (err) {
    console.error(err)
  }
})

----------------------------------------

TITLE: Managing Active Transactions and Vacuum Operations
DESCRIPTION: Collection of SQL commands for monitoring and managing active transactions, including canceling backends and setting idle transaction timeouts.

LANGUAGE: sql
CODE:
SELECT xact_start, state FROM pg_stat_activity;

SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE xact_start = '<value from previous query>';

SET idle_in_transaction_session_timeout TO '10000s';

SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE state = 'active';
VACUUM mytable;

----------------------------------------

TITLE: Signing in with Slack OAuth using Supabase Flutter SDK
DESCRIPTION: This code snippet shows how to implement Slack OAuth sign-in using the Supabase Flutter SDK. It uses the signInWithOAuth method with OAuthProvider.slack as the provider and includes options for redirect and launch mode.

LANGUAGE: dart
CODE:
Future<void> signInWithSlack() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.slack,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Creating a Security Definer Function for RLS
DESCRIPTION: This SQL snippet shows how to create a security definer function to improve RLS performance when checking roles.

LANGUAGE: sql
CODE:
create function private.has_good_role()
returns boolean
language plpgsql
security definer
as $$
begin
  return exists (
    select 1 from roles_table
    where (select auth.uid()) = user_id and role = 'good_role'
  );
end;
$$;

create policy "rls_test_select"
on test_table
to authenticated
using ( private.has_good_role() );

----------------------------------------

TITLE: Enabling explain() in Supabase with SQL
DESCRIPTION: SQL commands to enable the explain() method for debugging query performance in Supabase. This allows the use of Postgres EXPLAIN execution plan.

LANGUAGE: sql
CODE:
-- enable explain
alter role authenticator
set pgrst.db_plan_enabled to 'true';

-- reload the config
notify pgrst, 'reload config';

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: Vue component for handling user authentication with magic link login.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'
import { supabase } from '../supabase'

const loading = ref(false)
const email = ref('')

const handleLogin = async () => {
  try {
    loading.value = true
    const { error } = await supabase.auth.signInWithOtp({
      email: email.value,
    })
    if (error) throw error
    alert('Check your email for the login link!')
  } catch (error) {
    if (error instanceof Error) {
      alert(error.message)
    }
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="row flex-center flex" @submit.prevent="handleLogin">
    <div class="col-6 form-widget">
      <h1 class="header">Supabase + Vue 3</h1>
      <p class="description">Sign in via magic link with your email below</p>
      <div>
        <input class="inputField" required type="email" placeholder="Your email" v-model="email" />
      </div>
      <div>
        <input
          type="submit"
          class="button block"
          :value="loading ? 'Loading' : 'Send magic link'"
          :disabled="loading"
        />
      </div>
    </div>
  </form>
</template>

----------------------------------------

TITLE: Reading Multiple Messages from a Queue with Visibility Timeout in SQL
DESCRIPTION: The `pgmq_public.read` function retrieves up to a specified number of Messages from the Queue, with an optional visibility timeout. It takes the queue name, visibility timeout in seconds, and the maximum number of messages to read as parameters.

LANGUAGE: sql
CODE:
pgmq_public.read(queue_name, sleep_seconds, n)

----------------------------------------

TITLE: Edge Function Implementation for Hybrid Search
DESCRIPTION: TypeScript code for implementing hybrid search in a Supabase Edge Function, using OpenAI for embeddings generation.

LANGUAGE: typescript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'
import OpenAI from 'npm:openai'

const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const openaiApiKey = Deno.env.get('OPENAI_API_KEY')!

Deno.serve(async (req) => {
  const { query } = await req.json()

  const openai = new OpenAI({ apiKey: openaiApiKey })

  const embeddingResponse = await openai.embeddings.create({
    model: 'text-embedding-3-large',
    input: query,
    dimensions: 512,
  })

  const [{ embedding }] = embeddingResponse.data

  const supabase = createClient(supabaseUrl, supabaseServiceRoleKey)

  const { data: documents } = await supabase.rpc('hybrid_search', {
    query_text: query,
    query_embedding: embedding,
    match_count: 10,
  })

  return new Response(JSON.stringify(documents), {
    headers: { 'Content-Type': 'application/json' },
  })
})

----------------------------------------

TITLE: Returning a Retry-able Error from HTTP Hook
DESCRIPTION: JavaScript code demonstrating how to return a retry-able error response from an HTTP Hook with appropriate status code and headers.

LANGUAGE: javascript
CODE:
return new Response(
  JSON.stringify({
    error: `Failed to process the request: ${error}`,
  }),
  { status: 429, headers: { 'Content-Type': 'application/json', 'retry-after': 'true' } }
)

----------------------------------------

TITLE: Unscheduling a Cron Job in SQL
DESCRIPTION: Permanently removes a scheduled job from the cron.job table while preserving its run history.

LANGUAGE: sql
CODE:
select cron.unschedule('permanent-cron-job-name');

----------------------------------------

TITLE: Creating Signed URLs with Image Transformations in Supabase
DESCRIPTION: Examples of creating signed URLs with different image transformation parameters using Supabase Storage API. Shows how to specify width and height transformations for images.

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').createSignedUrl('image-1.jpg', 60000, {
  transform: {
    width: 200,
    height: 200,
  },
})

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {
  transform: {
    width: 400,
    height: 300,
  },
})

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {
  transform: {
    width: 600,
    height: 250,
  },
})

----------------------------------------

TITLE: Querying Array Data with JavaScript Supabase Client
DESCRIPTION: JavaScript code to retrieve array data using Supabase client.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('arraytest').select('textarray')
console.log(JSON.stringify(data, null, 2))

----------------------------------------

TITLE: Creating Embeddings with Amazon Titan Embedding Model
DESCRIPTION: Use Amazon's Titan Embedding G1 - Text v1.2 model to create embeddings for a set of sentences. This snippet initializes the AWS client and processes a dataset of sentences to generate embeddings.

LANGUAGE: python
CODE:
import boto3
import vecs
import json

client = boto3.client(
    'bedrock-runtime',
    region_name='us-east-1',
	# Credentials from your AWS account
    aws_access_key_id='<replace_your_own_credentials>',
    aws_secret_access_key='<replace_your_own_credentials>',
    aws_session_token='<replace_your_own_credentials>',
)

dataset = [
    "The cat sat on the mat.",
    "The quick brown fox jumps over the lazy dog.",
    "Friends, Romans, countrymen, lend me your ears",
    "To be or not to be, that is the question.",
]

embeddings = []

for sentence in dataset:
    # invoke the embeddings model for each sentence
    response = client.invoke_model(
        body= json.dumps({"inputText": sentence}),
        modelId= "amazon.titan-embed-text-v1",
        accept = "application/json",
        contentType = "application/json"
    )
    # collect the embedding from the response
    response_body = json.loads(response["body"].read())
    # add the embedding to the embedding list
    embeddings.append((sentence, response_body.get("embedding"), {}))

----------------------------------------

TITLE: Generating Embeddings with Supabase Edge Function Webhook
DESCRIPTION: TypeScript code for a Supabase Edge Function that generates embeddings for text content inserted into the database. It uses the gte-small model to create embeddings and updates the database accordingly.

LANGUAGE: typescript
CODE:
const model = new Supabase.ai.Session('gte-small')

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const { content, id } = payload.record

  // Generate embedding.
  const embedding = await model.run(content, {
    mean_pool: true,
    normalize: true,
  })

  // Store in database.
  const { error } = await supabase
    .from('embeddings')
    .update({ embedding: JSON.stringify(embedding) })
    .eq('id', id)
  if (error) console.warn(error.message)

  return new Response('ok')
})

----------------------------------------

TITLE: Configuring Supabase Client
DESCRIPTION: Setting up Supabase client with authentication configuration and session management in React Native.

LANGUAGE: typescript
CODE:
import { AppState } from 'react-native'
import 'react-native-url-polyfill/auto'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})

AppState.addEventListener('change', (state) => {
  if (state === 'active') {
    supabase.auth.startAutoRefresh()
  } else {
    supabase.auth.stopAutoRefresh()
  }
})

----------------------------------------

TITLE: Creating Countries Table and Inserting Sample Data in SQL
DESCRIPTION: SQL commands to create a 'countries' table with an auto-incrementing ID and name column, insert sample data, and enable row-level security.

LANGUAGE: sql
CODE:
-- Create the table
create table countries (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into countries (name)
values
  ('Canada'),
  ('United States'),
  ('Mexico');

alter table countries enable row level security;

----------------------------------------

TITLE: Signing in with Bitbucket OAuth using Supabase JS Client
DESCRIPTION: This snippet demonstrates how to implement Bitbucket OAuth sign-in using the Supabase JavaScript client. It uses the signInWithOAuth method with 'bitbucket' as the provider.

LANGUAGE: javascript
CODE:
async function signInWithBitbucket() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'bitbucket',
  })
}

----------------------------------------

TITLE: Creating Supabase client utility for Next.js Client Components
DESCRIPTION: Utility function to create a Supabase client for use in Next.js Client Components.

LANGUAGE: typescript
CODE:
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

----------------------------------------

TITLE: Querying Data from PostgreSQL Table
DESCRIPTION: This SQL query selects names from the 'persons' table where the age is 32.

LANGUAGE: sql
CODE:
select name from persons where age = 32;

----------------------------------------

TITLE: Monitoring auth.users Table with PGAudit
DESCRIPTION: SQL commands to set up object-level auditing for the auth.users table using a custom role.

LANGUAGE: sql
CODE:
-- create logging role
create role "auth_auditor" noinherit;

-- give role permission to observe relevant table events
grant select on auth.users to "auth_auditor";
grant delete on auth.users to "auth_auditor";

-- assign auth_auditor to pgaudit.role
alter role "postgres" set pgaudit.role to 'auth_auditor';

----------------------------------------

TITLE: Reverifying a Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to reverify a custom domain for a project. This command checks DNS records and initiates the SSL certificate issuance process.

LANGUAGE: bash
CODE:
supabase domains reverify --project-ref abcdefghijklmnopqrst

----------------------------------------

TITLE: Implementing Slack Bot Mention Handler Edge Function
DESCRIPTION: TypeScript implementation of a Slack bot that handles mentions and URL verification. Uses the Slack Web API to respond to mentions and verify webhook URLs. Includes error handling and support for threading responses.

LANGUAGE: typescript
CODE:
import { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js'

const slackBotToken = Deno.env.get('SLACK_TOKEN') ?? ''
const botClient = new WebClient(slackBotToken)

console.log(`Slack URL verification function up and running!`)
Deno.serve(async (req) => {
  try {
    const reqBody = await req.json()
    console.log(JSON.stringify(reqBody, null, 2))
    const { token, challenge, type, event } = reqBody

    if (type == 'url_verification') {
      return new Response(JSON.stringify({ challenge }), {
        headers: { 'Content-Type': 'application/json' },
        status: 200,
      })
    } else if (event.type == 'app_mention') {
      const { user, text, channel, ts } = event
      // Here you should process the text received and return a response:
      const response = await botClient.chat.postMessage({
        channel: channel,
        text: `Hello <@${user}>!`,
        thread_ts: ts,
      })
      return new Response('ok', { status: 200 })
    }
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    })
  }
})

----------------------------------------

TITLE: Viewing Role Configuration
DESCRIPTION: SQL query to view the configuration for a specific role, in this case, the 'postgres' role.

LANGUAGE: sql
CODE:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'postgres';

----------------------------------------

TITLE: Retrieving user metadata in JavaScript for Supabase
DESCRIPTION: JavaScript code snippet showing how to retrieve user metadata using Supabase authentication.

LANGUAGE: javascript
CODE:
const {
  data: { user },
} = await supabase.auth.getUser()
let metadata = user.user_metadata

----------------------------------------

TITLE: Uploading a File using JavaScript
DESCRIPTION: This JavaScript code shows how to upload a file to the 'avatars' bucket using the Supabase client library.

LANGUAGE: javascript
CODE:
const avatarFile = event.target.files[0]
const { data, error } = await supabase.storage
  .from('avatars')
  .upload('public/avatar1.png', avatarFile)

----------------------------------------

TITLE: Querying Live Connections in Postgres
DESCRIPTION: This SQL query retrieves information about all live connections to the database, including connection ID, SSL status, connected database, user role, application name, IP address, last query, query start time, state, and connection start time. It joins pg_stat_ssl and pg_stat_activity views to provide comprehensive connection details.

LANGUAGE: sql
CODE:
SELECT
  pg_stat_activity.pid as connection_id,
  ssl,
  datname as database,
  usename as connected_role,
  application_name,
  client_addr as IP,
  query,
  query_start,
  state,
  backend_start
FROM pg_stat_ssl
JOIN pg_stat_activity
ON pg_stat_ssl.pid = pg_stat_activity.pid;

----------------------------------------

TITLE: MFA Challenge Step Implementation in React
DESCRIPTION: React components that handle the MFA challenge step during login, including authenticator assurance level checking and verification flow.

LANGUAGE: tsx
CODE:
function AppWithMFA() {
  const [readyToShow, setReadyToShow] = useState(false)
  const [showMFAScreen, setShowMFAScreen] = useState(false)

  useEffect(() => {
    ;(async () => {
      try {
        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()
        if (error) {
          throw error
        }

        console.log(data)

        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {
          setShowMFAScreen(true)
        }
      } finally {
        setReadyToShow(true)
      }
    })()
  }, [])

  if (readyToShow) {
    if (showMFAScreen) {
      return <AuthMFA />
    }

    return <App />
  }

  return <></>
}

LANGUAGE: tsx
CODE:
function AuthMFA() {
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')

  const onSubmitClicked = () => {
    setError('')
    ;(async () => {
      const factors = await supabase.auth.mfa.listFactors()
      if (factors.error) {
        throw factors.error
      }

      const totpFactor = factors.data.totp[0]

      if (!totpFactor) {
        throw new Error('No TOTP factors found!')
      }

      const factorId = totpFactor.id

      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      const challengeId = challenge.data.id

      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }
    })()
  }

  return (
    <>
      <div>Please enter the code from your authenticator app.</div>
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Submit" onClick={onSubmitClicked} />
    </>
  )
}

----------------------------------------

TITLE: Generating and Storing Vector Embeddings with JavaScript
DESCRIPTION: JavaScript code using Transformers.js to generate embeddings and store them in a Supabase table using the Supabase client.

LANGUAGE: javascript
CODE:
import { pipeline } from '@xenova/transformers'
const generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')

const title = 'First post!'
const body = 'Hello world!'

// Generate a vector using Transformers.js
const output = await generateEmbedding(body, {
  pooling: 'mean',
  normalize: true,
})

// Extract the embedding output
const embedding = Array.from(output.data)

// Store the vector in Postgres
const { data, error } = await supabase.from('documents').insert({
  title,
  body,
  embedding,
})

----------------------------------------

TITLE: Querying Logs for Timeout Events in Supabase
DESCRIPTION: SQL query for the Logs Explorer to identify timed-out events and long-running queries. It filters for 'statement timeout' and 'duration' events, focusing on queries run by the 'authenticator' role.

LANGUAGE: sql
CODE:
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(event_message, 'duration|statement timeout')
  -- (OPTIONAL) MODIFY OR REMOVE
  and parsed.user_name = 'authenticator' -- <--------CHANGE
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Basic Full Text Search Query
DESCRIPTION: SQL query demonstrating basic full text search using PGroonga's &@~ operator.

LANGUAGE: sql
CODE:
select * from memos where content &@~ 'groonga';

----------------------------------------

TITLE: Querying JSON Data in PostgreSQL
DESCRIPTION: Shows how to use jsonb_array_elements to extract and query data from JSONB fields in the 'calendar' table.

LANGUAGE: sql
CODE:
select
  user_id,
  date,
  jsonb_array_elements(food_log)->>'title' as title,
  jsonb_array_elements(food_log)->'calories' as calories,
  jsonb_array_elements(food_log)->'meal' as meal
from calendar
where user_id = 'xyz'
  and date between '2022-01-01' and '2022-01-31';

----------------------------------------

TITLE: Updating App Component for Routing in Ionic Angular
DESCRIPTION: Update the AppComponent to handle authentication state changes and route users accordingly.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core'
import { Router } from '@angular/router'
import { SupabaseService } from './supabase.service'

@Component({
  selector: 'app-root',
  template: `
    <ion-app>
      <ion-router-outlet></ion-router-outlet>
    </ion-app>
  `,
  styleUrls: ['app.component.scss'],
})
export class AppComponent {
  constructor(
    private supabase: SupabaseService,
    private router: Router
  ) {
    this.supabase.authChanges((_, session) => {
      console.log(session)
      if (session?.user) {
        this.router.navigate(['/account'])
      }
    })
  }
}

----------------------------------------

TITLE: Generating Explain Plan Without Index
DESCRIPTION: SQL command to generate an explain plan for a simple query without an index, showing a sequential scan.

LANGUAGE: sql
CODE:
explain select * from account where id=1;

----------------------------------------

TITLE: Implementing Next.js middleware for Supabase authentication
DESCRIPTION: Middleware to handle Supabase authentication token refreshing in Next.js.

LANGUAGE: typescript
CODE:
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}

----------------------------------------

TITLE: Creating a View with Security Invoker
DESCRIPTION: This SQL snippet shows how to create a view that obeys the RLS policies of the underlying tables for anon and authenticated roles.

LANGUAGE: sql
CODE:
create view <VIEW_NAME>
with(security_invoker = true)
as select <QUERY>

----------------------------------------

TITLE: Altering Database-Level Setting
DESCRIPTION: SQL command to alter a database-level setting, using 'statement_timeout' as an example.

LANGUAGE: sql
CODE:
alter database "postgres" set "statement_timeout" TO '60s';

----------------------------------------

TITLE: Verifying Phone OTP in JavaScript
DESCRIPTION: Use the supabase.auth.verifyOtp method to verify the one-time password sent to the user's phone. This should be called after the user inputs the 6-digit pin they received.

LANGUAGE: javascript
CODE:
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({
  phone: '13334445555',
  token: '123456',
  type: 'sms',
})

----------------------------------------

TITLE: Deleting a Vanity Subdomain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to remove a vanity subdomain from a project.

LANGUAGE: bash
CODE:
supabase vanity-subdomains delete --project-ref abcdefghijklmnopqrst --experimental

----------------------------------------

TITLE: Configuring Supabase client in refine
DESCRIPTION: Updates the supabaseClient with Supabase URL and API key for authentication and data provider methods.

LANGUAGE: typescript
CODE:
import { createClient } from "@refinedev/supabase";

const SUPABASE_URL = YOUR_SUPABASE_URL;
const SUPABASE_KEY = YOUR_SUPABASE_KEY

export const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {
  db: {
    schema: "public",
  },
  auth: {
    persistSession: true,
  },
});

----------------------------------------

TITLE: Inserting Array Data with Swift Supabase Client
DESCRIPTION: Swift implementation for inserting array data using Supabase client with a custom struct.

LANGUAGE: swift
CODE:
struct ArrayTest: Encodable {
  let id: Int
  let textarray: [String]
}

try await supabase
  .from("arraytest")
  .insert(
    [
      ArrayTest(
        id: 2,
        textarray: ["one", "two", "three", "four"]
      )
    ]
  )
  .execute()

----------------------------------------

TITLE: Inserting Array Data with Swift Supabase Client
DESCRIPTION: Swift implementation for inserting array data using Supabase client with a custom struct.

LANGUAGE: swift
CODE:
struct ArrayTest: Encodable {
  let id: Int
  let textarray: [String]
}

try await supabase
  .from("arraytest")
  .insert(
    [
      ArrayTest(
        id: 2,
        textarray: ["one", "two", "three", "four"]
      )
    ]
  )
  .execute()

----------------------------------------

TITLE: Storing Vector Embeddings using Transformer.js and Supabase
DESCRIPTION: JavaScript code demonstrating how to generate vector embeddings using Transformer.js and store them in PostgreSQL using the Supabase client.

LANGUAGE: javascript
CODE:
import { pipeline } from '@xenova/transformers'
const generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')

const title = 'First post!'
const body = 'Hello world!'

// Generate a vector using Transformers.js
const output = await generateEmbedding(body, {
  pooling: 'mean',
  normalize: true,
})

// Extract the embedding output
const embedding = Array.from(output.data)

// Store the vector in Postgres
const { data, error } = await supabase.from('posts').insert({
  title,
  body,
  embedding,
})

----------------------------------------

TITLE: Importing hCaptcha React Component
DESCRIPTION: JavaScript import statement for the hCaptcha React component

LANGUAGE: javascript
CODE:
import HCaptcha from '@hcaptcha/react-hcaptcha'

----------------------------------------

TITLE: Creating HNSW Index for Cosine Distance in SQL
DESCRIPTION: This SQL command creates an HNSW index on a column using the vector_cosine_ops operator class for cosine distance calculations. It's used when querying vectors with cosine similarity as the measure.

LANGUAGE: sql
CODE:
create index on items using hnsw (column_name vector_cosine_ops);

----------------------------------------

TITLE: Linking Local Project to Remote Supabase Project
DESCRIPTION: Command to link the local project to a remote Supabase project using the project ID.

LANGUAGE: bash
CODE:
supabase link --project-ref your-project-id

----------------------------------------

TITLE: Retrieving File Size for Egress Calculation (Bash)
DESCRIPTION: This cURL command retrieves the size of a file stored in Supabase Storage. It's useful for calculating egress when combined with the number of requests obtained from the Logs Explorer query.

LANGUAGE: bash
CODE:
curl -s -w "%{size_download}\n" -o /dev/null "https://my_project.supabase.co/storage/v1/object/large%20bucket/20230902_200037.gif"

----------------------------------------

TITLE: Creating Hono App with Supabase Bootstrap
DESCRIPTION: Use the Supabase CLI to bootstrap a Hono example app from Supabase Samples.

LANGUAGE: bash
CODE:
npx supabase@latest bootstrap hono

----------------------------------------

TITLE: Handling OAuth2 Callback in TypeScript
DESCRIPTION: Implementation of callback handler for OAuth2 flow, including token exchange using authorization code and PKCE verification. Demonstrates proper handling of tokens and response processing.

LANGUAGE: typescript
CODE:
router.get('/connect-supabase/oauth2/callback', async (ctx) => {
  // Make sure the codeVerifier is present for the user's session.
  const codeVerifier = ctx.state.session.get('codeVerifier') as string
  if (!codeVerifier) throw new Error('No codeVerifier!')

  // Exchange the authorization code for an access token.
  const tokens = await fetch(config.tokenUri, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
      Authorization: `Basic ${btoa(`${config.clientId}:${config.clientSecret}`)}`,
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      code: ctx.request.url.searchParams.get('code') || '',
      redirect_uri: config.redirectUri,
      code_verifier: codeVerifier,
    }),
  }).then((res) => res.json())
  console.log('tokens', tokens)

  // Store the tokens in your DB for future use.

  ctx.response.body = 'Success'
})

----------------------------------------

TITLE: Setting pg_plan_filter Cost Limit and Testing Queries
DESCRIPTION: Demonstrates setting the statement_cost_limit and shows how it affects queries with different costs. The low-cost query succeeds while the high-cost query fails.

LANGUAGE: sql
CODE:
load 'plan_filter';
set plan_filter.statement_cost_limit = 50; -- between 2.49 and 135.0

select * from book where id = 1;
 id
----
  1
(1 row)
-- SUCCESS

LANGUAGE: sql
CODE:
select * from book;

ERROR:  plan cost limit exceeded
HINT:  The plan for your query shows that it would probably have an excessive run time. This may be due to a logic error in the SQL, or it maybe just a very costly query. Rewrite your query or increase the configuration parameter "plan_filter.statement_cost_limit".
-- FAILURE

----------------------------------------

TITLE: Creating Database Schema for Rooms and Users
DESCRIPTION: This SQL snippet sets up the database schema for rooms, profiles, and room_users tables with appropriate constraints and row level security.

LANGUAGE: sql
CODE:
create table public.rooms (
    id bigint generated by default as identity primary key,
    topic text not null unique
);

alter table public.rooms enable row level security;

create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  email text NOT NULL,

  primary key (id)
);

alter table public.profiles enable row level security;

create table public.rooms_users (
  user_id uuid references auth.users (id),
  room_topic text references public.rooms (topic),
  created_at timestamptz default current_timestamp
);

alter table public.rooms_users enable row level security;

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the newly created application directory.

LANGUAGE: bash
CODE:
cd name-of-new-app

----------------------------------------

TITLE: Creating a Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to create a custom domain for a project. This command registers the domain with Supabase and returns verification records.

LANGUAGE: bash
CODE:
supabase domains create --project-ref abcdefghijklmnopqrst --custom-hostname api.example.com

----------------------------------------

TITLE: API Request with Supabase Service Role Key in Bash
DESCRIPTION: Demonstrates how to make an API request to Supabase using the service role key for both the apikey and authorization headers.

LANGUAGE: bash
CODE:
curl "$YOUR_PROJECT_URL/rest/v1/colors?select=name" \
 -H "apikey: $YOUR_SERVICE_ROLE_KEY" \
 -H "authorization: Bearer $YOUR_SERVICE_ROLE_KEY"

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Creates a new Supabase project in the current directory using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: Creating a View in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a view named 'transcripts' that joins data from students, courses, and grades tables. The view simplifies complex queries by providing a shortcut to frequently used data combinations.

LANGUAGE: sql
CODE:
create view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

----------------------------------------

TITLE: Setting up pgvector Database Schema
DESCRIPTION: SQL commands to enable pgvector extension and create tables for storing page data and embeddings with proper schema definitions

LANGUAGE: sql
CODE:
create extension if not exists vector with schema public;

create table "public"."nods_page" (
  id bigserial primary key,
  parent_page_id bigint references public.nods_page,
  path text not null unique,
  checksum text,
  meta jsonb,
  type text,
  source text
);
alter table "public"."nods_page"
  enable row level security;

create table "public"."nods_page_section" (
  id bigserial primary key,
  page_id bigint not null references public.nods_page on delete cascade,
  content text,
  token_count int,
  embedding vector(1536),
  slug text,
  heading text
);
alter table "public"."nods_page_section"
  enable row level security;

----------------------------------------

TITLE: Creating a Storage Bucket using Python
DESCRIPTION: This Python code demonstrates how to create a storage bucket named 'avatars' using the Supabase client library.

LANGUAGE: python
CODE:
response = supabase.storage.create_bucket('avatars')

----------------------------------------

TITLE: Querying Postgres Logs with Unnested Metadata in SQL
DESCRIPTION: This snippet demonstrates how to query the postgres_logs table, unnesting the metadata column to access nested JSON data. It selects the event_message and specific parsed fields from the metadata.

LANGUAGE: sql
CODE:
select
  event_message,
  parsed.error_severity,
  parsed.user_name
from
  postgres_logs
  -- extract first layer
  cross join unnest(postgres_logs.metadata) as metadata
  -- extract second layer
  cross join unnest(metadata.parsed) as parsed;

----------------------------------------

TITLE: Enabling Row Level Security in SQL
DESCRIPTION: SQL command to enable Row Level Security on a table named 'todos'.

LANGUAGE: sql
CODE:
alter table
  todos enable row level security;

----------------------------------------

TITLE: Creating a Materialized View in SQL
DESCRIPTION: SQL command to create a materialized view named 'transcripts' that joins multiple tables.

LANGUAGE: sql
CODE:
create materialized view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

----------------------------------------

TITLE: Inserting Geographic Data in SQL
DESCRIPTION: SQL command to insert geographic data into the restaurants table using the ST_Point function.

LANGUAGE: sql
CODE:
insert into public.restaurants
  (name, location)
values
  ('Supa Burger', gis.st_point(-73.946823, 40.807416)),
  ('Supa Pizza', gis.st_point(-73.94581, 40.807475)),
  ('Supa Taco', gis.st_point(-73.945826, 40.80629));

----------------------------------------

TITLE: Installing hCaptcha React Package
DESCRIPTION: Command to install the hCaptcha React component package as a project dependency

LANGUAGE: bash
CODE:
npm install @hcaptcha/react-hcaptcha

----------------------------------------

TITLE: Creating PostgreSQL Trigger Function
DESCRIPTION: Trigger function that updates a timestamp column, including both function and trigger creation statements.

LANGUAGE: sql
CODE:
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();

----------------------------------------

TITLE: Uploading Files to Supabase Storage in JavaScript
DESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the standard upload method in JavaScript. It uses the supabase-js SDK to create a client and perform the upload.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// Upload file using standard upload
async function uploadFile(file) {
  const { data, error } = await supabase.storage.from('bucket_name').upload('file_path', file)
  if (error) {
    // Handle error
  } else {
    // Handle success
  }
}

----------------------------------------

TITLE: Environment Variables for OAuth Secrets
DESCRIPTION: Example of environment variables used to store OAuth credentials securely.

LANGUAGE: bash
CODE:
GITHUB_CLIENT_ID=""
GITHUB_SECRET=""

----------------------------------------

TITLE: Listing All PGMQ Queues in SQL
DESCRIPTION: Lists all existing queues using the pgmq.list_queues function.

LANGUAGE: sql
CODE:
select * from pgmq.list_queues();

----------------------------------------

TITLE: Starting React Development Server
DESCRIPTION: Command to start the React development server which runs the application on localhost:3000.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Creating Database with Custom Encoding
DESCRIPTION: Demonstrates creating databases with specific encodings using template0, including both successful and failing examples.

LANGUAGE: sql
CODE:
-- Will succeed
CREATE DATABASE new_db_name TEMPLATE template0 ENCODING 'SQL_ASCII';

-- Will return an error
CREATE DATABASE new_db_name ENCODING 'SQL_ASCII';

----------------------------------------

TITLE: Apple Sign In with Flutter on iOS and macOS
DESCRIPTION: Implement Apple Sign In for Flutter apps running on iOS or macOS using the sign_in_with_apple package and Supabase Flutter SDK.

LANGUAGE: dart
CODE:
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:crypto/crypto.dart';

/// Performs Apple sign in on iOS or macOS
Future<AuthResponse> signInWithApple() async {
  final rawNonce = supabase.auth.generateRawNonce();
  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();

  final credential = await SignInWithApple.getAppleIDCredential(
    scopes: [
      AppleIDAuthorizationScopes.email,
      AppleIDAuthorizationScopes.fullName,
    ],
    nonce: hashedNonce,
  );

  final idToken = credential.identityToken;
  if (idToken == null) {
    throw const AuthException(
        'Could not find ID Token from generated credential.');
  }

  return supabase.auth.signInWithIdToken(
    provider: OAuthProvider.apple,
    idToken: idToken,
    nonce: rawNonce,
  );
}

----------------------------------------

TITLE: SSL Configuration for Local Development
DESCRIPTION: Environment variable configuration for enabling SSL connections during local development of Edge Functions.

LANGUAGE: bash
CODE:
SSL_CERT_FILE=/path/to/cert.crt
DENO_TLS_CA_STORE=mozilla,system

----------------------------------------

TITLE: Calculating Total Size of Supabase Storage Buckets
DESCRIPTION: This SQL query calculates and lists the total size of each bucket in Supabase Storage, ordered by size in descending order.

LANGUAGE: sql
CODE:
select
    bucket_id,
    (sum((metadata->>'size')::int) / 1048576.0)::numeric(10, 2) as total_size_megabyte
from
    storage.objects
group by
    bucket_id
order by
    total_size_megabyte desc;

----------------------------------------

TITLE: Creating RLS Policy to Disallow Public Access in SQL
DESCRIPTION: This SQL snippet shows how to create a Row Level Security policy that disallows unauthenticated access to the 'profiles' table for the 'anon' role.

LANGUAGE: sql
CODE:
create policy "Disallow public access" on profiles to anon for
select
  using (false);

----------------------------------------

TITLE: Configuring PGAudit Global Logging
DESCRIPTION: SQL commands to set up and remove global auditing using the postgres role.

LANGUAGE: sql
CODE:
alter role "postgres" set pgaudit.log to 'all';

-- To check if the `postgres` role is auditing:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'postgres';
-- should return a rolconfig path with "pgaudit.log=all" present

-- To remove the settings:
alter role "postgres" set pgaudit.log to 'none';

----------------------------------------

TITLE: Azure OAuth Sign In Implementation - JavaScript
DESCRIPTION: JavaScript implementation for signing in with Azure OAuth using Supabase Auth, including email scope requirement.

LANGUAGE: javascript
CODE:
async function signInWithAzure() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'azure',
    options: {
      scopes: 'email',
    },
  })
}

----------------------------------------

TITLE: Checking for AuthApiError in JavaScript
DESCRIPTION: Demonstrates how to check if an error is an AuthApiError in JavaScript using the isAuthApiError function.

LANGUAGE: javascript
CODE:
isAuthApiError(error)

----------------------------------------

TITLE: Installing Command Component Dependencies Manually in React
DESCRIPTION: This snippet demonstrates how to manually install the required dependency (cmdk) for the Command component.

LANGUAGE: bash
CODE:
npm install cmdk

----------------------------------------

TITLE: Deploying All Edge Functions
DESCRIPTION: Command to deploy all Edge Functions in the project to the remote Supabase project.

LANGUAGE: bash
CODE:
supabase functions deploy

----------------------------------------

TITLE: Using json_matches_schema Function in PostgreSQL
DESCRIPTION: Example of using the json_matches_schema function to check if a JSON instance conforms to a JSON Schema schema.

LANGUAGE: sql
CODE:
select
  extensions.json_matches_schema(
    schema := '{"type": "object"}',
    instance := '{}'
  );

----------------------------------------

TITLE: Performing GET Request with HTTP Extension in PostgreSQL
DESCRIPTION: SQL query to perform a GET request using the http_get function. It retrieves data from a sample API and casts the content to JSONB.

LANGUAGE: sql
CODE:
select
  "status", "content"::jsonb
from
  http_get('https://jsonplaceholder.typicode.com/todos/1');

----------------------------------------

TITLE: Installing Supabase Test Helpers
DESCRIPTION: Install the Test Helpers package to simplify testing Supabase-specific features.

LANGUAGE: sql
CODE:
select dbdev.install('basejump-supabase_test_helpers');
create extension if not exists "basejump-supabase_test_helpers" version '0.0.6';

----------------------------------------

TITLE: Configuring Supabase Database Schema with Row Level Security
DESCRIPTION: SQL commands to set up the database schema with profiles table, row level security policies, realtime functionality, and storage configuration for avatars. Includes policies for public profile viewing, user-specific profile management, and avatar storage access.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');

----------------------------------------

TITLE: Authenticated Bucket-Specific Upload Policy
DESCRIPTION: SQL policy that restricts uploads to authenticated users for a specific bucket.

LANGUAGE: sql
CODE:
create policy "policy_name"
on storage.objects for insert to authenticated with check (
    -- restrict bucket
    bucket_id = 'my_bucket_id'
);

----------------------------------------

TITLE: Creating a Pre-test Hook for Supabase Testing
DESCRIPTION: Set up a pre-test hook file to handle global environment setup for Supabase tests.

LANGUAGE: bash
CODE:
supabase test new 000-setup-tests-hooks

LANGUAGE: sql
CODE:
-- install tests utilities
-- install pgtap extension for testing
create extension if not exists pgtap with schema extensions;
/*
---------------------
---- install dbdev ----
----------------------
Requires:
  - pg_tle: https://github.com/aws/pg_tle
  - pgsql-http: https://github.com/pramsey/pgsql-http
*/
create extension if not exists http with schema extensions;
create extension if not exists pg_tle;
drop extension if exists "supabase-dbdev";
select pgtle.uninstall_extension_if_exists('supabase-dbdev');
select
    pgtle.install_extension(
        'supabase-dbdev',
        resp.contents ->> 'version',
        'PostgreSQL package manager',
        resp.contents ->> 'sql'
    )
from http(
    (
        'GET',
        'https://api.database.dev/rest/v1/'
        || 'package_versions?select=sql,version'
        || '&package_name=eq.supabase-dbdev'
        || '&order=version.desc'
        || '&limit=1',
        array[
            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header
        ],
        null,
        null
    )
) x,
lateral (
    select
        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0
) resp(contents);
create extension "supabase-dbdev";
select dbdev.install('supabase-dbdev');
drop extension if exists "supabase-dbdev";
create extension "supabase-dbdev";
-- Install test helpers
select dbdev.install('basejump-supabase_test_helpers');
create extension if not exists "basejump-supabase_test_helpers" version '0.0.6';

-- Verify setup with a no-op test
begin;
select plan(1);
select ok(true, 'Pre-test hook completed successfully');
select * from finish();
rollback;

----------------------------------------

TITLE: Implementing server-side hooks for Supabase auth in SvelteKit
DESCRIPTION: Set up server-side hooks to create a Supabase client, check user authentication, and guard protected pages in a SvelteKit application.

LANGUAGE: ts
CODE:
import { createServerClient } from '@supabase/ssr'
import { type Handle, redirect } from '@sveltejs/kit'
import { sequence } from '@sveltejs/kit/hooks'

import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'

const supabase: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, value, options }) => {
          event.cookies.set(name, value, { ...options, path: '/' })
        })
      },
    },
  })

  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null }
    }

    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession()
  event.locals.session = session
  event.locals.user = user

  if (!event.locals.session && event.url.pathname.startsWith('/private')) {
    redirect(303, '/auth')
  }

  if (event.locals.session && event.url.pathname === '/auth') {
    redirect(303, '/private')
  }

  return resolve(event)
}

export const handle: Handle = sequence(supabase, authGuard)

----------------------------------------

TITLE: Implementing Email Notifications for Failed Password Attempts
DESCRIPTION: SQL implementation of a password verification hook that tracks login attempts and sends email notifications when suspicious activity is detected.

LANGUAGE: sql
CODE:
create table public.password_sign_in_attempts (
  user_id uuid not null,
  attempt_id uuid not null,
  last_attempt_at timestamp not null default now(),
  attempt_successful boolean not null,
  primary key (user_id, attempt_id)
);

create or replace function public.hook_notify_user_on_failed_attempts(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    user_id uuid;
    server_token text;
    user_email_address text;
    email_body jsonb;
    response_id int;
    http_code int;
    error_message jsonb;
    attempt_count int;
    max_attempts int := 5;
  begin
    user_id := (event->>'user_id')::uuid;

    insert into public.password_sign_in_attempts (user_id, attempt_id, last_attempt_at, attempt_successful)
    values (user_id, (event->>'attempt_id')::uuid, now(), (event->>'valid')::boolean)
    on conflict (user_id, attempt_id)
    do update set last_attempt_at = now(), attempt_successful = (event->>'valid')::boolean;

    select count(*), u.email into attempt_count, user_email_address
    from public.password_sign_in_attempts a
    join auth.users u on a.user_id = u.id
    where a.user_id = user_id and attempt_successful = false and last_attempt_at > (now() - interval '1 day');

    if attempt_count >= max_attempts then
      select decrypted_secret into server_token from vault.decrypted_secrets where name = 'my_api_key_name';

      email_body := format('{
        "from": "yoursenderemail@example.com",
        "to": "%s",
        "subject": "Security Alert: Repeated Login Attempts Detected",
        "textbody": "We have detected repeated login attempts for your account. If this was not you, please secure your account.",
        "htmlbody": "<html><body><strong>Security Alert:</strong> We have detected repeated login attempts for your account. If this was not you, please secure your account.</body></html>",
        "messagestream": "outbound"
      }', user_email_address)::jsonb;

      select id into response_id from net.http_post(
        'https://api.youremailprovider.com/email',
        email_body,
        'application/json',
        array['Accept: application/json', 'X-Postmark-Server-Token: ' || server_token]
      );

      select status_code, content into http_code, error_message from net._http_response where id = response_id;

      if http_code is null or (http_code < 200 or http_code >= 300) then
        return jsonb_build_object(
          'error', jsonb_build_object(
            'http_code', coalesce(http_code, 0),
            'message', coalesce(error_message ->> 'message', 'error sending email')
          )
        );
      end if;
    end if;

    return jsonb_build_object('decision', 'continue');
  end;
$$;

----------------------------------------

TITLE: Manual Identity Linking
DESCRIPTION: Link an OAuth provider identity to a logged-in user's account. Requires user to be authenticated.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })

LANGUAGE: dart
CODE:
await supabase.auth.linkIdentity(OAuthProvider.google);

LANGUAGE: swift
CODE:
try await supabase.auth.linkIdentity(provider: .google)

LANGUAGE: kotlin
CODE:
supabase.auth.linkIdentity(Google)

LANGUAGE: python
CODE:
response = supabase.auth.link_identity({'provider': 'google'})

----------------------------------------

TITLE: Deploying Database Changes to Supabase
DESCRIPTION: Command to deploy local database migrations to the live Supabase project.

LANGUAGE: bash
CODE:
supabase db push

----------------------------------------

TITLE: Email Password Reset Implementation
DESCRIPTION: Shows how to implement password reset functionality with email confirmation.

LANGUAGE: javascript
CODE:
await supabase.auth.resetPasswordForEmail('valid.email@supabase.io', {
  redirectTo: 'http://example.com/account/update-password',
})

----------------------------------------

TITLE: Creating Supabase Server Client in SvelteKit Hooks (TypeScript)
DESCRIPTION: TypeScript code for creating a Supabase server client in the SvelteKit hooks.server.ts file.

LANGUAGE: typescript
CODE:
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

----------------------------------------

TITLE: Signing in with Discord OAuth using Supabase in Flutter
DESCRIPTION: This code snippet shows how to implement Discord OAuth sign-in using the Supabase Flutter client. It uses the signInWithOAuth method with OAuthProvider.discord and includes optional parameters for redirect and launch mode.

LANGUAGE: dart
CODE:
Future<void> signInWithDiscord() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.discord,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Enabling RUM Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the RUM extension in the database schema.

LANGUAGE: sql
CODE:
-- Example: enable the "rum" extension
create extension rum with schema extensions;

-- Example: disable the "rum" extension
drop extension if exists rum;

----------------------------------------

TITLE: Creating a Publication for All Tables in SQL
DESCRIPTION: This SQL command creates a publication that contains changes to all tables in the database.

LANGUAGE: sql
CODE:
create publication publication_name
for all tables;

----------------------------------------

TITLE: Overriding Generated Types
DESCRIPTION: Shows how to override generated types using type-fest's MergeDeep utility type.

LANGUAGE: typescript
CODE:
import { MergeDeep } from 'type-fest'
import { Database as DatabaseGenerated } from './database-generated.types'
export { Json } from './database-generated.types'

// Override the type for a specific column in a view:
export type Database = MergeDeep<
  DatabaseGenerated,
  {
    public: {
      Views: {
        movies_view: {
          Row: {
            // id is a primary key in public.movies, so it must be `not null`
            id: number
          }
        }
      }
    }
  }
>

----------------------------------------

TITLE: Creating Basic PostgreSQL Trigger
DESCRIPTION: Basic syntax for creating a trigger that executes after insert operations on a table.

LANGUAGE: sql
CODE:
create trigger "trigger_name"
after insert on "table_name"
for each row
execute function trigger_function();

----------------------------------------

TITLE: Raw Postgres Connection using Deno Postgres Driver
DESCRIPTION: Demonstrates how to connect directly to Postgres using the Deno Postgres driver, implementing connection pooling and raw SQL queries.

LANGUAGE: typescript
CODE:
import * as postgres from 'https://deno.land/x/postgres@v0.17.0/mod.ts'

const databaseUrl = Deno.env.get('SUPABASE_DB_URL')!

const pool = new postgres.Pool(databaseUrl, 3, true)

Deno.serve(async (_req) => {
  try {
    const connection = await pool.connect()

    try {
      const result = await connection.queryObject`SELECT * FROM animals`
      const animals = result.rows

      const body = JSON.stringify(
        animals,
        (key, value) => (typeof value === 'bigint' ? value.toString() : value),
        2
      )

      return new Response(body, {
        status: 200,
        headers: { 'Content-Type': 'application/json; charset=utf-8' },
      })
    } finally {
      connection.release()
    }
  } catch (err) {
    console.error(err)
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})

----------------------------------------

TITLE: Creating a Simple 'Hello World' Database Function in SQL
DESCRIPTION: This snippet demonstrates how to create a basic Postgres function that returns the string 'hello world'. It explains the key components of a function declaration.

LANGUAGE: sql
CODE:
create or replace function hello_world()
returns text
language sql
as $$
  select 'hello world';
$$;

----------------------------------------

TITLE: Querying Vector Collection Using Supabase JavaScript Client
DESCRIPTION: This JavaScript code snippet shows how to query the 'docs' collection using the Supabase client library. It selects the id, embedding, and metadata for a specific URL.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('docs')
  .select('id, embedding, metadata')
  .eq('url', '/hello-world')

----------------------------------------

TITLE: Performing POST Request with HTTP Extension in PostgreSQL
DESCRIPTION: SQL query to perform a POST request using the http_post function. It sends JSON data to a sample API and retrieves the response.

LANGUAGE: sql
CODE:
select
  "status", "content"::jsonb
from
  http_post(
    'https://jsonplaceholder.typicode.com/posts',
    '{ "title": "foo", "body": "bar", "userId": 1 }',
    'application/json'
  );

----------------------------------------

TITLE: Signing in with Facebook OAuth using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Facebook OAuth sign-in using Supabase in a JavaScript application. It uses the signInWithOAuth method from the Supabase Auth API.

LANGUAGE: javascript
CODE:
async function signInWithFacebook() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'facebook',
  })
}

----------------------------------------

TITLE: Storing Credentials in Supabase Vault
DESCRIPTION: SQL commands to store project URL and anonymous API key securely in the Supabase Vault for later use in scheduled functions.

LANGUAGE: sql
CODE:
select vault.create_secret('https://project-ref.supabase.co', 'project_url');
select vault.create_secret('YOUR_SUPABASE_ANON_KEY', 'anon_key');

----------------------------------------

TITLE: Filtering PGAudit Logs in Supabase
DESCRIPTION: SQL query to filter and extract specific audit logs from the Postgres logs in Supabase.

LANGUAGE: sql
CODE:
select
  cast(t.timestamp as datetime) as timestamp,
  event_message
from
  postgres_logs as t
  cross join unnest(metadata) as m
  cross join unnest(m.parsed) as p
where event_message like 'AUDIT%CREATE TABLE%'
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase OpenAI Function
DESCRIPTION: Copies the example environment file to create a local configuration file for the OpenAI function.

LANGUAGE: bash
CODE:
cp supabase/.env.local.example supabase/.env.local

----------------------------------------

TITLE: Setting up Supabase Realtime Publication in SQL
DESCRIPTION: This SQL snippet creates a supabase_realtime publication and adds a table to it for real-time subscriptions. It first drops any existing publication, recreates it, and then adds a specific table (in this case, 'messages') to the publication.

LANGUAGE: sql
CODE:
begin;

-- remove the supabase_realtime publication
drop
  publication if exists supabase_realtime;

-- re-create the supabase_realtime publication with no tables
create publication supabase_realtime;

commit;

-- add a table called 'messages' to the publication
-- (update this to match your tables)
alter
  publication supabase_realtime add table messages;

----------------------------------------

TITLE: Using New Auth Methods in Supabase.js v2
DESCRIPTION: Demonstrates the usage of the new signInWithPassword() method in Supabase.js v2, replacing the deprecated signIn() method.

LANGUAGE: ts
CODE:
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})

----------------------------------------

TITLE: Granting pg_read_all_stats Privilege
DESCRIPTION: SQL command to grant the pg_read_all_stats privilege to the postgres user for accessing query performance data.

LANGUAGE: sql
CODE:
grant pg_read_all_stats to postgres;

----------------------------------------

TITLE: Supabase Auth Session Methods - TypeScript
DESCRIPTION: Illustrates the difference between auth.getSession for reading local session data and auth.getUser for verified server-side data. Important security note about not trusting unencoded session data in server-side code.

LANGUAGE: typescript
CODE:
auth.getSession()  // Reads from local storage, may be tampered
auth.getUser()     // Makes server request, returns verified data

----------------------------------------

TITLE: Installing Supabase.js v2 with npm
DESCRIPTION: Command to install the latest version of @supabase/supabase-js using npm package manager.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js

----------------------------------------

TITLE: Using storage.filename() in SQL policy for public file access
DESCRIPTION: This SQL snippet demonstrates how to create a policy that allows any user to download a specific file (favicon.ico) using the storage.filename() function.

LANGUAGE: sql
CODE:
create policy "Allow public downloads"
on storage.objects
for select
to public
using (
  storage.filename(name) = 'favicon.ico'
);

----------------------------------------

TITLE: RLS Policies for Complex Organization in Supabase
DESCRIPTION: Set up Row Level Security policies for a multi-tenant content publishing platform in Supabase.

LANGUAGE: sql
CODE:
-- Create a private schema to store all security definer functions utils
-- As such functions should never be in a API exposed schema
create schema if not exists private;
-- Helper function for role checks
create or replace function private.get_user_org_role(org_id bigint, user_id uuid)
returns text
set search_path = ''
as $$
  select role from public.org_members
  where org_id = $1 and user_id = $2;
-- Note the use of security definer to avoid RLS checking recursion issue
-- see: https://supabase.com/docs/guides/database/postgres/row-level-security#use-security-definer-functions
$$ language sql security definer;
-- Helper utils to check if an org is below the max post limit
create or replace function private.can_add_post(org_id bigint)
returns boolean
set search_path = ''
as $$
  select (select count(*)
          from public.posts p
          where p.org_id = $1) < o.max_posts
  from public.organizations o
  where o.id = $1
$$ language sql security definer;


-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.organizations enable row level security;
alter table public.org_members enable row level security;
alter table public.posts enable row level security;
alter table public.comments enable row level security;

-- Profiles policies
create policy "Public profiles are viewable by everyone"
  on public.profiles for select using (true);

create policy "Users can insert their own profile"
  on public.profiles for insert with check ((select auth.uid()) = id);

create policy "Users can update their own profile"
  on public.profiles for update using ((select auth.uid()) = id)
  with check ((select auth.uid()) = id);

-- Organizations policies
create policy "Public org info visible to all"
  on public.organizations for select using (true);

create policy "Org management restricted to owners"
  on public.organizations for all using (
    private.get_user_org_role(id, (select auth.uid())) = 'owner'
  );

-- Org Members policies
create policy "Members visible to org members"
  on public.org_members for select using (
    private.get_user_org_role(org_id, (select auth.uid())) is not null
  );

create policy "Member management restricted to admins and owners"
  on public.org_members for all using (
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
  );

-- Posts policies
create policy "Complex post visibility"
  on public.posts for select using (
    -- Published non-premium posts are visible to all
    (status = 'published' and not is_premium)
    or
    -- Premium posts visible to org members only
    (status = 'published' and is_premium and
    private.get_user_org_role(org_id, (select auth.uid())) is not null)
    or
    -- All posts visible to editors and above
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
  );

create policy "Post creation rules"
  on public.posts for insert with check (
    -- Must be org member with appropriate role
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
    and
    -- Check org post limits for free plans
    (
      (select o.plan_type != 'free'
      from organizations o
      where o.id = org_id)
      or
      (select private.can_add_post(org_id))
    )
  );

create policy "Post update rules"
  on public.posts for update using (
    exists (
      select 1
      where
        -- Editors can update non-published posts
        (private.get_user_org_role(org_id, (select auth.uid())) = 'editor' and status != 'published')
        or
        -- Admins and owners can update any post
        private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
    )
  );

-- Comments policies
create policy "Comments on published posts are viewable by everyone"
  on public.comments for select using (
    exists (
      select 1 from public.posts
      where id = post_id
      and status = 'published'
    )
    and not is_deleted
  );

create policy "Authenticated users can create comments"
  on public.comments for insert with check ((select auth.uid()) = author_id);

create policy "Users can update their own comments"
  on public.comments for update using (author_id = (select auth.uid()));

----------------------------------------

TITLE: Creating Test Function for Timeout in PostgreSQL
DESCRIPTION: Creates a function 'myfunc' that sleeps for 601 seconds, useful for testing timeout configurations.

LANGUAGE: sql
CODE:
create or replace function myfunc()
returns void as $$
  select pg_sleep(601); -- simulating some long-running process
$$
language sql;

----------------------------------------

TITLE: Defining User Identity Object Structure in Markdown
DESCRIPTION: This snippet outlines the attributes of the user identity object in Supabase Auth, including their types and descriptions. It covers key fields such as provider_id, user_id, identity_data, and timestamps.

LANGUAGE: markdown
CODE:
| Attributes      | Type     | Description                                                                                                                                                                                                                              |
| --------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| provider_id     | `string` | The provider id returned by the provider. If the provider is an OAuth provider, the id refers to the user's account with the OAuth provider. If the provider is `email` or `phone`, the id is the user's id from the `auth.users` table. |
| user_id         | `string` | The user's id that the identity is linked to.                                                                                                                                                                                            |
| identity_data   | `object` | The identity metadata. For OAuth and SAML identities, this contains information about the user from the provider.                                                                                                                        |
| id              | `string` | The unique id of the identity.                                                                                                                                                                                                           |
| provider        | `string` | The provider name.                                                                                                                                                                                                                       |
| email           | `string` | The email is a generated column that references the optional email property in the identity_data                                                                                                                         |
| created_at      | `string` | The timestamp that the identity was created.                                                                                                                                                                                             |
| last_sign_in_at | `string` | The timestamp that the identity was last used to sign in.                                                                                                                                                                                |
| updated_at      | `string` | The timestamp that the identity was last updated.                                                                                                                                                                                        |

----------------------------------------

TITLE: Vector Similarity Search with Filtering in PostgreSQL
DESCRIPTION: Example of a vector similarity search query with filtering, demonstrating potential limitations when using IVFFlat or HNSW indexes.

LANGUAGE: sql
CODE:
SELECT * FROM items WHERE category_id = 123 ORDER BY embedding <-> '[3,1,2]' LIMIT 5;

----------------------------------------

TITLE: Vector Similarity Search with Filtering in PostgreSQL
DESCRIPTION: Example of a vector similarity search query with filtering, demonstrating potential limitations when using IVFFlat or HNSW indexes.

LANGUAGE: sql
CODE:
SELECT * FROM items WHERE category_id = 123 ORDER BY embedding <-> '[3,1,2]' LIMIT 5;

----------------------------------------

TITLE: Creating RLS Policy for Broadcast Changes Authorization in SQL
DESCRIPTION: Implements a Row Level Security policy to control access to broadcast messages for authenticated users based on game participation.

LANGUAGE: sql
CODE:
CREATE POLICY "authenticated can listen to game moves"
ON "realtime"."messages"
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM game_users
    WHERE (SELECT auth.uid()) = user_id
      AND (select realtime.topic()) = 'games:' || game_id::text
      AND realtime.messages.extension = 'broadcast'
  )
);

----------------------------------------

TITLE: Setting Global Statement Timeout in PostgreSQL
DESCRIPTION: Alters the statement timeout globally for the 'postgres' database to 4 seconds. This affects all roles and sessions without an explicit timeout already set.

LANGUAGE: sql
CODE:
alter database postgres set statement_timeout TO '4s';

----------------------------------------

TITLE: Grouping API Errors by Path and Code in SQL
DESCRIPTION: SQL query to group API errors by path and status code, showing the frequency of each error type.

LANGUAGE: sql
CODE:
select
  status_code,
  path,
  count(path) as reoccurrence_per_path
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(response) as response
  cross join unnest(request) as request
where
  status_code >= 400
  and regexp_contains(path, '^/rest/v1/')
group by path, status_code
order by reoccurrence_per_path;

----------------------------------------

TITLE: Signing out in JavaScript
DESCRIPTION: This code snippet demonstrates how to sign out a user using Supabase's JavaScript client library. It calls the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Importing NPM Submodules in Edge Functions
DESCRIPTION: Example of selectively importing NPM submodules to optimize bundle size in Edge Functions

LANGUAGE: typescript
CODE:
import { Sheets } from 'npm:@googleapis/sheets'

----------------------------------------

TITLE: Monitoring API Events with PGAudit
DESCRIPTION: SQL command to set up auditing for write operations initiated by PostgREST API roles.

LANGUAGE: sql
CODE:
alter role "authenticator" set pgaudit.log to 'write';

----------------------------------------

TITLE: Querying List Objects Function with Supabase JavaScript SDK
DESCRIPTION: Example of how to call the list_objects function using the Supabase JavaScript client library with custom parameters.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.rpc('list_objects', {
  bucketid: 'yourbucket',
  prefix: '',
  limit: 100,
  offset: 0
})

----------------------------------------

TITLE: Displaying Storage Error Code Format in JSON
DESCRIPTION: Shows the JSON structure for returning Storage error codes, including the 'code' and 'message' fields.

LANGUAGE: json
CODE:
{
  "code": "error_code",
  "message": "error_message"
}

----------------------------------------

TITLE: Deploying Edge Function without JWT Verification
DESCRIPTION: Command to deploy an Edge Function without JWT verification, useful for certain webhooks.

LANGUAGE: bash
CODE:
supabase functions deploy hello-world --no-verify-jwt

----------------------------------------

TITLE: Implementing Supabase Data Query with Jetpack Compose
DESCRIPTION: Implements a Composable function to fetch and display data from Supabase using LaunchedEffect and LazyColumn.

LANGUAGE: kotlin
CODE:
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            SupabaseTutorialTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    InstrumentsList()
                }
            }
        }
    }
}

@Composable
fun InstrumentsList() {
    var instruments by remember { mutableStateOf<List<Instrument>>(listOf()) }
    LaunchedEffect(Unit) {
        withContext(Dispatchers.IO) {
            instruments = supabase.from("instruments")
                              .select().decodeList<Instrument>()
        }
    }
    LazyColumn {
        items(
            instruments,
            key = { instrument -> instrument.id },
        ) { instrument ->
            Text(
                instrument.name,
                modifier = Modifier.padding(8.dp),
            )
        }
    }
}

----------------------------------------

TITLE: Creating Supabase client utility for Next.js Server Components
DESCRIPTION: Utility function to create a Supabase client for use in Next.js Server Components, Server Actions, and Route Handlers.

LANGUAGE: typescript
CODE:
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

----------------------------------------

TITLE: Parsing Error Query Fragments for Custom Error Handling
DESCRIPTION: This code snippet shows how to parse query fragments from the URL after a failed authentication attempt. It extracts error details and displays a custom error message to the user for 4xx errors.

LANGUAGE: javascript
CODE:
const params = new URLSearchParams(window.location.hash.slice())

if (params.get('error_code').startsWith('4')) {
  // show error message if error is a 4xx error
  window.alert(params.get('error_description'))
}

----------------------------------------

TITLE: Advanced RLS Test Cases for Complex Organization in Supabase
DESCRIPTION: Write comprehensive RLS test cases for a multi-tenant content publishing platform in Supabase.

LANGUAGE: sql
CODE:
-- Assuming we already have: 000-setup-tests-hooks.sql file we can use tests helpers
begin;
-- Declare total number of tests
select plan(10);

-- Create test users
select tests.create_supabase_user('org_owner', 'owner@test.com');
select tests.create_supabase_user('org_admin', 'admin@test.com');
select tests.create_supabase_user('org_editor', 'editor@test.com');
select tests.create_supabase_user('premium_user', 'premium@test.com');
select tests.create_supabase_user('free_user', 'free@test.com');
select tests.create_supabase_user('scheduler', 'scheduler@test.com');
select tests.create_supabase_user('free_author', 'free_author@test.com');

-- Create profiles for test users
insert into profiles (id, username, full_name)
values
  (tests.get_supabase_uid('org_owner'), 'org_owner', 'Organization Owner'),
  (tests.get_supabase_uid('org_admin'), 'org_admin', 'Organization Admin'),
  (tests.get_supabase_uid('org_editor'), 'org_editor', 'Organization Editor'),
  (tests.get_supabase_uid('premium_user'), 'premium_user', 'Premium User'),
  (tests.get_supabase_uid('free_user'), 'free_user', 'Free User'),
  (tests.get_supabase_uid('scheduler'), 'scheduler', 'Scheduler User'),
  (tests.get_supabase_uid('free_author'), 'free_author', 'Free Author');

-- First authenticate as service role to bypass RLS for initial setup
select tests.authenticate_as_service_role();

-- Create test organizations and setup data
with new_org as (
  insert into organizations (name, slug, plan_type, max_posts)
  values
    ('Test Org', 'test-org', 'pro', 100),
    ('Premium Org', 'premium-org', 'enterprise', 1000),
    ('Schedule Org', 'schedule-org', 'pro', 100),
    ('Free Org', 'free-org', 'free', 2)
  returning id, slug
),
-- Setup members and posts
member_setup as (
  insert into org_members (org_id, user_id, role)
  select
    org.id,
    user_id,
    role
  from new_org org cross join (
    values
      (tests.get_supabase_uid('org_owner'), 'owner'),
      (tests.get_supabase_uid('org_admin'), 'admin'),
      (tests.get_supabase_uid('org_editor'), 'editor'),
      (tests.get_supabase_uid('premium_user'), 'viewer'),
      (tests.get_supabase_uid('scheduler'), 'editor'),
      (tests.get_supabase_uid('free_author'), 'editor')
  ) as members(user_id, role)
  where org.slug = 'test-org'
     or (org.slug = 'premium-org' and role = 'viewer')
     or (org.slug = 'schedule-org' and role = 'editor')
     or (org.slug = 'free-org' and role = 'editor')
)
-- Setup initial posts
insert into posts (title, content, org_id, author_id, status, is_premium, scheduled_for)
select
  title,
  content,
  org.id,
  author_id,
  status,
  is_premium,
  scheduled_for
from new_org org cross join (
  values
    ('Premium Post', 'Premium content', tests.get_supabase_uid('premium_user'), 'published', true, null),
    ('Free Post', 'Free content', tests.get_supabase_uid('premium_user'), 'published', false, null),
    ('Future Post', 'Future content', tests.get_supabase_uid('scheduler'), 'published', false, '2024-01-02 12:00:00+00'::timestamptz)
) as posts(title, content, author_id, status, is_premium, scheduled_for)
where org.slug in ('premium-org', 'schedule-org');

-- Test owner privileges
select tests.authenticate_as('org_owner');
select lives_ok(
  $$
    update organizations
    set name = 'Updated Org'
    where id = (select id from organizations limit 1)
  $$,
  'Owner can update organization'
);

-- Test admin privileges
select tests.authenticate_as('org_admin');
select results_eq(
    $$select count(*) from org_members$$,
    ARRAY[6::bigint],
    'Admin can view all members'
);

-- Test editor restrictions
select tests.authenticate_as('org_editor');
select throws_ok(
  $$
    insert into org_members (org_id, user_id, role)
    values (
      (select id from organizations limit 1),
      (select tests.get_supabase_uid('org_editor')),
      'viewer'
    )
  $$,
  '42501',
  'new row violates row-level security policy for table "org_members"',
  'Editor cannot manage members'
);

-- Premium Content Access Tests
select tests.authenticate_as('premium_user');
select results_eq(
    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,
    ARRAY[3::bigint],
    'Premium user can see all posts'
);

select tests.clear_authentication();
select results_eq(
    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,
    ARRAY[2::bigint],
    'Anonymous users can only see free posts'
);

-- Time-Based Publishing Tests
select tests.authenticate_as('scheduler');
select tests.freeze_time('2024-01-01 12:00:00+00'::timestamptz);

select results_eq(
    $$select count(*) from posts where scheduled_for > now() and org_id = (select id from organizations where slug = 'schedule-org')$$,
    ARRAY[1::bigint],
    'Can see scheduled posts'
);

select tests.freeze_time('2024-01-02 13:00:00+00'::timestamptz);

select results_eq(
    $$select count(*) from posts where scheduled_for < now() and org_id = (select id from organizations where slug = 'schedule-org')$$,
    ARRAY[1::bigint],
    'Can see posts after schedule time'
);

select tests.unfreeze_time();

-- Plan Limit Tests
select tests.authenticate_as('free_author');

select lives_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 1', 'Content 1', id, auth.uid(), 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  'First post creates successfully'
);

select lives_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 2', 'Content 2', id, auth.uid(), 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  'Second post creates successfully'
);

select throws_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 3', 'Content 3', id, auth.uid(), 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  '42501',
  'new row violates row-level security policy for table "posts"',
  'Cannot exceed free plan post limit'
);

select * from finish();
rollback;

----------------------------------------

TITLE: Checking Due Tasks and Updating Status in PostgreSQL
DESCRIPTION: This SQL function checks for due tasks, updates their status, and sends Slack notifications when necessary. It uses advisory locks to prevent concurrent execution and handles task verification and status updating.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION "public"."check_due_tasks_and_update"() RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    _task RECORD;
    _response JSONB;
    _response_row JSONB;
    _ticket_id text;
    _have_replied BOOLEAN;
    _ticket_array text;
    _lock_key CONSTANT int := 42;
    _lock_acquired boolean;
BEGIN
    -- Try to acquire the advisory lock
    _lock_acquired := pg_try_advisory_lock(_lock_key);
    IF NOT _lock_acquired THEN
        RAISE NOTICE 'Could not acquire lock. Another instance is running. Exiting function...';
        RETURN;
    END IF;

    -- Call create_ticket_array()
    RAISE NOTICE 'Calling create_ticket_array()';
    _ticket_array := public.create_ticket_array();

    -- Check IF _ticket_array is '[]'
    IF _ticket_array = '[]' THEN
        RAISE NOTICE 'No tickets to process. Exiting function...';
        -- Release the advisory lock
        PERFORM pg_advisory_unlock(_lock_key);
        RETURN;
    END IF;

    -- Call help_plataform_wrapper() using _ticket_array
    RAISE NOTICE 'Calling help_plataform_wrapper()';
    _response := public.help_plataform_wrapper(_ticket_array);

    -- Check IF _response is NULL
    IF _response IS NULL THEN
        RAISE NOTICE 'Response is NULL. Exiting function...';
        -- Release the advisory lock
        PERFORM pg_advisory_unlock(_lock_key);
        RETURN;
    END IF;

    -- Process the response
    FOR _response_row IN SELECT * FROM jsonb_array_elements(_response)
    LOOP
        _ticket_id := _response_row->>'ticket_id';
        _have_replied := (_response_row->>'have_replied')::BOOLEAN;
        RAISE NOTICE 'Processing response for ticket_id: %, have_replied: %', _ticket_id, _have_replied;
        IF _have_replied THEN
            RAISE NOTICE 'Ticket % has a reply. Updating...', _ticket_id;
            -- Perform actions for replied tickets
            UPDATE public.checking_tasks_queue
            SET replied_at = NOW(), replied = TRUE
            WHERE payload->>'ticket_id' = _ticket_id;
        ELSE
            RAISE NOTICE 'Ticket % has no reply. Taking actions...', _ticket_id;
            -- Perform actions for no reply
            SELECT * INTO _task FROM public.checking_tasks_queue
            WHERE payload->>'ticket_id' = _ticket_id AND status = '' AND due_time <= NOW()
            ORDER BY due_time ASC
            LIMIT 1;

            IF FOUND THEN
                RAISE NOTICE 'Sending Slack notification for ticket %', _ticket_id;
                -- Use EXCEPTION to handle duplicate keys
                BEGIN
                    INSERT INTO post_to_slack_log(payload) VALUES (_task.payload);
                    PERFORM slack_post_wrapper(_task.payload);
                EXCEPTION
                    WHEN unique_violation THEN
                        RAISE NOTICE 'Duplicate entry for ticket %. Skipping...', _ticket_id;
                    WHEN OTHERS THEN
                        RAISE NOTICE 'Error while inserting into post_to_slack_log. Skipping...';
                        RAISE NOTICE '% %', SQLERRM, SQLSTATE;
                END;
                -- Update the status to 'sent' after calling slack_post_wrapper
                UPDATE public.checking_tasks_queue
                SET status = 'sent'
                WHERE id = _task.id;
            ELSE
                RAISE NOTICE 'Task for ticket % not found!', _ticket_id;
            END IF;
        END IF;
    END LOOP;
    -- Release the advisory lock
    PERFORM pg_advisory_unlock(_lock_key);
END;
$$;

----------------------------------------

TITLE: Implementing Zoom OAuth Sign-In with Supabase in Kotlin
DESCRIPTION: Initiates the Zoom OAuth sign-in process in a Kotlin application using Supabase's signInWith method. This function should be called when the user wants to log in with their Zoom account.

LANGUAGE: kotlin
CODE:
suspend fun signInWithZoom() {
	supabase.auth.signInWith(Zoom)
}

----------------------------------------

TITLE: Creating Supabase Load Client in SvelteKit Layout
DESCRIPTION: TypeScript code for creating a Supabase load client in the SvelteKit root layout load function.

LANGUAGE: typescript
CODE:
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'
import type { Database } from '../DatabaseDefinitions'

export const load = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = createSupabaseLoadClient<Database>({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event: { fetch },
    serverSession: data.session,
  })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}

----------------------------------------

TITLE: Creating Supabase Storage Bucket with SQL
DESCRIPTION: This SQL query inserts a new record into the storage.buckets table to create a public bucket named 'avatars'. It directly interacts with the Postgres database underlying Supabase Storage.

LANGUAGE: sql
CODE:
insert into storage.buckets
  (id, name, public)
values
  ('avatars', 'avatars', true);

----------------------------------------

TITLE: User Object Interface in Supabase Auth
DESCRIPTION: TypeScript interface showing the structure of a user object in Supabase Auth, including all available attributes and their types. This object is returned when fetching user data via auth methods.

LANGUAGE: typescript
CODE:
interface User {
  id: string;         // Unique user identity ID
  aud: string;        // Audience claim
  role: string;       // Role for Row Level Security
  email: string;      // User's email address
  email_confirmed_at: string;  // Email confirmation timestamp
  phone: string;      // User's phone number
  phone_confirmed_at: string;  // Phone confirmation timestamp
  confirmed_at: string;        // Email/phone confirmation timestamp
  last_sign_in_at: string;     // Last signin timestamp
  app_metadata: object;        // Provider information
  user_metadata: object;       // Custom user metadata
  identities: UserIdentity[];  // Linked identities array
  created_at: string;          // User creation timestamp
  updated_at: string;          // Last update timestamp
  is_anonymous: boolean;       // Anonymous user flag
}

----------------------------------------

TITLE: Implementing Email Sending Handler
DESCRIPTION: TypeScript implementation of the email sending handler function using Resend API. Configures the email content and sends it using fetch API with proper authentication.

LANGUAGE: typescript
CODE:
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')

const handler = async (_request: Request): Promise<Response> => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'onboarding@resend.dev',
      to: 'delivered@resend.dev',
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  })

  const data = await res.json()

  return new Response(JSON.stringify(data), {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

Deno.serve(handler)

----------------------------------------

TITLE: Creating New Edge Function
DESCRIPTION: Creates a new Edge Function named 'hello-world' using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase functions new hello-world

----------------------------------------

TITLE: Verifying JWT using pgjwt Extension in PostgreSQL
DESCRIPTION: Example of using the verify function from the pgjwt extension to parse and validate a JSON Web Token. It shows how to provide the token, secret, and algorithm parameters.

LANGUAGE: sql
CODE:
select
  extensions.verify(
    token := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiRm9vIn0.Q8hKjuadCEhnCPuqIj9bfLhTh_9QSxshTRsA5Aq4IuM',
    secret    := 'secret',
    algorithm := 'HS256'
  );

----------------------------------------

TITLE: Installing Supabase Cron Postgres Module using SQL
DESCRIPTION: SQL commands to create the pg_cron extension and grant necessary privileges. This enables the Supabase Cron functionality for scheduling recurring Jobs.

LANGUAGE: sql
CODE:
create extension pg_cron with schema pg_catalog;

grant usage on schema cron to postgres;
grant all privileges on all tables in schema cron to postgres;

----------------------------------------

TITLE: Complex Index Advisor Query Example - SQL
DESCRIPTION: Demonstrates index_advisor usage with a complex query involving multiple table joins and conditions.

LANGUAGE: sql
CODE:
create extension if not exists index_advisor cascade;

create table author(
    id serial primary key,
    name text not null
);

create table publisher(
    id serial primary key,
    name text not null,
    corporate_address text
);

create table book(
    id serial primary key,
    author_id int not null references author(id),
    publisher_id int not null references publisher(id),
    title text
);

create table review(
    id serial primary key,
    book_id int references book(id),
    body text not null
);

select
    *
from
    index_advisor('
        select
            book.id,
            book.title,
            publisher.name as publisher_name,
            author.name as author_name,
            review.body review_body
        from
            book
            join publisher
                on book.publisher_id = publisher.id
            join author
                on book.author_id = author.id
            join review
                on book.id = review.book_id
        where
            author.id = $1
            and publisher.id = $2
    ');

----------------------------------------

TITLE: Creating plv8 Function Template in PostgreSQL
DESCRIPTION: Template for creating a plv8 function in PostgreSQL. The function is defined with the language identifier set to plv8.

LANGUAGE: sql
CODE:
create or replace function function_name()
returns void as $$
    // V8 JavaScript
    // code
    // here
$$ language plv8;

----------------------------------------

TITLE: Enabling plv8 Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the plv8 extension in PostgreSQL. The extension is automatically installed within pg_catalog.

LANGUAGE: sql
CODE:
-- Example: enable the "plv8" extension
create extension plv8;

-- Example: disable the "plv8" extension
drop extension if exists plv8;

----------------------------------------

TITLE: Copying Root Encryption Key for Column Encryption
DESCRIPTION: This bash script copies the root encryption key from an old Supabase project to a new one when column encryption is enabled. It requires the project references and a personal access token.

LANGUAGE: bash
CODE:
export OLD_PROJECT_REF="<old_project_ref>"
export NEW_PROJECT_REF="<new_project_ref>"
export SUPABASE_ACCESS_TOKEN="<personal_access_token>"

curl "https://api.supabase.com/v1/projects/$OLD_PROJECT_REF/pgsodium" \
  -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" |
curl "https://api.supabase.com/v1/projects/$NEW_PROJECT_REF/pgsodium" \
  -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
  -X PUT --json @-

----------------------------------------

TITLE: Customizing Email Link for Server-Side Authentication in HTML
DESCRIPTION: This example shows how to customize the email link to redirect users to a server-side endpoint for authentication. It includes token_hash, type, and redirect_to parameters in the URL.

LANGUAGE: html
CODE:
<a href="https://api.example.com/v1/authenticate?token_hash={{ .TokenHash }}&type=invite&redirect_to={{ .RedirectTo }}">Accept the invite</a>

----------------------------------------

TITLE: Querying Enum Values in PostgreSQL
DESCRIPTION: This snippet shows how to retrieve all values of an Enum type using the enum_range function, which returns an array of all values for the 'mood' Enum.

LANGUAGE: sql
CODE:
select enum_range(null::mood);

----------------------------------------

TITLE: Sign In with GitHub - Swift
DESCRIPTION: Function to authenticate users using GitHub OAuth in a Swift application using Supabase client.

LANGUAGE: swift
CODE:
func signInWithGithub() async throws {
  try await supabase.auth.signInWithOAuth(
    provider: .github,
    redirectTo: URL(string: "my-custom-scheme://my-app-host")
  )
}

----------------------------------------

TITLE: Serving Supabase Functions in Inspect Mode
DESCRIPTION: Command to serve Supabase functions in inspect mode, which sets a breakpoint at the first line to pause script execution before any code runs.

LANGUAGE: bash
CODE:
supabase functions serve --inspect-mode brk

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users to Receive Broadcasts
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to receive broadcasts if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can receive broadcast"
on "realtime"."messages"
for select
to authenticated
using (
exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('broadcast')
  )
);

----------------------------------------

TITLE: Creating New PostgreSQL Database
DESCRIPTION: Demonstrates the basic syntax for creating a new database, which by default uses template1.

LANGUAGE: sql
CODE:
CREATE DATABASE new_db_name;

----------------------------------------

TITLE: Implementing Sign Out - JavaScript
DESCRIPTION: JavaScript implementation for signing out users and clearing their session data.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase
DESCRIPTION: Create a .env.local file with Supabase URL and anon key for authentication.

LANGUAGE: bash
CODE:
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key

----------------------------------------

TITLE: Creating Tables with OrioleDB Storage Engine
DESCRIPTION: Demonstrates how to create a basic table using OrioleDB as the storage engine. The example creates a blog_post table with various columns and a primary key.

LANGUAGE: sql
CODE:
create table blog_post (
  id int8 not null,
  title text not null,
  body text not null,
  author text not null,
  published_at timestamptz not null default CURRENT_TIMESTAMP,
  views bigint not null,
  primary key (id)
);

----------------------------------------

TITLE: Initializing Broadcast Changes Client Subscription in JavaScript
DESCRIPTION: Sets up a Supabase client subscription to listen for broadcast INSERT events for a specific game using the new Broadcast Changes system.

LANGUAGE: javascript
CODE:
const gameId = '4a8bbe89-f601-4414-bd47-8d0f7ab2a31a'
await supabase.realtime.setAuth() // Needed for Realtime Authorization
const changes = supabase
  .channel(`games:${gameId}`)
  .on(
    'broadcast',
    {
      event: 'INSERT',
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Inserting JSON Data into PostgreSQL Table
DESCRIPTION: SQL command to insert multiple rows of data into the 'books' table, including JSON data in the 'metadata' column.

LANGUAGE: sql
CODE:
insert into books
  (title, author, metadata)
values
  (
    'The Poky Little Puppy',
    'Janette Sebring Lowrey',
    '{"description":"Puppy is slower than other, bigger animals.","price":5.95,"ages":[3,6]}'
  ),
  (
    'The Tale of Peter Rabbit',
    'Beatrix Potter',
    '{"description":"Rabbit eats some vegetables.","price":4.49,"ages":[2,5]}'
  ),
  (
    'Tootle',
    'Gertrude Crampton',
    '{"description":"Little toy train has big dreams.","price":3.99,"ages":[2,5]}'
  ),
  (
    'Green Eggs and Ham',
    'Dr. Seuss',
    '{"description":"Sam has changing food preferences and eats unusually colored food.","price":7.49,"ages":[4,8]}'
  ),
  (
    'Harry Potter and the Goblet of Fire',
    'J.K. Rowling',
    '{"description":"Fourth year of school starts, big drama ensues.","price":24.95,"ages":[10,99]}'
  );

----------------------------------------

TITLE: Querying Vector Collection with Filters
DESCRIPTION: Shows how to query the vector collection with similarity search and metadata filtering. Returns the closest match to the query vector with specific metadata constraints.

LANGUAGE: python
CODE:
import vecs

docs = vecs.get_or_create_collection(name="docs", dimension=3)

# query the collection filtering metadata for "year" = 2012
docs.query(
    data=[0.4,0.5,0.6],      # required
    limit=1,                         # number of records to return
    filters={"year": {"$eq": 2012}}, # metadata filters
)

----------------------------------------

TITLE: Scheduling Nightly ETL Job using pg_cron in SQL
DESCRIPTION: This SQL snippet demonstrates how to schedule a nightly ETL job using pg_cron to copy data from a production database to a data warehouse.

LANGUAGE: sql
CODE:
select cron.schedule(
  'nightly-etl',
  '0 3 * * *',
  $$
    insert into warehouse.analytics
    select * from public.analytics
    where ts > (now() - interval '1 DAY');
  $$
);

----------------------------------------

TITLE: Complex Schema with Views and Functions
DESCRIPTION: Advanced schema example showing table creation with dependent view and function definitions.

LANGUAGE: sql
CODE:
create table "employees" (
  "id" integer not null,
  "name" text,
  "age" smallint not null
);

create view "profiles" as
  select id, name from "employees";

create function "get_age"(employee_id integer) RETURNS smallint
  LANGUAGE "sql"
AS $$
  select age
  from employees
  where id = employee_id;
$$;

----------------------------------------

TITLE: Filtering Logs with Regular Expressions in SQL
DESCRIPTION: This snippet shows how to use the regexp_contains function to filter log messages. It selects the timestamp, event_message, and metadata columns from the postgres_logs table, filtering for messages containing a specific phrase.

LANGUAGE: sql
CODE:
select
  cast(timestamp as datetime) as timestamp,
  event_message,
  metadata
from postgres_logs
where regexp_contains(event_message, 'is present');

----------------------------------------

TITLE: Implementing Login Page in Ionic Angular
DESCRIPTION: Create a LoginPage component to handle user authentication using Supabase magic links.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core'
import { SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-login',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="ion-padding">
        <h1>Supabase + Ionic Angular</h1>
        <p>Sign in via magic link with your email below</p>
      </div>
      <ion-list inset="true">
        <form (ngSubmit)="handleLogin($event)">
          <ion-item>
            <ion-label position="stacked">Email</ion-label>
            <ion-input [(ngModel)]="email" name="email" autocomplete type="email"></ion-input>
          </ion-item>
          <div class="ion-text-center">
            <ion-button type="submit" fill="clear">Login</ion-button>
          </div>
        </form>
      </ion-list>
    </ion-content>
  `,
  styleUrls: ['./login.page.scss'],
})
export class LoginPage {
  email = ''

  constructor(private readonly supabase: SupabaseService) {}

  async handleLogin(event: any) {
    event.preventDefault()
    const loader = await this.supabase.createLoader()
    await loader.present()
    try {
      const { error } = await this.supabase.signIn(this.email)
      if (error) {
        throw error
      }
      await loader.dismiss()
      await this.supabase.createNotice('Check your email for the login link!')
    } catch (error: any) {
      await loader.dismiss()
      await this.supabase.createNotice(error.error_description || error.message)
    }
  }
}

----------------------------------------

TITLE: Configuring Environment Variables for Vercel Edge Functions
DESCRIPTION: Sets up the POSTGRES_URL environment variable for connecting to a Supabase database from Vercel Edge Functions. It includes the connection pooler URL with a specific suffix for Vercel compatibility.

LANGUAGE: plaintext
CODE:
POSTGRES_URL="postgres://postgres.cfcxynqnhdybqtbhjemm:[YOUR-PASSWORD]@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?workaround=supabase-pooler.vercel"

----------------------------------------

TITLE: Setting Slack Token Environment Variable in Supabase
DESCRIPTION: Command to set the SLACK_TOKEN secret in Supabase project configuration using the CLI.

LANGUAGE: bash
CODE:
supabase --project-ref nacho_slacker secrets \
set SLACK_TOKEN=<xoxb-0000000000-0000000000-01010101010nacho101010>

----------------------------------------

TITLE: Implementing Alert Dialog Component
DESCRIPTION: Example TypeScript/React code demonstrating how to implement a complete alert dialog with header, description, and action buttons.

LANGUAGE: tsx
CODE:
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account and remove your data
        from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>

----------------------------------------

TITLE: Implementing RLS Policies for Anonymous Users in Supabase
DESCRIPTION: Shows how to create row-level security (RLS) policies to differentiate between anonymous and permanent users using the is_anonymous claim in the JWT.

LANGUAGE: sql
CODE:
create policy "Only permanent users can post to the news feed"
on news_feed as restrictive for insert
to authenticated
with check ((select (auth.jwt()->>'is_anonymous')::boolean) is false );

create policy "Anonymous and permanent users can view the news feed"
on news_feed for select
to authenticated
using ( true );

----------------------------------------

TITLE: Installing project dependencies with Poetry
DESCRIPTION: Command to add required dependencies (vecs, sentence-transformers, matplotlib) to the Poetry project.

LANGUAGE: shell
CODE:
poetry add vecs sentence-transformers matplotlib

----------------------------------------

TITLE: Inserting Embeddings with Metadata Using Python vecs Library
DESCRIPTION: This Python script demonstrates how to use the vecs library to create a collection and upsert vectors with associated metadata. It automatically creates an unstructured table in the database.

LANGUAGE: python
CODE:
#!/usr/bin/env python3
import vecs

# In practice, do not hard-code your password. Use environment variables.
DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

docs = vx.get_or_create_collection(name="docs", dimension=1536)

docs.upsert(vectors=[
  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', [100, 200, 300], { url: '/hello-world' })
])

----------------------------------------

TITLE: Generating Public URL for Supabase Storage Asset
DESCRIPTION: Uses the Supabase SDK's getPublicUrl method to generate a public URL for an asset in a storage bucket. This method simplifies the process of creating access URLs for public assets.

LANGUAGE: javascript
CODE:
const { data } = supabase.storage.from('bucket').getPublicUrl('filePath.jpg')

console.log(data.publicUrl)

----------------------------------------

TITLE: Next.js Custom Image Loader
DESCRIPTION: Implementation of a custom image loader for Next.js to use Supabase image transformations.

LANGUAGE: typescript
CODE:
const projectId = '' // your supabase project id

export default function supabaseLoader({ src, width, quality }) {
  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${quality || 75}`
}

----------------------------------------

TITLE: Setting Database as Template
DESCRIPTION: Shows how to convert an existing database into a template database by altering its properties.

LANGUAGE: sql
CODE:
ALTER DATABASE template_db_name WITH is_template TRUE;

----------------------------------------

TITLE: Sample JSON Response from pg_graphql Query
DESCRIPTION: Example JSON output returned by the pg_graphql query, showing the structure of the response with the blog's id and name.

LANGUAGE: json
CODE:
{
  "data": {
    "blogCollection": {
      "edges": [
        {
          "node": {
            "id": 1
            "name": "My Blog"
          }
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Implementing LinkedIn OAuth Sign In - JavaScript
DESCRIPTION: JavaScript implementation for signing in users with LinkedIn OAuth through Supabase authentication.

LANGUAGE: javascript
CODE:
async function signInWithLinkedIn() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'linkedin_oidc',
  })
}

----------------------------------------

TITLE: Creating Next.js Supabase Client
DESCRIPTION: Implementation of Supabase client creation for both client-side and server-side in Next.js

LANGUAGE: typescript
CODE:
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in Expo React Native
DESCRIPTION: This code snippet shows how to implement Magic Link authentication using Supabase Auth in Expo React Native. It uses the makeRedirectUri function from expo-auth-session to handle deep linking.

LANGUAGE: typescript
CODE:
import { makeRedirectUri } from 'expo-auth-session'

const redirectTo = makeRedirectUri()

const { error } = await supabase.auth.signInWithOtp({
  email: 'valid.email@supabase.io',
  options: {
    emailRedirectTo: redirectTo,
  },
})

----------------------------------------

TITLE: Querying Users Table in Supabase
DESCRIPTION: SQL query to select all users from the Supabase auth.users table to verify the initial empty state of the authentication system.

LANGUAGE: sql
CODE:
select * from auth.users;

----------------------------------------

TITLE: Creating a Publication for Insert Events in SQL
DESCRIPTION: This SQL command creates a publication that listens only to insert events on all tables.

LANGUAGE: sql
CODE:
create publication publication_name
for all tables
with (publish = 'insert');

----------------------------------------

TITLE: Activating a Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to activate a custom domain for a project. This command enables the custom domain to serve requests for the project.

LANGUAGE: bash
CODE:
supabase domains activate --project-ref abcdefghijklmnopqrst

----------------------------------------

TITLE: Code Exchange Route Implementation
DESCRIPTION: Implementation of the code exchange route handler for server-side authentication flow.

LANGUAGE: typescript
CODE:
import { redirect } from '@remix-run/node'
import { createServerClient } from '@supabase/auth-helpers-remix'

import type { Database } from 'db_types'
import type { LoaderFunctionArgs } from '@remix-run/node'

export const loader = async ({ request }: LoaderFunctionArgs) => {
  const response = new Response()
  const url = new URL(request.url)
  const code = url.searchParams.get('code')

  if (code) {
    const supabaseClient = createServerClient<Database>(
      process.env.SUPABASE_URL!,
      process.env.SUPABASE_ANON_KEY!,
      { request, response }
    )
    await supabaseClient.auth.exchangeCodeForSession(code)
  }

  return redirect('/', {
    headers: response.headers,
  })
}

----------------------------------------

TITLE: Implementing Background Tasks with Edge Runtime
DESCRIPTION: Demonstrates how to implement a long-running background task using EdgeRuntime.waitUntil() and handle function shutdown events with beforeunload listener. Shows basic request handling pattern.

LANGUAGE: typescript
CODE:
async function longRunningTask() {
  // do work here
}

// Mark the longRunningTask's returned promise as a background task.
// note: we are not using await because we don't want it to block.
EdgeRuntime.waitUntil(longRunningTask())

// Use beforeunload event handler to be notified when function is about to shutdown
addEventListener('beforeunload', (ev) => {
  console.log('Function will be shutdown due to', ev.detail?.reason)

  // save state or log the current progress
})

// Invoke the function using a HTTP request.
// This will start the background task
Deno.serve(async (req) => {
  return new Response('ok')
})

----------------------------------------

TITLE: Enabling PGAudit Extension in Supabase
DESCRIPTION: SQL commands to enable or disable the PGAudit extension in a Supabase database.

LANGUAGE: sql
CODE:
-- Enable the "pgaudit" extension
create extension pgaudit;

-- Disable the "pgaudit" extension
drop extension if exists pgaudit;

----------------------------------------

TITLE: Querying Customer Orders with Joins and Filters in SQL
DESCRIPTION: Example SQL query that retrieves customer names and purchase dates from customers and orders tables, using joins, filters, and ordering.

LANGUAGE: sql
CODE:
select
  a.name,
  b.date_of_purchase
from
  customers as a
  join orders as b on a.id = b.customer_id
where a.sign_up_date > '2023-01-01' and b.status = 'shipped'
order by b.date_of_purchase
limit 10;

----------------------------------------

TITLE: Querying Customer Orders with Joins and Filters in SQL
DESCRIPTION: Example SQL query that retrieves customer names and purchase dates from customers and orders tables, using joins, filters, and ordering.

LANGUAGE: sql
CODE:
select
  a.name,
  b.date_of_purchase
from
  customers as a
  join orders as b on a.id = b.customer_id
where a.sign_up_date > '2023-01-01' and b.status = 'shipped'
order by b.date_of_purchase
limit 10;

----------------------------------------

TITLE: Basic Google Sign-in Implementation with Supabase
DESCRIPTION: JavaScript code showing how to implement Google authentication using Supabase Auth

LANGUAGE: javascript
CODE:
supabase.auth.signInWithOAuth({
  provider: 'google',
})

----------------------------------------

TITLE: Reading Messages from PGMQ Queue in SQL
DESCRIPTION: Reads messages from a queue with a visibility timeout using the pgmq.read function.

LANGUAGE: sql
CODE:
select * from pgmq.read('my_queue', 10, 2);

----------------------------------------

TITLE: Enabling pg_net Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pg_net extension in PostgreSQL database.

LANGUAGE: sql
CODE:
-- Example: enable the "pg_net" extension.
create extension pg_net;
-- Note: The extension creates its own schema/namespace named "net" to avoid naming conflicts.

-- Example: disable the "pg_net" extension
drop extension if exists pg_net;
drop schema net;

----------------------------------------

TITLE: Enabling pg_graphql Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pg_graphql extension in a PostgreSQL database. This is typically done through the dashboard or via SQL commands.

LANGUAGE: sql
CODE:
-- Enable the "pg_graphql" extension
create extension pg_graphql;

-- Disable the "pg_graphql" extension
drop extension if exists pg_graphql;

----------------------------------------

TITLE: Implementing Data Query Interface in Flutter
DESCRIPTION: Implementation of a Flutter UI that queries and displays data from Supabase using FutureBuilder

LANGUAGE: dart
CODE:
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Instruments',
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final _future = Supabase.instance.client
      .from('instruments')
      .select();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder(
        future: _future,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }
          final instruments = snapshot.data!;
          return ListView.builder(
            itemCount: instruments.length,
            itemBuilder: ((context, index) {
              final instrument = instruments[index];
              return ListTile(
                title: Text(instrument['name']),
              );
            }),
          );
        },
      ),
    );
  }
}

----------------------------------------

TITLE: Querying Most Time Consuming Queries
DESCRIPTION: SQL query to identify queries that consume the most cumulative execution time, showing total time and proportion of total execution time.

LANGUAGE: sql
CODE:
select
  auth.rolname,
  statements.query,
  statements.calls,
  statements.total_exec_time + statements.total_plan_time as total_time,
  to_char(
    (
      (statements.total_exec_time + statements.total_plan_time) / sum(
        statements.total_exec_time + statements.total_plan_time
      ) over ()
    ) * 100,
    'FM90D0'
  ) || '%' as prop_total_time
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by total_time desc
limit 100;

----------------------------------------

TITLE: Importing Database to Supabase
DESCRIPTION: Command to import the SQL dump file into Supabase using psql.

LANGUAGE: bash
CODE:
psql -d "$NEW_DB_URL" -f dump.sql

----------------------------------------

TITLE: Signing in with Phone OTP in Python
DESCRIPTION: Use the supabase.auth.sign_in_with_otp method to initiate a phone login in Python. The user receives an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: python
CODE:
response = supabase.auth.sign_in_with_otp({
  'phone': '+13334445555',
})

----------------------------------------

TITLE: Creating RLS Policy for Broadcast and Presence Read
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to listen to both broadcast and presence messages if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can listen to broadcast and presence on topic"
on "realtime"."messages"
for select
to authenticated
using (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('broadcast', 'presence')
  )
);

----------------------------------------

TITLE: Creating Sample Function with Error for Testing
DESCRIPTION: Creates a table and function with a deliberate error to demonstrate plpgsql_check's linting capabilities. The function attempts to access a non-existent column.

LANGUAGE: sql
CODE:
create table place(
  x float,
  y float
);

create or replace function public.some_func()
  returns void
  language plpgsql
as $$
declare
  rec record;
begin
  for rec in select * from place
  loop
    -- Bug: There is no column `created_at` on table `place`
    raise notice '%', rec.created_at;
  end loop;
end;
$$;

----------------------------------------

TITLE: Implementing LinkedIn OAuth Sign In - Flutter
DESCRIPTION: Flutter/Dart implementation for signing in users with LinkedIn OAuth through Supabase authentication, including mobile-specific configuration options.

LANGUAGE: dart
CODE:
Future<void> signInWithLinkedIn() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.linkedinOidc,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Starting the Nuxt Development Server
DESCRIPTION: This command starts the Nuxt development server, allowing you to view your application at http://localhost:3000.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Implementing User Avatar Upload Component
DESCRIPTION: Creates a component for handling profile photo uploads using Supabase Storage and Expo Image Picker.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'
import { StyleSheet, View, Alert, Image, Button } from 'react-native'
import * as ImagePicker from 'expo-image-picker'

interface Props {
  size: number
  url: string | null
  onUpload: (filePath: string) => void
}

export default function Avatar({ url, size = 150, onUpload }: Props) {
  const [uploading, setUploading] = useState(false)
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)
  const avatarSize = { height: size, width: size }

  useEffect(() => {
    if (url) downloadImage(url)
  }, [url])

  async function downloadImage(path: string) {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)

      if (error) {
        throw error
      }

      const fr = new FileReader()
      fr.readAsDataURL(data)
      fr.onload = () => {
        setAvatarUrl(fr.result as string)
      }
    } catch (error) {
      if (error instanceof Error) {
        console.log('Error downloading image: ', error.message)
      }
    }
  }

----------------------------------------

TITLE: Creating Index for Embeddings in SQL
DESCRIPTION: SQL command to create an index for the embedding column in the documents table to improve query performance using approximate nearest neighbor search.

LANGUAGE: sql
CODE:
create index on documents
using ivfflat (embedding vector_ip_ops)
with (lists = 10);

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Python
DESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the standard upload method in Python. It assumes a Supabase client has already been initialized.

LANGUAGE: python
CODE:
response = supabase.storage.from_('bucket_name').upload('file_path', file)

----------------------------------------

TITLE: Importing and Initializing Supabase Client
DESCRIPTION: This JavaScript code imports the Supabase client library, creates a client instance, and logs it to the console.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

console.log('Supabase Instance: ', supabase)

----------------------------------------

TITLE: Accessing Error Properties in JavaScript
DESCRIPTION: Shows how to access the code and status properties of an AuthApiError in JavaScript.

LANGUAGE: javascript
CODE:
error.code
error.status

----------------------------------------

TITLE: Enabling pgTAP Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pgTAP extension in PostgreSQL. The extension is created in a separate schema to keep the public schema clean.

LANGUAGE: sql
CODE:
-- Enable the "pgtap" extension
create extension pgtap with schema extensions;

-- Disable the "pgtap" extension
drop extension if exists pgtap;

----------------------------------------

TITLE: Configuring Supabase Client with Amazon Cognito in Swift for iOS
DESCRIPTION: This code snippet shows how to initialize the Supabase client in Swift for iOS, using AWS Amplify for authentication token retrieval.

LANGUAGE: swift
CODE:
import Supabase
import AWSPluginsCore

struct UnexpectedAuthSessionError: Error {}

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://<supabase-project>.supabase.co")!,
  supabaseKey: "SUPABASE_ANON_KEY",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        let session = try await Amplify.Auth.fetchAuthSession()

        guard let cognitoTokenProvider = session as? AuthCognitoTokensProvider else {
          throw UnexpectedAuthSessionError()
        }

        let tokens = try cognitoTokenProvider.getCognitoTokens().get()
        return tokens.idToken
      }
    )
  )
)

----------------------------------------

TITLE: Adding user metadata on signup in Dart for Supabase
DESCRIPTION: Dart code snippet showing how to add metadata to a user during the signup process using Supabase authentication.

LANGUAGE: dart
CODE:
final res = await supabase.auth.signUp(
  email: 'valid.email@supabase.io',
  password: 'example-password',
  data: {
    'first_name': 'John',
    'age': 27,
  },
);

----------------------------------------

TITLE: Enabling PostGIS Extension in SQL
DESCRIPTION: SQL commands to create a dedicated schema and enable the PostGIS extension in Postgres.

LANGUAGE: sql
CODE:
-- Create a dedicated separate schema
create schema if not exists "gis";

-- Example: enable the "postgis" extension
create extension postgis with schema "gis";

-- Example: disable the "postgis" extension
drop extension if exists postgis;

----------------------------------------

TITLE: Creating Broadcast Changes Trigger Function in SQL
DESCRIPTION: Defines a trigger function that broadcasts changes using realtime.broadcast_changes for game moves.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION public.broadcast_moves() RETURNS trigger AS $$
BEGIN
    PERFORM realtime.broadcast_changes(
	    'games:' || NEW.game_id::text,   -- topic
		   TG_OP,                          -- event
		   TG_OP,                          -- operation
		   TG_TABLE_NAME,                  -- table
		   TG_TABLE_SCHEMA,                -- schema
		   NEW,                            -- new record
		   OLD                             -- old record
		);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Changing Database Timezone in Postgres
DESCRIPTION: This SQL command alters the timezone of the Postgres database to 'America/New_York'. It demonstrates how to set a specific timezone for a Supabase database.

LANGUAGE: sql
CODE:
alter database postgres
set timezone to 'America/New_York';

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users to Listen to Presence
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to listen to presence messages if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can listen to presence in topic"
on "realtime"."messages"
for select
to authenticated
using (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('presence')
  )
);

----------------------------------------

TITLE: Implementing Supabase Client Initialization
DESCRIPTION: Main application setup with Supabase client initialization and base app structure.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

----------------------------------------

TITLE: Invoking Remote Edge Function using cURL
DESCRIPTION: Example of invoking a deployed Edge Function using cURL with the project's ANON_KEY.

LANGUAGE: bash
CODE:
curl --request POST 'https://<project_id>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Functions" }'

----------------------------------------

TITLE: Deploying Edge Functions with GitHub Actions
DESCRIPTION: GitHub Action workflow that automatically deploys Edge Functions when code is merged into the main branch. Uses the official setup-cli action and requires a Supabase access token and project ID.

LANGUAGE: yaml
CODE:
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: your-project-id

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID

----------------------------------------

TITLE: Creating Database Trigger for Chess Moves in SQL
DESCRIPTION: Sets up a trigger to execute the broadcast_moves function after INSERT operations on the moves table.

LANGUAGE: sql
CODE:
CREATE TRIGGER chess_move_changes
AFTER INSERT ON public.moves
FOR EACH ROW
EXECUTE FUNCTION public.broadcast_moves();

----------------------------------------

TITLE: Passing Session Cookies in Fetch Request - TypeScript
DESCRIPTION: Demonstrates how to forward session cookies from the original request headers to a new fetch request. This is essential for maintaining authentication state across API calls.

LANGUAGE: typescript
CODE:
const res = await fetch('http://localhost:3000/contact', {
  headers: {
    cookie: headers().get('cookie') as string,
  },
})

----------------------------------------

TITLE: Basic Table Creation with JSON Column
DESCRIPTION: SQL code showing how to create a table with a JSON column without validation constraints

LANGUAGE: sql
CODE:
create table some_table (
  id serial primary key,
  metadata json not null
);

insert into some_table (metadata)
values (<SQL Input>);

----------------------------------------

TITLE: Enabling plpgsql_check Extension in SQL
DESCRIPTION: SQL commands to enable or disable the plpgsql_check extension in a Postgres database.

LANGUAGE: sql
CODE:
-- Enable the "plpgsql_check" extension
create extension plpgsql_check;

-- Disable the "plpgsql_check" extension
drop extension if exists plpgsql_check;

----------------------------------------

TITLE: Signing In a User with Supabase Authentication
DESCRIPTION: This snippet demonstrates how to sign in a user using Supabase authentication with email and password. It's used to illustrate how a user action contributes to the MAU count.

LANGUAGE: javascript
CODE:
const {data, error} = await supabase.auth.signInWithPassword({
  email: 'user-1@email.com',
  password: 'example-password-1',
})

----------------------------------------

TITLE: Creating a Sample SQL Table
DESCRIPTION: Creates a sample 'movies' table in the public schema with id, name, and data columns.

LANGUAGE: sql
CODE:
create table public.movies (
  id bigint generated always as identity primary key,
  name text not null,
  data jsonb null
);

----------------------------------------

TITLE: Decompressing and Processing Gzip Requests in Supabase Edge Functions (TypeScript)
DESCRIPTION: This code snippet demonstrates how to handle Gzip compressed requests in a Supabase Edge Function. It checks for Gzip encoding, decompresses the body using gunzipSync, and processes the decompressed data. The function includes error handling and returns appropriate responses based on the request processing outcome.

LANGUAGE: typescript
CODE:
import { gunzipSync } from 'node:zlib'

Deno.serve(async (req) => {
  try {
    // Check if the request body is gzip compressed
    const contentEncoding = req.headers.get('content-encoding')
    if (contentEncoding !== 'gzip') {
      return new Response('Request body is not gzip compressed', {
        status: 400,
      })
    }

    // Read the compressed body
    const compressedBody = await req.arrayBuffer()

    // Decompress the body
    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))

    // Convert the decompressed body to a string
    const decompressedString = new TextDecoder().decode(decompressedBody)
    const data = JSON.parse(decompressedString)

    // Process the decompressed body as needed
    console.log(`Received: ${JSON.stringify(data)}`)

    return new Response('ok', {
      headers: { 'Content-Type': 'text/plain' },
    })
  } catch (error) {
    console.error('Error:', error)
    return new Response('Error processing request', { status: 500 })
  }
})

----------------------------------------

TITLE: Initializing Supabase Client with Custom Storage in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Supabase client with a custom storage object for handling authentication tokens. It's useful for server-side applications that need to store tokens in cookies or other storage mechanisms.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage: customStorageObject,
  },
})

----------------------------------------

TITLE: Implementing Pre-request Protection for explain() in Production
DESCRIPTION: SQL function to restrict access to the explain() feature based on IP address. This allows safe use of explain() in production environments by filtering requests.

LANGUAGE: sql
CODE:
create or replace function filter_plan_requests()
returns void as $$
declare
  headers   json := current_setting('request.headers', true)::json;
  client_ip text := coalesce(headers->>'cf-connecting-ip', '');
  accept    text := coalesce(headers->>'accept', '');
  your_ip   text := '123.123.123.123'; -- replace this with your IP
begin
  if accept like 'application/vnd.pgrst.plan%' and client_ip != your_ip then
    raise insufficient_privilege using
      message = 'Not allowed to use application/vnd.pgrst.plan';
  end if;
end; $$ language plpgsql;
alter role authenticator set pgrst.db_pre_request to 'filter_plan_requests';
notify pgrst, 'reload config';

----------------------------------------

TITLE: Installing Supabase JS via Package Managers
DESCRIPTION: Install the Supabase JavaScript client library using various package managers (npm, yarn, pnpm).

LANGUAGE: sh
CODE:
npm install @supabase/supabase-js

LANGUAGE: sh
CODE:
yarn add @supabase/supabase-js

LANGUAGE: sh
CODE:
pnpm add @supabase/supabase-js

----------------------------------------

TITLE: Creating User Mapping for Foreign Server
DESCRIPTION: SQL command to create user credentials mapping for accessing the remote server.

LANGUAGE: sql
CODE:
create user mapping for "<dbname>"
server "<foreign_server_name>"
options (
    user '<db_user>',
    password '<password>'
);

----------------------------------------

TITLE: Setting Up Foreign Data Wrapper in SQL
DESCRIPTION: This SQL code sets up a Foreign Data Wrapper to connect to a remote Supabase database. It creates a server connection and user mapping for accessing the external database.

LANGUAGE: sql
CODE:
create extension postgres_fdw;

create server docs_server
foreign data wrapper postgres_fdw
options (host 'db.xxx.supabase.co', port '5432', dbname 'postgres');

create user mapping for docs_user
server docs_server
options (user 'postgres', password 'password');

----------------------------------------

TITLE: Resetting Role-Level Setting to Default
DESCRIPTION: SQL command to reset a role-level configuration setting to its default value.

LANGUAGE: sql
CODE:
alter role "<role_name>" set "<setting_name>" to default;

----------------------------------------

TITLE: Testing RLS Policies with pgTAP
DESCRIPTION: Tests for verifying Row Level Security (RLS) policies on tables. Ensures specific policies exist and are correctly named.

LANGUAGE: sql
CODE:
begin;
select plan( 1 );

select policies_are(
  'public',
  'profiles',
  ARRAY [
    'Profiles are public', -- Test that there is a policy called  "Profiles are public" on the "profiles" table.
    'Profiles can only be updated by the owner'  -- Test that there is a policy called  "Profiles can only be updated by the owner" on the "profiles" table.
  ]
);

select * from finish();
rollback;

----------------------------------------

TITLE: Initializing Kysely Query Builder with Vercel Postgres
DESCRIPTION: Sets up a Kysely query builder configuration for a Users table and initializes a connection to Vercel Postgres. It defines table types and creates a database connection instance.

LANGUAGE: typescript
CODE:
import { Generated, ColumnType } from 'kysely'
import { createKysely } from '@vercel/postgres-kysely'

interface UserTable {
  id: Generated<number>
  name: string
  email: string
  image: string
  createdAt: ColumnType<Date, string | undefined, never>
}

export interface Database {
  users: UserTable
}

export const db = createKysely<Database>()
export { sql } from 'kysely'

----------------------------------------

TITLE: Configuring Environment Variables for Supabase
DESCRIPTION: Set up environment variables for Supabase URL and API key in the Angular environment file.

LANGUAGE: typescript
CODE:
export const environment = {
  production: false,
  supabaseUrl: 'YOUR_SUPABASE_URL',
  supabaseKey: 'YOUR_SUPABASE_KEY',
}

----------------------------------------

TITLE: Querying Supabase Data in Nuxt Application
DESCRIPTION: This Vue component creates a Supabase client, fetches instrument data from Supabase, and displays it in a list. It demonstrates how to integrate Supabase querying into a Nuxt application.

LANGUAGE: vue
CODE:
<script setup>
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
const instruments = ref([])

async function getInstruments() {
  const { data } = await supabase.from('instruments').select()
  instruments.value = data
}

onMounted(() => {
  getInstruments()
})
</script>

<template>
  <ul>
    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.name }}</li>
  </ul>
</template>

----------------------------------------

TITLE: Enabling/Disabling pgRouting Extension in Postgres
DESCRIPTION: SQL commands to enable or disable the pgRouting extension in a Postgres database. The extension adds geospatial routing capabilities to PostGIS.

LANGUAGE: sql
CODE:
-- Enable the "pgRouting" extension
create extension pgrouting cascade;

-- Disable the "pgRouting" extension
drop extension if exists pgRouting;

----------------------------------------

TITLE: Downloading a File using JavaScript
DESCRIPTION: This JavaScript code shows how to download a file from the 'avatars' bucket using the Supabase client library.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage.from('avatars').download('public/avatar1.png')

----------------------------------------

TITLE: Updating User's Phone Number in Python
DESCRIPTION: Use the supabase.auth.update_user method to update a logged-in user's phone number in Python. The user will receive an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: python
CODE:
response = supabase.auth.update_user({
  'phone': '123456789',
})

----------------------------------------

TITLE: Monitoring Active pg_cron Jobs in PostgreSQL
DESCRIPTION: Query to check currently running pg_cron jobs and their status.

LANGUAGE: sql
CODE:
SELECT
  pid as process_id,
  usename as database_user,
  application_name,
  backend_start as when_process_began,
  wait_event_type,
  state,
  query,
  backend_type
FROM pg_stat_activity where application_name ilike 'pg_cron';

----------------------------------------

TITLE: New Authentication in Supabase.js v1.0
DESCRIPTION: Updated authentication implementation using the new gotrue-js library with object parameters

LANGUAGE: javascript
CODE:
const { user, error } = await supabase.auth.signUp({
  email: 'someone@email.com',
  password: 'password',
})

----------------------------------------

TITLE: Updating Network Restrictions via Supabase CLI
DESCRIPTION: Use the 'update' subcommand of the Supabase CLI to apply new network restrictions to a project. This command allows specifying multiple CIDRs for both IPv4 and IPv6 addresses.

LANGUAGE: bash
CODE:
supabase network-restrictions --project-ref {ref} update --db-allow-cidr 183.12.1.1/24 --db-allow-cidr 2001:db8:3333:4444:5555:6666:7777:8888/64 --experimental

----------------------------------------

TITLE: Inserting Data with Enum Values in PostgreSQL
DESCRIPTION: This snippet illustrates how to insert data into a table with an Enum column by specifying one of the defined Enum values.

LANGUAGE: sql
CODE:
insert into person
  (name, current_mood)
values
  ('Alice', 'happy');

----------------------------------------

TITLE: Minimal JWT Custom Access Token Hook in SQL
DESCRIPTION: This SQL function creates a custom access token hook that reduces the size of the JWT by including only specified claims. It's useful for situations where JWT size needs to be minimized, such as in Server-Side Rendering frameworks.

LANGUAGE: sql
CODE:
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    original_claims jsonb;
    new_claims jsonb;
    claim text;
  begin
    original_claims = event->'claims';
    new_claims = '{}'::jsonb;

    foreach claim in array array[
      -- add claims you want to keep here
      'iss',
      'aud',
      'exp',
      'iat',
      'sub',
      'role',
      'aal',
      'session_id'
   ] loop
      if original_claims ? claim then
        -- original_claims contains one of the listed claims, set it on new_claims
        new_claims = jsonb_set(new_claims, array[claim], original_claims->claim);
      end if;
    end loop;

    return jsonb_build_object('claims', new_claims);
  end
$$;

----------------------------------------

TITLE: Checking Replication Status in Supabase Database
DESCRIPTION: Queries the pg_stat_replication view to check the status of the replication process. This helps in monitoring the replication setup.

LANGUAGE: sql
CODE:
select * from pg_stat_replication;

----------------------------------------

TITLE: Listing Supabase CLI Inspection Commands
DESCRIPTION: Shows how to use the Supabase CLI to list available database inspection commands.

LANGUAGE: shell
CODE:
$ supabase inspect db help

----------------------------------------

TITLE: Deploying Secrets to Supabase Production Environment
DESCRIPTION: These bash commands show how to deploy secrets to the Supabase production environment using the CLI, either from a file or individually.

LANGUAGE: bash
CODE:
supabase secrets set --env-file ./supabase/.env

# You can also set secrets individually using:
supabase secrets set MY_NAME=Chewbacca

----------------------------------------

TITLE: Implementing Row Level Security Policy in PostgreSQL
DESCRIPTION: Creates an RLS policy to restrict updates to posts to only the user who created them. This policy applies to all columns in the row.

LANGUAGE: sql
CODE:
create policy "Allow update for owners" on posts for
update
  using ((select auth.uid()) = user_id);

----------------------------------------

TITLE: Cleaning Up Anonymous Users in Supabase
DESCRIPTION: SQL query to delete anonymous users created more than 30 days ago from the auth.users table.

LANGUAGE: sql
CODE:
-- deletes anonymous users created more than 30 days ago
delete from auth.users
where is_anonymous is true and created_at < now() - interval '30 days';

----------------------------------------

TITLE: Configuring AWS Credentials File for Supabase Storage
DESCRIPTION: Sets up AWS credentials file with Supabase Storage configuration including access keys, endpoint URL, and region. This configuration can be used by any AWS SDK-compatible tool.

LANGUAGE: bash
CODE:
# ~/.aws/credentials

[supabase]
aws_access_key_id = your_access_key_id
aws_secret_access_key = your_secret_access_key
endpoint_url = https://project_ref.supabase.co/storage/v1/s3
region = project_region

----------------------------------------

TITLE: Configuring App Component with Routing and Session Management
DESCRIPTION: Updates the main App component to handle routing and session management using Supabase authentication.

LANGUAGE: jsx
CODE:
import { Redirect, Route } from 'react-router-dom'
import { IonApp, IonRouterOutlet, setupIonicReact } from '@ionic/react'
import { IonReactRouter } from '@ionic/react-router'
import { supabase } from './supabaseClient'

import '@ionic/react/css/ionic.bundle.css'

/* Theme variables */
import './theme/variables.css'
import { LoginPage } from './pages/Login'
import { AccountPage } from './pages/Account'
import { useEffect, useState } from 'react'
import { Session } from '@supabase/supabase-js'

setupIonicReact()

const App: React.FC = () => {
  const [session, setSession] = useState < Session > null
  useEffect(() => {
    setSession(supabase.auth.session())
    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])
  return (
    <IonApp>
      <IonReactRouter>
        <IonRouterOutlet>
          <Route
            exact
            path="/"
            render={() => {
              return session ? <Redirect to="/account" /> : <LoginPage />
            }}
          />
          <Route exact path="/account">
            <AccountPage />
          </Route>
        </IonRouterOutlet>
      </IonReactRouter>
    </IonApp>
  )
}

export default App

----------------------------------------

TITLE: Querying Users in Supabase Auth
DESCRIPTION: SQL query to select all users from the auth.users table in Supabase.

LANGUAGE: sql
CODE:
select * from auth.users;

----------------------------------------

TITLE: Implementing Password Reset in Flutter
DESCRIPTION: Implementation of password reset form using current session's access token.

LANGUAGE: dart
CODE:
SupaResetPassword(
  accessToken: supabase.auth.currentSession?.accessToken,
  onSuccess: (UserResponse response) {},
  onError: (error) {},
)

----------------------------------------

TITLE: Example Usage of FormField Component in React
DESCRIPTION: Shows how to use the FormField component with React Hook Form, including label, input, description, and error message.

LANGUAGE: tsx
CODE:
const form = useForm()

<FormField
  control={form.control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder="shadcn" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>

----------------------------------------

TITLE: Conditional Email Template Rendering Using Go Templates in HTML
DESCRIPTION: This example demonstrates how to use Go Templates to conditionally render different email content based on the user's domain. It showcases separate messages for regular users and early access users.

LANGUAGE: html
CODE:
{{ if eq .Data.Domain "https://www.example.com" }}
<h1>Welcome to Our Database Service!</h1>
  <p>Dear Developer,</p>
  <p>Welcome to Billy, the scalable developer platform!</p>
  <p>Best Regards,<br>
Billy Team</p>
{{ else if eq .Data.Domain "https://www.earlyaccess.trial.com" }}
<h1>Welcome to Our Database Service!</h1>
  <p>Dear Developer,</p>
  <p>Welcome Billy, the scalable developer platform!</p>
  <p> As an early access member, you have access to select features like Point To Space Restoration.</p>
  <p>Best Regards,<br>
Billy Team</p>
{{ end }}

----------------------------------------

TITLE: Using Custom Role Token with Supabase Storage API in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to use the generated JWT token with the custom 'manager' role to access the Supabase Storage API. It initializes a StorageClient with the project URL and the token, then lists the contents of the 'teams' bucket.

LANGUAGE: javascript
CODE:
const { StorageClient } = require('@supabase/storage-js')

const PROJECT_URL = 'https://your-project-id.supabase.co/storage/v1'

const storage = new StorageClient(PROJECT_URL, {
  authorization: `Bearer ${token}`,
})

await storage.from('teams').list()

----------------------------------------

TITLE: Defining Chart Configuration for Theming in React
DESCRIPTION: This snippet shows how to define a chart configuration object that includes labels, icons, and color themes for different chart elements. This configuration can be used to consistently style chart components.

LANGUAGE: tsx
CODE:
import { Monitor } from 'lucide-react'

import { type ChartConfig } from '@/components/ui/chart'

const chartConfig = {
  desktop: {
    label: 'Desktop',
    icon: Monitor,
    color: '#2563eb',
    theme: {
      light: '#2563eb',
      dark: '#dc2626',
    },
  },
} satisfies ChartConfig

----------------------------------------

TITLE: New Data Query in Supabase.js v1.0
DESCRIPTION: Updated data querying implementation using data property and simplified select syntax

LANGUAGE: javascript
CODE:
const { data } = supabase.from('todos').select()

----------------------------------------

TITLE: Inserting Sample Data for Full Text Search
DESCRIPTION: SQL commands to insert sample text data for testing full text search functionality.

LANGUAGE: sql
CODE:
insert into memos(content)
values
  ('PostgreSQL is a relational database management system.'),
  ('Groonga is a fast full text search engine that supports all languages.'),
  ('PGroonga is a PostgreSQL extension that uses Groonga as index.'),
  ('There is groonga command.');

----------------------------------------

TITLE: Execute pgloader Migration Command
DESCRIPTION: Command line instruction to run the pgloader migration using a configuration file.

LANGUAGE: bash
CODE:
pgloader config.load

----------------------------------------

TITLE: Configuring Optional Claims in Azure OAuth App
DESCRIPTION: JSON configuration for adding xms_edov and email claims to Azure OAuth application manifest to verify email domains.

LANGUAGE: json
CODE:
{
    "optionalClaims": {
        "idToken": [
            {
                "name": "xms_edov",
                "source": null,
                "essential": false,
                "additionalProperties": []
            },
            {
                "name": "email",
                "source": null,
                "essential": false,
                "additionalProperties": []
            }
        ],
        "accessToken": [
            {
                "name": "xms_edov",
                "source": null,
                "essential": false,
                "additionalProperties": []
            }
        ],
        "saml2Token": []
    }
}

----------------------------------------

TITLE: Defining Password Verification Hook Input Schema
DESCRIPTION: JSON schema defining the input structure for password verification hooks, including user_id and verification status.

LANGUAGE: json
CODE:
{
  "type": "object",
  "properties": {
    "user_id": {
      "type": "string",
      "x-faker": "random.uuid"
    },
    "valid": {
      "type": "boolean",
      "x-faker": "random.boolean"
    }
  },
  "required": ["user_id", "valid"]
}

----------------------------------------

TITLE: Implementing Salary Log Trigger System
DESCRIPTION: Example of creating a trigger function and trigger to log salary changes in an employees table. The function captures old and new salary values when updates occur.

LANGUAGE: sql
CODE:
create function update_salary_log()
returns trigger
language plpgsql
as $$
begin
  insert into salary_log(employee_id, old_salary, new_salary)
  values (new.id, old.salary, new.salary);
  return new;
end;
$$;

create trigger salary_update_trigger
after update on employees
for each row
execute function update_salary_log();

----------------------------------------

TITLE: Linking Supabase CLI to Project
DESCRIPTION: Shows how to link the Supabase CLI with a specific Supabase project for easier access.

LANGUAGE: shell
CODE:
supabase link --project-ref <project-id>

----------------------------------------

TITLE: Reindexing a Single Index Concurrently in PostgreSQL
DESCRIPTION: This SQL command rebuilds a specific index concurrently, allowing reads and writes on the table during the process.

LANGUAGE: sql
CODE:
reindex index concurrently idx_persons_age;

----------------------------------------

TITLE: Using explain() Method in Supabase Query with TypeScript
DESCRIPTION: Demonstrates how to chain the explain() method to a Supabase query to get the execution plan. This helps in understanding how Postgres will execute the query.

LANGUAGE: typescript
CODE:
const { data, error } = await supabase
  .from('instruments')
  .select()
  .explain()

----------------------------------------

TITLE: Synchronizing Prisma with Existing Supabase Database
DESCRIPTION: Bash commands to synchronize Prisma with an existing Supabase database, including pulling the database schema, creating a migration file, and resolving migrations.

LANGUAGE: bash
CODE:
npx prisma db pull

LANGUAGE: bash
CODE:
mkdir -p prisma/migrations/0_init_supabase

LANGUAGE: bash
CODE:
npx prisma migrate diff \
--from-empty \
--to-schema-datamodel prisma/schema.prisma \
--script > prisma/migrations/0_init_supabase/migration.sql

LANGUAGE: bash
CODE:
npx prisma migrate resolve --applied 0_init_supabase

----------------------------------------

TITLE: Creating a new Rails project with PostgreSQL
DESCRIPTION: Uses the Rails CLI to scaffold a new project configured for PostgreSQL.

LANGUAGE: bash
CODE:
rails new blog -d=postgresql

----------------------------------------

TITLE: Querying Total Database Size in Postgres
DESCRIPTION: This SQL query calculates and displays the total size of all databases in the Postgres cluster using the pg_size_pretty function.

LANGUAGE: sql
CODE:
select
  pg_size_pretty(sum(pg_database_size(pg_database.datname)))
from pg_database;

----------------------------------------

TITLE: Creating an Ordered Index in PostgreSQL
DESCRIPTION: This SQL command creates a descending index on the 'age' column, placing NULL values last, useful for queries requiring reverse age ordering.

LANGUAGE: sql
CODE:
create index idx_persons_age_desc on persons (age desc nulls last);

----------------------------------------

TITLE: Displaying Current Statement Timeout in PostgreSQL
DESCRIPTION: Shows the current statement timeout setting for the session. This can be used to verify if the timeout has been successfully changed.

LANGUAGE: sql
CODE:
SHOW statement_timeout;

----------------------------------------

TITLE: Creating Test Directory for Supabase CLI Testing
DESCRIPTION: Creates a directory structure for storing database tests in a Supabase project.

LANGUAGE: bash
CODE:
mkdir -p ./supabase/tests/database

----------------------------------------

TITLE: Implementing Login Page with Magic Link
DESCRIPTION: Svelte component for a login page that uses Supabase's magic link authentication.

LANGUAGE: svelte
CODE:
<script lang="ts">
	import { enhance } from '$app/forms'
	import type { ActionData, SubmitFunction } from './$types.js'

	export let form: ActionData;

	let loading = false

	const handleSubmit: SubmitFunction = () => {
		loading = true
		return async ({ update }) => {
			update()
			loading = false
		}
	}
</script>

<svelte:head>
	<title>User Management</title>
</svelte:head>

<form class="row flex flex-center" method="POST" use:enhance={handleSubmit}>
	<div class="col-6 form-widget">
		<h1 class="header">Supabase + SvelteKit</h1>
		<p class="description">Sign in via magic link with your email below</p>
		{#if form?.message !== undefined}
		<div class="success {form?.success ? '' : 'fail'}">
			{form?.message}
		</div>
		{/if}
		<div>
			<label for="email">Email address</label>
			<input
				id="email"
				name="email"
				class="inputField"
				type="email"
				placeholder="Your email"
				value={form?.email ?? ''}
			/>
		</div>
		{#if form?.errors?.email}
		<span class="flex items-center text-sm error">
			{form?.errors?.email}
		</span>
		{/if}
		<div>
			<button class="button primary block">
				{ loading ? 'Loading' : 'Send magic link' }
			</button>
		</div>
	</div>
</form>

----------------------------------------

TITLE: Creating Table with Enum Column in PostgreSQL
DESCRIPTION: This example shows how to create a table 'person' with an Enum column 'current_mood' using the previously defined 'mood' Enum type.

LANGUAGE: sql
CODE:
create table person (
  id serial primary key,
  name text,
  current_mood mood
);

----------------------------------------

TITLE: Enqueueing and Dequeueing Messages with Supabase Queues in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a Supabase client, send messages to a queue, and pop messages from a queue using TypeScript and React. It includes functions for adding and retrieving messages, along with a simple UI for interacting with the queue.

LANGUAGE: tsx
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'supabaseURL'
const supabaseKey = 'supabaseKey'

const supabase = createClient(supabaseUrl, supabaseKey)

const QueuesTest: React.FC = () => {
  //Add a Message
  const sendToQueue = async () => {
    const result = await supabase.schema('pgmq_public').rpc('send', {
      queue_name: 'foo',
      message: { hello: 'world' },
      sleep_seconds: 30,
    })
    console.log(result)
  }

  //Dequeue Message
  const popFromQueue = async () => {
    const result = await supabase.schema('pgmq_public').rpc('pop', { queue_name: 'foo' })
    console.log(result)
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Queue Test Component</h2>
      <button
        onClick={sendToQueue}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-4"
      >
        Add Message
      </button>
      <button
        onClick={popFromQueue}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
      >
        Pop Message
      </button>
    </div>
  )
}

export default QueuesTest

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: JavaScript module to create and export the Supabase client instance using environment variables.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

----------------------------------------

TITLE: Selecting a UUID Using uuid_generate_v4() in PostgreSQL
DESCRIPTION: SQL query to generate a UUID using the uuid_generate_v4() function provided by the uuid-ossp extension.

LANGUAGE: sql
CODE:
select uuid_generate_v4();

----------------------------------------

TITLE: Using Skeleton Component
DESCRIPTION: Example of implementing a Skeleton component with custom styling for width, height, and border radius

LANGUAGE: tsx
CODE:
<Skeleton className="w-[100px] h-[20px] rounded-full" />

----------------------------------------

TITLE: Enabling and Disabling UUID-OSSP Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the uuid-ossp extension in PostgreSQL. The extension is created within a separate schema to keep the public schema clean.

LANGUAGE: sql
CODE:
-- Example: enable the "uuid-ossp" extension
create extension "uuid-ossp" with schema extensions;

-- Example: disable the "uuid-ossp" extension
drop extension if exists "uuid-ossp";

----------------------------------------

TITLE: Handling Realtime Presence State Updates in TypeScript
DESCRIPTION: This snippet demonstrates the structure of presence state messages, which provide information about the online status of clients in real-time.

LANGUAGE: typescript
CODE:
{
   "event": "presence_state",
   "topic": string,
   "payload": {
      [key: string]: {metas: Array<{phx_ref: string, name: string, t: float}>}
   },
   "ref": null
}

----------------------------------------

TITLE: Basic GraphQL Query Structure
DESCRIPTION: Example of a simple GraphQL query to fetch book collection data showing the basic query structure.

LANGUAGE: graphql
CODE:
query {
  bookCollection {
    edges {
      node {
        id
      }
    }
  }
}

----------------------------------------

TITLE: Installing Collapsible Component Dependencies Manually
DESCRIPTION: Command to install the required dependency for the Collapsible component manually using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-collapsible

----------------------------------------

TITLE: Accessing Environment Variables in Supabase Edge Functions
DESCRIPTION: This snippet demonstrates how to access environment variables in a Supabase Edge Function using Deno's built-in handler.

LANGUAGE: javascript
CODE:
Deno.env.get('MY_SECRET_NAME')

----------------------------------------

TITLE: Checking Index Usage in PostgreSQL
DESCRIPTION: SQL query to determine how often an index is used when accessing a table in PostgreSQL. This helps identify tables that might benefit from additional indexing.

LANGUAGE: sql
CODE:
select
  relname,
  100 * idx_scan / (seq_scan + idx_scan) as percent_of_times_index_used,
  n_live_tup as rows_in_table
from pg_stat_user_tables
where seq_scan + idx_scan > 0
order by n_live_tup desc;

----------------------------------------

TITLE: Setting Up Full Text Search in Postgres
DESCRIPTION: SQL snippets to add a generated column for full text search and create a GIN index for faster searches.

LANGUAGE: sql
CODE:
alter table movies
	add column fts_doc_en
	generated always as to_tsvector (
		'english', title || ' ' || original_title || ' ' || overview
	)
	stored;

create index movies_fts_doc_en_idx
	on movies
	using gin (fts_doc_en);

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for CI
DESCRIPTION: YAML configuration for a GitHub Actions workflow to run CI tests on pull requests and manual triggers.

LANGUAGE: yaml
CODE:
name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase db start

      - name: Verify generated types are checked in
        run: |
          supabase gen types typescript --local > types.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

----------------------------------------

TITLE: Basic Index Advisor Query Example - SQL
DESCRIPTION: Demonstrates basic usage of index_advisor function to analyze a simple query and get index recommendations for optimizing performance.

LANGUAGE: sql
CODE:
select
    *
from
  index_advisor('select book.id from book where title = $1');

 startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                   | errors
---------------------+--------------------+-------------------+------------------+-----------------------------------------------------+--------
 0.00                | 1.17               | 25.88             | 6.40             | {"CREATE INDEX ON public.book USING btree (title)"} | {}
(1 row)

----------------------------------------

TITLE: Running and Deploying Supabase Function
DESCRIPTION: Commands to run the function locally and deploy it to Supabase. This includes starting the Supabase environment, serving the function locally, and deploying it without JWT verification.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --no-verify-jwt

LANGUAGE: bash
CODE:
supabase functions deploy sentryfied --no-verify-jwt

----------------------------------------

TITLE: Configuring Table Security Policies
DESCRIPTION: Enables Row Level Security and creates a policy allowing public read access to the todos table.

LANGUAGE: sql
CODE:
alter table "todos"
enable row level security;

create policy "Allow public access"
  on todos
  for select
  to anon
  using (true);

----------------------------------------

TITLE: Creating Test Environment with Supabase CLI
DESCRIPTION: Bash command to create a new test file for RLS policies using the Supabase CLI.

LANGUAGE: bash
CODE:
# Create a new test for our policies using supabase cli
supabase test new todos_rls.test

----------------------------------------

TITLE: Creating a Queue with PGMQ in SQL
DESCRIPTION: Creates a new message queue using the pgmq.create function.

LANGUAGE: sql
CODE:
select from pgmq.create('my_queue');

----------------------------------------

TITLE: Querying Array Data in PostgreSQL
DESCRIPTION: SQL query to select the first array element and array length using PostgreSQL array functions.

LANGUAGE: sql
CODE:
SELECT textarray[1], array_length(textarray, 1) FROM arraytest;

----------------------------------------

TITLE: Installing Tooltip Component via CLI
DESCRIPTION: Command to install the Tooltip component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add tooltip

----------------------------------------

TITLE: Configuring Supabase Client
DESCRIPTION: Initialize the Supabase client with project URL and anonymous key for API access

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

----------------------------------------

TITLE: Creating RUM Index with Attached Column
DESCRIPTION: Example of creating a RUM index with an attached timestamp column for combined text and temporal queries.

LANGUAGE: sql
CODE:
CREATE TABLE tsts (id int, t tsvector, d timestamp);
CREATE INDEX tsts_idx ON tsts USING rum (t rum_tsvector_addon_ops, d)
    WITH (attach = 'd', to = 't');

----------------------------------------

TITLE: Registering Discord Slash Command using cURL
DESCRIPTION: This snippet demonstrates how to register a slash command for a Discord bot using a cURL request. It sets up a 'hello' command that accepts a 'name' parameter.

LANGUAGE: bash
CODE:
BOT_TOKEN='replace_me_with_bot_token'
CLIENT_ID='replace_me_with_client_id'
curl -X POST \
-H 'Content-Type: application/json' \
-H "Authorization: Bot $BOT_TOKEN" \
-d '{"name":"hello","description":"Greet a person","options":[{"name":"name","description":"The name of the person","type":3,"required":true}]}' \
"https://discord.com/api/v8/applications/$CLIENT_ID/commands"

----------------------------------------

TITLE: Signing in a user with SSO in Supabase (JavaScript)
DESCRIPTION: This code snippet demonstrates how to sign in a user using Single Sign-On (SSO) with Supabase. It uses the signInWithSSO method and redirects the user to the identity provider's authentication flow.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signInWithSSO({
  domain: 'company.com'
})

if (data?.url) {
  // redirect User-1 to the identity provider's authentication flow
  window.location.href = data.url
}

----------------------------------------

TITLE: Configuring SQLAlchemy Connection Pool Size
DESCRIPTION: Example of configuring SQLAlchemy engine with specific pool size and overflow settings.

LANGUAGE: python
CODE:
# Example configurations
engine = create_engine(
    "postgresql+psycopg2://me@localhost/mydb", pool_size=20, max_overflow=15
)

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: SQL command to create a 'books' table with a JSONB column named 'metadata' along with other text columns.

LANGUAGE: sql
CODE:
create table books (
  id serial primary key,
  title text,
  author text,
  metadata jsonb
);

----------------------------------------

TITLE: Executing GraphQL Query using pg_graphql in PostgreSQL
DESCRIPTION: SQL command to execute a GraphQL query using the graphql.resolve function. This query retrieves the id and name of the first blog entry from the 'Blog' table.

LANGUAGE: sql
CODE:
select
  graphql.resolve($$
    {
      blogCollection(first: 1) {
        edges {
          node {
            id,
            name
          }
        }
      }
    }
  $$);

----------------------------------------

TITLE: Adding Department Column SQL Migration
DESCRIPTION: SQL code to add the department column to the employees table with a default value.

LANGUAGE: sql
CODE:
alter table if exists public.employees
add department text default 'Hooli';

----------------------------------------

TITLE: Configuring Supabase Database Connection for LlamaIndex
DESCRIPTION: Sets up the database connection string and creates a vector store client using vecs. Requires a valid PostgreSQL connection string from Supabase dashboard.

LANGUAGE: python
CODE:
DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

----------------------------------------

TITLE: Invoking Edge Functions with Regional Control using cURL and JavaScript
DESCRIPTION: Examples showing how to invoke Supabase Edge Functions with regional control using both cURL commands and the JavaScript client library. Demonstrates usage of the x-region header to specify function execution location.

LANGUAGE: bash
CODE:
curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --header 'x-region: eu-west-3' \
  --data '{ "name":"Functions" }'

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
  headers: { 'x-region': 'eu-west-3' },
})

----------------------------------------

TITLE: Basic Auth UI Component Implementation
DESCRIPTION: Example of importing and using the Auth component with a Supabase client in a React application.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => <Auth supabaseClient={supabase} />

----------------------------------------

TITLE: Querying Todos using Supabase JavaScript Client
DESCRIPTION: JavaScript code demonstrating how to initialize the Supabase client and fetch all records from the todos table.

LANGUAGE: javascript
CODE:
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Make a request
const { data: todos, error } = await supabase.from('todos').select('*')

----------------------------------------

TITLE: Generating and running database migrations in Rails
DESCRIPTION: Creates an Article model with title and body fields, then runs the migration to update the database schema.

LANGUAGE: bash
CODE:
bin/rails generate model Article title:string body:text
bin/rails db:migrate

----------------------------------------

TITLE: Querying Predictions from Supabase
DESCRIPTION: Python code to query saved predictions from a Supabase table based on the filename.

LANGUAGE: python
CODE:
result = supabase.table('predictions') \
    .select("predictions") \
    .filter("filename", "eq", image) \
    .execute()

print(result)

----------------------------------------

TITLE: Querying Large Files in Supabase Storage
DESCRIPTION: This SQL query lists files larger than 5 MB in Supabase Storage, including their name, bucket, and size in appropriate units (GB, MB, KB, or bytes).

LANGUAGE: sql
CODE:
select
    name,
    bucket_id as bucket,
    case
        when (metadata->>'size')::int >= 1073741824 then
            ((metadata->>'size')::int / 1073741824.0)::numeric(10, 2) || ' GB'
        when (metadata->>'size')::int >= 1048576 then
            ((metadata->>'size')::int / 1048576.0)::numeric(10, 2) || ' MB'
        when (metadata->>'size')::int >= 1024 then
            ((metadata->>'size')::int / 1024.0)::numeric(10, 2) || ' KB'
        else
            (metadata->>'size')::int || ' bytes'
        end as size
from
    storage.objects
where
    (metadata->>'size')::int > 1048576 * 5
order by (metadata->>'size')::int desc

----------------------------------------

TITLE: Signing Out Users in Kotlin with Supabase Auth
DESCRIPTION: This snippet shows how to sign out a user using the Supabase Kotlin client library. It defines a suspend function that calls the signOut method from the auth module.

LANGUAGE: kotlin
CODE:
suspend fun logout() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Processing Realtime Presence Diff Updates in TypeScript
DESCRIPTION: This snippet shows the structure of presence diff messages, which update clients on changes to the presence state, including joins and leaves.

LANGUAGE: typescript
CODE:
{
   "event": "presence_diff",
   "topic": string,
   "payload": {
      "joins": {metas: Array<{phx_ref: string, name: string, t: float}>},
      "leaves": {metas: Array<{phx_ref: string, name: string, t: float}>}
   },
   "ref": null
}

----------------------------------------

TITLE: Creating a Profile Photo Upload Component in Vue 3
DESCRIPTION: Implement a Vue component for uploading and displaying user profile photos using Supabase Storage.

LANGUAGE: vue
CODE:
<script setup>
const props = defineProps(['path'])
const { path } = toRefs(props)

const emit = defineEmits(['update:path', 'upload'])

const supabase = useSupabaseClient()

const uploading = ref(false)
const src = ref('')
const files = ref()

const downloadImage = async () => {
  try {
    const { data, error } = await supabase.storage.from('avatars').download(path.value)
    if (error) throw error
    src.value = URL.createObjectURL(data)
  } catch (error) {
    console.error('Error downloading image: ', error.message)
  }
}

const uploadAvatar = async (evt) => {
  files.value = evt.target.files
  try {
    uploading.value = true

    if (!files.value || files.value.length === 0) {
      throw new Error('You must select an image to upload.')
    }

    const file = files.value[0]
    const fileExt = file.name.split('.').pop()
    const fileName = `${Math.random()}.${fileExt}`
    const filePath = `${fileName}`

    const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

    if (uploadError) throw uploadError

    emit('update:path', filePath)
    emit('upload')
  } catch (error) {
    alert(error.message)
  } finally {
    uploading.value = false
  }
}

downloadImage()

watch(path, () => {
  if (path.value) {
    downloadImage()
  }
})
</script>

<template>
  <div>
    <img
      v-if="src"
      :src="src"
      alt="Avatar"
      class="avatar image"
      style="width: 10em; height: 10em;"
    />
    <div v-else class="avatar no-image" :style="{ height: size, width: size }" />

    <div style="width: 10em; position: relative;">
      <label class="button primary block" for="single">
        {{ uploading ? 'Uploading ...' : 'Upload' }}
      </label>
      <input
        style="position: absolute; visibility: hidden;"
        type="file"
        id="single"
        accept="image/*"
        @change="uploadAvatar"
        :disabled="uploading"
      />
    </div>
  </div>
</template>

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: This command starts the Supabase Functions service locally without JWT verification, allowing for development and testing of the OG image generation function.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: Creating Foreign Server Connection in PostgreSQL
DESCRIPTION: SQL command to create a foreign server definition specifying the remote database connection details.

LANGUAGE: sql
CODE:
create server "<foreign_server_name>"
foreign data wrapper postgres_fdw
options (
    host '<host>',
    port '<port>',
    dbname '<dbname>'
);

----------------------------------------

TITLE: Signing in with Keycloak OAuth in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Keycloak OAuth sign-in using Supabase's JavaScript client library. It uses the signInWithOAuth method, specifying 'keycloak' as the provider and including the required 'openid' scope.

LANGUAGE: javascript
CODE:
async function signInWithKeycloak() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'keycloak',
    options: {
      scopes: 'openid',
    },
  })
}

----------------------------------------

TITLE: Animating Particles in Figure-8 Pattern
DESCRIPTION: Uses useFrame and trigonometry to animate particles in a figure-8 pattern with randomized aspects.

LANGUAGE: javascript
CODE:
const particle = useRef(null)

const circumference = (config.widthRadius * Math.PI * 2) / 100

useFrame(({ clock }) => {
  const timer = clock.getElapsedTime()
  const isEven = Math.floor(timer / circumference) % 2 == 0

  particle.current.position.x = Math.sin(timer) * widthRadius
  particle.current.position.y = isEven
    ? Math.cos(timer) * heightRadius - heightRadius
    : -Math.cos(timer) * heightRadius + heightRadius
})

----------------------------------------

TITLE: Creating SQL Function to Test Authorization Header in Supabase
DESCRIPTION: This SQL function 'test_authorization_header' returns the JWT payload, which can be used to verify the user session and authentication status during database calls.

LANGUAGE: sql
CODE:
create function test_authorization_header() returns json
    language SQL
    as
$$
    select auth.jwt();
$$;

----------------------------------------

TITLE: Calling Semantic Search from Supabase Client
DESCRIPTION: TypeScript example showing how to call the semantic search function using Supabase client library.

LANGUAGE: typescript
CODE:
const { data: documents } = await supabase.rpc('match_documents', {
  query_embedding: embedding, // pass the query embedding
  match_threshold: 0.78, // choose an appropriate threshold for your data
  match_count: 10, // choose the number of matches
})

----------------------------------------

TITLE: Applying Supabase Migration
DESCRIPTION: Use the Supabase CLI to apply the migration and create the employees table.

LANGUAGE: bash
CODE:
supabase migration up

----------------------------------------

TITLE: Using Custom NPM Registry for Deployment
DESCRIPTION: Shows how to specify a custom NPM registry when deploying a Supabase Edge Function using the CLI.

LANGUAGE: bash
CODE:
NPM_CONFIG_REGISTRY=https://custom-registry/ supabase functions deploy my-function

----------------------------------------

TITLE: Creating User Profile Management Component
DESCRIPTION: Component for managing user profile details including username and website.

LANGUAGE: tsx
CODE:
import { AuthSession } from '@supabase/supabase-js'
import { Component, createEffect, createSignal } from 'solid-js'
import { supabase } from './supabaseClient'

interface Props {
  session: AuthSession
}

const Account: Component<Props> = ({ session }) => {
  const [loading, setLoading] = createSignal(true)
  const [username, setUsername] = createSignal<string | null>(null)
  const [website, setWebsite] = createSignal<string | null>(null)
  const [avatarUrl, setAvatarUrl] = createSignal<string | null>(null)

  // ... rest of the component code

----------------------------------------

TITLE: Implementing Login Page with Magic Link Authentication
DESCRIPTION: Creates a React component for the login page using Ionic UI components and Supabase authentication.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonList,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonToast,
  useIonLoading,
} from '@ionic/react';
import { supabase } from '../supabaseClient';

export function LoginPage() {
  const [email, setEmail] = useState('');

  const [showLoading, hideLoading] = useIonLoading();
  const [showToast ] = useIonToast();
  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    console.log()
    e.preventDefault();
    await showLoading();
    try {
      await supabase.auth.signIn({ email });
      await showToast({ message: 'Check your email for the login link!' });
    } catch (e: any) {
      await showToast({ message: e.error_description || e.message , duration: 5000});
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Login</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <div className="ion-padding">
          <h1>Supabase + Ionic React</h1>
          <p>Sign in via magic link with your email below</p>
        </div>
        <IonList inset={true}>
          <form onSubmit={handleLogin}>
            <IonItem>
              <IonLabel position="stacked">Email</IonLabel>
              <IonInput
                value={email}
                name="email"
                onIonChange={(e) => setEmail(e.detail.value ?? '')}
                type="email"
              ></IonInput>
            </IonItem>
            <div className="ion-text-center">
              <IonButton type="submit" fill="clear">
                Login
              </IonButton>
            </div>
          </form>
        </IonList>
      </IonContent>
    </IonPage>
  );
}

----------------------------------------

TITLE: Installing Drizzle ORM and Dependencies
DESCRIPTION: Install Drizzle ORM and related dependencies using npm.

LANGUAGE: shell
CODE:
npm i drizzle-orm postgres
npm i -D drizzle-kit

----------------------------------------

TITLE: Adding Supabase CA Certificate to Postgres Trusted Certificates
DESCRIPTION: This command adds the downloaded Supabase CA certificate to the list of certificate authorities trusted by Postgres.

LANGUAGE: bash
CODE:
cat {location of downloaded prod-ca-2021.crt} >> ~/.postgres/root.crt

----------------------------------------

TITLE: Calculating CLIP Embeddings with Roboflow Inference
DESCRIPTION: Python script to calculate CLIP embeddings for images in a directory using Roboflow Inference API. Requires setting up the image directory and Roboflow API key.

LANGUAGE: python
CODE:
import cv2
import supervision as sv
import requests
import base64
import os

IMAGE_DIR = "images/train/images/"
API_KEY = ""
SERVER_URL = "http://localhost:9001"

results = []

for i, image in enumerate(os.listdir(IMAGE_DIR)):
    print(f"Processing image {image}")
    infer_clip_payload = {
        "image": {
            "type": "base64",
            "value": base64.b64encode(open(IMAGE_DIR + image, "rb").read()).decode("utf-8"),
        },
    }

    res = requests.post(
        f"{SERVER_URL}/clip/embed_image?api_key={API_KEY}",
        json=infer_clip_payload,
    )

    embeddings = res.json()['embeddings']

    results.append({
        "filename": image,
        "embeddings": embeddings
    })

----------------------------------------

TITLE: Creating a Table with Traditional Date Columns in SQL
DESCRIPTION: This SQL snippet creates a table named 'reservations' with separate columns for start and end times. It demonstrates the traditional approach to storing time-based data.

LANGUAGE: sql
CODE:
create table reservations (
  id serial primary key,
  title text,
  start_at timestamptz,
  end_at timestamptz
);

----------------------------------------

TITLE: Creating an Unlogged Queue with PGMQ in SQL
DESCRIPTION: Creates an unlogged message queue for improved write throughput using pgmq.create_unlogged function.

LANGUAGE: sql
CODE:
select pgmq.create_unlogged('my_unlogged');

----------------------------------------

TITLE: Installing Badge Component via CLI
DESCRIPTION: Command to install the Badge component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add badge

----------------------------------------

TITLE: Installing Popover Component via CLI
DESCRIPTION: This command installs the Popover component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add popover

----------------------------------------

TITLE: Querying Array RUM Index with Distance Operator
DESCRIPTION: Example of querying an array-based RUM index using the distance operator for ordered results.

LANGUAGE: sql
CODE:
SELECT * FROM test_array WHERE i && '{1}' ORDER BY i `<=>` '{1}' ASC;

----------------------------------------

TITLE: Implementing Hello World Edge Function
DESCRIPTION: Demonstrates a basic Edge Function that accepts a name in the request and responds with a greeting.

LANGUAGE: tsx
CODE:
Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
})

----------------------------------------

TITLE: Configuring VSCode for Import Maps
DESCRIPTION: VSCode settings.json configuration to enable Deno and specify the import map location for a Supabase Edge Function.

LANGUAGE: json
CODE:
{
  "deno.enable": true,
  "deno.unstable": [
    "bare-node-builtins",
    "byonm"
    // ... other flags ...
  ],
  "deno.importMap": "./supabase/functions/my-function/import_map.json"
}

----------------------------------------

TITLE: Schema-wide Row Level Security Testing
DESCRIPTION: Create a simple test to verify RLS is enabled across an entire schema.

LANGUAGE: sql
CODE:
begin;
select plan(1);

-- Verify RLS is enabled on all tables in the public schema
select tests.rls_enabled('public');

select * from finish();
rollback;

----------------------------------------

TITLE: Searching for Specific Timezones in Postgres
DESCRIPTION: This SQL query demonstrates how to search for specific timezones using a case-insensitive search. It uses the 'ilike' operator to find timezones containing 'york' in their name.

LANGUAGE: sql
CODE:
select *
from pg_timezone_names()
where name ilike '%york%';

----------------------------------------

TITLE: Configuring Deep Links for iOS and Android
DESCRIPTION: Platform-specific configurations for enabling deep links in iOS and Android applications.

LANGUAGE: xml
CODE:
<!-- iOS Configuration -->
<plist>
<dict>
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.flutterquickstart</string>
      </array>
    </dict>
  </array>
</dict>
</plist>

LANGUAGE: xml
CODE:
<!-- Android Configuration -->
<manifest>
  <application>
    <activity>
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data
          android:scheme="io.supabase.flutterquickstart"
          android:host="login-callback" />
      </intent-filter>
    </activity>
  </application>
</manifest>

----------------------------------------

TITLE: Disabling Next.js Caching for Dynamic Data Fetching
DESCRIPTION: These code snippets demonstrate three different methods to disable caching in Next.js when working with Supabase data that frequently changes. Each option targets a different Next.js configuration to ensure fresh data is fetched on each request.

LANGUAGE: javascript
CODE:
export const dynamic = 'force-dynamic'; // no caching

LANGUAGE: javascript
CODE:
export const fetchCache = 'force-no-store' // to page.js

LANGUAGE: javascript
CODE:
export const revalidate = 0

----------------------------------------

TITLE: Installing Index Advisor Extension - SQL
DESCRIPTION: Shows how to enable the index_advisor extension in PostgreSQL.

LANGUAGE: sql
CODE:
create extension index_advisor;

----------------------------------------

TITLE: Listening to Broadcast Messages
DESCRIPTION: Examples demonstrating how to subscribe to and receive broadcast messages from a specific channel.

LANGUAGE: javascript
CODE:
const channelA = supabase.channel('room-1')

function messageReceived(payload) {
  console.log(payload)
}

channelA
  .on(
    'broadcast',
    { event: 'test' },
    (payload) => messageReceived(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Preventing Role Inheritance
DESCRIPTION: Modifies a role to prevent it from inheriting permissions from parent roles.

LANGUAGE: sql
CODE:
alter role "child_role_name" noinherit;

----------------------------------------

TITLE: Configuring Sentry for Next.js Browser Environment
DESCRIPTION: TypeScript configuration for Sentry in a Next.js browser environment, including Supabase integration and span deduplication.

LANGUAGE: ts
CODE:
import * as Sentry from '@sentry/nextjs'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
    Sentry.browserTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)
      },
    }),
  ],

  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: true,
})

----------------------------------------

TITLE: Creating Next.js Project with Supabase Template
DESCRIPTION: Command to create a new Next.js application using the with-supabase template, which includes pre-configured cookie-based auth, TypeScript, and Tailwind CSS.

LANGUAGE: bash
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Creating Next.js Project with Supabase Template
DESCRIPTION: Command to create a new Next.js application using the with-supabase template, which includes pre-configured cookie-based auth, TypeScript, and Tailwind CSS.

LANGUAGE: bash
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Sign Out Implementation - Multiple Languages
DESCRIPTION: Functions to sign out users and clear their session data across different programming languages using Supabase auth.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Verifying OTP to Create a Session using Supabase Auth in JavaScript
DESCRIPTION: This code snippet shows how to verify a one-time password (OTP) to create a session using Supabase Auth in JavaScript. It uses the verifyOtp method with the user's email, token, and type.

LANGUAGE: javascript
CODE:
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({
  email,
  token: '123456',
  type: 'email',
})

----------------------------------------

TITLE: Initializing Supabase Client in Swift
DESCRIPTION: Sets up the Supabase client with the project URL and anonymous key for use throughout the app.

LANGUAGE: swift
CODE:
import Foundation
import Supabase

let supabase = SupabaseClient(
  supabaseURL: URL(string: "YOUR_SUPABASE_URL")!,
  supabaseKey: "YOUR_SUPABASE_ANON_KEY"
)

----------------------------------------

TITLE: Configuring pgloader for MySQL to Supabase Postgres Migration
DESCRIPTION: This SQL snippet shows the configuration for pgloader to migrate data from a MySQL database to a Supabase Postgres database. It includes the source and destination connection strings, schema ownership alteration, and some PostgreSQL parameter settings.

LANGUAGE: sql
CODE:
load database
  from mysql://user:password@host/source_db
  into postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
alter schema 'public' owner to 'postgres';
set wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';

----------------------------------------

TITLE: Creating Migration File with Supabase CLI
DESCRIPTION: Generates a new migration file to store SQL for creating a table with row and column-level privileges.

LANGUAGE: bash
CODE:
supabase migration new create_posts_table

----------------------------------------

TITLE: MFA Verification Attempt Input Payload (JSON)
DESCRIPTION: Example JSON payload sent by Supabase Auth to the MFA verification hook, containing factor_id, user_id, and verification validity.

LANGUAGE: json
CODE:
{
  "factor_id": "6eab6a69-7766-48bf-95d8-bd8f606894db",
  "user_id": "3919cb6e-4215-4478-a960-6d3454326cec",
  "valid": true
}

----------------------------------------

TITLE: Deleting a Single Message from PGMQ Queue in SQL
DESCRIPTION: Deletes a single message from a queue using the pgmq.delete function.

LANGUAGE: sql
CODE:
select pgmq.delete('my_queue', 5);

----------------------------------------

TITLE: Defining Data Models for User Profiles in Swift
DESCRIPTION: Defines the Profile struct for encoding and decoding user profile data when interacting with Supabase.

LANGUAGE: swift
CODE:
struct Profile: Codable {
  let username: String?
  let fullName: String?
  let website: String?
  let avatarURL: String?

  enum CodingKeys: String, CodingKey {
    case username
    case fullName = "full_name"
    case website
    case avatarURL = "avatar_url"
  }
}

----------------------------------------

TITLE: Using Generated Types with Supabase Client
DESCRIPTION: Demonstrates how to use the generated TypeScript types with the Supabase client.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)

----------------------------------------

TITLE: Enabling HTTP Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the 'http' extension in PostgreSQL. It's recommended to create the extension in a separate schema.

LANGUAGE: sql
CODE:
-- Example: enable the "http" extension
create extension http with schema extensions;

-- Example: disable the "http" extension
drop extension if exists http;

----------------------------------------

TITLE: Creating Publication in Supabase Database
DESCRIPTION: Creates a publication named 'example_pub' in the Supabase database. This is the first step in setting up logical replication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION example_pub;

----------------------------------------

TITLE: Sign In with Kakao ID Token
DESCRIPTION: Function to sign in using a Kakao ID token obtained from the Kakao Login SDK.

LANGUAGE: javascript
CODE:
const res = await auth.signInWithIdToken({
  provider: 'kakao',
  token: id_token,
});

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Initializes a Supabase project using the CLI.

LANGUAGE: bash
CODE:
npx supabase init

----------------------------------------

TITLE: Enabling PGroonga Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the PGroonga extension in PostgreSQL database.

LANGUAGE: sql
CODE:
-- Enable the "pgroonga" extension
create extension pgroonga with schema extensions;

-- Disable the "pgroonga" extension
drop extension if exists pgroonga;

----------------------------------------

TITLE: Adding Complex Exclusion Constraint with btree_gist in SQL
DESCRIPTION: These SQL statements enable the btree_gist extension and add a complex exclusion constraint to prevent overlapping reservations for the same table_id.

LANGUAGE: sql
CODE:
-- Enable the btree_gist index required for the constraint.
create extension btree_gist

-- Add a constraint to prevent overlaps with the same table_id
alter table reservations
  add constraint exclude_duration
  exclude using gist (table_id WITH =, duration WITH &&);

----------------------------------------

TITLE: Configuring Deep Links for iOS and Android
DESCRIPTION: Platform-specific configurations for enabling deep links in iOS and Android applications.

LANGUAGE: xml
CODE:
<!-- iOS Configuration -->
<plist>
<dict>
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.flutterquickstart</string>
      </array>
    </dict>
  </array>
</dict>
</plist>

LANGUAGE: xml
CODE:
<!-- Android Configuration -->
<manifest>
  <application>
    <activity>
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data
          android:scheme="io.supabase.flutterquickstart"
          android:host="login-callback" />
      </intent-filter>
    </activity>
  </application>
</manifest>

----------------------------------------

TITLE: Viewing All Postgres Settings
DESCRIPTION: SQL query to list all Postgres settings and their descriptions from the pg_settings table.

LANGUAGE: sql
CODE:
select * from pg_settings;

----------------------------------------

TITLE: Installing Checkbox Dependencies
DESCRIPTION: Command to install the required Radix UI checkbox primitive package

LANGUAGE: bash
CODE:
npm install @radix-ui/react-checkbox

----------------------------------------

TITLE: Configuring PGAudit User Logging
DESCRIPTION: SQL commands to set up and remove user-specific auditing for a custom database role.

LANGUAGE: sql
CODE:
create user "zapier" with password '<new password>';

alter role "zapier" set pgaudit.log to 'all';

-- disables role's log
alter role "zapier" set pgaudit.log to 'none';

-- check to make sure the changes are finalized:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'zapier';
-- should return a rolconfig path with "pgaudit.log=none" present

----------------------------------------

TITLE: Supabase Authentication with CAPTCHA
DESCRIPTION: Example of using the CAPTCHA token with Supabase authentication signup method

LANGUAGE: jsx
CODE:
await supabase.auth.signUp({
  email,
  password,
  options: { captchaToken },
})

----------------------------------------

TITLE: Deploying Metabase with Docker
DESCRIPTION: Docker commands to pull and run the latest Metabase container. The container will be exposed on port 3000 and run in detached mode.

LANGUAGE: sh
CODE:
docker pull metabase/metabase:latest

LANGUAGE: sh
CODE:
docker run -d -p 3000:3000 --name metabase metabase/metabase

----------------------------------------

TITLE: Running and Testing the Amazon Bedrock Function Locally
DESCRIPTION: Commands to start the Supabase project, serve the function locally, and make a test HTTP request to generate an image.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --env-file supabase/.env

curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/amazon-bedrock' \
  --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
  --header 'Content-Type: application/json' \
  --data '{"prompt":"A beautiful picture of a bird"}'

----------------------------------------

TITLE: Listing Unsupported Operations in Supabase
DESCRIPTION: This snippet enumerates the database operations that are not supported in Supabase due to the lack of superuser privileges. These operations typically require superuser access in a standard PostgreSQL setup.

LANGUAGE: markdown
CODE:
- `CREATE SUBSCRIPTION`
- `CREATE EVENT TRIGGER`
- `COPY ... FROM PROGRAM`
- `ALTER USER ... WITH SUPERUSER`

----------------------------------------

TITLE: Replacing Existing Config Overrides via CLI
DESCRIPTION: Supabase CLI command to replace all existing config overrides with a new setting for 'max_parallel_workers'.

LANGUAGE: bash
CODE:
supabase --experimental \
--project-ref <project-ref> \
postgres-config update --config max_parallel_workers=3 \
--replace-existing-overrides

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Setting up environment variables for Supabase URL and anonymous key in a .env file.

LANGUAGE: bash
CODE:
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY

----------------------------------------

TITLE: Inserting Sample Data into Employees Table in SQL
DESCRIPTION: SQL commands to insert sample data into the employees table for seeding purposes.

LANGUAGE: sql
CODE:
-- in supabase/seed.sql
insert into
public.employees (name)
values
('Erlich Bachman'),
('Richard Hendricks'),
('Monica Hall');

----------------------------------------

TITLE: Configuring Server Execution Options
DESCRIPTION: SQL commands to configure various server options like fetch_size, batch_size, and extensions.

LANGUAGE: sql
CODE:
alter server "<foreign_server_name>"
options (fetch_size '10000');

alter server "<foreign_server_name>"
options (batch_size '1000');

alter server "<foreign_server_name>"
options (extensions 'vector, postgis');

----------------------------------------

TITLE: Enabling and Disabling pgjwt Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pgjwt extension in PostgreSQL. It's recommended to create the extension in a separate schema to keep the public schema clean.

LANGUAGE: sql
CODE:
-- Enable the "pgjwt" extension
create extension pgjwt schema extensions;

-- Disable the "pgjwt" extension
drop extension if exists pgjwt;

----------------------------------------

TITLE: Configuring Vue Router
DESCRIPTION: Setup routing configuration for the application with login and account pages.

LANGUAGE: typescript
CODE:
import { createRouter, createWebHistory } from '@ionic/vue-router'
import { RouteRecordRaw } from 'vue-router'
import LoginPage from '../views/Login.vue'
import AccountPage from '../views/Account.vue'
const routes: Array<RouteRecordRaw> = [
  {
    path: '/',
    name: 'Login',
    component: LoginPage,
  },
  {
    path: '/account',
    name: 'Account',
    component: AccountPage,
  },
]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes,
})

export default router

----------------------------------------

TITLE: Creating and Populating Vector Collection
DESCRIPTION: Creates a new collection with 3-dimensional vectors and inserts sample documents with associated metadata.

LANGUAGE: python
CODE:
collection = vx.get_or_create_collection(name="colab_collection", dimension=3)

collection.upsert(
    vectors=[
        (
         "vec0",           # the vector's identifier
         [0.1, 0.2, 0.3],  # the vector. list or np.array
         {"year": 1973}    # associated  metadata
        ),
        (
         "vec1",
         [0.7, 0.8, 0.9],
         {"year": 2012}
        )
    ]
)

----------------------------------------

TITLE: Implementing Presence in Supabase Realtime with JavaScript
DESCRIPTION: This code shows how to use the Presence feature in Supabase Realtime to create a 'user is typing' indicator. It demonstrates tracking user activity and receiving presence updates.

LANGUAGE: javascript
CODE:
const userId = 'user_1234'
const slackRoomId = '#random'

const channel = supabase.channel(slackRoomId, {
  config: {
    presence: { key: userId }
  }
})

// We can subscribe to all Presence changes using the 'presence' -> 'sync' event.
channel
  .on('presence', { event: 'sync' }, () => presenceChanged())
  .subscribe()

/*
  A contrived example where we bind to all keyboard
  events and send them over our channel
*/
document.addEventListener('keydown', function(event){
  channel.track({ isTyping: Date.now() })
})

// Receive Presence updates
const presenceChanged = () => {
  const newState = channel.presenceState()
  console.log(newState)
}

// When you no longer wish to track data
channel.untrack().then(status => console.log(status)

----------------------------------------

TITLE: Configuring PGAudit Session Logging
DESCRIPTION: Examples of setting PGAudit logging categories for session-level auditing.

LANGUAGE: sql
CODE:
-- log all CREATE, ALTER, and DROP events
set pgaudit.log = 'ddl';

-- log all CREATE, ALTER, DROP, and SELECT events
set pgaudit.log = 'read, ddl';

-- log nothing
set pgaudit.log = 'none';

----------------------------------------

TITLE: Creating Supabase Function
DESCRIPTION: Command to create a new Supabase function for email sending functionality

LANGUAGE: bash
CODE:
supabase functions new resend

----------------------------------------

TITLE: Generating JWT Token with Custom Role in JavaScript for Supabase
DESCRIPTION: This JavaScript code uses the 'jsonwebtoken' library to create a JWT token with the 'manager' role. It requires the JWT_SECRET from your Supabase project settings and a user ID. The token is used for authenticating requests to the Storage API.

LANGUAGE: javascript
CODE:
const jwt = require('jsonwebtoken')

const JWT_SECRET = 'your-jwt-secret' // You can find this in your Supabase project settings under API. Store this securely.
const USER_ID = '' // the user id that we want to give the manager role

const token = jwt.sign({ role: 'manager', sub: USER_ID }, JWT_SECRET, {
  expiresIn: '1h',
})

----------------------------------------

TITLE: Creating and Querying RUM Index for Arrays
DESCRIPTION: Example of creating and querying a RUM index for array types using rum_anyarray_ops operator class.

LANGUAGE: sql
CODE:
CREATE TABLE test_array (i int2[]);
INSERT INTO test_array VALUES ('{}'), ('{0}'), ('{1,2,3,4}'), ('{1,2,3}'), ('{1,2}'), ('{1}');
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);

----------------------------------------

TITLE: Configuring Prisma Connection for Serverless Deployments
DESCRIPTION: Example of setting up DATABASE_URL and DIRECT_URL environment variables for serverless deployments using Supavisor Transaction Mode and Session Mode.

LANGUAGE: text
CODE:
# Used in your application (use transaction mode)
DATABASE_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true"

# Used for Prisma Migrations (use session mode or direct connection)
DIRECT_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Adding MFA Challenge to Login in React
DESCRIPTION: This code snippet shows how to add an MFA challenge step to the login process in a React application. It checks the user's authentication level and displays an MFA screen if necessary.

LANGUAGE: tsx
CODE:
function AppWithMFA() {
  const [readyToShow, setReadyToShow] = useState(false)
  const [showMFAScreen, setShowMFAScreen] = useState(false)

  useEffect(() => {
    ;(async () => {
      try {
        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()
        if (error) {
          throw error
        }

        console.log(data)

        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {
          setShowMFAScreen(true)
        }
      } finally {
        setReadyToShow(true)
      }
    })()
  }, [])

  if (readyToShow) {
    if (showMFAScreen) {
      return <AuthMFA />
    }

    return <App />
  }

  return <></>
}

----------------------------------------

TITLE: Adding MFA Challenge to Login in React
DESCRIPTION: This code snippet shows how to add an MFA challenge step to the login process in a React application. It checks the user's authentication level and displays an MFA screen if necessary.

LANGUAGE: tsx
CODE:
function AppWithMFA() {
  const [readyToShow, setReadyToShow] = useState(false)
  const [showMFAScreen, setShowMFAScreen] = useState(false)

  useEffect(() => {
    ;(async () => {
      try {
        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()
        if (error) {
          throw error
        }

        console.log(data)

        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {
          setShowMFAScreen(true)
        }
      } finally {
        setReadyToShow(true)
      }
    })()
  }, [])

  if (readyToShow) {
    if (showMFAScreen) {
      return <AuthMFA />
    }

    return <App />
  }

  return <></>
}

----------------------------------------

TITLE: Updating Enum Values in PostgreSQL
DESCRIPTION: This snippet shows how to update the value of an Enum column in a table, changing the 'current_mood' of a person named 'Alice'.

LANGUAGE: sql
CODE:
update person
set current_mood = 'excited'
where name = 'Alice';

----------------------------------------

TITLE: Creating Authentication View in SwiftUI
DESCRIPTION: Implements a SwiftUI view for user authentication, allowing sign-in with magic link and handling deep link callbacks.

LANGUAGE: swift
CODE:
import SwiftUI
import Supabase

struct AuthView: View {
  @State var email = ""
  @State var isLoading = false
  @State var result: Result<Void, Error>?

  var body: some View {
    Form {
      Section {
        TextField("Email", text: $email)
          .textContentType(.emailAddress)
          .textInputAutocapitalization(.never)
          .autocorrectionDisabled()
      }

      Section {
        Button("Sign in") {
          signInButtonTapped()
        }

        if isLoading {
          ProgressView()
        }
      }

      if let result {
        Section {
          switch result {
          case .success:
            Text("Check your inbox.")
          case .failure(let error):
            Text(error.localizedDescription).foregroundStyle(.red)
          }
        }
      }
    }
    .onOpenURL(perform: { url in
      Task {
        do {
          try await supabase.auth.session(from: url)
        } catch {
          self.result = .failure(error)
        }
      }
    })
  }

  func signInButtonTapped() {
    Task {
      isLoading = true
      defer { isLoading = false }

      do {
        try await supabase.auth.signInWithOTP(
            email: email,
            redirectTo: URL(string: "io.supabase.user-management://login-callback")
        )
        result = .success(())
      } catch {
        result = .failure(error)
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Supabase Service
DESCRIPTION: Angular service that handles Supabase client initialization and provides methods for authentication and data management

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core'
import {
  AuthChangeEvent,
  AuthSession,
  createClient,
  Session,
  SupabaseClient,
  User,
} from '@supabase/supabase-js'
import { environment } from '../environments/environment'

export interface Profile {
  id?: string
  username: string
  website: string
  avatar_url: string
}

@Injectable({
  providedIn: 'root',
})
export class SupabaseService {
  private supabase: SupabaseClient
  _session: AuthSession | null = null

  constructor() {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  get session() {
    this.supabase.auth.getSession().then(({ data }) => {
      this._session = data.session
    })
    return this._session
  }

  profile(user: User) {
    return this.supabase
      .from('profiles')
      .select(`username, website, avatar_url`)
      .eq('id', user.id)
      .single()
  }

  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {
    return this.supabase.auth.onAuthStateChange(callback)
  }

  signIn(email: string) {
    return this.supabase.auth.signInWithOtp({ email })
  }

  signOut() {
    return this.supabase.auth.signOut()
  }

  updateProfile(profile: Profile) {
    const update = {
      ...profile,
      updated_at: new Date(),
    }

    return this.supabase.from('profiles').upsert(update)
  }

  downLoadImage(path: string) {
    return this.supabase.storage.from('avatars').download(path)
  }

  uploadAvatar(filePath: string, file: File) {
    return this.supabase.storage.from('avatars').upload(filePath, file)
  }
}

----------------------------------------

TITLE: Sign In with GitHub - Kotlin
DESCRIPTION: Function to authenticate users using GitHub OAuth in a Kotlin application using Supabase client.

LANGUAGE: kotlin
CODE:
suspend fun signInWithGithub() {
	supabase.auth.signInWith(Github)
}

----------------------------------------

TITLE: Recreating a Publication in SQL Transaction
DESCRIPTION: This SQL transaction ensures the safe recreation of a publication by first removing the existing one and then creating a new one without enabling it for any tables.

LANGUAGE: sql
CODE:
begin;
  -- remove the realtime publication
  drop publication if exists publication_name;

  -- re-create the publication but don't enable it for any tables
  create publication publication_name;
commit;

----------------------------------------

TITLE: Setting Supabase database connection URL
DESCRIPTION: Exports the Supabase database connection URL as an environment variable for Rails to use.

LANGUAGE: bash
CODE:
export DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Updating Seed Script for Instruments
DESCRIPTION: TypeScript seed script to populate the Instrument table with initial data using Prisma client.

LANGUAGE: typescript
CODE:
import type { Prisma } from '@prisma/client'
import { db } from 'api/src/lib/db'

export default async () => {
  try {
    const data: Prisma.InstrumentCreateArgs['data'][] = [
      { name: 'dulcimer' },
      { name: 'harp' },
      { name: 'guitar' },
    ]

    console.log('Seeding instruments ...')

    const instruments = await db.instrument.createMany({ data })

    console.log('Done.', instruments)
  } catch (error) {
    console.error(error)
  }
}

----------------------------------------

TITLE: Deploying Database Changes to Supabase
DESCRIPTION: Use the Supabase CLI to push your local migrations to the remote database.

LANGUAGE: bash
CODE:
supabase db push

----------------------------------------

TITLE: Signing in with Facebook OAuth using Supabase in Kotlin
DESCRIPTION: This snippet demonstrates how to implement Facebook OAuth sign-in using Supabase in a Kotlin application. It uses the signInWith method from the Supabase Auth API with Facebook as the provider.

LANGUAGE: kotlin
CODE:
suspend fun signInWithFacebook() {
	supabase.auth.signInWith(Facebook)
}

----------------------------------------

TITLE: Copying Local Secrets to Production Environment File
DESCRIPTION: This bash command copies the local secrets file to create a production secrets file for Supabase functions.

LANGUAGE: bash
CODE:
cp ./supabase/.env.local ./supabase/.env

----------------------------------------

TITLE: Updated Session Interface in Supabase Auth
DESCRIPTION: Defines the new Session interface in Supabase Auth, which now guarantees the presence of access_token, refresh_token, and user properties.

LANGUAGE: jsx
CODE:
interface Session {
  provider_token?: string | null
  access_token: string
  expires_in?: number
  expires_at?: number
  refresh_token: string
  token_type: string
  user: User
}

----------------------------------------

TITLE: Exporting Database with pg_dump
DESCRIPTION: Command to export the Neon database to a SQL dump file using pg_dump with specific options for clean migration.

LANGUAGE: bash
CODE:
pg_dump "$OLD_DB_URL" \
  --clean \
  --if-exists \
  --quote-all-identifiers \
  --no-owner \
  --no-privileges \
  > dump.sql

----------------------------------------

TITLE: Identifying and Disabling Excess PGAudit Logging
DESCRIPTION: SQL queries to identify roles monitored by PGAudit and commands to disable excess logging.

LANGUAGE: sql
CODE:
-- find all users monitored by pgaudit
select
  rolname,
  rolconfig
from pg_roles
where
  exists (
    select
      1
    from UNNEST(rolconfig) as c
    where c like '%pgaudit.role%' or c like '%pgaudit.log%'
  );

-- Use to disable object level logging
alter role "<role name>" set pgaudit.role to '';

-- Use to disable global and user level logging
alter role "<role name>" set pgaudit.log to 'none';

----------------------------------------

TITLE: Embedding YouTube Video in React
DESCRIPTION: This code snippet demonstrates how to embed a YouTube video using an iframe in a React component. It includes responsive styling and various allowances for video playback.

LANGUAGE: jsx
CODE:
<div className="video-container mb-8">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/IQ8xqmht-gk"
    title="3 AI models tried to build my database"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowFullScreen
  />
</div>

----------------------------------------

TITLE: Creating a Storage Bucket using JavaScript
DESCRIPTION: This JavaScript code shows how to create a storage bucket named 'avatars' using the Supabase client library.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage.createBucket('avatars')

----------------------------------------

TITLE: Creating New Edge Function
DESCRIPTION: Command to create a new Edge Function named wasm-add using Supabase CLI

LANGUAGE: bash
CODE:
supabase functions new wasm-add

----------------------------------------

TITLE: Setting Secrets for Deployed Supabase Project
DESCRIPTION: Command to set environment variables as secrets in the deployed Supabase project.

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Creating a Persistent Branch
DESCRIPTION: Use the Supabase CLI to create a persistent branch for remote-specific configuration.

LANGUAGE: bash
CODE:
supabase --experimental branches create --persistent
# Do you want to create a branch named develop? [Y/n]

----------------------------------------

TITLE: Markdown Frontend Documentation
DESCRIPTION: Markdown documentation showing the deprecation notice and overview of Supabase Auth Helpers, including links to framework-specific guides and status information.

LANGUAGE: markdown
CODE:
---
id: 'index'
title: 'Auth Helpers'
description: 'Server-Side Auth guides and utilities for working with Supabase.'
sidebar_label: 'Overview'
---

----------------------------------------

TITLE: Implementing Auth Provider for Magic Link Authentication
DESCRIPTION: Customizes Refine's auth provider to implement passwordless authentication using Supabase magic links

LANGUAGE: typescript
CODE:
const authProvider: AuthBindings = {
  login: async ({ email }) => {
    try {
      const { error } = await supabaseClient.auth.signInWithOtp({ email })
      if (!error) {
        alert('Check your email for the login link!')
        return { success: true }
      }
      throw error
    } catch (e: any) {
      alert(e.message)
      return { success: false, e }
    }
  }
  // ... other auth methods
}

----------------------------------------

TITLE: Advanced Billing Example Table in Markdown
DESCRIPTION: Markdown table showing billing breakdown for a project with two Read Replicas and additional configured resources

LANGUAGE: markdown
CODE:
| Line Item                     | Units     | Costs       |
| ----------------------------- | --------- | ----------- |
| Pro Plan                      | 1         | $25         |
|                               |           |             |
| Compute Hours Large Project 1 | 744 hours | $110        |
| Disk Size Project 1           | 8 GB      | $0          |
| Disk IOPS Project 1           | 3600      | $14.40      |
| Disk Throughput Project 1     | 200 MB/s  | $7.13       |
| IPv4 Hours Project 1          | 744 hours | $4          |
|                               |           |             |
| Compute Hours Large Replica 1 | 744 hours | $110        |
| Disk Size Replica 1           | 10 GB     | $1.25       |
| Disk IOPS Replica 1           | 3600      | $14.40      |
| Disk Throughput Replica 1     | 200 MB/s  | $7.13       |
| IPv4 Hours Replica 1          | 744 hours | $4          |
|                               |           |             |
| Compute Hours Large Replica 2 | 744 hours | $110        |
| Disk Size Replica 2           | 10 GB     | $1.25       |
| Disk IOPS Replica 2           | 3600      | $14.40      |
| Disk Throughput Replica 2     | 200 MB/s  | $7.13       |
| IPv4 Hours Replica 2          | 744 hours | $4          |
|                               |           |             |
| **Subtotal**                  |           | **$434.09** |
| Compute Credits               |           | -$10        |
| **Total**                     |           | **$424.09** |

----------------------------------------

TITLE: Implementing Zoom OAuth Sign-In with Supabase in Flutter
DESCRIPTION: Initiates the Zoom OAuth sign-in process in a Flutter application using Supabase's signInWithOAuth method. It includes options for redirect URL and launch mode configuration.

LANGUAGE: dart
CODE:
Future<void> signInWithZoom() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.zoom,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Importing Database with psql
DESCRIPTION: Command to import the SQL dump file into Supabase using psql.

LANGUAGE: bash
CODE:
psql -d "$NEW_DB_URL" -f dump.sql

----------------------------------------

TITLE: Performing Online VACUUM FULL with pg_repack in Supabase
DESCRIPTION: Example command to perform an online VACUUM FULL operation on specific tables in a Supabase database using pg_repack. This optimizes physical storage without blocking ongoing operations.

LANGUAGE: sh
CODE:
pg_repack -k -h db.<PROJECT_REF>.supabase.co -p 5432 -U postgres -d postgres --no-order --table public.foo --table public.bar

----------------------------------------

TITLE: Backing up and stopping Supabase containers
DESCRIPTION: These commands demonstrate how to backup schema and data, and stop Supabase containers without backup.

LANGUAGE: sh
CODE:
supabase db diff -f my_schema
supabase db dump --local --data-only > supabase/seed.sql
supabase stop --no-backup

----------------------------------------

TITLE: Checking IPv6 Network Compatibility
DESCRIPTION: Command to verify if your system supports IPv6 connections by attempting to retrieve your IPv6 address.

LANGUAGE: sh
CODE:
curl -6 https://ifconfig.co/ip

----------------------------------------

TITLE: Creating Row Level Security Policy in SQL
DESCRIPTION: Demonstrates how to create a Row Level Security (RLS) policy in Postgres to allow users to view only their own records in a todos table.

LANGUAGE: sql
CODE:
create policy "Individuals can view their own todos."
  on public.todos
  for select
  using
    ( ( select auth.uid() ) = user_id );

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Command to serve Supabase functions locally without JWT verification for development purposes.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: Enabling Row Level Security
DESCRIPTION: Enables RLS and creates a policy allowing anonymous access to the todos table

LANGUAGE: sql
CODE:
alter table "todos"
enable row level security;

create policy "Allow anonymous access"
on todos
for select
to anon
using (true);

----------------------------------------

TITLE: Processing Realtime Broadcast Messages in TypeScript
DESCRIPTION: This snippet shows the structure of broadcast events in the Realtime protocol. It includes event type, payload, and broadcast type information.

LANGUAGE: typescript
CODE:
{
   "event": "broadcast",
   "topic": string,
   "payload": {
      "event": string,
      "payload": {[key: string]: boolean | number | string | null | undefined},
      "type": "broadcast"
   },
   "ref": null
}

----------------------------------------

TITLE: Installing Command Component via CLI in React
DESCRIPTION: This snippet shows how to install the Command component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add command

----------------------------------------

TITLE: Creating Kotlin Data Model for Supabase
DESCRIPTION: Defines a serializable data class to represent the instrument data structure from Supabase database.

LANGUAGE: kotlin
CODE:
@Serializable
data class Instrument(
    val id: Int,
    val name: String,
)

----------------------------------------

TITLE: Configuring Custom Storage Adapter for Supabase Auth PKCE Flow
DESCRIPTION: This code snippet demonstrates how to create a custom storage adapter for Supabase authentication when localStorage may not be available. It provides fallback mechanisms for getting, setting, and removing items from storage.

LANGUAGE: javascript
CODE:
const customStorageAdapter: SupportedStorage = {
    getItem: (key) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage
        return null
    }
    return globalThis.localStorage.getItem(key)
    },
    setItem: (key, value) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage here
        return
    }
    globalThis.localStorage.setItem(key, value)
    },
    removeItem: (key) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage here
        return
    }
    globalThis.localStorage.removeItem(key)
    },
}

----------------------------------------

TITLE: Initializing Supabase Client with AsyncStorage
DESCRIPTION: Sets up the Supabase client with AsyncStorage for session persistence in React Native.

LANGUAGE: typescript
CODE:
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})

----------------------------------------

TITLE: Querying pg_stat_statements for Expensive Queries in PostgreSQL
DESCRIPTION: SQL query to identify frequently executed and slow queries against a specific table using pg_stat_statements. This query filters for calls over 50, mean execution time over 2ms, total execution time over 1 minute, and queries involving the 'user_in_organization' table.

LANGUAGE: sql
CODE:
select
	calls,
	mean_exec_time,
	max_exec_time,
	total_exec_time,
	stddev_exec_time,
	query
from
	pg_stat_statements
where
    calls > 50                   -- at least 50 calls
    and mean_exec_time > 2.0     -- averaging at least 2ms/call
    and total_exec_time > 60000  -- at least one minute total server time spent
    and query ilike '%user_in_organization%' -- filter to queries that touch the user_in_organization table
order by
	calls desc

----------------------------------------

TITLE: Handling Marker Clicks and Loading Store Information
DESCRIPTION: TypeScript code to handle marker clicks on the Google Map, load store information from Supabase, and display it in a modal.

LANGUAGE: typescript
CODE:
addMarkerClicks() {
    // Handle marker clicks
    this.map.setOnMarkerClickListener(async (marker) => {
      // Find our local object based on the marker ID
      const info = this.activeMarkers.filter(
        (item) => item.markerId === marker.markerId.toString()
      );
      if (info.length) {
        this.selectedMarker = info[0];

        // Load the store information from Supabase Database
        this.selectedStore = await this.storesService.loadStoreInformation(
          info[0].storeId
        );

        // Get the iamge from Supabase Storage
        const img = await this.storesService.getStoreImage(
          this.selectedStore!.id
        );
        if (img) {
          this.selectedStore!.image = img;
        }
      }
    });
  }

----------------------------------------

TITLE: Logging into Supabase CLI
DESCRIPTION: Command to log in to the Supabase CLI for authentication.

LANGUAGE: bash
CODE:
supabase login

----------------------------------------

TITLE: Applying Custom CSS Classes to Auth UI
DESCRIPTION: Shows how to use custom CSS classes for different elements of the Auth component.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{
      // If you want to extend the default styles instead of overriding it, set this to true
      extend: false,
      // Your custom classes
      className: {
        anchor: 'my-awesome-anchor',
        button: 'my-awesome-button',
        //...
      },
    }}
  />
)

----------------------------------------

TITLE: Interacting with the database using Rails models
DESCRIPTION: Demonstrates creating a new Article entry and querying all articles using the Rails console.

LANGUAGE: ruby
CODE:
article = Article.new(title: "Hello Rails", body: "I am on Rails!")
article.save # Saves the entry to the database

Article.all

----------------------------------------

TITLE: Initializing Ionic Vue Project
DESCRIPTION: Commands to create a new Ionic Vue project and install Supabase dependency.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli
ionic start supabase-ionic-vue blank --type vue
cd supabase-ionic-vue
npm install @supabase/supabase-js

----------------------------------------

TITLE: Checking Table and Index Sizes
DESCRIPTION: SQL query to check the size of tables and their associated indices after running VACUUM.

LANGUAGE: sql
CODE:
select
  relname as table_name,
  pg_size_pretty(pg_total_relation_size(relid)) as "Table Size",
  pg_size_pretty(pg_indexes_size(relid)) as "Index Size",
  pg_size_pretty(pg_relation_size(relid)) as "Total Size"
from pg_catalog.pg_statio_user_tables
order by pg_total_relation_size(relid) desc;

----------------------------------------

TITLE: Creating Rust Cargo Project
DESCRIPTION: Command to create a new Cargo project for the WebAssembly module inside the function directory

LANGUAGE: bash
CODE:
cd supabase/functions/wasm-add
cargo new --lib add-wasm

----------------------------------------

TITLE: Initializing and Starting Supabase Locally with CLI
DESCRIPTION: Commands to initialize a Supabase project and start the local stack using the Supabase CLI. This allows developers to run the entire Supabase stack on their local machine for development purposes.

LANGUAGE: bash
CODE:
supabase init
supabase start

----------------------------------------

TITLE: Sign In with Kakao - Kotlin Implementation
DESCRIPTION: Kotlin suspend function to initiate Kakao OAuth authentication using Supabase Auth.

LANGUAGE: kotlin
CODE:
suspend fun signInWithKakao() {
	supabase.auth.signInWith(Kakao)
}

----------------------------------------

TITLE: Implementing Expo Push Notifications Handler in Supabase Edge Function
DESCRIPTION: This TypeScript code defines a Supabase edge function that handles database webhooks to send push notifications using Expo's push notification service. It retrieves the user's Expo push token from the profiles table and sends a notification based on the inserted record in the notifications table.

LANGUAGE: typescript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

console.log('Hello from Functions!')

interface Notification {
  id: string
  user_id: string
  body: string
}

interface WebhookPayload {
  type: 'INSERT' | 'UPDATE' | 'DELETE'
  table: string
  record: Notification
  schema: 'public'
  old_record: null | Notification
}

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const { data } = await supabase
    .from('profiles')
    .select('expo_push_token')
    .eq('id', payload.record.user_id)
    .single()

  const res = await fetch('https://exp.host/--/api/v2/push/send', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${Deno.env.get('EXPO_ACCESS_TOKEN')}`,
    },
    body: JSON.stringify({
      to: data?.expo_push_token,
      sound: 'default',
      body: payload.record.body,
    }),
  }).then((res) => res.json())

  return new Response(JSON.stringify(res), {
    headers: { 'Content-Type': 'application/json' },
  })
})

----------------------------------------

TITLE: Pulling Database Migration
DESCRIPTION: Pull your database changes using the Supabase CLI. This command requires your database URL, which can be found in your database settings.

LANGUAGE: bash
CODE:
supabase db pull --db-url <db_url>

# Your Database URL looks something like:
# postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Connecting Supabase CLI to Local Postgres Instance
DESCRIPTION: Demonstrates how to connect the Supabase CLI to a local Postgres database for inspection.

LANGUAGE: shell
CODE:
supabase --db-url postgresql://postgres:postgres@localhost:5432/postgres inspect db bloat

----------------------------------------

TITLE: Defining Storage Examples Array in JavaScript
DESCRIPTION: This code snippet defines an array of storage examples, including their names, descriptions, and links to GitHub repositories. It's used to populate a list of example projects in the documentation.

LANGUAGE: javascript
CODE:
export const examples = [
  {
    name: 'Resumable Uploads with Uppy',
    description:
      'Use Uppy to upload files to Supabase Storage using the TUS protocol (resumable uploads).',
    href: 'https://github.com/supabase/supabase/tree/master/examples/storage/resumable-upload-uppy',
  }
]

----------------------------------------

TITLE: Listing Remote Secrets in Supabase Project
DESCRIPTION: This bash command lists all the secrets that have been set remotely in a Supabase project.

LANGUAGE: bash
CODE:
supabase secrets list

----------------------------------------

TITLE: Inserting a Secret into Supabase Vault in PostgreSQL
DESCRIPTION: This snippet demonstrates how to insert a secret into the Supabase Vault. The secret is automatically encrypted when inserted into the vault.secrets table.

LANGUAGE: sql
CODE:
insert into vault.secrets
  (secret, associated)
values
  ('s3kr3t_k3y', 'This is the secret API service key.');

----------------------------------------

TITLE: Creating Table with Array Column in PostgreSQL
DESCRIPTION: SQL command to create a table with an integer ID and a text array column.

LANGUAGE: sql
CODE:
create table arraytest (
  id integer not null,
  textarray text array
);

----------------------------------------

TITLE: Signing Out Users in Python with Supabase Auth
DESCRIPTION: This snippet demonstrates how to sign out a user using the Supabase Python client library. It calls the sign_out method directly from the auth module.

LANGUAGE: python
CODE:
supabase.auth.sign_out()

----------------------------------------

TITLE: Initializing Supabase Client in Swift
DESCRIPTION: This snippet demonstrates how to initialize a Supabase client instance using the project URL and public API key. It creates a global 'supabase' variable that can be used throughout the app for database operations.

LANGUAGE: swift
CODE:
import Supabase

let supabase = SupabaseClient(
  supabaseURL: URL(string: "YOUR_SUPABASE_URL")!,
  supabaseKey: "YOUR_SUPABASE_ANON_KEY"
)

----------------------------------------

TITLE: Creating a Publication for Update Events in SQL
DESCRIPTION: This SQL command creates a publication that listens only to update events on all tables.

LANGUAGE: sql
CODE:
create publication publication_name
for all tables
with (publish = 'update');

----------------------------------------

TITLE: Firebase Password Hash Parameters
DESCRIPTION: Sample configuration showing the password hash parameters from Firebase, including algorithm, signer key, salt separator, rounds, and memory cost.

LANGUAGE: text
CODE:
hash_config {
  algorithm: SCRYPT,
  base64_signer_key: XXXX/XXX+XXXXXXXXXXXXXXXXX+XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX==,
  base64_salt_separator: Aa==,
  rounds: 8,
  mem_cost: 14,
}

----------------------------------------

TITLE: Configuring Supabase in deno.json
DESCRIPTION: This JSON configuration in deno.json specifies the import for the Supabase JavaScript client library.

LANGUAGE: json
CODE:
{
  "imports": {
    "@supabase/supabase-js": "jsr:@supabase/supabase-js@2"
  }
}

----------------------------------------

TITLE: Inserting Seed Data in SQL
DESCRIPTION: Example of inserting seed data for countries into a database using SQL. This snippet demonstrates how to populate a 'countries' table with initial values.

LANGUAGE: sql
CODE:
insert into countries
  (name, code)
values
  ('United States', 'US'),
  ('Canada', 'CA'),
  ('Mexico', 'MX');

----------------------------------------

TITLE: Signing Out Users in Swift with Supabase Auth
DESCRIPTION: This snippet demonstrates how to sign out a user using the Supabase Swift client library. It uses the async/await syntax to call the signOut method from the auth module.

LANGUAGE: swift
CODE:
try await supabase.auth.signOut()

----------------------------------------

TITLE: Azure OAuth Sign In Implementation - Flutter
DESCRIPTION: Flutter/Dart implementation for signing in with Azure OAuth using Supabase Auth.

LANGUAGE: dart
CODE:
Future<void> signInWithAzure() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.azure,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Checking pg_cron Extension Availability in PostgreSQL
DESCRIPTION: This SQL query checks if the pg_cron extension is available in the PostgreSQL database. It retrieves information about the extension's name, comment, default version, and installed version.

LANGUAGE: sql
CODE:
select name, comment, default_version, installed_version
from pg_available_extensions
where name = 'pg_cron';

----------------------------------------

TITLE: GitLab OAuth Sign In - Kotlin
DESCRIPTION: Implements GitLab OAuth authentication using Supabase Auth in Kotlin. Uses a suspend function to handle the asynchronous OAuth sign-in process.

LANGUAGE: kotlin
CODE:
suspend fun signInWithGitLab() {
	supabase.auth.signInWith(Gitlab)
}

----------------------------------------

TITLE: Enabling pg_cron Extension in PostgreSQL
DESCRIPTION: This SQL command enables the pg_cron extension in the PostgreSQL database if it's not already enabled. This extension allows scheduling periodic jobs within the database.

LANGUAGE: sql
CODE:
create extension if not exists pg_cron;

----------------------------------------

TITLE: Altering Superuser Setting
DESCRIPTION: SQL command to alter a superuser setting for the 'postgres' role, using 'auto_explain.log_nested_statements' as an example.

LANGUAGE: sql
CODE:
alter role "postgres" set "auto_explain.log_nested_statements" to 'on';

----------------------------------------

TITLE: Creating Test Table with RLS in Postgres
DESCRIPTION: SQL code to create a todos table with Row Level Security enabled and a policy that restricts users to accessing only their own records.

LANGUAGE: sql
CODE:
-- Create a simple todos table
create table todos (
id uuid primary key default gen_random_uuid(),
task text not null,
user_id uuid references auth.users not null,
completed boolean default false
);

-- Enable RLS
alter table todos enable row level security;

-- Create a policy
create policy "Users can only access their own todos"
on todos for all -- this policy applies to all operations
to authenticated
using ((select auth.uid()) = user_id);

----------------------------------------

TITLE: Purging All Messages from PGMQ Queue in SQL
DESCRIPTION: Permanently deletes all messages in a queue using the pgmq.purge_queue function.

LANGUAGE: sql
CODE:
select * from pgmq.purge_queue('my_queue');

----------------------------------------

TITLE: Counting Social Likes with SQL in Supabase
DESCRIPTION: Demonstrates how to implement a 'count' query for social likes in Supabase using SQL, which is simpler compared to Firebase.

LANGUAGE: SQL
CODE:
SELECT COUNT(*) FROM likes WHERE post_id = :post_id

----------------------------------------

TITLE: Creating Account Page for Profile Management
DESCRIPTION: Implements an account page component for managing user profiles, including updating profile information and signing out.

LANGUAGE: jsx
CODE:
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonLoading,
  useIonToast,
  useIonRouter
} from '@ionic/react';
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';

export function AccountPage() {
  const [showLoading, hideLoading] = useIonLoading();
  const [showToast] = useIonToast();
  const [session] = useState(() => supabase.auth.session());
  const router = useIonRouter();
  const [profile, setProfile] = useState({
    username: '',
    website: '',
    avatar_url: '',
  });
  useEffect(() => {
    getProfile();
  }, [session]);
  const getProfile = async () => {
    console.log('get');
    await showLoading();
    try {
      const user = supabase.auth.user();
      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user!.id)
        .single();

      if (error && status !== 406) {
        throw error;
      }

      if (data) {
        setProfile({
          username: data.username,
          website: data.website,
          avatar_url: data.avatar_url,
        });
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  const signOut = async () => {
    await supabase.auth.signOut();
    router.push('/', 'forward', 'replace');
  }
  const updateProfile = async (e?: any, avatar_url: string = '') => {
    e?.preventDefault();

    console.log('update ');
    await showLoading();

    try {
      const user = supabase.auth.user();

      const updates = {
        id: user!.id,
        ...profile,
        avatar_url: avatar_url,
        updated_at: new Date(),
      };

      const { error } = await supabase.from('profiles').upsert(updates, {
        returning: 'minimal', // Don't return the value after inserting
      });

      if (error) {
        throw error;
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Account</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <form onSubmit={updateProfile}>
          <IonItem>
            <IonLabel>
              <p>Email</p>
              <p>{session?.user?.email}</p>
            </IonLabel>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Name</IonLabel>
            <IonInput
              type="text"
              name="username"
              value={profile.username}
              onIonChange={(e) =>
                setProfile({ ...profile, username: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Website</IonLabel>
            <IonInput
              type="url"
              name="website"
              value={profile.website}
              onIonChange={(e) =>
                setProfile({ ...profile, website: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>
          <div className="ion-text-center">
            <IonButton fill="clear" type="submit">
              Update Profile
            </IonButton>
          </div>
        </form>

        <div className="ion-text-center">
          <IonButton fill="clear" onClick={signOut}>
            Log Out
          </IonButton>
        </div>
      </IonContent>
    </IonPage>
  );
}

----------------------------------------

TITLE: Configuring Storage Bucket in Supabase
DESCRIPTION: TOML configuration for automatically generating a storage bucket in Supabase. It sets up a private audio bucket with specific file size and MIME type restrictions.

LANGUAGE: toml
CODE:
[storage.buckets.audio]
public = false
file_size_limit = "50MiB"
allowed_mime_types = ["audio/mp3"]
objects_path = "./audio"

----------------------------------------

TITLE: Initializing Supabase Auth UI in Flutter
DESCRIPTION: Basic setup code to initialize Supabase in a Flutter application with environment variables for URL and anonymous key.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:supabase_auth_ui/supabase_auth_ui.dart';

void main() async {
  await Supabase.initialize(
    url: dotenv.get('SUPABASE_URL'),
    anonKey: dotenv.get('SUPABASE_ANON_KEY'),
  );

  runApp(const MyApp());
}

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Swift
DESCRIPTION: This Swift code demonstrates creating a public storage bucket named 'avatars' using the Supabase Swift client library. It uses the createBucket method with BucketOptions to set the bucket as public.

LANGUAGE: swift
CODE:
try await supabase.storage.createBucket(
  "avatars",
  options: BucketOptions(public: true)
)

----------------------------------------

TITLE: Setting Session-Level Timeout in PostgreSQL
DESCRIPTION: Sets the statement timeout for the current session to 10 minutes. This setting persists only for the duration of the connection and is typically used for long-running administrative tasks.

LANGUAGE: sql
CODE:
set statement_timeout = '10min';

----------------------------------------

TITLE: Connecting to Supabase Database with Vecs in Python
DESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a vector store client.

LANGUAGE: python
CODE:
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

----------------------------------------

TITLE: Supabase Service Configuration
DESCRIPTION: JSON configuration file for Supabase database connection settings including host, credentials, and port information.

LANGUAGE: json
CODE:
{
  "host": "database.server.com",
  "password": "secretpassword",
  "user": "postgres",
  "database": "postgres",
  "port": 5432
}

----------------------------------------

TITLE: Adding Messages Using SQL
DESCRIPTION: SQL command to send a message to a queue using the pgmq.send function. Requires direct database connection.

LANGUAGE: sql
CODE:
select * from pgmq.send(
  queue_name  => 'foo',
  msg         => '{ "hello": "world" }'
);

----------------------------------------

TITLE: Signing in with Keycloak OAuth in Kotlin
DESCRIPTION: This snippet illustrates how to implement Keycloak OAuth sign-in using Supabase's Kotlin client library. It uses the signInWith method, specifying Keycloak as the provider and adding the required 'openid' scope.

LANGUAGE: kotlin
CODE:
suspend fun signInWithKeycloak() {
	supabase.auth.signInWith(Keycloak) {
		scopes.add("openid")
	}
}

----------------------------------------

TITLE: Using Command Component in React JSX
DESCRIPTION: This snippet demonstrates how to use the Command component and its subcomponents in a React JSX structure.

LANGUAGE: tsx
CODE:
<Command>
  <CommandInput placeholder="Type a command or search..." />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading="Suggestions">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading="Settings">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>

----------------------------------------

TITLE: Basic Dropdown Menu Usage in React
DESCRIPTION: TypeScript code snippet demonstrating the basic usage of a dropdown menu component with various menu items.

LANGUAGE: tsx
CODE:
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>

----------------------------------------

TITLE: Moving Objects Within Same Bucket in Supabase Storage (JavaScript)
DESCRIPTION: This snippet demonstrates how to move an object within the same bucket using the Supabase Storage API. It uses the 'move' method to relocate an object from one location to another in the 'avatars' bucket.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage
  .from('avatars')
  .move('public/avatar1.png', 'private/avatar2.png')

----------------------------------------

TITLE: Configuring Postgres Audit Logging
DESCRIPTION: SQL commands for configuring pgAudit logging settings including enabling function calls, writes, and DDL statement logging

LANGUAGE: sql
CODE:
-- temporary single-session config update
set pgaudit.log = 'function, write, ddl';

-- equivalent permanent config update.
alter role postgres set pgaudit.log to 'function, write, ddl';

-- for API-related logs
alter role authenticator set pgaudit.log to 'write';

-- adjust log level
alter role postgres set pgaudit.log_level to 'info';
alter role postgres set pgaudit.log_level to 'debug5';

-- resets stored config.
alter role postgres reset pgaudit.log

----------------------------------------

TITLE: Creating HNSW Index with Float16 Vectors
DESCRIPTION: Shows how to create an HNSW index using float16 vectors for improved memory efficiency.

LANGUAGE: sql
CODE:
create index on embedding_half using hnsw (vector halfvec_l2_ops);

----------------------------------------

TITLE: Implementing Sign-Out with Supabase in Kotlin
DESCRIPTION: Performs a sign-out operation using Supabase's signOut method in a Kotlin application. This removes the user from the current session.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Implementing Telegram Bot with Supabase Edge Function
DESCRIPTION: This code snippet shows how to create a Telegram Bot using an Edge Function that listens for location updates and inserts them into a Supabase database using an RPC call.

LANGUAGE: typescript
CODE:
import { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.20.3/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2.39.7'
import { Database } from '../_shared/database.types.ts'

const token = Deno.env.get('BOT_TOKEN')
if (!token) throw new Error('BOT_TOKEN is unset')

const supabase = createClient<Database>(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

const bot = new Bot(token)
// ...

bot.on('edit:location', async (ctx) => {
  const {
    location,
    from: { id: user_id },
    edit_date,
  } = ctx.update.edited_message!
  if (location) {
    // Insert into db
    const { error } = await supabase.rpc('location_insert', {
      _user_id: user_id,
      _lat: location.latitude,
      _long: location.longitude,
      _timestamp: edit_date,
    })
    if (
      error &&
      error.message !==
        'null value in column "event_id" of relation "locations" violates not-null constraint' &&
      error.message !== 'duplicate key value violates unique constraint "locations_pkey"'
    ) {
      return console.log(`edit:location:insert:error:user:${user_id}: ${error.message}`)
    }
  }
  return
})

const handleUpdate = webhookCallback(bot, 'std/http')

Deno.serve(async (req) => {
  const headers = req.headers
  try {
    const url = new URL(req.url)
    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {
      return new Response('not allowed', { status: 405 })
    }

    return await handleUpdate(req)
  } catch (err) {
    console.log(headers)
    console.error(err)
  }
  return new Response()
})

----------------------------------------

TITLE: Oak Framework Routing Setup
DESCRIPTION: Implementation of routing using the Oak framework with GET and POST handlers

LANGUAGE: typescript
CODE:
import { Application } from "jsr:@oak/oak@15/application";
import { Router } from "jsr:@oak/oak@15/router";

const router = new Router();

router.get("/hello-world", (ctx) => {
ctx.response.body = "Hello world!";
});

router.post("/hello-world", async (ctx) => {
const { name } = await ctx.request.body.json();
ctx.response.body = `Hello ${name}!`;
});

const app = new Application();
app.use(router.routes());
app.use(router.allowedMethods());

app.listen({ port: 3000 });

----------------------------------------

TITLE: Running Supabase CLI with bunx
DESCRIPTION: This command shows how to run Supabase CLI commands using bunx without installation.

LANGUAGE: sh
CODE:
bunx supabase <command>

----------------------------------------

TITLE: Streaming Inserts with Supabase in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use Supabase client to subscribe to INSERT events on a database. It creates a channel and listens for postgres_changes events with the 'INSERT' type in the 'public' schema.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Serving Supabase Functions with Local Environment File
DESCRIPTION: This bash command demonstrates how to serve Supabase functions locally using a specific environment file.

LANGUAGE: bash
CODE:
supabase functions serve --env-file ./supabase/.env.local

----------------------------------------

TITLE: Implementing Custom Logging in Edge Function
DESCRIPTION: Example showing how to implement custom logging in an Edge Function, including error handling and different log levels (log, warn, error). Demonstrates proper response handling and JSON processing.

LANGUAGE: typescript
CODE:
Deno.serve(async (req) => {
  try {
    const { name } = await req.json()

    if (!name) {
      console.warn('Empty name provided')
    }

    const data = {
      message: `Hello ${name || 'Guest'}!`, // Provide a default value if name is empty
    }

    console.log(`Name: ${name}`)

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (error) {
    console.error(`Error processing request: ${error.message}`)
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Importing npm Module in TypeScript
DESCRIPTION: Demonstrates how to import an npm module using the npm: specifier in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
import { createClient } from 'npm:@supabase/supabase-js@2'

----------------------------------------

TITLE: Generating UUIDv4 in Postgres
DESCRIPTION: Demonstrates how to generate a UUIDv4 using the uuid-ossp extension in Postgres.

LANGUAGE: sql
CODE:
SELECT gen_random_uuid();

----------------------------------------

TITLE: Implementing Resumable Uploads in Kotlin
DESCRIPTION: This snippet demonstrates how to implement resumable uploads in Kotlin using Supabase Storage. It includes examples for uploading both files and byte arrays, with progress tracking.

LANGUAGE: kotlin
CODE:
suspend fun uploadFile(file: File) {
    val upload: ResumableUpload = supabase.storage.from("bucket_name")
        .resumable.createOrContinueUpload("file_path", file)
    upload.stateFlow
        .onEach {
            println(it.progress)
        }
        .launchIn(yourCoroutineScope)
    upload.startOrResumeUploading()
}

// On other platforms you might have to give the bytes directly and specify a source if you want to continue it later:
suspend fun uploadData(bytes: ByteArray) {
    val upload: ResumableUpload = supabase.storage.from("bucket_name")
        .resumable.createOrContinueUpload(bytes, "source", "file_path")

    upload.stateFlow
        .onEach {
            println(it.progress)
        }
        .launchIn(yourCoroutineScope)
    upload.startOrResumeUploading()
}

----------------------------------------

TITLE: Starting the Next.js development server
DESCRIPTION: Runs the Next.js development server to start the application locally.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: Shows how to generate TypeScript types for local and remote Supabase databases using the CLI.

LANGUAGE: bash
CODE:
# in a project set up with the CLI:
supabase gen types typescript --local
supabase gen types typescript --db-url $SUPABASE_DB_URL

----------------------------------------

TITLE: Complex Log Filtering with AND/OR Conditions in SQL
DESCRIPTION: This snippet demonstrates how to use multiple regexp_contains functions with AND and OR conditions to create more complex log filtering queries. It filters for messages containing specific words or combinations of words.

LANGUAGE: sql
CODE:
select
  cast(timestamp as datetime) as timestamp,
  event_message,
  metadata
from postgres_logs
where
  (regexp_contains(event_message, 'connection') and regexp_contains(event_message, 'host'))
  or not regexp_contains(event_message, 'received');

----------------------------------------

TITLE: Create Edge Function
DESCRIPTION: Command to create a new Edge Function named 'embed' for generating embeddings.

LANGUAGE: shell
CODE:
supabase functions new embed

----------------------------------------

TITLE: Calling PostgreSQL Functions with supabase-js
DESCRIPTION: Demonstrates how to call a PostgreSQL Function using the supabase-js library. The example shows invoking a function named 'best_star_wars_series' with a parameter.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.rpc('best_star_wars_series', {
  name: 'The Prequels',
})

----------------------------------------

TITLE: Configuring Sentry for Next.js Server Environment
DESCRIPTION: TypeScript configuration for Sentry in a Next.js server environment, including Supabase integration and span deduplication.

LANGUAGE: ts
CODE:
import * as Sentry from '@sentry/nextjs'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
    Sentry.nativeNodeFetchIntegration({
      breadcrumbs: true,
      ignoreOutgoingRequests: (url) => {
        return url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)
      },
    }),
  ],
  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: true,
})

----------------------------------------

TITLE: Running Schema Diff Docker Command
DESCRIPTION: Docker command to compare schemas between two PostgreSQL databases using the Supabase pgAdmin schema diff tool.

LANGUAGE: bash
CODE:
docker run supabase/pgadmin-schema-diff \
  'postgres://user:pass@local:5432/diff_source' \
  'postgres://user:pass@production:5432/diff_target' \
  > diff_demo.sql

----------------------------------------

TITLE: Signing in with Phone OTP in Kotlin
DESCRIPTION: Use the supabase.auth.signInWith(OTP) method to initiate a phone login in Kotlin. The user receives an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: kotlin
CODE:
supabase.auth.signInWith(OTP) {
    phone = "+13334445555"
}

----------------------------------------

TITLE: Creating a Basic Users Table with Integer Primary Key
DESCRIPTION: Demonstrates how to create a users table with an integer primary key and a unique email index.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS citext;

CREATE TABLE users (
  id integer PRIMARY KEY,
  email citext NOT NULL CHECK (LENGTH(email) < 255),
  name text NOT NULL
);

CREATE UNIQUE INDEX users_email_uniq ON users USING BTREE (email);

----------------------------------------

TITLE: Creating a Flutter Project for Figma Clone
DESCRIPTION: Initialize a new Flutter project with web support and empty template.

LANGUAGE: bash
CODE:
flutter create canvas --empty --platforms=web

----------------------------------------

TITLE: Setting Visibility Timeout for PGMQ Message in SQL
DESCRIPTION: Sets the visibility timeout of a message to a specified time duration in the future using the pgmq.set_vt function.

LANGUAGE: sql
CODE:
select * from pgmq.set_vt('my_queue', 11, 30);

----------------------------------------

TITLE: Creating a Custom Theme for Auth UI
DESCRIPTION: Example of creating a custom theme with multiple variations for the Auth component.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const customTheme = {
  default: {
    colors: {
      brand: 'hsl(153 60.0% 53.0%)',
      brandAccent: 'hsl(154 54.8% 45.1%)',
      brandButtonText: 'white',
      // ..
    },
  },
  dark: {
    colors: {
      brandButtonText: 'white',
      defaultButtonBackground: '#2e2e2e',
      defaultButtonBackgroundHover: '#3e3e3e',
      //...
    },
  },
  // You can also add more theme variations with different names.
  evenDarker: {
    colors: {
      brandButtonText: 'white',
      defaultButtonBackground: '#1e1e1e',
      defaultButtonBackgroundHover: '#2e2e2e',
      //...
    },
  },
}

const App = () => (
  <Auth
    supabaseClient={supabase}
    theme="default" // can also be "dark" or "evenDarker"
    appearance={{ theme: customTheme }}
  />
)

----------------------------------------

TITLE: Querying PostgreSQL Database List
DESCRIPTION: Shows how to list all databases in a PostgreSQL cluster, including template databases.

LANGUAGE: sql
CODE:
select * from pg_database;

----------------------------------------

TITLE: Creating and Populating Coordinates Table for TSP
DESCRIPTION: Creates a table with X,Y coordinates and populates it with sample data to be used in the traveling salesperson problem calculation.

LANGUAGE: sql
CODE:
create table wi29 (
  id bigint,
  x float,
  y float,
  geom geometry
);

insert into wi29 (id, x, y)
values
  (1,20833.3333,17100.0000),
  (2,20900.0000,17066.6667),
  (3,21300.0000,13016.6667),
  (4,21600.0000,14150.0000),
  (5,21600.0000,14966.6667),
  (6,21600.0000,16500.0000),
  (7,22183.3333,13133.3333),
  (8,22583.3333,14300.0000),
  (9,22683.3333,12716.6667),
  (10,23616.6667,15866.6667),
  (11,23700.0000,15933.3333),
  (12,23883.3333,14533.3333),
  (13,24166.6667,13250.0000),
  (14,25149.1667,12365.8333),
  (15,26133.3333,14500.0000),
  (16,26150.0000,10550.0000),
  (17,26283.3333,12766.6667),
  (18,26433.3333,13433.3333),
  (19,26550.0000,13850.0000),
  (20,26733.3333,11683.3333),
  (21,27026.1111,13051.9444),
  (22,27096.1111,13415.8333),
  (23,27153.6111,13203.3333),
  (24,27166.6667,9833.3333),
  (25,27233.3333,10450.0000),
  (26,27233.3333,11783.3333),
  (27,27266.6667,10383.3333),
  (28,27433.3333,12400.0000),
  (29,27462.5000,12992.2222);

----------------------------------------

TITLE: Committing and Pushing Migration Changes
DESCRIPTION: Commit the new migration file and push it to the remote GitHub repository.

LANGUAGE: bash
CODE:
git add supabase/migrations
git commit -m "Add employees table"
git push --set-upstream origin new-employee

----------------------------------------

TITLE: Management API Response for Project Creation
DESCRIPTION: Shows the JSON response structure when creating a new project using the Management API, including project details like ID, organization ID, name, region, and creation timestamp.

LANGUAGE: json
CODE:
{
  "id": "abcdefghijklmnopqrst",
  "organization_id": "cool-green-pqdr0qc",
  "name": "hello",
  "region": "us-east-1",
  "created_at": "2022-08-12T17:37:11.88819Z"
}

----------------------------------------

TITLE: Sign Out Implementation - Kotlin
DESCRIPTION: Implementation of the sign out functionality using the Supabase Kotlin client to remove user session and localStorage data.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Rendering Migration Guide Navigation Grid in React/JSX
DESCRIPTION: React component code that renders a responsive grid of migration guide links using GlassPanel components. Utilizes NavData component to map through available migration pages and create clickable panels for each guide.

LANGUAGE: jsx
CODE:
<NavData data="migrationPages">
  {(migrationPages) => (
    <div className="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-6 mb-6 not-prose">
      {migrationPages.map((page) => (
        <Link href={`${page.url}`} key={page.url} passHref>
          <GlassPanel
            icon={page.icon}
            title={page.name}
            hasLightIcon={page.hasLightIcon}
            background={false}
            className="[&>div]:p-4"
          />
        </Link>
      ))}
    </div>
  )}
</NavData>

----------------------------------------

TITLE: HTML iFrame Embedding for Tutorial Video
DESCRIPTION: HTML markup for embedding a YouTube tutorial video about building a Telegram bot with Supabase Edge Functions. The iframe includes standard YouTube embedding parameters and security attributes.

LANGUAGE: html
CODE:
<iframe
    src="https://www.youtube-nocookie.com/embed/AWfE3a9J_uo"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
></iframe>

----------------------------------------

TITLE: Basic Sheet Implementation
DESCRIPTION: Example showing basic usage of the Sheet component with header, title, and description

LANGUAGE: tsx
CODE:
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account and remove your data
        from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>

----------------------------------------

TITLE: Adding Tables to Publication in Supabase Database
DESCRIPTION: Adds specific tables to the publication for replication. This step is necessary for each table you want to replicate from Supabase to the external database.

LANGUAGE: sql
CODE:
ALTER PUBLICATION example_pub ADD TABLE example_table;

----------------------------------------

TITLE: Enabling pg_repack Extension in Supabase SQL
DESCRIPTION: SQL command to enable the pg_repack extension in the Supabase database. This is required before using pg_repack functionality.

LANGUAGE: sql
CODE:
create extension pg_repack with schema extensions;

----------------------------------------

TITLE: Starting Local Supabase Instance
DESCRIPTION: Command to start a local Supabase instance using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase start

----------------------------------------

TITLE: Connecting to Supabase Database using Direct Connection
DESCRIPTION: Command to connect directly to a Supabase database. Use this if your ISP supports IPv6. Replace PROJECT-REF and YOUR-PASSWORD with actual values.

LANGUAGE: bash
CODE:
postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@db.[PROJECT-REF].supabase.com:5432/postgres

----------------------------------------

TITLE: Signing in with Bitbucket OAuth using Supabase Flutter SDK
DESCRIPTION: This code snippet shows how to implement Bitbucket OAuth sign-in using the Supabase Flutter SDK. It uses the signInWithOAuth method with OAuthProvider.bitbucket as the provider, and includes options for redirect and launch mode.

LANGUAGE: dart
CODE:
Future<void> signInWithBitbucket() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.bitbucket,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Calling Postgres Image Matching Function with Supabase JavaScript Client
DESCRIPTION: This JavaScript snippet demonstrates how to call the Postgres image matching function using the Supabase JavaScript client.

LANGUAGE: javascript
CODE:
let { data: images, error } = await supabase.rpc('match_images', {
  query_embedding,
  match_threshold,
  match_count,
})

----------------------------------------

TITLE: MFA Verification Attempt JSON Schema
DESCRIPTION: JSON Schema defining the structure of the MFA verification attempt payload, including user_id and valid fields with their respective types and requirements.

LANGUAGE: json
CODE:
{
  "type": "object",
  "properties": {
    "user_id": {
      "type": "string",
      "x-faker": "random.uuid"
    },
    "valid": {
      "type": "boolean",
      "x-faker": "random.boolean"
    }
  },
  "required": ["user_id", "valid"]
}

----------------------------------------

TITLE: Defining Particle Configuration Hook
DESCRIPTION: Creates a custom hook for managing particle configuration and GUI controls.

LANGUAGE: javascript
CODE:
const useParticlesConfig = (): any => {
  if (typeof window === 'undefined') return null
  const hash = window.location.hash
  const isDebugMode = hash.includes('#debug')
  const [particles, setParticles] = useState(range(0, defaultConfig.particles))

  const [config, setConfig] = useState(defaultConfig)

  const handleSetConfig = (name, value) => {
    setConfig((prevConfig) => ({ ...prevConfig, [name]: value }))
  }

  // ... GUI setup code ...

  return { config, handleSetConfig, particles, setParticles, isDebugMode }
}

----------------------------------------

TITLE: Installing Supabase JavaScript Client in Nuxt Project
DESCRIPTION: This command navigates to the Nuxt app directory and installs the Supabase JavaScript client library.

LANGUAGE: bash
CODE:
cd my-app && npm install @supabase/supabase-js

----------------------------------------

TITLE: Creating Database Migration for Transcription Logs
DESCRIPTION: SQL migration script to create a table for storing transcription logs with row level security enabled

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS transcription_logs (
  id BIGSERIAL PRIMARY KEY,
  file_type VARCHAR NOT NULL,
  duration INTEGER NOT NULL,
  chat_id BIGINT NOT NULL,
  message_id BIGINT NOT NULL,
  username VARCHAR,
  transcript TEXT,
  language_code VARCHAR,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  error TEXT
);

ALTER TABLE transcription_logs ENABLE ROW LEVEL SECURITY;

----------------------------------------

TITLE: Accessing local Postgres database
DESCRIPTION: This command demonstrates how to access the local Postgres database using psql.

LANGUAGE: sh
CODE:
psql 'postgresql://postgres:postgres@localhost:54322/postgres'

----------------------------------------

TITLE: Configuring Environment Variables for Amazon Bedrock in Supabase
DESCRIPTION: Set up the necessary environment variables for Amazon Bedrock integration in a .env file within the Supabase project directory.

LANGUAGE: txt
CODE:
AWS_DEFAULT_REGION="<your_region>"
AWS_ACCESS_KEY_ID="<replace_your_own_credentials>"
AWS_SECRET_ACCESS_KEY="<replace_your_own_credentials>"
AWS_SESSION_TOKEN="<replace_your_own_credentials>"

# Mocked config files
AWS_SHARED_CREDENTIALS_FILE="./aws/credentials"
AWS_CONFIG_FILE="./aws/config"

----------------------------------------

TITLE: Finding API Errors with SQL in Supabase Log Explorer
DESCRIPTION: SQL query to find API errors by filtering status codes and using regex to match specific table and column names.

LANGUAGE: sql
CODE:
select
  cast(timestamp as datetime) as timestamp,
  status_code,
  url,
  event_message
from edge_logs
cross join unnest(metadata) as metadata
cross join unnest(response) AS request;
cross join unnest(response) AS response;
where
  status_code >= 400
    and
  (
    regexp_contains(url, '<table_name>')
    and
    regexp_contains(event_message, '<column_name1>|<column_name2>')
  )

----------------------------------------

TITLE: Testing Edge Function with cURL
DESCRIPTION: cURL commands to test the deployed Edge Function endpoints

LANGUAGE: bash
CODE:
curl --request GET 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY'

curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Foo" }'

----------------------------------------

TITLE: Restoring Supabase Backup using psql
DESCRIPTION: SQL command to restore a Supabase backup file to a new project. Replace CONNECTION_STRING with the actual connection string and /file/path with the path to the backup file.

LANGUAGE: sql
CODE:
psql -d [CONNECTION_STRING] -f /file/path

----------------------------------------

TITLE: Adding Messages Using Supabase Client
DESCRIPTION: TypeScript example showing how to send messages to a queue using the Supabase client library. Requires proper configuration of the client and queue permissions.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const url = 'SUPABASE_URL'
const key = 'SUPABASE_ANON_KEY'

const queues = createClient(url, key, {
  db: { schema: 'pgmq_public' },
})

const { data, error } = await queues.rpc('send', {
  queue_name: 'foo',
  message: { hello: 'world' },
})

console.log('Message: ', data)

----------------------------------------

TITLE: Using Supabase Client Library for Regional Function Invocation
DESCRIPTION: Example demonstrating how to invoke Edge Functions with regional control using the Supabase client library and FunctionRegion enum.

LANGUAGE: javascript
CODE:
const { createClient, FunctionRegion } = require('@supabase/supabase-js')
const { data: ret, error } = await supabase.functions.invoke('my-function-name', {
  headers: { 'Content-Type': 'application/json' },
  method: 'GET',
  body: {},
  region: FunctionRegion.UsEast1,
})

----------------------------------------

TITLE: Setting Maintenance Work Memory in PostgreSQL
DESCRIPTION: SQL command to increase the maintenance_work_mem parameter to enable creation of indexes with high list values.

LANGUAGE: sql
CODE:
SET maintenance_work_mem TO '7168 MB';

----------------------------------------

TITLE: Subscribing to Postgres Changes in Supabase Realtime
DESCRIPTION: This code shows how to subscribe to Postgres database changes using Supabase Realtime. It listens for all changes in the 'public' schema and logs the received payloads.

LANGUAGE: javascript
CODE:
const allChanges = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Adding user metadata on signup in Kotlin for Supabase
DESCRIPTION: Kotlin code snippet demonstrating how to add metadata to a user during the signup process using Supabase authentication.

LANGUAGE: kotlin
CODE:
val data = supabase.auth.signUpWith(Email) {
    email = "valid.email@supabase.io"
    password = "example-password"
    data = buildJsonObject {
        put("first_name", "John")
        put("age", 27)
    }
}

----------------------------------------

TITLE: Sending Session to Client in SvelteKit Layout
DESCRIPTION: JavaScript code for sending the session to the client in a SvelteKit root layout server load function.

LANGUAGE: javascript
CODE:
export const load = async ({ locals: { safeGetSession } }) => {
  const { session, user } = await safeGetSession()

  return {
    session,
    user,
  }
}

----------------------------------------

TITLE: Accessing Postgres Database
DESCRIPTION: Examples of connecting to the Postgres database using psql for both session-based and pooled transactional connections.

LANGUAGE: sh
CODE:
psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:5432/postgres'

psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:6543/postgres'

----------------------------------------

TITLE: Configuring Remote-Specific Settings
DESCRIPTION: Example of configuring a separate seed script for a staging environment in the config.toml file.

LANGUAGE: toml
CODE:
[remotes.staging]
project_id = "your-project-ref"

[remotes.staging.db.seed]
sql_paths = ["./seeds/staging.sql"]

----------------------------------------

TITLE: Generating UUIDv1 in Postgres
DESCRIPTION: Shows how to generate a UUIDv1 with a random MAC address using the uuid-ossp extension in Postgres.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

SELECT uuid_generate_v1mc();

----------------------------------------

TITLE: Updating Realtime Access Token in TypeScript
DESCRIPTION: This snippet shows how to send a message to update the access token on the server. It requires specifying the new token in the payload.

LANGUAGE: typescript
CODE:
{
   "event": "access_token",
   "topic": string,
   "payload":{
      "access_token": string
   },
   "ref": string
}

----------------------------------------

TITLE: Syncing Specific Schema in Supabase CLI
DESCRIPTION: Command to synchronize the database with a specific schema.

LANGUAGE: bash
CODE:
supabase db pull --schema <schema_name>

----------------------------------------

TITLE: Creating a Storage Policy using SQL
DESCRIPTION: This SQL snippet shows how to create a public access policy for objects in the 'public' bucket.

LANGUAGE: sql
CODE:
create policy "Public Access"
  on storage.objects for select
  using ( bucket_id = 'public' );

----------------------------------------

TITLE: Archiving Multiple Messages from PGMQ Queue in SQL
DESCRIPTION: Removes multiple messages from the queue and inserts them into the queue's archive using the pgmq.archive function with an array of message IDs.

LANGUAGE: sql
CODE:
select * from pgmq.archive('my_queue', array[1, 2]);

----------------------------------------

TITLE: Google One Tap Sign-in Configuration
DESCRIPTION: JavaScript implementation for Google One Tap sign-in with PKCE flow

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    queryParams: {
      access_type: 'offline',
      prompt: 'consent',
    },
  },
})

----------------------------------------

TITLE: Signing out using Supabase in Kotlin
DESCRIPTION: This code snippet illustrates how to sign out a user using the Supabase Kotlin client. It calls the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Inspecting Failed Webhook Responses
DESCRIPTION: This SQL query retrieves all failed webhook responses from the past 6 hours, ordered by creation time.

LANGUAGE: sql
CODE:
select
  *
from net._http_response
where "status_code" >= 400 or "error_msg" is not null
order by created desc;

----------------------------------------

TITLE: Implementing Gzip Log Handler
DESCRIPTION: TypeScript implementation of an edge function that handles gzip compressed log drain events

LANGUAGE: typescript
CODE:
import { gunzipSync } from 'node:zlib'

Deno.serve(async (req) => {
  try {
    // Check if the request body is gzip compressed
    const contentEncoding = req.headers.get('content-encoding')
    if (contentEncoding !== 'gzip') {
      return new Response('Request body is not gzip compressed', {
        status: 400,
      })
    }

    // Read the compressed body
    const compressedBody = await req.arrayBuffer()

    // Decompress the body
    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))

    // Convert the decompressed body to a string
    const decompressedString = new TextDecoder().decode(decompressedBody)
    const data = JSON.parse(decompressedString)
    // Process the decompressed body as needed
    console.log(`Received: ${data.length} logs.`)

    return new Response('ok', {
      headers: { 'Content-Type': 'text/plain' },
    })
  } catch (error) {
    console.error('Error:', error)
    return new Response('Error processing request', { status: 500 })
  }
})

----------------------------------------

TITLE: Sign In with GitHub - JavaScript
DESCRIPTION: Function to authenticate users using GitHub OAuth in a JavaScript application using Supabase client.

LANGUAGE: javascript
CODE:
async function signInWithGithub() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
  })
}

----------------------------------------

TITLE: Configuring Android Internet Permissions
DESCRIPTION: Adding internet permission to Android manifest for production deployment

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- Required to fetch data from the internet. -->
  <uses-permission android:name="android.permission.INTERNET" />
  <!-- ... -->
</manifest>

----------------------------------------

TITLE: Displaying Google Map in Ionic Angular Template
DESCRIPTION: HTML and SCSS code to display a Google Map in an Ionic Angular template, including styling to make the map fill the entire screen.

LANGUAGE: html
CODE:
<ion-content>
  <div class="container">
    <capacitor-google-map #map></capacitor-google-map>
  </div>
</ion-content>

LANGUAGE: scss
CODE:
ion-content {
  --background: none;
}

.container {
  width: 100%;
  height: 100%;
}

capacitor-google-map {
  display: inline-block;
  width: 100%;
  height: 100%;
}

----------------------------------------

TITLE: Installing Supabase Client Library
DESCRIPTION: Installs the Supabase JavaScript client library in the React project for database interactions.

LANGUAGE: bash
CODE:
cd my-app && npm install @supabase/supabase-js

----------------------------------------

TITLE: Creating a new Supabase Edge Function
DESCRIPTION: Use the Supabase CLI to create a new function named 'upstash-redis-counter'.

LANGUAGE: bash
CODE:
supabase functions new upstash-redis-counter

----------------------------------------

TITLE: Checking Webhook Activity in Postgres
DESCRIPTION: This SQL query checks if the pg_net background worker is active by querying the pg_stat_activity table.

LANGUAGE: sql
CODE:
select pid from pg_stat_activity where backend_type ilike '%pg_net%';

----------------------------------------

TITLE: Setting up Edge Functions Test Directory Structure
DESCRIPTION: Recommended folder structure for organizing Edge Function tests, placing test files in supabase/functions/tests directory with -test.ts suffix

LANGUAGE: bash
CODE:
└── supabase
    ├── functions
    │   ├── function-one
    │   │   └── index.ts
    │   └── function-two
    │   │   └── index.ts
    │   └── tests
    │       └── function-one-test.ts  # Tests for function-one
    │       └── function-two-test.ts  # Tests for function-two
    └── config.toml

----------------------------------------

TITLE: Deploying Edge Functions with Bitbucket Pipelines
DESCRIPTION: Bitbucket pipeline configuration for deploying Edge Functions. Includes setup step for installing dependencies and parallel deployment step with Docker service integration.

LANGUAGE: yaml
CODE:
image: node:20

pipelines:
  default:
    - step:
        name: Setup
        caches:
          - node
        script:
          - npm i supabase
    - parallel:
        - step:
            name: Functions Deploy
            script:
              - npx supabase init
              - npx supabase functions deploy --debug
            services:
              - docker

----------------------------------------

TITLE: Pulling Remote Database Changes
DESCRIPTION: Use the Supabase CLI to pull changes from your remote branch to your local migrations directory.

LANGUAGE: bash
CODE:
supabase db pull --db-url "postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres"

----------------------------------------

TITLE: Linking OAuth Identity in Supabase Auth
DESCRIPTION: Demonstrates how to link an OAuth provider identity to an existing user account using the linkIdentity() method.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase.auth.linkIdentity({
  provider: 'google',
})

----------------------------------------

TITLE: Pulling Storage Schema Changes in Supabase CLI
DESCRIPTION: Command to pull storage schema changes locally.

LANGUAGE: bash
CODE:
supabase db pull --schema storage

----------------------------------------

TITLE: Testing Webhook with Postman Echo API
DESCRIPTION: This SQL query makes a POST request to the Postman Echo API using pg_net to test webhook functionality.

LANGUAGE: sql
CODE:
select
net.http_post(
url := 'https://postman-echo.com/post',
body := '{"key1": "value", "key2": 5}'::jsonb
) as request_id;

----------------------------------------

TITLE: Sign Out Implementation - Multiple Languages
DESCRIPTION: Functions to sign out users across different platforms using Supabase Auth.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Using Badge Component in React JSX
DESCRIPTION: Example of using the Badge component with an outline variant in React JSX.

LANGUAGE: tsx
CODE:
<Badge variant="outline">Badge</Badge>

----------------------------------------

TITLE: Controlling Dialog Centering in React
DESCRIPTION: This snippet shows how to control the centering behavior of a Dialog by passing the 'centered' prop to the DialogContent component.

LANGUAGE: tsx
CODE:
<Dialog>
  <ContextMenuTrigger>Click here</ContextMenuTrigger>
  <DialogContent centered={false}>
    {/*
     * Content in here
     */}
  </DialogContent>
</Dialog>

----------------------------------------

TITLE: Signing in with Discord OAuth using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Discord OAuth sign-in using the Supabase JavaScript client. It utilizes the signInWithOAuth method, specifying 'discord' as the provider.

LANGUAGE: javascript
CODE:
async function signInWithDiscord() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'discord',
  })
}

----------------------------------------

TITLE: Creating a New Migration File in Supabase CLI
DESCRIPTION: Use the Supabase CLI to generate a new migration file for creating the employees table.

LANGUAGE: bash
CODE:
supabase migration new create_employees_table

----------------------------------------

TITLE: Sign In with Kakao - Flutter Implementation
DESCRIPTION: Flutter/Dart function to initiate Kakao OAuth authentication with optional redirect configuration.

LANGUAGE: dart
CODE:
Future<void> signInWithKakao() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.kakao,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Configuring routes for instruments in refine app
DESCRIPTION: Updates the App.tsx file to include routes for instruments list, create, edit, and show pages.

LANGUAGE: tsx
CODE:
import { Refine, WelcomePage } from "@refinedev/core";
import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";
import routerBindings, {
  DocumentTitleHandler,
  NavigateToResource,
  UnsavedChangesNotifier,
} from "@refinedev/react-router-v6";
import { dataProvider, liveProvider } from "@refinedev/supabase";
import { BrowserRouter, Route, Routes } from "react-router-dom";

import "./App.css";
import authProvider from "./authProvider";
import { supabaseClient } from "./utility";
import { InstrumentsCreate, InstrumentsEdit, InstrumentsList, InstrumentsShow } from "./pages/instruments";

function App() {
  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <Refine
          dataProvider={dataProvider(supabaseClient)}
          liveProvider={liveProvider(supabaseClient)}
          authProvider={authProvider}
          routerProvider={routerBindings}
          options={{
            syncWithLocation: true,
            warnWhenUnsavedChanges: true,
          }}
          resources={[{
            name: "instruments",
            list: "/instruments",
            create: "/instruments/create",
            edit: "/instruments/edit/:id",
            show: "/instruments/show/:id"
          }]}>
          <Routes>
            <Route index
              element={<NavigateToResource resource="instruments" />}
            />
            <Route path="/instruments">
              <Route index element={<InstrumentsList />} />
              <Route path="create" element={<InstrumentsCreate />} />
              <Route path="edit/:id" element={<InstrumentsEdit />} />
              <Route path="show/:id" element={<InstrumentsShow />} />
            </Route>
          </Routes>
          <RefineKbar />
          <UnsavedChangesNotifier />
          <DocumentTitleHandler />
        </Refine>
      </RefineKbarProvider>
    </BrowserRouter>
  );
}

export default App;

----------------------------------------

TITLE: Building WebAssembly Package
DESCRIPTION: Command to build the WebAssembly package targeting Deno runtime

LANGUAGE: bash
CODE:
wasm-pack build --target deno

----------------------------------------

TITLE: Benchmarking ID Generation with pg_idkit
DESCRIPTION: SQL query to benchmark the generation speed of custom ID types using pg_idkit extension.

LANGUAGE: sql
CODE:
\timing

SELECT COUNT(idkit_ksuid_generate()) FROM generate_series(1, 1000000);

----------------------------------------

TITLE: Add Claim Custom Access Token Hook in JavaScript (HTTP)
DESCRIPTION: This JavaScript function creates a custom access token hook that adds a 'role' claim to the token based on the 'app_metadata' field. It demonstrates how to modify claims in an HTTP-based hook implementation.

LANGUAGE: javascript
CODE:
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'
import * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'

Deno.serve(async (req) => {
  const payload = await req.text()
  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(base64_secret)
  try {
    const { user_id, claims, authentication_method } = wh.verify(payload, headers)
    if (claims.app_metadata && claims.app_metadata.role) {
      claims['role'] = claims.app_metadata.role
    }
    return new Response(
      JSON.stringify({
        claims,
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({
        error: `Failed to process the request: ${error}`,
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
})

----------------------------------------

TITLE: Example PostgreSQL Connection Strings for Supabase
DESCRIPTION: Sample connection strings for direct connections, Supavisor in transaction mode, and Supavisor in session mode. These strings show how to connect to a Supabase PostgreSQL database using different methods.

LANGUAGE: sh
CODE:
# Example connection string
postgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres

# Example transaction string
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres

# Example session string
postgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Configuring PostgreSQL Database Settings
DESCRIPTION: Configures PostgreSQL connection settings in Laravel's database configuration file, including custom schema setup.

LANGUAGE: php
CODE:
'pgsql' => [
    'driver' => 'pgsql',
    'url' => env('DB_URL'),
    'host' => env('DB_HOST', '127.0.0.1'),
    'port' => env('DB_PORT', '5432'),
    'database' => env('DB_DATABASE', 'laravel'),
    'username' => env('DB_USERNAME', 'root'),
    'password' => env('DB_PASSWORD', ''),
    'charset' => env('DB_CHARSET', 'utf8'),
    'prefix' => '',
    'prefix_indexes' => true,
    'search_path' => 'laravel',
    'sslmode' => 'prefer',
],

----------------------------------------

TITLE: Configuring Custom Presence Key in Supabase
DESCRIPTION: Shows how to set a custom presence key when creating a Supabase channel, instead of using the default server-generated UUIDv1 key.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const channelC = supabase.channel('test', {
  config: {
    presence: {
      key: 'userId-123',
    },
  },
})

LANGUAGE: dart
CODE:
final channelC = supabase.channel(
  'test',
  opts: const RealtimeChannelConfig(key: 'userId-123'),
);

LANGUAGE: swift
CODE:
let channelC = await supabase.channel("test") {
  $0.presence.key = "userId-123"
}

LANGUAGE: kotlin
CODE:
val channelC = supabase.channel("test") {
    presence {
        key = "userId-123"
    }
}

LANGUAGE: python
CODE:
channel_c = supabase.channel('test', {
  "config": {
    "presence": {
      "key": 'userId-123',
    },
  },
})

----------------------------------------

TITLE: Activating a Vanity Subdomain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to activate and claim a vanity subdomain for a project.

LANGUAGE: bash
CODE:
supabase vanity-subdomains --project-ref abcdefghijklmnopqrst activate --desired-subdomain my-example-brand

----------------------------------------

TITLE: Implementing Sub-Vector Function in SQL
DESCRIPTION: SQL function to shorten and renormalize embeddings for Adaptive Retrieval.

LANGUAGE: sql
CODE:
create or replace function sub_vector(v extensions.vector, dimensions int)
returns extensions.vector
language plpgsql
immutable
set search_path = ''
as $$
begin
  if dimensions > extensions.vector_dims(v) then
    raise exception 'dimensions must be less than or equal to the vector size';
  end if;

  return (
    with unnormed(elem) as (
      select x from unnest(v::float4[]) with ordinality v(x, ix)
      where ix <= dimensions
    ),
    norm(factor) as (
      select
        sqrt(sum(pow(elem, 2)))
      from
        unnormed
    )
    select
      array_agg(u.elem / r.factor)::extensions.vector
    from
      norm r, unnormed u
  );
end;
$$;

----------------------------------------

TITLE: Inserting Array Data with JavaScript Supabase Client
DESCRIPTION: JavaScript code using Supabase client to insert a record with an array of strings.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('arraytest')
  .insert([{ id: 2, textarray: ['one', 'two', 'three', 'four'] }])

----------------------------------------

TITLE: Setting up Auth event listener in SvelteKit
DESCRIPTION: Implement a listener for Supabase Auth events to handle session refreshes and signouts in a SvelteKit application.

LANGUAGE: svelte
CODE:
<script>
  import { invalidate } from '$app/navigation'
  import { onMount } from 'svelte'

  let { data, children } = $props()
  let { session, supabase } = $derived(data)

  onMount(() => {
    const { data } = supabase.auth.onAuthStateChange((_, newSession) => {
      if (newSession?.expires_at !== session?.expires_at) {
        invalidate('supabase:auth')
      }
    })

    return () => data.subscription.unsubscribe()
  })
</script>

{@render children()}

----------------------------------------

TITLE: Supabase Client Configuration
DESCRIPTION: Creating a Supabase client instance with environment variables

LANGUAGE: tsx
CODE:
import { createClient } from '@supabase/supabase-js'

export default createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

----------------------------------------

TITLE: Verifying Phone OTP in Swift
DESCRIPTION: Use the supabase.auth.verifyOTP method to verify the one-time password sent to the user's phone in Swift. This should be called after the user inputs the 6-digit pin they received.

LANGUAGE: swift
CODE:
try await supabase.auth.verifyOTP(
  phone: "+13334445555",
  token: "123456",
  type: .sms
)

----------------------------------------

TITLE: Initializing Supabase Client and Querying Data in Swift
DESCRIPTION: This snippet demonstrates how to initialize a Supabase client with a URL and anonymous key, define a struct for decoding, and query data from a 'countries' table using Swift's async/await syntax.

LANGUAGE: swift
CODE:
let url = URL(string: "...")!
let anonKey = "public-anon-key"
let client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)

struct Country: Decodable {
  let id: Int
  let name: String
}

let countries: [Country] = try await supabase.from("countries")
  .select()
  .execute()
  .value

----------------------------------------

TITLE: Implementing Text Confirm Dialog with Warning Alert in JSX
DESCRIPTION: This example shows how to create a Text Confirm Dialog with a warning alert. It uses a destructive variant with a specific title and description.

LANGUAGE: jsx
CODE:
<ComponentPreview
  name="text-confirm-dialog-with-warning-alert"
  description="An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'"
/>

----------------------------------------

TITLE: Implementing Email Authentication Widget in Flutter
DESCRIPTION: Implementation of email and password authentication form with custom metadata fields support.

LANGUAGE: dart
CODE:
SupaEmailAuth(
  redirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',
  onSignInComplete: (response) {},
  onSignUpComplete: (response) {},
  metadataFields: [
    MetaDataField(
    prefixIcon: const Icon(Icons.person),
    label: 'Username',
    key: 'username',
    validator: (val) {
            if (val == null || val.isEmpty) {
            return 'Please enter something';
            }
            return null;
          },
        ),
    ],
)

----------------------------------------

TITLE: Running Vacuum Operation in Postgres
DESCRIPTION: This SQL command performs a vacuum operation to reclaim space and update statistics after deleting data.

LANGUAGE: sql
CODE:
vacuum;

----------------------------------------

TITLE: Kakao Login SDK Token Exchange
DESCRIPTION: Example of exchanging Kakao authorization code for an ID Token and using it for authentication.

LANGUAGE: javascript
CODE:
const requestUrl = new URL(request.url);
const code = requestUrl.searchParams.get('code');

if (code) {
  const res = await fetch('https://kauth.kakao.com/oauth/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      client_id: '<CLIENT_ID>',
      redirect_uri: '<url>/api/auth/kakao/oidc',
      code,
      client_secret: '<CLIENT_SECRET>',
    }),
  });

  const {id_token} = await res.json();
}

----------------------------------------

TITLE: Launching Rails console for database interaction
DESCRIPTION: Starts the Rails console for interactive database operations.

LANGUAGE: bash
CODE:
bin/rails console

----------------------------------------

TITLE: New Multiplayer Channel Interface in supabase-js v2
DESCRIPTION: This example introduces the new channel() interface in supabase-js v2, which is a preparatory release for upcoming multiplayer features.

LANGUAGE: typescript
CODE:
supabase
  .channel('any_string_you_want')
  .on('presence', { event: 'track' }, (payload) => {
    console.log(payload)
  })
  .subscribe()

----------------------------------------

TITLE: Creating Instrument Model in Prisma Schema
DESCRIPTION: Prisma schema definition for the Instrument model with id and name fields.

LANGUAGE: prisma
CODE:
model Instrument {
  id   Int    @id @default(autoincrement())
  name String @unique
}

----------------------------------------

TITLE: Express.js Routing Implementation
DESCRIPTION: Basic routing setup using Express.js framework with GET and POST endpoints

LANGUAGE: typescript
CODE:
import express from 'npm:express@4.18.2'

const app = express()
app.use(express.json())

const port = 3000

app.get('/hello-world', (req, res) => {
  res.send('Hello World!')
})

app.post('/hello-world', (req, res) => {
  const { name } = req.body
  res.send(`Hello ${name}!`)
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

----------------------------------------

TITLE: Implementing Sign Out - Flutter
DESCRIPTION: Flutter/Dart implementation for signing out users and clearing their session data.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Disabling Timeout for SQL Queries in PostgreSQL
DESCRIPTION: SQL command to completely disable the timeout for the current session. This allows indefinitely long-running queries, but should be used cautiously.

LANGUAGE: sql
CODE:
set statement_timeout = '0';

----------------------------------------

TITLE: Setting Supabase Database Environment Variable
DESCRIPTION: Command to set the NEW_DB_URL environment variable with Supabase connection string.

LANGUAGE: bash
CODE:
export NEW_DB_URL="postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Configuring Auth0 Action for Role Assignment
DESCRIPTION: JavaScript code for Auth0 Action to set custom role claim for Supabase authentication.

LANGUAGE: javascript
CODE:
exports.onExecutePostLogin = async (event, api) => {
  api.accessToken.setCustomClaim('role', 'authenticated')
}

----------------------------------------

TITLE: Overwriting Files in Supabase Storage
DESCRIPTION: These snippets show how to overwrite existing files in Supabase Storage by setting the 'upsert' option to true. Examples are provided for multiple programming languages.

LANGUAGE: javascript
CODE:
// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

await supabase.storage.from('bucket_name').upload('file_path', file, {
  upsert: true,
})

LANGUAGE: dart
CODE:
await supabase.storage.from('bucket_name').upload(
      'file_path',
      file,
      fileOptions: const FileOptions(upsert: true),
    );

LANGUAGE: swift
CODE:
import Supabase

// Create Supabase client
let supabase = SupabaseClient(supabaseURL: URL(string: "your_project_url")!, supabaseKey: "your_supabase_api_key")

try await supabase.storage.from("bucket_name")
  .upload(
    path: "file_path",
    file: file,
    options: FileOptions(
      upsert: true
    )
  )

LANGUAGE: kotlin
CODE:
supabase.storage.from("bucket_name").upload("file_path", bytes) {
    upsert = true
}

LANGUAGE: python
CODE:
response = supabase.storage.from_('bucket_name').upload('file_path', file, {
  'upsert': 'true',
})

----------------------------------------

TITLE: Implementing Uncompressed Log Handler
DESCRIPTION: TypeScript implementation of an edge function that handles uncompressed log drain events

LANGUAGE: typescript
CODE:
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'

Deno.serve(async (req) => {
  const data = await req.json()

  console.log(`Received ${data.length} logs, first log:\n ${JSON.stringify(data[0])}`)
  return new Response(JSON.stringify({ message: 'ok' }), {
    headers: { 'Content-Type': 'application/json' },
  })
})

----------------------------------------

TITLE: Logging in to Supabase CLI
DESCRIPTION: Command to log in to the Supabase CLI for authentication.

LANGUAGE: bash
CODE:
supabase login

----------------------------------------

TITLE: Poetry Script Configuration
DESCRIPTION: Adding script commands to Poetry configuration file

LANGUAGE: toml
CODE:
[tool.poetry.scripts]
seed = "image_search.main:seed"
search = "image_search.main:search"

----------------------------------------

TITLE: Creating HNSW Index for Shortened Vectors in SQL
DESCRIPTION: SQL command to create an HNSW index on shortened vectors for faster first-pass queries.

LANGUAGE: sql
CODE:
create index on documents
using hnsw ((sub_vector(embedding, 512)::vector(512)) vector_ip_ops)
with (m = 32, ef_construction = 400);

----------------------------------------

TITLE: Installing Alert Dialog Dependencies via CLI
DESCRIPTION: Command to install the alert dialog component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add alert-dialog

----------------------------------------

TITLE: Signing in with Bitbucket OAuth using Supabase Kotlin SDK
DESCRIPTION: This snippet illustrates how to implement Bitbucket OAuth sign-in using the Supabase Kotlin SDK. It uses the signInWith method with Bitbucket as the Provider.

LANGUAGE: kotlin
CODE:
suspend fun signInWithBitbucket() {
	supabase.auth.signInWith(Bitbucket)
}

----------------------------------------

TITLE: Signing in with Phone OTP in Swift
DESCRIPTION: Use the supabase.auth.signInWithOTP method to initiate a phone login in Swift. The user receives an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: swift
CODE:
try await supabase.auth.signInWithOTP(
  phone: "+13334445555"
)

----------------------------------------

TITLE: Creating Partial Index in SQL
DESCRIPTION: Creating a partial index to optimize queries that frequently target a specific subset of data, reducing index size and improving performance.

LANGUAGE: sql
CODE:
create index idx_orders_status on orders (status)
where status = 'shipped';

----------------------------------------

TITLE: Archiving Messages from a Queue in SQL
DESCRIPTION: The `pgmq_public.archive` function moves a Message from the Queue table to the Queue's archive table. It takes the queue name and the message ID as parameters.

LANGUAGE: sql
CODE:
pgmq_public.archive(queue_name, message_id)

----------------------------------------

TITLE: Implementing Sign Out - Kotlin
DESCRIPTION: Kotlin implementation for signing out users and clearing their session data.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Starting Vue Development Server
DESCRIPTION: Launch the Vue development server to run the application locally

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Accessing Local Environment Variable in Supabase Edge Function
DESCRIPTION: This JavaScript snippet shows how to access a local environment variable within a Supabase Edge Function.

LANGUAGE: javascript
CODE:
console.log(Deno.env.get('MY_NAME'))

----------------------------------------

TITLE: Simplified Data Queries in Supabase Flutter
DESCRIPTION: Shows the removal of .execute() method requirement for database queries, making the API more streamlined.

LANGUAGE: dart
CODE:
// Before
final response = await Supabase.instance.from('messages').select().execute();
final data = response.data;

// After
final data = await Supabase.instance.from('messages').select();

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Create a .env file from the provided example to set up Supabase project URL and anon key.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: Inserting Geographic Data in JavaScript
DESCRIPTION: JavaScript code using Supabase client to insert geographic data into the restaurants table.

LANGUAGE: javascript
CODE:
const { error } = await supabase.from('restaurants').insert([
  {
    name: 'Supa Burger',
    location: 'POINT(-73.946823 40.807416)',
  },
  {
    name: 'Supa Pizza',
    location: 'POINT(-73.94581 40.807475)',
  },
  {
    name: 'Supa Taco',
    location: 'POINT(-73.945826 40.80629)',
  },
])

----------------------------------------

TITLE: Implementing Login Component
DESCRIPTION: Vue component for handling user authentication via magic link email login.

LANGUAGE: html
CODE:
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="ion-padding">
        <h1>Supabase + Ionic Vue</h1>
        <p>Sign in via magic link with your email below</p>
      </div>
      <ion-list inset="true">
        <form @submit.prevent="handleLogin">
          <ion-item>
            <ion-label position="stacked">Email</ion-label>
            <ion-input v-model="email" name="email" autocomplete type="email"></ion-input>
          </ion-item>
          <div class="ion-text-center">
            <ion-button type="submit" fill="clear">Login</ion-button>
          </div>
        </form>
      </ion-list>
      <p>{{email}}</p>
    </ion-content>
  </ion-page>
</template>

----------------------------------------

TITLE: Creating Vector Collection with Python Vecs
DESCRIPTION: Creates a new collection called 'docs' with 3 dimensions using the Vecs client. Establishes connection to local PostgreSQL database.

LANGUAGE: python
CODE:
import vecs

# create vector store client
vx = vecs.create_client("postgresql://postgres:postgres@localhost:54322/postgres")

# create a collection of vectors with 3 dimensions
docs = vx.get_or_create_collection(name="docs", dimension=3)

----------------------------------------

TITLE: Configuring iOS URL Schemes for Google Sign-in
DESCRIPTION: XML configuration for the iOS Info.plist file to enable Google Sign-in URL schemes

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <!-- TODO Replace this value: -->
      <!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->
      <string>com.googleusercontent.apps.861823949799-vc35cprkp249096uujjn0vvnmcvjppkn</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Disabling Prepared Statements in Node Postgres
DESCRIPTION: Remove the 'name' property from the query definition to prevent prepared statement usage in Node Postgres.

LANGUAGE: typescript
CODE:
const query = {
  text: 'SELECT * FROM user WHERE id = $1',
  values: [1],
}

----------------------------------------

TITLE: Creating a Data Model for Instruments in Swift
DESCRIPTION: This code defines a struct named 'Instrument' that conforms to Decodable and Identifiable protocols. It represents the data structure for musical instruments stored in the Supabase database, with 'id' and 'name' properties.

LANGUAGE: swift
CODE:
struct Instrument: Decodable, Identifiable {
  let id: Int
  let name: String
}

----------------------------------------

TITLE: Creating Supabase Client Utility for Client Components
DESCRIPTION: Utility function to create a Supabase client for use in client-side components.

LANGUAGE: javascript
CODE:
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
}

----------------------------------------

TITLE: Deploying Discord Bot Function with Supabase CLI
DESCRIPTION: This snippet shows how to deploy the Discord bot function using the Supabase CLI and set the required environment variable.

LANGUAGE: bash
CODE:
supabase functions deploy discord-bot --no-verify-jwt
supabase secrets set DISCORD_PUBLIC_KEY=your_public_key

----------------------------------------

TITLE: Deleting a Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to remove a custom domain from a project. This command disables the custom domain for the project.

LANGUAGE: bash
CODE:
supabase domains delete --project-ref abcdefghijklmnopqrst

----------------------------------------

TITLE: Configuring Supabase Database Schema
DESCRIPTION: SQL commands to create tables for rooms, room participants, and messages with appropriate relationships and a function to create new chat rooms

LANGUAGE: sql
CODE:
create table if not exists public.rooms (
    id uuid not null primary key default gen_random_uuid(),
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null
);
comment on table public.rooms is 'Holds chat rooms';

create table if not exists public.room_participants (
    profile_id uuid references public.profiles(id) on delete cascade not null,
    room_id uuid references public.rooms(id) on delete cascade not null,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,
    primary key (profile_id, room_id)
);
comment on table public.room_participants is 'Relational table of users and rooms.';

alter table public.messages
add column room_id uuid references public.rooms(id) on delete cascade not null;

alter publication supabase_realtime add table public.room_participants;

create or replace function create_new_room(other_user_id uuid) returns uuid as $$
    declare
        new_room_id uuid;
    begin
        with rooms_with_profiles as (
            select room_id, array_agg(profile_id) as participants
            from room_participants
            group by room_id
        )
        select room_id
        into new_room_id
        from rooms_with_profiles
        where create_new_room.other_user_id=any(participants)
        and auth.uid()=any(participants);

        if not found then
            insert into public.rooms default values
            returning id into new_room_id;

            insert into public.room_participants (profile_id, room_id)
            values (auth.uid(), new_room_id);

            insert into public.room_participants (profile_id, room_id)
            values (other_user_id, new_room_id);
        end if;

        return new_room_id;
    end
$$ language plpgsql security definer;

----------------------------------------

TITLE: Configuring JavaScript Entrypoint for Edge Function
DESCRIPTION: Example of specifying a JavaScript file as the entrypoint for an Edge Function in the config.toml file.

LANGUAGE: toml
CODE:
[functions.hello-world]
# other entries
entrypoint = './functions/hello-world/index.js' # path must be relative to config.toml

----------------------------------------

TITLE: Deploying Edge Function
DESCRIPTION: Command to deploy the Edge Function to Supabase

LANGUAGE: bash
CODE:
supabase functions deploy hello-world

----------------------------------------

TITLE: Signing in with Discord OAuth using Supabase in Kotlin
DESCRIPTION: This snippet illustrates how to implement Discord OAuth sign-in using the Supabase Kotlin client. It uses the signInWith method, passing Discord as the provider.

LANGUAGE: kotlin
CODE:
suspend fun signInWithDiscord() {
	supabase.auth.signInWith(Discord)
}

----------------------------------------

TITLE: Implementing Edge Function for Embedding Generation
DESCRIPTION: TypeScript implementation of the Edge Function that processes embedding jobs using OpenAI's API and updates the database.

LANGUAGE: typescript
CODE:
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
import OpenAI from 'jsr:@openai/openai'
import { z } from 'npm:zod'
import postgres from 'https://deno.land/x/postgresjs@v3.4.5/mod.js'

const openai = new OpenAI({
  apiKey: Deno.env.get('OPENAI_API_KEY'),
})

const sql = postgres(Deno.env.get('SUPABASE_DB_URL')!)

const jobSchema = z.object({
  jobId: z.number(),
  id: z.number(),
  schema: z.string(),
  table: z.string(),
  contentFunction: z.string(),
  embeddingColumn: z.string(),
})

// [Additional implementation details omitted for brevity]

----------------------------------------

TITLE: Finding API Requests by Region in SQL
DESCRIPTION: SQL query to count API requests by region, helping identify geographic patterns in API usage.

LANGUAGE: sql
CODE:
select
  path,
  region,
  count(region) as region_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(cf) as cf
where
  regexp_contains(path, '^/rest/v1/')
group by region, path
order by requester_region_count;

----------------------------------------

TITLE: Implementing MFA Challenge and Verify in React
DESCRIPTION: This code snippet demonstrates how to implement the MFA challenge and verification process in a React component. It includes functions for starting the challenge and verifying the code.

LANGUAGE: tsx
CODE:
function AuthMFA() {
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')
  const [factorId, setFactorId] = useState('')
  const [challengeId, setChallengeId] = useState('')
  const [phoneNumber, setPhoneNumber] = useState('')

  const startChallenge = async () => {
    setError('')
    try {
      const factors = await supabase.auth.mfa.listFactors()
      if (factors.error) {
        throw factors.error
      }

      const phoneFactor = factors.data.phone[0]

      if (!phoneFactor) {
        throw new Error('No phone factors found!')
      }

      const factorId = phoneFactor.id
      setFactorId(factorId)
      setPhoneNumber(phoneFactor.phone)

      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      setChallengeId(challenge.data.id)
    } catch (error) {
      setError(error.message)
    }
  }

  const verifyCode = async () => {
    setError('')
    try {
      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }
    } catch (error) {
      setError(error.message)
    }
  }

  return (
    <>
      <div>Please enter the code sent to your phone.</div>
      {phoneNumber && <div>Phone number: {phoneNumber}</div>}
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      {!challengeId ? (
        <input type="button" value="Start Challenge" onClick={startChallenge} />
      ) : (
        <input type="button" value="Verify Code" onClick={verifyCode} />
      )}
    </>
  )
}

----------------------------------------

TITLE: Applying Database Migrations in Supabase CLI
DESCRIPTION: Resets the database to the current migrations using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase db reset

----------------------------------------

TITLE: Docker Compose IPv6 Network Configuration
DESCRIPTION: YAML configuration for enabling IPv6 in Docker Compose with subnet and gateway settings

LANGUAGE: yaml
CODE:
networks:
  default:
    enable_ipv6: true
    ipam:
      config:
        - subnet: fd00:c16a:601e::/80
          gateway: fd00:c16a:601e::1

----------------------------------------

TITLE: Importing Navigation Menu Components in React
DESCRIPTION: This code snippet demonstrates how to import various Navigation Menu components from a local UI components directory.

LANGUAGE: tsx
CODE:
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuIndicator,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
} from '@/components/ui/navigation-menu'

----------------------------------------

TITLE: Initializing Sentry with Supabase Client Constructor
DESCRIPTION: TypeScript code for initializing Sentry with the Supabase Client constructor. It sets up the Sentry client with the Supabase integration.

LANGUAGE: ts
CODE:
import * as Sentry from '@sentry/browser'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
  ],
})

----------------------------------------

TITLE: Querying FDW Usage Statistics
DESCRIPTION: Shows how to query the wrapper statistics table to access usage metrics and performance data.

LANGUAGE: sql
CODE:
select *
from extensions.wrappers_fdw_stats;

----------------------------------------

TITLE: Permanently Deleting Messages from a Queue in SQL
DESCRIPTION: The `pgmq_public.delete` function permanently removes a Message from the specified Queue. It takes the queue name and the message ID as parameters.

LANGUAGE: sql
CODE:
pgmq_public.delete(queue_name, message_id)

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in TypeScript
DESCRIPTION: Configure Supabase client with Auth0 authentication in TypeScript, using access tokens or ID tokens for authorization.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import Auth0Client from '@auth0/auth0-spa-js'

const auth0 = new Auth0Client({
  domain: '<AUTH0_DOMAIN>',
  clientId: '<AUTH0_CLIENT_ID>',
  authorizationParams: {
    redirect_uri: '<MY_CALLBACK_URL>',
  },
})

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    const accessToken = await auth0.getTokenSilently()

    // Alternatively you can use (await auth0.getIdTokenClaims()).__raw to
    // use an ID token instead.

    return accessToken
  },
})

----------------------------------------

TITLE: Starting Laravel Development Server
DESCRIPTION: Launches the Laravel development server for local testing.

LANGUAGE: bash
CODE:
php artisan serve

----------------------------------------

TITLE: Querying Auth Errors in Supabase Log Explorer
DESCRIPTION: SQL query to find Auth-related errors in the Supabase Log Explorer. It selects relevant information from auth_logs, filtering for 500 status errors or errors/fatal level logs.

LANGUAGE: sql
CODE:
select
  cast(metadata.timestamp as datetime) as timestamp,
  msg,
  event_message,
  status,
  path,
  level
from auth_logs
cross join unnest(metadata) as metadata
where
   -- find all errors
   status::INT = 500
    OR
  regexp_contains(level, 'error|fatal')
order by timestamp

----------------------------------------

TITLE: Initializing SvelteKit Project and Installing Dependencies
DESCRIPTION: Commands to create a new SvelteKit project, install dependencies, and set up environment variables for Supabase integration.

LANGUAGE: bash
CODE:
npm create svelte@latest supabase-sveltekit
cd supabase-sveltekit
npm install
npm install @supabase/supabase-js

----------------------------------------

TITLE: Creating a Table with Vector Column in SQL
DESCRIPTION: SQL command to create a table with a vector column for storing embeddings. The vector size is specified to match the output of the embedding model.

LANGUAGE: sql
CODE:
create table documents (
  id serial primary key,
  title text not null,
  body text not null,
  embedding vector(384)
);

----------------------------------------

TITLE: Updating User's Phone Number in Swift
DESCRIPTION: Use the supabase.auth.updateUser method to update a logged-in user's phone number in Swift. The user will receive an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: swift
CODE:
try await supabase.auth.updateUser(
  user: UserAttributes(
    phone: "123456789"
  )
)

----------------------------------------

TITLE: Importing Alert Dialog Components
DESCRIPTION: TypeScript code showing how to import all necessary alert dialog components from the UI components directory.

LANGUAGE: tsx
CODE:
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog'

----------------------------------------

TITLE: Connecting to Postgres with psql (Shell)
DESCRIPTION: This snippet demonstrates the error message received when attempting to connect to a Postgres database that has reached its connection limit. It shows the use of psql command-line tool to connect to a remote Postgres instance.

LANGUAGE: shell
CODE:
$ psql -U postgres -h ...
FATAL: remaining connection slots are reserved for non-replication superuser connections

----------------------------------------

TITLE: Running Discord Bot Function Locally with Supabase CLI and ngrok
DESCRIPTION: This command demonstrates how to run the Discord bot function locally using the Supabase CLI and expose it using ngrok for testing purposes.

LANGUAGE: bash
CODE:
supabase functions serve discord-bot --no-verify-jwt --env-file ./supabase/.env.local
ngrok http 54321

----------------------------------------

TITLE: Querying Cache Hit Rates in PostgreSQL
DESCRIPTION: SQL query to check the index and table hit rates in PostgreSQL. This helps determine if the database needs more memory or if indexes are being used effectively.

LANGUAGE: sql
CODE:
select
  'index hit rate' as name,
  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) as ratio
from pg_statio_user_indexes
union all
select
  'table hit rate' as name,
  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) as ratio
from pg_statio_user_tables;

----------------------------------------

TITLE: Installing Menubar Component Dependencies
DESCRIPTION: Command to install the required dependencies for the menubar component manually.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-menubar

----------------------------------------

TITLE: Creating Custom Schema in SQL
DESCRIPTION: SQL command to create a custom schema in the database. Replace 'myschema' with your desired schema name.

LANGUAGE: sql
CODE:
CREATE SCHEMA myschema;

----------------------------------------

TITLE: Scheduled Function Implementation
DESCRIPTION: Example demonstrating how to implement periodic task execution using Edge Runtime's Main Worker functionality with interval-based execution.

LANGUAGE: jsx
CODE:
const interval = 2 * 60 * 1000 // 2 minutes
try {
  const worker = await EdgeRuntime.userWorkers.create({
    servicePath,
    memoryLimitMb,
    workerTimeoutMs,
    noModuleCache,
    importMapPath,
    envVars,
  })
  const req = new Request('http://localhost/scheduled-job')
  setInterval(() => worker.fetch(req), interval)
} catch (e) {
  console.error(e)
}

----------------------------------------

TITLE: Importing Collapsible Component in React
DESCRIPTION: Example of how to import the Collapsible component and its subcomponents in a React application.

LANGUAGE: tsx
CODE:
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'

----------------------------------------

TITLE: User-Specific Folder Upload Policy
DESCRIPTION: SQL policy allowing authenticated users to upload files to their user-specific folder based on auth.uid().

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = (select auth.uid()::text)
);

----------------------------------------

TITLE: Enabling pg_hashids Extension in Supabase SQL
DESCRIPTION: SQL commands to enable and disable the pg_hashids extension in Supabase. It's recommended to create the extension in a separate schema like 'extensions' to keep the public schema clean.

LANGUAGE: sql
CODE:
-- Enable the "pg_hashids" extension
create extension pg_hashids with schema extensions;

-- Disable the "pg_hashids" extension
drop extension if exists pg_hashids;

----------------------------------------

TITLE: Downloading a File using Dart
DESCRIPTION: This Dart code demonstrates how to download a file from the 'public' bucket using the Supabase client library.

LANGUAGE: dart
CODE:
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .from('public')
      .download('example.txt');
}

----------------------------------------

TITLE: React Email Template for Magic Link
DESCRIPTION: React component that defines the email template for magic link authentication emails

LANGUAGE: tsx
CODE:
import {
  Body,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Text,
} from 'npm:@react-email/components@0.0.22'
import * as React from 'npm:react@18.3.1'

interface MagicLinkEmailProps {
  supabase_url: string
  email_action_type: string
  redirect_to: string
  token_hash: string
  token: string
}

export const MagicLinkEmail = ({
  token,
  supabase_url,
  email_action_type,
  redirect_to,
  token_hash,
}: MagicLinkEmailProps) => (
  <Html>
    <Head />
    <Preview>Log in with this magic link</Preview>
    <Body style={main}>
      <Container style={container}>
        <Heading style={h1}>Login</Heading>
        <Link
          href={`${supabase_url}/auth/v1/verify?token=${token_hash}&type=${email_action_type}&redirect_to=${redirect_to}`}
          target="_blank"
          style={{
            ...link,
            display: 'block',
            marginBottom: '16px',
          }}
        >
          Click here to log in with this magic link
        </Link>
        <Text style={{ ...text, marginBottom: '14px' }}>
          Or, copy and paste this temporary login code:
        </Text>
        <code style={code}>{token}</code>
        <Text
          style={{
            ...text,
            color: '#ababab',
            marginTop: '14px',
            marginBottom: '16px',
          }}
        >
          If you didn't try to login, you can safely ignore this email.
        </Text>
        <Text style={footer}>
          <Link
            href="https://demo.vercel.store/"
            target="_blank"
            style={{ ...link, color: '#898989' }}
          >
            ACME Corp
          </Link>
          , the famouse demo corp.
        </Text>
      </Container>
    </Body>
  </Html>
)

----------------------------------------

TITLE: React Email Template for Magic Link
DESCRIPTION: React component that defines the email template for magic link authentication emails

LANGUAGE: tsx
CODE:
import {
  Body,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Text,
} from 'npm:@react-email/components@0.0.22'
import * as React from 'npm:react@18.3.1'

interface MagicLinkEmailProps {
  supabase_url: string
  email_action_type: string
  redirect_to: string
  token_hash: string
  token: string
}

export const MagicLinkEmail = ({
  token,
  supabase_url,
  email_action_type,
  redirect_to,
  token_hash,
}: MagicLinkEmailProps) => (
  <Html>
    <Head />
    <Preview>Log in with this magic link</Preview>
    <Body style={main}>
      <Container style={container}>
        <Heading style={h1}>Login</Heading>
        <Link
          href={`${supabase_url}/auth/v1/verify?token=${token_hash}&type=${email_action_type}&redirect_to=${redirect_to}`}
          target="_blank"
          style={{
            ...link,
            display: 'block',
            marginBottom: '16px',
          }}
        >
          Click here to log in with this magic link
        </Link>
        <Text style={{ ...text, marginBottom: '14px' }}>
          Or, copy and paste this temporary login code:
        </Text>
        <code style={code}>{token}</code>
        <Text
          style={{
            ...text,
            color: '#ababab',
            marginTop: '14px',
            marginBottom: '16px',
          }}
        >
          If you didn't try to login, you can safely ignore this email.
        </Text>
        <Text style={footer}>
          <Link
            href="https://demo.vercel.store/"
            target="_blank"
            style={{ ...link, color: '#898989' }}
          >
            ACME Corp
          </Link>
          , the famouse demo corp.
        </Text>
      </Container>
    </Body>
  </Html>
)

----------------------------------------

TITLE: Initializing Ionic React App and Installing Dependencies
DESCRIPTION: Commands to create a new Ionic React app and install the Supabase JavaScript client.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli
ionic start supabase-ionic-react blank --type react
cd supabase-ionic-react
npm install @supabase/supabase-js

----------------------------------------

TITLE: Row Level Security Query in Supabase Edge Function
DESCRIPTION: Demonstrates how to perform a database query with Row Level Security (RLS) enforcement in an authenticated context. Fetches user data and queries a 'profiles' table with RLS policies applied.

LANGUAGE: javascript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data: userData } = await supabaseClient.auth.getUser(token);
  const { data, error } = await supabaseClient.from('profiles').select('*');

  return new Response(JSON.stringify({ data }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200,
  })

})

----------------------------------------

TITLE: Creating Custom Logging Function for pg_cron in PostgreSQL
DESCRIPTION: PL/pgSQL function template for adding custom logging to pg_cron jobs with error handling.

LANGUAGE: sql
CODE:
create or replace function log_example()
returns void
language plpgsql
as $$
begin

     -- Logging start of function
     raise log 'logging start of cron function call: (%)', (select now());

    -- INSERT LOGIC HERE

     -- Logging end of function
     raise log 'logging end of cron function call: (%)', (select now());

    exception
     -- Handle exceptions here if needed
     when others then
         raise exception 'An error occurred in cron function <insert name here>. ERROR MESSAGE: %', sqlerrm;

end;
$$;

----------------------------------------

TITLE: Setting up Supabase API Keys
DESCRIPTION: Configure Supabase API key and URL in local.properties file

LANGUAGE: kotlin
CODE:
SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
SUPABASE_URL=YOUR_SUPABASE_URL

----------------------------------------

TITLE: Starting Supabase Stack
DESCRIPTION: Commands to start the local Supabase stack using different package managers. This launches all necessary services for local development.

LANGUAGE: sh
CODE:
npx supabase start

LANGUAGE: sh
CODE:
yarn supabase start

LANGUAGE: sh
CODE:
pnpm supabase start

LANGUAGE: sh
CODE:
supabase start

----------------------------------------

TITLE: Initializing Vue 3 Project with Vite
DESCRIPTION: Commands to create a new Vue 3 project using Vite and install Supabase dependencies.

LANGUAGE: bash
CODE:
npm create vite@latest supabase-vue-3 --template vue

cd supabase-vue-3

npm install @supabase/supabase-js

----------------------------------------

TITLE: Creating Migration for Adding Column in Supabase CLI
DESCRIPTION: Generates a new migration file for adding a department column to the employees table.

LANGUAGE: bash
CODE:
supabase migration new add_department_to_employees_table

----------------------------------------

TITLE: Regional Invocation Examples
DESCRIPTION: Examples showing how to invoke Edge Functions in specific regions using both cURL and JavaScript/Supabase client. Demonstrates setting the x-region header for regional execution control.

LANGUAGE: bash
CODE:
curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --header 'x-region: eu-west-3' \
  --data '{ "name":"Functions" }'

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Create a single supabase client for interacting with your database
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

// https://supabase.com/docs/reference/javascript/functions-invoke
const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
  headers: { 'x-region': 'eu-west-3' },
})

----------------------------------------

TITLE: Initializing Supabase Client with Fetch-Retry
DESCRIPTION: Basic setup to create a Supabase client instance with fetch-retry integration for automatic retries.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import fetchRetry from 'fetch-retry'

// Wrap the global fetch with fetch-retry
const fetchWithRetry = fetchRetry(fetch)

// Create a Supabase client instance with the custom fetch
const supabase = createClient('https://your-supabase-url.supabase.co', 'your-anon-key', {
  global: {
    fetch: fetchWithRetry,
  },
})

----------------------------------------

TITLE: Signing out using Supabase in Flutter
DESCRIPTION: This snippet shows how to sign out a user using the Supabase Flutter client. It calls the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Installing Resizable Component Dependencies
DESCRIPTION: Command to install the required dependencies for the Resizable component manually.

LANGUAGE: bash
CODE:
npm install react-resizable-panels

----------------------------------------

TITLE: Enabling PGMQ Extension in SQL
DESCRIPTION: Creates the pgmq extension in a Postgres database.

LANGUAGE: sql
CODE:
create extension pgmq;

----------------------------------------

TITLE: Creating Storage Bucket for Store Images
DESCRIPTION: SQL commands to create a storage bucket for store images and set up policies for public access.

LANGUAGE: sql
CODE:
insert into storage.buckets (id, name)
values ('stores', 'stores');

CREATE POLICY "Select images" ON storage.objects FOR SELECT TO public USING (bucket_id = 'stores');
CREATE POLICY "Upload images" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'stores');

----------------------------------------

TITLE: Importing Toggle Component
DESCRIPTION: Example of importing the Toggle component from the components directory.

LANGUAGE: tsx
CODE:
import { Toggle } from '@/components/ui/toggle'

----------------------------------------

TITLE: Using Navigation Menu with Next.js Link Component
DESCRIPTION: This example demonstrates how to use the Navigation Menu with Next.js Link component, applying the correct trigger styles.

LANGUAGE: tsx
CODE:
<NavigationMenuItem>
  <Link href="/docs" legacyBehavior passHref>
    <NavigationMenuLink className={navigationMenuTriggerStyle()}>Documentation</NavigationMenuLink>
  </Link>
</NavigationMenuItem>

----------------------------------------

TITLE: Implementing image search from text query
DESCRIPTION: Python function to perform image search using a text query, leveraging CLIP model and Supabase Vector.

LANGUAGE: python
CODE:
def search():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=512)

    # Load CLIP model
    model = SentenceTransformer('clip-ViT-B-32')
    # Encode text query
    query_string = "a bike in front of a red brick wall"
    text_emb = model.encode(query_string)

    # query the collection filtering metadata for "type" = "jpg"
    results = images.query(
        data=text_emb,                      # required
        limit=1,                            # number of records to return
        filters={"type": {"$eq": "jpg"}},   # metadata filters
    )
    result = results[0]
    print(result)
    plt.title(result)
    image = mpimg.imread('./images/' + result)
    plt.imshow(image)
    plt.show()

----------------------------------------

TITLE: Connecting to Local Supabase Database
DESCRIPTION: Commands for connecting to a locally restored Supabase database using psql and restarting the development stack.

LANGUAGE: sh
CODE:
psql 'postgresql://postgres:postgres@localhost:54322/postgres'

supabase stop
supabase start

----------------------------------------

TITLE: Running Supabase Edge Function locally
DESCRIPTION: Commands to start Supabase and serve the Edge Function locally for testing.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --no-verify-jwt --env-file supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Creating Supabase Service in Ionic Angular
DESCRIPTION: Implement a SupabaseService to initialize the Supabase client and handle API communications.

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core'
import { LoadingController, ToastController } from '@ionic/angular'
import { AuthChangeEvent, createClient, Session, SupabaseClient } from '@supabase/supabase-js'
import { environment } from '../environments/environment'

export interface Profile {
  username: string
  website: string
  avatar_url: string
}

@Injectable({
  providedIn: 'root',
})
export class SupabaseService {
  private supabase: SupabaseClient

  constructor(
    private loadingCtrl: LoadingController,
    private toastCtrl: ToastController
  ) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  get user() {
    return this.supabase.auth.getUser().then(({ data }) => data?.user)
  }

  get session() {
    return this.supabase.auth.getSession().then(({ data }) => data?.session)
  }

  get profile() {
    return this.user
      .then((user) => user?.id)
      .then((id) =>
        this.supabase.from('profiles').select(`username, website, avatar_url`).eq('id', id).single()
      )
  }

  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {
    return this.supabase.auth.onAuthStateChange(callback)
  }

  signIn(email: string) {
    return this.supabase.auth.signInWithOtp({ email })
  }

  signOut() {
    return this.supabase.auth.signOut()
  }

  async updateProfile(profile: Profile) {
    const user = await this.user
    const update = {
      ...profile,
      id: user?.id,
      updated_at: new Date(),
    }

    return this.supabase.from('profiles').upsert(update)
  }

  downLoadImage(path: string) {
    return this.supabase.storage.from('avatars').download(path)
  }

  uploadAvatar(filePath: string, file: File) {
    return this.supabase.storage.from('avatars').upload(filePath, file)
  }

  async createNotice(message: string) {
    const toast = await this.toastCtrl.create({ message, duration: 5000 })
    await toast.present()
  }

  createLoader() {
    return this.loadingCtrl.create()
  }
}

----------------------------------------

TITLE: Querying Connection Status in PostgreSQL
DESCRIPTION: SQL query to retrieve detailed information about database connections including SSL status, connected roles, application names, and connection states using pg_stat_activity and pg_stat_ssl views.

LANGUAGE: sql
CODE:
SELECT
   pg_stat_activity.pid,
   ssl AS ssl_connection,
   datname AS database,
   usename AS connected_role,
   application_name,
   client_addr,
   query,
   query_start,
   state,
   backend_start
FROM pg_stat_ssl
JOIN pg_stat_activity
 ON pg_stat_ssl.pid = pg_stat_activity.pid;

----------------------------------------

TITLE: Implementing Sentry SDK in Supabase Edge Function
DESCRIPTION: Add the Sentry Deno SDK to a Supabase Edge Function to handle exceptions and send them to Sentry. This includes initializing Sentry, setting custom tags, and implementing error handling within the function.

LANGUAGE: tsx
CODE:
import * as Sentry from 'https://deno.land/x/sentry/index.mjs'

Sentry.init({
  // https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/#where-to-find-your-dsn
  dsn: SENTRY_DSN,
  defaultIntegrations: false,
  // Performance Monitoring
  tracesSampleRate: 1.0,
  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
})

// Set region and execution_id as custom tags
Sentry.setTag('region', Deno.env.get('SB_REGION'))
Sentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))

Deno.serve(async (req) => {
  try {
    const { name } = await req.json()
    // This will throw, as `name` in our example call will be `undefined`
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (e) {
    Sentry.captureException(e)
    return new Response(JSON.stringify({ msg: 'error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: Svelte component for handling user authentication with magic link login functionality.

LANGUAGE: html
CODE:
<script lang="ts">
  import { supabase } from '../supabaseClient'

  let loading = false
  let email = ''

  const handleLogin = async () => {
    try {
      loading = true
      const { error } = await supabase.auth.signInWithOtp({ email })
      if (error) throw error
      alert('Check your email for login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      loading = false
    }
  }
</script>

<div class="row flex-center flex">
  <div class="col-6 form-widget" aria-live="polite">
    <h1 class="header">Supabase + Svelte</h1>
    <p class="description">Sign in via magic link with your email below</p>
    <form class="form-widget" on:submit|preventDefault="{handleLogin}">
      <div>
        <label for="email">Email</label>
        <input
          id="email"
          class="inputField"
          type="email"
          placeholder="Your email"
          bind:value="{email}"
        />
      </div>
      <div>
        <button type="submit" class="button block" aria-live="polite" disabled="{loading}">
          <span>{loading ? 'Loading' : 'Send magic link'}</span>
        </button>
      </div>
    </form>
  </div>
</div>

----------------------------------------

TITLE: Defining Table Columns with TanStack Table in TypeScript
DESCRIPTION: Creates column definitions for a payment data table using TanStack Table's ColumnDef type.

LANGUAGE: typescript
CODE:
'use client'

import { ColumnDef } from '@tanstack/react-table'

export type Payment = {
  id: string
  amount: number
  status: 'pending' | 'processing' | 'success' | 'failed'
  email: string
}

export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: 'status',
    header: 'Status',
  },
  {
    accessorKey: 'email',
    header: 'Email',
  },
  {
    accessorKey: 'amount',
    header: 'Amount',
  },
]

----------------------------------------

TITLE: Querying ClickHouse from Postgres using Foreign Data Wrapper
DESCRIPTION: This snippet demonstrates how to create a foreign table in Postgres to query data from a ClickHouse database. It shows the basic setup and a simple query example.

LANGUAGE: sql
CODE:
-- Connect Postgres to your ClickHouse database:
create foreign table user_analytics (
  id bigint,
  user_id bigint,
  event text
)
server clickhouse_server
options ( table 'UserAnalytics' );

-- Query your ClickHouse instance from Postgres:
select * from user_analytics where user_id = 1;

----------------------------------------

TITLE: Querying Foreign Tables
DESCRIPTION: Basic SQL query to select data from a foreign table.

LANGUAGE: sql
CODE:
select * from "<foreign_table>"

----------------------------------------

TITLE: Renaming Case-Sensitive Table SQL
DESCRIPTION: SQL command to rename a case-sensitive table to lowercase for better compatibility.

LANGUAGE: sql
CODE:
alter table "Table_name"
rename to table_name;

----------------------------------------

TITLE: Importing Select Component
DESCRIPTION: TypeScript code showing how to import the necessary Select component parts from the UI components directory.

LANGUAGE: tsx
CODE:
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'

----------------------------------------

TITLE: Creating Basic Insert Policy in Supabase Storage
DESCRIPTION: Basic SQL policy that allows unrestricted insert operations on storage.objects table.

LANGUAGE: sql
CODE:
create policy "policy_name"
ON storage.objects
for insert with check (
  true
);

----------------------------------------

TITLE: Creating Database Functions for Geo-Queries
DESCRIPTION: SQL commands to create two database functions: 'nearby_stores' for finding stores near a given location, and 'stores_in_view' for finding stores within a bounding box.

LANGUAGE: sql
CODE:
create or replace function nearby_stores(lat float, long float)
returns table (id public.stores.id%TYPE, name public.stores.name%TYPE, description public.stores.description%TYPE, lat float, long float, dist_meters float)
language sql
as $$
  select id, name, description, st_y(location::geometry) as lat, st_x(location::geometry) as long, st_distance(location, st_point(long, lat)::geography) as dist_meters
  from public.stores
  order by location <-> st_point(long, lat)::geography;
$$;

create or replace function stores_in_view(min_lat float, min_long float, max_lat float, max_long float)
returns table (id public.stores.id%TYPE, name public.stores.name%TYPE, lat float, long float)
language sql
as $$
	select id, name, ST_Y(location::geometry) as lat, ST_X(location::geometry) as long
	from public.stores
	where location && ST_SetSRID(ST_MakeBox2D(ST_Point(min_long, min_lat), ST_Point(max_long, max_lat)),4326)
$$;

----------------------------------------

TITLE: Implementing Flame Game Class
DESCRIPTION: Dart code for the MyGame class, which extends FlameGame and handles game logic.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:flame/game.dart';
import 'package:flame/components.dart';
import 'package:flame/events.dart';
import 'package:flame/image_composition.dart' as flame_image;
import 'package:flame_realtime_shooting/game/bullet.dart';
import 'package:flame_realtime_shooting/game/player.dart';
import 'package:flutter/material.dart';

class MyGame extends FlameGame with PanDetector, HasCollisionDetection {
  MyGame({
    required this.onGameOver,
    required this.onGameStateUpdate,
  });

  static const _initialHealthPoints = 100;

  /// Callback to notify the parent when the game ends.
  final void Function(bool didWin) onGameOver;

  /// Callback for when the game state updates.
  final void Function(
    Vector2 position,
    int health,
  ) onGameStateUpdate;

  /// `Player` instance of the player
  late Player _player;

  /// `Player` instance of the opponent
  late Player _opponent;

  bool isGameOver = true;

  int _playerHealthPoint = _initialHealthPoints;

  late final flame_image.Image _playerBulletImage;
  late final flame_image.Image _opponentBulletImage;

  @override
  Color backgroundColor() {
    return Colors.transparent;
  }

  @override
  Future<void>? onLoad() async {
    final playerImage = await images.load('player.png');
    _player = Player(isMe: true);
    final spriteSize = Vector2.all(Player.radius * 2);
    _player.add(SpriteComponent(sprite: Sprite(playerImage), size: spriteSize));
    add(_player);

    final opponentImage = await images.load('opponent.png');
    _opponent = Player(isMe: false);
    _opponent.add(SpriteComponent.fromImage(opponentImage, size: spriteSize));
    add(_opponent);

    _playerBulletImage = await images.load('player-bullet.png');
    _opponentBulletImage = await images.load('opponent-bullet.png');

    await super.onLoad();
  }

  @override
  void onPanUpdate(DragUpdateInfo info) {
    _player.move(info.delta.global);
    final mirroredPosition = _player.getMirroredPercentPosition();
    onGameStateUpdate(mirroredPosition, _playerHealthPoint);
    super.onPanUpdate(info);
  }

  @override
  void update(double dt) {
    super.update(dt);
    if (isGameOver) {
      return;
    }
    for (final child in children) {
      if (child is Bullet && child.hasBeenHit && !child.isMine) {
        _playerHealthPoint = _playerHealthPoint - child.damage;
        final mirroredPosition = _player.getMirroredPercentPosition();
        onGameStateUpdate(mirroredPosition, _playerHealthPoint);
        _player.updateHealth(_playerHealthPoint / _initialHealthPoints);
      }
    }
    if (_playerHealthPoint <= 0) {
      endGame(false);
    }
  }

  void startNewGame() {
    isGameOver = false;
    _playerHealthPoint = _initialHealthPoints;

    for (final child in children) {
      if (child is Player) {
        child.position = child.initialPosition;
      } else if (child is Bullet) {
        child.removeFromParent();
      }
    }

    _shootBullets();
  }

  /// shoots out bullets form both the player and the opponent.
  ///
  /// Calls itself every 500 milliseconds
  Future<void> _shootBullets() async {
    await Future.delayed(const Duration(milliseconds: 500));

    /// Player's bullet
    final playerBulletInitialPosition = Vector2.copy(_player.position)
      ..y -= Player.radius;
    final playerBulletVelocities = [
      Vector2(0, -100),
      Vector2(60, -80),
      Vector2(-60, -80),
    ];
    for (final bulletVelocity in playerBulletVelocities) {
      add((Bullet(
        isMine: true,
        velocity: bulletVelocity,
        image: _playerBulletImage,
        initialPosition: playerBulletInitialPosition,
      )));
    }

    /// Opponent's bullet
    final opponentBulletInitialPosition = Vector2.copy(_opponent.position)
      ..y += Player.radius;
    final opponentBulletVelocities = [
      Vector2(0, 100),
      Vector2(60, 80),
      Vector2(-60, 80),
    ];
    for (final bulletVelocity in opponentBulletVelocities) {
      add((Bullet(
        isMine: false,
        velocity: bulletVelocity,
        image: _opponentBulletImage,
        initialPosition: opponentBulletInitialPosition,
      )));
    }

    _shootBullets();
  }

  void updateOpponent({required Vector2 position, required int health}) {
    _opponent.position = Vector2(size.x * position.x, size.y * position.y);
    _opponent.updateHealth(health / _initialHealthPoints);
  }

  /// Called when either the player or the opponent has run out of health points
  void endGame(bool playerWon) {
    isGameOver = true;
    onGameOver(playerWon);
  }
}

----------------------------------------

TITLE: Installing Poetry via pip
DESCRIPTION: Command to install Poetry, a dependency management tool for Python, using pip.

LANGUAGE: shell
CODE:
pip install poetry

----------------------------------------

TITLE: Installing Collapsible Component via CLI
DESCRIPTION: Command to install the Collapsible component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add collapsible

----------------------------------------

TITLE: Implementing Column Visibility in DataTable with TanStack Table
DESCRIPTION: Adds column visibility toggle functionality to the DataTable component using TanStack Table's visibility API.

LANGUAGE: tsx
CODE:
import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter(
                (column) => column.getCanHide()
              )
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>{ /* ... */ }</Table>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Running Supabase CLI with npx
DESCRIPTION: This command demonstrates how to run Supabase CLI commands using npx without installation.

LANGUAGE: sh
CODE:
npx supabase <command>

----------------------------------------

TITLE: Creating Edge Function Template
DESCRIPTION: Command to generate a new edge function template in Supabase

LANGUAGE: bash
CODE:
supabase functions new hello-world

----------------------------------------

TITLE: Creating Test File for Supabase CLI Testing
DESCRIPTION: Creates a new SQL file for writing database tests using pgTAP.

LANGUAGE: bash
CODE:
touch ./supabase/tests/database/hello_world.test.sql

----------------------------------------

TITLE: Setting up environment variables for Upstash Redis
DESCRIPTION: Copy the example environment file to set up Upstash Redis credentials.

LANGUAGE: bash
CODE:
cp supabase/functions/upstash-redis-counter/.env.example supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Installing Supabase Python Client with PIP
DESCRIPTION: This command installs the Supabase Python client library using PIP. It requires Python version 3.8 or higher.

LANGUAGE: sh
CODE:
pip install supabase

----------------------------------------

TITLE: Initializing Svelte App with Vite
DESCRIPTION: Commands to create a new Svelte TypeScript project using Vite and install the Supabase client dependency.

LANGUAGE: bash
CODE:
npm create vite@latest supabase-svelte -- --template svelte-ts
cd supabase-svelte
npm install
npm install @supabase/supabase-js

----------------------------------------

TITLE: Deploying and Testing Function
DESCRIPTION: Commands for running the function locally and deploying it to Supabase production environment

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --no-verify-jwt --env-file .env

LANGUAGE: bash
CODE:
supabase functions deploy resend --no-verify-jwt

----------------------------------------

TITLE: Creating Environment File for Supabase
DESCRIPTION: Creates a .env file in the supabase folder and adds a custom environment variable.

LANGUAGE: bash
CODE:
echo "MY_NAME=Some_name" >> ./supabase/.env

----------------------------------------

TITLE: Implementing WebSocket Server with Node.js
DESCRIPTION: Example of creating a WebSocket server using Node.js and the ws package. Sets up a custom HTTP server and handles WebSocket connections with basic event handling.

LANGUAGE: typescript
CODE:
import { createServer } from "node:http";
import { WebSocketServer } from "npm:ws";

const server = createServer();
const wss = new WebSocketServer({ noServer: true });

wss.on("connection", ws => {
    console.log("socket opened");
    ws.on("message", (data, isBinary) => {
        if (isBinary) {
            console.log("socket message:", data);
        } else {
            console.log("socket message:", data.toString());
        }

        ws.send(new Date().toString());
    });

    ws.on("error", err => {
        console.log("socket errored:", err.message);
    });

    ws.on("close", () => console.log("socket closed"));
});

server.on("upgrade", (req, socket, head) => {
    wss.handleUpgrade(req, socket, head, ws => {
        wss.emit("connection", ws, req);
    });
});

server.listen(8080);

----------------------------------------

TITLE: Creating Login and Signup Form
DESCRIPTION: React component for a combined login and signup form using Next.js Server Actions.

LANGUAGE: jsx
CODE:
import { login, signup } from './actions'

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  )
}

----------------------------------------

TITLE: Implementing User Account Management
DESCRIPTION: React component for managing user profile data including username, website, and avatar.

LANGUAGE: jsx
CODE:
const Account = () => {
  const { client: supabase, currentUser, logOut } = useAuth()
  const [loading, setLoading] = useState(true)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  // Component implementation
}

----------------------------------------

TITLE: Using Carousel API in React
DESCRIPTION: Example of using the carousel API to access and control carousel state and behavior.

LANGUAGE: tsx
CODE:
import { type CarouselApi } from '@/components/ui/carousel'

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on('select', () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}

----------------------------------------

TITLE: Running pgloader Migration with Bash
DESCRIPTION: This Bash command executes pgloader with a specified configuration file to perform the database migration from MySQL to Supabase Postgres.

LANGUAGE: bash
CODE:
pgloader config.load

----------------------------------------

TITLE: Native iOS Google Sign-in Implementation
DESCRIPTION: Swift code for implementing native Google sign-in using GoogleSignIn-iOS package

LANGUAGE: swift
CODE:
import GoogleSignIn

class GoogleSignInViewController: UIViewController {
  func googleSignIn() async throws {
    let result = try await GIDSignIn.sharedInstance.signIn(withPresenting: self)

    guard let idToken = result.user.idToken?.tokenString else {
      print("No idToken found.")
      return
    }

    let accessToken = result.user.accessToken.tokenString

    try await supabase.auth.signInWithIdToken(
      credentials: OpenIDConnectCredentials(
        provider: .google,
        idToken: idToken,
        accessToken: accessToken
      )
    )
  }
}

----------------------------------------

TITLE: Supabase SAML Metadata Download URL
DESCRIPTION: The URL endpoint for downloading Supabase's SAML metadata file required for Azure AD SSO configuration.

LANGUAGE: plaintext
CODE:
https://alt.supabase.io/auth/v1/sso/saml/metadata?download=true

----------------------------------------

TITLE: Configuring Auth Providers for Local Development
DESCRIPTION: Example configuration in config.toml for enabling GitHub authentication locally.

LANGUAGE: bash
CODE:
[auth.external.github]
enabled = true
client_id = "env(SUPABASE_AUTH_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GITHUB_SECRET)"
redirect_uri = "http://localhost:54321/auth/v1/callback"

----------------------------------------

TITLE: Creating a Next.js App with Supabase Template
DESCRIPTION: This command uses create-next-app to scaffold a new Next.js application with Supabase integration. The template includes server-side cookie-based Auth, TypeScript, and Tailwind CSS.

LANGUAGE: sh
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Implementing Cloudflare Turnstile Validation
DESCRIPTION: TypeScript implementation of the Edge Function that handles Turnstile token validation. Includes CORS support, IP extraction, and verification through Cloudflare's API.

LANGUAGE: typescript
CODE:
import { corsHeaders } from '../_shared/cors.ts'

console.log('Hello from Cloudflare Trunstile!')

function ips(req: Request) {
  return req.headers.get('x-forwarded-for')?.split(/\s*,\s*/)
}

Deno.serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  const { token } = await req.json()
  const clientIps = ips(req) || ['']
  const ip = clientIps[0]

  // Validate the token by calling the
  // "/siteverify" API endpoint.
  let formData = new FormData()
  formData.append('secret', Deno.env.get('CLOUDFLARE_SECRET_KEY') ?? '')
  formData.append('response', token)
  formData.append('remoteip', ip)

  const url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify'
  const result = await fetch(url, {
    body: formData,
    method: 'POST',
  })

  const outcome = await result.json()
  console.log(outcome)
  if (outcome.success) {
    return new Response('success', { headers: corsHeaders })
  }
  return new Response('failure', { headers: corsHeaders })
})

----------------------------------------

TITLE: Rebasing New Migrations
DESCRIPTION: Bash commands to handle rebasing local schema changes when new migrations are merged to the main branch.

LANGUAGE: bash
CODE:
git pull
supabase migration new dev_A
# Assume the new file is: supabase/migrations/<t+2>_dev_A.sql
mv <time>_dev_A.sql <t+2>_dev_A.sql
supabase db reset

----------------------------------------

TITLE: Deploying Turnstile Edge Function
DESCRIPTION: Commands for deploying the Edge Function and setting the required Cloudflare secret key

LANGUAGE: bash
CODE:
supabase functions deploy cloudflare-turnstile
supabase secrets set CLOUDFLARE_SECRET_KEY=your_secret_key

----------------------------------------

TITLE: Replacing auth.email() with auth.jwt() in Supabase RLS
DESCRIPTION: Demonstrates the migration from the deprecated auth.email() function to the more flexible auth.jwt() function for email-based authentication in RLS policies. The new method provides access to the full JWT token for more comprehensive authentication options.

LANGUAGE: sql
CODE:
- DEPRECATED
create policy "User can view their profile."
on profiles for select using (
  auth.email() = email
);

-- RECOMMENDED
create policy "User can view their profile."
on profiles for select using (
  (auth.jwt() ->> 'email') = email
);

----------------------------------------

TITLE: Connecting to Supabase PostgreSQL Database Directly
DESCRIPTION: This snippet shows the connection string format for directly connecting to a Supabase PostgreSQL database. It includes placeholders for the password and project reference.

LANGUAGE: md
CODE:
postgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres

----------------------------------------

TITLE: Using Tabs Component in React
DESCRIPTION: Example of how to use the Tabs component in a React application, including TabsList, TabsTrigger, and TabsContent.

LANGUAGE: tsx
CODE:
<Tabs defaultValue="account" className="w-[400px]">
  <TabsList>
    <TabsTrigger value="account">Account</TabsTrigger>
    <TabsTrigger value="password">Password</TabsTrigger>
  </TabsList>
  <TabsContent value="account">Make changes to your account here.</TabsContent>
  <TabsContent value="password">Change your password here.</TabsContent>
</Tabs>

----------------------------------------

TITLE: Adding Messages to a Queue with Optional Delay in SQL
DESCRIPTION: The `pgmq_public.send` function adds a Message to the specified Queue, with an optional delay for visibility. It takes the queue name, message payload, and an optional sleep time in seconds as parameters.

LANGUAGE: sql
CODE:
pgmq_public.send(queue_name, message, sleep_seconds)

----------------------------------------

TITLE: Setting OpenAI API Key for LlamaIndex Integration
DESCRIPTION: Code to set up the OpenAI API key as an environment variable for LlamaIndex usage

LANGUAGE: python
CODE:
import os
os.environ['OPENAI_API_KEY'] = "[your_openai_api_key]"

----------------------------------------

TITLE: JavaScript Supabase Client Integration
DESCRIPTION: JavaScript code using Supabase client library to query Stripe products data.

LANGUAGE: jsx
CODE:
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://xyzcompany.supabase.co'
const SUPABASE_KEY = 'public-anon-key'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)

const { data: stripeCustomers, error } = supabase
  .from('products')
  .select('id, name, description, default_price')
  .limit(10)

----------------------------------------

TITLE: Input OTP with Separator
DESCRIPTION: Shows how to use the InputOTPSeparator component to add a separator between input groups in the Input OTP component.

LANGUAGE: typescript
CODE:
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from "@/components/ui/input-otp"

...

<InputOTP maxLength={4}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={2} />
    <InputOTPSlot index={3} />
  </InputOTPGroup>
</InputOTP>

----------------------------------------

TITLE: Basic Usage of Input OTP Component
DESCRIPTION: Example of how to use the Input OTP component in a React component with 6 slots and a separator.

LANGUAGE: typescript
CODE:
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>

----------------------------------------

TITLE: Seeding Employees Data in Supabase
DESCRIPTION: SQL code to insert initial data into the employees table for seeding purposes.

LANGUAGE: sql
CODE:
insert into public.employees
  (name)
values
  ('Erlich Bachman'),
  ('Richard Hendricks'),
  ('Monica Hall');

----------------------------------------

TITLE: Array Update Operations in JavaScript
DESCRIPTION: Shows conflicting array updates from different users that illustrate the merge conflict problem.

LANGUAGE: javascript
CODE:
fruit[0] = 'Grape' // the array is ['Grape', 'Banana', 'Orange']

LANGUAGE: javascript
CODE:
fruit[0] = 'Mango' // the array is ['Mango', 'Banana', 'Orange']

----------------------------------------

TITLE: Implementing Postgres Row Level Security for Supabase User Management
DESCRIPTION: SQL commands to set up a 'profiles' table with row level security policies, realtime functionality, and storage for avatar images in a Supabase project.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');

----------------------------------------

TITLE: Revoking Public Function Execution in PostgreSQL
DESCRIPTION: Revokes the execution permission of a specific function from the PUBLIC role, removing default access for all users.

LANGUAGE: sql
CODE:
revoke execute on function foo from public;

----------------------------------------

TITLE: Setting Environment Variables for Auth in Supabase
DESCRIPTION: Example of setting environment variables for GitHub authentication in a .env file.

LANGUAGE: bash
CODE:
SUPABASE_AUTH_GITHUB_CLIENT_ID="redacted"
SUPABASE_AUTH_GITHUB_SECRET="redacted"

----------------------------------------

TITLE: Updating Next.js Middleware
DESCRIPTION: Middleware configuration to update the session using the new @supabase/ssr package.

LANGUAGE: typescript
CODE:
// middleware.ts

import { type NextRequest } from 'next/server';
import { updateSession } from '@/utils/supabase/middleware';

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};

----------------------------------------

TITLE: Adding Ktor Client Engine in Gradle Kotlin DSL
DESCRIPTION: This snippet demonstrates how to add a Ktor client engine to a Kotlin project using Gradle Kotlin DSL. The engine is required for Supabase to function properly.

LANGUAGE: kotlin
CODE:
implementation("io.ktor:ktor-client-[engine]:KTOR_VERSION")

----------------------------------------

TITLE: Scheduling Minute-by-Minute Edge Function Calls
DESCRIPTION: SQL code to schedule an Edge Function to run every minute using pg_cron. The function makes a POST request using pg_net with credentials retrieved from Vault and includes the current timestamp in the request body.

LANGUAGE: sql
CODE:
select
  cron.schedule(
    'invoke-function-every-minute',
    '* * * * *', -- every minute
    $$
    select
      net.http_post(
          url:= (select decrypted_secret from vault.decrypted_secrets where name = 'project_url') || '/functions/v1/function-name',
          headers:=jsonb_build_object(
            'Content-type', 'application/json',
            'Authorization', 'Bearer ' || (select decrypted_secret from vault.decrypted_secrets where name = 'anon_key')
          ),
          body:=concat('{"time": "', now(), '"}')::jsonb
      ) as request_id;
    $$
  );

----------------------------------------

TITLE: Importing Alert Components
DESCRIPTION: Shows how to import the Alert component and its related subcomponents from the UI components directory

LANGUAGE: tsx
CODE:
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'

----------------------------------------

TITLE: Invoking Edge Functions Locally with cURL
DESCRIPTION: Example of invoking a local Edge Function using cURL with authentication and JSON payload.

LANGUAGE: bash
CODE:
curl --request POST 'http://localhost:54321/functions/v1/hello-world' \
  --header 'Authorization: Bearer SUPABASE_ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Functions" }'

----------------------------------------

TITLE: Checking and Resetting PostgreSQL Sequence Values
DESCRIPTION: SQL commands to check current sequence values and reset them to match the highest ID in the table plus one.

LANGUAGE: sql
CODE:
postgres=# SELECT max(id) FROM <table_name>;

postgres=# SELECT nextval('{table}_{column}_seq');

LANGUAGE: sql
CODE:
SELECT setval('{table}_{column}_seq', (SELECT max(id) FROM <table_name>) + 1);

LANGUAGE: sql
CODE:
ALTER SEQUENCE '{table}_{column}_seq' RESTART WITH new_value;

----------------------------------------

TITLE: Configuring GitHub Action for Deploying Supabase Edge Functions
DESCRIPTION: This YAML configuration sets up a GitHub Action that automatically deploys a Supabase Edge Function when changes are pushed to the main branch. It uses the Supabase CLI action to run the deployment command.

LANGUAGE: yaml
CODE:
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: zdtdtxajzydjqzuktnqx

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy github-action-deploy --project-ref $PROJECT_ID

----------------------------------------

TITLE: Adding Row Selection to DataTable with TanStack Table
DESCRIPTION: Implements row selection functionality in the DataTable component using TanStack Table's row selection API.

LANGUAGE: tsx
CODE:
import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Checkbox } from "@/components/ui/checkbox"

export const columns: ColumnDef<Payment>[] = [
  {
    id: 'select',
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  // ... other columns
]

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = React.useState({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table />
      </div>
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length}{' '}
        row(s) selected.
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Multiple Seed Files in TOML
DESCRIPTION: Configuration example in TOML for specifying multiple seed files. This snippet shows how to enable seeding and define paths for individual seed files.

LANGUAGE: toml
CODE:
[db.seed]
enabled = true
sql_paths = ['./countries.sql', './cities.sql']

----------------------------------------

TITLE: Creating a PostgreSQL Table for GraphQL Schema Reflection
DESCRIPTION: This SQL snippet demonstrates how to create a table that pg_graphql will reflect into a GraphQL schema. It creates an 'account' table with id, email, and timestamp fields.

LANGUAGE: sql
CODE:
create table account (
  id serial primary key,
  email varchar(255) not null,
  created_at timestamp not null,
  updated_at timestamp not null
);

----------------------------------------

TITLE: Adding Plugins to Carousel in React
DESCRIPTION: Example of adding plugins to the carousel, such as an autoplay feature.

LANGUAGE: tsx
CODE:
import Autoplay from "embla-carousel-autoplay"

export function Example() {
  return (
    <Carousel
      plugins={[
        Autoplay({
          delay: 2000,
        }),
      ]}
    >
      // ...
    </Carousel>
  )
}

----------------------------------------

TITLE: Implementing Resumable Uploads with tus-py-client in Python
DESCRIPTION: This snippet shows how to use the tus-py-client library to implement resumable uploads for Supabase Storage in Python. It includes authentication with Supabase and configuring the TUS client for uploads.

LANGUAGE: python
CODE:
from io import BufferedReader
from tusclient import client
from supabase import create_client

def upload_file(
    bucket_name: str, file_name: str, file: BufferedReader, access_token: str
):
    # create Tus client
    my_client = client.TusClient(
        f"{supabase_url}/storage/v1/upload/resumable",
        headers={"Authorization": f"Bearer {access_token}", "x-upsert": "true"},
    )
    uploader = my_client.uploader(
        file_stream=file,
        chunk_size=(6 * 1024 * 1024),
        metadata={
            "bucketName": bucket_name,
            "objectName": file_name,
            "contentType": "image/png",
            "cacheControl": "3600",
        },
    )
    uploader.upload()

# create client and sign in
supabase = create_client(supabase_url, supabase_key)

# retrieve the current user's session for authentication
session = supabase.auth.get_session()

# open file and send file stream to upload
with open("./assets/40mb.jpg", "rb") as fs:
    upload_file(
        bucket_name="assets",
        file_name="large_file",
        file=fs,
        access_token=session.access_token,
    )

----------------------------------------

TITLE: Basic Drawer Implementation
DESCRIPTION: Example showing how to implement a basic drawer with header, description, and footer

LANGUAGE: tsx
CODE:
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant="outline">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Flutter
DESCRIPTION: Configure Supabase client with Auth0 authentication in Flutter/Dart applications.

LANGUAGE: dart
CODE:
import 'package:auth0_flutter/auth0_flutter.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  final auth0 = Auth0('AUTH0_DOMAIN', 'AUTH0_CLIENT_ID');
  await Supabase.initialize(
    url: 'https://<supabase-project>.supabase.co',
    anonKey: 'SUPABASE_ANON_KEY',
    accessToken: () async {
      final credentials = await auth0.credentialsManager.credentials();
      return credentials.accessToken;
    },
  );
  runApp(const MyApp());
}

----------------------------------------

TITLE: Creating Logical Backup in PostgreSQL using pg_dump
DESCRIPTION: Command to create a logical backup of a single PostgreSQL database using pg_dump utility. The backup is saved as SQL commands in a file.

LANGUAGE: shell
CODE:
pg_dump db_name > file_name.sql

----------------------------------------

TITLE: Creating Signed URLs with Transformations
DESCRIPTION: Shows how to create signed URLs for transformed images in private buckets with expiration times.

LANGUAGE: typescript
CODE:
supabase.storage.from('bucket').createSignedUrl('image.jpg', 60000, {
  transform: {
    width: 200,
    height: 200,
  },
})

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: Commands to initialize a Supabase project, link it to a remote project, and start the local development setup.

LANGUAGE: bash
CODE:
supabase init
supabase login
supabase link --project-ref $PROJECT_ID
supabase db pull
git add .
git commit -m "init supabase"
supabase start

----------------------------------------

TITLE: Filtering Postgres Logs by Error Severity in SQL
DESCRIPTION: This SQL query filters Postgres logs to show only events with ERROR, FATAL, or PANIC severity levels.

LANGUAGE: sql
CODE:
-- find error events
... query
where
  parsed.error_severity in ('ERROR', 'FATAL', 'PANIC')

----------------------------------------

TITLE: Handling Magic Link Authentication
DESCRIPTION: Server-side TypeScript code to handle magic link authentication in SvelteKit.

LANGUAGE: typescript
CODE:
import { fail, redirect } from '@sveltejs/kit'
import type { Actions, PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ url, locals: { safeGetSession } }) => {
  const { session } = await safeGetSession()

  if (session) {
    redirect(303, '/account')
  }

  return { url: url.origin }
}

export const actions: Actions = {
  default: async (event) => {
    const {
      url,
      request,
      locals: { supabase },
    } = event
    const formData = await request.formData()
    const email = formData.get('email') as string
    const validEmail = /^[\w-\.+]+@([\w-]+\.)+[\w-]{2,8}$/.test(email)

    if (!validEmail) {
      return fail(400, { errors: { email: 'Please enter a valid email address' }, email })
    }

    const { error } = await supabase.auth.signInWithOtp({ email })

    if (error) {
      return fail(400, {
        success: false,
        email,
        message: `There was an issue, Please contact support.`,
      })
    }

    return {
      success: true,
      message: 'Please check your email for a magic link to log into the website.',
    }
  },
}

----------------------------------------

TITLE: Authenticating with Fly CLI
DESCRIPTION: Command to log in to Fly.io using the command-line interface.

LANGUAGE: bash
CODE:
flyctl auth login

----------------------------------------

TITLE: User Teams Array Function in PostgreSQL
DESCRIPTION: Security definer function that returns an array of team IDs for the current user.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION user_teams()
    RETURNS int[] as
$$
begin
    return array( select team_id from team_user where auth.uid() = user_id);
end;
$$ language plpgsql security definer;

----------------------------------------

TITLE: Deploying Edge Function to Supabase
DESCRIPTION: Commands to link and deploy the image-blur function to a hosted Supabase project

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy image-blur

----------------------------------------

TITLE: Signing in with Twitter OAuth using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Twitter OAuth sign-in using Supabase's JavaScript client. It uses the signInWithOAuth method with 'twitter' as the provider.

LANGUAGE: javascript
CODE:
async function signInWithTwitter() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'twitter',
  })
}

----------------------------------------

TITLE: Reassigning Table Owner for DB Push Operation
DESCRIPTION: SQL command to reassign the owner of a table to resolve permission denied errors when running db push.

LANGUAGE: sql
CODE:
ALTER TABLE users OWNER TO postgres;

----------------------------------------

TITLE: Executing Dynamic JavaScript with Supabase Client
DESCRIPTION: SQL query demonstrating the execution of dynamic JavaScript using the Supabase client libraries within the SQL context.

LANGUAGE: sql
CODE:
SELECT edge.exec(
  $js$
  const { data, error } = await supabase.rpc('postgres_function', {'foo': 'bar'});
  if (error) {
    return new Response(JSON.stringify({ error: "An error occurred ->" + error.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
  return data;
  $js$
);

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Production Deployment
DESCRIPTION: YAML configuration for a GitHub Actions workflow to deploy migrations to a production Supabase project.

LANGUAGE: yaml
CODE:
name: Deploy Migrations to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push

----------------------------------------

TITLE: Adding Internet Permission to Android Manifest
DESCRIPTION: Adds the required internet permission to the Android manifest file to enable network access for Supabase API calls.

LANGUAGE: xml
CODE:
...
<uses-permission android:name="android.permission.INTERNET" />
...

----------------------------------------

TITLE: Installing Alert Component via CLI
DESCRIPTION: Command to install the Alert component using the shadcn-ui CLI tool

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add alert

----------------------------------------

TITLE: Rendering Mobile Tutorial Links in JSX
DESCRIPTION: This code snippet maps over an array of mobile tutorials and renders them as Link components with GlassPanel content. It displays various mobile tutorials for platforms like Flutter, Expo React Native, Android Kotlin, and more.

LANGUAGE: JSX
CODE:
{[
  {
    title: 'Flutter',
    href: '/guides/getting-started/tutorials/with-flutter',
    description:
      'Learn how to build a user management app with Flutter and Supabase Database, Auth, and Storage functionality.',
    icon: '/docs/img/icons/flutter-icon'
  },
  {
    title: 'Expo React Native',
    href: '/guides/getting-started/tutorials/with-expo-react-native',
    description:
      'Learn how to build a user management app with Expo React Native and Supabase Database, Auth, and Storage functionality.',
    icon: '/docs/img/icons/expo-icon',
    hasLightIcon: true
  },
  // ... (other mobile tutorials)
].map((item) => {
  return (
    <Link href={`${item.href}`} key={item.title} passHref className={'col-span-4'}>
      <GlassPanel
        title={item.title}
        span="col-span-6"
        background={false}
        icon={item.icon}
        hasLightIcon={item.hasLightIcon}
      >
        {item.description}
      </GlassPanel>
    </Link>
  )
})}

----------------------------------------

TITLE: Creating a Function for Unnamed Parameters in PostgreSQL
DESCRIPTION: Shows how to create a PostgreSQL function that accepts a single unnamed JSON parameter. This is useful for handling webhook payloads in PostgREST 9, allowing direct insertion of JSON data into the database.

LANGUAGE: sql
CODE:
create function store_bounces(json)
returns json
language sql
as $$
  insert into bounces (webhook_id, email)
  values (
    ($1->>'ID')::bigint,
    ($1->>'Email')::text
  );

  select '{ "status": 200 }'::json;
$$;

----------------------------------------

TITLE: Basic Select Component Implementation
DESCRIPTION: Example implementation of a theme selector using the Select component with light, dark, and system options.

LANGUAGE: tsx
CODE:
<Select>
  <SelectTrigger className="w-[180px]">
    <SelectValue placeholder="Theme" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="light">Light</SelectItem>
    <SelectItem value="dark">Dark</SelectItem>
    <SelectItem value="system">System</SelectItem>
  </SelectContent>
</Select>

----------------------------------------

TITLE: Implementing waitUntil in Cloudflare Worker Revalidate Route
DESCRIPTION: A router implementation that uses waitUntil to update Supabase cache asynchronously after sending an immediate response. Handles INSERT, UPDATE, and DELETE operations for articles, updating both individual article entries and the full article list in KV storage.

LANGUAGE: javascript
CODE:
router.post(
  "/revalidate",
  withContent,
  async (request, { SUPABASE_URL, SUPABASE_ANON_KEY, ARTICLES }, context) => {
    const updateCache = async () => {
      const { type, record, old_record } = request.content;
      const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

      if (type === "INSERT" || type === "UPDATE") {
        await writeTo(ARTICLES, `/articles/${record.id}`, record);
      }

      if (type === "DELETE") {
        await ARTICLES.delete(`/articles/${old_record.id}`);
      }

      const { data: articles } = await supabase.from("articles").select("*");
      await writeTo(ARTICLES, "/articles", articles);
      console.log("updated cache");
    };

    context.waitUntil(updateCache());

    console.log("sending response");

    return json({ received: true });
  }
);

----------------------------------------

TITLE: Signing in with Twitter OAuth using Supabase in Kotlin
DESCRIPTION: This snippet demonstrates how to implement Twitter OAuth sign-in using Supabase's Kotlin client. It uses the signInWith method with Twitter as the Provider.

LANGUAGE: kotlin
CODE:
suspend fun signInWithTwitter() {
	supabase.auth.signInWith(Twitter)
}

----------------------------------------

TITLE: Embedding Video iFrame in HTML
DESCRIPTION: Code for embedding a Loom video demonstration using an iframe element with specific styling and attributes.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.loom.com/embed/a43084629c7e47828e3a292b60719393"
    frameBorder="0"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Creating Policy for Custom Role in SQL for Supabase Storage
DESCRIPTION: This SQL snippet creates a policy that gives full read permissions to all objects in the 'teams' bucket for the 'manager' role. It demonstrates how to set up role-based access control for Supabase Storage.

LANGUAGE: sql
CODE:
create policy "Manager can view all files in the bucket 'teams'"
on storage.objects
for select
to manager
using (
 bucket_id = 'teams'
);

----------------------------------------

TITLE: Creating Policy for Custom Role in SQL for Supabase Storage
DESCRIPTION: This SQL snippet creates a policy that gives full read permissions to all objects in the 'teams' bucket for the 'manager' role. It demonstrates how to set up role-based access control for Supabase Storage.

LANGUAGE: sql
CODE:
create policy "Manager can view all files in the bucket 'teams'"
on storage.objects
for select
to manager
using (
 bucket_id = 'teams'
);

----------------------------------------

TITLE: Creating a Multi-Column Index in Postgres
DESCRIPTION: Shows how to create an index on multiple columns in Postgres. This can be beneficial for queries that frequently filter on these columns together.

LANGUAGE: SQL
CODE:
create index test2_mm_idx on test2 (major, minor);

----------------------------------------

TITLE: Error Handling in supabase-flutter v1
DESCRIPTION: In v1, errors are thrown as exceptions instead of being returned as a response. This change makes error handling more intuitive for Flutter developers.

LANGUAGE: dart
CODE:
try {
    final data = supabase.from('my_table').select();
} catch (error) {
    // handle error
}

----------------------------------------

TITLE: Signing out using Supabase Kotlin SDK
DESCRIPTION: This code snippet illustrates how to sign out a user using the Supabase Kotlin SDK. It calls the signOut method to remove the user from the session and clear local storage.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Installing Progress Component Dependencies
DESCRIPTION: Command to install the Progress component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add progress

----------------------------------------

TITLE: Opening Xcode Project in Flutter iOS
DESCRIPTION: Command to open the Flutter iOS project workspace in Xcode for asset customization

LANGUAGE: shell
CODE:
open ios/Runner.xcworkspace

----------------------------------------

TITLE: Deploying Secrets to Supabase Project
DESCRIPTION: Sets the secrets from the .env file to the Supabase project using the CLI.

LANGUAGE: bash
CODE:
npx supabase secrets set --env-file ./supabase/.env --project-ref <PROJECT REF>

----------------------------------------

TITLE: Deploying Cloudflare Turnstile Edge Function in Supabase
DESCRIPTION: Commands to deploy the Cloudflare Turnstile server-side validation as a Supabase Edge Function and set the required secret key.

LANGUAGE: bash
CODE:
supabase functions deploy cloudflare-turnstile
supabase secrets set CLOUDFLARE_TURNSTILE_SECRET_KEY=your_secret_key

----------------------------------------

TITLE: Installing Input OTP Component via CLI
DESCRIPTION: Command to install the Input OTP component using the shadcn-ui CLI.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add input-otp

----------------------------------------

TITLE: Seeding the Database
DESCRIPTION: Command to run the seed script and populate the Instrument table with initial data.

LANGUAGE: bash
CODE:
yarn rw prisma db seed

----------------------------------------

TITLE: Collecting Response from Asynchronous HTTP Request with pg_net
DESCRIPTION: Demonstrates how to collect the response from an asynchronous HTTP request made with pg_net. The example uses the request ID returned from the initial request to fetch the response.

LANGUAGE: sql
CODE:
select
  *
from
  net.http_collect_response(1);

----------------------------------------

TITLE: TOML Configuration for HTTP Status Codes
DESCRIPTION: TOML configuration defining HTTP status codes and their corresponding messages for various Supabase platform states and error conditions.

LANGUAGE: toml
CODE:
title = "HTTP status codes"
topics = [ "platform" ]
keywords = [ "HTTP" ]
database_id = "b98c7288-8c38-4dc2-8591-d18ea9eb4cbc"

[[errors]]
http_status_code = 402
message = "service restriction"

[[errors]]
http_status_code = 540
message = "project paused"

[[errors]]
http_status_code = 544
message = "project API gateway timeout"

[[errors]]
http_status_code = 546
message = "Edge Functions resource limit"

----------------------------------------

TITLE: Rendering YouTube Video Embed with React
DESCRIPTION: HTML/React component for embedding a YouTube video with specific styling and security parameters.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/qETcl3SUfzU"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Basic Checkbox Usage
DESCRIPTION: Simple example showing basic checkbox implementation

LANGUAGE: tsx
CODE:
<Checkbox />

----------------------------------------

TITLE: Importing Alert Components
DESCRIPTION: Code showing how to import the Alert, AlertDescription, and AlertTitle components from the UI components directory.

LANGUAGE: tsx
CODE:
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'

----------------------------------------

TITLE: Initializing S3 Client with Access Keys using AWS SDK
DESCRIPTION: Creates an S3 client instance using AWS SDK with direct access credentials. This method provides full access to all S3 operations and bypasses RLS policies. Requires access key ID, secret access key, region, and endpoint from project settings.

LANGUAGE: javascript
CODE:
import { S3Client } from '@aws-sdk/client-s3';

const client = new S3Client({
  forcePathStyle: true,
  region: 'project_region',
  endpoint: 'https://project_ref.supabase.co/storage/v1/s3',
  credentials: {
    accessKeyId: 'your_access_key_id',
    secretAccessKey: 'your_secret_access_key',
  }
})

----------------------------------------

TITLE: Creating a Publication for Delete Events in SQL
DESCRIPTION: This SQL command creates a publication that listens only to delete events on all tables.

LANGUAGE: sql
CODE:
create publication publication_name
for all tables
with (publish = 'delete');

----------------------------------------

TITLE: Installing Supabase CLI as npm dev dependency
DESCRIPTION: This command installs the Supabase CLI as a development dependency using npm.

LANGUAGE: sh
CODE:
npm install supabase --save-dev

----------------------------------------

TITLE: Embedding MP4 Video with HTML5 Video Player
DESCRIPTION: HTML code for embedding an MP4 video with autoplay, muted, and inline playback settings

LANGUAGE: html
CODE:
<video width="99%" autoPlay muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/update-docs.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Creating React Native App with Expo
DESCRIPTION: Command to create a new React Native application using Expo with TypeScript template.

LANGUAGE: bash
CODE:
npx create-expo-app -t expo-template-blank-typescript my-app

----------------------------------------

TITLE: Committing Supabase Directory to Git
DESCRIPTION: Add the Supabase directory to Git, commit the changes, and push to your remote repository.

LANGUAGE: bash
CODE:
git add supabase
git commit -m "Initial migration"
git push

----------------------------------------

TITLE: Querying GoTrue Health Check Endpoint using curl
DESCRIPTION: Makes a GET request to the Supabase GoTrue health check endpoint to retrieve version information. Requires the project's anonymous API key as a header parameter. Returns version details, service name, and description in JSON format.

LANGUAGE: bash
CODE:
curl -X GET 'https://project-ref.supabase.co/auth/v1/health' -H 'apikey: ANON_KEY'

LANGUAGE: json
CODE:
{
    "version": "v2.60.7",
    "name": "GoTrue",
    "description": "GoTrue is a user registration and authentication API"
}

----------------------------------------

TITLE: LinkedIn OIDC Configuration
DESCRIPTION: Configuration settings for the LinkedIn OIDC provider in the Supabase CLI config file.

LANGUAGE: toml
CODE:
[auth.external.linkedin_oidc]
enabled = true
client_id = ...
secret = ...

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: SolidJS component for handling user authentication with magic link login.

LANGUAGE: jsx
CODE:
import { createSignal } from 'solid-js'
import { supabase } from './supabaseClient'

export default function Auth() {
  const [loading, setLoading] = createSignal(false)
  const [email, setEmail] = createSignal('')

  const handleLogin = async (e: SubmitEvent) => {
    e.preventDefault()

    try {
      setLoading(true)
      const { error } = await supabase.auth.signInWithOtp({ email: email() })
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div class="row flex-center flex">
      <div class="col-6 form-widget" aria-live="polite">
        <h1 class="header">Supabase + SolidJS</h1>
        <p class="description">Sign in via magic link with your email below</p>
        <form class="form-widget" onSubmit={handleLogin}>
          <div>
            <label for="email">Email</label>
            <input
              id="email"
              class="inputField"
              type="email"
              placeholder="Your email"
              value={email()}
              onChange={(e) => setEmail(e.currentTarget.value)}
            />
          </div>
          <div>
            <button type="submit" class="button block" aria-live="polite">
              {loading() ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )

----------------------------------------

TITLE: Supavisor Transaction Mode Connection
DESCRIPTION: Example of a Supavisor connection string in transaction mode using IPv4 on port 6543.

LANGUAGE: sh
CODE:
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Installing Supabase JS via CDN
DESCRIPTION: Install the Supabase JavaScript client library using CDN links from either jsdelivr or unpkg.

LANGUAGE: javascript
CODE:
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
//or
<script src="https://unpkg.com/@supabase/supabase-js@2"></script>

----------------------------------------

TITLE: Installing Sidebar Component via CLI
DESCRIPTION: Command to install the sidebar component using the shadcn CLI

LANGUAGE: bash
CODE:
npx shadcn@latest add sidebar

----------------------------------------

TITLE: Index Advisor Function Signature - SQL
DESCRIPTION: Defines the return type and structure of the index_advisor function.

LANGUAGE: sql
CODE:
index_advisor(query text)
returns
    table  (
        startup_cost_before jsonb,
        startup_cost_after jsonb,
        total_cost_before jsonb,
        total_cost_after jsonb,
        index_statements text[],
        errors text[]
    )

----------------------------------------

TITLE: Signing out using Supabase in Flutter
DESCRIPTION: This snippet demonstrates how to implement sign-out functionality using Supabase's Flutter client. It uses the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Resetting Local Database
DESCRIPTION: Reset the local database and rerun all migrations to reflect manual edits to migration files.

LANGUAGE: bash
CODE:
supabase db reset

----------------------------------------

TITLE: Creating Google Map in Ionic Angular Component
DESCRIPTION: TypeScript code to create a Google Map using the Capacitor Google Maps plugin in an Ionic Angular component.

LANGUAGE: typescript
CODE:
import { Component, ElementRef, ViewChild } from '@angular/core'
import { GoogleMap } from '@capacitor/google-maps'
import { LatLngBounds } from '@capacitor/google-maps/dist/typings/definitions'
import { ModalController } from '@ionic/angular'
import { BehaviorSubject } from 'rxjs'
import { environment } from 'src/environments/environment'
import { NearbyPage } from '../nearby/nearby.page'
import { StoreResult, StoresService } from '../services/stores.service'
import { StorePage } from '../store/store.page'

export interface StoreMarker {
  markerId: string
  storeId: number
}

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage {
  @ViewChild('map') mapRef!: ElementRef<HTMLElement>
  map!: GoogleMap
  mapBounds = new BehaviorSubject<LatLngBounds | null>(null)
  activeMarkers: StoreMarker[] = []
  selectedMarker: StoreMarker | null = null
  selectedStore: StoreResult | null = null

  constructor(
    private storesService: StoresService,
    private modalCtrl: ModalController
  ) {}

  ionViewDidEnter() {
    this.createMap()
  }

  async createMap() {
    this.map = await GoogleMap.create({
      forceCreate: true, // Prevent issues with live reload
      id: 'my-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.mapsKey,
      config: {
        center: {
          lat: 51.8,
          lng: 7.6,
        },
        zoom: 7,
      },
    })
    this.map.enableCurrentLocation(true)
  }
}

----------------------------------------

TITLE: Signing out using Supabase in Kotlin
DESCRIPTION: This snippet shows how to implement sign-out functionality using Supabase's Kotlin client. It uses the signOut method to remove the user from the browser session and clear localStorage.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Configuring Static Files for Deployment
DESCRIPTION: TOML configuration to include WebAssembly module files during function deployment

LANGUAGE: toml
CODE:
[functions.wasm-add]
static_files = [ "./functions/wasm-add/add-wasm/pkg/*"]

----------------------------------------

TITLE: Checking SSL Enforcement Status via Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to check whether SSL is currently being enforced for a specific project.

LANGUAGE: bash
CODE:
supabase ssl-enforcement --project-ref {ref} get --experimental

----------------------------------------

TITLE: Updating Server Components
DESCRIPTION: Example of how to update server components to use the new Supabase client utility function.

LANGUAGE: typescript
CODE:
// replace
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

// with
import { createClient } from '@/utils/supabase/server';

export default async function Page() {
	// replace
	const cookieStore = cookies();
	const supabase = createServerComponentClient<Database>({
		cookies: () => cookieStore
	});

	// with
	const supabase = createClient();

	return...
}

----------------------------------------

TITLE: Creating Embeddings for IMDB Reviews
DESCRIPTION: Iterates over the dataset in batches, creates embeddings for each review, and prepares records for insertion into the database.

LANGUAGE: python
CODE:
from typing import List, Dict, Tuple
from flupy import flu
import numpy as np
from tqdm import tqdm


batch_size = 50

records: List[Tuple[str, np.ndarray, Dict]] = []

# Iterate over the dataset in chunks
for chunk_ix, chunk in tqdm(flu(data['text']).chunk(batch_size).enumerate()):

    # Create embeddings for current chunk
    embedding_chunk = model.encode(chunk)

    # Enumerate the embeddings and create a record to insert into the database
    for row_ix, (text, embedding) in enumerate(zip(chunk, embedding_chunk)):
        record_id = chunk_ix * batch_size + row_ix
        records.append((f"{record_id}", embedding, {"text": text}))

----------------------------------------

TITLE: Applying Surface Colors in Supabase Studio (JSX)
DESCRIPTION: Demonstrates the use of different surface color classes in the Supabase studio (dashboard) application.

LANGUAGE: jsx
CODE:
<CodeFragment name="color-usage-surface-studio" />

----------------------------------------

TITLE: Granting Postgres Function Permissions for Auth Hooks
DESCRIPTION: SQL commands to grant necessary permissions for a Postgres function to be used as an Auth Hook, including granting execute permission to supabase_auth_admin and revoking permissions from other roles.

LANGUAGE: sql
CODE:
-- Grant access to function to supabase_auth_admin
grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

-- Grant access to schema to supabase_auth_admin
grant usage on schema public to supabase_auth_admin;

-- Revoke function permissions from authenticated, anon and public
revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon, public;

----------------------------------------

TITLE: Creating instruments resource in refine
DESCRIPTION: Generates code for instruments resource pages using refine Inferencer.

LANGUAGE: bash
CODE:
npm run refine create-resource instruments

----------------------------------------

TITLE: Querying JSONB Data in PostgreSQL
DESCRIPTION: Demonstrates how to query JSONB data in PostgreSQL using the '->' operator to access nested JSON values. This example selects students with a specific grade in geography from a JSONB column.

LANGUAGE: sql
CODE:
select * from students where grades->>'geography' = 'A';

----------------------------------------

TITLE: Using Popover Component in React
DESCRIPTION: This example demonstrates how to use the Popover component in a React application, including the trigger and content elements.

LANGUAGE: tsx
CODE:
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>

----------------------------------------

TITLE: Filtering Storage Logs by IP Address in SQL
DESCRIPTION: This SQL query filters storage logs by a specific IP address. It joins with metadata and selects relevant fields including the remote address for each request. The IP address needs to be replaced with the actual address to filter.

LANGUAGE: sql
CODE:
select id, storage_logs.timestamp, event_message, r.remoteAddress
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.req) as r
where r.remoteAddress in ("IP_ADDRESS")
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Problematic Query Causing 520 Error with Large 'in' Clause
DESCRIPTION: This example shows a query that can potentially cause a 520 error due to a large 'in' clause. The query selects from the 'countries' table with a 'not in' condition containing thousands of IDs.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('countries')
  .select()
  .not('id', 'in', '(5,6,7,8,9,...10,000)')

----------------------------------------

TITLE: Legacy Authentication in Supabase.js
DESCRIPTION: Previous implementation of user signup functionality

LANGUAGE: javascript
CODE:
const {
  body: { user },
} = await supabase.auth.signup('someone@email.com', 'password')

----------------------------------------

TITLE: Installing Next.js Auth Helpers Library
DESCRIPTION: Install the required Supabase Auth Helpers and Supabase JS client libraries using npm.

LANGUAGE: bash
CODE:
npm install @supabase/auth-helpers-nextjs @supabase/supabase-js

----------------------------------------

TITLE: Creating an Auto-updating Function and Trigger in PostgreSQL
DESCRIPTION: Demonstrates how to create a PL/pgSQL function and trigger to automatically update the 'updated_at' column whenever a row in the 'students' table is modified.

LANGUAGE: plpgsql
CODE:
CREATE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  new.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON students
  FOR EACH ROW
  EXECUTE PROCEDURE set_updated_at();

----------------------------------------

TITLE: Dynamically Setting Redirect URL for Vercel Deployments
DESCRIPTION: This snippet demonstrates how to dynamically set the redirect URL based on the environment, using Vercel's NEXT_PUBLIC_VERCEL_URL for preview deployments. It ensures the URL starts with 'http' and ends with a trailing slash.

LANGUAGE: javascript
CODE:
const getURL = () => {
  let url =
    process?.env?.NEXT_PUBLIC_SITE_URL ?? // Set this to your site URL in production env.
    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Automatically set by Vercel.
    'http://localhost:3000/'
  // Make sure to include `https://` when not localhost.
  url = url.startsWith('http') ? url : `https://${url}`
  // Make sure to include a trailing `/`.
  url = url.endsWith('/') ? url : `${url}/`
  return url
}

const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'github',
  options: {
    redirectTo: getURL(),
  },
})

----------------------------------------

TITLE: Using Tooltip Component in React
DESCRIPTION: Example of implementing the Tooltip component in a React application, showing the structure and basic usage.

LANGUAGE: tsx
CODE:
<TooltipProvider>
  <Tooltip>
    <TooltipTrigger>Hover</TooltipTrigger>
    <TooltipContent>
      <p>Add to library</p>
    </TooltipContent>
  </Tooltip>
</TooltipProvider>

----------------------------------------

TITLE: Setting up Supabase Client with Firebase Auth in TypeScript
DESCRIPTION: Configures Supabase client to use Firebase Authentication tokens for web applications using TypeScript.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    return await firebase.auth().currentUser?.getIdToken(/* forceRefresh */ false)) ?? null
  },
})

----------------------------------------

TITLE: Installing Supabase Dart Package
DESCRIPTION: Command to add the Supabase package to a standard Dart project using the pub package manager.

LANGUAGE: sh
CODE:
dart pub add supabase

----------------------------------------

TITLE: Installing Slider Component Dependencies Manually
DESCRIPTION: Command to install the required dependency (@radix-ui/react-slider) for the Slider component manually.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-slider

----------------------------------------

TITLE: Setting Up Account Management Component
DESCRIPTION: Implements user profile management with form handling and data updates using Refine's useForm hook

LANGUAGE: tsx
CODE:
export default function Account() {
  const { data: userIdentity } = useGetIdentity<IUserIdentity>()
  const { mutate: logOut } = useLogout()
  const { refineCore: { formLoading, queryResult, onFinish }, register, control, handleSubmit } = useForm<IProfile>({
    refineCoreProps: {
      resource: 'profiles',
      action: 'edit',
      id: userIdentity?.id,
      redirect: false,
      onMutationError: (data) => alert(data?.message),
    },
  })
  // ... component JSX
}

----------------------------------------

TITLE: Configuring Direct Connections with Supabase CLI
DESCRIPTION: Commands to update the maximum number of direct connections for a Supabase project using the Supabase CLI. Requires project reference and desired connection limit.

LANGUAGE: sh
CODE:
npx supabase login

npx supabase --experimental --project-ref <PROJECT REF> postgres-config update --config max_connections=<INTEGER VALUE>

----------------------------------------

TITLE: Creating Supabase Database Schema for User Profiles
DESCRIPTION: SQL script to set up the database schema for user profiles in Supabase. It creates a 'profiles' table with row-level security policies, sets up realtime functionality, and configures storage for avatar images.

LANGUAGE: sql
CODE:
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: Rendering Text Confirm Dialog with Info Alert in JSX
DESCRIPTION: This snippet demonstrates how to use the Text Confirm Dialog component with an info alert. It includes an icon, title, and description.

LANGUAGE: jsx
CODE:
<ComponentPreview
  name="text-confirm-dialog-with-info-alert"
  description="An alert with an icon, title and description. The title says 'Heads up!' and the description is 'You can add components to your app using the cli.'"
/>

----------------------------------------

TITLE: Creating a refine app with Supabase preset
DESCRIPTION: Creates a new refine app with Supabase integration using the create refine-app command.

LANGUAGE: bash
CODE:
npm create refine-app@latest -- --preset refine-supabase my-app

----------------------------------------

TITLE: Background Task ZIP Processing with Ephemeral Storage
DESCRIPTION: Enhanced version of ZIP file processing using background tasks and ephemeral storage, capable of handling larger files by writing to temporary storage first.

LANGUAGE: jsx
CODE:
import { BlobWriter, ZipReader, ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'

import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)

let numFilesUploaded = 0

async function processZipFile(uploadId, filepath) {
  const file = await Deno.open(filepath, { read: true })
  const zipReader = new ZipReader(file.readable)
  const entries = await zipReader.getEntries()

  await supabase.storage.createBucket(uploadId, {
    public: false,
  })

  await Promise.all(
    entries.map(async (entry) => {
      // read file entry
      const blobWriter = new BlobWriter()
      const blob = await entry.getData(blobWriter)

      if (entry.directory) {
        return
      }

      // write file to Supabase Storage
      await supabase.storage.from(uploadId).upload(entry.filename, blob, {})

      numFilesUploaded += 1
      console.log('uploaded', entry.filename)
    })
  )

  await zipReader.close()
}

globalThis.addEventListener('beforeunload', (ev) => {
  console.log('function about to terminate: ', ev.detail.reason)
  console.log('number of files uploaded: ', numFilesUploaded)
})

async function writeZipFile(filepath, stream) {
  await Deno.writeFile(filepath, stream)
}

Deno.serve(async (req) => {
  const uploadId = crypto.randomUUID()
  await writeZipFile('/tmp/' + uploadId, req.body)

  EdgeRuntime.waitUntil(processZipFile(uploadId, '/tmp/' + uploadId))

  return new Response(
    JSON.stringify({
      uploadId,
    }),
    {
      headers: {
        'content-type': 'application/json',
      },
    }
  )
})

----------------------------------------

TITLE: Setting Postgres Connection Environment Variable in Bash
DESCRIPTION: This snippet demonstrates how to set an environment variable containing the PSQL command with connection details for the source Postgres database.

LANGUAGE: bash
CODE:
%env PSQL_COMMAND=PGPASSWORD=RgaMDfTS_password_FTPa7 psql -h dpg-a_server_in.oregon-postgres.provider.com -U my_db_pxl0_user my_db_pxl0

----------------------------------------

TITLE: Reloading PostgREST Configuration in PostgreSQL
DESCRIPTION: Notifies PostgREST to reload its configuration, necessary after changing timeout settings for Supabase Client API calls.

LANGUAGE: sql
CODE:
NOTIFY pgrst, 'reload config';

----------------------------------------

TITLE: Moving Objects Across Buckets in Supabase Storage (JavaScript)
DESCRIPTION: This snippet shows how to move an object from one bucket to another using the Supabase Storage API. It uses the 'move' method with a 'destinationBucket' option to specify the target bucket.

LANGUAGE: javascript
CODE:
await supabase.storage.from('avatars').move('public/avatar1.png', 'private/avatar2.png', {
  destinationBucket: 'avatars2',
})

----------------------------------------

TITLE: Creating Angular Authentication Component
DESCRIPTION: Angular component for handling user authentication with Magic Links

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core'
import { FormBuilder } from '@angular/forms'
import { SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-auth',
  templateUrl: './auth.component.html',
  styleUrls: ['./auth.component.css'],
})
export class AuthComponent {
  loading = false

  signInForm = this.formBuilder.group({
    email: '',
  })

  constructor(
    private readonly supabase: SupabaseService,
    private readonly formBuilder: FormBuilder
  ) {}

  async onSubmit(): Promise<void> {
    try {
      this.loading = true
      const email = this.signInForm.value.email as string
      const { error } = await this.supabase.signIn(email)
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      this.signInForm.reset()
      this.loading = false
    }
  }
}

LANGUAGE: html
CODE:
<div class="row flex-center flex">
  <div class="col-6 form-widget" aria-live="polite">
    <h1 class="header">Supabase + Angular</h1>
    <p class="description">Sign in via magic link with your email below</p>
    <form [formGroup]="signInForm" (ngSubmit)="onSubmit()" class="form-widget">
      <div>
        <label for="email">Email</label>
        <input
          id="email"
          formControlName="email"
          class="inputField"
          type="email"
          placeholder="Your email"
        />
      </div>
      <div>
        <button type="submit" class="button block" [disabled]="loading">
          {{ loading ? 'Loading' : 'Send magic link' }}
        </button>
      </div>
    </form>
  </div>
</div>

----------------------------------------

TITLE: Scheduling Webhook CRON Job in PostgreSQL
DESCRIPTION: This SQL query schedules a CRON job that sends a POST request to a webhook URL every minute. It uses both the pg_cron and http extensions to achieve this functionality.

LANGUAGE: sql
CODE:
select
  cron.schedule(
    'webhook-every-minute', -- name of the cron job
    '* * * * *', -- every minute
    $$
    select status
    from
      http_post(
        'https://webhook.site/223c8a43-725b-4cbd-b1fe-d0da73353a6b', -- webhook URL, replace the ID(223c8..) with your own
        '{"hello": "world"}', -- payload
        'application/json'
      )
    $$
  );

----------------------------------------

TITLE: Handling Deep Links in Android Kotlin
DESCRIPTION: This Kotlin code snippet demonstrates how to handle deep links in an Android app using Supabase.

LANGUAGE: kotlin
CODE:
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    supabase.handleDeeplinks(intent)
}

----------------------------------------

TITLE: Initializing Supabase project
DESCRIPTION: Command to initialize a Supabase project in the root of the Poetry project.

LANGUAGE: shell
CODE:
supabase init

----------------------------------------

TITLE: Installing Tooltip Component Dependencies Manually
DESCRIPTION: Command to install the required Radix UI Tooltip dependency for manual installation.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-tooltip

----------------------------------------

TITLE: Reading Messages with Polling from PGMQ Queue in SQL
DESCRIPTION: Reads messages from a queue with long-polling functionality using the pgmq.read_with_poll function.

LANGUAGE: sql
CODE:
select * from pgmq.read_with_poll('my_queue', 1, 1, 5, 100);

----------------------------------------

TITLE: Direct Database Connection String
DESCRIPTION: Example of a direct database connection string using IPv6 (or IPv4 if add-on enabled).

LANGUAGE: sh
CODE:
postgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres

----------------------------------------

TITLE: Testing PostgreSQL Functions with pgTAP
DESCRIPTION: Tests for verifying function return types and results. Includes checks for function return types and comparing actual function output with expected results.

LANGUAGE: sql
CODE:
prepare hello_expr as select 'hello'

begin;
select plan(3);
-- You'll need to create a hello_world and is_even function
select function_returns( 'hello_world', 'text' );                   -- test if the function "hello_world" returns text
select function_returns( 'is_even', ARRAY['integer'], 'boolean' );  -- test if the function "is_even" returns a boolean
select results_eq('select * from hello_world()', 'hello_expr');          -- test if the function "hello_world" returns "hello"

select * from finish();
rollback;

----------------------------------------

TITLE: Sending Broadcast Message in Supabase Realtime Channel
DESCRIPTION: This code shows how to send a broadcast message to a Supabase Realtime channel. It publishes a message with a specific type, event, and payload to the 'room-one' channel.

LANGUAGE: javascript
CODE:
roomOne.send({
  type: 'broadcast',
  event: 'test',
  payload: { message: 'hello, world' },
})

----------------------------------------

TITLE: Logging in to Supabase CLI
DESCRIPTION: Logs in to the Supabase CLI using a Personal Access Token.

LANGUAGE: bash
CODE:
npx supabase login

----------------------------------------

TITLE: Time-Based RLS Policy for Analytics Data
DESCRIPTION: SQL code creating an analytics table and implementing RLS policy based on timestamp.

LANGUAGE: sql
CODE:
create table analytics (
  id serial primary key,
  ts timestamptz default now(),
  profile_id references profiles,
  event text
);
alter table profiles
  enable row level security;

create policy "Data dump rule" on logs
  for select
  to exporter
  using (
    profile_id in (1, 2, 3) and
    ts > now() - interval '2 MONTHS'
  );

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: Generates TypeScript types for a Supabase project and saves them to a file.

LANGUAGE: bash
CODE:
npx supabase gen types typescript --project-id "$PROJECT_REF" --schema public > database.types.ts

----------------------------------------

TITLE: Enabling SSL Enforcement via Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to enable SSL enforcement for a specific project.

LANGUAGE: bash
CODE:
supabase ssl-enforcement --project-ref {ref} update --enable-db-ssl-enforcement --experimental

----------------------------------------

TITLE: Implementing Account Management Page
DESCRIPTION: Svelte component for an account management page that allows users to update their profile information.

LANGUAGE: svelte
CODE:
<script lang="ts">
	import { enhance } from '$app/forms';
	import type { SubmitFunction } from '@sveltejs/kit';

	export let data
	export let form

	let { session, supabase, profile } = data
	$: ({ session, supabase, profile } = data)

	let profileForm: HTMLFormElement
	let loading = false
	let fullName: string = profile?.full_name ?? ''
	let username: string = profile?.username ?? ''
	let website: string = profile?.website ?? ''
	let avatarUrl: string = profile?.avatar_url ?? ''

	const handleSubmit: SubmitFunction = () => {
		loading = true
		return async () => {
			loading = false
		}
	}

	const handleSignOut: SubmitFunction = () => {
		loading = true
		return async ({ update }) => {
			loading = false
			update()
		}
	}
</script>

<div class="form-widget">
	<form
		class="form-widget"
		method="post"
		action="?/update"
		use:enhance={handleSubmit}
		bind:this={profileForm}
	>
		<div>
			<label for="email">Email</label>
			<input id="email" type="text" value={session.user.email} disabled />
		</div>

		<div>
			<label for="fullName">Full Name</label>
			<input id="fullName" name="fullName" type="text" value={form?.fullName ?? fullName} />
		</div>

		<div>
			<label for="username">Username</label>
			<input id="username" name="username" type="text" value={form?.username ?? username} />
		</div>

		<div>
			<label for="website">Website</label>
			<input id="website" name="website" type="url" value={form?.website ?? website} />
		</div>

		<div>
			<input
				type="submit"
				class="button block primary"
				value={loading ? 'Loading...' : 'Update'}
				disabled={loading}
			/>
		</div>
	</form>

	<form method="post" action="?/signout" use:enhance={handleSignOut}>
		<div>
			<button class="button block" disabled={loading}>Sign Out</button>
		</div>
	</form>
</div>

----------------------------------------

TITLE: Deploying Edge Functions to Supabase
DESCRIPTION: Command to deploy Edge Functions to the Supabase project.

LANGUAGE: bash
CODE:
supabase functions deploy <function_name>

----------------------------------------

TITLE: Creating a Table Using Oriole Storage Engine in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to enable the Oriole extension and create a table using the Oriole storage engine. It showcases the use of the 'using' clause to specify the storage format.

LANGUAGE: sql
CODE:
create extension orioledb; -- enable the extension

create table posts (
  id int8 not null,
  title text not null,
  body text not null,
  primary key (id)
) using orioledb;    -- Specify the storage format

----------------------------------------

TITLE: Resizable Panel Group with Custom Handle in React
DESCRIPTION: Example of creating a resizable panel group with a custom handle using the withHandle prop.

LANGUAGE: tsx
CODE:
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'

export default function Example() {
  return (
    <ResizablePanelGroup direction="horizontal">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}

----------------------------------------

TITLE: Editing a Cron Job in SQL
DESCRIPTION: Modifies an existing cron job's schedule or other properties using the alter_job function.

LANGUAGE: sql
CODE:
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  schedule := '*/5 * * * *'
);

----------------------------------------

TITLE: Querying Supabase Auth Users
DESCRIPTION: SQL query to select all users from the Supabase auth.users table to verify the initial empty state of authentication system.

LANGUAGE: sql
CODE:
select * from auth.users;

----------------------------------------

TITLE: Generating Confirmation Links with Supabase JavaScript SDK
DESCRIPTION: This code snippet demonstrates how to generate confirmation links using the Supabase JavaScript SDK. It shows the process of creating a sign-up confirmation link, which requires the use of the service_role admin key for security reasons.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.api.generateLink({
  type: 'signup',
  email: 'example@email.com'
})

----------------------------------------

TITLE: Test Edge Function
DESCRIPTION: Commands to serve the function locally and test it with a cURL request.

LANGUAGE: shell
CODE:
supabase functions serve

LANGUAGE: shell
CODE:
curl --request POST 'http://localhost:54321/functions/v1/embed' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "input": "hello world" }'

----------------------------------------

TITLE: Installing Separator Component Dependencies Manually
DESCRIPTION: Command to install the required dependency for the Separator component manually using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-separator

----------------------------------------

TITLE: Processing WorkOS OAuth Callback in Next.js
DESCRIPTION: Next.js route handler for processing the OAuth callback, exchanging the authorization code for a session, and handling redirects with environment-specific logic.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const next = searchParams.get('next') ?? '/'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host')
      const isLocalEnv = process.env.NODE_ENV === 'development'
      if (isLocalEnv) {
        return NextResponse.redirect(`${origin}${next}`)
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`)
      } else {
        return NextResponse.redirect(`${origin}${next}`)
      }
    }
  }

  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}

----------------------------------------

TITLE: Running Edge Runtime Locally with Bash
DESCRIPTION: This command starts the Edge Runtime locally, specifying the path to Supabase functions and the port to run on.

LANGUAGE: bash
CODE:
./run.sh start --main-service /path/to/supabase/functions -p 9000

----------------------------------------

TITLE: Supavisor Session Mode Connection
DESCRIPTION: Example of a Supavisor connection string in session mode using IPv4 on port 5432.

LANGUAGE: sh
CODE:
postgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Implementing Ollama LLM Integration
DESCRIPTION: Edge Function implementation for integrating with Ollama LLM, including streaming response handling.

LANGUAGE: typescript
CODE:
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
const session = new Supabase.ai.Session('mistral')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  const output = await session.run(prompt, { stream: true })

  const headers = new Headers({
    'Content-Type': 'text/event-stream',
    Connection: 'keep-alive',
  })

  const stream = new ReadableStream({
    async start(controller) {
      const encoder = new TextEncoder()

      try {
        for await (const chunk of output) {
          controller.enqueue(encoder.encode(chunk.response ?? ''))
        }
      } catch (err) {
        console.error('Stream error:', err)
      } finally {
        controller.close()
      }
    },
  })

  return new Response(stream, {
    headers,
  })
})

----------------------------------------

TITLE: Installing Supabase Flutter Package
DESCRIPTION: Command to add the supabase_flutter package to a Flutter project using the Flutter CLI.

LANGUAGE: sh
CODE:
flutter pub add supabase_flutter

----------------------------------------

TITLE: Starting Wrangler Development Server
DESCRIPTION: Command to start the Wrangler development server for local testing of Cloudflare Workers.

LANGUAGE: bash
CODE:
npx wrangler dev

----------------------------------------

TITLE: Implementing Profile Management View in SwiftUI
DESCRIPTION: Creates a SwiftUI view for user profile management, including updating profile information and uploading profile photos using Supabase Storage.

LANGUAGE: swift
CODE:
import SwiftUI
import PhotosUI
import Storage
import Supabase

struct ProfileView: View {
  @State var username = ""
  @State var fullName = ""
  @State var website = ""

  @State var isLoading = false

  @State var imageSelection: PhotosPickerItem?
  @State var avatarImage: AvatarImage?

  var body: some View {
    NavigationStack {
      Form {
        Section {
          HStack {
            Group {
              if let avatarImage {
                avatarImage.image.resizable()
              } else {
                Color.clear
              }
            }
            .scaledToFit()
            .frame(width: 80, height: 80)

            Spacer()

            PhotosPicker(selection: $imageSelection, matching: .images) {
              Image(systemName: "pencil.circle.fill")
                .symbolRenderingMode(.multicolor)
                .font(.system(size: 30))
                .foregroundColor(.accentColor)
            }
          }
        }

        Section {
          TextField("Username", text: $username)
            .textContentType(.username)
            .textInputAutocapitalization(.never)
          TextField("Full name", text: $fullName)
            .textContentType(.name)
          TextField("Website", text: $website)
            .textContentType(.URL)
            .textInputAutocapitalization(.never)
        }

        Section {
          Button("Update profile") {
            updateProfileButtonTapped()
          }
          .bold()

          if isLoading {
            ProgressView()
          }
        }
      }
      .navigationTitle("Profile")
      .toolbar(content: {
        ToolbarItem {
          Button("Sign out", role: .destructive) {
            Task {
              try? await supabase.auth.signOut()
            }
          }
        }
      })
      .onChange(of: imageSelection) { _, newValue in
        guard let newValue else { return }
        loadTransferable(from: newValue)
      }
    }
    .task {
      await getInitialProfile()
    }
  }

  func getInitialProfile() async {
    // ... (implementation details)
  }

  func updateProfileButtonTapped() {
    // ... (implementation details)
  }

  private func loadTransferable(from imageSelection: PhotosPickerItem) {
    // ... (implementation details)
  }

  private func downloadImage(path: String) async throws {
    // ... (implementation details)
  }

  private func uploadImage() async throws -> String? {
    // ... (implementation details)
  }
}

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the SvelteKit development server.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Basic Hello World Supabase Edge Function Implementation in TypeScript
DESCRIPTION: A simple Edge Function that accepts a name parameter and returns a greeting message. Demonstrates basic request handling and JSON response formatting.

LANGUAGE: typescript
CODE:
interface reqPayload {
	name: string;
}

console.info('server started');

Deno.serve(async (req: Request) => {
	const { name }: reqPayload = await req.json();
	const data = {
		message: `Hello ${name} from foo!`,
	};

	return new Response(
		JSON.stringify(data),
		{ headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' }}
		);
});

----------------------------------------

TITLE: Creating Server Client for Supabase in Next.js
DESCRIPTION: This code creates a server client for Supabase using @supabase/ssr in a Next.js app. It implements cookie handling with getAll and setAll methods, adhering to the recommended pattern for SSR.

LANGUAGE: typescript
CODE:
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

----------------------------------------

TITLE: Query Plan Analysis with OrioleDB
DESCRIPTION: Demonstrates how to view and analyze query execution plans for OrioleDB tables using EXPLAIN commands.

LANGUAGE: sql
CODE:
EXPLAIN SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;

EXPLAIN SELECT * FROM blog_post WHERE id = 1;

EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;

----------------------------------------

TITLE: Sign In with Notion - Flutter Implementation
DESCRIPTION: Flutter implementation for Notion OAuth authentication with support for web and mobile platforms through deep linking.

LANGUAGE: dart
CODE:
Future<void> signInWithNotion() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.notion,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Initiating OAuth Sign In with Apple in TypeScript
DESCRIPTION: Use the signInWithOAuth method from the Supabase JavaScript library to start the Apple Sign In process on web platforms.

LANGUAGE: typescript
CODE:
supabase.auth.signInWithOAuth({
  provider: 'apple',
})

----------------------------------------

TITLE: Creating a Publication for Specific Tables in SQL
DESCRIPTION: This SQL command creates a publication that listens to changes on individual specified tables.

LANGUAGE: sql
CODE:
create publication publication_name
for table table_one, table_two;

----------------------------------------

TITLE: Pulling Auth Schema Changes in Supabase CLI
DESCRIPTION: Command to pull auth schema changes as a migration file locally.

LANGUAGE: bash
CODE:
supabase db pull --schema auth

----------------------------------------

TITLE: Creating Indexes for Efficient Auditing Queries in PostgreSQL
DESCRIPTION: Adds BRIN and BTREE indexes to optimize query performance for time range and table filtering in the audit log.

LANGUAGE: sql
CODE:
-- index ts for time range filtering
create index record_version_ts
  on audit.record_version
  using brin(ts);

-- index table_oid for table filtering
create index record_version_table_oid
  on audit.record_version
  using btree(table_oid);

-- index record_id for fast searching
create index record_version_record_id on audit.record_version (record_id)
where record_id is not null;

-- index old_record_id for fast searching
create index record_version_old_record_id on audit.record_version (record_id)
where old_record_id is not null;

----------------------------------------

TITLE: Uploading to Supabase Storage Bucket
DESCRIPTION: Command line syntax for uploading files from a local folder to a Supabase Storage bucket. It requires specifying the prefix, folder, and bucket name.

LANGUAGE: bash
CODE:
node upload.js <prefix> <folder> <bucket>

----------------------------------------

TITLE: Creating IVFFlat Index for Cosine Distance in SQL
DESCRIPTION: SQL command to create an IVFFlat index using the vector_cosine_ops operator class for cosine distance. The index is created on the 'column_name' of the 'items' table with 100 lists.

LANGUAGE: sql
CODE:
create index on items using ivfflat (column_name vector_cosine_ops) with (lists = 100);

----------------------------------------

TITLE: Implementing Menubar Component in React
DESCRIPTION: Example of using the menubar component in a React application, demonstrating the structure and various sub-components.

LANGUAGE: tsx
CODE:
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>

----------------------------------------

TITLE: Configuring Fetch-Retry Options
DESCRIPTION: Example showing how to configure retry behavior with custom options including retry attempts, delay, and error conditions.

LANGUAGE: javascript
CODE:
const fetchWithRetry = fetchRetry(fetch, {
  retries: 3, // Number of retry attempts
  retryDelay: (attempt) => Math.min(1000 * 2 ** attempt, 30000), // Exponential backoff
  retryOn: [520], // Retry only on Cloudflare errors
})

----------------------------------------

TITLE: Diffing Schema Changes in Supabase
DESCRIPTION: These commands use the Supabase CLI to generate a diff of schema changes in the 'auth' and 'storage' schemas between the old and new projects.

LANGUAGE: bash
CODE:
supabase link --project-ref "$OLD_PROJECT_REF"
supabase db diff --linked --schema auth,storage > changes.sql

----------------------------------------

TITLE: Initializing Supabase Client for Realtime Presence
DESCRIPTION: Sets up the Supabase client with the project URL and anonymous key for using Realtime Presence. This is a prerequisite for all Presence operations.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://<project>.supabase.co'
const SUPABASE_KEY = '<your-anon-key>'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)

LANGUAGE: dart
CODE:
void main() {
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
  );

  runApp(MyApp());
}

final supabase = Supabase.instance.client;

LANGUAGE: swift
CODE:
let supabaseURL = "https://<project>.supabase.co"
let supabaseKey = "<your-anon-key>"
let supabase = SupabaseClient(supabaseURL: URL(string: supabaseURL)!, supabaseKey: supabaseKey)

let realtime = supabase.realtime

LANGUAGE: kotlin
CODE:
val supabaseUrl = "https://<project>.supabase.co"
val supabaseKey = "<your-anon-key>"
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    install(Realtime)
}

LANGUAGE: python
CODE:
from supabase import create_client

SUPABASE_URL = 'https://<project>.supabase.co'
SUPABASE_KEY = '<your-anon-key>'

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

----------------------------------------

TITLE: Inserting Data with Return Value in v1
DESCRIPTION: In v1, insert, upsert, update, and delete operations do not return rows by default. To return inserted data, add a select() call at the end of the query.

LANGUAGE: dart
CODE:
final insertedData = await supabase.from('my_table').insert(data).select();

----------------------------------------

TITLE: Configuring GitHub OAuth with Environment Variables
DESCRIPTION: Example of referencing environment variables in config.toml for GitHub OAuth configuration using the env() function.

LANGUAGE: toml
CODE:
[auth.external.github]
enabled = true
client_id = "env(GITHUB_CLIENT_ID)"
secret = "env(GITHUB_SECRET)"
redirect_uri = "" # Overrides the default auth redirectUrl.

----------------------------------------

TITLE: Archiving a Single Message from PGMQ Queue in SQL
DESCRIPTION: Removes a single message from the queue and inserts it into the queue's archive using the pgmq.archive function.

LANGUAGE: sql
CODE:
select * from pgmq.archive('my_queue', 1);

----------------------------------------

TITLE: Testing RLS Policy Results with pgTAP
DESCRIPTION: Tests the actual data returned by RLS policies using the results_eq() function to compare expected and actual results.

LANGUAGE: sql
CODE:
begin;
select plan( 1 );

select results_eq(
    'select * from profiles()',
    $$VALUES ( 1, 'Anna'), (2, 'Bruce'), (3, 'Caryn')$$,
    'profiles() should return all users'
);


select * from finish();
rollback;

----------------------------------------

TITLE: Querying and Displaying Supabase Data in SwiftUI
DESCRIPTION: This SwiftUI view fetches instrument data from Supabase and displays it in a List. It uses a task to perform the asynchronous database query, handles errors, and shows a loading indicator while data is being fetched.

LANGUAGE: swift
CODE:
struct ContentView: View {

  @State var instruments: [Instrument] = []

  var body: some View {
    List(instruments) { instrument in
      Text(instrument.name)
    }
    .overlay {
      if instruments.isEmpty {
        ProgressView()
      }
    }
    .task {
      do {
        instruments = try await supabase.from("instruments").select().execute().value
      } catch {
        dump(error)
      }
    }
  }
}

----------------------------------------

TITLE: Signing in with Keycloak OAuth in Flutter
DESCRIPTION: This code snippet shows how to implement Keycloak OAuth sign-in using Supabase's Flutter client library. It uses the signInWithOAuth method, specifying OAuthProvider.keycloak as the provider and handling platform-specific configurations.

LANGUAGE: dart
CODE:
Future<void> signInWithKeycloak() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.keycloak,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

----------------------------------------

TITLE: Performance Comparison Script between Psycopg and Supabase Client
DESCRIPTION: Python script that compares query execution time between direct PostgreSQL connection using psycopg and Supabase client. Includes functions for both connection methods and timing measurements

LANGUAGE: python
CODE:
import time
from supabase import Client, create_client

import psycopg


def psycop_call(): #user_ids: list[str]):
    user="YOUR_SUPABASE_USER"
    password="YOUR_SUPABASE_PASSWORD"
    host="SUPABASE_HOST"
    port=5432
    database="postgres"

    with psycopg.connect(f"host={host} port={port} dbname={database} user={user} password={password}") as conn:
        # Open a cursor to perform database operations
        results = []
        with conn.cursor() as cur:
            start = time.time()
            # Execute a command: this creates a new table
            cur.execute("SELECT * FROM public.your_table_name")
            cur.fetchall()
            for record in cur:
                results.append(record)
            stop = time.time()
            return (stop - start)


def supabase_call():
    supabase: Client = create_client("SUPABASE_URL", "SUPBASE_SERVICE_ROLE_KEY")
    start = time.time()
    result = supabase.table("your_table_name").select("*").execute()
    stop = time.time()
    return (stop - start)


if __name__ == "__main__":
    ref = psycop_call()
    sup = supabase_call()
    print(f"postgres: {ref}, supabase: {sup}, ratio: {sup/ref}")

----------------------------------------

TITLE: Implementing Supabase Pull Function for Data Synchronization
DESCRIPTION: Creates a PostgreSQL function to retrieve changes from the Supabase database since the last sync, formatted for WatermelonDB consumption.

LANGUAGE: sql
CODE:
create or replace function pull(last_pulled_at bigint default 0) returns jsonb as $$
declare _ts timestamp with time zone;
_profiles jsonb;
begin -- timestamp
_ts := to_timestamp(last_pulled_at / 1000);
--- profiles
select jsonb_build_object(
        'created',
        '[]'::jsonb,
        'updated',
        coalesce(
            jsonb_agg(
                jsonb_build_object(
                    'id',
                    t.id,
                    'name',
                    t.name,
                    'website',
                    t.website,
                    'created_at',
                    timestamp_to_epoch(t.created_at),
                    'updated_at',
                    timestamp_to_epoch(t.updated_at)
                )
            ) filter (
                where t.deleted_at is null
                    and t.last_modified_at > _ts
            ),
            '[]'::jsonb
        ),
        'deleted',
        coalesce(
            jsonb_agg(to_jsonb(t.id)) filter (
                where t.deleted_at is not null
                    and t.last_modified_at > _ts
            ),
            '[]'::jsonb
        )
    ) into _profiles
from sync_profiles_view t;
return jsonb_build_object(
    'changes',
    jsonb_build_object(
        'profiles',
        _profiles
    ),
    'timestamp',
    timestamp_to_epoch(now())
);
end;
$$ language plpgsql;

----------------------------------------

TITLE: Implementing Sign Out - Flutter
DESCRIPTION: Flutter implementation for signing out users and clearing their session data.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Implementing Authentication in SvelteKit
DESCRIPTION: Svelte code for implementing sign up, sign in, and sign out functionality in a SvelteKit application.

LANGUAGE: svelte
CODE:
<script>
  export let data
  let { supabase } = data
  $: ({ supabase } = data)

  let email
  let password

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
  }
</script>

<form on:submit={handleSignUp}>
  <input name="email" bind:value={email} />
  <input type="password" name="password" bind:value={password} />
  <button>Sign up</button>
</form>

<button on:click={handleSignIn}>Sign in</button>
<button on:click={handleSignOut}>Sign out</button>

----------------------------------------

TITLE: Starting Local Supabase Database with Backup
DESCRIPTION: Shell commands for initializing and starting a local Supabase database instance using a backup file.

LANGUAGE: sh
CODE:
supabase init
echo '15.6.1.115' > supabase/.temp/postgres-version
supabase db start --from-backup db_cluster.backup

----------------------------------------

TITLE: Using Auth Admin Methods in supabase-js v2
DESCRIPTION: This snippet demonstrates the new location of server-side Auth methods in supabase-js v2, which have been moved from supabase.auth.api to supabase.auth.admin.

LANGUAGE: typescript
CODE:
const { data: user, error } = await supabase.auth.admin.listUsers()

----------------------------------------

TITLE: Example Nix Store Path for Firefox Package
DESCRIPTION: Demonstrates the unique directory structure Nix uses to store packages in the Nix store, showing how each package gets a cryptographic hash based on its dependencies.

LANGUAGE: sh
CODE:
/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/

----------------------------------------

TITLE: Reading BuildConfig Values
DESCRIPTION: Configure Gradle to read Supabase credentials from local.properties

LANGUAGE: kotlin
CODE:
defaultConfig {
   applicationId "com.example.manageproducts"
   minSdkVersion 22
   targetSdkVersion 33
   versionCode 5
   versionName "1.0"
   testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

   Properties properties = new Properties()
   properties.load(project.rootProject.file("local.properties").newDataInputStream())
   buildConfigField("String", "SUPABASE_ANON_KEY", "\"${properties.getProperty("SUPABASE_ANON_KEY")}\"") 
   buildConfigField("String", "SECRET", "\"${properties.getProperty("SECRET")}\"") 
   buildConfigField("String", "SUPABASE_URL", "\"${properties.getProperty("SUPABASE_URL")}\"")
}

----------------------------------------

TITLE: Accessing Custom Schema with cURL
DESCRIPTION: cURL commands for making requests to a custom schema in Supabase. Shows examples for both GET (using Accept-Profile) and POST (using Content-Profile) requests.

LANGUAGE: bash
CODE:
# Append /rest/v1/ to your URL, and then use the table name as the route.

# for GET or HEAD request use Accept-Profile
curl '<SUPABASE_URL>/rest/v1/todos' \
  -H "apikey: <SUPABASE_ANON_KEY>" \
  -H "Authorization: Bearer <SUPABASE_ANON_KEY>" \
  -H "Accept-Profile: myschema"

# for POST, PATCH, PUT and DELETE Request use Content-Profile
curl -X POST '<SUPABASE_URL>/rest/v1/todos' \
  -H "apikey: <SUPABASE_ANON_KEY>" \
  -H "Authorization: Bearer <SUPABASE_ANON_KEY>" \
  -H "Content-Type: application/json" \
  -H "Content-Profile: myschema" \
  -d '{"column_name": "value"}'

----------------------------------------

TITLE: Server-side Data Loading
DESCRIPTION: Server-side code to fetch data from Supabase using the load function in SvelteKit.

LANGUAGE: javascript
CODE:
import { supabase } from "$lib/supabaseClient";

export async function load() {
  const { data } = await supabase.from("instruments").select();
  return {
    instruments: data ?? [],
  };
}

----------------------------------------

TITLE: Copying Environment Variables for Upstash Redis in Supabase
DESCRIPTION: This command copies the example environment file to create a local configuration for the Upstash Redis connection in Supabase.

LANGUAGE: bash
CODE:
cp supabase/.env.local.example supabase/.env.local

----------------------------------------

TITLE: Installing Form Components via CLI
DESCRIPTION: Command to install form components using the shadcn-ui CLI.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add form

----------------------------------------

TITLE: Inserting Time-Series Data into TimescaleDB Hypertable
DESCRIPTION: SQL command to insert sample temperature data from multiple sensors into the TimescaleDB hypertable. This demonstrates how to populate the table with time-series data.

LANGUAGE: sql
CODE:
insert into temperatures (time, sensor_id, temperature)
values
    ('2023-02-14 09:00:00', 1, 23.5),
    ('2023-02-14 09:00:00', 2, 21.2),
    ('2023-02-14 09:05:00', 1, 24.5),
    ('2023-02-14 09:05:00', 2, 22.3),
    ('2023-02-14 09:10:00', 1, 25.1),
    ('2023-02-14 09:10:00', 2, 23.9),
    ('2023-02-14 09:15:00', 1, 24.9),
    ('2023-02-14 09:15:00', 2, 22.7),
    ('2023-02-14 09:20:00', 1, 24.7),
    ('2023-02-14 09:20:00', 2, 23.5);

----------------------------------------

TITLE: Initializing Meta Data Configuration for React Page
DESCRIPTION: Exports meta information object containing page title and description for the Acceptable Use Policy page.

LANGUAGE: javascript
CODE:
export const meta = {
  title: 'Acceptable Use Policy | Supabase',
  description: 'Supabase Acceptable Use Policy',
}

----------------------------------------

TITLE: Installing Supabase SSR Dependencies
DESCRIPTION: Commands to install the required Supabase packages for SSR implementation

LANGUAGE: bash
CODE:
npm install @supabase/ssr @supabase/supabase-js

----------------------------------------

TITLE: Creating Initial Flutter Project
DESCRIPTION: Commands to create and run a new Flutter project

LANGUAGE: bash
CODE:
flutter create my_chat_app
cd my_chat_app
flutter run

----------------------------------------

TITLE: Cloning Migration Tool Repository
DESCRIPTION: Command to clone the firebase-to-supabase repository to begin migration process.

LANGUAGE: bash
CODE:
git clone https://github.com/supabase-community/firebase-to-supabase.git

----------------------------------------

TITLE: Importing Context Menu Components
DESCRIPTION: TypeScript code showing how to import the necessary context menu components from the UI library.

LANGUAGE: tsx
CODE:
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from '@/components/ui/context-menu'

----------------------------------------

TITLE: Sign In with Figma - Flutter
DESCRIPTION: Implementation of Figma OAuth authentication using the Supabase Flutter client. Includes options for redirect handling and launch mode configuration for web and mobile platforms.

LANGUAGE: dart
CODE:
Future<void> signInWithFigma() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.figma,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Defining Integrations Array in JavaScript/JSX
DESCRIPTION: Array of AI integration options listing supported platforms like OpenAI, Amazon Bedrock, Hugging Face, LangChain and LlamaIndex with their descriptions.

LANGUAGE: javascript
CODE:
export const integrations = [
  {
    name: 'OpenAI',
    description: 'OpenAI is an AI research and deployment company. Supabase provides a simple way to use OpenAI in your applications.',
    href: '/guides/ai/examples/building-chatgpt-plugins',
  },
  {
    name: 'Amazon Bedrock',
    description: 'A fully managed service that offers a choice of high-performing foundation models from leading AI companies.',
    href: '/guides/ai/integrations/amazon-bedrock',
  },
  {
    name: 'Hugging Face',
    description: "Hugging Face is an open-source provider of NLP technologies. Supabase provides a simple way to use Hugging Face's models in your applications.",
    href: '/guides/ai/hugging-face',
  },
  {
    name: 'LangChain',
    description: 'LangChain is a language-agnostic, open-source, and self-hosted API for text translation, summarization, and sentiment analysis.',
    href: '/guides/ai/langchain',
  },
  {
    name: 'LlamaIndex',
    description: 'LlamaIndex is a data framework for your LLM applications.',
    href: '/guides/ai/integrations/llamaindex',
  },
]

----------------------------------------

TITLE: Creating Authentication Component
DESCRIPTION: Builds a React component for handling user authentication using magic links with Refine's useLogin hook

LANGUAGE: tsx
CODE:
import { useState } from 'react'
import { useLogin } from '@refinedev/core'

export default function Auth() {
  const [email, setEmail] = useState('')
  const { isLoading, mutate: login } = useLogin()

  const handleLogin = async (event: { preventDefault: () => void }) => {
    event.preventDefault()
    login({ email })
  }
  // ... component JSX
}

----------------------------------------

TITLE: Creating a RedwoodJS App with TypeScript
DESCRIPTION: Command to create a new RedwoodJS application with TypeScript support using the Yarn package manager.

LANGUAGE: bash
CODE:
yarn create redwood-app my-app --ts

----------------------------------------

TITLE: Sign In with Figma - Kotlin
DESCRIPTION: Implementation of Figma OAuth authentication using the Supabase Kotlin client. Uses a suspend function to handle the asynchronous authentication process.

LANGUAGE: kotlin
CODE:
suspend fun signInWithFigma() {
	supabase.auth.signInWith(Figma)
}

----------------------------------------

TITLE: Async Auth Session Retrieval in supabase-js v2
DESCRIPTION: This example shows the new async approach to retrieving the auth session in supabase-js v2, which helps solve issues related to session management across multiple tabs.

LANGUAGE: typescript
CODE:
const { data } = await supabase.auth.getSession()

----------------------------------------

TITLE: Initializing Supabase Bootstrap via CLI
DESCRIPTION: Command to launch a new Supabase project using the Bootstrap feature through the Supabase CLI.

LANGUAGE: bash
CODE:
supabase bootstrap

----------------------------------------

TITLE: Initializing a Nuxt 3 Application
DESCRIPTION: Use npx to create a new Nuxt 3 application and install the Nuxt Supabase module.

LANGUAGE: bash
CODE:
npx nuxi init nuxt-user-management

cd nuxt-user-management

npm install @nuxtjs/supabase --save-dev

----------------------------------------

TITLE: Setting Up Supabase Client in React
DESCRIPTION: Creates a helper file to initialize the Supabase client using environment variables.

LANGUAGE: js
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

----------------------------------------

TITLE: Creating Vector Collection
DESCRIPTION: Creates or retrieves a collection for storing vectors, specifying the collection name and vector dimensions.

LANGUAGE: python
CODE:
docs = vx.get_or_create_collection(name="docs", dimension=3)

----------------------------------------

TITLE: Uploading a File using Dart
DESCRIPTION: This Dart code demonstrates how to create and upload a file to the 'public' bucket using the Supabase client library.

LANGUAGE: dart
CODE:
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  // Create file `example.txt` and upload it in `public` bucket
  final file = File('example.txt');
  file.writeAsStringSync('File content');
  final storageResponse = await supabase
      .storage
      .from('public')
      .upload('example.txt', file);
}

----------------------------------------

TITLE: Manual Installation of Form Dependencies
DESCRIPTION: Command to manually install required dependencies for form components.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod

----------------------------------------

TITLE: Initializing Supabase Client in RedwoodJS App
DESCRIPTION: Setting up the Supabase client and authentication provider in the main App component.

LANGUAGE: javascript
CODE:
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

const App = () => (
  <FatalErrorBoundary page={FatalErrorPage}>
    <RedwoodProvider titleTemplate="%PageTitle | %AppTitle">
      <AuthProvider client={supabase} type="supabase">
        <RedwoodApolloProvider>
          <Routes />
        </RedwoodApolloProvider>
      </AuthProvider>
    </RedwoodProvider>
  </FatalErrorBoundary>
)

----------------------------------------

TITLE: Supabase Authentication Sign-In in JavaScript
DESCRIPTION: Demonstrates how to sign in to Supabase using email and password, which returns a user-specific JWT.

LANGUAGE: javascript
CODE:
supabase.auth.signIn({
  email: 'valid.email@supabase.io',
  password: 'They_Live_1988!',
})

----------------------------------------

TITLE: Creating a Supabase Project with Management API
DESCRIPTION: Demonstrates how to use the Management API to create a new Supabase project programmatically using a curl command.

LANGUAGE: bash
CODE:
curl 'https://api.supabase.com/v1/projects' \
  -H 'Authorization: Bearer <[your-access-token](https://supabase.com/dashboard/account/tokens)>' \
  -H "Content-Type: application/json" \
  -d '{"name": "my-project", "organization_id": "cool-green-pqdr0qc", "region": "us-east-1", "plan": "free", "db_pass": "********"}'

----------------------------------------

TITLE: Cloning Firebase-to-Supabase Repository
DESCRIPTION: Command to clone the firebase-to-supabase migration tools repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/supabase-community/firebase-to-supabase.git

----------------------------------------

TITLE: Saving Inference Results in Supabase
DESCRIPTION: Python code to save inference results in a Supabase table. Requires setting up Supabase URL and API key as environment variables.

LANGUAGE: python
CODE:
import os
from supabase import create_client, Client

url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

result = supabase.table('predictions') \
    .insert({"filename": image, "predictions": predictions}) \
    .execute()

----------------------------------------

TITLE: Configuring Carousel Options
DESCRIPTION: Example of passing options to the carousel using the opts prop.

LANGUAGE: tsx
CODE:
<Carousel
  opts={{
    align: 'start',
    loop: true,
  }}
>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>

----------------------------------------

TITLE: Migrating Storage Objects in Supabase
DESCRIPTION: This JavaScript script uses the Supabase JavaScript client to migrate storage objects from an old Supabase project to a new one. It iterates through all objects, downloading them from the old project and uploading them to the new project.

LANGUAGE: js
CODE:
// npm install @supabase/supabase-js@1
const { createClient } = require('@supabase/supabase-js')

const OLD_PROJECT_URL = 'https://xxx.supabase.co'
const OLD_PROJECT_SERVICE_KEY = 'old-project-service-key-xxx'

const NEW_PROJECT_URL = 'https://yyy.supabase.co'
const NEW_PROJECT_SERVICE_KEY = 'new-project-service-key-yyy'

;(async () => {
  const oldSupabaseRestClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY, {
    db: {
      schema: 'storage',
    },
  })
  const oldSupabaseClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY)
  const newSupabaseClient = createClient(NEW_PROJECT_URL, NEW_PROJECT_SERVICE_KEY)

  // make sure you update max_rows in postgrest settings if you have a lot of objects
  // or paginate here
  const { data: oldObjects, error } = await oldSupabaseRestClient.from('objects').select()
  if (error) {
    console.log('error getting objects from old bucket')
    throw error
  }

  for (const objectData of oldObjects) {
    console.log(`moving ${objectData.id}`)
    try {
      const { data, error: downloadObjectError } = await oldSupabaseClient.storage
        .from(objectData.bucket_id)
        .download(objectData.name)
      if (downloadObjectError) {
        throw downloadObjectError
      }

      const { _, error: uploadObjectError } = await newSupabaseClient.storage
        .from(objectData.bucket_id)
        .upload(objectData.name, data, {
          upsert: true,
          contentType: objectData.metadata.mimetype,
          cacheControl: objectData.metadata.cacheControl,
        })
      if (uploadObjectError) {
        throw uploadObjectError
      }
    } catch (err) {
      console.log('error moving ', objectData)
      console.log(err)
    }
  }
})()

----------------------------------------

TITLE: Implementing Resumable Uploads with tus-js-client in JavaScript
DESCRIPTION: This snippet demonstrates how to use the tus-js-client library to implement resumable uploads for Supabase Storage. It includes error handling, progress tracking, and authentication with Supabase.

LANGUAGE: javascript
CODE:
const tus = require('tus-js-client')

const projectId = ''

async function uploadFile(bucketName, fileName, file) {
    const { data: { session } } = await supabase.auth.getSession()

    return new Promise((resolve, reject) => {
        var upload = new tus.Upload(file, {
            endpoint: `https://${projectId}.supabase.co/storage/v1/upload/resumable`,
            retryDelays: [0, 3000, 5000, 10000, 20000],
            headers: {
                authorization: `Bearer ${session.access_token}`,
                'x-upsert': 'true', // optionally set upsert to true to overwrite existing files
            },
            uploadDataDuringCreation: true,
            removeFingerprintOnSuccess: true, // Important if you want to allow re-uploading the same file https://github.com/tus/tus-js-client/blob/main/docs/api.md#removefingerprintonsuccess
            metadata: {
                bucketName: bucketName,
                objectName: fileName,
                contentType: 'image/png',
                cacheControl: 3600,
            },
            chunkSize: 6 * 1024 * 1024, // NOTE: it must be set to 6MB (for now) do not change it
            onError: function (error) {
                console.log('Failed because: ' + error)
                reject(error)
            },
            onProgress: function (bytesUploaded, bytesTotal) {
                var percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2)
                console.log(bytesUploaded, bytesTotal, percentage + '%')
            },
            onSuccess: function () {
                console.log('Download %s from %s', upload.file.name, upload.url)
                resolve()
            },
        })


        // Check if there are any previous uploads to continue.
        return upload.findPreviousUploads().then(function (previousUploads) {
            // Found previous uploads so we select the first one.
            if (previousUploads.length) {
                upload.resumeFromPreviousUpload(previousUploads[0])
            }

            // Start the upload
            upload.start()
        })
    })
}

----------------------------------------

TITLE: Importing Foreign Schema Tables
DESCRIPTION: SQL commands to import tables from a foreign schema, either all tables or specific ones.

LANGUAGE: sql
CODE:
import foreign schema "<foreign_schema>"
from server "<foreign_server>"
into "<host_schema>";

import foreign schema "<foreign_schema>"
limit to (
    "<table_name1>",
    "<table_name2>"
)
from server "<foreign_server>"
into "<host_schema>";

----------------------------------------

TITLE: Setting Realtime Connection Logging in JavaScript
DESCRIPTION: Code showing how to enable Realtime connection logging by configuring log_level parameter when creating Supabase client

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const options = {
  realtime: {
    params: {
      log_level: 'info',
    },
  },
}
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', options)

----------------------------------------

TITLE: Deleting Role in Postgres SQL
DESCRIPTION: This final SQL command actually drops the specified role from the Postgres database, assuming all previous steps have been completed successfully.

LANGUAGE: sql
CODE:
DROP role <role>;

----------------------------------------

TITLE: Streaming ZIP File Upload to Supabase Storage
DESCRIPTION: Demonstrates how to stream and extract ZIP files directly to Supabase Storage using ZipReaderStream. This implementation is suitable for files under 100MB due to memory constraints.

LANGUAGE: jsx
CODE:
import { ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'
import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)

Deno.serve(async (req) => {
  const uploadId = crypto.randomUUID()

  const { error } = await supabase.storage.createBucket(uploadId, {
    public: false,
  })

  for await (const entry of await req.body.pipeThrough(new ZipReaderStream())) {
    // write file to Supabase Storage
    const { error } = await supabase.storage
      .from(uploadId)
      .upload(entry.filename, entry.readable, {})

    console.log('uploaded', entry.filename)
  }

  return new Response(
    JSON.stringify({
      uploadId,
    }),
    {
      headers: {
        'content-type': 'application/json',
      },
    }
  )
})

----------------------------------------

TITLE: Configuring Supabase Edge Functions for Background Tasks
DESCRIPTION: TOML configuration to enable background tasks in Supabase Edge Functions when developing locally.

LANGUAGE: toml
CODE:
[edge_runtime]
policy = "per_worker"

----------------------------------------

TITLE: Syncing and Tracking Presence State in Supabase
DESCRIPTION: Demonstrates how to listen for presence events (sync, join, leave) and handle state changes in a Supabase channel.

LANGUAGE: javascript
CODE:
const roomOne = supabase.channel('room_01')

roomOne
  .on('presence', { event: 'sync' }, () => {
    const newState = roomOne.presenceState()
    console.log('sync', newState)
  })
  .on('presence', { event: 'join' }, ({ key, newPresences }) => {
    console.log('join', key, newPresences)
  })
  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
    console.log('leave', key, leftPresences)
  })
  .subscribe()

LANGUAGE: dart
CODE:
final supabase = Supabase.instance.client;

final roomOne = supabase.channel('room_01');

roomOne.onPresenceSync((_) {
  final newState = roomOne.presenceState();
  print('sync: $newState');
}).onPresenceJoin((payload) {
  print('join: $payload');
}).onPresenceLeave((payload) {
  print('leave: $payload');
}).subscribe();

LANGUAGE: swift
CODE:
let roomOne = await supabase.channel("room_01")
let presenceStream = await roomOne.presenceChange()

await roomOne.subscribe()

for await presence in presenceStream {
  print(presence.join) // You can also use presence.decodeJoins(as: MyType.self)
  print(presence.leaves) // You can also use presence.decodeLeaves(as: MyType.self)
}

LANGUAGE: kotlin
CODE:
val roomOne = supabase.channel("room_01")
val presenceFlow: Flow<PresenceAction> = roomOne.presenceChangeFlow()
presenceFlow
    .onEach {
        println(it.joins) //You can also use it.decodeJoinsAs<YourType>()
        println(it.leaves) //You can also use it.decodeLeavesAs<YourType>()
    }
    .launchIn(yourCoroutineScope) //You can also use .collect { } here

roomOne.subscribe()

LANGUAGE: python
CODE:
room_one = supabase.channel('room_01')

room_one
  .on_presence_sync(lambda: print('sync', room_one.presenceState()))
  .on_presence_join(lambda key, curr_presences, joined_presences: print('join', key, curr_presences, joined_presences))
  .on_presence_leave(lambda key, curr_presences, left_presences: print('leave', key, curr_presences, left_presences))
  .subscribe()

----------------------------------------

TITLE: Displaying Data in Svelte Component
DESCRIPTION: Svelte component code to display the fetched data as a list.

LANGUAGE: svelte
CODE:
<script>
  let { data } = $props();
</script>

<ul>
  {#each data.instruments as instrument}
    <li>{instrument.name}</li>
  {/each}
</ul>

----------------------------------------

TITLE: GitHub Actions Workflow for Database Testing
DESCRIPTION: YAML configuration for setting up automated database testing in a CI pipeline using GitHub Actions.

LANGUAGE: yaml
CODE:
name: Database Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Start Supabase
        run: supabase start

      - name: Run Tests
        run: supabase test db

----------------------------------------

TITLE: Deploying Supabase Function for OG Image Generation
DESCRIPTION: This snippet shows the command to deploy the 'lw13-meetups-ogs' Supabase function for Open Graph image generation. It disables JWT verification during deployment.

LANGUAGE: bash
CODE:
supabase functions deploy lw13-meetups-ogs --no-verify-jwt

----------------------------------------

TITLE: Installing Radio Group Dependencies Manually
DESCRIPTION: Command to install the required Radix UI dependency for the Radio Group component.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-radio-group

----------------------------------------

TITLE: Generating Embeddings using Edge Function
DESCRIPTION: SQL query demonstrating the use of edge.exec function to generate embeddings using an AI session.

LANGUAGE: sql
CODE:
select edge.exec(
$js$

const session = new Supabase.ai.Session('gte-small');
return await session.run('hello world');

$js$);

----------------------------------------

TITLE: Implementing User Account Management in Vue 3
DESCRIPTION: Create a Vue component for managing user profiles, including updating information and signing out.

LANGUAGE: vue
CODE:
<script setup>
const supabase = useSupabaseClient()

const loading = ref(true)
const username = ref('')
const website = ref('')
const avatar_path = ref('')

loading.value = true
const user = useSupabaseUser()

const { data } = await supabase
  .from('profiles')
  .select(`username, website, avatar_url`)
  .eq('id', user.value.id)
  .single()

if (data) {
  username.value = data.username
  website.value = data.website
  avatar_path.value = data.avatar_url
}

loading.value = false

async function updateProfile() {
  try {
    loading.value = true
    const user = useSupabaseUser()

    const updates = {
      id: user.value.id,
      username: username.value,
      website: website.value,
      avatar_url: avatar_path.value,
      updated_at: new Date(),
    }

    const { error } = await supabase.from('profiles').upsert(updates, {
      returning: 'minimal', // Don't return the value after inserting
    })
    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}

async function signOut() {
  try {
    loading.value = true
    const { error } = await supabase.auth.signOut()
    if (error) throw error
    user.value = null
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="form-widget" @submit.prevent="updateProfile">
    <div>
      <label for="email">Email</label>
      <input id="email" type="text" :value="user.email" disabled />
    </div>
    <div>
      <label for="username">Username</label>
      <input id="username" type="text" v-model="username" />
    </div>
    <div>
      <label for="website">Website</label>
      <input id="website" type="url" v-model="website" />
    </div>

    <div>
      <input
        type="submit"
        class="button primary block"
        :value="loading ? 'Loading ...' : 'Update'"
        :disabled="loading"
      />
    </div>

    <div>
      <button class="button block" @click="signOut" :disabled="loading">Sign Out</button>
    </div>
  </form>
</template>

----------------------------------------

TITLE: Managing Database Triggers for Data Import
DESCRIPTION: SQL commands to disable and enable triggers on database tables during large data imports to improve import performance.

LANGUAGE: sql
CODE:
-- Disable triggers on a specific table
ALTER TABLE table_name DISABLE TRIGGER ALL;

-- To re-enable triggers
ALTER TABLE table_name ENABLE TRIGGER ALL;

----------------------------------------

TITLE: Creating a Custom Key for Encryption in Supabase Vault using PostgreSQL
DESCRIPTION: This code shows how to create a custom key using the pgsodium.create_key() function. This allows for using different keys for different secrets in the Vault.

LANGUAGE: sql
CODE:
select * from pgsodium.create_key('This is a comment for the new key');

----------------------------------------

TITLE: Database Import Using psql
DESCRIPTION: Command to import the exported database file into Supabase using psql and a connection string.

LANGUAGE: bash
CODE:
psql -d "$YOUR_CONNECTION_STRING" -f render_dump.sql

----------------------------------------

TITLE: Using Accordion Component
DESCRIPTION: Example implementation of a single-item accordion with WAI-ARIA compliant markup and collapsible functionality.

LANGUAGE: tsx
CODE:
<Accordion type="single" collapsible>
  <AccordionItem value="item-1">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>Yes. It adheres to the WAI-ARIA design pattern.</AccordionContent>
  </AccordionItem>
</Accordion>

----------------------------------------

TITLE: MCP Server Configuration for Windows
DESCRIPTION: JSON configuration for setting up MCP server connection on Windows using cmd to run the Postgres server. Requires connection string and proper PATH configuration.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "supabase": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@modelcontextprotocol/server-postgres", "<connection-string>"]
    }
  }
}

----------------------------------------

TITLE: Using Dialog within Context Menu in React
DESCRIPTION: This example demonstrates how to properly nest a Dialog component within a Context Menu, including trigger and content structure.

LANGUAGE: tsx
CODE:
<Dialog>
  <ContextMenu>
    <ContextMenuTrigger>Dialog not centered</ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>Open</ContextMenuItem>
      <ContextMenuItem>Download</ContextMenuItem>
      <DialogTrigger asChild>
        <ContextMenuItem>
          <span>Delete</span>
        </ContextMenuItem>
      </DialogTrigger>
    </ContextMenuContent>
  </ContextMenu>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. Are you sure you want to permanently delete this file from our
        servers?
      </DialogDescription>
    </DialogHeader>
    <DialogFooter>
      <Button type="submit">Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>

----------------------------------------

TITLE: Creating and Inserting Unstructured Metadata with Embeddings in SQL
DESCRIPTION: This snippet shows how to create a table with unstructured metadata using a JSONB column and insert an embedding with associated metadata. All metadata is stored in a single flexible JSON field.

LANGUAGE: sql
CODE:
create table docs (
  id uuid primary key,
  embedding vector(3),
  meta jsonb
);

insert into docs
  (id, embedding, meta)
values
  (
    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',
    array[0.1, 0.2, 0.3],
    '{"content": "Hello world", "url": "/hello-world"}'
  );

----------------------------------------

TITLE: Directory Structure Implementation
DESCRIPTION: Example of implementing nested directory structure using children nodes in the data object.

LANGUAGE: tsx
CODE:
const data = {
  //...
  children: [
    {
      name: 'Current batch',
    },
    {
      name: 'Older queries',
      children: [
        {
          name: 'all countries',
        },
        {
          name: 'add new countries',
        },
      ],
    },
  ],
}

----------------------------------------

TITLE: Creating a Movies Table in Postgres
DESCRIPTION: SQL snippet to create a table structure for storing movie information in Postgres.

LANGUAGE: sql
CODE:
create table movies (
	id bigint primary key generated by default as identity,
	title text not null,
	original_title text not null,
	overview text not null,
	created_at timestamptz not null default now()
);

----------------------------------------

TITLE: Installing Poetry Package Manager
DESCRIPTION: Command to install Poetry package manager using pip

LANGUAGE: shell
CODE:
pip install poetry

----------------------------------------

TITLE: Product Repository Implementation
DESCRIPTION: Repository class implementing CRUD operations for products using Supabase

LANGUAGE: kotlin
CODE:
class ProductRepositoryImpl @Inject constructor(
    private val postgrest: Postgrest,
    private val storage: Storage,
) : ProductRepository {
    override suspend fun createProduct(product: Product): Boolean {
        return try {
            withContext(Dispatchers.IO) {
                val productDto = ProductDto(
                    name = product.name,
                    price = product.price,
                )
                postgrest.from("products").insert(productDto)
                true
            }
            true
        } catch (e: java.lang.Exception) {
            throw e
        }
    }

    override suspend fun getProducts(): List<ProductDto>? {
        return withContext(Dispatchers.IO) {
            val result = postgrest.from("products")
                .select().decodeList<ProductDto>()
            result
        }
    }

    // Additional methods omitted for brevity
}

----------------------------------------

TITLE: Starting the React Development Server
DESCRIPTION: Launches the React development server to run the application locally on port 5173.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Product Repository Implementation
DESCRIPTION: Repository class implementing CRUD operations for products using Supabase

LANGUAGE: kotlin
CODE:
class ProductRepositoryImpl @Inject constructor(
    private val postgrest: Postgrest,
    private val storage: Storage,
) : ProductRepository {
    override suspend fun createProduct(product: Product): Boolean {
        return try {
            withContext(Dispatchers.IO) {
                val productDto = ProductDto(
                    name = product.name,
                    price = product.price,
                )
                postgrest.from("products").insert(productDto)
                true
            }
            true
        } catch (e: java.lang.Exception) {
            throw e
        }
    }

    override suspend fun getProducts(): List<ProductDto>? {
        return withContext(Dispatchers.IO) {
            val result = postgrest.from("products")
                .select().decodeList<ProductDto>()
            result
        }
    }

    // Additional methods omitted for brevity
}

----------------------------------------

TITLE: Importing Database to Supabase using psql in Bash
DESCRIPTION: This command uses psql to import the previously exported Heroku database file (heroku_dump.sql) into a Supabase project. It requires the Supabase connection string to be provided.

LANGUAGE: bash
CODE:
psql -d "$YOUR_CONNECTION_STRING" -f heroku_dump.sql

----------------------------------------

TITLE: Importing Database to Supabase Using psql
DESCRIPTION: This command uses psql to import the previously exported dump.sql file into the Supabase project's database using the provided connection string.

LANGUAGE: bash
CODE:
psql -d "$YOUR_CONNECTION_STRING" -f dump.sql

----------------------------------------

TITLE: Starting the SolidJS App
DESCRIPTION: Runs the development server to start the SolidJS application.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating Utility Functions for Edge Function Integration
DESCRIPTION: SQL functions for retrieving project URL from vault and invoking Edge Functions, including utility functions for clearing columns on update.

LANGUAGE: sql
CODE:
create schema util;

create function util.project_url()
returns text
language plpgsql
security definer
as $$
declare
  secret_value text;
begin
  select decrypted_secret into secret_value from vault.decrypted_secrets where name = 'project_url';
  return secret_value;
end;
$$;

create or replace function util.invoke_edge_function(
  name text,
  body jsonb,
  timeout_milliseconds int = 5 * 60 * 1000
)
returns void
language plpgsql
as $$
declare
  headers_raw text;
  auth_header text;
begin
  headers_raw := current_setting('request.headers', true);
  auth_header := case
    when headers_raw is not null then
      (headers_raw::json->>'authorization')
    else
      null
  end;
  perform net.http_post(
    url => util.project_url() || '/functions/v1/' || name,
    headers => jsonb_build_object(
      'Content-Type', 'application/json',
      'Authorization', auth_header
    ),
    body => body,
    timeout_milliseconds => timeout_milliseconds
  );
end;
$$;

create or replace function util.clear_column()
returns trigger
language plpgsql as $$
declare
    clear_column text := TG_ARGV[0];
begin
    NEW := NEW #= hstore(clear_column, NULL);
    return NEW;
end;
$$;

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: React component for handling user authentication with magic link login.

LANGUAGE: jsx
CODE:
const Auth = () => {
  const { logIn } = useAuth()
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')

  const handleLogin = async (email) => {
    try {
      setLoading(true)
      const { error } = await logIn({ email })
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      alert(error.error_description || error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    // Component JSX
  )
}

----------------------------------------

TITLE: Implementing Avatar Component for Profile Photos
DESCRIPTION: Creates a reusable Avatar component for handling profile photo uploads using the device camera.

LANGUAGE: jsx
CODE:
import { IonIcon } from '@ionic/react';
import { person } from 'ionicons/icons';
import { Camera, CameraResultType } from '@capacitor/camera';
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';
import './Avatar.css'
export function Avatar({
  url,
  onUpload,
}: {
  url: string;
  onUpload: (e: any, file: string) => Promise<void>;
}) {
  const [avatarUrl, setAvatarUrl] = useState<string | undefined>();

  useEffect(() => {
    if (url) {
      downloadImage(url);
    }
  }, [url]);
  const uploadAvatar = async () => {
    try {
      const photo = await Camera.getPhoto({
        resultType: CameraResultType.DataUrl,
      });

      const file = await fetch(photo.dataUrl!)
        .then((res) => res.blob())
        .then(
          (blob) =>
            new File([blob], 'my-file', { type: `image/${photo.format}` })
        );

      const fileName = `${Math.random()}-${new Date().getTime()}.${
        photo.format
      }`;
      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(fileName, file);
      if (uploadError) {
        throw uploadError;
      }
      onUpload(null, fileName);
    } catch (error) {
      console.log(error);
    }
  };

  const downloadImage = async (path: string) => {
    try {
      const { data, error } = await supabase.storage
        .from('avatars')
        .download(path);
      if (error) {
        throw error;
      }
      const url = URL.createObjectURL(data!);
      setAvatarUrl(url);
    } catch (error: any) {
      console.log('Error downloading image: ', error.message);
    }
  };

  return (
    <div className="avatar">
    <div className="avatar_wrapper" onClick={uploadAvatar}>
      {avatarUrl ? (
        <img src={avatarUrl} />
      ) : (
        <IonIcon icon={person} className="no-avatar" />
      )}
    </div>

    </div>
  );
}

----------------------------------------

TITLE: Creating Enum Type in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a custom Enum type called 'mood' with four possible values using the CREATE TYPE statement.

LANGUAGE: sql
CODE:
create type mood as enum (
  'happy',
  'sad',
  'excited',
  'calm'
);

----------------------------------------

TITLE: Creating Zod Schema for Form Validation in TypeScript
DESCRIPTION: Defines a Zod schema for form validation, specifying rules for the username field.

LANGUAGE: tsx
CODE:
'use client'

import { z } from 'zod'

const formSchema = z.object({
  username: z.string().min(2).max(50),
})

----------------------------------------

TITLE: Creating Next.js 13 Project
DESCRIPTION: Initialize a new Next.js 13 project with experimental app directory support using create-next-app

LANGUAGE: bash
CODE:
npx create-next-app@latest --experimental-app next13

----------------------------------------

TITLE: Starting Local Supabase Development Server
DESCRIPTION: Commands to start Supabase locally and serve functions without JWT verification for testing

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: Installing and Starting Roboflow Inference
DESCRIPTION: Command to install and start Roboflow Inference, a computer vision inference server, using pip and Docker.

LANGUAGE: bash
CODE:
pip install inference inference-cli inference-sdk && inference server start

----------------------------------------

TITLE: Configuring Tailwind Animations
DESCRIPTION: Configuration for adding accordion animation keyframes and classes to Tailwind CSS config file. Defines smooth transitions for accordion expansion and collapse.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
}

----------------------------------------

TITLE: Inserting Array Data in PostgreSQL
DESCRIPTION: SQL command to insert a record with an array of strings into the arraytest table.

LANGUAGE: sql
CODE:
INSERT INTO arraytest (id, textarray) VALUES (1, ARRAY['Harry', 'Larry', 'Moe']);

----------------------------------------

TITLE: Creating Organization Settings Table in SQL
DESCRIPTION: SQL code to create a table for storing organization settings including SSO provider information.

LANGUAGE: sql
CODE:
create table organization_settings (
  -- the organization's unique ID
  id uuid not null primary key,
  -- the organization's SSO identity provider
  sso_provider_id uuid unique,
  -- name of the organization
  name text,
  -- billing plan (paid, Free, Enterprise)
  billing_plan text
);

----------------------------------------

TITLE: Custom Link Component in Breadcrumb
DESCRIPTION: Shows how to use a custom link component from a routing library within the breadcrumb.

LANGUAGE: tsx
CODE:
import { Link } from "next/link"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink asChild>
        <Link href="/">Home</Link>
      </BreadcrumbLink>
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>

----------------------------------------

TITLE: Basic Breadcrumb Usage in React
DESCRIPTION: Example of how to use the breadcrumb components to create a basic navigation hierarchy.

LANGUAGE: tsx
CODE:
<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>

----------------------------------------

TITLE: Running Database Tests with Supabase CLI
DESCRIPTION: Executes database tests using the Supabase CLI command.

LANGUAGE: bash
CODE:
supabase test db

----------------------------------------

TITLE: Example Connection String Parameters in Prisma
DESCRIPTION: Demonstrates the syntax for adding query parameters to Prisma connection strings to configure specific settings.

LANGUAGE: markdown
CODE:
# Example of query parameters

connection_string.../postgres?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE

----------------------------------------

TITLE: Implementing Amazon Bedrock Image Generation in Supabase Edge Function
DESCRIPTION: TypeScript code for a Supabase Edge Function that uses Amazon Bedrock to generate images based on text prompts and uploads them to Supabase Storage.

LANGUAGE: typescript
CODE:
// We need to mock the file system for the AWS SDK to work.
import { prepareVirtualFile } from 'https://deno.land/x/mock_file@v1.1.2/mod.ts'

import { BedrockRuntimeClient, InvokeModelCommand } from 'npm:@aws-sdk/client-bedrock-runtime'
import { createClient } from 'npm:@supabase/supabase-js'
import { decode } from 'npm:base64-arraybuffer'

console.log('Hello from Amazon Bedrock!')

Deno.serve(async (req) => {
  prepareVirtualFile('./aws/config')
  prepareVirtualFile('./aws/credentials')

  const client = new BedrockRuntimeClient({
    region: Deno.env.get('AWS_DEFAULT_REGION') ?? 'us-west-2',
    credentials: {
      accessKeyId: Deno.env.get('AWS_ACCESS_KEY_ID') ?? '',
      secretAccessKey: Deno.env.get('AWS_SECRET_ACCESS_KEY') ?? '',
      sessionToken: Deno.env.get('AWS_SESSION_TOKEN') ?? '',
    },
  })

  const { prompt, seed } = await req.json()
  console.log(prompt)
  const input = {
    contentType: 'application/json',
    accept: '*/*',
    modelId: 'amazon.titan-image-generator-v1',
    body: JSON.stringify({
      taskType: 'TEXT_IMAGE',
      textToImageParams: { text: prompt },
      imageGenerationConfig: {
        numberOfImages: 1,
        quality: 'standard',
        cfgScale: 8.0,
        height: 512,
        width: 512,
        seed: seed ?? 0,
      },
    }),
  }

  const command = new InvokeModelCommand(input)
  const response = await client.send(command)
  console.log(response)

  if (response.$metadata.httpStatusCode === 200) {
    const { body, $metadata } = response

    const textDecoder = new TextDecoder('utf-8')
    const jsonString = textDecoder.decode(body.buffer)
    const parsedData = JSON.parse(jsonString)
    console.log(parsedData)
    const image = parsedData.images[0]

    const supabaseClient = createClient(
      // Supabase API URL - env var exported by default.
      Deno.env.get('SUPABASE_URL')!,
      // Supabase API ANON KEY - env var exported by default.
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    const { data: upload, error: uploadError } = await supabaseClient.storage
      .from('images')
      .upload(`${$metadata.requestId ?? ''}.png`, decode(image), {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false,
      })
    if (!upload) {
      return Response.json(uploadError)
    }
    const { data } = supabaseClient.storage.from('images').getPublicUrl(upload.path!)
    return Response.json(data)
  }

  return Response.json(response)
})

----------------------------------------

TITLE: Correct Headers Logging with Object.fromEntries
DESCRIPTION: Proper implementation of request headers logging using Object.fromEntries to convert the Headers object into a regular JavaScript object that can be stringified.

LANGUAGE: typescript
CODE:
Deno.serve(async (req) => {
  let headersObject = Object.fromEntries(req.headers)
  let requestHeaders = JSON.stringify(headersObject, null, 2)
  console.log(`Request headers: ${requestHeaders}`)
  return new Response('ok', {
    headers: {
      'Content-Type': 'application/json',
    },
    status: 200,
  })
})

----------------------------------------

TITLE: Comprehensive SQL Query for Finding Errors in Postgres Logs
DESCRIPTION: This SQL query combines multiple filtering techniques to find specific error events in Postgres logs, including severity, user, message content, and time range.

LANGUAGE: sql
CODE:
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
  and parsed.user_name = 'postgres'
  and regexp_contains(event_message, 'duration|operator')
  and not regexp_contains(parsed.query, '<key words>')
  and postgres_logs.timestamp between '2024-04-15 10:50:00' and '2024-04-15 10:50:27'
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Inserting Embeddings into PostgreSQL Database
DESCRIPTION: Inserts the created embeddings and associated metadata into the PostgreSQL database using the vecs library.

LANGUAGE: python
CODE:
reviews.upsert(records)

----------------------------------------

TITLE: Sign In with Notion - JavaScript Implementation
DESCRIPTION: JavaScript function to handle Notion OAuth authentication using Supabase Auth signInWithOAuth method.

LANGUAGE: javascript
CODE:
async function signInWithNotion() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'notion',
  })
}

----------------------------------------

TITLE: Signing out a user in Supabase (JavaScript)
DESCRIPTION: This code snippet shows how to sign out a user using Supabase authentication. It uses the signOut method to log out the user.

LANGUAGE: javascript
CODE:
const {error} = await supabase.auth.signOut()

----------------------------------------

TITLE: Implementing Realtime Listeners in Dart
DESCRIPTION: Dart implementation showing how to initialize Supabase client and subscribe to real-time INSERT events on a todos table.

LANGUAGE: dart
CODE:
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  // Initialize the Flutter client
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
    realtimeClientOptions: const RealtimeClientOptions(
      eventsPerSecond: 2,
    ),
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

void handleInserts(payload) {
  print('Change received! $payload');
}

// Listen to inserts
supabase
    .channel('todos')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'todos',
        callback: handleInserts)
    .subscribe();

----------------------------------------

TITLE: Searching JSON Data in PostgreSQL
DESCRIPTION: Shows how to search for specific items within JSONB arrays using a CTE and SQL filtering.

LANGUAGE: sql
CODE:
with my_food as
(
  select
    date,
    jsonb_array_elements(food_log)->>'title' as title,
    (jsonb_array_elements(food_log)->'calories')::integer as calories
  from calendar
  where user_id = 'xyz'
    and date between '2022-01-01' and '2022-01-31'
)
select
  title,
  calories
from my_food
where title = 'Garlic Bread';

----------------------------------------

TITLE: Grouped Aggregate Functions with PostgREST
DESCRIPTION: Shows how to group aggregate functions by genre to get release year ranges per movie category.

LANGUAGE: bash
CODE:
curl 'http://postgrest/movies?select=genre,release_year.max(),release_year.min()'

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('movies')
  .select('genre, release_year.max(), release_year.min()')

LANGUAGE: json
CODE:
[
  {
    "genre": "Adventure",
    "max": 2021,
    "min": 2020
  },
  {
    "genre": "Horror",
    "max": 2022,
    "min": 2019
  },
  {
    "genre": "Sci-Fi",
    "max": 2022,
    "min": 2018
  },
  {
    "genre": "Mystery",
    "max": 2019,
    "min": 2019
  }
]

----------------------------------------

TITLE: Creating a New Nuxt Application
DESCRIPTION: This command initializes a new Nuxt application using the latest version of Nuxt.

LANGUAGE: bash
CODE:
npx nuxi@latest init my-app

----------------------------------------

TITLE: Creating a SolidJS App with Degit
DESCRIPTION: Uses the degit command to create a new SolidJS application from a template.

LANGUAGE: bash
CODE:
npx degit solidjs/templates/js my-app

----------------------------------------

TITLE: Initializing Next.js App and Installing Dependencies
DESCRIPTION: Commands to create a new Next.js app and install the required Supabase dependencies.

LANGUAGE: bash
CODE:
npx create-next-app@latest --use-npm supabase-nextjs
cd supabase-nextjs
npm install @supabase/supabase-js
npm install @supabase/ssr

----------------------------------------

TITLE: Flattened Users Table Example
DESCRIPTION: Example of flattened JSON structure for users table after transformation.

LANGUAGE: json
CODE:
[{ "user": "mark", "score": 100 }]

----------------------------------------

TITLE: Adding Pagination to DataTable with TanStack Table
DESCRIPTION: Extends the DataTable component to include pagination functionality using TanStack Table's pagination features.

LANGUAGE: tsx
CODE:
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from '@tanstack/react-table'

import { Button } from "@/components/ui/button"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>{ /* ... */ }</Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Importing Radio Group Card Components
DESCRIPTION: Shows how to import the RadioGroupCard and RadioGroupCardItem components from the UI library.

LANGUAGE: tsx
CODE:
import { RadioGroupCard, RadioGroupCardItem } from 'ui'

----------------------------------------

TITLE: Declarative Configuration for Edge Functions
DESCRIPTION: TOML configuration file example for setting function-specific options like JWT verification and import map location.

LANGUAGE: toml
CODE:
[functions.hello-world]
verify_jwt = false

----------------------------------------

TITLE: Restoring Supabase Database using psql
DESCRIPTION: This command uses psql to restore the backed-up database to a new Supabase project. It applies roles, schema, and data in a single transaction. The connection string should be replaced with the actual database connection string.

LANGUAGE: bash
CODE:
psql \
  --single-transaction \
  --variable ON_ERROR_STOP=1 \
  --file roles.sql \
  --file schema.sql \
  --command 'SET session_replication_role = replica' \
  --file data.sql \
  --dbname [CONNECTION_STRING]

----------------------------------------

TITLE: HTTP DELETE Request with pg_net
DESCRIPTION: Example of making an asynchronous HTTP DELETE request using pg_net's http_delete function.

LANGUAGE: sql
CODE:
select
    net.http_delete(
        'https://dummy.restapiexample.com/api/v1/delete/2'
    ) as request_id;

----------------------------------------

TITLE: HTTP DELETE Request with pg_net
DESCRIPTION: Example of making an asynchronous HTTP DELETE request using pg_net's http_delete function.

LANGUAGE: sql
CODE:
select
    net.http_delete(
        'https://dummy.restapiexample.com/api/v1/delete/2'
    ) as request_id;

----------------------------------------

TITLE: Static Data Fetching with Server Components
DESCRIPTION: Implementing static data fetching in Next.js 13 Server Components with Supabase

LANGUAGE: tsx
CODE:
import Link from 'next/link'
import supabase from '../../utils/supabase'

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select('id, title')

  if (!posts) {
    return <p>No posts found.</p>
  }

  return posts.map((post) => (
    <p key={post.id}>
      <Link href={`/static/${post.id}`}>{post.title}</Link>
    </p>
  ))
}

----------------------------------------

TITLE: Implementing Firebase Cloud Messaging (FCM) Push Notifications in Supabase Edge Function
DESCRIPTION: This TypeScript code defines a Supabase edge function that handles database webhooks to send push notifications using Firebase Cloud Messaging (FCM). It retrieves the user's FCM token from the profiles table, generates an access token for FCM, and sends a notification based on the inserted record in the notifications table.

LANGUAGE: typescript
CODE:
import { createClient } from 'npm:@supabase/supabase-js@2'
import { JWT } from 'npm:google-auth-library@9'
import serviceAccount from '../service-account.json' with { type: 'json' }

interface Notification {
  id: string
  user_id: string
  body: string
}

interface WebhookPayload {
  type: 'INSERT'
  table: string
  record: Notification
  schema: 'public'
}

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()

  const { data } = await supabase
    .from('profiles')
    .select('fcm_token')
    .eq('id', payload.record.user_id)
    .single()

  const fcmToken = data!.fcm_token as string

  const accessToken = await getAccessToken({
    clientEmail: serviceAccount.client_email,
    privateKey: serviceAccount.private_key,
  })

  const res = await fetch(
    `https://fcm.googleapis.com/v1/projects/${serviceAccount.project_id}/messages:send`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify({
        message: {
          token: fcmToken,
          notification: {
            title: `Notification from Supabase`,
            body: payload.record.body,
          },
        },
      }),
    }
  )

  const resData = await res.json()
  if (res.status < 200 || 299 < res.status) {
    throw resData
  }

  return new Response(JSON.stringify(resData), {
    headers: { 'Content-Type': 'application/json' },
  })
})

const getAccessToken = ({
  clientEmail,
  privateKey,
}: {
  clientEmail: string
  privateKey: string
}): Promise<string> => {
  return new Promise((resolve, reject) => {
    const jwtClient = new JWT({
      email: clientEmail,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/firebase.messaging'],
    })
    jwtClient.authorize((err, tokens) => {
      if (err) {
        reject(err)
        return
      }
      resolve(tokens!.access_token!)
    })
  })
}

----------------------------------------

TITLE: Installing Accordion Component via CLI
DESCRIPTION: Command to install the accordion component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add accordion

----------------------------------------

TITLE: Advanced Full Text Search Queries
DESCRIPTION: SQL queries showing various full text search patterns including matching all words, any words, and negation.

LANGUAGE: sql
CODE:
select * from memos where content &@~ 'postgres pgroonga';

select * from memos where content &@~ 'postgres OR pgroonga';

select * from memos where content &@~ 'postgres -pgroonga';

----------------------------------------

TITLE: Basic Carousel Usage in React
DESCRIPTION: Basic implementation of a carousel component with content, items, and navigation buttons.

LANGUAGE: tsx
CODE:
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>

----------------------------------------

TITLE: Checking Local Supabase Status via CLI
DESCRIPTION: Command to retrieve database connection details and status for a local Supabase instance using the CLI.

LANGUAGE: shell
CODE:
supabase status

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Setting up environment variables for Supabase integration in RedwoodJS.

LANGUAGE: bash
CODE:
SUPABASE_URL=YOUR_SUPABASE_URL
SUPABASE_KEY=YOUR_SUPABASE_ANON_KEY
SUPABASE_JWT_SECRET=YOUR_SUPABASE_JWT_SECRET

----------------------------------------

TITLE: Joining Local and Remote Data
DESCRIPTION: SQL query demonstrating how to join local Postgres tables with remote Snowflake data.

LANGUAGE: sql
CODE:
select
  users.id,
  count(order_history.event)
from
  snowflake.order_history
  join auth.users on auth.users.id = snowflake.order_history.user_id
where order_history.event = 'purchase' and order_history.user_id = '<some_user_id>';

----------------------------------------

TITLE: Rust Definition Enum
DESCRIPTION: Rust enum definition showing the possible types of GraphQL definitions.

LANGUAGE: rust
CODE:
#[derive(Debug, Clone, PartialEq)]
pub enum Definition<'a, T: Text<'a>> {
    Operation(OperationDefinition<'a, T>),
    Fragment(FragmentDefinition<'a, T>),
}

----------------------------------------

TITLE: Creating Vue Application with NPM
DESCRIPTION: Initialize a new Vue.js application using the Vue CLI

LANGUAGE: sh
CODE:
npm init vue@latest my-app

----------------------------------------

TITLE: Configuring Nuxt 3 with Supabase
DESCRIPTION: Update the Nuxt configuration file to include the Supabase module and custom CSS.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from 'nuxt'

// https://v3.nuxtjs.org/api/configuration/nuxt.config
export default defineNuxtConfig({
  modules: ['@nuxtjs/supabase'],
  css: ['@/assets/main.css'],
})

----------------------------------------

TITLE: Importing Cost Warning Component in React
DESCRIPTION: Imports the CostWarning component from a local module for displaying SMS provider cost warnings.

LANGUAGE: javascript
CODE:
import { CostWarning } from './AuthSmsProviderConfig.Warnings'

----------------------------------------

TITLE: Installing Plugin Dependencies with Poetry
DESCRIPTION: Command to install the required dependencies for the ChatGPT Retrieval Plugin using Poetry package manager.

LANGUAGE: bash
CODE:
poetry install

----------------------------------------

TITLE: Installing Supabase Client Library for SolidJS
DESCRIPTION: Navigates to the app directory and installs the supabase-js client library using npm.

LANGUAGE: bash
CODE:
cd my-app && npm install @supabase/supabase-js

----------------------------------------

TITLE: Generating Migration File
DESCRIPTION: Use the Supabase CLI to generate a new migration file based on local database changes.

LANGUAGE: bash
CODE:
supabase db diff -f "add_employees_table"

----------------------------------------

TITLE: Basic Main Worker Implementation in JavaScript
DESCRIPTION: Example showing how to create a Main Worker that handles requests by delegating to User Workers. Includes configuration for memory limits, timeouts, and environment variables.

LANGUAGE: jsx
CODE:
serve(async (req: Request) => {
  const memoryLimitMb = 150
  const workerTimeoutMs = 1 * 60 * 1000
  const noModuleCache = false
  const importMapPath = null
  const envVars = [
    ['USER', 'foo'],
    ['PASSWORD', 'BAR'],
  ]

  try {
    const worker = await EdgeRuntime.userWorkers.create({
      servicePath,
      memoryLimitMb,
      workerTimeoutMs,
      noModuleCache,
      importMapPath,
      envVars,
    })
    return await worker.fetch(req)
  } catch (e) {
    const error = { msg: e.toString() }
    return new Response(JSON.stringify(error), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Configuring .npmrc for Private Registries
DESCRIPTION: Example of an .npmrc file configuration for using private npm packages in a Supabase Edge Function.

LANGUAGE: plaintext
CODE:
@myorg:registry=https://npm.registryhost.com
//npm.registryhost.com/:_authToken=VALID_AUTH_TOKEN

----------------------------------------

TITLE: Dropping a Queue with PGMQ in SQL
DESCRIPTION: Deletes a queue and its archive table using the pgmq.drop_queue function.

LANGUAGE: sql
CODE:
select * from pgmq.drop_queue('my_unlogged');

----------------------------------------

TITLE: Background Utilities in Tailwind CSS
DESCRIPTION: Examples of background utilities showing different surface levels and overlay styles.

LANGUAGE: css
CODE:
bg-surface-100
bg-overlay
bg-alternative
text-background-surface-100

----------------------------------------

TITLE: Implementing Framework Selection Combobox in React
DESCRIPTION: A React component that creates a searchable dropdown combobox for framework selection. Uses Popover and Command components to handle the UI, with state management for selected values and dropdown visibility. Includes accessibility attributes and styling utilities.

LANGUAGE: tsx
CODE:
'use client'

import * as React from 'react'
import { Check, ChevronsUpDown } from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from '@/components/ui/command'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'

const frameworks = [
  {
    value: 'next.js',
    label: 'Next.js',
  },
  {
    value: 'sveltekit',
    label: 'SvelteKit',
  },
  {
    value: 'nuxt.js',
    label: 'Nuxt.js',
  },
  {
    value: 'remix',
    label: 'Remix',
  },
  {
    value: 'astro',
    label: 'Astro',
  },
]

export function ComboboxDemo() {
  const [open, setOpen] = React.useState(false)
  const [value, setValue] = React.useState('')

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : 'Select framework...'}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder="Search framework..." />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? '' : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      'mr-2 h-4 w-4',
                      value === framework.value ? 'opacity-100' : 'opacity-0'
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )

----------------------------------------

TITLE: Configuring Supabase Client with Amazon Cognito in TypeScript
DESCRIPTION: This snippet demonstrates how to set up the Supabase client using TypeScript and AWS Amplify, including token fetching and Realtime authentication.

LANGUAGE: typescript
CODE:
import { fetchAuthSession, Hub } from 'aws-amplify/auth'

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    const tokens = await fetchAuthSession()

    // Alternatively you can use tokens?.idToken instead.
    return tokens?.accessToken
  },
})

// if you're using Realtime you also need to set up a listener for Cognito auth changes
Hub.listen('auth', () => {
  fetchAuthSession().then((tokens) => supabase.realtime.setAuth(tokens?.accessToken))
})

----------------------------------------

TITLE: Creating RUM Index for Full-Text Search
DESCRIPTION: Example of creating a RUM index for text search using tsvector type with rum_tsvector_ops operator class.

LANGUAGE: sql
CODE:
CREATE TABLE test_rum(t text, a tsvector);

CREATE TRIGGER tsvectorupdate
BEFORE UPDATE OR INSERT ON test_rum
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('a', 'pg_catalog.english', 't');

INSERT INTO test_rum(t) VALUES ('The situation is most beautiful');
INSERT INTO test_rum(t) VALUES ('It is a beautiful');
INSERT INTO test_rum(t) VALUES ('It looks like a beautiful place');

CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);

----------------------------------------

TITLE: Signing out using Supabase in Flutter
DESCRIPTION: This snippet demonstrates how to implement sign-out functionality using Supabase in a Flutter application. It uses the signOut method from the Supabase Auth API to remove the user from the session.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
  await supabase.auth.signOut();
}

----------------------------------------

TITLE: Querying Recent Database Errors in Supabase
DESCRIPTION: SQL query to check for recent errors the Auth server encountered while interacting with the database. It selects relevant information from postgres_logs, filtering for errors related to the supabase_auth_admin user.

LANGUAGE: sql
CODE:
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
  and regexp_contains(parsed.user_name, 'supabase_auth_admin')
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Implementing Slack Bot Mention Handler
DESCRIPTION: TypeScript implementation of an Edge Function that handles Slack bot mentions and URL verification. It uses Deno's HTTP server and Slack Web API to process incoming webhook events and respond to mentions.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.197.0/http/server.ts';
import { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js';

const slackBotToken = Deno.env.get("SLACK_TOKEN") ?? "";
const botClient = new WebClient(slackBotToken);

console.log(`Slack URL verification function up and running!`);
serve(async (req) => {
  try {
    const reqBody = await req.json();
    console.log(JSON.stringify(reqBody, null, 2));
    const { token, challenge, type, event } = reqBody;

    if (type == 'url_verification') {
      return new Response(JSON.stringify({ challenge }), {
        headers: { 'Content-Type': 'application/json' },
        status: 200,
      });
    } else if (event.type == 'app_mention') {
      const { user, text, channel, ts } = event;
      // Here you should process the text received and return a response:
      const response = await botClient.chat.postMessage({
        channel: channel,
        text: `Hello <@${user}>!`,
        thread_ts: ts,
      });
      return new Response('ok', { status: 200 });
    }
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});

----------------------------------------

TITLE: Creating Supabase Function
DESCRIPTION: Command to create a new Supabase Edge Function for email handling

LANGUAGE: bash
CODE:
supabase functions new send-email

----------------------------------------

TITLE: Checking HTTP Request Queue Status in Supabase SQL
DESCRIPTION: SQL query to verify if the http_request_queue table is empty before attempting to resolve permission issues.

LANGUAGE: sql
CODE:
select * from net.http_request_queue

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Create environment configuration file for storing Hugging Face access token.

LANGUAGE: shell
CODE:
HUGGING_FACE_ACCESS_TOKEN=<your-token-here>

----------------------------------------

TITLE: Starting the Rails development server
DESCRIPTION: Launches the Rails development server to run the application locally.

LANGUAGE: bash
CODE:
bin/rails server

----------------------------------------

TITLE: Using Expanding Textarea Component in React/TypeScript
DESCRIPTION: This snippet demonstrates the basic usage of the ExpandingTextArea component in a React/TypeScript application.

LANGUAGE: tsx
CODE:
<ExpandingTextArea />

----------------------------------------

TITLE: Installing Scroll Area Component via CLI
DESCRIPTION: Command to install the Scroll Area component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add scroll-area

----------------------------------------

TITLE: Example SQL View Owner Change
DESCRIPTION: SQL command demonstrating how to change the owner of a view for Row Level Security implementation.

LANGUAGE: sql
CODE:
ALTER VIEW my_view OWNER TO authenticated;

----------------------------------------

TITLE: Running Supabase Locally for ChatGPT Retrieval Plugin
DESCRIPTION: Bash command to start Supabase locally using Supabase CLI, which includes pgvector and applies necessary migrations.

LANGUAGE: bash
CODE:
supabase start

----------------------------------------

TITLE: Configuring import_map.json for Legacy Dependency Management
DESCRIPTION: Example of an import_map.json file used for legacy dependency management in a Supabase Edge Function.

LANGUAGE: json
CODE:
{
  "imports": {
    "lodash": "https://cdn.skypack.dev/lodash"
  }
}

----------------------------------------

TITLE: Configuring Default Robot Access Settings
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers full access to the site. The file includes a reference link to the robots.txt specification documentation.

LANGUAGE: robots.txt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Querying Array Data with Swift Supabase Client
DESCRIPTION: Swift implementation for querying array data using Supabase client with a custom response struct.

LANGUAGE: swift
CODE:
struct Response: Decodable {
  let textarray: [String]
}

let response: [Response] = try await supabase.from("arraytest").select("textarray").execute().value
dump(response)

----------------------------------------

TITLE: Querying Array Data with Swift Supabase Client
DESCRIPTION: Swift implementation for querying array data using Supabase client with a custom response struct.

LANGUAGE: swift
CODE:
struct Response: Decodable {
  let textarray: [String]
}

let response: [Response] = try await supabase.from("arraytest").select("textarray").execute().value
dump(response)

----------------------------------------

TITLE: Importing Menubar Components in React
DESCRIPTION: Import statement for the menubar components in a React application.

LANGUAGE: tsx
CODE:
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from '@/components/ui/menubar'

----------------------------------------

TITLE: Running pgloader Migration with Configuration File
DESCRIPTION: This bash command executes pgloader with a specified configuration file to perform the database migration from MSSQL to Supabase's Postgres.

LANGUAGE: bash
CODE:
pgloader config.load

----------------------------------------

TITLE: Verifying Database Setting Change
DESCRIPTION: SQL command to verify a database setting change by showing the current value of 'statement_timeout'.

LANGUAGE: sql
CODE:
show "statement_timeout";

----------------------------------------

TITLE: Creating Stripe Products Foreign Table
DESCRIPTION: SQL command to create a foreign table that maps to Stripe products data structure.

LANGUAGE: sql
CODE:
create foreign table products (
  id text,
  name text,
  description text,
  default_price text
)
server my_stripe_server
options ( object 'products' );

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Commands to install the necessary npm packages for React Query and Supabase integration.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js @tanstack/react-query @supabase/ssr @supabase-cache-helpers/postgrest-react-query

----------------------------------------

TITLE: Text-to-Image Edge Function Implementation
DESCRIPTION: TypeScript implementation of an Edge Function that uses Hugging Face's inference API to convert text prompts into images.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'

const hf = new HfInference(Deno.env.get('HUGGING_FACE_ACCESS_TOKEN'))

serve(async (req) => {
  const { prompt } = await req.json()

  const image = await hf.textToImage(
    {
      inputs: prompt,
      model: 'stabilityai/stable-diffusion-2',
    },
    {
      use_cache: false,
    }
  )

  return new Response(image)
})

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Creating a Supabase client instance with environment variables.

LANGUAGE: tsx
CODE:
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

----------------------------------------

TITLE: Sign In with Notion - Kotlin Implementation
DESCRIPTION: Kotlin implementation for Notion OAuth authentication using Supabase Auth.

LANGUAGE: kotlin
CODE:
suspend fun signInWithNotion() {
	supabase.auth.signInWith(Notion)
}

----------------------------------------

TITLE: Querying RUM Index with Timestamp Distance
DESCRIPTION: Example of querying a RUM index using timestamp distance operator for temporal ordering.

LANGUAGE: sql
CODE:
SELECT id, d, d `<=>` '2016-05-16 14:21:25' FROM tsts WHERE t @@ 'wr&qh' ORDER BY d `<=>` '2016-05-16 14:21:25' LIMIT 5;

----------------------------------------

TITLE: Implementing WebSocket Server with Deno
DESCRIPTION: Basic example of setting up a WebSocket server using Deno's native WebSocket API. Handles connection upgrades and implements basic WebSocket lifecycle events.

LANGUAGE: typescript
CODE:
Deno.serve(req => {
    const upgrade = req.headers.get("upgrade") || "";

    if (upgrade.toLowerCase() != "WebSocket") {
        return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 });
    }

    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => console.log("socket opened");
    socket.onmessage = (e) => {
        console.log("socket message:", e.data);
        socket.send(new Date().toString());
    };

    socket.onerror = e => console.log("socket errored:", e.message);
    socket.onclose = () => console.log("socket closed");

    return response;
});

----------------------------------------

TITLE: Basic Usage of Navigation Menu in React
DESCRIPTION: This snippet shows a basic implementation of the Navigation Menu component with a single menu item and its content.

LANGUAGE: tsx
CODE:
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment variable setup for Supabase authentication in a .env file.

LANGUAGE: bash
CODE:
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment variable setup for Supabase authentication in a .env file.

LANGUAGE: bash
CODE:
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY

----------------------------------------

TITLE: Installing Supabase and Fetch-Retry Dependencies
DESCRIPTION: Command to install required npm packages supabase-js and fetch-retry.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js fetch-retry

----------------------------------------

TITLE: Implementing Final Particle Animation Component
DESCRIPTION: Combines all elements to create the final particle animation component with customizable parameters.

LANGUAGE: jsx
CODE:
const Particle = ({ children }: Props) => {
  const particle = useRef(null)

  const pathOffset =
    Math.pow(
      Math.random() * config.xRandomnessShape,
      config.xRandomness - config.xRandomness / 2
    ) * config.xThickness

  const verticalRandomness = Math.random() * (config.yThickness - 1) + 1 - config.yThickness / 2

  const speed = Math.random() * (config.min_speed - config.max_speed) + config.max_speed

  const circumference = (config.widthRadius * Math.PI * 2) / 100
  const delayOffsetFactor = 100
  const delayOffset = Math.random() * delayOffsetFactor

  useFrame(({ clock }) => {
    const timer = clock.getElapsedTime() * speed + delayOffset
    const isEven = Math.floor(timer / circumference) % 2 == 0

    particle.current.position.x = isEven
      ? Math.sin(timer) * config.widthRadius * config.widthRatio + pathOffset
      : Math.sin(timer) * config.widthRadius + pathOffset
    particle.current.position.y = isEven
      ? Math.cos(timer) * config.bottomHeightRadius -
        config.bottomHeightRadius +
        verticalRandomness
      : -Math.cos(timer) * config.topHeightRadius + config.topHeightRadius + verticalRandomness
  })

  return <mesh ref={particle}>{children}</mesh>
}

----------------------------------------

TITLE: Linking Supabase Project
DESCRIPTION: Use the Supabase CLI to link your local project to the remote Supabase project.

LANGUAGE: bash
CODE:
supabase link

----------------------------------------

TITLE: Removing Network Restrictions via Supabase CLI
DESCRIPTION: Use the 'update' subcommand of the Supabase CLI with specific CIDRs to remove all network restrictions from a project. This allows connections from any IP address.

LANGUAGE: bash
CODE:
supabase network-restrictions --project-ref {ref} update --db-allow-cidr 0.0.0.0/0 --db-allow-cidr ::/0 --experimental

----------------------------------------

TITLE: Configuring Edge Runtime Policy in Supabase
DESCRIPTION: This snippet shows how to set the edge runtime policy to 'per_worker' in the Supabase configuration file. This setting is necessary for background tasks to work locally.

LANGUAGE: toml
CODE:
[edge_runtime]
enabled = true
policy = "per_worker"

----------------------------------------

TITLE: Incorrect Headers Logging Example
DESCRIPTION: Example showing incorrect way to log request headers in Edge Functions, which results in empty object output due to Headers object properties not being enumerable.

LANGUAGE: typescript
CODE:
Deno.serve(async (req) => {
  const headers = JSON.stringify(req.headers)
  console.log(`Request headers: ${headers}`)
  // OR
  console.log(`Request headers: ${JSON.stringify(req.headers)}`)
  return new Response('ok', {
    headers: {
      'Content-Type': 'application/json',
    },
    status: 200,
  })
})

----------------------------------------

TITLE: Incorrect Headers Logging Example
DESCRIPTION: Example showing incorrect way to log request headers in Edge Functions, which results in empty object output due to Headers object properties not being enumerable.

LANGUAGE: typescript
CODE:
Deno.serve(async (req) => {
  const headers = JSON.stringify(req.headers)
  console.log(`Request headers: ${headers}`)
  // OR
  console.log(`Request headers: ${JSON.stringify(req.headers)}`)
  return new Response('ok', {
    headers: {
      'Content-Type': 'application/json',
    },
    status: 200,
  })
})

----------------------------------------

TITLE: Handling Realtime Connection Response in TypeScript
DESCRIPTION: This snippet demonstrates the server's response to the initial connection request. It includes Postgres configuration details with a unique ID for routing incoming changes.

LANGUAGE: typescript
CODE:
{
   "event": "phx_reply",
   "topic": string,
   "payload": {
      "response": {
         "postgres_changes": [
            {
               "id": number,
               "event": "*" | "INSERT" | "UPDATE" | "DELETE",
               "schema": string,
               "table": string,
               "filter": string + '=' + "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "in" +  '.' + string
            }
         ]
      },
      "status": "ok" | "error"
   },
   "ref": string
}

----------------------------------------

TITLE: Importing Command Menu Components in React
DESCRIPTION: This snippet shows how to import the necessary components from the 'ui-patterns/CommandMenu' module to implement a Command Menu.

LANGUAGE: tsx
CODE:
import {
  CommandInput,
  CommandList,
  CommandMenu,
  CommandMenuTrigger as CommandMenuTriggerPrimitive,
  CommandProvider,
  useRegisterCommands,
} from 'ui-patterns/CommandMenu'

----------------------------------------

TITLE: Importing Input OTP Components
DESCRIPTION: Import statement for the Input OTP components in a TypeScript React file.

LANGUAGE: typescript
CODE:
import { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot } from '@/components/ui/input-otp'

----------------------------------------

TITLE: Installing Supabase Python Client with Conda
DESCRIPTION: This command installs the Supabase Python client library using Conda from the conda-forge channel.

LANGUAGE: sh
CODE:
conda install -c conda-forge supabase

----------------------------------------

TITLE: Send Email Hook JSON Schema
DESCRIPTION: JSON schema defining the structure of the Send Email Hook inputs including user and email data fields.

LANGUAGE: json
CODE:
{
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "properties": {...}
    },
    "email_data": {
      "type": "object", 
      "properties": {...}
    }
  },
  "required": ["user", "email_data"]
}

----------------------------------------

TITLE: Edge Function Entry Point for OG Image Generation
DESCRIPTION: Sets up a Deno server to handle incoming requests by routing them to the OG image handler. Includes a console log for function initialization.

LANGUAGE: typescript
CODE:
import handler from './handler.tsx'

console.log('Hello from og-image Function!')

Deno.serve(handler)

----------------------------------------

TITLE: Native Apple Sign In with Swift
DESCRIPTION: Implement Apple Sign In for native iOS apps using SwiftUI and the Supabase Swift client.

LANGUAGE: swift
CODE:
import SwiftUI
import AuthenticationServices
import Supabase

struct SignInView: View {
    let client = SupabaseClient(supabaseURL: URL(string: "your url")!, supabaseKey: "your anon key")

    var body: some View {
      SignInWithAppleButton { request in
        request.requestedScopes = [.email, .fullName]
      } onCompletion: { result in
        Task {
          do {
            guard let credential = try result.get().credential as? ASAuthorizationAppleIDCredential
            else {
              return
            }

            guard let idToken = credential.identityToken
              .flatMap({ String(data: $0, encoding: .utf8) })
            else {
              return
            }
              try await client.auth.signInWithIdToken(
              credentials: .init(
                provider: .apple,
                idToken: idToken
              )
            )
          } catch {
            dump(error)
          }
        }
      }
      .fixedSize()
    }
}

----------------------------------------

TITLE: Importing SQL Dump to Self-Hosted Supabase Database
DESCRIPTION: This command uses psql to import a SQL dump file into a self-hosted Supabase database. It connects to the local PostgreSQL instance and executes the contents of the dump file.

LANGUAGE: sql
CODE:
psql -h 127.0.0.1 -p 5432 -d postgres -U postgres -f <dump-file-name>.sql

----------------------------------------

TITLE: Button Variants Helper Import
DESCRIPTION: Import statement for the buttonVariants helper function used for styling links as buttons.

LANGUAGE: tsx
CODE:
import { buttonVariants } from '@/components/ui/button'

----------------------------------------

TITLE: Executing SQL Queries
DESCRIPTION: Example of executing a parameterized SQL query to fetch users above a certain age. Demonstrates template literal syntax for safe query composition.

LANGUAGE: typescript
CODE:
import sql from './db.js'

async function getUsersOver(age) {
  const users = await sql`
    select name, age
    from users
    where age > ${ age }
  `
  // users = Result [{ name: "Walter", age: 80 }, { name: 'Murray', age: 68 }, ...]
  return users
}

----------------------------------------

TITLE: Scaffolding Instrument UI
DESCRIPTION: Command to generate a CRUD UI for the Instrument model using RedwoodJS scaffolding.

LANGUAGE: bash
CODE:
yarn rw g scaffold instrument

----------------------------------------

TITLE: Unnesting Example for Cloudflare Geographic Data in SQL
DESCRIPTION: Shows how to unnest multiple levels of nested data to access Cloudflare geographic information.

LANGUAGE: sql
CODE:
select
  city
from
  edge_logs
cross join unnest(metadata) AS metadata
cross join unnest(request) AS request;
cross join unnest(cf) AS cf;

----------------------------------------

TITLE: Creating Stripe Server Connection in PostgreSQL
DESCRIPTION: SQL command to create a foreign server connection to Stripe using authentication credentials.

LANGUAGE: sql
CODE:
create server stripe_server
foreign data wrapper stripe_wrapper
options (api_key 'sk_test_xxx');

----------------------------------------

TITLE: Comparing JWT Caching Performance in PostgREST 12
DESCRIPTION: Demonstrates the performance improvement in JWT processing time using cURL requests before and after implementing JWT caching in PostgREST 12.

LANGUAGE: bash
CODE:
## before
$ curl 'localhost:3000/authors_only' -H "Authorization: Bearer $JWT" -D -
HTTP/1.1 200 OK
Server-Timing: jwt;dur=147.7

## after, with JWT caching
$ curl 'localhost:3000/authors_only' -H "Authorization: Bearer $JWT" -D -
HTTP/1.1 200 OK
Server-Timing: jwt;dur=14.1

----------------------------------------

TITLE: Serving Edge Function Locally
DESCRIPTION: Command to serve the Edge Function locally with environment variables for testing.

LANGUAGE: shell
CODE:
supabase functions serve --env-file .env.local --no-verify-jwt

----------------------------------------

TITLE: Initialize Supabase Project
DESCRIPTION: Commands to initialize a new Supabase project and start the local development stack.

LANGUAGE: shell
CODE:
supabase init
supabase start

----------------------------------------

TITLE: Preserving Migration History in Supabase
DESCRIPTION: These commands dump the migration history from the old database and restore it to the new database, preserving the migration history when restoring a Supabase project.

LANGUAGE: bash
CODE:
supabase db dump --db-url "$OLD_DB_URL" -f history_schema.sql --schema supabase_migrations
supabase db dump --db-url "$OLD_DB_URL" -f history_data.sql --use-copy --data-only --schema supabase_migrations
psql \
  --single-transaction \
  --variable ON_ERROR_STOP=1 \
  --file history_schema.sql \
  --file history_data.sql \
  --dbname "$NEW_DB_URL"

----------------------------------------

TITLE: Using Hover Card Component in React
DESCRIPTION: Basic usage example of the Hover Card component in a React application, demonstrating the structure with trigger and content.

LANGUAGE: tsx
CODE:
<HoverCard>
  <HoverCardTrigger>Hover</HoverCardTrigger>
  <HoverCardContent>The React Framework – created and maintained by @vercel.</HoverCardContent>
</HoverCard>

----------------------------------------

TITLE: Accessing Supabase Dashboard via Fly CLI
DESCRIPTION: Command to open the Supabase dashboard for a specific Fly.io application.

LANGUAGE: bash
CODE:
flyctl extensions supabase dashboard <app-name>

----------------------------------------

TITLE: Sign In with Email and Password in v1
DESCRIPTION: The signIn method has been replaced with more explicit method signatures like signInWithPassword for better type hinting and clarity.

LANGUAGE: dart
CODE:
await supabase.auth.signInWithPassword(email: email, password: password);

----------------------------------------

TITLE: Fetching Data with Server Components in Next.js
DESCRIPTION: This snippet shows how to fetch data from Supabase using Server Components in Next.js. It demonstrates the simplicity of data fetching in an asynchronous component.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const { data } = await supabase.from('...').select()
  return ...
}

----------------------------------------

TITLE: Creating Migration for Adding Department Column
DESCRIPTION: Generate a new migration file to add the department column to the employees table.

LANGUAGE: bash
CODE:
supabase migration new add_department_column

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Email Hook
DESCRIPTION: Required environment variables for setting up Supabase email hooks with Resend. Includes Resend API key and a base64-encoded secret for the email hook authentication.

LANGUAGE: txt
CODE:
RESEND_API_KEY=<your_resend_api_key>
SEND_EMAIL_HOOK_SECRET=<base64_secret>

----------------------------------------

TITLE: Checking Network Restrictions via Supabase CLI
DESCRIPTION: Use the 'get' subcommand of the Supabase CLI to retrieve the current network restrictions for a project. This command displays the allowed IPv4 and IPv6 CIDRs and whether restrictions are successfully applied.

LANGUAGE: bash
CODE:
supabase network-restrictions --project-ref {ref} get --experimental

----------------------------------------

TITLE: Using Progress Component
DESCRIPTION: Example of implementing the Progress component with a specific value prop.

LANGUAGE: tsx
CODE:
<Progress value={33} />

----------------------------------------

TITLE: Running Supabase OpenAI Function Locally
DESCRIPTION: Starts the Supabase function server locally with environment variables and disabled JWT verification.

LANGUAGE: bash
CODE:
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt

----------------------------------------

TITLE: Importing Resizable Components in React
DESCRIPTION: Example of importing the Resizable components in a React application.

LANGUAGE: tsx
CODE:
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'

----------------------------------------

TITLE: Creating a Simple Search Function with Edge Functions
DESCRIPTION: TypeScript function to perform similarity search using OpenAI embeddings and pgvector in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.170.0/http/server.ts'
import 'https://deno.land/x/xhr@0.2.1/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'
import { supabaseClient } from './lib/supabase'

export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Search query is passed in request payload
  const { query } = await req.json()

  // OpenAI recommends replacing newlines with spaces for best results
  const input = query.replace(/\n/g, ' ')

  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openai = new OpenAIApi(configuration)

  // Generate a one-time embedding for the query itself
  const embeddingResponse = await openai.createEmbedding({
    model: 'text-embedding-ada-002',
    input,
  })

  const [{ embedding }] = embeddingResponse.data.data

  // In production we should handle possible errors
  const { data: documents } = await supabaseClient.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.78, // Choose an appropriate threshold for your data
    match_count: 10, // Choose the number of matches
  })

  return new Response(JSON.stringify(documents), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
})

----------------------------------------

TITLE: Uploading Postgres Documentation to ChatGPT Retrieval Plugin
DESCRIPTION: Bash command to upload Postgres documentation PDF to the ChatGPT Retrieval Plugin's datastore using the /upsert-file endpoint.

LANGUAGE: bash
CODE:
curl -X POST -F \"file=@./postgresql-15-US.pdf\" http://localhost:3333/upsert-file

----------------------------------------

TITLE: Importing Dependencies and Configuration
DESCRIPTION: Python code for importing required libraries and setting up database connection

LANGUAGE: python
CODE:
import sys
import boto3
import vecs
import json
import base64
from matplotlib import pyplot as plt
from matplotlib import image as mpimg
from typing import Optional

DB_CONNECTION = "postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Firestore Document Structure Example
DESCRIPTION: Sample JSON structure showing a Firestore document before flattening.

LANGUAGE: json
CODE:
[{ "user": "mark", "score": 100, "items": ["hammer", "nail", "glue"] }]

----------------------------------------

TITLE: Importing Popover Component in React
DESCRIPTION: This code snippet shows how to import the Popover component and its subcomponents in a React application.

LANGUAGE: tsx
CODE:
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'

----------------------------------------

TITLE: Configuring Swift Package Manager for Supabase
DESCRIPTION: Shows how to configure Package.swift to include Supabase dependencies. Users can choose to import the full Supabase package or individual components like Auth, Realtime, Postgrest, Functions, or Storage.

LANGUAGE: swift
CODE:
let package = Package(
    ...
    dependencies: [
        ...
        .package(
            url: "https://github.com/supabase/supabase-swift.git",
            from: "2.0.0"
        ),
    ],
    targets: [
        .target(
            name: "YourTargetName",
            dependencies: [
                .product(
                    name: "Supabase", // Auth, Realtime, Postgrest, Functions, or Storage
                    package: "supabase-swift"
                ),
            ]
        )
    ]
)

----------------------------------------

TITLE: Querying pg_repack Version in Supabase SQL
DESCRIPTION: SQL query to check the installed version of pg_repack extension in Supabase. This is important because version 1.5.2 and above support non-superuser repacking.

LANGUAGE: sql
CODE:
select default_version
from pg_available_extensions
where name = 'pg_repack';

----------------------------------------

TITLE: Implementing Date Picker Component in React
DESCRIPTION: This code snippet demonstrates how to create a Date Picker component using React. It utilizes the Popover and Calendar components, along with date-fns for date formatting. The component allows users to select a date, which is then displayed in a formatted string.

LANGUAGE: tsx
CODE:
'use client'

import * as React from 'react'
import { format } from 'date-fns'
import { Calendar as CalendarIcon } from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={'outline'}
          className={cn(
            'w-[280px] justify-start text-left font-normal',
            !date && 'text-muted-foreground'
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, 'PPP') : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar mode="single" selected={date} onSelect={setDate} initialFocus />
      </PopoverContent>
    </Popover>
  )
}

----------------------------------------

TITLE: Adding TypeScript definitions for Supabase in SvelteKit
DESCRIPTION: Define TypeScript types for Supabase-related properties in the SvelteKit application's global namespace.

LANGUAGE: ts
CODE:
import type { Session, SupabaseClient, User } from '@supabase/supabase-js'
import type { Database } from './database.types.ts'

declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient<Database>
      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
  }
}

export {}

----------------------------------------

TITLE: Installing Supabase and dependencies for React Native
DESCRIPTION: Command to install Supabase and required dependencies for a React Native project using Expo.

LANGUAGE: bash
CODE:
npx expo install @supabase/supabase-js @react-native-async-storage/async-storage react-native-url-polyfill

----------------------------------------

TITLE: Example: Daily Vacuum Job
DESCRIPTION: Schedules a vacuum operation to run every day at 3:00AM GMT.

LANGUAGE: sql
CODE:
select cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');

----------------------------------------

TITLE: Database IP Address Lookup
DESCRIPTION: Command to look up the IP address of your Supabase database using nslookup.

LANGUAGE: sh
CODE:
nslookup db.<PROJECT_REF>.supabase.co

----------------------------------------

TITLE: Configuring Supabase Function Settings
DESCRIPTION: TOML configuration file example for setting function-specific options like JWT verification and import map location using config.toml

LANGUAGE: toml
CODE:
[functions.hello-world]
verify_jwt = false

----------------------------------------

TITLE: Processing Realtime System Messages in TypeScript
DESCRIPTION: This snippet shows the structure of system messages used to inform clients about the status of their Postgres subscription. It includes status and detailed message information.

LANGUAGE: typescript
CODE:
{
   "event": "system",
   "topic": string,
   "payload":{
      "channel": string,
      "extension": "postgres_changes",
      "message": "Subscribed to PostgreSQL" | "Subscribing to PostgreSQL failed",
      "status": "ok" | "error"
   },
   "ref": null,
}

----------------------------------------

TITLE: Importing Drawer Components
DESCRIPTION: TypeScript code showing how to import all drawer-related components

LANGUAGE: tsx
CODE:
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from '@/components/ui/drawer'

----------------------------------------

TITLE: MFA Verification Hook Output Example (JSON)
DESCRIPTION: Example JSON output from the MFA verification hook, demonstrating a rejection decision with a custom message for exceeding maximum attempts.

LANGUAGE: json
CODE:
{
  "decision": "reject",
  "message": "You have exceeded maximum number of MFA attempts."
}

----------------------------------------

TITLE: Sign In with GitHub - Flutter
DESCRIPTION: Function to authenticate users using GitHub OAuth in a Flutter application using Supabase client. Includes web and mobile-specific configuration options.

LANGUAGE: dart
CODE:
Future<void> signInWithGithub() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.github,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Starting the Application
DESCRIPTION: Command to start the React Native application using npm.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Installing Select Component Dependencies
DESCRIPTION: Manual installation of the required Radix UI Select component package.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-select

----------------------------------------

TITLE: Installing Supabase Sentry Integration
DESCRIPTION: Commands for installing the Supabase Sentry integration using different package managers.

LANGUAGE: sh
CODE:
npm install @supabase/sentry-js-integration

LANGUAGE: sh
CODE:
yarn add @supabase/sentry-js-integration

LANGUAGE: sh
CODE:
pnpm add @supabase/sentry-js-integration

----------------------------------------

TITLE: Counting Total Requests by IP for Authentication API in SQL
DESCRIPTION: SQL query to count total requests by IP address for the authentication API, useful for detecting unusual activity.

LANGUAGE: sql
CODE:
select
  cf_connecting_ip as ip,
  count(cf_connecting_ip) as ip_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(headers) as headers
  cross join unnest(cf) as cf
  cross join unnest(response) as response
where regexp_contains(path, '^/auth/v1/')
group by ip
order by ip_count;

----------------------------------------

TITLE: Installing Poetry Package Manager
DESCRIPTION: Command to install Poetry via pip for Python package management

LANGUAGE: shell
CODE:
pip install poetry

----------------------------------------

TITLE: Video Search Implementation
DESCRIPTION: Python function to perform text-to-video search using embeddings

LANGUAGE: python
CODE:
def search():
    # Initialize Supabase and Mixpeek clients
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    mixpeek = Mixpeek(MIXPEEK_API_KEY)

    # Generate embedding for text query
    query_string = "a car chase scene"
    text_emb = mixpeek.embed.video(
        model_id="vuse-generic-v1",
        input=query_string,
        input_type="text"
    )

    # Query the collection
    results = supabase.rpc(
        'match_video_chunks',
        {
            'query_embedding': text_emb['embedding'],
            'match_threshold': 0.8,
            'match_count': 5
        }
    ).execute()

    # Display the results
    if results.data:
        for result in results.data:
            print(f"Matched chunk from {result['start_time']} to {result['end_time']} seconds")
            print(f"Video URL: {result['metadata']['video_url']}")
            print(f"Similarity: {result['similarity']}")
            print("---")
    else:
        print("No matching video chunks found")

----------------------------------------

TITLE: Implementing Radio Group with Stacked Items in React TSX
DESCRIPTION: Demonstrates the basic usage of RadioGroupStacked component with multiple RadioGroupStackedItem children. The component supports default value selection and unique identifiers for each radio option.

LANGUAGE: tsx
CODE:
<RadioGroupStacked defaultValue="comfortable">
  <RadioGroupStackedItem value="default" id="r1" label="Default" />
  <RadioGroupStackedItem value="comfortable" id="r2" label="Comfortable" />
  <RadioGroupStackedItem value="compact" id="r3" label="Compact" />
</RadioGroupStacked>

----------------------------------------

TITLE: Importing Separator Component in React
DESCRIPTION: TypeScript code snippet showing how to import the Separator component in a React application.

LANGUAGE: tsx
CODE:
import { Separator } from '@/components/ui/separator'

----------------------------------------

TITLE: Implementing GitHub Sign-in Route
DESCRIPTION: Flask route handler for initiating GitHub OAuth sign-in process. Configures redirect URL and triggers OAuth flow through Supabase.

LANGUAGE: python
CODE:
@app.route("/signin/github")
def signin_with_github():
    res = supabase.auth.sign_in_with_oauth(
        {
            "provider": "github",
            "options": {
                "redirect_to": f"{request.host_url}callback"
            },
        }
    )
    return redirect(res.url)

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: This snippet shows how to use the Supabase CLI to generate TypeScript types for your project.

LANGUAGE: bash
CODE:
supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts

----------------------------------------

TITLE: Rendering SupaSquad Page Content with React Components
DESCRIPTION: This JSX code defines the structure and content of the SupaSquad page. It uses the SectionContainer component to wrap the main content and exports a default function that renders the Layout with the defined metadata and children content.

LANGUAGE: jsx
CODE:
<SectionContainer>

# SupaSquad

The SupaSquad is an official Supabase advocate program where community members help build and manage the Supabase community.

- Official recognition in the Supabase community.
- Direct connection to the Supabase team.
- Help steer the Supabase community.

![Supabase SupaSquad](/images/supabase-squad.png)

## Requirements

As a member of the Squad, you choose the approach where you'll provide the most value.
You can help in one of five ways:

### Maintainer

Help maintain Supabase repositories. This includes building client libraries, managing issues, and fixing bugs.

### Expert

Answer user questions on GitHub [Discussions](https://github.com/supabase/supabase/discussions), [Discord](https://discord.supabase.com), and various other social platforms.

### Advocate

Spread the word on social channels and help to answer Supabase-related questions in the broader community and social channels.

### Builder

Build Supabase examples, blog about them, and add them to the [Supabase repo](https://github.com/supabase/supabase/tree/master/examples).

### Author

Write guest blog posts, create documentation, and help Supabase global expansion through translation.

### Moderator

Help us maintain the community guidelines in our GitHub and Community-led communities such as [Discord](https://discord.supabase.com), [Reddit](https://reddit.com/r/Supabase/),
[StackOverflow](https://stackoverflow.com/questions/tagged/supabase), etc.

## Benefits for SupaSquad members

- Access to a Supabase Discord channel providing direct communication with the team, Discord badges, and elevated privileges.
- Special AMA sessions with members of the Supabase team.
- Monthly DevRel committee call with industry-leading Developer Advocates (many of whom are [angel investors](https://supabase.com/blog/angels-of-supabase)), where you can learn from the best.
- We'll help you build your audience by promoting content via the Supabase social channels.
- Featured profile on Supabase website.
- Early access to new features (and the opportunity to provide feedback to the team!).
- Free credits that you can use for Squad efforts.
- Direct access to members of the Supabase team for questions, suggestions, etc.
- Help shape the future of the program.
- Exclusive Supabase Team swag drops are usually exclusively reserved for the Supabase core team.

## How to join

Apply to join the program using [this form](https://airtable.com/shr0FtLqLfhpuEya8).

## FAQs

<details>
  <summary>
    <i>Why are you only admitting 20 new members?</i>
  </summary>
  The entire Supabase team is only 20 people, so as you can imagine adding another 20 people sounds like
  a lot to us! We wish we could admit everyone who wanted to join. But we also want to make sure everyone
  who joins the Squad has an awesome experience. In the future we will probably expand the intake to
  include a monthly quota.
</details>
<details>
  <summary>
    <i>What is expected?</i>
  </summary>
  Mostly just enthusiasm. If you are interested in Open Source and want to get involved, the SupaSquad
  program is a great channel. You'll be given opportunities to contribute to the community in whatever
  ways match your skillset.
</details>
<details>
  <summary>
    <i>What if I become too busy to contribute?</i>
  </summary>
  No worries! The program isn't a job. It's just an opportunity to build your skillset and audience within
  the Supabase ecosystem.
</details>

</SectionContainer>

export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Creating Supabase client in SvelteKit root layout
DESCRIPTION: Set up a Supabase client in the root layout for both client and server-side usage in a SvelteKit application.

LANGUAGE: ts
CODE:
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import type { LayoutLoad } from './$types'

export const load: LayoutLoad = async ({ data, depends, fetch }) => {
  depends('supabase:auth')

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  return { session, supabase, user }
}

LANGUAGE: ts
CODE:
import type { LayoutServerLoad } from './$types'

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session } = await safeGetSession()
  return {
    session,
    cookies: cookies.getAll(),
  }
}

----------------------------------------

TITLE: Creating Supabase client in SvelteKit root layout
DESCRIPTION: Set up a Supabase client in the root layout for both client and server-side usage in a SvelteKit application.

LANGUAGE: ts
CODE:
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import type { LayoutLoad } from './$types'

export const load: LayoutLoad = async ({ data, depends, fetch }) => {
  depends('supabase:auth')

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  return { session, supabase, user }
}

LANGUAGE: ts
CODE:
import type { LayoutServerLoad } from './$types'

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session } = await safeGetSession()
  return {
    session,
    cookies: cookies.getAll(),
  }
}

----------------------------------------

TITLE: Role-based Access Control Email Examples
DESCRIPTION: Example email formats for creating admin and moderator user roles using plus addressing.

LANGUAGE: text
CODE:
// admin user
email+supaadmin@example.com

// moderator user
email+supamod@example.com

----------------------------------------

TITLE: Installing Radix UI Progress Package
DESCRIPTION: Command to install the required Radix UI Progress primitive package using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-progress

----------------------------------------

TITLE: Setting Supabase Secrets for Telegram Bot
DESCRIPTION: Command to set the Telegram bot token and function secret in Supabase environment.

LANGUAGE: bash
CODE:
supabase secrets set TELEGRAM_BOT_TOKEN=your_token FUNCTION_SECRET=random_secret

----------------------------------------

TITLE: Starting Supabase services locally
DESCRIPTION: This command starts all Supabase services locally for development.

LANGUAGE: sh
CODE:
supabase start

----------------------------------------

TITLE: Upserting and Querying Data with Hugging Face Adapter in Python
DESCRIPTION: This snippet shows how to upsert and query data using the vecs Python client with a Hugging Face adapter for text embedding.

LANGUAGE: python
CODE:
# Upsert
docs.upsert(
    records=[
        (
         "vec0",
         "the diameter of a 747 ...", # <- inserting text!
         {"publish_year": 2019}
        )
    ]
)

# Search by text
docs.query(data="how many ping pong balls fit in a Boeing ...")

# Results: [...]

----------------------------------------

TITLE: Docker Configuration
DESCRIPTION: Docker and docker-compose configuration for local development.

LANGUAGE: dockerfile
CODE:
FROM ghcr.io/supabase/edge-runtime:v1.2.18

COPY ./functions /home/deno/functions
CMD [ "start", "--main-service", "/home/deno/functions/main" ]

LANGUAGE: yaml
CODE:
version: "3.9"
services:
  web:
    build: .
    volumes:
      - type: bind
        source: ./functions
        target: /home/deno/functions
    ports:
      - "8000:9000"

----------------------------------------

TITLE: Installing Vecs Python Package
DESCRIPTION: Installs the Supabase Vector client (Vecs) package using pip.

LANGUAGE: python
CODE:
pip install vecs

----------------------------------------

TITLE: Setting Vercel Database Environment Variable
DESCRIPTION: Command to set the OLD_DB_URL environment variable with Vercel Postgres credentials.

LANGUAGE: bash
CODE:
export OLD_DB_URL="postgres://default:xxxxxxxxxxxx@yy-yyyyy-yyyyyy-yyyyyyy.us-west-2.aws.neon.tech:5432/verceldb?sslmode=require"

----------------------------------------

TITLE: Running Edge Functions Locally
DESCRIPTION: Commands to start the Supabase stack and serve Edge Functions locally with hot-reloading.

LANGUAGE: bash
CODE:
supabase start # start the supabase stack
supabase functions serve # start the Functions watcher

----------------------------------------

TITLE: Running Edge Function Locally
DESCRIPTION: Command to serve the edge function locally with environment variables.

LANGUAGE: shell
CODE:
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt

----------------------------------------

TITLE: Defining Form with React Hook Form and Zod in TypeScript
DESCRIPTION: Sets up a form using useForm hook from react-hook-form with Zod resolver for validation.

LANGUAGE: tsx
CODE:
'use client'

import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({ 
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}

----------------------------------------

TITLE: Initializing Postgres Changes Client Subscription in JavaScript
DESCRIPTION: Sets up a Supabase client subscription to listen for INSERT events on a specific game_id in the moves table using Postgres Changes.

LANGUAGE: javascript
CODE:
const gameId = '4a8bbe89-f601-4414-bd47-8d0f7ab2a31a'
const changes = supabase
  .channel('chess-moves')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'moves',
      filter: `game_id=eq.${gameId}`,
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Creating a protected page with Supabase authentication in Next.js
DESCRIPTION: Implement a protected page that requires authentication using Supabase in a Next.js Server Component.

LANGUAGE: typescript
CODE:
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export default async function PrivatePage() {
  const supabase = await createClient()

  const { data, error } = await supabase.auth.getUser()
  if (error || !data?.user) {
    redirect('/login')
  }

  return <p>Hello {data.user.email}</p>
}

----------------------------------------

TITLE: Inserting Tasks for SLA Enforcement in PostgreSQL
DESCRIPTION: This SQL function inserts tasks into the checking_tasks_queue table for each escalation level based on the SLA defined for different channels and ticket types.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION "public"."insert_tasks"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
declare
    escalationtimeintervals int[];
    currentinterval int;
    threadts text;

BEGIN
    IF new.channel_id <> '' THEN
        SELECT escalation_time INTO escalationtimeintervals
          FROM priority WHERE channel_id = new.channel_id;
    ELSE
        escalationtimeintervals := array[10, 20, 35, 50]; -- minutes
    END IF;
    -- INSERT tasks for each escalation level
    FOR i IN 1..4
    LOOP
        -- set the current escalation time interval
        currentinterval := escalationtimeintervals[i];
        -- format thread_ts as (epoch time as a big int) + '.' + ts_ms
        thread_timestamp := extract(epoch FROM new.ts)::bigint::text || '.' || new.ts_ms;

        -- check IF ticket_type is not 'feedback'
        IF lower(new.ticket_type) <> 'feedback' THEN
            INSERT INTO checking_tasks_queue (http_verb, payload, due_time, replied)
            values (
                'POST',
                jsonb_build_object(
                    'channel_id', new.channel_id,
                    'thread_ts', thread_timestamp,
                    'escalation_level', i,
                    'ticket_id', new.ticket_number,
                    'ticket_priority', new.ticket_priority,
                    'ticket_type', new.ticket_type
                ),
                new.ts + (currentinterval * interval '1 minute'),
                false
            );
        END IF;
    END LOOP;
    -- return the new slack_msg row
    return new;
END;
$$;

----------------------------------------

TITLE: Rust Location Module Generator
DESCRIPTION: Code that generates a Rust module for getting node locations using procedural macros and the quote crate.

LANGUAGE: rust
CODE:
pub fn get_location_mod(_item: proc_macro2::TokenStream) -> proc_macro2::TokenStream {
    let parser = ProtoParser::new("libpg_query/protobuf/pg_query.proto");
    let proto_file = parser.parse();
    let node_identifiers = node_identifiers(&proto_file.nodes);
    let location_idents = location_idents(&proto_file.nodes);

    quote! {
        /// Returns the location of a node
        pub fn get_location(node: &NodeEnum) -> Option<usize> {
            match node {
                #(NodeEnum::#node_identifiers(n) => #location_idents),*
            }
        }
    }
}

----------------------------------------

TITLE: Installing Supabase Dart Package
DESCRIPTION: Command to add the supabase package to a Dart project using the Dart CLI.

LANGUAGE: sh
CODE:
dart pub add supabase

----------------------------------------

TITLE: Backing up Supabase Database using CLI
DESCRIPTION: These commands use the Supabase CLI to backup roles, schema, and data from a Supabase database. The connection string should be replaced with the actual database connection string.

LANGUAGE: bash
CODE:
supabase db dump --db-url [CONNECTION_STRING] -f roles.sql --role-only

LANGUAGE: bash
CODE:
supabase db dump --db-url [CONNECTION_STRING] -f schema.sql

LANGUAGE: bash
CODE:
supabase db dump --db-url [CONNECTION_STRING] -f data.sql --use-copy --data-only

----------------------------------------

TITLE: Configuring Branch-Specific Settings in TOML
DESCRIPTION: Illustrates how to configure settings specific to a staging branch, including setting a project ID and specifying a custom seed script.

LANGUAGE: toml
CODE:
[remotes.staging]
project_id = "your-project-ref"

[remotes.staging.db.seed]
sql_paths = ["./seeds/staging.sql"]

----------------------------------------

TITLE: Creating a Foreign Table for Vector Collection in SQL
DESCRIPTION: This SQL snippet creates a foreign table to access vector data in a secondary Supabase project. It defines the structure of the 'docs' table including id, embedding, metadata, and URL fields.

LANGUAGE: sql
CODE:
create foreign table docs (
  id text not null,
  embedding vector(384),
  metadata jsonb,
  url text
)
server docs_server
options (schema_name 'public', table_name 'docs');

----------------------------------------

TITLE: Creating a Foreign Table for Vector Collection in SQL
DESCRIPTION: This SQL snippet creates a foreign table to access vector data in a secondary Supabase project. It defines the structure of the 'docs' table including id, embedding, metadata, and URL fields.

LANGUAGE: sql
CODE:
create foreign table docs (
  id text not null,
  embedding vector(384),
  metadata jsonb,
  url text
)
server docs_server
options (schema_name 'public', table_name 'docs');

----------------------------------------

TITLE: AWS Bedrock Client Configuration
DESCRIPTION: Python code for initializing AWS Bedrock client with credentials

LANGUAGE: python
CODE:
bedrock_client = boto3.client(
    'bedrock-runtime',
    region_name='us-west-2',
    # Credentials from your AWS account
    aws_access_key_id='<replace_your_own_credentials>',
    aws_secret_access_key='<replace_your_own_credentials>',
    aws_session_token='<replace_your_own_credentials>',
)

----------------------------------------

TITLE: AWS Bedrock Client Configuration
DESCRIPTION: Python code for initializing AWS Bedrock client with credentials

LANGUAGE: python
CODE:
bedrock_client = boto3.client(
    'bedrock-runtime',
    region_name='us-west-2',
    # Credentials from your AWS account
    aws_access_key_id='<replace_your_own_credentials>',
    aws_secret_access_key='<replace_your_own_credentials>',
    aws_session_token='<replace_your_own_credentials>',
)

----------------------------------------

TITLE: Using Radio Group Component in React
DESCRIPTION: Example of using the RadioGroup and RadioGroupItem components to create a set of radio buttons in a React application.

LANGUAGE: tsx
CODE:
<RadioGroup defaultValue="option-one">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-one" id="option-one" />
    <Label htmlFor="option-one">Option One</Label>
  </div>
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-two" id="option-two" />
    <Label htmlFor="option-two">Option Two</Label>
  </div>
</RadioGroup>

----------------------------------------

TITLE: Configuring Background Tasks for Supabase Edge Functions
DESCRIPTION: TOML configuration to enable background tasks in Supabase Edge Functions when developing locally. It sets the edge runtime policy to 'per_worker'.

LANGUAGE: toml
CODE:
[edge_runtime]
policy = "per_worker"

----------------------------------------

TITLE: Importing Navigation Menu Trigger Style in React
DESCRIPTION: This code snippet shows how to import the navigation menu trigger style function for use with custom link components.

LANGUAGE: tsx
CODE:
import { navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'

----------------------------------------

TITLE: Linking Local Supabase Project to Account
DESCRIPTION: Command to link the local Supabase project to a Supabase account, necessary for deployment.

LANGUAGE: bash
CODE:
supabase link

----------------------------------------

TITLE: Checking Local Supabase Status via NPX
DESCRIPTION: Alternative command using NPX to retrieve database connection details and status for a local Supabase instance.

LANGUAGE: shell
CODE:
npx supabase status

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Installing required Python packages vecs, boto3, and matplotlib using Poetry

LANGUAGE: shell
CODE:
poetry add vecs boto3 matplotlib

----------------------------------------

TITLE: Deploying Edge Function
DESCRIPTION: Command to deploy the edge function to Supabase project

LANGUAGE: bash
CODE:
supabase functions deploy hello-world --project-ref [PROJECT REF]

----------------------------------------

TITLE: Updating User's Phone Number in Kotlin
DESCRIPTION: Use the supabase.auth.updateUser method to update a logged-in user's phone number in Kotlin. The user will receive an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: kotlin
CODE:
supabase.auth.updateUser {
    phone = "123456789"
}

----------------------------------------

TITLE: Basic Alert Component Usage
DESCRIPTION: Demonstrates the basic implementation of an Alert component with a title, description, and icon

LANGUAGE: tsx
CODE:
<Alert>
  <Terminal className="h-4 w-4" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>

----------------------------------------

TITLE: Authorization Function for RLS Policies
DESCRIPTION: SQL function that checks user permissions in Row Level Security policies using JWT claims.

LANGUAGE: sql
CODE:
create or replace function public.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select (auth.jwt() ->> 'user_role')::public.app_role into user_role;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql stable security definer set search_path = '';

----------------------------------------

TITLE: Opening RedwoodJS App in VS Code
DESCRIPTION: Commands to navigate into the newly created RedwoodJS app directory and open it in Visual Studio Code.

LANGUAGE: bash
CODE:
cd my-app
code .

----------------------------------------

TITLE: Listing Docker Containers for Supabase Grafana
DESCRIPTION: This command lists Docker containers filtered by the name 'supabase-grafana'. It's used to verify the container configuration and status.

LANGUAGE: sh
CODE:
docker ps -f name=supabase-grafana

----------------------------------------

TITLE: Implementing Adaptive Retrieval Function in SQL
DESCRIPTION: SQL function that performs Adaptive Retrieval using a two-pass approach for efficient and accurate vector search.

LANGUAGE: sql
CODE:
create or replace function match_documents_adaptive(
  query_embedding extensions.vector(3072),
  match_count int
)
returns setof public.documents
language sql
set search_path = ''
as $$
with shortlist as (
  select *
  from public.documents
  order by
    public.sub_vector(embedding, 512)::extensions.vector(512) operator(extensions.<#>) (
      select public.sub_vector(query_embedding, 512)::extensions.vector(512)
    ) asc
  limit match_count * 8
)
select *
from shortlist
order by embedding operator(extensions.<#>) query_embedding asc
limit least(match_count, 200);
$$;

----------------------------------------

TITLE: CORS Headers Configuration
DESCRIPTION: Implementation of CORS headers for ChatGPT plugin compatibility.

LANGUAGE: typescript
CODE:
// /functions/_shared/cors.ts
export const corsHeaders = {
  'Access-Control-Allow-Origin': 'https://chat.openai.com',
  'Access-Control-Allow-Credentials': 'true',
  'Access-Control-Allow-Private-Network': 'true',
  'Access-Control-Allow-Headers': '*',
}

----------------------------------------

TITLE: Google OAuth Error Response
DESCRIPTION: Example error response when Google authentication fails due to missing email scope permissions.

LANGUAGE: text
CODE:
error=server_error&error_description=Error+getting+user+email+from+external+provider

Missing required authentication credential.

Expected OAuth 2 access token, login cookie or other valid authentication credential.

See https://developers.google.com/identity/sign-in/web/devconsole-project.\",\n \"status\": \"UNAUTHENTICATED\"

 }
 "level":"error","method":"GET","msg":"500: Error getting user email from external provider","path":"/callback","referer":"https://accounts.google.com/","remote_addr":"x.x.X.x","time":"2023-06-06T21:46:11Z","timestamp":"2023-06-06T21:46:11Z"}

----------------------------------------

TITLE: Initializing Python Project with Poetry
DESCRIPTION: Command to create a new Python project using Poetry

LANGUAGE: shell
CODE:
poetry new aws_bedrock_image_search

----------------------------------------

TITLE: Checking and Updating Role Authentication Methods in PostgreSQL
DESCRIPTION: SQL commands to identify roles using deprecated md5 hashing method and migrate them to scram-sha-256 authentication after a Supabase upgrade.

LANGUAGE: sql
CODE:
-- List roles using md5 hashing method
SELECT
  rolname
FROM pg_authid
WHERE rolcanlogin = true
  AND rolpassword LIKE 'md5%';

-- Migrate a role's password to scram-sha-256
ALTER ROLE <role_name> WITH PASSWORD '<password>';

----------------------------------------

TITLE: Rendering DataTable in a Next.js Page Component
DESCRIPTION: Demonstrates how to use the DataTable component in a Next.js page, fetching data asynchronously.

LANGUAGE: tsx
CODE:
import { Payment, columns } from './columns'
import { DataTable } from './data-table'

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: '728ed52f',
      amount: 100,
      status: 'pending',
      email: 'm@example.com',
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className="container mx-auto py-10">
      <DataTable columns={columns} data={data} />
    </div>
  )
}

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Command to install the new Supabase SSR package for server-side rendering support.

LANGUAGE: bash
CODE:
npm install @supabase/ssr

----------------------------------------

TITLE: Sign Out Implementation - Kotlin
DESCRIPTION: Kotlin function to handle user sign out and clear session data.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: JWT Token Structure for Service Role
DESCRIPTION: Example of a JWT token structure showing the service_role Postgres role configuration.

LANGUAGE: javascript
CODE:
{
  "role": "service_role", // the Postgres role
  "iss": "supabase"       // the issuer of the JWT
  "exp": 1445385600,      // the time the JWT will expire
}

----------------------------------------

TITLE: Installing Supabase Flutter Package
DESCRIPTION: Command to add the Supabase Flutter package to a Flutter project using the pub package manager.

LANGUAGE: sh
CODE:
flutter pub add supabase_flutter

----------------------------------------

TITLE: Using ClickHouse Parameterized Views with Foreign Data Wrapper
DESCRIPTION: This example shows how to use ClickHouse Parameterized Views with the Foreign Data Wrapper in Postgres. It demonstrates passing query parameters directly to ClickHouse for more efficient analytics.

LANGUAGE: sql
CODE:
create foreign table user_analytics (
  id bigint,
  user_id bigint,
  _event text,
)
server clickhouse_server
options ( table '(select * from UserAnalytics(event=${_event}))' );

select * from user_analytics where _event='button_click';

----------------------------------------

TITLE: Authenticated WebSocket Server with Query Params
DESCRIPTION: Implementation of a WebSocket server with JWT authentication using URL query parameters. Validates tokens against Supabase authentication.

LANGUAGE: typescript
CODE:
import { createClient } from "jsr:@supabase/supabase-js@2";

const supabase = createClient(
Deno.env.get("SUPABASE_URL"),
Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);
Deno.serve(req => {
const upgrade = req.headers.get("upgrade") || "";

    if (upgrade.toLowerCase() != "WebSocket") {
        return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 });
    }

const url = new URL(req.url);
const jwt = url.searchParams.get("jwt");
if (!jwt) {
console.error("Auth token not provided");
return new Response("Auth token not provided", { status: 403 });
}
const { error, data } = await supabase.auth.getUser(jwt);
if (error) {
console.error(error);
return new Response("Invalid token provided", { status: 403 });
}
if (!data.user) {
console.error("user is not authenticated");
return new Response("User is not authenticated", { status: 403 });
}

    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => console.log("socket opened");
    socket.onmessage = (e) => {
        console.log("socket message:", e.data);
        socket.send(new Date().toString());
    };

    socket.onerror = e => console.log("socket errored:", e.message);
    socket.onclose = () => console.log("socket closed");

    return response;
});

----------------------------------------

TITLE: Authenticated WebSocket Server with Query Params
DESCRIPTION: Implementation of a WebSocket server with JWT authentication using URL query parameters. Validates tokens against Supabase authentication.

LANGUAGE: typescript
CODE:
import { createClient } from "jsr:@supabase/supabase-js@2";

const supabase = createClient(
Deno.env.get("SUPABASE_URL"),
Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);
Deno.serve(req => {
const upgrade = req.headers.get("upgrade") || "";

    if (upgrade.toLowerCase() != "WebSocket") {
        return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 });
    }

const url = new URL(req.url);
const jwt = url.searchParams.get("jwt");
if (!jwt) {
console.error("Auth token not provided");
return new Response("Auth token not provided", { status: 403 });
}
const { error, data } = await supabase.auth.getUser(jwt);
if (error) {
console.error(error);
return new Response("Invalid token provided", { status: 403 });
}
if (!data.user) {
console.error("user is not authenticated");
return new Response("User is not authenticated", { status: 403 });
}

    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => console.log("socket opened");
    socket.onmessage = (e) => {
        console.log("socket message:", e.data);
        socket.send(new Date().toString());
    };

    socket.onerror = e => console.log("socket errored:", e.message);
    socket.onclose = () => console.log("socket closed");

    return response;
});

----------------------------------------

TITLE: Starting Supabase Local Stack
DESCRIPTION: Command to start the local Supabase stack, including the database and other services.

LANGUAGE: bash
CODE:
supabase start

----------------------------------------

TITLE: Generated TypeScript Types for Database Schema
DESCRIPTION: This TypeScript code shows the automatically generated types based on the database schema, including definitions for Json, Database, and table structures.

LANGUAGE: typescript
CODE:
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      movies: {
        Row: {               // the data expected from .select()
          id: number
          name: string
          data: Json | null
        }
        Insert: {            // the data to be passed to .insert()
          id?: never         // generated columns must not be supplied
          name: string       // `not null` columns with no default must be supplied
          data?: Json | null // nullable columns can be omitted
        }
        Update: {            // the data to be passed to .update()
          id?: never
          name?: string      // `not null` columns are optional on .update()
          data?: Json | null
        }
      }
    }
  }
}

----------------------------------------

TITLE: Adding Exclusion Constraint for Range Column in SQL
DESCRIPTION: This SQL statement adds an exclusion constraint to the reservations table to prevent overlapping reservations. It demonstrates how to enforce data integrity with range columns.

LANGUAGE: sql
CODE:
alter table reservations
	add constraint exclude_duration exclude
	using gist (duration with &&)

----------------------------------------

TITLE: Using Separator Component in React
DESCRIPTION: TypeScript code snippet demonstrating the basic usage of the Separator component in a React application.

LANGUAGE: tsx
CODE:
<Separator />

----------------------------------------

TITLE: Embedded Resource Aggregation in PostgREST
DESCRIPTION: Demonstrates using aggregate functions with embedded resources to analyze movie release years by director.

LANGUAGE: bash
CODE:
curl 'http://postgrest/directors?select=name,movies(newest_movie_year:release_year.max(),oldest_movie_year:release_year.min())'

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.from('directors').select(`name,
		movies(
			newest_movie_year:release_year.max(),
			oldest_movie_year:release_year.min()
		)`)

----------------------------------------

TITLE: Adding Required Dependencies
DESCRIPTION: Installing necessary Flutter packages for the project.

LANGUAGE: bash
CODE:
dart pub add supabase_flutter
dart pub add go_router
dart pub add flutter_svg

----------------------------------------

TITLE: Accessing Supabase Grafana Docker Container Shell
DESCRIPTION: This command opens an interactive shell in the Supabase Grafana Docker container. It requires the container ID obtained from the previous docker ps command.

LANGUAGE: sh
CODE:
docker exec -it <container id> bash

----------------------------------------

TITLE: Querying Webhook Queue Size in Supabase
DESCRIPTION: SQL query to check the size of the webhook request queue to diagnose potential IO strain issues. A count significantly above 20,000 may indicate performance problems.

LANGUAGE: sql
CODE:
select count(*) as exact_count from net.http_request_queue;

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase Edge Function
DESCRIPTION: Environment variable configuration for the Supabase Edge Function, including the ElevenLabs API key.

LANGUAGE: bash
CODE:
# Find / create an API key at https://elevenlabs.io/app/settings/api-keys
ELEVENLABS_API_KEY=your_api_key

----------------------------------------

TITLE: Restricting Uploads in Supabase Storage Bucket with JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to create a Supabase storage bucket with upload restrictions. It sets the bucket as public, limits allowed MIME types to images, and sets a maximum file size of 1MB.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.storage.createBucket('avatars', {
  public: true,
  allowedMimeTypes: ['image/*'],
  fileSizeLimit: '1MB',
})

----------------------------------------

TITLE: Basic Radio Group Card Implementation
DESCRIPTION: Demonstrates the basic usage of RadioGroupCard with multiple RadioGroupCardItem children. Sets a default value and includes labels and unique IDs for each option.

LANGUAGE: tsx
CODE:
<RadioGroupCard defaultValue="comfortable">
  <RadioGroupCardItem value="default" id="r1" label="Default" />
  <RadioGroupCardItem value="comfortable" id="r2" label="Comfortable" />
  <RadioGroupCardItem value="compact" id="r3" label="Compact" />
</RadioGroupCard>

----------------------------------------

TITLE: Invalid GraphQL Operations Example
DESCRIPTION: Example showing an invalid GraphQL query with both named and anonymous operations.

LANGUAGE: graphql
CODE:
{
  bookCollection {
    edges {
      node {
        id
      }
    }
  }
}

query getBookNames {
  bookCollection {
    edges {
      node {
        name
      }
    }
  }
}

----------------------------------------

TITLE: Creating Text Confirm Dialog with Destructive Alert in JSX
DESCRIPTION: This code demonstrates a Text Confirm Dialog with a destructive alert variant. It includes a title asking for confirmation to delete an item.

LANGUAGE: jsx
CODE:
<ComponentPreview
  name="text-confirm-dialog-with-destructive-alert"
  description="An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'"
/>

----------------------------------------

TITLE: Connecting to Vercel Postgres Database
DESCRIPTION: Example connection string format for Vercel Postgres database using psql.

LANGUAGE: bash
CODE:
psql "postgres://default:xxxxxxxxxxxx@yy-yyyyy-yyyyyy-yyyyyyy.us-west-2.aws.neon.tech:5432/verceldb?sslmode=require"

----------------------------------------

TITLE: Embedding Another YouTube Video with React
DESCRIPTION: This snippet shows how to embed another YouTube video using an iframe in a React component. It's similar to the previous snippet but with a different video source.

LANGUAGE: jsx
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/diL00ZZ-q50"
    title="store Parquet files in Supabase Storage and query them directly using DuckDB"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowfullscreen
  />
</div>

----------------------------------------

TITLE: Installing Angular Project Dependencies
DESCRIPTION: Commands to create a new Angular project and install the Supabase client library

LANGUAGE: bash
CODE:
npx ng new supabase-angular --routing false --style css --standalone false
cd supabase-angular
npm install @supabase/supabase-js

----------------------------------------

TITLE: Importing Radio Group Components in React TSX
DESCRIPTION: Shows how to import the RadioGroupStacked and RadioGroupStackedItem components from the UI library.

LANGUAGE: tsx
CODE:
import { RadioGroupStacked, RadioGroupStackedItem } from 'ui'

----------------------------------------

TITLE: Uploading Documentation File to Plugin
DESCRIPTION: cURL command to upload a PDF file to the plugin's upsert-file endpoint.

LANGUAGE: bash
CODE:
curl -X POST -F \"file=@./postgresql-15-US.pdf\" http://localhost:3333/upsert-file

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Kotlin
DESCRIPTION: Configure Supabase client with Auth0 authentication in Kotlin for Android applications.

LANGUAGE: kotlin
CODE:
import com.auth0.android.result.Credentials

val supabase = createSupabaseClient(
    "https://<supabase-project>.supabase.co",
    "SUPABASE_ANON_KEY"
) {
    accessToken = {
        val credentials: Credentials = ...; // Get credentials from Auth0
        credentials.accessToken
    }
}

----------------------------------------

TITLE: Implementing Zoom OAuth Sign-In with Supabase in JavaScript
DESCRIPTION: Initiates the Zoom OAuth sign-in process using Supabase's signInWithOAuth method. This function should be called when the user wants to log in with their Zoom account.

LANGUAGE: javascript
CODE:
async function signInWithZoom() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'zoom',
  })
}

----------------------------------------

TITLE: Input OTP with Custom Pattern
DESCRIPTION: Demonstrates how to use a custom pattern for the Input OTP component to allow only digits and characters.

LANGUAGE: typescript
CODE:
import { REGEXP_ONLY_DIGITS_AND_CHARS } from "input-otp"

...

<InputOTP
  maxLength={6}
  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}
>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    {/* ... */}
  </InputOTPGroup>
</InputOTP>

----------------------------------------

TITLE: Adding Supabase Flutter Dependency
DESCRIPTION: Adding the Supabase Flutter client library dependency to pubspec.yaml

LANGUAGE: yaml
CODE:
supabase_flutter: ^2.0.0

----------------------------------------

TITLE: Filtering Postgres Logs by PgAudit Events in SQL
DESCRIPTION: This SQL snippet shows how to filter Postgres logs to find events recorded by the PgAudit extension for a specific role.

LANGUAGE: sql
CODE:
... query
where
 -- all pg_audit recorded events start with 'AUDIT'
 regexp_contains(event_message, '^AUDIT')
  and
 -- Finding queries executed from the relevant role (e.g., 'API_role')
 parsed.user_name = 'API_role'

----------------------------------------

TITLE: Checking Grafana Environment Variables
DESCRIPTION: This command prints specific environment variables related to Grafana configuration within the Docker container. It helps verify the correctness of crucial settings.

LANGUAGE: sh
CODE:
printenv | egrep 'GRAFANA_PASSWORD|SUPABASE_PROJECT_REF|SUPABASE_SERVICE_ROLE_KEY'

----------------------------------------

TITLE: Creating Partitioned Table From Existing Table in PostgreSQL
DESCRIPTION: Creates a new partitioned table with the same structure as an existing table using the LIKE clause. This command copies column definitions, constraints, and optionally other properties from the source table.

LANGUAGE: sql
CODE:
CREATE TABLE parent_table LIKE source_table [ like_option ... ] PARTITION BY ...

----------------------------------------

TITLE: Installing Dropdown Menu Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the dropdown menu component manually using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-dropdown-menu

----------------------------------------

TITLE: Adding Dependencies for Offline-First React Native App
DESCRIPTION: Installs necessary packages including WatermelonDB, Supabase client, and expo-build-properties.

LANGUAGE: sh
CODE:
npm install @nozbe/watermelondb @supabase/supabase-js expo-build-properties

----------------------------------------

TITLE: Using New Realtime Methods in Supabase.js v2
DESCRIPTION: Shows how to use the new channel() method for Realtime functionality in Supabase.js v2, including presence and postgres_changes events.

LANGUAGE: ts
CODE:
supabase
  .channel('any_string_you_want')
  .on('presence', { event: 'track' }, (payload) => {
    console.log(payload)
  })
  .subscribe()

supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()

----------------------------------------

TITLE: Implementing Sign Out - Kotlin
DESCRIPTION: Kotlin implementation for signing out users and clearing their session data.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Displaying Performance Comparison Results in Markdown
DESCRIPTION: A markdown table showing performance comparisons between pgvector 0.5.1 and 0.6.0, including build times, QPS, and accuracy for different parameters.

LANGUAGE: markdown
CODE:
| Parameters                         | ef_search | Build time         | QPS  | Accuracy | Build time         | QPS  | Accuracy |
| ---------------------------------- | --------- | ------------------ | ---- | -------- | ------------------ | ---- | -------- |
|                                    |           | **pgvector 0.5.1** |      |          | **pgvector 0.6.0** |      |          |
| m=16, ef_construction=64 (default) | 40        | 38m 46s            | 1186 | 0.915    | 5m 25s             | 1190 | 0.912    |
| m=16, ef_construction=64 (default) | 100       | 38m 46s            | 960  | 0.957    | 5m 25s             | 977  | 0.957    |
| m=16, ef_construction=64 (default) | 200       | 38m 46s            | 804  | 0.974    | 5m 25s             | 802  | 0.974    |
| m=24, ef_construction=100          | 40        | 1h 8m 43s          | 1091 | 0.950    | 8m 33s             | 1097 | 0.951    |
| m=24, ef_construction=100          | 100       | 1h 8m 43s          | 877  | 0.978    | 8m 33s             | 901  | 0.978    |
| m=24, ef_construction=100          | 200       | 1h 8m 43s          | 697  | 0.988    | 8m 33s             | 712  | 0.988    |
| m=16, ef_construction=200          | 40        | 1h 27m 30s         | 1144 | 0.939    | 9m 28s             | 1163 | 0.940    |
| m=16, ef_construction=200          | 100       | 1h 27m 30s         | 924  | 0.977    | 9m 28s             | 940  | 0.977    |
| m=16, ef_construction=200          | 200       | 1h 27m 30s         | 760  | 0.988    | 9m 28s             | 764  | 0.988    |

----------------------------------------

TITLE: Installing Tabs Component Dependencies Manually
DESCRIPTION: Install the required dependency for the Tabs component using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-tabs

----------------------------------------

TITLE: Query Pushdown Example with Stripe Customers
DESCRIPTION: Demonstrates how query pushdown is automatically applied when querying Stripe customer data by ID.

LANGUAGE: sql
CODE:
select *
from stripe.customers
where id = 'cus_N5WMk7pvQPkY3B';

----------------------------------------

TITLE: Testing SupaUtils Role Protection
DESCRIPTION: SQL commands demonstrating how the SupaUtils extension prevents modification of reserved roles.

LANGUAGE: sql
CODE:
alter role supabase_storage_admin nologin password 'fake';
ERROR:  "supabase_storage_admin" is a reserved role, it cannot be modified

drop role supabase_auth_admin;
ERROR:  "supabase_auth_admin" is a reserved role, it cannot be modified

----------------------------------------

TITLE: Testing SupaUtils Role Protection
DESCRIPTION: SQL commands demonstrating how the SupaUtils extension prevents modification of reserved roles.

LANGUAGE: sql
CODE:
alter role supabase_storage_admin nologin password 'fake';
ERROR:  "supabase_storage_admin" is a reserved role, it cannot be modified

drop role supabase_auth_admin;
ERROR:  "supabase_auth_admin" is a reserved role, it cannot be modified

----------------------------------------

TITLE: Installing Dependencies for Supabase Svelte Project
DESCRIPTION: Command to install project dependencies using npm.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Creating PostgreSQL RPC for Location Insertion
DESCRIPTION: This SQL snippet defines an RPC (Remote Procedure Call) function that validates the user's active session and inserts location data into the 'locations' table.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION public.location_insert(_timestamp bigint, _lat double precision, _long double precision, _user_id bigint)
RETURNS void AS $$
declare active_event_id uuid;
begin
  select event_id into active_event_id from public.sessions where user_id = _user_id and status = 'ACTIVE'::session_status;

  INSERT INTO public.locations(event_id, user_id, created_at, lat, long, location)
  VALUES (active_event_id, _user_id, to_timestamp(_timestamp), _lat, _long, st_point(_long, _lat));
end;
$$ LANGUAGE plpgsql VOLATILE;

----------------------------------------

TITLE: Initializing Realtime Connection in TypeScript
DESCRIPTION: This snippet shows the structure of the initial connection message sent by the client to specify desired features. It includes options for Broadcast, Presence, and Postgres Changes configurations.

LANGUAGE: typescript
CODE:
{
   "event": "phx_join",
   "topic": string,
   "payload": {
      "config": {
         "broadcast": {
            "self": boolean
         },
         "presence": {
            "key": string
         },
         "postgres_changes": [
            {
               "event": "*" | "INSERT" | "UPDATE" | "DELETE",
               "schema": string,
               "table": string,
               "filter": string + '=' + "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "in" +  '.' + string
            }
         ]
      }
   },
   "ref": string
}

----------------------------------------

TITLE: Image Processing Helper Functions
DESCRIPTION: Helper functions for encoding images and interacting with Amazon Titan model

LANGUAGE: python
CODE:
def readFileAsBase64(file_path):
    try:
        with open(file_path, "rb") as image_file:
            input_image = base64.b64encode(image_file.read()).decode("utf8")
        return input_image
    except:
        print("bad file name")
        sys.exit(0)

def construct_bedrock_image_body(base64_string):
    return json.dumps(
        {
            "inputImage": base64_string,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    )

def get_embedding_from_titan_multimodal(body):
    response = bedrock_client.invoke_model(
        body=body,
        modelId="amazon.titan-embed-image-v1",
        accept="application/json",
        contentType="application/json",
    )
    response_body = json.loads(response.get("body").read())
    print(response_body)
    return response_body["embedding"]

def encode_image(file_path):
    base64_string = readFileAsBase64(file_path)
    body = construct_bedrock_image_body(base64_string)
    emb = get_embedding_from_titan_multimodal(body)
    return emb

----------------------------------------

TITLE: Using LangChain Hybrid Search in JavaScript
DESCRIPTION: Shows how to integrate the installed LangChain hybrid search functionality in a JavaScript frontend application.

LANGUAGE: jsx
CODE:
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'
import { SupabaseHybridSearch } from 'langchain/retrievers/supabase'

const privateKey = process.env.SUPABASE_PRIVATE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const embeddings = new OpenAIEmbeddings()

  const retriever = new SupabaseHybridSearch(embeddings, {
    client,
    similarityK: 2,
    keywordK: 2,
    tableName: 'documents',
    similarityQueryName: 'match_documents',
    keywordQueryName: 'kw_match_documents',
  })

  const results = await retriever.getRelevantDocuments('hello bye')

  console.log(results)
}

----------------------------------------

TITLE: Verifying Entrypoint Script Permissions
DESCRIPTION: These commands navigate to the root directory and check the permissions of the entrypoint.sh file, which is crucial for proper container initialization.

LANGUAGE: sh
CODE:
cd /
ls -l | grep entrypoint.sh

----------------------------------------

TITLE: Creating Secure Supabase Client with Service Role Secret in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a separate Supabase client using the createClient method from @supabase/supabase-js, utilizing the service_role secret. It disables certain auth properties to ensure proper functionality in a server environment.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(supabaseUrl, serviceRoleSecret, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
})

----------------------------------------

TITLE: Querying the Vector Index
DESCRIPTION: Creates a query engine and demonstrates how to query the vector index with a sample question.

LANGUAGE: python
CODE:
query_engine = index.as_query_engine()

# Ask a question
response = query_engine.query("What did the author do growing up?")

# Print the response
print(response)

----------------------------------------

TITLE: Using Text-to-Speech Function in HTML Audio Element
DESCRIPTION: Example of how to use the deployed Supabase Edge Function as a source for an HTML audio element.

LANGUAGE: html
CODE:
<audio
  src="https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1/text-to-speech?text=Hello%2C%20world!&voiceId=JBFqnCBsd6RMkjVDRZzb"
  controls
/>

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment variable configuration for Supabase URL and anonymous key.

LANGUAGE: bash
CODE:
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY

----------------------------------------

TITLE: Rendering Framework Quickstart Links in JSX
DESCRIPTION: This code snippet maps over an array of framework quickstarts and renders them as Link components with GlassPanel content. It displays various framework quickstarts like React, Next.js, Nuxt, and more.

LANGUAGE: JSX
CODE:
{[
  {
    title: 'React',
    href: '/guides/getting-started/quickstarts/reactjs',
    description:
      'Learn how to create a Supabase project, add some sample data to your database, and query the data from a React app.',
    icon: '/docs/img/icons/react-icon',
  },
  {
    title: 'Next.js',
    href: '/guides/getting-started/quickstarts/nextjs',
    description:
      'Learn how to create a Supabase project, add some sample data to your database, and query the data from a Next.js app.',
    icon: '/docs/img/icons/nextjs-icon',
    hasLightIcon: true,
  },
  // ... (other framework quickstarts)
].map((item) => {
  return (
    <Link href={`${item.href}`} key={item.title} passHref className={'col-span-4'}>
      <GlassPanel
        title={item.title}
        span="col-span-6"
        background={false}
        icon={item.icon}
        hasLightIcon={item.hasLightIcon}
      >
        {item.description}
      </GlassPanel>
    </Link>
  )
})}

----------------------------------------

TITLE: Looking up Hostname IP Address using nslookup
DESCRIPTION: Command to query domain name servers and resolve a hostname to its corresponding IP address using the nslookup utility in terminal.

LANGUAGE: bash
CODE:
nslookup hostname

----------------------------------------

TITLE: Signing out using Supabase in JavaScript
DESCRIPTION: This snippet shows how to implement sign-out functionality using Supabase in a JavaScript application. It uses the signOut method from the Supabase Auth API to remove the user from the browser session and clear localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Configuring Prisma Connection String for Disabled Prepared Statements
DESCRIPTION: Add pgbouncer=true parameter to the Prisma connection string to disable prepared statements.

LANGUAGE: plaintext
CODE:
postgres://[db-user].[project-ref]:[db-password]@aws-0-[aws-region].pooler.supabase.com:6543/[db-name]?pgbouncer=true

----------------------------------------

TITLE: Manual Performance Testing Configuration
DESCRIPTION: Configuration references for setting up manual performance testing infrastructure including k6 scripts, Telegraf configuration, and Grafana dashboards

LANGUAGE: markdown
CODE:
| Component | Description |
| --- | --- |
| [k6](https://github.com/supabase/benchmarks/blob/main/examples/realtime/replication/terraform/k6/subs.js) | Load generator scripts |
| VM in cloud | Hosts for k6 and Telegraf |
| Prometheus and [Grafana](https://github.com/supabase/benchmarks/blob/main/examples/realtime/grafana.json) | Observability stack |
| [Telegraf](https://github.com/supabase/benchmarks/blob/main/k6/telegraf.conf) | Collect metrics |
| [Launches table](https://gist.github.com/egor-romanov/df6b61f5b0ac3a6f4afdbb19154a612f) | Launch history |

----------------------------------------

TITLE: Customizing Sheet Size
DESCRIPTION: Example demonstrating how to customize the Sheet component's size using CSS classes

LANGUAGE: tsx
CODE:
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent className="w-[400px] sm:w-[540px]">
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account and remove your data
        from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>

----------------------------------------

TITLE: Custom Hook Implementation
DESCRIPTION: JavaScript code showing how to implement a custom hook for data transformation during migration.

LANGUAGE: javascript
CODE:
module.exports = (collectionName, doc, recordCounters, writeRecord) => {
  for (let i = 0; i < doc.weapons.length; i++) {
    const weapon = {
      uid: doc.uid,
      weapon: doc.weapons[i],
    }
    writeRecord('weapons', weapon, recordCounters)
  }
  delete doc.weapons // moved to separate file
  return doc
}

----------------------------------------

TITLE: Querying Stripe Products
DESCRIPTION: SQL query to fetch Stripe products data through the foreign table.

LANGUAGE: sql
CODE:
select *
from products
limit 10;

----------------------------------------

TITLE: Removing a Publication in SQL
DESCRIPTION: This SQL command removes an existing publication if it exists.

LANGUAGE: sql
CODE:
drop publication if exists publication_name;

----------------------------------------

TITLE: Removing a Publication in SQL
DESCRIPTION: This SQL command removes an existing publication if it exists.

LANGUAGE: sql
CODE:
drop publication if exists publication_name;

----------------------------------------

TITLE: Using Supabase CLI for Database Inspection
DESCRIPTION: Bash commands to use the Supabase CLI for inspecting unused indexes in the database. This helps identify and remove unnecessary indexes that may be impacting performance.

LANGUAGE: bash
CODE:
npx supabase login

npx supabase link

npx supabase inspect db unused-indexes

----------------------------------------

TITLE: Deploying Supabase Function with Bash
DESCRIPTION: This command deploys the 'resend' function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy resend --no-verify-jwt

----------------------------------------

TITLE: Deploying OG Image Generator function
DESCRIPTION: Command to deploy the OG Image Generator function to Supabase. This deployment is done locally and disables JWT verification for the function.

LANGUAGE: bash
CODE:
supabase functions deploy og-images --no-verify-jwt

----------------------------------------

TITLE: Next.js API Route for Supabase Storage Signed URLs
DESCRIPTION: Implementation of a Next.js API route that generates signed URLs for Supabase Storage file uploads with authentication

LANGUAGE: typescript
CODE:
import { auth } from '@/auth'
import { env } from '@/env'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic'
export async function GET(request: Request) {
  try {
    const session = await auth()
    if (!session || !session.user.id) {
      return new Response('Unauthorized', { status: 401 })
    }
    const {
      user: { id },
    } = session
    const supabaseAdmin = createClient(env.NEXT_PUBLIC_SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY)

    const { data, error } = await supabaseAdmin.storage
      .from('avatars')
      .createSignedUploadUrl(id, { upsert: true })
    console.log(error)
    if (error) throw error

    return new Response(JSON.stringify(data), {
      status: 200,
    })
  } catch (e) {
    console.error(e)
    return new Response('Internal Server Error', { status: 500 })
  }
}

----------------------------------------

TITLE: Video Processing and Embedding Generation
DESCRIPTION: Python function to process videos, generate embeddings, and store them in Supabase

LANGUAGE: python
CODE:
def seed():
    # Initialize Supabase and Mixpeek clients
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    mixpeek = Mixpeek(MIXPEEK_API_KEY)

    # Create a table for storing video chunk embeddings
    supabase.table("video_chunks").create({
        "id": "text",
        "start_time": "float8",
        "end_time": "float8",
        "embedding": "vector(768)",
        "metadata": "jsonb"
    })

    # Process and embed video
    video_url = "https://example.com/your_video.mp4"
    processed_chunks = mixpeek.tools.video.process(
        video_source=video_url,
        chunk_interval=1,  # 1 second intervals
        resolution=[720, 1280]
    )

    for chunk in processed_chunks:
        print(f"Processing video chunk: {chunk['start_time']}")

        # Generate embedding using Mixpeek
        embed_response = mixpeek.embed.video(
            model_id="vuse-generic-v1",
            input=chunk['base64_chunk'],
            input_type="base64"
        )

        # Insert into Supabase
        supabase.table("video_chunks").insert({
            "id": f"chunk_{chunk['start_time']}",
            "start_time": chunk["start_time"],
            "end_time": chunk["end_time"],
            "embedding": embed_response['embedding'],
            "metadata": {"video_url": video_url}
        }).execute()

    print("Video processed and embeddings inserted")

    # Create index for fast search performance
    supabase.query("CREATE INDEX ON video_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)").execute()
    print("Created index")

----------------------------------------

TITLE: Implementing Social Authentication in Flutter
DESCRIPTION: Implementation of social authentication buttons with multiple providers and customization options.

LANGUAGE: dart
CODE:
SupaSocialsAuth(
  socialProviders: [
    OAuthProvider.apple,
    OAuthProvider.google,
  ],
  colored: true,
  redirectUrl: kIsWeb
    ? null
    : 'io.mydomain.myapp://callback',
  onSuccess: (Session response) {},
  onError: (error) {},
)

----------------------------------------

TITLE: Initializing Supabase Client for JavaScript
DESCRIPTION: Creates a Supabase client instance for use in JavaScript applications. This snippet is a prerequisite for performing authentication operations.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY')

----------------------------------------

TITLE: Configuring Deep Linking for iOS in Swift
DESCRIPTION: This XML snippet demonstrates how to configure custom URL schemes for deep linking in an iOS app using Swift by modifying the Info.plist file.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <!-- other tags -->
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.user-management</string>
      </array>
    </dict>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Creating Badge-like Link in React
DESCRIPTION: Example of creating a link that looks like a badge using the badgeVariants helper function.

LANGUAGE: tsx
CODE:
<Link className={badgeVariants({ variant: 'outline' })}>Badge</Link>

----------------------------------------

TITLE: Setting Foreign Key Constraint to NO ACTION INITIALLY DEFERRED in PostgreSQL
DESCRIPTION: This SQL snippet shows how to modify a foreign key constraint to use NO ACTION INITIALLY DEFERRED. This option defers the constraint check until the end of the transaction.

LANGUAGE: sql
CODE:
alter table child
drop constraint child_father_fkey;

alter table child
add constraint child_father_fkey foreign key (father) references parent (id)
  on delete no action initially deferred;

----------------------------------------

TITLE: Installing pgloader for Bulk Data Import
DESCRIPTION: Command to install pgloader package on a Linux system for database migration.

LANGUAGE: bash
CODE:
$ apt-get install pgloader

----------------------------------------

TITLE: PostgREST Configuration for Performance Analysis
DESCRIPTION: SQL commands to enable query plan analysis in PostgREST.

LANGUAGE: sql
CODE:
alter role authenticator set pgrst.db_plan_enabled to true;
NOTIFY pgrst, 'reload config';

----------------------------------------

TITLE: Creating and Managing Group Roles
DESCRIPTION: Demonstrates creating a group role and adding members to it

LANGUAGE: bash
CODE:
create role developers nologin;
grant create on schema public to developers;
grant developers to junior_dev;
grant developers to senior_dev;

----------------------------------------

TITLE: Installing and Using PostgreSQL Package with dbdev
DESCRIPTION: Demonstrates how to install and enable a package (olirice-asciiplot) using dbdev package manager.

LANGUAGE: sql
CODE:
-- Load the package from the package index
select
  dbdev.install ('olirice-asciiplot');

-- Enable the extension
create extension "olirice-asciiplot" version '0.2.1';

----------------------------------------

TITLE: Dropping Function or Trigger in Supabase
DESCRIPTION: SQL commands to drop a function (and its associated triggers) or just a trigger. This is used to resolve trigger-related errors in Supabase authentication.

LANGUAGE: sql
CODE:
-- delete the trigger with the following SQL:
DROP FUNCTION <function name>() CASCADE;

-- If you'd prefer, you can drop the trigger alone with the following query:
-- DROP TRIGGER <trigger_name> on auth.<table_name>;

----------------------------------------

TITLE: Unnesting Example for API Logs in SQL
DESCRIPTION: Demonstrates how to unnest the metadata field in edge_logs to extract status_code from the response.

LANGUAGE: sql
CODE:
select
  event_message,
  status_code
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(response) as response;

----------------------------------------

TITLE: Creating a Custom Role for Prisma in PostgreSQL
DESCRIPTION: SQL commands to create a dedicated Prisma user with specific permissions for better security and observability.

LANGUAGE: sql
CODE:
create user "prisma" with password 'secret_password' bypassrls createdb;

LANGUAGE: sql
CODE:
grant "prisma" to "postgres";

LANGUAGE: sql
CODE:
alter user "prisma" with password 'new_password';

----------------------------------------

TITLE: Stopping Presence Tracking in Supabase
DESCRIPTION: Demonstrates how to stop tracking presence using the untrack() method, which triggers sync and leave event handlers for other clients.

LANGUAGE: javascript
CODE:
const untrackPresence = async () => {
  const presenceUntrackStatus = await roomOne.untrack()
  console.log(presenceUntrackStatus)
}

untrackPresence()

LANGUAGE: dart
CODE:
final roomOne = supabase.channel('room_01');

untrackPresence() async {
  final presenceUntrackStatus = await roomOne.untrack();
  print(presenceUntrackStatus);
}

untrackPresence();

LANGUAGE: swift
CODE:
await roomOne.untrack()

LANGUAGE: kotlin
CODE:
suspend fun untrackPresence() {
	roomOne.untrack()
}

untrackPresence()

LANGUAGE: python
CODE:
room_one.untrack()

----------------------------------------

TITLE: Installing Turnstile React Package
DESCRIPTION: Command to install the Cloudflare Turnstile React component package

LANGUAGE: bash
CODE:
npm install @marsidev/react-turnstile

----------------------------------------

TITLE: Using Adaptive Retrieval Function with Supabase Client
DESCRIPTION: Example of how to use the Adaptive Retrieval function with the Supabase JavaScript client.

LANGUAGE: typescript
CODE:
const { error: matchError, data: pageSections } = await supabase.rpc('match_documents_adaptive', {
  query_embedding: embedding,
  match_count: 10,
})

----------------------------------------

TITLE: Signing Out a User with Supabase Authentication
DESCRIPTION: This snippet shows how to sign out a user using Supabase authentication. It's included to demonstrate that signing out doesn't affect the MAU count for the billing cycle.

LANGUAGE: javascript
CODE:
const {error} = await supabase.auth.signOut()

----------------------------------------

TITLE: Configuring Anonymous Sign-ins in Supabase CLI
DESCRIPTION: Configuration settings to enable anonymous sign-ins in the local development environment using the config.toml file.

LANGUAGE: toml
CODE:
[auth]
enable_anonymous_sign_ins = true

----------------------------------------

TITLE: Dropdown Menu in Breadcrumb
DESCRIPTION: Shows how to integrate a dropdown menu within a breadcrumb item for additional navigation options.

LANGUAGE: tsx
CODE:
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

...

<BreadcrumbItem>
  <DropdownMenu>
    <DropdownMenuTrigger className="flex items-center gap-1">
      Components
      <ChevronDownIcon />
    </DropdownMenuTrigger>
    <DropdownMenuContent align="start">
      <DropdownMenuItem>Documentation</DropdownMenuItem>
      <DropdownMenuItem>Themes</DropdownMenuItem>
      <DropdownMenuItem>GitHub</DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</BreadcrumbItem>

----------------------------------------

TITLE: Inserting Data into Supabase Tables using Python
DESCRIPTION: Python script to insert random data into Vendor and Product tables in Supabase. It uses the Faker library to generate realistic sample data and the Supabase Python SDK to perform the insertions.

LANGUAGE: python
CODE:
import os
import json
from dotenv import load_dotenv
from supabase import create_client, Client
from faker import Faker
import faker_commerce


def add_entries_to_vendor_table(supabase, vendor_count):
    fake = Faker()
    foreign_key_list = []
    fake.add_provider(faker_commerce.Provider)
    main_list = []
    for i in range(vendor_count):
        value = {'vendor_name': fake.company(), 'total_employees': fake.random_int(40, 169),
                 'vendor_location': fake.country()}

        main_list.append(value)
    data = supabase.table('Vendor').insert(main_list).execute()
    data_json = json.loads(data.json())
    data_entries = data_json['data']
    for i in range(len(data_entries)):
        foreign_key_list.append(int(data_entries[i]['vendor_id']))
    return foreign_key_list


def add_entries_to_product_table(supabase, vendor_id):
    fake = Faker()
    fake.add_provider(faker_commerce.Provider)
    main_list = []
    iterator = fake.random_int(1, 15)
    for i in range(iterator):
        value = {'vendor_id': vendor_id, 'product_name': fake.ecommerce_name(),
                 'inventory_count': fake.random_int(1, 100), 'price': fake.random_int(45, 100)}
        main_list.append(value)
    data = supabase.table('Product').insert(main_list).execute()


def main():
    vendor_count = 10
    load_dotenv()
    url: str = os.environ.get("SUPABASE_URL")
    key: str = os.environ.get("SUPABASE_KEY")
    supabase: Client = create_client(url, key)
    fk_list = add_entries_to_vendor_table(supabase, vendor_count)
    for i in range(len(fk_list)):
        add_entries_to_product_table(supabase, fk_list[i])


main()

----------------------------------------

TITLE: Restrict Access to SSO Users Custom Access Token Hook in SQL
DESCRIPTION: This SQL function creates a custom access token hook that restricts access to internal applications by requiring employees to log in via SAML Single Sign-On (SSO). It includes an allowlist for exempting specific employees from this policy.

LANGUAGE: sql
CODE:
create or replace function public.restrict_application_access(event jsonb)
 returns jsonb
 language plpgsql
as $function$
declare
    authentication_method text;
    email_claim text;
    allowed_emails text[] := array['myemail@company.com', 'example@company.com'];
begin
    -- Extract email claim and authentication method
    email_claim = event->'claims'->>'email';
    authentication_method = event->'authentication_method';
    -- Authentication methods come double quoted (e.g. "otp")
    authentication_method = replace(authentication_method, '"', '');

    if email_claim ilike '%@supabase.io' or authentication_method = 'sso/saml' or email_claim = any(allowed_emails) then
        return event;
    end if;

    -- If none of the conditions are met, return an error
    return jsonb_build_object(
        'error', jsonb_build_object(
            'http_code', 403,
            'message', 'Staging access is only allowed to team members. Please use your @company.com account instead'
        )
    );
end;
$function$
;
-- manually added
grant execute
  on function public.restrict_application_access
  to supabase_auth_admin;

revoke execute
  on function public.restrict_application_access
  from authenticated, anon, public;

----------------------------------------

TITLE: Restrict Access to SSO Users Custom Access Token Hook in SQL
DESCRIPTION: This SQL function creates a custom access token hook that restricts access to internal applications by requiring employees to log in via SAML Single Sign-On (SSO). It includes an allowlist for exempting specific employees from this policy.

LANGUAGE: sql
CODE:
create or replace function public.restrict_application_access(event jsonb)
 returns jsonb
 language plpgsql
as $function$
declare
    authentication_method text;
    email_claim text;
    allowed_emails text[] := array['myemail@company.com', 'example@company.com'];
begin
    -- Extract email claim and authentication method
    email_claim = event->'claims'->>'email';
    authentication_method = event->'authentication_method';
    -- Authentication methods come double quoted (e.g. "otp")
    authentication_method = replace(authentication_method, '"', '');

    if email_claim ilike '%@supabase.io' or authentication_method = 'sso/saml' or email_claim = any(allowed_emails) then
        return event;
    end if;

    -- If none of the conditions are met, return an error
    return jsonb_build_object(
        'error', jsonb_build_object(
            'http_code', 403,
            'message', 'Staging access is only allowed to team members. Please use your @company.com account instead'
        )
    );
end;
$function$
;
-- manually added
grant execute
  on function public.restrict_application_access
  to supabase_auth_admin;

revoke execute
  on function public.restrict_application_access
  from authenticated, anon, public;

----------------------------------------

TITLE: Running Supabase Functions Locally for OG Image Generation
DESCRIPTION: Commands to start Supabase locally and serve the lw12-ticket-og function without JWT verification, using a local environment file.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lw12-ticket-og --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Querying with Bit Vectors and Binary Quantization
DESCRIPTION: Shows how to create and query using bit vectors with binary quantization for efficient preliminary searching.

LANGUAGE: sql
CODE:
create index on embedding
  using hnsw ((binary_quantize(vector)::bit(1000)) bit_hamming_ops);

select
  *
from
  embedding
order by
  binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')
limit 5;

----------------------------------------

TITLE: Specifying Scheme and Host for Supabase Client in Android Kotlin
DESCRIPTION: This Kotlin code snippet shows how to specify the scheme and host for the Supabase Client in an Android app.

LANGUAGE: kotlin
CODE:
install(Auth) {
   host = "login-callback"
   scheme = "io.supabase.user-management"
}

----------------------------------------

TITLE: Retrieving Embedded Support Events from Google Calendar in PostgreSQL
DESCRIPTION: This SQL function fetches embedded support events from a Google Calendar API for a specified date range. It uses vault-stored secrets for the API URL and returns the event names as a JSON array.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION "public"."get_embedded_event_names"
	("date_param" timestamp with time zone DEFAULT "now"())
  RETURNS "jsonb"
  LANGUAGE "plpgsql" SECURITY DEFINER
  SET "search_path" TO ''
  AS $$
DECLARE
  target_date timestamp with time zone := COALESCE(date_param, now());
  start_date timestamp with time zone := target_date + INTERVAL '2 hours';
  end_date timestamp with time zone := start_date + INTERVAL '1 day' - INTERVAL '1 millisecond';
  time_min text := to_char(start_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"');
  time_max text := to_char(end_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"');
  base_url text;
  api_url text;
  response jsonb;
  events jsonb; -- Change the declaration to jsonb
  embedded_event_names text[];
BEGIN
  SELECT decrypted_secret
  INTO base_url
  FROM vault.decrypted_secrets
  WHERE name = 'calendar_base_url';

  api_url := base_url || '&timeMin=' || time_min || '&timeMax=' || time_max;

  select "content"::jsonb into response from extensions.http_get(api_url);
  events := response->'items'; -- Remove the typecast to ::jsonb

  SELECT ARRAY_AGG(event->>'summary')
  INTO embedded_event_names
  FROM jsonb_array_elements(events) AS event -- Use jsonb_array_elements function
  WHERE (event->>'summary') ILIKE '%embedded%';
  RETURN COALESCE(to_jsonb(embedded_event_names)::text,'[]');
END;
$$;

----------------------------------------

TITLE: Serving Multiple Edge Functions with Supabase CLI
DESCRIPTION: Command to serve multiple Edge Functions simultaneously using Supabase CLI version 1.36+

LANGUAGE: bash
CODE:
supabase functions serve

----------------------------------------

TITLE: Generating OpenAI Embeddings
DESCRIPTION: TypeScript code to generate embeddings from movie overviews using OpenAI's embedding API.

LANGUAGE: typescript
CODE:
const response = await fetch('https://api.openai.com/v1/embeddings', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${openAiApiKey}`,
  },
  body: JSON.stringify({
    input: film.overview,
    model: 'text-embedding-3-small',
  }),
})

const responseData = await response.json()
if (responseData.error) {
  return returnError({
    message: `Error obtaining Open API embedding: ${responseData.error.message}`,
  })
}

const embedding = responseData.data[0].embedding

----------------------------------------

TITLE: Calling Test Authorization Function with JavaScript in Supabase
DESCRIPTION: This JavaScript snippet demonstrates how to call the 'test_authorization_header' function using Supabase's RPC method and log the user role and UUID. It helps in verifying the user session during database operations.

LANGUAGE: javascript
CODE:
const { data: testData, error: testError } = await supabase.rpc('test_authorization_header')
console.log(`The user role is ${testData.role} and the user UUID is ${testData.sub}. `, testError)

----------------------------------------

TITLE: Installing Auth UI Dependencies
DESCRIPTION: Command to install the required packages for using Auth UI with Supabase in a React project.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared

----------------------------------------

TITLE: Creating Table with Text Column
DESCRIPTION: SQL command to create a sample table with a text column for demonstrating full text search.

LANGUAGE: sql
CODE:
create table memos (
  id serial primary key,
  content text
);

----------------------------------------

TITLE: Querying Role Configurations in PostgreSQL
DESCRIPTION: Retrieves the configuration settings for specific roles, including their statement timeout settings. This is useful for verifying role-level timeout configurations.

LANGUAGE: sql
CODE:
select
  rolname,
  rolconfig
from pg_roles
where
  rolname in (
    'anon',
    'authenticated',
    'postgres',
    'service_role'
    -- ,<ANY CUSTOM ROLES>
  );

----------------------------------------

TITLE: Setting up environment variables for Supabase in SvelteKit
DESCRIPTION: Create a .env.local file with Supabase URL and anonymous key for use in a SvelteKit application.

LANGUAGE: txt
CODE:
PUBLIC_SUPABASE_URL=<your_supabase_project_url>
PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>

----------------------------------------

TITLE: Supabase Query Performance Analysis
DESCRIPTION: JavaScript example showing how to use explain() modifier with Supabase client for query analysis.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', 1)
  .explain({ analyze: true })

console.log(data)

----------------------------------------

TITLE: Supabase Article Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the blog post defining metadata like title, description, author, and other properties.

LANGUAGE: yaml
CODE:
---
title: 'Supabase Security Suite'
description: 'Learn how to use range columns in Postgres to simplify time-based queries and add constraints to prevent overlaps.'
author: paul_copplestone
image: security-suite/hardening-og.png
thumb: security-suite/hardening-thumb.png
categories:
  - product
tags:
  - security
date: '2024-07-11'
toc_depth: 3
---

----------------------------------------

TITLE: Configuring Robot Access in robots.txt
DESCRIPTION: This snippet defines the robot exclusion protocol settings. It allows all user agents to access all parts of the website without any restrictions.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Downloading from Firebase Storage Bucket
DESCRIPTION: Command line syntax for downloading files from a Firebase Storage bucket to a local filesystem folder. It includes optional parameters for customizing the download process.

LANGUAGE: bash
CODE:
node download.js <prefix> [<folder>] [<batchSize>] [<limit>] [<token>]

----------------------------------------

TITLE: Setting Supabase Environment Variables
DESCRIPTION: Bash commands to set environment variables for Supabase URL and API keys. These are necessary for authenticating with the Supabase project.

LANGUAGE: bash
CODE:
export SUPABASE_URL=<<the value under config > URL>>
export SUPABASE_KEY=<<the value present in Project API keys > anon public>>
export SUPABASE_SECRET_KEY=<<the value present in Project API keys > service_role secret>>

----------------------------------------

TITLE: Analyzing Frequented Query Paths by Authenticated User in SQL
DESCRIPTION: SQL query to find the most frequently accessed API paths for each authenticated user, helping understand user behavior.

LANGUAGE: sql
CODE:
select
  auth_users,
  path,
  count(auth_users) as ip_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(sb) as sb
where
  regexp_contains(path, '^/rest/v1/')
group by auth_users, path;

----------------------------------------

TITLE: Copying Environment File in Bash
DESCRIPTION: This command copies the example environment file to create a new .env file for storing the Resend API key.

LANGUAGE: bash
CODE:
cp .env.example .env

----------------------------------------

TITLE: GraphQL Query with Commas
DESCRIPTION: Example showing how commas can be used in GraphQL queries since they are ignored by the tokenizer.

LANGUAGE: graphql
CODE:
query, {,
  bookCollection, {,
    edges, {,
      node, {,
        id,
      },
    },
  },
},

----------------------------------------

TITLE: Handling email verification in SvelteKit with Supabase
DESCRIPTION: Implement an API route to handle email verification for Supabase authentication in a SvelteKit application.

LANGUAGE: ts
CODE:
import type { EmailOtpType } from '@supabase/supabase-js'
import { redirect } from '@sveltejs/kit'

import type { RequestHandler } from './$types'

export const GET: RequestHandler = async ({ url, locals: { supabase } }) => {
  const token_hash = url.searchParams.get('token_hash')
  const type = url.searchParams.get('type') as EmailOtpType | null
  const next = url.searchParams.get('next') ?? '/'

  const redirectTo = new URL(url)
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const { error } = await supabase.auth.verifyOtp({ type, token_hash })
    if (!error) {
      redirectTo.searchParams.delete('next')
      redirect(303, redirectTo)
    }
  }

  redirectTo.pathname = '/auth/error'
  redirect(303, redirectTo)
}

----------------------------------------

TITLE: Protecting Actions in SvelteKit
DESCRIPTION: TypeScript code for protecting an action in SvelteKit using Supabase authentication.

LANGUAGE: typescript
CODE:
import { error, fail } from '@sveltejs/kit'

export const actions = {
  createPost: async ({ request, locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()

    if (!session) {
      // the user is not signed in
      throw error(401, { message: 'Unauthorized' })
    }
    // we are save, let the user create the post
    const formData = await request.formData()
    const content = formData.get('content')

    const { error: createPostError, data: newPost } = await supabase
      .from('posts')
      .insert({ content })

    if (createPostError) {
      return fail(500, {
        supabaseErrorMessage: createPostError.message,
      })
    }
    return {
      newPost,
    }
  },
}

----------------------------------------

TITLE: Installing Toggle Group Component via CLI
DESCRIPTION: Command to install the Toggle Group component using the shadcn-ui CLI.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add toggle-group

----------------------------------------

TITLE: Creating Account Page in Ionic Angular
DESCRIPTION: Implement an AccountPage component to allow users to view and edit their profile information.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core'
import { Router } from '@angular/router'
import { Profile, SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-account',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Account</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <form>
        <ion-item>
          <ion-label position="stacked">Email</ion-label>
          <ion-input type="email" name="email" [(ngModel)]="email" readonly></ion-input>
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Name</ion-label>
          <ion-input type="text" name="username" [(ngModel)]="profile.username"></ion-input>
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Website</ion-label>
          <ion-input type="url" name="website" [(ngModel)]="profile.website"></ion-input>
        </ion-item>
        <div class="ion-text-center">
          <ion-button fill="clear" (click)="updateProfile()">Update Profile</ion-button>
        </div>
      </form>

      <div class="ion-text-center">
        <ion-button fill="clear" (click)="signOut()">Log Out</ion-button>
      </div>
    </ion-content>
  `,
  styleUrls: ['./account.page.scss'],
})
export class AccountPage implements OnInit {
  profile: Profile = {
    username: '',
    avatar_url: '',
    website: '',
  }

  email = ''

  constructor(
    private readonly supabase: SupabaseService,
    private router: Router
  ) {}
  ngOnInit() {
    this.getEmail()
    this.getProfile()
  }

  async getEmail() {
    this.email = await this.supabase.user.then((user) => user?.email || '')
  }

  async getProfile() {
    try {
      const { data: profile, error, status } = await this.supabase.profile
      if (error && status !== 406) {
        throw error
      }
      if (profile) {
        this.profile = profile
      }
    } catch (error: any) {
      alert(error.message)
    }
  }

  async updateProfile(avatar_url: string = '') {
    const loader = await this.supabase.createLoader()
    await loader.present()
    try {
      const { error } = await this.supabase.updateProfile({ ...this.profile, avatar_url })
      if (error) {
        throw error
      }
      await loader.dismiss()
      await this.supabase.createNotice('Profile updated!')
    } catch (error: any) {
      await loader.dismiss()
      await this.supabase.createNotice(error.message)
    }
  }

  async signOut() {
    console.log('testing?')
    await this.supabase.signOut()
    this.router.navigate(['/'], { replaceUrl: true })
  }
}

----------------------------------------

TITLE: Using Helper Types for Tables and Joins in TypeScript
DESCRIPTION: This snippet demonstrates how to use helper types to simplify accessing table and enum types in TypeScript.

LANGUAGE: typescript
CODE:
import { Database, Tables, Enums } from "./database.types.ts";

// Before 😕
let movie: Database['public']['Tables']['movies']['Row'] = // ...

// After 😍
let movie: Tables<'movies'>

----------------------------------------

TITLE: Creating Vector Similarity Search Function
DESCRIPTION: SQL function to find related films based on vector similarity using HNSW index for performance optimization.

LANGUAGE: sql
CODE:
create index on films using hnsw (embedding vector_cosine_ops);

create or replace function get_related_film(embedding vector(1536), film_id integer)
returns setof films
language sql
as $$
    select *
    from films
    where id != film_id
    order by films.embedding <=> get_related_film.embedding
    limit 6;
$$ security invoker;

----------------------------------------

TITLE: Inefficient SQL Query Example
DESCRIPTION: An example of an inefficient SQL query that could cause performance issues if run by many clients simultaneously. This query sleeps for 60 seconds, potentially causing a backlog of pending queries.

LANGUAGE: sql
CODE:
-- do nothing for 60 seconds
select pg_sleep(60);

----------------------------------------

TITLE: Linking Anonymous User to Existing Account in Supabase
DESCRIPTION: Provides a general approach for linking an anonymous user to an existing account, including error handling and conflict resolution.

LANGUAGE: javascript
CODE:
// 1. Sign in anonymously (assuming the user is already signed in anonymously)
const { data: anonData, error: anonError } = await supabase.auth.getSession()

// 2. Attempt to update the user with the existing email
const { data: updateData, error: updateError } = await supabase.auth.updateUser({
  email: 'valid.email@supabase.io',
})

// 3. Handle the error (since the email belongs to an existing user)
if (updateError) {
  console.log('This email belongs to an existing user. Please sign in to that account.')

  // 4. Sign in to the existing account
  const {
    data: { user: existingUser },
    error: signInError,
  } = await supabase.auth.signInWithPassword({
    email: 'valid.email@supabase.io',
    password: 'user_password',
  })

  if (existingUser) {
    // 5. Reassign entities tied to the anonymous user
    // This step will vary based on your specific use case and data model
    const { data: reassignData, error: reassignError } = await supabase
      .from('your_table')
      .update({ user_id: existingUser.id })
      .eq('user_id', anonData.session.user.id)

    // 6. Implement your chosen conflict resolution strategy
    // This could involve merging data, overwriting, or other custom logic
    await resolveDataConflicts(anonData.session.user.id, existingUser.id)
  }
}

// Helper function to resolve data conflicts (implement based on your strategy)
async function resolveDataConflicts(anonymousUserId, existingUserId) {
  // Implement your conflict resolution logic here
  // This could involve ignoring the anonymous user's metadata, overwriting the existing user's metadata, or merging the data of both the anonymous and existing user.
}

----------------------------------------

TITLE: Installing Auth UI Dependencies
DESCRIPTION: Command to install the required packages for using Auth UI with Supabase in a React project.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared

----------------------------------------

TITLE: DNS TXT Record Query
DESCRIPTION: Command to query TXT records of the domain to find hidden flag

LANGUAGE: bash
CODE:
dig TXT miskatonicuniversity.us

----------------------------------------

TITLE: Creating Users via Admin API
DESCRIPTION: SQL query demonstrating the use of edge.exec function to create users using the Supabase admin API.

LANGUAGE: sql
CODE:
select edge.exec(
$js$

const { data, error } = await supabase.auth.admin.createUser({
  email: 'user@email.com',
  password: 'password',
  user_metadata: { name: 'Yoda' }
});

$js$));

----------------------------------------

TITLE: Running Supabase Functions Locally with Oak Server Middleware
DESCRIPTION: This command starts a local Supabase function server using Oak middleware without JWT verification.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: Blog Post Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the blog post, defining metadata like title, description, author details, and categories.

LANGUAGE: yaml
CODE:
---
title: Supabase Beta December 2021
description: New crypto extension, Postgres videos, and a bunch of cool integrations.
author: paul_copplestone
author_url: https://github.com/kiwicopple
author_image_url: https://github.com/kiwicopple.png
image: 2021-dec/release-dec-2021.png
thumb: 2021-dec/release-dec-2021-cover.png
categories:
  - product
tags:
  - release-notes
date: '2022-01-20'
toc_depth: 3
video: https://www.youtube.com/v/I6nnp9AINJk
---

----------------------------------------

TITLE: Encoding JWT Payload in JavaScript
DESCRIPTION: Demonstrates the structure of a basic JWT payload containing user information and token metadata.

LANGUAGE: javascript
CODE:
{
  "sub": "0001",
  "name": "Sam Vimes",
  "iat": 1516239022,
  "exp": 1518239022
}

----------------------------------------

TITLE: Encoding JWT Payload in JavaScript
DESCRIPTION: Demonstrates the structure of a basic JWT payload containing user information and token metadata.

LANGUAGE: javascript
CODE:
{
  "sub": "0001",
  "name": "Sam Vimes",
  "iat": 1516239022,
  "exp": 1518239022
}

----------------------------------------

TITLE: Importing Edge Runtime AI Functions in TypeScript
DESCRIPTION: Demonstrates how to import streaming AI functions that are restricted to Edge runtime environment via a special subpath.

LANGUAGE: typescript
CODE:
import { chatRlsPolicy } from 'ai-commands/edge'

----------------------------------------

TITLE: Modifying Autovacuum Scale Factor
DESCRIPTION: Shows how to adjust the autovacuum_vacuum_scale_factor parameter for more frequent vacuum operations on large tables.

LANGUAGE: sql
CODE:
ALTER TABLE mytable SET autovacuum_vacuum_scale_factor to 0.05;

----------------------------------------

TITLE: Deploying Supabase Function for Telegram Bot
DESCRIPTION: Command to deploy the Telegram bot function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy --no-verify-jwt telegram-bot

----------------------------------------

TITLE: Configuring Android Deep Links
DESCRIPTION: Configuration for Android deep linking to handle authentication redirects

LANGUAGE: xml
CODE:
<intent-filter>
  <action android:name="android.intent.action.VIEW" />
  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />
  <data
    android:scheme="io.supabase.chat"
    android:host="login" />
</intent-filter>

----------------------------------------

TITLE: Database Seeding Function
DESCRIPTION: Function to create vector collection and store image embeddings in Supabase

LANGUAGE: python
CODE:
def seed():
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)
    img_emb1 = encode_image('./images/one.jpg')
    img_emb2 = encode_image('./images/two.jpg')
    img_emb3 = encode_image('./images/three.jpg')
    img_emb4 = encode_image('./images/four.jpg')
    images.upsert(
        records=[
            ("one.jpg", img_emb1, {"type": "jpg"}),
            ("two.jpg", img_emb2, {"type": "jpg"}),
            ("three.jpg", img_emb3, {"type": "jpg"}),
            ("four.jpg", img_emb4, {"type": "jpg"})
        ]
    )
    print("Inserted images")
    images.create_index()
    print("Created index")

----------------------------------------

TITLE: Using Supabase JS in Deno
DESCRIPTION: Import the Supabase JavaScript client library in Deno runtime using JSR (JavaScript Registry).

LANGUAGE: typescript
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

----------------------------------------

TITLE: Displaying Environment Variables for Supabase-Vercel Integration
DESCRIPTION: This code snippet shows the list of environment variables that Supabase manages for Vercel projects. These include database connection details, Supabase keys, and public URLs.

LANGUAGE: jsx
CODE:
POSTGRES_URL // URL of your Postgres database.
POSTGRES_URL_NON_POOLING // URL of your Postgres database without pooling.
POSTGRES_USER // Username for your Postgres database.
POSTGRES_HOST // Host for your Postgres database.
POSTGRES_PASSWORD // Password for your Postgres database.
POSTGRES_DATABASE // Name of your Postgres database.
SUPABASE_SERVICE_ROLE_KEY // Service role key for your Supabase project.
SUPABASE_URL // URL for your Supabase project.
SUPABASE_ANON_KEY // Anonymous key for your Supabase project.
NEXT_PUBLIC_SUPABASE_URL // Publicly accessible URL for your Supabase project.
NEXT_PUBLIC_SUPABASE_ANON_KEY // Publicly accessible anonymous key for your Supabase project.

----------------------------------------

TITLE: Implementing Text-to-Speech Edge Function in TypeScript
DESCRIPTION: Complete implementation of the Supabase Edge Function for text-to-speech conversion. Includes setup for Supabase client, ElevenLabs client, audio storage, and request handling.

LANGUAGE: typescript
CODE:
// Setup type definitions for built-in Supabase Runtime APIs
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { ElevenLabsClient } from 'npm:elevenlabs@1.52.0'
import * as hash from 'npm:object-hash'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

const client = new ElevenLabsClient({
  apiKey: Deno.env.get('ELEVENLABS_API_KEY'),
})

// Upload audio to Supabase Storage in a background task
async function uploadAudioToStorage(stream: ReadableStream, requestHash: string) {
  const { data, error } = await supabase.storage
    .from('audio')
    .upload(`${requestHash}.mp3`, stream, {
      contentType: 'audio/mp3',
    })

  console.log('Storage upload result', { data, error })
}

Deno.serve(async (req) => {
  // To secure your function for production, you can for example validate the request origin,
  // or append a user access token and validate it with Supabase Auth.
  console.log('Request origin', req.headers.get('host'))
  const url = new URL(req.url)
  const params = new URLSearchParams(url.search)
  const text = params.get('text')
  const voiceId = params.get('voiceId') ?? 'JBFqnCBsd6RMkjVDRZzb'

  const requestHash = hash.MD5({ text, voiceId })
  console.log('Request hash', requestHash)

  // Check storage for existing audio file
  const { data } = await supabase.storage.from('audio').createSignedUrl(`${requestHash}.mp3`, 60)

  if (data) {
    console.log('Audio file found in storage', data)
    const storageRes = await fetch(data.signedUrl)
    if (storageRes.ok) return storageRes
  }

  if (!text) {
    return new Response(JSON.stringify({ error: 'Text parameter is required' }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' },
    })
  }

  try {
    console.log('ElevenLabs API call')
    const response = await client.textToSpeech.convertAsStream(voiceId, {
      output_format: 'mp3_44100_128',
      model_id: 'eleven_multilingual_v2',
      text,
    })

    const stream = new ReadableStream({
      async start(controller) {
        for await (const chunk of response) {
          controller.enqueue(chunk)
        }
        controller.close()
      },
    })

    // Branch stream to Supabase Storage
    const [browserStream, storageStream] = stream.tee()

    // Upload to Supabase Storage in the background
    EdgeRuntime.waitUntil(uploadAudioToStorage(storageStream, requestHash))

    // Return the streaming response immediately
    return new Response(browserStream, {
      headers: {
        'Content-Type': 'audio/mpeg',
      },
    })
  } catch (error) {
    console.log('error', { error })
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Creating a Storage Bucket using Swift
DESCRIPTION: This Swift code shows how to create a storage bucket named 'avatars' using the Supabase client library.

LANGUAGE: swift
CODE:
try await supabase.storage.createBucket("avatars")

----------------------------------------

TITLE: Importing Multi Select Components in React
DESCRIPTION: This snippet shows how to import the necessary components for the Multi Select functionality.

LANGUAGE: tsx
CODE:
import {
  MultiSelector,
  MultiSelectorTrigger,
  MultiSelectorContent,
  MultiSelectorItem,
} from 'ui-patterns/multi-select'

----------------------------------------

TITLE: Executing EXPLAIN Query in SQL
DESCRIPTION: Demonstrates how to use the EXPLAIN command in PostgreSQL to analyze a simple SELECT query.

LANGUAGE: sql
CODE:
EXPLAIN SELECT * FROM users WHERE user_id = 1;

----------------------------------------

TITLE: GitLab OAuth Sign In - Flutter
DESCRIPTION: Implements GitLab OAuth authentication using Supabase Auth in Flutter. Includes configuration for both web and mobile platforms with custom redirect handling and launch modes.

LANGUAGE: dart
CODE:
Future<void> signInWithGitLab() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.gitlab,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Removing IP Bans in Supabase using CLI
DESCRIPTION: Command to remove an IP address from the ban list in your Supabase project. Requires both the IP address to unban and the project reference ID.

LANGUAGE: bash
CODE:
supabase network-bans remove --db-unban-ip <ip_address> --project-ref <project_reference_id> --experimental

----------------------------------------

TITLE: Performing Image Search
DESCRIPTION: Example command for performing a vector similarity search using a text query.

LANGUAGE: shell
CODE:
poetry run search "bike in front of red brick wall"

----------------------------------------

TITLE: Building Hono Project with npm
DESCRIPTION: Bash command to build the Hono project using the configured build script.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Recreating Database Constraint with Less Restrictive Modifier in Supabase
DESCRIPTION: SQL commands to drop and recreate a constraint with a less restrictive modifier (SET NULL, SET DEFAULT, or CASCADE) to resolve constraint-related errors in Supabase authentication.

LANGUAGE: sql
CODE:
BEGIN;
ALTER TABLE <your table> DROP CONSTRAINT <constraint name>;

ALTER TABLE <your table> ADD CONSTRAINT <constraint name> FOREIGN KEY (<column name>)
          REFERENCES auth.users (<auth.users column>)
          ON DELETE SET NULL;
COMMIT;

----------------------------------------

TITLE: Inserting Multi-Range Sensor Data
DESCRIPTION: Demonstrates inserting non-contiguous time ranges for sensor readings using the new multi-range functionality.

LANGUAGE: sql
CODE:
insert into sensor_range
  (metric_desc, metric_level, metric_ts)
values
  (
    'Temperature',
    'high',
    '{[2021-11-01 6:00, 2021-11-01 10:00],[2021-11-05 14:00, 2021-11-05 20:00]}'
  );

insert into sensor_range
  (metric_desc, metric_level, metric_ts)
values
  (
    'Temperature',
    'low',
    '{[2021-11-01 10:00, 2021-11-01 12:00],[2021-11-05 21:00, 2021-11-05 22:00]}'
  );

----------------------------------------

TITLE: Add Metadata Claim via PLV8 Custom Access Token Hook in SQL
DESCRIPTION: This SQL function uses PLV8 to create a custom access token hook that adds a 'level' claim to the token based on user information stored in a profiles table. It showcases how to use JavaScript within SQL queries.

LANGUAGE: sql
CODE:
create or replace function custom_access_token_hook(event jsonb)
returns jsonb
language plv8
as $$
  var user_level;

  -- Fetch the current user's level from the profiles table
  var result = plv8.execute("select level from public.profiles where user_id = $1", [event.user_id]);
  if (result.length > 0) {
    user_level = result[0].level;
  } else {
    -- Assign a default level of 0 if no level is found
    user_level = 0;
  }

  -- Check if 'claims' exists in the event object; if not, initialize it
  if (!event.claims) {
    event.claims = {};
  }

  -- Update the level in the claims
  event.claims.level = user_level;

  return event;
$$;

grant all
  on table public.profiles
  to supabase_auth_admin;

revoke all
  on table public.profiles
  from authenticated, anon, public;

----------------------------------------

TITLE: Add Metadata Claim via PLV8 Custom Access Token Hook in SQL
DESCRIPTION: This SQL function uses PLV8 to create a custom access token hook that adds a 'level' claim to the token based on user information stored in a profiles table. It showcases how to use JavaScript within SQL queries.

LANGUAGE: sql
CODE:
create or replace function custom_access_token_hook(event jsonb)
returns jsonb
language plv8
as $$
  var user_level;

  -- Fetch the current user's level from the profiles table
  var result = plv8.execute("select level from public.profiles where user_id = $1", [event.user_id]);
  if (result.length > 0) {
    user_level = result[0].level;
  } else {
    -- Assign a default level of 0 if no level is found
    user_level = 0;
  }

  -- Check if 'claims' exists in the event object; if not, initialize it
  if (!event.claims) {
    event.claims = {};
  }

  -- Update the level in the claims
  event.claims.level = user_level;

  return event;
$$;

grant all
  on table public.profiles
  to supabase_auth_admin;

revoke all
  on table public.profiles
  from authenticated, anon, public;

----------------------------------------

TITLE: Querying pg_cron Scheduler Status in PostgreSQL
DESCRIPTION: SQL query to check if the pg_cron scheduler process is active by examining the pg_stat_activity table.

LANGUAGE: sql
CODE:
SELECT
  pid as process_id,
  usename as database_user,
  application_name,
  backend_start as when_process_began,
  wait_event_type,
  state,
  query,
  backend_type
FROM pg_stat_activity where application_name ilike 'pg_cron scheduler';

----------------------------------------

TITLE: Setting Slack Token Secret in Supabase
DESCRIPTION: Command to set the SLACK_TOKEN secret in Supabase project configuration using the CLI.

LANGUAGE: bash
CODE:
supabase --project-ref nacho_slacker secrets \
set SLACK_TOKEN=<xoxb-0000000000-0000000000-01010101010nacho101010>

----------------------------------------

TITLE: Basic Typography Example with HTML
DESCRIPTION: Demonstrates the basic usage of the prose class for styling paragraph content with Tailwind Typography

LANGUAGE: html
CODE:
<p class="lead">
  Until now, trying to style an article, document, or blog post with Tailwind has been a tedious
  task that required a keen eye for typography and a lot of complex custom CSS.
</p>

----------------------------------------

TITLE: MongoDB Document Insertion in FerretDB
DESCRIPTION: Example of inserting multiple player documents into a FerretDB collection using MongoDB syntax.

LANGUAGE: json5
CODE:
db.players.insertMany([
   {
       futbin_id: 3,
       player_name: "Giggs",
       player_extended_name: "Ryan Giggs",
       quality: "Gold - Rare",
       overall: 92,
       nationality: "Wales",
       position: "LM",
       pace: 90,
       dribbling: 91,
       shooting: 80,
       passing: 90,
       defending: 44,
       physicality: 67
   },
   {
       futbin_id: 4,
       player_name: "Scholes",
       player_extended_name: "Paul Scholes",
       quality: "Gold - Rare",
       overall: 91,
       nationality: "England",
       position: "CM",
       pace: 72,
       dribbling: 80,
       shooting: 87,
       passing: 91,
       defending: 64,
       physicality: 82,
       base_id: 246
   }
]);

----------------------------------------

TITLE: Setting up Database Schema in Supabase SQL Editor
DESCRIPTION: SQL code to set up the database schema for product management. This snippet creates tables for products, categories, and subcategories, along with their relationships and constraints.

LANGUAGE: sql
CODE:
<$Partial path="product_management_sql_template.mdx" />

----------------------------------------

TITLE: Configuring Deep Linking for Android in Kotlin
DESCRIPTION: This XML snippet shows how to configure deep linking for an Android app in Kotlin by adding an intent filter to the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<manifest ...>
  <!-- ... other tags -->
  <application ...>
    <activity ...>
      <!-- ... other tags -->

      <!-- Deep Links -->
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->
        <data
          android:scheme="YOUR_SCHEME"
          android:host="YOUR_HOSTNAME" />
      </intent-filter>
    </activity>
  </application>
</manifest>

----------------------------------------

TITLE: Configuring Gradle Dependencies for Supabase Android
DESCRIPTION: Sets up necessary Gradle dependencies including Supabase client, Ktor, and Kotlin serialization plugin for Android project integration.

LANGUAGE: kotlin
CODE:
plugins {
  ...
  kotlin("plugin.serialization") version "$kotlin_version"
}
...
dependencies {
  ...
  implementation(platform("io.github.jan-tennert.supabase:bom:$supabase_version"))
  implementation("io.github.jan-tennert.supabase:postgrest-kt")
  implementation("io.ktor:ktor-client-android:$ktor_version")
}

----------------------------------------

TITLE: Server-Side Authentication Integration
DESCRIPTION: Implementation of server-side authentication using Supabase client in Remix loaders and actions.

LANGUAGE: typescript
CODE:
import { json } from '@remix-run/node'
import { createServerClient } from '@supabase/auth-helpers-remix'

import type { LoaderFunctionArgs } from '@remix-run/node'

export const loader = async ({ request }: LoaderFunctionArgs) => {
  const response = new Response()
  const supabaseClient = createServerClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_ANON_KEY!,
    { request, response }
  )

  const { data } = await supabaseClient.from('test').select('*')

  return json(
    { data },
    {
      headers: response.headers,
    }
  )
}

----------------------------------------

TITLE: Starting Supabase Analytics with Postgres Backend
DESCRIPTION: Commands to clone the Supabase repository and start the Analytics server using docker-compose with the default Postgres backend configuration.

LANGUAGE: bash
CODE:
# clone the supabase/supabase repo, and run the following
cd docker
docker compose -f docker-compose.yml up

----------------------------------------

TITLE: Creating Inheriting Role
DESCRIPTION: Creates a new role that inherits permissions from a parent role.

LANGUAGE: sql
CODE:
create role "child_role_name" inherit "parent_role_name";

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Install the necessary Python libraries vecs and boto3 using pip.

LANGUAGE: sh
CODE:
pip install vecs boto3

----------------------------------------

TITLE: Defining Complex Query Response Types in TypeScript
DESCRIPTION: This example shows how to define and use response types for complex queries, including nested types for database joins.

LANGUAGE: typescript
CODE:
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const countriesWithCitiesQuery = supabase
  .from("countries")
  .select(`
    id,
    name,
    cities (
      id,
      name
    )
  `);
type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;

const { data, error } = await countriesWithCitiesQuery;
if (error) throw error;
const countriesWithCities: CountriesWithCities = data;

----------------------------------------

TITLE: Production Environment Setup
DESCRIPTION: Production environment configuration including Supabase URL, API key, and authentication URLs.

LANGUAGE: dotenv
CODE:
NEXT_PUBLIC_SUPABASE_URL=https://<your-project>.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your-project-apikey>
SUPABASE_AUTH_SITE_URL=https://<your-app-url>.vercel.app/
SUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS=https://<your-app-url>.vercel.app/**

----------------------------------------

TITLE: Simplified Query Execution in Dart
DESCRIPTION: Demonstrates the simplified query syntax in v1 that removes the need for .execute() method when performing database operations.

LANGUAGE: dart
CODE:
// Before
final response = await supabase.from('messages').select().execute();
final data = response.data;

// After
final data = await supabase.from('messages').select();

----------------------------------------

TITLE: Video Embed - YouTube Player
DESCRIPTION: HTML iframe implementation for embedding a YouTube video with custom player parameters and styling.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/4_duDgQeCyM?modestbranding=1&autohide=1&showinfo=0&controls=0"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: SQL command to enable the pgvector extension in a PostgreSQL database.

LANGUAGE: sql
CODE:
create extension vector;

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: Commands to start Supabase and generate TypeScript types for the database schema using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase start
supabase gen types typescript --local > DatabaseDefinitions.ts

----------------------------------------

TITLE: Rendering Resource Links with GlassPanel Component
DESCRIPTION: JSX code for rendering a grid of resource links using a GlassPanel component. Maps through an array of resource objects to create navigation links with titles and descriptions.

LANGUAGE: JSX
CODE:
[{
  title: 'Examples',
  hasLightIcon: true,
  href: '/guides/resources/examples',
  description: 'Official GitHub examples, curated content from the community, and more.',
},
{
  title: 'Glossary',
  hasLightIcon: true,
  href: '/guides/resources/glossary',
  description: 'Definitions for terminology and acronyms used in the Supabase documentation.',
}]
.map((resource) => {
  return (
    <Link
      href={`${resource.href}`}
      key={resource.title}
      className={'col-span-12 md:col-span-4'}
      passHref
    >
      <GlassPanel {...resource} background={false} showIconBg={true}>
        {resource.description}
      </GlassPanel>
    </Link>
  )
})

----------------------------------------

TITLE: Installing Popover Component Dependencies Manually
DESCRIPTION: This command installs the necessary dependency for the Popover component when setting up manually.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-popover

----------------------------------------

TITLE: PostgreSQL Row Level Security for SSO Tenants
DESCRIPTION: SQL policy implementation for multi-tenant access control using PostgreSQL Row Level Security with SSO provider identifiers.

LANGUAGE: sql
CODE:
create policy "Only allow read-write access to tenants" on tablename as restrictive to authenticated using (
  tenant_id = (select auth.jwt() -> 'app_metadata' ->> 'provider')
);

----------------------------------------

TITLE: Role Check Security Function in PostgreSQL
DESCRIPTION: Security definer function that checks if the current user has a specific role by querying the roles_table.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION has_role()
    RETURNS boolean as
$$
begin
    return exists (select 1 from roles_table where auth.uid() = user_id and role = 'good_role')
end;
$$ language plpgsql security definer;

----------------------------------------

TITLE: Querying Vector Database
DESCRIPTION: Performs vector similarity search with optional filters and parameters. Returns matching vector records based on cosine distance.

LANGUAGE: python
CODE:
docs.query(
    data=[0.4,0.5,0.6],  # required
    limit=5,                     # number of records to return
    filters={},                  # metadata filters
    measure="cosine_distance",   # distance measure to use
    include_value=False,         # should distance measure values be returned?
    include_metadata=False,      # should record metadata be returned?
)

----------------------------------------

TITLE: Executing Semantic Search via cURL
DESCRIPTION: Command to perform a semantic search using the deployed Supabase Edge Function. Requires project reference and anonymous key as parameters.

LANGUAGE: bash
CODE:
curl -i --location --request POST 'https://<PROJECT-REF>.supabase.co/functions/v1/search' \
    --header 'Authorization: Bearer <SUPABASE_ANON_KEY>' \
    --header 'Content-Type: application/json' \
    --data '{"search":"vehicles"}'

----------------------------------------

TITLE: Configuring Supabase Client in React
DESCRIPTION: JavaScript code to initialize the Supabase client with URL and anonymous key in a React application.

LANGUAGE: jsx
CODE:
import { createClient } from '@supabase/supabase-js'
const SUPABASE_URL = 'http://localhost:8000'
const SUPABASE_ANON_KEY = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

----------------------------------------

TITLE: Enabling pg_plan_filter Extension in Postgres
DESCRIPTION: Demonstrates how to enable the pg_plan_filter extension on a per-connection basis or for all connections in a database.

LANGUAGE: sql
CODE:
load 'plan_filter';

LANGUAGE: sql
CODE:
alter database some_db set session_preload_libraries = 'plan_filter';

----------------------------------------

TITLE: Enabling pg_plan_filter Extension in Postgres
DESCRIPTION: Demonstrates how to enable the pg_plan_filter extension on a per-connection basis or for all connections in a database.

LANGUAGE: sql
CODE:
load 'plan_filter';

LANGUAGE: sql
CODE:
alter database some_db set session_preload_libraries = 'plan_filter';

----------------------------------------

TITLE: OpenAI Integration in Edge Function
DESCRIPTION: Implementation of OpenAI chat completion API in an Edge Function. Shows how to initialize the OpenAI client and make API requests.

LANGUAGE: jsx
CODE:
import OpenAI from 'npm:openai@4.57.3'

const client = new OpenAI({
  apiKey: Deno.env.get('OPEN_AI_KEY'),
})

Deno.serve(async (req) => {
  const { query } = await req.json()

  const chatCompletion = await client.chat.completions.create({
    messages: [{ role: 'user', content: 'Say this is a test' }],
    model: 'gpt-3.5-turbo',
  })

  return new Response(chatCompletion)
})

----------------------------------------

TITLE: Running FerretDB Docker Container with Supabase Connection
DESCRIPTION: Docker commands to set up environment variables and run FerretDB container connected to a Supabase Postgres database.

LANGUAGE: bash
CODE:
# Set the required environment variables
export DB_USER=postgres
export DB_PASSWORD=<your db password>
export SUPA_PROJECT_REF=<your Supabase project ref>
export SUPA_REGION=<your project region>
export DB_URL=postgres://$DB_USER.$SUPA_PROJECT_REF:$DB_PASSWORD@$SUPA_REGION.pooler.supabase.com:5432/postgres

# Run FerretDB in docker container
docker run -p 27017:27017 -p 8080:8080 -e FERRETDB_POSTGRESQL_URL=$DB_URL ghcr.io/ferretdb/ferretdb

----------------------------------------

TITLE: Granting Permissions for DB Pull Operation
DESCRIPTION: SQL commands to grant necessary permissions to resolve permission denied errors when running db pull.

LANGUAGE: sql
CODE:
grant all on all tables in schema graphql to postgres, anon, authenticated, service_role;
grant all on all functions in schema graphql to postgres, anon, authenticated, service_role;
grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;

----------------------------------------

TITLE: Creating Access Policy for Authenticated Users in SQL
DESCRIPTION: SQL command to create a policy allowing authenticated users to read from the 'countries' table.

LANGUAGE: sql
CODE:
create policy "authenticated users can read countries"
on public.countries
for select to authenticated
using (true);

----------------------------------------

TITLE: Implementing Realtime Board Component
DESCRIPTION: Angular component for managing the Trello board interface with realtime updates using Supabase subscriptions

LANGUAGE: typescript
CODE:
import { DataService } from './../../../services/data.service';
import { Component, HostListener, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
...

----------------------------------------

TITLE: Embedded YouTube Video Iframe in Markdown
DESCRIPTION: HTML iframe code embedded in markdown to display a YouTube video about Supabase's community engagement and open source philosophy

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/4t_63HT3rZY"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Updating data insertion with return in TypeScript
DESCRIPTION: Example of how to update data insertion when upgrading from v1 to v2. The new version requires an explicit .select() call to return the inserted data.

LANGUAGE: typescript
CODE:
const { data, error } = await supabase
  .from('my_table')
  .insert({ new_data })
  .select()

----------------------------------------

TITLE: Ordering by Related Table Columns in PostgREST
DESCRIPTION: Demonstrates how to order query results based on a column from a related table. This feature is available for one-to-one and many-to-one relationships.

LANGUAGE: http
CODE:
GET /films?select=title,...technical_specs(duration)&order=technical_specs(duration).desc

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .from('films')
  .select(`
    title,
    ...technical_specs (
      duration
    )
  `)
   .order('technical_specs(duration)', { descending: true }))

LANGUAGE: json
CODE:
[
  {
    "title": "Amra Ekta Cinema Banabo",
    "duration": "21:05:00"
  },
  {
    "title": "Resan",
    "duration": "14:33:00"
  },
  "..."
]

----------------------------------------

TITLE: Specifying Content Type for Supabase Storage Uploads
DESCRIPTION: These snippets demonstrate how to specify the content type when uploading files to Supabase Storage. Examples are provided for multiple programming languages.

LANGUAGE: javascript
CODE:
// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

await supabase.storage.from('bucket_name').upload('file_path', file, {
  contentType: 'image/jpeg',
})

LANGUAGE: dart
CODE:
await supabase.storage.from('bucket_name').upload(
      'file_path',
      file,
      fileOptions: const FileOptions(contentType: 'image/jpeg'),
    );

LANGUAGE: swift
CODE:
import Supabase

// Create Supabase client
let supabase = SupabaseClient(supabaseURL: URL(string: "your_project_url")!, supabaseKey: "your_supabase_api_key")

try await supabase.storage.from("bucket_name")
  .upload(
    path: "file_path",
    file: file,
    options: FileOptions(
      contentType: "image/jpeg"
    )
  )

LANGUAGE: kotlin
CODE:
supabase.storage.from("bucket_name").upload("file_path", bytes) {
    contentType = ContentType.Image.JPEG
}

LANGUAGE: python
CODE:
response = supabase.storage.from_('bucket_name').upload('file_path', file, {
  'content-type': 'image/jpeg',
})

----------------------------------------

TITLE: Installing Dropdown Menu Component via CLI
DESCRIPTION: Command to install the dropdown menu component using the shadcn-ui CLI.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add dropdown-menu

----------------------------------------

TITLE: Importing Badge Component in React
DESCRIPTION: How to import the Badge component in a React application.

LANGUAGE: tsx
CODE:
import { Badge } from '@/components/ui/badge'

----------------------------------------

TITLE: Finding Database IP Address with nslookup
DESCRIPTION: This command uses nslookup to query the domain name servers and find the IP address of the Supabase database hostname.

LANGUAGE: sh
CODE:
nslookup db.<PROJECT_REF>.supabase.co

----------------------------------------

TITLE: Deploying Supabase Location Function
DESCRIPTION: Command to deploy the location function to Supabase with JWT verification disabled.

LANGUAGE: bash
CODE:
supabase functions deploy location --no-verify-jwt

----------------------------------------

TITLE: Deploying Supabase OG Image Function
DESCRIPTION: Command to deploy the OG image generation function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy lw11-og --no-verify-jwt

----------------------------------------

TITLE: Restarting pg_net Background Worker
DESCRIPTION: This SQL function call restarts the pg_net background worker for versions 0.8 or later.

LANGUAGE: sql
CODE:
select net.worker_restart();

----------------------------------------

TITLE: Testing Click Events for Popover and Dropdown Components in JavaScript
DESCRIPTION: Demonstrates the correct way to simulate click events for both Popover and Dropdown components in testing environment. Popover clicks should use @testing-library/user-event while Dropdown clicks require a custom helper function.

LANGUAGE: javascript
CODE:
// for Popovers
import userEvent from '@testing-library/user-event'
userEvent.click('Hello world')

// for Dropdowns
import clickDropdown from 'tests/helpers'
clickDropdown('Hello world')

----------------------------------------

TITLE: Configuring Supavisor Transaction Mode Connection String for Prisma
DESCRIPTION: Example of a Supavisor transaction mode connection string for Prisma to connect to a Supabase PostgreSQL database.

LANGUAGE: markdown
CODE:
postgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Creating PostgreSQL Function with Error Handling
DESCRIPTION: Function demonstrating error handling for division operations, showing how to properly handle edge cases.

LANGUAGE: sql
CODE:
create or replace function my_schema.safe_divide(numerator numeric, denominator numeric)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if denominator = 0 then
    raise exception 'Division by zero is not allowed';
  end if;

  return numerator / denominator;
end;
$$;

----------------------------------------

TITLE: Initializing Storage Bucket in Supabase
DESCRIPTION: Creates a storage bucket named 'Product Image' for storing product-related images.

LANGUAGE: sql
CODE:
insert into storage.buckets (id, name)
  values ('Product Image', 'Product Image');

----------------------------------------

TITLE: Initializing Storage Bucket in Supabase
DESCRIPTION: Creates a storage bucket named 'Product Image' for storing product-related images.

LANGUAGE: sql
CODE:
insert into storage.buckets (id, name)
  values ('Product Image', 'Product Image');

----------------------------------------

TITLE: Querying Supabase Data in SolidJS App
DESCRIPTION: Creates a Supabase client, defines a function to fetch instruments data, and renders the data in a SolidJS component.

LANGUAGE: jsx
CODE:
import { createClient } from "@supabase/supabase-js";
import { createResource, For } from "solid-js";

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>');

async function getInstruments() {
  const { data } = await supabase.from("instruments").select();
  return data;
}

function App() {
  const [instruments] = createResource(getInstruments);

  return (
    <ul>
      <For each={instruments()}>{(instrument) => <li>{instrument.name}</li>}</For>
    </ul>
  );
}

export default App;

----------------------------------------

TITLE: Configuring Direct Connection String for Prisma
DESCRIPTION: Example of a direct connection string for Prisma to connect to a Supabase PostgreSQL database.

LANGUAGE: markdown
CODE:
postgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres

----------------------------------------

TITLE: Email Authentication Token Exchange Endpoint
DESCRIPTION: Server-side endpoint for handling email confirmation token exchange in PKCE flow.

LANGUAGE: html
CODE:
<h2>Confirm your signup</h2>

<p>Follow this link to confirm your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}"
    >Confirm your email</a
  >
</p>

----------------------------------------

TITLE: Setting Environment Variables for Supabase Docs
DESCRIPTION: Instructions for setting up environment variables for local development of Supabase docs. This includes steps for both Supabase employees and community contributors.

LANGUAGE: markdown
CODE:
2. If you work at Supabase, run `dev:secrets:pull` to pull down the internal environment variables. If you're a community member, create a `.env` file and add this line to it: `NEXT_PUBLIC_IS_PLATFORM=false`

----------------------------------------

TITLE: Installing Supabase Flutter SDK Developer Preview
DESCRIPTION: Shows how to include the developer preview version of Supabase Flutter SDK in a project's dependencies.

LANGUAGE: yaml
CODE:
supabase_flutter: ^1.0.0-dev.1

----------------------------------------

TITLE: Inserting Vectors with Metadata in Python
DESCRIPTION: Shows how to insert vector records with associated metadata using the upsert method.

LANGUAGE: python
CODE:
docs.upsert(
    vectors=[
        (
          "vec0",           # the records user defined identifier
          [0.1, 0.2, 0.3],  # the vector. A list or np.array
          {"year": 1973}    # associated metadata
        )
    ]
)

----------------------------------------

TITLE: Creating RLS Policy for Broadcast and Presence Write
DESCRIPTION: This SQL snippet creates a policy allowing authenticated users to send both broadcast and presence messages if they are linked to the requested topic in the rooms_users table.

LANGUAGE: sql
CODE:
create policy "authenticated can send broadcast and presence on topic"
on "realtime"."messages"
for insert
to authenticated
with check (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and name = (select realtime.topic())
      and realtime.messages.extension in ('broadcast', 'presence')
  )
);

----------------------------------------

TITLE: Installing Drawer Component via NPM
DESCRIPTION: Command to install the drawer component using shadcn-ui CLI

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add drawer

----------------------------------------

TITLE: Flutter Dependencies Configuration
DESCRIPTION: Required package dependencies including Supabase Flutter SDK, Google Maps, and utilities for the project.

LANGUAGE: yaml
CODE:
supabase_flutter: ^2.5.9
google_maps_flutter: ^2.7.0
geolocator: ^12.0.0
duration: ^3.0.13
intl: ^0.19.0

----------------------------------------

TITLE: Setting Up Environment Variables for Stripe Webhooks in Supabase
DESCRIPTION: Command to copy the example environment file to create a local configuration for Stripe webhooks integration.

LANGUAGE: bash
CODE:
cp supabase/.env.local.example supabase/.env.local

----------------------------------------

TITLE: Importing Dependencies and Configuration
DESCRIPTION: Setting up necessary Python imports and database connection configuration

LANGUAGE: python
CODE:
import sys
import boto3
import vecs
import json
import base64
from matplotlib import pyplot as plt
from matplotlib import image as mpimg
from typing import Optional

DB_CONNECTION = "postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Initializing Supabase Client with TypeScript Types
DESCRIPTION: This snippet demonstrates how to create a Supabase client with TypeScript type definitions for enhanced type safety.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
)

----------------------------------------

TITLE: Signing out using Supabase in Kotlin
DESCRIPTION: This code demonstrates how to sign out a user using the Supabase Kotlin client. It calls the signOut method to remove the user from the session and clear any stored objects.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Signing out using Supabase in Kotlin
DESCRIPTION: This code demonstrates how to sign out a user using the Supabase Kotlin client. It calls the signOut method to remove the user from the session and clear any stored objects.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Running Postgrest Client with Unverified SSL in Python
DESCRIPTION: Example showing how to initialize a SyncPostgrestClient with unverified SSL for development environments using the verify=False parameter.

LANGUAGE: python
CODE:
from postgrest import SyncPostgrestClient

url: str = "https://example.com"
h: dict = {"Custom-Header": "value"}

with SyncPostgrestClient(url, schema="pub", headers=h, verify = False) as client:
    session = client.session
    assert session.base_url == "https://example.com"


----------------------------------------

TITLE: Receiving Postgres Changes in Supabase Realtime with JavaScript
DESCRIPTION: This code demonstrates how to listen for Postgres database changes using Supabase Realtime. It sets up a channel to receive new messages in a specific chat room.

LANGUAGE: javascript
CODE:
const channelId = '#random'

// Create a filter only for new messages
const databaseFilter = {
  schema: 'public',
  table: 'messages',
  filter: `room_id=eq.${channelId}`,
  event: 'INSERT',
}

const channel = supabase
  .channel(channelId)
  .on('postgres_changes', databaseFilter, (payload) => receivedDatabaseEvent(payload))
  .subscribe()

const receivedDatabaseEvent = (event) => {
  const { payload } = event
  console.log(payload)
}

----------------------------------------

TITLE: Configuring Edge Functions in TOML
DESCRIPTION: Shows how to configure an Edge Function named 'search-embeddings' in the config.toml file, setting the verify_jwt option.

LANGUAGE: toml
CODE:
[functions.search-embeddings]
verify_jwt = false

----------------------------------------

TITLE: Loading Sample Dataset
DESCRIPTION: Loads Paul Graham's essays from a remote source using SimpleWebPageReader.

LANGUAGE: python
CODE:
essays = [
    'paul_graham_essay.txt'
]
documents = SimpleWebPageReader().load_data([f'https://raw.githubusercontent.com/supabase/supabase/master/examples/ai/llamaindex/data/{essay}' for essay in essays])
print('Document ID:', documents[0].doc_id, 'Document Hash:', documents[0].hash)

----------------------------------------

TITLE: Installing Supabase Auth UI React Package
DESCRIPTION: Command to install the new standalone Supabase Auth UI React package using npm. This package was previously part of the @supabase/ui library but is now available separately for easier integration.

LANGUAGE: bash
CODE:
npm install @supabase/auth-ui-react

----------------------------------------

TITLE: Docker IPv6 Setup and Testing Commands
DESCRIPTION: Series of bash commands for setting up and testing IPv6 network configuration in Docker

LANGUAGE: bash
CODE:
systemctl restart docker
docker network create --ipv6 --subnet fd00:ffff::/80 ip6net
docker run --rm -it --network ip6net busybox ping6 google.com -c3
ip6tables -L
docker exec -it "airflow_airflow-worker_1" bash
curl -6 https://ifconfig.co/ip

----------------------------------------

TITLE: Importing CostWarning Component in JSX
DESCRIPTION: This snippet imports the CostWarning component from a local file, likely used to display pricing-related warnings in the authentication configuration interface.

LANGUAGE: jsx
CODE:
import { CostWarning } from './AuthSmsProviderConfig.Warnings'

----------------------------------------

TITLE: Testing Image Blur Function with cURL
DESCRIPTION: cURL command to test the image blur function locally by uploading an image and saving the transformed output

LANGUAGE: bash
CODE:
curl --location 'http://localhost:54321/functions/v1/image-blur' \
--form 'file=@"/path/to/image.png"'
--output '/path/to/output.png'

----------------------------------------

TITLE: Installing Select Component via CLI
DESCRIPTION: Command to install the Select component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add select

----------------------------------------

TITLE: Viewing Webhook Response in Postgres
DESCRIPTION: This SQL query retrieves the response for a specific webhook request from the net._http_response table.

LANGUAGE: sql
CODE:
select
*
from net._http_response
where id = <request_id>

----------------------------------------

TITLE: Handling Apple Sign In with ID Token in TypeScript
DESCRIPTION: Use the signInWithIdToken method to complete the Apple Sign In process after obtaining the ID token from Apple's authentication service.

LANGUAGE: typescript
CODE:
async function signIn() {
  const data = await AppleID.auth.signIn()

  await supabase.auth.signInWithIdToken({
    provider: 'apple',
    token: data.id_token,
    nonce: '<nonce used in AppleID.auth.init>',
  })
}

----------------------------------------

TITLE: Creating Database and User in PostgreSQL
DESCRIPTION: SQL commands to create a new database and user in PostgreSQL. This demonstrates the ability to have multiple databases and users within a single PostgreSQL instance.

LANGUAGE: sql
CODE:
CREATE DATABASE postgres;
CREATE DATABASE another_database;

CREATE USER postgres WITH PASSWORD 'super-secret-password;
CREATE USER some_new_user WITH PASSWORD 'password';

----------------------------------------

TITLE: Configuring and Running Supabase OAuth App
DESCRIPTION: Step-by-step guide for creating a Supabase OAuth app, configuring environment variables, and running the development server. Includes instructions for creating the app, setting callback URLs, and starting the local server.

LANGUAGE: plaintext
CODE:
1. Create OAuth App at https://supabase.com/dashboard/org/_/apps
2. Use http://localhost:3000 as `Authorization callback URLs`
3. Copy `.env.example` to `.env` and fill `Client ID` and `Client Secret` with values from newly created app
4. `bun install`
5. `bun run dev`
6. Open http://localhost:3000

----------------------------------------

TITLE: Bootstrap CLI Installation Methods
DESCRIPTION: Different ways to run the Supabase bootstrap command using various package managers including the CLI directly, NPM, or Bun.

LANGUAGE: bash
CODE:
supabase bootstrap
npx supabase@latest bootstrap
bunx supabase@latest bootstrap

----------------------------------------

TITLE: Sample EXPLAIN ANALYZE Output
DESCRIPTION: Provides an example of detailed EXPLAIN ANALYZE output, showing actual execution times and row filtering information.

LANGUAGE: sql
CODE:
Seq Scan on users  (cost=0.00..19.00 rows=1 width=240) (actual time=0.026..0.026 rows=1 loops=1)
  Filter: (user_id = 1)
  Rows Removed by Filter: 999
Planning Time: 0.135 ms

----------------------------------------

TITLE: Creating Prisma Schema for New Projects
DESCRIPTION: Example of creating new tables in the Prisma schema file for a new project, including Post and User models.

LANGUAGE: typescript
CODE:
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

----------------------------------------

TITLE: Creating Supabase Server Client in SvelteKit Hooks
DESCRIPTION: JavaScript code for creating a Supabase server client in the SvelteKit hooks.server.js file.

LANGUAGE: javascript
CODE:
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'

export const handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

----------------------------------------

TITLE: Creating Supabase Server Client in SvelteKit Hooks
DESCRIPTION: JavaScript code for creating a Supabase server client in the SvelteKit hooks.server.js file.

LANGUAGE: javascript
CODE:
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'

export const handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

----------------------------------------

TITLE: Checking IPv6 Support with cURL
DESCRIPTION: This command uses cURL to check if the network supports IPv6 by attempting to retrieve the IP address from ifconfig.co.

LANGUAGE: sh
CODE:
curl -6 https://ifconfig.co/ip

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This command starts the Next.js development server for the Supabase Realtime Presence API sample program. It allows you to run and test the application locally.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Integrating Third-Party Auth Provider with Supabase Client
DESCRIPTION: Example showing how to configure the Supabase client to work with a third-party authentication provider (Auth0 in this case) by providing a custom access token.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  accessToken: async () => {
    const accessToken = await auth0.getTokenSilently()
    return accessToken
  },
})

----------------------------------------

TITLE: Improved Error Handling in supabase-js v2
DESCRIPTION: This example demonstrates the new error types introduced in supabase-js v2, which allow for more specific error handling, particularly for Edge Functions.

LANGUAGE: typescript
CODE:
import { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'

const { data: user, error } = await supabase.functions.invoke('hello')

if (error instanceof FunctionsHttpError) {
  console.log('Function returned an error', error.message)
} else if (error instanceof FunctionsRelayError) {
  console.log('Relay error:', error.message)
} else if (error instanceof FunctionsFetchError) {
  console.log('Fetch error:', error.message)
}

----------------------------------------

TITLE: Static Remote Subquery in ClickHouse
DESCRIPTION: Example of creating a foreign table using a static subquery on the ClickHouse server.

LANGUAGE: sql
CODE:
create foreign table clickhouse.people (
  id bigint,
  name text,
  age bigint
)
server clickhouse_server
options (
  table '(select * from people where age < 25)'
);

----------------------------------------

TITLE: Overriding Generated TypeScript Types
DESCRIPTION: This example shows how to override generated types using type-fest's MergeDeep utility for more precise type definitions.

LANGUAGE: typescript
CODE:
import { MergeDeep } from 'type-fest'
import { Database as DatabaseGenerated } from './database-generated.types'
export { Json } from './database-generated.types'

// Override the type for a specific column in a view:
export type Database = MergeDeep<
  DatabaseGenerated,
  {
    public: {
      Views: {
        movies_view: {
          Row: {
            // id is a primary key in public.movies, so it must be `not null`
            id: number
          }
        }
      }
    }
  }
>

----------------------------------------

TITLE: Retrieving Function Definition in Supabase
DESCRIPTION: SQL query to get the definition of a function in Supabase. This is useful for diagnosing issues with trigger functions in the auth schema.

LANGUAGE: sql
CODE:
select pg_get_functiondef(oid)
from pg_proc
where proname = '<FUNCTION NAME>';

----------------------------------------

TITLE: Implementing Avatar Upload Component
DESCRIPTION: React component for handling profile photo uploads using Supabase Storage.

LANGUAGE: jsx
CODE:
'use client'
import React, { useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'
import Image from 'next/image'

export default function Avatar({ uid, url, size, onUpload }) {
  const supabase = createClient()
  const [avatarUrl, setAvatarUrl] = useState(url)
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    async function downloadImage(path) {
      try {
        const { data, error } = await supabase.storage.from('avatars').download(path)
        if (error) throw error
        const url = URL.createObjectURL(data)
        setAvatarUrl(url)
      } catch (error) {
        console.log('Error downloading image: ', error)
      }
    }
    if (url) downloadImage(url)
  }, [url, supabase])

  const uploadAvatar = async (event) => {
    try {
      setUploading(true)
      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }
      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const filePath = `${uid}-${Math.random()}.${fileExt}`
      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)
      if (uploadError) throw uploadError
      onUpload(filePath)
    } catch (error) {
      alert('Error uploading avatar!')
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      {/* Avatar display and upload input */}
    </div>
  )
}

----------------------------------------

TITLE: Data Manipulation in OrioleDB
DESCRIPTION: Examples of inserting data into an OrioleDB table and querying it using standard SQL commands.

LANGUAGE: sql
CODE:
INSERT INTO blog_post (id, title, body, author, views)
VALUES (1, 'Hello, World!', 'This is my first blog post.', 'John Doe', 1000);

SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;

----------------------------------------

TITLE: Setting Long Timeout for SQL Queries in PostgreSQL
DESCRIPTION: SQL command to set a 120-minute timeout for the current session. This extends the default timeout limit for long-running queries.

LANGUAGE: sql
CODE:
set statement_timeout = '120min';

----------------------------------------

TITLE: Updating a Secret in Supabase Vault
DESCRIPTION: This snippet shows how to update an existing secret using the vault.update_secret() function. It demonstrates updating the secret value, name, and description by providing the secret's UUID.

LANGUAGE: sql
CODE:
select
  vault.update_secret(
    '7095d222-efe5-4cd5-b5c6-5755b451e223',
    'n3w_upd@ted_s3kret',
    'updated_unique_name',
    'This is the updated description'
  );

----------------------------------------

TITLE: Handling Edge Function Errors in JavaScript
DESCRIPTION: Demonstrates error handling for Edge Functions using the supabase-js library's error types.

LANGUAGE: js
CODE:
import { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'

const { data, error } = await supabase.functions.invoke('hello', {
  headers: { 'my-custom-header': 'my-custom-header-value' },
  body: { foo: 'bar' },
})

if (error instanceof FunctionsHttpError) {
  const errorMessage = await error.context.json()
  console.log('Function returned an error', errorMessage)
} else if (error instanceof FunctionsRelayError) {
  console.log('Relay error:', error.message)
} else if (error instanceof FunctionsFetchError) {
  console.log('Fetch error:', error.message)
}

----------------------------------------

TITLE: Configuring Web Crawler Access in robots.txt for Supabase Docs
DESCRIPTION: This robots.txt file sets the rules for web crawlers accessing the Supabase documentation site. It allows access to all pages and specifies the location of the XML sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Allow: /
Sitemap: https://supabase.com/docs/sitemap.xml

----------------------------------------

TITLE: Node.js API Integration in Supabase Edge Function
DESCRIPTION: Example showing how to use Node.js built-in modules like crypto and http within a Supabase Edge Function. Demonstrates random string generation and basic HTTP server setup.

LANGUAGE: typescript
CODE:
import { randomBytes } from "node:crypto";
import { createServer } from "node:http";
import process from "node:process";

const generateRandomString = (length) => {
    const buffer = randomBytes(length);
    return buffer.toString('hex');
};

const randomString = generateRandomString(10);
console.log(randomString);

const server = createServer((req, res) => {
    const message = `Hello`;
    res.end(message);
});

server.listen(9999);

----------------------------------------

TITLE: Managing Organizations and Projects with Supabase CLI
DESCRIPTION: Demonstrates how to use Supabase CLI to log in, list organizations, and create a new project. It showcases the basic commands for project management.

LANGUAGE: bash
CODE:
supabase login
supabase orgs list
supabase projects create my-project --org-id cool-green-pqdr0qc --db-password ******** --region us-east-1

----------------------------------------

TITLE: Advanced Supabase Query Examples
DESCRIPTION: These examples showcase various advanced query operations using Supabase, including filtering with 'or', 'is', 'in', and 'neq' operators. These demonstrate the flexibility of Supabase's query interface.

LANGUAGE: javascript
CODE:
// or
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .or('id.eq.20,id.eq.30')

// is
const { data, error } = await supabase.from('cities').select('name, country_id').is('name', null)

// in
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .in('name', ['Rio de Janeiro', 'San Francisco'])

// neq (not equal to)
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .neq('name', 'The shire')

----------------------------------------

TITLE: Generating TypeScript types for Supabase tables
DESCRIPTION: Bash commands to generate TypeScript types for Supabase tables using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase start
supabase gen types --lang=typescript --local > utils/database.types.ts

----------------------------------------

TITLE: Using Calendar Component in React
DESCRIPTION: This example demonstrates how to use the Calendar component in a React application, including state management for the selected date.

LANGUAGE: tsx
CODE:
const [date, setDate] = React.useState<Date | undefined>(new Date())

return <Calendar mode="single" selected={date} onSelect={setDate} className="rounded-md border" />

----------------------------------------

TITLE: Creating PGroonga Full Text Search Index
DESCRIPTION: SQL command to create a PGroonga index on a text column for full text search capabilities.

LANGUAGE: sql
CODE:
create index ix_memos_content ON memos USING pgroonga(content);

----------------------------------------

TITLE: Creating RLS Policy for Authenticated Users in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a Row Level Security policy that allows access to the 'profiles' table for authenticated users.

LANGUAGE: sql
CODE:
create policy "Allow access to authenticated users" on profiles to authenticated for
select
  using (true);

----------------------------------------

TITLE: Incorrect SVG Icon Implementation
DESCRIPTION: Example of an incorrectly structured SVG icon with inline styling attributes that should be avoided.

LANGUAGE: svg
CODE:
<svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    >
        <rect
            width="24"
            height="24"
            fill="#1E1E1E"
        />
        <path
            d="M-20439
            -11141C-20439..."
            fill="#404040"
        />
        <path
            d="M-20437 -11142H12131V-11144H-20437V-11142ZM12132 ...."
            fill="white"
            fill-opacity="0.1"
        />
        <path
            d="M22.8437 8.69499L19.5369 12.0018L22.8438 15.3086..."
            stroke="#EDEDED"
            stroke-linecap="round"
            stroke-linejoin="round"
        />
        <rect
            x="0.5"
            y="14.0625"
            width="16"
            height="8"
            rx="1"
            stroke="#EDEDED"
            stroke-linejoin="round"
        />
        <rect
            x="0.5"
            y="1.9375"
            width="16"
            height="8"
            rx="1"
            stroke="#EDEDED"
            stroke-linejoin="round"
        />
</svg>

----------------------------------------

TITLE: JWT Token Structure for Authenticated User
DESCRIPTION: Example of a JWT token structure for an authenticated user showing both role and user ID.

LANGUAGE: javascript
CODE:
{
  "sub": "348b-some-user-uuid", // the ID of the user
  "role": "authenticated",      // the Postgres role
  "iss": "supabase"             // the issuer of the JWT
  "exp": 1445385600,            // the time the JWT will expires
}

----------------------------------------

TITLE: Solving TSP with pgr_TSPeuclidean
DESCRIPTION: Query using pgr_TSPeuclidean function to solve the traveling salesperson problem by finding the optimal path through all coordinates while minimizing total distance.

LANGUAGE: sql
CODE:
select
    *
from
     pgr_TSPeuclidean($$select * from wi29$$)

----------------------------------------

TITLE: Installing SvelteKit Auth Helpers
DESCRIPTION: Command to install the Supabase Auth Helpers library for SvelteKit.

LANGUAGE: bash
CODE:
npm install @supabase/auth-helpers-sveltekit @supabase/supabase-js

----------------------------------------

TITLE: Installing SvelteKit Auth Helpers
DESCRIPTION: Command to install the Supabase Auth Helpers library for SvelteKit.

LANGUAGE: bash
CODE:
npm install @supabase/auth-helpers-sveltekit @supabase/supabase-js

----------------------------------------

TITLE: Generating and Storing Embeddings with OpenAI API
DESCRIPTION: JavaScript function to generate embeddings using OpenAI API and store them in a PostgreSQL database.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Configuration, OpenAIApi } from 'openai'
import { supabaseClient } from './lib/supabase'

async function generateEmbeddings() {
  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openAi = new OpenAIApi(configuration)

  const documents = await getDocuments() // Your custom function to load docs

  // Assuming each document is a string
  for (const document of documents) {
    // OpenAI recommends replacing newlines with spaces for best results
    const input = document.replace(/\n/g, ' ')

    const embeddingResponse = await openai.createEmbedding({
      model: 'text-embedding-ada-002',
      input,
    })

    const [{ embedding }] = embeddingResponse.data.data

    // In production we should handle possible errors
    await supabaseClient.from('documents').insert({
      content: document,
      embedding,
    })
  }
}

----------------------------------------

TITLE: Inserting Channel Data into Supabase
DESCRIPTION: SQL commands to insert data for public and private Slack channels into the 'slack_channels' table in Supabase.

LANGUAGE: sql
CODE:
insert into slack_channels
  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)
values
  ('support-channel', 'C0000ABC02DE', 'Support msgs', 'all_them_messages', 'C0000ABC02DF', 0);

insert into slack_channels
  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)
values
  (
    'support-enterprise',
    'C0000ABC02DC',
    'Enterprise Support msgs',
    'all_them_messages',
    'C0000ABC02DF',
    1
  );

----------------------------------------

TITLE: GraphQL Schema for Addition Function
DESCRIPTION: Shows how the PostgreSQL function is reflected in the GraphQL schema, with proper typing and nullability based on the function definition.

LANGUAGE: sql
CODE:
type Query {
  addNums(a: Int!, b: Int): Int
}

----------------------------------------

TITLE: Pinging Supabase Metrics Endpoint using cURL
DESCRIPTION: This command sends a request to the Supabase metrics endpoint using cURL to verify data retrieval. It requires the project reference and service role key.

LANGUAGE: sh
CODE:
curl https://<YOUR_PROJECT_REF>.supabase.co/customer/v1/privileged/metrics --user 'service_role:<SERVICE_ROLE_KEY>'

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Commands for starting Supabase locally and serving the lwx-og function without JWT verification using a local environment file.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lwx-og --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Error Handling in Supabase Flutter Queries
DESCRIPTION: Demonstrates the new error handling approach using try-catch blocks instead of returned error objects.

LANGUAGE: dart
CODE:
// Before
final response = await Supabase.instance.from('messages').select().execute();
final data = response.data;
final error = response.error;

// After
try {
  final data = await Supabase.instance.from('messages').select();
} catch(error) {
  // Handle error here
}

----------------------------------------

TITLE: Express.js Integration in Supabase Edge Function
DESCRIPTION: Demonstrates how to use the Express.js framework within a Supabase Edge Function using the npm specifier for proper dependency management.

LANGUAGE: typescript
CODE:
import express from "npm:express@4.18.2";

const app = express();

app.get(/(.*)/, (req, res) => {
    res.send("Welcome to Supabase");
});

app.listen(8000);

----------------------------------------

TITLE: Setting Carousel Orientation
DESCRIPTION: Example of setting the orientation of the carousel using the orientation prop.

LANGUAGE: tsx
CODE:
<Carousel orientation="vertical | horizontal">
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>

----------------------------------------

TITLE: Adding New Value to Existing Enum in PostgreSQL
DESCRIPTION: This example demonstrates how to add a new value 'content' to an existing Enum type 'mood' using the ALTER TYPE statement.

LANGUAGE: sql
CODE:
alter type mood add value 'content';

----------------------------------------

TITLE: Analyzing Deno Dependencies
DESCRIPTION: Command to analyze dependencies for Edge Functions using Deno with an optional import map

LANGUAGE: bash
CODE:
deno info --import-map=/path/to/import_map.json /path/to/function/index.ts

----------------------------------------

TITLE: Importing Slider Component in React
DESCRIPTION: Example of how to import the Slider component in a React application.

LANGUAGE: tsx
CODE:
import { Slider } from '@/components/ui/slider'

----------------------------------------

TITLE: Creating a BTREE Index on JSONB Key in Postgres
DESCRIPTION: Shows how to create a BTREE index on a specific key within a JSONB column. This can be more efficient than a full GIN index for queries that only filter on this key.

LANGUAGE: SQL
CODE:
create table person (
  id serial primary key,
  data jsonb
);

create index index_name on person ((data ->> 'name'));

----------------------------------------

TITLE: Starting Supabase locally using CLI
DESCRIPTION: Command to start Supabase locally using the Supabase CLI. This is a prerequisite for running the OG image generator function locally.

LANGUAGE: bash
CODE:
supabase start

----------------------------------------

TITLE: Adding Markers to Google Map in Ionic Angular
DESCRIPTION: TypeScript code to add markers to a Google Map based on store data retrieved from Supabase, including logic to manage existing markers.

LANGUAGE: typescript
CODE:
async addMarkers(stores: StoreResult[]) {
    // Skip if there are no results
    if (stores.length === 0) {
      return;
    }

    // Find marker that are outside of the view
    const toRemove = this.activeMarkers.filter((marker) => {
      const exists = stores.find((item) => item.id === marker.storeId);
      return !exists;
    });

    // Remove markers
    if (toRemove.length) {
      await this.map.removeMarkers(toRemove.map((marker) => marker.markerId));
    }

    // Create new marker array
    const markers: Marker[] = stores.map((store) => {
      return {
        coordinate: {
          lat: store.lat,
          lng: store.long,
        },
        title: store.name,
      };
    });

    // Add markers, store IDs
    const newMarkerIds = await this.map.addMarkers(markers);

    // Crate active markers by combining information
    this.activeMarkers = stores.map((store, index) => {
      return {
        markerId: newMarkerIds[index],
        storeId: store.id,
      };
    });

    this.addMarkerClicks();
  }

----------------------------------------

TITLE: Query to Check Function Existence
DESCRIPTION: SQL query to verify if a function exists and view its definition across specified schemas.

LANGUAGE: sql
CODE:
select
  p.proname as function_name,
  n.nspname as schema_name,
  pg_get_functiondef(p.oid) as function_definition
from
  pg_proc as p
  join pg_namespace as n on p.pronamespace = n.oid
where n.nspname in ('public', 'your custom schema')
order by n.nspname, p.proname;

----------------------------------------

TITLE: Executing Function Check
DESCRIPTION: Demonstrates how to execute the function and use plpgsql_check to identify errors in the function definition.

LANGUAGE: sql
CODE:
select public.some_func();

LANGUAGE: sql
CODE:
select plpgsql_check_function('public.some_func()');

----------------------------------------

TITLE: Resetting Postgres Statistics
DESCRIPTION: Demonstrates how to reset the statistics used by Postgres for query planning. This should be used judiciously as it can impact query performance across the database.

LANGUAGE: SQL
CODE:
select pg_stat_reset();

----------------------------------------

TITLE: Referencing Nuxt3 Supabase Demo
DESCRIPTION: Markdown reference link to the official Nuxt3 Supabase demo repository containing the complete TODO list example implementation.

LANGUAGE: markdown
CODE:
# Nuxt3 TODO list example

Please refer to https://github.com/nuxt-modules/supabase/tree/main/demo

----------------------------------------

TITLE: Creating a GIN Index for JSONB Data in Postgres
DESCRIPTION: Demonstrates how to create a GIN (Generalized Inverted Index) index on a JSONB column in a Postgres table. This index type is particularly useful for efficient querying of JSON data.

LANGUAGE: SQL
CODE:
CREATE INDEX some_arbitary_index_name ON some_table USING gin (data);

----------------------------------------

TITLE: MSSQL to Postgres Migration Configuration
DESCRIPTION: pgloader configuration for migrating a Microsoft SQL Server database to Supabase Postgres. Includes connection setup and performance parameters.

LANGUAGE: sql
CODE:
LOAD DATABASE
    FROM mssql://USER:PASSWORD@HOST/SOURCE_DB
    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres
ALTER SCHEMA 'public' OWNER TO 'postgres';
set wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: Commands to initialize a Supabase project and start a local Postgres instance using the Supabase CLI. Requires Docker to be running.

LANGUAGE: bash
CODE:
# Initialize your project
supabase init

# Start Postgres
supabase start

----------------------------------------

TITLE: Unnesting Postgres Log Metadata in SQL
DESCRIPTION: This SQL query demonstrates how to unnest the metadata field in the postgres_logs table to access parsed information about logged events.

LANGUAGE: sql
CODE:
select
  event_message,
  parsed.<column name>
from
  postgres_logs
-- Unpack data stored in the 'metadata' field
cross join unnest(metadata) AS metadata
-- After unpacking the 'metadata' field, extract the 'parsed' field from it
cross join unnest(parsed) AS parsed;

----------------------------------------

TITLE: Adding Type Hints for Supabase AI API
DESCRIPTION: Import statement to enable TypeScript type hints and checks for the Supabase AI API.

LANGUAGE: typescript
CODE:
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'

----------------------------------------

TITLE: Basic Button Usage with Outline Type
DESCRIPTION: Example of using the Button component with an outline type variant.

LANGUAGE: tsx
CODE:
<Button type="outline">Button</Button>

----------------------------------------

TITLE: Building React App for Production
DESCRIPTION: This command builds the React application for production, creating an optimized bundle in the 'build' folder with minified files and hashed filenames.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Creating Llamafile Function in Supabase
DESCRIPTION: Command to generate a new Supabase function for Llamafile integration.

LANGUAGE: bash
CODE:
npx supabase functions new llamafile

----------------------------------------

TITLE: Configuring PGAudit Object Logging
DESCRIPTION: SQL commands to set up object-level auditing using a custom role and granting specific privileges.

LANGUAGE: sql
CODE:
create role "some_audit_role" noinherit;

alter role "postgres" set pgaudit.role to 'some_audit_role';

grant select on random_table to "some_audit_role";

-- To remove object logging:
alter role "postgres" set pgaudit.role to '';

-- View if pgaudit.role changed:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'postgres';
-- should return a rolconfig path with "pgaudit.role="

----------------------------------------

TITLE: Executing a GraphQL Query with pg_graphql in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to use the gql.resolve function provided by pg_graphql to execute a GraphQL query within PostgreSQL. It queries for all books and selects their IDs.

LANGUAGE: sql
CODE:
select gql.resolve($$

query {
  allBooks {
    edges {
      node {
        id
      }
    }
  }
}

$$);

----------------------------------------

TITLE: Detaching Archive Table from PGMQ Extension in SQL
DESCRIPTION: Detaches the archive table from the PGMQ extension to prevent it from being dropped with the extension.

LANGUAGE: sql
CODE:
select * from pgmq.detach_archive('my_queue');

----------------------------------------

TITLE: Basic Alert Component Usage
DESCRIPTION: Example showing how to implement a basic Alert component with an icon, title, and description.

LANGUAGE: tsx
CODE:
<Alert>
  <Terminal className="h-4 w-4" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>

----------------------------------------

TITLE: Implementing Bullet Component in Flame
DESCRIPTION: Dart code for the Bullet class, representing bullets fired by players in the game.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:flame/collisions.dart';
import 'package:flame/components.dart';
import 'package:flame/image_composition.dart' as flame_image;

class Bullet extends PositionComponent with CollisionCallbacks, HasGameRef {
  final Vector2 velocity;

  final flame_image.Image image;

  static const radius = 5.0;

  bool hasBeenHit = false;

  final bool isMine;

  /// Damage that it deals when it hits the player
  final int damage = 5;

  Bullet({
    required this.isMine,
    required this.velocity,
    required this.image,
    required Vector2 initialPosition,
  }) : super(position: initialPosition);

  @override
  Future<void>? onLoad() async {
    anchor = Anchor.center;

    width = radius * 2;
    height = radius * 2;

    add(CircleHitbox()
      ..collisionType = CollisionType.passive
      ..anchor = Anchor.center);

    final sprite =
        SpriteComponent.fromImage(image, size: Vector2.all(radius * 2));

    add(sprite);
    await super.onLoad();
  }

  @override
  void update(double dt) {
    super.update(dt);
    position += velocity * dt;

    if (position.y < 0 || position.y > gameRef.size.y) {
      removeFromParent();
    }
  }
}

----------------------------------------

TITLE: Deleting Config Override Without Restart via CLI
DESCRIPTION: Supabase CLI command to delete a configuration override for 'shared_buffers' without restarting the database.

LANGUAGE: bash
CODE:
supabase --experimental \
--project-ref <project-ref> \
postgres-config delete --config shared_buffers --no-restart

----------------------------------------

TITLE: Initializing Supabase Client with Custom Domain
DESCRIPTION: Initialize the Supabase client in JavaScript using a custom domain instead of the default project URL.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Use a custom domain as the supabase URL
const supabase = createClient('https://api.example.com', 'public-anon-key')

----------------------------------------

TITLE: Initializing Supabase Client with Custom Domain
DESCRIPTION: Initialize the Supabase client in JavaScript using a custom domain instead of the default project URL.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Use a custom domain as the supabase URL
const supabase = createClient('https://api.example.com', 'public-anon-key')

----------------------------------------

TITLE: Storing JSON Data in PostgreSQL Table
DESCRIPTION: Creates a table named 'calendar' with both regular SQL columns and JSONB columns for storing structured and unstructured data together.

LANGUAGE: sql
CODE:
CREATE TABLE calendar (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    date date,
    user_id uuid NOT NULL,
    weight numeric,
    notes text,
    food_log jsonb,
    water_log jsonb,
    exercise_log jsonb
);
-- (Optional) - create a foreign key relationship for the user_id field
ALTER TABLE ONLY calendar
    ADD CONSTRAINT calendar_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);

----------------------------------------

TITLE: Protobuf AST Node Definition
DESCRIPTION: Shows the protobuf definition for an A_Expr AST node type with its fields and attributes.

LANGUAGE: protobuf
CODE:
message A_Expr
{
  A_Expr_Kind kind = 1 [json_name="kind"];
  repeated Node name = 2 [json_name="name"];
  Node lexpr = 3 [json_name="lexpr"];
  Node rexpr = 4 [json_name="rexpr"];
  int32 location = 5 [json_name="location"];
}

----------------------------------------

TITLE: Installing Hover Card Component Dependencies
DESCRIPTION: Command to install the required dependency for the Hover Card component using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-hover-card

----------------------------------------

TITLE: Invalidating Queries in TypeScript for Resource Updates
DESCRIPTION: Example of invalidating queries after updating a resource using Tanstack Query. This snippet demonstrates how to use queryClient to invalidate specific queries based on resource keys.

LANGUAGE: typescript
CODE:
queryClient.invalidateQueries(resourceKeys.resource(projectRef, id))

----------------------------------------

TITLE: Using New Auth JWT Function in SQL
DESCRIPTION: New auth.jwt() function to return user JWT claims, replacing the deprecated auth.email() and auth.role() functions in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT auth.jwt();

----------------------------------------

TITLE: Deploying Supabase Open Graph Function
DESCRIPTION: Command to deploy the Open Graph function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy opengraph --no-verify-jwt

----------------------------------------

TITLE: Installing Hover Card Component via CLI
DESCRIPTION: Command to install the Hover Card component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add hover-card

----------------------------------------

TITLE: Markdown Blog Post Structure
DESCRIPTION: YAML frontmatter and markdown structure for a Supabase blog post about Community Day announcements and updates

LANGUAGE: markdown
CODE:
---
title: 'Supabase Community Day'
description: Community Day
author: steve_chavez
author_url: https://github.com/steve-chavez
author_image_url: https://github.com/steve-chavez.png
thumb: launch-week-sql-day-1-community-day/launch-week-sql-day-1-community-day-thumb.jpg
image: launch-week-sql-day-1-community-day/launch-week-sql-day-1-community-day-og.jpg
categories:
  - developers
tags:
  - launch-week
date: '2021-07-26'
toc_depth: 2
---

----------------------------------------

TITLE: Creating a Storage Bucket using SQL
DESCRIPTION: This SQL snippet demonstrates how to create a storage bucket named 'avatars' using PostgreSQL.

LANGUAGE: sql
CODE:
insert into storage.buckets
  (id, name)
values
  ('avatars', 'avatars');

----------------------------------------

TITLE: Configuring Apple OAuth Provider in TOML
DESCRIPTION: Example configuration for enabling Apple OAuth provider in Supabase using config.toml.

LANGUAGE: toml
CODE:
[auth.external.apple]
enabled = false
client_id = ""
secret = ""
redirect_uri = "" # Overrides the default auth redirectUrl.

----------------------------------------

TITLE: Importing Tabs Components in React
DESCRIPTION: Import the necessary Tabs components from the UI components directory.

LANGUAGE: tsx
CODE:
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'

----------------------------------------

TITLE: Migrating from auth.role() to TO clause in Postgres RLS
DESCRIPTION: Shows how to replace the deprecated auth.role() function with native Postgres TO field in RLS policies. The new approach is more direct and uses built-in Postgres functionality for role-based access control.

LANGUAGE: sql
CODE:
-- DEPRECATED
create policy "Public profiles are viewable by everyone."
on profiles for select using (
  auth.role() = 'authenticated' or auth.role() = 'anon'
);

-- RECOMMENDED
create policy "Public profiles are viewable by everyone."
on profiles for select
to authenticated, anon
using (
  true
);

----------------------------------------

TITLE: Implementing Spotify OAuth Sign In - Kotlin
DESCRIPTION: Kotlin implementation for signing in users with Spotify OAuth using Supabase Auth. Uses a suspend function with the Spotify provider.

LANGUAGE: kotlin
CODE:
suspend fun signInWithSpotify() {
	supabase.auth.signInWith(Spotify)
}

----------------------------------------

TITLE: Inserting JSON Data into PostgreSQL
DESCRIPTION: Demonstrates how to insert data into the 'calendar' table, including JSON data for food_log, water_log, and exercise_log fields.

LANGUAGE: sql
CODE:
insert into calendar
  (date, user_id, weight, notes, food_log, water_log, exercise_log)
values
  (
    '2022-01-01',
    'xyz',
    172.6,
    'This new diet is awesome!',
    '[
      { "title": "Apple", "calories": 72, "meal": "Breakfast"},
      { "title": "Oatmeal", "calories": 146, "meal": "Breakfast"},
      { "title": "Sandwich", "calories": 445, "meal": "Lunch"},
      { "title": "Chips", "calories": 280, "meal": "Lunch"},
      { "title": "Cookie", "calories": 108, "meal": "Lunch"},
      { "title": "Mixed Nuts", "calories": 175, "meal": "Snack"},
      { "title": "Pasta/Sauce", "calories": 380, "meal": "Dinner"},
      { "title": "Garlic Bread", "calories": 200, "meal": "Dinner"},
      { "title": "Broccoli", "calories": 32, "meal": "Dinner"}
     ]',
    '[
      {"time": "08:15", "qty": 1},
      {"time": "09:31", "qty": 1},
      {"time": "10:42", "qty": 2},
      {"time": "10:42", "qty": 2},
      {"time": "12:07", "qty": 1},
      {"time": "14:58", "qty": 1},
      {"time": "17:15", "qty": 1},
      {"time": "18:40", "qty": 1},
      {"time": "19:05", "qty": 1}
    ]',
    '[
      {"time": "11:02", "duration": 0.5, "type": "Walking"}
    ]'
  );

----------------------------------------

TITLE: Installing Radix UI Context Menu Package
DESCRIPTION: Command to install the required Radix UI context menu dependency using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-context-menu

----------------------------------------

TITLE: Creating Flutter App for Flame Realtime Shooting Game
DESCRIPTION: Command to create a new Flutter app named 'flame_realtime_shooting'.

LANGUAGE: bash
CODE:
flutter create flame_realtime_shooting

----------------------------------------

TITLE: Accessing Custom Schema Tables in Supabase JS
DESCRIPTION: JavaScript example showing how to properly reference tables in custom schemas using the Supabase client.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.schema('myschema').from('mytable').select()

----------------------------------------

TITLE: Batch Sending Messages to a Queue with Optional Delay in SQL
DESCRIPTION: The `pgmq_public.send_batch` function adds multiple Messages to the specified Queue at once, with an optional delay for visibility. It takes the queue name, an array of message payloads, and an optional sleep time in seconds as parameters.

LANGUAGE: sql
CODE:
pgmq_public.send_batch(queue_name, messages, sleep_seconds)

----------------------------------------

TITLE: Exporting Database with pg_dump
DESCRIPTION: Command to export the Vercel Postgres database to a SQL dump file using pg_dump with specific options for clean migration.

LANGUAGE: bash
CODE:
pg_dump "$OLD_DB_URL" \
  --clean \
  --if-exists \
  --quote-all-identifiers \
  --no-owner \
  --no-privileges \
  > dump.sql

----------------------------------------

TITLE: Exporting Database with pg_dump
DESCRIPTION: Command to export the Vercel Postgres database to a SQL dump file using pg_dump with specific options for clean migration.

LANGUAGE: bash
CODE:
pg_dump "$OLD_DB_URL" \
  --clean \
  --if-exists \
  --quote-all-identifiers \
  --no-owner \
  --no-privileges \
  > dump.sql

----------------------------------------

TITLE: Basic Toast Usage
DESCRIPTION: Demonstrates the basic implementation of toast notifications using the Sonner component.

LANGUAGE: tsx
CODE:
import { toast } from 'sonner'

LANGUAGE: tsx
CODE:
toast('Event has been created.')

----------------------------------------

TITLE: Creating Profiles Table with Row Level Security in PostgreSQL
DESCRIPTION: SQL script to create a profiles table with Row Level Security policies for user management. Includes table creation, security policies for viewing, inserting, and updating profiles, as well as setup for Realtime updates and Storage configuration for avatars.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: PostgreSQL to GraphQL Schema Translation
DESCRIPTION: Examples showing how PostgreSQL table definitions are automatically translated to GraphQL types.

LANGUAGE: sql
CODE:
create table "Account" (
  "id" serial primary key,
  "email" varchar(255) not null,
  "createdAt" timestamp not null,
  "updatedAt" timestamp not null
);

LANGUAGE: graphql
CODE:
type Account {
  id: Int!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

----------------------------------------

TITLE: Rust Token Structure Definition
DESCRIPTION: Defines the Token struct used to represent lexical tokens in the parser, containing the token kind, text content, position span and type.

LANGUAGE: rust
CODE:
pub struct Token {
    /// The kind of the token
    pub kind: SyntaxKind,
    /// Text from the input
    pub text: String,
    /// Range within the input
    pub span: TextRange,
    /// Variants from `ScanToken.keyword_kind` + `Whitespace`
    pub token_type: TokenType,
}

----------------------------------------

TITLE: Updating Entrypoint Script Permissions
DESCRIPTION: This command updates the permissions of the entrypoint.sh file to ensure it's executable, which is necessary for proper container startup.

LANGUAGE: sh
CODE:
chmod +x entrypoint.sh

----------------------------------------

TITLE: RLS Policy for UPDATE Operations
DESCRIPTION: Shows how to create an RLS policy that combines both USING and WITH CHECK conditions for UPDATE operations.

LANGUAGE: sql
CODE:
create policy "Allow user to edit their stuff"
on "public"."<SOME TABLE NAME>"
as RESTRICTIVE
for UPDATE
to authenticated
using (
  (select auth.uid()) = user_id
)
with check(
  (select auth.uid()) = user_id
);

----------------------------------------

TITLE: Setting Supabase Database Environment Variable
DESCRIPTION: Command to set the NEW_DB_URL environment variable with the Supabase connection string.

LANGUAGE: bash
CODE:
export NEW_DB_URL="postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Importing dependencies and setting up DB connection
DESCRIPTION: Python code to import necessary libraries and set up the database connection string for Supabase.

LANGUAGE: python
CODE:
from PIL import Image
from sentence_transformers import SentenceTransformer
import vecs
from matplotlib import pyplot as plt
from matplotlib import image as mpimg

DB_CONNECTION = "postgresql://postgres:postgres@localhost:54322/postgres"

----------------------------------------

TITLE: MySQL to Postgres Migration Configuration
DESCRIPTION: pgloader configuration for migrating a MySQL database to Supabase Postgres. Includes connection string setup and schema ownership configuration.

LANGUAGE: sql
CODE:
load database
  from mysql://user:password@host/source_db
  into postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
alter schema 'public' owner to 'postgres';
set wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';

----------------------------------------

TITLE: Updating Postgres Config via CLI
DESCRIPTION: Supabase CLI command to update Postgres configuration, setting 'shared_buffers' to 250MB.

LANGUAGE: bash
CODE:
supabase --experimental \
--project-ref <project-ref> \
postgres-config update --config shared_buffers=250MB

----------------------------------------

TITLE: Accessing Error Properties in Dart
DESCRIPTION: Demonstrates how to access the code and statusCode properties of an AuthApiException in Dart.

LANGUAGE: dart
CODE:
error.code
error.statusCode

----------------------------------------

TITLE: Installing Pagination Component via CLI
DESCRIPTION: Command to install the pagination component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add pagination

----------------------------------------

TITLE: Embedding YouTube Playlist in Markdown
DESCRIPTION: This snippet shows how to embed a YouTube playlist within a Markdown document using an iframe. It includes responsive styling and various iframe attributes for security and functionality.

LANGUAGE: markdown
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/videoseries?list=PL5S4mPUpp4OuzQN-a_FY3OZQuYo4NmXvb"
    frameBorder="0"
    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Querying Supabase Database with Promise Syntax
DESCRIPTION: This snippet demonstrates how to query a Supabase database table using promise-based syntax. It selects all columns from the 'countries' table, limiting the result to 5 rows.

LANGUAGE: javascript
CODE:
supabase.
  .from('countries')
  .select('*')
  .limit(5)
  .then(console.log)
  .catch(console.error)

----------------------------------------

TITLE: Using ElevenLabs Text-to-Speech Function in HTML
DESCRIPTION: HTML code snippet demonstrating how to use the deployed ElevenLabs text-to-speech function as a source for an audio element. It includes query parameters for text and voice ID.

LANGUAGE: html
CODE:
<audio
  src="https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1/elevenlabs-text-to-speech?text=Hello%2C%20world!&voiceId=JBFqnCBsd6RMkjVDRZzb"
  controls
/>

----------------------------------------

TITLE: Executing Llamafile Function Locally
DESCRIPTION: cURL command to test the Llamafile function locally with a sample prompt.

LANGUAGE: bash
CODE:
curl --get "http://localhost:54321/functions/v1/llamafile" \
 --data-urlencode "prompt=write a short rap song about Supabase, the Postgres Developer platform, as sung by Nicki Minaj" \
 -H "Authorization: $ANON_KEY"

----------------------------------------

TITLE: Installing Input Component via CLI
DESCRIPTION: Command to install the input component using shadcn-ui CLI

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add input

----------------------------------------

TITLE: Configuring Wait State in YAML Workflow
DESCRIPTION: YAML configuration for implementing a delay of one day (86400 seconds) in a workflow before proceeding to the next task.

LANGUAGE: yaml
CODE:
WaitOneDay:
  Type: Wait
  Next: SendEmail
  Seconds: 86400

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: Read Replica Access Permissions Matrix
DESCRIPTION: Comparison of database operation permissions between Primary and Read Replica databases, showing that Read Replicas only support SELECT operations while Primary databases support all CRUD operations.

LANGUAGE: markdown
CODE:
|              | `select` | `insert` | `update` | `delete` |
| ------------ | -------- | -------- | -------- | -------- |
| Primary      | ✅       | ✅       | ✅       | ✅       |
| Read Replica | ✅       | -        | -        | -        |

----------------------------------------

TITLE: Installing Navigation Menu Dependencies with npm
DESCRIPTION: This snippet shows how to install the required Radix UI dependency for the Navigation Menu component using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-navigation-menu

----------------------------------------

TITLE: Resizing Images with Supabase Storage in JavaScript
DESCRIPTION: Demonstrates how to use the Supabase Storage API to resize an image by specifying width and height parameters.

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').getPublicUrl('image.jpg', {
  transform: {
    width: 500,
    height: 600,
  },
})

----------------------------------------

TITLE: Retrieving and Deleting Messages from a Queue in SQL
DESCRIPTION: The `pgmq_public.pop` function retrieves the next available message and deletes it from the specified Queue. It takes the queue name as a text parameter.

LANGUAGE: sql
CODE:
pgmq_public.pop(queue_name)

----------------------------------------

TITLE: GraphQL HTTP Request Example
DESCRIPTION: Example of making a GraphQL query via HTTP endpoint using curl.

LANGUAGE: bash
CODE:
curl -X POST https://<PROJECT_REF>.supabase.co/graphql/v1 \
    -H 'apiKey: <API_KEY>'\
    -H 'Content-Type: application/json' \
    --data-raw '
    {
      "query":"{ accountCollection(first: 3) { edges { node { id } } } }"
    }'

----------------------------------------

TITLE: Installing TLE Package using dbdev
DESCRIPTION: Example showing how to install a TLE package using the dbdev package manager in PostgreSQL.

LANGUAGE: sql
CODE:
select dbdev.install('langchain-embedding_search')

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: PostgreSQL RLS Policy Equivalent Query
DESCRIPTION: Shows the equivalent SQL query that demonstrates how the RLS policy is implicitly added to select statements.

LANGUAGE: sql
CODE:
select *
from todos
where auth.uid() = todos.user_id;

----------------------------------------

TITLE: Defining LogsBarChartDatum Type in TypeScript
DESCRIPTION: TypeScript type definition for the data structure required by the Logs Bar Chart component. Each datum represents a timestamp with counts for successful and error logs.

LANGUAGE: typescript
CODE:
type LogsBarChartDatum = {
  timestamp: string
  ok_count: number
  error_count: number
}

----------------------------------------

TITLE: Creating Next.js App with Supabase Template
DESCRIPTION: Command to create a new Next.js application using the Supabase starter template via npx.

LANGUAGE: bash
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Using Label Component in React
DESCRIPTION: This snippet demonstrates how to use the Label component to create a label for an email input field.

LANGUAGE: tsx
CODE:
<Label_Shadcn_ htmlFor="email">Your email address</Label_Shadcn_>

----------------------------------------

TITLE: Implementing Redis Counter in TypeScript
DESCRIPTION: TypeScript code for the Edge Function that uses Upstash Redis to implement a counter. It increments a counter for each region and returns the total counts.

LANGUAGE: typescript
CODE:
import { Redis } from 'https://deno.land/x/upstash_redis@v1.19.3/mod.ts'

console.log(`Function "upstash-redis-counter" up and running!`)

Deno.serve(async (_req) => {
  try {
    const redis = new Redis({
      url: Deno.env.get('UPSTASH_REDIS_REST_URL')!,
      token: Deno.env.get('UPSTASH_REDIS_REST_TOKEN')!,
    })

    const deno_region = Deno.env.get('DENO_REGION')
    if (deno_region) {
      // Increment region counter
      await redis.hincrby('supa-edge-counter', deno_region, 1)
    } else {
      // Increment localhost counter
      await redis.hincrby('supa-edge-counter', 'localhost', 1)
    }

    // Get all values
    const counterHash: Record<string, number> | null = await redis.hgetall('supa-edge-counter')
    const counters = Object.entries(counterHash!)
      .sort(([, a], [, b]) => b - a) // sort desc
      .reduce((r, [k, v]) => ({ total: r.total + v, regions: { ...r.regions, [k]: v } }), {
        total: 0,
        regions: {},
      })

    return new Response(JSON.stringify({ counters }), { status: 200 })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 200 })
  }
})

----------------------------------------

TITLE: Listing Supabase Projects
DESCRIPTION: Command to retrieve a list of Supabase projects associated with the account.

LANGUAGE: bash
CODE:
supabase projects list

----------------------------------------

TITLE: Listing Supabase Projects
DESCRIPTION: Command to retrieve a list of Supabase projects associated with the account.

LANGUAGE: bash
CODE:
supabase projects list

----------------------------------------

TITLE: URL Structure for Implicit Flow Authentication
DESCRIPTION: Example URL structure showing how access and refresh tokens are passed in the URL fragment after successful authentication. The tokens are appended to the URL after the hash (#) symbol.

LANGUAGE: plaintext
CODE:
https://yourapp.com/...#access_token=<...>&refresh_token=<...>&...

----------------------------------------

TITLE: Supavisor Session Mode Connection String
DESCRIPTION: This example shows the connection string for Supavisor in session mode, using port 5432.

LANGUAGE: sh
CODE:
postgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Configuring Toast Expansion
DESCRIPTION: Shows how to configure the expand property of the Toaster component to control toast visibility.

LANGUAGE: tsx
CODE:
<Toaster expand={true | false} />

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: Blog post metadata configuration using YAML frontmatter, defining title, description, author, images, categories, tags, and other post-specific settings.

LANGUAGE: yaml
CODE:
---
title: Supabase Beta November 2022
description: We are preparing everything for Launch Week 6, but we still had time to ship some goodies this month!
author: ant_wilson
image: 2022-12-07-november-beta-update/monthly-update-november-2022.jpg
thumb: 2022-12-07-november-beta-update/monthly-update-november-2022.jpg
categories:
  - product
tags:
  - release-notes
date: '2022-12-07'
toc_depth: 3
---

----------------------------------------

TITLE: API Endpoint Example for PostgREST Query
DESCRIPTION: Shows the equivalent API endpoint for a PostgREST query to select country names.

LANGUAGE: bash
CODE:
https://<project ref>.supabase.co/rest/v1/countries?select=name

----------------------------------------

TITLE: Setting up dbdev for Supabase Testing
DESCRIPTION: Install prerequisites and set up dbdev for advanced testing capabilities in Supabase projects.

LANGUAGE: sql
CODE:
create extension if not exists http with schema extensions;
create extension if not exists pg_tle;
drop extension if exists "supabase-dbdev";
select pgtle.uninstall_extension_if_exists('supabase-dbdev');
select
    pgtle.install_extension(
        'supabase-dbdev',
        resp.contents ->> 'version',
        'PostgreSQL package manager',
        resp.contents ->> 'sql'
    )
from http(
    (
        'GET',
        'https://api.database.dev/rest/v1/'
        || 'package_versions?select=sql,version'
        || '&package_name=eq.supabase-dbdev'
        || '&order=version.desc'
        || '&limit=1',
        array[
            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header
        ],
        null,
        null
    )
) x,
lateral (
    select
        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0
) resp(contents);
create extension "supabase-dbdev";
select dbdev.install('supabase-dbdev');

-- Drop and recreate the extension to ensure a clean installation
drop extension if exists "supabase-dbdev";
create extension "supabase-dbdev";

----------------------------------------

TITLE: Installing Aspect Ratio Component via CLI
DESCRIPTION: Command to install the aspect-ratio component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add aspect-ratio

----------------------------------------

TITLE: Building Style Files Command
DESCRIPTION: Command to build all style files including CSS variables and TailwindCSS configuration.

LANGUAGE: bash
CODE:
npm run build-styles

----------------------------------------

TITLE: Embedding Loom Video in React
DESCRIPTION: This snippet demonstrates how to embed a Loom video using an iframe in a React component. It sets the video to full width and allows for fullscreen viewing.

LANGUAGE: javascript
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.loom.com/embed/17fbbc3bc9b2459eb0efbbb174b2ce7b"
    frameBorder="0"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Direct Database Connection String Format
DESCRIPTION: Example format for direct database connection string using port 5432.

LANGUAGE: shell
CODE:
# Example DB string:
postgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres

----------------------------------------

TITLE: Checking Vanity Subdomain Availability with Supabase CLI
DESCRIPTION: Use the Supabase CLI to check if a desired vanity subdomain is available for use with a project.

LANGUAGE: bash
CODE:
supabase vanity-subdomains --project-ref abcdefghijklmnopqrst check-availability --desired-subdomain my-example-brand --experimental

----------------------------------------

TITLE: Setting up Supabase Project
DESCRIPTION: Commands to initialize and start a local Supabase instance

LANGUAGE: shell
CODE:
supabase init

LANGUAGE: shell
CODE:
supabase start

----------------------------------------

TITLE: WebSocket Configuration for Local Testing
DESCRIPTION: TOML configuration for testing WebSocket connections locally with Supabase CLI, using per_worker policy to maintain connections.

LANGUAGE: toml
CODE:
[edge_runtime]
policy = "per_worker"

----------------------------------------

TITLE: Decoding Supabase API Key Structure in JSON
DESCRIPTION: This snippet shows the structure of a decoded Supabase API key, which includes the role, issued date, and expiry date.

LANGUAGE: json
CODE:
{
  "role": "anon",
  "iat": 1625137684,
  "exp": 1940713684
}

----------------------------------------

TITLE: Setting Toast Position
DESCRIPTION: Demonstrates how to configure the position of toast notifications using the position prop.

LANGUAGE: tsx
CODE:
<Toaster
  position={
    'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center'
  }
/>

----------------------------------------

TITLE: Downloading Next.js 13 and Supabase Caching Example
DESCRIPTION: This command downloads the example project from the Supabase GitHub repository. It uses curl to fetch the tarball and extracts the specific example directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/supabase/supabase/tar.gz/master | tar -xz --strip=3 supabase-master/examples/caching/with-nextjs-13

----------------------------------------

TITLE: Fly.io Deployment Configuration for FerretDB
DESCRIPTION: TOML configuration file for deploying FerretDB to Fly.io with production settings.

LANGUAGE: toml
CODE:
app = "supa-ferretdb-<your-supabase-project-ref>"
primary_region = "bos"

[build]
  image = "ghcr.io/ferretdb/ferretdb"

[[services]]
  internal_port = 27017
  protocol = "tcp"

  [[services.ports]]
    port = "27017"

[[vm]]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 1024

----------------------------------------

TITLE: Verifying Phone OTP in Kotlin
DESCRIPTION: Use the supabase.auth.verifyPhoneOtp method to verify the one-time password sent to the user's phone in Kotlin. This should be called after the user inputs the 6-digit pin they received.

LANGUAGE: kotlin
CODE:
supabase.auth.verifyPhoneOtp(
    type = OtpType.Phone.SMS,
    phone = "+13334445555",
    token = "123456"
)

----------------------------------------

TITLE: Implementing Custom Directive in MDX
DESCRIPTION: Demonstrates the syntax for implementing a custom directive in MDX using the special $ prefix. This syntax is chosen for its compatibility with MDX parsers while avoiding collisions with standard React components.

LANGUAGE: mdx
CODE:
<$CodeSample />

----------------------------------------

TITLE: Reflecting GraphQL Schema from PostgreSQL with pg_graphql
DESCRIPTION: pg_graphql is a native PostgreSQL extension that adds GraphQL support by inspecting an existing PostgreSQL schema and reflecting a GraphQL schema with performant resolvers.

LANGUAGE: sql
CODE:
pg_graphql

----------------------------------------

TITLE: Updating Supabase CLI on Windows
DESCRIPTION: This command updates the Supabase CLI to the latest version using Scoop on Windows.

LANGUAGE: powershell
CODE:
scoop update supabase

----------------------------------------

TITLE: Embedding YouTube Video with HTML iframe
DESCRIPTION: Code for embedding a YouTube video player with specific parameters and styling classes

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/5fsKMTeBKKY"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Configuring PKCE Authentication Flow
DESCRIPTION: Implementation of PKCE (Proof Key for Code Exchange) authentication flow in Supabase JavaScript client.

LANGUAGE: tsx
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    flowType: 'pkce',
  },
})

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required Python packages using Poetry

LANGUAGE: shell
CODE:
poetry add vecs boto3 matplotlib

----------------------------------------

TITLE: Querying GraphQL from SQL in Supabase
DESCRIPTION: Example of using graphql.resolve to query PostgreSQL data using GraphQL syntax within SQL.

LANGUAGE: sql
CODE:
select graphql.resolve($$
    {
      accountCollection(first: 1) {
        edges {
          node {
            id
            firstName
            address {
              countryCode
            }
          }
        }
      }
    }
$$);

----------------------------------------

TITLE: Implementing Collapsible Menus in React with InnerSideMenu
DESCRIPTION: This snippet demonstrates how to create a collapsible menu using the InnerSideMenuCollapsible component. It shows the structure of a collapsible menu with a trigger and content, including menu items.

LANGUAGE: jsx
CODE:
import {
  InnerSideMenuCollapsible,
  InnerSideMenuCollapsibleTrigger,
  InnerSideMenuCollapsibleContent,
  InnerSideMenuItem,
} from 'ui-patterns/InnerSideMenu'

function app() {
  return (
    <InnerSideMenuCollapsible key={category} defaultOpen>
      <InnerSideMenuCollapsibleTrigger title={category} />
      <InnerSideMenuCollapsibleContent>
        <InnerSideMenuItem href="/dashboard">Dashboard</InnerSideMenuItem>
        <InnerSideMenuItem href="/team">Team</InnerSideMenuItem>
        <InnerSideMenuItem href="/settings">Settings</InnerSideMenuItem>
      </InnerSideMenuCollapsibleContent>
    </InnerSideMenuCollapsible>
  )
}

----------------------------------------

TITLE: Searching for Near-Duplicate Reviews
DESCRIPTION: Performs similarity searches on each review to find near-duplicates, displaying results that meet specific criteria.

LANGUAGE: python
CODE:
for ix, text in tqdm(enumerate(data['text'])):

    # Load the next row from the dataset
    query_results = reviews.fetch(ids=[f'{ix}'])
    
    (query_id, query_embedding, query_meta) = query_results[0]

    # Retrieve the original text from the row's metadata
    query_text = query_meta["text"]

    # To keep the output easy to read quickly, we'll restrict reviews to < 500 characters
    # In the real-world you would not include this restriction
    if len(query_text) < 500:

        # Query the review embeddings for the most similar 5 reviews
        top_5 = reviews.query(
            query_vector=query_embedding,
            limit = 5,
            include_metadata= True,
            include_value=True
        )

        # For each result
        for result_id, result_distance, result_meta in top_5[1:]:
            
            result_text = result_meta["text"]

            if (
                # Since our query embedding is in the collection, the nearest result
                # is always itself with a distance of 0. We exclude that record and 
                # review any others with a distance < 0.17
                0.01 < abs(result_distance) < 0.17
                and len(result_text) < 500
                and query_id < result_id
            ):
                print(
                    "query_id:", query_id,
                    "\t", "result_id:", result_id,
                    "\t", "distance", round(result_distance, 4),
                    "\n\n", "Query Text",
                    "\n\n", query_meta["text"],
                    "\n\n", "Result Text",
                    "\n\n", result_meta["text"],
                    "\n", "-" * 80
                )

----------------------------------------

TITLE: Next.js Link Integration
DESCRIPTION: Modifications required to use Next.js Link component instead of default anchor tags in pagination.

LANGUAGE: diff
CODE:
+ import Link from "next/link"

- type PaginationLinkProps = ... & React.ComponentProps<"a">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
  </PaginationItem>
)

----------------------------------------

TITLE: Importing React Components
DESCRIPTION: Imports Layout and SectionContainer components for page structure

LANGUAGE: javascript
CODE:
import Layout from '../layouts/Layout'
import SectionContainer from '../components/Layouts/SectionContainer'

----------------------------------------

TITLE: Checking IPv6 Network Compatibility
DESCRIPTION: Shell command to verify IPv6 network compatibility on deployment server.

LANGUAGE: shell
CODE:
curl -6 https://ifconfig.co/ip

----------------------------------------

TITLE: Querying Storage Logs for 5XX Errors in SQL
DESCRIPTION: This SQL query filters storage logs for 5XX status code errors. It selects relevant fields including the error message and raw error data, joining with metadata and filtering for status codes 500 and above.

LANGUAGE: sql
CODE:
select
  id,
  storage_logs.timestamp,
  event_message,
  r.statusCode,
  e.message as errorMessage,
  e.raw as rawError
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.res) as r
  cross join unnest(m.error) as e
where r.statusCode >= 500
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Listing Secrets in Supabase Project
DESCRIPTION: Lists the secrets set in the Supabase project using the CLI.

LANGUAGE: bash
CODE:
npx supabase secrets list

----------------------------------------

TITLE: Implementing Spotify OAuth Sign In - Flutter
DESCRIPTION: Flutter implementation for signing in users with Spotify OAuth using Supabase Auth. Includes configuration for web and mobile platforms with custom redirect handling.

LANGUAGE: dart
CODE:
Future<void> signInWithSpotify() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.spotify,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}

----------------------------------------

TITLE: Testing SupaUtils Extension Configuration
DESCRIPTION: PostgreSQL configuration settings for testing the SupaUtils extension with reserved roles.

LANGUAGE: sql
CODE:
# set the extension as preloaded, this will require a restart
shared_preload_libraries="supautils"

# the reserved roles
supautils.reserved_roles="supabase_storage_admin, supabase_auth_admin"

----------------------------------------

TITLE: Adding PostgreSQL to Windows PATH
DESCRIPTION: Example path to add to the Windows system PATH for PostgreSQL binary. This allows the system to find and execute PostgreSQL commands from any location.

LANGUAGE: plaintext
CODE:
C:\Program Files\PostgreSQL\17\bin

----------------------------------------

TITLE: SupaUtils C Source Initialization
DESCRIPTION: Core C source code for the SupaUtils extension, including variable definitions and function declarations.

LANGUAGE: c
CODE:
// src/supautils.c

// include common declarations
#include "postgres.h"

// required macro for extension libraries to work
PG_MODULE_MAGIC;

// variable for the previous hook
static ProcessUtility_hook_type prev_hook = NULL;

// variable for our reserved roles configuration parameter
static char *reserved_roles = NULL;

// function declaration for extension initialization
void _PG_init(void);

// function declaration for our hook
static void supautils_hook(
    PlannedStmt *pstmt,
    const char *queryString,
    ProcessUtilityContext context,
    ParamListInfo params,
    QueryEnvironment *queryEnv,
    DestReceiver *dest,
    QueryCompletion *completionTag
);

// function declaration for our pure function that will return a reserved role
static char* look_for_reserved_role(Node *utility_stmt, List *reserved_role_list);

----------------------------------------

TITLE: YAML Frontmatter for Supabase Docs
DESCRIPTION: Example of YAML frontmatter used in Supabase documentation pages to define metadata and control page display.

LANGUAGE: yaml
CODE:
---
title: How to connect to Supabase
hideToc: true
---

----------------------------------------

TITLE: Deploying Edge Function
DESCRIPTION: Command to deploy the Edge Function with WebAssembly module to Supabase

LANGUAGE: bash
CODE:
supabase functions deploy wasm-add

----------------------------------------

TITLE: Importing Tooltip Components in React
DESCRIPTION: Example of importing Tooltip-related components from the local UI components directory.

LANGUAGE: tsx
CODE:
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'

----------------------------------------

TITLE: Setting up Supabase Studio for Local Development (Bash)
DESCRIPTION: Commands for installing dependencies, pulling secrets (for internal use), starting the development server, and running tests for the Supabase Studio project.

LANGUAGE: bash
CODE:
# You'll need to be on Node v20
# in /studio

npm i # install dependencies
npm run dev:secrets:pull # Supabase internal use: if you are working on the platform version of the Studio
npm run dev # start dev server
npm run test # run tests
npm run -- --watch # run tests in watch mode

----------------------------------------

TITLE: Embedding YouTube Video iFrame in HTML
DESCRIPTION: HTML code for embedding a YouTube video player with specific security and feature settings enabled.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/e4qXmcEFaUs"
    frameBorder="0"
    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Logflare Endpoint API Request
DESCRIPTION: Example cURL command to query the Logflare Endpoint API with parameters

LANGUAGE: bash
CODE:
curl "https://logflare.app/endpoints/query/69425db0-1cfb-48b4-84c7-2a872b6f0a61" \
 -H 'Content-Type: application/json; charset=utf-8' \
 -G -d "day=30"

----------------------------------------

TITLE: Configuring SQLAlchemy with NullPool
DESCRIPTION: Python code showing how to configure SQLAlchemy engine with NullPool for transaction mode connections.

LANGUAGE: python
CODE:
from sqlalchemy.pool import NullPool

con = sqlalchemy.create_engine(url, client_encoding='utf8', poolclass=NullPool)

----------------------------------------

TITLE: Enabling pgvector Extension in Supabase
DESCRIPTION: Shows how to enable the pgvector extension in a Supabase project.

LANGUAGE: sql
CODE:
create extension if not exists vector
with
  schema extensions;

----------------------------------------

TITLE: Basic Supabase Query with Retry Logic
DESCRIPTION: Example of a basic Supabase query implementation using the configured retry logic.

LANGUAGE: javascript
CODE:
async function fetchData() {
  const { data, error } = await supabase.from('your_table').select('*')

  if (error) {
    console.error('Error fetching data:', error)
  } else {
    console.log('Fetched data:', data)
  }
}

fetchData()

----------------------------------------

TITLE: Implementing Search Interface with Event Stream Processing
DESCRIPTION: JavaScript implementation of the search interface that handles form submission, queries the Supabase Edge Function, and processes the streamed response from OpenAI.

LANGUAGE: javascript
CODE:
const onSubmit = (e: Event) => {
  e.preventDefault()
  answer.value = ""
  isLoading.value = true

  const query = new URLSearchParams({ query: inputRef.current!.value })
  const projectUrl = `https://your-project-ref.supabase.co/functions/v1`
  const queryURL = `${projectURL}/${query}`
  const eventSource = new EventSource(queryURL)

  eventSource.addEventListener("error", (err) => {
    isLoading.value = false
    console.error(err)
  })

  eventSource.addEventListener("message", (e: MessageEvent) => {
    isLoading.value = false

    if (e.data === "[DONE]") {
      eventSource.close()
      return
    }

    const completionResponse: CreateCompletionResponse = JSON.parse(e.data)
    const text = completionResponse.choices[0].text

    answer.value += text
  });

  isLoading.value = true
}

----------------------------------------

TITLE: Handling Postgres CDC Messages in Realtime TypeScript
DESCRIPTION: This snippet illustrates the structure of Postgres Change Data Capture (CDC) messages. It includes details about schema, table, event type, and changed data.

LANGUAGE: typescript
CODE:
{
   "event": "postgres_changes",
   "topic": string,
   "payload": {
      "data": {
         schema: string,
         table: string,
         commit_timestamp: string,
         eventType: "*" | "INSERT" | "UPDATE" | "DELETE",
         new: {[key: string]: boolean | number | string | null},
         old: {[key: string]: number | string},
         errors: string | null
      },
      "ids": Array<number>
   },
   "ref": null
}

----------------------------------------

TITLE: Configuring Supavisor Session Mode Connection String for Prisma
DESCRIPTION: Example of a Supavisor session mode connection string for Prisma to connect to a Supabase PostgreSQL database.

LANGUAGE: markdown
CODE:
postgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Installing Switch Dependencies Manually
DESCRIPTION: Command to install the required Radix UI Switch dependency using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-switch

----------------------------------------

TITLE: Example JSON Webhook Payload
DESCRIPTION: Sample JSON payload structure representing webhook data with nested objects and arrays

LANGUAGE: json
CODE:
{
  "status_code": 200,
  "checksum": "89b623f6332d2b9b42b4e17eaf1bcc60"
  "headers": {
    "Content-Type": "application/json",
    "Last-Modified": "Tue, 09 Aug 2022 09:14:10 GMT"
  },
  "payload": {
    {
      "success": true,
      "content": {
        "account_id": "d928b484-16bd-4f10-a827-3eb959b4cc14",
        "event": "SUBSCRIBED",
        "subscriptions": [
          {"subscription_id": 481, "exp": 1660050940},
          {"subscription_id": 121, "exp": 1660041852}
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Installing Toggle Dependencies
DESCRIPTION: Command to install the toggle component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add toggle

----------------------------------------

TITLE: PostgREST API Query with Headers
DESCRIPTION: cURL command to query the bulletins table via PostgREST API with authentication headers

LANGUAGE: bash
CODE:
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' -H 'accept-profile: public' -H "apikey: $ANON_KEY" -H "authorization: Bearer $ANON_KEY"

----------------------------------------

TITLE: Installing Separator Component via CLI
DESCRIPTION: Command to install the Separator component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add separator

----------------------------------------

TITLE: Azure AD SSO Configuration Settings
DESCRIPTION: Required configuration values for Azure AD SSO setup including Sign-on URL and Relay State parameters.

LANGUAGE: plaintext
CODE:
Sign on URL: https://supabase.com/dashboard/sign-in-sso
Relay State: https://supabase.com/dashboard

----------------------------------------

TITLE: Image Figure Styling Example
DESCRIPTION: Example of how to structure and style figures with images and captions using Tailwind Typography

LANGUAGE: html
CODE:
<figure>
  <img
    src="https://images.unsplash.com/photo-1556740758-90de374c12ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1000&q=80"
    alt=""
  />
  <figcaption>
    Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of
    classical Latin literature from 45 BC, making it over 2000 years old.
  </figcaption>
</figure>

----------------------------------------

TITLE: Querying Count in PostgreSQL
DESCRIPTION: Demonstrates how to use the new count functionality in Supabase, which addresses a common limitation in Firebase. The code shows exact, planned, and estimated count queries.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM users; -- Exact count
SELECT COUNT(*) FROM users WHERE role = 'admin'; -- Planned count
SELECT reltuples::bigint AS estimate FROM pg_class WHERE relname = 'users'; -- Estimated count

----------------------------------------

TITLE: Optimizing Lodash Imports in JavaScript
DESCRIPTION: Demonstrates different methods of importing Lodash functions to reduce bundle size, including manual cherry-picking and using babel-plugin-lodash

LANGUAGE: javascript
CODE:
// before
import _ from 'lodash'

// maunally cherry picking modules
import find from 'lodash/find'
import debounce from 'lodash/debounce'

// using babel-plugin-lodash
import { find, debounce } from 'lodash'

----------------------------------------

TITLE: Including Types for Built-in Node APIs
DESCRIPTION: Shows how to include types for built-in Node APIs in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
/// <reference types="npm:@types/node" />

----------------------------------------

TITLE: Installing Dependencies for Semantic Text Deduplication
DESCRIPTION: Installs required Python libraries including vecs, datasets, sentence_transformers, flupy, and tqdm using pip.

LANGUAGE: bash
CODE:
!pip install -qU vecs datasets sentence_transformers flupy tqdm

----------------------------------------

TITLE: Initializing Supabase Client in Angular Service
DESCRIPTION: TypeScript code to initialize the Supabase client in an Angular service, including interfaces for store data.

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core'
import { DomSanitizer, SafeUrl } from '@angular/platform-browser'
import { SupabaseClient, User, createClient } from '@supabase/supabase-js'
import { environment } from 'src/environments/environment'

export interface StoreEntry {
  lat?: number
  long?: number
  name: string
  description: string
  image?: File
}
export interface StoreResult {
  id: number
  lat: number
  long: number
  name: string
  description: string
  image?: SafeUrl
  dist_meters?: number
}
@Injectable({
  providedIn: 'root',
})
export class StoresService {
  private supabase: SupabaseClient

  constructor(private sanitizer: DomSanitizer) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  // Get all places with calculated distance
  async getNearbyStores(lat: number, long: number) {
    const { data, error } = await this.supabase.rpc('nearby_stores', {
      lat,
      long,
    })
    return data
  }
}

----------------------------------------

TITLE: Disabling Query Timeout in SQL
DESCRIPTION: SQL commands to disable query timeout and verify the setting for long-running index operations.

LANGUAGE: sql
CODE:
set statement_timeout = '0';
show statement_timeout;

----------------------------------------

TITLE: Implementing Row Level Security
DESCRIPTION: SQL policies to implement row level security for protecting chat data

LANGUAGE: sql
CODE:
create or replace function is_room_participant(room_id uuid)
returns boolean as $$
  select exists(
    select 1
    from room_participants
    where room_id = is_room_participant.room_id and profile_id = auth.uid()
  );
$$ language sql security definer;

alter table public.profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on public.profiles for select using (true);

alter table public.rooms enable row level security;
create policy "Users can view rooms that they have joined"
  on public.rooms for select using (is_room_participant(id));

alter table public.room_participants enable row level security;
create policy "Participants of the room can view other participants."
  on public.room_participants for select using (is_room_participant(room_id));

alter table public.messages enable row level security;
create policy "Users can view messages on rooms they are in."
  on public.messages for select using (is_room_participant(room_id));
create policy "Users can insert messages on rooms they are in."
  on public.messages for insert with check (is_room_participant(room_id) and profile_id = auth.uid());

----------------------------------------

TITLE: Installing Table Component via CLI
DESCRIPTION: Command to install the table component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add table

----------------------------------------

TITLE: Installing Sheet Dependencies via CLI
DESCRIPTION: Command to install the Sheet component using the shadcn-ui CLI tool

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add sheet

----------------------------------------

TITLE: SQL Alias Usage
DESCRIPTION: Example of using meaningful aliases with the 'as' keyword for clarity

LANGUAGE: sql
CODE:
select count(*) as total_employees
from employees
where end_date is null;

----------------------------------------

TITLE: Creating a Database Webhook Trigger in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a database webhook trigger using the supabase_functions.http_request function. It sets up a trigger that fires after an insert operation on a specific table.

LANGUAGE: sql
CODE:
create trigger "my_webhook" after insert
on "public"."my_table" for each row
execute function "supabase_functions"."http_request"(
  'http://host.docker.internal:3000',
  'POST',
  '{"Content-Type":"application/json"}',
  '{}',
  '1000'
);

----------------------------------------

TITLE: Configuring Prisma Connection String with Query Parameters
DESCRIPTION: Demonstrates how to append query parameters to the Prisma connection string to address specific errors.

LANGUAGE: markdown
CODE:
.../postgres?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE

----------------------------------------

TITLE: Dropping Database Triggers and Functions in SQL
DESCRIPTION: SQL commands to remove problematic triggers and their associated functions using the CASCADE modifier. This helps resolve permission-related errors in the auth schema.

LANGUAGE: sql
CODE:
DROP FUNCTION <function name>() CASCADE;

-- If you'd prefer, you can drop the trigger alone with the following query:
-- DROP TRIGGER <trigger_name> on auth.<table_name>;

----------------------------------------

TITLE: Creating a Functional Index with MD5 Hashing in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a functional index using MD5 hashing for columns with long values that exceed the B-tree index size limit. It replaces a standard index on a column with an index on the MD5 hash of the column's values.

LANGUAGE: sql
CODE:
CREATE INDEX ON table_name(MD5(column_name));

----------------------------------------

TITLE: Starting the Laravel Development Server
DESCRIPTION: Launch the Laravel development server to run the application locally.

LANGUAGE: bash
CODE:
php artisan serve

----------------------------------------

TITLE: Importing Spec File in Next.js
DESCRIPTION: Example of importing a spec file in a Next.js dynamic route for reference documentation.

LANGUAGE: javascript
CODE:
import specFile from '~/spec/transforms/analytics_v0_openapi_deparsed.json' with { type: 'json' }

----------------------------------------

TITLE: Background Task in Request Handler
DESCRIPTION: Shows how to initiate a background task within a request handler using EdgeRuntime.waitUntil(). The task runs asynchronously without blocking the request response.

LANGUAGE: typescript
CODE:
async function fetchAndLog(url: string) {
  const response = await fetch(url)
  console.log(response)
}

Deno.serve(async (req) => {
  // this will not block the request,
  // instead it will run in the background
  EdgeRuntime.waitUntil(fetchAndLog('https://httpbin.org/json'))

  return new Response('ok')
})

----------------------------------------

TITLE: Rendering Nested MDX Component in React
DESCRIPTION: Example of rendering a nested partial component with MDX syntax and prettier formatting disabled

LANGUAGE: jsx
CODE:
{/* prettier-ignore */}
<$Partial path='/_fixtures/nested2.mdx' />

----------------------------------------

TITLE: Installing WAL-G on Ubuntu
DESCRIPTION: Commands to download, extract, and install WAL-G on an Ubuntu system.

LANGUAGE: shell
CODE:
$ wget https://github.com/wal-g/wal-g/releases/download/v0.2.15/wal-g.linux-amd64.tar.gz
$ tar -zxvf wal-g.linux-amd64.tar.gz
$ mv wal-g /usr/local/bin/

----------------------------------------

TITLE: Python Workflow Function with DBOS Decorators
DESCRIPTION: Example showing how to create workflow functions using DBOS decorators in Python to define workflow steps and transaction boundaries.

LANGUAGE: python
CODE:
@DBOS.workflow()
def process_order():
    # Workflow implementation
    pass

@DBOS.step()
def check_inventory():
    # Step implementation
    pass

----------------------------------------

TITLE: Embedding Tutorial Video with HTML
DESCRIPTION: HTML iframe code for embedding a tutorial video about rate limiting Edge Functions. The video is embedded from YouTube with specific security and feature parameters.

LANGUAGE: html
CODE:
<div class="video-container">
  <iframe
    src="https://www.youtube-nocookie.com/embed/o4ooiE-SdUg"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Database Broadcast Trigger Setup
DESCRIPTION: SQL setup for enabling database-triggered broadcast messages including trigger functions and policies.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION public.your_table_changes() RETURNS trigger AS $$
BEGIN
    PERFORM realtime.broadcast_changes(
	    'topic:' || NEW.id::text,
		   TG_OP,
		   TG_OP,
		   TG_TABLE_NAME,
		   TG_TABLE_SCHEMA,
		   NEW,
		   OLD
		);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Configuring RLS Policy for Object Deletion in Supabase
DESCRIPTION: SQL policy definition that grants authenticated users permission to delete their own objects from storage. The policy checks if the object owner matches the authenticated user's ID.

LANGUAGE: sql
CODE:
create policy "User can delete their own objects"
on storage.objects
for delete
TO authenticated
USING (
    owner = (select auth.uid()::text)
);

----------------------------------------

TITLE: Database Seeding Function
DESCRIPTION: Python function to create and populate vector collection with image embeddings

LANGUAGE: python
CODE:
def seed():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)

    # get or create a collection of vectors with 1024 dimensions
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Generate image embeddings with Amazon Titan Model
    img_emb1 = encode_image('./images/one.jpg')
    img_emb2 = encode_image('./images/two.jpg')
    img_emb3 = encode_image('./images/three.jpg')
    img_emb4 = encode_image('./images/four.jpg')

    # add records to the *images* collection
    images.upsert(
        records=[
            (
                "one.jpg",       # the vector's identifier
                img_emb1,        # the vector. list or np.array
                {"type": "jpg"}  # associated  metadata
            ), (
                "two.jpg",
                img_emb2,
                {"type": "jpg"}
            ), (
                "three.jpg",
                img_emb3,
                {"type": "jpg"}
            ), (
                "four.jpg",
                img_emb4,
                {"type": "jpg"}
            )
        ]
    )
    print("Inserted images")

    # index the collection for fast search performance
    images.create_index()
    print("Created index")

----------------------------------------

TITLE: Importing Table Components in React
DESCRIPTION: Import statement showing all available table-related components from the UI library.

LANGUAGE: tsx
CODE:
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'

----------------------------------------

TITLE: Login Screen Implementation
DESCRIPTION: Flutter widget implementing the login screen with Google Sign-in functionality.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:myauthapp/main.dart';
import 'package:myauthapp/screens/profile_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  @override
  void initState() {
    _setupAuthListener();
    super.initState();
  }

  void _setupAuthListener() {
    supabase.auth.onAuthStateChange.listen((data) {
      final event = data.event;
      if (event == AuthChangeEvent.signedIn) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => const ProfileScreen(),
          ),
        );
      }
    });
  }

  Future<AuthResponse> _googleSignIn() async {
    const webClientId = 'my-web.apps.googleusercontent.com';
    const iosClientId = 'my-ios.apps.googleusercontent.com';

    final GoogleSignIn googleSignIn = GoogleSignIn(
      clientId: iosClientId,
      serverClientId: webClientId,
    );
    final googleUser = await googleSignIn.signIn();
    final googleAuth = await googleUser!.authentication;
    final accessToken = googleAuth.accessToken;
    final idToken = googleAuth.idToken;

    if (accessToken == null) {
      throw 'No Access Token found.';
    }
    if (idToken == null) {
      throw 'No ID Token found.';
    }

    return supabase.auth.signInWithIdToken(
      provider: OAuthProvider.google,
      idToken: idToken,
      accessToken: accessToken,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _googleSignIn,
          child: const Text('Google login'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Copying Objects Across Buckets in Supabase Storage (JavaScript)
DESCRIPTION: This snippet shows how to copy an object from one bucket to another using the Supabase Storage API. It uses the 'copy' method with a 'destinationBucket' option to specify the target bucket.

LANGUAGE: javascript
CODE:
await supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png', {
  destinationBucket: 'avatars2',
})

----------------------------------------

TITLE: Creating ASCII Scatterplot using olirice-asciiplot Package
DESCRIPTION: Shows how to use the installed asciiplot package to create an ASCII scatterplot visualization.

LANGUAGE: sql
CODE:
select
  scatter(
    val::numeric, -- x
    val::numeric, -- y
    'stonks!',    -- title
    15,           -- height
    50            -- width
  )
from
  generate_series(1,10) z(val);

----------------------------------------

TITLE: Bulk Insert with Default Values in Supabase
DESCRIPTION: JavaScript example using Supabase client to perform bulk insert with default values consideration.

LANGUAGE: jsx
CODE:
const { error } = await supabase
  .from('foo')
  .insert([
	  { "bar": "val1"
	  }
	, { "bar": "val2"
	  , "baz": 15
	  }
	], defaultToNull: false)
  .select()

----------------------------------------

TITLE: Firebase Auth Role Assignment Function
DESCRIPTION: JavaScript function to assign authenticated role to Firebase users using Admin SDK.

LANGUAGE: javascript
CODE:
'use strict';
const { initializeApp } = require('firebase-admin/app');
const { getAuth } = require('firebase-admin/auth');
initializeApp();

async function setRoleCustomClaim() => {
  let nextPageToken = undefined

  do {
    const listUsersResult = await getAuth().listUsers(1000, nextPageToken)

    nextPageToken = listUsersResult.pageToken

    await Promise.all(listUsersResult.users.map(async (userRecord) => {
      try {
        await getAuth().setCustomUserClaims(userRecord.id, {
          role: 'authenticated'
        })
      } catch (error) {
        console.error('Failed to set custom role for user', userRecord.id)
      }
    })
  } while (nextPageToken);
};

setRoleCustomClaim().then(() => process.exit(0))

----------------------------------------

TITLE: Starting the refine app
DESCRIPTION: Starts the development server for the refine app.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating Auto-Profile Generation Trigger
DESCRIPTION: SQL functions and trigger to automatically create user profiles when new users are authenticated. Includes necessary security configurations and permissions.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION insert_user() RETURNS TRIGGER AS
$$
  BEGIN
    INSERT INTO public.profiles (id, email) VALUES (NEW.id, NEW.email); RETURN NEW;
  END;
$$ LANGUAGE plpgsql
   SECURITY DEFINER
   SET search_path = public;

CREATE OR REPLACE TRIGGER "on_new_auth_create_profile"
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE FUNCTION insert_user();

GRANT EXECUTE ON FUNCTION insert_user () TO supabase_auth_admin;
GRANT INSERT ON TABLE public.profiles TO supabase_auth_admin;

----------------------------------------

TITLE: Downloading Resized Images with Supabase Storage in JavaScript
DESCRIPTION: Shows how to download a resized image using the Supabase Storage API, specifying width, height, and resize mode.

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
    resize: 'contain', // 'contain' | 'cover' | 'fill'
  },
})

----------------------------------------

TITLE: Initiating OAuth Sign-In with PKCE (Server-Side)
DESCRIPTION: This snippet demonstrates how to initiate OAuth sign-in with PKCE flow on the server-side using Supabase. It returns a URL for redirection to the OAuth provider.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.auth.signInWithOAuth({
  provider,
  options: {
    redirectTo: 'http://example.com/auth/callback',
  },
})

if (data.url) {
  redirect(data.url) // use the redirect API for your server framework
}

----------------------------------------

TITLE: Enabling WAL Archiving in PostgreSQL
DESCRIPTION: Commands to modify PostgreSQL configuration to enable WAL archiving and set up WAL-G as the archive command.

LANGUAGE: shell
CODE:
$ echo "archive_mode = yes" >> /etc/postgresql/12/main/postgresql.conf
$ echo "archive_command = 'envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-push %p'" >> /etc/postgresql/12/main/postgresql.conf
$ echo "archive_timeout = 60" >> /etc/postgresql/12/main/postgresql.conf

----------------------------------------

TITLE: Importing Dropdown Menu Components in React
DESCRIPTION: TypeScript code snippet showing how to import various dropdown menu components from a UI library.

LANGUAGE: tsx
CODE:
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

----------------------------------------

TITLE: Installing Skeleton Component via CLI
DESCRIPTION: Command to install the Skeleton component using the shadcn-ui CLI tool

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add skeleton

----------------------------------------

TITLE: Creating Supabase Tables for Notifications and User Profiles
DESCRIPTION: SQL commands to create the necessary tables in Supabase for storing user profiles with FCM tokens and notifications. This includes a profiles table with an fcm_token column and a notifications table to store notification details.

LANGUAGE: sql
CODE:
create table public.profiles (
  id uuid references auth.users(id) not null primary key,
  fcm_token text
);

create table public.notifications (
  id uuid not null default gen_random_uuid(),
  user_id uuid references auth.users(id) not null,
  created_at timestamp with time zone not null default now(),
  body text not null
);

----------------------------------------

TITLE: Retrieving User Session Status in Supabase Auth
DESCRIPTION: Reference to the getUser() method which is the recommended way to verify user authentication status, rather than relying on cookie expiration parameters.

LANGUAGE: javascript
CODE:
getUser()

----------------------------------------

TITLE: Creating Admin Role Check Function in PostgreSQL
DESCRIPTION: Security definer function that checks if the current user has admin role by querying the rlstest_roles table.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION is_admin()
  RETURNS boolean as
$$
begin
  return exists(select from rlstest_roles where auth.uid() = user_id and role = 'admin');
end;
$$ language plpgsql security definer;

----------------------------------------

TITLE: Sign In with Kakao - JavaScript Implementation
DESCRIPTION: JavaScript function to initiate Kakao OAuth authentication using Supabase Auth.

LANGUAGE: javascript
CODE:
async function signInWithKakao() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'kakao',
  })
}

----------------------------------------

TITLE: Rendering Privacy Settings Component
DESCRIPTION: Embeds a custom PrivacySettings component within the privacy policy content to allow users to manage their preferences.

LANGUAGE: jsx
CODE:
<PrivacySettings className="underline">Manage preferences</PrivacySettings>

----------------------------------------

TITLE: GraphQL Filtering with Skip Directive
DESCRIPTION: Example of using the @skip directive to conditionally exclude fields from the query response based on a boolean variable.

LANGUAGE: graphql
CODE:
query getBooks($includeDetails: Boolean!) {
  booksCollection {
    edges {
      node {
        id
        title
        description @skip(if: $includeDetails)
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Custom Serializer for Supabase
DESCRIPTION: Creating and configuring a custom serializer implementation for Supabase client, demonstrating encode and decode methods.

LANGUAGE: kotlin
CODE:
class CustomSerializer: SupabaseSerializer {

    override fun <T : Any> encode(type: KType, value: T): String {
        //encode value to string
    }

    override fun <T : Any> decode(type: KType, value: String): T {
        //decode value
    }

}

----------------------------------------

TITLE: Sign Out Implementation - JavaScript
DESCRIPTION: JavaScript function to handle user sign out and clear session data.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Configuring Storage Access Policies in Supabase
DESCRIPTION: Sets up three storage access policies: read access for all users, insert access for authenticated users, and update access for all users.

LANGUAGE: sql
CODE:
CREATE POLICY "Enable read access for all users" ON "storage"."objects"
AS PERMISSIVE FOR SELECT
TO public
USING (true)

CREATE POLICY "Enable insert for all users" ON "storage"."objects"
AS PERMISSIVE FOR INSERT
TO authenticated, anon
WITH CHECK (true)

CREATE POLICY "Enable update for all users" ON "storage"."objects"
AS PERMISSIVE FOR UPDATE
TO public
USING (true)
WITH CHECK (true)

----------------------------------------

TITLE: Creating User-Specific File Access Policy in SQL
DESCRIPTION: This SQL snippet creates a policy to allow access to a specific file for a particular Supabase user, demonstrating integration with the User Management system.

LANGUAGE: sql
CODE:
create policy crud_uid_file
on storage.objects for all using (
	bucket_id = 'avatars'
	and name = 'folder/only_uid.jpg'
	and (select auth.uid()) = 'd8c7bce9-cfeb-497b-bd61-e66ce2cbdaa2'
);

----------------------------------------

TITLE: Getting Metrics for All PGMQ Queues in SQL
DESCRIPTION: Retrieves metrics for all existing queues using the pgmq.metrics_all function.

LANGUAGE: sql
CODE:
select * from pgmq.metrics_all();

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Command to serve Supabase functions locally without JWT verification. This allows for local testing and development of stream functions.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: New Database Change Listening Method in supabase-js v2
DESCRIPTION: This snippet demonstrates the new method for listening to database changes in supabase-js v2, which uses the channel() interface instead of the previous from().on().subscribe() method.

LANGUAGE: typescript
CODE:
supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()

----------------------------------------

TITLE: Monitoring Dead Rows in PostgreSQL Tables
DESCRIPTION: SQL queries to check the number of dead tuples and compare with live rows to detect potential bloat issues.

LANGUAGE: sql
CODE:
SELECT
	n_dead_tup
FROM
	pg_stat_user_tables
WHERE
	relname = 'mytable';

-- number of live rows
SELECT
	count(*)
FROM
	mytable;

----------------------------------------

TITLE: Checking PostgreSQL Installation Info on MacOS
DESCRIPTION: Command to display information about the installed PostgreSQL package on MacOS using Homebrew. This provides details about the installation path and how to add it to the system PATH.

LANGUAGE: sh
CODE:
brew info postgresql@17

----------------------------------------

TITLE: Configuring Import Map in config.toml
DESCRIPTION: Example of setting the import_map property in the config.toml file for a Supabase Edge Function.

LANGUAGE: toml
CODE:
[functions.my-function]
import_map = "./supabase/functions/my-function/import_map.json"

----------------------------------------

TITLE: Multipart File Upload Using S3 Upload in JavaScript
DESCRIPTION: Shows how to implement multipart file uploads using the AWS SDK Upload class. This method splits large files into smaller parts for parallel upload, optimal for server-side uploads of files up to 50GB on paid plans.

LANGUAGE: javascript
CODE:
import { S3Client } from '@aws-sdk/client-s3'
import { Upload } from '@aws-sdk/lib-storage'

const s3Client = new S3Client({...})

const file = fs.createReadStream('path/to/very-large-file')

const upload = new Upload(s3Client, {
  Bucket: 'bucket-name',
  Key: 'path/to/file',
  ContentType: 'image/jpeg',
  Body: file,
})

await uploader.done()

----------------------------------------

TITLE: Next.js Instrumentation Configuration
DESCRIPTION: JavaScript code for Next.js instrumentation configuration, importing the appropriate Sentry configuration based on the runtime environment.

LANGUAGE: js
CODE:
// https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./sentry.server.config')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./sentry.edge.config')
  }
}

----------------------------------------

TITLE: Hiding Links in Auth UI
DESCRIPTION: Shows how to hide certain links in the Auth component by setting the showLinks prop to false.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => <Auth supabaseClient={supabase} showLinks={false} />

----------------------------------------

TITLE: Example: Weekly Data Cleanup Job
DESCRIPTION: Schedules a job to delete old data every Saturday at 3:30AM GMT.

LANGUAGE: sql
CODE:
select cron.schedule (
  'saturday-cleanup', -- name of the cron job
  '30 3 * * 6', -- Saturday at 3:30AM (GMT)
  $$ delete from events where event_time < now() - interval '1 week' $$
);

----------------------------------------

TITLE: Granting INSERT Permission to All Users in PostgreSQL
DESCRIPTION: Shows how to grant INSERT permission on the 'students' table to all users (PUBLIC role) in the database, demonstrating the use of the GRANT statement for managing permissions.

LANGUAGE: sql
CODE:
GRANT INSERT ON students TO PUBLIC;

----------------------------------------

TITLE: Running CLI Version Documentation Update
DESCRIPTION: Command to create a new version of documentation when releasing a new version of the CLI tool. This updates both the documentation and sidebar files for version tracking.

LANGUAGE: bash
CODE:
npm run cli:version 1.0.1

----------------------------------------

TITLE: Implementing Command Dialog in React
DESCRIPTION: This code snippet shows how to implement a Command Dialog with keyboard shortcut functionality in a React component.

LANGUAGE: tsx
CODE:
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener('keydown', down)
    return () => document.removeEventListener('keydown', down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}

----------------------------------------

TITLE: Profile Screen Implementation
DESCRIPTION: Flutter widget implementing the profile screen to display user information.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:myauthapp/main.dart';
import 'package:myauthapp/screens/login_screen.dart';

class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final user = supabase.auth.currentUser;
    final profileImageUrl = user?.userMetadata?['avatar_url'];
    final fullName = user?.userMetadata?['full_name'];
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile'),
        actions: [
          TextButton(
            onPressed: () async {
              await supabase.auth.signOut();
              if (context.mounted) {
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              }
            },
            child: const Text('Sign out'),
          )
        ],
      ),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (profileImageUrl != null)
              ClipOval(
                child: Image.network(
                  profileImageUrl,
                  width: 100,
                  height: 100,
                  fit: BoxFit.cover,
                ),
              ),
            const SizedBox(height: 16),
            Text(
              fullName ?? '',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Installing Sonner Dependencies
DESCRIPTION: Installs the required npm packages sonner and next-themes for implementing toast functionality.

LANGUAGE: bash
CODE:
npm install sonner next-themes

----------------------------------------

TITLE: Getting Public URL with Image Transformation
DESCRIPTION: Demonstrates how to get a public URL for a transformed image using various client libraries, allowing width and height specifications.

LANGUAGE: typescript
CODE:
supabase.storage.from('bucket').getPublicUrl('image.jpg', {
  transform: {
    width: 500,
    height: 600,
  },
})

LANGUAGE: dart
CODE:
final url = supabase.storage.from('bucket').getPublicUrl(
      'image.jpg',
      transform: const TransformOptions(
        width: 500,
        height: 600,
      ),
    );

----------------------------------------

TITLE: Using Broadcast in Supabase Realtime with JavaScript
DESCRIPTION: This code demonstrates how to use the Broadcast feature in Supabase Realtime to send and receive mouse cursor positions between clients in a specific room.

LANGUAGE: javascript
CODE:
const channel = supabase.channel('room_1')
const MOUSE_EVENT = 'cursor'

// Subscribe to mouse events.
// Our second parameter filters only for mouse events.
channel
  .on('broadcast', { event: MOUSE_EVENT }, (event) => {
    receivedCursorPosition(event)
  })
  .subscribe()

// Handle a mouse event.
const receivedCursorPosition = ({ event, payload }) => {
  console.log(`
		User: ${payload.userId}
		x Position: ${payload.x}
		y Position: ${payload.y}
	`)
}

// Helper function for sending our own mouse position.
const sendMousePosition = (channel, userId, x, y) => {
  return channel.send({
    type: 'broadcast',
    event: MOUSE_EVENT,
    payload: { userId, x, y },
  })
}

----------------------------------------

TITLE: GraphQL Query Example for ProjectOwner
DESCRIPTION: Sample GraphQL query demonstrating how to fetch project owner data using the generated API.

LANGUAGE: graphql
CODE:
{
  projectOwnerCollection(first: 2) {
    edges {
      node {
        nodeId
        name
      }
    }
  }
}

----------------------------------------

TITLE: Filtering Storage Logs by HTTP Method in SQL
DESCRIPTION: This SQL query filters storage logs by HTTP method, specifically for POST requests. It joins with metadata and selects relevant fields including the method used for each request.

LANGUAGE: sql
CODE:
select id, storage_logs.timestamp, event_message, r.method
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.req) as r
where r.method in ("POST")
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Complex Organization Schema Definition for Supabase
DESCRIPTION: Define the schema for a multi-tenant content publishing platform in Supabase.

LANGUAGE: sql
CODE:
create table public.profiles (
  id uuid references auth.users(id) primary key,
  username text unique not null,
  full_name text,
  bio text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.organizations (
  id bigint primary key generated always as identity,
  name text not null,
  slug text unique not null,
  plan_type text not null check (plan_type in ('free', 'pro', 'enterprise')),
  max_posts int not null default 5,
  created_at timestamptz default now()
);

create table public.org_members (
  org_id bigint references public.organizations(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  role text not null check (role in ('owner', 'admin', 'editor', 'viewer')),
  created_at timestamptz default now(),
  primary key (org_id, user_id)
);

create table public.posts (
  id bigint primary key generated always as identity,
  title text not null,
  content text not null,
  author_id uuid references public.profiles(id) not null,
  org_id bigint references public.organizations(id),
  status text not null check (status in ('draft', 'published', 'archived')),
  is_premium boolean default false,
  scheduled_for timestamptz,
  category text,
  view_count int default 0,
  published_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.comments (
  id bigint primary key generated always as identity,
  post_id bigint references public.posts(id) on delete cascade,
  author_id uuid references public.profiles(id),
  content text not null,
  is_deleted boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: Initializing Supabase with Simplified Auth State Management in Flutter
DESCRIPTION: Demonstrates the simplified initialization process for Supabase in Flutter, removing the need for SupabaseAuthState implementation. Shows both the previous and new approach to auth state persistence.

LANGUAGE: dart
CODE:
// Before
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
...

class AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {
  ...
}

// After
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);

----------------------------------------

TITLE: Setting Up Dynamic JavaScript Executor Edge Function
DESCRIPTION: TypeScript code for creating an Edge Function that executes dynamic JavaScript code with Supabase client integration.

LANGUAGE: typescript
CODE:
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

// Import the supabase client
import { createClient } from "<https://esm.sh/@supabase/supabase-js@2>";

console.log("===\n\tBooted Edge Worker!\n===\n");
const supabase_url = Deno.env.get("SUPABASE_URL") ?? "";
const service_role = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
// Set the permission to service_role key:
const supabase = createClient(supabase_url, service_role);
// This allows us to use Supabase.ai in the function
const session = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) =>
  const authorization = req.headers.get("Authorization");
  if (!authorization) throw new Error("Authorization header is missing.");
  // Ensures that the function is called with service_role to prevent missuse
  if (!authorization.includes(service_role)) {
    throw new Error("Authorization header is invalid.");
  }

  const { code } = await req.json();
  try {
    // Wrap the provided code in an async function context
    const asyncFunction = new Function('supabase', `
      return (async () => {
        ${code.replace(/\\/g, '')}
      })();
    `);
    // Pass the Supabase client as the scope for the function to use:
    const data = await asyncFunction(supabase);
    console.log(data);
    return new Response(
      JSON.stringify({ data }),
      { headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' } },
    );
  } catch (error) {
    console.error("Error executing user code:", error);
    return new Response(
      JSON.stringify({ error: "An error occurred -> " + error.message }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
});

----------------------------------------

TITLE: Creating and Configuring User Profiles Table in SQL
DESCRIPTION: This SQL script creates a 'profiles' table with user information, sets up row-level security, and defines policies for public viewing and user-specific operations. It also configures Realtime publication for the profiles table.

LANGUAGE: sql
CODE:
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

----------------------------------------

TITLE: Using Card Component in React JSX
DESCRIPTION: Example of using the Card component with its subcomponents to create a structured card layout in React JSX.

LANGUAGE: tsx
CODE:
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>

----------------------------------------

TITLE: Importing Toggle Group Component in React
DESCRIPTION: Code snippet showing how to import the Toggle Group and ToggleGroupItem components in a React application.

LANGUAGE: tsx
CODE:
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'

----------------------------------------

TITLE: Setting Environment Variables for Telegram Bot
DESCRIPTION: Environment variable configuration for the bot including API keys and security tokens

LANGUAGE: env
CODE:
ELEVENLABS_API_KEY=your_api_key
TELEGRAM_BOT_TOKEN=your_bot_token
FUNCTION_SECRET=random_secret

----------------------------------------

TITLE: Creating Database Roles in PostgreSQL
DESCRIPTION: Shows how to create login roles (users) in PostgreSQL with passwords

LANGUAGE: bash
CODE:
create role junior_dev login password 'a long and secure password';
create role senior_dev login password 'another long and secure password';

----------------------------------------

TITLE: Supabase Pooler Connection String for Session Mode
DESCRIPTION: This snippet shows the connection string format for connecting to Supabase's connection pooler in session mode. It uses port 5432 and includes placeholders for the password.

LANGUAGE: md
CODE:
#example session mode string | uses port 5432
postgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Rendering Use Case Links in JSX
DESCRIPTION: This code snippet maps over an array of use cases and renders them as Link components with GlassPanel content. It's used to display various use cases like AI and Vectors, Subscription Payments, and Partner Gallery.

LANGUAGE: JSX
CODE:
{[
  {
    title: 'AI, Vectors, and embeddings',
    href: '/guides/ai#examples',
    description: `Build AI-enabled applications using our Vector toolkit.`,
    icon: '/docs/img/icons/openai_logo',
    hasLightIcon: true,
  },
  {
    title: 'Subscription Payments (SaaS)',
    href: 'https://github.com/vercel/nextjs-subscription-payments#nextjs-subscription-payments-starter',
    description: `Clone, deploy, and fully customize a SaaS subscription application with Next.js.`,
    icon: '/docs/img/icons/nextjs-icon',
  },
  {
    title: 'Partner Gallery',
    href: 'https://github.com/supabase-community/partner-gallery-example#supabase-partner-gallery-example',
    description: `Postgres full-text search, image storage, and more.`,
    icon: '/docs/img/icons/nextjs-icon',
  },
].map((item) => {
  return (
    <Link href={`${item.href}`} key={item.title} passHref className={'col-span-4'}>
      <GlassPanel
        title={item.title}
        span="col-span-6"
        background={false}
        icon={item.icon}
        hasLightIcon={item.hasLightIcon}
      >
        {item.description}
      </GlassPanel>
    </Link>
  )
})}

----------------------------------------

TITLE: Realtime Change Handler Usage
DESCRIPTION: Example of setting up a Realtime client to handle PostgreSQL changes with the new delegate-based event system.

LANGUAGE: csharp
CODE:
RealtimeClient.AddPostgresChangeHandler((sender, args) => {
  // Handle postgres changes
});

----------------------------------------

TITLE: Implementing Realtime Heartbeat in TypeScript
DESCRIPTION: This snippet demonstrates the structure of a heartbeat message that should be sent every 30 seconds to maintain the connection and prevent timeouts.

LANGUAGE: typescript
CODE:
{
   "event": "heartbeat",
   "topic": "phoenix",
   "payload": {},
   "ref": string
}

----------------------------------------

TITLE: Database Schema and RLS Setup
DESCRIPTION: SQL commands to create database tables for drivers and rides, including PostGIS extension and row level security policies.

LANGUAGE: sql
CODE:
create extension postgis with schema extensions;

create table if not exists public.drivers (
	id uuid primary key default gen_random_uuid(),
	model text not null,
  number text not null,
  is_available boolean not null default false,
	location geography(POINT) not null,
  latitude double precision generated always as (st_y(location::geometry)) stored,
  longitude double precision generated always as (st_x(location::geometry)) stored
);

create type ride_status as enum ('picking_up', 'riding', 'completed');

create table if not exists public.rides (
  id uuid primary key default gen_random_uuid(),
  driver_id uuid not null references public.drivers(id),
  passenger_id uuid not null references auth.users(id),
  origin geography(POINT) not null,
  destination geography(POINT) not null,
  fare integer not null,
  status ride_status not null default 'picking_up'
);

----------------------------------------

TITLE: Creating Read Access Policy for Public Avatars Subfolder in SQL
DESCRIPTION: This SQL snippet creates a policy to allow read access to a subfolder named 'public' within the 'avatars' bucket using Postgres Row Level Security.

LANGUAGE: sql
CODE:
create policy "Read access for public avatars."
on storage.objects for select using (
	bucket_id = 'avatars'
	and (storage.foldername(name))[1] = 'public'
);

----------------------------------------

TITLE: Configuring Docker Daemon for IPv6 Support
DESCRIPTION: JSON configuration for enabling IPv6 support in Docker daemon including fixed CIDR and IP tables settings

LANGUAGE: json
CODE:
"ipv6": true,
"fixed-cidr-v6": "fd00:ffff::/80",
"ip6tables": true,
"experimental": true

----------------------------------------

TITLE: Adding Poetry scripts in pyproject.toml
DESCRIPTION: TOML configuration to add seed and search scripts to the Poetry project.

LANGUAGE: toml
CODE:
[tool.poetry.scripts]
seed = "image_search.main:seed"
search = "image_search.main:search"

----------------------------------------

TITLE: Responsive Carousel Item Sizing
DESCRIPTION: Implementation of responsive sizing for carousel items using utility classes.

LANGUAGE: tsx
CODE:
<Carousel>
  <CarouselContent>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
  </CarouselContent>
</Carousel>

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment configuration file to store Supabase credentials

LANGUAGE: typescript
CODE:
export const environment = {
  production: false,
  supabaseUrl: 'YOUR_SUPABASE_URL',
  supabaseKey: 'YOUR_SUPABASE_KEY',
}

----------------------------------------

TITLE: Updating createClient configuration in TypeScript
DESCRIPTION: Example of how to update the createClient configuration when upgrading from v1 to v2. The new version uses more explicit constructor options.

LANGUAGE: typescript
CODE:
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  db: {
    schema: 'custom',
  },
  auth: {
    persistSession: true,
  },
})

----------------------------------------

TITLE: Demonstrating PostgreSQL Reserved Role Protection
DESCRIPTION: SQL example showing how PostgreSQL prevents modification of predefined roles prefixed with 'pg_'.

LANGUAGE: sql
CODE:
alter role pg_monitor createdb;
ERROR:  role name "pg_monitor" is reserved
DETAIL:  Cannot alter reserved roles.

----------------------------------------

TITLE: Creating New Flutter Project
DESCRIPTION: Command to create a new Flutter project.

LANGUAGE: bash
CODE:
flutter create myauthapp

----------------------------------------

TITLE: Configuring Supabase AI Assistant
DESCRIPTION: Example of configuring the Supabase AI Assistant by adding an OpenAI API key to the docker-compose.yml file.

LANGUAGE: yaml
CODE:
services:
  studio:
    image: supabase/studio
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}

----------------------------------------

TITLE: Sample HTML Iframe Implementation
DESCRIPTION: Example of embedding a YouTube video within an iframe element with specific attributes and permissions.

LANGUAGE: html
CODE:
<iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/ooWaPVvljlU"
    title="I gave AI full control over my database"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowfullscreen
/>

----------------------------------------

TITLE: Edge Function for Route Calculation
DESCRIPTION: TypeScript implementation of a Supabase Edge Function that calls Google Maps Routes API to calculate ride paths.

LANGUAGE: typescript
CODE:
type Coordinates = {
  latitude: number
  longitude: number
}

Deno.serve(async (req) => {
  const {
    origin,
    destination,
  }: {
    origin: Coordinates
    destination: Coordinates
  } = await req.json()

  const response = await fetch(
    `https://routes.googleapis.com/directions/v2:computeRoutes?key=${Deno.env.get(
      'GOOGLE_MAPS_API_KEY'
    )}`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-FieldMask':
          'routes.duration,routes.distanceMeters,routes.polyline,routes.legs.polyline',
      },
      body: JSON.stringify({
        origin: { location: { latLng: origin } },
        destination: { location: { latLng: destination } },
        travelMode: 'DRIVE',
        polylineEncoding: 'GEO_JSON_LINESTRING',
      }),
    }
  )

  if (!response.ok) {
    const error = await response.json()
    console.error({ error })
    throw new Error(`HTTP error! status: ${response.status}`)
  }

  const data = await response.json()

  const res = data.routes[0]

  return new Response(JSON.stringify(res), { headers: { 'Content-Type': 'application/json' } })
})

----------------------------------------

TITLE: Installing Dependencies for Supabase
DESCRIPTION: Commands for installing project dependencies and setting up the environment file for local development.

LANGUAGE: sh
CODE:
pnpm install
cp apps/www/.env.local.example apps/www/.env.local
pnpm dev

----------------------------------------

TITLE: Implementing Realtime Listeners in Python
DESCRIPTION: Python implementation showing how to initialize Supabase client and subscribe to real-time INSERT events on a todos table using async/await pattern.

LANGUAGE: python
CODE:
# Initialize the Python client
from supabase import create_client, Client

supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# Create a function to handle inserts
def handle_inserts(payload):
  print("Change received", payload)

# Listen to inserts
await supabase.channel("todos").on_postgres_changes(
    "INSERT", schema="public", table="todos", callback=handle_inserts
).subscribe()

----------------------------------------

TITLE: Creating Real Index Based on HypoPG Analysis
DESCRIPTION: SQL command to create a real index on the 'account' table based on the analysis from HypoPG.

LANGUAGE: sql
CODE:
create index on account(id);

----------------------------------------

TITLE: Creating a Supabase Project via CLI
DESCRIPTION: New CLI command to create a Supabase project directly from the command line, enabling easier project setup and management.

LANGUAGE: bash
CODE:
supabase projects create

----------------------------------------

TITLE: Rendering Migration Guide Links with IconPanel Component
DESCRIPTION: JSX code for rendering a grid of migration guide links using an IconPanel component. Maps through an array of product objects to create navigation links with icons, titles, and descriptions.

LANGUAGE: JSX
CODE:
[{
  title: 'Auth0',
  icon: '/docs/img/icons/auth0-icon',
  href: '/guides/resources/migrating-to-supabase/auth0',
  description: 'Move your auth users from Auth0 to a Supabase project.',
  hasLightIcon: true,
},
// ... additional items ...
].map((product) => {
  return (
    <Link
      href={`${product.href}`}
      key={product.title}
      className={product.span ?? 'col-span-6 md:col-span-3'}
      passHref
    >
      <IconPanel {...product} background={true} showIconBg={true} showLink={true}>
        {product.description}
      </IconPanel>
    </Link>
  )
})

----------------------------------------

TITLE: Setting Up Docker for Supabase Studio
DESCRIPTION: Instructions for setting up and running Docker containers for Supabase Studio local development.

LANGUAGE: sh
CODE:
cd docker
cp .env.example .env
docker compose up

----------------------------------------

TITLE: Multi-Select Tree View Configuration
DESCRIPTION: Configuration for enabling multi-select functionality in the tree view with exclusive select action.

LANGUAGE: tsx
CODE:
<TreeView
  data={flattenTree(args.data)}
  aria-label="directory tree"
  multiSelect
  togglableSelect
  clickAction="EXCLUSIVE_SELECT"
  // other options...
/>

----------------------------------------

TITLE: Setting Environment Variables for Llamafile Server
DESCRIPTION: Environment variable configuration for connecting to the Llamafile server in Supabase Edge Functions.

LANGUAGE: plaintext
CODE:
AI_INFERENCE_API_HOST=http://host.docker.internal:8080

----------------------------------------

TITLE: Configuring Supabase Edge Function Settings in TOML
DESCRIPTION: This TOML configuration snippet demonstrates how to set individual function settings, such as JWT verification, using the config.toml file. This allows for fine-grained control over function behavior during deployment.

LANGUAGE: toml
CODE:
[functions.hello-world]
verify_jwt = false

----------------------------------------

TITLE: Creating and Populating Float16 Vector Table
DESCRIPTION: Demonstrates how to create a table with float16 vectors and copy data from an existing float32 table, reducing memory usage by 50%.

LANGUAGE: sql
CODE:
create table embedding_half (
  id serial,
  vector halfvec(1536),
  primary key (id)
);

insert into embedding_half (vector)
select
  vector::halfvec(1536)
from
  embedding_full;

----------------------------------------

TITLE: Creating a Complete Bar Chart with Recharts and Custom Components
DESCRIPTION: This example shows how to create a full-featured bar chart with grid, axis, tooltip, and legend using Recharts and custom UI components. It demonstrates the composition of various chart elements.

LANGUAGE: tsx
CODE:
import { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from '@/components/ui/chart'

<ChartContainer config={chartConfig} className="h-[200px] w-full">
  <BarChart accessibilityLayer data={chartData}>
    <CartesianGrid vertical={false} />
    <XAxis
      dataKey="month"
      tickLine={false}
      tickMargin={10}
      axisLine={false}
      tickFormatter={(value) => value.slice(0, 3)}
    />
    <ChartTooltip content={<ChartTooltipContent />} />
    <ChartLegend content={<ChartLegendContent />} />
    <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
    <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
  </BarChart>
</ChartContainer>

----------------------------------------

TITLE: Signing Out Users in Dart with Supabase Auth
DESCRIPTION: This snippet shows how to sign out a user using the Supabase Dart client library. It defines an async function that calls the signOut method from the auth module.

LANGUAGE: dart
CODE:
Future<void> signOut() async {
   await supabase.auth.signOut();
}

----------------------------------------

TITLE: Creating a Row-Level Security Policy in PostgreSQL
DESCRIPTION: Illustrates how to create a Row-Level Security (RLS) policy that restricts users to only insert their own messages, using Supabase's auth.uid() function to identify the current user.

LANGUAGE: sql
CODE:
CREATE POLICY "Individuals can only write their own messages." ON messages FOR
    INSERT WITH CHECK ((select auth.uid()) = user_id);

----------------------------------------

TITLE: Adding Dark Supabase Badge (HTML)
DESCRIPTION: HTML code for adding a dark-themed 'Made with Supabase' badge to your web project.

LANGUAGE: html
CODE:
<a href="https://supabase.com">
  <img
    width="168"
    height="30"
    src="https://supabase.com/badge-made-with-supabase-dark.svg"
    alt="Made with Supabase"
  />
</a>

----------------------------------------

TITLE: Custom Separator in Breadcrumb
DESCRIPTION: Demonstrates how to use a custom icon component as a separator in the breadcrumb.

LANGUAGE: tsx
CODE:
import { Slash } from "lucide-react"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator>
      <Slash />
    </BreadcrumbSeparator>
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>

----------------------------------------

TITLE: Implementing Inner Product Search with pgvector in PGlite
DESCRIPTION: Define a function to perform inner product search using pgvector in PGlite, with parameters for embedding, match threshold, and result limit.

LANGUAGE: javascript
CODE:
export const search = async (db, embedding, match_threshold = 0.8, limit = 3) => {
  const res = await db.query(
    `
    select * from embeddings

    -- The inner product is negative, so we negate match_threshold
    where embeddings.embedding <#> $1 < $2

    -- Our embeddings are normalized to length 1, so cosine similarity
    -- and inner product will produce the same query results.
    -- Using inner product which can be computed faster.
    --
    -- For the different distance functions, see https://github.com/pgvector/pgvector
    order by embeddings.embedding <#> $1
    limit $3;
    `,
    [JSON.stringify(embedding), -Number(match_threshold), Number(limit)]
  )
  return res.rows
}

----------------------------------------

TITLE: Self-Hosting Supabase Setup
DESCRIPTION: Commands for ejecting Supabase configuration for self-hosting and starting the stack with Docker Compose.

LANGUAGE: bash
CODE:
supabase eject

docker compose up

----------------------------------------

TITLE: Configuring Prisma Connection for Server-based Deployments
DESCRIPTION: Example of setting up the DATABASE_URL environment variable for server-based deployments using Supavisor Session Mode.

LANGUAGE: text
CODE:
# Used for Prisma Migrations and within your application
DATABASE_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@[DB-REGION].pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Configuring Prisma Connection for Server-based Deployments
DESCRIPTION: Example of setting up the DATABASE_URL environment variable for server-based deployments using Supavisor Session Mode.

LANGUAGE: text
CODE:
# Used for Prisma Migrations and within your application
DATABASE_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@[DB-REGION].pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Legacy Error Handling in Supabase.js
DESCRIPTION: Previous implementation of error handling using try-catch blocks in Supabase.js pre-v1.0

LANGUAGE: javascript
CODE:
try {
  const { body } = supabase.from('todos').select('*')
} catch (error) {
  console.log(error)
}

----------------------------------------

TITLE: Custom JWT Claims with Postgres Auth Hook
DESCRIPTION: Implements a Postgres function as an Auth Hook to add custom claims (user level) to the JWT access token.

LANGUAGE: sql
CODE:
create function custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
declare
  user_level jsonb;
begin
  -- fetch the current user's level
  select
    to_jsonb(level) into user_level
  from profiles
  where
    user_id = event->>'user_id'::uuid;

  -- change the event.claims.level
  return jsonb_set(
		event,
		'{claims,level}',
		user_level);

end;
$$

----------------------------------------

TITLE: Supabase Database Connection String Example
DESCRIPTION: This snippet shows an example of a Supabase database connection string, which uses an IPv6 address by default.

LANGUAGE: sh
CODE:
postgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres

----------------------------------------

TITLE: Configuring GitHub Actions for Embeddings Generation
DESCRIPTION: GitHub Actions workflow configuration for automatically generating and updating embeddings from documentation markdown files using Supabase's embeddings generator.

LANGUAGE: yaml
CODE:
name: 'generate_embeddings'
on: # run on main branch changes
  push:
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: supabase/embeddings-generator@v0.0.x # Update this to the latest version.
        with:
          supabase-url: 'https://your-project-ref.supabase.co' # Update this to your project URL.
          supabase-service-role-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          openai-key: ${{ secrets.OPENAI_API_KEY }}
          docs-root-path: 'docs' # the path to the root of your md(x) files

----------------------------------------

TITLE: Using Collapsible Component in React
DESCRIPTION: Demonstration of how to use the Collapsible component in a React application, including the trigger and content elements.

LANGUAGE: tsx
CODE:
<Collapsible>
  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>
  <CollapsibleContent>
    Yes. Free to use for personal and commercial projects. No attribution required.
  </CollapsibleContent>
</Collapsible>

----------------------------------------

TITLE: Implementing Avatar Upload Component
DESCRIPTION: Svelte component for handling profile photo uploads using Supabase Storage.

LANGUAGE: html
CODE:
<script lang="ts">
  import { createEventDispatcher } from 'svelte'
  import { supabase } from '../supabaseClient'

  export let size: number
  export let url: string | null = null

  let avatarUrl: string | null = null
  let uploading = false
  let files: FileList

  const dispatch = createEventDispatcher()

  const downloadImage = async (path: string) => {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)

      if (error) {
        throw error
      }

      const url = URL.createObjectURL(data)
      avatarUrl = url
    } catch (error) {
      if (error instanceof Error) {
        console.log('Error downloading image: ', error.message)
      }
    }
  }

  const uploadAvatar = async () => {
    try {
      uploading = true

      if (!files || files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = files[0]
      const fileExt = file.name.split('.').pop()
      const filePath = `${Math.random()}.${fileExt}`

      const { error } = await supabase.storage.from('avatars').upload(filePath, file)

      if (error) {
        throw error
      }

      url = filePath
      dispatch('upload')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      uploading = false
    }
  }

  $: if (url) downloadImage(url)
</script>

----------------------------------------

TITLE: Joining a Private Realtime Channel in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to join a private Realtime Channel with the 'private' option set to true and handle subscription status.

LANGUAGE: javascript
CODE:
const channel = supabase.channel('room-1', {
  config: { private: true },
})

channel
  .on('broadcast', { event: 'test' }, (payload) => console.log(payload))
  .subscribe((status, err) => {
    if (status === 'SUBSCRIBED') {
      console.log('Connected!')
    } else {
      console.error(err)
    }
  })

----------------------------------------

TITLE: Installing supabase-js v2
DESCRIPTION: Command to install the latest version of supabase-js v2 using npm.

LANGUAGE: shell
CODE:
npm install @supabase/supabase-js@2

----------------------------------------

TITLE: Creating Database Tables Schema
DESCRIPTION: SQL to create profiles and messages tables with relationships and constraints

LANGUAGE: sql
CODE:
create table if not exists public.profiles (
    id uuid references auth.users on delete cascade not null primary key,
    username varchar(24) not null unique,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,

    -- username should be 3 to 24 characters long containing alphabets, numbers and underscores
    constraint username_validation check (username ~* '^[A-Za-z0-9_]{3,24}$')
);
comment on table public.profiles is 'Holds all of users profile information';

create table if not exists public.messages (
    id uuid not null primary key default gen_random_uuid(),
    profile_id uuid default auth.uid() references public.profiles(id) on delete cascade not null,
    content varchar(500) not null,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null
);
comment on table public.messages is 'Holds individual messages sent on the app.';

----------------------------------------

TITLE: Correct SVG Icon Implementation
DESCRIPTION: Example of a properly structured SVG icon with styling attributes defined at the parent level for better React component control.

LANGUAGE: svg
CODE:
<svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    stroke="currentColor"
    stroke-width="1"
    stroke-linecap="round"
    stroke-linejoin="round"
    >
        <path d="M-20439 -11141C-20439..." />
        <path d="M-20437 -11142H12131V-11144H-20437V-11142ZM12132 ...." />
        <path d="M22.8437 8.69499L19.5369 12.0018L22.8438 15.3086..." />
        <rect x="0.5" y="14.0625" width="16" height="8" rx="1" />
        <rect x="0.5" y="1.9375" width="16" height="8" rx="1" />
</svg>

----------------------------------------

TITLE: Building Icons Package Command
DESCRIPTION: Command to build and update icons in the package, which processes raw icons and updates import paths.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Running Laravel Database Migrations
DESCRIPTION: Execute Laravel's database migrations to set up the required tables for authentication and user management.

LANGUAGE: bash
CODE:
php artisan migrate

----------------------------------------

TITLE: Importing Tree View Components
DESCRIPTION: Basic imports required for using the Tree View component from the UI library and react-accessible-treeview.

LANGUAGE: tsx
CODE:
import { TreeView, TreeViewItem } from 'ui'
import { flattenTree } from 'react-accessible-treeview'

----------------------------------------

TITLE: Exposing Postgres Database in Docker Compose
DESCRIPTION: Example of exposing the Postgres database by updating the docker-compose.yml file to comment out Supavisor and expose the database port.

LANGUAGE: yaml
CODE:
# Comment or remove the supavisor section of the docker-compose file
#  supavisor:
#    ports:
# ...
db:
  ports:
    - ${POSTGRES_PORT}:${POSTGRES_PORT}

----------------------------------------

TITLE: Initializing Supabase in Flutter App
DESCRIPTION: Set up Supabase client and initialize the app in main.dart.

LANGUAGE: dart
CODE:
import 'package:canvas/canvas/canvas_page.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Figma Clone',
      debugShowCheckedModeBanner: false,
      home: CanvasPage(),
    );
  }
}

----------------------------------------

TITLE: Embedded YouTube Video iFrame in Markdown
DESCRIPTION: HTML iframe code embedded in markdown to display the hackathon video announcement

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/AazB9mQetkw"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Querying Postgres Log Settings in SQL
DESCRIPTION: This SQL query retrieves all log-related settings from the pg_settings table in Postgres, focusing on reporting, logging, and customized options.

LANGUAGE: sql
CODE:
-- view all log related settings
select *
from pg_settings
where
  (
    category like 'Reporting and Logging / What to Log'
    or category like 'Reporting and Logging / When to Log'
    or category = 'Customized Options'
  )
  and name like '%log%';

----------------------------------------

TITLE: Configuring WAL-G Environment Variables
DESCRIPTION: Shell commands to create and populate environment variable files for WAL-G configuration, including AWS credentials and backup location.

LANGUAGE: shell
CODE:
$ umask u=rwx,g=rx,o=
$ mkdir -p /etc/wal-g.d/env
$ echo 'secret-key-content' > /etc/wal-g.d/env/AWS_SECRET_ACCESS_KEY
$ echo 'access-key' > /etc/wal-g.d/env/AWS_ACCESS_KEY_ID
$ echo 's3://backup-bucket/project-directory' > /etc/wal-g.d/env/WALG_S3_PREFIX
$ echo 'db password' > /etc/wal-g.d/env/PGPASSWORD
$ chown -R root:postgres /etc/wal-g.d

----------------------------------------

TITLE: Setting Environment Variables for Supabase Datastore
DESCRIPTION: Bash commands to export the necessary environment variables for using Supabase as the datastore for the ChatGPT Retrieval Plugin.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=<open_ai_api_key>
export DATASTORE=supabase
export SUPABASE_URL=<supabase_url>
export SUPABASE_SERVICE_ROLE_KEY=<supabase_key>

----------------------------------------

TITLE: Adding Filtering to DataTable with TanStack Table
DESCRIPTION: Implements filtering functionality in the DataTable component using TanStack Table's filtering features.

LANGUAGE: tsx
CODE:
import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Input } from "@/components/ui/input"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      <div className="rounded-md border">
        <Table>{ /* ... */ }</Table>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Running Supabase SolidJS Project in Development Mode
DESCRIPTION: Commands to run the application in development mode, which will start the app and make it accessible at http://localhost:3000.

LANGUAGE: bash
CODE:
npm dev

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Complete Email Workflow Configuration
DESCRIPTION: Full YAML configuration combining all workflow components for handling database inserts, waiting, and sending emails.

LANGUAGE: yaml
CODE:
---
Comment: Email users after one day
StartAt: EmailUsers
States:
  EmailUsers:
    Type: Map
    End: true
    InputPath: '$.changes'
    Iterator:
      StartAt: CheckInsert
      States:
        CheckInsert:
          Type: Choice
          Default: Complete
          Choices:
            - Variable: '$.type'
              StringEquals: INSERT
              Next: WaitOneDay
        WaitOneDay:
          Type: Wait
          Next: SendEmail
          Seconds: 86400
        SendEmail:
          Type: Task
          Next: Complete
          Resource: send-templated-email
          Parameters:
            api_key: my-api-key
            template_id: welcome-email
            payload:
              name.$: '$.record.name'
              email.$: '$.record.email'
        Complete:
          Type: Succeed

----------------------------------------

TITLE: Configuring Environment Variables for Database Connection
DESCRIPTION: Setup of environment variables required for database connection including hostname, password and SSL certificate.

LANGUAGE: bash
CODE:
DB_HOSTNAME=
DB_PASSWORD=
DB_SSL_CERT="-----BEGIN CERTIFICATE-----
GET YOUR CERT FROM YOUR PROJECT DASHBOARD
-----END CERTIFICATE-----"

----------------------------------------

TITLE: Custom Image Loader for Supabase Storage in Next.js
DESCRIPTION: Implementation of a custom image loader for Next.js to handle Supabase Storage images with transformation parameters

LANGUAGE: typescript
CODE:
export default function supabaseLoader({ src, width, quality }) {
  return `${env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${src}?width=${width}&quality=${quality || 75}`
}

----------------------------------------

TITLE: Integrating Toaster Component in Root Layout
DESCRIPTION: Shows how to add the Toaster component to the root layout file of a Next.js application for global toast functionality.

LANGUAGE: tsx
CODE:
import { Toaster } from '@/components/ui/sonner'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Using Toggle Group Component in React
DESCRIPTION: Example of how to use the Toggle Group component with multiple ToggleGroupItem elements in a React application.

LANGUAGE: tsx
CODE:
<ToggleGroup type="single">
  <ToggleGroupItem value="a">A</ToggleGroupItem>
  <ToggleGroupItem value="b">B</ToggleGroupItem>
  <ToggleGroupItem value="c">C</ToggleGroupItem>
</ToggleGroup>

----------------------------------------

TITLE: Running Supabase Script with Deno
DESCRIPTION: This command runs the main.ts file containing Supabase client code using Deno with all permissions.

LANGUAGE: bash
CODE:
deno run -A main.ts

----------------------------------------

TITLE: Supabase Studio Tech Stack Configuration
DESCRIPTION: Core technologies and dependencies used in Supabase Studio implementation, including Next.js for frontend framework, Tailwind for CSS, Supabase UI for components, and MobX for state management.

LANGUAGE: javascript
CODE:
{
  "dependencies": {
    "next": "^12.0.0",
    "tailwindcss": "^2.0.0",
    "@supabase/ui": "^0.36.0",
    "mobx": "^6.0.0",
    "@radix-ui/react": "^0.1.0",
    "lottie-web": "^5.7.0",
    "react-grid-layout": "^1.2.0",
    "zxcvbn": "^4.4.2"
  }
}

----------------------------------------

TITLE: AWS Bedrock Client Configuration
DESCRIPTION: Initializing the boto3 client for Amazon Bedrock with AWS credentials

LANGUAGE: python
CODE:
bedrock_client = boto3.client(
    'bedrock-runtime',
    region_name='us-west-2',
    aws_access_key_id='<replace_your_own_credentials>',
    aws_secret_access_key='<replace_your_own_credentials>',
    aws_session_token='<replace_your_own_credentials>',
)

----------------------------------------

TITLE: Implementing OAuth and magic link authentication in React Native
DESCRIPTION: Creates a React Native component for handling OAuth and magic link authentication flows using Supabase.

LANGUAGE: tsx
CODE:
import { Button } from 'react-native'
import { makeRedirectUri } from 'expo-auth-session'
import * as QueryParams from 'expo-auth-session/build/QueryParams'
import * as WebBrowser from 'expo-web-browser'
import * as Linking from 'expo-linking'
import { supabase } from 'app/utils/supabase'

WebBrowser.maybeCompleteAuthSession() // required for web only
const redirectTo = makeRedirectUri()

const createSessionFromUrl = async (url: string) => {
  const { params, errorCode } = QueryParams.getQueryParams(url)

  if (errorCode) throw new Error(errorCode)
  const { access_token, refresh_token } = params

  if (!access_token) return

  const { data, error } = await supabase.auth.setSession({
    access_token,
    refresh_token,
  })
  if (error) throw error
  return data.session
}

const performOAuth = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
    options: {
      redirectTo,
      skipBrowserRedirect: true,
    },
  })
  if (error) throw error

  const res = await WebBrowser.openAuthSessionAsync(data?.url ?? '', redirectTo)

  if (res.type === 'success') {
    const { url } = res
    await createSessionFromUrl(url)
  }
}

const sendMagicLink = async () => {
  const { error } = await supabase.auth.signInWithOtp({
    email: 'example@email.com',
    options: {
      emailRedirectTo: redirectTo,
    },
  })

  if (error) throw error
  // Email sent.
}

export default function Auth() {
  // Handle linking into app from email app.
  const url = Linking.useURL()
  if (url) createSessionFromUrl(url)

  return (
    <>
      <Button onPress={performOAuth} title="Sign in with Github" />
      <Button onPress={sendMagicLink} title="Send Magic Link" />
    </>
  )
}

----------------------------------------

TITLE: Implementing RLS Policies for Document Access
DESCRIPTION: SQL commands to enable and configure Row Level Security policies for controlling access to document sections based on document ownership.

LANGUAGE: sql
CODE:
alter table document_sections enable row level security;

create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from documents
    where (owner_id = (select auth.uid()))
  )
);

----------------------------------------

TITLE: Importing Scroll Area Component in React
DESCRIPTION: Example of how to import the Scroll Area component in a React file.

LANGUAGE: tsx
CODE:
import { ScrollArea } from '@/components/ui/scroll-area'

----------------------------------------

TITLE: Creating Supabase Server Utility for Server Components
DESCRIPTION: Utility function to create a Supabase client for use in server-side components, including cookie management.

LANGUAGE: javascript
CODE:
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}

----------------------------------------

TITLE: RLS USING Clause Implementation
DESCRIPTION: Shows how RLS USING clause modifies the WHERE condition by adding additional security checks to the query.

LANGUAGE: sql
CODE:
SELECT * FROM some_table
WHERE
  (id = 5 OR id = 6)
    AND
  (select auth.uid()) = user_id) -- <--- added by the USING clause;

----------------------------------------

TITLE: Installing Supabase Auth Helpers for Next.js
DESCRIPTION: New npm packages for Supabase Auth Helpers, separated into framework-specific utilities for easier installation and use in Next.js projects.

LANGUAGE: bash
CODE:
npm install @supabase/auth-helpers-nextjs @supabase/auth-helpers-react

----------------------------------------

TITLE: GraphQL Query for Account Search
DESCRIPTION: Example of querying the accountsByEmailDomain function with pagination parameters.

LANGUAGE: graphql
CODE:
query {
  accountsByEmailDomain(domainToSearch: "foo.com", first: 2) {
    edges {
      node {
        id
        email
      }
    }
  }
}

----------------------------------------

TITLE: Single File Upload Using S3 PutObject in JavaScript
DESCRIPTION: Demonstrates how to upload a single file to Supabase Storage using the AWS SDK S3 client's PutObject command. This method is suitable for smaller files up to 50GB on paid plans.

LANGUAGE: javascript
CODE:
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'

const s3Client = new S3Client({...})

const file = fs.createReadStream('path/to/file')

const uploadCommand = new PutObjectCommand({
  Bucket: 'bucket-name',
  Key: 'path/to/file',
  Body: file,
  ContentType: 'image/jpeg',
})

await s3Client.send(uploadCommand)

----------------------------------------

TITLE: Initializing Database Tables and Security Policies in SQL
DESCRIPTION: SQL queries to create the initial database structure including boards, lists, cards and user tables along with row level security policies

LANGUAGE: sql
CODE:
drop table if exists user_boards;
drop table if exists cards;
drop table if exists lists;
drop table if exists boards;
drop table if exists users;

-- Create boards table
create table boards (
  id bigint generated by default as identity primary key,
  creator uuid references auth.users not null default auth.uid(),
  title text default 'Untitled Board',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
...

----------------------------------------

TITLE: Checking IPv6 Compatibility
DESCRIPTION: cURL command to verify IPv6 network compatibility for direct database connections.

LANGUAGE: bash
CODE:
curl -6 https://ifconfig.co/ip

----------------------------------------

TITLE: Embedding Video Demo iFrame in HTML
DESCRIPTION: HTML iframe code for embedding a Loom video demonstration of Supabase features in a responsive container.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.loom.com/embed/b3ba79c1633d464ea758e0796bbb39da"
    frameBorder="0"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Basic Sidebar Implementation
DESCRIPTION: Example of implementing a basic sidebar with header, content and footer sections

LANGUAGE: tsx
CODE:
import { Sidebar, SidebarContent, SidebarHeader, SidebarFooter } from '@/components/ui/sidebar'

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent />
      <SidebarFooter />
    </Sidebar>
  )
}

----------------------------------------

TITLE: Installing Sheet Dependencies Manually
DESCRIPTION: Command to manually install the required Radix UI Dialog dependency

LANGUAGE: bash
CODE:
npm install @radix-ui/react-dialog

----------------------------------------

TITLE: Running Vite Dev Server with npm
DESCRIPTION: Bash command to start the Vite development server for the Hono project.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Implementing Email Task in YAML Workflow
DESCRIPTION: YAML configuration for a workflow task that sends an email using a template service with dynamic parameters from the database record.

LANGUAGE: yaml
CODE:
SendEmail:
  Type: Task
  Next: Complete
  Resource: my-email-service
  Parameters:
    api_key: my-api-key
    template_id: welcome-email
    payload:
      name.$: '$.record.name'
      email.$: '$.record.email'

----------------------------------------

TITLE: Running Supabase Bootstrap CLI
DESCRIPTION: The basic command to launch the Supabase bootstrap CLI. This can be run using npx without installing the CLI globally.

LANGUAGE: bash
CODE:
npx supabase bootstrap

----------------------------------------

TITLE: Implementing Kysely Query Execution with HTTP Server
DESCRIPTION: HTTP server implementation that uses Kysely to execute type-safe database queries. Includes database connection setup, type definitions, and request handling.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.175.0/http/server.ts'
import { Pool } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'
import {
  Kysely,
  Generated,
  PostgresAdapter,
  PostgresIntrospector,
  PostgresQueryCompiler,
} from 'https://esm.sh/kysely@0.23.4'
import { PostgresDriver } from './DenoPostgresDriver.ts'

console.log(`Function "kysely-postgres" up and running!`)

interface AnimalTable {
  id: Generated<bigint>
  animal: string
  created_at: Date
}

interface Database {
  animals: AnimalTable
}

const pool = new Pool(
  {
    tls: { caCertificates: [Deno.env.get('DB_SSL_CERT')!] },
    database: 'postgres',
    hostname: Deno.env.get('DB_HOSTNAME'),
    user: 'postgres',
    port: 5432,
    password: Deno.env.get('DB_PASSWORD'),
  },
  1
)

const db = new Kysely<Database>({
  dialect: {
    createAdapter() {
      return new PostgresAdapter()
    },
    createDriver() {
      return new PostgresDriver({ pool })
    },
    createIntrospector(db: Kysely<unknown>) {
      return new PostgresIntrospector(db)
    },
    createQueryCompiler() {
      return new PostgresQueryCompiler()
    },
  },
})

serve(async (_req) => {
  try {
    const animals = await db.selectFrom('animals').select(['id', 'animal', 'created_at']).execute()

    console.log(animals[0].created_at.getFullYear())

    const body = JSON.stringify(
      animals,
      (key, value) => (typeof value === 'bigint' ? value.toString() : value),
      2
    )

    return new Response(body, {
      status: 200,
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
      },
    })
  } catch (err) {
    console.error(err)
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})

----------------------------------------

TITLE: Installing vec2pg via pip
DESCRIPTION: Shows the command to install the vec2pg tool using pip package manager.

LANGUAGE: bash
CODE:
pip install vec2pg

----------------------------------------

TITLE: Tailwind Configuration for Sidebar
DESCRIPTION: Tailwind CSS configuration required for sidebar styling utilities

LANGUAGE: javascript
CODE:
sidebar: {
  DEFAULT: 'hsl(var(--sidebar-background))',
  foreground: 'hsl(var(--sidebar-foreground))',
  primary: 'hsl(var(--sidebar-primary))',
  'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  accent: 'hsl(var(--sidebar-accent))',
  'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  border: 'hsl(var(--sidebar-border))',
  ring: 'hsl(var(--sidebar-ring))',
}

----------------------------------------

TITLE: Returning an Error from an Auth Hook
DESCRIPTION: Example of how to structure an error response from an Auth Hook, including HTTP code and error message.

LANGUAGE: json
CODE:
{
  "error": {
    "http_code": 429,
    "message": "You can only verify a factor once every 10 seconds."
  }
}

----------------------------------------

TITLE: Automatic Content Type Detection for Edge Functions
DESCRIPTION: This snippet shows how supabase-js v2 automatically detects the content type for request/response bodies in Edge Function invocations, simplifying the process of calling functions.

LANGUAGE: typescript
CODE:
const { data: user, error } = await supabase.functions.invoke('hello', {
  body: { foo: 'bar' },
})

----------------------------------------

TITLE: Installing Radix UI Toggle Package
DESCRIPTION: Command to install the required Radix UI toggle dependency using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-toggle

----------------------------------------

TITLE: Setting Up Supabase Database for Figma Clone
DESCRIPTION: SQL commands to create the canvas_objects table and set up Row Level Security policies.

LANGUAGE: sql
CODE:
create table canvas_objects (
    id uuid primary key default gen_random_uuid() not null,
    "object" jsonb not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table canvas_objects enable row level security;
create policy select_canvas_objects on canvas_objects as permissive for select to anon using (true);
create policy insert_canvas_objects on canvas_objects as permissive for insert to anon with check (true);
create policy update_canvas_objects on canvas_objects as permissive for update to anon using (true);

----------------------------------------

TITLE: Configuring Image Grid Layout in Markdown
DESCRIPTION: React/JSX component implementation for displaying a responsive grid of company logos using ImageGrid component with configurable column layouts for different screen sizes.

LANGUAGE: jsx
CODE:
<ImageGrid
  smCols={3}
  mdCols={4}
  lgCols={4}
  images={[
    {
      name: 'wells-fargo',
      image: '/images/company/companies-using-supabase/wells-fargo.png',
    },
    // Additional image entries...
  ]}
/>

----------------------------------------

TITLE: Calling a Stored Function using Supabase RPC in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to call the stored function 'get_my_complex_query' using the supabase.rpc method. It includes error handling and a placeholder for response processing.

LANGUAGE: javascript
CODE:
supabase.rpc("get_my_complex_query", { parameter: 1 })
  .then(response => {
    // Handle the response
  })
  .catch(error => {
    // Handle errors
  });

----------------------------------------

TITLE: Clearing Webhook Queue in Supabase
DESCRIPTION: SQL command to truncate the webhook request queue table when experiencing high IO load from webhook processing.

LANGUAGE: sql
CODE:
TRUNCATE net.http_request_queue;

----------------------------------------

TITLE: Video Player Implementation in React/JSX
DESCRIPTION: React component for displaying a video player with autoplay and loop functionality, sourcing content from Supabase storage.

LANGUAGE: jsx
CODE:
<video width="99%" autoPlay loop muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/lw8/supabase-ai.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Implementing LinkedIn OAuth Sign In - Kotlin
DESCRIPTION: Kotlin implementation for signing in users with LinkedIn OAuth through Supabase authentication.

LANGUAGE: kotlin
CODE:
suspend fun signInWithKaLinkedIn() {
	supabase.auth.signInWith(LinkedIn)
}

----------------------------------------

TITLE: Connecting to Supabase Database with Vecs in Python
DESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a vector store client.

LANGUAGE: python
CODE:
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

----------------------------------------

TITLE: Installing Scroll Area Component Dependencies Manually
DESCRIPTION: Command to install the required dependency for the Scroll Area component manually using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-scroll-area

----------------------------------------

TITLE: Configuring Deep Linking for macOS in Flutter
DESCRIPTION: This XML snippet shows how to configure custom URL schemes for deep linking in a macOS app using Flutter by modifying the Info.plist file.

LANGUAGE: xml
CODE:
<!-- ... other tags -->
<plist version="1.0">
<dict>
  <!-- ... other tags -->
  <key>CFBundleURLTypes</key>
  <array>
      <dict>
          <key>CFBundleURLName</key>
          <!-- abstract name for this URL type (you can leave it blank) -->
          <string>sample_name</string>
          <key>CFBundleURLSchemes</key>
          <array>
              <!-- your schemes -->
              <string>sample</string>
          </array>
      </dict>
  </array>
  <!-- ... other tags -->
</dict>
</plist>

----------------------------------------

TITLE: Configuring App Routing Module in Ionic Angular
DESCRIPTION: Set up the AppRoutingModule to define routes for the login and account pages.

LANGUAGE: typescript
CODE:
import { NgModule } from '@angular/core'
import { PreloadAllModules, RouterModule, Routes } from '@angular/router'

const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./login/login.module').then((m) => m.LoginPageModule),
  },
  {
    path: 'account',
    loadChildren: () => import('./account/account.module').then((m) => m.AccountPageModule),
  },
]

@NgModule({
  imports: [
    RouterModule.forRoot(routes, {
      preloadingStrategy: PreloadAllModules,
    }),
  ],
  exports: [RouterModule],
})
export class AppRoutingModule {}

----------------------------------------

TITLE: PostgREST Security Configuration
DESCRIPTION: SQL commands to enable aggregate functions and set security limits using pg_plan_filter_module.

LANGUAGE: sql
CODE:
ALTER ROLE authenticator SET pgrst.db_aggregates_enabled = 'true';
NOTIFY pgrst, 'reload config';

LANGUAGE: sql
CODE:
ALTER USER authenticator SET plan_filter.statement_cost_limit = 1e7;

LANGUAGE: sql
CODE:
-- anonymous users can only run cheap queries
ALTER
  USER anon
SET
  plan_filter.statement_cost_limit = 10000;

-- authenticated users can run more expensive queries
ALTER
  USER authenticated
SET
  plan_filter.statement_cost_limit = 1e6;

----------------------------------------

TITLE: Helper Function for SemVer Validation
DESCRIPTION: Creates a function to validate array elements against regex patterns for pre-release and build metadata components.

LANGUAGE: sql
CODE:
create or replace function semver_elements_match_regex(
    parts text[],
    regex text
)
returns bool
language sql
as $$
    select
        $1 is null
        or (
            (
                select (
                    bool_and(pr_arr.elem is not null)
                    and bool_and(pr_arr.elem ~ $2)
                )
                from
                    unnest($1) pr_arr(elem)
            )
            and array_length($1, 1) > 0
        )
$$;

----------------------------------------

TITLE: Importing Accordion Components
DESCRIPTION: Example of importing the necessary accordion components from the UI component library.

LANGUAGE: tsx
CODE:
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion'

----------------------------------------

TITLE: Deploying Supabase Functions
DESCRIPTION: Command for deploying the lwx-ticket function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy lwx-ticket --no-verify-jwt

----------------------------------------

TITLE: Aggregating JSON Data in PostgreSQL
DESCRIPTION: Demonstrates how to aggregate data from JSONB fields using a CTE (Common Table Expression) and SQL aggregate functions.

LANGUAGE: sql
CODE:
with data as
(
  select
    date,
    (jsonb_array_elements(food_log)->'calories')::integer as calories
  from calendar
  where user_id = 'xyz'
    and date between '2022-01-01' and '2022-01-31'
)
select date, sum(calories)
from data
group by date;

----------------------------------------

TITLE: Uploading NodeJS Stream to Supabase Storage
DESCRIPTION: Demonstrates how to upload a NodeJS readable stream to Supabase Storage using the storage client.

LANGUAGE: javascript
CODE:
import { createReadStream } from 'fs'
import { StorageClient } from '@supabase/storage-js'

const storage = new StorageClient('your-project-url', 'your-api-key')

const file = createReadStream('./path/to/file.mp4')
const { data, error } = await storage
  .from('bucket-name')
  .upload('file.mp4', file)

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Dart
DESCRIPTION: This snippet shows how to upload a file to Supabase Storage using the standard upload method in Dart. It assumes a Supabase client has already been initialized.

LANGUAGE: dart
CODE:
// Upload file using standard upload
Future<void> uploadFile(File file) async {
  await supabase.storage.from('bucket_name').upload('file_path', file);
}

----------------------------------------

TITLE: Defining WatermelonDB Model for Profile
DESCRIPTION: Creates a WatermelonDB model for the 'Profile' entity with associated properties and relationships.

LANGUAGE: typescript
CODE:
import { Model, Q, Relation } from "@nozbe/watermelondb";
import { date, readonly, text } from "@nozbe/watermelondb/decorators";

import { Stack } from "./Stack";

export class Profile extends Model {
static table = "profiles";

@readonly @date("created_at") createdAt!: Date;
@readonly @date("updated_at") updatedAt!: Date;

static associations = {
	["stacks"]: {
		type: "has_many" as const,
		foreignKey: "profile_id",
	}
};

@text("name") name!: string;
@text("website") website!: string;

----------------------------------------

TITLE: Ingesting Search Documents in JavaScript
DESCRIPTION: JavaScript function to ingest search documents into a Postgres database using the slonik library.

LANGUAGE: javascript
CODE:
async function ingest({ document, pool }) {
  if (document.release_date.trim().length === 0) {
    return
  }

  await pool.query(sql`
insert into movies (
	id, 
	title, 
	original_title, 
	overview, 
	released_at
)
values
(
	${document.id},
	${document.title},
	${document.original_title},
	${document.overview},
	${new Date(document.release_date).toISOString()}::timestamptz
)
on conflict (id) do update set
  title=${document.title}, 
	original_title=${document.original_title}, 
	overview=${document.overview}, 
	released_at=${new Date(document.release_date).toISOString()}::timestamptz
;`
)}

----------------------------------------

TITLE: Email Internationalization Implementation
DESCRIPTION: JavaScript implementation for adding multi-language support to email templates.

LANGUAGE: javascript
CODE:
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'

const subjects = {
  en: {...},
  es: {...},
  fr: {...}
};
// ... rest of implementation

----------------------------------------

TITLE: Granting Role Ownership to Postgres in SQL
DESCRIPTION: This SQL command transfers ownership of the specified role to the 'postgres' superuser, which is a necessary step before deletion.

LANGUAGE: sql
CODE:
GRANT <role> TO "postgres";

----------------------------------------

TITLE: MCP Server Configuration for Linux
DESCRIPTION: JSON configuration for setting up MCP server connection on Linux systems using npx to run the Postgres server. Requires connection string to be specified.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "supabase": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres", "<connection-string>"]
    }
  }
}

----------------------------------------

TITLE: Installing Embla Carousel React Dependency
DESCRIPTION: Command to install the required Embla Carousel React dependency using npm.

LANGUAGE: bash
CODE:
npm install embla-carousel-react

----------------------------------------

TITLE: Initializing and Generating Supabase Reference Documentation in Bash
DESCRIPTION: This snippet demonstrates how to initialize the project and generate Supabase reference documentation from spec files using make commands. It first runs 'make init' to install dependencies, then uses 'make' to download and transform specs into documentation.

LANGUAGE: bash
CODE:
make init        # install dependencies

make                # download and transform specs into docs

----------------------------------------

TITLE: Casting HTTP Response to JSON with pg_net
DESCRIPTION: Shows how to cast the response body from a pg_net HTTP request to JSON format within PostgreSQL. This allows for easy manipulation of the response data.

LANGUAGE: sql
CODE:
select
    (response).body::json
from
    net.http_collect_response(request_id:=1);

----------------------------------------

TITLE: Setting Environment Variables for Postgres Datastore
DESCRIPTION: Bash commands to export the necessary environment variables for using Postgres as the datastore for the ChatGPT Retrieval Plugin.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=<open_ai_api_key>
export DATASTORE=postgres
export PG_HOST=<postgres_host_url>
export PG_PASSWORD=<postgres_password>

----------------------------------------

TITLE: pg_repack CLI Syntax for Supabase
DESCRIPTION: Basic syntax for using pg_repack CLI with Supabase. The -k flag is crucial to skip the client-side superuser check, as superuser role is not available in Supabase.

LANGUAGE: sh
CODE:
pg_repack -k [OPTION]... [DBNAME]

----------------------------------------

TITLE: Configuring Supabase client in TypeScript
DESCRIPTION: TypeScript code to set up the Supabase client using environment variables.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)

----------------------------------------

TITLE: Installing Radio Group Component via CLI
DESCRIPTION: Command to install the Radio Group component using the project's CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add radio-group

----------------------------------------

TITLE: Installing Menubar Component via CLI
DESCRIPTION: Command to install the menubar component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add menubar

----------------------------------------

TITLE: Implementing SAML RLS Policy in Postgres
DESCRIPTION: SQL code to create a row-level security policy that restricts user invitations to developers within the same organization using SAML provider ID from JWT claims.

LANGUAGE: sql
CODE:
create policy "Can only invite developers in the same organization"
on invited_users
as restrictive
for insert
with check (
	sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')
);

----------------------------------------

TITLE: Querying Vendor and Product Data in SQL
DESCRIPTION: This SQL query joins the Product and Vendor tables to fetch vendor name, product name, and total employees for vendors with employees. It demonstrates how to create a custom query in Metabase for data visualization.

LANGUAGE: sql
CODE:
select "Vendor".vendor_name, product_name, "Vendor".total_employees
from
  "Product"
  left join "Vendor" on "Product".vendor_id = "Vendor".vendor_id
where "Vendor".total_employees;

----------------------------------------

TITLE: Loading User Data from Supabase
DESCRIPTION: Fetches user data from a Supabase table to populate the particles in the constellation.

LANGUAGE: javascript
CODE:
const [particles, setParticles] = useState([])

const loadUsers = async () => {
  return await supabase.from('lw8_tickets').select('*')
}

useEffect(() => {
  const { data: users } = loadUsers()
  setParticles(users)
}, [])

----------------------------------------

TITLE: Running React App in Development Mode
DESCRIPTION: This command starts the React application in development mode, allowing for real-time reloading and displaying lint errors in the console.

LANGUAGE: shell
CODE:
npm start

----------------------------------------

TITLE: Importing Label Component in React
DESCRIPTION: This snippet shows how to import the Label component from the UI components library.

LANGUAGE: tsx
CODE:
import { Label_Shadcn_ } from '@/components/ui/label'

----------------------------------------

TITLE: Restrict Access to SSO Users Custom Access Token Hook in JavaScript (HTTP)
DESCRIPTION: This JavaScript function creates a custom access token hook that restricts access to internal applications by requiring employees to log in via SAML Single Sign-On (SSO). It includes an allowlist for exempting specific employees from this policy.

LANGUAGE: javascript
CODE:
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'
import * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'

Deno.serve(async (req) => {
  const payload = await req.text()
  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(base64_secret)
  try {
    const { user_id, claims, authentication_method } = wh.verify(payload, headers)

    // Check the condition
    const allowedEmails = ['myemail@company.com', 'example@company.com']
    if (authentication_method === 'sso/saml' || allowedEmails.includes(claims.email)) {
      return new Response(
        JSON.stringify({
          claims,
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    } else {
      return new Response(
        JSON.stringify({
          error: 'Unauthorized',
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    }
  } catch (error) {
    return new Response(
      JSON.stringify({
        error: `Failed to process the request: ${error}`,
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
})

----------------------------------------

TITLE: Generating Shortened OpenAI Embeddings in TypeScript
DESCRIPTION: Demonstrates how to use OpenAI's API to generate a shortened embedding with a specified number of dimensions.

LANGUAGE: typescript
CODE:
import { OpenAI } from 'openai'

const openai = new OpenAI()

const {
  data: [{ embedding }],
} = await openai.embeddings.create({
  model: 'text-embedding-3-large',
  input: 'The cat chases the mouse',
  dimensions: 1024, // Generate an embedding with 1024 dimensions
})

console.log(embedding.length) // 1024

----------------------------------------

TITLE: Creating PostgreSQL View for Golden Tickets
DESCRIPTION: SQL code creating a view that computes golden ticket status and referral counts from the tickets table

LANGUAGE: sql
CODE:
drop view if exists lw7_tickets_golden;

create or replace view lw7_tickets_golden as
  with
    lw7_referrals as (
      select
        referred_by,
        count(*) as referrals
      from lw7_tickets
      where referred_by is not null
      group by referred_by
    )
  select
    lw7_tickets."id",
    lw7_tickets."name",
    lw7_tickets."username",
    lw7_tickets."ticketNumber",
    lw7_tickets."createdAt",
    lw7_tickets."sharedOnTwitter",
    lw7_tickets."sharedOnLinkedIn",
    lw7_tickets."bg_image_id",
    case
      when lw7_referrals.referrals is null then 0
      else lw7_referrals.referrals
    end as referrals,
    case
      when lw7_tickets."sharedOnTwitter" is not null
      and lw7_tickets."sharedOnLinkedIn" is not null then true
      else false
    end as golden
  from
    lw7_tickets
    left outer join lw7_referrals on lw7_tickets.username = lw7_referrals.referred_by;

----------------------------------------

TITLE: Enhanced Authentication Methods in Dart
DESCRIPTION: Shows the new, more descriptive authentication method names for password and OAuth-based login.

LANGUAGE: dart
CODE:
await supabase.auth.signInWithPassword(email: email, password: password);

await supabase.auth.signInWithOAuth(Provider.github)

----------------------------------------

TITLE: Uppy.js Integration with Supabase Storage
DESCRIPTION: Shows how to implement resumable uploads using Uppy.js with Supabase Storage, including configuration and event handling.

LANGUAGE: javascript
CODE:
import { Uppy, Dashboard, Tus } from 'https://releases.transloadit.com/uppy/v3.6.1/uppy.min.mjs'

const token = 'anon-key'
const projectId = 'your-project-ref'
const bucketName = 'avatars'
const folderName = 'foldername'
const supabaseUploadURL = `https://${projectId}.supabase.co/storage/v1/upload/resumable`

var uppy = new Uppy()
  .use(Dashboard, {
    inline: true,
    target: '#drag-drop-area',
    showProgressDetails: true,
  })
  .use(Tus, {
    endpoint: supabaseUploadURL,
    headers: {
      authorization: `Bearer ${token}`,
    },
    chunkSize: 6 * 1024 * 1024,
    allowedMetaFields: ['bucketName', 'objectName', 'contentType', 'cacheControl'],
  })

uppy.on('file-added', (file) => {
  file.meta = {
    ...file.meta,
    bucketName: bucketName,
    objectName: folderName ? `${folderName}/${file.name}` : file.name,
    contentType: file.type,
  }
})

uppy.on('complete', (result) => {
  console.log('Upload complete! We've uploaded these files:', result.successful)
})

----------------------------------------

TITLE: Image Transformation Configuration in JavaScript
DESCRIPTION: Demonstrates how to use the new image transformation options including width, height, quality and format settings when downloading images from Supabase Storage.

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
    quality: 75,
    format: 'origin',
  },
})

----------------------------------------

TITLE: Importing Security Icons and Components
DESCRIPTION: Imports various security-related icons from HeroIcons and Lucide React libraries, along with a Layout component.

LANGUAGE: javascript
CODE:
import {
  KeyIcon,
  UserGroupIcon,
  ShieldCheckIcon,
  RewindIcon,
  CreditCardIcon,
  ClipboardCheckIcon,
} from '@heroicons/react/outline'
import { Activity, Lock } from 'lucide-react'
import Layout from '../layouts/Layout'

----------------------------------------

TITLE: Flutter Home Page Implementation
DESCRIPTION: Dart code implementing the home page of the Flutter app that displays a list of movies from Supabase.

LANGUAGE: dart
CODE:
import 'package:filmsearch/components/film_cell.dart';
import 'package:filmsearch/main.dart';
import 'package:filmsearch/models/film.dart';

import 'package:flutter/material.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final filmsFuture = supabase
      .from('films')
      .select<List<Map<String, dynamic>>>()
      .withConverter<List<Film>>((data) => data.map(Film.fromJson).toList());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Films'),
      ),
      body: FutureBuilder(
          future: filmsFuture,
          builder: (context, snapshot) {
            if (snapshot.hasError) {
              return Center(
                child: Text(snapshot.error.toString()),
              );
            }
            if (!snapshot.hasData) {
              return const Center(child: CircularProgressIndicator());
            }
            final films = snapshot.data!;
            return ListView.builder(
              itemBuilder: (context, index) {
                final film = films[index];
                return FilmCell(film: film);
              },
              itemCount: films.length,
            );
          }),
    );
  }
}

----------------------------------------

TITLE: Collapsed Breadcrumb with Ellipsis
DESCRIPTION: Demonstrates the use of a BreadcrumbEllipsis component to show a collapsed state for long breadcrumbs.

LANGUAGE: tsx
CODE:
import { BreadcrumbEllipsis } from "@/components/ui/breadcrumb"

...

<Breadcrumb>
  <BreadcrumbList>
    {/* ... */}
    <BreadcrumbItem>
      <BreadcrumbEllipsis />
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>

----------------------------------------

TITLE: Testing Migrations and Pushing Changes with Supabase CLI
DESCRIPTION: Demonstrates how to test migrations on a fresh local database and push schema changes to staging and production environments.

LANGUAGE: bash
CODE:
supabase init
supabase start

$ supabase link --project-ref $PROJECT_ID
$ supabase db push

----------------------------------------

TITLE: Setting Environment Variables for Postgres Configuration
DESCRIPTION: Alternative environment variable configuration for using a Postgres database instead of Supabase.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=<open_ai_api_key>
export DATASTORE=postgres
export PG_HOST=<postgres_host_url>
export PG_PASSWORD=<postgres_password>

----------------------------------------

TITLE: Injecting TypeScript types into Supabase client
DESCRIPTION: TypeScript code to inject generated types into the Supabase client for type safety.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)

----------------------------------------

TITLE: Importing Admonition Component in React
DESCRIPTION: Shows how to import the Admonition component from the ui-patterns library.

LANGUAGE: tsx
CODE:
import { Admonition } from 'ui-patterns/admonition'

----------------------------------------

TITLE: Setting Environment Variables for Supabase in SvelteKit
DESCRIPTION: Example of setting Supabase environment variables in a .env.local file for a SvelteKit project.

LANGUAGE: bash
CODE:
PUBLIC_SUPABASE_URL=https://your-project.supabase.co
PUBLIC_SUPABASE_ANON_KEY=your-anon-key

----------------------------------------

TITLE: Connecting to Postgres in Elixir Clustering Strategy
DESCRIPTION: This function establishes a connection to Postgres, sets up notifications, and initializes the heartbeat mechanism for the clustering strategy.

LANGUAGE: elixir
CODE:
def handle_continue(:connect, state) do
    with {:ok, conn} <- Postgrex.start_link(state.meta.opts.()),
         {:ok, conn_notif} <- Postgrex.Notifications.start_link(state.meta.opts.()),
         {_, _} <- Postgrex.Notifications.listen(conn_notif, state.config[:channel_name]) do
      Logger.info(state.topology, "Connected to Postgres database")

      meta = %{
        state.meta
        | conn: conn,
          conn_notif: conn_notif,
          heartbeat_ref: heartbeat(0)
      }

      {:noreply, put_in(state.meta, meta)}
    else
      reason ->
        Logger.error(state.topology, "Failed to connect to Postgres: #{inspect(reason)}")
        {:noreply, state}
    end
  end

----------------------------------------

TITLE: Button with Nested Link
DESCRIPTION: Example of using the asChild prop to nest a Link component within a Button component.

LANGUAGE: tsx
CODE:
<Button asChild>
  <Link href="/login">Login</Link>
</Button>

----------------------------------------

TITLE: Creating Wasm Foreign Data Wrapper for Cal.com in Postgres
DESCRIPTION: SQL commands to create a Wasm foreign data wrapper and a foreign server for Cal.com connection using an API key.

LANGUAGE: sql
CODE:
create foreign data wrapper wasm_wrapper
  handler wasm_fdw_handler
  validator wasm_fdw_validator;

create server cal_server
  foreign data wrapper wasm_wrapper
  options (
    fdw_package_url 'https://github.com/supabase/wrappers/releases/download/wasm_cal_fdw_v0.1.0/cal_fdw.wasm',
    fdw_package_name 'supabase:cal-fdw',
    fdw_package_version '0.1.0',
    fdw_package_checksum '4afe4fac8c51f2caa1de8483b3817d2cec3a14cd8a65a3942c8b4ff6c430f08a',
    api_key '<your Cal.com API key>'
  );

----------------------------------------

TITLE: New Auth Sign-In Method in supabase-js v2
DESCRIPTION: This snippet showcases the new, more explicit sign-in method introduced in supabase-js v2. It uses the signInWithPassword() function instead of the previous signIn() method.

LANGUAGE: typescript
CODE:
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: React Native component implementing sign-in and sign-up functionality using Supabase authentication.

LANGUAGE: tsx
CODE:
import React, { useState } from 'react'
import { Alert, StyleSheet, View } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

export default function Auth() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})

----------------------------------------

TITLE: Running Postgres WASM locally
DESCRIPTION: Instructions for cloning and running the postgres-wasm project locally, including steps for both the Snaplet repository and Supabase fork.

LANGUAGE: bash
CODE:
# From Snaplet Repo
git clone git@github.com:snaplet/postgres-wasm.git
cd postgres-browser/packages/pg-browser
npx serve

# From Supabase Fork
git clone git@github.com:supabase-community/postgres-wasm.git
cd postgres-wasm
git checkout web
cd packages/supabrowser
npx serve

----------------------------------------

TITLE: Implementing Mutations with Error Handling in React
DESCRIPTION: Shows how to set up a mutation using Tanstack Query with success and error handling. It includes a usage example demonstrating how to call the mutation and handle potential errors.

LANGUAGE: jsx
CODE:
const { mutate: someAction } = useMutation({
  onSuccess: (res) => {
    toast.success('Success')
  },
  onError: (error) => {
    toast.error(`Failed: ${error.message}`)
  },
})

const onConfirm = async () => {
  if (!projectRef) return console.error('Project ref is required')

  someAction({ projectRef, otherParameters })
}

----------------------------------------

TITLE: Generating Schema Diff with Supabase CLI
DESCRIPTION: Demonstrates how to use the 'db diff' command with the experimental '--use-migra' flag to generate a DDL script for schema changes.

LANGUAGE: bash
CODE:
$ supabase db diff --use-migra --file file_name
# Creates a DDL script: supabase/migrations/<datetime_string>_file_name.sql

----------------------------------------

TITLE: React Dropzone Integration with Supabase Storage
DESCRIPTION: Client-side implementation of file uploads using React Dropzone with Supabase Storage, including image preview functionality

LANGUAGE: typescript
CODE:
'use client'

import { env } from '@/env'
import { createClient } from '@supabase/supabase-js'
import Image from 'next/image'
import React, { useState } from 'react'
import { useDropzone } from 'react-dropzone'

export default function SupabaseReactDropzone({ userId }: { userId?: string } = {}) {
  const supabaseBrowserClient = createClient(
    env.NEXT_PUBLIC_SUPABASE_URL,
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({
    maxFiles: 1,
    accept: {
      'image/jpeg': [],
      'image/png': [],
    },
    onDropAccepted: async (acceptedFiles) => {
      setAvatar(null)
      console.log(acceptedFiles)
      const { path, token }: { path: string; token: string } = await fetch(
        '/api/supabase/storage'
      ).then((res) => res.json())

      const { data, error } = await supabaseBrowserClient.storage
        .from('avatars')
        .uploadToSignedUrl(path, token, acceptedFiles[0])
    },
  })

  return (
    <div className="mx-auto mt-4 grid w-full gap-2">
      <div {...getRootProps({ className: 'dropzone' })}>
        <input {...getInputProps()} />
        <p>Drag 'n' drop some files here, or click to select files</p>
        <em>(Only *.jpeg and *.png images will be accepted)</em>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Registering Discord Slash Command using cURL
DESCRIPTION: This snippet demonstrates how to use cURL to register a new slash command named 'hello' with the Discord API. It requires the bot token and client ID from the Discord Developer Portal.

LANGUAGE: bash
CODE:
BOT_TOKEN='replace_me_with_bot_token'
CLIENT_ID='replace_me_with_client_id'
curl -X POST \
-H 'Content-Type: application/json' \
-H "Authorization: Bot $BOT_TOKEN" \
-d '{"name":"hello","description":"Greet a person","options":[{"name":"name","description":"The name of the person","type":3,"required":true}]}' \
"https://discord.com/api/v8/applications/$CLIENT_ID/commands"

----------------------------------------

TITLE: Using Admonition Component in React
DESCRIPTION: Demonstrates basic usage of the Admonition component with type, title, and description props.

LANGUAGE: tsx
CODE:
<Admonition
  type="default"
  title="Is it accessible?"
  description="Yes. It adheres to the WAI-ARIA design pattern."
/>

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Swift
DESCRIPTION: Configure Supabase client with Auth0 authentication in Swift for iOS applications.

LANGUAGE: swift
CODE:
import Auth0
import Supabase

extension CredentialsManager {
  static let shared = Auth0.CredentialsManager(authentication: Auth0.authentication())
}

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://<supabase-project>.supabase.co")!,
  supabaseKey: "SUPABASE_ANON_KEY",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        try await CredentialsManager.shared.credentials().idToken
      }
    )
  )
)

----------------------------------------

TITLE: Opening the refine app in VS Code
DESCRIPTION: Changes directory to the newly created app and opens it in Visual Studio Code.

LANGUAGE: bash
CODE:
cd my-app
code .

----------------------------------------

TITLE: Setting Supabase Database URL as Environment Variable
DESCRIPTION: Export the Supabase Postgres connection string as an environment variable for Rails to use.

LANGUAGE: bash
CODE:
export DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Realtime Golden Ticket Updates with Supabase
DESCRIPTION: Client-side code implementing realtime updates when a ticket becomes golden using Supabase Realtime subscriptions

LANGUAGE: jsx
CODE:
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
      table: 'lw7_tickets',
      filter: `username=eq.${username}`,
    },
    (payload) => {
      const golden = !!payload.new.sharedOnTwitter && !!payload.new.sharedOnLinkedIn
      setUserData({
        ...payload.new,
        golden,
      })
      if (golden) {
        channel.unsubscribe()
      }
    }
  )
  .subscribe()

----------------------------------------

TITLE: Importing Badge Variants Helper in React
DESCRIPTION: How to import the badgeVariants helper function for creating badge-like links.

LANGUAGE: tsx
CODE:
import { badgeVariants } from '@/components/ui/badge'

----------------------------------------

TITLE: Implementing Custom Serializer for Supabase KT
DESCRIPTION: This snippet shows how to create and use a custom serializer with Supabase KT. It includes defining a custom serializer class and configuring the Supabase client to use it.

LANGUAGE: kotlin
CODE:
class CustomSerializer: SupabaseSerializer {

    override fun <T : Any> encode(type: KType, value: T): String {
        //encode value to string
    }

    override fun <T : Any> decode(type: KType, value: String): T {
        //decode value
    }

}

LANGUAGE: kotlin
CODE:
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = CustomSerializer()
}

----------------------------------------

TITLE: Managing Database Branches with Supabase CLI
DESCRIPTION: Shows how to create, switch, and delete database branches for testing manual migrations without data loss.

LANGUAGE: bash
CODE:
supabase db branch new my_branch
supabase db branch switch my_branch

supabase db branch switch main
supabase db branch delete my_branch

----------------------------------------

TITLE: JSON Schema Definition Example
DESCRIPTION: JSON Schema definition for validating objects with a required string property 'foo'

LANGUAGE: javascript
CODE:
{
  "type": "object",
  "properties": {
    "foo": {
      "type": "string"
    }
  },
  "required": ["foo"],
  "additionalProperties": false
}

----------------------------------------

TITLE: Signing in with Phone OTP using HTTP
DESCRIPTION: Use a POST request to the /auth/v1/otp endpoint to initiate a phone login via HTTP. The user receives an SMS with a 6-digit pin that must be verified within 60 seconds.

LANGUAGE: bash
CODE:
curl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/otp' \
-H "apikey: SUPABASE_KEY" \
-H "Content-Type: application/json" \
-d '{
  "phone": "+13334445555"
}'

----------------------------------------

TITLE: Installing Packages in Specific Workspaces
DESCRIPTION: Steps for installing packages in specific workspaces within the Supabase monorepo.

LANGUAGE: sh
CODE:
cd apps/studio
pnpm add react

----------------------------------------

TITLE: Creating Search Indexes for Performance
DESCRIPTION: SQL commands to create GIN index for full-text search and HNSW index for vector search to optimize query performance.

LANGUAGE: sql
CODE:
-- Create an index for the full-text search
create index on documents using gin(fts);

-- Create an index for the semantic vector search
create index on documents using hnsw (embedding vector_ip_ops);

----------------------------------------

TITLE: Configuring Angular Authentication Service
DESCRIPTION: TypeScript service implementation for handling Supabase authentication including magic link signin and session management

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { createClient, SupabaseClient, User } from '@supabase/supabase-js';
import { BehaviorSubject } from 'rxjs';
import { environment } from 'src/environments/environment';
...

----------------------------------------

TITLE: Importing CostWarning Component in JSX
DESCRIPTION: Imports the CostWarning component from a local file, likely used to display pricing information related to SMS authentication.

LANGUAGE: jsx
CODE:
import { CostWarning } from './AuthSmsProviderConfig.Warnings'

----------------------------------------

TITLE: Using TokenHash in Supabase Email Template
DESCRIPTION: Example of using the TokenHash variable to construct a custom confirmation link in a Supabase email template.

LANGUAGE: html
CODE:
<p>Follow this link to confirm your user:</p>
<p>
  <a href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email"
    >Confirm your email</a
  >
</p>

----------------------------------------

TITLE: Using TokenHash in Supabase Email Template
DESCRIPTION: Example of using the TokenHash variable to construct a custom confirmation link in a Supabase email template.

LANGUAGE: html
CODE:
<p>Follow this link to confirm your user:</p>
<p>
  <a href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email"
    >Confirm your email</a
  >
</p>

----------------------------------------

TITLE: Installing Switch Component via CLI
DESCRIPTION: Command to install the Switch component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add switch

----------------------------------------

TITLE: Subscribing to Realtime Changes in v1
DESCRIPTION: Realtime subscriptions in v1 use a channel-based approach, providing more flexibility and control over event listening.

LANGUAGE: dart
CODE:
final channel = supabase.channel('*');
channel.on(
  RealtimeListenTypes.postgresChanges,
  ChannelFilter(event: '*', schema: '*'),
  (payload, [ref]) {
    // Handle realtime payload
  },
).subscribe();

----------------------------------------

TITLE: Creating a Smarter Search Function with Context Injection
DESCRIPTION: TypeScript function to perform similarity search and use GPT-3 for generating context-aware responses in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.170.0/http/server.ts'
import 'https://deno.land/x/xhr@0.2.1/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import GPT3Tokenizer from 'https://esm.sh/gpt3-tokenizer@1.1.5'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'
import { oneLine, stripIndent } from 'https://esm.sh/common-tags@1.8.2'
import { supabaseClient } from './lib/supabase'

export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Search query is passed in request payload
  const { query } = await req.json()

  // OpenAI recommends replacing newlines with spaces for best results
  const input = query.replace(/\n/g, ' ')

  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openai = new OpenAIApi(configuration)

  // Generate a one-time embedding for the query itself
  const embeddingResponse = await openai.createEmbedding({
    model: 'text-embedding-ada-002',
    input,
  })

  const [{ embedding }] = embeddingResponse.data.data

  // Fetching whole documents for this simple example.
  //
  // Ideally for context injection, documents are chunked into
  // smaller sections at earlier pre-processing/embedding step.
  const { data: documents } = await supabaseClient.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.78, // Choose an appropriate threshold for your data
    match_count: 10, // Choose the number of matches
  })

  const tokenizer = new GPT3Tokenizer({ type: 'gpt3' })
  let tokenCount = 0
  let contextText = ''

  // Concat matched documents
  for (let i = 0; i < documents.length; i++) {
    const document = documents[i]
    const content = document.content
    const encoded = tokenizer.encode(content)
    tokenCount += encoded.text.length

    // Limit context to max 1500 tokens (configurable)
    if (tokenCount > 1500) {
      break
    }

    contextText += `${content.trim()}\n---\n`
  }

  const prompt = stripIndent`${oneLine`
    You are a very enthusiastic Supabase representative who loves
    to help people! Given the following sections from the Supabase
    documentation, answer the question using only that information,
    outputted in markdown format. If you are unsure and the answer
    is not explicitly written in the documentation, say
    "Sorry, I don't know how to help with that."`}

    Context sections:
    ${contextText}

    Question: """
    ${query}
    """

    Answer as markdown (including related code snippets if available):
  `

  // In production we should handle possible errors
  const completionResponse = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt,
    max_tokens: 512, // Choose the max allowed tokens in completion
    temperature: 0, // Set to 0 for deterministic results
  })

  const {
    id,
    choices: [{ text }],
  } = completionResponse.data

  return new Response(JSON.stringify({ id, text }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
})

----------------------------------------

TITLE: Creating Similarity Search Function
DESCRIPTION: SQL function to perform vector similarity search on stored embeddings with configurable threshold and match parameters

LANGUAGE: sql
CODE:
create or replace function match_page_sections(
    embedding vector(1536),
    match_threshold float,
    match_count int,
    min_content_length int
)
returns table (
    id bigint,
    page_id bigint,
    slug text,
    heading text,
    content text,
    similarity float
)
language plpgsql
as $$
#variable_conflict use_variable
begin
  return query
  select
    nods_page_section.id,
    nods_page_section.page_id,
    nods_page_section.slug,
    nods_page_section.heading,
    nods_page_section.content,
    (nods_page_section.embedding <#> embedding) * -1 as similarity
  from nods_page_section
  where length(nods_page_section.content) >= min_content_length
  and (nods_page_section.embedding <#> embedding) * -1 > match_threshold
  order by nods_page_section.embedding <#> embedding
  limit match_count;
end;
$$;

----------------------------------------

TITLE: Conditional Language Template for Supabase Emails
DESCRIPTION: Example of using Go templating language to create conditional email content based on user language preference. Shows how to implement different welcome messages in English, Polish, and a fallback language.

LANGUAGE: html
CODE:
{{if eq .Data.langauge "en" }}
<h1>Welcome!</h1>
{{ else if eq .Data.langauge "pl" }}
<h1>Witamy!</h1>
{{ else }}
<h1>chuS'ugh, tera' je (Klingon)</h1>
{{end}}

----------------------------------------

TITLE: Creating Database Schema for Semantic Search in PGlite
DESCRIPTION: Set up the database schema in PGlite, including the pgvector extension and embeddings table with a HNSW index.

LANGUAGE: javascript
CODE:
export const initSchema = async (db) => {
  return await db.exec(`
    create extension if not exists vector;
    -- drop table if exists embeddings; -- Uncomment this line to reset the database
    create table if not exists embeddings (
      id bigint primary key generated always as identity,
      content text not null,
      embedding vector (384)
    );
    
    create index on embeddings using hnsw (embedding vector_ip_ops);
  `)
}

----------------------------------------

TITLE: Demonstrating Form Item Layout Usage in React
DESCRIPTION: This snippet shows the standard usage of form items in react-hook-form and compares it with the simplified usage using FormItemLayout. It highlights the components that can be replaced and demonstrates how FormItemLayout streamlines the form creation process.

LANGUAGE: tsx
CODE:
<FormItem_Shadcn_>
  <FormLabel_Shadcn_>Username</FormLabel_Shadcn_>
  <FormControl_Shadcn_>
    <Input placeholder="shadcn" {...field} />
  </FormControl_Shadcn_>
  <FormDescription_Shadcn_>This is your public display name.</FormDescription_Shadcn_>
  <FormMessage_Shadcn_ />
</FormItem_Shadcn_>

LANGUAGE: tsx
CODE:
<FormItemLayout label="Username" description="This is your public display name">
  <FormControl_Shadcn_>
    <Input placeholder="mildtomato" {...field} />
  </FormControl_Shadcn_>
</FormItemLayout>

----------------------------------------

TITLE: Configuring Auth Settings in TOML
DESCRIPTION: Demonstrates how to configure Auth settings, specifically additional redirect URLs, using the config.toml file.

LANGUAGE: toml
CODE:
[auth]
additional_redirect_urls = [
  "https://*-supabase.vercel.app/*/*",
  "https://supabase.com/*/*",
  "http://localhost:3000/*/*",
]

----------------------------------------

TITLE: Implementing Authentication Service in TypeScript
DESCRIPTION: Angular service for handling Supabase authentication including login, registration, and session management

LANGUAGE: typescript
CODE:
export class AuthService {
  private supabase: SupabaseClient
  private currentUser: BehaviorSubject<User | boolean> = new BehaviorSubject(null)

  constructor(private router: Router) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
    // ... rest of implementation
  }

----------------------------------------

TITLE: Flag-Based RLS Policy Implementation
DESCRIPTION: SQL code showing how to implement RLS using boolean flags in the table structure.

LANGUAGE: sql
CODE:
create table profiles (
  id serial primary key,
  name text,
  email text,
  is_exportable boolean
);
alter table profiles
  enable row level security;

create policy "Data dump rule" on profiles
  for select
  to exporter
  using ( is_exportable = true );

----------------------------------------

TITLE: Querying Supabase Data
DESCRIPTION: JavaScript code to query all articles from a Supabase database using the Supabase client.

LANGUAGE: javascript
CODE:
const { data } = await supabase.from("articles").select("*");

----------------------------------------

TITLE: Adding Search Functionality to InnerSideMenu in React
DESCRIPTION: This snippet demonstrates how to add a search input to the menu using InnerSideBarFilters and InnerSideBarFilterSearchInput components. It also includes an example of adding a filter dropdown for sorting menu items.

LANGUAGE: jsx
CODE:
<InnerSideBarFilters>
  <InnerSideBarFilterSearchInput
    name="search-input"
    placeholder="Search..."
    value={searchTerm}
    onChange={(e) => setSearchTerm(e.target.value)}
    aria-labelledby="Search items"
  >
    <InnerSideBarFilterSortDropdown value={sort} onValueChange={(value) => setSort(value)}>
      <InnerSideBarFilterSortDropdownItem value="alphabetical">
        Sort Alphabetically
      </InnerSideBarFilterSortDropdownItem>
      <InnerSideBarFilterSortDropdownItem value="reverse">
        Sort Reverse Alphabetically
      </InnerSideBarFilterSortDropdownItem>
    </InnerSideBarFilterSortDropdown>
  </InnerSideBarFilterSearchInput>
</InnerSideBarFilters>

----------------------------------------

TITLE: Configuring Supabase Client with Amazon Cognito in Flutter
DESCRIPTION: This snippet illustrates how to set up the Supabase client in a Flutter application, integrating with Amazon Cognito for authentication.

LANGUAGE: dart
CODE:
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'https://<supabase-project>.supabase.co',
    anonKey: 'SUPABASE_ANON_KEY',
    accessToken: () async {
      final session = await Amplify.Auth.fetchAuthSession();
      final cognitoSession = session as CognitoAuthSession;
      return cognitoSession.userPoolTokensResult.value.accessToken.raw;
    },
  );
  runApp(const MyApp());
}

----------------------------------------

TITLE: Implementing GUI for Animation Customization
DESCRIPTION: Sets up a dat.GUI interface for customizing animation parameters in debug mode.

LANGUAGE: javascript
CODE:
const init = async () => {
  const dat = await import('dat.gui')
  const gui = new dat.GUI()
}

useEffect(() => {
  init()
}, [])

----------------------------------------

TITLE: Creating a React Native/Expo App
DESCRIPTION: Initializes a new React Native project using Expo CLI.

LANGUAGE: sh
CODE:
npx create-expo-app OfflineFirstWithSupabase

----------------------------------------

TITLE: Embedding YouTube Video in HTML
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in an HTML page using an iframe. It includes responsive styling and various attributes for customization.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/uWJmUTCFdak"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Signing out using Supabase in Kotlin
DESCRIPTION: This snippet shows how to implement sign-out functionality using Supabase in a Kotlin application. It uses the signOut method from the Supabase Auth API to remove the user from the session.

LANGUAGE: kotlin
CODE:
suspend fun signOut() {
	supabase.auth.signOut()
}

----------------------------------------

TITLE: Creating Login Page UI
DESCRIPTION: Example of a login page component utilizing the server actions for authentication.

LANGUAGE: typescript
CODE:
// app/login/page.tsx

import { login, signup } from './actions';

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  );
}

----------------------------------------

TITLE: Initializing RedwoodJS Project
DESCRIPTION: Commands to create a new RedwoodJS project and set up Supabase authentication.

LANGUAGE: bash
CODE:
yarn create redwood-app supabase-redwoodjs
cd supabase-redwoodjs
yarn redwood setup auth supabase

----------------------------------------

TITLE: Querying Vector Collections Using Vecs in Python
DESCRIPTION: These Python code snippets demonstrate how to query vector collections using Vecs. The first example shows a cosine similarity query, while the second includes metadata filtering.

LANGUAGE: python
CODE:
# cosine similarity
docs.query(query_vector=[0.4,0.5,0.6], limit=5)

# metadata filtering
docs.query(
    query_vector=[0.4,0.5,0.6],
    limit=5,
    filters={"year": {"$eq": 2012}}, # metadata filters
)

----------------------------------------

TITLE: Configuring Snaplet for Seed Data Generation in TypeScript
DESCRIPTION: TypeScript configuration for Snaplet to generate seed data. This snippet shows how to set up the adapter and select specific schemas for data generation.

LANGUAGE: typescript
CODE:
export default defineConfig({
  adapter: async () => {
    const client = new Client({
      connectionString: 'postgresql://postgres:postgres@localhost:54322/postgres',
    })
    await client.connect()
    return new SeedPg(client)
  },
  // We only want to generate data for the public schema
  select: ['!*', 'public.*'],
})

----------------------------------------

TITLE: Creating Basic Profiles Table in PostgreSQL
DESCRIPTION: SQL code to create a profiles table with basic user information fields.

LANGUAGE: sql
CODE:
create table profiles (
  id serial primary key,
  name text,
  email text
);

----------------------------------------

TITLE: Installing Slider Component via CLI
DESCRIPTION: Command to install the Slider component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add slider

----------------------------------------

TITLE: Updating Supabase Flutter Package Version
DESCRIPTION: Update the pubspec.yaml file to use version 2 of the supabase_flutter package.

LANGUAGE: yaml
CODE:
supabase_flutter: ^2.0.0

----------------------------------------

TITLE: SemVer Text Conversion Function
DESCRIPTION: Implements a function to convert the semver type to its standard string representation format.

LANGUAGE: sql
CODE:
create or replace function semver_to_text(semver)
    returns text
    immutable
    language sql
as $$
    select
        format('%s.%s.%s', $1.major, $1.minor, $1.patch)
        || case
            when $1.pre_release is null then ''
            else format('-%s', array_to_string($1.pre_release, '.'))
        end
        || case
            when $1.build_metadata is null then ''
            else format('+%s', array_to_string($1.build_metadata, '.'))
        end
$$;

----------------------------------------

TITLE: Installing PSQL Client on Linux
DESCRIPTION: Commands to install PostgreSQL client on Debian-based Linux systems for external database connections.

LANGUAGE: bash
CODE:
sudo apt-get update
sudo apt-get install postgresql-client

----------------------------------------

TITLE: Configuring Supabase Storage Bucket
DESCRIPTION: TOML configuration for automatically generating a storage bucket in Supabase. Specifies bucket properties such as public access, file size limit, and allowed MIME types.

LANGUAGE: toml
CODE:
[storage.buckets.audio]
public = false
file_size_limit = "50MiB"
allowed_mime_types = ["audio/mp3"]
objects_path = "./audio"

----------------------------------------

TITLE: Listing pg_cron Jobs in PostgreSQL
DESCRIPTION: Queries to list all scheduled cron jobs and get their total count.

LANGUAGE: sql
CODE:
-- All jobs
select schedule, jobname, command from cron.job;

-- Count jobs
select COUNT(*) from cron.job;

----------------------------------------

TITLE: Creating Embeddings with Transformers.js Web Worker
DESCRIPTION: Set up a web worker to generate embeddings using Huggingface's Transformers.js pipeline with the Supabase/gte-small model.

LANGUAGE: javascript
CODE:
import { pipeline } from '@huggingface/transformers'

class PipelineSingleton {
  static task = 'feature-extraction'
  static model = 'Supabase/gte-small'
  static instance = null

  static async getInstance(progress_callback = null) {
    if (this.instance === null) {
      this.instance = pipeline(this.task, this.model, {
        progress_callback,
        dtype: 'fp32',
        device: !!navigator.gpu ? 'webgpu' : 'wasm',
      })
    }
    return this.instance
  }
}

self.addEventListener('message', async (event) => {
  let classifier = await PipelineSingleton.getInstance((x) => {
    self.postMessage(x)
  })

  let output = await classifier(event.data.text, {
    pooling: 'mean',
    normalize: true,
  })

  const embedding = Array.from(output.data)

  self.postMessage({
    status: 'complete',
    embedding,
  })
})

----------------------------------------

TITLE: Installing Supabase Remix Dependencies
DESCRIPTION: Command to install the required Supabase authentication helper packages for Remix integration.

LANGUAGE: bash
CODE:
npm install @supabase/auth-helpers-remix @supabase/supabase-js

----------------------------------------

TITLE: Creating Avatar Component for Profile Photos
DESCRIPTION: Implement an AvatarComponent to handle profile photo uploads using the device camera.

LANGUAGE: typescript
CODE:
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser'
import { SupabaseService } from '../supabase.service'
import { Camera, CameraResultType } from '@capacitor/camera'
import { addIcons } from 'ionicons'
import { person } from 'ionicons/icons'
@Component({
  selector: 'app-avatar',
  template: `
    <div class="avatar_wrapper" (click)="uploadAvatar()">
      <img *ngIf="_avatarUrl; else noAvatar" [src]="_avatarUrl" />
      <ng-template #noAvatar>
        <ion-icon name="person" class="no-avatar"></ion-icon>
      </ng-template>
    </div>
  `,
  style: [
    `
    :host {
       display: block;
       margin: auto;
       min-height: 150px;
    }
     :host .avatar_wrapper {
       margin: 16px auto 16px;
       border-radius: 50%;
       overflow: hidden;
       height: 150px;
       aspect-ratio: 1;
       background: var(--ion-color-step-50);
       border: thick solid var(--ion-color-step-200);
    }
     :host .avatar_wrapper:hover {
       cursor: pointer;
    }
     :host .avatar_wrapper ion-icon.no-avatar {
       width: 100%;
       height: 115%;
    }
     :host img {
       display: block;
       object-fit: cover;
       width: 100%;
       height: 100%;
    }
  `,
  ],
})
export class AvatarComponent {
  _avatarUrl: SafeResourceUrl | undefined
  uploading = false

  @Input()
  set avatarUrl(url: string | undefined) {
    if (url) {
      this.downloadImage(url)
    }
  }

  @Output() upload = new EventEmitter<string>()

  constructor(
    private readonly supabase: SupabaseService,
    private readonly dom: DomSanitizer
  ) {
    addIcons({ person })
  }

  async downloadImage(path: string) {
    try {
      const { data, error } = await this.supabase.downLoadImage(path)
      if (error) {
        throw error
      }
      this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(URL.createObjectURL(data!))
    } catch (error: any) {
      console.error('Error downloading image: ', error.message)
    }
  }

  async uploadAvatar() {
    const loader = await this.supabase.createLoader()
    try {
      const photo = await Camera.getPhoto({
        resultType: CameraResultType.DataUrl,
      })

      const file = await fetch(photo.dataUrl!)
        .then((res) => res.blob())
        .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))

      const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`

      await loader.present()
      const { error } = await this.supabase.uploadAvatar(fileName, file)

      if (error) {
        throw error
      }

      this.upload.emit(fileName)
    } catch (error: any) {
      this.supabase.createNotice(error.message)
    } finally {
      loader.dismiss()
    }
  }
}

----------------------------------------

TITLE: Mixing Tailwind Color Utilities in React JSX
DESCRIPTION: Shows how to apply foreground colors to different element types, such as text and backgrounds, using Supabase's custom Tailwind utilities.

LANGUAGE: jsx
CODE:
// use the text light color for some text
<span className="text-light"></span>

// we can use the same color for a background
<div className="bg-foreground-light">
    <span>I have the same color background as the left example</span>
</div>

----------------------------------------

TITLE: Creating Edge Wrapper Function in SQL
DESCRIPTION: SQL function to manage HTTP requests with retries, custom headers, and region selection.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION edge.edge_wrapper(
    url TEXT,
    method TEXT DEFAULT 'POST',
    headers JSONB DEFAULT '{"Content-Type": "application/json"}'::jsonb,
    params JSONB DEFAULT '{}'::jsonb,
    payload JSONB DEFAULT '{}'::jsonb,
    timeout_ms INTEGER DEFAULT 5000,
    max_retries INTEGER DEFAULT 0,
    allowed_regions TEXT[] DEFAULT NULL
) RETURNS jsonb AS $$
DECLARE
    retry_count INTEGER := 0;
    retry_delays DOUBLE PRECISION[] := ARRAY[0, 0.250, 0.500, 1.000, 2.500, 5.000];
    succeeded BOOLEAN := FALSE;
    current_region_index INTEGER := 1;
    combined_headers JSONB;
    response_json JSONB;
BEGIN
    -- Validate headers, params, and payload are JSON objects
    IF headers IS NULL OR NOT jsonb_typeof(headers) = 'object' THEN
        RAISE EXCEPTION 'Invalid headers parameter: %', headers;
    END IF;

    IF params IS NULL OR NOT jsonb_typeof(params) = 'object' THEN
        RAISE EXCEPTION 'Invalid params parameter: %', params;
    END IF;

    IF payload IS NULL OR NOT jsonb_typeof(payload) = 'object' THEN
        RAISE EXCEPTION 'Invalid payload parameter: %', payload;
    END IF;

    -- Validate allowed_regions if provided
    IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) = 0 THEN
        RAISE EXCEPTION 'allowed_regions parameter cannot be an empty array';
    END IF;

    -- Check if retry_delays has enough elements
    IF cardinality(retry_delays) < max_retries + 1 THEN
        RAISE EXCEPTION 'retry_delays array must have at least % elements', max_retries + 1;
    END IF;

    -- Retry loop
    WHILE NOT succeeded AND retry_count <= max_retries LOOP
        combined_headers := headers;

        -- Set x-region header if allowed_regions is provided
        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN
            combined_headers := combined_headers || jsonb_build_object('x-region', allowed_regions[current_region_index]);
        END IF;

        -- Sleep if not the first attempt
        IF retry_count > 0 THEN
            PERFORM pg_sleep(retry_delays[retry_count]);
        END IF;

        retry_count := retry_count + 1;

        -- Increment region index, wrapping around if necessary
        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN
            current_region_index := current_region_index + 1;
            IF current_region_index > cardinality(allowed_regions) THEN
                current_region_index := 1;
            END IF;
        END IF;

        BEGIN
            RAISE WARNING 'headers:%', combined_headers;

            -- Call the simplified HTTP request function
            response_json := edge.http_request(url, method, combined_headers, params, payload, timeout_ms);

            -- Check the status code
            IF (response_json->>'status_code')::INTEGER < 500 THEN
                succeeded := TRUE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                IF retry_count > max_retries THEN
                    RAISE EXCEPTION 'HTTP request failed after % retries. SQL Error: { %, % }',
                        max_retries, SQLERRM, SQLSTATE;
                END IF;
        END;
    END LOOP;

    RETURN response_json;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: GraphQL Type Definition for ProjectOwner
DESCRIPTION: Generated GraphQL type definition showing the structure of the ProjectOwner type with Node interface implementation.

LANGUAGE: graphql
CODE:
type ProjectOwner implements Node {
  nodeId: ID!
  id: UUID!
  name: String
}

----------------------------------------

TITLE: Image Processing Helper Functions
DESCRIPTION: Python helper functions for image encoding and embedding generation using Amazon Titan

LANGUAGE: python
CODE:
def readFileAsBase64(file_path):
    """Encode image as base64 string."""
    try:
        with open(file_path, "rb") as image_file:
            input_image = base64.b64encode(image_file.read()).decode("utf8")
        return input_image
    except:
        print("bad file name")
        sys.exit(0)


def construct_bedrock_image_body(base64_string):
    """Construct the request body.

    https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-embed-mm.html
    """
    return json.dumps(
        {
            "inputImage": base64_string,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    )


def get_embedding_from_titan_multimodal(body):
    """Invoke the Amazon Titan Model via API request."""
    response = bedrock_client.invoke_model(
        body=body,
        modelId="amazon.titan-embed-image-v1",
        accept="application/json",
        contentType="application/json",
    )

    response_body = json.loads(response.get("body").read())
    print(response_body)
    return response_body["embedding"]


def encode_image(file_path):
    """Generate embedding for the image at file_path."""
    base64_string = readFileAsBase64(file_path)
    body = construct_bedrock_image_body(base64_string)
    emb = get_embedding_from_titan_multimodal(body)
    return emb

----------------------------------------

TITLE: Configuring Seed Files with Glob Pattern in TOML
DESCRIPTION: TOML configuration for specifying seed files using a glob pattern. This snippet demonstrates how to include all SQL files in a specific folder for seeding.

LANGUAGE: toml
CODE:
[db.seed]
enabled = true
sql_paths = ['./seeds/*.sql']

----------------------------------------

TITLE: Creating PostgreSQL RLS Select Policy
DESCRIPTION: SQL example showing how to create a Row Level Security policy that allows users to select only their own rows from a todos table.

LANGUAGE: sql
CODE:
create policy todo_select_policy
    on todos for select
    using ( (select auth.uid()) = user_id );

----------------------------------------

TITLE: Creating Utility Functions for Timestamp Conversion in Supabase
DESCRIPTION: Defines PostgreSQL functions to convert between epoch timestamps used by WatermelonDB and PostgreSQL timestamps.

LANGUAGE: sql
CODE:
create or replace function epoch_to_timestamp(epoch text) returns timestamp with time zone as $$ begin return timestamp with time zone 'epoch' + ((epoch::bigint) / 1000) * interval '1 second';
end;
$$ language plpgsql;

create or replace function timestamp_to_epoch(ts timestamp with time zone) returns bigint as $$ begin return (
        extract(
            epoch
            from ts
        ) * 1000
    )::bigint;
end;
$$ language plpgsql;

----------------------------------------

TITLE: Authenticating API Request with Bearer Token in Bash
DESCRIPTION: Example of making an authenticated request to the Supabase Management API using a bearer token in the Authorization header. This demonstrates how to query projects endpoint with a personal access token.

LANGUAGE: bash
CODE:
curl https://api.supabase.com/v1/projects \
-H "Authorization: Bearer sbp_bdd0••••••••••••••••••••••••••••••••4f23"

----------------------------------------

TITLE: Customizing Text Confirm Dialog with Children in JSX
DESCRIPTION: This snippet shows how to add custom children to the Text Confirm Dialog component. It uses a destructive variant with a deletion confirmation message.

LANGUAGE: jsx
CODE:
<ComponentPreview
  name="text-confirm-dialog-with-children"
  description="An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'"
/>

----------------------------------------

TITLE: Verifying Phone OTP in Python
DESCRIPTION: Use the supabase.auth.verify_otp method to verify the one-time password sent to the user's phone in Python. This should be called after the user inputs the 6-digit pin they received.

LANGUAGE: python
CODE:
response = supabase.auth.verify_otp({
  'phone': '13334445555',
  'token': '123456',
  'type': 'sms',
})

----------------------------------------

TITLE: Implementing Code Exchange Route in SvelteKit (TypeScript)
DESCRIPTION: TypeScript code for implementing the Code Exchange route in SvelteKit for server-side auth flow.

LANGUAGE: typescript
CODE:
import { redirect } from '@sveltejs/kit'

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get('code')

  if (code) {
    await supabase.auth.exchangeCodeForSession(code)
  }

  redirect(303, '/')
}

----------------------------------------

TITLE: Creating SemVer Components Type in PostgreSQL
DESCRIPTION: Defines a composite type to store semantic versioning components including major, minor, patch versions, pre-release and build metadata arrays.

LANGUAGE: sql
CODE:
create type semver_components as (
    major int,
    minor int,
    patch int,
    pre_release text[],
    build_metadata text[]
);

----------------------------------------

TITLE: Using TailwindCSS with Supabase's Design System
DESCRIPTION: Examples of how Supabase uses TailwindCSS classes that correspond to their Figma variables, demonstrating the synchronization between design files and the development environment.

LANGUAGE: CSS
CODE:
background.default in TailwindCSS is "bg"
background.alternative in TailwindCSS is "bg-alternative"
foreground.DEFAULT in TailwindCSS is "text"
foreground.light in TailwindCSS is "text-light"

----------------------------------------

TITLE: Installing Toggle Group Component Dependencies
DESCRIPTION: Command to install the required dependency for the Toggle Group component manually.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-toggle-group

----------------------------------------

TITLE: WebSocket Relay for OpenAI Realtime API
DESCRIPTION: Implementation of an authenticated WebSocket relay between clients and OpenAI's Realtime API, using Supabase Auth for user authentication.

LANGUAGE: jsx
CODE:
import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')

Deno.serve(async (req) => {
  const upgrade = req.headers.get('upgrade') || ''

  if (upgrade.toLowerCase() != 'websocket') {
    return new Response("request isn't trying to upgrade to websocket.")
  }

  const url = new URL(req.url)
  const jwt = url.searchParams.get('jwt')
  if (!jwt) {
    console.error('Auth token not provided')
    return new Response('Auth token not provided', { status: 403 })
  }
  const { error, data } = await supabase.auth.getUser(jwt)
  if (error) {
    console.error(error)
    return new Response('Invalid token provided', { status: 403 })
  }
  if (!data.user) {
    console.error('user is not authenticated')
    return new Response('User is not authenticated', { status: 403 })
  }

  const { socket, response } = Deno.upgradeWebSocket(req)

  socket.onopen = () => {
    const url = 'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01'

    const openaiWS = new WebSocket(url, [
      'realtime',
      `openai-insecure-api-key.${OPENAI_API_KEY}`,
      'openai-beta.realtime-v1',
    ])

    openaiWS.onopen = () => {
      console.log('Connected to OpenAI server.')

      socket.onmessage = (e) => {
        console.log('socket message:', e.data)
        if (openaiWS.readyState === 1) {
          openaiWS.send(e.data)
        } else {
          socket.send(
            JSON.stringify({
              type: 'error',
              msg: 'openAI connection not ready',
            })
          )
        }
      }
    }

    openaiWS.onmessage = (e) => {
      console.log(e.data)
      socket.send(e.data)
    }

    openaiWS.onerror = (e) => console.log('OpenAI error: ', e.message)
    openaiWS.onclose = (e) => console.log('OpenAI session closed')
  }

  socket.onerror = (e) => console.log('socket errored:', e.message)
  socket.onclose = () => console.log('socket closed')

  return response
})

----------------------------------------

TITLE: Embedding YouTube Video in React
DESCRIPTION: This code snippet demonstrates how to embed a YouTube video within a React component using an iframe. It includes responsive styling and various attributes for customization and security.

LANGUAGE: jsx
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/TtLxxaYE1rA"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: BigQuery SQL Query for Top Contributors
DESCRIPTION: SQL query using BigQuery dialect to extract and count top contributors from GitHub webhook data

LANGUAGE: sql
CODE:
select
  count(t.timestamp) as count,
  s.login as gh_user
from
  `github.supabase.webhooks` as t
  cross join unnest(metadata) as m
  cross join unnest(m.sender) as s
where
  timestamp::date > current_date() - @day::int
group by
  gh_user
order by
  count desc
limit
  25

----------------------------------------

TITLE: Signing in with Magic Link using Supabase Auth in Swift
DESCRIPTION: This code snippet shows how to implement Magic Link authentication using Supabase Auth in Swift. It includes options for specifying a redirect URL and controlling automatic user creation.

LANGUAGE: swift
CODE:
try await supabase.auth.signInWithOTP(
  email: "valid.email@supabase.io",
  redirectTo: URL(string: "https://example.com/welcome"),
  // set this to false if you do not want the user to be automatically signed up
  shouldCreateUser: false
)

----------------------------------------

TITLE: Creating a Covering Index in Postgres
DESCRIPTION: Demonstrates creating a covering index that includes additional columns. This can improve performance by allowing the index to satisfy queries without accessing the table.

LANGUAGE: SQL
CODE:
CREATE INDEX a_b_idx ON x (a,b) INCLUDE (c);

----------------------------------------

TITLE: Configuring Supabase Client
DESCRIPTION: Initialize Supabase client with environment variables for API connection.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VUE_APP_SUPABASE_URL as string;
const supabaseAnonKey = process.env.VUE_APP_SUPABASE_ANON_KEY as string;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

----------------------------------------

TITLE: Image Captioning Edge Function Implementation
DESCRIPTION: Supabase Edge Function that processes uploaded images using Hugging Face's image-to-text model. The function is triggered by a webhook when new images are uploaded to storage, generates a caption, and stores it in the database.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { Database } from './types.ts'

console.log('Hello from `huggingface-image-captioning` function!')

const hf = new HfInference(Deno.env.get('HUGGINGFACE_ACCESS_TOKEN'))

type SoRecord = Database['storage']['Tables']['objects']['Row']
interface WebhookPayload {
  type: 'INSERT' | 'UPDATE' | 'DELETE'
  table: string
  record: SoRecord
  schema: 'public'
  old_record: null | SoRecord
}

serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const soRecord = payload.record
  const supabaseAdminClient = createClient<Database>(
    // Supabase API URL - env var exported by default when deployed.
    Deno.env.get('SUPABASE_URL') ?? '',
    // Supabase API SERVICE ROLE KEY - env var exported by default when deployed.
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
  )

  // Construct image url from storage
  const { data, error } = await supabaseAdminClient.storage
    .from(soRecord.bucket_id!)
    .createSignedUrl(soRecord.path_tokens!.join('/'), 60)
  if (error) throw error
  const { signedUrl } = data

  // Run image captioning with Huggingface
  const imgDesc = await hf.imageToText({
    data: await (await fetch(signedUrl)).blob(),
    model: 'nlpconnect/vit-gpt2-image-captioning',
  })

  // Store image caption in Database table
  await supabaseAdminClient
    .from('image_caption')
    .insert({ id: soRecord.id!, caption: imgDesc.generated_text })
    .throwOnError()

  return new Response('ok')
})

----------------------------------------

TITLE: Database Linting CLI Command Help
DESCRIPTION: Displays help information for the 'supabase db lint' command which checks for database typing errors using plpgsql_check. Includes available flags for customizing the linting process.

LANGUAGE: markdown
CODE:
supabase db lint --help
Checks local database for typing error

Usage:
  supabase db lint [flags]

Flags:
  --level [ warning | error ] Error level to emit. (default warning)
  --linked Lints the linked project for schema errors.
  -s, --schema strings List of schema to include. (default all)

----------------------------------------

TITLE: Implementing Match Page Sections Function in SQL
DESCRIPTION: SQL function to query and find relevant information for ChatGPT questions. It applies filters based on source, author, document, and date, and finds the closest embeddings using the inner product distance function.

LANGUAGE: sql
CODE:
create or replace function match_page_sections(
	in_embedding vector(1536),
	in_match_count int default 3,
	in_document_id text default '%%',
	in_source_id text default '%%',
	in_source text default '%%',
	in_author text default '%%',
	in_start_date timestamptz default '-infinity',
	in_end_date timestamptz default 'infinity'
)
returns table (
	id text,
	source text,
	source_id text,
	document_id text,
	url text,
	created_at timestamptz,
	author text,
	content text,
	embedding vector(1536),
	similarity float
)
language plpgsql
as $$
#variable_conflict use_variable
begin
return query

select
	documents.id,
	documents.source,
	documents.source_id,
	documents.document_id,
	documents.url,
	documents.created_at,
	documents.author,
	documents.content,
	documents.embedding,
	(documents.embedding <#> in_embedding) * -1 as similarity
from
	documents
where
	in_start_date <= documents.created_at and
  documents.created_at <= in_end_date and
  (documents.source_id like in_source_id or documents.source_id is null) and
  (documents.source like in_source or documents.source is null) and
  (documents.author like in_author or documents.author is null) and
  (documents.document_id like in_document_id or documents.document_id is null)
order by
	documents.embedding <#> in_embedding
limit
	in_match_count;
end;
$$;

----------------------------------------

TITLE: Using Foreground Tailwind Utilities in React JSX
DESCRIPTION: Shows examples of using Supabase's custom Tailwind utilities for foreground (text) colors, including default, light, lighter, and muted variations.

LANGUAGE: jsx
CODE:
<div className="text-foreground">/div>
<div className="text-foreground-light">/div>
<div className="text-foreground-lighter">/div>
<div className="text-foreground-muted">/div>
<div className="bg-foreground-light">/div>

----------------------------------------

TITLE: Fetching and subscribing to todos data with Legend-State
DESCRIPTION: React component using Legend-State to fetch and subscribe to todos data with automatic updates.

LANGUAGE: typescript
CODE:
import { observer } from '@legendapp/state/react'
import { todos$ as _todos$ } from './utils/SupaLegend'

const Todos = observer(({ todos$ }: { todos$: typeof _todos$ }) => {
  const todos = todos$.get()
  const renderItem = ({ item: todo }: { item: Tables<'todos'> }) => <Todo todo={todo} />
  if (todos)
    return <FlatList data={Object.values(todos)} renderItem={renderItem} style={styles.todos} />

  return <></>
})

----------------------------------------

TITLE: Presigned URL Generation and Upload
DESCRIPTION: Demonstrates how to create and use presigned URLs for file uploads in Supabase Storage.

LANGUAGE: javascript
CODE:
// create a signed upload url
const filePath = 'users.txt'
const { token } = await storage.from(newBucketName).createSignedUploadUrl(filePath)

// this token can then be used to upload to storage
await storage.from(newBucketName).uploadToSignedUrl(filePath, token, file)

----------------------------------------

TITLE: Dropping Objects Owned by Role in Postgres SQL
DESCRIPTION: This SQL command drops all objects owned by the specified role and revokes its privileges, further preparing for role deletion.

LANGUAGE: sql
CODE:
DROP OWNED BY <role>;

----------------------------------------

TITLE: Implementing Llamafile Function with functions-js
DESCRIPTION: TypeScript code for the Llamafile function using Supabase functions-js to interact with the Llamafile server.

LANGUAGE: typescript
CODE:
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
const session = new Supabase.ai.Session('LLaMA_CPP')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  // Get the output as a stream
  const output = await session.run(
    {
      messages: [
        {
          role: 'system',
          content:
            'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
    },
    {
      mode: 'openaicompatible', // Mode for the inference API host. (default: 'ollama')
      stream: false,
    }
  )

  console.log('done')
  return Response.json(output)
})

----------------------------------------

TITLE: Storing Movie Data in Supabase
DESCRIPTION: TypeScript code to store movie data and embeddings in Supabase database using upsert operation.

LANGUAGE: typescript
CODE:
for(const film of films) {
	filmsWithEmbeddings.push({
	  id: film.id,
	  title: film.title,
	  overview: film.overview,
	  release_date: film.release_date,
	  backdrop_path: film.backdrop_path,
	  embedding,
	})
}

const { error } = await supabase.from('films').upsert(filmsWithEmbeddings)

----------------------------------------

TITLE: Creating a Next.js Project with Supabase Starter Template
DESCRIPTION: This command shows how to create a new Next.js project using the Supabase starter template. It provides a quick way to set up a Next.js application with Supabase integration.

LANGUAGE: bash
CODE:
npx create-next-app@latest -e with-supabase

----------------------------------------

TITLE: Installing Three.js and React Three Fiber Dependencies
DESCRIPTION: Command to install the required dependencies for Three.js and React Three Fiber in a project.

LANGUAGE: bash
CODE:
npm install three @react-three/fiber

----------------------------------------

TITLE: Handling OAuth Callback in Next.js
DESCRIPTION: This code snippet shows how to handle the OAuth callback in a Next.js application. It exchanges the authorization code for a session and handles redirects based on the environment.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
// The client you created from the Server-Side Auth instructions
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === 'development'
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`)
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`)
      } else {
        return NextResponse.redirect(`${origin}${next}`)
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}

----------------------------------------

TITLE: Event Configuration YAML for Next.js Conf
DESCRIPTION: YAML frontmatter configuration defining metadata for a Supabase speaking event at Next.js Conference. Includes event title, date, duration, timezone, and categorical information.

LANGUAGE: yaml
CODE:
---
title: 'Supabase at Next.js Conf'
subtitle: 'where miami builds cool shit.'
type: 'talk'
onDemand: false
disable_page_build: true
link: { href: https://nextjs.org/conf, target: '_blank' }
date: '2024-10-24T10:00:00.000-07:00'
timezone: 'America/Los_Angeles'
duration: '5 hours'
categories:
  - talk
---

----------------------------------------

TITLE: FerretDB Document Update Operation
DESCRIPTION: MongoDB command to update a single player document in FerretDB collection.

LANGUAGE: json5
CODE:
db.players.updateOne(
    { player_name: "Giggs" },
    { $set: { position: "CM" } }
);

----------------------------------------

TITLE: Adding Cancel Button to Text Confirm Dialog in JSX
DESCRIPTION: This example illustrates how to include a cancel button in the Text Confirm Dialog component. It uses a destructive variant with a deletion confirmation message.

LANGUAGE: jsx
CODE:
<ComponentPreview
  name="text-confirm-dialog-with-cancel-button"
  description="An alert with a destructive variant. The title says 'Delete this item?' and the description is 'This action cannot be undone.'"
/>

----------------------------------------

TITLE: Activating/Deactivating Cron Jobs in SQL
DESCRIPTION: Controls the active state of a cron job using alter_job function.

LANGUAGE: sql
CODE:
-- Activate Job
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  active := true
);

-- Deactivate Job
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  active := false
);

----------------------------------------

TITLE: Postgres Advisory Locks Implementation
DESCRIPTION: Demonstrates the implementation of Postgres advisory locks for managing concurrent file uploads in Supabase Storage.

LANGUAGE: javascript
CODE:
const key = `/bucket-name/folder/bunny.jpg`
const hashedKey = hash(key)

await db.withTransaction(() => {
	// try acquiring a transactional advisory lock
	// these locks are automatically released at the end of every transaction
	await db.run('SELECT pg_advisory_xact_lock(?)', hashedKey);

	// the current server can upload to s3 at the given key
	await uploadObject();

   if (isLastChunk) {
    // storage.objects stores the object metadata of all objects
    // It doubles up as a way to enforce authorization.
    // If a user is able to insert into this table, they can upload.
    await db.run('insert into storage.objects(..) values(..)')
   }
});

// the advisory lock is automatically released at this point

----------------------------------------

TITLE: SQL Error Handling Example
DESCRIPTION: Demonstrates how the parser should handle SQL syntax errors gracefully by continuing parsing after encountering errors.

LANGUAGE: sql
CODE:
create table posts (
  id serial primary key # <- ERR: missing comma, Parser should continue
  content text
);

create table comments (
  id serial primary key,
  post_id int references posts # <- ERR: missing comma, second error returned
  comment text
);

----------------------------------------

TITLE: Creating Database from Template0
DESCRIPTION: Shows how to create a new database using template0, which is useful for clean installations or changing encodings.

LANGUAGE: sql
CODE:
CREATE DATABASE new_db_name TEMPLATE template0;

----------------------------------------

TITLE: Accessing Custom Schema with Supabase Dart Client
DESCRIPTION: Dart code showing how to initialize the Supabase client for Flutter with a custom schema and make queries. Demonstrates both global schema setting and per-query schema selection.

LANGUAGE: dart
CODE:
// Initialize the Flutter client
await Supabase.initialize(
  url: supabaseUrl,
  anonKey: supabaseKey,
  postgrestOptions: const PostgrestClientOptions(schema: 'myschema'),
);
final supabase = Supabase.instance.client;

// Make a request
final data = await supabase.from('todos').select();

// You can also change the target schema on a per-query basis
final data = await supabase.schema('myschema').from('todos').select();

----------------------------------------

TITLE: Installing Checkbox Component via CLI
DESCRIPTION: Command to install the checkbox component using the shadcn-ui CLI tool

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add checkbox

----------------------------------------

TITLE: Initializing Drizzle ORM with Vercel Postgres
DESCRIPTION: Sets up a Drizzle ORM configuration for a Users table and initializes a connection to Vercel Postgres. It defines table schema, types, and creates a database connection instance.

LANGUAGE: typescript
CODE:
import { pgTable, serial, text, timestamp, uniqueIndex } from 'drizzle-orm/pg-core'
import { InferSelectModel, InferInsertModel } from 'drizzle-orm'
import { sql } from '@vercel/postgres'
import { drizzle } from 'drizzle-orm/vercel-postgres'

export const UsersTable = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: text('name').notNull(),
    email: text('email').notNull(),
    image: text('image').notNull(),
    createdAt: timestamp('createdAt').defaultNow().notNull(),
  },
  (users) => {
    return {
      uniqueIdx: uniqueIndex('unique_idx').on(users.email),
    }
  }
)

export type User = InferSelectModel<typeof UsersTable>
export type NewUser = InferInsertModel<typeof UsersTable>

// Connect to Vercel Postgres
export const db = drizzle(sql)

----------------------------------------

TITLE: Creating and Populating Sample Instruments Table in SQL
DESCRIPTION: SQL commands to create a sample 'instruments' table and insert test data. This setup is used to demonstrate the explain() method.

LANGUAGE: sql
CODE:
create table instruments (
  id int8 primary key,
  name text
);

insert into books
  (id, name)
values
  (1, 'violin'),
  (2, 'viola'),
  (3, 'cello');

----------------------------------------

TITLE: Filtering Postgres Logs by Query Pattern in SQL
DESCRIPTION: This SQL snippet demonstrates how to filter Postgres logs to find queries matching a specific pattern using regular expressions.

LANGUAGE: sql
CODE:
-- find queries executed by the Dashboard
...query
where
  regexp_contains(parsed.query, '(?i)select . <some table>')

----------------------------------------

TITLE: Configuring robots.txt for Supabase Domain
DESCRIPTION: Basic robots.txt configuration that allows all user agents to access the site and specifies the location of the XML sitemap at supabase.com/sitemap.xml.

LANGUAGE: robotstxt
CODE:
User-agent: *
Sitemap: https://supabase.com/sitemap.xml

----------------------------------------

TITLE: SQL Equivalent of Offset Pagination
DESCRIPTION: Demonstrates the SQL equivalent of offset-based pagination using LIMIT and OFFSET clauses.

LANGUAGE: graphql
CODE:
select
    *
from
    blog
limit
    2
offset
    5

----------------------------------------

TITLE: OpenAPI Specification Generator
DESCRIPTION: Script using swagger-jsdoc to generate OpenAPI specification from JSDoc comments in the code.

LANGUAGE: typescript
CODE:
// /scripts/generate-openapi-spec.ts
import swaggerJsdoc from 'npm:swagger-jsdoc@6.2.8'

const options = {
  definition: {
    openapi: '3.0.1',
    info: {
      title: 'TODO Plugin',
      description: `A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username "global".`,
      version: '1.0.0',
    },
    servers: [{ url: 'http://localhost:8000' }],
  },
  apis: ['./functions/chatgpt-plugin/index.ts'],
}

const openapiSpecification = swaggerJsdoc(options)
const openapiString = JSON.stringify(openapiSpecification, null, 2)
const encoder = new TextEncoder()
const data = encoder.encode(openapiString)
await Deno.writeFile('./functions/chatgpt-plugin/openapi.json', data)
console.log(openapiString)

----------------------------------------

TITLE: Installing Supabase C# Package via NuGet
DESCRIPTION: Command to install the supabase-csharp package using the .NET CLI. This adds the Supabase client library to a C# project through the NuGet package manager.

LANGUAGE: sh
CODE:
dotnet add package supabase-csharp

----------------------------------------

TITLE: Querying JSONB Data with GIN Index in Postgres
DESCRIPTION: Shows an example of a query that will utilize a GIN index on JSONB data. The @> operator is used to check if the JSON column contains a specific structure.

LANGUAGE: SQL
CODE:
SELECT id FROM some_table
WHERE data @> '[ { "itemId": "p11" } ]';

----------------------------------------

TITLE: Using max-affected Preference for DELETE Operations
DESCRIPTION: Demonstrates how to use the new max-affected preference to limit the number of rows affected by a DELETE operation, with error handling when the limit is exceeded.

LANGUAGE: bash
CODE:
curl -i "http://localhost:3000/items?id=lt.15" -X DELETE \
  -H "Content-Type: application/json" \
  -H "Prefer: handling=strict, max-affected=10"

----------------------------------------

TITLE: Quota Error Types for WebSocket Connections
DESCRIPTION: Describes the different error messages that can be received when exceeding Realtime service quotas. These include limits on channels per connection, total concurrent connections, channel join rate, and message throughput.

LANGUAGE: text
CODE:
too_many_channels
too_many_connections
too_many_joins
tenant_events

----------------------------------------

TITLE: Installing Aspect Ratio Dependencies Manually
DESCRIPTION: Command to manually install the required Radix UI aspect ratio dependency using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-aspect-ratio

----------------------------------------

TITLE: Using Adaptive Retrieval Function in SQL
DESCRIPTION: Example of how to use the Adaptive Retrieval function in an SQL query.

LANGUAGE: sql
CODE:
select
  *
from match_documents_adaptive(query_embedding, 10);

----------------------------------------

TITLE: Creating Partitioned Parent Tables
DESCRIPTION: Sets up the parent tables with partitioning enabled and appropriate indexes.

LANGUAGE: sql
CODE:
BEGIN;
CREATE SCHEMA app;

CREATE TABLE app.chats(
    id bigserial,
    created_at timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (id, created_at)
    ) PARTITION BY RANGE (created_at);

CREATE INDEX "chats_created_at" ON app.chats (created_at);

CREATE TABLE app.chat_messages(
    id bigserial,
    created_at timestamptz NOT NULL,
    chat_id bigint NOT NULL,
    chat_created_at timestamptz NOT NULL,
    message text NOT NULL,
    PRIMARY KEY (id, created_at),
    FOREIGN KEY (chat_id, chat_created_at)
        REFERENCES app.chats(id, created_at)
    ) PARTITION BY RANGE (created_at);

CREATE INDEX "chat_messages_created_at" ON app.chat_messages (created_at);
CREATE INDEX "chat_messages_chat_id_chat_created_at"
    ON app.chat_messages (chat_id, chat_created_at);

----------------------------------------

TITLE: Installing Supabase Python Library
DESCRIPTION: Command to install the Supabase library using pip package manager.

LANGUAGE: bash
CODE:
pip install supabase

----------------------------------------

TITLE: Using EXPLAIN ANALYZE for Query Optimization
DESCRIPTION: Demonstrates how to use the EXPLAIN ANALYZE command to get detailed query execution plans for optimizing poorly performing queries.

LANGUAGE: sql
CODE:
explain analyze <query-statement-here>;

----------------------------------------

TITLE: Using EXPLAIN ANALYZE for Query Optimization
DESCRIPTION: Demonstrates how to use the EXPLAIN ANALYZE command to get detailed query execution plans for optimizing poorly performing queries.

LANGUAGE: sql
CODE:
explain analyze <query-statement-here>;

----------------------------------------

TITLE: Signing Out Users with Scope in Kotlin using Supabase Auth
DESCRIPTION: This snippet shows how to sign out users with different scopes using the Supabase Kotlin client library. It demonstrates both the default local scope and the global scope for signing out.

LANGUAGE: kotlin
CODE:
// defaults to the local scope
await supabase.auth.signOut();

// sign out from all sessions
supabase.auth.signOut(SignOutScope.GLOBAL)

----------------------------------------

TITLE: Making a POST Request to Local Supabase Function
DESCRIPTION: This cURL command demonstrates how to make a POST request to a locally running Supabase function using Oak middleware. It includes headers for authorization and content type, along with a JSON payload.

LANGUAGE: bash
CODE:
curl --location --request POST 'http://localhost:54321/functions/v1/oak-server/greet' \
--header 'Authorization: Bearer YOUR_TOKEN' \
--header 'Content-Type: application/json' \
--data-raw '{ "name": "John Doe" }'

----------------------------------------

TITLE: Using InfoTooltip Component with Props
DESCRIPTION: Demonstrates basic usage of the InfoTooltip component with the 'side' prop set to top position and custom tooltip content.

LANGUAGE: tsx
CODE:
<InfoTooltip side="top">This is the tooltip content</InfoTooltip>

----------------------------------------

TITLE: Starting Supabase and React Development Servers
DESCRIPTION: Commands to start both the Supabase backend services and React frontend development server.

LANGUAGE: bash
CODE:
supabase start  # Start Supabase
npm start       # Start the React app

----------------------------------------

TITLE: Configuring Postgres WAL Size using Supabase CLI
DESCRIPTION: This snippet demonstrates how to use the Supabase CLI to configure Postgres parameters, specifically increasing the default WAL size to 2GB for improved replication control.

LANGUAGE: sql
CODE:
supabase --experimental --project-ref xxxx-yyy \
postgres-config update --config max_slot_wal_keep_size=2GB

----------------------------------------

TITLE: Inspecting Cron Job Runs in SQL
DESCRIPTION: Queries the job run history from the cron.job_run_details table for a specific job.

LANGUAGE: sql
CODE:
select
  *
from cron.job_run_details
where jobid = (select jobid from cron.job where jobname = 'permanent-cron-job-name')
order by start_time desc
limit 10;

----------------------------------------

TITLE: Implementing Code Exchange Route in SvelteKit
DESCRIPTION: JavaScript code for implementing the Code Exchange route in SvelteKit for server-side auth flow.

LANGUAGE: javascript
CODE:
import { redirect } from '@sveltejs/kit'

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get('code')

  if (code) {
    await supabase.auth.exchangeCodeForSession(code)
  }

  redirect(303, '/')
}

----------------------------------------

TITLE: Main App Configuration
DESCRIPTION: Main app configuration and initialization of Repository

LANGUAGE: dart
CODE:
import 'package:my_app/brick/repository.dart';
import 'package:sqflite/sqflite.dart' show databaseFactory;

Future<void> main() async {
  await Repository.configure(databaseFactory);
  await Repository().initialize();
  runApp(MyApp());
}

----------------------------------------

TITLE: Creating a New Laravel Project with Composer
DESCRIPTION: Use Composer to scaffold a new Laravel project. This command creates a new Laravel application in the 'example-app' directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel example-app

----------------------------------------

TITLE: Deploying Supabase OG Image Generator
DESCRIPTION: Command to deploy the OG image generation function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy lw13-meetups-ogs --no-verify-jwt

----------------------------------------

TITLE: Inserting Overlapping Reservations with Constraint in SQL
DESCRIPTION: These SQL insert statements demonstrate how the exclusion constraint prevents overlapping reservations. The second insert fails due to the constraint.

LANGUAGE: sql
CODE:
-- Add a first reservation
insert into reservations (title, duration)
values ('Tyler Dinner', '[2024-07-04 18:00, 2024-07-04 21:00)');

-- The following insert fails because the duration overlaps with the above
insert into reservations (title, duration)
values ('Thor Dinner', '[2024-07-04 20:00, 2024-07-04 22:00)');

----------------------------------------

TITLE: Creating a Next.js Page Template with Authentication in TypeScript
DESCRIPTION: This code snippet demonstrates a template for building authenticated pages in a Next.js application using TypeScript. It includes imports for layout components, interface components, and UI components, and wraps the page with an authentication higher-order component.

LANGUAGE: tsx
CODE:
import { NextPage } from 'next'
import { withAuth } from 'hooks/misc/withAuth'

// Import the corresponding layout based on the page
import { Layout } from 'components/layouts'

// Import the main building blocks of the page
import { ... } from 'components/interfaces/xxx'

// Import reusable UI components if needed
import { ... } from 'components/ui/xxx'

// Name your page accordingly
const Page: NextPage = () => {

  return (
    <Layout>
      <div>Page content</div>
    </Layout>
  )
}

export default withAuth(Page)

----------------------------------------

TITLE: Sentry Integration for Error Tracking
DESCRIPTION: Implementation example of Sentry error tracking in Edge Functions using the official Sentry SDK for Deno, including initialization, custom tag setting, and error handling.

LANGUAGE: jsx
CODE:
import * as Sentry from 'https://deno.land/x/sentry/index.mjs'

Sentry.init({
  dsn: _DSN_,
  integrations: [],
  // Performance Monitoring
  tracesSampleRate: 1.0,
  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
})

// Set region and execution_id as custom tags
Sentry.setTag('region', Deno.env.get('SB_REGION'))
Sentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))

Deno.serve(async (req) => {
  try {
    const { name } = await req.json()
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (e) {
    Sentry.captureException(e)
    return new Response(JSON.stringify({ msg: 'error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Getting Metrics for a Specific PGMQ Queue in SQL
DESCRIPTION: Retrieves metrics for a specific queue using the pgmq.metrics function.

LANGUAGE: sql
CODE:
select * from pgmq.metrics('my_queue');

----------------------------------------

TITLE: Handling ZIP File Upload with Deno Ephemeral Storage
DESCRIPTION: Example of using Deno's File System API to write an uploaded ZIP file to temporary storage. The code validates the content type, generates a unique ID for the file, and writes it to the /tmp directory for processing.

LANGUAGE: javascript
CODE:
Deno.serve(async (req) => {
  if (req.headers.get('content-type') !== 'application/zip') {
    return new Response('file must be a zip file', {
      status: 400,
    })
  }

  const uploadId = crypto.randomUUID()
  await Deno.writeFile('/tmp/' + uploadId, req.body)

  // do something with the written zip file

  return new Response('ok')
})

----------------------------------------

TITLE: Running Supabase Functions Locally for Connect-Supabase Integration
DESCRIPTION: This command serves the connect-supabase function locally without JWT verification, using environment variables from a local file.

LANGUAGE: bash
CODE:
supabase functions serve connect-supabase --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Apple Sign In with Kotlin Multiplatform
DESCRIPTION: Implement Apple Sign In using Compose Multiplatform and the Supabase Kotlin client with the ComposeAuth plugin.

LANGUAGE: kotlin
CODE:
val supabaseClient = createSupabaseClient(
	supabaseUrl = "SUPABASE_URL",
	supabaseKey = "SUPABASE_KEY"
) {
	install(GoTrue)
	install(ComposeAuth) {
		nativeAppleLogin()
	}
}

val authState = supabaseClient.composeAuth.rememberLoginWithApple(
	onResult = {
		when(it) { //handle errors
			NativeSignInResult.ClosedByUser -> TODO()
			is NativeSignInResult.Error -> TODO()
			is NativeSignInResult.NetworkError -> TODO()
			NativeSignInResult.Success -> TODO()
		}
	}
)

Button(onClick = { authState.startFlow() }) {
	Text("Sign in with Apple")
}

----------------------------------------

TITLE: Creating a new Expo app
DESCRIPTION: Command to create a new blank Expo application using create-expo-app.

LANGUAGE: bash
CODE:
npx create-expo-app@latest --template blank

----------------------------------------

TITLE: Updating Anonymous User to Permanent User
DESCRIPTION: JavaScript code to convert an anonymous user to a permanent user by adding an email.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .auth
  .updateUser({ email })

----------------------------------------

TITLE: Server Timing Header Example in PostgREST 12
DESCRIPTION: Shows the structure of the new Server-Timing header in PostgREST 12, which provides detailed timing information for various request processing phases.

LANGUAGE: bash
CODE:
Server-Timing:
	jwt;dur=14.9,
	parse;dur=71.1,
	plan;dur=109.0,
	transaction;dur=353.2,
	response;dur=4.4

----------------------------------------

TITLE: Initializing AI Model Session in TypeScript
DESCRIPTION: Basic setup for creating a new AI model inference session using Supabase.ai API.

LANGUAGE: typescript
CODE:
const model = new Supabase.ai.Session('model-name')

----------------------------------------

TITLE: Creating HNSW Index in SQL
DESCRIPTION: Basic SQL pattern for creating an HNSW index on a vectorized column. Supports three search types: Euclidean distance, negative inner product, and cosine distance.

LANGUAGE: sql
CODE:
CREATE INDEX <custom name of index> ON <table name> USING hnsw (<vectorized column> <search type>);

----------------------------------------

TITLE: Implementing Keyset Pagination in GraphQL
DESCRIPTION: Demonstrates how to implement keyset pagination by retrieving records after a specific cursor using first/after parameters.

LANGUAGE: graphql
CODE:
{
  blogCollection(
    first: 2,
    after: "Y3Vyc29yMQ=="
  ) {
  ...
}

----------------------------------------

TITLE: Server-Side Data Fetching Implementation
DESCRIPTION: Server component implementation showing data fetching with React Query and Supabase.

LANGUAGE: tsx
CODE:
import { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'
import { prefetchQuery } from '@supabase-cache-helpers/postgrest-react-query'
import useSupabaseServer from '@/utils/supabase-server'
import { cookies } from 'next/headers'
import Country from '../country'
import { getCountryById } from '@/queries/get-country-by-id'

export default async function CountryPage({ params }: { params: { id: number } }) {
  const queryClient = new QueryClient()
  const cookieStore = cookies()
  const supabase = useSupabaseServer(cookieStore)

  await prefetchQuery(queryClient, getCountryById(supabase, params.id))

  return (
    <HydrationBoundary state={dehydrate(queryClient)}>
      <Country id={params.id} />
    </HydrationBoundary>
  )
}

----------------------------------------

TITLE: Querying Vectors with Supabase JS Client
DESCRIPTION: JavaScript example showing how to query vector data using the Supabase client library.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('docs')
  .select('id, embedding, metadata')
  .eq('url', '/hello-world')

----------------------------------------

TITLE: Image Search Implementation
DESCRIPTION: Function to perform semantic image search using text queries

LANGUAGE: python
CODE:
def search(query_term: Optional[str] = None):
    if query_term is None:
        query_term = sys.argv[1]
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)
    text_emb = get_embedding_from_titan_multimodal(json.dumps(
        {
            "inputText": query_term,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    ))
    results = images.query(
        data=text_emb,
        limit=1,
        filters={"type": {"$eq": "jpg"}},
    )
    result = results[0]
    print(result)
    plt.title(result)
    image = mpimg.imread('./images/' + result)
    plt.imshow(image)
    plt.show()

----------------------------------------

TITLE: Deploying Upstash Redis Counter Function to Supabase
DESCRIPTION: These commands deploy the 'upstash-redis-counter' function to Supabase without JWT verification and set the secrets from the local environment file.

LANGUAGE: bash
CODE:
supabase functions deploy upstash-redis-counter --no-verify-jwt
supabase secrets set --env-file supabase/.env.local

----------------------------------------

TITLE: Installing Laravel Breeze Authentication Template
DESCRIPTION: Install Laravel Breeze, a simple authentication starter kit, and run the installation command to set it up in the project.

LANGUAGE: bash
CODE:
composer require laravel/breeze --dev
php artisan breeze:install

----------------------------------------

TITLE: React Video Component Integration
DESCRIPTION: JSX component for displaying a promotional video about the Supabase-Vercel integration, with autoplay and loop functionality.

LANGUAGE: jsx
CODE:
<video
  width="99%"
  autoPlay
  disablePictureInPicture
  loop
  muted
  playsInline
  controls={false}
  className="rounded-md border"
>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/vercel-marketplace/supabase-integration.mp4?t=2024-08-28T16%3A31%3A37.197Z"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Installing Supabase Dependencies with Gradle Kotlin DSL
DESCRIPTION: Adding Supabase core dependencies using Gradle Kotlin DSL build system. Includes PostgREST, GoTrue, and Realtime modules.

LANGUAGE: kotlin
CODE:
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:gotrue-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")

----------------------------------------

TITLE: Defining User Model
DESCRIPTION: Example of defining a User model with Brick annotations for Supabase and SQLite integration

LANGUAGE: dart
CODE:
import 'package:brick_offline_first_with_supabase/brick_offline_first_with_supabase.dart';
import 'package:brick_sqlite/brick_sqlite.dart';
import 'package:brick_supabase/brick_supabase.dart';
import 'package:uuid/uuid.dart';

@ConnectOfflineFirstWithSupabase(
  supabaseConfig: SupabaseSerializable(tableName: 'users'),
)
class User extends OfflineFirstWithSupabaseModel {
  final String name;

  @Supabase(unique: true)
  @Sqlite(index: true, unique: true)
  final String id;

  User({
    String? id,
    required this.name,
  }) : this.id = id ?? const Uuid().v4();
}

----------------------------------------

TITLE: Implementing Real-time Canvas Synchronization
DESCRIPTION: Set up Supabase Realtime channel and implement methods for syncing canvas objects.

LANGUAGE: dart
CODE:
Future<void> _initialize() async {
  _myId = const Uuid().v4();

  _canvasChanel = supabase
      .channel(Constants.channelName)
      .onBroadcast(
          event: Constants.broadcastEventName,
          callback: (payload) {
            final cursor = UserCursor.fromJson(payload['cursor']);
            _userCursors[cursor.id] = cursor;

            if (payload['object'] != null) {
              final object = CanvasObject.fromJson(payload['object']);
              _canvasObjects[object.id] = object;
            }
            setState(() {});
          })
      .subscribe();

  final initialData = await supabase
      .from('canvas_objects')
      .select()
      .order('created_at', ascending: true);
  for (final canvasObjectData in initialData) {
    final canvasObject = CanvasObject.fromJson(canvasObjectData['object']);
    _canvasObjects[canvasObject.id] = canvasObject;
  }
  setState(() {});
}

Future<void> _syncCanvasObject(Offset cursorPosition) {
  final myCursor = UserCursor(
    position: cursorPosition,
    id: _myId,
  );
  return _canvasChanel.sendBroadcastMessage(
    event: Constants.broadcastEventName,
    payload: {
      'cursor': myCursor.toJson(),
      if (_currentlyDrawingObjectId != null)
        'object': _canvasObjects[_currentlyDrawingObjectId]?.toJson(),
    },
  );
}

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: Command to create a local environment configuration file by copying the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Popping a Message from PGMQ Queue in SQL
DESCRIPTION: Reads and deletes a single message from a queue using the pgmq.pop function.

LANGUAGE: sql
CODE:
select * from pgmq.pop('my_queue');

----------------------------------------

TITLE: Setting Statement Cost Limits with pg_plan_filter
DESCRIPTION: SQL commands to configure statement cost limits for different user roles using the pg_plan_filter extension.

LANGUAGE: sql
CODE:
ALTER USER anon SET plan_filter.statement_cost_limit = 10000;

ALTER USER authenticated SET plan_filter.statement_cost_limit = 1e6;

ALTER USER service_role SET plan_filter.statement_cost_limit = 0;

NOTIFY pgrst, 'reload config';

----------------------------------------

TITLE: Information Schema Table Query
DESCRIPTION: cURL command to query the information schema for table names in public schema

LANGUAGE: bash
CODE:
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/tables?select=table_name,table_schema&table_schema=eq.public' -H 'accept-profile: information_schema' -H "apikey: $ANON_KEY" -H "authorization: Bearer $ANON_KEY"

----------------------------------------

TITLE: Defining Example Projects Array in JavaScript/JSX
DESCRIPTION: Array of AI example projects with their names, descriptions and documentation links for display in the UI.

LANGUAGE: javascript
CODE:
export const examples = [
  {
    name: 'Headless Vector Search',
    description: 'A toolkit to perform vector similarity search on your knowledge base embeddings.',
    href: '/guides/ai/examples/headless-vector-search',
  },
  {
    name: 'Image Search with OpenAI CLIP',
    description: 'Implement image search with the OpenAI CLIP Model and Supabase Vector.',
    href: '/guides/ai/examples/image-search-openai-clip',
  },
  {
    name: 'Hugging Face inference',
    description: 'Generate image captions using Hugging Face.',
    href: '/guides/ai/examples/huggingface-image-captioning',
  },
  {
    name: 'OpenAI completions',
    description: 'Generate GPT text completions using OpenAI in Edge Functions.',
    href: '/guides/ai/examples/openai',
  },
  {
    name: 'Building ChatGPT Plugins',
    description: 'Use Supabase as a Retrieval Store for your ChatGPT plugin.',
    href: '/guides/ai/examples/building-chatgpt-plugins',
  },
  {
    name: 'Vector search with Next.js and OpenAI',
    description: 'Learn how to build a ChatGPT-style doc search powered by Next.js, OpenAI, and Supabase.',
    href: '/guides/ai/examples/nextjs-vector-search',
  },
]

----------------------------------------

TITLE: Starting Supabase Analytics with BigQuery Backend
DESCRIPTION: Commands to start the Analytics server using docker-compose with BigQuery backend configuration after setting up the necessary environment variables and service account key.

LANGUAGE: bash
CODE:
# assuming you clone the supabase/supabase repo.
cd docker
docker compose -f docker-compose.yml

----------------------------------------

TITLE: Combining Data Fetching and Mutations with Server Actions
DESCRIPTION: This example illustrates how to combine data fetching and mutations using Server Components and Server Actions in Next.js. It fetches data and defines a server-side action for creating a new note.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const { data } = await supabase.from('...').select()

  const createNote = async () => {
    'use server'
    await supabase.from('...').insert({...})
  }

  return ...
}

----------------------------------------

TITLE: Unlinking OAuth Identity in Supabase Auth
DESCRIPTION: Shows how to retrieve user identities and unlink a specific OAuth provider identity from a user account.

LANGUAGE: jsx
CODE:
const {
  data: { identities },
} = await supabase.auth.getUserIdentities()

const googleIdentity = identities.find(({ provider }) => provider === 'google')

const { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)

----------------------------------------

TITLE: Initializing Supabase Client in Flutter
DESCRIPTION: Code to initialize the Supabase client with project URL and anonymous key in the main Flutter application file

LANGUAGE: dart
CODE:
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(MyApp());
}

----------------------------------------

TITLE: Deploying and Configuring Function
DESCRIPTION: Commands for deploying the function and setting up environment variables

LANGUAGE: bash
CODE:
supabase functions deploy send-email --no-verify-jwt

LANGUAGE: bash
CODE:
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_HOOK_SECRET=<base64_secret>

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Deploying and Configuring Function
DESCRIPTION: Commands for deploying the function and setting up environment variables

LANGUAGE: bash
CODE:
supabase functions deploy send-email --no-verify-jwt

LANGUAGE: bash
CODE:
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_HOOK_SECRET=<base64_secret>

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Deploying and Configuring Function
DESCRIPTION: Commands for deploying the function and setting up environment variables

LANGUAGE: bash
CODE:
supabase functions deploy send-email --no-verify-jwt

LANGUAGE: bash
CODE:
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_HOOK_SECRET=<base64_secret>

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Deploying and Configuring Function
DESCRIPTION: Commands for deploying the function and setting up environment variables

LANGUAGE: bash
CODE:
supabase functions deploy send-email --no-verify-jwt

LANGUAGE: bash
CODE:
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_HOOK_SECRET=<base64_secret>

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Deploying and Configuring Function
DESCRIPTION: Commands for deploying the function and setting up environment variables

LANGUAGE: bash
CODE:
supabase functions deploy send-email --no-verify-jwt

LANGUAGE: bash
CODE:
RESEND_API_KEY=your_resend_api_key
SEND_EMAIL_HOOK_SECRET=<base64_secret>

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/.env

----------------------------------------

TITLE: Dropping Old Column in PostgreSQL
DESCRIPTION: This SQL command removes the old column from the table after data has been migrated to the new column. It's the final step in the alternative approach for changing column types in large tables.

LANGUAGE: sql
CODE:
ALTER TABLE "table_name" DROP COLUMN "old_column_name";

----------------------------------------

TITLE: Installing Supabase using Deno
DESCRIPTION: This command installs the Supabase JavaScript client library using Deno's add command.

LANGUAGE: bash
CODE:
deno add @supabase/supabase-js

----------------------------------------

TITLE: Sending Presence State in Supabase
DESCRIPTION: Shows how to send state to all subscribers using the track() method in a Supabase channel. This triggers sync and join events for other clients.

LANGUAGE: javascript
CODE:
const roomOne = supabase.channel('room_01')

const userStatus = {
  user: 'user-1',
  online_at: new Date().toISOString(),
}

roomOne.subscribe(async (status) => {
  if (status !== 'SUBSCRIBED') { return }

  const presenceTrackStatus = await roomOne.track(userStatus)
  console.log(presenceTrackStatus)
})

LANGUAGE: dart
CODE:
final roomOne = supabase.channel('room_01');

final userStatus = {
  'user': 'user-1',
  'online_at': DateTime.now().toIso8601String(),
};

roomOne.subscribe((status, error) async {
  if (status != RealtimeSubscribeStatus.subscribed) return;

  final presenceTrackStatus = await roomOne.track(userStatus);
  print(presenceTrackStatus);
});

LANGUAGE: swift
CODE:
let roomOne = await supabase.channel("room_01")

// Using a custom type
let userStatus = UserStatus(
    user: "user-1",
    onlineAt: Date().timeIntervalSince1970
)

await roomOne.subscribe()

try await roomOne.track(userStatus)

// Or using a raw JSONObject.
await roomOne.track(
  [
    "user": .string("user-1"),
    "onlineAt": .double(Date().timeIntervalSince1970)
  ]
)

LANGUAGE: kotlin
CODE:
val roomOne = supabase.channel("room_01")

val userStatus = UserStatus( //Your custom class
    user = "user-1",
    onlineAt = Clock.System.now().toEpochMilliseconds()
)

roomOne.subscribe(blockUntilSubscribed = true) //You can also use the roomOne.status flow instead, but this parameter will block the coroutine until the status is joined.

roomOne.track(userStatus)

LANGUAGE: python
CODE:
room_one = supabase.channel('room_01')

user_status = {
  "user": 'user-1',
  "online_at": datetime.datetime.now().isoformat(),
}

def on_subscribe(status, err):
  if status != RealtimeSubscribeStates.SUBSCRIBED:
    return

  room_one.track(user_status)

room_one.subscribe(on_subscribe)

----------------------------------------

TITLE: Handling Node Notifications in Elixir Clustering Strategy
DESCRIPTION: This function processes incoming notifications about new nodes and attempts to connect to them as part of the clustering strategy.

LANGUAGE: elixir
CODE:
def handle_info({:notification, _, _, _, node}, state) do
    node = String.to_atom(node)

    if node != node() do
      topology = state.topology
      Logger.debug(topology, "Trying to connect to node: #{node}")

      case Strategy.connect_nodes(topology, state.connect, state.list_nodes, [node]) do
        :ok -> Logger.debug(topology, "Connected to node: #{node}")
        {:error, _} -> Logger.error(topology, "Failed to connect to node: #{node}")
      end
    end

    {:noreply, state}
  end

----------------------------------------

TITLE: ChatGPT Plugin API Implementation
DESCRIPTION: API implementation using Deno oak router with OpenAPI/Swagger documentation annotations.

LANGUAGE: typescript
CODE:
// /functions/chatgpt-plugin/index.ts
import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts'
import openapi from './openapi.json' with { type: 'json' }

console.log('Hello from `chatgpt-plugin` Function!')

const _TODOS: { [key: string]: Array<string> } = {
  user: ['Build your own ChatGPT Plugin!'],
}

/**
 * @openapi
 * components:
 *   schemas:
 *     getTodosResponse:
 *       type: object
 *       properties:
 *         todos:
 *           type: array
 *           items:
 *             type: string
 *           description: The list of todos.
 */

const router = new Router()
router
  .get('/chatgpt-plugin', (ctx) => {
    ctx.response.body = 'Building ChatGPT plugins with Deno!'
  })
  /**
   * @openapi
   * /chatgpt-plugin/todos/{username}:
   *   get:
   *     operationId: getTodos
   *     summary: Get the list of todos
   *     parameters:
   *     - in: path
   *       name: username
   *       schema:
   *         type: string
   *       required: true
   *       description: The name of the user.
   *     responses:
   *       200:
   *         description: OK
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/getTodosResponse'
   */
  .get('/chatgpt-plugin/todos/:username', (ctx) => {
    const username = ctx.params.username.toLowerCase()
    ctx.response.body = _TODOS[username] ?? []
  })
  .get('/chatgpt-plugin/openapi.json', (ctx) => {
    ctx.response.body = JSON.stringify(openapi)
    ctx.response.headers.set('Content-Type', 'application/json')
  })

const app = new Application()
app.use(router.routes())
app.use(router.allowedMethods())

await app.listen({ port: 8000 })

----------------------------------------

TITLE: Creating and Managing Default Privileges
DESCRIPTION: Shows how to set up default access privileges for newly created tables

LANGUAGE: bash
CODE:
alter default privileges in schema public grant select on tables to senior_dev;

----------------------------------------

TITLE: Enforcing MFA for All Users with PostgreSQL RLS
DESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that enforces Multi-Factor Authentication for all authenticated users by checking the 'aal' claim in the JWT.

LANGUAGE: sql
CODE:
create policy "Enforce MFA for all end users."
  on table_name
  as restrictive
  to authenticated
  using ( (select auth.jwt()->>'aal') = 'aal2' );

----------------------------------------

TITLE: Configuring Database Settings in TOML
DESCRIPTION: Demonstrates how to update database settings, specifically enabling track_commit_timestamp, using the config.toml file.

LANGUAGE: toml
CODE:
[db.settings]
track_commit_timestamp = true

----------------------------------------

TITLE: JWT-Based Team Access Policy in Supabase SQL
DESCRIPTION: Example of using auth.jwt() helper function to implement team-based access control.

LANGUAGE: sql
CODE:
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));

----------------------------------------

TITLE: Creating PostgreSQL Function with Parameters
DESCRIPTION: Function that calculates total price from order items, demonstrating parameter usage and fully qualified table names.

LANGUAGE: sql
CODE:
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;

----------------------------------------

TITLE: Setting Neon Database Environment Variable
DESCRIPTION: Command to set the OLD_DB_URL environment variable with the Neon database connection string.

LANGUAGE: bash
CODE:
export OLD_DB_URL="postgresql://neondb_owner:xxxxxxxxxxxxxxx-random-word-yyyyyyyy.us-west-2.aws.neon.tech/neondb?sslmode=require"

----------------------------------------

TITLE: Setting Neon Database Environment Variable
DESCRIPTION: Command to set the OLD_DB_URL environment variable with the Neon database connection string.

LANGUAGE: bash
CODE:
export OLD_DB_URL="postgresql://neondb_owner:xxxxxxxxxxxxxxx-random-word-yyyyyyyy.us-west-2.aws.neon.tech/neondb?sslmode=require"

----------------------------------------

TITLE: Creating Supabase Client in Node.js
DESCRIPTION: This code creates a Supabase client instance using the project URL and anonymous key. These credentials are obtained from the Supabase dashboard.

LANGUAGE: javascript
CODE:
const supabase = createClient(
  'https://ajsstlnzcmdmzbtcgbbd.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
)

----------------------------------------

TITLE: Filtering Array Columns in GraphQL
DESCRIPTION: Example of filtering array-type columns using the contains operator in GraphQL queries.

LANGUAGE: graphql
CODE:
{
  blogCollection(filter: { tags: { contains: ["tech", "innovation"] } }) {
    edges {
      cursor
      node {
        name
        tags
        createdAt
      }
    }
  }
}

----------------------------------------

TITLE: Configuring KotlinX Serialization in Gradle Kotlin DSL
DESCRIPTION: This snippet shows how to set up KotlinX Serialization, the default serialization method for Supabase-kt, in a Gradle Kotlin DSL build file.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.serialization") version "KOTLIN_VERSION"
}

----------------------------------------

TITLE: Deploying Supabase Functions with Upstash Redis Configuration
DESCRIPTION: These commands deploy the Upstash Redis rate limiting function to Supabase and set the secrets from the local environment file.

LANGUAGE: bash
CODE:
supabase functions deploy upstash-redis-ratelimit
supabase secrets set --env-file supabase/.env.local

----------------------------------------

TITLE: Main App Configuration
DESCRIPTION: Main Flutter application setup with Supabase initialization.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:myauthapp/screens/login_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Auth',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const LoginScreen(),
    );
  }
}

----------------------------------------

TITLE: Interacting with the Database using Rails Console
DESCRIPTION: Use the Rails console to create and retrieve database entries for the Article model.

LANGUAGE: ruby
CODE:
article = Article.new(title: "Hello Rails", body: "I am on Rails!")
article.save # Saves the entry to the database

Article.all

----------------------------------------

TITLE: Embedding YouTube Video in React/JSX
DESCRIPTION: React component for embedding a YouTube video player with specific configuration options and security settings.

LANGUAGE: jsx
CODE:
<iframe
  className="w-full"
  src="https://www.youtube-nocookie.com/embed/51tCMQPiitQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
  allowfullscreen
></iframe>

----------------------------------------

TITLE: Creating Static Titles in React with InnerSideMenu
DESCRIPTION: This example shows how to use the InnerSideBarTitle component for static titles without collapsible features. It also demonstrates wrapping InnerSideMenuItem components in a div for custom layout.

LANGUAGE: jsx
CODE:
<InnerSideBarTitle>Projects</InnerSideBarTitle>
<div className="mt-2">
    <InnerSideMenuItem href="/dashboard">Dashboard</InnerSideMenuItem>
    <InnerSideMenuItem href="/team">Team</InnerSideMenuItem>
    <InnerSideMenuItem href="/settings">Settings</InnerSideMenuItem>
</div>

----------------------------------------

TITLE: Creating initial database migration for todos table
DESCRIPTION: SQL code to create the todos table with necessary columns and triggers for Legend-State integration.

LANGUAGE: sql
CODE:
create table todos (
  id uuid default gen_random_uuid() primary key,
  counter bigint generated by default as identity,
  text text,
  done boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  deleted boolean default false
);

alter
  publication supabase_realtime add table todos;

CREATE OR REPLACE FUNCTION handle_times()
    RETURNS trigger AS
    $$
    BEGIN
    IF (TG_OP = 'INSERT') THEN
        NEW.created_at := now();
        NEW.updated_at := now();
    ELSEIF (TG_OP = 'UPDATE') THEN
        NEW.created_at = OLD.created_at;
        NEW.updated_at = now();
    END IF;
    RETURN NEW;
    END;
    $$ language plpgsql;

CREATE TRIGGER handle_times
    BEFORE INSERT OR UPDATE ON todos
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();

----------------------------------------

TITLE: Example: Database Function Call
DESCRIPTION: Schedules a database function to be called every 5 minutes.

LANGUAGE: sql
CODE:
select cron.schedule('call-db-function', '*/5 * * * *', 'SELECT hello_world()');

----------------------------------------

TITLE: Building Supabase SolidJS Project for Production
DESCRIPTION: Command to build the application for production, creating optimized files in the 'dist' folder.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Enforcing MFA for Selected Users with PostgreSQL RLS
DESCRIPTION: This SQL snippet creates a restrictive Row Level Security policy that enforces Multi-Factor Authentication only for users who have set up MFA, by checking the 'aal' claim and the presence of verified MFA factors.

LANGUAGE: sql
CODE:
create policy "Allow access on table only if user has gone through MFA"
  on table_name
  as restrictive -- very important!
  to authenticated
  using (
    array[auth.jwt()->>'aal'] <@ (
      select
          case
            when count(id) > 0 then array['aal2']
            else array['aal1', 'aal2']
          end as aal
        from auth.mfa_factors
        where (select auth.uid()) = user_id and status = 'verified'
    ));

----------------------------------------

TITLE: New Error Handling in Supabase.js v1.0
DESCRIPTION: Updated error handling pattern that returns errors instead of throwing them

LANGUAGE: javascript
CODE:
const { data, error } = supabase.from('todos').select('*')
if (error) console.log(error)
// else, carry on ..

----------------------------------------

TITLE: Implementing Google One Tap Sign-in with Supabase Auth
DESCRIPTION: Demonstrates how to handle Google One Tap authentication response using Supabase's signInWithIdToken method. The code shows the callback function that processes the credential token received from Google's authentication service.

LANGUAGE: tsx
CODE:
async function handleSignInWithGoogle(response) {
  const { data, error } = await supabase.auth.signInWithIdToken({
    token: response.credential,
    nonce: 'NONCE', // must be the same one as provided in data-nonce (if any)
  })
}

----------------------------------------

TITLE: Creating Embedding Generation Function
DESCRIPTION: SQL function that generates embeddings for provided text using the edge function.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION edge.generate_embedding(input_text TEXT) RETURNS JSONB AS $$
DECLARE
    response JSONB;
BEGIN
    -- Call the edge function to generate the embedding for the provided text
    response := edge.exec(
        format(
            $js$
            const session = new Supabase.ai.Session('gte-small');
            return await session.run(%L);
            $js$,
            input_text
        )
    );
    RETURN response->'response'->'data';
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Creates a new Laravel project using Composer package manager.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel example-app

----------------------------------------

TITLE: Deploying the Amazon Bedrock Function to Supabase
DESCRIPTION: Commands to link the local project to Supabase, deploy the function, and set the environment variables for the hosted project.

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy amazon-bedrock
supabase secrets set --env-file supabase/.env

----------------------------------------

TITLE: Deploying the Amazon Bedrock Function to Supabase
DESCRIPTION: Commands to link the local project to Supabase, deploy the function, and set the environment variables for the hosted project.

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy amazon-bedrock
supabase secrets set --env-file supabase/.env

----------------------------------------

TITLE: Deploying the Amazon Bedrock Function to Supabase
DESCRIPTION: Commands to link the local project to Supabase, deploy the function, and set the environment variables for the hosted project.

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy amazon-bedrock
supabase secrets set --env-file supabase/.env

----------------------------------------

TITLE: Deploying the Amazon Bedrock Function to Supabase
DESCRIPTION: Commands to link the local project to Supabase, deploy the function, and set the environment variables for the hosted project.

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy amazon-bedrock
supabase secrets set --env-file supabase/.env

----------------------------------------

TITLE: Deploying the Amazon Bedrock Function to Supabase
DESCRIPTION: Commands to link the local project to Supabase, deploy the function, and set the environment variables for the hosted project.

LANGUAGE: bash
CODE:
supabase link
supabase functions deploy amazon-bedrock
supabase secrets set --env-file supabase/.env

----------------------------------------

TITLE: Setting up the React Three Fiber Canvas
DESCRIPTION: Initializes the React Three Fiber Canvas with basic scene elements and particle rendering.

LANGUAGE: jsx
CODE:
return (
  <div style={{ width: 100vw, height: 100vh, background: "#000000" }}>
    <Canvas
      dpr={[1, 2]}
      camera={{ fov: 75, position: [0, 0, 500] }}
    >
      <ambientLight intensity={0.3} />
      <group>
        {particles?.map((particle, index) => (
          <mesh
            key={particle.username}
          >
            <Geometry />
            <Material />
          </mesh>
        ))}
      </group>
    </Canvas>
  </div>
)

----------------------------------------

TITLE: Implementing Flask Session Storage for Supabase
DESCRIPTION: Custom implementation of SyncSupportedStorage class to handle session management for Supabase authentication in Flask. Handles getting, setting, and removing JWT sessions.

LANGUAGE: python
CODE:
from gotrue import SyncSupportedStorage
from flask import session

class FlaskSessionStorage(SyncSupportedStorage):
    def __init__(self):
        self.storage = session

    def get_item(self, key: str) -> str | None:
        if key in self.storage:
            return self.storage[key]

    def set_item(self, key: str, value: str) -> None:
        self.storage[key] = value

    def remove_item(self, key: str) -> None:
        if key in self.storage:
            self.storage.pop(key, None)

----------------------------------------

TITLE: Creating an email and password authentication form in React Native
DESCRIPTION: Implements a React Native component for email and password sign-in and sign-up using Supabase authentication.

LANGUAGE: tsx
CODE:
import React, { useState } from 'react'
import { Alert, StyleSheet, View } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

export default function EmailForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})

----------------------------------------

TITLE: Managing SSO Authentication with Supabase CLI
DESCRIPTION: CLI commands for managing Single Sign-On authentication providers in Supabase projects. Includes commands for adding, listing, removing, and updating SSO providers.

LANGUAGE: bash
CODE:
$ supabase sso --help
Manage Single Sign-On (SSO) authentication for projects

Usage:
  supabase sso [command]

Available Commands:
  add         Add a new SSO identity provider
  info        Returns the SAML SSO settings required for the identity provider
  list        List all SSO identity providers for a project
  remove      Remove an existing SSO identity provider
  show        Show information about an SSO identity provider
  update      Update information about an SSO identity provider

----------------------------------------

TITLE: Creating and Populating Sparse Vector Table
DESCRIPTION: Demonstrates creation and population of a table using sparse vectors, which only store non-zero components to save space.

LANGUAGE: sql
CODE:
create embedding_sparse (
  id serial,
  vector sparsevec(1536),
  primary key (id)
)

insert into embedding_sparse (embedding) values ('{1:0.1,3:0.2,5:0.3}/1536'), ('{1:0.4,3:0.5,5:0.6}/1536');

----------------------------------------

TITLE: Starting Local Supabase Database for Development
DESCRIPTION: This command initiates a local Supabase database instance for development purposes using the Supabase CLI.

LANGUAGE: bash
CODE:
npx supabase db start

----------------------------------------

TITLE: Video Player Implementation
DESCRIPTION: HTML video player implementation for demonstrating Supabase features with MP4 source.

LANGUAGE: html
CODE:
<video width="99%" autoPlay muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/duplicate-tables.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Implementing Access Restriction with Supabase Edge Function
DESCRIPTION: TypeScript code for a Supabase Edge Function to restrict access to PMTiles files in a private storage bucket.

LANGUAGE: typescript
CODE:
const ALLOWED_ORIGINS = ['http://localhost:8000']
const corsHeaders = {
  'Access-Control-Allow-Origin': ALLOWED_ORIGINS.join(','),
  'Access-Control-Allow-Headers':
    'authorization, x-client-info, apikey, content-type, range, if-match',
  'Access-Control-Expose-Headers': 'range, accept-ranges, etag',
  'Access-Control-Max-Age': '300',
}

Deno.serve((req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Check origin
  const origin = req.headers.get('Origin')

  if (!origin || !ALLOWED_ORIGINS.includes(origin)) {
    return new Response('Not Allowed', { status: 405 })
  }

  const reqUrl = new URL(req.url)
  const url = `${Deno.env.get('SUPABASE_URL')}/storage/v1/object/authenticated${reqUrl.pathname}`

  const { method, headers } = req
  // Add Auth header
  const modHeaders = new Headers(headers)
  modHeaders.append('authorization', `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!}`)
  return fetch(url, { method, headers: modHeaders })
})

----------------------------------------

TITLE: Configuring VSCode Settings for Deno in Supabase Functions
DESCRIPTION: VSCode settings to enable Deno language server for specific subfolder paths in a project and configure import maps for Supabase Functions.

LANGUAGE: json
CODE:
{
  "deno.enablePaths": ["./supabase/functions"],
  "deno.importMap": "./supabase/functions/import_map.json"
}

----------------------------------------

TITLE: iOS URL Configuration
DESCRIPTION: Configuration for iOS URL schemes in Info.plist to enable Google Sign-in.

LANGUAGE: plist
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <!-- TODO Replace this value: -->
      <!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->
      <string>com.googleusercontent.apps.my-ios</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Creating pgvector Extension in SQL
DESCRIPTION: SQL command to enable the pgvector extension in the database.

LANGUAGE: sql
CODE:
create extension vector
with
  schema extensions;

----------------------------------------

TITLE: Importing Command Component in React
DESCRIPTION: This code snippet shows how to import various subcomponents of the Command component in a React application.

LANGUAGE: tsx
CODE:
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from '@/components/ui/command'

----------------------------------------

TITLE: Adding Supabase KT Dependencies in Gradle Kotlin DSL
DESCRIPTION: This snippet shows how to add Supabase KT dependencies using the Bill of Materials (BOM) in a Gradle Kotlin DSL build file. It includes the core Postgrest, Auth, and Realtime modules.

LANGUAGE: kotlin
CODE:
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:auth-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in a Markdown document using an iframe. It includes responsive styling and various iframe attributes for security and functionality.

LANGUAGE: markdown
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/Vj5fPA-vjfw"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Using EXPLAIN with Supabase JS Client
DESCRIPTION: Demonstrates how to get query execution plans using the explain() transform in supabase-js

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', 1)
  .explain()

----------------------------------------

TITLE: Server Network Graph Schema for Resource Allocation
DESCRIPTION: SQL code to create and populate tables representing a network of servers and their connections for resource allocation routing.

LANGUAGE: sql
CODE:
-- create the servers table representing the nodes
create table servers (
  id serial primary key,
  name text,
  x double precision, -- x coordinate for spatial data (latitude)
  y double precision -- y coordinate for spatial data (longitude)
);

-- insert some sample servers
insert into servers (name, x, y)
values
  ('server a', 0, 0),
  ('server b', 2, 1),
  ('server c', 4, 3),
  ('server d', 3, 5);

-- create the server_connections table representing the edges
create table server_latency (
  id serial primary key,
  source integer,
  target integer,
  cost double precision, -- cost could represent latency or bandwidth
  x1 double precision, -- x coordinate of source
  y1 double precision, -- y coordinate of source
  x2 double precision, -- x coordinate of target
  y2 double precision, -- y coordinate of target,
  constraint fk_source foreign key (source) references servers (id),
  constraint fk_target foreign key (target) references servers (id)
);

-- insert connections between servers
insert into server_latency (source, target, cost, x1, y1, x2, y2)
values
  (1, 2, 1.5, 0, 0, 2, 1), -- server a -> server b with a cost of 1.5 (could be latency)
  (2, 3, 2.0, 2, 1, 4, 3), -- server b -> server c with a cost of 2.0
  (2, 4, 1.8, 2, 1, 3, 5), -- server b -> server d with a cost of 1.8
  (4, 3, 1.0, 3, 5, 4, 3);

----------------------------------------

TITLE: Deploying Discord Bot Function with Supabase CLI
DESCRIPTION: This snippet shows how to deploy the Discord bot function using the Supabase CLI and set the required secret for the Discord public key.

LANGUAGE: bash
CODE:
supabase functions deploy discord-bot --no-verify-jwt
supabase secrets set DISCORD_PUBLIC_KEY=your_public_key

----------------------------------------

TITLE: Stopping Supabase local services
DESCRIPTION: This command stops all running Supabase services without resetting the local database.

LANGUAGE: sh
CODE:
supabase stop

----------------------------------------

TITLE: Local Testing of Stripe Webhooks with Supabase Functions
DESCRIPTION: Commands for setting up a local testing environment for Stripe webhooks. This includes serving Supabase functions, forwarding Stripe events, and optionally triggering a test event.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt --env-file ./supabase/.env.local

LANGUAGE: bash
CODE:
stripe listen --forward-to localhost:54321/functions/v1/

LANGUAGE: bash
CODE:
stripe trigger payment_intent.succeeded

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Dart
DESCRIPTION: This Dart code snippet shows how to create a storage bucket named 'avatars' using the Supabase Dart client library. It initializes a SupabaseClient and calls the createBucket method on the storage object.

LANGUAGE: dart
CODE:
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .createBucket('avatars');
}

----------------------------------------

TITLE: Private Folder Upload Policy
DESCRIPTION: SQL policy allowing authenticated users to upload files to a 'private' folder within a specific bucket.

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = 'private'
);

----------------------------------------

TITLE: Private Folder Upload Policy
DESCRIPTION: SQL policy allowing authenticated users to upload files to a 'private' folder within a specific bucket.

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = 'private'
);

----------------------------------------

TITLE: Private Folder Upload Policy
DESCRIPTION: SQL policy allowing authenticated users to upload files to a 'private' folder within a specific bucket.

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = 'private'
);

----------------------------------------

TITLE: Private Folder Upload Policy
DESCRIPTION: SQL policy allowing authenticated users to upload files to a 'private' folder within a specific bucket.

LANGUAGE: sql
CODE:
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = 'private'
);

----------------------------------------

TITLE: Implementing WatermelonDB Sync with Supabase
DESCRIPTION: Sets up the synchronization function to pull and push changes between WatermelonDB and Supabase using RPC calls.

LANGUAGE: typescript
CODE:
import { SyncDatabaseChangeSet, synchronize } from '@nozbe/watermelondb/sync'

await synchronize({
  database,
  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {
    const { data, error } = await supabase.rpc('pull', {
      last_pulled_at: lastPulledAt,
    })

    const { changes, timestamp } = data as {
      changes: SyncDatabaseChangeSet
      timestamp: number
    }

    return { changes, timestamp }
  },
  pushChanges: async ({ changes, lastPulledAt }) => {
    const { error } = await supabase.rpc('push', { changes })
  },
  sendCreatedAsUpdated: true,
})

----------------------------------------

TITLE: Creating HNSW Index for Vector Similarity Search in SQL
DESCRIPTION: This SQL snippet demonstrates how to create an HNSW index on a column for vector similarity search using the inner product distance function. It's used to improve performance of semantic search queries.

LANGUAGE: sql
CODE:
-- Add a HNSW index for the inner product distance function
CREATE INDEX ON documents
USING hnsw (embedding vector_ip_ops);

----------------------------------------

TITLE: Listening to Schema Changes
DESCRIPTION: Sets up a listener for all changes in the public schema

LANGUAGE: javascript
CODE:
const channelA = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()

----------------------------------------

TITLE: Running Wrangler Development Server
DESCRIPTION: Command to start the Cloudflare Workers development server locally.

LANGUAGE: bash
CODE:
npx wrangler dev

----------------------------------------

TITLE: Authenticating Users with Server Actions in Next.js
DESCRIPTION: This snippet demonstrates how to use Server Actions in Next.js 14 to authenticate users with Supabase. It shows a simple form that triggers a server-side action to sign in with OAuth.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const signIn = async () => {
    'use server'
    supabase.auth.signInWithOAuth({...})
  }

  return (
    <form action={signIn}>
      <button>Sign in with GitHub</button>
    </form>
  )
}

----------------------------------------

TITLE: Initial Data Fetching with Next.js and Supabase
DESCRIPTION: Set up the Supabase client and fetch the first batch of tickets using getServerSideProps in Next.js.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('supabase-url', 'supabase-key')

export default function TicketsPage({ tickets }) {
  const [loadedTickets, setLoadedTickets] = useState(tickets)

  return (
    <div>
      {loadedTickets.map((ticket, index) => (
        {/* We'll get to this part later */}
      ))}
    </div>
  )

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const { data: tickets } = await supabase!
    .from('my_tickets_table')
    .select('*')
    .order('createdAt', { ascending: false })
    .limit(20)

  return {
    props: {
      tickets,
    },
  }
}

----------------------------------------

TITLE: Creating Directory Structure
DESCRIPTION: Command to create necessary directories for Brick's generated code

LANGUAGE: bash
CODE:
mkdir -p lib/brick/adapters lib/brick/db;

----------------------------------------

TITLE: Creating New Poetry Project
DESCRIPTION: Initialize a new Python project using Poetry

LANGUAGE: shell
CODE:
poetry new aws_bedrock_image_search

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: These commands start the Next.js development server. Users can choose between using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Deploying Stripe Webhooks to Supabase Functions
DESCRIPTION: Commands for deploying the Stripe webhooks function to Supabase and setting up the required environment secrets.

LANGUAGE: bash
CODE:
supabase functions deploy --no-verify-jwt stripe-webhooks

LANGUAGE: bash
CODE:
supabase secrets set --env-file ./supabase/.env.local

----------------------------------------

TITLE: Cleaning Up Inactive Anonymous Users
DESCRIPTION: SQL query to delete anonymous users that haven't been active for more than 30 days.

LANGUAGE: sql
CODE:
delete from auth.users
where is_anonymous is true and created_at < now() - interval '30 days';

----------------------------------------

TITLE: Updating MapLibre GL Configuration for Private Storage
DESCRIPTION: JavaScript code snippet to update the MapLibre GL configuration to use the Edge Function URL for accessing the private storage bucket.

LANGUAGE: javascript
CODE:
const map = new maplibregl.Map({
  hash: true,
  container: 'map',
  style: {
    version: 8,
    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
    sources: {
      protomaps: {
        attribution:
          '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
        type: 'vector',
        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',
      },
    },
    layers: protomaps_themes_base.default('protomaps', 'dark'),
  },
})

----------------------------------------

TITLE: Importing Node.js Built-in Module in TypeScript
DESCRIPTION: Shows how to import a Node.js built-in module using the node: specifier in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
import process from 'node:process'

----------------------------------------

TITLE: Importing JSR Module in TypeScript
DESCRIPTION: Illustrates how to import a module from JSR (JavaScript Registry) using the jsr: specifier in a Supabase Edge Function.

LANGUAGE: typescript
CODE:
import path from 'jsr:@std/path@1.0.8'

----------------------------------------

TITLE: Installing Flutter Dependencies
DESCRIPTION: Command to add Supabase and Google Sign-in packages to the Flutter project.

LANGUAGE: dart
CODE:
flutter pub add supabase_flutter google_sign_in

----------------------------------------

TITLE: Fetching Movie Data from TMDB API
DESCRIPTION: TypeScript code to fetch movie data from TMDB API using search parameters to get popular movies for a specific year.

LANGUAGE: typescript
CODE:
const searchParams = new URLSearchParams()
searchParams.set('sort_by', 'popularity.desc')
searchParams.set('page', '1')
searchParams.set('language', 'en-US')
searchParams.set('primary_release_year', `${year}`)
searchParams.set('include_adult', 'false')
searchParams.set('include_video', 'false')
searchParams.set('region', 'US')
searchParams.set('watch_region', 'US')
searchParams.set('with_original_language', 'en')

const tmdbResponse = await fetch(
  `https://api.themoviedb.org/3/discover/movie?${searchParams.toString()}`,
  {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${tmdbApiKey}`,
    },
  }
)

const tmdbJson = await tmdbResponse.json()

const tmdbStatus = tmdbResponse.status
if (!(200 <= tmdbStatus && tmdbStatus <= 299)) {
  return returnError({
    message: 'Error retrieving data from tmdb API',
  })
}

const films = tmdbJson.results

----------------------------------------

TITLE: Installing Carousel Component via CLI
DESCRIPTION: Command to install the carousel component using the shadcn-ui CLI.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add carousel

----------------------------------------

TITLE: Starting Python Web Server for Map Display
DESCRIPTION: Command to start a simple Python HTTP server to serve the index.html file containing the map visualization.

LANGUAGE: bash
CODE:
python3 -m http.server

----------------------------------------

TITLE: Granting Access to pg_cron Schema in PostgreSQL
DESCRIPTION: These SQL commands grant usage and privileges on the cron schema to a specified database user. This is necessary for non-superuser roles to schedule and run cron jobs.

LANGUAGE: sql
CODE:
grant usage on schema cron to {{DB user}};
grant all privileges on all tables in schema cron to {{DB user}};

----------------------------------------

TITLE: Running Local Development Environment
DESCRIPTION: Commands for starting Supabase locally and running the seed script

LANGUAGE: bash
CODE:
supabase start
poetry run seed

----------------------------------------

TITLE: Setting Custom Function Timeouts in PostgreSQL
DESCRIPTION: Shows how to create a function with a custom statement timeout using the new hoisted function settings feature. The timeout is applied per transaction.

LANGUAGE: sql
CODE:
create or replace function special_function()
returns void as $$
  select pg_sleep(3); -- simulating some long-running process
$$
language sql
set statement_timeout to '4s';

----------------------------------------

TITLE: Initializing Supabase Configuration
DESCRIPTION: Command to initialize Supabase and configure ports for the URL and PostgreSQL database.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: Configuring Supabase Project with Remote Environment
DESCRIPTION: Commands for linking and syncing a local Supabase project with a remote environment, including configuration and database schema synchronization.

LANGUAGE: bash
CODE:
SUPABASE_ENV=production npx supabase@latest link --project-ref <your-project-ref>

LANGUAGE: bash
CODE:
SUPABASE_ENV=production npx supabase@latest config push

LANGUAGE: bash
CODE:
SUPABASE_ENV=production npx supabase@latest db push

----------------------------------------

TITLE: Using Aspect Ratio Component
DESCRIPTION: Example showing how to implement the AspectRatio component with a 16:9 ratio wrapper around an image.

LANGUAGE: tsx
CODE:
<div className="w-[450px]">
  <AspectRatio ratio={16 / 9}>
    <Image src="..." alt="Image" className="rounded-md object-cover" />
  </AspectRatio>
</div>

----------------------------------------

TITLE: Invoking Turnstile Function from Client
DESCRIPTION: JavaScript code showing how to invoke the deployed Edge Function from the client side

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})

----------------------------------------

TITLE: Invoking Turnstile Function from Client
DESCRIPTION: JavaScript code showing how to invoke the deployed Edge Function from the client side

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})

----------------------------------------

TITLE: Invoking Turnstile Function from Client
DESCRIPTION: JavaScript code showing how to invoke the deployed Edge Function from the client side

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})

----------------------------------------

TITLE: Invoking Turnstile Function from Client
DESCRIPTION: JavaScript code showing how to invoke the deployed Edge Function from the client side

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})

----------------------------------------

TITLE: Invoking Turnstile Function from Client
DESCRIPTION: JavaScript code showing how to invoke the deployed Edge Function from the client side

LANGUAGE: javascript
CODE:
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})

----------------------------------------

TITLE: Configuring Supabase to Use Cookies on the Server
DESCRIPTION: This code snippet shows how to configure the Supabase client to use cookies instead of localStorage when running on the server. This is necessary for Server Components and other server-side features in Next.js.

LANGUAGE: tsx
CODE:
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    flowType: 'pkce',
    autoRefreshToken: false,
    detectSessionInUrl: false,
    persistSession: true,
    storage: {
      getItem: async (key: string) => {
        cookieStore.get(key)
      },
      setItem: async (key: string, value: string) => {
        cookieStore.set(key, value)
      },
      removeItem: async (key: string) => {
        cookieStore.remove(key)
      },
    },
  },
})

----------------------------------------

TITLE: Creating a Postgres Function for Image Embedding Matching
DESCRIPTION: This SQL snippet creates a Postgres function that uses pgvector to match image embeddings based on a query embedding and threshold.

LANGUAGE: sql
CODE:
create function match_images (
    query_embedding vector(512),
    match_threshold float,
    match_count int
)
returns setof images
language sql stable
as $$
	select *, 1 - (image_embedding <=> query_embedding) as similarity
	from images
	where 1 - (image_embedding <=> query_embedding) > match_threshold
	order by similarity desc
	limit match_count;
$$;

----------------------------------------

TITLE: Configuring Statement Timeouts in PostgreSQL
DESCRIPTION: SQL commands to set different statement timeout limits for anon, authenticated, and service_role users. Includes notification to reload PostgREST config.

LANGUAGE: sql
CODE:
alter role anon set statement_timeout = '100ms';

alter role authenticated set statement_timeout = '5s';

alter role service_role set statement_timeout = '15s';

NOTIFY pgrst, 'reload config';

----------------------------------------

TITLE: HTML Video Element Implementation
DESCRIPTION: HTML markup for embedding a video player with autoplay and loop functionality for demonstrating the embeddings feature.

LANGUAGE: html
CODE:
<video width="100%" autoPlay loop muted playsInline controls={true}>
  <source src="/images/blog/embeddings/embeddings.mp4" type="video/mp4" />
</video>

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Imports necessary Python libraries for logging, LlamaIndex components, and text processing.

LANGUAGE: python
CODE:
import logging
import sys

# Uncomment to see debug logs
# logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
# logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

from llama_index.core.storage import StorageContext
from llama_index.readers.web import SimpleWebPageReader
from llama_index.indices.vector_store import VectorStoreIndex
from llama_index.vector_stores.supabase import SupabaseVectorStore
import textwrap
import html2text

----------------------------------------

TITLE: Creating a User with Secure Random Numeric ID
DESCRIPTION: Python code snippet showing how to create a user with a secure random numeric ID using the secrets module.

LANGUAGE: python
CODE:
from secrets import randbelow

def create_user():
    """
    Add new user to the database (using secure random numbers)
    """
    user_id = randbelow(1, MAX_RANDOM_USER_ID)
    user = User(id=user_id, email="new@example.com", name="new user")
    db.save(user)

----------------------------------------

TITLE: Creating Posts Table in Supabase
DESCRIPTION: SQL command to create a table for storing posts with basic fields.

LANGUAGE: sql
CODE:
create table public.posts (
  id serial primary key,
  name text not null,
  description text
);

----------------------------------------

TITLE: Configuring deno.json for Dependency Management
DESCRIPTION: Example of a deno.json file used to manage dependencies and configure Deno-specific settings for a Supabase Edge Function.

LANGUAGE: json
CODE:
{
  "imports": {
    "lodash": "https://cdn.skypack.dev/lodash"
  }
}

----------------------------------------

TITLE: Querying Search Phrases in JavaScript
DESCRIPTION: JavaScript function to query search phrases in a Postgres database using the slonik library.

LANGUAGE: javascript
CODE:
async function query({ phrase, pool }) {
  const results = await pool.query(sql`
select id, title
from movies
where fts_doc_en @@ websearch_to_tsquery('english', ${phrase}::text)
`)
  const ids = results.rows.map((r) => r.id)
  return ids
}

----------------------------------------

TITLE: Generating Embeddings with Supabase AI Session in JavaScript
DESCRIPTION: This snippet demonstrates how to instantiate a new AI inference session and generate embeddings using the 'gte-small' model in Supabase Edge Functions.

LANGUAGE: jsx
CODE:
// Instantiate a new inference session
const session = new Supabase.ai.Session('gte-small')

// then use the session to run inference on a prompt
const output = await session.run('Luke, I am your father')

console.log(output)
// [ -0.047715719789266586, -0.006132732145488262, ...]

----------------------------------------

TITLE: Handling Carousel Events in React
DESCRIPTION: Example of listening to carousel events using the API instance.

LANGUAGE: tsx
CODE:
import { type CarouselApi } from '@/components/ui/carousel'

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on('select', () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}

----------------------------------------

TITLE: Listing CRON Jobs in PostgreSQL
DESCRIPTION: This SQL query retrieves a list of all scheduled CRON jobs from the cron.job table in PostgreSQL.

LANGUAGE: sql
CODE:
select * from cron.job;

----------------------------------------

TITLE: Implementing Sign-Out with Supabase in JavaScript
DESCRIPTION: Performs a sign-out operation using Supabase's signOut method in JavaScript. This removes the user from the browser session and clears any related objects from localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Implementing Sign-Out with Supabase in JavaScript
DESCRIPTION: Performs a sign-out operation using Supabase's signOut method in JavaScript. This removes the user from the browser session and clears any related objects from localStorage.

LANGUAGE: javascript
CODE:
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

----------------------------------------

TITLE: Creating Vector Collection Table in PostgreSQL
DESCRIPTION: SQL statement showing the table structure created by Vecs for storing vectors and metadata.

LANGUAGE: sql
CODE:
create table vecs.docs (
    id text primary key,
    vec vector(3) not null,
    metadata jsonb not null default '{}'::jsonb
);

----------------------------------------

TITLE: Importing Expanding Textarea Component in React/TypeScript
DESCRIPTION: This snippet shows how to import the ExpandingTextArea component from the 'ui' library.

LANGUAGE: tsx
CODE:
import { ExpandingTextArea } from 'ui'

----------------------------------------

TITLE: Adding npm Script for Type Generation
DESCRIPTION: Adds an npm script to package.json for generating TypeScript types.

LANGUAGE: json
CODE:
"update-types": "npx supabase gen types --lang=typescript --project-id \"$PROJECT_REF\" > database.types.ts"

----------------------------------------

TITLE: Default Tailwind Configuration
DESCRIPTION: Example of a basic tailwind.config.js configuration file structure

LANGUAGE: js
CODE:
module.exports = {
  purge: [],
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}

----------------------------------------

TITLE: Importing Aspect Ratio Component
DESCRIPTION: Example of importing the AspectRatio component along with Next.js Image component.

LANGUAGE: tsx
CODE:
import Image from 'next/image'

import { AspectRatio } from '@/components/ui/aspect-ratio'

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Python
DESCRIPTION: This Python snippet shows how to create a public storage bucket named 'avatars' using the Supabase Python client library. It calls the create_bucket method on the storage object with options to set the bucket as public.

LANGUAGE: python
CODE:
supabase.storage.create_bucket(
  'avatars',
  options={"public": True}
)

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Python
DESCRIPTION: This Python snippet shows how to create a public storage bucket named 'avatars' using the Supabase Python client library. It calls the create_bucket method on the storage object with options to set the bucket as public.

LANGUAGE: python
CODE:
supabase.storage.create_bucket(
  'avatars',
  options={"public": True}
)

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Python
DESCRIPTION: This Python snippet shows how to create a public storage bucket named 'avatars' using the Supabase Python client library. It calls the create_bucket method on the storage object with options to set the bucket as public.

LANGUAGE: python
CODE:
supabase.storage.create_bucket(
  'avatars',
  options={"public": True}
)

----------------------------------------

TITLE: Creating Supabase Storage Bucket in Python
DESCRIPTION: This Python snippet shows how to create a public storage bucket named 'avatars' using the Supabase Python client library. It calls the create_bucket method on the storage object with options to set the bucket as public.

LANGUAGE: python
CODE:
supabase.storage.create_bucket(
  'avatars',
  options={"public": True}
)

----------------------------------------

TITLE: Basic Aggregate Functions Query in PostgREST
DESCRIPTION: Demonstrates how to use basic max() and min() aggregate functions to get the range of release years for movies.

LANGUAGE: bash
CODE:
curl 'http://postgrest/movies?select=release_year.max(),release_year.min()'

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('movies')
  .select('release_year.max(), release_year.min()')

LANGUAGE: json
CODE:
[
  {
    "max": 2022,
    "min": 2018
  }
]

----------------------------------------

TITLE: Initializing Supabase Client in React Native
DESCRIPTION: Configuration code to initialize the Supabase client with environment variables and AsyncStorage for session management.

LANGUAGE: typescript
CODE:
import AsyncStorage from '@react-native-async-storage/async-storage'
import 'react-native-url-polyfill/auto'

import { createClient } from '@supabase/supabase-js'

const url = process.env.EXPO_PUBLIC_SUPABASE_URL
const key = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY

export const supabase = createClient(url, key, {
  auth: {
    storage: AsyncStorage,
    detectSessionInUrl: false,
  },
})

----------------------------------------

TITLE: Initializing Supabase Client with Vanity Subdomain
DESCRIPTION: Initialize the Supabase client in JavaScript using a vanity subdomain instead of the default project URL.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

// Use a custom domain as the supabase URL
const supabase = createClient('https://my-example-brand.supabase.co', 'public-anon-key')

----------------------------------------

TITLE: Initializing Vecs Client and Collection in Python
DESCRIPTION: Demonstrates how to create a Vecs client and initialize a vector collection with specified dimensions.

LANGUAGE: python
CODE:
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

# create a collection of vectors with 3 dimensions
docs = vx.get_or_create_collection(name="docs", dimension=3)

----------------------------------------

TITLE: Realtime Data Sync with Client Components
DESCRIPTION: Implementing realtime data synchronization using Supabase subscriptions in a Client Component

LANGUAGE: tsx
CODE:
'use client'

import { useEffect, useState } from 'react'
import supabase from '../../utils/supabase'

export default function RealtimePosts({ serverPosts }: { serverPosts: any }) {
  const [posts, setPosts] = useState(serverPosts)

  useEffect(() => {
    setPosts(serverPosts)
  }, [serverPosts])

  useEffect(() => {
    const channel = supabase
      .channel('*')
      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>
        setPosts((posts: any) => [...posts, payload.new])
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }, [serverPosts])

  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}

----------------------------------------

TITLE: Creating a Cal.com Booking from Postgres
DESCRIPTION: SQL command to insert a new booking record into the Cal.com foreign table, demonstrating how to create an event directly from Postgres.

LANGUAGE: sql
CODE:
insert into cal.bookings(attrs)
values (
  '{
     "start": "2025-01-01T23:30:00.000Z",
     "eventTypeId": 1398027,
     "attendee": {
       "name": "Elon Musk",
       "email": "elon.musk@x.com",
       "timeZone": "America/New_York"
     }
  }'::jsonb
);

----------------------------------------

TITLE: Importing Dialog Components in React
DESCRIPTION: This snippet shows how to import various Dialog-related components from a UI components library.

LANGUAGE: tsx
CODE:
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'

----------------------------------------

TITLE: Creating Browser Client for Supabase in Next.js
DESCRIPTION: This snippet demonstrates how to create a browser client for Supabase using the @supabase/ssr package in a Next.js application. It uses environment variables for the Supabase URL and anonymous key.

LANGUAGE: typescript
CODE:
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

----------------------------------------

TITLE: Implementing Scroll Event Listener with Debounce
DESCRIPTION: Add a scroll event listener to the window and use Lodash's debounce function to limit the frequency of scroll event handling.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react'
import { debounce } from 'lodash'

const handleScroll = () => {
  // Do stuff when scrolling
}

useEffect(() => {
  const handleDebouncedScroll = debounce(() => handleScroll(), 200)
  window.addEventListener('scroll', handleDebouncedScroll)
  return () => {
    window.removeEventListener('scroll', handleDebouncedScroll)
  }
}, [])

----------------------------------------

TITLE: Creating a New Rails Project with Postgres
DESCRIPTION: Use the Rails CLI to create a new project configured for Postgres.

LANGUAGE: bash
CODE:
rails new blog -d=postgresql

----------------------------------------

TITLE: Importing Private Package in TypeScript
DESCRIPTION: Demonstrates how to import a private npm package in a Supabase Edge Function after configuring the .npmrc file.

LANGUAGE: typescript
CODE:
import MyPackage from 'npm:@myorg/private-package@v1.0.1'

// use MyPackage

----------------------------------------

TITLE: Defining Webhook Payload Types in TypeScript
DESCRIPTION: This TypeScript code defines the structure of payloads for different webhook events (INSERT, UPDATE, DELETE). It specifies the types and properties included in each payload type.

LANGUAGE: typescript
CODE:
type InsertPayload = {
  type: 'INSERT'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: null
}
type UpdatePayload = {
  type: 'UPDATE'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: TableRecord<T>
}
type DeletePayload = {
  type: 'DELETE'
  table: string
  schema: string
  record: null
  old_record: TableRecord<T>
}

----------------------------------------

TITLE: Inserting Movie Data into Postgres
DESCRIPTION: SQL snippet demonstrating how to insert movie data into the movies table.

LANGUAGE: sql
CODE:
insert into movies (
	title,
	original_title,
	overview
)
values
(
	"Avengers: Age of Ultron",
	"Avengers: Age of Ultron",
	"When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth's Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.",
);

----------------------------------------

TITLE: Extracting Area with Protomaps CLI
DESCRIPTION: Uses the pmtiles CLI to extract a specific area from the world map and compress it into a static file.

LANGUAGE: bash
CODE:
pmtiles extract https://build.protomaps.com/20240618.pmtiles my_area.pmtiles --bbox=5.068050,52.112086,5.158424,52.064140

----------------------------------------

TITLE: Configuring Supabase Database Connection
DESCRIPTION: Sets up PostgreSQL database connection environment variables for Supabase.

LANGUAGE: bash
CODE:
DB_CONNECTION=pgsql
DB_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Creating a DataTable Component with TanStack Table in React
DESCRIPTION: Implements a reusable DataTable component using TanStack Table and React.

LANGUAGE: tsx
CODE:
'use client'

import { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}

----------------------------------------

TITLE: Foreground Text Utilities in Tailwind CSS
DESCRIPTION: Examples of foreground text utilities showing various text styles and background applications.

LANGUAGE: css
CODE:
text-foreground
text-foreground-light
text-foreground-lighter
text-foreground-muted
bg-foreground-light

----------------------------------------

TITLE: Viewing CRON Job Run Details in PostgreSQL
DESCRIPTION: This SQL query retrieves the execution details of CRON jobs from the cron.job_run_details table in PostgreSQL.

LANGUAGE: sql
CODE:
select * from cron.job_run_details;

----------------------------------------

TITLE: Creating a Paddle Foreign Server with Wasm FDW in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a Paddle foreign server using the Wasm FDW. It specifies the package details and Paddle API credentials.

LANGUAGE: sql
CODE:
create server paddle_server
  foreign data wrapper wasm_wrapper
  options (
    -- check all available versions at
    -- https://fdw.dev/catalog/paddle/#available-versions
    fdw_package_url 'https://github.com/supabase/wrappers/releases/download/wasm_paddle_fdw_v0.1.1/paddle_fdw.wasm',
    fdw_package_name 'supabase:paddle-fdw',
    fdw_package_version '0.1.1',
    fdw_package_checksum 'c5ac70bb2eef33693787b7d4efce9a83cde8d4fa40889d2037403a51263ba657',

    -- save your Paddle credentials
    api_url 'https://sandbox-api.paddle.com',
    api_key '<your Paddle sandbox API key>'
  );

----------------------------------------

TITLE: Creating Environment Variables for Supabase in Next.js
DESCRIPTION: This snippet shows how to set up the necessary environment variables for connecting to Supabase in a Next.js application. It includes the Supabase URL and anonymous key.

LANGUAGE: plaintext
CODE:
NEXT_PUBLIC_SUPABASE_URL=<<insert-your-db-url-here>>

NEXT_PUBLIC_SUPABASE_ANON_KEY=<<insert-your-anon-key-here>>

----------------------------------------

TITLE: Installing Supabase Dependencies
DESCRIPTION: Installing required packages for Supabase integration including supabase-js, async-storage, and other dependencies.

LANGUAGE: bash
CODE:
cd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill

----------------------------------------

TITLE: Installing Avatar Component Dependencies Manually
DESCRIPTION: Command to install the required dependency for the Avatar component manually using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-avatar

----------------------------------------

TITLE: Updating Root Route to Show Articles
DESCRIPTION: Modify the Rails routes configuration to set the root path to the articles index.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html

  # Defines the root path route ("/")
  root "articles#index"
end

----------------------------------------

TITLE: Next.js Image Loader Implementation
DESCRIPTION: Shows how to set up and use the Supabase Storage image loader with Next.js Image component, including loader configuration and component usage.

LANGUAGE: javascript
CODE:
// supabase-image-loader.js
const projectId = '<SUPABASE_PROJECT_ID>'
export default function supabaseLoader({ src, width, quality }) {
  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${
    quality || 75
  }`
}

// nextjs.config.js
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './supabase-image-loader.js',
  },
}

// Using Next Image
import Image from 'next/image'
const MyImage = (props) => {
  return <Image src="bucket/image.png" alt="Picture of the author" width={500} height={500} />
}

----------------------------------------

TITLE: Querying Encrypted Secrets from Supabase Vault in PostgreSQL
DESCRIPTION: This code shows how to query the vault.secrets table to view the encrypted secrets. The actual secret is stored in an encrypted form.

LANGUAGE: sql
CODE:
select * from vault.secrets;

----------------------------------------

TITLE: Creating Database Tables and Security Policies in SQL
DESCRIPTION: SQL commands to create users, groups and messages tables with Row Level Security policies and triggers for user management

LANGUAGE: sql
CODE:
create table users (
  id uuid not null primary key,
  email text
);

create table groups (
  id bigint generated by default as identity primary key,
  creator uuid references public.users not null default auth.uid(),
  title text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table messages (
  id bigint generated by default as identity primary key,
  user_id uuid references public.users not null default auth.uid(),
  text text check (char_length(text) > 0),
  group_id bigint references groups on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

----------------------------------------

TITLE: Importing Avatar Component in React
DESCRIPTION: Code snippet showing how to import the Avatar component and its subcomponents in a React project.

LANGUAGE: tsx
CODE:
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

----------------------------------------

TITLE: Configuring iOS Deep Links
DESCRIPTION: Configuration for iOS deep linking to handle authentication redirects

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>io.supabase.chat</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Database Configuration Parameters
DESCRIPTION: Platform configuration table showing connection pooling parameters across different database tiers.

LANGUAGE: markdown
CODE:
| Database Size | default_pool_size | max_connections | default_max_clients |
| ------------- | ----------------- | --------------- | ---------------------- |
| Micro         | 15                | 60              | 200                    |
| Small         | 15                | 90              | 400                    |
| Medium        | 15                | 120             | 600                    |
| Large         | 20                | 160             | 800                    |
| XL            | 20                | 240             | 1,000                  |
| 2XL           | 25                | 380             | 1,500                  |
| 4XL           | 32                | 480             | 3,000                  |
| 8XL           | 64                | 490             | 6,000                  |
| 12XL          | 96                | 500             | 9,000                  |
| 16XL          | 128               | 500             | 12,000                 |

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Adding Supabase and Mixpeek Python clients using Poetry

LANGUAGE: shell
CODE:
poetry add supabase mixpeek

----------------------------------------

TITLE: Viewing Decrypted Secrets in Supabase Vault using PostgreSQL
DESCRIPTION: This snippet demonstrates how to view decrypted secrets using the vault.decrypted_secrets view. This view automatically decrypts the secrets on-the-fly when queried.

LANGUAGE: sql
CODE:
select * from vault.decrypted_secrets;

----------------------------------------

TITLE: Rendering Map with MapLibre GL
DESCRIPTION: HTML and JavaScript code to render the map using MapLibre GL, loading the PMTiles file from Supabase Storage.

LANGUAGE: html
CODE:
<html>
  <head>
    <title>Overture Places</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.css"
      crossorigin="anonymous"
    />
    <script
      src="https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.js"
      crossorigin="anonymous"
    ></script>
    <script src="https://unpkg.com/protomaps-themes-base@2.0.0-alpha.5/dist/index.js"></script>
    <script src="https://unpkg.com/pmtiles@3.0.6/dist/pmtiles.js"></script>
    <style>
      body {
        margin: 0;
      }
      #map {
        height: 100%;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script type="text/javascript">
      // Add the PMTiles Protocol:
      let protocol = new pmtiles.Protocol()
      maplibregl.addProtocol('pmtiles', protocol.tile)

      // Load the Map tiles directly from Supabase Storage:
      const map = new maplibregl.Map({
        hash: true,
        container: 'map',
        style: {
          version: 8,
          glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
          sources: {
            protomaps: {
              attribution:
                '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
              type: 'vector',
              url: 'pmtiles://https://<your-project-ref>.supabase.co/storage/v1/object/public/public-maps/my_area.pmtiles',
            },
          },
          layers: protomaps_themes_base.default('protomaps', 'dark'),
        },
      })
    </script>
  </body>
</html>

----------------------------------------

TITLE: Importing Button Component in TypeScript/React
DESCRIPTION: Basic import statement for the Button component from the UI components library.

LANGUAGE: tsx
CODE:
import { Button } from '@/components/ui/button'

----------------------------------------

TITLE: Creating an Index on a Single Column in PostgreSQL
DESCRIPTION: Shows how to create a basic btree index on the 'surname' column of the 'students' table to improve query performance for searches on this column.

LANGUAGE: sql
CODE:
create index idx_students_surname on students (surname);

----------------------------------------

TITLE: Finding Critical Path Using pgRouting's Dijkstra Algorithm
DESCRIPTION: SQL query using pgr_dijkstra() function to find the longest path through tasks, calculating the total project duration.

LANGUAGE: sql
CODE:
create schema if not exists extensions;
create extension pgrouting schema extensions cascade;

-- find the longest path using pgr_dijkstra()
-- (as it calculates shortest path, use negative weights)
select * FROM extensions.pgr_dijkstra(
    'select id, source, target, duration as cost from dependencies',
    1,  -- Start Project (Task ID 1)
    6   -- End Project (Task ID 6)
);

----------------------------------------

TITLE: Implementing PostgreSQL Row-Level Security for Supabase User Management
DESCRIPTION: SQL script to create a 'profiles' table with row-level security policies, set up Realtime, and configure Storage for avatars in a Supabase project.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');

----------------------------------------

TITLE: Creating a Scalar Function with plv8 in PostgreSQL
DESCRIPTION: Example of a scalar function that takes a name as input and returns a greeting. This demonstrates basic string manipulation in plv8.

LANGUAGE: sql
CODE:
create or replace function hello_world(name text)
returns text as $$

    let output = `Hello, ${name}!`;
    return output;

$$ language plv8;

----------------------------------------

TITLE: Installing Calendar Component Dependencies Manually
DESCRIPTION: This command manually installs the required dependencies for the Calendar component: react-day-picker and date-fns.

LANGUAGE: bash
CODE:
npm install react-day-picker date-fns

----------------------------------------

TITLE: Spreading Related Tables in PostgREST Queries
DESCRIPTION: Shows how to use the new spread operator to expand related table columns and remove nested objects in query results. This feature works for one-to-one and many-to-one relationships.

LANGUAGE: http
CODE:
GET /films?select=title,...technical_specs(camera,laboratory,duration)

LANGUAGE: jsx
CODE:
const { data, error } = await supabase.from('films').select(`
    title,
    ...technical_specs (
      camera, laboratory, duration
    )
  `)

LANGUAGE: json
CODE:
[
  {
    "title": "Pulp Fiction",
    "camera": "Arriflex 35-III",
    "laboratory": "DeLuxe, Hollywood (CA), USA (color)",
    "duration": "02:34:00"
  },
  "..."
]

----------------------------------------

TITLE: Installing Dependencies for Infinite Scroll Project
DESCRIPTION: Install required npm packages for the infinite scroll project, including Supabase client, Lodash, and Framer Motion.

LANGUAGE: bash
CODE:
npm install @supabase/supabase-js lodash framer-motion

----------------------------------------

TITLE: Finding Edge Function Bundle Size with Deno
DESCRIPTION: Command to analyze the bundle size of a Deno-based Edge Function using deno info command

LANGUAGE: bash
CODE:
deno info /path/to/function/index.ts

----------------------------------------

TITLE: Installing Supabase Vault Extension in PostgreSQL
DESCRIPTION: This code snippet shows how to install the Supabase Vault extension in PostgreSQL, which is the first step in using Vault for secret management.

LANGUAGE: sql
CODE:
create extension supabase_vault with schema vault;

----------------------------------------

TITLE: Realtime Multiplayer Implementation in Dart
DESCRIPTION: Demonstrates the implementation of Realtime Multiplayer features including broadcast events, presence tracking, and channel subscription.

LANGUAGE: dart
CODE:
final channel = Supabase.instance.client.channel('my_channel');

// listen to `location` broadcast events
channel.on(
    RealtimeListenTypes.broadcast,
    ChannelFilter(
      event: 'location',
    ), (payload, [ref]) {
	// Do something exciting with the broadcast event
});

// send `location` broadcast events
channel.send(
  type: RealtimeListenTypes.broadcast,
  event: 'location',
  payload: {'lat': 1.3521, 'lng': 103.8198},
);

// listen to presence states
channel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),
    (payload, [ref]) {
	// Do something exciting with the presence state
});

// subscribe to the above changes
channel.subscribe((status) async {
  if (status == 'SUBSCRIBED') {
    // if subscribed successfully, send presence event
    final status = await channel.track({'user_id': myUserId});
  }
});

----------------------------------------

TITLE: Adding Public Read Policy for Instruments Table in SQL
DESCRIPTION: This SQL snippet creates a Row Level Security policy that allows public read access to the 'instruments' table. It grants select permission to the 'anon' role, effectively making the data publicly readable.

LANGUAGE: sql
CODE:
create policy "public can read instruments"
on public.instruments
for select to anon
using (true);

----------------------------------------

TITLE: Setting Data Grid and Frame Space Colors in Supabase Studio (JSX)
DESCRIPTION: Illustrates how to set background colors for data grids and frame spaces in the Supabase studio, using the bg-alternative class for cross-theme compatibility.

LANGUAGE: jsx
CODE:
<CodeFragment name="color-usage-surface-studio-frame" />

----------------------------------------

TITLE: Launching Playwright UI Mode for Test Debugging in Bash
DESCRIPTION: Command to run Playwright in UI mode, allowing users to run and replay specific tests for debugging purposes. This mode provides a visual interface for test interaction and analysis.

LANGUAGE: bash
CODE:
pnpm test -- --ui

----------------------------------------

TITLE: Implementing Lobby Dialog in Flutter
DESCRIPTION: Flutter code for the lobby dialog, which handles waiting for players and starting the game.

LANGUAGE: dart
CODE:
class _LobbyDialog extends StatefulWidget {
  const _LobbyDialog({
    required this.onGameStarted,
  });

  final void Function(String gameId) onGameStarted;

  @override
  State<_LobbyDialog> createState() => _LobbyDialogState();
}

class _LobbyDialogState extends State<_LobbyDialog> {
  final List<String> _userids = [];
  bool _loading = false;

  /// TODO: assign unique identifier for the user
  final myUserId = '';

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Lobby'),
      content: _loading
          ? const SizedBox(
              height: 100,
              child: Center(child: CircularProgressIndicator()),
            )
          : Text('${_userids.length} users waiting'),
      actions: [
        TextButton(
          onPressed: _userids.length < 2
              ? null
              : () async {
                  setState(() {
                    _loading = true;
                  });

                  // TODO: notify the other player the start of the game
                },
          child: const Text('start'),
        ),
      ],
    );
  }
}

----------------------------------------

TITLE: Creating Initial Chat Tables in Postgres
DESCRIPTION: Creates the base tables for chats and chat messages with appropriate columns and indexes.

LANGUAGE: sql
CODE:
create table chats (
  id bigserial,
  created_at timestamptz not null default now(),
  primary key (id)
);

create table chat_messages (
  id bigserial,
  created_at timestamptz not null,
  chat_id bigint not null,
  chat_created_at timestamptz not null,
  message text not null,
  primary key (id),
  foreign key (chat_id) references chats (id)
);

----------------------------------------

TITLE: Two-Phase Vector Search with Binary Quantization
DESCRIPTION: Demonstrates a two-phase search approach using binary quantization for initial filtering followed by precise vector comparison.

LANGUAGE: sql
CODE:
select * from (
  select
    *
  from
    embedding
  order by
    binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')
  limit 20
)
order by
  vector <=> '[1,-2,3]'
limit 5;

----------------------------------------

TITLE: Enabling TimescaleDB Extension in Supabase SQL
DESCRIPTION: SQL commands to enable or disable the TimescaleDB extension in a Supabase project. This allows for improved handling of time-series data within Postgres.

LANGUAGE: sql
CODE:
-- Enable the "timescaledb" extension
create extension timescaledb;

-- Disable the "timescaledb" extension
drop extension if exists timescaledb;

----------------------------------------

TITLE: Supabase Auth UI Components Implementation
DESCRIPTION: Shows how to implement various authentication UI components including email/password, magic link, and social login buttons.

LANGUAGE: dart
CODE:
// Email and password signin form
SupaEmailAuth(
  authAction: AuthAction.signIn,
  redirectUrl: '/home',
),

// Magic Link signin form
SupaMagicAuth(),

// Social Login Buttons
SupaSocialsAuth(
  socialProviders: [
  SocialProviders.apple,
  SocialProviders.google,
  ],
  colored: true,
);

----------------------------------------

TITLE: Rendering Real-time Location Data with MapLibre GL JS in React
DESCRIPTION: This React component uses MapLibre GL JS to render a map and display real-time location markers based on the data received from the Supabase Realtime subscription.

LANGUAGE: tsx
CODE:
<Map
  className="map"
  cooperativeGestures={true}
  initialViewState={{
    longitude: 103.852713,
    latitude: 1.285727,
    zoom: 13,
  }}
  mapStyle={{
    version: 8,
    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
    sources: {
      protomaps: {
        attribution:
          '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
        type: 'vector',
        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',
      },
    },
    transition: {
      duration: 0,
    },
    // @ts-ignore
    layers: layers('protomaps', 'light'),
  }}
  // @ts-ignore
  mapLib={maplibregl}
>
  {Object.entries(locations).map(([key, value]) => (
    <Marker key={key} longitude={value.long} latitude={value.lat} color="red" />
  ))}
</Map>

----------------------------------------

TITLE: Installing Card Component via CLI
DESCRIPTION: Command to install the Card component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add card

----------------------------------------

TITLE: Using EXPLAIN ANALYZE in PostgreSQL
DESCRIPTION: Demonstrates how to use EXPLAIN ANALYZE to examine the query execution plan and actual performance of a SELECT statement, which is useful for optimizing queries and understanding index usage.

LANGUAGE: sql
CODE:
EXPLAIN (ANALYZE) SELECT *
FROM students
WHERE surname = 'Krobb';

----------------------------------------

TITLE: Drizzle ORM Configuration for Edge Functions
DESCRIPTION: Configuration and implementation of Drizzle ORM with Postgres.js for Edge Functions, including import map setup and basic query example.

LANGUAGE: json
CODE:
{
  "imports": {
    "drizzle-orm": "npm:drizzle-orm@0.29.1",
    "drizzle-orm/": "npm:/drizzle-orm@0.29.1/",
    "postgres": "npm:postgres@3.4.3"
  }
}

LANGUAGE: typescript
CODE:
import { drizzle } from 'drizzle-orm/postgres-js'
import postgres from 'postgres'
import { countries } from '../_shared/schema.ts'

const connectionString = Deno.env.get('SUPABASE_DB_URL')!

Deno.serve(async (_req) => {
  const client = postgres(connectionString, { prepare: false })
  const db = drizzle(client)
  const allCountries = await db.select().from(countries)

  return Response.json(allCountries)
})

----------------------------------------

TITLE: Running Supabase OG Image Function Locally
DESCRIPTION: Commands to start Supabase locally and serve the OG image generation function with environment variables.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lw11-og --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Importing Carousel Components in React
DESCRIPTION: Example of importing the necessary carousel components in a React application.

LANGUAGE: tsx
CODE:
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from '@/components/ui/carousel'

----------------------------------------

TITLE: Performing Inner Joins in PostgREST Queries
DESCRIPTION: Demonstrates how to perform an inner join by filtering rows where the related table is not null. This can be used to find records that have related entries in another table.

LANGUAGE: http
CODE:
GET /films?select=title,nominations(rank,...competitions(name))&nominations=not.is.null

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .from('films')
  .select(
    `
    title,
    nominations(rank,...competitions(name))
  `
  )
  .not('nominations', 'is', null)

LANGUAGE: json
CODE:
[
  {
    "title": "Pulp Fiction"
    "nominations": [
      {"rank": 1, "name": "Palme d'Or"},
      {"rank": 1, "name": "BAFTA Film Award"},
      {"..."}
    ]
  },
  "..."
]

----------------------------------------

TITLE: Creating an Index for Vector Similarity Search
DESCRIPTION: SQL command to create an index for optimizing vector similarity search using cosine distance.

LANGUAGE: sql
CODE:
create index on documents using ivfflat (embedding vector_cosine_ops)
with
  (lists = 100);

----------------------------------------

TITLE: Table Creation with JSON Schema Validation
DESCRIPTION: SQL code demonstrating how to create a table with JSON Schema validation using pg_jsonschema

LANGUAGE: sql
CODE:
create table some_table(
  id serial primary key,
  metadata json not null,

  check (
    json_matches_schema(
      schema :='{
         "type": "object",
         "properties": {
          "foo": {
           "type": "string"
          }
         },
         "required": ["foo"],
         "additionalProperties": false
      }',
      instance := metadata
    )
  )
);

insert into some_table(metadata)
values
  (<SQL input>);

----------------------------------------

TITLE: Building Board Interface with Tailwind CSS
DESCRIPTION: HTML template using Tailwind CSS classes to create the Trello board interface with lists and cards

LANGUAGE: html
CODE:
<header class="bg-emerald-600">
  <nav class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex w-full items-center justify-between border-b border-emerald-500 py-6 lg:border-none">
...

----------------------------------------

TITLE: Deploying Supabase Edge Functions
DESCRIPTION: Command to deploy the Supabase Edge Functions to the production environment.

LANGUAGE: bash
CODE:
supabase functions deploy

----------------------------------------

TITLE: Authentication Provider Implementation
DESCRIPTION: React Context implementation for managing authentication state and session handling using Supabase.

LANGUAGE: tsx
CODE:
import React, { useState, useEffect, createContext, PropsWithChildren } from 'react'
import { Session, User } from '@supabase/supabase-js'
import { supabase } from '../config/initSupabase'

type AuthProps = {
  user: User | null
  session: Session | null
  initialized?: boolean
  signOut?: () => void
}

export const AuthContext = createContext<Partial<AuthProps>>({})

export function useAuth() {
  return React.useContext(AuthContext)
}

export const AuthProvider = ({ children }: PropsWithChildren) => {
  const [user, setUser] = useState<User | null>()
  const [session, setSession] = useState<Session | null>(null)
  const [initialized, setInitialized] = useState<boolean>(false)

  useEffect(() => {
    const { data } = supabase.auth.onAuthStateChange(async (event, session) => {
      setSession(session)
      setUser(session ? session.user : null)
      setInitialized(true)
    })
    return () => {
      data.subscription.unsubscribe()
    }
  }, [])

  const signOut = async () => {
    await supabase.auth.signOut()
  }

  const value = {
    user,
    session,
    initialized,
    signOut,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

----------------------------------------

TITLE: Adding User-Defined Descriptions in PostgreSQL
DESCRIPTION: Example of using comment directives to add custom descriptions to tables and columns for GraphQL documentation.

LANGUAGE: sql
CODE:
create table public.book(
    id int primary key,
    title text not null
);

comment on table public.book
is e'@graphql({"description": "a library book"})';

comment on column public.book.title
is e'@graphql({"description": "the title of the book"}';

----------------------------------------

TITLE: GraphQL CRUD Operations Schema
DESCRIPTION: Generated GraphQL schema showing available CRUD operations with pagination and filtering support.

LANGUAGE: graphql
CODE:
type Query {
  accountCollection(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    filter: AccountFilter
    orderBy: [AccountOrderBy!]
  ): AccountConnection
}

type Mutation {
	insertIntoAccountCollection(
		objects: [AccountInsertInput!]!
	): AccountInsertResponse

	updateAccountCollection(
    set: AccountUpdateInput!
    filter: AccountFilter
    atMost: Int! = 1
  ): AccountUpdateResponse!

  deleteFromAccountCollection(
   filter: AccountFilter
    atMost: Int! = 1
  ): AccountDeleteResponse!

----------------------------------------

TITLE: Configuring Legend-State with Supabase and AsyncStorage
DESCRIPTION: TypeScript code to configure Legend-State with Supabase for remote persistence and AsyncStorage for local persistence.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import { observable } from '@legendapp/state'
import { syncedSupabase } from '@legendapp/state/sync-plugins/supabase'
import { configureSynced } from '@legendapp/state/sync'
import { observablePersistAsyncStorage } from '@legendapp/state/persist-plugins/async-storage'
import AsyncStorage from '@react-native-async-storage/async-storage'

const supabase = createClient(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)

const customSynced = configureSynced(syncedSupabase, {
  persist: {
    plugin: observablePersistAsyncStorage({
      AsyncStorage,
    }),
  },
  generateId,
  supabase,
  changesSince: 'last-sync',
  fieldCreatedAt: 'created_at',
  fieldUpdatedAt: 'updated_at',
  fieldDeleted: 'deleted',
})

export const todos$ = observable(
  customSynced({
    supabase,
    collection: 'todos',
    select: (from) => from.select('id,counter,text,done,created_at,updated_at,deleted'),
    actions: ['read', 'create', 'update', 'delete'],
    realtime: true,
    persist: {
      name: 'todos',
      retrySync: true,
    },
    retry: {
      infinite: true,
    },
  })
)

----------------------------------------

TITLE: Implementing Command Menu with Custom Commands in React
DESCRIPTION: This code demonstrates how to set up a Command Menu with custom action and route commands, and how to create a trigger button for opening the menu.

LANGUAGE: tsx
CODE:
function Commands() {
  useRegisterCommands('Action commands', [
    {
      id: 'alert',
      name: 'Alert',
      action: () => alert('You triggered a command'),
    },
  ])
  useRegisterCommands('Route commands', [
    {
      id: 'supabase-website',
      name: 'Go to Supabase website',
      route: 'https://supabase.com',
    },
  ])

  return null
}

function CommandMenuTrigger() {
  return (
    <CommandMenuTriggerPrimitive>
      <Button>Open command menu</Button>
    </CommandMenuTriggerPrimitive>
  )
}

export default function CommandMenuDemo() {
  return (
    <CommandProvider openKey="j">
      <Commands />
      <CommandMenu trigger={<CommandMenuTrigger />}>
        <CommandInput />
        <CommandList />
      </CommandMenu>
    </CommandProvider>
  )
}

----------------------------------------

TITLE: Embedding YouTube Video in React
DESCRIPTION: This code snippet shows how to embed a YouTube video using an iframe in a React component. It includes responsive styling and various iframe attributes for security and functionality.

LANGUAGE: javascript
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/A4GFmvgxS-E"
    title="Log Drains for exporting product logs is now available on Supabase"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowfullscreen
  />
</div>

----------------------------------------

TITLE: Defining Payment Data Type in TypeScript
DESCRIPTION: Defines the structure of payment data using TypeScript types.

LANGUAGE: typescript
CODE:
type Payment = {
  id: string
  amount: number
  status: 'pending' | 'processing' | 'success' | 'failed'
  email: string
}

export const payments: Payment[] = [
  {
    id: '728ed52f',
    amount: 100,
    status: 'pending',
    email: 'm@example.com',
  },
  {
    id: '489e1d42',
    amount: 125,
    status: 'processing',
    email: 'example@gmail.com',
  },
  // ...
]

----------------------------------------

TITLE: Rust Document Structure
DESCRIPTION: Rust struct definition showing the Document structure used in the GraphQL parser.

LANGUAGE: rust
CODE:
#[derive(Debug, Clone, PartialEq)]
pub struct Document<'a, T: Text<'a>> {
    pub definitions: Vec<Definition<'a, T>>,
}

----------------------------------------

TITLE: Using Slider Component in React
DESCRIPTION: Example of how to use the Slider component in a React application, setting default value, maximum value, and step.

LANGUAGE: tsx
CODE:
<Slider defaultValue={[33]} max={100} step={1} />

----------------------------------------

TITLE: Creating One-to-One Relationship Schema
DESCRIPTION: SQL examples showing two approaches to create one-to-one relationships in PostgreSQL using unique constraints or primary key foreign keys

LANGUAGE: sql
CODE:
create table country (
  id serial primary key,
  name text
);

create table capital (
  id serial primary key,
  name text,
  country_id int unique,
  foreign key (country_id) references country (id)
);

----------------------------------------

TITLE: Embedding YouTube Video with OneSignal Integration
DESCRIPTION: HTML code for embedding a YouTube video demonstrating the OneSignal integration with Supabase.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/mw0DLwItue4?modestbranding=1&autohide=1&showinfo=0&controls=0"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Authentication Implementation
DESCRIPTION: Repository implementing user authentication using Supabase Auth

LANGUAGE: kotlin
CODE:
class AuthenticationRepositoryImpl @Inject constructor(
    private val auth: Auth
) : AuthenticationRepository {
    override suspend fun signIn(email: String, password: String): Boolean {
        return try {
            auth.signInWith(Email) {
                this.email = email
                this.password = password
            }
            true
        } catch (e: Exception) {
            false
        }
    }

    override suspend fun signUp(email: String, password: String): Boolean {
        return try {
            auth.signUpWith(Email) {
                this.email = email
                this.password = password
            }
            true
        } catch (e: Exception) {
            false
        }
    }

    override suspend fun signInWithGoogle(): Boolean {
        return try {
            auth.signInWith(Google)
            true
        } catch (e: Exception) {
            false
        }
    }
}

----------------------------------------

TITLE: Implementing RLS Rules for Data Access
DESCRIPTION: SQL commands to enable Row Level Security and create a policy restricting data access to specific user IDs.

LANGUAGE: sql
CODE:
alter table profiles
  enable row level security;

create policy "Data dump rule" on profiles
  for select
  to exporter
  using (
    id in (1, 2, 3)
  );

----------------------------------------

TITLE: Environment Configuration for Slack Consolidation Bot
DESCRIPTION: YAML configuration file containing environment variables for Supabase and Slack API connections.

LANGUAGE: yaml
CODE:
SUPABASE_URL=https://XXXX.supabase.co
SUPABASE_KEY=eyJhbGc_SUP4N4CH0_IkpXVCJ9.SUPAKEY_*
SLACK_TOKEN=xoxp-Slack_PERSON_TOKEN
SLACK_BOT_TOKEN=xoxb-Slack_BOT_TOKEN
SLACK_ORG=slack_sub_domain

----------------------------------------

TITLE: Implementing RLS Policies for Secure Access
DESCRIPTION: SQL commands to create Row Level Security policies for controlling access to profiles, rooms, rooms_users, and realtime messages. These policies determine who can view, insert, and manage various aspects of the chat system.

LANGUAGE: sql
CODE:
CREATE POLICY "authenticated can view all profiles"
ON "public"."profiles"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "supabase_auth_admin can insert profile"
ON "public"."profiles"
AS PERMISSIVE FOR INSERT
TO supabase_auth_admin
WITH CHECK (true);

CREATE POLICY "authenticated can read rooms"
ON "public"."rooms"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms"
ON "public"."rooms"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read broadcast and presence state"
ON "realtime"."messages"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

CREATE POLICY "authenticated can send broadcast and track presence"
ON "realtime"."messages"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

----------------------------------------

TITLE: Embedding YouTube Video with FlutterFlow Integration
DESCRIPTION: HTML code for embedding a YouTube video showcasing the FlutterFlow integration with Supabase.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/hw9Q-NjASbU?modestbranding=1&autohide=1&showinfo=0&controls=0"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Restoring PostgreSQL Logical Backup
DESCRIPTION: Command to restore a PostgreSQL database from a logical backup file using the psql utility. The backup file contains SQL commands that recreate the database structure and data.

LANGUAGE: shell
CODE:
psql -d db_name -f file_name.sql

----------------------------------------

TITLE: Querying Vectors with Filters in Python
DESCRIPTION: Demonstrates how to query vectors with similarity search, filters, and various output options.

LANGUAGE: python
CODE:
docs.query(
    query_vector=[0.10,0.21,0.29],   # required
    limit=1,                         # (optional) number of records to return
    filters={"year": {"$eq": 1973}}, # (optional) metadata filters
    measure="cosine_distance",       # (optional) distance measure to use
    include_value=False,             # (optional) should distance measure values be returned?
    include_metadata=False,          # (optional) should record metadata be returned?
)

----------------------------------------

TITLE: Handling Deep Links in Supabase Flutter
DESCRIPTION: Shows the simplified deep link handling in the new version, which no longer requires manual implementation of auth state classes.

LANGUAGE: dart
CODE:
// Before
void onReceivedAuthDeeplink(Uri uri) {
  Supabase.instance.log('onReceivedAuthDeeplink uri: $uri');
}

// After
await Supabase.instance.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);

----------------------------------------

TITLE: Querying Data with Enum Values in PostgreSQL
DESCRIPTION: This example demonstrates how to query data from a table with an Enum column, filtering rows based on a specific Enum value.

LANGUAGE: sql
CODE:
select * 
from person 
where current_mood = 'sad';

----------------------------------------

TITLE: Resulting GraphQL Type Definition in JavaScript
DESCRIPTION: This JavaScript code shows the resulting GraphQL type definition after applying the comment directive to rename the 'Account' table to 'AccountHolder'.

LANGUAGE: jsx
CODE:
// Renames "Account" to "AccountHolder"
type AccountHolder {
  id: Int!
}

----------------------------------------

TITLE: Recommendation Engine Schema Using Graph Structure
DESCRIPTION: SQL code to create and populate tables for a video recommendation system using graph relationships.

LANGUAGE: sql
CODE:
create table categories (
  id serial primary key,
  name text
);

insert into categories (name)
values
  ('Graph Theory'),
  ('AI & Machine Learning'),
  ('Python Programming');

create table videos (
  id serial primary key,
  title text,
  category_id int references categories (id)
);

insert into videos (title, category_id)
values
  ('Intro to Graph Theory', 1),
  ('Advanced Graph Algorithms', 1),
  ('Graph Neural Networks', 2),
  ('Beginner Python Tutorial', 3),
  ('Advanced Python Techniques', 3);

----------------------------------------

TITLE: Basic Usage of Resizable Components
DESCRIPTION: Example of basic usage of Resizable components to create a horizontal resizable panel group.

LANGUAGE: tsx
CODE:
<ResizablePanelGroup direction="horizontal">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>

----------------------------------------

TITLE: Configuring Autovacuum Logging
DESCRIPTION: SQL command to enable detailed autovacuum logging for a specific table by setting the log_autovacuum_min_duration parameter.

LANGUAGE: sql
CODE:
ALTER TABLE mytable SET log_autovacuum_min_duration to 0;

----------------------------------------

TITLE: Implementing Player Component in Flame
DESCRIPTION: Dart code for the Player class, which represents the player and opponent in the game.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:flame/collisions.dart';
import 'package:flame/components.dart';
import 'package:flame_realtime_shooting/game/bullet.dart';
import 'package:flutter/material.dart';

class Player extends PositionComponent with HasGameRef, CollisionCallbacks {
  Vector2 velocity = Vector2.zero();

  late final Vector2 initialPosition;

  Player({required bool isMe}) : _isMyPlayer = isMe;

  /// Whether it's me or the opponent
  final bool _isMyPlayer;

  static const radius = 30.0;

  @override
  Future<void>? onLoad() async {
    anchor = Anchor.center;
    width = radius * 2;
    height = radius * 2;

    final initialX = gameRef.size.x / 2;
    initialPosition = _isMyPlayer
        ? Vector2(initialX, gameRef.size.y * 0.8)
        : Vector2(initialX, gameRef.size.y * 0.2);
    position = initialPosition;

    add(CircleHitbox());
    add(_Gauge());
    await super.onLoad();
  }

  void move(Vector2 delta) {
    position += delta;
  }

  void updateHealth(double healthLeft) {
    for (final child in children) {
      if (child is _Gauge) {
        child._healthLeft = healthLeft;
      }
    }
  }

  @override
  void onCollision(Set<Vector2> intersectionPoints, PositionComponent other) {
    super.onCollision(intersectionPoints, other);
    if (other is Bullet && _isMyPlayer != other.isMine) {
      other.hasBeenHit = true;
      other.removeFromParent();
    }
  }

  /// returns the mirrored percent position of the player
  /// to be broadcasted to other clients
  Vector2 getMirroredPercentPosition() {
    final mirroredPosition = gameRef.size - position;
    return Vector2(mirroredPosition.x / gameRef.size.x,
        mirroredPosition.y / gameRef.size.y);
  }
}

class _Gauge extends PositionComponent {
  double _healthLeft = 1.0;

  @override
  FutureOr<void> onLoad() {
    final playerParent = parent;
    if (playerParent is Player) {
      width = playerParent.width;
      height = 10;
      anchor = Anchor.centerLeft;
      position = Vector2(0, 0);
    }
    return super.onLoad();
  }

  @override
  void render(Canvas canvas) {
    super.render(canvas);
    canvas.drawRect(
        Rect.fromPoints(
          const Offset(0, 0),
          Offset(width, height),
        ),
        Paint()..color = Colors.white);
    canvas.drawRect(
        Rect.fromPoints(
          const Offset(0, 0),
          Offset(width * _healthLeft, height),
        ),
        Paint()
          ..color = _healthLeft > 0.5
              ? Colors.green
              : _healthLeft > 0.25
                  ? Colors.orange
                  : Colors.red);
  }
}

----------------------------------------

TITLE: Starting the Rails Server
DESCRIPTION: Launch the Rails development server to run the application locally.

LANGUAGE: bash
CODE:
bin/rails server

----------------------------------------

TITLE: Importing Skeleton Component
DESCRIPTION: How to import the Skeleton component in a React/TypeScript project

LANGUAGE: tsx
CODE:
import { Skeleton } from '@/components/ui/skeleton'

----------------------------------------

TITLE: Request Generation for Load Testing
DESCRIPTION: JavaScript module for generating randomized API requests to test different view tracking operations using autocannon.

LANGUAGE: javascript
CODE:
function setupRequest(request) {
  if (!POST_COUNT || !USER_COUNT) {
    throw new Error('Cannot setup request without valid post/user count!')
  }

  const postId = Math.floor(Math.random() * POST_COUNT)

  const operationChoice = Math.floor(Math.random() * 10)
  if (operationChoice < 1) {
    request.method = 'GET'
    request.path = `/posts/${postId}/seen-by/users`
  } else if (operationChoice < 7) {
    request.method = 'GET'
    request.path = `/posts/${postId}/seen-by/count`
  } else {
    const userId = Math.floor(Math.random() * USER_COUNT)
    request.method = 'POST'
    request.path = `/posts/${postId}/seen-by/${userId}`
  }

  return request
}

----------------------------------------

TITLE: Creating Snowflake Foreign Table
DESCRIPTION: SQL command to create a foreign table that maps to Snowflake data warehouse table.

LANGUAGE: sql
CODE:
create foreign table snowflake.order_history (
  id bigint,
  ts timestamptz,
  event text,
  user_id uuid
)
server my_snowflake_warehouse
options (table 'order_history', rowid_column 'id');

----------------------------------------

TITLE: Querying a View in PostgreSQL
DESCRIPTION: This SQL snippet shows how to query the 'transcripts' view created earlier. Using a view simplifies complex queries into a single, easy-to-use table-like structure.

LANGUAGE: sql
CODE:
select * from transcripts;

----------------------------------------

TITLE: Video Element Configuration in Markdown
DESCRIPTION: HTML5 video element implementation with autoplay, muted playback and controls for displaying feature demonstration videos.

LANGUAGE: jsx
CODE:
<video width="99%" autoPlay muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/marketing/blog/launch-week-4/spend-caps.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Enabling Wasm Wrappers in Supabase SQL
DESCRIPTION: This SQL snippet shows how to enable the Wasm Wrapper feature in Supabase. It installs the Wrappers extension and creates a Wasm foreign data wrapper.

LANGUAGE: sql
CODE:
-- install Wrappers extension
create extension if not exists wrappers with schema extensions;

-- create Wasm foreign data wrapper
create foreign data wrapper wasm_wrapper
  handler wasm_fdw_handler
  validator wasm_fdw_validator;

----------------------------------------

TITLE: Implementing Game State Synchronization with Supabase
DESCRIPTION: Dart code for synchronizing game states between players using Supabase Realtime.

LANGUAGE: dart
CODE:
Future<void> _initialize() async {
  _game = MyGame(
    onGameStateUpdate: (position, health) async {
      ChannelResponse response;
      do {
        response = await _gameChannel!.sendBroadcastMessage(
          event: 'game_state',
          payload: {'x': position.x, 'y': position.y, 'health': health},
        );

        // wait for a frame to avoid infinite rate limiting loops
        await Future.delayed(Duration.zero);
        setState(() {});
      } while (response == ChannelResponse.rateLimited && health <= 0);
    },
    onGameOver: (playerWon) async {
      await showDialog(
        barrierDismissible: false,
        context: context,
        builder: ((context) {
          return AlertDialog(
            title: Text(playerWon ? 'You Won!' : 'You lost...'),
            actions: [
              TextButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  await supabase.removeChannel(_gameChannel!);
                  _openLobbyDialog();
                },
                child: const Text('Back to Lobby'),
              ),
            ],
          );
        }),
      );
    },
  );

  // await for a frame so that the widget mounts
  await Future.delayed(Duration.zero);

  if (mounted) {
    _openLobbyDialog();
  }
}

void _openLobbyDialog() {
  showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return _LobbyDialog(
          onGameStarted: (gameId) async {
            // await a frame to allow subscribing to a new channel in a realtime callback
            await Future.delayed(Duration.zero);

            setState(() {});

            _game.startNewGame();

            _gameChannel = supabase.channel(gameId,
                opts: const RealtimeChannelConfig(ack: true));

            _gameChannel!
                .onBroadcast(
                  event: 'game_state',
                  callback: (payload, [_]) {
                    final position = Vector2(
                        payload['x'] as double, payload['y'] as double);
                    final opponentHealth = payload['health'] as int;
                    _game.updateOpponent(
                      position: position,
                      health: opponentHealth,
                    );

                    if (opponentHealth <= 0) {
                      if (!_game.isGameOver) {
                        _game.isGameOver = true;
                        _game.onGameOver(true);
                      }
                    }
                  },
                )
                .subscribe();
          },
        );
      });
}

----------------------------------------

TITLE: Auth State Change Listener in Dart
DESCRIPTION: Implementation of the new stream-based auth state change listener for monitoring authentication events.

LANGUAGE: dart
CODE:
supabase.auth.onAuthStateChange.listen((data) {
  final AuthChangeEvent event = data.event;
  final Session? session = data.session;
});

----------------------------------------

TITLE: Making Asynchronous HTTP POST Requests with pg_net
DESCRIPTION: Shows how to use the pg_net extension to make an asynchronous HTTP POST request directly within a SQL query. The example sends a JSON payload to a test endpoint.

LANGUAGE: sql
CODE:
select
    net.http_post(
        url:='https://httpbin.org/post',
        body:='{"hello": "world"}'::jsonb
    );

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands for setting up the Python environment using Poetry and installing project dependencies

LANGUAGE: bash
CODE:
pip install poetry
poetry shell
poetry install

----------------------------------------

TITLE: Installing Alert Dialog Dependencies Manually
DESCRIPTION: Command to manually install the required Radix UI alert dialog dependency using npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-alert-dialog

----------------------------------------

TITLE: Implementing Anonymous Sign-in with Supabase JS
DESCRIPTION: JavaScript code snippet showing how to create an anonymous user using the Supabase client library.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .auth
  .signInAnonymously()

----------------------------------------

TITLE: Native App URL Scheme Configuration
DESCRIPTION: Configuration files for iOS and Android to enable custom URL scheme handling for magic link authentication

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">supachat</string>

<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="@string/custom_url_scheme" />
</intent-filter>

----------------------------------------

TITLE: Implementing Query States in React JSX
DESCRIPTION: Demonstrates how to handle different states (loading, error, success) provided by Tanstack Query in a React component. It uses conditional rendering to display appropriate UI components based on the query state.

LANGUAGE: jsx
CODE:
const { data, error, isLoading, isError, isSuccess } = useQuery()

return (
  <>
    {isLoading && <GenericSkeletonLoader />}

    {isError && <AlertError subject="A subject" error={error} />}

    {isSuccess && <div>Your UI component</div>}
  </>
)

----------------------------------------

TITLE: Importing Input Component
DESCRIPTION: How to import the Input component from the components directory

LANGUAGE: tsx
CODE:
import { Input } from '@/components/ui/input'

----------------------------------------

TITLE: Implementing Utility Functions for Record Identification in PostgreSQL
DESCRIPTION: Creates functions to lookup primary key columns and generate unique record identifiers for efficient auditing.

LANGUAGE: sql
CODE:
create or replace function audit.primary_key_columns(entity_oid oid)
    returns text[]
    stable
    security definer
    language sql
as $$
    -- Looks up the names of a table's primary key columns
    select
        coalesce(
            array_agg(pa.attname::text order by pa.attnum),
            array[]::text[]
        ) column_names
    from
        pg_index pi
        join pg_attribute pa
            on pi.indrelid = pa.attrelid
            and pa.attnum = any(pi.indkey)
    where
        indrelid = $1
        and indisprimary
$$;

create or replace function audit.to_record_id(
		entity_oid oid,
		pkey_cols text[],
		rec jsonb
)
    returns uuid
    stable
    language sql
as $$
    select
        case
            when rec is null then null
						-- if no primary key exists, use a random uuid
            when pkey_cols = array[]::text[] then gen_random_uuid()
            else (
                select
                    uuid_generate_v5(
                        'fd62bc3d-8d6e-43c2-919c-802ba3762271',
                        (
										jsonb_build_array(to_jsonb($1))
										|| jsonb_agg($3 ->> key_)
									)::text
                    )
                from
                    unnest($2) x(key_)
            )
        end
$$;

----------------------------------------

TITLE: Basic Array Example in JavaScript
DESCRIPTION: Demonstrates the conflict resolution problem that CRDTs solve using a simple array example.

LANGUAGE: javascript
CODE:
let fruit = ['Apple', 'Banana', 'Orange']

----------------------------------------

TITLE: Embedding MP4 Video in React
DESCRIPTION: This snippet shows how to embed an MP4 video in a React component. The video is set to autoplay, loop, mute, and play inline with controls enabled.

LANGUAGE: javascript
CODE:
<video width="99%" autoPlay loop muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/relational-drilldown-zoom.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Querying with Inner Joins in Supabase-js
DESCRIPTION: Demonstrates how to use the new '!inner' keyword for resource embedding with inner joins in PostgREST 9 using supabase-js. This allows filtering rows of the top-level table based on a filter of the embedded table.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .from('messages')
  .select('*, users!inner(*)')
  .eq('users.username', 'Jane')

----------------------------------------

TITLE: Defining Metadata for Privacy Policy Page
DESCRIPTION: Sets up metadata for the privacy policy page, including the title and description for SEO purposes.

LANGUAGE: javascript
CODE:
export const meta = {
  title: 'Privacy Policy | Supabase',
  description: 'Supabase Privacy Policy',
}

----------------------------------------

TITLE: Database Setup SQL
DESCRIPTION: Creating and securing database tables with Row Level Security.

LANGUAGE: sql
CODE:
create table if not exists public.private_posts (
    id int generated by default as identity primary key,
    content text not null
);

insert into private_posts (content) values
  ('Flutter is awesome!'),
  ('Supabase is awesome!'),
  ('Postgres is awesome!');

alter table public.private_posts enable row level security;

create policy "Users can view private_posts if they have signed in via MFA" 
on public.private_posts for select using 
((select auth.jwt() ->> 'aal') = 'aal2');

----------------------------------------

TITLE: HTML Iframe Implementation for YouTube Video
DESCRIPTION: HTML markup for embedding a YouTube video explaining the technical implementation details.

LANGUAGE: html
CODE:
<div class="video-container">
  <iframe
    title="ClippyGPT"
    src="https://www.youtube-nocookie.com/embed/Yhtjd7yGGGA"
    frameborder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Inserting a New User with Auto-incrementing ID
DESCRIPTION: Shows how to insert a new user into the table using a COUNT-based approach for auto-incrementing IDs.

LANGUAGE: sql
CODE:
insert into users
  (id, email, name)
select count(*) + 1, 'new@example.com', 'new_user' from users;

----------------------------------------

TITLE: Setting Role-Level Timeout in PostgreSQL
DESCRIPTION: Alters the statement timeout for a specific role to 10 minutes. This is useful for setting different timeouts for different user roles in the database.

LANGUAGE: sql
CODE:
alter role example_role set statement_timeout = '10min'; -- could also use seconds '10s'

----------------------------------------

TITLE: Creating Database Tables for Chat System
DESCRIPTION: SQL commands to create the core tables (rooms, profiles, rooms_users) needed for the chat system with Row Level Security enabled. These tables store room information, user profiles, and room-user associations.

LANGUAGE: sql
CODE:
CREATE TABLE public.rooms (
    id bigint GENERATED BY default AS IDENTITY PRIMARY KEY,
    topic text NOT NULL UNIQUE
);
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  email text NOT NULL,

  PRIMARY KEY (id)
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.rooms_users (
  user_id uuid REFERENCES auth.users (id),
  room_topic text REFERENCES public.rooms (topic),
  created_at timestamptz DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE public.rooms_users ENABLE ROW LEVEL SECURITY;

----------------------------------------

TITLE: Environment Setup Commands
DESCRIPTION: Commands for setting up environment variables and deploying Supabase Edge Functions with secrets.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local
supabase functions deploy push
supabase secrets set --env-file .env.local

----------------------------------------

TITLE: Basic Switch Usage
DESCRIPTION: Simple example showing how to use the Switch component in a React/TypeScript application.

LANGUAGE: tsx
CODE:
<Switch />

----------------------------------------

TITLE: Streaming LLM Responses in Supabase Edge Functions
DESCRIPTION: This code demonstrates how to use the Supabase AI Session to generate streaming responses from a Large Language Model (Mistral) in an Edge Function.

LANGUAGE: jsx
CODE:
const session = new Supabase.ai.Session('mistral')

Deno.serve(async (req: Request) => {
  // Get the prompt from the query string
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  // Get the output as a stream
  const output = await session.run(prompt, { stream: true })

  // Create a stream
  const stream = new ReadableStream({
    async start(controller) {
      const encoder = new TextEncoder()
      for await (const chunk of output) {
        controller.enqueue(encoder.encode(chunk.response ?? ''))
      }
    },
  })

  // Return the stream to the user
  return new Response(stream, {
    headers: new Headers({
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
    }),
  })
})

----------------------------------------

TITLE: Adding Supabase Badge (HTML)
DESCRIPTION: HTML code for adding a 'Made with Supabase' badge to your web project.

LANGUAGE: html
CODE:
<a href="https://supabase.com">
  <img
    width="168"
    height="30"
    src="https://supabase.com/badge-made-with-supabase.svg"
    alt="Made with Supabase"
  />
</a>

----------------------------------------

TITLE: Importing Textarea Component in React
DESCRIPTION: Example of how to import the Textarea component in a React application.

LANGUAGE: tsx
CODE:
import { Textarea } from '@/components/ui/textarea'

----------------------------------------

TITLE: Reflected GraphQL Schema from PostgreSQL Table
DESCRIPTION: This GraphQL schema is automatically generated by pg_graphql based on the 'account' table structure. It includes types for Query, Account, AccountEdge, and AccountConnection, enabling GraphQL queries on the account data.

LANGUAGE: graphql
CODE:
scalar Cursor
scalar DateTime
scalar JSON
scalar UUID
scalar BigInt

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  account(nodeId: ID!): Account
  allAccounts(after: Cursor, before: Cursor, first: Int, last: Int): AccountConnection
}

type Account {
  nodeId: ID!
  id: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccountEdge {
  cursor: String!
  node: Account
}

type AccountConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AccountEdge]
}

----------------------------------------

TITLE: Performing Full Text Search Query in Postgres
DESCRIPTION: SQL snippet demonstrating how to perform a full text search query using the websearch_to_tsquery function.

LANGUAGE: sql
CODE:
select
	* from movies
where doc_en @@ websearch_to_tsquery('english', 'Avengers');

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Commands for starting Supabase locally and serving the lwx-ticket function with environment variables.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lwx-ticket --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Embedding Secondary YouTube Video with HTML iframe
DESCRIPTION: HTML code for embedding a second YouTube video player for Row Level Security primer content

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/Ow_Uzedfohk"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Logflare GitHub Webhook Event Structure
DESCRIPTION: Example of the JSON structure for GitHub webhook events processed by Logflare, showing event metadata and formatting

LANGUAGE: json
CODE:
{
  "event_message": "supabase/supabase | JohannesBauer97 | created",
  "id": "0d48b71d-91c5-4356-82c7-fdb299b625d0",
  "metadata": {
    "sender": {
      "id": 15695124,
      "login": "JohannesBauer97",
      "node_id": "MDQ6VXNlcjE1Njk1MTI0",
      "site_admin": false,
      "type": "User",
      "url": "https://api.github.com/users/JohannesBauer97"
    },
    "starred_at": "2023-03-30T20:33:55Z"
  },
  "timestamp": 1680208436849642
}

----------------------------------------

TITLE: Creating a Users Table with Serial Primary Key
DESCRIPTION: Demonstrates how to create a users table using a serial column for auto-incrementing primary keys.

LANGUAGE: sql
CODE:
create table users (
  id serial primary key,
  email citext not null check (length(email) < 255),
  name text not null
);

----------------------------------------

TITLE: Querying Star Wars API using PostgreSQL HTTP Extension
DESCRIPTION: This SQL query demonstrates how to use the http extension to make a GET request to the Star Wars API and retrieve information about people.

LANGUAGE: sql
CODE:
select content::json->'results'
from http_get('https://swapi.dev/api/people');

----------------------------------------

TITLE: Local Environment Configuration
DESCRIPTION: Example .env.local file configuration for local development with GitHub OAuth credentials.

LANGUAGE: dotenv
CODE:
SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID=<client-id>
SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET=<client-secret>

----------------------------------------

TITLE: Configuring Storage for Avatar Images in SQL
DESCRIPTION: This SQL script sets up a storage bucket for avatar images and defines policies for public access and image uploads. It creates a bucket named 'avatars' and sets permissions for selecting and inserting objects.

LANGUAGE: sql
CODE:
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: Using Surface Colors in Supabase www and docs (JSX)
DESCRIPTION: Shows how to use surface colors in the www and docs sites of Supabase. These sites use a darker background, allowing for an extra surface color.

LANGUAGE: jsx
CODE:
<CodeFragment name="color-usage-surface-www-and-docs" />

----------------------------------------

TITLE: Setting Database URL as Fly.io Secret
DESCRIPTION: Use Fly.io CLI to set the Supabase database connection URI as a secret for the deployed app.

LANGUAGE: bash
CODE:
fly secrets set DATABASE_URL=$DATABASE_URL

----------------------------------------

TITLE: Typography Component Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the typography documentation page, specifying metadata like title, description, and component settings.

LANGUAGE: markdown
CODE:
---
title: Typography
description: Styles for headings, paragraphs, lists...etc
component: true
source:
  shadcn: true
---

----------------------------------------

TITLE: Embedding YouTube Video iFrame in HTML
DESCRIPTION: HTML iframe code for embedding a YouTube video with standard parameters including borders and media permissions

LANGUAGE: html
CODE:
<iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/yL5WbAKAKjE"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
></iframe>

----------------------------------------

TITLE: Generating Synthetic Users with JavaScript
DESCRIPTION: JavaScript function to generate synthetic user data for testing, writing JSON output to disk to handle large volumes of data.

LANGUAGE: javascript
CODE:
export async function generateUsers(args) {
  const count = args.count || DEFAULT_USER_COUNT
  const aboutHTMLWordCount = args.aboutHTMLWordCount || DEFAULT_ABOUT_HTML_WORD_COUNT

  const outputFilePath = args.outputFilePath
  if (!outputFilePath) {
    throw new Error('output file path must be specified')
  }

  for (var id = 0; id < count; id++) {
    const user = {
      id,
      email: `user${id}@example.com`,
      name: `user ${id}`,
      about_html: fastLoremIpsum(aboutHTMLWordCount, 'w'),
    }

    if (args.outputFilePath) {
      await appendFile(outputFilePath, `${JSON.stringify(user)}\n`)
    }
  }
}

----------------------------------------

TITLE: Configuring Edge Functions in config.toml
DESCRIPTION: Example of configuring JWT verification and import map for an Edge Function in the config.toml file.

LANGUAGE: toml
CODE:
[functions.hello-world]
verify_jwt = false
import_map = './import_map.json'

----------------------------------------

TITLE: Creating Immutable PostgreSQL Function
DESCRIPTION: Example of an immutable function for string concatenation, optimized for better performance.

LANGUAGE: sql
CODE:
create or replace function my_schema.full_name(first_name text, last_name text)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select first_name || ' ' || last_name;
$$;

----------------------------------------

TITLE: Importing Supabase Client in Node.js
DESCRIPTION: This snippet shows how to import the createClient method from the supabase-js library in a Node.js environment.

LANGUAGE: javascript
CODE:
const { createClient } = require('@supabase/supabase-js')

----------------------------------------

TITLE: Configuring Storage Access Policy in SQL
DESCRIPTION: SQL query to create a storage policy that enables user-specific access control for the files bucket.

LANGUAGE: sql
CODE:
CREATE POLICY "Enable storage access for users based on user_id" ON "storage"."objects"
AS PERMISSIVE FOR ALL
TO public
USING (bucket_id = 'files' AND (SELECT auth.uid()::text )= (storage.foldername(name))[1])
WITH CHECK (bucket_id = 'files' AND (SELECT auth.uid()::text) = (storage.foldername(name))[1])

----------------------------------------

TITLE: Social Media Embed - Twitter Tweet Block
DESCRIPTION: HTML code block for embedding a Twitter tweet about Supabase swag using Twitter's widget API.

LANGUAGE: html
CODE:
<blockquote class="twitter-tweet" data-theme="dark">
  <p lang="en" dir="ltr">
    Thanks to <a href="https://twitter.com/supabase?ref_src=twsrc%5Etfw">@supabase</a> for this
    little beauty (the hat, not the cat).
    <br />
    <br />
    Now I've just got to pry it away from Peanut 🥜 😂
    <a href="https://t.co/POBdVZrF5N">pic.twitter.com/POBdVZrF5N</a>
  </p>
  &mdash; Daniel Cranney 🇬🇧 (@danielcranney) <a href="https://twitter.com/danielcranney/status/1557249589182447616?ref_src=twsrc%5Etfw">August 10, 2022</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

----------------------------------------

TITLE: Creating Supabase Tables for Slack Channel Management
DESCRIPTION: SQL code to create two tables in Supabase: 'slack_channels' for storing channel information and 'slack_watcher' for message history.

LANGUAGE: sql
CODE:
CREATE TABLE slack_channels (
    id SERIAL PRIMARY KEY,
    channel text,
    channel_id text,
    p_level text DEFAULT ''::text NOT NULL,
    dest_channel text,
    dest_channel_id text,
    private int DEFAULT '0'::int NOT NULL
);

CREATE TABLE slack_watcher (
    channel_name text,
    channel_id text NOT NULL,
    message text,
    ts timestamp with time zone NOT NULL,
    ts_ms text NOT NULL,
    CONSTRAINT pk_slackwatcher PRIMARY KEY (channel_id, ts, ts_ms)
);

----------------------------------------

TITLE: Creating Security Definer Function for Querying Stripe Products in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a security definer function that queries a Stripe products foreign table with a name prefix filter.

LANGUAGE: sql
CODE:
create function public.get_stripe_products(name_prefix text)
returns table (
  id text,
  name text,
  active boolean,
  default_price text,
  description text
)
language plpgsql
security definer set search_path = ''
as $$
begin
  return query
  select
    t.id,
    t.name,
    t.active,
    t.default_price,
    t.description
  from
    stripe.stripe_products t
  where
    t.name like name_prefix || '%'
  ;
end;
$$;

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: This command generates TypeScript type definitions for the storage and public schemas of a Supabase project. It outputs the types to a file named 'types.ts' in the huggingface-image-captioning function directory.

LANGUAGE: bash
CODE:
supabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts

----------------------------------------

TITLE: Adding Dark Supabase Badge (Markdown)
DESCRIPTION: Markdown code for adding a dark-themed 'Made with Supabase' badge to your project documentation.

LANGUAGE: markdown
CODE:
[![Made with Supabase](https://supabase.com/badge-made-with-supabase-dark.svg)](https://supabase.com)

----------------------------------------

TITLE: Installing Dependencies for Supabase SolidJS Project
DESCRIPTION: Command to install project dependencies using npm.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Native Apple Sign-In Implementation for iOS
DESCRIPTION: Example of implementing native Sign in with Apple functionality using supabase-flutter library.

LANGUAGE: dart
CODE:
final AuthResponse response = await supabase.auth.signInWithApple();

----------------------------------------

TITLE: Embedding Figma UI Kit in JSX
DESCRIPTION: This code snippet embeds the Supabase Figma UI Kit using an iframe within a custom AspectRatio component. It sets the aspect ratio, styling, and source URL for the embedded Figma design.

LANGUAGE: jsx
CODE:
<AspectRatio ratio={12 / 9} className="w-full mt-4">
  <iframe
    src="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Fdesign%2FWCja3lpEj1DeunV1d5zu5D%2FDesign-System%3Fnode-id%3D520%253A1715%26t%3Dz8Quu7PADvSqD0Ss-1"
    className="h-full w-full overflow-hidden rounded-lg border bg-surface-100"
  ></iframe>
</AspectRatio>

----------------------------------------

TITLE: Local Testing Configuration
DESCRIPTION: TOML configuration for testing background tasks locally with Supabase CLI. Sets edge runtime policy to prevent automatic termination of function instances.

LANGUAGE: toml
CODE:
[edge_runtime]
policy = "per_worker"

----------------------------------------

TITLE: Email-Based RLS Policy in PostgreSQL
DESCRIPTION: SQL code implementing an RLS policy that filters data based on email domain.

LANGUAGE: sql
CODE:
create policy "Data dump rule" on profiles
  for select
  to exporter
  using (
    substring(email from '@(.*)$') = 'supabase.com'
  );

----------------------------------------

TITLE: Creating Basic PostgreSQL Function with Security Invoker
DESCRIPTION: Simple hello world function demonstrating basic function structure with security invoker and empty search path.

LANGUAGE: sql
CODE:
create or replace function my_schema.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;

----------------------------------------

TITLE: Refreshing a Materialized View in PostgreSQL
DESCRIPTION: This SQL snippet shows how to refresh the 'transcripts' materialized view. Refreshing updates the stored data in the materialized view to reflect changes in the underlying tables.

LANGUAGE: sql
CODE:
refresh materialized view transcripts;

----------------------------------------

TITLE: Querying Cal.com Bookings from Postgres
DESCRIPTION: SQL query to extract booking details from the Cal.com foreign table, including booking ID, title, attendee name, and start time.

LANGUAGE: sql
CODE:
select
  bk->>'id' as id,
  bk->>'title' as title,
  bk->'responses'->>'name' as name,
  bk->>'startTime' as start_time
from cal.bookings t
  cross join json_array_elements((attrs->'bookings')::json) bk;

----------------------------------------

TITLE: Explicit Data Return in Insert Operations
DESCRIPTION: This example illustrates the new behavior in supabase-js v2 where insert(), update(), and upsert() methods require an explicit select() call to return data.

LANGUAGE: typescript
CODE:
const { data } = await supabase.from('messages').insert({ id: 1, message: 'Hello world' }).select()

----------------------------------------

TITLE: Implementing Heartbeat Mechanism in Elixir Clustering Strategy
DESCRIPTION: This function sends periodic heartbeat notifications to maintain the cluster and facilitate healing if needed.

LANGUAGE: elixir
CODE:
def handle_info(:heartbeat, state) do
    Process.cancel_timer(state.meta.heartbeat_ref)
    Postgrex.query(state.meta.conn, "NOTIFY #{state.config[:channel_name]}, '#{node()}'", [])
    ref = heartbeat(state.config[:heartbeat_interval])
    {:noreply, put_in(state.meta.heartbeat_ref, ref)}
end

----------------------------------------

TITLE: Deploying Supabase Functions
DESCRIPTION: Command to deploy Supabase functions to the linked Supabase project.

LANGUAGE: bash
CODE:
supabase functions deploy

----------------------------------------

TITLE: Serving Puppeteer Function Locally with Supabase CLI
DESCRIPTION: Command to serve the Puppeteer function locally using Supabase CLI with environment variables and disabled JWT verification.

LANGUAGE: bash
CODE:
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt

----------------------------------------

TITLE: Request Rerouting with Edge Runtime
DESCRIPTION: Example of using Edge Runtime as an API gateway to redirect requests from old endpoints to new ones with header and body preservation.

LANGUAGE: jsx
CODE:
serve(async (req) => {
  try {
    if (req.url.endsWith('/rest/v1/old_table')) {
      return await fetch('http://rest:3000/rest/v1/new_table', {
        headers: req.headers,
        method: req.method,
        body: req.body,
      })
    }
  } catch (e) {
    const error = { msg: e.toString() }
    return new Response(JSON.stringify(error), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})

----------------------------------------

TITLE: Implementing Empty List State in React with InnerSideMenu
DESCRIPTION: This example shows how to use the InnerSideBarEmptyPanel component to display an empty state. It demonstrates adding actions and custom illustrations to the empty state panel.

LANGUAGE: jsx
CODE:
<InnerSideBarEmptyPanel
  title="No functions found"
  description="Create your first serverless function to get started."
  actions={
    <Button type="default" onClick={createAction}>
      Create Function
    </Button>
  }
/>

LANGUAGE: jsx
CODE:
<InnerSideBarEmptyPanel
  title="No functions found"
  description="Create your first serverless function to get started."
  illustration={
    <figure>
      <svg>../</svg>
    </figure>
  }
/>

----------------------------------------

TITLE: Running pgbench Performance Tests
DESCRIPTION: Command to run pgbench performance tests with configurable client counts, using prepared statements over a 5-minute duration.

LANGUAGE: bash
CODE:
pgbench -P 5 -c {num_clients} -j {num_clients} -T 300 -M prepared postgres

----------------------------------------

TITLE: Embedding YouTube Video with Next.js/React
DESCRIPTION: React/Next.js iframe component for embedding a YouTube video with specific security and feature parameters.

LANGUAGE: jsx
CODE:
<iframe
    className="w-full video-with-border"
    src="https://www.youtube-nocookie.com/embed/BelYEMJ2N00"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
></iframe>

----------------------------------------

TITLE: GitHub Action for Automatic Type Updates
DESCRIPTION: Defines a GitHub Action to automatically update TypeScript types on a schedule.

LANGUAGE: yaml
CODE:
name: Update database types

on:
  schedule:
    # sets the action to run daily. You can modify this to run the action more or less frequently
    - cron: '0 0 * * *'

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      PROJECT_REF: <your-project-id>
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: 16
      - run: npm run update-types
      - name: check for file changes
        id: git_status
        run: |
          echo "status=$(git status -s)" >> $GITHUB_OUTPUT
      - name: Commit files
        if: ${{contains(steps.git_status.outputs.status, ' ')}}
        run: |
          git add database.types.ts
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Update database types" -a
      - name: Push changes
        if: ${{contains(steps.git_status.outputs.status, ' ')}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

----------------------------------------

TITLE: Creating Profiles Table and Setting Up Row Level Security in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'profiles' table with row level security policies for public viewing, user insertion, and user updates. It also sets up Realtime publication and Storage policies for avatar images.

LANGUAGE: sql
CODE:
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: Embedding MP4 Video Player in HTML
DESCRIPTION: HTML video element configuration for displaying MP4 content with autoplay, loop, and muted attributes.

LANGUAGE: html
CODE:
<video width="99%" autoPlay loop muted playsInline controls={true}>
  <source
    src="https://xguihxuzqibwxjnimxev.supabase.co/storage/v1/object/public/videos/docs/new-tables.mp4"
    type="video/mp4"
  />
</video>

----------------------------------------

TITLE: Implementing Anonymous Authentication in TypeScript
DESCRIPTION: Code for handling anonymous user sign-in using Supabase Auth. Checks for existing session and creates new anonymous session if needed.

LANGUAGE: typescript
CODE:
const { data: sessionData, error: sessionError } = await supabase.auth.getSession()

let userId: string | null = null

if (sessionData.session) {
  userId = sessionData.session?.user.id ?? null
} else {
  const { data, error } = await supabase.auth.signInAnonymously()
  userId = data?.user?.id ?? null
}

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This snippet demonstrates how to embed a YouTube video within a Markdown document using an iframe. It includes responsive styling and various iframe attributes for security and functionality.

LANGUAGE: markdown
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/6ptUrE4QRPQ"
    frameBorder="0"
    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Embedding Loom Video Demo
DESCRIPTION: HTML iframe code for embedding a Loom video demonstration of Supabase features.

LANGUAGE: html
CODE:
<iframe
    className="w-full"
    src="https://www.loom.com/embed/c7d66ae1f4c1458d964147c5c58aad59"
    frameBorder="0"
    allowFullScreen
  ></iframe>

----------------------------------------

TITLE: Invoking Foreign Data Wrapper Function with Supabase Client in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to invoke a Foreign Data Wrapper function using the Supabase client to query Stripe products data.

LANGUAGE: javascript
CODE:
const { data, error } = await supabase
  .rpc('get_stripe_products', { name_prefix: 'Test' })
  .select('*')
if (error) console.error(error)
else console.log(data)

----------------------------------------

TITLE: Installing Supabase JS Client
DESCRIPTION: Command to install the Supabase JavaScript client library via npm.

LANGUAGE: bash
CODE:
npm i @supabase/supabase-js

----------------------------------------

TITLE: Local Testing of Supabase SMTP Email Function
DESCRIPTION: Commands to set up local environment variables and serve the function locally for testing purposes.

LANGUAGE: bash
CODE:
cp ./supabase/.env.local.example ./supabase/.env.local
supabase functions serve --env-file ./supabase/.env.local

----------------------------------------

TITLE: Complete Infinite Scroll Implementation
DESCRIPTION: Full code for implementing infinite scroll with Next.js, Supabase, and Framer Motion, including initial data fetching, scroll detection, additional data loading, and animations.

LANGUAGE: jsx
CODE:
import { useEffect, useState, useRef } from 'react'
import { createClient } from '@supabase/supabase-js'
import { debounce } from 'lodash'
import { motion } from 'framer-motion'

const supabase = createClient('supabase-url', 'supabase-key')

export default function TicketsPage({ tickets }) {
  const PAGE_COUNT = 20
  const containerRef = useRef(null)
  const [loadedTickets, setLoadedTickets] = useState(tickets)
  const [offset, setOffset] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [isInView, setIsInView] = useState(false)

  const handleScroll = (container) => {
    if (containerRef.current && typeof window !== 'undefined') {
      const container = containerRef.current
      const { bottom } = container.getBoundingClientRect()
      const { innerHeight } = window
      setIsInView((prev) => bottom <= innerHeight)
    }
  }

  useEffect(() => {
    const handleDebouncedScroll = debounce(() => !isLast && handleScroll(), 200)
    window.addEventListener('scroll', handleScroll)
    return () => {
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  useEffect(() => {
    if (isInView) {
      loadMoreTickets(offset)
    }
  }, [isInView])

  const loadMoreTickets = async (offset: number) => {
    setIsLoading(true)
    setOffset((prev) => prev + 1)
    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)
    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])
    setIsLoading(false)
  }

  const fetchTickets = async (offset) => {
    const from = offset * PAGE_COUNT
    const to = from + PAGE_COUNT - 1

    const { data } = await supabase!
        .from('my_tickets_table')
        .select('*')
        .range(from, to)
        .order('createdAt', { ascending: false })

    return data
  }

  return (
    <div ref={containerRef}>
      {
        loadedTickets.map((ticket, index) => {
          const recalculatedDelay =
            i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15

          return (
            <motion.div
              key={ticket.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.4,
                ease: [0.25, 0.25, 0, 1],
                delay: recalculatedDelay,
              }}
            >
              {/* Actual ticket component */}
            </motion.div>
          )
        })
      }
    </div>
  )

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const { data: tickets } = await supabase!
    .from('my_tickets_table')
    .select('*')
    .order('createdAt', { ascending: false })
    .limit(20)

  return {
    props: {
      tickets,
    },
  }
}

----------------------------------------

TITLE: Implementing Accordion FAQ Component in React
DESCRIPTION: Example of an accessible accordion component implementation using React components. Demonstrates nested accordion structure with trigger and content sections for FAQ display.

LANGUAGE: jsx
CODE:
<Accordion type="multiple">

<AccordionItem value="faq-1">
	<AccordionTrigger>
		Why copy/paste and not packaged as a dependency?
	</AccordionTrigger>
	<AccordionContent>
The idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.

Start with some sensible defaults, then customize the components to your needs.

One of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._

</AccordionContent>
</AccordionItem>

</Accordion>

----------------------------------------

TITLE: Creating a Postgres Function with JavaScript in SupaScript
DESCRIPTION: This code snippet demonstrates how to create a Postgres function using JavaScript within SupaScript. It fetches users who logged in within the last week using moment.js for date manipulation.

LANGUAGE: javascript
CODE:
create or replace function users_this_week()
returns json as $$
  const moment = require('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.js', false);

  const lastWeek = moment().subtract(7, 'days');
  const query = 'select * from auth.users where created_at > $1'
  const users = sql(query, lastWeek);

  return users;
$$ language plv8;

----------------------------------------

TITLE: Creating Composite Types and Tables in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a composite type 'full_name' and a table 'famous_people' using that type in PostgreSQL.

LANGUAGE: sql
CODE:
create type full_name as (
  first_name     text,
  middle_names   text[],
  first_surname  text,
  second_surname text,
  reign_name     text
);

create table famous_people (
  name full_name,
  occupation text
);

----------------------------------------

TITLE: Setting Telegram Bot Webhook URL
DESCRIPTION: URL structure to set the webhook for the Telegram bot, linking it to the Supabase function.

LANGUAGE: plaintext
CODE:
https://api.telegram.org/bot<TELEGRAM_BOT_TOKEN>/setWebhook?url=https://<PROJECT_REFERENCE>.supabase.co/functions/v1/telegram-bot?secret=<FUNCTION_SECRET>

----------------------------------------

TITLE: Creating a Physical Backup with WAL-G
DESCRIPTION: Command to create an initial physical backup of the PostgreSQL database using WAL-G.

LANGUAGE: shell
CODE:
$ sudo -su postgres envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-push /var/lib/postgresql/12/main

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: This snippet shows how to use the Supabase CLI to generate TypeScript types for your database schema. These types can be used to enhance type support in your supabase-js v2 code.

LANGUAGE: bash
CODE:
supabase start
supabase gen types typescript --local > DatabaseDefinitions.ts

----------------------------------------

TITLE: Implementing Passwordless SMS Login with Supabase JavaScript SDK
DESCRIPTION: This code snippet demonstrates how to implement passwordless SMS login using the Supabase JavaScript SDK. It shows the process of sending a one-time password (OTP) to a user's phone number and then verifying that OTP.

LANGUAGE: javascript
CODE:
// Send OTP to phone number
const { user, error } = await supabase.auth.signIn({
  phone: '+13334445555'
})

// Verify OTP
const { user, error } = await supabase.auth.verifyOTP({
  phone: '+13334445555',
  token: '123456'
})

----------------------------------------

TITLE: Second YouTube Video Embed Component
DESCRIPTION: Similar HTML/React component for embedding a different YouTube video with identical security and styling parameters.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/p561ogKZ63o"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Creating Supabase Vector Store Index
DESCRIPTION: Initializes a vector store in Supabase using PostgreSQL connection and creates an index from documents.

LANGUAGE: python
CODE:
DB_CONNECTION = "postgresql://postgres:password@localhost:5431/db"

vector_store = SupabaseVectorStore(
    postgres_connection_string=DB_CONNECTION, 
    collection_name='base_demo'
)
storage_context = StorageContext.from_defaults(vector_store=vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

----------------------------------------

TITLE: Running Supabase Functions Locally with Upstash Redis
DESCRIPTION: These commands start the Supabase services and serve the functions locally, using the environment file for configuration. The --no-verify-jwt flag is used to disable JWT verification during development.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --no-verify-jwt --env-file supabase/.env.local

----------------------------------------

TITLE: Chat Interface Implementation in HTML
DESCRIPTION: HTML template for the chat interface showing messages with different styling for sent/received messages

LANGUAGE: html
CODE:
<ion-content class="ion-padding">
  <ion-row *ngFor="let message of messages">
    <ion-col size="10" *ngIf="message.users.id !== currentUserId" class="message other-message">
      <span>{{ message.text }} </span>
      <div class="time ion-text-right"><br />{{ message.created_at | date:'shortTime' }}</div>
    </ion-col>
  </ion-row>
</ion-content>

----------------------------------------

TITLE: Adding Tabs Component in MDX
DESCRIPTION: Shows implementation of tabs for displaying content variations based on language or package manager selection with sync capabilities

LANGUAGE: mdx
CODE:
<Tabs
  scrollable
  size="small"
  type="underlined"
  defaultActiveId="js"
  queryGroup="language"
>
<TabPanel id="js" label="JavaScript">

```js
const supabase = createSupabaseClient()
```

</TabPanel>
</Tabs>

----------------------------------------

TITLE: Closing Realtime Socket Connection in Python
DESCRIPTION: Demonstrates how to establish and close a Realtime connection using the AsyncRealtimeClient, including setting up a callback for INSERT events.

LANGUAGE: python
CODE:
import os
from realtime import AsyncRealtimeClient

def callback1(payload):
    print("Callback 1: ", payload)

SUPABASE_ID: str = os.environ.get("SUPABASE_ID")
API_KEY: str = os.environ.get("SUPABASE_KEY")

URL: str = f"wss://{SUPABASE_ID}.supabase.co/realtime/v1/websocket"

client = AsyncRealtimeClient(URL, API_KEY)
await client.connect()

channel_1 = s.channel("realtime:public:sample")
channel_1.subscribe().on_postgres_changes("INSERT", callback1)

await client.listen()
await client.close()


----------------------------------------

TITLE: Querying Composite Types with Supabase JavaScript Client
DESCRIPTION: This JavaScript code snippet shows how to query the 'famous_people' table, accessing fields of the composite type 'full_name' using the Supabase JavaScript client.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .from('users')
  .select(
    `
    name->first_name,
    name->middle_names->0,
    name->first_surname,
    occupation`
  )
  .eq('name->reign_name', 'Edward VIII')

console.log(data)
// {
//   "first_name": "Edward",
//   "middle_names": "Albert",
//   "first_surname": "David",
//   "occupation": "King of the United Kingdom"
// }

----------------------------------------

TITLE: Adding Supabase Dependencies in Gradle Kotlin DSL
DESCRIPTION: This snippet shows how to add Supabase dependencies to a Kotlin project using Gradle Kotlin DSL. It includes the BOM (Bill of Materials) and individual modules for PostgreSQL, GoTrue, and Realtime.

LANGUAGE: kotlin
CODE:
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:gotrue-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")

----------------------------------------

TITLE: Deploying Postgres on the Edge Function in Supabase
DESCRIPTION: Commands for deploying the 'postgres-on-the-edge' function to Supabase and setting environment variables. These steps assume the function and .env file are already prepared.

LANGUAGE: bash
CODE:
supabase functions deploy --no-verify-jwt postgres-on-the-edge

LANGUAGE: bash
CODE:
supabase secrets set --env-file supabase/functions/postgres-on-the-edge/.env

----------------------------------------

TITLE: Scheduling Regular Physical Backups
DESCRIPTION: Command to set up a daily CRON job for creating physical backups using WAL-G.

LANGUAGE: shell
CODE:
$ echo "0 0 * * * postgres /usr/bin/envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-push /var/lib/postgresql/12/main" > /etc/cron.d/pg_backup

----------------------------------------

TITLE: Installing Supabase Python SDK
DESCRIPTION: Command to install the Supabase Python SDK using pip. This should be run inside a Python virtual environment.

LANGUAGE: bash
CODE:
pip3 install supabase

----------------------------------------

TITLE: Initializing pgbench Database
DESCRIPTION: Command to initialize pgbench with a scale factor of 150 for performance testing of PostgreSQL 13.3.

LANGUAGE: bash
CODE:
pgbench -i -s 150

----------------------------------------

TITLE: Installing Supabase CLI
DESCRIPTION: Command to install the Supabase CLI globally using npm.

LANGUAGE: bash
CODE:
npm install -g supabase

----------------------------------------

TITLE: Creating Lock Monitor View in PostgreSQL
DESCRIPTION: Creates a view named 'lock_monitor' that displays information about blocked queries, blocking queries, lock types, and waiting duration. The view joins pg_locks and pg_stat_activity tables to track lock conflicts between different database processes.

LANGUAGE: sql
CODE:
create view
  public.lock_monitor as
select
  coalesce(
    blockingl.relation::regclass::text,
    blockingl.locktype
  ) as locked_item,
  now() - blockeda.query_start as waiting_duration,
  blockeda.pid as blocked_pid,
  blockeda.query as blocked_query,
  blockedl.mode as blocked_mode,
  blockinga.pid as blocking_pid,
  blockinga.query as blocking_query,
  blockingl.mode as blocking_mode
from
  pg_locks blockedl
  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid
  join pg_locks blockingl on (
    blockingl.transactionid = blockedl.transactionid
    or blockingl.relation = blockedl.relation
    and blockingl.locktype = blockedl.locktype
  )
  and blockedl.pid <> blockingl.pid
  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid
  and blockinga.datid = blockeda.datid
where
  not blockedl.granted
  and blockinga.datname = current_database();

----------------------------------------

TITLE: Importing InfoTooltip Component in TSX
DESCRIPTION: Shows how to import the InfoTooltip component from the ui package.

LANGUAGE: tsx
CODE:
import { InfoTooltip } from 'ui'

----------------------------------------

TITLE: Creating Vector Index
DESCRIPTION: Creates an index on the vector collection for improved query performance using cosine distance measure.

LANGUAGE: python
CODE:
docs.create_index(measure=vecs.IndexMeasure.cosine_distance)

----------------------------------------

TITLE: Implementing SMS Login with Password using Supabase JavaScript SDK
DESCRIPTION: This code snippet shows how to implement SMS login with a password using the Supabase JavaScript SDK. It demonstrates the process of signing up a user with a phone number and password, and then logging in using those credentials.

LANGUAGE: javascript
CODE:
// Sign up with phone and password
const { user, error } = await supabase.auth.signUp({
  phone: '+13334445555',
  password: 'example-password'
})

// Log in with phone and password
const { user, error } = await supabase.auth.signIn({
  phone: '+13334445555',
  password: 'example-password'
})

----------------------------------------

TITLE: Template Variable Placeholder
DESCRIPTION: Shows basic variable interpolation syntax using double curly braces for template variables. Takes a variable named 'var' as input.

LANGUAGE: template
CODE:
{{ .var }}

----------------------------------------

TITLE: Installing Supabase using npm
DESCRIPTION: This command installs the Supabase JavaScript client library using npm via the jsr add command.

LANGUAGE: bash
CODE:
npx jsr add @supabase/supabase-js

----------------------------------------

TITLE: Sending Webhook Data to PostgREST Function
DESCRIPTION: Demonstrates how to send webhook data directly to a PostgREST function with an unnamed parameter using a POST request. This example shows the payload structure for a bounce webhook from Postmark.

LANGUAGE: bash
CODE:
POST https://<PROJECT_REF>.supabase.co/rest/v1/rpc/store_bounces HTTP/1.1
Content-Type: application/json

{
  "RecordType": "Bounce",
  "MessageStream": "outbound",
  "ID": 4323372036854775807,
  "Type": "HardBounce",
  "MessageID": "883953f4-6105-42a2-a16a-77a8eac79483",
  "Description": "The server was unable to deliver your message (ex: unknown user, mailbox not found).",
  "Details": "Test bounce details",
  "Email": "john@example.com",
  "From": "sender@example.com",
  "BouncedAt": "2019-11-05T16:33:54.9070259Z"
}

----------------------------------------

TITLE: Testing OpenAI Function with cURL
DESCRIPTION: Example cURL command to test the OpenAI function endpoint with a sample query about Supabase.

LANGUAGE: bash
CODE:
curl -i --location --request POST http://localhost:54321/functions/v1/openai \
  --header 'Content-Type: application/json' \
  --data '{"query":"What is Supabase?"}'

----------------------------------------

TITLE: Importing Layout Components for SupaSquad Page in React
DESCRIPTION: This code snippet imports the necessary layout components and defines metadata for the SupaSquad page. It uses a custom Layout component and a SectionContainer for structuring the content.

LANGUAGE: javascript
CODE:
import Layout from '~/layouts/Layout'
import SectionContainer from '~/components/Layouts/SectionContainer'

export const meta = {
  title: 'SupaSquad | Supabase',
  description: 'Supabase Advocate program',
}

----------------------------------------

TITLE: Type Inference Override in supabase-js
DESCRIPTION: Example showing how to override inferred response types in supabase-js database queries

LANGUAGE: typescript
CODE:
.returns<MyType>()

----------------------------------------

TITLE: Unscheduling a CRON Job in PostgreSQL
DESCRIPTION: This SQL command stops a running CRON job by unscheduling it using the cron.unschedule function. It takes the name of the CRON job as a parameter.

LANGUAGE: sql
CODE:
select cron.unschedule('webhook-every-minute'); -- pass the name of the cron job

----------------------------------------

TITLE: Initializing React Layout with Meta Configuration
DESCRIPTION: Sets up a React page layout with metadata configuration for the SLA documentation page. Imports required layout components and defines page metadata including title and description.

LANGUAGE: javascript
CODE:
import Layout from '../layouts/Layout'
import SectionContainer from '../components/Layouts/SectionContainer'

export const meta = {
  title: 'Service Level Agreement | Supabase',
  description: 'Supabase Service Level Agreement',
}

export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Importing AssistantChatForm Component in TypeScript React
DESCRIPTION: This snippet shows how to import the AssistantChatForm component from the ui-patterns/AssistantChat module.

LANGUAGE: tsx
CODE:
import { AssistantChatForm } from 'ui-patterns/AssistantChat'

----------------------------------------

TITLE: Initializing Vecs Client Connection
DESCRIPTION: Creates a connection to PostgreSQL database using vecs client. Requires a valid PostgreSQL connection string with pgvector extension installed.

LANGUAGE: python
CODE:
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

----------------------------------------

TITLE: Embedding YouTube Video in HTML
DESCRIPTION: This snippet demonstrates how to embed a YouTube video using an iframe in HTML. It includes responsive classes and various attributes for customization.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/m3yRPNyYolk"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: MCP Server Configuration for macOS
DESCRIPTION: JSON configuration for setting up MCP server connection on macOS using npx to run the Postgres server. Requires connection string to be specified.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "supabase": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres", "<connection-string>"]
    }
  }
}

----------------------------------------

TITLE: Environment Variables Setup for Supabase Connection
DESCRIPTION: Environment variable configuration for Supabase database connection strings including pooled and non-pooled connections

LANGUAGE: bash
CODE:
POSTGRES_PRISMA_URL="postgres://postgres.YOUR-PROJECT-REF:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"
POSTGRES_URL_NON_POOLING="postgres://postgres.YOUR-PROJECT-REF:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres"

----------------------------------------

TITLE: Comparing Synchronous and Asynchronous HTTP Requests
DESCRIPTION: Compares the performance of synchronous HTTP requests using pgsql-http and asynchronous requests using pg_net. The example fetches the same URL 10 times with each method to demonstrate the speed difference.

LANGUAGE: sql
CODE:
\timing on

-- using pgsql-http to fetch from "supabase.io" 10 times
select
    *
from
   http_get('https://supabase.com')
cross join
   generate_series(1, 10) _;

-- using pg_net to fetch from "supabase.io" 10 times
select
    net.http_get('https://supabase.com')
from
    generate_series (1,10) _;

----------------------------------------

TITLE: Implementing Apple Sign-in with New Approach
DESCRIPTION: Shows the new implementation for Apple sign-in after removing the sign_in_with_apple dependency from the core package.

LANGUAGE: dart
CODE:
Future<AuthResponse> signInWithApple() async {
  final rawNonce = supabase.auth.generateRawNonce();
  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();

  final credential = await SignInWithApple.getAppleIDCredential(
    scopes: [
      AppleIDAuthorizationScopes.email,
      AppleIDAuthorizationScopes.fullName,
    ],
    nonce: hashedNonce,
  );

  final idToken = credential.identityToken;
  if (idToken == null) {
    throw const AuthException(
        'Could not find ID Token from generated credential.',
    );
  }

  return signInWithIdToken(
    provider: OAuthProvider.apple,
    idToken: idToken,
    nonce: rawNonce,
  );
}

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Command to serve Supabase functions locally with environment variables and disabled JWT verification. Uses a local environment file for configuration.

LANGUAGE: bash
CODE:
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Querying User Data with Authentication in JavaScript
DESCRIPTION: Demonstrates how to query user data with and without explicit authentication checks using Supabase client library. It shows the difference between manually filtering queries and using database policies.

LANGUAGE: javascript
CODE:
const loggedInUserId = 'd0714948'
let user = await supabase.from('users').select('user_id, name').eq('user_id', loggedInUserId)
// Returns { id: 'd0714948', name: 'Jane'

LANGUAGE: javascript
CODE:
let user = await supabase.from('users').select('user_id, name')
// Still returns { id: 'd0714948', name: 'Jane' }

----------------------------------------

TITLE: Loading IMDB Dataset for Text Deduplication
DESCRIPTION: Loads the IMDB dataset containing 25,000 movie reviews using the datasets library from Hugging Face.

LANGUAGE: python
CODE:
from datasets import load_dataset

data = load_dataset("imdb", split="train")
data

----------------------------------------

TITLE: Setting PostgreSQL Log Level to ERROR
DESCRIPTION: SQL command to set the log level to ERROR for the postgres role

LANGUAGE: sql
CODE:
ALTER ROLE postgres SET log_min_messages TO 'ERROR';

----------------------------------------

TITLE: Installing Textarea Component via CLI
DESCRIPTION: Command to install the Textarea component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add textarea

----------------------------------------

TITLE: Creating a Materialized View in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a materialized view named 'transcripts'. Materialized views store the query results, providing faster access to data at the cost of potential data staleness.

LANGUAGE: sql
CODE:
create materialized view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

----------------------------------------

TITLE: Handling OAuth Callback in Astro
DESCRIPTION: This code snippet shows how to handle the OAuth callback in an Astro application. It creates a Supabase client, exchanges the authorization code for a session, and handles redirects.

LANGUAGE: typescript
CODE:
import { createServerClient, parseCookieHeader } from '@supabase/ssr'
import { type APIRoute } from 'astro'

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const next = requestUrl.searchParams.get('next') || '/'

  if (code) {
    const supabase = createServerClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return parseCookieHeader(Astro.request.headers.get('Cookie') ?? '')
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) =>
              Astro.cookies.set(name, value, options)
            )
          },
        },
      }
    )

    const { error } = await supabase.auth.exchangeCodeForSession(code)

    if (!error) {
      return redirect(next)
    }
  }

  // return the user to an error page with instructions
  return redirect('/auth/auth-code-error')
}

----------------------------------------

TITLE: Managing Database Branches with Supabase CLI
DESCRIPTION: Common CLI commands for working with Supabase database branches including starting local development, resetting databases, and capturing schema changes.

LANGUAGE: bash
CODE:
supabase start
supabase db reset
supabase db diff
supabase db reset --db-url <branch-connection-string>

----------------------------------------

TITLE: Querying Supabase Database with Async/Await Syntax
DESCRIPTION: This code shows how to query a Supabase database table using async/await syntax. It selects all columns from the 'countries' table, limiting the result to 5 rows, and handles potential errors.

LANGUAGE: javascript
CODE:
const main = async() => {
  const { data, error } = supabase
    .from('countries')
    .select('*')
    .limit(5)

  if (error) {
    console.log(error)
    return
  }

  console.log(data)
}
main()

----------------------------------------

TITLE: Running React App Tests
DESCRIPTION: This command launches the test runner in interactive watch mode, allowing developers to run and monitor tests for the React application.

LANGUAGE: shell
CODE:
npm test

----------------------------------------

TITLE: Creating Cloudflare Secrets
DESCRIPTION: Commands for setting up Cloudflare Worker secrets for Supabase configuration, including URL and anonymous key.

LANGUAGE: bash
CODE:
npx wrangler secret put NAME

LANGUAGE: bash
CODE:
npx wrangler secret put SUPABASE_URL

LANGUAGE: bash
CODE:
npx wrangler secret put SUPABASE_ANON_KEY

----------------------------------------

TITLE: Exporting Page Layout Component
DESCRIPTION: Exports default page component that wraps content with Layout component and passes metadata and context

LANGUAGE: jsx
CODE:
export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Creating Database from Custom Template
DESCRIPTION: Demonstrates how to create a new database using a custom template database instead of the default template1.

LANGUAGE: sql
CODE:
CREATE DATABASE new_db_name TEMPLATE template_db_name;

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Installs the necessary Python packages for working with vectors, datasets, LlamaIndex, and HTML processing.

LANGUAGE: python
CODE:
!pip install -qU vecs datasets llama_index html2text

----------------------------------------

TITLE: Basic Table Implementation in React
DESCRIPTION: Example of implementing a basic table structure with header, caption, and a single row of data. Shows how to use all table components together to create a responsive invoice table.

LANGUAGE: tsx
CODE:
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className="w-[100px]">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className="text-right">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className="font-medium">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className="text-right">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>

----------------------------------------

TITLE: React/JSX Page Layout Component
DESCRIPTION: Page layout component definition using Next.js/React, including metadata and layout wrapper components.

LANGUAGE: jsx
CODE:
import Layout from '../layouts/Layout'
import SectionContainer from '../components/Layouts/SectionContainer'

export const meta = {
  title: 'Terms of Service',
  description: 'Supabase Terms of Service',
}

export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Creating and Configuring User Profiles Table in PostgreSQL for Supabase
DESCRIPTION: This snippet creates a 'profiles' table with user information, sets up row level security, and defines policies for viewing, inserting, and updating profiles. It includes constraints and references to the auth.users table.

LANGUAGE: sql
CODE:
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/database/postgres/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

----------------------------------------

TITLE: Creating Basic Arithmetic Function in PostgreSQL
DESCRIPTION: Demonstrates creating a simple addition function that takes two integer parameters and returns their sum. The function is marked as immutable to indicate it doesn't modify the database.

LANGUAGE: sql
CODE:
create function "addNums"(a int, b int default 1)
returns int
immutable
language sql
as $$
	select a + b;
$$;

----------------------------------------

TITLE: Using auth.email() Function in Policies
DESCRIPTION: Shows how to use the new auth.email() helper function to extract the logged-in user's email address, which can be useful in defining access policies.

LANGUAGE: sql
CODE:
CREATE POLICY "Users can view their own data."
ON profiles FOR SELECT
USING (auth.email() = email);

----------------------------------------

TITLE: Basic Dialog Usage in React
DESCRIPTION: This example demonstrates the basic structure and usage of a Dialog component, including trigger, content, header, title, and description.

LANGUAGE: tsx
CODE:
<Dialog>
  <DialogTrigger>Open</DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. This will permanently delete your account and remove your data
        from our servers.
      </DialogDescription>
    </DialogHeader>
  </DialogContent>
</Dialog>

----------------------------------------

TITLE: Filtered Vector Query
DESCRIPTION: Demonstrates vector similarity search with metadata filtering to narrow down results based on specific criteria.

LANGUAGE: python
CODE:
docs.query(
    query_vector=[0.4,0.5,0.6],
    filters={"year": {"$eq": 2012}}, # metadata filters
)

----------------------------------------

TITLE: Creating Index for Vector Similarity Search
DESCRIPTION: Creates an index on the vector column in PostgreSQL to improve performance of similarity queries.

LANGUAGE: python
CODE:
reviews.create_index()

----------------------------------------

TITLE: Configuring React Page Layout with Component Imports
DESCRIPTION: Imports required layout components and exports default page configuration using Layout component with meta data and children props.

LANGUAGE: jsx
CODE:
import Layout from '../layouts/Layout'
import SectionContainer from '../components/Layouts/SectionContainer'

export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Optimized Team Access Policy in Supabase SQL
DESCRIPTION: Performance-optimized version of team access policy avoiding unnecessary joins.

LANGUAGE: sql
CODE:
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid())
  )
);

----------------------------------------

TITLE: Making GET Request for T-Shirt Competition
DESCRIPTION: Example GET request URL structure with required parameters including email, Twitter handle, t-shirt size, and answer.

LANGUAGE: text
CODE:
https://obuldanrptloktxcffvn.supabase.co/functions/v1/get-tshirt-competition?email=testr@test.de&twitter=thorwebdev&size=2XL&answer=20

----------------------------------------

TITLE: Setting Maintenance Memory in SQL
DESCRIPTION: SQL commands to configure and verify maintenance_work_mem setting for improved index creation performance.

LANGUAGE: sql
CODE:
set maintenance_work_mem to <several Gb's>; -- '#GB'
show maintenance_work_mem;

----------------------------------------

TITLE: Importing Sheet Components
DESCRIPTION: TypeScript code showing how to import the necessary Sheet components from the UI library

LANGUAGE: tsx
CODE:
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet'

----------------------------------------

TITLE: Configuring Page Metadata
DESCRIPTION: Defines page metadata including title and description for the support policy page

LANGUAGE: javascript
CODE:
export const meta = {
  title: 'Support Policy',
  description: 'Supabase Support Policy',
}

----------------------------------------

TITLE: Querying Countries Table with Supabase JavaScript Client
DESCRIPTION: Demonstrates a simple query to select country names using the Supabase JavaScript client.

LANGUAGE: javascript
CODE:
let { data: countries, error } = await supabase.from('countries').select('name')

----------------------------------------

TITLE: Detecting Social Media Shares with Edge Functions
DESCRIPTION: Edge Function code to detect if a ticket was shared on Twitter or LinkedIn and update the database accordingly.

LANGUAGE: jsx
CODE:
if (userAgent?.toLocaleLowerCase().includes('twitter')) {
  await supabaseAdminClient
    .from('lw7_tickets')
    .update({ sharedOnTwitter: 'now' })
    .eq('username', username)
    .is('sharedOnTwitter', null)
} else if (userAgent?.toLocaleLowerCase().includes('linkedin')) {
  await supabaseAdminClient
    .from('lw7_tickets')
    .update({ sharedOnLinkedIn: 'now' })
    .eq('username', username)
    .is('sharedOnLinkedIn', null)
}

----------------------------------------

TITLE: Embedding YouTube Video with HTML iframe
DESCRIPTION: HTML code for embedding a YouTube video demo with security and accessibility attributes enabled

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/ofSm4BJkZ1g"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Initializing Sentence Transformer Model for Text Embedding
DESCRIPTION: Initializes the 'sentence-transformers/all-MiniLM-L6-v2' model to create 384-dimensional text embeddings for semantic meaning representation.

LANGUAGE: python
CODE:
from sentence_transformers import SentenceTransformer

model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands for setting up the Python environment and installing project dependencies using Poetry.

LANGUAGE: shell
CODE:
pip install poetry
poetry shell
poetry install

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Example showing the recommended file structure for components with associated utility files and standalone components.

LANGUAGE: plaintext
CODE:
components/ui
- SampleComponentA
  - SampleComponentA.tsx
  - SampleComponentA.constants.ts
  - SampleComponentA.utils.ts
  - SampleComponentA.types.ts
  - index.ts
- SampleComponentB.tsx

----------------------------------------

TITLE: Creating Basic RLS Policy in Supabase SQL
DESCRIPTION: Example of a basic RLS policy structure showing correct syntax and naming conventions.

LANGUAGE: sql
CODE:
CREATE POLICY "My descriptive policy." ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );

----------------------------------------

TITLE: Initializing Supabase Client in Flutter
DESCRIPTION: Main entry point that initializes Supabase client with configuration parameters. Sets up real-time client options with 40 events per second and launches the Flutter application.

LANGUAGE: dart
CODE:
void main() async {
  await Supabase.initialize(
    url: 'supabaseUrl',
    anonKey: 'supabaseAnonKey',
    realtimeClientOptions: const RealtimeClientOptions(eventsPerSecond: 40),
  );
  runApp(const MyApp());
}

----------------------------------------

TITLE: Using Scroll Area Component in React
DESCRIPTION: Example of how to use the Scroll Area component in a React component, demonstrating its application with custom content and styling.

LANGUAGE: tsx
CODE:
<ScrollArea className="h-[200px] w-[350px] rounded-md border p-4">
  Jokester began sneaking into the castle in the middle of the night and leaving jokes all over the
  place: under the king's pillow, in his soup, even in the royal toilet. The king was furious, but
  he couldn't seem to stop Jokester. And then, one day, the people of the kingdom discovered that
  the jokes left by Jokester were so funny that they couldn't help but laugh. And once they started
  laughing, they couldn't stop.
</ScrollArea>

----------------------------------------

TITLE: MFA-Based Update Policy in Supabase SQL
DESCRIPTION: Implementation of Multi-Factor Authentication check in RLS policy using auth.jwt().

LANGUAGE: sql
CODE:
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);

----------------------------------------

TITLE: Disabling Prepared Statements in Drizzle Client
DESCRIPTION: Configure the Drizzle postgres client with prepare: false flag to disable prepared statements.

LANGUAGE: typescript
CODE:
export const client = postgres(connectionString, { prepare: false })

----------------------------------------

TITLE: Complex SQL Query with CTEs
DESCRIPTION: Example of using Common Table Expressions (CTEs) for complex queries with multiple steps and comments

LANGUAGE: sql
CODE:
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This code snippet demonstrates how to embed a YouTube video within a Markdown document using an iframe. It includes responsive sizing and various allowances for the embedded video.

LANGUAGE: markdown
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/unC_de7iytA"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Implementing Sorting in DataTable with TanStack Table
DESCRIPTION: Adds sorting functionality to the DataTable component using TanStack Table's sorting features.

LANGUAGE: tsx
CODE:
import * as React from "react"
import {
  ColumnDef,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>{ /* ... */ }</Table>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Deployment Commands
DESCRIPTION: Commands for deploying the Supabase configuration to production using dotenvx for secure environment variable handling.

LANGUAGE: bash
CODE:
npx dotenvx run -f supabase/.env.production -- npx supabase link
npx dotenvx run -f supabase/.env.production -- npx supabase db push
npx dotenvx run -f supabase/.env.production -- npx supabase config push

----------------------------------------

TITLE: Supabase Project Setup Commands
DESCRIPTION: Commands for linking and initializing a Supabase project, including starting the local environment and pushing database schema.

LANGUAGE: bash
CODE:
supabase link --project-ref your-supabase-project-ref
supabase start
supabase db push

----------------------------------------

TITLE: Running Playwright Codegen for Test Recording in Bash
DESCRIPTION: Commands to set up and run Playwright's Codegen tool for recording user actions to create tests. This involves running two separate commands in different terminals.

LANGUAGE: bash
CODE:
pnpm codegen:setup
# in a separate terminal
pnpm codegen

----------------------------------------

TITLE: Formatting JSON Response
DESCRIPTION: JavaScript code to format and send a JSON response from a Cloudflare Worker with proper headers.

LANGUAGE: javascript
CODE:
return new Response(JSON.stringify(data), {
  headers: {
    "Content-Type": "application/json",
  },
});

----------------------------------------

TITLE: Expo Development Server Command
DESCRIPTION: Command to start the Expo development server with dev client configuration.

LANGUAGE: bash
CODE:
npx expo start --dev-client

----------------------------------------

TITLE: Changing Postgres Log Severity Level in SQL
DESCRIPTION: This SQL command demonstrates how to change the minimum severity level for logged messages in Postgres and view the updated setting.

LANGUAGE: sql
CODE:
alter role postgres set log_min_messages = '<NEW VALUE>';

-- view new setting
show log_min_messages; -- default WARNING

----------------------------------------

TITLE: Vertical Resizable Panel Group in React
DESCRIPTION: Example of creating a vertical resizable panel group using the direction prop.

LANGUAGE: tsx
CODE:
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable'

export default function Example() {
  return (
    <ResizablePanelGroup direction="vertical">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}

----------------------------------------

TITLE: Configuring Private Realtime Channel
DESCRIPTION: TypeScript code showing how to configure a private Supabase Realtime channel with the required security settings. Requires @supabase/realtime-js v2.44.0 or later.

LANGUAGE: typescript
CODE:
const channel = supabase.channel('room-1', {
  config: { private: true },
})

----------------------------------------

TITLE: Listing Banned IPs in Supabase using CLI
DESCRIPTION: Command to list all IP addresses currently banned by Fail2ban in your Supabase project. Requires the project reference ID and uses the experimental CLI feature.

LANGUAGE: bash
CODE:
supabase network-bans get --project-ref <project_reference_id> --experimental

----------------------------------------

TITLE: Deploying Supabase Functions with Oak Server Middleware
DESCRIPTION: This command deploys the Supabase function using Oak server middleware to the cloud without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy oak-server --no-verify-jwt

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands for installing project dependencies and initializing the Expo project with EAS CLI.

LANGUAGE: bash
CODE:
npm i
npm install --global eas-cli && eas init --id your-expo-project-id

----------------------------------------

TITLE: Border Utilities in Tailwind CSS
DESCRIPTION: Examples of border utilities showing overlay and alternative border styles.

LANGUAGE: css
CODE:
border-overlay
border-alternative
text-border-control

----------------------------------------

TITLE: Windows PATH Configuration Commands
DESCRIPTION: Shell commands for configuring Windows PATH to include Node.js and NPX executables.

LANGUAGE: shell
CODE:
npm config get prefix

LANGUAGE: shell
CODE:
setx PATH "%PATH%;<path-to-dir>"

----------------------------------------

TITLE: Setting up environment variables for Supabase in Vite
DESCRIPTION: Creates a .env.local file with placeholders for Supabase URL and anonymous key. These environment variables are used to configure the Supabase client in the Vite application.

LANGUAGE: plaintext
CODE:
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=

----------------------------------------

TITLE: Running Supabase Functions Locally for OG Image Generation
DESCRIPTION: This snippet demonstrates how to start Supabase locally and serve the 'lw13-meetups-ogs' function for Open Graph image generation. It disables JWT verification and uses a local environment file.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lw13-meetups-ogs --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Importing Progress Component
DESCRIPTION: Example of importing the Progress component in a React/TypeScript file.

LANGUAGE: tsx
CODE:
import { Progress } from '@/components/ui/progress'

----------------------------------------

TITLE: Upserting Vector Records
DESCRIPTION: Demonstrates how to insert or update vector records with associated metadata. Each record consists of an identifier, vector values, and metadata.

LANGUAGE: python
CODE:
# add records to the collection
docs.upsert(
    records=[
        (
         "vec0",           # the vector's identifier
         [0.1, 0.2, 0.3],  # the vector. list or np.array
         {"year": 1973}    # associated  metadata
        ),
        (
         "vec1",
         [0.7, 0.8, 0.9],
         {"year": 2012}
        )
    ]
)

----------------------------------------

TITLE: Querying Replication Slots and Subscriptions in PostgreSQL
DESCRIPTION: SQL commands to check for existing replication slots and subscriptions in a PostgreSQL database. These queries help identify potential obstacles to backup restoration.

LANGUAGE: sql
CODE:
SELECT * FROM pg_replication_slots;

SELECT * FROM pg_subscription;

----------------------------------------

TITLE: Local Function Deployment
DESCRIPTION: Command to serve the competition function locally without JWT verification.

LANGUAGE: bash
CODE:
supabase functions serve --no-verify-jwt

----------------------------------------

TITLE: Building Supabase Svelte Project for Production
DESCRIPTION: npm script to build the project for production, creating optimized and minified files in the 'dist' folder.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Defining CSS Variables for Chart Colors in React
DESCRIPTION: This CSS snippet defines color variables for chart elements in both light and dark modes. These variables can be used to style chart components consistently across the application.

LANGUAGE: css
CODE:
@layer base {
  :root {
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

----------------------------------------

TITLE: Using Admonitions in Supabase Docs
DESCRIPTION: Example of using admonitions (callouts) in Supabase documentation to highlight important information.

LANGUAGE: markdown
CODE:
<Admonition type="note" label="Optional label displays as title">

Your content here

</Admonition>

----------------------------------------

TITLE: Setting Up Storage and Access Controls for Avatars in Supabase
DESCRIPTION: This snippet sets up a storage bucket for avatars and defines access control policies. It allows public access for viewing avatars, and permits users to upload and update their own avatars.

LANGUAGE: sql
CODE:
-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage/security/access-control#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');

----------------------------------------

TITLE: Running Local Development Setup
DESCRIPTION: Commands for starting Supabase locally and seeding the image embeddings collection.

LANGUAGE: shell
CODE:
supabase start
poetry run seed

----------------------------------------

TITLE: Implementing AssistantCommandPopover with AssistantChatForm in TypeScript React
DESCRIPTION: This snippet demonstrates how to implement the AssistantCommandPopover component with AssistantChatForm, including state management for the commands popover and a text area reference for proper focus handling.

LANGUAGE: tsx
CODE:
const [commandsOpen, setCommandsOpen] = useState<boolean>(false)
const textAreaRef = createRef<HTMLTextAreaElement>()

<AssistantCommandPopover
  open={commandsOpen}
  setOpen={setCommandsOpen}
  textAreaRef={textAreaRef}
>
  <AssistantChatForm
    commandsOpen={commandsOpen}
    setCommandsOpen={setCommandsOpen}
  />
</AssistantCommandPopover>

----------------------------------------

TITLE: JWT Structure with MFA Claims in JavaScript
DESCRIPTION: This JavaScript object represents the structure of a JWT (JSON Web Token) issued after successful MFA verification. It includes the 'aal' (Authenticator Assurance Level) and 'amr' (Authenticator Method Reference) claims.

LANGUAGE: jsx
CODE:
{
  "sub": "8802c1d6-c555-46e3-aacd-b61198b058d9",
  "email": "j0@supacats.io",
  "aud": "authenticated",
  "exp": 1670929371,
  "aal": "aal2",
  "amr": [
    {
      "method": "password",
      "timestamp": 1670924394
    },
    {
      "method": "totp",
      "timestamp": 1670925771
    }
  ],
  // ...
}

----------------------------------------

TITLE: Updating Tailwind Configuration for Input OTP
DESCRIPTION: Adds necessary animations to the Tailwind CSS configuration file for the Input OTP component.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        'caret-blink': {
          '0%,70%,100%': { opacity: '1' },
          '20%,50%': { opacity: '0' },
        },
      },
      animation: {
        'caret-blink': 'caret-blink 1.25s ease-out infinite',
      },
    },
  },
}

----------------------------------------

TITLE: Running Flutter Application Commands
DESCRIPTION: Commands for running the Flutter application on different platforms (iOS, Android, and Web).

LANGUAGE: bash
CODE:
flutter run

LANGUAGE: bash
CODE:
flutter run -d web-server --web-hostname localhost --web-port 3000

----------------------------------------

TITLE: Dropping Subscriptions and Replication Slots in PostgreSQL
DESCRIPTION: SQL commands to drop existing subscriptions and replication slots in a PostgreSQL database. These actions are necessary before restoring a backup, but are destructive and should be used with caution.

LANGUAGE: sql
CODE:
DROP SUBSCRIPTION <subscription>;

SELECT pg_drop_replication_slot(slot_name);

----------------------------------------

TITLE: Creating Supabase database schema for user profiles and storage
DESCRIPTION: SQL commands to set up the database schema for user profiles, including table creation, policies for row-level security, and storage configuration for avatar images.

LANGUAGE: sql
CODE:
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: Implementing Postgres Row Level Security for Todo Items
DESCRIPTION: SQL schema definition for todos table with row level security policies that ensure users can only access and modify their own todo items.

LANGUAGE: sql
CODE:
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);

----------------------------------------

TITLE: Returning Data from Delete Operation in Supabase.js v2
DESCRIPTION: Example of how to return deleted rows when performing a delete operation in Supabase.js v2 by adding a .select() call.

LANGUAGE: sql
CODE:
const { data, error } = await supabase
    .from('my_table')
    .delete()
    .eq('id', 1)
    .select()

----------------------------------------

TITLE: Basic Input Usage
DESCRIPTION: Simple example of using the Input component

LANGUAGE: tsx
CODE:
<Input />

----------------------------------------

TITLE: Deploying OpenAI Function to Supabase
DESCRIPTION: Commands to deploy the OpenAI function and set environment secrets in Supabase.

LANGUAGE: bash
CODE:
supabase functions deploy --no-verify-jwt openai
supabase secrets set --env-file ./supabase/.env.local

----------------------------------------

TITLE: Importing Breadcrumb Components in React
DESCRIPTION: Import statement for various breadcrumb-related components from a UI library.

LANGUAGE: tsx
CODE:
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@/components/ui/breadcrumb'

----------------------------------------

TITLE: Initializing a Basic Bar Chart with Recharts in React
DESCRIPTION: This snippet demonstrates how to create a simple bar chart using Recharts components and custom UI elements. It includes the ChartContainer and ChartTooltipContent components.

LANGUAGE: tsx
CODE:
import { Bar, BarChart } from 'recharts'

import { ChartContainer, ChartTooltipContent } from '@/components/ui/charts'

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey="value" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}

----------------------------------------

TITLE: Installing Dependencies for React Native Expo Project
DESCRIPTION: Commands to install project dependencies and prepare the environment for file picker functionality.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
npm run prebuild

----------------------------------------

TITLE: Logging Environment Variables in Supabase Edge Function
DESCRIPTION: TypeScript code for an Edge Function that logs custom and default environment variables, and responds to a request with a greeting.

LANGUAGE: typescript
CODE:
console.log('Hello from Functions!')

console.log('logging custom secret', Deno.env.get('MY_NAME'))

console.log('logging SUPABASE_URL:', Deno.env.get('SUPABASE_URL').slice(0, 15))

Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
})

----------------------------------------

TITLE: Running the Vue 3 and Supabase app locally
DESCRIPTION: Command to start the development server and run the Vue 3 and Supabase app on localhost:5173.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Multiple Operation RLS Policies in Supabase SQL
DESCRIPTION: Demonstrates correct way to create separate policies for different operations instead of combining them.

LANGUAGE: sql
CODE:
create policy "Profiles can be created by any user"
on profiles
for insert
to authenticated
with check ( true );

create policy "Profiles can be deleted by any user"
on profiles
for delete
to authenticated
using ( true );

----------------------------------------

TITLE: Resetting PostgreSQL Log Level to Default
DESCRIPTION: SQL command to reset the log_min_messages setting to its default value

LANGUAGE: sql
CODE:
ALTER ROLE postgres RESET log_min_messages;

----------------------------------------

TITLE: New Storage Key Naming Convention in Supabase Auth
DESCRIPTION: Shows the new naming convention for storage keys in the Auth library, which now includes the project reference.

LANGUAGE: jsx
CODE:
const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`

----------------------------------------

TITLE: Anatomy of Form Components in React
DESCRIPTION: Demonstrates the basic structure of form components using React Hook Form and custom Form components.

LANGUAGE: tsx
CODE:
<Form>
  <FormField
    control={...}
    name="..."
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>

----------------------------------------

TITLE: Serving Supabase Functions Locally
DESCRIPTION: Command to start and serve Supabase functions locally, allowing for development and testing.

LANGUAGE: bash
CODE:
supabase functions serve

----------------------------------------

TITLE: Importing Pagination Components
DESCRIPTION: Import statement for all pagination-related components including content, ellipsis, navigation links, and controls.

LANGUAGE: tsx
CODE:
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination'

----------------------------------------

TITLE: Linking a Local Project to Supabase
DESCRIPTION: Shows how to link a local project to a Supabase project using the CLI. This is necessary for local development and management.

LANGUAGE: bash
CODE:
supabase link --project-ref <project-id>

----------------------------------------

TITLE: Importing Calendar Component in React
DESCRIPTION: This code snippet shows how to import the Calendar component in a React application.

LANGUAGE: tsx
CODE:
import { Calendar } from '@/components/ui/calendar'

----------------------------------------

TITLE: Testing Local Supabase Stream Function
DESCRIPTION: cURL command to test the local streams function endpoint by making a GET request to the local Supabase instance.

LANGUAGE: bash
CODE:
curl http://localhost:54321/functions/v1/streams

----------------------------------------

TITLE: Granting Statistics Read Permission in Postgres
DESCRIPTION: SQL command to grant pg_read_all_stats privilege to the postgres role, enabling access to system statistics and performance monitoring features.

LANGUAGE: sql
CODE:
grant pg_read_all_stats to postgres;

----------------------------------------

TITLE: Supabase Database Schema Setup
DESCRIPTION: SQL commands for setting up the database schema including profiles table, row level security policies, realtime functionality, and storage configuration.

LANGUAGE: sql
CODE:
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

----------------------------------------

TITLE: Running Supabase Functions Locally with Upstash Redis
DESCRIPTION: These commands start the Supabase local development environment and serve functions using the local environment file for Upstash Redis configuration.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve --env-file supabase/.env.local

----------------------------------------

TITLE: Configuring Moshi Serialization for Supabase KT
DESCRIPTION: This snippet demonstrates how to set up Moshi serialization for Supabase KT. It includes adding the Moshi serializer dependency and configuring the Supabase client to use Moshi.

LANGUAGE: kotlin
CODE:
implementation("io.github.jan-tennert.supabase:serializer-moshi:VERSION")

LANGUAGE: kotlin
CODE:
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = MoshiSerializer()
}

----------------------------------------

TITLE: Article Styling with Tailwind Typography
DESCRIPTION: Shows how to structure an article with proper typography using the prose class, including headings and paragraphs

LANGUAGE: html
CODE:
<article class="prose">
  <h1>Garlic bread with cheese: What the science tells us</h1>
  <p>
    For years parents have espoused the health benefits of eating garlic bread with cheese to their
    children, with the food earning such an iconic status in our culture that kids will often dress
    up as warm, cheesy loaf for Halloween.
  </p>
  <p>
    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases
    springing up around the country.
  </p>
  <!-- ... -->
</article>

----------------------------------------

TITLE: Exporting Privacy Policy Page Component
DESCRIPTION: Exports the privacy policy page as a default React component, wrapping the content in a Layout component with metadata.

LANGUAGE: jsx
CODE:
export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Basic Usage of Textarea Component in React
DESCRIPTION: Simple example of using the Textarea component in a React application.

LANGUAGE: tsx
CODE:
<Textarea />

----------------------------------------

TITLE: Installing Radix UI Accordion Package
DESCRIPTION: Command to install the required Radix UI accordion dependency via npm.

LANGUAGE: bash
CODE:
npm install @radix-ui/react-accordion

----------------------------------------

TITLE: Deploying Supabase SMTP Email Function
DESCRIPTION: Commands to link the project, set SMTP secrets, and deploy the send-email-smtp function. It includes setting up SMTP hostname, port, credentials, and sender email address.

LANGUAGE: bash
CODE:
supabase link --project-ref your-project-ref
supabase secrets set SMTP_HOSTNAME="your.hostname.com" SMTP_PORT="2587" SMTP_USERNAME="your_username" SMTP_PASSWORD="your_password" SMTP_FROM="no-reply@example.com"
supabase functions deploy send-email-smtp

----------------------------------------

TITLE: Querying pg_cron Error Logs in PostgreSQL
DESCRIPTION: SQL query to search for pg_cron-related errors in Postgres logs using the Log Explorer.

LANGUAGE: sql
CODE:
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type,
  parsed.application_name
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
  and regexp_contains(parsed.application_name, 'pg_cron')
order by timestamp desc
limit 100;

----------------------------------------

TITLE: Starting Supabase Locally
DESCRIPTION: This command starts Supabase locally using the Supabase CLI. It initializes the local development database for the project.

LANGUAGE: bash
CODE:
supabase start

----------------------------------------

TITLE: Production Function Deployment
DESCRIPTION: Command to deploy the competition function to production without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy --no-verify-jwt get-tshirt-competition

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String
DESCRIPTION: This example demonstrates the connection string for Supavisor in transaction mode, using port 6543.

LANGUAGE: sh
CODE:
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Creating and Populating PostgreSQL Test Table
DESCRIPTION: SQL commands to create a test table with UUID, text, integer, and boolean columns, followed by insert statements to populate it with 20 sample records

LANGUAGE: sql
CODE:
-- Create table
CREATE TABLE your_table_name (
    id UUID PRIMARY KEY,
    column1 TEXT,
    column2 INT,
    column3 BOOLEAN
);

-- Insert statements
INSERT INTO your_table_name (id, column1, column2, column3) VALUES
    (uuid_generate_v4(), 'value1', 10, TRUE),
    (uuid_generate_v4(), 'value2', 20, FALSE),
    (uuid_generate_v4(), 'value3', 15, TRUE),
    (uuid_generate_v4(), 'value4', 8, FALSE),
    (uuid_generate_v4(), 'value5', 25, TRUE),
    (uuid_generate_v4(), 'value6', 12, FALSE),
    (uuid_generate_v4(), 'value7', 18, TRUE),
    (uuid_generate_v4(), 'value8', 30, FALSE),
    (uuid_generate_v4(), 'value9', 22, TRUE),
    (uuid_generate_v4(), 'value10', 5, FALSE),
    (uuid_generate_v4(), 'value11', 17, TRUE),
    (uuid_generate_v4(), 'value12', 9, FALSE),
    (uuid_generate_v4(), 'value13', 14, TRUE),
    (uuid_generate_v4(), 'value14', 28, FALSE),
    (uuid_generate_v4(), 'value15', 11, TRUE),
    (uuid_generate_v4(), 'value16', 7, FALSE),
    (uuid_generate_v4(), 'value17', 19, TRUE),
    (uuid_generate_v4(), 'value18', 26, FALSE),
    (uuid_generate_v4(), 'value19', 16, TRUE),
    (uuid_generate_v4(), 'value20', 21, FALSE);

----------------------------------------

TITLE: Dropping Database Constraint in Supabase
DESCRIPTION: SQL command to drop a constraint that may be preventing the Auth server from updating the auth.users table. This is used to resolve constraint-related errors (sql_state_code = 23503 or 23*).

LANGUAGE: sql
CODE:
ALTER TABLE <your table> DROP CONSTRAINT <constraint name>;

----------------------------------------

TITLE: Running pg_dump with RLS Enabled
DESCRIPTION: Bash command to export data using pg_dump with row level security enabled.

LANGUAGE: bash
CODE:
pg_dump \
-h db.host.supabase.co \
-U exporter \
-d postgres \
-n public \
--data-only \
--enable-row-security \
--table=profiles \
> seed.sql

----------------------------------------

TITLE: Default Layout Export
DESCRIPTION: Exports the default layout component with metadata and children props.

LANGUAGE: javascript
CODE:
export default (context) => <Layout meta={meta} children={context.children} context={context} />

----------------------------------------

TITLE: Deploying Puppeteer Function to Supabase
DESCRIPTION: Command to deploy the Puppeteer function to Supabase with JWT verification disabled.

LANGUAGE: bash
CODE:
supabase functions deploy puppeteer --no-verify-jwt

----------------------------------------

TITLE: Adding New Column with Desired Data Type in PostgreSQL
DESCRIPTION: This SQL command adds a new column with the desired data type to the target table. It's the first step in the alternative approach for changing column types in large tables.

LANGUAGE: sql
CODE:
ALTER TABLE "table_name" ADD COLUMN "new_column_name" new_data_type;

----------------------------------------

TITLE: Pushing Database Changes to Remote Supabase Project
DESCRIPTION: This set of commands authenticates the user, links the local project to a remote Supabase instance, and pushes database changes to the remote project.

LANGUAGE: bash
CODE:
npx supabase login
npx supabase link
npx supabase db push

----------------------------------------

TITLE: Basic Postgres Error Example
DESCRIPTION: Example of the 42P01 Postgres error message format when a relation cannot be found.

LANGUAGE: sql
CODE:
42P01: relation "<some table name>" does not exist

----------------------------------------

TITLE: Streaming Realtime Data in v1
DESCRIPTION: The stream() method in v1 no longer requires execute() at the end, and filtering by equality is simplified. The primaryKey is now a named parameter for clarity.

LANGUAGE: dart
CODE:
supabase.from('my_table')
  .stream(primaryKey: ['id'])
  .eq('id', '120')
  .listen();

----------------------------------------

TITLE: Creating Section Component
DESCRIPTION: Defines a reusable Section component that renders a security feature with an icon or image and children content.

LANGUAGE: jsx
CODE:
export const Section = ({ children, icon, img }) => (
  <div>
    {icon && (
      <div className="border shadow-background-surface-300 not-prose bg-surface-100 -mb-4 flex h-10 w-10 items-center justify-center rounded-full">
        <figure className="w-5 h-5 flex items-center justify-center">{icon}</figure>
      </div>
    )}
    {img && <div className="-mb-4 flex h-12 w-12 items-center justify-center">{img}</div>}
    {children}
  </div>
)

----------------------------------------

TITLE: Copying Environment Variables for Upstash Redis in Supabase
DESCRIPTION: This command copies the example environment file to create a local configuration for Upstash Redis credentials in Supabase.

LANGUAGE: bash
CODE:
cp supabase/.env.local.example supabase/.env.local

----------------------------------------

TITLE: Supabase Pooler Connection String for Transaction Mode
DESCRIPTION: This snippet demonstrates the connection string format for connecting to Supabase's connection pooler in transaction mode. It uses port 6543 and includes placeholders for the password.

LANGUAGE: md
CODE:
#example transaction mode string
postgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:6543/postgres

----------------------------------------

TITLE: Performing Image Search
DESCRIPTION: Command to execute an image search with a text query

LANGUAGE: bash
CODE:
poetry run search "bike in front of red brick wall"

----------------------------------------

TITLE: Copying Data to New Column with Type Casting in PostgreSQL
DESCRIPTION: This SQL command updates the table by copying data from the old column to the new column, casting it to the new data type. It's the second step in the alternative approach for changing column types.

LANGUAGE: sql
CODE:
UPDATE "table_name" SET "old_column_name" = "new_column_name"::new_data_type;

----------------------------------------

TITLE: Implementing OAuth Sign-In Redirect in Next.js
DESCRIPTION: This snippet shows how to perform a server-side redirect for OAuth sign-in using Supabase auth helpers in Next.js. It utilizes the NextResponse.redirect() method with the URL obtained from the signInWithOAuth() function.

LANGUAGE: typescript
CODE:
import { NextResponse } from "next/server";
...
const { data } = await supabase.auth.signInWithOAuth({
  provider: 'github',
})

return NextResponse.redirect(data.url)

----------------------------------------

TITLE: Verifying Max Connections in SQL
DESCRIPTION: SQL query to check the current max_connections setting in the Supabase database after making changes.

LANGUAGE: sql
CODE:
SHOW max_connections;

----------------------------------------

TITLE: Implementing Supabase Realtime Subscription in React
DESCRIPTION: This React code sets up a Supabase Realtime subscription to listen for changes in the 'locations' table and update the component state accordingly.

LANGUAGE: tsx
CODE:
export default function Page({ params }: { params: { event: string } }) {
  const supabase = createClient<Database>()
  const [locations, setLocations] = useState<{
    [key: string]: Tables<'locations'>
  } | null>(null)
  const locationsRef = useRef<{
    [key: string]: Tables<'locations'>
  } | null>()
  locationsRef.current = locations

  useEffect(() => {
    // Listen to realtime updates
    const subs = supabase
      .channel('schema-db-changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT', // Listen only to INSERTs
          schema: 'public',
          table: 'locations',
          filter: `event_id=eq.${params.event}`,
        },
        (payload) => {
          const loc = payload.new as Tables<'locations'>
          const updated = {
            ...locationsRef.current,
            [loc.user_id.toString()]: loc,
          }

          setLocations(updated)
        }
      )
      .subscribe()
    console.log('Subscribed')

    return () => {
      subs.unsubscribe()
    }
  }, [])

----------------------------------------

TITLE: Configuring Supabase Hack Night Event Details in YAML
DESCRIPTION: This YAML configuration defines the details for a Supabase hack night event. It includes the event title, subtitle, type, date, location, duration, and link information.

LANGUAGE: yaml
CODE:
---
title: 'hack night v0.19 - Miami Beach, Florida'
subtitle: 'where miami builds cool shit.'
type: 'talk'
onDemand: false
disable_page_build: true
link: { href: https://lu.ma/x62id5w8, target: '_blank' }
date: '2024-09-05T18:00:00.000-04:00'
timezone: 'America/New_York'
duration: '5 hours'
categories:
  - talk
---

----------------------------------------

TITLE: Serving OG Image Generator function locally
DESCRIPTION: Command to serve the OG Image Generator function locally using Supabase CLI. This allows testing and development of the function on a local machine.

LANGUAGE: bash
CODE:
supabase functions serve og-images

----------------------------------------

TITLE: Dropping Test Authorization Function in Supabase SQL
DESCRIPTION: This SQL command removes the previously created 'test_authorization_header' function from the database. It's useful for cleaning up after testing is complete.

LANGUAGE: sql
CODE:
drop function test_authorization_header;

----------------------------------------

TITLE: Revoking Role-Specific Function Execution in PostgreSQL
DESCRIPTION: Revokes the execution permission of a specific function from a particular role (anon in this example).

LANGUAGE: sql
CODE:
revoke execute on function foo from anon;

----------------------------------------

TITLE: Reassigning Object Ownership in Postgres SQL
DESCRIPTION: This SQL command reassigns ownership of all objects owned by the specified role to the 'postgres' user, preparing for role deletion.

LANGUAGE: sql
CODE:
REASSIGN OWNED BY <role> TO postgres;

----------------------------------------

TITLE: Running Supabase OG Image Generator Locally
DESCRIPTION: Commands to start the Supabase service and run the OG image generation function locally with environment variables. The function will be accessible at localhost:54321.

LANGUAGE: bash
CODE:
supabase start
supabase functions serve lw13-meetups-ogs --no-verify-jwt --env-file ./supabase/.env.local

----------------------------------------

TITLE: Supabase Database Inspection Commands
DESCRIPTION: CLI commands for inspecting and debugging Postgres databases, including functionality for analyzing queries, locks, indexes, and performance metrics.

LANGUAGE: markdown
CODE:
supabase inspect db --help
Tools to inspect your Supabase database

Usage:
  supabase inspect db [command]

Available Commands:
  bloat                Estimates space allocated to a relation that is full of dead tuples
  blocking             Show queries that are holding locks and the queries that are waiting for them to be released
  cache-hit            Show cache hit rates for tables and indices
  calls                Show queries from pg_stat_statements ordered by total times called
  index-sizes          Show index sizes of individual indexes
  index-usage          Show information about the efficiency of indexes
  locks                Show queries which have taken out an exclusive lock on a relation
  long-running-queries Show currently running queries running for longer than 5 minutes

----------------------------------------

TITLE: Basic SQL Operations with WHERE Clauses
DESCRIPTION: Demonstrates standard SQL operations (SELECT, UPDATE, DELETE) using WHERE clauses for row filtering.

LANGUAGE: sql
CODE:
-- select
select *
from some_table
where id = 5;

-- update
update some_table
set id = 6
where id = 5;

-- delete
delete from some_table
where id = 6;

----------------------------------------

TITLE: Setting PostgreSQL Log Level to WARNING
DESCRIPTION: SQL command to set the log level to WARNING for the postgres role

LANGUAGE: sql
CODE:
ALTER ROLE postgres SET log_min_messages TO 'WARNING';

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Commands to uninstall the old auth-helpers packages and install the new @supabase/ssr package along with supabase-js.

LANGUAGE: bash
CODE:
npm uninstall @supabase/auth-helpers-nextjs @supabase/supabase-js
npm install @supabase/ssr @supabase/supabase-js

----------------------------------------

TITLE: Creating Account Table and Search Function
DESCRIPTION: Creates an Account table and a function to search accounts by email domain, demonstrating the return of record sets.

LANGUAGE: sql
CODE:
create table "Account"(
  id serial primary key,
  email varchar(255) not null
);

insert into "Account"(email)
values
  ('a@foo.com'),
  ('b@bar.com'),
  ('c@foo.com');

create function "accountsByEmailDomain"("domainToSearch" text)
  returns setof "Account"
  stable
  language sql
as $$
	select
		id, email
	from
		"Account"
	where
		email ilike ('%@' || "domainToSearch");
$$;

----------------------------------------

TITLE: Running Individual Supabase Sites
DESCRIPTION: Command for running specific Supabase sites individually using scope names.

LANGUAGE: sh
CODE:
pnpm dev:www

----------------------------------------

TITLE: Creating Next.js App with Supabase Starter Template
DESCRIPTION: Command to create a new Next.js application using the Supabase starter template, which includes support for Next.js 13's App router, Cookie-based Auth, and TypeScript.

LANGUAGE: bash
CODE:
npx create-next-app -e with-supabase

----------------------------------------

TITLE: Checking Current PostgreSQL Log Level
DESCRIPTION: SQL command to check the current log_min_messages setting in PostgreSQL

LANGUAGE: sql
CODE:
SHOW log_min_messages;

----------------------------------------

TITLE: Creating a Descending Order Index in Postgres
DESCRIPTION: Demonstrates creating an index with a specific sort order (descending) and NULL handling. This can optimize queries with matching ORDER BY clauses.

LANGUAGE: SQL
CODE:
CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);

----------------------------------------

TITLE: Package.json Theme Configuration
DESCRIPTION: Example configuration for adding new theme sets in package.json. Shows how to extend existing theme transformation scripts with new themes using token-transformer.

LANGUAGE: json
CODE:
// package.json

//..\n"build-transform-light": "npx token-transformer tokens.json styles/tokens/02_themes/light.json global,exported/light,theme global",
// add a new line like this:
"build-transform-new": "npx token-transformer tokens.json styles/tokens/02_themes/new.json global,new,theme global",
//..\n// append the new theme/set command to end of the build-transform command
"build-transform": "npm run build-transform-global && npm run build-transform-typography && npm run build-transform-dark  && npm run build-transform-light && npm run build-transform-new",

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Setup of Supabase client with PKCE flow type and custom session storage. Uses environment variables for configuration and implements singleton pattern with Flask's global context.

LANGUAGE: python
CODE:
import os
from flask import g
from werkzeug.local import LocalProxy
from supabase.client import Client, ClientOptions
from flask_storage import FlaskSessionStorage

url = os.environ.get("SUPABASE_URL", "")
key = os.environ.get("SUPABASE_KEY", "")

def get_supabase() -> Client:
    if "supabase" not in g:
        g.supabase = Client(
            url,
            key,
            options=ClientOptions(
                storage=FlaskSessionStorage(),
                flow_type="pkce"
            ),
        )
    return g.supabase

supabase: Client = LocalProxy(get_supabase)

----------------------------------------

TITLE: Filtering Postgres Logs by Timeframe in SQL
DESCRIPTION: This SQL snippet shows how to filter Postgres logs within a specific time range using the timestamp field.

LANGUAGE: sql
CODE:
-- filtering by time period
...query
where
  timestamp between '2024-05-06 04:44:00' and '2024-05-06 04:45:00'

----------------------------------------

TITLE: Configuring Parallel Workers in SQL
DESCRIPTION: SQL commands to set and verify the number of parallel maintenance workers for index creation.

LANGUAGE: sql
CODE:
set max_parallel_maintenance_workers to <integer>;
show max_parallel_maintenance_workers;

----------------------------------------

TITLE: Querying Countries Table with Supabase JavaScript Client
DESCRIPTION: This snippet demonstrates a simple query to select country names from the 'countries' table using the Supabase JavaScript client. It shows how a basic query is translated into a REST API call.

LANGUAGE: javascript
CODE:
let { data: countries, error } = await supabase.from('countries').select('name')

LANGUAGE: bash
CODE:
https://<project ref>.supabase.co/rest/v1/countries?select=name

----------------------------------------

TITLE: Creating Flutter App
DESCRIPTION: Command to create a new Flutter application

LANGUAGE: bash
CODE:
flutter create my_app

----------------------------------------

TITLE: Generating Scaffold and Running Migrations
DESCRIPTION: Create an Article model and generate migration files using Rails CLI commands.

LANGUAGE: bash
CODE:
bin/rails generate scaffold Article title:string body:text
bin/rails db:migrate

----------------------------------------

TITLE: Granting Prisma Access to PostgreSQL Objects
DESCRIPTION: SQL commands to grant Prisma full authority over all database objects in the public schema.

LANGUAGE: sql
CODE:
grant usage on schema public to prisma;
grant create on schema public to prisma;
grant all on all tables in schema public to prisma;
grant all on all routines in schema public to prisma;
grant all on all sequences in schema public to prisma;
alter default privileges for role postgres in schema public grant all on tables to prisma;
alter default privileges for role postgres in schema public grant all on routines to prisma;
alter default privileges for role postgres in schema public grant all on sequences to prisma;

----------------------------------------

TITLE: Deploying the Rails App to Fly.io
DESCRIPTION: Use Fly.io CLI to deploy the Rails application and open it in the browser.

LANGUAGE: bash
CODE:
fly deploy
fly apps open

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start a local Python HTTP server for testing the upload functionality.

LANGUAGE: bash
CODE:
python3 -m http.server

----------------------------------------

TITLE: Configuring Kotlin Multiplatform with Ktor Engines
DESCRIPTION: Setting up Ktor client engines for different platforms in a Kotlin Multiplatform project, including JVM, Android, JS, and iOS targets.

LANGUAGE: kotlin
CODE:
val commonMain by getting {
    dependencies {
        //supabase modules
    }
}
val jvmMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-cio:KTOR_VERSION")
    }
}
val androidMain by getting {
    dependsOn(jvmMain)
}
val jsMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-js:KTOR_VERSION")
    }
}
val iosMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-darwin:KTOR_VERSION")
    }
}

----------------------------------------

TITLE: Creating a Blog Table with Array Column
DESCRIPTION: SQL definition for creating a blog table with an array-type column for tags.

LANGUAGE: sql
CODE:
create table blog (
  id int primary key,
  name text not null,
  tags text[] not null,
  created_at timestamp not null
);

----------------------------------------

TITLE: Cloning the Supabase Repository
DESCRIPTION: Instructions for cloning the forked Supabase repository and navigating to the project directory.

LANGUAGE: sh
CODE:
git clone https://github.com/<github_username>/supabase.git
cd supabase

----------------------------------------

TITLE: Adding Supabase Badge (Markdown)
DESCRIPTION: Markdown code for adding a 'Made with Supabase' badge to your project documentation.

LANGUAGE: markdown
CODE:
[![Made with Supabase](https://supabase.com/badge-made-with-supabase.svg)](https://supabase.com)

----------------------------------------

TITLE: Creating Storage Upload Policy
DESCRIPTION: SQL policy definition to allow public uploads to a specific Supabase storage bucket.

LANGUAGE: sql
CODE:
CREATE POLICY "allow uploads" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'your-bucket-name');

----------------------------------------

TITLE: Implementing SemVer Domain with Validation Rules
DESCRIPTION: Creates a domain with check constraints to enforce semantic versioning rules on the components type.

LANGUAGE: sql
CODE:
create domain semver
    as semver_components
    check (
        -- major: non-null positive integer
        (value).major is not null and (value).major >= 0
        -- minor: non-null positive integer
        and (value).minor is not null and (value).minor >= 0
        -- patch: non-null positive integer
        and (value).patch is not null and (value).patch >= 0
        and semver_elements_match_regex(
            (value).pre_release,
            '^[A-z0-9]{1,255}$'
        )
        and semver_elements_match_regex(
            (value).build_metadata,
            '^[A-z0-9\.]{1,255}$'
        )
    );

----------------------------------------

TITLE: Configuring Supabase Storage Variables
DESCRIPTION: Essential configuration variables needed to connect Supabase Storage with Uppy, including the project's anonymous key, project ID, storage bucket name, and bearer token.

LANGUAGE: javascript
CODE:
const SUPABASE_ANON_KEY = '' // your project's anon key
const SUPABASE_PROJECT_ID = '' // your project ref
const STORAGE_BUCKET = '' // your storage bucket name
const BEARER_TOKEN = '' // your bearer token

----------------------------------------

TITLE: Creating Posts Table in Supabase
DESCRIPTION: SQL query to create and populate a posts table in Supabase with sample data

LANGUAGE: sql
CODE:
create table if not exists posts (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text,
  content text
);

insert into posts(title, content)
values
  ('My first post', 'Wow! What a great post.'),
  ('My second post', 'This one needs a little work!');

----------------------------------------

TITLE: Running Flutter Application
DESCRIPTION: Command to launch the Flutter application in development mode. This command can be executed in any environment that supports Flutter.

LANGUAGE: bash
CODE:
flutter run

----------------------------------------

TITLE: ClickHouse Query Pushdown with Order and Limit
DESCRIPTION: Shows how ClickHouse FDW supports pushdown of ORDER BY and LIMIT clauses for optimized query execution.

LANGUAGE: sql
CODE:
select *
from clickhouse.people
order by name
limit 20;

----------------------------------------

TITLE: Role-Based RLS Policies in Supabase SQL
DESCRIPTION: Examples of creating policies for authenticated and unauthenticated roles with proper syntax.

LANGUAGE: sql
CODE:
create policy "Profiles are viewable by everyone"
on profiles
for select
to authenticated, anon
using ( true );

create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );

----------------------------------------

TITLE: Embedding YouTube Video with HTML iframe
DESCRIPTION: HTML code for embedding a YouTube video player with specific parameters and styling classes

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/YYpTh2DAvho"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Simple SQL Queries
DESCRIPTION: Examples of short, simple SQL queries for select and update operations with proper formatting

LANGUAGE: sql
CODE:
select *
from employees
where end_date is null;

update employees
set end_date = '2023-12-31'
where employee_id = 1001;

----------------------------------------

TITLE: Embedding YouTube Video with Security Parameters
DESCRIPTION: HTML iframe implementation for embedding a YouTube video with security-focused parameters including nocookie domain and restricted permissions.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/6bGQotxisoY"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  ></iframe>
</div>

----------------------------------------

TITLE: Deploying Connect-Supabase Integration to Supabase Edge Functions
DESCRIPTION: These commands deploy the connect-supabase function to Supabase Edge Functions without JWT verification and set the secrets using a local environment file.

LANGUAGE: bash
CODE:
supabase functions deploy connect-supabase --no-verify-jwt
supabase secrets set --env-file ./supabase/.env.local

----------------------------------------

TITLE: Embedding YouTube Video with HTML/Markdown
DESCRIPTION: An iframe implementation for embedding a YouTube video with specific styling and permissions settings.

LANGUAGE: html
CODE:
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/bpzQCViwLLA"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

----------------------------------------

TITLE: Deploying Supabase Function for OG Image Generation
DESCRIPTION: Command to deploy the lw12-ticket-og function to Supabase without JWT verification.

LANGUAGE: bash
CODE:
supabase functions deploy lw12-ticket-og --no-verify-jwt

----------------------------------------

TITLE: Implementing Hugging Face Embedding in Supabase Edge Function
DESCRIPTION: This TypeScript snippet demonstrates how to create a Supabase Edge Function that uses Hugging Face for text embedding and stores the result in a Supabase database.

LANGUAGE: typescript
CODE:
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { env, pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.5.0'
import { createClient } from 'jsr:@supabase/supabase-js@2'

// Preparation for Deno runtime
env.useBrowserCache = false
env.allowLocalModels = false

const supabase = createClient(
  'https://xyzcompany.supabase.co',
  'public-anon-key',
)

// Construct pipeline outside of serve for faster warm starts
const pipe = await pipeline(
  'feature-extraction',
  'Supabase/gte-small',
)

// Deno Handler
serve(async (req) => {
  const { input } = await req.json()

  // Generate the embedding from the user input
  const output = await pipe(input, {
    pooling: 'mean',
    normalize: true,
  })

  // Get the embedding output
  const embedding = Array.from(output.data)

  // Store the embedding
  const { data, error } = await supabase
    .from('collections')
    .insert({ embedding })

  // Return the embedding
  return new Response(
    { new_row: data },
    { headers: { 'Content-Type': 'application/json' } },
  )
})

----------------------------------------

TITLE: Importing React Components for Privacy Policy Page
DESCRIPTION: Imports necessary React components and layouts for rendering the privacy policy page, including a custom PrivacySettings component.

LANGUAGE: jsx
CODE:
import Layout from '../layouts/Layout'
import SectionContainer from '../components/Layouts/SectionContainer'
import { PrivacySettings } from 'ui-patterns/PrivacySettings'

----------------------------------------

TITLE: Implementing Database Insert Trigger in YAML
DESCRIPTION: YAML configuration for mapping and filtering database insert events in a workflow using Map and Choice states.

LANGUAGE: yaml
CODE:
EmailUsers:
  Type: Map
  End: true
  InputPath: '$.changes'
  Iterator:
    StartAt: CheckInsert
    States:
      CheckInsert:
        Type: Choice
        Default: Complete
        Choices:
          - Variable: '$.type'
            StringEquals: INSERT
            Next: WaitOneDay

----------------------------------------

TITLE: Enabling Database Webhooks in TOML
DESCRIPTION: Shows how to enable the experimental database webhooks feature using the config.toml file.

LANGUAGE: toml
CODE:
[experimental.webhooks]
enabled = true

----------------------------------------

TITLE: Signing In with Supabase Auth using JavaScript
DESCRIPTION: This JavaScript code snippet shows how to implement a sign-in function using Supabase Auth. It demonstrates the simplicity of authenticating users with magic links in just a few lines of code.

LANGUAGE: javascript
CODE:
const { user, session, error } = await supabase.auth.signIn({
  email: 'example@email.com'
})

----------------------------------------

TITLE: Configuring Storage Buckets in TOML
DESCRIPTION: Illustrates how to configure a Storage bucket for automatic file uploads from a local directory using the config.toml file.

LANGUAGE: toml
CODE:
[storage.buckets.assets]
objects_path = "./assets"

----------------------------------------

TITLE: Importing Checkbox Component
DESCRIPTION: Example of importing the Checkbox component from the UI components directory

LANGUAGE: tsx
CODE:
import { Checkbox } from '@/components/ui/checkbox'

----------------------------------------

TITLE: Embedding Video in HTML/JSX
DESCRIPTION: Code for embedding a YouTube video iframe with specific configurations and classnames.

LANGUAGE: JSX
CODE:
<div className="video-container">
  <iframe
    className="w-full"
    src="https://www.youtube-nocookie.com/embed/_fdP-aaTHgw"
    title="We have improved Supabase AI ... A lot!"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; fullscreen; gyroscope; picture-in-picture; web-share"
    allowfullscreen
  />
</div>

----------------------------------------

TITLE: Installing Input OTP Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the Input OTP component manually.

LANGUAGE: bash
CODE:
npm install input-otp

----------------------------------------

TITLE: Installing Dependencies for In-Browser Semantic Search
DESCRIPTION: Install the required dependencies @electric-sql/pglite and @huggingface/transformers for the project.

LANGUAGE: bash
CODE:
npm install @electric-sql/pglite @huggingface/transformers

----------------------------------------

TITLE: Importing Radio Group Component in React
DESCRIPTION: Example of importing the Label and RadioGroup components in a React application.

LANGUAGE: tsx
CODE:
import { Label } from '@/components/ui/label'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'

----------------------------------------

TITLE: Creating Indexes with New Distance Functions
DESCRIPTION: Examples of creating HNSW indexes using newly supported distance functions: L1, Hamming, and Jaccard distances.

LANGUAGE: sql
CODE:
create index on items using hnsw (embedding vector_l1_ops);

create index on items using hnsw (embedding bit_hamming_ops);

create index on vector using hnsw (vector bit_jaccard_ops);

----------------------------------------

TITLE: Installing Resizable Component via CLI
DESCRIPTION: Command to install the Resizable component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add resizable

----------------------------------------

TITLE: Linking OAuth Identity to Anonymous User
DESCRIPTION: JavaScript code to link an OAuth provider (Google) to an anonymous user account.

LANGUAGE: jsx
CODE:
const { data, error } = await supabase
  .auth
  .linkIdentity({ provider: 'google' })

----------------------------------------

TITLE: Installing Tabs Component via CLI
DESCRIPTION: Use the shadcn-ui CLI to add the Tabs component to your project.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add tabs

----------------------------------------

TITLE: Configuring Supabase Postgres Connection in Laravel
DESCRIPTION: Set up the database connection details in the Laravel .env file using the Supabase Postgres connection string.

LANGUAGE: bash
CODE:
DB_CONNECTION=pgsql
DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres

----------------------------------------

TITLE: Implementing AssistantChatForm Component in TypeScript React
DESCRIPTION: This code demonstrates how to use the AssistantChatForm component with various props including icon, value, loading state, and event handlers for value changes and form submission.

LANGUAGE: tsx
CODE:
<AssistantChatForm
  icon={<Box strokeWidth={1.5} size={24} className="text-foreground-muted" />}
  value={value}
  loading={loading}
  disabled={loading}
  onValueChange={(e) => setValueState(e.target.value)}
  onSubmit={async (event) => {
    event.preventDefault()
    handleSubmit(event)
  }}
/>

----------------------------------------

TITLE: Configuring Supabase client with AsyncStorage in React Native
DESCRIPTION: Sets up the Supabase client with AsyncStorage for persistent authentication in React Native applications.

LANGUAGE: typescript
CODE:
import 'react-native-url-polyfill/auto'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})

----------------------------------------

TITLE: Configuring Native Dependencies for WatermelonDB in Expo
DESCRIPTION: Updates app.json to include the simdjson pod for iOS builds using expo-build-properties.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "ios": {
            "extraPods": [
              {
                "name": "simdjson",
                "configurations": ["Debug", "Release"],
                "path": "../node_modules/@nozbe/simdjson",
                "modular_headers": true
              }
            ]
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Creating Products Table in SQL with Supabase
DESCRIPTION: Creates a public products table with UUID primary key, name, price, and optional image fields. The table uses PostgreSQL's default tablespace.

LANGUAGE: sql
CODE:
create table
  public.products (
    id uuid not null default gen_random_uuid (),
    name text not null,
    price real not null,
    image text null,
    constraint products_pkey primary key (id)
  ) tablespace pg_default;

----------------------------------------

TITLE: TypeScript Type Generation Helper Example
DESCRIPTION: Demonstration of improved TypeScript type generation with relationship detection and helper types for better developer experience.

LANGUAGE: tsx
CODE:
// Before
let movie: Database['public']['Tables']['movies']['Row'] = // ...

// After
let movie: Tables<'movies'> = // ...

----------------------------------------

TITLE: Handling OAuth Callback in Express
DESCRIPTION: This code snippet shows how to handle the OAuth callback in an Express application. It creates a Supabase client, exchanges the authorization code for a session, and handles redirects.

LANGUAGE: javascript
CODE:
app.get("/auth/callback", async function (req, res) {
  const code = req.query.code
  const next = req.query.next ?? "/"

  if (code) {
    const supabase = createServerClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY, {
    cookies: {
      getAll() {
        return parseCookieHeader(context.req.headers.cookie ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          context.res.appendHeader('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })
    await supabase.auth.exchangeCodeForSession(code)
  }

  res.redirect(303, `/${next.slice(1)}`)
})

----------------------------------------

TITLE: Android Deep Link Configuration
DESCRIPTION: Configure deep linking support in Android manifest file.

LANGUAGE: xml
CODE:
<manifest ...>
    <!-- ... other tags -->
    <application ...>
      <activity ...>
        <!-- ... other tags -->

        <!-- Deep Links -->
				<meta-data android:name="flutter_deeplinking_enabled" android:value="true" />
        <intent-filter>
          <action android:name="android.intent.action.VIEW" />
          <category android:name="android.intent.category.DEFAULT" />
          <category android:name="android.intent.category.BROWSABLE" />
          <data
            android:scheme="mfa-app"
            android:host="callback" />
        </intent-filter>
        <!-- END Deep Links -->

      </activity>
    </application>
  </manifest>

----------------------------------------

TITLE: Creating HTML Email Template for Supabase Authentication
DESCRIPTION: Sample HTML template for a Supabase authentication email. It includes a confirmation link using the ConfirmationURL template variable.

LANGUAGE: html
CODE:
<html>
  <body>
    <h2>Confirm your signup</h2>
    <p><a href="{{ .ConfirmationURL }}">Confirm your email</a></p>
  </body>
</html>

----------------------------------------

TITLE: iOS Deep Link Configuration
DESCRIPTION: Configure deep linking support in iOS info.plist file.

LANGUAGE: xml
CODE:
<!-- ... other tags -->
  <plist>
  <dict>
    <!-- ... other tags -->

		<!-- Deep Links -->
		<key>FlutterDeepLinkingEnabled</key>
		<true/>
    <key>CFBundleURLTypes</key>
    <array>
      <dict>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
        <key>CFBundleURLSchemes</key>
        <array>
          <string>mfa-app</string>
        </array>
      </dict>
    </array>
		<!-- Deep Links -->

    <!-- ... other tags -->
  </dict>
  </plist>

----------------------------------------

TITLE: Creating Supabase Client with Experimental Routing in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a Supabase client with custom headers for experimental routing mode. It includes a function to create a new user using the Auth service.

LANGUAGE: typescript
CODE:
import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

// Load environment variables from .env file
dotenv.config()

// Supabase credentials
const supabaseUrl = process.env.SUPABASE_URL as string
const supabaseKey = process.env.SUPABASE_KEY as string

// Initialize the Supabase client with custom headers
const supabase = createClient(supabaseUrl, supabaseKey, {
  global: {
    headers: {
      'sb-lb-routing-mode': 'alpha-all-services',
    },
  },
})

/**
 * @description simple user creation function
 */
async function createUser() {
  // Make the Auth call to create a user
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'my--really-strong-password',
  })

  // Throw on an error
  if (error) {
    throw new Error(error.message)
  }

  // Output the response
  console.dir(data)
}

// Register a random user
createUser()

----------------------------------------

TITLE: Generating TOTP URI for Google Authenticator
DESCRIPTION: This snippet demonstrates the format of a TOTP URI used for generating QR codes in Google Authenticator. It includes parameters such as the issuer, user, algorithm, and secret.

LANGUAGE: bash
CODE:
otpauth://totp/supabase.io:j@supacats.io?algorithm=SHA1&digits=6&issuer=supabase.io&period=30&secret=BFSXQHFB2BGAZIOQWCDBJUF7B54A52JQ

----------------------------------------

TITLE: Downloading Transformed Images in Supabase
DESCRIPTION: Example of downloading an image with transformation parameters using Supabase Storage API. Demonstrates how to apply width and height transformations during download.

LANGUAGE: javascript
CODE:
supabase.storage.from('bucket').download('image-2.jpg', {
  transform: {
    width: 800,
    height: 300,
  },
})

----------------------------------------

TITLE: Initializing PostgreSQL Development Environment
DESCRIPTION: Commands for cloning the PostgreSQL repository and creating a development branch for patches.

LANGUAGE: bash
CODE:
git clone https://github.com/postgres/postgres
git checkout master
git checkout -b your_branch_name

----------------------------------------

TITLE: Querying List Objects Function with SQL
DESCRIPTION: Example of how to query the list_objects function using raw SQL to retrieve storage objects with pagination.

LANGUAGE: sql
CODE:
select * from list_objects('bucket_id', '', 100, 0);

----------------------------------------

TITLE: Executing EXPLAIN via HTTP Request
DESCRIPTION: Example of getting PostgreSQL execution plan through HTTP using curl with a vendor media type Accept header

LANGUAGE: bash
CODE:
curl -H 'Accept: application/vnd.pgrst.plan' \
       'https://<project>.supabase.co/rest/v1/clients?select=*&id=eq.1'

----------------------------------------

TITLE: Creating Logical Replication Slot in Supabase Database
DESCRIPTION: Creates a logical replication slot named 'example_slot' using the 'pgoutput' plugin in the Supabase database. This slot will be used to track changes for replication.

LANGUAGE: sql
CODE:
select pg_create_logical_replication_slot('example_slot', 'pgoutput');

----------------------------------------

TITLE: Creating Trigger Function for Audit Logging in PostgreSQL
DESCRIPTION: Implements a trigger function to automatically log inserts, updates, and deletes to the audit table.

LANGUAGE: sql
CODE:
create or replace function audit.insert_update_delete_trigger()
    returns trigger
    security definer
    language plpgsql
as $$
declare
    pkey_cols text[] = audit.primary_key_columns(TG_RELID);
    record_jsonb jsonb = to_jsonb(new);
    record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, record_jsonb);
    old_record_jsonb jsonb = to_jsonb(old);
    old_record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, old_record_jsonb);
begin

    insert into audit.record_version(
        record_id,
        old_record_id,
        op,
        table_oid,
        table_schema,
        table_name,
        record,
        old_record
    )
    select
        record_id,
        old_record_id,
        TG_OP,
        TG_RELID,
        TG_TABLE_SCHEMA,
        TG_TABLE_NAME,
        record_jsonb,
        old_record_jsonb;

    return coalesce(new, old);
end;
$$;

----------------------------------------

TITLE: SQL Triggers for Auth User Synchronization
DESCRIPTION: Set of SQL commands to create triggers and functions for synchronizing auth.users data with a profiles table in the public schema.

LANGUAGE: sql
CODE:
create table public.profiles (
  id uuid primary key,
  email varchar(256)
);

LANGUAGE: sql
CODE:
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, email)
  values (new.id, new.email);
  return new;
end;
$$;

LANGUAGE: sql
CODE:
create function public.update_user()
returns trigger
language plpgsql
security definer set search_path = ''
as
$$
begin
  update public.profiles
  set email = new.email
  where id = new.id;
  return new;
end;
$$;

LANGUAGE: sql
CODE:
create function public.delete_user()
returns trigger
language plpgsql
security definer set search_path = ''
as
$$
begin
  delete from public.profiles
  where id = old.id;
  return old;
end;
$$;

LANGUAGE: sql
CODE:
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

create trigger on_auth_user_updated
  after update on auth.users
  for each row execute procedure public.update_user();

create trigger on_auth_user_deleted
  after delete on auth.users
  for each row execute procedure public.delete_user();

----------------------------------------

TITLE: Creating Enum Type for Sensor Readings
DESCRIPTION: Creates an enumerated type for categorizing sensor readings into low, medium, and high levels.

LANGUAGE: sql
CODE:
create type valid_levels as enum (
  'low', 'medium', 'high'
);

----------------------------------------

TITLE: Initializing Supabase Project Locally
DESCRIPTION: Use the Supabase CLI to initialize a new Supabase project in your local directory.

LANGUAGE: bash
CODE:
supabase init

----------------------------------------

TITLE: SupaUtils Extension Makefile Configuration
DESCRIPTION: Makefile configuration for building the SupaUtils PostgreSQL extension, specifying module name and build requirements.

LANGUAGE: makefile
CODE:
# Makefile

# Our shared library
MODULE_big = supautils

# Our object files to build for the library
OBJS = src/supautils.o

# Tell pg_config to pass us the PostgreSQL extensions makefile(PGXS)
# and include it into our own Makefile through the standard "include" directive.
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)

----------------------------------------

TITLE: Creating a New Supabase Function for Amazon Bedrock Integration
DESCRIPTION: Use the Supabase CLI to create a new function for integrating with Amazon Bedrock.

LANGUAGE: bash
CODE:
supabase functions new amazon-bedrock

----------------------------------------

TITLE: Enabling HTTP Extension in PostgreSQL
DESCRIPTION: This SQL command enables the http extension in PostgreSQL, which allows making HTTP requests from within the database.

LANGUAGE: sql
CODE:
create extension if not exists http;

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Supabase Edge Function Deployment
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to automatically deploy Supabase Edge Functions when changes are pushed to the main branch. It uses the Supabase CLI to perform the deployment.

LANGUAGE: yaml
CODE:
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: YOUR_SUPABASE_ACCESS_TOKEN
      PROJECT_ID: YOUR_SUPABASE_PROJECT_ID

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID

----------------------------------------

TITLE: Configuring PostgreSQL for Recovery
DESCRIPTION: Commands to set up PostgreSQL for recovery, including configuring restore_command and optional point-in-time recovery settings.

LANGUAGE: shell
CODE:
$ echo "restore_command = '/usr/bin/envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-fetch \"%f\" \"%p\" >> /tmp/wal.log 2>&1'" >> /etc/postgresql/12/main/postgresql.conf
$ echo "recovery_target_time = '2020-07-27 01:23:00.000000+00'" >> /etc/postgresql/12/main/postgresql.conf
$ echo "recovery_target_action = 'promote'" >> /etc/postgresql/12/main/postgresql.conf

----------------------------------------

TITLE: Initializing a new Poetry project
DESCRIPTION: Command to create a new Python project using Poetry.

LANGUAGE: shell
CODE:
poetry new image-search

----------------------------------------

TITLE: Simple Realtime Debug Logger Implementation
DESCRIPTION: Shows how to implement a basic debug handler for the Realtime client to log messages to Debug output.

LANGUAGE: csharp
CODE:
client.AddDebugHandler((sender, message, exception) => Debug.WriteLine(message));

----------------------------------------

TITLE: Installing Poetry Package Manager
DESCRIPTION: Command to install Poetry package manager using pip

LANGUAGE: shell
CODE:
pip install poetry

----------------------------------------

TITLE: Importing Switch Component
DESCRIPTION: TypeScript/React code showing how to import the Switch component from the components directory.

LANGUAGE: tsx
CODE:
import { Switch } from '@/components/ui/switch'

----------------------------------------

TITLE: Installing Supabase Package with Swift Package Manager
DESCRIPTION: Swift Package Manager configuration for adding Supabase dependencies to a Swift project. Users can choose to include the full Supabase package or individual libraries like Auth, Realtime, Postgrest, Functions, or Storage. The package is installed from version 2.0.0 onwards.

LANGUAGE: swift
CODE:
let package = Package(
    ...
    dependencies: [
        ...
        .package(
            url: "https://github.com/supabase/supabase-swift.git",
            from: "2.0.0"
        ),
    ],
    targets: [
        .target(
            name: "YourTargetName",
            dependencies: [
                .product(
                    name: "Supabase", // Auth, Realtime, Postgrest, Functions, or Storage
                    package: "supabase-swift"
                ),
            ]
        )
    ]
)

----------------------------------------

TITLE: Installing Context Menu Dependencies
DESCRIPTION: Command to install the context menu component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add context-menu

----------------------------------------

TITLE: Updating sign-in with email and password in TypeScript
DESCRIPTION: Example of how to update the sign-in method with email and password when upgrading from v1 to v2. The new version uses a more explicit signInWithPassword method.

LANGUAGE: typescript
CODE:
const {
  data: { user },
  error,
} = await supabase
  .auth
  .signInWithPassword({ email, password })

----------------------------------------

TITLE: Setting Carousel Item Sizes
DESCRIPTION: Example of setting fixed sizes for carousel items using utility classes.

LANGUAGE: tsx
CODE:
<Carousel>
  <CarouselContent>
    <CarouselItem className="basis-1/3">...</CarouselItem>
    <CarouselItem className="basis-1/3">...</CarouselItem>
    <CarouselItem className="basis-1/3">...</CarouselItem>
  </CarouselContent>
</Carousel>

----------------------------------------

TITLE: Updating supabase-flutter Package Version in pubspec.yaml
DESCRIPTION: Update the supabase-flutter package version in the pubspec.yaml file to use version 1.0.0 or higher.

LANGUAGE: yaml
CODE:
supabase_flutter: ^1.0.0

----------------------------------------

TITLE: Installing Avatar Component via CLI
DESCRIPTION: Command to install the Avatar component using the shadcn-ui CLI tool.

LANGUAGE: bash
CODE:
npx shadcn-ui@latest add avatar

----------------------------------------

TITLE: React Component for Auth Documentation Header
DESCRIPTION: JSX markup for rendering the documentation page header with styling and layout components specific to the Auth documentation.

LANGUAGE: jsx
CODE:
<div className="flex items-start gap-6 not-prose" id="introduction">
  <div className="flex flex-col gap-2">
    <h1 className="text-3xl text-foreground m-0">Self-Hosting Auth</h1>
  </div>
</div>

----------------------------------------

TITLE: Setting Background Colors in Supabase Applications (JSX)
DESCRIPTION: Demonstrates how to set background colors for different Supabase applications using CSS classes. It shows the difference between www/docs sites and the studio application.

LANGUAGE: jsx
CODE:
/**
 * ./www background color
 * ./docs background color
 */
<body className="bg">{children}</body>

/**
 * ./studio background color
 */
<body className="bg-studio">{children}</body>

----------------------------------------

TITLE: Running Edge Runtime with Docker
DESCRIPTION: These commands build a Docker image for the Edge Runtime and run it, mounting the Supabase functions directory and exposing the service on port 9000.

LANGUAGE: bash
CODE:
docker build -t edge-runtime .
docker run -it --rm -p 9000:9000 -v /path/to/supabase/functions:/usr/services supabase/edge-runtime start --main-service /usr/services

----------------------------------------

TITLE: Deduplicating Spans in Sentry Configuration
DESCRIPTION: TypeScript code showing how to deduplicate spans in Sentry configuration for various environments, including browser, Node, and Next.js Edge Functions.

LANGUAGE: ts
CODE:
import * as Sentry from '@sentry/browser'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),

    // @sentry/browser
    Sentry.browserTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),

    // or @sentry/node
    Sentry.httpIntegration({
      tracing: {
        ignoreOutgoingRequests: (url) => {
          return url.startsWith(`${SUPABASE_URL}/rest`)
        },
      },
    }),

    // or @sentry/node with Fetch support
    Sentry.nativeNodeFetchIntegration({
      ignoreOutgoingRequests: (url) => {
        return url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),

    // or @sentry/WinterCGFetch for Next.js Middleware & Edge Functions
    Sentry.winterCGFetchIntegration({
      breadcrumbs: true,
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),
  ],
})

----------------------------------------

TITLE: Configuring Authentication in TOML
DESCRIPTION: Example configuration for Supabase authentication settings using environment variables in config.toml, demonstrating proper usage of env() syntax for GitHub OAuth settings.

LANGUAGE: toml
CODE:
site_url = "env(SUPABASE_AUTH_SITE_URL)"
additional_redirect_urls = [
    "env(SUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS)"
]

[auth.external.github]
enabled = true
client_id = "env(SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET)"

----------------------------------------

TITLE: Creating Custom Role in SQL for Supabase Storage
DESCRIPTION: This SQL snippet creates a custom 'manager' role and grants it to the authenticator and anon roles. It's used to provide full read access to a specific bucket in Supabase Storage.

LANGUAGE: sql
CODE:
create role 'manager';

-- Important to grant the role to the authenticator and anon role
grant manager to authenticator;
grant anon to manager;

----------------------------------------

TITLE: Running Nuxt Development Server
DESCRIPTION: Command to start the Nuxt development server on localhost:3000. This requires npm to be installed and the project dependencies to be set up.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Initializing Supabase Client for Broadcast
DESCRIPTION: Code examples showing how to initialize the Supabase client with URL and anonymous key across different programming languages.

LANGUAGE: javascript
CODE:
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://<project>.supabase.co'
const SUPABASE_KEY = '<your-anon-key>'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)

LANGUAGE: dart
CODE:
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
  );
  runApp(MyApp());
}

final supabase = Supabase.instance.client;

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment variable configuration for Supabase project URL and anonymous API key.

LANGUAGE: plaintext
CODE:
NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]

----------------------------------------

TITLE: Implementing Realtime Listeners in JavaScript
DESCRIPTION: JavaScript implementation showing how to initialize Supabase client and subscribe to real-time INSERT events on a todos table.

LANGUAGE: javascript
CODE:
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Create a function to handle inserts
const handleInserts = (payload) => {
  console.log('Change received!', payload)
}

// Listen to inserts
supabase
  .channel('todos')
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'todos' }, handleInserts)
  .subscribe()

----------------------------------------

TITLE: Defining External Repository for Federated Docs
DESCRIPTION: Example of defining an external repository for federated documentation in Supabase docs.

LANGUAGE: javascript
CODE:
const org = 'supabase'
const repo = 'pg_graphql'
const branch = 'master'
const docsDir = 'docs'
const externalSite = 'https://supabase.github.io/pg_graphql'

----------------------------------------

TITLE: Creating a Todos Table in SQL
DESCRIPTION: Creates a simple todos table with id and task columns in Postgres

LANGUAGE: sql
CODE:
create table todos (
  id serial primary key,
  task text
);

----------------------------------------

TITLE: Comparing Supabase-js and Postgres-js Query Syntax
DESCRIPTION: Demonstrates the similarity between querying with supabase-js and postgres-js, highlighting Supabase's modular architecture and consistent API design across different implementations.

LANGUAGE: javascript
CODE:
// supabase-js
const supabase = createClient('SUPABASE_URL', 'SUPABASE_KEY')
const { data } = supabase.from('countries').select('id, name')

// postgres-js
const postgrest = new PostgrestClient('POSTGREST_URL')
const { data } = postgrest.from('countries').select('id, name')

----------------------------------------

TITLE: Basic Billing Example Table in Markdown
DESCRIPTION: Markdown table showing billing breakdown for a project with one Read Replica without additional resources

LANGUAGE: markdown
CODE:
| Line Item                     | Units     | Costs      |
| ----------------------------- | --------- | ---------- |
| Pro Plan                      | 1         | $25        |
|                               |           |            |
| Compute Hours Small Project 1 | 744 hours | $15        |
| Disk Size Project 1           | 8 GB      | $0         |
|                               |           |            |
| Compute Hours Small Replica   | 744 hours | $15        |
| Disk Size Replica             | 10 GB     | $1.25      |
|                               |           |            |
| **Subtotal**                  |           | **$56.25** |
| Compute Credits               |           | -$10       |
| **Total**                     |           | **$46.25** |

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: Creates a new local Supabase project using the Supabase CLI.

LANGUAGE: bash
CODE:
npx supabase init

----------------------------------------

TITLE: Advanced RLS Testing Example for Supabase
DESCRIPTION: A complete example using test helpers to verify RLS policies in a Supabase project.

LANGUAGE: sql
CODE:
begin;
-- Assuming 000-setup-tests-hooks.sql file is present to use tests helpers
select plan(4);

-- Set up test data

-- Create test supabase users
select tests.create_supabase_user('user1@test.com');
select tests.create_supabase_user('user2@test.com');

-- Create test data
insert into public.todos (task, user_id) values
  ('User 1 Task 1', tests.get_supabase_uid('user1@test.com')),
  ('User 1 Task 2', tests.get_supabase_uid('user1@test.com')),
  ('User 2 Task 1', tests.get_supabase_uid('user2@test.com'));

-- Test as User 1
select tests.authenticate_as('user1@test.com');

-- Test 1: User 1 should only see their own todos
select results_eq(
  'select count(*) from todos',
  ARRAY[2::bigint],
  'User 1 should only see their 2 todos'
);

-- Test 2: User 1 can create their own todo
select lives_ok(
  $$insert into todos (task, user_id) values ('New Task', tests.get_supabase_uid('user1@test.com'))$$,
  'User 1 can create their own todo'
);

-- Test as User 2
select tests.authenticate_as('user2@test.com');

-- Test 3: User 2 should only see their own todos
select results_eq(
  'select count(*) from todos',
  ARRAY[1::bigint],
  'User 2 should only see their 1 todo'
);

-- Test 4: User 2 cannot modify User 1's todo
SELECT results_ne(
    $$ update todos set task = 'Hacked!' where user_id = tests.get_supabase_uid('user1@test.com') returning 1 $$,
    $$ values(1) $$,
    'User 2 cannot modify User 1 todos'
);

select * from finish();
rollback;

----------------------------------------

TITLE: Handling AuthRestException in Kotlin
DESCRIPTION: Shows how to handle AuthRestException and access the errorCode property in Kotlin.

LANGUAGE: kotlin
CODE:
when (exception) {
    is AuthRestException -> exception.errorCode
    is AuthWeakPasswordException -> // Handle weak password
    is AuthSessionMissingException -> // Handle missing session
}

----------------------------------------

TITLE: Linking Local Project to Remote Supabase Project
DESCRIPTION: Commands to link the local project with a remote Supabase project and pull any existing changes.

LANGUAGE: bash
CODE:
supabase link --project-ref <project-id>
# You can get <project-id> from your project's dashboard URL: https://supabase.com/dashboard/project/<project-id>

supabase db pull
# Capture any changes that you have made to your remote database before you went through the steps above
# If you have not made any changes to the remote database, skip this step

----------------------------------------

TITLE: Creating Public View for Vector Access in SQL
DESCRIPTION: SQL statement for creating a public view to expose vector collection data.

LANGUAGE: sql
CODE:
create view public.docs as
    select
        id,
        embedding,
        metadata, # Expose the metadata as JSON
        (metadata->>'url')::text as url # Extract the URL as a string
    from
        vecs.docs

----------------------------------------

TITLE: Creating a Migration File in Supabase CLI
DESCRIPTION: Generates a new migration file to store SQL for creating the 'employees' table.

LANGUAGE: bash
CODE:
supabase migration new create_employees_table

----------------------------------------

TITLE: Implementing Public API for Audit Tracking in PostgreSQL
DESCRIPTION: Creates functions to enable and disable audit tracking on specific tables, providing a clean user interface for managing auditing.

LANGUAGE: sql
CODE:
create or replace function audit.enable_tracking(regclass)
    returns void
    volatile
    security definer
    language plpgsql
as $$
declare
    statement_row text = format('
        create trigger audit_i_u_d
            before insert or update or delete
            on %I
            for each row
            execute procedure audit.insert_update_delete_trigger();',
        $1
    );

    pkey_cols text[] = audit.primary_key_columns($1);
begin
    if pkey_cols = array[]::text[] then
        raise exception 'Table % can not be audited because it has no primary key', $1;
    end if;

    if not exists(select 1 from pg_trigger where tgrelid = $1 and tgname = 'audit_i_u_d') then
        execute statement_row;
    end if;
end;
$$;

create or replace function audit.disable_tracking(regclass)
    returns void
    volatile
    security definer
    language plpgsql
as $$
declare
    statement_row text = format(
        'drop trigger if exists audit_i_u_d on %I;',
        $1
    );
begin
    execute statement_row;
end;
$$;

----------------------------------------

TITLE: Custom Schema Order Configuration in TOML
DESCRIPTION: Configures custom ordering for schema application using config.toml file.

LANGUAGE: toml
CODE:
[db.migrations]
schema_paths = [
  "./schemas/employees.sql",
  "./schemas/*.sql",
]

----------------------------------------

TITLE: Firebase Auth Configuration in TOML
DESCRIPTION: Configuration settings for enabling Firebase Authentication in Supabase project config file.

LANGUAGE: toml
CODE:
[auth.third_party.firebase]
enabled = true
project_id = "<id>"

----------------------------------------

TITLE: Database Testing CLI Command Help
DESCRIPTION: Shows the help information for the 'supabase test db' command which enables database testing using pgTAP.

LANGUAGE: markdown
CODE:
supabase test db --help
Tests local database with pgTAP

Usage:
  supabase test db [flags]

----------------------------------------

TITLE: Installing Supabase CLI via Package Managers
DESCRIPTION: Different commands for installing the Supabase CLI using various package managers including npm, yarn, pnpm, and brew.

LANGUAGE: sh
CODE:
npm install supabase --save-dev

LANGUAGE: sh
CODE:
yarn add supabase --dev

LANGUAGE: sh
CODE:
pnpm add supabase --save-dev

LANGUAGE: sh
CODE:
brew install supabase/tap/supabase

----------------------------------------

TITLE: Creating Todos Table in PostgreSQL
DESCRIPTION: SQL command to create a 'todos' table with an auto-incrementing ID and a task text column with length validation.

LANGUAGE: sql
CODE:
create table
  todos (
    id bigint generated by default as identity primary key,
    task text check (char_length(task) > 3)
  );

----------------------------------------

TITLE: Creating User with Plaintext Password in Supabase Auth (TypeScript)
DESCRIPTION: This snippet shows how to create a user with a plaintext password using the Supabase Auth admin API. Supabase will handle hashing the password securely.

LANGUAGE: typescript
CODE:
const { data, error } = await supabase.auth.admin.createUser({
  email: 'valid.email@supabase.io',
  password: 'supersecurepassword123!',
})

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Environment variable configuration for connecting Next.js application to Supabase, including project URL and anonymous key.

LANGUAGE: text
CODE:
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

----------------------------------------

TITLE: Basic Posts Table Creation in SQL
DESCRIPTION: SQL example showing a basic table structure without CRDT support.

LANGUAGE: sql
CODE:
create table posts (
  id serial primary key,
  title text,
  content text default ''
);

----------------------------------------

TITLE: Creating Documents Table with Full Text Search and Vector Columns
DESCRIPTION: SQL code to create a table structure supporting both keyword and semantic search with appropriate columns for content, full text search vector, and embedding vector.

LANGUAGE: sql
CODE:
create table documents (
  id bigint primary key generated always as identity,
  content text,
  fts tsvector generated always as (to_tsvector('english', content)) stored,
  embedding vector(512)
);