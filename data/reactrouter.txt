TITLE: Implementing Route Loader Function
DESCRIPTION: Example of a route loader function that provides data to the route component before rendering.

LANGUAGE: tsx
CODE:
export async function loader() {
  return { message: "Hello, world!" };
}

export default function MyRoute({ loaderData }) {
  return <h1>{loaderData.message}</h1>;
}

----------------------------------------

TITLE: Providing Data with Route Loaders in React Router
DESCRIPTION: This snippet shows how to define a loader function in a route configuration to provide data. The loader function returns an object with records fetched from an asynchronous function.

LANGUAGE: tsx
CODE:
createBrowserRouter([
  {
    path: "/",
    loader: () => {
      // return data from here
      return { records: await getSomeRecords() };
    },
    Component: MyRoute,
  },
]);

----------------------------------------

TITLE: Authentication Implementation with RouterProvider
DESCRIPTION: Demonstrates key authentication features including standalone authentication state management, loader functions for auth checks, Form components for login/logout, and handling redirects. Uses TypeScript and React Router's RouterProvider API.

LANGUAGE: typescript
CODE:
// No direct code snippets provided in the text, but references implementation details:
// - Authentication state management outside React tree
// - Loader functions for auth checks
// - Form components for login/logout
// - Redirect handling for protected routes

----------------------------------------

TITLE: Creating and Rendering React Router
DESCRIPTION: TypeScript React code demonstrating how to create a browser router, define a route, and render it using RouterProvider. This snippet shows the basic setup for React Router in a React application.

LANGUAGE: tsx
CODE:
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router";

import React from "react";
import ReactDOM from "react-dom/client";

const router = createBrowserRouter([
  {
    path: "/",
    element: <div>Hello World</div>,
  },
]);

const root = document.getElementById("root");

ReactDOM.createRoot(root).render(
  <RouterProvider router={router} />
);

----------------------------------------

TITLE: Configuring Basic Routes in React Router
DESCRIPTION: This snippet demonstrates how to set up basic routing in a React application using React Router. It shows the configuration of a root route and explains the necessary imports.

LANGUAGE: tsx
CODE:
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router";
import App from "./app";

const root = document.getElementById("root");

ReactDOM.createRoot(root).render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<App />} />
    </Routes>
  </BrowserRouter>
);

----------------------------------------

TITLE: Using useLoaderData Hook with TypeScript in React Router
DESCRIPTION: Demonstrates how to use the useLoaderData hook to fetch data from a loader function in a React component. The example shows fetching invoices from a database using an async loader function.

LANGUAGE: tsx
CODE:
import { useLoaderData } from "react-router";

export async function loader() {
  return await fakeDb.invoices.findAll();
}

export default function Invoices() {
  let invoices = useLoaderData<typeof loader>();
  // ...
}

----------------------------------------

TITLE: Installing React Router with npm
DESCRIPTION: This command installs React Router DOM package using npm. It's the first step to set up routing in a React application.

LANGUAGE: bash
CODE:
npm install react-router-dom

----------------------------------------

TITLE: Implementing Static Data Loading in React Router
DESCRIPTION: Demonstrates static data loading during the production build in React Router. It includes both the loader function and the prerender configuration.

LANGUAGE: tsx
CODE:
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";

export async function loader({ params }: Route.LoaderArgs) {
  let product = await getProductFromCSVFile(params.pid);
  return product;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

LANGUAGE: ts
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  async prerender() {
    let products = await readProductsFromCSVFile();
    return products.map(
      (product) => `/products/${product.id}`
    );
  },
} satisfies Config;

----------------------------------------

TITLE: Using Both Loaders in React Router
DESCRIPTION: Illustrates how to use both loader and clientLoader together in React Router. The loader is used for initial SSR or pre-rendering, while clientLoader is used for subsequent client-side navigations.

LANGUAGE: tsx
CODE:
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";
import { fakeDb } from "../db";

export async function loader({ params }: Route.LoaderArgs) {
  return fakeDb.getProduct(params.pid);
}

export async function clientLoader({
  serverLoader,
  params,
}: Route.ClientLoaderArgs) {
  const res = await fetch(`/api/products/${params.pid}`);
  const serverData = await serverLoader();
  return { ...serverData, ...res.json() };
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;

  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

----------------------------------------

TITLE: Defining Route Actions in React Router
DESCRIPTION: Shows how to define an action on a route object that handles form submissions and data mutations. The action receives a request object and returns updated data that triggers revalidation of loader data.

LANGUAGE: tsx
CODE:
import { createBrowserRouter } from "react-router";
import { someApi } from "./api";

let router = createBrowserRouter([
  {
    path: "/projects/:projectId",
    Component: Project,
    action: async ({ request }) => {
      let formData = await request.formData();
      let title = formData.get("title");
      let project = await someApi.updateProject({ title });
      return project;
    },
  },
]);

----------------------------------------

TITLE: Configuring React Router in Data Mode
DESCRIPTION: Setup for Data Mode using createBrowserRouter with enhanced features like data loading and actions. Demonstrates route configuration with loader function.

LANGUAGE: tsx
CODE:
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router";

let router = createBrowserRouter([
  {
    path: "/",
    Component: Root,
    loader: loadRootData,
  },
]);

ReactDOM.createRoot(root).render(
  <RouterProvider router={router} />
);

----------------------------------------

TITLE: Creating Links in React Router
DESCRIPTION: This snippet demonstrates how to create links between routes in React Router using the Link and NavLink components. It shows how to set up navigation and handle active states.

LANGUAGE: tsx
CODE:
import { NavLink, Link } from "react-router";

function Header() {
  return (
    <nav>
      {/* NavLink makes it easy to show active states */}
      <NavLink
        to="/"
        className={({ isActive }) =>
          isActive ? "active" : ""
        }
      >
        Home
      </NavLink>

      <Link to="/concerts/salt-lake-city">Concerts</Link>
    </nav>
  );
}

----------------------------------------

TITLE: Basic Link Component Usage in React Router
DESCRIPTION: Demonstrates basic usage of Link component for client-side navigation with both simple string paths and complex path objects.

LANGUAGE: tsx
CODE:
import { Link } from "react-router";

<Link to="/dashboard">Dashboard</Link>;

<Link
  to={{
    pathname: "/some/path",
    search: "?query=string",
    hash: "#hash",
  }}
/>;

----------------------------------------

TITLE: Basic Outlet Implementation in React Router
DESCRIPTION: Demonstrates how to use the Outlet component to render child routes within a parent component. The Outlet acts as a placeholder where child route content will be displayed.

LANGUAGE: tsx
CODE:
import { Outlet } from "react-router";

export default function SomeParent() {
  return (
    <div>
      <h1>Parent Content</h1>
      <Outlet />
    </div>
  );
}

----------------------------------------

TITLE: Setting up basic routing in React
DESCRIPTION: This code snippet demonstrates how to set up basic routing in a React application using React Router. It shows the structure of a router with multiple routes and how to use the Link component for navigation.

LANGUAGE: jsx
CODE:
import * as React from "react";
import { createRoot } from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
  Route,
  Link,
} from "react-router-dom";

const router = createBrowserRouter([
  {
    path: "/",
    element: (
      <div>
        <h1>Hello World</h1>
        <Link to="about">About Us</Link>
      </div>
    ),
  },
  {
    path: "about",
    element: <div>About</div>,
  },
]);

createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

----------------------------------------

TITLE: Basic Route Configuration in TypeScript
DESCRIPTION: Demonstrates the basic setup of routes using the @react-router/dev/routes package with pattern matching and module file paths.

LANGUAGE: typescript
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  route("some/path", "./some/file.tsx"),
  // pattern ^           ^ module file
] satisfies RouteConfig;

----------------------------------------

TITLE: Implementing Root Error Boundary in React Router
DESCRIPTION: Demonstrates implementation of a root error boundary component that handles three main error cases: route errors with status codes, Error instances with stack traces, and unknown errors.

LANGUAGE: tsx
CODE:
import { Route } from "./+types/root";

export function ErrorBoundary({
  error,
}: Route.ErrorBoundaryProps) {
  if (isRouteErrorResponse(error)) {
    return (
      <>
        <h1>
          {error.status} {error.statusText}
        </h1>
        <p>{error.data}</p>
      </>
    );
  } else if (error instanceof Error) {
    return (
      <div>
        <h1>Error</h1>
        <p>{error.message}</p>
        <p>The stack trace is:</p>
        <pre>{error.stack}</pre>
      </div>
    );
  } else {
    return <h1>Unknown Error</h1>;
  }
}

----------------------------------------

TITLE: Advanced Route Configuration with Nested Routes
DESCRIPTION: Shows a more complex routing setup with nested routes, including authentication routes and dynamic parameters.

LANGUAGE: ts
CODE:
createBrowserRouter([
  {
    path: "/",
    Component: Root,
    children: [
      { index: true, Component: Home },
      { path: "about", Component: About },
      {
        path: "auth",
        Component: AuthLayout,
        children: [
          { path: "login", Component: Login },
          { path: "register", Component: Register },
        ],
      },
      {
        path: "concerts",
        children: [
          { index: true, Component: ConcertsHome },
          { path: ":city", Component: ConcertsCity },
          { path: "trending", Component: ConcertsTrending },
        ],
      },
    ],
  },
]);

----------------------------------------

TITLE: Implementing Client Data Loading in React Router
DESCRIPTION: Demonstrates how to use clientLoader for fetching data on the client side in React Router. It includes a HydrateFallback component for rendering while the client loader is running.

LANGUAGE: tsx
CODE:
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";

export async function clientLoader({
  params,
}: Route.ClientLoaderArgs) {
  const res = await fetch(`/api/products/${params.pid}`);
  const product = await res.json();
  return product;
}

// HydrateFallback is rendered while the client loader is running
export function HydrateFallback() {
  return <div>Loading...</div>;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

----------------------------------------

TITLE: Nested Routes with Outlet Component
DESCRIPTION: Shows how to implement nested routes using the children property and render them using the Outlet component.

LANGUAGE: ts
CODE:
createBrowserRouter([
  {
    path: "/dashboard",
    Component: Dashboard,
    children: [
      { index: true, Component: Home },
      { path: "settings", Component: Settings },
    ],
  },
]);

LANGUAGE: tsx
CODE:
import { Outlet } from "react-router";

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      {/* will either be <Home> or <Settings> */}
      <Outlet />
    </div>
  );
}

----------------------------------------

TITLE: Demonstrating Basic React Router Features in JSX/TSX
DESCRIPTION: This code snippet showcases the fundamental components and concepts of React Router, including Route nesting, Outlet usage, and Link components for navigation. It serves as a starting point for understanding React Router's core functionality.

LANGUAGE: jsx
CODE:
- Layouts and nested <Route>s
- Index <Route>s
- Catch-all <Route>s
- Using <Outlet> as a placeholder for child routes
- Using <Link>s for navigation

----------------------------------------

TITLE: Accessing Loader Data in React Router Components
DESCRIPTION: This snippet demonstrates how to use the useLoaderData hook to access data provided by the loader in a route component. It extracts the records from the loader data and renders the length of the records array.

LANGUAGE: tsx
CODE:
import { useLoaderData } from "react-router";

function MyRoute() {
  const { records } = useLoaderData();
  return <div>{records.length}</div>;
}

----------------------------------------

TITLE: Implementing Login Form with Session Management in React Router
DESCRIPTION: This example shows how to implement a login form using React Router, including session management in the loader and action functions. It demonstrates handling authentication, setting session data, and managing error messages.

LANGUAGE: tsx
CODE:
import { data, redirect } from "react-router";
import type { Route } from "./+types/login";

import {
  getSession,
  commitSession,
} from "../sessions.server";

export async function loader({
  request,
}: Route.LoaderArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );

  if (session.has("userId")) {
    return redirect("/");
  }

  return data(
    { error: session.get("error") },
    {
      headers: {
        "Set-Cookie": await commitSession(session),
      },
    }
  );
}

export async function action({
  request,
}: Route.ActionArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );
  const form = await request.formData();
  const username = form.get("username");
  const password = form.get("password");

  const userId = await validateCredentials(
    username,
    password
  );

  if (userId == null) {
    session.flash("error", "Invalid username/password");

    return redirect("/login", {
      headers: {
        "Set-Cookie": await commitSession(session),
      },
    });
  }

  session.set("userId", userId);

  return redirect("/", {
    headers: {
      "Set-Cookie": await commitSession(session),
    },
  });
}

export default function Login({
  loaderData,
}: Route.ComponentProps) {
  const { error } = loaderData;

  return (
    <div>
      {error ? <div className="error">{error}</div> : null}
      <form method="POST">
        <div>
          <p>Please sign in</p>
        </div>
        <label>
          Username: <input type="text" name="username" />
        </label>
        <label>
          Password:{" "}
          <input type="password" name="password" />
        </label>
      </form>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Index Routes in React Router
DESCRIPTION: This snippet demonstrates how to configure index routes in React Router. Index routes render into their parent's Outlet at the parent's URL, acting as a default child route.

LANGUAGE: tsx
CODE:
<Routes>
  <Route path="/" element={<Root />}>
    {/* renders into the outlet in <Root> at "/" */}
    <Route index element={<Home />} />

    <Route path="dashboard" element={<Dashboard />}>
      {/* renders into the outlet in <Dashboard> at "/dashboard" */}
      <Route index element={<DashboardHome />} />
      <Route path="settings" element={<Settings />} />
    </Route>
  </Route>
</Routes>

----------------------------------------

TITLE: Implementing Global Pending Navigation Indicator in React Router
DESCRIPTION: This snippet demonstrates how to use the useNavigation hook to display a global spinner during navigation in a React Router application.

LANGUAGE: tsx
CODE:
import { useNavigation } from "react-router";

export default function Root() {
  const navigation = useNavigation();
  const isNavigating = Boolean(navigation.location);

  return (
    <html>
      <body>
        {isNavigating && <GlobalSpinner />}
        <Outlet />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Implementing Basic React Router Form Component
DESCRIPTION: Example showing basic usage of the React Router Form component for creating a new event submission form. The form submits data to the /events endpoint using POST method.

LANGUAGE: tsx
CODE:
import { Form } from "react-router";

function NewEvent() {
  return (
    <Form action="/events" method="post">
      <input name="title" type="text" />
      <input name="description" type="text" />
    </Form>
  );
}

----------------------------------------

TITLE: Implementing Client-Side Caching in React Router
DESCRIPTION: This snippet demonstrates a pattern for implementing client-side caching in React Router. It includes server and client loaders, actions, and cache management logic to optimize data fetching and updates.

LANGUAGE: tsx
CODE:
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await getDataFromDb({ request }); // (1)
  return data;
}

export async function action({
  request,
}: Route.ActionArgs) {
  await saveDataToDb({ request });
  return { ok: true };
}

let isInitialRequest = true;

export async function clientLoader({
  request,
  serverLoader,
}: Route.ClientLoaderArgs) {
  const cacheKey = generateKey(request);

  if (isInitialRequest) {
    isInitialRequest = false;
    const serverData = await serverLoader();
    cache.set(cacheKey, serverData); // (2)
    return serverData;
  }

  const cachedData = await cache.get(cacheKey);
  if (cachedData) {
    return cachedData; // (3)
  }

  const serverData = await serverLoader();
  cache.set(cacheKey, serverData);
  return serverData;
}
clientLoader.hydrate = true; // (2)

export async function clientAction({
  request,
  serverAction,
}: Route.ClientActionArgs) {
  const cacheKey = generateKey(request);
  cache.delete(cacheKey); // (4)
  const serverData = await serverAction();
  return serverData;
}

----------------------------------------

TITLE: Implementing Route Action in React Router
DESCRIPTION: Shows how to implement route actions for server-side data mutations with automatic revalidation, including form handling and data updates.

LANGUAGE: tsx
CODE:
import {
  createBrowserRouter,
  useLoaderData,
  useActionData,
  Form,
} from "react-router";
import { TodoList } from "~/components/TodoList";

createBrowserRouter([
  {
    path: "/items",
    action: action,
    loader: loader,
    Component: Items,
  },
]);

async function action({ request }) {
  const data = await request.formData();
  const todo = await fakeDb.addItem({
    title: data.get("title"),
  });
  return { ok: true };
}

async function loader() {
  const items = await fakeDb.getItems();
  return { items };
}

export default function Items() {
  let data = useLoaderData();
  return (
    <div>
      <List items={data.items} />
      <Form method="post" navigate={false}>
        <input type="text" name="title" />
        <button type="submit">Create Todo</button>
      </Form>
    </div>
  );
}

----------------------------------------

TITLE: Using useNavigate Hook in React Router
DESCRIPTION: Demonstrates basic usage of useNavigate hook in a React component to enable programmatic navigation. The example shows how to navigate backwards in history using the -1 parameter.

LANGUAGE: tsx
CODE:
import { useNavigate } from "react-router";

function SomeComponent() {
  let navigate = useNavigate();
  return (
    <button
      onClick={() => {
        navigate(-1);
      }}
    />
  );
}

----------------------------------------

TITLE: Implementing Client Actions in React Router
DESCRIPTION: Demonstrates how to create a client-side action that handles form submissions in the browser. Shows form data processing and UI updates based on action results.

LANGUAGE: tsx
CODE:
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { Form } from "react-router";
import { someApi } from "./api";

export async function clientAction({
  request,
}: Route.ClientActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  let project = await someApi.updateProject({ title });
  return project;
}

export default function Project({
  actionData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Project</h1>
      <Form method="post">
        <input type="text" name="title" />
        <button type="submit">Submit</button>
      </Form>
      {actionData ? (
        <p>{actionData.title} updated</p>
      ) : null}
    </div>
  );
}

----------------------------------------

TITLE: Using To Prop with NavLink for Complex Routing
DESCRIPTION: Shows how to use the to prop with NavLink for both simple string paths and complex object-based paths.

LANGUAGE: tsx
CODE:
<Link to="/some/path" />

<Link
  to={{
    pathname: "/some/path",
    search: "?query=string",
    hash: "#hash",
  }}
/>

----------------------------------------

TITLE: Configuring Routes with TypeScript in React Router
DESCRIPTION: Example of setting up a typed route configuration for a products/:id route using React Router's route function.

LANGUAGE: typescript
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  route("products/:id", "./routes/product.tsx"),
] satisfies RouteConfig;

----------------------------------------

TITLE: Implementing Lazy Loading in React Router
DESCRIPTION: Demonstrates how to implement lazy loading of route components and loaders to reduce initial bundle size.

LANGUAGE: tsx
CODE:
createBrowserRouter([
  {
    path: "/app",
    lazy: async () => {
      // load component and loader in parallel before rendering
      const [Component, loader] = await Promise.all([
        import("./app"),
        import("./app-loader"),
      ]);
      return { Component, loader };
    },
  },
]);

----------------------------------------

TITLE: Implementing NavLink Component in React Router
DESCRIPTION: Demonstrates how to use NavLink component for navigation with active state handling in React Router.

LANGUAGE: tsx
CODE:
import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}

----------------------------------------

TITLE: Using useParams Hook in React Router
DESCRIPTION: Demonstrates how to import and use the useParams hook in a React component to access URL parameters. The example assumes a route pattern like '/posts/:postId' matched by '/posts/123'.

LANGUAGE: tsx
CODE:
import { useParams } from "react-router"

function SomeComponent() {
  let params = useParams()
  params.postId
}

----------------------------------------

TITLE: Using useParams Hook in React Router
DESCRIPTION: Demonstrates how to import and use the useParams hook in a React component to access URL parameters. The example assumes a route pattern like '/posts/:postId' matched by '/posts/123'.

LANGUAGE: tsx
CODE:
import { useParams } from "react-router"

function SomeComponent() {
  let params = useParams()
  params.postId
}

----------------------------------------

TITLE: Basic Link Component Usage
DESCRIPTION: Example of using the basic Link component for navigation without active states.

LANGUAGE: tsx
CODE:
import { Link } from "react-router";

export function LoggedOutMessage() {
  return (
    <p>
      You've been logged out.{" "}
      <Link to="/login">Login again</Link>
    </p>
  );
}

----------------------------------------

TITLE: Implementing User Search Route and Combobox
DESCRIPTION: Implementation of a search route and combobox component using fetchers for dynamic data loading and user interaction.

LANGUAGE: tsx
CODE:
const users = [
  { id: 1, name: "Ryan" },
  { id: 2, name: "Michael" },
];

export async function loader({ request }) {
  await new Promise((res) => setTimeout(res, 300));
  let url = new URL(request.url);
  let query = url.searchParams.get("q");
  return users.filter((user) =>
    user.name.toLowerCase().includes(query.toLowerCase())
  );
}

----------------------------------------

TITLE: Configuring Route Component in React Router
DESCRIPTION: The Route component is used within a Routes element to render content when a specific URL pattern is matched. It supports various props for configuration, including case sensitivity and path matching.

LANGUAGE: jsx
CODE:
<Routes>
  <Route
    path="/example"
    element={<ExampleComponent />}
    caseSensitive={true}
  />
</Routes>

----------------------------------------

TITLE: Redirect After Form Action
DESCRIPTION: Shows how to redirect after creating a new record using form action.

LANGUAGE: tsx
CODE:
import { redirect } from "react-router";

export async function action({ request }) {
  let formData = await request.formData();
  let project = await createProject(formData);
  return redirect(`/projects/${project.id}`);
}

----------------------------------------

TITLE: Creating Browser Router Configuration in React Router
DESCRIPTION: Demonstrates how to create a browser router with nested routes, components, and data loading using createBrowserRouter.

LANGUAGE: tsx
CODE:
import { createBrowserRouter } from "react-router";

let router = createBrowserRouter([
  {
    path: "/",
    Component: Root,
    children: [
      {
        path: "shows/:showId",
        Component: Show,
        loader: ({ request, params }) =>
          fetch(`/api/show/${params.id}.json`, {
            signal: request.signal,
          }),
      },
    ],
  },
]);

----------------------------------------

TITLE: Imperative Action Calls with useSubmit in React Router
DESCRIPTION: Demonstrates how to submit form data programmatically using the useSubmit hook. Includes timer-based submission example.

LANGUAGE: tsx
CODE:
import { useCallback } from "react";
import { useSubmit } from "react-router";
import { useFakeTimer } from "fake-lib";

function useQuizTimer() {
  let submit = useSubmit();

  let cb = useCallback(() => {
    submit(
      { quizTimedOut: true },
      { action: "/end-quiz", method: "post" }
    );
  }, []);

  let tenMinutes = 10 * 60 * 1000;
  useFakeTimer(tenMinutes, cb);
}

----------------------------------------

TITLE: Creating Cookie Session Storage in TypeScript
DESCRIPTION: This snippet demonstrates how to create a cookie-based session storage using React Router's createCookieSessionStorage function. It includes type definitions for session data and flash data, as well as configuration options for the cookie.

LANGUAGE: typescript
CODE:
import { createCookieSessionStorage } from "react-router";

type SessionData = {
  userId: string;
};

type SessionFlashData = {
  error: string;
};

const { getSession, commitSession, destroySession } =
  createCookieSessionStorage<SessionData, SessionFlashData>(
    {
      cookie: {
        name: "__session",
        domain: "reactrouter.com",
        httpOnly: true,
        maxAge: 60,
        path: "/",
        sameSite: "lax",
        secrets: ["s3cret1"],
        secure: true,
      },
    }
  );

export { getSession, commitSession, destroySession };

----------------------------------------

TITLE: Creating a Basic Signup Form Component with React Router
DESCRIPTION: Implements a simple signup form using React Router's useFetcher hook for form submission.

LANGUAGE: tsx
CODE:
import type { Route } from "./+types/signup";
import { useFetcher } from "react-router";

export default function Signup(_: Route.ComponentProps) {
  let fetcher = useFetcher();
  return (
    <fetcher.Form method="post">
      <p>
        <input type="email" name="email" />
      </p>

      <p>
        <input type="password" name="password" />
      </p>

      <button type="submit">Sign Up</button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Creating Local Pending Navigation Indicators with NavLink in React Router
DESCRIPTION: This example shows how to use NavLink's children and style props as functions to create localized pending indicators during navigation.

LANGUAGE: tsx
CODE:
import { NavLink } from "react-router";

function Navbar() {
  return (
    <nav>
      <NavLink to="/home">
        {({ isPending }) => (
          <span>Home {isPending && <Spinner />}</span>
        )}
      </NavLink>
      <NavLink
        to="/about"
        style={({ isPending }) => ({
          color: isPending ? "gray" : "black",
        })}
      >
        About
      </NavLink>
    </nav>
  );
}

----------------------------------------

TITLE: Implementing useFetcher Hook in React Router
DESCRIPTION: Demonstrates the basic usage of useFetcher hook including state tracking, form handling, and data submission. Shows how to load data and submit forms using the fetcher instance.

LANGUAGE: tsx
CODE:
import { useFetcher } from "react-router"

function SomeComponent() {
  let fetcher = useFetcher()

  // states are available on the fetcher
  fetcher.state // "idle" | "loading" | "submitting"
  fetcher.data // the data returned from the action or loader

  // render a form
  <fetcher.Form method="post" />

  // load data
  fetcher.load("/some/route")

  // submit data
  fetcher.submit(someFormRef, { method: "post" })
  fetcher.submit(someData, {
    method: "post",
    encType: "application/json"
  })
}

----------------------------------------

TITLE: Importing and Basic Usage of NavLink in React Router
DESCRIPTION: Demonstrates how to import and use the NavLink component from react-router for basic navigation.

LANGUAGE: tsx
CODE:
import { NavLink } from "react-router";
<NavLink to="/message" />;

----------------------------------------

TITLE: Configuring Routes for Automatic Code Splitting in React Router
DESCRIPTION: This snippet demonstrates how to set up a simple route configuration in React Router that enables automatic code splitting. It defines routes for '/contact' and '/about', which become separate entry points for the bundler.

LANGUAGE: tsx
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  route("/contact", "./contact.tsx"),
  route("/about", "./about.tsx"),
] satisfies RouteConfig;

----------------------------------------

TITLE: Form-Based Action Calls in React Router
DESCRIPTION: Example of calling actions declaratively using the Form component from React Router. Shows basic form setup with action path and method.

LANGUAGE: tsx
CODE:
import { Form } from "react-router";

function SomeComponent() {
  return (
    <Form action="/projects/123" method="post">
      <input type="text" name="title" />
      <button type="submit">Submit</button>
    </Form>
  );
}

----------------------------------------

TITLE: React Component with Suspense and Await Pattern
DESCRIPTION: Shows how to implement a React component that handles both critical and streaming data using React Suspense and the Await component from react-router.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { Await } from "react-router";

export default function MyComponent({
  loaderData,
}: Route.ComponentProps) {
  let { criticalData, nonCriticalData } = loaderData;

  return (
    <div>
      <h1>Streaming example</h1>
      <h2>Critical data value: {criticalData}</h2>

      <React.Suspense fallback={<div>Loading...</div>}>
        <Await resolve={nonCriticalData}>
          {(value) => <h3>Non critical value: {value}</h3>}
        </Await>
      </React.Suspense>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Nested Routes in React Router
DESCRIPTION: This snippet demonstrates how to configure nested routes in React Router. It shows the relationship between parent and child routes and how to render child components using the Outlet component.

LANGUAGE: tsx
CODE:
<Routes>
  <Route path="dashboard" element={<Dashboard />}>
    <Route index element={<Home />} />
    <Route path="settings" element={<Settings />} />
  </Route>
</Routes>

LANGUAGE: tsx
CODE:
import { Outlet } from "react-router";

export default function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      {/* will either be <Home/> or <Settings/> */}
      <Outlet />
    </div>
  );
}

----------------------------------------

TITLE: Client-Only Data Loading in React Router
DESCRIPTION: This code snippet shows how to implement a route that relies solely on client-side data loading using the clientLoader function and a HydrateFallback component in React Router.

LANGUAGE: tsx
CODE:
export async function clientLoader({
  request,
}: Route.ClientLoaderArgs) {
  const clientData = await getClientData(request);
  return clientData;
}
// Note: you do not have to set this explicitly - it is implied if there is no `loader`
clientLoader.hydrate = true;

// (2)
export function HydrateFallback() {
  return <p>Skeleton rendered during SSR</p>;
}

export default function Component({
  loaderData, // (2) - client data
}: Route.ComponentProps) {
  return <>...</>;
}

----------------------------------------

TITLE: Using useSubmit Hook with React Router Form Component
DESCRIPTION: Demonstrates how to use the useSubmit hook to programmatically submit a form in response to an onChange event. The hook provides an imperative way to trigger form submissions from code rather than direct user interactions.

LANGUAGE: tsx
CODE:
import { useSubmit } from "react-router";

function SomeComponent() {
  const submit = useSubmit();
  return (
    <Form
      onChange={(event) => {
        submit(event.currentTarget);
      }}
    />
  );
}

----------------------------------------

TITLE: Using useRouteError Hook in React Router Error Boundary
DESCRIPTION: Demonstrates how to use the useRouteError hook to access and display an error message in a React Router Error Boundary component.

LANGUAGE: tsx
CODE:
export function ErrorBoundary() {
  const error = useRouteError();
  return <div>{error.message}</div>;
}

----------------------------------------

TITLE: Implementing Optional Segments in React Router
DESCRIPTION: This snippet demonstrates how to create optional segments in React Router routes. Optional segments can be included in the URL but are not required for the route to match.

LANGUAGE: tsx
CODE:
<Route path=":lang?/categories" element={<Categories />} />

LANGUAGE: tsx
CODE:
<Route path="users/:userId/edit?" element={<User />} />

----------------------------------------

TITLE: Initializing and Rendering RouterProvider with React Router in TSX
DESCRIPTION: This snippet demonstrates how to create a browser router, initialize the RouterProvider component, and render it using ReactDOM. It showcases the basic setup for using RouterProvider at the top of a React application's element tree.

LANGUAGE: tsx
CODE:
import {
  RouterProvider,
  createBrowserRouter,
} from "react-router";
import { createRoot } from "react-dom/client";
let router = createBrowserRouter();
createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

----------------------------------------

TITLE: Using useSearchParams Hook in React Router
DESCRIPTION: Demonstrates how to import and use the useSearchParams hook in a React component. The hook returns a tuple containing the current URL's search parameters and a function to update them.

LANGUAGE: tsx
CODE:
import { useSearchParams } from "react-router";

export function SomeComponent() {
  const [searchParams, setSearchParams] = useSearchParams();
  // ...
}

----------------------------------------

TITLE: Implementing Fetcher Form Component
DESCRIPTION: Creation of a form component using React Router's useFetcher hook for handling form submissions with automatic revalidation.

LANGUAGE: tsx
CODE:
import { useLoaderData, useFetcher } from "react-router";

export default function Component() {
  let data = useLoaderData();
  let fetcher = useFetcher();
  return (
    <div>
      <h1>{data.title}</h1>

      <fetcher.Form method="post">
        <input type="text" name="title" />
      </fetcher.Form>
    </div>
  );
}

----------------------------------------

TITLE: Client-Side React Router Hydration
DESCRIPTION: Client-side entry point showing how to hydrate server-rendered content using BrowserRouter and ReactDOM.hydrateRoot(). This ensures the client-side application takes over from the server-rendered HTML.

LANGUAGE: typescript
CODE:
// src/entry.client.tsx mentioned but code not provided in the text

----------------------------------------

TITLE: Using Splat Routes in React Router
DESCRIPTION: This snippet shows how to use splat (catchall) routes in React Router. Splat routes match any characters following a specific path segment, including other '/' characters.

LANGUAGE: tsx
CODE:
<Route path="files/*" element={<File />} />

LANGUAGE: tsx
CODE:
let params = useParams();
// params["*"] will contain the remaining URL after files/
let filePath = params["*"];

----------------------------------------

TITLE: Implementing NavLink Navigation in React Router
DESCRIPTION: Example of using NavLink component for navigation with active state styling. Shows basic navigation setup with multiple routes including home, trending, concerts, and account pages.

LANGUAGE: tsx
CODE:
import { NavLink } from "react-router";

export function MyAppNav() {
  return (
    <nav>
      <NavLink to="/" end>
        Home
      </NavLink>
      <NavLink to="/trending" end>
        Trending Concerts
      </NavLink>
      <NavLink to="/concerts">All Concerts</NavLink>
      <NavLink to="/account">Account</NavLink>
    </nav>
  );
}

----------------------------------------

TITLE: Outlet Context Usage in React Router
DESCRIPTION: Shows how to pass context data through the Outlet component to child routes. The context can be accessed in child components using the useOutletContext hook.

LANGUAGE: tsx
CODE:
<Outlet context={myContextValue} />

----------------------------------------

TITLE: Implementing City Search with React Router Fetcher
DESCRIPTION: Example implementation of a city search combobox using React Router's fetcher API to handle race conditions. The loader function handles the search request while the component implements a type-ahead search interface with automatic request cancellation.

LANGUAGE: tsx
CODE:
// route("/city-search", "./search-cities.ts")
export async function loader({ request }) {
  const { searchParams } = new URL(request.url);
  return searchCities(searchParams.get("q"));
}

LANGUAGE: tsx
CODE:
export function CitySearchCombobox() {
  const fetcher = useFetcher();

  return (
    <fetcher.Form action="/city-search">
      <Combobox aria-label="Cities">
        <ComboboxInput
          name="q"
          onChange={(event) =>
            // submit the form onChange to get the list of cities
            fetcher.submit(event.target.form)
          }
        />

        {fetcher.data ? (
          <ComboboxPopover className="shadow-popup">
            {fetcher.data.length > 0 ? (
              <ComboboxList>
                {fetcher.data.map((city) => (
                  <ComboboxOption
                    key={city.id}
                    value={city.name}
                  />
                ))}
              </ComboboxList>
            ) : (
              <span>No results found</span>
            )}
          </ComboboxPopover>
        ) : null}
      </Combobox>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Server-Side React Router Configuration
DESCRIPTION: Server-side entry point demonstrating the use of StaticRouter to render React Router applications on the server. The code handles incoming HTTP requests and generates initial HTML content.

LANGUAGE: typescript
CODE:
// src/entry.server.tsx mentioned but code not provided in the text

----------------------------------------

TITLE: Implementing Route Configuration with useRoutes in React Router
DESCRIPTION: Demonstrates how to use the useRoutes hook to define and render route configurations using objects. The example shows nested routing with a dashboard layout and multiple child routes.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { useRoutes } from "react-router";

function App() {
  let element = useRoutes([
    {
      path: "/",
      element: <Dashboard />,
      children: [
        {
          path: "messages",
          element: <DashboardMessages />,
        },
        { path: "tasks", element: <DashboardTasks /> },
      ],
    },
    { path: "team", element: <AboutPage /> },
  ]);

  return element;
}

----------------------------------------

TITLE: Using useLocation Hook for Side Effects in React Router
DESCRIPTION: Demonstrates how to use the useLocation hook to perform side effects when the location changes, such as sending pageviews to Google Analytics.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { useLocation } from 'react-router'

function SomeComponent() {
  let location = useLocation()

  React.useEffect(() => {
    // Google Analytics
    ga('send', 'pageview')
  }, [location]);

  return (
    // ...
  );
}

----------------------------------------

TITLE: Creating Interactive Search Combobox Component
DESCRIPTION: Implementation of a combobox component with real-time search functionality using React Router's fetcher API.

LANGUAGE: tsx
CODE:
import { useFetcher } from "react-router";

export function UserSearchCombobox() {
  let fetcher = useFetcher();
  return (
    <div>
      <fetcher.Form method="get" action="/search-users">
        <input 
          type="text" 
          name="q" 
          onChange={(event) => {
            fetcher.submit(event.currentTarget.form);
          }}
        />
      </fetcher.Form>
      {fetcher.data && (
        <ul style={{ opacity: fetcher.state === "idle" ? 1 : 0.25 }}>
          {fetcher.data.map((user) => (
            <li key={user.id}>{user.name}</li>
          ))}
        </ul>
      )}
    </div>
  );
}

----------------------------------------

TITLE: Extended Route Configuration with Layout and Prefixes
DESCRIPTION: Shows a more complex routing setup using index routes, layout routes, and route prefixes for organizing route structure.

LANGUAGE: typescript
CODE:
import {
  type RouteConfig,
  route,
  index,
  layout,
  prefix,
} from "@react-router/dev/routes";

export default [
  index("./home.tsx"),
  route("about", "./about.tsx"),

  layout("./auth/layout.tsx", [
    route("login", "./auth/login.tsx"),
    route("register", "./auth/register.tsx"),
  ]),

  ...prefix("concerts", [
    index("./concerts/home.tsx"),
    route(":city", "./concerts/city.tsx"),
    route("trending", "./concerts/trending.tsx"),
  ]),
] satisfies RouteConfig;

----------------------------------------

TITLE: Implementing Logout Functionality in React Router
DESCRIPTION: This snippet demonstrates how to implement a logout route in React Router. It includes an action function to destroy the session and a component to render the logout confirmation form.

LANGUAGE: tsx
CODE:
import {
  getSession,
  destroySession,
} from "../sessions.server";
import type { Route } from "./+types/logout";

export async function action({
  request,
}: Route.ActionArgs) {
  const session = await getSession(
    request.headers.get("Cookie")
  );
  return redirect("/login", {
    headers: {
      "Set-Cookie": await destroySession(session),
    },
  });
}

export default function LogoutRoute() {
  return (
    <>
      <p>Are you sure you want to log out?</p>
      <Form method="post">
        <button>Logout</button>
      </Form>
      <Link to="/">Never mind</Link>
    </>
  );
}

----------------------------------------

TITLE: Creating a Resource Route for Serving Uploaded Files
DESCRIPTION: Implements a resource route that streams the uploaded file as a response, handling file retrieval and setting appropriate headers.

LANGUAGE: tsx
CODE:
import {
  fileStorage,
  getStorageKey,
} from "~/avatar-storage.server";
import type { Route } from "./+types/avatar";

export async function loader({ params }: Route.LoaderArgs) {
  const storageKey = getStorageKey(params.id);
  const file = await fileStorage.get(storageKey);

  if (!file) {
    throw new Response("User avatar not found", {
      status: 404,
    });
  }

  return new Response(file.stream(), {
    headers: {
      "Content-Type": file.type,
      "Content-Disposition": `attachment; filename=${file.name}`,
    },
  });
}

----------------------------------------

TITLE: Using Navigate Component in React Router
DESCRIPTION: Demonstrates how to use the Navigate component to perform navigation in React Router. This component is recommended for use in React.Component classes where hooks cannot be used.

LANGUAGE: tsx
CODE:
<Navigate to="/tasks" />

----------------------------------------

TITLE: NavLink with Dynamic className
DESCRIPTION: Example of using NavLink with dynamic className based on link states.

LANGUAGE: tsx
CODE:
<NavLink
  to="/messages"
  className={({ isActive, isPending, isTransitioning }) =>
    [
      isPending ? "pending" : "",
      isActive ? "active" : "",
      isTransitioning ? "transitioning" : "",
    ].join(" ")
  }
>
  Messages
</NavLink>

----------------------------------------

TITLE: Creating Pending Form Submission UI with useNavigation in React Router
DESCRIPTION: This example shows how to use the useNavigation hook to create a pending state for non-fetcher form submissions in React Router.

LANGUAGE: tsx
CODE:
import { useNavigation, Form } from "react-router";

function NewProjectForm() {
  const navigation = useNavigation();

  return (
    <Form method="post" action="/projects/new">
      <input type="text" name="title" />
      <button type="submit">
        {navigation.formAction === "/projects/new"
          ? "Submitting..."
          : "Submit"}
      </button>
    </Form>
  );
}

----------------------------------------

TITLE: Applying Custom Styles to NavLink Based on Active and Pending States
DESCRIPTION: Demonstrates how to use the style prop with NavLink to apply custom styles based on the link's active and pending states.

LANGUAGE: tsx
CODE:
<NavLink to="/tasks" style={{ color: "red" }} />
<NavLink to="/tasks" style={({ isActive, isPending }) => ({
  color:
    isActive ? "red" :
    isPending ? "blue" : "black"
})} />

----------------------------------------

TITLE: Implementing File Upload Action in React Router
DESCRIPTION: Creates a route with an upload action using parseFormData function to handle file uploads in a React Router application.

LANGUAGE: tsx
CODE:
import {
  type FileUpload,
  parseFormData,
} from "@mjackson/form-data-parser";

export async function action({
  request,
}: ActionFunctionArgs) {
  const uploadHandler = async (fileUpload: FileUpload) => {
    if (fileUpload.fieldName === "avatar") {
      // process the upload and return a File
    }
  };

  const formData = await parseFormData(
    request,
    uploadHandler
  );
  // 'avatar' has already been processed at this point
  const file = formData.get("avatar");
}

export default function Component() {
  return (
    <form method="post" encType="multipart/form-data">
      <input type="file" name="avatar" />
      <button>Submit</button>
    </form>
  );
}

----------------------------------------

TITLE: Using useFormAction Hook in React Router
DESCRIPTION: Demonstrates basic usage of useFormAction hook to resolve URLs relative to the closest route. Shows both default usage and usage with an additional action parameter.

LANGUAGE: tsx
CODE:
import { useFormAction } from "react-router";

function SomeComponent() {
  // closest route URL
  let action = useFormAction();

  // closest route URL + "destroy"
  let destroyAction = useFormAction("destroy");
}

----------------------------------------

TITLE: Using BrowserRouter Component in React Application
DESCRIPTION: This example shows how to use the BrowserRouter component to wrap the main App component in a React application. This setup enables routing functionality throughout the application.

LANGUAGE: jsx
CODE:
import { BrowserRouter } from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      {/* The rest of your app goes here */}
    </BrowserRouter>
  );
}

----------------------------------------

TITLE: Programmatic Navigation with useNavigate Hook
DESCRIPTION: Example of using the useNavigate hook for programmatic navigation after form submission or other events.

LANGUAGE: tsx
CODE:
import { useNavigate } from "react-router";

export function LoginPage() {
  let navigate = useNavigate();

  return (
    <>
      <MyHeader />
      <MyLoginForm
        onSuccess={() => {
          navigate("/dashboard");
        }}
      />
      <MyFooter />
    </>
  );
}

----------------------------------------

TITLE: Using Dynamic Segments in React Router
DESCRIPTION: This snippet shows how to use dynamic segments in React Router. Dynamic segments are parts of the URL that can change and are accessed using the useParams hook.

LANGUAGE: tsx
CODE:
<Route path="teams/:teamId" element={<Team />} />

LANGUAGE: tsx
CODE:
import { useParams } from "react-router";

export default function Team() {
  let params = useParams();
  // params.teamId
}

----------------------------------------

TITLE: Basic Link Usage in React Router
DESCRIPTION: Example of using the Link component for basic navigation without active state styling.

LANGUAGE: tsx
CODE:
import { Link } from "react-router";

export function LoggedOutMessage() {
  return (
    <p>
      You've been logged out.{" "}
      <Link to="/login">Login again</Link>
    </p>
  );
}

----------------------------------------

TITLE: Creating Login Form Component with React Router
DESCRIPTION: Example of a login form component using useActionData hook from React Router to handle form errors and display validation messages.

LANGUAGE: tsx
CODE:
import { useActionData } from "react-router";

export function LoginForm() {
  const { errors } = useActionData();
  return (
    <Form method="post">
      <label>
        <input type="text" name="username" />
        {errors?.username && <div>{errors.username}</div>}
      </label>

      <label>
        <input type="password" name="password" />
        {errors?.password && <div>{errors.password}</div>}
      </label>

      <button type="submit">Login</button>
    </Form>
  );
}

----------------------------------------

TITLE: Using useAsyncValue Hook in React Router
DESCRIPTION: Demonstrates how to use the useAsyncValue hook to retrieve the resolved promise value from the closest Await component in a React Router application.

LANGUAGE: tsx
CODE:
function SomeDescendant() {
  const value = useAsyncValue();
  // ...
}

// somewhere in your app
<Await resolve={somePromise}>
  <SomeDescendant />
</Await>;

----------------------------------------

TITLE: Implementing BrowserRouter in React Application
DESCRIPTION: Code snippet showing how to wrap the main App component with BrowserRouter for routing functionality.

LANGUAGE: tsx
CODE:
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router";
import App from "./app";

const root = document.getElementById("root");

ReactDOM.createRoot(root).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

----------------------------------------

TITLE: Implementing File Upload Handler with Local Storage
DESCRIPTION: Updates the form's action to store files in the fileStorage instance and implements the upload handler for avatar images.

LANGUAGE: tsx
CODE:
import {
  type FileUpload,
  parseFormData,
} from "@mjackson/form-data-parser";
import {
  fileStorage,
  getStorageKey,
} from "~/avatar-storage.server";
import type { Route } from "./+types/user-profile";

export async function action({
  request,
  params,
}: Route.ActionArgs) {
  async function uploadHandler(fileUpload: FileUpload) {
    if (
      fileUpload.fieldName === "avatar" &&
      fileUpload.type.startsWith("image/")
    ) {
      let storageKey = getStorageKey(params.id);

      // FileUpload objects are not meant to stick around for very long (they are
      // streaming data from the request.body); store them as soon as possible.
      await fileStorage.set(storageKey, fileUpload);

      // Return a File for the FormData object. This is a LazyFile that knows how
      // to access the file's content if needed (using e.g. file.stream()) but
      // waits until it is requested to actually read anything.
      return fileStorage.get(storageKey);
    }
  }

  const formData = await parseFormData(
    request,
    uploadHandler
  );
}

export default function UserPage({
  actionData,
  params,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>User {params.id}</h1>
      <form
        method="post"
        // The form's enctype must be set to "multipart/form-data" for file uploads
        encType="multipart/form-data"
      >
        <input type="file" name="avatar" accept="image/*" />
        <button>Submit</button>
      </form>

      <img
        src={`/user/${params.id}/avatar`}
        alt="user avatar"
      />
    </div>
  );
}

----------------------------------------

TITLE: NavLink with Dynamic Style
DESCRIPTION: Example of NavLink using inline style prop with isActive state for conditional styling.

LANGUAGE: tsx
CODE:
<NavLink
  to="/messages"
  style={({ isActive }) => ({
    color: isActive ? "red" : "black",
  })}
>
  Messages
</NavLink>

----------------------------------------

TITLE: Testing Login Form with createRoutesStub
DESCRIPTION: Implementation of unit test for LoginForm component using createRoutesStub to provide router context and test error message rendering.

LANGUAGE: tsx
CODE:
import { createRoutesStub } from "react-router";
import {
  render,
  screen,
  waitFor,
} from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { LoginForm } from "./LoginForm";

test("LoginForm renders error messages", async () => {
  const USER_MESSAGE = "Username is required";
  const PASSWORD_MESSAGE = "Password is required";

  const Stub = createRoutesStub([
    {
      path: "/login",
      Component: LoginForm,
      action() {
        return {
          errors: {
            username: USER_MESSAGE,
            password: PASSWORD_MESSAGE,
          },
        };
      },
    },
  ]);

  // render the app stub at "/login"
  render(<Stub initialEntries={["/login"]} />);

  // simulate interactions
  userEvent.click(screen.getByText("Login"));
  await waitFor(() => screen.findByText(USER_MESSAGE));
  await waitFor(() => screen.findByText(PASSWORD_MESSAGE));
});

----------------------------------------

TITLE: Rendering Scripts Component in React Router
DESCRIPTION: This code snippet demonstrates how to use the Scripts component from React Router inside the root component of an app. It should be placed inside the <body> tag of the document.

LANGUAGE: tsx
CODE:
import { Scripts } from "react-router";

export default function Root() {
  return (
    <html>
      <head />
      <body>
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Using useNavigate Hook
DESCRIPTION: Demonstrates programmatic navigation using the useNavigate hook for automatic logout.

LANGUAGE: tsx
CODE:
import { useNavigate } from "react-router";

export function useLogoutAfterInactivity() {
  let navigate = useNavigate();

  useFakeInactivityHook(() => {
    navigate("/logout");
  });
}

----------------------------------------

TITLE: NavLink with Dynamic className
DESCRIPTION: Implementation of NavLink with dynamic className prop using isActive state for conditional styling.

LANGUAGE: tsx
CODE:
<NavLink
  to="/messages"
  className={({ isActive }) =>
    isActive ? "text-red-500" : "text-black"
  }
>
  Messages
</NavLink>

----------------------------------------

TITLE: Defining Basic Route Module in React Router
DESCRIPTION: Basic route module configuration showing the route path and corresponding component file reference.

LANGUAGE: tsx
CODE:
route("teams/:teamId", "./team.tsx")

----------------------------------------

TITLE: Configuring Complex Routes in React Router
DESCRIPTION: This snippet showcases a more complex routing configuration in React Router. It includes examples of nested routes, index routes, and routes with parameters.

LANGUAGE: tsx
CODE:
<Routes>
  <Route index element={<Home />} />
  <Route path="about" element={<About />} />

  <Route element={<AuthLayout />}>
    <Route path="login" element={<Login />} />
    <Route path="register" element={<Register />} />
  </Route>

  <Route path="concerts">
    <Route index element={<ConcertsHome />} />
    <Route path=":city" element={<City />} />
    <Route path="trending" element={<Trending />} />
  </Route>
</Routes>

----------------------------------------

TITLE: Conditional Styling of NavLink Based on Active and Pending States
DESCRIPTION: Shows how to apply conditional styling to NavLink using className prop based on the link's active and pending states.

LANGUAGE: tsx
CODE:
<NavLink
  to="/messages"
  className={({ isActive, isPending }) =>
    isPending ? "pending" : isActive ? "active" : ""
  }
>
  Messages
</NavLink>

----------------------------------------

TITLE: Rendering Meta Tags with React Router's Meta Component in TSX
DESCRIPTION: This snippet demonstrates how to use the Meta component from react-router to render meta tags in the head of an HTML document. The Meta component automatically includes all meta tags created by the meta export in route modules.

LANGUAGE: tsx
CODE:
import { Meta } from "react-router";

export default function Root() {
  return (
    <html>
      <head>
        <Meta />
      </head>
    </html>
  );
}

----------------------------------------

TITLE: Basic Form Implementation for Add to Cart
DESCRIPTION: Demonstrates a simple progressively enhanced add-to-cart form that works without JavaScript and enhances functionality when JavaScript loads.

LANGUAGE: tsx
CODE:
export function AddToCart({ id }) {
  return (
    <Form method="post" action="/add-to-cart">
      <input type="hidden" name="id" value={id} />
      <button type="submit">Add To Cart</button>
    </Form>
  );
}

----------------------------------------

TITLE: Combining Server and Client Data in React Router
DESCRIPTION: This code snippet shows how to combine data from both server and client sources. It uses a loader for partial server data, a clientLoader to merge server and client data, and a HydrateFallback component for SSR rendering.

LANGUAGE: tsx
CODE:
export async function loader({
  request,
}: Route.LoaderArgs) {
  const partialData = await getPartialDataFromDb({
    request,
  }); // (1)
  return partialData;
}

export async function clientLoader({
  request,
  serverLoader,
}: Route.ClientLoaderArgs) {
  const [serverData, clientData] = await Promise.all([
    serverLoader(),
    getClientData(request),
  ]);
  return {
    ...serverData, // (4)
    ...clientData, // (4)
  };
}
clientLoader.hydrate = true as const; // (3)

export function HydrateFallback() {
  return <p>Skeleton rendered during SSR</p>; // (2)
}

export default function Component({
  // This will always be the combined set of server + client data
  loaderData,
}: Route.ComponentProps) {
  return <>...</>;
}

----------------------------------------

TITLE: Implementing Lazy Loading in React Router Routes
DESCRIPTION: Example of implementing lazy loading for route components, actions, and loaders using the lazy property.

LANGUAGE: tsx
CODE:
createBrowserRouter([
  {
    path: "/show/:showId",
    lazy: () => {
      let [loader, action, Component] = await Promise.all([
        import("./show.action.js"),
        import("./show.loader.js"),
        import("./show.component.js"),
      ]);
      return { loader, action, Component };
    },
  },
]);

----------------------------------------

TITLE: Link Prefetching Configuration
DESCRIPTION: Demonstrates prefetching behavior configuration and HTML structure for prefetch links.

LANGUAGE: tsx
CODE:
<Link prefetch="intent" />

<a href="..." />
<a href="..." />
<link rel="prefetch" /> // might conditionally render

----------------------------------------

TITLE: Using Children Render Prop with NavLink for Custom Rendering
DESCRIPTION: Illustrates how to use the children prop as a function to customize the rendering of NavLink based on its active state.

LANGUAGE: tsx
CODE:
<NavLink to="/tasks">
  {({ isActive }) => (
    <span className={isActive ? "active" : ""}>Tasks</span>
  )}
</NavLink>

----------------------------------------

TITLE: Implementing Client Loader and Action in React Router
DESCRIPTION: Demonstrates how to use clientLoader and clientAction for managing route data and mutations in a SPA.

LANGUAGE: tsx
CODE:
import { Route } from "./+types/some-route";

export async function clientLoader({
  params,
}: Route.ClientLoaderArgs) {
  let data = await fetch(`/some/api/stuff/${params.id}`);
  return data;
}

export async function clientAction({
  request,
}: Route.ClientActionArgs) {
  let formData = await request.formData();
  return await processPayment(formData);
}

----------------------------------------

TITLE: Rendering Router Provider in React Application
DESCRIPTION: Shows how to render the router in a browser environment using RouterProvider and createRoot from React DOM.

LANGUAGE: tsx
CODE:
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router";
import { createRoot } from "react-dom/client";

createRoot(document.getElementById("root")).render(
  <RouterProvider router={router} />
);

----------------------------------------

TITLE: Advanced Data Strategy with Context and Middleware
DESCRIPTION: Complex implementation showing how to handle context and middleware in a data strategy implementation with parallel loader execution.

LANGUAGE: javascript
CODE:
function dataStrategy({ matches }) {
  let context = runMiddlewares(matches);

  return Promise.all(matches.map(match => {
    return m.resolve(context);
  });
}

----------------------------------------

TITLE: Browser Hydration Setup for Server-Side Rendered Content
DESCRIPTION: Shows how to hydrate server-rendered content in the browser using RouterProvider and hydrationData.

LANGUAGE: tsx
CODE:
import { StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
import { RouterProvider } from "react-router/dom";
import routes from "./app/routes.js";
import { createBrowserRouter } from "react-router";

let router = createBrowserRouter(routes, {
  hydrationData: window.__staticRouterHydrationData,
});

hydrateRoot(
  document,
  <StrictMode>
    <RouterProvider router={router} />
  </StrictMode>
);

----------------------------------------

TITLE: Document Reload Configuration
DESCRIPTION: Shows how to configure Link to use browser navigation instead of client-side routing.

LANGUAGE: tsx
CODE:
<Link to="/logout" reloadDocument />

----------------------------------------

TITLE: Implementing Product Page with Server Components in React Router
DESCRIPTION: Creates a product page route that uses async server components in the loader to fetch and render product details and reviews. The loader returns JSX components that are rendered in the main component with Suspense for the reviews section.

LANGUAGE: tsx
CODE:
// route("products/:pid", "./product-page.tsx");
import type { Route } from "./+types/product";
import Product from "./product";
import Reviews from "./reviews";

export async function loader({ params }: Route.LoaderArgs) {
  return {
    product: <Product id={params.pid} />,
    reviews: <Reviews productId={params.pid} />,
  };
}

export default function ProductPage({
  loaderData,
}: Route.ComponentProps) {
  return (
    <div>
      {loaderData.product}
      <Suspense fallback={<div>loading...</div>}>
        {loaderData.reviews}
      </Suspense>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Static Pre-rendering in React Router
DESCRIPTION: This snippet demonstrates how to set up static pre-rendering in React Router. It defines a function to return a list of URLs for pre-rendering at build time, useful for SEO and performance optimization.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  // return a list of URLs to prerender at build time
  async prerender() {
    return ["/", "/about", "/contact"];
  },
} satisfies Config;

----------------------------------------

TITLE: Implementing shouldRevalidate in React Router
DESCRIPTION: Shows how to control route revalidation after actions using the shouldRevalidate function.

LANGUAGE: tsx
CODE:
import type { ShouldRevalidateFunctionArgs } from "react-router";

function shouldRevalidate(
  arg: ShouldRevalidateFunctionArgs
) {
  return true; // false
}

createBrowserRouter([
  {
    path: "/",
    shouldRevalidate: shouldRevalidate,
    Component: MyRoute,
  },
]);

----------------------------------------

TITLE: Displaying Validation Errors in React Router Form
DESCRIPTION: Updates the Signup component to display validation errors returned from the action using fetcher.data.

LANGUAGE: tsx
CODE:
export default function Signup(_: Route.ComponentProps) {
  let fetcher = useFetcher();
  let errors = fetcher.data?.errors;
  return (
    <fetcher.Form method="post">
      <p>
        <input type="email" name="email" />
        {errors?.email ? <em>{errors.email}</em> : null}
      </p>

      <p>
        <input type="password" name="password" />
        {errors?.password ? (
          <em>{errors.password}</em>
        ) : null}
      </p>

      <button type="submit">Sign Up</button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: View Transition Configuration
DESCRIPTION: Demonstrates how to enable view transitions for Link navigation.

LANGUAGE: tsx
CODE:
<Link to={to} viewTransition>
  Click me
</Link>

----------------------------------------

TITLE: Async Product Component Implementation
DESCRIPTION: Implements an async Product component that fetches product data from a database and renders the product details. The component takes a product ID as a prop and returns a structured view of the product information.

LANGUAGE: tsx
CODE:
export async function Product({ id }: { id: string }) {
  const product = await fakeDb.getProduct(id);
  return (
    <div>
      <h1>{product.title}</h1>
      <p>{product.description}</p>
    </div>
  );
}

----------------------------------------

TITLE: Accessing Splat Route Parameters in React Router Loader
DESCRIPTION: Demonstrates how to access the splat route parameter (using the '*' key) in a React Router loader function for handling file paths.

LANGUAGE: tsx
CODE:
export async function serverLoader({ params }) {
  const filePath = params["*"];
  return fake.getFileInfo(filePath);
}

----------------------------------------

TITLE: URL-Based State Management with React Router Forms
DESCRIPTION: Improved implementation using React Router's Form component to manage view state through URL parameters, eliminating the need for state synchronization.

LANGUAGE: tsx
CODE:
import { Form, useSearchParams } from "react-router";

export function List() {
  const [searchParams] = useSearchParams();
  const view = searchParams.get("view") || "list";

  return (
    <div>
      <Form>
        <button name="view" value="list">
          View as List
        </button>
        <button name="view" value="details">
          View with Details
        </button>
      </Form>
      {view === "list" ? <ListView /> : <DetailView />}
    </div>
  );
}

----------------------------------------

TITLE: Accessing URL Parameters in React Router Loader
DESCRIPTION: Demonstrates how to access URL parameters in a React Router loader function. The example shows accessing a 'city' parameter for fetching concert data.

LANGUAGE: tsx
CODE:
export async function serverLoader({ params }) {
  return fakeDb.getAllConcertsForCity(params.city);
}

----------------------------------------

TITLE: Initializing Basic Await Component with Loader in React Router
DESCRIPTION: Demonstrates the basic setup of an Await component with a loader function that handles both immediate and deferred data loading. Shows integration with React Suspense for loading states.

LANGUAGE: tsx
CODE:
import { Await, useLoaderData } from "react-router";

export function loader() {
  // not awaited
  const reviews = getReviews();
  // awaited (blocks the transition)
  const book = await fetch("/api/book").then((res) =>
    res.json()
  );
  return { book, reviews };
}

function Book() {
  const { book, reviews } = useLoaderData();
  return (
    <div>
      <h1>{book.title}</h1>
      <p>{book.description}</p>
      <React.Suspense fallback={<ReviewsSkeleton />}>
        <Await
          resolve={reviews}
          errorElement={
            <div>Could not load reviews 😬</div>
          }
          children={(resolvedReviews) => (
            <Reviews items={resolvedReviews} />
          )}
        />
      </React.Suspense>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Server Data Loading in React Router
DESCRIPTION: Shows how to use the loader function for server-side data loading in React Router. The loader is used for both initial page loads and client navigations.

LANGUAGE: tsx
CODE:
// route("products/:pid", "./product.tsx");
import type { Route } from "./+types/product";
import { fakeDb } from "../db";

export async function loader({ params }: Route.LoaderArgs) {
  const product = await fakeDb.getProduct(params.pid);
  return product;
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  const { name, description } = loaderData;
  return (
    <div>
      <h1>{name}</h1>
      <p>{description}</p>
    </div>
  );
}

----------------------------------------

TITLE: Component-Based Route Definition
DESCRIPTION: Shows how to define routes using React components directly in the component tree, useful for simpler routing scenarios.

LANGUAGE: tsx
CODE:
import { Routes, Route } from "react-router";

function Wizard() {
  return (
    <div>
      <h1>Some Wizard with Steps</h1>
      <Routes>
        <Route index element={<StepOne />} />
        <Route path="step-2" element={<StepTwo />} />
        <Route path="step-3" element={<StepThree />} />
      </Routes>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Window Focus Revalidation with React Router
DESCRIPTION: Example showing how to use useRevalidator hook to trigger data revalidation when window focus changes. The component displays a 'Revalidating...' message during the revalidation process.

LANGUAGE: tsx
CODE:
import { useRevalidator } from "react-router";

function WindowFocusRevalidator() {
  const revalidator = useRevalidator();

  useFakeWindowFocus(() => {
    revalidator.revalidate();
  });

  return (
    <div hidden={revalidator.state === "idle"}>
      Revalidating...
    </div>
  );
}

----------------------------------------

TITLE: Component-Based Route Definition
DESCRIPTION: Shows how to define routes using React components directly in the component tree, useful for simpler routing scenarios.

LANGUAGE: tsx
CODE:
import { Routes, Route } from "react-router";

function Wizard() {
  return (
    <div>
      <h1>Some Wizard with Steps</h1>
      <Routes>
        <Route index element={<StepOne />} />
        <Route path="step-2" element={<StepTwo />} />
        <Route path="step-3" element={<StepThree />} />
      </Routes>
    </div>
  );
}

----------------------------------------

TITLE: Configuring File-Based Routes with Ignored Files
DESCRIPTION: Sets up file-based routing while ignoring specific files (e.g., 'home.tsx') from being included as routes.

LANGUAGE: tsx
CODE:
import { type RouteConfig } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export default flatRoutes({
  ignoredRouteFiles: ["home.tsx"],
}) satisfies RouteConfig;

----------------------------------------

TITLE: Implementing Error Handling in Await Component
DESCRIPTION: Shows how to handle errors using the errorElement prop and useAsyncError hook for more detailed error handling.

LANGUAGE: tsx
CODE:
<Await
  errorElement={<ReviewsError />}
  resolve={reviewsPromise}
>
  <Reviews />
</Await>;

function ReviewsError() {
  const error = useAsyncError();
  return <div>Error loading reviews: {error.message}</div>;
}

----------------------------------------

TITLE: Implementing Optimistic UI Updates in React Router
DESCRIPTION: This snippet demonstrates how to create an optimistic UI update for a task completion toggle using the useFetcher hook in React Router.

LANGUAGE: tsx
CODE:
function Task({ task }) {
  const fetcher = useFetcher();

  let isComplete = task.status === "complete";
  if (fetcher.formData) {
    isComplete =
      fetcher.formData.get("status") === "complete";
  }

  return (
    <div>
      <div>{task.title}</div>
      <fetcher.Form method="post">
        <button
          name="status"
          value={isComplete ? "incomplete" : "complete"}
        >
          {isComplete ? "Mark Incomplete" : "Mark Complete"}
        </button>
      </fetcher.Form>
    </div>
  );
}

----------------------------------------

TITLE: Parsing URL Path Components in React Router with TypeScript
DESCRIPTION: Function signature for parsePath that takes a URL path string and returns an object containing the parsed pathname, search, and hash components. Returns a Partial type indicating optional components.

LANGUAGE: tsx
CODE:
parsePath(path): Partial

----------------------------------------

TITLE: Using ScrollRestoration with CSP Nonce in React Router
DESCRIPTION: This example shows how to pass a nonce prop to the ScrollRestoration component for Content Security Policy (CSP) compliance. The nonce is passed down to the inline script tag.

LANGUAGE: tsx
CODE:
<ScrollRestoration nonce={cspNonce} />

----------------------------------------

TITLE: Intentional Error Example in React Router Loader
DESCRIPTION: Shows an example of triggering an error in a loader function that will be caught by the error boundary.

LANGUAGE: tsx
CODE:
export async function loader() {
  return undefined();
}

----------------------------------------

TITLE: Using Children Prop with Function in Await Component
DESCRIPTION: Shows how to use the children prop with a function to access resolved promise values in the Await component.

LANGUAGE: tsx
CODE:
<Await resolve={reviewsPromise}>
  {(resolvedReviews) => <Reviews items={resolvedReviews} />}
</Await>

----------------------------------------

TITLE: Complete Loader and Await Implementation Example
DESCRIPTION: Provides a full example of implementing the Await component with a loader function, showing how promises are passed through the component tree.

LANGUAGE: jsx
CODE:
import { useLoaderData, Await } from "react-router";

export async function loader() {
  let reviews = getReviews(); // not awaited
  let book = await getBook();
  return {
    book,
    reviews, // this is a promise
  };
}

export default function Book() {
  const {
    book,
    reviews, // this is the same promise
  } = useLoaderData();

  return (
    <div>
      <h1>{book.title}</h1>
      <p>{book.description}</p>
      <React.Suspense fallback={<ReviewsSkeleton />}>
        <Await
          // and is the promise we pass to Await
          resolve={reviews}
        >
          <Reviews />
        </Await>
      </React.Suspense>
    </div>
  );
}

----------------------------------------

TITLE: Creating an Image Detail Route with View Transitions in React
DESCRIPTION: Shows the implementation of an image detail route that uses the same view transition names as the gallery for seamless animations.

LANGUAGE: tsx
CODE:
import { Link } from "react-router";
import { images } from "./home";
import type { Route } from "./+types/image-details";

export default function ImageDetailsRoute({
  params,
}: Route.ComponentProps) {
  return (
    <div className="image-detail">
      <Link to="/" viewTransition>
        Back
      </Link>
      <h1>Image Number {params.id}</h1>
      <img src={images[Number(params.id)]} />
    </div>
  );
}

----------------------------------------

TITLE: Creating Basic Route Object in React Router
DESCRIPTION: Demonstrates the basic structure of creating a route object with path and component properties using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter([
  {
    path: "/",
    Component: App,
  },
]);

----------------------------------------

TITLE: Enabling v7_fetcherPersist Flag
DESCRIPTION: Code snippet demonstrating how to enable the v7_fetcherPersist future flag when using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, {
  future: {
    v7_fetcherPersist: true,
  },
});

----------------------------------------

TITLE: Data Throwing Pattern in React Router Loader
DESCRIPTION: Demonstrates how to properly throw data with status codes in loader functions for handling 404 cases.

LANGUAGE: tsx
CODE:
import { data } from "react-router";

export async function loader({ params }) {
  let record = await fakeDb.getRecord(params.id);
  if (!record) {
    throw data("Record Not Found", { status: 404 });
  }
  return record;
}

----------------------------------------

TITLE: Rendering Links Component in React Router
DESCRIPTION: This code snippet demonstrates how to use the Links component from React Router within a Root component. It renders the Links component inside the <head> tag of an HTML document.

LANGUAGE: tsx
CODE:
import { Links } from "react-router";

export default function Root() {
  return (
    <html>
      <head>
        <Links />
      </head>
      <body></body>
    </html>
  );
}

----------------------------------------

TITLE: Setting Global Headers in entry.server.tsx
DESCRIPTION: Illustrates how to set global headers in the entry.server.tsx file. This method allows appending headers that should be present for all routes.

LANGUAGE: tsx
CODE:
export default function handleRequest(
  request,
  responseStatusCode,
  responseHeaders,
  routerContext,
  loadContext
) {
  // set, append global headers
  responseHeaders.set(
    "X-App-Version",
    routerContext.manifest.version
  );

  return new Response(await getStream(), {
    headers: responseHeaders,
    status: responseStatusCode,
  });
}

----------------------------------------

TITLE: useLocation Hook Signature in React Router
DESCRIPTION: Provides the TypeScript function signature for the useLocation hook, which returns a Location object.

LANGUAGE: tsx
CODE:
useLocation(): Location

----------------------------------------

TITLE: Nested Route Configuration in React Router
DESCRIPTION: Example of nested route configuration showing error boundary inheritance patterns.

LANGUAGE: tsx
CODE:
route("/app", "app.tsx", [
  route("invoices", "invoices.tsx", [
    route("invoices/:id", "invoice-page.tsx", [
      route("payments", "payments.tsx"),
    ]),
  ]),
]);

----------------------------------------

TITLE: Opting into Revalidation with shouldRevalidate
DESCRIPTION: Code snippet showing how to opt into revalidation using shouldRevalidate and actionStatus.

LANGUAGE: js
CODE:
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
}

async function loader() { ... }

function shouldRevalidate({ actionStatus, defaultShouldRevalidate }) {
  if (actionStatus != null && actionStatus >= 400) {
    // Revalidate this loader when actions return a 4xx/5xx status
    return true;
  }
  return defaultShouldRevalidate;
}

----------------------------------------

TITLE: useRouteLoaderData Function Signature
DESCRIPTION: Displays the TypeScript function signature for the useRouteLoaderData hook.

LANGUAGE: tsx
CODE:
useRouteLoaderData(routeId): undefined

----------------------------------------

TITLE: Using Fetcher for Non-Navigation Actions in React Router
DESCRIPTION: Shows how to use fetcher for submitting data without causing navigation. Includes both declarative and imperative approaches.

LANGUAGE: tsx
CODE:
import { useFetcher } from "react-router";

function Task() {
  let fetcher = useFetcher();
  let busy = fetcher.state !== "idle";

  return (
    <fetcher.Form method="post" action="/update-task/123">
      <input type="text" name="title" />
      <button type="submit">
        {busy ? "Saving..." : "Save"}
      </button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Setting Headers in Child Route
DESCRIPTION: Shows how to set headers in a child route, potentially overwriting parent headers. This is useful when the child route needs to define its own caching strategy.

LANGUAGE: tsx
CODE:
export function headers({ parentHeaders }: HeadersArgs) {
  parentHeaders.set(
    "Cache-Control",
    "max-age=3600, s-maxage=86400"
  );
  return parentHeaders;
}

----------------------------------------

TITLE: useRevalidator Hook Type Signature
DESCRIPTION: Type definition for the useRevalidator hook showing its return type signature.

LANGUAGE: tsx
CODE:
useRevalidator(): undefined

----------------------------------------

TITLE: Replacing fallbackElement with HydrateFallback
DESCRIPTION: Diff showing how to replace the deprecated fallbackElement with HydrateFallback for partial hydration support.

LANGUAGE: diff
CODE:
const router = createBrowserRouter(
  [
    {
      path: "/",
      Component: Layout,
+      HydrateFallback: Fallback,
      // or
+      hydrateFallbackElement: <Fallback />,
      children: [],
    },
  ],
);


<RouterProvider
  router={router}
-  fallbackElement={<Fallback />}
/>

----------------------------------------

TITLE: Imperative Fetcher Submission in React Router
DESCRIPTION: Example of using fetcher.submit for programmatic data submission without navigation.

LANGUAGE: tsx
CODE:
fetcher.submit(
  { title: "New Title" },
  { action: "/update-task/123", method: "post" }
);

----------------------------------------

TITLE: Defining useBlocker Hook Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the useBlocker hook. It takes a shouldBlock parameter and returns a Blocker object.

LANGUAGE: tsx
CODE:
useBlocker(shouldBlock): Blocker

----------------------------------------

TITLE: Creating URLSearchParams Using createSearchParams - React Router
DESCRIPTION: Example demonstrating the simplified object-based initialization with array values using createSearchParams.

LANGUAGE: tsx
CODE:
let searchParams = createSearchParams({
  sort: ['name', 'price']
});

----------------------------------------

TITLE: useAsyncError Hook Signature in React Router
DESCRIPTION: Defines the function signature for the useAsyncError hook, which takes no parameters and returns an unknown type.

LANGUAGE: tsx
CODE:
useAsyncError(): unknown

----------------------------------------

TITLE: Implementing Root Loader and HydrateFallback with Data in React Router
DESCRIPTION: Shows how to implement a loader for the root route and use its data in the HydrateFallback component.

LANGUAGE: tsx
CODE:
import { Route } from "./+types/root";

export async function loader() {
  return {
    version: await getVersion(),
  };
}

export function HydrateFallback({
  loaderData,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Loading version {loaderData.version}...</h1>
      <AwesomeSpinner />
    </div>
  );
}

----------------------------------------

TITLE: Function Signature of useHref in React Router
DESCRIPTION: Shows the function signature of useHref, including its parameters. The function takes a 'to' parameter and a named parameters object, returning a string.

LANGUAGE: tsx
CODE:
useHref(to, __namedParameters): string

----------------------------------------

TITLE: Forcing Client Loader to Run During Hydration in React Router
DESCRIPTION: Shows how to force the client loader to run during hydration and before page rendering in React Router. It includes setting the hydrate property and implementing a HydrateFallback component.

LANGUAGE: tsx
CODE:
export async function loader() {
  /* ... */
}

export async function clientLoader() {
  /* ... */
}

// force the client loader to run during hydration
clientLoader.hydrate = true as const; // `as const` for type inference

export function HydrateFallback() {
  return <div>Loading...</div>;
}

export default function Product() {
  /* ... */
}

----------------------------------------

TITLE: TypeScript Signature of useParams Hook
DESCRIPTION: Shows the TypeScript signature of the useParams hook, indicating that it returns a readonly object of key/value pairs representing URL parameters.

LANGUAGE: tsx
CODE:
useParams(): Readonly

----------------------------------------

TITLE: Implementing ScrollRestoration in React Router
DESCRIPTION: This snippet demonstrates how to use the ScrollRestoration component in a React Router application. It should be placed right before the Scripts component in the root layout.

LANGUAGE: tsx
CODE:
import { ScrollRestoration } from "react-router";

export default function Root() {
  return (
    <html>
      <body>
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Defining Nested Routes in React Router
DESCRIPTION: Shows the structure of nested routes in React Router, which is relevant for understanding how headers are merged between parent and child routes.

LANGUAGE: ts
CODE:
route("pages", "pages-layout-with-nav.tsx", [
  route(":slug", "page.tsx"),
]);

----------------------------------------

TITLE: Relative Path Navigation
DESCRIPTION: Examples of relative path navigation configuration in Link component.

LANGUAGE: tsx
CODE:
<Link to=".." /> // default: "route"
<Link relative="route" />
<Link relative="path" />

----------------------------------------

TITLE: Accessing Route Params using useParams in React Router
DESCRIPTION: This snippet demonstrates how to use the useParams hook to access route parameters in a React component. It also shows how to use the parsed value in an API call.

LANGUAGE: tsx
CODE:
import { useParams } from "react-router";

function City() {
  let { city } = useParams();
  let data = useFakeDataLibrary(`/api/v2/cities/${city}`);
  // ...
}

----------------------------------------

TITLE: Creating Data Responses with React Router's data Function
DESCRIPTION: The 'data' function creates response-like objects with status and headers without serializing into an actual Response. It takes two parameters: 'data' and 'init', and returns a DataWithResponseInit object.

LANGUAGE: tsx
CODE:
data(data, init): DataWithResponseInit

----------------------------------------

TITLE: Markdown Frontmatter Configuration for Route Matching Docs
DESCRIPTION: YAML frontmatter configuration for a documentation page about React Router's route matching algorithm, setting the title and indicating it's hidden.

LANGUAGE: markdown
CODE:
---
title: Route Matching
hidden: true
# want to explain how the matching algorithm works with any potential gotchas
---

# Route Matching

----------------------------------------

TITLE: Demonstrating Proper Export of Custom Values in React Router
DESCRIPTION: This snippet shows how to properly export custom values to be used across routes without causing full reloads in React Router.

LANGUAGE: ts
CODE:
export const myValue = "some value";

----------------------------------------

TITLE: Implementing Form Navigation Blocking with unstable_usePrompt in React Router
DESCRIPTION: Example demonstrating how to use unstable_usePrompt to show a confirmation dialog when users attempt to navigate away from a form with unsaved changes. The hook checks if the input has a value and if the user is attempting to navigate to a different pathname.

LANGUAGE: tsx
CODE:
function ImportantForm() {
  let [value, setValue] = React.useState("");

  // Block navigating elsewhere when data has been entered into the input
  unstable_usePrompt({
    message: "Are you sure?",
    when: ({ currentLocation, nextLocation }) =>
      value !== "" &&
      currentLocation.pathname !== nextLocation.pathname,
  });

  return (
    <Form method="post">
      <label>
        Enter some important data:
        <input
          name="data"
          value={value}
          onChange={(e) => setValue(e.target.value)}
        />
      </label>
      <button type="submit">Save</button>
    </Form>
  );
}

----------------------------------------

TITLE: Configuring Routes in React Router
DESCRIPTION: Required route configuration file that maps URL patterns to route modules.

LANGUAGE: tsx
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  route("some/path", "./some/file.tsx"),
  // pattern ^           ^ module file
] satisfies RouteConfig;

----------------------------------------

TITLE: Using Location Object for Analytics and Scroll Restoration in React Router
DESCRIPTION: This snippet demonstrates how to use the useLocation hook to access the location object in React Router. It shows two custom hooks: one for sending analytics based on pathname changes, and another for restoring scroll position based on location key.

LANGUAGE: tsx
CODE:
function useAnalytics() {
  let location = useLocation();
  useEffect(() => {
    sendFakeAnalytics(location.pathname);
  }, [location]);
}

function useScrollRestoration() {
  let location = useLocation();
  useEffect(() => {
    fakeRestoreScroll(location.key);
  }, [location]);
}

----------------------------------------

TITLE: Checking ErrorResponse in React Router
DESCRIPTION: The isRouteErrorResponse function checks if the given error is an ErrorResponse generated from a 4xx/5xx Response thrown from an action or loader in React Router. It takes an error parameter and returns a boolean.

LANGUAGE: tsx
CODE:
isRouteErrorResponse(error): error

----------------------------------------

TITLE: Implementing Feature-Flagged Server-Side Data Fetching in Remix
DESCRIPTION: This code snippet demonstrates how to implement a feature-flagged approach for server-side data fetching in Remix using React Router's createStaticHandler. It compares the results of the new approach with the existing one for validation.

LANGUAGE: tsx
CODE:
const ENABLE_REMIX_ROUTER = false;

async function handleDocumentRequest({ request }) {
  const appState = {
    trackBoundaries: true,
    trackCatchBoundaries: true,
    catchBoundaryRouteId: null,
    renderBoundaryRouteId: null,
    loaderBoundaryRouteId: null,
    error: undefined,
    catch: undefined,
  };

  // ... do all the current stuff

  const serverHandoff = {
    actionData,
    appState: appState,
    matches: entryMatches,
    routeData,
  };

  const entryContext = {
    ...serverHandoff,
    manifest: build.assets,
    routeModules,
    serverHandoffString: createServerHandoffString(serverHandoff),
  };

  // If the flag is enabled, process the request again with the new static
  // handler and confirm we get the same data on the other side
  if (ENABLE_REMIX_ROUTER) {
    const staticHandler = unstable_createStaticHandler(routes);
    const context = await staticHandler.query(request);

    // Note: == only used for brevity ;)
    assert(entryContext.matches === context.matches);
    assert(entryContext.routeData === context.loaderData);
    assert(entryContext.actionData === context.actionData);

    if (catchBoundaryRouteId) {
      assert(appState.catch === context.errors[catchBoundaryRouteId]);
    }

    if (loaderBoundaryRouteId) {
      assert(appState.error === context.errors[loaderBoundaryRouteId]);
    }
  }
}

----------------------------------------

TITLE: Defining useMatches Hook Signature in React Router
DESCRIPTION: This code snippet shows the TypeScript signature for the useMatches hook in React Router. The hook returns undefined and takes no parameters.

LANGUAGE: tsx
CODE:
useMatches(): undefined

----------------------------------------

TITLE: Client Entry Point Implementation
DESCRIPTION: Optional client entry point for hydrating server-rendered markup and initializing client-side code.

LANGUAGE: tsx
CODE:
import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
import { HydratedRouter } from "react-router/dom";

startTransition(() => {
  hydrateRoot(
    document,
    <StrictMode>
      <HydratedRouter />
    </StrictMode>
  );
});

----------------------------------------

TITLE: Defining Routes with Dynamic Segments in React Router
DESCRIPTION: This snippet shows how to define a route with a dynamic segment (:city) in React Router.

LANGUAGE: tsx
CODE:
<Route path="/concerts/:city" element={<City />} />

----------------------------------------

TITLE: Implementing URL Pattern Matching with ReactRouter matchPath
DESCRIPTION: Function signature for matchPath that takes a pattern and pathname parameter to perform URL pattern matching. Returns undefined when no match is found. Used for programmatic route matching in React Router applications.

LANGUAGE: tsx
CODE:
matchPath(pattern, pathname): undefined

----------------------------------------

TITLE: Implementing Route Component with Props
DESCRIPTION: Example showing how to use typed route component props including loaderData, actionData, params, and matches.

LANGUAGE: tsx
CODE:
import type { Route } from "./+types/route-name";

export default function MyRouteComponent({
  loaderData,
  actionData,
  params,
  matches,
}: Route.ComponentProps) {
  return (
    <div>
      <h1>Welcome to My Route with Props!</h1>
      <p>Loader Data: {JSON.stringify(loaderData)}</p>
      <p>Action Data: {JSON.stringify(actionData)}</p>
      <p>Route Parameters: {JSON.stringify(params)}</p>
      <p>Matched Routes: {JSON.stringify(matches)}</p>
    </div>
  );
}

----------------------------------------

TITLE: Configuring React Router with TypeScript
DESCRIPTION: Optional configuration file for setting up React Router aspects like SSR and directory locations.

LANGUAGE: tsx
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  // Config options...
} satisfies Config;

----------------------------------------

TITLE: useLoaderData Type Signature
DESCRIPTION: Type definition for the useLoaderData hook showing its return type as SerializeFrom.

LANGUAGE: tsx
CODE:
useLoaderData(): SerializeFrom

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining metadata for a documentation page about React Router explanations, setting the title and order properties.

LANGUAGE: markdown
CODE:
---
title: Explanations
order: 5
---

----------------------------------------

TITLE: NavLink with Dynamic Styles
DESCRIPTION: Implementation of NavLink with dynamic inline styles based on link states.

LANGUAGE: tsx
CODE:
<NavLink
  to="/messages"
  style={({ isActive, isPending, isTransitioning }) => {
    return {
      fontWeight: isActive ? "bold" : "",
      color: isPending ? "red" : "black",
      viewTransitionName: isTransitioning ? "slide" : "",
    };
  }}
>
  Messages
</NavLink>

----------------------------------------

TITLE: Signature of redirectDocument Function in React Router
DESCRIPTION: Defines the function signature for redirectDocument, which takes a URL and optional init parameters to create a redirect response that forces a document reload.

LANGUAGE: tsx
CODE:
redirectDocument(url, init): Response

----------------------------------------

TITLE: Using Children Prop with React Elements in Await Component
DESCRIPTION: Demonstrates using the children prop with React elements and accessing resolved values through the useAsyncValue hook.

LANGUAGE: tsx
CODE:
<Await resolve={reviewsPromise}>
  <Reviews />
</Await>;

function Reviews() {
  const resolvedReviews = useAsyncValue();
  return <div>...</div>;
}

----------------------------------------

TITLE: Signature of useFetchers Hook in React Router
DESCRIPTION: Shows the method signature for the useFetchers hook. It takes no parameters and returns undefined.

LANGUAGE: tsx
CODE:
useFetchers(): undefined

----------------------------------------

TITLE: Enabling v7_normalizeFormMethod Flag
DESCRIPTION: Code snippet showing how to enable the v7_normalizeFormMethod future flag when using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, {
  future: {
    v7_normalizeFormMethod: true,
  },
});

----------------------------------------

TITLE: NavLink with Children Function
DESCRIPTION: Shows how to use NavLink with a children function for conditional rendering.

LANGUAGE: tsx
CODE:
<NavLink to="/tasks">
  {({ isActive, isPending, isTransitioning }) => (
    <span className={isActive ? "active" : ""}>Tasks</span>
  )}
</NavLink>

----------------------------------------

TITLE: Resolving Path Objects with React Router's resolvePath Function
DESCRIPTION: The resolvePath function takes two parameters: 'to' and 'fromPathname'. It returns a resolved Path object relative to the given pathname. This function is useful for path manipulation in React Router applications.

LANGUAGE: tsx
CODE:
resolvePath(to, fromPathname): Path

----------------------------------------

TITLE: Creating and Using Router Provider in React
DESCRIPTION: Demonstrates how to create a browser router and use it with the new RouterProvider component in React.

LANGUAGE: tsx
CODE:
const router = createBrowserRouter([
  {
    path: "/",
    element: <Layout />,
    children: [
      {
        index: true,
        element: <Home />,
      },
    ],
  },
]);

function NewApp() {
  return <RouterProvider router={router} />;
}

----------------------------------------

TITLE: Enabling v7_partialHydration Flag
DESCRIPTION: Code snippet demonstrating how to enable the v7_partialHydration future flag when using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, {
  future: {
    v7_partialHydration: true,
  },
});

----------------------------------------

TITLE: Using useHref in React Router
DESCRIPTION: Demonstrates how to import and use the useHref function to resolve a URL against the current location in a React component.

LANGUAGE: tsx
CODE:
import { useHref } from "react-router";

function SomeComponent() {
  let href = useHref("some/where");
  // "/resolved/some/where"
}

----------------------------------------

TITLE: Updating formMethod Comparisons
DESCRIPTION: Diff showing how to update formMethod comparisons to use uppercase HTTP methods.

LANGUAGE: diff
CODE:
-useNavigation().formMethod === "post"
-useFetcher().formMethod === "get";
+useNavigation().formMethod === "POST"
+useFetcher().formMethod === "GET";

----------------------------------------

TITLE: Form Component for Search Navigation
DESCRIPTION: Demonstrates using Form component for search functionality with URL parameters.

LANGUAGE: tsx
CODE:
<Form action="/search">
  <input type="text" name="q" />
</Form>

----------------------------------------

TITLE: createSearchParams Function Signature - React Router TypeScript
DESCRIPTION: TypeScript function signature showing the input and return types for createSearchParams.

LANGUAGE: tsx
CODE:
createSearchParams(init): URLSearchParams

----------------------------------------

TITLE: Defining Markdown Frontmatter for Community Page
DESCRIPTION: YAML frontmatter block defining metadata for the React Router community documentation page, specifying the title and display order.

LANGUAGE: markdown
CODE:
---
title: Community
order: 6
---

----------------------------------------

TITLE: Defining createBrowserRouter Function Signature in TypeScript
DESCRIPTION: This code snippet shows the function signature for createBrowserRouter. It takes routes and opts as parameters and returns a DataRouter object.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, opts): DataRouter

----------------------------------------

TITLE: Updating Relative Links for v7_relativeSplatPath
DESCRIPTION: Diff showing how to update relative links within a route tree to include an extra .. segment for correct linking.

LANGUAGE: diff
CODE:
function Dashboard() {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
-        <Link to="/">Dashboard Home</Link>
-        <Link to="team">Team</Link>
-        <Link to="projects">Projects</Link>
+        <Link to="../">Dashboard Home</Link>
+        <Link to="../team">Team</Link>
+        <Link to="../projects">Projects</Link>
      </nav>

      <Routes>
        <Route path="/" element={<DashboardHome />} />
        <Route path="team" element={<DashboardTeam />} />
        <Route
          path="projects"
          element={<DashboardProjects />}
        />
      </Routes>
    </div>
  );
}

----------------------------------------

TITLE: Redirect in Route Loader
DESCRIPTION: Example of using redirect function in a route loader for authentication flow.

LANGUAGE: tsx
CODE:
import { redirect } from "react-router";

export async function loader({ request }) {
  let user = await getUser(request);
  if (!user) {
    return redirect("/login");
  }
  return { userName: user.name };
}

----------------------------------------

TITLE: Defining createPath Function Signature in TypeScript React
DESCRIPTION: This code snippet shows the function signature for createPath in React Router. It takes a single parameter of unnamed type and returns a string representing the created URL path.

LANGUAGE: tsx
CODE:
createPath(__namedParameters): string

----------------------------------------

TITLE: Implementing Client-side Logging Middleware
DESCRIPTION: Example of implementing client-side logging middleware in React Router

LANGUAGE: typescript
CODE:
const clientLogger: Route.unstable_ClientMiddlewareFunction = async (
  { request },
  next
) => {
  let start = performance.now();

  // Run the remaining middlewares and all route loaders
  await next();

  let duration = performance.now() - start;
  console.log(`Navigated to ${request.url} (${duration}ms)`);
};

----------------------------------------

TITLE: Installing Latest React Router v6
DESCRIPTION: Command to install the latest minor version of React Router v6 before upgrading to v7.

LANGUAGE: shellscript
CODE:
npm install react-router-dom@6

----------------------------------------

TITLE: Creating In-Memory Session Storage in React Router
DESCRIPTION: createMemorySessionStorage is a utility function that creates a simple in-memory SessionStorage object. It is primarily intended for testing scenarios and serves as a reference implementation. This storage solution is limited to single-process applications and is not recommended for production use due to scalability constraints.



----------------------------------------

TITLE: Updating Client Entry File
DESCRIPTION: Updates the entry.client.tsx file to use HydratedRouter from React Router instead of RemixBrowser.

LANGUAGE: typescript
CODE:
-import { RemixBrowser } from "@remix-run/react";
+import { HydratedRouter } from "react-router/dom";

hydrateRoot(
  document,
  <StrictMode>
-   <RemixBrowser />
+   <HydratedRouter />
  </StrictMode>,
);

----------------------------------------

TITLE: Defining useNavigationType Hook Signature in TypeScript with React
DESCRIPTION: This code snippet shows the TypeScript signature for the useNavigationType hook in React Router. It returns a NavigationType value, which describes how the router arrived at the current location.

LANGUAGE: tsx
CODE:
useNavigationType(): NavigationType

----------------------------------------

TITLE: Documenting createCookieSessionStorage - React Router
DESCRIPTION: Function reference documentation for createCookieSessionStorage that stores session data in browser cookies. This approach eliminates the need for database/backend storage but has limitations due to browser cookie size restrictions.

LANGUAGE: markdown
CODE:
---
title: createCookieSessionStorage
---

# createCookieSessionStorage

[MODES: framework, data]

## Summary

[Reference Documentation ↗](https://api.reactrouter.com/v7/functions/react_router.createCookieSessionStorage.html)

Creates and returns a SessionStorage object that stores all session data
directly in the session cookie itself.

This has the advantage that no database or other backend services are
needed, and can help to simplify some load-balanced scenarios. However, it
also has the limitation that serialized session data may not exceed the
browser's maximum cookie size. Trade-offs!

----------------------------------------

TITLE: useSubmit Hook Type Signature
DESCRIPTION: Shows the TypeScript type signature for the useSubmit hook, which returns a SubmitFunction type.

LANGUAGE: tsx
CODE:
useSubmit(): SubmitFunction

----------------------------------------

TITLE: Rendering Routes with React Router in TSX
DESCRIPTION: This snippet demonstrates how to use the Routes component to render a branch of Route components that best matches the current location. It includes examples of index routes and nested routes.

LANGUAGE: tsx
CODE:
import { Routes, Route } from "react-router"

<Routes>
 <Route index element={<StepOne />} />
 <Route path="step-2" element={<StepTwo />} />
 <Route path="step-3" element={<StepThree />}>
</Routes>

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: Updates the tsconfig.json file to include React Router type definitions and set up rootDirs for simplified relative imports.

LANGUAGE: json
CODE:
{
  "include": [
    /* ... */
+   ".react-router/types/**/*"
  ],
  "compilerOptions": {
-   "types": ["@remix-run/node", "vite/client"],
+   "types": ["@react-router/node", "vite/client"],
    /* ... */
+   "rootDirs": [".", "./.react-router/types"]
  }
}

----------------------------------------

TITLE: Defining useMatch Function Signature in React Router (TSX)
DESCRIPTION: This code snippet shows the signature of the useMatch function in React Router. It takes a pattern parameter and returns undefined.

LANGUAGE: tsx
CODE:
useMatch(pattern): undefined

----------------------------------------

TITLE: useResolvedPath Function Signature in React Router
DESCRIPTION: Shows the function signature for the useResolvedPath hook. It takes a 'to' parameter and named parameters, returning a Path object.

LANGUAGE: tsx
CODE:
useResolvedPath(to, __namedParameters): Path

----------------------------------------

TITLE: React Router Root Component Setup
DESCRIPTION: Implementation of the root component with layout structure and necessary React Router components.

LANGUAGE: tsx
CODE:
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        />
        <title>My App</title>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function Root() {
  return <Outlet />;
}

----------------------------------------

TITLE: Configuring NPM Script for Development
DESCRIPTION: Adding a 'dev' script to package.json to run the React Router development server.

LANGUAGE: json
CODE:
"scripts": {
  "dev": "react-router dev"
}

----------------------------------------

TITLE: Defining Lazy Routes
DESCRIPTION: Example of defining lazy-loaded routes with the new lazy route modules feature

LANGUAGE: jsx
CODE:
let routes = createRoutesFromElements(
  <Route path="/" element={<Layout />}>
    <Route index element={<Home />} />
    <Route path="a" lazy={() => import("./a")} />
    <Route path="b" lazy={() => import("./b")} />
  </Route>
);

----------------------------------------

TITLE: Setting Up Initial Routes
DESCRIPTION: Creating a routes.ts file to configure routes and a catchall.tsx file as a placeholder route.

LANGUAGE: shellscript
CODE:
touch src/routes.ts src/catchall.tsx

LANGUAGE: typescript
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  // * matches all URLs, the ? makes it optional so it will match / as well
  route("*?", "catchall.tsx"),
] satisfies RouteConfig;

LANGUAGE: tsx
CODE:
export default function Component() {
  return <div>Hello, world!</div>;
}

----------------------------------------

TITLE: Implementing useOutlet Hook in React Router
DESCRIPTION: The useOutlet hook returns the element for the child route at the current level of the route hierarchy. It accepts a context parameter and returns undefined.

LANGUAGE: tsx
CODE:
useOutlet(context): undefined

----------------------------------------

TITLE: Using useOutletContext Hook in React Router TypeScript
DESCRIPTION: Function signature for the useOutletContext hook that returns the context from a parent route's Outlet component.

LANGUAGE: tsx
CODE:
useOutletContext(): Context

----------------------------------------

TITLE: Using Form Component for Action Calls
DESCRIPTION: Demonstrates how to use the Form component from React Router to declaratively call actions. This approach causes navigation and adds an entry to browser history.

LANGUAGE: tsx
CODE:
import { Form } from "react-router";

function SomeComponent() {
  return (
    <Form action="/projects/123" method="post">
      <input type="text" name="title" />
      <button type="submit">Submit</button>
    </Form>
  );
}

----------------------------------------

TITLE: Using Form Component for Action Calls
DESCRIPTION: Demonstrates how to use the Form component from React Router to declaratively call actions. This approach causes navigation and adds an entry to browser history.

LANGUAGE: tsx
CODE:
import { Form } from "react-router";

function SomeComponent() {
  return (
    <Form action="/projects/123" method="post">
      <input type="text" name="title" />
      <button type="submit">Submit</button>
    </Form>
  );
}

----------------------------------------

TITLE: Using Future Flags Configuration
DESCRIPTION: Example of configuring future flags in React Router

LANGUAGE: jsx
CODE:
<BrowserRouter future={{ v7_startTransition: true }}>
  <Routes>{/*...*/}</Routes>
</BrowserRouter>

<RouterProvider router={router} future={{ v7_startTransition: true }}/>

----------------------------------------

TITLE: Migrating index.html to root.tsx
DESCRIPTION: Converting the index.html file to a React component in root.tsx, which serves as the new entry point for the application.

LANGUAGE: shellscript
CODE:
touch src/root.tsx

LANGUAGE: tsx
CODE:
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

export function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        />
        <title>My App</title>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function Root() {
  return <Outlet />;
}

----------------------------------------

TITLE: Function Signature of useRouteError Hook in React Router
DESCRIPTION: Defines the TypeScript function signature for the useRouteError hook, which returns an unknown type representing the error thrown during routing operations.

LANGUAGE: tsx
CODE:
useRouteError(): unknown

----------------------------------------

TITLE: useFormAction Hook Signature
DESCRIPTION: Function signature for the useFormAction hook showing its parameters and return type.

LANGUAGE: tsx
CODE:
useFormAction(action, __namedParameters): string

----------------------------------------

TITLE: Updating Loader Return Value
DESCRIPTION: Diff showing how to update a loader function to return raw objects instead of using the deprecated json method.

LANGUAGE: diff
CODE:
async function loader() {
- return json({ data });
+ return { data };

----------------------------------------

TITLE: Custom Data Strategy with Middleware in React Router
DESCRIPTION: Shows how to implement a custom data strategy that still leverages the default middleware functionality in React Router. It demonstrates the use of a defaultMiddleware utility provided to the dataStrategy function.

LANGUAGE: typescript
CODE:
async function dataStrategy({ request, matches, defaultMiddleware }) {
  let results = await defaultMiddleware(() => {
    // custom loader/action execution logic here
  });
  return results;
}

----------------------------------------

TITLE: Minor Changes in v2.9.0
DESCRIPTION: Changes related to fetch polyfill implementation using undici.

LANGUAGE: markdown
CODE:
- Use undici as our fetch polyfill going forward
- Put undici fetch polyfill behind a new installGlobals({ nativeFetch: true }) parameter

----------------------------------------

TITLE: Implementing Middleware in React Router
DESCRIPTION: Shows the implementation of middleware in React Router. It demonstrates how to create middleware functions that can perform logic before and after handlers are called, and how to export them for use in routes.

LANGUAGE: typescript
CODE:
const myMiddleware: Route.unstable_MiddlewareFunction = async (
  { request, context },
  next
) => {
  // Do stuff before the handlers are called
  context.user = await getUser(request);
  // Call handlers and generate the Response
  let res = await next();
  // Amend the response if needed
  res.headers.set("X-Whatever", "stuff");
  // Propagate the response up the middleware chain
  return res;
};

// Export an array of middlewares per-route which will run left-to-right on
// the server
export const middleware = [myMiddleware];

// You can also export an array of client middlewares that run before/after
// `clientLoader`/`clientAction`
const myClientMiddleware: Route.unstable_ClientMiddlewareFunction = (
  { context },
  next
) => {
  //...
};

export const clientMiddleware = [myClientSideMiddleware];

----------------------------------------

TITLE: useSearchParams Function Signature in React Router
DESCRIPTION: Defines the function signature for the useSearchParams hook. It takes an optional defaultInit parameter and returns undefined.

LANGUAGE: tsx
CODE:
useSearchParams(defaultInit): undefined

----------------------------------------

TITLE: Defining createStaticRouter Function Signature in TypeScript/React
DESCRIPTION: This code snippet shows the function signature for createStaticRouter. It takes routes, context, and opts as parameters and returns a DataRouter object.

LANGUAGE: tsx
CODE:
createStaticRouter(routes, context, opts): DataRouter

----------------------------------------

TITLE: Setting HTTP Headers in Route Module
DESCRIPTION: Demonstrates how to set HTTP headers using the headers export in a route module. This method allows setting multiple headers for security and caching purposes.

LANGUAGE: tsx
CODE:
import { Route } from "./+types/some-route";

export function headers(_: Route.HeadersArgs) {
  return {
    "Content-Security-Policy": "default-src 'self'",
    "X-Frame-Options": "DENY",
    "X-Content-Type-Options": "nosniff",
    "Cache-Control": "max-age=3600, s-maxage=86400",
  };
}

----------------------------------------

TITLE: Changelog Entry for Version 7.1.0
DESCRIPTION: Documents a significant update that adds error handling when routes directory is missing in flatRoutes function.

LANGUAGE: markdown
CODE:
### Patch Changes\n- Throw error in `flatRoutes` if routes directory is missing ([#12407](https://github.com/remix-run/react-router/pull/12407))\n- Updated dependencies:\n  - `@react-router/dev@7.1.0`

----------------------------------------

TITLE: Migrating from AppLoadContext to New Context API in React Router
DESCRIPTION: Shows how to migrate from the existing AppLoadContext to the new context API in React Router. It demonstrates creating a new context for the existing app load context and updating the loader to use the new API.

LANGUAGE: typescript
CODE:
let appContext = unstable_createContext<AppLoadContext>()

function getLoadContext(req, res) {
  let appLoadContext = { /* your existing object */ };

  return new Map([[appContext, appLoadContext]]);
}

function loader({ context }) {
  // Hopefully this can be done via find/replace or a codemod
  context.get(appContext).foo.something()
   // ...
}

----------------------------------------

TITLE: useActionData Hook Type Signature
DESCRIPTION: Type definition for the useActionData hook showing it returns undefined when no form submission has occurred.

LANGUAGE: tsx
CODE:
useActionData(): undefined

----------------------------------------

TITLE: Using PrefetchPageLinks Component in React Router
DESCRIPTION: Demonstrates basic usage of PrefetchPageLinks component to prefetch resources for a specific page path. This enables instant navigation by preloading modules and data before user interaction.

LANGUAGE: tsx
CODE:
import { PrefetchPageLinks } from "react-router";

<PrefetchPageLinks page="/absolute/path" />;

----------------------------------------

TITLE: Demonstrating Class Component and Function Component HMR Support in React
DESCRIPTION: This snippet shows which types of component exports are supported by React Fast Refresh. Class components and higher-order components returning classes are not supported, while function components are supported.

LANGUAGE: tsx
CODE:
export class ComponentA extends Component {} // ❌

export const ComponentB = HOC(ComponentC); // ❌ Won't work if HOC returns a class component

export function ComponentD() {} // ✅
export const ComponentE = () => {}; // ✅
export default function ComponentF() {} // ✅

----------------------------------------

TITLE: Importing Generated Types in TypeScript
DESCRIPTION: This snippet shows how generated types can be imported from a special typegen file, leveraging TypeScript's rootDirs configuration.

LANGUAGE: typescript
CODE:
import { LoaderArgs, DefaultProps } from "./+types.product";

----------------------------------------

TITLE: Updating DOM-specific Imports in React Router v7
DESCRIPTION: Diff showing how to update DOM-specific imports like RouterProvider in React Router v7.

LANGUAGE: diff
CODE:
-import { RouterProvider } from "react-router-dom";
+import { RouterProvider } from "react-router/dom";

----------------------------------------

TITLE: Proposing Route-Specific Args for Type Inference in TypeScript
DESCRIPTION: This code snippet illustrates the proposed approach of passing route-specific arguments to each route export for improved type inference.

LANGUAGE: typescript
CODE:
export function loader({ params }: LoaderArgs) {}

export function clientLoader({ params, serverLoader }: ClientLoaderArgs) {}

export default function Component({
  params,
  loaderData,
  actionData,
}: DefaultProps) {
  // ...
}

----------------------------------------

TITLE: Implementing useBeforeUnload Hook in React Router
DESCRIPTION: Function signature for the useBeforeUnload hook that sets up a callback handler for window's beforeunload event. Takes a callback function and options object as parameters.

LANGUAGE: tsx
CODE:
useBeforeUnload(callback, options): void

----------------------------------------

TITLE: Defining useViewTransitionState Hook Signature in React Router
DESCRIPTION: This code snippet shows the signature of the useViewTransitionState hook. It returns a boolean indicating whether there is an active view transition to the specified location.

LANGUAGE: tsx
CODE:
useViewTransitionState(to, opts): boolean

----------------------------------------

TITLE: Adding Action Handler for Form Submission
DESCRIPTION: Implementation of a client-side action handler that processes form data and updates localStorage with a new title.

LANGUAGE: tsx
CODE:
export async function clientAction({ request }) {
  await new Promise((res) => setTimeout(res, 1000));
  let data = await request.formData();
  localStorage.setItem("title", data.get("title"));
  return { ok: true };
}

----------------------------------------

TITLE: Updating Server Entry File
DESCRIPTION: Updates the entry.server.tsx file to use ServerRouter from React Router instead of RemixServer.

LANGUAGE: typescript
CODE:
-import { RemixServer } from "@remix-run/react";
+import { ServerRouter } from "react-router";

-<RemixServer context={remixContext} url={request.url} />,
+<ServerRouter context={remixContext} url={request.url} />,

----------------------------------------

TITLE: Illustrating Loader Data Type Inference in TypeScript
DESCRIPTION: This example demonstrates how loader data types were manually specified using generics in Remix, emphasizing the need for automatic type inference.

LANGUAGE: typescript
CODE:
export function loader() {
  return { planet: "world" };
}

export default function Component() {
  const data = useLoaderData<typeof loader>();
}

----------------------------------------

TITLE: Defining useInRouterContext Hook Signature in React Router
DESCRIPTION: This code snippet shows the TypeScript signature of the useInRouterContext hook. It returns a boolean indicating whether the component is a descendant of a Router.

LANGUAGE: tsx
CODE:
useInRouterContext(): boolean

----------------------------------------

TITLE: Scroll Reset Prevention in Link
DESCRIPTION: Shows how to prevent scroll position reset when navigating with Link component.

LANGUAGE: tsx
CODE:
<Link to="?tab=one" preventScrollReset />

----------------------------------------

TITLE: Creating and Using Cookies in React Router
DESCRIPTION: This example demonstrates how to create and use cookies in React Router. It includes creating a cookie, using it in a loader and action function, and implementing user preferences for hiding/showing a banner.

LANGUAGE: typescript
CODE:
import { createCookie } from "react-router";

export const userPrefs = createCookie("user-prefs", {
  maxAge: 604_800, // one week
});

LANGUAGE: tsx
CODE:
import { Link, Form, redirect } from "react-router";
import type { Route } from "./+types/home";

import { userPrefs } from "../cookies.server";

export async function loader({
  request,
}: Route.LoaderArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie =
    (await userPrefs.parse(cookieHeader)) || {};
  return { showBanner: cookie.showBanner };
}

export async function action({
  request,
}: Route.ActionArgs) {
  const cookieHeader = request.headers.get("Cookie");
  const cookie =
    (await userPrefs.parse(cookieHeader)) || {};
  const bodyParams = await request.formData();

  if (bodyParams.get("bannerVisibility") === "hidden") {
    cookie.showBanner = false;
  }

  return redirect("/", {
    headers: {
      "Set-Cookie": await userPrefs.serialize(cookie),
    },
  });
}

export default function Home({
  loaderData,
}: Route.ComponentProps) {
  return (
    <div>
      {loaderData.showBanner ? (
        <div>
          <Link to="/sale">Don't miss our sale!</Link>
          <Form method="post">
            <input
              type="hidden"
              name="bannerVisibility"
              value="hidden"
            />
            <button type="submit">Hide</button>
          </Form>
        </div>
      ) : null}
      <h1>Welcome!</h1>
    </div>
  );
}

----------------------------------------

TITLE: React Component with Server Module Import Example
DESCRIPTION: Example React component demonstrating problematic usage of server-side code in client components, showing how runtime errors could occur when importing from .server modules without proper safeguards.

LANGUAGE: tsx
CODE:
import { getFortune } from "~/db.server.ts";

export default function Route() {
  const [fortune, setFortune] = useState(null);
  return (
    <>
      {user ? (
        <h1>Your fortune of the day: {fortune}</h1>
      ) : (
        <button onClick={() => setFortune(getFortune())}>
          Open fortune cookie 🥠
        </button>
      )}
    </>
  );
}

----------------------------------------

TITLE: Installing React Router v7
DESCRIPTION: Command to install the latest version of React Router v7.

LANGUAGE: shellscript
CODE:
npm install react-router-dom@latest

----------------------------------------

TITLE: Visualizing Linear Workflow with Mermaid Diagram
DESCRIPTION: A flowchart diagram showing the complete workflow process from issue creation through completion, including all possible status transitions and decision points.

LANGUAGE: mermaid
CODE:
graph TD
    A(Github/Discord/???) -->|intake| Triage
    Triage -->|accepted| Backlog
    Triage -->|rejected| Canceled
    Backlog -->|planned| Todo
    Todo -->|picked up| InProgress(In Progress)
    InProgress -->|PR| InReview(In Review)
    InProgress -->|stopped| Todo
    InProgress -->|blocked| NeedsFeedback(Needs Feedback)
    NeedsFeedback -->|unblocked| InProgress
    InReview -->|larger changes| InProgress
    InReview -->|small comments| InReview
    InReview -->|merged| Done

----------------------------------------

TITLE: useNavigate Hook Type Signature
DESCRIPTION: Type definition for the useNavigate hook showing it returns a NavigateFunction type.

LANGUAGE: tsx
CODE:
useNavigate(): NavigateFunction

----------------------------------------

TITLE: Including React and React DOM Scripts in HTML
DESCRIPTION: This HTML snippet shows how to include React and React DOM scripts from a CDN (unpkg) in a web page. It demonstrates the use of the crossorigin attribute and includes a comment about where other HTML for the app should go.

LANGUAGE: html
CODE:
<!-- Other HTML for your app goes here -->
<!-- prettier-ignore -->
<script src="https://unpkg.com/react@>=16.8/umd/react.development.js" crossorigin></script>

----------------------------------------

TITLE: Configuring Pre-rendering Options in React Router
DESCRIPTION: Demonstrates different ways to configure pre-rendering in react-router.config.ts including boolean flags, static path arrays, and async functions for CMS integration.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  // Can be omitted - defaults to true
  ssr: true,

  // all static paths (no dynamic segments like "/post/:slug")
  prerender: true,

  // specific paths
  prerender: ["/", "/blog", "/blog/popular-post"],

  // async function for dependencies like a CMS
  async prerender({ getStaticPaths }) {
    let posts = await fakeGetPostsFromCMS();
    return [
      "/",
      "/blog",
      ...posts.map((post) => post.href),
    ];
  },
} satisfies Config;

----------------------------------------

TITLE: Creating React Router Configuration File
DESCRIPTION: Creating and configuring the react-router.config.ts file to specify the app directory and disable server-side rendering.

LANGUAGE: shellscript
CODE:
touch react-router.config.ts

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  appDirectory: "src",
  ssr: false,
} satisfies Config;

----------------------------------------

TITLE: Implementing Error Boundary in React with TypeScript
DESCRIPTION: Shows how to implement a new error boundary that handles both Response errors and other types of errors.

LANGUAGE: tsx
CODE:
function NewErrorBoundary() {
  const error = useRouteError();

  if (error instanceof Response) {
    return <MyOldCatchBoudnary error={error} />;
  } else {
    return <MyOldErrorBoundary error={error} />;
  }
}

----------------------------------------

TITLE: Using useNavigation Hook in React Router
DESCRIPTION: Demonstrates basic usage of useNavigation hook to access navigation state and form data in a React component. The hook returns a navigation object containing state and formData properties.

LANGUAGE: tsx
CODE:
import { useNavigation } from "react-router";

function SomeComponent() {
  let navigation = useNavigation();
  navigation.state;
  navigation.formData;
  // etc.
}

----------------------------------------

TITLE: Rendering React Router Components in TSX
DESCRIPTION: This snippet demonstrates how to set up a basic React Router structure with nested routes and loaders. It includes examples of the WhateverRouter component and Route components with various props.

LANGUAGE: tsx
CODE:
<WhateverRouter initialEntries={["/events/123"]}>
  <Route path="/" element={<Root />} loader={rootLoader}>
    <Route
      path="events/:id"
      element={<Event />}
      loader={eventLoader}
    />
  </Route>
</WhateverRouter>

----------------------------------------

TITLE: Opening Custom Query Parsing Example in StackBlitz
DESCRIPTION: This code snippet provides a markdown link to open the custom query parsing example in StackBlitz. It demonstrates how to embed a clickable StackBlitz link in documentation.

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/custom-query-parsing?file=src/App.tsx)

----------------------------------------

TITLE: Initiating Streamed Response in Loader with defer()
DESCRIPTION: Demonstrates how to use the defer() utility to initiate a streamed response in a loader function. Shows handling of both critical (awaited) and lazy (streamed) data.

LANGUAGE: tsx
CODE:
export async function loader() {
  return defer({
    // Await this, don't stream
    critical: await fetchCriticalData(),
    // Don't await this - stream it!
    lazy: fetchLazyData(),
  });
}

----------------------------------------

TITLE: Configuring tsconfig.json for React Router Type Generation
DESCRIPTION: Modify tsconfig.json to include generated types and set rootDirs for proper type resolution.

LANGUAGE: json
CODE:
{
  "include": [".react-router/types/**/*"],
  "compilerOptions": {
    "rootDirs": [".", "./.react-router/types"]
  }
}

----------------------------------------

TITLE: Installing React Router Server Package
DESCRIPTION: Command to install the React Router server package via npm package manager. This package provides Node.js server functionality for React Router applications.

LANGUAGE: sh
CODE:
npm install @react-router/serve

----------------------------------------

TITLE: useNavigation Hook Signature
DESCRIPTION: Shows the TypeScript type signature for the useNavigation hook, which returns a Navigation object.

LANGUAGE: tsx
CODE:
useNavigation(): Navigation

----------------------------------------

TITLE: Server-Side Route Module with Automatic Code Splitting in React Router
DESCRIPTION: This example shows a route module with server-side functions (loader, action, headers) and a client-side component. When built for the browser, only the Component will be included in the bundle, allowing for server-only code in other exports.

LANGUAGE: tsx
CODE:
export async function loader() {
  return { message: "hello" };
}

export async function action() {
  console.log(Date.now());
  return { ok: true };
}

export async function headers() {
  return { "Cache-Control": "max-age=300" };
}

export default function Component({ loaderData }) {
  return <div>{loaderData.message}</div>;
}

----------------------------------------

TITLE: Using useFetchers Hook in React Router
DESCRIPTION: Demonstrates how to use the useFetchers hook to access an array of all in-flight fetchers. This is useful for implementing optimistic UI updates based on pending fetcher states.

LANGUAGE: tsx
CODE:
import { useFetchers } from "react-router";

function SomeComponent() {
  const fetchers = useFetchers();
  fetchers[0].formData; // FormData
  fetchers[0].state; // etc.
  // ...
}

----------------------------------------

TITLE: Configuring File-Based Routes with Custom Root Directory
DESCRIPTION: Sets up file-based routing using a custom root directory ('file-routes') instead of the default 'app/routes'.

LANGUAGE: tsx
CODE:
import { type RouteConfig } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export default flatRoutes({
  rootDirectory: "file-routes",
}) satisfies RouteConfig;

----------------------------------------

TITLE: Installing @react-router/fs-routes Package for React Router
DESCRIPTION: This command installs the @react-router/fs-routes package, which enables file system routing conventions for React Router. It should be run in the project directory where React Router is being used.

LANGUAGE: sh
CODE:
npm install @react-router/fs-routes

----------------------------------------

TITLE: Custom Route ID Configuration in React Router
DESCRIPTION: Shows how to manually specify a custom route ID when defining routes in React Router.

LANGUAGE: tsx
CODE:
route("/", "containers/app.tsx", { id: "app" }})

----------------------------------------

TITLE: Explaining Supported Exports for HMR in React Router
DESCRIPTION: This snippet shows which exports are handled by the React Router Vite plugin for HMR compatibility. It includes route module exports and explains that user-defined exports will cause full reloads.

LANGUAGE: tsx
CODE:
// These exports are handled by the React Router Vite plugin
// to be HMR-compatible
export const meta = { title: "Home" }; // ✅
export const links = [
  { rel: "stylesheet", href: "style.css" },
]; // ✅

// These exports are removed by the React Router Vite plugin
// so they never affect HMR
export const headers = { "Cache-Control": "max-age=3600" }; // ✅
export const loader = async () => {}; // ✅
export const action = async () => {}; // ✅

// This is not a route module export, nor a component export,
// so it will cause a full reload for this route
export const myValue = "some value"; // ❌

export default function Route() {} // ✅

----------------------------------------

TITLE: Server-Only Data Loading in React Router
DESCRIPTION: This snippet demonstrates how to implement a route that only depends on server-side data loading using the loader function in React Router.

LANGUAGE: tsx
CODE:
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await getServerData(request);
  return data;
}

export default function Component({
  loaderData, // (1) - server data
}: Route.ComponentProps) {
  return <>...</>;
}

----------------------------------------

TITLE: Installing React Router Express Package
DESCRIPTION: This command installs the @react-router/express package using npm. This package is used to handle React Router requests in an Express server environment.

LANGUAGE: sh
CODE:
npm install @react-router/express

----------------------------------------

TITLE: Configuring File-Based Routes in React Router
DESCRIPTION: Sets up file-based routing using the flatRoutes function from @react-router/fs-routes. This configuration looks for route files in the app/routes directory by default.

LANGUAGE: tsx
CODE:
import { type RouteConfig } from "@react-router/dev/routes";
import { flatRoutes } from "@react-router/fs-routes";

export default flatRoutes() satisfies RouteConfig;

----------------------------------------

TITLE: Updating Import Statement for React Router v6
DESCRIPTION: This code snippet demonstrates how to update import statements when upgrading to React Router v6. It shows the removal of the '-dom' suffix from the import source.

LANGUAGE: diff
CODE:
-import { Routes } from "react-router-dom"
+import { Routes } from "react-router"

----------------------------------------

TITLE: useRoutes Hook Function Signature
DESCRIPTION: Function signature for the useRoutes hook showing its parameters and return type. The hook accepts a routes configuration object and an optional location argument.

LANGUAGE: tsx
CODE:
useRoutes(routes, locationArg): undefined

----------------------------------------

TITLE: Enhanced Search Box with Loading State
DESCRIPTION: Demonstrates how to enhance the search box with loading states using useNavigation hook while maintaining progressive enhancement.

LANGUAGE: tsx
CODE:
import { useNavigation } from "react-router";

export function SearchBox() {
  const navigation = useNavigation();
  const isSearching =
    navigation.location.pathname === "/search";

  return (
    <Form method="get" action="/search">
      <input type="search" name="query" />
      {isSearching ? <Spinner /> : <SearchIcon />}
    </Form>
  );
}

----------------------------------------

TITLE: Server Implementation for SSR
DESCRIPTION: Server implementation supporting both development and production modes for server-side rendering of React Router applications.

LANGUAGE: javascript
CODE:
// server.js mentioned but code not provided in the text

----------------------------------------

TITLE: Installing @react-router/fs-routes Package
DESCRIPTION: Command to install the @react-router/fs-routes package using npm.

LANGUAGE: shellscript
CODE:
npm i @react-router/fs-routes

----------------------------------------

TITLE: Creating Custom Database Session Storage in TypeScript
DESCRIPTION: This example shows how to create a custom session storage using a database. It implements the required CRUD methods for managing session data and integrates with React Router's createSessionStorage function.

LANGUAGE: typescript
CODE:
import { createSessionStorage } from "react-router";

function createDatabaseSessionStorage({
  cookie,
  host,
  port,
}) {
  const db = createDatabaseClient(host, port);

  return createSessionStorage({
    cookie,
    async createData(data, expires) {
      const id = await db.insert(data);
      return id;
    },
    async readData(id) {
      return (await db.select(id)) || null;
    },
    async updateData(id, data, expires) {
      await db.update(id, data);
    },
    async deleteData(id) {
      await db.delete(id);
    },
  });
}

const { getSession, commitSession, destroySession } =
  createDatabaseSessionStorage({
    host: "localhost",
    port: 1234,
    cookie: {
      name: "__session",
      sameSite: "lax",
    },
  });

----------------------------------------

TITLE: Defining createRoutesStub Function Signature in React Router
DESCRIPTION: This snippet shows the TypeScript signature for the createRoutesStub function in React Router. It takes 'routes' and 'context' parameters and returns undefined.

LANGUAGE: tsx
CODE:
createRoutesStub(routes, context): undefined

----------------------------------------

TITLE: Using Generated Route Types in React Router Component
DESCRIPTION: Demonstration of using auto-generated route types for loader arguments and component props in a React Router route module.

LANGUAGE: typescript
CODE:
import type { Route } from "./+types/product";

export function loader({ params }: Route.LoaderArgs) {
  return { planet: `world #${params.id}` };
}

export default function Component({
  loaderData,
}: Route.ComponentProps) {
  return <h1>Hello, {loaderData.planet}!</h1>;
}

----------------------------------------

TITLE: Styling View Transitions for an Image Gallery in CSS
DESCRIPTION: Defines CSS styles for view transitions in an image gallery, including layout styles and transition names for smooth animations between routes.

LANGUAGE: css
CODE:
/* Layout styles for the image grid */
.image-list > div {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  column-gap: 10px;
}

.image-list h1 {
  font-size: 2rem;
  font-weight: 600;
}

.image-list img {
  max-width: 100%;
  contain: layout;
}

.image-list p {
  width: fit-content;
}

/* Assign transition names to elements during navigation */
.image-list a.transitioning img {
  view-transition-name: image-expand;
}

.image-list a.transitioning p {
  view-transition-name: image-title;
}

----------------------------------------

TITLE: Initializing Memory Router in React Router
DESCRIPTION: Function signature for creating a memory-based router in React Router. Returns a DataRouter instance that manages routing state in memory rather than using browser history.

LANGUAGE: tsx
CODE:
createMemoryRouter(routes, opts): DataRouter

----------------------------------------

TITLE: Revealing Server Entry in React Router CLI
DESCRIPTION: Command to reveal the server entry file (entry.server.tsx) in your application directory if using a default entry.

LANGUAGE: shellscript
CODE:
react-router reveal

----------------------------------------

TITLE: Creating Hash Router TypeScript Function Signature
DESCRIPTION: Function signature for createHashRouter that creates a new hash-based router instance. The function takes routes and options parameters and returns a DataRouter object.

LANGUAGE: tsx
CODE:
createHashRouter(routes, opts): DataRouter

----------------------------------------

TITLE: Creating URLSearchParams with Arrays - React Router Example
DESCRIPTION: Example showing the traditional URLSearchParams array initialization method.

LANGUAGE: tsx
CODE:
let searchParams = new URLSearchParams([
  ["sort", "name"],
  ["sort", "price"],
]);

----------------------------------------

TITLE: Creating Default Route Component
DESCRIPTION: Example of a basic route component implementation using the default export.

LANGUAGE: tsx
CODE:
export default function MyRouteComponent() {
  return (
    <div>
      <h1>Look ma!</h1>
      <p>
        I'm still using React Router after like 10 years.
      </p>
    </div>
  );
}

----------------------------------------

TITLE: Link Discovery Configuration
DESCRIPTION: Shows how to configure link discovery behavior with the discover prop.

LANGUAGE: tsx
CODE:
<Link discover="render" />

----------------------------------------

TITLE: Optimizing Expensive Middleware in React Router
DESCRIPTION: Demonstrates how to optimize expensive middleware operations in React Router by caching results in the context to avoid unnecessary re-execution during action and loader chains.

LANGUAGE: typescript
CODE:
const expensiveMiddleware: Route.unstable_ClientMiddleware = async function ({
  request,
  context,
}) {
  // Guard this such that we use the existing value if it exists from the action pass
  context.something = context.something ?? (await getExpensiveValue());
};

----------------------------------------

TITLE: Implementing PDF Resource Route Handler in TypeScript
DESCRIPTION: Shows how to implement a resource route loader that generates and serves a PDF file. The absence of a default export makes this a resource route.

LANGUAGE: typescript
CODE:
import type { Route } from "./+types/pdf-report";

export async function loader({ params }: Route.LoaderArgs) {
  const report = await getReport(params.id);
  const pdf = await generateReportPDF(report);
  return new Response(pdf, {
    status: 200,
    headers: {
      "Content-Type": "application/pdf",
    },
  });
}

----------------------------------------

TITLE: Defining createStaticHandler Function Signature in TypeScript
DESCRIPTION: This code snippet shows the function signature for createStaticHandler. It takes routes and options as parameters and returns a StaticHandler object.

LANGUAGE: tsx
CODE:
createStaticHandler(routes, opts): StaticHandler

----------------------------------------

TITLE: Preserving Previous Location in React Router Authentication
DESCRIPTION: This snippet shows how to use location.state to preserve the user's previous location during the authentication process. This allows redirecting the user back to their intended destination after successful login.

LANGUAGE: JavaScript
CODE:
import { useLocation } from 'react-router-dom';

const location = useLocation();
const { from } = location.state || { from: { pathname: "/" } };

// After successful login
navigate(from);

----------------------------------------

TITLE: Basic Search Box Implementation
DESCRIPTION: Shows a simple search form implementation that works without JavaScript using standard HTML form features.

LANGUAGE: tsx
CODE:
export function SearchBox() {
  return (
    <Form method="get" action="/search">
      <input type="search" name="query" />
      <SearchIcon />
    </Form>
  );
}

----------------------------------------

TITLE: Linking to Resource Routes in React
DESCRIPTION: Example of how to properly link to resource routes using the Link component with reloadDocument prop to trigger a full page reload.

LANGUAGE: tsx
CODE:
<Link reloadDocument to="/reports/pdf/123">
  View as PDF
</Link>

----------------------------------------

TITLE: Simplified Middleware Implementation in React Router
DESCRIPTION: Demonstrates a simplified middleware implementation in React Router that only performs logic before the request, without calling the next function explicitly.

LANGUAGE: typescript
CODE:
const myMiddleware: Route.unstable_MiddlewareFunction = async ({
  request,
  context,
}) => {
  context.user = await getUser(request);
  // Look ma, no next!
};

----------------------------------------

TITLE: Handling Multiple HTTP Methods in Resource Routes
DESCRIPTION: Implementation of a resource route that handles different HTTP methods using loader for GET requests and action for POST, PUT, PATCH, and DELETE requests.

LANGUAGE: typescript
CODE:
import type { Route } from "./+types/resource";

export function loader(_: Route.LoaderArgs) {
  return Response.json({ message: "I handle GET" });
}

export function action(_: Route.ActionArgs) {
  return Response.json({
    message: "I handle everything else",
  });
}

----------------------------------------

TITLE: GeneratePath Function Signature in React Router
DESCRIPTION: Function signature showing the generatePath method that takes an originalPath and params arguments to return an interpolated path string.

LANGUAGE: tsx
CODE:
generatePath(originalPath, params): string

----------------------------------------

TITLE: Configuring Lazy Loading in React Router
DESCRIPTION: Example implementation showing how to lazily load route components and route hierarchies using React.lazy() and dynamic imports to improve initial page load performance.

LANGUAGE: typescript
CODE:
// Note: No actual code snippets were provided in the input text, but the documentation refers to:
// - React.lazy()
// - dynamic import()

----------------------------------------

TITLE: React Router Client Entry Configuration
DESCRIPTION: Client-side entry point setup using React Router's HydratedRouter component.

LANGUAGE: tsx
CODE:
import React from "react";
import ReactDOM from "react-dom/client";
import { HydratedRouter } from "react-router/dom";

ReactDOM.hydrateRoot(
  document,
  <React.StrictMode>
    <HydratedRouter />
  </React.StrictMode>
);

----------------------------------------

TITLE: Initializing Remix Project with CLI Options
DESCRIPTION: This snippet demonstrates the CLI prompts when creating a new Remix project, including the option to choose between TypeScript and JavaScript.

LANGUAGE: sh
CODE:
❯ npx create-remix@latest
? Where would you like to create your app? ./my-remix-app
? What type of app do you want to create? Just the basics
? Where do you want to deploy? Choose Remix App Server if you're unsure; it's easy to change deployment targets. Remix App Server
? TypeScript or JavaScript? (Use arrow keys)
❯ TypeScript
  JavaScript

----------------------------------------

TITLE: Extending AppLoadContext Type in React Router
DESCRIPTION: Define custom types for the app's context by extending the AppLoadContext interface.

LANGUAGE: typescript
CODE:
import "react-router";
declare module "react-router" {
  interface AppLoadContext {
    // add context properties here
  }
}

----------------------------------------

TITLE: Resolving URL Paths with React Router href Function
DESCRIPTION: Demonstrates how to use the href function to resolve URL paths with optional and required parameters. The function accepts a route pattern and an object containing parameter values, returning the fully resolved path.

LANGUAGE: tsx
CODE:
const h = href("/:lang?/about", { lang: "en" })
// -> `/en/about`

<Link to={href("/products/:id", { id: "abc123" })} />

----------------------------------------

TITLE: Using useRoutes() Hook in React Router
DESCRIPTION: Example of route configuration using plain JavaScript objects with the useRoutes() hook, which provides an alternative to JSX-based route definitions. This approach can be particularly useful when working with route configurations that come from data structures or APIs.

LANGUAGE: typescript
CODE:
// No code snippets provided in the original text

----------------------------------------

TITLE: Implementing Form Validation Action in React Router
DESCRIPTION: Defines a server action for form validation, checking email and password fields and returning errors or redirecting on success.

LANGUAGE: tsx
CODE:
import type { Route } from "./+types/signup";
import { redirect, useFetcher, data } from "react-router";

export async function action({
  request,
}: Route.ActionArgs) {
  const formData = await request.formData();
  const email = String(formData.get("email"));
  const password = String(formData.get("password"));

  const errors = {};

  if (!email.includes("@")) {
    errors.email = "Invalid email address";
  }

  if (password.length < 12) {
    errors.password =
      "Password should be at least 12 characters";
  }

  if (Object.keys(errors).length > 0) {
    return data({ errors }, { status: 400 });
  }

  // Redirect to dashboard if validation is successful
  return redirect("/dashboard");
}

----------------------------------------

TITLE: Adding Type Generation to npm Scripts
DESCRIPTION: Update package.json scripts to generate types before running type checking.

LANGUAGE: json
CODE:
{
  "scripts": {
    "typecheck": "react-router typegen && tsc"
  }
}

----------------------------------------

TITLE: Defining Navigation State Structure in TypeScript
DESCRIPTION: Demonstrates the new structure for navigation state in React Router, including properties for form submission data.

LANGUAGE: typescript
CODE:
{
  state: "idle" | "loading" | "submitting";
  location: Location;
  formMethod?: FormMethod;
  formAction?: string;
  formEncType?: FormEncType;
  formData?: FormData;
}

----------------------------------------

TITLE: Static Site Generation Configuration
DESCRIPTION: Configuration example for static site generation without runtime SSR, including pre-rendering settings.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false, // disable runtime server rendering
  prerender: true, // pre-render all static routes
} satisfies Config;

----------------------------------------

TITLE: Defining matchRoutes Function Signature in React Router
DESCRIPTION: This code snippet shows the function signature for matchRoutes. It takes routes, locationArg, and basename as parameters and returns undefined.

LANGUAGE: tsx
CODE:
matchRoutes(routes, locationArg, basename): undefined

----------------------------------------

TITLE: Using useSearchParams Hook in React Router
DESCRIPTION: Example demonstrating how to use the useSearchParams hook in React Router to read and manipulate URL query strings. The hook is similar to useNavigate but specifically for handling the search portion of URLs.



----------------------------------------

TITLE: Implementing shouldRevalidate Function in TypeScript
DESCRIPTION: Shows how to implement a shouldRevalidate function with custom logic and fallback to default behavior.

LANGUAGE: typescript
CODE:
function shouldRevalidate({ defaultShouldRevalidate }) {
  // Don't revalidate for this edge case
  if (someEdgeCase()) {
    return false;
  }

  // Otherwise, do what we would have done by default
  return defaultShouldRevalidate;
}

----------------------------------------

TITLE: Accessing Streamed Data with useLoaderData
DESCRIPTION: Shows how to access streamed data in components using useLoaderData hook, where critical data is resolved and lazy data remains as a Promise.

LANGUAGE: tsx
CODE:
function Component() {
  const data = useLoaderData();
  // data.critical is a resolved value
  // data.lazy is a Promise
}

----------------------------------------

TITLE: Implementing Data Loading for Pre-rendered Routes
DESCRIPTION: Shows how to implement route loader functions that work with both pre-rendering and server rendering scenarios.

LANGUAGE: tsx
CODE:
export async function loader({ request, params }) {
  let post = await getPost(params.slug);
  return post;
}

export function Post({ loaderData }) {
  return <div>{loaderData.title}</div>;
}

----------------------------------------

TITLE: Defining React Router 'redirect' Function Signature
DESCRIPTION: The signature of the 'redirect' function in React Router, which creates a redirect response. It takes a URL and an optional init object as parameters, and returns a Response object.

LANGUAGE: tsx
CODE:
redirect(url, init): Response

----------------------------------------

TITLE: Setting up Server-side Rendering with React Router in TypeScript
DESCRIPTION: This code snippet demonstrates the server-side setup for rendering a React Router application. It uses createStaticHandler for handling requests and DataStaticRouter for rendering the app in the correct state.

LANGUAGE: tsx
CODE:
// src/entry.server.tsx
import { createStaticHandler, DataStaticRouter } from 'react-router-dom/server';
import { Request } from 'express';

const handler = createStaticHandler(routes);

async function handleRequest(req: Request) {
  const fetchRequest = createFetchRequest(req);
  const context = await handler.query(fetchRequest);
  
  return (
    <DataStaticRouter context={context}>
      {/* App components */}
    </DataStaticRouter>
  );
}

----------------------------------------

TITLE: Signature of useAsyncValue Hook in React Router
DESCRIPTION: Shows the TypeScript function signature for the useAsyncValue hook, which returns an unknown type representing the resolved promise value.

LANGUAGE: tsx
CODE:
useAsyncValue(): unknown

----------------------------------------

TITLE: Creating Canonical Link Tag for SEO in React Router
DESCRIPTION: This example shows how to use the meta function to generate a canonical link tag. It specifies the tagName as 'link' and sets the rel and href attributes for the canonical URL.

LANGUAGE: tsx
CODE:
export function meta() {
  return [
    {
      tagName: "link",
      rel: "canonical",
      href: "https://reactrouter.com",
    },
  ];
}

----------------------------------------

TITLE: Sample Sequential Data Strategy Implementation
DESCRIPTION: Example implementation of a data strategy that processes requests sequentially, showing how to handle both loaders and actions.

LANGUAGE: javascript
CODE:
async function dataStrategy({ request, params, matches, type }) {
  let results = [];
  for (let match of matches) {
    let result = await match.route[type]({ request, params });
    result.push(result);
  }
  return results;
}

----------------------------------------

TITLE: Implementing Server and Client Data Loading in React Router
DESCRIPTION: This snippet demonstrates how to load data from the server on initial load and from the client on subsequent loads. It uses both loader and clientLoader functions to fetch data from different sources based on the context.

LANGUAGE: tsx
CODE:
export async function loader({
  request,
}: Route.LoaderArgs) {
  const data = await fetchApiFromServer({ request }); // (1)
  return data;
}

export async function clientLoader({
  request,
}: Route.ClientLoaderArgs) {
  const data = await fetchApiFromClient({ request }); // (2)
  return data;
}

----------------------------------------

TITLE: Returning Headers from Loader or Action
DESCRIPTION: Illustrates how to explicitly return headers from a loader or action using the headers export. This is necessary as headers from loaders and actions are not sent automatically.

LANGUAGE: tsx
CODE:
export function headers({
  actionHeaders,
  loaderHeaders,
}: HeadersArgs) {
  return actionHeaders ? actionHeaders : loaderHeaders;
}

----------------------------------------

TITLE: Enabling v7_relativeSplatPath Flag in createBrowserRouter
DESCRIPTION: Code snippet demonstrating how to enable the v7_relativeSplatPath future flag when using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, {
  future: {
    v7_relativeSplatPath: true,
  },
});

----------------------------------------

TITLE: Illustrating Named Function Component Requirements for React Fast Refresh
DESCRIPTION: This snippet demonstrates that function components must be named for React Fast Refresh to track changes. Anonymous function components are not supported.

LANGUAGE: tsx
CODE:
export default () => {}; // ❌
export default function () {} // ❌

const ComponentA = () => {};
export default ComponentA; // ✅

export default function ComponentB() {} // ✅

----------------------------------------

TITLE: Defining Data Strategy Function Interface
DESCRIPTION: TypeScript interface definitions for the dataStrategy function and its arguments, showing the core structure for handling data fetching.

LANGUAGE: typescript
CODE:
function dataStrategy(arg: DataStrategyFunctionArgs): DataResult[];

interface DataStrategyFunctionArgs<Context = any>
  extends DataFunctionArgs<Context> {
  matches: AgnosticDataStrategyMatch[];
}

interface DataFunctionArgs<Context> {
  request: Request;
  params: Params;
  context?: Context;
}

----------------------------------------

TITLE: Framework Mode Route Configuration
DESCRIPTION: Route configuration in Framework Mode showing typesafe routing with index and parametrized routes.

LANGUAGE: ts
CODE:
import { index, route } from "@react-router/dev/routes";

export default [
  index("./home.tsx"),
  route("products/:pid", "./product.tsx"),
];

----------------------------------------

TITLE: Appending Headers to Parent Headers
DESCRIPTION: Demonstrates how to append headers in a child route while preserving the parent headers. This method avoids overwriting important headers set by the parent.

LANGUAGE: tsx
CODE:
export function headers({ parentHeaders }: HeadersArgs) {
  parentHeaders.append(
    "Permissions-Policy: geolocation=()"
  );
  return parentHeaders;
}

----------------------------------------

TITLE: Enabling v7_skipActionErrorRevalidation Flag
DESCRIPTION: Code snippet showing how to enable the v7_skipActionErrorRevalidation future flag when using createBrowserRouter.

LANGUAGE: tsx
CODE:
createBrowserRouter(routes, {
  future: {
    v7_skipActionErrorRevalidation: true,
  },
});

----------------------------------------

TITLE: Defining Replace Function Signature in React Router (TSX)
DESCRIPTION: This code snippet shows the function signature for the 'replace' function in React Router. It takes a URL and an optional init parameter, returning a Response object.

LANGUAGE: tsx
CODE:
replace(url, init): Response

----------------------------------------

TITLE: Creating New React Router Project
DESCRIPTION: Creates a new React Router project using the official template via npx create-react-router CLI command.

LANGUAGE: shellscript
CODE:
npx create-react-router@latest my-react-router-app

----------------------------------------

TITLE: Configuring VS Code Settings for Deno
DESCRIPTION: This JSON snippet shows the VS Code settings to enable Deno and specify the import map for resolving NPM imports in Deno. It enables the Deno extension and points to the custom import map file.

LANGUAGE: json
CODE:
{
  "deno.enable": true,
  "deno.importMap": "./.vscode/resolve_npm_imports_in_deno.json"
}

----------------------------------------

TITLE: Creating a React Project with Vite
DESCRIPTION: Command to create a new React project using Vite as the build tool.

LANGUAGE: shellscript
CODE:
npx create-vite@latest

----------------------------------------

TITLE: Generating JSON-LD Script Tag for SEO in React Router
DESCRIPTION: This snippet demonstrates how to use the meta function to create a JSON-LD script tag for structured data. It creates an Organization schema for React Router's website.

LANGUAGE: tsx
CODE:
export function meta() {
  return [
    {
      "script:ld+json": {
        "@context": "https://schema.org",
        "@type": "Organization",
        name: "React Router",
        url: "https://reactrouter.com",
      },
    },
  ];
}

----------------------------------------

TITLE: Updating Action to Avoid Mutations in Error Scenarios
DESCRIPTION: Code snippet demonstrating how to update an action function to avoid mutations in error scenarios.

LANGUAGE: js
CODE:
// Before
async function action() {
  await mutateSomeData();
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  await mutateOtherData();
  // ...
}

// After
async function action() {
  if (detectError()) {
    throw new Response(error, { status: 400 });
  }
  // All data is now mutated after validations
  await mutateSomeData();
  await mutateOtherData();
  // ...
}

----------------------------------------

TITLE: Styling View Transitions for Image Detail View in CSS
DESCRIPTION: Defines CSS styles for the image detail view, matching transition names from the list view for consistent animations.

LANGUAGE: css
CODE:
/* Match transition names from the list view */
.image-detail h1 {
  font-size: 2rem;
  font-weight: 600;
  width: fit-content;
  view-transition-name: image-title;
}

.image-detail img {
  max-width: 100%;
  contain: layout;
  view-transition-name: image-expand;
}

----------------------------------------

TITLE: Implementing Form Submission with useActionData in React Router
DESCRIPTION: Demonstrates how to use useActionData hook to handle form submissions and display response data. The example shows a form that accepts a visitor's name and displays a greeting message after submission.

LANGUAGE: tsx
CODE:
import { Form, useActionData } from "react-router";

export async function action({ request }) {
  const body = await request.formData();
  const name = body.get("visitorsName");
  return { message: `Hello, ${name}` };
}

export default function Invoices() {
  const data = useActionData();
  return (
    <Form method="post">
      <input type="text" name="visitorsName" />
      {data ? data.message : "Waiting..."}
    </Form>
  );
}

----------------------------------------

TITLE: Implementing Form Submission with useActionData in React Router
DESCRIPTION: Demonstrates how to use useActionData hook to handle form submissions and display response data. The example shows a form that accepts a visitor's name and displays a greeting message after submission.

LANGUAGE: tsx
CODE:
import { Form, useActionData } from "react-router";

export async function action({ request }) {
  const body = await request.formData();
  const name = body.get("visitorsName");
  return { message: `Hello, ${name}` };
}

export default function Invoices() {
  const data = useActionData();
  return (
    <Form method="post">
      <input type="text" name="visitorsName" />
      {data ? data.message : "Waiting..."}
    </Form>
  );
}

----------------------------------------

TITLE: Implementing Form Submission with useActionData in React Router
DESCRIPTION: Demonstrates how to use useActionData hook to handle form submissions and display response data. The example shows a form that accepts a visitor's name and displays a greeting message after submission.

LANGUAGE: tsx
CODE:
import { Form, useActionData } from "react-router";

export async function action({ request }) {
  const body = await request.formData();
  const name = body.get("visitorsName");
  return { message: `Hello, ${name}` };
}

export default function Invoices() {
  const data = useActionData();
  return (
    <Form method="post">
      <input type="text" name="visitorsName" />
      {data ? data.message : "Waiting..."}
    </Form>
  );
}

----------------------------------------

TITLE: Bootstrapping React Project with Vite
DESCRIPTION: Command to create a new React project using Vite as the bundler.

LANGUAGE: shellscript
CODE:
npx create-vite@latest

----------------------------------------

TITLE: SPA Fallback Configuration with Pre-rendering
DESCRIPTION: Shows how to configure pre-rendering with SPA fallback for specific routes while maintaining static generation for others.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false,

  // SPA fallback will be written to build/client/index.html
  prerender: ["/about-us"],

  // SPA fallback will be written to build/client/__spa-fallback.html
  prerender: ["/", "/about-us"],
} satisfies Config;

----------------------------------------

TITLE: Updating Imports for React Router v7
DESCRIPTION: Diff showing how to update imports from react-router-dom to react-router in v7.

LANGUAGE: diff
CODE:
-import { useLocation } from "react-router-dom";
+import { useLocation } from "react-router";

----------------------------------------

TITLE: Configuring Local File Storage for Avatars
DESCRIPTION: Creates a storage configuration file that exports a LocalFileStorage instance and a function to generate storage keys for user avatars.

LANGUAGE: typescript
CODE:
import { LocalFileStorage } from "@mjackson/file-storage/local";

export const fileStorage = new LocalFileStorage(
  "./uploads/avatars"
);

export function getStorageKey(userId: string) {
  return `user-${userId}-avatar`;
}

----------------------------------------

TITLE: Creating an Image Gallery Route with View Transitions in React
DESCRIPTION: Illustrates the creation of an image gallery route that implements view transitions for smooth navigation between images.

LANGUAGE: tsx
CODE:
import { NavLink } from "react-router";

export const images = [
  "https://remix.run/blog-images/headers/the-future-is-now.jpg",
  "https://remix.run/blog-images/headers/waterfall.jpg",
  "https://remix.run/blog-images/headers/webpack.png",
  // ... more images ...
];

export default function ImageGalleryRoute() {
  return (
    <div className="image-list">
      <h1>Image List</h1>
      <div>
        {images.map((src, idx) => (
          <NavLink
            key={src}
            to={`/image/${idx}`}
            viewTransition // Enable view transitions for this link
          >
            <p>Image Number {idx}</p>
            <img
              className="max-w-full contain-layout"
              src={src}
            />
          </NavLink>
        ))}
      </div>
    </div>
  );
}

----------------------------------------

TITLE: useFetcher Hook Type Signature
DESCRIPTION: Shows the TypeScript type signature for the useFetcher hook, indicating it returns a FetcherWithComponents object.

LANGUAGE: tsx
CODE:
useFetcher(options): FetcherWithComponents

----------------------------------------

TITLE: Enhanced Add to Cart with Client-side Features
DESCRIPTION: Shows how to enhance the add-to-cart functionality with client-side features like loading states using useFetcher, while maintaining progressive enhancement.

LANGUAGE: tsx
CODE:
import { useFetcher } from "react-router";

export function AddToCart({ id }) {
  const fetcher = useFetcher();

  return (
    <fetcher.Form method="post" action="/add-to-cart">
      <input name="id" value={id} />
      <button type="submit">
        {fetcher.state === "submitting"
          ? "Adding..."
          : "Add To Cart"}
      </button>
    </fetcher.Form>
  );
}

----------------------------------------

TITLE: Defining Basic Resource Route Path in TypeScript
DESCRIPTION: Demonstrates how to define a route path for a PDF resource route using TypeScript.

LANGUAGE: typescript
CODE:
route("/reports/pdf/:id", "pdf-report.ts");

----------------------------------------

TITLE: Updating Dependencies in React Router v7
DESCRIPTION: Updates import statements to use React Router v7 packages instead of Remix packages. Most shared APIs are now imported from 'react-router'.

LANGUAGE: typescript
CODE:
-import { redirect } from "@remix-run/node";
+import { redirect } from "react-router";

----------------------------------------

TITLE: Updating Routes Configuration
DESCRIPTION: Updates the routes configuration file to use React Router v7 imports and syntax.

LANGUAGE: typescript
CODE:
// app/routes.ts
-import { type RouteConfig } from "@remix-run/route-config";
-import { flatRoutes } from "@remix-run/fs-routes";
-import { remixRoutesOptionAdapter } from "@remix-run/routes-option-adapter";
+import { type RouteConfig } from "@react-router/dev/routes";
+import { flatRoutes } from "@react-router/fs-routes";
+import { remixRoutesOptionAdapter } from "@react-router/remix-routes-option-adapter";

export default [
  // however your routes are defined
] satisfies RouteConfig;

----------------------------------------

TITLE: Using Prefetch Prop with NavLink for Data and Module Prefetching
DESCRIPTION: Shows how to use the prefetch prop to define data and module prefetching behavior for NavLink.

LANGUAGE: tsx
CODE:
<Link prefetch="intent" />

----------------------------------------

TITLE: Rendering React Router App with SSR in TypeScript
DESCRIPTION: This code snippet shows how to set up the client-side entry point for a server-side rendered React Router application. It uses DataBrowserRouter for routing and ReactDOM.hydrateRoot() for hydration.

LANGUAGE: tsx
CODE:
// src/entry.client.tsx
import { DataBrowserRouter } from 'react-router-dom';
import ReactDOM from 'react-dom';

ReactDOM.hydrateRoot(
  document.getElementById('root'),
  <DataBrowserRouter>
    {/* App components */}
  </DataBrowserRouter>
);

----------------------------------------

TITLE: Adding .react-router/ to .gitignore
DESCRIPTION: Add the .react-router/ directory to .gitignore to exclude generated types from version control.

LANGUAGE: txt
CODE:
.react-router/

----------------------------------------

TITLE: Running Codemod for Automated Updates
DESCRIPTION: Executes a codemod to automatically update packages and imports for the React Router v7 upgrade.

LANGUAGE: shellscript
CODE:
npx codemod remix/2/react-router/upgrade

----------------------------------------

TITLE: Implementing Server-Side Rendering Handler
DESCRIPTION: Complete server-side rendering implementation including context creation, routing, and response handling.

LANGUAGE: tsx
CODE:
import { renderToString } from "react-dom/server";
import {
  createStaticHandler,
  createStaticRouter,
  StaticRouterProvider,
} from "react-router";

import routes from "./some-routes.js";

let { query, dataRoutes } = createStaticHandler(routes);

export async function handler(request: Request) {
  let context = await query(request);

  if (context instanceof Response) {
    return context;
  }

  let router = createStaticRouter(dataRoutes, context);

  let html = renderToString(
    <StaticRouterProvider
      router={router}
      context={context}
    />
  );

  let leaf = context.matches[context.matches.length - 1];
  let actionHeaders = context.actionHeaders[leaf.route.id];
  let loaderHeaders = context.loaderHeaders[leaf.route.id];
  let headers = new Headers(actionHeaders);
  if (loaderHeaders) {
    for (let [key, value] of loaderHeaders.entries()) {
      headers.append(key, value);
    }
  }

  headers.set("Content-Type", "text/html; charset=utf-8");

  return new Response(`<!DOCTYPE html>${html}`, {
    status: context.statusCode,
    headers,
  });
}

----------------------------------------

TITLE: Installing form-data-parser Package
DESCRIPTION: Installs the form-data-parser package which provides streaming support for handling file uploads.

LANGUAGE: shellscript
CODE:
npm i @mjackson/form-data-parser

----------------------------------------

TITLE: CSS Styling for NavLink States
DESCRIPTION: Demonstrates CSS classes for styling NavLink in different states: active, pending, and transitioning.

LANGUAGE: css
CODE:
a.active {
  color: red;
}
a.pending {
  color: blue;
}
a.transitioning {
  view-transition-name: my-transition;
}

----------------------------------------

TITLE: Installing @react-router/remix-routes-option-adapter via npm
DESCRIPTION: This command installs the @react-router/remix-routes-option-adapter package using npm. The package is an adapter for Remix's 'routes' config option, intended for use within 'routes.ts' files in React Router projects.

LANGUAGE: sh
CODE:
npm install @react-router/remix-routes-option-adapter

----------------------------------------

TITLE: Configuring verbatimModuleSyntax in tsconfig.json
DESCRIPTION: Enable verbatimModuleSyntax in tsconfig.json for automatic type-only imports.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "verbatimModuleSyntax": true
  }
}

----------------------------------------

TITLE: Migrating a Route to a Route Module
DESCRIPTION: Example of migrating an existing route to use the new Route Module API, including adding a clientLoader function.

LANGUAGE: typescript
CODE:
import {
  type RouteConfig,
  route,
} from "@react-router/dev/routes";

export default [
  route("/about", "./pages/about.tsx"),
  route("*?", "catchall.tsx"),
] satisfies RouteConfig;

LANGUAGE: tsx
CODE:
export async function clientLoader() {
  // you can now fetch data here
  return {
    title: "About page",
  };
}

export default function Component({ loaderData }) {
  return <h1>{loaderData.title}</h1>;
}

----------------------------------------

TITLE: Implementing React Router Base Component
DESCRIPTION: The Router component serves as the base router component that provides location context to the app. It's recommended to use environment-specific routers like BrowserRouter or StaticRouter instead of using Router directly.

LANGUAGE: jsx
CODE:
<Router>
  {/* App components */}
</Router>

----------------------------------------

TITLE: Illustrating Hook Destructuring Impact on React Fast Refresh
DESCRIPTION: This snippet demonstrates how changing the destructured key of a hook's return value can cause React Fast Refresh to lose component state.

LANGUAGE: tsx
CODE:
export default function Component({ loaderData }) {
  const { pet } = useMyCustomHook();
  return (
    <div>
      <input />
      <p>My dog's name is {pet.name}!</p>
    </div>
  );
}

----------------------------------------

TITLE: Installing React Router Dev Tools Package
DESCRIPTION: NPM installation command for adding the React Router development tools as a dev dependency. This package enables framework features like server-side rendering, code splitting, and hot module replacement through bundler integration.

LANGUAGE: sh
CODE:
npm install @react-router/dev --save-dev

----------------------------------------

TITLE: Setting 404 Status Code in React Router Loader
DESCRIPTION: This code snippet demonstrates how to set a 404 status code in a React Router loader function using the 'data' function. It checks for the existence of a project and throws a 404 status if not found.

LANGUAGE: tsx
CODE:
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { data } from "react-router";
import { fakeDb } from "../db";

export async function loader({ params }: Route.ActionArgs) {
  let project = await fakeDb.getProject(params.id);
  if (!project) {
    // throw to ErrorBoundary
    throw data(null, { status: 404 });
  }
  return project;
}

----------------------------------------

TITLE: Enabling SSR and Pre-rendering
DESCRIPTION: Configuring the React Router config file to enable server-side rendering and static pre-rendering for specific routes.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  ssr: true,
  async prerender() {
    return ["/", "/about", "/contact"];
  },
} satisfies Config;

----------------------------------------

TITLE: Using useRouteLoaderData Hook in React Router
DESCRIPTION: Demonstrates basic usage of useRouteLoaderData hook to access loader data from a root route. Shows how to destructure and use loader data within a component.

LANGUAGE: tsx
CODE:
import { useRouteLoaderData } from "react-router";

function SomeComponent() {
  const { user } = useRouteLoaderData("root");
}

----------------------------------------

TITLE: Implementing Root Component in React Router
DESCRIPTION: Required root component that manages the document structure and renders document-level React Router components.

LANGUAGE: tsx
CODE:
import type { LinksFunction } from "react-router";
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

import "./global-styles.css";

export default function App() {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />

        {/* All `meta` exports on all routes will render here */}
        <Meta />

        {/* All `link` exports on all routes will render here */}
        <Links />
      </head>
      <body>
        {/* Child routes render here */}
        <Outlet />

        {/* Manages scroll position for client-side transitions */}
        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}
        <ScrollRestoration />

        {/* Script tags go here */}
        {/* If you use a nonce-based content security policy for scripts, you must provide the `nonce` prop. Otherwise, omit the nonce prop as shown here. */}
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Implementing Async Loader with Promise Return for React Router
DESCRIPTION: Demonstrates how to structure a loader function that returns both critical and non-critical data promises. Critical data is awaited while non-critical data is passed as a promise to enable streaming.

LANGUAGE: tsx
CODE:
export async function loader({}: Route.LoaderArgs) {
  // note this is NOT awaited
  let nonCriticalData = new Promise((res) =>
    setTimeout(() => res("non-critical"), 5000)
  );

  let criticalData = await new Promise((res) =>
    setTimeout(() => res("critical"), 300)
  );

  return { nonCriticalData, criticalData };
}

----------------------------------------

TITLE: Creating Route Module in TypeScript React
DESCRIPTION: Example of converting a route component into a route module with client loader and component exports.

LANGUAGE: tsx
CODE:
export async function clientLoader() {
  return {
    title: "About",
  };
}

export default function About() {
  let data = useLoaderData();
  return <div>{data.title}</div>;
}

// clientAction, ErrorBoundary, etc.

----------------------------------------

TITLE: Using useNavigate and Navigate for Authentication in React Router
DESCRIPTION: This snippet demonstrates the use of useNavigate() hook and Navigate component for handling authentication-related navigation in React Router. It shows how to navigate programmatically after form submission and declaratively for unauthenticated users.

LANGUAGE: JavaScript
CODE:
import { useNavigate, Navigate } from 'react-router-dom';

// Imperative navigation after login
const navigate = useNavigate();
navigate('/dashboard');

// Declarative navigation for unauthenticated users
<Navigate to="/login" />

----------------------------------------

TITLE: Using React Router Typegen Command
DESCRIPTION: Command line instructions for manually generating route types using React Router's typegen command.

LANGUAGE: bash
CODE:
react-router typegen

LANGUAGE: bash
CODE:
react-router typegen --watch

----------------------------------------

TITLE: Enabling View Transitions on Navigation in React Router
DESCRIPTION: Demonstrates how to enable view transitions by adding the viewTransition prop to Link, NavLink, or Form components in React Router.

LANGUAGE: tsx
CODE:
<Link to="/about" viewTransition>
  About
</Link>

----------------------------------------

TITLE: Creating Initial Project Setup with React Router
DESCRIPTION: Command to generate a basic template for the address book application using create-react-router

LANGUAGE: shellscript
CODE:
npx create-react-router@latest --template remix-run/react-router/tutorials/address-book

----------------------------------------

TITLE: Form Validation with React Router Actions
DESCRIPTION: Example showing form validation implementation using React Router's action and Form components, demonstrating how to handle server-side validation and state management efficiently.

LANGUAGE: tsx
CODE:
export async function action({
  request,
}: ActionFunctionArgs) {
  const errors = await validateSignupRequest(request);
  if (errors) {
    return { ok: false, errors: errors };
  }
  await signupUser(request);
  return { ok: true, errors: null };
}

export function Signup({
  actionData,
}: Route.ComponentProps) {
  const navigation = useNavigation();

  const userNameError = actionData?.errors?.userName;
  const passwordError = actionData?.errors?.password;
  const isSubmitting = navigation.formAction === "/signup";

  return (
    <Form method="post">
      <p>
        <input type="text" name="username" />
        {userNameError ? <i>{userNameError}</i> : null}
      </p>

      <p>
        <input type="password" name="password" />
        {passwordError ? <i>{passwordError}</i> : null}
      </p>

      <button disabled={isSubmitting} type="submit">
        Sign Up
      </button>

      {isSubmitting ? <BusyIndicator /> : null}
    </Form>
  );
}

----------------------------------------

TITLE: Opening Navigation Blocking Example in StackBlitz
DESCRIPTION: Markdown code to create a button that opens the navigation blocking example in StackBlitz. This allows users to interact with a live demo of the functionality.

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/navigation-blocking?file=src/App.tsx)

----------------------------------------

TITLE: Using useViewTransitionState Hook for Advanced View Transitions in React Router
DESCRIPTION: Shows how to use the useViewTransitionState hook to control view transition states for specific routes in a React Router application.

LANGUAGE: tsx
CODE:
function NavImage(props: { src: string; idx: number }) {
  const href = `/image/${props.idx}`;
  // Hook provides transition state for specific route
  const isTransitioning = useViewTransitionState(href);

  return (
    <Link to={href} viewTransition>
      <p
        style={{
          viewTransitionName: isTransitioning
            ? "image-title"
            : "none",
        }}
      >
        Image Number {props.idx}
      </p>
      <img
        src={props.src}
        style={{
          viewTransitionName: isTransitioning
            ? "image-expand"
            : "none",
        }}
      />
    </Link>
  );
}

----------------------------------------

TITLE: Configuring Root Route Component
DESCRIPTION: Implementation of the root route component with layout and error boundary setup

LANGUAGE: tsx
CODE:
import {
  Form,
  Scripts,
  ScrollRestoration,
  isRouteErrorResponse,
} from "react-router";
import type { Route } from "./+types/root";

import appStylesHref from "./app.css?url";

export default function App() {
  return (
    <>
      <div id="sidebar">
        <h1>React Router Contacts</h1>
        <div>
          <Form id="search-form" role="search">
            <input
              aria-label="Search contacts"
              id="q"
              name="q"
              placeholder="Search"
              type="search"
            />
            <div
              aria-hidden
              hidden={true}
              id="search-spinner"
            />
          </Form>
          <Form method="post">
            <button type="submit">New</button>
          </Form>
        </div>
        <nav>
          <ul>
            <li>
              <a href={`/contacts/1`}>Your Name</a>
            </li>
            <li>
              <a href={`/contacts/2`}>Your Friend</a>
            </li>
          </ul>
        </nav>
      </div>
    </>
  );
}

----------------------------------------

TITLE: Route Configuration with Lazy Loading Example
DESCRIPTION: Example showing how to configure routes with lazy loading using the new RouterProvider API.

LANGUAGE: jsx
CODE:
const router = createBrowserRouter([
  {
    path: "/",
    Component: Layout,
    children: [
      {
        index: true,
        Component: Home,
      },
      {
        path: "about",
        lazy: () => import("./about"),
      },
    ],
  },
]);

----------------------------------------

TITLE: Opening React Router Scroll Restoration Example in StackBlitz
DESCRIPTION: This code snippet provides a markdown link to open the scroll restoration example in StackBlitz. It uses an SVG button for visual appeal.

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/scroll-restoration?file=src/App.tsx)

----------------------------------------

TITLE: Implementing GitHub Webhook Handler with React Router in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a webhook handler for GitHub notifications using React Router. It validates the webhook signature using crypto and processes the payload. The handler is set up as an action in a React Router route.

LANGUAGE: tsx
CODE:
import type { Route } from "./+types/github";

import crypto from "node:crypto";

export const action = async ({
  request,
}: Route.ActionArgs) => {
  if (request.method !== "POST") {
    return Response.json(
      { message: "Method not allowed" },
      {
        status: 405,
      }
    );
  }
  const payload = await request.json();

  /* Validate the webhook */
  const signature = request.headers.get(
    "X-Hub-Signature-256"
  );
  const generatedSignature = `sha256=${crypto
    .createHmac("sha256", process.env.GITHUB_WEBHOOK_SECRET)
    .update(JSON.stringify(payload))
    .digest("hex")}`;
  if (signature !== generatedSignature) {
    return Response.json(
      { message: "Signature mismatch" },
      {
        status: 401,
      }
    );
  }

  /* process the webhook (e.g. enqueue a background job) */

  return Response.json({ success: true });
};

----------------------------------------

TITLE: Starting React Router Development Server
DESCRIPTION: Starts the application in development mode with hot reloading enabled for automatic rebuilding of assets on file changes.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Defining useLinkClickHandler Hook Signature in React Router
DESCRIPTION: Function signature for the useLinkClickHandler hook which handles click events for router Link components. The hook takes a 'to' parameter for the destination and additional named parameters. Returns undefined.

LANGUAGE: tsx
CODE:
useLinkClickHandler(to, __namedParameters): undefined

----------------------------------------

TITLE: Installing React Router Vite Plugin and Runtime Adapter
DESCRIPTION: Commands for installing the React Router Vite plugin and the Node runtime adapter using npm.

LANGUAGE: shellscript
CODE:
npm install -D @react-router/dev
npm install @react-router/node

----------------------------------------

TITLE: Importing BrowserRouter Component in React
DESCRIPTION: This snippet demonstrates how to import the BrowserRouter component from the react-router-dom package. BrowserRouter is a fundamental component for setting up routing in a React application using React Router.

LANGUAGE: jsx
CODE:
import { BrowserRouter } from "react-router-dom";

----------------------------------------

TITLE: Building React Router for Production
DESCRIPTION: Creates a production build of the React Router application by bundling and optimizing all assets.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Implementing Custom Active Link Component with React Router
DESCRIPTION: This code snippet shows how to create a custom Link component that changes its appearance when active. It uses the useMatch and useResolvedPath hooks from React Router to determine the active state.

LANGUAGE: tsx
CODE:
import * as React from "react";
import { Link, useMatch, useResolvedPath } from "react-router-dom";
import type { LinkProps } from "react-router-dom";

function CustomLink({ children, to, ...props }: LinkProps) {
  let resolved = useResolvedPath(to);
  let match = useMatch({ path: resolved.pathname, end: true });

  return (
    <div>
      <Link
        style={{ textDecoration: match ? "underline" : "none" }}
        to={to}
        {...props}
      >
        {children}
      </Link>
      {match && " (active)"}
    </div>
  );
}

export default function App() {
  return (
    <div>
      <h1>Custom Link Example</h1>

      <nav>
        <ul>
          <li>
            <CustomLink to="/">Home</CustomLink>
          </li>
          <li>
            <CustomLink to="/about">About</CustomLink>
          </li>
        </ul>
      </nav>
    </div>
  );
}

----------------------------------------

TITLE: Creating Contact Route Component
DESCRIPTION: Implementation of the contact route component for displaying individual contact details

LANGUAGE: tsx
CODE:
import { Form } from "react-router";

import type { ContactRecord } from "../data";

export default function Contact() {
  const contact = {
    first: "Your",
    last: "Name",
    avatar: "https://placecats.com/200/200",
    twitter: "your_handle",
    notes: "Some notes",
    favorite: true,
  };

  return (
    <div id="contact">
      <div>
        <img
          alt={`${contact.first} ${contact.last} avatar`}
          key={contact.avatar}
          src={contact.avatar}
        />
      </div>

      <div>
        <h1>
          {contact.first || contact.last ? (
            <>
              {contact.first} {contact.last}
            </>
          ) : (
            <i>No Name</i>
          )}
          <Favorite contact={contact} />
        </h1>

        {contact.twitter ? (
          <p>
            <a
              href={`https://twitter.com/${contact.twitter}`}
            >
              {contact.twitter}
            </a>
          </p>
        ) : null}

        {contact.notes ? <p>{contact.notes}</p> : null}

        <div>
          <Form action="edit">
            <button type="submit">Edit</button>
          </Form>

          <Form
            action="destroy"
            method="post"
            onSubmit={(event) => {
              const response = confirm(
                "Please confirm you want to delete this record."
              );
              if (!response) {
                event.preventDefault();
              }
            }}
          >
            <button type="submit">Delete</button>
          </Form>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Defining Server-Side Routes in React Router
DESCRIPTION: Shows how to define routes for server-side rendering with loaders and database integration.

LANGUAGE: tsx
CODE:
export default [
  {
    path: "/",
    Component: Root,
    children: [
      {
        path: "shows/:showId",
        Component: Show,
        loader: ({ params }) => {
          return db.loadShow(params.id);
        },
      },
    ],
  },
];

----------------------------------------

TITLE: Running React Router in Production
DESCRIPTION: Starts the application in production mode using the optimized build created in the previous step.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Route Objects with Data Loading
DESCRIPTION: Illustrates how to use route objects with data loading functionality using the loader property and useLoaderData hook.

LANGUAGE: tsx
CODE:
import {
  createBrowserRouter,
  useLoaderData,
} from "react-router";

createBrowserRouter([
  {
    path: "/teams/:teamId",
    loader: async ({ params }) => {
      let team = await fetchTeam(params.teamId);
      return { name: team.name };
    },
    Component: Team,
  },
]);

function Team() {
  let data = useLoaderData();
  return <h1>{data.name}</h1>;
}

----------------------------------------

TITLE: Creating Project from Template
DESCRIPTION: Creates a new React Router project using a specific template from the official templates repository.

LANGUAGE: shellscript
CODE:
npx create-react-router@latest --template remix-run/react-router-templates/<template-name>

----------------------------------------

TITLE: Setting Up React Router Project
DESCRIPTION: Commands to navigate into the newly created project directory, install dependencies, and start the development server.

LANGUAGE: shellscript
CODE:
cd my-react-router-app
npm i
npm run dev

----------------------------------------

TITLE: Setting Headers in Loader with Timing Information
DESCRIPTION: Shows how to set headers within a loader function, including dynamic timing information. The data is wrapped in a data function to include headers.

LANGUAGE: tsx
CODE:
import { data } from "react-router";

export async function loader({ params }: LoaderArgs) {
  let [page, ms] = await fakeTimeCall(
    await getPage(params.id)
  );

  return data(page, {
    headers: {
      "Server-Timing": `page;dur=${ms};desc="Page query"`,
    },
  });
}

----------------------------------------

TITLE: Implementing Client Loader Function
DESCRIPTION: Example of a client loader function that handles client-side data loading with optional server loader integration.

LANGUAGE: tsx
CODE:
export async function clientLoader({ serverLoader }) {
  // call the server loader
  const serverData = await serverLoader();
  // And/or fetch data on the client
  const data = getDataFromClient();
  // Return the data to expose through useLoaderData()
  return data;
}

----------------------------------------

TITLE: Installing React Router Package
DESCRIPTION: npm command to install the React Router package in the project.

LANGUAGE: shellscript
CODE:
npm i react-router

----------------------------------------

TITLE: Creating TypeScript Context
DESCRIPTION: Example of creating type-safe context in React Router

LANGUAGE: typescript
CODE:
import { unstable_createContext } from "react-router";
import type { Session } from "./sessions.server";

let sessionContext = unstable_createContext<Session>();

const sessionMiddleware: Route.unstable_MiddlewareFunction = ({
  context,
  request
}) => {
  let session = await getSession(request);
  context.set(sessionContext, session);
};

----------------------------------------

TITLE: Framework Mode Component Implementation
DESCRIPTION: Example of a route component in Framework Mode with typesafe loader and component props, demonstrating data fetching and rendering.

LANGUAGE: ts
CODE:
import { Route } from "+./types/product.tsx";

export async function loader({ params }: Route.LoaderArgs) {
  let product = await getProduct(params.pid);
  return { product };
}

export default function Product({
  loaderData,
}: Route.ComponentProps) {
  return <div>{loaderData.product.name}</div>;
}

----------------------------------------

TITLE: Installing react-router with npm
DESCRIPTION: This command installs the react-router package using npm (Node Package Manager). It adds react-router as a dependency to your project.

LANGUAGE: sh
CODE:
npm i react-router

----------------------------------------

TITLE: Configuring Vite for React Router
DESCRIPTION: Vite configuration file update to replace the React plugin with the React Router plugin.

LANGUAGE: typescript
CODE:
import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [
    reactRouter()
  ],
});

----------------------------------------

TITLE: Installing React Router Node.js Platform Abstractions via npm
DESCRIPTION: This command installs the @react-router/node package, which provides Node.js platform abstractions for React Router. It allows developers to use React Router functionality in Node.js environments.

LANGUAGE: sh
CODE:
npm install @react-router/node

----------------------------------------

TITLE: Creating Client Entry Module
DESCRIPTION: Creating the entry.client.tsx file as the new client entry point, using HydratedRouter instead of BrowserRouter.

LANGUAGE: tsx
CODE:
import React from "react";
import ReactDOM from "react-dom/client";
import { HydratedRouter } from "react-router/dom";
import "./index.css";

ReactDOM.hydrateRoot(
  document,
  <React.StrictMode>
    <HydratedRouter />
  </React.StrictMode>
);

----------------------------------------

TITLE: Installing React Router Cloudflare packages
DESCRIPTION: This command installs the required packages for integrating React Router with Cloudflare Workers. It includes the React Router Cloudflare abstraction and Cloudflare Workers types for TypeScript support.

LANGUAGE: bash
CODE:
npm install @react-router/cloudflare @cloudflare/workers-types

----------------------------------------

TITLE: Updating Catchall Route to Render App
DESCRIPTION: Modifying the catchall route to render the existing App component.

LANGUAGE: tsx
CODE:
import App from "./App";

export default function Component() {
  return <App />;
}

----------------------------------------

TITLE: Installing React Router Architect Package
DESCRIPTION: NPM installation command for adding the @react-router/architect package as a project dependency.

LANGUAGE: bash
CODE:
npm install @react-router/architect

----------------------------------------

TITLE: Updating Vite Configuration
DESCRIPTION: Updates the Vite configuration to use the new React Router plugin instead of the Remix plugin.

LANGUAGE: typescript
CODE:
-import { vitePlugin as remix } from "@remix-run/dev";
+import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";
import tsconfigPaths from "vite-tsconfig-paths";

export default defineConfig({
  plugins: [
-   remix(),
+   reactRouter(),
    tsconfigPaths(),
  ],
});

----------------------------------------

TITLE: Embedding StackBlitz Preview Link in Markdown
DESCRIPTION: This snippet shows how to embed a clickable StackBlitz preview link in Markdown format. It uses an image as a button that opens the example project in StackBlitz when clicked.

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/examples/lazy-loading-router-provider?file=src/App.tsx)

----------------------------------------

TITLE: View Transitions Example in React Router
DESCRIPTION: Example of using the View Transitions API added in v6.17.0 to create animated transitions between routes using CSS animations.

LANGUAGE: jsx
CODE:
function ImageLink(to, src, alt) {
  const isTransitioning = unstable_useViewTransitionState(to);
  return (
    <Link to={to} unstable_viewTransition>
      <img
        src={src}
        alt={alt}
        style={{
          viewTransitionName: isTransitioning ? "image-expand" : "",
        }}
      />
    </Link>
  );
}

----------------------------------------

TITLE: Exporting React Router Configuration in TypeScript
DESCRIPTION: This snippet demonstrates the recommended way to export the React Router configuration object from the 'react-router.config.ts' file. It uses a default export to maintain consistency with other JS build tool configuration patterns.

LANGUAGE: typescript
CODE:
import { Config } from '@react-router/dev/config';

const config: Config = {
  // React Router configuration options
};

export default config;

----------------------------------------

TITLE: Lazy Route Module Example in React Router
DESCRIPTION: Demonstrates the lazy route module feature added in v6.9.0 for code-splitting routes

LANGUAGE: jsx
CODE:
let routes = createRoutesFromElements(
  <Route path="/" element={<Layout />}>
    <Route index element={<Home />} />
    <Route path="a" lazy={() => import("./a")} />
    <Route path="b" lazy={() => import("./b")} />
  </Route>
);

----------------------------------------

TITLE: Configuring TypeScript Routes in React Router
DESCRIPTION: Primary route configuration file that exports an array of route config objects. Required to be placed in the app directory and uses route config helpers for type-safe route definitions.

LANGUAGE: typescript
CODE:
// routes.ts

// Example structure - actual implementation would use route config helpers
export const routes = [
  {
    // Route configuration objects
  }
];

----------------------------------------

TITLE: Starting a Pre-release in React Router
DESCRIPTION: Commands to enter Changesets pre-release mode and push the release branch to GitHub.

LANGUAGE: bash
CODE:
git checkout release-next
pnpm changeset pre enter pre
git commit -a -m "Enter prerelease mode"
git push --set-upstream origin release-next

----------------------------------------

TITLE: Importing Helper Module in MJS
DESCRIPTION: This code snippet illustrates the challenge of converting TypeScript imports to JavaScript (MJS) format, highlighting the issue with file extensions in import specifiers.

LANGUAGE: js
CODE:
// ./script.mjs (converted from ./script.js)
import myHelper from "./my-helper";

// Should this be converted to `./my-helper.mjs`?
// Probably, but can we be sure?

myHelper();

----------------------------------------

TITLE: Configuring Import Map for VS Code Deno Extension
DESCRIPTION: This JSON snippet provides an import map configuration for the Deno extension in VS Code. It enables type hints for NPM-managed dependencies within the Deno editor environment. The configuration maps React and ReactDOM imports to their ESM versions.

LANGUAGE: json
CODE:
{
  "// This import map is used solely for the denoland.vscode-deno extension.": "",
  "// Remix does not support import maps.": "",
  "// Dependency management is done through `npm` and `node_modules/` instead.": "",
  "// Deno-only dependencies may be imported via URL imports (without using import maps).": "",

  "imports": {
    "react": "https://esm.sh/react@18.0.0",
    "react-dom": "https://esm.sh/react-dom@18.0.0",
    "react-dom/server": "https://esm.sh/react-dom@18.0.0/server"
  }
}

----------------------------------------

TITLE: Defining ScrollRestoration getKey Function in TypeScript
DESCRIPTION: Demonstrates how to implement a custom getKey function for scroll restoration based on location and route matches.

LANGUAGE: typescript
CODE:
function getKey(location: Location, matches: DataRouteMatch[]) {
  // Restore by pathname on /tweets
  if (location.pathname === "/tweets") {
    return location.pathname;
  }
  // Otherwise use the key
  return location.key;
}

----------------------------------------

TITLE: Original POC Implementation for Lazy Route Loading
DESCRIPTION: Initial proof of concept showing how route modules could be lazily loaded using React.lazy() and dynamic imports.

LANGUAGE: javascript
CODE:
let Component = React.lazy(route.module);
route.element = <Component />;
route.loader = async (args) => {
  const { loader } = await route.module();
  return typeof loader === "function" ? loader(args) : null;
};

----------------------------------------

TITLE: Creating Routes from JSX Elements in React Router
DESCRIPTION: Shows how to create routes using JSX syntax with createRoutesFromElements function in React Router.

LANGUAGE: tsx
CODE:
const routes = createRoutesFromElements(
  <Route path="/" element={<Layout />}>
    <Route index element={<Home />} />
  </Route>
);
const router = createBrowserRouter(routes);

function App() {
  return <RouterProvider router={router} />;
}

----------------------------------------

TITLE: Route Module Export Structure
DESCRIPTION: Example of how to structure a lazy-loaded route module file with exported loader and Component.

LANGUAGE: jsx
CODE:
export function loader() { ... }

export function Component() { ... }

----------------------------------------

TITLE: Rendering Streamed Data with Await Component
DESCRIPTION: Demonstrates full implementation of render-time APIs including Await component, Suspense boundary, and error handling using useAsyncValue and useAsyncError hooks.

LANGUAGE: tsx
CODE:
function Component() {
  const data = useLoaderData(); // data.lazy is a Promise

  return (
    <React.Suspense fallback={<p>Loading...</p>}>
      <Await resolve={data.lazy} errorElement={<MyError />}>
        <MyData />
      </Await>
    </React.Suspense>
  );
}

function MyData() {
  const value = useAsyncValue(); // Get the resolved value
  return <p>Resolved: {value}</p>;
}

function MyError() {
  const error = useAsyncError(); // Get the rejected value
  return <p>Error: {error.message}</p>;
}

----------------------------------------

TITLE: SSR Hydration with Lazy Routes
DESCRIPTION: Implementation example for handling server-side rendering hydration with lazy routes.

LANGUAGE: jsx
CODE:
let lazyMatches = matchRoutes(routes, window.location)?.filter(
  (m) => m.route.lazy
);

if (lazyMatches && lazyMatches.length > 0) {
  await Promise.all(
    lazyMatches.map(async (m) => {
      let routeModule = await m.route.lazy!();
      Object.assign(m.route, { ...routeModule, lazy: undefined });
    })
  );
}

let router = createBrowserRouter(routes)
ReactDOM.hydrateRoot(
  document.getElementById("app")!,
  <RouterProvider router={router} fallbackElement={null} />
);

----------------------------------------

TITLE: A/B Testing with Await Component
DESCRIPTION: Shows how to implement A/B testing with defer() responses while maintaining consistent UI rendering code using the Await component.

LANGUAGE: tsx
CODE:
export async function loader({ request }: LoaderArgs) {
  const shouldAwait = isUserInTestGroup(request);
  return {
    maybeLazy: shouldAwait ? await fetchData() : fetchData(),
  };
}

function Component() {
  const data = useLoaderData();

  return (
    <React.Suspense fallback={<p>Loading...</p>}>
      <Await resolve={data.maybeLazy} errorElement={<MyError />}>
        <MyData />
      </Await>
    </React.Suspense>
  );
}

----------------------------------------

TITLE: Current useLoaderData and useActionData Type Implementation
DESCRIPTION: Example showing current approach using explicit type parameters for useLoaderData and useActionData hooks.

LANGUAGE: tsx
CODE:
type MyLoaderData = {
  /* ... */
};
type MyActionData = {
  /* ... */
};

export default function Route() {
  const loaderData = useLoaderData<MyLoaderData>();
  const actionData = useActionData<MyActionData>();
  return <div>{/* ... */}</div>;
}

----------------------------------------

TITLE: Handler Result Interface Definition
DESCRIPTION: Definition of the HandlerResult interface that represents the simplified output format for data strategy results.

LANGUAGE: typescript
CODE:
interface HandlerResult {
  type: ResultType.success | ResultType.error;
  result: any;
}

----------------------------------------

TITLE: Date Serialization Type Issue Example
DESCRIPTION: Demonstrates current type safety issues with JSON serialization of complex types like Date objects.

LANGUAGE: typescript
CODE:
type MyLoaderData = {
  birthday: Date;
};

export const loader: LoaderFunction = () => {
  return json<MyLoaderData>({ birthday: new Date("February 15, 1992") });
};

export default function Route() {
  const { birthday } = useLoaderData<MyLoaderData>();
  // ^ `useLoaderData` tricks Typescript into thinking this is a `Date`, when in fact its a `string`!
}

----------------------------------------

TITLE: Preparing for a Release in React Router
DESCRIPTION: Commands to prepare for a new release by updating local branches and creating a release branch.

LANGUAGE: bash
CODE:
git checkout main && git pull origin main
git checkout dev && git pull origin dev
git checkout dev
git checkout -b release-next
git merge --no-ff main

----------------------------------------

TITLE: Proposed Type Inference Implementation
DESCRIPTION: Shows the proposed solution using typeof loader for type inference with useLoaderData.

LANGUAGE: typescript
CODE:
export const loader = async (args: LoaderArgs) => {
  // ...
  return json(/*...*/); 
};

export default function Route() {
  const data = useLoaderData<typeof loader>();
  // ...
}

----------------------------------------

TITLE: Finding Changelog Files in React Router
DESCRIPTION: Command to locate and open all CHANGELOG.md files in the packages directory.

LANGUAGE: bash
CODE:
find packages -name 'CHANGELOG.md' -mindepth 2 -maxdepth 2 -exec code {} \;

----------------------------------------

TITLE: Cloning React Router Repository for Development
DESCRIPTION: Instructions for cloning the React Router repository and setting up the development environment. Requires Git and proper branch selection based on contribution type.

LANGUAGE: bash
CODE:
# in a terminal, cd to parent directory where you want your clone to be, then
git clone https://github.com/<your_github_username>/react-router.git
cd react-router

# if you are making *any* code changes, make sure to checkout the dev branch
git checkout dev

----------------------------------------

TITLE: Merging Release Branch in React Router
DESCRIPTION: Commands to merge the release branch into main and dev branches after publishing.

LANGUAGE: bash
CODE:
git checkout main
git merge --no-ff release-next
git push origin main
git checkout dev
git merge --no-ff release-next
git push origin dev

----------------------------------------

TITLE: Running React Router Tests
DESCRIPTION: Commands for running tests across all packages or for specific packages using pnpm.

LANGUAGE: bash
CODE:
# Test all packages
pnpm test

# Test only react-router-dom
pnpm test --projects packages/react-router-dom

----------------------------------------

TITLE: Revealing entry.server.tsx with React Router CLI
DESCRIPTION: Shows the command to reveal the entry.server.tsx file using the React Router CLI. This is useful if the file doesn't exist in the project.

LANGUAGE: shellscript
CODE:
react-router reveal

----------------------------------------

TITLE: Creating Major React Router Release
DESCRIPTION: Step-by-step commands for creating a new major release of React Router, including branch management and version updating.

LANGUAGE: bash
CODE:
# Start from the dev branch.
git checkout dev

# Merge the main branch into dev to ensure that any hotfixes and
# docs updates are available in the release.
git merge main

# Create a new release branch from dev.
git checkout -b release/v6.1.0

# Create a new tag and update version references throughout the
# codebase.
pnpm run version [nextVersion]

# Push the release branch along with the new release tag.
git push origin release/v6.1.0 --follow-tags

# Wait for GitHub actions to run all tests. If the tests pass, the
# release is ready to go! Merge the release branch into main and dev.
git checkout main
git merge release/v6.1.0
git checkout dev
git merge release/v6.1.0

# The release branch can now be deleted.
git branch -D release/v6.1.0
git push origin --delete release/v6.1.0

----------------------------------------

TITLE: Advanced View Transitions with Render Props in React Router
DESCRIPTION: Demonstrates advanced usage of view transitions using render props to control transition states more precisely.

LANGUAGE: tsx
CODE:
<NavLink to={`/image/${idx}`} viewTransition>
  {({ isTransitioning }) => (
    <>
      <p
        style={{
          viewTransitionName: isTransitioning
            ? "image-title"
            : "none",
        }}
      >
        Image Number {idx}
      </p>
      <img
        src={src}
        style={{
          viewTransitionName: isTransitioning
            ? "image-expand"
            : "none",
        }}
      />
    </>
  )}
</NavLink>

----------------------------------------

TITLE: Creating React Router Hotfix Release
DESCRIPTION: Commands for creating an urgent hotfix release directly from the main branch, including testing and version management.

LANGUAGE: bash
CODE:
# From the main branch, make sure to run the build and all tests
# before creating a new release.
pnpm install && pnpm build && pnpm test

# Assuming the tests pass, create the release tag and update
# version references throughout the codebase.
pnpm run version [nextVersion]

# Push changes along with the new release tag.
git push origin main --follow-tags

# When the hot-fix is done, merge the changes into dev and clean
# up conflicts as needed.
git checkout dev
git merge main
git push origin dev

----------------------------------------

TITLE: Accessing Multiple URL Parameters in React Router Loader
DESCRIPTION: Shows how to access multiple URL parameters (city and date) in a React Router loader function for fetching concert data.

LANGUAGE: tsx
CODE:
export async function serverLoader({ params }) {
  return fake.db.getConcerts({
    date: params.date,
    city: params.city,
  });
}

----------------------------------------

TITLE: Setting Status Codes in React Router Action
DESCRIPTION: This code snippet shows how to set HTTP status codes in a React Router action function using the 'data' function. It handles form submission for creating or updating a project, setting appropriate status codes based on the operation result.

LANGUAGE: tsx
CODE:
// route('/projects/:projectId', './project.tsx')
import type { Route } from "./+types/project";
import { data } from "react-router";
import { fakeDb } from "../db";

export async function action({
  request,
}: Route.ActionArgs) {
  let formData = await request.formData();
  let title = formData.get("title");
  if (!title) {
    return data(
      { message: "Invalid title" },
      { status: 400 }
    );
  }

  if (!projectExists(title)) {
    let project = await fakeDb.createProject({ title });
    return data(project, { status: 201 });
  } else {
    let project = await fakeDb.updateProject({ title });
    // the default status code is 200, no need for `data`
    return project;
  }
}

----------------------------------------

TITLE: Configuring Client Side Rendering in React Router
DESCRIPTION: This snippet demonstrates how to disable server-side rendering in React Router configuration, suitable for building Single Page Applications.

LANGUAGE: typescript
CODE:
import type { Config } from "@react-router/dev/config";

export default {
  ssr: false,
} satisfies Config;

----------------------------------------

TITLE: Creating Static Handler for Server-Side Rendering
DESCRIPTION: Demonstrates creating a static handler for server-side routing using createStaticHandler.

LANGUAGE: tsx
CODE:
import { createStaticHandler } from "react-router";
import routes from "./some-routes";

let { query, dataRoutes } = createStaticHandler(routes);

----------------------------------------

TITLE: Styling NavLink States with CSS
DESCRIPTION: Shows CSS styling for different NavLink states including active, pending, and transitioning states.

LANGUAGE: css
CODE:
a.active {
  color: red;
}

a.pending {
  animate: pulse 1s infinite;
}

a.transitioning {
  /* css transition is running */
}

----------------------------------------

TITLE: Dependency Update Changelog Entry
DESCRIPTION: Markdown formatted changelog entry showing package dependency updates.

LANGUAGE: markdown
CODE:
### Patch Changes

- Updated dependencies:
  - `@react-router/dev@7.4.0`