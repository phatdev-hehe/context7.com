TITLE: Installing TanStack Table Packages with npm
DESCRIPTION: Command to install TanStack Table packages for various frameworks using npm. Select the package based on your framework of choice - Angular, Lit, Qwik, React, Solid, Svelte, Vue, or the framework-agnostic core package.

LANGUAGE: bash
CODE:
# Npm
npm install @tanstack/angular-table
npm install @tanstack/lit-table
npm install @tanstack/qwik-table
npm install @tanstack/react-table
npm install @tanstack/solid-table
npm install @tanstack/svelte-table
npm install @tanstack/vue-table
npm install @tanstack/table-core #vanilla js that can work with any framework

----------------------------------------

TITLE: Defining State Option Type in TanStack Table
DESCRIPTION: Type definition for the state property which allows controlling part or all of the table state externally, enabling controlled components in various frameworks.

LANGUAGE: tsx
CODE:
state?: Partial<
  VisibilityTableState &
  ColumnOrderTableState &
  ColumnPinningTableState &
  FiltersTableState &
  SortingTableState &
  ExpandedTableState &
  GroupingTableState &
  ColumnSizingTableState &
  PaginationTableState &
  RowSelectionTableState
>

----------------------------------------

TITLE: Using Accessor Functions for Computed Values
DESCRIPTION: This snippet demonstrates how to use accessor functions to compute values from row data, such as combining firstName and lastName into a fullName property.

LANGUAGE: tsx
CODE:
columnHelper.accessor(row => `${row.firstName} ${row.lastName}`, {
  id: 'fullName',
})

// OR

{
  id: 'fullName',
  accessorFn: row => `${row.firstName} ${row.lastName}`,
}

----------------------------------------

TITLE: Creating and Using Column Helpers in TanStack Table
DESCRIPTION: This snippet demonstrates how to create a column helper for a Person type and define various column types including display columns, grouping columns, and accessor columns with custom cell rendering.

LANGUAGE: tsx
CODE:
// Define your row shape
type Person = {
  firstName: string
  lastName: string
  age: number
  visits: number
  status: string
  progress: number
}

const columnHelper = createColumnHelper<Person>()

// Make some columns!
const defaultColumns = [
  // Display Column
  columnHelper.display({
    id: 'actions',
    cell: props => <RowActions row={props.row} />,
  }),
  // Grouping Column
  columnHelper.group({
    header: 'Name',
    footer: props => props.column.id,
    columns: [
      // Accessor Column
      columnHelper.accessor('firstName', {
        cell: info => info.getValue(),
        footer: props => props.column.id,
      }),
      // Accessor Column
      columnHelper.accessor(row => row.lastName, {
        id: 'lastName',
        cell: info => info.getValue(),
        header: () => <span>Last Name</span>,
        footer: props => props.column.id,
      }),
    ],
  }),
  // Grouping Column
  columnHelper.group({
    header: 'Info',
    footer: props => props.column.id,
    columns: [
      // Accessor Column
      columnHelper.accessor('age', {
        header: () => 'Age',
        footer: props => props.column.id,
      }),
      // Grouping Column
      columnHelper.group({
        header: 'More Info',
        columns: [
          // Accessor Column
          columnHelper.accessor('visits', {
            header: () => <span>Visits</span>,
            footer: props => props.column.id,
          }),
          // Accessor Column
          columnHelper.accessor('status', {
            header: 'Status',
            footer: props => props.column.id,
          }),
          // Accessor Column
          columnHelper.accessor('progress', {
            header: 'Profile Progress',
            footer: props => props.column.id,
          }),
        ],
      }),
    ],
  }),
]

----------------------------------------

TITLE: Accessing Nested Object Properties in TanStack Table
DESCRIPTION: This snippet demonstrates how to access nested properties like 'name.first' using dot notation in column definitions, with an optional custom ID.

LANGUAGE: tsx
CODE:
columnHelper.accessor('name.first', {
  id: 'firstName',
})

// OR

{
  accessorKey: 'name.first',
  id: 'firstName',
}

----------------------------------------

TITLE: Initializing Table Instances Across Different Frameworks in TanStack Table
DESCRIPTION: Demonstrates how to initialize TanStack Table instances across various frameworks including vanilla JavaScript, Angular, Lit, Qwik, React, Solid, Svelte, and Vue. Each framework uses its specific adapter function.

LANGUAGE: typescript
CODE:
//vanilla js
const table = createTable({ columns, data, getCoreRowModel: getCoreRowModel() })

//angular
this.table = createAngularTable({ columns: this.columns, data: this.data(), getCoreRowModel: getCoreRowModel() })

//lit
const table = this.tableController.table({ columns, data, getCoreRowModel: getCoreRowModel() })

//qwik
const table = useQwikTable({ columns, data, getCoreRowModel: getCoreRowModel() })

//react
const table = useReactTable({ columns, data, getCoreRowModel: getCoreRowModel() })

//solid
const table = createSolidTable({ columns, get data() { return data() }, getCoreRowModel: getCoreRowModel() })

//svelte
const table = createSvelteTable({ columns, data, getCoreRowModel: getCoreRowModel() })

//vue
const table = useVueTable({ columns, data, getCoreRowModel: getCoreRowModel() })

----------------------------------------

TITLE: Initializing React Table with useReactTable Hook
DESCRIPTION: This snippet demonstrates how to import and use the useReactTable hook from @tanstack/react-table. The hook takes an options object and returns a table instance that can be used to render a table in a React component.

LANGUAGE: tsx
CODE:
import { useReactTable } from '@tanstack/react-table'

function App() {
  const table = useReactTable(options)

  // ...render your table
}

----------------------------------------

TITLE: Defining Column Types with TypeScript in TanStack Table
DESCRIPTION: Shows how to define column definitions with proper TypeScript typing in TanStack Table. It demonstrates two approaches: using the ColumnDef array with a generic type or using the columnHelper utility.

LANGUAGE: typescript
CODE:
const columns: ColumnDef<User>[] = [] //Pass User type as the generic TData type
//or
const columnHelper = createColumnHelper<User>() //Pass User type as the generic TData type

----------------------------------------

TITLE: Importing All Available Row Models in TanStack Table
DESCRIPTION: Example showing how to import and implement all the available row models in TanStack Table. Each row model enables different functionality like filtering, sorting, grouping, pagination, etc.

LANGUAGE: typescript
CODE:
//only import the row models you need
import {
  getCoreRowModel,
  getExpandedRowModel,
  getFacetedMinMaxValues,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getGroupedRowModel,
  getPaginationRowModel,
  getSortedRowModel,
}
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
  getFacetedMinMaxValues: getFacetedMinMaxValues(),
  getFacetedRowModel: getFacetedRowModel(),
  getFacetedUniqueValues: getFacetedUniqueValues(),
  getFilteredRowModel: getFilteredRowModel(),
  getGroupedRowModel: getGroupedRowModel(),
  getPaginationRowModel: getPaginationRowModel(),
  getSortedRowModel: getSortedRowModel(),
})

----------------------------------------

TITLE: Installing TanStack React Table
DESCRIPTION: Command to install the React adapter for TanStack Table. This adapter works with React 16.8, 17, 18, and 19, though there may be compatibility issues with the upcoming React Compiler.

LANGUAGE: bash
CODE:
npm install @tanstack/react-table

----------------------------------------

TITLE: Specifying a Global Filter Function in React Table
DESCRIPTION: Setting the globalFilterFn option to use a built-in filter function for global filtering. This example uses the 'text' filter which is one of the 10 built-in filter functions.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  data,
  columns,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  globalFilterFn: 'text' // built-in filter function
})

----------------------------------------

TITLE: Implementing Row Selection UI with Checkboxes in TanStack Table
DESCRIPTION: Shows how to connect row selection APIs to checkbox inputs in column definitions, including header select-all functionality and per-row selection with appropriate checked and indeterminate states.

LANGUAGE: tsx
CODE:
const columns = [
  {
    id: 'select-col',
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllRowsSelected()}
        indeterminate={table.getIsSomeRowsSelected()}
        onChange={table.getToggleAllRowsSelectedHandler()} //or getToggleAllPageRowsSelectedHandler
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        disabled={!row.getCanSelect()}
        onChange={row.getToggleSelectedHandler()}
      />
    ),
  },
  //... more column definitions...
]

----------------------------------------

TITLE: Creating a Table with @tanstack/table-core in TypeScript/JavaScript
DESCRIPTION: Demonstrates how to import and use the createTable function from the @tanstack/table-core library. This function takes an options object and returns a table instance that can be used for data display and manipulation.

LANGUAGE: tsx
CODE:
import { createTable } from '@tanstack/table-core'

const table = createTable(options)

----------------------------------------

TITLE: Defining Initial State Option Type in TanStack Table
DESCRIPTION: Type definition for the initialState property which allows setting the initial state of various table features like pagination, sorting, filtering, and row selection.

LANGUAGE: tsx
CODE:
initialState?: Partial<
  VisibilityTableState &
  ColumnOrderTableState &
  ColumnPinningTableState &
  FiltersTableState &
  SortingTableState &
  ExpandedTableState &
  GroupingTableState &
  ColumnSizingTableState &
  PaginationTableState &
  RowSelectionTableState
>

----------------------------------------

TITLE: Implementing Stable References in React Components for TanStack Table
DESCRIPTION: Proper React component implementation with useMemo and useState to create stable references for columns and data to prevent infinite render loops.

LANGUAGE: tsx
CODE:
const fallbackData = []

export default function MyComponent() {
  //✅ GOOD: This will not cause an infinite loop of re-renders because `columns` is a stable reference
  const columns = useMemo(() => [
    // ...
  ], []);

  //✅ GOOD: This will not cause an infinite loop of re-renders because `data` is a stable reference
  const [data, setData] = useState(() => [
    // ...
  ]);

  // Columns and data are defined in a stable reference, will not cause infinite loop!
  const table = useReactTable({
    columns,
    data ?? fallbackData, //also good to use a fallback array that is defined outside of the component (stable reference)
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Defining Column Accessors for Deep-Nested Data in TanStack Table
DESCRIPTION: Column definition examples showing how to access deep nested data using accessorKey with dot notation and accessorFn for complex data structures.

LANGUAGE: typescript
CODE:
const columns = [
  {
    header: 'First Name',
    accessorKey: 'name.first',
  },
  {
    header: 'Last Name',
    accessorKey: 'name.last',
  },
  {
    header: 'Age',
    accessorFn: row => row.info.age, 
  },
  //...
]

----------------------------------------

TITLE: Defining Person Type for TanStack Table
DESCRIPTION: This snippet defines a TypeScript interface for a Person object with various properties that will be used for column definitions and data extraction.

LANGUAGE: typescript
CODE:
type Person = {
  firstName: string
  lastName: string
  age: number
  visits: number
  status: string
  progress: number
}

----------------------------------------

TITLE: Configuring Columns with Various Filter Functions
DESCRIPTION: Complex example showing how to configure table columns with different filter functions, including built-in filters, custom global filters, and inline custom filter functions.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Name',
    accessorKey: 'name',
    filterFn: 'includesString', // use built-in filter function
  },
  {
    header: () => 'Age',
    accessorKey: 'age',
    filterFn: 'inNumberRange',
  },
  {
    header: () => 'Birthday',
    accessorKey: 'birthday',
    filterFn: 'myCustomFilterFn', // use custom global filter function
  },
  {
    header: () => 'Profile',
    accessorKey: 'profile',
    // use custom filter function directly
    filterFn: (row, columnId, filterValue) => {
      return // true or false based on your custom logic
    },
  }
]
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  filterFns: { // add a custom global filter function
    myCustomFilterFn: (row, columnId, filterValue) => { // defined inline here
      return // true or false based on your custom logic
    },
    startsWith: startsWithFilterFn, // defined elsewhere
  },
})

----------------------------------------

TITLE: Advanced Cell Formatting with Row Data
DESCRIPTION: This snippet demonstrates advanced cell customization by accessing both the cell value and the original row data to create a composite display with ID and firstName.

LANGUAGE: tsx
CODE:
columnHelper.accessor('firstName', {
  cell: props => (
    <span>{`${props.row.original.id} - ${props.getValue()}`}</span>
  ),
})

----------------------------------------

TITLE: Implementing Fully Controlled State in TanStack Table (React)
DESCRIPTION: Shows how to implement fully controlled state management for a TanStack Table using React's useState hook and the table.setOptions API to merge controlled state onto the table instance.

LANGUAGE: jsx
CODE:
//create a table instance with default state values
const table = useReactTable({
  columns,
  data,
  //... Note: `state` values are NOT passed in yet
})


const [state, setState] = React.useState({
  ...table.initialState, //populate the initial state with all of the default state values from the table instance
  pagination: {
    pageIndex: 0,
    pageSize: 15 //optionally customize the initial pagination state.
  }
})

//Use the table.setOptions API to merge our fully controlled state onto the table instance
table.setOptions(prev => ({
  ...prev, //preserve any other options that we have set up above
  state, //our fully controlled state overrides the internal state
  onStateChange: setState //any state changes will be pushed up to our own state management
}))

----------------------------------------

TITLE: Importing and Setting Up Core Row Model in TanStack Table
DESCRIPTION: Shows how to import the getCoreRowModel function from TanStack Table and include it when creating a table instance. This is a required configuration for basic table functionality.

LANGUAGE: typescript
CODE:
import { getCoreRowModel } from '@tanstack/[framework]-table'

const table = createTable({ columns, data, getCoreRowModel: getCoreRowModel() })

----------------------------------------

TITLE: Implementing Fully Controlled State in TanStack Table with Solid.js
DESCRIPTION: This example shows how to implement fully controlled table state by hoisting the entire state into a Solid.js signal and using table.setOptions to connect it back to the table instance while preserving all default state values.

LANGUAGE: jsx
CODE:
//create a table instance with default state values
const table = createSolidTable({
  columns,
  get data() {
    return data()
  },
  //... Note: `state` values are NOT passed in yet
})


const [state, setState] = createSignal({
  ...table.initialState, //populate the initial state with all of the default state values from the table instance
  pagination: {
    pageIndex: 0,
    pageSize: 15 //optionally customize the initial pagination state.
  }
})

//Use the table.setOptions API to merge our fully controlled state onto the table instance
table.setOptions(prev => ({
  ...prev, //preserve any other options that we have set up above
  get state() {
    return state() //our fully controlled state overrides the internal state
  },
  onStateChange: setState //any state changes will be pushed up to our own state management
}))

----------------------------------------

TITLE: Setting Table Options in TanStack Table
DESCRIPTION: Function to update table options. This is generally used by adapters to update the table options and not recommended to bypass adapter strategies.

LANGUAGE: tsx
CODE:
setOptions: (newOptions: Updater<TableOptions<TData>>) => void

----------------------------------------

TITLE: Implementing Controlled State for Filtering, Sorting, and Pagination
DESCRIPTION: Shows how to control specific table states (filtering, sorting, pagination) in your own state management system, especially useful for server-side data fetching scenarios.

LANGUAGE: typescript
CODE:
import {signal} from '@angular/core';
import {SortingState, ColumnFiltersState, PaginationState} from '@tanstack/angular-table'
import {toObservable} from "@angular/core/rxjs-interop";
import {combineLatest, switchMap} from 'rxjs';

class TableComponent {
  readonly columnFilters = signal<ColumnFiltersState>([]) //no default filters
  readonly sorting = signal<SortingState>([
    {
      id: 'age',
      desc: true, //sort by age in descending order by default
    }
  ])
  readonly pagination = signal<PaginationState>({
    pageIndex: 0,
    pageSize: 15
  })

  //Use our controlled state values to fetch data
  readonly data$ = combineLatest({
    filters: toObservable(this.columnFilters),
    sorting: toObservable(this.sorting),
    pagination: toObservable(this.pagination)
  }).pipe(
    switchMap(({filters, sorting, pagination}) => fetchData(filters, sorting, pagination))
  )
  readonly data = toSignal(this.data$);

  readonly table = createAngularTable(() => ({
    columns: this.columns,
    data: this.data(),
    //...
    state: {
      columnFilters: this.columnFilters(), //pass controlled state back to the table (overrides internal state)
      sorting: this.sorting(),
      pagination: this.pagination(),
    },
    onColumnFiltersChange: updater => { //hoist columnFilters state into our own state management
      updater instanceof Function
        ? this.columnFilters.update(updater)
        : this.columnFilters.set(updater)
    },
    onSortingChange: updater => {
      updater instanceof Function
        ? this.sorting.update(updater)
        : this.sorting.set(updater)
    },
    onPaginationChange: updater => {
      updater instanceof Function
        ? this.pagination.update(updater)
        : this.pagination.set(updater)
    },
  }))
}

//...

----------------------------------------

TITLE: Creating Custom Aggregation Functions in TanStack Table
DESCRIPTION: Demonstrates how to define custom aggregation functions that can be used to aggregate data in grouped rows.

LANGUAGE: tsx
CODE:
const table = useReactTable({
  // other options...
  aggregationFns: {
    myCustomAggregation: (columnId, leafRows, childRows) => {
      // return the aggregated value
    },
  },
})

----------------------------------------

TITLE: Using cell Option in ColumnDef
DESCRIPTION: Specifies how to render each cell in the column, accepting either a string or a function that returns the rendered cell value with access to table, row, column, cell properties and value getters.

LANGUAGE: tsx
CODE:
cell?:
  | string
  | ((props: {
      table: Table<TData>
      row: Row<TData>
      column: Column<TData>
      cell: Cell<TData>
      getValue: () => any
      renderValue: () => any
    }) => unknown)

----------------------------------------

TITLE: Implementing Pagination UI Controls with TanStack Table APIs
DESCRIPTION: This code demonstrates how to implement pagination UI controls including previous/next buttons, first/last page buttons, and a page size selector. It uses table instance methods like firstPage(), nextPage() and state properties to create a complete pagination interface.

LANGUAGE: jsx
CODE:
<Button
  onClick={() => table.firstPage()}
  disabled={!table.getCanPreviousPage()}
>
  {'<<'}
</Button>
<Button
  onClick={() => table.previousPage()}
  disabled={!table.getCanPreviousPage()}
>
  {'<'}
</Button>
<Button
  onClick={() => table.nextPage()}
  disabled={!table.getCanNextPage()}
>
  {'>'}
</Button>
<Button
  onClick={() => table.lastPage()}
  disabled={!table.getCanNextPage()}
>
  {'>>'}
</Button>
<select
  value={table.getState().pagination.pageSize}
  onChange={e => {
    table.setPageSize(Number(e.target.value))
  }}
>
  {[10, 20, 30, 40, 50].map(pageSize => (
    <option key={pageSize} value={pageSize}>
      {pageSize}
    </option>
  ))}
</select>

----------------------------------------

TITLE: Defining Data Option Type in TanStack Table
DESCRIPTION: The data property type definition for table options, which accepts an array of data items to be displayed in the table. This is the primary data source for the table.

LANGUAGE: tsx
CODE:
data: TData[]

----------------------------------------

TITLE: Retrieving Processed Row Model in TanStack Table
DESCRIPTION: Function that returns the final row model after all processing from other features has been applied. It provides access to rows, flatRows, and rowsById.

LANGUAGE: tsx
CODE:
getRowModel: () => {
  rows: Row<TData>[],
  flatRows: Row<TData>[],
  rowsById: Record<string, Row<TData>>,
}

----------------------------------------

TITLE: TableFeature Interface Definition in TypeScript
DESCRIPTION: The TypeScript interface that defines the structure of a feature object needed to create a custom feature for TanStack Table. It includes methods for creating table components, setting defaults, and initializing state.

LANGUAGE: typescript
CODE:
export interface TableFeature<TData extends RowData = any> {
  createCell?: (
    cell: Cell<TData, unknown>,
    column: Column<TData>,
    row: Row<TData>,
    table: Table<TData>
  ) => void
  createColumn?: (column: Column<TData, unknown>, table: Table<TData>) => void
  createHeader?: (header: Header<TData, unknown>, table: Table<TData>) => void
  createRow?: (row: Row<TData>, table: Table<TData>) => void
  createTable?: (table: Table<TData>) => void
  getDefaultColumnDef?: () => Partial<ColumnDef<TData, unknown>>
  getDefaultOptions?: (
    table: Table<TData>
  ) => Partial<TableOptionsResolved<TData>>
  getInitialState?: (initialState?: InitialTableState) => Partial<TableState>
}

----------------------------------------

TITLE: Implementing Custom Global Filter Function in React Table
DESCRIPTION: Creating and applying a custom global filter function by defining the filtering logic and passing it to the globalFilterFn option, allowing for specialized filtering behavior.

LANGUAGE: jsx
CODE:
const customFilterFn = (rows, columnId, filterValue) => {
  // custom filter logic
}

const table = useReactTable({
  // other options...
  globalFilterFn: customFilterFn
})

----------------------------------------

TITLE: Managing Row Selection State in React with TanStack Table
DESCRIPTION: Demonstrates how to hoist the row selection state to your own scope using useState and the onRowSelectionChange callback, allowing for easier access to selected row IDs for API calls or other actions.

LANGUAGE: typescript
CODE:
const [rowSelection, setRowSelection] = useState<RowSelectionState>({}) //manage your own row selection state

const table = useReactTable({
  //...
  onRowSelectionChange: setRowSelection, //hoist up the row selection state to your own scope
  state: {
    rowSelection, //pass the row selection state back to the table instance
  },
})

----------------------------------------

TITLE: Configuring Sub-Row Filtering with filterFromLeafRows in TanStack Table
DESCRIPTION: Demonstrates how to set up filtering that works from leaf rows upward, allowing sub-rows to be filtered regardless of whether their parent rows are filtered out.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
  filterFromLeafRows: true, // filter and search through sub-rows
})

----------------------------------------

TITLE: Implementing Controlled State for Server-Side Data Fetching in TanStack Table (React)
DESCRIPTION: Demonstrates how to implement partially controlled state for filtering, sorting, and pagination with TanStack Table, using React's useState hook and a data fetching query to manage server-side operations.

LANGUAGE: jsx
CODE:
const [columnFilters, setColumnFilters] = React.useState([]) //no default filters
const [sorting, setSorting] = React.useState([{
  id: 'age',
  desc: true, //sort by age in descending order by default
}]) 
const [pagination, setPagination] = React.useState({ pageIndex: 0, pageSize: 15 })

//Use our controlled state values to fetch data
const tableQuery = useQuery({
  queryKey: ['users', columnFilters, sorting, pagination],
  queryFn: () => fetchUsers(columnFilters, sorting, pagination),
  //...
})

const table = useReactTable({
  columns,
  data: tableQuery.data,
  //...
  state: {
    columnFilters, //pass controlled state back to the table (overrides internal state)
    sorting,
    pagination
  },
  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management
  onSortingChange: setSorting,
  onPaginationChange: setPagination,
})
//...

----------------------------------------

TITLE: Implementing Controlled Sorting State in TanStack Table
DESCRIPTION: Example of controlling the sorting state externally using React's useState and passing it to the table through state and onSortingChange options.

LANGUAGE: tsx
CODE:
const [sorting, setSorting] = useState<SortingState>([]) // can set initial sorting state here
//...
// use sorting state to fetch data from your server or something...
//...
const table = useReactTable({
  columns,
  data,
  //...
  state: {
    sorting,
  },
  onSortingChange: setSorting,
})

----------------------------------------

TITLE: Defining Column Ordering State Structure in TanStack Table
DESCRIPTION: Defines the TypeScript types for column ordering state in TanStack Table. The state consists of a columnOrder property on the table state, which is an array of column ID strings.

LANGUAGE: tsx
CODE:
export type ColumnOrderTableState = {
  columnOrder: ColumnOrderState
}

export type ColumnOrderState = string[]

----------------------------------------

TITLE: Implementing Click-to-Select Row Functionality in TanStack Table
DESCRIPTION: Demonstrates how to implement a simpler row selection UI by connecting click events directly to table rows using the getToggleSelectedHandler API, with conditional styling for selected state.

LANGUAGE: tsx
CODE:
<tbody>
  {table.getRowModel().rows.map(row => {
    return (
      <tr
        key={row.id}
        className={row.getIsSelected() ? 'selected' : null}
        onClick={row.getToggleSelectedHandler()}
      >
        {row.getVisibleCells().map(cell => {
          return <td key={cell.id}>{/* */}</td>
        })}
      </tr>
    )
  })}
</tbody>

----------------------------------------

TITLE: Setting Up Client-Side Filtering in React Table
DESCRIPTION: Code snippet showing how to enable client-side filtering by importing and using the getFilteredRowModel function in the table configuration.

LANGUAGE: jsx
CODE:
import { useReactTable, getFilteredRowModel } from '@tanstack/react-table'
//...
const table = useReactTable({
  data,
  columns,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(), // needed for client-side filtering
})

----------------------------------------

TITLE: Customizing Filter Function Behavior in TanStack Table with TypeScript
DESCRIPTION: Demonstrates how to create a custom 'startsWith' filter function with additional properties like autoRemove to handle filter state cleanup and resolveFilterValue to preprocess filter values.

LANGUAGE: tsx
CODE:
const startsWithFilterFn = <TData extends MRT_RowData>(
  row: Row<TData>,
  columnId: string,
  filterValue: number | string, //resolveFilterValue will transform this to a string
) =>
  row
    .getValue<number | string>(columnId)
    .toString()
    .toLowerCase()
    .trim()
    .startsWith(filterValue); // toString, toLowerCase, and trim the filter value in `resolveFilterValue`

// remove the filter value from filter state if it is falsy (empty string in this case)
startsWithFilterFn.autoRemove = (val: any) => !val; 

// transform/sanitize/format the filter value before it is passed to the filter function
startsWithFilterFn.resolveFilterValue = (val: any) => val.toString().toLowerCase().trim();

----------------------------------------

TITLE: Implementing Basic Grouping with TanStack Table in React
DESCRIPTION: Shows how to set up the basic grouping functionality in a React table by importing and using the getGroupedRowModel from the TanStack table package.

LANGUAGE: tsx
CODE:
import { getGroupedRowModel } from '@tanstack/react-table'

const table = useReactTable({
  // other options...
  getGroupedRowModel: getGroupedRowModel(),
})

----------------------------------------

TITLE: Setting Up Client-Side Sorting with getSortedRowModel
DESCRIPTION: Basic setup for client-side sorting by providing the getSortedRowModel function to the table configuration.

LANGUAGE: jsx
CODE:
import { useReactTable } from '@tanstack/react-table'
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getSortedRowModel: getSortedRowModel(), //provide a sorting row model
})

----------------------------------------

TITLE: Defining Columns Option Type in TanStack Table
DESCRIPTION: Type definition for the columns property which accepts an array of column definitions that determine how data is displayed and organized in the table.

LANGUAGE: tsx
CODE:
type columns = ColumnDef<TData>[]

----------------------------------------

TITLE: Defining ColumnSizingTableState Types in TSX
DESCRIPTION: Type definitions for column sizing state management in TanStack Table, including column sizing measurements and interactive resizing state tracking.

LANGUAGE: tsx
CODE:
export type ColumnSizingTableState = {
  columnSizing: ColumnSizing
  columnSizingInfo: ColumnSizingInfoState
}

export type ColumnSizing = Record<string, number>

export type ColumnSizingInfoState = {
  startOffset: null | number
  startSize: null | number
  deltaOffset: null | number
  deltaPercentage: null | number
  isResizingColumn: false | string
  columnSizingStart: [string, number][]
}

----------------------------------------

TITLE: Creating TypeScript Type Definition for User Data in TanStack Table
DESCRIPTION: TypeScript type definition for User data structure that matches the JSON format, used as TData generic throughout the table implementation.

LANGUAGE: typescript
CODE:
//TData
type User = {
  firstName: string
  lastName: string
  age: number
  visits: number
  progress: number
  status: string
}

----------------------------------------

TITLE: Setting Custom Initial State in TanStack Table (React)
DESCRIPTION: Shows how to customize the initial state values for a TanStack Table without manually controlling the state, using the initialState option to set default values for column order, visibility, expansion, and sorting.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  initialState: {
    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
    columnVisibility: {
      id: false //hide the id column by default
    },
    expanded: true, //expand all rows by default
    sorting: [
      {
        id: 'age',
        desc: true //sort by age in descending order by default
      }
    ]
  },
  //...
})

----------------------------------------

TITLE: Implementing Custom Server-Side Faceting in TanStack Table
DESCRIPTION: Example of implementing server-side faceting by overriding the getFacetedUniqueValues and getFacetedMinMaxValues functions in the table configuration. This approach allows for custom faceting logic to be integrated with TanStack Table.

LANGUAGE: typescript
CODE:
const facetingQuery = useQuery(
  //...
)

const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getFacetedRowModel: getFacetedRowModel(),
  getFacetedUniqueValues: (table, columnId) => {
    const uniqueValueMap = new Map<string, number>();
    //...
    return uniqueValueMap;
  },
  getFacetedMinMaxValues: (table, columnId) => {
    //...
    return [min, max];
  },
  //...
})

----------------------------------------

TITLE: Configuring State Change Callbacks in TanStack Table (React)
DESCRIPTION: Demonstrates the proper way to use controlled state with TanStack Table, showing how both the state value and its corresponding onChange handler must be specified for controlled state to work correctly.

LANGUAGE: jsx
CODE:
const [sorting, setSorting] = React.useState([])
//...
const table = useReactTable({
  columns,
  data,
  //...
  state: {
    sorting, //required because we are using `onSortingChange`
  },
  onSortingChange: setSorting, //makes the `state.sorting` controlled
})

----------------------------------------

TITLE: Basic Table Setup with Row Selection in React using TanStack Table
DESCRIPTION: This snippet demonstrates the basic setup for a table with row selection capability using TanStack Table. It initializes the table with column definitions and data, and specifies that the table should enable row selection.

LANGUAGE: jsx
CODE:
import { useReactTable, getCoreRowModel } from '@tanstack/react-table'

function App() {
  const columns = [
    // ... column definitions
  ]

  const data = [
    // ... data array
  ]

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    enableRowSelection: true, // enables row selection
  })

  // ... render table
}

----------------------------------------

TITLE: Rendering Cells with flexRender in TanStack Table (React)
DESCRIPTION: Demonstrates how to use the flexRender API utility to properly render cells with custom JSX markup. This example shows defining a custom cell renderer for a fullName column and how to use it within a table row rendering loop.

LANGUAGE: jsx
CODE:
import { flexRender } from '@tanstack/react-table'

const columns = [
  {
    accessorKey: 'fullName',
    cell: ({ cell, row }) => {
      return <div><strong>{row.original.firstName}</strong> {row.original.lastName}</div>
    }
    //...
  }
]
//...
<tr>
  {row.getVisibleCells().map(cell => {
    return <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>
  })}
</tr>

----------------------------------------

TITLE: Accessing and Modifying Table State in TanStack Table
DESCRIPTION: Shows the pattern for reading, setting, and resetting table state using the row selection feature as an example. The table instance provides APIs to get the current state, set state with updates, and reset state to defaults.

LANGUAGE: typescript
CODE:
table.getState().rowSelection //read the row selection state
table.setRowSelection((old) => ({...old})) //set the row selection state
table.resetRowSelection() //reset the row selection state

----------------------------------------

TITLE: Column Pinning State Structure in TanStack Table
DESCRIPTION: Defines the TypeScript types for column pinning state, including position types and state structure with left and right pinned column arrays.

LANGUAGE: tsx
CODE:
export type ColumnPinningPosition = false | 'left' | 'right'

export type ColumnPinningState = {
  left?: string[]
  right?: string[]
}


export type ColumnPinningTableState = {
  columnPinning: ColumnPinningState
}

----------------------------------------

TITLE: Defining GroupingState Types for TanStack Table
DESCRIPTION: Type definitions for grouping state in TanStack Table. Defines the shape of grouping state as an array of strings representing column IDs and the table state that includes grouping.

LANGUAGE: tsx
CODE:
export type GroupingState = string[]

export type GroupingTableState = {
  grouping: GroupingState
}

----------------------------------------

TITLE: Managing Global Filter State in React Table
DESCRIPTION: Managing global filter state using React's useState hook and connecting it to the table through state and onGlobalFilterChange options to persist filter state outside the table.

LANGUAGE: jsx
CODE:
const [globalFilter, setGlobalFilter] = useState<any>([])

const table = useReactTable({
  // other options...
  state: {
    globalFilter,
  },
  onGlobalFilterChange: setGlobalFilter
})

----------------------------------------

TITLE: Accessing Cell Values in TanStack Table (JavaScript)
DESCRIPTION: Demonstrates how to access data values from cells using the cell.getValue and cell.renderValue APIs, which cache accessor function results for efficient rendering. The example shows retrieving values from specific columns.

LANGUAGE: javascript
CODE:
// Access data from any of the columns
const firstName = cell.getValue('firstName') // read the cell value from the firstName column
const renderedLastName = cell.renderValue('lastName') // render the value from the lastName column

----------------------------------------

TITLE: Configuring Server-Side Pagination in TanStack Table
DESCRIPTION: This snippet shows how to configure manual server-side pagination by setting manualPagination to true and providing either rowCount or pageCount to inform the table about total data size. This setup assumes the provided data is already paginated from the server.

LANGUAGE: jsx
CODE:
import { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  // getPaginationRowModel: getPaginationRowModel(), //not needed for server-side pagination
  manualPagination: true, //turn off client-side pagination
  rowCount: dataQuery.data?.rowCount, //pass in the total row count so the table knows how many pages there are (pageCount calculated internally if not provided)
  // pageCount: dataQuery.data?.pageCount, //alternatively directly pass in pageCount instead of rowCount
});

----------------------------------------

TITLE: Implementing Client-Side Pagination with TanStack Table in React
DESCRIPTION: This code demonstrates how to set up client-side pagination by importing and using the getPaginationRowModel function from TanStack Table. This enables the table to handle pagination logic on the front-end for all loaded data.

LANGUAGE: jsx
CODE:
import { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getPaginationRowModel: getPaginationRowModel(), //load client-side pagination code
});

----------------------------------------

TITLE: Implementing Fuzzy Filtering and Sorting with Match-Sorter in TanStack Table
DESCRIPTION: Example implementation of fuzzy filtering and sorting using @tanstack/match-sorter-utils. Shows how to rank items during filtering and use the stored ranking information for sorting.

LANGUAGE: tsx
CODE:
import { sortingFns } from '@tanstack/react-table'

import { rankItem, compareItems } from '@tanstack/match-sorter-utils'

const fuzzyFilter = (row, columnId, value, addMeta) => {
  // Rank the item
  const itemRank = rankItem(row.getValue(columnId), value)

  // Store the ranking info
  addMeta(itemRank)

  // Return if the item should be filtered in/out
  return itemRank.passed
}

const fuzzySort = (rowA, rowB, columnId) => {
  let dir = 0

  // Only sort by rank if the column has ranking information
  if (rowA.columnFiltersMeta[columnId]) {
    dir = compareItems(
      rowA.columnFiltersMeta[columnId]!,
      rowB.columnFiltersMeta[columnId]!
    )
  }

  // Provide an alphanumeric fallback for when the item ranks are equal
  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir
}

----------------------------------------

TITLE: Defining Sorting State Types in TypeScript
DESCRIPTION: Type definitions for the sorting state in TanStack Table. The sorting state is defined as an array of objects containing column ID and sort direction.

LANGUAGE: tsx
CODE:
type ColumnSort = {
  id: string
  desc: boolean
}
type SortingState = ColumnSort[]

----------------------------------------

TITLE: Accessing Object Properties with Column Helpers
DESCRIPTION: This snippet shows how to access a firstName property from a Person object using the columnHelper or a direct accessorKey definition.

LANGUAGE: tsx
CODE:
columnHelper.accessor('firstName')

// OR

{
  accessorKey: 'firstName',
}

----------------------------------------

TITLE: Table Option sortingFns in tanstack-table
DESCRIPTION: Table option to define custom sorting functions that can be referenced by name in column definitions, with example of implementation and type augmentation.

LANGUAGE: tsx
CODE:
sortingFns?: Record<string, SortingFn>

----------------------------------------

TITLE: Defining Expansion State Types in TanStack Table
DESCRIPTION: Defines the TypeScript types for expansion state in TanStack Table. The state can be either a boolean 'true' (all expanded) or a record mapping row IDs to boolean values indicating expansion state.

LANGUAGE: tsx
CODE:
export type ExpandedState = true | Record<string, boolean>

export type ExpandedTableState = {
  expanded: ExpandedState
}

----------------------------------------

TITLE: Accessing Column Objects from Header and Cell Objects in TanStack Table
DESCRIPTION: This snippet demonstrates how to access column objects from header and cell objects. The column objects contain information that header and cell objects use to render their UI.

LANGUAGE: javascript
CODE:
const column = cell.column; // get column from cell
const column = header.column; // get column from header

----------------------------------------

TITLE: Defining Pagination State Type Structure in TanStack Table
DESCRIPTION: Defines the TypeScript types for pagination state in TanStack Table, including the core PaginationState type with pageIndex and pageSize properties, and how pagination state integrates with the table state.

LANGUAGE: tsx
CODE:
export type PaginationState = {
  pageIndex: number
  pageSize: number
}

export type PaginationTableState = {
  pagination: PaginationState
}

export type PaginationInitialTableState = {
  pagination?: Partial<PaginationState>
}

----------------------------------------

TITLE: Rendering Dynamic Table Content with FlexRender in Vue
DESCRIPTION: This snippet shows how to use the FlexRender component to render dynamic cell content in a Vue table. The component takes the cell's render function and context props to display the appropriate content for each cell.

LANGUAGE: vue
CODE:
import { FlexRender } from '@tanstack/vue-table'

<template>
  <tbody>
    <tr v-for="row in table.getRowModel().rows" :key="row.id">
      <td v-for="cell in row.getVisibleCells()" :key="cell.id">
        <FlexRender
          :render="cell.column.columnDef.cell"
          :props="cell.getContext()"
        />
      </td>
    </tr>
  </tbody>
</template>

----------------------------------------

TITLE: Defining Table Creation Function Signature in TanStack Table
DESCRIPTION: Type definition for the table creation function that accepts table options and returns a table instance. This is the core function signature used across different framework adapters.

LANGUAGE: tsx
CODE:
type useReactTable = <TData extends AnyData>(
  options: TableOptions<TData>
) => Table<TData>

----------------------------------------

TITLE: Rendering Header Groups with JSX in React
DESCRIPTION: This code snippet demonstrates how to render header groups and their header cells in a React component using TanStack Table. It maps over the header groups returned by table.getHeaderGroups() and then maps over each header group's headers array to render individual header cells.

LANGUAGE: jsx
CODE:
<thead>
  {table.getHeaderGroups().map(headerGroup => {
    return (
      <tr key={headerGroup.id}>
        {headerGroup.headers.map(header => ( // map over the headerGroup headers array
          <th key={header.id} colSpan={header.colSpan}>
            {/* */}
          </th>
        ))}
      </tr>
    )
  })}
</thead>

----------------------------------------

TITLE: Configuring Column-Specific Multi-Sort Behavior in TanStack Table
DESCRIPTION: Demonstrates how to disable multi-sorting for specific columns, ensuring that sorting by that column replaces all existing sorting rather than adding to it.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Created At',
    accessorKey: 'createdAt',
    enableMultiSort: false, // always sort by just this column if sorting by this column
  },
  //...
]
//...
const table = useReactTable({
  columns,
  data,
  enableMultiSort: false, // disable multi-sorting for the entire table
})

----------------------------------------

TITLE: Setting Initial Pagination State in TanStack Table
DESCRIPTION: This snippet shows how to set custom initial values for pagination using the initialState option without needing to manage pagination state externally. This approach is useful when you don't need to access the pagination state outside the table.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getPaginationRowModel: getPaginationRowModel(),
  initialState: {
    pagination: {
      pageIndex: 2, //custom initial page index
      pageSize: 25, //custom default page size
    },
  },
});

----------------------------------------

TITLE: Configuring Client-Side Global Filtering in React Table
DESCRIPTION: Enabling client-side global filtering by importing and adding the getFilteredRowModel function to the table options, which provides the filtering functionality.

LANGUAGE: jsx
CODE:
import { useReactTable, getFilteredRowModel } from '@tanstack/react-table'
//...
const table = useReactTable({
  // other options...
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(), // needed for client-side global filtering
})

----------------------------------------

TITLE: Defining getFilteredRowModel Configuration Option in TanStack Table
DESCRIPTION: This function is provided during table setup and returns a function that calculates the filtered row model. It's required for client-side filtering but unnecessary for server-side filtering where the server returns pre-filtered data.

LANGUAGE: tsx
CODE:
getFilteredRowModel?: (
  table: Table<TData>
) => () => RowModel<TData>

----------------------------------------

TITLE: Basic TanStack Table Implementation with Core Row Model
DESCRIPTION: A simple example showing how to initialize TanStack Table with the core row model. This demonstrates the basic setup required for creating a table instance.

LANGUAGE: typescript
CODE:
import { getCoreRowModel, useReactTable } from '@tanstack/react-table'

function Component() {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(), //row model
  })
}

----------------------------------------

TITLE: Properly Memoizing Data Transformations in TanStack Table
DESCRIPTION: Demonstrates the correct approach to handling data transformations by memoizing the result with useMemo to maintain stable references and prevent infinite rendering loops.

LANGUAGE: javascript
CODE:
export default function MyComponent() {
  //✅ GOOD
  const columns = useMemo(() => [
    // ...
  ], []);

  //✅ GOOD
  const { data, isLoading } = useQuery({
    //...
  });

  //✅ GOOD: This will not cause an infinite loop of re-renders because `filteredData` is memoized
  const filteredData = useMemo(() => data?.filter(d => d.isActive) ?? [], [data]);

  const table = useReactTable({
    columns,
    data: filteredData, // stable reference!
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Accessing Row Data from Cells in TanStack Table (JavaScript)
DESCRIPTION: Shows how to access the original row data from any cell using the cell.row.original reference. This allows retrieving data from any field in the row, regardless of which cell is currently being processed.

LANGUAGE: javascript
CODE:
// Even if we are in the scope of a different cell, we can still access the original row data
const firstName = cell.row.original.firstName // { firstName: 'John', lastName: 'Doe' }

----------------------------------------

TITLE: Implementing Custom Fuzzy Filter Function in TypeScript for TanStack Table
DESCRIPTION: Defines a custom fuzzy filter function using the rankItem utility from @tanstack/match-sorter-utils. This function evaluates if a row's value for a specific column approximately matches the filter value and stores the ranking information in metadata.

LANGUAGE: typescript
CODE:
import { rankItem } from '@tanstack/match-sorter-utils';
import { FilterFn } from '@tanstack/table';

const fuzzyFilter: FilterFn<any> = (row, columnId, value, addMeta) => {
  // Rank the item
  const itemRank = rankItem(row.getValue(columnId), value)

  // Store the itemRank info
  addMeta({ itemRank })

  // Return if the item should be filtered in/out
  return itemRank.passed
}

----------------------------------------

TITLE: Table Option getSortedRowModel in tanstack-table
DESCRIPTION: Table option for a function that retrieves the sorted row model, required for client-side sorting but not for server-side sorting.

LANGUAGE: tsx
CODE:
getSortedRowModel?: (table: Table<TData>) => () => RowModel<TData>

----------------------------------------

TITLE: Setting Initial Column Filter State in React Table
DESCRIPTION: Code snippet showing how to set initial column filter state using the initialState option in the table configuration.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  //...
  initialState: {
    columnFilters: [
      {
        id: 'name',
        value: 'John', // filter the name column by 'John' by default
      },
    ],
  },
})

----------------------------------------

TITLE: Adding a Custom Feature to TanStack Table
DESCRIPTION: This snippet shows how to add a custom feature to a TanStack Table instance by passing it to the _features option when creating the table.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  _features: [DensityFeature], //pass the new feature to merge with all of the built-in features under the hood
  columns,
  data,
  //..
})

----------------------------------------

TITLE: Configuring a Column with Both Fuzzy Filtering and Sorting
DESCRIPTION: Shows how to configure a column definition to use both fuzzy filtering and fuzzy sorting. This configuration enables both approximate matching of column values and ranking-based sorting of the filtered results.

LANGUAGE: typescript
CODE:
{
  accessorFn: row => `${row.firstName} ${row.lastName}`,
  id: 'fullName',
  header: 'Full Name',
  cell: info => info.getValue(),
  filterFn: 'fuzzy', //using our custom fuzzy filter function
  sortFn: 'fuzzySort', //using our custom fuzzy sort function
}

----------------------------------------

TITLE: Get Pagination Row Model Method in TanStack Table
DESCRIPTION: The getPaginationRowModel method returns the row model after pagination has been applied. This provides access to just the current page of data.

LANGUAGE: tsx
CODE:
getPaginationRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Defining Column ID in TanStack Table
DESCRIPTION: The id property is a unique identifier for columns, resolved in order of priority from manual id property, accessor key, or header string.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Defining Nested Object Type for Column Definitions
DESCRIPTION: This snippet defines a Person type with nested objects for name and info properties, demonstrating the structure needed for deep property access.

LANGUAGE: typescript
CODE:
type Person = {
  name: {
    first: string
    last: string
  }
  info: {
    age: number
    visits: number
  }
}

----------------------------------------

TITLE: Combining Grouping with Row Expansion in TanStack Table
DESCRIPTION: Demonstrates how to enable both grouping and expanding functionality to allow users to expand and collapse grouped rows in a TanStack table.

LANGUAGE: tsx
CODE:
import { getGroupedRowModel, getExpandedRowModel} from '@tanstack/react-table'

const table = useReactTable({
  // other options...
  getGroupedRowModel: getGroupedRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
})

----------------------------------------

TITLE: Rendering Headers from HeaderGroups in TanStack Table with JSX
DESCRIPTION: This snippet demonstrates how to map over headerGroup.headers array to render table headers. It creates a table header structure by iterating through header groups and their headers, assigning appropriate keys and colSpan attributes.

LANGUAGE: jsx
CODE:
<thead>
  {table.getHeaderGroups().map(headerGroup => {
    return (
      <tr key={headerGroup.id}>
        {headerGroup.headers.map(header => ( // map over the headerGroup headers array
          <th key={header.id} colSpan={header.colSpan}>
            {/* */}
          </th>
        ))}
      </tr>
    )
  })}
</thead>

----------------------------------------

TITLE: Defining Row ID Getter Type in TanStack Table
DESCRIPTION: Type definition for the getRowId function which is used to derive unique IDs for table rows, essential for stable row identification especially with server-side operations.

LANGUAGE: tsx
CODE:
getRowId?: (
  originalRow: TData,
  index: number,
  parent?: Row<TData>
) => string

----------------------------------------

TITLE: Implementing Column Resize Handlers
DESCRIPTION: Shows how to connect mouse and touch event handlers to column resize functionality using the header.getResizeHandler() API.

LANGUAGE: tsx
CODE:
<ColumnResizeHandle
  onMouseDown={header.getResizeHandler()} //for desktop
  onTouchStart={header.getResizeHandler()} //for mobile
/>

----------------------------------------

TITLE: Implementing Custom Fuzzy Filter and Sort Functions with Match-Sorter
DESCRIPTION: Example of implementing a custom fuzzy filter function with ranking capabilities using match-sorter-utils. This snippet shows how to rank items during filtering and use that metadata for sorting.

LANGUAGE: tsx
CODE:
import { sortingFns } from '@tanstack/[adapter]-table'

import { rankItem, compareItems } from '@tanstack/match-sorter-utils'

const fuzzyFilter = (row, columnId, value, addMeta) => {
  // Rank the item
  const itemRank = rankItem(row.getValue(columnId), value)

  // Store the ranking info
  addMeta(itemRank)

  // Return if the item should be filtered in/out
  return itemRank.passed
}

const fuzzySort = (rowA, rowB, columnId) => {
  let dir = 0

  // Only sort by rank if the column has ranking information
  if (rowA.columnFiltersMeta[columnId]) {
    dir = compareItems(
      rowA.columnFiltersMeta[columnId]!,
      rowB.columnFiltersMeta[columnId]!
    )
  }

  // Provide an alphanumeric fallback for when the item ranks are equal
  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir
}

----------------------------------------

TITLE: Retrieving Faceted Row Model in TanStack Table (TSX)
DESCRIPTION: Method that returns the row model with all other column filters applied, excluding its own filter. Useful for displaying faceted result counts. Requires a valid getFacetedRowModel function to be passed to options.facetedRowModel.

LANGUAGE: tsx
CODE:
type getFacetedRowModel = () => RowModel<TData>

----------------------------------------

TITLE: Filter Function Type Signature in TanStack Table
DESCRIPTION: Type definitions for filter functions in TanStack Table. Defines the structure of filter functions including optional methods for value transformation and auto-removal testing.

LANGUAGE: tsx
CODE:
export type FilterFn<TData extends AnyData> = {
  (
    row: Row<TData>,
    columnId: string,
    filterValue: any,
    addMeta: (meta: any) => void
  ): boolean
  resolveFilterValue?: TransformFilterValueFn<TData>
  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>
  addMeta?: (meta?: any) => void
}

export type TransformFilterValueFn<TData extends AnyData> = (
  value: any,
  column?: Column<TData>
) => unknown

export type ColumnFilterAutoRemoveTestFn<TData extends AnyData> = (
  value: any,
  column?: Column<TData>
) => boolean

export type CustomFilterFns<TData extends AnyData> = Record<
  string,
  FilterFn<TData>
>

----------------------------------------

TITLE: Rendering Cell Content with flexRender in TanStack Table
DESCRIPTION: Demonstrates how to use the flexRender utility with cell context to render cell content using custom templates.

LANGUAGE: tsx
CODE:
flexRender(cell.column.columnDef.cell, cell.getContext())

----------------------------------------

TITLE: Retrieving All Leaf Columns in TanStack Table
DESCRIPTION: Function that returns all leaf-node columns in the table flattened to a single level, excluding parent columns.

LANGUAGE: tsx
CODE:
type getAllLeafColumns = () => Column<TData>[]

----------------------------------------

TITLE: Hierarchical Data Structure for Expandable Rows
DESCRIPTION: Example of a data structure with hierarchical relationships that can be used with expanding features, where Person objects can have children arrays.

LANGUAGE: typescript
CODE:
type Person = {
  id: number
  name: string
  age: number
  children?: Person[] | undefined
}

const data: Person[] =  [
  { id: 1, 
  name: 'John', 
  age: 30, 
  children: [
      { id: 2, name: 'Jane', age: 5 },
      { id: 5, name: 'Jim', age: 10 }
    ] 
  },
  { id: 3,
   name: 'Doe', 
   age: 40, 
    children: [
      { id: 4, name: 'Alice', age: 10 }
    ] 
  },
]

----------------------------------------

TITLE: Configuring Sub-Rows for Expanding
DESCRIPTION: This snippet demonstrates how to use the getSubRows function to specify child rows for expansion from a hierarchical data structure.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  // other options...
  getSubRows: (row) => row.children, // return the children array as sub-rows
  getCoreRowModel: getCoreRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
})

----------------------------------------

TITLE: Defining Deep-Nested JSON Data Structure for TanStack Table
DESCRIPTION: Example JSON structure with nested properties (name and info objects) that demonstrates how TanStack Table can handle deeply nested data structures.

LANGUAGE: json
CODE:
[
  {
    "name": {
      "first": "Tanner",
      "last": "Linsley"
    },
    "info": {
      "age": 33,
      "visits": 100,
    }
  },
  {
    "name": {
      "first": "Kevin",
      "last": "Vandy"
    },
    "info": {
      "age": 27,
      "visits": 200,
    }
  }
]

----------------------------------------

TITLE: Creating a Table Feature Object for Density Control
DESCRIPTION: This code creates a TableFeature object that implements a density feature for TanStack Table. It defines initial state, default options, and instance methods for controlling table density (sm, md, lg), which affects cell padding.

LANGUAGE: typescript
CODE:
export const DensityFeature: TableFeature<any> = { //Use the TableFeature type!!
  // define the new feature's initial state
  getInitialState: (state): DensityTableState => {
    return {
      density: 'md',
      ...state,
    }
  },

  // define the new feature's default options
  getDefaultOptions: <TData extends RowData>(
    table: Table<TData>
  ): DensityOptions => {
    return {
      enableDensity: true,
      onDensityChange: makeStateUpdater('density', table),
    } as DensityOptions
  },
  // if you need to add a default column definition...
  // getDefaultColumnDef: <TData extends RowData>(): Partial<ColumnDef<TData>> => {
  //   return { meta: {} } //use meta instead of directly adding to the columnDef to avoid typescript stuff that's hard to workaround
  // },

  // define the new feature's table instance methods
  createTable: <TData extends RowData>(table: Table<TData>): void => {
    table.setDensity = updater => {
      const safeUpdater: Updater<DensityState> = old => {
        let newState = functionalUpdate(updater, old)
        return newState
      }
      return table.options.onDensityChange?.(safeUpdater)
    }
    table.toggleDensity = value => {
      table.setDensity(old => {
        if (value) return value
        return old === 'lg' ? 'md' : old === 'md' ? 'sm' : 'lg' //cycle through the 3 options
      })
    }
  },

  // if you need to add row instance APIs...
  // createRow: <TData extends RowData>(row, table): void => {},
  // if you need to add cell instance APIs...
  // createCell: <TData extends RowData>(cell, column, row, table): void => {},
  // if you need to add column instance APIs...
  // createColumn: <TData extends RowData>(column, table): void => {},
  // if you need to add header instance APIs...
  // createHeader: <TData extends RowData>(header, table): void => {},
}

----------------------------------------

TITLE: Configuring Global Fuzzy Filtering in TanStack Table
DESCRIPTION: Demonstrates how to configure TanStack Table to use fuzzy filtering for global filtering operations. This setup registers the custom fuzzy filter function and applies it to global filtering with required models for filtering and sorting.

LANGUAGE: typescript
CODE:
const table = useReactTable({ // or your framework's equivalent function
    columns,
    data,
    filterFns: {
      fuzzy: fuzzyFilter, //define as a filter function that can be used in column definitions
    },
    globalFilterFn: 'fuzzy', //apply fuzzy filter to the global filter (most common use case for fuzzy filter)
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(), //client side filtering
    getSortedRowModel: getSortedRowModel(), //client side sorting needed if you want to use sorting too.
})

----------------------------------------

TITLE: Retrieving a Single Column by ID using getColumn API in TanStack Table
DESCRIPTION: This snippet shows how to retrieve a specific column by its ID using the table.getColumn API. This is useful when you need to access a particular column's properties or methods.

LANGUAGE: javascript
CODE:
const column = table.getColumn('firstName');

----------------------------------------

TITLE: groupedColumnMode Table Option in TanStack Table
DESCRIPTION: Table configuration option to control how grouped columns are handled in the column layout - reordering them to the start, removing them, or leaving them in place.

LANGUAGE: tsx
CODE:
groupedColumnMode?: false | 'reorder' | 'remove' // default: `reorder`

----------------------------------------

TITLE: Default Column Sizing Configuration in TanStack Table
DESCRIPTION: Defines the default column sizing values used by TanStack Table, including the default width, minimum width, and maximum width of columns.

LANGUAGE: tsx
CODE:
export const defaultColumnSizing = {
  size: 150,
  minSize: 20,
  maxSize: Number.MAX_SAFE_INTEGER,
}

----------------------------------------

TITLE: enableGrouping Table Option in TanStack Table
DESCRIPTION: Table configuration option to globally enable or disable grouping functionality across all columns, providing a master switch for grouping features.

LANGUAGE: tsx
CODE:
enableGrouping?: boolean

----------------------------------------

TITLE: Using accessorKey Option in ColumnDef
DESCRIPTION: Defines the key from the row object to extract values for the column.

LANGUAGE: tsx
CODE:
accessorKey?: string & typeof TData

----------------------------------------

TITLE: Retrieving a Specific Row by ID in TanStack Table
DESCRIPTION: Demonstrates how to access a specific row by its ID using the table.getRow API. This method allows you to retrieve row objects directly when you know the unique identifier.

LANGUAGE: javascript
CODE:
const row = table.getRow(rowId)

----------------------------------------

TITLE: Configuring Column and Global Sorting Functions
DESCRIPTION: Example showing how to configure both built-in and custom sorting functions at both column and table levels.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Name',
    accessorKey: 'name',
    sortingFn: 'alphanumeric', // use built-in sorting function by name
  },
  {
    header: () => 'Age',
    accessorKey: 'age',
    sortingFn: 'myCustomSortingFn', // use custom global sorting function
  },
  {
    header: () => 'Birthday',
    accessorKey: 'birthday',
    sortingFn: 'datetime', // recommended for date columns
  },
  {
    header: () => 'Profile',
    accessorKey: 'profile',
    // use custom sorting function directly
    sortingFn: (rowA, rowB, columnId) => {
      return rowA.original.someProperty - rowB.original.someProperty
    },
  }
]
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getSortedRowModel: getSortedRowModel(),
  sortingFns: { //add a custom sorting function
    myCustomSortingFn: (rowA, rowB, columnId) => {
      return rowA.original[columnId] > rowB.original[columnId] ? 1 : rowA.original[columnId] < rowB.original[columnId] ? -1 : 0
    },
  },
})

----------------------------------------

TITLE: Accessing Row Data with AccessorFn in TanStack Table
DESCRIPTION: The accessorFn property contains the resolved function used to extract values from each row. It's defined when a column has a valid accessor key or function.

LANGUAGE: tsx
CODE:
accessorFn?: AccessorFn<TData>

----------------------------------------

TITLE: Defining Meta Option Type in TanStack Table
DESCRIPTION: Type definition for the meta property which allows passing arbitrary data or functions to be accessed throughout the table instance. This can be extended via declaration merging.

LANGUAGE: tsx
CODE:
meta?: TableMeta // This interface is extensible via declaration merging. See below!

----------------------------------------

TITLE: toggleAllColumnsVisible Table API Method
DESCRIPTION: Table API method to toggle visibility of all columns together. Optional value parameter can explicitly set the visibility state.

LANGUAGE: tsx
CODE:
toggleAllColumnsVisible: (value?: boolean) => void

----------------------------------------

TITLE: Setting Custom Initial State in Angular TanStack Table
DESCRIPTION: Demonstrates how to customize the initial default values for various table states using the initialState option, including column order, visibility, expansion, and sorting settings.

LANGUAGE: jsx
CODE:
table = createAngularTable(() => ({
  columns: this.columns,
  data: this.data(),
  initialState: {
    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
    columnVisibility: {
      id: false //hide the id column by default
    },
    expanded: true, //expand all rows by default
    sorting: [
      {
        id: 'age',
        desc: true //sort by age in descending order by default
      }
    ]
  },
  //...
}))

----------------------------------------

TITLE: columnResizeMode Table Option
DESCRIPTION: Option that determines when the columnSizing state is updated: 'onChange' during dragging or 'onEnd' when the resize handle is released.

LANGUAGE: tsx
CODE:
columnResizeMode?: 'onChange' | 'onEnd'

----------------------------------------

TITLE: Updating Table Header Rendering
DESCRIPTION: Changes required for rendering table headers, replacing getHeaderProps() with manual attributes and render() with flexRender(). This demonstrates the more explicit approach in v8.

LANGUAGE: tsx
CODE:
- <th {...header.getHeaderProps()}>{cell.render('Header')}</th> // [!code --]
+ <th colSpan={header.colSpan} key={column.id}> // [!code ++]
+   {flexRender( // [!code ++]
+     header.column.columnDef.header, // [!code ++]
+     header.getContext() // [!code ++]
+   )} // [!code ++]
+ </th> // [!code ++]

----------------------------------------

TITLE: Using footer Option in ColumnDef
DESCRIPTION: Defines the footer display for the column, accepting either a string or a function that returns the rendered footer value with access to table, header, and column properties.

LANGUAGE: tsx
CODE:
footer?:
  | string
  | ((props: {
      table: Table<TData>
      header: Header<TData>
      column: Column<TData>
    }) => unknown)

----------------------------------------

TITLE: Implementing Manual Server-Side Sorting
DESCRIPTION: Configuration for manual server-side sorting by disabling client-side sorting with the manualSorting option set to true.

LANGUAGE: jsx
CODE:
const [sorting, setSorting] = useState<SortingState>([])
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  //getSortedRowModel: getSortedRowModel(), //not needed for manual sorting
  manualSorting: true, //use pre-sorted row model instead of sorted row model
  state: {
    sorting,
  },
  onSortingChange: setSorting,
})

----------------------------------------

TITLE: Accessing Row Model Data Structures in TanStack Table
DESCRIPTION: Example showing how to access the different data structures provided by row models in TanStack Table. This includes rows arrays, flattened rows, and row access by ID.

LANGUAGE: typescript
CODE:
console.log(table.getRowModel().rows) // array of rows
console.log(table.getRowModel().flatRows) // array of rows, but all sub-rows are flattened into the top level
console.log(table.getRowModel().rowsById['row-id']) // object of rows, where each row is keyed by its `id`

----------------------------------------

TITLE: Enabling Row Selection with Table Options
DESCRIPTION: Sets whether row selection is enabled globally or conditionally for specific rows based on a predicate function.

LANGUAGE: tsx
CODE:
enableRowSelection?: boolean | ((row: Row<TData>) => boolean)

----------------------------------------

TITLE: Accessing Table State in TanStack Table (React)
DESCRIPTION: Demonstrates how to access the internal state of a TanStack Table instance using the table.getState() API, either for the entire state or for specific state properties.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  //...
})

console.log(table.getState()) //access the entire internal state
console.log(table.getState().rowSelection) //access just the row selection state

----------------------------------------

TITLE: Enabling Client-Side Expanding in TanStack Table
DESCRIPTION: This snippet shows how to enable client-side expanding by defining the getExpandedRowModel function in the table options.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  // other options...
  getExpandedRowModel: getExpandedRowModel(),
})

----------------------------------------

TITLE: Managing Column Pinning State in React
DESCRIPTION: Shows how to manage the column pinning state in a React component using useState and passing the state to the useReactTable hook.

LANGUAGE: jsx
CODE:
const [columnPinning, setColumnPinning] = useState<ColumnPinningState>({
  left: [],
  right: [],
});
//...
const table = useReactTable({
  //...
  state: {
    columnPinning,
    //...
  }
  onColumnPinningChange: setColumnPinning,
  //...
});

----------------------------------------

TITLE: Table Option enableSorting in tanstack-table
DESCRIPTION: Table option to globally enable or disable sorting functionality for the entire table.

LANGUAGE: tsx
CODE:
enableSorting?: boolean

----------------------------------------

TITLE: Defining Sorting State Types in tanstack-table
DESCRIPTION: TypeScript type definitions for sorting state in tanstack-table, including SortDirection, ColumnSort, SortingState, and SortingTableState interfaces.

LANGUAGE: tsx
CODE:
export type SortDirection = 'asc' | 'desc'

export type ColumnSort = {
  id: string
  desc: boolean
}

export type SortingState = ColumnSort[]

export type SortingTableState = {
  sorting: SortingState
}

----------------------------------------

TITLE: Updating Table Initialization and Feature Imports
DESCRIPTION: Migration from the plugin-based system in v7 to the function-based row models in v8. Shows how to replace hooks like usePagination with imported function calls.

LANGUAGE: tsx
CODE:
- import { useTable, usePagination, useSortBy } from 'react-table'; // [!code --]
+ import { // [!code ++]
+   useReactTable, // [!code ++]
+   getCoreRowModel, // [!code ++]
+   getPaginationRowModel, // [!code ++]
+   getSortedRowModel // [!code ++]
+ } from '@tanstack/react-table'; // [!code ++]

// ...

-   const tableInstance = useTable( // [!code --]
-     { columns,  data }, // [!code --]
-     useSortBy, // [!code --]
-     usePagination, //order of hooks used to matter // [!code --]
-     // etc. // [!code --]
-   ); // [!code --]
+   const tableInstance = useReactTable({ // [!code ++]
+     columns, // [!code ++]
+     data, // [!code ++]
+     getCoreRowModel: getCoreRowModel(), // [!code ++]
+     getPaginationRowModel: getPaginationRowModel(), // [!code ++]
+     getSortedRowModel: getSortedRowModel(), //order doesn't matter anymore! // [!code ++]
+     // etc. // [!code ++]
+   }); // [!code ++]

----------------------------------------

TITLE: Row Count Configuration Option in TanStack Table
DESCRIPTION: The rowCount option allows you to supply a total row count value when manually controlling pagination. The pageCount will be automatically calculated from rowCount and pageSize.

LANGUAGE: tsx
CODE:
rowCount?: number

----------------------------------------

TITLE: Rendering Custom Component in Table Cell
DESCRIPTION: Illustrates how to create and render a custom Angular component in a table cell using the flexRenderComponent function, with inputs, outputs and optional injector.

LANGUAGE: typescript
CODE:
import {flexRenderComponent} from "./flex-render-component";
import {ChangeDetectionStrategy, input, output} from "@angular/core";

@Component({
  template: `
    ...
  `,
  standalone: true,
  changeDetectionStrategy: ChangeDetectionStrategy.OnPush,
  host: {
    '(click)': 'clickEvent.emit($event)'
  }
})
class CustomCell {
  readonly content = input.required<string>();
  readonly cellType = input<MyType>();

  // An output that will emit for every cell click
  readonly clickEvent = output<Event>();
}

class AppComponent {
  columns: ColumnDef<unknown>[] = [
    {
      id: 'custom-cell',
      header: () => {
        const translateService = inject(TranslateService);
        return translateService.translate('...');
      },
      cell: (context) => {
        return flexRenderComponent(
          MyCustomComponent,
          {
            injector, // Optional injector
            inputs: {
              // Mandatory input since we are using `input.required()
              content: context.row.original.rowProperty,
              // cellType? - Optional input
            },
            outputs: {
              clickEvent: () => {
                // Do something
              }
            }
          }
        )
      },
    },
  ]
}

----------------------------------------

TITLE: Rendering Headers with flexRender in TanStack Table
DESCRIPTION: This snippet shows how to use the flexRender utility to properly render header content. It handles various column definition scenarios by providing the header column definition and context to the flexRender function.

LANGUAGE: jsx
CODE:
{headerGroup.headers.map(header => (
  <th key={header.id} colSpan={header.colSpan}>
    {/* Handles all possible header column def scenarios for `header` */}
    {flexRender(header.column.columnDef.header, header.getContext())}
  </th>
))}

----------------------------------------

TITLE: aggregatedCell Column Definition Option in TanStack Table
DESCRIPTION: The column definition option for customizing cell rendering when the cell contains aggregated data. Accepts a renderable component or function with context details.

LANGUAGE: tsx
CODE:
aggregatedCell?: Renderable<
  {
    table: Table<TData>
    row: Row<TData>
    column: Column<TData>
    cell: Cell<TData>
    getValue: () => any
    renderValue: () => any
  }
>

----------------------------------------

TITLE: AggregationFn Type Signature in TanStack Table
DESCRIPTION: Type definition for aggregation functions used in TanStack Table. These functions receive methods to access leaf and child rows and return an aggregated value for grouped data.

LANGUAGE: tsx
CODE:
export type AggregationFn<TData extends AnyData> = (
  getLeafRows: () => Row<TData>[],
  getChildRows: () => Row<TData>[]
) => any

----------------------------------------

TITLE: Checking Multi-Selection Capability
DESCRIPTION: Row API method that returns whether the row can participate in multi-selection based on configuration options.

LANGUAGE: tsx
CODE:
getCanMultiSelect: () => boolean

----------------------------------------

TITLE: Initializing Stable Data References in React for TanStack Table
DESCRIPTION: Examples of creating stable references for data arrays in React to prevent infinite re-renders when working with TanStack Table.

LANGUAGE: typescript
CODE:
//note: data needs a "stable" reference in order to prevent infinite re-renders
const data: User[] = []
//or
const [data, setData] = React.useState<User[]>([])
//or
const data = ref<User[]>([]) //vue
//etc...

----------------------------------------

TITLE: Get Pre-Pagination Row Model Method in TanStack Table
DESCRIPTION: The getPrePaginationRowModel method returns the row model before any pagination has been applied. This provides access to the complete dataset.

LANGUAGE: tsx
CODE:
getPrePaginationRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Defining Column Filters State Structure in TanStack Table
DESCRIPTION: The TypeScript interface for column filters state in TanStack Table. It defines the structure for storing filter state with an array of column filter objects, each containing an id and value.

LANGUAGE: tsx
CODE:
export interface ColumnFiltersTableState {
  columnFilters: ColumnFiltersState
}

export type ColumnFiltersState = ColumnFilter[]

export interface ColumnFilter {
  id: string
  value: unknown
}

----------------------------------------

TITLE: Checking All Rows Selection Status
DESCRIPTION: Returns a boolean indicating whether all rows in the table are currently selected.

LANGUAGE: tsx
CODE:
getIsAllRowsSelected: () => boolean

----------------------------------------

TITLE: Applying Fuzzy Filtering to Specific Columns in TanStack Table
DESCRIPTION: Shows how to apply fuzzy filtering to specific columns by configuring column definitions. This example demonstrates setting the filterFn property on a column that combines firstName and lastName fields.

LANGUAGE: typescript
CODE:
const column = [
  {
    accessorFn: row => `${row.firstName} ${row.lastName}`,
    id: 'fullName',
    header: 'Full Name',
    cell: info => info.getValue(),
    filterFn: 'fuzzy', //using our custom fuzzy filter function
  },
  // other columns...
];

----------------------------------------

TITLE: Using header Option in ColumnDef
DESCRIPTION: Defines the header display for the column, accepting either a string or a function that returns the rendered header value with access to table, header, and column properties.

LANGUAGE: tsx
CODE:
header?:
  | string
  | ((props: {
      table: Table<TData>
      header: Header<TData>
      column: Column<TData>
    }) => unknown)

----------------------------------------

TITLE: Accessing Row Values in TanStack Table
DESCRIPTION: Demonstrates how to retrieve cell values from a row using the row.getValue and row.renderValue APIs. These methods efficiently access values by column ID and provide caching for performance.

LANGUAGE: javascript
CODE:
// Access data from any of the columns
const firstName = row.getValue('firstName') // read the row value from the firstName column
const renderedLastName = row.renderValue('lastName') // render the value from the lastName column

----------------------------------------

TITLE: Configuring Single Row Selection in TanStack Table
DESCRIPTION: Shows how to restrict selection to only one row at a time by disabling multi-row selection, which is useful for implementing radio button-style selection behavior.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  //...
  enableMultiRowSelection: false, //only allow a single row to be selected at once
  // enableMultiRowSelection: row => row.original.age > 18, //only allow a single row to be selected at once for adults
})

----------------------------------------

TITLE: Setting Column Pinning State
DESCRIPTION: Method to set or update the column pinning state using an updater function.

LANGUAGE: tsx
CODE:
setColumnPinning: (updater: Updater<ColumnPinningState>) => void

----------------------------------------

TITLE: Implementing Custom Expanding UI in TanStack Table
DESCRIPTION: Implementation of custom expanding UI with getRowCanExpand and rendering expanded content in a separate row that spans across the table width.

LANGUAGE: typescript
CODE:
//...
const table = useReactTable({
  // other options...
  getRowCanExpand: (row) => true, // Add your logic to determine if a row can be expanded. True means all rows include expanded data
  getCoreRowModel: getCoreRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
})
//...
<tbody>
  {table.getRowModel().rows.map((row) => (
    <React.Fragment key={row.id}>
     {/* Normal row UI */}
      <tr>
        {row.getVisibleCells().map((cell) => (
          <td key={cell.id}>
            <FlexRender
              render={cell.column.columnDef.cell}
              props={cell.getContext()}
            />
          </td>
        ))}
      </tr>
      {/* If the row is expanded, render the expanded UI as a separate row with a single cell that spans the width of the table */}
      {row.getIsExpanded() && (
        <tr>
          <td colSpan={row.getAllCells().length}> // The number of columns you wish to span for the expanded data if it is not a row that shares the same columns as the parent row
            // Your custom UI goes here
          </td>
        </tr>
      )}
    </React.Fragment>
  ))}
</tbody>
//...

----------------------------------------

TITLE: Get Page Options Method in TanStack Table
DESCRIPTION: The getPageOptions method returns an array of available page options (zero-indexed) for the current page size. This is useful for building pagination UI components.

LANGUAGE: tsx
CODE:
getPageOptions: () => number[]

----------------------------------------

TITLE: Initializing a Table with createSolidTable in Solid.js
DESCRIPTION: This snippet demonstrates how to import and use the createSolidTable function to initialize a table instance in a Solid.js application. The function takes an options object as its parameter and returns a table instance that can then be used to render the table components.

LANGUAGE: tsx
CODE:
import { createSolidTable } from '@tanstack/solid-table'

function App() {
  const table = createSolidTable(options)

  // ...render your table
}

----------------------------------------

TITLE: Defining Array Type for Column Definitions
DESCRIPTION: This snippet defines a Sales type as a tuple containing a Date and a number, which can be accessed by index in column definitions.

LANGUAGE: typescript
CODE:
type Sales = [Date, number]

----------------------------------------

TITLE: Installing TanStack Table V8
DESCRIPTION: Commands to uninstall the old React Table packages and install the new TanStack Table package. The new version comes with built-in TypeScript definitions.

LANGUAGE: bash
CODE:
npm uninstall react-table @types/react-table
npm install @tanstack/react-table

----------------------------------------

TITLE: Disabling Column Resizing for Specific Columns
DESCRIPTION: Shows how to disable column resizing for specific columns using the enableResizing column option, while maintaining the default resizing capability for other columns.

LANGUAGE: tsx
CODE:
const columns = [
  {
    accessorKey: 'id',
    enableResizing: false, //disable resizing for just this column
    size: 200, //starting column size
  },
  //...
]

----------------------------------------

TITLE: Using accessorFn Option in ColumnDef
DESCRIPTION: Provides a function to extract values for the column from each row, with access to both the original row data and index.

LANGUAGE: tsx
CODE:
accessorFn?: (originalRow: TData, index: number) => any

----------------------------------------

TITLE: Table Option: getRowCanExpand
DESCRIPTION: A custom function to override the default logic for determining if a row can be expanded.

LANGUAGE: tsx
CODE:
getRowCanExpand?: (row: Row<TData>) => boolean

----------------------------------------

TITLE: Setting Initial Column Visibility with initialState in TanStack Table
DESCRIPTION: This snippet shows how to set the initial column visibility state using the initialState option without managing state externally. This approach is useful when you don't need to access or control visibility outside the table.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  //...
  initialState: {
    columnVisibility: {
      columnId1: true,
      columnId2: false, //hide this column by default
      columnId3: true,
    },
    //...
  },
});

----------------------------------------

TITLE: Table API Method: getToggleAllRowsExpandedHandler
DESCRIPTION: A method that returns a handler for toggling expansion state of all rows, designed for checkbox inputs.

LANGUAGE: tsx
CODE:
getToggleAllRowsExpandedHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Column Definition sortingFn Option in tanstack-table
DESCRIPTION: Type definition for the sortingFn option in column definitions, which can be a string referencing a built-in or custom sorting function, or a custom function implementation.

LANGUAGE: tsx
CODE:
sortingFn?: SortingFn | keyof SortingFns | keyof BuiltInSortingFns

----------------------------------------

TITLE: Table API Method: getIsSomeRowsExpanded
DESCRIPTION: A method that checks if any rows in the table are currently expanded.

LANGUAGE: tsx
CODE:
getIsSomeRowsExpanded: () => boolean

----------------------------------------

TITLE: resetColumnSizing Table API Method
DESCRIPTION: Method that resets column sizing to its initial state or default state if defaultState is true.

LANGUAGE: tsx
CODE:
resetColumnSizing: (defaultState?: boolean) => void

----------------------------------------

TITLE: getToggleVisibilityHandler Column API Method
DESCRIPTION: Column API method that returns a function for binding to event handlers (like checkbox events) to toggle column visibility.

LANGUAGE: tsx
CODE:
getToggleVisibilityHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Extending ColumnMeta Interface
DESCRIPTION: Shows how to extend the ColumnMeta interface through declaration merging to add custom metadata properties to columns.

LANGUAGE: tsx
CODE:
import '@tanstack/react-table' //or vue, svelte, solid, qwik, etc.

declare module '@tanstack/react-table' {
  interface ColumnMeta<TData extends RowData, TValue> {
    foo: string
  }
}

----------------------------------------

TITLE: Managing Expanded Rows State
DESCRIPTION: This snippet shows how to control the expanded state of rows by using React's useState hook with the expanded state and onExpandedChange option.

LANGUAGE: typescript
CODE:
const [expanded, setExpanded] = useState<ExpandedState>({})

const table = useReactTable({
  // other options...
  state: {
    expanded: expanded, // must pass expanded state back to the table
  },
  onExpandedChange: setExpanded
})

----------------------------------------

TITLE: Updating Import Statement
DESCRIPTION: Changes required in the import statement when migrating from React Table to TanStack Table. The package name and hook name have both changed.

LANGUAGE: tsx
CODE:
- import { useTable } from 'react-table' // [!code --]
+ import { useReactTable } from '@tanstack/react-table' // [!code ++]

----------------------------------------

TITLE: Implementing Fully Controlled State in Vue Table
DESCRIPTION: Shows how to implement fully controlled state management for a Vue TanStack Table by using the onStateChange option and setOptions API.

LANGUAGE: jsx
CODE:
//create a table instance with default state values
const table = useVueTable({
  get columns() {
    return columns.value
  },
  data,
  //... Note: `state` values are NOT passed in yet
})

const state = ref({
  ...table.initialState,
  pagination: {
    pageIndex: 0,
    pageSize: 15
  }
})
const setState = updater => {
  state.value = updater instanceof Function ? updater(state.value) : updater
}

//Use the table.setOptions API to merge our fully controlled state onto the table instance
table.setOptions(prev => ({
  ...prev, //preserve any other options that we have set up above
  get state() {
    return state.value
  },
  onStateChange: setState //any state changes will be pushed up to our own state management
}))

----------------------------------------

TITLE: Setting Default Pinned Columns with initialState
DESCRIPTION: Demonstrates how to pin columns by default using the initialState option in the useReactTable hook without explicitly managing state.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  //...
  initialState: {
    columnPinning: {
      left: ['expand-column'],
      right: ['actions-column'],
    },
    //...
  }
  //...
});

----------------------------------------

TITLE: Defining Default Column Option Type in TanStack Table
DESCRIPTION: Type definition for the defaultColumn property which provides default options for all columns, useful for setting common behaviors across all columns in the table.

LANGUAGE: tsx
CODE:
defaultColumn?: Partial<ColumnDef<TData>>

----------------------------------------

TITLE: setGrouping Table API Method in TanStack Table
DESCRIPTION: Table API method to update the grouping state, allowing programmatic control over which columns are used for grouping data.

LANGUAGE: tsx
CODE:
setGrouping: (updater: Updater<GroupingState>) => void

----------------------------------------

TITLE: SortingFnOption Type Definition in tanstack-table
DESCRIPTION: Type definition for the possible sorting function options that can be provided to column definitions, including built-in functions, custom functions, or 'auto'.

LANGUAGE: tsx
CODE:
export type SortingFnOption<TData extends AnyData> =
  | 'auto'
  | SortingFns
  | BuiltInSortingFns
  | SortingFn<TData>

----------------------------------------

TITLE: getGroupedRowModel Table API Method in TanStack Table
DESCRIPTION: Table API method to access the row model after grouping has been applied, providing the hierarchical grouped data structure.

LANGUAGE: tsx
CODE:
getGroupedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: First Page Navigation Method in TanStack Table
DESCRIPTION: The firstPage method sets the page index to 0, navigating to the first page. This provides a way to jump to the first page programmatically.

LANGUAGE: tsx
CODE:
firstPage: () => void

----------------------------------------

TITLE: Retrieving Cell Value in TanStack Table
DESCRIPTION: Retrieves the value for the cell using the associated column's accessor key or accessor function.

LANGUAGE: tsx
CODE:
getValue: () => any

----------------------------------------

TITLE: Implementing Drag and Drop Column Reordering in TanStack Table
DESCRIPTION: Provides a code example for implementing drag and drop functionality to reorder columns, including state management for tracking moving and target columns and a utility function to update the column order array.

LANGUAGE: tsx
CODE:
const [columnOrder, setColumnOrder] = useState<string[]>(columns.map(c => c.id));

//depending on your dnd solution of choice, you may or may not need state like this
const [movingColumnId, setMovingColumnId] = useState<string | null>(null);
const [targetColumnId, setTargetColumnId] = useState<string | null>(null);

//util function to splice and reorder the columnOrder array
const reorderColumn = <TData extends RowData>(
  movingColumnId: Column<TData>,
  targetColumnId: Column<TData>,
): string[] => {
  const newColumnOrder = [...columnOrder];
  newColumnOrder.splice(
    newColumnOrder.indexOf(targetColumnId),
    0,
    newColumnOrder.splice(newColumnOrder.indexOf(movingColumnId), 1)[0],
  );
  setColumnOrder(newColumnOrder);
};

const handleDragEnd = (e: DragEvent) => {
  if(!movingColumnId || !targetColumnId) return;
  setColumnOrder(reorderColumn(movingColumnId, targetColumnId));
};

//use your dnd solution of choice

----------------------------------------

TITLE: Pagination Change Handler in TanStack Table
DESCRIPTION: The onPaginationChange callback is called when pagination state changes. When provided, you're expected to manage the pagination state yourself and pass it back via tableOptions.state.pagination.

LANGUAGE: tsx
CODE:
onPaginationChange?: OnChangeFn<PaginationState>

----------------------------------------

TITLE: Defining User Data Structure in JSON for TanStack Table
DESCRIPTION: Example JSON structure for user data that will be displayed in a TanStack Table, containing fields like firstName, lastName, age, visits, progress, and status.

LANGUAGE: json
CODE:
[
  {
    "firstName": "Tanner",
    "lastName": "Linsley",
    "age": 33,
    "visits": 100,
    "progress": 50,
    "status": "Married"
  },
  {
    "firstName": "Kevin",
    "lastName": "Vandy",
    "age": 27,
    "visits": 200,
    "progress": 100,
    "status": "Single"
  }
]

----------------------------------------

TITLE: Table Option: onExpandedChange
DESCRIPTION: A callback function triggered when the expanded state changes. When provided, you become responsible for managing expansion state externally.

LANGUAGE: tsx
CODE:
onExpandedChange?: OnChangeFn<ExpandedState>

----------------------------------------

TITLE: Table Option onSortingChange in tanstack-table
DESCRIPTION: Table option for a callback function when sorting state changes, enabling external state management for sorting.

LANGUAGE: tsx
CODE:
onSortingChange?: OnChangeFn<SortingState>

----------------------------------------

TITLE: Checking Column Pin Position
DESCRIPTION: Column API method to get the current pinned position of a column.

LANGUAGE: tsx
CODE:
getIsPinned: () => ColumnPinningPosition

----------------------------------------

TITLE: Table API setSorting Method in tanstack-table
DESCRIPTION: Table API method to set or update the sorting state of the table.

LANGUAGE: tsx
CODE:
setSorting: (updater: Updater<SortingState>) => void

----------------------------------------

TITLE: Checking Partial Rows Selection Status
DESCRIPTION: Returns a boolean indicating whether some (but not all) rows in the table are selected.

LANGUAGE: tsx
CODE:
getIsSomeRowsSelected: () => boolean

----------------------------------------

TITLE: Getting Cell Context in TanStack Table
DESCRIPTION: Returns the rendering context for cell-based components including references to the table, column, row, and cell objects along with value-retrieval methods.

LANGUAGE: tsx
CODE:
getContext: () => {
  table: Table<TData>
  column: Column<TData, TValue>
  row: Row<TData>
  cell: Cell<TData, TValue>
  getValue: <TTValue = TValue,>() => TTValue
  renderValue: <TTValue = TValue,>() => TTValue | null
}

----------------------------------------

TITLE: Setting Default Column Order in TanStack Table
DESCRIPTION: Shows how to specify initial column order in TanStack Table using the initialState table option, which will define the default ordering of columns when the table is first rendered.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  //...
  initialState: {
    columnOrder: ['columnId1', 'columnId2', 'columnId3'],
  }
  //...
});

----------------------------------------

TITLE: Configuring Multiple Row Selection
DESCRIPTION: Controls whether multiple rows can be selected simultaneously, either globally or conditionally based on a row predicate function.

LANGUAGE: tsx
CODE:
enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)

----------------------------------------

TITLE: Implementing Inverted Sorting for Rank Columns in TanStack Table
DESCRIPTION: Demonstrates how to set up inverted sorting for columns where lower values are better (like rankings), ensuring that the sort order cycles normally but the actual sorting is inverted.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Rank',
    accessorKey: 'rank',
    invertSorting: true, // invert the sorting for this column. 1st -> 2nd -> 3rd -> ... even if "desc" sorting is applied
  },
  //...
]

----------------------------------------

TITLE: Table Option isMultiSortEvent in tanstack-table
DESCRIPTION: Table option for a custom function to determine if a user interaction should trigger a multi-sort operation.

LANGUAGE: tsx
CODE:
isMultiSortEvent?: (e: unknown) => boolean

----------------------------------------

TITLE: Creating Recursive TypeScript Type Definition for Hierarchical Data
DESCRIPTION: TypeScript type definition with self-referential structure for hierarchical data with optional subRows, supporting unlimited nesting levels.

LANGUAGE: typescript
CODE:
type User = {
  firstName: string
  lastName: string
  subRows?: User[] //does not have to be called "subRows", can be called anything
}

----------------------------------------

TITLE: Retrieving Faceted Min/Max Values in TanStack Table (TSX)
DESCRIPTION: Function that computes and returns a min/max tuple derived from column.getFacetedRowModel. Used for displaying faceted result value ranges. Requires a valid getFacetedMinMaxValues function to be passed to options.

LANGUAGE: tsx
CODE:
getFacetedMinMaxValues: () => Map<any, number>

----------------------------------------

TITLE: Column API getCanSort Method in tanstack-table
DESCRIPTION: Column API method that returns whether the column can be sorted.

LANGUAGE: tsx
CODE:
getCanSort: () => boolean

----------------------------------------

TITLE: aggregationFn Column Definition Option in TanStack Table
DESCRIPTION: The column definition option for specifying an aggregation function. Can be a string reference to a built-in or custom function, or a direct function implementation.

LANGUAGE: tsx
CODE:
aggregationFn?: AggregationFn | keyof AggregationFns | keyof BuiltInAggregationFns

----------------------------------------

TITLE: Row API Method: getIsExpanded
DESCRIPTION: A method on the row instance that returns whether the current row is expanded.

LANGUAGE: tsx
CODE:
getIsExpanded: () => boolean

----------------------------------------

TITLE: Accessing Header's ColSpan in TanStack Table
DESCRIPTION: Retrieves the column span for the header. This determines how many columns the header spans across in the table.

LANGUAGE: tsx
CODE:
colSpan: number

----------------------------------------

TITLE: Managing Dynamic Column Order State in TanStack Table
DESCRIPTION: Demonstrates how to manage column order state using React's useState hook, allowing dynamic changes to column ordering after the table has been initialized.

LANGUAGE: jsx
CODE:
const [columnOrder, setColumnOrder] = useState<string[]>(['columnId1', 'columnId2', 'columnId3']); //optionally initialize the column order
//...
const table = useReactTable({
  //...
  state: {
    columnOrder,
    //...
  }
  onColumnOrderChange: setColumnOrder,
  //...
});

----------------------------------------

TITLE: Table Option enableSortingRemoval in tanstack-table
DESCRIPTION: Table option to enable or disable the ability to remove sorting, controlling the sorting order cycle behavior.

LANGUAGE: tsx
CODE:
enableSortingRemoval?: boolean

----------------------------------------

TITLE: Using flexRender with Header Context in TanStack Table
DESCRIPTION: Example of how to use the flexRender utility with a header's context to render a custom header component. The context provides necessary data and methods for the rendered component.

LANGUAGE: tsx
CODE:
flexRender(header.column.columnDef.header, header.getContext())

----------------------------------------

TITLE: Resetting Column Filters in TanStack Table
DESCRIPTION: The resetColumnFilters method resets the column filters to their initial state. Passing true forces a reset to an empty array regardless of the initial state.

LANGUAGE: tsx
CODE:
resetColumnFilters: (defaultState?: boolean) => void

----------------------------------------

TITLE: Column Definition sortUndefined Option in tanstack-table
DESCRIPTION: Option to control how undefined values are handled during sorting, allowing them to be positioned at the beginning, end, or treated as tied values.

LANGUAGE: tsx
CODE:
sortUndefined?: 'first' | 'last' | false | -1 | 1 // defaults to 1

----------------------------------------

TITLE: Table API Method: resetExpanded
DESCRIPTION: A method to reset the expanded state to the initial state or to an empty object if defaultState is provided.

LANGUAGE: tsx
CODE:
resetExpanded: (defaultState?: boolean) => void

----------------------------------------

TITLE: Accessing Center Leaf Columns
DESCRIPTION: Method to retrieve all unpinned (center) leaf columns.

LANGUAGE: tsx
CODE:
getCenterLeafColumns: () => Column<TData>[]

----------------------------------------

TITLE: Column Pinning State Change Handler
DESCRIPTION: Callback function for handling column pinning state changes, allowing for external state management.

LANGUAGE: tsx
CODE:
onColumnPinningChange?: OnChangeFn<ColumnPinningState>

----------------------------------------

TITLE: Getting Header Groups in TanStack Table
DESCRIPTION: Table method that returns all header groups for the table. Header groups represent the hierarchical structure of headers in the table.

LANGUAGE: tsx
CODE:
type getHeaderGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Setting Column Visibility State in React with TanStack Table
DESCRIPTION: This snippet demonstrates how to manage column visibility state externally using React's useState hook and passing it to the useReactTable hook. It shows how to set initial visibility for specific columns.

LANGUAGE: jsx
CODE:
const [columnVisibility, setColumnVisibility] = useState({
  columnId1: true,
  columnId2: false, //hide this column by default
  columnId3: true,
});

const table = useReactTable({
  //...
  state: {
    columnVisibility,
    //...
  },
  onColumnVisibilityChange: setColumnVisibility,
});

----------------------------------------

TITLE: onColumnSizingInfoChange Table Option
DESCRIPTION: Optional callback function triggered when columnSizingInfo state changes, allowing manual state management.

LANGUAGE: tsx
CODE:
onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>

----------------------------------------

TITLE: Using id Option in ColumnDef
DESCRIPTION: Specifies the unique identifier for a column in TanStack Table.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Custom Sorting Function Example in tanstack-table
DESCRIPTION: Example of defining and using a custom sorting function with type declaration merging for TypeScript support.

LANGUAGE: tsx
CODE:
declare module '@tanstack/table-core' {
  interface SortingFns {
    myCustomSorting: SortingFn<unknown>
  }
}

const column = columnHelper.data('key', {
  sortingFn: 'myCustomSorting',
})

const table = useReactTable({
  columns: [column],
  sortingFns: {
    myCustomSorting: (rowA: any, rowB: any, columnId: any): number =>
      rowA.getValue(columnId).value < rowB.getValue(columnId).value ? 1 : -1,
  },
})

----------------------------------------

TITLE: Disabling Column Hiding with enableHiding Option in TanStack Table
DESCRIPTION: This snippet demonstrates how to prevent specific columns from being hidden by setting the enableHiding column option to false. This is useful for essential columns that should always remain visible.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: 'ID',
    accessorKey: 'id',
    enableHiding: false, // disable hiding for this column
  },
  {
    header: 'Name',
    accessor: 'name', // can be hidden
  },
];

----------------------------------------

TITLE: Table API resetSorting Method in tanstack-table
DESCRIPTION: Table API method to reset the sorting state to its initial state or to a blank state if true is passed.

LANGUAGE: tsx
CODE:
resetSorting: (defaultState?: boolean) => void

----------------------------------------

TITLE: Column API getSortIndex Method in tanstack-table
DESCRIPTION: Column API method that returns the index position of the column in the current sorting state.

LANGUAGE: tsx
CODE:
getSortIndex: () => number

----------------------------------------

TITLE: Enabling Column Pinning with Table Options
DESCRIPTION: Controls column pinning at the table level with the enableColumnPinning option.

LANGUAGE: tsx
CODE:
enableColumnPinning?: boolean

----------------------------------------

TITLE: getIsResizing Column API Method
DESCRIPTION: Method that returns true if the column is currently being resized.

LANGUAGE: tsx
CODE:
getIsResizing: () => boolean

----------------------------------------

TITLE: Getting All Parent Rows in TanStack Table
DESCRIPTION: Returns all parent rows for the current row, all the way up to a root row. Provides the complete ancestry chain of a nested row.

LANGUAGE: tsx
CODE:
type getParentRows = () => Row<TData>[]

----------------------------------------

TITLE: Accessing Unique Values for Autocomplete Filters
DESCRIPTION: Example demonstrating how to retrieve a list of unique values from a column for use in an autocomplete filter component. The code extracts unique values from the column's faceted data, sorts them, and limits the result to 5000 items.

LANGUAGE: typescript
CODE:
// list of unique values for autocomplete filter
const autoCompleteSuggestions = 
 Array.from(column.getFacetedUniqueValues().keys())
  .sort()
  .slice(0, 5000);

----------------------------------------

TITLE: Row API Method: getToggleExpandedHandler
DESCRIPTION: A method on the row instance that returns a function to toggle the expanded state of the row, useful for binding to event handlers.

LANGUAGE: tsx
CODE:
getToggleExpandedHandler: () => () => void

----------------------------------------

TITLE: Accessing Child Columns in TanStack Table
DESCRIPTION: The columns property contains child columns for group columns. It will be an empty array if the column is not a group column.

LANGUAGE: tsx
CODE:
type columns = ColumnDef<TData>[]

----------------------------------------

TITLE: Row API Method: getCanExpand
DESCRIPTION: A method on the row instance that determines whether the current row can be expanded.

LANGUAGE: tsx
CODE:
getCanExpand: () => boolean

----------------------------------------

TITLE: Column API getAutoSortingFn Method in tanstack-table
DESCRIPTION: Column API method that returns a sorting function automatically inferred based on the column's values.

LANGUAGE: tsx
CODE:
getAutoSortingFn: () => SortingFn<TData>

----------------------------------------

TITLE: Implementing getCanPin Row API Method
DESCRIPTION: Defines the getCanPin method for row instances that determines whether a row can be pinned based on configuration settings.

LANGUAGE: tsx
CODE:
getCanPin: () => boolean

----------------------------------------

TITLE: Set Pagination Method in TanStack Table
DESCRIPTION: The setPagination method allows updating the pagination state using an updater function or value. This provides a way to programmatically control pagination.

LANGUAGE: tsx
CODE:
setPagination: (updater: Updater<PaginationState>) => void

----------------------------------------

TITLE: Implementing pin Row API Method
DESCRIPTION: Defines the pin method for row instances that allows pinning a row to the top or bottom, or unpinning it.

LANGUAGE: tsx
CODE:
pin: (position: RowPinningPosition) => void

----------------------------------------

TITLE: Accessing Original Subrows in TanStack Table
DESCRIPTION: Provides the array of original subRows as returned by the options.getSubRows option, before any transformations by the table.

LANGUAGE: tsx
CODE:
originalSubRows?: TData[]

----------------------------------------

TITLE: Getting Rendering Context for Header in TanStack Table
DESCRIPTION: Method that returns the rendering context (props) for column-based components like headers, footers, and filters. This is used with the flexRender utility to render these components.

LANGUAGE: tsx
CODE:
getContext: () => {
  table: Table<TData>
  header: Header<TData, TValue>
  column: Column<TData, TValue>
}

----------------------------------------

TITLE: Configuring Sub-Row Selection
DESCRIPTION: Controls whether selecting a parent row automatically selects its sub-rows. Used with expanding or grouping features.

LANGUAGE: tsx
CODE:
enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)

----------------------------------------

TITLE: Accessing Header's RowSpan in TanStack Table
DESCRIPTION: Retrieves the row span for the header. This determines how many rows the header spans vertically in the table header section.

LANGUAGE: tsx
CODE:
rowSpan: number

----------------------------------------

TITLE: Column Definition enableMultiSort Option in tanstack-table
DESCRIPTION: Option to enable or disable multi-sorting for a specific column in the table.

LANGUAGE: tsx
CODE:
enableMultiSort?: boolean

----------------------------------------

TITLE: SortingFn Type Definition in tanstack-table
DESCRIPTION: Type signature for sorting functions in tanstack-table, which take two rows and a column ID and return a numeric value indicating their relative order.

LANGUAGE: tsx
CODE:
export type SortingFn<TData extends AnyData> = {
  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number
}

----------------------------------------

TITLE: Implementing getIsPinned Row API Method
DESCRIPTION: Defines the getIsPinned method for row instances that returns the current pinning position of the row.

LANGUAGE: tsx
CODE:
getIsPinned: () => RowPinningPosition

----------------------------------------

TITLE: Column Definition sortDescFirst Option in tanstack-table
DESCRIPTION: Option for column definitions to start sorting in the descending direction when first toggled.

LANGUAGE: tsx
CODE:
sortDescFirst?: boolean

----------------------------------------

TITLE: Retrieving Globally Faceted Row Model in TanStack Table
DESCRIPTION: This method returns the faceted row model for the global filter applied to the table. It provides access to the filtered data rows based on global filtering criteria.

LANGUAGE: tsx
CODE:
getGlobalFacetedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: getRightVisibleLeafColumns Table API Method
DESCRIPTION: Table API method that returns visible leaf-node columns pinned to the right side of the table.

LANGUAGE: tsx
CODE:
getRightVisibleLeafColumns: () => Column<TData>[]

----------------------------------------

TITLE: Defining Render Option Type in TanStack Table
DESCRIPTION: Type definition for the render function used by framework adapters to turn table templates into framework-specific output. This is primarily used by adapter implementers.

LANGUAGE: tsx
CODE:
type render = <TProps>(template: Renderable<TProps>, props: TProps) => any

----------------------------------------

TITLE: Accessing Header's Column in TanStack Table
DESCRIPTION: Retrieves the Column object associated with a header. This provides access to the column's definition and other properties.

LANGUAGE: tsx
CODE:
column: Column<TData>

----------------------------------------

TITLE: Checking Partial Sub-Rows Selection
DESCRIPTION: Row API method that returns whether some (but not all) of the row's sub-rows are selected.

LANGUAGE: tsx
CODE:
getIsSomeSelected: () => boolean

----------------------------------------

TITLE: Checking if Header is a Placeholder in TanStack Table
DESCRIPTION: Boolean property that indicates whether the header is a placeholder header. Placeholder headers are used to maintain table structure when the header itself doesn't represent actual data.

LANGUAGE: tsx
CODE:
isPlaceholder: boolean

----------------------------------------

TITLE: Getting Leaf Rows in TanStack Table
DESCRIPTION: Returns all leaf rows for the current row, excluding any parent rows. Useful for operating on terminal nodes in a tree structure.

LANGUAGE: tsx
CODE:
type getLeafRows = () => Row<TData>[]

----------------------------------------

TITLE: Accessing Right Pinned Header Groups
DESCRIPTION: Method to retrieve all header groups that are pinned to the right.

LANGUAGE: tsx
CODE:
getRightHeaderGroups: () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Getting Left Footer Groups in TanStack Table
DESCRIPTION: Table method that returns footer groups for left pinned columns when column pinning is enabled. This provides access to footer groups for columns pinned to the left side of the table.

LANGUAGE: tsx
CODE:
type getLeftFooterGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Accessing Original Row Data in TanStack Table
DESCRIPTION: Retrieves the original row object provided to the table. For grouped rows, this will be the first original in the group.

LANGUAGE: tsx
CODE:
original: TData

----------------------------------------

TITLE: Implementing onRowPinningChange Table Option
DESCRIPTION: Defines the onRowPinningChange callback function that gets triggered when the row pinning state changes, enabling external state management.

LANGUAGE: tsx
CODE:
onRowPinningChange?: OnChangeFn<RowPinningState>

----------------------------------------

TITLE: Defining Set State Method Type on Table Instance
DESCRIPTION: Type definition for the setState method on the table instance which allows updating the table state either through an updater function or direct object assignment.

LANGUAGE: tsx
CODE:
setState: (updater: Updater<TableState>) => void

----------------------------------------

TITLE: Getting Footer Groups in TanStack Table
DESCRIPTION: Table method that returns all footer groups for the table. Footer groups mirror the structure of header groups but are used for rendering footers.

LANGUAGE: tsx
CODE:
type getFooterGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Column API getCanMultiSort Method in tanstack-table
DESCRIPTION: Column API method that returns whether the column can be included in multi-column sorting.

LANGUAGE: tsx
CODE:
getCanMultiSort: () => boolean

----------------------------------------

TITLE: Getting Right Header Groups in TanStack Table
DESCRIPTION: Table method that returns header groups for right pinned columns when column pinning is enabled. This provides access to header groups for columns pinned to the right side of the table.

LANGUAGE: tsx
CODE:
type getRightHeaderGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Accessing Globally Faceted Unique Values in TanStack Table
DESCRIPTION: This method returns a Map containing the faceted unique values for the global filter, with counts of their occurrences. It helps in understanding the distribution of unique values after global filtering.

LANGUAGE: tsx
CODE:
getGlobalFacetedUniqueValues: () => Map<any, number>

----------------------------------------

TITLE: Anti-Pattern: React Component with Unstable References for TanStack Table
DESCRIPTION: Demonstration of incorrect implementation that causes infinite render loops by creating new array references on each render for columns and data.

LANGUAGE: tsx
CODE:
export default function MyComponent() {
  //😵 BAD: This will cause an infinite loop of re-renders because `columns` is redefined as a new array on every render!
  const columns = [
    // ...
  ];

  //😵 BAD: This will cause an infinite loop of re-renders because `data` is redefined as a new array on every render!
  const data = [
    // ...
  ];

  //❌ Columns and data are defined in the same scope as `useReactTable` without a stable reference, will cause infinite loop!
  const table = useReactTable({
    columns,
    data ?? [], //❌ Also bad because the fallback array is re-created on every render
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Accessing Row Object from Cell in TanStack Table
DESCRIPTION: References the associated Row object for the cell, allowing access to row-specific properties and methods.

LANGUAGE: tsx
CODE:
row: Row<TData>

----------------------------------------

TITLE: Defining Custom Sorting Functions with SortingFn Type
DESCRIPTION: Type definition and structure for custom sorting functions that can be used with TanStack Table for column-specific sorting logic.

LANGUAGE: tsx
CODE:
//optionally use the SortingFn to infer the parameter types
const myCustomSortingFn: SortingFn<TData> = (rowA: Row<TData>, rowB: Row<TData>, columnId: string) => {
  return //-1, 0, or 1 - access any row data using rowA.original and rowB.original
}

----------------------------------------

TITLE: Table Option: enableExpanding
DESCRIPTION: A global switch to enable or disable expanding functionality for all rows in the table.

LANGUAGE: tsx
CODE:
enableExpanding?: boolean

----------------------------------------

TITLE: Column API clearSorting Method in tanstack-table
DESCRIPTION: Column API method that removes the column from the table's sorting state.

LANGUAGE: tsx
CODE:
clearSorting: () => void

----------------------------------------

TITLE: Retrieving All Columns in TanStack Table
DESCRIPTION: Function that returns all columns in the table in their normalized and nested hierarchy, mirrored from the column definitions passed to the table.

LANGUAGE: tsx
CODE:
type getAllColumns = () => Column<TData>[]

----------------------------------------

TITLE: Getting Center Leaf Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all columns that are not pinned, not including parent headers. This provides access to the lowest level headers for the scrollable middle section of the table.

LANGUAGE: tsx
CODE:
type getCenterLeafHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: Getting Column Pin Index
DESCRIPTION: Column API method to retrieve the numeric index of a column within its pinned group.

LANGUAGE: tsx
CODE:
getPinnedIndex: () => number

----------------------------------------

TITLE: Getting Center Footer Groups in TanStack Table
DESCRIPTION: Table method that returns footer groups for columns that are not pinned when column pinning is enabled. This provides access to footer groups for the scrollable middle section of the table.

LANGUAGE: tsx
CODE:
type getCenterFooterGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Commands to install the project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Disabling Sorting Removal in TanStack Table
DESCRIPTION: Configures the table to prevent sorting from being completely removed when cycling through sorting states, ensuring at least one column is always sorted.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  enableSortingRemoval: false, // disable the ability to remove sorting on columns (always none -> asc -> desc -> asc)
})

----------------------------------------

TITLE: Starting the TanStack Table Example
DESCRIPTION: Commands to start the TanStack Table example application using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Table Option: paginateExpandedRows
DESCRIPTION: Controls whether expanded rows are included in pagination calculations. When false, expanded rows always render with their parent regardless of pagination.

LANGUAGE: tsx
CODE:
paginateExpandedRows?: boolean

----------------------------------------

TITLE: setColumnSizing Table API Method
DESCRIPTION: Method that sets column sizing state using an updater function or value, triggering onColumnSizingChange if provided.

LANGUAGE: tsx
CODE:
setColumnSizing: (updater: Updater<ColumnSizingState>) => void

----------------------------------------

TITLE: Retrieving Flat Headers in TanStack Table
DESCRIPTION: Function that returns a flattened array of Header objects for the table, including parent headers.

LANGUAGE: tsx
CODE:
type getFlatHeaders = () => Header<TData>[]

----------------------------------------

TITLE: Accessing Header ID in TanStack Table
DESCRIPTION: Retrieves the unique identifier for a header in TanStack Table. This property is used to uniquely identify each header within the table structure.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Defining Get State Method Type on Table Instance
DESCRIPTION: Type definition for the getState method on the table instance which returns the current state of the table, combining internal state and any manually managed state.

LANGUAGE: tsx
CODE:
getState: () => TableState

----------------------------------------

TITLE: Getting Center Flat Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all columns that are not pinned, including parent headers. This provides a flattened view of headers for the scrollable middle section of the table.

LANGUAGE: tsx
CODE:
type getCenterFlatHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: getSize Header API Method
DESCRIPTION: Method that returns the size for the header, calculated by summing the size of all leaf-columns that belong to it.

LANGUAGE: tsx
CODE:
getSize: () => number

----------------------------------------

TITLE: Table Option manualSorting in tanstack-table
DESCRIPTION: Table option to enable manual sorting, indicating that the table expects pre-sorted data, useful for server-side sorting implementations.

LANGUAGE: tsx
CODE:
manualSorting?: boolean

----------------------------------------

TITLE: Installing Dependencies with npm or yarn for TanStack Table Example
DESCRIPTION: Commands to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: getStart Header API Method
DESCRIPTION: Method that returns the offset measurement along the row-axis for the header by summing the offset measurements of all preceding headers.

LANGUAGE: tsx
CODE:
getStart: (position?: ColumnPinningPosition) => number

----------------------------------------

TITLE: Getting Cell Value by Column ID in TanStack Table
DESCRIPTION: A method that returns the value from the row for a given columnId. Used to extract specific cell data from a row.

LANGUAGE: tsx
CODE:
getValue: (columnId: string) => TValue

----------------------------------------

TITLE: Implementing setRowPinning Table API Method
DESCRIPTION: Defines the setRowPinning method that allows updating the row pinning state using an updater function.

LANGUAGE: tsx
CODE:
setRowPinning: (updater: Updater<RowPinningState>) => void

----------------------------------------

TITLE: Retrieving Leaf Headers in TanStack Table
DESCRIPTION: Function that returns a flattened array of leaf-node Header objects for the table, excluding parent headers.

LANGUAGE: tsx
CODE:
type getLeafHeaders = () => Header<TData>[]

----------------------------------------

TITLE: Get Page Count Method in TanStack Table
DESCRIPTION: The getPageCount method returns the total number of pages. For manual pagination, this comes from options.pageCount; otherwise, it's calculated from the total row count and current page size.

LANGUAGE: tsx
CODE:
getPageCount: () => number

----------------------------------------

TITLE: Defining Core Row Model Getter Type in TanStack Table
DESCRIPTION: Type definition for the getCoreRowModel function which is required to compute and return the core row model for the table.

LANGUAGE: tsx
CODE:
getCoreRowModel: (table: Table<TData>) => () => RowModel<TData>

----------------------------------------

TITLE: Getting Header Group Depth in TanStack Table
DESCRIPTION: Returns the depth level of the header group, using zero-based indexing. This helps determine the header's position in the hierarchical structure of headers.

LANGUAGE: tsx
CODE:
depth: number

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example using npm or yarn
DESCRIPTION: Commands for installing the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Getting Right Leaf Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all right pinned leaf columns in the table, not including parent headers. This provides access to the lowest level headers for right-pinned columns.

LANGUAGE: tsx
CODE:
type getRightLeafHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example in Bash
DESCRIPTION: Commands to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Getting Leaf Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all leaf columns in the table, not including parent headers. Leaf headers are the lowest level in the header hierarchy with no children.

LANGUAGE: tsx
CODE:
type getLeafHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: resetColumnVisibility Table API Method
DESCRIPTION: Table API method to reset column visibility to initial state or to an empty object if defaultState is provided.

LANGUAGE: tsx
CODE:
resetColumnVisibility: (defaultState?: boolean) => void

----------------------------------------

TITLE: Setting Column Filters in TanStack Table
DESCRIPTION: The setColumnFilters method from the Table API allows setting or updating the column filters state. It accepts an updater function or direct value for the new filters state.

LANGUAGE: tsx
CODE:
setColumnFilters: (updater: Updater<ColumnFiltersState>) => void

----------------------------------------

TITLE: Reset Page Index Method in TanStack Table
DESCRIPTION: The resetPageIndex method resets the page index to its initial state, or to 0 if defaultState is true. This allows reverting to the first page programmatically.

LANGUAGE: tsx
CODE:
resetPageIndex: (defaultState?: boolean) => void

----------------------------------------

TITLE: Defining Debug Columns Option Type in TanStack Table
DESCRIPTION: Type definition for the debugColumns property which enables column-specific debugging information in development mode.

LANGUAGE: tsx
CODE:
debugColumns?: boolean

----------------------------------------

TITLE: Column-Level Pinning Control
DESCRIPTION: Controls whether an individual column can be pinned using the enablePinning option in column definition.

LANGUAGE: tsx
CODE:
enablePinning?: boolean

----------------------------------------

TITLE: Getting Right Footer Groups in TanStack Table
DESCRIPTION: Table method that returns footer groups for right pinned columns when column pinning is enabled. This provides access to footer groups for columns pinned to the right side of the table.

LANGUAGE: tsx
CODE:
type getRightFooterGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Accessing Filtered Row Model in TanStack Table
DESCRIPTION: The getFilteredRowModel method returns the row model after column filtering has been applied, providing access to the filtered dataset.

LANGUAGE: tsx
CODE:
getFilteredRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Installing and Running TanStack Table Example with npm and yarn
DESCRIPTION: Commands for installing dependencies and starting the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Getting Center Header Groups in TanStack Table
DESCRIPTION: Table method that returns header groups for columns that are not pinned when column pinning is enabled. This provides access to header groups for the scrollable middle section of the table.

LANGUAGE: tsx
CODE:
type getCenterHeaderGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Getting Left Leaf Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all left pinned leaf columns in the table, not including parent headers. This provides access to the lowest level headers for left-pinned columns.

LANGUAGE: tsx
CODE:
type getLeftLeafHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: Reset Page Size Method in TanStack Table
DESCRIPTION: The resetPageSize method resets the page size to its initial state, or to 10 if defaultState is true. This allows reverting to the default rows per page.

LANGUAGE: tsx
CODE:
resetPageSize: (defaultState?: boolean) => void

----------------------------------------

TITLE: Setting Column Order with setColumnOrder Method in TanStack Table
DESCRIPTION: Defines the setColumnOrder method which allows updating the column order state using an updater function pattern.

LANGUAGE: tsx
CODE:
setColumnOrder: (updater: Updater<ColumnOrderState>) => void

----------------------------------------

TITLE: Reset Pagination Method in TanStack Table
DESCRIPTION: The resetPagination method resets the pagination state to initialState.pagination, or to a default blank state if true is passed as an argument.

LANGUAGE: tsx
CODE:
resetPagination: (defaultState?: boolean) => void

----------------------------------------

TITLE: Defining Reset Method Type on Table Instance
DESCRIPTION: Type definition for the reset method on the table instance which allows resetting the table state back to its initial state.

LANGUAGE: tsx
CODE:
reset: () => void

----------------------------------------

TITLE: Accessing Center Leaf Headers
DESCRIPTION: Method to retrieve leaf-node unpinned (center) headers.

LANGUAGE: tsx
CODE:
getCenterLeafHeaders: () => Header<TData>[]

----------------------------------------

TITLE: Starting the TanStack Table Example Project using npm or yarn
DESCRIPTION: Command for starting the TanStack Table example application after dependencies are installed.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Accessing Header's HeaderGroup in TanStack Table
DESCRIPTION: Retrieves the HeaderGroup object that the header belongs to. This provides context about the header's position in the overall header structure.

LANGUAGE: tsx
CODE:
headerGroup: HeaderGroup<TData>

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example Project
DESCRIPTION: Commands to install the necessary dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Accessing Header Depth in TanStack Table
DESCRIPTION: Retrieves the zero-indexed depth of a header in the hierarchical structure. Headers at the top level have a depth of 0, with child headers incrementing in depth.

LANGUAGE: tsx
CODE:
depth: number

----------------------------------------

TITLE: Set Page Index Method in TanStack Table
DESCRIPTION: The setPageIndex method updates the page index using a provided function or value. This provides direct control over which page is currently displayed.

LANGUAGE: tsx
CODE:
setPageIndex: (updater: Updater<number>) => void

----------------------------------------

TITLE: Getting Column Index with getIndex Method in TanStack Table
DESCRIPTION: Defines the getIndex method for column instances which returns the index of the column in the order of visible columns, optionally for a specific pinning position.

LANGUAGE: tsx
CODE:
getIndex: (position?: ColumnPinningPosition) => number

----------------------------------------

TITLE: Pagination Row Model Function in TanStack Table
DESCRIPTION: The getPaginationRowModel function returns the row model after pagination has been applied. This is used to obtain the current page of data from the table's full dataset.

LANGUAGE: tsx
CODE:
getPaginationRowModel?: (table: Table<TData>) => () => RowModel<TData>

----------------------------------------

TITLE: Getting Right Flat Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all right pinned columns in the table, including parent headers. This provides a flattened view of headers for right-pinned columns.

LANGUAGE: tsx
CODE:
type getRightFlatHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: setColumnSizingInfo Table API Method
DESCRIPTION: Method that sets column sizing info state using an updater function or value, triggering onColumnSizingInfoChange if provided.

LANGUAGE: tsx
CODE:
setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void

----------------------------------------

TITLE: getAutoAggregationFn Column API Method in TanStack Table
DESCRIPTION: Column API method that returns the automatically inferred aggregation function for the column based on its data type and configuration.

LANGUAGE: tsx
CODE:
getAutoAggregationFn: () => AggregationFn<TData> | undefined

----------------------------------------

TITLE: Accessing Min/Max Values for Range Filtering in TanStack Table
DESCRIPTION: This snippet demonstrates how to retrieve the minimum and maximum values from the global faceted data. This can be used to set the bounds for range slider components in filtering UI, with a default fallback of [0, 1].

LANGUAGE: typescript
CODE:
// tuple of min and max values for range filter
const [min, max] = table.getGlobalFacetedMinMaxValues() ?? [0, 1];

----------------------------------------

TITLE: Installing and Running TanStack Table Example using npm or yarn
DESCRIPTION: Commands for installing dependencies and starting the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: toggleGrouping Column API Method in TanStack Table
DESCRIPTION: Column API method that toggles the grouping state for the column, adding or removing it from the current grouping configuration.

LANGUAGE: tsx
CODE:
toggleGrouping: () => void

----------------------------------------

TITLE: Accessing Header's SubHeaders in TanStack Table
DESCRIPTION: Retrieves an array of child headers beneath the current header. This will be empty if the header's associated column is a leaf column with no children.

LANGUAGE: tsx
CODE:
type subHeaders = Header<TData>[]

----------------------------------------

TITLE: Implementing getTopRows Table API Method
DESCRIPTION: Defines the getTopRows method that retrieves all rows pinned to the top of the table.

LANGUAGE: tsx
CODE:
getTopRows: () => Row<TData>[]

----------------------------------------

TITLE: Accessing Right Pinned Headers
DESCRIPTION: Method to retrieve a flat array of all headers pinned to the right, including parent headers.

LANGUAGE: tsx
CODE:
getRightFlatHeaders: () => Header<TData>[]

----------------------------------------

TITLE: Page Count Configuration Option in TanStack Table
DESCRIPTION: The pageCount option allows you to supply a total page count value when manually controlling pagination. If you don't know the total pages, you can set this to -1 or provide rowCount instead.

LANGUAGE: tsx
CODE:
pageCount?: number

----------------------------------------

TITLE: Retrieving Parent Row ID in TanStack Table
DESCRIPTION: Returns the parent row id for nested rows. This property is only available if the row is part of a nested structure.

LANGUAGE: tsx
CODE:
parentId?: string

----------------------------------------

TITLE: getVisibleLeafColumns Table API Method
DESCRIPTION: Table API method that returns a flat array of only leaf-node columns that are currently visible.

LANGUAGE: tsx
CODE:
getVisibleLeafColumns: () => Column<TData>[]

----------------------------------------

TITLE: Starting the TanStack Table Example Project
DESCRIPTION: Command to start the TanStack Table example application using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: getGroupedIndex Column API Method in TanStack Table
DESCRIPTION: Column API method that returns the index position of the column in the current grouping state array, or -1 if not grouped.

LANGUAGE: tsx
CODE:
getGroupedIndex: () => number

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command to install required dependencies for the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Accessing Header Index in TanStack Table
DESCRIPTION: Retrieves the index of a header within its header group. This represents the position of the header in its parent header group.

LANGUAGE: tsx
CODE:
index: number

----------------------------------------

TITLE: Getting All Cells for a Row in TanStack Table
DESCRIPTION: Returns all of the Cells for the row as Cell objects. Provides access to the complete set of cells in the current row.

LANGUAGE: tsx
CODE:
type getAllCells = () => Cell<TData>[]

----------------------------------------

TITLE: Accessing Left Pinned Leaf Columns
DESCRIPTION: Method to retrieve all leaf columns pinned to the left.

LANGUAGE: tsx
CODE:
getLeftLeafColumns: () => Column<TData>[]

----------------------------------------

TITLE: Checking if Column Can be Pinned
DESCRIPTION: Column API method to determine if a column can be pinned based on configuration.

LANGUAGE: tsx
CODE:
getCanPin: () => boolean

----------------------------------------

TITLE: Table Option sortDescFirst in tanstack-table
DESCRIPTION: Table option to make all sortable columns default to descending direction for their first toggle state.

LANGUAGE: tsx
CODE:
sortDescFirst?: boolean

----------------------------------------

TITLE: getIsAllColumnsVisible Table API Method
DESCRIPTION: Table API method that returns whether all columns are currently visible.

LANGUAGE: tsx
CODE:
getIsAllColumnsVisible: () => boolean

----------------------------------------

TITLE: Installing TanStack Svelte Table
DESCRIPTION: Command to install the Svelte adapter for TanStack Table. This adapter works with Svelte 3 and Svelte 4, but requires a community adapter for Svelte 5.

LANGUAGE: bash
CODE:
npm install @tanstack/svelte-table

----------------------------------------

TITLE: Implementing Controlled Sorting State with Signal
DESCRIPTION: Shows how to properly implement a controlled sorting state using Angular signals, ensuring that the sorting state is properly updated whether the updater is a value or function.

LANGUAGE: typescript
CODE:
class TableComponent {
  sorting = signal<SortingState>([])

  table = createAngularTable(() => ({
    columns: this.columns,
    data: this.data(),
    //...
    state: {
      sorting: this.sorting(), // required because we are using `onSortingChange`
    },
    onSortingChange: updater => { // makes the `state.sorting` controlled
      updater instanceof Function
        ? this.sorting.update(updater)
        : this.sorting.set(updater)
    }
  }))
}

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command for installing project dependencies using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Installing TanStack Lit Table
DESCRIPTION: Command to install the Lit adapter for TanStack Table. This adapter works with Lit 3.

LANGUAGE: bash
CODE:
npm install @tanstack/lit-table

----------------------------------------

TITLE: Getting Left Header Groups in TanStack Table
DESCRIPTION: Table method that returns header groups for left pinned columns when column pinning is enabled. This provides access to header groups for columns pinned to the left side of the table.

LANGUAGE: tsx
CODE:
type getLeftHeaderGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Importing FlexRender Directive in Angular Component
DESCRIPTION: Shows how to import the FlexRenderDirective in an Angular component to render dynamic cell content.

LANGUAGE: typescript
CODE:
@Component({
  imports: [FlexRenderDirective],
  //...
})
class YourComponent {}

----------------------------------------

TITLE: getStart Column API Method
DESCRIPTION: Method that returns the offset measurement along the row-axis for the column, measuring the size of all preceding columns. Useful for positioning columns.

LANGUAGE: tsx
CODE:
getStart: (position?: ColumnPinningPosition) => number

----------------------------------------

TITLE: Accessing Right Pinned Leaf Columns
DESCRIPTION: Method to retrieve all leaf columns pinned to the right.

LANGUAGE: tsx
CODE:
getRightLeafColumns: () => Column<TData>[]

----------------------------------------

TITLE: Using columns Option in ColumnDef
DESCRIPTION: Specifies child column definitions to include in a group column, enabling hierarchical column structures.

LANGUAGE: tsx
CODE:
columns?: ColumnDef<TData>[]

----------------------------------------

TITLE: getIsSomeColumnsVisible Table API Method
DESCRIPTION: Table API method that returns whether at least some columns are currently visible.

LANGUAGE: tsx
CODE:
getIsSomeColumnsVisible: () => boolean

----------------------------------------

TITLE: Starting the Example Application
DESCRIPTION: Commands to start the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Using Visibility-Aware Table APIs in TanStack Table
DESCRIPTION: This snippet demonstrates how to use visibility-aware APIs when rendering table headers and rows. It shows the proper methods (getVisibleLeafColumns and getVisibleCells) to ensure that hidden columns are excluded from the rendered output.

LANGUAGE: jsx
CODE:
<table>
  <thead>
    <tr>
      {table.getVisibleLeafColumns().map((column) => ( // takes column visibility into account
        //
      ))}
    </tr>
  </thead>
  <tbody>
    {table.getRowModel().rows.map((row) => (
      <tr key={row.id}>
        {row.getVisibleCells().map((cell) => ( // takes column visibility into account
          //
        ))}
      </tr>
    ))}
  </tbody>
</table>

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to start the TanStack Table example application after installing dependencies, using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Getting Leaf Columns in TanStack Table
DESCRIPTION: The getLeafColumns method returns all leaf-node columns for this column hierarchy. A column with no children is considered its own leaf node.

LANGUAGE: tsx
CODE:
type getLeafColumns = () => Column<TData>[]

----------------------------------------

TITLE: Using TypeScript State Types with TanStack Table in Lit
DESCRIPTION: Shows how to import and use TypeScript types for table state to ensure correct data structures and get autocomplete support for state properties.

LANGUAGE: tsx
CODE:
import { TableController, type SortingState } from '@tanstack/lit-table'
//...
@state()
private _sorting: SortingState = [
  {
    id: 'age', //you should get autocomplete for the `id` and `desc` properties
    desc: true,
  }
]

----------------------------------------

TITLE: getResizeHandler Header API Method
DESCRIPTION: Method that returns an event handler function for resizing the header, which can be used as onMouseDown or onTouchStart handler.

LANGUAGE: tsx
CODE:
getResizeHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Accessing Right Pinned Leaf Headers
DESCRIPTION: Method to retrieve leaf-node headers pinned to the right.

LANGUAGE: tsx
CODE:
getRightLeafHeaders: () => Header<TData>[]

----------------------------------------

TITLE: Filter Function Option Type in TanStack Table
DESCRIPTION: Type definition for filter function options in TanStack Table. It can be 'auto', a built-in filter function, or a custom filter function.

LANGUAGE: tsx
CODE:
export type FilterFnOption<TData extends AnyData> =
  | 'auto'
  | BuiltInFilterFn
  | FilterFn<TData>

----------------------------------------

TITLE: Table Option: autoResetExpanded
DESCRIPTION: An option to automatically reset the expanded state when expansion-related state changes occur.

LANGUAGE: tsx
CODE:
autoResetExpanded?: boolean

----------------------------------------

TITLE: Creating Column Visibility Toggles UI in TanStack Table
DESCRIPTION: This snippet shows how to implement checkbox toggles for column visibility using TanStack Table's column API methods. It uses column.getCanHide, getIsVisible, and getToggleVisibilityHandler to create a dynamic UI for controlling visibility.

LANGUAGE: jsx
CODE:
{table.getAllColumns().map((column) => (
  <label key={column.id}>
    <input
      checked={column.getIsVisible()}
      disabled={!column.getCanHide()}
      onChange={column.getToggleVisibilityHandler()}
      type="checkbox"
    />
    {column.columnDef.header}
  </label>
))}

----------------------------------------

TITLE: Implementing Individual Controlled State in TanStack Table with Lit
DESCRIPTION: Demonstrates how to control specific parts of the table state (sorting in this example) by providing both the state value and corresponding change handler. This pattern is useful for server-side data fetching scenarios.

LANGUAGE: jsx
CODE:
import {html} from "lit";

@customElement('my-component')
class MyComponent extends LitElement {
  @state()
  private _sorting: SortingState = []

  render() {
    const table = this.tableController.table({
      columns,
      data,
      state: {
        sorting: this._sorting,
      },
      onSortingChange: updaterOrValue => {
        if (typeof updaterOrValue === 'function') {
          this._sorting = updaterOrValue(this._sorting)
        } else {
          this._sorting = updaterOrValue
        }
      },
      getSortedRowModel: getSortedRowModel(),
      getCoreRowModel: getCoreRowModel(),
    })

    return html`...`
  }
}
//...

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example Project
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Creating a Custom Table Header Selection Component
DESCRIPTION: Example of a custom component for table header selection that uses the table context from FlexRender to manage row selection state.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <input
      type="checkbox"
      [checked]="table().getIsAllRowsSelected()"
      [indeterminate]="table().getIsSomeRowsSelected()"
      (change)="table().toggleAllRowsSelected()"
    />
  `,
  // ...
})
export class TableHeadSelectionComponent<T> {
  //column = input.required<Column<T, unknown>>()
  //header = input.required<Header<T, unknown>>()
  table = input.required<Table<T>>()
}

----------------------------------------

TITLE: Retrieving Header Groups in TanStack Table
DESCRIPTION: Function that returns the header groups for the table, which are used for rendering column headers.

LANGUAGE: tsx
CODE:
type getHeaderGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Using State Change Callbacks in TanStack Table (Qwik)
DESCRIPTION: Demonstrates the proper pattern for using state change callbacks with corresponding state values. This example shows how to handle both direct value updates and callback function updates in the onSortingChange handler.

LANGUAGE: jsx
CODE:
const sorting = Qwik.useSignal([])
//...
const table = useQwikTable({
  columns,
  data,
  //...
  state: {
    sorting: sorting.value, //required because we are using `onSortingChange`
  },
  onSortingChange: updater => {
    sorting.value = updater instanceof Function ? updater(sorting) : updater //makes the `state.sorting` controlled
  }, 
})

----------------------------------------

TITLE: enableColumnResizing Table Option
DESCRIPTION: Boolean option for enabling or disabling column resizing for all columns in the table.

LANGUAGE: tsx
CODE:
enableColumnResizing?: boolean

----------------------------------------

TITLE: Accessing Left Pinned Headers
DESCRIPTION: Method to retrieve a flat array of all headers pinned to the left, including parent headers.

LANGUAGE: tsx
CODE:
getLeftFlatHeaders: () => Header<TData>[]

----------------------------------------

TITLE: Accessing Center Footer Groups
DESCRIPTION: Method to retrieve all unpinned (center) footer groups.

LANGUAGE: tsx
CODE:
getCenterFooterGroups: () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Table API Method: setExpanded
DESCRIPTION: A method to update the expanded state of the table using an updater function or direct value.

LANGUAGE: tsx
CODE:
setExpanded: (updater: Updater<ExpandedState>) => void

----------------------------------------

TITLE: Starting the TanStack Table Example Project
DESCRIPTION: Commands for starting the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Using FlexRender with Component Types in Templates
DESCRIPTION: Shows how to use the flexRender directive with component types defined in column definitions, passing the appropriate context as props.

LANGUAGE: angular-html
CODE:
<ng-container
  *flexRender="
    header.column.columnDef.header;
    props: header.getContext();
    let headerCell
  "
>
  {{ headerCell }}
</ng-container>

----------------------------------------

TITLE: Starting the Angular Development Server
DESCRIPTION: Command to start the Angular development server which serves the application at http://localhost:4200/ with automatic reloading enabled.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Defining Debug Rows Option Type in TanStack Table
DESCRIPTION: Type definition for the debugRows property which enables row-specific debugging information in development mode.

LANGUAGE: tsx
CODE:
debugRows?: boolean

----------------------------------------

TITLE: Using TypeScript Types for Table State in TanStack Table
DESCRIPTION: Demonstrates how to leverage TypeScript type definitions in TanStack Table for better type safety and autocomplete when working with complex state structures like sorting state.

LANGUAGE: tsx
CODE:
import { useReactTable, type SortingState } from '@tanstack/react-table'
//...
const [sorting, setSorting] = React.useState<SortingState[]>([
  {
    id: 'age', //you should get autocomplete for the `id` and `desc` properties
    desc: true,
  }
])

----------------------------------------

TITLE: Column Definition enableHiding Option
DESCRIPTION: Boolean option to enable or disable the ability to hide a specific column in TanStack Table.

LANGUAGE: tsx
CODE:
enableHiding?: boolean

----------------------------------------

TITLE: Accessing Center Header Groups
DESCRIPTION: Method to retrieve all unpinned (center) header groups.

LANGUAGE: tsx
CODE:
getCenterHeaderGroups: () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Getting Row Index in TanStack Table
DESCRIPTION: Returns the index of the row within its parent array or the root data array, indicating its position in the sequence.

LANGUAGE: tsx
CODE:
index: number

----------------------------------------

TITLE: Table API Method: getCanSomeRowsExpand
DESCRIPTION: A method that returns whether any rows in the table can be expanded.

LANGUAGE: tsx
CODE:
getCanSomeRowsExpand: () => boolean

----------------------------------------

TITLE: Implementing TableController in a Lit Component
DESCRIPTION: Demonstrates how to use the TableController in a Lit custom element. The controller provides a table API that takes options and returns a table instance, allowing reactivity in Lit components.

LANGUAGE: typescript
CODE:
import { TableController } from '@tanstack/lit-table'

@customElement('my-table-element')
class MyTableElement extends LitElement {
  private tableController = new TableController<Person>(this)

  protected render() {
    const table = this.tableController.table(options)
    // ...render your table
  }
}

----------------------------------------

TITLE: Rendering Table Cells with flexRender in Qwik
DESCRIPTION: Shows how to use the flexRender utility to render dynamic cell content in a table. This example demonstrates rendering a complete table body with rows and cells, using flexRender to handle the cell template rendering with proper context.

LANGUAGE: jsx
CODE:
import { flexRender } from '@tanstack/qwik-table'
//...
return (
  <tbody>
    {table.getRowModel().rows.map(row => {
      return (
        <tr key={row.id}>
          {row.getVisibleCells().map(cell => (
            <td key={cell.id}>
              {flexRender(cell.column.columnDef.cell, cell.getContext())}
            </td>
          ))}
        </tr>
      )
    })}
  </tbody>
);

----------------------------------------

TITLE: Building the Angular Project
DESCRIPTION: Command to build the Angular project for production. The output files will be placed in the dist/ directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Defining Recursive JSON Data Structure with SubRows for TanStack Table
DESCRIPTION: Example JSON structure with nested subRows for hierarchical data representation, useful for expanding/collapsing rows in TanStack Table.

LANGUAGE: json
CODE:
[
  {
    "firstName": "Tanner",
    "lastName": "Linsley",
    "subRows": [
      {
        "firstName": "Kevin",
        "lastName": "Vandy",
      },
      {
        "firstName": "John",
        "lastName": "Doe",
        "subRows": [
          //...
        ]
      }
    ]
  },
  {
    "firstName": "Jane",
    "lastName": "Doe",
  }
]

----------------------------------------

TITLE: Defining Auto Reset All Option Type in TanStack Table
DESCRIPTION: Type definition for the autoResetAll property which provides a global override for all the automatic reset behaviors in the table.

LANGUAGE: tsx
CODE:
autoResetAll?: boolean

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the local development server. After running this command, the application will be available at http://localhost:4200/ and will automatically reload when source files are changed.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: getCanHide Column API Method
DESCRIPTION: Column API method that returns whether the column can be hidden based on configuration settings.

LANGUAGE: tsx
CODE:
getCanHide: () => boolean

----------------------------------------

TITLE: getLeftTotalSize Table API Method
DESCRIPTION: Method that returns the total size of the left portion of the table by calculating the sum of left leaf-columns when using column pinning.

LANGUAGE: tsx
CODE:
getLeftTotalSize: () => number

----------------------------------------

TITLE: Getting Unique Values for a Column in TanStack Table
DESCRIPTION: Returns a unique array of values from the row for a given columnId. Useful for filtering or creating distinct value lists.

LANGUAGE: tsx
CODE:
getUniqueValues: (columnId: string) => TValue[]

----------------------------------------

TITLE: Table API Method: getIsAllRowsExpanded
DESCRIPTION: A method that checks if all rows in the table are currently expanded.

LANGUAGE: tsx
CODE:
getIsAllRowsExpanded: () => boolean

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner. This runs all the unit tests defined in the project.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Creating TypeScript Type Definition for Deep-Nested User Data
DESCRIPTION: TypeScript type definition for a nested User data structure that matches the JSON format with nested name and info objects.

LANGUAGE: typescript
CODE:
type User = {
  name: {
    first: string
    last: string
  }
  info: {
    age: number
    visits: number
  }
}

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access help information for the Angular CLI, providing details about available commands and options.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Implementing Fully Controlled State in Svelte TanStack Table
DESCRIPTION: Shows how to control the entire table state using the onStateChange option. This approach uses the table.initialState as a starting point and then adds custom pagination settings before applying it to the table.

LANGUAGE: jsx
CODE:
//create a table instance with default state values
const options = writable({
  columns,
  data,
  //... Note: `state` values are NOT passed in yet
})
const table = createSvelteTable(options)

let state = {
  ...table.initialState, //populate the initial state with all of the default state values from the table instance
  pagination: {
    pageIndex: 0,
    pageSize: 15 //optionally customize the initial pagination state.
  }
}
const setState = updater => {
  if (updater instanceof Function) {
    state = updater(state)
  } else {
    state = updater
  }
  options.update(old => ({
    ...old,
    state,
  }))
}

//Use the table.setOptions API to merge our fully controlled state onto the table instance
table.setOptions(prev => ({
  ...prev, //preserve any other options that we have set up above
  state, //our fully controlled state overrides the internal state
  onStateChange: setState //any state changes will be pushed up to our own state management
}))

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: CLI command for generating new Angular artifacts like components, directives, pipes, services, etc. The command follows a pattern of 'ng generate' followed by the artifact type and name.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: enableHiding Table Option
DESCRIPTION: Global table option to enable or disable the column hiding feature across the entire table.

LANGUAGE: tsx
CODE:
enableHiding?: boolean

----------------------------------------

TITLE: resetSize Column API Method
DESCRIPTION: Method that resets the column size to its initial size.

LANGUAGE: tsx
CODE:
resetSize: () => void

----------------------------------------

TITLE: Getting Left Flat Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all left pinned columns in the table, including parent headers. This provides a flattened view of headers for left-pinned columns.

LANGUAGE: tsx
CODE:
type getLeftFlatHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: Table API Method: getExpandedRowModel
DESCRIPTION: A method that returns the row model after expansion logic has been applied.

LANGUAGE: tsx
CODE:
getExpandedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Implementing Server-Side Faceting with React Query in TanStack Table
DESCRIPTION: This snippet shows how to implement custom server-side faceting by fetching faceted data from an API and injecting it into the table instance. It uses React Query to handle the data fetching and updates the table's faceting methods.

LANGUAGE: typescript
CODE:
const facetingQuery = useQuery(
  'faceting',
  async () => {
    const response = await fetch('/api/faceting');
    return response.json();
  },
  {
    onSuccess: (data) => {
      table.getGlobalFacetedUniqueValues = () => data.uniqueValues;
      table.getGlobalFacetedMinMaxValues = () => data.minMaxValues;
    },
  }
);

----------------------------------------

TITLE: Column API toggleSorting Method in tanstack-table
DESCRIPTION: Column API method that toggles the column's sorting state, with optional parameters to force a direction or enable multi-sorting.

LANGUAGE: tsx
CODE:
toggleSorting: (desc?: boolean, isMulti?: boolean) => void

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular application for production. The compiled files will be output to the 'dist/' directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Accessing Subrows in TanStack Table
DESCRIPTION: Provides an array of subRows for the row as created by the options.getSubRows option. Used for working with hierarchical data structures.

LANGUAGE: tsx
CODE:
type subRows = Row<TData>[]

----------------------------------------

TITLE: Controlled State Requirements in Svelte TanStack Table
DESCRIPTION: Demonstrates the requirement that state change callbacks must have corresponding state values defined in the state option. Without this, the state will be "frozen" with its initial value.

LANGUAGE: ts
CODE:
let sorting = []
const setSorting = updater => {
  if (updater instanceof Function) {
    sorting = updater(sorting)
  } else {
    sorting = updater
  }
  options.update(old => ({
    ...old,
    state: {
      ...old.state,
      sorting,
    },
  }))
}
//...
const options = writable({
  columns,
  data,
  //...
  state: {
    sorting, //required because we are using `onSortingChange`
  },
  onSortingChange: setSorting, //makes the `state.sorting` controlled
})
const table = createSvelteTable(options)

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via the Karma test runner in the Angular application.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: getVisibleFlatColumns Table API Method
DESCRIPTION: Table API method that returns a flat array of all visible columns, including parent columns.

LANGUAGE: tsx
CODE:
getVisibleFlatColumns: () => Column<TData>[]

----------------------------------------

TITLE: getCanResize Column API Method
DESCRIPTION: Method that returns true if the column can be resized.

LANGUAGE: tsx
CODE:
getCanResize: () => boolean

----------------------------------------

TITLE: Getting Pre-Selected Row Model
DESCRIPTION: Returns the row model before selection filtering is applied.

LANGUAGE: tsx
CODE:
getPreSelectedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Retrieving Globally Faceted Min/Max Values in TanStack Table
DESCRIPTION: This method returns an array containing the minimum and maximum values found after applying the global filter. It's useful for numeric columns where range information is needed after filtering.

LANGUAGE: tsx
CODE:
getGlobalFacetedMinMaxValues: () => [number, number]

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to display help information about Angular CLI. This provides details about available commands and their options.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Getting Parent Row in TanStack Table
DESCRIPTION: Returns the immediate parent row for the current row, if it exists. Useful for traversing up a hierarchical data structure.

LANGUAGE: tsx
CODE:
type getParentRow = () => Row<TData> | undefined

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server. After running this command, navigate to http://localhost:4200/ to view the application. The server will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Accessing Internal Table State in Svelte
DESCRIPTION: Demonstrates how to access the internal state of a TanStack table in Svelte using the table.getState() API. This allows retrieving the entire state or specific parts like row selection.

LANGUAGE: jsx
CODE:
const options = writable({
  columns,
  data,
  //...
})

const table = createSvelteTable(options)

console.log(table.getState()) //access the entire internal state
console.log(table.getState().rowSelection) //access just the row selection state

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: getToggleAllColumnsVisibilityHandler Table API Method
DESCRIPTION: Table API method that returns a handler function for toggling visibility of all columns, intended for checkbox input elements.

LANGUAGE: tsx
CODE:
getToggleAllColumnsVisibilityHandler: () => ((event: unknown) => void)

----------------------------------------

TITLE: minSize Column Definition Option
DESCRIPTION: Numeric option that sets the minimum allowed size for a column.

LANGUAGE: tsx
CODE:
minSize?: number

----------------------------------------

TITLE: Set Page Size Method in TanStack Table
DESCRIPTION: The setPageSize method updates the page size using a provided function or value. This controls how many rows are displayed per page.

LANGUAGE: tsx
CODE:
setPageSize: (updater: Updater<number>) => void

----------------------------------------

TITLE: Defining Global Filter Table State in TanStack Table
DESCRIPTION: The structure that stores the global filter state in TanStack Table. This interface defines the shape of the state object used for global filtering.

LANGUAGE: tsx
CODE:
export interface GlobalFilterTableState {
  globalFilter: any
}

----------------------------------------

TITLE: Accessing Pre-Filtered Row Model in TanStack Table
DESCRIPTION: The getPreFilteredRowModel method returns the row model before any column filtering has been applied, giving access to the complete dataset.

LANGUAGE: tsx
CODE:
getPreFilteredRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Column API getIsSorted Method in tanstack-table
DESCRIPTION: Column API method that returns whether the column is currently sorted and in which direction.

LANGUAGE: tsx
CODE:
getIsSorted: () => false | SortDirection

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to get additional help on using the Angular CLI.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Applying Column Width to Table Headers
DESCRIPTION: Demonstrates how to apply the column width to a table header cell using inline styles with the header.getSize() API.

LANGUAGE: tsx
CODE:
<th
  key={header.id}
  colSpan={header.colSpan}
  style={{ width: `${header.getSize()}px` }}
>

----------------------------------------

TITLE: Using State Change Callbacks with Vue Table
DESCRIPTION: Demonstrates how to properly implement state change callbacks in a Vue TanStack Table, ensuring that the corresponding state value is provided in the state option.

LANGUAGE: jsx
CODE:
const sorting = ref([])
const setSorting = updater => {
  sorting.value = updater instanceof Function ? updater(sorting.value) : updater
}
//...
const table = useVueTable({
  columns,
  data,
  //...
  state: {
    get sorting() {
      return sorting //required because we are using `onSortingChange`
    },
  },
  onSortingChange: setSorting, //makes the `state.sorting` controlled
})

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests. Requires a package that implements end-to-end testing capabilities.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: enableGrouping Column Definition Option in TanStack Table
DESCRIPTION: The column definition option to enable or disable grouping for a specific column. Controls whether the column can be used for grouping operations.

LANGUAGE: tsx
CODE:
enableGrouping?: boolean

----------------------------------------

TITLE: size Column Definition Option
DESCRIPTION: Numeric option that sets the desired size for a column.

LANGUAGE: tsx
CODE:
size?: number

----------------------------------------

TITLE: Defining Row Pinning State Types in TypeScript
DESCRIPTION: Defines the TypeScript types for row pinning state management, including position types and state structure.

LANGUAGE: tsx
CODE:
export type RowPinningPosition = false | 'top' | 'bottom'

export type RowPinningState = {
  top?: string[]
  bottom?: string[]
}

export type RowPinningRowState = {
  rowPinning: RowPinningState
}

----------------------------------------

TITLE: aggregationFn Column API Method in TanStack Table
DESCRIPTION: The column API property that exposes the resolved aggregation function for the column, after processing any string references or defaults.

LANGUAGE: tsx
CODE:
aggregationFn?: AggregationFnOption<TData>

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server, which will serve the application on http://localhost:4200/ with automatic reloading functionality.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Accessing Header Group ID in TanStack Table
DESCRIPTION: Retrieves the unique identifier for a header group. This property uniquely identifies each header group within the table structure.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project. The build output will be stored in the dist/ directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Using Reactive Data with Vue Table
DESCRIPTION: Shows how to use Vue reactive data with TanStack Table by passing a ref to the data option, allowing the table to automatically react to data changes.

LANGUAGE: typescript
CODE:
const columns = [
  { accessor: 'id', Header: 'ID' },
  { accessor: 'name', Header: 'Name' }
]

const dataRef = ref([
  { id: 1, name: 'John' },
  { id: 2, name: 'Jane' }
])

const table = useVueTable({
  columns,
  data: dataRef, // Pass the reactive data ref
})

// Later, updating dataRef will automatically update the table
dataRef.value = [
  { id: 1, name: 'John' },
  { id: 2, name: 'Jane' },
  { id: 3, name: 'Doe' }
]

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command for building the Angular application with production artifacts stored in the dist/ directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Auto Reset Page Index Option in TanStack Table
DESCRIPTION: The autoResetPageIndex option determines whether pagination should reset to the first page when table state changes (like data updates, filter changes, etc). Defaults to false if manualPagination is true.

LANGUAGE: tsx
CODE:
autoResetPageIndex?: boolean

----------------------------------------

TITLE: getVisibleCells Row API Method
DESCRIPTION: Row API method that returns an array of cell objects, considering column visibility configuration.

LANGUAGE: tsx
CODE:
getVisibleCells: () => Cell<TData>[]

----------------------------------------

TITLE: Retrieving Flattened Column Hierarchy in TanStack Table
DESCRIPTION: The getFlatColumns method returns a flattened array containing the current column and all of its children and grand-children columns.

LANGUAGE: tsx
CODE:
type getFlatColumns = () => Column<TData>[]

----------------------------------------

TITLE: getIsGrouped Column API Method in TanStack Table
DESCRIPTION: Column API method that returns whether the column is currently being used for grouping in the table's current state.

LANGUAGE: tsx
CODE:
getIsGrouped: () => boolean

----------------------------------------

TITLE: Getting Row Selection Toggle Handler
DESCRIPTION: Row API method that returns an event handler function to toggle the selection state of the specific row.

LANGUAGE: tsx
CODE:
getToggleSelectedHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Column API getFirstSortDir Method in tanstack-table
DESCRIPTION: Column API method that returns the initial direction that should be used when sorting the column.

LANGUAGE: tsx
CODE:
getFirstSortDir: () => SortDirection

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Command to get help on Angular CLI usage and options.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Checking Complete Sub-Rows Selection
DESCRIPTION: Row API method that returns whether all of the row's sub-rows are selected.

LANGUAGE: tsx
CODE:
getIsAllSubRowsSelected: () => boolean

----------------------------------------

TITLE: Setting Custom Initial State for TanStack Table in Lit
DESCRIPTION: Shows how to customize the initial state of a table by providing values to the initialState option. This example demonstrates setting initial column order, visibility, expansion state, and sorting.

LANGUAGE: typescript
CODE:
render() {
  const table = this.tableController.table({
    columns,
    data,
    initialState: {
      columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
      columnVisibility: {
        id: false //hide the id column by default
      },
      expanded: true, //expand all rows by default
      sorting: [
        {
          id: 'age',
          desc: true //sort by age in descending order by default
        }
      ]
    },
  })

  return html`...`;
}

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Command for accessing Angular CLI help documentation directly from the command line.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Can Previous Page Check Method in TanStack Table
DESCRIPTION: The getCanPreviousPage method returns a boolean indicating whether the table can go to the previous page. This helps in enabling/disabling previous page buttons in UI.

LANGUAGE: tsx
CODE:
getCanPreviousPage: () => boolean

----------------------------------------

TITLE: toggleVisibility Column API Method
DESCRIPTION: Column API method to toggle the visibility of a column. Takes an optional boolean value to explicitly set the visibility state.

LANGUAGE: tsx
CODE:
toggleVisibility: (value?: boolean) => void

----------------------------------------

TITLE: Table API Method: getExpandedDepth
DESCRIPTION: A method that returns the maximum depth of expanded rows in the table hierarchy.

LANGUAGE: tsx
CODE:
getExpandedDepth: () => number

----------------------------------------

TITLE: getAggregationFn Column API Method in TanStack Table
DESCRIPTION: Column API method that returns the resolved aggregation function for the column, either specified directly, referenced by name, or automatically determined.

LANGUAGE: tsx
CODE:
getAggregationFn: () => AggregationFn<TData> | undefined

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command for executing unit tests via Karma test runner in the Angular application.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: getRightTotalSize Table API Method
DESCRIPTION: Method that returns the total size of the right portion of the table by calculating the sum of right leaf-columns when using column pinning.

LANGUAGE: tsx
CODE:
getRightTotalSize: () => number

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server. Once started, the application will be available at http://localhost:4200 and will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Commands to install required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner. This will run all test specs defined in the project.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Last Page Navigation Method in TanStack Table
DESCRIPTION: The lastPage method sets the page index to the last available page. This provides a way to jump to the last page programmatically.

LANGUAGE: tsx
CODE:
lastPage: () => void

----------------------------------------

TITLE: Using flexRender with Lit Templates
DESCRIPTION: Shows how to use the flexRender utility function within Lit templates to render dynamic cell, header, or footer content based on column definitions and context.

LANGUAGE: jsx
CODE:
import { flexRender } from '@tanstack/lit-table'
//...
return html`
<tbody>
  ${table
    .getRowModel()
    .rows.slice(0, 10)
    .map(
      row => html`
        <tr>
          ${row
            .getVisibleCells()
            .map(
              cell => html`
                <td>
                  ${flexRender(
                    cell.column.columnDef.cell,
                    cell.getContext()
                  )}
                </td>
              `
            )}
        </tr>
      `
    )}
</tbody>
`

----------------------------------------

TITLE: Pinning or Unpinning a Column
DESCRIPTION: Column API method to pin a column to left or right, or unpin it by passing false.

LANGUAGE: tsx
CODE:
pin: (position: ColumnPinningPosition) => void

----------------------------------------

TITLE: getGroupingValue Row API Method in TanStack Table
DESCRIPTION: Row API method that returns the grouping value for a specific column in any row type, allowing access to the values used for grouping operations.

LANGUAGE: tsx
CODE:
getGroupingValue: (columnId: string) => unknown

----------------------------------------

TITLE: getTotalSize Table API Method
DESCRIPTION: Method that returns the total size of the table by calculating the sum of the sizes of all leaf-columns.

LANGUAGE: tsx
CODE:
getTotalSize: () => number

----------------------------------------

TITLE: Column API getSortingFn Method in tanstack-table
DESCRIPTION: Column API method that returns the resolved sorting function to be used for the column.

LANGUAGE: tsx
CODE:
getSortingFn: () => SortingFn<TData>

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests. Requires a package implementing end-to-end testing capabilities to be installed first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Declaration Merging for Adding New Types to TanStack Table
DESCRIPTION: This code demonstrates how to use TypeScript's declaration merging to extend TanStack Table's types with custom feature types. This allows for type-safe extension of table state, options, and instance APIs without using type assertions or ignoring TypeScript errors.

LANGUAGE: typescript
CODE:
// Use declaration merging to add our new feature APIs and state types to TanStack Table's existing types.
declare module '@tanstack/react-table' { // or whatever framework adapter you are using
  //merge our new feature's state with the existing table state
  interface TableState extends DensityTableState {}
  //merge our new feature's options with the existing table options
  interface TableOptionsResolved<TData extends RowData>
    extends DensityOptions {}
  //merge our new feature's instance APIs with the existing table instance APIs
  interface Table<TData extends RowData> extends DensityInstance {}
  // if you need to add cell instance APIs...
  // interface Cell<TData extends RowData, TValue> extends DensityCell
  // if you need to add row instance APIs...
  // interface Row<TData extends RowData> extends DensityRow
  // if you need to add column instance APIs...
  // interface Column<TData extends RowData, TValue> extends DensityColumn
  // if you need to add header instance APIs...
  // interface Header<TData extends RowData, TValue> extends DensityHeader

  // Note: declaration merging on `ColumnDef` is not possible because it is a complex type, not an interface.
  // But you can still use declaration merging on `ColumnDef.meta`
}

----------------------------------------

TITLE: Starting TanStack Table Example Application in Bash
DESCRIPTION: Commands to start and run the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example in Bash
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Implementing keepPinnedRows Table Option
DESCRIPTION: Defines the keepPinnedRows option that determines whether pinned rows remain visible when filtered or paginated out of the table. Defaults to true.

LANGUAGE: tsx
CODE:
keepPinnedRows?: boolean

----------------------------------------

TITLE: Getting Grouped Selected Row Model
DESCRIPTION: Returns a row model containing only the selected rows after grouping has been applied.

LANGUAGE: tsx
CODE:
getGroupedSelectedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Accessing Cell ID in TanStack Table
DESCRIPTION: Defines the cell id property which provides a unique identifier for the cell across the entire table.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Getting Filtered Selected Row Model
DESCRIPTION: Returns a row model containing only the selected rows after filtering has been applied.

LANGUAGE: tsx
CODE:
getFilteredSelectedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: TypeScript Types for Custom Density Feature
DESCRIPTION: TypeScript type definitions for a custom table density feature that allows changing the padding of cells. Includes types for state, options, and API methods following TanStack Table's naming conventions.

LANGUAGE: typescript
CODE:
// define types for our new feature's custom state
export type DensityState = 'sm' | 'md' | 'lg'
export interface DensityTableState {
  density: DensityState
}

// define types for our new feature's table options
export interface DensityOptions {
  enableDensity?: boolean
  onDensityChange?: OnChangeFn<DensityState>
}

// Define types for our new feature's table APIs
export interface DensityInstance {
  setDensity: (updater: Updater<DensityState>) => void
  toggleDensity: (value?: DensityState) => void
}

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Command to scaffold new Angular components using the Angular CLI. The example shows how to generate a new component, but the same pattern applies to other artifacts.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting TanStack Table example application in Bash
DESCRIPTION: Command to start the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the necessary dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Implementing getCenterRows Table API Method
DESCRIPTION: Defines the getCenterRows method that retrieves all rows that are not pinned to either the top or bottom of the table.

LANGUAGE: tsx
CODE:
getCenterRows: () => Row<TData>[]

----------------------------------------

TITLE: Getting Selected Row Model
DESCRIPTION: Returns a row model containing only the selected rows.

LANGUAGE: tsx
CODE:
getSelectedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Accessing Placeholder ID for Header in TanStack Table
DESCRIPTION: Optional property that provides a unique identifier for placeholder headers. This ensures that placeholder headers don't conflict with any other headers in the table.

LANGUAGE: tsx
CODE:
placeholderId?: string

----------------------------------------

TITLE: Column Definition enableSorting Option in tanstack-table
DESCRIPTION: Option to enable or disable sorting for a specific column in the table.

LANGUAGE: tsx
CODE:
enableSorting?: boolean

----------------------------------------

TITLE: Customizing Column Widths in TanStack Table
DESCRIPTION: Demonstrates how to override default column sizing configurations both globally through the defaultColumn option and individually in column definitions.

LANGUAGE: tsx
CODE:
const columns = [
  {
    accessorKey: 'col1',
    size: 270, //set column size for this column
  },
  //...
]

const table = useReactTable({
  //override default column sizing
  defaultColumn: {
    size: 200, //starting column size
    minSize: 50, //enforced during column resizing
    maxSize: 500, //enforced during column resizing
  },
})

----------------------------------------

TITLE: Table Option maxMultiSortColCount in tanstack-table
DESCRIPTION: Table option to set a maximum number of columns that can be included in multi-sorting operations.

LANGUAGE: tsx
CODE:
maxMultiSortColCount?: number

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application for deployment. The built files will be output to the dist/ directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Demonstrating Infinite Rendering Loop Pitfalls in React with TanStack Table
DESCRIPTION: This example shows the incorrect pattern of defining columns and data arrays directly within the component scope, which causes infinite rendering loops due to unstable references.

LANGUAGE: javascript
CODE:
export default function MyComponent() {
  //😵 BAD: This will cause an infinite loop of re-renders because `columns` is redefined as a new array on every render!
  const columns = [
    // ...
  ];

  //😵 BAD: This will cause an infinite loop of re-renders because `data` is redefined as a new array on every render!
  const data = [
    // ...
  ];

  //❌ Columns and data are defined in the same scope as `useReactTable` without a stable reference, will cause infinite loop!
  const table = useReactTable({
    columns,
    data,
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example using npm or yarn
DESCRIPTION: Command for installing the required dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to start the development server for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Handling Toggle All Rows Selection
DESCRIPTION: Returns an event handler function that toggles selection state for all rows in the table.

LANGUAGE: tsx
CODE:
getToggleAllRowsSelectedHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Toggling All Page Rows Selection
DESCRIPTION: Selects or deselects all rows on the current page based on the provided boolean value.

LANGUAGE: tsx
CODE:
toggleAllPageRowsSelected: (value: boolean) => void

----------------------------------------

TITLE: Previous Page Navigation Method in TanStack Table
DESCRIPTION: The previousPage method decrements the page index by one if possible. This provides a way to navigate to the previous page programmatically.

LANGUAGE: tsx
CODE:
previousPage: () => void

----------------------------------------

TITLE: Column API getNextSortingOrder Method in tanstack-table
DESCRIPTION: Column API method that returns the next sorting order that would be applied to the column.

LANGUAGE: tsx
CODE:
getNextSortingOrder: () => SortDirection | false

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to display help information for the Angular CLI, useful for finding additional commands and options.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests after adding a suitable testing package to the project.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server, which will serve the application at localhost:4200 and automatically reload on file changes.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Starting the TanStack Table Example Project with npm or yarn
DESCRIPTION: Command to start the TanStack Table example application after dependencies are installed using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to run and start the TanStack Table example application using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Resetting Row Selection State
DESCRIPTION: Resets the row selection state to the initial state or optionally to an empty selection object.

LANGUAGE: tsx
CODE:
resetRowSelection: (defaultState?: boolean) => void

----------------------------------------

TITLE: Defining Row Selection State Structure in TanStack Table
DESCRIPTION: Defines the TypeScript type structure for row selection state in TanStack Table. The state is tracked using a record where keys are row identifiers (string) and values are boolean selection flags.

LANGUAGE: tsx
CODE:
export type RowSelectionState = Record<string, boolean>

export type RowSelectionTableState = {
  rowSelection: RowSelectionState
}

----------------------------------------

TITLE: Next Page Navigation Method in TanStack Table
DESCRIPTION: The nextPage method increments the page index by one if possible. This provides a way to navigate to the next page programmatically.

LANGUAGE: tsx
CODE:
nextPage: () => void

----------------------------------------

TITLE: Table Option enableMultiRemove in tanstack-table
DESCRIPTION: Table option to enable or disable the ability to remove multi-sorts from the table.

LANGUAGE: tsx
CODE:
enableMultiRemove?: boolean

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application. This compiles the application and stores the build artifacts in the 'dist/' directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Defining VisibilityState Types in TanStack Table
DESCRIPTION: Defines the structure of column visibility state in TanStack Table. The state uses a Record mapping column ids to boolean visibility values.

LANGUAGE: tsx
CODE:
export type VisibilityState = Record<string, boolean>

export type VisibilityTableState = {
  columnVisibility: VisibilityState
}

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command for generating new Angular components or other code artifacts using the Angular CLI. Supports creating various types of elements including directives, pipes, services, classes, guards, interfaces, enums, and modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting the TanStack Table Example with npm or yarn
DESCRIPTION: Commands to start the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Building Qwik Application for Production
DESCRIPTION: Command to build the Qwik application for production. This creates optimized files in the dist folder that are ready for deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Toggling All Rows Selection
DESCRIPTION: Selects or deselects all rows in the table based on the provided boolean value.

LANGUAGE: tsx
CODE:
toggleAllRowsSelected: (value: boolean) => void

----------------------------------------

TITLE: Implementing enableRowPinning Table Option
DESCRIPTION: Defines the enableRowPinning option that enables or disables row pinning for all rows in the table. Can be a boolean or a function that determines pinning capability per row.

LANGUAGE: tsx
CODE:
enableRowPinning?: boolean | ((row: Row<TData>) => boolean)

----------------------------------------

TITLE: columnResizeDirection Table Option
DESCRIPTION: Option that enables or disables right-to-left support for column resizing, defaults to 'ltr'.

LANGUAGE: tsx
CODE:
columnResizeDirection?: 'ltr' | 'rtl'

----------------------------------------

TITLE: Table API getPreSortedRowModel Method in tanstack-table
DESCRIPTION: Table API method that returns the row model before any sorting has been applied to the data.

LANGUAGE: tsx
CODE:
getPreSortedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application for production. The compiled assets will be stored in the 'dist/' directory, ready for deployment.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install dependencies for a TanStack Table example project using either npm or yarn.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm or yarn
DESCRIPTION: Commands to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Checking Row Selection Status
DESCRIPTION: Row API method that returns whether the specific row is currently selected.

LANGUAGE: tsx
CODE:
getIsSelected: () => boolean

----------------------------------------

TITLE: getIsPlaceholder Cell API Method in TanStack Table
DESCRIPTION: Cell API method that returns whether the cell is a placeholder in a grouped structure, typically used in grouped rows for non-grouping columns.

LANGUAGE: tsx
CODE:
getIsPlaceholder: () => boolean

----------------------------------------

TITLE: Table Option: getIsRowExpanded
DESCRIPTION: A custom function to override the default logic for determining if a row is expanded.

LANGUAGE: tsx
CODE:
getIsRowExpanded?: (row: Row<TData>) => boolean

----------------------------------------

TITLE: Installing TanStack Vue Table
DESCRIPTION: Command to install the Vue adapter for TanStack Table. This adapter works with Vue 3.

LANGUAGE: bash
CODE:
npm install @tanstack/vue-table

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Command to get help information about the Angular CLI and its available commands.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: getIsVisible Column API Method
DESCRIPTION: Column API method that returns the current visibility state of the column.

LANGUAGE: tsx
CODE:
getIsVisible: () => boolean

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command for executing end-to-end tests in the Angular application, requiring a package that implements e2e testing capabilities.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing dependencies for TanStack Table example project
DESCRIPTION: Commands to install the necessary dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Column API getToggleSortingHandler Method in tanstack-table
DESCRIPTION: Column API method that returns a function to toggle the column's sorting state, useful for creating click handlers for column headers.

LANGUAGE: tsx
CODE:
getToggleSortingHandler: () => undefined | ((event: unknown) => void)

----------------------------------------

TITLE: Custom Aggregation Function Example in TanStack Table
DESCRIPTION: Example of defining and using a custom aggregation function with TanStack Table, including type declarations and implementation.

LANGUAGE: tsx
CODE:
declare module '@tanstack/table-core' {
  interface AggregationFns {
    myCustomAggregation: AggregationFn<unknown>
  }
}

const column = columnHelper.data('key', {
  aggregationFn: 'myCustomAggregation',
})

const table = useReactTable({
  columns: [column],
  aggregationFns: {
    myCustomAggregation: (columnId, leafRows, childRows) => {
      // return the aggregated value
    },
  },
})

----------------------------------------

TITLE: Handling Row Selection State Changes
DESCRIPTION: Callback function for row selection state changes, allowing for external state management instead of the table's internal state management.

LANGUAGE: tsx
CODE:
onRowSelectionChange?: OnChangeFn<RowSelectionState>

----------------------------------------

TITLE: Installing TanStack Angular Table
DESCRIPTION: Command to install the Angular adapter for TanStack Table. This adapter works with Angular 17 and uses Angular's Signal implementation.

LANGUAGE: bash
CODE:
npm install @tanstack/angular-table

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server with auto-reload functionality. The server will be accessible at http://localhost:4200/.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Starting the Application with npm or yarn
DESCRIPTION: Command for starting the example application using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm run start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm/yarn
DESCRIPTION: Commands to install the necessary dependencies for the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Table Option enableMultiSort in tanstack-table
DESCRIPTION: Table option to globally enable or disable multi-column sorting for the table.

LANGUAGE: tsx
CODE:
enableMultiSort?: boolean

----------------------------------------

TITLE: getIsGrouped Row API Method in TanStack Table
DESCRIPTION: Row API method that returns whether the row is a group-level row (as opposed to a leaf/data row).

LANGUAGE: tsx
CODE:
getIsGrouped: () => boolean

----------------------------------------

TITLE: Accessing FlexRender Context in Custom Components
DESCRIPTION: Shows how to access the FlexRender context inside a custom component using the injectFlexRenderContext function to get cell or header context.

LANGUAGE: typescript
CODE:
@Component({
  // ...
})
class CustomCellComponent {
  // context of a cell component
  readonly context = injectFlexRenderContext<CellContext<TData, TValue>>();
  // context of a header/footer component
  readonly context = injectFlexRenderContext<HeaderContext<TData, TValue>>();
}

----------------------------------------

TITLE: Installing TanStack Table Core
DESCRIPTION: Command to install the framework-agnostic core package for TanStack Table. This can be used to build custom adapters for frameworks not officially supported.

LANGUAGE: bash
CODE:
npm install @tanstack/table-core

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access Angular CLI help information in the terminal.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Accessing Left Pinned Cells in Row
DESCRIPTION: Row API method to retrieve all visible cells that are pinned to the left.

LANGUAGE: tsx
CODE:
getLeftVisibleCells: () => Cell<TData>[]

----------------------------------------

TITLE: Starting the TanStack Table Example in Bash
DESCRIPTION: Command to run and start the TanStack Table example project after installing dependencies, using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command for installing project dependencies using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Running TanStack Table Example with npm/yarn
DESCRIPTION: Commands to start the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Table API getSortedRowModel Method in tanstack-table
DESCRIPTION: Table API method that returns the row model after sorting has been applied to the data.

LANGUAGE: tsx
CODE:
getSortedRowModel: () => RowModel<TData>

----------------------------------------

TITLE: getGroupingValue Column Definition Option in TanStack Table
DESCRIPTION: The column definition option to specify a custom value extraction function for grouping. Allows customizing how group values are derived from row data.

LANGUAGE: tsx
CODE:
getGroupingValue?: (row: TData) => any

----------------------------------------

TITLE: Complete Example of Custom Templates in Angular Table
DESCRIPTION: A comprehensive example showing how to define and use custom TemplateRefs for table headers and cells with appropriate context types.

LANGUAGE: typescript
CODE:
import type {
  CellContext,
  ColumnDef,
  HeaderContext,
} from '@tanstack/angular-table'
import {Component, TemplateRef, viewChild} from '@angular/core'

@Component({
  template: `
    <tbody>
      @for (row of table.getRowModel().rows; track row.id) {
        <tr>
          @for (cell of row.getVisibleCells(); track cell.id) {
            <td>
              <ng-container
                *flexRender="
                  cell.column.columnDef.cell;
                  props: cell.getContext(); // Data given to the TemplateRef
                  let cell
                "
              >
                <!-- if you want to render a simple string -->
                {{ cell }}
                <!-- if you want to render an html string -->
                <div [innerHTML]="cell"></div>
              </ng-container>
            </td>
          }
        </tr>
      }
    </tbody>

    <ng-template #customHeader let-context>
      {{ context.getValue() }}
    </ng-template>
    <ng-template #customCell let-context>
      {{ context.getValue() }}
    </ng-template>
  `,
})
class AppComponent {
  customHeader =
    viewChild.required<TemplateRef<{ $implicit: HeaderContext<any, any> }>>({
      selector: 'customHeader'
    })
  customCell =
    viewChild.required<TemplateRef<{ $implicit: CellContext<any, any> }>>({
      selector: 'customCell'
    })

  columns: ColumnDef<unknown>[] = [
    {
      id: 'customCell',
      header: () => this.customHeader(),
      cell: () => this.customCell(),
    },
  ]
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via the Karma test runner. This runs all configured unit tests in the project and produces a test report.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Installing dependencies for TanStack Table example using npm or yarn
DESCRIPTION: Commands to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command for installing project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install or yarn

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Commands for launching the example application after dependencies are installed, using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application for production, which creates optimized files in the dist directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: AggregationFnOption Type Definition for TanStack Table
DESCRIPTION: Type definition for aggregation function options that can be used in column definitions. Supports string references to built-in or custom functions, or direct function implementations.

LANGUAGE: tsx
CODE:
export type AggregationFnOption<TData extends AnyData> =
  | 'auto'
  | keyof AggregationFns
  | BuiltInAggregationFn
  | AggregationFn<TData>

----------------------------------------

TITLE: Implementing Fully Controlled Table State in Angular
DESCRIPTION: Demonstrates how to control the entire table state using a single state object and the onStateChange handler, including a constructor pattern to properly initialize the state.

LANGUAGE: typescript
CODE:
class TableComponent {
  // create an empty table state, we'll override it later
  readonly state = signal({} as TableState);

  // create a table instance with default state values
  readonly table = createAngularTable(() => ({
    columns: this.columns,
    data: this.data(),
    // our fully controlled state overrides the internal state
    state: this.state(),
    onStateChange: updater => {
      // any state changes will be pushed up to our own state management
      this.state.set(
        updater instanceof Function ? updater(this.state()) : updater
      )
    }
  }))

  constructor() {
    // set the initial table state
    this.state.set({
      // populate the initial state with all of the default state values
      // from the table instance
      ...this.table.initialState,
      pagination: {
        pageIndex: 0,
        pageSize: 15, // optionally customize the initial pagination state.
      },
    })
  }
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner in the Angular application.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Configuring Vite for Qwik in CSR Mode
DESCRIPTION: This snippet shows how to configure Vite for a Qwik application in CSR (Client Side Rendering) mode. The configuration uses the qwikVite plugin with the csr option set to true, enabling client-side bootstrapping of the application.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})

----------------------------------------

TITLE: Configuring Filtering for Expanded Rows
DESCRIPTION: This snippet demonstrates how to configure filtering to work with expanded rows, including options to filter from leaf rows and limit the depth of filtering.

LANGUAGE: typescript
CODE:
//...
const table = useReactTable({
  // other options...
  getSubRows: row => row.subRows,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
  filterFromLeafRows: true, // search through the expanded rows
  maxLeafRowFilterDepth: 1, // limit the depth of the expanded rows that are searched
})

----------------------------------------

TITLE: Installing Dependencies for Qwik Project
DESCRIPTION: Commands for installing project dependencies using npm, pnpm, or yarn package managers. This is the first step to set up the Qwik project after cloning.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via the Karma test runner.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Installing Dependencies for React Table Example
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers. These commands must be run before starting the example application.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server. After running this command, the application will be accessible at http://localhost:4200/ and will automatically reload when source files are changed.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Table Option: manualExpanding
DESCRIPTION: An option that enables manual row expansion, bypassing the automatic expansion model. Useful for server-side expansion scenarios.

LANGUAGE: tsx
CODE:
manualExpanding?: boolean

----------------------------------------

TITLE: Fully Controlled TanStack Table State in Lit Components
DESCRIPTION: Shows how to control the entire table state using the onStateChange callback. This approach hoists all state management to the component level, including initialization using table.setOptions API.

LANGUAGE: typescript
CODE:

private tableController = new TableController<Person>(this);

@state()
private _tableState;

render() {
  const table = this.tableController.table({
    columns,
    data,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel()
  })
  const state = { ...table.initialState, ...this._tableState };
  table.setOptions(prev => ({
    ...prev,
    state,
    onStateChange: updater => {
      this._tableState =
        updater instanceof Function ? updater(state) : updater //any state changes will be pushed up to our own state management
    },
  }))

  return html`...`;
}

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests in the Angular application. Requires a package that implements end-to-end testing capabilities to be installed first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to start the TanStack Table example application after installing dependencies, using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular application, which creates production-ready files in the dist directory.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Starting the TanStack Table example application
DESCRIPTION: Command to start the application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command to generate new Angular components and other artifacts using Angular CLI. This can be used to create components, directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Resetting Column Order with resetColumnOrder Method in TanStack Table
DESCRIPTION: Defines the resetColumnOrder method which resets the column order state to the initial state or to an empty array if the defaultState parameter is true.

LANGUAGE: tsx
CODE:
resetColumnOrder: (defaultState?: boolean) => void

----------------------------------------

TITLE: Using TypeScript State Types in TanStack Table with Solid.js
DESCRIPTION: This snippet demonstrates how to leverage TypeScript types for table state management, importing and using the built-in state types to ensure type safety and enable autocompletion when working with state properties.

LANGUAGE: tsx
CODE:
import { createSolidTable, type SortingState } from '@tanstack/solid-table'
//...
const [sorting, setSorting] = createSignal<SortingState[]>([
  {
    id: 'age', //you should get autocomplete for the `id` and `desc` properties
    desc: true,
  }
])

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project. The build artifacts will be stored in the 'dist/' directory of the project.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Starting TanStack Table Example with npm/yarn
DESCRIPTION: Commands for launching the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Disabling Pagination for Expanded Rows
DESCRIPTION: Shows how to disable pagination for expanded rows so that they always render on their parent's page, even if it exceeds the page size.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  // other options...
  paginateExpandedRows: false,
})

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Commands to install the project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner. This runs all test files with the .spec.ts extension.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example in npm/yarn
DESCRIPTION: Command to install the dependencies required for running the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via Karma test runner. This will run all the unit tests defined in the project.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Retrieving Footer Groups in TanStack Table
DESCRIPTION: Function that returns the footer groups for the table, which are used for rendering column footers.

LANGUAGE: tsx
CODE:
type getFooterGroups = () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Limiting Filter Depth with maxLeafRowFilterDepth in TanStack Table
DESCRIPTION: Shows how to control the depth of filtering in hierarchical data by setting maxLeafRowFilterDepth, which limits how deep in the tree structure filtering is applied.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getFilteredRowModel: getFilteredRowModel(),
  getExpandedRowModel: getExpandedRowModel(),
  maxLeafRowFilterDepth: 0, // only filter root level parent rows out
})

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Angular CLI command for scaffolding new components and other project artifacts such as directives, pipes, services, classes, guards, interfaces, enums, and modules.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to launch the example application using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm run start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server for local testing. This will serve the application at http://localhost:4200 with hot reloading enabled.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server for local testing. This will serve the application at http://localhost:4200 with hot reloading enabled.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Rendering Cell Value in TanStack Table
DESCRIPTION: Renders the value for a cell similar to getValue, but returns a fallback value if no value is found.

LANGUAGE: tsx
CODE:
renderValue: () => any

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests via a platform of your choice. Requires a package that implements end-to-end testing capabilities to be added to the project first.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Defining Initial State Property on Table Instance
DESCRIPTION: Type definition for the initialState property on the table instance which represents the resolved initial state including all feature states.

LANGUAGE: tsx
CODE:
initialState: VisibilityTableState &
  ColumnOrderTableState &
  ColumnPinningTableState &
  FiltersTableState &
  SortingTableState &
  ExpandedTableState &
  GroupingTableState &
  ColumnSizingTableState &
  PaginationTableState &
  RowSelectionTableState

----------------------------------------

TITLE: Retrieving Unique Values for Autocomplete Filtering in TanStack Table
DESCRIPTION: This snippet shows how to access the list of unique values generated by the faceted row model, which can be used for autocomplete suggestions in filter components. It retrieves and sorts the values, limiting them to a maximum of 5000 items.

LANGUAGE: typescript
CODE:
// list of unique values for autocomplete filter
const autoCompleteSuggestions =
 Array.from(table.getGlobalFacetedUniqueValues().keys())
  .sort()
  .slice(0, 5000);

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project. The build output will be placed in the 'dist/' directory and can be deployed to a web server.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Setting RTL Column Resize Direction
DESCRIPTION: Demonstrates how to configure the column resize direction for right-to-left layouts by setting the columnResizeDirection option to 'rtl'.

LANGUAGE: tsx
CODE:
const table = useReactTable({
  //...
  columnResizeDirection: 'rtl', //change column resize direction to "rtl" for certain locales
})

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests on the Angular application. Requires a package that implements e2e testing capabilities.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Accessing Header Group Children in TanStack Table
DESCRIPTION: Provides an array of Header objects that belong to this header group. This property allows access to all child headers contained within the current header group.

LANGUAGE: tsx
CODE:
type headers = Header<TData>[]

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the local development server for the Angular application. This will serve the app at http://localhost:4200/ with automatic reloading on file changes.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Defining Debug Headers Option Type in TanStack Table
DESCRIPTION: Type definition for the debugHeaders property which enables header-specific debugging information in development mode.

LANGUAGE: tsx
CODE:
debugHeaders?: boolean

----------------------------------------

TITLE: Configuring Manual Server-Side Global Filtering in React Table
DESCRIPTION: Setup for manual server-side global filtering by setting the manualFiltering option to true, which tells the table to skip client-side filtering and use the pre-filtered data directly.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  data,
  columns,
  // getFilteredRowModel: getFilteredRowModel(), // not needed for manual server-side global filtering
  manualFiltering: true,
})

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via the Karma test runner framework.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Installing dependencies for TanStack Table example
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install or yarn

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner. This will run all the test specifications defined in the project.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Getting Flat Headers in TanStack Table
DESCRIPTION: Table method that returns headers for all columns in the table, including parent headers. This provides a flattened view of all headers regardless of hierarchy.

LANGUAGE: tsx
CODE:
type getFlatHeaders = () => Header<TData, unknown>[]

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests using your configured testing platform. Requires a package that implements end-to-end testing capabilities to be installed first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Defining Debug All Option Type in TanStack Table
DESCRIPTION: Type definition for the debugAll property which enables comprehensive debugging output for the table in development mode.

LANGUAGE: tsx
CODE:
debugAll?: boolean

----------------------------------------

TITLE: Updating Column Definitions
DESCRIPTION: Changes to column definition structure, including renaming 'accessor' to either 'accessorKey' or 'accessorFn' and 'Header' to 'header'. Shows both the direct approach and using the new columnHelper utility.

LANGUAGE: tsx
CODE:
const columns = [
-  { // [!code --]
-    accessor: 'firstName', // [!code --]
-    Header: 'First Name', // [!code --]
-  }, // [!code --]
-  { // [!code --]
-    accessor: row => row.lastName, // [!code --]
-    Header: () => <span>Last Name</span>, // [!code --]
-  }, // [!code --]

// Best TypeScript experience, especially when using `cell.getValue()` later on
+  columnHelper.accessor('firstName', { //accessorKey // [!code ++]
+    header: 'First Name', // [!code ++]
+  }), // [!code ++]
+  columnHelper.accessor(row => row.lastName, { //accessorFn // [!code ++]
+    header: () => <span>Last Name</span>, // [!code ++]
+  }), // [!code ++]

// OR (if you prefer)
+ { // [!code ++]
+   accessorKey: 'firstName', // [!code ++]
+   header: 'First Name', // [!code ++]
+ }, // [!code ++]
+ { // [!code ++]
+   accessorFn: row => row.lastName, // [!code ++]
+   header: () => <span>Last Name</span>, // [!code ++]
+ }, // [!code ++]
]

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting the TanStack Table example application
DESCRIPTION: Command to start the TanStack Table example application after dependencies have been installed, using either npm run start or yarn start.

LANGUAGE: bash
CODE:
npm run start or yarn start

----------------------------------------

TITLE: Extending TableMeta Interface in TanStack Table
DESCRIPTION: Example of extending the TableMeta interface through declaration merging to add custom properties that can be accessed via the table's meta option.

LANGUAGE: tsx
CODE:
declare module '@tanstack/table-core' {
  interface TableMeta<TData extends RowData> {
    foo: string
  }
}

----------------------------------------

TITLE: Installing Dependencies for Tanstack Table Example Project
DESCRIPTION: Commands to install the necessary dependencies for the Tanstack Table example project. Provides options for both npm and yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Command to generate new Angular components using the CLI. This can also be used to generate other Angular artifacts like directives, pipes, services, etc.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Getting Leaf Headers for a Header in TanStack Table
DESCRIPTION: Method that returns all leaf headers hierarchically nested under the current header. This provides access to the lowest-level headers in the current branch.

LANGUAGE: tsx
CODE:
type getLeafHeaders = () => Header<TData>[]

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to run the Angular development server. After execution, the application will be accessible at http://localhost:4200/ and will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Defining State Change Handler Type in TanStack Table
DESCRIPTION: Type definition for the onStateChange callback which is called when the table state changes, allowing external state management integration.

LANGUAGE: tsx
CODE:
onStateChange: (updater: Updater<TableState>) => void

----------------------------------------

TITLE: Updating Table Cell Rendering
DESCRIPTION: Changes required for rendering table cells, replacing getCellProps() with manual attributes and render() with flexRender(). Shows the v8 pattern for accessing cell content.

LANGUAGE: tsx
CODE:
- <td {...cell.getCellProps()}>{cell.render('Cell')}</td> // [!code --]
+ <td key={cell.id}> // [!code ++]
+   {flexRender( // [!code ++]
+     cell.column.columnDef.cell, // [!code ++]
+     cell.getContext() // [!code ++]
+   )} // [!code ++]
+ </td> // [!code ++]

----------------------------------------

TITLE: Installing Dependencies for Qwik Project
DESCRIPTION: Command for installing project dependencies using npm, pnpm, or yarn package managers. This is required before running the Qwik application.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Starting the React Table Example Application
DESCRIPTION: Commands to start the example application after dependencies have been installed. The application can be started using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Generating Angular Components and Features
DESCRIPTION: Command to generate new Angular components and other features using the Angular CLI generator tool.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Retrieving Row ID in TanStack Table
DESCRIPTION: The resolved unique identifier for the row, determined by the options.getRowId option. Defaults to the row's index or relative index for subrows.

LANGUAGE: tsx
CODE:
id: string

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application. The compiled output will be stored in the 'dist/' directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Accessing Row Depth in TanStack Table
DESCRIPTION: Gets the depth of the row relative to the root row array. Used for determining position in nested or grouped row structures.

LANGUAGE: tsx
CODE:
depth: number

----------------------------------------

TITLE: Preventing Table State Resets When Data Changes in TanStack Table
DESCRIPTION: Shows how to stop table state (like pagination, expansion) from automatically resetting when data changes, by using a ref and disabling auto-reset features.

LANGUAGE: javascript
CODE:
const [data, setData] = React.useState([])
const skipPageResetRef = React.useRef()

const updateData = newData => {
  // When data gets updated with this function, set a flag
  // to disable all of the auto resetting
  skipPageResetRef.current = true

  setData(newData)
}

React.useEffect(() => {
  // After the table has updated, always remove the flag
  skipPageResetRef.current = false
})

useReactTable({
  ...
  autoResetPageIndex: !skipPageResetRef.current,
  autoResetExpanded: !skipPageResetRef.current,
})

----------------------------------------

TITLE: Installing Dependencies with npm/yarn for TanStack Table Example
DESCRIPTION: Command to install dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting TanStack Table Example Application
DESCRIPTION: Command to start the TanStack Table example application after installing dependencies, using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm run start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Retrieving Single Column by ID in TanStack Table
DESCRIPTION: Function that returns a single column by its ID. If the column doesn't exist, it returns undefined.

LANGUAGE: tsx
CODE:
type getColumn = (id: string) => Column<TData> | undefined

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Commands to start the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to get help information about the Angular CLI. Provides information about available commands and options.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Defining Merge Options Function Type in TanStack Table
DESCRIPTION: Type definition for the mergeOptions function used by framework adapters to properly merge reactive options. This is primarily used by adapter implementers.

LANGUAGE: tsx
CODE:
type mergeOptions = <T>(defaultOptions: T, options: Partial<T>) => T

----------------------------------------

TITLE: Generating Angular Components and Other Resources
DESCRIPTION: Command to generate new Angular components using the Angular CLI. This can also be used to generate other resources like directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Referencing Parent Column in TanStack Table
DESCRIPTION: The parent property references the parent column of the current column. It will be undefined for root-level columns.

LANGUAGE: tsx
CODE:
parent?: Column<TData>

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server that will run the application locally and auto-reload on file changes.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm/yarn
DESCRIPTION: Command to install dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Retrieving Core Row Model in TanStack Table
DESCRIPTION: Function that returns the core row model before any processing has been applied. It provides access to rows, flatRows, and rowsById.

LANGUAGE: tsx
CODE:
getCoreRowModel: () => {
  rows: Row<TData>[],
  flatRows: Row<TData>[],
  rowsById: Record<string, Row<TData>>,
}

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command for generating new Angular components and other artifacts like directives, pipes, services, etc. using the Angular CLI.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Using meta Option in ColumnDef
DESCRIPTION: Associates metadata with the column that can be accessed via column.columnDef.meta. This interface is extensible through declaration merging.

LANGUAGE: tsx
CODE:
meta?: ColumnMeta // This interface is extensible via declaration merging. See below!

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command to scaffold new Angular components and other code artifacts using the Angular CLI generator.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting TanStack Table Example Application
DESCRIPTION: Commands to start the TanStack Table example application after dependencies have been installed, using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Building Vue 3 TanStack Table Project for Production
DESCRIPTION: Command to type-check, compile and minify the project for production deployment. This creates optimized files ready for hosting.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Checking Sub-Row Selection Capability
DESCRIPTION: Row API method that returns whether the row can automatically select its sub-rows when selected.

LANGUAGE: tsx
CODE:
getCanSelectSubRows: () => boolean

----------------------------------------

TITLE: Installing Project Dependencies with npm
DESCRIPTION: Command to install all required npm packages defined in package.json for the TanStack Table column ordering project.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Retrieving All Flattened Columns in TanStack Table
DESCRIPTION: Function that returns all columns in the table flattened to a single level, including parent column objects throughout the hierarchy.

LANGUAGE: tsx
CODE:
type getAllFlatColumns = () => Column<TData>[]

----------------------------------------

TITLE: Generating Angular Components and Resources
DESCRIPTION: Command for scaffolding new Angular components and other resources using the Angular CLI generator.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Accessing Column Object from Cell in TanStack Table
DESCRIPTION: References the associated Column object for the cell, providing access to column-specific properties and methods.

LANGUAGE: tsx
CODE:
column: Column<TData>

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application for production. The compiled files will be stored in the 'dist/' directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running TanStack Table Example in Development Mode with npm/yarn
DESCRIPTION: Command to start the development server for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Checking Last Column Status with getIsLastColumn in TanStack Table
DESCRIPTION: Defines the getIsLastColumn method for column instances which determines if a column is the last in the visible columns order, optionally for a specific pinning position.

LANGUAGE: tsx
CODE:
getIsLastColumn: (position?: ColumnPinningPosition) => boolean

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access help documentation for the Angular CLI.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Setting Custom Initial State for Vue Table
DESCRIPTION: Shows how to customize the initial state of a TanStack Table in Vue by using the initialState option to set default values for column order, visibility, and sorting.

LANGUAGE: jsx
CODE:
const table = useVueTable({
  columns,
  data,
  initialState: {
    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
    columnVisibility: {
      id: false //hide the id column by default
    },
    expanded: true, //expand all rows by default
    sorting: [
      {
        id: 'age',
        desc: true //sort by age in descending order by default
      }
    ]
  },
  //...
})

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access the Angular CLI help documentation from the command line.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command for launching the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example Project in Bash
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: onGroupingChange Table Option in TanStack Table
DESCRIPTION: Table configuration option for a callback function when grouping state changes, enabling external state management for grouping configuration.

LANGUAGE: tsx
CODE:
onGroupingChange?: OnChangeFn<GroupingState>

----------------------------------------

TITLE: Running TanStack Table Example in Development Mode
DESCRIPTION: Commands to start the development server for the TanStack Table example using either npm or yarn.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Accessing Center Cells in Row
DESCRIPTION: Row API method to retrieve all visible unpinned (center) cells.

LANGUAGE: tsx
CODE:
getCenterVisibleCells: () => Cell<TData>[]

----------------------------------------

TITLE: Configuring Vite for Qwik in CSR Mode
DESCRIPTION: This snippet shows how to configure Vite to run Qwik in Client Side Rendering (CSR) mode. It uses the qwikVite plugin with the csr option set to true.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})

----------------------------------------

TITLE: Implementing Individual Controlled State in Svelte TanStack Table
DESCRIPTION: Demonstrates how to control specific state components (sorting, filtering, and pagination) in TanStack Table for server-side data fetching. Each state has its own updater function that updates the options store.

LANGUAGE: ts
CODE:
let sorting = [
  {
    id: 'age',
    desc: true, //sort by age in descending order by default
  },
]
const setSorting = updater => {
  if (updater instanceof Function) {
    sorting = updater(sorting)
  } else {
    sorting = updater
  }
  options.update(old => ({
    ...old,
    state: {
      ...old.state,
      sorting,
    },
  }))
}

let columnFilters = [] //no default filters
const setColumnFilters = updater => {
  if (updater instanceof Function) {
    columnFilters = updater(columnFilters)
  } else {
    columnFilters = updater
  }
  options.update(old => ({
    ...old,
    state: {
      ...old.state,
      columnFilters,
    },
  }))
}

let pagination = { pageIndex: 0, pageSize: 15 } //default pagination
const setPagination = updater => {
  if (updater instanceof Function) {
    pagination = updater(pagination)
  } else {
    pagination = updater
  }
  options.update(old => ({
    ...old,
    state: {
      ...old.state,
      pagination,
    },
  }))
}

//Use our controlled state values to fetch data
const tableQuery = createQuery({
  queryKey: ['users', columnFilters, sorting, pagination],
  queryFn: () => fetchUsers(columnFilters, sorting, pagination),
  //...
})

const options = writable({
  columns,
  data: tableQuery.data,
  //...
  state: {
    columnFilters, //pass controlled state back to the table (overrides internal state)
    sorting,
    pagination
  },
  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management
  onSortingChange: setSorting,
  onPaginationChange: setPagination,
})

const table = createSvelteTable(options)
//...

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Command to access help information for the Angular CLI. Provides guidance on available commands and their usage options.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm or yarn
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Accessing Left Pinned Header Groups
DESCRIPTION: Method to retrieve all header groups that are pinned to the left.

LANGUAGE: tsx
CODE:
getLeftHeaderGroups: () => HeaderGroup<TData>[]

----------------------------------------

TITLE: Starting the TanStack Table Example Project
DESCRIPTION: Commands to start the example project using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Setting Custom Initial State in TanStack Table with Solid.js
DESCRIPTION: This example shows how to customize the default initial state of a table by using the initialState option, which allows setting default values for column order, visibility, expansion state, and sorting.

LANGUAGE: jsx
CODE:
const table = createSolidTable({
  columns,
  data,
  initialState: {
    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
    columnVisibility: {
      id: false //hide the id column by default
    },
    expanded: true, //expand all rows by default
    sorting: [
      {
        id: 'age',
        desc: true //sort by age in descending order by default
      }
    ]
  },
  //...
})

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests using a platform of your choice. Requires an e2e testing package to be installed first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Starting TanStack Table Example Project with npm/yarn
DESCRIPTION: Commands for starting the example project using either npm run start or yarn start.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Accessing TanStack Table State in Lit Components
DESCRIPTION: Demonstrates how to access the internal state of a TanStack table instance using the table.getState() API in a Lit component.

LANGUAGE: typescript
CODE:
private tableController = new TableController<Person>(this);

render() {
  const table = this.tableController.table({
    columns,
    data,
    ...
  })

  console.log(table.getState()) //access the entire internal state
  console.log(table.getState().rowSelection) //access just the row selection state
  // ...
}

----------------------------------------

TITLE: getCenterTotalSize Table API Method
DESCRIPTION: Method that returns the total size of the center portion of the table by calculating the sum of unpinned/center leaf-columns when using column pinning.

LANGUAGE: tsx
CODE:
getCenterTotalSize: () => number

----------------------------------------

TITLE: Starting the TanStack Table example project
DESCRIPTION: Commands to run and start the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Initializing a Table with useQwikTable in Qwik
DESCRIPTION: Demonstrates how to create a table instance using the useQwikTable hook. This function takes an options object and returns a table wrapped in a Qwik Store with NoSerialize to manage table state in a Qwik-compatible way.

LANGUAGE: typescript
CODE:
import { useQwikTable } from '@tanstack/qwik-table'

const table = useQwikTable(options)
// ...render your table


----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests. Note that a package implementing e2e testing capabilities must be added first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command to install required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Table API Method: toggleAllRowsExpanded
DESCRIPTION: A method to toggle the expanded state for all rows in the table, with an optional parameter to explicitly set the state.

LANGUAGE: tsx
CODE:
toggleAllRowsExpanded: (expanded?: boolean) => void

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Customizing Initial Table State in TanStack Table (Qwik)
DESCRIPTION: Shows how to set custom initial values for table state using the initialState option. This example demonstrates setting initial column order, visibility, expansion state, and sorting without managing the state yourself.

LANGUAGE: jsx
CODE:
const table = useQwikTable({
  columns,
  data,
  initialState: {
    columnOrder: ['age', 'firstName', 'lastName'], //customize the initial column order
    columnVisibility: {
      id: false //hide the id column by default
    },
    expanded: true, //expand all rows by default
    sorting: [
      {
        id: 'age',
        desc: true //sort by age in descending order by default
      }
    ]
  },
  //...
})

----------------------------------------

TITLE: Generating Angular Components and Other Elements
DESCRIPTION: Angular CLI command to scaffold new components, directives, pipes, services, and other elements in the project.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to run and start the example application using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Using TemplateRef for Rendering in FlexRender
DESCRIPTION: Demonstrates how to render a TemplateRef into a specific column by passing it to the flexRender directive with a context.

LANGUAGE: angular-html
CODE:
<ng-container
  *flexRender="
              cell.column.columnDef.cell;
              props: cell.getContext();
              let cell
            "
>
  <!-- if you want to render a simple string -->
  {{ cell }}
  <!-- if you want to render an html string -->
  <div [innerHTML]="cell"></div>
</ng-container>

<ng-template #myCell let-context>
  <!-- render something with context -->
</ng-template>

----------------------------------------

TITLE: Defining and Registering Custom Filter Functions in TanStack Table
DESCRIPTION: Example of extending the type definitions to include custom filter functions and implementing them in the table options. This pattern allows for type-safe custom filter functions.

LANGUAGE: tsx
CODE:
declare module '@tanstack/table-core' {
  interface FilterFns {
    myCustomFilter: FilterFn<unknown>
  }
}

const column = columnHelper.data('key', {
  filterFn: 'myCustomFilter',
})

const table = useReactTable({
  columns: [column],
  filterFns: {
    myCustomFilter: (rows, columnIds, filterValue) => {
      // return the filtered rows
    },
  },
})

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Commands for starting the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Implementing State Change Callbacks in TanStack Table with Lit
DESCRIPTION: Demonstrates the correct pattern for state change callbacks with controlled state. The example shows how to handle both function and value updaters for the sorting state.

LANGUAGE: jsx
CODE:
@state()
private _sorting = [];
//...
render() {
  const table = this.tableController.table({
    columns,
    data,
    state: {
      sorting: this._sorting,
    },
    onSortingChange: updaterOrValue => {
      if (typeof updaterOrValue === 'function') {
        this._sorting = updaterOrValue(this._sorting)
      } else {
        this._sorting = updaterOrValue
      }
    },
    getSortedRowModel: getSortedRowModel(),
    getCoreRowModel: getCoreRowModel(),
  })

  return html`...`;
}

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests through your chosen testing platform. Requires a package implementing e2e testing capabilities.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Implementing resetRowPinning Table API Method
DESCRIPTION: Defines the resetRowPinning method that resets the row pinning state to its initial state or to an empty state if true is passed.

LANGUAGE: tsx
CODE:
resetRowPinning: (defaultState?: boolean) => void

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example using npm/yarn
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Defining Component Types in Column Definitions
DESCRIPTION: Demonstrates how to define component types directly in column definitions for headers and cells, which can then be used with the flexRender directive.

LANGUAGE: typescript
CODE:
class AppComponent {
  columns: ColumnDef<Person>[] = [
    {
      id: 'select',
      header: () => TableHeadSelectionComponent<Person>,
      cell: () => TableRowSelectionComponent<Person>,
    },
  ]
}

----------------------------------------

TITLE: Starting the TanStack Table example using npm or yarn
DESCRIPTION: Commands to start and run the TanStack Table example project after dependencies are installed using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example in Bash
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Checking Partial Page Rows Selection Status
DESCRIPTION: Returns a boolean indicating whether some (but not all) rows on the current page are selected.

LANGUAGE: tsx
CODE:
getIsSomePageRowsSelected: () => boolean

----------------------------------------

TITLE: Starting the TanStack Table Example
DESCRIPTION: Command to run and start the TanStack Table example project after dependencies have been installed.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Running Qwik Development Server
DESCRIPTION: Command to start the development server for the Qwik application. This runs the app in development mode and makes it available at localhost:5173.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command for starting the example application after dependencies have been installed using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Handling Toggle All Page Rows Selection
DESCRIPTION: Returns an event handler function that toggles selection state for all rows on the current page only.

LANGUAGE: tsx
CODE:
getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command to install required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to start the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for Qwik Project
DESCRIPTION: Commands to install dependencies for a Qwik project using npm, pnpm, or yarn package managers.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Table Example
DESCRIPTION: Commands for installing dependencies and starting the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Demonstrating Data Mutation Pitfalls with TanStack Table
DESCRIPTION: Shows how inline data transformations can destroy stable references and cause infinite rendering loops, even when the initial references are stable.

LANGUAGE: javascript
CODE:
export default function MyComponent() {
  //✅ GOOD
  const columns = useMemo(() => [
    // ...
  ], []);

  //✅ GOOD (React Query provides stable references to data automatically)
  const { data, isLoading } = useQuery({
    //...
  });

  const table = useReactTable({
    columns,
    //❌ BAD: This will cause an infinite loop of re-renders because `data` is mutated in place (destroys stable reference)
    data: data?.filter(d => d.isActive) ?? [],
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Commands to install the necessary dependencies for the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Table Example
DESCRIPTION: Commands for installing project dependencies and starting the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Configuring Vite for Qwik in CSR Mode
DESCRIPTION: This snippet shows how to configure Vite to use Qwik in CSR (Client Side Rendering) mode. The 'csr: true' setting enables client-side rendering for the Qwik application.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})

----------------------------------------

TITLE: Running Development Server for TanStack Table Example in npm/yarn
DESCRIPTION: Command to start the development server for the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Using FlexRender Directive in Angular Table Template
DESCRIPTION: Demonstrates how to use the FlexRender directive in an Angular template to render table cells with dynamic content.

LANGUAGE: angular-html
CODE:
<tbody>
@for (row of table.getRowModel().rows; track row.id) {
  <tr>
    @for (cell of row.getVisibleCells(); track cell.id) {
      <td>
        <ng-container
          *flexRender="
              cell.column.columnDef.cell;
              props: cell.getContext();
              let cell
            "
        >
          <!-- if you want to render a simple string -->
          {{ cell }}
          <!-- if you want to render an html string -->
          <div [innerHTML]="cell"></div>
        </ng-container>
      </td>
    }
  </tr>
}
</tbody>

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Commands to start the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies with npm or yarn
DESCRIPTION: Command for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Typing Table State with TypeScript in TanStack Table (Qwik)
DESCRIPTION: Shows how to leverage TypeScript types for table state properties to ensure correct data structures and get autocomplete suggestions. This example imports and applies the SortingState type to a sorting signal.

LANGUAGE: tsx
CODE:
import { useQwikTable, type SortingState } from '@tanstack/qwik-table'
//...
const sorting = Qwik.useSignal<SortingState[]>([
  {
    id: 'age', //you should get autocomplete for the `id` and `desc` properties
    desc: true,
  }
])

----------------------------------------

TITLE: Running TanStack Table Example in Development Mode
DESCRIPTION: Command for starting the development server and running the TanStack Table example using either npm or yarn.

LANGUAGE: bash
CODE:
npm run dev or yarn dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting TanStack Table Example with npm/yarn
DESCRIPTION: Command to run and start the TanStack Table example project after installing dependencies, using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm run start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Starting Development Server with npm or yarn
DESCRIPTION: Command for running the development server of the TanStack Table example using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Creating a Table Instance with createSvelteTable in Svelte
DESCRIPTION: Demonstrates how to initialize a table using the createSvelteTable function from the @tanstack/svelte-table package. This function takes an options object and returns a table instance that can be used within Svelte components.

LANGUAGE: svelte
CODE:
<script>

import { createSvelteTable } from '@tanstack/svelte-table'

const table = createSvelteTable(options)

</script>

----------------------------------------

TITLE: Running Development Server with Hot-Reload
DESCRIPTION: Command to start the development server with hot module replacement enabled, allowing for immediate UI updates when code changes.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Starting TanStack Table Example in Bash
DESCRIPTION: Commands for starting the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Starting the TanStack Table Example using npm or yarn
DESCRIPTION: Commands for starting the TanStack Table example project after installing dependencies, using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm/yarn
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Accessing Table State in Vue
DESCRIPTION: Demonstrates how to access the internal state of a TanStack Table instance in Vue using the table.getState() method.

LANGUAGE: typescript
CODE:
const table = useVueTable({
  columns,
  data: dataRef, // Reactive data support
  //...
})

console.log(table.getState()) //access the entire internal state
console.log(table.getState().rowSelection) //access just the row selection state

----------------------------------------

TITLE: Starting Development Server with npm/yarn
DESCRIPTION: Command to start the development server using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the necessary dependencies for the TanStack Table example using either npm or yarn.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running the Full-Width Table Example Locally
DESCRIPTION: Commands to install dependencies and start the full-width table example locally using Yarn package manager.

LANGUAGE: bash
CODE:
yarn && yarn start

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example using npm or yarn
DESCRIPTION: Commands to install project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Using TypeScript Types for Vue Table State
DESCRIPTION: Shows how to use TypeScript types for TanStack Table state management in Vue to ensure correct data structures and get proper type support.

LANGUAGE: tsx
CODE:
import { useVueTable, type SortingState } from '@tanstack/vue-table'
//...
const sorting = ref<SortingState[]>([
  {
    id: 'age', //you should get autocomplete for the `id` and `desc` properties
    desc: true,
  }
])

----------------------------------------

TITLE: Running TanStack Table Example in Development Mode
DESCRIPTION: Command for starting the development server for the TanStack Table example project using either npm or yarn.

LANGUAGE: shell
CODE:
npm run dev

LANGUAGE: shell
CODE:
yarn dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command to install the necessary dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Starting TanStack Table Example Application
DESCRIPTION: Command to start a TanStack Table example application using either npm or yarn.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Referencing Original Column Definition in TanStack Table
DESCRIPTION: The columnDef property provides access to the original column definition that was used to create the column instance.

LANGUAGE: tsx
CODE:
columnDef: ColumnDef<TData>

----------------------------------------

TITLE: Creating Cell IDs in TanStack Table (JavaScript)
DESCRIPTION: Shows how cell IDs are constructed by combining the parent row and column IDs with an underscore separator. This creates a unique identifier for each cell in the table instance.

LANGUAGE: javascript
CODE:
{ id: `${row.id}_${column.id}` }

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Table Example
DESCRIPTION: These commands demonstrate how to install dependencies and start the development server for a TanStack Table example. The instructions provide equivalent commands for both npm and yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Commands to start the TanStack Table example application using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm run start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Starting TanStack Table Example Project
DESCRIPTION: Command to start the TanStack Table example project after dependencies have been installed, using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Defining Debug Table Option Type in TanStack Table
DESCRIPTION: Type definition for the debugTable property which enables table-specific debugging information in development mode.

LANGUAGE: tsx
CODE:
debugTable?: boolean

----------------------------------------

TITLE: Accessing Array Indices in TanStack Table Columns
DESCRIPTION: This snippet shows how to access values from array-type data using numeric indices in column definitions, useful for tuple-like data structures.

LANGUAGE: tsx
CODE:
columnHelper.accessor(1)

// OR

{
  accessorKey: 1,
}

----------------------------------------

TITLE: Implementing Column Resize Indicator UI
DESCRIPTION: Shows how to create a visual indicator for column resizing using the columnSizingInfo state object to display the drag position during resize operations.

LANGUAGE: jsx
CODE:
<ColumnResizeIndicator
  style={{
    transform: header.column.getIsResizing()
      ? `translateX(${table.getState().columnSizingInfo.deltaOffset}px)`
      : '',
  }}
/>

----------------------------------------

TITLE: Installing Dependencies with npm or yarn for TanStack Table Example
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers. This is the first step required before running the example project.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example with npm/yarn
DESCRIPTION: Command to install the required dependencies for the TanStack Table example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Defining Features Option Type in TanStack Table
DESCRIPTION: Type definition for the _features property which allows adding extra features to the table instance beyond the core functionality.

LANGUAGE: tsx
CODE:
_features?: TableFeature[]

----------------------------------------

TITLE: Custom Cell Formatting with Uppercase Transformation
DESCRIPTION: This snippet shows how to create custom cell rendering by transforming the cell value to uppercase using the cell formatter function and getValue method.

LANGUAGE: tsx
CODE:
columnHelper.accessor('firstName', {
  cell: props => <span>{props.getValue().toUpperCase()}</span>,
})

----------------------------------------

TITLE: Configuring Undefined Value Sorting in TanStack Table
DESCRIPTION: Shows how to customize the sorting behavior for undefined values using the sortUndefined column option, with various possible values to position undefined values as needed.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Rank',
    accessorKey: 'rank',
    sortUndefined: -1, // 'first' | 'last' | 1 | -1 | false
  },
]

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project for deployment. The compiled artifacts will be stored in the dist/ directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Starting the TanStack Table Example Application
DESCRIPTION: Command to start the TanStack Table example application after dependencies are installed, using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Solving Infinite Rendering with Stable References in TanStack Table
DESCRIPTION: Demonstrates how to properly create stable references for columns and data using useMemo or useState hooks, or by defining them outside the component to prevent infinite re-rendering.

LANGUAGE: javascript
CODE:
//✅ OK: Define columns outside of the component
const columns = [
  // ...
];

//✅ OK: Define data outside of the component
const data = [
  // ...
];

// Usually it's more practical to define columns and data inside the component, so use `useMemo` or `useState` to give them stable references
export default function MyComponent() {
  //✅ GOOD: This will not cause an infinite loop of re-renders because `columns` is a stable reference
  const columns = useMemo(() => [
    // ...
  ], []);

  //✅ GOOD: This will not cause an infinite loop of re-renders because `data` is a stable reference
  const [data, setData] = useState(() => [
    // ...
  ]);

  // Columns and data are defined in a stable reference, will not cause infinite loop!
  const table = useReactTable({
    columns,
    data,
  });

  return <table>...</table>;
}

----------------------------------------

TITLE: Defining Custom Filter Function TypeScript Interface
DESCRIPTION: TypeScript signature for custom filter functions, showing the expected parameters and return type for filter functions in TanStack Table.

LANGUAGE: ts
CODE:
const myCustomFilterFn: FilterFn = (row: Row, columnId: string, filterValue: any, addMeta: (meta: any) => void) => boolean

----------------------------------------

TITLE: Customizing Multi-Sort Trigger in TanStack Table
DESCRIPTION: Shows how to customize the event that triggers multi-sorting, either by making all sorts multi-sorts or by adding additional key combinations beyond the default Shift key.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  isMultiSortEvent: (e) => true, // normal click triggers multi-sorting
  //or
  isMultiSortEvent: (e) => e.ctrlKey || e.shiftKey, // also use the `Ctrl` key to trigger multi-sorting
})

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command to generate new Angular components and other artifacts using the Angular CLI. This allows creating directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Starting Tanstack Table Example Project
DESCRIPTION: Commands to start running the Tanstack Table example project. Provides options for both npm and yarn package managers.

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Creating an Angular Table with createAngularTable
DESCRIPTION: Demonstrates how to create a table using the createAngularTable function, which accepts an options function that returns the table configuration.

LANGUAGE: typescript
CODE:
import {createAngularTable} from '@tanstack/angular-table'

export class AppComponent {
  data = signal<Person[]>([])

  table = createAngularTable(() => ({
    data: this.data(),
    columns: defaultColumns,
    getCoreRowModel: getCoreRowModel(),
  }))
}

// ...render your table in template

----------------------------------------

TITLE: Disabling Column Filtering in TanStack Table
DESCRIPTION: Shows how to disable column filtering for specific columns using the enableColumnFilter option or globally for all columns using the enableColumnFilters table option.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Id',
    accessorKey: 'id',
    enableColumnFilter: false, // disable column filtering for this column
  },
  //...
]
//...
const table = useReactTable({
  columns,
  data,
  enableColumnFilters: false, // disable column filtering for all columns
})

----------------------------------------

TITLE: Setting Multi-Sort Column Limit in TanStack Table
DESCRIPTION: Configures a maximum number of columns that can be sorted simultaneously using the maxMultiSortColCount table option.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  maxMultiSortColCount: 3, // only allow 3 columns to be sorted at once
})

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests for the Angular application. Note that this requires installing an end-to-end testing package first.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Installing Dependencies with npm or yarn for TanStack Table Example
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Accessing Table State in Angular TanStack Table
DESCRIPTION: Shows how to access the internal table state using table.getState() method, which can retrieve either the entire state object or specific parts like row selection.

LANGUAGE: typescript
CODE:
table = createAngularTable(() => ({
  columns: this.columns,
  data: this.data(),
  //...
}))

someHandler() {
  console.log(this.table.getState()) //access the entire internal state
  console.log(this.table.getState().rowSelection) //access just the row selection state
}

----------------------------------------

TITLE: Configuring Column Resize Mode in TanStack Table
DESCRIPTION: Shows how to change the column resize mode from the default 'onEnd' to 'onChange' for immediate column resizing updates during the drag operation.

LANGUAGE: tsx
CODE:
const table = useReactTable({
  //...
  columnResizeMode: 'onChange', //change column resize mode to "onChange"
})

----------------------------------------

TITLE: Implementing Selectively Controlled State in TanStack Table (Qwik)
DESCRIPTION: Demonstrates how to control specific table states (filtering, sorting, pagination) while leaving others to the internal state management. This pattern is useful for server-side data fetching scenarios where certain state values need to be accessible outside the table.

LANGUAGE: jsx
CODE:
const columnFilters = Qwik.useSignal([]) //no default filters
const sorting = Qwik.useSignal([{
  id: 'age',
  desc: true, //sort by age in descending order by default
}]) 
const pagination = Qwik.useSignal({ pageIndex: 0, pageSize: 15 })

//Use our controlled state values to fetch data
const tableQuery = useQuery({
  queryKey: ['users', columnFilters.value, sorting.value, pagination.value],
  queryFn: () => fetchUsers(columnFilters.value, sorting.value, pagination.value),
  //...
})

const table = useQwikTable({
  columns: columns.value,
  data: tableQuery.data,
  //...
  state: {
    columnFilters: columnFilters.value, //pass controlled state back to the table (overrides internal state)
    sorting: sorting.value,
    pagination: pagination.value,
  },
  onColumnFiltersChange: updater => {
    columnFilters.value = updater instanceof Function ? updater(columnFilters.value) : updater //hoist columnFilters state into our own state management
  },
  onSortingChange: updater => {
    sorting.value = updater instanceof Function ? updater(sorting.value) : updater
  },
  onPaginationChange: updater => {
    pagination.value = updater instanceof Function ? updater(pagination.value) : updater
  },
})
//...

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests for the Angular project. Requires a package that implements end-to-end testing capabilities to be installed first.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Table Example with npm/yarn
DESCRIPTION: Commands to install dependencies using either npm or yarn, followed by commands to start the application with either package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
npm run start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Accessing Internal Table State in TanStack Table (Qwik)
DESCRIPTION: Demonstrates how to access the internal state of a TanStack Table instance using the table.getState() API. This allows retrieving either the entire state object or specific state properties like rowSelection.

LANGUAGE: jsx
CODE:
const table = useQwikTable({
  columns,
  data,
  //...
})

console.log(table.getState()) //access the entire internal state
console.log(table.getState().rowSelection) //access just the row selection state

----------------------------------------

TITLE: ExpandedState Type Definition
DESCRIPTION: Defines the ExpandedState type which can be either a boolean value 'true' to expand all rows or a record mapping row IDs to boolean values.

LANGUAGE: typescript
CODE:
type ExpandedState = true | Record<string, boolean>

----------------------------------------

TITLE: Implementing Partially Controlled State in TanStack Table with Solid.js
DESCRIPTION: This snippet demonstrates how to control specific aspects of table state (filtering, sorting, pagination) by using Solid.js signals and connecting them to the table through state and onChange handlers for server-side data fetching.

LANGUAGE: jsx
CODE:
const [columnFilters, setColumnFilters] = createSignal([]) //no default filters
const [sorting, setSorting] = createSignal([{
  id: 'age',
  desc: true, //sort by age in descending order by default
}]) 
const [pagination, setPagination] = createSignal({ pageIndex: 0, pageSize: 15 })

//Use our controlled state values to fetch data
const tableQuery = createQuery({
  queryKey: ['users', columnFilters, sorting, pagination],
  queryFn: () => fetchUsers(columnFilters, sorting, pagination),
  //...
})

const table = createSolidTable({
  columns,
  get data() {
    return tableQuery.data()
  },
  //...
  state: {
    get columnFilters() {
      return columnFilters() //pass controlled state back to the table (overrides internal state)
    },
    get sorting() {
      return sorting()
    },
    get pagination() {
      return pagination()
    },
  },
  onColumnFiltersChange: setColumnFilters, //hoist columnFilters state into our own state management
  onSortingChange: setSorting,
  onPaginationChange: setPagination,
})
//...

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests for the Angular project via Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Installing dependencies for TanStack Table example
DESCRIPTION: Command to install dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Implementing Individual Controlled State in Vue Table
DESCRIPTION: Demonstrates how to control specific state elements (filtering, sorting, pagination) in a Vue TanStack Table for server-side data fetching scenarios.

LANGUAGE: typescript
CODE:
const columnFilters = ref([]) //no default filters
const sorting = ref([{
  id: 'age',
  desc: true, //sort by age in descending order by default
}])
const pagination = ref({ pageIndex: 0, pageSize: 15 }

//Use our controlled state values to fetch data
const tableQuery = useQuery({
  queryKey: ['users', columnFilters, sorting, pagination],
  queryFn: () => fetchUsers(columnFilters, sorting, pagination),
  //...
})

const table = useVueTable({
  columns,
  data: tableQuery.data,
  //...
  state: {
    get columnFilters() {
      return columnFilters.value
    },
    get sorting() {
      return sorting.value
    },
    get pagination() {
      return pagination.value
    }
  },
  onColumnFiltersChange: updater => {
    columnFilters.value =
      updater instanceof Function
        ? updater(columnFilters.value)
        : updater
  },
  onSortingChange: updater => {
    sorting.value =
      updater instanceof Function
        ? updater(sorting.value)
        : updater
  },
  onPaginationChange: updater => {
    pagination.value =
      updater instanceof Function
        ? updater(pagination.value)
        : updater
  },
})

----------------------------------------

TITLE: Enabling Conditional Row Selection in TanStack Table
DESCRIPTION: Demonstrates how to conditionally enable row selection for specific rows based on their properties using the enableRowSelection option with a function parameter.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  //...
  enableRowSelection: row => row.original.age > 18, //only enable row selection for adults
})

----------------------------------------

TITLE: Implementing State Change Callbacks in TanStack Table with Solid.js
DESCRIPTION: This snippet demonstrates the required pairing of state values with their corresponding onChange handlers, showing that controlled state must have both components to work properly.

LANGUAGE: jsx
CODE:
const [sorting, setSorting] = createSignal([])
//...
const table = createSolidTable({
  columns,
  data,
  //...
  state: {
    get sorting() {
      return sorting() //required because we are using `onSortingChange`
    },
  },
  onSortingChange: setSorting, //makes the `state.sorting` controlled
})

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application for production. Output artifacts will be stored in the dist/ directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Building for Production with Type-Checking
DESCRIPTION: Command to type-check, compile, and minify the project for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Configuring Faceting Row Models in TanStack Table
DESCRIPTION: Code example showing how to import and configure the necessary row models for column faceting in TanStack Table. This setup includes the core row model and the three faceting-related row models needed for different types of faceting operations.

LANGUAGE: typescript
CODE:
//only import the row models you need
import {
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedMinMaxValues, //depends on getFacetedRowModel
  getFacetedUniqueValues, //depends on getFacetedRowModel
}
//...
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getFacetedRowModel: getFacetedRowModel(), //if you need a list of values for a column (other faceted row models depend on this one)
  getFacetedMinMaxValues: getFacetedMinMaxValues(), //if you need min/max values
  getFacetedUniqueValues: getFacetedUniqueValues(), //if you need a list of unique values
  //...
})

----------------------------------------

TITLE: Disabling Multi-Sort Removal in TanStack Table
DESCRIPTION: Shows how to disable the ability to remove multi-sorts by setting the enableMultiRemove table option to false.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  enableMultiRemove: false, // disable the ability to remove multi-sorts
})

----------------------------------------

TITLE: Handling State Updaters in TanStack Table with Solid.js
DESCRIPTION: This example shows how to work with state updaters in onChange callbacks, demonstrating how to handle both direct value updates and function-based updaters while adding custom logic to the state update process.

LANGUAGE: jsx
CODE:
const [sorting, setSorting] = createSignal([])
const [pagination, setPagination] = createSignal({ pageIndex: 0, pageSize: 10 })

const table = createSolidTable({
  get columns() {
    return columns()
  },
  get data() {
    return data()
  },
  //...
  state: {
    get pagination() {
      return pagination()
    },
    get sorting() {
      return sorting()
    },
  }
  //syntax 1
  onPaginationChange: (updater) => {
    setPagination(old => {
      const newPaginationValue = updater instanceof Function ? updater(old) : updater
      //do something with the new pagination value
      //...
      return newPaginationValue
    })
  },
  //syntax 2
  onSortingChange: (updater) => {
    const newSortingValue = updater instanceof Function ? updater(sorting) : updater
    //do something with the new sorting value
    //...
    setSorting(updater) //normal state update
  }
})

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to run the Angular development server which serves the application at http://localhost:4200/ with automatic reload functionality.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Installing Dependencies for TanStack Table Example
DESCRIPTION: Command for installing project dependencies using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Defining Column Filter State Interface in TypeScript
DESCRIPTION: TypeScript interface definition for column filters state, showing the structure of individual filter objects and the overall column filters state array.

LANGUAGE: ts
CODE:
interface ColumnFilter {
  id: string
  value: unknown
}
type ColumnFiltersState = ColumnFilter[]

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command to generate new Angular components using Angular CLI. Can also be used to generate other artifacts like directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Implementing Manual Row Selection in TanStack Table
DESCRIPTION: This code shows how to manually handle row selection by creating a custom selection handler and using the row.getIsSelected() method to determine selection state. The example demonstrates toggling selection for a specific row.

LANGUAGE: jsx
CODE:
// ... imports and setup

function Table() {
  // ... table setup with enableRowSelection: true

  return (
    <table>
      <tbody>
        {table.getRowModel().rows.map(row => (
          <tr 
            key={row.id}
            onClick={() => row.toggleSelected()} // toggle selection on click
            style={{
              backgroundColor: row.getIsSelected() ? '#acf' : 'white',
            }}
          >
            {/* cell rendering */}
          </tr>
        ))}
      </tbody>
    </table>
  )
}

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests. A testing package needs to be installed first before this command can be used effectively.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Running Development Server for TanStack Table Example Project in Bash
DESCRIPTION: Commands to start the development server using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Creating a Custom Sorting Function for Fuzzy Filter Results
DESCRIPTION: Implements a custom sorting function that uses the ranking information generated during fuzzy filtering. This function compares items based on their rank and falls back to alphanumeric sorting when ranks are equal.

LANGUAGE: typescript
CODE:
import { compareItems } from '@tanstack/match-sorter-utils'
import { sortingFns } from '@tanstack/table'

const fuzzySort: SortingFn<any> = (rowA, rowB, columnId) => {
  let dir = 0

  // Only sort by rank if the column has ranking information
  if (rowA.columnFiltersMeta[columnId]) {
    dir = compareItems(
      rowA.columnFiltersMeta[columnId]?.itemRank!,
      rowB.columnFiltersMeta[columnId]?.itemRank!
    )
  }

  // Provide an alphanumeric fallback for when the item ranks are equal
  return dir === 0 ? sortingFns.alphanumeric(rowA, rowB, columnId) : dir
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests via the Karma test runner for the Angular project.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Updating Reactive Table Data in Vue
DESCRIPTION: Explains how to properly update reactive data in Vue TanStack Table, noting that shallowRef is used internally and requires replacing the entire value reference.

LANGUAGE: typescript
CODE:
const dataRef = ref([
  { id: 1, name: 'John' },
  { id: 2, name: 'Jane' }
])

// This will NOT update the table ❌
dataRef.value.push({ id: 4, name: 'John' })

// This will update the table ✅
dataRef.value = [
  ...dataRef.value,
  { id: 4, name: 'John' }
]

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server. When executed, the application will be available at http://localhost:4200/ and will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Importing and Configuring Faceting Row Models in TanStack Table
DESCRIPTION: This snippet demonstrates how to import and configure the necessary row models to enable global faceting features in TanStack Table. It includes the core row model along with specialized faceting models for different faceting operations.

LANGUAGE: typescript
CODE:
//only import the row models you need
import {
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedMinMaxValues, //depends on getFacetedRowModel
  getFacetedUniqueValues, //depends on getFacetedRowModel
} from '@tanstack/react-table'
//...
const table = useReactTable({
  // other options...
  getCoreRowModel: getCoreRowModel(),
  getFacetedRowModel: getFacetedRowModel(), //Faceting model for client-side faceting (other faceting methods depend on this model)
  getFacetedMinMaxValues: getFacetedMinMaxValues(), //if you need min/max values
  getFacetedUniqueValues: getFacetedUniqueValues(), //if you need a list of unique values
  //...
})

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Command to access the built-in help system for the Angular CLI with information about available commands and options.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Accessing Column Filter State from Table Instance
DESCRIPTION: Code example showing how to access the current column filters state from a React table instance using the getState() method.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  //...
})

console.log(table.getState().columnFilters) // access the column filters state from the table instance

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to get more help on the Angular CLI. Provides information about available commands and their usage.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Updating Row Selection Components
DESCRIPTION: Changes to row selection implementation, showing how to replace the prop-based selection in v7 with explicit handler functions in v8. Demonstrates checkbox implementation for both header and cells.

LANGUAGE: tsx
CODE:
// in column definitions in this case
- Header: ({ getToggleAllRowsSelectedProps }) => ( // [!code --]
-   <input type="checkbox" {...getToggleAllRowsSelectedProps()} /> // [!code --]
- ), // [!code --]
- Cell: ({ row }) => ( // [!code --]
-   <input type="checkbox" {...row.getToggleRowSelectedProps()} /> // [!code --]
- ), // [!code --]
+ header: ({ table }) => ( // [!code ++]
+   <Checkbox // [!code ++]
+     checked={table.getIsAllRowsSelected()} // [!code ++]
+     indeterminate={table.getIsSomeRowsSelected()} // [!code ++]
+     onChange={table.getToggleAllRowsSelectedHandler()} // [!code ++]
+   /> // [!code ++]
+ ), // [!code ++]
+ cell: ({ row }) => ( // [!code ++]
+   <Checkbox // [!code ++]
+     checked={row.getIsSelected()} // [!code ++]
+     disabled={!row.getCanSelect()} // [!code ++]
+     indeterminate={row.getIsSomeSelected()} // [!code ++]
+     onChange={row.getToggleSelectedHandler()} // [!code ++]
+   /> // [!code ++]
+ ), // [!code ++]

----------------------------------------

TITLE: Installing Dependencies for Qwik Project
DESCRIPTION: Command to install all dependencies for the Qwik project using npm, pnpm, or yarn package managers. This must be run before starting development or building the application.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Adding Toggle Handler UI for Expandable Rows
DESCRIPTION: Example of adding a toggle button in a column definition that allows users to expand and collapse rows based on their expandable state.

LANGUAGE: typescript
CODE:
const columns = [
  {
    accessorKey: 'name',
    header: 'Name',
  },
  {
    accessorKey: 'age',
    header: 'Age',
  },
  {
    header: 'Children',
    cell: ({ row }) => {
      return row.getCanExpand() ?
        <button
          onClick={row.getToggleExpandedHandler()}
          style={{ cursor: 'pointer' }}
        >
        {row.getIsExpanded() ? '👇' : '👉'}
        </button>
       : '';
    },
  },
]

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access the Angular CLI help documentation for additional assistance with CLI commands.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Managing Pagination State with useState in TanStack Table
DESCRIPTION: This code demonstrates how to manage pagination state externally using React's useState hook. It shows how to initialize pageIndex and pageSize and connect the state to the table through the state and onPaginationChange props.

LANGUAGE: jsx
CODE:
import { useReactTable, getCoreRowModel, getPaginationRowModel } from '@tanstack/react-table';
//...
const [pagination, setPagination] = useState({
  pageIndex: 0, //initial page index
  pageSize: 10, //default page size
});

const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getPaginationRowModel: getPaginationRowModel(),
  onPaginationChange: setPagination, //update the pagination state when internal APIs mutate the pagination state
  state: {
    //...
    pagination,
  },
});

----------------------------------------

TITLE: Global Filter State Interface in TypeScript
DESCRIPTION: The TypeScript interface definition for the global filtering state, showing that it's an object containing a globalFilter property of any type.

LANGUAGE: jsx
CODE:
interface GlobalFilter {
  globalFilter: any
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner in the Angular application.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Disabling Auto Reset of Page Index in TanStack Table
DESCRIPTION: This code shows how to disable the automatic reset of pageIndex when page-altering state changes occur. By default, pageIndex resets to 0 when data updates or filters change, but this behavior can be controlled with the autoResetPageIndex option.

LANGUAGE: jsx
CODE:
const table = useReactTable({
  columns,
  data,
  getCoreRowModel: getCoreRowModel(),
  getPaginationRowModel: getPaginationRowModel(),
  autoResetPageIndex: false, //turn off auto reset of pageIndex
});

----------------------------------------

TITLE: Setting up and running TanStack Table example with npm or yarn
DESCRIPTION: Commands for installing dependencies and starting the TanStack Table example project. The instructions provide options for using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install or yarn

LANGUAGE: bash
CODE:
npm run start or yarn start

----------------------------------------

TITLE: Updating Custom Filter Functions
DESCRIPTION: Changes to custom filter function signature in v8. Instead of filtering an array of rows, each function now evaluates individual rows and returns a boolean.

LANGUAGE: tsx
CODE:
- (rows: Row[], id: string, filterValue: any) => Row[] // [!code --]
+ (row: Row, id: string, filterValue: any) => boolean // [!code ++]

----------------------------------------

TITLE: Installing TanStack Qwik Table
DESCRIPTION: Command to install the Qwik adapter for TanStack Table. This adapter works with Qwik 1 and currently only supports client-side rendering (CSR).

LANGUAGE: bash
CODE:
npm install @tanstack/qwik-table

----------------------------------------

TITLE: Configuring Custom Row IDs for TanStack Table
DESCRIPTION: Shows how to set custom row IDs using the getRowId option to provide more meaningful identifiers in the row selection state, especially useful when working with database records.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  //...
  getRowId: row => row.uuid, //use the row's uuid from your database as the row id
})

----------------------------------------

TITLE: Installing TanStack Solid Table
DESCRIPTION: Command to install the Solid-JS adapter for TanStack Table. This adapter works with Solid-JS version 1.

LANGUAGE: bash
CODE:
npm install @tanstack/solid-table

----------------------------------------

TITLE: Retrieving Selected Rows in TanStack Table
DESCRIPTION: Demonstrates how to access rows that have been selected by the user. This uses the getSelectedRowModel method to retrieve an array of selected row objects.

LANGUAGE: javascript
CODE:
const selectedRows = table.getSelectedRowModel().rows

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Command to generate new Angular components, directives, pipes, services, and other Angular artifacts using the Angular CLI generator.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Defining Column Aggregation Functions in TanStack Table
DESCRIPTION: Shows how to specify an aggregation function for a column to aggregate data in grouped rows.

LANGUAGE: tsx
CODE:
const column = columnHelper.accessor('key', {
  aggregationFn: 'sum',
})

----------------------------------------

TITLE: Disabling Sorting for Columns and Table
DESCRIPTION: Example showing how to disable sorting for specific columns or the entire table using the enableSorting option.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'ID',
    accessorKey: 'id',
    enableSorting: false, // disable sorting for this column
  },
  {
    header: () => 'Name',
    accessorKey: 'name',
  },
  //...
]
//...
const table = useReactTable({
  columns,
  data,
  enableSorting: false, // disable sorting for the entire table
})

----------------------------------------

TITLE: Disabling Global Filtering in React Table
DESCRIPTION: Controlling global filtering behavior by disabling it for specific columns or for the entire table using enableGlobalFilter options, which prevents those columns from being included in global searches.

LANGUAGE: jsx
CODE:
const columns = [
  {
    header: () => 'Id',
    accessorKey: 'id',
    enableGlobalFilter: false, // disable global filtering for this column
  },
  //...
]
//...
const table = useReactTable({
  // other options...
  columns,
  enableGlobalFilter: false, // disable global filtering for all columns
})

----------------------------------------

TITLE: Configuring Qwik with Vite in CSR Mode
DESCRIPTION: This snippet shows how to configure Vite to use Qwik in Client Side Rendering (CSR) mode. The configuration enables the Qwik plugin with the CSR option set to true.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    qwikVite({
      csr: true,
    }),
  ],
})

----------------------------------------

TITLE: Adding Global Filter Input UI in React Table
DESCRIPTION: Example of adding a search input to allow users to enter global filter terms, using the table.setGlobalFilter method to update the filter state.

LANGUAGE: jsx
CODE:
return (
  <div>
    <input
      value=""
      onChange={e => table.setGlobalFilter(String(e.target.value))}
      placeholder="Search..."
    />
  </div>
)

----------------------------------------

TITLE: Enabling Manual (Server-Side) Expanding
DESCRIPTION: Configuration for enabling manual (server-side) expanding by setting manualExpanding to true, which bypasses the client-side getExpandedRowModel.

LANGUAGE: typescript
CODE:
const table = useReactTable({
  // other options...
  manualExpanding: true,
})

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command for starting the Angular development server which hosts the application on http://localhost:4200/ with automatic reloading on file changes.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Retrieving Faceted Unique Values in TanStack Table (TSX)
DESCRIPTION: Function that computes and returns a Map of unique values and their occurrences derived from column.getFacetedRowModel. Used for displaying faceted result values. Requires a valid getFacetedUniqueValues function to be passed to options.

LANGUAGE: tsx
CODE:
getFacetedUniqueValues: () => Map<any, number>

----------------------------------------

TITLE: Installing Dependencies with npm/yarn
DESCRIPTION: Command to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Command to run end-to-end tests after adding a package that implements testing capabilities.

LANGUAGE: shell
CODE:
ng e2e