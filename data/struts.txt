TITLE: Restricting Access to Admin Resources in web.xml
DESCRIPTION: XML configuration to restrict access to admin resources under /secure/* to users with the admin role.

LANGUAGE: xml
CODE:
<security-constraint>
    <web-resource-collection>
        <web-resource-name>admin</web-resource-name>
        <url-pattern>/secure/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>admin</role-name>
    </auth-constraint>
</security-constraint>

----------------------------------------

TITLE: Sample Action Validation Rules in XML
DESCRIPTION: Example validation configuration file (SimpleAction-validation.xml) showing how to define field validators and expression validators for different action fields.

LANGUAGE: xml
CODE:
<!DOCTYPE validators PUBLIC "-//Apache Struts//XWork Validator 1.0.3//EN"
		"http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd">
<validators>
  <field name="bar">
      <field-validator type="required">
          <message>You must enter a value for bar.</message>
      </field-validator>
      <field-validator type="int">
          <param name="min">6</param>
          <param name="max">10</param>
          <message>bar must be between ${min} and ${max}, current value is ${bar}.</message>
      </field-validator>
  </field>
  <field name="bar2">
      <field-validator type="regex">
          <param name="expression">[0-9],[0-9]</param>
          <message>The value of bar2 must be in the format "x, y", where x and y are between 0 and 9</message>
     </field-validator>
  </field>
  <field name="date">
      <field-validator type="date">
          <param name="min">12/22/2002</param>
          <param name="max">12/25/2002</param>
          <message>The date must be between 12-22-2002 and 12-25-2002.</message>
      </field-validator>
  </field>
  <field name="foo">
      <field-validator type="int">
          <param name="min">0</param>
          <param name="max">100</param>
          <message key="foo.range">Could not find foo.range!</message>
      </field-validator>
  </field>
  <validator type="expression">
      <param name="expression">foo lt bar </param>
      <message>Foo must be greater than Bar. Foo = ${foo}, Bar = ${bar}.</message>
  </validator>
</validators>

----------------------------------------

TITLE: Defining an Annotated Interface with Validation Annotations in Java
DESCRIPTION: This example demonstrates how to apply standard or custom validation annotations at the method level in a Java interface. It includes annotations like @RequiredFieldValidator and @RequiredStringValidator.

LANGUAGE: java
CODE:
public interface AnnotationDataAware {

    void setBarObj(Bar b);

    Bar getBarObj();

    @RequiredFieldValidator(message = "You must enter a value for data.")
    @RequiredStringValidator(message = "You must enter a value for data.")
    void setData(String data);

    String getData();
}

----------------------------------------

TITLE: Configuring Validation Interceptor in Struts XML
DESCRIPTION: Examples of configuring the Validation Interceptor in Struts XML, including basic usage, method exclusion, and annotated method validation. Shows integration with params and workflow interceptors.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="params"/>
    <interceptor-ref name="validation"/>
    <interceptor-ref name="workflow"/>
    <result name="success">good_result.ftl</result>
</action>

<-- in the following case myMethod of the action class will not
       get validated -->
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="params"/>
    <interceptor-ref name="validation">
        <param name="excludeMethods">myMethod</param>
    </interceptor-ref>
    <interceptor-ref name="workflow"/>
    <result name="success">good_result.ftl</result>
</action>

<-- in the following case only annotated methods of the action class will
       be validated -->
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="params"/>
    <interceptor-ref name="validation">
        <param name="validateAnnotatedMethodOnly">true</param>
    </interceptor-ref>
    <interceptor-ref name="workflow"/>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Parameterized Validation Messages Example
DESCRIPTION: Example showing how to use parameterized validation messages in XML configuration with proper DTD header

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<!DOCTYPE validators PUBLIC
        "-//Apache Struts//XWork Validator 1.0.3//EN"
        "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd">
<validators>
  <field name="username">
    <field-validator type="requiredstring">
        <message key="errors.required">
            <param name="0">getText('username.field.name')</param>
        </message>
    </field-validator>
  </field>
</validators>

----------------------------------------

TITLE: Configuring Struts 2 Security Settings in struts.xml
DESCRIPTION: XML configuration to enable various Struts 2 security features like restricting ActionContext access and enabling the allowlist.

LANGUAGE: xml
CODE:
<constant name="struts.ognl.valueStackFallbackToContext" value="false"/>
<constant name="struts.ognl.excludedNodeTypes" value="
            ognl.ASTThisVarRef,
            ognl.ASTVarRef
"/>
<constant name="struts.ognl.allowStaticFieldAccess" value="false"/>
<constant name="struts.disallowProxyObjectAccess" value="true"/>
<constant name="struts.disallowDefaultPackageAccess" value="true"/>
<constant name="struts.ognl.disallowCustomOgnlMap" value="true"/>
<constant name="struts.actionConfig.fallbackToEmptyNamespace" value="false"/>
<constant name="struts.allowlist.enable" value="true"/>

----------------------------------------

TITLE: Creating Basic struts.xml Configuration
DESCRIPTION: Minimal Struts 2 configuration file defining an action and its result.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
    "http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>

    <constant name="struts.devMode" value="true" />

    <package name="basicstruts2" extends="struts-default">
        <action name="index">
            <result>/index.jsp</result>
        </action>
    </package>

</struts>

----------------------------------------

TITLE: Restricting Direct Access to JSP Files in web.xml
DESCRIPTION: XML configuration to prevent direct access to JSP files, requiring them to be accessed through Struts actions.

LANGUAGE: xml
CODE:
<!-- Restricts access to pure JSP files - access available only via Struts action -->
<security-constraint>
    <display-name>No direct JSP access</display-name>
    <web-resource-collection>
        <web-resource-name>No-JSP</web-resource-name>
        <url-pattern>*.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>no-users</role-name>
    </auth-constraint>
</security-constraint>

<security-role>
    <description>Don't assign users to this role</description>
    <role-name>no-users</role-name>
</security-role>

----------------------------------------

TITLE: Configuring I18n Interceptor in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure the I18n Interceptor in a Struts action. It shows setting the locale storage to 'cookie' and including it in the interceptor stack for an action.

LANGUAGE: xml
CODE:
<interceptor name="i18nCookie" class="org.apache.struts2.interceptor.I18nInterceptor"/>

<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="i18nCookie">
        <param name="localeStorage">cookie</param>
    </interceptor-ref>
    <interceptor-ref name="basicStack"/>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Registering Interceptors and Creating Interceptor Stack in Apache Struts XML
DESCRIPTION: This XML snippet demonstrates how to register individual interceptors and create an interceptor stack in Apache Struts configuration. It shows the registration of a 'security' interceptor and the creation of a 'secureStack' that includes the security interceptor and the default stack.

LANGUAGE: xml
CODE:
<interceptors>
  <interceptor name="security" class="com.company.security.SecurityInterceptor"/>
  <interceptor-stack name="secureStack">
    <interceptor-ref name="security"/>
    <interceptor-ref name="defaultStack"/>
  </interceptor-stack>
</interceptors>

----------------------------------------

TITLE: Implementing Multiple Struts Validators Using @Validations Annotation
DESCRIPTION: Demonstrates how to use @Validations annotation to combine multiple validators including required fields, emails, URLs, string length, range validations, and expressions. The example shows validation configuration for various field types with custom error messages.

LANGUAGE: java
CODE:
@Validations(
           requiredFields =
                   {@RequiredFieldValidator(type = ValidatorType.SIMPLE, fieldName = "customfield", message = "You must enter a value for field.")},
           requiredStrings =
                   {@RequiredStringValidator(type = ValidatorType.SIMPLE, fieldName = "stringisrequired", message = "You must enter a value for string.")},
           emails =
                   { @EmailValidator(type = ValidatorType.SIMPLE, fieldName = "emailaddress", message = "You must enter a value for email.")},
           urls =
                   { @UrlValidator(type = ValidatorType.SIMPLE, fieldName = "hreflocation", message = "You must enter a value for email.")},
           stringLengthFields =
                   {@StringLengthFieldValidator(type = ValidatorType.SIMPLE, trim = true, minLength="10" , maxLength = "12", fieldName = "needstringlength", message = "You must enter a stringlength.")},
           intRangeFields =
                   { @IntRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "intfield", min = "6", max = "10", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
           longRangeFields =
                   { @LongRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "intfield", min = "6", max = "10", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
           shortRangeFields =
                   { @ShortRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "shortfield", min = "1", max = "128", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
           dateRangeFields =
                   {@DateRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "datefield", min = "-1", max = "99", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
           expressions = {
               @ExpressionValidator(expression = "foo > 1", message = "Foo must be greater than Bar 1. Foo = ${foo}, Bar = ${bar}."),
               @ExpressionValidator(expression = "foo > 2", message = "Foo must be greater than Bar 2. Foo = ${foo}, Bar = ${bar}."),
               @ExpressionValidator(expression = "foo > 3", message = "Foo must be greater than Bar 3. Foo = ${foo}, Bar = ${bar}."),
               @ExpressionValidator(expression = "foo > 4", message = "Foo must be greater than Bar 4. Foo = ${foo}, Bar = ${bar}."),
               @ExpressionValidator(expression = "foo > 5", message = "Foo must be greater than Bar 5. Foo = ${foo}, Bar = ${bar}.")
   }
   )
   public String execute() throws Exception {
       return SUCCESS;
   }

----------------------------------------

TITLE: Configuring Stream Result with Java Annotations in Struts2
DESCRIPTION: Example action class demonstrating Stream Result configuration using annotations. Shows how to set up file streaming with custom content type, filename, and buffer size parameters. Includes getter methods for dynamic parameter resolution.

LANGUAGE: java
CODE:
package com.mycompany.webapp.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.apache.struts2.convention.annotation.Result;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionSupport;

@Result(
	name = "success", 
	type = "stream", 
	params = { 
		"contentType", "${type}", 
		"inputName", "${stream}", 
		"bufferSize", "1024", 
		"contentDisposition", "attachment;filename=\"${filename}\"" 
	}
)
public class FileDisplay extends ActionSupport {

	private String type = "image/jpeg";
	private String filename;
	private InputStream stream;

	public String execute() throws Exception {

		filename = "myimage.jpg";
		File img = new File("/path/to/image/image.jpg");
		stream = new FileInputStream(img);

		return Action.SUCCESS;
	}
	
	private String getType() {
		return this.type;
	}
	
	private String getFilename() {
		return this.filename;
	}
	
	private InputStream getStream() {
		return this.stream;
	}
}

----------------------------------------

TITLE: Defining Lazy Parameters for Interceptors in Struts XML
DESCRIPTION: Illustrates how to define lazy parameters for interceptors that implement WithLazyParams interface. These parameters are evaluated during action invocation.

LANGUAGE: xml
CODE:
<action name="LazyFoo" class="com.opensymphony.xwork2.SimpleAction">
    <result name="success">result.jsp</result>
    <interceptor-ref name="lazy">
        <param name="foo">${bar}</param>
    </interceptor-ref>
</action>

----------------------------------------

TITLE: Configuring StrutsPrepareAndExecuteFilter in web.xml for Struts 2
DESCRIPTION: This snippet demonstrates how to configure the StrutsPrepareAndExecuteFilter in the web.xml file for a Struts 2 application. It sets up the filter and maps it to all URLs.

LANGUAGE: xml
CODE:
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- ... -->

</web-app>

----------------------------------------

TITLE: Configuring Exception Interceptor in Struts Default XML
DESCRIPTION: Shows the configuration of the ExceptionMappingInterceptor within the default interceptor stack in struts-default.xml. This setup enables automatic exception handling across the application.

LANGUAGE: xml
CODE:
...
<interceptors>
    ...
    <interceptor name="exception" class="com.opensymphony.xwork.interceptor.ExceptionMappingInterceptor"/>
    ...
</interceptors>

<interceptor-stack name="defaultStack">
    <interceptor-ref name="exception"/>
    <interceptor-ref name="alias"/>
    <interceptor-ref name="servlet-config"/>
    <interceptor-ref name="prepare"/>
    <interceptor-ref name="i18n"/>
    <interceptor-ref name="chain"/>
    <interceptor-ref name="debugging"/>
    <interceptor-ref name="profiling"/>
    <interceptor-ref name="scoped-model-driven"/>
    <interceptor-ref name="model-driven"/>
    <interceptor-ref name="actionFileUpload"/>
    <interceptor-ref name="checkbox"/>
    <interceptor-ref name="static-params"/>
    <interceptor-ref name="params"/>
    <interceptor-ref name="conversionError"/>
    <interceptor-ref name="validation">
        <param name="excludeMethods">input,back,cancel,browse</param>
    </interceptor-ref>
    <interceptor-ref name="workflow">
        <param name="excludeMethods">input,back,cancel,browse</param>
    </interceptor-ref>
</interceptor-stack>
...

----------------------------------------

TITLE: Disabling devMode in struts.xml
DESCRIPTION: XML configuration to disable development mode in a Struts 2 application for production deployment.

LANGUAGE: xml
CODE:
<constant name ="struts.devMode" value="false" />

----------------------------------------

TITLE: Configuring Interceptors in Struts XML
DESCRIPTION: Example of how to configure interceptors for an action in struts.xml file. It shows defining individual interceptors and applying them to a specific action.

LANGUAGE: xml
CODE:
<package name="default" extends="struts-default">
    <interceptors>
        <interceptor name="timer" class=".."/>
        <interceptor name="logger" class=".."/>
    </interceptors>

    <action name="login" class="tutorial.Login">
        <interceptor-ref name="timer"/>
        <interceptor-ref name="logger"/>
        <result name="input">login.jsp</result>
        <result name="success" type="redirectAction">/secure/home</result>
    </action>
</package>

----------------------------------------

TITLE: Implementing Bean Validation in Struts Action
DESCRIPTION: Complete example of a Struts Action class using bean validation annotations from both javax.validation and Hibernate validator, including custom validation rules and i18n support.

LANGUAGE: java
CODE:
package com.example.actions;

import com.opensymphony.xwork2.ActionSupport;
import org.apache.struts.beanvalidation.constraints.FieldMatch;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.interceptor.validation.SkipValidation;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.ScriptAssert;
import org.hibernate.validator.constraints.URL;

import javax.validation.constraints.*;
import java.util.Date;


@Namespace("/bean-validation")
@ParentPackage("my-bean-validation")
@Action(results = {
        @Result(name = "input", location = "bean-validation.jsp"),
        @Result(name = "success", location = "/WEB-INF/validation/successFieldValidatorsExample.jsp")
})
@FieldMatch(first = "fieldExpressionValidatorField", second = "requiredValidatorField", message = "requiredValidatorField and fieldExpressionValidatorField are not matching")
@ScriptAssert(lang = "javascript", script = "_this.dateValidatorField != null && _this.dateValidatorField.before(new java.util.Date())", message = "Date need to before now")
public class BeanValidationExampleAction extends ActionSupport {
    @NotNull
    private String requiredValidatorField = null;

    @NotBlank
    private String requiredStringValidatorField = null;

    @NotNull(message = "your.text.key.here")
    @Min(1)
    @Max(10)
    private Integer integerValidatorField = null;

    @NotNull
    private Date dateValidatorField = null;

    @NotNull
    @Size(min = 4, max = 64)
    @Email
    private String emailValidatorField = null;

    @NotNull
    @Size(min = 4, max = 64)
    @URL
    private String urlValidatorField = null;

    @NotNull
    @Size(min = 2, max = 4)
    private String stringLengthValidatorField = null;

    @Pattern(regexp = "[^<>]+")
    private String regexValidatorField = null;

    private String fieldExpressionValidatorField = null;

    // Getters and setters...
}

----------------------------------------

TITLE: Creating an Annotated Class with Multiple Validation Annotations in Java
DESCRIPTION: This example shows how to create a Java class with various validation annotations, including @RequiredFieldValidator, @IntRangeFieldValidator, and @Validations. It demonstrates the use of different validator types and complex validation scenarios.

LANGUAGE: java
CODE:
public class SimpleAnnotationAction extends ActionSupport {

    @RequiredFieldValidator(type = ValidatorType.FIELD, message = "You must enter a value for bar.")
    @IntRangeFieldValidator(type = ValidatorType.FIELD, min = "6", max = "10", message = "bar must be between ${min} and ${max}, current value is ${bar}.")
    @StrutsParameter
    public void setBar(int bar) {
        this.bar = bar;
    }

    public int getBar() {
        return bar;
    }

    @Validations(
            requiredFields =
                    {@RequiredFieldValidator(type = ValidatorType.SIMPLE, fieldName = "customfield", message = "You must enter a value for field.")},
            requiredStrings =
                    {@RequiredStringValidator(type = ValidatorType.SIMPLE, fieldName = "stringisrequired", message = "You must enter a value for string.")},
            emails =
                    { @EmailValidator(type = ValidatorType.SIMPLE, fieldName = "emailaddress", message = "You must enter a value for email.")},
            urls =
                    { @UrlValidator(type = ValidatorType.SIMPLE, fieldName = "hreflocation", message = "You must enter a value for email.")},
            stringLengthFields =
                    {@StringLengthFieldValidator(type = ValidatorType.SIMPLE, trim = true, minLength="10" , maxLength = "12", fieldName = "needstringlength", message = "You must enter a stringlength.")},
            intRangeFields =
                    { @IntRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "intfield", min = "6", max = "10", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
            dateRangeFields =
                    {@DateRangeFieldValidator(type = ValidatorType.SIMPLE, fieldName = "datefield", min = "-1", max = "99", message = "bar must be between ${min} and ${max}, current value is ${bar}.")},
            expressions = {
                @ExpressionValidator(expression = "foo > 1", message = "Foo must be greater than Bar 1. Foo = ${foo}, Bar = ${bar}."),
                @ExpressionValidator(expression = "foo > 2", message = "Foo must be greater than Bar 2. Foo = ${foo}, Bar = ${bar}."),
                @ExpressionValidator(expression = "foo > 3", message = "Foo must be greater than Bar 3. Foo = ${foo}, Bar = ${bar}."),
                @ExpressionValidator(expression = "foo > 4", message = "Foo must be greater than Bar 4. Foo = ${foo}, Bar = ${bar}."),
                @ExpressionValidator(expression = "foo > 5", message = "Foo must be greater than Bar 5. Foo = ${foo}, Bar = ${bar}.")
    }
    )
    public String execute() throws Exception {
        return SUCCESS;
    }
}

----------------------------------------

TITLE: Implementing TypeConversion Annotation in Struts Java Action Class
DESCRIPTION: This code snippet demonstrates how to use the TypeConversion annotation in a Struts Action class. It shows various use cases including application-wide conversion, custom converter classes, and different conversion rules for collections and maps.

LANGUAGE: java
CODE:
 @Conversion()
 public class ConversionAction implements Action {

   private String convertInt;

   private String convertDouble;
   private List users = null;

   private HashMap keyValues = null;

   @TypeConversion(type = ConversionType.APPLICATION)
   @StrutsParameter
   public void setConvertInt( String convertInt ) {
       this.convertInt = convertInt;
   }

   @TypeConversion(converterClass = XWorkBasicConverter.class)
   @StrutsParameter
   public void setConvertDouble( String convertDouble ) {
       this.convertDouble = convertDouble;
   }

   @TypeConversion(rule = ConversionRule.COLLECTION, converterClass = String.class)
   @StrutsParameter
   public void setUsers( List users ) {
       this.users = users;
   }

   @TypeConversion(rule = ConversionRule.MAP, converterClass = BigInteger.class)
   @StrutsParameter
   public void setKeyValues( HashMap keyValues ) {
       this.keyValues = keyValues;
   }

   @TypeConversion(type = ConversionType.APPLICATION, property = "java.util.Date", converterClass = XWorkBasicConverter.class)
   public String execute() throws Exception {
       return SUCCESS;
   }
 }

----------------------------------------

TITLE: Configuring Global Exception Handling in Struts 2 XML
DESCRIPTION: This snippet demonstrates how to set up global exception handling in the struts.xml file. It shows how to map specific exceptions to result pages and define global results.

LANGUAGE: xml
CODE:
<global-results>
    <result name="securityerror">/securityerror.jsp</result>
    <result name="error">/error.jsp</result>
</global-results>

<global-exception-mappings>
    <exception-mapping exception="org.apache.struts.register.exceptions.SecurityBreachException" result="securityerror" />
    <exception-mapping exception="java.lang.Exception" result="error" />
</global-exception-mappings>

----------------------------------------

TITLE: Basic XML Action Configuration
DESCRIPTION: Demonstrates basic XML configuration for a logon action with result mappings.

LANGUAGE: xml
CODE:
<action name="Logon" class="tutorial.Logon">
  <result type="redirectAction">Menu</result>
  <result name="input">/Logon.jsp</result>
</action>

----------------------------------------

TITLE: Configuring ExecuteAndWaitInterceptor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure an action with the ExecuteAndWaitInterceptor in the Struts XML configuration file. It includes the interceptor reference and defines result pages for wait and success states.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="completeStack"/>
    <interceptor-ref name="execAndWait"/>
    <result name="wait">longRunningAction-wait.jsp</result>
    <result name="success">longRunningAction-success.jsp</result>
</action>

----------------------------------------

TITLE: Configuring a Simple Package in Struts XML
DESCRIPTION: This snippet demonstrates how to configure a basic package in Struts, including setting up actions, interceptors, and results. It shows the usage of package attributes like name, extends, and namespace.

LANGUAGE: xml
CODE:
<struts>
  <package name="employee" extends="struts-default" namespace="/employee">
    <default-interceptor-ref name="crudStack"/>

    <action name="list" method="list"
      class="org.apache.struts2.showcase.action.EmployeeAction" >
        <result>/empmanager/listEmployees.jsp</result>
        <interceptor-ref name="basicStack"/>
    </action>
    <action name="edit-*" class="org.apache.struts2.showcase.action.EmployeeAction">
      <param name="empId">{1}</param>
      <result>/empmanager/editEmployee.jsp</result>
        <interceptor-ref name="crudStack">
          <param name="validation.excludeMethods">execute</param>
        </interceptor-ref>
      </action>
      <action name="save" method="save"
          class="org.apache.struts2.showcase.action.EmployeeAction" >
        <result name="input">/empmanager/editEmployee.jsp</result>
        <result type="redirect">edit-${currentEmployee.empId}.action</result>
      </action>
      <action name="delete" method="delete"
        class="org.apache.struts2.showcase.action.EmployeeAction" >
        <result name="error">/empmanager/editEmployee.jsp</result>
        <result type="redirect">edit-${currentEmployee.empId}.action</result>
      </action>
  </package>
</struts>

----------------------------------------

TITLE: Annotation-Based Action Configuration
DESCRIPTION: Shows how to configure an action using Java annotations with the Convention Plugin.

LANGUAGE: java
CODE:
package tutorial

@Action("Logon") // actually that is not necessary as it is added by convention
@Results(
	@Result(type="redirectAction", location="Menu"),
	@Result(name="input", location="/Logon.jsp")
)
public class Logon {

----------------------------------------

TITLE: Adding Form Field Properties to Action Class
DESCRIPTION: Java code that adds userName property with getter and setter methods to handle form field values in the Action class.

LANGUAGE: java
CODE:
private String userName;

public String getUserName() {
    return userName;
}

@StrutsParameter
public void setUserName(String userName) {
    this.userName = userName;
}

----------------------------------------

TITLE: Referencing Struts XML Configuration File
DESCRIPTION: This snippet shows how to reference the default Struts configuration file, struts.xml, which is used to define the application's configuration at runtime.

LANGUAGE: xml
CODE:
<web-app>
    <!-- Other web.xml configurations -->
    <init-param>
        <param-name>config</param-name>
        <param-value>struts.xml</param-value>
    </init-param>
</web-app>

----------------------------------------

TITLE: Implementing Register Action Class in Java
DESCRIPTION: Struts 2 Action class that handles form submission, containing personBean property and execute method for processing the form data.

LANGUAGE: java
CODE:
package org.apache.struts.register.action;

import com.opensymphony.xwork2.ActionSupport;
import org.apache.struts.register.model.Person;

public class Register extends ActionSupport {
    
    private static final long serialVersionUID = 1L;
    
    private Person personBean;


    public String execute() throws Exception {
        //call Service class to store personBean's state in database
        
        return SUCCESS;
    }

    @StrutsParameter(depth = 1)
    public Person getPersonBean() {
        return personBean;
    }
    
    public void setPersonBean(Person person) {
        personBean = person;
    }

}

----------------------------------------

TITLE: Configuring Regex Validator in Struts XML
DESCRIPTION: Demonstrates various ways to configure the regex validator in Struts, including plain validator syntax, field validator syntax, and field validator syntax with expressions. The example shows how to validate a 'myStrangePostcode' field using different approaches.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="regex">
        <param name="fieldName">myStrangePostcode</param>
        <param name="regex"><![CDATA[([aAbBcCdD][123][eEfFgG][456])]]></param>
    </validator>
 
    <!-- Field Validator Syntax -->
    <field name="myStrangePostcode">
        <field-validator type="regex">
            <param name="regex"><![CDATA[([aAbBcCdD][123][eEfFgG][456])]]></param>
        </field-validator>
    </field>
 
    <!-- Field Validator Syntax with expressions -->
    <field name="myStrangePostcode">
        <field-validator type="regex">
            <param name="regexExpression">${regexValue}</param> <!-- will be evaluated as: String getRegexValue() -->
            <param name="caseSensitiveExpression">${caseSensitiveValue}</param> <!-- will be evaluated as: boolean getCaseSensitiveValue() -->
            <param name="trimExpression">${trimValue}</param> <!-- will be evaluated as: boolean getTrimValue() -->
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Implementing a RESTful Orders Controller in Java
DESCRIPTION: Java code showing an example RESTful controller for handling orders, demonstrating GET and PUT methods

LANGUAGE: java
CODE:
package org.apache.struts2.rest.example;

public class OrdersController implements ModelDriven<Order> {

    private OrderManager orderManager;
    private String id;
    private Order model;

    // Handles /orders/{id} GET requests
    public HttpHeaders show() {
        model = orderManager.findOrder(id);
        return new DefaultHttpHeaders("show")
            .withETag(model.getUniqueStamp())
            .lastModified(model.getLastModified());
    }

    // Handles /orders/{id} PUT requests
    public String update() {
        orderManager.updateOrder(model);
        return "update";
    }

    // getters and setters
}

----------------------------------------

TITLE: Defining Local Interceptor Stack for an Action in Apache Struts XML
DESCRIPTION: This XML snippet shows how to define a local interceptor stack for a specific action in Apache Struts. It demonstrates setting up the 'VelocityCounter' action with a custom interceptor stack 'defaultComponentStack'.

LANGUAGE: xml
CODE:
<action name="VelocityCounter" class="org.apache.struts2.example.counter.SimpleCounter">
    <result name="success">...</result>
    <interceptor-ref name="defaultComponentStack"/>
</action>

----------------------------------------

TITLE: Defining Global Results in Struts XML Configuration
DESCRIPTION: Demonstrates how to define global results that can be shared across multiple actions in a package.

LANGUAGE: xml
CODE:
<global-results>
    <result name="error">/Error.jsp</result>
    <result name="invalid.token">/Error.jsp</result>
    <result name="login" type="redirectAction">Logon!input</result>
</global-results>

----------------------------------------

TITLE: Configuring Struts 2 Filter in web.xml
DESCRIPTION: Web application deployment descriptor configuration to set up the Struts 2 filter.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>Basic Struts2</display-name>
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<welcome-file-list>
		<welcome-file>index</welcome-file>
	</welcome-file-list>
</web-app>

----------------------------------------

TITLE: Creating Form with Field Validators in Struts JSP
DESCRIPTION: HTML/JSP form implementation showing various field validators including required fields, string length, integer, date, email, URL, and regex validators. The form includes error message display sections and input fields with appropriate labels.

LANGUAGE: html
CODE:
<h3>All Field Errors Will Appear Here</h3>
<s:fielderror/>
<hr/>

<h3>Field Error due to 'Required String Validator Field' Will Appear Here</h3>
<s:fielderror>
    <s:param value="%{'requiredStringValidatorField'}"/>
</s:fielderror>
<hr/>

<h3>Field Error due to 'String Length Validator Field' Will Appear Here</h3>
<s:fielderror>
    <s:param>stringLengthValidatorField</s:param>
</s:fielderror>
<hr/>

<s:form action="submitFieldValidatorsExamples" namespace="/validation" method="POST" theme="xhtml">
    <s:textfield label="Required Validator Field" name="requiredValidatorField"/>
    <s:textfield label="Required String Validator Field" name="requiredStringValidatorField"/>
    <s:textfield label="Integer Validator Field" name="integerValidatorField"/>
    <s:textfield label="Date Validator Field" name="dateValidatorField"/>
    <s:textfield label="Email Validator Field" name="emailValidatorField"/>
    <s:textfield label="URL Validator Field" name="urlValidatorField"/>
    <s:textfield label="String Length Validator Field" name="stringLengthValidatorField"/>
    <s:textfield label="Regex Validator Field" name="regexValidatorField"/>
    <s:textfield label="Field Expression Validator Field" name="fieldExpressionValidatorField"/>
    <s:submit label="Submit" cssClass="btn btn-primary"/>
</s:form>

----------------------------------------

TITLE: Adding Struts 2 Core Dependency in Maven
DESCRIPTION: Maven dependency configuration to include Struts 2 core library in the project.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-core</artifactId>
    <version>${struts2.version}</version>
</dependency>

----------------------------------------

TITLE: Implementing Custom ActionMapper in Java for Struts 2
DESCRIPTION: Shows the basic structure for implementing a custom ActionMapper in Java for Struts 2, including the required methods getMapping and getUriFromActionMapping.

LANGUAGE: java
CODE:
public class MyCustomActionMapper implements ActionMapper {
  public ActionMapping getMapping(HttpServletRequest request,
                                  ConfigurationManager configManager) {
    ....
  }

  public String getUriFromActionMapping(ActionMapping mapping) {
    ....
  }
}

----------------------------------------

TITLE: Configuring Exception Interceptor in Struts XML
DESCRIPTION: Example configuration showing how to set up exception handling in Struts, including global exception mappings and action-specific exception handling. Demonstrates configuring global results, exception mappings, and interceptor stack integration.

LANGUAGE: xml
CODE:
<struts>
    <package name="default" extends="xwork-default">
        <global-results>
            <result name="error" type="freemarker">error.ftl</result>
        </global-results>

        <global-exception-mappings>
            <exception-mapping exception="java.lang.Exception" result="error"/>
        </global-exception-mappings>

        <action name="test">
            <interceptor-ref name="exception"/>
            <interceptor-ref name="basicStack"/>
            <exception-mapping exception="com.acme.CustomException" result="custom_error"/>
            <result name="custom_error">custom_error.ftl</result>
            <result name="success" type="freemarker">test.ftl</result>
        </action>
    </package>
</struts>

----------------------------------------

TITLE: Overriding Interceptor Parameters in Struts XML
DESCRIPTION: Shows how to override parameters of interceptors when referencing them in an action. This allows customizing interceptor behavior for specific actions.

LANGUAGE: xml
CODE:
<action name="myAction" class="myActionClass">
    <interceptor-ref name="defaultStack">
        <param name="validation.excludeMethods">myValidationExcludeMethod</param>
        <param name="workflow.excludeMethods">myWorkflowExcludeMethod</param>
    </interceptor-ref>
</action>

----------------------------------------

TITLE: Configuring Struts 2 Application in XML
DESCRIPTION: This XML configuration file (struts.xml) defines the action mappings for the Struts 2 application, connecting URLs to Action classes and specifying which views to render based on the action results.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
		"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
		"http://struts.apache.org/dtds/struts-2.5.dtd">
<struts>
    <constant name="struts.devMode" value="true" />

    <package name="basicstruts2" extends="struts-default">
        <action name="index">
            <result>/index.jsp</result>
        </action>
		
        <action name="hello" class="org.apache.struts.helloworld.action.HelloWorldAction" method="execute">
            <result name="success">/HelloWorld.jsp</result>
        </action>
    </package>
</struts>

----------------------------------------

TITLE: Creating Input Form with Struts Tags in HTML
DESCRIPTION: This snippet demonstrates how to create an HTML form using Struts tags. It includes text fields for name, age, and favorite color, along with a submit button.

LANGUAGE: html
CODE:
<html>
<head>
	<title>Struts2 Showcase - Validation - Basic</title>
	<s:head/>
</head>

<body>

<div class="page-header">
	<h1>Basic validation Example</h1>
</div>

<div class="container-fluid">
	<div class="row">
		<div class="col-md-12">

			<p>
				<b>What is your favorite color?</b>

			<p/>

			<s:form method="post">
				<s:textfield label="Name" name="name"/>
				<s:textfield label="Age" name="age"/>
				<s:textfield label="Favorite color" name="answer"/>
				<s:submit cssClass="btn btn-primary"/>
			</s:form>
		</div>
	</div>
</div>
</body>
</html>

----------------------------------------

TITLE: Configuring Maven Build for Struts 2 Application
DESCRIPTION: Maven build configuration for a Struts 2 web application, including the Jetty plugin for running the app.

LANGUAGE: XML
CODE:
<build>
    <finalName>basic-struts</finalName>
</build>

LANGUAGE: XML
CODE:
<build>
    ...   
    <plugins>
        <plugin>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>9.4.7.v20170914</version>
            <configuration>
                <webApp>
                    <contextPath>/${build.finalName}</contextPath>
                </webApp>
                <stopKey>CTRL+C</stopKey>
                <stopPort>8999</stopPort>
                <scanIntervalSeconds>10</scanIntervalSeconds>
                <scanTargets>
                    <scanTarget>src/main/webapp/WEB-INF/web.xml</scanTarget>
                </scanTargets>
            </configuration>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Implementing Struts DispatcherListener for Configuration Provider
DESCRIPTION: Example showing how to add a custom configuration provider through a DispatcherListener. The code demonstrates initializing a configuration provider during dispatcher initialization.

LANGUAGE: java
CODE:
 static {
   Dispatcher.addDispatcherListener(new DispatcherListener() {
     ....
     public void dispatcherInitialized(Dispatcher du) {
         ConfigurationManager confManager = du.getConfigurationManager();
         confManager.addConfigurationProvider( ... );
     }
     ....
   });
 }

----------------------------------------

TITLE: Defining Action Method with Annotation in Java
DESCRIPTION: Java code snippet demonstrating how to use the @Action annotation to map a method to a specific action URL in Struts 2.

LANGUAGE: java
CODE:
@Action("register-input")
public String input() throws Exception {
    logger.info("In input method of class Register");

    return INPUT;
}

----------------------------------------

TITLE: Implementing VisitorFieldValidator Annotation in Java
DESCRIPTION: Example showing how to apply the VisitorFieldValidator annotation at method level. The validator enables forwarding validation to object properties using their own validator files, supporting both simple Objects and Collections.

LANGUAGE: java
CODE:
@VisitorFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, context = "action alias", appendPrefix = true)

----------------------------------------

TITLE: Required String Validation in Struts 2 XML
DESCRIPTION: XML configuration for implementing required field validation on the firstName field using Struts 2's requiredstring validator. The validator ensures the user enters a value in the first name form field.

LANGUAGE: xml
CODE:
<!DOCTYPE validators PUBLIC "-//Apache Struts//XWork Validator 1.0.3//EN" "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd">

<validators>
    <validator type="requiredstring">
        <param name="fieldname">personBean.firstName</param>
        <message>First name is required.</message>
    </validator>
</validators>

----------------------------------------

TITLE: Using Struts 2 URL Tag with Parameters
DESCRIPTION: Demonstrates how to use the Struts 2 url tag with nested param tags to create a URL with query string parameters.

LANGUAGE: jsp
CODE:
<s:url action="hello" var="helloLink">
  <s:param name="userName">Bruce Phillips</s:param>
</s:url>

<p><a href="${helloLink}">Hello Bruce Phillips</a></p>

----------------------------------------

TITLE: Complete Struts Configuration Example
DESCRIPTION: Comprehensive example showing various Struts configuration options including strict method invocation.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
    <constant name="struts.enable.DynamicMethodInvocation" value="true"/>
    <package name="default" extends="struts-default" strict-method-invocation="true">
    <action name="index" class="org.apache.struts2.examples.actions.Index">
        <result name="success" type="redirectAction">hello</result>
    </action>
    <action name="hello" class="org.apache.struts2.examples.actions.HelloAction">
        <result name="success">/WEB-INF/content/hello.jsp</result>
        <result name="redisplay" type="redirectAction">hello</result>
        <allowed-methods>add</allowed-methods>
    </action>
  </package>
</struts>

----------------------------------------

TITLE: Handling Multiple File Uploads in Struts 2 Action Class
DESCRIPTION: Demonstrates how to handle multiple file uploads in a Struts 2 action class using the UploadedFilesAware interface.

LANGUAGE: java
CODE:
public class MultipleFileUploadUsingListAction extends ActionSupport implements UploadedFilesAware {

    private List<UploadedFile> uploads = new ArrayList<>();

    public List<UploadedFile> getUpload() {
        return this.uploads;
    }

    @Override
    public void withUploadedFiles(List<UploadedFile> uploads) {
        this.uploads = uploads;
    }

    private List<String> getUploadFileNames() {
        return this.uploads.stream()
                .map(UploadedFile::getOriginalName)
                .collect(Collectors.toList());
    }

    private List<String> getUploadContentTypes() {
        return this.uploads.stream()
                .map(UploadedFile::getContentType)
                .collect(Collectors.toList());
    }

    public String execute() throws Exception {
        System.out.println("files:");
        for (UploadedFile u : uploads) {
            System.out.println("*** " + u + "\t" + u.length());
        }
        System.out.println("filenames:");
        for (String n : getUploadFileNames()) {
            System.out.println("*** " + n);
        }
        System.out.println("content types:");
        for (String c : getUploadContentTypes()) {
            System.out.println("*** " + c);
        }
        System.out.println("\n\n");
        return SUCCESS;
    }
}

----------------------------------------

TITLE: Configuring Result Types in Struts XML
DESCRIPTION: Examples of how to configure different result types in Struts XML, including specifying result names and types.

LANGUAGE: xml
CODE:
<result name="success" type="dispatcher">/WEB-INF/index.jsp</result>

LANGUAGE: xml
CODE:
<result name="success" type="dispatcher">/WEB-INF/index.jsp</result>
<result name="input" type="dispatcher">/WEB-INF/form.jsp</result>
<result name="error" type="dispatcher">/WEB-INF/error.jsp</result>

LANGUAGE: xml
CODE:
<result name="success">/WEB-INF/index.jsp</result>

LANGUAGE: xml
CODE:
<result>/WEB-INF/index.jsp</result>

----------------------------------------

TITLE: Setting Constants in Struts Properties File
DESCRIPTION: Illustrates how to define a constant in the struts.properties file. This example sets the 'struts.devMode' property to true.

LANGUAGE: properties
CODE:
struts.devMode = true

----------------------------------------

TITLE: Enabling Struts Debug Mode Configuration
DESCRIPTION: XML configuration snippet to enable debug mode in Struts framework by setting struts.devMode to true in struts.xml

LANGUAGE: xml
CODE:
<constant name="struts.devMode" value="true" />

----------------------------------------

TITLE: Using Struts 2 Property Tag in JSP
DESCRIPTION: Demonstrates how to use the Struts 2 property tag to display values from the Action class, including primitive types and objects.

LANGUAGE: jsp
CODE:
<s:property value="messageStore.message" />

<p>I've said hello <s:property value="helloCount" /> times!</p>

<p><s:property value="messageStore" /></p>

----------------------------------------

TITLE: Configuring Struts 2 Parameters in web.xml
DESCRIPTION: XML snippet demonstrating how to set Struts 2 configuration parameters using filter initialization parameters in the web.xml file.

LANGUAGE: xml
CODE:
<filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
    <init-param>
        <param-name>struts.devMode</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>

----------------------------------------

TITLE: Implementing Global and Local Exception Mappings in Struts XML
DESCRIPTION: Demonstrates how to configure both global and action-specific exception mappings in struts.xml, including result definitions and exception handling rules.

LANGUAGE: xml
CODE:
<struts>
    <package name="default">
        ...
        <global-results>
            <result name="login" type="redirect">/Login.action</result>
            <result name="Exception">/Exception.jsp</result>
        </global-results>

        <global-exception-mappings>
            <exception-mapping exception="java.sql.SQLException" result="SQLException"/>
            <exception-mapping exception="java.lang.Exception" result="Exception"/>
        </global-exception-mappings>
        ...
        <action name="DataAccess" class="com.company.DataAccess">
            <exception-mapping exception="com.company.SecurityException" result="login"/>
            <result name="SQLException" type="chain">SQLExceptionAction</result>
            <result>/DataAccess.jsp</result>
        </action>
        ...
    </package>
</xwork>

----------------------------------------

TITLE: Handling Collections in Struts JSP Tags
DESCRIPTION: Shows how to work with Lists and Maps in Struts tags using OGNL syntax. Includes examples of creating and selecting from collections.

LANGUAGE: jsp
CODE:
<s:select label="label" name="name" list="{'name1','name2','name3'}" value="%{'name2'}" />

<s:select label="label" name="name" list="#{'foo':'foovalue', 'bar':'barvalue'}" />

<s:if test="'foo' in {'foo','bar'}">
   muhahaha
</s:if>
<s:else>
   boo
</s:else>

<s:if test="'foo' not in {'foo','bar'}">
   muhahaha
</s:if>
<s:else>
   boo
</s:else>

----------------------------------------

TITLE: Struts Form with File Upload Field
DESCRIPTION: JSP form configuration using Struts tags to create a file upload form with multipart encoding

LANGUAGE: xml
CODE:
<s:form action="doUpload" method="post" enctype="multipart/form-data">
    <s:file name="upload" label="File"/>
    <s:submit/>
</s:form>

----------------------------------------

TITLE: Loading Default Struts Configuration XML
DESCRIPTION: Reference to the remote struts-default.xml file content that defines default bundled results, interceptors and interceptor stacks. This configuration is automatically included in struts.xml unless explicitly excluded via struts.configuration.files setting.

LANGUAGE: xml
CODE:
{% highlight xml %}
{% remote_file_content https://raw.githubusercontent.com/apache/struts/master/core/src/main/resources/struts-default.xml %}
{% endhighlight %}

----------------------------------------

TITLE: Configuring Constants in Web.xml for Struts
DESCRIPTION: Demonstrates how to set Struts constants as initialization parameters in the web.xml file. This example configures the 'struts.devMode' parameter for the Struts filter.

LANGUAGE: xml
CODE:
<web-app id="WebApp_9" version="2.4" 
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <filter>
        <filter-name>struts</filter-name>
        <filter-class>org.apache.struts2.dispatcher.StrutsPrepareAndExecuteFilter</filter-class>
        <init-param>
        	<param-name>struts.devMode</param-name>
        	<param-value>true</param-value>
        </init-param>
    </filter>

    ...

</web-app>

----------------------------------------

TITLE: Creating Struts2 Form with Client Validation
DESCRIPTION: HTML form with Struts2 tags implementing client-side validation. Uses the xhtml theme and requires s:head tag for stylesheet inclusion.

LANGUAGE: xml
CODE:
<html>
<head>
	<title>Struts2 Showcase - Validation - Basic</title>
	<s:head/>
</head>

<body>

<div class="page-header">
	<h1>Basic validation Example</h1>
</div>

<div class="container-fluid">
	<div class="row">
		<div class="col-md-12">
			<s:form method="post" validate="true">
				<s:textfield label="Name" name="name"/>
				<s:textfield label="Age" name="age"/>
				<s:textfield label="Favorite color" name="answer"/>
				<s:submit cssClass="btn btn-primary"/>
			</s:form>
		</div>
	</div>
</div>
</body>
</html>

----------------------------------------

TITLE: Configuring Action-Specific Interceptors in Struts 2 XML
DESCRIPTION: XML configuration showing how to specify timer and logger interceptors for a specific register action, along with the default interceptor stack and exception logging parameters.

LANGUAGE: xml
CODE:
<action name="register" class="org.apache.struts.register.action.Register" method="execute">
    <interceptor-ref name="timer" />
    <interceptor-ref name="logger" />
    <interceptor-ref name="defaultStack">
        <param name="exception.logEnabled">true</param>
        <param name="exception.logLevel">ERROR</param>
    </interceptor-ref>
    <result name="success">thankyou.jsp</result>
    <result name="input">register.jsp</result>
</action>

----------------------------------------

TITLE: Configuring Struts Action for Spring-Managed Class (XML)
DESCRIPTION: Struts configuration (struts.xml) specifying the Spring bean id for the action class, allowing Struts to use the Spring-managed action bean.

LANGUAGE: xml
CODE:
<action name="edit" class="editAction" method="input">
    <result name="input">/edit.jsp</result>
</action>

----------------------------------------

TITLE: Struts Static Content Package Configuration
DESCRIPTION: Default package paths for serving static content (JavaScript, CSS) through the FilterDispatcher filter. Static content requests must start with '/struts/' and are mapped to these common packages.

LANGUAGE: text
CODE:
org.apache.struts2.static\ntemplate

----------------------------------------

TITLE: Implementing File Upload Handling in Struts 2 Action Class
DESCRIPTION: Shows how to implement the UploadedFilesAware interface in a Struts 2 action class to handle file uploads.

LANGUAGE: java
CODE:
public class UploadAction extends ActionSupport implements UploadedFilesAware {
  
    private UploadedFile uploadedFile;
    private String contentType;
    private String fileName;
    private String originalName;

    @Override
    public void withUploadedFiles(List<UploadedFile> uploadedFiles) {
        if (!uploadedFiles.isEmpty()) {
          this.uploadedFile = uploadedFiles.get(0);
          this.fileName = uploadedFile.getName();
          this.contentType = uploadedFile.getContentType();
          this.originalName = uploadedFile.getOriginalName();
        }
    }

    public String execute() {
        // do something with the file
        return SUCCESS;
    }
}

----------------------------------------

TITLE: Configuring Validation Interceptor in Struts 2 XML
DESCRIPTION: This XML snippet demonstrates how to configure the validation interceptor in Struts 2. It shows how to set the validateAnnotatedMethodOnly parameter to true and exclude specific methods from validation.

LANGUAGE: xml
CODE:
<interceptor-ref name="validation">
    <param name="validateAnnotatedMethodOnly">true</param>
    <param name="excludeMethods">input,back,cancel,browse</param>
</interceptor-ref>

----------------------------------------

TITLE: Custom URL mapping for Struts 2 filter in web.xml
DESCRIPTION: This snippet shows how to configure a custom URL mapping for the Struts 2 filter in web.xml. It maps the filter to only handle requests ending with .action.

LANGUAGE: xml
CODE:
<web-app ...>

    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>*.action</url-pattern>
    </filter-mapping>

</web-app>

----------------------------------------

TITLE: Configuring Expression Validator in Struts XML
DESCRIPTION: Example configuration of an Expression validator in Struts validation XML. The validator evaluates an OGNL expression that must return a boolean value. The message element defines the error message displayed when validation fails.

LANGUAGE: xml
CODE:
<validators>
      <validator type="expression">
         <param name="expression"> .... </param>
         <message>Failed to meet Ognl Expression  .... </message>
      </validator>
</validators>

----------------------------------------

TITLE: Action Class with Collection Support
DESCRIPTION: Implementation of an action class that demonstrates handling of Lists and Maps with type conversion support.

LANGUAGE: java
CODE:
public class MyBeanAction implements Action {
    private List beanList = new ArrayList();
    private Map beanMap = new HashMap();

    @StrutsParameter(depth = 2)
    public List getBeanList() {
        return beanList;
    }

    public void setBeanList(List beanList) {
        this.beanList = beanList;
    }

    @StrutsParameter(depth = 2)
    public Map getBeanMap() {
        return beanMap;
    }

    public void setBeanMap(Map beanMap) {
        this.beanMap = beanMap;
    }

    public String execute() throws Exception {
        return SUCCESS;
    }
}

----------------------------------------

TITLE: Regular Expression Validation in Struts 2 XML
DESCRIPTION: XML configuration using the regex validator to enforce a specific phone number format (999-999-9999). Combines required field validation with pattern matching.

LANGUAGE: xml
CODE:
<validator type="requiredstring">
    <param name="fieldname">personBean.phoneNumber</param>
    <message>Phone number is required.</message>
</validator>
<validator type="regex">
    <param name="fieldname">personBean.phoneNumber</param>
    <param name="regex"><![CDATA[\d{3}-\d{3}-\d{4}]]></param>
    <message>Phone number must be entered as 999-999-9999.</message>
</validator>

----------------------------------------

TITLE: Implementing Form Validation in Struts 2 Action Class
DESCRIPTION: This code snippet shows how to implement the validate method in a Struts 2 Action class to perform form validation. It checks for required fields and age restrictions.

LANGUAGE: java
CODE:
public void validate(){
    if (personBean.getFirstName().length() == 0) {
        addFieldError("personBean.firstName", "First name is required.");
    }

    if (personBean.getEmail().length() == 0) {
        addFieldError("personBean.email", "Email is required.");
    }

    if (personBean.getAge() < 18) {
        addFieldError("personBean.age", "Age is required and must be 18 or older");
    }
}

----------------------------------------

TITLE: Struts Form Tag Example
DESCRIPTION: Shows how to create a form that submits to a Struts action using the Struts tag library.

LANGUAGE: xml
CODE:
<s:form action="Hello">
    <s:textfield label="Please enter your name" name="name"/>
    <s:submit/>
</s:form>

----------------------------------------

TITLE: Implementing ModelDriven Action in Java
DESCRIPTION: Action class implementing ModelDriven interface to return a Gangster model object. The getModel() method creates and returns a new Gangster instance that will be populated with request parameters.

LANGUAGE: java
CODE:
public class ModelDrivenAction implements ModelDriven { 
    public String execute() throws Exception {
        return SUCCESS;
    }

    public Object getModel() {
        return new Gangster();
    }
}

----------------------------------------

TITLE: Implementing After Annotation in Struts Action Class (Java)
DESCRIPTION: This example demonstrates how to use the @After annotation in a Struts action class. The annotated method isValid() is called after the main execute() method and the result are executed. It can be used for validation or post-processing tasks.

LANGUAGE: java
CODE:
 public class SampleAction extends ActionSupport {

  @After
  public void isValid() throws ValidationException {
    // validate model object, throw exception if failed
  }

  public String execute() {
     // perform action
     return SUCCESS;
  }
 }

----------------------------------------

TITLE: Configuring Dispatcher Result in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure a Dispatcher Result in Struts. It sets the result name to 'success' and specifies the location of the JSP file to be included or forwarded.

LANGUAGE: xml
CODE:
<result name="success" type="dispatcher">
  <param name="location">foo.jsp</param>
</result>

----------------------------------------

TITLE: Defining Spring Bean for Dependency Injection (XML)
DESCRIPTION: Spring configuration file (applicationContext.xml) defining a bean for EditServiceInMemory that Spring will inject into ActionSupport classes.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="editService" class="org.apache.struts.edit.service.EditServiceInMemory" />

</beans>

----------------------------------------

TITLE: Configuring Spring Listener in web.xml (XML)
DESCRIPTION: Configuration in web.xml to activate the Spring framework when the application starts up.

LANGUAGE: xml
CODE:
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

----------------------------------------

TITLE: Configuring Freemarker Result Type in Struts XML
DESCRIPTION: Demonstrates how to configure an action to use the Freemarker result type in Struts XML configuration. It includes the struts-default.xml file and defines an action with a Freemarker view.

LANGUAGE: xml
CODE:
<include file="struts-default.xml"/>
...
<action name="test" class="package.Test">
  <result name="success" type="freemarker">/WEB-INF/views/testView.ftl</result>
</action>
...

----------------------------------------

TITLE: Using Struts Date Tag in JSP
DESCRIPTION: Examples of using the Struts date tag with different attributes for formatting dates in JSP pages. Demonstrates custom format, internationalized format, nice formatting, and default formatting.

LANGUAGE: jsp
CODE:
  <s:date name="person.birthday" format="dd/MM/yyyy" />
  <s:date name="person.birthday" format="%{getText('some.i18n.key')}" />
  <s:date name="person.birthday" nice="true" />
  <s:date name="person.birthday" />

----------------------------------------

TITLE: Configuring Action-Specific Exception Handling in Struts 2 XML
DESCRIPTION: This snippet shows how to configure exception handling for a specific action in the struts.xml file. It maps a SecurityBreachException to a 'login' result for the 'actionspecificexception' action.

LANGUAGE: xml
CODE:
<action name="actionspecificexception" class="org.apache.struts.register.action.Register" method="throwSecurityException">
   <exception-mapping exception="org.apache.struts.register.exceptions.SecurityBreachException" result="login" />
   <result>/register.jsp</result>
   <result name="login">/login.jsp</result>
</action>

----------------------------------------

TITLE: Configuring Struts 2 Development Mode with Specific Options
DESCRIPTION: This XML configuration demonstrates how to enable Development Mode while explicitly setting certain production options. It includes settings for i18n reload, XML configuration reload, and Freemarker template caching.

LANGUAGE: xml
CODE:
<constant name="struts.devMode" value="true" />
<constant name="struts.i18n.reload" value="false"/>
<constant name="struts.configuration.xml.reload" value="false"/>
<constant name="struts.freemarker.templatesCache" value="true"/>
<constant name="struts.freemarker.templatesCache.updateDelay" value="120"/>
<constant name="struts.freemarker.mru.max.strong.size" value="120"/>

----------------------------------------

TITLE: Implementing ExpressionValidator Annotation in Java
DESCRIPTION: This snippet demonstrates how to use the ExpressionValidator annotation in Java. It includes parameters for message, key, shortCircuit, and expression. The expression parameter is an OGNL expression that returns a boolean value.

LANGUAGE: java
CODE:
@ExpressionValidator(message = "Default message", key = "i18n.key", shortCircuit = true, expression = "an OGNL expression" )

----------------------------------------

TITLE: Configuring Redirect Result with Anchor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure a redirect result with a location, parse option, and anchor in Struts XML. It generates a redirect URL to '/foo.jsp#FRAGMENT'.

LANGUAGE: xml
CODE:
<result name="success" type="redirect">
  <param name="location">foo.jsp</param>
  <param name="parse">false</param>
  <param name="anchor">FRAGMENT</param>
</result>

----------------------------------------

TITLE: Action with Multiple URLs and Methods
DESCRIPTION: Java class demonstrating how to map multiple URLs to different methods within a single action class using annotations.

LANGUAGE: java
CODE:
package com.example.actions;

import com.opensymphony.xwork2.ActionSupport;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;

public class HelloWorld extends ActionSupport {
  @Action("/different/url")
  public String execute() {
    return SUCCESS;
  }

  @Action("url")
  public String doSomething() {
    return SUCCESS;
  }
}

----------------------------------------

TITLE: Creating Multiple File Upload Form in Struts 2 JSP
DESCRIPTION: Example of a JSP form for uploading multiple files using Struts 2 tags, with all file inputs having the same name.

LANGUAGE: html
CODE:
<s:form action="multipleFileUploadUsingList" method="POST" enctype="multipart/form-data">
    <s:file label="File (1)" name="upload"/>
    <s:file label="File (2)" name="upload"/>
    <s:file label="FIle (3)" name="upload"/>
    <s:submit cssClass="btn btn-primary"/>
</s:form>

----------------------------------------

TITLE: Mapping Struts 2 Action Configuration in XML
DESCRIPTION: XML configuration that maps the 'hello' action to HelloWorldAction class and defines its success result view.

LANGUAGE: xml
CODE:
<action name="hello" class="org.apache.struts.helloworld.action.HelloWorldAction" method="execute">
    <result name="success">/HelloWorld.jsp</result>
</action>

----------------------------------------

TITLE: Defining Constants with Value Substitution in Struts XML
DESCRIPTION: Demonstrates how to define constants in struts.xml file using value substitution for system properties and environment variables. Includes an example of setting a default value.

LANGUAGE: xml
CODE:
<struts>
    <constant name="os" value="Current OS = ${os.name}"/>

    <constant name="struts.devMode" value="${env.STRUTS_DEV_MODE:false}"/>
</struts>

----------------------------------------

TITLE: Implementing AJAX Form Action Class in Java
DESCRIPTION: Action class that defines form fields and validation rules using Struts validation annotations.

LANGUAGE: java
CODE:
public class AjaxFormSubmitAction extends ActionSupport {
    private String requiredValidatorField = null;
    private String requiredStringValidatorField = null;
    private Integer integerValidatorField = null;
    //... [truncated for brevity]
}

----------------------------------------

TITLE: Implementing Custom ActionProxy in Java for Apache Struts
DESCRIPTION: This code demonstrates how to create a custom ActionProxy implementation by overriding methods in ActionProxyFactory. It allows for customizing how action proxies are created and configured.

LANGUAGE: java
CODE:
ActionProxyFactory.getFactory(new MyActionProxyFactory() {
    ....
    public ActionProxy createActionProxy(Configuration config,
           String namespace, String actionName, Map extraContext)
           throws Exception {
        createActionProxy(config, namespace, actionName, extraContext, true);
    }
    public ActionProxy createActionProxy(Configuration config,
           String namespace, String actionName, Map extraContext,
           boolean executeResult, boolean cleanupContext)
           throws Exception {
        ....
   }
   ....
 });

----------------------------------------

TITLE: Creating a Form with Struts 2 Tags in HTML
DESCRIPTION: This snippet demonstrates how to create a form using Struts 2 form tags. It includes various input fields such as text fields, select dropdowns, radio buttons, and checkboxes.

LANGUAGE: html
CODE:
<s:form action="save" method="post">
    <s:textfield key="personBean.firstName" /> 
    <s:textfield key="personBean.lastName" /> 
    <s:textfield key="personBean.email" />
    <s:textfield key="personBean.phoneNumber" />
    <s:select key="personBean.sport" list="sports" />
    <s:radio key="personBean.gender" list="genders" />
    <s:select key="personBean.residency" list="states" listKey="stateAbbr" listValue="stateName" />
    <s:checkbox key="personBean.over21" />
    <s:checkboxlist key="personBean.carModels" list="carModelsAvailable" />
    <s:submit key="submit" />
</s:form>

----------------------------------------

TITLE: Creating a JSP View for Struts 2 Hello World Application
DESCRIPTION: This JSP file serves as the view in the Struts 2 MVC pattern. It uses Struts 2 tags to display the message stored in the MessageStore object.

LANGUAGE: jsp
CODE:
<!DOCTYPE html>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="s" uri="/struts-tags" %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Hello World!</title>
  </head>
  <body>
    <h2><s:property value="messageStore.message" /></h2>
  </body>
</html>

----------------------------------------

TITLE: Applying RequiredStringValidator Annotation in Java
DESCRIPTION: This snippet demonstrates how to apply the RequiredStringValidator annotation to a method in Java. It includes various parameters such as message, key, shortCircuit, and trim.

LANGUAGE: java
CODE:
@RequiredStringValidator(message = "Default message", key = "i18n.key", shortCircuit = true, trim = true)

----------------------------------------

TITLE: Configuring URL Validation in Struts XML
DESCRIPTION: Examples showing both Plain Validator and Field Validator syntax for URL validation in Struts configuration. The validator checks if the specified field contains a valid URL format, with options to customize the validation regex pattern.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="url">
        <param name="fieldName">myHomePage</param>
        <message>Invalid homepage url</message>
    </validator>

    <!-- Field Validator Syntax -->
    <field name="myHomepage">
        <field-validator type="url">
            <message>Invalid homepage url</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Configuring Spring ObjectFactory in Struts XML
DESCRIPTION: XML configuration to set Spring as the Struts object factory.

LANGUAGE: xml
CODE:
<struts>
  <constant name="struts.objectFactory" value="spring" />
  ... 
</struts>

----------------------------------------

TITLE: Writing JUnit Tests for Struts Actions
DESCRIPTION: This Java code demonstrates various ways to test Struts actions using the StrutsTestCase class, including testing action mappings, action proxies, and executing actions.

LANGUAGE: java
CODE:
package org.apache.struts2;

import org.apache.struts2.dispatcher.mapper.ActionMapping;

import java.util.HashMap;
import java.io.UnsupportedEncodingException;

import com.opensymphony.xwork2.ActionProxy;
import com.opensymphony.xwork2.Action;

import javax.servlet.ServletException;

public class StrutsTestCaseTest extends StrutsTestCase {
    public void testGetActionMapping() {
        ActionMapping mapping = getActionMapping("/test/testAction.action");
        assertNotNull(mapping);
        assertEquals("/test", mapping.getNamespace());
        assertEquals("testAction", mapping.getName());
    }

    public void testGetActionProxy() throws Exception {
        //set parameters before calling getActionProxy
        request.setParameter("name", "FD");
        
        ActionProxy proxy = getActionProxy("/test/testAction.action");
        assertNotNull(proxy);

        TestAction action = (TestAction) proxy.getAction();
        assertNotNull(action);

        String result = proxy.execute();
        assertEquals(Action.SUCCESS, result);
        assertEquals("FD", action.getName());
    }

    public void testExecuteAction() throws ServletException, UnsupportedEncodingException {
        String output = executeAction("/test/testAction.action");
        assertEquals("Hello", output);
    }

    public void testGetValueFromStack() throws ServletException, UnsupportedEncodingException {
        request.setParameter("name", "FD");
        executeAction("/test/testAction.action");
        String name = (String) findValueAfterExecute("name");
        assertEquals("FD", name);
    }
}

----------------------------------------

TITLE: Installing JSON Plugin with Maven in Java
DESCRIPTION: Shows how to add the Struts 2 JSON plugin dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependencies>
   ...
   <dependency>
       <groupId>org.apache.struts</groupId>
       <artifactId>struts2-json-plugin</artifactId>
       <version>STRUTS_VERSION</version>
   </dependency>
   ...
</dependencies>

----------------------------------------

TITLE: Struts ValueStack Property Access
DESCRIPTION: Shows how Struts ValueStack handles property access across multiple objects in the stack, demonstrating automatic property resolution.

LANGUAGE: ognl
CODE:
species    // call to animal.getSpecies()
salary     // call to person.getSalary()
name       // call to animal.getName() because animal is on the top

----------------------------------------

TITLE: Defining Resource Bundle Structure
DESCRIPTION: Example showing the hierarchical file structure for resource bundles in a Struts application.

LANGUAGE: text
CODE:
com/
    acme/
         package.properties
         actions/
                 package.properties
                 FooAction.java
                 FooAction.properties

----------------------------------------

TITLE: Creating File Upload Form with Struts Tags
DESCRIPTION: JSP form implementation using Struts tags to handle file uploads with proper multipart encoding.

LANGUAGE: xml
CODE:
   <s:form action="doUpload" method="post" enctype="multipart/form-data">
       <s:file name="upload" label="File"/>
       <s:submit/>
   </s:form>

----------------------------------------

TITLE: Including Multiple Struts Configuration Files Using XML
DESCRIPTION: Demonstrates how to include multiple configuration files in a main struts.xml using the include element. Each included file must follow the same DTD format as struts.xml and can be placed anywhere on the classpath.

LANGUAGE: xml
CODE:
<!DOCTYPE struts PUBLIC
  "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
  "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
    <include file="Home.xml"/>
    <include file="Hello.xml"/>
    <include file="Simple.xml"/>
    <include file="/util/POJO.xml"/>
    <include file="/com/initech/admin/admin-struts.xml"/>
</struts>

----------------------------------------

TITLE: Implementing KeyProperty Annotation in Java
DESCRIPTION: Example showing how to apply the KeyProperty annotation to a List of User objects. The annotation specifies 'userName' as the key property for User objects within the collection.

LANGUAGE: java
CODE:
// The key property for User objects within the users collection is the <code>userName</code> attribute.
@KeyProperty( value = "userName" )
protected List<User> users = null;

----------------------------------------

TITLE: Basic Wildcard Mapping in Struts XML Configuration
DESCRIPTION: Demonstrates a simple wildcard mapping that matches URLs starting with '/edit' and uses the matched portion in the action class name and result.

LANGUAGE: xml
CODE:
<action name="/edit*" class="org.apache.struts.webapp.example.Edit{1}Action">
    <result name="failure">/mainMenu.jsp</result>
    <result>{1}.jsp</result>
</action>

----------------------------------------

TITLE: Applying RegexFieldValidator Annotation in Java
DESCRIPTION: Demonstrates how to apply the RegexFieldValidator annotation to a method in Java. The annotation is used to validate a field against a specified regular expression.

LANGUAGE: java
CODE:
@RegexFieldValidator( key = "regex.field", regex = "yourregexp")

----------------------------------------

TITLE: Configuring Spring-Managed ActionSupport Class (XML)
DESCRIPTION: Extended Spring configuration to manage both the EditService and the EditAction, allowing complete control of dependencies by Spring.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd">
            
    <bean id="editService" class="org.apache.struts.edit.service.EditServiceInMemory" />

    <bean id="editAction" class="org.apache.struts.edit.action.EditAction" scope="prototype">
        <property name="editService" ref="editService" />
    </bean>

</beans>

----------------------------------------

TITLE: Hello World Action Class
DESCRIPTION: Java class implementing a basic Struts action using the Convention plugin's annotations.

LANGUAGE: java
CODE:
package com.example.actions;

import com.opensymphony.xwork2.ActionSupport;

public class HelloWorld extends ActionSupport {
  private String message;

  public String getMessage() {
    return message;
  }

  public String execute() {
    message = "Hello World!";
    return SUCCESS;
  }
}

----------------------------------------

TITLE: Implementing an Action Class in Java for Struts 2
DESCRIPTION: This code defines the HelloWorldAction class that acts as the controller in the Struts 2 MVC pattern. It creates a MessageStore object and provides a getter method to access it.

LANGUAGE: java
CODE:
package org.apache.struts.helloworld.action;

import org.apache.struts.helloworld.model.MessageStore;

import com.opensymphony.xwork2.ActionSupport;

public class HelloWorldAction extends ActionSupport {
    private MessageStore messageStore;

    public String execute() {
        messageStore = new MessageStore() ;
        
        return SUCCESS;
    }

    public MessageStore getMessageStore() {
        return messageStore;
    }
}

----------------------------------------

TITLE: Processing Form Input in Execute Method
DESCRIPTION: Code that processes the userName input by updating the message in the MessageStore object.

LANGUAGE: java
CODE:
if (userName != null) {
    messageStore.setMessage( messageStore.getMessage() + " " + userName);
}

----------------------------------------

TITLE: Configuring Plugin in Struts XML
DESCRIPTION: Defines the custom plugin bean in struts-plugin.xml. This configuration allows Struts to manage the plugin as a JavaBean.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
    "http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>
    <bean type="example.IMyInterface" class="example.impl.MyPlugin" name="myPlugin"/>
</struts>

----------------------------------------

TITLE: Implementing InputConfig Annotation in Struts Action Class
DESCRIPTION: This example demonstrates how to use the InputConfig annotation in a Struts action class. It shows the annotation applied to the execute method, specifying an input method to be called if validation fails.

LANGUAGE: java
CODE:
public class SampleAction extends ActionSupport {

  public void isValid() throws ValidationException {
    // validate model object, throw exception if failed
  }

  @InputConfig(methodName="input")
  public String execute() {
     // perform action
     return SUCCESS;
  }
  public String input() {
     // perform some data filling
     return INPUT;
  }
 }

----------------------------------------

TITLE: Configuring Parameter Exclusion in Struts Interceptor Stack
DESCRIPTION: XML configuration example showing how to set up an interceptor stack with custom parameter exclusion patterns and exception logging settings.

LANGUAGE: xml
CODE:
<interceptors>
  <interceptor-stack name="appDefault">
    <interceptor-ref name="defaultStack">
       <param name="exception.logEnabled">true</param>
       <param name="exception.logLevel">ERROR</param>
       <param name="params.excludeParams">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*,submit</param>
    </interceptor-ref>
  </interceptor-stack>
</interceptors>

<default-interceptor-ref name="appDefault" />

----------------------------------------

TITLE: Field Expression Validation in Struts 2 XML
DESCRIPTION: XML configuration using the fieldexpression validator with OGNL to ensure at least one car model checkbox is selected. Demonstrates conditional validation using expressions.

LANGUAGE: xml
CODE:
<validator type="fieldexpression">
    <param name="fieldname">personBean.carModels</param>
    <param name="expression"><![CDATA[personBean.carModels.length > 0]]></param>
    <message>You must select at least one car model.</message>
</validator>

----------------------------------------

TITLE: Returning Result Objects in Java for Struts Actions
DESCRIPTION: Illustrates how to return a Result object directly from an action method instead of configuring results and returning a name.

LANGUAGE: java
CODE:
public Result runAction() {
	ServletDispatcherResult result = new ServletDispatcherResult();
	result.setLocation("input-form.jsp");
	return result;
}

----------------------------------------

TITLE: Configuring Double Validator in Struts XML
DESCRIPTION: Examples showing different ways to configure the double validator in Struts, including plain validator syntax, field validator syntax, and field validator syntax with expressions. Demonstrates setting minimum and maximum bounds for double values using both direct values and OGNL expressions.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="double">
        <param name="fieldName">percentage</param>
        <param name="minInclusive">20.1</param>
        <param name="maxInclusive">50.1</param>
        <message>Age needs to be between ${minInclusive} and ${maxInclusive} (inclusive)</message>
    </validator>
 
    <!-- Field Validator Syntax -->
    <field name="percentage">
        <field-validator type="double">
            <param name="minExclusive">0.123</param>
            <param name="maxExclusive">99.98</param>
            <message>Percentage needs to be between ${minExclusive} and ${maxExclusive} (exclusive)</message>
        </field-validator>
    </field>
 
    <!-- Field Validator Syntax with expression -->
    <field name="percentage">
        <field-validator type="double">
            <param name="minExclusiveExpression">${minExclusiveValue}</param> <!-- will be evaluated as: Double getMinExclusiveValue() -->
            <param name="maxExclusiveExpression">${maxExclusiveValue}</param> <!-- will be evaluated as: Double getMaxExclusiveValue() -->
            <message>Percentage needs to be between ${minExclusive} and ${maxExclusive} (exclusive)</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Configuring Struts Field Validators in XML
DESCRIPTION: XML configuration defining validation rules for each form field, including required fields, string length constraints, numeric ranges, date ranges, email format, URL format, and regex patterns.

LANGUAGE: xml
CODE:
<validators>
    <field name="requiredValidatorField">
        <field-validator type="required">
            <message><![CDATA[ required ]]></message>
        </field-validator>
    </field>
    <!-- Additional field validators... -->
</validators>

----------------------------------------

TITLE: Implementing IntRangeFieldValidator Annotations in Java
DESCRIPTION: Examples demonstrating how to use IntRangeFieldValidator annotation with both static values and expressions. The validator checks that a numeric field has a value within a specified range using min/max values or expressions.

LANGUAGE: java
CODE:
@IntRangeFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, min = "0", max = "42")

@IntRangeFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, minExpression = "${minValue}", maxExpression = "${maxValue}")

----------------------------------------

TITLE: Basic FreeMarker Template Structure
DESCRIPTION: Demonstrates a simple FreeMarker template structure with HTML and a variable placeholder. The 'name' variable is expected to be set in the action.

LANGUAGE: html
CODE:
<html>
<head>
    <title>Hello</title>
</head>
<body>

Hello, ${name}

</body>
</html>

----------------------------------------

TITLE: Configuring SiteMesh Filter and Struts Listener in web.xml
DESCRIPTION: This snippet shows how to add the SiteMesh filter and Struts listener to the web.xml configuration file. It includes the necessary filter and listener declarations.

LANGUAGE: xml
CODE:
<filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
</filter> 
...
<listener>
    <listener-class>org.apache.struts2.dispatcher.listener.StrutsListener</listener-class>
</listener> 

----------------------------------------

TITLE: Implementing BeforeResult Annotation in Java Struts Action
DESCRIPTION: Demonstrates how to use the BeforeResult annotation in a Struts action class. The annotated method is executed before the result, typically used for validation. The priority parameter is optional with a default value of 10.

LANGUAGE: java
CODE:
public class SampleAction extends ActionSupport {

  @BeforeResult
  public void isValid() throws ValidationException {
    // validate model object, throw exception if failed
  }

  public String execute() {
     // perform action
     return SUCCESS;
  }
 }

----------------------------------------

TITLE: Rendering I18n Text Messages with Struts Text Tag in JSP
DESCRIPTION: Examples of using the Struts text tag to render internationalized messages from resource bundles and with parameters.

LANGUAGE: jsp
CODE:
 <!-- First Example -->
 <s:i18n name="struts.action.test.i18n.Shop">
     <s:text name="main.title"/>
 </s:i18n>

 <!-- Second Example -->
 <s:text name="main.title" />

 <!-- Third Examlpe -->
 <s:text name="i18n.label.greetings">
    <s:param >Mr Smith</s:param>
 </s:text>

----------------------------------------

TITLE: Basic FreeMarker Tag Syntax in Struts
DESCRIPTION: Demonstrates the basic syntax for using Struts tags in FreeMarker templates. Shows how to wrap Struts tags with the '@s' prefix.

LANGUAGE: ftl
CODE:
<@s.tag> ...</@s.tag>

----------------------------------------

TITLE: Configuring Multiple Results for a Struts Action
DESCRIPTION: Demonstrates how to configure multiple results for a single action, including a special 'other' result using '*'.

LANGUAGE: xml
CODE:
<action name="Hello">
    <result>/hello/Result.jsp</result>
    <result name="error">/hello/Error.jsp</result>
    <result name="input">/hello/Input.jsp</result>
    <result name="*">/hello/Other.jsp</result>
</action>

----------------------------------------

TITLE: Single File Upload Action Class Implementation
DESCRIPTION: Java class implementing file upload handling with necessary setter methods for file data

LANGUAGE: java
CODE:
package com.example;

import java.io.File;

import com.opensymphony.xwork2.ActionSupport;

public class UploadAction extends ActionSupport {
    private File file;
    private String contentType;
    private String filename;

    @StrutsParameter
    public void setUpload(File file) {
        this.file = file;
    }

    @StrutsParameter
    public void setUploadContentType(String contentType) {
        this.contentType = contentType;
    }

    @StrutsParameter
    public void setUploadFileName(String filename) {
        this.filename = filename;
    }

    public String execute() {
        //...
        return SUCCESS;
    }
}

----------------------------------------

TITLE: Configuring int validator in Struts XML
DESCRIPTION: Examples of how to configure the int validator in Struts using XML. It shows three different approaches: Plain Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions for dynamic min/max values.

LANGUAGE: xml
CODE:
<validators>
     <!-- Plain Validator Syntax -->
     <validator type="int">
         <param name="fieldName">age</param>
         <param name="min">20</param>
         <param name="max">50</param>
         <message>Age needs to be between ${min} and ${max}</message>
     </validator>
 
     <!-- Field Validator Syntax -->
     <field name="age">
         <field-validator type="int">
             <param name="min">20</param>
             <param name="max">50</param>
             <message>Age needs to be between ${min} and ${max}</message>
         </field-validator>
     </field>
 
     <!-- Field Validator Syntax with expression -->
     <field name="age">
         <field-validator type="int">
             <param name="minExpression">${minValue}</param> <!-- will be evaluated as: Integer getMinValue() -->
             <param name="maxExpression">${maxValue}</param> <!-- will be evaluated as: Integer getMaxValue() -->
             <message>Age needs to be between ${min} and ${max}</message>
         </field-validator>
     </field>
</validators>

----------------------------------------

TITLE: Struts Action Mapping with URL Parameters
DESCRIPTION: Demonstrates how to map an action that extracts a parameter from the URL after the action name.

LANGUAGE: xml
CODE:
<package name="edit" extends="struts-default" namespace="/edit">
    <action name="/person/*" class="org.apache.struts.webapp.example.EditAction">
        <param name="id">{1}</param>
        <result>/mainMenu.jsp</result>
    </action>   
</package>

----------------------------------------

TITLE: Implementing DispatcherListener in Java for Struts Dispatcher Lifecycle
DESCRIPTION: This code snippet demonstrates how to create and add a DispatcherListener to execute custom code when a Dispatcher is initialized or destroyed. It shows how to override the dispatcherInitialized and dispatcherDestroyed methods to perform actions such as setting a custom ConfigurationManager or cleaning up resources.

LANGUAGE: java
CODE:
  static {
     Dispatcher.addDispatcherListener(new DispatcherListener() {
         public void dispatcherInitialized(Dispatcher du) {
            // do something to Dispatcher after it is initialized eg.
            du.setConfigurationManager(....);
         }

         public void dispatcherDestroyed(Dispatcher du) {
            // do some cleanup after Dispatcher is destroyed.
         }
     });
  }

----------------------------------------

TITLE: Implementing Struts 2 Radio Tag in HTML
DESCRIPTION: Shows how to use the Struts 2 radio tag to create a set of radio buttons for gender selection. The tag uses 'key' for data binding and 'list' to generate options.

LANGUAGE: html
CODE:
<s:radio key="personBean.gender" list="genders" />

----------------------------------------

TITLE: Configuring Freemarker Properties in Struts
DESCRIPTION: Shows how to configure Freemarker engine properties in Struts by adding a freemarker.properties file to the classpath. It sets encoding, template update delay, and locale.

LANGUAGE: properties
CODE:
default_encoding=ISO-8859-1
template_update_delay=5
locale=no_NO

----------------------------------------

TITLE: Configuring FreeMarker Result in Struts XML
DESCRIPTION: Shows how to configure a FreeMarker result type in the Struts XML configuration file. This maps an action to a FreeMarker template file.

LANGUAGE: xml
CODE:
<action name="test" class="com.acme.TestAction">
    <result name="success" type="freemarker">test-success.ftl</result>
</action>

----------------------------------------

TITLE: Struts2 Validation Rules Configuration
DESCRIPTION: XML configuration defining validation rules for the form fields, including required string validation for name and integer range validation for age.

LANGUAGE: xml
CODE:
<!--
    Add the following DOCTYPE declaration as first line of your XXX-validation.xml file:
    <!DOCTYPE validators PUBLIC "-//Apache Struts//XWork Validator 1.0.2//EN" "http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd">
-->
<validators>
    <field name="name">
        <field-validator type="requiredstring">
            <message>You must enter a name</message>
        </field-validator>
    </field>
    <field name="age">
        <field-validator type="int">
            <param name="min">13</param>
            <param name="max">19</param>
            <message>Only people ages 13 to 19 may take this quiz</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Implementing ActionEventListener in Java
DESCRIPTION: Example implementation of ActionEventListener interface showing how to handle action preparation and exception handling. Demonstrates setting dependencies during action creation and custom exception handling logic.

LANGUAGE: java
CODE:
public class MyActionEventListener implements ActionEventListener {

    public Object prepare(Object action, ValueStack stack) {
        if (action instanceof MyBaseAction) {
            ((MyBaseAction)action).setUserService(stack.findValue("userService"));
        }
    }
    
    public String handleException(Throwable t, ValueStack stack) {
        if (t instanceof MyBusinessException) {
            return stack.findString("defaultBusinesResult");
        }
        return null;
    }
}

----------------------------------------

TITLE: Using Struts UI Tags in Freemarker Templates
DESCRIPTION: Illustrates how to use Struts UI tags within a Freemarker template. It demonstrates importing the Struts tag library and using form, hidden, textarea, and submit tags.

LANGUAGE: freemarker
CODE:
<#assign s=JspTaglibs["/WEB-INF/struts.tld"] />

<@s.form method="'post'" name="'inputform'" action="'save.action'" >
    <@s.hidden name="'id'" />
    <@s.textarea label="'Details'" name="'details'" rows=5 cols=40 />
    <@s.submit value="'Save'" align="center" />
</@s.form>

----------------------------------------

TITLE: Defining Action Class in Java for Struts Validation
DESCRIPTION: This Java class defines the Action for the quiz form. It includes getter and setter methods for name, age, and answer fields, with @StrutsParameter annotations for parameter mapping.

LANGUAGE: java
CODE:
public class QuizAction extends ActionSupport {

	private static final long serialVersionUID = -7505437345373234225L;

	String name;
	int age;
	String answer;

	public String getName() {
		return name;
	}

	@StrutsParameter
	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	@StrutsParameter
	public void setAge(int age) {
		this.age = age;
	}

	public String getAnswer() {
		return answer;
	}

	@StrutsParameter
	public void setAnswer(String answer) {
		this.answer = answer;
	}
}

----------------------------------------

TITLE: Configuring XML Action Mapping for Restful2ActionMapper in Struts
DESCRIPTION: Shows how to configure an XML action mapping for use with Restful2ActionMapper, including wildcard support for CRUD operations.

LANGUAGE: xml
CODE:
<action name="movie/*" className="app.MovieAction">
    <param name="id">{1}</param>
    ...
</action>

----------------------------------------

TITLE: Java Action with Namespace Parameter Extraction in Struts
DESCRIPTION: Demonstrates how to define an action class that extracts a parameter from the namespace using the @Namespace annotation.

LANGUAGE: java
CODE:
@Namespace("/users/{userID}")
public class DetailsAction exends ActionSupport {
  private Long userID;

  @StrutsParameter
  public void setUserID(Long userID) {...}
}

----------------------------------------

TITLE: Basic Collection Iteration with Struts 2 Iterator Tag
DESCRIPTION: Demonstrates basic usage of the iterator tag to loop through a String array and display values in an HTML table.

LANGUAGE: html
CODE:
<table style="margin-left:15px">
    <s:iterator value="personBean.carModels">
        <tr><td><s:property /></td></tr>
    </s:iterator>
</table>

----------------------------------------

TITLE: Using Dynamic Attributes with Struts Tags in Freemarker
DESCRIPTION: Demonstrates how to use dynamic attributes with Struts tags in Freemarker templates. It shows different ways to specify dynamic attributes, including using OGNL expressions.

LANGUAGE: freemarker
CODE:
<@s.textfield name="test" dynamicAttributes={"placeholder":"input","foo":"bar"}/>

LANGUAGE: freemarker
CODE:
<@s.textfield name="test" placeholder="input" foo="bar"/>

LANGUAGE: freemarker
CODE:
<@s.textfield name="test" placeholder="input" foo="checked: %{bar}"/>

LANGUAGE: freemarker
CODE:
<@s.form dynamicAttributes={'data-ajax':'false'}>
  ...
</@s.form>

----------------------------------------

TITLE: Struts Form Tooltip Configurations - JSP
DESCRIPTION: Multiple examples showing different ways to configure tooltips in Struts form elements using JSP syntax, including inheritance and override patterns.

LANGUAGE: jsp
CODE:
<!-- Example 1: -->
<s:form
         tooltipDelay="500"
         tooltipIconPath="/myImages/myIcon.gif" .... >
  ....
    <s:textfield label="Customer Name" tooltip="Enter the customer name" .... />
  ....
</s:form>

<!-- Example 2: -->
<s:form
         tooltipDelay="500"
         tooltipIconPath="/myImages/myIcon.gif" .... >
  ....
    <s:textfield label="Address"
         tooltip="Enter your address"
         tooltipDelay="5000" />
  ....
</s:form>

<-- Example 3: -->
<s:textfield
       label="Customer Name"
       tooltip="One of our customer Details">
       <s:param name="tooltipDelay">
            500
       </s:param>
       <s:param name="tooltipIconPath">
            /myImages/myIcon.gif
       </s:param>
</s:textfield>

<-- Example 4: -->
<s:textfield
         label="Customer Address"
         tooltip="Enter The Customer Address" >
         <s:param
             name="tooltipDelay"
             value="500" />
</s:textfield>

<-- Example 5: -->
<s:textfield
         label="Customer Telephone Number"
         tooltip="Enter customer Telephone Number"
         tooltipDelay="500"
         tooltipIconPath="/myImages/myIcon.gif" />

----------------------------------------

TITLE: Complete Message Store Interceptor Configuration Example
DESCRIPTION: Comprehensive example showing both STORE and RETRIEVE modes in action configurations, demonstrating how to store messages in one action and retrieve them in another.

LANGUAGE: xml
CODE:
<action name="submitApplication" ....>
	<interceptor-ref name="store">
		<param name="operationMode">STORE</param>
	</interceptor-ref>
	<interceptor-ref name="defaultStack" />
	<result name="input" type="redirectAction">applicationFailed</result>
	<result type="dispatcher">applicationSuccess.jsp</result>
</action>

<action name="applicationFailed" ....>
	<interceptor-ref name="store">
		<param name="operationMode">RETRIEVE</param>
	</interceptor-ref>
	<result>applicationFailed.jsp</result>
</action>

----------------------------------------

TITLE: Configuring Freemarker Template Update Delay
DESCRIPTION: Configuration setting to control how often Freemarker checks for template updates. Setting a higher value reduces unnecessary disk checks and improves performance.

LANGUAGE: properties
CODE:
template_update_delay=60000

----------------------------------------

TITLE: Struts Configuration for Session Security
DESCRIPTION: XML configuration to exclude sensitive parameters from processing across all actions in a package.

LANGUAGE: xml
CODE:
<package name="basicstruts2" extends="struts-default">
    <interceptors>
        <interceptor-stack name="appDefault">
            <interceptor-ref name="defaultStack">
                <param name="exception.logEnabled">true</param>
                <param name="exception.logLevel">ERROR</param>
                <param name="params.excludeParams">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*</param>
            </interceptor-ref>
        </interceptor-stack>
    </interceptors>

    <default-interceptor-ref name="appDefault" />
    ...
</package>

----------------------------------------

TITLE: Implementing Chart Generation in Struts Action
DESCRIPTION: Java implementation of a Struts Action class that generates a JFreeChart XY plot with random data points. Shows chart creation, configuration, and the required getChart() method.

LANGUAGE: java
CODE:
public class ViewModerationChartAction extends ActionSupport {

	private JFreeChart chart;

	public String execute() throws Exception {
		// chart creation logic...
		XYSeries dataSeries = new XYSeries(new Integer(1)); //pass a key for this serie
		for (int i = 0; i <= 100; i++) {
			dataSeries.add(i, RandomUtils.nextInt());
		}
		XYSeriesCollection xyDataset = new XYSeriesCollection(dataSeries);

		ValueAxis xAxis = new NumberAxis("Raw Marks");
		ValueAxis yAxis = new NumberAxis("Moderated Marks");

		// set my chart variable
		chart =
			new JFreeChart(
				"Moderation Function",
				JFreeChart.DEFAULT_TITLE_FONT,
				new XYPlot(
					xyDataset,
					xAxis,
					yAxis,
					new StandardXYItemRenderer(StandardXYItemRenderer.LINES)),
				false);
		chart.setBackgroundPaint(java.awt.Color.white);

		return super.SUCCESS;
	}

	public JFreeChart getChart() {
		return chart;
	}

}

----------------------------------------

TITLE: Defining Interceptor Interface in Java
DESCRIPTION: This snippet shows the Interceptor interface definition in Java. It includes three methods: destroy(), init(), and intercept(). The intercept method is where the main interceptor logic is implemented.

LANGUAGE: java
CODE:
public interface Interceptor extends Serializable {

    void destroy();

    void init();

    String intercept(ActionInvocation invocation) throws Exception;
}

----------------------------------------

TITLE: Setting Default Result Type in Struts XML Configuration
DESCRIPTION: Demonstrates how to set a default result type for a package in Struts XML configuration.

LANGUAGE: xml
CODE:
<result-types>
   <result-type name="dispatcher" default="true" class="org.apache.struts2.dispatcher.ServletDispatcherResult" />
</result-types>

----------------------------------------

TITLE: Configuring Fetch Metadata Interceptor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure the Fetch Metadata Interceptor within a Struts action definition. It shows how to set exempted paths for cross-site traffic using the 'exemptedPaths' parameter.

LANGUAGE: xml
CODE:
<action  name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="defaultStack">
            <param name="fetchMetadata.exemptedPaths">/path1,/path2,/path3</param>
    </interceptor-ref>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Configuring custom FileManager for Struts 2 in web.xml
DESCRIPTION: This snippet shows how to register a custom FileManager implementation for Struts 2 using an init-param in the filter configuration in web.xml.

LANGUAGE: xml
CODE:
<filter>
     <filter-name>struts2</filter-name>
     <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
     <init-param>
         <param-name>struts.fileManager</param-name>
         <param-value>com.company.MyFileManager</param-value>
     </init-param>
</filter>

----------------------------------------

TITLE: Implementing SessionAware Interface in Java
DESCRIPTION: Shows how to implement the SessionAware interface by overriding the setSession method to get access to the HTTP session object.

LANGUAGE: java
CODE:
private Map<String, Object> userSession ;

public void setSession(Map<String, Object> session) {
   userSession = session ;
}

----------------------------------------

TITLE: Accessing Session Data in JSP View
DESCRIPTION: Shows how to access session-stored data in a JSP view using Struts 2 tags.

LANGUAGE: html
CODE:
    <p>I've said hello to you <s:property value="#session.helloCount" /> times!</p>

----------------------------------------

TITLE: Setting ValueStack Parameters in JSP
DESCRIPTION: Example of using s:set tag to expose ValueStack values to JSP pages by setting request-scoped parameters.

LANGUAGE: jsp
CODE:
<s:set name="'a'" value="{ 1, 2, 3, 4 }" scope="request"/>

----------------------------------------

TITLE: Implementing Basic Async Action in Java
DESCRIPTION: Demonstrates how to create a basic asynchronous action that returns a Callable. The action waits for 40 seconds before returning a success response.

LANGUAGE: java
CODE:
public class AsyncAction {

    public Callable<String> execute() throws InterruptedException {
        return new Callable<String>() {
            @Override
            public String call() throws Exception {
                waitForEvent();
                return "success";
            }
        };
    }

    private void waitForEvent() throws InterruptedException {
        Thread.sleep(40000);
    }
}

----------------------------------------

TITLE: Rendering Custom UI Component in JSP
DESCRIPTION: Demonstrates how to use the component tag in JSP to render a custom UI widget. Shows both simple usage and passing parameters to the component.

LANGUAGE: jsp
CODE:
<s:component template="/my/custom/component.jsp"/>

LANGUAGE: jsp
CODE:
<s:component template="/my/custom/component.jsp">
    <s:param name="key1" value="value1"/>
    <s:param name="key2" value="value2"/>
</s:component>

----------------------------------------

TITLE: Demonstrating Conditional Flow with Struts if, elseif, and else Tags in JSP
DESCRIPTION: This snippet shows how to use the Struts if, elseif, and else tags to create conditional flow in a JSP page. It includes examples of conditions that will and will not be executed based on the test expressions.

LANGUAGE: jsp
CODE:
<s:if test="%{false}">
    <div>Will Not Be Executed</div>
</s:if>
<s:elseif test="%{true}">
    <div>Will Be Executed</div>
</s:elseif>
<s:else>
    <div>Will Not Be Executed</div>
</s:else>

----------------------------------------

TITLE: Form Submission with Ajax Example
DESCRIPTION: Example of form submission with ajax and loading indicator using sx:submit.

LANGUAGE: jsp
CODE:
<img id="loadingImage" src="images/loadingAnimation.gif" style="display:none"/>
<s:div id="parentDiv">
    <s:form action="actionName">
        <sx:submit  targets="parentDiv" showLoadingText="false" indicator="loadingImage"/>
    </s:form>
</s:div>

----------------------------------------

TITLE: Configuring Scope Interceptor for Object Passing Between Actions in Struts XML
DESCRIPTION: This example shows how to use the Scope Interceptor to pass objects between two different actions (ScopeActionA and ScopeActionB) using a custom key. It demonstrates session management and object transfer across actions.

LANGUAGE: xml
CODE:
<action name="scopea" class="com.mevipro.test.action.ScopeActionA">
    <result name="success" type="dispatcher">/jsp/test.jsp</result>
    <interceptor-ref name="basicStack"/>
    <interceptor-ref name="scope">
        <param name="key">funky</param>
        <param name="session">person</param>
        <param name="autoCreateSession">true</param>
    </interceptor-ref>
</action>
<action name="scopeb" class="com.mevipro.test.action.ScopeActionB">
    <result name="success" type="dispatcher">/jsp/test.jsp</result>
    <interceptor-ref name="scope">
        <param name="key">funky</param>
        <param name="session">person</param>
        <param name="autoCreateSession">true</param>
    </interceptor-ref>
    <interceptor-ref name="basicStack"/>
</action>

----------------------------------------

TITLE: Configuring Required Validator in Apache Struts XML
DESCRIPTION: This snippet demonstrates how to configure the required validator in Apache Struts using both plain validator syntax and field validator syntax. It shows how to specify the field name, set the validator type, and provide custom error messages.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="required">
        <param name="fieldName">username</param>
        <message>username must not be null</message>
    </validator>
 
 
    <!-- Field Validator Syntax -->
    <field name="username">
        <field-validator type="required">
               <message>username must not be null</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Configuring Log4j2 for Struts 2 Debugging
DESCRIPTION: This XML configuration sets up logging for Struts 2 packages at the debug level, allowing developers to see detailed information about the framework's operations during development.

LANGUAGE: xml
CODE:
<!-- Excerpt from log4j2.xml -->
<Configuration>
  <!-- Configuration details -->
  <Loggers>
    <Logger name="com.opensymphony" level="debug"/>
    <Logger name="org.apache.struts2" level="debug"/>
  </Loggers>
</Configuration>

----------------------------------------

TITLE: Implementing Conditional Logic with Struts 2 If Tag
DESCRIPTION: Demonstrates the use of Struts 2 if/else tags for conditional rendering based on a boolean expression. Shows how to evaluate object properties and display different content based on the result.

LANGUAGE: html
CODE:
<s:if test="personBean.over21">
    <p>You are old enough to vote!</p>
</s:if>
<s:else>
   <p>You are NOT old enough to vote.</p>
</s:else>

----------------------------------------

TITLE: Collection Filtering and Projection in JSP
DESCRIPTION: Demonstrates advanced OGNL techniques for filtering collections and projecting specific properties from objects within Struts tags.

LANGUAGE: jsp
CODE:
<s:iterator value="person.relatives.{? #this.gender == 'male'}">
  ...
</s:iterator>

<s:iterator value="persons.{firstName}">
  <s:property/>
</s:iterator>

<s:iterator value="persons" var="person">
  <s:property value="person.firstName"/>
</s:iterator>

----------------------------------------

TITLE: Configuring ExecuteAndWaitInterceptor with Delay in Struts XML
DESCRIPTION: This XML configuration demonstrates how to set up the ExecuteAndWaitInterceptor with a delay parameter, which waits for a specified time before showing the wait page to the user.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="completeStack"/>
    <interceptor-ref name="execAndWait">
        <param name="delay">2000</param>
    </interceptor-ref>
    <result name="wait">longRunningAction-wait.jsp</result>
    <result name="success">longRunningAction-success.jsp</result>
</action>

----------------------------------------

TITLE: Predefined Result Names in Java for Struts Actions
DESCRIPTION: Defines standard result tokens used in Struts actions, as provided by the ActionSupport base class.

LANGUAGE: java
CODE:
String SUCCESS = "success";
String NONE    = "none";
String ERROR   = "error";
String INPUT   = "input";
String LOGIN   = "login";

----------------------------------------

TITLE: Simple Loop with iterator Tag in JSP
DESCRIPTION: This snippet demonstrates how to create a simple loop that iterates 5 times using the iterator tag. It uses the begin and end attributes to define the loop range.

LANGUAGE: jsp
CODE:
<s:iterator var="counter" begin="1" end="5" >
   <!-- current iteration value (1, ... 5) -->
   <s:property value="top" />
</s:iterator>

----------------------------------------

TITLE: Java Action Support Class Implementation
DESCRIPTION: Java class implementing the action support with integer field getter and setter methods.

LANGUAGE: java
CODE:
/** MyActionSupport.java **/
public class MyActionSupport extends ActionSupport {
    
    private Integer myIntegerField;
    
    public Integer getMyIntegerField() { 
        return this.myIntegerField; 
    }

    @StrutsParameter
    public void setMyIntegerField(Integer myIntegerField) {
        this.myIntegerField = myIntegerField;
    }
}

----------------------------------------

TITLE: Configuring Action Chaining with Basic Stack (XML)
DESCRIPTION: Demonstrates how to chain two actions using the Chaining Interceptor and the chain result type. The first action uses the basicStack, while the second action uses both the chain interceptor and basicStack.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="basicStack"/>
	<result name="success" type="chain">otherAction</result>
</action>

<action name="otherAction" class="com.examples.OtherAction">
    <interceptor-ref name="chain"/>
	<interceptor-ref name="basicStack"/>
	<result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Configuring Cookie Interceptor in Struts XML
DESCRIPTION: Examples of different cookie interceptor configurations in Struts, showing how to inject specific cookies with matched values, wildcard patterns, and multiple interceptor configurations. Demonstrates various ways to filter and inject cookies based on names and values.

LANGUAGE: xml
CODE:
 <!--
   This example will inject cookies named either 'cookie1' or 'cookie2' whose
   value could be either 'cookie1value' or 'cookie2value' into Struts' action.
 -->
 <action ... >
    <interceptor-ref name="cookie">
        <param name="cookiesName">cookie1, cookie2</param>
        <param name="cookiesValue">cookie1value, cookie2value</param>
    </interceptor-ref>
    ....
 </action>

 <!--
      This example will inject cookies named either 'cookie1' or 'cookie2'
     regardless of their value into Struts' action.
 -->
 <action ... >
   <interceptor-ref name="cookie">
      <param name="cookiesName">cookie1, cookie2</param>
      <param name="cookiesValue">*</param>
   <interceptor-ref>
   ...
 </action>

 <!--
      This example will inject cookies named either 'cookie1' with value
      'cookie1value' or 'cookie2' with value 'cookie2value' into Struts'
      action.
 -->
 <action ... >
   <interceptor-ref name="cookie">
      <param name="cookiesName">cookie1</param>
      <param name="cookiesValue">cookie1value</param>
   </interceptor-ref>
   <interceptor-ref name="cookie">
      <param name="cookiesName"<cookie2</param>
     <param name="cookiesValue">cookie2value</param>
   </interceptor-ref>
   ....
 </action>

 <!--
    This example will inject any cookies regardless of its value into
    Struts' action.
  -->
 <action ... >
   <interceptor-ref name="cookie">
      <param name="cookiesName">*</param>
      <param name="cookiesValue">*</param>
   </interceptor-ref>
    ...
 </action>

----------------------------------------

TITLE: Configuring VisitorFieldValidator in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure the VisitorFieldValidator using both plain validator syntax and field validator syntax. It shows the usage of parameters like fieldName, context, and appendPrefix.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="visitor">
        <param name="fieldName">user</param>
        <param name="context">myContext</param>
        <param name="appendPrefix">true</param>
    </validator>
 
    <!-- Field Validator Syntax -->
    <field name="user">
       <field-validator type="visitor">
          <param name="context">myContext</param>
          <param name="appendPrefix">true</param>
       </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Annotating Action Parameters in Java
DESCRIPTION: Example of properly annotating action parameters with @StrutsParameter for secure parameter injection.

LANGUAGE: java
CODE:
private String name;

@StrutsParameter
public void setName(String name) {
    this.name = name;
}

----------------------------------------

TITLE: Iterator with Action and Parameter Passing in JSP
DESCRIPTION: This example shows how to use the iterator tag with an action and pass each iterator value to another action. It uses the [0] operator to pass the current iterator value to the edit action.

LANGUAGE: jsp
CODE:
<s:action name="entries" var="entries"/>
<s:iterator value="#entries.entries" >
    <s:property value="name" />
    <s:property />
    <s:push value="...">
        <s:action name="edit" var="edit" >
            <s:param name="entry" value="[0]" />
        </s:action>
    </s:push>
</s:iterator>

----------------------------------------

TITLE: Using fieldName Attribute for Specific Field Errors in Struts JSP
DESCRIPTION: This example demonstrates how to use the fieldName attribute of the fielderror tag to display errors for specific fields individually.

LANGUAGE: jsp
CODE:
<s:fielderror fieldName="field1" />
<s:fielderror fieldName="field1" />

----------------------------------------

TITLE: Implementing Dynamic Results in Java for Struts Actions
DESCRIPTION: Shows how to implement an action method that can determine the next action dynamically at runtime.

LANGUAGE: java
CODE:
private String nextAction;

public String getNextAction() {
    return nextAction;
}

----------------------------------------

TITLE: Configuring Struts Action with Plexus ID in XML
DESCRIPTION: This snippet demonstrates how to configure a Struts Action using a Plexus object ID instead of a Java class name in the struts.xml file. This allows Plexus to create the object and inject any dependencies.

LANGUAGE: xml
CODE:
<action name="myAction" class="myPlexusId">
  <result>myAction.jsp</result>
</action>

----------------------------------------

TITLE: OGNL-based Simple Loop in JSP
DESCRIPTION: This example shows an alternative way to create a simple loop using OGNL magic. It creates a 5-iteration loop similar to JSTL's <c:forEach> tag.

LANGUAGE: jsp
CODE:
<s:iterator status="stat" value="(5).{ #this }" >
   <s:property value="#stat.count" /> <!-- Note that "count" is 1-based, "index" is 0-based. -->
</s:iterator>

----------------------------------------

TITLE: Using elseif Tag in Struts JSP
DESCRIPTION: This example demonstrates the usage of the elseif tag in conjunction with if and else tags in Struts JSP. It shows how to create conditional logic flow in a JSP page.

LANGUAGE: jsp
CODE:
<s:if test="%{false}">
    <div>Will Not Be Executed</div>
</s:if>
<s:elseif test="%{true}">
    <div>Will Be Executed</div>
</s:elseif>
<s:else>
    <div>Will Not Be Executed</div>
</s:else>

----------------------------------------

TITLE: Configuring Timer Interceptor in Struts XML
DESCRIPTION: Examples of how to configure the Timer Interceptor in Struts XML. Shows two different placements of the interceptor in the interceptor stack to either record only the action's execution time or include other interceptors' times as well.

LANGUAGE: xml
CODE:
 <!-- records only the action's execution time -->
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="completeStack"/>
     <interceptor-ref name="timer"/>
     <result name="success">good_result.ftl</result>
 </action>

 <!-- records action's execution time as well as other interceptors-->
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="timer"/>
     <interceptor-ref name="completeStack"/>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Configuring COOP Interceptor in Struts Action
DESCRIPTION: Example configuration of the COOP interceptor within a Struts action definition. Shows how to set exempted paths and COOP mode using interceptor parameters. The configuration allows specifying multiple exempted paths and sets the COOP policy mode to 'same-origin'.

LANGUAGE: xml
CODE:
<action  name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="defaultStack">
        <param name="coop.exemptedPaths">/path1,/path2,/path3</param>
        <param name="coop.mode">same-origin</param>
    </interceptor-ref>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Implementing JSON-RPC Action in Java
DESCRIPTION: Example of a Java action class that implements JSON-RPC functionality using the Struts 2 JSON plugin.

LANGUAGE: java
CODE:
package smd;

import com.googlecode.jsonplugin.annotations.SMDMethod;
import com.opensymphony.xwork2.Action;

public class SMDAction {
    public String smd() {
        return Action.SUCCESS;
    }
    
    @SMDMethod
    public Bean doSomething(Bean bean, int quantity) {
        bean.setPrice(quantity * 10);
        return bean;
    }
}

----------------------------------------

TITLE: Configuring Default Action in Struts
DESCRIPTION: XML configuration for defining a default action in Struts.

LANGUAGE: xml
CODE:
<action name="index">
   <result>/index.jsp</result>
</action>

----------------------------------------

TITLE: Registering Tiles Result Type
DESCRIPTION: XML configuration to register the Tiles Result type definition in Struts2.

LANGUAGE: xml
CODE:
<result-types>
  <result-type name="tiles" class="org.apache.struts2.views.tiles.TilesResult"/>
</result-types>

----------------------------------------

TITLE: Configuring Method-Specific Validation in Struts Interceptor
DESCRIPTION: Shows how to configure the validation interceptor to enable method-specific validation by setting validateAnnotatedMethodOnly parameter and excluding specific methods from validation.

LANGUAGE: xml
CODE:
<interceptor-ref name="validation">
  <param name="validateAnnotatedMethodOnly">true</param>                
  <param name="excludeMethods">input,back,cancel,browse</param>
</interceptor-ref>

LANGUAGE: xml
CODE:
  <package name="default" extends="struts-default">
    <interceptors>
      <interceptor-stack name="content">
        <interceptor-ref name="exception"/>
                <interceptor-ref name="alias"/>
                <interceptor-ref name="servletConfig"/>
                <interceptor-ref name="prepare"/>
                <interceptor-ref name="i18n"/>
                <interceptor-ref name="chain"/>
                <interceptor-ref name="debugging"/>
                <interceptor-ref name="profiling"/>
                <interceptor-ref name="scopedModelDriven"/>
                <interceptor-ref name="modelDriven"/>
                <interceptor-ref name="actionFileUpload"/>
                <interceptor-ref name="checkbox"/>
                <interceptor-ref name="staticParams"/>
                <interceptor-ref name="params">
                  <param name="excludeParams">dojo\..*</param>
                </interceptor-ref>
                <interceptor-ref name="conversionError"/>
                <interceptor-ref name="validation">
  	            <param name="validateAnnotatedMethodOnly">true</param>                
                    <param name="excludeMethods">input,back,cancel,browse</param>
                </interceptor-ref>
                <interceptor-ref name="workflow">
                    <param name="excludeMethods">input,back,cancel,browse</param>
                </interceptor-ref>
      </interceptor-stack>
    </interceptors>
    <default-interceptor-ref name="default"/>
  </package>
</struts>

----------------------------------------

TITLE: Configuring Basic Workflow Interceptor in Struts XML
DESCRIPTION: Basic configuration example showing how to set up the workflow interceptor in an action chain with params and validation interceptors.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="params"/>
     <interceptor-ref name="validation"/>
     <interceptor-ref name="workflow"/>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Using Text Tag in Struts
DESCRIPTION: Examples of using the text tag for retrieving localized messages with default fallback.

LANGUAGE: xml
CODE:
<s:text name="some.key" />

<s:text name="some.invalid.key">
    The Default Message That Will Be Displayed
</s:text>

----------------------------------------

TITLE: Implementing Fruit Selection Combobox in JSP
DESCRIPTION: Creates a combobox for selecting fruits from a predefined list with a header option. Demonstrates using static list values and header options.

LANGUAGE: jsp
CODE:
<s:combobox
    label="My Favourite Fruit"
    name="myFavouriteFruit"
    list="{'apple','banana','grape','pear'}"
    headerKey="-1"
    headerValue="--- Please Select ---"
    emptyOption="true"
    value="banana" />

----------------------------------------

TITLE: Configuring Parameter Remover Interceptor in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure the Parameter Remover Interceptor in a Struts action. It specifies the parameter names and values to be removed before being applied to the action.

LANGUAGE: xml
CODE:
<action name="sample" class="org.martingilday.Sample">
    <interceptor-ref name="paramRemover">
        <param name="paramNames">aParam,anotherParam</param>
        <param name="paramValues">--,-1</param>
    </interceptor-ref>
    <interceptor-ref name="defaultStack" />
    ...
</action>

----------------------------------------

TITLE: Configuring Scope Interceptor for Session Management in Struts XML
DESCRIPTION: This snippet demonstrates how to configure the Scope Interceptor in a Struts action to manage session-scoped variables. It shows how to automatically handle 'filter' and 'orderBy' parameters across sessions.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="basicStack"/>
    <interceptor-ref name="hibernate"/>
    <interceptor-ref name="scope">
        <param name="session">filter,orderBy</param>
        <param name="autoCreateSession">true</param>
    </interceptor-ref>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Configuring Clear Session Interceptor in Struts XML
DESCRIPTION: Example configuration showing how to apply the clearSession interceptor alongside the default interceptor stack in a Struts action configuration. The interceptor is applied before the default stack to ensure session clearing happens first.

LANGUAGE: xml
CODE:
<action name="exampleAction" class="com.examples.ExampleAction">
    <interceptor-ref name="clearSession"/>
    <interceptor-ref name="defaultStack"/>
    <result name="success">example.jsp</result>
</action>

----------------------------------------

TITLE: Creating AJAX Form JSP View
DESCRIPTION: JSP page with form fields and custom validation theme for displaying AJAX validation errors.

LANGUAGE: html
CODE:
<%@taglib prefix="s" uri="/struts-tags" %>
<html>
<head>
    <title>Struts2 Showcase - Validation - AJAX Form Submit</title>
    <s:head theme="xhtml"/>
</head>
//... [truncated for brevity]

----------------------------------------

TITLE: Configuring Global-Only Text Provider
DESCRIPTION: XML configuration for using global-only text provider implementation.

LANGUAGE: xml
CODE:
<constant name="struts.localizedTextProvider" value="global-only" />

----------------------------------------

TITLE: Instantiating a Bean in JSP (Struts)
DESCRIPTION: This example shows how to use the Struts bean tag in JSP to create a SimpleCounter object, set a parameter, and access its properties within the bean tag.

LANGUAGE: jsp
CODE:
<s:bean name="org.apache.struts2.example.counter.SimpleCounter" var="counter">
   <s:param name="foo" value="BAR" />
   The value of foot is : <s:property value="foo"/>, when inside the bean tag <br />
 </s:bean>

----------------------------------------

TITLE: Configuring RequiredString Validator in Apache Struts XML
DESCRIPTION: Examples of how to configure the RequiredString validator in Struts XML configuration. It demonstrates both Plain-Validator and Field-Validator syntaxes, including an example with an expression for the trim parameter.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain-Validator Syntax -->
    <validator type="requiredstring">
        <param name="fieldName">username</param>
        <param name="trim">true</param>
        <message>username is required</message>
    </validator>
     
    <!-- Field-Validator Syntax -->
    <field name="username">
        <field-validator type="requiredstring">
            <param name="trim">true</param>
            <message>username is required</message>
        </field-validator>
    </field>
 
    <!-- Field-Validator Syntax with expression -->
    <field name="username">
        <field-validator type="requiredstring">
            <param name="trimExpression">${trimValue}</param> <!-- will be evaluated as: boolean getTrimValue() -->
            <message>username is required</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Basic Struts Action Mapping Configuration
DESCRIPTION: XML configuration for mapping a file upload action to a specific class

LANGUAGE: xml
CODE:
<action name="doUpload" class="com.example.UploadAction">
    <result name="success">good_result.jsp</result>
</action>

----------------------------------------

TITLE: Configuring Global Properties in Struts 2
DESCRIPTION: XML configuration in struts.xml to specify a global properties file accessible to all actions.

LANGUAGE: xml
CODE:
<constant name="struts.custom.i18n.resources" value="global" />

----------------------------------------

TITLE: Rendering Basic Reset Input in JSP
DESCRIPTION: This example demonstrates how to render a basic reset input using the Struts reset tag. It creates an HTML input element of type 'reset' with the value 'Reset'.

LANGUAGE: jsp
CODE:
<s:reset value="Reset" />

----------------------------------------

TITLE: Configuring CSP Interceptor in Struts XML
DESCRIPTION: This XML snippet shows how to configure the Content Security Policy Interceptor for a Struts action. It demonstrates setting the enforcing mode and report URI parameters.

LANGUAGE: xml
CODE:
<action  name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="defaultStack">
        <param name="csp.enforcingMode">true</param>
        <param name="csp.reportUri">/csp-report.action</param>
    </interceptor-ref>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Configuring Servlet Config Interceptor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure an action to use the Servlet Config Interceptor in a Struts XML configuration file. It shows the interceptor being referenced along with the basic stack.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="servletConfig"/>
     <interceptor-ref name="basicStack"/>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Implementing JasperAction for Data Population in Java
DESCRIPTION: This action class creates a list of Person objects and compiles the JasperReports template. It demonstrates how to prepare data for the report and compile the .jrxml file to a .jasper file.

LANGUAGE: java
CODE:
package com.acme.test.action;

import java.util.ArrayList;
import java.util.List;

import net.sf.jasperreports.engine.JasperCompileManager;

import com.acme.test.Person;
import com.opensymphony.xwork.ActionSupport;

public class JasperAction extends ActionSupport {

    private List<Person> myList;

    public String execute() throws Exception {
        Person p1 = new Person(new Long(1), "Patrick", "Lightbuddie");
        Person p2 = new Person(new Long(2), "Jason", "Carrora");
        Person p3 = new Person(new Long(3), "Alexandru", "Papesco");
        Person p4 = new Person(new Long(4), "Jay", "Boss");

        myList = new ArrayList<Person>();
        myList.add(p1);
        myList.add(p2);
        myList.add(p3);
        myList.add(p4);

        try {
            JasperCompileManager.compileReportToFile(
                    "S2_WEBAPP/jasper/our_jasper_template.jrxml",
                    "S2_WEBAPP/jasper/our_compiled_template.jasper");
        } catch (Exception e) {
            e.printStackTrace();
            return ERROR;
        }

        return SUCCESS;
    }

    public List<Person> getMyList() {
        return myList;
    }
}

----------------------------------------

TITLE: Defining Package-Level Properties in Struts 2
DESCRIPTION: Example of a package-level properties file (package.properties) that can be accessed by multiple actions in the same package hierarchy.

LANGUAGE: properties
CODE:
greeting=Welcome to The Wonderful World of Struts 2

----------------------------------------

TITLE: Velocity URL Generation Example
DESCRIPTION: Example showing how to generate URLs in Velocity templates using the surl directive

LANGUAGE: velocity
CODE:
#surl "id=url" "value=http://www.yahoo.com"
Click <a href="${url}">here</a>!

----------------------------------------

TITLE: Common Ajax Include Implementation in JSP
DESCRIPTION: Example from Struts showcase demonstrating the common include pattern for Ajax functionality in JSP pages. For version 2.0.6, developers should use <s:head debug="true"/> instead.

LANGUAGE: jsp
CODE:
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="s" uri="/struts-tags" %>
<head>
    <link rel="stylesheet" type="text/css" href="<s:url value="/struts/niftycorners/niftyCorners.css"/>"/>
    <link rel="stylesheet" type="text/css" href="<s:url value="/struts/niftycorners/niftyPrint.css"/>" media="print"/>
    <script type="text/javascript" src="<s:url value="/struts/niftycorners/nifty.js"/>"></script>
    <script type="text/javascript">
        window.onload = function(){
            if(!NiftyCheck()) {
                return;
            }
            Rounded("div#navigation","all","#F4F4F4","#F4F4F4","smooth");
        }
    </script>

    <script language="JavaScript" type="text/javascript">
        dojo.require("dojo.io.BoundTransport");
    </script>

    <link rel="stylesheet" type="text/css" href="<s:url value="/struts/css/xhtml/styles.css"/>"/>
    <s:head/>
</head>

----------------------------------------

TITLE: Testing Failed Validation in Struts Action
DESCRIPTION: JUnit test method that verifies validation fails when required form fields are missing. Tests the specific case of missing firstName field.

LANGUAGE: java
CODE:
@Test
public void testExecuteValidationFailsMissingFirstName() throws Exception {
    //request.setParameter("personBean.firstName", "Bruce");
    request.setParameter("personBean.lastName", "Phillips");
    request.setParameter("personBean.email", "bphillips@ku.edu");
    request.setParameter("personBean.age", "19");
    
    ActionProxy actionProxy = getActionProxy("/register.action");
    Register action = (Register) actionProxy.getAction() ;
    
    assertNotNull("The action is null but should not be.", action);
    
    String result = actionProxy.execute();
    
    assertEquals("The execute method did not return " + ActionSupport.INPUT + " but should have.", ActionSupport.INPUT, result);
}

----------------------------------------

TITLE: Creating Form with Struts Tags in JSP
DESCRIPTION: JSP form using Struts 2 form tags to create input fields for Gangster properties. The form submits to modelDrivenResult action in the modelDriven namespace.

LANGUAGE: jsp
CODE:
<s:form action="modelDrivenResult" method="POST" namespace="/modelDriven">   
    <s:textfield label="Gangster Name" name="name" />
    <s:textfield label="Gangster Age"  name="age" />
    <s:checkbox  label="Gangster Busted Before" name="bustedBefore" />
    <s:textarea  cols="30" rows="5" label="Gangster Description" name="description" />           
    <s:submit />
</s:form>

----------------------------------------

TITLE: Struts Action Mapping with Regex and Result Placeholder
DESCRIPTION: Shows how to use regex patterns in action mapping and reference the matched groups in the result.

LANGUAGE: xml
CODE:
<package name="books" extends="struts-default" namespace="/">
    <action name="/books/{ISBN}/content" class="example.BookAction">
	<result>/books/{1}.jsp</result>
    </action>
</package>

----------------------------------------

TITLE: Configuring Template Suffix in Struts XML
DESCRIPTION: Sets the template suffix using the struts.ui.templateSuffix property in struts.xml. This property controls which template engine is used, with 'ftl' (FreeMarker) as the default.

LANGUAGE: xml
CODE:
<struts>
    <constant name="struts.ui.templateSuffix" value="ftl" />
</struts>

----------------------------------------

TITLE: Type Converter Property Configuration
DESCRIPTION: Shows how to configure type converters in properties files for both specific properties and types.

LANGUAGE: properties
CODE:
# syntax: <propertyName> = <converterClassName>
point = com.acme.PointConverter
person.phoneNumber = com.acme.PhoneNumberConverter

LANGUAGE: properties
CODE:
# syntax: <type> = <converterClassName>
java.math.BigDecimal = com.acme.MyBigDecimalConverter

----------------------------------------

TITLE: Configuring CookieProvider Interceptor in Struts XML
DESCRIPTION: Example showing how to reference the cookieProvider interceptor in a Struts action configuration. The interceptor must be added after the defaultStack or within an action's specific stack.

LANGUAGE: xml
CODE:
 <action ... >
   <interceptor-ref name="defaultStack"/>
   <interceptor-ref name="cookieProvider"/>
   ...
 </action>


----------------------------------------

TITLE: Configuring Form Submission with Method Prefix in Struts 2 XML
DESCRIPTION: Demonstrates how to use the method prefix in a Struts 2 form to call a specific method on an action instead of the default execute() method.

LANGUAGE: xml
CODE:
<s:form action="baz">
    <s:textfield label="Enter your name" name="person.name"/>
    <s:submit value="Create person"/>
    <s:submit method="anotherMethod" value="Cancel"/>
</s:form>

----------------------------------------

TITLE: Defining JasperReports Template in XML
DESCRIPTION: This XML file defines the structure and layout of the JasperReports template. It specifies fields from the Person class and defines how they should be displayed in the report.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<!DOCTYPE jasperReport PUBLIC "-//JasperReports//DTD Report Design//EN" "http://jasperreports.sourceforge.net/dtds/jasperreport.dtd">
<jasperReport name="jasper_test">
  <field name="name" class="java.lang.String"/>
  <field name="lastName" class="java.lang.String"/>
  <title>
    <band height="50">
      <staticText>
        <reportElement x="0" y="0" width="180" height="15"/>
        <textElement/>
        <text><![CDATA[Struts 2 JasperReports Sample]]></text>
      </staticText>
    </band>
  </title>
  <pageHeader>
    <band/>
  </pageHeader>
  <columnHeader>
    <band height="20">
      <staticText>
        <reportElement x="180" y="0" width="180" height="20"/>
        <textElement>
          <font isUnderline="true"/>
        </textElement>
        <text><![CDATA[NAME]]></text>
      </staticText>
      <staticText>
        <reportElement x="360" y="0" width="180" height="20"/>
        <textElement>
          <font isUnderline="true"/>
        </textElement>
        <text><![CDATA[LASTNAME]]></text>
      </staticText>
    </band>
  </columnHeader>
  <detail>
    <band height="20">
      <textField>
        <reportElement x="180" y="0" width="180" height="15"/>
        <textElement/>
        <textFieldExpression><![CDATA[$F{name}]]></textFieldExpression>
      </textField>
      <textField>
        <reportElement x="360" y="0" width="180" height="15"/>
        <textElement/>
        <textFieldExpression><![CDATA[$F{lastName}]]></textFieldExpression>
      </textField>
    </band>
  </detail>
  <columnFooter>
    <band/>
  </columnFooter>
  <pageFooter>
    <band height="15">
      <staticText>
        <reportElement x="0" y="0" width="40" height="15"/>
        <textElement/>
        <text><![CDATA[Page:]]></text>
      </staticText>
      <textField>
        <reportElement x="40" y="0" width="100" height="15"/>
        <textElement/>
        <textFieldExpression class="java.lang.Integer"><![CDATA[$V{PAGE_NUMBER}]]></textFieldExpression>
      </textField>
    </band>
  </pageFooter>
  <summary>
    <band/>
  </summary>
</jasperReport>

----------------------------------------

TITLE: Static Access in OGNL
DESCRIPTION: Shows the syntax for accessing static properties and methods in OGNL when enabled in Struts configuration.

LANGUAGE: ognl
CODE:
@some.package.ClassName@FOO_PROPERTY
@some.package.ClassName@someMethod()

----------------------------------------

TITLE: Configuring Velocity Action in Struts XML
DESCRIPTION: XML configuration snippet showing how to set up a Velocity result type for an action in struts.xml

LANGUAGE: xml
CODE:
<action name="test" class="com.acme.TestAction">
    <result name="success" type="velocity">test-success.vm</result>
</action>

----------------------------------------

TITLE: Traditional HTML Form Implementation
DESCRIPTION: Example showing form implementation using standard HTML and JSP, demonstrating the verbose nature of traditional form coding without a framework.

LANGUAGE: html
CODE:
<% User user = ... %>
<form action="Profile_update.action" method="post">
    <table>
        <tr>
            <td align="right"><label>First name:</label></td>
            <td><input type="text" name="user.firstname" value="<%=user.getFirstname() %> /></td>
        </tr>
        <tr>
            <td><input type="radio" name="user.gender" value="0" id="user.gender0" 
                <% if (user.getGender()==0) { %> checked="checked" %> } %> />
            <label for="user.gender0">Female</label>
        </tr>
    </table>
</form>

----------------------------------------

TITLE: Applying RequiredFieldValidator Annotation in Java
DESCRIPTION: This example demonstrates how to apply the RequiredFieldValidator annotation to a method in Java. The annotation is configured with a default message, an i18n key, and set to short-circuit.

LANGUAGE: java
CODE:
@RequiredFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true)

----------------------------------------

TITLE: Basic OGNL Expression Examples
DESCRIPTION: Demonstrates standard OGNL expressions accessing objects in the OgnlContext map, showing how root and non-root objects are accessed.

LANGUAGE: ognl
CODE:
#foo.blah // returns foo.getBlah()
#bar.blah // returns bar.getBlah()
blah      // returns foo.getBlah() because foo is the root

----------------------------------------

TITLE: Alternative Syntax for Displaying Specific Field Errors in Struts JSP
DESCRIPTION: This example shows an alternative way to specify field names for the fielderror tag using the value attribute with OGNL expressions.

LANGUAGE: jsp
CODE:
<s:fielderror>
  <s:param value="%{'field1'}" />
  <s:param value="%{'field2'}" />
</s:fielderror>
<s:form .... >
   ....
</s:form>

----------------------------------------

TITLE: Implementing Annotated Action Workflow in Java
DESCRIPTION: Example implementation of base and extended action classes using workflow annotations. Shows usage of @Before, @BeforeResult, and @After annotations to control execution flow around the main action method.

LANGUAGE: java
CODE:
  public class BaseAnnotatedAction {
  	protected String log = "";

  	@Before
  	public String baseBefore() {
  		log = log + "baseBefore-";
  		return null;
  	}
  }

  public class AnnotatedAction extends BaseAnnotatedAction {
  	@Before
  	public String before() {
  		log = log + "before";
  		return null;
  	}

  	public String execute() {
  		log = log + "-execute";
  		return Action.SUCCESS;
  	}

  	@BeforeResult
  	public void beforeResult() throws Exception {
  		log = log +"-beforeResult";
  	}

  	@After
  	public void after() {
  		log = log + "-after";
  	}
  }

----------------------------------------

TITLE: Multiple File Upload Using Arrays Implementation
DESCRIPTION: Example of handling multiple file uploads using arrays in a Struts action class

LANGUAGE: java
CODE:
public class MultipleFileUploadUsingArrayAction extends ActionSupport {
    private File[] uploads;
    private String[] uploadFileNames;
    private String[] uploadContentTypes;

    public String upload() throws Exception {
        System.out.println("\n\n upload2");
        System.out.println("files:");
        for (File u : uploads) {
            System.out.println("*** " + u + "\t" + u.length());
        }
        System.out.println("filenames:");
        for (String n : uploadFileNames) {
            System.out.println("*** " + n);
        }
        System.out.println("content types:");
        for (String c : uploadContentTypes) {
            System.out.println("*** " + c);
        }
        System.out.println("\n\n");
        return SUCCESS;
    }

    public File[] getUpload() {
        return this.uploads;
    }

    @StrutsParameter
    public void setUpload(File[] upload) {
        this.uploads = upload;
    }

    public String[] getUploadFileName() {
        return this.uploadFileNames;
    }

    @StrutsParameter
    public void setUploadFileName(String[] uploadFileName) {
        this.uploadFileNames = uploadFileName;
    }

    public String[] getUploadContentType() {
        return this.uploadContentTypes;
    }

    @StrutsParameter
    public void setUploadContentType(String[] uploadContentType) {
        this.uploadContentTypes = uploadContentType;
    }
}

----------------------------------------

TITLE: Configuring Spring Context Listener
DESCRIPTION: Web.xml configuration to initialize the Spring context listener.

LANGUAGE: xml
CODE:
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

----------------------------------------

TITLE: Maven Bundle Plugin Configuration
DESCRIPTION: Maven configuration for building OSGi bundles using the Felix Bundle Plugin.

LANGUAGE: xml
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.felix</groupId>
            <artifactId>maven-bundle-plugin</artifactId>
            <extensions>true</extensions>
            <version>2.0.0</version>
            <configuration>
                <instructions>
                    <manifestLocation>META-INF</manifestLocation>
                    <Struts2-Enabled>true</Struts2-Enabled>
                    <Export-Package>org.apache.struts2.osgi.demo</Export-Package>
                    <Import-Package>*,com.opensymphony.xwork2</Import-Package>
                    <Spring-Context>*;create-asynchronously:=false</Spring-Context>
                </instructions>
            </configuration>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Basic Velocity Template Structure
DESCRIPTION: Example Velocity template showing basic HTML structure with variable interpolation using ${name} syntax

LANGUAGE: html
CODE:
<html>
<head>
    <title>Hello</title>
</head>
    <body>
    Hello, ${name}
    </body>
</html>

----------------------------------------

TITLE: Configuring Unknown Handler Stack in Struts XML
DESCRIPTION: Shows how to configure multiple Unknown Handlers in a stack using the unknown-handler-stack tag. Handlers are called in the specified order until one handles the request.

LANGUAGE: xml
CODE:
<bean type="com.opensymphony.xwork2.UnknownHandler" name="handler1" class="com.opensymphony.xwork2.config.providers.SomeUnknownHandler"/>
<bean type="com.opensymphony.xwork2.UnknownHandler" name="handler2" class="com.opensymphony.xwork2.config.providers.SomeUnknownHandler"/>

<unknown-handler-stack>
   <unknown-handler-ref name="handler1" />
   <unknown-handler-ref name="handler2" />
</unknown-handler-stack>

----------------------------------------

TITLE: Configuring Traditional Action Mappings in Struts 2 XML
DESCRIPTION: Example of traditional action mapping configuration in struts.xml, showing separate nodes for each action method.

LANGUAGE: xml
CODE:
<action name="createPerson" class="org.apache.struts.tutorials.wildcardmethod.action.PersonAction" method="create">
    <result name="input">input.jsp</result>
    <result name="success">view.jsp</result>
</action>

<action name="editPerson" class="org.apache.struts.tutorials.wildcardmethod.action.PersonAction" method="edit">
    <result name="input">input.jsp</result>
    <result name="success">view.jsp</result>
</action>

----------------------------------------

TITLE: OSGi Service-Aware Action Implementation
DESCRIPTION: Example of implementing ServiceAware interface in a Struts action to access OSGi services.

LANGUAGE: java
CODE:
public class BookPriceAction extends ActionSupport implements ServiceAware<BookPriceLookup> {
    private List<BookPriceLookup> services;

    public void setServices(List<BookPriceLookup> services) {
        this.services = services;
    }
}

----------------------------------------

TITLE: WebSphere Properties Configuration Script
DESCRIPTION: Jython script for configuring WebSphere-specific properties required for Struts filter compatibility.

LANGUAGE: python
CODE:
def findObjectName(objectId):
        index = objectId.find('(')
        return objectId[0 : index]

node = AdminNodeManagement.listNodes()[0]
server = AdminConfig.list('Server')

nodeName = findObjectName(node)
serverName = findObjectName(server)

webContainer = AdminConfig.list('WebContainer', node)
webContainerDetails = AdminConfig.show(webContainer)

if webContainerDetails.find("com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror") == -1:
        print "creating prop: com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror"
        AdminServerManagement.configureCustomProperty(nodeName, serverName, "WebContainer","com.ibm.ws.webcontainer.assumefiltersuccessonsecurityerror", "true")
if webContainerDetails.find("com.ibm.ws.webcontainer.invokefilterscompatibility") == -1:
        print "creating prop: com.ibm.ws.webcontainer.invokefilterscompatibility"
        AdminServerManagement.configureCustomProperty(nodeName, serverName, "WebContainer", "com.ibm.ws.webcontainer.invokefilterscompatibility", "true")

----------------------------------------

TITLE: Configuring Default Theme in Struts XML
DESCRIPTION: Configuration entry in struts.xml for setting the default UI theme. The default value is 'xhtml' if not specified.

LANGUAGE: xml
CODE:
<struts>
    <constant name="struts.ui.theme" value="xhtml"/>
</struts>

----------------------------------------

TITLE: Configuring Annotation Workflow Interceptor Stack in Struts
DESCRIPTION: XML configuration for setting up an interceptor stack that includes the AnnotationWorkflowInterceptor, replacing the standard PrepareInterceptor.

LANGUAGE: xml
CODE:
<interceptor-stack name="annotatedStack">
	<interceptor-ref name="static-params"/>
	<interceptor-ref name="params"/>
	<interceptor-ref name="conversionError"/>
	<interceptor-ref name="annotationWorkflow"/>
</interceptor-stack>

----------------------------------------

TITLE: Formatting Currency Output Using s:text Tag in Struts2 JSP
DESCRIPTION: This snippet demonstrates how to use the s:text tag to format a currency value in a JSP file using a predefined message format.

LANGUAGE: jsp
CODE:
<s:text name="format.money">
    <s:param name="value" value="myMoneyValue"/>
</s:text>

----------------------------------------

TITLE: Configuring Prepare Interceptor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure the Prepare Interceptor in a Struts action. It shows the interceptor being called between two instances of the params interceptor, allowing for data pre-loading before the second parameter set.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="params"/>
    <interceptor-ref name="prepare"/>
    <interceptor-ref name="basicStack"/>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Rendering HTML from Struts 2 Select Tag
DESCRIPTION: Shows the resulting HTML output generated by the Struts 2 framework when using the select tag. It includes proper labeling and option selection based on the bound data.

LANGUAGE: html
CODE:
<tr>
    <td class="tdLabel">
        <label for="save_personBean_sport" class="label">Favorite sport:</label>
    </td>
    <td>
        <select name="personBean.sport" id="save_personBean_sport">
            <option value="football">football</option>
            <option value="baseball">baseball</option>
            <option value="basketball" selected="selected">basketball</option>
        </select>
    </td>
</tr>

----------------------------------------

TITLE: Configuring Struts Action Mapping in XML
DESCRIPTION: XML configuration that maps the register action to the Register class and specifies the success view.

LANGUAGE: xml
CODE:
<action name="register" class="org.apache.struts.register.action.Register" method="execute">
    <result name="success">/thankyou.jsp</result>
</action>

----------------------------------------

TITLE: Creating a URL with Query String in FreeMarker
DESCRIPTION: Shows how to create the same URL with a query string parameter using FreeMarker syntax, which allows for a more concise implementation.

LANGUAGE: ftl
CODE:
<@s.url value="somePage" personId="%{personId}"/>

----------------------------------------

TITLE: Configuring Chain Result in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure the Chain Result in Struts. It shows examples of chaining actions within the same package and across different namespaces. The example includes creating an account, logging in, and accessing a secure dashboard.

LANGUAGE: xml
CODE:
<package name="public" extends="struts-default">
    <!-- Chain creatAccount to login, using the default parameter -->
    <action name="createAccount" class="...">
        <result type="chain">login</result>
    </action>
 
    <action name="login" class="...">
        <!-- Chain to another namespace -->
        <result type="chain">
            <param name="actionName">dashboard</param>
            <param name="namespace">/secure</param>
        </result>
    </action>
</package>
 
<package name="secure" extends="struts-default" namespace="/secure">
    <action name="dashboard" class="...">
        <result>dashboard.jsp</result>
    </action>
</package>

----------------------------------------

TITLE: Configuring Token Interceptor in Struts XML
DESCRIPTION: Examples of how to configure the Token Interceptor in Struts XML. Shows basic usage and how to exclude specific methods from token validation.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="token"/>
     <interceptor-ref name="basicStack"/>
     <result name="success">good_result.ftl</result>
 </action>

 <!-- In this case, myMethod of the action class will not
        get checked for invalidity of token -->
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="token">
        <param name="excludeMethods">myMethod</param>
     </interceptor-ref>
     <interceptor-ref name="basicStack"/>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Basic Push Tag Usage with Properties
DESCRIPTION: Demonstrates pushing a user object onto the stack and accessing its properties directly using the property tag.

LANGUAGE: jsp
CODE:
<s:push value="user">
    <s:propery value="firstName" />
    <s:propery value="lastName" />
</s:push>

----------------------------------------

TITLE: Accessing Bean Properties in JSP (Struts)
DESCRIPTION: This snippet demonstrates how to access properties of a bean that has been placed in the stack's context using the Struts property tag in JSP.

LANGUAGE: jsp
CODE:
<s:property value="#counter" />

----------------------------------------

TITLE: Struts XML Configuration for AJAX Validation
DESCRIPTION: XML configuration mapping the AJAX validation action and setting up the required interceptors and results.

LANGUAGE: xml
CODE:
<!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN" "http://struts.apache.org/dtds/struts-2.5.dtd">
<struts>
    <package>
         <action name="ajaxFormSubmit" class="org.apache.struts2.showcase.validation.AjaxFormSubmitAction">
             <interceptor-ref name="jsonValidationWorkflowStack"/>
             <result name="input">/WEB-INF/validation/ajaxFormSubmit.jsp</result>
             <result type="jsonActionRedirect">ajaxFormSubmitSuccess</result>
         </action>
    </package>

----------------------------------------

TITLE: Defining Message Properties in Struts 2
DESCRIPTION: Example of a Struts 2 message resource property file (Register.properties) containing key-value pairs for form labels and messages.

LANGUAGE: properties
CODE:
personBean.firstName=First name
personBean.lastName=Last name
personBean.age=Age
personBean.email=Email
thankyou=Thank you for registering %{personBean.firstName}.

----------------------------------------

TITLE: Implementing Struts 2 Select Tag with Object-Backed List
DESCRIPTION: Demonstrates using the Struts 2 select tag with a list of objects, where the option value and display text come from different object properties.

LANGUAGE: html
CODE:
<s:select key="personBean.residency" list="states" listKey="stateAbbr" listValue="stateName" />

----------------------------------------

TITLE: Basic Subset Tag Usage in JSP
DESCRIPTION: Simple example of using the subset tag with an iterator to display list elements.

LANGUAGE: jsp
CODE:
<s:subset source="myList">
   <s:iterator>
      <s:property />
   </s:iterator>
</s:subset>

----------------------------------------

TITLE: Including Struts Dojo Tags in JSP
DESCRIPTION: This snippet shows how to include the Struts Dojo tag library in a JSP page. It's a prerequisite for using Ajax tags in Struts 2.

LANGUAGE: xml
CODE:
<%@ taglib prefix="sx" uri="/struts-dojo-tags" %>

----------------------------------------

TITLE: Implementing HTTP Cache Control Interceptor for IE HTTPS Compatibility in Java
DESCRIPTION: A Java interceptor class that sets HTTP response headers to PRIVATE to resolve Internet Explorer's handling of secure content streams like PDFs and TIFFs over HTTPS. This interceptor extends AroundInterceptor and modifies cache control headers before action execution.

LANGUAGE: java
CODE:
package org.tuxbot.ww.interceptor;

import com.opensymphony.xwork.interceptor.AroundInterceptor;
import com.opensymphony.xwork.ActionInvocation;
import com.opensymphony.webwork.ServletActionContext;

import javax.servlet.http.HttpServletResponse;
/**
 * This interceptor sets the the HTTP Header to work around IE SSL weirdness  *
 * @author Eric Molitor <a href="mailto:eric@tuxbot.com">eric@tuxbot.com</a>
 * @version 1.0
 */
public class HTTPRequestCachePrivateInterceptor extends AroundInterceptor {

    protected void after(ActionInvocation actionInvocation, String string) throws Exception {
        // Nothing
    }

    protected void before(ActionInvocation actionInvocation) throws Exception {
        HttpServletResponse res = (HttpServletResponse) actionInvocation.getInvocationContext().get(ServletActionContext.HTTP_RESPONSE);
        res.setHeader("CACHE-CONTROL", "PRIVATE");
    }
}

----------------------------------------

TITLE: Configuring Custom Interceptor Stack with Bean Validation
DESCRIPTION: Example of how to configure a custom interceptor stack that includes bean validation alongside the default Struts interceptors.

LANGUAGE: xml
CODE:
<package name="my-app-package" extends="struts-default">
    <interceptors>
        <interceptor>
            name="beanValidation"
            class="org.apache.struts.beanvalidation.validation.interceptor.BeanValidationInterceptor">
        </interceptor>
        <interceptor-stack name="appDefaultStack">
            <interceptor-ref name="beanValidation"/>
            <interceptor-ref name="defaultStack"/>
        </interceptor-stack>
    </interceptors>
</package>

----------------------------------------

TITLE: Generated HTML from Struts 2 Select Tag
DESCRIPTION: The HTML markup generated by Struts 2 when using the select tag with the default xhtml theme.

LANGUAGE: html
CODE:
<tr>
    <td class="tdLabel">
        <label for="save_personBean_sport" class="label">Favorite sport:</label>
    </td>
    <td>
        <select name="personBean.sport" id="save_personBean_sport">
            <option value="football">football</option>
            <option value="baseball">baseball</option>
            <option value="basketball" selected="selected">basketball</option>
        </select>
    </td>
</tr>

----------------------------------------

TITLE: Configuring Struts Action to Use Tiles Definition
DESCRIPTION: This XML configuration shows how to set up a Struts action to utilize a Tiles definition, specifying the result type as 'tiles'.

LANGUAGE: xml
CODE:
<action name="sample" class="org.apache.struts2.tiles.example.SamplePortletAction" >
  <result name="success" type="tiles">tilesWorks</result>
</action>

----------------------------------------

TITLE: Configuring Stream Result with XML in Struts2
DESCRIPTION: XML configuration example for Stream Result showing how to set content type, input stream name, content disposition, and buffer size parameters.

LANGUAGE: xml
CODE:
<result name="success" type="stream">
  <param name="contentType">image/jpeg</param>
  <param name="inputName">${imageStream}</param>
  <param name="contentDisposition">attachment;filename="document.pdf"</param>
  <param name="bufferSize">1024</param>
</result>

----------------------------------------

TITLE: Using getFormatted() for Localization and Conversion Error Support in Struts2 JSP
DESCRIPTION: This example demonstrates the use of the getFormatted method to support both internationalization and conversion error handling for a date input field.

LANGUAGE: jsp
CODE:
<s:textfield key="user.born" value="%{getFormatted('format.number','user.born')}" />

----------------------------------------

TITLE: Configuring Async Action in Struts XML
DESCRIPTION: Shows the Struts configuration required to map the async action to a URL and specify the JSON result type.

LANGUAGE: xml
CODE:
<action name="async" class="com.company.struts.AsyncAction">
    <result name="success" type="json"/>
</action>

----------------------------------------

TITLE: Implementing Struts 2 Checkboxlist Tag in HTML
DESCRIPTION: Demonstrates the use of the Struts 2 checkboxlist tag to create multiple checkboxes from a list. It uses 'key' for data binding and 'list' to generate options.

LANGUAGE: html
CODE:
<s:checkboxlist key="personBean.carModels" list="carModelsAvailable" />

----------------------------------------

TITLE: Implementing Struts 2 Select Tag
DESCRIPTION: Example of using the Struts 2 select tag and the resulting HTML markup it generates using the xhtml theme.

LANGUAGE: html
CODE:
<s:select key="personBean.sport" list="sports" />

----------------------------------------

TITLE: Expression Language Examples in Struts
DESCRIPTION: Various examples of expression language usage in different contexts including FreeMarker, Value Stack access, and static maps.

LANGUAGE: html
CODE:
Username: ${user.username}

LANGUAGE: html
CODE:
<s:textfield name="username"/>

LANGUAGE: html
CODE:
<s:url var="es" action="Hello">
    <s:param name="request_locale">es</s:param>
</s:url>
<s:a href="%{es}">Espanol</s:a>

LANGUAGE: html
CODE:
<s:property value="#session.user.username" />
<s:select label="FooBar" name="foo" list="#{'username':'trillian', 'username':'zaphod'}" />

----------------------------------------

TITLE: Using Struts Head Tag in JSP
DESCRIPTION: Demonstrates how to implement the Struts head tag within an HTML head section. The tag is used alongside standard HTML head elements to include Struts-specific functionality in the page header.

LANGUAGE: jsp
CODE:
 <head>
   <title>My page</title>
   <s:head/>
 </head>

----------------------------------------

TITLE: Configuring Action with Tiles Definition
DESCRIPTION: XML configuration showing how to configure a Struts action to use a tiles definition.

LANGUAGE: xml
CODE:
<action name="sample" class="org.apache.struts2.tiles.example.SampleAction" >
  <result name="success" type="tiles">tilesWorks</result>
</action>

----------------------------------------

TITLE: Complex Ajax Div Example with JavaScript Integration
DESCRIPTION: Demonstrates a more complex example of Ajax div usage with JavaScript integration for dynamic URL updating and content refreshing.

LANGUAGE: html
CODE:
<saf:head theme="ajax" />

<script type="text/javascript">
    function updateReports(id) {
       var reportDiv= window['reportDivId'];
       reportDiv.href = '/../reportListRemote.action?selectedId='+id;
       reportDiv.refresh();
    }
    dojo.event.topic.getTopic("updateReportsListTopic").subscribe(null, "updateReports");
</script>

<form ... >
<saf:select .... onchange="javascript: dojo.event.topic.publish(\"updateReportsListTopic\", this.value); " />

<saf:div id="reportDivId" theme="ajax" href="/.../reportListRemote.action" >
  Loading reports...
</saf:div>
</form>

----------------------------------------

TITLE: Basic XSLT Template Structure
DESCRIPTION: Minimal XSLT template example showing the basic structure required for matching the result element.

LANGUAGE: xml
CODE:
<xsl:template match="/result">
<result/>
</xsl:template>

----------------------------------------

TITLE: Implementing Basic Logging in Struts Action
DESCRIPTION: Example of implementing basic logging in a Struts action class using the XWork logging framework. Shows logger initialization and usage within an action method.

LANGUAGE: java
CODE:
import com.opensymphony.xwork2.util.logging.Logger;
import com.opensymphony.xwork2.util.logging.LoggerFactory;

public class MyAction {

    private static final Logger LOG = LoggerFactory.getLogger(MyAction.class);

    private String userName;

    public String execute() {
        LOG.debug("MyAction executed with UserName [#0]", userName);
        return "success";
    }

    // getter / setter

}

----------------------------------------

TITLE: Configuring Package-Level Interceptors in Struts 2 XML
DESCRIPTION: XML configuration demonstrating how to define and apply a custom interceptor stack at the package level, including timer and logger interceptors for all actions within the package.

LANGUAGE: xml
CODE:
<package name="basicstruts2" extends="struts-default" > 
    <interceptors> 
        <interceptor-stack name="appDefault"> 
            <interceptor-ref name="timer" /> 
            <interceptor-ref name="logger" /> 
            <interceptor-ref name="defaultStack" /> 
        </interceptor-stack> 
    </interceptors>          

    <default-interceptor-ref name="appDefault" /> 

    <!-- rest of package omitted --> 

</package>

----------------------------------------

TITLE: Using Struts Token Tag in JSP
DESCRIPTION: This snippet demonstrates how to use the Struts token tag in a JSP file. The token tag generates a hidden form element containing a unique token to prevent double submission of forms.

LANGUAGE: jsp
CODE:
<s:token />

----------------------------------------

TITLE: Basic Usage of iterator Tag in JSP
DESCRIPTION: This example demonstrates the basic usage of the iterator tag. It retrieves the value of the getDays() method from the current object on the value stack and iterates over it, printing each day.

LANGUAGE: jsp
CODE:
<s:iterator value="days">
  <p>day is: <s:property/></p>
</s:iterator>

----------------------------------------

TITLE: Implementing Internationalization in Struts 2
DESCRIPTION: Example of a Spanish language properties file (Register_es.properties) for internationalization support in Struts 2.

LANGUAGE: properties
CODE:
personBean.firstName=Nombre
personBean.lastName=Apellidos
personBean.age=Edad
personBean.email=Correo
thankyou=Gracias por registrarse, %{personBean.firstName}.

----------------------------------------

TITLE: Configuring FreeMarker Decorator Servlet in web.xml
DESCRIPTION: This snippet demonstrates how to configure the FreeMarker decorator servlet in the web.xml file. It includes the servlet declaration and mapping for .ftl files.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <servlet-class>org.apache.struts2.sitemesh.FreemarkerDecoratorServlet</servlet-class>
    <init-param>
 	<param-name>default_encoding</param-name>
 	<param-value>UTF-8</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet> 

<servlet-mapping>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <url-pattern>*.ftl</url-pattern>
</servlet-mapping> 

----------------------------------------

TITLE: Implementing DatasetProducer for CeWolf in Java
DESCRIPTION: Java class implementing the DatasetProducer interface for CeWolf. This example generates random page view data for a line chart. It includes methods for producing the dataset and checking if the data has expired.

LANGUAGE: java
CODE:
import java.io.Serializable;
import java.util.Date;
import java.util.Map;

import org.jfree.data.DefaultCategoryDataset;

import de.laures.cewolf.DatasetProduceException;
import de.laures.cewolf.DatasetProducer;

public class PageViewCountData implements DatasetProducer, Serializable {

	// These values would normally not be hard coded but produced by
	// some kind of data source like a database or a file
	private final String[] categories =    {"mon", "tue", "wen", "thu", "fri", "sat", "sun"};
	private final String[] seriesNames =    {"cewolfset.jsp", "tutorial.jsp", "testpage.jsp", "performancetest.jsp"};
	private final Integer[] [] values = new Integer[OS:seriesNames.length] [OS:categories.length];

	public Object produceDataset(Map params) throws DatasetProduceException {
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		for (int series = 0; series < seriesNames.length; series ++) {
			int lastY = (int)(Math.random() * 1000 + 1000);
			for (int i = 0; i < categories.length; i++) {
				final int y = lastY + (int)(Math.random() * 200 - 100);
				lastY = y;
				dataset.addValue((double)y, seriesNames[OS:series], categories[i]);
			}
		}
		return dataset;
	}

	public boolean hasExpired(Map params, Date since) {		
		return (System.currentTimeMillis() - since.getTime())  > 5000;
	}

	public String getProducerId() {
		return "PageViewCountData DatasetProducer";
	}
}

----------------------------------------

TITLE: Using I18n in Struts Tag Attributes with getText() Method in JSP
DESCRIPTION: Demonstrates the correct way to use internationalized text in Struts tag attributes by using the getText() method inherited from ActionSupport.

LANGUAGE: jsp
CODE:
<s:textfield name="lastName" label="getText('person.lastName')" ../>

----------------------------------------

TITLE: Accessing ValueStack Parameters via EL
DESCRIPTION: Examples of accessing ValueStack parameters using JSP Expression Language syntax in text and tag attributes.

LANGUAGE: jsp
CODE:
a[0] = ${a[0]}

<sample:tag value="${a[1]}"/>

----------------------------------------

TITLE: Configuring Maven Dependencies for Java 8 Support
DESCRIPTION: Maven configuration to exclude old ASM dependencies from xwork-core to enable Java 8 support. This configuration removes the conflicting ASM dependencies that would prevent Java 8 features from working properly.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.struts.xwork</groupId>
    <artifactId>xwork-core</artifactId>
    <exclusions>
        <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm</artifactId>
        </exclusion>
        <exclusion>
            <groupId>asm</groupId>
            <artifactId>asm-commons</artifactId>
        </exclusion>
    </exclusions>
</dependency>

----------------------------------------

TITLE: Configuring Simple Struts 1 Action in Struts 2
DESCRIPTION: This snippet shows how to configure a simple Struts 1 Action in a Struts 2 application using the Struts1Action wrapper class. It demonstrates the basic setup required to use a Struts 1 Action within Struts 2.

LANGUAGE: xml
CODE:
<action name="myAction" class="org.apache.struts2.s1.Struts1Action">
  <param name="className">com.mycompany.myapp.MyAction</param>
  <result>myAction.jsp</result>
</action>

----------------------------------------

TITLE: Multiple Spring Context Configuration
DESCRIPTION: Web.xml configuration to support multiple Spring configuration files.

LANGUAGE: xml
CODE:
<!-- Context Configuration locations for Spring XML files -->
 <context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>/WEB-INF/applicationContext-*.xml,classpath*:applicationContext-*.xml</param-value>
 </context-param>

----------------------------------------

TITLE: Setting Default includeParams Value in Struts XML Configuration
DESCRIPTION: Demonstrates how to set the default value for the includeParams attribute using the struts.url.includeParams constant in the Struts configuration file.

LANGUAGE: xml
CODE:
<struts>
   ...
   <constant name="struts.url.includeParams" value="none" />
   ...
</struts>

----------------------------------------

TITLE: Inline JavaScript with Struts Script Tag
DESCRIPTION: Shows how to include inline JavaScript code within the Struts script tag, demonstrating jQuery document ready pattern implementation.

LANGUAGE: jsp
CODE:
<s:script>
    $(function () {
        ...
    });
</s:script>

----------------------------------------

TITLE: Configuring Web.xml for Async Support
DESCRIPTION: Demonstrates the required web.xml configuration to enable async support in the Struts servlet.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>strutsServlet</servlet-name>
    <servlet-class>org.apache.struts2.dispatcher.servlet.StrutsServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
</servlet>

<servlet-mapping>
<servlet-name>strutsServlet</servlet-name>
<url-pattern>/</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Using Struts Form Tag in JSP
DESCRIPTION: This snippet demonstrates the basic usage of the Struts form tag in a JSP file. The ellipsis (...) indicates where additional attributes would be specified.

LANGUAGE: jsp
CODE:
<s:form ... />

----------------------------------------

TITLE: Adding a Static Field and Getter to Struts 2 Action
DESCRIPTION: Shows how to add a static field and its getter method to a Struts 2 Action class for use with the property tag.

LANGUAGE: java
CODE:
private static int helloCount = 0;

public int getHelloCount() {
    return helloCount;
}

// In execute method
helloCount++;

----------------------------------------

TITLE: Configuring REST Mapper in Struts XML
DESCRIPTION: XML configuration to set up the REST action mapper in struts.xml

LANGUAGE: xml
CODE:
<constant name="struts.mapper.class" value="rest" />

----------------------------------------

TITLE: ValueStack Access Utility Functions Implementation
DESCRIPTION: Java implementation of utility functions for accessing ValueStack and ActionContext from JSP 2.0 EL taglibs.

LANGUAGE: java
CODE:
package com.nmote.wwel;

import com.opensymphony.xwork.ActionContext;

/**
 * Utility functions for accessing value stack and action context
 * from JSP 2.0 EL taglibs.
 */
public class Functions {

	public static Object findOnValueStack(String expr) {
		ActionContext a = ActionContext.getContext();
		Object value = a.getValueStack().findValue(expr);
		return value;
	}

	public static Object getTopOfValueStack() {
		ActionContext a = ActionContext.getContext();
		Object value = a.getValueStack().peek();
		return value;
	}

	public static Object getActionName() {
		ActionContext a = ActionContext.getContext();
		Object value = a.getName();
		return value;
	}
}

----------------------------------------

TITLE: Granting Specific Permissions in SunOne 7.0 for Struts Framework
DESCRIPTION: This snippet shows how to grant specific permissions required by the Struts framework in SunOne 7.0. It includes read and write access to PropertyPermission, ReflectPermission for suppressAccessChecks, and full access to OgnlInvokePermission.

LANGUAGE: java
CODE:
grant {
	permission java.util.PropertyPermission "*", "read, write";
	permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
	permission ognl.OgnlInvokePermission "*";
};

----------------------------------------

TITLE: Creating Validation Action Class in Java
DESCRIPTION: Example action class with various validation annotations for form fields including required fields, dates, emails, URLs, and regex patterns.

LANGUAGE: java
CODE:
public class AjaxFormSubmitAction extends ActionSupport {
    private String requiredValidatorField = null;
    private String requiredStringValidatorField = null;
    // ... [full code omitted for brevity]
}

----------------------------------------

TITLE: Configuring Struts 2 Action in XML
DESCRIPTION: Shows how to configure a Struts 2 action in the struts.xml file, mapping a URL to an action class and specifying the result.

LANGUAGE: xml
CODE:
<action name="hello" class="org.apache.struts.helloworld.action.HelloWorldAction" method="execute">
    <result name="success">/HelloWorld.jsp</result>
</action>

----------------------------------------

TITLE: Including External JavaScript with Struts Script Tag
DESCRIPTION: Demonstrates how to reference an external JavaScript file using the Struts script tag with URL generation. The encode parameter is set to false to prevent URL encoding of the script path.

LANGUAGE: jsp
CODE:
<s:url var="myScript" value="./js/my-script.js" encode="false"/>
<s:script src="%{myScript}"/>

----------------------------------------

TITLE: Preparing Struts Master Release with Maven
DESCRIPTION: This Maven command prepares the release by updating versions, tagging the code, and committing changes. It uses the release:prepare goal with autoVersionSubmodules set to true.

LANGUAGE: bash
CODE:
mvn release:prepare -DautoVersionSubmodules=true

----------------------------------------

TITLE: Spring Bean Configuration
DESCRIPTION: Sample Spring applicationContext.xml configuration for bean definitions.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans default-autowire="autodetect">
    <bean id="personManager" class="com.acme.PersonManager" scope="prototype"/>
    ...
</beans>

----------------------------------------

TITLE: Implementing CustomValidator Annotation in Java
DESCRIPTION: Example showing basic usage of the CustomValidator annotation to define a custom validator for a field. The annotation specifies the validator type and target field name.

LANGUAGE: java
CODE:
@CustomValidator(type ="customValidatorName", fieldName = "myField")

----------------------------------------

TITLE: Configuring Default Package in Struts XML
DESCRIPTION: Sets the default package for created Action mappings in the Struts configuration file. This constant determines where auto-created ActionConfig objects will be placed.

LANGUAGE: xml
CODE:
<constant name="struts.codebehind.defaultPackage" value="codebehind-default" />

----------------------------------------

TITLE: Formatting Currency with Struts Text Tag in JSP
DESCRIPTION: Example of using the Struts text tag to format currency values using a properties file definition.

LANGUAGE: jsp
CODE:
<s:text name="format.money"><s:param name="value" value="myMoneyValue"/></s:text>

LANGUAGE: properties
CODE:
format.money={0,number,currency}

----------------------------------------

TITLE: Convention Plugin Configuration for WebLogic
DESCRIPTION: Struts properties configuration to enable Convention Plugin functionality in WebLogic environment

LANGUAGE: properties
CODE:
#struts convention property modifications for Weblogic
struts.convention.action.includeJars=.*?/yourwebapp.*?jar(!/)?
struts.convention.action.fileProtocols=jar,zip

----------------------------------------

TITLE: Incorrect Value Assignment in Struts
DESCRIPTION: Example of incorrect way to assign a literal string value to a textfield.

LANGUAGE: html
CODE:
<s:textfield key="state.label" name="state" value="ca"/>

----------------------------------------

TITLE: Example JSON Output in JSON
DESCRIPTION: Sample JSON output produced by the Struts 2 JSON plugin based on the example action.

LANGUAGE: json
CODE:
{
   "field1" : "str", 
   "ints": [10, 20],
   "map": {
       "John":"Galt"
   },
   "newName": "custom"
}

----------------------------------------

TITLE: JavaScript Functions for Ajax Div Control
DESCRIPTION: Provides JavaScript functions to start, stop, and refresh the Ajax div content programmatically.

LANGUAGE: javascript
CODE:
remotediv1.startTimer();

remotefiv1.stopTimer();

remotefiv1.refresh();

----------------------------------------

TITLE: Implementing Struts Textarea Component in JSP
DESCRIPTION: Example showing how to create a basic textarea form component using Struts tags. Demonstrates setting label, name, columns and rows attributes.

LANGUAGE: jsp
CODE:
<s:textarea label="Comments" name="comments" cols="30" rows="8"/>

----------------------------------------

TITLE: Full Integration Configuration for SiteMesh, FreeMarker, and Velocity in web.xml
DESCRIPTION: This snippet provides a complete configuration for integrating SiteMesh 2, FreeMarker 2.4.2, and Velocity 1.3 with Struts 2 Tags, ValueStack, and FreemarkerManager statics. It includes filter chains, servlets, and listener configurations.

LANGUAGE: xml
CODE:
    <filter>
        <filter-name>struts-prepare</filter-name>
        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
    </filter>

    <filter>
        <filter-name>sitemesh</filter-name>
        <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
    </filter>

    <filter>
        <filter-name>struts-execute</filter-name>
        <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>struts-prepare</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>sitemesh</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>struts-execute</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>sitemesh-freemarker</servlet-name>
        <servlet-class>org.apache.struts2.sitemesh.FreemarkerDecoratorServlet</servlet-class>
        <init-param>
            <param-name>default_encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>sitemesh-freemarker</servlet-name>
        <url-pattern>*.ftl</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>JspSupportServlet</servlet-name>
        <servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <listener>
        <listener-class>org.apache.struts2.dispatcher.ng.listener.StrutsListener</listener-class>
    </listener>

----------------------------------------

TITLE: Adding JspSupportServlet to web.xml for JSP Tag Support
DESCRIPTION: Shows the XML configuration needed in web.xml to enable JSP tag support in FreeMarker templates.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>JspSupportServlet</servlet-name>
    <servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

----------------------------------------

TITLE: Initializing Ajax Div with Placeholder Content in HTML
DESCRIPTION: Shows how to include placeholder content within the div tag before remote data is retrieved.

LANGUAGE: html
CODE:
<saf:div theme="ajax" id="weather" href="http://www.weather.com/weather?zip=97239">
    Placeholder...
</saf:div>

----------------------------------------

TITLE: Internationalization Properties Configuration
DESCRIPTION: Example of properties file configuration for internationalizing validation messages.

LANGUAGE: text
CODE:
notnull.field=${field.name} cannot be null

field.too.long=${field.name} value is too long, allowed length is ${max}

----------------------------------------

TITLE: Sorting List with Iterator Example - JSP
DESCRIPTION: Demonstrates sorting a list using a comparator and iterating through the sorted elements directly within the sort tag block. The sorted list is automatically pushed to and popped from the stack.

LANGUAGE: jsp
CODE:
<s:sort comparator="myComparator" source="myList">
     <s:iterator>
     <!-- do something with each sorted elements -->
     <s:property value="..." />
     </s:iterator>
</s:sort>

----------------------------------------

TITLE: Markdown Structure for Struts Themes Documentation
DESCRIPTION: Markdown file structure defining the layout and content organization for Struts themes and templates documentation, including definitions, template basics, and theme descriptions.

LANGUAGE: markdown
CODE:
---
layout: default
title: Themes and Templates
parent:
  title: Tag Developers Guide
  url: index
---

# Themes and Templates

The notions of "themes" and "templates" are at the core of the HTML [Struts Tags](struts-tags) provided by the framework.

## Definitions

| tag | A small piece of code executed from within [JSP](jsp), [FreeMarker](freemarker), or [Velocity](velocity). |
| template | A bit of code, usually written in [FreeMarker](freemarker), that can be rendered by certain tags (HTML tags) |
| theme | A  collection of _templates_  packaged together to provide common functionality |

----------------------------------------

TITLE: Configuring Regular Struts Action in XML
DESCRIPTION: This snippet demonstrates how to configure a regular Struts Action without JSF integration. It includes basic interceptor stack and result definitions.

LANGUAGE: xml
CODE:
<action name="employee" class="org.apache.struts.action2.showcase.jsf.EmployeeAction">
    <interceptor-ref name="basicStack"/>
    <result name="success">employee.jsp</result>
    <result name="index" type="redirect-action">index</result>
</action>

----------------------------------------

TITLE: JSP Form Template with AJAX Validation
DESCRIPTION: JSP file containing the form elements with AJAX validation support using custom themes and error containers.

LANGUAGE: jsp
CODE:
<%@taglib prefix="s" uri="/struts-tags" %>
<html>
    <!-- ... [full code omitted for brevity] ... -->
</html>

----------------------------------------

TITLE: Example Filter Chain Configuration in web.xml
DESCRIPTION: This snippet demonstrates an example configuration of filter chains in web.xml for Struts and SiteMesh. It includes filter declarations, mappings, and servlet configurations for both FreeMarker and Velocity.

LANGUAGE: xml
CODE:
<filter>
    <filter-name>struts-prepare</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
</filter>

<filter>
    <filter-name>struts-execute</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
</filter>


<filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>struts-prepare</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>sitemesh</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>struts-execute</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<listener>
    <listener-class>org.apache.struts2.dispatcher.listener.StrutsListener</listener-class>
</listener>

<servlet>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <servlet-class>org.apache.struts2.sitemesh.FreemarkerDecoratorServlet</servlet-class>
    <init-param>
        <param-name>default_encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet>
    <servlet-name>sitemesh-velocity</servlet-name>
    <servlet-class>org.apache.struts2.sitemesh.VelocityDecoratorServlet</servlet-class>
    <init-param>
        <param-name>default_encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <url-pattern>*.ftl</url-pattern>
</servlet-mapping>

<servlet-mapping>
    <servlet-name>sitemesh-velocity</servlet-name>
    <url-pattern>*.vm</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Configuring Struts for URL Parameters After Action Name
DESCRIPTION: XML configuration to enable the use of parameters in the URL after the action name.

LANGUAGE: xml
CODE:
<constant name="struts.enable.SlashesInActionNames" value="true"/>
<constant name="struts.mapper.alwaysSelectFullNamespace" value="false"/>

----------------------------------------

TITLE: Writing AJAX Response in Struts 1
DESCRIPTION: Demonstrates how to write a direct AJAX response from a Struts 1 Action by setting content type and writing to the response stream.

LANGUAGE: java
CODE:
response.setContentType("text/html");
PrintWriter out = response.getWriter();
out.println("Hello World!  This is an AJAX response from a Struts Action.");
out.flush();
return null;

----------------------------------------

TITLE: Adding Bean Validation Plugin Dependency in Maven
DESCRIPTION: Maven dependency configuration to add the Struts2 Bean Validation plugin to a project. Required for using bean validation functionality.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-bean-validation-plugin</artifactId>
    <version>X.X.X</version>
</dependency>

----------------------------------------

TITLE: Resulting HTML for Struts Checkbox
DESCRIPTION: Displays the HTML output generated by the Struts checkbox tag when using a simple template and the 'aBoolean' value is true. The checkbox is rendered as checked.

LANGUAGE: html
CODE:
<input type="checkbox" name="checkboxField1" value="true" checked="checked" />

----------------------------------------

TITLE: Implementing AJAX Form Validation JavaScript
DESCRIPTION: Client-side JavaScript code for handling form submission, AJAX requests and validation error display.

LANGUAGE: javascript
CODE:
function ajaxFormValidation(event) {
    event.preventDefault();
    _removeValidationErrors();
    var _form = $(event.target);
    //... [truncated for brevity]
}

----------------------------------------

TITLE: Rendering Action Errors in Struts JSP
DESCRIPTION: Example showing how to use the actionerror tag within a Struts form. The tag renders action errors if they exist, with the layout depending on the current theme. Empty errors are not displayed and text is HTML escaped by default.

LANGUAGE: jsp
CODE:
    <s:actionerror />
    <s:form .... >
       ....
    </s:form>

----------------------------------------

TITLE: Setting Struts Constants for Restful2ActionMapper Configuration
DESCRIPTION: Demonstrates how to set necessary Struts constants to enable and configure Restful2ActionMapper, including namespace-based mapping.

LANGUAGE: xml
CODE:
<constant name="struts.mapper.class" value="org.apache.struts2.dispatcher.mapper.PrefixBasedActionMapper" />
<constant name="struts.mapper.prefixMapping" value="/rest:restful2,:struts" />
<constant name="struts.enable.SlashesInActionNames" value="true" />
<constant name="struts.mapper.alwaysSelectFullNamespace" value="false" />

----------------------------------------

TITLE: CSS XHTML Theme Control Header Template
DESCRIPTION: Freemarker template for the control header in CSS XHTML theme. Handles field error display and label positioning through CSS rules rather than explicit attributes.

LANGUAGE: freemarker
CODE:
<#include "/${parameters.templateDir}/${parameters.expandTheme}/controlheader-core.ftl" />

----------------------------------------

TITLE: CSS XHTML Theme Head Template
DESCRIPTION: Freemarker template for the head section in CSS XHTML theme. Includes necessary CSS stylesheet references.

LANGUAGE: freemarker
CODE:
<#include "/${parameters.templateDir}/css_xhtml/head-core.ftl" />

----------------------------------------

TITLE: Configuring Bean Validation in Struts XML
DESCRIPTION: Basic Struts configuration showing how to enable bean validation and set provider-specific constants. Demonstrates extending from struts-bean-validation package.

LANGUAGE: xml
CODE:
<struts>
    <constant name="struts.beanValidation.providerClass" value="org.hibernate.validator.HibernateValidator"/>
    <constant name="struts.beanValidation.ignoreXMLConfiguration" value="false"/>
    <constant name="struts.beanValidation.convertMessageToUtf" value="false"/>
    <constant name="struts.beanValidation.convertMessageFromEncoding" value="ISO-8859-1"/>

    <package name="my-bean-validation" extends="struts-bean-validation">
    </package>
</struts>

----------------------------------------

TITLE: Struts 2.1 Filter Chain Configuration in web.xml
DESCRIPTION: This snippet shows the filter chain configuration for Struts 2.1 in web.xml. It includes the necessary filter declarations and mappings for Struts prepare and execute filters, as well as the SiteMesh filter.

LANGUAGE: xml
CODE:
<filter>
    <filter-name>struts-prepare</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
</filter>

<filter>
    <filter-name>struts-execute</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
</filter>

<filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>struts-prepare</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>sitemesh</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>struts-execute</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

----------------------------------------

TITLE: Applying FieldExpressionValidator Annotation in Java
DESCRIPTION: This snippet demonstrates how to apply the FieldExpressionValidator annotation to a method in Java. The annotation is used to validate a field using an OGNL expression, with options for customizing the error message and validation behavior.

LANGUAGE: java
CODE:
@FieldExpressionValidator(message = "Default message", key = "i18n.key", shortCircuit = true, expression = "an OGNL expression")

----------------------------------------

TITLE: Struts 2 Theme Stylesheet
DESCRIPTION: Default CSS styles used by the Struts 2 xhtml theme for form elements and labels.

LANGUAGE: css
CODE:
.label {font-style:italic; }
.errorLabel {font-style:italic; color:red; }
.errorMessage {font-weight:bold; color:red; }
.checkboxLabel {}
.checkboxErrorLabel {color:red; }
.required {color:red;}
.tdLabel {text-align:right; vertical-align:top; }

----------------------------------------

TITLE: Cloning Struts Master Repository in Git
DESCRIPTION: This command clones the Struts Master repository from Apache's GitBox. It's the first step in obtaining a fresh checkout for building.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/struts-master.git

----------------------------------------

TITLE: Configuring Tiles 3 Result Type in Struts 2
DESCRIPTION: This XML snippet shows how to configure the Tiles 3 Result type definition in a Struts 2 package. It defines a result-type named 'tiles' and specifies the class responsible for handling Tiles results.

LANGUAGE: xml
CODE:
<result-types>
  <result-type name="tiles" class="org.apache.struts2.views.tiles.TilesResult"/>
</result-types>

----------------------------------------

TITLE: Displaying All Field Errors with Struts fielderror Tag in JSP
DESCRIPTION: This example shows how to use the fielderror tag to display all field errors in a Struts application.

LANGUAGE: jsp
CODE:
<s:fielderror />

----------------------------------------

TITLE: Tiles Definition XML Configuration
DESCRIPTION: XML configuration for defining Tiles layouts and their attributes in tiles.xml.

LANGUAGE: xml
CODE:
<!DOCTYPE tiles-definitions PUBLIC
        "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"
        "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
<tiles-definitions>

    <definition name="fooLayout" template="/WEB-INF/tiles/layout.jsp">
        <put-attribute name="title" value="Tiles Sample"/>
        <put-attribute name="header" value=".header"/>
        <put-attribute name="body" value=".bodyp"/>
    </definition>

    <definition name="tilesWorks" extends="fooLayout">
        <put-attribute name="header" value="/WEB-INF/tiles/header.jsp"/>
        <put-attribute name="body" value="/WEB-INF/tiles/body.jsp"/>
    </definition>

</tiles-definitions>

----------------------------------------

TITLE: Configuring Log4j2 for Struts 2
DESCRIPTION: XML configuration for Log4j2 to reduce logging level for Struts 2 and XWork classes in production.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
    <Appenders>
        <Console name="STDOUT" target="SYSTEM_OUT">
            <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
        </Console>
    </Appenders>
    <Loggers>
        <Logger name="com.opensymphony.xwork2" level="warn"/>
        <Logger name="org.apache.struts2" level="warn"/>
        <Root level="info">
            <AppenderRef ref="STDOUT"/>
        </Root>
    </Loggers>
</Configuration>

----------------------------------------

TITLE: Creating CeWolf Chart using JSP Tags
DESCRIPTION: JSP code snippet demonstrating how to create a CeWolf chart using JSP tags. This example creates a line chart of page view statistics using the PageViewCountData producer.

LANGUAGE: jsp
CODE:
<jsp:useBean id="pageViews" class="de.laures.cewolf.example.PageViewCountData"/>
<cewolf:chart 
    id="line" 
    title="Page View Statistics" 
    type="line" 
    xaxislabel="Page" 
    yaxislabel="Views">
    <cewolf:data>
        <cewolf:producer id="pageViews"/>
    </cewolf:data>
</cewolf:chart>

<cewolf:img chartid="line" renderer="cewolf" width="400" height="300"/>

----------------------------------------

TITLE: Include Tag with Inline Parameters
DESCRIPTION: Example showing how to include a JSP page while passing parameters using the param tag with value attribute.

LANGUAGE: jsp
CODE:
<s:include value="myJsp.jsp">
   <s:param name="param1" value="value2" />
   <s:param name="param2" value="value2" />
</s:include>

----------------------------------------

TITLE: Implementing Iterator Creation in Java for Struts Append Tag
DESCRIPTION: Java action class that creates three ArrayList objects containing different types of values (numbers and letters) to demonstrate the append tag functionality. The class provides getter methods to access these lists from the view layer.

LANGUAGE: java
CODE:
public class AppendIteratorTagAction extends ActionSupport {

  private List myList1;
  private List myList2;
  private List myList3;


  public String execute() throws Exception {

      myList1 = new ArrayList();
      myList1.add("1");
      myList1.add("2");
      myList1.add("3");

      myList2 = new ArrayList();
      myList2.add("a");
      myList2.add("b");
      myList2.add("c");

      myList3 = new ArrayList();
      myList3.add("A");
      myList3.add("B");
      myList3.add("C");

      return "done";
  }

  public List getMyList1() { return myList1; }
  public List getMyList2() { return myList2; }
  public List getMyList3() { return myList3; }
}

----------------------------------------

TITLE: Including Tiles 3 Plugin Dependency in Maven
DESCRIPTION: This XML snippet shows how to include the struts-tiles3-plugin as a dependency in a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the Tiles 3 plugin.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.struts</groupId>
  <artifactId>struts2-tiles3-plugin</artifactId>
  <version>${version.tiles}</version>
  <scope>compile</scope>
</dependency>

----------------------------------------

TITLE: Implementing CDI Number Guess Action
DESCRIPTION: Example Struts 2 action class using CDI injection to implement a number guessing game.

LANGUAGE: java
CODE:
package org.apache.struts2.example.cdi;

import com.opensymphony.xwork2.ActionSupport;
import javax.inject.Inject;

public class NumberGuess extends ActionSupport {

    @Inject
    Game game;

    public Game getGame() {
        return game;
    }

    @Override
    public String execute() throws Exception {
        return SUCCESS;
    }

    public String guess() throws Exception {
        final String errorMessage = game.check();
        addActionError(errorMessage);

        if (Game.CORRECT.equals(errorMessage)) {
            game.reset();
        } else if (game.getRemainingGuesses() == 0) {
            addActionError("The correct guess was " + game.getGuess() + ". Game is reset.");
            game.reset();
        }

        return SUCCESS;
    }
}

----------------------------------------

TITLE: Configuring JSF-enabled Struts Action in XML
DESCRIPTION: This snippet shows how to configure a Struts Action with JSF integration. It includes the JSF interceptor stack and JSF result type, alongside regular Struts configurations.

LANGUAGE: xml
CODE:
<action name="employee" class="org.apache.struts.action2.showcase.jsf.EmployeeAction">
    <interceptor-ref name="basicStack"/>
    <interceptor-ref name="jsfStack"/>
    <result name="success" type="jsf" />
    <result name="index" type="redirect-action">index</result>
</action>

----------------------------------------

TITLE: Basic OSGi Manifest Configuration
DESCRIPTION: Minimal MANIFEST.MF configuration required to enable Struts OSGi support in a bundle.

LANGUAGE: text
CODE:
Struts2-Enabled: true
Export-Package: com.mycompany.myapp.actions
Bundle-Version: 1.0.0
Bundle-SymbolicName: foo.actions
Import-Package: com.opensymphony.xwork2

----------------------------------------

TITLE: Rendering Custom UI Component in Velocity
DESCRIPTION: Shows how to use the component tag in Velocity templates. Includes examples of basic usage and passing parameters to the component.

LANGUAGE: velocity
CODE:
#s-component( "template=/my/custom/component.vm" )

LANGUAGE: velocity
CODE:
#s-component( "template=/my/custom/component.vm" )
    #s-param( "name=key1" "value=value1" )
    #s-param( "name=key2" "value=value2" )
#end

----------------------------------------

TITLE: Tiles Layout JSP Example
DESCRIPTION: JSP code showing a Tiles layout page implementation using Struts tags.

LANGUAGE: jsp
CODE:
<%@ taglib uri="http://tiles.apache.org/tags-tiles" prefix="tiles" %>
<%@ taglib prefix="s" uri="/struts-tags" %>

<%-- Show usage; Used in Header --%>
<tiles:importAttribute name="title" scope="request"/>
<html>
    <head><title>Struts2 Showcase - <tiles:getAsString name="title"/></title></head>
<body>
    <tiles:insertAttribute name="header"/>
    <tiles:insertAttribute name="body"/>
    <p>Notice that this is a layout made in JSP</p>
</body>
</html>

----------------------------------------

TITLE: Using getText Tag in Struts
DESCRIPTION: Example of using getText method in Struts property tag for internationalization.

LANGUAGE: xml
CODE:
<s:property value="getText('some.key')" />

----------------------------------------

TITLE: Configuring DWR Integration with Struts 2 Validation
DESCRIPTION: XML configuration to expose Struts 2 validations through DWR. Creates a new validator instance and configures bean conversion for ValidationAwareSupport.

LANGUAGE: xml
CODE:
<dwr>
    <allow>
      <create creator="new" javascript="validator" class="org.apache.struts2.validators.DWRValidator"/>
      <convert converter="bean" match="com.opensymphony.xwork2.ValidationAwareSupport"/>
    </allow>
</dwr>

----------------------------------------

TITLE: Disabling Action Scanning in Struts XML
DESCRIPTION: Configures whether to disable scanning the classpath for Action classes. This setting can be used to control the automatic discovery of Action classes.

LANGUAGE: xml
CODE:
<constant name="struts.configuration.classpath.disableActionScanning" value="false" />

----------------------------------------

TITLE: Nested Object Validation with @AssertValid
DESCRIPTION: Example of validating nested objects using the @AssertValid annotation in an action class.

LANGUAGE: java
CODE:
public class MemberObject extends ActionSupport {
    @AssertValid
    private Person person = new Person();

    public Person getPerson() {
        return person;
    }
}

----------------------------------------

TITLE: Implementing Struts Action Class for Non-Field Validation
DESCRIPTION: Java action class that extends AbstractValidationActionSupport with getter and setter methods for three text fields. Uses @StrutsParameter annotation for parameter injection.

LANGUAGE: java
CODE:
public class NonFieldValidatorsExampleAction extends AbstractValidationActionSupport {

    private String someText;
    private String someTextRetype;
    private String someTextRetypeAgain;

    public String getSomeText() {
        return someText;
    }

    @StrutsParameter
    public void setSomeText(String someText) {
        this.someText = someText;
    }

    public String getSomeTextRetype() {
        return someTextRetype;
    }

    @StrutsParameter
    public void setSomeTextRetype(String someTextRetype) {
        this.someTextRetype = someTextRetype;
    }

    public String getSomeTextRetypeAgain() {
        return someTextRetypeAgain;
    }

    @StrutsParameter
    public void setSomeTextRetypeAgain(String someTextRetypeAgain) {
        this.someTextRetypeAgain = someTextRetypeAgain;
    }
}

----------------------------------------

TITLE: Using UI Tag with Key Attribute
DESCRIPTION: Example of using the key attribute in UI tags for localization.

LANGUAGE: xml
CODE:
<s:textfield key="some.key" name="textfieldName"/>

----------------------------------------

TITLE: Hello World JSP Example
DESCRIPTION: Simple JSP file demonstrating a basic 'Hello World' page using the Convention plugin.

LANGUAGE: jsp
CODE:
<html>
<body>
  Hello world!
</body>
</html>

----------------------------------------

TITLE: Configuring RedirectAction in struts.xml
DESCRIPTION: Example of setting up a redirectAction result type to pass render parameters between actions in different portlet modes.

LANGUAGE: xml
CODE:
<result type="redirectAction" name="success">
    <param name="actionName">displayCart</param>
    <param name="userId">${userId}</param>  
    <!-- If you want to redirect to a different portlet mode, use the portletMode parameter 
    <param name="portletMode">view</param>
    -->
</result>

----------------------------------------

TITLE: Configuring JSON Result with Property Exclusion in XML
DESCRIPTION: Demonstrates how to configure a JSON result type in Struts 2 XML configuration, including the exclusion of specific properties.

LANGUAGE: xml
CODE:
<result type="json">
  <param name="excludeProperties">
    login.password,
    studentList.*.sin
  </param>
</result>

----------------------------------------

TITLE: Implementing prepare Method in EditAction Class for Struts 2
DESCRIPTION: This code snippet shows the implementation of the prepare method in the EditAction class. It retrieves car models and person information, which is crucial for populating form controls and setting initial field values.

LANGUAGE: java
CODE:
carModelsAvailable = carModelsService.getCarModels();

setPersonBean(editService.getPerson());

----------------------------------------

TITLE: Minimal web.xml Configuration for Struts 2 and SiteMesh with JSP Decorators
DESCRIPTION: This snippet demonstrates the minimal changes required in web.xml when using JSP for SiteMesh decorators with Struts 2. It includes the necessary filter declarations and mappings for Struts prepare and execute filters, as well as the SiteMesh filter.

LANGUAGE: xml
CODE:
<filter>
    <filter-name>struts2-prepare</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
</filter>

<filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
</filter>

<filter>
    <filter-name>struts2-execute</filter-name>
    <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>struts2-prepare</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>sitemesh</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
</filter-mapping>

<filter-mapping>
    <filter-name>struts2-execute</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

----------------------------------------

TITLE: Configuring Convention Plugin Constants
DESCRIPTION: XML snippet showing how to configure various Convention plugin settings in the Struts configuration file.

LANGUAGE: xml
CODE:
<constant name="struts.convention.result.path" value="/WEB-INF/mytemplates/"/>
<constant name="struts.convention.action.suffix" value="Action"/>
<constant name="struts.convention.package.locators" value="action,actions,struts,struts2"/>

----------------------------------------

TITLE: Generating Limited Iterator with Count Attribute in JSP
DESCRIPTION: This example shows how to use the generator tag with the count attribute to limit the number of entries in the generated iterator.

LANGUAGE: jsp
CODE:
<s:generator val="%{'aaa,bbb,ccc,ddd,eee'}" count="3">
 <s:iterator>
     <s:property /><br/>
 </s:iterator>
</s:generator>

----------------------------------------

TITLE: Updating Struts Constants for REST Plugin in XML
DESCRIPTION: XML configuration for struts.xml to set constants required when using the REST plugin with Convention Plugin. This includes setting the action suffix, enabling all matches mapping, specifying the default parent package, and defining package locators.

LANGUAGE: xml
CODE:
<constant name="struts.convention.action.suffix" value="Controller"/>
<constant name="struts.convention.action.mapAllMatches" value="true"/>
<constant name="struts.convention.default.parent.package" value="rest-default"/>
<constant name="struts.convention.package.locators" value="example"/>

----------------------------------------

TITLE: Configuring Result Elements in Struts XML
DESCRIPTION: Shows various ways to configure result elements in Struts XML, from explicit configuration to using intelligent defaults.

LANGUAGE: xml
CODE:
<result name="success" type="dispatcher">
    <param name="location">/ThankYou.jsp</param>
</result>

LANGUAGE: xml
CODE:
<result>
    <param name="location">/ThankYou.jsp</param>
</result>

LANGUAGE: xml
CODE:
<result>/ThankYou.jsp</result>

----------------------------------------

TITLE: Conversion Validator Configuration with Field Repopulation
DESCRIPTION: XML configuration for conversion validator with field repopulation enabled.

LANGUAGE: xml
CODE:
<!-- MyActionSupport-someAction-validation.xml -->
<validators>
  ...
  <field name="myIntegerField">
     <field-validator type="conversion">
        <param name="repopulateField">true</param>
        <message>Conversion Error (Integer Wanted)</message>
     </field-validator>
  </field>
  ...
</validators>

----------------------------------------

TITLE: Configuring Request Exclusion Patterns in Struts
DESCRIPTION: XML configuration to define patterns for requests that Struts should ignore, using regular expressions.

LANGUAGE: xml
CODE:
<constant name="struts.action.excludePattern" value="/some/content/.*,/other/content/.*"/>

----------------------------------------

TITLE: Maven Plugin Configuration for Jetty 7
DESCRIPTION: Maven build plugin configuration required for using Jetty 7 with the embedded JSP plugin.

LANGUAGE: xml
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Implementing JSON-Serializable Action in Java
DESCRIPTION: Example of a Java action class with fields and methods that can be serialized to JSON using the Struts 2 JSON plugin.

LANGUAGE: java
CODE:
import java.util.HashMap;
import java.util.Map;

import com.opensymphony.xwork2.Action;

public class JSONExample {
    private String field1 = "str";
    private int[] ints = {10, 20};
    private Map map = new HashMap();
    private String customName = "custom";

    private transient String field2;

    private String field3;

    public String execute() {
        map.put("John", "Galt");
        return Action.SUCCESS;
    }

    public String getField1() {
        return field1;
    }

    public void setField1(String field1) {
        this.field1 = field1;
    }

    public int[] getInts() {
        return ints;
    }

    public void setInts(int[] ints) {
        this.ints = ints;
    }

    public Map getMap() {
        return map;
    }

    public void setMap(Map map) {
        this.map = map;
    }

    @JSON(name="newName")
    public String getCustomName() {
        return this.customName;
    }
}

----------------------------------------

TITLE: Basic DateTimePicker Usage
DESCRIPTION: Examples showing basic usage patterns for the DateTimePicker component with different configuration options.

LANGUAGE: xml
CODE:
<sx:datetimepicker name="order.date" label="Order Date" />
<sx:datetimepicker name="delivery.date" label="Delivery Date" displayFormat="yyyy-MM-dd"  />
<sx:datetimepicker name="delivery.date" label="Delivery Date" value="%{date}"  />
<sx:datetimepicker name="delivery.date" label="Delivery Date" value="%{'2007-01-01'}"  />
<sx:datetimepicker name="order.date" label="Order Date" value="%{'today'}"/>

----------------------------------------

TITLE: Configuring Dynamic Results in Struts XML
DESCRIPTION: Demonstrates how to configure a dynamic result in Struts XML, using an EL expression to access an action's property.

LANGUAGE: xml
CODE:
<action name="fragment" class="FragmentAction">
    <result name="next" type="redirectAction">${nextAction}</result>
</action>

----------------------------------------

TITLE: Adding Maven Dependency for Struts Tiles Plugin
DESCRIPTION: Maven dependency configuration required to include the struts-tiles-plugin in a web application.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.struts</groupId>
  <artifactId>struts2-tiles-plugin</artifactId>
  <version>${version.tiles}</version>
</dependency>

----------------------------------------

TITLE: Implementing Date Range Validation with DateRangeFieldValidator in Java
DESCRIPTION: Example showing how to use the DateRangeFieldValidator annotation to validate a date field. The validator ensures the date falls between January 1st, 2005 and December 31st, 2005.

LANGUAGE: java
CODE:
@DateRangeFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, min = "2005/01/01", max = "2005/12/31")

----------------------------------------

TITLE: Generating Iterator with Converter in JSP and Java
DESCRIPTION: This example shows how to use the generator tag with a custom converter to modify the entries in the generated iterator.

LANGUAGE: jsp
CODE:
<s:generator val="%{'aaa,bbb,ccc,ddd,eee'}" converter="%{myConverter}">
 <s:iterator>
     <s:property /><br/>
 </s:iterator>
</s:generator>

LANGUAGE: java
CODE:
public class GeneratorTagAction extends ActionSupport {

  ....

  public Converter getMyConverter() {
     return new Converter() {
         public Object convert(String value) throws Exception {
             return "converter-"+value;
         }
     };
  }

  ...

}

----------------------------------------

TITLE: Rendering Dojo Editor2 Widget in Java
DESCRIPTION: Java class snippet showing the purpose of the Dojo textarea component, which is to render a Dojo Editor2 widget.

LANGUAGE: Java
CODE:
/**
 * Render Dojo Editor2 widget
 */

----------------------------------------

TITLE: Action Tag Java Implementation
DESCRIPTION: Sample Java action class showing basic execute() and doDefault() methods for use with action tag

LANGUAGE: java
CODE:
public class ActionTagAction extends ActionSupport {

  public String execute() throws Exception {
      return "done";
  }

  public String doDefault() throws Exception {
      ServletActionContext.getRequest().setAttribute("stringByAction", "This is a String put in by the action's doDefault()");
      return "done";
  }
 }

----------------------------------------

TITLE: Using afterNotifyTopics and Highlighting Target with Dojo Anchor in Struts 2
DESCRIPTION: This example shows how to use the afterNotifyTopics attribute to subscribe to a topic that is published after the AJAX request completes, and how to highlight the target element.

LANGUAGE: XML
CODE:
<script type="text/javascript">
dojo.event.topic.subscribe("/after", function(data, request, widget){
    alert('inside a topic event. after request');
    //data : text returned from request(the html)
    //request: XMLHttpRequest object
    //widget: widget that published the topic
});
</script>        

<sx:a afterNotifyTopics="/after" highlightColor="red" href="%{#ajaxTest}">Publish topics</sx:a>

----------------------------------------

TITLE: Configuring Dedicated Action for Tiles in Portlet Environment
DESCRIPTION: This XML snippet defines a dedicated action to support Tiles in a portlet environment, using the DirectRenderFromEventAction class.

LANGUAGE: xml
CODE:
<action name="tilesDirect" class="org.apache.struts2.portlet.dispatcher.DirectRenderFromEventAction">
    <result type="tiles" name="success">${location}</result>
</action>

----------------------------------------

TITLE: Configuring Tiles Listener in web.xml
DESCRIPTION: XML configuration to register the Struts Tiles listener for integration with Struts features.

LANGUAGE: xml
CODE:
<listener>
  <listener-class>org.apache.struts2.tiles.StrutsTilesListener</listener-class>
</listener>

----------------------------------------

TITLE: Creating a URL with Query String in JSP
DESCRIPTION: Demonstrates how to create a URL with a query string parameter using Struts tags in JSP.

LANGUAGE: jsp
CODE:
<s:url value="somePage">
    <s:param name="personId" value="%{personId}"/>
</s:url>

----------------------------------------

TITLE: JavaScript Integration Examples
DESCRIPTION: Demonstrates how to interact with the DateTimePicker component using JavaScript, including setting and getting values.

LANGUAGE: xml
CODE:
<sx:datetimepicker id="picker" label="Order Date" />
<script type="text/javascript">
  function setValue() {
     var picker = dojo.widget.byId("picker");
     
     //string value
     picker.setValue('2007-01-01');
     
     //Date value
     picker.setValue(new Date());
  }
  
  function showValue() {
     var picker = dojo.widget.byId("picker");
     
     //string value
     var stringValue = picker.getValue();
     alert(stringValue);
     
     //date value
     var dateValue = picker.getDate();
     alert(dateValue);
  }
</script>

----------------------------------------

TITLE: Simple Dojo Div Example in XML
DESCRIPTION: A basic example of using the Dojo div tag to load content once via AJAX.

LANGUAGE: XML
CODE:
<sx:div href="%{#url}">Initial Content</sx:div>

----------------------------------------

TITLE: Passing Custom Attributes to Templates in FreeMarker
DESCRIPTION: Illustrates how to pass custom attributes to templates using FreeMarker tags, which can be accessed via the parameters Map in the template.

LANGUAGE: ftl
CODE:
<@s.form action="updatePerson">
    <@s.textfield label="First name" name="firstName" description="..."/>
    <@s.submit value="Update"/>
</@s.form>

----------------------------------------

TITLE: Updating Target Content with AJAX in Struts 2
DESCRIPTION: This example shows how to use the sx:a tag to update a div's content with HTML returned from an action via AJAX.

LANGUAGE: XML
CODE:
<div id="div1">Div 1</div>
<s:url id="ajaxTest" value="/AjaxTest.action"/>

<sx:a id="link1" href="%{ajaxTest}" target="div1">
     Update Content
</sx:a>

----------------------------------------

TITLE: Configuring Basic Dojo Head Tag in Struts XML
DESCRIPTION: Demonstrates the basic usage of the Dojo head tag in a Struts XML file. This snippet shows how to include the Dojo head tag within the HTML head section of a page.

LANGUAGE: xml
CODE:
 <%@ taglib prefix="sx" uri="/struts-dojo-tags" %>
 <head>
   <title>My page</title>
   <sx:head/>
 </head>

----------------------------------------

TITLE: Linked Autocompleters
DESCRIPTION: Example showing how to link two autocompleters together using topics

LANGUAGE: xml
CODE:
<form id="selectForm">
      <sx:autocompleter  name="select" list="{'fruits','colors'}"  valueNotifyTopics="/changed" />
 </form>  
 <sx:autocompleter  href="%{jsonList}" formId="selectForm" listenTopics="/changed"/>

----------------------------------------

TITLE: Maven Commands for Building and Testing
DESCRIPTION: Common Maven commands for compiling, testing, packaging and running the Struts 2 application.

LANGUAGE: bash
CODE:
mvn compile
mvn test
mvn package
mvn jetty:run

----------------------------------------

TITLE: Using Tiles Annotations in Action Class
DESCRIPTION: Java code demonstrating how to use Tiles annotations in a Struts action class instead of XML configuration.

LANGUAGE: java
CODE:
@Result(name = "success", type="tiles")
@TilesDefinition(extend = "fooLayout", putAttributes = {
    @TilesPutAttribute(name = "header", value = "/WEB-INF/tiles/header.jsp"),
    @TilesPutAttribute(name = "body", value = "/WEB-INF/tiles/body.ftl")
})
public class FooAction extends ActionSupport {

----------------------------------------

TITLE: Implementing Subset Tag Action Class in Java
DESCRIPTION: Action class demonstrating the creation of list data and a decider implementation for use with the subset tag. Includes methods for providing array, list, and custom decision logic.

LANGUAGE: java
CODE:
public class MySubsetTagAction extends ActionSupport {
     public String execute() throws Exception {
        l = new ArrayList();
        l.add(new Integer(1));
        l.add(new Integer(2));
        l.add(new Integer(3));
        l.add(new Integer(4));
        l.add(new Integer(5));
        return "done";
     }


     public Integer[] getMyArray() {
        return a;
     }

     public List getMyList() {
        return l;
      }

     public Decider getMyDecider() {
         return new Decider() {
             public boolean decide(Object element) throws Exception {
                 int i = ((Integer)element).intValue();
                 return (((i % 2) == 0)?true:false);
             }
         };
     }
}

----------------------------------------

TITLE: Nested iterator Tags with Status in JSP
DESCRIPTION: This snippet demonstrates nested iterator tags with status attributes. It iterates over groups and their users, using the status to determine odd/even rows and to separate users with commas.

LANGUAGE: jsp
CODE:
<s:iterator value="groupDao.groups" status="groupStatus">
    <tr class="<s:if test="#groupStatus.odd == true ">odd</s:if><s:else>even</s:else>">
        <td><s:property value="name" /></td>
        <td><s:property value="description" /></td>
        <td>
            <s:iterator value="users" status="userStatus">
                <s:property value="fullName" /><s:if test="!#userStatus.last">,</s:if>
            </s:iterator>
        </td>
    </tr>
</s:iterator>

----------------------------------------

TITLE: Configuring Velocity Decorator Servlet in web.xml
DESCRIPTION: This snippet shows how to configure the Velocity decorator servlet in the web.xml file. It includes the servlet declaration and mapping for .ftl files.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <servlet-class>org.apache.struts2.sitemesh.VelocityDecoratorServlet</servlet-class>
    <init-param>
        <param-name>default_encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet> 

<servlet-mapping>
    <servlet-name>sitemesh-freemarker</servlet-name>
    <url-pattern>*.ftl</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: HTML Attributes Table for Dojo textarea Tag
DESCRIPTION: HTML table displaying the attributes, their requirements, defaults, and descriptions for the Dojo textarea tag. This includes properties like accesskey, cols, cssClass, disabled, and many others.

LANGUAGE: HTML
CODE:
<table width="100%">
  <tr>
    <td colspan="6"><h4>Dynamic Attributes Allowed:</h4> false</td>
  </tr>
  <tr>
    <td colspan="6">&nbsp;</td>
  </tr>
  <tr>
    <th align="left" valign="top"><h4>Name</h4></th>
    <th align="left" valign="top"><h4>Required</h4></th>
    <th align="left" valign="top"><h4>Default</h4></th>
    <th align="left" valign="top"><h4>Evaluated</h4></th>
    <th align="left" valign="top"><h4>Type</h4></th>
    <th align="left" valign="top"><h4>Description</h4></th>
  </tr>
  <!-- Table rows with attribute details omitted for brevity -->
</table>

----------------------------------------

TITLE: Auto-reloading Dojo Div with Indicator in XML
DESCRIPTION: An example of a Dojo div that reloads its content every 2 seconds and displays a loading indicator.

LANGUAGE: XML
CODE:
<img id="indicator" src="${pageContext.request.contextPath}/images/indicator.gif" style="display:none"/>
<sx:div href="%{#url}" updateFreq="2000" indicator="indicator">
  Initial Content
</sx:div>

----------------------------------------

TITLE: Configuring Workflow Interceptor with Method Exclusions
DESCRIPTION: Example showing how to exclude specific methods from the workflow interceptor using the excludeMethods parameter.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="params"/>
     <interceptor-ref name="validation"/>
     <interceptor-ref name="workflow">
         <param name="excludeMethods">myMethod,mySecondMethod</param>
     </interceptor-ref name="workflow">
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Demonstrating Conversion with iterator Tag in JSP
DESCRIPTION: This snippet shows how to use the iterator tag with status object to avoid conversion issues when using fa_IR locale. It iterates from 1 to 3, displaying the count and creating text fields.

LANGUAGE: jsp
CODE:
<s:iterator begin="1" end="3" status="status">
    <s:property/>
    <s:textfield id="text_%{#status.countStr}" name="test[%{#status.indexStr}]"/>
</s:iterator>

LANGUAGE: html
CODE:
۰
<input type="text" name="test[0]" value="" id="text_1">
۱
<input type="text" name="test[1]" value="" id="text_2">
۲
<input type="text" name="test[2]" value="" id="text_3">

----------------------------------------

TITLE: Implementing DoubleRangeFieldValidator in Java
DESCRIPTION: Example of using the DoubleRangeFieldValidator annotation to validate a double field with inclusive minimum of 0.123 and maximum of 99.987. The validator includes a default message, i18n key, and shortCircuit option.

LANGUAGE: java
CODE:
@DoubleRangeFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, minInclusive = "0.123", maxInclusive = "99.987")

----------------------------------------

TITLE: Creating Struts 2 Blank Project with Maven
DESCRIPTION: Maven command to generate a new Struts 2 blank project using the archetype. Specifies groupId, artifactId, and archetype details.

LANGUAGE: bash
CODE:
mvn archetype:generate -B \
                         -DgroupId=tutorial \
                         -DartifactId=tutorial \
                         -DarchetypeGroupId=org.apache.struts \
                         -DarchetypeArtifactId=struts2-archetype-blank \
                         -DarchetypeVersion=<version>

----------------------------------------

TITLE: Configuring Custom ContentTypeHandler in Struts XML
DESCRIPTION: XML configuration to define a custom ContentTypeHandler for YAML format

LANGUAGE: xml
CODE:
<bean name="yaml" type="org.apache.struts2.rest.handler.ContentTypeHandler" class="com.mycompany.MyYamlContentHandler" />

----------------------------------------

TITLE: Subset Tag with Count Parameter in XML
DESCRIPTION: Example showing how to limit the number of items processed using the count attribute.

LANGUAGE: xml
CODE:
<s:subset source="myList" count="3">
   <s:iterator>
       <s:property />
   </s:iterator>
</s:subset>

----------------------------------------

TITLE: Basic Ajax Div Usage in HTML with Struts
DESCRIPTION: Demonstrates the simplest way to use the div tag with an 'href' attribute to retrieve remote data asynchronously.

LANGUAGE: html
CODE:
<saf:div theme="ajax" id="weather" href="http://www.weather.com/weather?zip=97239"/>

----------------------------------------

TITLE: Configuring Exception Logging in Struts 2 XML
DESCRIPTION: This snippet demonstrates how to enable and configure exception logging in the struts.xml file. It sets up a custom interceptor stack with exception logging enabled.

LANGUAGE: xml
CODE:
<interceptors>
    <interceptor-stack name="appDefaultStack">
        <interceptor-ref name="defaultStack">
            <param name="exception.logEnabled">true</param>
            <param name="exception.logLevel">ERROR</param>
        </interceptor-ref>
    </interceptor-stack>
</interceptors>

<default-interceptor-ref name="appDefaultStack" />

----------------------------------------

TITLE: Maven Dependency for Class Reloading
DESCRIPTION: Maven dependency configuration for Apache Commons JCI FAM required for class reloading.

LANGUAGE: xml
CODE:
   <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-jci-fam</artifactId>
       <version>1.0</version>
   </dependency>

----------------------------------------

TITLE: Configuring Roles Interceptor in Struts XML
DESCRIPTION: Example of how to configure the roles interceptor in a Struts action definition. Shows setting up allowed roles for admin and member access levels with the complete stack.

LANGUAGE: xml
CODE:
  <!-- only allows the admin and member roles -->
  <action name="someAction" class="com.examples.SomeAction">
      <interceptor-ref name="completeStack"/>
      <interceptor-ref name="roles">
        <param name="allowedRoles">admin,member</param>
      </interceptor-ref>
      <result name="success">good_result.ftl</result>
  </action>

----------------------------------------

TITLE: Using Struts File Upload Tag with Content Type Filtering in JSP
DESCRIPTION: Examples showing how to use the Struts file tag with different accept attributes to filter file types. The first example accepts any text file, while the second specifically accepts HTML and plain text files.

LANGUAGE: jsp
CODE:
 <s:file name="anUploadFile" accept="text/*" />
 <s:file name="anohterUploadFIle" accept="text/html,text/plain" />

----------------------------------------

TITLE: Configuring Action for Message Resource Access in Struts 2
DESCRIPTION: XML configuration in struts.xml to define an action that allows access to message resources in the view.

LANGUAGE: xml
CODE:
<action name="registerInput" class="org.apache.struts.register.action.Register" method="input" >
    <result name="input">/register.jsp</result>
</action>

----------------------------------------

TITLE: Creating a TestNG Test Class for Struts 2
DESCRIPTION: This Java code snippet demonstrates how to create a TestNG test class for Struts 2 by extending the StrutsTestCase class. This base class handles starting and stopping the Struts 2 framework for each test.

LANGUAGE: java
CODE:
public class MyTest extends StrutsTestCase {
 // testing code
}

----------------------------------------

TITLE: Implementing Struts Action Class for Visitor Validation
DESCRIPTION: This Java code snippet shows the implementation of a Struts action class for visitor validation. It extends AbstractValidationActionSupport and includes getter and setter methods for a User object.

LANGUAGE: java
CODE:
public class VisitorValidatorsExampleAction extends AbstractValidationActionSupport {

    private User user;

    @StrutsParameter(depth = 1)
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}

----------------------------------------

TITLE: Rendering HTML Select Input with Struts Select Tag in JSP
DESCRIPTION: These examples demonstrate how to use the Struts select tag to create HTML select inputs. The first example shows a multi-select for pets, while the second shows a single-select for months with a header option.

LANGUAGE: jsp
CODE:
<s:select label="Pets"
       name="petIds"
       list="petDao.pets"
       listKey="id"
       listValue="name"
       multiple="true"
       size="3"
       required="true"
       value="%{petDao.pets.{id}}"
/>

<s:select label="Months"
       name="months"
       headerKey="-1" headerValue="Select Month"
       list="#{'01':'Jan', '02':'Feb', [...]}"
       value="selectedMonth"
       required="true"
/>

// The month id (01, 02, ...) returned by the getSelectedMonth() call
// against the stack will be auto-selected

----------------------------------------

TITLE: Submitting a Form with Dojo Anchor Inside Form in Struts 2
DESCRIPTION: This example demonstrates how to use the sx:a tag inside a form to submit it asynchronously.

LANGUAGE: XML
CODE:
<s:form id="form" action="AjaxTest">
     <input type="textbox" name="data">
     <sx:a>Submit form</sx:a>           
</s:form>

----------------------------------------

TITLE: Adding Log4j2 Dependencies in Maven
DESCRIPTION: Maven dependency configuration to include Log4j2 libraries in the Struts 2 project.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>${log4j2.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>${log4j2.version}</version>
</dependency>

----------------------------------------

TITLE: ValueStack Access TLD Configuration
DESCRIPTION: XML configuration for tag library descriptor (TLD) that defines custom functions for ValueStack access.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
	version="2.0">

<description>
This taglib enables access to the ValueStack
from JSP 2.0 Expression Language
</description>

<tlib-version>1.0</tlib-version>

<short-name>wwel</short-name>

<function>
	<name>vs</name>
	<function-class>com.nmote.wwel.Functions</function-class>
	<function-signature>
		java.lang.Object findOnValueStack(java.lang.String)
	</function-signature>
</function>

<function>
	<name>name</name>
	<function-class>com.nmote.wwel.Functions</function-class>
	<function-signature>
		java.lang.Object getActionName()
	</function-signature>
</function>

<function>
	<name>top</name>
	<function-class>com.nmote.wwel.Functions</function-class>
	<function-signature>
		java.lang.Object getTopOfValueStack()
	</function-signature>
</function>

</taglib>

----------------------------------------

TITLE: Subset Tag with Variable Assignment in JSP
DESCRIPTION: Example showing how to assign the subset result to a variable for programmatic access.

LANGUAGE: jsp
CODE:
<s:subset var="mySubset" source="myList" count="13" start="3" />
<%
    Iterator i = (Iterator) pageContext.getAttribute("mySubset");
    while(i.hasNext()) {
%>
<%=i.next() %>
<%  } %>

----------------------------------------

TITLE: Configuring HttpHeader Result in Struts XML
DESCRIPTION: Examples of using the HttpHeader Result type in Struts configuration. It demonstrates setting custom headers and status codes, as well as configuring error responses.

LANGUAGE: xml
CODE:
<result name="success" type="httpheader">
  <param name="status">204</param>
  <param name="headers.a">a custom header value</param>
  <param name="headers.b">another custom header value</param>
</result>
 
<result name="proxyRequired" type="httpheader">
  <param name="error">305</param>
  <param name="errorMessage">this action must be accessed through a proxy</param>
</result>

----------------------------------------

TITLE: Verifying PGP Signatures using GPG
DESCRIPTION: Commands to verify PGP signatures of downloaded Struts files using the GPG tool. Requires downloading the KEYS file and signature file from the main distribution directory.

LANGUAGE: shell
CODE:
% gpg --import KEYS
% gpg --verify ${filename}.tar.gz.asc ${filename}.tar.gz

----------------------------------------

TITLE: Adding Convention Plugin Dependency in Maven POM
DESCRIPTION: XML snippet showing how to include the Convention plugin as a dependency in a Maven project's POM file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-convention-plugin</artifactId>
    <version>X.X.X</version>
</dependency>

----------------------------------------

TITLE: Maven Common Commands
DESCRIPTION: Collection of common Maven commands for building, testing, and running Struts 2 applications.

LANGUAGE: bash
CODE:
mvn install
mvn test
mvn clean
mvn package
mvn initialize
mvn jetty:run

----------------------------------------

TITLE: Basic OVal Validation Annotations Usage
DESCRIPTION: Shows how to use OVal validation annotations on action class fields for basic validation rules.

LANGUAGE: java
CODE:
public class SimpleField extends ActionSupport{
    @NotNull()
    @NotEmpty
    @Length(max = 3)
    private String name;
//...
}

----------------------------------------

TITLE: Basic Include Tag Usage in JSP
DESCRIPTION: Simple example of including a JSP page using the Struts include tag.

LANGUAGE: jsp
CODE:
<s:include value="myJsp.jsp" />

----------------------------------------

TITLE: Custom EL Function Usage in JSP
DESCRIPTION: Example of using custom EL functions to access ValueStack properties through the 'vs' function.

LANGUAGE: jsp
CODE:
<%@ taglib uri="/WEB-INF/tld/wwel.tld" prefix="x" %>

a[0] = ${x:vs('a[0]')}
a[0] * 4 = ${x:vs('a[0] * 4')}

Current action name: ${x:name()}
Top of ValueStack: ${x:top()}

----------------------------------------

TITLE: Subset Tag with Custom Decider in JSP
DESCRIPTION: Example using a custom Decider implementation to filter elements based on custom logic.

LANGUAGE: jsp
CODE:
<s:subset source="myList" decider="myDecider">
       <s:iterator>
            <s:property />
       </s:iterator>
</s:subset>

----------------------------------------

TITLE: Stacking Interceptors in Struts XML
DESCRIPTION: Demonstrates how to create an interceptor stack in struts.xml. This allows bundling multiple interceptors together for reuse across actions.

LANGUAGE: xml
CODE:
<package name="default" extends="struts-default">
    <interceptors>
        <interceptor name="timer" class=".."/>
        <interceptor name="logger" class=".."/>
        <interceptor-stack name="myStack">
            <interceptor-ref name="timer"/>
            <interceptor-ref name="logger"/>
        </interceptor-stack>
    </interceptors>

    <action name="login" class="tutuorial.Login">
        <interceptor-ref name="myStack"/>
        <result name="input">login.jsp</result>
        <result name="success" type="redirectAction">/secure/home</result>
    </action>
</package>

----------------------------------------

TITLE: Implementing CspSettingsAware Interface in Java for Apache Struts
DESCRIPTION: This snippet demonstrates how to implement the CspSettingsAware interface in a Struts action class. It allows configuring the CSP interceptor by providing an instance of the CspSettings interface on a per-action basis.

LANGUAGE: java
CODE:
public class MyAction implements CspSettingsAware {
    
    public String execute() {
        return "success";
    }
    
    public CspSetting getCspSettings() {
      ...
    }
}

----------------------------------------

TITLE: Configuring Maven Dependencies for Struts 2 CDI Plugin
DESCRIPTION: Basic Maven configuration to include Struts 2 CDI plugin and CDI API dependencies in the project.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.struts</groupId>
        <artifactId>struts2-cdi-plugin</artifactId>
        <version>${struts2.version}</version>
    </dependency>
    <dependency>
        <groupId>javax.enterprise</groupId>
        <artifactId>cdi-api</artifactId>
        <version>1.0-SP1</version>
        <scope>provided</scope>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Creating Thank You JSP View
DESCRIPTION: JSP page that displays confirmation message and form submission details using Struts 2 tags.

LANGUAGE: jsp
CODE:
<%@ taglib prefix="s" uri="/struts-tags" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Registration Successful</title>
  </head>
  <body>
    <h3>Thank you for registering for a prize.</h3>

    <p>Your registration information: <s:property value="personBean" /> </p>

    <p><a href="<s:url action='index' />" >Return to home page</a>.</p>
  </body>
</html>

----------------------------------------

TITLE: Disabling Static Content Serving in Struts
DESCRIPTION: XML configuration to disable built-in static content serving feature in Struts. This requires manual provision of CSS and JavaScript files.

LANGUAGE: xml
CODE:
<constant name="struts.serve.static" value="false"/>

----------------------------------------

TITLE: Configuring Advanced Dojo Head Tag with Debug and Locales in Struts XML
DESCRIPTION: Shows an advanced configuration of the Dojo head tag in Struts XML. This example enables debug mode and specifies additional locales to be loaded by Dojo.

LANGUAGE: xml
CODE:
 <%@ taglib prefix="sx" uri="/struts-dojo-tags" %>
 <head>
   <title>My page</title>
   <sx:head debug="true" extraLocales="en-us,nl-nl,de-de"/>
 </head>

----------------------------------------

TITLE: Using i18n Tag with Resource Bundle in JSP
DESCRIPTION: Demonstrates how to use the Struts i18n tag to access a custom resource bundle and retrieve localized text using the text() method. The example shows accessing a specific key 'aaa.bbb.ccc' from 'myCustomBundle'.

LANGUAGE: jsp
CODE:
<s:i18n name="myCustomBundle">
  The i18n value for key aaa.bbb.ccc in myCustomBundle is <s:property value="text('aaa.bbb.ccc')" />
</s:i18n>

----------------------------------------

TITLE: SiteMesh Plugin Configuration
DESCRIPTION: XML configuration for the SiteMesh plugin defining bean components

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
	"http://struts.apache.org/dtds/struts-2.5.dtd">
    
<struts>
    <bean class="org.apache.struts2.sitemesh.FreemarkerPageFilter" static="true" optional="true"/>
    <bean class="org.apache.struts2.sitemesh.VelocityPageFilter" static="true" optional="true"/>
</struts>

----------------------------------------

TITLE: Setting Custom Static Content Path in Struts
DESCRIPTION: XML configuration to customize the default path for serving static content in Struts.

LANGUAGE: xml
CODE:
<constant name="struts.ui.staticContentPath" value="/my-static-content"/>

----------------------------------------

TITLE: Configuring JBoss VFS for Linux/OSX in JBoss 5
DESCRIPTION: This snippet shows how to add the necessary Java option to force VFS JAR support in JBoss 5 for Linux or OSX environments. This configuration is added to the run.conf file in the JBoss bin directory.

LANGUAGE: bash
CODE:
JAVA_OPTS="$JAVA_OPTS -Djboss.vfs.forceVfsJar=true"

----------------------------------------

TITLE: Extending ObjectFactory in Java
DESCRIPTION: Demonstrates how to create a custom ObjectFactory by extending the base ObjectFactory class. The custom implementation must have a default no-argument constructor.

LANGUAGE: java
CODE:
public class MyObjectFactory extends ObjectFactory {
    .....
}

----------------------------------------

TITLE: Spring OSGi Web Application Configuration
DESCRIPTION: Web.xml configuration for integrating Spring OSGi with Struts, including necessary listeners and filter mappings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_9" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>Struts Blank</display-name>

    <filter>
        <filter-name>struts2-prepare</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>
    </filter>

    <filter>
        <filter-name>struts2-execute</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter</filter-class>
    </filter>

     <filter-mapping>
        <filter-name>struts2-prepare</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>struts2-execute</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <listener>
        <listener-class>org.apache.struts2.osgi.StrutsOsgiListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.apache.struts2.dispatcher.ng.listener.StrutsListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.osgi.web.context.support.OsgiBundleXmlWebApplicationContext</param-value>
    </context-param>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>osgibundle:/META-INF/spring/*.xml</param-value>
    </context-param>
    <context-param>
        <param-name>parentContextKey</param-name>
        <param-value>parent-context-bean</param-value>
    </context-param>
</web-app>

----------------------------------------

TITLE: Markdown Page Layout Definition
DESCRIPTION: Front matter YAML configuration specifying the page layout and title

LANGUAGE: markdown
CODE:
---
layout: default
title: Announcements 2016
---

----------------------------------------

TITLE: Configuring JasperReports Result for CSV Output in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure a Struts result to use JasperReports for generating a CSV report. It specifies the report location, data source, and output format.

LANGUAGE: xml
CODE:
<result name="success" type="jasper">
    <param name="location">foo.jasper</param>
    <param name="dataSource">mySource</param>
    <param name="format">CSV</param>
</result>

----------------------------------------

TITLE: Using JSON-RPC with Dojo in JavaScript
DESCRIPTION: JavaScript code demonstrating how to use Dojo to make JSON-RPC calls to a Struts 2 action.

LANGUAGE: javascript
CODE:
<s:url id="smdUrl" namespace="/nodecorate" action="SMDAction" />
<script type="text/javascript">
    //load dojo RPC
    dojo.require("dojo.rpc.*");
    
    //create service object(proxy) using SMD (generated by the json result)
    var service = new dojo.rpc.JsonService("${smdUrl}");
    
    //function called when remote method returns
    var callback = function(bean) {
        alert("Price for " + bean.type + " is " + bean.price);
    };
    
    //parameter
    var bean = {type: "Mocca"};
    
    //execute remote method
    var defered = service.doSomething(bean, 5);

    //attach callback to defered object
    defered.addCallback(callback);
</script>

----------------------------------------

TITLE: Bookmark Management Actions Configuration
DESCRIPTION: Struts configuration defining actions for bookmark management operations

LANGUAGE: xml
CODE:
<package name="edit" extends="struts-portlet-default" namespace="/edit">
   <action name="index" class="com.mycompany.ListBookmarksAction">
      <result>/WEB-INF/jsp/edit/index.jsp</result>
   </action>
   <action name="addBookmark" class="com.mycompany.AddBookmarkAction">
      <result type="redirectAction">
         <param name="actionName">index</param>
      </result>
   </action>
</package>

----------------------------------------

TITLE: Standard Cache Configuration with Size Limit
DESCRIPTION: Configuration for setting expression and BeanInfo caches to size 1250 with standard cache mode using properties format.

LANGUAGE: properties
CODE:
### Set expression and BeanInfo caches to size 1250 with standard cache mode
struts.ognl.enableExpressionCache=true
struts.ognl.expressionCacheMaxSize=1250
struts.ognl.expressionCacheLRUMode=false
struts.ognl.beanInfoCacheMaxSize=1250
struts.ognl.beanInfoCacheLRUMode=false

----------------------------------------

TITLE: Configuring Action Mapping in Struts XML
DESCRIPTION: XML configuration for mapping the AJAX form action with validation interceptors and results.

LANGUAGE: xml
CODE:
<!DOCTYPE struts PUBLIC 
  "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
  "http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>
    <package>
         <action name="ajaxFormSubmit" class="org.apache.struts2.showcase.validation.AjaxFormSubmitAction">
             <interceptor-ref name="jsonValidationWorkflowStack"/>
             <result name="input">/WEB-INF/validation/ajaxFormSubmit.jsp</result>
             <result type="jsonActionRedirect">ajaxFormSubmitSuccess</result>
         </action>
    </package>
</struts>

----------------------------------------

TITLE: Configuring Default Validation Interceptor Stack in Struts XML
DESCRIPTION: XML configuration showing how to set up the default validation interceptor stack in struts-default.xml, which includes both validation and workflow interceptors.

LANGUAGE: xml
CODE:
<interceptor-stack name="defaultStack">
   ...
   <interceptor-ref name="validation">
      <param name="excludeMethods">input,back,cancel,browse</param>
   </interceptor-ref>
   <interceptor-ref name="workflow">
      <param name="excludeMethods">input,back,cancel,browse</param>
   </interceptor-ref>
</interceptor-stack>

----------------------------------------

TITLE: Verifying PGP Signatures using PGP
DESCRIPTION: Commands to verify PGP signatures of downloaded Struts files using the PGP tool. Requires downloading the KEYS file and signature file from the main distribution directory.

LANGUAGE: shell
CODE:
% pgp -ka KEYS
% pgp ${filename}.tar.gz.asc

----------------------------------------

TITLE: Displaying Maven Build Success Output for Struts 2
DESCRIPTION: This snippet shows the successful build output for Struts 2, listing all the modules that were built and their respective build times.

LANGUAGE: text
CODE:
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] Struts 2 Bill of Materials ......................... SUCCESS [  1.188 s]
[INFO] Struts 2 2.5.24-SNAPSHOT ........................... SUCCESS [  2.249 s]
[INFO] Struts 2 Core ...................................... SUCCESS [01:13 min]
[INFO] Struts Plugins ..................................... SUCCESS [  0.232 s]
[INFO] Struts 2 Configuration Browser Plugin .............. SUCCESS [  1.374 s]
[INFO] Struts 2 Sitemesh Plugin ........................... SUCCESS [  1.429 s]
[INFO] Struts 2 Tiles Plugin .............................. SUCCESS [  2.303 s]
[INFO] Struts 2 DWR Plugin ................................ SUCCESS [  0.905 s]
[INFO] Struts 2 Spring Plugin ............................. SUCCESS [  2.232 s]
[INFO] Struts 2 Convention Plugin ......................... SUCCESS [  4.540 s]
[INFO] Struts 2 JUnit Plugin .............................. SUCCESS [  4.297 s]
[INFO] Struts 2 JSON Plugin ............................... SUCCESS [  5.384 s]
[INFO] Struts 2 Bean Validation Plugin .................... SUCCESS [  3.345 s]
[INFO] Struts 2 Webapps ................................... SUCCESS [  0.391 s]
[INFO] Struts 2 Showcase Webapp ........................... SUCCESS [  6.104 s]
[INFO] Struts 2 REST Plugin ............................... SUCCESS [  4.058 s]
[INFO] Struts 2 Rest Showcase Webapp ...................... SUCCESS [  1.524 s]
[INFO] Struts 2 CDI Plugin ................................ SUCCESS [  2.758 s]
[INFO] Struts 2 Embedded JSP Plugin ....................... SUCCESS [  8.111 s]
[INFO] Struts 2 GXP Plugin ................................ SUCCESS [  1.137 s]
[INFO] Struts 2 Jasper Reports Plugin ..................... SUCCESS [  4.392 s]
[INFO] Struts 2 Java Templates Plugin ..................... SUCCESS [  2.666 s]
[INFO] Struts 2 JFreeChart Plugin ......................... SUCCESS [  3.169 s]
[INFO] Struts 2 OSGi Plugin ............................... SUCCESS [  3.209 s]
[INFO] Struts 2 OVal Plugin ............................... SUCCESS [  3.113 s]
[INFO] Struts 2 Pell Multipart Plugin ..................... SUCCESS [  0.842 s]
[INFO] Struts 2 Plexus Plugin ............................. SUCCESS [  1.003 s]
[INFO] Struts 2 Portlet Plugin ............................ SUCCESS [  5.210 s]
[INFO] Struts 2 Portlet Tiles Plugin ...................... SUCCESS [  0.999 s]
[INFO] DEPRECATED: Struts 2 Sitegraph Plugin .............. SUCCESS [  2.634 s]
[INFO] Struts 2 TestNG Plugin ............................. SUCCESS [  2.081 s]
[INFO] Struts OSGi Bundles ................................ SUCCESS [  0.083 s]
[INFO] Struts 2 OSGi Admin Bundle ......................... SUCCESS [  1.237 s]
[INFO] Struts 2 OSGi Demo Bundle 2.5.24-SNAPSHOT .......... SUCCESS [  1.157 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 02:39 min
[INFO] Finished at: 2020-08-14T11:24:15+02:00
[INFO] ------------------------------------------------------------------------

----------------------------------------

TITLE: LRU Cache Configuration
DESCRIPTION: Configuration for setting expression and BeanInfo caches to size 1000 with LRU (Least Recently Used) cache mode using properties format.

LANGUAGE: properties
CODE:
### Set expression and BeanInfo caches to size 1000 with LRU cache mode
struts.ognl.enableExpressionCache=true
struts.ognl.expressionCacheMaxSize=1000
struts.ognl.expressionCacheLRUMode=true
struts.ognl.beanInfoCacheMaxSize=1000
struts.ognl.beanInfoCacheLRUMode=true

----------------------------------------

TITLE: OVal XML Validation Configuration
DESCRIPTION: Example of defining validation rules using XML configuration for OVal validators.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<oval xmlns="http://oval.sf.net/oval-configuration" xmlns:xsi="http://http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://oval.sf.net/oval-configuration http://oval.sourceforge.net/oval-configuration-1.3.xsd">
    <class type="org.apache.struts2.interceptor.SimpleFieldsXML" overwrite="false"
           applyFieldConstraintsToSetters="true">
        <field name="firstName">
            <notNull/>
        </field>
    </class>
</oval>

----------------------------------------

TITLE: Configuring Struts Action with JSP Result
DESCRIPTION: Basic XML configuration for mapping a Struts action to a JSP result page using the default Dispatcher Result type.

LANGUAGE: xml
CODE:
<action name="test" class="com.acme.TestAction">
    <result name="success">test-success.jsp</result>
</action>

----------------------------------------

TITLE: Configuring Template Directory in Struts XML
DESCRIPTION: Sets the template directory using the struts.ui.templateDir property in struts.xml. This property defaults to 'template' if not specified.

LANGUAGE: xml
CODE:
<struts>
    <constant name="struts.ui.templateDir" value="template" />
</struts>

----------------------------------------

TITLE: XML LRU Cache Configuration
DESCRIPTION: XML configuration for setting expression and BeanInfo caches to size 1000 with LRU cache mode.

LANGUAGE: xml
CODE:
<!-- Set expression and BeanInfo caches to size 1000 with LRU cache mode -->
<constant name="struts.ognl.enableExpressionCache" value="true"/>
<constant name="struts.ognl.expressionCacheMaxSize" value="1000"/>
<constant name="struts.ognl.expressionCacheLRUMode" value="true"/>
<constant name="struts.ognl.beanInfoCacheMaxSize" value="1000"/>
<constant name="struts.ognl.beanInfoCacheLRUMode" value="true"/>

----------------------------------------

TITLE: Basic JSP Page with Struts Tags
DESCRIPTION: Example JSP page showing basic Struts tag usage to display action properties.

LANGUAGE: jsp
CODE:
<%@ taglib prefix="s" uri="/struts-tags" %>

<html>
<head>
    <title>Hello</title>
</head>
<body>

Hello, <s:property value="name"/>

</body>
</html>

----------------------------------------

TITLE: Resulting XML Structure
DESCRIPTION: Example XML output showing how circular references are handled in the transformation.

LANGUAGE: xml
CODE:
<result>
<x>
<y/>
</x>
</result>

----------------------------------------

TITLE: Resuming Failed Struts Master Release Preparation
DESCRIPTION: If the release preparation fails, this command can be used to resume the process. It uses the release:prepare goal with the resume option.

LANGUAGE: bash
CODE:
mvn release:prepare -Dresume

----------------------------------------

TITLE: Creating Grouped Options with Struts optgroup Tag in JSP
DESCRIPTION: This example demonstrates how to use the Struts optgroup tag within a select tag to create grouped options. It includes a main selection with two option groups: 'Adult' and 'Japanese'.

LANGUAGE: jsp
CODE:
<s:select label="My Selection"
           name="mySelection"
           value="%{'POPEYE'}"
           list="%{#{'SUPERMAN':'Superman', 'SPIDERMAN':'spiderman'}}">
   <s:optgroup label="Adult"
                list="%{#{'SOUTH_PARK':'South Park'}}" />
   <s:optgroup label="Japanese"
                list="%{#{'POKEMON':'pokemon','DIGIMON':'digimon','SAILORMOON':'Sailormoon'}}" />
</s:select>

----------------------------------------

TITLE: Struts Action Mapping Configuration
DESCRIPTION: XML configuration showing how to map a Struts action to use an embedded JSP result type.

LANGUAGE: xml
CODE:
<package name="example" namespace="/example" extends="embeddedjsp-default">
    <action name="HelloWorld" class="example.HelloWorld">
        <result type="embeddedJsp">org/myexample/jsps/Hello.jsp</result>
    </action>
</package>

----------------------------------------

TITLE: Unsubscribing Users from Mailing List with JavaScript
DESCRIPTION: This JavaScript function generates an unsubscribe email address for a given user's email, allowing moderators to easily unsubscribe users from the Struts mailing list.

LANGUAGE: javascript
CODE:
function generate(form) {
  var badBoy=form[0];
  var email = 'user-unsubscribe-' + badBoy.value.replace('@', '=') + '@struts.apache.org';
  var link = document.getElementById('ready-email');
  link.style.visibility = 'visible';
  link.href = 'mailto:' + email;
}

----------------------------------------

TITLE: Implementing doubleselect Tag with List and Map in JSP
DESCRIPTION: Shows two examples of using the doubleselect tag in JSP. The first example uses simple lists for both selects, while the second uses a map for the first select and a conditional list for the second select.

LANGUAGE: jsp
CODE:
 <s:doubleselect label="doubleselect test1" name="menu" list="{'fruit','other'}" doubleName="dishes" doubleList="top == 'fruit' ? {'apple', 'orange'} : {'monkey', 'chicken'}" />
 <s:doubleselect label="doubleselect test2" name="menu" list="#{'fruit':'Nice Fruits', 'other':'Other Dishes'}" doubleName="dishes" doubleList="top == 'fruit' ? {'apple', 'orange'} : {'monkey', 'chicken'}" />

----------------------------------------

TITLE: Custom Cache Factory Configuration
DESCRIPTION: XML configuration for implementing custom OGNL cache factories by specifying custom implementation classes.

LANGUAGE: xml
CODE:
<constant name="struts.ognl.expressionCacheFactory" value="some.package.CustomExpressionCacheFactory"/>
<constant name="struts.ognl.beanInfoCacheFactory" value="some.package.CustomBeanInfoCacheFactory"/>

----------------------------------------

TITLE: HTML Form for Generating Unsubscribe Email
DESCRIPTION: This HTML snippet creates a form that allows users to input an email address and generate an unsubscribe link for the Struts mailing list.

LANGUAGE: html
CODE:
<form action="javascript: void(0);">
    <label for="bad-boy">Paste user email address</label>
    <input id="bad-boy" type="text"/>
    <input type="button" value="Generate" onclick="generate(this.form)">
    <div><a style="visibility: hidden" id="ready-email" href="#">Unsubscribe</a></div>
</form>

----------------------------------------

TITLE: Setting Maven Memory Options for Struts 2 Build
DESCRIPTION: These commands set the MAVEN_OPTS environment variable to increase the memory available to Maven, which can help prevent OutOfMemoryErrors during the build process.

LANGUAGE: bash
CODE:
// Bash
export MAVEN_OPTS=-Xmx512m

// Windows
set MAVEN_OPTS=-Xmx512m

----------------------------------------

TITLE: Struts2 Action Class Definition
DESCRIPTION: Java action class with properties for name, age, and answer fields. Includes getter/setter methods annotated with @StrutsParameter.

LANGUAGE: java
CODE:
public class QuizAction extends ActionSupport {

	private static final long serialVersionUID = -7505437345373234225L;

	String name;
	int age;
	String answer;

	public String getName() {
		return name;
	}

	@StrutsParameter
	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	@StrutsParameter
	public void setAge(int age) {
		this.age = age;
	}

	public String getAnswer() {
		return answer;
	}

	@StrutsParameter
	public void setAnswer(String answer) {
		this.answer = answer;
	}
}

----------------------------------------

TITLE: Basic Conversion Validator XML Configuration
DESCRIPTION: Examples of configuring conversion validator using both Plain-Validator and Field-Validator syntax in Struts.

LANGUAGE: xml
CODE:
<!-- Plain Validator Syntax -->
<validator type="conversion">
        <param name="fieldName">myField</param>
     <message>Conversion Error Occurred</message>
</validator>
  
<!-- Field Validator Syntax -->
<field name="myField">
   <field-validator type="conversion">
      <message>Conversion Error Occurred</message>
   </field-validator>
</field>

----------------------------------------

TITLE: Maven Dependency Configuration for Jetty
DESCRIPTION: Maven dependency configuration required for using the plugin with Jetty, including Tomcat Jasper dependency.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.tomcat</groupId>
    <artifactId>jasper</artifactId>
    <version>6.0.18</version>
</dependency>

----------------------------------------

TITLE: Using Merge Tag in JSP
DESCRIPTION: JSP code demonstrating how to use the merge tag to combine multiple lists and iterate over the merged results. The tag merges three lists and displays their elements in alternating order.

LANGUAGE: jsp
CODE:
<s:merge var="myMergedIterator1">
     <s:param value="%{myList1}" />
     <s:param value="%{myList2}" />
     <s:param value="%{myList3}" />
</s:merge>
<s:iterator value="%{#myMergedIterator1}">
     <s:property />
</s:iterator>

----------------------------------------

TITLE: Configuring Javatemplates Plugin in Struts XML
DESCRIPTION: This XML configuration snippet sets the necessary properties in struts.xml to enable the Javatemplates Plugin. It specifies the UI template suffix as 'java' and sets the UI theme to 'simple'.

LANGUAGE: xml
CODE:
<struts>
  <constant name="struts.ui.templateSuffix" value="java" />
  <constant name="struts.ui.theme" value="simple" />
</struts>

----------------------------------------

TITLE: Describing SiteGraph Plugin API Usage in Struts
DESCRIPTION: This snippet explains how to use the SiteGraph plugin through its API rather than the command line. It mentions creating a new SiteGraph instance, specifying a Writer for output, and calling the prepare() method.

LANGUAGE: text
CODE:
 * <p>
 * If you wish to use SiteGraph through its API rather than through the command line,
 * you can do that as well. All you need to do is create a new SiteGraph instance,
 * optionally specify a {@link Writer} to output the dot content to, and then call
 * {@link #prepare()}.
 * </p>

----------------------------------------

TITLE: Including Static Resources in FreeMarker Template
DESCRIPTION: Example showing how to include static resources from a plugin jar using FreeMarker templating

LANGUAGE: ftl
CODE:
<!-- Assuming /static/main.css is inside a plugin jar, to add it to the page: -->

<@s.url value="/static/main.css" var="css" />
<link rel="stylesheet" type="text/css" href="%{#css}" />

----------------------------------------

TITLE: Bean Model Implementation with ID
DESCRIPTION: Example implementation of a model bean with id and name properties used for type conversion demonstrations.

LANGUAGE: java
CODE:
public class MyBean implements Serializable {
    private Long id;
    private String name;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String toString() {
        return "MyBean{" +
                "id=" + id +
                ", name='" + name + "'" +
                "}";
    }
}

----------------------------------------

TITLE: Performing Struts Annotations Release
DESCRIPTION: Maven command to perform the release, which builds and deploys the release artifacts to the staging repository.

LANGUAGE: shell
CODE:
mvn release:perform

----------------------------------------

TITLE: Sample Struts Debug XML Output
DESCRIPTION: Example of XML debug output showing framework objects including action mapping, context parameters, and value stack information

LANGUAGE: xml
CODE:
<debug>
     <parameters /> 
     <context>
        <struts.actionMapping>
        <class>class org.apache.struts2.dispatcher.mapper.ActionMapping</class> 
        <name>showcase</name> 
        <namespace>/</namespace> 
        </struts.actionMapping>
        <attr /> 
        <__devMode>true</__devMode> 
        <report.conversion.errors>false</report.conversion.errors> 
    </context>
    <request /> 
    <session /> 
    <valueStack>
        <value>
            <actionErrors /> 
            <actionMessages /> 
            <class>class com.opensymphony.xwork2.ActionSupport</class> 
            <errorMessages /> 
            <errors /> 
            <fieldErrors /> 
            <locale>
                <ISO3Country>USA</ISO3Country> 
                <ISO3Language>eng</ISO3Language> 
                <class>class java.util.Locale</class> 
                <country>US</country> 
                <displayCountry>United States</displayCountry> 
                <displayLanguage>English</displayLanguage> 
                <displayName>English (United States)</displayName> 
                <displayVariant /> 
                <language>en</language> 
                <variant /> 
            </locale>
        </value>
        <value>
            <class>class com.opensymphony.xwork2.DefaultTextProvider</class> 
        </value>
    </valueStack>
</debug>

----------------------------------------

TITLE: JSP Include Usage - Hello.jsp
DESCRIPTION: Example showing how to include another JSP file using the full classpath path.

LANGUAGE: jsp
CODE:
<jsp:include page="org/myexample/jsps/Who.jsp" />

----------------------------------------

TITLE: Configuring JSR286 Portlet in portlet.xml
DESCRIPTION: Basic portlet configuration demonstrating how to set up a Struts 2 portlet using the Jsr286Dispatcher class.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<portlet-app id="my-portlet-app"
	xmlns="http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"
	xsi:schemaLocation="http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd">

    <portlet id="MyPortlet">
        <description xml:lang="EN">My Portlet</description>
        <portlet-name>MyPortlet</portlet-name>
        <display-name xml:lang="EN">my-portlet</display-name>
    
        <portlet-class>org.apache.struts2.portlet.dispatcher.Jsr286Dispatcher</portlet-class>
        
        <!-- SNIP -->

    </portlet>
</portlet-app>

----------------------------------------

TITLE: Implementing TreeNode Components in Struts2
DESCRIPTION: Examples showing two methods of creating tree structures: static construction using hard-coded data and dynamic construction using data from a backing action. The TreeNode component allows rendering tree nodes within a tree widget that supports AJAX functionality.

LANGUAGE: xml
CODE:
<-- Creating tree statically using hard-coded data. -->
 <s:tree id="..." label="...">
    <s:treenode id="..." label="..." />
    <s:treenode id="..." label="...">
        <s:treenode id="..." label="..." />
        <s:treenode id="..." label="..." />
    </s:treenode>
    <s:treenode id="..." label="..." />
 </s:tree>

 <-- Creating tree dynamically using data from backing action. -->
 <s:tree
          id="..."
          rootNode="..."
          nodeIdProperty="..."
          nodeTitleProperty="..."
          childCollectionProperty="..." />

----------------------------------------

TITLE: TabbedPanel with Notify Topics
DESCRIPTION: Example of using notify topics to prevent a tab from being selected. Demonstrates how to subscribe to the beforeSelect event and cancel tab selection.

LANGUAGE: XML
CODE:
<sx:head />
<script type="text/javascript">
dojo.event.topic.subscribe("/beforeSelect", function(event, tab, tabContainer){
    event.cancel = true;
});
</script>

<sx:tabbedpanel id="test" beforeSelectTabNotifyTopics="/beforeSelect">
   <sx:div id="three" label="remote" theme="ajax" href="/AjaxTest.action" >
       One Tab
   </sx:div>
   <sx:div id="three" label="remote" theme="ajax" href="/AjaxTest.action" >
       Another tab
   </sx:div>
</sx:tabbedpanel>

----------------------------------------

TITLE: Configuring Dispatcher Servlet in web.xml
DESCRIPTION: Configuration of the Struts 2 portlet dispatcher servlet for exposing the value stack through request attributes.

LANGUAGE: xml
CODE:
<servlet id="Struts2PortletDispatcherServlet">
    <servlet-name>Struts2PortletDispatcherServlet</servlet-name>
    <servlet-class>org.apache.struts2.portlet.dispatcher.DispatcherServlet</servlet-class>
</servlet>

----------------------------------------

TITLE: Configuring ExecuteAndWaitInterceptor with Delay and Sleep Interval in Struts XML
DESCRIPTION: This XML snippet shows how to configure the ExecuteAndWaitInterceptor with both delay and delaySleepInterval parameters, allowing for periodic checks of the background process completion.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="completeStack"/>
    <interceptor-ref name="execAndWait">
        <param name="delay">1000</param>
        <param name="delaySleepInterval">50</param>
    </interceptor-ref>
    <result name="wait">longRunningAction-wait.jsp</result>
    <result name="success">longRunningAction-success.jsp</result>
</action>

----------------------------------------

TITLE: Logging Warning for Disallowed OGNL Expressions
DESCRIPTION: Example of a warning log message that may appear when an OGNL expression is disallowed by a pattern.

LANGUAGE: text
CODE:
Expression [so-and-so] isn't allowed by pattern [so-and-so]! See Accepted / Excluded patterns at
https://struts.apache.org/security/

----------------------------------------

TITLE: Implementing Password Input Field with Struts JSP Tag
DESCRIPTION: Example showing how to create a password input field using the Struts password tag. The label is retrieved from a resource bundle using ActionSupport's getText() method. The field has size and maxlength constraints.

LANGUAGE: jsp
CODE:
<s:password label="%{text('password')}" name="password" size="10" maxlength="15" />

----------------------------------------

TITLE: Displaying Specific Field Errors with Struts fielderror Tag in JSP
DESCRIPTION: This example demonstrates how to use the fielderror tag to display errors for specific fields (field1 and field2) in a Struts application.

LANGUAGE: jsp
CODE:
<s:fielderror>
     <s:param>field1</s:param>
     <s:param>field2</s:param>
</s:fielderror>
<s:form .... >
   ....
</s:form>

----------------------------------------

TITLE: Accessing Scopes from JSP Views
DESCRIPTION: Examples of accessing application, session, request and page scope attributes from JSP pages using OGNL expressions and Struts tags.

LANGUAGE: jsp
CODE:
<s:property value="#application.myId" />

<s:property value="#session.myId" />

<s:property value="#request.myId" />

<s:property value="#attr.myId" />

----------------------------------------

TITLE: Executing SiteGraph Plugin via Command Line in Struts
DESCRIPTION: This snippet demonstrates the command-line usage of the SiteGraph plugin. It specifies the required arguments including config directory, views directories, output directory, and optional namespace.

LANGUAGE: text
CODE:
java -cp ... -jar struts2-sitegraph-plugin-x.x.x.jar
     -config CONFIG_DIR
     -views VIEWS_DIRS
     -output OUTPUT
     [-ns NAMESPACE]

----------------------------------------

TITLE: Advanced Updownselect Tag Implementation in JSP
DESCRIPTION: Complex example demonstrating additional features including move up/down controls, select all functionality, and custom button labels.

LANGUAGE: jsp
CODE:
<s:updownselect
    list="defaultFavouriteCartoonCharacters"
    name="prioritisedFavouriteCartoonCharacters"
    headerKey="-1"
    headerValue="--- Please Order ---"
    emptyOption="true"
    allowMoveUp="true"
    allowMoveDown="true"
    allowSelectAll="true"
    moveUpLabel="Move Up"
    moveDownLabel="Move Down"
    selectAllLabel="Select All" />

----------------------------------------

TITLE: Class Reloading Configuration
DESCRIPTION: Web.xml configuration for enabling hot deployment of class changes.

LANGUAGE: xml
CODE:
<context-param>
   <param-name>contextClass</param-name>
   <param-value>org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext</param-value>
</context-param>

----------------------------------------

TITLE: Struts Action Configuration
DESCRIPTION: Example struts.xml configuration showing action definitions with Spring integration.

LANGUAGE: xml
CODE:
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
    <include file="struts-default.xml"/>

    <package name="default" extends="struts-default">
        <action name="foo" class="com.acme.Foo">
            <result>foo.ftl</result>
        </action>
    </package>

    <package name="secure" namespace="/secure" extends="default">
        <action name="bar" class="bar">
            <result>bar.ftl</result>
        </action>
    </package>
</struts>

----------------------------------------

TITLE: Defining Multiple Names for a Single Result in Struts
DESCRIPTION: Shows how to define multiple names for the same result in Struts 2.5 and later.

LANGUAGE: xml
CODE:
<action name="save">
    <result>success.jsp</result>
    <result name="error, input">input-form.jsp</result>
</action>

----------------------------------------

TITLE: Struts 2 Action Configuration
DESCRIPTION: XML configuration snippets showing action mappings for Welcome and Login actions with wildcards and validation.

LANGUAGE: xml
CODE:
<action name="*" class="tutorial2.example.ExampleSupport">
  <result>/example/{1}.jsp</result>
</action>

<action name="Login_*" method="{1}" class="tutorial2.example.Login">
  <result name="input">/example/Login.jsp</result>
  <result type="redirectAction">Menu</result>
</action>

----------------------------------------

TITLE: XSLT Template with Value Selection
DESCRIPTION: Example XSLT template showing how to access action properties using value-of select.

LANGUAGE: xml
CODE:
<xsl:template match="result">
  <html>
    <body>
      Hello <xsl:value-of select="username"/> how are you?
    </body>
  </html>
</xsl:template>

----------------------------------------

TITLE: Bind Tag with onClick Event
DESCRIPTION: Example of bind tag attached to onClick event of a submit button with loading indicator

LANGUAGE: xml
CODE:
<img id="indicator" src="${pageContext.request.contextPath}/images/indicator.gif" alt="Loading..." style="display:none"/>
<sx:bind id="ex1" href="%{#ajaxTest}" sources="button" targets="div1" events="onclick" indicator="indicator" />
<s:submit theme="simple" type="submit" value="submit" id="button"/>

----------------------------------------

TITLE: Configuring Multiple Struts 2 Actions with Conversion Examples
DESCRIPTION: This extensive XML snippet shows a complete Struts 2 configuration file that includes multiple actions demonstrating various conversion scenarios, including List and Set population, and Tiger 5 Enum usage. It provides a comprehensive example of Struts 2 action configuration.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
	"http://struts.apache.org/dtds/struts-2.5.dtd">
	
<struts>
	<package name="conversion" namespace="/conversion" extends="struts-default">
	
        <action name="index">
            <result>/WEB-INF/conversion/index.jsp</result>
        </action>
        
		<!-- Example populating a List inside an Action -->
		<action name="enterPersonsInfo" method="input"
				class="org.apache.struts2.showcase.conversion.PersonAction">
			<result>/WEB-INF/conversion/enterPersonInfo.jsp</result>
		</action>
		<action name="submitPersonInfo" method="submit"
				class="org.apache.struts2.showcase.conversion.PersonAction">
			<result>/WEB-INF/conversion/showPersonInfo.jsp</result>
			<result name="input">/WEB-INF/conversion/enterPersonInfo.jsp</result>
		</action>
		<action name="showPersonJspCode">
			<result type="plainText">/WEB-INF/conversion/enterPersonInfo.jsp</result>
		</action>
		<action name="showPersonActionJavaCode">
			<result type="plainText">/WEB-INF/conversion/PersonAction.java.txt</result>
		</action>
		<action name="showPersonJavaCode">
			<result type="plainText">/WEB-INF/conversion/Person.java.txt</result>
		</action>
		
		
		<!-- Example populating a Set inside an Action -->
		<action name="enterAddressesInfo" class="org.apache.struts2.showcase.conversion.AddressAction" method="input">
			<result>/WEB-INF/conversion/enterAddressInfo.jsp</result>
		</action>
		<action name="submitAddressesInfo" class="org.apache.struts2.showcase.conversion.AddressAction" method="submit">
			<result>/WEB-INF/conversion/showAddressInfo.jsp</result>
			<result name="input">/WEB-INF/conversion/enterAddressInfo.jsp</result>
		</action>
		<action name="showAddressJspCode">
			<result type="plainText">/WEB-INF/conversion/enterAddressInfo.jsp</result>
		</action>
		<action name="showAddressActionJavaCode">
			<result type="plainText">/WEB-INF/conversion/AddressAction.java.txt</result>
		</action>
		<action name="showAddressJavaCode">
			<result type="plainText">/WEB-INF/conversion/Address.java.txt</result>
		</action>
		
		
		<!-- Example populating a List with Tiger 5 Enum  -->		
		<action name="enterOperationEnumInfo" class="org.apache.struts2.showcase.conversion.OperationsEnumAction" method="input">
			<result>/WEB-INF/conversion/enterOperations.jsp</result>
		</action>
		<action name="submitOperationEnumInfo" class="org.apache.struts2.showcase.conversion.OperationsEnumAction" method="submit">
			<result>/WEB-INF/conversion/showOperations.jsp</result>
			<result name="input">/WEB-INF/conversion/enterOperations.jsp</result>
		</action>
		<action name="showEnumJspCode">
			<result type="plainText">/WEB-INF/conversion/enterOperations.jsp</result>
		</action>
		<action name="showOperationsEnumJavaCode">
			<result type="plainText">/WEB-INF/conversion/OperationsEnum.java.txt</result>
		</action>
		<action name="showOperationEnumActionJavaCode">
			<result type="plainText">/WEB-INF/conversion/OperationsEnumAction.java.txt</result>
		</action>
		<action name="showEnumTypeConverterJavaCode">
			<result type="plainText">/WEB-INF/conversion/EnumTypeConverter.java.txt</result>
		</action>
		<action name="showOperationsEnumActionConversionProperties">
			<result type="plainText">/WEB-INF/conversion/OperationsEnumActionConversion.txt</result>
		</action>
		
	</package>
</struts>	

----------------------------------------

TITLE: Complex Ajax Div Initialization with Action Tag in HTML
DESCRIPTION: Illustrates how to use the action tag with executeResult attribute for more complex initial data loading.

LANGUAGE: html
CODE:
<saf:div theme="ajax" id="weather" href="http://www.weather.com/weather?zip=97239">
    <ww:action id="weather" name="weatherBean" executeResult="true">
        <ww:param name="zip" value="97239"/>
    </ww:action>
</saf:div>

----------------------------------------

TITLE: Improved Hidden Input Code with Static Imports in Java
DESCRIPTION: Demonstrates code improvement using static imports for better readability

LANGUAGE: java
CODE:
a.add("type", "hidden")
 .add("id", "__multiselect_" + defaultString(escapeHtml4(id)));

----------------------------------------

TITLE: Cloning Apache Struts Repository for Non-committers
DESCRIPTION: Command for non-committers to clone the Apache Struts repository from Apache GitBox.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/struts.git

----------------------------------------

TITLE: Excluding specific URLs from Struts 2 processing in struts.xml
DESCRIPTION: This snippet demonstrates how to exclude specific URL patterns from being processed by the Struts 2 filter using the struts.action.excludePattern constant in struts.xml.

LANGUAGE: xml
CODE:
<struts>
    <constant name="struts.action.excludePattern" value=".*unfiltered.*,.*\.nofilter"/>
    ...

</struts>

----------------------------------------

TITLE: Basic Maven Archetype Generation
DESCRIPTION: Basic command to list available Struts archetypes using Maven's archetype:generate goal with a filter.

LANGUAGE: bash
CODE:
mvn archetype:generate -Dfilter=org.apache:struts

----------------------------------------

TITLE: XSLT Result with Exposed Value
DESCRIPTION: Configuration example showing how to expose specific action properties using OGNL expressions.

LANGUAGE: xml
CODE:
<result name="success" type="xslt">
  <param name="stylesheetLocation">foo.xslt</param>
  <param name="exposedValue">${user}</param>
</result>

----------------------------------------

TITLE: Adding PreResultListener in a Struts Interceptor (Java)
DESCRIPTION: Shows how to add a PreResultListener within an Interceptor class. The listener is added in the intercept method and can perform operations before the Result execution.

LANGUAGE: java
CODE:
public class MyInterceptor extends AbstractInterceptor {
     ...
      public String intercept(ActionInvocation invocation) throws Exception {
         invocation.addPreResultListener(new PreResultListener() {
              public void beforeResult(ActionInvocation invocation, 
                                       String resultCode) {
                  // perform operation necessary before Result execution
              }
         });
      }
     ...
  }

----------------------------------------

TITLE: Using errorNotifyTopics and Indicator with Dojo Anchor in Struts 2
DESCRIPTION: This example demonstrates how to use the errorNotifyTopics attribute to subscribe to a topic that is published when an error occurs, and how to display a loading indicator.

LANGUAGE: XML
CODE:
<script type="text/javascript">
dojo.event.topic.subscribe("/error", function(error, request, widget){
    alert('inside a topic event. on error');
    //error : error object (error.message has the error message)
    //request: XMLHttpRequest object
    //widget: widget that published the topic
});
</script>         

<img id="ind1" src="${pageContext.request.contextPath}/images/indicator.gif" style="display:none"/>
<sx:a errorNotifyTopics="/error" indicator="ind1" href="%{#ajaxTest}">Publish topics</sx:a>

----------------------------------------

TITLE: Boolean Attribute Handling in Struts Select
DESCRIPTION: Demonstrates various ways to handle boolean attributes in Struts tags, including direct values and expressions.

LANGUAGE: html
CODE:
<s:select key="state.label" name="state" multiple="true"/>

LANGUAGE: html
CODE:
<s:select key="state.label" name="state" multiple="%{true}"/>

LANGUAGE: html
CODE:
<s:select key="state.label" name="state" multiple="allowMultiple"/>

LANGUAGE: html
CODE:
<s:select key="state.label" name="state" multiple="%{allowMultiple}"/>

----------------------------------------

TITLE: Background Color Examples
DESCRIPTION: Examples showing how to apply different background colors using CSS classes

LANGUAGE: markdown
CODE:
Background primary
{:.bg-primary}

Background info
{:.bg-info}

Background success
{:.bg-success}

Background warning
{:.bg-warning}

Background danger
{:.bg-danger}

----------------------------------------

TITLE: Adding Dynamic Attributes to Struts optiontransferselect Tag in JSP
DESCRIPTION: Demonstrates how to add dynamic attributes to the right control generated by the optiontransferselect tag using the 'right-' prefix.

LANGUAGE: jsp
CODE:
<s:ioptiontransferselect ... right-control-id="id2"/>

----------------------------------------

TITLE: Using Expression for Label in Struts Input Field
DESCRIPTION: Shows how to use key attribute to set a dynamic label from resource bundle for a text field.

LANGUAGE: html
CODE:
<s:textfield key="postalCode.label" name="postalCode"/>

----------------------------------------

TITLE: Configuring Custom Pattern Separator for Request Exclusions
DESCRIPTION: XML configuration to set a custom separator for exclusion patterns and define patterns using that separator.

LANGUAGE: xml
CODE:
<constant name="struts.action.excludePattern.separator" value="//"/>
<constant name="struts.action.excludePattern" value="/some/[a-zA-Z]{1,10}.json///other/content/.*"/>

----------------------------------------

TITLE: HTML Submit Input Type Example
DESCRIPTION: Example of submit tag rendering as an HTML input element of type submit

LANGUAGE: html
CODE:
<input type="submit"...>

----------------------------------------

TITLE: Rendering Action Messages using Struts Tag in JSP
DESCRIPTION: Example showing how to use the actionmessage tag within a Struts form context. The tag renders any existing action messages using the current theme's layout, with empty messages being ignored and content being HTML escaped by default.

LANGUAGE: jsp
CODE:
    <s:actionmessage />
    <s:form .... >
       ....
    </s:form>

----------------------------------------

TITLE: Extending AJAX Theme Control Header in FreeMarker
DESCRIPTION: FreeMarker template for AJAX theme's controlheader.ftl that handles label rendering and client-side validation setup. It adds onblur validation events to form controls when validation is enabled.

LANGUAGE: ftl
CODE:
<#if parameters.label?if_exists != "">
	<#include "/${parameters.templateDir}/xhtml/controlheader.ftl" />
</#if>
<#if parameters.form?exists && parameters.form.validate?default(false) == true>
	<#-- can't mutate the data model in freemarker -->
    <#if parameters.onblur?exists>
        ${tag.addParameter('onblur', "validate(this);${parameters.onblur}")}
    <#else>
        ${tag.addParameter('onblur', "validate(this);")}>
    </#if>
</#if>

----------------------------------------

TITLE: Rendering a Textfield in Struts JSP
DESCRIPTION: This example demonstrates how to render a text control for the 'user' property using the Struts textfield tag. The label for the field is retrieved from a ResourceBundle using the 'key' attribute.

LANGUAGE: jsp
CODE:
<s:textfield key="user" />

----------------------------------------

TITLE: Configuring CeWolf Servlet in web.xml
DESCRIPTION: XML configuration to add the CeWolf servlet and its mapping to the web.xml file. This is required for CeWolf to handle chart rendering requests.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>CewolfServlet</servlet-name>
    <servlet-class>de.laures.cewolf.CewolfRenderer</servlet-class>
</servlet>

<servlet-mapping>
    <servlet-name>CewolfServlet</servlet-name>
    <url-pattern>/cewolf/*</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Minimum Example of Struts optiontransferselect Tag in JSP
DESCRIPTION: Shows a basic implementation of the optiontransferselect tag with essential attributes like label, name, list, doubleName, and doubleList.

LANGUAGE: jsp
CODE:
<s:optiontransferselect
     label="Favourite Cartoons Characters"
     name="leftSideCartoonCharacters"
     list="{'Popeye', 'He-Man', 'Spiderman'}"
     doubleName="rightSideCartoonCharacters"
     doubleList="{'Superman', 'Mickey Mouse', 'Donald Duck'}"
 />

----------------------------------------

TITLE: Registering Tiles Listener in web.xml
DESCRIPTION: This XML snippet demonstrates how to register the Tiles listener in the web.xml file of a Struts 2 application. It specifies the listener class for the CompleteAutoloadTilesListener.

LANGUAGE: xml
CODE:
<listener>
    <listener-class>org.apache.tiles.extras.complete.CompleteAutoloadTilesListener</listener-class>
</listener>

----------------------------------------

TITLE: Setting Chaining Behavior in Struts Configuration (XML)
DESCRIPTION: Example of how to configure the Chaining Interceptor to copy Action Errors during chaining using a constant in struts.xml or struts.properties.

LANGUAGE: xml
CODE:
<constant name="struts.xwork.chaining.copyErrors" value="true"/>

----------------------------------------

TITLE: Using Struts Set Tag in JSP
DESCRIPTION: Examples showing two ways to use the set tag: one assigning a value from an expression, and another using body content to set the value. The first example sets a person's name from a person object, while the second directly sets a string value.

LANGUAGE: jsp
CODE:
<s:set var="personName" value="person.name"/>
Hello, <s:property value="#personName"/>

<s:set var="janesName">Jane Doe</s:set>
<s:property value="#janesName"/>

----------------------------------------

TITLE: Adding Spring Plugin Dependency in Maven POM
DESCRIPTION: This XML snippet shows how to add the Struts Spring Plugin dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-spring-plugin</artifactId>
    <version>STRUTS_VERSION</version>
</dependency>

----------------------------------------

TITLE: Defining Core Struts Velocity Macros
DESCRIPTION: A collection of essential Velocity macros for Struts integration, including bean creation, servlet inclusion, URL generation, and property access. These macros simplify common operations in Struts-based Velocity templates.

LANGUAGE: velocity
CODE:
#macro(bean $bean_name $name)
   #set ($name = $action.bean($bean_name))
#end

#macro(includeservlet $name)
  $action.include($name,$req,$res)
#end

#macro(url $name)
   #set ($name = $action.bean("org.apache.struts.util.URLBean"))
   $name.setRequest($req)
   $name.setResponse($res)
#end

#macro(property $object $property)
$!{ognl.findValue($property, $object)}
#end

----------------------------------------

TITLE: Static Tree Construction in Struts2
DESCRIPTION: Example of constructing a static tree structure using nested treenode elements with defined IDs and labels.

LANGUAGE: xml
CODE:
<s:tree id="..." label="...">
    <s:treenode id="..." label="..." />
    <s:treenode id="..." label="...">
        <s:treenode id="..." label="..." />
        <s:treenode id="..." label="..." />
    </s:treenode>
    <s:treenode id="..." label="..." />
</s:tree>

----------------------------------------

TITLE: Basic Action Tag Usage in JSP
DESCRIPTION: Examples of action tag usage including result execution and method invocation

LANGUAGE: jsp
CODE:
<s:action name="actionTagAction" executeResult="true" />

LANGUAGE: jsp
CODE:
<s:action name="actionTagAction!specialMethod" executeResult="true" />

LANGUAGE: jsp
CODE:
<s:action name="actionTagAction!default" executeResult="false" />
<s:property value="#attr.stringByAction" />

----------------------------------------

TITLE: ValueStack Index Access
DESCRIPTION: Demonstrates how to access specific objects in the ValueStack using index notation to resolve naming conflicts.

LANGUAGE: ognl
CODE:
[0].name   // call to animal.getName()
[1].name   // call to person.getName()

----------------------------------------

TITLE: Context Placement Example in JSP
DESCRIPTION: Demonstrates how action tag evaluation affects variable accessibility inside and outside the tag scope

LANGUAGE: jsp
CODE:
<s:action var="myAction" name="MyAction" namespace="/">
    Is "myAction" null inside the tag? <s:property value="#myAction == null" />
</s:action>
    Is "myAction" null outside the tag? <s:property value="#myAction == null" />

----------------------------------------

TITLE: XML Standard Cache Configuration
DESCRIPTION: XML configuration for setting expression and BeanInfo caches to size 1250 with standard cache mode.

LANGUAGE: xml
CODE:
<!-- Set expression and BeanInfo caches to size 1250 with standard cache mode -->
<constant name="struts.ognl.enableExpressionCache" value="true"/>
<constant name="struts.ognl.expressionCacheMaxSize" value="1250"/>
<constant name="struts.ognl.expressionCacheLRUMode" value="false"/>
<constant name="struts.ognl.beanInfoCacheMaxSize" value="1250"/>
<constant name="struts.ognl.beanInfoCacheLRUMode" value="false"/>

----------------------------------------

TITLE: Partial List Iteration in JSP
DESCRIPTION: This snippet demonstrates how to iterate over a partial list using the iterator tag. It uses the begin and end attributes to define a subset of the list to iterate over.

LANGUAGE: jsp
CODE:
<s:iterator value="{1,2,3,4,5}" begin="2" end="4" >
   <!-- current iteration value (2,3,4) -->
   <s:property value="top" />
</s:iterator>

----------------------------------------

TITLE: Configuring Maven Settings for Apache Struts Distribution
DESCRIPTION: This XML snippet demonstrates the configuration of Maven settings.xml file, including server credentials and GPG passphrase for Apache Struts distribution creation and signing.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
    <!-- To publish a snapshot of some part of Maven -->
    <server>
      <id>apache.snapshots.https</id>
      <username> <!-- YOUR APACHE LDAP USERNAME --> </username>
      <password> <!-- YOUR APACHE LDAP PASSWORD --> </password>
    </server>
    <!-- To stage a release of some part of Maven -->
    <server>
      <id>apache.releases.https</id>
      <username> <!-- YOUR APACHE LDAP USERNAME --> </username>
      <password> <!-- YOUR APACHE LDAP PASSWORD --> </password>
    </server>
  </servers>
  <profiles>
    <profile>
      <id>apache-release</id>
      <properties>
        <gpg.passphrase> <!-- YOUR KEY PASSPHRASE --> </gpg.passphrase>
      </properties>
    </profile>
  </profiles>
</settings>

----------------------------------------

TITLE: Struts Configuration XML
DESCRIPTION: XML configuration showing action mappings with different methods and results

LANGUAGE: xml
CODE:
<struts>
      ....
     <action name="actionTagAction1" class="tmjee.testing.ActionTagAction">
         <result name="done">success.jsp</result>
     </action>
      <action name="actionTagAction2" class="tmjee.testing.ActionTagAction" method="default">
         <result name="done">success.jsp</result>
     </action>
      ....
   </struts>

----------------------------------------

TITLE: Configuring COEP Interceptor in Struts XML
DESCRIPTION: This snippet demonstrates how to configure the COEP interceptor within a Struts action. It shows the usage of exemptedPaths, enforcingMode, and disabled parameters.

LANGUAGE: xml
CODE:
<action  name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="defaultStack">
        <param name="coep.exemptedPaths">/path1,/path2,/path3</param>
        <param name="coep.enforcingMode">false</param>
        <param name="coep.disabled">false</param>
    </interceptor-ref>
    <result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Configuring Action File Upload Interceptor in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure an action mapping with the Action File Upload Interceptor. It shows the basic setup for handling file uploads in a Struts action.

LANGUAGE: xml
CODE:
 <action name="doUpload" class="com.example.UploadAction">
     <interceptor-ref name="actionFileUpload"/>
     <interceptor-ref name="basicStack"/>
     <result name="success">good_result.jsp</result>
 </action>

----------------------------------------

TITLE: Role-based Logic Implementation in Struts
DESCRIPTION: Demonstrates the logical implementation of role checking combining allowed and disallowed roles. The code shows how multiple role conditions are evaluated with both positive and negative checks.

LANGUAGE: text
CODE:
  (if ((inRole(role1) || inRole(role2) || ... inRole(roleN)) &&
       !inRole(roleA) && !inRole(roleB) && ... !inRole(roleZ))
  { //permit ...

----------------------------------------

TITLE: Accessing Parameters without Scope
DESCRIPTION: Shows different ways to access passed parameters in the included page without specifying scope.

LANGUAGE: jsp
CODE:
<s:set var="param2">${param.param2}</s:set>
<s:property value="param2"/>

<s:property value="#attr.param2"/>
<s:property value="#param2"/>

----------------------------------------

TITLE: Creating a Form with FreeMarker Tags in Struts
DESCRIPTION: Shows how to create the same form as the JSP example, but using FreeMarker syntax with Struts tags.

LANGUAGE: ftl
CODE:
<@s.form action="updatePerson">
    <@s.textfield label="First name" name="firstName"/>
    <@s.submit value="Update"/>
</@s.form>

----------------------------------------

TITLE: Configuring Postback Result in Struts XML
DESCRIPTION: Examples of how to configure the Postback Result type in Struts XML configuration. The first example shows a simple configuration with an external URL, while the second demonstrates using internal action references with namespace and action name parameters.

LANGUAGE: xml
CODE:
<action name="registerThirdParty" >
    <result type="postback">https://www.example.com/register</result>
</action>

<action name="registerThirdParty" >
    <result type="postback">
        <param name="namespace">/secure</param>
        <param name="actionName">register2</param>
    </result>
</action>

----------------------------------------

TITLE: Subscribing to Events with Dojo in JavaScript
DESCRIPTION: Demonstrates how to subscribe to a named topic using Dojo's event system. The subscription requires a function to handle received events and can optionally be bound to a specific JavaScript object context.

LANGUAGE: javascript
CODE:
function doSomethingWithEvent(data) {
...
}

dojo.event.topic.getTopic("topic_name").subscribe(null, "doSomethingWithEvent");

----------------------------------------

TITLE: Struts 2 Form with Text Input
DESCRIPTION: Struts 2 form tags that create a simple form with a text input field for the user's name and a submit button.

LANGUAGE: xml
CODE:
<s:form action="hello">
    <s:textfield name="userName" label="Your name" />
    <s:submit value="Submit" />
</s:form>

----------------------------------------

TITLE: Accessing Session Scope Attribute
DESCRIPTION: JSP code snippet showing how to access attributes stored in Session scope using Struts tags.

LANGUAGE: jsp
CODE:
<s:property value="%{#session.mySessionAttribute}" />

----------------------------------------

TITLE: Implementing Color Selection Combobox in JSP
DESCRIPTION: Creates a combobox for selecting colors using a map structure for key-value pairs with header option. Shows how to use map-based lists.

LANGUAGE: jsp
CODE:
<s:combobox
   label="My Favourite Color"
   name="myFavouriteColor"
   list="#{'red':'red','green':'green','blue':'blue'}"
   headerKey="-1"
   headerValue="--- Please Select ---"
   emptyOption="true"
   value="green" />

----------------------------------------

TITLE: Configuring Non-Field Validator in Struts XML
DESCRIPTION: XML configuration for non-field validation that ensures all three text fields contain exactly the same value using expression validator.

LANGUAGE: xml
CODE:
<validators>
    <validator type="expression">
        <param name="expression">
            <![CDATA[ ( (someText == someTextRetype) && (someTextRetype == someTextRetypeAgain) ) ]]></param>
        <message><![CDATA[ all three text must be exactly the same ]]></message>
    </validator>
</validators>

----------------------------------------

TITLE: Rendering Hidden Input with Dynamic Value in JSP with Struts
DESCRIPTION: Shows how to use the Struts hidden tag with a dynamic value. The value is set using an OGNL expression that calls the 'getBar' method of the action.

LANGUAGE: jsp
CODE:
<s:hidden name="foo" value="%{bar}" />

LANGUAGE: jsp
CODE:
<input type="hidden" name="foo" value="bar" />

----------------------------------------

TITLE: Configuring Chart Action in Struts XML
DESCRIPTION: XML configuration example showing how to set up a chart action in struts.xml with width and height parameters.

LANGUAGE: xml
CODE:
<action name="viewModerationChart" class="myapp.actions.ViewModerationChartAction">
  <result name="success" type="chart">
    <param name="width">400</param>
    <param name="height">300</param> 
  </result>
</action>

----------------------------------------

TITLE: Dynamic Date/Time Picker Implementation
DESCRIPTION: Examples of implementing date and time picker widgets with various configuration options.

LANGUAGE: jsp
CODE:
<sx:datetimepicker name="picker" />
<sx:datetimepicker type="time" name="picker" />

----------------------------------------

TITLE: Creating the Index JSP with Struts 2 URL Action
DESCRIPTION: This JSP file serves as the entry point for the Struts 2 application. It includes a link that triggers the 'hello' action when clicked.

LANGUAGE: jsp
CODE:
<!DOCTYPE html>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib prefix="s" uri="/struts-tags" %>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Basic Struts 2 Application - Welcome</title>
    </head>
    <body>
        <h1>Welcome To Struts 2!</h1>
        <p><a href="<s:url action='hello'/>">Hello World</a></p>
    </body>
</html>

----------------------------------------

TITLE: Adding Convention Plugin Dependency in Maven POM
DESCRIPTION: XML snippet showing how to add the Struts 2 Convention plugin dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.struts</groupId>
    <artifactId>struts2-convention-plugin</artifactId>
    <version>X.X.X.X</version>
</dependency>

----------------------------------------

TITLE: Defining Date and Number Formats in Properties Files for Struts2
DESCRIPTION: These snippets show how to define message formats for time, number, percent, and currency in default properties file, as well as locale-specific date formats for en_US and de_DE.

LANGUAGE: properties
CODE:
format.time = {0,time}
format.number = {0,number,#0.0##}
format.percent = {0,number,##0.00'%'}
format.money = {0,number,\u00A4##0.00}

LANGUAGE: properties
CODE:
format.date = {0,date,MM/dd/yy}

LANGUAGE: properties
CODE:
format.date = {0,date,dd.MM.yyyy}

----------------------------------------

TITLE: Ajax-Loaded Dynamic Tree Implementation
DESCRIPTION: Example demonstrating dynamic tree loading via Ajax with node expansion and JSON response handling.

LANGUAGE: xml
CODE:
<s:url id="nodesUrl" namespace="/nodecorate" action="getNodes" />
<div style="float:left; margin-right: 50px;">
    <sx:tree id="tree" href="%{#nodesUrl}" />
</div>

----------------------------------------

TITLE: Struts Form Implementation with Integer Field
DESCRIPTION: HTML form implementation showing text field that accepts integer input.

LANGUAGE: html
CODE:
<!-- myJspPage.jsp -->
<s:form action="someAction" method="POST">
  ....
  <s:textfield label="My Integer Field" name="myIntegerField" />
  ....
  <s:submit />
</s:form>

----------------------------------------

TITLE: Defining Person Class for JasperReports Data in Java
DESCRIPTION: This code defines a simple Person POJO class with id, name, and lastName properties. It includes constructors and getter/setter methods for use in the JasperReports data source.

LANGUAGE: java
CODE:
package com.acme.test;

public class Person {

    private Long id;
    private String name;
    private String lastName;

    public Person() {
    }

    public Person(String name, String lastName) {
        this.name = name;
        this.lastName = lastName;
    }

    public Person(Long id, String name, String lastName) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

----------------------------------------

TITLE: Basic Struts Ajax Page Setup
DESCRIPTION: Initial JSP setup required for using Struts Ajax tags with necessary taglib declarations and URL configuration.

LANGUAGE: jsp
CODE:
<%@ taglib prefix="s" uri="/struts-tags" %>
<%@ taglib prefix="sx" uri="/struts-dojo-tags" %>

<head>
    <sx:head />
</head>

<s:url id="url" value="/MyAction.action" />

----------------------------------------

TITLE: Configuring Struts 2 Action for JasperReports in XML
DESCRIPTION: This Struts 2 configuration XML defines the action and result for generating the JasperReports PDF. It specifies the action class, the jasper result type, and parameters for the report generation.

LANGUAGE: xml
CODE:
<package name="default" namespace="/" extends="jasperreports-default">
    <action name="myJasperTest" class="com.acme.test.action.JasperAction">
        <result name="success" type="jasper">
            <param name="location">/jasper/our_compiled_template.jasper</param>
            <param name="dataSource">myList</param>
            <param name="format">PDF</param>
        </result>
    </action>
</package>

----------------------------------------

TITLE: Configuring Static Parameters Interceptor in Struts XML
DESCRIPTION: This XML snippet demonstrates how to configure the Static Parameters Interceptor for an action in Struts. It shows the use of interceptor-ref with parameters for parsing and overwriting, as well as defining a success result.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="staticParams">
          <param name="parse">true</param>
          <param name="overwrite">false</param>
     </interceptor-ref>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Basic Bind Tag Example with Parent Div
DESCRIPTION: Example showing how to handle IE6/IE7 bug with parent div by using showLoadingText=false and external loading indicator

LANGUAGE: jsp
CODE:
<img id="loadingImage" src="images/loadingAnimation.gif" style="display:none"/>
<s:div id="parentDiv">
    <s:form action="actionName">
        <s:submit id="btn" />
        <sx:bind sources="btn" events="onclick" targets="parentDiv" showLoadingText="false" indicator="loadingImage"/>
    </s:form>
</s:div>

----------------------------------------

TITLE: Configuring Result Types with Default Parameters in Struts XML
DESCRIPTION: Examples of how to configure result types using default parameters in Struts XML, showing both shorthand and expanded syntax.

LANGUAGE: xml
CODE:
<result type="freemarker">foo.fm</result>

LANGUAGE: xml
CODE:
<result type="freemarker">
  <param name="location">foo.vm</param>
</result>

----------------------------------------

TITLE: Simplified Struts Form Field - FreeMarker
DESCRIPTION: Shows simplified form field implementation without explicit value attribute, demonstrating automatic value resolution from the name attribute.

LANGUAGE: ftl
CODE:
<@s.form action="updateAddress">
    <@s.textfield label="Postal Code" name="postalCode"/>
    ...
</@s.form>

----------------------------------------

TITLE: Basic JSP Include Example - Who.jsp
DESCRIPTION: Simple JSP file demonstrating basic content that will be included by another JSP.

LANGUAGE: jsp
CODE:
Hello there, I am the Doctor.

----------------------------------------

TITLE: Extending Result Types in Java
DESCRIPTION: Example of how to extend existing result types in Java by implementing the ParamNameAwareResult interface.

LANGUAGE: java
CODE:
public class MyResult extends ServletDispatcherResult implements ParamNameAwareResult {

    public boolean acceptableParamName(String name, String value) {
        return "accept".equals(name);
    }

}

----------------------------------------

TITLE: Bind Tag with Topic Listening
DESCRIPTION: Demonstrates bind tag usage without event attachment, listening to a topic for making AJAX calls

LANGUAGE: xml
CODE:
<sx:bind href="%{#ajaxTest}" listenTopics="/makecall"/>
<s:submit onclick="dojo.event.topic.publish('/makecall')"/>

----------------------------------------

TITLE: Configuring Velocity Macro Libraries in Properties File
DESCRIPTION: Configuration snippet showing how to specify Velocity macro libraries in velocity.properties. The file should be placed in the classpath (e.g., /WEB-INF/classes) for Velocity to load it automatically.

LANGUAGE: properties
CODE:
# Velocity Macro libraries.
velocimacro.library = action-default.vm, tigris-macros.vm, myapp.vm

----------------------------------------

TITLE: Configuring Interceptor Stack to Exclude Parameters in Struts 2 XML
DESCRIPTION: This XML configuration sets up a custom interceptor stack that excludes specific parameters from being processed by the Struts 2 framework. It demonstrates how to add the 'submit' parameter to the list of excluded parameters.

LANGUAGE: xml
CODE:
<interceptors>
    <interceptor-stack name="appDefault">
        <interceptor-ref name="defaultStack">
            <param name="exception.logEnabled">true</param>
            <param name="exception.logLevel">ERROR</param>
            <param name="params.excludeParams">dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*,submit</param>
        </interceptor-ref>
    </interceptor-stack>
</interceptors>
		
<default-interceptor-ref name="appDefault" />

----------------------------------------

TITLE: Formatting Date Output Using s:text Tag in Struts2 JSP
DESCRIPTION: This example shows how to format a date value in a JSP file using the s:text tag and a predefined date format.

LANGUAGE: jsp
CODE:
<s:text name="format.date"><s:param value="dueDate"/></s:text>

----------------------------------------

TITLE: JavaScript Interaction Example
DESCRIPTION: Example showing how to interact with autocompleter using JavaScript

LANGUAGE: xml
CODE:
<sx:autocompleter  href="%{jsonList}" id="auto"/>
 <script type="text/javascript">
   function getValues() {
      var autoCompleter = dojo.widget.byId("auto");
      
      //key (in the states example above, "AL")
      var key = autoCompleter.getSelectedKey();
      alert(key);
      
      //value (in the states example above, "Alabama")
      var value = autoCompleter.getSelectedValue();
      alert(value);
      
      //text currently on the textbox (anything the user typed)
      var text = autoCompleter.getText();
      alert(text);
   }
 
   function setValues() {
      var autoCompleter = dojo.widget.byId("auto");
      
      //key (key will be set to "AL" and value to "Alabama")
      autoCompleter.setSelectedKey("AL");
      
      //value (key will be set to "AL" and value to "Alabama")
      autoCompleter.setAllValues("AL", "Alabama");
   }
 </script>

----------------------------------------

TITLE: Configuring Velocity Result in Struts XML
DESCRIPTION: This snippet demonstrates how to configure a Velocity Result in Struts XML configuration. It sets the result name to 'success', specifies the result type as 'velocity', and defines the location parameter pointing to the Velocity template file 'foo.vm'.

LANGUAGE: xml
CODE:
<result name="success" type="velocity">

    <param name="location">foo.vm</param>

</result>

----------------------------------------

TITLE: Autocompleter with Static List
DESCRIPTION: Example showing autocompleter using a static list of values

LANGUAGE: xml
CODE:
<s:autocompleter name="test"  list="{'apple','banana','grape','pear'}" autoComplete="false"/>

----------------------------------------

TITLE: Initial Maven Project Setup Command
DESCRIPTION: Command to create a new Struts 2 portlet project using Maven archetype

LANGUAGE: text
CODE:
mvn archetype:create -DarchetypeGroupId=org.apache.struts -DarchetypeArtifactId=struts2-archetype-portlet -DarchetypeVersion=2.1.1-SNAPSHOT -DartifactId=bookmark-portlet -DgroupId=com.mycompany -DremoteRepositories=http://people.apache.org/repo/m2-snapshot-repository

----------------------------------------

TITLE: Defining URL Format for RestfulActionMapper in Struts
DESCRIPTION: Demonstrates the URL format used by RestfulActionMapper, allowing for flexible parameter passing in RESTful style URLs.

LANGUAGE: plaintext
CODE:
http://HOST/ACTION_NAME/PARAM_NAME1/PARAM_VALUE1/PARAM_NAME2/PARAM_VALUE2

----------------------------------------

TITLE: Rendering CeWolf Chart using Velocity Template
DESCRIPTION: Velocity template code for rendering a CeWolf chart. This is the Velocity equivalent of the JSP tags, using WebWork's tag libraries to create a line chart of page view statistics.

LANGUAGE: velocity
CODE:
#set( $pageViews = $stack.findValue("new com.PageViewCountData()") )
$req.session.setAttribute("pageViews", $pageViews ) 

#bodytag( SimpleChart "id=line" "title=Page View Statistics" "type=line" "xaxislabel=Page" "yaxslabel=Views" )
  #bodytag( Data )
    #tag( Producer "id=pageViews" )
  #end
#end

#tag( ChartImg "chartid=line" "renderer=cewolf" "width=400" "height=300" )

----------------------------------------

TITLE: Struts Action Configuration
DESCRIPTION: XML configuration for Struts action mapping and result definitions.

LANGUAGE: xml
CODE:
<struts>
....
    <package name="myPackage" extends="struts-default">
      ....
      <action name="someAction" class="example.MyActionSupport.java">
         <result name="input">myJspPage.jsp</result>
         <result>success.jsp</result>
      </action>
      ....
    </package>
....
</struts>

----------------------------------------

TITLE: CSS XHTML Theme Stylesheet
DESCRIPTION: CSS styling rules for the XHTML theme, defining layout and appearance for form elements and validation messages.

LANGUAGE: css
CODE:
<#include "/${parameters.templateDir}/css_xhtml/styles-core.css" />

----------------------------------------

TITLE: Basic Struts Form Validation in JSP
DESCRIPTION: Demonstrates basic form validation setup using the validate attribute in a Struts form tag. The form requires a name attribute, otherwise the action mapping name will be used.

LANGUAGE: jsp
CODE:
<s:form name="test" action="javascriptValidation" validate="true">
  ...
</s:form>

----------------------------------------

TITLE: Implementing a Simple Struts Action in Java
DESCRIPTION: This Java code defines a basic Struts action class that extends ActionSupport and includes a getter and setter for a 'name' property.

LANGUAGE: java
CODE:
public class TestAction extends ActionSupport {
    private String name;

    public String getName() {
        return name;
    }

    @StrutsParameter
    public void setName(String name) {
        this.name = name;
    }
}

----------------------------------------

TITLE: Using I18n Tag in Struts
DESCRIPTION: Example of using i18n tag to push a resource bundle onto the value stack.

LANGUAGE: xml
CODE:
<s:i18n name="some.package.bundle">
  <s:text name="some.key" />
</s:i18n>

----------------------------------------

TITLE: Convention Archetype Generation
DESCRIPTION: Command to generate a new Struts 2 project using the convention archetype, which includes convention-based validation and Google AppEngine support.

LANGUAGE: bash
CODE:
mvn archetype:generate -B -DgroupId=com.mycompany.mysystem \
                          -DartifactId=myWebApp \
                          -DarchetypeGroupId=org.apache.struts \
                          -DarchetypeArtifactId=struts2-archetype-convention

----------------------------------------

TITLE: JavaScript AJAX Validation Handler
DESCRIPTION: Client-side JavaScript code for handling form submission, AJAX requests, and validation error display.

LANGUAGE: javascript
CODE:
function ajaxFormValidation(event) {
    event.preventDefault();
    _removeValidationErrors();
    // ... [full code omitted for brevity]
}

----------------------------------------

TITLE: Creating a Form with JSP Tags in Struts
DESCRIPTION: Demonstrates how to create a form using Struts tags in a JSP file. The form includes a text field for the first name and a submit button.

LANGUAGE: jsp
CODE:
<s:form action="updatePerson">
    <s:textfield label="First name" name="firstName"/>
    <s:submit value="Update"/>
</s:form>

----------------------------------------

TITLE: Implementing MergeIteratorTag Action in Java
DESCRIPTION: Example action class that creates three ArrayList objects with different elements to demonstrate the merge tag functionality. The lists contain numbers, lowercase letters, and uppercase letters respectively.

LANGUAGE: java
CODE:
public class MergeIteratorTagAction extends ActionSupport {

    private List myList1;
    private List myList2;
    private List myList3;
    
    public List getMyList1() {
        return myList1;
    }
    
    public List getMyList2() {
        return myList2;
    }
    
    public List getMyList3() {
        return myList3;
    }
    
    
    public String execute() throws Exception {
        myList1 = new ArrayList();
        myList1.add("1");
        myList1.add("2");
        myList1.add("3");
    
        myList2 = new ArrayList();
        myList2.add("a");
        myList2.add("b");
        myList2.add("c");
    
        myList3 = new ArrayList();
        myList3.add("A");
        myList3.add("B");
        myList3.add("C");
    
        return "done";
    }
}

----------------------------------------

TITLE: Adding Convention Plugin Support Constant for Glassfish 2.x in XML
DESCRIPTION: This XML snippet adds a constant to the struts.xml file to enable proper support for the Convention Plugin in Glassfish 2.x when the application is packaged as an EAR archive. It sets the 'struts.convention.exclude.parentClassLoader' constant to 'false'.

LANGUAGE: xml
CODE:
<constant name="struts.convention.exclude.parentClassLoader" value="false" />

----------------------------------------

TITLE: Maven Repository Configuration
DESCRIPTION: XML configuration for adding the Apache staging repository to Maven settings.xml for accessing snapshot versions.

LANGUAGE: xml
CODE:
<settings>
  <profiles>
    <profile>
      <id>staging</id>
      <repositories>
        <repository>
          <id>archetype</id>
          <url>https://repository.apache.org/content/repositories/snapshots/</url>
          <releases>
            <enabled>true</enabled>
            <checksumPolicy>fail</checksumPolicy>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <checksumPolicy>warn</checksumPolicy>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>
</settings>

----------------------------------------

TITLE: Topic Publishing Example
DESCRIPTION: Shows how to configure the DateTimePicker to publish topics when its value changes and handle those events with JavaScript.

LANGUAGE: xml
CODE:
<sx:datetimepicker id="picker" label="Order Date" valueNotifyTopics="/value"/>

<script type="text/javascript">
dojo.event.topic.subscribe("/value", function(textEntered, date, widget){
    alert('value changed');
    //textEntered: String enetered in the textbox
    //date: JavaScript Date object with the value selected
    //widet: widget that published the topic 
});
</script>

----------------------------------------

TITLE: Basic Updownselect Tag Implementation in JSP
DESCRIPTION: Simple example showing basic usage of updownselect tag with a map of countries. Includes a header value and empty option setting.

LANGUAGE: jsp
CODE:
<s:updownselect
    list="#{'england':'England', 'america':'America', 'germany':'Germany'}"
    name="prioritisedFavouriteCountries"
    headerKey="-1"
    headerValue="--- Please Order Them Accordingly ---"
    emptyOption="true" />

----------------------------------------

TITLE: Configuring Short Validator in Struts XML
DESCRIPTION: Examples of how to configure the short validator in Struts using XML. It demonstrates Plain Validator Syntax, Field Validator Syntax, and Field Validator Syntax with expressions for dynamic min/max values. The validator checks if a short value is within a specified range.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator Syntax -->
    <validator type="short">
        <param name="fieldName">age</param>
        <param name="min">20</param>
        <param name="max">50</param>
        <message>Age needs to be between ${min} and ${max}</message>
    </validator>
 
    <!-- Field Validator Syntax -->
    <field name="age">
        <field-validator type="short">
            <param name="min">20</param>
            <param name="max">50</param>
            <message>Age needs to be between ${min} and ${max}</message>
        </field-validator>
    </field>
 
    <!-- Field Validator Syntax with expression -->
    <field name="age">
        <field-validator type="short">
            <param name="minExpression">${minValue}</param> <!-- will be evaluated as: Short getMinValue() -->
            <param name="maxExpression">${maxValue}</param> <!-- will be evaluated as: Short getMaxValue() -->
            <message>Age needs to be between ${min} and ${max}</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Cloning Struts Annotations Repository
DESCRIPTION: Command to obtain a fresh checkout of the Struts Annotations codebase from Apache's GitBox repository.

LANGUAGE: bash
CODE:
git clons https://gitbox.apache.org/repos/asf/struts-annotations.git

----------------------------------------

TITLE: Configuring Workflow Interceptor with Custom Result and Method Inclusion
DESCRIPTION: Advanced configuration example showing custom error result name and method inclusion/exclusion patterns.

LANGUAGE: xml
CODE:
 <action name="someAction" class="com.examples.SomeAction">
     <interceptor-ref name="params"/>
     <interceptor-ref name="validation"/>
     <interceptor-ref name="workflow">
        <param name="inputResultName">error</param>
         <param name="excludeMethods">*</param>
         <param name="includeMethods">myWorkflowMethod</param>
     </interceptor-ref>
     <result name="success">good_result.ftl</result>
 </action>

----------------------------------------

TITLE: Preparing Struts Annotations Release
DESCRIPTION: Maven command to prepare the release, which includes version updates and tag creation. Tag pattern should follow STRUTS_ANNOTATIONS_[VERSION] format.

LANGUAGE: shell
CODE:
mvn release:prepare

----------------------------------------

TITLE: Subset Tag with Start Parameter in JSP
DESCRIPTION: Example demonstrating how to start iteration from a specific index using the start attribute.

LANGUAGE: jsp
CODE:
<s:subset source="myList" count="13" start="3">
   <s:iterator>
     <s:property />
   </s:iterator>
</s:subset>

----------------------------------------

TITLE: Disallowed Properties Example in Struts
DESCRIPTION: Examples of disallowed property names in Struts, showing both HTML and Java implementations that won't work.

LANGUAGE: html
CODE:
<s:iterator value="parameters"/>

LANGUAGE: java
CODE:
public class MyAction {

    private String[] parameters;

    public String[] getParameters() {
        return parameters;
    }

}

----------------------------------------

TITLE: Configuring JSP Support Servlet for FreeMarker
DESCRIPTION: XML configuration to enable JSP tag support in FreeMarker templates by adding the JSPSupportServlet to the web.xml file.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>JspSupportServlet</servlet-name>
    <servlet-class>org.apache.struts2.views.JspSupportServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

----------------------------------------

TITLE: Action Interface Definition
DESCRIPTION: Core Action interface definition showing the required execute method.

LANGUAGE: java
CODE:
public interface Action {
    public String execute() throws Exception;
}

----------------------------------------

TITLE: Compiling and Invoking OGNL Expression in Java
DESCRIPTION: Demonstrates how to compile a simple property expression using OGNL and invoke it using the new ExpressionAccessor interface.

LANGUAGE: java
CODE:
SimpleObject root = new SimpleObject();
OgnlContext context =  (OgnlContext) Ognl.createDefaultContext(null);

Node node =  (Node) Ognl.compileExpression(context, root, "user.name");
String userName = node.getAccessor().get(context, root);

----------------------------------------

TITLE: Using JSP Tags in FreeMarker Templates
DESCRIPTION: Demonstrates how to include and use JSP tags within FreeMarker templates after configuring JspSupportServlet.

LANGUAGE: ftl
CODE:
<#assign cewolf=JspTaglibs["/WEB-INF/cewolf.tld"] />
...
<@cewold.xxx ... />

----------------------------------------

TITLE: Rendering Minimal Ajax/Dojo Support in Simple Theme Head Template
DESCRIPTION: This FreeMarker template implements the head.ftl for the simple theme in Apache Struts. It loads the minimal Ajax/Dojo support to enable easy importation of Dojo widgets by other tags.

LANGUAGE: freemarker
CODE:
<#if parameters.pushId??>\n<script type=\"text/javascript\">\n    // Dojo configuration\n    djConfig = {\n        isDebug: false,\n        parseOnLoad: false,\n        baseUrl: \"${base}/struts/dojo/\",\n        locale: \"${parameters.pushId}\"\n    };\n</script>\n\n<script type=\"text/javascript\" src=\"${base}/struts/dojo/dojo.js\"></script>\n<script type=\"text/javascript\" src=\"${base}/struts/ajax/dojoRequire.js\"></script>\n</#if>\n<script type=\"text/javascript\" src=\"${base}/struts/utils.js\"></script>\n<link rel=\"stylesheet\" href=\"${base}/struts/xhtml/styles.css\" type=\"text/css\"/>\n

----------------------------------------

TITLE: Implementing Date Validation in Struts XML Configuration
DESCRIPTION: Examples of date validator implementation using both Plain Validator and Field Validator syntax. Shows how to set date ranges using fixed values and expressions, with support for minimum and maximum date constraints. Includes validation message customization and expression-based dynamic range validation.

LANGUAGE: xml
CODE:
<validators>
    <!-- Plain Validator syntax -->
    <validator type="date">
        <param name="fieldName">birthday</param>
        <param name="min">01/01/1990</param>
        <param name="max">01/01/2000</param>
        <message>Birthday must be within ${min} and ${max}</message>
    </validator>
 
    <!-- Field Validator Syntax -->
    <field name="birthday">
        <field-validator type="date">
            <param name="min">01/01/1990</param>
            <param name="max">01/01/2000</param>
            <message>Birthday must be within ${min} and ${max}</message>
        </field-validator>
    </field>
 
    <!-- Field Validator Syntax with expression -->
    <field name="birthday">
        <field-validator type="date">
            <param name="minExpression">${minValue}</param> <!-- will be evaluated as: Date getMinValue() -->
            <param name="maxExpression">${maxValue}</param> <!-- will be evaluated as: Date getMaxValue() -->
            <message>Age needs to be between ${min} and ${max}</message>
        </field-validator>
    </field>
</validators>

----------------------------------------

TITLE: Configuring Template Directory in struts.xml
DESCRIPTION: Shows the configuration property used to set the default template directory in struts.xml. The default value is 'template' if not specified.

LANGUAGE: xml
CODE:
struts.ui.templateDir=template

----------------------------------------

TITLE: Configuring Custom Object Factory Bean in Struts XML
DESCRIPTION: Example showing how to define a custom ObjectFactory bean in struts.xml configuration. The bean is configured with a type, name, and implementing class to extend the framework's object factory functionality.

LANGUAGE: xml
CODE:
<struts>

  <bean type="com.opensymphony.xwork2.ObjectFactory" name="myfactory" class="com.company.myapp.MyObjectFactory" />
  ... 

</struts>

----------------------------------------

TITLE: Configuring Secure Parameters Interceptor in Struts XML
DESCRIPTION: XML configuration to mitigate ClassLoader manipulation vulnerability by excluding dangerous parameters in the params interceptor. This adds security patterns to block access to internal classes and methods.

LANGUAGE: xml
CODE:
<interceptor-ref name="params">
   <param name="excludeParams">(.*\.|^|.*|\[('|"))(c|C)lass(\.|('|")]|\[).*,^dojo\..*,^struts\..*,^session\..*,^request\..*,^application\..*,^servlet(Request|Response)\..*,^parameters\..*,^action:.*,^method:.*</param>
</interceptor-ref>

----------------------------------------

TITLE: Extending FreeMarker Support in Struts
DESCRIPTION: Shows how to extend FreeMarker support by creating a custom FreeMarkerManager and configuring it in struts.xml.

LANGUAGE: xml
CODE:
<constant name="struts.freemarker.manager.classname" value="com.yourcompany.YourFreeMarkerManager" />

----------------------------------------

TITLE: Comprehensive Example of Struts optiontransferselect Tag in JSP
DESCRIPTION: Illustrates a more complex implementation of the optiontransferselect tag, showcasing various optional attributes such as leftTitle, rightTitle, multiple, headerKey, headerValue, emptyOption, doubleHeaderKey, doubleHeaderValue, doubleEmptyOption, and doubleMultiple.

LANGUAGE: jsp
CODE:
<s:optiontransferselect
    label="Favourite Cartoons Characters"
    name="leftSideCartoonCharacters"
    leftTitle="Left Title"
    rightTitle="Right Title"
    list="{'Popeye', 'He-Man', 'Spiderman'}"
    multiple="true"
    headerKey="headerKey"
    headerValue="--- Please Select ---"
    emptyOption="true"
    doubleList="{'Superman', 'Mickey Mouse', 'Donald Duck'}"
    doubleName="rightSideCartoonCharacters"
    doubleHeaderKey="doubleHeaderKey"
    doubleHeaderValue="--- Please Select ---"
    doubleEmptyOption="true"
    doubleMultiple="true"
/>

----------------------------------------

TITLE: Rendering Custom UI Component in Freemarker
DESCRIPTION: Illustrates the usage of the component tag in Freemarker templates. Provides examples of simple usage and passing parameters to the component.

LANGUAGE: freemarker
CODE:
<@s..component template="/my/custom/component.ftl" />

LANGUAGE: freemarker
CODE:
<@s.component template="/my/custom/component.ftl">
    <@s.param name="key1" value="%{'value1'}" />
    <@s.param name="key2" value="%{'value2'}" />
</@s.component>

----------------------------------------

TITLE: Using FreeMarker's List Support with Struts Tags
DESCRIPTION: Demonstrates how to use FreeMarker's native list support when passing attributes to Struts tags, avoiding the need for OGNL conversion.

LANGUAGE: ftl
CODE:
<@s.select label="Foo label - %{foo}" name="%{name}" list=[1, 2, 3]/>

----------------------------------------

TITLE: Struts Test Build Announcement Template
DESCRIPTION: Template for announcing test builds to the dev list, including release notes and distribution links.

LANGUAGE: markdown
CODE:
The test build of Struts 2.0.3 is available.

No determination as to the quality ('alpha,' 'beta,' or 'GA') of Struts 2.0.3 has been made, and at this time it is 
simply a "test build".  We welcome any comments you may have, and will take all feedback into account if a quality vote 
is called for this build.

Release notes:
* [https://cwiki.apache.org/confluence/display/WW/Version+Notes+#.#.#]

Distribution:
* [https://dist.apache.org/repos/dist/dev/struts/#.#.#/]

Maven 2 staging repository:
* [https://repository.apache.org/content/groups/staging/]

We appreciate the time and effort everyone has put toward contributing code and documentation, posting to the mailing 
lists, and logging issues.

----------------------------------------

TITLE: Basic Autocompleter with Action
DESCRIPTION: Basic example of autocompleter tag fetching list from an action using Ajax

LANGUAGE: xml
CODE:
<sx:autocompleter name="autocompleter1" href="%{jsonList}"/>

----------------------------------------

TITLE: Tag Syntax Example in JSP
DESCRIPTION: Example showing the traditional tag syntax in Struts 2, where each parameter is evaluated against the value stack and requires single quotes for string literals.

LANGUAGE: jsp
CODE:
<s:iterator value="cart.items">
   ...
   <s:textfield label="'Cart item No.' + #rowstatus.index + ' note'" 
                 name="'cart.items[' + #rowstatus.index + '].note'" 
                 value="note" />
</s:iterator>

----------------------------------------

TITLE: Push Tag with Stack Navigation
DESCRIPTION: Demonstrates advanced stack navigation using index notation to access specific stack elements.

LANGUAGE: jsp
CODE:
<s:push value="myObject">                               
   <s:bean name="jp.SomeBean" var="myBean"/>            
      <s:param name="myParam" value="[1].top"/>         
   </s:bean>
</s:push>

----------------------------------------

TITLE: Label Styling Examples
DESCRIPTION: Examples demonstrating how to create styled labels using CSS classes

LANGUAGE: markdown
CODE:
Label primary
{:.label .label-primary}

Label info
{:.label .label-info}

Label success
{:.label .label-success}

Label warning
{:.label .label-warning}

Label danger
{:.label .label-danger}

----------------------------------------

TITLE: Docker Run Commands for Different Shells
DESCRIPTION: Shell-specific commands for running the website in Docker containers, supporting both Fish shell and Bash/Sh environments.

LANGUAGE: shell
CODE:
./docker-run.fish

LANGUAGE: shell
CODE:
./docker-run.sh

----------------------------------------

TITLE: Initializing OgnlExpressionCompiler and OgnlContext Pool in Java
DESCRIPTION: Shows how to set up the HiveMindExpressionCompiler and create a pool of OgnlContext objects using Apache Commons Pool library.

LANGUAGE: java
CODE:
OgnlRuntime.setCompiler(new HiveMindExpressionCompiler(_classFactory));

_contextPool = new GenericObjectPool(new PoolableOgnlContextFactory(_ognlResolver, _typeConverter));

_contextPool.setMaxActive(-1);
_contextPool.setMaxIdle(-1);
_contextPool.setMinEvictableIdleTimeMillis(POOL_MIN_IDLE_TIME);
_contextPool.setTimeBetweenEvictionRunsMillis(POOL_SLEEP_TIME);

----------------------------------------

TITLE: Markdown Plugin Table Structure
DESCRIPTION: Markdown table defining the available Struts plugins, their version compatibility, and current status notes. Includes information about deprecated and removed plugins.

LANGUAGE: markdown
CODE:
| Name                                      | Versions       | Note                                                                  |
|-------------------------------------------|----------------|-----------------------------------------------------------------------|
| [Async Plugin](async)                     | 6.0.0+         |
| [Bean Validation Plugin](bean-validation) | 2.5+           |
| [CDI (JSR 299) Plugin](cdi)               | 2.3.1+         |

----------------------------------------

TITLE: Running Jekyll Server Locally
DESCRIPTION: Command to start a local Jekyll server for website development with watch mode, trace output, and external access enabled.

LANGUAGE: shell
CODE:
bundle exec jekyll serve -w --trace --host 0.0.0.0

----------------------------------------

TITLE: Rendering Basic Hidden Input in JSP with Struts
DESCRIPTION: Demonstrates how to use the Struts hidden tag to create a hidden input field. The value is populated from the ValueStack property named 'foo'.

LANGUAGE: jsp
CODE:
<s:hidden name="foo" />

LANGUAGE: html
CODE:
<input type="hidden" name="foo" value="bar" />

----------------------------------------

TITLE: AltSyntax Example in JSP
DESCRIPTION: Example demonstrating the preferred AltSyntax format where only expressions within %{} are evaluated, resulting in cleaner and more intuitive code that's similar to JSTL EL usage.

LANGUAGE: jsp
CODE:
<s:iterator value="cart.items">
   ...
   <s:textfield label="Cart item No. %{#rowstatus.index} note" 
                 name="cart.items[%{#rowstatus.index}].note" 
                 value="%{note}" />
</s:iterator>

----------------------------------------

TITLE: Adding Input Result to Struts 2 Configuration
DESCRIPTION: This XML snippet shows how to add an 'input' result to the Struts 2 configuration file (struts.xml) to handle validation failures.

LANGUAGE: xml
CODE:
<result name="input">/register.jsp</result>

----------------------------------------

TITLE: Implementing Custom PropertyAccessor Methods for OGNL Compilation in Java
DESCRIPTION: Shows the implementation of three required PropertyAccessor methods for compiling OGNL expressions: getPropertyClass, getSourceAccessor, and getSourceSetter.

LANGUAGE: java
CODE:
public Class getPropertyClass(OgnlContext context, Object target, Object name)
{
  IBeanProvider provider = (IBeanProvider)target;
  String beanName = ((String)name).replaceAll("\"", "");

  if (provider.canProvideBean(beanName))
    return provider.getBean(beanName).getClass();

  return super.getPropertyClass(context, target, name);
}

public String getSourceAccessor(OgnlContext context, Object target, Object name)
{
   IBeanProvider provider = (IBeanProvider)target;
   String beanName = ((String)name).replaceAll("\"", "");

   if (provider.canProvideBean(beanName)) {

       Class type = OgnlRuntime.getCompiler().getInterfaceClass(provider.getBean(beanName).getClass());

       ExpressionCompiler.addCastString(context, "((" + type.getName() + ")");

       context.setCurrentAccessor(IBeanProvider.class);
       context.setCurrentType(type);

       return ".getBean(" + name + "))";
   }

   return super.getSourceAccessor(context, target, name);
}

public String getSourceSetter(OgnlContext context, Object target, Object name)
{
  throw new UnsupportedCompilationException("Can't set beans on IBeanProvider.");
}

----------------------------------------

TITLE: Configuring Maven Settings for Test Builds
DESCRIPTION: XML configuration for Maven settings.xml to access Apache Struts staging repositories for test builds.

LANGUAGE: xml
CODE:
<settings>
    ...
    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <repositories>
                <repository>
                    <id>apache-pre-release</id>
                    <url>https://repository.apache.org/content/repositories/staging/</url>
                    <layout>default</layout>
                </repository>
            </repositories>
        </profile>
    </profiles>
</settings>

----------------------------------------

TITLE: Autocompleter Component Implementation
DESCRIPTION: Comprehensive examples of implementing autocomplete functionality with different data sources and configurations.

LANGUAGE: jsp
CODE:
<sx:autocompleter list="{'apple','banana','grape','pear'}" />

----------------------------------------

TITLE: Configuring Named Variable Pattern Matcher in Struts XML
DESCRIPTION: Configuration to enable named variable pattern matching for extracting parameters from namespaces.

LANGUAGE: xml
CODE:
<constant name="struts.patternMatcher" value="namedVariable"/>

----------------------------------------

TITLE: Configuring OVal Validation Interceptor in Struts XML
DESCRIPTION: Demonstrates how to configure the OVal validation interceptor in a Struts package by extending the oval-default package.

LANGUAGE: xml
CODE:
<struts>
   <package namespace="/myactions" name="myactions" extends="oval-default">
        <action name="simpleFieldsXMLChild" class="org.apache.struts2.interceptor.SimpleFieldsXMLChild">
            <interceptor-ref name="ovalValidationStack"/>
            <result type="void"></result>
        </action>
   </package>
</struts>

----------------------------------------

TITLE: Markdown Documentation Structure for Struts 2 Guide
DESCRIPTION: Markdown formatted documentation structure outlining the core components, configuration options, and development topics for Struts 2 framework.

LANGUAGE: markdown
CODE:
---
layout: default
title: Core Developers Guide
---

# Core Developers Guide

Struts 2 processes requests using three core types: [interceptors](interceptor-configuration), [actions](action-configuration)
and [results](result-configuration). Each may be configured via XML or annotations.

----------------------------------------

TITLE: Improved Hidden Input Code with Builder Pattern in Java
DESCRIPTION: Demonstrates code improvement using the builder pattern for more readable and maintainable code

LANGUAGE: java
CODE:
a.add("type", "hidden")
 .add("id", HtmlID.with("__multiselect_").withSafeId(id).create());

----------------------------------------

TITLE: Highlighting Important Security Mailing List Information in Markdown
DESCRIPTION: This snippet uses Markdown syntax to emphasize a crucial point about the security mailing list's purpose and usage restrictions.

LANGUAGE: markdown
CODE:
`All mail sent to this address that does not relate to security problems in the Apache\nStruts source code will be ignored`.

----------------------------------------

TITLE: Implementing Custom Plugin in Java
DESCRIPTION: Implements the IMyPlugin interface to create a custom plugin. This class returns a specific message when saySomething() is called.

LANGUAGE: java
CODE:
package example.impl;

import example.IMyPlugin; 

public class MyPlugin implements IMyPlugin {
   public String saySomething() {
       return "We don't need no education";
   }
}

----------------------------------------

TITLE: Struts Action Mapping with Simple Regex Parameter Extraction
DESCRIPTION: Shows how to use simple regex patterns to extract parameters from the URL in an action mapping.

LANGUAGE: xml
CODE:
<package name="books" extends="struts-default" namespace="/">
    <action name="/{type}/content/{title}" class="example.BookAction">
	<result>/books/content.jsp</result>
    </action>
</package>

----------------------------------------

TITLE: Implementing Struts 2 Checkbox Tag in HTML
DESCRIPTION: Shows how to use the Struts 2 checkbox tag to create a single checkbox input. The 'key' attribute is used for data binding to a boolean property.

LANGUAGE: html
CODE:
<s:checkbox key="personBean.over21" />

----------------------------------------

TITLE: Original Hidden Input Implementation in Java
DESCRIPTION: Shows the original implementation of hidden input field generation using Attributes class

LANGUAGE: java
CODE:
// Hidden input section
a = new Attributes();
a.add("type", "hidden")
    .add("id", "__multiselect_" + StringUtils.defaultString(StringEscapeUtils.escapeHtml4(id)))
    .add("name", "__multiselect_" + StringUtils.defaultString(StringEscapeUtils.escapeHtml4(name)))
    .add("value", "").addIfTrue("disabled", disabled);
start("input", a);
end("input");

----------------------------------------

TITLE: Default Parameters Exclusion List in Struts
DESCRIPTION: Shows the default list of parameter patterns that are excluded from processing by the Parameters Interceptor.

LANGUAGE: text
CODE:
dojo..*,^struts..*,^session..*,^request..*,^application..*,^servlet(Request|Response)..*,parameters...*

----------------------------------------

TITLE: Bookmark Domain Class
DESCRIPTION: Simple domain class representing a bookmark with name and URL properties

LANGUAGE: java
CODE:
public class Bookmark {
   private String name;
   private String url;

   public Bookmark(String name, String url) {
      this.name = name;
      this.url = url;
   }
	
   public String getName() {
      return name;
   }

   public String getUrl() {
      return url;
   }
}

----------------------------------------

TITLE: Configuring Struts Velocity Properties
DESCRIPTION: Specifies the location of the Velocity configuration file in struts.properties

LANGUAGE: properties
CODE:
struts.velocity.configfile = struts-velocity.properties

----------------------------------------

TITLE: Using beforeNotifyTopics with Dojo Anchor in Struts 2
DESCRIPTION: This example demonstrates how to use the beforeNotifyTopics attribute to subscribe to a topic that is published before the AJAX request is made.

LANGUAGE: XML
CODE:
<script type="text/javascript">
dojo.event.topic.subscribe("/before", function(event, widget){
    alert('inside a topic event. before request');
    //event: set event.cancel = true, to cancel request
    //widget: widget that published the topic
});
</script>         

<sx:a beforeNotifyTopics="/before">Publish topics</sx:a>

----------------------------------------

TITLE: Push Tag with Method Invocation
DESCRIPTION: Illustrates pushing an object and accessing methods through the top reference in nested contexts.

LANGUAGE: jsp
CODE:
<s:push value="myObject">                                     
   <s:bean name="jp.SomeBean" var="myBean"/>                  
      <s:param name="myParam" value="top.mySomeOtherValue"/>  
   </s:bean>
</s:push>

----------------------------------------

TITLE: Manual Deployment of Struts Master Release
DESCRIPTION: This set of commands allows for manual deployment of the release if needed. It checks out the tagged version and runs the deploy and site-deploy goals with the performRelease flag set to true.

LANGUAGE: bash
CODE:
git co tags/$VERSION
mvn deploy site-deploy --no-plugin-updates -DperformRelease=true

----------------------------------------

TITLE: DateTimeFormatter Adapter Implementation
DESCRIPTION: Java implementation of a DateFormatter extension point

LANGUAGE: java
CODE:
public class DateTimeFormatterAdapter implements DateFormatter {

    @Override
    public String format(TemporalAccessor temporal, String format) {
        DateTimeFormatter dtf;
        Locale locale = ActionContext.getContext().getLocale();
        if (format == null) {
            dtf = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)
                .withLocale(locale);
        } else {
            dtf = DateTimeFormatter.ofPattern(format, locale);
        }
        return dtf.format(temporal);
    }

}

----------------------------------------

TITLE: Configuring Velocity Template Loaders
DESCRIPTION: Configuration for Velocity resource loaders, including file and classpath loaders with cache settings and modification check intervals

LANGUAGE: properties
CODE:
===========================================
resource.loader = class

file.resource.loader.description = Velocity File Resource Loader
file.resource.loader.class = org.apache.velocity.runtime.resource.loader.FileResourceLoader
file.resource.loader.path = .
file.resource.loader.cache = false
file.resource.loader.modificationCheckInterval = 2

class.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
class.resource.loader.cache = true
===========================================

----------------------------------------

TITLE: Configuring Struts 1 Action with Session-Scoped ActionForm in Struts 2
DESCRIPTION: This snippet demonstrates how to configure a Struts 1 Action with a session-scoped ActionForm in a Struts 2 application. It includes the necessary interceptor configuration to manage the creation and scope of the ActionForm.

LANGUAGE: xml
CODE:
<action name="myFormAction" class="org.apache.struts2.s1.Struts1Action">
  <param name="className">com.mycompany.myapp.MyAction</param>

  <interceptor-ref name="scopedModelDriven">
    <param name="className">com.mycompany.myapp.MyForm</param>
    <param name="name">gangsterForm</param>
    <param name="scope">session</param>
  </interceptor-ref>
  <interceptor-ref name="struts1Stack"/>

  <result>myAction.jsp</result>
</action>

----------------------------------------

TITLE: Skipping Tests in Struts 2 Maven Build
DESCRIPTION: This command builds Struts 2 while skipping the execution of tests, which can be useful when tests are failing but you need to build the framework anyway.

LANGUAGE: bash
CODE:
mvn -Dmaven.test.skip=true

----------------------------------------

TITLE: Maven Dependency Configuration for XStream
DESCRIPTION: XML configuration showing required Maven dependency for XStream when using XML validation.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.thoughtworks.xstream</groupId>
    <artifactId>xstream</artifactId>
    <version>1.3.1</version>
</dependency>

----------------------------------------

TITLE: Error Message for Convention Plugin
DESCRIPTION: Example error message when Convention Plugin is not properly configured in WebLogic

LANGUAGE: text
CODE:
There is no Action mapped for namespace / and action name xxxxxx

----------------------------------------

TITLE: Implementing Ajax Head Template with Dojo in HTML
DESCRIPTION: Example of implementing the Ajax head template in an HTML document. This snippet demonstrates how to include the necessary Dojo JavaScript dependencies for AJAX functionality in Struts.

LANGUAGE: html
CODE:
<ww:head theme="ajax"/>

----------------------------------------

TITLE: Creating and Installing SSH Key for Apache Struts Distribution
DESCRIPTION: This snippet demonstrates the process of creating an SSH key pair, setting appropriate permissions, and configuring the public key on the Apache server for secure access during distribution creation.

LANGUAGE: bash
CODE:
mkdir ~/.ssh
chmod 700 ~/.ssh
ssh-keygen -q -f ~/.ssh/id_rsa -t rsa
#Enter a passphrase
chmod go-rwx ~/.ssh/*

#copy the public key to people.apache.org
scp ~/.ssh/id_rsa.pub people.apache.org:/home/$USERNAME

# next, setup the public key on server
ssh people.apache.org
mkdir ~/.ssh
chmod 700 ~/.ssh
cat ~/id_rsa.pub >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
rm ~/id_rsa.pub

----------------------------------------

TITLE: Configuring Maven with CDI Implementation
DESCRIPTION: Extended Maven configuration that includes Weld implementation dependencies for standalone CDI usage.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.struts</groupId>
        <artifactId>struts2-cdi-plugin</artifactId>
        <version>${struts2.version}</version>
    </dependency>
    <dependency>
        <groupId>javax.enterprise</groupId>
        <artifactId>cdi-api</artifactId>
        <version>1.0-SP1</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>org.jboss.weld</groupId>
        <artifactId>weld-core</artifactId>
        <version>1.0.1-Final</version>
    </dependency>
    <dependency>
        <groupId>org.jboss.weld</groupId>
        <artifactId>weld-se</artifactId>
        <version>1.0.1-Final</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring custom ConfigurationProvider for Struts 2 in web.xml
DESCRIPTION: This snippet demonstrates how to specify a custom ConfigurationProvider for Struts 2 using an init-param in the filter configuration in web.xml.

LANGUAGE: xml
CODE:
<filter>
     <filter-name>struts2</filter-name>
     <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter</filter-class>
     <init-param>
         <param-name>configProviders</param-name>
         <param-value>com.company.MyConfigurationProvider</param-value>
     </init-param>
</filter>

----------------------------------------

TITLE: Implementing StringLengthFieldValidator Annotation in Java
DESCRIPTION: This snippet demonstrates how to use the StringLengthFieldValidator annotation in Java. It sets various parameters including message, key, shortCircuit, trim, minLength, and maxLength to validate a String field's length.

LANGUAGE: java
CODE:
@StringLengthFieldValidator(message = "Default message", key = "i18n.key", shortCircuit = true, trim = true, minLength = "5",  maxLength = "12")

----------------------------------------

TITLE: Adding Struts 2 Head Tag for CSS Styling
DESCRIPTION: This HTML snippet demonstrates how to include the Struts 2 head tag in a JSP file to provide CSS styling for error messages.

LANGUAGE: html
CODE:
<s:head />

----------------------------------------

TITLE: Compiling and Running Java Program from Command Line
DESCRIPTION: Terminal commands demonstrating how to compile and execute a Java program, showing system prompt convention using $.

LANGUAGE: bash
CODE:
$ javac HelloWorld.java

$ java HelloWorld
Hello, World!

----------------------------------------

TITLE: Creating JSP Page with Struts Form Fields
DESCRIPTION: This snippet demonstrates how to create a JSP page with Struts form fields for user input. It includes fields for user name, age, and birthday, along with error display and a submit button.

LANGUAGE: html
CODE:
<s:fielderror cssClass="alert alert-error"/>

<s:form method="POST" action="submitVisitorValidatorsExamples" namespace="/validation">
    <s:textfield name="user.name" label="User Name"/>
    <s:textfield name="user.age" label="User Age"/>
    <s:textfield name="user.birthday" label="Birthday"/>
    <s:submit label="Submit" cssClass="btn btn-primary"/>
</s:form>

----------------------------------------

TITLE: Deleting Git Tag for Apache Struts Release Retagging
DESCRIPTION: This bash command shows how to delete an existing Git tag on the remote repository when retagging is necessary for an Apache Struts release.

LANGUAGE: bash
CODE:
git push --delete origin STRUTS_#_#_#

----------------------------------------

TITLE: Complex Conditional Expression with Struts 2 If Tag
DESCRIPTION: Shows how to use more complex expressions in the if tag's test attribute by evaluating array length for grammatical correctness.

LANGUAGE: html
CODE:
<s:if test="personBean.carModels.length > 1">
    <p>Car models
</s:if>
<s:else>
   <p>Car model
</s:else>

----------------------------------------

TITLE: Jekyll Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the Jekyll page layout, defining the page title and parent page relationship.

LANGUAGE: yaml
CODE:
---
layout: default
title: Creating and Signing a Distribution
parent:
  title: Contributors Guide
  url: index.html
---

----------------------------------------

TITLE: Implementing Struts Action Class for Field Validation
DESCRIPTION: Java action class that defines properties and getter/setter methods for all validated fields. Extends AbstractValidationActionSupport to handle form validation processing.

LANGUAGE: java
CODE:
public class FieldValidatorsExampleAction extends AbstractValidationActionSupport {

    private String requiredValidatorField = null;
    private String requiredStringValidatorField = null;
    private Integer integerValidatorField = null;
    private Date dateValidatorField = null;
    private String emailValidatorField = null;
    private String urlValidatorField = null;
    private String stringLengthValidatorField = null;
    private String regexValidatorField = null;
    private String fieldExpressionValidatorField = null;

    // Getter and Setter methods...
}

----------------------------------------

TITLE: Creating PGP Key for Apache Struts Distribution Signing
DESCRIPTION: This snippet shows the process of creating a PGP key, exporting it, and adding it to the Apache Struts KEYS file for distribution signing purposes.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/struts/maven/trunk/build struts-maven-build
cd struts-maven-build
(gpg --fingerprint --list-sigs <your name> && gpg --armor --export <your name>) >> KEYS
scp KEYS people.apache.org:/www/www.apache.org/dist/struts
svn commit KEYS -m "Add public key"

----------------------------------------

TITLE: Defining Hard-Coded Dependency in EditAction Class (Java)
DESCRIPTION: Example of a hard-coded dependency in the EditAction class, which creates tight coupling and makes testing difficult.

LANGUAGE: java
CODE:
private EditService editService = new EditServiceInMemory();

----------------------------------------

TITLE: Running Maven in Offline Mode for Struts 2
DESCRIPTION: This command runs Maven in offline mode, which is useful when you're disconnected from the internet or want to speed up the build process.

LANGUAGE: bash
CODE:
mvn -o

----------------------------------------

TITLE: Granting All Permissions in SunOne 7.0 for Struts Framework
DESCRIPTION: This snippet demonstrates how to grant all permissions in SunOne 7.0, which is the simplest but least secure approach for using Struts. It uses the java.security.AllPermission class to grant unrestricted access.

LANGUAGE: java
CODE:
grant {
	permission java.security.AllPermission;
};

----------------------------------------

TITLE: Demonstrating Conditional Flow with Struts Tags in JSP
DESCRIPTION: This example shows how to use the 'if', 'elseif', and 'else' tags in Struts to control conditional flow in a JSP page. It demonstrates the basic structure and syntax for these conditional tags.

LANGUAGE: jsp
CODE:
  <s:if test="%{false}">
      <div>Will Not Be Executed</div>
  </s:if>
  <s:elseif test="%{true}">
      <div>Will Be Executed</div>
  </s:elseif>
  <s:else>
      <div>Will Not Be Executed</div>
  </s:else>

----------------------------------------

TITLE: Creating a Model Class in Java for Struts 2
DESCRIPTION: This code defines a MessageStore class that serves as the model in the Struts 2 MVC pattern. It stores a welcome message and provides a getter method to access it.

LANGUAGE: java
CODE:
package org.apache.struts.helloworld.model;

public class MessageStore {
    private String message;
    
    public MessageStore() {
        message = "Hello Struts User";
    }

    public String getMessage() {
        return message;
    }
}

----------------------------------------

TITLE: Cleaning Up Local Repository After Merged Pull Request
DESCRIPTION: Git commands for cleaning up the local repository after a pull request has been merged, including switching to master, updating, and deleting the feature branch.

LANGUAGE: bash
CODE:
git checkout master
git fetch -p
git pull
git branch -d my-branch

----------------------------------------

TITLE: Configuring Custom Static Content Loader in Struts
DESCRIPTION: XML configuration to define a custom StaticContentLoader implementation and set it as the content loader for Struts.

LANGUAGE: xml
CODE:
<bean type="org.apache.struts2.dispatcher.StaticContentLoader" class="MyStaticContentLoader" name="myLoader"/>
<constant name="struts.staticContentLoader" value="myLoader"/>

----------------------------------------

TITLE: Using doubleselect Tag with Dynamic Attributes in JSP
DESCRIPTION: Demonstrates how to use the doubleselect tag with dynamic attributes, specifically adding attributes to the second control generated by the tag using the 'second-' prefix.

LANGUAGE: jsp
CODE:
<s:doubleselect ... second-control-id="id2"/>

----------------------------------------

TITLE: Linking to Struts 2 Configuration Browser in HTML
DESCRIPTION: This snippet shows how to create a link to the Struts 2 configuration browser plugin, which provides detailed information about the framework's configuration for your application.

LANGUAGE: html
CODE:
<a href='<s:url action="index" namespace="config-browser" />'>Launch the configuration browser</a>

----------------------------------------

TITLE: Securing Default Interceptor Stack Configuration
DESCRIPTION: XML configuration showing how to secure the default interceptor stack by creating a custom secure stack with protected parameters. This replaces the standard struts-default configuration.

LANGUAGE: xml
CODE:
<package name="default" namespace="/" extends="struts-default">
    <interceptors>
        <interceptor-stack name="secureDefaultStack">
            <interceptor-ref name="defaultStack">
                <param name="params.excludeParams">(.*\.|^|.*|\[('|"))(c|C)lass(\.|('|")]|\[).*,^dojo\..*,^struts\..*,^session\..*,^request\..*,^application\..*,^servlet(Request|Response)\..*,^parameters\..*,^action:.*,^method:.*</param>
            </interceptor-ref>
        </interceptor-stack>
    </interceptors>

    <default-interceptor-ref name="secureDefaultStack" />
</package>

----------------------------------------

TITLE: Using Anchor Parameter with Redirect Action Result in Struts XML
DESCRIPTION: This XML snippet shows how to use the 'anchor' parameter in conjunction with the 'redirectAction' result type. It demonstrates redirecting to a specific action with an anchor (hash) in the URL.

LANGUAGE: xml
CODE:
<!--
    Example of "anchor" param usage in conjunction with "redirectAction" result-type.
 
    Generated URL: /displayReport.action#SUMMARY
-->
 
<action name="displayReport">
    <result>/jsp/displayReport.jsp</result>
</action>
 
<action name="financeReport" class="com.mycompany.reports.FinanceReportAction"> 
    <result name="input">/jsp/index.jsp</result>            
    <result name="success" type="redirectAction">
        <param name="actionName">displayReport</param>
        <param name="parse">false</param>
        <param name="anchor">SUMMARY</param>
    </result>
</action>

----------------------------------------

TITLE: Performing Struts Master Release with Maven
DESCRIPTION: This command performs the actual release, including checking out the tagged version and deploying artifacts. It uses the release:perform goal of the Maven Release Plugin.

LANGUAGE: bash
CODE:
mvn release:perform

----------------------------------------

TITLE: Session Counter Implementation in Java
DESCRIPTION: Demonstrates how to track and increment a counter stored in the HTTP session using the session reference.

LANGUAGE: java
CODE:
private void increaseHelloCount() {
    Integer helloCount = (Integer) userSession.get(HELLO_COUNT);

    if (helloCount == null ) {
        helloCount = 1;
    } else {
        helloCount++;
    }

    userSession.put(HELLO_COUNT, helloCount);
}

----------------------------------------

TITLE: Maven Dependency for Commons FileUpload
DESCRIPTION: Maven dependency configuration to include the secure version 1.3.1 of Commons FileUpload library, which prevents DoS attacks in file upload functionality.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>commons-fileupload</groupId>
  <artifactId>commons-fileupload</artifactId>
  <version>1.3.1</version>
</dependency>

----------------------------------------

TITLE: Struts 2 Tag-based Form Implementation
DESCRIPTION: Simplified form implementation using Struts 2 tags, showing how the framework reduces code complexity while adding validation and localization features.

LANGUAGE: html
CODE:
<s:actionerror/>
<s:form action="Profile\_update" validate="true">
    <s:textfield label="Username" name="username"/>
    <s:password label="Password" name="password"/>
    <s:password label="(Repeat) Password" name="password2"/>
    <s:textfield label="Full Name" name="fullName"/>
    <s:textfield label="From Address" name="fromAddress"/>
    <s:textfield label="Reply To Address" name="replyToAddress"/>
    <s:submit value="Save" name="Save"/>
    <s:submit action="Register_cancel" value="Cancel" name="Cancel"  onclick="form.onsubmit=null"/>
</s:form>

----------------------------------------

TITLE: Creating Model Class in Java
DESCRIPTION: Gangster model class with properties for name, age, description, and bustedBefore status. Implements Serializable and includes getter/setter methods for all properties.

LANGUAGE: java
CODE:
public class Gangster implements Serializable {
    private String name;
    private int age;
    private String description;
    private boolean bustedBefore;

    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public boolean isBustedBefore() {
        return bustedBefore;
    }
    public void setBustedBefore(boolean bustedBefore) {
        this.bustedBefore = bustedBefore;
    }
    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}

----------------------------------------

TITLE: Creating Basic JSP for Struts 2 Application
DESCRIPTION: A simple JSP file that serves as the welcome page for the Struts 2 application.

LANGUAGE: JSP
CODE:
<!DOCTYPE html>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Basic Struts 2 Application - Welcome</title>
  </head>
  <body>
    <h1>Welcome To Struts 2!</h1>
  </body>
</html>

----------------------------------------

TITLE: Adding Commons FileUpload Maven Dependency in Struts 2
DESCRIPTION: Maven dependency configuration to include commons-fileupload version 1.3.3 to prevent Remote Code Execution vulnerabilities in Struts 2 projects prior to version 2.5.12.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>commons-fileupload</groupId>
  <artifactId>commons-fileupload</artifactId>
  <version>1.3.3</version>
</dependency>

----------------------------------------

TITLE: JDK Logger Implementation
DESCRIPTION: Custom implementation of the Logger interface that wraps java.util.logging.Logger. Provides mapping of log levels and formatting support.

LANGUAGE: java
CODE:
import com.opensymphony.xwork2.util.logging.Logger;
import com.opensymphony.xwork2.util.logging.LoggerUtils;

import java.util.logging.Level;

/**
 * Delegates to jdk logger.  Maps fatal to Level.SEVERE along with error.
 */
public class JdkLogger implements Logger {
    
    private java.util.logging.Logger log;
    
    public JdkLogger(java.util.logging.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.log(Level.SEVERE, LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.log(Level.SEVERE, LoggerUtils.format(msg, args), ex);
    }
    
    ...
}

----------------------------------------

TITLE: Configuring JSON Action Mapping in Struts XML
DESCRIPTION: XML configuration for mapping a Struts 2 action to use the JSON result type.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>

  <package name="example"  extends="json-default">
     <action name="JSONExample" class="example.JSONExample">
        <result type="json"/>
     </action>
  </package>

</struts>

----------------------------------------

TITLE: Building Apache Struts with Maven
DESCRIPTION: Maven commands for building Apache Struts from source code, with options for full build and build without assembly.

LANGUAGE: bash
CODE:
> mvn install

LANGUAGE: bash
CODE:
> mvn -DskipAssembly=true install

----------------------------------------

TITLE: Accessing Context Using ActionContext (Anti-pattern)
DESCRIPTION: Demonstrates the discouraged way of accessing session context directly through ActionContext. This approach should be avoided in favor of *Aware interfaces.

LANGUAGE: java
CODE:
ActionContext.getContext().getSession().put("myAttribute", "myValue");

----------------------------------------

TITLE: Enabling Development Mode in Struts 2 XML Configuration
DESCRIPTION: This XML snippet shows how to enable Development Mode in Struts 2 by setting the 'struts.devMode' constant to true in the struts.xml configuration file.

LANGUAGE: xml
CODE:
<constant name="struts.devMode" value="true" />

----------------------------------------

TITLE: Configuring Default Bundles Search
DESCRIPTION: XML configuration for enabling search in default bundles first for improved performance.

LANGUAGE: xml
CODE:
<constant name="struts.i18n.search.defaultbundles.first" value="true"/>

----------------------------------------

TITLE: Generating Simple Iterator with Generator Tag in JSP
DESCRIPTION: This example demonstrates how to use the generator tag to create a simple iterator from a comma-separated string and iterate over its values.

LANGUAGE: jsp
CODE:
<s:generator val="%{'aaa,bbb,ccc,ddd,eee'}">
 <s:iterator>
     <s:property /><br/>
 </s:iterator>
</s:generator>

----------------------------------------

TITLE: Displaying Struts default.properties Content
DESCRIPTION: This snippet uses a Jekyll liquid tag to fetch and display the contents of the default.properties file from the Struts GitHub repository. It shows all the configurable properties and their default values for the Struts framework.

LANGUAGE: txt
CODE:
{% remote_file_content https://raw.githubusercontent.com/apache/struts/master/core/src/main/resources/org/apache/struts2/default.properties %}

----------------------------------------

TITLE: Accessing Application Scope Attribute
DESCRIPTION: JSP code snippet demonstrating how to access attributes stored in Application scope using Struts tags.

LANGUAGE: jsp
CODE:
<s:property value="%{#application.myApplicationAttribute}" />

----------------------------------------

TITLE: Using Struts Property Tag in JSP
DESCRIPTION: Demonstrates two examples of using the Struts property tag within a push context. The first example retrieves a simple property, while the second example includes a default value if the property is null.

LANGUAGE: jsp
CODE:
<s:push value="myBean">
    <!-- Example 1: -->
    <s:property value="myBeanProperty" />

    <!-- Example 2: -->
    <s:property value="myBeanProperty" default="a default value" />
</s:push>

----------------------------------------

TITLE: Configuring Custom ObjectFactory in Struts Properties
DESCRIPTION: Shows how to register a custom ObjectFactory implementation in the struts.properties configuration file.

LANGUAGE: properties
CODE:
struts.objectFactory=foo.bar.MyCustomObjectFactory

----------------------------------------

TITLE: Applying CreateIfNull Annotation in Java
DESCRIPTION: Demonstrates how to use the CreateIfNull annotation on a field. This annotation is used to set the CreateIfNull property for type conversion, with the value parameter set to true.

LANGUAGE: java
CODE:
 @CreateIfNull( value = true )
 private List<User> users;


----------------------------------------

TITLE: Accessing Request Parameters
DESCRIPTION: JSP code snippet showing how to access HTTP request parameters using Struts tags.

LANGUAGE: jsp
CODE:
<s:property value="%{#parameters.myParameter}" />

----------------------------------------

TITLE: Basic Struts Label Tag Usage in JSP
DESCRIPTION: Demonstrates using the Struts label tag to render an HTML label that retrieves text from a ResourceBundle. The key attribute references 'userName' which maps to 'User Name' in the i18n messages, while the value comes from getUserName() returning 'Ford.Prefect'.

LANGUAGE: jsp
CODE:
<s:label key="userName" />

----------------------------------------

TITLE: Object Property Relationship Example
DESCRIPTION: Pseudocode demonstrating circular object references that the XSLT processor needs to handle.

LANGUAGE: text
CODE:
x.y = y;
and
y.x = x;
action.x=x;

----------------------------------------

TITLE: Implementing ApplicationAware Interface in Java
DESCRIPTION: Example of implementing ApplicationAware interface to access application scope in a Struts action class. Shows proper way to inject and use application context map.

LANGUAGE: java
CODE:
public class MyAction implements ApplicationAware {
 
    private Map<String, Object> application;

    public void withApplication(Map<String, Object> application) {
        this.application = application;
    }
    
    public String execute() {
        application.set("myKey", "myValue");
        ...
        return "success";
    }
    
}

----------------------------------------

TITLE: Accessing Bean Properties in FreeMarker (Struts)
DESCRIPTION: This example shows how to access properties of a bean that has been placed in the stack's context using the Struts property tag in FreeMarker.

LANGUAGE: freemarker
CODE:
[s:property value="#counter.foo"/]

----------------------------------------

TITLE: CSS XHTML Theme Control Footer Template
DESCRIPTION: Freemarker template for the control footer in CSS XHTML theme. Provides closure for form controls.

LANGUAGE: freemarker
CODE:
<#include "/${parameters.templateDir}/${parameters.expandTheme}/controlfooter-core.ftl" />

----------------------------------------

TITLE: Customizing ActionProxyFactory in Java for Apache Struts
DESCRIPTION: This snippet shows how to set a custom ActionProxyFactory implementation in Apache Struts. It allows for modifying how Action instances are created and managed.

LANGUAGE: java
CODE:
ActionProxyFactory.setFactory(new MyActionProxyFactory() {

    // Do something interesting...

 });

----------------------------------------

TITLE: Creating a Git Patch for Apache Struts
DESCRIPTION: This command demonstrates how to create a patch file for a change made to Main.java using Git. The resulting patch can be attached to a JIRA issue for review by Apache Struts committers.

LANGUAGE: bash
CODE:
git diff Main.java >> patchfile.txt

----------------------------------------

TITLE: Using Append Tag in JSP with Struts
DESCRIPTION: JSP code demonstrating how to use the Struts append tag to combine multiple lists into a single iterator and display the values using the iterator and property tags.

LANGUAGE: jsp
CODE:
<s:append var="myAppendIterator">
      <s:param value="%{myList1}" />
      <s:param value="%{myList2}" />
      <s:param value="%{myList3}" />
 </s:append>
 <s:iterator value="%{#myAppendIterator}">
      <s:property />
 </s:iterator>

----------------------------------------

TITLE: Configuring Scoped Model Driven Interceptor in Struts XML
DESCRIPTION: Examples of how to configure the Scoped Model Driven Interceptor in Struts XML. It shows basic usage and usage with all available parameters including scope, name, and className.

LANGUAGE: xml
CODE:
<-- Basic usage -->
<interceptor name="scopedModelDriven" class="com.opensymphony.interceptor.ScopedModelDrivenInterceptor" />

<-- Using all available parameters -->
<interceptor name="gangsterForm" class="com.opensymphony.interceptor.ScopedModelDrivenInterceptor">
     <param name="scope">session</param>
     <param name="name">gangsterForm</param>
     <param name="className">com.opensymphony.example.GangsterForm</param>
 </interceptor>

----------------------------------------

TITLE: Configuring Action Mapping for File Upload in Struts 2 XML
DESCRIPTION: Example of how to configure an action mapping in Struts 2 for handling file uploads.

LANGUAGE: xml
CODE:
<action name="doUpload" class="com.example.UploadAction">
    <result name="success">good_result.jsp</result>
</action>

----------------------------------------

TITLE: Installing Maven Dependencies for Struts 2
DESCRIPTION: This command installs all necessary dependencies for Struts 2 into your local Maven repository. It runs the default 'install' phase if no specific phase is provided.

LANGUAGE: bash
CODE:
mvn

----------------------------------------

TITLE: Accessing Context Parameters
DESCRIPTION: JSP code snippet demonstrating how to access context parameters using Struts tags.

LANGUAGE: jsp
CODE:
<s:property value="%{#myContextParam}" />

----------------------------------------

TITLE: Displaying Exception Details in JSP
DESCRIPTION: Shows how to access and display exception details from the ValueStack in a JSP page, including error messages and stack traces.

LANGUAGE: jsp
CODE:
<h2>An unexpected error has occurred</h2>
<p>
    Please report this error to your system administrator
    or appropriate technical support personnel.
    Thank you for your cooperation.
</p>
<hr/>
<h3>Error Message</h3>
<s:actionerror/>
<p>
    <s:property value="%{exception.message}"/>
</p>
<hr/>
<h3>Technical Details</h3>
<p>
    <s:property value="%{exceptionStack}"/>
</p>

----------------------------------------

TITLE: Creating File Upload Form Using Struts 2 JSP Tags
DESCRIPTION: Demonstrates how to create a file upload form using Struts 2 JSP tags, including the necessary enctype attribute.

LANGUAGE: xml
CODE:
<s:form action="doUpload" method="post" enctype="multipart/form-data">
    <s:file name="upload" label="File"/>
    <s:submit/>
</s:form>

----------------------------------------

TITLE: XSLT Result Configuration with Patterns
DESCRIPTION: Configuration example showing how to use matching and excluding patterns for property filtering.

LANGUAGE: xml
CODE:
<result name="success" type="xslt">
  <param name="stylesheetLocation">foo.xslt</param>
  <param name="matchingPattern">^/result/[^/*]$</param>
  <param name="excludingPattern">.*(hugeCollection).*</param>
</result>

----------------------------------------

TITLE: Extending XHTML Theme in Struts Theme Properties
DESCRIPTION: This snippet shows the contents of a theme.properties file used to extend the XHTML theme in Struts. It demonstrates how to set a parent theme for inheritance.

LANGUAGE: properties
CODE:
parent = xhtml

----------------------------------------

TITLE: Wildcard Mapping with Parameter Extraction in Struts XML
DESCRIPTION: Shows how to use wildcards to extract parts of the URL as parameters for the action and result.

LANGUAGE: xml
CODE:
<action name="/edit/*" class="org.apache.struts.webapp.example.Edit{1}Action">
    <param name="id">{1}</param>
    <result>
      <param name="location">/mainMenu.jsp</param>
      <param name="id">{1}</param> 
    </result>
</action>

----------------------------------------

TITLE: Creating Struts 2 Form JSP
DESCRIPTION: JSP page with Struts 2 form tags that collects user registration information. Maps form fields to Person bean properties.

LANGUAGE: jsp
CODE:
<%@ taglib prefix="s" uri="/struts-tags" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Register</title>
  </head>
  <body>
    <h3>Register for a prize by completing this form.</h3>

    <s:form action="register">
      <s:textfield name="personBean.firstName" label="First name" />
      <s:textfield name="personBean.lastName" label="Last name" />
      <s:textfield name="personBean.email"  label ="Email"/>  
      <s:textfield name="personBean.age"  label="Age"  />
      <s:submit/>
    </s:form>	
  </body>
</html>

----------------------------------------

TITLE: Applying Key Annotation in Java for Struts
DESCRIPTION: This example demonstrates how to use the Key annotation to specify the key property for User objects within a collection. The key property is set to java.lang.Long.class for a Map of Long keys to User values.

LANGUAGE: java
CODE:
 // The key property for User objects within the users collection is the <code>userName</code> attribute.
 @Key( value = java.lang.Long.class )
 private Map<Long, User> userMap;

----------------------------------------

TITLE: Disabling an Interceptor in Struts XML
DESCRIPTION: Shows how to disable a specific interceptor in the interceptor stack for an action using the disabled parameter.

LANGUAGE: xml
CODE:
<action name="myAction" class="myActionClass">
    <interceptor-ref name="defaultStack">
        <param name="validation.disabled">true</param>
    </interceptor-ref>
</action>

----------------------------------------

TITLE: Configuring Struts for Advanced Regex Wildcards
DESCRIPTION: XML configuration to enable the use of regular expressions in action mappings.

LANGUAGE: xml
CODE:
<constant name="struts.enable.SlashesInActionNames" value="true"/>
<constant name="struts.mapper.alwaysSelectFullNamespace" value="false"/>
<constant name="struts.patternMatcher" value="regex" />

<constant name="struts.matcher.appendNamedParameters" value="true"/>   <!-- Required from 2.5.25+ -->

----------------------------------------

TITLE: Custom Label Style Override
DESCRIPTION: Example of overriding default Struts 2 label styles with custom CSS.

LANGUAGE: html
CODE:
<style type="text/css">
    .label {color:blue; font-style:normal; font-weight:bold}
</style>

----------------------------------------

TITLE: Alert Panel Examples
DESCRIPTION: Examples showing how to create different types of alert panels using CSS classes

LANGUAGE: markdown
CODE:
Info panel
{:.alert .alert-info}

Success panel
{:.alert .alert-success}

Warning panel
{:.alert .alert-warning}

Danger panel
{:.alert .alert-danger}

----------------------------------------

TITLE: Incorrect Struts Form Validation Configuration
DESCRIPTION: Demonstrates an incorrect way to specify the form action using a combined path that won't work with client-side validation. The namespace and action must be specified separately.

LANGUAGE: jsp
CODE:
<s:form action="/user/submitProfile.action" validate="true">
  ...
</s:form>

----------------------------------------

TITLE: Verifying PGP Signatures using PGPK
DESCRIPTION: Commands to verify PGP signatures of downloaded Struts files using the PGPK tool. Requires downloading the KEYS file and signature file from the main distribution directory.

LANGUAGE: shell
CODE:
% pgpk -a KEYS
% pgpv ${filename}.tar.gz.asc

----------------------------------------

TITLE: Defining Plugin Interface in Java
DESCRIPTION: Creates an interface IMyPlugin with a saySomething method. This interface will be implemented by the custom plugin.

LANGUAGE: java
CODE:
package example;

public interface IMyPlugIn {
   String saySomething();
}

----------------------------------------

TITLE: Basic Param Tag Usage in JSP Component
DESCRIPTION: Demonstrates how to use param tags within a ui:component to set key-value pairs and context parameters.

LANGUAGE: jsp
CODE:
<ui:component>
 <ui:param name="key"     value="[0]"/>
 <ui:param name="value"   value="[1]"/>
 <ui:param name="context" value="[2]"/>
</ui:component>

----------------------------------------

TITLE: Creating File Upload Form with Struts JSP Tags
DESCRIPTION: This XML snippet shows how to create a file upload form using Struts JSP tags. It includes the necessary enctype attribute for multipart form data.

LANGUAGE: xml
CODE:
   <s:form action="doUpload" method="post" enctype="multipart/form-data">
       <s:file name="upload" label="File"/>
       <s:submit/>
   </s:form>

----------------------------------------

TITLE: Using CheckboxList Tag in JSP with Struts
DESCRIPTION: This snippet demonstrates how to use the checkboxlist tag in a JSP file with Struts. It creates a series of checkboxes from a list named 'bar' and assigns the name 'foo' to the checkbox group.

LANGUAGE: jsp
CODE:
<s:checkboxlist name="foo" list="bar"/>

----------------------------------------

TITLE: Configuring Action to Use Tiles Definition in Struts 2
DESCRIPTION: This XML snippet demonstrates how to configure a Struts 2 action to utilize a Tiles definition. It defines an action named 'sample' and specifies a 'tiles' result type for the 'success' outcome.

LANGUAGE: xml
CODE:
<action name="sample" class="org.apache.struts2.tiles.example.SampleAction" >
  <result name="success" type="tiles">tilesWorks</result>
</action>

----------------------------------------

TITLE: Email Validation in Struts 2 XML
DESCRIPTION: XML configuration that combines required field validation with email format validation using Struts 2's email validator. Ensures the user enters a valid email address.

LANGUAGE: xml
CODE:
<validator type="requiredstring">
    <param name="fieldname">personBean.email</param>
    <message>Email address is required.</message>
</validator>
<validator type="email">
    <param name="fieldname">personBean.email</param>
    <message>Email address not valid.</message>
</validator>

----------------------------------------

TITLE: Setting Allowed File Types for Action File Upload Interceptor
DESCRIPTION: This XML snippet shows how to set allowed file types for the Action File Upload Interceptor. It demonstrates setting the allowedTypes parameter to restrict uploads to specific image formats.

LANGUAGE: xml
CODE:
<interceptor-ref name="actionFileUpload">
  <param name="allowedTypes">
     image/png,image/gif,image/jpeg
  </param>
</interceptor-ref>

----------------------------------------

TITLE: Rendering Reset Button with Localized Text in JSP
DESCRIPTION: This example shows how to render a reset button using the Struts reset tag. It creates an HTML button element of type 'reset' with the text specified by the 'reset' key in the localization resources.

LANGUAGE: jsp
CODE:
Render a reset button:
<s:reset type="button" key="reset"/>

----------------------------------------

TITLE: Mapping Interceptors in Struts XML Configuration
DESCRIPTION: This XML snippet demonstrates how to declare and map interceptors in the Struts configuration file. It shows the structure for defining multiple interceptors within a package.

LANGUAGE: xml
CODE:
<struts>
   ...

   <package name="struts-default">
      <interceptors>
         <interceptor name="alias" class="com.opensymphony.xwork2.interceptor.AliasInterceptor"/>
         <interceptor name="autowiring" class="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor"/>
         ...
      </interceptors>
   </package>

   ...
</struts>

----------------------------------------

TITLE: Using Struts URL Tag in JSP
DESCRIPTION: Provides three examples of using the Struts URL tag in JSP pages, demonstrating different ways to create URLs with parameters.

LANGUAGE: jsp
CODE:
<!-- Example 1 -->
<s:url value="editGadget.action">
    <s:param name="id" value="%{selected}" />
</s:url>

<!-- Example 2 -->
<s:url action="editGadget">
    <s:param name="id" value="%{selected}" />
</s:url>

<!-- Example 3-->
<s:url includeParams="get">
    <s:param name="id" value="%{'22'}" />
</s:url>

----------------------------------------

TITLE: Displaying Exception Information in JSP
DESCRIPTION: This HTML snippet shows how to display exception information in a JSP page using Struts 2 tags. It outputs the exception name and stack trace.

LANGUAGE: html
CODE:
<h4>The application has malfunctioned.</h4>

<p>Please contact technical support with the following information:</p> 

<h4>Exception Name: <s:property value="exception" /> </h4>

<h4>Exception Details: <s:property value="exceptionStack" /></h4>

----------------------------------------

TITLE: Implementing Birth Year Combobox in JSP
DESCRIPTION: Creates a combobox for selecting birth year using a Counter bean to generate the year range. The component combines a text input with a select dropdown.

LANGUAGE: jsp
CODE:
<s:bean name="struts.util.Counter" var="year">
  <s:param name="first" value="text('firstBirthYear')"/>
  <s:param name="last" value="2000"/>

  <s:combobox label="Birth year" size="6" maxlength="4" name="birthYear" list="#year"/>
</s:bean>

----------------------------------------

TITLE: Modifying web.xml for WebLogic 6.1 Compatibility
DESCRIPTION: XML configuration changes required in web.xml to use WebLogic 6.1 compatible classes. This involves replacing standard Struts filter and listener classes with custom implementations.

LANGUAGE: xml
CODE:
| Old Class Name | New Class Name |
|----------------|----------------|
| RequestLifecycleFilter | RequestLifecycleFilterCompatWeblogic61 |
| SessionLifecycleListener | SessionLifecycleListenerCompatWeblogic61 |
| FilterDispatcher | FilterDispatcherCompatWeblogic61 |

----------------------------------------

TITLE: Include Tag with Body Parameters
DESCRIPTION: Example showing how to include a JSP page while passing parameters using param tags with body content.

LANGUAGE: jsp
CODE:
<s:include value="myJsp.jsp">
   <s:param name="param1">value1</s:param>
   <s:param name="param2">value2</s:param>
</s:include>

----------------------------------------

TITLE: YAML Front Matter Configuration for Velocity Plugin Documentation
DESCRIPTION: YAML configuration block defining the page layout, title and parent navigation structure for the Velocity plugin documentation page.

LANGUAGE: yaml
CODE:
---
layout: default
title: Velocity plugin
parent:
    url: ../
    title: Plugins
---

----------------------------------------

TITLE: Configuring Convention Plugin for REST in Struts XML
DESCRIPTION: XML configuration to set up the Convention plugin for use with REST in struts.xml

LANGUAGE: xml
CODE:
<constant name="struts.convention.action.suffix" value="Controller"/>
<constant name="struts.convention.action.mapAllMatches" value="true"/>
<constant name="struts.convention.default.parent.package" value="rest-default"/>
<constant name="struts.convention.package.locators" value="example"/>

----------------------------------------

TITLE: Implementing ValidationParameter with CustomValidator in Java
DESCRIPTION: Example showing how to use ValidationParameter annotation as a parameter within a CustomValidator annotation. The annotation requires two mandatory parameters: name and value, which define the parameter name and its corresponding value for the custom validator.

LANGUAGE: java
CODE:
 @CustomValidator(
   type ="customValidatorName",
   fieldName = "myField",
   parameters = { @ValidationParameter( name = "paramName", value = "paramValue" ) }
 )


----------------------------------------

TITLE: Configuring Selective Property Chaining (XML)
DESCRIPTION: Shows how to chain two actions while copying only one specific property (prop1) from the first action to the second using the chainStack interceptor with includes parameter.

LANGUAGE: xml
CODE:
<action name="someAction" class="com.examples.SomeAction">
    <interceptor-ref name="basicStack"/>
	<result name="success" type="chain">otherAction</result>
</action>

<action name="otherAction" class="com.examples.OtherAction">
    <interceptor-ref name="chainStack">
		<param name="chain.includes">prop1</param>
	</interceptor-ref>
	<result name="success">good_result.ftl</result>
</action>

----------------------------------------

TITLE: Adding Struts Portlet Tiles Plugin Dependency in Maven
DESCRIPTION: This XML snippet shows how to include the struts-portlet-tiles-plugin as a dependency in a Maven-based web application.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.struts</groupId>
  <artifactId>struts2-portlet-tiles-plugin</artifactId>
  <version>${struts2.version}</version>
</dependency>

----------------------------------------

TITLE: Unit Testing Restful2ActionMapper Actions in Struts
DESCRIPTION: Provides an example of unit testing actions when using Restful2ActionMapper, including setup for authentication and testing different HTTP methods.

LANGUAGE: java
CODE:
public class MovieActionTest extends StrutsJUnit4TestCase<MovieActionTest>{
    
    @Before
    public void setUp() throws Exception {
        //assumes Basic authentication
        super.setUp();
        String credentials = "username:password";
        request.addHeader("authorization", "BASIC " + Base64.encodeBase64String(credentials.getBytes()));
    }
        
    @Test
    public void testIndex() throws Exception {
        request.setMethod("get"); //Http method should be set
        
        ActionProxy proxy = getActionProxy("/rest/movie/");                        
      
        proxy.setExecuteResult(false);
        String result = proxy.execute();
        
       //assertions ...        
    }
    
    @Test
    public void testView() throws Exception {
        request.setMethod("get"); //Http method should be set
              
        ActionProxy proxy = getActionProxy("/rest/movie/1");                        
        MovieAction movieAction = MovieAction.class.cast(proxy.getAction());
           
        proxy.setExecuteResult(false);
        
        String result = proxy.execute();
        //assertions ...
        assertEquals("1", movieAction.getId());         
    }
}

----------------------------------------

TITLE: TabbedPanel with Local and Remote Content
DESCRIPTION: Example of a tabbedpanel and panel tag utilizing local and remote content. Shows how to create tabs with static content and tabs that load content via AJAX.

LANGUAGE: XML
CODE:
<sx:head />
<sx:tabbedpanel id="test" >
   <sx:div id="one" label="one" theme="ajax" labelposition="top" >
       This is the first pane<br/>
       <s:form>
           <s:textfield name="tt" label="Test Text"/>  <br/>
           <s:textfield name="tt2" label="Test Text2"/>
       </s:form>
   </sx:div>
   <sx:div id="three" label="remote" theme="ajax" href="/AjaxTest.action" >
       This is the remote tab
   </sx:div>
</sx:tabbedpanel>

----------------------------------------

TITLE: Implementing Serialized Multiple Async Tasks
DESCRIPTION: Demonstrates how to implement multiple sequential async tasks using nested Callables.

LANGUAGE: java
CODE:
public class AsyncAction {

    public Callable<String> execute() throws InterruptedException {
        return new Callable<String>() {
            @Override
            public String call() throws Exception {
                waitForEvent1();
                return new Callable<String>() {

                    @Override
                    public String call() throws Exception {
                        waitForEvent2();
                        return "success";
                    }
                };
            }
        };
    }

    private void waitForEvent1() throws InterruptedException {
        Thread.sleep(40000);
    }

    private void waitForEvent2() throws InterruptedException {
        Thread.sleep(40000);
    }
}

----------------------------------------

TITLE: Configuring Struts 2 Stream Result in XML
DESCRIPTION: XML configuration for the TextResult Action showing how to set up a stream result type with content type and input stream parameters.

LANGUAGE: xml
CODE:
<action name="text-result" class="actions.TextResult">
    <result type="stream">
        <param name="contentType">text/html</param>
        <param name="inputName">inputStream</param>
    </result>
</action>

----------------------------------------

TITLE: Complex Object Iteration with Struts 2 Iterator Tag
DESCRIPTION: Shows how to iterate over a collection of complex objects (State objects) and access multiple properties of each object during iteration.

LANGUAGE: html
CODE:
<table style="margin-left:15px">
    <s:iterator value="states" >	
        <tr><td><s:property value="stateAbbr" /></td> <td><s:property value="stateName" /></tr>
    </s:iterator>
</table>

----------------------------------------

TITLE: Maven Settings for Staging Repository
DESCRIPTION: XML configuration for settings.xml to enable use of staging repository for archetypes that aren't in central repository.

LANGUAGE: xml
CODE:
<settings>
  <profiles>
    <profile>
      <id>staging</id>
      <repositories>
        <repository>
          <id>archetype</id>
          <url>https://repository.apache.org/content/repositories/snapshots/</url>
          <releases>
            <enabled>true</enabled>
            <checksumPolicy>fail</checksumPolicy>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <checksumPolicy>warn</checksumPolicy>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>
</settings>

----------------------------------------

TITLE: Defining User-agent in robots.txt for Struts Project
DESCRIPTION: This snippet sets the User-agent directive to allow all web crawlers to access the Struts project. It is the standard way to start a robots.txt file, indicating that the following rules apply to all bots.

LANGUAGE: robots.txt
CODE:
User-agent: *