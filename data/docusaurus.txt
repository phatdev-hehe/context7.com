TITLE: Creating New Docusaurus Project
DESCRIPTION: Command to scaffold a new Docusaurus website using the classic template.

LANGUAGE: bash
CODE:
npx create-docusaurus@latest my-website classic

----------------------------------------

TITLE: Starting Docusaurus Development Server
DESCRIPTION: Commands to navigate to project directory and start the development server.

LANGUAGE: bash
CODE:
cd my-website
npm run start

----------------------------------------

TITLE: Creating TypeScript Docusaurus Project
DESCRIPTION: Command to create a new Docusaurus website with TypeScript support.

LANGUAGE: bash
CODE:
npx create-docusaurus@latest my-website classic --typescript

----------------------------------------

TITLE: Configuring i18n Settings in Docusaurus
DESCRIPTION: Configuration setup for enabling multi-language support in docusaurus.config.js, including locale settings and HTML language attributes.

LANGUAGE: javascript
CODE:
export default {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'fr', 'fa'],
    localeConfigs: {
      en: {
        htmlLang: 'en-GB',
      },
      fa: {
        direction: 'rtl',
      },
    },
  },
};

----------------------------------------

TITLE: Building Docusaurus Site
DESCRIPTION: Command to build the static website files for production deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Exporting a Custom React Component in MDX
DESCRIPTION: This example demonstrates how to export a custom React component within an MDX file and use it alongside Markdown syntax.

LANGUAGE: jsx
CODE:
export const Highlight = ({children, color}) => (
  <span
    style={{
      backgroundColor: color,
      borderRadius: '2px',
      color: '#fff',
      padding: '0.2rem',
    }}>
    {children}
  </span>
);

<Highlight color="#25c2a0">Docusaurus green</Highlight> and <Highlight color="#1877F2">Facebook blue</Highlight> are my favorite colors.

I can write **Markdown** alongside my _JSX_!

----------------------------------------

TITLE: Customizing MDX Component Scope
DESCRIPTION: This example demonstrates how to customize the global MDX component scope in Docusaurus by wrapping the default MDXComponents.

LANGUAGE: jsx
CODE:
import React from 'react';
import MDXComponents from '@theme-original/MDXComponents';
import Highlight from '@site/src/components/Highlight';

export default {
  ...MDXComponents,
  Highlight,
};

----------------------------------------

TITLE: Creating Custom Remark Plugin for Section Prefixing
DESCRIPTION: Implementation of a custom remark plugin that adds section numbers to h2 headings

LANGUAGE: javascript
CODE:
import {visit} from 'unist-util-visit';

const plugin = (options) => {
  const transformer = async (ast) => {
    let number = 1;
    visit(ast, 'heading', (node) => {
      if (node.depth === 2 && node.children.length > 0) {
        node.children.unshift({
          type: 'text',
          value: `Section ${number}. `,
        });
        number++;
      }
    });
  };
  return transformer;
};

export default plugin;

----------------------------------------

TITLE: Creating a Separate React Component File
DESCRIPTION: This snippet shows how to create a separate .js file for a React component to be used in MDX documents.

LANGUAGE: jsx
CODE:
import React from 'react';

export default function Highlight({children, color}) {
  return (
    <span
      style={{
        backgroundColor: color,
        borderRadius: '2px',
        color: '#fff',
        padding: '0.2rem',
      }}>
      {children}
    </span>
  );
}

----------------------------------------

TITLE: Translating Homepage in Docusaurus with React
DESCRIPTION: This React component demonstrates how to create a translatable homepage in Docusaurus using the Translate component.

LANGUAGE: jsx
CODE:
import React from 'react';
import Translate from '@docusaurus/Translate';
import Layout from '@theme/Layout';

export default function Home() {
  return (
    <Layout>
      <h1 style={{margin: 20}}>
        <Translate description="The homepage main heading">
          Welcome to my Docusaurus translated site!
        </Translate>
      </h1>
    </Layout>
  );
}

----------------------------------------

TITLE: Complete Docusaurus KaTeX Configuration
DESCRIPTION: Full configuration example including plugin imports, presets, and stylesheet configuration for KaTeX integration.

LANGUAGE: javascript
CODE:
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

export default {
  title: 'Docusaurus',
  tagline: 'Build optimized websites quickly, focus on your content',
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          path: 'docs',
          remarkPlugins: [remarkMath],
          rehypePlugins: [rehypeKatex],
        },
      },
    ],
  ],
  stylesheets: [
    {
      href: 'https://cdn.jsdelivr.net/npm/katex@0.13.24/dist/katex.min.css',
      type: 'text/css',
      integrity:
        'sha384-odtC+0UGzzFL/6PNoE8rX/SPcQDXBJ+uRepguP4QkPCm2LBxH3FA3y+fKSiJ+AmM',
      crossorigin: 'anonymous',
    },
  ],
};

----------------------------------------

TITLE: Configuring MDX Plugins in Docusaurus ES Module Config
DESCRIPTION: Example of importing and configuring remark-math and rehype-katex plugins in docusaurus.config.js using ES Modules

LANGUAGE: javascript
CODE:
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

export default {
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          path: 'docs',
          remarkPlugins: [remarkMath],
          rehypePlugins: [rehypeKatex],
        },
      },
    ],
  ],
};

----------------------------------------

TITLE: Synchronized Tab Groups
DESCRIPTION: Implementation of synchronized tabs using groupId prop to maintain consistent selection across multiple tab groups.

LANGUAGE: jsx
CODE:
<Tabs groupId="operating-systems">
  <TabItem value="win" label="Windows">Use Ctrl + C to copy.</TabItem>
  <TabItem value="mac" label="macOS">Use Command + C to copy.</TabItem>
</Tabs>

----------------------------------------

TITLE: Accessing Available Exports in MDX
DESCRIPTION: This snippet shows how to access and display available exports such as frontMatter, toc, and contentTitle within an MDX file.

LANGUAGE: jsx
CODE:
import TOCInline from '@theme/TOCInline';
import CodeBlock from '@theme/CodeBlock';

The table of contents for this page, serialized:

<CodeBlock className="language-json">{JSON.stringify(toc, null, 2)}</CodeBlock>

The front matter of this page:

<ul>
  {Object.entries(frontMatter).map(([key, value]) => <li key={key}><b>{key}</b>: {value}</li>)}
</ul>

<p>The title of this page is: <b>{contentTitle}</b></p>

----------------------------------------

TITLE: Handling Static Assets in Docusaurus
DESCRIPTION: Explains how to reference static assets in Markdown and use the pathname:// protocol to disable automatic asset linking.

LANGUAGE: markdown
CODE:
![An image from the static](/img/docusaurus.png)

LANGUAGE: markdown
CODE:
![banner](pathname:///img/docusaurus-asset-example-banner.png)

----------------------------------------

TITLE: Implementing Themed Images in Docusaurus
DESCRIPTION: Demonstrates how to use the ThemedImage component to switch image sources based on the current theme.

LANGUAGE: jsx
CODE:
import useBaseUrl from '@docusaurus/useBaseUrl';
import ThemedImage from '@theme/ThemedImage';

<ThemedImage
  alt="Docusaurus themed image"
  sources={{
    light: useBaseUrl('/img/docusaurus_light.svg'),
    dark: useBaseUrl('/img/docusaurus_dark.svg'),
  }}
/>;

----------------------------------------

TITLE: Importing Code Snippets in MDX
DESCRIPTION: This snippet shows how to import and display code snippets from external files using raw-loader in MDX documents.

LANGUAGE: jsx
CODE:
import CodeBlock from '@theme/CodeBlock';
import MyComponentSource from '!!raw-loader!./myComponent';

<CodeBlock language="jsx">{MyComponentSource}</CodeBlock>

----------------------------------------

TITLE: Importing Markdown Partials
DESCRIPTION: This example demonstrates how to import and use Markdown partial files within other MDX documents.

LANGUAGE: mdx
CODE:
import PartialExample from './_markdown-partial-example.mdx';

<PartialExample name="Sebastien" />

----------------------------------------

TITLE: Configuring i18n in Docusaurus Config
DESCRIPTION: This snippet shows how to configure the Docusaurus site for internationalization, adding French as a supported language and including a language dropdown in the navbar.

LANGUAGE: javascript
CODE:
export default {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'fr'],
  },
  themeConfig: {
    navbar: {
      items: [
        // ...
        {
          type: 'localeDropdown',
          position: 'left',
        },
        // ...
      ],
    },
  },
  // ...
};

----------------------------------------

TITLE: Using Inline SVGs in Docusaurus
DESCRIPTION: Shows how to use inline SVGs in Docusaurus and apply theme-based styling.

LANGUAGE: jsx
CODE:
import DocusaurusSvg from './docusaurus.svg';

<DocusaurusSvg className="themedDocusaurus" />;

LANGUAGE: css
CODE:
[data-theme='light'] .themedDocusaurus [fill='#FFFF50'] {
  fill: greenyellow;
}

[data-theme='dark'] .themedDocusaurus [fill='#FFFF50'] {
  fill: seagreen;
}

----------------------------------------

TITLE: TOC Type Definition
DESCRIPTION: TypeScript interface definition for the table of contents structure

LANGUAGE: typescript
CODE:
declare const toc: {
  value: string;
  id: string;
  level: number;
}[];

----------------------------------------

TITLE: Chrome i18n JSON Format Example
DESCRIPTION: Example showing the Chrome i18n JSON format used for translating React code, layout labels, and theme configurations in Docusaurus. Includes message content and contextual descriptions for translators.

LANGUAGE: json
CODE:
{
  "myTranslationKey1": {
    "message": "Translated message 1",
    "description": "myTranslationKey1 is used on the homepage"
  },
  "myTranslationKey2": {
    "message": "Translated message 2",
    "description": "myTranslationKey2 is used on the FAQ page"
  }
}

----------------------------------------

TITLE: Linking to Files in Markdown
DESCRIPTION: Demonstrates how to create links to files using both JSX and Markdown syntax in Docusaurus.

LANGUAGE: markdown
CODE:
# My Markdown page

<a target="\_blank" href={require('./assets/docusaurus-asset-example.docx').default}> Download this docx </a>

or

[Download this docx using Markdown](./assets/docusaurus-asset-example.docx)

----------------------------------------

TITLE: Displaying Images Using ES Import Syntax
DESCRIPTION: Illustrates how to display images using ES import syntax and a JSX image tag.

LANGUAGE: jsx
CODE:
import myImageUrl from './assets/docusaurus-asset-example-banner.png';

<img src={myImageUrl} alt="Example banner" />;

----------------------------------------

TITLE: Inline TOC Component Usage
DESCRIPTION: Example of using the TOCInline component with custom filtering

LANGUAGE: jsx
CODE:
import TOCInline from '@theme/TOCInline';

<TOCInline
  toc={toc.filter((node) => node.level === 2 || node.level === 4)}
  minHeadingLevel={2}
  maxHeadingLevel={4}
/>

----------------------------------------

TITLE: Docusaurus Table of Contents Configuration
DESCRIPTION: Configuration for customizing the table of contents heading levels globally

LANGUAGE: javascript
CODE:
export default {
  themeConfig: {
    tableOfContents: {
      minHeadingLevel: 2,
      maxHeadingLevel: 5,
    },
  },
};

----------------------------------------

TITLE: Implementing React Component Translation
DESCRIPTION: Example of using Docusaurus translation APIs to make React components and text content translatable.

LANGUAGE: jsx
CODE:
import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import Translate, {translate} from '@docusaurus/Translate';

export default function Home() {
  return (
    <Layout>
      <h1>
        <Translate>Welcome to my website</Translate>
      </h1>
      <main>
        <Translate
          id="homepage.visitMyBlog"
          description="The homepage message to ask the user to visit my blog"
          values={{
            blogLink: (
              <Link to="https://docusaurus.io/blog">
                <Translate
                  id="homepage.visitMyBlog.linkLabel"
                  description="The label for the link to my blog">
                  blog
                </Translate>
              </Link>
            ),
          }}>
          {'You can also visit my {blogLink}'}
        </Translate>
        <img
          src="/img/home.png"
          alt={translate({
            message: 'Home icon',
            description: 'The homepage icon alt message',
          })}
        />
      </main>
    </Layout>
  );
}

----------------------------------------

TITLE: Implementing GitHub-style Themed Images
DESCRIPTION: Shows how to implement GitHub's image theming approach using CSS and Markdown in Docusaurus.

LANGUAGE: css
CODE:
[data-theme='light'] img[src$='#gh-dark-mode-only'],
[data-theme='dark'] img[src$='#gh-light-mode-only'] {
  display: none;
}

LANGUAGE: markdown
CODE:
![Docusaurus themed image](/img/docusaurus_keytar.svg#gh-light-mode-only)![Docusaurus themed image](/img/docusaurus_speed.svg#gh-dark-mode-only)

----------------------------------------

TITLE: Tab Styling with CSS
DESCRIPTION: CSS styling for custom tab appearances including color-coded tabs with selected state styling.

LANGUAGE: css
CODE:
.red {
  color: red;
}
.red[aria-selected='true'] {
  border-bottom-color: red;
}

.orange {
  color: orange;
}
.orange[aria-selected='true'] {
  border-bottom-color: orange;
}

.yellow {
  color: yellow;
}
.yellow[aria-selected='true'] {
  border-bottom-color: yellow;
}

----------------------------------------

TITLE: Basic Tab Implementation
DESCRIPTION: Example of basic tab implementation with default values showing fruit emojis. Demonstrates the basic structure of Tabs and TabItem components.

LANGUAGE: jsx
CODE:
<Tabs>
  <TabItem value="apple" label="Apple" default>
    This is an apple 🍎
  </TabItem>
  <TabItem value="orange" label="Orange">
    This is an orange 🍊
  </TabItem>
  <TabItem value="banana" label="Banana">
    This is a banana 🍌
  </TabItem>
</Tabs>

----------------------------------------

TITLE: Configuring Docusaurus for KaTeX (ES Modules)
DESCRIPTION: ES Modules configuration for enabling KaTeX in Docusaurus, including plugin imports and preset configuration.

LANGUAGE: javascript
CODE:
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

export default {
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          path: 'docs',
          remarkPlugins: [remarkMath],
          rehypePlugins: [rehypeKatex],
        },
      },
    ],
  ],
};

----------------------------------------

TITLE: Copying Untranslated Markdown Files for Translation
DESCRIPTION: These commands create the necessary directory structure and copy untranslated Markdown files to the French localization folder for translation.

LANGUAGE: bash
CODE:
mkdir -p i18n/fr/docusaurus-plugin-content-docs/current
cp -r docs/** i18n/fr/docusaurus-plugin-content-docs/current

mkdir -p i18n/fr/docusaurus-plugin-content-blog
cp -r blog/** i18n/fr/docusaurus-plugin-content-blog

mkdir -p i18n/fr/docusaurus-plugin-content-pages
cp -r src/pages/**.md i18n/fr/docusaurus-plugin-content-pages
cp -r src/pages/**.mdx i18n/fr/docusaurus-plugin-content-pages

----------------------------------------

TITLE: Displaying Images Using CommonJS Require in JSX
DESCRIPTION: Shows how to display images using inline CommonJS require in a JSX image tag.

LANGUAGE: jsx
CODE:
<img
  src={require('./assets/docusaurus-asset-example-banner.png').default}
  alt="Example banner"
/>

----------------------------------------

TITLE: Displaying Images Using Markdown Syntax
DESCRIPTION: Demonstrates how to display images using simple Markdown syntax in Docusaurus.

LANGUAGE: markdown
CODE:
![Example banner](./assets/docusaurus-asset-example-banner.png)

----------------------------------------

TITLE: Generating Translation Files with Docusaurus CLI
DESCRIPTION: This command uses the Docusaurus CLI to generate JSON translation files for the French locale.

LANGUAGE: bash
CODE:
npm run write-translations -- --locale fr

----------------------------------------

TITLE: Installing KaTeX Dependencies
DESCRIPTION: NPM command to install required remark-math and rehype-katex plugins for enabling math equations.

LANGUAGE: bash
CODE:
npm install --save remark-math@6 rehype-katex@7

----------------------------------------

TITLE: Configuring Plugin Options in Docusaurus
DESCRIPTION: Example showing how to pass configuration options to rehype-katex plugin

LANGUAGE: javascript
CODE:
import rehypeKatex from 'rehype-katex';

export default {
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          rehypePlugins: [
            [rehypeKatex, {strict: false}],
          ],
        },
      },
    ],
  ],
};

----------------------------------------

TITLE: Alternative NPM Installation
DESCRIPTION: Alternative command to initialize a new Docusaurus project using npm.

LANGUAGE: bash
CODE:
npm init docusaurus

----------------------------------------

TITLE: Meta-Specific Docusaurus Setup
DESCRIPTION: Special command for setting up Docusaurus in Meta open source projects.

LANGUAGE: bash
CODE:
scarf static-docs-bootstrap

----------------------------------------

TITLE: JSX Heading Link Component
DESCRIPTION: Demonstrates linking to heading IDs using the JSX Link component

LANGUAGE: jsx
CODE:
<Link to="#heading-id">link</Link>

----------------------------------------

TITLE: Rendering Block LaTeX Math Equations
DESCRIPTION: Example of writing block/display mode mathematical equations using LaTeX syntax wrapped in double dollar signs ($$).

LANGUAGE: latex
CODE:
$$
I = \int_0^{2\pi} \sin(x)\,dx
$$

----------------------------------------

TITLE: Rendering Inline LaTeX Math Equations
DESCRIPTION: Example of writing inline mathematical equations using LaTeX syntax wrapped in single dollar signs ($).

LANGUAGE: latex
CODE:
Let $f\colon[a,b]\to\R$ be Riemann integrable. Let $F\colon[a,b]\to\R$ be
$F(x)=\int_{a}^{x} f(t)\,dt$. Then $F$ is continuous, and at all $x$ such that
$f$ is continuous at $x$, $F$ is differentiable at $x$ with $F'(x)=f(x)$.

----------------------------------------

TITLE: Building Docusaurus Site with French Locale
DESCRIPTION: These commands demonstrate how to build the Docusaurus site, either for all locales or specifically for the French locale.

LANGUAGE: bash
CODE:
npm run build
# or
npm run build -- --locale fr

----------------------------------------

TITLE: Starting Docusaurus in French Locale
DESCRIPTION: This command starts the Docusaurus development server with the French locale.

LANGUAGE: bash
CODE:
npm run start -- --locale fr

----------------------------------------

TITLE: Markdown Heading Link Syntax
DESCRIPTION: Shows how to create links to heading IDs in Markdown

LANGUAGE: markdown
CODE:
[link](#heading-id)

----------------------------------------

TITLE: Installing MDX Math Plugins using NPM/Yarn
DESCRIPTION: Command to install remark-math and rehype-katex plugins for mathematical equation support in Docusaurus

LANGUAGE: bash
CODE:
npm install --save remark-math@5 rehype-katex@6

----------------------------------------

TITLE: Adding Language Dropdown Navigation
DESCRIPTION: Theme configuration to add a language selection dropdown in the navigation bar.

LANGUAGE: javascript
CODE:
export default {
  themeConfig: {
    navbar: {
      items: [
        {
          type: 'localeDropdown',
          position: 'left',
        },
      ],
    },
  },
};

----------------------------------------

TITLE: Docusaurus i18n Directory Structure
DESCRIPTION: Example directory structure showing how translation files should be organized in a Docusaurus project, including plugin-specific folders and configuration files.

LANGUAGE: bash
CODE:
website/i18n
└── fr
    ├── code.json  # Any text label present in the React code
    │              # Includes text labels from the themes' code
    ├── docusaurus-plugin-content-blog # translation data the blog plugin needs
    │   └── 2020-01-01-hello.md
    │
    ├── docusaurus-plugin-content-docs # translation data the docs plugin needs
    │   ├── current
    │   │   ├── doc1.md
    │   │   └── doc2.mdx
    │   └── current.json
    │
    └── docusaurus-theme-classic # translation data the classic theme needs
        ├── footer.json   # Text labels in your footer theme config
        └── navbar.json   # Text labels in your navbar theme config

----------------------------------------

TITLE: Importing Components in MDX
DESCRIPTION: This snippet shows how to import various components at the beginning of an MDX file in Docusaurus.

LANGUAGE: mdx
CODE:
import BrowserWindow from '@site/src/components/BrowserWindow';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import styles from './markdown-features-react.module.css';

----------------------------------------

TITLE: Importing Tab Components in MDX
DESCRIPTION: Basic imports required for using tabs in Docusaurus MDX files. Includes imports for BrowserWindow, Tabs, and TabItem components along with styles.

LANGUAGE: jsx
CODE:
import BrowserWindow from '@site/src/components/BrowserWindow';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import styles from './markdown-features-tabs-styles.module.css';

----------------------------------------

TITLE: Basic Markdown Heading Structure
DESCRIPTION: Demonstrates the basic syntax for creating different levels of Markdown headings

LANGUAGE: markdown
CODE:
## Level 2 title

### Level 3 title

#### Level 4 title

----------------------------------------

TITLE: Displaying File Structure in Markdown
DESCRIPTION: Shows an example file structure for Docusaurus documentation and associated assets.

LANGUAGE: markdown
CODE:
# Your doc
/website/docs/myFeature.mdx

# Some assets you want to use
/website/docs/assets/docusaurus-asset-example-banner.png
/website/docs/assets/docusaurus-asset-example.docx

----------------------------------------

TITLE: Importing MDX Components in Docusaurus
DESCRIPTION: Imports required tab components from Docusaurus theme for creating tabbed content.

LANGUAGE: mdx
CODE:
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

----------------------------------------

TITLE: Initializing Docusaurus Project with create-docusaurus
DESCRIPTION: This command initializes a new Docusaurus site using the classic template.

LANGUAGE: bash
CODE:
npx create-docusaurus@latest website classic