TITLE: Transforming Data using Ramda's Functional Composition
DESCRIPTION: Demonstrates a more functional approach to data transformation using Ramda's pipe, filter, map, and fromPairs functions.

LANGUAGE: javascript
CODE:
R.pipe(
    R.filter(notSmall), 
    R.map(R.props(['symbol', 'pop'])),
    R.fromPairs)(states) //=> {"CT": 3574097, "MA": 6547629}

----------------------------------------

TITLE: Reusable Ramda Functions
DESCRIPTION: Defines reusable functions using Ramda operations with Haskell-style type signatures for line item operations.

LANGUAGE: javascript
CODE:
const descriptions = R.pluck('description');
const lineItemTotals = R.map(item => item.quantity * item.price);
const invoiceTotal = reduce((total, item) => total + item.price * item.quantity, 0)
const inexpensive = R.filter(item => item.price < 10.00);
const totalItems = R.compose(R.reduce(R.add, 0), R.pluck('quantity'));
const warehousePickList = R.project(['productId', 'quantity'])

----------------------------------------

TITLE: Decomposed Totaling Functions
DESCRIPTION: Shows how to break down complex operations into simpler, more reusable functions using Ramda's pipe and other utilities.

LANGUAGE: javascript
CODE:
const itemTotal = (item) => item.price * item.quantity;
const lineItemTotals = R.map(itemTotal);
const invoiceTotal = R.pipe(lineItemTotals, R.sum);

----------------------------------------

TITLE: Ramda Operations on Line Items
DESCRIPTION: Demonstrates various Ramda operations like pluck, map, reduce, filter, compose and project on the line items data structure.

LANGUAGE: javascript
CODE:
R.pluck('description')(lineItems);
R.map(item => item.quantity * item.price)(lineItems);
R.reduce((total, item) => total + item.price * item.quantity, 0)(lineItems);
R.filter(item => item.price < 10.00, lineItems);
R.compose(R.reduce(R.add, 0), R.pluck('quantity'))(lineItems);
R.project(['productId', 'quantity'])(lineItems);

----------------------------------------

TITLE: Creating New Objects with Modified Properties using Ramda's assoc
DESCRIPTION: Illustrates how Ramda's assoc function creates a new object with a modified property, preserving the original object's immutability.

LANGUAGE: javascript
CODE:
var barney = {name: "Barney", age: 27}
var fred = {name: "Fred", age: 29}
barney.bestFriend = fred;
fred.bestFriend = barney;

var fred2 = R.assoc('age', 30, fred);

fred2.age; //=> 30
fred.age; //> 29
fred2.bestFriend === barney; //=> true

----------------------------------------

TITLE: Demonstrating Ramda's Immutable Data Handling
DESCRIPTION: Shows how Ramda functions like append create new data structures instead of modifying existing ones.

LANGUAGE: javascript
CODE:
var numbers = [8, 6, 7, 5, 3, 0];
var jenny = R.append(9, numbers);
numbers; //=> [8, 6, 7, 5, 3, 0]
jenny; //=> [8, 6, 7, 5, 3, 0, 9]

----------------------------------------

TITLE: Accessing Properties Immutably with Ramda
DESCRIPTION: Demonstrates how to access object properties using Ramda's immutable approach with the prop function.

LANGUAGE: javascript
CODE:
var getName = R.prop('name');
getName(person); //=> "Fred"
// or 
R.prop('name', person); //=> "Fred"

----------------------------------------

TITLE: Comparing Mutable and Immutable Array Operations
DESCRIPTION: Compares the behavior of native JavaScript array methods (which mutate the original array) with Ramda's immutable equivalents.

LANGUAGE: javascript
CODE:
var a1 = [1, 2, 3];
var b1 = a1.reverse(); //=> [3, 2, 1]
a1; //=> [3, 2, 1]

var a2 = [1, 2, 3];
var b2 = R.reverse(a2); //=> [3, 2, 1]
a2; //=> [1, 2, 3]

----------------------------------------

TITLE: Using Ramda's reduce with Immutable Operations
DESCRIPTION: Shows a more idiomatic use of Ramda's reduce function, using assoc for immutable updates to the accumulator.

LANGUAGE: javascript
CODE:
R.reduce((accum, state) => notSmall(state) ? 
                           R.assoc(state.symbol, state.pop, accum) : 
                           accum,
{}, states);  //=> {"CT": 3574097, "MA": 6547629}

----------------------------------------

TITLE: Importing Ramda in Node.js
DESCRIPTION: Examples of requiring Ramda in Node.js, showing both full library and individual function imports

LANGUAGE: javascript
CODE:
var R = require('ramda');

LANGUAGE: javascript
CODE:
var map = require('ramda/src/map');

----------------------------------------

TITLE: Installing Ramda via NPM
DESCRIPTION: Instructions for installing Ramda using Node Package Manager (npm)

LANGUAGE: bash
CODE:
$ npm install ramda

----------------------------------------

TITLE: Initializing Line Items Data Structure in JavaScript
DESCRIPTION: Defines a sample array of line items containing product information including ID, description, price and quantity.

LANGUAGE: javascript
CODE:
var lineItems = [
  {
    productId: "783490",
    description: "Rubik's Cube, 3x3x3",
    price: 12.99,
    quantity: 1
  },
  {
    productId: "134672",
    description: "Sudoku Book",
    price: 6.50,
    quantity: 3
  },
  {
    productId: "162075",
    description: "Sam Lloyd's 15 puzzle",
    price: 3.25,
    quantity: 5
  }
];

----------------------------------------

TITLE: Including Ramda via Browser Script Tags
DESCRIPTION: Various methods to include Ramda in browser environments using script tags, including local files and CDN options

LANGUAGE: html
CODE:
<script src="path/to/yourCopyOf/ramda.js"></script>

LANGUAGE: html
CODE:
<script src="path/to/yourCopyOf/ramda.min.js"></script>

LANGUAGE: html
CODE:
<script src="//cdnjs.cloudflare.com/ajax/libs/ramda/0.16.0/ramda.min.js"></script>

LANGUAGE: html
CODE:
<script src="//cdn.jsdelivr.net/ramda/0.16.0/ramda.min.js"></script>
<script src="//cdn.jsdelivr.net/ramda/0.16/ramda.min.js"></script>
<script src="//cdn.jsdelivr.net/ramda/latest/ramda.min.js"></script>

----------------------------------------

TITLE: Building Custom Ramda Bundle
DESCRIPTION: Command for creating a custom Ramda build with specific functions to reduce file size

LANGUAGE: bash
CODE:
./scripts/build -- src/compose.js src/reduce.js src/filter.js > dist/ramda.custom.js

----------------------------------------

TITLE: Demonstrating Non-Referential Transparency in JavaScript
DESCRIPTION: This code snippet illustrates a function that is not referentially transparent. It uses and modifies a global variable, causing side effects and returning different values for the same input.

LANGUAGE: javascript
CODE:
var counter = 0;
var incrBy = function(n) {
  counter = counter + n;
  return counter;
}

----------------------------------------

TITLE: Loading Ramda REPL in HTML
DESCRIPTION: Instructions for loading the Ramda REPL in a web browser. The REPL uses pre-transpiled code and the Google Traceur compiler to support ES6 features. Some pre-loaded examples in the REPL demonstrate ES6 functionality.

LANGUAGE: HTML
CODE:
repl.html

----------------------------------------

TITLE: Demonstrating Mutable State Operations in JavaScript
DESCRIPTION: Shows traditional mutable state operations in JavaScript, including direct property assignment and getter/setter methods.

LANGUAGE: javascript
CODE:
person.setName('Fred');
person.getName(); //=> "Fred"

LANGUAGE: javascript
CODE:
person.name = 'Fred';
person.name; //=> "Fred"

----------------------------------------

TITLE: Using Ramda's reduce with Mutable Accumulator
DESCRIPTION: Demonstrates how Ramda's reduce can be used with a mutable accumulator, though this is not the recommended approach.

LANGUAGE: javascript
CODE:
var states = [
    {symbol: 'CT', name: 'Connecticut', pop: 3574097},
    {symbol: 'ME', name: 'Maine', pop: 1328361},
    {symbol: 'MA', name: 'Massachusetts', pop: 6547629},
    {symbol: 'NH', name: 'New Hampshire', pop: 1316470},
    {symbol: 'RI', name: 'Rhode Island', pop: 1052567},
    {symbol: 'VT', name: 'Vermont', pop: 623741},
];

var notSmall = (state) => state.pop >= 2000000;

R.reduce((accum, state) => {
    if (notSmall(state)) {
        accum[state.symbol] = state.pop;
    }
    return accum;
}, {}, states); //=> {"CT": 3574097, "MA": 6547629}

----------------------------------------

TITLE: Building Documentation Files
DESCRIPTION: Command to rebuild the documentation pages using make.

LANGUAGE: bash
CODE:
make docs/index.html

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Commands for starting the local development server, with options for specifying a custom port number when the default port 8080 is in use.

LANGUAGE: bash
CODE:
npm start

LANGUAGE: bash
CODE:
npm start -- -p 8081

----------------------------------------

TITLE: Installing and Using Specific Node Version
DESCRIPTION: Commands for installing and using the required Node version using nvm (Node Version Manager).

LANGUAGE: bash
CODE:
nvm install && nvm use

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required npm dependencies for the project.

LANGUAGE: bash
CODE:
npm i

----------------------------------------

TITLE: Building CSS Styles
DESCRIPTION: Command to rebuild the main CSS file from Less source files using make.

LANGUAGE: bash
CODE:
make style.css