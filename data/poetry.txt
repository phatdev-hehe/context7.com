TITLE: PEP 621 Project Configuration
DESCRIPTION: Example pyproject.toml configuration using the new PEP 621 project section format for package metadata.

LANGUAGE: toml
CODE:
[project]
name = "poetry-demo"
version = "0.1.0"
description = ""
authors = [
    {name = "SÃ©bastien Eustace", email = "sebastien@eustace.io"}
]
readme = "README.md"
requires-python = ">=3.8"

[tool.poetry]
packages = [{include = "poetry_demo"}]

[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"

----------------------------------------

TITLE: Configuring Private Package Indices in Poetry
DESCRIPTION: TOML configuration examples for setting up private package indices, including source-specific dependencies and index preferences.

LANGUAGE: toml
CODE:
[tool.poetry.dependencies]
# ...
pendulum = {version = "^2.0.5", source = "my-index"}

[[tool.poetry.source]]
name = "my-index"
url = "https://example.com"

LANGUAGE: toml
CODE:
[[tool.poetry.source]]
name = "my-index"
url = "https://example.com"
secondary = true

LANGUAGE: toml
CODE:
[[tool.poetry.source]]
name = "my-index"
url = "https://example.com"
default = true

----------------------------------------

TITLE: Managing Python Environments with Poetry CLI
DESCRIPTION: Commands for managing Python virtual environments using Poetry's env command, including selecting Python versions and viewing environment information.

LANGUAGE: bash
CODE:
poetry env use /full/path/to/python

LANGUAGE: bash
CODE:
poetry env use python3.7

LANGUAGE: bash
CODE:
poetry env use 3.7

LANGUAGE: bash
CODE:
poetry env use system

LANGUAGE: bash
CODE:
poetry env info

LANGUAGE: bash
CODE:
poetry env info --path

LANGUAGE: bash
CODE:
poetry env list

LANGUAGE: bash
CODE:
poetry env remove /full/path/to/python
poetry env remove python3.7
poetry env remove 3.7
poetry env remove test-O3eWbxRl-py3.7

----------------------------------------

TITLE: Environment Variable Configuration in Poetry
DESCRIPTION: Examples of using environment variables to configure Poetry settings and credentials.

LANGUAGE: bash
CODE:
export POETRY_VIRTUALENVS_PATH=/path/to/virtualenvs/directory

LANGUAGE: bash
CODE:
export POETRY_HTTP_BASIC_MY_REPOSITORY_PASSWORD=secret

LANGUAGE: bash
CODE:
poetry config virtualenvs.create false --local

----------------------------------------

TITLE: Adding Dependencies with Poetry
DESCRIPTION: Examples of using Poetry's add command with various dependency specifications and constraints.

LANGUAGE: bash
CODE:
poetry add "requests[security]"

LANGUAGE: bash
CODE:
poetry add requests@latest

----------------------------------------

TITLE: Configuring PyPI Authentication and Certificates
DESCRIPTION: Commands for configuring PyPI API tokens and custom certificates for package repositories.

LANGUAGE: bash
CODE:
poetry config pypi-token.pypi my-token

LANGUAGE: bash
CODE:
poetry config certificates.foo.cert /path/to/ca.pem
poetry config certificates.foo.client-cert /path/to/client.pem

----------------------------------------

TITLE: Project Plugin Requirements
DESCRIPTION: Configuration to specify required Poetry plugins and minimum Poetry version for a project.

LANGUAGE: toml
CODE:
[tool.poetry.requires-plugins]
my-application-plugin = ">1.0"

LANGUAGE: toml
CODE:
[tool.poetry]
requires-poetry = ">=2.0"

----------------------------------------

TITLE: Defining Poetry Scripts in pyproject.toml
DESCRIPTION: Example of defining custom scripts in the pyproject.toml configuration file that can be executed using the new script command.

LANGUAGE: toml
CODE:
[tool.poetry.scripts]
my-script = "my_module:main"

----------------------------------------

TITLE: Configuring Custom Package Paths in Poetry
DESCRIPTION: Demonstrates how to specify custom package locations using the packages property in pyproject.toml when the project doesn't follow standard structure.

LANGUAGE: toml
CODE:
[tool.poetry]
# ...
packages = [
    { include = "mypackage" },
    { include = "extra_package/**/*.py" },
]

----------------------------------------

TITLE: Poetry Dependency Groups Configuration
DESCRIPTION: Example of declaring dependency groups in pyproject.toml file for organizing project dependencies

LANGUAGE: toml
CODE:
[tool.poetry.group.test]  # This section can be omitted

[tool.poetry.group.test.dependencies]
pytest = "^7.1.0"
pytest-mock = "*"

----------------------------------------

TITLE: Configuring PEP-517 Build System in TOML
DESCRIPTION: Demonstrates how to set up the build-system section in pyproject.toml to make a project compliant with PEP-517 using Poetry as the build backend.

LANGUAGE: toml
CODE:
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

----------------------------------------

TITLE: Updated Poetry Build System Configuration
DESCRIPTION: New build-system configuration using poetry-core for Poetry 1.1.0+

LANGUAGE: toml
CODE:
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

----------------------------------------

TITLE: Building with Custom Configuration
DESCRIPTION: Example of using the new --config-settings parameter with poetry build command

LANGUAGE: bash
CODE:
poetry build --config-settings local-version=some-local

----------------------------------------

TITLE: Installing Poetry using Standalone Installer
DESCRIPTION: Commands for installing Poetry using the new standalone installer that vendorizes dependencies. Includes options for installing preview versions and specific versions.

LANGUAGE: bash
CODE:
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python

LANGUAGE: bash
CODE:
python get-poetry.py --preview

LANGUAGE: bash
CODE:
python get-poetry.py --version 0.7.0

----------------------------------------

TITLE: Implementing Generic Poetry Plugin
DESCRIPTION: Python code demonstrating how to create a generic Poetry plugin by implementing the Plugin interface.

LANGUAGE: python
CODE:
from cleo.io.io import IO

from poetry.plugins.plugin import Plugin
from poetry.poetry import Poetry


class MyPlugin(Plugin):

    def activate(self, poetry: Poetry, io: IO):
        version = self.get_custom_version()
        io.write_line(f"Setting package version to <b>{version}</b>")
        poetry.package.set_version(version)

    def get_custom_version(self) -> str:
        ...

----------------------------------------

TITLE: Creating Application Plugin Command
DESCRIPTION: Implementation of a Poetry application plugin that adds custom commands to the CLI.

LANGUAGE: python
CODE:
from cleo.commands.command import Command
from poetry.plugins.application_plugin import ApplicationPlugin


class CustomCommand(Command):

    name = "my-command"

    def handle(self) -> int:
        self.line("My command")

        return 0


def factory():
    return CustomCommand()


class MyApplicationPlugin(ApplicationPlugin):
    def activate(self, application):
        application.command_loader.register_factory("my-command", factory)

----------------------------------------

TITLE: Installing Poetry Dependencies with Group Options
DESCRIPTION: Various commands demonstrating how to install dependencies with different group configurations.

LANGUAGE: bash
CODE:
poetry install --with docs

LANGUAGE: bash
CODE:
poetry add pytest --group test

LANGUAGE: bash
CODE:
poetry install --without test,docs

LANGUAGE: bash
CODE:
poetry install --default

LANGUAGE: bash
CODE:
poetry install --only docs

LANGUAGE: bash
CODE:
poetry remove mkdocs --group docs

LANGUAGE: bash
CODE:
poetry install --sync

----------------------------------------

TITLE: Adding Git Dependencies with Poetry CLI
DESCRIPTION: Demonstrates how to use the 'add' command to include Git dependencies in a Poetry project. This feature allows specifying packages directly from Git repositories.

LANGUAGE: bash
CODE:
poetry add pendulum --git https://github.com/sdispater/pendulum.git

----------------------------------------

TITLE: Implementing Event Handler Plugin
DESCRIPTION: Example of a Poetry plugin that implements event handling to load environment variables from a .env file.

LANGUAGE: python
CODE:
from cleo.events.console_events import COMMAND
from cleo.events.console_command_event import ConsoleCommandEvent
from cleo.events.event_dispatcher import EventDispatcher
from dotenv import load_dotenv
from poetry.console.application import Application
from poetry.console.commands.env_command import EnvCommand
from poetry.plugins.application_plugin import ApplicationPlugin


class MyApplicationPlugin(ApplicationPlugin):
    def activate(self, application: Application):
        application.event_dispatcher.add_listener(COMMAND, self.load_dotenv)

    def load_dotenv(
        self,
        event: ConsoleCommandEvent,
        event_name: str,
        dispatcher: EventDispatcher
    ) -> None:
        command = event.command
        if not isinstance(command, EnvCommand):
            return

        io = event.io

        if io.is_debug():
            io.write_line("<debug>Loading environment variables.</debug>")

        load_dotenv()

----------------------------------------

TITLE: Adding Path Dependencies with Poetry CLI
DESCRIPTION: Shows how to use the 'add' command to include local path dependencies in a Poetry project. This can be used for directories, tar.gz files, or wheel files.

LANGUAGE: bash
CODE:
poetry add my-package --path ../my-package/
poetry add my-package --path ../my-package/dist/my-package-0.1.0.tar.gz
poetry add my-package --path ../my-package/dist/my_package-0.1.0.whl

----------------------------------------

TITLE: Specifying Directory Dependencies in pyproject.toml
DESCRIPTION: Illustrates how to define directory dependencies directly in the pyproject.toml file. This allows including local packages as dependencies in a Poetry project.

LANGUAGE: toml
CODE:
[tool.poetry.dependencies]
my-package = { path = "../my-package/" }

----------------------------------------

TITLE: Clearing Package Cache with Poetry CLI
DESCRIPTION: Demonstrates the usage of the new 'cache:clear' command to clear caches for specific package versions or entire repositories. This is useful for resolving cache-related issues.

LANGUAGE: bash
CODE:
poetry cache:clear pypy:pendulum:1.4.4
poetry cache:clear pypy --all

----------------------------------------

TITLE: Displaying Dependency Resolver Error Messages in Poetry
DESCRIPTION: Examples of error messages from the new dependency resolver in Poetry 0.10.0, showing clearer explanations for version solving failures.

LANGUAGE: text
CODE:
[SolverProblemError]
Because demo depends on django (2.0.1) which requires Python >=3.4,
version solving failed.

LANGUAGE: text
CODE:
[SolverProblemError]
Because masonite (1.6.7) depends on both cryptography (2.1.4) and cryptography (2.2.2),
 masonite is forbidden.
So, because demo depends on masonite (1.6.7), version solving failed.

----------------------------------------

TITLE: Defining Multiple Constraint Dependencies in TOML
DESCRIPTION: Shows how to specify different version ranges for a dependency based on target Python versions in the pyproject.toml file.

LANGUAGE: toml
CODE:
[tool.poetry.dependencies]
foo = [
    {version = "<=1.9", python = "^2.7"},
    {version = "^2.0", python = "^3.4"}
]

----------------------------------------

TITLE: Initializing a Poetry Project with the init Command
DESCRIPTION: Demonstrates how to use the new init command in Poetry 0.10.0 to create a pyproject.toml file interactively.

LANGUAGE: bash
CODE:
poetry init

----------------------------------------

TITLE: Configuring Poetry to Create Virtualenvs in Project Directory
DESCRIPTION: Shows how to use the config command to set and unset the new settings.virtualenvs.in-project option in Poetry 0.10.0.

LANGUAGE: bash
CODE:
poetry config settings.virtualenvs.in-project true

LANGUAGE: bash
CODE:
poetry config settings.virtualenvs.in-project --unset

----------------------------------------

TITLE: Configuring Maturin Build Backend
DESCRIPTION: Example configuration in pyproject.toml for using Maturin as a custom build backend

LANGUAGE: toml
CODE:
[build-system]
requires = ["maturin>=0.8.1,<0.9"]
build-backend = "maturin"

----------------------------------------

TITLE: Defining Multiple Dependency Groups
DESCRIPTION: Example showing how to define both default dependencies and test group dependencies in Poetry's configuration.

LANGUAGE: toml
CODE:
[tool.poetry.dependencies]  # Default dependency group
httpx = "*"
pendulum = "*"

[tool.poetry.group.test.dependencies]
pytest = "^6.0.0"
pytest-mock = "*"

----------------------------------------

TITLE: Configuring non-package mode in pyproject.toml
DESCRIPTION: TOML configuration to set package-mode to false for non-package projects.

LANGUAGE: toml
CODE:
[tool.poetry]
package-mode = false

----------------------------------------

TITLE: Installing Poetry 2.0.1 on Linux/macOS/WSL
DESCRIPTION: Official installer command for Poetry 2.0.1 on Unix-like systems using curl

LANGUAGE: bash
CODE:
$ curl -sSL https://install.python-poetry.org | python3 -

----------------------------------------

TITLE: Installing Poetry 2.0.1 on Windows
DESCRIPTION: Official installer command for Poetry 2.0.1 on Windows using PowerShell

LANGUAGE: powershell
CODE:
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -

----------------------------------------

TITLE: Upgrading Poetry via pipx
DESCRIPTION: Command to upgrade Poetry to version 2.1.0 using pipx package manager

LANGUAGE: bash
CODE:
$ pipx upgrade poetry

----------------------------------------

TITLE: Transformed Dependencies Configuration
DESCRIPTION: Example of how Poetry 1.6.0 transforms overlapping dependency markers into mutually exclusive markers

LANGUAGE: toml
CODE:
my-package = [
    { version = ">=1.0", markers = "python_version >= '3.10' and sys_platform != 'win32'" },
    { version = "<2", markers = "python_version < '3.10' and sys_platform != 'win32'" },
    { version = ">=1.5", markers = "python_version >= '3.10' and sys_platform = 'win32'" },
    { version = ">=1.5,<2", markers = "python_version < '3.10' and sys_platform == 'win32'" },
]

----------------------------------------

TITLE: Upgrading Poetry using pipx
DESCRIPTION: Command to upgrade Poetry to version 1.8.0 using pipx.

LANGUAGE: bash
CODE:
$ pipx upgrade poetry

----------------------------------------

TITLE: Upgrading Poetry using official installer
DESCRIPTION: Command to upgrade Poetry to version 1.8.0 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Directory Dependency Configuration
DESCRIPTION: Configuration for setting up an editable directory dependency in pyproject.toml

LANGUAGE: toml
CODE:
[tool.poetry.dependencies]
my-package = {path = "../path/to/dependency", develop = true}

----------------------------------------

TITLE: Upgrading Poetry via pipx
DESCRIPTION: Command to upgrade an existing Poetry installation using pipx package manager

LANGUAGE: bash
CODE:
$ pipx upgrade poetry

----------------------------------------

TITLE: Self-updating Poetry pre-2.0.0
DESCRIPTION: Command to self-update Poetry for versions before 2.0.0

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Upgrading Poetry via official installer
DESCRIPTION: Command to self-update Poetry when installed using the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Installing Python Version
DESCRIPTION: Commands to install Python 3.13 and configure it for use in a Poetry project

LANGUAGE: bash
CODE:
poetry python install 3.13
poetry env use 3.13

----------------------------------------

TITLE: Upgrading Poetry to 1.7.0 using pipx
DESCRIPTION: Command to upgrade Poetry to version 1.7.0 using pipx package manager.

LANGUAGE: bash
CODE:
$ pipx upgrade poetry

----------------------------------------

TITLE: Upgrading Poetry to 1.7.0 using self-update
DESCRIPTION: Command to upgrade Poetry to version 1.7.0 using the built-in self-update feature for installations done with the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Configuring Setup File Generation in Poetry
DESCRIPTION: TOML configuration to explicitly enable setup.py file generation, which is disabled by default in Poetry 1.4.0

LANGUAGE: toml
CODE:
[tool.poetry.build]
generate-setup-file = true

----------------------------------------

TITLE: Updating Poetry to version 1.3.0 using Bash
DESCRIPTION: Command to update Poetry to version 1.3.0 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Configuring Poetry to generate setup.py file in TOML
DESCRIPTION: TOML configuration to explicitly enable the generation of setup.py file in Poetry, which will be disabled by default in future versions.

LANGUAGE: toml
CODE:
[tool.poetry.build]
generate-setup-file = true

----------------------------------------

TITLE: Installing Poetry 1.2.0 via Self Update
DESCRIPTION: Command to update an existing Poetry installation to version 1.2.0

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Installing Poetry via New Installer
DESCRIPTION: Commands to install Poetry using the new standalone installer on different platforms

LANGUAGE: bash
CODE:
# Linux, macOS, Windows (WSL)
$ curl -sSL https://install.python-poetry.org | python3 -

# Windows (Powershell)
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -

----------------------------------------

TITLE: Updating Poetry to 1.2.0rc2 Preview Version
DESCRIPTION: Command to update an existing Poetry installation to version 1.2.0rc2 using the preview flag. Requires Poetry to be previously installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update --preview

----------------------------------------

TITLE: Installing Project with Yanked Dependencies Warning
DESCRIPTION: Shows the warning message when installing a project that contains yanked package versions

LANGUAGE: shell
CODE:
$ poetry install

[...]
Warning: The file chosen for install of cryptography 37.0.3 (cryptography-37.0.3-cp36-abi3-manylinux_2_24_x86_64.whl) is yanked. Reason for being yanked: Regression in OpenSSL.

----------------------------------------

TITLE: Updating Poetry to 1.2.0rc1
DESCRIPTION: Command to update an existing Poetry installation to version 1.2.0rc1 using the preview flag

LANGUAGE: bash
CODE:
$ poetry self update --preview

----------------------------------------

TITLE: Adding Yanked Package Version Warning Example
DESCRIPTION: Demonstrates the warning message when attempting to add a yanked version of a package (cryptography 37.0.3)

LANGUAGE: shell
CODE:
$ poetry add cryptography==37.0.3

[...]
Warning: The locked version 37.0.3 for cryptography is a yanked version. Reason for being yanked: Regression in OpenSSL.

----------------------------------------

TITLE: Adding Git Dependency with Subdirectory
DESCRIPTION: Example of adding a git dependency that specifies a subdirectory where the package definition is located

LANGUAGE: shell
CODE:
$ poetry add git+https://github.com/myorg/mypackage_with_subdirs.git#subdirectory=subdir

----------------------------------------

TITLE: Updating Poetry to Version 1.2.0a2
DESCRIPTION: Command to update Poetry to version 1.2.0a2 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update --preview

----------------------------------------

TITLE: Configuring Test Dependency Group in Poetry
DESCRIPTION: Example of declaring a test dependency group in Poetry's configuration file, showing how to specify test-specific dependencies.

LANGUAGE: toml
CODE:
[tool.poetry.group.test]  # This part can be left out

[tool.poetry.group.test.dependencies]
pytest = "^6.0.0"
pytest-mock = "*"

----------------------------------------

TITLE: Configuring Optional Documentation Dependencies
DESCRIPTION: Example of declaring an optional documentation dependency group with specific dependencies.

LANGUAGE: toml
CODE:
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"

----------------------------------------

TITLE: Installing Poetry via New Script
DESCRIPTION: Command to install Poetry using the new install-poetry.py script which replaces the deprecated get-poetry.py.

LANGUAGE: bash
CODE:
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -

----------------------------------------

TITLE: Configuring Poetry Plugin in pyproject.toml
DESCRIPTION: TOML configuration showing how to declare a Poetry plugin package with its dependencies and plugin registration.

LANGUAGE: toml
CODE:
[tool.poetry]
name = "my-poetry-plugin"
version = "1.0.0"

# ...
[tool.poetry.dependencies]
python = "~2.7 || ^3.7"
poetry = "^1.2"

[tool.poetry.plugins."poetry.plugin"]
demo = "poetry_demo_plugin.plugin:MyPlugin"

----------------------------------------

TITLE: Updating Poetry via CLI
DESCRIPTION: Command to update Poetry to version 1.1.0 using the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Disabling New Installer Configuration
DESCRIPTION: Command to disable the new experimental installer if issues are encountered

LANGUAGE: bash
CODE:
poetry config experimental.new-installer false

----------------------------------------

TITLE: Legacy Poetry Build System Configuration
DESCRIPTION: Old build-system configuration in pyproject.toml before Poetry 1.1.0

LANGUAGE: toml
CODE:
[build-system]
requires = ["poetry>=1.1.0"]
build-backend = "poetry.masonry.api"

----------------------------------------

TITLE: Poetry Install with Untracked Removal
DESCRIPTION: Command to install dependencies while removing untracked packages

LANGUAGE: shell
CODE:
poetry install --remove-untracked

----------------------------------------

TITLE: Poetry Publish Dry Run
DESCRIPTION: Command to test package publishing without actual upload

LANGUAGE: shell
CODE:
poetry publish --dry-run

----------------------------------------

TITLE: Configuring Poetry PyPI Fallback in Bash
DESCRIPTION: This command disables the fallback mechanism for missing dependencies in Poetry's PyPI interactions. It's used when you want to avoid the potentially slow fallback process and manually specify missing dependencies.

LANGUAGE: bash
CODE:
poetry config settings.pypi.fallback false

----------------------------------------

TITLE: Updating Poetry to Latest Version in Bash
DESCRIPTION: This command updates Poetry to the latest stable version. It's part of the new self:update feature in Poetry 0.8.0 that simplifies the process of keeping Poetry up-to-date.

LANGUAGE: bash
CODE:
poetry self:update

----------------------------------------

TITLE: Updating Poetry to Preview Version in Bash
DESCRIPTION: This command updates Poetry to the latest preview version. It's useful for testing new features or fixes that are not yet in a stable release.

LANGUAGE: bash
CODE:
poetry self:update --preview

----------------------------------------

TITLE: Updating Poetry to Specific Version in Bash
DESCRIPTION: This command updates Poetry to a specific version (0.8.0 in this example). It allows for precise control over the version of Poetry being used.

LANGUAGE: bash
CODE:
poetry self:update 0.8.0

----------------------------------------

TITLE: Adding Local File Dependency in TOML
DESCRIPTION: This TOML snippet demonstrates how to add a local file (wheel or sdist) as a dependency in the pyproject.toml file. It's part of the new feature in Poetry 0.8.0 that supports local file dependencies.

LANGUAGE: toml
CODE:
[dependencies]
demo = { file = "./distributions/demo-0.1.0-py2.py3-none-any.whl" }

----------------------------------------

TITLE: Executing Poetry Scripts
DESCRIPTION: Command to execute custom scripts defined in pyproject.toml using the new script command.

LANGUAGE: bash
CODE:
poetry script my-script

----------------------------------------

TITLE: Configuring Trove Classifiers
DESCRIPTION: Example of specifying trove classifiers in the pyproject.toml configuration file for package metadata.

LANGUAGE: toml
CODE:
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

----------------------------------------

TITLE: Upgrading Poetry Installation Commands
DESCRIPTION: Commands to upgrade an existing Poetry installation to version 2.0.0 using either pipx or the official installer.

LANGUAGE: bash
CODE:
$ pipx upgrade poetry

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Specifying Source Directory for Packages in Poetry
DESCRIPTION: Shows how to configure package location when it's stored in a source directory using the from parameter.

LANGUAGE: toml
CODE:
[tool.poetry]
# ...
packages = [
    { include = "mypackage", from = "lib" },
]

----------------------------------------

TITLE: Including and Excluding Files in Poetry Package
DESCRIPTION: Demonstrates how to explicitly include or exclude files from the package build using glob patterns.

LANGUAGE: toml
CODE:
[tool.poetry]
# ...
include = [ "CHANGELOG.md" ]
exclude = [ "my_package/excluded.py" ]

----------------------------------------

TITLE: Verifying Poetry Installation in Bash
DESCRIPTION: Demonstrates how to check the installed version of Poetry using the command line after installation.

LANGUAGE: bash
CODE:
poetry --version

----------------------------------------

TITLE: Updating Poetry to version 1.0.1 using the self-update command
DESCRIPTION: This snippet demonstrates how to update Poetry to version 1.0.1 using the built-in self-update command. It assumes Poetry was previously installed using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.0.3 using bash
DESCRIPTION: This command updates an existing Poetry installation to version 1.0.3 using the official installer. It requires a previous version of Poetry to be installed.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Self Update Command
DESCRIPTION: Command to update an existing Poetry installation to version 1.0.5 using the built-in self-update mechanism.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to Version 1.0.6
DESCRIPTION: Command to update Poetry to version 1.0.6 using the self update feature. This should be run if Poetry was installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to Version 1.0.7
DESCRIPTION: Command to update Poetry to version 1.0.7 using the built-in self-update functionality. This requires a previous installation via the official Poetry installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update an existing Poetry installation to version 1.0.8 using the self update feature.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.0.10 using CLI
DESCRIPTION: This command updates an existing Poetry installation to version 1.0.10 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Shows how to update an existing Poetry installation to version 1.1.1 using the self update command.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.1.3 using self-update command
DESCRIPTION: This command updates an existing Poetry installation to version 1.1.3 using the built-in self-update feature. It assumes Poetry was installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.1.4 using Bash
DESCRIPTION: This command updates an existing Poetry installation to version 1.1.4 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.1.5 using the self update command
DESCRIPTION: This command updates an existing Poetry installation to version 1.1.5 using the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update Poetry to version 1.1.6 using the official installer's self-update mechanism.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update Poetry to version 1.6.0 using the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry CLI to version 1.1.7
DESCRIPTION: Command to update an existing Poetry installation to version 1.1.7 using the Poetry self-update mechanism. Requires a previous version of Poetry installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update an existing Poetry installation to version 1.5.0 using the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update Poetry to version 1.4.0 using the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.1.8 using self-update command
DESCRIPTION: This command updates an existing Poetry installation to version 1.1.8 using the built-in self-update feature. It requires a previous version of Poetry to be installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry CLI to version 1.2.2
DESCRIPTION: Command to update Poetry to version 1.2.2 using the built-in self-update mechanism. Requires an existing Poetry installation via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to Version 1.1.9
DESCRIPTION: Command to update an existing Poetry installation to version 1.1.9 using the built-in self-update mechanism. This requires Poetry to be installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry via Self Update Command
DESCRIPTION: Command to update Poetry to version 1.0.9 using the built-in self update mechanism for installations done via the official installer

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry CLI to version 1.1.10
DESCRIPTION: Command to update an existing Poetry installation to version 1.1.10 using the self-update feature

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to Version 1.0.4
DESCRIPTION: Command to update an existing Poetry installation to version 1.0.4 using the official Poetry self-update mechanism.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.0.2 using self-update command
DESCRIPTION: This command updates Poetry to version 1.0.2 using the built-in self-update feature. It's applicable for installations done via the official Poetry installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.1.11 using CLI
DESCRIPTION: This command updates an existing Poetry installation to version 1.1.11 using the official installer. It's executed in the command line interface.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry CLI to version 1.1.12
DESCRIPTION: Command to update an existing Poetry installation to version 1.1.12 using the self-update feature. This requires Poetry to be previously installed via the official installer.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to Version 1.1.14
DESCRIPTION: Command to update Poetry to version 1.1.14 using the official self-update mechanism.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Clearing Poetry Cache After Update
DESCRIPTION: Command to clear Poetry's PyPI cache after updating, which is necessary to ensure proper functionality with the new version.

LANGUAGE: bash
CODE:
$ poetry cache clear --all pypi

----------------------------------------

TITLE: Updating Poetry via Command Line
DESCRIPTION: Command to update an existing Poetry installation to version 1.1.15 using the self update feature.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Updating Poetry to version 1.2.1 using bash
DESCRIPTION: This command updates an existing Poetry installation to version 1.2.1 using the official installer. It requires a previous version of Poetry to be installed.

LANGUAGE: bash
CODE:
$ poetry self update

----------------------------------------

TITLE: Duplicate Dependencies Configuration Example
DESCRIPTION: Example of duplicate dependencies with overlapping markers in pyproject.toml before transformation

LANGUAGE: toml
CODE:
my-package = [
    { version = ">=1.0" },
    { version = "<2", markers = "python_version < '3.10'" },
    { version = ">=1.5", markers = "sys_platform == 'win32'" },
]

----------------------------------------

TITLE: Displaying YAML Frontmatter in Markdown
DESCRIPTION: This code snippet shows the YAML frontmatter for the blog post, including layout, title, date, categories, tags, and aliases.

LANGUAGE: markdown
CODE:
---
layout: single
title: "Poetry 0.6.0 is out"
date: 2018-03-16 09:12:35
categories: [releases]
tags: ["0.x"]

aliases:
  - poetry-0-6-0-is-out.html
---

----------------------------------------

TITLE: Installing Poetry using pip
DESCRIPTION: Alternative installation method using pip, with a warning about potential dependency conflicts.

LANGUAGE: bash
CODE:
pip install --user poetry

----------------------------------------

TITLE: Lock File Version Comment Example
DESCRIPTION: Example of the @generated version comment added to lock files in Poetry 1.2.0a2

LANGUAGE: markdown
CODE:
# @generated by Poetry 1.2.0a2

----------------------------------------

TITLE: Configuration Directory Path Example
DESCRIPTION: Example of a configuration directory path on macOS

LANGUAGE: bash
CODE:
~/Library/Application Support/pypoetry

----------------------------------------

TITLE: Poetry Install Command Example
DESCRIPTION: Example of installing Poetry dependencies with options

LANGUAGE: bash
CODE:
poetry install --no-dev --extras "feature1,feature2"

----------------------------------------

TITLE: Configuring Poetry Homepage Front Matter in YAML
DESCRIPTION: This YAML front matter block configures the homepage settings for a Poetry project website. It sets an empty title, marks the page as not a draft, and specifies the 'home' layout.

LANGUAGE: yaml
CODE:
---
title: ""
draft: false
layout: "home"
---

----------------------------------------

TITLE: Configuring Hugo Front Matter for Blog Post List
DESCRIPTION: This YAML code snippet defines the front matter configuration for a Hugo blog post list page. It sets the title, draft status, content type, and layout template to be used for rendering the page.

LANGUAGE: yaml
CODE:
---
title: "Blog"
draft: false
type: post
layout: list
---

----------------------------------------

TITLE: Installing Dependencies for Poetry Website Development
DESCRIPTION: Lists the required dependencies for developing the Poetry website locally. It specifies the need for Poetry and Node.js 18 with npm.

LANGUAGE: markdown
CODE:
- [Poetry](https://python-poetry.org/docs/main/#installing-with-the-official-installer)
- [Node.js 18](https://nodejs.org/en/download/) (and `npm`)

----------------------------------------

TITLE: Building and Serving Poetry Website Locally
DESCRIPTION: Shell command to build and serve the Poetry website for local development. It uses the 'make' command to run the 'site' target, which sets up the necessary files and starts the development server.

LANGUAGE: shell
CODE:
make site

----------------------------------------

TITLE: Building Poetry Website with Local Docs Repository
DESCRIPTION: Shell command to build the Poetry website using documentation from a local Poetry repository instead of fetching it remotely. It allows specifying the path to the local Poetry repository.

LANGUAGE: shell
CODE:
make site POETRY_REPO=../path/to/local/poetry/repo

----------------------------------------

TITLE: Creating Hugo Front Matter Template in YAML
DESCRIPTION: Standard Hugo front matter template that automatically sets the title (with proper spacing) and date while marking the content as draft. The title is generated by replacing hyphens with spaces and applying title case to the filename.

LANGUAGE: yaml
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
---

----------------------------------------

TITLE: Displaying HTML Aside Warning in Markdown
DESCRIPTION: This code snippet shows an HTML aside element with a warning about Poetry's Python version requirements and virtualenv creation.

LANGUAGE: markdown
CODE:
<aside class="warning"><p>
Since Poetry is 3.6+ only, it will create virtualenvs
using the standard library `venv` module.</p>

<p>So, if you want to work with a previous Python version in your
project, you will need to create your own virtualenvs using, for instance,
<a href="https://github.com/berdario/pew">pew</a>.
</p></aside>