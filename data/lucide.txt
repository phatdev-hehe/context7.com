TITLE: Implementing Icon Button Accessibility in React/TSX
DESCRIPTION: Examples demonstrating correct and incorrect methods of adding accessibility labels to icon buttons in React components.

LANGUAGE: tsx
CODE:
// Don't do this
<button class="btn-icon">
  <Home/>
</button>

// Don't do this either
<button class="btn-icon">
  <Home aria-label="Home icon"/>
</button>

// This works but might not be the best solution, see below
<button aria-label="Go to home" class="btn-icon">
  <Home/>
</button>

// Do this instead
<button class="btn-icon">
  <Home/>
  <span class="visually-hidden">Go to home</span>
</button>

----------------------------------------

TITLE: Installing Lucide for Web Applications
DESCRIPTION: Commands to install the Lucide icon library for web applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide

LANGUAGE: sh
CODE:
yarn add lucide

LANGUAGE: sh
CODE:
npm install lucide

LANGUAGE: sh
CODE:
bun add lucide

----------------------------------------

TITLE: SVG Icon Base Template
DESCRIPTION: Standard SVG template with required global attributes for Lucide icons. Defines the base structure including dimensions, stroke properties, and viewport settings.

LANGUAGE: xml
CODE:
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="none"
  stroke="currentColor"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
>
  <!-- SVGElements -->
</svg>

----------------------------------------

TITLE: Installing Lucide for React Applications
DESCRIPTION: Commands to install the Lucide icon library for React applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-react

LANGUAGE: sh
CODE:
yarn add lucide-react

LANGUAGE: sh
CODE:
npm install lucide-react

LANGUAGE: sh
CODE:
bun add lucide-react

----------------------------------------

TITLE: Icon Metadata Template
DESCRIPTION: JSON metadata template for icon documentation including schema reference, contributors, tags, and categories.

LANGUAGE: json
CODE:
{
  "$schema": "../icon.schema.json",
  "contributors": [
    "github-username",
    "another-github-username"
  ],
  "tags": [
    "foo",
    "bar"
  ],
  "categories": [
    "devices"
  ]
}

----------------------------------------

TITLE: Bootstrap Accessible Icon Implementation
DESCRIPTION: Example showing how to implement accessible icons using Bootstrap's visually-hidden class.

LANGUAGE: html
CODE:
<div>
  <i data-lucide="phone" aria-hidden="true"></i>
  <span class="visually-hidden">Phone number</span>
</div>

----------------------------------------

TITLE: Basic Lucide Icon Usage in React
DESCRIPTION: Example of importing and using a Lucide icon component with custom props for color and size.

LANGUAGE: jsx
CODE:
import { Camera } from 'lucide-react';

// Usage
const App = () => {
  return <Camera color="red" size={48} />;
};

export default App;

----------------------------------------

TITLE: Tailwind CSS Accessible Icon Implementation
DESCRIPTION: Example showing how to implement accessible icons using Tailwind CSS's sr-only utility class.

LANGUAGE: html
CODE:
<div>
  <i data-lucide="phone" aria-hidden="true"></i>
  <span class="sr-only">Phone number</span>
</div>

----------------------------------------

TITLE: Demonstrating Color Prop Usage for Lucide Icons in React
DESCRIPTION: This example shows how to adjust the color of Lucide icons by passing a color prop to the element. It uses Sandpack to create an interactive React demo.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="iconColorExampleFiles"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 295,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Advanced Lucide Configuration
DESCRIPTION: Advanced usage of createIcons function with custom attributes and name attribute configuration.

LANGUAGE: javascript
CODE:
import { createIcons } from 'lucide';

createIcons({
  attrs: {
    class: ['my-custom-class', 'icon'],
    'stroke-width': 1,
    stroke: '#333'
  },
  nameAttr: 'data-lucide' // attribute for the icon name.
});

----------------------------------------

TITLE: Styling Lucide Icons with SVG Attributes
DESCRIPTION: Demonstration of applying SVG presentation attributes to customize icon appearance.

LANGUAGE: jsx
CODE:
// Usage
const App = () => {
  return <Camera size={48} fill="red" />;
};

----------------------------------------

TITLE: Dynamic Icon Component Implementation
DESCRIPTION: Example of using the DynamicIcon component for loading icons dynamically by name, useful for CMS integrations.

LANGUAGE: jsx
CODE:
import { DynamicIcon } from 'lucide-react/dynamic';

const App = () => (
  <DynamicIcon name="camera" color="red" size={48} />
);

----------------------------------------

TITLE: Basic Lucide Implementation with UNPKG
DESCRIPTION: Complete HTML example showing how to implement Lucide icons using UNPKG CDN.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<body>
  <i data-lucide="volume-2" class="my-class"></i>
  <i data-lucide="x"></i>
  <i data-lucide="menu"></i>

  <script src="https://unpkg.com/lucide@latest"></script>
  <script>
    lucide.createIcons();
  </script>
</body>

----------------------------------------

TITLE: Basic Lucide Icon Usage in Vue
DESCRIPTION: Example of importing and using a Camera icon component with custom props for color and size.

LANGUAGE: vue
CODE:
<script setup>
import { Camera } from 'lucide-vue-next';
</script>

<template>
  <Camera
    color="red"
    :size="32"
  />
</template>

----------------------------------------

TITLE: Custom SVG Styling in Vue
DESCRIPTION: Example of applying SVG presentation attributes to customize icon appearance.

LANGUAGE: vue
CODE:
<template>
  <Camera fill="red" />
</template>

----------------------------------------

TITLE: Using Radix UI's Accessible Icon Component
DESCRIPTION: Example of implementing accessible icons using Radix UI's dedicated AccessibleIcon component.

LANGUAGE: tsx
CODE:
import { ArrowRightIcon } from 'lucide-react';
import { AccessibleIcon } from '@radix-ui/react-accessible-icon';

<AccessibleIcon label="Next item">
  <ArrowRightIcon />
</AccessibleIcon>

----------------------------------------

TITLE: Basic Lucide Icon Usage in Svelte
DESCRIPTION: Demonstrates how to import and use a Lucide icon component in a Svelte file.

LANGUAGE: svelte
CODE:
<script>
  import { Skull } from '@lucide/svelte';
</script>

<Skull />

----------------------------------------

TITLE: Customizing Lucide Icon Appearance
DESCRIPTION: Shows how to pass props to a Lucide icon component to adjust its appearance.

LANGUAGE: svelte
CODE:
<script>
  import { Camera } from '@lucide/svelte';
</script>

<Camera color="#ff3e98" />

----------------------------------------

TITLE: Demonstrating Parent Element Color Inheritance for Lucide Icons in React
DESCRIPTION: This example illustrates how Lucide icons inherit color from their parent elements due to the use of 'currentColor'. It uses Sandpack to create an interactive React demo with button examples.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="buttonExampleFiles"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 320,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Applying Custom SVG Attributes to Lucide Icons
DESCRIPTION: Illustrates how to pass custom SVG attributes as props to Lucide icon components.

LANGUAGE: svelte
CODE:
<script>
  import { Phone } from '@lucide/svelte';
</script>

<Phone fill="#333" />

----------------------------------------

TITLE: Installing Lucide React Package
DESCRIPTION: Various package manager commands to install the lucide-react library using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-react

LANGUAGE: sh
CODE:
yarn add lucide-react

LANGUAGE: sh
CODE:
npm install lucide-react

LANGUAGE: sh
CODE:
bun add lucide-react

----------------------------------------

TITLE: Sandpack Configuration for Stroke Width Example
DESCRIPTION: Configuration for Sandpack component demonstrating basic stroke width adjustment with React integration.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="strokeWidth"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Using Lucide Lab Icons with Icon Component
DESCRIPTION: Implementation example of using custom icons from Lucide lab using the Icon component.

LANGUAGE: jsx
CODE:
import { Icon } from 'lucide-react';
import { burger } from '@lucide/lab';

const App = () => (
  <Icon iconNode={burger} />
);

----------------------------------------

TITLE: Using Lucide Icons in Angular Templates
DESCRIPTION: Examples of using Lucide icon components in Angular templates, including different component tags and property binding.

LANGUAGE: html
CODE:
<lucide-angular name="file" class="my-icon"></lucide-angular>
<lucide-icon name="home" class="my-icon"></lucide-icon>
<i-lucide name="menu" class="my-icon"></i-lucide>
<span-lucide name="user-check" class="my-icon"></span-lucide>

LANGUAGE: html
CODE:
<lucide-angular [img]="FileIcon" class="my-icon"></lucide-angular>
<lucide-icon [img]="FileIcon" class="my-icon"></lucide-icon>
<i-lucide [img]="FileIcon" class="my-icon"></i-lucide>
<span-lucide [img]="FileIcon" class="my-icon"></span-lucide>

----------------------------------------

TITLE: Using Lucide Icons in Vue Components
DESCRIPTION: Example of importing and using a Lucide icon (Camera) in a Vue component with custom props for color and size.

LANGUAGE: vue
CODE:
<template>
  <Camera color="red" :size="32" />
</template>

<script>
  import { Camera } from 'lucide-vue';

  export default {
    name: 'My Component',
    components: { Camera }
  };
</script>

----------------------------------------

TITLE: Configuring Lucide Icon Properties
DESCRIPTION: Example of setting size, color, and stroke width properties on a Lucide icon component.

LANGUAGE: html
CODE:
<i-lucide name="home" [size]="48" color="red" [strokeWidth]="1"></i-lucide>

----------------------------------------

TITLE: Styling Lucide Icons with CSS
DESCRIPTION: CSS example for styling Lucide icons using a custom class.

LANGUAGE: css
CODE:
svg.my-icon {
    width: 12px;
    height: 12px;
    stroke-width: 3;
}

----------------------------------------

TITLE: Importing LucideAngularModule in Angular Module
DESCRIPTION: Example of importing LucideAngularModule and selecting specific icons in an Angular module.

LANGUAGE: javascript
CODE:
import { LucideAngularModule, File, Home, Menu, UserCheck } from 'lucide-angular';

@NgModule({
  imports: [
    LucideAngularModule.pick({File, Home, Menu, UserCheck})
  ]
})
export class AppModule { }

----------------------------------------

TITLE: Injecting Additional Icon Providers
DESCRIPTION: Example of providing additional icons using the LUCIDE_ICONS injection token and LucideIconProvider class.

LANGUAGE: javascript
CODE:
import { LUCIDE_ICONS, LucideIconProvider } from 'lucide-angular';
import { MyIcon } from './icons/my-icon';

const myIcons = {MyIcon};

@NgModule({
  providers: [
    {provide: LUCIDE_ICONS, multi: true, useValue: new LucideIconProvider(myIcons)},
  ]
})
export class AppModule { }

----------------------------------------

TITLE: Loading All Lucide Icons
DESCRIPTION: Example of importing and using all Lucide icons, with a warning about increased build size.

LANGUAGE: javascript
CODE:
import { icons } from 'lucide-angular';

...

LucideAngularModule.pick(icons)

----------------------------------------

TITLE: Importing Lucide Icons Directly
DESCRIPTION: Demonstrates how to import icons directly from the @lucide/svelte/icons directory for faster builds.

LANGUAGE: svelte
CODE:
<script>
  import CircleAlert from '@lucide/svelte/icons/circle-alert';
</script>

<CircleAlert color="#ff3e98" />

----------------------------------------

TITLE: Installing Lucide Preact with Package Managers
DESCRIPTION: Commands for installing the lucide-preact package using different package managers including pnpm, yarn, npm, and bun.

LANGUAGE: sh
CODE:
pnpm install lucide-preact

LANGUAGE: sh
CODE:
yarn add lucide-preact

LANGUAGE: sh
CODE:
npm install lucide-preact

LANGUAGE: sh
CODE:
bun add lucide-preact

----------------------------------------

TITLE: Using Lucide Icons in Preact Components
DESCRIPTION: Example of importing and using a Lucide icon (Camera) in a Preact component, demonstrating how to pass props for customization.

LANGUAGE: jsx
CODE:
import { Camera } from 'lucide-preact';

// Usage
const App = () => {
  return <Camera color="red" size={48} />;
};

export default App;

----------------------------------------

TITLE: Installing Lucide for Svelte Applications
DESCRIPTION: Commands to install the Lucide icon library for Svelte applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-svelte

LANGUAGE: sh
CODE:
yarn add lucide-svelte

LANGUAGE: sh
CODE:
npm install lucide-svelte

LANGUAGE: sh
CODE:
bun add lucide-svelte

----------------------------------------

TITLE: Creating a Generic Icon Component for Lucide in Preact
DESCRIPTION: Demonstrates how to create a generic Icon component that can render any Lucide icon by name. Note: This approach imports all icons and may impact performance.

LANGUAGE: jsx
CODE:
import { icons } from 'lucide-preact';

const Icon = ({ name, color, size }) => {
  const LucideIcon = icons[name];

  return <LucideIcon color={color} size={size} />;
};

export default Icon;

----------------------------------------

TITLE: Installing Lucide Solid Package
DESCRIPTION: Various package manager commands to install the lucide-solid package

LANGUAGE: sh
CODE:
pnpm install lucide-solid

LANGUAGE: sh
CODE:
yarn add lucide-solid

LANGUAGE: sh
CODE:
npm install lucide-solid

LANGUAGE: sh
CODE:
bun add lucide-solid

----------------------------------------

TITLE: Installing Lucide for Solid Applications
DESCRIPTION: Commands to install the Lucide icon library for Solid applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-solid

LANGUAGE: sh
CODE:
yarn add lucide-solid

LANGUAGE: sh
CODE:
npm install lucide-solid

LANGUAGE: sh
CODE:
bun add lucide-solid

----------------------------------------

TITLE: Basic Lucide Icon Usage in Solid
DESCRIPTION: Example showing how to import and use a Camera icon component with custom props

LANGUAGE: jsx
CODE:
import { Camera } from 'lucide-solid';

// Usage
const App = () => {
  return <Camera color="red" size={48} />;
};

export default App;

----------------------------------------

TITLE: Direct Icon Import from Directory
DESCRIPTION: Alternative import method to resolve Vite dev server issues by importing directly from icons directory

LANGUAGE: jsx
CODE:
import Camera from 'lucide-solid/icons/camera';

// Usage
const App = () => {
  return <Camera color="red" size={48} />;
};

export default App;

----------------------------------------

TITLE: Installing Lucide for Angular Applications
DESCRIPTION: Commands to install the Lucide icon library for Angular applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-angular

LANGUAGE: sh
CODE:
yarn add lucide-angular

LANGUAGE: sh
CODE:
npm install lucide-angular

LANGUAGE: sh
CODE:
bun add lucide-angular

----------------------------------------

TITLE: Applying SVG Props to Icons
DESCRIPTION: Example demonstrating how to apply SVG presentation attributes to customize icon appearance

LANGUAGE: jsx
CODE:
// Usage
const App = () => {
  return <Camera fill="red" stroke-linejoin="bevel" />;
};

----------------------------------------

TITLE: Using Icon Component with Lucide Lab
DESCRIPTION: Example of using the Icon component with custom icons from Lucide lab

LANGUAGE: jsx
CODE:
import { Icon } from 'lucide-solid';
import { burger, sausage } from '@lucide/lab';

const App = () => (
  <Icon iconNode={sausage} color="red"/>
);

----------------------------------------

TITLE: Installing Lucide for Preact Applications
DESCRIPTION: Commands to install the Lucide icon library for Preact applications using different package managers.

LANGUAGE: sh
CODE:
pnpm install lucide-preact

LANGUAGE: sh
CODE:
yarn add lucide-preact

LANGUAGE: sh
CODE:
npm install lucide-preact

LANGUAGE: sh
CODE:
bun add lucide-preact

----------------------------------------

TITLE: Generic Icon Component Implementation
DESCRIPTION: Implementation of a generic icon component that can load any Lucide icon by name

LANGUAGE: tsx
CODE:
import { icons, type LucideProps } from 'lucide-solid';
import { splitProps } from 'solid-js';
import { Dynamic } from 'solid-js/web';

interface IconProps extends LucideProps {
  name: keyof typeof icons;
}

const Icon = (props: IconProps) => {
  const [local, others] = splitProps(props, ["name"]);

  return <Dynamic component={icons[local.name]} {...others} />
};

export default Icon;

----------------------------------------

TITLE: Installing Lucide Static with Package Managers
DESCRIPTION: Various package manager commands to install lucide-static package

LANGUAGE: sh
CODE:
pnpm install lucide-static

LANGUAGE: sh
CODE:
yarn add lucide-static

LANGUAGE: sh
CODE:
npm install lucide-static

LANGUAGE: sh
CODE:
bun add lucide-static

----------------------------------------

TITLE: Installing Lucide for Static Usage
DESCRIPTION: Commands to install the Lucide icon library for static usage, including SVG files, SVG Sprite, Icon Fonts, and static SVG strings export in Common JS modules.

LANGUAGE: sh
CODE:
pnpm install lucide-static

LANGUAGE: sh
CODE:
yarn add lucide-static

LANGUAGE: sh
CODE:
npm install lucide-static

LANGUAGE: sh
CODE:
bun add lucide-static

----------------------------------------

TITLE: CDN Implementation for Lucide Icons
DESCRIPTION: Examples of using Lucide icons via CDN, including single SVG file and icon font implementation

LANGUAGE: html
CODE:
<!-- SVG file for a single icon -->
<img src="https://unpkg.com/lucide-static@latest/icons/house.svg" />

<!-- Icon font -->
<style>
  @font-face {
    font-family: 'LucideIcons';
    src: url(https://unpkg.com/lucide-static@latest/font/Lucide.ttf) format('truetype');
  }
</style>

----------------------------------------

TITLE: SVG File Usage in HTML and CSS
DESCRIPTION: Examples of implementing SVG files as images and CSS background images

LANGUAGE: html
CODE:
<!-- SVG file for a single icon -->
<img src="~lucide-static/icons/house.svg" />

LANGUAGE: css
CODE:
.house-icon {
  background-image: url(~lucide-static/icons/house.svg);
}

----------------------------------------

TITLE: Applying Custom SVG Attributes to Lucide Icons
DESCRIPTION: Example of applying custom SVG attributes (fill color) to a Lucide icon component.

LANGUAGE: vue
CODE:
<template>
  <Camera fill="red" />
</template>

----------------------------------------

TITLE: SVG Sprite Implementation
DESCRIPTION: HTML and CSS examples for implementing SVG sprites with Lucide icons

LANGUAGE: html
CODE:
<!-- Icon Sprite, not recommended for production! -->
<img src="lucide-static/sprite.svg#house" />

<!-- or -->
<svg
  width="24"
  height="24"
  fill="none"
  stroke="currentColor"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
>
  <use href="#alert-triangle" />
</svg>

<svg>
  ...sprite svg
</svg>

LANGUAGE: css
CODE:
.lucide-icon {
  width: 24px;
  height: 24px;
  stroke: currentColor;
  fill: none;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
}

----------------------------------------

TITLE: Creating a Generic Icon Component for Lucide Vue
DESCRIPTION: Example of creating a generic icon component that can load any Lucide icon by name. Note: This approach imports all icons and may impact performance.

LANGUAGE: vue
CODE:
<template>
  <component :is="icon" />
</template>

<script>
  import * as icons from 'lucide-vue';

  export default {
    props: {
      name: {
        type: String,
        required: true
      }
    },
    computed: {
      icon() {
        return icons[this.name];
      }
    }
  };
</script>

----------------------------------------

TITLE: Importing Aliased Icons in React
DESCRIPTION: Demonstrates how to import the same icon using different aliased names in a React project using Lucide.

LANGUAGE: tsx
CODE:
// These are all the same icon
import {
  Home,
  HomeIcon,
  LucideHome,
} from "lucide-react";

----------------------------------------

TITLE: Using the Generic Icon Component in Vue
DESCRIPTION: Example of using the generic icon component to display a Lucide icon (Airplay) in a Vue template.

LANGUAGE: vue
CODE:
<template>
  <div id="app">
    <Icon name="Airplay" />
  </div>
</template>

----------------------------------------

TITLE: Installing Lucide for Vue Applications
DESCRIPTION: Commands to install the Lucide icon library for Vue applications using different package managers. For Vue 3, use lucide-vue-next package.

LANGUAGE: sh
CODE:
pnpm install lucide-vue-next

LANGUAGE: sh
CODE:
yarn add lucide-vue-next

LANGUAGE: sh
CODE:
npm install lucide-vue-next

LANGUAGE: sh
CODE:
bun add lucide-vue-next

----------------------------------------

TITLE: Applying SVG Attributes to Lucide Icons in Preact
DESCRIPTION: Demonstrates how to apply SVG attributes directly to Lucide icon components in Preact, using kebab-case for attribute names.

LANGUAGE: jsx
CODE:
// Usage
const App = () => {
  return <Camera fill="red" stroke-linejoin="bevel" />;
};

----------------------------------------

TITLE: Installing Lucide for Flutter Applications
DESCRIPTION: Command to install the Lucide icon library for Flutter applications using the Flutter package manager.

LANGUAGE: bash
CODE:
flutter pub add lucide_icons

----------------------------------------

TITLE: Configuring VSCode Settings for Lucide Autocompletion
DESCRIPTION: JSON configuration to disable autocompletion for Lucide imports in VSCode, allowing for custom import styles.

LANGUAGE: json
CODE:
{
  "typescript.preferences.autoImportFileExcludePatterns": [
    "lucide-react", // or
    "lucide-preact", // or
    "lucide-react-native", // or
    "lucide-vue-next",
  ]
}

----------------------------------------

TITLE: Installing Lucide React with Package Managers
DESCRIPTION: Various package manager commands to install the lucide-react package. Supports installation via pnpm, npm, yarn, and bun.

LANGUAGE: sh
CODE:
pnpm add lucide-react

LANGUAGE: sh
CODE:
npm install lucide-react

LANGUAGE: sh
CODE:
yarn add lucide-react

LANGUAGE: sh
CODE:
bun add lucide-react

----------------------------------------

TITLE: Custom Module Declaration for Lucide in React
DESCRIPTION: TypeScript declaration file to override Lucide imports in a React project, enabling the choice of prefixed or suffixed import styles.

LANGUAGE: ts
CODE:
declare module "lucide-react" {
  // Prefixed import names
  export * from "lucide-react/dist/lucide-react.prefixed";
  // or
  // Suffixed import names
  export * from "lucide-react/dist/lucide-react.suffixed";
}

----------------------------------------

TITLE: Custom Module Declaration for Lucide in Vue
DESCRIPTION: TypeScript declaration file to override Lucide imports in a Vue project, allowing for prefixed or suffixed import styles.

LANGUAGE: ts
CODE:
declare module "lucide-vue-next" {
  // Prefixed import names
  export * from "lucide-vue-next/dist/lucide-vue-next.prefixed";
  // or
  // Suffixed import names
  export * from "lucide-vue-next/dist/lucide-vue-next.suffixed";
}

----------------------------------------

TITLE: Installing lucide-static using package managers
DESCRIPTION: Commands for installing the lucide-static package using various package managers including pnpm, npm, yarn, and bun.

LANGUAGE: sh
CODE:
pnpm add lucide-static

LANGUAGE: sh
CODE:
npm install lucide-static

LANGUAGE: sh
CODE:
yarn add lucide-static

LANGUAGE: sh
CODE:
bun add lucide-static

----------------------------------------

TITLE: Custom Module Declaration for Lucide in Preact
DESCRIPTION: TypeScript declaration file to override Lucide imports in a Preact project, enabling prefixed or suffixed import styles.

LANGUAGE: ts
CODE:
declare module "lucide-preact" {
  // Prefixed import names
  export * from "lucide-preact/dist/lucide-preact.prefixed";
  // or
  // Suffixed import names
  export * from "lucide-preact/dist/lucide-preact.suffixed";
}

----------------------------------------

TITLE: Custom Module Declaration for Lucide in React Native
DESCRIPTION: TypeScript declaration file to override Lucide imports in a React Native project, allowing for prefixed or suffixed import styles.

LANGUAGE: ts
CODE:
declare module "lucide-react-native" {
  // Prefixed import names
  export * from "lucide-react-native/dist/lucide-react-native.prefixed";
  // or
  // Suffixed import names
  export * from "lucide-react-native/dist/lucide-react-native.suffixed";
}

----------------------------------------

TITLE: Using Generic Icon Component
DESCRIPTION: Example showing how to use the generic Icon component with icon names

LANGUAGE: tsx
CODE:
import Icon from './Icon';

const App = () => {
  return <Icon name="home" />;
};

export default App;

----------------------------------------

TITLE: Installing Lucide Svelte with npm
DESCRIPTION: Command to install the Lucide Svelte package using npm package manager.

LANGUAGE: sh
CODE:
npm install lucide-svelte

----------------------------------------

TITLE: Installing Lucide Svelte with bun
DESCRIPTION: Command to install the Lucide Svelte package using bun package manager.

LANGUAGE: sh
CODE:
bun add lucide-svelte

----------------------------------------

TITLE: Using Generic Icon Component
DESCRIPTION: Example of using the generic Icon component in a Vue template.

LANGUAGE: vue
CODE:
<template>
  <div id="app">
    <Icon name="Airplay" />
  </div>
</template>

----------------------------------------

TITLE: Installing Lucide Vue using pnpm
DESCRIPTION: Command to install the Lucide Vue package using the pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add lucide-vue

----------------------------------------

TITLE: Installing Lucide Vue using npm
DESCRIPTION: Command to install the Lucide Vue package using the npm package manager.

LANGUAGE: shell
CODE:
npm install lucide-vue

----------------------------------------

TITLE: Using the Generic Icon Component in Preact
DESCRIPTION: Example of using the generic Icon component to render a Lucide icon by name in a Preact application.

LANGUAGE: jsx
CODE:
import Icon from './Icon';

const App = () => {
  return <Icon name="home" />;
};

export default App;

----------------------------------------

TITLE: Installing Lucide Vue using Yarn
DESCRIPTION: Command to install the Lucide Vue package using the Yarn package manager.

LANGUAGE: shell
CODE:
yarn add lucide-vue

----------------------------------------

TITLE: Installing Lucide Vue with pnpm
DESCRIPTION: Command to install the Lucide Vue icon library using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm add lucide-vue-next

----------------------------------------

TITLE: Generic Lucide Icon Component (Svelte 5)
DESCRIPTION: Creates a generic icon component that can load any Lucide icon by name in Svelte 5. Note: This approach imports all icons and may impact performance.

LANGUAGE: svelte
CODE:
<script>
  import * as icons from '@lucide/svelte';
  let { name } = $props();

  const Icon = icons[name];
</script>

<Icon {...props} />

----------------------------------------

TITLE: Installing Lucide Vue with Bun
DESCRIPTION: Command to install the Lucide Vue icon library using Bun package manager.

LANGUAGE: sh
CODE:
bun add lucide-vue-next

----------------------------------------

TITLE: Installing Lucide Angular with Bun
DESCRIPTION: Command to install the Lucide Angular package using Bun package manager.

LANGUAGE: sh
CODE:
bun add lucide-angular

----------------------------------------

TITLE: Using Lucide Lab Custom Icons
DESCRIPTION: Example of using the Icon component with custom icons from Lucide lab.

LANGUAGE: jsx
CODE:
import { Icon } from 'lucide-react-native';
import { burger } from '@lucide/lab';

const App = () => (
  <Icon iconNode={burger} />
);

----------------------------------------

TITLE: Installing Lucide Preact using package managers
DESCRIPTION: These code snippets demonstrate how to install the Lucide Preact package using various package managers including pnpm, npm, yarn, and bun.

LANGUAGE: sh
CODE:
pnpm add lucide-preact

LANGUAGE: sh
CODE:
npm install lucide-preact

LANGUAGE: sh
CODE:
yarn add lucide-preact

LANGUAGE: sh
CODE:
bun add lucide-preact

----------------------------------------

TITLE: Installing Lucide via Package Managers
DESCRIPTION: Commands for installing Lucide using different package managers including pnpm, npm, yarn, and bun.

LANGUAGE: sh
CODE:
pnpm add lucide

LANGUAGE: sh
CODE:
npm install lucide

LANGUAGE: sh
CODE:
yarn add lucide

LANGUAGE: sh
CODE:
bun add lucide

----------------------------------------

TITLE: Using Lucide Lab Icons
DESCRIPTION: Example of importing and using icons from Lucide lab, a collection of additional icons not in the main library.

LANGUAGE: javascript
CODE:
import { LucideAngularModule } from 'lucide-angular';
import { burger } from '@lucide/lab';

@NgModule({
  imports: [
    LucideAngularModule.pick({ burger })
  ]
})
export class AppModule { }

----------------------------------------

TITLE: Including Lucide via CDN
DESCRIPTION: HTML script tags for including Lucide via CDN, with options for development and production versions.

LANGUAGE: html
CODE:
<!-- Development version -->
<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>

<!-- Production version -->
<script src="https://unpkg.com/lucide@latest"></script>

----------------------------------------

TITLE: Installing Lucide Icons with PNPM
DESCRIPTION: Command to install Lucide icons package using PNPM package manager.

LANGUAGE: sh
CODE:
pnpm add @lucide/svelte

----------------------------------------

TITLE: Using Lucide Lab Icons
DESCRIPTION: Implementation example for using custom icons from Lucide lab using the Icon component.

LANGUAGE: vue
CODE:
<script setup>
import { Icon } from 'lucide-vue-next';
import { burger } from '@lucide/lab';
</script>

<template>
  <Icon :iconNode="burger" />
</template>

----------------------------------------

TITLE: Installing Lucide Icons with NPM
DESCRIPTION: Command to install Lucide icons package using NPM package manager.

LANGUAGE: sh
CODE:
npm install @lucide/svelte

----------------------------------------

TITLE: Importing Dependencies for Lucide Color Examples in Vue
DESCRIPTION: This snippet imports necessary components and files for demonstrating Lucide icon color examples using Sandpack in a Vue setup.

LANGUAGE: vue
CODE:
<script setup>
import { Sandpack } from 'sandpack-vue3'
import sandpackTheme from '../../.vitepress/theme/sandpackTheme.json'
import buttonExampleFiles from './examples/button-example/files.ts'
import iconColorExampleFiles from './examples/color-icon/files.ts'
</script>

----------------------------------------

TITLE: Using Lucide Lab Icons with Icon Component in Preact
DESCRIPTION: Example of using the Icon component to render a Lucide lab icon (burger) in a Preact application.

LANGUAGE: jsx
CODE:
import { Icon } from 'lucide-preact';
import { burger } from '@lucide/lab';

const App = () => (
  <Icon iconNode={burger} />
);

----------------------------------------

TITLE: Vue Component Setup for Icon Sizing Examples
DESCRIPTION: Initial setup script importing Sandpack components and example files for icon sizing demonstrations.

LANGUAGE: vue
CODE:
<script setup>
import { Sandpack } from 'sandpack-vue3'
import sandpackTheme from '../../.vitepress/theme/sandpackTheme.json'
import sizeIconExample from './examples/size-icon-example/files.ts'
import sizeIconCssExample from './examples/size-icon-css-example/files.ts'
import sizeIconFontExample from './examples/size-icon-font-example/files.ts'
import sizeIconTailwind from './examples/size-icon-tailwind-example/files.ts'
</script>

----------------------------------------

TITLE: Sandpack Configuration for Size Prop Example
DESCRIPTION: Configuration for demonstrating icon sizing using the size prop in Lucide React

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="sizeIconExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Computing Icon Code Examples in Vue
DESCRIPTION: Computed properties that generate code examples by transforming icon names into different case formats and replacing placeholders in code templates.

LANGUAGE: javascript
CODE:
const tabs = computed(() => data.codeExamples?.map(
  (codeExample) => codeExample.title) ?? []
)

const codeExample = computed(() => data.codeExamples?.map(
    (codeExample) => {
      const pascalCaseName = toPascalCase(params.value.name)
      const camelCaseName = toCamelCase(params.value.name)

      return codeExample.code
        .replace(/\$(?:<[^>]+>)*PascalCase/g, pascalCaseName)
        .replace(/\$CamelCase/g, camelCaseName)
        .replace(/\$Name/g, params.value.name)
    }
  ).join('') ?? [])

----------------------------------------

TITLE: Sandpack Configuration for CSS Sizing Example
DESCRIPTION: Setup for demonstrating icon sizing using CSS width and height properties

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="sizeIconCssExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
  }"
/>

----------------------------------------

TITLE: Sandpack Configuration for Font-Based Sizing Example
DESCRIPTION: Configuration for showing how to size icons relative to font size using em units

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="sizeIconFontExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
  }"
/>

----------------------------------------

TITLE: Initializing Vue Icon Categories Component
DESCRIPTION: Sets up Vue component imports and data preparation for displaying categorized icons. Uses script setup syntax to import necessary data and components, and initializes icons with external library support.

LANGUAGE: vue
CODE:
<script setup>
import { data } from './icons.data.ts'
import { data as categoriesData } from './categories.data.ts'
import PageContainer from '../.vitepress/theme/components/PageContainer.vue'
import IconsCategoryOverview from '../.vitepress/theme/components/icons/IconsCategoryOverview.vue'
import useIconsWithExternalLibs from '~/.vitepress/theme/composables/useIconsWithExternalLibs'

const icons = useIconsWithExternalLibs(data.icons)
</script>

LANGUAGE: vue
CODE:
<div class="VPDoc content">
  <PageContainer>
    <IconsCategoryOverview
      :categories="categoriesData.categories"
      :icons="icons"
      :iconCategories="categoriesData.iconCategories"
    />
  </PageContainer>
</div>

----------------------------------------

TITLE: Sandpack Configuration for Tailwind Sizing Example
DESCRIPTION: Setup for demonstrating icon sizing using Tailwind CSS utility classes

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="sizeIconTailwind"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest",
    }
  }'
  :options="{
    externalResources: ['https://cdn.tailwindcss.com'],
    editorHeight: 300,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Vue Component Setup for Stroke Width Examples
DESCRIPTION: Initial Vue setup script importing Sandpack components and example files for stroke width demonstrations.

LANGUAGE: vue
CODE:
<script setup>
import { Sandpack } from 'sandpack-vue3'
import sandpackTheme from '../../.vitepress/theme/sandpackTheme.json'
import strokeWidth from './examples/stroke-width-icon/files.ts'
import absoluteStrokeWidth from './examples/absolute-stroke-width-icon/files.ts'
</script>

----------------------------------------

TITLE: Testing Lucide Packages
DESCRIPTION: Commands for running unit tests and test watchers for Lucide packages.

LANGUAGE: sh
CODE:
pnpm [package-name] test

#example:

pnpm lucide-vue test

----------------------------------------

TITLE: Sandpack Configuration for Absolute Stroke Width Example
DESCRIPTION: Configuration for Sandpack component demonstrating absolute stroke width adjustment with React integration.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="absoluteStrokeWidth"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 320,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Keyboard Shortcuts for Figma Icon Design
DESCRIPTION: Essential keyboard shortcuts used in Figma for icon creation and spacing verification

LANGUAGE: plaintext
CODE:
F - Frame tool
P - Pen tool
⌥ Option (MacOS) or Alt (Windows) - Check spacing

----------------------------------------

TITLE: Dynamic Lucide Icon Loading with JSDoc (Svelte 5)
DESCRIPTION: Shows how to use JSDoc for type annotations when dynamically loading Lucide icons in Svelte 5.

LANGUAGE: svelte
CODE:
<script>
  import { Home, Library, Cog } from '@lucide/svelte';

  /**
   * @typedef {Object} MenuItem
   * @property {string} name
   * @property {string} href
   * @property {typeof import('@lucide/svelte').Icon} icon
   */

  /** @type {MenuItem[]} */
  const menuItems = [
    {
      name: 'Home',
      href: '/',
      icon: Home
    },
    {
      name: 'Blog',
      href: '/blog',
      icon: Library
    },
    {
      name: 'Projects',
      href: '/projects',
      icon: Cog
    }
  ];
</script>

{#each menuItems as item}
  {@const Icon = item.icon}
  <a href={item.href}>
    <Icon />
    <span>{item.name}</span>
  </a>
{/each}

----------------------------------------

TITLE: Importing Sandpack Components in Vue
DESCRIPTION: Vue script setup block that imports Sandpack components and configuration files for the interactive code example. Uses sandpack-vue3 for creating an interactive code playground.

LANGUAGE: vue
CODE:
<script setup>
import { Sandpack } from 'sandpack-vue3'
import sandpackTheme from '../../.vitepress/theme/sandpackTheme.json'
import sizeIconExample from './examples/filled-icon-example/files.ts'
</script>

----------------------------------------

TITLE: Importing Dependencies for Vue and Sandpack
DESCRIPTION: This snippet imports necessary components and files for Vue setup and Sandpack integration. It includes the Sandpack component, a custom theme, and example files for global icon styling.

LANGUAGE: vue
CODE:
<script setup>
import { Sandpack } from 'sandpack-vue3'
import sandpackTheme from '../../.vitepress/theme/sandpackTheme.json'
import globalIconCssExample from './examples/global-styling-css-example/files.ts'
import globalAbsoluteStrokewidthExample from './examples/global-styling-absolute-strokewidth-example/files.ts'

</script>

----------------------------------------

TITLE: Configuring Sandpack Playground for React
DESCRIPTION: Configuration setup for Sandpack playground component showing filled icon usage in React. Includes dependencies for lucide-react and layout settings.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="sizeIconExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 480,
    editorWidthPercentage: 60,
  }"
/>

----------------------------------------

TITLE: Configuring Sandpack for React and Lucide Integration
DESCRIPTION: This snippet sets up a Sandpack environment for React with Lucide icons. It configures the template, theme, custom files, and dependencies for demonstrating global icon styling.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="globalIconCssExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
  }"
/>

----------------------------------------

TITLE: Installing Dependencies for Lucide Docs (sh)
DESCRIPTION: This command installs the necessary dependencies for the Lucide documentation project using pnpm package manager.

LANGUAGE: sh
CODE:
# Install dependencies
pnpm install

----------------------------------------

TITLE: Configuring Sandpack for Absolute Stroke Width Styling
DESCRIPTION: This snippet sets up another Sandpack environment for React, specifically for demonstrating absolute stroke width styling of Lucide icons. It uses a different set of example files but maintains the same configuration structure.

LANGUAGE: vue
CODE:
<Sandpack
  template="react"
  :theme="sandpackTheme"
  :files="globalAbsoluteStrokewidthExample"
  :customSetup='{
    dependencies: {
      "lucide-react": "latest"
    }
  }'
  :options="{
    editorHeight: 300,
  }"
/>

----------------------------------------

TITLE: Starting Development Servers for Lucide Docs (sh)
DESCRIPTION: These commands start the development servers for both the documentation and API of the Lucide project using pnpm.

LANGUAGE: sh
CODE:
# Start docs dev server
pnpm docs:dev

# Start api dev server
pnpm dev

----------------------------------------

TITLE: Building Lucide Documentation (sh)
DESCRIPTION: This command builds the Lucide documentation using the configured Vitepress setup.

LANGUAGE: sh
CODE:
# Build docs
pnpm docs:build

----------------------------------------

TITLE: Importing and Setting Up Vue Components for Lucide Icons Overview
DESCRIPTION: This snippet imports required Vue components and composables, sets up the script section of the Vue component, and prepares the icons data for rendering. It uses the 'useIconsWithExternalLibs' composable to process the icons data.

LANGUAGE: vue
CODE:
<script setup>
import { computed } from 'vue'
import { data } from './icons.data.ts'
import IconsOverview from '~/.vitepress/theme/components/icons/IconsOverview.vue'
import PageContainer from '~/.vitepress/theme/components/PageContainer.vue'
import useIconsWithExternalLibs from '~/.vitepress/theme/composables/useIconsWithExternalLibs'

const icons = useIconsWithExternalLibs(data.icons)
</script>

----------------------------------------

TITLE: Building Lucide API (sh)
DESCRIPTION: This command builds the API for the Lucide project.

LANGUAGE: sh
CODE:
# Build api
pnpm build:api

----------------------------------------

TITLE: Including Code of Conduct in Vue-like Framework
DESCRIPTION: This snippet uses a custom include directive to embed the content of the CODE_OF_CONDUCT.md file from the parent directory. It's likely part of a static site generator or documentation system.

LANGUAGE: html
CODE:
<!--@include: ../CODE_OF_CONDUCT.md -->

----------------------------------------

TITLE: Configuring VitePress Home Page Layout in YAML
DESCRIPTION: Defines the layout and head metadata for the Lucide icons home page using VitePress configuration. It sets the canonical URL and specifies the page layout as 'home'.

LANGUAGE: yaml
CODE:
# https://vitepress.dev/reference/default-theme-home-page
layout: home
markdownStyles: false

head:
  - - link
    - rel: canonical
      content: https://lucide.dev/

----------------------------------------

TITLE: Importing Contribution Guidelines in Markdown
DESCRIPTION: A markdown file that configures the page layout by disabling the aside component and includes external contribution guidelines using a special include directive.

LANGUAGE: markdown
CODE:
---
aside: false
---

<!--@include: ../CONTRIBUTING.md -->

----------------------------------------

TITLE: Release Tag Link Generation
DESCRIPTION: Function that generates GitHub release tag links with version-specific formatting based on semver comparison.

LANGUAGE: javascript
CODE:
function releaseTagLink(version) {
  const shouldAddV = satisfies(version, `<0.266.0`)

  return `https://github.com/lucide-icons/lucide/releases/tag/${shouldAddV ? 'v' : ''}${version}`
}

----------------------------------------

TITLE: Defining Hero Section for Lucide Icons in YAML
DESCRIPTION: Configures the hero section of the Lucide icons home page, including the main title, tagline, logo image, and action buttons for navigation.

LANGUAGE: yaml
CODE:
hero:
  name: |
    Beautiful &
    consistent icons
  tagline: Made by the community.
  image:
    src: /favicon.svg
    alt: VueUse
  actions:
    - theme: brand
      text: View all icons
      link: icons/
    - theme: alt
      text: Get Started
      link: guide/
    - theme: alt
      text: GitHub
      link: https://github.com/lucide-icons/lucide

----------------------------------------

TITLE: Responsive Layout Styling
DESCRIPTION: CSS module styling for responsive layout of icon details page, including preview, metadata, and version information across different breakpoints.

LANGUAGE: css
CODE:
.preview {
  grid-area: preview;
  margin-bottom: 24px;
  max-width: 240px;
  width: 240px;
  flex-shrink: 0;
}

.layout {
  align-items: flex-start;
}

.meta {
  margin-left: auto;
  margin-top: 24px;
}

@media (min-width: 640px) {
  .layout {
    align-items: flex-start;
    display: grid;
    grid-template-columns: 240px minmax(0, 1fr);
    gap: 24px;
  }
}

----------------------------------------

TITLE: Rendering Lucide Icons Overview Component
DESCRIPTION: This snippet contains the template for rendering the Lucide icons overview. It uses the PageContainer and IconsOverview components to display the icons within the page structure.

LANGUAGE: vue
CODE:
<div class="VPDoc content">
  <PageContainer>
    <IconsOverview :icons="icons" />
  </PageContainer>
</div>

----------------------------------------

TITLE: Configuring Feature Sections with SVG Icons in YAML
DESCRIPTION: Defines the features section of the Lucide icons home page, listing key attributes of the icon set with titles, descriptions, and SVG icons for each feature.

LANGUAGE: yaml
CODE:
features:
  - title: Lightweight & Scalable
    details: Icons are lightweight, highly optimized scalable vector graphics (SVG).
    icon: |
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#F56565" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-expand"><path d="m21 21-6-6m6 6v-4.8m0 4.8h-4.8"></path><path d="M3 16.2V21m0 0h4.8M3 21l6-6"></path><path d="M21 7.8V3m0 0h-4.8M21 3l-6 6"></path><path d="M3 7.8V3m0 0h4.8M3 3l6 6"></path></svg>

----------------------------------------

TITLE: Configuring VuePress Doc Page Layout Settings
DESCRIPTION: Markdown frontmatter configuration that specifies documentation page display settings including layout type, footer visibility, sidebar options, and navigation links.

LANGUAGE: markdown
CODE:
---
layout: doc
footer: false
aside: false
editLink: false
next: false
prev: false
sidebar: true
---

LANGUAGE: html
CODE:
<!--@include: ../[name].md -->

----------------------------------------

TITLE: Including Custom Vue Components in Home Page Layout
DESCRIPTION: Incorporates custom Vue components into the Lucide icons home page layout, adding sections for packages, icon customization, and team information.

LANGUAGE: vue
CODE:
<HomePackagesSection />
<HomeIconCustomizer />
<HomeTeamSection />

----------------------------------------

TITLE: Importing Custom Vue Components in HTML
DESCRIPTION: Sets up the script section to import custom Vue components used in the Lucide icons home page, including sections for packages, icon customizer, and team information.

LANGUAGE: html
CODE:
<script setup>
import HomePackagesSection from './.vitepress/theme/components/home/HomePackagesSection.vue'
import HomeIconCustomizer from './.vitepress/theme/components/home/HomeIconCustomizer.vue'
import HomeTeamSection from './.vitepress/theme/components/home/HomeTeamSection.vue'
</script>

----------------------------------------

TITLE: Defining Vue.js Component Structure for Package List Page
DESCRIPTION: Sets up the page layout and imports necessary components for displaying a list of packages. It uses a custom PageContainer component and a PackageList component.

LANGUAGE: vue
CODE:
<script setup>
import PageContainer from '.vitepress/theme/components/PageContainer.vue'
import PackageList from '.vitepress/theme/components/packages/PackageList.vue'
</script>

<div class="VPDoc content">
  <PageContainer>
    <PackageList />
  </PageContainer>
</div>

----------------------------------------

TITLE: Applying CSS Styles for Package List Container
DESCRIPTION: Defines scoped CSS styles for the package list container, setting a maximum width and centering it on the page.

LANGUAGE: css
CODE:
<style scoped>
.container {
  margin: 0 auto;
  max-width: 1200px;
}
</style>

----------------------------------------

TITLE: Styling Lucide Showcase Page Container
DESCRIPTION: Applies CSS styles to the showcase page container. It sets a maximum width and centers the content horizontally. This ensures a consistent and responsive layout across different screen sizes.

LANGUAGE: css
CODE:
<style scoped>
.container {
  margin: 0 auto;
  max-width: 1200px;
}
</style>

----------------------------------------

TITLE: Initializing Vue Components for Lucide Showcase Page
DESCRIPTION: Sets up the necessary Vue components for the showcase page, including PageContainer and ShowcaseList. This snippet is responsible for importing and preparing the components that will be used in the template.

LANGUAGE: vue
CODE:
<script setup>
import PageContainer from '.vitepress/theme/components/PageContainer.vue'
import ShowcaseList from '.vitepress/theme/components/showcase/ShowcaseList.vue'
</script>

----------------------------------------

TITLE: Structuring HTML Template for Lucide Showcase Page
DESCRIPTION: Defines the HTML structure for the showcase page, using Vue components. It creates a content container and includes the ShowcaseList component within a PageContainer component.

LANGUAGE: vue
CODE:
<div class="VPDoc content">
  <PageContainer>
    <ShowcaseList />
  </PageContainer>
</div>

----------------------------------------

TITLE: Installing Lucide Angular with pnpm
DESCRIPTION: Command to install the Lucide Angular package using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm add lucide-angular

----------------------------------------

TITLE: Installing Lucide Dependencies with PNPM
DESCRIPTION: Command to install project dependencies including workspace packages using PNPM package manager.

LANGUAGE: sh
CODE:
pnpm install

----------------------------------------

TITLE: Building Lucide Packages
DESCRIPTION: Commands for building specific Lucide packages, demonstrating the package-specific build process.

LANGUAGE: sh
CODE:
pnpm [package-name] build

#example:

pnpm lucide-react build

----------------------------------------

TITLE: Installing Lucide Angular with npm
DESCRIPTION: Command to install the Lucide Angular package using npm package manager.

LANGUAGE: sh
CODE:
npm install lucide-angular

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Overview of the main project directories and their purposes.

LANGUAGE: sh
CODE:
lucide
├── docs
│   ├── guide
├── icons
├── packages
└── scripts

----------------------------------------

TITLE: Including Lucide via CDN
DESCRIPTION: HTML script tags for including Lucide via CDN in both development and production versions.

LANGUAGE: html
CODE:
<!-- Development version -->
<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>

<!-- Production version -->
<script src="https://unpkg.com/lucide@latest"></script>

----------------------------------------

TITLE: Installing Lucide Angular with Yarn
DESCRIPTION: Command to install the Lucide Angular package using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add lucide-angular

----------------------------------------

TITLE: Implementing Lucide with ES Modules
DESCRIPTION: Examples of using Lucide with ES Modules, showing both full import and tree-shaking approaches.

LANGUAGE: javascript
CODE:
import { createIcons, icons } from 'lucide';

// Caution, this will import all the icons and bundle them.
createIcons({ icons });

// Recommended way, to include only the icons you need.
import { createIcons, Menu, ArrowRight, Globe } from 'lucide';

createIcons({
  icons: {
    Menu,
    ArrowRight,
    Globe
  }
});

----------------------------------------

TITLE: Custom Element Creation with Lucide
DESCRIPTION: Examples of creating custom elements with Lucide icons, including attribute customization.

LANGUAGE: javascript
CODE:
import { createElement, Menu } from 'lucide';

const menuIcon = createElement(Menu); // Returns HTMLElement (svg)

// Append HTMLElement in the DOM
const myApp = document.getElementById('app');
myApp.appendChild(menuIcon);

LANGUAGE: javascript
CODE:
import { createElement, Menu } from 'lucide';

const menuIcon = createElement(Menu, {
  class: ['my-custom-class', 'icon'],
  'stroke-width': 1,
  stroke: '#333'
}); // Returns HTMLElement (svg)

// Append HTMLElement in the DOM
const myApp = document.getElementById('app');
myApp.appendChild(menuIcon);

----------------------------------------

TITLE: Installing Lucide Solid with PNPM
DESCRIPTION: Command to install the Lucide icon library using PNPM package manager.

LANGUAGE: sh
CODE:
pnpm add lucide-solid

----------------------------------------

TITLE: Integration with Lucide Lab Icons
DESCRIPTION: Example of using custom icons from Lucide Lab collection.

LANGUAGE: javascript
CODE:
import { burger } from '@lucide/lab';

createIcons({
  icons: {
    burger
  }
});

----------------------------------------

TITLE: Basic Icon Usage in React Native
DESCRIPTION: Example showing how to import and use a Camera icon component with custom props for color and size.

LANGUAGE: jsx
CODE:
import { Camera } from 'lucide-react-native';

// Usage
const App = () => {
  return <Camera color="red" size={48} />;
};

export default App;

----------------------------------------

TITLE: Installing Lucide Solid with NPM
DESCRIPTION: Command to install the Lucide icon library using NPM package manager.

LANGUAGE: sh
CODE:
npm install lucide-solid

----------------------------------------

TITLE: Custom Icon Styling Example
DESCRIPTION: Demonstrates how to apply custom SVG attributes as props to an icon component.

LANGUAGE: jsx
CODE:
// Usage
const App = () => {
  return <Camera fill="red" />;
};

----------------------------------------

TITLE: Generic Icon Component Implementation
DESCRIPTION: Creation of a generic icon component that can load any icon by name, with a warning about bundle size implications.

LANGUAGE: jsx
CODE:
import { icons } from 'lucide-react-native';

const Icon = ({ name, color, size }) => {
  const LucideIcon = icons[name];

  return <LucideIcon color={color} size={size} />;
};

export default Icon;

----------------------------------------

TITLE: Installing Lucide Solid with Yarn
DESCRIPTION: Command to install the Lucide icon library using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add lucide-solid

----------------------------------------

TITLE: Using Generic Icon Component
DESCRIPTION: Example of using the generic icon component to render a home icon.

LANGUAGE: jsx
CODE:
import Icon from './Icon';

const App = () => {
  return <Icon name="home" />;
};

export default App;

----------------------------------------

TITLE: Dynamic Lucide Icon Loading with TypeScript (Svelte 5)
DESCRIPTION: Demonstrates dynamic icon loading using TypeScript in Svelte 5, utilizing the Icon type for type safety.

LANGUAGE: svelte
CODE:
<script lang="ts">
  import { Home, Library, Cog, type Icon as IconType } from '@lucide/svelte';

  type MenuItem = {
    name: string;
    href: string;
    icon: typeof IconType;
  };

  const menuItems: MenuItem[] = [
    {
      name: 'Home',
      href: '/',
      icon: Home
    },
    {
      name: 'Blog',
      href: '/blog',
      icon: Library
    },
    {
      name: 'Projects',
      href: '/projects',
      icon: Cog
    }
  ];
</script>

{#each menuItems as item}
  {@const Icon = item.icon}
  <a href={item.href}>
    <Icon />
    <span>{item.name}</span>
  </a>
{/each}

----------------------------------------

TITLE: Installing Lucide Svelte with pnpm
DESCRIPTION: Command to install the Lucide Svelte package using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm add lucide-svelte

----------------------------------------

TITLE: Using Lucide Lab Icons with Icon Component
DESCRIPTION: Demonstrates how to use the Icon component to render icons from Lucide lab or custom icons.

LANGUAGE: svelte
CODE:
<script>
import { Icon } from '@lucide/svelte';
import { burger, sausage } from '@lucide/lab';
</script>

<Icon iconNode={burger} />
<Icon iconNode={sausage} color="red"/>

----------------------------------------

TITLE: Installing Lucide Vue Next
DESCRIPTION: Various package manager commands for installing lucide-vue-next dependency.

LANGUAGE: sh
CODE:
pnpm install lucide-vue-next

LANGUAGE: sh
CODE:
yarn add lucide-vue-next

LANGUAGE: sh
CODE:
npm install lucide-vue-next

LANGUAGE: sh
CODE:
bun add lucide-vue-next

----------------------------------------

TITLE: Installing Lucide Svelte with yarn
DESCRIPTION: Command to install the Lucide Svelte package using yarn package manager.

LANGUAGE: sh
CODE:
yarn add lucide-svelte

----------------------------------------

TITLE: Generic Icon Component Implementation
DESCRIPTION: Creation of a generic icon component that can load any Lucide icon dynamically. Note: This approach imports all icons and may impact performance.

LANGUAGE: vue
CODE:
<script setup>
import { computed } from 'vue';
import * as icons from "lucide-vue-next";

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  size: Number,
  color: String,
  strokeWidth: Number,
  defaultClass: String
})

const icon = computed(() => icons[props.name]);
</script>

<template>
  <component
    :is="icon"
    :size="size"
    :color="color"
    :stroke-width="strokeWidth" :default-class="defaultClass"
  />
</template>

----------------------------------------

TITLE: Installing Lucide Vue with npm
DESCRIPTION: Command to install the Lucide Vue icon library using npm package manager.

LANGUAGE: sh
CODE:
npm install lucide-vue-next

----------------------------------------

TITLE: Installing Lucide Vue with Yarn
DESCRIPTION: Command to install the Lucide Vue icon library using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add lucide-vue-next

----------------------------------------

TITLE: Installing Lucide Vue using Bun
DESCRIPTION: Command to install the Lucide Vue package using the Bun package manager.

LANGUAGE: shell
CODE:
bun add lucide-vue

----------------------------------------

TITLE: Installing Lucide Icons with Yarn
DESCRIPTION: Command to install Lucide icons package using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add @lucide/svelte

----------------------------------------

TITLE: Installing Lucide Icons with Bun
DESCRIPTION: Command to install Lucide icons package using Bun package manager.

LANGUAGE: sh
CODE:
bun add @lucide/svelte