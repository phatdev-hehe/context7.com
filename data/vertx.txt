TITLE: Creating a Router with Vert.x Web OpenAPI in Java
DESCRIPTION: Shows how to use Vert.x Web OpenAPI to create a router based on an OpenAPI specification. It includes setting up a RouterFactory, adding operation handlers, and configuring security.

LANGUAGE: java
CODE:
RouterFactory.create(vertx, "src/main/resources/petstore.yaml",
  routerFactoryAsyncResult -> {
  if (routerFactoryAsyncResult.succeeded()) {
    // Spec loaded with success, retrieve the router
    RouterFactory routerFactory = routerFactoryAsyncResult.result();
    // You can enable or disable different features of router factory using RouterFactoryOptions
    RouterFactoryOptions options = new RouterFactoryOptions();
    // Set the options
    routerFactory.setOptions(options);
    // Add an handler to operation listPets
    routerFactory.operation("listPets").handler(routingContext -> {
      // Handle listPets operation
      routingContext.response().setStatusMessage("Called listPets").end();
    }).failureHandler(routingContext -> { // Add a failure handler to the same operation
      // This is the failure handler
      Throwable failure = routingContext.failure();
      if (failure instanceof BadRequestException)
        // Handle Validation Exception
        routingContext
          .response()
          .setStatusCode(400)
          .putHeader("content-type", "application/json")
          .end(((BadRequestException)failure).toJson().toBuffer());
    });

    // Add a security handler
    // Handle security here
    routerFactory.securityHandler(
      "api_key",
      JWTAuthHandler.create(jwtAuth)
    );

    // Now you have to generate the router
    Router router = routerFactory.createRouter();
  } else {
    // Something went wrong during router factory initialization
  }
});

----------------------------------------

TITLE: Executing SQL Queries with Fluent API in Java
DESCRIPTION: Demonstrates the new fluent Query API for SQL Client in Vert.x 3.9.0. Shows how to execute a prepared query and collect results using a collector.

LANGUAGE: java
CODE:
client.prepareQuery(sql).execute(tuple, ar -> ...);

// With a collector
client.preparedQuery(sql).collecting(Collectors.toList()).execute(tuple, ar -> ...);

----------------------------------------

TITLE: Setting Up Vert.x Unit Test in Java
DESCRIPTION: This snippet shows how to set up a Vert.x unit test, including creating a Vert.x instance, deploying a verticle, and tearing down after the test.

LANGUAGE: java
CODE:
@Before
public void setUp(TestContext context) throws IOException {
  vertx = Vertx.vertx();
  ServerSocket socket = new ServerSocket(0);
  port = socket.getLocalPort();
  socket.close();
  DeploymentOptions options = new DeploymentOptions()
      .setConfig(new JsonObject().put("http.port", port)
      );
  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());
}

@After
public void tearDown(TestContext context) {
  vertx.close(context.asyncAssertSuccess());
}

----------------------------------------

TITLE: Generating and Using Router with OpenAPI3RouterFactory in Vert.x
DESCRIPTION: Java code showing how to generate a Router from the OpenAPI3RouterFactory and use it to handle HTTP requests in a Vert.x server.

LANGUAGE: java
CODE:
Router router = routerFactory.getRouter();

// Now you can use your Router instance
HttpServer server = vertx.createHttpServer(new HttpServerOptions().setPort(8080).setHost("localhost"));
server.requestHandler(router::accept).listen();

----------------------------------------

TITLE: Configuring Vert.x Router with SessionStore and CSRF Protection
DESCRIPTION: This Java code snippet sets up a Vert.x Router with a LocalSessionStore for handling authentication state and configures CSRF protection for form submissions. It's essential for managing user sessions and preventing CSRF attacks in the web application.

LANGUAGE: java
CODE:
Router router = Router.router(vertx);

// Store session information on the server side
SessionStore sessionStore = LocalSessionStore.create(vertx);
SessionHandler sessionHandler = SessionHandler.create(sessionStore);
router.route().handler(sessionHandler);

// CSRF handler setup required for logout form
String csrfSecret = "zwiebelfische";
CSRFHandler csrfHandler = CSRFHandler.create(csrfSecret);
router.route().handler(ctx -> {
            // Ensures that the csrf token request parameter is available for the CsrfHandler
            // after the logout form was submitted.
            // See "Handling HTML forms" https://vertx.io/docs/vertx-core/java/#_handling_requests
            ctx.request().setExpectMultipart(true);
            ctx.request().endHandler(v -> csrfHandler.handle(ctx));
        }
);

----------------------------------------

TITLE: JWT Auth Setup in Vert.x
DESCRIPTION: Java implementation for configuring JWT authentication in Vert.x, including JWKS fetching and validation options setup.

LANGUAGE: java
CODE:
private Future<Startup> setupJwtAuth(Startup startup) {
    var jwtConfig = startup.config.getJsonObject("jwt");
    var issuer = jwtConfig.getString("issuer");
    var issuerUri = URI.create(issuer);
    var jwksUri = URI.create(jwtConfig.getString("jwksUri", String.format("%s://%s:%d%s",
            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + "/protocol/openid-connect/certs")));
    var promise = Promise.<JWTAuth>promise();
    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())
            .as(BodyCodec.jsonObject())
            .send(ar -> {
                if (!ar.succeeded()) {
                    startup.bootstrap.fail(String.format("Could not fetch JWKS from URI: %s", jwksUri));
                    return;
                }
                var response = ar.result();
                var jwksResponse = response.body();
                var keys = jwksResponse.getJsonArray("keys");
                var jwtOptions = new JWTOptions();
                jwtOptions.setIssuer(issuer);
                var jwks = ((List<Object>) keys.getList()).stream()
                        .map(o -> new JsonObject((Map<String, Object>) o))
                        .collect(Collectors.toList());
                var jwtAuthOptions = new JWTAuthOptions();
                jwtAuthOptions.setJwks(jwks);
                jwtAuthOptions.setJWTOptions(jwtOptions);
                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString("permissionClaimsKey", "realm_access/roles"));
                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);
                promise.complete(jwtAuth);
            });
    return promise.future().compose(auth -> {
        jwtAuth = auth;
        return Future.succeededFuture(startup);
    });
}

----------------------------------------

TITLE: Executing SQL Queries with SQL Client Templates in Java
DESCRIPTION: Demonstrates the use of SQL Client Templates to execute prepared SQL queries with a map instead of a tuple. It shows both simple query execution and row mapping using Jackson Databind.

LANGUAGE: java
CODE:
Map<String, Object> parameters = Collections.singletonMap("id", 1);

SqlTemplate
  .forQuery(client, "SELECT * FROM users WHERE id=#{id}")
  .execute(parameters)
  .onSuccess(users -> {
    users.forEach(row -> {
      System.out.println(row.getString("first_name") + " " + row.getString("last_name"));
    });
  });

// Row mapping using Jackson Databind
SqlTemplate
  .forQuery(client, "SELECT * FROM users WHERE id=#{id}")
  .mapTo(User.class)
  .execute(Collections.singletonMap("id", 1))
  .onSuccess(users -> {
    users.forEach(user -> {
      System.out.println(user.firstName + " " + user.lastName);
    });
  });

----------------------------------------

TITLE: Starting Keycloak Docker Container
DESCRIPTION: Docker command to start a preconfigured Keycloak instance with the vertx realm and necessary configurations.

LANGUAGE: bash
CODE:
docker run \
  -it \
  --name vertx-keycloak \
  --rm \
  -e KEYCLOAK_USER=admin \
  -e KEYCLOAK_PASSWORD=admin \
  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \
  -v $PWD/vertx-realm.json:/tmp/vertx-realm.json \
  -v $PWD/data:/opt/jboss/keycloak/standalone/data \
  -p 8080:8080 \
  quay.io/keycloak/keycloak:11.0.2

----------------------------------------

TITLE: Configuring Keycloak Integration with OpenID Connect Discovery in Vert.x
DESCRIPTION: This Java code configures the Keycloak integration for a Vert.x application using OpenID Connect Discovery. It sets up OAuth2 client options, discovers Keycloak configuration, and creates an OAuth2AuthHandler to protect routes.

LANGUAGE: java
CODE:
String hostname = System.getProperty("http.host", "localhost");
int port = Integer.getInteger("http.port", 8090);
String baseUrl = String.format("http://%s:%d", hostname, port);
String oauthCallbackPath = "/callback";

OAuth2ClientOptions clientOptions = new OAuth2ClientOptions()
    .setFlow(OAuth2FlowType.AUTH_CODE)
    .setSite(System.getProperty("oauth2.issuer", "http://localhost:8080/auth/realms/vertx"))
    .setClientID(System.getProperty("oauth2.client_id", "demo-client"))
    .setClientSecret(System.getProperty("oauth2.client_secret", "1f88bd14-7e7f-45e7-be27-d680da6e48d8"));

KeycloakAuth.discover(vertx, clientOptions, asyncResult -> {

    OAuth2Auth oauth2Auth = asyncResult.result();

    if (oauth2Auth == null) {
        throw new RuntimeException("Could not configure Keycloak integration via OpenID Connect Discovery Endpoint. Is Keycloak running?");
    }

    AuthHandler oauth2 = OAuth2AuthHandler.create(oauth2Auth, baseUrl + oauthCallbackPath)
        .setupCallback(router.get(oauthCallbackPath))
        // Additional scopes: openid for OpenID Connect
        .addAuthority("openid");

    // session handler needs access to the authenticated user, otherwise we get an infinite redirect loop
    sessionHandler.setAuthProvider(oauth2Auth);

    // protect resources beneath /protected/* with oauth2 handler
    router.route("/protected/*").handler(oauth2);

    // configure route handlers
    configureRoutes(router, webClient, oauth2Auth);
});

getVertx().createHttpServer().requestHandler(router).listen(port);

----------------------------------------

TITLE: Connecting and Querying PostgreSQL with Vert.x PgPool
DESCRIPTION: Java code demonstrating how to connect to a PostgreSQL database using Vert.x PgPool, set connection options, and execute a query. It shows the basic usage of the new Reactive PostgreSQL Client.

LANGUAGE: java
CODE:
// Connect options
PgConnectOptions connectOptions = new PgConnectOptions()
  .setPort(5432)
  .setHost("the-host")
  .setDatabase("the-db")
  .setUser("user")
  .setPassword("secret");

PgPool client = PgPool.pool(connectOptions, new PoolOptions().setMaxSize(5));

client.query("SELECT * FROM users WHERE id='julien'", ar -> {
  if (ar.succeeded()) {
    RowSet result = ar.result();
    System.out.println("Got " + result.size() + " rows ");
  } else {
    System.out.println("Failure: " + ar.cause().getMessage());
  }
});

----------------------------------------

TITLE: Creating a Simple TCP Echo Server Verticle in Java
DESCRIPTION: This code snippet demonstrates how to create a basic TCP echo server as a Vert.x verticle. It imports necessary classes, extends the Verticle class, and implements the start method to set up a NetServer that echoes back any received data.

LANGUAGE: Java
CODE:
import org.vertx.java.core.Handler;
import org.vertx.java.core.net.NetSocket;
import org.vertx.java.core.streams.Pump;
import org.vertx.java.deploy.Verticle;

public class Server extends Verticle {

  public void start() {
    vertx.createNetServer().connectHandler(new Handler<NetSocket>() {
      public void handle(final NetSocket socket) {
        Pump.createPump(socket, socket).start();
      }
    }).listen(1234);
  }
}

----------------------------------------

TITLE: Configuring MySQL Client with Domain Socket Support in Java
DESCRIPTION: Shows how to configure the MySQL reactive client to connect using domain sockets instead of TCP/IP connections. Includes connection pool setup with size configuration.

LANGUAGE: java
CODE:
// Connect Options
// Socket file name /var/run/mysqld/mysqld.sock
MySQLConnectOptions connectOptions = new MySQLConnectOptions()
    .setHost("/var/run/mysqld/mysqld.sock")
    .setDatabase("the-db");

// Create the pooled client
MySQLPool client = MySQLPool.pool(connectOptions, new PoolOptions().setMaxSize(5));

----------------------------------------

TITLE: Implementing Logout Functionality in Vert.x with Keycloak
DESCRIPTION: This Java code shows how to implement a logout feature in a Vert.x application integrated with Keycloak. It handles the logout process, destroys the session, and redirects the user to the index page. It also includes CSRF protection for the logout form.

LANGUAGE: java
CODE:
private void handleLogout(RoutingContext ctx) {

    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();
    oAuth2Token.logout(res -> {

        if (!res.succeeded()) {
            // the user might not have been logged out, to know why:
            respondWith(ctx, 500, "text/html", String.format("<h1>Logout failed %s</h1>", res.cause()));
            return;
        }

        ctx.session().destroy();
        ctx.response().putHeader("location", "/?logout=true").setStatusCode(302).end();
    });
}

private String createLogoutForm(RoutingContext ctx) {

    String csrfToken = ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);

    return "<form action=\"/logout\" method=\"post\">"
            + String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">", CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)
            + "<button>Logout</button></form>";
}

----------------------------------------

TITLE: Initializing Reactive DB2 Client Connection in Java
DESCRIPTION: Demonstrates how to set up and use the new Reactive DB2 Client including connection configuration, query execution, and result handling. The example shows basic CRUD operations with proper connection pooling.

LANGUAGE: java
CODE:
DB2ConnectOptions connectOptions = new DB2ConnectOptions()
  .setPort(50000)
  .setHost("the-host")
  .setDatabase("the-db")
  .setUser("user")
  .setPassword("secret");

// Create the client pool
DB2Pool client = DB2Pool.pool(connectOptions, poolOptions);

// A simple query
client
  .query("SELECT * FROM users WHERE id='julien'")
  .execute(ar -> {
  if (ar.succeeded()) {
    RowSet<Row> result = ar.result();
    System.out.println("Got " + result.size() + " rows ");
  } else {
    System.out.println("Failure: " + ar.cause().getMessage());
  }

  // Now close the pool
  client.close();
});

----------------------------------------

TITLE: Implementing Client-Side Event Bus Communication
DESCRIPTION: JavaScript code demonstrating how to establish event bus connection and request data from server.

LANGUAGE: javascript
CODE:
var eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');

eb.onopen = function() {
    eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },
      function(reply) {
        if (reply.status === 'ok') {
          var albumArray = [];
          for (var i = 0; i < reply.results.length; i++) {
            albumArray[i] = new Album(reply.results[i]);
          }
          that.albums = ko.observableArray(albumArray);
          ko.applyBindings(that);
        } else {
          console.error('Failed to retrieve albums: ' + reply.message);
        }
      });
  };

----------------------------------------

TITLE: Creating and Using Vert.x Redis Client
DESCRIPTION: Java code snippet demonstrating how to create and use the new Vert.x Redis client.

LANGUAGE: Java
CODE:
Redis
  .createClient(vertx, inetSocketAddress(7006, "127.0.0.1"))
  .connect(create -> {
    final Redis redis = create.result();

    redis.send(Request.cmd(Command.PING), send -> {
      // ... should reply with PONG
    });
  });

----------------------------------------

TITLE: Custom Error Response Handling in Vert.x
DESCRIPTION: Shows how to handle error responses with custom JSON error body processing.

LANGUAGE: java
CODE:
ErrorConverter converter = ErrorConverter.createFullBody(result -> {
  // Invoked after the response body is fully received
  HttpResponse<Buffer> response = result.response();

  if (response.getHeader("content-type").equals("application/json")) {
    // Error body is JSON data
    JsonObject body = response.bodyAsJsonObject();
    return new MyCustomException(body.getString("code"), body.getString("message"));
  }

  // Fallback to defaut message
  return new MyCustomException(result.message());
});

ResponsePredicate predicate = ResponsePredicate.create(ResponsePredicate.SC_SUCCESS, converter);

----------------------------------------

TITLE: Transaction Service Implementation
DESCRIPTION: Implementation of TransactionsManagerService interface with business logic handling

LANGUAGE: java
CODE:
public class TransactionsManagerServiceImpl implements TransactionsManagerService {

  private Vertx vertx;

  public TransactionsManagerServiceImpl(Vertx vertx) {  this.vertx = vertx;  }

  @Override
  public void getTransactionsList(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler){
    // Write your business logic here
    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));
  }

  // Implement other operations
}

----------------------------------------

TITLE: Using Kotlin Coroutines with Vert.x for asynchronous operations
DESCRIPTION: Demonstrates how to use Kotlin Coroutines with Vert.x to handle asynchronous database operations in a sequential manner, including error handling.

LANGUAGE: kotlin
CODE:
val movie = ctx.pathParam("id")
val rating = Integer.parseInt(ctx.queryParam("getRating")[0])
val connection = awaitResult<SQLConnection> { client.getConnection(it) }
try {
  val result = awaitResult<ResultSet> { connection.queryWithParams("SELECT TITLE FROM MOVIE WHERE ID=?", json { array(movie) }, it) }
  if (result.rows.size == 1) {
    awaitResult<UpdateResult> { connection.updateWithParams("INSERT INTO RATING (VALUE, MOVIE_ID) VALUES ?, ?", json { array(rating, movie) }, it) }
    ctx.response().setStatusCode(200).end()
  } else {
    ctx.response().setStatusCode(404).end()
  }
} finally {
  connection.close()
}

----------------------------------------

TITLE: Configuring Secure Session Handling in Vert.x Java
DESCRIPTION: This code snippet shows how to set up secure session handling in Vert.x. It creates a Router, adds a CookieHandler and SessionHandler with secure flags, and implements a simple hit counter using the session.

LANGUAGE: java
CODE:
    Router router = Router.router(vertx);

    router.route().handler(CookieHandler.create());
    router.route().handler(SessionHandler
        .create(LocalSessionStore.create(vertx))
        .setCookieHttpOnlyFlag(true)
        .setCookieSecureFlag(true)
    );

    router.route().handler(routingContext -> {

      Session session = routingContext.session();

      Integer cnt = session.get("hitcount");
      cnt = (cnt == null ? 0 : cnt) + 1;

      session.put("hitcount", cnt);

      routingContext.response().end("Hitcount: " + cnt);
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(8080);

----------------------------------------

TITLE: Coordinating Application Loading with a Verticle
DESCRIPTION: This example shows how to use a verticle to coordinate the loading of an application composed of multiple verticles. It demonstrates setting up configuration and deploying various verticles and worker verticles.

LANGUAGE: Java
CODE:
JsonObject appConfig = container.getConfig();

JsonObject verticle1Config = appConfig.getObject("verticle1_conf");
JsonObject verticle2Config = appConfig.getObject("verticle2_conf");
JsonObject verticle3Config = appConfig.getObject("verticle3_conf");
JsonObject verticle4Config = appConfig.getObject("verticle4_conf");
JsonObject verticle5Config = appConfig.getObject("verticle5_conf");
    
container.deployVerticle("verticle1.js", verticle1Config);
container.deployVerticle("verticle2.rb", verticle2Config);
container.deployVerticle("foo.Verticle3", verticle3Config);
container.deployWorkerVerticle("foo.Verticle4", verticle4Config);
container.deployWorkerVerticle("verticle5.js", verticle5Config, 10);

----------------------------------------

TITLE: Adding Security Headers to Vert.x HTTP Responses in Java
DESCRIPTION: This snippet demonstrates how to add various security headers to HTTP responses in a Vert.x application. It includes headers for cache control, content type options, strict transport security, download options, XSS protection, and frame options.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {

  @Override
  public void start() {

    Router router = Router.router(vertx);
    router.route().handler(ctx -> {
      ctx.response()
          // do not allow proxies to cache the data
          .putHeader("Cache-Control", "no-store, no-cache")
          // prevents Internet Explorer from MIME - sniffing a
          // response away from the declared content-type
          .putHeader("X-Content-Type-Options", "nosniff")
          // Strict HTTPS (for about ~6Months)
          .putHeader("Strict-Transport-Security", "max-age=" + 15768000)
          // IE8+ do not allow opening of attachments in the context of this resource
          .putHeader("X-Download-Options", "noopen")
          // enable XSS for IE
          .putHeader("X-XSS-Protection", "1; mode=block")
          // deny frames
          .putHeader("X-FRAME-OPTIONS", "DENY");
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(8080);
  }
}

----------------------------------------

TITLE: Template Engine Usage Outside Web Context
DESCRIPTION: Shows how to use Vert.x template engines independently of Vert.x Web, such as for generating email content.

LANGUAGE: java
CODE:
TemplateEngine template = ...

template.render(new JsonObject(), "my-template.txt, res -> {
   // Send result with the Vert.x Mail client
});

----------------------------------------

TITLE: AWS Lambda Handler Implementation with Vert.x
DESCRIPTION: Main handler class that initializes Vert.x, processes AWS Lambda requests, and manages asynchronous responses through Future. Implements static initialization of JDBC client and Verticle deployment.

LANGUAGE: java
CODE:
// Code reference: https://gist.github.com/pendula95/583eb45bd0a7990136fba029bdcd555b.js
// Note: Original code is embedded via GitHub Gist

----------------------------------------

TITLE: Sending Multiple Web Requests with Checkpoints in Vert.x JUnit 5
DESCRIPTION: This example demonstrates how to send multiple web requests using the TestRequest API and Checkpoints. It shows how to create and use a Checkpoint to ensure both requests are completed before the test finishes.

LANGUAGE: java
CODE:
import static io.vertx.junit5.web.TestRequest.*;

@ExtendWith({
  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension
  VertxWebClientExtension.class
})
public class MultiTestRequestExample {

  @Test
  public void test2(WebClient client, VertxTestContext testContext) {
    Checkpoint checkpoint = testContext.checkpoint(2); // Create the Checkpoint to flag when request succeds

    testRequest(
        client    // Create the test request using WebClient APIs
          .get("/hello")
          .addQueryParam("name", "francesco")
          .putHeader("x-my", "foo")
      )
      .expect(
        jsonBodyResponse(new JsonObject().put("value", "Hello Francesco!")),
        responseHeader("x-my", "bar")
      )
      .send(testContext, checkpoint); // Pass the checkpoint to flag

    testRequest(
        client
          .get("/hello")
          .addQueryParam("name", "julien")
          .putHeader("x-my", "foo")
      )
      .expect(
        jsonBodyResponse(new JsonObject().put("value", "Hello Julien!")),
        responseHeader("x-my", "bar")
      )
      .send(testContext, checkpoint);
  }

}

----------------------------------------

TITLE: Using Generated Row Mappers with SQL Client Templates in Java
DESCRIPTION: Shows how to use generated row mappers with SQL Client Templates. It includes the definition of a data object with the @RowMapped annotation and demonstrates how to use the generated mapper.

LANGUAGE: java
CODE:
@DataObject
@RowMapped
class User {
  ...
}

// Generated by SQL template code generator
class UserRowMapper implements java.util.function.Function<io.vertx.sqlclient.Row, User> {
  ...
}

SqlTemplate
  .forQuery(client, "SELECT * FROM users WHERE id=#{id}")
  .mapTo(UserRowMapper.INSTANCE)
  .execute(Collections.singletonMap("id", 1))
  .onSuccess(users -> {
    users.forEach(user -> {
      System.out.println(user.firstName + " " + user.lastName);
    });
  });

----------------------------------------

TITLE: Converting Vert.x streams to RxJava2 Flowable and Observable
DESCRIPTION: Shows how to convert Vert.x ReadStream<Buffer> to RxJava2 Flowable (back-pressured) and Observable (non-back-pressured) types.

LANGUAGE: java
CODE:
// Flowable<Buffer> maps to a ReadStream<Buffer>
// back-pressured stream
Flowable<Buffer> flowable = asyncFile.toFlowable();

// but we still can get an Observable<Buffer>
// non back-pressured stream
Observable<Buffer> flowable = asyncFile.toObservable();

----------------------------------------

TITLE: Setting Upload Size Limit in Vert.x Java
DESCRIPTION: This snippet demonstrates how to set an upload size limit in a Vert.x application to prevent potential DDoS attacks. It creates a Router and sets a body limit of 50MB using the BodyHandler.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {

  private static final int KB = 1024;
  private static final int MB = 1024 * KB;

  @Override
  public void start() {

    Router router = Router.router(vertx);
    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));

----------------------------------------

TITLE: Simplified Transaction Management with Vert.x 3.6 Helpers
DESCRIPTION: Final example demonstrating the most concise way to manage transactions using Vert.x 3.6 helper methods.

LANGUAGE: java
CODE:
SQLClientHelper.inTransactionSingle(client, sqlConnection -> {
  return sqlConnection.rxExecute("INSERT INTO albums (name) VALUES ('The Israelites')")
    .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')"))
    .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')"))
    .andThen(sqlConnection.rxQuery("SELECT name FROM tracks WHERE album = 'The Israelites'").map(ResultSet::getResults))
}).map(rows -> {
}).subscribe(json -> {
}, t -> {
});

----------------------------------------

TITLE: Vert.x Main Verticle Setup - Java
DESCRIPTION: Main verticle class implementation showing server setup and deployment

LANGUAGE: java
CODE:
<script src="https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=main.java"></script>

----------------------------------------

TITLE: Implementing Article Retrieval Endpoint - Java
DESCRIPTION: Implementation of the GET endpoint handler that retrieves articles by RSS link, processes the database results, and returns JSON response

LANGUAGE: java
CODE:
private void getArticles(RoutingContext ctx) {
    String link = ctx.request().getParam("link");
    if (link == null) {
        responseWithInvalidRequest(ctx);
    } else {
        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -> {
            if (handler.succeeded()) {
                List<Row> rows = handler.result();

                JsonObject responseJson = new JsonObject();
                JsonArray articles = new JsonArray();

                rows.forEach(eachRow -> articles.add(
                        new JsonObject()
                                .put("title", eachRow.getString(0))
                                .put("link", eachRow.getString(1))
                                .put("description", eachRow.getString(2))
                                .put("pub_date", eachRow.getTimestamp(3).getTime())
                ));

                responseJson.put("articles", articles);
                ctx.response().end(responseJson.toString());
            } else {
                log.error("failed to get articles for " + link, handler.cause());
                ctx.response().setStatusCode(500).end("Unable to retrieve the info from C*");
            }
        });
    }
}

----------------------------------------

TITLE: Querying Cassandra with Vert.x Cassandra Client
DESCRIPTION: Example showing how to perform streaming queries using the new Vert.x Cassandra client with support for flow control and error handling.

LANGUAGE: java
CODE:
cassandraClient.queryStream("SELECT my_string_col FROM my_keyspace.my_table where my_key = 'my_value'", queryStream -> {
    if (queryStream.succeeded()) {
    CassandraRowStream stream = queryStream.result();

    // resume stream when queue is ready to accept buffers again
    response.drainHandler(v -> stream.resume());

    stream.handler(row -> {
        String value = row.getString("my_string_col");
        response.write(value);

        // pause row stream when we buffer queue is full
        if (response.writeQueueFull()) {
        stream.pause();
        }
    });

    // end request when we reached end of the stream
    stream.endHandler(end -> response.end());

    } else {
    queryStream.cause().printStackTrace();
    // response with internal server error if we are not able to execute given query
    response
        .setStatusCode(500)
        .end("Unable to execute the query");
    }
});

----------------------------------------

TITLE: Implementing a Basic Vert.x Web Server in Java
DESCRIPTION: This code snippet shows a simple Vert.x Web server implementation. It sets up logging, creates a Vert.x instance, configures a router with a '/hello' endpoint, and starts an HTTP server on port 8080.

LANGUAGE: java
CODE:
package de.jotschi.examples;

import java.io.File;

import io.vertx.core.Vertx;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.core.logging.SLF4JLogDelegateFactory;
import io.vertx.ext.web.Router;

public class Runner {

	public static void main(String[] args) {
		// Use logback for logging
		File logbackFile = new File("config", "logback.xml");
		System.setProperty("logback.configurationFile", logbackFile.getAbsolutePath());
		System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());
		Logger log = LoggerFactory.getLogger(Runner.class);

		// Setup the http server
		log.info("Starting server for: http://localhost:8080/hello");
		Vertx vertx = Vertx.vertx();
		Router router = Router.router(vertx);

		router.route("/hello").handler(rc -> {
			log.info("Got hello request");
			rc.response().end("World");
		});

		vertx.createHttpServer()
			.requestHandler(router::accept)
			.listen(8080);

	}

}

----------------------------------------

TITLE: Listing Consumer Groups with Kafka Admin Client in Java
DESCRIPTION: Shows how to use the updated Kafka Admin API in Vert.x 3.9.0 to list consumer groups, reflecting changes from Kafka 2.4.0 upgrade.

LANGUAGE: java
CODE:
adminClient.listConsumerGroups(ar -> {
    System.out.println("ConsumerGroups= " + ar.result());
});

----------------------------------------

TITLE: Setting Up Vert.x Server with SockJS and Static File Handling
DESCRIPTION: JavaScript code for the Vert.x server. It sets up a router with SockJS handler for WebSocket communication and a static handler for serving files. It also configures permissions for the 'draw' address on the event bus.

LANGUAGE: javascript
CODE:
var Router = require("vertx-web-js/router");
var SockJSHandler = require("vertx-web-js/sock_js_handler");
var StaticHandler = require("vertx-web-js/static_handler");

var router = Router.router(vertx);

// Allow outbound traffic to the draw address

var options = {
  "outboundPermitteds" : [{"address" : "draw"}],
  "inboundPermitteds" :  [{"address" : "draw"}]
};

router.route("/eventbus/*").handler(SockJSHandler.create(vertx).bridge(options).handle);

// Serve the static resources
router.route().handler(StaticHandler.create().handle);

vertx.createHttpServer().requestHandler(router.accept).listen(8080);

----------------------------------------

TITLE: Configuring Log4j2 XML for Vert.x Logging
DESCRIPTION: XML configuration for Log4j2 that sets up asynchronous logging with rolling file output. Includes pattern layout for log formatting and async appender configuration.

LANGUAGE: xml
CODE:
<Configuration>
  <Appenders>
    <RollingFile name="vertx_logs" append="true" fileName="/var/log/vertx.log" filePattern="/var/log/vertx/$${date:yyyy-MM}/vertx-%d{MM-dd-yyyy}-%i.log.gz">
      <PatternLayout pattern="%d{ISO8601} %-5p %c:%L - %m%n" />
    </RollingFile>
    <Async name="vertx_async">
      <AppenderRef ref="vertx_logs"/>
    </Async>
  </Appenders>
  <Loggers>
    <Root level="DEBUG">
      <AppenderRef ref="vertx_async" />
    </Root>
  </Loggers>
</Configuration>

----------------------------------------

TITLE: Implementing Role-Based Authorization in Vert.x with Keycloak
DESCRIPTION: This Java code demonstrates how to implement role-based authorization in a Vert.x application using Keycloak. It checks if the user has the 'admin' role before allowing access to the admin page.

LANGUAGE: java
CODE:
private void handleAdminPage(RoutingContext ctx) {

    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();

    // check for realm-role "admin"
    user.isAuthorized("realm:admin", res -> {

        if (!res.succeeded() || !res.result()) {
            respondWith(ctx, 403, "text/html", "<h1>Forbidden</h1>");
            return;
        }

        String username = user.idToken().getString("preferred_username");

        String content = String.format("<h1>Admin Page: %s @%s</h1><a href=\"/protected\">Protected Area</a>",
                                        username, Instant.now());
        respondWithOk(ctx, "text/html", content);
    });
}

----------------------------------------

TITLE: Creating a RabbitMQ Consumer in Java with Eclipse Vert.x
DESCRIPTION: This snippet demonstrates how to create a simple RabbitMQ consumer using the new API in Eclipse Vert.x 3.6.0. It shows how to create a client, set up a consumer for a queue, and handle incoming messages.

LANGUAGE: java
CODE:
RabbitMQClient client = RabbitMQClient.create(vertx, new RabbitMQOptions());

client.basicConsumer("my.queue", res -> {
  if (res.succeeded()) {
    System.out.println("RabbitMQ consumer created !");
    RabbitMQConsumer mqConsumer = res.result();
    mqConsumer.handler((RabbitMQMessage message) -> {
        System.out.println("Got message: " + message.body().toString());
    });
  } else {
    // Oups something went wrong
    res.cause().printStackTrace();
  }
});

----------------------------------------

TITLE: Hello World Web Application with Vert.x Web
DESCRIPTION: Web application using Vert.x Web framework with routing. Responds to root path with 'Hello World' and handles 404 errors for other routes.

LANGUAGE: javascript
CODE:
var Router = require("vertx-web-js/router");
var server = vertx.createHttpServer();

var router = Router.router(vertx);

router.get("/").handler(function (ctx) {
  // This handler will be called for "/" requests
  var response = ctx.response();
  response.putHeader("content-type", "text/plain");

  // Write to the response and end it
  response.end("Hello World!");
});

server.requestHandler(router.accept).listen(8080);

----------------------------------------

TITLE: Implementing RSS Link POST Endpoint
DESCRIPTION: Java implementation of the endpoint for posting new RSS links, including request handling and database operations

LANGUAGE: java
CODE:
private void postRssLink(RoutingContext ctx) {
    ctx.request().bodyHandler(body -> {
        JsonObject bodyAsJson = body.toJsonObject();
        String link = bodyAsJson.getString("link");
        String userId = ctx.request().getParam("user_id");
        if (link == null || userId == null) {
            responseWithInvalidRequest(ctx);
        } else {
            vertx.eventBus().send("fetch.rss.link", link);
            Future<ResultSet> future = Future.future();
            BoundStatement query = insertNewLinkForUser.bind(userId, link);
            client.execute(query, future);
            future.setHandler(result -> {
                if (result.succeeded()) {
                    ctx.response().end(new JsonObject().put("message", "The feed just added").toString());
                } else {
                    ctx.response().setStatusCode(400).end(result.cause().getMessage());
                }
            });
        }
    });
}

----------------------------------------

TITLE: Initializing Vert.x Shell Service with Telnet Support
DESCRIPTION: Sets up the Vert.x Shell service with Telnet connector configuration for localhost access on port 4000.

LANGUAGE: javascript
CODE:
var ShellService = require("vertx-shell-js/shell_service");
var service = ShellService.create(vertx, {
  "telnetOptions" : {
    "host" : "localhost",
    "port" : 4000
  }
});
service.start();

----------------------------------------

TITLE: Sending a Single Web Request with Assertions in Vert.x JUnit 5
DESCRIPTION: This snippet shows how to use the TestRequest API to send a single GET request with query parameters and headers, and assert the response body and headers. It uses the VertxExtension and VertxWebClientExtension for JUnit 5 integration.

LANGUAGE: java
CODE:
import static io.vertx.junit5.web.TestRequest.*;

@ExtendWith({
  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension
  VertxWebClientExtension.class
})
public class TestRequestExample {

  @Test
  public void test1(WebClient client, VertxTestContext testContext) {
    testRequest(client, HttpMethod.GET, "/hello") // Build the request
      .with(
        queryParam("name", "francesco"), // Add query param
        requestHeader("x-my", "foo") // Add request header
      )
      .expect(
        // Assert that response is a JSON with a specific body
        jsonBodyResponse(new JsonObject().put("value", "Hello Francesco!")),
        // Assert that response contains a particular header
        responseHeader("x-my", "bar")
      )
      .send(testContext); // Complete (or fail) the VertxTestContext
  }

}

----------------------------------------

TITLE: Creating Echo Server with Embedded Vert.x Core in Java
DESCRIPTION: Demonstrates how to embed Vert.x core directly in a Java application by creating a simple echo server. It shows initialization, server creation, and handling connections.

LANGUAGE: java
CODE:
public class Embedded {
  public static void main(String[] args) throws Exception {

    Vertx vertx = VertxFactory.newVertx();

    // Create an echo server
    vertx.createNetServer().connectHandler(new Handler<NetSocket>() {
      public void handle(final NetSocket socket) {
        Pump.createPump(socket, socket).start();
      }
    }).listen(1234);

    // Prevent the JVM from exiting
    System.in.read();

  }
}

----------------------------------------

TITLE: InfluxDB Configuration for Vert.x
DESCRIPTION: Java code to configure Vert.x with InfluxDB metrics backend using MicrometerMetricsOptions.

LANGUAGE: java
CODE:
MicrometerMetricsOptions options = new MicrometerMetricsOptions()
  .setInfluxDbOptions(new VertxInfluxDbOptions().setEnabled(true))
  .setEnabled(true);
Vertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));

----------------------------------------

TITLE: Transaction Management in Vert.x 3.5
DESCRIPTION: Comprehensive example of managing database transactions in Vert.x 3.5, including connection handling, transaction management, and error handling.

LANGUAGE: java
CODE:
dbClient.rxGetConnection().flatMap(sqlConnection -> {
  return sqlConnection.rxSetAutoCommit(false)
    .andThen(
      sqlConnection.rxExecute("INSERT INTO albums (name) VALUES ('The Israelites')")
        .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')"))
        .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')"))
        .andThen(sqlConnection.rxQuery("SELECT name FROM tracks WHERE album = 'The Israelites'").map(ResultSet::getResults))
    )
    .flatMap(rows -> sqlConnection.rxCommit().andThen(Single.just(rows)))
    .onErrorResumeNext(throwable -> {
      return sqlConnection.rxRollback().onErrorComplete()
        .andThen(sqlConnection.rxSetAutoCommit(true).onErrorComplete())
        .andThen(Single.error(throwable));
    }).flatMap(rows -> sqlConnection.rxSetAutoCommit(true).andThen(Single.just(rows)))
    .doFinally(sqlConnection::close);
}).map(rows -> {
}).subscribe(json -> {
}, t -> {
});

----------------------------------------

TITLE: Creating OpenAPI3RouterFactory in Vert.x
DESCRIPTION: Java code demonstrating how to asynchronously create an OpenAPI3RouterFactory by loading an API specification file.

LANGUAGE: java
CODE:
OpenAPI3RouterFactory.create(this.vertx, "src/main/resources/petstore.yaml", ar -> {
    if (ar.succeeded()) {
        // Spec loaded with success
        OpenAPI3RouterFactory routerFactory = ar.result();
    } else {
        // Something went wrong during router factory initialization
        Throwable exception = ar.cause();
        logger.error("Ops!", exception);
    }
});

----------------------------------------

TITLE: Configuring Filebeat for Log Shipping
DESCRIPTION: YAML configuration for Filebeat that specifies log file location, multiline handling for stack traces, and secure connection settings to Logstash.

LANGUAGE: yaml
CODE:
filebeat:
  prospectors:
    -
      document_type: trader_dashboard
      paths:
        - /var/log/vertx.log
      multiline:
        pattern: "^[0-9]+"
        negate: true
        match: after
output:
  logstash:
    enabled: true
    hosts:
      - elk:5044
    timeout: 15
    tls:
      insecure: false
      certificate_authoritites:
        - /etc/pki/tls/certs/logstash-beats.crt

----------------------------------------

TITLE: Accessing Request Parameters in Vert.x OpenAPI Handler
DESCRIPTION: Java code demonstrating how to access and use request parameters in a Vert.x handler with OpenAPI integration.

LANGUAGE: java
CODE:
RequestParameters params = routingContext.get("parsedParameters");

RequestParameter awesomeParameter = params.queryParameter("awesomeParameter");
if (awesomeParameter != null) {
    if (!awesomeParameter.isEmpty()) {
      Integer awesome = awesomeParameter.getInteger();
    } else {
      // Parameter exists, but it's empty value
    }
} else {
    // Parameter doesn't exist (it's not required)
}

----------------------------------------

TITLE: Configuring SameSite Cookies for SessionHandler in Java
DESCRIPTION: Demonstrates how to set the SameSite attribute for cookies in Vert.x 3.9.0 using the SessionHandler, providing protection against CSRF attacks.

LANGUAGE: java
CODE:
SessionHandler.create(store)
  .setCookieSameSite(CookieSameSite.STRICT);

----------------------------------------

TITLE: Querying Database with Vert.x RxJava API
DESCRIPTION: Simple example of querying a database using the Vert.x RxJava API to select tracks from an album and transform the results into JSON.

LANGUAGE: java
CODE:
dbClient.rxQuery("SELECT name, duration FROM tracks WHERE album = 'The Israelites'")
  .map(ResultSet::getResults)
  .map(rows -> {
    // Transform DB rows into a client-friendly JSON object
  })
  .subscribe(json -> {
    // Send JSON to the client
  }, t -> {
    // Send error to the client
  });

----------------------------------------

TITLE: Creating OpenAPI Router Factory in Vert.x
DESCRIPTION: Demonstrates how to create and use an OpenAPI Router Factory to handle API requests based on an OpenAPI specification file.

LANGUAGE: java
CODE:
OpenAPI3RouterFactory.createRouterFactoryFromFile(vertx, "petstore.yaml", ar -> {
  if (ar.succeeded()) {
    // Spec loaded with success
    OpenAPI3RouterFactory routerFactory = ar.result();

    // add your API and security handlers to the factory

    // add it to a server
    vertx.createHttpServer()
      .requestHandler(routerFactory.getRouter()::accept)
      .listen();
  } else {
    // Something went wrong during router factory initialization
  }
});

----------------------------------------

TITLE: Preparing Database Queries
DESCRIPTION: Method to prepare necessary database queries for RSS feed operations

LANGUAGE: java
CODE:
private Future<Void> prepareNecessaryQueries() {
    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();
    client.prepare("INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);", insertNewLinkForUserPrepFuture);

    return insertNewLinkForUserPrepFuture.compose(preparedStatement -> {
        insertNewLinkForUser = preparedStatement;
        return Future.succeededFuture();
    });
}

----------------------------------------

TITLE: Implementing HTTP Verticle in Scala for Vert.x
DESCRIPTION: Example of a Scala verticle that sets up an HTTP server using Vert.x. It demonstrates creating a router, handling requests, and starting the server asynchronously.

LANGUAGE: scala
CODE:
package io.vertx.scala.sbt

import io.vertx.lang.scala.ScalaVerticle
import io.vertx.scala.ext.web.Router

import scala.concurrent.Future

class HttpVerticle extends ScalaVerticle {

  override def startFuture(): Future[Unit] = {
    val router = Router.router(vertx)
    val route = router
      .get("/hello")
        .handler(_.response().end("world"))

    vertx
      .createHttpServer()
      .requestHandler(router.accept)
      .listenFuture(8666, "0.0.0.0")
        .map(_ => ())
  }
}

----------------------------------------

TITLE: Using Built-in Response Predicates in Vert.x
DESCRIPTION: Shows how to use built-in response predicates for validating success status codes and JSON content type.

LANGUAGE: java
CODE:
client
  .get(8080, "myserver.mycompany.com", "/some-uri")
  .expect(ResponsePredicate.SC_SUCCESS)
  .expect(ResponsePredicate.JSON)
  .send(ar -> {
    if (ar.succeeded()) {
      HttpResponse<Buffer> response = ar.result();
      // Safely decode the body as a json object
      JsonObject body = response.bodyAsJsonObject();
    } else {
      System.out.println("Something went wrong " + ar.cause().getMessage());
    }
  });

----------------------------------------

TITLE: Improved WebSocket Connection with HttpClient in Java
DESCRIPTION: Shows the new webSocket method for HttpClient that provides a better developer experience for connecting to WebSockets, including error handling.

LANGUAGE: java
CODE:
HttpClient client = vertx.createHttpClient();
client.webSocket(80, "example.com", "/", ar -> {
  if (ar.succeeded()) {
    // connected
  } else {
    // handler error
  }
});

----------------------------------------

TITLE: Handling Validation Errors in Vert.x OpenAPI Integration
DESCRIPTION: Java code demonstrating how to handle validation exceptions in a Vert.x failure handler with OpenAPI integration.

LANGUAGE: java
CODE:
Throwable failure = routingContext.failure();
if (failure instanceof ValidationException)
    // Handle Validation Exception
    routingContext.response().setStatusCode(400).setStatusMessage("ValidationError").end(failure.getMessage());

----------------------------------------

TITLE: Creating GraphQL Movie Type Schema
DESCRIPTION: Demonstrates how to define a GraphQL object type for movies using the graphql-java library

LANGUAGE: java
CODE:
private GraphQLObjectType createMovieType() {
  return newObject().name("Movie")
    .description("One of the films in the Star Wars universe.")

    // .title
    .field(newFieldDefinition().name("title")
        .description("Title of the episode.")
        .type(GraphQLString)
        .dataFetcher((env) -> {
          Movie movie = env.getSource();
          return movie.getName();
        }))

    // .description
    .field(newFieldDefinition().name("description")
        .description("Description of the episode.")
        .type(GraphQLString))

    .build();
}

----------------------------------------

TITLE: Using Futures in Vert.x Scala for Asynchronous Operations
DESCRIPTION: Demonstration of using Scala Futures with Vert.x for handling asynchronous operations, such as deploying verticles.

LANGUAGE: scala
CODE:
vertx.deployVerticleFuture("com.foo.OtherVerticle")
  .onComplete{
    case Success(s) => println(s"Verticle id is: $s")
    case Failure(t) => t.printStackTrace()
  }

----------------------------------------

TITLE: Adding Handler to OpenAPI3RouterFactory by OperationId
DESCRIPTION: Java code showing how to add a request handler to a specific operation in the OpenAPI3RouterFactory using the operation ID.

LANGUAGE: java
CODE:
routerFactory.addHandlerByOperationId("listPets", routingContext -> {
    // Handle listPets operation (GET /pets)
}, routingContext -> {
    // Handle failure
});

----------------------------------------

TITLE: Configuring Logstash Input and Filtering
DESCRIPTION: Logstash configuration for receiving logs from Filebeat with SSL and filtering using Grok patterns for Log4j format.

LANGUAGE: bash
CODE:
input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/pki/tls/certs/logstash-beats.crt"
    ssl_key => "/etc/pki/tls/private/logstash-beats.key"
  }
}

filter {
  grok {
    break_on_match => false
    match =>  [ "message", "%{LOG4J}"]
  }
  date{
    match => [ "timestamp_string", "ISO8601"]
    remove_field => [ "timestamp_string" ]
  }
}

----------------------------------------

TITLE: Implementing SockJS Server in Vert.x 3
DESCRIPTION: Example showing how to create a SockJS server using Vert.x 3's new WebServer and Router APIs. Demonstrates SSL configuration, router setup, and SockJS handler implementation.

LANGUAGE: groovy
CODE:
public class MyVerticle extends GroovyVerticle {
  Router router

  @Override
  void start() throws Exception {
     router = Router.router(vertx)
     (Map<String, Object>) sslConfig =
        (Map<String, Object>)vertx.getOrCreateContext()
          .config().get('ssl')

     HttpServer sslHttpServer = vertx.createHttpServer(
         SSL: true,
         keyStorePath: sslConfig.get("keystore"),
         keyStorePassword: sslConfig.get("password"))

     startWebApiServer(sslHttpServer)
  }

  private void startWebApiServer(final HttpServer httpServer) {
    def sockHandler = SockJSHandler.create(vertx, [:])
    sockHandler.socketHandler {
      SockJSSocket ws -> sockJSConnectHandler(ws)
    }
    router.route("/hdpoker").handler(sockHandler)
    httpServer.requestHandler(router.&accept)
    httpServer.listen()
  }

}

----------------------------------------

TITLE: Publishing and Subscribing to Actions via EventBus in TypeScript
DESCRIPTION: TypeScript implementation for publishing and subscribing to counter actions through the event bus. Handles action distribution between connected clients.

LANGUAGE: typescript
CODE:
publishAction(action: RemoteAction) {
    if (action.publishedByUser) {
        console.error("This action has already been published");
        return;
    }
    action.publishedByUser = this.currentUser;
    this.eventBusService.publish(action.eventBusAddress, action);
}
subscribeToActions(eventBusAddress: string) {
    this.eventBusService.registerHandler(eventBusAddress, (error, message) => {
        // Handle message from subscription
        if (message.body.publishedByUser === this.currentUser) {
            // Ignore action sent by current manager
            return;
        }
        let localAction = message.body;
        this.store.dispatch(localAction);
    });
}

----------------------------------------

TITLE: Implementing Vert.x Verticle for CPU Load Monitoring
DESCRIPTION: Java code for a Vert.x Verticle that sets up an HTTP server, SockJS EventBus bridge, and periodically publishes CPU load data.

LANGUAGE: java
CODE:
public class RPiVerticle extends AbstractVerticle {

  private static final OperatingSystemMXBean osMBean;

  static {
    try {
      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void start() {

    Router router = Router.router(vertx);

    router.route("/eventbus/*").handler(SockJSHandler.create(vertx)
        .bridge(new BridgeOptions().addOutboundPermitted(new PermittedOptions().setAddress("load"))));

    router.route().handler(StaticHandler.create());

    vertx.createHttpServer().requestHandler(router::accept).listen(8080);

    vertx.setPeriodic(1000, t -> vertx.eventBus().publish("load",
        new JsonObject()
            .put("creatTime", System.currentTimeMillis())
            .put("cpuTime", osMBean.getSystemLoadAverage())));
  }
}

----------------------------------------

TITLE: Adding Vert.x Web API Contract Dependency in Maven
DESCRIPTION: XML snippet showing how to add the vertx-web-api-contract dependency to a Maven project for OpenAPI 3 support.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-web-api-contract</artifactId>
    <version>3.6.0</version>
</dependency>

----------------------------------------

TITLE: Implementing REST API with Vert.x3 and PostgreSQL JSON
DESCRIPTION: This Java code snippet demonstrates how to create a Vert.x3 REST API that interacts with PostgreSQL using the JSON data type. It includes methods for creating a new sale record and retrieving a sale by ID, utilizing the JDBC client for database operations.

LANGUAGE: Java
CODE:
// Code snippet not included due to being embedded in a script tag

----------------------------------------

TITLE: Using the Vert.x Event Bus in Ruby
DESCRIPTION: Demonstrates how to use the Vert.x event bus to send and receive messages between verticles. This example shows registering a handler and sending a message.

LANGUAGE: ruby
CODE:
id = Vertx::EventBus.register_handler('test.address') do |message|
    puts "Got message body #{message.body}" 
end

Vertx::EventBus.send("test.address", 'hello world')

----------------------------------------

TITLE: Using RxJava2 Completable and Maybe Types in Vert.x
DESCRIPTION: Demonstrates how to use RxJava2 Completable and Maybe types with Vert.x APIs. Shows examples of handling asynchronous operations that may or may not return a result.

LANGUAGE: java
CODE:
// expose Handler<AsyncResult<Void>>
Completable completable = server.rxClose();

completable.subscribe(() -> System.out.println("closed"));

// expose Handler<AsyncResult<String>> where the result can be null
Maybe<String> ipAddress = dnsClient.rxLookup("www.google.com");
ipAddress.subscribe(
  value -> System.out.println("resolved to " + value),
  err -> err.printStackTrace(),
  () -> System.out.println("does not resolve"));

----------------------------------------

TITLE: Implementing VertxMatcherAssert for Hamcrest Integration
DESCRIPTION: Java class that bridges Hamcrest matchers with Vert.x Unit's TestContext. This allows the use of Hamcrest matchers in Vert.x Unit tests while properly reporting failures to the TestContext.

LANGUAGE: java
CODE:
public class VertxMatcherAssert {

  public static <T> void assertThat(TestContext context, T actual,
    Matcher<? super T> matcher) {
    assertThat(context, "", actual, matcher);
  }

  public static <T> void assertThat(TestContext context, String reason,
    T actual, Matcher<? super T> matcher) {
    if (!matcher.matches(actual)) {
      Description description = new StringDescription();
      description.appendText(reason)
          .appendText("\nExpected: ")
          .appendDescriptionOf(matcher)
          .appendText("\n     but: ");
      matcher.describeMismatch(actual, description);
      context.fail(description.toString());
    }
  }

  public static void assertThat(TestContext context, String reason,
    boolean assertion) {
    if (!assertion) {
      context.fail(reason);
    }
  }
}

----------------------------------------

TITLE: Implementing Counter Service in Groovy with Vert.x
DESCRIPTION: A Groovy service class that handles counter state management on the server side. It processes increment, decrement and reset actions through an event handler.

LANGUAGE: groovy
CODE:
class CounterService {
    static INCREMENT = '[Counter] Increment'
    static DECREMENT = '[Counter] Decrement'
    static RESET = '[Counter] Reset'
    int total = 0
    void handleEvent(event) {
        switch(event.type) {
            case INCREMENT:
                total++
                break
            case DECREMENT:
                total--
                break
            case RESET:
                total = 0
                break
        }
    }
}

----------------------------------------

TITLE: Implementing AMQP Message Handler
DESCRIPTION: Handles AMQP message requests for getting scores, including response handling with status codes.

LANGUAGE: java
CODE:
public void getScores(Message<Object> msg)  
{  
   if(msg.replyAddress() != null)  
   {  
     JsonObject response = new JsonObject();  
     response.put("application_properties", new JsonObject().put("status", 200));  
     response.put("body", new JsonArray(Json.encode(scoreService.getScores())).encode());  
     msg.reply(response);  
   }  
   else  
   {  
     LOG.warn("Received LiveScore/getScores request without reply to address");  
   }  
}  

----------------------------------------

TITLE: Testing Vert.x Scala Verticle with ScalaTest
DESCRIPTION: Example of a ScalaTest specification for testing a Vert.x Scala verticle. It demonstrates how to make HTTP requests and assert responses asynchronously.

LANGUAGE: scala
CODE:
package io.vertx.scala.sbt

import org.scalatest.Matchers

import scala.concurrent.Promise

class HttpVerticleSpec extends VerticleTesting[HttpVerticle] with Matchers {

  "HttpVerticle" should "bind to 8666 and answer with 'world'" in {
    val promise = Promise[String]

    vertx.createHttpClient()
      .getNow(8666, "127.0.0.1", "/hello",
        r => {
          r.exceptionHandler(promise.failure)
          r.bodyHandler(b => promise.success(b.toString))
        })

    promise.future.map(res => res should equal("world"))
  }

}

----------------------------------------

TITLE: Initializing Counter State via EventBus in TypeScript
DESCRIPTION: TypeScript implementation for initializing counter state through event bus request/response pattern. Sends request to fetch initial counter value and dispatches local reset action.

LANGUAGE: typescript
CODE:
initializeCounter() {
    this.eventBusService.send('counter::total', body, (error, message) => {
    // Handle reply
    if (message && message.body) {
            let localAction = new CounterActions.ResetAction();
            localAction.payload = message.body; // Total value
            this.store.dispatch(localAction);
        }
    });
}

----------------------------------------

TITLE: Implementing REST API with Vert.x Router
DESCRIPTION: Basic Vert.x implementation of the Hello World REST API using Router to handle GET requests and return JSON responses.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {
  @Override
  public void start() {
    Router router = Router.router(vertx);

    router.get("/hello").handler(rc -> {
      rc.response()
          .putHeader("content-type", "application/json")
          .end(new JsonObject().put("greeting", "Hello World!").encode());
    });

    vertx.createHttpServer().requestHandler(router::accept).listen(8080);
  }
}

----------------------------------------

TITLE: Deploying a Verticle Programmatically in Vert.x
DESCRIPTION: Shows how to deploy a verticle programmatically from within another verticle, including passing configuration and specifying the number of instances.

LANGUAGE: ruby
CODE:
var config = { name: 'foo', age: 234 }
Vertx.deploy_verticle('my_verticle.rb', config)

----------------------------------------

TITLE: RxJava Single Integration with HTTP Server
DESCRIPTION: Shows how to use RxJava Singles with Vert.x HTTP server for reactive programming.

LANGUAGE: java
CODE:
HttpServer server = vertx.createHttpServer();
Single<HttpServer> single = server.rxListen(8080, "localhost");
single.subscribe(
  ok -> System.out.println("Server started"),
  err -> System.out.println("Something went wrong " + err.getMessage()));

----------------------------------------

TITLE: Router Factory Integration with Services
DESCRIPTION: Code showing how to connect OpenAPI router factory with service implementations using mountServicesFromExtensions

LANGUAGE: java
CODE:
OpenAPI3RouterFactory.create(this.vertx, "my_spec.yaml", openAPI3RouterFactoryAsyncResult -> {
  if (openAPI3RouterFactoryAsyncResult.succeeded()) {
    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();
    // Mount services on event bus based on extensions
    routerFactory.mountServicesFromExtensions(); // <- Pure magic happens!
    // Generate the router
    Router router = routerFactory.getRouter();
    server = vertx.createHttpServer(new HttpServerOptions().setPort(8080));
    server.requestHandler(router).listen();
    // Initialization completed
  } else {
    // Something went wrong during router factory initialization
  }
});

----------------------------------------

TITLE: Testing REST API Contract with JUnit and RAML
DESCRIPTION: JUnit test setup to verify API implementation against RAML contract using RestEasy client and RAML matchers.

LANGUAGE: java
CODE:
public class APITest {

  private static final RamlDefinition api = RamlLoaders.fromClasspath()
      .load("/api/hello.raml")
      .assumingBaseUri("http://localhost:8080/");

  private ResteasyClient client = new ResteasyClientBuilder().build();
  private CheckingWebTarget checking;

  @BeforeClass
  public static void bootApp() {
    Runner.run(App.class);
  }

  @Before
  public void createTarget() {
    checking = api.createWebTarget(client.target("http://localhost:8080"));
  }

  @Test
  public void testHelloEndpoint() {
    checking.path("/hello").request().get();
    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());
  }
}

----------------------------------------

TITLE: Router Factory Implementation with OpenAPI
DESCRIPTION: Java code showing how to create a Router using OpenAPI3RouterFactory to handle transaction operations

LANGUAGE: java
CODE:
OpenAPI3RouterFactory.create(vertx, "src/main/resources/petstore.yaml", ar -> {
  if (ar.succeeded()) {
    // Spec loaded with success
    OpenAPI3RouterFactory routerFactory = ar.result();
    routerFactory.addHandlerByOperationId("getTransactionsList", routingContext -> {
      RequestParameters params = routingContext.get("parsedParameters");
      RequestParameter from = params.queryParameter("from");
      // getTransactionsList business logic
    });
    // add handlers for addTransaction, updateTransaction and removeTransaction
    Router router = routerFactory.getRouter();
  } else {
    // Something went wrong during router factory initialization
    Throwable exception = ar.cause();
    // Log exception, fail verticle deployment ... etc
  }
});

----------------------------------------

TITLE: JavaScript EventBus Handler Registration
DESCRIPTION: Implementation of WebSocket event handling using EventBus for real-time price updates and feed management.

LANGUAGE: javascript
CODE:
function registerHandlerForUpdateCurrentPriceAndFeed() {
    var eventBus = new EventBus('http://localhost:8080/eventbus');
    eventBus.onopen = function () {
        eventBus.registerHandler('auction.' + auction_id, function (error, message) {
            document.getElementById('current_price').innerHTML = JSON.parse(message.body).price;
            document.getElementById('feed').value += 'New offer: ' + JSON.parse(message.body).price + '\n';
        });
    }
};

----------------------------------------

TITLE: Elasticsearch Index Template Configuration
DESCRIPTION: JSON configuration for Elasticsearch index template defining field mappings and analysis settings for log data.

LANGUAGE: json
CODE:
{
  "mappings": {
    "_default_": {
      "_all": {
        "enabled": true,
        "norms": {
          "enabled": false
        }
      },
      "dynamic_templates": [
        {
          "template1": {
            "mapping": {
              "doc_values": true,
              "ignore_above": 1024,
              "index": "not_analyzed",
              "type": "{dynamic_type}"
            },
            "match": "*"
          }
        }
      ],
      "properties": {
        "@timestamp": {
          "type": "date"
        },
        "offset": {
          "type": "long",
          "doc_values": "true"
        },
        "type": { "type": "string", "index": "not_analyzed" },
        "host": { "type": "string", "index": "not_analyzed" },
        "log_level": { "type": "string", "index": "not_analyzed" },
        "logger_name": { "type": "string", "index": "analyzed" },
        "log_message": { "type": "string", "index": "analyzed" }
      }
    }
  },
  "settings": {
    "index.refresh_interval": "5s"
  },
  "template": "filebeat-*"
}

----------------------------------------

TITLE: Demonstrating Futurisation in Vert.x 4 NetClient Interface
DESCRIPTION: This code snippet shows the evolution of the NetClient interface in Vert.x 4, introducing a new method that returns a Future instead of using a callback handler. This change is part of the futurisation effort to extend the asynchronous model in Vert.x 4.

LANGUAGE: java
CODE:
public interface NetClient {

  // Since 3.0
  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);

  // New in 4.0
  Future<NetSocket> connect(int port, String host);
}

----------------------------------------

TITLE: Custom CORS Validation Predicate in Vert.x
DESCRIPTION: Implements a custom response predicate to validate CORS headers for POST method allowance.

LANGUAGE: java
CODE:
Function<HttpResponse<Void>, ResponsePredicateResult> methodsPredicate = resp -> {
  String methods = resp.getHeader("Access-Control-Allow-Methods");
  if (methods != null) {
    if (methods.contains("POST")) {
      return ResponsePredicateResult.success();
    }
  }
  return ResponsePredicateResult.failure("Does not work");
};

client
  .request(HttpMethod.OPTIONS, 8080, "myserver.mycompany.com", "/some-uri")
  .putHeader("Origin", "Server-b.com")
  .putHeader("Access-Control-Request-Method", "POST")
  .expect(methodsPredicate)
  .send(ar -> {
    if (ar.succeeded()) {
      // Process the POST request now
    } else {
      System.out.println("Something went wrong " + ar.cause().getMessage());
    }
  });

----------------------------------------

TITLE: Implementing HTTP Client Request Logic
DESCRIPTION: Implements the core HTTP client functionality with response handling and error management using Vert.x HttpClient.

LANGUAGE: javascript
CODE:
// Create the client request
var request = client.getAbs(url, function(response) {

  // Print the response in the shell console
  response.handler(function(buffer) {
    process.write(buffer.toString("UTF-8"));
  });

  // End the command when the response ends
  response.endHandler(function() {
    process.end();
  });
});

// Set a request handler to end the command with error
request.exceptionHandler(function(err) {
  process.write("Error: " + err.getMessage());
  process.end();
});

// End the http request
request.end();

----------------------------------------

TITLE: Hello World HTTP Server with Vert.x
DESCRIPTION: Basic HTTP server implementation using Vert.x that responds to all requests with 'Hello World'. Listens on port 8080.

LANGUAGE: javascript
CODE:
vertx.createHttpServer()
  .requestHandler(function (req) {
    req.response()
      .putHeader("content-type", "text/plain")
      .end("Hello World!");
}).listen(8080);

----------------------------------------

TITLE: Running Code on Vert.x Context with CompletableFuture
DESCRIPTION: This snippet shows how to ensure a CompletableFuture's callback runs on the correct Vert.x context. It uses the Context.runOnContext method to execute the callback, ensuring it runs within the proper Vert.x context.

LANGUAGE: java
CODE:
final Context currentContext = vertx.getOrCreateContext();
toComplete.thenRun(() -> {
        currentContext.runOnContext(v -> {
        assertThat(Thread.currentThread().getName(), is(threadName));
        async.complete();
    }
});

----------------------------------------

TITLE: Implementing JavaScript Client for Real-time CPU Load Visualization
DESCRIPTION: JavaScript code for the client-side application that connects to the Vert.x EventBus, receives CPU load data, and updates the visualization.

LANGUAGE: javascript
CODE:
var eb = new vertx.EventBus(window.location + "eventbus");

eb.onopen = function () {
  eb.registerHandler("load", function (msg) {
    if (data.length === 25) {
      // when length of data equal 25 then pop data[0]
      data.shift();
    }
    data.push({
      "creatTime": new Date(msg.creatTime),
      "cpuTime": msg.cpuTime
    });
    render();
  });
};

----------------------------------------

TITLE: Creating an HTTP Server with Vert.x in Ruby
DESCRIPTION: This example demonstrates how to create an HTTP server using Vert.x in Ruby, set up a request handler, and start listening on a specific port and host.

LANGUAGE: ruby
CODE:
server = Vertx::HttpServer.new

server.request_handler do |request|
  puts 'An HTTP request has been received'
end.listen(8080, 'localhost')

----------------------------------------

TITLE: Creating a SockJS Server with Vert.x in Ruby
DESCRIPTION: This example demonstrates how to create a SockJS server using Vert.x in Ruby, including setting up the SockJS handler and echoing data.

LANGUAGE: ruby
CODE:
httpServer = Vertx::HttpServer.new

sockJSServer = Vertx::SockJSServer.new(httpServer)

config = { 'prefix' => '/echo' }

sockJSServer.install_app(config) do |sock|

    p = Vertx::Pump.new(sock, sock)

    p.start
end

httpServer.listen(8080)

----------------------------------------

TITLE: Adding Vert.x MQTT client dependency in Maven
DESCRIPTION: This XML snippet shows how to add the Vert.x MQTT client dependency to a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-mqtt</artifactId>
    <version>3.5.0.Beta1</version>
</dependency>

----------------------------------------

TITLE: Running Vert.x TCP Client
DESCRIPTION: Commands to execute the compiled TCP client JAR with configuration parameters

LANGUAGE: bash
CODE:
java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage="hello" -jar vertx-net-client-full.jar

LANGUAGE: bash
CODE:
java -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage="hello" -Dvertx.logger-delegate-factory-class-name="io.vertx.core.logging.SLF4JLogDelegateFactory" -jar vertx-net-client-full.jar

----------------------------------------

TITLE: URL Service Verticle Implementation
DESCRIPTION: Vert.x Verticle class implementing URL shortening logic using database storage. Handles URL processing, hashing/dehashing of IDs, and JDBC operations for storing and retrieving URLs.

LANGUAGE: java
CODE:
// Code reference: https://gist.github.com/pendula95/aeb4479162e6e33504add2af9fa68bc5.js
// Note: Original code is embedded via GitHub Gist

----------------------------------------

TITLE: Reading Data from HTTP Request Body in Vert.x
DESCRIPTION: This example demonstrates how to read data from the HTTP request body using a data handler in Vert.x.

LANGUAGE: ruby
CODE:
server.request_handler do |request|

  request.data_handler do |buffer|
    puts "I received  #{buffer.length} bytes"
  end
  
end.listen(8080, 'localhost')

----------------------------------------

TITLE: Setting up a SockJS-EventBus Bridge in Vert.x
DESCRIPTION: This snippet shows how to set up a SockJS-EventBus bridge in Vert.x, allowing client-side JavaScript to communicate with the server-side event bus.

LANGUAGE: ruby
CODE:
server = Vertx::HttpServer.new;

sockJSServer = Vertx::SockJSServer.new(server)

sockJSServer.bridge({'prefix' => '/eventbus'}, [], [])

server.listen(8080)

----------------------------------------

TITLE: Using Extended HttpServer with Future Methods in Scala
DESCRIPTION: This example demonstrates how to use the extended HttpServer class with the new 'listenFuture' method in a Scala application. It shows the creation of an HTTP server and handling of the Future returned by the listen operation.

LANGUAGE: scala
CODE:
package io.vertx.scala.demo

import io.vertx.lang.scala.VertxExecutionContext
import io.vertx.scala.core._

import scala.util.{Failure, Success}

object Main {
  def main(args: Array[String]): Unit = {
    val vertx = Vertx.vertx()
    implicit val ec = VertxExecutionContext(vertx.getOrCreateContext())
    vertx
      .createHttpServer()
      .requestHandler(r => {
        r.response().end("bye")
      })
      .listenFuture(6667)
      .onComplete {
        case Success(_) => println("Started")
        case Failure(exception) => println("Failure")
      }
  }
}

----------------------------------------

TITLE: Building Native Image with GraalVM CLI
DESCRIPTION: This bash command demonstrates how to use the GraalVM native-image tool to generate a native executable from a Vert.x application JAR file, including necessary configuration options.

LANGUAGE: bash
CODE:
$GRAALVMDIR/bin/native-image \
 --verbose \
 --no-server \
 -Dio.netty.noUnsafe=true  \
 -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \
 -H:+ReportUnsupportedElementsAtRuntime \
 -Dfile.encoding=UTF-8 \
 -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar

----------------------------------------

TITLE: Creating a WebSocket Server with Vert.x in Ruby
DESCRIPTION: This snippet shows how to create a WebSocket server using Vert.x in Ruby, including setting up a websocket handler and echoing data.

LANGUAGE: ruby
CODE:
server = Vertx::HttpServer.new

server.websocket_handler do |websocket|

  p = Vertx::Pump.new(websocket, websocket)
  p.start

end.listen(8080, 'localhost')

----------------------------------------

TITLE: Creating and using MQTT Client in Vert.x
DESCRIPTION: Shows how to create an MQTT client, connect to a broker, publish a message, and disconnect using Vert.x MQTT client API.

LANGUAGE: java
CODE:
MqttClient mqttClient = MqttClient.create(vertx,
   new MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar ->
  if (ar.succeeded()) {
    System.out.println("Connected to a server");

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      false,
      false,
      s -> mqttClient.disconnect(d -> System.out.println("Disconnected from server")));
  } else {
    System.out.println("Failed to connect to a server");
    ar.cause().printStackTrace();
  }
});

----------------------------------------

TITLE: Implementing Future-based API in Vert.x 4 NetClient
DESCRIPTION: Demonstrates the evolution of the Vert.x API from callback-based to a future/callback hybrid model. Shows both the traditional 3.x callback approach and the new 4.0 Future-based method for the NetClient interface.

LANGUAGE: java
CODE:
public interface NetClient {

  // Since 3.0
  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);

  // New in 4.0
  Future<NetSocket> connect(int port, String host);
}

----------------------------------------

TITLE: Implementing getRssChannels Method in Vert.x
DESCRIPTION: Java method to handle the GET /user/{user_id}/rss_channels endpoint, fetching and returning RSS channel information for a given user.

LANGUAGE: java
CODE:
private void getRssChannels(RoutingContext ctx) {
    String userId = ctx.request().getParam("user_id");
    if (userId == null) {
        responseWithInvalidRequest(ctx);
    } else {
        Future<List<Row>> future = Future.future();
        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);
        future.compose(rows -> {
            List<String> links = rows.stream()
                    .map(row -> row.getString(0))
                    .collect(Collectors.toList());

            return CompositeFuture.all(
                    links.stream().map(selectChannelInfo::bind).map(statement -> {
                        Future<List<Row>> channelInfoRow = Future.future();
                        client.executeWithFullFetch(statement, channelInfoRow);
                        return channelInfoRow;
                    }).collect(Collectors.toList())
            );
        }).setHandler(h -> {
            if (h.succeeded()) {
                CompositeFuture result = h.result();
                List<List<Row>> results = result.list();
                List<Row> list = results.stream()
                        .flatMap(List::stream)
                        .collect(Collectors.toList());
                JsonObject responseJson = new JsonObject();
                JsonArray channels = new JsonArray();

                list.forEach(eachRow -> channels.add(
                        new JsonObject()
                                .put("description", eachRow.getString(0))
                                .put("title", eachRow.getString(1))
                                .put("link", eachRow.getString(2))
                                .put("rss_link", eachRow.getString(3))
                ));

                responseJson.put("channels", channels);
                ctx.response().end(responseJson.toString());
            } else {
                log.error("failed to get rss channels", h.cause());
                ctx.response().setStatusCode(500).end("Unable to retrieve the info from C*");
            }
        });
    }
}

----------------------------------------

TITLE: Handling HTTP Requests in Vert.x
DESCRIPTION: This snippet shows how to handle HTTP requests in Vert.x, including accessing request properties and sending responses.

LANGUAGE: ruby
CODE:
server.request_handler do |request|

  request.response.put_header('Content-Type', 'text/plain')
     
  str = "Headers are\n"
  request.headers.each do |key, value|
    str << "#{key}: #{value}\n"
  end
  
  request.response.end(str)
  
end.listen(8080, 'localhost')

----------------------------------------

TITLE: Creating SwaggerRouter in Java
DESCRIPTION: A code snippet showing how to create a SwaggerRouter instance using a Swagger definition file.

LANGUAGE: java
CODE:
FileSystem vertxFileSystem = vertx.fileSystem();
vertxFileSystem.readFile("***YOUR_SWAGGER_FILE***", readFile -> {
    if (readFile.succeeded()) {
        Swagger swagger = new SwaggerParser().parse(readFile.result().toString(Charset.forName("utf-8"))); 
        Router swaggerRouter = SwaggerRouter.swaggerRouter(Router.router(vertx), swagger, vertx.eventBus(), new OperationIdServiceIdResolver());
        [...]
   } else {
        [...]
   }
});

----------------------------------------

TITLE: Creating a Simple TCP Echo Server in Ruby with Vert.x
DESCRIPTION: This snippet demonstrates how to create a basic TCP echo server using Vert.x in Ruby. It sets up a NetServer that echoes back any data received on a connection.

LANGUAGE: ruby
CODE:
require "vertx"
include Vertx

@server = NetServer.new.connect_handler { |socket|
  Pump.new(socket, socket).start
}.listen(1234, 'localhost')

def vertx_stop
  @server.close
end

----------------------------------------

TITLE: Basic HTTP Server with Ceylon
DESCRIPTION: Creates a basic HTTP server using Vert.x and Ceylon that listens on port 8080

LANGUAGE: Ceylon
CODE:
value server = vertx.createHttpServer();

server.requestHandler { 
  void handle(HttpServerRequest request) {
    print("A request has arrived!");
    request.response.end();
  }
}.listen(8080, "localhost");

----------------------------------------

TITLE: RxJava2 WebSocket Connection with HttpClient in Java
DESCRIPTION: Demonstrates how to use RxJava2 with the new webSocket method for a reactive approach to WebSocket connections.

LANGUAGE: java
CODE:
HttpClient client = vertx.createHttpClient();
Single<WebSocket> single = client.rxWebSocket(80, "example.com", "/");
single.subscribe(
  ws -> {
    // connected
  },
  err -> {
    // handle error
  });

----------------------------------------

TITLE: Initializing Event Bus Connection in JavaScript
DESCRIPTION: Client-side JavaScript code to establish connection with the Vert.x event bus and request album data from the MongoDB persistor.

LANGUAGE: javascript
CODE:
var eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');

eb.onopen = function() {
  eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },
    function(reply) {
      if (reply.status === 'ok') {
        var albumArray = [];
        for (var i = 0; i < reply.results.length; i++) {
          albumArray[i] = new Album(reply.results[i]);
        }
        that.albums = ko.observableArray(albumArray);
        ko.applyBindings(that);
      } else {
        console.error('Failed to retrieve albums: ' + reply.message);
      }
    });
};

----------------------------------------

TITLE: Handling Verticle Cleanup in Vert.x
DESCRIPTION: This example demonstrates how to provide custom cleanup code when a verticle is stopped by defining a vertx_stop method.

LANGUAGE: ruby
CODE:
def vertx_stop
  # Cleanup code here
end

----------------------------------------

TITLE: Deploying a Verticle Programmatically in Vert.x
DESCRIPTION: This snippet demonstrates how to deploy a verticle programmatically from within another verticle, including passing configuration.

LANGUAGE: python
CODE:
config = { 'name': 'foo', 'age': 234 }
vertx.deploy_verticle('my_verticle.py', config)

----------------------------------------

TITLE: Testing Immediate Completion with CompletableFuture in Vert.x
DESCRIPTION: This code snippet demonstrates a JUnit test using VertxUnitRunner to test immediate completion of a CompletableFuture in a Vert.x environment. It shows how the completion runs on the correct thread but not necessarily on the correct Vert.x context.

LANGUAGE: java
CODE:
@RunWith(VertxUnitRunner.class)
public class ImmediateCompletionTest {
    @Rule
    public final RunTestOnContext rule = new RunTestOnContext();

    @Test
    public void testImmediateCompletion(TestContext context) {

        final Async async = context.async();
        final Vertx vertx = rule.vertx();
        final CompletableFuture<Integer> toComplete = new CompletableFuture<>();
        // delay future completion by 500 ms
        final String threadName = Thread.currentThread().getName();
        toComplete.complete(100);
        toComplete.thenRun(() -> {
            assertThat(Thread.currentThread().getName(), is(threadName));
            async.complete();
        });
    }
}

----------------------------------------

TITLE: Accessing Configuration in a Vert.x Verticle
DESCRIPTION: This snippet shows how to access JSON configuration passed to a verticle using the Vertx.config method.

LANGUAGE: ruby
CODE:
config = Vertx.config

# Do something with config

puts "number of wibbles is #{config.wibble_number}"

----------------------------------------

TITLE: Creating a Simple TCP Echo Server Verticle in Python
DESCRIPTION: This snippet shows how to create a basic TCP echo server verticle that listens on port 1234 and echoes back any data received.

LANGUAGE: python
CODE:
import vertx
from core.streams import Pump

server = vertx.create_net_server()
@server.connect_handler
def connect_handler(socket):
    Pump(socket, server).start()
server.listen(1234, 'localhost')

def vertx_stop():
    server.close()

----------------------------------------

TITLE: Accessing Vert.x Core API in a Verticle
DESCRIPTION: This snippet shows how to access the Vert.x core API within a verticle by requiring the 'vertx' module at the top of the script.

LANGUAGE: ruby
CODE:
require 'vertx'

----------------------------------------

TITLE: RSS Feed Fetching Implementation
DESCRIPTION: Implementation of the RSS feed fetching logic using Vert.x Event Bus

LANGUAGE: java
CODE:
private Future<Void> prepareNecessaryQueries() {
        Future<PreparedStatement> insertChannelInfoPrepFuture = Future.future();
        cassandraClient.prepare("INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);", insertChannelInfoPrepFuture);

        Future<PreparedStatement> insertArticleInfoPrepFuture = Future.future();
        cassandraClient.prepare("INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);", insertArticleInfoPrepFuture);

        return CompositeFuture.all(
                insertChannelInfoPrepFuture.compose(preparedStatement -> {
                    insertChannelInfo = preparedStatement;
                    return Future.succeededFuture();
                }), insertArticleInfoPrepFuture.compose(preparedStatement -> {
                    insertArticleInfo = preparedStatement;
                    return Future.succeededFuture();
                })
        ).mapEmpty();
    }

----------------------------------------

TITLE: Working with AsyncFile in Vert.x
DESCRIPTION: This snippet shows how to work with AsyncFile in Vert.x, including opening a file asynchronously and performing random access reads and writes.

LANGUAGE: ruby
CODE:
Vertx::FileSystem.open('some-file.dat') do |err, async_file|
    if err
        puts "Failed to open file #{err}"
    else
        # File open, write a buffer 5 times into a file
        buff = Vertx::Buffer.create('foo')
        (1..5).each do |i|            
            async_file.write(buff, buff.length() * i) do |err, res|
                if err
                    puts "Failed to write #{err}"
                else
                    puts 'Written ok'
                end
            end
        end
    end
end

----------------------------------------

TITLE: Handling User Login in JavaScript
DESCRIPTION: This JavaScript function handles user login by sending a login request to the Vert.x auth manager. On successful login, it stores the session ID for future authenticated requests.

LANGUAGE: JavaScript
CODE:
eb.send('vertx.bridge.login', {username: that.username(), password: that.password()}, function (reply) {
    if (reply.status === 'ok') {
      that.sessionID(reply.sessionID);
    } else {
      alert('invalid login');
    }
  });

----------------------------------------

TITLE: Configuring and Starting Vert.x Web Server in Python
DESCRIPTION: Sets up configuration for the Vert.x web server module and deploys it along with a MongoDB persistor module.

LANGUAGE: Python
CODE:
web_server_conf = {
  'port' : 8080,
  'host' : 'localhost'
}

# Start the web server, with the config we defined above
import vertx

vertx.deploy_module('vertx.web-server-v1.0', web_server_conf)

----------------------------------------

TITLE: Implementing Vert.x MQTT client in Java
DESCRIPTION: This Java code snippet shows how to create a Vert.x verticle that sets up an MQTT client, connects to a broker, and handles incoming messages from all topics.

LANGUAGE: java
CODE:
import io.vertx.core.AbstractVerticle;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;

import java.io.UnsupportedEncodingException;

public class MainVerticle extends AbstractVerticle {

  @Override
  public void start() {
     MqttClientOptions options = new MqttClientOptions();
      // specify broker host
      options.setHost("iot.eclipse.org");
      // specify max size of message in bytes
      options.setMaxMessageSize(100_000_000);

    MqttClient client = MqttClient.create(vertx, options);

    client.publishHandler(s -> {
      try {
        String message = new String(s.payload().getBytes(), "UTF-8");
        System.out.println(String.format("Receive message with content: \"%s\" from topic \"%s\"", message, s.topicName()));
      } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    });

    client.connect(s -> {
      // subscribe to all subtopics
      client.subscribe("#", 0);
    });
  }
}

----------------------------------------

TITLE: Creating Jenkins Build Job with Job DSL
DESCRIPTION: Jenkins Job DSL script that configures a build job for a Vert.x application. It sets up SCM polling, Maven build steps, and Ansible deployment using the ansible-playbook plugin.

LANGUAGE: groovy
CODE:
job('vertx-microservices-workshop-job') {
    jdk('JDK8')
    scm {
        git('git://github.com/ricardohmon/vertx-microservices-workshop.git')
    }
    triggers {
        scm('*/15 * * * *')
    }
    steps {

      def mvnInst = 'M3.3.9'  
      maven {  
        goals('package')  
        mavenInstallation(mvnInst)  
      }  
      ansiblePlaybook('/ansible/playbook.yml') {  
        inventoryPath('/ansible/hosts')  
        ansibleName('Ansible2.0')  
        credentialsId('vagrant-key')  
        colorizedOutput(true)  
      }  

    }  
}

----------------------------------------

TITLE: Creating EventBus Connection in JavaScript
DESCRIPTION: This JavaScript code creates an EventBus connection to the Vert.x server. It then sends a request to the MongoDB persistor to fetch album data and populates the client-side application with the results.

LANGUAGE: JavaScript
CODE:
var eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');

eb.onopen = function() {

    // Get the static data

    eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },
      function(reply) {
        if (reply.status === 'ok') {
          var albumArray = [];
          for (var i = 0; i < reply.results.length; i++) {
            albumArray[i] = new Album(reply.results[i]);
          }
          that.albums = ko.observableArray(albumArray);
          ko.applyBindings(that);
        } else {
          console.error('Failed to retrieve albums: ' + reply.message);
        }
      });
  };

----------------------------------------

TITLE: Coordinating Application Startup with a Verticle in Vert.x
DESCRIPTION: This snippet shows how to use a verticle to coordinate the startup of an application composed of multiple verticles.

LANGUAGE: python
CODE:
import vertx

# Application config
appConfig = {
    'verticle1_config' : {
        # Config for verticle1
    },
    'verticle2_config' : {
        # Config for verticle2
    },
    'verticle3_config' : {
        # Config for verticle3
    },
    'verticle4_config' : {
        # Config for verticle4
    },
    'verticle5_config' : {
        # Config for verticle5
    }
}

# Start the verticles that make up the app

vertx.deploy_verticle("verticle1.py", appConfig["verticle1_config"])
vertx.deploy_verticle("verticle2.py", appConfig["verticle2_config"], 5)
vertx.deploy_verticle("verticle3.py", appConfig["verticle3_config"])
vertx.deploy_worker_verticle("verticle4.py", appConfig["verticle4_config"])
vertx.deploy_worker_verticle("verticle5.py", appConfig["verticle5_config"], 10)

----------------------------------------

TITLE: Initializing Web Server Configuration in JavaScript
DESCRIPTION: Basic Vert.x web server setup with event bus bridge configuration for MongoDB persistor integration.

LANGUAGE: javascript
CODE:
load('vertx.js');

var webServerConf = {  
  port: 8080,
  host: 'localhost'
};

vertx.deployModule('vertx.web-server-v1.0', webServerConf);

----------------------------------------

TITLE: Connecting and Querying MySQL with Vert.x MySQLPool
DESCRIPTION: Java code showing how to connect to a MySQL database using Vert.x MySQLPool, configure connection options, and perform a query. This example illustrates the usage of the new Reactive MySQL Client.

LANGUAGE: java
CODE:
MySQLConnectOptions connectOptions = new MySQLConnectOptions()
  .setPort(3306)
  .setHost("the-host")
  .setDatabase("the-db")
  .setUser("user")
  .setPassword("secret");

MySQLPool client = MySQLPool.pool(connectOptions, new PoolOptions().setMaxSize(5));

client.query("SELECT * FROM users WHERE id='julien'", ar -> {
  if (ar.succeeded()) {
    RowSet result = ar.result();
    System.out.println("Got " + result.size() + " rows ");
  } else {
    System.out.println("Failure: " + ar.cause().getMessage());
  }
});

----------------------------------------

TITLE: Ansible Playbook for Vert.x Deployment
DESCRIPTION: Ansible playbook that handles the deployment of Vert.x applications, including database setup, application deployment with rolling updates, and service management.

LANGUAGE: yaml
CODE:
# 1) Special task for the service with a db
- hosts: audit-service
  remote_user: vagrant
  become: yes
  roles:
    - db-setup

  # 2) Common tasks for all hosts
- hosts: quote-generator:portfolio-service:compulsive-traders:audit-service:trader-dashboard
  remote_user: vagrant
  become: yes
  serial: 1
  environment:
    JAVA_HOME: /usr/lib/jvm/jre-1.8.0-openjdk/

  pre_tasks:
  - name: Check if the app jar exists in the target already
    stat: path=/usr/share/vertx_app/app-fatjar.jar
    register: st
  - name: List running Vert.x applications
    command: java -jar /usr/share/vertx_app/app-fatjar.jar list
    register: running_app_list
    when: st.stat.exists == True
  - name: Stop app if it is already running (avoid multiple running instances)
    command: java -jar /usr/share/vertx_app/app-fatjar.jar stop {{ item | regex_replace('^(?P<V_id>.[8]-.[4]-.[4].[4].[12])\t.*', '\\g<V_id>') }}
    with_items: "{{ running_app_list.stdout_lines|default([]) }}"
    when: st.stat.exists == True and (item | regex_replace('.*\t(.*)$', '\\1') | match('.*/app-fatjar.jar$'))

  # Main role
  roles:
    - { role: vertx-app-deployment, jenkins_job_workspace: "{{ lookup('env', 'WORKSPACE') }}" }

  post_tasks:
  - name: List again running Vert.x applications
    command: java -jar /usr/share/vertx_app/app-fatjar.jar list

----------------------------------------

TITLE: Initializing Vert.x Web Server and MongoDB Persistor in Ruby
DESCRIPTION: This Ruby script sets up the Vert.x web server and MongoDB persistor module. It configures the server port, host, and enables the event bus bridge with specific inbound and outbound permissions.

LANGUAGE: Ruby
CODE:
require "vertx"

web_server_conf = {
  'port' => 8080,
  'host' => 'localhost',
  'bridge' => true,

  'inbound_permitted' => [
    # Allow calls to get static album data from the persistor
    {
      'address' => 'vertx.mongopersistor',
      'match' => {
        'action' => 'find',
        'collection' => 'albums'
      }
    }
  ],
  'outbound_permitted' => [ {} ]
}

# Deploy a MongoDB persistor module

Vertx.deploy_module('vertx.mongo-persistor-v1.2')

# Start the web server, with the config we defined above

Vertx.deploy_module('vertx.web-server-v1.0', web_server_conf)

----------------------------------------

TITLE: Performing File System Operations in Vert.x
DESCRIPTION: This example demonstrates various file system operations in Vert.x, including copying files, reading file properties, and writing to files.

LANGUAGE: ruby
CODE:
Vertx::FileSystem.copy('foo.dat', 'bar.dat') do |err, res|
    puts 'Copy was successful' if !err        
end

Vertx::FileSystem.props('some-file.txt') do |err, props|
    if err
        puts "Failed to retrieve file props: #{err}"
    else
        puts 'File props are:'
        puts "Last accessed: #{props.lastAccessTime}"
        // etc
    end
end

Vertx::FileSystem.read_file_as_buffer('myfile.dat') do |err, res|
    puts "File contains: #{res.length} bytes" if !err        
end

----------------------------------------

TITLE: Initializing OAuth2 Provider in Vert.x
DESCRIPTION: Demonstrates the simplified way to instantiate an OAuth2 provider using the new Provider API. This approach assumes AUTH_CODE flow for web applications with a backend, requiring only clientId and clientSecret parameters.

LANGUAGE: java
CODE:
Provider.create(vertx, clientId, clientSecret)

----------------------------------------

TITLE: Prometheus Configuration with Embedded Server
DESCRIPTION: Java code to configure Vert.x with Prometheus metrics backend using embedded server.

LANGUAGE: java
CODE:
MicrometerMetricsOptions options = new MicrometerMetricsOptions()
  .setPrometheusOptions(new VertxPrometheusOptions()
    .setStartEmbeddedServer(true)
    .setEmbeddedServerOptions(new HttpServerOptions().setPort(8081))
    .setEnabled(true))
  .setEnabled(true);
Vertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));

----------------------------------------

TITLE: Generated Bottles API Verticle in Java
DESCRIPTION: An example of a generated Verticle for the Bottles API, setting up EventBus consumers for API operations.

LANGUAGE: java
CODE:
package io.swagger.server.api.verticle;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonObject;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;

import io.swagger.server.api.model.Bottle;

import java.util.List;

public class BottlesApiVerticle extends AbstractVerticle {
    final static Logger LOGGER = LoggerFactory.getLogger(BottlesApiVerticle.class); 

    final static String LISTBOTTLES_SERVICE_ID = "listBottles";
    
    final BottlesApi service;

    public BottlesApiVerticle() {
        try {
            Class serviceImplClass = getClass().getClassLoader().loadClass("io.swagger.server.api.verticle.BottlesApiImpl");
            service = (BottlesApi)serviceImplClass.newInstance();
        } catch (Exception e) {
            logUnexpectedError("BottlesApiVerticle constructor", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public void start() throws Exception {
        
        //Consumer for listBottles
        vertx.eventBus().<JsonObject> consumer(LISTBOTTLES_SERVICE_ID).handler(message -> {
            try {
                service.listBottles(result -> {
                    if (result.succeeded())
                        message.reply(new JsonArray(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "listBottles");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("listBottles", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
    }
    
    private void manageError(Message<JsonObject> message, Throwable cause, String serviceName) {
        int code = MainApiException.INTERNAL_SERVER_ERROR.getStatusCode();
        String statusMessage = MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage();
        if (cause instanceof MainApiException) {
            code = ((MainApiException)cause).getStatusCode();
            statusMessage = ((MainApiException)cause).getStatusMessage();
        } else {
            logUnexpectedError(serviceName, cause); 
        }
            
        message.fail(code, statusMessage);
    }
    
    private void logUnexpectedError(String serviceName, Throwable cause) {
        LOGGER.error("Unexpected error in " + serviceName, cause);
    }
}

----------------------------------------

TITLE: Creating a Simple TCP Echo Server in Vert.x
DESCRIPTION: This snippet demonstrates how to create a basic TCP echo server that accepts connections and echoes back any received data.

LANGUAGE: groovy
CODE:
import static org.vertx.groovy.core.streams.Pump.createPump

vertx.createNetServer().connectHandler { socket ->
  createPump(socket, socket).start()
}.listen(1234)

----------------------------------------

TITLE: Accessing Configuration in a Vert.x Verticle
DESCRIPTION: Shows how to access JSON configuration passed to a verticle during deployment.

LANGUAGE: groovy
CODE:
def config = container.config

----------------------------------------

TITLE: Writing a Vert.x Unit Test
DESCRIPTION: Java code demonstrating how to write a Vert.x Unit test for the MyFirstVerticle. It sets up the test environment, deploys the Verticle, and tests its HTTP response.

LANGUAGE: java
CODE:
@RunWith(VertxUnitRunner.class)
public class MyFirstVerticleTest {

  private Vertx vertx;

  @Before
  public void setUp(TestContext context) {
    vertx = Vertx.vertx();
    vertx.deployVerticle(MyFirstVerticle.class.getName(),
      context.asyncAssertSuccess());
  }

  @Test
  public void test(TestContext context) {
    Async async = context.async();
    vertx.createHttpClient().get(8080, "localhost", "/")
      .handler(response -> {
        context.assertEquals(200, response.statusCode());
        response.bodyHandler(buffer -> {
          context.assertEquals("hello vert.x", buffer.toString("utf-8"));
          async.complete();
        });
      })
      .end();
  }
}

----------------------------------------

TITLE: Custom Metrics Timer Implementation
DESCRIPTION: Example of implementing custom metrics using Micrometer Timer in Vert.x.

LANGUAGE: java
CODE:
MeterRegistry registry = BackendRegistries.getDefaultNow();
Timer timer = Timer
  .builder("my.timer")
  .description("Time tracker for my extremely sophisticated algorithm")
  .register(registry);

vertx.setPeriodic(1000, l -> {
  timer.record(() -> myExtremelySophisticatedAlgorithm());
});

----------------------------------------

TITLE: Generated Bottles API Interface in Java
DESCRIPTION: An example of a generated interface for the Bottles API operations.

LANGUAGE: java
CODE:
package io.swagger.server.api.verticle;

import io.swagger.server.api.model.Bottle;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;

import java.util.List;

public interface BottlesApi {
    //listBottles
    void listBottles(Handler<AsyncResult<List<Bottle>>> handler);

}

----------------------------------------

TITLE: Coordinating Application Startup with Multiple Verticles
DESCRIPTION: Demonstrates using a main Verticle to coordinate the startup of an application composed of multiple Verticles.

LANGUAGE: JavaScript
CODE:
// Application config

var appConfig = {
    verticle1Config: {
        // Config for verticle1
    },
    verticle2Config: {
        // Config for verticle2
    }, 
    verticle3Config: {
        // Config for verticle3
    },
    verticle4Config: {
        // Config for verticle4
    },
    verticle5Config: {
        // Config for verticle5
    }  
}  

// Start the verticles that make up the app  

vertx.deployVerticle("verticle1.js", appConfig.verticle1Config);
vertx.deployVerticle("verticle2.js", appConfig.verticle2Config, 5);
vertx.deployVerticle("verticle3.js", appConfig.verticle3Config);
vertx.deployWorkerVerticle("verticle4.js", appConfig.verticle4Config);
vertx.deployWorkerVerticle("verticle5.js", appConfig.verticle5Config, 10);

----------------------------------------

TITLE: Adding Vert.x Unit Dependency in Gradle
DESCRIPTION: Gradle dependency declaration for adding Vert.x Unit to a Gradle project's build file. This allows the use of Vert.x Unit in tests.

LANGUAGE: gradle
CODE:
testCompile 'io.vertx:vertx-unit:3.2.0'

----------------------------------------

TITLE: Generated Bottle POJO in Java
DESCRIPTION: An example of a generated POJO class for the Bottle definition from the Swagger file.

LANGUAGE: java
CODE:
package io.swagger.server.api.model;

import java.util.Objects;

/**
 * Bottle
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Bottle {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("vintage")
  private Integer vintage = null;

  public Bottle id(Long id) {
    this.id = id;
    return this;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Bottle name(String name) {
    this.name = name;
    return this;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Bottle vintage(Integer vintage) {
    this.vintage = vintage;
    return this;
  }

  public Integer getVintage() {
    return vintage;
  }

  public void setVintage(Integer vintage) {
    this.vintage = vintage;
  }

  // toString, equals, and hashCode methods omitted for brevity
}

----------------------------------------

TITLE: Deploying a Verticle Programmatically in Vert.x
DESCRIPTION: This snippet shows how to deploy a verticle programmatically using the Vertx.deploy_verticle method.

LANGUAGE: ruby
CODE:
Vertx.deploy_verticle('my_verticle.rb')

----------------------------------------

TITLE: Submitting Order to MongoDB Persistor in JavaScript
DESCRIPTION: This JavaScript function submits an order to the MongoDB persistor. It includes the session ID for authentication and constructs the order message with user and item details.

LANGUAGE: JavaScript
CODE:
that.submitOrder = function() {

  if (!orderReady()) {
    return;
  }

  var orderItems = ko.toJS(that.items);
  var orderMsg = {
    sessionID: that.sessionID(),
    action: "save",
    collection: "orders",
    document: {
      username: that.username(),
      items: orderItems
    }
  }

  eb.send('vertx.mongopersistor', orderMsg, function(reply) {
    if (reply.status === 'ok') {
      that.orderSubmitted(true);
      // Timeout the order confirmation box after 2 seconds
      // window.setTimeout(function() { that.orderSubmitted(false); }, 2000);
    } else {
      console.error('Failed to accept order');
    }
  });
};

----------------------------------------

TITLE: Vert.x Router Configuration - Java
DESCRIPTION: Implementation of router setup and request handling logic

LANGUAGE: java
CODE:
<script src="https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=start.java"></script>

----------------------------------------

TITLE: Creating PlatformManager Instance in Java
DESCRIPTION: Demonstrates how to create an instance of PlatformManager using PlatformLocator to control the Vert.x platform.

LANGUAGE: java
CODE:
PlatformManager pm = PlatformLocator.factory.createPlatformManager();

----------------------------------------

TITLE: Defining API with Swagger YAML
DESCRIPTION: A simplified Swagger YAML file defining a wine cellar API with bottle and cellar information endpoints.

LANGUAGE: yaml
CODE:
swagger: "2.0"
info:
  version: 1.0.0
  title: Wine Cellar API
  description: Manage your wine cellar
host: wineCellarAPI
schemes:
  - http
basePath: /
paths:
  /bottles:
    get:
      summary: List all bottles
      operationId: listBottles
      tags:
        - Bottles
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Bottle"
  /information:
    get:
      summary: Get cellar information
      operationId: getCellarInformation
      tags:
        - Information
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/CellarInformation"
definitions:
  Bottle:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      vintage:
        type: integer
  CellarInformation:
    type: object
    properties:
      bottles:
        type: integer
      value:
        type: number
        format: double

----------------------------------------

TITLE: Creating EventBus Connection in JavaScript
DESCRIPTION: Establishes a connection to the Vert.x EventBus from the client-side JavaScript application.

LANGUAGE: JavaScript
CODE:
var eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');

----------------------------------------

TITLE: Java Vert.x Verticle Implementation
DESCRIPTION: Core Vert.x verticle setup with router configuration and HTTP server initialization.

LANGUAGE: java
CODE:
public class AuctionServiceVerticle extends AbstractVerticle {

    @Override
    public void start() {
        Router router = Router.router(vertx);

        router.route("/eventbus/*").handler(eventBusHandler());
        router.mountSubRouter("/api", auctionApiRouter());
        router.route().failureHandler(errorHandler());
        router.route().handler(staticHandler());

        vertx.createHttpServer().requestHandler(router::accept).listen(8080);
    }

    //…
}

----------------------------------------

TITLE: Serverless Framework Configuration
DESCRIPTION: YAML configuration file for Serverless Framework defining AWS Lambda deployment settings, API Gateway integration, and environment configuration.

LANGUAGE: yaml
CODE:
// Code reference: https://gist.github.com/pendula95/33adc47265072ed930c7df98c9ace7be.js
// Note: Original code is embedded via GitHub Gist

----------------------------------------

TITLE: Gremlin Graph Traversal Example
DESCRIPTION: Demonstrates how to traverse a graph database using TinkerPop Gremlin to fetch hero data

LANGUAGE: java
CODE:
public Droid getHero() {
	return traverse((g) -> g.out(HAS_HERO)).nextOrDefaultExplicit(Droid.class, null);
}

----------------------------------------

TITLE: Basic HTML Page Setup
DESCRIPTION: Simple HTML page for testing web server functionality.

LANGUAGE: html
CODE:
<html><body>Hello World</body></html>

----------------------------------------

TITLE: Resolving MX Records in Vert.x
DESCRIPTION: Demonstrates how to resolve MX (Mail Exchanger) records for a domain.

LANGUAGE: Java
CODE:
DnsClient client = vertx.createDnsClient(new InetSocketAddress("10.0.0.1", 53));
client.resolveMX("vertx.io", new AsyncResultHandler<List<MxRecord>>() {
    public void handle(AsyncResult<List<MxRecord>> ar) {
        if (ar.succeeded()) {
            List<MxRecord> records = ar.result();
            for (MxRecord record: records) {
                System.out.println(record);
            }
        } else {
            log.error("Failed to resolve entry", ar.cause());
        }
    }
});

----------------------------------------

TITLE: Running Vertx Application with Cluster Configuration on Azure VM
DESCRIPTION: This command demonstrates how to run a Vertx application on an Azure VM with cluster configuration. It specifies the classpath to include the cluster.xml file, enables clustering, and sets the cluster host to the VM's private IP address.

LANGUAGE: shell
CODE:
cp folder_of_your_cluster_xml_file -cluster -cluster-host VM_PRIVATE_IP

----------------------------------------

TITLE: Resolving A Records in Vert.x
DESCRIPTION: Shows how to resolve all A (IPv4) records for a given domain name.

LANGUAGE: Java
CODE:
DnsClient client = vertx.createDnsClient(new InetSocketAddress("10.0.0.1", 53));
client.resolveA("vertx.io", new AsyncResultHandler<List<Inet4Address>>() {
    public void handle(AsyncResult<List<Inet4Address>> ar) {
        if (ar.succeeded()) {
            List<Inet4Address> records = ar.result();
            for (Inet4Address record: records) {
                System.out.println(record);
            }
        } else {
            log.error("Failed to resolve entry", ar.cause());
        }
    }
});

----------------------------------------

TITLE: GraphQL Query Execution with OrientDB
DESCRIPTION: Shows how to execute a GraphQL query within an OrientDB transaction using Vert.x

LANGUAGE: java
CODE:
demoData.getGraph().asyncTx((tx) -> {
	GraphQL graphQL = newGraphQL(schema).build();
	ExecutionInput input = new ExecutionInput(query, null, queryJson, demoData.getRoot(), extractVariables(queryJson));
	tx.complete(graphQL.execute(input));
}, (AsyncResult<ExecutionResult> rh) -> {
	...
});

----------------------------------------

TITLE: Logging from a Vert.x Verticle
DESCRIPTION: Demonstrates how to obtain a logger and log messages at different levels from within a verticle.

LANGUAGE: Python
CODE:
import vertx

logger = vertx.logger()

logger.info("I am logging something")

----------------------------------------

TITLE: Logging from a Vert.x Verticle
DESCRIPTION: Demonstrates how to obtain a logger and log messages at different levels from within a verticle.

LANGUAGE: Python
CODE:
import vertx

logger = vertx.logger()

logger.info("I am logging something")

----------------------------------------

TITLE: Creating a Simple HTTP Server with Vert.x in JavaScript
DESCRIPTION: This snippet demonstrates how to create a basic HTTP server using Vert.x in JavaScript. It listens on localhost:8080 and responds with 'Hello World!' to all requests.

LANGUAGE: javascript
CODE:
var vertx = require('vertx');

vertx.createHttpServer().requestHandler(function(req) {
  req.response.end("Hello World!");
}).listen(8080, 'localhost');

----------------------------------------

TITLE: Deploying Chime Verticle in Ceylon
DESCRIPTION: Shows how to deploy the Chime verticle in a Ceylon application using Vert.x core functionality

LANGUAGE: Ceylon
CODE:
import io.vertx.ceylon.core {vertx}
import herd.schedule.chime {Chime}
Chime().deploy(vertx.vertx());

----------------------------------------

TITLE: Basic GraphQL Query Example
DESCRIPTION: Demonstrates a simple GraphQL query to fetch a character's name from the Star Wars dataset

LANGUAGE: graphql
CODE:
{
  vader: human(id: 1001) {
    name
  }
}

----------------------------------------

TITLE: Vert.x Module Configuration Example
DESCRIPTION: JSON configuration file example for verticle configuration

LANGUAGE: json
CODE:
{
    "name": "foo",
    "num_widgets": 46
}

----------------------------------------

TITLE: Webroot Path Handler - Java
DESCRIPTION: Handler implementation for processing web root paths and requests

LANGUAGE: java
CODE:
<script src="https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=pathHandler.java"></script>

----------------------------------------

TITLE: Monthly Last Sunday Timer in Ceylon
DESCRIPTION: Example of creating a timer that fires every month on the last Sunday at 16:30

LANGUAGE: Ceylon
CODE:
// listen the timer events
eventBus.consumer (
	"my scheduler:my timer",
	(Throwable|Message<JsonObject?> msg) {
		if (is Message<JsonObject?> msg) { print(msg.body()); }
		else { print(msg); }	
	}
);
// create scheduler and timer
eventBus.send<JsonObject> (
	"chime",
	JsonObject {
		"operation" -> "create",
		"name" -> "my scheduler:my timer",
		"description" -> JsonObject {
			"type" -> "cron",
			"seconds" -> "0",
			"minutes" -> "30",
			"hours" -> "16",
			"days of month" -> "*",
			"months" -> "*",
			"days of week" -> "SundayL"
		}
	}
);

----------------------------------------

TITLE: Deploying Chime Verticle in Java
DESCRIPTION: Demonstrates how to deploy the Chime verticle in a Java application

LANGUAGE: Java
CODE:
vertx.deployVerticle("ceylon:herd.schedule.chime/0.2.1")

----------------------------------------

TITLE: Preparing Cassandra Statement - Java
DESCRIPTION: Method to prepare a parameterized query for selecting articles by RSS link using Vert.x Cassandra client

LANGUAGE: java
CODE:
private Future<Void> prepareSelectArticlesByRssLink() {
    return Util.prepareQueryAndSetReference(client,
            "SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;",
            selectArticlesByRssLink
    );
}

----------------------------------------

TITLE: Starting Gentics Mesh CMS - Bash Command
DESCRIPTION: Command to start the Gentics Mesh CMS server using the JAR file

LANGUAGE: bash
CODE:
java -jar mesh-demo-0.6.xx.jar

----------------------------------------

TITLE: Compiled Groovy Verticle Example
DESCRIPTION: Shows how to create a compiled Groovy class that extends the Verticle base class

LANGUAGE: groovy
CODE:
package examples

import org.vertx.groovy.platform.Verticle
import static org.vertx.groovy.core.streams.Pump.createPump
import org.vertx.groovy.core.Vertx
         
class EchoServer extends Verticle {
    def start() {
        vertx.createNetServer().connectHandler { socket ->
            createPump(socket, socket).start()
        }.listen(1234)
    }

   def stop() {        
   }
}

----------------------------------------

TITLE: Generating Vert.x Project with Parameters
DESCRIPTION: Command to generate a Vert.x project with specified groupId, artifactId, and version parameters.

LANGUAGE: bash
CODE:
mvn archetype:generate -Dfilter=io.vertx: -DgroupId=com.mycompany -DartifactId=my-module -Dversion=0.1

----------------------------------------

TITLE: Checking Out Git Branch for Step 3
DESCRIPTION: Command to switch to the 'step_3' branch in the git repository, which contains the completed implementation for this tutorial step.

LANGUAGE: bash
CODE:
git checkout step_3

----------------------------------------

TITLE: Setting up Git Repository - Bash Commands
DESCRIPTION: Command to clone the example Vert.x with Gentics Mesh project repository

LANGUAGE: bash
CODE:
git clone git@github.com:gentics/mesh-vertx-example.git

----------------------------------------

TITLE: Adding Vert.x MQTT client dependency in Gradle
DESCRIPTION: This Groovy snippet demonstrates how to add the Vert.x MQTT client dependency to a Gradle project's build.gradle file.

LANGUAGE: groovy
CODE:
dependencies {
  compile 'io.vertx:vertx-mqtt:3.5.0.Beta1'
}

----------------------------------------

TITLE: Running Gradle Tests for Vert.x Module
DESCRIPTION: Commands to change directory to the newly cloned project and run Gradle tests using the Gradle wrapper.

LANGUAGE: bash
CODE:
cd my-vertx-module

LANGUAGE: bash
CODE:
./gradlew test

----------------------------------------

TITLE: Initializing MongoDB Client and Data
DESCRIPTION: Java code showing MongoDB client initialization and initial data creation

LANGUAGE: java
CODE:
private void createSomeData(Handler<AsyncResult<Void>> next, Future<Void> fut) {
  Whisky bowmore = new Whisky("Bowmore 15 Years Laimrig", "Scotland, Islay");
  Whisky talisker = new Whisky("Talisker 57° North", "Scotland, Island");
  System.out.println(bowmore.toJson());
  mongo.count(COLLECTION, new JsonObject(), count -> {
    if (count.succeeded()) {
      if (count.result() == 0) {
        mongo.insert(COLLECTION, bowmore.toJson(), ar -> {
          if (ar.failed()) {
            fut.fail(ar.cause());
          } else {
            mongo.insert(COLLECTION, talisker.toJson(), ar2 -> {
              if (ar2.failed()) {
                fut.failed();
              } else {
                next.handle(Future.<Void>succeededFuture());
              }
            });
          }
        });
      } else {
        next.handle(Future.<Void>succeededFuture());
      }
    } else {
      fut.fail(count.cause());
    }
  });
}

----------------------------------------

TITLE: Creating an Embedded HTTP Server in Groovy with Vert.x
DESCRIPTION: This snippet shows how to create a simple embedded HTTP server using Vert.x in Groovy. It creates a new Vert.x instance, sets up an HTTP server with a request handler using Groovy's closure syntax, and listens on port 8080.

LANGUAGE: Groovy
CODE:
def vertx = Vertx.newVertx()
vertx.createHttpServer().requestHandler { req ->
    def file = req.uri == "/" ? "index.html" : req.uri
    req.response.sendFile "webroot/$file"
}.listen(8080)

----------------------------------------

TITLE: Creating Scheduler JSON Request
DESCRIPTION: JSON structure for creating a new scheduler in Chime

LANGUAGE: JSON
CODE:
{
	"operation": "create",
	"name": "scheduler name"
}

----------------------------------------

TITLE: Cloning and Setting Up Project
DESCRIPTION: Git commands to clone the RSS reader repository and checkout the initial branch

LANGUAGE: bash
CODE:
git clone https://github.com/Sammers21/rss-reader
cd rss-reader
git checkout step_1

----------------------------------------

TITLE: Creating GraphQL Handler in Vert.x Web
DESCRIPTION: Java code snippet demonstrating how to create a GraphQL handler for a Vert.x Web route.

LANGUAGE: Java
CODE:
// Setup the GraphQL-Java object
GraphQL graphQL = setupGraphQLJava();
// Use it to handle requests on a Vert.x Web route 
router.route("/graphql").handler(GraphQLHandler.create(graphQL));

----------------------------------------

TITLE: Creating an Embedded HTTP Server in Java with Vert.x
DESCRIPTION: This snippet demonstrates how to create a simple embedded HTTP server using Vert.x in Java. It creates a new Vert.x instance, sets up an HTTP server with a request handler, and listens on port 8080.

LANGUAGE: Java
CODE:
Vertx vertx = Vertx.newVertx();
vertx.createHttpServer().requestHandler(new Handler<HttpServerRequest>() {
    public void handle(HttpServerRequest req) {
        String file = req.path.equals("/") ? "index.html" : req.path;
        req.response.sendFile("webroot/" + file);
    }
}).listen(8080);

----------------------------------------

TITLE: Hello World Console Output with Vert.x
DESCRIPTION: Simple console output example using Vert.x to print 'Hello World'.

LANGUAGE: javascript
CODE:
// Call the console.log function.
console.log("Hello World");

----------------------------------------

TITLE: Creating Custom HTTP Client Command for Vert.x Shell
DESCRIPTION: Implements a basic command structure for the HTTP client with process handler and command registration.

LANGUAGE: javascript
CODE:
var CommandBuilder = require("vertx-shell-js/command_builder");
var CommandRegistry = require("vertx-shell-js/command_registry");

var builder = CommandBuilder.command("http-client");
builder.processHandler(function (process) {

  // Write a message to the console
  process.write("Implement the client\n");

  // End the process
  process.end();
});

// Register the command
var registry = CommandRegistry.getShared(vertx);
registry.registerCommand(builder.build(vertx));

----------------------------------------

TITLE: Checking out Tutorial Branch - Bash
DESCRIPTION: Command to checkout the step_3 branch containing the tutorial code

LANGUAGE: bash
CODE:
git checkout step_3

----------------------------------------

TITLE: Deploying a Verticle Programmatically
DESCRIPTION: Shows how to deploy a Verticle from within another Verticle, including passing configuration.

LANGUAGE: JavaScript
CODE:
var config = { name: 'foo', age: 234 };
vertx.deployVerticle('my_verticle.js', config);

----------------------------------------

TITLE: Deploying a Module Programmatically
DESCRIPTION: This example demonstrates how to deploy a Vert.x module programmatically using the deployModule method.

LANGUAGE: Java
CODE:
container.deployModule("vertx.mailer-v1.0", config);

----------------------------------------

TITLE: Initializing OAuth2Auth with Keycloak in Vertx 3
DESCRIPTION: Creates an OAuth2Auth instance using Keycloak configuration. This is the first step in securing a Vertx application with Keycloak authentication.

LANGUAGE: java
CODE:
OAuth2Auth.createKeycloak(...)

----------------------------------------

TITLE: Creating a Simple TCP Echo Server Verticle in Ruby
DESCRIPTION: Demonstrates how to create a basic TCP echo server as a Vert.x verticle in Ruby. The server listens on port 1234 and echoes back any received data.

LANGUAGE: ruby
CODE:
require "vertx"
include Vertx

@server = NetServer.new.connect_handler { |socket|
  Pump.new(socket, socket).start
}.listen(1234, 'localhost')

def vertx_stop
  @server.close
end

----------------------------------------

TITLE: Configuring Vert.x Web Server and MongoDB in Groovy
DESCRIPTION: Basic configuration script to start the Vert.x web server and MongoDB persistor modules with bridge configuration for event bus communication.

LANGUAGE: groovy
CODE:
def webServerConf = [
  port: 8080,
  host: 'localhost',
  bridge: true,

  inbound_permitted: [
    [
      address : 'vertx.mongopersistor',
      match : [
        action : 'find',
        collection : 'albums'
      ]
    ]
  ],
  outbound_permitted: [ [:] ]
]

container.with {
  deployModule('vertx.mongo-persistor-v1.2')
  deployModule('vertx.web-server-v1.0', webServerConf)
}

----------------------------------------

TITLE: Deploying a Verticle Programmatically
DESCRIPTION: This snippet shows how to deploy a verticle programmatically from within another verticle. It uses the deployVerticle method on the container object.

LANGUAGE: Java
CODE:
container.deployVerticle(main);

----------------------------------------

TITLE: Initializing Gradle Wrapper
DESCRIPTION: Command to initialize Gradle wrapper for project build automation

LANGUAGE: bash
CODE:
$GRADLE_HOME/bin/gradle wrapper

----------------------------------------

TITLE: Creating Project Directory Structure
DESCRIPTION: Commands to create the basic project directory structure for source code and resources

LANGUAGE: bash
CODE:
cd vertx-net-client
mkdir -p src/main/kotlin
mkdir -p src/main/resources

----------------------------------------

TITLE: Accessing Configuration in a Vert.x Verticle
DESCRIPTION: Shows how to access configuration passed to a verticle using the Vertx.config method. This example prints the number of 'wibbles' from the configuration.

LANGUAGE: ruby
CODE:
config = Vertx.config

# Do something with config

puts "number of wibbles is #{config["wibble_number"]}"

----------------------------------------

TITLE: Preparing Cassandra Queries in Vert.x
DESCRIPTION: Java method to prepare the necessary CQL queries for the RSS reader application using the Vert.x-Cassandra client.

LANGUAGE: java
CODE:
private Future<Void> prepareNecessaryQueries() {
        Future<PreparedStatement> selectChannelInfoPrepFuture = Future.future();
        client.prepare("SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;", selectChannelInfoPrepFuture);

        Future<PreparedStatement> selectRssLinkByLoginPrepFuture = Future.future();
        client.prepare("SELECT rss_link FROM rss_by_user WHERE login = ? ;", selectRssLinkByLoginPrepFuture);

        Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();
        client.prepare("INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);", insertNewLinkForUserPrepFuture);

        return CompositeFuture.all(
                selectChannelInfoPrepFuture.compose(preparedStatement -> {
                    selectChannelInfo = preparedStatement;
                    return Future.succeededFuture();
                }),
                selectRssLinkByLoginPrepFuture.compose(preparedStatement -> {
                    selectRssLinksByLogin = preparedStatement;
                    return Future.succeededFuture();
                }),
                insertNewLinkForUserPrepFuture.compose(preparedStatement -> {
                    insertNewLinkForUser = preparedStatement;
                    return Future.succeededFuture();
                })
        ).mapEmpty();
    }

----------------------------------------

TITLE: Logging from a Verticle
DESCRIPTION: This example demonstrates how to use the logger in a verticle. Each verticle is given its own logger, which can be accessed through the container object.

LANGUAGE: Java
CODE:
Logger logger = container.getLogger();

logger.info("I am logging something");

----------------------------------------

TITLE: Configuring Vertx Gradle Build
DESCRIPTION: Gradle build configuration for Vert.x project, including dependencies and plugin configuration

LANGUAGE: gradle
CODE:
vertx {
    mainVerticle = "info.usmans.blog.vertx.NetClientVerticle"
}

----------------------------------------

TITLE: Transaction Management with Vert.x 3.6 Transformers
DESCRIPTION: Example showing the simplified transaction management in Vert.x 3.6 using Observable transformers.

LANGUAGE: java
CODE:
dbClient.rxGetConnection().flatMap(sqlConnection -> {
  return sqlConnection.rxExecute("INSERT INTO albums (name) VALUES ('The Israelites')")
    .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')"))
    .andThen(sqlConnection.rxExecute("INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')"))
    .andThen(sqlConnection.rxQuery("SELECT name FROM tracks WHERE album = 'The Israelites'").map(ResultSet::getResults))
    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))
    .doFinally(sqlConnection::close);
}).map(rows -> {
}).subscribe(json -> {
}, t -> {
});

----------------------------------------

TITLE: Checking Out Git Branch for Step 2
DESCRIPTION: Command to switch to the 'step_2' branch in the git repository for this tutorial.

LANGUAGE: bash
CODE:
git checkout step_2

----------------------------------------

TITLE: Accessing Configuration in a Verticle
DESCRIPTION: This snippet shows how to access JSON configuration passed to a verticle. The configuration can be retrieved using the getConfig method on the container object.

LANGUAGE: Java
CODE:
JsonObject config = container.getConfig();

System.out.println("Config is " + config);

----------------------------------------

TITLE: MongoDB GridFS File Upload Implementation
DESCRIPTION: Shows how to use MongoDB GridFS client for file upload operations with Future-based response handling.

LANGUAGE: java
CODE:
Future<String> fut = gridFsClient.uploadFile("file.name");

fut.setHandler(res -> {
   if (res.succeeded()) {
     String id = res.result();
     //The ID of the stored object in Grid FS
   } else {
     res.cause().printStackTrace();
   }
 });

----------------------------------------

TITLE: WebPack Package Configuration for Vert.x
DESCRIPTION: NPM package configuration for integrating WebPack with Vert.x, including dependencies and project metadata.

LANGUAGE: javascript
CODE:
{
  "name": "webpack-sample",
  "version": "0.0.1",
  "description": "A sample with Vert.x, Gradle and Webpack",
  "main": "src/main/webapp/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^2.7.0"
  },
  "dependencies": {
    "axios": "^0.16.2"
  }
}

----------------------------------------

TITLE: Simple TCP Echo Server Verticle
DESCRIPTION: Basic TCP echo server implemented as a Verticle that accepts connections and echoes data back on each connection

LANGUAGE: javascript
CODE:
var vertx = require('vertx');

vertx.createNetServer().connectHandler(function(sock) {
    new vertx.Pump(sock, sock).start();
}).listen(1234);

----------------------------------------

TITLE: Handlebars Template Example
DESCRIPTION: Example of a Handlebars template showing field resolution and data access

LANGUAGE: handlebars
CODE:
<script src="https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=template.example"></script>

----------------------------------------

TITLE: Handling DNS Errors in Vert.x
DESCRIPTION: Shows how to handle DNS errors and access the DNS response code.

LANGUAGE: Java
CODE:
DnsClient client = vertx.createDnsClient(new InetSocketAddress("10.0.0.1", 53));
client.lookup("nonexisting.vert.xio", new AsyncResultHandler<InetAddress>() {
    public void handle(AsyncResult<InetAddress> ar) {
        if (ar.succeeded()) {
            InetAddress record = ar.result();
            System.out.println(record);
        } else {
            Throwable cause = ar.cause();
            if (cause instanceof DnsException) {
                DnsException exception = (DnsException) cause;
                DnsResponseCode code = exception.code();
                // Handle specific DNS error codes
            } else {
                log.error("Failed to resolve entry", ar.cause());
            }
        }
    }
});

----------------------------------------

TITLE: Kotlin Integration with Vert.x Gradle Plugin
DESCRIPTION: Configuration for using the Vert.x Gradle plugin with Kotlin, including proper JVM target settings and Kotlin-specific dependencies.

LANGUAGE: groovy
CODE:
plugins {
  id 'io.vertx.vertx-plugin' version 'x.y.z'
  id 'org.jetbrains.kotlin.jvm' version 'a.b.c'
}

repositories {
  jcenter()
}

dependencies {
  compile 'io.vertx:vertx-lang-kotlin'
  compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8'
}

vertx {
  mainVerticle = "sample.MainVerticle"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

----------------------------------------

TITLE: Using Vert.x Scala in SBT Console
DESCRIPTION: Commands to start an SBT console, deploy a Vert.x verticle, and interact with the Vert.x instance.

LANGUAGE: scala
CODE:
sbt
> console
scala> vertx.deployVerticle(nameForVerticle[HttpVerticle])
scala> vertx.deploymentIDs

----------------------------------------

TITLE: Requesting Album Data from MongoDB in JavaScript
DESCRIPTION: Sends a request to the MongoDB persistor via the EventBus to retrieve album data and render it using Knockout.js.

LANGUAGE: JavaScript
CODE:
eb.onopen = function() {
  eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },
    function(reply) {
      if (reply.status === 'ok') {
        var albumArray = [];
        for (var i = 0; i < reply.results.length; i++) {
          albumArray[i] = new Album(reply.results[i]);
        }
        that.albums = ko.observableArray(albumArray);
        ko.applyBindings(that);
      } else {
        console.error('Failed to retrieve albums: ' + reply.message);
      }
    });
};

----------------------------------------

TITLE: Creating a DNS Client in Vert.x
DESCRIPTION: Shows how to create a DnsClient instance using the Vertx object and specifying DNS servers.

LANGUAGE: Java
CODE:
DnsClient client = vertx.createDnsClient(new InetSocketAddress("10.0.0.1", 53), new InetSocketAddress("10.0.0.2", 53));

----------------------------------------

TITLE: Extending HttpServer with Future Methods using Value Classes in Scala
DESCRIPTION: This snippet demonstrates how to use value classes to extend the HttpServer class with additional methods that return Scala Futures. It shows the implementation of a package object that adds the 'listenFuture' method to HttpServer instances.

LANGUAGE: scala
CODE:
package io.vertx.scala
package object core{
   implicit class HttpServerScala(val asJava: io.vertx.core.http.HttpServer) extends AnyVal {
      def listenFuture(port: java.lang.Integer): scala.concurrent.Future[io.vertx.core.http.HttpServer] = {..}
      ..
}

----------------------------------------

TITLE: REST API Implementation with JDBC in Vert.x
DESCRIPTION: Implements a REST endpoint to retrieve all records from the database using asynchronous JDBC operations.

LANGUAGE: java
CODE:
private void getAll(RoutingContext routingContext) {
    jdbc.getConnection(ar -> {
      SQLConnection connection = ar.result();
      connection.query("SELECT * FROM Whisky", result -> {
        List<Whisky> whiskies = result.result().getRows().stream().map(Whisky::new).collect(Collectors.toList());
        routingContext.response()
            .putHeader("content-type", "application/json; charset=utf-8")
            .end(Json.encodePrettily(whiskies));
        connection.close(); // Close the connection		
      });
    });
  }

----------------------------------------

TITLE: Implementing Future-based API in Vert.x 4 NetClient
DESCRIPTION: Demonstrates the evolution of the NetClient interface from callback-based to a hybrid model supporting both callbacks and futures in Vert.x 4. Shows both the original 3.0 callback method and the new 4.0 Future-based method for connection handling.

LANGUAGE: java
CODE:
public interface NetClient {

  // Since 3.0
  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);

  // New in 4.0
  Future<NetSocket> connect(int port, String host);
}

----------------------------------------

TITLE: Submitting Order to MongoDB in JavaScript
DESCRIPTION: Constructs an order object and sends it to the MongoDB persistor for storage, including the session ID for authentication.

LANGUAGE: JavaScript
CODE:
that.submitOrder = function() {
  if (!orderReady()) {
    return;
  }

  var orderItems = ko.toJS(that.items);
  var orderMsg = {
    sessionID: that.sessionID(),
    action: "save",
    collection: "orders",
    document: {
      username: that.username(),
      items: orderItems
    }
  }

  eb.send('vertx.mongopersistor', orderMsg, function(reply) {
    if (reply.status === 'ok') {
      that.orderSubmitted(true);
    } else {
      console.error('Failed to accept order');
    }
  });
};

----------------------------------------

TITLE: Basic Scala TCP Echo Server Verticle
DESCRIPTION: Simple TCP echo server implemented as a Scala verticle that accepts connections and echoes data back

LANGUAGE: scala
CODE:
import org.vertx.scala.core.net.NetSocket
import org.vertx.scala.core.streams.Pump

vertx.createNetServer().connectHandler({ socket: NetSocket =>
  Pump.createPump(socket, socket).start
}).listen(1234)

----------------------------------------

TITLE: Maven Dependencies for Vert.x JDBC
DESCRIPTION: Required Maven dependencies for including vertx-jdbc-client and HSQLDB driver in the project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-jdbc-client</artifactId>
  <version>3.1.0</version>
</dependency>
<dependency>
  <groupId>org.hsqldb</groupId>
  <artifactId>hsqldb</artifactId>
  <version>2.3.3</version>
</dependency>

----------------------------------------

TITLE: Creating Admonitions in Vert.x Blog Posts
DESCRIPTION: Examples of how to create different types of admonitions (NOTE, WARNING, INFO, IMPORTANT) in blog posts with both titled and untitled formats.

LANGUAGE: markdown
CODE:
[NOTE this is my title | this is the content of the note, it can be pretty long, and contain **important** messages. In can be very very long.... Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.]

[WARNING Warning Warning | You need to
be careful about **this** (yes it can be multi-line)]

[INFO Info | Did you check the [news](http://lemonde.fr)?]

[IMPORTANT Something very important | don't forget to subscription to the google group.]

----------------------------------------

TITLE: Creating Blog Post Metadata in Markdown
DESCRIPTION: Example of required metadata header for a Vert.x blog post, showing the proper format for title, template, date, and author fields.

LANGUAGE: markdown
CODE:
---
title: My first blog post
template: post.html
date: 2078-06-28
author: cescoffier
---

An introduction paragraph that will be use as _except_ in the RSS feed.

## Hello
...

----------------------------------------

TITLE: ES6/7 Features Demo in TypeScript Verticle
DESCRIPTION: A comprehensive example showing various ES6 and ES7 features including arrow functions, block-scoped variables, default parameters, rest parameters, spread operator, for...of loops, template strings, classes, and the exponentiation operator.

LANGUAGE: typescript
CODE:
// Create an HTTP server
vertx.createHttpServer().requestHandler((req) => { // [1]
  // Create response
  let response = ``; // [2]
  
  // Test default parameters
  function greet(name = "World") { // [3]
    return `Hello ${name}!`;
  }
  response += greet() + "\n";
  response += greet("Alice") + "\n";
  
  // Test rest parameters and spread
  function sum(...numbers: number[]) { // [4]
    let r = 0;
    for (let n of numbers) { // [6]
      r += n;
    }
    return r;
  }
  response += sum(1, 2, 3) + "\n";
  let a = [1, 2, 3];
  response += sum(...a) + "\n"; // [5]
  
  // Test template strings
  let world = "World";
  response += `Hello ${world}!\nThis is a\nmulti-line string.`; // [7]
  
  // Test classes
  class Animal { // [8]
    constructor(public greeting: string) {}
    sayHello() {
      return this.greeting;
    }
  }
  
  class Cat extends Animal {
    purr() {
      return "Purr!";
    }
  }
  
  let cat = new Cat("Meow!");
  response += "\n" + cat.sayHello() + " " + cat.purr();
  
  // Test exponentiation operator
  response += "\n" + (2 ** 8); // [9]
  
  // Send response
  req.response()
    .putHeader("Content-Type", "text/plain")
    .end(response);
}).listen(8080);

----------------------------------------

TITLE: Adding Vert.x Unit Dependency in Maven
DESCRIPTION: XML snippet for adding the Vert.x Unit dependency to a Maven project's pom.xml file. This dependency is required for using Vert.x Unit in tests.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-unit</artifactId>
  <version>3.2.0</version>
  <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Implementing POST Endpoint for Adding Whisky
DESCRIPTION: Creates a POST endpoint to add a new whisky product, parsing JSON from the request body.

LANGUAGE: java
CODE:
router.route("/api/whiskies*").handler(BodyHandler.create());
router.post("/api/whiskies").handler(this::addOne);

private void addOne(RoutingContext routingContext) {
  final Whisky whisky = Json.decodeValue(routingContext.getBodyAsString(),
      Whisky.class);
  products.put(whisky.getId(), whisky);
  routingContext.response()
      .setStatusCode(201)
      .putHeader("content-type", "application/json; charset=utf-8")
      .end(Json.encodePrettily(whisky));
}

----------------------------------------

TITLE: Connecting to AMQP Broker with Vert.x AMQP Client
DESCRIPTION: Java code snippet showing how to connect to an AMQP broker using the new Vert.x AMQP client.

LANGUAGE: Java
CODE:
AmqpClientOptions options = new AmqpClientOptions()
      .setHost("localhost")
      .setPort(5672)
      .setUsername("user")
      .setPassword("secret");
    
AmqpClient client = AmqpClient.create(vertx, options);

client.connect(ar -> {
  if (ar.failed()) {
    System.out.println("Unable to connect to the broker");
  } else {
    System.out.println("Connection succeeded");
    AmqpConnection connection = ar.result();

    // You can create receivers and senders
    connection.createReceiver("my-queue",
      msg -> {
        // called on every received messages
        System.out.println("Received " + msg.bodyAsString());
      },
      done -> {
        if (done.failed()) {
          System.out.println("Unable to create receiver");
        } else {
          AmqpReceiver receiver = done.result();
        }
      }
    );

    connection.createSender("my-queue", done -> {
      if (done.failed()) {
        System.out.println("Unable to create a sender");
      } else {
        AmqpSender sender = done.result();
        sender.send(AmqpMessage.create().withBody("hello").build());
      }
    });

  }
});

----------------------------------------

TITLE: Generated MANIFEST.MF Contents
DESCRIPTION: Example of the generated MANIFEST.MF file showing main class and verticle configuration.

LANGUAGE: text
CODE:
Main-Class                               io.vertx.core.Launcher
Main-Verticle                            io.fabric8.blog.MainVerticle
Manifest-Version                         1.0

----------------------------------------

TITLE: ES6 HTTP Server Implementation with Vert.x
DESCRIPTION: Example of a Vert.x HTTP server using ES6 features like arrow functions and let declarations. Creates a simple router that responds with 'Hello ES6 World!'

LANGUAGE: javascript
CODE:
var Router = require("vertx-web-js/router");
var server = vertx.createHttpServer();

var router = Router.router(vertx);

router.get("/").handler((ctx) => {

    let response = ctx.response();
    response.putHeader("content-type", "text/plain");

    response.end("Hello ES6 World!");
});

server.requestHandler(router.accept).listen(8080);

----------------------------------------

TITLE: Implementing a Simple Time Service in Python
DESCRIPTION: Creates a Vert.x server-side service that listens on the event bus and responds with the current time.

LANGUAGE: Python
CODE:
import time
import vertx
from core.event_bus import EventBus

def handler(message):
	message.reply({'current_time' : time.time()*1000})        
EventBus.register_handler("acme.timeService", handler)

----------------------------------------

TITLE: Disabling Bootstrap Data Attribute API
DESCRIPTION: Examples showing how to disable the data attribute API globally or for specific plugins using jQuery event unbinding.

LANGUAGE: javascript
CODE:
$('body').off('.data-api')

LANGUAGE: javascript
CODE:
$('body').off('.alert.data-api')

----------------------------------------

TITLE: Using Vert.x Web Client for HTTP Operations
DESCRIPTION: Demonstrates how to use the new Web Client to make HTTP requests with JSON encoding/decoding and response handling.

LANGUAGE: java
CODE:
WebClient client = WebClient.
client
  .get(8080, "myserver.mycompany.com", "/some-uri")
  .as(BodyCodec.json(User.class))
  .send(ar -> {
    if (ar.succeeded()) {

      HttpResponse<User> response = ar.result();
      User user = response.body();

      System.out.println("Received response with status code" + response.statusCode() + " with body " +
        user.getFirstName() + " " + user.getLastName());
    } else {
      System.out.println("Something went wrong " + ar.cause().getMessage());
    }
  });

----------------------------------------

TITLE: Setting Deployment Options for Vert.x Testing
DESCRIPTION: This code demonstrates how to set deployment options with a custom configuration for testing a Vert.x application. It creates a JsonObject with the HTTP port and passes it to the DeploymentOptions.

LANGUAGE: java
CODE:
port = 8081;
DeploymentOptions options = new DeploymentOptions()
    .setConfig(new JsonObject().put("http.port", port)
);
vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());

----------------------------------------

TITLE: Running Vert.x Application with External Configuration
DESCRIPTION: This bash command demonstrates how to run a Vert.x application JAR file while specifying an external configuration file using the -conf parameter.

LANGUAGE: bash
CODE:
java -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json

----------------------------------------

TITLE: Creating HTML Structure for Collaborative Drawing App
DESCRIPTION: Defines the HTML structure for the drawing application, including a canvas element and necessary JavaScript imports for jQuery, SockJS, and Vert.x event bus.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>Real time drawing App</title>
  <!--[if lt IE 9]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
</head>

<body>
<canvas id="paper" width="1900" height="1000">
  Your browser needs to support canvas for this to work!
</canvas>

<!-- JavaScript includes. -->
<script src="http://code.jquery.com/jquery-1.8.0.min.js"></script>
<script src="//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"></script>
<script src='assets/js/vertxbus.js'></script>
<script src="assets/js/script.js"></script>

</body>
</html>

----------------------------------------

TITLE: Basic Java Main Method Implementation
DESCRIPTION: A simple Java main method that prints 'Hello' to the console. Demonstrates basic Java program structure.

LANGUAGE: java
CODE:
public void main(String[] args) {
  System.out.println("Hello");
}

----------------------------------------

TITLE: Configuring Netty Reflection for GraalVM in JSON
DESCRIPTION: This JSON configuration specifies reflection rules for Netty classes, allowing GraalVM to properly instantiate NioSocketChannel and NioServerSocketChannel classes.

LANGUAGE: json
CODE:
[
  {
    "name" : "io.netty.channel.socket.nio.NioSocketChannel",
    "methods" : [
      { "name" : "<init>", "parameterTypes" : [] }
    ]
  },
  {
    "name" : "io.netty.channel.socket.nio.NioServerSocketChannel",
    "methods" : [
      { "name" : "<init>", "parameterTypes" : [] }
    ]
  }
]

----------------------------------------

TITLE: Installing Dependencies and Running Vert.x Application
DESCRIPTION: Commands to install the project dependencies using NPM and start the Vert.x application.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Transaction Service Interface Definition
DESCRIPTION: Java interface definition for TransactionsManagerService using WebApiServiceGen annotation

LANGUAGE: java
CODE:
@WebApiServiceGen
public interface TransactionsManagerService {
  void getTransactionsList(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);
  void addTransaction(Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);
  void updateTransaction(String transactionId, Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);
  void removeTransaction(String transactionId, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);

  // Factory method to instantiate the implementation
  static TransactionsManagerService create(Vertx vertx) {
    return new TransactionsManagerServiceImpl(vertx);
  }
}

----------------------------------------

TITLE: Accessing Vert.x Configuration in a Verticle
DESCRIPTION: This snippet demonstrates how to access JSON configuration passed to a verticle during deployment.

LANGUAGE: python
CODE:
import vertx

config = vertx.config()

# Do something with config

print "number of wibbles is %s" % str(config.wibble_number)

----------------------------------------

TITLE: Patching Vert.x Transport Class for GraalVM Compatibility
DESCRIPTION: This snippet shows a modification to the Transport class in Vert.x to prevent loading of EPoll and KQueue native support, which is necessary for GraalVM native image generation.

LANGUAGE: java
CODE:
public class Transport {
…
  /**
   * The native transport, it may be {@code null} or failed.
   */
  public static Transport nativeTransport() {
    // Patched: I remove the native transport discovery. 
    // The imports would be picked up by substrate 
    // and cause further issues. 
    return null;
  }
…
}

----------------------------------------

TITLE: Vert.x Application Configuration JSON
DESCRIPTION: Example configuration JSON file structure for a Vert.x application, showing how to organize configuration for multiple verticles in a single config file.

LANGUAGE: json
CODE:
// Application config
{
    verticle1Config: {
        // Config for verticle1
    },
    verticle2Config: {
        // Config for verticle2
    }, 
    verticle3Config: {
        // Config for verticle3
    },
    verticle4Config: {
        // Config for verticle4
    },
    verticle5Config: {
        // Config for verticle5
    }  
}

----------------------------------------

TITLE: GraphQL Query Response Example
DESCRIPTION: Shows the JSON response format for the GraphQL query

LANGUAGE: json
CODE:
{
  "data": {
    "vader": {
      "name": "Darth Vader"
    }
  }
}

----------------------------------------

TITLE: Monday/Friday Timer in Java
DESCRIPTION: Example of creating a union timer that fires every Monday at 8:30 and Friday at 17:30

LANGUAGE: Java
CODE:
// listen the timer events
MessageConsumer<JsonObject> consumer = eventBus.consumer("my scheduler:my timer");
consumer.handler (
	message -> {
		System.out.println(message.body());
  	}
);
// description of timers
JsonObject mondayTimer = (new JsonObject()).put("type", "cron")
	.put("seconds", "0").put("minutes", "30").put("hours", "8")
	.put("days of month", "*").put("months", "*")
	.put("days of week", "Monday");
JsonObject fridayTimer = (new JsonObject()).put("type", "cron")
	.put("seconds", "0").put("minutes", "30").put("hours", "17")
	.put("days of month", "*").put("months", "*")
	.put("days of week", "Friday");
// union timer - combines mondayTimer and fridayTimer
JsonArray combination = (new JsonArray()).add(mondayTimer)
	.add(fridayTimer);
JsonObject timer = (new JsonObject()).put("type", "union")
	.put("timers", combination);
// create scheduler and timer
eventBus.send (
	"chime",
	(new JsonObject()).put("operation", "create")
		.put("name", "my scheduler:my timer")
		.put("description", timer)
);

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice
DESCRIPTION: Standard boilerplate notice text to be included when applying the Apache License 2.0 to a work. Contains copyright notice and license reference text.

LANGUAGE: text
CODE:
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------

TITLE: Adding Vert.x Web GraphQL Dependency in Maven
DESCRIPTION: XML snippet showing how to add the Vert.x Web GraphQL dependency to a Maven POM file.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-web-graphql</artifactId>
  <version>3.7.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Serverless Framework for AWS Lambda
DESCRIPTION: Serverless framework configuration file defining the service, provider settings, and function endpoints for a User Microservice deployed to AWS Lambda.

LANGUAGE: yaml
CODE:
service: users-service

provider:
  name: aws
  runtime: java8
  memorySize: 1024
  timeout: 300
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

package:
  artifact: build/distributions/users-service.zip

functions:
  users:
    handler: com.example.Handler
    events:
      - http:
          path: users
          method: get
      - http:
          path: users
          method: post
      - http:
          path: users/{id}
          method: get
      - http:
          path: users/{id}
          method: put
      - http:
          path: users/{id}
          method: delete

----------------------------------------

TITLE: Gitignore Configuration for ES6 Vert.x Project
DESCRIPTION: Git ignore configuration to exclude generated code and dependencies from version control.

LANGUAGE: text
CODE:
/lib
/node_modules

----------------------------------------

TITLE: Building and Installing Vert.x Module
DESCRIPTION: Maven command to build, test and install the module in local Maven repository.

LANGUAGE: bash
CODE:
mvn install

----------------------------------------

TITLE: Executing Packaged Vert.x Application
DESCRIPTION: Command to run the packaged Vert.x application jar file.

LANGUAGE: bash
CODE:
java -jar ${project.build.directory}/${project.finalName}.jar

----------------------------------------

TITLE: Setting up Cassandra with CCM
DESCRIPTION: Commands to create and start a single-node Cassandra cluster using CCM (Cassandra Cluster Manager)

LANGUAGE: bash
CODE:
ccm create rss_reader -v 3.11.2 -n 1 -s
ccm start

----------------------------------------

TITLE: Marvel API Error Response Format
DESCRIPTION: Example JSON structure for error responses from the Marvel API.

LANGUAGE: json
CODE:
{
  "code": "InvalidCredentials",
  "message": "The passed API key is invalid."
}

----------------------------------------

TITLE: Maven Dependencies for Vert.x Micrometer Integration
DESCRIPTION: Base Maven configuration for integrating Vert.x with Micrometer metrics.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-micrometer-metrics</artifactId>
  <version>3.5.1</version>
</dependency>

----------------------------------------

TITLE: Scala Verticle Class Implementation
DESCRIPTION: Sample verticle implemented as a Scala class extending Verticle base class with start and stop lifecycle methods

LANGUAGE: scala
CODE:
import org.vertx.scala.core.net.NetSocket
import org.vertx.scala.core.streams.Pump
import org.vertx.scala.platform.Verticle

class Server extends Verticle {

  override def start() {
    vertx.createNetServer().connectHandler({ socket: NetSocket =>
        Pump.createPump(socket, socket).start
    }).listen(1234)
  }
}

----------------------------------------

TITLE: HTTP Server with Request Handler
DESCRIPTION: Example of creating an HTTP server and handling incoming HTTP requests

LANGUAGE: javascript
CODE:
var server = vertx.createHttpServer();

server.requestHandler(function(request) {
    var str = '';
    request.headers().forEach(function(key, value) {
        str = str.concat(key, ': ', value, '\n');
    });
    request.response.end(str);
}).listen(8080, 'localhost');

----------------------------------------

TITLE: Manual HTTP Response Validation in Vert.x
DESCRIPTION: Demonstrates traditional manual validation of HTTP response status code and content type before processing JSON response body.

LANGUAGE: java
CODE:
client
  .get(8080, "myserver.mycompany.com", "/some-uri")
  .send(ar -> {
    if (ar.succeeded()) {
      HttpResponse<Buffer> response = ar.result();
      if (response.statusCode() == 200 && response.getHeader("content-type").equals("application/json")) {
        // Decode the body as a json object
        JsonObject body = response.bodyAsJsonObject();
      } else {
        System.out.println("Something went wrong " + response.statusCode());
      }
    } else {
      System.out.println("Something went wrong " + ar.cause().getMessage());
    }
  });

----------------------------------------

TITLE: Defining Module Descriptor in JSON
DESCRIPTION: Shows the structure of a mod.json file, which is required for each Vert.x module. It specifies the main verticle to start the module.

LANGUAGE: json
CODE:
{
    "main": "mailer.js"
}

----------------------------------------

TITLE: Checking Vert.x Version in Terminal
DESCRIPTION: Command to verify successful Vert.x installation by checking the installed version.

LANGUAGE: bash
CODE:
vertx version

----------------------------------------

TITLE: Deploying a Verticle Programmatically
DESCRIPTION: Shows how to deploy another verticle from within a verticle, including passing configuration.

LANGUAGE: Python
CODE:
config = { 'name': 'foo', 'age': 234 }
vertx.deploy_verticle('my_verticle.py', config)

----------------------------------------

TITLE: Configuring Backpressure for RabbitMQ Consumer in Java with Eclipse Vert.x
DESCRIPTION: This snippet shows how to configure backpressure for a RabbitMQ consumer using the new API in Eclipse Vert.x 3.6.0. It demonstrates setting a maximum internal queue size to limit the number of messages stored before processing.

LANGUAGE: java
CODE:
// Limit to max 300 messages
QueueOptions options = new QueueOptions()
  .setMaxInternalQueueSize(300);

RabbitMQClient client = RabbitMQClient.create(vertx, new RabbitMQOptions());

client.basicConsumer("my.queue", options, res -> {
  if (res.succeeded()) {
    System.out.println("RabbitMQ consumer created !");
    RabbitMQConsumer mqConsumer = res.result();
    mqConsumer.handler((RabbitMQMessage message) -> {
      System.out.println("Got message: " + message.body().toString());
    });
  } else {
    res.cause().printStackTrace();
  }
});

----------------------------------------

TITLE: Creating Untitled Admonitions in Vert.x Blog Posts
DESCRIPTION: Example of creating an admonition without a title using simplified syntax.

LANGUAGE: markdown
CODE:
[IMPORTANT Wow, this is an untitled important message.]

----------------------------------------

TITLE: Creating a Simple TCP Echo Server Verticle in JavaScript
DESCRIPTION: This example demonstrates how to create a basic TCP echo server as a Verticle. It listens on port 1234 and echoes back any data received.

LANGUAGE: JavaScript
CODE:
load('vertx.js')

var server = vertx.createNetServer();

server.connectHandler(function(sock) {
  new vertx.Pump(sock, sock).start();
}).listen(1234, 'localhost');

function vertxStop() {
  server.close();
}

----------------------------------------

TITLE: Implementing Lambda Handler with Vert.x Event Bus
DESCRIPTION: Java/Groovy implementation of AWS Lambda handler using Vert.x Event Bus for dynamic routing. The code initializes Vert.x, sets up event handlers for different HTTP methods, and processes requests asynchronously.

LANGUAGE: groovy
CODE:
@Slf4j
class Handler implements RequestHandler<Map<String, Object>, ApiGatewayResponse> {

  private static Vertx vertx
  private static EventBus eb

  static {
    vertx = Vertx.vertx()
    eb = vertx.eventBus()
    registerHandlers()
  }

  @Override
  ApiGatewayResponse handleRequest(Map<String, Object> input, Context context) {
    log.info("received: $input")
    def method = input.httpMethod?.toLowerCase()
    def resource = input.resource?.toLowerCase()
    def address = "$method:$resource"

    def response = new JsonObject()
    eb.send(address, input) { reply ->
      if (reply.succeeded()) {
        response.mergeIn(reply.result().body())
      }
    }
    return ApiGatewayResponse.builder()
      .setStatusCode(200)
      .setObjectBody(response)
      .build()
  }

  private static void registerHandlers() {
    eb.consumer("get:/users") { message ->
      message.reply(new JsonObject().put("message", "GET /users"))
    }

    eb.consumer("post:/users") { message ->
      message.reply(new JsonObject().put("message", "POST /users"))
    }

    eb.consumer("get:/users/{id}") { message ->
      message.reply(new JsonObject().put("message", "GET /users/{id}"))
    }

    eb.consumer("put:/users/{id}") { message ->
      message.reply(new JsonObject().put("message", "PUT /users/{id}"))
    }

    eb.consumer("delete:/users/{id}") { message ->
      message.reply(new JsonObject().put("message", "DELETE /users/{id}"))
    }
  }
}

----------------------------------------

TITLE: Running TypeScript Verticle with Vert.x
DESCRIPTION: Command to execute a TypeScript verticle using Vert.x runtime

LANGUAGE: bash
CODE:
vertx run es7verticle.ts

----------------------------------------

TITLE: Configuring HTTP Router in Vert.x
DESCRIPTION: Sets up HTTP routing for REST API endpoints including GET, POST and PUT operations for score management.

LANGUAGE: java
CODE:
router = Router.router(vertx);  
router.route("/api/v1.0/*").handler(BodyHandler.create());  
router.get("/api/v1.0/scores").handler(this::getScores);  
router.post("/api/v1.0/scores").handler(this::addGame);  
router.put("/api/v1.0/scores").handler(this::setScore);  

----------------------------------------

TITLE: Route Handler Implementation - Java
DESCRIPTION: Implementation of route handling logic for different content types

LANGUAGE: java
CODE:
<script src="https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=routeHandler.java"></script>

----------------------------------------

TITLE: Generating Vert.x Server Stub with Swagger-Codegen
DESCRIPTION: A bash command to generate a Vert.x server stub using the Swagger-Codegen CLI with the vertx-swagger-codegen plugin.

LANGUAGE: bash
CODE:
java -cp /path/to/swagger-codegen-cli-2.2.2.jar:/path/to/vertx-swagger-codegen-1.0.0.jar io.swagger.codegen.SwaggerCodegen generate \
  -l java-vertx \
  -o path/to/destination/folder \
  -i path/to/swagger/definition \
  --group-id your.group.id \
  --artifact-id your.artifact.id

----------------------------------------

TITLE: Implementing Auth Handler Chaining in Vert.x Web
DESCRIPTION: Shows how to set up multiple authentication handlers in a chain for Vert.x Web applications. This allows supporting multiple authN/authZ mechanisms in a single application.

LANGUAGE: java
CODE:
ChainAuthHandler chain = ChainAuthHandler.create();

// add http basic auth handler to the chain
chain.append(BasicAuthHandler.create(provider));

// add form redirect auth handler to the chain
chain.append(RedirectAuthHandler.create(provider));

// secure your route
router.route("/secure/resource").handler(chain);

// your app
router.route("/secure/resource").handler(ctx -> {
  // do something...
});

----------------------------------------

TITLE: Implementing a Simple Vert.x Verticle
DESCRIPTION: Java code for a basic Vert.x Verticle that creates an HTTP server. This Verticle will be used as the subject for testing in subsequent examples.

LANGUAGE: java
CODE:
public class MyFirstVerticle extends AbstractVerticle {

  @Override
  public void start(final Future future) throws Exception {
    vertx.createHttpServer()
        .requestHandler(req -> req.response().end("hello vert.x"))
        .listen(8080, done -> {
          if (done.failed()) {
            future.fail(done.cause());
          } else {
            future.complete();
          }
        });
  }
}

----------------------------------------

TITLE: Accessing Bootstrap Plugin Instance
DESCRIPTION: Shows how to access a plugin's class instance through jQuery's data API.

LANGUAGE: javascript
CODE:
$('[rel=popover]').data('popover') instanceof $.fn.popover.Constructor

----------------------------------------

TITLE: Ruby Markdown Processing Example
DESCRIPTION: Ruby code demonstrating the use of the Redcarpet library for Markdown processing and HTML conversion.

LANGUAGE: ruby
CODE:
  require 'redcarpet'
  markdown = Redcarpet.new("Hello World!")
  puts markdown.to_html

----------------------------------------

TITLE: Implementing URL Argument Validation
DESCRIPTION: Adds argument validation to ensure URL parameter is provided when executing the HTTP client command.

LANGUAGE: javascript
CODE:
// Check the url argument
if (process.args().length < 1) {
  process.write("Missing URL\n").end();
  return;
}
var url = process.args()[0];

----------------------------------------

TITLE: JavaScript Bidding Function
DESCRIPTION: AJAX implementation for submitting new bids to the auction service with error handling.

LANGUAGE: javascript
CODE:
function bid() {
    var newPrice = document.getElementById('my_bid_value').value;

    var xmlhttp = (window.XMLHttpRequest) ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            if (xmlhttp.status != 200) {
                document.getElementById('error_message').innerHTML = 'Sorry, something went wrong.';
            }
        }
    };
    xmlhttp.open("PATCH", "http://localhost:8080/api/auctions/" + auction_id);
    xmlhttp.setRequestHeader("Content-Type", "application/json");
    xmlhttp.send(JSON.stringify({price: newPrice}));
};

----------------------------------------

TITLE: MacOS Text Encoding and Editor Metadata
DESCRIPTION: System metadata file specifying UTF-8 text encoding and cursor position (column 64, line 5) for MacroMates text editor

LANGUAGE: text
CODE:
UTF-8;134217984{
    column = 64;
    line = 5;
}

----------------------------------------

TITLE: Deploying a Verticle Programmatically in Vert.x
DESCRIPTION: Shows how to deploy a verticle from within another verticle, including passing configuration.

LANGUAGE: groovy
CODE:
def config = [ foo: "wibble", bar: false]

container.deployVerticle("foo.ChildVerticle", config)

----------------------------------------

TITLE: HTML Structure for Auction Interface
DESCRIPTION: Basic HTML markup for the auction bidding interface, including price display, bidding form, and feed area.

LANGUAGE: html
CODE:
<h3>Auction 1</h3>
<div id="error_message"></div>
<form>
    Current price:
    <span id="current_price"></span>
    <div>
        <label for="my_bid_value">Your offer:</label>
        <input id="my_bid_value" type="text">
        <input type="button" onclick="bid();" value="Bid">
    </div>
    <div>
        Feed:
        <textarea id="feed" rows="4" cols="50" readonly></textarea>
    </div>
</form>

----------------------------------------

TITLE: Configuring NPM Package for ES6 Vert.x Project
DESCRIPTION: Package.json configuration for a Vert.x project using ES6. Includes build scripts for Babel transpilation and dependencies for both Vert.x and Babel.

LANGUAGE: json
CODE:
{
  "name": "vertx-es6",
  "version": "0.0.1",
  "private": true,

  "main": "lib/main.js",

  "scripts": {
    "build": "rm -Rf lib && ./node_modules/.bin/babel --out-dir lib src",
    "start": "./node_modules/.bin/vertx run lib/main.js"
  },

  "dependencies": {
    "vertx3-full": "3.1.0",
    "babel-cli": "6.2.0",
    "babel-preset-es2015": "6.1.18"
  }
}

----------------------------------------

TITLE: Adding RAML Console Support to Vert.x Application
DESCRIPTION: Enhanced Vert.x application with static content handling to serve RAML console for API documentation.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {
  @Override
  public void start() {
    Router router = Router.router(vertx);

    router.get("/hello").handler(rc -> {
      rc.response()
          .putHeader("content-type", "application/json")
          .end(new JsonObject().put("greeting", "Hello World!").encode());
    });

    // optionally enable the web console so users can play with your API
    // online from their web browsers
    router.route().handler(StaticHandler.create());

    vertx.createHttpServer().requestHandler(router::accept).listen(8080);
  }
}

----------------------------------------

TITLE: Demonstrating Event Loop Affinity in Vert.x 4
DESCRIPTION: Code example showing how Vert.x 4 handles event loop affinity differently from Vert.x 3, ensuring consistent ordering and thread usage when running tasks from non-Vert.x threads. This change helps prevent data races and makes runtime behavior more predictable.

LANGUAGE: java
CODE:
Vertx vertx = Vertx.vertx();

for (int i = 0;i < 4;i++) {
  String msg = "Message " + i;
  vertx.runOnContext(v -> {
    System.out.println(i);
  });
}

----------------------------------------

TITLE: Implementing CSRF Protection in Vert.x Java
DESCRIPTION: This code snippet shows how to enable CSRF protection in a Vert.x application. It sets up a Router with CookieHandler, SessionHandler, and CSRFHandler to provide protection against Cross-Site Request Forgery attacks.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {

  @Override
  public void start() {

    Router router = Router.router(vertx);

    router.route().handler(CookieHandler.create());
    router.route().handler(SessionHandler
        .create(LocalSessionStore.create(vertx))
        .setCookieSecureFlag(true)
    );
    router.route().handler(CSRFHandler.create("not a good secret"));

    router.route().handler(ctx -> {
      ...
    });

----------------------------------------

TITLE: Maven Dependencies for Web API Service
DESCRIPTION: Required Maven dependencies for using vertx-web-api-service and vertx-codegen

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-codegen</artifactId>
  <version>3.6.0</version>
  <classifier>processor</classifier>
</dependency>
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-web-api-service</artifactId>
  <version>3.6.0</version>
</dependency>

----------------------------------------

TITLE: Initializing Vert.x Router and HTTP Server in Java
DESCRIPTION: This snippet demonstrates how to create a simple file server using Vert.x. It initializes a Router, sets up a static handler, and creates an HTTP server listening on port 80. Note that running this as root can pose security risks.

LANGUAGE: java
CODE:
public class App extends AbstractVerticle {
  @Override
  public void start() {

    Router router = Router.router(vertx);

    router.route().handler(StaticHandler.create(""));

    vertx.createHttpServer().requestHandler(router::accept).listen(80);
  }
}

----------------------------------------

TITLE: Implementing Service Proxy with Date Service
DESCRIPTION: Shows the implementation of a basic service proxy using the Event-Bus with callback handling for date operations.

LANGUAGE: java
CODE:
@VertxGen
interface DateService {

  // callback the handler with the current date
  void date(Handler<AsyncResult<String>> handler)
}

----------------------------------------

TITLE: Implementing Client-Side Drawing Functionality with Vert.x Event Bus
DESCRIPTION: JavaScript code for the client-side drawing functionality. It sets up the canvas, handles mouse events, and communicates with the Vert.x event bus to synchronize drawing across clients.

LANGUAGE: javascript
CODE:
$(function () {

  // This demo depends on the canvas element
  if (!('getContext' in document.createElement('canvas'))) {
    alert('Sorry, it looks like your browser does not support canvas!');
    return false;
  }

  var doc = $(document),
    canvas = $('#paper'),
    ctx = canvas[0].getContext('2d');

  // Generate an unique ID
  var id = Math.round($.now() * Math.random());

  // A flag for drawing activity
  var drawing = false;

  var clients = {};
  // create a event bus bridge to the server that served this file
  var eb = new vertx.EventBus(
      window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');

  eb.onopen = function () {
    // listen to draw events
    eb.registerHandler('draw', function (data) {
      // Is the user drawing?
      if (data.drawing && clients[data.id]) {

        // Draw a line on the canvas. clients[data.id] holds
        // the previous position of this user's mouse pointer

        drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);
      }

      // Saving the current client state
      clients[data.id] = data;
      clients[data.id].updated = $.now();
    });
  };

  var prev = {};

  canvas.on('mousedown', function (e) {
    e.preventDefault();
    drawing = true;
    prev.x = e.pageX;
    prev.y = e.pageY;
  });

  doc.bind('mouseup mouseleave', function () {
    drawing = false;
  });

  var lastEmit = $.now();

  doc.on('mousemove', function (e) {
    if ($.now() - lastEmit > 30) {
      eb.publish('draw', {
        'x': e.pageX,
        'y': e.pageY,
        'drawing': drawing,
        'id': id
      });
      lastEmit = $.now();
    }

    // Draw a line for the current user's movement, as it is
    // not received in the eventbus

    if (drawing) {

      drawLine(prev.x, prev.y, e.pageX, e.pageY);

      prev.x = e.pageX;
      prev.y = e.pageY;
    }
  });

  // Remove inactive clients after 10 seconds of inactivity
  setInterval(function () {

    for (var ident in clients) {
      if (clients.hasOwnProperty(ident)) {
        if ($.now() - clients[ident].updated > 10000) {
          // Last update was more than 10 seconds ago.
          // This user has probably closed the page
          delete clients[ident];
        }
      }
    }

  }, 10000);

  function drawLine(fromx, fromy, tox, toy) {
    ctx.moveTo(fromx, fromy);
    ctx.lineTo(tox, toy);
    ctx.stroke();
  }

});

----------------------------------------

TITLE: Basic TCP Echo Server Verticle
DESCRIPTION: A simple TCP server that echoes back any data received from clients by pumping the socket data stream directly back to itself.

LANGUAGE: clojure
CODE:
(ns example.server
  (:require [vertx.core :as core]
            [vertx.net :as net]
            [vertx.stream :as stream]))

(let [server (net/server)]
  (-> server
      (net/on-connect #(stream/pump % %))
      (net/listen 1234 "localhost"))
      
  (core/on-stop
    (.close server)))

----------------------------------------

TITLE: Configuring NPM Package for Vert.x Web
DESCRIPTION: Extended package.json configuration for Vert.x Web applications, using the full Vert.x stack instead of the minimal version.

LANGUAGE: json
CODE:
{
  "name": "vertx3-hello-web",
  "private": true,
  "dependencies": {
    "vertx3-full": "3.0.0-1"
  },
  "scripts": {
    "start": "./node_modules/.bin/vertx run server.js"
  }
}

----------------------------------------

TITLE: Implementing EventBus Effects with Ngrx in TypeScript
DESCRIPTION: TypeScript implementation of Ngrx Effects for handling remote actions and login events through the event bus.

LANGUAGE: typescript
CODE:
@Injectable()
export class AppEventBusEffects {

    constructor(private actions$: Actions, private appEventBusService: AppEventBusService) {}
    // Listen to all actions and publish remote actions to account event bus
    @Effect({dispatch: false}) remoteAction$ = this.actions$
        .filter(action => action instanceof RemoteAction && action.publishedByUser == undefined)
        .do((action: RemoteAction) => {
            this.appEventBusService.publishAction(action);
        });

    @Effect({dispatch: false}) login$ = this.actions$
        .ofType(UserActionTypes.LOGIN)
        .do(() => {
            this.appEventBusService.connect();
        });
}

----------------------------------------

TITLE: Hello World TCP Server with Vert.x
DESCRIPTION: TCP server implementation that responds to connections with 'Hello World' and closes the connection. Listens on port 7000.

LANGUAGE: javascript
CODE:
var server = vertx.createNetServer();
server.connectHandler(function (socket) {
  socket.write("Hello World!\n");
  socket.close();
});

server.listen(7000, "localhost");

----------------------------------------

TITLE: Using Random Port for Vert.x Application Testing
DESCRIPTION: This snippet shows how to select a random port for testing a Vert.x application. It uses a ServerSocket to find an available port, then passes that port to the application configuration.

LANGUAGE: java
CODE:
ServerSocket socket = new ServerSocket(0);
port = socket.getLocalPort();
socket.close();

DeploymentOptions options = new DeploymentOptions()
    .setConfig(new JsonObject().put("http.port", port)
    );

vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());

----------------------------------------

TITLE: Retrieving a Sale Record using cURL
DESCRIPTION: This bash command uses cURL to send a GET request to the REST API, retrieving a specific sale record by ID. It shows how to set the Accept header for JSON responses.

LANGUAGE: Bash
CODE:
$ curl -i -H "Accept: application/json" -X GET http://localhost:8080/sales/1

----------------------------------------

TITLE: Broadcasting Score Updates via AMQP
DESCRIPTION: Implements live score update broadcasting functionality using AMQP multicasting.

LANGUAGE: java
CODE:
public void broadcastUpdates(Game game)  
{  
   LOG.info("Broadcasting game update " + game);  
   JsonObject message = new JsonObject();  
   message.put("body", new JsonObject(Json.encode(game)).encode());  
   producer.send(message);  
} 

----------------------------------------

TITLE: Script Installation Commands
DESCRIPTION: Commands for installing and configuring the Vert.x service script in the Linux init.d system.

LANGUAGE: bash
CODE:
sudo mv my-vertx-application /etc/init.d
sudo chmod +x my-vertx-application

----------------------------------------

TITLE: Configuring Event Bus Bridge with Security
DESCRIPTION: Extended web server configuration including SockJS bridge settings and security permissions for inbound/outbound traffic.

LANGUAGE: javascript
CODE:
var webServerConf = {  
  port: 8080,
  host: 'localhost',
  bridge: true,

  inbound_permitted: [
    {
      address : 'vertx.mongopersistor',
      match : {
        action : 'find',
        collection : 'albums'
      }
    }
  ],
  outbound_permitted: [ {} ]
};

----------------------------------------

TITLE: Configuring Maven Dependencies for Vert.x 3 Web Project
DESCRIPTION: XML snippet showing the essential Maven dependencies for a Vert.x 3 Web project, including vertx-core and vertx-web.

LANGUAGE: xml
CODE:
<groupId>io.vertx.blog</groupId>
<artifactId>rpi</artifactId>
<version>1.0</version>

<dependencies>
  <dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-core</artifactId>
    <version>3.0.0</version>
  </dependency>

  <dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-web</artifactId>
    <version>3.0.0</version>
  </dependency>
</dependencies>

----------------------------------------

TITLE: Converting Vert.x Streams to RxJava2 Flowable and Observable
DESCRIPTION: Shows how to convert Vert.x streams to RxJava2 Flowable (back-pressured) and Observable (non-back-pressured) types. Highlights the difference between the two in terms of flow control.

LANGUAGE: java
CODE:
// Flowable<Buffer> maps to a ReadStream<Buffer>
// back-pressured stream
Flowable<Buffer> flowable = asyncFile.toFlowable();

// but we still can get an Observable<Buffer>
// non back-pressured stream
Observable<Buffer> flowable = asyncFile.toObservable();

----------------------------------------

TITLE: MQTT Server Implementation
DESCRIPTION: Shows how to create and configure an MQTT server with connection and message handling.

LANGUAGE: java
CODE:
MqttServerOptions options = new MqttServerOptions()
  .setPort(1883)
  .setHost("0.0.0.0");

MqttServer server = MqttServer.create(vertx, options);

server.endpointHandler(endpoint -> {

  System.out.println("connected client " + endpoint.clientIdentifier());

  endpoint.publishHandler(message -> {

    System.out.println("Just received message on [" + message.topicName() + "] payload [" +
      message.payload() + "] with QoS [" +
      message.qosLevel() + "]");
  });

  endpoint.accept(false);
});

server.listen(ar -> {
  if (ar.succeeded()) {
    System.out.println("MQTT server started and listening on port " + server.actualPort());
  } else {
    System.err.println("MQTT server error on start" + ar.cause().getMessage());
  }
});

----------------------------------------

TITLE: Adding Vert.x SQL Client Dependencies in Maven
DESCRIPTION: XML snippet for adding Vert.x PostgreSQL and MySQL client dependencies to a Maven POM file. These dependencies enable the use of the new Reactive SQL Clients in a project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-pg-client</artifactId>
  <version>3.8.0</version>
</dependency>
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-mysql-client</artifactId>
  <version>3.8.0</version>
</dependency>

----------------------------------------

TITLE: OpenAPI Specification for Transaction Service
DESCRIPTION: OpenAPI 3.0 definition specifying endpoints for transaction management with event bus integration via x-vertx-event-bus extension

LANGUAGE: yaml
CODE:
openapi: 3.0.0
paths:
  /api/transactions:
    get:
      operationId: getTransactionsList
      description: Get transactions list filtered by sender
      x-vertx-event-bus: transactions_manager.myapp
      parameters:
        - name: from
          in: query
          description: Matches exactly the email from
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses: ...
    post:
      operationId: addTransaction
      x-vertx-event-bus: transactions_manager.myapp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses: ...

----------------------------------------

TITLE: Creating an Application Starter Verticle in Vert.x
DESCRIPTION: Demonstrates how to create a verticle that coordinates the loading and configuration of multiple verticles in an application.

LANGUAGE: groovy
CODE:
// Application config

def appConfig = [
    verticle1Config: [
        // Config for verticle1
    ],
    verticle2Config: [
        // Config for verticle2
    ],
    verticle3Config: [
        // Config for verticle3
    ],
    verticle4Config: [
        // Config for verticle4
    ],
    verticle5Config: [
        // Config for verticle5
    ]
]

// Start the verticles that make up the app

container.deployVerticle("verticle1.js", appConfig["verticle1Config"])
container.deployVerticle("verticle2.rb", appConfig["verticle2Config"])
container.deployVerticle("foo.Verticle3", appConfig["verticle3Config"])
container.deployWorkerVerticle("foo.Verticle4", appConfig["verticle4Config"])
container.deployWorkerVerticle("verticle5.js", appConfig["verticle5Config"], 10)

----------------------------------------

TITLE: Vert.x Gradle Plugin with WebPack Integration
DESCRIPTION: Complete Gradle configuration that combines Vert.x plugin with WebPack, including task definitions and auto-redeployment settings.

LANGUAGE: groovy
CODE:
plugins {
  id 'io.vertx.vertx-plugin' version '0.0.4'
  id 'com.moowork.node' version '1.2.0'
}

repositories {
  jcenter()
}

dependencies {
  compile "io.vertx:vertx-web"
}

vertx {
  mainVerticle = "sample.MainVerticle"
  watch = ["src/**/*", "build.gradle", "yarn.lock"]
  onRedeploy = ["classes", "webpack"]
}

task webpack(type: Exec) {
  inputs.file("$projectDir/yarn.lock")
  inputs.file("$projectDir/webpack.config.js")
  inputs.dir("$projectDir/src/main/webapp")
  outputs.dir("$buildDir/resources/main/webroot")
  commandLine "$projectDir/node_modules/.bin/webpack"
}

----------------------------------------

TITLE: Implementing Custom Main Class for Vert.x Application in Java
DESCRIPTION: This snippet demonstrates how to create a custom Main class for a Vert.x application. It initializes a Vertx instance and deploys a main verticle.

LANGUAGE: java
CODE:
package org.acme.vertx;

import io.vertx.core.Vertx;

public class Main {

	public static void main(String[] args) {
		Vertx vertx = Vertx.vertx();
		vertx.deployVerticle(MyMainVerticle.class.getName());
	}

}

----------------------------------------

TITLE: Cloning Vert.x Scala Starter Project
DESCRIPTION: Command to clone the Vert.x Scala starter project from GitHub.

LANGUAGE: bash
CODE:
git clone git@github.com:vert-x3/vertx-sbt-starter.git

----------------------------------------

TITLE: Generating IDE Project Files for Vert.x Gradle Project
DESCRIPTION: Gradle commands to generate project files for IntelliJ IDEA and Eclipse IDEs.

LANGUAGE: bash
CODE:
./gradlew idea

LANGUAGE: bash
CODE:
./gradlew eclipse

----------------------------------------

TITLE: Initializing AMQP Bridge in Vert.x
DESCRIPTION: Establishes AMQP bridge connection and creates consumers for handling API requests through AMQP protocol.

LANGUAGE: java
CODE:
AmqpBridgeOptions options = new AmqpBridgeOptions().addEnabledSaslMechanism("ANONYMOUS");  
bridge = AmqpBridge.create(vertx, options);  
bridge.start(amqpHostname, amqpPort, res -> {  
   if (res.succeeded())  
   {  
     bridge.createConsumer("/setScore").setMaxBufferedMessages(100).handler(this::setScore);  
     bridge.createConsumer("/getScores").setMaxBufferedMessages(100).handler(this::getScores);  
     bridge.createConsumer("/addGame").setMaxBufferedMessages(100).handler(this::addGame);  
     fut.complete();  
   }  
   else  
   {  
     fut.fail(res.cause());  
   }  
});  

----------------------------------------

TITLE: Creating and Using MQTT Client in Vert.x
DESCRIPTION: Demonstrates how to create an MQTT client, connect to a broker, publish a message, and disconnect. Shows the basic usage of the new MQTT client feature in Vert.x 3.5.

LANGUAGE: java
CODE:
MqttClient mqttClient = MqttClient.create(vertx,
   new MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar ->
  if (ar.succeeded()) {
    System.out.println("Connected to a server");

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      false,
      false,
      s -> mqttClient.disconnect(d -> System.out.println("Disconnected from server")));
  } else {
    System.out.println("Failed to connect to a server");
    ar.cause().printStackTrace();
  }
});

----------------------------------------

TITLE: Handling User Login in JavaScript
DESCRIPTION: Sends a login request to the auth manager and stores the returned session ID upon successful authentication.

LANGUAGE: JavaScript
CODE:
eb.send('vertx.bridge.login', {username: that.username(), password: that.password()}, function (reply) {
  if (reply.status === 'ok') {
    that.sessionID(reply.sessionID);
  } else {
    alert('invalid login');
  }
});

----------------------------------------

TITLE: Adding MongoDB Maven Dependencies
DESCRIPTION: Maven dependency configuration to add vertx-mongo-client and embedded MongoDB test dependencies

LANGUAGE: xml
CODE:
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-mongo-client</artifactId>
  <version>3.1.0</version>
</dependency>

LANGUAGE: xml
CODE:
<dependency>
  <groupId>de.flapdoodle.embed</groupId>
  <artifactId>de.flapdoodle.embed.mongo</artifactId>
  <version>1.50.0</version>
  <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Serving Static Files in a Vert.x Web Server Module
DESCRIPTION: Illustrates how to serve static files from a Vert.x web server module. This example assumes the module's working directory is set to the module directory.

LANGUAGE: javascript
CODE:
req.response.sendFile('web-root/index.html');

----------------------------------------

TITLE: Installing Vert.x 4 using HomeBrew
DESCRIPTION: Commands to install the Vert.x 4 release candidate using HomeBrew. This involves tapping into a custom third-party repository and installing the vertx4 formula.

LANGUAGE: shell
CODE:
> brew tap vertx-distrib/tap
> brew install vertx4

----------------------------------------

TITLE: Creating Basic HTML Index Page
DESCRIPTION: Simple HTML file to test the web server setup.

LANGUAGE: html
CODE:
<html><body>Hello World</body></html>

----------------------------------------

TITLE: Installing and Publishing Vert.x Module with Gradle
DESCRIPTION: Gradle commands to install the module in the local Maven repository and upload it to a remote Maven repository.

LANGUAGE: bash
CODE:
./gradlew install

LANGUAGE: bash
CODE:
./gradlew uploadArchives

----------------------------------------

TITLE: Logging from a Vert.x Verticle
DESCRIPTION: This example demonstrates how to use the logger in a Vert.x verticle to log messages at different levels.

LANGUAGE: ruby
CODE:
logger = Vertx.logger

logger.info 'I am logging something'

----------------------------------------

TITLE: Using Collectors with Cassandra Client
DESCRIPTION: Java code snippet showing how to use Java collectors with Cassandra query results.

LANGUAGE: Java
CODE:
// Create a collector projecting a row set to a string in the form (last_name_1,last_name_2,...)
Collector<Row, ?, String> collector = Collectors.mapping(
    row -> row.getString("last_name"),
    Collectors.joining(",", "(", ")")
);

// Run the query with the collector
client.execute("SELECT * FROM users", collector, ar -> {
  if (ar.succeeded()) {
    // Result in the form (last_name_1,last_name_2,...)
    String result = ar.result();
  } else {
    System.out.println("Failure: " + ar.cause().getMessage());
  }
});

----------------------------------------

TITLE: Logging from a Verticle
DESCRIPTION: Demonstrates how to use the logger provided to each Verticle for logging at different levels.

LANGUAGE: JavaScript
CODE:
var logger = vertx.logger;

logger.info("I am logging something");

----------------------------------------

TITLE: Cloning Vert.x Gradle Template Project
DESCRIPTION: Commands to clone the Vert.x Gradle template project, remove the original remote, and add a new origin for your repository.

LANGUAGE: bash
CODE:
git clone https://github.com/vert-x/vertx-gradle-template.git my-vertx-module

LANGUAGE: bash
CODE:
git remote rm origin

LANGUAGE: bash
CODE:
git remote add origin <path to your repo>

----------------------------------------

TITLE: Accessing Configuration in a Verticle
DESCRIPTION: Shows how to access JSON configuration passed to a Verticle during deployment.

LANGUAGE: JavaScript
CODE:
var config = vertx.config;

stdout.println("Config is " + JSON.stringify(config));

----------------------------------------

TITLE: SPI Service Definition Example
DESCRIPTION: Example of an SPI service definition file showing combination syntax.

LANGUAGE: text
CODE:
foo.bar.baz.MyImpl
${combine}

----------------------------------------

TITLE: Logging from a Vert.x Verticle
DESCRIPTION: Demonstrates how to use the logger provided to each verticle for logging messages.

LANGUAGE: groovy
CODE:
def logger = container.logger

logger.info "I am logging something"

----------------------------------------

TITLE: Running Vert.x Maven Plugin Setup Command
DESCRIPTION: Command to initialize a project with the fabric8 Vert.x Maven Plugin.

LANGUAGE: bash
CODE:
mvn io.fabric8:vertx-maven-plugin:1.0.0:setup

----------------------------------------

TITLE: Generating IDE Project Files
DESCRIPTION: Maven commands to generate project files for IntelliJ IDEA and Eclipse IDEs.

LANGUAGE: bash
CODE:
mvn idea:idea

LANGUAGE: bash
CODE:
mvn eclipse:eclipse

----------------------------------------

TITLE: Running Vert.x Application Package Command
DESCRIPTION: Maven command to package the Vert.x application as a fat jar.

LANGUAGE: bash
CODE:
mvn clean package

----------------------------------------

TITLE: Running Integration Tests
DESCRIPTION: Maven command to execute integration tests for the Vert.x module.

LANGUAGE: bash
CODE:
mvn integration-test

----------------------------------------

TITLE: Accessing Bootstrap Plugin Constructor
DESCRIPTION: Demonstrates how to access a plugin's raw constructor through the Constructor property.

LANGUAGE: javascript
CODE:
$.fn.popover.Constructor

----------------------------------------

TITLE: Configuring Language Implementation in langs.properties
DESCRIPTION: Example configuration entries in langs.properties file to register a new language implementation (COBOL) with Vert.x. Shows both the module mapping and file extension mapping.

LANGUAGE: properties
CODE:
cobol=com.company~lang-cobol~1.0.0:com.mycompany.langmod.CobolVerticleFactory
.cbl=cobol

----------------------------------------

TITLE: WebPack Configuration for Vert.x Assets
DESCRIPTION: WebPack configuration file that specifies entry point and output location for bundled JavaScript assets.

LANGUAGE: javascript
CODE:
module.exports = {
  entry: './src/main/webapp/index.js',
  output: {
    filename: './build/resources/main/webroot/bundle.js'
  }
}

----------------------------------------

TITLE: Application Coordinator Verticle Example in JavaScript
DESCRIPTION: A JavaScript verticle that coordinates the deployment of multiple verticles in a Vert.x application. It demonstrates how to start different types of verticles with specific configurations.

LANGUAGE: javascript
CODE:
// Start the verticles that make up the app  

vertx.deployVerticle("verticle1.js", appConfig.verticle1Config);
vertx.deployVerticle("verticle2.js", appConfig.verticle2Config, 5);
vertx.deployVerticle("verticle3.js", appConfig.verticle3Config);
vertx.deployWorkerVerticle("verticle4.js", appConfig.verticle4Config);
vertx.deployWorkerVerticle("verticle5.js", appConfig.verticle5Config, 10);

----------------------------------------

TITLE: Basic Vert.x Gradle Plugin Configuration
DESCRIPTION: Minimal Gradle configuration to set up a Vert.x project. Configures the main verticle and required repositories.

LANGUAGE: groovy
CODE:
plugins {
  id 'io.vertx.vertx-plugin' version '0.0.4'
}

repositories {
  jcenter()
}

vertx {
  mainVerticle = 'sample.App'
}

----------------------------------------

TITLE: Setting Bootstrap Plugin Defaults
DESCRIPTION: Shows how to modify default options for all instances of a Bootstrap plugin.

LANGUAGE: javascript
CODE:
$.fn.modal.defaults = { … }

----------------------------------------

TITLE: Kotlin Verticle Implementation
DESCRIPTION: Example of implementing a Vert.x Verticle using Kotlin with HTTP server setup.

LANGUAGE: kotlin
CODE:
import io.vertx.core.*
import io.vertx.kotlin.core.http.HttpServerOptions

class Server : AbstractVerticle() {

  override fun start() {
    vertx.createHttpServer(

        // We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options
        HttpServerOptions(
            port = 8080,
            host = "localhost"
        ))
        .requestHandler() { req ->
          req.response().end("Hello from Kotlin")
        }
        .listen()
    println("Server started on 8080")
  }
}

----------------------------------------

TITLE: Running Basic Vert.x Verticle
DESCRIPTION: Examples of running verticles directly from command line in different languages

LANGUAGE: shell
CODE:
vertx run app.js
vertx run server.rb
vertx run accounts.py
vertx run MyApp.java
vertx run com.mycompany.widgets.Widget
vertx run SomeScript.groovy