TITLE: Installing Nuxt UI Package with Package Managers
DESCRIPTION: Commands to install the Nuxt UI package using different package managers (pnpm, yarn, npm, bun).

LANGUAGE: bash
CODE:
pnpm add @nuxt/ui

LANGUAGE: bash
CODE:
yarn add @nuxt/ui

LANGUAGE: bash
CODE:
npm install @nuxt/ui

LANGUAGE: bash
CODE:
bun add @nuxt/ui

----------------------------------------

TITLE: Configuring Nuxt UI in Vue Project
DESCRIPTION: Setup instructions for using Nuxt UI in a Vue.js project, including Vite plugin configuration and Vue plugin initialization.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui()
  ]
})

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

app.use(router)
app.use(ui)

app.mount('#app')

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui";

----------------------------------------

TITLE: Creating a New Nuxt UI Project with Terminal Command
DESCRIPTION: Terminal command to create a new Nuxt project with Nuxt UI pre-configured using the nuxt/starter#ui template.

LANGUAGE: bash
CODE:
npx nuxi init -t ui <my-app>

----------------------------------------

TITLE: Configuring Nuxt UI in Nuxt Project
DESCRIPTION: Configuration steps for adding Nuxt UI to a Nuxt.js project, including module registration and CSS imports.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui']
})

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui";

----------------------------------------

TITLE: Installing Nuxt UI with Package Managers
DESCRIPTION: Commands for installing Nuxt UI using different package managers including pnpm, yarn, npm, and bun.

LANGUAGE: bash
CODE:
pnpm add @nuxt/ui

LANGUAGE: bash
CODE:
yarn add @nuxt/ui

LANGUAGE: bash
CODE:
npm install @nuxt/ui

LANGUAGE: bash
CODE:
bun add @nuxt/ui

----------------------------------------

TITLE: Configuring Tailwind CSS Theme Variables
DESCRIPTION: Example of setting up custom theme variables including fonts, breakpoints and colors using the @theme directive in CSS

LANGUAGE: css
CODE:
@theme static {
  --font-sans: 'Public Sans', sans-serif;

  --breakpoint-3xl: 1920px;

  --color-green-50: #EFFDF5;
  --color-green-100: #D9FBE8;
  --color-green-200: #B3F5D1;
  --color-green-300: #75EDAE;
  --color-green-400: #00DC82;
  --color-green-500: #00C16A;
  --color-green-600: #00A155;
  --color-green-700: #007F45;
  --color-green-800: #016538;
  --color-green-900: #0A5331;
  --color-green-950: #052E16;
}

----------------------------------------

TITLE: Installing Compodium Module for Nuxt DevTools
DESCRIPTION: Command to install the compodium module for enhanced Nuxt UI development experience with component inspection and live preview capabilities.

LANGUAGE: bash
CODE:
npx nuxi module add compodium

----------------------------------------

TITLE: Customizing Nuxt UI Options in vite.config.ts
DESCRIPTION: Example of customizing Nuxt UI options such as component prefix, UI colors, and color mode in the Vite configuration.

LANGUAGE: ts
CODE:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      prefix: 'Nuxt',
      ui: {
        colors: {
          primary: 'green',
          neutral: 'slate'
        }
      },
      colorMode: false,
      theme: {
        colors: ['primary', 'error'],
        transitions: false
      }
    })
  ]
})

----------------------------------------

TITLE: Adding Nuxt UI Module to Nuxt Configuration
DESCRIPTION: Configure the Nuxt UI module in the nuxt.config.ts file.

LANGUAGE: ts
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui']
})

----------------------------------------

TITLE: Installing Nuxt UI Package with Package Managers
DESCRIPTION: Commands for installing the Nuxt UI package using different package managers like pnpm, yarn, npm, and bun.

LANGUAGE: bash
CODE:
pnpm add @nuxt/ui

LANGUAGE: bash
CODE:
yarn add @nuxt/ui

LANGUAGE: bash
CODE:
npm install @nuxt/ui

LANGUAGE: bash
CODE:
bun add @nuxt/ui

----------------------------------------

TITLE: Importing Tailwind CSS and Nuxt UI Styles
DESCRIPTION: CSS imports for Tailwind CSS and Nuxt UI styles in the main CSS file of a Vue project.

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui";

----------------------------------------

TITLE: Dynamic Locale Setting with useI18n in Nuxt UI
DESCRIPTION: This Vue component uses useI18n to dynamically set the locale in a Nuxt UI application. It imports all locales and uses the current locale to set the App component's locale.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Customizing Nuxt UI Options in Configuration
DESCRIPTION: Examples of customizing Nuxt UI options such as prefix, fonts, colorMode, and theme in nuxt.config.ts.

LANGUAGE: ts
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    prefix: 'Nuxt',
    fonts: false,
    colorMode: false,
    theme: {
      colors: ['primary', 'error'],
      transitions: false
    }
  }
})

----------------------------------------

TITLE: Configuring App Colors in Nuxt Config
DESCRIPTION: Example of configuring UI color aliases in the Nuxt application config

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  ui: {
    colors: {
      primary: 'blue',
      neutral: 'zinc'
    }
  }
})

----------------------------------------

TITLE: Basic Table Usage with Data Props
DESCRIPTION: Example showing basic table implementation with static data array. Demonstrates how to pass data as props to automatically generate columns based on object keys.

LANGUAGE: vue
CODE:
<UTable
  :data="[
    {
      id: '4600',
      date: '2024-03-11T15:30:00',
      status: 'paid',
      email: 'james.anderson@example.com',
      amount: 594
    },
    // Additional rows...
  ]"
  class="flex-1"
/>

----------------------------------------

TITLE: Nested Validation Schema Definition
DESCRIPTION: Example of defining nested validation rules using TypeScript and Zod

LANGUAGE: typescript
CODE:
{ user: z.object({ email: z.string() }) }

----------------------------------------

TITLE: Configuring Nuxt UI Vue Plugin in main.ts
DESCRIPTION: Importing and using the Nuxt UI Vue plugin in the main entry point of a Vue application.

LANGUAGE: ts
CODE:
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

app.use(router)
app.use(ui)

app.mount('#app')

----------------------------------------

TITLE: Configuring Nuxt I18n in nuxt.config.ts
DESCRIPTION: This TypeScript code configures the Nuxt I18n module in the nuxt.config.ts file. It sets up multiple locales with their respective codes and names.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: [
    '@nuxt/ui',
    '@nuxtjs/i18n'
  ],
  css: ['~/assets/css/main.css'],
  i18n: {
    locales: [{
      code: 'de',
      name: 'Deutsch'
    }, {
      code: 'en',
      name: 'English'
    }, {
      code: 'fr',
      name: 'Fran√ßais'
    }]
  }
})

----------------------------------------

TITLE: Implementing UApp Component in Vue
DESCRIPTION: This snippet demonstrates how to use the UApp component at the root of a Nuxt application. It wraps the NuxtPage component, which is typically used for page routing in Nuxt.

LANGUAGE: vue
CODE:
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Component Theme Definition Example
DESCRIPTION: Example showing how to define component themes using slots and variants with the Card component

LANGUAGE: typescript
CODE:
export default {
  slots: {
    root: 'bg-(--ui-bg) ring ring-(--ui-border) divide-y divide-(--ui-border) rounded-[calc(var(--ui-radius)*2)]',
    header: 'p-4 sm:px-6',
    body: 'p-4 sm:p-6',
    footer: 'p-4 sm:px-6'
  }
}

----------------------------------------

TITLE: Vue I18n Plugin Configuration
DESCRIPTION: Setup of Vue I18n plugin in the main application file with locale configuration and routing.

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { createI18n } from 'vue-i18n'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

const i18n = createI18n({
  legacy: false,
  locale: 'en',
  availableLocales: ['en', 'de'],
  messages: {
    en: {
      // ...
    },
    de: {
      // ...
    }
  }
})

app.use(router)
app.use(i18n)
app.use(ui)

app.mount('#app')

----------------------------------------

TITLE: Using useFormField Composable in Vue 3 with TypeScript
DESCRIPTION: This snippet demonstrates how to use the auto-imported useFormField composable to integrate custom inputs with a Form component. It extracts several utility functions from the composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { inputId, emitFormBlur, emitFormInput, emitFormChange } = useFormField()
</script>

----------------------------------------

TITLE: Configuring Custom Icon Collections in Nuxt
DESCRIPTION: Configuration code for setting up custom icon collections in Nuxt config file. Shows how to define custom icon directories and prefixes.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  icon: {
    customCollections: [{
      prefix: 'custom',
      dir: './assets/icons'
    }]
  }
})

----------------------------------------

TITLE: Basic Form Field Usage with Vue Template
DESCRIPTION: Example showing basic FormField component usage within Vue template syntax

LANGUAGE: vue
CODE:
<FormField name="email">

----------------------------------------

TITLE: Basic defineShortcuts Implementation in Vue
DESCRIPTION: Demonstrates basic usage of defineShortcuts composable to toggle a boolean state with meta+k shortcut.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const open = ref(false)

defineShortcuts({
  meta_k: () => {
    open.value = !open.value
  }
})
</script>

----------------------------------------

TITLE: Basic Input Usage with v-model in Vue
DESCRIPTION: Demonstrates how to use the v-model directive to control the value of the Input component.

LANGUAGE: vue
CODE:
<template>
  <UInput v-model="modelValue" />
</template>

<script setup>
const modelValue = ref('')
</script>

----------------------------------------

TITLE: Basic ButtonGroup Usage in Vue
DESCRIPTION: Basic implementation of ButtonGroup component with subtle and outline button variants.

LANGUAGE: vue
CODE:
<UButton color="neutral" variant="subtle" label="Button" />
<UButton color="neutral" variant="outline" icon="i-lucide-chevron-down" />

----------------------------------------

TITLE: Basic Modal Implementation in Vue
DESCRIPTION: Basic implementation of a Modal component with a button trigger and placeholder content.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="h-48 m-4" />

----------------------------------------

TITLE: Wrapping Vue App with UApp Component
DESCRIPTION: Using the UApp component to wrap the main Vue application for global configurations and component functionality.

LANGUAGE: vue
CODE:
<template>
  <UApp>
    <RouterView />
  </UApp>
</template>

----------------------------------------

TITLE: Multiple Selection in Select Component
DESCRIPTION: Demonstrates how to enable multiple selection in the Select component using the multiple prop.

LANGUAGE: vue
CODE:
<template>
  <Select v-model="modelValue" :items="items" multiple class="w-48" />
</template>

<script setup>
const modelValue = ref(['Backlog', 'Todo'])
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>

----------------------------------------

TITLE: Setting Input Placeholder in Vue
DESCRIPTION: Demonstrates how to set a placeholder text for the Input component using the placeholder prop.

LANGUAGE: vue
CODE:
<template>
  <UInput placeholder="Search..." />
</template>

----------------------------------------

TITLE: Basic Select Usage with String Items in Vue
DESCRIPTION: Demonstrates how to use the Select component with a v-model and an array of string items.

LANGUAGE: vue
CODE:
<template>
  <Select v-model="modelValue" :items="items" class="w-48" />
</template>

<script setup>
const modelValue = ref('Backlog')
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>

----------------------------------------

TITLE: Clearing All Toast Notifications with useToast in Vue 3
DESCRIPTION: Demonstrates how to remove all toast notifications at once using the clear method of useToast. This can be useful for resetting the notification state.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const toast = useToast()

function clearAllToasts() {
  toast.clear()
}
</script>

----------------------------------------

TITLE: Table with Custom Column Definitions
DESCRIPTION: Shows how to define custom columns using the columns prop with specific accessorKey, header, and cell rendering configurations.

LANGUAGE: vue
CODE:
<UTable
  :columns="[
    {
      accessorKey: 'id',
      header: 'ID'
    },
    {
      accessorKey: 'status',
      header: (props) => h(StatusHeader, props)
    }
  ]"
/>

----------------------------------------

TITLE: Basic Calendar Usage with v-model
DESCRIPTION: Demonstrates basic calendar implementation using v-model directive for date selection. Uses @internationalized/date package for date handling.

LANGUAGE: vue
CODE:
props:
  modelValue: [2022, 2, 3]

----------------------------------------

TITLE: Wrapping App with UApp Component in Vue
DESCRIPTION: Wrap the Nuxt application with the UApp component for global configurations and component functionality.

LANGUAGE: vue
CODE:
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Accessing Carousel Instance - Vue/TypeScript
DESCRIPTION: Example showing how to access the typed carousel component instance using useTemplateRef to get access to the Embla API and element reference.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const carousel = useTemplateRef('carousel')
</script>

<template>
  <UCarousel ref="carousel" />
</template>

----------------------------------------

TITLE: Implementing Card Component with Variants - Vue
DESCRIPTION: Example showing how to use the Card component with a 'subtle' variant. The component accepts header, default (body), and footer slots which can be populated with custom content or placeholders.

LANGUAGE: vue
CODE:
#header
:placeholder{class="h-8"}

#default
:placeholder{class="h-32"}

#footer
:placeholder{class="h-8"}

----------------------------------------

TITLE: Form Component Template Reference
DESCRIPTION: Example showing how to access typed component instance using useTemplateRef

LANGUAGE: vue
CODE:
<script setup lang="ts">
const form = useTemplateRef('form')
</script>

<template>
  <UForm ref="form" />
</template>

----------------------------------------

TITLE: Accessing Stepper Component Instance in Vue
DESCRIPTION: Example of how to access the typed Stepper component instance using useTemplateRef to control navigation programmatically

LANGUAGE: vue
CODE:
<script setup lang="ts">
const stepper = useTemplateRef('stepper')
</script>

<template>
  <UStepper ref="stepper" />
</template>

----------------------------------------

TITLE: Initializing useToast Composable in Vue 3
DESCRIPTION: Demonstrates how to initialize the useToast composable in a Vue 3 setup script. This composable is used to manage toast notifications across the application.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const toast = useToast()
</script>

----------------------------------------

TITLE: Configuring DropdownMenu Items in Vue
DESCRIPTION: Demonstrates how to configure items for a DropdownMenu component, including various properties like label, icon, and keyboard shortcuts.

LANGUAGE: vue
CODE:
<UButton icon="i-lucide-menu" color="neutral" variant="outline" />

----------------------------------------

TITLE: Installing Nuxt I18n Package
DESCRIPTION: This bash command installs the Nuxt I18n package using various package managers like pnpm, yarn, npm, or bun.

LANGUAGE: bash
CODE:
pnpm add @nuxtjs/i18n

----------------------------------------

TITLE: Fuse.js Default Configuration
DESCRIPTION: Default configuration options for the Fuse.js search implementation

LANGUAGE: typescript
CODE:
{
  fuseOptions: {
    ignoreLocation: true,
    threshold: 0.1,
    keys: ['label', 'suffix']
  },
  resultLimit: 12,
  matchAllWhenSearchEmpty: true
}

----------------------------------------

TITLE: Configuring Basic Alert with Title - Vue
DESCRIPTION: Shows how to create a basic Alert component with a title property. Uses the title prop to set a heading for the alert.

LANGUAGE: vue
CODE:
props:
  title: 'Heads up!'

----------------------------------------

TITLE: Defining Breadcrumb Item Types in TypeScript
DESCRIPTION: Type definitions for the Breadcrumb component items showing available properties including label, icon, avatar, class, and slot configurations.

LANGUAGE: typescript
CODE:
label?: string
icon?: string
avatar?: AvatarProps
class?: any
slot?: string

----------------------------------------

TITLE: Customized Close Button Modal
DESCRIPTION: Implementation of a Modal with customized close button styling and positioning.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
<Placeholder class="h-48" />

----------------------------------------

TITLE: Customizing DropdownMenu Content and Positioning in Vue
DESCRIPTION: Shows how to control the DropdownMenu content rendering, including alignment and positioning options.

LANGUAGE: vue
CODE:
<UButton label="Open" icon="i-lucide-menu" color="neutral" variant="outline" />

----------------------------------------

TITLE: Item Property Type Definitions
DESCRIPTION: Type definitions for individual command palette items

LANGUAGE: typescript
CODE:
prefix?: string
label?: string
suffix?: string
icon?: string
avatar?: AvatarProps
chip?: ChipProps
kbds?: string[] | KbdProps[]
active?: boolean
loading?: boolean
disabled?: boolean
slot?: string
onSelect?(e?: Event): void

----------------------------------------

TITLE: Custom Locale Definition in Vue
DESCRIPTION: Shows how to create a custom locale using defineLocale with type-safe messages implementation.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import type { Messages } from '@nuxt/ui'
import { defineLocale } from '@nuxt/ui/composables/defineLocale.js'

const locale = defineLocale<Messages>({
  name: 'My custom locale',
  code: 'en',
  dir: 'ltr',
  messages: {
    // implement pairs
  }
})
</script>

<template>
  <UApp :locale="locale">
    <RouterView />
  </UApp>
</template>

----------------------------------------

TITLE: Basic Popover Usage with Button Trigger
DESCRIPTION: Demonstrates the basic implementation of a Popover component with a button trigger and placeholder content.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="size-48 m-4 inline-flex" />

----------------------------------------

TITLE: Fullscreen Modal Implementation
DESCRIPTION: Example of a Modal component configured to display in fullscreen mode.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
<Placeholder class="h-full" />

----------------------------------------

TITLE: Basic Drawer Configuration in Vue
DESCRIPTION: Basic example of implementing a drawer with a button trigger and placeholder content.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-up" />

#content
<Placeholder class="h-48 m-4" />

----------------------------------------

TITLE: Multiple Selection InputMenu
DESCRIPTION: Example of InputMenu configured for multiple item selection with badges.

LANGUAGE: vue
CODE:
<template>
  <InputMenu
    v-model="modelValue"
    :items="items"
    multiple
  />
</template>

----------------------------------------

TITLE: Basic Tooltip with Text
DESCRIPTION: Demonstrates basic tooltip implementation with text content using a button trigger.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

----------------------------------------

TITLE: Basic PinInput Usage with v-model in Vue
DESCRIPTION: Demonstrates how to use the PinInput component with v-model for two-way data binding.

LANGUAGE: vue
CODE:
<template>
  <PinInput v-model="modelValue" />
</template>

<script setup>
const modelValue = ref([])
</script>

----------------------------------------

TITLE: Using Custom Icons in Vue Components
DESCRIPTION: Example of using custom icons in Vue components using the UIcon component.

LANGUAGE: vue
CODE:
<template>
  <UIcon name="i-custom-add" />
</template>

----------------------------------------

TITLE: Basic ColorPicker Usage with v-model in Vue
DESCRIPTION: Demonstrates how to use the ColorPicker component with v-model directive to control its value.

LANGUAGE: vue
CODE:
<ColorPicker v-model="modelValue" />

----------------------------------------

TITLE: NavigationMenu Item Type Definition
DESCRIPTION: Type definitions for NavigationMenu item properties including label, icon, avatar, badge and other configuration options.

LANGUAGE: typescript
CODE:
label?: string
icon?: string
avatar?: AvatarProps
badge?: string | number | BadgeProps
trailingIcon?: string
type?: 'label' | 'link'
value?: string
disabled?: boolean
class?: any
slot?: string
onSelect?(e: Event): void

----------------------------------------

TITLE: Configuring Button Active State - TypeScript
DESCRIPTION: Configuration example for setting up global button active state styles in app.config.ts

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  ui: {
    button: {
      variants: {
        active: {
          true: {
            base: 'font-bold'
          }
        }
      }
    }
  }
})

----------------------------------------

TITLE: Basic Checkbox Usage with v-model in Vue
DESCRIPTION: Demonstrates how to use the v-model directive to control the checked state of the Checkbox component.

LANGUAGE: vue
CODE:
<Checkbox v-model="modelValue" />

----------------------------------------

TITLE: Rendering FormField with Error Message in Vue
DESCRIPTION: This example illustrates how to use the FormField component with an error prop to display an error message below the form control.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" class="w-full" />

----------------------------------------

TITLE: Basic Chip Usage in Vue with NuxtUI
DESCRIPTION: Demonstrates how to wrap a UButton component with a Chip to display an indicator. The Chip is applied to a button with a mail icon.

LANGUAGE: vue
CODE:
:u-button{icon="i-lucide-mail" color="neutral" variant="subtle"}

----------------------------------------

TITLE: Basic useOverlay Implementation in Vue
DESCRIPTION: Basic example showing how to create and open a modal using the useOverlay composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const overlay = useOverlay()

const modal = overlay.create(MyModal)

async function openModal() {
  modal.open()
}
</script>

----------------------------------------

TITLE: Basic RadioGroup Usage with String Items in Vue
DESCRIPTION: Demonstrates how to use the RadioGroup component with a simple array of string items. The v-model directive is used to control the selected value.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    v-model="modelValue"
    :items="items"
  />
</template>

<script setup>
const modelValue = ref('System')
const items = ['System', 'Light', 'Dark']
</script>

----------------------------------------

TITLE: Basic InputMenu Usage with String Items
DESCRIPTION: Example showing basic usage of InputMenu with an array of string items using v-model binding.

LANGUAGE: vue
CODE:
<template>
  <InputMenu
    v-model="modelValue"
    :items="['Backlog', 'Todo', 'In Progress', 'Done']"
  />
</template>

----------------------------------------

TITLE: Rendering Basic Badge with Default Slot in Vue
DESCRIPTION: Demonstrates how to use the default slot to set the label of the Badge component.

LANGUAGE: vue
CODE:
<Badge>Badge</Badge>

----------------------------------------

TITLE: Basic Pagination Usage in Vue
DESCRIPTION: Demonstrates the basic usage of the Pagination component with total items and default page.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Adding Text to Chip in NuxtUI
DESCRIPTION: Demonstrates how to add text to the Chip using the 'text' prop. The example sets the text to '5' and the size to '3xl' on a button.

LANGUAGE: vue
CODE:
:u-button{icon="i-lucide-mail" color="neutral" variant="subtle"}

----------------------------------------

TITLE: Basic Avatar Implementation with Source URL
DESCRIPTION: Demonstrates basic usage of the Avatar component with an image source URL from GitHub

LANGUAGE: vue
CODE:
<Avatar src="https://github.com/benjamincanac.png" />

----------------------------------------

TITLE: Modal Props Update Example in Vue
DESCRIPTION: Demonstrates how to create a modal with props and update them using the patch method.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const overlay = useOverlay()

const modal = overlay.create(MyModal, {
  title: 'Welcome'
})

function openModal() {
  modal.open()
}

function updateModalTitle() {
  modal.patch({ title: 'Updated Title' })
}
</script>

----------------------------------------

TITLE: Initials Fallback Avatar
DESCRIPTION: Demonstrates Avatar implementation using initials from alt text as fallback

LANGUAGE: vue
CODE:
<Avatar alt="Benjamin Canac" size="md" />

----------------------------------------

TITLE: Basic Switch Implementation with v-model
DESCRIPTION: Demonstrates how to use v-model directive to control the checked state of the Switch component

LANGUAGE: vue
CODE:
props: {
  modelValue: true
}

----------------------------------------

TITLE: Configuring Toast with Title
DESCRIPTION: Shows how to add a title to a toast notification using the toast.add method

LANGUAGE: vue
CODE:
toast.add({
  title: 'Uh oh! Something went wrong.'
})

----------------------------------------

TITLE: Customizing Badge Styles with Class Prop in Vue
DESCRIPTION: Demonstrates how to override the base styles of the Badge using the 'class' prop.

LANGUAGE: vue
CODE:
<Badge class="font-bold rounded-full">Badge</Badge>

----------------------------------------

TITLE: Basic Textarea Usage with v-model in Vue
DESCRIPTION: Demonstrates how to use the v-model directive to control the value of the Textarea component.

LANGUAGE: vue
CODE:
<UTextarea v-model="modelValue" />

----------------------------------------

TITLE: Alert with Icon - Vue
DESCRIPTION: Shows how to add an icon to the Alert component using the icon prop with a Lucide icon.

LANGUAGE: vue
CODE:
props:
  title: 'Heads up!'
  description: 'You can change the primary color in your app config.'
  icon: 'i-lucide-terminal'

----------------------------------------

TITLE: Updating Component Props
DESCRIPTION: Update component props to use the new items prop instead of links or options.

LANGUAGE: diff
CODE:
<template>
- <USelect :options="countries" />
+ <USelect :items="countries" />

- <UHorizontalNavigation :links="links" />
+ <UNavigationMenu :items="links" />
</template>

----------------------------------------

TITLE: AvatarGroup with Max Limit in Vue
DESCRIPTION: Demonstrates the use of the 'max' prop to limit the number of avatars displayed, with the rest shown as a '+X' avatar.

LANGUAGE: vue
CODE:
:u-avatar{src="https://github.com/benjamincanac.png" alt="Benjamin Canac"}
:u-avatar{src="https://github.com/romhml.png" alt="Romain Hamel"}
:u-avatar{src="https://github.com/noook.png" alt="Neil Richter"}

----------------------------------------

TITLE: Basic InputNumber Usage with v-model
DESCRIPTION: Basic usage of InputNumber component with v-model directive for value binding.

LANGUAGE: vue
CODE:
<template>
  <InputNumber v-model="modelValue" />
</template>

----------------------------------------

TITLE: Alert with Avatar - Vue
DESCRIPTION: Demonstrates adding an avatar image to the Alert component using the avatar prop.

LANGUAGE: vue
CODE:
props:
  title: 'Heads up!'
  description: 'You can change the primary color in your app config.'
  avatar.src: 'https://github.com/nuxt.png'

----------------------------------------

TITLE: Rendering FormField with Label in Vue
DESCRIPTION: This snippet demonstrates how to use the FormField component with a label prop to set the label for the form control.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" />

----------------------------------------

TITLE: Basic Slider Usage with v-model
DESCRIPTION: Demonstrates basic implementation of the Slider component with v-model directive for value binding.

LANGUAGE: vue
CODE:
props:
  modelValue: 50

----------------------------------------

TITLE: Sized Avatar Implementation
DESCRIPTION: Shows how to implement an Avatar with custom size using the size prop set to xl

LANGUAGE: vue
CODE:
<Avatar src="https://github.com/benjamincanac.png" size="xl" />

----------------------------------------

TITLE: Updating Modal Usage
DESCRIPTION: Update modal usage to use the new v-model:open directive and slot structure.

LANGUAGE: diff
CODE:
<script setup lang="ts">
- const open = ref(false)
</script>

<template>
- <UButton label="Open" @click="open = true" />

- <UModal v-model="open">
+ <UModal>
+   <UButton label="Open" />

+   <template #content>
      <div class="p-4">
        <Placeholder class="h-48" />
      </div>
+   </template>
  </UModal>
</template>

----------------------------------------

TITLE: Slider with Default Value
DESCRIPTION: Shows how to set an initial value using the default-value prop when state control isn't needed.

LANGUAGE: vue
CODE:
props:
  defaultValue: 50

----------------------------------------

TITLE: Animated Progress Bar - Vue
DESCRIPTION: Implementation showing custom animation options for the progress bar.

LANGUAGE: vue
CODE:
animation="swing"

----------------------------------------

TITLE: AvatarGroup with Custom Size in Vue
DESCRIPTION: Shows how to use the 'size' prop to change the size of all avatars within the AvatarGroup.

LANGUAGE: vue
CODE:
:u-avatar{src="https://github.com/benjamincanac.png" alt="Benjamin Canac"}
:u-avatar{src="https://github.com/romhml.png" alt="Romain Hamel"}
:u-avatar{src="https://github.com/noook.png" alt="Neil Richter"}

----------------------------------------

TITLE: Setting Textarea Placeholder in Vue
DESCRIPTION: Demonstrates how to set a placeholder text for the Textarea using the placeholder prop.

LANGUAGE: vue
CODE:
<UTextarea placeholder="Type something..." />

----------------------------------------

TITLE: Colored Separator in Vue
DESCRIPTION: Shows how to change the color of the Separator component.

LANGUAGE: vue
CODE:
<template>
  <Separator color="primary" type="solid" />
</template>

----------------------------------------

TITLE: Setting Badge Label with Prop in Vue
DESCRIPTION: Shows how to set the Badge label using the 'label' prop instead of the default slot.

LANGUAGE: vue
CODE:
<Badge label="Badge" />

----------------------------------------

TITLE: RadioGroup with Custom Color in Vue
DESCRIPTION: Demonstrates how to customize the color of the RadioGroup using the color prop. This allows for better integration with the overall design theme.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    color="neutral"
    :default-value="defaultValue"
    :items="items"
  />
</template>

<script setup>
const defaultValue = 'System'
const items = ['System', 'Light', 'Dark']
</script>

----------------------------------------

TITLE: Customizing Input Color and Highlight in Vue
DESCRIPTION: Shows how to change the ring color when the Input is focused and use the highlight prop for validation errors.

LANGUAGE: vue
CODE:
<template>
  <UInput color="neutral" :highlight="true" placeholder="Search..." />
</template>

----------------------------------------

TITLE: Adding Description to Checkbox in Vue
DESCRIPTION: Illustrates how to add a description to the Checkbox using the description prop.

LANGUAGE: vue
CODE:
<Checkbox label="Check me" description="This is a checkbox." />

----------------------------------------

TITLE: Customizing Badge Color in Vue
DESCRIPTION: Illustrates how to change the color of the Badge using the 'color' prop.

LANGUAGE: vue
CODE:
<Badge color="neutral">Badge</Badge>

----------------------------------------

TITLE: Custom Styled Kbd Component
DESCRIPTION: Example of using the class prop to apply custom styling to the keyboard key display.

LANGUAGE: vue
CODE:
---
props:
  class: 'font-bold rounded-full'
  variant: subtle
slots:
  default: K
---

----------------------------------------

TITLE: Text Fallback Avatar
DESCRIPTION: Shows implementation of Avatar with text fallback using the text prop

LANGUAGE: vue
CODE:
<Avatar text="+1" size="md" />

----------------------------------------

TITLE: Changing Badge Variant in Vue
DESCRIPTION: Demonstrates how to modify the Badge variant using the 'variant' prop.

LANGUAGE: vue
CODE:
<Badge color="neutral" variant="outline">Badge</Badge>

----------------------------------------

TITLE: Progress Bar with Status Display - Vue
DESCRIPTION: Implementation showing how to display the current progress value above the bar.

LANGUAGE: vue
CODE:
v-model="50"
status="true"

----------------------------------------

TITLE: Basic Separator Usage in Vue
DESCRIPTION: Demonstrates the basic usage of the Separator component to separate content horizontally.

LANGUAGE: vue
CODE:
<template>
  <Separator />
</template>

----------------------------------------

TITLE: Calendar with Default Value
DESCRIPTION: Shows how to set an initial calendar value using the default-value prop when state control isn't needed.

LANGUAGE: vue
CODE:
props:
  defaultValue: [2022, 2, 6]

----------------------------------------

TITLE: Adjusting Badge Size in Vue
DESCRIPTION: Shows how to change the size of the Badge using the 'size' prop.

LANGUAGE: vue
CODE:
<Badge size="xl">Badge</Badge>

----------------------------------------

TITLE: Disabled PinInput in Vue
DESCRIPTION: Demonstrates how to disable the PinInput component.

LANGUAGE: vue
CODE:
<template>
  <PinInput :disabled="true" placeholder="‚óã" />
</template>

----------------------------------------

TITLE: Disabling Input in Vue
DESCRIPTION: Shows how to disable the Input component using the disabled prop.

LANGUAGE: vue
CODE:
<template>
  <UInput
    :disabled="true"
    placeholder="Search..."
  />
</template>

----------------------------------------

TITLE: Adding Icon to Badge in Vue
DESCRIPTION: Demonstrates how to include an icon in the Badge using the 'icon' prop.

LANGUAGE: vue
CODE:
<Badge icon="i-lucide-rocket" size="md" color="primary" variant="solid">Badge</Badge>

----------------------------------------

TITLE: Multiple Range Slider
DESCRIPTION: Implementation of a range slider with multiple values using an array.

LANGUAGE: vue
CODE:
props:
  modelValue: [25, 75]

----------------------------------------

TITLE: Basic Slideover Usage in Vue
DESCRIPTION: Demonstrates the basic usage of the Slideover component with a button trigger and placeholder content.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
:placeholder{class="h-full m-4"}

----------------------------------------

TITLE: Avatar Separator in Vue
DESCRIPTION: Demonstrates how to add an avatar to the Separator component.

LANGUAGE: vue
CODE:
<template>
  <Separator :avatar="{ src: 'https://github.com/nuxt.png' }" />
</template>

----------------------------------------

TITLE: Implementing Breadcrumb Items Structure
DESCRIPTION: Example structure showing how to define breadcrumb items with labels, icons, and navigation paths.

LANGUAGE: typescript
CODE:
items: [
  {
    label: 'Home',
    icon: 'i-lucide-house'
  },
  {
    label: 'Components',
    icon: 'i-lucide-box',
    to: '/components'
  },
  {
    label: 'Breadcrumb',
    icon: 'i-lucide-link',
    to: '/components/breadcrumb'
  }
]

----------------------------------------

TITLE: ColorPicker with HSL Format in Vue
DESCRIPTION: Demonstrates configuring the ColorPicker to use HSL color format via the format prop.

LANGUAGE: vue
CODE:
<ColorPicker v-model="modelValue" format="hsl" />

----------------------------------------

TITLE: Indeterminate Progress Bar - Vue
DESCRIPTION: Implementation of an indeterminate progress bar when no value is set or value is null.

LANGUAGE: vue
CODE:
v-model="null"

----------------------------------------

TITLE: Size-Modified ButtonGroup in Vue
DESCRIPTION: ButtonGroup implementation with extra-large size modification using the size prop.

LANGUAGE: vue
CODE:
<UButton color="neutral" variant="subtle" label="Button" />
<UButton color="neutral" variant="outline" icon="i-lucide-chevron-down" />

----------------------------------------

TITLE: Enabling Autoresize for Textarea in Vue
DESCRIPTION: Shows how to enable autoresizing of the Textarea height using the autoresize prop.

LANGUAGE: vue
CODE:
<UTextarea v-model="modelValue" :autoresize="true" />

----------------------------------------

TITLE: ColorPicker with CMYK Format in Vue
DESCRIPTION: Shows how to set the ColorPicker to use CMYK color format using the format prop.

LANGUAGE: vue
CODE:
<ColorPicker v-model="modelValue" format="cmyk" />

----------------------------------------

TITLE: Alert with Title and Description - Vue
DESCRIPTION: Demonstrates setting both title and description for an Alert component for more detailed information display.

LANGUAGE: vue
CODE:
props:
  title: 'Heads up!'
  description: 'You can change the primary color in your app config.'

----------------------------------------

TITLE: Vertical ButtonGroup Orientation in Vue
DESCRIPTION: ButtonGroup implementation with vertical orientation using the orientation prop.

LANGUAGE: vue
CODE:
<UButton color="neutral" variant="subtle" label="Submit" />
<UButton color="neutral" variant="outline" label="Cancel" />

----------------------------------------

TITLE: ColorPicker with CIELab Format in Vue
DESCRIPTION: Exemplifies setting the ColorPicker to use CIELab color format through the format prop.

LANGUAGE: vue
CODE:
<ColorPicker v-model="modelValue" format="lab" />

----------------------------------------

TITLE: Rendering FormField with Help Text in Vue
DESCRIPTION: This snippet shows how to use the FormField component with a help prop to display a help message below the form control.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" class="w-full" />

----------------------------------------

TITLE: ButtonGroup with Input Component in Vue
DESCRIPTION: Integration of Input component within ButtonGroup alongside a button with clipboard icon.

LANGUAGE: vue
CODE:
<UInput color="neutral" variant="outline" placeholder="Enter token" />
<UButton color="neutral" variant="subtle" icon="i-lucide-clipboard" />

----------------------------------------

TITLE: Positioned Popover with Custom Alignment
DESCRIPTION: Demonstrates how to position and align the Popover content using the content prop configuration.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="size-48 m-4 inline-flex" />

----------------------------------------

TITLE: ColorPicker with Throttle in Vue
DESCRIPTION: Demonstrates using the throttle prop to set a throttle value for the ColorPicker, affecting update frequency.

LANGUAGE: vue
CODE:
<ColorPicker v-model="modelValue" :throttle="100" />

----------------------------------------

TITLE: Disabling DropdownMenu in Vue
DESCRIPTION: Shows how to disable the DropdownMenu using the 'disabled' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" icon="i-lucide-menu" color="neutral" variant="outline" />

----------------------------------------

TITLE: Multiple Date Selection Calendar
DESCRIPTION: Implements multiple date selection functionality using the multiple prop, allowing users to select multiple dates.

LANGUAGE: vue
CODE:
props:
  multiple: true
  modelValue: [[2022, 2, 4], [2022, 2, 6], [2022, 2, 8]]

----------------------------------------

TITLE: ColorPicker with Custom Size in Vue
DESCRIPTION: Shows how to customize the size of the ColorPicker using the size prop.

LANGUAGE: vue
CODE:
<ColorPicker size="xl" />

----------------------------------------

TITLE: InputNumber with Custom Styling
DESCRIPTION: Customized InputNumber with specific color and variant properties.

LANGUAGE: vue
CODE:
<template>
  <InputNumber v-model="modelValue" color="neutral" variant="subtle" :highlight="false" />
</template>

----------------------------------------

TITLE: Date Range Selection Calendar
DESCRIPTION: Enables date range selection using the range prop, allowing users to select a start and end date.

LANGUAGE: vue
CODE:
props:
  range: true
  modelValue:
    start: [2022, 2, 3]
    end: [2022, 2, 20]

----------------------------------------

TITLE: Slideover with Title in Vue
DESCRIPTION: Shows how to add a title to the Slideover component using the 'title' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full"}

----------------------------------------

TITLE: Disabled ColorPicker in Vue
DESCRIPTION: Illustrates how to disable the ColorPicker using the disabled prop.

LANGUAGE: vue
CODE:
<ColorPicker disabled />

----------------------------------------

TITLE: Calendar Color Customization
DESCRIPTION: Shows how to customize the calendar color using the color prop.

LANGUAGE: vue
CODE:
props:
  color: neutral

----------------------------------------

TITLE: Calendar Size Configuration
DESCRIPTION: Demonstrates size customization of the calendar component using the size prop.

LANGUAGE: vue
CODE:
props:
  size: xl

----------------------------------------

TITLE: Adding Arrow to DropdownMenu in Vue
DESCRIPTION: Illustrates how to add an arrow to the DropdownMenu using the 'arrow' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" icon="i-lucide-menu" color="neutral" variant="outline" />

----------------------------------------

TITLE: Updating an Existing Toast with useToast in Vue 3
DESCRIPTION: Demonstrates how to update an existing toast notification using the update method of useToast. This function takes the toast ID and a partial Toast object with the properties to update.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const toast = useToast()

function updateToast(id: string | number) {
  toast.update(id, {
    title: 'Updated Toast',
    description: 'This toast has been updated.'
  })
}
</script>

----------------------------------------

TITLE: Setting Default Value for Checkbox in Vue
DESCRIPTION: Shows how to set an initial value for the Checkbox using the default-value prop when state control is not needed.

LANGUAGE: vue
CODE:
<Checkbox :default-value="true" />

----------------------------------------

TITLE: Required Switch with Label
DESCRIPTION: Shows how to make a Switch required, which adds an asterisk to the label

LANGUAGE: vue
CODE:
props: {
  required: true,
  label: "Check me"
}

----------------------------------------

TITLE: Including Avatar in Badge in Vue
DESCRIPTION: Illustrates how to add an Avatar component inside the Badge using the 'avatar' prop.

LANGUAGE: vue
CODE:
<Badge
  :avatar="{
    src: 'https://github.com/nuxt.png'
  }"
  size="md"
  color="neutral"
  variant="outline"
>
  Badge
</Badge>

----------------------------------------

TITLE: Switch with Default Value
DESCRIPTION: Shows how to set an initial value using defaultValue prop when state control isn't needed

LANGUAGE: vue
CODE:
props: {
  defaultValue: true
}

----------------------------------------

TITLE: Indeterminate Checkbox State in Vue
DESCRIPTION: Illustrates how to set the Checkbox to an indeterminate state using the v-model directive or default-value prop.

LANGUAGE: vue
CODE:
<Checkbox :default-value="'indeterminate'" />

----------------------------------------

TITLE: Positioning Icon in Badge in Vue
DESCRIPTION: Shows how to set the icon position using the 'trailingIcon' prop.

LANGUAGE: vue
CODE:
<Badge trailingIcon="i-lucide-arrow-right" size="md">Badge</Badge>

----------------------------------------

TITLE: Stepper Item Type Definitions
DESCRIPTION: TypeScript type definitions for Stepper item properties including title, description, content, icon, value, disabled and slot

LANGUAGE: ts-type
CODE:
title?: string
description?: AvatarProps
content?: string
icon?: string
value?: string | number
disabled?: boolean
slot?: string

----------------------------------------

TITLE: Customizing Indeterminate Icon for Checkbox in Vue
DESCRIPTION: Demonstrates how to customize the indeterminate icon of the Checkbox using the indeterminate-icon prop.

LANGUAGE: vue
CODE:
<Checkbox :default-value="'indeterminate'" indeterminate-icon="i-lucide-plus" />

----------------------------------------

TITLE: Instant Tooltip with Zero Delay
DESCRIPTION: Configures tooltip to appear instantly by setting delayDuration to 0.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

----------------------------------------

TITLE: Adding Avatar to Input in Vue
DESCRIPTION: Shows how to add an Avatar component inside the Input using the avatar prop.

LANGUAGE: vue
CODE:
<template>
  <UInput
    :avatar="{ src: 'https://github.com/nuxt.png' }"
    size="md"
    variant="outline"
    placeholder="Search..."
  />
</template>

----------------------------------------

TITLE: Basic Locale Configuration in Vue with @nuxt/ui
DESCRIPTION: Demonstrates how to set up basic locale configuration using the UApp component with a predefined locale from @nuxt/ui/locale.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { fr } from '@nuxt/ui/locale'
</script>

<template>
  <UApp :locale="fr">
    <RouterView />
  </UApp>
</template>

----------------------------------------

TITLE: Adding Label to Checkbox in Vue
DESCRIPTION: Shows how to add a label to the Checkbox component using the label prop.

LANGUAGE: vue
CODE:
<Checkbox label="Check me" />

----------------------------------------

TITLE: Icon Fallback Avatar
DESCRIPTION: Demonstrates using an icon as fallback content in the Avatar component

LANGUAGE: vue
CODE:
<Avatar icon="i-lucide-image" size="md" />

----------------------------------------

TITLE: Labeled Separator in Vue
DESCRIPTION: Demonstrates how to add a label to the Separator component.

LANGUAGE: vue
CODE:
<template>
  <Separator label="Hello World" />
</template>

----------------------------------------

TITLE: Adjusting Checkbox Size in Vue
DESCRIPTION: Illustrates how to change the size of the Checkbox using the size prop.

LANGUAGE: vue
CODE:
<Checkbox size="xl" :default-value="true" label="Check me" />

----------------------------------------

TITLE: Adding Icon to Textarea in Vue
DESCRIPTION: Demonstrates how to add an icon to the Textarea using the icon prop.

LANGUAGE: vue
CODE:
<UTextarea icon="i-lucide-search" size="md" variant="outline" placeholder="Search..." :rows="1" />

----------------------------------------

TITLE: Slider with Min/Max Range
DESCRIPTION: Configuration of minimum and maximum values for the slider range.

LANGUAGE: vue
CODE:
props:
  min: 0
  max: 50
  defaultValue: 50

----------------------------------------

TITLE: Displaying Nuxt UI Module Folder Structure
DESCRIPTION: Illustrates the folder structure of the Nuxt UI module, showing the organization of components, themes, and other key files.

LANGUAGE: bash
CODE:
‚îú‚îÄ‚îÄ plugins/
‚îú‚îÄ‚îÄ runtime/
‚îÇ   ‚îú‚îÄ‚îÄ components/        # Where all the components are located
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Accordion.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Alert.vue
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ composables/
‚îÇ   ‚îú‚îÄ‚îÄ locale/
‚îÇ   ‚îú‚îÄ‚îÄ plugins/
‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ vue/
‚îÇ       ‚îú‚îÄ‚îÄ components/
‚îÇ       ‚îî‚îÄ‚îÄ plugins/
‚îú‚îÄ‚îÄ theme/                 # This where the theme for each component is located
‚îÇ   ‚îú‚îÄ‚îÄ accordion.ts       # Theme for Accordion component
‚îÇ   ‚îú‚îÄ‚îÄ alert.ts
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ module.ts

----------------------------------------

TITLE: Customizing Chip Color in NuxtUI
DESCRIPTION: Shows how to change the color of the Chip using the 'color' prop. The example uses a neutral color for the Chip on a button with a mail icon.

LANGUAGE: vue
CODE:
:u-button{icon="i-lucide-mail" color="neutral" variant="subtle"}

----------------------------------------

TITLE: Multiple Range Slider with Minimum Steps
DESCRIPTION: Range slider with multiple thumbs and minimum distance between thumbs configuration.

LANGUAGE: vue
CODE:
props:
  modelValue: [25, 50, 75]
  minStepsBetweenThumbs: 10

----------------------------------------

TITLE: Adding Loading State to Textarea in Vue
DESCRIPTION: Shows how to add a loading state to the Textarea using the loading prop.

LANGUAGE: vue
CODE:
<UTextarea :loading="true" :trailing="false" placeholder="Search..." :rows="1" />

----------------------------------------

TITLE: Adjusting Chip Size in NuxtUI
DESCRIPTION: Illustrates how to modify the size of the Chip using the 'size' prop. The example sets the size to '3xl' for a larger Chip on a button.

LANGUAGE: vue
CODE:
:u-button{icon="i-lucide-mail" color="neutral" variant="subtle"}

----------------------------------------

TITLE: PinInput with Placeholder in Vue
DESCRIPTION: Demonstrates setting a placeholder text for the PinInput fields.

LANGUAGE: vue
CODE:
<template>
  <PinInput placeholder="‚óã" />
</template>

----------------------------------------

TITLE: Colored Slider
DESCRIPTION: Customizing the slider color using the color prop.

LANGUAGE: vue
CODE:
props:
  color: neutral
  defaultValue: 50

----------------------------------------

TITLE: Defining Tab Item Type Properties in TypeScript
DESCRIPTION: TypeScript type definitions for tab item properties including label, icon, avatar, content, value, disabled, and slot options.

LANGUAGE: ts-type
CODE:
label?: string

LANGUAGE: ts-type
CODE:
icon?: string

LANGUAGE: ts-type
CODE:
avatar?: AvatarProps

LANGUAGE: ts-type
CODE:
content?: string

LANGUAGE: ts-type
CODE:
value?: string | number

LANGUAGE: ts-type
CODE:
disabled?: boolean

LANGUAGE: ts-type
CODE:
slot?: string

----------------------------------------

TITLE: ColorPicker with Default Value in Vue
DESCRIPTION: Shows how to set an initial value for the ColorPicker using the default-value prop when state control is not needed.

LANGUAGE: vue
CODE:
<ColorPicker :default-value="defaultValue" />

----------------------------------------

TITLE: Disabled Slider
DESCRIPTION: Rendering a disabled slider that prevents user interaction.

LANGUAGE: vue
CODE:
props:
  disabled: true
  defaultValue: 50

----------------------------------------

TITLE: Adjusting Input Size in Vue
DESCRIPTION: Shows how to change the size of the Input component using the size prop.

LANGUAGE: vue
CODE:
<template>
  <UInput size="xl" placeholder="Search..." />
</template>

----------------------------------------

TITLE: Disabled Collapsible in Vue
DESCRIPTION: Illustrates how to disable the Collapsible component using the disabled prop.

LANGUAGE: vue
CODE:
<u-button label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-down" block>

#content
<placeholder class="h-48" />

----------------------------------------

TITLE: Vertical Progress Bar - Vue
DESCRIPTION: Implementation of a vertical progress bar using the orientation prop.

LANGUAGE: vue
CODE:
orientation="vertical"
class="h-48"

----------------------------------------

TITLE: Configuring Textarea Rows in Vue
DESCRIPTION: Shows how to set the number of rows for the Textarea using the rows prop.

LANGUAGE: vue
CODE:
<UTextarea :rows="12" />

----------------------------------------

TITLE: Disabling Checkbox in Vue
DESCRIPTION: Shows how to disable the Checkbox component using the disabled prop.

LANGUAGE: vue
CODE:
<Checkbox :disabled="true" label="Check me" />

----------------------------------------

TITLE: Drawer Root Configuration in Vue
DESCRIPTION: Configuration required in app.vue to enable background scaling feature for the drawer component.

LANGUAGE: vue
CODE:
<template>
  <UApp>
    <div class="bg-(--ui-bg)" data-vaul-drawer-wrapper>
      <NuxtLayout>
        <NuxtPage />
      </NuxtLayout>
    </div>
  </UApp>
</template>

----------------------------------------

TITLE: Customizing Textarea Color in Vue
DESCRIPTION: Shows how to change the ring color of the Textarea when focused using the color prop.

LANGUAGE: vue
CODE:
<UTextarea color="neutral" :highlight="true" placeholder="Type something..." />

----------------------------------------

TITLE: Adding Icon to Input in Vue
DESCRIPTION: Demonstrates how to add an icon to the Input component using the icon prop and customize its position.

LANGUAGE: vue
CODE:
<template>
  <UInput
    icon="i-lucide-search"
    size="md"
    variant="outline"
    placeholder="Search..."
  />
</template>

----------------------------------------

TITLE: Kbd Component with Value Prop
DESCRIPTION: Demonstrates using the value prop instead of a slot to display a keyboard key.

LANGUAGE: vue
CODE:
---
props:
  value: K
---

----------------------------------------

TITLE: Vertical Slider Orientation
DESCRIPTION: Configuring the slider to display in vertical orientation with custom height.

LANGUAGE: vue
CODE:
props:
  orientation: vertical
  defaultValue: 50
  class: 'h-48'

----------------------------------------

TITLE: Disabling Textarea in Vue
DESCRIPTION: Shows how to disable the Textarea using the disabled prop.

LANGUAGE: vue
CODE:
<UTextarea :disabled="true" placeholder="Type something..." />

----------------------------------------

TITLE: Defining ContextMenu Items and Shortcuts in Vue
DESCRIPTION: This snippet demonstrates how to define ContextMenu items with keyboard shortcuts and use the extractShortcuts utility to enable them with defineShortcuts.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const items = [
  [{
    label: 'Show Sidebar',
    kbds: ['meta', 'S'],
    onSelect() {
      console.log('Show Sidebar clicked')
    }
  }, {
    label: 'Show Toolbar',
    kbds: ['shift', 'meta', 'D'],
    onSelect() {
      console.log('Show Toolbar clicked')
    }
  }, {
    label: 'Collapse Pinned Tabs',
    disabled: true
  }], [{
    label: 'Refresh the Page'
  }, {
    label: 'Clear Cookies and Refresh'
  }, {
    label: 'Clear Cache and Refresh'
  }, {
    type: 'separator' as const
  }, {
    label: 'Developer',
    children: [[{
      label: 'View Source',
      kbds: ['option', 'meta', 'U'],
      onSelect() {
        console.log('View Source clicked')
      }
    }, {
      label: 'Developer Tools',
      kbds: ['option', 'meta', 'I'],
      onSelect() {
        console.log('Developer Tools clicked')
      }
    }], [{
      label: 'Inspect Elements',
      kbds: ['option', 'meta', 'C'],
      onSelect() {
        console.log('Inspect Elements clicked')
      }
    }], [{
      label: 'JavaScript Console',
      kbds: ['option', 'meta', 'J'],
      onSelect() {
        console.log('JavaScript Console clicked')
      }
    }]]
  }]
]

defineShortcuts(extractShortcuts(items))
</script>

----------------------------------------

TITLE: Kbd Component with Special Keys
DESCRIPTION: Shows how to use special key values that are processed through the useKbd composable, displaying platform-specific symbols.

LANGUAGE: vue
CODE:
---
props:
  value: meta
items:
  value:
    - meta
    - win
    - command
    - shift
    - ctrl
    - option
    - alt
    - enter
    - delete
    - backspace
    - escape
    - tab
    - capslock
    - arrowup
    - arrowright
    - arrowdown
    - arrowleft
    - pageup
    - pagedown
    - home
    - end
---

----------------------------------------

TITLE: Configuring Input Type in Vue
DESCRIPTION: Shows how to set different input types using the type prop, with examples for text, number, password, search, and file inputs.

LANGUAGE: vue
CODE:
<template>
  <UInput type="file" />
</template>

----------------------------------------

TITLE: Setting Maximum Rows for Autoresize in Vue
DESCRIPTION: Demonstrates how to set a maximum number of rows when autoresizing the Textarea using the maxrows prop.

LANGUAGE: vue
CODE:
<UTextarea v-model="modelValue" :maxrows="4" :autoresize="true" />

----------------------------------------

TITLE: Kbd Component with Solid Variant
DESCRIPTION: Demonstrates using the variant prop to change the visual style of the keyboard key to solid.

LANGUAGE: vue
CODE:
---
props:
  variant: solid
slots:
  default: K
---

----------------------------------------

TITLE: Vertical InputNumber Orientation
DESCRIPTION: InputNumber component with vertical orientation layout.

LANGUAGE: vue
CODE:
<template>
  <InputNumber v-model="modelValue" orientation="vertical" />
</template>

----------------------------------------

TITLE: Setting Input Variant in Vue
DESCRIPTION: Demonstrates how to change the visual variant of the Input component using the variant prop.

LANGUAGE: vue
CODE:
<template>
  <UInput color="neutral" variant="subtle" :highlight="false" placeholder="Search..." />
</template>

----------------------------------------

TITLE: Basic TypeScript Type Definitions
DESCRIPTION: Type definitions for the CommandPalette groups and items configuration

LANGUAGE: typescript
CODE:
id: string
label?: string
slot?: string
items?: CommandPaletteItem[]
ignoreFilter?: boolean
postFilter?: (searchTerm: string, items: T[]) => T[]
highlightedIcon?: string

----------------------------------------

TITLE: Large Size Kbd Component
DESCRIPTION: Shows how to use the size prop to create a larger keyboard key display.

LANGUAGE: vue
CODE:
---
props:
  size: lg
slots:
  default: K
---

----------------------------------------

TITLE: RadioGroup with Custom Value Key in Vue
DESCRIPTION: Demonstrates how to use a custom value key for the RadioGroup items. The value-key prop is used to specify which property of the item object should be used as the value.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    v-model="modelValue"
    :items="items"
    value-key="id"
  />
</template>

<script setup>
const modelValue = ref('light')
const items = [
  { label: 'System', description: 'This is the first option.', id: 'system' },
  { label: 'Light', description: 'This is the second option.', id: 'light' },
  { label: 'Dark', description: 'This is the third option.', id: 'dark' }
]
</script>

----------------------------------------

TITLE: Disabling Color Mode in Nuxt Configuration
DESCRIPTION: This snippet shows how to disable the @nuxtjs/color-mode module in the Nuxt configuration file by setting the ui.colorMode option to false.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    colorMode: false
  }
})

----------------------------------------

TITLE: Modal with Title and Description
DESCRIPTION: Example showing how to implement a Modal with a title and description in the header.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
<Placeholder class="h-48" />

----------------------------------------

TITLE: Customizing Active Variant in Vue Pagination
DESCRIPTION: Demonstrates how to change the variant of the active control using the activeVariant prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" active-color="primary" active-variant="subtle" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: RadioGroup with Custom Size and Orientation in Vue
DESCRIPTION: Shows how to adjust the size and orientation of the RadioGroup using the size and orientation props. This allows for flexible layout options.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    size="xl"
    orientation="horizontal"
    variant="list"
    :default-value="defaultValue"
    :items="items"
  />
</template>

<script setup>
const defaultValue = 'System'
const items = ['System', 'Light', 'Dark']
</script>

----------------------------------------

TITLE: Rendering FormField with Description in Vue
DESCRIPTION: This snippet illustrates how to use the FormField component with a description prop to provide additional information below the label.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" class="w-full" />

----------------------------------------

TITLE: Customizing Items Per Page in Vue Pagination
DESCRIPTION: Shows how to set a custom number of items per page using the itemsPerPage prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :items-per-page="20" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Disabled RadioGroup in Vue
DESCRIPTION: Demonstrates how to disable the entire RadioGroup using the disabled prop. This prevents user interaction with the radio buttons.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    disabled
    :default-value="defaultValue"
    :items="items"
  />
</template>

<script setup>
const defaultValue = 'System'
const items = ['System', 'Light', 'Dark']
</script>

----------------------------------------

TITLE: Progress Bar with Steps - Vue
DESCRIPTION: Advanced implementation using an array of strings to display progress steps under the bar.

LANGUAGE: vue
CODE:
v-model="3"
:max="['Waiting...', 'Cloning...', 'Migrating...', 'Deploying...', 'Done!']"

----------------------------------------

TITLE: Showing Edge Pages in Vue Pagination
DESCRIPTION: Shows how to always display the first and last pages using the showEdges prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :show-edges="true" :sibling-count="1" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Changing Slideover Side in Vue
DESCRIPTION: Illustrates how to change the side from which the Slideover appears using the 'side' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full min-h-48"}

----------------------------------------

TITLE: Adding Avatar to Toast
DESCRIPTION: Demonstrates including an avatar image in a toast notification

LANGUAGE: vue
CODE:
toast.add({
  avatar: {
    src: 'https://github.com/benjamincanac.png'
  }
})

----------------------------------------

TITLE: Adding Avatar to Textarea in Vue
DESCRIPTION: Demonstrates how to add an avatar to the Textarea using the avatar prop.

LANGUAGE: vue
CODE:
<UTextarea :avatar="{ src: 'https://github.com/nuxt.png' }" size="md" variant="outline" placeholder="Search..." :rows="1" />

----------------------------------------

TITLE: Customizing Color in Vue Pagination
DESCRIPTION: Shows how to change the color of inactive controls using the color prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" color="primary" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Basic Progress Bar Implementation - Vue
DESCRIPTION: Basic usage of Progress component with v-model directive to control the value.

LANGUAGE: vue
CODE:
v-model="50"

----------------------------------------

TITLE: Adjusting Sibling Count in Vue Pagination
DESCRIPTION: Demonstrates how to change the number of sibling pages displayed using the siblingCount prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :sibling-count="1" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Customizing Active Color in Vue Pagination
DESCRIPTION: Shows how to change the color of the active control using the activeColor prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" active-color="neutral" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Disabling Slideover Overlay in Vue
DESCRIPTION: Demonstrates how to disable the overlay of the Slideover component using the 'overlay' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full"}

----------------------------------------

TITLE: Basic Usage of AvatarGroup in Vue
DESCRIPTION: Demonstrates how to use the AvatarGroup component to stack multiple Avatar components together.

LANGUAGE: vue
CODE:
:u-avatar{src="https://github.com/benjamincanac.png" alt="Benjamin Canac"}
:u-avatar{src="https://github.com/romhml.png" alt="Romain Hamel"}
:u-avatar{src="https://github.com/noook.png" alt="Neil Richter"}

----------------------------------------

TITLE: Implementing Color Mode Toggle Button in Vue
DESCRIPTION: A Vue component that creates a button to toggle between light and dark modes using the useColorMode composable from VueUse. The button displays different icons based on the current mode.

LANGUAGE: vue
CODE:
<script setup>
import { useColorMode } from '@vueuse/core'

const mode = useColorMode()
</script>

<template>
  <UButton
    :icon="mode === 'dark' ? 'i-lucide-moon' : 'i-lucide-sun'"
    color="neutral"
    variant="ghost"
    @click="mode = mode === 'dark' ? 'light' : 'dark'"
  />
</template>

----------------------------------------

TITLE: Adjusting Size in Vue Pagination
DESCRIPTION: Shows how to change the size of the pagination controls using the size prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" size="xl" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Basic SelectMenu Usage
DESCRIPTION: Demonstrates basic usage of SelectMenu component with an array of string items

LANGUAGE: vue
CODE:
<SelectMenu
  v-model="modelValue"
  :items="['Backlog', 'Todo', 'In Progress', 'Done']"
  class="w-48"
/>

----------------------------------------

TITLE: Adjusting Textarea Size in Vue
DESCRIPTION: Shows how to change the size of the Textarea using the size prop.

LANGUAGE: vue
CODE:
<UTextarea size="xl" placeholder="Type something..." />

----------------------------------------

TITLE: PinInput with Default Value in Vue
DESCRIPTION: Shows how to set an initial value for the PinInput using the default-value prop.

LANGUAGE: vue
CODE:
<template>
  <PinInput :default-value="['1','2','3']" />
</template>

----------------------------------------

TITLE: Disabling Slideover Transition in Vue
DESCRIPTION: Shows how to disable the transition effect of the Slideover component using the 'transition' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full"}

----------------------------------------

TITLE: Object Items SelectMenu
DESCRIPTION: Shows SelectMenu usage with an array of objects containing label properties

LANGUAGE: vue
CODE:
<SelectMenu
  v-model="modelValue"
  :items="[
    { label: 'Backlog' },
    { label: 'Todo' },
    { label: 'In Progress' },
    { label: 'Done' }
  ]"
  class="w-48"
/>

----------------------------------------

TITLE: Dynamic HTML Attributes for Multilingual Nuxt UI App
DESCRIPTION: This Vue component dynamically sets the lang and dir attributes on the HTML element based on the current locale. It uses the useHead composable to update the HTML attributes.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()

const lang = computed(() => locales[locale.value].code)
const dir = computed(() => locales[locale.value].dir)

useHead({
  htmlAttrs: {
    lang,
    dir
  }
})
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: PinInput with Number Type in Vue
DESCRIPTION: Demonstrates setting the PinInput type to 'number' for numeric input only.

LANGUAGE: vue
CODE:
<template>
  <PinInput type="number" />
</template>

----------------------------------------

TITLE: Changing Chip Position in NuxtUI
DESCRIPTION: Shows how to change the position of the Chip using the 'position' prop. The example positions the Chip at the bottom-left of a button.

LANGUAGE: vue
CODE:
:u-button{icon="i-lucide-mail" color="neutral" variant="subtle"}

----------------------------------------

TITLE: Extracting Shortcuts from DropdownMenu Items in TypeScript
DESCRIPTION: Demonstrates how to extract and define shortcuts from DropdownMenu items using the defineShortcuts composable.

LANGUAGE: typescript
CODE:
const items: DropdownMenuItem[] = [{
  label: 'Invite users',
  icon: 'i-lucide-user-plus',
  children: [{
    label: 'Invite by email',
    icon: 'i-lucide-send-horizontal',
    kbds: ['meta', 'e'],
    onSelect() {
      console.log('Invite by email clicked')
    }
  }, {
    label: 'Invite by link',
    icon: 'i-lucide-link',
    kbds: ['meta', 'i'],
    onSelect() {
      console.log('Invite by link clicked')
    }
  }]
}, {
  label: 'New team',
  icon: 'i-lucide-plus',
  kbds: ['meta', 'n'],
  onSelect() {
    console.log('New team clicked')
  }
}]

defineShortcuts(extractShortcuts(items))

----------------------------------------

TITLE: PinInput with Mask in Vue
DESCRIPTION: Shows how to use the mask prop to treat the input like a password.

LANGUAGE: vue
CODE:
<template>
  <PinInput :mask="true" :default-value="['1','2','3','4','5']" />
</template>

----------------------------------------

TITLE: Sized Switch
DESCRIPTION: Shows how to modify the Switch size using the size prop

LANGUAGE: vue
CODE:
props: {
  size: "xl",
  defaultValue: true,
  label: "Check me"
}

----------------------------------------

TITLE: Switch with Custom Loading Icon
DESCRIPTION: Demonstrates how to customize the loading icon of the Switch

LANGUAGE: vue
CODE:
props: {
  loading: true,
  loadingIcon: "i-lucide-repeat-2",
  defaultValue: true,
  label: "Check me"
}

----------------------------------------

TITLE: Adding Trailing Icon to Textarea in Vue
DESCRIPTION: Shows how to add a trailing icon to the Textarea using the trailingIcon prop.

LANGUAGE: vue
CODE:
<UTextarea trailingIcon="i-lucide-at-sign" placeholder="Enter your email" size="md" :rows="1" />

----------------------------------------

TITLE: PinInput with OTP Functionality in Vue
DESCRIPTION: Demonstrates enabling One-Time Password functionality for automatic OTP detection and filling.

LANGUAGE: vue
CODE:
<template>
  <PinInput :otp="true" />
</template>

----------------------------------------

TITLE: Switch with Label
DESCRIPTION: Example of adding a label to the Switch component

LANGUAGE: vue
CODE:
props: {
  label: "Check me"
}

----------------------------------------

TITLE: Rendering FormField with Required Label in Vue
DESCRIPTION: This example shows how to use the FormField component with a required prop, which adds an asterisk next to the label.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" />

----------------------------------------

TITLE: PinInput with Custom Length in Vue
DESCRIPTION: Shows how to change the number of input fields using the length prop.

LANGUAGE: vue
CODE:
<template>
  <PinInput :length="6" />
</template>

----------------------------------------

TITLE: Generating Type Stubs for Nuxt UI
DESCRIPTION: Command to generate TypeScript type stubs for Nuxt UI development.

LANGUAGE: sh
CODE:
pnpm run dev:prepare

----------------------------------------

TITLE: PinInput with Subtle Variant in Vue
DESCRIPTION: Demonstrates using the subtle variant for the PinInput component.

LANGUAGE: vue
CODE:
<template>
  <PinInput color="neutral" variant="subtle" :highlight="false" placeholder="‚óã" />
</template>

----------------------------------------

TITLE: Required Checkbox with Label in Vue
DESCRIPTION: Demonstrates how to create a required Checkbox with a label, which adds an asterisk next to the label.

LANGUAGE: vue
CODE:
<Checkbox :required="true" label="Check me" />

----------------------------------------

TITLE: PinInput with Custom Color in Vue
DESCRIPTION: Shows how to change the ring color of the PinInput when focused.

LANGUAGE: vue
CODE:
<template>
  <PinInput color="neutral" :highlight="true" placeholder="‚óã" />
</template>

----------------------------------------

TITLE: Vertical Separator Usage in Vue
DESCRIPTION: Shows how to use the Separator component with vertical orientation.

LANGUAGE: vue
CODE:
<template>
  <Separator orientation="vertical" class="h-48" />
</template>

----------------------------------------

TITLE: Select with Object Items in Vue
DESCRIPTION: Shows how to use the Select component with an array of object items, including label and value properties.

LANGUAGE: vue
CODE:
<template>
  <Select v-model="modelValue" :items="items" class="w-48" />
</template>

<script setup>
const modelValue = ref('backlog')
const items = [
  { label: 'Backlog', value: 'backlog' },
  { label: 'Todo', value: 'todo' },
  { label: 'In Progress', value: 'in_progress' },
  { label: 'Done', value: 'done' }
]
</script>

----------------------------------------

TITLE: PinInput with Extra Large Size in Vue
DESCRIPTION: Shows how to change the size of the PinInput to extra large.

LANGUAGE: vue
CODE:
<template>
  <PinInput size="xl" placeholder="‚óã" />
</template>

----------------------------------------

TITLE: Starting Vue Components Playground Development
DESCRIPTION: Command to start the development server for Vue components playground in Nuxt UI.

LANGUAGE: sh
CODE:
pnpm run dev:vue

----------------------------------------

TITLE: Icon Separator in Vue
DESCRIPTION: Shows how to add an icon to the Separator component.

LANGUAGE: vue
CODE:
<template>
  <Separator icon="i-simple-icons-nuxtdotjs" />
</template>

----------------------------------------

TITLE: Tree Item Type Definition in TypeScript
DESCRIPTION: Type definitions for Tree component item properties including icon, label, trailing icon, expansion state, and event handlers.

LANGUAGE: typescript
CODE:
icon?: string
label?: string
trailingIcon?: string
defaultExpanded?: boolean
disabled?: boolean
value?: string
slot?: string
children?: TreeItem[]
onToggle?(e: Event): void
onSelect?(e?: Event): void

----------------------------------------

TITLE: Hover Mode Popover Implementation
DESCRIPTION: Shows how to configure a Popover to trigger on hover instead of click, using the mode prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="size-48 m-4 inline-flex" />

----------------------------------------

TITLE: Rendering FormField with Hint in Vue
DESCRIPTION: This example demonstrates how to use the FormField component with a hint prop to display a hint message next to the label.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" />

----------------------------------------

TITLE: Configuring Nuxt UI Vite Plugin in vite.config.ts
DESCRIPTION: Adding the Nuxt UI Vite plugin to the Vite configuration file for proper setup in a Vue project.

LANGUAGE: ts
CODE:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui()
  ]
})

----------------------------------------

TITLE: Progress Bar with Max Value - Vue
DESCRIPTION: Implementation showing how to set a maximum value for the progress bar using the max prop.

LANGUAGE: vue
CODE:
v-model="3"
max="4"

----------------------------------------

TITLE: Configuring VSCode for Nuxt UI Development
DESCRIPTION: JSON configuration for VSCode to enable auto-fix and formatting using ESLint when saving code in Nuxt UI development.

LANGUAGE: json
CODE:
{
  "editor.codeActionsOnSave": {
    "source.fixAll": false,
    "source.fixAll.eslint": true
  }
}

----------------------------------------

TITLE: Rendering FormField with Custom Size in Vue
DESCRIPTION: This snippet demonstrates how to use the FormField component with a size prop to change the size of the FormField and its form control.

LANGUAGE: vue
CODE:
<UInput placeholder="Enter your email" class="w-full" />

----------------------------------------

TITLE: Updating tsconfig.app.json for Auto-generated Type Declarations
DESCRIPTION: Configuration to include auto-generated type declaration files in the TypeScript compiler options.

LANGUAGE: json
CODE:
{
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue", "auto-imports.d.ts", "components.d.ts"]
}

----------------------------------------

TITLE: Colored Progress Bar - Vue
DESCRIPTION: Implementation showing how to change the color of the progress bar.

LANGUAGE: vue
CODE:
color="neutral"

----------------------------------------

TITLE: Alert with Custom Color - Vue
DESCRIPTION: Shows how to customize the Alert color using the color prop set to neutral.

LANGUAGE: vue
CODE:
props:
  color: neutral
  title: 'Heads up!'
  description: 'You can change the primary color in your app config.'
  icon: 'i-lucide-terminal'

----------------------------------------

TITLE: Select with Custom Icon and Color
DESCRIPTION: Shows how to customize the Select component with a custom icon and color.

LANGUAGE: vue
CODE:
<template>
  <Select
    v-model="modelValue"
    :items="items"
    icon="i-lucide-search"
    color="neutral"
    highlight
    class="w-48"
  />
</template>

<script setup>
const modelValue = ref('Backlog')
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>

----------------------------------------

TITLE: Inverted Progress Bar - Vue
DESCRIPTION: Implementation of an inverted progress bar for different visual presentation.

LANGUAGE: vue
CODE:
inverted="true"
v-model="25"

----------------------------------------

TITLE: Alert with Custom Variant - Vue
DESCRIPTION: Demonstrates using a subtle variant style for the Alert component.

LANGUAGE: vue
CODE:
props:
  color: neutral
  variant: subtle
  title: 'Heads up!'
  description: 'You can change the primary color in your app config.'
  icon: 'i-lucide-terminal'

----------------------------------------

TITLE: RadioGroup with Object Items in Vue
DESCRIPTION: Shows how to use the RadioGroup component with an array of object items, including labels, descriptions, and values. This allows for more detailed option presentation.

LANGUAGE: vue
CODE:
<template>
  <URadioGroup
    v-model="modelValue"
    :items="items"
  />
</template>

<script setup>
const modelValue = ref('system')
const items = [
  { label: 'System', description: 'This is the first option.', value: 'system' },
  { label: 'Light', description: 'This is the second option.', value: 'light' },
  { label: 'Dark', description: 'This is the third option.', value: 'dark' }
]
</script>

----------------------------------------

TITLE: Multiple Selection SelectMenu
DESCRIPTION: Example of SelectMenu with multiple selection enabled

LANGUAGE: vue
CODE:
<SelectMenu
  v-model="modelValue"
  :items="['Backlog', 'Todo', 'In Progress', 'Done']"
  multiple
  class="w-48"
/>

----------------------------------------

TITLE: Customizing Checkbox Icon in Vue
DESCRIPTION: Shows how to customize the icon of the Checkbox when it is checked using the icon prop.

LANGUAGE: vue
CODE:
<Checkbox icon="i-lucide-heart" :default-value="true" label="Check me" />

----------------------------------------

TITLE: InputMenu with Object Items
DESCRIPTION: Demonstrates using InputMenu with an array of objects containing label properties.

LANGUAGE: vue
CODE:
<template>
  <InputMenu
    v-model="modelValue"
    :items="[{ label: 'Backlog' }, { label: 'Todo' }, { label: 'In Progress' }, { label: 'Done' }]"
  />
</template>

----------------------------------------

TITLE: Dashed Separator in Vue
DESCRIPTION: Demonstrates how to change the type of the Separator to dashed.

LANGUAGE: vue
CODE:
<template>
  <Separator type="dashed" />
</template>

----------------------------------------

TITLE: Changing Checkbox Color in Vue
DESCRIPTION: Demonstrates how to change the color of the Checkbox using the color prop.

LANGUAGE: vue
CODE:
<Checkbox color="neutral" :default-value="true" label="Check me" />

----------------------------------------

TITLE: Configuring Toast with Description
DESCRIPTION: Demonstrates adding both title and description to a toast notification

LANGUAGE: vue
CODE:
toast.add({
  title: 'Uh oh! Something went wrong.',
  description: 'There was a problem with your request.'
})

----------------------------------------

TITLE: Changing Slideover Close Icon in Vue
DESCRIPTION: Shows how to change the close icon of the Slideover component using the 'closeIcon' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full"}

----------------------------------------

TITLE: InputNumber with Min/Max Constraints
DESCRIPTION: Implementation of InputNumber with minimum and maximum value constraints.

LANGUAGE: vue
CODE:
<template>
  <InputNumber v-model="modelValue" :min="0" :max="10" />
</template>

----------------------------------------

TITLE: Positioned Tooltip with Custom Content
DESCRIPTION: Shows tooltip with custom positioning and alignment options using the content prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

----------------------------------------

TITLE: Slider with Step Value
DESCRIPTION: Setting the increment step value for the slider movement.

LANGUAGE: vue
CODE:
props:
  step: 10
  defaultValue: 50

----------------------------------------

TITLE: InputNumber with Custom Step Value
DESCRIPTION: InputNumber configuration with custom step increment value.

LANGUAGE: vue
CODE:
<template>
  <InputNumber v-model="modelValue" :step="2" />
</template>

----------------------------------------

TITLE: Updating Overlay Usage
DESCRIPTION: Update modal and slideover usage to use the new useOverlay composable.

LANGUAGE: diff
CODE:
<script setup lang="ts">
import { ModalExampleComponent } from '#components'

- const modal = useModal()
+ const overlay = useOverlay()

- modal.open(ModalExampleComponent)
+ const modal = overlay.create(ModalExampleComponent)
</script>

----------------------------------------

TITLE: Extra Large Slider
DESCRIPTION: Implementing a larger sized slider using the size prop.

LANGUAGE: vue
CODE:
props:
  size: xl
  defaultValue: 50

----------------------------------------

TITLE: Basic Kbd Component Usage
DESCRIPTION: Shows how to use the basic Kbd component with a default slot to display a keyboard key 'K'.

LANGUAGE: vue
CODE:
---
slots:
  default: K
---

----------------------------------------

TITLE: Defining TypeScript Types for Accordion Items
DESCRIPTION: TypeScript type definitions for accordion item properties including label, icon, content and other configurable options.

LANGUAGE: typescript
CODE:
label?: string
icon?: string
trailingIcon?: string
content?: string
value?: string
disabled?: boolean
slot?: string

----------------------------------------

TITLE: Inverted Slider
DESCRIPTION: Creating a visually inverted slider component.

LANGUAGE: vue
CODE:
props:
  inverted: true
  defaultValue: 25

----------------------------------------

TITLE: Hiding Navigation Controls in Vue Pagination
DESCRIPTION: Demonstrates how to hide the first, prev, next, and last buttons using the showControls prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :show-controls="false" :show-edges="true" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Enabling Corepack for Nuxt UI Development
DESCRIPTION: Command to enable Corepack for managing package managers in Nuxt UI development.

LANGUAGE: sh
CODE:
corepack enable

----------------------------------------

TITLE: Switch with Custom Icons
DESCRIPTION: Example of customizing the Switch appearance with different icons for checked and unchecked states

LANGUAGE: vue
CODE:
props: {
  uncheckedIcon: "i-lucide-x",
  checkedIcon: "i-lucide-check",
  defaultValue: true,
  label: "Check me"
}

----------------------------------------

TITLE: Customizing Variant in Vue Pagination
DESCRIPTION: Demonstrates how to change the variant of inactive controls using the variant prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" color="neutral" variant="subtle" :total="100" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Setting Locale in Nuxt UI App Component
DESCRIPTION: This snippet demonstrates how to set the locale for a Nuxt UI application using the App component. It imports a locale from @nuxt/ui/locale and passes it to the UApp component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { fr } from '@nuxt/ui/locale'
</script>

<template>
  <UApp :locale="fr">
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Loading Switch
DESCRIPTION: Shows how to display a loading state on the Switch component

LANGUAGE: vue
CODE:
props: {
  loading: true,
  defaultValue: true,
  label: "Check me"
}

----------------------------------------

TITLE: Disabling Vue Pagination
DESCRIPTION: Demonstrates how to disable the pagination controls using the disabled prop.

LANGUAGE: vue
CODE:
<template>
  <UPagination v-model:page="page" :total="100" :disabled="true" />
</template>

<script setup>
const page = ref(5)
</script>

----------------------------------------

TITLE: Menu Items Shortcut Extraction
DESCRIPTION: Shows how to extract and define shortcuts from menu items using the extractShortcuts utility.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const items = [{
  label: 'Save',
  icon: 'i-lucide-file-down',
  kbds: ['meta', 'S'],
  onSelect() {
    save()
  }
}, {
  label: 'Copy',
  icon: 'i-lucide-copy',
  kbds: ['meta', 'C'],
  onSelect() {
    copy()
  }
}]

defineShortcuts(extractShortcuts(items))
</script>

----------------------------------------

TITLE: Colored Switch
DESCRIPTION: Example of changing the Switch color using the color prop

LANGUAGE: vue
CODE:
props: {
  color: "neutral",
  defaultValue: true,
  label: "Check me"
}

----------------------------------------

TITLE: Delayed Hover Popover Configuration
DESCRIPTION: Implements a Popover with custom open and close delay timings in hover mode.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="size-48 m-4 inline-flex" />

----------------------------------------

TITLE: Vue I18n Package Installation
DESCRIPTION: Command line instructions for installing Vue I18n package using different package managers.

LANGUAGE: bash
CODE:
pnpm add vue-i18n@10

----------------------------------------

TITLE: Disabled Switch
DESCRIPTION: Demonstrates how to create a disabled Switch component

LANGUAGE: vue
CODE:
props: {
  disabled: true,
  label: "Check me"
}

----------------------------------------

TITLE: Popover with Arrow Indicator
DESCRIPTION: Shows implementation of a Popover with a visual arrow indicator pointing to the trigger element.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#content
<Placeholder class="size-48 m-4 inline-flex" />

----------------------------------------

TITLE: Basic Accordion Usage with Items Props
DESCRIPTION: Example showing basic accordion implementation with icons, colors, and components as items.

LANGUAGE: typescript
CODE:
items: [
  {
    label: 'Icons',
    icon: 'i-lucide-smile',
    content: 'You have nothing to do, @nuxt/icon will handle it automatically.'
  },
  {
    label: 'Colors',
    icon: 'i-lucide-swatch-book',
    content: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
  },
  {
    label: 'Components',
    icon: 'i-lucide-box',
    content: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
  }
]

----------------------------------------

TITLE: Changing Textarea Variant in Vue
DESCRIPTION: Demonstrates how to change the variant of the Textarea using the variant prop.

LANGUAGE: vue
CODE:
<UTextarea color="neutral" variant="subtle" :highlight="false" placeholder="Type something..." />

----------------------------------------

TITLE: Slideover with Description in Vue
DESCRIPTION: Illustrates adding a description to the Slideover component using the 'description' prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

#body
:placeholder{class="h-full"}

----------------------------------------

TITLE: Customizing Loading Icon for Textarea in Vue
DESCRIPTION: Demonstrates how to customize the loading icon for the Textarea using the loadingIcon prop.

LANGUAGE: vue
CODE:
<UTextarea :loading="true" loadingIcon="i-lucide-repeat-2" placeholder="Search..." :rows="1" />

----------------------------------------

TITLE: Input Focus Handling with Shortcuts
DESCRIPTION: Demonstrates how to handle shortcuts with input focus, including specific input targeting and global input handling.

LANGUAGE: vue
CODE:
<template>
  <UInput v-model="query" name="queryInput" />
</template>

<script setup lang="ts">
const query = ref('')

defineShortcuts({
  enter: {
    usingInput: 'queryInput',
    handler: () => performSearch()
  },
  escape: {
    usingInput: true,
    handler: () => clearSearch()
  }
})
</script>

----------------------------------------

TITLE: Adding Icons to Toast
DESCRIPTION: Shows how to include an icon in a toast notification using the icon field

LANGUAGE: vue
CODE:
toast.add({
  icon: 'i-lucide-wifi'
})

----------------------------------------

TITLE: Importing Tailwind CSS in main.css
DESCRIPTION: Create a main.css file and import Tailwind CSS. This file should then be imported in the Nuxt configuration.

LANGUAGE: css
CODE:
@import "tailwindcss";

LANGUAGE: ts
CODE:
export default defineNuxtConfig({
  css: ['~/assets/css/main.css']
})

----------------------------------------

TITLE: Tooltip with Keyboard Shortcuts
DESCRIPTION: Shows how to implement tooltips with keyboard shortcut indicators using the kbds prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

----------------------------------------

TITLE: Installing Nuxt UI v3
DESCRIPTION: Install the latest version of Nuxt UI using your preferred package manager.

LANGUAGE: bash
CODE:
pnpm add @nuxt/ui

LANGUAGE: bash
CODE:
yarn add @nuxt/ui

LANGUAGE: bash
CODE:
npm install @nuxt/ui

LANGUAGE: bash
CODE:
bun add @nuxt/ui

----------------------------------------

TITLE: Tooltip with Arrow Indicator
DESCRIPTION: Implements tooltip with a visual arrow indicator using the arrow prop.

LANGUAGE: vue
CODE:
<UButton label="Open" color="neutral" variant="subtle" />

----------------------------------------

TITLE: Importing Nuxt UI in CSS
DESCRIPTION: Import Nuxt UI in your main CSS file after Tailwind CSS.

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui";

----------------------------------------

TITLE: Wrapping App with UApp Component
DESCRIPTION: Wrap your Nuxt application with the UApp component for proper functionality.

LANGUAGE: vue
CODE:
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Updating Color Classes
DESCRIPTION: Update color classes to use the new neutral palette instead of gray.

LANGUAGE: diff
CODE:
<template>
- <p class="text-gray-500 dark:text-gray-400" />
+ <p class="text-neutral-500 dark:text-neutral-400" />
</template>

----------------------------------------

TITLE: Displaying Icon Using Icon Component in Vue
DESCRIPTION: Demonstrates how to use the Icon component with a 'name' prop to display an icon from the Iconify collection.

LANGUAGE: vue
CODE:
<Icon name="i-lucide-lightbulb" class="size-5" />

----------------------------------------

TITLE: Updating Button Color Props
DESCRIPTION: Update button color props to use the new color aliases instead of Tailwind CSS colors.

LANGUAGE: diff
CODE:
- <UButton color="black" />
+ <UButton color="neutral" />

- <UButton color="gray" />
+ <UButton color="neutral" variant="subtle" />

- <UButton color="white" />
+ <UButton color="neutral" variant="outline" />

----------------------------------------

TITLE: Implementing Color Mode Toggle Button in Vue
DESCRIPTION: This snippet demonstrates how to create a button component that toggles between light and dark modes using the useColorMode composable from @nuxtjs/color-mode.

LANGUAGE: vue
CODE:
<script setup>
const colorMode = useColorMode()

const isDark = computed({
  get() {
    return colorMode.value === 'dark'
  },
  set() {
    colorMode.preference = colorMode.value === 'dark' ? 'light' : 'dark'
  }
})
</script>

<template>
  <ClientOnly v-if="!colorMode?.forced">
    <UButton
      :icon="isDark ? 'i-lucide-moon' : 'i-lucide-sun'"
      color="neutral"
      variant="ghost"
      @click="isDark = !isDark"
    />

    <template #fallback>
      <div class="size-8" />
    </template>
  </ClientOnly>
</template>

----------------------------------------

TITLE: Updating Toast Usage
DESCRIPTION: Update toast usage to use the new duration prop instead of timeout.

LANGUAGE: diff
CODE:
<script setup lang="ts">
const toast = useToast()

- toast.add({ title: 'Invitation sent', timeout: 0 })
+ toast.add({ title: 'Invitation sent', duration: 0 })
</script>

----------------------------------------

TITLE: Configuring Color Mode in Vite for Nuxt UI
DESCRIPTION: Vite configuration to disable the color mode plugin in Nuxt UI. Shows how to set up the UI plugin with custom color mode settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      colorMode: false
    })
  ]
})

----------------------------------------

TITLE: Installing Iconify Collections with Package Managers
DESCRIPTION: Commands for installing Iconify icon collections using different package managers (pnpm, yarn, npm).

LANGUAGE: bash
CODE:
pnpm i @iconify-json/{collection_name}

LANGUAGE: bash
CODE:
yarn add @iconify-json/{collection_name}

LANGUAGE: bash
CODE:
npm install @iconify-json/{collection_name}

----------------------------------------

TITLE: Configuring Color Mode in Vite for Nuxt UI Pro
DESCRIPTION: Vite configuration to disable the color mode plugin in Nuxt UI Pro. Shows how to set up the UI Pro plugin with custom color mode settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import uiPro from '@nuxt/ui-pro/vite'

export default defineConfig({
  plugins: [
    vue(),
    uiPro({
      colorMode: false
    })
  ]
})

----------------------------------------

TITLE: Configuring Fonts in Nuxt UI Pro CSS
DESCRIPTION: CSS configuration for setting up fonts in a Nuxt UI Pro application. Imports required dependencies and defines the sans-serif font family using Public Sans.

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui-pro";

@theme {
  --font-sans: 'Public Sans', sans-serif;
}

----------------------------------------

TITLE: Linking Nuxt UI CLI to Global Environment
DESCRIPTION: Command to link the Nuxt UI CLI to the global environment for easier access to development tools.

LANGUAGE: sh
CODE:
npm link

----------------------------------------

TITLE: Disabling Fonts Module in Nuxt Config
DESCRIPTION: TypeScript configuration to disable the @nuxt/fonts module in the Nuxt application configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  ui: {
    fonts: false
  }
})

----------------------------------------

TITLE: Creating New Nuxt UI Components Using CLI
DESCRIPTION: Examples of using the Nuxt UI CLI to generate new components with various options.

LANGUAGE: sh
CODE:
# Create a basic component
nuxt-ui make component my-component

# Create a pro component
nuxt-ui make component page-section --pro

# Create a pro prose component
nuxt-ui make component heading --pro --prose

# Create a pro content component
nuxt-ui make component block --pro --content

# Generate only documentation template
nuxt-ui make component my-component --template=docs

----------------------------------------

TITLE: Defining Custom Locale in Nuxt UI
DESCRIPTION: This code shows how to define a custom locale using the defineLocale function in Nuxt UI. It creates a locale object with name, code, direction, and messages.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import type { Messages } from '@nuxt/ui'

const locale = defineLocale<Messages>({
  name: 'My custom locale',
  code: 'en',
  dir: 'ltr',
  messages: {
    // implement pairs
  }
})
</script>

<template>
  <UApp :locale="locale">
    <NuxtPage />
  </UApp>
</template>

----------------------------------------

TITLE: Creating New Locales for Nuxt UI
DESCRIPTION: Command to generate new locales for Nuxt UI using the CLI.

LANGUAGE: sh
CODE:
nuxt-ui make locale --code <code> --name <name>

----------------------------------------

TITLE: Dynamic Direction and Language Implementation
DESCRIPTION: Implementation of dynamic HTML direction and language attributes using Vue I18n and useHead composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { computed } from 'vue'
import { useI18n } from 'vue-i18n'
import { useHead } from '@unhead/vue'
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()

const lang = computed(() => locales[locale.value].code)
const dir = computed(() => locales[locale.value].dir)

useHead({
  htmlAttrs: {
    lang,
    dir
  }
})
</script>

<template>
  <UApp :locale="locales[locale]">
    <RouterView />
  </UApp>
</template>

----------------------------------------

TITLE: Cloning Nuxt UI Repository
DESCRIPTION: Command to clone the Nuxt UI repository for local development.

LANGUAGE: sh
CODE:
git clone -b v3 https://github.com/nuxt/ui.git

----------------------------------------

TITLE: Importing Tailwind CSS and Nuxt UI in CSS
DESCRIPTION: Import Tailwind CSS and Nuxt UI in the main CSS file and configure it in nuxt.config.ts.

LANGUAGE: css
CODE:
@import "tailwindcss";
@import "@nuxt/ui";

LANGUAGE: ts
CODE:
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css']
})

----------------------------------------

TITLE: Starting Nuxt UI Documentation Development
DESCRIPTION: Command to start the development server for Nuxt UI documentation.

LANGUAGE: sh
CODE:
pnpm run docs

----------------------------------------

TITLE: Configuring VSCode for Tailwind CSS IntelliSense
DESCRIPTION: VSCode settings for Tailwind CSS IntelliSense extension to improve development experience.

LANGUAGE: json
CODE:
{
  "files.associations": {
    "*.css": "tailwindcss"
  },
  "editor.quickSuggestions": {
    "strings": "on"
  },
  "tailwindCSS.classAttributes": ["class", "ui"],
  "tailwindCSS.experimental.classRegex": [
    ["ui:\\s*{([^)]*)\\s*}", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ]
}

----------------------------------------

TITLE: TypeScript Interface Definition for Shortcut Configuration
DESCRIPTION: Defines the TypeScript interface for shortcut configuration objects, specifying handler and input focus options.

LANGUAGE: typescript
CODE:
interface ShortcutConfig {
  handler: () => void
  usingInput?: boolean | string
}

----------------------------------------

TITLE: Using Continuous Preview Releases in package.json
DESCRIPTION: Example of how to use continuous preview releases by replacing the package version with a specific commit hash or PR number.

LANGUAGE: json
CODE:
{
  "dependencies": {
-   "@nuxt/ui": "^3.0.0",
+   "@nuxt/ui": "https://pkg.pr.new/@nuxt/ui@4c96909",
  }
}

----------------------------------------

TITLE: Basic Shortcuts Example with Multiple Bindings
DESCRIPTION: Shows how to define multiple shortcuts including help modal, command palette, and dashboard navigation.

LANGUAGE: vue
CODE:
<script setup lang="ts">
defineShortcuts({
  '?': () => openHelpModal(),
  'meta_k': () => openCommandPalette(),
  'g-d': () => navigateToDashboard()
})
</script>

----------------------------------------

TITLE: Displaying Nuxt UI Documentation Folder Structure
DESCRIPTION: Shows the folder structure of the Nuxt UI documentation, highlighting key directories and files.

LANGUAGE: bash
CODE:
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ content/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ examples   # Components used in documentation as examples
‚îÇ   ‚îú‚îÄ‚îÄ composables/
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ content/
‚îÇ   ‚îú‚îÄ‚îÄ 1.getting-started
‚îÇ   ‚îú‚îÄ‚îÄ 2.composables
‚îÇ   ‚îî‚îÄ‚îÄ 3.components       # Components documentation

----------------------------------------

TITLE: Complete useOverlay Implementation Example
DESCRIPTION: Comprehensive example showing multiple modals and slidesovers with prop passing and async operations.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const overlay = useOverlay()

// Create with default props
const modalA = overlay.create(ModalA, { title: 'Welcome' })
const modalB = overlay.create(modalB)

const slideoverA = overlay.create(SlideoverA)

const openModalA = () => {
  // Open  Modal A, but override the title prop
  modalA.open({ title: 'Hello' })
}

const openModalB = async () => {
  // Open modalB, and wait for its result
  const input = await modalB.open()

  // Pass the result from modalB to the slideover, and open it.
  slideoverA.open({ input })
}
</script>

<template>
  <div>
    <button @click="openModal">Open Modal</button>
  </div>
</template>

----------------------------------------

TITLE: Installing Dependencies for Nuxt UI
DESCRIPTION: Command to install project dependencies for Nuxt UI development using pnpm.

LANGUAGE: sh
CODE:
pnpm install

----------------------------------------

TITLE: Specifying Global User-Agent Rule in robots.txt
DESCRIPTION: This snippet defines a global rule for all user agents in a robots.txt file. It sets up the foundation for specifying crawling permissions, but doesn't include any specific allow or disallow directives.

LANGUAGE: robots.txt
CODE:
user-agent: *


----------------------------------------

TITLE: Starting Nuxt UI Playground Development
DESCRIPTION: Command to start the development server for Nuxt UI playground.

LANGUAGE: sh
CODE:
pnpm run dev