TITLE: MySQL Data Source Configuration Example
DESCRIPTION: Example configuration for TypeORM MySQL data source showing common options including connection details, logging, synchronization, and entity/migration paths.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    logging: true,
    synchronize: true,
    entities: [
        "entity/*.js"
    ],
    subscribers: [
        "subscriber/*.js"
    ],
    entitySchemas: [
        "schema/*.json"
    ],
    migrations: [
        "migration/*.js"
    ]
}

----------------------------------------

TITLE: Configuring TypeORM Connection
DESCRIPTION: Example of how to configure a database connection using TypeORM in TypeScript.

LANGUAGE: TypeScript
CODE:
import "reflect-metadata"
import { createConnection } from "typeorm"
import { Photo } from "./entity/Photo"

createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "admin",
    database: "test",
    entities: [Photo],
    synchronize: true,
    logging: false
}).then(connection => {
    // Here you can start to work with your entities
}).catch(error => console.log(error))

----------------------------------------

TITLE: Defining Entity Model in TypeScript
DESCRIPTION: Example of defining a TypeORM entity model for a User class with decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    age: number
}

----------------------------------------

TITLE: Executing Transactions in TypeORM
DESCRIPTION: Demonstrates how to execute multiple database operations within a single transaction.

LANGUAGE: typescript
CODE:
await dataSource.transaction(async (manager) => {
    // NOTE: you must perform all database operations using given manager instance
    // its a special instance of EntityManager working with this transaction
    // and don't forget to await things here
})

----------------------------------------

TITLE: Defining an Entity in TypeORM
DESCRIPTION: Example of how to define a basic entity (database table) using TypeORM decorators in TypeScript.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    age: number
}

----------------------------------------

TITLE: Performing Database Operations with Repository in TypeScript
DESCRIPTION: Example of using TypeORM repository to save, find, and remove User entities.

LANGUAGE: typescript
CODE:
const userRepository = MyDataSource.getRepository(User)

const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.age = 25
await userRepository.save(user)

const allUsers = await userRepository.find()
const firstUser = await userRepository.findOneBy({
    id: 1,
})
const timber = await userRepository.findOneBy({
    firstName: "Timber",
    lastName: "Saw",
})

await userRepository.remove(timber)

----------------------------------------

TITLE: Executing Transactions in TypeORM
DESCRIPTION: Demonstrates how to execute multiple database operations within a single transaction using the EntityManager's transaction method.

LANGUAGE: typescript
CODE:
await manager.transaction(async (manager) => {
    // NOTE: you must perform all database operations using the given manager instance
    // it's a special instance of EntityManager working with this transaction
    // and don't forget to await things here
})

----------------------------------------

TITLE: Using Special Columns in TypeORM
DESCRIPTION: Demonstrates the usage of special columns like CreateDateColumn and UpdateDateColumn in TypeORM entities.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, VersionColumn } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @CreateDateColumn()
    createdAt: Date

    @UpdateDateColumn()
    updatedAt: Date

    @DeleteDateColumn()
    deletedAt: Date

    @VersionColumn()
    version: number
}

----------------------------------------

TITLE: Creating a Single Database Connection with TypeORM in TypeScript
DESCRIPTION: Demonstrates how to create a single database connection using the createConnection function from TypeORM. It includes connection parameters for a MySQL database.

LANGUAGE: typescript
CODE:
import { createConnection, Connection } from "typeorm"

const connection = await createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
})

----------------------------------------

TITLE: Executing Multiple Operations in a TypeORM Transaction
DESCRIPTION: Illustrates how to perform multiple database operations within a single transaction in TypeORM. It emphasizes the importance of using the provided transactional entity manager for all operations.

LANGUAGE: typescript
CODE:
await myDataSource.manager.transaction(async (transactionalEntityManager) => {
    await transactionalEntityManager.save(users)
    await transactionalEntityManager.save(photos)
    // ...
})

----------------------------------------

TITLE: Initializing Basic TypeORM DataSource in TypeScript
DESCRIPTION: Creates and initializes a basic MySQL DataSource instance with connection configuration. Shows how to handle successful connection and error cases using Promise callbacks.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const AppDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
})

AppDataSource.initialize()
    .then(() => {
        console.log("Data Source has been initialized!")
    })
    .catch((err) => {
        console.error("Error during Data Source initialization", err)
    })

----------------------------------------

TITLE: Defining a Basic Entity in TypeORM
DESCRIPTION: Demonstrates how to create a basic entity class with primary and regular columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    isActive: boolean
}

----------------------------------------

TITLE: Implementing Entity Listeners in TypeORM
DESCRIPTION: Shows how to use lifecycle hooks like @BeforeInsert and @AfterUpdate to execute custom logic during entity operations.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
    @BeforeInsert()
    updateDates() {
        this.createdDate = new Date()
    }

    @AfterUpdate()
    updateCounters() {
        this.counter = 0
    }
}

----------------------------------------

TITLE: Performing Basic Database Operations with TypeORM
DESCRIPTION: Demonstrates how to perform basic database operations like saving, finding, and removing entities using TypeORM's repository methods.

LANGUAGE: TypeScript
CODE:
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.age = 25;
await repository.save(user);

const allUsers = await repository.find();
const firstUser = await repository.findOne(1); // find by id
const timber = await repository.findOne({ firstName: "Timber", lastName: "Saw" });

await repository.remove(timber);

----------------------------------------

TITLE: Manual Transaction Control with QueryRunner in TypeORM
DESCRIPTION: Shows how to use QueryRunner for manual control of database connections and transactions in TypeORM. It includes examples of connection establishment, query execution, transaction management, and proper resource release.

LANGUAGE: typescript
CODE:
// create a new query runner
const queryRunner = dataSource.createQueryRunner()

// establish real database connection using our new query runner
await queryRunner.connect()

// now we can execute any queries on a query runner, for example:
await queryRunner.query("SELECT * FROM users")

// we can also access entity manager that works with connection created by a query runner:
const users = await queryRunner.manager.find(User)

// lets now open a new transaction:
await queryRunner.startTransaction()

try {
    // execute some operations on this transaction:
    await queryRunner.manager.save(user1)
    await queryRunner.manager.save(user2)
    await queryRunner.manager.save(photos)

    // commit transaction now:
    await queryRunner.commitTransaction()
} catch (err) {
    // since we have errors let's rollback changes we made
    await queryRunner.rollbackTransaction()
} finally {
    // you need to release query runner which is manually created:
    await queryRunner.release()
}

----------------------------------------

TITLE: Manual Transaction Control with QueryRunner in TypeORM
DESCRIPTION: Shows how to use QueryRunner for manual control of database connections and transactions in TypeORM. It includes examples of connection establishment, query execution, transaction management, and proper resource release.

LANGUAGE: typescript
CODE:
// create a new query runner
const queryRunner = dataSource.createQueryRunner()

// establish real database connection using our new query runner
await queryRunner.connect()

// now we can execute any queries on a query runner, for example:
await queryRunner.query("SELECT * FROM users")

// we can also access entity manager that works with connection created by a query runner:
const users = await queryRunner.manager.find(User)

// lets now open a new transaction:
await queryRunner.startTransaction()

try {
    // execute some operations on this transaction:
    await queryRunner.manager.save(user1)
    await queryRunner.manager.save(user2)
    await queryRunner.manager.save(photos)

    // commit transaction now:
    await queryRunner.commitTransaction()
} catch (err) {
    // since we have errors let's rollback changes we made
    await queryRunner.rollbackTransaction()
} finally {
    // you need to release query runner which is manually created:
    await queryRunner.release()
}

----------------------------------------

TITLE: Save and Remove Operations in TypeORM
DESCRIPTION: Methods for saving and removing entities with transaction support.

LANGUAGE: typescript
CODE:
await repository.save(user)
await repository.save([category1, category2, category3])
await repository.remove(user)
await repository.remove([category1, category2, category3])

----------------------------------------

TITLE: Basic CRUD Operations with TypeORM Repository
DESCRIPTION: Example of how to perform basic CRUD (Create, Read, Update, Delete) operations using a TypeORM repository.

LANGUAGE: TypeScript
CODE:
const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.age = 25
await repository.save(user)

const allUsers = await repository.find()
const firstUser = await repository.findOne(1) // find by id
const timber = await repository.findOne({
    firstName: "Timber",
    lastName: "Saw",
})

await repository.remove(timber)

----------------------------------------

TITLE: Configuring Data Source with Entities in TypeORM
DESCRIPTION: Shows how to configure a TypeORM data source with entity classes or directories.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"
import { User } from "./entity/User"

const myDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [User],
})

----------------------------------------

TITLE: Defining Primary Columns in TypeORM
DESCRIPTION: Illustrates different ways to define primary columns in TypeORM entities.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryColumn, PrimaryGeneratedColumn } from "typeorm"

@Entity()
export class User {
    @PrimaryColumn()
    id: number
}

@Entity()
export class Post {
    @PrimaryGeneratedColumn()
    id: number
}

@Entity()
export class Message {
    @PrimaryGeneratedColumn("uuid")
    id: string
}

----------------------------------------

TITLE: Specifying Isolation Levels in TypeORM Transactions
DESCRIPTION: Demonstrates how to specify an isolation level when creating a transaction in TypeORM. The isolation level is provided as the first parameter to the transaction method.

LANGUAGE: typescript
CODE:
await myDataSource.manager.transaction(
    "SERIALIZABLE",
    (transactionalEntityManager) => {},
)

----------------------------------------

TITLE: Accessing DataSource and QueryRunner in TypeORM
DESCRIPTION: Examples of accessing the DataSource and QueryRunner instances from an EntityManager. The DataSource represents the database connection, while QueryRunner is used for transaction management.

LANGUAGE: typescript
CODE:
const dataSource = manager.dataSource
const queryRunner = manager.queryRunner

----------------------------------------

TITLE: Loading Related Entities Using Find Options in TypeORM
DESCRIPTION: Demonstrates how to load related entities using the find method with relations option specified.

LANGUAGE: typescript
CODE:
const userRepository = dataSource.getRepository(User)
const users = await userRepository.find({
    relations: {
        photos: true,
    },
})

// or from inverse side

const photoRepository = dataSource.getRepository(Photo)
const photos = await photoRepository.find({
    relations: {
        user: true,
    },
})

----------------------------------------

TITLE: Specifying Isolation Levels in TypeORM Transactions
DESCRIPTION: Demonstrates how to specify an isolation level when creating a transaction in TypeORM. The isolation level is provided as the first parameter to the transaction method.

LANGUAGE: typescript
CODE:
await myDataSource.manager.transaction(
    "SERIALIZABLE",
    (transactionalEntityManager) => {},
)

----------------------------------------

TITLE: Complete Express-TypeORM Integration
DESCRIPTION: Final implementation combining Express routes with TypeORM operations for full CRUD functionality.

LANGUAGE: typescript
CODE:
import * as express from "express"
import { Request, Response } from "express"
import { User } from "./entity/User"
import { myDataSource } from "./app-data-source.ts"

// establish database connection
myDataSource
    .initialize()
    .then(() => {
        console.log("Data Source has been initialized!")
    })
    .catch((err) => {
        console.error("Error during Data Source initialization:", err)
    })

// create and setup express app
const app = express()
app.use(express.json())

// register routes
app.get("/users", async function (req: Request, res: Response) {
    const users = await myDataSource.getRepository(User).find()
    res.json(users)
})

app.get("/users/:id", async function (req: Request, res: Response) {
    const results = await myDataSource.getRepository(User).findOneBy({
        id: req.params.id,
    })
    return res.send(results)
})

app.post("/users", async function (req: Request, res: Response) {
    const user = await myDataSource.getRepository(User).create(req.body)
    const results = await myDataSource.getRepository(User).save(user)
    return res.send(results)
})

app.put("/users/:id", async function (req: Request, res: Response) {
    const user = await myDataSource.getRepository(User).findOneBy({
        id: req.params.id,
    })
    myDataSource.getRepository(User).merge(user, req.body)
    const results = await myDataSource.getRepository(User).save(user)
    return res.send(results)
})

app.delete("/users/:id", async function (req: Request, res: Response) {
    const results = await myDataSource.getRepository(User).delete(req.params.id)
    return res.send(results)
})

// start express server
app.listen(3000)

----------------------------------------

TITLE: Performing Validation Before Save
DESCRIPTION: Example showing how to validate a Post entity instance using class-validator's validate function before saving to the database. Demonstrates error handling and conditional saving based on validation results.

LANGUAGE: typescript
CODE:
import { validate } from "class-validator"

let post = new Post()
post.title = "Hello" // should not pass
post.text = "this is a great post about hell world" // should not pass
post.rating = 11 // should not pass
post.email = "google.com" // should not pass
post.site = "googlecom" // should not pass

const errors = await validate(post)
if (errors.length > 0) {
    throw new Error(`Validation failed!`)
} else {
    await dataSource.manager.save(post)
}

----------------------------------------

TITLE: Executing Raw SQL Queries in TypeORM
DESCRIPTION: Shows how to execute raw SQL queries with different parameter syntaxes for various database drivers.

LANGUAGE: typescript
CODE:
const rawData = await dataSource.query(`SELECT * FROM USERS`)

// You can also use parameters to avoid SQL injection
// The syntax differs between the drivers

// aurora-mysql, better-sqlite3, capacitor, cordova, 
// expo, mariadb, mysql, nativescript, react-native, 
// sap, sqlite, sqljs
const rawData = await dataSource.query(
    'SELECT * FROM USERS WHERE name = ? and age = ?',
    [ 'John', 24 ]
)

// aurora-postgres, cockroachdb, postgres
const rawData = await dataSource.query(
    'SELECT * FROM USERS WHERE name = $1 and age = $2',
    ['John', 24]
)

// oracle
const rawData = await dataSource.query(
    'SELECT * FROM USERS WHERE name = :1 and age = :2',
    ['John', 24]
)

// spanner
const rawData = await dataSource.query(
    'SELECT * FROM USERS WHERE name = @param0 and age = @param1',
    [ 'John', 24 ]
)

// mssql
const rawData = await dataSource.query(
    'SELECT * FROM USERS WHERE name = @0 and age = @1',
    [ 'John', 24 ]
)

----------------------------------------

TITLE: Using Chunk Option in TypeORM Repository
DESCRIPTION: Shows how to use the chunk option when inserting a large number of entities to avoid driver parameter limit issues.

LANGUAGE: typescript
CODE:
// users contains an array of user entities
userRepository.insert(users, {chunk: users.length / 1000});

----------------------------------------

TITLE: Defining TypeORM Entity with Validation Decorators
DESCRIPTION: Example of a Post entity class using TypeORM decorators combined with class-validator decorators to enforce data validation rules. Demonstrates various validation constraints like length checks, email format, domain validation, and numeric ranges.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import {
    Contains,
    IsInt,
    Length,
    IsEmail,
    IsFQDN,
    IsDate,
    Min,
    Max,
} from "class-validator"

@Entity()
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    @Length(10, 20)
    title: string

    @Column()
    @Contains("hello")
    text: string

    @Column()
    @IsInt()
    @Min(0)
    @Max(10)
    rating: number

    @Column()
    @IsEmail()
    email: string

    @Column()
    @IsFQDN()
    site: string

    @Column()
    @IsDate()
    createDate: Date
}

----------------------------------------

TITLE: Advanced Query Operators in TypeORM
DESCRIPTION: Demonstrates usage of advanced query operators like Not, LessThan, MoreThan, Between, and others for complex queries.

LANGUAGE: typescript
CODE:
import { Not, MoreThan, Equal } from "typeorm"

const loadedPosts = await dataSource.getRepository(Post).findBy({
    likes: Not(MoreThan(10)),
    title: Not(Equal("About #2")),
})

LANGUAGE: sql
CODE:
SELECT * FROM "post" WHERE NOT("likes" > 10) AND NOT("title" = 'About #2')

----------------------------------------

TITLE: Advanced Query Operators in TypeORM
DESCRIPTION: Demonstrates usage of advanced query operators like Not, LessThan, MoreThan, Between, and others for complex queries.

LANGUAGE: typescript
CODE:
import { Not, MoreThan, Equal } from "typeorm"

const loadedPosts = await dataSource.getRepository(Post).findBy({
    likes: Not(MoreThan(10)),
    title: Not(Equal("About #2")),
})

LANGUAGE: sql
CODE:
SELECT * FROM "post" WHERE NOT("likes" > 10) AND NOT("title" = 'About #2')

----------------------------------------

TITLE: Accessing and Using EntityManager in TypeORM (TypeScript)
DESCRIPTION: Demonstrates how to access EntityManager through DataSource, find an entity by ID, modify its properties, and save changes. Shows the basic pattern for entity management operations in TypeORM.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"
import { User } from "./entity/User"

const myDataSource = new DataSource(/*...*/)
const user = await myDataSource.manager.findOneBy(User, {
    id: 1,
})
user.name = "Umed"
await myDataSource.manager.save(user)

----------------------------------------

TITLE: Complete QueryRunner Usage Example in TypeORM
DESCRIPTION: Comprehensive example showing the complete lifecycle of a QueryRunner instance, including creation, connection, executing queries using the EntityManager, and proper release.

LANGUAGE: typescript
CODE:
const queryRunner = dataSource.createQueryRunner()

// take a connection from the connection pool
await queryRunner.connect()

// use this particular connection to execute queries
const users = await queryRunner.manager.find(User)

// don't forget to release connection after you are done using it
await queryRunner.release()

----------------------------------------

TITLE: Accessing and Using EntityManager in TypeORM (TypeScript)
DESCRIPTION: Demonstrates how to access EntityManager through DataSource, find an entity by ID, modify its properties, and save changes. Shows the basic pattern for entity management operations in TypeORM.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"
import { User } from "./entity/User"

const myDataSource = new DataSource(/*...*/)
const user = await myDataSource.manager.findOneBy(User, {
    id: 1,
})
user.name = "Umed"
await myDataSource.manager.save(user)

----------------------------------------

TITLE: Implementing Active Record Pattern in TypeORM
DESCRIPTION: Demonstrates how to create an Active Record entity by extending BaseEntity. The example shows a User entity with basic properties and built-in database operations.

LANGUAGE: typescript
CODE:
import { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class User extends BaseEntity {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  isActive: boolean;
}

----------------------------------------

TITLE: Configuring TypeORM Data Source in TypeScript
DESCRIPTION: Example of setting up a TypeORM DataSource with connection options for PostgreSQL.

LANGUAGE: typescript
CODE:
export const AppDataSource = new DataSource({
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test",
    password: "test",
    database: "test",
    synchronize: true,
    logging: true,
    entities: [Post, Category],
    subscribers: [],
    migrations: [],
})

----------------------------------------

TITLE: Using Repository Methods with Data Mapper in TypeORM
DESCRIPTION: Demonstrates common Data Mapper operations using repository methods for saving, removing, and querying entities.

LANGUAGE: typescript
CODE:
const userRepository = dataSource.getRepository(User)

// example how to save DM entity
const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.isActive = true
await userRepository.save(user)

// example how to remove DM entity
await userRepository.remove(user)

// example how to load DM entities
const users = await userRepository.find({ skip: 2, take: 5 })
const newUsers = await userRepository.findBy({ isActive: true })
const timber = await userRepository.findOneBy({
    firstName: "Timber",
    lastName: "Saw",
})

----------------------------------------

TITLE: Initializing DataSource in TypeORM
DESCRIPTION: Demonstrates how to initialize a DataSource and open a connection pool to the database.

LANGUAGE: typescript
CODE:
await dataSource.initialize()

----------------------------------------

TITLE: Accessing and Using TypeORM Repository in TypeScript
DESCRIPTION: This snippet demonstrates how to access a TypeORM repository for a User entity, fetch a user by ID, modify its name, and save the changes. It showcases the basic operations of findOne() and save() methods.

LANGUAGE: typescript
CODE:
import { getRepository } from "typeorm";
import { User } from "./entity/User";

const userRepository = getRepository(User); // 你也可以通过getConnection().getRepository()或getManager().getRepository() 获取
const user = await userRepository.findOne(1);
user.name = "Umed";
await userRepository.save(user);

----------------------------------------

TITLE: Using Repository to Find and Update User in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates how to use a Repository in TypeORM to find a user by ID and update their name. It shows the process of obtaining a repository, querying an entity, modifying it, and saving the changes.

LANGUAGE: typescript
CODE:
import { User } from "./entity/User"

const userRepository = dataSource.getRepository(User)
const user = await userRepository.findOneBy({
    id: 1,
})
user.name = "Umed"
await userRepository.save(user)

----------------------------------------

TITLE: Configuring Database Schema Synchronization in TypeORM
DESCRIPTION: Demonstrates how to enable automatic database schema synchronization using TypeORM DataSource configuration. Shows both runtime and CLI approaches for schema updates.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const myDataSource = new DataSource({
    // ...
    synchronize: true,
})

----------------------------------------

TITLE: Complex TypeORM Migration Example
DESCRIPTION: Comprehensive example of a TypeORM migration using the Migration API to create tables, indices, columns, and foreign keys.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner, Table, TableIndex, TableColumn, TableForeignKey } from "typeorm";

export class QuestionRefactoringTIMESTAMP implements MigrationInterface {
  async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.createTable(
      new Table({
        name: "question",
        columns: [
          {
            name: "id",
            type: "int",
            isPrimary: true
          },
          {
            name: "name",
            type: "varchar"
          }
        ]
      }),
      true
    );

    await queryRunner.createIndex(
      "question",
      new TableIndex({
        name: "IDX_QUESTION_NAME",
        columnNames: ["name"]
      })
    );

    await queryRunner.createTable(
      new Table({
        name: "answer",
        columns: [
          {
            name: "id",
            type: "int",
            isPrimary: true
          },
          {
            name: "name",
            type: "varchar"
          }
        ]
      }),
      true
    );

    await queryRunner.addColumn(
      "answer",
      new TableColumn({
        name: "questionId",
        type: "int"
      })
    );

    await queryRunner.createForeignKey(
      "answer",
      new TableForeignKey({
        columnNames: ["questionId"],
        referencedColumnNames: ["id"],
        referencedTableName: "question",
        onDelete: "CASCADE"
      })
    );
  }

  async down(queryRunner: QueryRunner): Promise<void> {
    const table = await queryRunner.getTable("question");
    const foreignKey = table.foreignKeys.find(fk => fk.columnNames.indexOf("questionId") !== -1);
    await queryRunner.dropForeignKey("question", foreignKey);
    await queryRunner.dropColumn("question", "questionId");
    await queryRunner.dropTable("answer");
    await queryRunner.dropIndex("question", "IDX_QUESTION_NAME");
    await queryRunner.dropTable("question");
  }
}

----------------------------------------

TITLE: Creating Database Connection in TypeORM
DESCRIPTION: Demonstrates how to create a new database connection using createConnection() method with connection options like host, port, credentials and database name.

LANGUAGE: typescript
CODE:
import {createConnection} from "typeorm";

const connection = await createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test"
});

----------------------------------------

TITLE: Implementing a Generic Event Subscriber in TypeORM
DESCRIPTION: Shows how to create a subscriber that listens to events for all entities. This example includes methods for various entity lifecycle events and transaction events.

LANGUAGE: typescript
CODE:
@EventSubscriber()
export class PostSubscriber implements EntitySubscriberInterface {
    /**
     * Called after entity is loaded.
     */
    afterLoad(entity: any) {
        console.log(`AFTER ENTITY LOADED: `, entity)
    }

    /**
     * Called before query execution.
     */
    beforeQuery(event: BeforeQueryEvent<any>) {
        console.log(`BEFORE QUERY: `, event.query)
    }

    // ... (other methods omitted for brevity)

    /**
     * Called after transaction rollback.
     */
    afterTransactionRollback(event: TransactionRollbackEvent) {
        console.log(`AFTER TRANSACTION ROLLBACK: `, event)
    }
}

----------------------------------------

TITLE: Defining Many-to-Many Relationship in TypeORM (TypeScript)
DESCRIPTION: Demonstrates how to define a many-to-many relationship between Category and Question entities using TypeORM decorators. Includes cascade option for automatic saving of related entities.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm";
import { Question } from "./Question";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @ManyToMany(type => Question, question => question.categories)
  questions: Question[];
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";
import { Category } from "./Category";

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToMany(type => Category, category => category.questions, {
    cascade: true
  })
  @JoinTable()
  categories: Category[];
}

LANGUAGE: typescript
CODE:
const category1 = new Category();
category1.name = "animals";

const category2 = new Category();
category2.name = "zoo";

const question = new Question();
question.categories = [category1, category2];
await connection.manager.save(question);

----------------------------------------

TITLE: Loading Relations in TypeORM
DESCRIPTION: Demonstrates different methods for loading related entities using both the find options API and QueryBuilder. Shows how to load multiple relations simultaneously.

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User).find({
    relations: {
        profile: true,
        photos: true,
        videos: true,
    },
})

LANGUAGE: typescript
CODE:
const user = await dataSource
    .getRepository(User)
    .createQueryBuilder("user")
    .leftJoinAndSelect("user.profile", "profile")
    .leftJoinAndSelect("user.photos", "photo")
    .leftJoinAndSelect("user.videos", "video")
    .getMany()

----------------------------------------

TITLE: Using Cascading Operations in TypeORM Relations
DESCRIPTION: Example of creating and saving related entities using cascade operations, demonstrating how child entities are automatically saved when the parent is saved.

LANGUAGE: typescript
CODE:
const category1 = new Category()
category1.name = "ORMs"

const category2 = new Category()
category2.name = "Programming"

const question = new Question()
question.title = "How to ask questions?"
question.text = "Where can I ask TypeORM-related questions?"
question.categories = [category1, category2]
await dataSource.manager.save(question)

----------------------------------------

TITLE: Defining Many-to-Many Relationship in TypeORM (TypeScript)
DESCRIPTION: Demonstrates how to define a many-to-many relationship between Category and Question entities using TypeORM decorators. Includes cascade option for automatic saving of related entities.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm";
import { Question } from "./Question";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @ManyToMany(type => Question, question => question.categories)
  questions: Question[];
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";
import { Category } from "./Category";

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToMany(type => Category, category => category.questions, {
    cascade: true
  })
  @JoinTable()
  categories: Category[];
}

LANGUAGE: typescript
CODE:
const category1 = new Category();
category1.name = "animals";

const category2 = new Category();
category2.name = "zoo";

const question = new Question();
question.categories = [category1, category2];
await connection.manager.save(question);

----------------------------------------

TITLE: Checking DataSource Initialization Status in TypeORM
DESCRIPTION: Shows how to check if a DataSource has been initialized and connected to the database.

LANGUAGE: typescript
CODE:
const isInitialized: boolean = dataSource.isInitialized

----------------------------------------

TITLE: Initializing TypeORM DataSource and Performing Database Operations in JavaScript
DESCRIPTION: Sets up a TypeORM DataSource with Postgres configuration, demonstrates saving and querying posts with related categories. Shows database connection initialization, entity relationship handling, and basic CRUD operations.

LANGUAGE: typescript
CODE:
var typeorm = require("typeorm")

var dataSource = new typeorm.DataSource({
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test",
    password: "admin",
    database: "test",
    synchronize: true,
    entities: [require("./entity/Post"), require("./entity/Category")],
})

dataSource
    .initialize()
    .then(function () {
        var category1 = {
            name: "TypeScript",
        }
        var category2 = {
            name: "Programming",
        }

        var post = {
            title: "Control flow based type analysis",
            text: "TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters.",
            categories: [category1, category2],
        }

        var postRepository = dataSource.getRepository("Post")
        postRepository
            .save(post)
            .then(function (savedPost) {
                console.log("Post has been saved: ", savedPost)
                console.log("Now lets load all posts: ")

                return postRepository.find()
            })
            .then(function (allPosts) {
                console.log("All posts: ", allPosts)
            })
    })
    .catch(function (error) {
        console.log("Error: ", error)
    })

----------------------------------------

TITLE: Avoiding Circular Dependencies in TypeORM Relations
DESCRIPTION: Shows how to handle circular dependencies between entities using type imports and string literals for entity references in relationship decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryColumn, ManytoMany } from "typeorm"
import type { Person } from "./Person"

@Entity()
export class ActionLog {
    @PrimaryColumn()
    id: number

    @Column()
    date: Date

    @Column()
    action: string

    @ManyToMany("Person", (person: Person) => person.id)
    person: Person
}

----------------------------------------

TITLE: Defining One-to-One Relationship in TypeORM
DESCRIPTION: Example of defining a one-to-one relationship between Photo and PhotoMetadata entities using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from "typeorm"
import { Photo } from "./Photo"

@Entity()
export class PhotoMetadata {
    @PrimaryGeneratedColumn()
    id: number

    @Column("int")
    height: number

    @Column("int")
    width: number

    @Column()
    orientation: string

    @Column()
    compressed: boolean

    @Column()
    comment: string

    @OneToOne(() => Photo)
    @JoinColumn()
    photo: Photo
}

----------------------------------------

TITLE: Implementing Self-Referencing Relations in TypeORM
DESCRIPTION: Demonstrates how to create a self-referencing relation in TypeORM using a Category entity that can have parent and child categories. Uses @ManyToOne and @OneToMany decorators to establish the hierarchical relationship.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToOne,
    OneToMany,
} from "typeorm"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToOne((type) => Category, (category) => category.childCategories)
    parentCategory: Category

    @OneToMany((type) => Category, (category) => category.parentCategory)
    childCategories: Category[]
}

----------------------------------------

TITLE: Initializing Multiple Data Sources in TypeORM
DESCRIPTION: This snippet demonstrates how to create multiple DataSource instances to connect to different databases. It shows the configuration for two MySQL databases with different connection details.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const db1DataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "admin",
    database: "db1",
    entities: [__dirname + "/entity/*{.js,.ts}"],
    synchronize: true,
})

const db2DataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "admin",
    database: "db2",
    entities: [__dirname + "/entity/*{.js,.ts}"],
    synchronize: true,
})

----------------------------------------

TITLE: Complete Example of View Entities in TypeORM
DESCRIPTION: This comprehensive example demonstrates the creation of two entities (Category and Post) and a view entity (PostCategory) that aggregates data from these entities. It includes entity definitions, view creation, and data insertion.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string
}

import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToOne,
    JoinColumn,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @Column()
    categoryId: number

    @ManyToOne(() => Category)
    @JoinColumn({ name: "categoryId" })
    category: Category
}

import { ViewEntity, ViewColumn, DataSource } from "typeorm"

@ViewEntity({
    expression: (dataSource: DataSource) =>
        dataSource
            .createQueryBuilder()
            .select("post.id", "id")
            .addSelect("post.name", "name")
            .addSelect("category.name", "categoryName")
            .from(Post, "post")
            .leftJoin(Category, "category", "category.id = post.categoryId"),
})
export class PostCategory {
    @ViewColumn()
    id: number

    @ViewColumn()
    name: string

    @ViewColumn()
    categoryName: string
}

import { Category } from "./entity/Category"
import { Post } from "./entity/Post"
import { PostCategory } from "./entity/PostCategory"

const category1 = new Category()
category1.name = "Cars"
await dataSource.manager.save(category1)

const category2 = new Category()
category2.name = "Airplanes"
await dataSource.manager.save(category2)

const post1 = new Post()
post1.name = "About BMW"
post1.categoryId = category1.id
await dataSource.manager.save(post1)

const post2 = new Post()
post2.name = "About Boeing"
post2.categoryId = category2.id
await dataSource.manager.save(post2)

const postCategories = await dataSource.manager.find(PostCategory)
const postCategory = await dataSource.manager.findOneBy(PostCategory, { id: 1 })

----------------------------------------

TITLE: Creating an Event Subscriber in TypeORM
DESCRIPTION: Demonstrates how to create a subscriber class that listens to specific entity events. This example shows a subscriber for Post entities with a beforeInsert method.

LANGUAGE: typescript
CODE:
@EventSubscriber()
export class PostSubscriber implements EntitySubscriberInterface<Post> {
    /**
     * Indicates that this subscriber only listen to Post events.
     */
    listenTo() {
        return Post
    }

    /**
     * Called before post insertion.
     */
    beforeInsert(event: InsertEvent<Post>) {
        console.log(`BEFORE POST INSERTED: `, event.entity)
    }
}

----------------------------------------

TITLE: Defining Basic Category Entity in TypeORM
DESCRIPTION: TypeScript entity class definition for a Category with basic properties using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string
}

----------------------------------------

TITLE: Defining TypeORM Entity with Validation Decorators
DESCRIPTION: Creates a Post entity class with various validation rules using class-validator decorators. Includes validations for string length, content matching, integer ranges, email format, domain names, and date types.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";
import { Contains, IsInt, Length, IsEmail, IsFQDN, IsDate, Min, Max } from "class-validator";

@Entity()
export class Post {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  @Length(10, 20)
  title: string;

  @Column()
  @Contains("hello")
  text: string;

  @Column()
  @IsInt()
  @Min(0)
  @Max(10)
  rating: number;

  @Column()
  @IsEmail()
  email: string;

  @Column()
  @IsFQDN()
  site: string;

  @Column()
  @IsDate()
  createDate: Date;
}

----------------------------------------

TITLE: Executing Operations within a Transaction in TypeORM
DESCRIPTION: Illustrates how to perform multiple operations within a transaction using the provided transactional entity manager. This ensures all operations are part of the same transaction.

LANGUAGE: typescript
CODE:
import { getManager } from "typeorm";

await getManager().transaction(async transactionalEntityManager => {
  await transactionalEntityManager.save(users);
  await transactionalEntityManager.save(photos);
  // ...
});

----------------------------------------

TITLE: Transaction Decorator with Isolation Level in TypeORM
DESCRIPTION: Illustrates how to use the @Transaction decorator with a specific isolation level. This example sets the isolation level to SERIALIZABLE.

LANGUAGE: typescript
CODE:
@Transaction({ isolation: "SERIALIZABLE" })
save(@TransactionManager() manager: EntityManager, user: User) {
    return manager.save(user);
}

----------------------------------------

TITLE: Loading Related Data with Find Options
DESCRIPTION: Demonstrates how to load User entity with related Profile using TypeORM's find options.

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User).find({
    relations: {
        profile: true,
    },
})

----------------------------------------

TITLE: Basic Repository Export Pattern in TypeORM
DESCRIPTION: Demonstrates the common practice of exporting a repository instance as a global variable and using it across the application.

LANGUAGE: typescript
CODE:
// user.repository.ts
export const UserRepository = dataSource.getRepository(User)

// user.controller.ts
export class UserController {
    users() {
        return UserRepository.find()
    }
}

----------------------------------------

TITLE: Implementing Migration for Column Rename
DESCRIPTION: Example of a TypeORM migration implementation to rename a column from 'title' to 'name'.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner } from "typeorm"

export class PostRefactoringTIMESTAMP implements MigrationInterface {
    async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `ALTER TABLE "post" RENAME COLUMN "title" TO "name"`
        )
    }

    async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `ALTER TABLE "post" RENAME COLUMN "name" TO "title"`
        ) // reverts things made in "up" method
    }
}

----------------------------------------

TITLE: Creating Single Column Indexes in TypeORM - TypeScript
DESCRIPTION: Demonstrates how to create basic single-column indexes using the @Index decorator on entity properties. Shows both default and named index creation.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Index()
  @Column()
  firstName: string;

  @Column()
  @Index()
  lastName: string;
}

----------------------------------------

TITLE: Basic Repository Export Pattern in TypeORM
DESCRIPTION: Demonstrates the common practice of exporting a repository instance as a global variable and using it across the application.

LANGUAGE: typescript
CODE:
// user.repository.ts
export const UserRepository = dataSource.getRepository(User)

// user.controller.ts
export class UserController {
    users() {
        return UserRepository.find()
    }
}

----------------------------------------

TITLE: Using QueryBuilder in TypeORM
DESCRIPTION: Demonstrates how to use QueryBuilder to construct complex SQL queries with joins, conditions, and pagination.

LANGUAGE: TypeScript
CODE:
let photos = await connection
  .getRepository(Photo)
  .createQueryBuilder("photo")
  .innerJoinAndSelect("photo.metadata", "metadata")
  .leftJoinAndSelect("photo.albums", "album")
  .where("photo.isPublished = true")
  .andWhere("(photo.name = :photoName OR photo.name = :bearName)")
  .orderBy("photo.id", "DESC")
  .skip(5)
  .take(10)
  .setParameters({ photoName: "My", bearName: "Mishka" })
  .getMany();

----------------------------------------

TITLE: Explicitly Selecting Query Destinations in TypeORM Replication
DESCRIPTION: This snippet demonstrates how to explicitly use the master or slave databases for queries when replication is configured. It shows examples for both read and write operations.

LANGUAGE: typescript
CODE:
const masterQueryRunner = dataSource.createQueryRunner("master")
try {
    const postsFromMaster = await dataSource
        .createQueryBuilder(Post, "post", masterQueryRunner)
        .setQueryRunner(masterQueryRunner)
        .getMany()
} finally {
    await masterQueryRunner.release()
}

const slaveQueryRunner = dataSource.createQueryRunner("slave")
try {
    const userFromSlave = await slaveQueryRunner.query(
        "SELECT * FROM users WHERE id = $1",
        [userId],
        slaveQueryRunner,
    )
} finally {
    return slaveQueryRunner.release()
}

----------------------------------------

TITLE: Defining Basic MongoDB Entity in TypeORM
DESCRIPTION: Example of creating a basic MongoDB entity using TypeORM decorators. Shows how to define an ObjectId primary key and basic string columns.

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm"

@Entity()
export class User {
    @ObjectIdColumn()
    _id: ObjectId

    @Column()
    firstName: string

    @Column()
    lastName: string
}

----------------------------------------

TITLE: Implementing Query Cache in QueryBuilder
DESCRIPTION: Example showing how to enable caching for specific queries using QueryBuilder. Demonstrates caching a query that fetches admin users.

LANGUAGE: typescript
CODE:
const users = await dataSource
    .createQueryBuilder(User, "user")
    .where("user.isAdmin = :isAdmin", { isAdmin: true })
    .cache(true)
    .getMany()

----------------------------------------

TITLE: Extending Repository with Custom Methods in TypeORM
DESCRIPTION: Shows how to extend repository functionality using the .extend method to add custom query methods like findByName.

LANGUAGE: typescript
CODE:
// user.repository.ts
export const UserRepository = dataSource.getRepository(User).extend({
    findByName(firstName: string, lastName: string) {
        return this.createQueryBuilder("user")
            .where("user.firstName = :firstName", { firstName })
            .andWhere("user.lastName = :lastName", { lastName })
            .getMany()
    },
})

// user.controller.ts
export class UserController {
    users() {
        return UserRepository.findByName("Timber", "Saw")
    }
}

----------------------------------------

TITLE: Comprehensive Find Options Example in TypeORM
DESCRIPTION: A complete example showcasing various find options combined in a single TypeORM query.

LANGUAGE: typescript
CODE:
userRepository.find({
    select: ["firstName", "lastName"],
    relations: ["profile", "photos", "videos"],
    where: {
        firstName: "Timber",
        lastName: "Saw"
    },
    order: {
        name: "ASC",
        id: "DESC"
    },
    skip: 5,
    take: 10,
    cache: true
});

----------------------------------------

TITLE: Extending Repository with Custom Methods in TypeORM
DESCRIPTION: Shows how to extend repository functionality using the .extend method to add custom query methods like findByName.

LANGUAGE: typescript
CODE:
// user.repository.ts
export const UserRepository = dataSource.getRepository(User).extend({
    findByName(firstName: string, lastName: string) {
        return this.createQueryBuilder("user")
            .where("user.firstName = :firstName", { firstName })
            .andWhere("user.lastName = :lastName", { lastName })
            .getMany()
    },
})

// user.controller.ts
export class UserController {
    users() {
        return UserRepository.findByName("Timber", "Saw")
    }
}

----------------------------------------

TITLE: Using Custom Repositories in TypeORM Transactions
DESCRIPTION: Illustrates the proper way to use custom repositories within transactions using the withRepository method of the transaction manager.

LANGUAGE: typescript
CODE:
await connection.transaction(async (manager) => {
    // in transactions you MUST use manager instance provided by a transaction,
    // you cannot use global entity managers or repositories,
    // because this manager is exclusive and transactional

    const userRepository = manager.withRepository(UserRepository)
    await userRepository.createAndSave("Timber", "Saw")
    const timber = await userRepository.findByName("Timber", "Saw")
})

----------------------------------------

TITLE: Loading Relationships in TypeORM Entities
DESCRIPTION: Demonstrates two methods for loading entity relationships: using the 'relations' option in FindOptions and using QueryBuilder for more flexible relationship loading with join conditions and sorting.

LANGUAGE: typescript
CODE:
const users = await connection.getRepository(User).find({ relations: ["profile", "photos", "videos"] });

LANGUAGE: typescript
CODE:
const user = await connection
  .getRepository(User)
  .createQueryBuilder("user")
  .leftJoinAndSelect("user.profile", "profile")
  .leftJoinAndSelect("user.photos", "photo")
  .leftJoinAndSelect("user.videos", "video")
  .getMany();

----------------------------------------

TITLE: Creating Basic Column Indices in TypeORM
DESCRIPTION: Demonstrates how to create basic column indices using the @Index decorator on individual columns. Shows implementation with and without custom index names.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Index()
    @Column()
    firstName: string

    @Column()
    @Index()
    lastName: string
}

----------------------------------------

TITLE: Implementing Cache in Repository Queries
DESCRIPTION: Example of enabling cache for Repository-based queries. Shows how to achieve the same caching functionality using the Repository API.

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User).find({
    where: { isAdmin: true },
    cache: true,
})

----------------------------------------

TITLE: Defining Category Entity with Basic Structure
DESCRIPTION: Creates a basic Category entity with id and name properties using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;
}

----------------------------------------

TITLE: Configuring Basic Cache Settings in TypeORM DataSource
DESCRIPTION: Basic configuration to enable query caching in TypeORM data source options. This is the minimum required setup to start using caching functionality.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: true
}

----------------------------------------

TITLE: Join Relations Example
DESCRIPTION: Demonstrates how to join related entities and select data using QueryBuilder

LANGUAGE: typescript
CODE:
const user = await createQueryBuilder("user")
    .leftJoinAndSelect("user.photos", "photo")
    .where("user.name = :name", { name: "Timber" })
    .getOne()

----------------------------------------

TITLE: Defining User Entity with One-to-Many Relationship in TypeORM
DESCRIPTION: This snippet defines a User entity with a One-to-Many relationship to the Photo entity. It uses TypeORM decorators to specify the primary key, columns, and the relationship.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from "typeorm";
import { Photo } from "./Photo";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToMany(() => Photo, photo => photo.user)
  photos: Photo[];
}

----------------------------------------

TITLE: Join Relations Example
DESCRIPTION: Demonstrates how to join related entities and select data using QueryBuilder

LANGUAGE: typescript
CODE:
const user = await createQueryBuilder("user")
    .leftJoinAndSelect("user.photos", "photo")
    .where("user.name = :name", { name: "Timber" })
    .getOne()

----------------------------------------

TITLE: Defining Lazy Relationships in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates how to define lazy relationships between Category and Question entities using TypeORM decorators. The relationships are defined using Promise types, which will be loaded only when accessed.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm";
import { Question } from "./Question";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @ManyToMany(type => Question, question => question.categories)
  questions: Promise<Question[]>;
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";
import { Category } from "./Category";

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToMany(type => Category, category => category.questions)
  @JoinTable()
  categories: Promise<Category[]>;
}

----------------------------------------

TITLE: Creating Self-Referencing Relationships in TypeORM
DESCRIPTION: Demonstrates how to create a self-referencing relationship for a Category entity, allowing categories to have parent and child categories. This is useful for implementing tree-like structures or adjacency list patterns.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from "typeorm";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToOne(type => Category, category => category.childCategories)
  parentCategory: Category;

  @OneToMany(type => Category, category => category.parentCategory)
  childCategories: Category[];
}

----------------------------------------

TITLE: Configuring Redis Cache
DESCRIPTION: Example of configuring Redis as the cache storage backend with connection options.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: {
        type: "redis",
        options: {
            socket: {
                host: "localhost",
                port: 6379
            }
        }
    }
}

----------------------------------------

TITLE: Using Active Record Methods in TypeORM
DESCRIPTION: Examples of common Active Record operations including saving, removing, and querying entities using the built-in methods from BaseEntity.

LANGUAGE: typescript
CODE:
// example how to save AR entity
const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.isActive = true
await user.save()

// example how to remove AR entity
await user.remove()

// example how to load AR entities
const users = await User.find({ skip: 2, take: 5 })
const newUsers = await User.findBy({ isActive: true })
const timber = await User.findOneBy({ firstName: "Timber", lastName: "Saw" })

----------------------------------------

TITLE: Defining Photo Entity with Many-to-One Relationship in TypeORM
DESCRIPTION: This snippet defines a Photo entity with a Many-to-One relationship to the User entity. It uses TypeORM decorators to specify the primary key, columns, and the relationship.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from "typeorm";
import { User } from "./User";

@Entity()
export class Photo {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  url: string;

  @ManyToOne(() => User, user => user.photos)
  user: User;
}

----------------------------------------

TITLE: Custom Cache ID with Repository
DESCRIPTION: Setting custom cache ID and duration in Repository query.

LANGUAGE: typescript
CODE:
const users = await connection.getRepository(User).find({
  where: { isAdmin: true },
  cache: {
    id: "users_admins",
    milisseconds: 25000
  }
});

----------------------------------------

TITLE: Pagination Query Example
DESCRIPTION: Shows how to implement pagination using skip and take methods

LANGUAGE: typescript
CODE:
const users = await dataSource
    .getRepository(User)
    .createQueryBuilder("user")
    .leftJoinAndSelect("user.photos", "photo")
    .skip(5)
    .take(10)
    .getMany()

----------------------------------------

TITLE: Using Eager Relations in TypeORM Queries with TypeScript
DESCRIPTION: This snippet demonstrates how to use eager relations when querying the database. The related categories are automatically loaded when fetching questions.

LANGUAGE: typescript
CODE:
const questionRepository = dataSource.getRepository(Question)

// questions will be loaded with its categories
const questions = await questionRepository.find()

----------------------------------------

TITLE: Defining Complex Entity Schema with Constraints in TypeORM
DESCRIPTION: This snippet demonstrates a complex entity schema definition for a person, including various column types, checks, indices, and unique constraints using TypeORM's EntitySchema.

LANGUAGE: typescript
CODE:
import {EntitySchema} from "typeorm";

export const PersonSchema = new EntitySchema({
    name: "person",
    columns: {
        id: {
            primary: true,
            type: "int",
            generated: "increment"
        },
        firstName: {
            type: String,
            length: 30
        },
        lastName: {
            type: String,
            length: 50,
            nullable: false
        },
        age: {
            type: Number,
            nullable: false
        }
    },
    checks: [
        { expression: `"firstName" <> 'John' AND "lastName" <> 'Doe'` },
        { expression: `"age" > 18` }
    ],
    indices: [
        {
            name: "IDX_TEST",
            unique: true,
            columns: [
                "firstName",
                "lastName"
            ]
        }
    ],
    uniques: [
        {
            name: "UNIQUE_TEST",
            columns: [
                "firstName",
                "lastName"
            ]
        }
    ]
});

----------------------------------------

TITLE: Basic Repository Property Access in TypeORM
DESCRIPTION: Examples of accessing basic repository properties like manager, metadata, queryRunner and target.

LANGUAGE: typescript
CODE:
const manager = repository.manager
const metadata = repository.metadata
const queryRunner = repository.queryRunner
const target = repository.target

----------------------------------------

TITLE: Defining Eager Relations in TypeORM with TypeScript
DESCRIPTION: This snippet shows how to define eager relations between Category and Question entities. The Question entity uses the 'eager: true' option to automatically load related categories.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm"
import { Question } from "./Question"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @ManyToMany((type) => Question, (question) => question.categories)
    questions: Question[]
}

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
    JoinTable,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Question {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany((type) => Category, (category) => category.questions, {
        eager: true,
    })
    @JoinTable()
    categories: Category[]
}

----------------------------------------

TITLE: Defining an Entity in TypeORM
DESCRIPTION: Example of how to define a User entity using TypeORM decorators. This creates a database table with columns corresponding to the entity properties.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    age: number
}

----------------------------------------

TITLE: Loading Related Data Using QueryBuilder
DESCRIPTION: Demonstrates how to load related entities using QueryBuilder with joins.

LANGUAGE: typescript
CODE:
const questions = await connection
  .getRepository(Question)
  .createQueryBuilder("question")
  .leftJoinAndSelect("question.categories", "category")
  .getMany();

----------------------------------------

TITLE: Saving Many-to-Many Relationship Data
DESCRIPTION: Demonstrates how to create and save related entities in a many-to-many relationship.

LANGUAGE: typescript
CODE:
const category1 = new Category();
category1.name = "animals";
await connection.manager.save(category1);

const category2 = new Category();
category2.name = "zoo";
await connection.manager.save(category2);

const question = new Question();
question.categories = [category1, category2];
await connection.manager.save(question);

----------------------------------------

TITLE: Configuring Custom Logger in DataSource
DESCRIPTION: Example of implementing and configuring a custom logger in TypeORM DataSource options.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"
import { MyCustomLogger } from "./logger/MyCustomLogger"

const dataSource = new DataSource({
    name: "mysql",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    logger: new MyCustomLogger(),
})

----------------------------------------

TITLE: Defining Lazy Relations in TypeORM with TypeScript
DESCRIPTION: This snippet shows how to define lazy relations between Category and Question entities. The relations are defined using Promises to enable lazy loading.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm"
import { Question } from "./Question"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @ManyToMany((type) => Question, (question) => question.categories)
    questions: Promise<Question[]>
}

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
    JoinTable,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Question {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany((type) => Category, (category) => category.questions)
    @JoinTable()
    categories: Promise<Category[]>
}

----------------------------------------

TITLE: Using MongoDB EntityManager and Repository
DESCRIPTION: Examples of using MongoDB-specific entity manager and repository methods for database operations.

LANGUAGE: typescript
CODE:
import { getMongoManager } from "typeorm";

const manager = getMongoManager(); // or connection.mongoManager
const timber = await manager.findOne(User, { firstName: "Timber", lastName: "Saw" });

LANGUAGE: typescript
CODE:
import { getMongoRepository } from "typeorm";

const userRepository = getMongoRepository(User); // or connection.getMongoManager
const timber = await userRepository.findOne({ firstName: "Timber", lastName: "Saw" });

----------------------------------------

TITLE: Synchronizing Database Schema in TypeORM
DESCRIPTION: Illustrates how to synchronize the database schema, typically called when the application starts.

LANGUAGE: typescript
CODE:
await dataSource.synchronize()

----------------------------------------

TITLE: Creating Entity Event Subscriber in TypeORM
DESCRIPTION: Shows how to create an event subscriber that listens to specific entity events. Includes implementation of beforeInsert hook for Post entities.

LANGUAGE: typescript
CODE:
@EventSubscriber()
export class PostSubscriber implements EntitySubscriberInterface<Post> {
  /**
   * 表示此订阅者仅侦听Post事件。
   */
  listenTo() {
    return Post;
  }

  /**
   * 插入post之前调用。
   */
  beforeInsert(event: InsertEvent<Post>) {
    console.log(`BEFORE POST INSERTED: `, event.entity);
  }
}

----------------------------------------

TITLE: Accessing DataSource Options in TypeORM
DESCRIPTION: Demonstrates how to access the options used to create a DataSource instance.

LANGUAGE: typescript
CODE:
const dataSourceOptions: DataSourceOptions = dataSource.options

----------------------------------------

TITLE: Creating QueryBuilder in TypeORM
DESCRIPTION: Demonstrates how to create and use a QueryBuilder for building complex queries.

LANGUAGE: typescript
CODE:
const users = await dataSource
    .createQueryBuilder()
    .select()
    .from(User, "user")
    .where("user.name = :name", { name: "John" })
    .getMany()

----------------------------------------

TITLE: TypeScript Configuration
DESCRIPTION: TypeScript compiler configuration for the project with necessary decorators and module settings.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "lib": ["es5", "es6", "dom"],
        "target": "es5",
        "module": "commonjs",
        "moduleResolution": "node",
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true
    }
}

----------------------------------------

TITLE: Accessing Target Entity in TypeORM Repository
DESCRIPTION: Demonstrates how to access the target entity class managed by a repository.

LANGUAGE: typescript
CODE:
const target = repository.target;

----------------------------------------

TITLE: Running Migrations in TypeORM
DESCRIPTION: Shows how to run all pending migrations for the database.

LANGUAGE: typescript
CODE:
await dataSource.runMigrations()

----------------------------------------

TITLE: Implementing Adjacency List Tree in TypeORM
DESCRIPTION: Demonstrates how to create a self-referencing entity for an Adjacency List tree structure. This pattern is simple but has limitations on loading the entire tree at once due to join constraints.

LANGUAGE: typescript
CODE:
import {Entity, Column, PrimaryGeneratedColumn, ManyToOne, OneToMany} from "typeorm";

@Entity()
export class Category {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column()
    description: string;

    @ManyToOne(type => Category, category => category.children)
    parent: Category;

    @OneToMany(type => Category, category => category.parent)
    children: Category[];
}

----------------------------------------

TITLE: Dropping Database in TypeORM
DESCRIPTION: Demonstrates how to drop the entire database and all its data. Caution: This operation is irreversible and should be used carefully.

LANGUAGE: typescript
CODE:
await dataSource.dropDatabase()

----------------------------------------

TITLE: Express Route Configuration
DESCRIPTION: Setting up Express server with basic CRUD route handlers for user management.

LANGUAGE: typescript
CODE:
import * as express from "express"
import { Request, Response } from "express"

// create and setup express app
const app = express()
app.use(express.json())

// register routes

app.get("/users", function (req: Request, res: Response) {
    // here we will have logic to return all users
})

app.get("/users/:id", function (req: Request, res: Response) {
    // here we will have logic to return user by id
})

app.post("/users", function (req: Request, res: Response) {
    // here we will have logic to save a user
})

app.put("/users/:id", function (req: Request, res: Response) {
    // here we will have logic to update a user by a given user id
})

app.delete("/users/:id", function (req: Request, res: Response) {
    // here we will have logic to delete a user by a given user id
})

// start express server
app.listen(3000)

----------------------------------------

TITLE: Querying Embedded Entities in TypeORM
DESCRIPTION: Shows how to query embedded entities using nested object notation in the 'where' clause.

LANGUAGE: typescript
CODE:
userRepository.find({ where: { name: { first: "Timber", last: "Saw" } } });

----------------------------------------

TITLE: Updating User Entity with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet demonstrates how to update a User entity using TypeORM's Query Builder. It sets the firstName and lastName fields for a user with a specific ID.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .update(User)
    .set({ firstName: "Timber", lastName: "Saw" })
    .where("id = :id", { id: 1 })
    .execute()

----------------------------------------

TITLE: Implementing Closure Table Pattern in TypeORM
DESCRIPTION: Shows how to use the Closure table pattern for tree structures. This method stores parent-child relations in a separate table and is efficient for both reading and writing.

LANGUAGE: typescript
CODE:
import {
    Entity,
    Tree,
    Column,
    PrimaryGeneratedColumn,
    TreeChildren,
    TreeParent,
    TreeLevelColumn,
} from "typeorm"

@Entity()
@Tree("closure-table")
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @TreeChildren()
    children: Category[]

    @TreeParent()
    parent: Category
}

----------------------------------------

TITLE: Custom Cache Duration in Repository
DESCRIPTION: Setting custom cache duration in Repository query.

LANGUAGE: typescript
CODE:
const users = await connection.getRepository(User).find({
  where: { isAdmin: true },
  cache: 60000
});

----------------------------------------

TITLE: Running TypeORM CLI Commands with npm
DESCRIPTION: Examples of running TypeORM CLI commands using npm scripts, including passing arguments.

LANGUAGE: bash
CODE:
npm run typeorm migration:run

LANGUAGE: bash
CODE:
npm run typeorm migration:generate -- -n migrationNameHere

----------------------------------------

TITLE: Configuring Multiple TypeORM DataSources
DESCRIPTION: Demonstrates how to create multiple DataSource instances for different database types (MySQL and PostgreSQL) with their respective configurations.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const MysqlDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        // ....
    ],
})

const PostgresDataSource = new DataSource({
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        // ....
    ],
})

----------------------------------------

TITLE: Configuring Multiple TypeORM DataSources
DESCRIPTION: Demonstrates how to create multiple DataSource instances for different database types (MySQL and PostgreSQL) with their respective configurations.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const MysqlDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        // ....
    ],
})

const PostgresDataSource = new DataSource({
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        // ....
    ],
})

----------------------------------------

TITLE: Creating QueryBuilder in TypeORM Repository
DESCRIPTION: Shows how to create a QueryBuilder for constructing SQL queries in TypeORM.

LANGUAGE: typescript
CODE:
const users = await repository
  .createQueryBuilder("user")
  .where("user.name = :name", { name: "John" })
  .getMany();

----------------------------------------

TITLE: Executing Hard Delete with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet demonstrates how to perform a hard delete operation using TypeORM's Query Builder. It deletes a User entity with a specific ID from the database.

LANGUAGE: typescript
CODE:
await myDataSource
    .createQueryBuilder()
    .delete()
    .from(User)
    .where("id = :id", { id: 1 })
    .execute()

----------------------------------------

TITLE: Bi-directional Profile Entity Definition
DESCRIPTION: Updated Profile entity with bi-directional relationship to User entity using @OneToOne decorator.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne } from "typeorm"
import { User } from "./User"

@Entity()
export class Profile {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    gender: string

    @Column()
    photo: string

    @OneToOne(() => User, (user) => user.profile) // specify inverse side as a second parameter
    user: User
}

----------------------------------------

TITLE: Database Table Structure
DESCRIPTION: Shows the resulting database table structure for User and Profile entities with foreign key relationship.

LANGUAGE: shell
CODE:
+-------------+--------------+----------------------------+
|                        profile                          |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| gender      | varchar(255) |                            |
| photo       | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
| profileId   | int(11)      | FOREIGN KEY                |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Custom Cache ID with QueryBuilder
DESCRIPTION: Implementing cache with custom identifier in QueryBuilder.

LANGUAGE: typescript
CODE:
const users = await connection
  .createQueryBuilder(User, "user")
  .where("user.isAdmin = :isAdmin", { isAdmin: true })
  .cache("users_admins", 25000)
  .getMany();

----------------------------------------

TITLE: Using Active Record Methods in TypeORM
DESCRIPTION: Shows how to perform CRUD operations using Active Record pattern methods like save(), remove(), and find().

LANGUAGE: typescript
CODE:
// 示例如何保存AR实体
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.isActive = true;
await user.save();

// 示例如何删除AR实体
await user.remove();

// 示例如何加载AR实体
const users = await User.find({ skip: 2, take: 5 });
const newUsers = await User.find({ isActive: true });
const timber = await User.findOne({ firstName: "Timber", lastName: "Saw" });

----------------------------------------

TITLE: Basic Select Query with TypeORM
DESCRIPTION: Demonstrates how to use the select option to specify which properties to retrieve from the database.

LANGUAGE: typescript
CODE:
userRepository.find({
    select: {
        firstName: true,
        lastName: true,
    },
})

LANGUAGE: sql
CODE:
SELECT "firstName", "lastName" FROM "user"

----------------------------------------

TITLE: Basic Select Query with TypeORM
DESCRIPTION: Demonstrates how to use the select option to specify which properties to retrieve from the database.

LANGUAGE: typescript
CODE:
userRepository.find({
    select: {
        firstName: true,
        lastName: true,
    },
})

LANGUAGE: sql
CODE:
SELECT "firstName", "lastName" FROM "user"

----------------------------------------

TITLE: Query Building in TypeORM
DESCRIPTION: Example of creating and executing a basic query using QueryBuilder.

LANGUAGE: typescript
CODE:
const users = await repository
    .createQueryBuilder("user")
    .where("user.name = :name", { name: "John" })
    .getMany()

----------------------------------------

TITLE: Handling Conflicts in TypeORM Insert Query with orUpdate in TypeScript
DESCRIPTION: This snippet demonstrates how to handle conflicts during insert operations using the orUpdate function. It allows updating specific fields when a conflict occurs based on certain conditions.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .insert()
    .into(User)
    .values({
        firstName: "Timber",
        lastName: "Saw",
        externalId: "abc123",
    })
    .orUpdate(
        ["firstName", "lastName"],
        ["externalId"],
    )
    .execute()

----------------------------------------

TITLE: Database Schema for Many-to-Many Relation
DESCRIPTION: SQL table structure showing the generated schema for the many-to-many relationship between Question and Category entities.

LANGUAGE: shell
CODE:
+-------------+--------------+----------------------------+
|                        category                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                        question                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| title       | varchar(255) |                            |
| text        | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|              question_categories_category               |
+-------------+--------------+----------------------------+
| questionId  | int(11)      | PRIMARY KEY FOREIGN KEY    |
| categoryId  | int(11)      | PRIMARY KEY FOREIGN KEY    |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Managing Database Connections in TypeORM
DESCRIPTION: Demonstrates how to access and manage database connections using the ConnectionManager API.

LANGUAGE: typescript
CODE:
import {getConnectionManager} from "typeorm";

const defaultConnection = getConnectionManager().get("default");
const secondaryConnection = getConnectionManager().get("secondary");

----------------------------------------

TITLE: Custom Logger Implementation
DESCRIPTION: Example of implementing and using a custom logger class in TypeORM.

LANGUAGE: typescript
CODE:
import { Logger } from "typeorm";

export class MyCustomLogger implements Logger {
  // 实现logger类的所有方法
}

LANGUAGE: typescript
CODE:
import { createConnection } from "typeorm";
import { MyCustomLogger } from "./logger/MyCustomLogger";

createConnection({
  name: "mysql",
  type: "mysql",
  host: "localhost",
  port: 3306,
  username: "test",
  password: "test",
  database: "test",
  logger: new MyCustomLogger()
});

----------------------------------------

TITLE: Using Locking in TypeORM Query
DESCRIPTION: Demonstrates how to use optimistic locking in a TypeORM query with the 'lock' option.

LANGUAGE: typescript
CODE:
userRepository.findOne(1, {
    lock: { mode: "optimistic", version: 1 }
})

----------------------------------------

TITLE: Creating Abstract Content Class for Inheritance in TypeORM (TypeScript)
DESCRIPTION: This snippet defines an abstract Content class with common properties (id, title, description) to be used as a base class for other entities.

LANGUAGE: typescript
CODE:
export abstract class Content {
    
    @PrimaryGeneratedColumn()
    id: number;
 
    @Column()
    title: string;
    
    @Column()
    description: string;
    
}

----------------------------------------

TITLE: Generated Database Schema for Photo and User Tables
DESCRIPTION: Shell output showing the generated database schema with tables, columns, and relationships for both Photo and User entities.

LANGUAGE: shell
CODE:
+-------------+--------------+----------------------------+
|                         photo                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| url         | varchar(255) |                            |
| userId      | int(11)      | FOREIGN KEY                |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Creating QueryBuilder in TypeORM EntityManager
DESCRIPTION: Shows how to create a QueryBuilder instance for constructing complex SQL queries. This example demonstrates a basic select query with conditions.

LANGUAGE: typescript
CODE:
const users = await manager
  .createQueryBuilder()
  .select()
  .from(User, "user")
  .where("user.name = :name", { name: "John" })
  .getMany();

----------------------------------------

TITLE: TypeScript Configuration
DESCRIPTION: TSConfig settings for TypeORM and Express application

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "lib": ["es5", "es6"],
    "target": "es5",
    "module": "commonjs",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true
  }
}

----------------------------------------

TITLE: Pagination in TypeORM Query
DESCRIPTION: Demonstrates how to implement pagination using 'skip' and 'take' options in TypeORM queries.

LANGUAGE: typescript
CODE:
userRepository.find({
    skip: 5
});

userRepository.find({
    take: 10
});

----------------------------------------

TITLE: Defining Base Entity Class for Concrete Table Inheritance in TypeORM
DESCRIPTION: Creates an abstract base class 'Content' with common properties for inheritance. This class defines the shared structure for derived entities.

LANGUAGE: typescript
CODE:
export abstract class Content {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    description: string
}

----------------------------------------

TITLE: Defining User Entity with One-to-Many Relationship in TypeORM
DESCRIPTION: TypeScript class defining a User entity with a one-to-many relationship to Photo. Shows primary key, name column, and relationship decorator setup.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from "typeorm"
import { Photo } from "./Photo"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @OneToMany(() => Photo, (photo) => photo.user)
    photos: Photo[]
}

----------------------------------------

TITLE: Setting Default Column Values with SQL Functions in TypeORM
DESCRIPTION: Example of configuring a column's default value to use a SQL function like NOW() using the Column decorator's default option.

LANGUAGE: typescript
CODE:
@Column({ default: () => "NOW()" })
date: Date;

----------------------------------------

TITLE: Defining Photo Entity with Many-to-One Relationship in TypeORM
DESCRIPTION: TypeScript class defining a Photo entity with a many-to-one relationship to User. Includes primary key, URL column, and relationship decorator configurations.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from "typeorm"
import { User } from "./User"

@Entity()
export class Photo {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    url: string

    @ManyToOne(() => User, (user) => user.photos)
    user: User
}

----------------------------------------

TITLE: User Entity Definition
DESCRIPTION: TypeORM entity class definition for User model

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from "typeorm";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;
}

----------------------------------------

TITLE: Refactored Entities Using Embedded Columns
DESCRIPTION: Updated entity definitions using the embedded Name class to reduce duplication.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    isActive: boolean
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class Employee {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    salary: number
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class Student {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    faculty: string
}

----------------------------------------

TITLE: Defining One-to-One Relationship with @OneToOne Decorator in TypeORM
DESCRIPTION: Example of creating a one-to-one relationship between User and Profile entities

LANGUAGE: typescript
CODE:
import { Entity, OneToOne, JoinColumn } from "typeorm";
import { Profile } from "./Profile";

@Entity()
export class User {
    @OneToOne(type => Profile, profile => profile.user)
    @JoinColumn()
    profile: Profile;
}


----------------------------------------

TITLE: Disabling Index Synchronization in TypeORM
DESCRIPTION: Shows how to create manual indices and disable TypeORM's automatic synchronization for custom index implementations.

LANGUAGE: typescript
CODE:
@Entity()
@Index("POST_NAME_INDEX", { synchronize: false })
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string
}

----------------------------------------

TITLE: Disabling Index Synchronization in TypeORM
DESCRIPTION: Shows how to create manual indices and disable TypeORM's automatic synchronization for custom index implementations.

LANGUAGE: typescript
CODE:
@Entity()
@Index("POST_NAME_INDEX", { synchronize: false })
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string
}

----------------------------------------

TITLE: Defining Photo Entity with Many-to-One Relationship in TypeORM
DESCRIPTION: TypeScript class defining a Photo entity with a many-to-one relationship to User. Includes primary key, URL column, and relationship decorator configurations.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from "typeorm"
import { User } from "./User"

@Entity()
export class Photo {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    url: string

    @ManyToOne(() => User, (user) => user.photos)
    user: User
}

----------------------------------------

TITLE: Refactored Entities Using Embedded Columns
DESCRIPTION: Updated entity definitions using the embedded Name class to reduce duplication.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    isActive: boolean
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class Employee {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    salary: number
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"
import { Name } from "./Name"

@Entity()
export class Student {
    @PrimaryGeneratedColumn()
    id: string

    @Column(() => Name)
    name: Name

    @Column()
    faculty: string
}

----------------------------------------

TITLE: Creating Named Indexes in TypeORM - TypeScript
DESCRIPTION: Shows how to create named indexes by passing a string identifier to the @Index decorator.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Index("name1-idx")
  @Column()
  firstName: string;

  @Column()
  @Index("name2-idx")
  lastName: string;
}

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Post Entity in TypeORM
DESCRIPTION: Defines a 'Post' entity that extends the 'Content' base class, adding a 'viewCount' property. This creates a separate table for posts with inherited and custom columns.

LANGUAGE: typescript
CODE:
@Entity()
export class Post extends Content {
    @Column()
    viewCount: number
}

----------------------------------------

TITLE: Configuring Webpack for TypeORM Migrations
DESCRIPTION: Shows how to configure Webpack to properly bundle TypeORM migration files while maintaining their functionality.

LANGUAGE: javascript
CODE:
const glob = require("glob");
const path = require("path");

module.exports = {
  entry: glob.sync(path.resolve("src/db/migrations/*.ts")).reduce((entries, filename) => {
    const migrationName = path.basename(filename, ".ts");
    return Object.assign({}, entries, {
      [migrationName]: filename
    });
  }, {}),
  resolve: {
    extensions: [".ts"]
  },
  output: {
    path: __dirname + "/dist/db/migrations",
    libraryTarget: "umd",
    filename: "[name].js"
  }
};

----------------------------------------

TITLE: Setting Long-Running Query Logging
DESCRIPTION: Configuration to log queries that exceed a specified execution time threshold, useful for performance monitoring.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    maxQueryExecutionTime: 1000
}

----------------------------------------

TITLE: Implementing Materialized Path Pattern in TypeORM
DESCRIPTION: Demonstrates the Materialized Path (Path Enumeration) pattern for tree structures. This method is simple and effective for storing hierarchical data.

LANGUAGE: typescript
CODE:
import {
    Entity,
    Tree,
    Column,
    PrimaryGeneratedColumn,
    TreeChildren,
    TreeParent,
    TreeLevelColumn,
} from "typeorm"

@Entity()
@Tree("materialized-path")
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @TreeChildren()
    children: Category[]

    @TreeParent()
    parent: Category
}

----------------------------------------

TITLE: Creating Composite Indexes in TypeORM - TypeScript
DESCRIPTION: Shows how to create composite indexes across multiple columns by applying the @Index decorator at the entity level.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm";

@Entity()
@Index(["firstName", "lastName"])
@Index(["firstName", "middleName", "lastName"], { unique: true })
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  middleName: string;

  @Column()
  lastName: string;
}

----------------------------------------

TITLE: TypeORM Data Source Configuration
DESCRIPTION: Example of configuring a TypeORM data source with database connection details and migration options.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

export default new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        /*...*/
    ],
    migrations: [
        /*...*/
    ],
    migrationsTableName: "custom_migration_table",
})

----------------------------------------

TITLE: Defining Profile Entity with TypeORM
DESCRIPTION: Basic Profile entity definition with primary key and columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class Profile {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  gender: string;

  @Column()
  photo: string;
}

----------------------------------------

TITLE: TypeORM Data Source Configuration
DESCRIPTION: Example of configuring a TypeORM data source with database connection details and migration options.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

export default new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [
        /*...*/
    ],
    migrations: [
        /*...*/
    ],
    migrationsTableName: "custom_migration_table",
})

----------------------------------------

TITLE: Customizing Join Column in TypeORM Relationships (TypeScript)
DESCRIPTION: Shows how to use @JoinColumn decorator to customize the join column name and referenced column in TypeORM relationships. Examples include default behavior and custom configurations.

LANGUAGE: typescript
CODE:
@ManyToOne(type => Category)
@JoinColumn() // 这个装饰器对于@ManyToOne是可选的，但@OneToOne是必需的
category: Category;

LANGUAGE: typescript
CODE:
@ManyToOne(type => Category)
@JoinColumn({ name: "cat_id" })
category: Category;

LANGUAGE: typescript
CODE:
@ManyToOne(type => Category)
@JoinColumn({ referencedColumnName: "name" })
category: Category;

----------------------------------------

TITLE: Accessing Repositories in TypeORM EntityManager
DESCRIPTION: Shows how to access different types of repositories (standard, tree, MongoDB, and custom) using EntityManager methods for specialized entity operations.

LANGUAGE: typescript
CODE:
const userRepository = manager.getRepository(User);

LANGUAGE: typescript
CODE:
const categoryRepository = manager.getTreeRepository(Category);

LANGUAGE: typescript
CODE:
const userRepository = manager.getMongoRepository(User);

LANGUAGE: typescript
CODE:
const myUserRepository = manager.getCustomRepository(UserRepository);

----------------------------------------

TITLE: Initial Entity Definitions with Duplication
DESCRIPTION: Original entity definitions for User, Employee, and Student classes showing duplicated firstName and lastName properties.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    isActive: boolean
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Employee {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    salary: string
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Student {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    faculty: string
}

----------------------------------------

TITLE: Initial Entity Definitions with Duplication
DESCRIPTION: Original entity definitions for User, Employee, and Student classes showing duplicated firstName and lastName properties.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    isActive: boolean
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Employee {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    salary: string
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Student {
    @PrimaryGeneratedColumn()
    id: string

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    faculty: string
}

----------------------------------------

TITLE: Creating Spatial Indexes in TypeORM - MySQL - TypeScript
DESCRIPTION: Demonstrates creating spatial indexes for MySQL geometric data types using the spatial option in the @Index decorator.

LANGUAGE: typescript
CODE:
@Entity()
export class Thing {
  @Column("point")
  @Index({ spatial: true })
  point: string;
}

----------------------------------------

TITLE: Working with Tree Entities in TypeORM
DESCRIPTION: Provides examples of how to create and save tree entities, as well as how to load and work with tree structures using TreeRepository in TypeORM.

LANGUAGE: typescript
CODE:
const a1 = new Category()
a1.name = "a1"
await dataSource.manager.save(a1)

const a11 = new Category()
a11.name = "a11"
a11.parent = a1
await dataSource.manager.save(a11)

const a12 = new Category()
a12.name = "a12"
a12.parent = a1
await dataSource.manager.save(a12)

const a111 = new Category()
a111.name = "a111"
a111.parent = a11
await dataSource.manager.save(a111)

const a112 = new Category()
a112.name = "a112"
a112.parent = a11
await dataSource.manager.save(a112)

const trees = await dataSource.manager.getTreeRepository(Category).findTrees()

----------------------------------------

TITLE: Defining Entities for Multiple Schemas in TypeORM
DESCRIPTION: This snippet illustrates how to specify different schemas for entities within a single data source. It includes two entity definitions, one for 'User' in 'secondSchema' and another for 'Photo' in 'thirdSchema'.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity({ schema: "secondSchema" })
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string
}

@Entity({ schema: "thirdSchema" })
export class Photo {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    url: string
}

----------------------------------------

TITLE: Working with Tree Entities in TypeORM
DESCRIPTION: Provides examples of how to create and save tree entities, as well as how to load and work with tree structures using TreeRepository in TypeORM.

LANGUAGE: typescript
CODE:
const a1 = new Category()
a1.name = "a1"
await dataSource.manager.save(a1)

const a11 = new Category()
a11.name = "a11"
a11.parent = a1
await dataSource.manager.save(a11)

const a12 = new Category()
a12.name = "a12"
a12.parent = a1
await dataSource.manager.save(a12)

const a111 = new Category()
a111.name = "a111"
a111.parent = a11
await dataSource.manager.save(a111)

const a112 = new Category()
a112.name = "a112"
a112.parent = a11
await dataSource.manager.save(a112)

const trees = await dataSource.manager.getTreeRepository(Category).findTrees()

----------------------------------------

TITLE: Executing Entity Validation
DESCRIPTION: Demonstrates how to validate a Post entity instance using class-validator's validate function before saving to the database. Shows error handling for validation failures.

LANGUAGE: typescript
CODE:
import { getManager } from "typeorm";
import { validate } from "class-validator";

let post = new Post();
post.title = "Hello"; // 不应该通过
post.text = "this is a great post about hell world"; //不应该通过
post.rating = 11; //不应该通过
post.email = "google.com"; //不应该通过
post.site = "googlecom"; //不应该通过

const errors = await validate(post);
if (errors.length > 0) {
  throw new Error(`Validation failed!`);
} else {
  await getManager().save(post);
}

----------------------------------------

TITLE: Configuring Cache ID in Repository
DESCRIPTION: Shows how to set cache ID and duration using Repository API for fine-grained cache control.

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User).find({
    where: { isAdmin: true },
    cache: {
        id: "users_admins",
        milliseconds: 25000,
    },
})

----------------------------------------

TITLE: Disabling Index Synchronization in TypeORM - TypeScript
DESCRIPTION: Shows how to disable automatic index synchronization for custom indexes by setting the synchronize option to false.

LANGUAGE: typescript
CODE:
@Entity()
@Index("POST_NAME_INDEX", { synchronize: false })
export class Post {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;
}

----------------------------------------

TITLE: Configuring Global Cache Settings
DESCRIPTION: Example of setting global cache duration in data source options. Shows how to configure cache settings that apply to all cached queries.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: {
        duration: 30000 // 30 seconds
    }
}

----------------------------------------

TITLE: Accessing EntityMetadata in TypeORM Repository
DESCRIPTION: Shows how to access the EntityMetadata of the entity managed by a repository.

LANGUAGE: typescript
CODE:
const metadata = repository.metadata;

----------------------------------------

TITLE: Defining Profile Entity with TypeORM
DESCRIPTION: Creates a Profile entity class with basic properties using TypeORM decorators. Includes primary key and columns for gender and photo.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class Profile {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    gender: string

    @Column()
    photo: string
}

----------------------------------------

TITLE: Implementing Single Table Inheritance for Photo Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet shows how to implement single table inheritance by extending the Content class and using @ChildEntity decorator for the Photo entity.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Photo extends Content {
    
    @Column()
    size: string;
    
}

----------------------------------------

TITLE: Setting One-to-One Relations in TypeORM
DESCRIPTION: Shows how to set one-to-one or many-to-one relations using RelationQueryBuilder.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .set(category)

----------------------------------------

TITLE: Setting One-to-One Relations in TypeORM
DESCRIPTION: Shows how to set one-to-one or many-to-one relations using RelationQueryBuilder.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .set(category)

----------------------------------------

TITLE: Data Mapper Entity Definition in TypeORM
DESCRIPTION: Shows how to create a basic entity for use with the Data Mapper pattern, without extending BaseEntity.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    isActive: boolean
}

----------------------------------------

TITLE: Configuring Specific Logging Types
DESCRIPTION: Configuration to enable specific types of logging such as queries and errors.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    logging: ["query", "error"]
}

----------------------------------------

TITLE: Loading Lazy Relations in TypeORM with TypeScript
DESCRIPTION: This snippet shows how to load lazy-loaded relations. The categories are accessed asynchronously using await on the Promise.

LANGUAGE: typescript
CODE:
const [question] = await dataSource.getRepository(Question).find()
const categories = await question.categories
// you'll have all question's categories inside "categories" variable now

----------------------------------------

TITLE: Loading Lazy Relations in TypeORM with TypeScript
DESCRIPTION: This snippet shows how to load lazy-loaded relations. The categories are accessed asynchronously using await on the Promise.

LANGUAGE: typescript
CODE:
const [question] = await dataSource.getRepository(Question).find()
const categories = await question.categories
// you'll have all question's categories inside "categories" variable now

----------------------------------------

TITLE: Raw Query Optimization in TypeORM
DESCRIPTION: Shows how to use getRawMany() to fetch only necessary data fields without entity instantiation overhead

LANGUAGE: typescript
CODE:
const rawPosts = await dataSource.getRepository(Post)
    .createQueryBuilder("post")
    .select("post.title, post.createdAt")
    .getRawMany();

----------------------------------------

TITLE: Executing Raw SQL Query in TypeORM Repository
DESCRIPTION: Illustrates how to execute a raw SQL query using the repository's query method.

LANGUAGE: typescript
CODE:
const rawData = await repository.query(`SELECT * FROM USERS`);

----------------------------------------

TITLE: Generated Database Schema Structure
DESCRIPTION: Shows the SQL table structure generated by TypeORM for the many-to-many relationship between Question and Category entities.

LANGUAGE: bash
CODE:
+-------------+--------------+----------------------------+
|                        category                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                        question                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| title       | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|              question_categories_category               |
+-------------+--------------+----------------------------+
| questionId  | int(11)      | PRIMARY KEY FOREIGN KEY    |
| categoryId  | int(11)      | PRIMARY KEY FOREIGN KEY    |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Creating Connection from Config File in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a new database connection in TypeORM using a configuration file. The createConnection() method automatically reads connection options from the ormconfig file or environment variables.

LANGUAGE: typescript
CODE:
import { createConnection } from "typeorm"

// createConnection method will automatically read connection options
// from ormconfig file or environment variables
const connection = await createConnection()

----------------------------------------

TITLE: Creating Entities and Subscribers
DESCRIPTION: CLI commands for creating new entities and subscribers in TypeORM projects.

LANGUAGE: bash
CODE:
typeorm entity:create -n User

LANGUAGE: bash
CODE:
typeorm entity:create -n User -d src/user/entity

LANGUAGE: bash
CODE:
typeorm subscriber:create -n UserSubscriber

LANGUAGE: bash
CODE:
typeorm subscriber:create -n UserSubscriber -d src/user/subscriber

----------------------------------------

TITLE: Enabling All Logging Options
DESCRIPTION: Configuration to enable all available logging options using the 'all' keyword.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    logging: "all"
}

----------------------------------------

TITLE: Implementing BeforeInsert Event Handler in TypeORM Entity
DESCRIPTION: Shows how to use @BeforeInsert decorator to execute logic before an entity is inserted into the database. Commonly used for setting timestamps.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
  @BeforeInsert()
  updateDates() {
    this.createdDate = new Date();
  }
}

----------------------------------------

TITLE: Defining Many-to-Many Relationship in TypeORM
DESCRIPTION: Example of defining a many-to-many relationship between Album and Photo entities using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm"

@Entity()
export class Album {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @ManyToMany(() => Photo, (photo) => photo.albums)
    @JoinTable()
    photos: Photo[]
}

----------------------------------------

TITLE: Index Creation in TypeORM Entities
DESCRIPTION: Shows how to create composite and unique indexes using TypeORM decorators

LANGUAGE: typescript
CODE:
import { Entity, Column, Index } from "typeorm";

@Entity()
@Index(["firstName", "lastName"]) // Composite index
export class User {
    @Column()
    firstName: string;

    @Column()
    lastName: string;
}

----------------------------------------

TITLE: Implementing BeforeInsert Event Handler in TypeORM Entity
DESCRIPTION: Shows how to use @BeforeInsert decorator to execute logic before an entity is inserted into the database. Commonly used for setting timestamps.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
  @BeforeInsert()
  updateDates() {
    this.createdDate = new Date();
  }
}

----------------------------------------

TITLE: Finding Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to find entities that match specified conditions using the repository's find method.

LANGUAGE: typescript
CODE:
const timbers = await repository.find({ firstName: "Timber" });

----------------------------------------

TITLE: Updating Entities with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet shows how to use TypeORM's Query Builder to create and execute an UPDATE query. It updates the firstName and lastName fields of a User entity where the id matches a specific value.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

await getConnection()
  .createQueryBuilder()
  .update(User)
  .set({ firstName: "Timber", lastName: "Saw" })
  .where("id = :id", { id: 1 })
  .execute();

----------------------------------------

TITLE: Defining a Post Entity in TypeORM
DESCRIPTION: Example of a TypeORM entity definition for a Post model with id, title, and text columns.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from "typeorm";

@Entity()
export class Post {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;
}

----------------------------------------

TITLE: Creating TypeORM Connection with SQL.js in Browser
DESCRIPTION: This TypeScript snippet demonstrates how to create a TypeORM connection using SQL.js in a browser environment. It specifies the connection type as 'sqljs', includes an entity (Photo), and enables schema synchronization.

LANGUAGE: typescript
CODE:
createConnection({
  type: "sqljs",
  entities: [Photo],
  synchronize: true
});

----------------------------------------

TITLE: Implementing Data Mapper Pattern in TypeORM
DESCRIPTION: Shows how to create an entity using the Data Mapper pattern, which separates the entity definition from its database operations.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  isActive: boolean;
}

----------------------------------------

TITLE: Caching Configuration in TypeORM
DESCRIPTION: Demonstrates how to implement and configure caching in TypeORM queries and data source

LANGUAGE: typescript
CODE:
const dataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    cache: {
        type: "redis",
        options: {
            host: "localhost",
            port: 6379
        }
    }
});

----------------------------------------

TITLE: Displaying Resulting Database Tables with Embedded Columns
DESCRIPTION: This snippet shows the resulting database table structures after using embedded columns. It demonstrates how the embedded Name class columns are merged into the User, Employee, and Student tables.

LANGUAGE: bash
CODE:
+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| isActive    | boolean      |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                        employee                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| salary      | int(11)      |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                         student                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| faculty     | varchar(255) |                            |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Inserting Entities in TypeORM Repository
DESCRIPTION: Illustrates how to insert a new entity or an array of entities using the repository's insert method.

LANGUAGE: typescript
CODE:
await repository.insert({
  firstName: "Timber",
  lastName: "Timber"
});

await manager.insert(User, [
  {
    firstName: "Foo",
    lastName: "Bar"
  },
  {
    firstName: "Rizz",
    lastName: "Rak"
  }
]);

----------------------------------------

TITLE: Configuring Webpack for TypeORM in Browser
DESCRIPTION: This snippet shows how to configure Webpack to use the browser version of TypeORM and provide SQL.js. It uses NormalModuleReplacementPlugin to replace 'typeorm' with 'typeorm/browser' and ProvidePlugin to make SQL.js available globally.

LANGUAGE: javascript
CODE:
plugins: [
    ..., // 已有的任何现有插件
    new webpack.NormalModuleReplacementPlugin(/typeorm$/, function (result) {
        result.request = result.request.replace(/typeorm/, "typeorm/browser");
    }),
    new webpack.ProvidePlugin({
      'window.SQL': 'sql.js/js/sql.js'
    })
]

----------------------------------------

TITLE: Renaming Column in SQL Migration
DESCRIPTION: SQL query to rename the 'title' column to 'name' in the 'post' table for a PostgreSQL database.

LANGUAGE: sql
CODE:
ALTER TABLE "post" RENAME COLUMN "title" TO "name";

----------------------------------------

TITLE: Executing Transactions in TypeORM EntityManager
DESCRIPTION: Shows how to use the transaction method to execute multiple database operations within a single transaction. All operations must use the provided manager instance.

LANGUAGE: typescript
CODE:
await manager.transaction(async manager => {
  // NOTE: you must perform all database operations using the given manager instance
  // it's a special instance of EntityManager working with this transaction
  // and don't forget to await things here
  // 注意：你必须使用给定的管理器实例执行所有数据库操作，
  // 它是一个使用此事务的EntityManager的特殊实例。
  // 在这里处理一些操作
});

----------------------------------------

TITLE: Executing Transactions in TypeORM EntityManager
DESCRIPTION: Shows how to use the transaction method to execute multiple database operations within a single transaction. All operations must use the provided manager instance.

LANGUAGE: typescript
CODE:
await manager.transaction(async manager => {
  // NOTE: you must perform all database operations using the given manager instance
  // it's a special instance of EntityManager working with this transaction
  // and don't forget to await things here
  // 注意：你必须使用给定的管理器实例执行所有数据库操作，
  // 它是一个使用此事务的EntityManager的特殊实例。
  // 在这里处理一些操作
});

----------------------------------------

TITLE: Creating QueryRunner Instance in TypeORM
DESCRIPTION: Demonstrates how to create a new QueryRunner instance from a data source. QueryRunner takes a single connection from the connection pool for RDBMS that support connection pooling.

LANGUAGE: typescript
CODE:
const queryRunner = dataSource.createQueryRunner()

----------------------------------------

TITLE: Saving One-to-One Relationship Example
DESCRIPTION: Example showing how to create and save related User and Profile entities.

LANGUAGE: typescript
CODE:
const profile = new Profile();
profile.gender = "male";
profile.photo = "me.jpg";
await connection.manager.save(profile);

const user = new User();
user.name = "Joe Smith";
user.profile = profile;
await connection.manager.save(user);

----------------------------------------

TITLE: Preloading Entities in TypeORM Repository
DESCRIPTION: Shows how to create a new entity from a plain javascript object, loading it from the database if it exists.

LANGUAGE: typescript
CODE:
const partialUser = {
  id: 1,
  firstName: "Rizzrak",
  profile: {
    id: 1
  }
};
const user = await repository.preload(partialUser);
// user will contain all missing data from partialUser with partialUser property values:
// { id: 1, firstName: "Rizzrak", lastName: "Saw", profile: { id: 1, ... } }

----------------------------------------

TITLE: Model Definition Patterns
DESCRIPTION: Shows how to define database models/entities in both frameworks, including field definitions and data types. Demonstrates TypeORM's decorator-based approach versus Sequelize's define method.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class Project {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  description: string;
}

@Entity()
export class Task {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column("text")
  description: string;

  @Column()
  deadline: Date;
}

----------------------------------------

TITLE: Schema Synchronization Examples
DESCRIPTION: Demonstrates how to perform database schema synchronization in both frameworks. Shows the simpler TypeORM approach using connection options.

LANGUAGE: javascript
CODE:
Project.sync({ force: true });
Task.sync({ force: true });

LANGUAGE: typescript
CODE:
createConnection({
  type: "mysql",
  host: "localhost",
  username: "username",
  password: "password",
  synchronize: true
});

----------------------------------------

TITLE: TypeORM Migration Class Structure
DESCRIPTION: Basic structure of a TypeORM migration class with up and down methods for applying and reverting changes.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner } from "typeorm";

export class PostRefactoringTIMESTAMP implements MigrationInterface {
  async up(queryRunner: QueryRunner): Promise<void> {}

  async down(queryRunner: QueryRunner): Promise<void> {}
}

----------------------------------------

TITLE: Sample ormconfig.js Configuration for TypeORM (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to create an ormconfig.js file for TypeORM. It exports an object containing connection parameters similar to the JSON configuration.

LANGUAGE: javascript
CODE:
module.exports = {
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
}

----------------------------------------

TITLE: Releasing QueryRunner Connection in TypeORM
DESCRIPTION: Demonstrates how to properly release a QueryRunner connection back to the connection pool when it's no longer needed. This is an important step to prevent connection leaks.

LANGUAGE: typescript
CODE:
await queryRunner.release()

----------------------------------------

TITLE: Environment Variables Configuration for TypeORM (.env)
DESCRIPTION: This snippet shows how to set up TypeORM configuration using environment variables in a .env or ormconfig.env file. It includes various TypeORM-specific environment variables for connection settings.

LANGUAGE: ini
CODE:
TYPEORM_CONNECTION = mysql
TYPEORM_HOST = localhost
TYPEORM_USERNAME = root
TYPEORM_PASSWORD = admin
TYPEORM_DATABASE = test
TYPEORM_PORT = 3000
TYPEORM_SYNCHRONIZE = true
TYPEORM_LOGGING = true
TYPEORM_ENTITIES = entity/.*js,modules/**/entity/.*js

----------------------------------------

TITLE: Loading Related Data Using Find Options
DESCRIPTION: Shows how to load related entities using the find method with relations option.

LANGUAGE: typescript
CODE:
const questionRepository = connection.getRepository(Question);
const questions = await questionRepository.find({ relations: ["categories"] });

----------------------------------------

TITLE: Database Connection Setup Comparison
DESCRIPTION: Shows how to establish database connections in both Sequelize and TypeORM. Demonstrates connection creation, authentication, and error handling patterns.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize("database", "username", "password", {
  host: "localhost",
  dialect: "mysql"
});

sequelize
  .authenticate()
  .then(() => {
    console.log("Connection has been established successfully.");
  })
  .catch(err => {
    console.error("Unable to connect to the database:", err);
  });

LANGUAGE: typescript
CODE:
import { createConnection } from "typeorm";

createConnection({
  type: "mysql",
  host: "localhost",
  username: "username",
  password: "password"
})
  .then(connection => {
    console.log("Connection has been established successfully.");
  })
  .catch(err => {
    console.error("Unable to connect to the database:", err);
  });

----------------------------------------

TITLE: Defining Basic MongoDB Entity in TypeORM
DESCRIPTION: Shows how to define a basic MongoDB entity with ObjectId primary key and simple columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm";

@Entity()
export class User {
  @ObjectIdColumn()
  id: ObjectId;

  @Column()
  firstName: string;

  @Column()
  lastName: string;
}

----------------------------------------

TITLE: Finding One Entity in TypeORM Repository
DESCRIPTION: Demonstrates how to find the first entity matching an ID or find options using the repository's findOne method.

LANGUAGE: typescript
CODE:
const user = await repository.findOne(1);
const timber = await repository.findOne({ firstName: "Timber" });

----------------------------------------

TITLE: Introducing QueryRunner Concept in TypeORM
DESCRIPTION: This snippet introduces the concept of QueryRunner in TypeORM, which is used for executing database-related queries. No specific implementation details are provided.

LANGUAGE: markdown
CODE:
# Query Runner

`QueryRunner`用于执行与数据库相关的查询。

待定

----------------------------------------

TITLE: Upsert Operations in TypeORM
DESCRIPTION: Examples of upsert operations with various options and database-specific features.

LANGUAGE: typescript
CODE:
await repository.upsert(
    [
        { externalId: "abc123", firstName: "Rizzrak" },
        { externalId: "bca321", firstName: "Karzzir" }
    ],
    ["externalId"]
)

----------------------------------------

TITLE: Loading Relations in TypeORM
DESCRIPTION: Shows how to load related entities using RelationQueryBuilder, demonstrating both loadMany for collection relations and loadOne for single relations.

LANGUAGE: typescript
CODE:
const post = await dataSource.manager.findOneBy(Post, {
    id: 1,
})

post.categories = await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .loadMany()

post.author = await dataSource
    .createQueryBuilder()
    .relation(Post, "user")
    .of(post)
    .loadOne()

----------------------------------------

TITLE: Loading Relations in TypeORM
DESCRIPTION: Shows how to load related entities using RelationQueryBuilder, demonstrating both loadMany for collection relations and loadOne for single relations.

LANGUAGE: typescript
CODE:
const post = await dataSource.manager.findOneBy(Post, {
    id: 1,
})

post.categories = await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .loadMany()

post.author = await dataSource
    .createQueryBuilder()
    .relation(Post, "user")
    .of(post)
    .loadOne()

----------------------------------------

TITLE: Adding Relation with Composite Keys in TypeORM
DESCRIPTION: Shows how to add relations when working with composite primary keys by passing ID maps for both entities.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of({ firstPostId: 1, secondPostId: 3 })
    .add({ firstCategoryId: 2, secondCategoryId: 4 })

----------------------------------------

TITLE: Finding and Counting Entities in TypeORM Repository
DESCRIPTION: Shows how to find entities that match conditions and count all entities matching the conditions using the repository's findAndCount method.

LANGUAGE: typescript
CODE:
const [timbers, timbersCount] = await repository.findAndCount({ firstName: "Timber" });

----------------------------------------

TITLE: Creating Multiple Database Connections in TypeORM
DESCRIPTION: Demonstrates how to create multiple database connections with different configurations using TypeORM's createConnections method. Each connection has its own settings and entity configurations.

LANGUAGE: typescript
CODE:
import {createConnections} from "typeorm";

const connections = await createConnections([{
    name: "db1Connection",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "admin",
    database: "db1",
    entities: [__dirname + "/entity/*{.js,.ts}"],
    synchronize: true
}, {
    name: "db2Connection",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "admin",
    database: "db2",
    entities: [__dirname + "/entity/*{.js,.ts}"],
    synchronize: true
}]);

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Question Entity in TypeORM
DESCRIPTION: Defines a 'Question' entity extending the 'Content' base class, adding an 'answersCount' property. This creates a separate table for questions with inherited and custom columns.

LANGUAGE: typescript
CODE:
@Entity()
export class Question extends Content {
    @Column()
    answersCount: number
}

----------------------------------------

TITLE: Creating Entity Instances in TypeORM Repository
DESCRIPTION: Illustrates how to create new instances of an entity using the repository's create method.

LANGUAGE: typescript
CODE:
const user = repository.create(); // same as const user = new User();
const user = repository.create({
  id: 1,
  firstName: "Timber",
  lastName: "Saw"
}); // same as const user = new User(); user.firstName = "Timber"; user.lastName = "Saw";

----------------------------------------

TITLE: Defining a View Entity with String Expression in TypeORM
DESCRIPTION: This snippet demonstrates how to create a view entity using a string SQL expression. It includes options for naming, database, schema, and the required expression parameter.

LANGUAGE: typescript
CODE:
@ViewEntity({
    expression: `
        SELECT "post"."id" AS "id", "post"."name" AS "name", "category"."name" AS "categoryName"
        FROM "post" "post"
        LEFT JOIN "category" "category" ON "post"."categoryId" = "category"."id"
    `
})

----------------------------------------

TITLE: Accessing QueryRunner in TypeORM Repository
DESCRIPTION: Illustrates how to access the QueryRunner used by the EntityManager in a repository.

LANGUAGE: typescript
CODE:
const queryRunner = repository.queryRunner;

----------------------------------------

TITLE: Inserting Data with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet demonstrates how to use TypeORM's Query Builder to insert multiple records into a database. It shows how to create an INSERT query, specify the target entity, and provide an array of values to be inserted.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

await getConnection()
  .createQueryBuilder()
  .insert()
  .into(User)
  .values([{ firstName: "Timber", lastName: "Saw" }, { firstName: "Phantom", lastName: "Lancer" }])
  .execute();

----------------------------------------

TITLE: Loading Related Entities Using Find Options
DESCRIPTION: Demonstrates how to load User entities with their related Profile using relations option.

LANGUAGE: typescript
CODE:
const userRepository = connection.getRepository(User);
const users = await userRepository.find({ relations: ["profile"] });

----------------------------------------

TITLE: Merging Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to merge multiple entities into a single entity using the repository's merge method.

LANGUAGE: typescript
CODE:
const user = new User();
repository.merge(user, { firstName: "Timber" }, { lastName: "Saw" }); // same as user.firstName = "Timber"; user.lastName = "Saw";

----------------------------------------

TITLE: Schema Synchronization Configuration
DESCRIPTION: Shows how to enable schema synchronization in both ORMs. Sequelize requires explicit sync calls per model while TypeORM uses a configuration option.

LANGUAGE: javascript
CODE:
Project.sync({ force: true })
Task.sync({ force: true })

LANGUAGE: typescript
CODE:
const dataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    username: "username",
    password: "password",
    synchronize: true,
})

----------------------------------------

TITLE: Subquery Example
DESCRIPTION: Demonstrates how to create and use subqueries within the main query

LANGUAGE: typescript
CODE:
const posts = await dataSource
    .getRepository(Post)
    .createQueryBuilder("post")
    .where((qb) => {
        const subQuery = qb
            .subQuery()
            .select("user.name")
            .from(User, "user")
            .where("user.registered = :registered")
            .getQuery()
        return "post.title IN " + subQuery
    })
    .setParameter("registered", true)
    .getMany()

----------------------------------------

TITLE: Registering View Entities in TypeORM Connection Options
DESCRIPTION: This snippet demonstrates how to register view entities in the connection options when creating a TypeORM connection. It shows both individual entity registration and directory-based entity loading.

LANGUAGE: typescript
CODE:
import {createConnection, Connection} from "typeorm";
import {UserView} from "./entity/UserView";

const connection: Connection = await createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [UserView]
});

LANGUAGE: typescript
CODE:
import {createConnection, Connection} from "typeorm";

const connection: Connection = await createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: ["entity/*.js"]
});

----------------------------------------

TITLE: Combining Operators in TypeORM Query
DESCRIPTION: Demonstrates how to combine multiple operators, including 'Not', in a complex TypeORM query.

LANGUAGE: typescript
CODE:
import { Not, MoreThan, Equal } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    likes: Not(MoreThan(10)),
    title: Not(Equal("About #2"))
});

----------------------------------------

TITLE: Bidirectional Profile Entity Definition
DESCRIPTION: Profile entity definition with bidirectional one-to-one relationship to User entity.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne } from "typeorm";
import { User } from "./User";

@Entity()
export class Profile {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  gender: string;

  @Column()
  photo: string;

  @OneToOne(() => User, user => user.profile)
  user: User;
}

----------------------------------------

TITLE: Using Raw SQL in TypeORM Query
DESCRIPTION: Shows how to use raw SQL expressions in a TypeORM query using the 'Raw' operator.

LANGUAGE: typescript
CODE:
import { Raw } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    likes: Raw("1 + likes = 4")
});

----------------------------------------

TITLE: Defining an Entity with Columns in TypeORM
DESCRIPTION: Example of using @Entity and @Column decorators to define a database table and its columns.

LANGUAGE: typescript
CODE:
@Entity("users")
export class User {
    @Column({ primary: true })
    id: number

    @Column({ type: "varchar", length: 200, unique: true })
    firstName: string

    @Column({ nullable: true })
    lastName: string

    @Column({ default: false })
    isActive: boolean
}

----------------------------------------

TITLE: Creating Transactions with EntityManager in TypeORM
DESCRIPTION: Shows how to create a transaction using the EntityManager object in TypeORM. Similar to the DataSource method, it uses a callback function with a transactional entity manager.

LANGUAGE: typescript
CODE:
await myDataSource.manager.transaction(async (transactionalEntityManager) => {
    // execute queries using transactionalEntityManager
})

----------------------------------------

TITLE: Defining Category Entity Schema in JavaScript
DESCRIPTION: Creates a Category entity schema using TypeORM's EntitySchema class. Defines a simple category structure with an auto-generated ID and name field.

LANGUAGE: typescript
CODE:
var EntitySchema = require("typeorm").EntitySchema;

module.exports = new EntitySchema({
  name: "Category",
  columns: {
    id: {
      primary: true,
      type: "int",
      generated: true
    },
    name: {
      type: "varchar"
    }
  }
});

----------------------------------------

TITLE: Setting up Data Source - Sequelize vs TypeORM
DESCRIPTION: Demonstrates how to initialize database connections in both Sequelize and TypeORM. Shows the syntax differences and connection validation methods.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize("database", "username", "password", {
    host: "localhost",
    dialect: "mysql",
})

sequelize
    .authenticate()
    .then(() => {
        console.log("Data Source has been initialized successfully.")
    })
    .catch((err) => {
        console.error("Error during Data Source initialization:", err)
    })

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const dataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    username: "username",
    password: "password",
})

dataSource
    .initialize()
    .then(() => {
        console.log("Data Source has been initialized successfully.")
    })
    .catch((err) => {
        console.error("Error during Data Source initialization:", err)
    })

----------------------------------------

TITLE: Using Between Operator in TypeORM Query
DESCRIPTION: Shows how to use the 'Between' operator in a TypeORM query to find values within a range.

LANGUAGE: typescript
CODE:
import { Between } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    likes: Between(1, 10)
});

----------------------------------------

TITLE: Loading Bidirectional Relationship Using QueryBuilder
DESCRIPTION: Demonstrates how to load Profile entities with their related User using QueryBuilder in a bidirectional relationship.

LANGUAGE: typescript
CODE:
const profiles = await connection
  .getRepository(Profile)
  .createQueryBuilder("profile")
  .leftJoinAndSelect("profile.user", "user")
  .getMany();

----------------------------------------

TITLE: Initializing TypeORM Project
DESCRIPTION: Commands for initializing a new TypeORM project with various configurations including database type, Express integration, and Docker support.

LANGUAGE: bash
CODE:
typeorm init
typeorm init --name my-project
typeorm init --database mssql
typeorm init --name my-project --module esm
typeorm init --name my-project --express
typeorm init --docker

----------------------------------------

TITLE: Implementing Closure Table Tree in TypeORM
DESCRIPTION: Shows how to create a Closure Table tree structure. This pattern stores parent-child relationships in a separate table and is efficient for both reading and writing.

LANGUAGE: typescript
CODE:
import {Entity, Tree, Column, PrimaryGeneratedColumn, TreeChildren, TreeParent, TreeLevelColumn} from "typeorm";

@Entity()
@Tree("closure-table")
export class Category {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @TreeChildren()
    children: Category[];

    @TreeParent()
    parent: Category;
}

----------------------------------------

TITLE: Query Execution in TypeORM
DESCRIPTION: Examples of executing raw SQL queries with different database driver syntaxes.

LANGUAGE: typescript
CODE:
const rawData = await repository.query(`SELECT * FROM USERS`)

// Different parameter syntax per database driver
const rawData = await repository.query(
    'SELECT * FROM USERS WHERE name = ? and age = ?',
    [ 'John', 24 ]
)

----------------------------------------

TITLE: Initializing TypeORM Project
DESCRIPTION: Commands for initializing a new TypeORM project with various configurations including database type, Express integration, and Docker support.

LANGUAGE: bash
CODE:
typeorm init
typeorm init --name my-project
typeorm init --database mssql
typeorm init --name my-project --module esm
typeorm init --name my-project --express
typeorm init --docker

----------------------------------------

TITLE: Query Execution in TypeORM
DESCRIPTION: Examples of executing raw SQL queries with different database driver syntaxes.

LANGUAGE: typescript
CODE:
const rawData = await repository.query(`SELECT * FROM USERS`)

// Different parameter syntax per database driver
const rawData = await repository.query(
    'SELECT * FROM USERS WHERE name = ? and age = ?',
    [ 'John', 24 ]
)

----------------------------------------

TITLE: Query Execution in TypeORM
DESCRIPTION: Examples of executing raw SQL queries with different database driver syntaxes.

LANGUAGE: typescript
CODE:
const rawData = await repository.query(`SELECT * FROM USERS`)

// Different parameter syntax per database driver
const rawData = await repository.query(
    'SELECT * FROM USERS WHERE name = ? and age = ?',
    [ 'John', 24 ]
)

----------------------------------------

TITLE: Counting and Modifying Entity Properties in TypeORM EntityManager
DESCRIPTION: Demonstrates how to count entities matching specific conditions and how to increment or decrement numeric properties of entities that match certain criteria.

LANGUAGE: typescript
CODE:
const count = await manager.count(User, { firstName: "Timber" });

LANGUAGE: typescript
CODE:
await manager.increment(User, { firstName: "Timber" }, "age", 3);

LANGUAGE: typescript
CODE:
await manager.decrement(User, { firstName: "Timber" }, "age", 3);

----------------------------------------

TITLE: Ordering Results in TypeORM Query
DESCRIPTION: Shows how to order query results using the 'order' option in TypeORM.

LANGUAGE: typescript
CODE:
userRepository.find({
    order: {
        name: "ASC",
        id: "DESC"
    }
});

----------------------------------------

TITLE: Basic Where Clause in TypeORM Query
DESCRIPTION: Demonstrates how to use a simple 'where' clause to filter entities in a query.

LANGUAGE: typescript
CODE:
userRepository.find({ where: { firstName: "Timber", lastName: "Saw" } });

----------------------------------------

TITLE: Creating a One-to-One Relationship in TypeORM
DESCRIPTION: Example of how to create a one-to-one relationship between two entities using TypeORM decorators.

LANGUAGE: TypeScript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from "typeorm"
import { Photo } from "./Photo"

@Entity()
export class PhotoMetadata {
    @PrimaryGeneratedColumn()
    id: number

    @Column("int")
    height: number

    @Column("int")
    width: number

    @Column()
    orientation: string

    @Column()
    compressed: boolean

    @Column()
    comment: string

    @OneToOne(type => Photo)
    @JoinColumn()
    photo: Photo
}

----------------------------------------

TITLE: Releasing QueryRunner in TypeORM EntityManager
DESCRIPTION: Demonstrates how to release the query runner of an EntityManager. This is only used when manually creating and managing query runners.

LANGUAGE: typescript
CODE:
await manager.release();

----------------------------------------

TITLE: Using Custom Repositories in Transactions
DESCRIPTION: Demonstrates how to properly use custom repositories within transactions using the manager.withRepository method to ensure transaction integrity.

LANGUAGE: typescript
CODE:
await connection.transaction(async (manager) => {
    // 在事务中你必须使用其提供的实体管理器实例，
    // 不能使用全局的实体管理器或者存储库，
    // 因为这个实体管理器具有排他性和事务性

    const userRepository = manager.withRepository(UserRepository)
    await userRepository.createAndSave("Timber", "Saw")
    const timber = await userRepository.findByName("Timber", "Saw")
})

----------------------------------------

TITLE: Installing TypeORM CLI Dependencies for TypeScript
DESCRIPTION: Instructions for installing ts-node and configuring package.json for TypeScript projects using TypeORM CLI.

LANGUAGE: bash
CODE:
npm install ts-node --save-dev

LANGUAGE: json
CODE:
"scripts": {
    "typeorm": "typeorm-ts-node-commonjs"
}

LANGUAGE: json
CODE:
"scripts": {
    "typeorm": "typeorm-ts-node-esm"
}

----------------------------------------

TITLE: Configuring One-to-One Relationships in TypeORM
DESCRIPTION: Example of setting up a one-to-one relationship between User and Photo entities, demonstrating the concept of relationship ownership.

LANGUAGE: typescript
CODE:
@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToOne()
  photo: Photo;
}

@Entity()
export class Photo {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  url: string;

  @OneToOne()
  user: User;
}

----------------------------------------

TITLE: Using QueryBuilder in TypeORM
DESCRIPTION: Example of how to use QueryBuilder to construct complex SQL queries in TypeORM.

LANGUAGE: TypeScript
CODE:
let photos = await connection
    .getRepository(Photo)
    .createQueryBuilder("photo")
    .innerJoinAndSelect("photo.metadata", "metadata")
    .leftJoinAndSelect("photo.albums", "album")
    .where("photo.isPublished = true")
    .andWhere("(photo.name = :photoName OR photo.name = :bearName)")
    .orderBy("photo.id", "DESC")
    .skip(5)
    .take(10)
    .setParameters({ photoName: "My", bearName: "Mishka" })
    .getMany()

----------------------------------------

TITLE: Creating Basic TypeORM Entity in TypeScript
DESCRIPTION: Demonstrates how to create a basic User entity with primary key and columns. Shows the resulting table structure.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

    @Column()
    isActive: boolean;
}

----------------------------------------

TITLE: Implementing TypeORM Migration for Column Rename
DESCRIPTION: Complete TypeORM migration class implementation for renaming the 'title' column to 'name' in the 'post' table.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner } from "typeorm";

export class PostRefactoringTIMESTAMP implements MigrationInterface {
  async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`ALTER TABLE "post" ALTER COLUMN "title" RENAME TO "name"`);
  }

  async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`ALTER TABLE "post" ALTER COLUMN "name" RENAME TO "title"`);
  }
}

----------------------------------------

TITLE: Configuring JoinTable Options in TypeORM
DESCRIPTION: Shows how to customize the junction table settings for many-to-many relationships including table name and column configurations.

LANGUAGE: typescript
CODE:
@ManyToMany(type => Category)
@JoinTable({
    name: "question_categories",
    joinColumn: {
        name: "question",
        referencedColumnName: "id"
    },
    inverseJoinColumn: {
        name: "category",
        referencedColumnName: "id"
    }
})
categories: Category[];

----------------------------------------

TITLE: Creating Unique Indices in TypeORM
DESCRIPTION: Demonstrates creation of unique indices using the @Index decorator with the unique option set to true.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Index({ unique: true })
    @Column()
    firstName: string

    @Column()
    @Index({ unique: true })
    lastName: string
}

----------------------------------------

TITLE: Redis Cache Configuration
DESCRIPTION: Configuration for using Redis as cache storage backend.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: {
        type: "redis",
        options: {
            host: "localhost",
            port: 6379
        }
    }
}

----------------------------------------

TITLE: Finding Entities by IDs in TypeORM Repository
DESCRIPTION: Illustrates how to find multiple entities by their IDs using the repository's findByIds method.

LANGUAGE: typescript
CODE:
const users = await repository.findByIds([1, 2, 3]);

----------------------------------------

TITLE: Defining a View Entity with QueryBuilder in TypeORM
DESCRIPTION: This example shows how to create a view entity using TypeORM's QueryBuilder. It constructs the view definition programmatically, allowing for more dynamic and type-safe view creation.

LANGUAGE: typescript
CODE:
@ViewEntity({
    expression: (dataSource: DataSource) => dataSource
        .createQueryBuilder()
        .select("post.id", "id")
        .addSelect("post.name", "name")
        .addSelect("category.name", "categoryName")
        .from(Post, "post")
        .leftJoin(Category, "category", "category.id = post.categoryId")
})

----------------------------------------

TITLE: Configuring Advanced Cascade Options in TypeORM
DESCRIPTION: Demonstrates various cascade options for different types of relationships including insert, update, and combined options.

LANGUAGE: typescript
CODE:
@Entity(Post)
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany((type) => PostCategory, {
        cascade: true,
    })
    @JoinTable()
    categories: PostCategory[]

    @ManyToMany((type) => PostDetails, (details) => details.posts, {
        cascade: ["insert"],
    })
    @JoinTable()
    details: PostDetails[]

    @ManyToMany((type) => PostImage, (image) => image.posts, {
        cascade: ["update"],
    })
    @JoinTable()
    images: PostImage[]

    @ManyToMany((type) => PostInformation, (information) => information.posts, {
        cascade: ["insert", "update"],
    })
    @JoinTable()
    informations: PostInformation[]
}

----------------------------------------

TITLE: Defining a View Entity with QueryBuilder in TypeORM
DESCRIPTION: This example shows how to create a view entity using TypeORM's QueryBuilder. It constructs the view definition programmatically, allowing for more dynamic and type-safe view creation.

LANGUAGE: typescript
CODE:
@ViewEntity({
    expression: (dataSource: DataSource) => dataSource
        .createQueryBuilder()
        .select("post.id", "id")
        .addSelect("post.name", "name")
        .addSelect("category.name", "categoryName")
        .from(Post, "post")
        .leftJoin(Category, "category", "category.id = post.categoryId")
})

----------------------------------------

TITLE: Implementing @AfterLoad Entity Listener in TypeORM
DESCRIPTION: Demonstrates how to use the @AfterLoad decorator to define a method that is called each time an entity is loaded using QueryBuilder or repository/manager find methods.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
    @AfterLoad()
    updateCounters() {
        if (this.likesCount === undefined) this.likesCount = 0
    }
}

----------------------------------------

TITLE: Creating and Managing TypeORM Entities and Subscribers
DESCRIPTION: Commands for creating new entities and subscribers in a TypeORM project.

LANGUAGE: bash
CODE:
typeorm entity:create path-to-entity-dir/entity
typeorm subscriber:create path-to-subscriber-dir/subscriber

----------------------------------------

TITLE: Global Cache Duration Configuration
DESCRIPTION: Setting global cache duration in connection options.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: {
        duration: 30000 // 30 seconds
    }
}

----------------------------------------

TITLE: Custom Cache Duration in QueryBuilder
DESCRIPTION: Setting custom cache duration (60000ms) in QueryBuilder query.

LANGUAGE: typescript
CODE:
const users = await connection
  .createQueryBuilder(User, "user")
  .where("user.isAdmin = :isAdmin", { isAdmin: true })
  .cache(60000) // 1 minute
  .getMany();

----------------------------------------

TITLE: QueryBuilder Creation Methods
DESCRIPTION: Different ways to create a QueryBuilder instance using connection, entity manager, or repository

LANGUAGE: typescript
CODE:
// Using connection
const user = await getConnection()
  .createQueryBuilder()
  .select("user")
  .from(User, "user")
  .where("user.id = :id", { id: 1 })
  .getOne();

// Using entity manager
const user = await getManager()
  .createQueryBuilder(User, "user")
  .where("user.id = :id", { id: 1 })
  .getOne();

// Using repository
const user = await getRepository(User)
  .createQueryBuilder("user")
  .where("user.id = :id", { id: 1 })
  .getOne();

----------------------------------------

TITLE: Defining View Entity Columns in TypeORM
DESCRIPTION: This example demonstrates how to define columns in a view entity using the @ViewColumn() decorator. It maps data from the view to entity properties, ensuring correct column naming.

LANGUAGE: typescript
CODE:
import { ViewEntity, ViewColumn } from "typeorm"

@ViewEntity({
    expression: `
        SELECT "post"."id" AS "id", "post"."name" AS "name", "category"."name" AS "categoryName"
        FROM "post" "post"
        LEFT JOIN "category" "category" ON "post"."categoryId" = "category"."id"
    `,
})
export class PostCategory {
    @ViewColumn()
    id: number

    @ViewColumn()
    name: string

    @ViewColumn()
    categoryName: string
}

----------------------------------------

TITLE: Clearing Entity Data in TypeORM EntityManager
DESCRIPTION: Demonstrates how to clear all data from a specific entity table using the EntityManager clear method.

LANGUAGE: typescript
CODE:
await manager.clear(User);

----------------------------------------

TITLE: Defining View Entity Columns in TypeORM
DESCRIPTION: This example demonstrates how to define columns in a view entity using the @ViewColumn() decorator. It maps data from the view to entity properties, ensuring correct column naming.

LANGUAGE: typescript
CODE:
import { ViewEntity, ViewColumn } from "typeorm"

@ViewEntity({
    expression: `
        SELECT "post"."id" AS "id", "post"."name" AS "name", "category"."name" AS "categoryName"
        FROM "post" "post"
        LEFT JOIN "category" "category" ON "post"."categoryId" = "category"."id"
    `,
})
export class PostCategory {
    @ViewColumn()
    id: number

    @ViewColumn()
    name: string

    @ViewColumn()
    categoryName: string
}

----------------------------------------

TITLE: Defining Post Entity Schema with Relations in JavaScript
DESCRIPTION: Creates a Post entity schema with a many-to-many relationship to Categories. Includes configuration for primary key, title, text fields, and relationship mapping with cascade options.

LANGUAGE: typescript
CODE:
var EntitySchema = require("typeorm").EntitySchema;

module.exports = new EntitySchema({
  name: "Post",
  columns: {
    id: {
      primary: true,
      type: "int",
      generated: true
    },
    title: {
      type: "varchar"
    },
    text: {
      type: "text"
    }
  },
  relations: {
    categories: {
      target: "Category",
      type: "many-to-many",
      joinTable: true,
      cascade: true
    }
  }
});

----------------------------------------

TITLE: Managing Database Schema and Queries
DESCRIPTION: Commands for synchronizing schema, logging schema changes, dropping schema, and running custom SQL queries.

LANGUAGE: bash
CODE:
typeorm schema:sync
typeorm schema:log
typeorm schema:drop -- -d path-to-datasource-config
typeorm query "SELECT * FROM USERS"
typeorm cache:clear
typeorm version

----------------------------------------

TITLE: Configuring Basic TypeORM Cache Connection
DESCRIPTION: Basic configuration to enable query caching in TypeORM database connection options.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: true
}

----------------------------------------

TITLE: Entity Relationship Example
DESCRIPTION: Sample entity definitions showing One-to-Many relationship between User and Photo entities

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from "typeorm";
import { Photo } from "./Photo";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToMany(type => Photo, photo => photo.user)
  photos: Photo[];
}

@Entity()
export class Photo {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  url: string;

  @ManyToOne(type => User, user => user.photos)
  user: User;
}

----------------------------------------

TITLE: Creating Indices for Materialized Views in TypeORM
DESCRIPTION: This snippet shows how to create indices for materialized views in PostgreSQL using TypeORM. It demonstrates the use of the @Index decorator on view columns.

LANGUAGE: typescript
CODE:
@ViewEntity({
    materialized: true,
    expression: (dataSource: DataSource) =>
        dataSource
            .createQueryBuilder()
            .select("post.id", "id")
            .addSelect("post.name", "name")
            .addSelect("category.name", "categoryName")
            .from(Post, "post")
            .leftJoin(Category, "category", "category.id = post.categoryId"),
})
export class PostCategory {
    @ViewColumn()
    id: number

    @Index()
    @ViewColumn()
    name: string

    @Index("catname-idx")
    @ViewColumn()
    categoryName: string
}

----------------------------------------

TITLE: Registering View Entities in DataSource Options
DESCRIPTION: This snippet shows how to register view entities in the TypeORM data source options. It's necessary to include all view entities in the 'entities' array when configuring the data source.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"
import { UserView } from "./entity/UserView"

const dataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [UserView],
})

----------------------------------------

TITLE: Inserting and Updating Entities in TypeORM EntityManager
DESCRIPTION: Demonstrates how to insert new entities and update existing entities using specific EntityManager methods. These methods allow for more targeted operations than the general save method.

LANGUAGE: typescript
CODE:
await manager.insert(User, {
  firstName: "Timber",
  lastName: "Timber"
});

await manager.insert(User, [
  {
    firstName: "Foo",
    lastName: "Bar"
  },
  {
    firstName: "Rizz",
    lastName: "Rak"
  }
]);

LANGUAGE: typescript
CODE:
await manager.update(User, { firstName: "Timber" }, { firstName: "Rizzrak" });
// 执行 UPDATE user SET firstName = Rizzrak WHERE firstName = Timber

await manager.update(User, 1, { firstName: "Rizzrak" });
// 执行 UPDATE user SET firstName = Rizzrak WHERE id = 1

----------------------------------------

TITLE: Creating Indices for Materialized Views in TypeORM
DESCRIPTION: This snippet shows how to create indices for materialized views in PostgreSQL using TypeORM. It demonstrates the use of the @Index decorator on view columns.

LANGUAGE: typescript
CODE:
@ViewEntity({
    materialized: true,
    expression: (dataSource: DataSource) =>
        dataSource
            .createQueryBuilder()
            .select("post.id", "id")
            .addSelect("post.name", "name")
            .addSelect("category.name", "categoryName")
            .from(Post, "post")
            .leftJoin(Category, "category", "category.id = post.categoryId"),
})
export class PostCategory {
    @ViewColumn()
    id: number

    @Index()
    @ViewColumn()
    name: string

    @Index("catname-idx")
    @ViewColumn()
    categoryName: string
}

----------------------------------------

TITLE: Basic QueryBuilder Select Example
DESCRIPTION: Shows how to create a basic select query using QueryBuilder to fetch a user by ID

LANGUAGE: typescript
CODE:
const firstUser = await dataSource
    .getRepository(User)
    .createQueryBuilder("user")
    .where("user.id = :id", { id: 1 })
    .getOne()

----------------------------------------

TITLE: Basic QueryBuilder Select Example
DESCRIPTION: Shows how to create a basic select query using QueryBuilder to fetch a user by ID

LANGUAGE: typescript
CODE:
const firstUser = await dataSource
    .getRepository(User)
    .createQueryBuilder("user")
    .where("user.id = :id", { id: 1 })
    .getOne()

----------------------------------------

TITLE: Avoiding Relationship Property Initializers in TypeORM
DESCRIPTION: Explains why initializing relationship properties in entity definitions can lead to unintended behavior when saving entities, potentially causing unwanted deletions of related data.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";
import { Category } from "./Category";

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToMany(type => Category, category => category.questions)
  @JoinTable()
  categories: Category[] = []; // Avoid this initialization
}

----------------------------------------

TITLE: Defining Entity Schema with Relations in TypeORM
DESCRIPTION: This example shows how to define an entity schema for a post with a many-to-many relationship to categories using TypeORM's EntitySchema.

LANGUAGE: typescript
CODE:
import {EntitySchema} from "typeorm";

export const PostEntity = new EntitySchema({
    name: "post",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true
        },
        title: {
            type: String
        },
        text: {
            type: String
        }
    },
    relations: {
        categories: {
            type: "many-to-many",
            target: "category" // CategoryEntity
        }
    }
});

----------------------------------------

TITLE: Using Raw SQL in TypeORM Insert Query with Query Builder in TypeScript
DESCRIPTION: This example shows how to use raw SQL functions within a TypeORM insert query. It's useful when you need to execute SQL queries directly, but requires manual value escaping.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .insert()
    .into(User)
    .values({
        firstName: "Timber",
        lastName: () => "CONCAT('S', 'A', 'W')",
    })
    .execute()

----------------------------------------

TITLE: Implementing Cache in QueryBuilder
DESCRIPTION: Example of enabling query caching in a QueryBuilder instance with a where clause filter.

LANGUAGE: typescript
CODE:
const users = await connection
  .createQueryBuilder(User, "user")
  .where("user.isAdmin = :isAdmin", { isAdmin: true })
  .cache(true)
  .getMany();

----------------------------------------

TITLE: Customizing Closure Table Options in TypeORM
DESCRIPTION: Demonstrates how to customize the closure table name and column names when using the Closure table pattern in TypeORM.

LANGUAGE: typescript
CODE:
@Tree("closure-table", {
    closureTableName: "category_closure",
    ancestorColumnName: (column) => "ancestor_" + column.propertyName,
    descendantColumnName: (column) => "descendant_" + column.propertyName,
})

----------------------------------------

TITLE: Defining Entity with Active Record Pattern in TypeScript
DESCRIPTION: Example of defining a TypeORM entity using the Active Record pattern by extending BaseEntity.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from "typeorm"

@Entity()
export class User extends BaseEntity {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    age: number
}

----------------------------------------

TITLE: Customizing Closure Table Options in TypeORM
DESCRIPTION: Demonstrates how to customize the closure table name and column names when using the Closure table pattern in TypeORM.

LANGUAGE: typescript
CODE:
@Tree("closure-table", {
    closureTableName: "category_closure",
    ancestorColumnName: (column) => "ancestor_" + column.propertyName,
    descendantColumnName: (column) => "descendant_" + column.propertyName,
})

----------------------------------------

TITLE: Defining Category Entity Schema in JavaScript
DESCRIPTION: Creates a Category entity schema definition with primary key and name column. Demonstrates how to configure table name and column properties using TypeORM's EntitySchema.

LANGUAGE: typescript
CODE:
var EntitySchema = require("typeorm").EntitySchema

module.exports = new EntitySchema({
    name: "Category", // Will use table name `category` as default behaviour.
    tableName: "categories", // Optional: Provide `tableName` property to override the default behaviour for table name.
    columns: {
        id: {
            primary: true,
            type: "int",
            generated: true,
        },
        name: {
            type: "varchar",
        },
    },
})

----------------------------------------

TITLE: Implementing Adjacency List Pattern in TypeORM
DESCRIPTION: Demonstrates how to create a self-referencing entity for the Adjacency list pattern. This approach is simple but has limitations for loading large trees due to join constraints.

LANGUAGE: typescript
CODE:
import {
    Entity,
    Column,
    PrimaryGeneratedColumn,
    ManyToOne,
    OneToMany,
} from "typeorm"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @Column()
    description: string

    @ManyToOne((type) => Category, (category) => category.children)
    parent: Category

    @OneToMany((type) => Category, (category) => category.parent)
    children: Category[]
}

----------------------------------------

TITLE: Defining Type-Safe Entity Schema in TypeORM
DESCRIPTION: This example shows how to create a type-safe entity schema by defining an interface and using it in the EntitySchema generic type in TypeORM.

LANGUAGE: typescript
CODE:
import {EntitySchema} from "typeorm";

export interface Category {
    id: number;
    name: string;
}

export const CategoryEntity = new EntitySchema<Category>({
    name: "category",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true
        },
        name: {
            type: String
        }
    }
});

----------------------------------------

TITLE: Implementing Lazy Loading in TypeORM
DESCRIPTION: Demonstrates how to set up lazy loading for related entities to improve performance by loading data only when needed

LANGUAGE: typescript
CODE:
@Entity()
export class User {
    @OneToMany(() => Post, post => post.user, { lazy: true })
    posts: Promise<Post[]>;
}

----------------------------------------

TITLE: Creating Multiple Database Connections in TypeORM
DESCRIPTION: Shows how to create multiple named database connections simultaneously using createConnections() method.

LANGUAGE: typescript
CODE:
import {createConnections} from "typeorm";

const connection = await createConnections([{
    name: "connection1",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test"
}, {
    name: "connection2",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test"
}]);

----------------------------------------

TITLE: Optimizing Queries with Join Selection in TypeORM
DESCRIPTION: Demonstrates how to avoid the N+1 query problem by using leftJoinAndSelect to fetch related data in a single query

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User)
    .createQueryBuilder("user")
    .leftJoinAndSelect("user.posts", "post")
    .getMany();

----------------------------------------

TITLE: Optimizing Queries with Join Selection in TypeORM
DESCRIPTION: Demonstrates how to avoid the N+1 query problem by using leftJoinAndSelect to fetch related data in a single query

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User)
    .createQueryBuilder("user")
    .leftJoinAndSelect("user.posts", "post")
    .getMany();

----------------------------------------

TITLE: Updating User Entity with Raw SQL in TypeORM Query Builder
DESCRIPTION: This snippet shows how to use raw SQL within a TypeORM Query Builder update operation. It demonstrates setting static values and using a function-style value for the age field to increment it.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .update(User)
    .set({
        firstName: "Timber",
        lastName: "Saw",
        age: () => "age + 1",
    })
    .where("id = :id", { id: 1 })
    .execute()

----------------------------------------

TITLE: Defining an Entity in TypeScript
DESCRIPTION: Example of how to define a Photo entity using TypeORM decorators

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class Photo {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column()
    description: string;

    @Column()
    filename: string;

    @Column()
    views: number;

    @Column()
    isPublished: boolean;
}

----------------------------------------

TITLE: Configuring Database Cache Table
DESCRIPTION: Shows how to configure the database table used for storing cache entries when using database cache type.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    ...
    cache: {
        type: "database",
        tableName: "configurable-table-query-result-cache"
    }
}

----------------------------------------

TITLE: Connecting to a Database Using URL in JavaScript with TypeORM
DESCRIPTION: Shows how to establish a database connection using only the URL and type parameters with TypeORM's createConnection function. This example uses a PostgreSQL database.

LANGUAGE: javascript
CODE:
createConnection({
    type: "postgres",
    url: "postgres://test:test@localhost/test",
})

----------------------------------------

TITLE: Complex TypeORM Migration Example
DESCRIPTION: Comprehensive example of a TypeORM migration using the QueryRunner API to create tables, indices, and foreign keys.

LANGUAGE: typescript
CODE:
import {
    MigrationInterface,
    QueryRunner,
    Table,
    TableIndex,
    TableColumn,
    TableForeignKey,
} from "typeorm"

export class QuestionRefactoringTIMESTAMP implements MigrationInterface {
    async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.createTable(
            new Table({
                name: "question",
                columns: [
                    {
                        name: "id",
                        type: "int",
                        isPrimary: true,
                    },
                    {
                        name: "name",
                        type: "varchar",
                    },
                ],
            }),
            true,
        )

        await queryRunner.createIndex(
            "question",
            new TableIndex({
                name: "IDX_QUESTION_NAME",
                columnNames: ["name"],
            }),
        )

        await queryRunner.createTable(
            new Table({
                name: "answer",
                columns: [
                    {
                        name: "id",
                        type: "int",
                        isPrimary: true,
                    },
                    {
                        name: "name",
                        type: "varchar",
                    },
                    {
                        name: "created_at",
                        type: "timestamp",
                        default: "now()",
                    },
                ],
            }),
            true,
        )

        await queryRunner.addColumn(
            "answer",
            new TableColumn({
                name: "questionId",
                type: "int",
            }),
        )

        await queryRunner.createForeignKey(
            "answer",
            new TableForeignKey({
                columnNames: ["questionId"],
                referencedColumnNames: ["id"],
                referencedTableName: "question",
                onDelete: "CASCADE",
            }),
        )
    }

    async down(queryRunner: QueryRunner): Promise<void> {
        const table = await queryRunner.getTable("answer")
        const foreignKey = table.foreignKeys.find(
            (fk) => fk.columnNames.indexOf("questionId") !== -1,
        )
        await queryRunner.dropForeignKey("answer", foreignKey)
        await queryRunner.dropColumn("answer", "questionId")
        await queryRunner.dropTable("answer")
        await queryRunner.dropIndex("question", "IDX_QUESTION_NAME")
        await queryRunner.dropTable("question")
    }
}

----------------------------------------

TITLE: Complex TypeORM Migration Example
DESCRIPTION: Comprehensive example of a TypeORM migration using the QueryRunner API to create tables, indices, and foreign keys.

LANGUAGE: typescript
CODE:
import {
    MigrationInterface,
    QueryRunner,
    Table,
    TableIndex,
    TableColumn,
    TableForeignKey,
} from "typeorm"

export class QuestionRefactoringTIMESTAMP implements MigrationInterface {
    async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.createTable(
            new Table({
                name: "question",
                columns: [
                    {
                        name: "id",
                        type: "int",
                        isPrimary: true,
                    },
                    {
                        name: "name",
                        type: "varchar",
                    },
                ],
            }),
            true,
        )

        await queryRunner.createIndex(
            "question",
            new TableIndex({
                name: "IDX_QUESTION_NAME",
                columnNames: ["name"],
            }),
        )

        await queryRunner.createTable(
            new Table({
                name: "answer",
                columns: [
                    {
                        name: "id",
                        type: "int",
                        isPrimary: true,
                    },
                    {
                        name: "name",
                        type: "varchar",
                    },
                    {
                        name: "created_at",
                        type: "timestamp",
                        default: "now()",
                    },
                ],
            }),
            true,
        )

        await queryRunner.addColumn(
            "answer",
            new TableColumn({
                name: "questionId",
                type: "int",
            }),
        )

        await queryRunner.createForeignKey(
            "answer",
            new TableForeignKey({
                columnNames: ["questionId"],
                referencedColumnNames: ["id"],
                referencedTableName: "question",
                onDelete: "CASCADE",
            }),
        )
    }

    async down(queryRunner: QueryRunner): Promise<void> {
        const table = await queryRunner.getTable("answer")
        const foreignKey = table.foreignKeys.find(
            (fk) => fk.columnNames.indexOf("questionId") !== -1,
        )
        await queryRunner.dropForeignKey("answer", foreignKey)
        await queryRunner.dropColumn("answer", "questionId")
        await queryRunner.dropTable("answer")
        await queryRunner.dropIndex("question", "IDX_QUESTION_NAME")
        await queryRunner.dropTable("question")
    }
}

----------------------------------------

TITLE: Resulting Database Schema
DESCRIPTION: The final database table structures showing how embedded columns are represented in the database.

LANGUAGE: shell
CODE:
+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| isActive    | boolean      |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                        employee                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| salary      | int(11)      |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                         student                         |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| nameFirst   | varchar(255) |                            |
| nameLast    | varchar(255) |                            |
| faculty     | varchar(255) |                            |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Saving an Entity with TypeORM
DESCRIPTION: Example of how to save a Photo entity to the database using TypeORM's repository

LANGUAGE: typescript
CODE:
const repository = connection.getRepository(User);

const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.age = 25;
await repository.save(user);

const allUsers = await repository.find();
const firstUser = await repository.findOne(1); // find by id
const timber = await repository.findOne({ firstName: "Timber", lastName: "Saw" });

await repository.remove(timber);

----------------------------------------

TITLE: Running TypeORM Tests
DESCRIPTION: Command to run TypeORM tests after setting up the environment configuration.

LANGUAGE: shell
CODE:
npm test

----------------------------------------

TITLE: Adding Many-to-Many Relation in TypeORM
DESCRIPTION: Demonstrates how to add a category to a post's categories using RelationQueryBuilder. This is more efficient than loading and saving the entire entity.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .add(category)

----------------------------------------

TITLE: TypeORM Connection Configuration
DESCRIPTION: Shows how to configure a TypeORM database connection with entity registration.

LANGUAGE: typescript
CODE:
import { createConnection, Connection } from "typeorm";
import { User } from "./entity/User";

const connection: Connection = await createConnection({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: [User]
});

----------------------------------------

TITLE: Adding Many-to-Many Relation in TypeORM
DESCRIPTION: Demonstrates how to add a category to a post's categories using RelationQueryBuilder. This is more efficient than loading and saving the entire entity.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .add(category)

----------------------------------------

TITLE: Configuring Webpack for TypeORM Backend Development
DESCRIPTION: Shows how to configure Webpack to properly handle TypeORM drivers and migration files, including settings to preserve migration class names during minification.

LANGUAGE: javascript
CODE:
const FilterWarningsPlugin = require('webpack-filter-warnings-plugin');

module.exports = {
    ...
    plugins: [
        new FilterWarningsPlugin({
            exclude: [/mongodb/, /mssql/, /mysql/, /mysql2/, /oracledb/, /pg/, /pg-native/, /pg-query-stream/, /react-native-sqlite-storage/, /redis/, /sqlite3/, /sql.js/, /typeorm-aurora-data-api-driver/]
        })
    ]
};

----------------------------------------

TITLE: Using Entity Schemas for Database Operations in TypeORM
DESCRIPTION: Example of using defined entity schemas to perform database operations such as querying and inserting data using TypeORM's repository pattern.

LANGUAGE: typescript
CODE:
// request data
const categoryRepository = dataSource.getRepository<Category>(CategoryEntity)
const category = await categoryRepository.findOneBy({
    id: 1,
}) // category is properly typed!

// insert a new category into the database
const categoryDTO = {
    // note that the ID is autogenerated; see the schema above
    name: "new category",
}
const newCategory = await categoryRepository.save(categoryDTO)

----------------------------------------

TITLE: Using Entity Schemas for Database Operations in TypeORM
DESCRIPTION: Example of using defined entity schemas to perform database operations such as querying and inserting data using TypeORM's repository pattern.

LANGUAGE: typescript
CODE:
// request data
const categoryRepository = dataSource.getRepository<Category>(CategoryEntity)
const category = await categoryRepository.findOneBy({
    id: 1,
}) // category is properly typed!

// insert a new category into the database
const categoryDTO = {
    // note that the ID is autogenerated; see the schema above
    name: "new category",
}
const newCategory = await categoryRepository.save(categoryDTO)

----------------------------------------

TITLE: Defining Entity Schema with Relations in TypeORM
DESCRIPTION: Example of defining an entity schema with a many-to-many relation in TypeORM. It shows how to set up a post entity with a categories relation.

LANGUAGE: typescript
CODE:
import { EntitySchema } from "typeorm"

export const PostEntity = new EntitySchema({
    name: "post",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true,
        },
        title: {
            type: String,
        },
        text: {
            type: String,
        },
    },
    relations: {
        categories: {
            type: "many-to-many",
            target: "category", // CategoryEntity
        },
    },
})

----------------------------------------

TITLE: Destroying DataSource in TypeORM
DESCRIPTION: Shows how to destroy a DataSource and close all database connections, typically used during application shutdown.

LANGUAGE: typescript
CODE:
await dataSource.destroy()

----------------------------------------

TITLE: Initial Project Setup Commands
DESCRIPTION: Basic terminal commands to create and initialize a new TypeScript project.

LANGUAGE: bash
CODE:
mkdir user
cd user
npm init
npm i typescript --save-dev

----------------------------------------

TITLE: Initial Project Setup Commands
DESCRIPTION: Basic terminal commands to create and initialize a new TypeScript project.

LANGUAGE: bash
CODE:
mkdir user
cd user
npm init
npm i typescript --save-dev

----------------------------------------

TITLE: Preloading Entities in TypeORM EntityManager
DESCRIPTION: Demonstrates how to preload an entity from a plain JavaScript object, loading existing data from the database and merging it with the provided object.

LANGUAGE: typescript
CODE:
const partialUser = {
  id: 1,
  firstName: "Rizzrak",
  profile: {
    id: 1
  }
};
const user = await manager.preload(User, partialUser);
// user将包含partialUser中具有partialUser属性值的所有缺失数据：
// { id: 1, firstName: "Rizzrak", lastName: "Saw", profile: { id: 1, ... } }

----------------------------------------

TITLE: Extending Entity Schemas in TypeORM
DESCRIPTION: Demonstrates how to extend entity schemas in TypeORM using the spread operator to reuse common column definitions across multiple schemas.

LANGUAGE: typescript
CODE:
import { EntitySchemaColumnOptions } from "typeorm"

export const BaseColumnSchemaPart = {
    id: {
        type: Number,
        primary: true,
        generated: true,
    } as EntitySchemaColumnOptions,
    createdAt: {
        name: "created_at",
        type: "timestamp with time zone",
        createDate: true,
    } as EntitySchemaColumnOptions,
    updatedAt: {
        name: "updated_at",
        type: "timestamp with time zone",
        updateDate: true,
    } as EntitySchemaColumnOptions,
}

export const CategoryEntity = new EntitySchema<Category>({
    name: "category",
    columns: {
        ...BaseColumnSchemaPart,
        // the CategoryEntity now has the defined id, createdAt, updatedAt columns!
        // in addition, the following NEW fields are defined
        name: {
            type: String,
        },
    },
})

----------------------------------------

TITLE: Configuring Logger Type
DESCRIPTION: Configuration to specify the type of logger to use (file, console, etc).

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    logging: true,
    logger: "file"
}

----------------------------------------

TITLE: Unsetting Relations in TypeORM
DESCRIPTION: Demonstrates how to unset (set to null) a relation using RelationQueryBuilder.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .set(null)

----------------------------------------

TITLE: Checking Entity Metadata in TypeORM
DESCRIPTION: Shows how to check if metadata for a given entity is registered and how to retrieve it.

LANGUAGE: typescript
CODE:
if (dataSource.hasMetadata(User))
    const userMetadata = dataSource.getMetadata(User)

----------------------------------------

TITLE: Defining Base Entity for Single Table Inheritance in TypeORM
DESCRIPTION: Creates a base 'Content' class with a discriminator column for single table inheritance. This sets up the structure for storing all child entities in a single table.

LANGUAGE: typescript
CODE:
@Entity()
@TableInheritance({ column: { type: "varchar", name: "type" } })
export class Content {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    description: string
}

----------------------------------------

TITLE: Defining Base Entity for Single Table Inheritance in TypeORM
DESCRIPTION: Creates a base 'Content' class with a discriminator column for single table inheritance. This sets up the structure for storing all child entities in a single table.

LANGUAGE: typescript
CODE:
@Entity()
@TableInheritance({ column: { type: "varchar", name: "type" } })
export class Content {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    description: string
}

----------------------------------------

TITLE: TypeORM Database Configuration
DESCRIPTION: Database connection configuration for TypeORM

LANGUAGE: json
CODE:
{
  "type": "mysql",
  "host": "localhost",
  "port": 3306,
  "username": "test",
  "password": "test",
  "database": "test",
  "entities": ["src/entity/*.js"],
  "logging": true
}

----------------------------------------

TITLE: Accessing Relation IDs Without Joins in TypeORM
DESCRIPTION: Shows how to access relation IDs without loading the related entity by explicitly defining an ID column. Includes examples of Profile and User entities with a OneToOne relationship.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn } from "typeorm"
import { Profile } from "./Profile"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @Column({ nullable: true })
    profileId: number

    @OneToOne((type) => Profile)
    @JoinColumn()
    profile: Profile
}

----------------------------------------

TITLE: Compiling TypeORM in Watch Mode
DESCRIPTION: Command to compile TypeORM and watch for changes, enabling faster development cycles.

LANGUAGE: shell
CODE:
npm run compile -- --watch

----------------------------------------

TITLE: Querying Across Multiple Databases in TypeORM
DESCRIPTION: This snippet demonstrates how to create a query that selects data from multiple databases. It uses the QueryBuilder to join entities from different databases.

LANGUAGE: typescript
CODE:
const users = await dataSource
    .createQueryBuilder()
    .select()
    .from(User, "user")
    .addFrom(Photo, "photo")
    .andWhere("photo.userId = user.id")
    .getMany() // userId is not a foreign key since its cross-database request

----------------------------------------

TITLE: Getting Entity Metadata in TypeORM
DESCRIPTION: Demonstrates how to retrieve EntityMetadata for a given entity or table name.

LANGUAGE: typescript
CODE:
const userMetadata = dataSource.getMetadata(User)
// now you can get any information about User entity

----------------------------------------

TITLE: Implementing Single Table Inheritance for Photo Entity in TypeORM
DESCRIPTION: Defines a 'Photo' entity as a child of 'Content' for single table inheritance. This adds a 'size' property to be stored in the shared table.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Photo extends Content {
    @Column()
    size: string
}

----------------------------------------

TITLE: Caching Query Results in TypeORM
DESCRIPTION: Shows how to enable query result caching in TypeORM using the 'cache' option.

LANGUAGE: typescript
CODE:
userRepository.find({
    cache: true
});

----------------------------------------

TITLE: Using Relation IDs Without Joining in TypeORM
DESCRIPTION: Shows how to access a related entity's ID without loading the entire related object. This is achieved by adding a separate column for the relation ID in addition to the relation property.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn } from "typeorm";
import { Profile } from "./Profile";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column({ nullable: true })
  profileId: number;

  @OneToOne(type => Profile)
  @JoinColumn()
  profile: Profile;
}

----------------------------------------

TITLE: TypeORM Global Pattern Error Log Example
DESCRIPTION: Example of TypeORM logging output when no entity files are found matching the specified glob pattern. This indicates a potential configuration issue with the entity path pattern.

LANGUAGE: bash
CODE:
INFO: No classes were found using the provided glob pattern:  "dist/**/*.entity{.ts}"

----------------------------------------

TITLE: MongoDB Query Operations
DESCRIPTION: Examples of various MongoDB query operations using MongoRepository, including basic queries, comparison operators, and array queries.

LANGUAGE: typescript
CODE:
const timber = await myDataSource.getMongoRepository(User).find({
    where: {
        firstName: { $eq: "Timber" }
    }
})

LANGUAGE: typescript
CODE:
const users = await myDataSource.getMongoRepository(User).find({
    where: {
        "photos.size": { $lt: 500 }
    }
})

----------------------------------------

TITLE: MongoDB Query Operations
DESCRIPTION: Examples of various MongoDB query operations using MongoRepository, including basic queries, comparison operators, and array queries.

LANGUAGE: typescript
CODE:
const timber = await myDataSource.getMongoRepository(User).find({
    where: {
        firstName: { $eq: "Timber" }
    }
})

LANGUAGE: typescript
CODE:
const users = await myDataSource.getMongoRepository(User).find({
    where: {
        "photos.size": { $lt: 500 }
    }
})

----------------------------------------

TITLE: Defining Embedded Documents in MongoDB
DESCRIPTION: Examples of defining subdocuments (embedded documents) in TypeORM, including Profile and Photo entities that can be embedded in User entity.

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm"

export class Profile {
    @Column()
    about: string

    @Column()
    education: string

    @Column()
    career: string
}

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm"

@Entity()
export class User {
    @ObjectIdColumn()
    id: ObjectId

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column((type) => Profile)
    profile: Profile

    @Column((type) => Photo)
    photos: Photo[]
}

----------------------------------------

TITLE: Getting TreeRepository in TypeORM
DESCRIPTION: Demonstrates how to get a TreeRepository for hierarchical data structures and use its methods.

LANGUAGE: typescript
CODE:
const repository = dataSource.getTreeRepository(Category)
// now you can call tree repository methods, for example findTrees:
const categories = await repository.findTrees()

----------------------------------------

TITLE: Saving Many-to-One/One-to-Many Relationships in TypeORM
DESCRIPTION: This snippet demonstrates how to save entities with Many-to-One/One-to-Many relationships in TypeORM. It shows two approaches: saving from the 'many' side and from the 'one' side.

LANGUAGE: typescript
CODE:
const photo1 = new Photo();
photo1.url = "me.jpg";
await connection.manager.save(photo1);

const photo2 = new Photo();
photo2.url = "me-and-bears.jpg";
await connection.manager.save(photo2);

const user = new User();
user.name = "John";
user.photos = [photo1, photo2];
await connection.manager.save(user);

LANGUAGE: typescript
CODE:
const user = new User();
user.name = "Leo";
await connection.manager.save(user);

const photo1 = new Photo();
photo1.url = "me.jpg";
photo1.user = user;
await connection.manager.save(photo1);

const photo2 = new Photo();
photo2.url = "me-and-bears.jpg";
photo2.user = user;
await connection.manager.save(photo2);

----------------------------------------

TITLE: Using Not Operator in TypeORM Query
DESCRIPTION: Demonstrates how to use the 'Not' operator in a TypeORM query to negate a condition.

LANGUAGE: typescript
CODE:
import { Not } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    title: Not("About #1")
});

----------------------------------------

TITLE: Using EntityManager in TypeORM
DESCRIPTION: Demonstrates how to access and use the EntityManager for working with entities.

LANGUAGE: typescript
CODE:
const manager: EntityManager = dataSource.manager
// you can call manager methods, for example find:
const users = await manager.find()

----------------------------------------

TITLE: Installing Development Version of TypeORM
DESCRIPTION: Command to install the latest development version of TypeORM using npm package manager.

LANGUAGE: bash
CODE:
npm i typeorm@next

----------------------------------------

TITLE: Defining Post Entity in TypeORM
DESCRIPTION: Example of a TypeORM entity definition for a Post model with id, title, and text columns.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from "typeorm"

@Entity()
export class Post {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string
}

----------------------------------------

TITLE: Creating Tree Entities with Adjacency List in TypeORM
DESCRIPTION: Demonstrates how to create tree entities using the Adjacency list pattern in TypeORM.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, OneToMany } from "typeorm"

@Entity()
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @Column()
    description: string

    @ManyToOne((type) => Category, (category) => category.children)
    parent: Category

    @OneToMany((type) => Category, (category) => category.parent)
    children: Category[]
}

----------------------------------------

TITLE: Using Partial Index in TypeORM Insert Query (Postgres) in TypeScript
DESCRIPTION: This example shows how to use a partial index in a Postgres-specific TypeORM insert query. It demonstrates the use of the indexPredicate option to specify a condition for the index.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .insert()
    .into(User)
    .values({
        firstName: "Timber",
        lastName: "Saw",
        externalId: "abc123",
    })
    .orUpdate(
        ["firstName", "lastName"],
        ["externalId"],
        {
            skipUpdateIfNoValuesChanged: true,
            indexPredicate: "date > 2020-01-01"
        }
    )
    .execute()

----------------------------------------

TITLE: Raw SQL Support in TypeORM Query Builder Updates
DESCRIPTION: This example demonstrates how to use raw SQL within a TypeORM Query Builder update operation. It updates firstName, lastName, and increments the age field using a SQL function. Note that this method doesn't escape values automatically.

LANGUAGE: typescript
CODE:
import {getConnection} from "typeorm";
 await getConnection()
    .createQueryBuilder()
    .update(User)
    .set({ 
        firstName: "Timber", 
        lastName: "Saw",
        age: () => "'age' + 1"
    })
    .where("id = :id", { id: 1 })
    .execute();

----------------------------------------

TITLE: Using In Operator in TypeORM Query
DESCRIPTION: Demonstrates how to use the 'In' operator in a TypeORM query to match against a list of values.

LANGUAGE: typescript
CODE:
import { In } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    title: In(["About #2", "About #3"])
});

----------------------------------------

TITLE: Including Reflect Metadata in Browser
DESCRIPTION: HTML script tag required to include reflect-metadata dependency for TypeORM in browser environments.

LANGUAGE: html
CODE:
<script src="./node_modules/reflect-metadata/Reflect.js"></script>

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Photo Entity in TypeORM
DESCRIPTION: Defines a 'Photo' entity that extends the 'Content' base class, adding a specific 'size' property. This creates a separate table for photos with inherited and custom columns.

LANGUAGE: typescript
CODE:
@Entity()
export class Photo extends Content {
    @Column()
    size: string
}

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Photo Entity in TypeORM
DESCRIPTION: Defines a 'Photo' entity that extends the 'Content' base class, adding a specific 'size' property. This creates a separate table for photos with inherited and custom columns.

LANGUAGE: typescript
CODE:
@Entity()
export class Photo extends Content {
    @Column()
    size: string
}

----------------------------------------

TITLE: Implementing Single Table Inheritance for Question Entity in TypeORM
DESCRIPTION: Defines a 'Question' entity as a child of 'Content' for single table inheritance. This adds an 'answersCount' property to be stored in the shared table.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Question extends Content {
    @Column()
    answersCount: number
}

----------------------------------------

TITLE: Setting Query Execution Time Threshold
DESCRIPTION: Configuration to log queries that exceed a specified execution time threshold.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    maxQueryExecutionTime: 1000
}

----------------------------------------

TITLE: Multi-Schema Entity Configuration in TypeORM
DESCRIPTION: Demonstrates how to use multiple schemas within a single connection by setting the schema property in entity decorators.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";

@Entity({ schema: "secondSchema" })
export class User {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

}

----------------------------------------

TITLE: Using QueryBuilder in TypeORM
DESCRIPTION: Example of using TypeORM's QueryBuilder to construct a complex SQL query with joins, conditions, and pagination.

LANGUAGE: typescript
CODE:
const photos = await AppDataSource.getRepository(Photo)
    .createQueryBuilder("photo")
    .innerJoinAndSelect("photo.metadata", "metadata")
    .leftJoinAndSelect("photo.albums", "album")
    .where("photo.isPublished = true")
    .andWhere("(photo.name = :photoName OR photo.name = :bearName)")
    .orderBy("photo.id", "DESC")
    .skip(5)
    .take(10)
    .setParameters({ photoName: "My", bearName: "Mishka" })
    .getMany()

----------------------------------------

TITLE: Creating Indices and Constraints in TypeORM
DESCRIPTION: Illustrates the use of @Index, @Unique, and @Check decorators to define database indices and constraints on entities.

LANGUAGE: typescript
CODE:
@Entity()
@Index(["firstName", "lastName"])
@Unique(["lastName", "middleName"])
@Check(`"age" > 18`)
export class User {
    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    middleName: string

    @Column()
    age: number
}

----------------------------------------

TITLE: Creating a One-to-One Relationship in TypeORM
DESCRIPTION: Example of how to create a one-to-one relationship between Photo and PhotoMetadata entities

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from "typeorm";
import { Photo } from "./Photo";

@Entity()
export class PhotoMetadata {

    @PrimaryGeneratedColumn()
    id: number;

    @Column("int")
    height: number;

    @Column("int")
    width: number;

    @Column()
    orientation: string;

    @Column()
    compressed: boolean;

    @Column()
    comment: string;

    @OneToOne(type => Photo)
    @JoinColumn()
    photo: Photo;
}

----------------------------------------

TITLE: Initializing TypeORM Connection and Database Operations in JavaScript
DESCRIPTION: Sets up a TypeORM connection to PostgreSQL database and demonstrates basic operations like saving and retrieving posts with categories. Shows how to configure connection options, create entities, and perform database operations using promises.

LANGUAGE: typescript
CODE:
var typeorm = require("typeorm");

typeorm
  .createConnection({
    type: "postgres",
    host: "localhost",
    port: 5432,
    username: "test",
    password: "admin",
    database: "test",
    synchronize: true,
    entities: [
        require("./entity/Post"), 
        require("./entity/Category")
    ]
  })
  .then(function(connection) {
    var category1 = {
      name: "TypeScript"
    };
    var category2 = {
      name: "Programming"
    };

    var post = {
      title: "Control flow based type analysis",
      text: "TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters.",
      categories: [category1, category2]
    };

    var postRepository = connection.getRepository("Post");
    postRepository
      .save(post)
      .then(function(savedPost) {
        console.log("Post has been saved: ", savedPost);
        console.log("Now lets load all posts: ");

        return postRepository.find();
      })
      .then(function(allPosts) {
        console.log("All posts: ", allPosts);
      });
  })
  .catch(function(error) {
    console.log("Error: ", error);
  });

----------------------------------------

TITLE: Defining User Entity with One-to-One Relationship
DESCRIPTION: User entity definition with a one-to-one relationship to Profile entity using @OneToOne and @JoinColumn decorators.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn } from "typeorm";
import { Profile } from "./Profile";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToOne(() => Profile)
  @JoinColumn()
  profile: Profile;
}

----------------------------------------

TITLE: Creating TypeORM Test for GitHub Issue
DESCRIPTION: TypeScript template for creating a test case for a specific GitHub issue in TypeORM. It includes setup for test connections, database reloading, and a basic test structure.

LANGUAGE: typescript
CODE:
import "reflect-metadata";
import { createTestingConnections, closeTestingConnections, reloadTestingDatabases } from "../../utils/test-utils";
import { DataSource } from "../../../src/data-source/DataSource"
import { expect } from "chai";

describe("github issues > #<issue number> <issue title>", () => {

    let dataSources: DataSource[];
    before(async () => dataSources = await createTestingConnections({
        entities: [__dirname + "/entity/*{.js,.ts}"],
        schemaCreate: true,
        dropSchema: true,
    }));
    beforeEach(() => reloadTestingDatabases(dataSources));
    after(() => closeTestingConnections(dataSources));

    it("should <put a detailed description of what it should do here>", () => Promise.all(dataSources.map(async dataSource => {

       // tests go here

    })));

    // you can add additional tests if needed

});

----------------------------------------

TITLE: Defining Many-to-One Relationship in TypeORM
DESCRIPTION: Example of defining a many-to-one relationship between Photo and Author entities using TypeORM decorators.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from "typeorm"
import { Author } from "./Author"

@Entity()
export class Photo {
    // ... other columns

    @ManyToOne(() => Author, (author) => author.photos)
    author: Author
}

----------------------------------------

TITLE: Customizing Column Names in TypeORM Entities
DESCRIPTION: Shows how to specify custom database column names that differ from TypeScript property names using the Column decorator options.

LANGUAGE: typescript
CODE:
@Column({ name: "is_active" })
isActive: boolean;

----------------------------------------

TITLE: Creating a One-to-One Relationship in TypeORM
DESCRIPTION: Shows how to create a one-to-one relationship between two entities (Photo and PhotoMetadata) using the @OneToOne decorator.

LANGUAGE: TypeScript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from "typeorm";
import { Photo } from "./Photo";

@Entity()
export class PhotoMetadata {
  @PrimaryGeneratedColumn()
  id: number;

  @Column("int")
  height: number;

  @Column("int")
  width: number;

  @Column()
  orientation: string;

  @Column()
  compressed: boolean;

  @Column()
  comment: string;

  @OneToOne(type => Photo)
  @JoinColumn()
  photo: Photo;
}

----------------------------------------

TITLE: Using OR Operator in TypeORM Query
DESCRIPTION: Demonstrates how to use the OR operator in a TypeORM query by providing an array of conditions.

LANGUAGE: typescript
CODE:
userRepository.find({
    where: [{ firstName: "Timber", lastName: "Saw" }, { firstName: "Stan", lastName: "Lee" }]
});

----------------------------------------

TITLE: Loading Related Entities Using QueryBuilder
DESCRIPTION: Shows how to load User entities with their related Profile using QueryBuilder with join.

LANGUAGE: typescript
CODE:
const users = await connection
  .getRepository(User)
  .createQueryBuilder("user")
  .leftJoinAndSelect("user.profile", "profile")
  .getMany();

----------------------------------------

TITLE: Setting Up Dependency Injection with TypeORM
DESCRIPTION: Shows how to configure TypeORM to work with dependency injection containers, specifically using typedi as an example.

LANGUAGE: typescript
CODE:
import { useContainer, createConnection } from "typeorm";
import { Container } from "typedi";

useContainer(Container);
createConnection({
  /* ... */
});

----------------------------------------

TITLE: Pushing TypeORM contribution branch to GitHub
DESCRIPTION: This command pushes the local 'my-fix-branch' to the contributor's GitHub repository.

LANGUAGE: shell
CODE:
git push origin my-fix-branch

----------------------------------------

TITLE: Configuring One-to-One Relationships in TypeORM
DESCRIPTION: Demonstrates proper setup of bidirectional one-to-one relationships between User and Photo entities, explaining the concept of relationship ownership.

LANGUAGE: typescript
CODE:
@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @OneToOne()
    photo: Photo
}

LANGUAGE: typescript
CODE:
@Entity()
export class Photo {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    url: string

    @OneToOne()
    user: User
}

----------------------------------------

TITLE: Accessing Connection and QueryRunner in TypeORM EntityManager
DESCRIPTION: Demonstrates how to access the connection and queryRunner properties of an EntityManager instance. The queryRunner is only used in transaction instances of EntityManager.

LANGUAGE: typescript
CODE:
const connection = manager.connection;

LANGUAGE: typescript
CODE:
const queryRunner = manager.queryRunner;

----------------------------------------

TITLE: Bidirectional User Entity Definition
DESCRIPTION: User entity definition with bidirectional one-to-one relationship to Profile entity.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn } from "typeorm";
import { Profile } from "./Profile";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToOne(() => Profile, profile => profile.user)
  @JoinColumn()
  profile: Profile;
}

----------------------------------------

TITLE: Querying Bi-directional Relation from Profile Side
DESCRIPTION: Demonstrates how to query the bi-directional relationship from the Profile side using QueryBuilder.

LANGUAGE: typescript
CODE:
const profiles = await dataSource
    .getRepository(Profile)
    .createQueryBuilder("profile")
    .leftJoinAndSelect("profile.user", "user")
    .getMany()

----------------------------------------

TITLE: Committing changes in TypeORM contribution
DESCRIPTION: This command commits all staged changes with a descriptive commit message following TypeORM's commit message conventions.

LANGUAGE: shell
CODE:
git commit -a

----------------------------------------

TITLE: Inserting Multiple Records with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet demonstrates how to insert multiple records into a database using TypeORM's Query Builder. It's an efficient way to perform bulk insertions.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .insert()
    .into(User)
    .values([
        { firstName: "Timber", lastName: "Saw" },
        { firstName: "Phantom", lastName: "Lancer" },
    ])
    .execute()

----------------------------------------

TITLE: Using Data Mapper Repository Methods
DESCRIPTION: Demonstrates how to perform CRUD operations using the Data Mapper pattern with repository methods.

LANGUAGE: typescript
CODE:
const userRepository = connection.getRepository(User);

// 示例如何保存DM实体
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.isActive = true;
await userRepository.save(user);

// 示例如何删除DM实体
await userRepository.remove(user);

// 示例如何加载DM实体
const users = await userRepository.find({ skip: 2, take: 5 });
const newUsers = await userRepository.find({ isActive: true });
const timber = await userRepository.findOne({ firstName: "Timber", lastName: "Saw" });

----------------------------------------

TITLE: Using Data Mapper Repository Methods
DESCRIPTION: Demonstrates how to perform CRUD operations using the Data Mapper pattern with repository methods.

LANGUAGE: typescript
CODE:
const userRepository = connection.getRepository(User);

// 示例如何保存DM实体
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.isActive = true;
await userRepository.save(user);

// 示例如何删除DM实体
await userRepository.remove(user);

// 示例如何加载DM实体
const users = await userRepository.find({ skip: 2, take: 5 });
const newUsers = await userRepository.find({ isActive: true });
const timber = await userRepository.findOne({ firstName: "Timber", lastName: "Saw" });

----------------------------------------

TITLE: Accessing EntityManager in TypeORM Repository
DESCRIPTION: Demonstrates how to access the EntityManager used by a repository.

LANGUAGE: typescript
CODE:
const manager = repository.manager;

----------------------------------------

TITLE: Raw SQL Insert with TypeORM Query Builder in TypeScript
DESCRIPTION: This example shows how to use raw SQL functions within a TypeORM Query Builder insert operation. It demonstrates inserting a record with a firstName value and a lastName value generated by a SQL function. Note that this method requires manual escaping of values.

LANGUAGE: typescript
CODE:
import {getConnection} from "typeorm";

await getConnection()
    .createQueryBuilder()
    .insert()
    .into(User)
    .values({ 
        firstName: "Timber", 
        lastName: () => "CONCAT('S', 'A', 'W')"
    })
    .execute();

----------------------------------------

TITLE: Ignoring Errors in TypeORM Insert Query with orIgnore in TypeScript
DESCRIPTION: This example shows how to use the orIgnore function to suppress errors during insert operations. It's useful for inserting only valid data and ignoring conflicts or invalid entries.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .insert()
    .into(User)
    .values({
        firstName: "Timber",
        lastName: "Saw",
        externalId: "abc123",
    })
    .orIgnore()
    .execute()

----------------------------------------

TITLE: Defining Eager Relationships in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates how to define eager relationships between Category and Question entities using TypeORM decorators. The Question entity uses the eager: true option to automatically load related categories when querying questions.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from "typeorm";
import { Question } from "./Question";

@Entity()
export class Category {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @ManyToMany(type => Question, question => question.categories)
  questions: Question[];
}

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";
import { Category } from "./Category";

@Entity()
export class Question {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  title: string;

  @Column()
  text: string;

  @ManyToMany(type => Category, category => category.questions, {
    eager: true
  })
  @JoinTable()
  categories: Category[];
}

----------------------------------------

TITLE: Decrementing Entity Values in TypeORM Repository
DESCRIPTION: Illustrates how to decrement values of some columns for entities that match conditions using the manager's decrement method.

LANGUAGE: typescript
CODE:
await manager.decrement(User, { firstName: "Timber" }, "age", 3);

----------------------------------------

TITLE: Saving Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to save a single entity or an array of entities using the repository's save method.

LANGUAGE: typescript
CODE:
await repository.save(user);
await repository.save([category1, category2, category3]);

----------------------------------------

TITLE: Saving Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to save a single entity or an array of entities using the repository's save method.

LANGUAGE: typescript
CODE:
await repository.save(user);
await repository.save([category1, category2, category3]);

----------------------------------------

TITLE: Installing ts-node for TypeScript Projects
DESCRIPTION: Instructions for installing ts-node as a dev dependency to simplify TypeScript usage with the CLI.

LANGUAGE: bash
CODE:
npm install ts-node --save-dev

----------------------------------------

TITLE: Basic Query Builder Example
DESCRIPTION: Simple example showing how to create and execute a basic query with QueryBuilder to find a user by ID

LANGUAGE: typescript
CODE:
const firstUser = await connection
  .getRepository(User)
  .createQueryBuilder("user")
  .where("user.id = :id", { id: 1 })
  .getOne();

----------------------------------------

TITLE: Reverting Last Migration in TypeORM
DESCRIPTION: Demonstrates how to undo the last executed migration.

LANGUAGE: typescript
CODE:
await dataSource.undoLastMigration()

----------------------------------------

TITLE: Saving Related Entities Using Array Assignment in TypeORM
DESCRIPTION: Example of saving related entities by assigning an array of photos to a user's photos property before saving.

LANGUAGE: typescript
CODE:
const photo1 = new Photo()
photo1.url = "me.jpg"
await dataSource.manager.save(photo1)

const photo2 = new Photo()
photo2.url = "me-and-bears.jpg"
await dataSource.manager.save(photo2)

const user = new User()
user.name = "John"
user.photos = [photo1, photo2]
await dataSource.manager.save(user)

----------------------------------------

TITLE: Implementing Custom Logger Class
DESCRIPTION: Example of implementing a custom logger by extending the AbstractLogger class with custom log handling logic.

LANGUAGE: typescript
CODE:
import { AbstractLogger } from "typeorm"

export class MyCustomLogger extends AbstractLogger {
    protected writeLog(
        level: LogLevel,
        logMessage: LogMessage | LogMessage[],
        queryRunner?: QueryRunner,
    ) {
        const messages = this.prepareLogMessages(logMessage, {
            highlightSql: false,
        })

        for (let message of messages) {
            switch (message.type ?? level) {
                case "log":
                case "schema-build":
                case "migration":
                    console.log(message.message)
                    break

                case "info":
                case "query":
                    if (message.prefix) {
                        console.info(message.prefix, message.message)
                    } else {
                        console.info(message.message)
                    }
                    break

                case "warn":
                case "query-slow":
                    if (message.prefix) {
                        console.warn(message.prefix, message.message)
                    } else {
                        console.warn(message.message)
                    }
                    break

                case "error":
                case "query-error":
                    if (message.prefix) {
                        console.error(message.prefix, message.message)
                    } else {
                        console.error(message.message)
                    }
                    break
            }
        }
    }
}

----------------------------------------

TITLE: Manual Transaction Management with QueryRunner in TypeORM
DESCRIPTION: Shows how to manually manage transactions using QueryRunner in TypeORM. This includes connecting to the database, starting a transaction, committing or rolling back changes, and error handling.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

// 获取连接并创建新的queryRunner
const connection = getConnection();
const queryRunner = connection.createQueryRunner();

// 使用我们的新queryRunner建立真正的数据库连
await queryRunner.connect();

// 现在我们可以在queryRunner上执行任何查询，例如：
await queryRunner.query("SELECT * FROM users");

// 我们还可以访问与queryRunner创建的连接一起使用的实体管理器：
const users = await queryRunner.manager.find(User);

// 开始事务：
await queryRunner.startTransaction();

try {
  // 对此事务执行一些操作：
  await queryRunner.manager.save(user1);
  await queryRunner.manager.save(user2);
  await queryRunner.manager.save(photos);

  // 提交事务：
  await queryRunner.commitTransaction();
} catch (err) {
  // 有错误做出回滚更改
  await queryRunner.rollbackTransaction();
}

----------------------------------------

TITLE: Implementing AfterInsert Event Handler in TypeORM Entity
DESCRIPTION: Demonstrates the usage of @AfterInsert decorator to execute logic after an entity is inserted into the database. Used for post-insert operations.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
  @AfterInsert()
  resetCounters() {
    this.counters = 0;
  }
}

----------------------------------------

TITLE: Executing Raw SQL Queries in TypeORM EntityManager
DESCRIPTION: Demonstrates how to execute raw SQL queries using the query method of EntityManager. This allows for direct SQL execution when needed.

LANGUAGE: typescript
CODE:
const rawData = await manager.query(`SELECT * FROM USERS`);

----------------------------------------

TITLE: TypeORM Data Source Configuration
DESCRIPTION: Database connection configuration using TypeORM DataSource with MySQL settings.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

export const myDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    entities: ["src/entity/*.js"],
    logging: true,
    synchronize: true,
})

----------------------------------------

TITLE: Incrementing Entity Values in TypeORM Repository
DESCRIPTION: Shows how to increment values of some columns for entities that match conditions using the manager's increment method.

LANGUAGE: typescript
CODE:
await manager.increment(User, { firstName: "Timber" }, "age", 3);

----------------------------------------

TITLE: Configuring Replication in TypeORM
DESCRIPTION: This snippet shows how to set up read/write replication in TypeORM. It demonstrates the configuration for a master database and multiple slave databases for MySQL.

LANGUAGE: typescript
CODE:
const datasource = new DataSource({
  type: "mysql",
  logging: true,
  replication: {
    master: {
      host: "server1",
      port: 3306,
      username: "test",
      password: "test",
      database: "test"
    },
    slaves: [
      {
        host: "server2",
        port: 3306,
        username: "test",
        password: "test",
        database: "test"
      }, {
        host: "server3",
        port: 3306,
        username: "test",
        password: "test",
        database: "test"
      }
    ]
  }
});

----------------------------------------

TITLE: Loading Bidirectional Relationship Data
DESCRIPTION: Shows how to load related data from the Category side using QueryBuilder in a bidirectional relationship.

LANGUAGE: typescript
CODE:
const categoriesWithQuestions = await connection
  .getRepository(Category)
  .createQueryBuilder("category")
  .leftJoinAndSelect("category.questions", "question")
  .getMany();

----------------------------------------

TITLE: User Entity Definition
DESCRIPTION: TypeORM entity class definition for User with decorators for database mapping.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string
}

----------------------------------------

TITLE: Using LessThan Operator in TypeORM Query
DESCRIPTION: Shows how to use the 'LessThan' operator in a TypeORM query for numerical comparisons.

LANGUAGE: typescript
CODE:
import { LessThan } from "typeorm";

const loadedPosts = await connection.getRepository(Post).find({
    likes: LessThan(10)
});

----------------------------------------

TITLE: Saving One-to-One Relation
DESCRIPTION: Example of how to create and save related User and Profile entities in TypeORM.

LANGUAGE: typescript
CODE:
const profile = new Profile()
profile.gender = "male"
profile.photo = "me.jpg"
await dataSource.manager.save(profile)

const user = new User()
user.name = "Joe Smith"
user.profile = profile
await dataSource.manager.save(user)

----------------------------------------

TITLE: Repository Query Caching
DESCRIPTION: Implementation of query caching using Repository pattern with filtering.

LANGUAGE: typescript
CODE:
const users = await connection.getRepository(User).find({
  where: { isAdmin: true },
  cache: true
});

----------------------------------------

TITLE: Configuring JoinColumn Options in TypeORM
DESCRIPTION: Examples of customizing join column configuration including column naming and referenced column specifications.

LANGUAGE: typescript
CODE:
@ManyToOne(type => Category)
@JoinColumn({ name: "cat_id" })
category: Category;

----------------------------------------

TITLE: Implementing Closure Table for Tree Entities in TypeORM
DESCRIPTION: Shows how to implement the Closure table pattern for tree structures in TypeORM.

LANGUAGE: typescript
CODE:
import { Entity, Tree, Column, PrimaryGeneratedColumn, TreeChildren, TreeParent, TreeLevelColumn } from "typeorm"

@Entity()
@Tree("closure-table")
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @Column()
    description: string

    @TreeChildren()
    children: Category[]

    @TreeParent()
    parent: Category

    @TreeLevelColumn()
    level: number
}

----------------------------------------

TITLE: Removing Entities in TypeORM Repository
DESCRIPTION: Shows how to remove a single entity or an array of entities using the repository's remove method.

LANGUAGE: typescript
CODE:
await repository.remove(user);
await repository.remove([category1, category2, category3]);

----------------------------------------

TITLE: Configuring Webpack for TypeORM Browser Usage
DESCRIPTION: Webpack configuration required to use TypeORM in browser environments with sql.js. Includes plugin setup for module replacement and SQL.js WASM provider.

LANGUAGE: javascript
CODE:
plugins: [
    ..., // any existing plugins that you already have
    new webpack.NormalModuleReplacementPlugin(/typeorm$/, function (result) {
        result.request = result.request.replace(/typeorm/, "typeorm/browser");
    }),
    new webpack.ProvidePlugin({
      'window.SQL': 'sql.js/dist/sql-wasm.js'
    })
]

----------------------------------------

TITLE: Utility Commands
DESCRIPTION: Additional TypeORM CLI commands for querying, cache clearing, and version checking.

LANGUAGE: bash
CODE:
typeorm query "SELECT * FROM USERS"

LANGUAGE: bash
CODE:
typeorm cache:clear

LANGUAGE: bash
CODE:
typeorm version

----------------------------------------

TITLE: Configuring Cache Duration in QueryBuilder
DESCRIPTION: Example showing how to set custom cache duration using QueryBuilder. Sets cache time to 1 minute (60000 milliseconds).

LANGUAGE: typescript
CODE:
const users = await dataSource
    .createQueryBuilder(User, "user")
    .where("user.isAdmin = :isAdmin", { isAdmin: true })
    .cache(60000) // 1 minute
    .getMany()

----------------------------------------

TITLE: TypeORM Browser DataSource Configuration
DESCRIPTION: Example configuration for setting up a TypeORM DataSource in browser environment using SQL.js.

LANGUAGE: typescript
CODE:
new DataSource({
    type: "sqljs",
    entities: [Photo],
    synchronize: true,
})

----------------------------------------

TITLE: Getting Entity ID in TypeORM Repository
DESCRIPTION: Shows how to get the primary column property value for a given entity.

LANGUAGE: typescript
CODE:
const userId = repository.getId(user); // userId === 1

----------------------------------------

TITLE: Custom Methods in Active Record Pattern
DESCRIPTION: Demonstrates how to add custom query methods to an Active Record entity using static methods.

LANGUAGE: typescript
CODE:
import { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class User extends BaseEntity {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  isActive: boolean;

  static findByName(firstName: string, lastName: string) {
    return this.createQueryBuilder("user")
      .where("user.firstName = :firstName", { firstName })
      .andWhere("user.lastName = :lastName", { lastName })
      .getMany();
  }
}

----------------------------------------

TITLE: Saving and Removing Entities in TypeORM EntityManager
DESCRIPTION: Shows how to save (insert or update) and remove entities or arrays of entities using EntityManager methods. These operations are performed in a single transaction.

LANGUAGE: typescript
CODE:
await manager.save(user);
await manager.save([category1, category2, category3]);

LANGUAGE: typescript
CODE:
await manager.remove(user);
await manager.remove([category1, category2, category3]);

----------------------------------------

TITLE: Saving and Removing Entities in TypeORM EntityManager
DESCRIPTION: Shows how to save (insert or update) and remove entities or arrays of entities using EntityManager methods. These operations are performed in a single transaction.

LANGUAGE: typescript
CODE:
await manager.save(user);
await manager.save([category1, category2, category3]);

LANGUAGE: typescript
CODE:
await manager.remove(user);
await manager.remove([category1, category2, category3]);

----------------------------------------

TITLE: Customizing Column Names in TypeORM Entities
DESCRIPTION: Shows how to customize database column names using the @Column decorator's name option instead of using the default property name.

LANGUAGE: typescript
CODE:
@Column({ name: "is_active" })
isActive: boolean;

----------------------------------------

TITLE: Creating Named Column Indices in TypeORM
DESCRIPTION: Shows how to create column indices with custom names using the @Index decorator with a name parameter.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Index("name1-idx")
    @Column()
    firstName: string

    @Column()
    @Index("name2-idx")
    lastName: string
}

----------------------------------------

TITLE: Using ConnectionManager to Create and Manage Connections in TypeORM
DESCRIPTION: Demonstrates how to use the ConnectionManager class to create and manage database connections in TypeORM. This approach allows for more control over when the actual connection is established.

LANGUAGE: typescript
CODE:
import { getConnectionManager, ConnectionManager, Connection } from "typeorm"

const connectionManager = getConnectionManager()
const connection = connectionManager.create({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
})
await connection.connect() // 执行连接

----------------------------------------

TITLE: Using TypeORM DataSource in Controllers
DESCRIPTION: Shows how to use a DataSource instance within a controller class to perform database operations using the entity manager.

LANGUAGE: typescript
CODE:
import { AppDataSource } from "./app-data-source"
import { User } from "../entity/User"

export class UserController {
    @Get("/users")
    getAll() {
        return AppDataSource.manager.find(User)
    }
}

----------------------------------------

TITLE: Using TypeORM DataSource in Controllers
DESCRIPTION: Shows how to use a DataSource instance within a controller class to perform database operations using the entity manager.

LANGUAGE: typescript
CODE:
import { AppDataSource } from "./app-data-source"
import { User } from "../entity/User"

export class UserController {
    @Get("/users")
    getAll() {
        return AppDataSource.manager.find(User)
    }
}

----------------------------------------

TITLE: Configuring Webpack for TypeORM Backend
DESCRIPTION: Demonstrates how to configure Webpack to handle TypeORM drivers and migrations properly in a backend environment.

LANGUAGE: javascript
CODE:
const FilterWarningsPlugin = require('webpack-filter-warnings-plugin');

module.exports = {
    plugins: [
        new FilterWarningsPlugin({
            exclude: [/mongodb/, /mssql/, /mysql/, /mysql2/, /oracledb/, /pg/, /pg-native/, /pg-query-stream/, /redis/, /sqlite3/]
        })
    ]
};

----------------------------------------

TITLE: Query Hints Usage in TypeORM
DESCRIPTION: Demonstrates how to use SQL query hints to optimize query execution

LANGUAGE: typescript
CODE:
await dataSource.query(`
    SELECT /*+ MAX_EXECUTION_TIME(1000) */ * 
    FROM user 
    WHERE email = 'example@example.com'
`);

----------------------------------------

TITLE: Querying Entities with Eager Relationships in TypeORM (TypeScript)
DESCRIPTION: This snippet shows how to query questions with their eagerly loaded categories using TypeORM's repository. The categories will be automatically loaded without the need for explicit joins.

LANGUAGE: typescript
CODE:
const questionRepository = connection.getRepository(Question);

// questions will load with their categories
const questions = await questionRepository.find();

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Post Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet illustrates concrete table inheritance by extending the Content class for the Post entity.

LANGUAGE: typescript
CODE:
@Entity()
export class Post extends Content {
    
    @Column()
    viewCount: number;
    
}

----------------------------------------

TITLE: Updating Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to partially update entities using the repository's update method.

LANGUAGE: typescript
CODE:
await repository.update({ firstName: "Timber" }, { firstName: "Rizzrak" });
// executes UPDATE user SET firstName = Rizzrak WHERE firstName = Timber

await repository.update(1, { firstName: "Rizzrak" });
// executes UPDATE user SET firstName = Rizzrak WHERE id = 1

----------------------------------------

TITLE: Defining a View Entity with String Expression in TypeORM
DESCRIPTION: This snippet demonstrates how to create a view entity using a string SQL expression. It shows the usage of @ViewEntity decorator with a SQL string to define the view.

LANGUAGE: typescript
CODE:
@ViewEntity({ 
    expression: `
        SELECT "post"."id" "id", "post"."name" AS "name", "category"."name" AS "categoryName"
        FROM "post" "post"
        LEFT JOIN "category" "category" ON "post"."categoryId" = "category"."id"
    `
})

----------------------------------------

TITLE: Defining Employee Entity with TypeORM Decorators
DESCRIPTION: This snippet demonstrates the Employee entity class with individual columns for firstName and lastName, similar to the User entity. It includes an additional salary column.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";

@Entity()
export class Employee {
    
    @PrimaryGeneratedColumn()
    id: string;
    
    @Column()
    firstName: string;
    
    @Column()
    lastName: string;
    
    @Column()
    salary: string;
    
}

----------------------------------------

TITLE: Defining Simple Entity Schema in TypeORM
DESCRIPTION: Example of defining a simple entity schema for a category using TypeORM's EntitySchema. It demonstrates how to define basic columns including a primary key.

LANGUAGE: typescript
CODE:
import { EntitySchema } from "typeorm"

export const CategoryEntity = new EntitySchema({
    name: "category",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true,
        },
        name: {
            type: String,
        },
    },
})

----------------------------------------

TITLE: Counting Entities in TypeORM Repository
DESCRIPTION: Demonstrates how to count entities that match specified conditions using the repository's count method.

LANGUAGE: typescript
CODE:
const count = await repository.count({ firstName: "Timber" });

----------------------------------------

TITLE: Eager Loading Configuration in TypeORM
DESCRIPTION: Shows how to implement eager loading for automatic loading of related entities

LANGUAGE: typescript
CODE:
@Entity()
export class User {
    @OneToMany(() => Post, post => post.user, { eager: true })
    posts: Post[];
}

----------------------------------------

TITLE: Refactoring User Entity with Embedded Name Column
DESCRIPTION: This snippet shows the refactored User entity using the embedded Name class. It demonstrates how to use the @Column decorator with a type function to embed the Name class.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";
import {Name} from "./Name";

@Entity()
export class User {
    
    @PrimaryGeneratedColumn()
    id: string;
    
    @Column(type => Name)
    name: Name;
    
    @Column()
    isActive: boolean;
    
}

----------------------------------------

TITLE: Enabling Basic TypeORM Logging Configuration
DESCRIPTION: Basic configuration to enable logging for all queries and errors in TypeORM database connection.

LANGUAGE: typescript
CODE:
{
    name: "mysql",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    ...
    logging: true
}

----------------------------------------

TITLE: Including Reflect Metadata in HTML for TypeORM
DESCRIPTION: This HTML snippet shows how to include the reflect-metadata library in the main HTML page, which is required for TypeORM to work in browser environments.

LANGUAGE: html
CODE:
<script src="./node_modules/reflect-metadata/Reflect.js"></script>

----------------------------------------

TITLE: Defining Post Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet defines a Post entity with id, title, description, and viewCount columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
@Entity()
export class Post {
    
    @PrimaryGeneratedColumn()
    id: number;
 
    @Column()
    title: string;
    
    @Column()
    description: string;
    
    @Column()
    viewCount: number;
    
}

----------------------------------------

TITLE: Refactoring Employee Entity with Embedded Name Column
DESCRIPTION: This snippet demonstrates the refactored Employee entity using the embedded Name class. It shows how the Name class is integrated into the Employee entity structure.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";
import {Name} from "./Name";

@Entity()
export class Employee {
    
    @PrimaryGeneratedColumn()
    id: string;
    
    @Column(type => Name)
    name: Name;
    
    @Column()
    salary: number;
    
}

----------------------------------------

TITLE: Creating Multi-Column Indices in TypeORM
DESCRIPTION: Shows how to create indices spanning multiple columns using the @Index decorator at the entity level.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, Index } from "typeorm"

@Entity()
@Index(["firstName", "lastName"])
@Index(["firstName", "middleName", "lastName"], { unique: true })
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    middleName: string

    @Column()
    lastName: string
}

----------------------------------------

TITLE: Managing TypeORM Migrations
DESCRIPTION: Commands for creating, generating, running, and reverting migrations in TypeORM.

LANGUAGE: bash
CODE:
typeorm migration:create path-to-migrations-dir/migrationName
typeorm migration:generate path/to/Migration -d path/to/datasource
typeorm migration:run -- -d path-to-datasource-config
typeorm migration:revert -- -d path-to-datasource-config
typeorm migration:show  -- -d path-to-datasource-config

----------------------------------------

TITLE: Defining an Entity in TypeORM
DESCRIPTION: Shows how to define a basic entity class using TypeORM decorators. This example creates a User entity with id, firstName, lastName, and age properties.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  age: number;
}

----------------------------------------

TITLE: Managing TypeORM Migrations
DESCRIPTION: Commands for creating, generating, running, and reverting migrations in TypeORM.

LANGUAGE: bash
CODE:
typeorm migration:create path-to-migrations-dir/migrationName
typeorm migration:generate path/to/Migration -d path/to/datasource
typeorm migration:run -- -d path-to-datasource-config
typeorm migration:revert -- -d path-to-datasource-config
typeorm migration:show  -- -d path-to-datasource-config

----------------------------------------

TITLE: Refactoring Student Entity with Embedded Name Column
DESCRIPTION: This snippet shows the refactored Student entity using the embedded Name class. It illustrates how the Name class is incorporated into the Student entity structure.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";
import {Name} from "./Name";

@Entity()
export class Student {
    
    @PrimaryGeneratedColumn()
    id: string;
    
    @Column(type => Name)
    name: Name;
    
    @Column()
    faculty: string;
    
}

----------------------------------------

TITLE: Loading Relations with TypeORM
DESCRIPTION: Shows how to load related entities using the relations option, including nested relations.

LANGUAGE: typescript
CODE:
userRepository.find({
    relations: {
        profile: true,
        photos: true,
        videos: {
            videoAttributes: true,
        },
    },
})

LANGUAGE: sql
CODE:
SELECT * FROM "user"
LEFT JOIN "profile" ON "profile"."id" = "user"."profileId"
LEFT JOIN "photos" ON "photos"."id" = "user"."photoId"
LEFT JOIN "videos" ON "videos"."id" = "user"."videoId"
LEFT JOIN "video_attributes" ON "video_attributes"."id" = "videos"."video_attributesId"

----------------------------------------

TITLE: Using ActiveRecord Pattern with TypeORM
DESCRIPTION: Example of how to use the ActiveRecord pattern with TypeORM entities

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from "typeorm";

@Entity()
export class User extends BaseEntity {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

    @Column()
    age: number;

}

// Usage
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.age = 25;
await user.save();

const allUsers = await User.find();
const firstUser = await User.findOne(1);
const timber = await User.findOne({ firstName: "Timber", lastName: "Saw" });

await timber.remove();

----------------------------------------

TITLE: Loading Related Entities Using RelationQueryBuilder
DESCRIPTION: Shows how to load related entities (both single and multiple) using RelationQueryBuilder.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

const post = await getConnection().manager.findOne(Post, 1);

post.categories = await getConnection()
  .createQueryBuilder()
  .relation(Post, "categories")
  .of(post)
  .loadMany();

post.author = await getConnection()
  .createQueryBuilder()
  .relation(User, "user")
  .of(post)
  .loadOne();

----------------------------------------

TITLE: TypeORM UUID Primary Column
DESCRIPTION: Example of using UUID as primary column in an entity.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn } from "typeorm";

@Entity()
export class User {
    @PrimaryGeneratedColumn("uuid")
    id: string;
}

----------------------------------------

TITLE: TypeORM Migration with Transaction Control
DESCRIPTION: Example of a TypeORM migration with custom transaction control for creating an index concurrently.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner } from "typeorm"

export class AddIndexTIMESTAMP implements MigrationInterface {
    transaction = false

    async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(
            `CREATE INDEX CONCURRENTLY post_names_idx ON post(name)`
        )
    }

    async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP INDEX CONCURRENTLY post_names_idx`)
    }
}

----------------------------------------

TITLE: Using QueryBuilder in TypeORM
DESCRIPTION: Example of how to use QueryBuilder to create complex queries in TypeORM

LANGUAGE: typescript
CODE:
let photos = await connection
    .getRepository(Photo)
    .createQueryBuilder("photo") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.
    .innerJoinAndSelect("photo.metadata", "metadata")
    .leftJoinAndSelect("photo.albums", "album")
    .where("photo.isPublished = true")
    .andWhere("(photo.name = :photoName OR photo.name = :bearName)")
    .orderBy("photo.id", "DESC")
    .skip(5)
    .take(10)
    .setParameters({ photoName: "My", bearName: "Mishka" })
    .getMany();

----------------------------------------

TITLE: Setting Cache ID in QueryBuilder
DESCRIPTION: Example showing how to set a specific cache ID for granular cache control using QueryBuilder.

LANGUAGE: typescript
CODE:
const users = await dataSource
    .createQueryBuilder(User, "user")
    .where("user.isAdmin = :isAdmin", { isAdmin: true })
    .cache("users_admins", 25000)
    .getMany()

----------------------------------------

TITLE: TypeORM Simple Array Column
DESCRIPTION: Demonstrates using simple-array column type to store array values.

LANGUAGE: typescript
CODE:
@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number;

    @Column("simple-array")
    names: string[];
}

----------------------------------------

TITLE: Creating Relationships Without Foreign Key Constraints in TypeORM
DESCRIPTION: Shows how to create relationships between entities without generating foreign key constraints, which can be useful for performance reasons in certain scenarios.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryColumn, Column, ManyToOne} from "typeorm";
import {Person} from "./Person";
@Entity()
export class ActionLog {
    
    @PrimaryColumn()
    id: number;
    @Column()
    date: Date;
    @Column()
    action: string;
    
    @ManyToOne(type => Person, {
        createForeignKeyConstraints: false
    })
    person: Person;
    
}

----------------------------------------

TITLE: Cleaning up after TypeORM pull request merge
DESCRIPTION: These commands delete the remote and local branches after a pull request has been merged, and update the local master branch.

LANGUAGE: shell
CODE:
git push origin --delete my-fix-branch
git checkout master -f
git branch -D my-fix-branch
git pull --ff upstream master

----------------------------------------

TITLE: Implementing Concrete Table Inheritance for Question Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates concrete table inheritance by extending the Content class for the Question entity.

LANGUAGE: typescript
CODE:
@Entity()
export class Question extends Content {
    
    @Column()
    answersCount: number;
    
}

----------------------------------------

TITLE: Performing Database Operations with Repository
DESCRIPTION: Example of how to use TypeORM's Repository to save, find, and remove entities from the database.

LANGUAGE: TypeScript
CODE:
const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.age = 25
await repository.save(user)

const allUsers = await repository.find()
const firstUser = await repository.findOne(1)
const timber = await repository.findOne({
    firstName: "Timber",
    lastName: "Saw",
})

await repository.remove(timber)

----------------------------------------

TITLE: Enabling Basic TypeORM Logging Configuration
DESCRIPTION: Basic configuration to enable logging in TypeORM data source options. Enables logging of all queries and errors.

LANGUAGE: typescript
CODE:
{
    name: "mysql",
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "test",
    password: "test",
    database: "test",
    ...
    logging: true
}

----------------------------------------

TITLE: Cloning and Configuring TypeORM Repository in Git
DESCRIPTION: Commands for cloning the TypeORM repository, navigating to the project directory, and adding the main repository as an upstream remote.

LANGUAGE: shell
CODE:
# Clone your GitHub repository:
git clone git@github.com:<github username>/typeorm.git

# Go to the TypeORM directory:
cd typeorm

# Add the main TypeORM repository as an upstream remote to your repository:
git remote add upstream https://github.com/typeorm/typeorm.git

----------------------------------------

TITLE: Custom Logger with Connection Options
DESCRIPTION: Example of using a custom logger with connection options from ormconfig file.

LANGUAGE: typescript
CODE:
import { createConnection, getConnectionOptions } from "typeorm";
import { MyCustomLogger } from "./logger/MyCustomLogger";

getConnectionOptions().then(connectionOptions => {
  return createConnection(
    Object.assign(connectionOptions, {
      logger: new MyCustomLogger()
    })
  );
});

----------------------------------------

TITLE: Master-Slave Replication Configuration in TypeORM
DESCRIPTION: Shows how to configure master-slave replication in TypeORM with detailed options for MySQL, including connection retry settings and slave selection strategies.

LANGUAGE: typescript
CODE:
{
  type: "mysql",
  logging: true,
  replication: {
    master: {
      host: "server1",
      port: 3306,
      username: "test",
      password: "test",
      database: "test"
    },
    slaves: [{
      host: "server2",
      port: 3306,
      username: "test",
      password: "test",
      database: "test"
    }, {
      host: "server3",
      port: 3306,
      username: "test",
      password: "test",
      database: "test"
    }]
  }
}

----------------------------------------

TITLE: Creating Initial ORM Configuration File
DESCRIPTION: Command to create an initial ormconfig.json file by copying the distribution template.

LANGUAGE: shell
CODE:
cp ormconfig.json.dist ormconfig.json

----------------------------------------

TITLE: Implementing Single Table Inheritance for Post Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet illustrates single table inheritance by extending the Content class and using @ChildEntity decorator for the Post entity.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Post extends Content {
    
    @Column()
    viewCount: number;
    
}

----------------------------------------

TITLE: Embedded Name Class Definition
DESCRIPTION: Creation of a reusable Name class that encapsulates the common first and last name properties.

LANGUAGE: typescript
CODE:
import { Column } from "typeorm"

export class Name {
    @Column()
    first: string

    @Column()
    last: string
}

----------------------------------------

TITLE: Deleting Entities with TypeORM QueryBuilder in TypeScript
DESCRIPTION: This snippet demonstrates how to use TypeORM's QueryBuilder to create and execute a DELETE query. It imports the getConnection function from typeorm, creates a query builder, specifies the delete operation, targets the User entity, adds a WHERE clause to filter by ID, and executes the query.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

await getConnection()
  .createQueryBuilder()
  .delete()
  .from(User)
  .where("id = :id", { id: 1 })
  .execute();

----------------------------------------

TITLE: Building TypeORM Distribution Package
DESCRIPTION: Commands for building TypeORM distribution packages, including a standard package and a .tgz archive.

LANGUAGE: shell
CODE:
npm run package

LANGUAGE: shell
CODE:
npm run pack

----------------------------------------

TITLE: Rebasing and force-pushing TypeORM changes
DESCRIPTION: These commands rebase the contribution branch on the latest master and force-push the changes to update the pull request.

LANGUAGE: shell
CODE:
git rebase master -i
git push -f

----------------------------------------

TITLE: Implementing Pagination in TypeORM
DESCRIPTION: Shows how to implement pagination using limit and offset to optimize large data retrieval

LANGUAGE: typescript
CODE:
const users = await userRepository
    .createQueryBuilder("user")
    .limit(10)     // Number of records to fetch per page
    .offset(20)    // Skip the first 20 records
    .getMany();

----------------------------------------

TITLE: Running Specific TypeORM Tests
DESCRIPTION: Command to run specific TypeORM tests using the --grep flag with a regex pattern.

LANGUAGE: shell
CODE:
npm test -- --grep="github issues > #363"

----------------------------------------

TITLE: Configuring Database Schema Synchronization in TypeORM
DESCRIPTION: Demonstrates how to enable automatic schema synchronization through connection options. This allows database tables to stay in sync with entity definitions.

LANGUAGE: typescript
CODE:
import { createConnection } from "typeorm";

createConnection({
  synchronize: true
});

----------------------------------------

TITLE: Loading Relations in TypeORM Query
DESCRIPTION: Shows how to use the 'relations' option to load related entities in a query, including nested relations.

LANGUAGE: typescript
CODE:
userRepository.find({ relations: ["profile", "photos", "videos"] });
userRepository.find({ relations: ["profile", "photos", "videos", "videos.video_attributes"] });

----------------------------------------

TITLE: Applying Soft Delete with TypeORM Query Builder in TypeScript
DESCRIPTION: This snippet shows how to perform a soft delete operation using TypeORM's Query Builder. It marks a User entity with a specific ID as deleted without removing it from the database.

LANGUAGE: typescript
CODE:
await myDataSource
  .getRepository(User)
  .createQueryBuilder()
  .softDelete()
  .where("id = :id", { id: 1 })
  .execute();

----------------------------------------

TITLE: Implementing Nested Set Pattern in TypeORM
DESCRIPTION: Shows how to use the Nested set pattern for tree structures. This approach is efficient for reads but less so for writes. It doesn't support multiple roots.

LANGUAGE: typescript
CODE:
import {
    Entity,
    Tree,
    Column,
    PrimaryGeneratedColumn,
    TreeChildren,
    TreeParent,
    TreeLevelColumn,
} from "typeorm"

@Entity()
@Tree("nested-set")
export class Category {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @TreeChildren()
    children: Category[]

    @TreeParent()
    parent: Category
}

----------------------------------------

TITLE: Getting Repository in TypeORM
DESCRIPTION: Shows how to get a Repository for a given entity or table name and use its methods.

LANGUAGE: typescript
CODE:
const repository = dataSource.getRepository(User)
// now you can call repository methods, for example find:
const users = await repository.find()

----------------------------------------

TITLE: Saving Lazy Relations in TypeORM with TypeScript
DESCRIPTION: This snippet demonstrates how to save entities with lazy relations. The related categories are wrapped in a Promise when assigning to the question entity.

LANGUAGE: typescript
CODE:
const category1 = new Category()
category1.name = "animals"
await dataSource.manager.save(category1)

const category2 = new Category()
category2.name = "zoo"
await dataSource.manager.save(category2)

const question = new Question()
question.categories = Promise.resolve([category1, category2])
await dataSource.manager.save(question)

----------------------------------------

TITLE: Advanced Custom Logger with Query Runner
DESCRIPTION: Example of implementing a custom logger with query runner access for additional logging data.

LANGUAGE: typescript
CODE:
logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {
    const requestUrl = queryRunner && queryRunner.data["request"] ? "(" + queryRunner.data["request"].url + ") " : "";
    console.log(requestUrl + "executing query: " + sql);
}

----------------------------------------

TITLE: Redis Cluster Configuration
DESCRIPTION: Configuration for using Redis Cluster as cache storage with IORedis.

LANGUAGE: typescript
CODE:
{
    type: "mysql",
    host: "localhost",
    username: "test",
    cache: {
        type: "ioredis/cluster",
        options: {
            startupNodes: [
                {
                    host: 'localhost',
                    port: 7000,
                },
                {
                    host: 'localhost',
                    port: 7001,
                },
                {
                    host: 'localhost',
                    port: 7002,
                }
            ],
            options: {
                scaleReads: 'all',
                clusterRetryStrategy: function (times) { return null },
                redisOptions: {
                    maxRetriesPerRequest: 1
                }
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Question Entity with ManyToMany Relation
DESCRIPTION: Shows the Question entity implementation with a many-to-many relationship to Category, including cascade configuration and join table decoration.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
    JoinTable,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Question {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany((type) => Category, (category) => category.categories, {
        cascade: true,
    })
    @JoinTable()
    categories: Category[]
}

----------------------------------------

TITLE: Raw SQL Query Execution with Parameters
DESCRIPTION: Shows how to execute raw SQL queries with different parameter syntaxes across various database drivers including MySQL, PostgreSQL, Oracle, and SQL Server.

LANGUAGE: typescript
CODE:
const rawData = await manager.query(`SELECT * FROM USERS`)

// aurora-mysql, better-sqlite3, capacitor, cordova, 
// expo, mariadb, mysql, nativescript, react-native, 
// sap, sqlite, sqljs
const rawData = await manager.query(
    'SELECT * FROM USERS WHERE name = ? and age = ?',
    [ 'John', 24 ]
)

// aurora-postgres, cockroachdb, postgres
const rawData = await manager.query(
    'SELECT * FROM USERS WHERE name = $1 and age = $2',
    ['John', 24]
)

// oracle
const rawData = await manager.query(
    'SELECT * FROM USERS WHERE name = :1 and age = :2',
    ['John', 24]
)

// spanner
const rawData = await manager.query(
    'SELECT * FROM USERS WHERE name = @param0 and age = @param1',
    [ 'John', 24 ]
)

// mssql
const rawData = await manager.query(
    'SELECT * FROM USERS WHERE name = @0 and age = @1',
    [ 'John', 24 ]
)

----------------------------------------

TITLE: Clearing Data in TypeORM Repository
DESCRIPTION: Demonstrates how to clear all data from a given table using the repository's clear method.

LANGUAGE: typescript
CODE:
await repository.clear();

----------------------------------------

TITLE: Clearing Data in TypeORM Repository
DESCRIPTION: Demonstrates how to clear all data from a given table using the repository's clear method.

LANGUAGE: typescript
CODE:
await repository.clear();

----------------------------------------

TITLE: Generated Database Tables for User and Photo Entities in TypeORM
DESCRIPTION: This snippet shows the SQL table structures generated by TypeORM for the User and Photo entities, including the foreign key relationship.

LANGUAGE: bash
CODE:
+-------------+--------------+----------------------------+
|                         photo                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| url         | varchar(255) |                            |
| userId      | int(11)      |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Saving Related Entities Using Individual Assignments in TypeORM
DESCRIPTION: Alternative approach to saving related entities by setting the user property on individual photo entities.

LANGUAGE: typescript
CODE:
const user = new User()
user.name = "Leo"
await dataSource.manager.save(user)

const photo1 = new Photo()
photo1.url = "me.jpg"
photo1.user = user
await dataSource.manager.save(photo1)

const photo2 = new Photo()
photo2.url = "me-and-bears.jpg"
photo2.user = user
await dataSource.manager.save(photo2)

----------------------------------------

TITLE: Error-Only Logging Configuration
DESCRIPTION: Configuration to enable logging for failed queries only.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    logging: ["error"]
}

----------------------------------------

TITLE: Saving Related Entities Using Individual Assignments in TypeORM
DESCRIPTION: Alternative approach to saving related entities by setting the user property on individual photo entities.

LANGUAGE: typescript
CODE:
const user = new User()
user.name = "Leo"
await dataSource.manager.save(user)

const photo1 = new Photo()
photo1.url = "me.jpg"
photo1.user = user
await dataSource.manager.save(photo1)

const photo2 = new Photo()
photo2.url = "me-and-bears.jpg"
photo2.user = user
await dataSource.manager.save(photo2)

----------------------------------------

TITLE: Using Chunk Option for Removal in TypeORM Repository
DESCRIPTION: Illustrates how to use the chunk option when removing a large number of entities.

LANGUAGE: typescript
CODE:
// users contains an array of user entities
userRepository.remove(users, {chunk: entities.length / 1000});

----------------------------------------

TITLE: Defining MongoDB Subdocuments in TypeORM
DESCRIPTION: Shows how to define embedded documents (subdocuments) in MongoDB using TypeORM's entity decorators.

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm";

export class Profile {
  @Column()
  about: string;

  @Column()
  education: string;

  @Column()
  career: string;
}

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm";

export class Photo {
  @Column()
  url: string;

  @Column()
  description: string;

  @Column()
  size: number;

  constructor(url: string, description: string, size: number) {
    this.url = url;
    this.description = description;
    this.size = size;
  }
}

LANGUAGE: typescript
CODE:
import { Entity, ObjectId, ObjectIdColumn, Column } from "typeorm";

@Entity()
export class User {
  @ObjectIdColumn()
  id: ObjectId;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column(type => Profile)
  profile: Profile;

  @Column(type => Photo)
  photos: Photo[];
}

----------------------------------------

TITLE: Defining Simple Entity Schema in TypeORM
DESCRIPTION: This snippet demonstrates how to define a simple entity schema for a category using TypeORM's EntitySchema. It includes a primary key 'id' and a 'name' column.

LANGUAGE: typescript
CODE:
import {EntitySchema} from "typeorm";

export const CategoryEntity = new EntitySchema({
    name: "category",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true
        },
        name: {
            type: String
        }
    }
});

----------------------------------------

TITLE: Loading Related Entities Using QueryBuilder in TypeORM
DESCRIPTION: Shows how to load related entities using QueryBuilder with left join operations.

LANGUAGE: typescript
CODE:
const users = await dataSource
    .getRepository(User)
    .createQueryBuilder("user")
    .leftJoinAndSelect("user.photos", "photo")
    .getMany()

// or from inverse side

const photos = await dataSource
    .getRepository(Photo)
    .createQueryBuilder("photo")
    .leftJoinAndSelect("photo.user", "user")
    .getMany()

----------------------------------------

TITLE: Using Active Record Pattern in TypeORM
DESCRIPTION: Example of how to use the Active Record pattern with TypeORM for database operations.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from "typeorm"

@Entity()
export class User extends BaseEntity {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string

    @Column()
    age: number
}

const user = new User()
user.firstName = "Timber"
user.lastName = "Saw"
user.age = 25
await user.save()

const allUsers = await User.find()
const firstUser = await User.findOne(1)
const timber = await User.findOne({ firstName: "Timber", lastName: "Saw" })

await timber.remove()

----------------------------------------

TITLE: Using Active Record Pattern in TypeORM
DESCRIPTION: Shows how to use the Active Record pattern with TypeORM by extending the BaseEntity class and using its static methods for database operations.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from "typeorm";

@Entity()
export class User extends BaseEntity {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  age: number;
}

LANGUAGE: TypeScript
CODE:
const user = new User();
user.firstName = "Timber";
user.lastName = "Saw";
user.age = 25;
await user.save();

const allUsers = await User.find();
const firstUser = await User.findOne(1);
const timber = await User.findOne({ firstName: "Timber", lastName: "Saw" });

await timber.remove();

----------------------------------------

TITLE: Defining Question Entity with Many-to-Many Relation
DESCRIPTION: TypeScript entity class definition for a Question with a many-to-many relationship to Category using @ManyToMany and @JoinTable decorators.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
    JoinTable,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Question {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany(() => Category)
    @JoinTable()
    categories: Category[]
}

----------------------------------------

TITLE: Creating QueryRunner in TypeORM
DESCRIPTION: Shows how to create and use a QueryRunner for managing database connections and executing queries.

LANGUAGE: typescript
CODE:
const queryRunner = dataSource.createQueryRunner()

// you can use its methods only after you call connect
// which performs real database connection
await queryRunner.connect()

// .. now you can work with query runner and call its methods

// very important - don't forget to release query runner once you finished working with it
await queryRunner.release()

----------------------------------------

TITLE: Defining Question Entity with Many-to-Many Relation
DESCRIPTION: TypeScript entity class definition for a Question with a many-to-many relationship to Category using @ManyToMany and @JoinTable decorators.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    ManyToMany,
    JoinTable,
} from "typeorm"
import { Category } from "./Category"

@Entity()
export class Question {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    text: string

    @ManyToMany(() => Category)
    @JoinTable()
    categories: Category[]
}

----------------------------------------

TITLE: Running Fast Tests for TypeORM
DESCRIPTION: Command to run TypeORM tests without causing a full recompile, for faster feedback during development.

LANGUAGE: shell
CODE:
npm run test-fast

----------------------------------------

TITLE: Configuring TypeORM Connection
DESCRIPTION: Demonstrates how to configure a TypeORM connection using the createConnection function and specifying connection options.

LANGUAGE: TypeScript
CODE:
import "reflect-metadata";
import { createConnection } from "typeorm";
import { Photo } from "./entity/Photo";

createConnection({
  type: "mysql",
  host: "localhost",
  port: 3306,
  username: "root",
  password: "admin",
  database: "test",
  entities: [Photo],
  synchronize: true,
  logging: false
})
  .then(connection => {
    // Here you can start to work with your entities
  })
  .catch(error => console.log(error));

----------------------------------------

TITLE: Defining Entity with @Entity Decorator in TypeORM
DESCRIPTION: Example of using the @Entity decorator to define a database table with custom options

LANGUAGE: typescript
CODE:
@Entity({
    name: "users",
    engine: "MyISAM",
    database: 'example_dev',
    schema: 'schema_with_best_tables',
    synchronize: false,
    orderBy: {
        name: "ASC",
        id: "DESC"
    }
})
export class User {


----------------------------------------

TITLE: Defining User Entity with One-to-One Relation
DESCRIPTION: Creates a User entity with a one-to-one relationship to Profile entity. Uses @OneToOne and @JoinColumn decorators to establish the relationship.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    OneToOne,
    JoinColumn,
} from "typeorm"
import { Profile } from "./Profile"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @OneToOne(() => Profile)
    @JoinColumn()
    profile: Profile
}

----------------------------------------

TITLE: Creating Multiple Database Connections with TypeORM in TypeScript
DESCRIPTION: Illustrates the process of creating multiple database connections simultaneously using the createConnections function from TypeORM. It sets up two MySQL database connections with different names and databases.

LANGUAGE: typescript
CODE:
import { createConnections, Connection } from "typeorm"

const connections = await createConnections([
    {
        name: "default",
        type: "mysql",
        host: "localhost",
        port: 3306,
        username: "test",
        password: "test",
        database: "test",
    },
    {
        name: "test2-connection",
        type: "mysql",
        host: "localhost",
        port: 3306,
        username: "test",
        password: "test",
        database: "test2",
    },
])

----------------------------------------

TITLE: Creating a Many-to-Many Relationship in TypeORM
DESCRIPTION: Shows how to create a many-to-many relationship between two entities (Photo and Album) using the @ManyToMany decorator and @JoinTable.

LANGUAGE: TypeScript
CODE:
import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from "typeorm";

@Entity()
export class Album {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @ManyToMany(type => Photo, photo => photo.albums)
  @JoinTable()
  photos: Photo[];
}

export class Photo {
  // ... other columns

  @ManyToMany(type => Album, album => album.photos)
  albums: Album[];
}

----------------------------------------

TITLE: Bi-directional User Entity Definition
DESCRIPTION: Updated User entity with bi-directional relationship to Profile entity using @OneToOne and @JoinColumn decorators.

LANGUAGE: typescript
CODE:
import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    OneToOne,
    JoinColumn,
} from "typeorm"
import { Profile } from "./Profile"

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    name: string

    @OneToOne(() => Profile, (profile) => profile.user) // specify inverse side as a second parameter
    @JoinColumn()
    profile: Profile
}

----------------------------------------

TITLE: Defining Entities for Multiple Databases in TypeORM
DESCRIPTION: This snippet shows how to specify different databases for entities within a single data source. It includes two entity definitions, one for 'User' in 'secondDB' and another for 'Photo' in 'thirdDB'.

LANGUAGE: typescript
CODE:
import { Entity, PrimaryGeneratedColumn, Column } from "typeorm"

@Entity({ database: "secondDB" })
export class User {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    firstName: string

    @Column()
    lastName: string
}

@Entity({ database: "thirdDB" })
export class Photo {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    url: string
}

----------------------------------------

TITLE: Clearing Specific Cache Entries
DESCRIPTION: Example showing how to clear specific cached results using cache IDs.

LANGUAGE: typescript
CODE:
await dataSource.queryResultCache.remove(["users_admins"])

----------------------------------------

TITLE: Extending Entity Schemas in TypeORM
DESCRIPTION: This snippet demonstrates how to extend entity schemas using the spread operator in TypeORM. It defines a base column schema part and then uses it in a category entity schema.

LANGUAGE: typescript
CODE:
import {EntitySchemaColumnOptions} from "typeorm";

export const BaseColumnSchemaPart = {
  id: {
    type: Number,
    primary: true,
    generated: true,
  } as EntitySchemaColumnOptions,
  createdAt: {
    name: 'created_at',
    type: 'timestamp with time zone',
    createDate: true,
  } as EntitySchemaColumnOptions,
  updatedAt: {
    name: 'updated_at',
    type: 'timestamp with time zone',
    updateDate: true,
  } as EntitySchemaColumnOptions,
};

LANGUAGE: typescript
CODE:
export const CategoryEntity = new EntitySchema<Category>({
    name: "category",
    columns: {
        ...BaseColumnSchemaPart,    
        // CategoryEntity now has id, createdAt, updatedAt columns defined!
        // Additionally, the following new field is defined
        name: {
            type: String
        }
    }
});

----------------------------------------

TITLE: Traditional Entity Relation Update in TypeORM
DESCRIPTION: Shows the traditional way of updating relations by loading the entity with its relations, modifying them, and saving. This approach is less efficient than using RelationQueryBuilder.

LANGUAGE: typescript
CODE:
const postRepository = dataSource.manager.getRepository(Post)
const post = await postRepository.findOne({
    where: {
        id: 1,
    },
    relations: {
        categories: true,
    },
})
post.categories.push(category)
await postRepository.save(post)

----------------------------------------

TITLE: Getting MongoRepository in TypeORM
DESCRIPTION: Shows how to get a MongoRepository for MongoDB-specific operations and use its methods.

LANGUAGE: typescript
CODE:
const repository = dataSource.getMongoRepository(User)
// now you can call mongodb-specific repository methods, for example createEntityCursor:
const categoryCursor = repository.createEntityCursor()
const category1 = await categoryCursor.next()
const category2 = await categoryCursor.next()

----------------------------------------

TITLE: Creating a One-to-One Relationship in TypeORM
DESCRIPTION: Demonstrates how to set up a one-to-one relationship between User and Profile entities using @OneToOne and @JoinColumn decorators.

LANGUAGE: typescript
CODE:
import { Entity, OneToOne, JoinColumn } from "typeorm"
import { Profile } from "./Profile"

@Entity()
export class User {
    @OneToOne((type) => Profile, (profile) => profile.user)
    @JoinColumn()
    profile: Profile
}

----------------------------------------

TITLE: Adding Relation by ID in TypeORM
DESCRIPTION: Demonstrates how to add a relation using entity IDs instead of entity instances. This approach is more efficient when working with known IDs.

LANGUAGE: typescript
CODE:
await dataSource.createQueryBuilder().relation(Post, "categories").of(1).add(3)

----------------------------------------

TITLE: Creating Embedded Name Class for TypeORM
DESCRIPTION: This snippet defines a new Name class that encapsulates the common firstName and lastName properties. This class will be used as an embedded column in other entities.

LANGUAGE: typescript
CODE:
import {Entity, Column} from "typeorm";

export class Name {
    
    @Column()
    first: string;
    
    @Column()
    last: string;
    
}

----------------------------------------

TITLE: Creating Transactions with DataSource in TypeORM
DESCRIPTION: Demonstrates how to create a transaction using the DataSource object in TypeORM. The transaction is executed within a callback function that receives a transactional entity manager.

LANGUAGE: typescript
CODE:
await myDataSource.transaction(async (transactionalEntityManager) => {
    // execute queries using transactionalEntityManager
})

----------------------------------------

TITLE: Removing Relations in TypeORM
DESCRIPTION: Demonstrates how to remove a relation using RelationQueryBuilder. Works with many-to-many and one-to-many relations.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .remove(category)

----------------------------------------

TITLE: Creating Transactions with DataSource in TypeORM
DESCRIPTION: Demonstrates how to create a transaction using the DataSource object in TypeORM. The transaction is executed within a callback function that receives a transactional entity manager.

LANGUAGE: typescript
CODE:
await myDataSource.transaction(async (transactionalEntityManager) => {
    // execute queries using transactionalEntityManager
})

----------------------------------------

TITLE: Removing Relations in TypeORM
DESCRIPTION: Demonstrates how to remove a relation using RelationQueryBuilder. Works with many-to-many and one-to-many relations.

LANGUAGE: typescript
CODE:
await dataSource
    .createQueryBuilder()
    .relation(Post, "categories")
    .of(post)
    .remove(category)

----------------------------------------

TITLE: Defining Base Entity for Single Table Inheritance in TypeORM (TypeScript)
DESCRIPTION: This snippet defines a Content entity as the base class for single table inheritance, using @TableInheritance decorator.

LANGUAGE: typescript
CODE:
@Entity()
@TableInheritance({ column: { type: "varchar", name: "type" } })
export class Content {
    
    @PrimaryGeneratedColumn()
    id: number;
 
    @Column()
    title: string;
    
    @Column()
    description: string;
    
}

----------------------------------------

TITLE: Defining Complex Entity Schema in TypeORM
DESCRIPTION: Example of a complex entity schema definition in TypeORM, including checks, indices, and unique constraints for a person entity.

LANGUAGE: typescript
CODE:
import { EntitySchema } from "typeorm"

export const PersonSchema = new EntitySchema({
    name: "person",
    columns: {
        id: {
            primary: true,
            type: "int",
            generated: "increment",
        },
        firstName: {
            type: String,
            length: 30,
        },
        lastName: {
            type: String,
            length: 50,
            nullable: false,
        },
        age: {
            type: Number,
            nullable: false,
        },
    },
    checks: [
        { expression: `"firstName" <> 'John' AND "lastName" <> 'Doe'` },
        { expression: `"age" > 18` },
    ],
    indices: [
        {
            name: "IDX_TEST",
            unique: true,
            columns: ["firstName", "lastName"],
        },
    ],
    uniques: [
        {
            name: "UNIQUE_TEST",
            columns: ["firstName", "lastName"],
        },
    ],
})

----------------------------------------

TITLE: Implementing Single Table Inheritance for Post Entity in TypeORM
DESCRIPTION: Defines a 'Post' entity as a child of 'Content' for single table inheritance. This adds a 'viewCount' property to be stored in the shared table.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Post extends Content {
    @Column()
    viewCount: number
}

----------------------------------------

TITLE: Creating Spatial Indices in TypeORM
DESCRIPTION: Demonstrates creation of spatial indices for geometric data types in MySQL and PostgreSQL with PostGIS.

LANGUAGE: typescript
CODE:
export interface Geometry {
    type: "Point"
    coordinates: [Number, Number]
}

@Entity()
export class Thing {
    @Column("geometry", {
        spatialFeatureType: "Point",
        srid: 4326,
    })
    @Index({ spatial: true })
    point: Geometry
}

----------------------------------------

TITLE: Field Selection Optimization in TypeORM
DESCRIPTION: Demonstrates how to optimize memory usage by selecting specific fields using select()

LANGUAGE: typescript
CODE:
const users = await dataSource.getRepository(User)
    .createQueryBuilder("user")
    .select(["user.name", "user.email"])
    .getMany();

----------------------------------------

TITLE: Defining Typesafe Entity Schema in TypeORM
DESCRIPTION: Example of creating a typesafe entity schema in TypeORM by defining an interface and using it in the EntitySchema generic.

LANGUAGE: typescript
CODE:
import { EntitySchema } from "typeorm"

export interface Category {
    id: number
    name: string
}

export const CategoryEntity = new EntitySchema<Category>({
    name: "category",
    columns: {
        id: {
            type: Number,
            primary: true,
            generated: true,
        },
        name: {
            type: String,
        },
    },
})

----------------------------------------

TITLE: Managing Migrations
DESCRIPTION: Commands for creating, generating, running, and reverting migrations in TypeORM.

LANGUAGE: bash
CODE:
typeorm migration:create path-to-migrations-dir/migrationName

LANGUAGE: bash
CODE:
typeorm migration:generate -n UserMigration

LANGUAGE: bash
CODE:
typeorm migration:run

LANGUAGE: bash
CODE:
typeorm migration:revert -- -d path-to-datasource-config

----------------------------------------

TITLE: Creating a View Entity with @ViewEntity Decorator in TypeORM
DESCRIPTION: Demonstrates how to define a database view using the @ViewEntity decorator with a QueryBuilder expression

LANGUAGE: typescript
CODE:
@ViewEntity({ 
    expression: (connection: Connection) => connection.createQueryBuilder()
        .select("post.id", "id")
        .addSelect("post.name", "name")
        .addSelect("category.name", "categoryName")
        .from(Post, "post")
        .leftJoin(Category, "category", "category.id = post.categoryId")
})
export class PostCategory {


----------------------------------------

TITLE: Handling Composite Keys in RelationQueryBuilder
DESCRIPTION: Demonstrates how to work with composite primary keys when managing relations.

LANGUAGE: typescript
CODE:
import { getConnection } from "typeorm";

await getConnection()
  .createQueryBuilder()
  .relation(Post, "categories")
  .of({ firstPostId: 1, secondPostId: 3 })
  .add({ firstCategoryId: 2, secondCategoryId: 4 });

----------------------------------------

TITLE: Defining Photo Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet defines a Photo entity with id, title, description, and size columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
@Entity()
export class Photo {
    
    @PrimaryGeneratedColumn()
    id: number;
 
    @Column()
    title: string;
    
    @Column()
    description: string;
    
    @Column()
    size: string;
    
}

----------------------------------------

TITLE: Defining Photo Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet defines a Photo entity with id, title, description, and size columns using TypeORM decorators.

LANGUAGE: typescript
CODE:
@Entity()
export class Photo {
    
    @PrimaryGeneratedColumn()
    id: number;
 
    @Column()
    title: string;
    
    @Column()
    description: string;
    
    @Column()
    size: string;
    
}

----------------------------------------

TITLE: Implementing Single Table Inheritance for Question Entity in TypeORM (TypeScript)
DESCRIPTION: This snippet demonstrates single table inheritance by extending the Content class and using @ChildEntity decorator for the Question entity.

LANGUAGE: typescript
CODE:
@ChildEntity()
export class Question extends Content {
    
    @Column()
    answersCount: number;
    
}

----------------------------------------

TITLE: Custom Join Entity for Many-to-Many with Additional Properties
DESCRIPTION: Definition of a custom join entity (QuestionToCategory) that allows storing additional properties in the many-to-many relationship.

LANGUAGE: typescript
CODE:
import { Entity, Column, ManyToOne, PrimaryGeneratedColumn } from "typeorm"
import { Question } from "./question"
import { Category } from "./category"

@Entity()
export class QuestionToCategory {
    @PrimaryGeneratedColumn()
    public questionToCategoryId: number

    @Column()
    public questionId: number

    @Column()
    public categoryId: number

    @Column()
    public order: number

    @ManyToOne(() => Question, (question) => question.questionToCategories)
    public question: Question

    @ManyToOne(() => Category, (category) => category.questionToCategories)
    public category: Category
}

----------------------------------------

TITLE: Custom Repository in Data Mapper Pattern
DESCRIPTION: Shows how to create a custom repository with additional query methods using the Data Mapper pattern.

LANGUAGE: typescript
CODE:
import { EntityRepository, Repository } from "typeorm";
import { User } from "../entity/User";

@EntityRepository()
export class UserRepository extends Repository<User> {
  findByName(firstName: string, lastName: string) {
    return this.createQueryBuilder("user")
      .where("user.firstName = :firstName", { firstName })
      .andWhere("user.lastName = :lastName", { lastName })
      .getMany();
  }
}

----------------------------------------

TITLE: TypeORM Global Pattern Success Log Example
DESCRIPTION: Example of TypeORM logging output when entity files are successfully found matching the specified glob pattern. Shows the matched file paths that were discovered.

LANGUAGE: bash
CODE:
INFO: All classes found using provided glob pattern "dist/**/*.entity{.js,.ts}" : "dist/app/user/user.entity.js | dist/app/common/common.entity.js"

----------------------------------------

TITLE: Creating and Merging Entities in TypeORM EntityManager
DESCRIPTION: Shows how to create new entity instances and merge multiple entities or object literals into a single entity using EntityManager methods.

LANGUAGE: typescript
CODE:
const user = manager.create(User); // same as const user = new User();
const user = manager.create(User, {
  id: 1,
  firstName: "Timber",
  lastName: "Saw"
}); // 和 const user = new User(); user.firstName = "Timber"; user.lastName = "Saw"; 一样

LANGUAGE: typescript
CODE:
const user = new User();
manager.merge(User, user, { firstName: "Timber" }, { lastName: "Saw" }); // 和user.firstName = "Timber"; user.lastName = "Saw";一样

----------------------------------------

TITLE: Saving Entities with Lazy Relationships in TypeORM (TypeScript)
DESCRIPTION: This snippet shows how to save entities with lazy relationships in TypeORM. The categories are assigned to the question using a resolved Promise.

LANGUAGE: typescript
CODE:
const category1 = new Category();
category1.name = "animals";
await connection.manager.save(category1);

const category2 = new Category();
category2.name = "zoo";
await connection.manager.save(category2);

const question = new Question();
question.categories = Promise.resolve([category1, category2]);
await connection.manager.save(question);

----------------------------------------

TITLE: Multi-Database Entity Configuration in TypeORM
DESCRIPTION: Shows how to configure entities to use different databases within a single connection by specifying the database name in the entity decorator.

LANGUAGE: typescript
CODE:
import {Entity, PrimaryGeneratedColumn, Column} from "typeorm";

@Entity({ database: "secondDB" })
export class User {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

}

----------------------------------------

TITLE: Creating Generic Entity Event Subscriber in TypeORM
DESCRIPTION: Demonstrates how to create a global event subscriber that listens to events from all entities. Implements beforeInsert hook for any entity type.

LANGUAGE: typescript
CODE:
@EventSubscriber()
export class PostSubscriber implements EntitySubscriberInterface {
  /**
   * 在实体插入之前调用。
   */
  beforeInsert(event: InsertEvent<any>) {
    console.log(`BEFORE ENTITY INSERTED: `, event.entity);
  }
}

----------------------------------------

TITLE: Configuring Specific Logging Options
DESCRIPTION: Configuration for enabling specific types of logging in TypeORM, such as queries and errors.

LANGUAGE: typescript
CODE:
{
    host: "localhost",
    ...
    logging: ["query", "error"]
}

----------------------------------------

TITLE: Model Operations and Usage
DESCRIPTION: Illustrates how to perform common model operations like creating new records and accessing properties in both frameworks.

LANGUAGE: typescript
CODE:
const employee = new Employee();
employee.name = "John Doe";
employee.title = "senior engineer";

// Alternative creation method
const employee = Employee.create({ name: "John Doe", title: "senior engineer" });

// Preloading existing entity
const employee = await Employee.preload({ id: 1, name: "John Doe" });

// Property access
console.log(employee.name);

----------------------------------------

TITLE: Using TypeORM Repository and EntityManager in a TypeScript Controller
DESCRIPTION: Demonstrates how to use getManager and getRepository functions to access the connection's EntityManager and Repository without directly using the connection object. This approach is recommended for most use cases.

LANGUAGE: typescript
CODE:
import { getManager, getRepository } from "typeorm"
import { User } from "../entity/User"

export class UserController {
    @Get("/users")
    getAll() {
        return getManager().find(User)
    }

    @Get("/users/:id")
    getAll(@Param("id") userId: number) {
        return getRepository(User).findOne(userId)
    }
}

----------------------------------------

TITLE: Complete TypeORM Express Integration
DESCRIPTION: Full implementation combining TypeORM with Express.js routes

LANGUAGE: typescript
CODE:
import * as express from "express";
import { Request, Response } from "express";
import * as bodyParser from "body-parser";
import { createConnection } from "typeorm";
import { User } from "./User";

createConnection().then(connection => {
  const userRepository = connection.getRepository(User);

  const app = express();
  app.use(bodyParser.json());

  app.get("/users", async function(req: Request, res: Response) {
    return userRepository.find();
  });

  app.get("/users/:id", async function(req: Request, res: Response) {
    return userRepository.findOne(req.params.id);
  });

  app.post("/users", async function(req: Request, res: Response) {
    const user = userRepository.create(req.body);
    return userRepository.save(user);
  });

  app.put("/users/:id", function(req: Request, res: Response) {
    const user = userRepository.findOne(req.params.id);
    userRepository.merge(user, req.body);
    return userRepository.save(user);
  });

  app.delete("/users/:id", async function(req: Request, res: Response) {
    return userRepository.remove(req.params.id);
  });

  app.listen(3000);
});

----------------------------------------

TITLE: Overriding ormconfig Options in TypeORM (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to override options defined in the ormconfig file. It loads connection options, modifies them, and then creates a connection with the updated options.

LANGUAGE: typescript
CODE:
// Read connection options from ormconfig file (or ENV variables)
const connectionOptions = await getConnectionOptions()

// Do something with connectionOptions,
// e.g. set custom naming strategy or custom logger
Object.assign(connectionOptions, { namingStrategy: new MyNamingStrategy() })

// Create a connection using modified connection options
const connection = await createConnection(connectionOptions)

----------------------------------------

TITLE: Accessing Entity Repositories in TypeORM
DESCRIPTION: Shows different ways to access entity repositories including standard, tree, and MongoDB repositories.

LANGUAGE: typescript
CODE:
import {getRepository, getTreeRepository, getMongoRepository} from "typeorm";

const userRepository = getRepository(User);
const blogRepository = getRepository(Blog, "secondary-connection");

const treeRepository = getTreeRepository(User);
const mongoRepository = getMongoRepository(User);

----------------------------------------

TITLE: Generated Database Table Structure
DESCRIPTION: Shows the resulting database table structure for User and Profile entities with foreign key relationship.

LANGUAGE: bash
CODE:
+-------------+--------------+----------------------------+
|                        profile                          |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| gender      | varchar(255) |                            |
| photo       | varchar(255) |                            |
+-------------+--------------+----------------------------+

+-------------+--------------+----------------------------+
|                          user                           |
+-------------+--------------+----------------------------+
| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |
| name        | varchar(255) |                            |
| profileId   | int(11)      | FOREIGN KEY                |
+-------------+--------------+----------------------------+

----------------------------------------

TITLE: Accessing Database Driver in TypeORM
DESCRIPTION: Illustrates how to access the underlying database driver used by the DataSource.

LANGUAGE: typescript
CODE:
const driver: Driver = dataSource.driver

----------------------------------------

TITLE: Using @EventSubscriber Decorator for Entity Events in TypeORM
DESCRIPTION: Demonstrates how to create an event subscriber that listens to specific entity events

LANGUAGE: typescript
CODE:
@EventSubscriber()
export class PostSubscriber implements EntitySubscriberInterface<Post> {
    /**
     * Indicates that this subscriber only listens to Post events.
     */
    listenTo() {
        return Post;
    }

    /**
     * Called before post insertion.
     */
    beforeInsert(event: InsertEvent<Post>) {
        console.log(`BEFORE POST INSERTED: `, event.entity);
    }
}


----------------------------------------

TITLE: MongoDB DataSource Configuration
DESCRIPTION: Configuration setup for MongoDB connection in TypeORM showing basic connection parameters.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const myDataSource = new DataSource({
    type: "mongodb",
    host: "localhost",
    port: 27017,
    database: "test",
})

----------------------------------------

TITLE: Model Operations and Queries
DESCRIPTION: Shows how to perform basic CRUD operations and model interactions in both ORMs, including creation, saving, and property access.

LANGUAGE: javascript
CODE:
const employee = await Employee.create({
    name: "John Doe",
    title: "senior engineer",
})

LANGUAGE: typescript
CODE:
const employee = new Employee()
employee.name = "John Doe"
employee.title = "senior engineer"
await dataSource.getRepository(Employee).save(employee)

----------------------------------------

TITLE: MongoDB DataSource Configuration
DESCRIPTION: Configuration setup for MongoDB connection in TypeORM showing basic connection parameters.

LANGUAGE: typescript
CODE:
import { DataSource } from "typeorm"

const myDataSource = new DataSource({
    type: "mongodb",
    host: "localhost",
    port: 27017,
    database: "test",
})

----------------------------------------

TITLE: TypeORM Migration Template
DESCRIPTION: Basic structure of a TypeORM migration file with up and down methods.

LANGUAGE: typescript
CODE:
import { MigrationInterface, QueryRunner } from "typeorm"

export class PostRefactoringTIMESTAMP implements MigrationInterface {
    async up(queryRunner: QueryRunner): Promise<void> {}

    async down(queryRunner: QueryRunner): Promise<void> {}
}

----------------------------------------

TITLE: NativeScript TypeORM Configuration
DESCRIPTION: Setup code for initializing TypeORM in a NativeScript application with SQLite driver.

LANGUAGE: typescript
CODE:
import driver from "nativescript-sqlite"

const dataSource = new DataSource({
    database: "test.db",
    type: "nativescript",
    driver,
    entities: [
        Todo, //... whatever entities you have
    ],
    logging: true,
})

----------------------------------------

TITLE: Setting Function Default Values in TypeORM
DESCRIPTION: Demonstrates how to set a database function like NOW() as a default value for a column using the default column option.

LANGUAGE: typescript
CODE:
@Column({ default: () => "NOW()" })
date: Date;

----------------------------------------

TITLE: Using MongoEntityManager in TypeORM
DESCRIPTION: Shows how to access and use the MongoEntityManager for MongoDB-specific operations.

LANGUAGE: typescript
CODE:
const manager: MongoEntityManager = dataSource.mongoManager
// you can call manager or mongodb-manager specific methods, for example find:
const users = await manager.find()

----------------------------------------

TITLE: Using MongoEntityManager in TypeORM
DESCRIPTION: Shows how to access and use the MongoEntityManager for MongoDB-specific operations.

LANGUAGE: typescript
CODE:
const manager: MongoEntityManager = dataSource.mongoManager
// you can call manager or mongodb-manager specific methods, for example find:
const users = await manager.find()

----------------------------------------

TITLE: Implementing Entity Inheritance in TypeORM
DESCRIPTION: Shows how to use entity inheritance to reduce code duplication in TypeORM.

LANGUAGE: typescript
CODE:
export abstract class Content {
    @PrimaryGeneratedColumn()
    id: number

    @Column()
    title: string

    @Column()
    description: string
}

@Entity()
export class Photo extends Content {
    @Column()
    size: string
}

@Entity()
export class Question extends Content {
    @Column()
    answersCount: number
}

@Entity()
export class Post extends Content {
    @Column()
    viewCount: number
}

----------------------------------------

TITLE: SQL Query for Renaming Column
DESCRIPTION: SQL query to rename the 'title' column to 'name' in the 'post' table.

LANGUAGE: sql
CODE:
ALTER TABLE "post" ALTER COLUMN "title" RENAME TO "name";

----------------------------------------

TITLE: Entity Creation and Merging in TypeORM
DESCRIPTION: Methods for creating new entities and merging entity data.

LANGUAGE: typescript
CODE:
const user = repository.create()
const user = repository.create({
    id: 1,
    firstName: "Timber",
    lastName: "Saw"
})

LANGUAGE: typescript
CODE:
const user = new User()
repository.merge(user, { firstName: "Timber" }, { lastName: "Saw" })

----------------------------------------

TITLE: Creating a Many-to-One Relationship in TypeORM
DESCRIPTION: Demonstrates how to create a many-to-one relationship between two entities (Photo and Author) using the @ManyToOne and @OneToMany decorators.

LANGUAGE: TypeScript
CODE:
import { Entity, Column, PrimaryGeneratedColumn, OneToMany, JoinColumn } from "typeorm";
import { Photo } from "./Photo";

@Entity()
export class Author {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @OneToMany(type => Photo, photo => photo.author)
  photos: Photo[];
}

@Entity()
export class Photo {
  // ... other columns

  @ManyToOne(type => Author, author => author.photos)
  author: Author;
}

----------------------------------------

TITLE: Creating a new Git branch for TypeORM contribution
DESCRIPTION: This command creates a new Git branch named 'my-fix-branch' based off the master branch for making contributions to TypeORM.

LANGUAGE: shell
CODE:
git checkout -b my-fix-branch master