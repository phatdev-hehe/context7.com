TITLE: Creating Simple MCP Server with FastMCP
DESCRIPTION: Example of creating an MCP server with a calculator tool and a dynamic greeting resource using FastMCP.

LANGUAGE: python
CODE:
# server.py
from mcp.server.fastmcp import FastMCP

# Create an MCP server
mcp = FastMCP("Demo")


# Add an addition tool
@mcp.tool()
def add(a: int, b: int) -> int:
    """Add two numbers"""
    return a + b


# Add a dynamic greeting resource
@mcp.resource("greeting://{name}")
def get_greeting(name: str) -> str:
    """Get a personalized greeting"""
    return f"Hello, {name}!"

----------------------------------------

TITLE: Implementing Tools in FastMCP
DESCRIPTION: Examples of defining synchronous and asynchronous tools using FastMCP decorators.

LANGUAGE: python
CODE:
import httpx
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")


@mcp.tool()
def calculate_bmi(weight_kg: float, height_m: float) -> float:
    """Calculate BMI given weight in kg and height in meters"""
    return weight_kg / (height_m**2)


@mcp.tool()
async def fetch_weather(city: str) -> str:
    """Fetch current weather for a city"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"https://api.weather.com/{city}")
        return response.text

----------------------------------------

TITLE: Defining Resources in FastMCP
DESCRIPTION: Examples of defining static and dynamic resources using FastMCP decorators.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")


@mcp.resource("config://app")
def get_config() -> str:
    """Static configuration data"""
    return "App configuration here"


@mcp.resource("users://{user_id}/profile")
def get_user_profile(user_id: str) -> str:
    """Dynamic user data"""
    return f"Profile data for user {user_id}"

----------------------------------------

TITLE: Writing MCP Clients
DESCRIPTION: Example of creating an MCP client to connect to and interact with MCP servers.

LANGUAGE: python
CODE:
from mcp import ClientSession, StdioServerParameters, types
from mcp.client.stdio import stdio_client

# Create server parameters for stdio connection
server_params = StdioServerParameters(
    command="python",  # Executable
    args=["example_server.py"],  # Optional command line arguments
    env=None,  # Optional environment variables
)


# Optional: create a sampling callback
async def handle_sampling_message(
    message: types.CreateMessageRequestParams,
) -> types.CreateMessageResult:
    return types.CreateMessageResult(
        role="assistant",
        content=types.TextContent(
            type="text",
            text="Hello, world! from model",
        ),
        model="gpt-3.5-turbo",
        stopReason="endTurn",
    )


async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(
            read, write, sampling_callback=handle_sampling_message
        ) as session:
            # Initialize the connection
            await session.initialize()

            # List available prompts
            prompts = await session.list_prompts()

            # Get a prompt
            prompt = await session.get_prompt(
                "example-prompt", arguments={"arg1": "value"}
            )

            # List available resources
            resources = await session.list_resources()

            # List available tools
            tools = await session.list_tools()

            # Read a resource
            content, mime_type = await session.read_resource("file://some/path")

            # Call a tool
            result = await session.call_tool("tool-name", arguments={"arg1": "value"})


if __name__ == "__main__":
    import asyncio

    asyncio.run(run())

----------------------------------------

TITLE: SQLite Explorer Example with FastMCP
DESCRIPTION: A more complex MCP server example showing database integration using FastMCP.

LANGUAGE: python
CODE:
import sqlite3

from mcp.server.fastmcp import FastMCP

mcp = FastMCP("SQLite Explorer")


@mcp.resource("schema://main")
def get_schema() -> str:
    """Provide the database schema as a resource"""
    conn = sqlite3.connect("database.db")
    schema = conn.execute("SELECT sql FROM sqlite_master WHERE type='table'").fetchall()
    return "\n".join(sql[0] for sql in schema if sql[0])


@mcp.tool()
def query_data(sql: str) -> str:
    """Execute SQL queries safely"""
    conn = sqlite3.connect("database.db")
    try:
        result = conn.execute(sql).fetchall()
        return "\n".join(str(row) for row in result)
    except Exception as e:
        return f"Error: {str(e)}"

----------------------------------------

TITLE: Echo Server Example with FastMCP
DESCRIPTION: A simple MCP server demonstrating resources, tools, and prompts using FastMCP.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("Echo")


@mcp.resource("echo://{message}")
def echo_resource(message: str) -> str:
    """Echo a message as a resource"""
    return f"Resource echo: {message}"


@mcp.tool()
def echo_tool(message: str) -> str:
    """Echo a message as a tool"""
    return f"Tool echo: {message}"


@mcp.prompt()
def echo_prompt(message: str) -> str:
    """Create an echo prompt"""
    return f"Please process this message: {message}"

----------------------------------------

TITLE: Using Context in FastMCP Tools
DESCRIPTION: Shows how to use the Context object in FastMCP tools for progress tracking and resource access.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP, Context

mcp = FastMCP("My App")


@mcp.tool()
async def long_task(files: list[str], ctx: Context) -> str:
    """Process multiple files with progress tracking"""
    for i, file in enumerate(files):
        ctx.info(f"Processing {file}")
        await ctx.report_progress(i, len(files))
        data, mime_type = await ctx.read_resource(f"file://{file}")
    return "Processing complete"

----------------------------------------

TITLE: Defining Prompts in FastMCP
DESCRIPTION: Examples of creating reusable prompt templates using FastMCP decorators.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP
from mcp.server.fastmcp.prompts import base

mcp = FastMCP("My App")


@mcp.prompt()
def review_code(code: str) -> str:
    return f"Please review this code:\n\n{code}"


@mcp.prompt()
def debug_error(error: str) -> list[base.Message]:
    return [
        base.UserMessage("I'm seeing this error:"),
        base.UserMessage(error),
        base.AssistantMessage("I'll help debug that. What have you tried so far?"),
    ]

----------------------------------------

TITLE: Handling Images in FastMCP
DESCRIPTION: Demonstrates how to work with images using the Image class in FastMCP.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP, Image
from PIL import Image as PILImage

mcp = FastMCP("My App")


@mcp.tool()
def create_thumbnail(image_path: str) -> Image:
    """Create a thumbnail from an image"""
    img = PILImage.open(image_path)
    img.thumbnail((100, 100))
    return Image(data=img.tobytes(), format="png")

----------------------------------------

TITLE: Implementing Server Lifespan with FastMCP
DESCRIPTION: Demonstrates how to add lifespan support for startup/shutdown with strong typing using FastMCP.

LANGUAGE: python
CODE:
from contextlib import asynccontextmanager
from collections.abc import AsyncIterator
from dataclasses import dataclass

from fake_database import Database  # Replace with your actual DB type

from mcp.server.fastmcp import Context, FastMCP

# Create a named server
mcp = FastMCP("My App")

# Specify dependencies for deployment and development
mcp = FastMCP("My App", dependencies=["pandas", "numpy"])


@dataclass
class AppContext:
    db: Database


@asynccontextmanager
async def app_lifespan(server: FastMCP) -> AsyncIterator[AppContext]:
    """Manage application lifecycle with type-safe context"""
    # Initialize on startup
    db = await Database.connect()
    try:
        yield AppContext(db=db)
    finally:
        # Cleanup on shutdown
        await db.disconnect()


# Pass lifespan to server
mcp = FastMCP("My App", lifespan=app_lifespan)


# Access type-safe lifespan context in tools
@mcp.tool()
def query_db(ctx: Context) -> str:
    """Tool that uses initialized resources"""
    db = ctx.request_context.lifespan_context["db"]
    return db.query()

----------------------------------------

TITLE: Defining Model Context Protocol (MCP) Structure
DESCRIPTION: This snippet outlines the structure and components of the Model Context Protocol using a custom syntax. It defines various elements and their relationships within the protocol.

LANGUAGE: custom
CODE:
::: mcp

----------------------------------------

TITLE: Low-Level MCP Server Implementation
DESCRIPTION: Example of using the low-level MCP server implementation for more control and customization.

LANGUAGE: python
CODE:
from contextlib import asynccontextmanager
from collections.abc import AsyncIterator

from fake_database import Database  # Replace with your actual DB type

from mcp.server import Server


@asynccontextmanager
async def server_lifespan(server: Server) -> AsyncIterator[dict]:
    """Manage server startup and shutdown lifecycle."""
    # Initialize resources on startup
    db = await Database.connect()
    try:
        yield {"db": db}
    finally:
        # Clean up on shutdown
        await db.disconnect()


# Pass lifespan to server
server = Server("example-server", lifespan=server_lifespan)


# Access lifespan context in handlers
@server.call_tool()
async def query_db(name: str, arguments: dict) -> list:
    ctx = server.request_context
    db = ctx.lifespan_context["db"]
    return await db.query(arguments["query"])

----------------------------------------

TITLE: Implementing Low-Level MCP Server with StdIO
DESCRIPTION: Detailed example of implementing a low-level MCP server using StdIO communication.

LANGUAGE: python
CODE:
import mcp.server.stdio
import mcp.types as types
from mcp.server.lowlevel import NotificationOptions, Server
from mcp.server.models import InitializationOptions

# Create a server instance
server = Server("example-server")


@server.list_prompts()
async def handle_list_prompts() -> list[types.Prompt]:
    return [
        types.Prompt(
            name="example-prompt",
            description="An example prompt template",
            arguments=[
                types.PromptArgument(
                    name="arg1", description="Example argument", required=True
                )
            ],
        )
    ]


@server.get_prompt()
async def handle_get_prompt(
    name: str, arguments: dict[str, str] | None
) -> types.GetPromptResult:
    if name != "example-prompt":
        raise ValueError(f"Unknown prompt: {name}")

    return types.GetPromptResult(
        description="Example prompt",
        messages=[
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text="Example prompt text"),
            )
        ],
    )


async def run():
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="example",
                server_version="0.1.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )


if __name__ == "__main__":
    import asyncio

    asyncio.run(run())

----------------------------------------

TITLE: Defining Python Package Dependencies with Version Requirements
DESCRIPTION: Lists required Python packages with their minimum version constraints using pip-style requirements format. Includes essential packages for environment management, HTTP requests, MCP implementation, and ASGI server functionality.

LANGUAGE: plaintext
CODE:
python-dotenv>=1.0.0
requests>=2.31.0
mcp>=1.0.0
uvicorn>=0.32.1

----------------------------------------

TITLE: Mounting MCP Server to Existing ASGI Server
DESCRIPTION: Demonstrates how to mount an MCP SSE server to an existing ASGI server using Starlette.

LANGUAGE: python
CODE:
from starlette.applications import Starlette
from starlette.routing import Mount, Host
from mcp.server.fastmcp import FastMCP


mcp = FastMCP("My App")

# Mount the SSE server to the existing ASGI server
app = Starlette(
    routes=[
        Mount('/', app=mcp.sse_app()),
    ]
)

# or dynamically mount as host
app.router.routes.append(Host('mcp.acme.corp', app=mcp.sse_app()))

----------------------------------------

TITLE: Python MCP Client Implementation
DESCRIPTION: Asynchronous Python client implementation that connects to the MCP server, lists available tools, and makes a request to fetch a website. Uses stdio transport and demonstrates tool discovery and usage.

LANGUAGE: python
CODE:
import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-tool"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available tools
            tools = await session.list_tools()
            print(tools)

            # Call the fetch tool
            result = await session.call_tool("fetch", {"url": "https://example.com"})
            print(result)


asyncio.run(main())

----------------------------------------

TITLE: Python MCP Client Implementation
DESCRIPTION: Asynchronous Python client implementation demonstrating how to connect to the MCP server using stdio transport, initialize a session, list available resources, and read specific resource content.

LANGUAGE: python
CODE:
import asyncio
from mcp.types import AnyUrl
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-resource"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available resources
            resources = await session.list_resources()
            print(resources)

            # Get a specific resource
            resource = await session.read_resource(AnyUrl("file:///greeting.txt"))
            print(resource)


asyncio.run(main())

----------------------------------------

TITLE: Interacting with MCP Server using Python Client
DESCRIPTION: Asynchronous Python script demonstrating how to connect to the MCP server using STDIO transport, initialize a session, list available prompts, and retrieve a prompt with custom arguments.

LANGUAGE: python
CODE:
import asyncio
from mcp.client.session import ClientSession
from mcp.client.stdio import StdioServerParameters, stdio_client


async def main():
    async with stdio_client(
        StdioServerParameters(command="uv", args=["run", "mcp-simple-prompt"])
    ) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            # List available prompts
            prompts = await session.list_prompts()
            print(prompts)

            # Get the prompt with arguments
            prompt = await session.get_prompt(
                "simple",
                {
                    "context": "User is a software developer",
                    "topic": "Python async programming",
                },
            )
            print(prompt)


asyncio.run(main())

----------------------------------------

TITLE: Installing MCP in Python Project
DESCRIPTION: Commands to install the MCP package using uv or pip package managers.

LANGUAGE: bash
CODE:
uv add "mcp[cli]"

LANGUAGE: bash
CODE:
pip install "mcp[cli]"

----------------------------------------

TITLE: Direct Execution of MCP Server
DESCRIPTION: Example of directly executing an MCP server for advanced scenarios.

LANGUAGE: python
CODE:
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("My App")

if __name__ == "__main__":
    mcp.run()

----------------------------------------

TITLE: Installing MCP Server in Claude Desktop
DESCRIPTION: Commands to install an MCP server in Claude Desktop with various options.

LANGUAGE: bash
CODE:
mcp install server.py

# Custom name
mcp install server.py --name "My Analytics Server"

# Environment variables
mcp install server.py -v API_KEY=abc123 -v DB_URL=postgres://...
mcp install server.py -f .env

----------------------------------------

TITLE: Running MCP Server in Development Mode
DESCRIPTION: Commands to run an MCP server in development mode using the MCP Inspector.

LANGUAGE: bash
CODE:
mcp dev server.py

# Add dependencies
mcp dev server.py --with pandas --with numpy

# Mount local code
mcp dev server.py --with-editable .

----------------------------------------

TITLE: Starting MCP Server via Command Line
DESCRIPTION: Commands to start the MCP server using either stdio (default) transport or SSE transport with custom port configuration.

LANGUAGE: bash
CODE:
# Using stdio transport (default)
uv run mcp-simple-tool

# Using SSE transport on custom port
uv run mcp-simple-tool --transport sse --port 8000

----------------------------------------

TITLE: Starting MCP Server with Transport Options
DESCRIPTION: Command line instructions for starting the MCP server using either stdio (default) transport or SSE transport with custom port configuration.

LANGUAGE: bash
CODE:
# Using stdio transport (default)
uv run mcp-simple-resource

# Using SSE transport on custom port
uv run mcp-simple-resource --transport sse --port 8000

----------------------------------------

TITLE: Starting MCP Simple Prompt Server with Bash
DESCRIPTION: Commands to start the MCP server using either stdio (default) or SSE transport. The server can be configured to run on a custom port when using SSE transport.

LANGUAGE: bash
CODE:
# Using stdio transport (default)
uv run mcp-simple-prompt

# Using SSE transport on custom port
uv run mcp-simple-prompt --transport sse --port 8000

----------------------------------------

TITLE: Linting and Formatting MCP Python SDK Code
DESCRIPTION: These commands use uv to run ruff for both linting (checking) and formatting the code to ensure adherence to style guidelines.

LANGUAGE: bash
CODE:
uv run ruff check .
uv run ruff format .

----------------------------------------

TITLE: Performing Type Checking for MCP Python SDK
DESCRIPTION: This command uses uv to run pyright, which performs static type checking on the Python code to catch type-related errors.

LANGUAGE: bash
CODE:
uv run pyright

----------------------------------------

TITLE: Running Tests for MCP Python SDK
DESCRIPTION: This command uses uv to run pytest, executing all tests in the project to ensure functionality.

LANGUAGE: bash
CODE:
uv run pytest

----------------------------------------

TITLE: Installing Dependencies for MCP Python SDK Development
DESCRIPTION: This command uses the uv package manager to install all project dependencies, including extras and development packages. It ensures a frozen state for reproducibility.

LANGUAGE: bash
CODE:
uv sync --frozen --all-extras --dev

----------------------------------------

TITLE: Referencing Model Context Protocol Servers Repository
DESCRIPTION: Markdown link to the GitHub repository containing real-world server implementations for the Model Context Protocol.

LANGUAGE: Markdown
CODE:
[servers repository](https://github.com/modelcontextprotocol/servers)