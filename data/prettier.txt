TITLE: Configuring Prettier with JavaScript (CommonJS)
DESCRIPTION: Basic configuration of Prettier using a JavaScript file with CommonJS. Exports a configuration object with trailing comma, tab width, semicolons, and quote style settings.

LANGUAGE: javascript
CODE:
// prettier.config.js, .prettierrc.js, prettier.config.cjs, or .prettierrc.cjs

/**
 * @see https://prettier.io/docs/configuration
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

module.exports = config;

----------------------------------------

TITLE: Creating Prettier Configuration Files
DESCRIPTION: Commands to create initial Prettier configuration files including .prettierrc for settings and .prettierignore for excluding files from formatting.

LANGUAGE: bash
CODE:
node --eval "fs.writeFileSync('.prettierrc','{}
')"

LANGUAGE: bash
CODE:
node --eval "fs.writeFileSync('.prettierignore','# Ignore artifacts:\nbuild\ncoverage\n')"

----------------------------------------

TITLE: Installing Prettier with Package Managers
DESCRIPTION: Commands for installing Prettier as a development dependency using different package managers (npm, yarn, pnpm, bun). The --save-exact flag ensures version consistency across the team.

LANGUAGE: bash
CODE:
npm install --save-dev --save-exact prettier

LANGUAGE: bash
CODE:
yarn add --dev --exact prettier

LANGUAGE: bash
CODE:
pnpm add --save-dev --save-exact prettier

LANGUAGE: bash
CODE:
bun add --dev --exact prettier

----------------------------------------

TITLE: Resolving Prettier Config
DESCRIPTION: Example showing how to resolve Prettier configuration for a file and use it for formatting

LANGUAGE: javascript
CODE:
const text = await fs.readFile(filePath, "utf8");
const options = await prettier.resolveConfig(filePath);
const formatted = await prettier.format(text, {
  ...options,
  filepath: filePath,
});

----------------------------------------

TITLE: Formatting JavaScript Code with Prettier
DESCRIPTION: Demonstrates how Prettier formats JavaScript code by taking a long, single-line function call and restructuring it into a more readable multi-line format.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

LANGUAGE: javascript
CODE:
foo(
  reallyLongArg(),
  omgSoManyParameters(),
  IShouldRefactorThis(),
  isThereSeriouslyAnotherOne(),
);

----------------------------------------

TITLE: Configuring Prettier Overrides with YAML
DESCRIPTION: Configuration overrides for specific file patterns using YAML. Demonstrates setting different options for test files and legacy code.

LANGUAGE: yaml
CODE:
semi: false
overrides:
  - files: "*.test.js"
    options:
      semi: true
  - files:
      - "*.html"
      - "legacy/**/*.js"
    options:
      tabWidth: 4

----------------------------------------

TITLE: Formatting Code with Prettier
DESCRIPTION: Example of using prettier.format() to format JavaScript code with specific parser and formatting options

LANGUAGE: javascript
CODE:
await prettier.format("foo ( );", { semi: false, parser: "babel" });

----------------------------------------

TITLE: Formatting Code with Prettier
DESCRIPTION: Demonstrates using prettier.format() to format JavaScript code with specific parser and formatting options.

LANGUAGE: javascript
CODE:
await prettier.format("foo ( );", { semi: false, parser: "babel" });
// -> 'foo()\n'

----------------------------------------

TITLE: Configuring Prettier with YAML
DESCRIPTION: Basic configuration for Prettier using a YAML file. Sets trailing comma, tab width, semicolon, and quote style options.

LANGUAGE: yaml
CODE:
# .prettierrc or .prettierrc.yaml
trailingComma: "es5"
tabWidth: 4
semi: false
singleQuote: true

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Prettier Auto-formatting
DESCRIPTION: GitHub Actions workflow configuration that automatically runs Prettier formatting on pull requests and pushes. Uses autofix.ci to automatically commit formatting changes. Requires a pinned Prettier version and the autofix.ci GitHub App.

LANGUAGE: yaml
CODE:
name: autofix.ci
on:
  pull_request:
  push:
permissions: {}
jobs:
  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: |
          yarn
          yarn prettier . --write
      - uses: autofix-ci/action@v1
        with:
          commit-message: "Apply Prettier format"

----------------------------------------

TITLE: Configuring Prettier with JSON
DESCRIPTION: Basic configuration of Prettier using a JSON file. Sets trailing comma, tab width, semicolons, and quote style.

LANGUAGE: json
CODE:
{
  "trailingComma": "es5",
  "tabWidth": 4,
  "semi": false,
  "singleQuote": true
}

----------------------------------------

TITLE: Markdown Documentation for Prettier Benefits
DESCRIPTION: A markdown document that explains the various benefits and use cases for adopting Prettier code formatter in development workflows. Includes sections on style guide enforcement, newcomer onboarding, code writing efficiency, adoption process, and codebase cleanup.

LANGUAGE: markdown
CODE:
---
id: why-prettier
title: Why Prettier?
---

----------------------------------------

TITLE: Running Prettier CLI with Basic Options
DESCRIPTION: Shows the basic syntax for running Prettier from the command line, including specifying files/directories and options.

LANGUAGE: bash
CODE:
prettier [options] [file/dir/glob ...]

----------------------------------------

TITLE: Formatting with Cursor Position
DESCRIPTION: Shows how to format code while preserving cursor position using formatWithCursor(). Useful for editor integrations.

LANGUAGE: javascript
CODE:
await prettier.formatWithCursor(" 1", { cursorOffset: 2, parser: "babel" });
// -> { formatted: '1;\n', cursorOffset: 1 }

----------------------------------------

TITLE: RunFormatTest Function Type Definition
DESCRIPTION: TypeScript type definition showing the complete signature of the runFormatTest function including all parameters and options.

LANGUAGE: typescript
CODE:
function runFormatTest(
  fixtures:
    | ImportMeta
    | {
        importMeta: ImportMeta;
        snippets?: Array<
          | string
          | { code: string; name?: string; filename?: string; output?: string }
        >;
      },
  parsers: string[],
  options?: PrettierOptions & {
    errors: true | { [parserName: string]: true | string[] };
  },
): void;

----------------------------------------

TITLE: Configuring Prettier Overrides with JSON
DESCRIPTION: Configuration overrides for specific file patterns using JSON. Demonstrates setting different options for test files and legacy code.

LANGUAGE: json
CODE:
{
  "semi": false,
  "overrides": [
    {
      "files": "*.test.js",
      "options": {
        "semi": true
      }
    },
    {
      "files": ["*.html", "legacy/**/*.js"],
      "options": {
        "tabWidth": 4
      }
    }
  ]
}

----------------------------------------

TITLE: Running Prettier Formatting Commands
DESCRIPTION: Commands for running Prettier to format files using different package managers, including both write and check modes.

LANGUAGE: bash
CODE:
npx prettier . --write

LANGUAGE: bash
CODE:
yarn exec prettier . --write

LANGUAGE: bash
CODE:
pnpm exec prettier . --write

LANGUAGE: bash
CODE:
npx prettier . --check

----------------------------------------

TITLE: Configuring Prettier Overrides with JSON
DESCRIPTION: Configuration overrides for specific file patterns using JSON. Demonstrates setting different options for test files and legacy code.

LANGUAGE: json
CODE:
{
  "semi": false,
  "overrides": [
    {
      "files": "*.test.js",
      "options": {
        "semi": true
      }
    },
    {
      "files": ["*.html", "legacy/**/*.js"],
      "options": {
        "tabWidth": 4
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Prettier Options in Vim
DESCRIPTION: Demonstrates how to set Prettier options directly in the Vim configuration file for JavaScript files.

LANGUAGE: vim
CODE:
autocmd FileType javascript setlocal formatprg=prettier\ --single-quote\ --trailing-comma\ es5
" Use formatprg when available
let g:neoformat_try_formatprg = 1

----------------------------------------

TITLE: Importing Prettier API
DESCRIPTION: Shows how to import the Prettier API package for programmatic usage.

LANGUAGE: javascript
CODE:
import * as prettier from "prettier";

----------------------------------------

TITLE: Running Prettier Formatting Commands
DESCRIPTION: Commands for formatting files using Prettier with different package managers, including both write and check modes for CI environments.

LANGUAGE: bash
CODE:
npx prettier . --write

LANGUAGE: bash
CODE:
yarn exec prettier . --write

LANGUAGE: bash
CODE:
pnpm exec prettier . --write

LANGUAGE: bash
CODE:
npx prettier . --check

----------------------------------------

TITLE: Configuring Prettier with JavaScript (ES Modules)
DESCRIPTION: Basic configuration for Prettier using a JavaScript file with ES Modules. Exports an object with trailing comma, tab width, semicolon, and quote style options.

LANGUAGE: javascript
CODE:
// prettier.config.js, .prettierrc.js, prettier.config.mjs, or .prettierrc.mjs

/**
 * @see https://prettier.io/docs/configuration
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Configuring Prettier with JavaScript (ES Modules)
DESCRIPTION: Basic configuration of Prettier using a JavaScript file with ES Modules. Exports a configuration object with trailing comma, tab width, semicolons, and quote style settings.

LANGUAGE: javascript
CODE:
// prettier.config.js, .prettierrc.js, prettier.config.mjs, or .prettierrc.mjs

/**
 * @see https://prettier.io/docs/configuration
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Custom Plugin Implementation
DESCRIPTION: Shows how to create a custom Prettier plugin for specialized formatting needs.

LANGUAGE: javascript
CODE:
import { format } from "prettier";
import * as prettierPluginBabel from "prettier/plugins/babel";

const myCustomPlugin = {
  parsers: {
    "my-custom-parser": {
      async parse(text) {
        const ast = await prettierPluginBabel.parsers.babel.parse(text);
        ast.program.body[0].expression.callee.name = "_";
        return ast;
      },
      astFormat: "estree",
    },
  },
};

await format("lodash ( )", {
  parser: "my-custom-parser",
  plugins: [myCustomPlugin],
});
// -> "_();\n"

----------------------------------------

TITLE: Configuring Prettier with JSON
DESCRIPTION: Basic configuration for Prettier using a JSON file. Sets trailing comma, tab width, semicolon, and quote style options.

LANGUAGE: json
CODE:
{
  "trailingComma": "es5",
  "tabWidth": 4,
  "semi": false,
  "singleQuote": true
}

----------------------------------------

TITLE: Using prettier-ignore Comment in JavaScript
DESCRIPTION: This example shows how to use the // prettier-ignore comment to exclude the next node in the abstract syntax tree from Prettier formatting in JavaScript.

LANGUAGE: js
CODE:
matrix(
  1, 0, 0,
  0, 1, 0,
  0, 0, 1
)

// prettier-ignore
matrix(
  1, 0, 0,
  0, 1, 0,
  0, 0, 1
)

----------------------------------------

TITLE: Configuring Prettier Options in JSON
DESCRIPTION: Example of setting Prettier options in a configuration file (e.g. .prettierrc).

LANGUAGE: json
CODE:
{
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "semi": true,
  "singleQuote": false,
  "quoteProps": "as-needed",
  "jsxSingleQuote": false,
  "trailingComma": "all",
  "bracketSpacing": true,
  "bracketSameLine": false,
  "arrowParens": "always"
}

----------------------------------------

TITLE: Formatting Files In-Place with Prettier CLI
DESCRIPTION: Demonstrates how to use the --write option to format all supported files in the current directory and subdirectories.

LANGUAGE: bash
CODE:
prettier . --write

----------------------------------------

TITLE: JSX Conditional Rendering
DESCRIPTION: Illustrates Prettier's JSX formatting with conditional expressions, showing the different treatment compared to regular JavaScript.

LANGUAGE: jsx
CODE:
function Greet({ user }) {
  return (
    <div>
      {user ? (
        <p>Welcome back, {user.name}!</p>
      ) : (
        <p>Greetings, traveler! Sign up today!</p>
      )}
    </div>
  );
}

----------------------------------------

TITLE: Watching Files with Prettier using onchange (Bash)
DESCRIPTION: This command uses onchange to watch for changes in all files and directories, then runs Prettier to format the changed files. It ignores unknown file types and writes the changes directly to the files.

LANGUAGE: bash
CODE:
npx onchange "**/*" -- npx prettier --write --ignore-unknown {{changed}}

----------------------------------------

TITLE: Plugin Printer Implementation
DESCRIPTION: Example of implementing a basic printer function in a Prettier plugin

LANGUAGE: javascript
CODE:
import { doc } from "prettier";

const { group, indent, join, line, softline } = doc.builders;

function print(path, options, print) {
  const node = path.node;

  switch (node.type) {
    case "list":
      return group([
        "(",
        indent([softline, join(line, path.map(print, "elements"))]),
        softline,
        ")"
      ]);

    case "pair":
      return group([
        "(",
        indent([softline, print("left"), line, ". ", print("right")]),
        softline,
        ")"
      ]);

    case "symbol":
      return node.name;
  }

  throw new Error(`Unknown node type: ${node.type}`);
}

----------------------------------------

TITLE: Formatting with Cursor Position
DESCRIPTION: Example of using formatWithCursor() to format code while preserving cursor position information

LANGUAGE: javascript
CODE:
await prettier.formatWithCursor(" 1", { cursorOffset: 2, parser: "babel" });

----------------------------------------

TITLE: Configuring Prettier with JavaScript (CommonJS)
DESCRIPTION: Basic configuration for Prettier using a JavaScript file with CommonJS. Exports an object with trailing comma, tab width, semicolon, and quote style options.

LANGUAGE: javascript
CODE:
// prettier.config.js, .prettierrc.js, prettier.config.cjs, or .prettierrc.cjs

/**
 * @see https://prettier.io/docs/configuration
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

module.exports = config;

----------------------------------------

TITLE: Configuring lint-staged for Prettier
DESCRIPTION: JSON configuration for lint-staged to run Prettier on all files before commits, ensuring consistent formatting across the team.

LANGUAGE: json
CODE:
{
  "lint-staged": {
    "**/*": "prettier --write --ignore-unknown"
  }
}

----------------------------------------

TITLE: Defining Package Configuration for Shareable Prettier Config
DESCRIPTION: Example package.json file for a shareable Prettier configuration npm package. It includes necessary metadata, export configuration, and peer dependencies.

LANGUAGE: json
CODE:
{
  "name": "@username/prettier-config",
  "version": "1.0.0",
  "description": "My personal Prettier config",
  "type": "module",
  "exports": "./index.js",
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "peerDependencies": {
    "prettier": ">=3.0.0"
  }
}

----------------------------------------

TITLE: Installing lint-staged with mrm
DESCRIPTION: Command to install and configure lint-staged with husky for Prettier pre-commit hooks

LANGUAGE: bash
CODE:
npx mrm@2 lint-staged

----------------------------------------

TITLE: Installing lint-staged with Prettier
DESCRIPTION: This command installs husky and lint-staged, then adds a configuration to package.json for automatic formatting of supported files in a pre-commit hook.

LANGUAGE: bash
CODE:
npx mrm@2 lint-staged

----------------------------------------

TITLE: Checking File Formatting with Prettier CLI
DESCRIPTION: Demonstrates how to use the --check flag to verify if files are correctly formatted without making changes.

LANGUAGE: bash
CODE:
prettier . --check

----------------------------------------

TITLE: Documenting Prettier Benefits - Markdown
DESCRIPTION: Markdown document structure with headers and content describing various benefits of using Prettier, including testimonials and use cases.

LANGUAGE: markdown
CODE:
---
id: why-prettier
title: Why Prettier?
---

## Building and enforcing a style guide

## Helping Newcomers

## Writing code

## Easy to adopt

## Clean up an existing codebase

## Ride the hype train

----------------------------------------

TITLE: Exporting Prettier Configuration in JavaScript
DESCRIPTION: Demonstrates how to export a Prettier configuration object in an index.js file. This configuration can be shared across multiple projects.

LANGUAGE: javascript
CODE:
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Installing Prettier with Package Managers
DESCRIPTION: Commands for installing Prettier locally using different package managers (npm, yarn, pnpm, bun) with exact version specification.

LANGUAGE: bash
CODE:
npm install --save-dev --save-exact prettier

LANGUAGE: bash
CODE:
yarn add --dev --exact prettier

LANGUAGE: bash
CODE:
pnpm add --save-dev --save-exact prettier

LANGUAGE: bash
CODE:
bun add --dev --exact prettier

----------------------------------------

TITLE: Resolving Prettier Config
DESCRIPTION: Example of resolving Prettier configuration for a file and using it to format content.

LANGUAGE: javascript
CODE:
const text = await fs.readFile(filePath, "utf8");
const options = await prettier.resolveConfig(filePath);
const formatted = await prettier.format(text, {
  ...options,
  filepath: filePath,
});

----------------------------------------

TITLE: ESM Config Support
DESCRIPTION: Support for ECMAScript modules in configuration files with new export syntax.

LANGUAGE: javascript
CODE:
export default {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

----------------------------------------

TITLE: Complex Formatting Command
DESCRIPTION: Advanced example showing formatting specific directories and files with multiple options like single quotes and trailing commas.

LANGUAGE: bash
CODE:
prettier docs package.json "{app,__{tests,mocks}__}/**/*.js" --write --single-quote --trailing-comma all

----------------------------------------

TITLE: Using prettier-ignore Comment in JavaScript
DESCRIPTION: Demonstrates how to use the // prettier-ignore comment to exclude specific nodes in JavaScript from Prettier formatting.

LANGUAGE: js
CODE:
matrix(
  1, 0, 0,
  0, 1, 0,
  0, 0, 1
)

// prettier-ignore
matrix(
  1, 0, 0,
  0, 1, 0,
  0, 0, 1
)

----------------------------------------

TITLE: Setting up git-format-staged with husky (npm)
DESCRIPTION: These commands initialize husky, install git-format-staged, and create a pre-commit hook that uses Prettier with git-format-staged.

LANGUAGE: bash
CODE:
npx husky init
npm install --save-dev git-format-staged
node --eval "fs.writeFileSync('.husky/pre-commit', 'git-format-staged -f \'prettier --ignore-unknown --stdin --stdin-filepath \"{}\"\'\n')"

----------------------------------------

TITLE: Using prettier-ignore Comments in Markdown
DESCRIPTION: Demonstrates how to use prettier-ignore comments in Markdown, including range ignore for auto-generated content.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
Do   not    format   this

<!-- prettier-ignore-start -->
<!-- SOMETHING AUTO-GENERATED BY TOOLS - START -->

| MY | AWESOME | AUTO-GENERATED | TABLE |
|-|-|-|-|
| a | b | c | d |

<!-- SOMETHING AUTO-GENERATED BY TOOLS - END -->
<!-- prettier-ignore-end -->

----------------------------------------

TITLE: Using Prettier in a Classic Web Worker
DESCRIPTION: This example shows how to use Prettier in a classic Web Worker, importing the standalone script and a GraphQL plugin to format code.

LANGUAGE: javascript
CODE:
importScripts(
  "https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.js",
  "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/graphql.js",
);

(async () => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins: prettierPlugins,
  });
})();

----------------------------------------

TITLE: Using Type Annotation in Shareable Prettier Config
DESCRIPTION: Shows how to add type safety and autocomplete support to a shareable Prettier configuration using JSDoc type annotation.

LANGUAGE: javascript
CODE:
/**
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Configuring Prettier with TOML
DESCRIPTION: Basic configuration of Prettier using a TOML file. Sets trailing comma, tab width, semicolons, and quote style.

LANGUAGE: toml
CODE:
# .prettierrc.toml
trailingComma = "es5"
tabWidth = 4
semi = false
singleQuote = true

----------------------------------------

TITLE: Creating Prettier Configuration Files
DESCRIPTION: Commands to create .prettierrc and .prettierignore files for Prettier configuration and exclusion patterns.

LANGUAGE: bash
CODE:
node --eval "fs.writeFileSync('.prettierrc','{}
')"

LANGUAGE: bash
CODE:
node --eval "fs.writeFileSync('.prettierignore','# Ignore artifacts:\nbuild\ncoverage\n')"

----------------------------------------

TITLE: Including Plugins in Shareable Prettier Config
DESCRIPTION: Example of including Prettier plugins in a shareable configuration by declaring them in the config file and as dependencies in package.json.

LANGUAGE: javascript
CODE:
// index.js
const config = {
  singleQuote: true,
  plugins: ["prettier-plugin-xml"],
};

export default config;

LANGUAGE: json
CODE:
// package.json
{
  "name": "@username/prettier-config",
  "version": "1.0.0",
  "description": "My personal Prettier config",
  "type": "module",
  "exports": "./index.js",
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "prettier-plugin-xml": "3.4.1"
  },
  "peerDependencies": {
    "prettier": ">=3.0.0"
  }
}

----------------------------------------

TITLE: Configuring Prettier with TypeScript (CommonJS)
DESCRIPTION: Basic configuration for Prettier using a TypeScript file with CommonJS. Imports the Config type and exports an object with trailing comma option.

LANGUAGE: typescript
CODE:
// prettier.config.ts, .prettierrc.ts, prettier.config.cts, or .prettierrc.cts

import { type Config } from "prettier";

const config: Config = {
  trailingComma: "none",
};

module.exports = config;

----------------------------------------

TITLE: Configuring Prettier with TypeScript (ES Modules)
DESCRIPTION: Basic configuration of Prettier using a TypeScript file with ES Modules. Exports a configuration object with trailing comma setting.

LANGUAGE: typescript
CODE:
// prettier.config.ts, .prettierrc.ts, prettier.config.mts, or .prettierrc.mts

import { type Config } from "prettier";

const config: Config = {
  trailingComma: "none",
};

export default config;

----------------------------------------

TITLE: Formatting GraphQL with Prettier using ES Modules
DESCRIPTION: This example shows how to use Prettier with ES Modules to format GraphQL code in the browser. It imports Prettier and the GraphQL plugin as modules and formats a simple GraphQL query.

LANGUAGE: html
CODE:
<script type="module">
  import * as prettier from "https://unpkg.com/prettier@3.5.3/standalone.mjs";
  import * as prettierPluginGraphql from "https://unpkg.com/prettier@3.5.3/plugins/graphql.mjs";

  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins: [prettierPluginGraphql],
  });
</script>

----------------------------------------

TITLE: Formatting GraphQL with Prettier in a Module Web Worker
DESCRIPTION: This snippet demonstrates how to use Prettier in a module Web Worker to format GraphQL code. It imports Prettier and the GraphQL plugin as modules and formats a simple GraphQL query within the worker context.

LANGUAGE: javascript
CODE:
import * as prettier from "https://unpkg.com/prettier@3.5.3/standalone.mjs";
import * as prettierPluginGraphql from "https://unpkg.com/prettier@3.5.31/plugins/graphql.mjs";

const formatted = await prettier.format("type Query { hello: String }", {
  parser: "graphql",
  plugins: [prettierPluginGraphql],
});

----------------------------------------

TITLE: Running ESLint Fix Command
DESCRIPTION: Shows the ESLint fix command that can be used in combination with Prettier for additional code style adjustments.

LANGUAGE: shell
CODE:
eslint --fix

----------------------------------------

TITLE: Setting Parser Option for Specific Files
DESCRIPTION: Configuration to set the parser option for specific file types. Shows how to use the JSON parser for .prettierrc files and the Flow parser for .js files.

LANGUAGE: json
CODE:
{
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}

LANGUAGE: json
CODE:
{
  "overrides": [
    {
      "files": "*.js",
      "options": {
        "parser": "flow"
      }
    }
  ]
}

----------------------------------------

TITLE: Using Prettier with ES Modules in HTML
DESCRIPTION: This example shows how to use Prettier with ES Modules in an HTML file, importing the standalone version and a GraphQL plugin to format code.

LANGUAGE: html
CODE:
<script type="module">
  import * as prettier from "https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.mjs";
  import * as prettierPluginGraphql from "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/graphql.mjs";

  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins: [prettierPluginGraphql],
  });
</script>

----------------------------------------

TITLE: JavaScript Function Call Formatting - Single Line
DESCRIPTION: Demonstrates how Prettier handles function calls that fit on a single line.

LANGUAGE: javascript
CODE:
foo(arg1, arg2, arg3, arg4);

----------------------------------------

TITLE: Extending Shareable Prettier Config in JavaScript
DESCRIPTION: Demonstrates how to extend a shareable Prettier configuration in a .prettierrc.mjs file, allowing for customization of specific properties.

LANGUAGE: javascript
CODE:
import usernamePrettierConfig from "@username/prettier-config";

/**
 * @type {import("prettier").Config}
 */
const config = {
  ...usernamePrettierConfig,
  semi: false,
};

export default config;

----------------------------------------

TITLE: Configuring Prettier with YAML
DESCRIPTION: Basic configuration of Prettier using a YAML file. Sets trailing comma, tab width, semicolons, and quote style.

LANGUAGE: yaml
CODE:
# .prettierrc or .prettierrc.yaml
trailingComma: "es5"
tabWidth: 4
semi: false
singleQuote: true

----------------------------------------

TITLE: Configuring Prettier Overrides with YAML
DESCRIPTION: Configuration for Prettier using YAML with overrides. Demonstrates how to set different options for specific file patterns.

LANGUAGE: yaml
CODE:
semi: false
overrides:
  - files: "*.test.js"
    options:
      semi: true
  - files:
      - "*.html"
      - "legacy/**/*.js"
    options:
      tabWidth: 4

----------------------------------------

TITLE: Running Prettier Check Command
DESCRIPTION: Demonstrates how to run Prettier's check command to verify formatting across all files in the current directory.

LANGUAGE: shell
CODE:
prettier --check .

----------------------------------------

TITLE: Installing Shareable Prettier Config with Package Managers
DESCRIPTION: Shows commands for installing a published shareable Prettier configuration using different package managers like npm, yarn, pnpm, and bun.

LANGUAGE: bash
CODE:
npm install --save-dev @username/prettier-config

LANGUAGE: bash
CODE:
yarn add --dev @username/prettier-config

LANGUAGE: bash
CODE:
pnpm add --save-dev @username/prettier-config

LANGUAGE: bash
CODE:
bun add --dev @username/prettier-config

----------------------------------------

TITLE: Setting Prettier Parser Option with JSON
DESCRIPTION: Configuration for Prettier using JSON to set the parser option for specific file types. Shows how to use the 'parser' option within overrides.

LANGUAGE: json
CODE:
{
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}

----------------------------------------

TITLE: Basic Prettier CLI Usage
DESCRIPTION: Basic command syntax for running Prettier from command line with optional arguments and file patterns.

LANGUAGE: bash
CODE:
prettier [options] [file/dir/glob ...]

----------------------------------------

TITLE: Configuring Prettier with TypeScript (ES Modules)
DESCRIPTION: Basic configuration for Prettier using a TypeScript file with ES Modules. Imports the Config type and exports an object with trailing comma option.

LANGUAGE: typescript
CODE:
// prettier.config.ts, .prettierrc.ts, prettier.config.mts, or .prettierrc.mts

import { type Config } from "prettier";

const config: Config = {
  trailingComma: "none",
};

export default config;

----------------------------------------

TITLE: Watching Files with Prettier Using onchange CLI
DESCRIPTION: Command line instruction for using onchange to watch all files and run Prettier formatting when changes are detected. The command watches all files using the **/* glob pattern and executes prettier --write on changed files.

LANGUAGE: bash
CODE:
npx onchange "**/*" -- npx prettier --write --ignore-unknown {{changed}}

----------------------------------------

TITLE: Cache Strategy Example
DESCRIPTION: Example showing how to specify cache strategy for detecting changed files.

LANGUAGE: bash
CODE:
prettier . --write --cache --cache-strategy metadata

----------------------------------------

TITLE: Decorator Positioning in TypeScript
DESCRIPTION: Shows how Prettier handles decorator positioning in TypeScript, maintaining inline decorators when possible while enforcing class decorators on separate lines.

LANGUAGE: typescript
CODE:
@Component({
  selector: "hero-button",
  template: `<button>{{ label }}</button>`,
})
class HeroButtonComponent {
  @Output() change = new EventEmitter();
  @Input() label: string;

  @readonly
  @nonenumerable
  NODE_TYPE: 2;
}

----------------------------------------

TITLE: Format With Cache
DESCRIPTION: Example of using Prettier with caching enabled to improve performance on subsequent runs.

LANGUAGE: bash
CODE:
prettier . --write --cache

----------------------------------------

TITLE: Custom pre-commit shell script for Prettier
DESCRIPTION: This shell script can be used as a pre-commit hook to prettify staged files and add them back to staging.

LANGUAGE: sh
CODE:
#!/bin/sh
FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g')
[ -z "$FILES" ] && exit 0

# Prettify all selected files
echo "$FILES" | xargs ./node_modules/.bin/prettier --ignore-unknown --write

# Add back the modified/prettified files to staging
echo "$FILES" | xargs git add

exit 0

----------------------------------------

TITLE: Demonstrating objectWrap Option in JavaScript
DESCRIPTION: Illustrates how the new objectWrap option affects the formatting of multi-line object literals in JavaScript.

LANGUAGE: js
CODE:
// Input
const obj1 = {
  name1: "value1", name2: "value2",
};

const obj2 = { name1: "value1",
  name2: "value2",
};

// Prettier 3.4
const obj1 = {
  name1: "value1",
  name2: "value2",
};

const obj2 = { name1: "value1", name2: "value2" };

// Prettier 3.5 (with `--object-wrapping=collapse`)
const obj1 = { name1: "value1", name2: "value2" };

const obj2 = { name1: "value1", name2: "value2" };

----------------------------------------

TITLE: Complex Prettier CLI Command with Multiple Options
DESCRIPTION: Shows a more advanced Prettier command that formats specific files and directories with custom formatting options.

LANGUAGE: bash
CODE:
prettier docs package.json "{app,__{tests,mocks}__}/**/*.js" --write --single-quote --trailing-comma all

----------------------------------------

TITLE: Configuring lint-staged in package.json
DESCRIPTION: JSON configuration for lint-staged to run Prettier on all files before Git commits.

LANGUAGE: json
CODE:
{
  "lint-staged": {
    "**/*": "prettier --write --ignore-unknown"
  }
}

----------------------------------------

TITLE: Using URL Objects with Prettier Plugins
DESCRIPTION: Demonstrates how to use URL objects with the file: protocol in Prettier's plugin configuration. The examples show usage across all major Prettier APIs including format, check, formatWithCursor, getFileInfo, and getSupportInfo.

LANGUAGE: javascript
CODE:
// `URL`
await prettier.check("foo", {
  parser: "my-cool-parser",
  plugins: [new URL("./path/to/plugin.js", import.meta.url)],
});
await prettier.format("foo", {
  parser: "my-cool-parser",
  plugins: [new URL("./path/to/plugin.js", import.meta.url)],
});
await prettier.formatWithCursor("foo", {
  parser: "my-cool-parser",
  cursorOffset: 2,
  plugins: [new URL("./path/to/plugin.js", import.meta.url)],
});
await prettier.getFileInfo("/path/to/file", {
  plugins: [new URL("./path/to/plugin.js", import.meta.url)],
});
await prettier.getSupportInfo({
  plugins: [new URL("./path/to/plugin.js", import.meta.url)],
});

// URL string
await prettier.check("foo", {
  parser: "my-cool-parser",
  plugins: ["file:///path/to/plugin.js"],
});
await prettier.format("foo", {
  parser: "my-cool-parser",
  plugins: ["file:///path/to/plugin.js"],
});
await prettier.formatWithCursor("foo", {
  parser: "my-cool-parser",
  cursorOffset: 2,
  plugins: ["file:///path/to/plugin.js"],
});
await prettier.getFileInfo("/path/to/file", {
  plugins: ["file:///path/to/plugin.js"],
});
await prettier.getSupportInfo({
  plugins: ["file:///path/to/plugin.js"],
});

----------------------------------------

TITLE: Installing pretty-quick with package managers
DESCRIPTION: Commands to install and configure pretty-quick with simple-git-hooks for different package managers

LANGUAGE: bash
CODE:
npm install --save-dev simple-git-hooks pretty-quick
echo '{\n  "pre-commit": "npx pretty-quick --staged"\n}\n' > .simple-git-hooks.json
npx simple-git-hooks

----------------------------------------

TITLE: Configuring EditorConfig for Prettier
DESCRIPTION: Sample EditorConfig file compatible with Prettier's default options. Sets charset, line endings, indentation, and max line length.

LANGUAGE: ini
CODE:
[*]
charset = utf-8
insert_final_newline = true
end_of_line = lf
indent_style = space
indent_size = 2
max_line_length = 80

----------------------------------------

TITLE: Improved Method Chain Breaking in JavaScript
DESCRIPTION: New heuristic for breaking method chains based on complexity of call arguments rather than chain length

LANGUAGE: javascript
CODE:
// Prettier 2.0
if (foo.one().two().three() === bar.four().five().six()) {
  // ...
}

----------------------------------------

TITLE: Formatting embedded HTML in JavaScript with Prettier
DESCRIPTION: This snippet demonstrates how to format JavaScript code with embedded HTML using Prettier in the browser. It loads the necessary plugins (Babel, ESTree, and HTML) to properly format both JavaScript and the embedded HTML content.

LANGUAGE: html
CODE:
<script type="module">
  import * as prettier from "https://unpkg.com/prettier@3.5.3/standalone.mjs";
  import * as prettierPluginBabel from "https://unpkg.com/prettier@3.5.3/plugins/babel.mjs";
  import * as prettierPluginEstree from "https://unpkg.com/prettier@3.5.3/plugins/estree.mjs";
  import * as prettierPluginHtml from "https://unpkg.com/prettier@3.5.3/plugins/html.mjs";

  console.log(
    await prettier.format("const html=/* HTML */ `<DIV> </DIV>`", {
      parser: "babel",
      plugins: [prettierPluginBabel, prettierPluginEstree, prettierPluginHtml],
    }),
  );
  // Output: const html = /* HTML */ `<div></div>`;
</script>

----------------------------------------

TITLE: Ignoring Handlebars Content with prettier-ignore
DESCRIPTION: This example shows how to use the {{! prettier-ignore }} comment to prevent Prettier from formatting a specific block in a Handlebars template.

LANGUAGE: hbs
CODE:
{{! prettier-ignore }}
<div>
  "hello! my parent was ignored"
  {{#my-crazy-component     "shall"     be="preserved"}}
    <This
      is  =  "also preserved as is"
    />
  {{/my-crazy-component}}
</div>

----------------------------------------

TITLE: Resolving Prettier Config with URL-based File Locations in JavaScript
DESCRIPTION: Demonstrates how to use the updated prettier.resolveConfig() function with URL objects and file: protocol strings to specify custom configuration file locations. This enhancement allows for more flexible configuration management, especially in module-based environments.

LANGUAGE: javascript
CODE:
// `URL`
await prettier.resolveConfig("path/to/file", {
  config: new URL("/path/to/prettier-config-file", import.meta.url),
});

// URL string
await prettier.resolveConfig("path/to/file", {
  config: "file:///path/to/prettier-config-file",
});

----------------------------------------

TITLE: Using Prettier Pragma in JavaScript
DESCRIPTION: Example of using a Prettier pragma comment to enable formatting for a specific file.

LANGUAGE: javascript
CODE:
/**
 * @prettier
 */

// Your code here

----------------------------------------

TITLE: Referencing Shareable Config in Package.json
DESCRIPTION: Illustrates how to reference a shareable Prettier configuration in a project's package.json file.

LANGUAGE: json
CODE:
{
  "name": "my-cool-library",
  "version": "1.0.0",
  "prettier": "@username/prettier-config"
}

----------------------------------------

TITLE: Importing Prettier API
DESCRIPTION: Basic import statement to use Prettier programmatically in JavaScript

LANGUAGE: javascript
CODE:
import * as prettier from "prettier";

----------------------------------------

TITLE: Demonstrating experimentalOperatorPosition Option in JavaScript
DESCRIPTION: Shows how the new experimentalOperatorPosition option affects line breaking for binary operators in JavaScript expressions.

LANGUAGE: jsx
CODE:
// Input
var a = Math.random() * (yRange * (1 - minVerticalFraction)) + minVerticalFraction * yRange - offset;

// `experimentalOperatorPosition: end` (default behavior)
var a =
  Math.random() * (yRange * (1 - minVerticalFraction)) +
  minVerticalFraction * yRange -
  offset;

// `experimentalOperatorPosition: start`
var a =
  Math.random() * (yRange * (1 - minVerticalFraction))
  + minVerticalFraction * yRange
  - offset;

----------------------------------------

TITLE: Using Prettier CLI with Cache and Custom Strategy
DESCRIPTION: Shows how to enable caching and specify a custom cache strategy for improved performance when running Prettier.

LANGUAGE: bash
CODE:
prettier . --write --cache --cache-strategy metadata

----------------------------------------

TITLE: Experimental Ternary Formatting in JavaScript
DESCRIPTION: A new experimental flag --experimental-ternaries introduces a 'curious ternary' format that aims to improve readability of nested ternaries.

LANGUAGE: javascript
CODE:
const message =
  i % 3 === 0 && i % 5 === 0 ? "fizzbuzz"
  : i % 3 === 0 ? "fizz"
  : i % 5 === 0 ? "buzz"
  : String(i);

----------------------------------------

TITLE: Handling Semicolons with noSemi Option in JavaScript
DESCRIPTION: Illustrates how Prettier handles semicolon insertion when using the noSemi option, including edge cases to prevent unintended behavior.

LANGUAGE: javascript
CODE:
if (shouldAddLines) {
  ;[-1, 1].forEach(delta => addLine(delta * 20))
}

LANGUAGE: javascript
CODE:
console.log('Running a background task')
(async () => {
  await doBackgroundWork()
})()

LANGUAGE: javascript
CODE:
console.log("Running a background task")(async () => {
  await doBackgroundWork();
})();

----------------------------------------

TITLE: Pre-commit Shell Script
DESCRIPTION: Shell script for manually implementing Prettier pre-commit hooks

LANGUAGE: sh
CODE:
#!/bin/sh
FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\ |g')
[ -z "$FILES" ] && exit 0

# Prettify all selected files
echo "$FILES" | xargs ./node_modules/.bin/prettier --ignore-unknown --write

# Add back the modified/prettified files to staging
echo "$FILES" | xargs git add

exit 0

----------------------------------------

TITLE: Format Files In-Place
DESCRIPTION: Example of formatting all supported files in current directory and subdirectories using the --write flag.

LANGUAGE: bash
CODE:
prettier . --write

----------------------------------------

TITLE: Using prettier-ignore Comment in JSX
DESCRIPTION: Shows how to use the {/* prettier-ignore */} comment to exclude specific JSX elements from Prettier formatting.

LANGUAGE: jsx
CODE:
<div>
  {/* prettier-ignore */}
  <span     ugly  format=''   />
</div>

----------------------------------------

TITLE: Using prettier-ignore in HTML
DESCRIPTION: This example shows various ways to use prettier-ignore comments in HTML, including ignoring entire elements and specific attributes.

LANGUAGE: html
CODE:
<!-- prettier-ignore -->
<div         class="x"       >hello world</div            >

<!-- prettier-ignore-attribute -->
<div
  (mousedown)="       onStart    (    )         "
  (mouseup)="         onEnd      (    )         "
></div>

<!-- prettier-ignore-attribute (mouseup) -->
<div
  (mousedown)="onStart()"
  (mouseup)="         onEnd      (    )         "
></div>

----------------------------------------

TITLE: Creating a Custom Prettier Keybinding in Vim
DESCRIPTION: Demonstrates how to create a custom key mapping to run Prettier manually on the current buffer in Vim.

LANGUAGE: vim
CODE:
nnoremap gp :silent %!prettier --stdin-filepath %<CR>

----------------------------------------

TITLE: JSX Element Formatting - Bracket Line Example
DESCRIPTION: Examples showing JSX element formatting with different bracket line placement options

LANGUAGE: html
CODE:
<button
  className="prettier-class"
  id="prettier-id"
  onClick={this.handleClick}>
  Click Here
</button>

LANGUAGE: html
CODE:
<button
  className="prettier-class"
  id="prettier-id"
  onClick={this.handleClick}
>
  Click Here
</button>

----------------------------------------

TITLE: Using Prettier Globally in HTML
DESCRIPTION: This snippet demonstrates how to use Prettier globally in an HTML file by including the standalone script and a plugin, then formatting GraphQL code.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.js"></script>
<script src="https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/graphql.js"></script>
<script>
  (async () => {
    const formatted = await prettier.format("type Query { hello: String }", {
      parser: "graphql",
      plugins: prettierPlugins,
    });
  })();
</script>

----------------------------------------

TITLE: Formatting TypeScript 4.7 Instantiation Expressions
DESCRIPTION: Support for new TypeScript 4.7 instantiation expressions syntax.

LANGUAGE: typescript
CODE:
interface Box<T> {
  value: T;
}
function makeBox<T>(value: T) {
  return { value };
}
const makeHammerBox = makeBox<Hammer>;
const makeWrenchBox = makeBox<Wrench>;

----------------------------------------

TITLE: Publishing Shareable Prettier Config to npm
DESCRIPTION: Command to publish the shareable Prettier configuration package to npm registry.

LANGUAGE: bash
CODE:
npm publish

----------------------------------------

TITLE: Running Prettier Check Command
DESCRIPTION: Basic command to run Prettier in check mode across all files in the current directory

LANGUAGE: bash
CODE:
prettier --check .

----------------------------------------

TITLE: Plugin Language Definition
DESCRIPTION: Example of defining a new language in a Prettier plugin

LANGUAGE: javascript
CODE:
export const languages = [
  {
    name: "InterpretedDanceScript",
    parsers: ["dance-parse"]
  }
];

----------------------------------------

TITLE: Using TypeScript 4.9 satisfies operator
DESCRIPTION: Demonstrates support for the new TypeScript 4.9 satisfies operator, which allows type checking without changing the inferred type.

LANGUAGE: tsx
CODE:
const palette = {
  red: [255, 0, 0],
  green: "#00ff00",
  blue: [0, 0, 255]
} satisfies Record<Colors, string | RGB>;

----------------------------------------

TITLE: Formatting object destructuring in React components
DESCRIPTION: Illustrates how Prettier formats object destructuring in React functional components.

LANGUAGE: jsx
CODE:
// Before
export default function StatelessFunctionalComponent(
  {
    searchFilters,
    title,
    items
  }
) {
  return <div />;
}

// After
export default function StatelessFunctionalComponent({
  searchFilters,
  title,
  items,
}) {
  return <div />
}


----------------------------------------

TITLE: Using Log Levels with Prettier CLI
DESCRIPTION: Shows how to use the --loglevel option to control Prettier's logging output.

LANGUAGE: bash
CODE:
$ prettier --loglevel=debug blarg
$ ./bin/prettier.js --loglevel=debug blarg
[debug] normalized argv: {"_":["blarg"],"bracket-spacing":false,"color":true,"debug-check":false,"debug-print-doc":false,"flow-parser":false,"insert-pragma":false,"jsx-bracket-same-line":false,"list-different":false,"require-pragma":false,"semi":false,"single-quote":false,"stdin":false,"use-tabs":false,"version":false,"with-node-modules":false,"write":false,"loglevel":"debug","ignore-path":".prettierignore","config-precedence":"cli-override"}
[error] No matching files. Patterns tried: blarg !**/node_modules/** !./node_modules/**

----------------------------------------

TITLE: Defining Doc Type in TypeScript
DESCRIPTION: Basic type definition for Prettier's Doc intermediate representation, which can be a string, array of docs, or command.

LANGUAGE: typescript
CODE:
type Doc = string | Doc[] | DocCommand;

----------------------------------------

TITLE: Ignoring JSX Elements with prettier-ignore
DESCRIPTION: This snippet demonstrates how to use the {/* prettier-ignore */} comment to prevent Prettier from formatting a specific JSX element.

LANGUAGE: jsx
CODE:
<div>
  {/* prettier-ignore */}
  <span     ugly  format=''   />
</div>

----------------------------------------

TITLE: Configuring Prettier with TOML
DESCRIPTION: Basic configuration for Prettier using a TOML file. Sets trailing comma, tab width, semicolon, and quote style options.

LANGUAGE: toml
CODE:
# .prettierrc.toml
trailingComma = "es5"
tabWidth = 4
semi = false
singleQuote = true

----------------------------------------

TITLE: API Plugin Usage with Prettier
DESCRIPTION: Example of loading a Prettier plugin programmatically via the API

LANGUAGE: javascript
CODE:
await prettier.format("code", {
  parser: "foo",
  plugins: ["prettier-plugin-foo"]
});

----------------------------------------

TITLE: Auto-formatting on Save with Neoformat
DESCRIPTION: Configures Vim to automatically run Prettier through Neoformat when saving JavaScript files.

LANGUAGE: vim
CODE:
autocmd BufWritePre *.js Neoformat

----------------------------------------

TITLE: Formatting Embedded Code with Prettier
DESCRIPTION: This snippet demonstrates how to format embedded HTML code within JavaScript using Prettier. It loads the necessary plugins for both JavaScript and HTML parsing.

LANGUAGE: html
CODE:
<script type="module">
  import * as prettier from "https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.mjs";
  import * as prettierPluginBabel from "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/babel.mjs";
  import * as prettierPluginEstree from "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/estree.mjs";
  import * as prettierPluginHtml from "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/html.mjs";

  console.log(
    await prettier.format("const html=/* HTML */ `<DIV> </DIV>`", {
      parser: "babel",
      plugins: [prettierPluginBabel, prettierPluginEstree, prettierPluginHtml],
    }),
  );
  // Output: const html = /* HTML */ `<div></div>`;
</script>

----------------------------------------

TITLE: Preserving Blank Lines in JavaScript Export Specifiers
DESCRIPTION: Preserve blank lines between export specifiers in JavaScript code.

LANGUAGE: javascript
CODE:
export {
  // a
  foo1,

  // b
  bar1,
  baz1,
} from "mod";

----------------------------------------

TITLE: GraphQL Union Type Formatting
DESCRIPTION: Shows enhanced formatting for GraphQL union types with consistent indentation.

LANGUAGE: graphql
CODE:
union SearchResult =
  | Conference
  | Festival
  | Concert
  | Venue
  | Conference
  | Festival
  | Concert
  | Venue

----------------------------------------

TITLE: Flow Comments Removal
DESCRIPTION: Removal of support for Flow comments in favor of treating them like regular code.

LANGUAGE: javascript
CODE:
// Input
let a /*: foo */ = b;

// Prettier 2.8
let a /*: foo */ = b;

// Prettier 3.0 with --parser flow
let a: foo = b;

// Prettier 3.0 with --parser babel
let a /*: foo */ = b;

----------------------------------------

TITLE: TypeScript 4.4 Static Blocks Implementation
DESCRIPTION: Demonstrates support for the new class static blocks syntax in TypeScript 4.4, a Stage 4 ECMAScript proposal that allows initialization logic for static members.

LANGUAGE: tsx
CODE:
class Foo {
  static count = 0;

  // This is a static block:
  static {
    if (someCondition()) {
      Foo.count++;
    }
  }
}

----------------------------------------

TITLE: Clean Build Directory
DESCRIPTION: Removes the 'dist' directory before bundling files for a clean build.

LANGUAGE: sh
CODE:
yarn build --clean

----------------------------------------

TITLE: Setting Prettier Options in ALE
DESCRIPTION: Demonstrates how to set Prettier options directly in the Vim configuration file for use with ALE.

LANGUAGE: vim
CODE:
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'

----------------------------------------

TITLE: Configuring Prettier with TypeScript (CommonJS)
DESCRIPTION: Basic configuration of Prettier using a TypeScript file with CommonJS. Exports a configuration object with trailing comma setting.

LANGUAGE: typescript
CODE:
// prettier.config.ts, .prettierrc.ts, prettier.config.cts, or .prettierrc.cts

import { type Config } from "prettier";

const config: Config = {
  trailingComma: "none",
};

module.exports = config;

----------------------------------------

TITLE: Using Prettier with CommonJS
DESCRIPTION: This example shows how to use Prettier with CommonJS, requiring the standalone version and a GraphQL plugin to format code. This is typically used with bundlers that support the 'browser' field.

LANGUAGE: javascript
CODE:
const prettier = require("prettier/standalone");
const plugins = [require("prettier/plugins/graphql")];

(async () => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins,
  });
})();

----------------------------------------

TITLE: Exporting Shareable Prettier Configuration
DESCRIPTION: Example index.js file that exports a shareable Prettier configuration object with custom formatting rules.

LANGUAGE: javascript
CODE:
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Formatting Optional Chaining in TypeScript
DESCRIPTION: Demonstrates how Prettier 1.19 formats TypeScript optional chaining syntax.

LANGUAGE: typescript
CODE:
const longChain = obj?.a?.b?.c?.d?.e?.f?.g;
const longChainCallExpression = obj
  .a?.(a, b, c)
  .b?.(a, b, c)
  .c?.(a, b, c)
  .d?.(a, b, c)
  .e?.(a, b, c)
  .f?.(a, b, c);

----------------------------------------

TITLE: Improving JavaScript Assignment Formatting
DESCRIPTION: Prettier 2.3 improves how assignments are formatted, particularly for long right-hand sides and complex expressions.

LANGUAGE: javascript
CODE:
// Prettier 2.3
aParticularlyLongAndObnoxiousNameForIllustrativePurposes =
  anotherVeryLongNameForIllustrativePurposes;

aParticularlyLongAndObnoxiousNameForIllustrativePurposes =
  "a very long string for illustrative purposes".length;

someReallyLongThingStoredInAMapWithAReallyBigName[pageletID] =
  _someVariableThatWeAreCheckingForFalsiness
    ? Date.now() - _someVariableThatWeAreCheckingForFalsiness
    : 0;

class x {
  private readonly rawConfigFromFile$: BehaviorSubject<any> =
    new BehaviorSubject(notRead);
}

----------------------------------------

TITLE: Improved Handling of style and pre Tags in Handlebars
DESCRIPTION: Shows improved formatting for style and pre tags in Handlebars/Glimmer templates.

LANGUAGE: handlebars
CODE:
{{!-- Input --}}
<pre>
  cd ~
  ls
  echo "hey"
</pre>
<style>
  .red { color: red }
  .blue {
    color: red
  }
</style>

{{!-- Prettier 3.4 --}}
<pre>
  cd ~ ls echo "hey"
</pre>
<style>
  .red { color: red } .blue { color: blue }
</style>

{{!-- Prettier 3.5 --}}
<pre>
  cd ~
  ls
  echo "hey"
</pre>
<style>
  .red {
    color: red;
  }
  .blue {
    color: red;
  }
</style>

----------------------------------------

TITLE: Flow Component and Hook Syntax Support
DESCRIPTION: New support for Flow's component and hook syntax with parameter typing and return types.

LANGUAGE: jsx
CODE:
component MyComponent(a: string, b: number) renders SomeComponent {
  return <OtherComponent />;
}
hook useMyHook(a: string) {
  return useState(a);
}

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Prettier Autoformatting
DESCRIPTION: GitHub Actions workflow configuration that automatically runs Prettier formatting on pull requests and pushes. Uses autofix.ci to commit the formatting changes. Requires a pinned Prettier version and the autofix.ci GitHub App installation.

LANGUAGE: yaml
CODE:
name: autofix.ci
on:
  pull_request:
  push:
permissions: {}
jobs:
  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: |
          yarn
          yarn prettier . --write
      - uses: autofix-ci/action@v1
        with:
          commit-message: "Apply Prettier format"

----------------------------------------

TITLE: Formatting stdin Input with Prettier CLI
DESCRIPTION: Demonstrates how to use Prettier to format content from stdin while specifying the file type.

LANGUAGE: bash
CODE:
cat abc.css | prettier --stdin-filepath abc.css

----------------------------------------

TITLE: Using Negative Patterns in Prettier CLI Commands
DESCRIPTION: Demonstrates how to use negative patterns in Prettier CLI commands to exclude specific files without adding them to .prettierignore.

LANGUAGE: bash
CODE:
prettier . "!**/*.{js,jsx,vue}" --write

----------------------------------------

TITLE: Print Bundle Sizes
DESCRIPTION: Displays the sizes of bundled files after build completion.

LANGUAGE: sh
CODE:
yarn build --print-size

----------------------------------------

TITLE: Compare Bundle Sizes
DESCRIPTION: Compares file sizes with the last released version to track size changes.

LANGUAGE: sh
CODE:
yarn build --compare-size

----------------------------------------

TITLE: React Component Export with Metadata
DESCRIPTION: Exports a React component with metadata configuration and component mapping using irregular spacing and formatting.

LANGUAGE: jsx
CODE:
export const meta = {
authors: [fred, sue],
layout: Layout
}

export default () =>
  <Doc     components={{
        h1: ui.Heading,
         p:    ui.Text,
      code:     ui.Code
         }}
      />

----------------------------------------

TITLE: Using prettier-ignore in GraphQL
DESCRIPTION: This snippet demonstrates how to use the # prettier-ignore comment to prevent Prettier from formatting a specific part of a GraphQL query.

LANGUAGE: graphql
CODE:
{
  # prettier-ignore
  addReaction(input:{superLongInputFieldName:"MDU6SXNzdWUyMzEzOTE1NTE=",content:HOORAY}) {
    reaction {content}
  }
}

----------------------------------------

TITLE: Fixing Comment Formatting in TypeScript Parameter Properties
DESCRIPTION: Improves the handling of comments after the last parameter property in TypeScript class constructors.

LANGUAGE: typescript
CODE:
class Class {
  constructor(
    private readonly paramProp: Type,
    // comment
  ) {}
}

----------------------------------------

TITLE: Ignoring CSS Rules with prettier-ignore
DESCRIPTION: This snippet demonstrates how to use the /* prettier-ignore */ comment to prevent Prettier from formatting a specific CSS rule.

LANGUAGE: css
CODE:
/* prettier-ignore */
.my    ugly rule
{

}

----------------------------------------

TITLE: Installing Shareable Prettier Config in a Project
DESCRIPTION: Commands to install a published shareable Prettier configuration using different package managers.

LANGUAGE: bash
CODE:
npm install --save-dev @username/prettier-config

LANGUAGE: bash
CODE:
yarn add --dev @username/prettier-config

LANGUAGE: bash
CODE:
pnpm add --save-dev @username/prettier-config

LANGUAGE: bash
CODE:
bun add --dev @username/prettier-config

----------------------------------------

TITLE: Using Prettier in a Module Web Worker
DESCRIPTION: This snippet demonstrates how to use Prettier in a module-type Web Worker, importing the standalone version and a GraphQL plugin to format code.

LANGUAGE: javascript
CODE:
import * as prettier from "https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.mjs";
import * as prettierPluginGraphql from "https://unpkg.com/prettier@%PRETTIER_VERSION%1/plugins/graphql.mjs";

const formatted = await prettier.format("type Query { hello: String }", {
  parser: "graphql",
  plugins: [prettierPluginGraphql],
});

----------------------------------------

TITLE: Formatting Comments in TypeScript Intersection Types with Prettier
DESCRIPTION: This snippet shows how Prettier handles comments in TypeScript intersection types, comparing the input, current stable output, and the fixed output from the main branch. The fix ensures that multi-line comments are properly preserved and formatted.

LANGUAGE: jsx
CODE:
// Input
export type ErrorLike =
  SerializedProps<Error> & 
  // cause is a new addition to Error that is not yet available in all runtimes. We have added
  // it to try and pinpoint additional reasoning for failures such as Node's fetch.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
  { cause?: unknown };

// Prettier stable
export type ErrorLike =
  SerializedProps<Error> & // cause is a new addition to Error that is not yet available in all runtimes. We have added
  // it to try and pinpoint additional reasoning for failures such as Node's fetch.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
  { cause?: unknown };

// Prettier stable (second format)
export type ErrorLike =
  SerializedProps<Error> & // it to try and pinpoint additional reasoning for failures such as Node's fetch. // cause is a new addition to Error that is not yet available in all runtimes. We have added
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
  { cause?: unknown };

// Prettier main
export type ErrorLike = SerializedProps<Error> &
  // cause is a new addition to Error that is not yet available in all runtimes. We have added
  // it to try and pinpoint additional reasoning for failures such as Node's fetch.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
  { cause?: unknown };

----------------------------------------

TITLE: Support for .prop Shorthand in Vue
DESCRIPTION: Shows new support for the .prop shorthand syntax in Vue templates.

LANGUAGE: vue
CODE:
<!-- Input -->
<template>
  <button .disabled="   a &&b ">Click!</button>
</template>

<!-- Prettier 3.4 -->
<template>
  <button .disabled="   a &&b ">Click!</button>
</template>

<!-- Prettier 3.5 -->
<template>
  <button .disabled="a && b">Click!</button>
</template>

----------------------------------------

TITLE: Range Ignore in Markdown
DESCRIPTION: This snippet demonstrates how to use prettier-ignore-start and prettier-ignore-end comments to prevent Prettier from formatting a block of auto-generated content in Markdown.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore-start -->
<!-- SOMETHING AUTO-GENERATED BY TOOLS - START -->

| MY | AWESOME | AUTO-GENERATED | TABLE |
|-|-|-|-|
| a | b | c | d |

<!-- SOMETHING AUTO-GENERATED BY TOOLS - END -->
<!-- prettier-ignore-end -->

----------------------------------------

TITLE: Long Function Call Formatting in JavaScript
DESCRIPTION: Shows how Prettier handles formatting of function calls with long arguments that exceed the maximum line length by breaking them into multiple lines.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

LANGUAGE: javascript
CODE:
foo(
  reallyLongArg(),
  omgSoManyParameters(),
  IShouldRefactorThis(),
  isThereSeriouslyAnotherOne(),
);

----------------------------------------

TITLE: Defining React Component with Prettier Ignore (JSX)
DESCRIPTION: This snippet shows a React functional component definition wrapped in Prettier ignore comments. The component renders a paragraph element with the text 'test'. The ignore comments prevent Prettier from reformatting this code block.

LANGUAGE: JavaScript
CODE:
{/* prettier-ignore-start */}
export const Test = () => {
   return <p>test</p>;
 };
   <Test />
{/* prettier-ignore-end */}

----------------------------------------

TITLE: Multiple Import Statements
DESCRIPTION: Shows different styles of import statements including default imports and named imports with varying levels of spacing and quotation styles.

LANGUAGE: javascript
CODE:
import D from 'd'
import {A,B,C}    from "hello-world"
import {AAAAAAAAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBBBBBBB, CCCCCCCCCCCCCCCCCCCCCCC}   from  'xyz';

----------------------------------------

TITLE: Supporting Angular Control Flow Syntax
DESCRIPTION: Prettier 3.1 adds support for the new control flow syntax introduced in Angular v17.



----------------------------------------

TITLE: Basic Function Call Formatting in JavaScript
DESCRIPTION: Demonstrates how Prettier formats a simple function call with multiple arguments that fits on a single line.

LANGUAGE: javascript
CODE:
foo(arg1, arg2, arg3, arg4);

----------------------------------------

TITLE: Formatting GraphQL with Prettier using global script tags
DESCRIPTION: This snippet demonstrates how to use Prettier to format GraphQL code in the browser using global script tags. It loads Prettier and the GraphQL plugin from unpkg.com and formats a simple GraphQL query.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/prettier@3.5.3/standalone.js"></script>
<script src="https://unpkg.com/prettier@3.5.3/plugins/graphql.js"></script>
<script>
  (async () => {
    const formatted = await prettier.format("type Query { hello: String }", {
      parser: "graphql",
      plugins: prettierPlugins,
    });
  })();
</script>

----------------------------------------

TITLE: Formatting Numbers in Optional Member Expressions - JSX
DESCRIPTION: Demonstrates the formatting of numbers in optional member expressions across different Prettier parser configurations. The change ensures numbers are consistently wrapped in parentheses when used with optional chaining to prevent syntax errors if the optional chaining is later removed.

LANGUAGE: jsx
CODE:
// Input
(1)?.toString();
(1.5)?.toString();

// Prettier stable (--parser=babel)
1?.toString();
1.5?.toString();

// Prettier stable (--parser=typescript)
(1)?.toString();
(1.5)?.toString();

// Prettier main
(1)?.toString();
(1.5)?.toString();

----------------------------------------

TITLE: Formatting custom Handlebars 'else if' blocks
DESCRIPTION: Demonstrates correct formatting of custom 'else if' blocks in Handlebars templates, recognizing custom keywords that behave similarly to 'if'.

LANGUAGE: hbs
CODE:
{{#when isAtWork}}
  Ship that code!
{{else when isReading}}
  You can finish War and Peace eventually...
{{else}}
  Go to bed!
{{/when}}

----------------------------------------

TITLE: Using prettier-ignore in Markdown
DESCRIPTION: This example shows how to use the <!-- prettier-ignore --> comment to prevent Prettier from formatting a specific line in Markdown.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
Do   not    format   this

----------------------------------------

TITLE: Installing Neoformat Plugin for Vim
DESCRIPTION: Shows how to install the Neoformat plugin using vim-plug package manager. This plugin allows for code formatting in Vim, including Prettier support.

LANGUAGE: vim
CODE:
Plug 'sbdchd/neoformat'

----------------------------------------

TITLE: Formatting GraphQL with Prettier using AMD
DESCRIPTION: This snippet demonstrates how to use Prettier with AMD (Asynchronous Module Definition) to format GraphQL code in the browser. It loads Prettier and the GraphQL plugin as AMD modules and formats a simple GraphQL query.

LANGUAGE: javascript
CODE:
define([
  "https://unpkg.com/prettier@3.5.3/standalone.js",
  "https://unpkg.com/prettier@3.5.3/plugins/graphql.js",
], async (prettier, ...plugins) => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins,
  });
});

----------------------------------------

TITLE: Rendering Nested React Components with Inline Styles
DESCRIPTION: Shows a Foo component with a nested div and Bar component, using inline styles and demonstrating various spacing inconsistencies.

LANGUAGE: JSX
CODE:
<Foo bg='red'>
   <div style={{   display:   'block'}   }>
      <Bar    >hi    </Bar>
       {  hello       }
       {     /* another comment */}
       </div>
</Foo>

----------------------------------------

TITLE: JavaScript with Line Numbers and Node Execution
DESCRIPTION: JavaScript code block with metadata for line numbering and Node.js execution command.

LANGUAGE: javascript
CODE:
console.log    (    "hello world"    );

----------------------------------------

TITLE: Creating Aligned Markdown Table
DESCRIPTION: This snippet shows how to create a basic Markdown table with different column alignments. The first row defines the headers, the second row sets the alignment, and the third row contains data.

LANGUAGE: markdown
CODE:
|a|b|c|
|:--|:-:|--:|
|d|e|f|

----------------------------------------

TITLE: Defining Configuration Object in JSON
DESCRIPTION: JSON object that defines preprocess and print configuration settings. Both properties are set to the value 'Lorem Ipsum' with preserved whitespace.

LANGUAGE: json
CODE:
{ "preprocess": "Lorem    Ipsum", "print": "Lorem    Ipsum" }

----------------------------------------

TITLE: Formatting Nullish Coalescing in TypeScript
DESCRIPTION: Shows how Prettier 1.19 handles TypeScript nullish coalescing operator.

LANGUAGE: typescript
CODE:
const cond = null;
const result = cond ?? "a";
const longChain = cond ?? cond ?? cond ?? "b";

----------------------------------------

TITLE: Post-commit script to update git's index
DESCRIPTION: This short shell script can be used as a post-commit hook to update git's index, resolving issues with prettified files appearing as modified after committing.

LANGUAGE: sh
CODE:
#!/bin/sh
git update-index -g

----------------------------------------

TITLE: Using prettier-ignore Comment in GraphQL
DESCRIPTION: Demonstrates how to use the # prettier-ignore comment to exclude specific GraphQL queries from Prettier formatting.

LANGUAGE: graphql
CODE:
{
  # prettier-ignore
  addReaction(input:{superLongInputFieldName:"MDU6SXNzdWUyMzEzOTE1NTE=",content:HOORAY}) {
    reaction {content}
  }
}

----------------------------------------

TITLE: Extending Shareable Prettier Config
DESCRIPTION: Example of how to extend a shareable Prettier configuration and override specific properties in a .prettierrc.mjs file.

LANGUAGE: javascript
CODE:
import usernamePrettierConfig from "@username/prettier-config";

/**
 * @type {import("prettier").Config}
 */
const config = {
  ...usernamePrettierConfig,
  semi: false,
};

export default config;

----------------------------------------

TITLE: JavaScript Template Literal Array Formatting
DESCRIPTION: Fixed formatting of template literals containing arrays to preserve correct array structure.

LANGUAGE: jsx
CODE:
const string = `${[[1, 2], [3, 4]]}`

----------------------------------------

TITLE: Formatting GraphQL Schema Extensions
DESCRIPTION: Add support for printing SchemaExtension nodes in GraphQL.

LANGUAGE: graphql
CODE:
extend schema {
  subscription: Subscription
}
extend schema @directive

----------------------------------------

TITLE: Formatting Vue Single File Components in JavaScript
DESCRIPTION: Prettier now supports partial formatting of Vue Single File Components (.vue files). The HTML is preserved as-is, while the <script> and <style> tags are formatted using Prettier.

LANGUAGE: bash
CODE:
prettier *.vue

----------------------------------------

TITLE: HTML BracketSameLine Option Implementation
DESCRIPTION: Shows the new bracketSameLine option that replaces jsxBracketSameLine, extending support to HTML, Angular, and Vue in addition to JSX.

LANGUAGE: html
CODE:
<div
  id="foo-bar-baz"
  class="bar-foo-baz"
  title="a sample title"
  data-foo="bar"
  data-bar="baz">
  lorem ipsum dolor sit amet
</div>

----------------------------------------

TITLE: JavaScript with Condensed Metadata
DESCRIPTION: JavaScript code block with metadata directly attached to the language identifier without spacing.

LANGUAGE: javascript
CODE:
console.log    (    "hello world"    );

----------------------------------------

TITLE: Defining Generic Arrow Function in TypeScript
DESCRIPTION: This snippet defines a generic arrow function in TypeScript. The function 'test' takes a single parameter of type T, where T is a generic type parameter. The function body is empty, indicating it doesn't perform any operations.

LANGUAGE: tsx
CODE:
const test = <T,>(value: T) => {};

----------------------------------------

TITLE: Creating Basic Markdown Table Structure
DESCRIPTION: Demonstrates how to create a simple three-column markdown table with headers and one row of content. The table uses standard markdown pipe syntax and alignment dashes.

LANGUAGE: markdown
CODE:
| Title A | Title B | Title C |
|---|---|---|
| content A | content B | content C |

----------------------------------------

TITLE: Auto-formatting on Multiple Events with Neoformat
DESCRIPTION: Sets up Vim to run Prettier through Neoformat on multiple events: saving, text changes, and leaving insert mode for JavaScript files.

LANGUAGE: vim
CODE:
autocmd BufWritePre,TextChanged,InsertLeave *.js Neoformat

----------------------------------------

TITLE: Installing Dependencies and Running Tests in Prettier
DESCRIPTION: Basic setup commands to install project dependencies and run the test suite using Yarn package manager.

LANGUAGE: bash
CODE:
yarn
yarn test

----------------------------------------

TITLE: Configuring Prettier options in Vim
DESCRIPTION: This snippet sets Prettier options for JavaScript files using Vim's formatprg and enables Neoformat to use it.

LANGUAGE: vim
CODE:
autocmd FileType javascript setlocal formatprg=prettier\ --single-quote\ --trailing-comma\ es5
" Use formatprg when available
let g:neoformat_try_formatprg = 1

----------------------------------------

TITLE: Using Type Annotation in Shareable Prettier Config
DESCRIPTION: Example of using JSDoc type annotation to get type safety and autocomplete support in a shareable Prettier configuration.

LANGUAGE: javascript
CODE:
/**
 * @type {import("prettier").Config}
 */
const config = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: false,
  singleQuote: true,
};

export default config;

----------------------------------------

TITLE: Formatting Vue Template Expressions with TypeScript
DESCRIPTION: Allow formatting of Vue template expressions written in TypeScript.

LANGUAGE: vue
CODE:
<script setup lang="ts">
let x: string | number = 1;
</script>

<template>
  {{ (x as number).toFixed(2) }}
</template>

----------------------------------------

TITLE: Preventing Wrapping of Short Object Properties
DESCRIPTION: Prettier 2.3 avoids line breaks after short property names in object literals to improve readability.

LANGUAGE: javascript
CODE:
// Prettier 2.3
const importantLink = {
  url: "https://prettier.io/docs/en/rationale.html#what-prettier-is-concerned-about",
  gitHubUrl:
    "https://github.com/prettier/prettier/blob/main/docs/rationale.md#what-prettier-is-concerned-about",
};

----------------------------------------

TITLE: Prettier Pragma Comment Examples
DESCRIPTION: Shows the two supported pragma comment formats that enable selective formatting when using the --require-pragma option.

LANGUAGE: js
CODE:
/**
 * @prettier
 */

/**
 * @format
 */

----------------------------------------

TITLE: Helix Configuration Example
DESCRIPTION: Example configuration path reference for setting up Prettier in Helix editor

LANGUAGE: markdown
CODE:
prettier-vscode

----------------------------------------

TITLE: Using --cache-location CLI option
DESCRIPTION: Shows how to use the new --cache-location option to specify a custom location for the Prettier cache file.

LANGUAGE: bash
CODE:
prettier --write --cache --cache-location=my_cache_file src

----------------------------------------

TITLE: Implementing Multi-Layer Repeating Linear Gradients in CSS
DESCRIPTION: Creates a complex background effect using three overlapping repeating linear gradients. Each gradient layer uses RGB colors with 50% opacity and specific pixel intervals, rotating at different angles (190deg, -190deg, and 23deg) to create a rainbow-like pattern.

LANGUAGE: css
CODE:
.multi-repeating-linear {
  background:     repeating-linear-gradient(
      190deg,
              rgb(255 0 0 / 50%) 40px,
      rgb(255 153 0 / 50%) 80px,
rgb(255 255 0 / 50%) 120px,
      rgb(0 255 0 / 50%) 160px,
      rgb(0 0 255 / 50%) 200px,
      rgb(75 0 130 / 50%) 240px,
      rgb(238 130 238 / 50%) 280px,
      rgb(255 0 0 / 50%) 300px
    ), repeating-linear-gradient(
      -190deg,
      rgb(255 0 0 / 50%) 30px,
      rgb(255 153 0 / 50%) 60px,
      rgb(255 255 0 / 50%) 90px,
      rgb(0 255 0 / 50%) 120px,
      rgb(0 0 255 / 50%) 150px,
  rgb(75 0 130 / 50%) 180px,
      rgb(238 130 238 / 50%) 210px,
      rgb(255 0 0 / 50%) 230px
    ), repeating-linear-gradient(23deg, red 50px, orange 100px, yellow 150px, green
        200px, blue 250px, indigo 300px, violet 350px, red 370px);
}

----------------------------------------

TITLE: Applying Safe Area Inset Padding in CSS
DESCRIPTION: This CSS code applies padding to the body element using the env() function to account for safe area insets on mobile devices. It provides fallback values of 20px for each side if the environment variables are not available.

LANGUAGE: css
CODE:
body {
padding: env(safe-area-inset-top, 20px) env(safe-area-inset-right, 20px) env(
      safe-area-inset-bottom,
                20px
    ) env(safe-area-inset-left, 20px);
}

----------------------------------------

TITLE: Creating Nested Markdown Lists
DESCRIPTION: Demonstrates how to create a hierarchical list structure in Markdown with multiple levels of indentation. Shows two top-level items with nested sub-items going three levels deep.

LANGUAGE: markdown
CODE:
- Top level list item 1 
- Top level list item 2
  - Nested List item 1
  - Nested List item 2
    - Sub-Nested List item 1
    - Sub-Nested List item 2

----------------------------------------

TITLE: Formatting Angular ICU Expressions in HTML
DESCRIPTION: Demonstrates support for Angular's plural and select ICU expressions with proper formatting.

LANGUAGE: html
CODE:
<span i18n>
  Updated:
  {minutes, plural,
    =0 {just now}
    =1 {one minute ago}
    other {{{minutes}} minutes ago}
  }
</span>

<span i18n>
  The author is {gender, select, male {male} female {female} other {other}}
</span>

----------------------------------------

TITLE: Improved ternary indentation with tabs in Prettier 1.11
DESCRIPTION: Demonstrates better indentation of ternary expressions when using tabs.

LANGUAGE: javascript
CODE:
const abc = props.something
	? xyz
	: {
			prop1: a,
			prop2: b,
			prop3: false
	  };

----------------------------------------

TITLE: Creating Package.json for Shareable Prettier Config
DESCRIPTION: Defines the structure of package.json file for a shareable Prettier configuration npm package. It includes essential fields like name, version, description, and peer dependencies.

LANGUAGE: json
CODE:
{
  "name": "@username/prettier-config",
  "version": "1.0.0",
  "description": "My personal Prettier config",
  "type": "module",
  "exports": "./index.js",
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "peerDependencies": {
    "prettier": ">=3.0.0"
  }
}

----------------------------------------

TITLE: Installing ALE with vim-plug in Vim
DESCRIPTION: This snippet shows how to install the ALE (Asynchronous Lint Engine) plugin using vim-plug.

LANGUAGE: vim
CODE:
Plug 'dense-analysis/ale'

----------------------------------------

TITLE: JavaScript Object Property Quotes Option Example
DESCRIPTION: Demonstrates the new --quote-props option for controlling how object property quotes are handled, with three modes: as-needed (default), preserve, and consistent.

LANGUAGE: javascript
CODE:
const headers = {
  accept: "application/json",
  "content-type": "application/json",
  "origin": "prettier.io"
};

----------------------------------------

TITLE: Improved Function Composition Detection in JavaScript
DESCRIPTION: Shows how Prettier 1.19 detects and formats function composition patterns.

LANGUAGE: javascript
CODE:
eventStore.update(id, _.flow(updater, incrementVersion));

----------------------------------------

TITLE: Enhanced HTML Template Formatting
DESCRIPTION: Better handling of whitespace sensitivity in HTML templates

LANGUAGE: html
CODE:
<pre>
  <span>TEXT</span>
</pre>

----------------------------------------

TITLE: Setting up Prettier command for coc.nvim in Vim
DESCRIPTION: This command definition allows running Prettier through coc.nvim in Vim.

LANGUAGE: vim
CODE:
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

----------------------------------------

TITLE: Using range ignore in MDX
DESCRIPTION: Demonstrates support for using Markdown range ignore directives in MDX files using JSX comments.

LANGUAGE: mdx
CODE:
{/* prettier-ignore-start */}

export const Hello = () => {
  return (<p>
  Hello</p>)
}

{/* prettier-ignore-end */}

----------------------------------------

TITLE: Using prettier-ignore Comments in HTML
DESCRIPTION: Demonstrates various ways to use prettier-ignore comments in HTML to exclude elements or specific attributes from formatting.

LANGUAGE: html
CODE:
<!-- prettier-ignore -->
<div         class="x"       >hello world</div            >

<!-- prettier-ignore-attribute -->
<div
  (mousedown)="       onStart    (    )         "
  (mouseup)="         onEnd      (    )         "
></div>

<!-- prettier-ignore-attribute (mouseup) -->
<div
  (mousedown)="onStart()"
  (mouseup)="         onEnd      (    )         "
></div>

----------------------------------------

TITLE: Ignoring JavaScript Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to use the prettier-ignore directive to prevent formatting of JavaScript code within a Markdown code block.

LANGUAGE: markdown
CODE:
```md
<!-- prettier-ignore -->
```js
ugly   ( code ) ;
```
```

----------------------------------------

TITLE: Declaring Generic Arrow Function in TypeScript
DESCRIPTION: Demonstrates the syntax for creating a generic arrow function that accepts a single type parameter T and a value of that type. The function is empty and doesn't return anything.

LANGUAGE: ts
CODE:
const test = <T,>(value: T) => {};

LANGUAGE: typescript
CODE:
const test = <T,>(value: T) => {};

----------------------------------------

TITLE: Formatting JSX Arrow Function Attributes
DESCRIPTION: Demonstrates Prettier's improved formatting of JSX attributes containing arrow functions.

LANGUAGE: jsx
CODE:
<BookingIntroPanel
  logClick={data =>
    doLogClick("long_name_long_name_long_name", "long_name_long_name_long_name", data)
  }
/>;

----------------------------------------

TITLE: Creating a .prettierignore File for Prettier
DESCRIPTION: This snippet demonstrates how to create a .prettierignore file to exclude specific files and folders from Prettier formatting. It uses gitignore syntax.

LANGUAGE: text
CODE:
# Ignore artifacts:
build
coverage

# Ignore all HTML files:
**/*.html

----------------------------------------

TITLE: Auto-formatting on save with Neoformat in Vim
DESCRIPTION: This autocmd runs Neoformat on JavaScript files when saving, effectively applying Prettier formatting.

LANGUAGE: vim
CODE:
autocmd BufWritePre *.js Neoformat

----------------------------------------

TITLE: Handling Comments Before 'else' in JavaScript
DESCRIPTION: Fixes issues with comment placement before 'else' statements, preserving comments in their original position.

LANGUAGE: javascript
CODE:
if (obj.foo) {
  return foo;
}
// Use bar as a fallback
else if (obj.bar) {
  return bar;
}

----------------------------------------

TITLE: Formatting TypeScript definite assignment in Prettier 1.11
DESCRIPTION: Shows support for TypeScript 2.7's definite assignment syntax in class property initializers.

LANGUAGE: typescript
CODE:
class MyComponent {
  ngModel!: ng.INgModelController;
}

----------------------------------------

TITLE: Formatting MDX with Adjacent JSX Elements
DESCRIPTION: Shows how Prettier 1.19 handles adjacent JSX elements in MDX.

LANGUAGE: jsx
CODE:
<Hello>
  test <World /> test
</Hello>
<Hello>
  test <World /> test
</Hello>123

----------------------------------------

TITLE: Formatting Script Tags in HTML
DESCRIPTION: Demonstrates how Prettier 1.19 formats script tags in HTML.

LANGUAGE: html
CODE:
<script
  async
  src="/_next/static/development/pages/_app.js?ts=1565732195968"
></script>
<script></script>

----------------------------------------

TITLE: Manual Prettier formatting keybinding in Vim
DESCRIPTION: This keybinding allows manual Prettier formatting of the current buffer using the 'gp' shortcut in normal mode.

LANGUAGE: vim
CODE:
nnoremap gp :silent %!prettier --stdin-filepath %<CR>

----------------------------------------

TITLE: Creating a .prettierignore File for Prettier
DESCRIPTION: This snippet demonstrates how to create a .prettierignore file to exclude specific files and folders from Prettier formatting. It uses gitignore syntax.

LANGUAGE: text
CODE:
# Ignore artifacts:
build
coverage

# Ignore all HTML files:
**/*.html

----------------------------------------

TITLE: CLI Plugin Usage with Prettier
DESCRIPTION: Example of loading a Prettier plugin via command line interface

LANGUAGE: bash
CODE:
prettier --write main.foo --plugin=prettier-plugin-foo

----------------------------------------

TITLE: Basic JavaScript Code Formatting Example
DESCRIPTION: Demonstrates how Prettier formats JavaScript function calls by adjusting line breaks based on line length limits.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

----------------------------------------

TITLE: Formatting Markdown with Paragraphs, Code, and Block Quotes
DESCRIPTION: This snippet demonstrates the use of different Markdown elements: a multi-line paragraph, indented code block, and a block quote. It shows how to structure content for improved readability and presentation in Markdown format.

LANGUAGE: markdown
CODE:
1.  A paragraph
    with two lines.

        indented code

    > A block quote.

----------------------------------------

TITLE: Applying Multiple Drop Shadows in CSS
DESCRIPTION: Demonstrates how to apply multiple drop-shadow filters to img elements using HSL colors. Creates a multi-colored shadow effect with offset positioning, and includes a reset rule for consecutive images.

LANGUAGE: css
CODE:
img {
  filter: drop-shadow(2px 2px 0 hsl(300deg 100% 50%)) drop-shadow(
      -2px -2px 0 hsl(210deg 100% 50%) ) drop-shadow(2px 2px 0 hsl(120deg 100% 50%)) drop-shadow(
      -2px -2px 0 hsl(30deg 100% 50%)
    );
}
img + img {
filter: none;
}

----------------------------------------

TITLE: JavaScript Template String Interpolation Formatting
DESCRIPTION: Shows improved handling of linebreaks in template string interpolations to maintain better readability.

LANGUAGE: javascript
CODE:
`this is a long message which contains an interpolation: ${format(data)} <- like this`;

----------------------------------------

TITLE: Formatting JSDoc Comments in JavaScript with Prettier
DESCRIPTION: Illustrates how Prettier correctly aligns JSDoc comments when formatting JavaScript code.

LANGUAGE: javascript
CODE:
function theFunction2(action$, store) {
  /*
   * comments
   */
  return true;
}

----------------------------------------

TITLE: Husky.Net Task Runner Configuration
DESCRIPTION: JSON configuration for Prettier task in Husky.Net task-runner.json

LANGUAGE: json
CODE:
{
  "command": "npx",
  "args": ["prettier", "--ignore-unknown", "--write", "${staged}"],
  "pathMode": "absolute"
}

----------------------------------------

TITLE: Inline Angular Async Tests in JavaScript
DESCRIPTION: Improves formatting of Angular tests using the async testing helper, keeping functions wrapped with this helper in-line.

LANGUAGE: javascript
CODE:
describe("AppComponent", () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [AppComponent]
    }).compileComponents();
  }));
  it("should create the app", async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
  }));
});

----------------------------------------

TITLE: Official Support for Ember/Handlebars Formatting
DESCRIPTION: Prettier 2.3 introduces official support for formatting HTML templates with Handlebars, using Glimmer as the parser.

LANGUAGE: handlebars
CODE:
{{!-- Prettier 2.3 --}}
<div class="foo"></div>
<div bar='"{{expr}}"'></div>
<div baz="\{{ non-expression }}"></div>

----------------------------------------

TITLE: Formatting JSX elements with newlines in string literals in Prettier 1.11
DESCRIPTION: Shows how Prettier now treats JSX elements as multi-line when attribute values contain newlines.

LANGUAGE: jsx
CODE:
<path
  d="M4.765 16.829l3.069-2.946 5.813 5.748
  11.33-11.232 3.006 3.18-14.36 14.080z"
/>;

----------------------------------------

TITLE: Formatting Partial Application Syntax in JavaScript
DESCRIPTION: Demonstrates how Prettier 1.19 handles partial application syntax in JavaScript.

LANGUAGE: javascript
CODE:
const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

// with pipeline
let newScore = player.score |> add(7, ?) |> clamp(0, 100, ?); // shallow stack, the pipe to `clamp` is the same frame as the pipe to `add`.

----------------------------------------

TITLE: Installing coc.nvim with vim-plug in Vim
DESCRIPTION: This snippet shows how to install coc.nvim, a completion framework for Neovim/Vim8, using vim-plug.

LANGUAGE: vim
CODE:
Plug 'neoclide/coc.nvim', {'branch': 'release'}

----------------------------------------

TITLE: Formatting inline class expressions in arrow functions
DESCRIPTION: Demonstrates how Prettier inlines class expressions returned from arrow functions.

LANGUAGE: javascript
CODE:
// Before
jest.mock(
  '../SearchSource',
  () =>
    class {
      findMatchingTests(pattern) {
        return {paths: []};
      }
    },
);

// After
jest.mock(
  '../SearchSource',
  () => class {
    findMatchingTests(pattern) {
      return {paths: []};
    }
  },
);


----------------------------------------

TITLE: Nesting Code Block in Markdown Sublist
DESCRIPTION: This example shows how to nest a code block within a sublist item in Markdown. The sublist is created using a plus sign, and the code block is indented to align with the sublist item.

LANGUAGE: markdown
CODE:
+ ```
  foo


  bar
  ```

----------------------------------------

TITLE: Formatting Text with Chevron Prefix in Prettier
DESCRIPTION: This snippet shows a text block with a chevron prefix, which could be used to test or demonstrate Prettier's formatting behavior for such structures. It includes multiple lines of text with different indentation levels.

LANGUAGE: plaintext
CODE:
> > > foo
bar

----------------------------------------

TITLE: Applying CSS Styles with Environment Variables for Padding
DESCRIPTION: This CSS snippet defines styles for a paragraph element, including width, border, and padding. The padding uses environment variables for safe area insets, with fallback values.

LANGUAGE: css
CODE:
p {
  width: 300px;
  border: 2px solid red;
        padding: env(safe-area-inset-top, 50px) env(safe-area-inset-right, 50px) env(
      safe-area-inset-bottom,
  50px
    ) env(SAFE-AREA-INSET-LEFT, 50px);
}

----------------------------------------

TITLE: Handling dangling comments in return statements
DESCRIPTION: Demonstrates how Prettier handles dangling comments in return statements.

LANGUAGE: javascript
CODE:
// Before
function f() {
  return;
}

// After
function f() {
  return /* a */;
}


----------------------------------------

TITLE: Formatting SequenceExpression Parentheses in JSX
DESCRIPTION: Demonstrates the changes in Prettier's formatting behavior for sequence expressions in return statements and standalone expressions. Shows the progression from original input through stable version to new main version, highlighting the preservation of parentheses.

LANGUAGE: jsx
CODE:
// Input
function a() {
  return ( a, b)
}

(a(), b());

// Prettier stable
function a() {
  return a, b;
}

a(), b();

// Prettier main
function a() {
  return (a, b);
}

(a(), b());

----------------------------------------

TITLE: Formatting GraphQL with Top-Level Interpolations
DESCRIPTION: Demonstrates Prettier's new ability to format GraphQL queries that contain top-level interpolations, which is common when using Apollo Client.

LANGUAGE: javascript
CODE:
gql`
  query User {
    user(id: "Bob") {
      ...UserDetails
    }
  }

  ${UserDetailsFragment}
`

----------------------------------------

TITLE: JSX Empty Elements Handling
DESCRIPTION: Change in handling empty JSX elements to preserve opening and closing tags instead of converting to self-closing format.

LANGUAGE: javascript
CODE:
function Foo() {
  return <div></div>;
}

----------------------------------------

TITLE: Formatting TypeScript conditional types in Prettier 1.11
DESCRIPTION: Shows support for TypeScript 2.8's conditional types in type definitions.

LANGUAGE: typescript
CODE:
export type DeepReadonly<T> =
    T extends any[] ? DeepReadonlyArray<T[number]> :
    T extends object ? DeepReadonlyObject<T> :
    T;

----------------------------------------

TITLE: JavaScript Parameter Newlines Preservation
DESCRIPTION: Shows how Prettier now respects newlines between function parameters to maintain code readability and structure.

LANGUAGE: javascript
CODE:
function foo(
  one,

  two,
  three,
  four,

  five,
  six,
  seven,
  eight,
  nine,
  ten,

  eleven
) {}

----------------------------------------

TITLE: Installing Neoformat with vim-plug in Vim
DESCRIPTION: This snippet shows how to install the Neoformat plugin using vim-plug, a popular plugin manager for Vim.

LANGUAGE: vim
CODE:
Plug 'sbdchd/neoformat'

----------------------------------------

TITLE: Configuring Auto-format on Save with coc-prettier
DESCRIPTION: Shows the coc-settings.json configuration to enable auto-formatting on save for specific file types using coc-prettier.

LANGUAGE: json
CODE:
{
  "coc.preferences.formatOnSaveFiletypes": ["css", "markdown"]
}

----------------------------------------

TITLE: Formatting exact object Flow type annotations
DESCRIPTION: Shows how Prettier correctly formats exact object Flow type annotations.

LANGUAGE: typescript
CODE:
// Before
type Props = {};

// After
type Props = {||};


----------------------------------------

TITLE: Combining HTML and Markdown for Deleted and Italicized Text
DESCRIPTION: This snippet demonstrates how to use HTML <del> tags to create strikethrough text, while also using Markdown asterisks for italicization within the deleted text.

LANGUAGE: markdown
CODE:
<del>*foo*</del>

----------------------------------------

TITLE: Combining HTML and Markdown Formatting
DESCRIPTION: This snippet shows an HTML <i> tag with a class attribute, containing Markdown-style bold text. It demonstrates how HTML and Markdown can be mixed in certain contexts.

LANGUAGE: HTML
CODE:
<i class="foo">
*bar*
</i>

----------------------------------------

TITLE: Creating Plaid Pattern using CSS Gradients
DESCRIPTION: Defines a '.plaid-gradient' class that creates a complex plaid pattern using four overlapping repeating linear gradients. The pattern combines horizontal, vertical, and diagonal stripes using semi-transparent orange, yellow and brown colors. Includes both verbose and shorthand gradient syntax.

LANGUAGE: css
CODE:
.plaid-gradient {
  background: repeating-linear-gradient(
      90deg,
      transparent,
      transparent 50px,
      rgb(255 127 0 / 25%) 50px,
      rgb(255 127 0 / 25%) 56px,
      transparent 56px,
      transparent 63px,
      rgb(255 127 0 / 25%) 63px,
      rgb(255 127 0 / 25%) 69px,
transparent 69px,
      transparent 116px,
      rgb(255 206 0 / 25%) 116px,
      rgb(255 206 0 / 25%) 166px
    ), repeating-linear-gradient(
      0deg,
                transparent,
      transparent       50px,
      rgb(255 127 0 / 25%) 50px,
            rgb(255 127 0 / 25%) 56px,
      transparent 56px,
      transparent 63px,
      rgb(255 127 0 / 25%) 63px,
      rgb(255 127 0 / 25%) 69px,
      transparent 69px,
      transparent 116px,
      rgb(255 206 0 / 25%) 116px,
      rgb(255 206 0 / 25%) 166px
    ), repeating-linear-gradient(
      -45deg,
      transparent,
      transparent 5px,
      rgb(143 77 63 / 25%) 5px,
      rgb(143 77 63 / 25%) 10px
    ), repeating-linear-gradient(45deg, transparent, transparent 5px, rgb(
          143 77 63 / 25%
        ) 5px, rgb(143 77 63 / 25%) 10px);

  background: repeating-linear-gradient(
      90deg,
      transparent 0 50px,
      rgb(255 127 0 / 25%) 50px 56px,
      transparent 56px 63px,
      rgb(255 127 0 / 25%) 63px 69px,
      transparent 69px 116px,
      rgb(255 206 0 / 25%) 116px 166px
    ), repeating-linear-gradient(
      0deg,
      transparent 0 50px,
      rgb(255 127 0 / 25%) 50px 56px,
          transparent 56px 63px,
      rgb(255 127 0 / 25%) 63px 69px,
      transparent 69px 116px,
      rgb(255 206 0 / 25%) 116px 166px
    ), repeating-linear-gradient(
      -45deg,
      transparent 0 5px,
      rgb(143 77 63 / 25%) 5px 10px
    ), repeating-linear-gradient(45deg, transparent 0 5px, rgb(143 77 63 / 25%) 5px
        10px);
}

----------------------------------------

TITLE: TypeScript Conditional Type Formatting
DESCRIPTION: Demonstrates improved layout for conditional type aliases in TypeScript.

LANGUAGE: typescript
CODE:
type FallbackFlags<F extends Flags | undefined> =
  Equals<NonNullableFlag<F>["flags"], {}> extends true
    ? Dict<any>
    : NonNullableFlag<F>["flags"];

----------------------------------------

TITLE: Formatting Flow shorthand function types
DESCRIPTION: Shows how Prettier removes unnecessary parentheses from Flow shorthand function types.

LANGUAGE: typescript
CODE:
// Before
type T = { method: (a) => void };

// After
type T = { method: a => void };


----------------------------------------

TITLE: Documenting Code Formatting Changes in JSX
DESCRIPTION: Example showing the formatting differences for nullish coalescing operator (??) and logical OR (||) between Prettier stable and main versions. Demonstrates how to structure before/after comparisons in PR documentation.

LANGUAGE: jsx
CODE:
// Input
(foo ?? baz) || baz;

// Prettier stable
foo ?? baz || baz;

// Prettier main
(foo ?? baz) || baz;

----------------------------------------

TITLE: TypeScript Readonly Operator Support
DESCRIPTION: Demonstrates support for TypeScript's readonly operator in type declarations.

LANGUAGE: typescript
CODE:
declare const array: readonly number[];

----------------------------------------

TITLE: Formatting Import Statements in JavaScript
DESCRIPTION: Shows multiple import statements with different spacing and formatting patterns that need to be standardized. Includes named and default imports from various modules.

LANGUAGE: javascript
CODE:
import D from 'd'
import {A,B,C}    from "hello-world"
import {AAAAAAAAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBBBBBBB, CCCCCCCCCCCCCCCCCCCCCCC}   from  'xyz';

----------------------------------------

TITLE: Formatting JSX Fragments in React
DESCRIPTION: Shows how Prettier now recognizes and formats the new JSX fragment syntax introduced in React 16.2.

LANGUAGE: jsx
CODE:
function MyComponent() {
  return (
    <>
      <Children1 />
      <Children2 />
      <Children3 />
    </>
  );
}

----------------------------------------

TITLE: Shared Prettier Configuration in package.json
DESCRIPTION: Shows how to reference a shared Prettier configuration package in package.json

LANGUAGE: json
CODE:
{
  "name": "my-cool-library",
  "version": "9000.0.1",
  "prettier": "@company/prettier-config"
}

----------------------------------------

TITLE: Jest Data Driven Tests Example
DESCRIPTION: Example showing formatting of Jest 23's new data driven test tables.

LANGUAGE: JavaScript
CODE:
describe.each`
  a            | b        | expected
  ${11}        | ${1}     | ${222}
  ${1 - 1}     | ${2 + 2} | ${3333}
  ${2 + 1 + 2} | ${1111}  | ${3}
`("$a + $b", ({ a, b, expected }) => {
  test(`returns ${expected}`, () => {
    expect(a + b).toBe(expected);
  });

  test(`returned value not be greater than ${expected}`, () => {
    expect(a + b).not.toBeGreaterThan(expected);
  });

  test(`returned value not be less than ${expected}`, () => {
    expect(a + b).not.toBeLessThan(expected);
  });
});

----------------------------------------

TITLE: Formatting single optional arrow function parameters in TypeScript
DESCRIPTION: Shows how Prettier handles single optional parameters in arrow functions in TypeScript.

LANGUAGE: typescript
CODE:
// Before
a = b? => c;

// After
a = (b?) => c;


----------------------------------------

TITLE: Formatting HTML Div Element with Multiple Attributes
DESCRIPTION: Example of HTML markup showing a div element with ID and class attributes formatted across multiple lines. The element has an ID of 'foo' and a class of 'bar'.

LANGUAGE: html
CODE:
<div id="foo"
  class="bar">
</div>

----------------------------------------

TITLE: Defining a Ruby Function with Constant Return Value
DESCRIPTION: This snippet defines a Ruby function named 'foo' that takes one parameter 'x' and always returns the integer 3. The function doesn't use the input parameter in its logic.

LANGUAGE: ruby
CODE:
def foo(x)
  return 3
end

----------------------------------------

TITLE: JSX Fragment with Component
DESCRIPTION: Example using a Fragment shorthand syntax containing a World component with extra whitespace.

LANGUAGE: jsx
CODE:
<>
    test   <World        />   test
</>       123

----------------------------------------

TITLE: Formatting inline functions in JavaScript
DESCRIPTION: Shows how Prettier formats inline functions as first arguments.

LANGUAGE: javascript
CODE:
// Before
setTimeout(
  function() {
    thing();
  },
  500
);

// After
setTimeout(function() {
  thing();
}, 500);


----------------------------------------

TITLE: Comparing Prettier Versions for Adjacent Markdown Syntax in Blockquotes
DESCRIPTION: This code snippet shows the input markdown, the output from Prettier's stable version, and the output from Prettier's main branch. It demonstrates how Prettier handles adjacent inline elements like code blocks, italics, and links within blockquotes, addressing the issue of unwanted greater-than signs being inserted.

LANGUAGE: markdown
CODE:
<!-- Input -->
> `x`
> `y`

> _x_
> _y_

> [foo](http://foo)
> [bar](http://bar)

> `this` behaves
> `correctly`

<!-- Prettier stable -->
> `x` > `y`

> _x_ > _y_

> [foo](http://foo) > [bar](http://bar)

> `this` behaves `correctly`

<!-- Prettier main -->
> `x` `y`

> _x_ _y_

> [foo](http://foo) [bar](http://bar)

> `this` behaves `correctly`

----------------------------------------

TITLE: HTML Table Indentation Example
DESCRIPTION: An HTML table structure showing formatting issues when nested within numbered lists. The table uses Bootstrap classes and demonstrates how Prettier's formatting behavior affects nested content.

LANGUAGE: html
CODE:
<table class="table table-striped">
<tr>
<th>Test</th>
<th>Table</th>
</tr>
<tbody>
    <tr>
    <td>will</td>  
    <td>be</td>
    </tr>
    <tr>  
    <td>pushed</td>  
    <td>When</td>
    </tr>  
    <tr>  
    <td>Format on</td>  
    <td>Save</td>  
    </tr>
</tbody>
</table>

----------------------------------------

TITLE: Adding Prettier Badge to Markdown
DESCRIPTION: Shows how to add a Prettier badge to a project's README or other Markdown files, indicating that the project uses Prettier for code formatting.

LANGUAGE: markdown
CODE:
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)

----------------------------------------

TITLE: Formatting GraphQL Queries in Relay Components
DESCRIPTION: Example of GraphQL query formatting within a React Relay QueryRenderer component using the graphql template literal.

LANGUAGE: jsx
CODE:
ReactDOM.render(
  <QueryRenderer
    query={graphql`
      query appQuery {
        viewer {
          ...TodoApp_viewer
        }
      }
    `}
    // ...
  />,
  mountNode
);

----------------------------------------

TITLE: Formatting Nested Ternaries in JavaScript
DESCRIPTION: Improves readability of nested ternary operators by making all nested ternaries multi-line if any of them become multiline.

LANGUAGE: javascript
CODE:
const platformString =
  Platform.OS == "ios"
    ? "iOS"
    : Platform.OS == "android"
      ? "Android"
      : "unknown";

----------------------------------------

TITLE: Preserving Case in CSS Module Exports
DESCRIPTION: Maintains case sensitivity for variable names exported from CSS modules.

LANGUAGE: scss
CODE:
:export {
  myColor: red;
}

----------------------------------------

TITLE: Auto-formatting on multiple events with Neoformat in Vim
DESCRIPTION: This autocmd runs Neoformat on JavaScript files for multiple events: before writing, after text changes, and when leaving Insert mode.

LANGUAGE: vim
CODE:
autocmd BufWritePre,TextChanged,InsertLeave *.js Neoformat

----------------------------------------

TITLE: Handling comments in import declarations
DESCRIPTION: Demonstrates how Prettier handles comments in import declarations.

LANGUAGE: javascript
CODE:
// Before
import {
  FN1,
  FN2,
  // FN3,
  FN4
} from // FN4,
// FN5
"./module";

// After
import {
  FN1,
  FN2,
  // FN3,
  FN4,
  // FN4,
  // FN5
} from './module';


----------------------------------------

TITLE: Formatting Nested Ternary Expressions in JavaScript
DESCRIPTION: Shows how Prettier flattens else-branches for nested ternary expressions to improve readability.

LANGUAGE: javascript
CODE:
const example1 =
  someValue === "a"
    ? "hello world, branch a"
    : someValue === "b"
    ? "hello world, branch a && b"
    : someValue === "c"
    ? "hello world, branch a && b && c"
    : someValue === "d"
    ? "hello world, branch a && b && c && d"
    : null;

----------------------------------------

TITLE: Creating Nested Markdown List
DESCRIPTION: This snippet shows how to create a nested list structure in Markdown. It includes three levels of indentation using different characters for each level.

LANGUAGE: markdown
CODE:
 - foo
   - bar
	 - baz

----------------------------------------

TITLE: Formatting Text Alignment
DESCRIPTION: Shows two lines of text with different indentation patterns that may need formatting alignment.

LANGUAGE: plaintext
CODE:
    foo
bar

----------------------------------------

TITLE: Formatting Single-line JSX Comment in React
DESCRIPTION: This snippet demonstrates a single-line JSX comment. Prettier maintains the comment's compact structure within the curly braces.

LANGUAGE: JSX
CODE:
{/* Some more. */}

----------------------------------------

TITLE: Flow Namespace Declaration Support
DESCRIPTION: Added support for printing Flow namespace declarations with nested declarations.

LANGUAGE: jsx
CODE:
declare namespace foo {
  declare var bar: string;
}

----------------------------------------

TITLE: Formatting arrow functions in JavaScript
DESCRIPTION: Shows improved formatting for arrow functions that return function calls.

LANGUAGE: javascript
CODE:
// Before
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter));

// After
const testResults = results.testResults.map(testResult =>
  formatResult(testResult, formatter, reporter)
);


----------------------------------------

TITLE: Styled Components Template Literals Formatting
DESCRIPTION: Demonstrates improved formatting support for parenthesized tagged template literals commonly used with styled-components.

LANGUAGE: js
CODE:
const StyledComponent =
  /** @type {import('styled-components').ThemedStyledFunction<'div',null,{overlap: boolean}>} */
  (styled.div)`
    position: fixed;
    color: red;
  `;

----------------------------------------

TITLE: Conditional CSS Imports with Feature Queries
DESCRIPTION: Demonstrates three different @import rules that load stylesheets conditionally based on browser support for grid, flex, and modern CSS selectors. Each import also includes a media query for max-width.

LANGUAGE: css
CODE:
@import url("gridy.css")    supports(       display: grid) screen and (max-width: 400px);
@import url("flexy.css") supports(not (display: grid    ) and           (display: flex)) screen and (max-width: 400px);
@import url(
"whatever.css") supports((selector(h2 > p)) and    (font-tech(color-COLRv1)));

----------------------------------------

TITLE: Finding Files with fast-glob
DESCRIPTION: Example of using fast-glob to find files matching specific patterns while ignoring certain directories.

LANGUAGE: javascript
CODE:
import fastGlob from "fast-glob";

const files = await fastGlob("packages/**/*.{js,cjs,mjs}", {
  ignore: ["**/.git", "**/.sl", "**/.svn", "**/.hg", "**/node_modules"],
  absolute: true,
  dot: true,
  followSymbolicLinks: false,
  onlyFiles: true,
  unique: true,
});

----------------------------------------

TITLE: Formatting JSX Text Content in JavaScript
DESCRIPTION: Demonstrates improved formatting of text content inside JSX elements, wrapping long lines and preserving whitespace.

LANGUAGE: jsx
CODE:
<div>
  Please state your <b>name</b> and <b>occupation</b> for the board of
  directors.
</div>

----------------------------------------

TITLE: Formatting GraphQL Type Descriptions
DESCRIPTION: Prettier now supports string descriptions for GraphQL types, properties, and enums.

LANGUAGE: graphql
CODE:
"""
Type description
"""
type Foo {
  "some description"
  someProperty: String!

  """
  some really
  long description
  """
  someOtherProperty: [String!]!
}

----------------------------------------

TITLE: Markdown Range Ignore Comments
DESCRIPTION: Adds support for range ignore comments in Markdown to exclude sections from formatting.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore-start -->
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
| [<img src="https://avatars1.githubusercontent.com/u/12345?v=4" width="100px;"/><br /><sub><b>Alice</b></sub>](https://github.com/example-alice)<br /> [💻](https://github.com/my/repo/commits?author=example-alice "Code") [📖](https://github.com/my/repo/commits?author=example-alice "Documentation") [⚠️](https://github.com/my/repo/commits?author=example-alice "Tests") | [<img src="https://avatars3.githubusercontent.com/u/12346?v=4" width="100px;"/><br /><sub><b>Bob</b></sub>](https://github.com/example-bob)<br /> [🐛](https://github.com/my/repo/issues?q=author%3Aexample-bob "Bug reports") | [<img src="https://avatars3.githubusercontent.com/u/123457?v=4" width="100px;"/><br /><sub><b>Jeffrey</b></sub>](https://github.com/example-jeffrey)<br /> [🐛](https://github.com/my/repo/issues?q=author%3Aexample-jeffrey "Bug reports") | [<img src="https://avatars2.githubusercontent.com/u/123458?v=4" width="100px;"/><br /><sub><b>Sarah</b></sub>](https://github.com/example-sarah)<br /> [🐛](https://github.com/my/repo/issues?q=author%3Aexample-sarah "Bug reports") |
| :---: | :---: | :---: | :---: |
<!-- ALL-CONTRIBUTORS-LIST:END -->
<!-- prettier-ignore-end -->

----------------------------------------

TITLE: Handling comments in Flow union types
DESCRIPTION: Demonstrates how Prettier handles comments in Flow union types.

LANGUAGE: typescript
CODE:
// Before
type UploadState<E, EM, D> =
  // The upload hasn't begun yet
  | A
  | // The upload timed out
  B
  | // Failed somewhere on the line
  C;

// After
type UploadState<E, EM, D> =
  // The upload hasn't begun yet
  | A
  // The upload timed out
  | B
  // Failed somewhere on the line
  | C;


----------------------------------------

TITLE: Defining Prettier Configuration in YAML
DESCRIPTION: This YAML snippet defines a configuration option for Prettier. It sets the 'foo' property to the value 'bar'.

LANGUAGE: yaml
CODE:
- foo

  bar

----------------------------------------

TITLE: Formatting Markdown Headers with Prettier
DESCRIPTION: This snippet shows two Markdown headers with different levels and inconsistent spacing. Prettier would standardize the formatting of these headers, removing excess whitespace and ensuring consistent syntax.

LANGUAGE: markdown
CODE:
## foo ##
  ###   bar    ###

----------------------------------------

TITLE: Formatting Multi-line JSX Comment in React
DESCRIPTION: This snippet shows a multi-line JSX comment block. Prettier preserves the comment's structure and indentation within the curly braces.

LANGUAGE: JSX
CODE:
{ /* Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. */ }

----------------------------------------

TITLE: Rendering JSX with Comments
DESCRIPTION: This snippet shows a JSX structure with nested components, interpolated expressions, and comments.

LANGUAGE: jsx
CODE:
<Foo bg='red'>
      <Bar    >hi    </Bar>
       {  hello       }
       {     /* another comment */}
</Foo>

----------------------------------------

TITLE: Enhanced JSON Parsing and Formatting
DESCRIPTION: Prettier 2.3 implements stricter JSON parsing and improves error messages for invalid JSON syntax.

LANGUAGE: json
CODE:
// Prettier 2.3
SyntaxError: BinaryExpression is not allowed in JSON. (1:8)
> 1 | [1, 2, 1 + 2]
    |        ^

----------------------------------------

TITLE: JSX Component with Props
DESCRIPTION: Example of a Heading component with a 'hi' prop and text content.

LANGUAGE: jsx
CODE:
<Heading hi='there'>Hello, world!
</Heading>

----------------------------------------

TITLE: Benchmarking Prettier CLI Performance
DESCRIPTION: Comparison of execution times for the current and new Prettier CLI with various options, demonstrating significant performance improvements.

LANGUAGE: sh
CODE:
prettier packages --check # 29s
prettier packages --check --cache # 20s

prettier@next packages --check --no-cache --no-parallel # 7.3s
prettier@next packages --check --no-cache # 5.5s
prettier@next packages --check # 1.3s

----------------------------------------

TITLE: Handling 'prettier-ignore' comments in comment blocks
DESCRIPTION: Shows how Prettier supports 'prettier-ignore' directives in comment blocks.

LANGUAGE: javascript
CODE:
// Before
module.exports = {
  // Some comment
  // prettier-ignore
  m: matrix(1, 0, 0, 0, 1, 0, 0, 0, 1)
};

// After
module.exports = {
  // Some comment
  // prettier-ignore
  m: matrix(
    1, 0, 0,
    0, 1, 0,
    0, 0, 1
  )
};


----------------------------------------

TITLE: Preserving Flow Type Annotation Comments in JavaScript
DESCRIPTION: Prettier now correctly detects and preserves Flow type annotation comments (/*: ... */) when formatting JavaScript code.

LANGUAGE: javascript
CODE:
let foo /*: string */ = "a";

----------------------------------------

TITLE: Formatting Object Destructuring Patterns in JavaScript
DESCRIPTION: Improves formatting of nested object and array destructuring patterns, ensuring consistent multi-line formatting.

LANGUAGE: javascript
CODE:
const {
  name: { first, last },
  organisation: {
    address: { street: orgStreetAddress, postcode: orgPostcode }
  }
} = user;

----------------------------------------

TITLE: Defining Prettier Plugin Languages
DESCRIPTION: Example of declaring supported languages in a Prettier plugin

LANGUAGE: javascript
CODE:
export const languages = [
  {
    name: "InterpretedDanceScript",
    parsers: ["dance-parse"]
  }
];

----------------------------------------

TITLE: Formatting JSX style components
DESCRIPTION: Demonstrates improved formatting for JSX style components with template literals.

LANGUAGE: jsx
CODE:
// Before
<style>
  {
    `
  color: red;
`
  }
</style>

// After
<style>{`
  color: red;
`}</style>


----------------------------------------

TITLE: Formatting Level 2 Heading in Markdown
DESCRIPTION: Demonstrates markdown syntax for creating a level 2 heading using hash symbols. Shows how to format the heading 'foo' using two hash symbols.

LANGUAGE: markdown
CODE:
## foo

----------------------------------------

TITLE: Formatting Tab-Separated Values in Plaintext
DESCRIPTION: A single line of text containing three words (foo, baz, and bim) separated by varying numbers of tab characters, demonstrating spacing and alignment patterns.

LANGUAGE: plaintext
CODE:
  	foo	baz		bim

----------------------------------------

TITLE: Formatting Markdown Link with Special Characters using Prettier
DESCRIPTION: This snippet shows how to format a Markdown link that contains spaces in the URI. The angle brackets are used to enclose the URI, allowing Prettier to correctly handle the spaces without breaking the link syntax.

LANGUAGE: markdown
CODE:
[link](</my uri>)

----------------------------------------

TITLE: Flow BigInt Enum Support
DESCRIPTION: Added support for Flow enums with BigInt values.

LANGUAGE: jsx
CODE:
enum E {
  A = 0n,
  B = 1n,
}

----------------------------------------

TITLE: Markdown Table with JSX
DESCRIPTION: Example of a markdown table containing JSX elements in cells.

LANGUAGE: jsx
CODE:
| Column 1 | Column 2 |
|---|---|
| Text | <Hello>Text</Hello> |

----------------------------------------

TITLE: Improved TypeScript Formatting
DESCRIPTION: Prettier 2.3 enhances TypeScript formatting, including support for trailing commas in type parameters and better handling of non-null assertions.

LANGUAGE: typescript
CODE:
// Prettier 2.3 with --trailling-comma=all
export class BaseSingleLevelProfileTargeting<
  T extends ValidSingleLevelProfileNode,
> {
  // ...
}

const myFunction2 = (key: string): number =>
  ({
    a: 42,
    b: 42,
  }[key]!);

----------------------------------------

TITLE: Using Prettier with AMD
DESCRIPTION: This snippet demonstrates how to use Prettier with AMD (Asynchronous Module Definition), loading the standalone version and a GraphQL plugin to format code.

LANGUAGE: javascript
CODE:
define([
  "https://unpkg.com/prettier@%PRETTIER_VERSION%/standalone.js",
  "https://unpkg.com/prettier@%PRETTIER_VERSION%/plugins/graphql.js",
], async (prettier, ...plugins) => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins,
  });
});

----------------------------------------

TITLE: Comparing Prettier with Biome
DESCRIPTION: Benchmark comparison between the optimized Prettier CLI and Biome, a Rust-based formatter known for its performance.

LANGUAGE: sh
CODE:
biome format packages
# Diagnostics not shown: 25938.
# Compared 28703 file(s) in 869ms
# Skipped 4770 file(s)

prettier@next packages --check --no-cache # 15s

----------------------------------------

TITLE: Formatting TypeScript 4.7 Optional Variance Annotations
DESCRIPTION: Support for TypeScript 4.7 optional variance annotations for type parameters.

LANGUAGE: typescript
CODE:
interface Animal {
  animalStuff: any;
}
interface Dog extends Animal {
  dogStuff: any;
}
type Getter<out T> = () => T;
type Setter<in T> = (value: T) => void;

----------------------------------------

TITLE: Formatting Type Assertions in TypeScript Decorators
DESCRIPTION: Demonstrates how Prettier now correctly prints parentheses around type assertions inside decorators in TypeScript.

LANGUAGE: typescript
CODE:
@(bind as ClassDecorator)
class Decorated {}

----------------------------------------

TITLE: Implementing Markdown Headings
DESCRIPTION: Shows the syntax for all six heading levels in Markdown, from H1 to H6, using the hash symbol.

LANGUAGE: markdown
CODE:
# foo
## foo
### foo
#### foo
##### foo
###### foo

----------------------------------------

TITLE: Handling Comments in Arrow Functions in JavaScript
DESCRIPTION: Fixes an edge case where Prettier was moving comments inside arrow functions, potentially breaking tools like Webpack.

LANGUAGE: javascript
CODE:
const API = {
  loader: () => import('./test' /* webpackChunkName: "test" */),
};

----------------------------------------

TITLE: Markdown Link URL Pattern Examples
DESCRIPTION: Examples of Markdown link syntax with URLs containing special characters in different formats. Shows standard links, image links, and reference links with combinations of arrows, parentheses, and percent-encoded characters.

LANGUAGE: markdown
CODE:
[link](https://www.google.fr/()foo->bar)
[link](https://www.google.fr/foo->bar)
[link](https://www.google.fr/foo-%3Ebar)
[link](https://www.google.fr/foo-<bar)
[link](https://www.google.fr/foo-%3Cbar)
![link](https://www.google.fr/()foo->bar)
![link](https://www.google.fr/foo->bar)
![link](https://www.google.fr/foo-%3Ebar)
![link](https://www.google.fr/foo-<bar)
![link](https://www.google.fr/foo-%3Cbar)
[link]: https://www.google.fr/()foo->bar
[link]: https://www.google.fr/foo->bar
[link]: https://www.google.fr/foo-%3Ebar
[link]: https://www.google.fr/foo-<bar
[link]: https://www.google.fr/foo-%3Cbar

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: Demonstrates two methods of creating bold text in Markdown using underscores and asterisks. Shows equivalent ways to achieve the same bold formatting effect.

LANGUAGE: markdown
CODE:
__123__
**456**

----------------------------------------

TITLE: Formatting Markdown Text with Indentation
DESCRIPTION: Shows the structure of a markdown document with a paragraph, indented code block, and block quote formatting

LANGUAGE: markdown
CODE:
1.  A paragraph
    with two lines.

        indented code

    > A block quote.

----------------------------------------

TITLE: Multiple Identical JSX Components
DESCRIPTION: Example of repeated Hello components containing World components with identical structure.

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>
<Hello>
    test   <World />   test
</Hello>123

----------------------------------------

TITLE: Formatting Handlebars Templates
DESCRIPTION: Demonstrates improved handling of whitespace and line breaks in Handlebars templates.

LANGUAGE: handlebars
CODE:
<SomeComponent />{{name}}

Some sentence with {{dynamic}} expressions.



sometimes{{nogaps}}areimportant
<Hello />
{{name}} is your name

----------------------------------------

TITLE: Hash-style Headers in Markdown
DESCRIPTION: Shows the syntax for creating headers of different levels using hash symbols

LANGUAGE: markdown
CODE:
# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6

----------------------------------------

TITLE: Installing ALE Plugin for Vim
DESCRIPTION: Shows how to install the ALE (Asynchronous Lint Engine) plugin using vim-plug package manager. ALE provides linting and formatting capabilities, including Prettier support.

LANGUAGE: vim
CODE:
Plug 'dense-analysis/ale'

----------------------------------------

TITLE: Formatting HTML Entities
DESCRIPTION: Shows Prettier 1.19's support for HTML entities.

LANGUAGE: html
CODE:
<p>Hi&excl;</p>

----------------------------------------

TITLE: Using Pipeline and Nullish Coalescing Operators in JavaScript
DESCRIPTION: Demonstrates Prettier's support for new experimental JavaScript operators: pipeline and nullish coalescing.

LANGUAGE: javascript
CODE:
let result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const foo = object.foo ?? "default";

----------------------------------------

TITLE: Creating Nested Markdown List
DESCRIPTION: This snippet shows how to create a nested list structure in Markdown. It includes two main list items, each with two sub-items.

LANGUAGE: markdown
CODE:
- a
  - b
  - c

- d
  - e
  - f

----------------------------------------

TITLE: Formatting curried functions in JavaScript
DESCRIPTION: Shows how Prettier handles curried functions, commonly used in Redux.

LANGUAGE: javascript
CODE:
// Before
const mw = store =>
  next =>
    action => {
      return next(action)
    };

// After
const mw = store => next => action => {
  return next(action)
};


----------------------------------------

TITLE: Formatting Comments with Decorators and Class Properties in JavaScript
DESCRIPTION: Demonstrates how Prettier now correctly handles comments between decorators and class properties.

LANGUAGE: javascript
CODE:
class Something {
  @decorator
  // comment
  static property = 1;
}

----------------------------------------

TITLE: Logging 'Hello World' to Console in JavaScript
DESCRIPTION: This snippet demonstrates how to use console.log() to output a simple string message to the console in JavaScript. It's a common starting point for learning JavaScript or testing basic functionality.

LANGUAGE: javascript
CODE:
console.log("hello world!");

----------------------------------------

TITLE: Long Line Text Formatting Example
DESCRIPTION: Example of text containing extremely long hyphenated words and backslash line continuation to test text formatting and wrapping behavior.

LANGUAGE: text
CODE:
a  
 very-very-very-very-very-very-very-very-very-very-long-word very-very-very-very-very-very-very-very-very-very-long-word very-very-very-very-very-very-very-very-very-very-long-word

\
word very-very-very-very-very-very-very-very-very-very-long-word very-very-very-very-very-very-very-very-very-very-long-word

----------------------------------------

TITLE: Formatting Markdown Text with Indentation
DESCRIPTION: Example showing how to format a code block using indentation in markdown. The code is indented with spaces to create a code block separate from regular text.

LANGUAGE: markdown
CODE:
indented code

----------------------------------------

TITLE: Markdown Footnote Formatting
DESCRIPTION: Improved formatting of markdown footnote definitions by adding newlines between them.

LANGUAGE: markdown
CODE:
[^a]: Footnote A

[^b]: Footnote B

----------------------------------------

TITLE: Simple Constants Export
DESCRIPTION: Basic export of two constant variables with minimal formatting.

LANGUAGE: javascript
CODE:
export const a = 1;
export const b = 1;

----------------------------------------

TITLE: Formatting Angular i18n Attributes
DESCRIPTION: Shows how Prettier 1.19 formats Angular i18n attributes.

LANGUAGE: html
CODE:
<h1
  i18n="
    This is a very long internationalization description text, exceeding the
    configured print width
  "
>
  Hello!
</h1>

----------------------------------------

TITLE: Ordered Lists in Markdown
DESCRIPTION: Shows how to create numbered lists in Markdown

LANGUAGE: markdown
CODE:
1. Buy flour and salt
1. Mix together with water
1. Bake

----------------------------------------

TITLE: Formatting Flow type spread in TypeScript
DESCRIPTION: Shows how Prettier handles Flow type spread syntax in TypeScript.

LANGUAGE: typescript
CODE:
type TypeB = { ...TypeA };


----------------------------------------

TITLE: Formatting Declare Modifier on Class Fields in TypeScript
DESCRIPTION: Shows how Prettier 1.19 formats the declare modifier on class fields in TypeScript.

LANGUAGE: typescript
CODE:
class B {
  p: number;
}
class C extends B {
  declare p: 256 | 1000;
}

----------------------------------------

TITLE: TypeScript Never Type Fix
DESCRIPTION: Example of TypeScript code using the 'never' type that previously caused parsing errors but is now supported.

LANGUAGE: ts
CODE:
Observable.empty<never>();

----------------------------------------

TITLE: Formatting Nested Markdown Lists
DESCRIPTION: Shows a markdown list with nested items and spacing between elements. The example includes a parent list item 'foo' with a nested child item 'bar' and a separate 'baz' line with additional spacing.

LANGUAGE: markdown
CODE:
* foo
  * bar

  baz

----------------------------------------

TITLE: Formatting Arrow Function Params with Flow Comments in JavaScript
DESCRIPTION: Prettier now correctly handles comments after arrow function parameters when using Flow type annotations.

LANGUAGE: javascript
CODE:
const run = (cmd /*: string */) /*: Promise<void> */ => {};

----------------------------------------

TITLE: Formatting arrow function return types in TypeScript
DESCRIPTION: Illustrates how Prettier adds parentheses around arrow function return types in TypeScript.

LANGUAGE: typescript
CODE:
// Before
const f = (): string => string => {};

// After
const f = (): (string => string) => {};


----------------------------------------

TITLE: Markdown Block Quote with Link
DESCRIPTION: Demonstrates blockquote containing a multi-line link element with prose wrapping configuration

LANGUAGE: markdown
CODE:
> This is a quote with a link [across multuple lines
> which should just work](). So make sure there is no > if we set
> proseWrap to `never`

----------------------------------------

TITLE: Markdown Block Quote with Code Elements
DESCRIPTION: Demonstrates nested blockquotes with inline code formatting and emphasis

LANGUAGE: markdown
CODE:
> [!NOTE]
> `DOOM`

> _b_
>> `A`
>> `B`

> *a*
>> # foo
>> `a` > `b`

----------------------------------------

TITLE: Creating Basic List Items in Markdown
DESCRIPTION: Demonstrates two groups of unordered list items separated by blank lines. Each group uses hyphen bullet points to create list items.

LANGUAGE: markdown
CODE:
- foo
- bar


- baz
- bim

----------------------------------------

TITLE: Formatting Long Markdown Line with Brackets in Prettier
DESCRIPTION: This snippet demonstrates a very long line of markdown text that includes additional brackets at the end. It's designed to test Prettier's handling of line wrapping and bracket placement in markdown files.

LANGUAGE: markdown
CODE:
A very long line of markdown with additional brackets as it wraps over [[the end like this]]].

----------------------------------------

TITLE: Handling TypeScript As Expressions
DESCRIPTION: Fixes formatting of TypeScript 'as' expressions inside update expressions, preserving necessary parentheses.

LANGUAGE: typescript
CODE:
(obj.value as any)++

----------------------------------------

TITLE: Basic YAML Key-Value Configuration
DESCRIPTION: A simple YAML configuration that defines a key 'hello' with value 'world'. The configuration is wrapped in YAML document markers (---) to explicitly define the document boundaries.

LANGUAGE: yaml
CODE:
---
hello: world
---

----------------------------------------

TITLE: Formatting arrow functions with ternary operators
DESCRIPTION: Illustrates how Prettier adds parentheses to arrow functions with ternary operators.

LANGUAGE: javascript
CODE:
// Before
var x = a => 1 ? 2 : 3;

// After
var x = a => (1 ? 2 : 3);


----------------------------------------

TITLE: Formatting Code with Parse Errors in JavaScript
DESCRIPTION: Demonstrates Prettier 1.19's ability to format code even with certain parse errors.

LANGUAGE: javascript
CODE:
let a = {
  __proto__: x,
  __proto__: y
};
let a = 2;

----------------------------------------

TITLE: JSX Arrow Function Expression Formatting
DESCRIPTION: Improved JSX formatting for arrow functions with parentheses added around multi-line JSX

LANGUAGE: jsx
CODE:
const Component = props => (
  <div>
    Hello {props.name}!
  </div>
);

----------------------------------------

TITLE: Creating Nested Markdown List
DESCRIPTION: Demonstrates markdown list syntax with simple nested items using hyphens for bullet points. Shows parent item 'a' with nested child item 'b'.

LANGUAGE: markdown
CODE:
- a
  - b

----------------------------------------

TITLE: Fixed TypeScript Type Annotations
DESCRIPTION: Fixed formatting of complex types in arrow function return type annotations

LANGUAGE: typescript
CODE:
export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributes"] & undefined
> => {};

----------------------------------------

TITLE: Inlining Do Expressions in JSX
DESCRIPTION: Prettier now inlines do expressions inside JSX, reducing unnecessary indentation.

LANGUAGE: jsx
CODE:
{do {
 // ...
}}

----------------------------------------

TITLE: Markdown Bullet List
DESCRIPTION: Unordered list example with three items using hyphen bullets

LANGUAGE: markdown
CODE:
- foo
- foo
- bar

----------------------------------------

TITLE: Creating Reference-Style Image Link in Markdown
DESCRIPTION: Shows how to create a reference-style image link in Markdown using square bracket syntax. The format uses two sets of square brackets where the first contains alt text and the second contains the reference identifier.

LANGUAGE: markdown
CODE:
![hello][world]

----------------------------------------

TITLE: Creating Reference Links in Markdown with HTML Entities
DESCRIPTION: Creates a reference-style Markdown link that uses HTML entities (föö) in both the URL and title attributes. The link reference is defined separately from its usage.

LANGUAGE: markdown
CODE:
[foo]

[foo]: /f&ouml;&ouml; "f&ouml;&ouml;"

----------------------------------------

TITLE: TypeScript Tagged Template Literal Parentheses
DESCRIPTION: Added missing parentheses in tagged template literals for better readability and correctness.

LANGUAGE: jsx
CODE:
(String?.raw!)``;\n(String?.raw)!``;

----------------------------------------

TITLE: Formatting Text with Indentation
DESCRIPTION: Shows a two-line text block with the second line indented by one space.

LANGUAGE: plaintext
CODE:
foo 
 baz

----------------------------------------

TITLE: Supporting TypeScript unique symbol type in Prettier 1.11
DESCRIPTION: Demonstrates support for TypeScript 2.7's unique symbol type in interface definitions.

LANGUAGE: typescript
CODE:
interface SymbolConstructor {
  readonly iterator: unique symbol;
}

----------------------------------------

TITLE: Creating a Simple Markdown Table
DESCRIPTION: This snippet shows how to create a basic two-column table in Markdown. It includes headers and two rows of data.

LANGUAGE: markdown
CODE:
Foo | Bar
--- | ---
X   |
Y   |

----------------------------------------

TITLE: JSX Ternary Expression Formatting Example
DESCRIPTION: Demonstrates the new JSX ternary expression formatting style using parentheses to demarcate JSX content within conditional expressions.

LANGUAGE: jsx
CODE:
const DinnerOptions = ({ willEatMeat, willEatEggs, willEatVegetables }) => (
  <div>
    <div>Let's get some dinner...</div>
    {willEatMeat ? (
      <FullMenu />
    ) : willEatEggs ? (
      <VegetarianMenu />
    ) : willEatVegetables ? (
      <VeganMenu />
    ) : (
      <BackupMenu />
    )}
  </div>
);

----------------------------------------

TITLE: JSON File Formatting
DESCRIPTION: Example of JSON file formatting showing package.json structure and indentation.

LANGUAGE: json
CODE:
{
  "name": "prettier",
  "version": "1.5.0",
  "description": "Prettier is an opinionated JavaScript formatter",
  "bin": {
    "prettier": "./bin/prettier.js"
  }
}

----------------------------------------

TITLE: Simple Code Block
DESCRIPTION: Basic code block within a markdown list structure showing nested content

LANGUAGE: plaintext
CODE:
c

----------------------------------------

TITLE: Formatting SCSS at-rules in Prettier 1.11
DESCRIPTION: Demonstrates improved formatting of SCSS at-rules like @include with multiple parameters.

LANGUAGE: scss
CODE:
.selector {
  @include absolute(
    $top: $long-variable-name,
    $right: $long-variable-name,
    $left: auto,
    $bottom: auto
  );
}

----------------------------------------

TITLE: Formatting Markdown Link with Text and URL
DESCRIPTION: Creates a numbered markdown link with display text and URL reference. The link uses square brackets for link text and parentheses for the URL.

LANGUAGE: markdown
CODE:
[1][Test Text](http://example.com)

----------------------------------------

TITLE: Markdown Link Reference Syntax
DESCRIPTION: Shows how to create a link reference with the AsyncGeneratorFunction text as both the link text and reference identifier.

LANGUAGE: markdown
CODE:
[   See   `AsyncGeneratorFunction`   ][   See   `AsyncGeneratorFunction`   ]

----------------------------------------

TITLE: Applying Bold Formatting in Markdown
DESCRIPTION: This snippet shows how to apply bold formatting to a portion of text in Markdown. It uses double underscores to enclose the text to be bolded.

LANGUAGE: markdown
CODE:
foo-__(bar)__

----------------------------------------

TITLE: Creating HTML Anchor Tag with Incomplete Attributes
DESCRIPTION: This snippet shows an HTML anchor tag with an incomplete href attribute. The attribute name contains an invalid character (*) which would cause parsing errors.

LANGUAGE: HTML
CODE:
<a h*#ref="hi">

----------------------------------------

TITLE: Preserving PostCSS mixin syntax in Prettier 1.11
DESCRIPTION: Shows how Prettier now respects PostCSS mixin syntax with variable interpolation.

LANGUAGE: scss
CODE:
$theme: blue;

a {
  @mixin $(theme)-colors;
}

----------------------------------------

TITLE: Basic JavaScript Console Output
DESCRIPTION: Simple JavaScript code block showing console output with extra spacing that will be formatted by Prettier.

LANGUAGE: javascript
CODE:
console.log    (    "hello world"    );

----------------------------------------

TITLE: JavaScript Function Call Formatting - Long Arguments
DESCRIPTION: Shows original unformatted code with long function arguments exceeding line length.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

----------------------------------------

TITLE: Implementing Group Command
DESCRIPTION: Type definition for the group command which marks content that should try to fit on one line.

LANGUAGE: typescript
CODE:
type GroupOptions = {
  shouldBreak?: boolean;
  id?: symbol;
};
declare function group(doc: Doc, options?: GroupOptions): Doc;

----------------------------------------

TITLE: Indenting Conditions Inside Negated Parentheses in JavaScript
DESCRIPTION: Demonstrates proper indentation of conditions inside negated parentheses expressions.

LANGUAGE: javascript
CODE:
const anyTestFailures = !(
  aggregatedResults.numFailedTests === 0 &&
  aggregatedResults.numRuntimeErrorTestSuites === 0
);

----------------------------------------

TITLE: Formatting Complex Markdown Link in Prettier
DESCRIPTION: This snippet shows a markdown link with escaped characters, demonstrating how Prettier handles complex formatting cases. It includes parentheses and a colon within the link structure.

LANGUAGE: markdown
CODE:
[link](foo\)\:)

----------------------------------------

TITLE: HTML Element Formatting Changes
DESCRIPTION: Demonstrates how Prettier 1.16 respects surrounding linebreaks for HTML elements to better handle if-else blocks and lists.

LANGUAGE: html
CODE:
<div class="list">
  <div class="item">Jan</div>
</div>
<a v-if="i !== -1" href="#" @click.prevent="select(i)">
  {{ i }}
</a>
<span v-else>
  <slot name="ellipsis">&hellip;</slot>
</span>

----------------------------------------

TITLE: Formatting GraphQL Interface Inheritance
DESCRIPTION: Adds support for new interface inheritance syntax in GraphQL using '&' instead of ','.

LANGUAGE: graphql
CODE:
type Foo implements Bar & Baz { field: Type }

----------------------------------------

TITLE: YAML Front Matter with Empty Space
DESCRIPTION: Example of YAML front matter block containing only whitespace, demonstrating how spaces are handled in front matter delimiters.

LANGUAGE: yaml
CODE:
---
           v spaces
---

----------------------------------------

TITLE: Applying Text Emphasis in Markdown
DESCRIPTION: This snippet demonstrates how to apply emphasis or bold formatting to text in Markdown using asterisks. The text 'foo bar' is wrapped in asterisks, which typically results in bold or emphasized text depending on the Markdown interpreter.

LANGUAGE: markdown
CODE:
*foo  
bar*

----------------------------------------

TITLE: Applying Markdown Underscore Formatting
DESCRIPTION: This snippet shows how to apply italic and bold formatting in Markdown using underscores. It demonstrates the use of single and double underscores for different emphasis levels.

LANGUAGE: markdown
CODE:
__foo_ bar_

----------------------------------------

TITLE: CSS Pseudo-class Function Indentation
DESCRIPTION: Fixed extra indentation in pseudo-class functions like :where(), :is(), and :not.

LANGUAGE: css
CODE:
:where(input:not([type=\"button\"], [type=\"reset\"], [type=\"submit\"]), textarea, select) {\n  /* CSS here */\n}

----------------------------------------

TITLE: Creating Markdown Image Link with Title
DESCRIPTION: This snippet shows how to create a Markdown link that includes an image. It specifies the image's alternative text, URL, and a title that appears on hover.

LANGUAGE: markdown
CODE:
![foo](/url "title")

----------------------------------------

TITLE: Preserving New Lines in GraphQL Queries
DESCRIPTION: Shows how Prettier now respects intentional line breaks inside GraphQL queries, limiting them to one blank line.

LANGUAGE: graphql
CODE:
query User {
  name

  age
}

----------------------------------------

TITLE: Creating Bulleted List in Markdown
DESCRIPTION: A sequence of bullet points created using asterisk (*) notation in Markdown. Each item is separated by blank lines.

LANGUAGE: markdown
CODE:
* hello1

* hello2


* hello3

* hello4


* hello5

* hello6

----------------------------------------

TITLE: Handling Inline Comments in SCSS Lists and Maps
DESCRIPTION: Improves formatting of inline comments within SCSS lists and maps to prevent code breaking.

LANGUAGE: scss
CODE:
$my-list: "foo",
  // Foo
    "bar"; // Bar

$my-map: (
  "foo": 1,
  // Foo
    "bar": 2,
  // Bar
);

----------------------------------------

TITLE: Running Format Tests with Custom Options
DESCRIPTION: Example showing how to run format tests with specific parser and trailing comma configuration.

LANGUAGE: javascript
CODE:
runFormatTest(import.meta, ["babel"], { trailingComma: "es5" });

----------------------------------------

TITLE: Handling comment sorting in object destructuring
DESCRIPTION: Demonstrates how Prettier handles comment sorting in object destructuring assignments.

LANGUAGE: javascript
CODE:
// Before
let {
  // comment
  a = b
} = c;

// After
let {
  a = b // comment
} = c;


----------------------------------------

TITLE: Formatting Complex Markdown Link with Prettier
DESCRIPTION: This snippet shows a Markdown link with nested parentheses in the URL. It demonstrates how Prettier handles formatting for complex link structures, ensuring readability while maintaining the link's functionality.

LANGUAGE: markdown
CODE:
[link](<foo(and(bar))>)

----------------------------------------

TITLE: Ruby Code Example - Method Call Option
DESCRIPTION: Example demonstrating the conversion of map block syntax to to_proc shorthand syntax when rubyToProc option is enabled

LANGUAGE: ruby
CODE:
array.map { |elem| elem.to_s } # Original syntax
array.map(&:to_s)      # Converted with rubyToProc enabled

----------------------------------------

TITLE: Using XML CDATA Section
DESCRIPTION: Shows how to wrap content in a CDATA section to include special characters (>, &, <) without XML entity encoding. The CDATA section allows these characters to be included literally without breaking XML syntax.

LANGUAGE: xml
CODE:
foo <![CDATA[>&<]]>

----------------------------------------

TITLE: Basic XML Tag with Namespace
DESCRIPTION: Demonstrates a basic XML element with a namespace prefix 'm' using standard XML syntax.

LANGUAGE: xml
CODE:
<m:abc>

----------------------------------------

TITLE: Demonstrating Prettier Formatting with Special Characters
DESCRIPTION: This snippet shows a simple line of code that may be used to test or demonstrate Prettier's formatting behavior, particularly with respect to asterisks or other special characters.

LANGUAGE: plaintext
CODE:
foo ***

----------------------------------------

TITLE: Formatting Markdown Link Reference Definition with Special Characters
DESCRIPTION: This snippet shows a Markdown link reference definition with square brackets and an exclamation mark. It demonstrates how Prettier formats the reference and its corresponding definition, maintaining the special characters and proper spacing.

LANGUAGE: markdown
CODE:
[bar][foo\!]

[foo!]: /url

----------------------------------------

TITLE: Formatting Arrow Functions with Parens Option in JavaScript
DESCRIPTION: Demonstrates the new --arrow-parens option for controlling when parens are added around arrow function arguments.

LANGUAGE: javascript
CODE:
// no parens
foo => {};

// parens
(foo: Number) => {};

// parens
({ foo }) => {}

// parens
(foo = 5) => {}

----------------------------------------

TITLE: Unordered List Variable Declaration 2
DESCRIPTION: Second example of JavaScript variable declarations with Prettier formatting in an unordered list context.

LANGUAGE: javascript
CODE:
const a = 1;


const b = 2;

----------------------------------------

TITLE: Formatting Markdown with TOML Front Matter
DESCRIPTION: Shows Prettier's new support for TOML front matter in Markdown files, which is used by some static site generators.

LANGUAGE: markdown
CODE:
+++
date: '2017-10-10T22:49:47.369Z'
title: 'My Post Title'
categories: ['foo', 'bar']
+++

This is the markdown body of my post.

----------------------------------------

TITLE: Build Playground Files
DESCRIPTION: Builds only the files needed for the website/playground functionality.

LANGUAGE: sh
CODE:
yarn build --playground

----------------------------------------

TITLE: Handling leading comments in returned SequenceExpressions
DESCRIPTION: Demonstrates how Prettier handles leading comments inside returned SequenceExpressions.

LANGUAGE: javascript
CODE:
// Before
function sequenceExpressionInside() {
  return;
  // Reason for a
  a, b;
}

// After
function sequenceExpressionInside() {
  return ( // Reason for a
    a, b
  );
}


----------------------------------------

TITLE: Creating Multi-line Markdown Link
DESCRIPTION: This snippet shows how to create a markdown link where the URL spans multiple lines. The link text is 'link' and the URL is 'foo bar'.

LANGUAGE: markdown
CODE:
[link](foo
bar)

----------------------------------------

TITLE: Configuring Neoformat to Use Local Prettier Installation
DESCRIPTION: Sets an option to make Neoformat use a project-local version of Prettier instead of a global installation.

LANGUAGE: vim
CODE:
let g:neoformat_try_node_exe = 1

----------------------------------------

TITLE: Formatting Speculation Rules API in HTML
DESCRIPTION: Support for formatting Speculation Rules API in HTML script tags.

LANGUAGE: html
CODE:
<script type="speculationrules">
  {
    "prerender": [{ "source": "list", "urls": ["https://a.test/foo"] }]
  }
</script>

----------------------------------------

TITLE: Handling comments after object keys in JavaScript
DESCRIPTION: Shows how Prettier handles comments placed after object keys.

LANGUAGE: javascript
CODE:
// Before
let a = {
   "a": () => 1
};

// After
let a = {
   "a" /* comment */: () => 1
};


----------------------------------------

TITLE: Using Link Reference in Markdown
DESCRIPTION: This snippet shows how to use a previously defined link reference in Markdown. It creates a link with the text 'Baz' using the 'Foo bar' reference.

LANGUAGE: markdown
CODE:
[Baz][Foo bar]

----------------------------------------

TITLE: Formatting Markdown Link with Asterisk in Text
DESCRIPTION: This snippet shows a Markdown link where the link text contains an asterisk. The asterisk is not properly closed, which may be intentional to test parsing behavior.

LANGUAGE: markdown
CODE:
*[foo*](/uri)

----------------------------------------

TITLE: Applying Bold and Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to apply both bold and italic formatting to text in Markdown. It uses asterisks for emphasis, with double asterisks for bold and single asterisks for italic.

LANGUAGE: markdown
CODE:
**foo***

----------------------------------------

TITLE: Outputting 'Hello World' in Plain Text
DESCRIPTION: This snippet demonstrates the most basic form of output in programming. It simply contains the text 'hello world' which would be displayed when run or printed.

LANGUAGE: plaintext
CODE:
hello world

----------------------------------------

TITLE: Formatting Reference-Style Markdown Link
DESCRIPTION: This snippet demonstrates how to create a markdown link using a reference-style definition. It shows a link with text 'bar' and a separate reference definition.

LANGUAGE: markdown
CODE:
[link \[bar][ref]

[ref]: /uri

----------------------------------------

TITLE: JSX Conditional Expression Formatting
DESCRIPTION: Enhanced formatting of conditional expressions within JSX using parentheses

LANGUAGE: jsx
CODE:
<div>
  {props.isVisible ? (
    <BaseForm
      url="/auth/google"
      method="GET"
    />
  ) : (
    <Placeholder />
  )}
</div>

----------------------------------------

TITLE: Demonstrating Markdown Link References
DESCRIPTION: This snippet shows various ways to use Markdown link references, including full references, shorthand references, and comparison links for version control.

LANGUAGE: markdown
CODE:
- see[Link to Foo][master-LinkToFoo]

[master-LinkToFoo]: http://foo.com

Bla bla [PascalCase][] bla.

[PascalCase]: ./PascalCase.md

## [Unreleased]
…
[Unreleased]: https://github.com/username/project/compare/v1.0.0...HEAD

----------------------------------------

TITLE: Formatting Vue Style Tags with CSS Lang
DESCRIPTION: Demonstrates how Prettier 1.19 formats Vue style tags with lang="css".

LANGUAGE: html
CODE:
<style lang="css">
  a {
    color: #f00;
  }
</style>

----------------------------------------

TITLE: Configuring Prettier Blog Post Front Matter in YAML
DESCRIPTION: Example YAML front matter for Prettier blog posts. Specifies the title and author(s) for the blog post.

LANGUAGE: yaml
CODE:
title: Blog Post Title
authors: author declared in `blog/authors.yml`

----------------------------------------

TITLE: Handling CRLF in JSX text
DESCRIPTION: Demonstrates how Prettier correctly handles CRLF line endings in JSX text.

LANGUAGE: jsx
CODE:
// Before
<div>
  {" "}
  Text{" "}
</div>;

// After
<div>
  Text
</div>;


----------------------------------------

TITLE: Creating Basic Markdown Link
DESCRIPTION: Demonstrates the standard Markdown syntax for creating a link where 'link' is the visible text and '/uri' is the target URL.

LANGUAGE: markdown
CODE:
[link](/uri)

----------------------------------------

TITLE: Listing External Markdown Links
DESCRIPTION: This snippet demonstrates how to list multiple external links in Markdown format at the end of a document. Each link is defined with a reference name and its corresponding URL.

LANGUAGE: markdown
CODE:
[darktable]: https://www.darktable.org/
[js;dr]: https://indieweb.org/js;dr
[LinuxFest Northwest]: https://www.linuxfestnorthwest.org/
[OpenStreetMap]: https://www.openstreetmap.org/about
[SeaGL]: https://seagl.org/
[uBlock Origin]: https://github.com/gorhill/uBlock

----------------------------------------

TITLE: Formatting Markdown Link with Nested Quotes in Title
DESCRIPTION: This snippet demonstrates how to create a Markdown link with a title attribute that contains nested quotes. It shows the proper syntax for escaping quotes within the title to ensure correct parsing.

LANGUAGE: Markdown
CODE:
[link](/url "title \"and\" title")

----------------------------------------

TITLE: Markdown Emphasis Formatting
DESCRIPTION: Demonstrates markdown emphasis formatting using multiple underscores for bold and emphasis effects.

LANGUAGE: markdown
CODE:
___foo__

----------------------------------------

TITLE: Formatting Underscore-Wrapped Identifier in Prettier
DESCRIPTION: This snippet shows a custom formatting directive or test case for Prettier. It consists of an identifier 'foo' wrapped in underscores, which may be used to demonstrate or test specific formatting behavior in Prettier.

LANGUAGE: plaintext
CODE:
____foo_

----------------------------------------

TITLE: Formatting Markdown Link with Emphasis
DESCRIPTION: Creates a Markdown link with partial text emphasis using asterisks. The link text 'foo *bar' is followed by the URL 'baz*'.

LANGUAGE: markdown
CODE:
[foo *bar](baz*)

----------------------------------------

TITLE: Ternary Expression Parentheses Enhancement
DESCRIPTION: Adds parentheses around nested ternary expressions to improve readability and clarify operator precedence

LANGUAGE: javascript
CODE:
cond1 ? (cond2 ? elem2_if : elem2_else) : elem1_else

----------------------------------------

TITLE: JSX with Variable Declaration
DESCRIPTION: Example showing JSX syntax combined with a variable declaration, demonstrating how JSX can be used within JavaScript expressions.

LANGUAGE: jsx
CODE:
const a = 1;
<div>foo</div>;

----------------------------------------

TITLE: Applying prettier-ignore to Markdown List Item
DESCRIPTION: This snippet shows how to use the prettier-ignore comment to prevent Prettier from formatting a specific list item in Markdown. The ignored item is a long paragraph split across multiple lines.

LANGUAGE: markdown
CODE:
- 123
- 456
- 789
  <!-- prettier-ignore -->
  - This is a long long
    long long long long
    long long paragraph.

----------------------------------------

TITLE: Shell Command for Package Installation
DESCRIPTION: This shell command installs a package globally using npm.

LANGUAGE: shell
CODE:
npm i -g foo

----------------------------------------

TITLE: Formatting nested member expressions in JavaScript
DESCRIPTION: Shows how Prettier handles line breaks in deeply nested member expressions.

LANGUAGE: javascript
CODE:
// Before
expect(
  findDOMNode(component.instance()).getElementsByClassName(styles.inner)[0].style.paddingRight
).toBe("1000px");

// After
expect(
  findDOMNode(component.instance()).getElementsByClassName(styles.inner)[0]
    .style.paddingRight
).toBe("1000px");


----------------------------------------

TITLE: Creating HTML Anchor with Escaped URL
DESCRIPTION: This snippet demonstrates how to create an HTML anchor tag with a URL that includes escaped underscores. The underscores are encoded as '__' in the query parameter.

LANGUAGE: HTML
CODE:
__a<http://foo.bar/?q=__>

----------------------------------------

TITLE: JavaScript Template Literals Formatting
DESCRIPTION: Improvement in template literal formatting to prevent breaking simple expressions across multiple lines when they exceed print width.

LANGUAGE: javascript
CODE:
console.log(chalk.white(`Covered Lines below threshold: ${coverageSettings.lines}%. Actual: ${coverageSummary.total.lines.pct}%`))

----------------------------------------

TITLE: Defining Markdown Link References
DESCRIPTION: This snippet shows various ways to define link references in Markdown, including simple URLs, URLs with titles of different lengths, and long URLs. It demonstrates the flexibility of Markdown in handling different link formats.

LANGUAGE: markdown
CODE:
[just-url]: https://example.com
[url-with-short-title]: https://example.com "title"
[url-with-long-title]: https://example.com "a long, long title. It's really really long. Here have words."
[empty-title]: https://example.com "" 

[long]: https://example.com/a-long-url/another-segment/yet-another-segment/a-really-long-file-name.php.aspx 
[long-with-title]: https://example.com/a-long-url/another-segment/yet-another-segment/a-really-long-file-name.php.aspx "look a title!"
[long-with-empty-title]: https://example.com/a-long-url/another-segment/yet-another-segment/a-really-long-file-name.php.aspx ""

----------------------------------------

TITLE: Formatting Pattern with Underscores and Backslash
DESCRIPTION: Shows a text pattern that combines regular characters with underscores and a backslash escape character. This pattern might be used for testing code formatting or escape sequence handling.

LANGUAGE: text
CODE:
foo __\___

----------------------------------------

TITLE: Formatting Text with Asterisks
DESCRIPTION: Demonstrates text emphasis using multiple asterisk characters

LANGUAGE: text
CODE:
foo *****

----------------------------------------

TITLE: Formatting Text with Underscores
DESCRIPTION: A text string containing a mix of underscore characters, likely used for testing code formatting behavior.

LANGUAGE: text
CODE:
_foo____

----------------------------------------

TITLE: Logging 'Hello World' to Console in JavaScript
DESCRIPTION: This snippet demonstrates how to use console.log() to output a string to the console in JavaScript. It's a common first step in learning JavaScript or testing that a JavaScript environment is working correctly.

LANGUAGE: javascript
CODE:
console.log("hello world");

----------------------------------------

TITLE: Combining Italic and Bold Formatting in Markdown
DESCRIPTION: This snippet shows how to combine italic and bold formatting in Markdown. It uses underscores for italic and asterisks for bold, nested together.

LANGUAGE: markdown
CODE:
_*foo*_

----------------------------------------

TITLE: Handling comments in switch statements
DESCRIPTION: Shows how Prettier handles comments in switch statements to avoid additional empty lines.

LANGUAGE: javascript
CODE:
// Before
switch (foo) {
  case "bar":
    doThing()


  // no default
}

// After
switch (foo) {
  case "bar":
    doThing()

  // no default
}


----------------------------------------

TITLE: Formatting Multiplication Expression in JavaScript
DESCRIPTION: A JavaScript expression that multiplies three numbers (1, 2, and 3) using asterisk operators. This represents a basic arithmetic operation that evaluates to 6.

LANGUAGE: javascript
CODE:
1*2*3

----------------------------------------

TITLE: Generate Bundle Reports
DESCRIPTION: Generates analysis reports of the esbuild bundle in various formats including HTML, text, and console output.

LANGUAGE: sh
CODE:
yarn build --report=all

LANGUAGE: sh
CODE:
yarn build --report=stdout --report=text --report=html

----------------------------------------

TITLE: Nested JSX Components with Whitespace
DESCRIPTION: Example showing Hello component containing a World component with surrounding text and whitespace.

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>123

----------------------------------------

TITLE: Formatting Flow generics
DESCRIPTION: Demonstrates how Prettier handles line breaks in Flow generic type annotations.

LANGUAGE: typescript
CODE:
// Before
type _ReactElement<DefaultProps, Props, Config: $Diff<Props, DefaultProps>, C: $React.Component<DefaultProps, Props, any>> = $React.Element<Config>;

// After
type _ReactElement<
  DefaultProps,
  Props,
  Config: $Diff<Props, DefaultProps>,
  C: $React.Component<DefaultProps, Props, any>
> = $React.Element<Config>;


----------------------------------------

TITLE: Demonstrating Incorrect Markdown Emphasis
DESCRIPTION: This snippet shows an example of incorrectly formatted Markdown emphasis. The asterisks are not properly paired, which would result in unintended formatting when rendered.

LANGUAGE: markdown
CODE:
*foo *bar baz*

----------------------------------------

TITLE: List Component Properties Table in Markdown
DESCRIPTION: Markdown table documenting List component properties including bordered, footer, grid, header, itemLayout, rowKey, loading, loadMore, locale, pagination, and split options. Each property includes type information and default values.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| -------- | ----------- | ---- | ------- |
| bordered | Toggles rendering of the border around the list | boolean | false |
| footer | List footer renderer | string\|ReactNode | - |
| grid | The grid type of list. You can set grid to something like {gutter: 16, column: 4} | object | - |
| header | List header renderer | string\|ReactNode | - |
| itemLayout | The layout of list, default is `horizontal`, If a vertical list is desired, set the itemLayout property to `vertical` | string | - |
| rowKey | Item's unique key, could be a string or function that returns a string | string\|Function(record):string | `key` |
| loading | Shows a loading indicator while the contents of the list are being fetched | boolean\|[object](https://ant.design/components/spin-cn/#API) ([more](https://github.com/ant-design/ant-design/issues/8659)) | false |
| loadMore | Shows a load more content | string\|ReactNode | - |
| locale | i18n text including empty text | object | emptyText: 'No Data' <br> |
| pagination | Pagination [config](https://ant.design/components/pagination/), hide it by setting it to false | boolean \| object | false |
| split | Toggles rendering of the split under the list item | boolean | true |

----------------------------------------

TITLE: Formatting Text with Asterisks
DESCRIPTION: Example showing text formatting using an asterisk pattern where one asterisk is escaped between two regular asterisks. Used for testing string formatting behavior.

LANGUAGE: text
CODE:
foo *\**

----------------------------------------

TITLE: Applying Bold and Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to apply both bold and italic formatting to text in Markdown. It uses asterisks for emphasis, with a single asterisk for italic and double asterisks for bold.

LANGUAGE: Markdown
CODE:
***foo* bar**

----------------------------------------

TITLE: Applying Bold Formatting in Markdown
DESCRIPTION: This snippet shows how to make text bold in Markdown using underscores. The word 'foo' is surrounded by four underscores on each side, which will render it as bold text when processed by a Markdown parser.

LANGUAGE: markdown
CODE:
____foo____

----------------------------------------

TITLE: Markdown Emphasis Text Formatting
DESCRIPTION: Shows markdown formatting with underscores and asterisks to create emphasized text. Uses double underscores for strong emphasis around a single asterisk.

LANGUAGE: markdown
CODE:
foo __*__

----------------------------------------

TITLE: Handling JSX string escaping
DESCRIPTION: Demonstrates how Prettier handles escaped characters in JSX strings.

LANGUAGE: jsx
CODE:
// Before
<a href="https://foo.bar?q1=foo&amp;q2=bar" />

// After
<a href="https://foo.bar?q1=foo&q2=bar" />


----------------------------------------

TITLE: ESLint Jest Plugin Rules Documentation Markdown
DESCRIPTION: Markdown documentation listing the core ESLint rules for Jest, including rules for managing test states and validation. Each rule includes a link to detailed documentation and a brief description of its purpose.

LANGUAGE: markdown
CODE:
## Supported Rules

- [no-disabled-tests](/packages/eslint-plugin-jest/docs/rules/no-disabled-tests.md) - disallow disabled tests.
- [no-focused-tests](/packages/eslint-plugin-jest/docs/rules/no-focused-tests.md) - disallow focused tests.
- [no-identical-title](/packages/eslint-plugin-jest/docs/rules/no-identical-title.md) - disallow identical titles.
- [valid-expect](/packages/eslint-plugin-jest/docs/rules/valid-expect.md) - ensure expect is called correctly.

----------------------------------------

TITLE: HTML Table Structure with Prettier Indentation Issue
DESCRIPTION: An HTML table structure that exhibits formatting issues when nested within numbered lists using Prettier. The table includes headers and multiple rows within a striped table layout.

LANGUAGE: HTML
CODE:
<table class="table table-striped">
<tr>
<th>Test</th>
<th>Table</th>
</tr>
<tbody>
    <tr>
    <td>will</td>
    <td>be</td>
    </tr>
    <tr>
    <td>pushed</td>
    <td>When</td>
    </tr>
    <tr>
    <td>Format on</td>
    <td>Save</td>
    </tr>
</tbody>
</table>

----------------------------------------

TITLE: ES-style Prettier Ignore Comment
DESCRIPTION: Demonstrates using ES/JSX comment syntax to ignore Prettier formatting for a JavaScript code block.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

----------------------------------------

TITLE: Formatting binary operators with parentheses in JavaScript
DESCRIPTION: Shows how Prettier adds parentheses to improve readability of binary operations.

LANGUAGE: javascript
CODE:
// Before
var sizeIndex = index - 1 >>> level & MASK;

// After
var sizeIndex = ((index - 1) >>> level) & MASK;


----------------------------------------

TITLE: Applying Nested Emphasis in Markdown
DESCRIPTION: This snippet demonstrates how to nest different types of emphasis in Markdown. It uses asterisks for italic formatting and double underscores for bold formatting, with some text receiving both treatments.

LANGUAGE: markdown
CODE:
*foo __bar *baz bim__ bam*

----------------------------------------

TITLE: Prettier Pragma Comment Example
DESCRIPTION: Example showing the special pragma comments that enable Prettier formatting when require-pragma is enabled

LANGUAGE: javascript
CODE:
/**
 * @prettier
 */


LANGUAGE: javascript
CODE:
/**
 * @format
 */


----------------------------------------

TITLE: Demonstrating Ordered List Formatting in Markdown
DESCRIPTION: This snippet shows various examples of ordered list formatting in Markdown, including single-item lists, multi-item lists, nested lists, and mixed formatting. It showcases different numbering styles and indentation patterns.

LANGUAGE: markdown
CODE:
1. 123

---

11. 123

---

111. 123

---

1111. 123

---

11111. 123

---

1.  123

---

1.  123
2.  123

---

11. 123
1. 123

---

11. 123
1.  123

---

1. 123
2. 123
   1.   123
   2.   123

---

1.  123
2.  123
    1.   123
    2.   123

---

- 123
- 123
  1.  123
  2.  123

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: This snippet demonstrates how to format text as bold in Markdown using double asterisks before and after the text to be bolded.

LANGUAGE: markdown
CODE:
**foo\nbar**

----------------------------------------

TITLE: Formatting Bold Text with Link in Markdown
DESCRIPTION: Shows how to combine bold text formatting with a link in Markdown syntax. The text 'foo bar' is made bold using double asterisks while 'bar' is also turned into a link to '/url'.

LANGUAGE: markdown
CODE:
**foo [bar](/url)**

----------------------------------------

TITLE: Markdown Bold Text Formatting
DESCRIPTION: Shows markdown syntax for making text bold using multiple asterisks around text. This example uses 6 asterisks on each side of the word 'foo'.

LANGUAGE: markdown
CODE:
******foo******

----------------------------------------

TITLE: Configuring Grid Auto Columns in CSS
DESCRIPTION: This CSS snippet demonstrates multiple ways to set the grid-auto-columns property. It includes examples using content-based sizing, fixed pixel values, percentages, fractions, and complex minmax() functions with various units.

LANGUAGE: css
CODE:
/* multiple track-size values */
grid-auto-columns: min-content max-content auto;
grid-auto-columns: 100px 150px 390px;
grid-auto-columns: 10% 33.3%;
grid-auto-columns: 0.5fr 3fr 1fr;
grid-auto-columns: minmax(100px, auto)    minmax(max-content, 2fr) minmax(20%, 80vmax);
grid-auto-columns: 100px minmax(100px, auto)        10% 0.5fr fit-content(400px);

----------------------------------------

TITLE: Markdown Bold-Italic Syntax
DESCRIPTION: Shows a text snippet with combined bold and italic markdown formatting syntax using asterisks.

LANGUAGE: markdown
CODE:
foo **_**

----------------------------------------

TITLE: Markdown Link Reference Definition
DESCRIPTION: Shows a reference-style link implementation with a title and an empty link array. The first line references 'foo', the second shows an empty link, and the third defines the 'foo' reference with a URL and title.

LANGUAGE: markdown
CODE:
[foo] 
[]

[foo]: /url "title"

----------------------------------------

TITLE: Formatting String with Double Underscores
DESCRIPTION: Pattern that wraps the string 'foo' with double underscores on each side. This appears to be a text formatting convention, possibly for emphasis or styling.

LANGUAGE: text
CODE:
a__"foo"__

----------------------------------------

TITLE: Creating Nested Markdown List
DESCRIPTION: This snippet demonstrates how to create a nested list structure in markdown. It shows different levels of indentation to create a hierarchical list.

LANGUAGE: markdown
CODE:
- first line
    - second line indented
- third line
    - fourth line
        - fifth line

----------------------------------------

TITLE: Defining React Component with Prettier Ignore (HTML Comments)
DESCRIPTION: This snippet demonstrates the same React component wrapped in Prettier ignore comments using HTML-style comments. This approach might be used in certain file types or contexts where JSX comments are not appropriate.

LANGUAGE: HTML
CODE:
<!-- prettier-ignore-start -->
export const Test = () => {
   return <p>test</p>;
 };
   <Test />
<!-- prettier-ignore-end -->

----------------------------------------

TITLE: Demonstrating --no-semi option in JavaScript
DESCRIPTION: Shows how the --no-semi option removes semicolons from the end of statements.

LANGUAGE: javascript
CODE:
// Before
console.log();
[1, 2, 3].map(x => x + 1);

// After
console.log()
;[1, 2, 3].map(x => x + 1)


----------------------------------------

TITLE: Formatting Text with Bold and Italic in Markdown
DESCRIPTION: Shows how to combine bold and italic text formatting in Markdown using asterisks and underscores. The text is both bold (outer asterisks) and italic (underscores).

LANGUAGE: markdown
CODE:
*_foo_*

----------------------------------------

TITLE: Creating Nested Lists with Hyphen Bullets in Markdown
DESCRIPTION: Demonstrates a three-level nested list structure using hyphen (-) bullet points with tab indentation for nesting levels.

LANGUAGE: markdown
CODE:
- Top level list item 1
- Top level list item 2
	- Nested List item 1
	- Nested List item 2
		- Sub-Nested List item 1
		- Sub-Nested List item 2

----------------------------------------

TITLE: Creating Header and List in Markdown
DESCRIPTION: This snippet shows how to create a level 1 header and two unordered list items using Markdown syntax. The header is denoted by '#' and list items are prefixed with '>'.

LANGUAGE: markdown
CODE:
# Foo
> bar
> baz

----------------------------------------

TITLE: Invalid Markdown Emphasis Example
DESCRIPTION: Demonstrates an invalid markdown emphasis syntax where asterisks are used incorrectly for strong emphasis. The error indicates that the emphasis markup is not properly formatted.

LANGUAGE: markdown
CODE:
**** is not an empty strong emphasis

----------------------------------------

TITLE: Testing Non-Empty Emphasis in Markdown with Prettier
DESCRIPTION: This snippet represents a test case for Prettier's markdown formatting. It shows a scenario where two asterisks are present but do not form a valid empty emphasis, which may be used to verify Prettier's handling of such cases.

LANGUAGE: markdown
CODE:
** is not an empty emphasis

----------------------------------------

TITLE: Formatting Italic Text with Link in Markdown
DESCRIPTION: This snippet demonstrates how to combine italic text formatting with a link in Markdown. It shows a partial italic formatting that includes a linked text.

LANGUAGE: Markdown
CODE:
_foo [bar_](/url)

----------------------------------------

TITLE: Formatting Text with Markdown Emphasis
DESCRIPTION: Shows how to combine italic and bold text formatting in markdown. The text uses single asterisks for italics and double asterisks for bold formatting.

LANGUAGE: markdown
CODE:
*foo**bar**baz*

----------------------------------------

TITLE: Formatting Markdown Links with Various Title Delimiters
DESCRIPTION: This snippet shows three different ways to format links in Markdown, using double quotes, single quotes, and parentheses to enclose the link title. Each method is valid in Markdown syntax.

LANGUAGE: markdown
CODE:
[link](/url "title")
[link](/url 'title')
[link](/url (title))

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: This snippet shows how to create bold text in Markdown using double asterisks. The text 'foo bar' is enclosed in double asterisks to make it appear bold when rendered.

LANGUAGE: markdown
CODE:
**foo bar**

----------------------------------------

TITLE: Right-Aligned Compact Table
DESCRIPTION: A right-aligned markdown table demonstrating compact formatting with prose wrap disabled and long header content.

LANGUAGE: markdown
CODE:
|    Should print as compact table when --proseWrap=never|a long long long long long long long long long long long long long head|
|---|--:|

----------------------------------------

TITLE: Creating Basic Markdown Table with Emojis
DESCRIPTION: Demonstrates how to create a simple 3x3 Markdown table with header row, separator row, and emoji content. The table uses pipe characters for column separation and hyphens for header delimitation.

LANGUAGE: markdown
CODE:
| abc | def | ghi |
| --- | --- | --- |
| 👍👍👍 | 👍👍👍 | 👍👍👍 |

----------------------------------------

TITLE: Formatting Line Continuation in JavaScript with Prettier
DESCRIPTION: This snippet shows how Prettier formats code with a line continuation using a backslash. Prettier typically removes unnecessary line continuations and adjusts indentation for readability.

LANGUAGE: JavaScript
CODE:
foo\
     bar

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: This snippet demonstrates how to create bold text in Markdown using double underscores. The text 'foo bar' will be displayed in bold when rendered.

LANGUAGE: Markdown
CODE:
__foo bar__

----------------------------------------

TITLE: Indenting Nested Ternaries in JavaScript
DESCRIPTION: Prettier 3.1 reintroduces indentation for nested ternary operators, improving readability for complex conditional expressions.

LANGUAGE: javascript
CODE:
const message =
  i % 3 === 0 && i % 5 === 0
    ? "fizzbuzz"
    : i % 3 === 0
      ? "fizz"
      : i % 5 === 0
        ? "buzz"
        : String(i);

----------------------------------------

TITLE: Creating Nested List Structure in Markdown
DESCRIPTION: This snippet shows a three-level nested list structure. Such lists are common in markdown files and can be automatically formatted by tools like Prettier to ensure consistent indentation.

LANGUAGE: markdown
CODE:
- foo
 - bar
  - baz

----------------------------------------

TITLE: Formatting Text with Nested Underscores and Parentheses in Plaintext
DESCRIPTION: This snippet demonstrates a text formatting pattern that combines underscores and parentheses. It wraps the content 'foo' with inner underscores, then surrounds it with parentheses, and finally encloses the entire structure with outer underscores.

LANGUAGE: plaintext
CODE:
_(_foo_)_

----------------------------------------

TITLE: Italicizing Text in Markdown
DESCRIPTION: This snippet shows how to italicize text in Markdown using asterisks. The text between the asterisks will be rendered in italic style when processed by a Markdown interpreter.

LANGUAGE: markdown
CODE:
*foo*bar

----------------------------------------

TITLE: Creating Markdown Link with Encoded Characters
DESCRIPTION: Demonstrates a Markdown link syntax with URL encoding for spaces (%20) and HTML entity reference for umlaut (auml). Shows proper handling of special characters in URLs.

LANGUAGE: markdown
CODE:
[link](foo%20b&auml;)

----------------------------------------

TITLE: Styling Box with Complex Background in CSS
DESCRIPTION: This CSS code defines styles for a box element with a complex background. It combines a linear gradient, an image, and a solid color. The gradient uses rgba values for transparency and specific angle. The background also includes a centered image and a fallback color.

LANGUAGE: css
CODE:
.box {
  background:
    linear-gradient(
        105deg,
        rgb(255 255 255 / 20%) 39%,
        rgb(51 56 57 / 100%) 96%
      )           center center / 400px 200px no-repeat,    url(big-star.png) center no-repeat,
    rebeccapurple;
}

----------------------------------------

TITLE: Formatting Markdown Emphasis
DESCRIPTION: Demonstrates nested asterisk usage in Markdown for text emphasis/formatting. Shows a pattern that may need special handling in Prettier's Markdown parser.

LANGUAGE: markdown
CODE:
*foo *bar**

----------------------------------------

TITLE: Formatting Markdown with Bold, Italic, and Link
DESCRIPTION: This snippet demonstrates how to combine bold text, italic text, and a link in Markdown. It shows the syntax for creating a bold section that contains an italic word and a URL link.

LANGUAGE: Markdown
CODE:
**foo [*bar*](/url)**

----------------------------------------

TITLE: Parsing Markdown Link with Backticks in URL
DESCRIPTION: This snippet demonstrates a Markdown-style link where the URL contains backticks. It's an edge case that might require special handling in Markdown parsers.

LANGUAGE: Markdown
CODE:
<http://foo.bar.`baz>`

----------------------------------------

TITLE: Creating Markdown Headings with Underlining Syntax
DESCRIPTION: Demonstrates two common methods for creating Markdown headings using equals signs and hyphens as underlining. The === creates a level 1 heading while --- creates a level 2 heading.

LANGUAGE: markdown
CODE:
h1
===

h2
---

----------------------------------------

TITLE: Defining Trailing Comma Options in Prettier Configuration
DESCRIPTION: This snippet shows the various ways to configure trailing comma options in Prettier. It includes the default value, CLI override command, and API override syntax.

LANGUAGE: markdown
CODE:
Default | CLI Override | API Override
--------|--------------|-------------
`"none"` | <code>--trailing-comma <none&#124;es5&#124;all></code> | <code>trailingComma: "<none&#124;es5&#124;all>"</code>

----------------------------------------

TITLE: Formatting HTML Comments with Prettier
DESCRIPTION: This snippet shows two examples of HTML comments and how Prettier handles their formatting. The first example is a complete comment, while the second is an incomplete comment.

LANGUAGE: HTML
CODE:
foo <!--> foo -->

foo <!-- foo--->

----------------------------------------

TITLE: Applying Italic Formatting in Markdown
DESCRIPTION: This snippet shows how to apply italic formatting to a portion of text using Markdown syntax. The asterisks (*) are used to wrap the text that should be italicized.

LANGUAGE: markdown
CODE:
a * foo bar*

----------------------------------------

TITLE: Creating Nested List Items in Markdown
DESCRIPTION: This snippet shows how to create a numbered list item with a nested bullet point using Markdown syntax. It demonstrates proper indentation for list hierarchy.

LANGUAGE: markdown
CODE:
10) foo
    - bar

----------------------------------------

TITLE: Formatting Text with Markdown Emphasis
DESCRIPTION: Shows how to apply emphasis to text using underscores and parentheses in Markdown. Demonstrates combining multiple formatting elements.

LANGUAGE: markdown
CODE:
foo-_(bar)_

----------------------------------------

TITLE: Combining Bold and Inline Code in Markdown
DESCRIPTION: This snippet demonstrates how to combine bold text formatting with inline code in Markdown. It uses asterisks for bold and backticks for code.

LANGUAGE: markdown
CODE:
*foo`*`

----------------------------------------

TITLE: Creating HTML Link with Title Attribute
DESCRIPTION: Demonstrates how to create an HTML link with a title attribute using square bracket and parentheses syntax. This format is commonly used in Markdown and similar markup languages.

LANGUAGE: html
CODE:
[link]("title")

----------------------------------------

TITLE: Formatting Markdown Text with Italics and Link
DESCRIPTION: Demonstrates how to combine italic text formatting with a markdown link using asterisks and square brackets. The text 'foo' and 'bar' are wrapped in italics, while 'bar' is also a clickable link to '/url'.

LANGUAGE: markdown
CODE:
*foo [bar](/url)*

----------------------------------------

TITLE: Formatting Text with Underscores in Markdown
DESCRIPTION: Demonstrates text emphasis using underscores in Markdown syntax. This example shows improper formatting with spaces between underscores and text.

LANGUAGE: markdown
CODE:
__ foo bar__

----------------------------------------

TITLE: Formatting Markdown Link with Backticks
DESCRIPTION: Demonstrates how to format a markdown link using angle brackets and backticks around a URL. Shows syntax for creating a code-style link.

LANGUAGE: markdown
CODE:
<http://foo.bar.`baz>`

----------------------------------------

TITLE: Escaping Markdown Syntax in Prettier
DESCRIPTION: This snippet demonstrates how to escape various Markdown syntax elements to render them as plain text. It includes examples for emphasis, HTML tags, links, code blocks, lists, headings, and reference-style links.

LANGUAGE: markdown
CODE:
\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url "not a reference"

----------------------------------------

TITLE: Left-Aligned Option Selection Table
DESCRIPTION: A simple two-column markdown table with left alignment showing option selection format.

LANGUAGE: markdown
CODE:
| Specify the selected option : | Option 1 |
|:--| --- |

----------------------------------------

TITLE: HTML Element with Mixed Attribute Formats
DESCRIPTION: Shows a self-closing HTML element containing multiple attributes with different quotation styles and custom formats. Includes standard key-value pairs, boolean attributes, and nested HTML within attribute values.

LANGUAGE: html
CODE:
<a foo="bar" bam = 'baz <em>"</em>'
_boolean zoop:33=zoop:33 />

----------------------------------------

TITLE: Creating Empty HTML Link Element
DESCRIPTION: This code snippet demonstrates the structure of an HTML anchor tag with an empty href attribute. The link has no destination URL or visible text content.

LANGUAGE: HTML
CODE:
<a href=""></a>

----------------------------------------

TITLE: Enabling ALE Auto-fix on Save
DESCRIPTION: Configures ALE to automatically run fixers (including Prettier) when saving files.

LANGUAGE: vim
CODE:
let g:ale_fix_on_save = 1

----------------------------------------

TITLE: Combining Bold and Parentheses in Markdown
DESCRIPTION: This snippet shows how to create bold text within parentheses using Markdown syntax. It demonstrates the nesting of different formatting elements.

LANGUAGE: markdown
CODE:
*(**foo**)*

----------------------------------------

TITLE: HTML Entity Encoding for Umlaut Character
DESCRIPTION: Shows how to encode the letter 'ö' using HTML character entities. The '&ouml;' entity represents the lowercase o with umlaut character.

LANGUAGE: html
CODE:
`f&ouml;&ouml;`

----------------------------------------

TITLE: Text Content Display
DESCRIPTION: Simple text content displaying 'foo'. The language specifier contains HTML entities which is invalid.

LANGUAGE: text
CODE:
foo

----------------------------------------

TITLE: Formatting Markdown Link with Nested Quotes
DESCRIPTION: Demonstrates how to format a markdown link that contains both single and double quotes in its title attribute. The example shows proper quote escaping in markdown syntax.

LANGUAGE: markdown
CODE:
[link](/url 'title "and" title')

----------------------------------------

TITLE: Creating Linear Gradient with Background Image in CSS
DESCRIPTION: Demonstrates how to create a layered background effect using linear-gradient with RGB colors and opacity values combined with a background image URL. The gradient transitions from yellow with 50% opacity to blue with 50% opacity from top to bottom.

LANGUAGE: css
CODE:
background-image: linear-gradient(
    to bottom,
              rgb(255 255 0 / 50%),
 rgb(0 0 255 / 50%)
  ), url("catfront.png");

----------------------------------------

TITLE: Formatting Text with Bold Markdown Syntax
DESCRIPTION: Example showing markdown text formatting using double underscores to create bold/strong emphasis. Multiple consecutive bold segments are shown.

LANGUAGE: markdown
CODE:
__foo__bar__baz__

----------------------------------------

TITLE: Italicizing Text with Underscores in Markdown
DESCRIPTION: Demonstrates the markdown syntax for making text italic using underscores (_) around the text. This snippet shows how to emphasize the text 'foo bar' by surrounding it with single underscores.

LANGUAGE: markdown
CODE:
_foo bar_

----------------------------------------

TITLE: Defining a Template Literal in JavaScript
DESCRIPTION: This snippet shows a basic template literal in JavaScript. Template literals are string literals allowing embedded expressions and can span multiple lines.

LANGUAGE: JavaScript
CODE:
`foo`

----------------------------------------

TITLE: Prettier Configuration File
DESCRIPTION: Sample .prettierrc configuration file showing common formatting options.

LANGUAGE: json
CODE:
{
  "printWidth": 100,
  "parser": "flow"
}

----------------------------------------

TITLE: Formatting Numbers as Bold Text in Markdown
DESCRIPTION: Shows how to make numbers bold using Markdown's double asterisk syntax. This basic example wraps the number 123 in double asterisks to display it in bold format.

LANGUAGE: markdown
CODE:
**123**

----------------------------------------

TITLE: URL String with Escaped Characters
DESCRIPTION: Example URL string containing escaped left and right square brackets in the path component.

LANGUAGE: text
CODE:
<http://example.com/\[\>

----------------------------------------

TITLE: Simple Text Block
DESCRIPTION: Basic text block containing the string 'foo'

LANGUAGE: plaintext
CODE:
foo

----------------------------------------

TITLE: Applying Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to make text italic in Markdown using asterisks. The text between the asterisks will be rendered in italics when processed by a Markdown interpreter.

LANGUAGE: markdown
CODE:
*foo
bar*

----------------------------------------

TITLE: Formatting Text List Items
DESCRIPTION: Demonstrates list formatting with dashes and varied whitespace between items.

LANGUAGE: text
CODE:
- foo


  bar
- baz

----------------------------------------

TITLE: Creating Multi-line Blockquote in Markdown
DESCRIPTION: This snippet demonstrates how to create a blockquote in Markdown that continues across multiple lines. Each line of the blockquote is prefixed with the '>' character.

LANGUAGE: markdown
CODE:
> 1. > Blockquote
> continued here.

----------------------------------------

TITLE: Basic Markdown Link Format
DESCRIPTION: Example showing minimalist markdown link syntax with path component.

LANGUAGE: markdown
CODE:
[link] (/uri)

----------------------------------------

TITLE: Formatting Text with Bold and Italic in Markdown
DESCRIPTION: This snippet shows how to combine bold and italic formatting in Markdown. It demonstrates the use of asterisks for both bold and italic text.

LANGUAGE: markdown
CODE:
**foo "*bar*" foo**

----------------------------------------

TITLE: Template Literal String with Indentation
DESCRIPTION: Shows a template literal string containing three words across two lines with varying levels of indentation. The first line has 'foo' and 'bar' separated by spaces, while 'baz' appears indented on the second line.

LANGUAGE: javascript
CODE:
`foo   bar
  baz`

----------------------------------------

TITLE: Rendering Nested Markdown List Structure
DESCRIPTION: A markdown list structure showing hierarchical relationships through indentation. The list contains 9 items with varying levels of nesting from root level to 4 levels deep.

LANGUAGE: markdown
CODE:
- a
 - b
  - c
   - d
    - e
   - f
  - g
 - h
- i

----------------------------------------

TITLE: Prettier CLI Installation
DESCRIPTION: Commands for installing Prettier via npm or yarn package managers.

LANGUAGE: bash
CODE:
yarn add prettier --dev --exact
# or
npm install --save-dev --save-exact prettier

----------------------------------------

TITLE: Formatting Example Text
DESCRIPTION: Basic text sample showing unformatted content with irregular spacing that could be formatted by a prettifier.

LANGUAGE: text
CODE:
foo       
baz

----------------------------------------

TITLE: Defining Custom URL Scheme in Prettier
DESCRIPTION: This snippet demonstrates a custom URL scheme syntax that might be used in Prettier for testing or configuration purposes. It includes a scheme, host, and path-like components separated by commas.

LANGUAGE: plaintext
CODE:
<made-up-scheme://foo,bar>

----------------------------------------

TITLE: Creating Nested Blockquotes in Markdown
DESCRIPTION: Shows how to create nested blockquote content in markdown using the > symbol. The example includes multiple lines with an empty line break in between.

LANGUAGE: markdown
CODE:
> foo
>
> bar

----------------------------------------

TITLE: Enabling ALE fix on save in Vim
DESCRIPTION: This setting enables ALE to automatically fix (format) files on save.

LANGUAGE: vim
CODE:
let g:ale_fix_on_save = 1

----------------------------------------

TITLE: Formatting Markdown Text with Nested Emphasis
DESCRIPTION: Demonstrates markdown text formatting with italic (_) and bold (__) syntax nested together. Shows how to combine different emphasis styles in a single line of text.

LANGUAGE: markdown
CODE:
_foo __bar__ baz_

----------------------------------------

TITLE: Defining and Using Link Reference in Markdown
DESCRIPTION: This snippet shows how to define a link reference with a URL and title, and then use that reference in Markdown. The first line defines a reference named 'foo' with a URL and title. The second line demonstrates how to use this reference in the document.

LANGUAGE: markdown
CODE:
[foo]: /url "title"

[foo]

----------------------------------------

TITLE: Creating Unordered Markdown List
DESCRIPTION: Demonstrates a markdown unordered list with three items where one item is empty. Shows varying levels of indentation between items.

LANGUAGE: markdown
CODE:
- foo
-   
- bar

----------------------------------------

TITLE: Text Alignment with Hyphen and Indentation
DESCRIPTION: Demonstrates text alignment with a hyphenated first line and an indented second line, separated by whitespace.

LANGUAGE: text
CODE:
-    foo

  bar

----------------------------------------

TITLE: Formatting Markdown Link Syntax
DESCRIPTION: Example of a Markdown link with text and URI components, showing a potential edge case in link formatting with extra brackets.

LANGUAGE: markdown
CODE:
[link [bar](/uri)

----------------------------------------

TITLE: Processing Multiline Template Literals in JavaScript
DESCRIPTION: Shows two template literal examples - one containing markdown headings with consistent root indentation, and another containing plain text with line breaks. Demonstrates template literal syntax for preserving whitespace and formatting.

LANGUAGE: javascript
CODE:
md`
# this is the root indent

# this is the root indent

# this is the root indent
`

something`
asd

asd

asd
`

----------------------------------------

TITLE: Creating HTML Link with Backtick
DESCRIPTION: Demonstrates an HTML anchor tag using backtick characters for both the href attribute value and the link text content.

LANGUAGE: html
CODE:
<a href="`">`</a>

----------------------------------------

TITLE: Defining Markdown Reference Link with Escaped Special Characters
DESCRIPTION: This snippet demonstrates how to create a Markdown reference-style link with special characters in the URL and title. The asterisk in the URL is escaped with a backslash, and the asterisk in the title is enclosed in quotes.

LANGUAGE: markdown
CODE:
[foo]

[foo]: /bar\* "ti\*tle"

----------------------------------------

TITLE: Displaying Indented Code Block in Markdown
DESCRIPTION: This snippet demonstrates how to create an indented code block in Markdown. Indented code blocks are created by indenting each line of the block by at least 4 spaces or 1 tab.

LANGUAGE: markdown
CODE:
    indented code

----------------------------------------

TITLE: Unformatted JavaScript Code Example
DESCRIPTION: Example of JavaScript code with inconsistent spacing, extra newlines, and non-standard formatting that Prettier would normalize. Shows string assignment and console.log statement.

LANGUAGE: javascript
CODE:
const foo      = 'bar'



   console     .log(    213    )

----------------------------------------

TITLE: Formatting Multi-line HTML Comment with Hyphens
DESCRIPTION: This snippet shows an HTML element 'foo' followed by a multi-line comment. The comment spans two lines and includes a hyphen, demonstrating proper comment formatting in HTML.

LANGUAGE: HTML
CODE:
foo <!-- this is a
comment - with hyphen -->

----------------------------------------

TITLE: Custom Tag with Arithmetic Expression
DESCRIPTION: Shows a custom tag-like structure containing arithmetic operators and colon separator. This appears to be a non-standard markup format or possibly a custom syntax.

LANGUAGE: markup
CODE:
<a+b+c:d>

----------------------------------------

TITLE: Defining Markdown Link Reference
DESCRIPTION: This snippet shows how to define a link reference in Markdown. It creates a reference for the label 'foo' that points to the URL '/url'.

LANGUAGE: markdown
CODE:
[foo]

> [foo]: /url

----------------------------------------

TITLE: Formatting Nested Markdown Link
DESCRIPTION: A markdown link with multiple nested square brackets in the link text, followed by a simple URI destination.

LANGUAGE: markdown
CODE:
[link [foo [bar]]](/uri)

----------------------------------------

TITLE: Text Formatting with Line Breaks
DESCRIPTION: Sample text content illustrating line spacing and alignment formatting with line breaks between text elements.

LANGUAGE: text
CODE:
   foo

bar

----------------------------------------

TITLE: Displaying Indented Text Blocks
DESCRIPTION: Shows two code blocks with different indentation levels separated by a paragraph.

LANGUAGE: plaintext
CODE:
indented code

LANGUAGE: plaintext
CODE:
more code

----------------------------------------

TITLE: Formatting Escaped Brackets in Markdown Links
DESCRIPTION: Shows how to properly escape square brackets within a Markdown link using backslashes. This syntax allows inclusion of literal brackets in link text while maintaining valid Markdown formatting.

LANGUAGE: markdown
CODE:
[link \[bar](/uri)

----------------------------------------

TITLE: Structuring a Nested Markdown List
DESCRIPTION: This snippet demonstrates how to create a nested and indented markdown list. It includes top-level items, a nested item, and an indented line.

LANGUAGE: markdown
CODE:
- a
  - b

    c
- d

----------------------------------------

TITLE: Defining Array with Backtick in JavaScript
DESCRIPTION: This snippet creates an array containing a single backtick character. It could be used in Prettier configuration to define custom formatting rules or patterns to ignore.

LANGUAGE: JavaScript
CODE:
`` \[\` ``

----------------------------------------

TITLE: Formatting Whitespace in JavaScript
DESCRIPTION: Example showing how Prettier normalizes excessive whitespace between function calls while preserving semantic meaning.

LANGUAGE: javascript
CODE:
foo

bar

----------------------------------------

TITLE: Creating HTML Hyperlink with Emphasized Text
DESCRIPTION: This HTML snippet creates a div element containing an anchor (a) tag with a href attribute. The anchor text is emphasized using asterisks, which may be intended for markdown-style formatting.

LANGUAGE: HTML
CODE:
<div><a href="bar">*foo*</a></div>

----------------------------------------

TITLE: Creating HTML Anchor Tag with Href and Title Attributes
DESCRIPTION: This snippet shows an HTML anchor tag with an href attribute pointing to 'bar' and a title attribute. The formatting is compact, with no spaces between attributes.

LANGUAGE: HTML
CODE:
<a href='bar'title=title>

----------------------------------------

TITLE: Creating Reference-Style Link with Emphasis in Markdown
DESCRIPTION: This snippet demonstrates how to create a reference-style link in Markdown with emphasized text in the link label. It shows both the link usage and its corresponding reference definition.

LANGUAGE: markdown
CODE:
![*foo* bar][]

[*foo* bar]: /url "title"

----------------------------------------

TITLE: Defining and Using a Markdown Link Reference
DESCRIPTION: This snippet demonstrates how to define a link reference in Markdown and then use it later in the document. The reference is defined with '[foo]:' and then used with '[foo]'.

LANGUAGE: markdown
CODE:
[foo]:

[foo]

----------------------------------------

TITLE: Configuring Prettier options for ALE in Vim
DESCRIPTION: This snippet sets Prettier options for JavaScript files when using ALE.

LANGUAGE: vim
CODE:
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'

----------------------------------------

TITLE: Defining Referenced Image Link in Markdown
DESCRIPTION: Creates an image link using a reference-style Markdown syntax. The image 'moon.jpg' is linked to '/uri' through a reference id 'ref'.

LANGUAGE: markdown
CODE:
[![moon](moon.jpg)][ref]

[ref]: /uri

----------------------------------------

TITLE: Fixed-width Text Block
DESCRIPTION: A simple text block formatted with fixed-width spacing and leading indentation

LANGUAGE: plaintext
CODE:
    code

----------------------------------------

TITLE: Displaying Command Output in Plaintext
DESCRIPTION: This snippet shows a simple line of text, possibly representing command-line output or a basic code fragment. It doesn't have a clear programming language context.

LANGUAGE: plaintext
CODE:
> bar\nbaz

----------------------------------------

TITLE: Formatting Nested Markdown Links and Emphasis
DESCRIPTION: This snippet demonstrates how to create nested Markdown links with emphasis. It includes three levels of links, with the middle link also containing italic emphasis.

LANGUAGE: markdown
CODE:
[foo *[bar [baz](/uri)](/uri)*](/uri)

----------------------------------------

TITLE: Defining Markdown Headings
DESCRIPTION: This snippet shows how to create level 1 and level 2 headings in Markdown. The '#' symbol is used to denote heading levels, with more '#' symbols indicating lower-level headings.

LANGUAGE: markdown
CODE:
# h1

## h2

----------------------------------------

TITLE: Formatting Indented Code with Prettier
DESCRIPTION: This snippet demonstrates how Prettier handles indented code blocks. It shows Prettier's preservation of indentation and handling of whitespace between code blocks.

LANGUAGE: plaintext
CODE:
    indented code

paragraph

    more code

----------------------------------------

TITLE: Creating Unordered List with Reference Link in Markdown
DESCRIPTION: This snippet shows how to create an unordered list in Markdown, including a reference-style link definition. The list contains four items, with the third item being a reference link definition.

LANGUAGE: markdown
CODE:
- a
- b

  [ref]: /url
- d

----------------------------------------

TITLE: Mixed HTML Comment and Markdown Formatting
DESCRIPTION: Demonstrates the use of an HTML comment followed by Markdown emphasized text using asterisks.

LANGUAGE: html-markdown
CODE:
<!-- foo -->*bar*
*baz*

----------------------------------------

TITLE: Defining and Using Link Reference with Template Literal in Markdown
DESCRIPTION: This snippet demonstrates how to define a link reference in Markdown and use it within a JavaScript template literal. The reference 'ref' is defined with a URI, and then used in a template literal syntax.

LANGUAGE: markdown
CODE:
[foo`][ref]`

[ref]: /uri

----------------------------------------

TITLE: Formatting Nested Bracket Notation in Prettier
DESCRIPTION: This snippet shows how Prettier formats nested bracket notation, which could represent accessing a deeply nested object property or a chained method call. The formatting preserves the original structure without adding spaces.

LANGUAGE: plaintext
CODE:
<foo.bar.baz>

----------------------------------------

TITLE: Defining Markdown Link with Formatted Text
DESCRIPTION: This snippet demonstrates how to create a Markdown link with italic text in the link reference and definition. It uses square brackets for the link reference and a separate line for the link definition, including the URL and title.

LANGUAGE: markdown
CODE:
[*foo* bar][]

[*foo* bar]: /url "title"

----------------------------------------

TITLE: Defining and Using a Markdown Link Reference
DESCRIPTION: This snippet defines a link reference named 'Foo bar' with a URL containing encoded spaces and a title. It then demonstrates how to use this reference in a Markdown link.

LANGUAGE: markdown
CODE:
[Foo bar]:
<my%20url>
'title'

[Foo bar]

----------------------------------------

TITLE: Formatting Reference-Style Links in Markdown
DESCRIPTION: Shows how to format a markdown link using a reference-style syntax, including a URL with query parameters and a separate reference definition. The example demonstrates proper formatting for links containing special characters and URLs.

LANGUAGE: markdown
CODE:
[foo<http://example.com/?search=][ref]>

[ref]: /uri

----------------------------------------

TITLE: Markdown Blockquotes Example
DESCRIPTION: Simple demonstration of markdown blockquote syntax using the greater than symbol.

LANGUAGE: markdown
CODE:
> aaa
***
> bbb

----------------------------------------

TITLE: Defining and Using Markdown Link Reference
DESCRIPTION: This snippet demonstrates how to define a link reference named 'bar' pointing to '/baz', and then how to use that reference in the text. This technique allows for cleaner, more maintainable Markdown documents by separating link definitions from their usage.

LANGUAGE: markdown
CODE:
Foo
[bar]: /baz

[bar]

----------------------------------------

TITLE: Nested Markdown Links with Reference Definition
DESCRIPTION: Demonstrates a Markdown link structure where an inline link is nested inside a reference-style link definition. Shows both the link reference usage and its corresponding definition.

LANGUAGE: markdown
CODE:
[foo [bar](/uri)][ref]

[ref]: /uri

----------------------------------------

TITLE: Indented Code Block
DESCRIPTION: A plain text code block indented with spaces in markdown format

LANGUAGE: plaintext
CODE:
indented code

----------------------------------------

TITLE: Formatting Markdown List with Separator
DESCRIPTION: Demonstrates markdown formatting with a bullet list and a horizontal rule separator. Includes a primary heading, nested list item, and horizontal rule separator.

LANGUAGE: markdown
CODE:
- # Foo
- Bar
  ---
  baz

----------------------------------------

TITLE: Combining HTML and Markdown for Text Formatting
DESCRIPTION: This snippet demonstrates the use of HTML's <del> tag to create strikethrough text, while also utilizing Markdown syntax for italicizing text within the HTML element. It shows how HTML and Markdown can be mixed for rich text formatting.

LANGUAGE: HTML
CODE:
<del>

*foo*

</del>

----------------------------------------

TITLE: Formatting Markdown List Items with Code Blocks
DESCRIPTION: Shows two list items containing 'foo' with different trailing content patterns - one followed by 'notcode' and another followed by 'code'.

LANGUAGE: markdown
CODE:
-   foo

    notcode

-   foo


    code

----------------------------------------

TITLE: Commented URL in Prettier Config
DESCRIPTION: A single line containing a commented-out URL, possibly intended as a reference or placeholder in a Prettier configuration file.

LANGUAGE: plaintext
CODE:
<http://../>

----------------------------------------

TITLE: Creating Reference Link in Markdown
DESCRIPTION: Shows how to create a reference-style link in markdown using a link reference definition. The first line contains the link reference, while the second line defines the URL and title for that reference.

LANGUAGE: markdown
CODE:
[foo][]

[foo]: /url "title"

----------------------------------------

TITLE: Parsing Complex Markdown Link References
DESCRIPTION: Test cases demonstrating link reference definition syntax with escaped characters, titles containing parentheses, and special characters in identifiers.

LANGUAGE: markdown
CODE:
[Foo*bar\]]:my_(url) 'title (with parens)'

[Foo*bar\]]

----------------------------------------

TITLE: Configuring format on save for coc-prettier in Vim
DESCRIPTION: This JSON configuration enables format on save for CSS and Markdown files when using coc-prettier.

LANGUAGE: json
CODE:
{
  "coc.preferences.formatOnSaveFiletypes": ["css", "markdown"]
}

----------------------------------------

TITLE: Parsing Nested Brackets in Markdown Link References
DESCRIPTION: This snippet shows two Markdown link reference examples. The first line demonstrates a link with a reference containing nested brackets. The second line defines the reference with a nested opening bracket in the label.

LANGUAGE: markdown
CODE:
[foo][ref[]

[ref[]: /uri

----------------------------------------

TITLE: Outputting a Character with PHP Echo
DESCRIPTION: This snippet demonstrates how to use the PHP echo statement to output a single character. In this case, it prints the greater than symbol ('>') to the output.

LANGUAGE: PHP
CODE:
<?php

  echo '>';

?>

----------------------------------------

TITLE: Basic Text Block
DESCRIPTION: A simple plaintext code block containing the text 'bar'

LANGUAGE: plaintext
CODE:
bar

----------------------------------------

TITLE: Creating Reference-Style Links in Markdown
DESCRIPTION: This snippet demonstrates how to create a reference-style link in Markdown. It includes a link with formatted text and a separate reference definition.

LANGUAGE: markdown
CODE:
[foo *bar][ref]

[ref]: /uri

----------------------------------------

TITLE: Creating Long Markdown Heading
DESCRIPTION: A markdown heading using H1 syntax (#) with repeated text to demonstrate long heading formatting.

LANGUAGE: markdown
CODE:
# this is a long long long long long long long long long long long long long long heading.

----------------------------------------

TITLE: Configuring Prettier for Markdown with '>' Characters
DESCRIPTION: This snippet demonstrates how Prettier handles lines starting with '>' in Markdown files. It shows that Prettier preserves these characters at the beginning of lines, which is often used for blockquotes in Markdown.

LANGUAGE: markdown
CODE:
> foo

> bar

----------------------------------------

TITLE: Creating Nested Markdown Lists
DESCRIPTION: Demonstrates how to create a three-level deep nested list using Markdown syntax with proper indentation.

LANGUAGE: markdown
CODE:
- Level 1
  - Level 2
    - Level 3

----------------------------------------

TITLE: Creating Basic HTML Table Structure
DESCRIPTION: Demonstrates the construction of a simple HTML table with one row and one cell containing the text 'foo'. Shows proper nesting of table, tr, and td elements.

LANGUAGE: html
CODE:
<table><tr><td>
foo
</td></tr></table>

----------------------------------------

TITLE: Markdown Code Block Example
DESCRIPTION: Example showing markdown code fence syntax using tildes (~~~) to create a code block containing 'bar'

LANGUAGE: markdown
CODE:
~~~
bar
~~~

----------------------------------------

TITLE: Defining Markdown Reference Link with Image
DESCRIPTION: Shows how to define a reference-style image link in markdown with a title. The format includes an image reference in the content followed by its definition including URL and optional title.

LANGUAGE: markdown
CODE:
![Foo]

[foo]: /url "title"

----------------------------------------

TITLE: Formatting Markdown Links with Reference
DESCRIPTION: Shows how to structure a complex Markdown link that includes asterisk-based emphasis, nested brackets, and a reference link definition.

LANGUAGE: markdown
CODE:
[foo *bar [baz][ref]*][ref]

[ref]: /uri

----------------------------------------

TITLE: Formatting HTML Comments with Different Indentation
DESCRIPTION: This snippet shows two identical HTML comments, one without indentation and one with four spaces of indentation. It demonstrates how HTML comments might be formatted in different contexts within an HTML document.

LANGUAGE: HTML
CODE:
<!-- foo -->

    <!-- foo -->

----------------------------------------

TITLE: Creating a Markdown Link Reference Definition
DESCRIPTION: This snippet demonstrates how to create and use a link reference definition in Markdown. It defines a reference 'foo' and uses it in the text as '[Foo][]'.

LANGUAGE: markdown
CODE:
[Foo][]

[foo]: /url "title"

----------------------------------------

TITLE: Formatting Text in Markdown
DESCRIPTION: Shows how to combine bold text formatting with regular text using markdown syntax. The text 'foo' is bolded using double asterisks, followed by the unformatted text 'bar'.

LANGUAGE: markdown
CODE:
**foo**bar

----------------------------------------

TITLE: Formatting Text with Markdown Syntax
DESCRIPTION: This snippet demonstrates how to use Markdown syntax for basic text formatting. It includes a heading, bold text, and escaped asterisks.

LANGUAGE: markdown
CODE:
# foo *bar* \*baz\*

----------------------------------------

TITLE: Text Pattern - Underscore Border
DESCRIPTION: Creates a pattern with underscores surrounding the letter 'a'

LANGUAGE: text
CODE:
_ _ _ _ a

----------------------------------------

TITLE: Processing Complex Markdown Link with Prettier
DESCRIPTION: This snippet demonstrates a complex Markdown link structure that includes an HTML-like attribute and a reference-style link definition. It showcases how Prettier formats and handles such intricate combinations in Markdown.

LANGUAGE: markdown
CODE:
[foo <bar attr="][ref]">

[ref]: /uri

----------------------------------------

TITLE: Formatting Markdown Block Quote with Header
DESCRIPTION: Demonstrates the syntax for creating a Markdown block quote that contains a level 1 header followed by two lines of plain text.

LANGUAGE: markdown
CODE:
> # Foo
> bar
> baz

----------------------------------------

TITLE: JavaScript Module Export in Code Block
DESCRIPTION: This code block exports a string module using CommonJS syntax.

LANGUAGE: javascript
CODE:
module.exports = 'test'

----------------------------------------

TITLE: Structuring HTML with Nested Elements and Markdown-style Formatting
DESCRIPTION: This HTML snippet showcases a div element containing Markdown-style emphasized text, followed by nested custom and anchor tags. The code demonstrates basic HTML structure and mixing of HTML with other formatting styles.

LANGUAGE: HTML
CODE:
 <div>
  *hello*
         <foo><a>


----------------------------------------

TITLE: Formatting Centered Markdown Heading
DESCRIPTION: Shows a markdown heading structure with 'foo' text centered using multiple spaces on both sides. Demonstrates text alignment in markdown headings.

LANGUAGE: markdown
CODE:
#                  foo                     

----------------------------------------

TITLE: Markdown Image Reference with Link Definition
DESCRIPTION: Shows how to create a reference-style image link in Markdown using the image syntax with a reference ID, followed by the link definition that provides the URL and title for that reference.

LANGUAGE: markdown
CODE:
![foo]

[foo]: /url "title"

----------------------------------------

TITLE: Mixed Markdown and HTML Syntax
DESCRIPTION: An example of invalid markup that incorrectly combines Markdown link syntax with HTML tag attributes. This represents a syntax error where the markup attempts to mix Markdown link brackets with HTML attribute quotation.

LANGUAGE: markdown
CODE:
[foo <bar attr="](baz)">

----------------------------------------

TITLE: Formatting Markdown List with Prettier
DESCRIPTION: This snippet shows a simple markdown list with two items. It demonstrates how Prettier maintains the list structure and indentation in markdown files.

LANGUAGE: markdown
CODE:
- `one
- two`

----------------------------------------

TITLE: Installing coc.nvim Plugin
DESCRIPTION: Shows how to install the coc.nvim plugin using vim-plug package manager. This plugin is required for using coc-prettier.

LANGUAGE: vim
CODE:
Plug 'neoclide/coc.nvim', {'branch': 'release'}

----------------------------------------

TITLE: Nested Markdown Image Links
DESCRIPTION: Demonstrates nested markdown syntax for embedding an image link within another image link. The inner image has alt text 'bar' and URL '/url' while the outer image has alt text containing the inner image and URL '/url2'.

LANGUAGE: markdown
CODE:
![foo ![bar](/url)](/url2)

----------------------------------------

TITLE: Formatting Multi-line String Literal with Prettier
DESCRIPTION: This snippet shows a multi-line string literal that could be used to test Prettier's formatting rules. It includes intentional extra spaces and line breaks to demonstrate how Prettier might handle such cases.

LANGUAGE: Unknown
CODE:
`foo   bar 
baz`

----------------------------------------

TITLE: Formatting Plain Text with Prettier
DESCRIPTION: This code snippet shows a basic text block that can be formatted using Prettier. It contains three lines of text with inconsistent spacing, which Prettier can standardize.

LANGUAGE: plaintext
CODE:
foo
bar  
baz

----------------------------------------

TITLE: Defining a Markdown Link Reference
DESCRIPTION: This snippet demonstrates how to define a link reference in Markdown. The reference '[[[foo]]]' is associated with the URL '/url'. This allows the reference to be used in other parts of the document to create links without repeating the URL.

LANGUAGE: markdown
CODE:
[[[foo]]]: /url

----------------------------------------

TITLE: Testing Math Expression Formatting in Markdown
DESCRIPTION: Comprehensive test suite for validating the handling of LaTeX math expressions in Markdown, including display math blocks ($$), inline math ($), escaped characters, and interaction with other Markdown elements.

LANGUAGE: markdown
CODE:
$$
\beta+\gamma
$$

---

$\alpha\$

---

\$\alpha\$

---

\\$\alpha$

---

`$`\alpha$

---

$\alpha`$` foo

---

$`\alpha`$

---

$\alpha\$$

---

$$
\alpha\$
$$

---

tango
$$
\alpha
$$

---

$$\\alpha$$

---

$$\alpha$$
$$
\alpha\beta
$$

---

> $$
> \alpha\beta
> $$

---

  $$$
    \alpha
  $$$

---

$$  must
\alpha
$$

---

$$
\alpha
$$
```
code fence
```

----------------------------------------

TITLE: Creating Nested Div Elements in HTML
DESCRIPTION: This snippet demonstrates the creation of two nested div elements in HTML. The outer div contains an inner div, both without any content or attributes. This structure can be used as a basic container layout in web pages.

LANGUAGE: HTML
CODE:
<div>

  <div>



----------------------------------------

TITLE: Formatting Simple Wiki Link in Markdown
DESCRIPTION: This snippet shows the structure of a basic wiki link. It uses double square brackets to enclose the link text, which is typically used to create internal links in wiki systems.

LANGUAGE: markdown
CODE:
[[A simple wiki link on a single line]]

----------------------------------------

TITLE: Displaying Text with Code Blocks
DESCRIPTION: Demonstrates two different code block syntaxes (backticks and tildes) for displaying plain text.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: Defining Basic YAML/Markdown Document Structure
DESCRIPTION: Demonstrates basic document structure using YAML front matter style section separators. Contains three sections labeled Foo, Bar, and Baz separated by triple dashes.

LANGUAGE: markdown
CODE:
---
Foo
---
Bar
---
Baz

----------------------------------------

TITLE: Defining and Using Markdown Link References
DESCRIPTION: This snippet shows how to define link references in Markdown and use them within the document. It includes a usage example and a reference definition with a URL and title.

LANGUAGE: markdown
CODE:
[foo]
[bar]

[bar]: /url "title"

----------------------------------------

TITLE: Formatting Nested Markdown Links
DESCRIPTION: This snippet demonstrates how to format nested links in Markdown. It shows an outer link containing an inner link, both using the standard Markdown link syntax with text in square brackets followed by the URL in parentheses.

LANGUAGE: markdown
CODE:
[foo [bar](/uri)](/uri)

----------------------------------------

TITLE: Creating Level 3 Heading in Markdown
DESCRIPTION: Demonstrates creating a level 3 heading in Markdown using three hash symbols followed by text.

LANGUAGE: markdown
CODE:
### foo

----------------------------------------

TITLE: Creating Reference-Style Image Link in Markdown
DESCRIPTION: This snippet demonstrates how to create a reference-style image link in Markdown. It uses a placeholder in the main text and defines the actual link with a title containing special characters separately.

LANGUAGE: markdown
CODE:
![foo *bar*][]

[foo *bar*]: train.jpg "train & tracks"

----------------------------------------

TITLE: Defining JSON Configuration Object
DESCRIPTION: This snippet defines a JSON object with a single key-value pair. The key 'foo' is associated with the string value 'bar'. This structure can be used for basic configuration or data storage purposes.

LANGUAGE: json
CODE:
{
  "foo": "bar"
}

----------------------------------------

TITLE: Defining and Using Markdown Link Reference with Escaped Backslash
DESCRIPTION: This snippet demonstrates how to define a link reference with an escaped backslash in the label, and then how to use that reference in Markdown. The backslash in the label is escaped to be treated as a literal character.

LANGUAGE: markdown
CODE:
[bar\\]: /uri

[bar\\]

----------------------------------------

TITLE: Styling Paragraph Text in CSS
DESCRIPTION: CSS rule that sets paragraph text color to red using inline styling.

LANGUAGE: CSS
CODE:
p{color:red;}

----------------------------------------

TITLE: Formatting String with Three Spaces (Two Lines, Varied Indentation)
DESCRIPTION: This snippet shows a string with three spaces between words, split across two lines with different indentation. It tests Prettier's behavior with multiple spaces, line breaks, and varying indentation in strings.

LANGUAGE: plaintext
CODE:
`   three   spaces 
 everywhere   `

----------------------------------------

TITLE: Basic Identifier Formatting
DESCRIPTION: Shows a simple identifier 'foo' with surrounding whitespace. This appears to be an example related to code formatting or pretty printing.

LANGUAGE: text
CODE:
    foo
    

----------------------------------------

TITLE: Defining YAML Frontmatter in Prettier Configuration
DESCRIPTION: This snippet defines a YAML-like frontmatter section in a Prettier configuration file. It uses triple dashes to denote the start and end of the frontmatter block.

LANGUAGE: yaml
CODE:
---
something
---

----------------------------------------

TITLE: Markdown Nested Brackets with Link Reference
DESCRIPTION: Demonstrates a markdown link structure with nested brackets and a corresponding reference link definition. The nested bracket structure [foo [bar]] becomes a link target that points to /uri via the [ref] reference.

LANGUAGE: markdown
CODE:
[link [foo [bar]]][ref]

[ref]: /uri

----------------------------------------

TITLE: Creating External Link with Query Parameters and Fragment in Markdown
DESCRIPTION: This snippet shows how to create a link to an external website that includes both query parameters and a fragment using Markdown syntax.

LANGUAGE: markdown
CODE:
[link](http://example.com?foo=3#frag)

----------------------------------------

TITLE: Configuring Prettier for Code Span Formatting in JavaScript
DESCRIPTION: This snippet defines a custom Prettier configuration for formatting code spans. It uses template literals to specify how code spans should be formatted.

LANGUAGE: JavaScript
CODE:
`code\\span`

----------------------------------------

TITLE: Configuring EditorConfig for Prettier
DESCRIPTION: Example of an EditorConfig file that complements Prettier's default configuration. Sets character encoding, line endings, indentation, and max line length.

LANGUAGE: ini
CODE:
[*]
charset = utf-8
insert_final_newline = true
end_of_line = lf
indent_style = space
indent_size = 2
max_line_length = 80

----------------------------------------

TITLE: Creating Reference-Style Link with Emphasis in Markdown
DESCRIPTION: This snippet demonstrates how to create a reference-style link in Markdown with emphasized text. It includes both the link reference and the link definition. The link text contains emphasized text using asterisks.

LANGUAGE: markdown
CODE:
![*foo* bar]

[*foo* bar]: /url "title"

----------------------------------------

TITLE: Number and Special Numeric Values in JavaScript
DESCRIPTION: Examples of numeric literals and special numeric values including regular numbers, Infinity, and NaN.

LANGUAGE: javascript
CODE:
5

LANGUAGE: javascript
CODE:
Infinity

LANGUAGE: javascript
CODE:
NaN

----------------------------------------

TITLE: Header Syntax in Markdown
DESCRIPTION: Demonstrates various methods of creating headers in Markdown using = and - underlines as well as # symbols

LANGUAGE: markdown
CODE:
Header 1
========

Header 2
--------

----------------------------------------

TITLE: Defining a Markdown Reference-Style Link with Title
DESCRIPTION: This snippet demonstrates how to create a Markdown reference-style link definition with a URL and title attribute. The link can be referenced elsewhere in the document using the [foo] syntax.

LANGUAGE: markdown
CODE:
[foo]

[foo]: /url "title"

----------------------------------------

TITLE: Creating Markdown Header
DESCRIPTION: A Markdown level 1 header with the text 'something'. This is used to create a main title or section in Markdown documentation.

LANGUAGE: Markdown
CODE:
# something

----------------------------------------

TITLE: Demonstrating Continuous Thematic Breaks in Markdown
DESCRIPTION: This snippet shows the use of continuous thematic breaks (****) in Markdown, followed by a level 2 heading. It's likely used to test or demonstrate specific Markdown parsing behavior.

LANGUAGE: markdown
CODE:
****
## foo
****

----------------------------------------

TITLE: Indenting HTML in Markdown
DESCRIPTION: This snippet illustrates how indented HTML is formatted in Markdown. It shows that HTML elements can be indented and will be rendered as-is, allowing for fine-grained control over the output.

LANGUAGE: markdown
CODE:
- indented html is formatted as it is
  <blockquote>asdf</blockquote>

----------------------------------------

TITLE: Markdown Underline-style Heading with Code Block
DESCRIPTION: Shows heading declaration using underline-style syntax with dashes followed by an indented code block.

LANGUAGE: markdown
CODE:
Heading
------
    foo
----

----------------------------------------

TITLE: Simple Indented Text Block
DESCRIPTION: Demonstrates basic text indentation with consistent spacing pattern. Shows a two-level indentation structure with leading spaces.

LANGUAGE: plaintext
CODE:
    a simple
      indented code block

----------------------------------------

TITLE: Formatting Markdown Link with Line Break
DESCRIPTION: Shows how to format a markdown link that contains a line break between the link text and URL using angle brackets for URL encapsulation.

LANGUAGE: markdown
CODE:
[link](<foo\nbar>)

----------------------------------------

TITLE: Creating External Link with Fragment in Markdown
DESCRIPTION: This snippet demonstrates how to create a link to an external website with a specific fragment (section) using Markdown syntax.

LANGUAGE: markdown
CODE:
[link](http://example.com#fragment)

----------------------------------------

TITLE: Unformatted JavaScript Code for Prettier Demonstration
DESCRIPTION: This snippet shows a simple JavaScript code with inconsistent indentation and spacing. It serves as an example of code that Prettier would reformat to improve readability and consistency.

LANGUAGE: javascript
CODE:
foo  
     bar

----------------------------------------

TITLE: Defining Image and Reference-Style Links in Markdown
DESCRIPTION: This snippet shows how to create an image link using double square brackets and an exclamation mark, followed by a reference-style link definition with a URL and title.

LANGUAGE: markdown
CODE:
![[foo]]

[[foo]]: /url "title"

----------------------------------------

TITLE: Jekyll Template Directives with Markdown Content
DESCRIPTION: Template structure using Jekyll includes and Liquid templating along with Markdown formatting for rendering a userscripts documentation page with GitHub links and build status indicators.

LANGUAGE: markdown
CODE:
{% include_relative _installations/tarball.md %}

{% cloudinary nice_prefix_-_for_the_filename.jpg %}

# Userscripts <span>[{% img github.svg alt:"View on GitHub" title:"View on GitHub" %}](https://github.com/Charcoal-SE/Userscripts) [Build <span>status loading…</span>](//travis-ci.org/Charcoal-SE/userscripts){: .build}</span>

{% css userscripts %}
{% js userscripts %}

{{ foo
multiline
where does it end }}

----------------------------------------

TITLE: Defining Prettier Configuration Using Markdown-like Syntax
DESCRIPTION: This snippet uses a custom syntax, likely specific to Prettier, to define configuration options. The '~~123~~' syntax might represent a specific setting or rule for code formatting.

LANGUAGE: markdown
CODE:
~~123~~

----------------------------------------

TITLE: Defining Markdown Link Reference with Asterisks
DESCRIPTION: Demonstrates how to define a link reference with asterisks in the label and how to reference it. Shows both the definition and usage syntax.

LANGUAGE: markdown
CODE:
[foo*]: /url

*[foo*]

----------------------------------------

TITLE: Formatting Level 1 Markdown Heading
DESCRIPTION: Demonstrates formatting of a Markdown level 1 heading using the hash symbol followed by text.

LANGUAGE: markdown
CODE:
# foo

----------------------------------------

TITLE: Formatting List Items and Details in Markdown
DESCRIPTION: This snippet demonstrates the use of list items and a details/summary element in Markdown. It shows how to create a collapsible section with additional list items inside.

LANGUAGE: markdown
CODE:
- A list item.
<details><summary>Summary</summary>
<p>

- A list item.

</p>
</details>

----------------------------------------

TITLE: Formatting List Structure in Markdown
DESCRIPTION: Shows a simple numbered list with a nested bullet point, formatted according to Prettier's markdown rules. Demonstrates proper indentation and spacing between list items.

LANGUAGE: markdown
CODE:
1.  foo

    - bar

----------------------------------------

TITLE: Demonstrating Line Continuation in JavaScript with Prettier
DESCRIPTION: This snippet shows how Prettier formats a line continuation using a backslash. It's a common technique used to split long lines of code or string literals across multiple lines for improved readability.

LANGUAGE: JavaScript
CODE:
foo\
bar

----------------------------------------

TITLE: Creating a Markdown Link with Title Attribute
DESCRIPTION: This snippet shows the syntax for creating a Markdown link that includes a URL and a title attribute. The link text is represented by 'link', the URL is '/uri', and the title is 'title'.

LANGUAGE: markdown
CODE:
[link](/uri "title")

----------------------------------------

TITLE: Formatting Markdown Link with Escaped Parentheses
DESCRIPTION: Shows how to format a Markdown link where the URL contains parentheses that need to be escaped with backslashes.

LANGUAGE: markdown
CODE:
[link](\(foo\))

----------------------------------------

TITLE: Defining Empty 'br' Element in HTML DTD
DESCRIPTION: This code snippet declares the 'br' element as an EMPTY element in HTML DTD syntax. It specifies that the 'br' element cannot contain any content and is self-closing.

LANGUAGE: HTML DTD
CODE:
<!ELEMENT br EMPTY>

----------------------------------------

TITLE: Handling last comment in if test conditions
DESCRIPTION: Demonstrates how Prettier handles the last comment in if test conditions.

LANGUAGE: javascript
CODE:
// Before
if (isIdentifierStart(code) || code === 92) {
  /* '\' */
}

// After
if (isIdentifierStart(code) || code === 92 /* '\' */) {}


----------------------------------------

TITLE: Formatting Markdown Link with Angle Brackets
DESCRIPTION: Demonstrates markdown syntax for creating a URL link using angle bracket notation. This format is used to turn a URL into a clickable link in markdown.

LANGUAGE: markdown
CODE:
< http://foo.bar >

----------------------------------------

TITLE: Defining and Using Markdown Link Reference
DESCRIPTION: Shows how to define a link reference with a URL and title attribute, followed by using that reference. The link definition includes an identifier 'foo', target URL '/url', and title text in quotes.

LANGUAGE: markdown
CODE:
[foo]: /url "title"

[foo]

----------------------------------------

TITLE: Displaying Indented Code Block in Markdown
DESCRIPTION: This snippet shows how to create an indented code block in Markdown by using four spaces at the beginning of each line.

LANGUAGE: markdown
CODE:
    Indented Code Block
    Indented Code Block
    Indented Code Block
    Indented Code Block
    Indented Code Block

----------------------------------------

TITLE: Rendering External Link Component in JSX
DESCRIPTION: Demonstrates usage of ExternalLink component to create a hyperlink to an external website, specifically linking to Prettier's homepage.

LANGUAGE: JSX
CODE:
<ExternalLink href="http://example.com">Prettier</ExternalLink>

----------------------------------------

TITLE: Embedding Image Asset in Markdown
DESCRIPTION: Simple markdown syntax for embedding an external image using the image reference format with an empty alt text and /url as the source path.

LANGUAGE: markdown
CODE:
![](/url)

----------------------------------------

TITLE: Formatting Markdown Link with Whitespace
DESCRIPTION: Demonstrates markdown link syntax with extra whitespace inside the square brackets. Shows how leading and trailing spaces are handled within link markup.

LANGUAGE: markdown
CODE:
[[ Here is a link with leading and trailing whitespace.    ]]

----------------------------------------

TITLE: Markdown Footnote Reference
DESCRIPTION: Example of creating a footnote reference using AsyncGeneratorFunction as the identifier.

LANGUAGE: markdown
CODE:
[^See`AsyncGeneratorFunction`]

----------------------------------------

TITLE: Defining YAML Configuration Block
DESCRIPTION: A YAML block defining a key-value pair 'hello: world' and a number value '123'. This structure is commonly used for configuration settings or data representation.

LANGUAGE: YAML
CODE:
---
- hello:    world
-         123
---

----------------------------------------

TITLE: Text Pattern - Centered Letter
DESCRIPTION: Creates a pattern with the letter 'a' centered between dashes

LANGUAGE: text
CODE:
---a---

----------------------------------------

TITLE: Formatting Reference-Style Links in Markdown
DESCRIPTION: Demonstrates the usage of reference-style links in Markdown where links are defined separately from where they are used. Shows three link references ([foo], [bar], [baz]) and two link definitions, creating a simple link structure.

LANGUAGE: markdown
CODE:
[foo][bar][baz]

[baz]: /url1
[foo]: /url2

----------------------------------------

TITLE: Markdown Text Formatting Pattern
DESCRIPTION: Demonstrates text formatting using underscores and backticks in markdown syntax. The pattern shows a combination of emphasis (underscores) and inline code (backticks).

LANGUAGE: markdown
CODE:
_a `_`_

----------------------------------------

TITLE: Creating Markdown Link with URI Path
DESCRIPTION: Demonstrates how to create a markdown link that references a URI path. Shows basic markdown link syntax with text in square brackets followed by URI in parentheses.

LANGUAGE: markdown
CODE:
[link](/my uri)

----------------------------------------

TITLE: Defining and Using Markdown Link References
DESCRIPTION: This snippet shows how to define a link reference and use it for both an image and an empty link in Markdown. It demonstrates the syntax for reference-style links and images.

LANGUAGE: markdown
CODE:
![foo] 
[]

[foo]: /url "title"

----------------------------------------

TITLE: Defining and Using a Markdown Link Reference
DESCRIPTION: This snippet shows how to create a link reference definition and then use it in Markdown. The reference 'foo' is defined with a URL, and then used later in the document.

LANGUAGE: markdown
CODE:
[foo]: /url

[foo]

----------------------------------------

TITLE: Defining Reference-Style Image Link in Markdown
DESCRIPTION: Shows how to create a reference-style image link in Markdown using square brackets followed by the reference definition below. The reference is case-insensitive.

LANGUAGE: markdown
CODE:
![foo][bar]

[BAR]: /url

----------------------------------------

TITLE: Inserting Image in Markdown
DESCRIPTION: This snippet demonstrates how to insert an image using Markdown syntax. The image is referenced with the alt text 'hello', but the actual image URL is not provided.

LANGUAGE: markdown
CODE:
![hello]

----------------------------------------

TITLE: Creating Markdown Link with URL Parameters
DESCRIPTION: Demonstrates how to create a markdown link with URL parameters for language and currency specifications. The link points to a localhost test endpoint.

LANGUAGE: markdown
CODE:
[Test](http://localhost:8080/test?language=DE&currency=EUR)

----------------------------------------

TITLE: Defining Prettier Configuration in YAML
DESCRIPTION: This YAML snippet shows a basic Prettier configuration with two list items. It demonstrates different indentation levels, which may be intentional or a formatting issue.

LANGUAGE: yaml
CODE:
  - foo

	bar

----------------------------------------

TITLE: Creating Reference Link Definition in Markdown
DESCRIPTION: Defines a link reference labeled 'alpha' that points to http://example.com. This reference can be used elsewhere in the markdown document to create links using the [text][alpha] syntax.

LANGUAGE: markdown
CODE:
[alpha]: http://example.com

----------------------------------------

TITLE: Demonstrating Markdown Emphasis Syntax
DESCRIPTION: Shows a markdown text pattern with asterisk and underscore emphasis markers used in an overlapping pattern. This demonstrates how markdown parsers handle mixed emphasis delimiters.

LANGUAGE: markdown
CODE:
*foo _bar* baz_

----------------------------------------

TITLE: Formatting Nested Bold Text in Markdown
DESCRIPTION: Shows how to format text with nested bold syntax using Markdown asterisks. Demonstrates a case with overlapping bold delimiters.

LANGUAGE: markdown
CODE:
**foo **bar baz**

----------------------------------------

TITLE: Defining Reference-Style Link with Title in Markdown
DESCRIPTION: This snippet demonstrates how to define a reference-style link in Markdown. It includes the reference key, URL, and an optional title in quotes.

LANGUAGE: markdown
CODE:
[foo]: /url "title"

----------------------------------------

TITLE: Handling comments in object patterns
DESCRIPTION: Shows how Prettier handles comments inside object patterns in TypeScript.

LANGUAGE: typescript
CODE:
// Before
export default (
  {
    foo,
    bar
    // comment
    // comment 2
  }: {
    foo?: Object,
    bar?: Object
  }
) => {};

// After
export default (
  {
    foo,
    bar
  }: {
    // comment
    foo?: Object,
    // comment 2
    bar?: Object,
  },
) => {}


----------------------------------------

TITLE: Defining and Using Markdown Link References
DESCRIPTION: This snippet demonstrates how to define link references in Markdown and then use them in the text. It includes examples of single-line and multi-line reference definitions with optional link titles.

LANGUAGE: markdown
CODE:
[foo]: /foo-url "foo"
[bar]: /bar-url
  "bar"
[baz]: /baz-url

[foo],
[bar],
[baz]

----------------------------------------

TITLE: Creating and Using a Link Reference in Markdown
DESCRIPTION: This snippet demonstrates how to create a link reference and use it in Markdown. It defines a reference named 'foo' with a URL and title, then uses this reference in an image link.

LANGUAGE: markdown
CODE:
![foo][]

[foo]: /url "title"

----------------------------------------

TITLE: Inserting Reference-Style Image Link in Markdown
DESCRIPTION: A Markdown image syntax using reference-style linking. The syntax attempts to display an image where the source URL is defined elsewhere through a reference named 'world'. If the reference is not defined, this will result in a broken image link.

LANGUAGE: markdown
CODE:
![][world]

----------------------------------------

TITLE: Inserting Image Reference in Markdown
DESCRIPTION: This snippet shows how to insert an image using a reference-style link in Markdown. The actual image source is defined elsewhere in the document.

LANGUAGE: markdown
CODE:
![hello][]

----------------------------------------

TITLE: Empty Code Block with Two Spaces
DESCRIPTION: A code block containing two space characters.

LANGUAGE: text
CODE:
  

----------------------------------------

TITLE: Dollar Sign Escape Patterns
DESCRIPTION: Shows four different patterns for escaping dollar signs, from a literal dollar sign to multiple backslash escapes.

LANGUAGE: plaintext
CODE:
$

\$

\\$

\\\$

----------------------------------------

TITLE: Applying Bold Emphasis in Markdown
DESCRIPTION: This snippet demonstrates how to apply bold emphasis to text in Markdown using double underscores.

LANGUAGE: Markdown
CODE:
__foo__

----------------------------------------

TITLE: Applying Bold and Italic Formatting in Markdown
DESCRIPTION: Demonstrates how to apply both bold and italic formatting (strong emphasis) to text in Markdown using triple asterisks.

LANGUAGE: markdown
CODE:
***foo***

----------------------------------------

TITLE: Creating Multiple Reference Links in Markdown
DESCRIPTION: Shows how to create and define multiple reference-style links in Markdown. Uses two references 'foo' and 'bar' with their corresponding URLs defined at the bottom of the document.

LANGUAGE: markdown
CODE:
[foo][bar]

[foo]: /url1
[bar]: /url2

----------------------------------------

TITLE: Formatting Markdown Blockquote with Heading
DESCRIPTION: Demonstrates Markdown blockquote syntax with a heading and text content. Shows how to format a blockquote section with multiple lines.

LANGUAGE: markdown
CODE:
> # Foo
> bar
baz

----------------------------------------

TITLE: Creating Link Reference with Image in Markdown
DESCRIPTION: Shows how to create a link reference that combines image syntax with a reference definition. The first line uses the image syntax with a reference ID, while the second line defines the reference with a URL and title text.

LANGUAGE: markdown
CODE:
\!\[foo]

[foo]: /url "title"

----------------------------------------

TITLE: Defining Markdown Footnote Reference
DESCRIPTION: This snippet defines a Markdown footnote reference. It's not clear what content or purpose this footnote serves without additional context.

LANGUAGE: markdown
CODE:
[^hello]

----------------------------------------

TITLE: HTML-style Prettier Ignore Comment
DESCRIPTION: Shows how to use HTML comment syntax to ignore Prettier formatting for a JavaScript code block.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

----------------------------------------

TITLE: Localhost URL Reference
DESCRIPTION: URL reference for a localhost endpoint on port 5001 accessing the 'foo' path.

LANGUAGE: plaintext
CODE:
<localhost:5001/foo>

----------------------------------------

TITLE: Markdown Footnotes with Block Quotes
DESCRIPTION: Shows how to include block quotes within markdown footnotes, including both single-line and multi-line block quotes.

LANGUAGE: markdown
CODE:
[^a]: > 123
[^a]: a
[^a]: > 123

----------------------------------------

TITLE: Setting Custom Prettier Option
DESCRIPTION: This line appears to be setting a custom option or rule for Prettier. The exact purpose and effect of '__foo___' is not clear without more context.

LANGUAGE: plaintext
CODE:
__foo___

----------------------------------------

TITLE: Formatting Text with Double Underscores in Markdown
DESCRIPTION: Shows text wrapped in double underscores (__) which is commonly used for bold text formatting in markdown-style syntax.

LANGUAGE: markdown
CODE:
__foo__bar

----------------------------------------

TITLE: Markdown Link Reference with Nested Brackets
DESCRIPTION: Example of Markdown link reference syntax using nested square brackets with a subsequent reference definition. Shows how reference-style links are structured with separate definition and usage.

LANGUAGE: markdown
CODE:
[[bar [foo]

[foo]: /url

----------------------------------------

TITLE: Handling comments in binary expressions
DESCRIPTION: Shows how Prettier handles comments in binary expressions.

LANGUAGE: javascript
CODE:
// Before
a = Math.random() * (yRange * (1 - minVerticalFraction)) +
  minVerticalFraction * yRange// Comment
   -
  offset;

// After
a =
  // Comment
  Math.random() * (yRange * (1 - minVerticalFraction)) +
  minVerticalFraction * yRange -
  offset;


----------------------------------------

TITLE: Creating Basic Markdown List
DESCRIPTION: Demonstrates a simple unordered markdown list with three items, where one item is empty. Uses standard markdown hyphen syntax for list items.

LANGUAGE: markdown
CODE:
- foo
-
- bar

----------------------------------------

TITLE: Comparing HTML Anchor Tags with Different Quotation Styles
DESCRIPTION: This snippet shows two HTML anchor tags with different quotation styles for the href attribute. The first example uses double quotes, while the second uses single quotes.

LANGUAGE: HTML
CODE:
<a href="hi'"> <a href=hi'>

----------------------------------------

TITLE: Ignoring JavaScript Variable Declarations
DESCRIPTION: This example demonstrates how to use prettier-ignore in a JavaScript code block to prevent formatting of variable declarations, keeping them on separate lines.

LANGUAGE: javascript
CODE:
// prettier-ignore
const x = 1,
b = 2

----------------------------------------

TITLE: Simple Number Display
DESCRIPTION: A basic code block containing only the number 123 with surrounding whitespace. This appears to be a placeholder or example content without specific programming language syntax.

LANGUAGE: text
CODE:
123

----------------------------------------

TITLE: Formatting Multi-line HTML Link
DESCRIPTION: Demonstrates an HTML anchor tag with a line-continued href attribute value using a backslash. Shows how to split a long URL or link text across multiple lines while maintaining valid HTML syntax.

LANGUAGE: html
CODE:
<a href="foo\
bar">

----------------------------------------

TITLE: Creating Markdown Link Reference with Emphasized Text
DESCRIPTION: This snippet demonstrates how to create a link reference in Markdown with emphasized text in both the link and the reference definition. It uses asterisks for emphasis and square brackets for the link syntax.

LANGUAGE: markdown
CODE:
[[*foo* bar]]

[*foo* bar]: /url "title"

----------------------------------------

TITLE: Basic Markdown Text Formatting
DESCRIPTION: Demonstrates basic markdown text with indentation and horizontal rule formatting

LANGUAGE: markdown
CODE:
Foo
    ---

----------------------------------------

TITLE: Configuring String Formatting with Prettier in JavaScript
DESCRIPTION: This snippet shows a string wrapped in underscores and double quotes, likely used to test or demonstrate Prettier's string formatting behavior.

LANGUAGE: JavaScript
CODE:
a_"foo"_

----------------------------------------

TITLE: Configuring Asterisk Formatting in Prettier
DESCRIPTION: This snippet shows a configuration or usage example for Prettier, focusing on the formatting of asterisks. It may represent a part of a Prettier configuration file or a code snippet that Prettier would format.

LANGUAGE: plaintext
CODE:
foo **\***

----------------------------------------

TITLE: Configuring String Formatting with Prettier in JavaScript
DESCRIPTION: This snippet shows a string wrapped in underscores and double quotes, likely used to test or demonstrate Prettier's string formatting behavior.

LANGUAGE: JavaScript
CODE:
a_"foo"_

----------------------------------------

TITLE: Markdown Link Reference with Emphasis
DESCRIPTION: Creates a markdown link reference where the reference text contains italic emphasis (*foo*) and a url with optional title. The first line shows the link reference usage and the second line defines the reference.

LANGUAGE: markdown
CODE:
[*foo* bar]

[*foo* bar]: /url "title"

----------------------------------------

TITLE: Creating a Multi-line Blockquote in Markdown
DESCRIPTION: This snippet demonstrates how to create a blockquote in Markdown that spans multiple lines. The '>' symbol is used at the start of each line to indicate a continuation of the quote.

LANGUAGE: markdown
CODE:
> 1. > Blockquote
continued here.

----------------------------------------

TITLE: Combining HTML and Markdown Syntax
DESCRIPTION: Shows how to wrap Markdown-formatted text within HTML div tags. The example demonstrates emphasized text using Markdown syntax (*) inside HTML structure.

LANGUAGE: html
CODE:
<div>
*Emphasized* text.
</div>

----------------------------------------

TITLE: Formatting HTML Comment with Nested Dashes
DESCRIPTION: Shows an HTML comment containing text that includes double hyphens, which normally terminate comments. This illustrates how to handle comment syntax that contains potential termination sequences.

LANGUAGE: html
CODE:
foo <!-- not a comment -- two hyphens -->

----------------------------------------

TITLE: Listing Directory Contents in Shell
DESCRIPTION: This shell command lists the contents of the current directory in long format, showing detailed information about each file and directory.

LANGUAGE: shell
CODE:
ls -l

----------------------------------------

TITLE: Markdown Italics with Line Continuation
DESCRIPTION: Shows how to create italic text in Markdown that spans multiple lines using a backslash for line continuation. The asterisks denote italic text formatting while the backslash prevents line breaks.

LANGUAGE: markdown
CODE:
*foo\
bar*

----------------------------------------

TITLE: Processing Nested Markdown Link References
DESCRIPTION: Shows a Markdown syntax example with a nested reference-style link [foo][ref[bar]] and its corresponding reference definition. This demonstrates complex reference link handling.

LANGUAGE: markdown
CODE:
[foo][ref[bar]]

[ref[bar]]: /uri

----------------------------------------

TITLE: Null and Empty Structures in JavaScript
DESCRIPTION: Examples of null value and empty array/object literals.

LANGUAGE: javascript
CODE:
null

LANGUAGE: javascript
CODE:
[]

LANGUAGE: javascript
CODE:
{}

----------------------------------------

TITLE: Formatting Markdown Link with Italic Text
DESCRIPTION: Example showing how to combine italic text formatting with a markdown link. Demonstrates nesting of italic markers (*) around both the link text and the entire link structure.

LANGUAGE: markdown
CODE:
*foo [*bar*](/url)*

----------------------------------------

TITLE: Creating Markdown List
DESCRIPTION: This snippet demonstrates how to create a simple unordered list in Markdown. It includes three list items separated by blank lines.

LANGUAGE: markdown
CODE:
- a
- b

- c

----------------------------------------

TITLE: Formatting Markdown Link with Escaped Brackets
DESCRIPTION: Shows how to format a Markdown link using reference-style syntax with escaped brackets in the reference identifier. The link text 'foo' points to a reference ID that contains an escaped opening bracket.

LANGUAGE: markdown
CODE:
[foo][ref\[]

[ref\[]: /uri

----------------------------------------

TITLE: Formatting function calls with inline comments
DESCRIPTION: Demonstrates how Prettier handles inline comments in function calls with multiple arguments.

LANGUAGE: javascript
CODE:
// Before
runtimeAgent.getProperties(objectId, false, false, false, ( // ownProperties // accessorPropertiesOnly // generatePreview
  error,
  properties,
  internalProperties
) => {
  return 1;
});

// After
runtimeAgent.getProperties(
  objectId,
  false, // ownProperties
  false, // accessorPropertiesOnly
  false, // generatePreview
  (error, properties, internalProperties) => {
    return 1
  },
);


----------------------------------------

TITLE: Formatting Markdown Link with Escaped Characters
DESCRIPTION: This snippet demonstrates how to create a Markdown link with special characters in the URL and title. The asterisk in the URL and title is escaped with a backslash.

LANGUAGE: markdown
CODE:
[foo](/bar\* "ti\*tle")

----------------------------------------

TITLE: Line Continuation with Backslash
DESCRIPTION: Shows how to continue a string across multiple lines using a backslash character. The backslash allows the content to continue on the next line without introducing a line break in the final output.

LANGUAGE: text
CODE:
foo\
baz

----------------------------------------

TITLE: Formatting URL Link with Spaces in Markdown
DESCRIPTION: Shows how to format a URL that contains spaces using angle bracket notation in Markdown. This syntax allows URLs with spaces to be properly parsed as a single link.

LANGUAGE: markdown
CODE:
<http://foo.bar/baz bim>

----------------------------------------

TITLE: Creating Fenced Code Block in Markdown
DESCRIPTION: This snippet demonstrates how to create a fenced code block in Markdown using triple backticks (```) at the beginning and end of the block.

LANGUAGE: markdown
CODE:
```
Fenced Code Block
Fenced Code Block
Fenced Code Block
Fenced Code Block
Fenced Code Block
```

----------------------------------------

TITLE: Encoding HTML Entities in Attribute Values
DESCRIPTION: This snippet demonstrates how to use HTML entity encoding within an attribute value. It shows a link (anchor tag) with an href attribute containing the encoded character &ouml; (ö).

LANGUAGE: HTML
CODE:
foo <a href="&ouml;">

----------------------------------------

TITLE: Defining and Using Markdown Link References
DESCRIPTION: This snippet demonstrates how to define and use Markdown link references. It shows that reference matching is case-insensitive, as '[foo]' matches '[bar]' despite different casing.

LANGUAGE: markdown
CODE:
[foo][BaR]

[bar]: /url "title"

----------------------------------------

TITLE: Declaring Integer Variable in C
DESCRIPTION: Basic integer variable declaration and initialization in C programming language. Demonstrates simple variable assignment syntax.

LANGUAGE: c
CODE:
int x = 33;

----------------------------------------

TITLE: Formatting Nested Bold and Italic Text in Markdown
DESCRIPTION: Demonstrates how to apply both italic and bold formatting to text using asterisk syntax in Markdown. The text 'foo' is italicized while 'bar' is both bold and italic.

LANGUAGE: markdown
CODE:
*foo **bar***

----------------------------------------

TITLE: Creating Unordered List in Markdown
DESCRIPTION: This snippet shows how to create a simple unordered list in Markdown. Each list item is denoted by a hyphen followed by a space.

LANGUAGE: markdown
CODE:
- foo
- bar

----------------------------------------

TITLE: Formatting Complex Markdown Link with URL and Label
DESCRIPTION: This snippet demonstrates a Markdown link format that includes a label 'foo' and a URL 'http://example.com/?search=' wrapped in angle brackets, followed by a label in parentheses. This format is used for creating links with custom text and specific URLs in Markdown documents.

LANGUAGE: markdown
CODE:
[foo<http://example.com/?search=](uri)>

----------------------------------------

TITLE: Formatting Italic Text in Markdown
DESCRIPTION: Shows how to format text in italic using markdown syntax with surrounding asterisks.

LANGUAGE: markdown
CODE:
*foo bar*

----------------------------------------

TITLE: Basic Text Alignment
DESCRIPTION: Shows text content with words 'foo' and 'baz' on separate lines demonstrating vertical spacing

LANGUAGE: text
CODE:
foo
baz

----------------------------------------

TITLE: Blockquote with Ignored Markdown Formatting
DESCRIPTION: This example demonstrates using prettier-ignore within a blockquote in Markdown to preserve the original formatting of a list item with a long paragraph.

LANGUAGE: markdown
CODE:
```md
> ```md
> <!-- prettier-ignore -->
> - This is a long long
>   long long long long
>   long long paragraph.
> ```
```

----------------------------------------

TITLE: Malformed HTML Link Tag
DESCRIPTION: Example of incorrect HTML anchor tag syntax where the closing tag appears before the opening attributes. This represents invalid HTML that would need to be fixed.

LANGUAGE: html
CODE:
</a href="foo">

----------------------------------------

TITLE: Formatting Markdown Link
DESCRIPTION: Demonstrates standard Markdown link syntax with a text label and URI target

LANGUAGE: markdown
CODE:
[link] bar](/uri)

----------------------------------------

TITLE: Defining Markdown Link Reference
DESCRIPTION: This snippet shows how to create a link reference in Markdown. It defines a reference 'foo' and its corresponding URL.

LANGUAGE: markdown
CODE:
[foo]

[foo]: url

----------------------------------------

TITLE: Applying Bold and Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to apply both bold and italic formatting to text in Markdown. It uses asterisks for emphasis, with double asterisks for bold and single asterisks for italic.

LANGUAGE: markdown
CODE:
***foo** bar*

----------------------------------------

TITLE: Formatting Nested Blockquotes in Markdown
DESCRIPTION: Demonstrates nested blockquote formatting in Markdown using the > symbol, including a heading and multiple lines of text content.

LANGUAGE: markdown
CODE:
   > # Foo
   > bar
 > baz

----------------------------------------

TITLE: Formatting Markdown Link with Inline Code
DESCRIPTION: Demonstrates how to format a Markdown link that contains inline code marked with backticks. Shows specific syntax for combining link brackets with code formatting.

LANGUAGE: markdown
CODE:
[foo`](/uri)`

----------------------------------------

TITLE: Formatting object destructuring patterns in JavaScript
DESCRIPTION: Shows how Prettier handles newlines in object destructuring patterns.

LANGUAGE: javascript
CODE:
// Before
const Component2 = ({
  props
}) => <Text>Test</Text>;

// After
const Component1 = ({ props }) => <Text>Test</Text>;


----------------------------------------

TITLE: Multiplying Three Numbers
DESCRIPTION: This expression multiplies 5, 6, and 78 together. The result of this calculation would be 2340.

LANGUAGE: Mathematical Notation
CODE:
5*6*78

----------------------------------------

TITLE: Markdown Heading Patterns with Escaping
DESCRIPTION: Examples of markdown headings at different levels (h1-h3) demonstrating the use of escaped hash symbols.

LANGUAGE: markdown
CODE:
### foo \###
## foo #\##
# foo \#

----------------------------------------

TITLE: Creating Reference-Style Links in Markdown
DESCRIPTION: This snippet demonstrates how to create and use reference-style links in Markdown. It defines a link reference 'bar' and uses it along with another reference 'foo' in the text.

LANGUAGE: markdown
CODE:
[foo] [bar]

[bar]: /url "title"

----------------------------------------

TITLE: Nested Markdown Ignore Example
DESCRIPTION: This snippet illustrates how to use prettier-ignore within a nested Markdown structure, preserving the formatting of a long paragraph in a list item.

LANGUAGE: markdown
CODE:
- test
  ```md
  <!-- prettier-ignore -->
  - This is a long long
    long long long long
    long long paragraph.
  ```

----------------------------------------

TITLE: Creating HTML Email Link with Mailto Protocol
DESCRIPTION: This HTML snippet creates a clickable email link using the 'mailto' protocol. When clicked, it will open the user's default email client with the specified email address pre-filled in the 'To' field.

LANGUAGE: HTML
CODE:
<MAILTO:FOO@BAR.BAZ>

----------------------------------------

TITLE: Malformed Markdown Link with Emphasis
DESCRIPTION: Shows an example of incorrect Markdown syntax where an emphasis marker (*) is opened but not closed within a link text, followed by a URL in parentheses.

LANGUAGE: markdown
CODE:
*[bar*](/url)

----------------------------------------

TITLE: Demonstrating HTML Comments and Thematic Breaks
DESCRIPTION: This snippet shows an HTML comment used as a placeholder for continuous thematic breaks, followed by three thematic break elements with increasing indentation.

LANGUAGE: HTML
CODE:
<!-- placeholder for continuous thematic breaks not being treated as yaml -->

 ***
  ***
   ***

----------------------------------------

TITLE: Formatting Nested Markdown Text
DESCRIPTION: Shows how to combine italic and bold formatting in markdown using asterisks. The text applies italic formatting to the entire phrase while making 'bar' bold.

LANGUAGE: markdown
CODE:
*foo **bar** baz*

----------------------------------------

TITLE: Defining and Using a Markdown Link Reference
DESCRIPTION: This snippet defines a link reference named 'foo' with a complex URL and title, then demonstrates its usage. The URL includes backslashes, and the title contains escaped quotes and backslashes.

LANGUAGE: markdown
CODE:
[foo]: /url\bar\*baz "foo\"bar\baz"

[foo]

----------------------------------------

TITLE: Creating Unordered List with Horizontal Rule in Markdown
DESCRIPTION: Demonstrates how to format an unordered list using asterisks as bullet points, with a horizontal rule separator using three asterisks.

LANGUAGE: markdown
CODE:
* Foo
* * *
* Bar

----------------------------------------

TITLE: Configuring Custom Rule in Prettier (JSON)
DESCRIPTION: This snippet defines a custom configuration option for Prettier. The exact purpose of '_foo bar _' is unclear without more context, but it likely affects how Prettier formats certain elements in the codebase.

LANGUAGE: JSON
CODE:
"_foo bar _"

----------------------------------------

TITLE: HTML Anchor Tag with Multi-line Title
DESCRIPTION: Demonstrates an HTML anchor tag with a title attribute that contains a line break and markdown horizontal rule syntax

LANGUAGE: html
CODE:
<a title="a lot
---
of dashes"/>

----------------------------------------

TITLE: Configuring ESLint with Unobtrusive Rule Sets in JSON
DESCRIPTION: This snippet shows how to extend multiple Unobtrusive rule sets in an ESLint configuration file. It includes the base set, import rules, React rules, and Flow type rules, and sets the environment to 'browser'.

LANGUAGE: json
CODE:
{
  "extends": [
    "unobtrusive",
    "unobtrusive/import",
    "unobtrusive/react",
    "unobtrusive/flowtype"
  ],
  "env": {
    "browser": true
  }
}

----------------------------------------

TITLE: Creating Reference-Style Image Link in Markdown
DESCRIPTION: This snippet shows how to create a reference-style image link in Markdown. It uses a placeholder in square brackets followed by empty square brackets.

LANGUAGE: markdown
CODE:
![Foo][]

----------------------------------------

TITLE: Variable Assignment with Underscores
DESCRIPTION: A simple variable identifier pattern with trailing underscores, likely a placeholder or example snippet.

LANGUAGE: unknown
CODE:
foo ___

----------------------------------------

TITLE: Combined HTML and Markdown Formatting
DESCRIPTION: Demonstrates mixed usage of HTML and Markdown syntax showing an anchor tag, emphasized text, and a list item.

LANGUAGE: html/markdown
CODE:
<a/>
*hi*

- one

----------------------------------------

TITLE: Applying Bold Formatting in Markdown
DESCRIPTION: This snippet demonstrates an attempt to apply bold formatting to the phrase 'foo bar' using Markdown syntax. However, the syntax is incorrect as it uses double underscores instead of double asterisks for bold formatting.

LANGUAGE: markdown
CODE:
__foo bar __

----------------------------------------

TITLE: Basic Number Comparison in JavaScript
DESCRIPTION: A function that compares two numerical inputs and returns 1 if the first number is less than both the second number and zero, otherwise returns 0. Demonstrates basic conditional logic and comparison operators.

LANGUAGE: javascript
CODE:
function matchwo(a,b)
{
  if (a < b && a < 0) then {
    return 1;

  } else {

    return 0;
  }
}

----------------------------------------

TITLE: Undefined Value in JavaScript
DESCRIPTION: Example of the undefined primitive value in JavaScript.

LANGUAGE: javascript
CODE:
undefined

----------------------------------------

TITLE: Demonstrating --use-tabs option in JavaScript
DESCRIPTION: Illustrates how the --use-tabs option replaces spaces with tabs for indentation.

LANGUAGE: javascript
CODE:
// Before
if (1) {
··console.log(); // Two spaces
}

// After
if (1) {
» console.log(); // One Tab!
}


----------------------------------------

TITLE: Demonstrating Underscore Usage in Prettier
DESCRIPTION: This snippet shows a string with double underscores, which may be used to test Prettier's formatting behavior with specific identifier patterns or naming conventions.

LANGUAGE: plaintext
CODE:
foo__bar__

----------------------------------------

TITLE: Defining and Using a Markdown Link Reference
DESCRIPTION: This snippet shows how to define a link reference '[foo]' with a URL and title, and then use it in the text. The reference is defined at the bottom of the document and can be used multiple times in the content.

LANGUAGE: markdown
CODE:
\[foo]

[foo]: /url "title"

----------------------------------------

TITLE: Defining Empty HTML Tag Structure
DESCRIPTION: This snippet shows the basic structure of an HTML tag using angle brackets. It could represent an empty tag or a placeholder for tag content.

LANGUAGE: HTML
CODE:
<
 >

----------------------------------------

TITLE: Formatting Complex Markdown Link with Reference
DESCRIPTION: Demonstrates how to create a markdown link that contains mixed formatting (italic, bold, and code) using reference-style link syntax.

LANGUAGE: markdown
CODE:
[link *foo **bar** `#`*][ref]

[ref]: /uri

----------------------------------------

TITLE: Build Specific Files
DESCRIPTION: Builds individual specified files instead of the entire project. Supports building multiple files at once.

LANGUAGE: sh
CODE:
yarn build --file=esm/parser-babel.mjs

LANGUAGE: sh
CODE:
yarn build --file=standalone.js --file=parser-meriyah.js

----------------------------------------

TITLE: Creating an Image with Link Reference in Markdown
DESCRIPTION: This snippet shows how to create an image using a link reference in Markdown. It defines an image with a placeholder text and a reference, then provides the actual URL for the reference.

LANGUAGE: markdown
CODE:
![foo][bar]

[bar]: /url

----------------------------------------

TITLE: Applying Bold Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to apply bold formatting to text in Markdown using asterisks. It shows a potential error in syntax where an extra asterisk is used.

LANGUAGE: markdown
CODE:
*foo**

----------------------------------------

TITLE: Formatting Markdown Link with Escaped Path
DESCRIPTION: Example of markdown link syntax using a path with backslash. Shows how to format a link reference with escaped characters in the URL portion.

LANGUAGE: markdown
CODE:
[link](foo\bar)

----------------------------------------

TITLE: Formatting Double Parentheses in JavaScript
DESCRIPTION: Example of JavaScript expression with double parentheses around an identifier. This pattern is often used for immediately invoked functions or explicit grouping of expressions.

LANGUAGE: javascript
CODE:
**(**foo)

----------------------------------------

TITLE: Declaring HTML5 Document Type
DESCRIPTION: This code snippet declares the document type as HTML5. It is placed at the beginning of an HTML file to ensure proper rendering and behavior in web browsers.

LANGUAGE: HTML
CODE:
<!DOCTYPE html>

----------------------------------------

TITLE: Applying Container Queries for Responsive Avatar Styling in CSS
DESCRIPTION: This CSS code defines styles for an Avatar component using nested selectors and container queries. It demonstrates how to apply different styles based on the container's width, aspect ratio, and combined width and height conditions.

LANGUAGE: pcss
CODE:
.Avatar {
  /* ... */

  &__image {
    /* ... */

    @container (width > 100px) {
      /*
      Change some styles on the image element when the container is
      wider than 100px
      */
    }
  }

  @container (aspect-ratio > 3) {
    /* Change styles on the avatar itself, when the aspect-ratio is grater than 3 */
  }

  @container (width > 100px) and (height > 100px) {
    /* ... */
  }
}

----------------------------------------

TITLE: Evaluating Nested Parentheses Expression in JavaScript
DESCRIPTION: This snippet demonstrates the use of nested parentheses in JavaScript, which could be part of a function call or a more complex expression evaluation. The inner parentheses contain a variable or function named 'foo'.

LANGUAGE: JavaScript
CODE:
__(__foo)

----------------------------------------

TITLE: Displaying Text Content
DESCRIPTION: A basic code block showing plain text content aaa followed by bbb.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: Configuring ALE Fixers for JavaScript and CSS
DESCRIPTION: Sets up ALE to use Prettier as a fixer for JavaScript and CSS files.

LANGUAGE: vim
CODE:
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\}

----------------------------------------

TITLE: Formatting Markdown Image Link with Angle Brackets
DESCRIPTION: Shows the standard Prettier formatting for a Markdown image reference link where the URL is wrapped in angle brackets. This format is commonly used when URLs contain special characters that need to be escaped.

LANGUAGE: markdown
CODE:
![foo](<url>)

----------------------------------------

TITLE: Formatting Text in Markdown with Incomplete Bold-Italic Syntax
DESCRIPTION: Example of an incomplete markdown formatting attempt that uses asterisks for combined bold and italic styling. The syntax is malformed as it's missing a closing asterisk for proper bold-italic formatting.

LANGUAGE: markdown
CODE:
**foo*

----------------------------------------

TITLE: Markdown Image Link with Title
DESCRIPTION: A Markdown image link syntax example showing image alt text, path and optional title attribute with extra spacing. Uses the standard image link format ![alt text](path "title").

LANGUAGE: markdown
CODE:
![foo bar](/path/to/train.jpg  "title"   )

----------------------------------------

TITLE: Italicizing Text in Markdown
DESCRIPTION: This snippet shows how to create italic text in Markdown using asterisks. The text between the asterisks will be rendered in italics when processed by a Markdown interpreter.

LANGUAGE: markdown
CODE:
* a *

----------------------------------------

TITLE: HTML div with text content
DESCRIPTION: Basic HTML markup showing a div element containing text 'foo' followed by an unstructured text line 'bar'

LANGUAGE: html
CODE:
<div>
foo

bar

----------------------------------------

TITLE: Indentation Pattern Example 1
DESCRIPTION: Text block with varying indentation levels, starting with no indent and increasing/decreasing through the lines.

LANGUAGE: plaintext
CODE:
- a a
   b b
    c c
   d d
  e e

----------------------------------------

TITLE: Formatting decorators in JavaScript
DESCRIPTION: Shows how Prettier handles decorators with dot notation.

LANGUAGE: javascript
CODE:
class X {
  // Before
  @action.bound
  setPrice(price) {
    this.price = price;
  }

  // After
  @action.bound setPrice(price) {
    this.price = price;
  }
}


----------------------------------------

TITLE: Testing Markdown Emphasis with Brackets
DESCRIPTION: Example demonstrating how Markdown handles unmatched emphasis markers (*) when combined with brackets, testing edge case parsing behavior.

LANGUAGE: markdown
CODE:
*foo [bar* baz]

----------------------------------------

TITLE: Displaying Basic Text Content in Plaintext
DESCRIPTION: This snippet demonstrates a simple plaintext content block. It contains a single line of text 'aaa', which could be used as a placeholder or for basic formatting tests.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: Formatting Complex Markdown Link with Nested Functions in Prettier
DESCRIPTION: This snippet shows a Markdown link where the URL contains nested function calls. It demonstrates how Prettier handles formatting for complex link structures in Markdown.

LANGUAGE: markdown
CODE:
[link](foo(and(bar)))

----------------------------------------

TITLE: Excluding Files with Prettier CLI
DESCRIPTION: This snippet demonstrates how to use negative patterns in the Prettier CLI command to exclude specific file types from formatting without modifying the .prettierignore file.

LANGUAGE: bash
CODE:
prettier . "!**/*.{js,jsx,vue}" --write

----------------------------------------

TITLE: Formatting Markdown Link References
DESCRIPTION: This snippet demonstrates the usage of Markdown link references. It includes inline references [foo], [bar], and [baz], followed by a definition for the [baz] reference.

LANGUAGE: markdown
CODE:
[foo][bar][baz]

[baz]: /url

----------------------------------------

TITLE: Formatting Plain Text with Prettier
DESCRIPTION: This snippet shows how Prettier formats plain text content, maintaining line breaks and indentation.

LANGUAGE: plaintext
CODE:
-  foo

   bar

----------------------------------------

TITLE: Applying Bold Text Formatting in Markdown
DESCRIPTION: Demonstrates how to make text bold in markdown using double asterisks surrounding the text.

LANGUAGE: markdown
CODE:
**foo**

----------------------------------------

TITLE: Formatting Backticks in JavaScript with prettier
DESCRIPTION: This code snippet demonstrates the use of backticks within a string literal, which can be a tricky case for code formatters like prettier to handle correctly. It includes both single and double backticks.

LANGUAGE: JavaScript
CODE:
`foo `` bar`

----------------------------------------

TITLE: Modifying HTML Element Content with JavaScript
DESCRIPTION: This snippet demonstrates how to use JavaScript to change the content of an HTML element with the ID 'demo'. It sets the inner HTML of the element to the string 'Hello JavaScript!'.

LANGUAGE: HTML
CODE:
<script type="text/javascript">
// JavaScript example

document.getElementById("demo").innerHTML = "Hello JavaScript!";
</script>

----------------------------------------

TITLE: Formatting Markdown Reference Link
DESCRIPTION: Shows the shorthand syntax for a Markdown reference link where the link text 'hello' is also used as the reference identifier. This syntax requires a corresponding reference definition elsewhere in the document.

LANGUAGE: markdown
CODE:
[hello][]

----------------------------------------

TITLE: Creating Multi-level Markdown Headers with Underline Syntax
DESCRIPTION: Shows two different header levels in Markdown using underline-style syntax. The first header uses equals signs for H1 level, while the second uses hyphens for H2 level. Both contain the text 'Foo *bar*' where the word 'bar' is italicized.

LANGUAGE: markdown
CODE:
Foo *bar*
=========

Foo *bar*
---------

----------------------------------------

TITLE: Basic Text Block with Tildes
DESCRIPTION: A simple text content block delimited by tilde characters showing different delimiter styles.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: CSS File Example
DESCRIPTION: Sample CSS file content used to demonstrate stdin-filepath usage.

LANGUAGE: css
CODE:
.name {
  display: none;
}

----------------------------------------

TITLE: Formatting Reference-Style Link in Markdown
DESCRIPTION: This snippet shows how to create a reference-style link in Markdown. It includes the link text in square brackets, followed by a separate line defining the link URL.

LANGUAGE: markdown
CODE:
[foo] bar

[foo]: /url

----------------------------------------

TITLE: Markdown Link Reference Definition and Usage
DESCRIPTION: Shows a markdown link reference definition ([FOO]: /url) and its subsequent usage with a different case ([Foo]). This demonstrates how markdown handles case-insensitive link reference matching.

LANGUAGE: markdown
CODE:
[FOO]: /url

[Foo]

----------------------------------------

TITLE: Creating an HTML Anchor Tag with Empty href
DESCRIPTION: This snippet demonstrates how to create an HTML anchor tag with an empty href attribute. The href value is set to an empty string, which is properly escaped.

LANGUAGE: HTML
CODE:
<a href="\""></a>

----------------------------------------

TITLE: Markdown Link with HTML Entities
DESCRIPTION: A markdown link syntax that includes HTML entity-encoded characters (ö) in both the URL and title attribute. Used to test proper handling of HTML entities in markdown parsing.

LANGUAGE: markdown
CODE:
[foo](/f&ouml;&ouml; "f&ouml;&ouml;")

----------------------------------------

TITLE: Formatting Command Line Output in Markdown
DESCRIPTION: Demonstrates how to format a command line prompt and output using markdown syntax with a separator line.

LANGUAGE: markdown
CODE:
\> foo
------

----------------------------------------

TITLE: Markdown Footnote Definition
DESCRIPTION: Shows how to define a footnote that links to an index.html file.

LANGUAGE: markdown
CODE:
[^See`AsyncGeneratorFunction`]: ./index.html

----------------------------------------

TITLE: Flow Generics Trailing Comma Implementation
DESCRIPTION: Adds trailing commas to Flow generic type declarations when --trailing-comma=all option is enabled

LANGUAGE: typescript
CODE:
type Errors = Immutable.Map<\n  Ahohohhohohohohohohohohohohooh,\n  Fbt | Immutable.Map<ErrorIndex, Fbt>,\n>;

----------------------------------------

TITLE: Formatting URL with Query Parameters
DESCRIPTION: Example URL demonstrating the structure with multiple query parameters including a test query, id, and boolean flag.

LANGUAGE: plaintext
CODE:
http://foo.bar.baz/test?q=hello&id=22&boolean

----------------------------------------

TITLE: Empty Code Block with 'aa' Language Identifier
DESCRIPTION: An empty code block that uses 'aa' as its language identifier. This appears to be either a placeholder or an invalid language specification.

LANGUAGE: aa
CODE:
 

----------------------------------------

TITLE: Rendering HTML Image with Special Characters in Attributes
DESCRIPTION: This snippet demonstrates an HTML img tag with a src attribute and a title attribute containing a special character (*). It showcases how Prettier handles attribute formatting and escaping in HTML.

LANGUAGE: HTML
CODE:
*<img src="foo" title="*"/>

----------------------------------------

TITLE: Running Format Tests with JavaScript Parsers
DESCRIPTION: Example of running format tests with multiple parsers (babel, flow, typescript) using the runFormatTest function.

LANGUAGE: javascript
CODE:
runFormatTest(import.meta, ["babel", "flow", "typescript"]);

----------------------------------------

TITLE: Defining Link Reference in Markdown
DESCRIPTION: This snippet demonstrates how to define a link reference in Markdown. It creates a reference named 'Foo bar' pointing to the URL '/url'.

LANGUAGE: markdown
CODE:
[Foo
  bar]: /url

----------------------------------------

TITLE: Formatting Template Literal with Escaped Backtick in JavaScript
DESCRIPTION: Shows how to include a backtick character within a template literal string by escaping it. The code creates a template literal containing 'foo`bar'.

LANGUAGE: javascript
CODE:
`foo\`bar`

----------------------------------------

TITLE: Initializing Empty Array in JavaScript
DESCRIPTION: This snippet demonstrates the creation of an empty array using square brackets in JavaScript. Empty arrays are useful as starting points for dynamically populating data structures.

LANGUAGE: JavaScript
CODE:
[]

----------------------------------------

TITLE: Configuring Prettier for JavaScript
DESCRIPTION: This code snippet defines a Prettier configuration object with various formatting rules for JavaScript projects. It specifies preferences for line length, quote style, semicolon usage, and other code style options.

LANGUAGE: JavaScript
CODE:
module.exports = {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: true,
  singleQuote: true,
  quoteProps: 'as-needed',
  jsxSingleQuote: false,
  trailingComma: 'all',
  bracketSpacing: true,
  bracketSameLine: false,
  arrowParens: 'always',
  rangeStart: 0,
  rangeEnd: Infinity,
  parser: null,
  filepath: null,
  requirePragma: false,
  insertPragma: false,
  proseWrap: 'preserve',
  htmlWhitespaceSensitivity: 'css',
  vueIndentScriptAndStyle: false,
  endOfLine: 'lf',
  embeddedLanguageFormatting: 'auto',
  singleAttributePerLine: false,
};

----------------------------------------

TITLE: Markdown Reference Definition
DESCRIPTION: Shows how to define a reference that links to an index.html file.

LANGUAGE: markdown
CODE:
[   See   `AsyncGeneratorFunction`   ]: ./index.html

----------------------------------------

TITLE: Formatting Email Address in Angular Template
DESCRIPTION: This snippet shows how to format an email address within Angular template syntax. The email address is enclosed in angle brackets, which is a common format for displaying email addresses in HTML or text.

LANGUAGE: html
CODE:
<foo\+@bar.example.com>

----------------------------------------

TITLE: Creating HTML Div with ID and Markdown Emphasis
DESCRIPTION: This snippet demonstrates the creation of an HTML div element with an id attribute, followed by a line of Markdown-style text emphasis. It showcases the mixing of HTML and Markdown syntax in a single document.

LANGUAGE: HTML
CODE:
<div id="foo"
*hi*

----------------------------------------

TITLE: HTML div with Markdown Text
DESCRIPTION: A div element containing markdown-formatted text with asterisk emphasis. Shows two separate lines of emphasized text with spacing between them.

LANGUAGE: html
CODE:
<div>
*foo*

*bar*

----------------------------------------

TITLE: Applying Bold Formatting in Markdown
DESCRIPTION: This snippet shows how to apply bold formatting to text in Markdown using asterisks. It demonstrates partial bold formatting within a word.

LANGUAGE: markdown
CODE:
***foo**

----------------------------------------

TITLE: Sample Placeholder Text
DESCRIPTION: A non-functional code block containing placeholder text 'aaa'. This appears to be an example or test case rather than actual implementation code.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: Formatting Text with Indentation
DESCRIPTION: Demonstrates text formatting with a dash prefix and nested indentation

LANGUAGE: plaintext
CODE:
- foo

      bar

----------------------------------------

TITLE: Creating Markdown List with Mixed Spacing
DESCRIPTION: Demonstrates a Markdown unordered list using hyphens as bullet points, with varied spacing and indentation between items.

LANGUAGE: markdown
CODE:
- a
- b

  c
- d

----------------------------------------

TITLE: Demonstrating Markdown Header Formatting Styles
DESCRIPTION: This snippet showcases three different ways to create headers in Markdown. It includes an underlined header with dashes, an underlined header with equal signs, and an ATX-style header with hash symbols.

LANGUAGE: markdown
CODE:
   Foo
---

  Foo
-----

  Foo
  ===

----------------------------------------

TITLE: Rendering Basic JSX Element
DESCRIPTION: Simple example of rendering a div element with text content using JSX syntax.

LANGUAGE: jsx
CODE:
<div>foo</div>

----------------------------------------

TITLE: Ignoring Files with .prettierignore
DESCRIPTION: Example of using .prettierignore file to exclude files from Prettier formatting

LANGUAGE: text
CODE:
dist/
package.json

----------------------------------------

TITLE: Using Responsive Image Component in JSX
DESCRIPTION: Example of using a custom responsive-image React component with a src attribute set to a jpg file.

LANGUAGE: jsx
CODE:
Foo <responsive-image src="foo.jpg" />

----------------------------------------

TITLE: Defining and Using Markdown Link Reference with Line Break in Title
DESCRIPTION: Demonstrates how to define a Markdown link reference with a title containing a blank line, followed by using that reference. The reference defines a URL and title for 'foo' and then references it.

LANGUAGE: markdown
CODE:
[foo]: /url 'title

with blank line'

[foo]

----------------------------------------

TITLE: Markdown Text Emphasis
DESCRIPTION: Demonstrates mixed bold and italic text formatting in Markdown using asterisks.

LANGUAGE: markdown
CODE:
**foo*bar**

----------------------------------------

TITLE: Nested Markdown Emphasis
DESCRIPTION: Demonstrates nested markdown emphasis syntax with bold and italic formatting. Shows mixed use of asterisks for both bold and italic emphasis.

LANGUAGE: markdown
CODE:
**foo*bar*baz**

----------------------------------------

TITLE: Applying Emphasis in Markdown
DESCRIPTION: This snippet shows how to apply emphasis to part of a text string using double underscores in Markdown. The result will be that 'bar' appears in bold or emphasized format.

LANGUAGE: markdown
CODE:
__foo bar__

----------------------------------------

TITLE: Formatting Text with Underscores in Markdown
DESCRIPTION: Demonstrates text formatting using underscores in Markdown syntax. The pattern shows multiple underscores surrounding text which could be used for italic or bold formatting depending on interpretation.

LANGUAGE: markdown
CODE:
_foo_bar_baz_

----------------------------------------

TITLE: Creating Nested Markdown List with Irregular Spacing
DESCRIPTION: This snippet shows how to create a nested Markdown list with three levels of indentation, followed by a standalone item with excessive vertical spacing.

LANGUAGE: markdown
CODE:
- foo
  - bar
    - baz


      bim

----------------------------------------

TITLE: Markdown Headings with Indentation
DESCRIPTION: Shows a sequence of markdown headings with different levels (h3, h2, h1) and varying indentation. Each heading uses the text 'foo'.

LANGUAGE: markdown
CODE:
 ### foo
  ## foo
   # foo

----------------------------------------

TITLE: Formatting a Template Literal in JavaScript
DESCRIPTION: This snippet shows a template literal containing a number. It demonstrates how Prettier formats simple JavaScript expressions.

LANGUAGE: javascript
CODE:
`123`

----------------------------------------

TITLE: Markdown Heading
DESCRIPTION: Level 1 heading example using hash symbol

LANGUAGE: markdown
CODE:
# foo

----------------------------------------

TITLE: Visualizing File Changes with Diff Notation in Plaintext
DESCRIPTION: This snippet demonstrates a basic diff output, showing lines that have been removed (-) and added (+) in a file or project. It's a common format used in version control systems and code review tools to highlight changes.

LANGUAGE: plaintext
CODE:
- foo
- bar
+ baz

----------------------------------------

TITLE: Formatting Text with Markdown Emphasis
DESCRIPTION: Shows the usage of underscore characters for bold and italic text formatting in Markdown. Double underscores create bold text, while single underscores create italic text.

LANGUAGE: markdown
CODE:
__foo _bar_ baz__

----------------------------------------

TITLE: Formatting Asterisks and Parentheses with Prettier
DESCRIPTION: This snippet shows a specific case of nested asterisks and parentheses. It likely tests how Prettier handles the formatting of such constructs.

LANGUAGE: plaintext
CODE:
*(*foo*)*

----------------------------------------

TITLE: Creating Internal Reference Link in Markdown
DESCRIPTION: Demonstrates how to create an internal reference link in Markdown that points to an anchor with ID 'world'. Uses the standard Markdown link syntax with a hash symbol for internal reference.

LANGUAGE: markdown
CODE:
[hello](#world)

----------------------------------------

TITLE: Displaying Console Output with Multiple Prompt Levels
DESCRIPTION: Shows a sequence of console output lines with varying prompt symbols (>>>, >, >>) indicating different levels or contexts of output.

LANGUAGE: console
CODE:
>>> foo
> bar
>>baz

----------------------------------------

TITLE: Indented Text Example
DESCRIPTION: Shows text 'foo' indented with a greater than symbol and tab characters.

LANGUAGE: text
CODE:
>		foo

----------------------------------------

TITLE: Displaying Centered Logo in HTML for Prettier Project
DESCRIPTION: This HTML snippet centers and displays the Prettier project logo. It uses a paragraph tag with center alignment and an image tag to show the logo. The code is wrapped in HTML comments to disable and re-enable linting for this specific section.

LANGUAGE: HTML
CODE:
<!--lint disable no-html-->
<p align="center"><img src="logo/vertical.png" alt="labelify" height="150px"></p>
<!--lint enable no-html-->

----------------------------------------

TITLE: Formatting Template Literals with Expressions in JavaScript
DESCRIPTION: Illustrates how Prettier handles template literals with expressions, avoiding breaks for single identifiers.

LANGUAGE: javascript
CODE:
const foo = `Hello ${username}. Today is ${month} ${day}. You have ${newMessages} new messages`.

----------------------------------------

TITLE: Markdown Code Block
DESCRIPTION: Multi-line code block using triple backticks

LANGUAGE: markdown
CODE:
```
foo
```

----------------------------------------

TITLE: Formatting Text with Asterisks in Markdown
DESCRIPTION: This snippet shows how asterisks can be used in Markdown to create emphasis or unordered list items. The exact rendering depends on the Markdown parser and surrounding context.

LANGUAGE: markdown
CODE:
*foo bar *

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: This snippet demonstrates how to format text as bold in Markdown using asterisks. Four asterisks are used on each side of the text to create a strong emphasis.

LANGUAGE: Markdown
CODE:
****foo****

----------------------------------------

TITLE: Processing Markdown Underscore Formatting
DESCRIPTION: Example showing different patterns of underscore emphasis in markdown text. Includes single underscore, double underscore, and combined underscore patterns for text emphasis.

LANGUAGE: markdown
CODE:
__foo, __bar__, baz__

----------------------------------------

TITLE: Variable Declaration
DESCRIPTION: Simple variable declaration showing just an identifier 'foo' without any assignment or context.

LANGUAGE: unknown
CODE:
foo

----------------------------------------

TITLE: Improved Word Wrapping in JSX
DESCRIPTION: Demonstrates improvements in word wrapping for JSX expressions in JavaScript.

LANGUAGE: jsx
CODE:
// Input
br_triggers_expression_break =
  <div><br />
  text text text text text text text text text text text {this.props.type} </div>

// Prettier 3.4
br_triggers_expression_break = (
  <div>
    <br />
    text text text text text text text text text text text {
      this.props.type
    }{" "}
  </div>
);

// Prettier 3.5
br_triggers_expression_break = (
  <div>
    <br />
    text text text text text text text text text text text{" "}
    {this.props.type}{" "}
  </div>
);

----------------------------------------

TITLE: Defining Markdown Link Reference with Title
DESCRIPTION: This snippet shows how to define a Markdown link reference with an ID, URL, and title. The reference ID is 'foo', the URL is '/url', and the title is 'title'.

LANGUAGE: markdown
CODE:
[foo]: /url
"title" ok

----------------------------------------

TITLE: Indentation Pattern Example 2
DESCRIPTION: Numbered text block showing alternating indentation patterns with numbers and spaces.

LANGUAGE: plaintext
CODE:
1.  a a a
   b b b
  c c c
   d d d
    e e e

----------------------------------------

TITLE: Multi-line Block Quotes in Markdown Footnotes
DESCRIPTION: Illustrates the syntax for creating multi-line block quotes within markdown footnotes using line continuation.

LANGUAGE: markdown
CODE:
[^a]: > 123\
      > 456
[^a]: a
[^a]: > 123\
      > 456

----------------------------------------

TITLE: Markdown Inline Code
DESCRIPTION: Inline code formatting using single backticks

LANGUAGE: markdown
CODE:
`foo`

----------------------------------------

TITLE: Formatting Underscore with Parentheses in JavaScript
DESCRIPTION: Shows how Prettier formats an expression with an underscore prefix and parentheses wrapping a variable name. This pattern is common in certain JavaScript coding styles and libraries like Lodash.

LANGUAGE: javascript
CODE:
_(_foo)

----------------------------------------

TITLE: Formatting Text with Markdown Bold Syntax
DESCRIPTION: Demonstrates using double asterisks to create bold text in Markdown. The text 'bar' is wrapped in double asterisks to make it bold.

LANGUAGE: markdown
CODE:
foo**bar**

----------------------------------------

TITLE: Formatting HTML-like Syntax with Prettier
DESCRIPTION: This snippet shows an example of poorly formatted HTML-like syntax. It demonstrates how Prettier would handle elements with improper spacing and line breaks.

LANGUAGE: HTML
CODE:
< a><
foo><bar/ >

----------------------------------------

TITLE: Formatting Variable with Underscores in JavaScript
DESCRIPTION: Demonstrates wrapping a variable 'bar' with underscores using parentheses. This pattern is commonly used for emphasis or special handling of variables.

LANGUAGE: javascript
CODE:
_(bar)_

----------------------------------------

TITLE: Defining and Using Link Reference in Markdown
DESCRIPTION: This snippet shows how to define a link reference '[foo]' with a URL '/url', and then use the reference later in the document. This technique allows for cleaner and more maintainable Markdown, especially when the same link is used multiple times.

LANGUAGE: markdown
CODE:
[foo]:\n/url\n\n[foo]

----------------------------------------

TITLE: Formatting Markdown Task List Items
DESCRIPTION: Shows how to format unchecked and checked task list items in markdown syntax. Each item contains a deliberately long paragraph to demonstrate text wrapping.

LANGUAGE: markdown
CODE:
- [ ] this is a long long long long long long long long long long long long long long paragraph.
- [x] this is a long long long long long long long long long long long long long long paragraph.

----------------------------------------

TITLE: Single-line Markdown Footnotes
DESCRIPTION: Demonstrates the syntax for creating simple, single-line footnotes in markdown.

LANGUAGE: markdown
CODE:
[^a]: a
[^a]: a
[^a]: a

----------------------------------------

TITLE: Formatting Flow Mixins with Babylon Parser
DESCRIPTION: Shows support for Flow mixins when using the Babylon parser, which was previously dropped accidentally.

LANGUAGE: javascript
CODE:
class Foo extends Bar mixins Baz {}

----------------------------------------

TITLE: Text Emphasis in Markdown
DESCRIPTION: Shows different methods for emphasizing text using asterisks and underscores

LANGUAGE: markdown
CODE:
*single asterisks*

_single underscores_

**double asterisks**

__double underscores__

----------------------------------------

TITLE: Creating HTML Anchor with Markdown Emphasis
DESCRIPTION: This snippet shows an HTML anchor element (<a>) with a 'href' attribute. The content of the anchor is a Markdown-style emphasized text (*bar*).

LANGUAGE: HTML
CODE:
<a href="foo">
*bar*
</a>

----------------------------------------

TITLE: Formatting Text with Backticks
DESCRIPTION: Example showing text wrapped in backticks, which can be used for template literals in JavaScript or code blocks in markdown.

LANGUAGE: text
CODE:
`foo`

----------------------------------------

TITLE: Formatting Text with Underscores in Markdown
DESCRIPTION: Example showing the use of underscores for text emphasis in Markdown. Uses multiple underscores for formatting a text segment.

LANGUAGE: markdown
CODE:
_foo__

----------------------------------------

TITLE: Parenthesized Expression Pattern in JavaScript
DESCRIPTION: Example of JavaScript expression pattern using parentheses grouping with a pointer dereference-like syntax. This pattern shows grouping of an identifier with asterisk notation.

LANGUAGE: javascript
CODE:
*(*foo)

----------------------------------------

TITLE: Formatting Markdown Image with Nested Link in Prettier
DESCRIPTION: This snippet demonstrates a Markdown image syntax with a nested link. It's used to test or showcase how Prettier handles complex Markdown structures, particularly nested elements within image alt text.

LANGUAGE: markdown
CODE:
![foo [bar](/url)](/url2)

----------------------------------------

TITLE: Defining Multiple Markdown Reference Links
DESCRIPTION: Shows how to define and use multiple reference-style links in Markdown. The example includes three reference links [foo], [bar], and [baz] with two corresponding link definitions for bar and baz.

LANGUAGE: markdown
CODE:
[foo][bar][baz]

[baz]: /url1
[bar]: /url2

----------------------------------------

TITLE: Creating Markdown Link Reference Definition
DESCRIPTION: Demonstrates how to define a link reference with ID 'foo', URL '/url', and title 'the title', followed by using the reference.

LANGUAGE: markdown
CODE:
[foo]: 
      /url  
           'the title'  

[foo]

----------------------------------------

TITLE: Ignoring Prettier Formatting for HTML Content
DESCRIPTION: This snippet demonstrates how to use the prettier-ignore comment to prevent Prettier from formatting a long paragraph in HTML.

LANGUAGE: HTML
CODE:
<!-- prettier-ignore -->
This is a long long long long long long long long long long long long long long long paragraph.

----------------------------------------

TITLE: Defining Custom Font Face for 'Bungee Spice' in CSS
DESCRIPTION: This CSS snippet declares a custom font face named 'Bungee Spice'. It specifies two source URLs: one for the COLRv1 color font technology and another as a fallback in OpenType format.

LANGUAGE: css
CODE:
@font-face {
  font-family: "Bungee Spice";
  src:
    url("https://fonts.googleapis.com/css2?family=Bungee+Spice") tech(color-COLRv1), url("Bungee-fallback.otf") format("opentype");
}

----------------------------------------

TITLE: Creating Basic HTML Table Structure
DESCRIPTION: This snippet demonstrates how to create a simple HTML table with a single cell containing text. It uses standard table, row, and cell tags.

LANGUAGE: HTML
CODE:
<table>
  <tr>
    <td>
           hi
    </td>
  </tr>
</table>

----------------------------------------

TITLE: Displaying Single Backtick with Character
DESCRIPTION: Basic code example showing a backtick followed by a character 'a'.

LANGUAGE: plaintext
CODE:
` a`

----------------------------------------

TITLE: String Pattern with Escaped Character
DESCRIPTION: Shows a basic text pattern with an escaped plus character followed by a simple string on the next line.

LANGUAGE: plaintext
CODE:
foo\+bar
foo

----------------------------------------

TITLE: Defining Markdown Link Reference
DESCRIPTION: Demonstrates how to define a reference-style link in Markdown using the link label 'alpha' with a URL and title attribute.

LANGUAGE: markdown
CODE:
[alpha]: http://example.com "title"

----------------------------------------

TITLE: Ordered List Variable Declaration 1
DESCRIPTION: JavaScript variable declarations with Prettier formatting in an ordered list context.

LANGUAGE: javascript
CODE:
const a = 1;


const b = 2;

----------------------------------------

TITLE: Combining HTML Structure with Markdown Emphasis
DESCRIPTION: Shows how to wrap Markdown-emphasized text within HTML div tags, demonstrating mixed markup usage

LANGUAGE: html
CODE:
<div>

*Emphasized* text.

</div>

----------------------------------------

TITLE: Demonstrating Long Inline Code for Prettier Formatting
DESCRIPTION: This code snippet shows an example of a long inline code segment that might be used to test Prettier's formatting capabilities, particularly for handling long lines of code.

LANGUAGE: markdown
CODE:
`this is a long long long long long long long long long long long long long long long inline code`

----------------------------------------

TITLE: Applying Multiple Backgrounds with CSS
DESCRIPTION: This CSS snippet defines a class that applies multiple background images and a gradient to an element. It demonstrates the use of background-image, background-repeat, and background-position properties for complex layering effects.

LANGUAGE: css
CODE:
.multi-bg-example {
  width: 100%;  height: 400px;
  background-image: url(firefox.png),       url(bubbles.png), linear-gradient(to right, rgb(30
          75 115 / 100%), rgb(255 255 255 / 0%));
    background-repeat: no-repeat, no-repeat, no-repeat;
background-position:
    bottom right,
    left,
    right;
}

----------------------------------------

TITLE: Improved Markdown list item indentation in Prettier 1.11
DESCRIPTION: Demonstrates better handling of code blocks within Markdown list items using the tabWidth option.

LANGUAGE: markdown
CODE:
1. Change to your home directory:

        cd

----------------------------------------

TITLE: Defining Text Colors with CSS
DESCRIPTION: Sets color properties for h1 (red) and p (blue) HTML elements using CSS style declarations.

LANGUAGE: css
CODE:
<style
  type="text/css">
h1 {color:red;}

p {color:blue;}
</style>

----------------------------------------

TITLE: Empty Code Block with Single Space
DESCRIPTION: A code block containing a single space character.

LANGUAGE: text
CODE:
 

----------------------------------------

TITLE: Applying Mixed Bold and Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to combine bold and italic text formatting in Markdown. It shows nested and overlapping emphasis using asterisks.

LANGUAGE: markdown
CODE:
**foo *bar **baz**
bim* bop**

----------------------------------------

TITLE: Formatting Markdown Lists with Block Quotes
DESCRIPTION: Shows how to format a Markdown list with nested block quote elements. The structure includes unordered list items with a nested blockquote.

LANGUAGE: markdown
CODE:
* a
  > b
  >
* c

----------------------------------------

TITLE: Formatting Long Markdown Link
DESCRIPTION: This snippet shows a markdown link with an exceptionally long URL or title that extends beyond typical line wrapping limits. It demonstrates how such links might appear in raw markdown text.

LANGUAGE: markdown
CODE:
[[Here is an incredibly long wiki-style link that overflows the standard wrap width for markdown]].

----------------------------------------

TITLE: Formatting Nested Blockquotes with Numbered List in Markdown
DESCRIPTION: This snippet demonstrates how to create nested blockquotes in markdown, with a numbered list item inside the innermost quote. It shows the use of multiple '>' characters for nesting and proper indentation for list items within quotes.

LANGUAGE: markdown
CODE:
   > > 1.  one
>>
>>     two

----------------------------------------

TITLE: Formatting HTML Comment with Multiple Lines
DESCRIPTION: Shows an HTML comment block containing multiple lines with different indentation levels. The comment spans three lines with varying text alignment.

LANGUAGE: html
CODE:
<!-- Foo

bar
   baz -->

----------------------------------------

TITLE: Creating Blockquotes in Markdown
DESCRIPTION: This snippet shows how to create blockquotes in Markdown, including multi-line quotes with line breaks. It demonstrates the use of the blockquote syntax for emphasizing quoted text.

LANGUAGE: markdown
CODE:
- A list item.
<blockquote>

<p>quoted sentence1<br>
quoted sentence2</p>
</blockquote>

----------------------------------------

TITLE: Changing to Home Directory in Shell
DESCRIPTION: This shell command changes the current working directory to the user's home directory.

LANGUAGE: shell
CODE:
cd

----------------------------------------

TITLE: Formatting Markdown Emphasis with Prettier
DESCRIPTION: This snippet demonstrates Markdown syntax for emphasized text. Prettier will ensure consistent formatting for Markdown elements.

LANGUAGE: Markdown
CODE:
1. *bar*

----------------------------------------

TITLE: Setting Prettier Tab Width in YAML
DESCRIPTION: This snippet sets the tab width for Prettier to 2 spaces using YAML syntax. It's a common configuration option used to define indentation preferences in Prettier.

LANGUAGE: yaml
CODE:
-		foo

----------------------------------------

TITLE: Formatting Block Quotes in Markdown
DESCRIPTION: Shows the syntax for creating blockquoted text with multiple lines in markdown using the > character prefix.

LANGUAGE: markdown
CODE:
> foo
> bar

----------------------------------------

TITLE: PHP Echo Statement in HTML Context
DESCRIPTION: Demonstrates embedding a PHP echo statement within an HTML context to output a variable value. Shows basic PHP template syntax with the variable $a being echoed.

LANGUAGE: php
CODE:
foo <?php echo $a; ?>

----------------------------------------

TITLE: Creating Markdown Heading in Mixed Content File
DESCRIPTION: This snippet shows how to create a top-level heading in Markdown. The heading 'hello world' is formatted using a single hash symbol, which represents an h1 heading in Markdown syntax.

LANGUAGE: Markdown
CODE:
# hello world

----------------------------------------

TITLE: Formatting HTML Script Tag with Prettier
DESCRIPTION: This snippet shows a basic HTML script tag containing JavaScript code. Prettier will format this by adjusting indentation and whitespace for improved readability.

LANGUAGE: HTML
CODE:
<script>
foo
</script>

----------------------------------------

TITLE: Defining Custom Parser in Prettier YAML Configuration
DESCRIPTION: This snippet defines a custom parser named 'mycustomparser' with specific formatting rules for key-value pairs and indentation.

LANGUAGE: yaml
CODE:
---mycustomparser
- hello:    world
-         123
---

----------------------------------------

TITLE: Markdown Block Quote with Inline Formatting
DESCRIPTION: Shows blockquote formatting with italic text spanning multiple lines and prose wrapping settings

LANGUAGE: markdown
CODE:
> This is a quote with an italic _across multuple lines
> which should just work_. So make sure there is no > if we set
> proseWrap to `never`

----------------------------------------

TITLE: Formatting CSS Custom Selectors
DESCRIPTION: Preserves case sensitivity in custom selector names in CSS.

LANGUAGE: scss
CODE:
@custom-selector :--camelCase .my-css-selector;

:--camelCase {
  color: red;
}

----------------------------------------

TITLE: HTML Div Element
DESCRIPTION: Demonstrates a basic HTML div element containing text content, with some text outside the div.

LANGUAGE: html
CODE:
Foo
<div>
bar
</div>

----------------------------------------

TITLE: Displaying Text with Mixed Indentation
DESCRIPTION: Shows two lines of text with different indentation levels - one using spaces and one using a tab character

LANGUAGE: plaintext
CODE:
    foo
	bar

----------------------------------------

TITLE: Applying Bold and Italic Formatting in Markdown
DESCRIPTION: This snippet demonstrates how to apply both bold and italic formatting to text in Markdown. It uses asterisks for emphasis, with double asterisks for bold and single asterisks for italic.

LANGUAGE: markdown
CODE:
**foo *bar***

----------------------------------------

TITLE: Formatting Markdown Block Quote
DESCRIPTION: Demonstrates markdown block quote syntax with indented content showing nested quote formatting.

LANGUAGE: markdown
CODE:
>
> foo
>  

----------------------------------------

TITLE: Configuring Trailing Backslash Handling in Markdown for Prettier
DESCRIPTION: This snippet sets the 'trailingBackslash' option to 'foo' for Markdown files in Prettier. It determines how Prettier should handle trailing backslashes at the end of lines in Markdown content.

LANGUAGE: markdown
CODE:
### foo\

----------------------------------------

TITLE: Multiplying Variable with String in JavaScript
DESCRIPTION: This snippet demonstrates a JavaScript expression where a variable 'a' is multiplied by the string "foo". It showcases Prettier's handling of arithmetic operations with strings.

LANGUAGE: JavaScript
CODE:
a*"foo"

----------------------------------------

TITLE: Parsing HTML Tags with TagSoup in Haskell
DESCRIPTION: This snippet demonstrates the use of the TagSoup library to parse HTML tags in Haskell. It imports the necessary module and defines a main function that parses and prints the tags from a predefined 'tags' variable.

LANGUAGE: haskell
CODE:
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags

----------------------------------------

TITLE: Creating Markdown Footnote
DESCRIPTION: Shows the syntax for defining a footnote in markdown using the [^label]: content format. This creates a footnote with the identifier 'hello' and content 'world'.

LANGUAGE: markdown
CODE:
[^hello]: world

----------------------------------------

TITLE: Displaying numeric sequence
DESCRIPTION: Outputs the number sequence 123. This appears to be a plain text output rather than executable code.

LANGUAGE: text
CODE:
123

----------------------------------------

TITLE: Mixed HTML and Markdown Content
DESCRIPTION: Shows a div element containing text followed by a Markdown italicized text element

LANGUAGE: html
CODE:
<div>
bar
</div>

LANGUAGE: markdown
CODE:
*foo*

----------------------------------------

TITLE: Formatting Mixed HTML and Markdown Content with Prettier
DESCRIPTION: This snippet demonstrates how Prettier handles a combination of inline HTML and Markdown syntax. It shows a closing HTML div tag followed by Markdown-style emphasis.

LANGUAGE: Markdown
CODE:
</div>
*foo*

----------------------------------------

TITLE: YAML List with Mixed Content Types
DESCRIPTION: A YAML list containing three different types of content: plain text 'foo', a fenced code block containing 'bar', and an indented text block containing 'baz'

LANGUAGE: yaml
CODE:
-
  foo
-
  ```
  bar
  ```
-
      baz

----------------------------------------

TITLE: Creating Link Reference Definition in Markdown
DESCRIPTION: Defines a link reference named 'foo' that points to '/url'. This reference can be used later in the document to create links using the [foo] syntax.

LANGUAGE: markdown
CODE:
[foo]: /url

----------------------------------------

TITLE: Creating HTML Anchor Tag with Line Break in HTML
DESCRIPTION: This snippet shows an HTML anchor tag with a line break inside the href attribute. This is an unusual formatting that may cause issues in rendering or parsing.

LANGUAGE: HTML
CODE:
<a href="foo  
bar">

----------------------------------------

TITLE: Markdown Deletion with Italic Text
DESCRIPTION: Shows how to combine HTML deletion tags with Markdown italic formatting. The example wraps italic text 'foo' in deletion tags to show text that has been removed.

LANGUAGE: markdown
CODE:
<del>
*foo*
</del>

----------------------------------------

TITLE: Markdown String Pattern Tests
DESCRIPTION: A collection of test patterns using combinations of numbers (0), asterisks (*), underscores (_), and exclamation marks (both ASCII and Unicode variants) to test string formatting behavior. Includes specific cases that require escaping to prevent misparsing.

LANGUAGE: markdown
CODE:
0*1*2

!*1*2

0*1*!

!*1*!

0*1*2

！*1*2

0*1*！

！*1*！

0_1_2

!_1_2

0_1_! <!-- remark-misparsing, should be formatted as `0_1\_!` -->

!_1_!

0_1_2

！_1_2

0_1_！ <!-- remark-misparsing, should be formatted as `0_1\_！` -->

！_1_！

----------------------------------------

TITLE: Prettier Format Override Example
DESCRIPTION: Shows how to use the @prettier comment to control formatting behavior, followed by text that would be formatted by Prettier to normalize whitespace.

LANGUAGE: javascript
CODE:
{/* @prettier */}

I     should      be      formatted       !!

----------------------------------------

TITLE: JavaScript React Hooks Formatting
DESCRIPTION: Shows improved formatting for React hooks usage to maintain better readability.

LANGUAGE: javascript
CODE:
function helloWorld() {
  useEffect(() => {
    // do something
  }, [props.value]);
}

----------------------------------------

TITLE: Creating Basic HTML Table Structure
DESCRIPTION: Defines a simple HTML table with one row and one cell containing the text 'Hi'. Demonstrates proper nesting of table, tr, and td elements.

LANGUAGE: html
CODE:
<table>

<tr>

<td>
Hi
</td>

</tr>

</table>

----------------------------------------

TITLE: Indented List Item Pattern
DESCRIPTION: Demonstrates a three-level indented list structure with consistent spacing between levels.

LANGUAGE: plaintext
CODE:
1. a

  2. b

    3. c

----------------------------------------

TITLE: Formatting Text with Markdown Emphasis
DESCRIPTION: Demonstrates nested markdown text formatting with both bold and italic styles. Uses asterisks for emphasis where double asterisks create bold text and single asterisks create italic text.

LANGUAGE: markdown
CODE:
**foo *bar* baz**

----------------------------------------

TITLE: Rendering Warning Component with Emphasized Content in JSX
DESCRIPTION: This snippet shows how to use the Warning component in JSX, wrapping emphasized text content using Markdown-style asterisks.

LANGUAGE: JSX
CODE:
<Warning>
*bar*
</Warning>

----------------------------------------

TITLE: Formatting Markdown Link with Escaped Parentheses
DESCRIPTION: Demonstrates markdown link syntax where the URL contains parentheses that need to be escaped with backslashes to be parsed correctly.

LANGUAGE: markdown
CODE:
[link](foo(and\(bar\)))

----------------------------------------

TITLE: Closing HTML Tags with Whitespace
DESCRIPTION: Demonstrates HTML tag closure syntax with extra whitespace between the closing angle bracket. Shows nested closing tags for 'a' and 'foo' elements.

LANGUAGE: html
CODE:
</a></foo >

----------------------------------------

TITLE: Formatting Mixed HTML and Markdown Content
DESCRIPTION: Shows a DIV element with a class attribute containing Markdown-formatted text. Demonstrates mixing HTML structure with Markdown inline formatting.

LANGUAGE: html
CODE:
<DIV CLASS="foo">

*Markdown*

</DIV>

----------------------------------------

TITLE: Defining Reference-Style Markdown Link with Label, URL, and Title
DESCRIPTION: This snippet shows how to define a reference-style link in Markdown with a label, URL, and title. The label is enclosed in square brackets, followed by the URL in angle brackets, and the title in double quotes.

LANGUAGE: Markdown
CODE:
[alpha]: <http://example.com 123> "title"

----------------------------------------

TITLE: Fragment with Self-Closing Component
DESCRIPTION: React Fragment syntax containing a self-closing World component with extra spacing

LANGUAGE: jsx
CODE:
<>
    test   <World        />   test
</>       123

----------------------------------------

TITLE: Creating Basic HTML Table Structure
DESCRIPTION: This HTML snippet demonstrates the structure of a basic table with one row and one cell. It includes proper indentation and whitespace for readability.

LANGUAGE: HTML
CODE:
<table>

  <tr>

    <td>
      Hi
    </td>

  </tr>

</table>

----------------------------------------

TITLE: Invalid Backtick Code Sample
DESCRIPTION: A code snippet with invalid backtick syntax, showing an incorrectly closed code block with two backticks instead of three.

LANGUAGE: text
CODE:
foo

----------------------------------------

TITLE: Defining Basic Ruby Function
DESCRIPTION: Demonstrates the basic syntax for defining a Ruby function named 'foo' that takes one parameter 'x' and returns the integer value 3. While the parameter 'x' is defined, it is not used in the function body.

LANGUAGE: ruby
CODE:
def foo(x)
  return 3
end

----------------------------------------

TITLE: Reference-style Markdown Link Structure
DESCRIPTION: Demonstrates the syntax for a reference-style link in Markdown using paired square brackets. The first bracket pair contains the link text, while the second pair contains the link reference identifier.

LANGUAGE: markdown
CODE:
[hello][world]

----------------------------------------

TITLE: Prettier Plugin Configuration
DESCRIPTION: Example of configuring Prettier plugins in a configuration file

LANGUAGE: json
CODE:
{
  "plugins": ["prettier-plugin-foo"]
}

----------------------------------------

TITLE: Markdown Heading with Code Block
DESCRIPTION: Shows heading declaration using # syntax followed by an indented code block.

LANGUAGE: markdown
CODE:
# Heading
    foo

----------------------------------------

TITLE: Defining Angular Component in TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple Angular component using TypeScript. It includes the component decorator with metadata and a basic class definition.

LANGUAGE: typescript
CODE:
  import {Component} from '@angular/core';

  @Component({
    selector: 'app-root',
    standalone: true,
    imports: [],
    template: `
      <h1>

      {{ title }}</h1>
    `,
    styleUrls: ['./app.component.css'],
  })
  export class AppComponent {
    title = 'default';
  }

----------------------------------------

TITLE: Exporting React Component with Meta Configuration
DESCRIPTION: Exports a React component with meta configuration including authors and layout. The component uses custom UI components through props destructuring.

LANGUAGE: jsx
CODE:
export const meta = {
authors: [fred, sue],
layout: Layout
}

export default () =>
  <Doc     components={{
        h1: ui.Heading,
         p:    ui.Text,
      code:     ui.Code
         }}
      />

----------------------------------------

TITLE: TypeScript Class Type Annotation
DESCRIPTION: Shows removal of redundant parentheses in TypeScript type annotations.

LANGUAGE: typescript
CODE:
class Foo {
  bar: () => boolean;
}

----------------------------------------

TITLE: Configuring Prettier Formatting Rules in JSON
DESCRIPTION: This snippet defines the configuration settings for Prettier, specifying various code formatting rules and preferences. It sets options such as line width, tab width, semicolon usage, and quote style.

LANGUAGE: json
CODE:
{
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "semi": true,
  "singleQuote": false,
  "quoteProps": "as-needed",
  "jsxSingleQuote": false,
  "trailingComma": "all",
  "bracketSpacing": true,
  "bracketSameLine": false,
  "arrowParens": "always",
  "proseWrap": "preserve",
  "htmlWhitespaceSensitivity": "css",
  "vueIndentScriptAndStyle": false,
  "endOfLine": "lf",
  "embeddedLanguageFormatting": "auto",
  "singleAttributePerLine": false
}

----------------------------------------

TITLE: Testing Prettier Formatting with Special Characters
DESCRIPTION: This snippet contains a single line of text with asterisks and underscores, which may be used to test how Prettier handles special characters or formatting edge cases.

LANGUAGE: plaintext
CODE:
foo *_*

----------------------------------------

TITLE: Nested Markdown Emphasis Test
DESCRIPTION: Tests nested emphasis formatting in markdown using underscores. This example demonstrates handling of consecutive underscores for overlapping emphasis spans.

LANGUAGE: markdown
CODE:
__foo __bar__ baz__

----------------------------------------

TITLE: Invalid Code Block
DESCRIPTION: A malformed code block containing only 'aaa' with incorrect formatting and closure.

LANGUAGE: plaintext
CODE:
aaa

----------------------------------------

TITLE: Basic Rust Hello World Program
DESCRIPTION: A simple Rust program that prints a string to the console. The example appears multiple times in different footnote contexts.

LANGUAGE: rust
CODE:
fn main() {
    println!("this is some Rust!");
}

----------------------------------------

TITLE: Formatting String with Three Spaces (Two Lines)
DESCRIPTION: This snippet demonstrates a string with three spaces between words, split across two lines. It's used to test Prettier's handling of multiple spaces and line breaks in strings.

LANGUAGE: plaintext
CODE:
`   three   spaces
  everywhere   `

----------------------------------------

TITLE: Executing Shell Command
DESCRIPTION: This snippet shows a simple shell command or input prompt. The '>' symbol typically indicates a command prompt in various shell environments.

LANGUAGE: shell
CODE:
> foo

----------------------------------------

TITLE: Rendering Unordered List with React
DESCRIPTION: Demonstrates rendering an unordered list with list items, including empty and self-closing tags, and inconsistent spacing.

LANGUAGE: JSX
CODE:
<ul>
      <li   >item    {' '} </li>
      <li/>
        </ul >

----------------------------------------

TITLE: Defining YAML Frontmatter in Markdown
DESCRIPTION: This snippet shows a YAML frontmatter block typically used in markdown files. It defines a 'foo' key with an array of three 'bar' values.

LANGUAGE: yaml
CODE:
---
foo:
  - bar1

  - bar2

  - bar3
---

Markdown

----------------------------------------

TITLE: Demonstrating Text Alignment in Prettier
DESCRIPTION: This snippet shows a simple example of text alignment, potentially used to illustrate Prettier's formatting rules. It consists of two lines of text with different indentation levels.

LANGUAGE: plaintext
CODE:
>     foo
    bar

----------------------------------------

TITLE: Ignoring Markdown List Formatting Outside Code Block
DESCRIPTION: This snippet shows how to use prettier-ignore directly in Markdown content, outside of a code block, to preserve the formatting of a long paragraph in a list item.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
- This is a long long
  long long long long
  long long paragraph.

----------------------------------------

TITLE: Text Alignment Pattern
DESCRIPTION: Demonstrates three lines of identical text ('aaa') with different leading spaces to show indentation variation. Each line has a different number of spaces at the start, creating a non-uniform alignment pattern.

LANGUAGE: plaintext
CODE:
   aaa
    aaa
  aaa

----------------------------------------

TITLE: Displaying Numeric Value with Prefix
DESCRIPTION: Shows the number 123 with a greater than symbol prefix. This format is often used in command line outputs or markdown quote blocks.

LANGUAGE: plaintext
CODE:
> 123

----------------------------------------

TITLE: Defining Prettier Configuration in YAML
DESCRIPTION: This YAML snippet defines a configuration for Prettier. It contains a single list item 'foo', which could be part of a larger configuration structure.

LANGUAGE: yaml
CODE:
- - foo

----------------------------------------

TITLE: Configuring Prettier YAML
DESCRIPTION: This snippet shows a simple Prettier configuration using YAML syntax. It specifies two formatting rules: setting the maximum line width to 'foo' and enabling the 'bar' option.

LANGUAGE: yaml
CODE:
> foo
bar
===

----------------------------------------

TITLE: Combining Variable Declaration with JSX Element
DESCRIPTION: This snippet demonstrates declaring a constant variable and rendering a JSX div element in the same code block.

LANGUAGE: jsx
CODE:
const a = 1;
<div>foo</div>;

----------------------------------------

TITLE: Defining YAML Frontmatter for Page Metadata
DESCRIPTION: This YAML block defines metadata for the page, including a title and slug. It's commonly used in static site generators to provide page-specific information.

LANGUAGE: yaml
CODE:
title: Hello
slug: home

----------------------------------------

TITLE: Formatting Assertion Functions in TypeScript
DESCRIPTION: Demonstrates formatting of TypeScript assertion functions.

LANGUAGE: typescript
CODE:
function assertsString(x: any): asserts x {
  console.assert(typeof x === "string");
}
function assertsStringWithGuard(x: any): asserts x is string {
  console.assert(typeof x === "string");
}

----------------------------------------

TITLE: Defining Custom XML Entity
DESCRIPTION: This snippet defines a custom entity named 'MadeUpEntity' using XML entity syntax. It's typically used in XML or HTML documents to create shorthand references for frequently used text or special characters.

LANGUAGE: XML
CODE:
&MadeUpEntity;

----------------------------------------

TITLE: Creating a Markdown Link Reference Definition with Line Break
DESCRIPTION: This snippet demonstrates how to create a link reference definition in markdown with a line break between the definition and subsequent text. The reference is defined as 'foo' pointing to '/url', followed by unrelated text 'bar'.

LANGUAGE: markdown
CODE:
[
foo
]: /url
bar

----------------------------------------

TITLE: Demonstrating Standard Whitespace in HTML
DESCRIPTION: This snippet demonstrates the use of standard whitespace (0x20) in HTML. The words in this paragraph may wrap to the next line if the browser window is resized.

LANGUAGE: HTML
CODE:
<!-- 0x20 standard whitespace -->

keep these words together keep these words together keep these words together keep these words together

----------------------------------------

TITLE: Formatting Nested Markdown Bold/Italic Syntax
DESCRIPTION: A markdown snippet showing nested bold and italic text formatting using asterisks. This pattern tests how Prettier handles edge cases with multiple consecutive asterisk characters.

LANGUAGE: markdown
CODE:
*foo**bar***

----------------------------------------

TITLE: Formatting Plain Text with Prettier
DESCRIPTION: This snippet demonstrates how Prettier formats plain text. It shows two identical lines of text, which Prettier aligns consistently.

LANGUAGE: plaintext
CODE:
 aaa
aaa

----------------------------------------

TITLE: Uppercasing Text using Custom Processor
DESCRIPTION: Applies an uppercasing operation to the provided text using a custom text processor.

LANGUAGE: uppercase-rocks
CODE:
This text should be uppercased.

----------------------------------------

TITLE: Formatting Horizontal Rules in Markdown with Prettier
DESCRIPTION: This snippet shows two ways of creating horizontal rules in Markdown. Prettier standardizes these to use hyphens for consistency.

LANGUAGE: markdown
CODE:
- * * *
+ - - -

----------------------------------------

TITLE: Configuring Prettier Formatting Rules in JavaScript
DESCRIPTION: This code snippet defines a configuration object for Prettier, setting various formatting rules such as tab width, semicolon usage, and quote style. It also specifies overrides for different file types.

LANGUAGE: javascript
CODE:
module.exports = {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: true,
  singleQuote: false,
  quoteProps: "as-needed",
  jsxSingleQuote: false,
  trailingComma: "all",
  bracketSpacing: true,
  bracketSameLine: false,
  arrowParens: "always",
  proseWrap: "preserve",
  htmlWhitespaceSensitivity: "css",
  vueIndentScriptAndStyle: false,
  endOfLine: "lf",
  embeddedLanguageFormatting: "auto",
  singleAttributePerLine: false,
  overrides: [
    {
      files: "*.md",
      options: {
        tabWidth: 4,
      },
    },
    {
      files: ["*.yml", "*.yaml"],
      options: {
        tabWidth: 2,
      },
    },
  ],
};

----------------------------------------

TITLE: Creating Repeating Conic Gradient Background in CSS
DESCRIPTION: This CSS code creates a repeating conic gradient background for a div element. It uses black and white colors to create a quartered circle pattern that repeats across the element. The div also has a solid border.

LANGUAGE: css
CODE:
div {
  background: conic-gradient(
      #fff      0.25turn,
  #000 0.25turn 0.5turn,
      #fff 0.5turn 0.75turn,
        #000 0.75turn
    ) top left      / 25% 25% repeat;
  border: 1px solid;
}

----------------------------------------

TITLE: Basic Prettier Build Command
DESCRIPTION: Standard command to build the Prettier project using yarn.

LANGUAGE: sh
CODE:
yarn build

----------------------------------------

TITLE: Setting Prettier Configuration Option
DESCRIPTION: This line appears to be setting a configuration option for Prettier. The syntax '#######' followed by 'foo' is non-standard and may be a placeholder or example. In a typical Prettier configuration, this might represent a specific formatting rule or option.

LANGUAGE: plaintext
CODE:
####### foo

----------------------------------------

TITLE: Demonstrating Non-Breaking Whitespace in HTML
DESCRIPTION: This snippet shows the usage of non-breaking whitespace (0xA0) in HTML. The words in this paragraph will stay together on the same line, even if the browser window is resized.

LANGUAGE: HTML
CODE:
<!-- 0xA0 non-breaking whitespace -->

keep these words together keep these words together keep these words together keep these words together

----------------------------------------

TITLE: Creating Level 1 Markdown Heading with Extra Hash
DESCRIPTION: This snippet shows how to create a level 1 Markdown heading with an additional hash symbol at the end. The extra hash is typically not part of standard Markdown syntax and may be used for specific styling or processing purposes.

LANGUAGE: markdown
CODE:
# foo#

----------------------------------------

TITLE: Adding HTML Comment in Mixed Content File
DESCRIPTION: This snippet demonstrates how to include an HTML comment in a file that also contains Markdown and plain text content. HTML comments are useful for leaving notes or temporarily hiding content that shouldn't be rendered.

LANGUAGE: HTML
CODE:
<!-- something -->

----------------------------------------

TITLE: Using Prettier CLI Plugin
DESCRIPTION: Example of using a Prettier plugin via command line interface with the --plugin flag

LANGUAGE: bash
CODE:
prettier --write main.foo --plugin=prettier-plugin-foo

----------------------------------------

TITLE: Basic Text Formatting Example
DESCRIPTION: Shows text with mixed indentation styles that would typically be standardized by a code formatter

LANGUAGE: text
CODE:
- foo

		bar

----------------------------------------

TITLE: Creating Stacked Linear Gradient Background in CSS
DESCRIPTION: This CSS code defines a class 'stacked-linear' that applies a background with three overlapping linear gradients. Each gradient uses RGB colors with transparency and specific angles for a unique visual effect.

LANGUAGE: css
CODE:
.stacked-linear {
  background: linear-gradient(
      217deg,
      rgb(255 0 0 / 80%),
      rgb(255 0 0 / 0%) 70.71%
    ), linear-gradient(127deg, rgb(0 255 0 / 80%), rgb(0 255 0 / 0%) 70.71%),
    linear-gradient(336deg, rgb(0 0 255 / 80%), rgb(0 0 255 / 0%) 70.71%);
}

----------------------------------------

TITLE: Building Prettier Browser Libs for Website
DESCRIPTION: Commands to build Prettier browser libraries for the website playground. Includes options for building the current branch or using a release version.

LANGUAGE: sh
CODE:
cd your/path/to/prettier
yarn build:website

LANGUAGE: sh
CODE:
PULL_REQUEST=true yarn build:website

----------------------------------------

TITLE: Formatting Template Elements in HTML
DESCRIPTION: Shows how Prettier 1.19 handles template elements in HTML.

LANGUAGE: html
CODE:
<template>
  <template>foo</template>
</template>

----------------------------------------

TITLE: Rendering Markdown Horizontal Rules
DESCRIPTION: Shows how to create horizontal rules in markdown using triple dashes, with text spacing variations.

LANGUAGE: markdown
CODE:
    Foo
    ---

    Foo
---

----------------------------------------

TITLE: Link Formatting in Markdown
DESCRIPTION: Demonstrates various ways to create links in Markdown, including inline links and reference-style links

LANGUAGE: markdown
CODE:
This is [an example](http://example.com "Example") link.

[This link](http://example.com) has no title attr.

This is [an example][id] reference-style link.

[id]: http://example.com "Optional Title"

----------------------------------------

TITLE: Markdown Text Emphasis Pattern
DESCRIPTION: Demonstrates a pattern for emphasizing text in Markdown using underscores and parentheses. The pattern wraps text in underscores and parentheses to create combined emphasis effects.

LANGUAGE: markdown
CODE:
_(__foo__)_

----------------------------------------

TITLE: Defining Custom Prettier Rule in Markdown
DESCRIPTION: This snippet defines a custom rule for Prettier using Markdown syntax. The rule is named 'foo' and is enclosed in triple hash symbols, which is not standard Prettier configuration syntax but may be used in a custom setup or documentation.

LANGUAGE: markdown
CODE:
### foo ###

----------------------------------------

TITLE: Repeated Component Structure
DESCRIPTION: Multiple identical Hello components with nested World components and trailing numbers

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>
<Hello>
    test   <World />   test
</Hello>123

----------------------------------------

TITLE: Configuring Custom Option in Prettier (JSON)
DESCRIPTION: This snippet shows a single line of JSON configuration for Prettier. It appears to be setting a custom option or acting as a placeholder for future configuration.

LANGUAGE: JSON
CODE:
"__foo_"

----------------------------------------

TITLE: Formatting String with Three Spaces (Single Line)
DESCRIPTION: This snippet shows a string with three spaces between words on a single line. It's likely used to test how Prettier handles multiple consecutive spaces in a string.

LANGUAGE: plaintext
CODE:
`   three   spaces   everywhere   `

----------------------------------------

TITLE: Setting Up Prettier Command with coc-prettier
DESCRIPTION: Configures a Vim command to run Prettier using coc-prettier.

LANGUAGE: vim
CODE:
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

----------------------------------------

TITLE: Handling comments in variable declarations
DESCRIPTION: Demonstrates how Prettier stabilizes comments in variable declarations.

LANGUAGE: javascript
CODE:
// Before
let obj = [ // Comment
  'val'
];

// After
let obj = [
  // Comment
  'val'
];


----------------------------------------

TITLE: Creating Header in Markdown
DESCRIPTION: Demonstrates level 2 header formatting in Markdown using dash underlines

LANGUAGE: markdown
CODE:
Foo  
-----

----------------------------------------

TITLE: Markdown Text Processing Examples
DESCRIPTION: Examples showing various markdown text patterns including asterisks, underscores, escape sequences, HTML entities, and unicode character references. Demonstrates both inline formatting and special character handling.

LANGUAGE: markdown
CODE:
hello \* world _ ~~ ya

escape & html < entity > foo

qweqwe \\ \ \1 123123

asd &amp; asd &#132; 123

123_123_123

456 _ 456 _ 456

123*123*123

123 * 123 * 123

## 类的 prototype 属性和\_\_proto\_\_属性

123&#0;123

123&#35;123

123&#992;123

123&#x1F609;123

123&#X22;123

123&#98765432;123

----------------------------------------

TITLE: Defining Custom Prettier Configuration Sections
DESCRIPTION: This snippet shows the use of '#' characters to create section headers or separators in a Prettier configuration file. It's using a non-standard format that may require custom parsing.

LANGUAGE: plaintext
CODE:
# foo ##################################
##### foo ##

----------------------------------------

TITLE: JSX Components with Trailing Numbers
DESCRIPTION: Example showing Hello components with different trailing number sequences and whitespace.

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>       123
<Hello>
    test   <World />   test
</Hello>       234

----------------------------------------

TITLE: Removing Parentheses from Arrow Functions Returning JSX in JavaScript
DESCRIPTION: Shows how parentheses are now omitted for arrow functions that return JSX elements.

LANGUAGE: jsx
CODE:
const render1 = ({ styles }) =>
  <div style={styles}>
      Keep the wrapping parens. Put each key on its own line.
  </div>;

----------------------------------------

TITLE: Creating Markdown Footnote Reference
DESCRIPTION: This snippet shows how to create a footnote reference in Markdown. It uses square brackets with a caret symbol followed by the footnote identifier.

LANGUAGE: markdown
CODE:
[^alpha bravo]

----------------------------------------

TITLE: Limiting ALE to Explicitly Configured Linters
DESCRIPTION: Configures ALE to only run linters that have been explicitly defined, preventing unnecessary linting operations.

LANGUAGE: vim
CODE:
let g:ale_linters_explicit = 1

----------------------------------------

TITLE: Handling comments for function return types
DESCRIPTION: Shows how Prettier handles comments for function return types in TypeScript.

LANGUAGE: typescript
CODE:
// Before
function f(
  a: number
)// some comment here
: number {
  return a + 1;
}

// After
function f(
  a: number
  // some comment here
): number {
  return a + 1;
}


----------------------------------------

TITLE: Preserving Variable Names in Less
DESCRIPTION: Shows how Prettier 1.19 preserves variable names and formatting in Less.

LANGUAGE: less
CODE:
@FoO: bar;

----------------------------------------

TITLE: Rendering Self-Closing React Component
DESCRIPTION: Shows how to render a self-closing Foo component.

LANGUAGE: JSX
CODE:
<Foo/>

----------------------------------------

TITLE: Formatting Wiki Link with Preserved Internal Spacing
DESCRIPTION: Shows a wiki-style link format where multiple spaces between words are preserved rather than collapsed to a single space. This demonstrates Prettier's whitespace handling within specific markdown constructs.

LANGUAGE: markdown
CODE:
[[Additional spacing    within the link should be preserved]]

----------------------------------------

TITLE: Formatting Bold Text in Markdown
DESCRIPTION: Demonstrates how to make text bold in Markdown by wrapping it with double asterisks.

LANGUAGE: markdown
CODE:
a**"foo"**

----------------------------------------

TITLE: Sample Input for Prettier Formatting
DESCRIPTION: This snippet shows a basic text structure that could be used to test Prettier's formatting rules, particularly for handling indentation and comments.

LANGUAGE: plaintext
CODE:
foo
    # bar

----------------------------------------

TITLE: JSX Comments
DESCRIPTION: Examples of JSX/JavaScript-style comments in different formats.

LANGUAGE: jsx
CODE:
A {/* JS-style comment */} comment.

{
  /* Another JS-style comment */
}

----------------------------------------

TITLE: Using prettier-ignore Comment in CSS
DESCRIPTION: Shows how to use the /* prettier-ignore */ comment to exclude specific CSS rules from Prettier formatting.

LANGUAGE: css
CODE:
/* prettier-ignore */
.my    ugly rule
{

}

----------------------------------------

TITLE: Applying 3D Transformations with rotate3d and matrix3d in CSS
DESCRIPTION: This CSS code applies a 3D transformation to an element with the ID 'example-element' when it receives focus. It combines a rotate3d transformation with a 30-degree rotation and a complex matrix3d transformation for advanced 3D positioning and scaling.

LANGUAGE: css
CODE:
#example-element:focus {
  transform: rotate3d(1, 1, 1,      30deg) matrix3d(
      1,
      0,
      0,
                      0,
      0,
    1,
      6,
      0,
      0,
      0,
      1,
      0,
      50,
      100,
      0,
      1.1
    );
}

----------------------------------------

TITLE: Demonstrating IR Commands in Prettier
DESCRIPTION: Example showing how Prettier represents formatting commands in its intermediate representation (IR). This example demonstrates how parentheses and arguments are represented with line break opportunities.

LANGUAGE: json
CODE:
["(", line, arg, line, ")"]

----------------------------------------

TITLE: Handling comments in JSX empty expressions
DESCRIPTION: Shows how Prettier handles comments inside JSX empty expressions.

LANGUAGE: jsx
CODE:
// Before
<div>
  {
    // single line comment}
</div>;

// After
<div>
  {
    // single line comment
  }
</div>;


----------------------------------------

TITLE: Arithmetic Expression in JavaScript
DESCRIPTION: A simple addition operation between two numbers. This unformatted code snippet serves as an example of how Prettier would reformat it to improve readability and consistency.

LANGUAGE: javascript
CODE:
1 +  2

----------------------------------------

TITLE: Basic Markdown Text Emphasis
DESCRIPTION: Markdown syntax for italic text formatting using asterisks.

LANGUAGE: Markdown
CODE:
*foo*

----------------------------------------

TITLE: Markdown Wiki-Style Link Format
DESCRIPTION: Example of markdown text using double square bracket wiki-style link syntax, common in wiki systems and some note-taking applications.

LANGUAGE: markdown
CODE:
I have some markdown prose here, with a horrible run-on sentence that [[makes little sense at all as I continue it into an obscenely long wiki-style link thingy]].

----------------------------------------

TITLE: Text Pattern - Dash Border Left
DESCRIPTION: Creates a pattern with dashes followed by the letter 'a'

LANGUAGE: text
CODE:
a------

----------------------------------------

TITLE: TypeScript Accessibility Modifiers Validation
DESCRIPTION: Added error handling for duplicate accessibility modifiers in TypeScript classes.

LANGUAGE: tsx
CODE:
class Foo {
  public public bar() {};
}

----------------------------------------

TITLE: Empty Markdown Link
DESCRIPTION: An empty markdown hyperlink syntax with no destination URL or link text specified.

LANGUAGE: markdown
CODE:
[link]()

----------------------------------------

TITLE: Declaring HeydingsControlsRegular Font Face in CSS
DESCRIPTION: This CSS snippet declares a custom font face named 'HeydingsControlsRegular'. It specifies multiple source files for the font in different formats to ensure cross-browser compatibility. The font is set to normal weight and style.

LANGUAGE: css
CODE:
@font-face {
  font-family: "HeydingsControlsRegular";
          src: url("fonts/heydings_controls-webfont.eot");
  src:
    url("fonts/heydings_controls-webfont.eot?#iefix") format("embedded-opentype"),
url("fonts/heydings_controls-webfont.woff") format("woff"),
    url("fonts/heydings_controls-webfont.ttf")      format("truetype");
  font-weight: normal;
font-style: normal;
}

----------------------------------------

TITLE: Multi-line Object Formatting in JavaScript
DESCRIPTION: Demonstrates Prettier's handling of multi-line object formatting and how to control object wrapping behavior.

LANGUAGE: javascript
CODE:
const user = {
  name: "John Doe",
  age: 30,
};

----------------------------------------

TITLE: Formatting long string assignments in JavaScript
DESCRIPTION: Illustrates how Prettier handles line breaks for long string assignments.

LANGUAGE: javascript
CODE:
// Before
elements[0].innerHTML = '<div></div><div></div><div></div><div></div><div></div><div></div>';
var testExampleOrOrderOfGetterAndSetterReordered = obj.exampleOfOrderOfGetterAndSetterReordered;

// After
elements[0].innerHTML =
  '<div></div><div></div><div></div><div></div><div></div><div></div>';
var testExampleOrOrderOfGetterAndSetterReordered =
  obj.exampleOfOrderOfGetterAndSetterReordered;


----------------------------------------

TITLE: Supporting TypeScript 4.1 features
DESCRIPTION: Prettier now supports new TypeScript 4.1 features like Key Remapping in Mapped Types and Template Literal Types.

LANGUAGE: typescript
CODE:
// Key Remapping in Mapped Types
type MappedTypeWithNewKeys<T> = {
  [K in keyof T as NewKeyType]: T[K]
};

// Template Literal Types
type HelloWorld = `Hello, ${keyof World}`;

----------------------------------------

TITLE: Basic Component with Props
DESCRIPTION: Example of a Heading component with a prop and nested content

LANGUAGE: jsx
CODE:
<Heading hi='there'>Hello, world!
</Heading>

----------------------------------------

TITLE: Formatting Long Markdown Line with Nested Brackets
DESCRIPTION: This snippet shows a single, very long line of markdown text that includes nested brackets at the end. It's used to test or demonstrate how Prettier formats such content, especially handling line wrapping and preserving nested bracket structures.

LANGUAGE: markdown
CODE:
A very long line of markdown with additional brackets as it wraps over the [[[end like this]]].

----------------------------------------

TITLE: Creating Unordered List in Markdown
DESCRIPTION: This snippet demonstrates how to create an unordered list in Markdown using asterisks. It shows two list items, with the second item being empty.

LANGUAGE: markdown
CODE:
*foo bar
*

----------------------------------------

TITLE: Creating Nested Lists with Asterisk Bullets in Markdown
DESCRIPTION: Demonstrates a three-level nested list structure using asterisk (*) bullet points with tab indentation for nesting levels.

LANGUAGE: markdown
CODE:
* Top level list item 1
* Top level list item 2
	* Nested List item 1
	* Nested List item 2
    	* Sub-Nested List item 1
    	* Sub-Nested List item 2

----------------------------------------

TITLE: Support for const Type Parameters in Flow
DESCRIPTION: Shows new support for const type parameters in Flow type annotations.

LANGUAGE: jsx
CODE:
function f<const T>(): void {}

// Prettier 3.4
// Parse error

// Prettier 3.5
function f<const T>(): void {}

----------------------------------------

TITLE: Implementing Prettier Plugin Parser
DESCRIPTION: Example of implementing a parser in a Prettier plugin

LANGUAGE: javascript
CODE:
export const parsers = {
  "dance-parse": {
    parse,
    astFormat: "dance-ast",
    hasPragma,
    locStart,
    locEnd,
    preprocess
  }
};

----------------------------------------

TITLE: Cloning and Branching Prettier Repository using Git
DESCRIPTION: This snippet demonstrates how to clone the Prettier repository, navigate to the project directory, and create a new branch for development. It uses Git commands to perform these operations.

LANGUAGE: sh
CODE:
git clone https://github.com/<your_username>/jest
cd jest
git checkout -b my_branch

----------------------------------------

TITLE: Ignoring YAML Nodes with prettier-ignore
DESCRIPTION: This example shows how to use the # prettier-ignore comment to prevent Prettier from formatting a specific node in a YAML file.

LANGUAGE: yaml
CODE:
# prettier-ignore
key  : value
hello: world

----------------------------------------

TITLE: Formatting Flow tuple type annotations
DESCRIPTION: Illustrates how Prettier handles line breaks in Flow tuple type annotations.

LANGUAGE: typescript
CODE:
// Before
export type FileMetaData = [/* id */ string, /* mtime */ number, /* visited */
  | 0
  | 1, /* dependencies */ Array<string>];

// After
export type FileMetaData = [
  /* id */ string,
  /* mtime */ number,
  /* visited */ 0|1,
  /* dependencies */ Array<string>,
];


----------------------------------------

TITLE: Setting Multiple CSS Mask Image Values
DESCRIPTION: Demonstrates how to set multiple mask-image values using both an image URL and a linear gradient. The example combines a PNG mask with a gradient that transitions from black to transparent.

LANGUAGE: css
CODE:
/* Multiple values */
mask-image: image(url(mask.png), skyblue),                          linear-gradient(rgb(0 0 0 / 100%), transparent);

----------------------------------------

TITLE: Creating Aligned Markdown Table with Escaped Pipes
DESCRIPTION: This snippet shows how to create a Markdown table with left, center, and right alignment. It also demonstrates how to include pipe characters within table cells by escaping them.

LANGUAGE: markdown
CODE:
| a | b | c |
|:--|:-:|--:|
| \| | \| | \| |

----------------------------------------

TITLE: Markdown List and Task List Structure
DESCRIPTION: Example showing nested bullet points, task lists with checkboxes, and paragraphs in markdown format. Demonstrates proper indentation for child list items and paragraph spacing.

LANGUAGE: markdown
CODE:
* parent list item parent list item parent list item parent list item parent list item parent list item

     * child list item child list item child list item child list item child list item child list item

    paragraph paragraph paragraph paragraph paragraph paragraph paragraph paragraph paragraph

* [x] parent task list item parent task list item parent task list item parent task list item

     * [x] child task list item child task list item child task list item child task list item

    paragraph paragraph paragraph paragraph paragraph paragraph paragraph paragraph paragraph

----------------------------------------

TITLE: Improved Handling of CJK Punctuation in Markdown
DESCRIPTION: Demonstrates improved handling of fullwidth tilde (U+FF5E) as CJK punctuation in Markdown.

LANGUAGE: markdown
CODE:
<!-- Input (--prose-wrap=never) -->
a 字 a 字 a 字
60～
100点
60〜
100点

<!-- Prettier 3.4 -->
a 字 a 字 a 字 60～ 100点 60〜10点


<!-- Prettier 3.5 -->
a 字 a 字 a 字 60～10点 60〜100点

----------------------------------------

TITLE: Specifying JSON Fixture Path for Grid Configuration
DESCRIPTION: This snippet shows the file path for a JSON fixture used in Cypress tests. The fixture is named 'gridConfiguration.json' and is located in the Cypress fixtures directory of the-hub package.

LANGUAGE: json
CODE:
"packages\\the-hub\\cypress\\fixtures\\gridConfiguration.json"

----------------------------------------

TITLE: Formatting Numbers with Spaces and Line Breaks
DESCRIPTION: Examples showing different ways of formatting numbers with varying spaces, line continuations and list indentation.

LANGUAGE: plaintext
CODE:
123  
456

123\
456

- 123  
  123

----------------------------------------

TITLE: Array Expression Implementation Example
DESCRIPTION: Example showing how Prettier implements formatting for array expressions using groups and indentation.

LANGUAGE: javascript
CODE:
group([
  "[",
  indent(
    [
      line,
      join(
        [",", line],
        path.map(print, "elements")
      )
    ]
  ),
  line,
  "]"
]);

----------------------------------------

TITLE: Formatting chained assignments in JavaScript
DESCRIPTION: Shows how Prettier removes unnecessary parentheses from chained assignments.

LANGUAGE: javascript
CODE:
// Before
this.size = (this._origin = (this._capacity = 0));

// After
this.size = this._origin = this._capacity = 0;


----------------------------------------

TITLE: Adding ESM standalone bundles
DESCRIPTION: Prettier now provides ES modules that can be directly used in modern browsers.

LANGUAGE: javascript
CODE:
import prettier from "https://unpkg.com/prettier/esm/standalone.mjs";
import parserGraphql from "https://unpkg.com/prettier/esm/parser-graphql.mjs";

prettier.format("query {     }", {
  parser: "graphql",
  plugins: [parserGraphql],
});

----------------------------------------

TITLE: Configuring Montserrat Font Loading with Data Preference Media Query
DESCRIPTION: Defines a @font-face rule within a media query checking for data preference settings. Sets up the Montserrat font with normal style, 400 weight, and swap display, including local and WOFF2 source files. Specifies unicode range for Latin character support.

LANGUAGE: css
CODE:
@media (prefers-reduced-data: no-preference) {
  @font-face      {
    font-family: Montserrat;
            font-style: normal;
  font-weight: 400;
    font-display: swap;
    /* latin */
    src:
      local("Montserrat Regular"),
      local("Montserrat-Regular"),
      url("fonts/montserrat-regular.woff2") format("woff2");
    unicode-range: U+0000-00FF, U+0131,
U+0152-0153, U+02BB-02BC, U+02C6,
            U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193,
      U+2212, U+2215, U+FEFF, U+FFFD;
  }
}

----------------------------------------

TITLE: Creating Image Link in Markdown
DESCRIPTION: This snippet shows how to create an image link in Markdown. It includes alt text and a URL for the image source.

LANGUAGE: markdown
CODE:
![hello](http://example.com/image.png)

----------------------------------------

TITLE: String Pattern with Quotes and Underscores
DESCRIPTION: A text pattern showing characters 'aa' and 'cc' connected by underscores to a quoted 'bb'

LANGUAGE: text
CODE:
aa_"bb"_cc

----------------------------------------

TITLE: HTML Comment with MIT License and Format Directive
DESCRIPTION: HTML comment block containing MIT license placeholder text and a @format directive that signals the file should be processed by a formatter.

LANGUAGE: html
CODE:
<!--
  MIT LICENSE 
  
  bla bla bla

  @format
-->

I     should      be      formatted       !!

----------------------------------------

TITLE: SCSS Module String Quoting
DESCRIPTION: Demonstrates consistent quoting of Sass module strings in SCSS files.

LANGUAGE: scss
CODE:
@use 'sass:math';
@forward 'list';

----------------------------------------

TITLE: Basic HTML Angle Brackets
DESCRIPTION: A minimal HTML example showing empty angle brackets that could be used as the foundation for an HTML tag.

LANGUAGE: html
CODE:
<
 >

----------------------------------------

TITLE: Ignoring Markdown List Formatting
DESCRIPTION: This example shows how to use prettier-ignore to maintain the original formatting of a long paragraph within a Markdown list item.

LANGUAGE: markdown
CODE:
```md
<!-- prettier-ignore -->
- This is a long long
  long long long long
  long long paragraph.
```

----------------------------------------

TITLE: Comparing Markdown Strong Emphasis Formatting Between Prettier Versions
DESCRIPTION: Shows the difference in handling strong emphasis formatting between Prettier stable and main versions. The fix changes the output to use triple asterisks (***) instead of double asterisks with underscore (**_) for better compatibility with most Markdown implementations.

LANGUAGE: markdown
CODE:
<!-- Input -->
1***2***3
1**_2_**3

<!-- Prettier stable -->
1**_2_**3
1**_2_**3

<!-- Prettier main -->
1***2***3
1***2***3

----------------------------------------

TITLE: Formatting binary expressions in JavaScript
DESCRIPTION: Demonstrates improved formatting for long chains of logical expressions.

LANGUAGE: javascript
CODE:
// Before
const computedDescriptionLines = (showConfirm &&
  descriptionLinesConfirming) ||
  (focused && !loading && descriptionLinesFocused) ||
  descriptionLines;

// After
const computedDescriptionLines =
  (showConfirm && descriptionLinesConfirming) ||
  (focused && !loading && descriptionLinesFocused) ||
  descriptionLines;


// Before
return !filePath.includes(coverageDirectory) &&
  !filePath.endsWith(`.${SNAPSHOT_EXTENSION}`);

// After
return (
  !filePath.includes(coverageDirectory) &&
  !filePath.endsWith(`.${SNAPSHOT_EXTENSION}`)
);


----------------------------------------

TITLE: Ordered List Variable Declaration 2
DESCRIPTION: Second example of JavaScript variable declarations with Prettier formatting in an ordered list context.

LANGUAGE: javascript
CODE:
const a = 1;


const b = 2;

----------------------------------------

TITLE: Formatting Decorators in JavaScript Classes
DESCRIPTION: Demonstrates how Prettier respects the original style of decorator placement in class declarations.

LANGUAGE: javascript
CODE:
class Hello {
  @decorator inline = "value";

  @decorator
  ownLine = "value";

  @decorator({
    hello: "world"
  })
  multiLine = "value";
}

----------------------------------------

TITLE: Nested Components with Whitespace
DESCRIPTION: Hello component containing World component with surrounding text and trailing number

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>123

----------------------------------------

TITLE: Nested Components with Whitespace
DESCRIPTION: Hello component containing World component with surrounding text and trailing number

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>123

----------------------------------------

TITLE: Using Numeric Separators in TypeScript
DESCRIPTION: Prettier now supports numeric separators, a stage 3 ECMAScript proposal. This feature is available in TypeScript 2.7 and is now preserved by Prettier.

LANGUAGE: typescript
CODE:
var a = 1_000_000_000;
var b = 0b1101_0101_1001;
var c = 0xAE_FE_2F;

----------------------------------------

TITLE: Formatting Complex Markdown Link with Nested Parentheses using Prettier
DESCRIPTION: This snippet showcases a Markdown link format that includes nested parentheses within the link text and URL. It demonstrates how Prettier handles complex link structures in Markdown.

LANGUAGE: markdown
CODE:
[link]((foo)and(bar))

----------------------------------------

TITLE: Formatting Comment-Only JSONC Files in Prettier
DESCRIPTION: This snippet illustrates the behavior of Prettier when formatting a JSONC file containing only comments. It compares the output of the stable version, which throws a SyntaxError, to the main branch, which correctly preserves the comments.

LANGUAGE: jsonc
CODE:
// Input
// Comment

// Prettier stable
SyntaxError: Unexpected token (1:11)
> 1 | // Comment
    |           ^

// Prettier main
// Comment

----------------------------------------

TITLE: Formatting AssignmentExpression in Class Property Keys in JSX
DESCRIPTION: This snippet demonstrates how Prettier now consistently adds parentheses to AssignmentExpression in both object keys and class property keys. It shows the input code, the previous Prettier stable output, and the new Prettier main output.

LANGUAGE: jsx
CODE:
// Input
a = {
  [(x = "key")]: 1,
}

class A {
  [(x = "property")] = 1;
  [(x = "method")]() {}
}

// Prettier stable
a = {
  [(x = "key")]: 1,
};

class A {
  [x = "property"] = 1;
  [(x = "method")]() {}
}

// Prettier main
a = {
  [(x = "key")]: 1,
};

class A {
  [(x = "property")] = 1;
  [(x = "method")]() {}
}

----------------------------------------

TITLE: Preserving YAML front-matter in SCSS with Prettier 1.11
DESCRIPTION: Demonstrates how Prettier now preserves YAML front-matter in SCSS files for Jekyll compatibility.

LANGUAGE: scss
CODE:
---
title: Title
description: Description
---

a {
  color: red;
}

----------------------------------------

TITLE: Ruby Array Literal Syntax
DESCRIPTION: Example showing array literal syntax conversion for simple strings and symbols using %w and %i syntax when rubyArrayLiteral option is enabled

LANGUAGE: ruby
CODE:
['a', 'b', 'c'] # Original syntax
%w[a b c]      # Converted with rubyArrayLiteral enabled

[:a, :b, :c]   # Original syntax
%i[a b c]      # Converted with rubyArrayLiteral enabled

----------------------------------------

TITLE: Creating Thematic Breaks in Markdown
DESCRIPTION: This snippet shows three different ways to create horizontal rules or thematic breaks in markdown. It uses asterisks, hyphens, and underscores, each on separate lines.

LANGUAGE: markdown
CODE:
***
---
___

----------------------------------------

TITLE: Basic HTML Structure with Div Element
DESCRIPTION: Demonstrates a minimal HTML markup with a div element containing text content "foo"

LANGUAGE: html
CODE:
<div>
foo

----------------------------------------

TITLE: Formatting CSS Grid Declarations with Prettier
DESCRIPTION: Shows how Prettier preserves line breaks in CSS grid declarations while still applying formatting.

LANGUAGE: css
CODE:
div {
  grid:
    [wide-start] "header header header" 200px
    [wide-end] "footer footer footer" 0.5fr
    / auto 50px auto;
}

----------------------------------------

TITLE: Testing Markdown Link Formatting in Prettier
DESCRIPTION: This snippet tests Prettier's handling of a specific Markdown link edge case. It presents a scenario where a link-like structure is not actually a valid Markdown link, which may challenge Prettier's formatting rules.

LANGUAGE: markdown
CODE:
[not a `link](/foo`)

----------------------------------------

TITLE: Applying Border and Filter Effects to MDN Logo in CSS
DESCRIPTION: This CSS code styles an element with the ID 'MDN-logo'. It adds a blue border and applies multiple filter effects including drop shadow and hue rotation.

LANGUAGE: css
CODE:
#MDN-logo {
border: 1px solid blue;
  filter: drop-shadow(5px 5px 0 red) hue-rotate(180deg) drop-shadow(5px 5px 0
        red);
}

----------------------------------------

TITLE: Formatting Simple JSX Expressions in Markdown Code Blocks
DESCRIPTION: Demonstrates how Prettier now omits semicolons before and after simple JSX expressions in Markdown code samples.

LANGUAGE: markdown
CODE:
No semi:

```jsx
<div>Example</div>
```

----------------------------------------

TITLE: Math Expression Parentheses Example
DESCRIPTION: Demonstration of enhanced parentheses formatting around math expressions in JavaScript.

LANGUAGE: JavaScript
CODE:
// Input
a % 10 - 5;
2 / 3 * 10 / 2 + 2;

// Output with Prettier 1.13
(a % 10) - 5;
((2 / 3) * 10) / 2 + 2;

----------------------------------------

TITLE: Formatting HTML-like Structure with Prettier
DESCRIPTION: This snippet shows a minimal example of how Prettier might format a simple code structure. It demonstrates Prettier's handling of inline elements and whitespace.

LANGUAGE: html
CODE:
`code  
span`

----------------------------------------

TITLE: Limiting ALE to explicit linters in Vim
DESCRIPTION: This setting restricts ALE to run only explicitly configured linters, preventing unwanted linting.

LANGUAGE: vim
CODE:
let g:ale_linters_explicit = 1

----------------------------------------

TITLE: Handling Self-Closing Style Tags in Vue
DESCRIPTION: Fixes formatting issues with self-closing style or script tags in Vue files.

LANGUAGE: vue
CODE:
<template>
  <span :class="$style.root"><slot /></span>
</template>

<style src="./style.css" module />

----------------------------------------

TITLE: Formatting Code Blocks in Markdown with Prettier
DESCRIPTION: Shows how Prettier formats code blocks within Markdown files using language-specific formatting rules.

LANGUAGE: markdown
CODE:
```js
reallyUgly(javascript);
```

```css
.h1 {
  color: red;
}
```

----------------------------------------

TITLE: Defining WebAuthn Credential Creation Parameters in JavaScript
DESCRIPTION: This code snippet defines a constant object 'createCredentialDefaultArgs' with the necessary parameters for WebAuthn credential creation. It includes relying party information, user details, public key parameters, attestation type, timeout, and a cryptographic challenge.

LANGUAGE: javascript
CODE:
const createCredentialDefaultArgs = {
  publicKey: {
    // Relying Party (a.k.a. - Service):
    rp: {
      name: "Acme",
    },
    // User:
    user: {
      id: new Uint8Array(16),
      name: "carina.p.anand@example.com",
      displayName: "Carina P. Anand",
    },
    pubKeyCredParams: [
      {
        type: "public-key",
        alg: -7,
      },
    ],
    attestation: "direct",
    timeout: 60000,
    challenge: new Uint8Array(
      [
        // must be a cryptographically random number sent from a server
        0x8c, 0x0a, 0x26, 0xff, 0x22, 0x91, 0xc1, 0xe9, 0xb9, 0x4e, 0x2e, 0x17, 0x1a, 0x98, 0x6a, 0x73,
        0x71, 0x9d, 0x43, 0x48, 0xd5, 0xa7, 0x6a, 0x15, 0x7e, 0x38, 0x94, 0x52, 0x77, 0x97, 0x0f, 0xef,
      ]
    ).buffer,
  },
};

----------------------------------------

TITLE: Inserting @format Pragma with Prettier CLI
DESCRIPTION: Demonstrates the use of the --insert-pragma flag to add @format pragmas to files when formatting.

LANGUAGE: bash
CODE:
prettier --write "folder/**/*.js" --insert-pragma

----------------------------------------

TITLE: Component Sequence with Spacing
DESCRIPTION: Two Hello components with consistent internal structure but different trailing numbers and spacing

LANGUAGE: jsx
CODE:
<Hello>
    test   <World />   test
</Hello>       123
<Hello>
    test   <World />   test
</Hello>       234

----------------------------------------

TITLE: Creating Internal Fragment Link in Markdown
DESCRIPTION: This snippet shows how to create an internal link to a fragment within the same document using Markdown syntax.

LANGUAGE: markdown
CODE:
[link](#fragment)

----------------------------------------

TITLE: Configuring Prettier Documentation Front Matter in YAML
DESCRIPTION: Example YAML front matter for Prettier documentation files. Includes necessary metadata for proper rendering and navigation within the documentation site.

LANGUAGE: yaml
CODE:
id: doc1
title: Document Title
layout: docs1
category: Sidebar Category 1
permalink: docs/doc1.html
previous: doc0
next: doc2

----------------------------------------

TITLE: Preserving Blockquote Formatting in Markdown
DESCRIPTION: Prettier now correctly preserves blockquote formatting when embedding JavaScript inside Markdown blockquotes.

LANGUAGE: markdown
CODE:
> ```````md
> <!-- prettier-ignore -->
> ```js
> ugly   ( code ) ;
> ```
> ```````

----------------------------------------

TITLE: TypeScript Definite Assignment Assertions
DESCRIPTION: Improved handling of definite assignment assertions in TypeScript even when not followed by type annotations.

LANGUAGE: typescript
CODE:
let a!;

----------------------------------------

TITLE: CSS Letter Case Normalization
DESCRIPTION: Demonstrates the new CSS formatting that normalizes most elements to lowercase, while preserving case for specific identifiers.

LANGUAGE: css
CODE:
/* Before */
DIV.Foo {
  HEIGHT: 12PX;
}

/* After */
div.Foo {
  height: 12px;
}

----------------------------------------

TITLE: Basic Variable Name
DESCRIPTION: A simple code example showing a variable name 'foo' without any specific programming language context.

LANGUAGE: plaintext
CODE:
foo

----------------------------------------

TITLE: Formatting Angular Shorthand Properties
DESCRIPTION: Fix formatting of shorthand properties in Angular templates.

LANGUAGE: html
CODE:
<ng-container *ngTemplateOutlet="someTmpl; context: { app }"></ng-container>

----------------------------------------

TITLE: Formatting CSS-in-JS with styled-components
DESCRIPTION: Example showing how Prettier formats CSS within styled-components template literals, including nested selectors and dynamic props.

LANGUAGE: js
CODE:
const EqualDivider = styled.div`
  margin: 0.5rem;
  padding: 1rem;
  background: papayawhip;
  > * {
    flex: 1;
    &:not(:first-child) {
      ${props => (props.vertical ? "margin-top" : "margin-left")}: 1rem;
    }
  }
`;

----------------------------------------

TITLE: Markdown Image Reference Syntax
DESCRIPTION: Demonstrates image reference syntax using AsyncGeneratorFunction as both the alt text and reference identifier.

LANGUAGE: markdown
CODE:
![   See   `AsyncGeneratorFunction`   ][   See   `AsyncGeneratorFunction`   ]

----------------------------------------

TITLE: Demonstrating Incorrect Markdown Bold Syntax
DESCRIPTION: This snippet shows an example of incorrectly formatted Markdown bold syntax. The asterisks are not properly paired, resulting in unintended formatting.

LANGUAGE: markdown
CODE:
**foo **bar****

----------------------------------------

TITLE: Formatting Markdown with Word Wrap in Prettier
DESCRIPTION: Demonstrates Prettier's ability to wrap Markdown text at a specified line length while maintaining readability.

LANGUAGE: markdown
CODE:
Voilà! In view, a humble vaudevillian veteran cast vicariously as both victim
and villain by the vicissitudes of Fate. This visage, no mere veneer of vanity,
is a vestige of the vox populi, now vacant, vanished. However, this valourous
visitation of a bygone vexation stands vivified and has vowed to vanquish these
venal and virulent vermin vanguarding vice and vouchsafing the violently vicious
and voracious violation of volition! The only verdict is vengeance; a vendetta
held as a votive, not in vain, for the value and veracity of such shall one day
vindicate the vigilant and the virtuous. Verily, this vichyssoise of verbiage
veers most verbose, so let me simply add that it's my very good honour to meet
you and you may call me V.

----------------------------------------

TITLE: Traditional Ternary Expression Formatting
DESCRIPTION: Shows the traditional style of formatting ternary expressions before the JSX-specific formatting was introduced.

LANGUAGE: jsx
CODE:
willEatMeat
  ? "Full Menu"
  : willEatEggs
    ? "Vegetarian Menu"
    : willEatVegetables ? "Vegan Menu" : "Backup Menu";

----------------------------------------

TITLE: Custom Parser Plugin Example
DESCRIPTION: Example showing how to create a custom parser plugin for Prettier to modify AST during formatting

LANGUAGE: javascript
CODE:
import { format } from "prettier";
import * as prettierPluginBabel from "prettier/plugins/babel";

const myCustomPlugin = {
  parsers: {
    "my-custom-parser": {
      async parse(text) {
        const ast = await prettierPluginBabel.parsers.babel.parse(text);
        ast.program.body[0].expression.callee.name = "_";
        return ast;
      },
      astFormat: "estree",
    },
  },
};

await format("lodash ( )", {
  parser: "my-custom-parser",
  plugins: [myCustomPlugin],
});

----------------------------------------

TITLE: Arrow Function Assignment Parentheses
DESCRIPTION: Added parentheses for assignments within arrow function bodies to improve code clarity.

LANGUAGE: javascript
CODE:
// Before
() => foo = bar + 2;

// After
() => (foo = bar + 2);

----------------------------------------

TITLE: Inserting an Image in Markdown
DESCRIPTION: This snippet shows how to embed an image in Markdown using the standard image syntax. It includes alternative text 'foo' and specifies the image source as 'train.jpg'.

LANGUAGE: markdown
CODE:
![foo](train.jpg)

----------------------------------------

TITLE: Formatting Backticks with Prettier in JavaScript
DESCRIPTION: This snippet demonstrates how Prettier formats a string containing backticks. It shows a specific case where backticks are used within a string literal.

LANGUAGE: JavaScript
CODE:
`` foo ` bar ``

----------------------------------------

TITLE: Formatting long CSS pseudo-selectors
DESCRIPTION: Demonstrates improved formatting for long :is, :where, and :not selectors in CSS, treating them similar to function calls in other languages.

LANGUAGE: css
CODE:
:where(
    label > input:valid,
    label > textarea:not(:empty),
    label > button[disabled]
  )
  ~ .errors
  > .error {
  display: none;
}

----------------------------------------

TITLE: Custom Parser Plugin Example
DESCRIPTION: Example showing how to create a custom parser plugin for Prettier to modify AST during formatting

LANGUAGE: javascript
CODE:
import { format } from "prettier";
import * as prettierPluginBabel from "prettier/plugins/babel";

const myCustomPlugin = {
  parsers: {
    "my-custom-parser": {
      async parse(text) {
        const ast = await prettierPluginBabel.parsers.babel.parse(text);
        ast.program.body[0].expression.callee.name = "_";
        return ast;
      },
      astFormat: "estree",
    },
  },
};

await format("lodash ( )", {
  parser: "my-custom-parser",
  plugins: [myCustomPlugin],
});

----------------------------------------

TITLE: Improved Conditional Statement Formatting
DESCRIPTION: Enhanced formatting of if conditions when they exceed column width limits, showing both before and after formatting states.

LANGUAGE: javascript
CODE:
// Before
if (
  this.hasPlugin("dynamicImports") && this.lookahead().type === tt.parenLeft
) {

// After
if (
  this.hasPlugin("dynamicImports") &&
  this.lookahead().type === tt.parenLeft
) {

----------------------------------------

TITLE: Configuring Backtick Usage in Prettier for JavaScript
DESCRIPTION: This snippet demonstrates the use of backticks in Prettier configuration, possibly for string templating or code highlighting. It shows a simple example with nested backticks.

LANGUAGE: JavaScript
CODE:
`` foo ` bar  ``

----------------------------------------

TITLE: Formatting Flow interfaces with line breaks
DESCRIPTION: Demonstrates how Prettier handles line breaks in Flow interface declarations.

LANGUAGE: typescript
CODE:
// Before
export interface Environment1 extends GenericEnvironment<SomeType, AnotherType, YetAnotherType> {
  m(): void
}

// After
export interface Environment1
  extends GenericEnvironment<SomeType, AnotherType, YetAnotherType> {
  m(): void
}


----------------------------------------

TITLE: Applying Italic Formatting in Markdown
DESCRIPTION: This snippet shows how to apply italic formatting to a word in Markdown using asterisks. The text 'bar' will be displayed in italics when rendered.

LANGUAGE: markdown
CODE:
foo*bar*

----------------------------------------

TITLE: Fixing Parentheses in ConditionalTypeAnnotation for TypeScript in Prettier
DESCRIPTION: This code snippet illustrates the fix for missing parentheses in ConditionalTypeAnnotation. It shows the original input, the incorrect output from Prettier's stable version, and the corrected output from Prettier's main branch. The fix ensures proper grouping of conditional expressions in type declarations.

LANGUAGE: jsx
CODE:
// Input
type T<U> = 'a' | ('b' extends U ? 'c' : empty);
type T<U> = 'a' & ('b' extends U ? 'c' : empty);

// Prettier stable
type T<U> = "a" | "b" extends U ? "c" : empty;
type T<U> = "a" & "b" extends U ? "c" : empty;

// Prettier main
type T<U> = "a" | ("b" extends U ? "c" : empty);
type T<U> = "a" & ("b" extends U ? "c" : empty);

----------------------------------------

TITLE: Creating an HTML Comment
DESCRIPTION: This snippet shows how to create a basic HTML comment. Comments in HTML are not visible on the rendered page and are used for leaving notes in the source code.

LANGUAGE: HTML
CODE:
<!-- hello world -->

----------------------------------------

TITLE: Handling comments in class methods
DESCRIPTION: Demonstrates how Prettier handles comments in class methods.

LANGUAGE: javascript
CODE:
// Before
class x {
  focus() // do nothing
  {
    // do nothing
  }
}

// After
class x {
  focus() {
    // do nothing
    // do nothing
  }
}


----------------------------------------

TITLE: Save Bundle to Custom Location
DESCRIPTION: Saves the bundled file to a specified location. Only works with a single file flag.

LANGUAGE: sh
CODE:
yarn build --file=parser-babel.js --save-as=babel-for-test.js

----------------------------------------

TITLE: Basic Whitespace Example
DESCRIPTION: A single identifier with extra whitespace that would typically be normalized by formatting tools.

LANGUAGE: plaintext
CODE:
    foo  

----------------------------------------

TITLE: Formatting TypeScript Import Type with Attributes
DESCRIPTION: Shows how Prettier formats TypeScript import type declarations with additional type attributes. Compares input code, stable Prettier output, and new implementation that preserves the type attribute specification.

LANGUAGE: jsx
CODE:
// Input
type A = import("foo", {with: {type: "json"}})

// Prettier stable
type A = import("foo")

// Prettier main
type A = import("foo", { with: { type: "json" } });

----------------------------------------

TITLE: Setting Prettier Options via CLI
DESCRIPTION: Example of using Prettier CLI options to override configuration.

LANGUAGE: bash
CODE:
prettier --print-width 100 --tab-width 4 --single-quote --trailing-comma es5 --bracket-spacing false --arrow-parens avoid

----------------------------------------

TITLE: Formatting GraphQL with Prettier using CommonJS
DESCRIPTION: This example shows how to use Prettier with CommonJS to format GraphQL code. While not directly usable in browsers, this approach can be used when bundling code for browser use with tools like browserify, Rollup, or webpack.

LANGUAGE: javascript
CODE:
const prettier = require("prettier/standalone");
const plugins = [require("prettier/plugins/graphql")];

(async () => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins,
  });
})();

----------------------------------------

TITLE: Displaying HTML Entities in HTML
DESCRIPTION: This snippet demonstrates the use of various HTML entities to display special characters, symbols, and accented letters. It includes common entities like non-breaking space, ampersand, and copyright symbol, as well as more specialized mathematical and linguistic symbols.

LANGUAGE: HTML
CODE:
&nbsp; &amp; &copy; &AElig; &Dcaron;
&frac34; &HilbertSpace; &DifferentialD;
&ClockwiseContourIntegral; &ngE;

----------------------------------------

TITLE: Formatting URL in Markdown
DESCRIPTION: This snippet shows how to format a URL as a clickable link in Markdown. It uses angle brackets to enclose the URL, which is a common Markdown syntax for creating automatic links.

LANGUAGE: markdown
CODE:
<http://foo.bar.baz>

----------------------------------------

TITLE: Formatting Angular TemplateLiteral in HTML Templates
DESCRIPTION: Shows three variations of formatting for Angular template literals: the original input, Prettier stable version formatting, and Prettier main branch formatting. The example demonstrates how template string interpolation is handled within Angular template syntax.

LANGUAGE: html
CODE:
<!-- Input -->
<div>{{ `Hello, ${
getName('world')}` }}</div>

<!-- Prettier stable -->
<div>
  {{ `Hello, ${
getName('world')}` }}
</div>

<!-- Prettier main -->
<div>{{ `Hello, ${getName("world")}` }}</div>

----------------------------------------

TITLE: Default Prettier Formatting
DESCRIPTION: Example of JavaScript code without any Prettier ignore comments, showing default formatting behavior.

LANGUAGE: javascript
CODE:
foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());

----------------------------------------

TITLE: Simple Text Display
DESCRIPTION: Shows basic text content with indentation.

LANGUAGE: text
CODE:
aaa

----------------------------------------

TITLE: Defining Unformatted JSON Configuration for Prettier
DESCRIPTION: This snippet shows an unformatted JSON configuration object with a single key-value pair. It includes extra whitespace and a comment, which are typical targets for Prettier's formatting rules.

LANGUAGE: jsonc
CODE:
   // comment
{
     "foo"   :    "bar"
}

----------------------------------------

TITLE: Installing pretty-quick with simple-git-hooks (npm)
DESCRIPTION: These commands install pretty-quick and simple-git-hooks, create a configuration file, and set up the pre-commit hook for npm projects.

LANGUAGE: bash
CODE:
npm install --save-dev simple-git-hooks pretty-quick
echo '{\n  "pre-commit": "npx pretty-quick --staged"\n}\n' > .simple-git-hooks.json
npx simple-git-hooks

----------------------------------------

TITLE: Empty Array Literal
DESCRIPTION: Demonstrates an empty array literal pattern wrapped in markdown code block syntax using tildes. The array is shown with escaped square brackets.

LANGUAGE: plaintext
CODE:
\[\]

----------------------------------------

TITLE: Displaying Copyright Symbol using HTML Entity
DESCRIPTION: This snippet shows the HTML entity for displaying the copyright symbol. When rendered in an HTML document, it will appear as the © symbol.

LANGUAGE: HTML
CODE:
&copy

----------------------------------------

TITLE: Configuring Husky.Net with Prettier
DESCRIPTION: This JSON configuration adds a Prettier task to the task-runner.json file for use with Husky.Net.

LANGUAGE: json
CODE:
{
  "command": "npx",
  "args": ["prettier", "--ignore-unknown", "--write", "${staged}"],
  "pathMode": "absolute"
}

----------------------------------------

TITLE: Preserving Specific Spacing in Prettier Configuration
DESCRIPTION: This snippet demonstrates a line of text with specific spacing that should be preserved by Prettier. It includes multiple spaces between words and exclamation marks at the end.

LANGUAGE: plaintext
CODE:
I     should      stay      as-is   !!

----------------------------------------

TITLE: Invalid Backtick String Example - JavaScript
DESCRIPTION: Demonstrates improper use of backticks in string formatting. The code shows multiple backticks without proper string template literal syntax.

LANGUAGE: javascript
CODE:
`hi`lo`

----------------------------------------

TITLE: Using prettier-ignore Comment in Handlebars
DESCRIPTION: Shows how to use the {{! prettier-ignore }} comment to exclude specific Handlebars templates from Prettier formatting.

LANGUAGE: hbs
CODE:
{{! prettier-ignore }}
<div>
  "hello! my parent was ignored"
  {{#my-crazy-component     "shall"     be="preserved"}}
    <This
      is  =  "also preserved as is"
    />
  {{/my-crazy-component}}
</div>

----------------------------------------

TITLE: Displaying Indented Code Block in Markdown
DESCRIPTION: This snippet demonstrates how to create an indented code block in Markdown. Indented code blocks are created by indenting each line with at least 4 spaces or 1 tab.

LANGUAGE: markdown
CODE:
    indented code

----------------------------------------

TITLE: Post-commit Git Index Update Script
DESCRIPTION: Shell script to update git index after Prettier modifications

LANGUAGE: sh
CODE:
#!/bin/sh
git update-index -g

----------------------------------------

TITLE: Creating Nested List in Markdown
DESCRIPTION: This snippet shows how to create a nested list in Markdown. It demonstrates a top-level item followed by an indented sub-item.

LANGUAGE: markdown
CODE:
> foo
    - bar

----------------------------------------

TITLE: Starting Prettier Website Development Server
DESCRIPTION: Commands to switch to the website directory and start the development server. The server hosts the website locally and reflects changes without needing restarts.

LANGUAGE: sh
CODE:
cd website
yarn start

----------------------------------------

TITLE: Displaying Unformatted Text for Prettier Demonstration
DESCRIPTION: This code snippet shows a single line of unformatted text, likely used to demonstrate Prettier's formatting capabilities. The text 'foo' is enclosed in a code block, which may be part of a larger documentation or testing process for Prettier.

LANGUAGE: plaintext
CODE:
foo

----------------------------------------

TITLE: Formatting GraphQL with Prettier in a Classic Web Worker
DESCRIPTION: This example shows how to use Prettier in a classic Web Worker to format GraphQL code. It loads Prettier and the GraphQL plugin using importScripts and formats a simple GraphQL query within the worker context.

LANGUAGE: javascript
CODE:
importScripts(
  "https://unpkg.com/prettier@3.5.3/standalone.js",
  "https://unpkg.com/prettier@3.5.3/plugins/graphql.js",
);

(async () => {
  const formatted = await prettier.format("type Query { hello: String }", {
    parser: "graphql",
    plugins: prettierPlugins,
  });
})();

----------------------------------------

TITLE: Formatting Markdown Blockquote with Heading
DESCRIPTION: Shows the syntax for creating a Markdown blockquote with a heading and two lines of text. Uses the greater than symbol (>) to create blockquote formatting.

LANGUAGE: markdown
CODE:
# Foo
bar
 baz

----------------------------------------

TITLE: Formatting URL with asterisks in Markdown-style link
DESCRIPTION: This snippet shows a Markdown-style link syntax with asterisks at the beginning and end of the URL. It may be used to test Prettier's handling of special characters in URLs within link structures.

LANGUAGE: markdown
CODE:
**a<http://foo.bar/?q=**>

----------------------------------------

TITLE: Markdown Link Reference and Blockquote Structure
DESCRIPTION: Demonstrates the usage of a link reference definition with a label 'foo' pointing to '/url', followed by a blockquote containing 'bar'.

LANGUAGE: markdown
CODE:
# [Foo]
[foo]: /url
> bar

----------------------------------------

TITLE: Creating Image with Alt Text and Reference Link in Markdown
DESCRIPTION: This snippet shows how to create an image with alt text using Markdown syntax, followed by a reference-style link definition. The link definition includes a URL and a title with special characters that need to be properly escaped when rendered.

LANGUAGE: Markdown
CODE:
![foo *bar*]

[foo *bar*]: train.jpg "train & tracks"

----------------------------------------

TITLE: Defining Markdown Link Reference with URL and Title
DESCRIPTION: This snippet demonstrates how to create a link reference definition in Markdown. It includes a reference label, URL, and an optional title.

LANGUAGE: markdown
CODE:
[foo]: /url "title" ok

----------------------------------------

TITLE: Creating Markdown List and Horizontal Rule
DESCRIPTION: This snippet shows how to create a simple unordered list item and a horizontal rule in Markdown. The hyphen is used for the list item, while three asterisks create the horizontal rule.

LANGUAGE: markdown
CODE:
- Foo
- * * *

----------------------------------------

TITLE: Creating HTML Anchor Link
DESCRIPTION: Creates a basic HTML hyperlink (a tag) that links to 'bar' with the text content 'baz'

LANGUAGE: html
CODE:
Foo
<a href="bar">
baz

----------------------------------------

TITLE: Markdown Table with JSX
DESCRIPTION: Markdown table structure containing JSX component in a cell

LANGUAGE: markdown
CODE:
| Column 1 | Column 2 |
|---|---|
| Text | <Hello>Text</Hello> |

----------------------------------------

TITLE: Formatting incomplete CSS style block
DESCRIPTION: An example of a malformed/incomplete CSS style block within HTML style tags that needs formatting.

LANGUAGE: html
CODE:
<style
  type="text/css">

foo


----------------------------------------

TITLE: Creating HTML Link with Encoded Special Characters
DESCRIPTION: This snippet demonstrates how to create an HTML anchor tag with a specially encoded character in the href attribute. It uses the HTML entity &ouml; to represent the German umlaut character 'ö'.

LANGUAGE: HTML
CODE:
<a href="&ouml;&ouml;.html">

----------------------------------------

TITLE: Markdown Italic Text Formatting
DESCRIPTION: Demonstrates the use of asterisks to create italic text in markdown. Shows a closing HTML tag followed by italic-formatted text.

LANGUAGE: markdown
CODE:
</ins>
*bar*

----------------------------------------

TITLE: Styling Box with Multiple Gradients and Custom Border
DESCRIPTION: Creates a styled box element with linear and radial gradients, custom border, and specific dimensions. Uses RGB colors with alpha channels and multiple background layers with different background-origin values.

LANGUAGE: css
CODE:
.box {
  margin: 10px 0;
  color: #fff;
  background: linear-gradient(90deg,
      rgb(131 58 180 / 100%)  0%,
  rgb(253 29 29 / 60%) 60%, rgb(252 176 69 / 100%) 100%), radial-gradient(circle, rgb(255 255 255 / 100%) 0%, rgb(0 0 0 / 100%) 28%);
  border: 20px dashed black;
  padding: 20px;
width: 400px;
        background-origin: padding-box, content-box;
  background-repeat: no-repeat;
}

----------------------------------------

TITLE: Displaying Incomplete HTML div Element
DESCRIPTION: This snippet shows an incomplete HTML div element. The class attribute is not properly defined, and the element is not closed. This is an example of invalid HTML markup.

LANGUAGE: HTML
CODE:
<div class
foo

----------------------------------------

TITLE: Markdown Link Reference with Title Attribute
DESCRIPTION: Demonstrates a link reference and its corresponding definition in Markdown. The reference is marked with an exclamation point and label [foo], while the definition provides the URL and title attribute.

LANGUAGE: markdown
CODE:
\![foo]

[foo]: /url "title"

----------------------------------------

TITLE: Formatting HTML Div Element with Multi-line Class
DESCRIPTION: Shows a div element with an ID of 'foo' and class names 'bar baz' split across multiple lines. This is a common pattern when dealing with long class names or formatting preferences.

LANGUAGE: html
CODE:
<div id="foo" class="bar
  baz">
</div>

----------------------------------------

TITLE: Creating Empty Link in Markdown
DESCRIPTION: Demonstrates the syntax for creating an empty link component using Markdown angle bracket notation. The link has no destination URL or content.

LANGUAGE: markdown
CODE:
[link](<>)

----------------------------------------

TITLE: Formatting Pattern Example in Plaintext
DESCRIPTION: Demonstrates a simple text pattern with three lines where the middle line is indented with two spaces. Shows basic text alignment and whitespace usage.

LANGUAGE: plaintext
CODE:
aaa
  aaa
aaa

----------------------------------------

TITLE: Creating React Functional Component with Comments
DESCRIPTION: A React functional component that returns a div containing an HTML comment and a horizontal rule element. The component demonstrates proper JSX structure and comment formatting.

LANGUAGE: jsx
CODE:
const Foo = () => {
  return (
    <div>
      {/*
        This links to a page that does not yet exist.
      */}    
      <hr />
    </div>
  );
};

----------------------------------------

TITLE: Defining a Markdown Code Block
DESCRIPTION: This snippet shows how to create a fenced code block in Markdown using tildes. The block contains a single line of text.

LANGUAGE: markdown
CODE:
~~~~
aaa
~~~
~~~~

----------------------------------------

TITLE: Preprocessing and Printing Text with Custom Formatting
DESCRIPTION: Defines preprocessing and printing operations for text formatting. The preprocessing step lowercases the text, while the printing step normalizes whitespace.

LANGUAGE: async-printer
CODE:
{
  "preprocess": "This    text   will be    lowercased.",
  "print": "This    text   will be      whitespace-normalized."
}

----------------------------------------

TITLE: Text Alignment with Indentation
DESCRIPTION: Shows two lines of text with different indentation levels, demonstrating code formatting patterns.

LANGUAGE: plaintext
CODE:
        foo
    bar

----------------------------------------

TITLE: Formatting Mixed HTML and Markdown Content
DESCRIPTION: Example showing how Prettier handles mixed HTML div element with special characters and Markdown emphasis syntax.

LANGUAGE: html
CODE:
<div *???-&&&-<---
*foo*

----------------------------------------

TITLE: Simple Variable Identifier
DESCRIPTION: Minimal code example showing a single identifier 'foo', likely representing a variable name or placeholder.

LANGUAGE: text
CODE:
    foo

----------------------------------------

TITLE: Creating a Markdown Link Reference
DESCRIPTION: This snippet demonstrates how to create and use a Markdown link reference. It includes a link in the text and its corresponding reference definition below.

LANGUAGE: markdown
CODE:
[foo][bar]

[bar]: /url "title"

----------------------------------------

TITLE: Markdown Code Block with Horizontal Rule
DESCRIPTION: Shows a code block containing text 'Foo' followed by markdown horizontal rule syntax

LANGUAGE: markdown
CODE:
`Foo
----
`

----------------------------------------

TITLE: Formatting HTML Attribute with Escaped Special Character
DESCRIPTION: This snippet shows an HTML anchor tag with a href attribute. The attribute value contains an asterisk (*) that is escaped with a backslash (\). This example might be used to test or demonstrate how special characters are handled in HTML attribute values.

LANGUAGE: HTML
CODE:
foo <a href="\*">

----------------------------------------

TITLE: Defining Markdown Headers
DESCRIPTION: This snippet shows how to create two different levels of headers in Markdown using the hash symbol (#). The first header is a third-level header, while the second is a first-level header.

LANGUAGE: markdown
CODE:
### foo ### b

----------------------------------------

TITLE: Creating Markdown Link with Escaped Quotes in Title
DESCRIPTION: This snippet demonstrates how to format a markdown link with a title attribute that includes both single and double quotes. The double quotes in the title are escaped to preserve the link structure.

LANGUAGE: markdown
CODE:
[link](/url "title \"&quot;")

----------------------------------------

TITLE: Creating Level 1 Header in Markdown
DESCRIPTION: Demonstrates how to create a level 1 header in markdown using the hash symbol (#) followed by text.

LANGUAGE: markdown
CODE:
#	foo

----------------------------------------

TITLE: Markdown Link Reference Definition
DESCRIPTION: Shows a Markdown link reference definition with brackets, URL, and optional title in quotes. The reference '[Foo]' is defined with corresponding URL '/url' and title 'title'.

LANGUAGE: markdown
CODE:
[Foo]

[foo]: /url "title"

----------------------------------------

TITLE: Formatting Text with Tabs in Plaintext
DESCRIPTION: This snippet shows a line of text with words separated by different numbers of tab characters. It can be used to test how text formatting tools handle multiple consecutive tabs.

LANGUAGE: plaintext
CODE:
	foo	baz		bim

----------------------------------------

TITLE: Formatting Single Line with Trailing Backslash in JavaScript
DESCRIPTION: This snippet shows a single line of code with a trailing backslash, which might be used to test Prettier's handling of unusual line endings or escaping.

LANGUAGE: JavaScript
CODE:
foo\

----------------------------------------

TITLE: Formatting Markdown with Components and Inline Code using Prettier
DESCRIPTION: This snippet demonstrates how Prettier may incorrectly format markdown text that includes components within italic sections and various ways of representing code in table cells. It highlights potential issues with breaking italics and handling different code syntax in markdown tables.

LANGUAGE: markdown
CODE:
This is an example of a component _being used in some italic markdown with some <Bolded />, 
and as you can see_ once you close the italics, it will break incorrectly when prettier formats it.

| Column 1 | Column 2 |
| -- | -- |
| **`Row 1 Code`** | Some text. |
| **<code>Row 2 Code</code>** | Some text. |
| **<InlineCode>Row 2 Code</InlineCode>** | Some text. |

----------------------------------------

TITLE: Variable Name Pattern
DESCRIPTION: Shows a snake_case style identifier pattern using underscores between words.

LANGUAGE: text
CODE:
foo_bar_

----------------------------------------

TITLE: Spaced Import Statements
DESCRIPTION: Same import statements as above but with additional line spacing between them, demonstrating different formatting preferences.

LANGUAGE: javascript
CODE:
import D from 'd'


import {A,B,C}    from "hello-world"


import {AAAAAAAAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBBBBBBB, CCCCCCCCCCCCCCCCCCCCCCC}   from  'xyz';

----------------------------------------

TITLE: Demonstrating Prettier Formatting with Unformatted Code
DESCRIPTION: This snippet shows a simple unformatted code example that Prettier would typically reformat. It illustrates the starting point before Prettier's formatting is applied.

LANGUAGE: plaintext
CODE:
foo 


----------------------------------------

TITLE: Prettier Formatting Directive
DESCRIPTION: HTML comment that instructs Prettier to format the following content, followed by intentionally poorly-spaced text that should be formatted.

LANGUAGE: markdown
CODE:
<!-- @prettier -->

I     should      be      formatted       !!

----------------------------------------

TITLE: Demonstrating Incorrect Bold Text Formatting in Markdown
DESCRIPTION: This snippet shows an attempt to create bold text in Markdown, but the syntax is incorrect. The correct syntax for bold text in Markdown is to use double asterisks without spaces, like **this**.

LANGUAGE: markdown
CODE:
**foo bar **

----------------------------------------

TITLE: Improving SCSS Function Call Formatting
DESCRIPTION: Fixes the formatting of SCSS function calls with leading dashes to prevent unwanted splitting.

LANGUAGE: scss
CODE:
div {
  width: -double(-double(3));
}

----------------------------------------

TITLE: Creating Nested Image and Link Structure in Markdown
DESCRIPTION: This snippet demonstrates how to create a complex nested structure in Markdown, combining an image with multiple levels of links. It shows the syntax for embedding an image within a link, which is then nested within another link, creating a three-level deep structure.

LANGUAGE: markdown
CODE:
![[[foo](uri1)](uri2)](uri3)

----------------------------------------

TITLE: Basic Curious Ternary Example in TypeScript
DESCRIPTION: Demonstrates the new 'curious' ternary formatting style where question marks appear at the end of lines and colons at the start of lines to improve readability of nested ternary expressions.

LANGUAGE: typescript
CODE:
const animalName =
  pet.canBark() ?
    pet.isScary() ?
      'wolf'
    : 'dog'
  : pet.canMeow() ? 'cat'
  : 'probably a bunny';

----------------------------------------

TITLE: Initializing Empty Prettier Configuration in JSON
DESCRIPTION: This snippet shows an empty array, which can be used as a minimal Prettier configuration file. It indicates that no custom formatting options are specified, allowing Prettier to use its default settings.

LANGUAGE: JSON
CODE:
[]

----------------------------------------

TITLE: Markdown Whitespace Handling - Chinese and Japanese
DESCRIPTION: Changes to handling whitespace between East Asian and Western characters in Markdown, removing automatic space insertion.

LANGUAGE: markdown
CODE:
<!-- Input -->
漢字
Alphabetsひらがな12345カタカナ67890

漢字 Alphabets ひらがな 12345 カタカナ 67890

<!-- Prettier 2.8 -->
漢字 Alphabets ひらがな 12345 カタカナ 67890

漢字 Alphabets ひらがな 12345 カタカナ 67890

<!-- Prettier 3.0 -->
漢字Alphabetsひらがな12345カタカナ67890

漢字 Alphabets ひらがな 12345 カタカナ 67890

----------------------------------------

TITLE: Demonstrating Markdown Formatting in Prettier Configuration
DESCRIPTION: This snippet shows examples of markdown-style formatting with underscores and asterisks for emphasis.

LANGUAGE: markdown
CODE:
__123__
**456**

----------------------------------------

TITLE: Preserving line breaks in Markdown inline code
DESCRIPTION: Shows how line breaks are preserved in Markdown inline code blocks when using the --prose-wrap=preserve option.

LANGUAGE: markdown
CODE:
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod `tempor
incididunt` ut labore et dolore magna aliqua.

----------------------------------------

TITLE: Formatting Markdown Links and References
DESCRIPTION: This snippet shows a Markdown inline link with asterisks and a separate reference definition. The inline link has a potential formatting issue with unmatched asterisks.

LANGUAGE: markdown
CODE:
*[foo*][ref]

[ref]: /uri

----------------------------------------

TITLE: Angular waitForAsync Test Support
DESCRIPTION: Added support for recognizing waitForAsync as a test statement in Angular code.

LANGUAGE: javascript
CODE:
test(\"foo bar\", waitForAsync(() => {
  const foo = \"bar\";
  expect(foo).toEqual(\"bar\");
}));

----------------------------------------

TITLE: Parsing HTML Entity References
DESCRIPTION: Shows a collection of HTML entity references including space, hex, numeric, and invalid entity formats. Demonstrates both valid and invalid syntax patterns.

LANGUAGE: html
CODE:
&nbsp &x; &#; &#x;
&ThisIsNotDefined; &hi?;

----------------------------------------

TITLE: HTML Single Attribute Per Line Option
DESCRIPTION: New singleAttributePerLine option for specifying if attributes should be printed on separate lines in HTML, Vue and JSX.

LANGUAGE: html
CODE:
<div data-a=\"1\">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</div>
<div
  data-a=\"1\"
  data-b=\"2\"
  data-c=\"3\"
>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</div>

----------------------------------------

TITLE: Rendering Empty JSX Fragment in React
DESCRIPTION: Demonstrates the shorthand empty fragment syntax (<></>) used in React to return multiple elements without adding extra nodes to the DOM.

LANGUAGE: jsx
CODE:
<>

----------------------------------------

TITLE: Adding espree and meriyah JavaScript parsers
DESCRIPTION: Two new values for the 'parser' option have been added: 'espree' (default parser for ESLint) and 'meriyah' (a fast JavaScript parser).

LANGUAGE: javascript
CODE:
// Using espree parser
prettier.format(code, { parser: 'espree' });

// Using meriyah parser
prettier.format(code, { parser: 'meriyah' });

----------------------------------------

TITLE: Formatting Block Quotes in Markdown
DESCRIPTION: Shows the markdown syntax for creating a block quote with multiple lines, including an empty line between quoted content.

LANGUAGE: markdown
CODE:
> bar
>
baz

----------------------------------------

TITLE: Formatting JSON Script Types in HTML
DESCRIPTION: Demonstrates how Prettier 1.19 handles JSON script types in HTML.

LANGUAGE: html
CODE:
<script type="application/json">
  { "json": true }
</script>
<script type="importmap">
  { "json": true }
</script>
<script type="systemjs-importmap">
  { "json": true }
</script>

----------------------------------------

TITLE: Formatting Markdown Link with Spaces
DESCRIPTION: Shows a Markdown link structure with extra spacing around the URI and title components. The link includes the link text, URI path, and optional title attribute.

LANGUAGE: markdown
CODE:
[link](   /uri
  "title"  )

----------------------------------------

TITLE: Markdown Backtick Handling
DESCRIPTION: Improved handling of backticks in inline code blocks according to CommonMark spec requirements.

LANGUAGE: markdown
CODE:
``` 3 ``22`` `1` ```

`` 2 ```123``` `1` ``

----------------------------------------

TITLE: Formatting Text with Indentation
DESCRIPTION: Demonstrates the use of indentation to create code blocks interspersed with regular paragraphs.

LANGUAGE: text
CODE:
indented code

LANGUAGE: text
CODE:
more code

----------------------------------------

TITLE: Flow Type Context Example
DESCRIPTION: Demonstrates how the new babel-flow parser correctly handles ambiguous Flow syntax.

LANGUAGE: javascript
CODE:
const Theme = React.createContext<"light" | "dark">("light");

----------------------------------------

TITLE: Markdown List Syntax
DESCRIPTION: Demonstrates different methods of creating unordered lists using -, +, and * symbols

LANGUAGE: markdown
CODE:
- Red
- Green
- Blue

+ Red
+ Green
+ Blue

* Red
* Green
* Blue

----------------------------------------

TITLE: Initializing Prettier in Browser
DESCRIPTION: Example showing how to load and use Prettier in the browser with standalone bundle and parser plugins.

LANGUAGE: HTML
CODE:
<script src="https://unpkg.com/prettier@1.13.0/standalone.js"></script>
<script src="https://unpkg.com/prettier@1.13.0/parser-babylon.js"></script>
<script src="https://unpkg.com/prettier@1.13.0/parser-graphql.js"></script>
<script type="text/javascript">
var formatButton = document.querySelector("#format");
var textInput = document.querySelector("#input");
formatButton.addEventListener("click", function() {
  var value = textInput.value;
  textInput.value = prettier.format(value, {
    parser: "babylon",
    plugins: prettierPlugins
  });
});</script>

----------------------------------------

TITLE: Escaping Markdown Emphasis Syntax
DESCRIPTION: Shows how to escape markdown emphasis syntax with backslashes to display literal asterisks.

LANGUAGE: markdown
CODE:
\*emphasis*

----------------------------------------

TITLE: Formatting Unicode Range in CSS
DESCRIPTION: Correctly formats unicode-range rules in CSS without adding unnecessary spaces.

LANGUAGE: css
CODE:
@font-face {
  unicode-range: U+00-FF;
}

----------------------------------------

TITLE: Complex Email Pattern with Special Characters
DESCRIPTION: Demonstrates an email address format that includes a plus sign, mixed case letters, numbers, hyphen, and multiple domain segments. Shows how special characters can be used in email addresses within angle brackets.

LANGUAGE: plaintext
CODE:
<foo+special@Bar.baz-bar0.com>

----------------------------------------

TITLE: Formatting Template Literal Expressions in JavaScript
DESCRIPTION: Shows how Prettier handles line breaks in template literal expressions to improve readability.

LANGUAGE: javascript
CODE:
const description = `The value of the ${cssName} css of the ${
  this._name
} element`;

const foo = `mdl-textfield mdl-js-textfield ${className} ${
  content.length > 0 ? 'is-dirty' : ''
} combo-box__input`

----------------------------------------

TITLE: Markdown Footnotes with Long Content
DESCRIPTION: Example of markdown footnotes using lengthy paragraph content showing proper indentation and structure.

LANGUAGE: markdown
CODE:
[^hello]: this is a long long long long long long long long long long long long long paragraph.
[^world]: this is a long long long long long long long long long long long long long paragraph.
          this is a long long long long long long long long long long long long long paragraph.

----------------------------------------

TITLE: Configuring Prettier with .prettierrc
DESCRIPTION: Basic configuration file for Prettier settings using .prettierrc in JSON format

LANGUAGE: json
CODE:
{
  "trailingComma": "es5",
  "singleQuote": true
}

----------------------------------------

TITLE: Displaying Incorrectly Formatted JSON Object
DESCRIPTION: This snippet shows a JSON object that is not properly formatted. The closing brace is on a new line, which can cause parsing issues. This example illustrates why reformatting might be necessary for correct JSON parsing.

LANGUAGE: json
CODE:
{
    "a": 1 }

----------------------------------------

TITLE: Consistent Breaking Rules for Assignments and Object Values in JavaScript
DESCRIPTION: Shows how the same line breaking rules are now applied to both assignments and object property values.

LANGUAGE: javascript
CODE:
const o = {
  somethingThatsAReallyLongPropName:
    this.props.cardType === AwesomizerCardEnum.SEEFIRST,
};

----------------------------------------

TITLE: Markdown Link Format
DESCRIPTION: Example of basic Markdown link syntax with title and URL

LANGUAGE: markdown
CODE:
[title](link)

----------------------------------------

TITLE: Improved Template Literal Formatting in JavaScript
DESCRIPTION: Demonstrates better handling of indentation and line breaks in template literals with embedded expressions.

LANGUAGE: javascript
CODE:
const Bar = styled.div`
  color: ${props =>
    props.highlight.length > 0
      ? palette(["text", "dark", "tertiary"])(props)
      : palette(["text", "dark", "primary"])(props)} !important;
`

----------------------------------------

TITLE: Unordered List Variable Declaration 1
DESCRIPTION: JavaScript variable declarations with Prettier formatting in an unordered list context.

LANGUAGE: javascript
CODE:
const a = 1;


const b = 2;

----------------------------------------

TITLE: Template Literal Indentation Fix
DESCRIPTION: Improves indentation of code inside template literal expressions to align with the ${ rather than the backtick

LANGUAGE: javascript
CODE:
Relay.createContainer({\n  nodes: ({ solution_type, time_frame }) => Relay.QL`\n    fragment {\n      __typename\n      ${OptimalSolutionsSection.getFragment("node", {\n        solution_type,\n        time_frame\n      })}\n    }\n  `\n})

----------------------------------------

TITLE: Handling Duplicate Link Reference Definitions in Markdown
DESCRIPTION: This snippet shows a Markdown link reference '[foo]' with two conflicting definitions. It demonstrates how Prettier might handle or format cases where multiple definitions exist for the same reference.

LANGUAGE: markdown
CODE:
[foo]

[foo]: first
[foo]: second

----------------------------------------

TITLE: Handling comments before commas in object literals
DESCRIPTION: Shows how Prettier handles comments before commas in object literals.

LANGUAGE: javascript
CODE:
// Before
const foo = {
  a: 'a' /* comment for this line */,

  /* Section B */
  b: 'b',
};

// After
const foo = {
  a: 'a' /* comment for this line */,
  /* Section B */
  b: 'b',
};


----------------------------------------

TITLE: Basic Text Block
DESCRIPTION: Simple code block containing plain text content without specific language formatting

LANGUAGE: plaintext
CODE:
bar

----------------------------------------

TITLE: Formatting nested function calls in JavaScript
DESCRIPTION: Shows how Prettier adds necessary parentheses for nested function calls inside new expressions.

LANGUAGE: javascript
CODE:
// Before
new factory()();

// After
new (factory())();


----------------------------------------

TITLE: Defining and Using Link References in Markdown
DESCRIPTION: This snippet shows how to define an empty link reference and use it in a Markdown document. The first set of square brackets defines the reference, while the second set uses the reference in a link.

LANGUAGE: markdown
CODE:
[
 ]

[
 ]: /uri

----------------------------------------

TITLE: Control File Minification
DESCRIPTION: Override default minification settings for debugging purposes. Recommended to use with specific file flags.

LANGUAGE: sh
CODE:
yarn build --file=index.js --minify

LANGUAGE: sh
CODE:
yarn build --file=parser-babel.js --no-minify

----------------------------------------

TITLE: Applying Prettier Formatting to HTML and Text
DESCRIPTION: This snippet shows an HTML comment that triggers Prettier formatting and an unformatted text line that should be formatted by Prettier. The comment instructs Prettier to format the content that follows.

LANGUAGE: HTML
CODE:
<!-- @prettier -->

I     should      be      formatted       !!

----------------------------------------

TITLE: Formatting Angular Component with Embedded TypeScript in Prettier
DESCRIPTION: This snippet demonstrates the formatting of an Angular component with embedded TypeScript code using Prettier. It shows the input, the error in the stable version, and the correctly formatted output in the main branch.

LANGUAGE: markdown
CODE:
<!-- Input (--cursor-offset=1) -->
# Angular note

```typescript
  import {Component} from '@angular/core';
  
  @Component({
    selector: 'app-root',
    standalone: true,
    imports: [],
    template: `
      <h1>
      
      {{ title }}</h1>
    `,
    styleUrls: ['./app.component.css'],
  })
  export class AppComponent {
    title = 'default';
  }
```

<!-- Prettier stable -->
Error: There are too many 'cursor' in doc.

<!-- Prettier main -->
# Angular note

```typescript
import { Component } from "@angular/core";

@Component({
  selector: "app-root",
  standalone: true,
  imports: [],
  template: `
    <h1>
      {{ title }}
    </h1>
  `,
  styleUrls: ["./app.component.css"],
})
export class AppComponent {
  title = "default";
}
```

----------------------------------------

TITLE: Importing and Exporting React Components
DESCRIPTION: This snippet demonstrates importing components from a local file and exporting a constant object and a default React component.

LANGUAGE: javascript
CODE:
import     {     Baz } from     './Fixture'
import { Buz  }   from './Fixture'

export  const   foo    = {
  hi:     `Fudge ${Baz.displayName || 'Baz'}`,
  authors: [
     'fred',
           'sally'
    ]
}

export   default     ({children   }) => < div>{    children}</div>

----------------------------------------

TITLE: Configuring Prettier Overrides for .frag Files in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Prettier to treat specific .frag files as JavaScript using the overrides option in the configuration file. It sets the parser to 'babel' for all files matching the '**/*.frag' pattern.

LANGUAGE: javascript
CODE:
export default {
  overrides: {
    files: "**/*.frag",
    options: {
      parser: "babel",
    },
  },
};

----------------------------------------

TITLE: Testing Underscore Formatting in Prettier
DESCRIPTION: This snippet demonstrates a specific case for Prettier formatting, focusing on the handling of underscore characters. It may be used to test how Prettier processes and formats underscores in different contexts.

LANGUAGE: plaintext
CODE:
foo _\__

----------------------------------------

TITLE: Fix Flow Conditionals in TypeScript
DESCRIPTION: Fix missing parentheses in ConditionalTypeAnnotation for Flow types in TypeScript code

LANGUAGE: jsx
CODE:
// Input
type T<U> = 'a' | ('b' extends U ? 'c' : empty);
type T<U> = 'a' & ('b' extends U ? 'c' : empty);

// Prettier 3.5.2
type T<U> = "a" | "b" extends U ? "c" : empty;
type T<U> = "a" & "b" extends U ? "c" : empty;

// Prettier 3.5.3
type T<U> = "a" | ("b" extends U ? "c" : empty);
type T<U> = "a" & ("b" extends U ? "c" : empty);