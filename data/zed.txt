TITLE: Configuring Zed Settings in JSON
DESCRIPTION: An example configuration file for Zed editor, demonstrating various settings including theme, tab size, font options, autosave, vim mode, and language-specific configurations.

LANGUAGE: json
CODE:
{
  "theme": "cave-light",
  "tab_size": 2,
  "preferred_line_length": 80,
  "soft_wrap": "none",

  "buffer_font_size": 18,
  "buffer_font_family": "Zed Plex Mono",

  "autosave": "on_focus_change",
  "format_on_save": "off",
  "vim_mode": false,
  "projects_online_by_default": true,
  "terminal": {
    "font_family": "FiraCode Nerd Font Mono",
    "blinking": "off"
  },
  "languages": {
    "C": {
      "format_on_save": "language_server",
      "preferred_line_length": 64,
      "soft_wrap": "preferred_line_length"
    }
  }
}

----------------------------------------

TITLE: Configuring Language-Specific Settings in Zed
DESCRIPTION: Example of language-specific settings in settings.json for Python and JavaScript, including tab size and formatter configuration.

LANGUAGE: json
CODE:
"languages": {
  "Python": {
    "tab_size": 4,
    "formatter": "language_server",
    "format_on_save": "on"
  },
  "JavaScript": {
    "tab_size": 2,
    "formatter": {
      "external": {
        "command": "prettier",
        "arguments": ["--stdin-filepath", "{buffer_path}"]
      }
    }
  }
}

----------------------------------------

TITLE: Language Server Configuration in Zed
DESCRIPTION: Example of configuring language server preferences and priorities for PHP.

LANGUAGE: json
CODE:
"languages": {
  "PHP": {
    "language_servers": ["intelephense", "!phpactor", "..."]
  }
}

----------------------------------------

TITLE: Configuring Extension Metadata in TOML
DESCRIPTION: This snippet shows how to configure the basic information for a Zed extension in the extension.toml file. It includes fields for id, name, version, schema version, authors, description, and repository.

LANGUAGE: toml
CODE:
id = "my-extension"
name = "My extension"
version = "0.0.1"
schema_version = 1
authors = ["Your Name <you@example.com>"]
description = "My cool extension"
repository = "https://github.com/your-name/my-zed-extension"

----------------------------------------

TITLE: Installing Zed on Linux using curl
DESCRIPTION: This snippet shows how to install Zed using a curl command that downloads and executes an installation script. It includes options for both stable and preview versions.

LANGUAGE: sh
CODE:
curl -f https://zed.dev/install.sh | sh

LANGUAGE: sh
CODE:
curl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh

----------------------------------------

TITLE: Attaching Debuggers to Running Zed Instance
DESCRIPTION: Commands to attach rust-gdb or rust-lldb to a running Zed process using its process ID.

LANGUAGE: sh
CODE:
rust-gdb -p <pid>
rust-lldb -p <pid>

----------------------------------------

TITLE: Configuring Language Metadata in TOML
DESCRIPTION: Defines the structure of the config.toml file required for each supported language in Zed. This file specifies language metadata such as name, grammar, file associations, and comment syntax.

LANGUAGE: toml
CODE:
name = "My Language"
grammar = "my-language"
path_suffixes = ["myl"]
line_comments = ["# "]

----------------------------------------

TITLE: Zed Theme Configuration Schema Overview
DESCRIPTION: The core structure of a Zed theme configuration, showing the main components including theme family metadata, individual theme objects, and various styling properties organized by category.

LANGUAGE: json
CODE:
{
  "name": "ThemeFamilyName",
  "author": "AuthorName",
  "themes": [
    {
      "name": "ThemeName",
      "appearance": "light|dark",
      "style": {
        "background": "color",
        "foreground": "color",
        "accent": "color"
      },
      "syntax": {
        "keywords": "color",
        "strings": "color",
        "comments": "color"
      },
      "element": {
        "background": "color"
      },
      "border": {
        "normal": "color",
        "focused": "color",
        "selected": "color"
      },
      "text": {
        "normal": "color",
        "muted": "color",
        "accent": "color"
      },
      "editor": {
        "background": "color",
        "gutter": "color",
        "line_number": "color"
      }
    }
  ]
}

----------------------------------------

TITLE: Defining Extension Manifest in TOML for Zed
DESCRIPTION: This snippet demonstrates the structure of the 'extension.toml' file required at the root of a Zed extension directory. It includes essential metadata such as id, name, description, version, and author information.

LANGUAGE: toml
CODE:
id = "my-extension"
name = "My Extension"
description = "..."
version = "0.0.1"
schema_version = 1
authors = ["Your Name <you@example.com>"]
repository = "https://github.com/your/extension-repository"

----------------------------------------

TITLE: Starting LM Studio Server via CLI
DESCRIPTION: Shell command for starting the LM Studio server.

LANGUAGE: sh
CODE:
lms server start

----------------------------------------

TITLE: Basic Custom Keybindings in JSON
DESCRIPTION: Example of basic key bindings configuration showing context-aware and global shortcuts for the Zed editor.

LANGUAGE: json
CODE:
[
  {
    "bindings": {
      "ctrl-right": "editor::SelectLargerSyntaxNode",
      "ctrl-left": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "o": "project_panel::Open"
    }
  }
]

----------------------------------------

TITLE: Defining Icon Theme Configuration in JSON for Zed
DESCRIPTION: This snippet demonstrates the structure of an icon theme configuration file for Zed. It includes theme metadata, directory icons, chevron icons, file associations, and icon definitions. The configuration adheres to the specified JSON schema.

LANGUAGE: json
CODE:
{
  "$schema": "https://zed.dev/schema/icon_themes/v0.2.0.json",
  "name": "My Icon Theme",
  "author": "Your Name",
  "themes": [
    {
      "name": "My Icon Theme",
      "appearance": "dark",
      "directory_icons": {
        "collapsed": "./icons/folder.svg",
        "expanded": "./icons/folder-open.svg"
      },
      "chevron_icons": {
        "collapsed": "./icons/chevron-right.svg",
        "expanded": "./icons/chevron-down.svg"
      },
      "file_stems": {
        "Makefile": "make"
      },
      "file_suffixes": {
        "mp3": "audio",
        "rs": "rust"
      },
      "file_icons": {
        "audio": { "path": "./icons/audio.svg" },
        "default": { "path": "./icons/file.svg" },
        "make": { "path": "./icons/make.svg" },
        "rust": { "path": "./icons/rust.svg" }
        // ...
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring ESLint Fix with Specific Rule on Format for JavaScript in Zed
DESCRIPTION: This snippet shows how to configure Zed to apply ESLint fixes for a specific rule (import/order) when formatting JavaScript code. It combines language-specific and LSP-specific settings.

LANGUAGE: json
CODE:
{
  "languages": {
    "JavaScript": {
      "code_actions_on_format": {
        "source.fixAll.eslint": true
      }
    }
  },
  "lsp": {
    "eslint": {
      "settings": {
        "codeActionOnSave": {
          "rules": ["import/order"]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Optimizing Rust-Analyzer Performance for Large Projects in Zed
DESCRIPTION: This JSON snippet demonstrates how to configure rust-analyzer for better performance in large projects. It includes settings to disable check on save, limit target checking, and enable experimental diagnostics.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "diagnostics": {
          "experimental": {
            "enable": true
          }
        },
        "checkOnSave": false,
        "cargo": {
          "allTargets": false
        },
        "check": {
          "workspace": false
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Assistant Default Settings
DESCRIPTION: JSON configuration for basic assistant settings including default model, panel width, and dock position.

LANGUAGE: json
CODE:
{
  "assistant": {
    "enabled": true,
    "default_model": {
      "provider": "zed.dev",
      "model": "claude-3-5-sonnet"
    },
    "version": "2",
    "button": true,
    "default_width": 480,
    "dock": "right"
  }
}

----------------------------------------

TITLE: Configuring SSH Connections in Zed Settings
DESCRIPTION: This JSON snippet demonstrates how to configure SSH connections in the Zed settings file. It includes basic connection details like host and project paths.

LANGUAGE: json
CODE:
{
  "ssh_connections": [
    {
      "host": "192.168.1.10",
      "projects": [{ "paths": ["~/code/zed/zed"] }]
    }
  ]
}

----------------------------------------

TITLE: Binding Runnable Tags to Zed Task Templates
DESCRIPTION: This snippet shows how to bind runnable tags to task templates in Zed, allowing for custom task execution based on language-specific indicators.

LANGUAGE: json
CODE:
{
  "label": "echo current file's path",
  "command": "echo $ZED_FILE",
  "tags": ["rust-test"]
}

----------------------------------------

TITLE: Detecting Runnable Code in Tree-sitter
DESCRIPTION: Demonstrates how to define rules for detecting runnable code using Tree-sitter queries in the runnables.scm file. This example detects runnable scripts in package.json and composer.json files.

LANGUAGE: scheme
CODE:
(
    (document
        (object
            (pair
                key: (string
                    (string_content) @_name
                    (#eq? @_name "scripts")
                )
                value: (object
                    (pair
                        key: (string (string_content) @run @script)
                    )
                )
            )
        )
    )
    (#set! tag package-script)
    (#set! tag composer-script)
)

----------------------------------------

TITLE: Customizing Vim Mode Key Bindings in Zed
DESCRIPTION: JSON template for customizing vim mode key bindings in different contexts within Zed.

LANGUAGE: json
CODE:
[
  {
    "context": "VimControl && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in normal & visual mode.
    }
  },
  {
    "context": "vim_mode == normal && !menu",
    "bindings": {
      // "shift-y": ["workspace::SendKeystrokes", "y $"] // Use neovim's yank behavior: yank to end of line.
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      // "j k": "vim::NormalBefore" // In insert mode, make jk escape to normal mode.
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Put key bindings here (in addition to the context above) if you want them to
      // work when no editor exists.
      // "space f": "file_finder::Toggle"
    }
  }
]

----------------------------------------

TITLE: Configuring Keymaps for GPUI Actions in JSON
DESCRIPTION: Shows how to configure keymaps in JSON to bind keys to actions in GPUI. It covers both simple action bindings and more complex ones with parameters.

LANGUAGE: json
CODE:
{
  "context": "menu",
  "bindings": {
    "up": "menu::MoveUp",
    "down": "menu::MoveDown"
  }
}

LANGUAGE: json
CODE:
{
  "context": "menu",
  "bindings": {
    "up": ["menu::Move", {"direction": "up", "select": false}],
    "down": ["menu::Move", {"direction": "down", "select": false}],
    "shift-up": ["menu::Move", {"direction": "up", "select": true}],
    "shift-down": ["menu::Move", {"direction": "down", "select": true}]
  }
}

----------------------------------------

TITLE: Configuring Language Servers in Zed
DESCRIPTION: Configuration to switch from default vtsls to typescript-language-server for TypeScript, TSX, and JavaScript files.

LANGUAGE: json
CODE:
{
  "languages": {
    "TypeScript": {
      "language_servers": ["typescript-language-server", "!vtsls", "..."]
    },
    "TSX": {
      "language_servers": ["typescript-language-server", "!vtsls", "..."]
    },
    "JavaScript": {
      "language_servers": ["typescript-language-server", "!vtsls", "..."]
    }
  }
}

----------------------------------------

TITLE: Configuring Light and Dark Theme Settings in Zed
DESCRIPTION: Basic theme configuration showing how to set light and dark mode themes in Zed's settings.json. Supports system mode, light mode, and dark mode.

LANGUAGE: json
CODE:
{
  "theme": {
    "mode": "system",
    "light": "One Light",
    "dark": "One Dark"
  }
}

----------------------------------------

TITLE: Defining Syntax Highlighting Rules in Tree-sitter
DESCRIPTION: Demonstrates how to create syntax highlighting rules using Tree-sitter queries in the highlights.scm file. This example shows rules for highlighting strings, object keys, and numbers in JSON.

LANGUAGE: scheme
CODE:
(string) @string

(pair
  key: (string) @property.json_key)

(number) @number

----------------------------------------

TITLE: Configuring Prettier as External Formatter for JavaScript in Zed
DESCRIPTION: This snippet demonstrates how to configure Prettier as an external code formatter for JavaScript files in Zed's settings.json. It specifies the command and arguments needed to use Prettier for formatting.

LANGUAGE: json
CODE:
{
  "languages": {
    "JavaScript": {
      "formatter": {
        "external": {
          "command": "prettier",
          "arguments": ["--stdin-filepath", "{buffer_path}"]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Language-specific Format Settings
DESCRIPTION: JSON configuration for C language-specific settings including format on save and tab size preferences.

LANGUAGE: json
CODE:
  "languages": {
    "C": {
      "format_on_save": "on",
      "tab_size": 2
    }
  }

----------------------------------------

TITLE: Defining a Task in JSON for Zed
DESCRIPTION: This snippet demonstrates how to define a task in JSON format for Zed, including various configuration options such as command, environment variables, shell settings, and output behavior.

LANGUAGE: json
CODE:
[
  {
    "label": "Example task",
    "command": "for i in {1..5}; do echo \"Hello $i/5\"; sleep 1; done",
    //"args": [],
    // Env overrides for the command, will be appended to the terminal's environment from the settings.
    "env": { "foo": "bar" },
    // Current working directory to spawn the command into, defaults to current project root.
    //"cwd": "/path/to/working/directory",
    // Whether to use a new terminal tab or reuse the existing one to spawn the process, defaults to `false`.
    "use_new_terminal": false,
    // Whether to allow multiple instances of the same task to be run, or rather wait for the existing ones to finish, defaults to `false`.
    "allow_concurrent_runs": false,
    // What to do with the terminal pane and tab, after the command was started:
    // * `always` — always show the task's pane, and focus the corresponding tab in it (default)
    // * `no_focus` — always show the task's pane, add the task's tab in it, but don't focus it
    // * `never` — do not alter focus, but still add/reuse the task's tab in its pane
    "reveal": "always",
    // What to do with the terminal pane and tab, after the command has finished:
    // * `never` — Do nothing when the command finishes (default)
    // * `always` — always hide the terminal tab, hide the pane also if it was the last tab in it
    // * `on_success` — hide the terminal tab on task success only, otherwise behaves similar to `always`
    "hide": "never",
    // Which shell to use when running a task inside the terminal.
    // May take 3 values:
    // 1. (default) Use the system's default terminal configuration in /etc/passwd
    //      "shell": "system"
    // 2. A program:
    //      "shell": {
    //        "program": "sh"
    //      }
    // 3. A program with arguments:
    //     "shell": {
    //         "with_arguments": {
    //           "program": "/bin/bash",
    //           "args": ["--login"]
    //         }
    //     }
    "shell": "system",
    // Whether to show the task line in the output of the spawned task, defaults to `true`.
    "show_summary": true,
    // Whether to show the command line in the output of the spawned task, defaults to `true`.
    "show_output": true
  }
]

----------------------------------------

TITLE: TypeScript Language Server Configuration
DESCRIPTION: Example of nested object configuration for TypeScript language server settings.

LANGUAGE: json
CODE:
"lsp": {
  "typescript-language-server": {
    "initialization_options": {
      "preferences": {
        "strictNullChecks": true,
        "target": "ES2020"
      }
    }
  }
}

----------------------------------------

TITLE: Structuring Default Prompt in Zed
DESCRIPTION: Shows the structure of a default prompt in Zed, demonstrating how multiple prompts can be combined.

LANGUAGE: plaintext
CODE:
[-] Default
  [+] Today's date
  [+] You are an expert
  [+] Don't add comments

----------------------------------------

TITLE: Configuring Port Forwarding in Zed
DESCRIPTION: This JSON snippet shows how to configure port forwarding in Zed's SSH connections, allowing local access to remote ports.

LANGUAGE: json
CODE:
{
  "ssh_connections": [
    {
      "host": "192.168.1.10",
      "port_forwards": [{ "local_port": 8080, "remote_port": 80 }]
    }
  ]
}

----------------------------------------

TITLE: Syntax Highlighting Theme Overrides
DESCRIPTION: Configuration for customizing syntax highlighting appearance with theme overrides.

LANGUAGE: json
CODE:
"experimental.theme_overrides": {
  "syntax": {
    "comment": {
      "font_style": "italic"
    },
    "string": {
      "color": "#00AA00"
    }
  }
}

----------------------------------------

TITLE: Custom File Type Associations in Zed
DESCRIPTION: Configuration for custom file type associations, mapping file extensions to specific language types.

LANGUAGE: json
CODE:
"file_types": {
  "C++": ["c"],
  "TOML": ["MyLockFile"],
  "Dockerfile": ["Dockerfile*"]
}

----------------------------------------

TITLE: Using Variables in Zed Tasks
DESCRIPTION: This snippet shows how to use Zed-specific variables in task definitions, allowing tasks to access information about the current editor state.

LANGUAGE: json
CODE:
{
  "label": "echo current file's path",
  "command": "echo $ZED_FILE"
}

----------------------------------------

TITLE: Defining Actions in Rust for GPUI
DESCRIPTION: Demonstrates how to define actions in GPUI using the #[gpui::action] attribute or the actions! macro. Actions can be simple unit structs or more complex types with parameters.

LANGUAGE: rust
CODE:
mod menu {
    #[gpui::action]
    struct MoveUp;

    #[gpui::action]
    struct MoveDown;
}

LANGUAGE: rust
CODE:
mod menu {
    actions!(gpui, [MoveUp, MoveDown]);
}

LANGUAGE: rust
CODE:
mod menu {
    #[gpui::action]
    struct Move {
        direction: Direction,
        select: bool,
    }
}

----------------------------------------

TITLE: Configuring JSON Snippets in Zed
DESCRIPTION: Example configuration for creating a snippet in Zed. This snippet defines a 'Log to console' action with a prefix, body, and description. It demonstrates the use of placeholders and tab stops.

LANGUAGE: json
CODE:
{
  // Each snippet must have a name and body, but the prefix and description are optional.
  // The prefix is used to trigger the snippet, but when omitted then the name is used.
  // Use placeholders like $1, $2 or ${1:defaultValue} to define tab stops.
  // The $0 determines the final cursor position.
  // Placeholders with the same value are linked.
  "Log to console": {
    "prefix": "log",
    "body": ["console.info(\"Hello, ${1:World}!\")", "$0"],
    "description": "Logs to console"
  }
}

----------------------------------------

TITLE: Configuring Custom Clangd Binary Path in Zed
DESCRIPTION: This snippet shows how to configure a custom path for the clangd binary in Zed's settings.json file. It allows specifying the binary path and additional arguments.

LANGUAGE: json
CODE:
{
  "lsp": {
    "clangd": {
      "binary": {
        "path": "/path/to/clangd",
        "arguments": []
      }
    }
  }
}

----------------------------------------

TITLE: Terminal Input Handling Architecture
DESCRIPTION: Describes four distinct pathways for handling terminal input: terminal-specific characters, GPUI action handlers, IME text input, and paste operations. Input processing is unified through .try_keystroke() and .input() APIs.

LANGUAGE: text
CODE:
1. Terminal specific characters and bindings (ctrl-a -> ASCII 1)
2. GPUI Action handlers (global context key bindings)
3. IME text (View::replace_text_in_range)
4. Pasted text handling

----------------------------------------

TITLE: Generating Compile Commands in CMake
DESCRIPTION: This CMake snippet shows how to enable the generation of compile_commands.json in a CMakeLists.txt file, which is useful for Clangd to properly analyze the project.

LANGUAGE: cmake
CODE:
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

----------------------------------------

TITLE: Starting Zed Collaboration and LiveKit Servers
DESCRIPTION: This command uses Foreman to start both the Zed collaboration server and the LiveKit development server for local testing.

LANGUAGE: sh
CODE:
foreman start

----------------------------------------

TITLE: Key Sequence Binding Examples
DESCRIPTION: Examples of complex key sequence bindings including modifier keys and unicode characters.

LANGUAGE: json
CODE:
 "bindings": {
   "cmd-k cmd-s": "zed::OpenKeymap",
   "space e": "editor::Complete",
   "ç": "editor::Complete",
   "shift shift": "file_finder::Toggle"
 }

----------------------------------------

TITLE: Configuring PyRight LSP Settings in Zed
DESCRIPTION: Configuration example for PyRight language server settings in Zed, including strict type-checking, workspace diagnostics, and Python interpreter path specification.

LANGUAGE: json
CODE:
{
  "lsp": {
    "pyright": {
      "settings": {
        "python.analysis": {
          "diagnosticMode": "workspace",
          "typeCheckingMode": "strict"
        },
        "python": {
          "pythonPath": ".venv/bin/python"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring YAML Language Server Settings in Zed
DESCRIPTION: Example configuration for yaml-language-server settings in Zed's settings.json file. Shows how to enable key ordering, configure single quotes, and specify schema mappings.

LANGUAGE: json
CODE:
  "lsp": {
    "yaml-language-server": {
      "settings": {
        "yaml": {
          "keyOrdering": true,
          "format": {
            "singleQuote": true
          },
          "schemas": {
              "http://json.schemastore.org/composer": ["/*"],
              "../relative/path/schema.json": ["/config*.yaml"]
          }
        }
      }
    }
  }

----------------------------------------

TITLE: Configuring Svelte Syntax Styling in JSON
DESCRIPTION: Custom theme configuration for Svelte directives and modifiers in attributes. Allows customizing colors for directive functions and special attribute modifiers.

LANGUAGE: json
CODE:
"syntax": {
  // Styling for directives (e.g., `class:foo` or `on:click`) (the `on` or `class` part of the attribute).
  "attribute.function": {
    "color": "#ff0000"
  },
  // Styling for modifiers at the end of attributes, e.g. `on:<click|preventDefault|stopPropagation>`
  "attribute.special": {
    "color": "#00ff00"
  }
}

----------------------------------------

TITLE: Customizing ESLint Rules Severity in Zed
DESCRIPTION: This snippet demonstrates how to customize ESLint rule severities in Zed. In this example, all ESLint errors and warnings are set to display as warnings, which can be useful for adjusting the visibility of ESLint messages.

LANGUAGE: json
CODE:
{
  "lsp": {
    "eslint": {
      "settings": {
        "rulesCustomizations": [
          { "rule": "*", "severity": "warn" }
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Setting ESLint as the Only Formatter for JavaScript in Zed
DESCRIPTION: This configuration sets ESLint as the sole formatter for JavaScript in Zed, using code actions. It will only apply ESLint fixes when formatting, without running any other formatters.

LANGUAGE: json
CODE:
{
  "languages": {
    "JavaScript": {
      "formatter": {
        "code_actions": {
          "source.fixAll.eslint": true
        }
      }
    }
  }
}

----------------------------------------

TITLE: Installing Ollama Model via Command Line
DESCRIPTION: Shell command for downloading and installing an Ollama model using the pull command.

LANGUAGE: sh
CODE:
ollama pull mistral

----------------------------------------

TITLE: Configuring Memory Limits for Large Projects
DESCRIPTION: Settings to increase memory limits for vtsls when working with large TypeScript/JavaScript projects.

LANGUAGE: json
CODE:
{
  "lsp": {
    "vtsls": {
      "settings": {
        "typescript": { "tsserver": { "maxTsServerMemory": 16184 } },
        "javascript": { "tsserver": { "maxTsServerMemory": 16184 } }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Clangd with a .clangd File
DESCRIPTION: This text configuration shows how to set up a .clangd file in the project root to add include directories and configure diagnostics for missing and unused includes.

LANGUAGE: text
CODE:
CompileFlags:
  Add:
    - "--include-directory=/path/to/include"
Diagnostics:
  MissingIncludes: Strict
  UnusedIncludes: Strict

----------------------------------------

TITLE: Configuring LuaLS Settings in luarc.json
DESCRIPTION: Configuration file for LuaLS (Lua Language Server) that specifies runtime version, diagnostics settings, and formatting preferences. Includes workspace library path configuration.

LANGUAGE: json
CODE:
{
  "$schema": "https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json",
  "runtime.version": "Lua 5.4",
  "diagnostics.severity": {
    "duplicate-set-field": "Hint"
  },
  "format.enable": true,
  "format.defaultConfig": {
    "indent_style": "space",
    "indent_size": "4"
  },
  "workspace.library": ["../somedir/library"]
}

----------------------------------------

TITLE: Database Naming Convention
DESCRIPTION: Naming pattern for Zed's SQLite databases based on the release channel.

LANGUAGE: plaintext
CODE:
0-stable
0-preview

----------------------------------------

TITLE: Configuring Java with Eclipse JDTLS Extension Settings in JSON
DESCRIPTION: JSON configuration for the Java with Eclipse JDTLS extension, enabling customization of settings and initialization options.

LANGUAGE: json
CODE:
{
  "lsp": {
    "java": {
      "settings": {},
      "initialization_options": {}
    }
  }
}

----------------------------------------

TITLE: Configuring Python Path in Zed Settings
DESCRIPTION: Configuration for specifying Python interpreter path in Zed's settings.json file.

LANGUAGE: json
CODE:
{
  "lsp": {
    "pyright": {
      "settings": {
        "python": {
          "pythonPath": ".venv/bin/python"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Windows Collaboration Server Commands
DESCRIPTION: PowerShell commands to start collaboration and LiveKit servers on Windows

LANGUAGE: powershell
CODE:
cargo run --package=collab -- serve all

livekit-server --dev

.\path\to\livekit-serve.exe --dev

node .\script\zed-local -2

----------------------------------------

TITLE: Configuring Language Server in TOML
DESCRIPTION: Shows how to configure a language server in the extension.toml file. This specifies the name of the language server and the languages it applies to.

LANGUAGE: toml
CODE:
[language_servers.my-language]
name = "My Language LSP"
languages = ["My Language"]

----------------------------------------

TITLE: Comprehensive Zed Java Initialization Options Configuration in JSON
DESCRIPTION: Detailed JSON configuration example for Zed Java, showcasing various initialization options for the language server, including workspace settings, import configurations, and code lens preferences.

LANGUAGE: json
CODE:
{
  "lsp": {
    "jdtls": {
      "initialization_options": {
        "bundles": [],
        "workspaceFolders": ["file:///home/snjeza/Project"],
        "settings": {
          "java": {
            "home": "/usr/local/jdk-9.0.1",
            "errors": {
              "incompleteClasspath": {
                "severity": "warning"
              }
            },
            "configuration": {
              "updateBuildConfiguration": "interactive",
              "maven": {
                "userSettings": null
              }
            },
            "trace": {
              "server": "verbose"
            },
            "import": {
              "gradle": {
                "enabled": true
              },
              "maven": {
                "enabled": true
              },
              "exclusions": [
                "**/node_modules/**",
                "**/.metadata/**",
                "**/archetype-resources/**",
                "**/META-INF/maven/**",
                "/**/test/**"
              ]
            },
            "jdt": {
              "ls": {
                "lombokSupport": {
                  "enabled": false
                }
              }
            },
            "referencesCodeLens": {
              "enabled": false
            },
            "signatureHelp": {
              "enabled": false
            },
            "implementationsCodeLens": {
              "enabled": false
            },
            "format": {
              "enabled": true
            },
            "saveActions": {
              "organizeImports": false
            },
            "contentProvider": {
              "preferred": null
            },
            "autobuild": {
              "enabled": false
            },
            "completion": {
              "favoriteStaticMembers": [
                "org.junit.Assert.*",
                "org.junit.Assume.*",
                "org.junit.jupiter.api.Assertions.*",
                "org.junit.jupiter.api.Assumptions.*",
                "org.junit.jupiter.api.DynamicContainer.*",
                "org.junit.jupiter.api.DynamicTest.*"
              ],
              "importOrder": ["java", "javax", "com", "org"]
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Creating Key Contexts in GPUI Rust
DESCRIPTION: Demonstrates how to create a key context for a part of the element tree using the key_context method. This allows for targeting specific areas with keybindings.

LANGUAGE: rust
CODE:
impl Render for Menu {
    fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {
        div()
            .key_context("menu")
            .on_action(|this: &mut Menu, move: &MoveUp, window: &mut Window, cx: &mut Context<Menu>| {
                // ...
            })
            .on_action(|this, move: &MoveDown, cx| {
                // ...
            })
            .children(unimplemented!())
    }
}

----------------------------------------

TITLE: Specifying Custom Rust-Analyzer Binary Path in Zed
DESCRIPTION: This JSON configuration specifies a custom path and optional arguments for the rust-analyzer binary in Zed. The path must be absolute.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "binary": {
        "path": "/Users/example/bin/rust-analyzer",
        "args": []
      }
    }
  }
}

----------------------------------------

TITLE: Configuring LSP Settings for Ansible in Zed
DESCRIPTION: This JSON snippet shows the recommended LSP configuration for the Ansible extension in Zed. It includes settings for the Ansible path, execution environment, Python interpreter, and validation options. This configuration should be added to the 'lsp' section of the Zed settings file.

LANGUAGE: json
CODE:
"lsp": {
  "ansible-language-server": {
    "settings": {
      "ansible": {
        "path": "ansible"
      },
      "executionEnvironment": {
        "enabled": false
      },
      "python": {
        "interpreterPath": "python3"
      },
      "validation": {
        "enabled": true,
        "lint": {
          "enabled": true,
          "path": "ansible-lint"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Generating Yarn SDK Directory
DESCRIPTION: This command generates a .yarn/sdks directory using Yarn's dlx feature. It sets up the base SDK for improved package management and development workflow.

LANGUAGE: bash
CODE:
yarn dlx @yarnpkg/sdks base

----------------------------------------

TITLE: Querying and Updating Language Extension Versions in Zed
DESCRIPTION: Shell commands for managing extension versions. The first command displays the current version of a language extension, while the second updates version numbers in extension.toml and Cargo.toml files.

LANGUAGE: sh
CODE:
# Output the current version for a given language
./script/language-extension-version <langname>

# Update the version in `extension.toml` and `Cargo.toml` and trigger a `cargo check`
./script/language-extension-version <langname> <new_version>

----------------------------------------

TITLE: Configuring Kotlin Language Server Settings in Zed
DESCRIPTION: This JSON snippet demonstrates how to configure workspace options for the Kotlin language server in Zed's settings.json file. It shows how to change the JVM target from the default (1.8) to version 17.

LANGUAGE: json
CODE:
{
  "lsp": {
    "kotlin-language-server": {
      "settings": {
        "compiler": {
          "jvm": {
            "target": "17"
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring LSP Formatting for HTML in Zed Settings
DESCRIPTION: JSON configuration to use vscode-html-language-server instead of Prettier for HTML formatting in Zed. This snippet shows how to change the formatter setting for HTML.

LANGUAGE: json
CODE:
  "languages": {
    "HTML": {
      "formatter": "language_server",
    }
  }

----------------------------------------

TITLE: Running Collab Server Only
DESCRIPTION: Cargo command to run the collaboration server without LiveKit for basic testing

LANGUAGE: sh
CODE:
cargo run -p collab -- serve all

----------------------------------------

TITLE: Enabling Format on Save for C++ in Zed
DESCRIPTION: This JSON configuration snippet demonstrates how to enable format-on-save for C++ files in Zed and set the tab size to 2 spaces.

LANGUAGE: json
CODE:
  "languages": {
    "C++": {
      "format_on_save": "on",
      "tab_size": 2
    }
  }

----------------------------------------

TITLE: Configuring Haskell Language Server in Zed settings.json
DESCRIPTION: JSON configuration to set up Haskell Language Server options in Zed, specifically setting the formatting provider to 'fourmolu'.

LANGUAGE: json
CODE:
{
  "lsp": {
    "hls": {
      "initialization_options": {
        "haskell": {
          "formattingProvider": "fourmolu"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Adding GPUI Dependency in Cargo.toml
DESCRIPTION: Demonstrates how to add GPUI as a dependency in a Rust project's Cargo.toml file. This is necessary since GPUI is not yet available on crates.io and must be sourced directly from the Zed GitHub repository.

LANGUAGE: toml
CODE:
gpui = { git = "https://github.com/zed-industries/zed" }

----------------------------------------

TITLE: Configuring Vim Mode Settings in Zed
DESCRIPTION: Example JSON configuration for modifying vim mode behavior settings in Zed.

LANGUAGE: json
CODE:
{
  "vim": {
    "use_system_clipboard": "never",
    "use_multiline_find": true,
    "use_smartcase_find": true,
    "toggle_relative_line_numbers": true,
    "highlight_on_yank_duration": 50,
    "custom_digraphs": {
      "fz": "🧟‍♀️"
    }
  }
}

----------------------------------------

TITLE: Overriding Gopls Settings
DESCRIPTION: JSON configuration structure for overriding default gopls settings in Zed

LANGUAGE: json
CODE:
"lsp": {
    "gopls": {
        "initialization_options": {
            "hints": {
                ....
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Basic Biome Schema in JSON
DESCRIPTION: Demonstrates the minimal required configuration for Biome in a biome.json file that must be placed in the workspace root. This configuration establishes the schema version and enables Biome functionality.

LANGUAGE: json
CODE:
{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json"
}

----------------------------------------

TITLE: Configuring Database URL for Postgres Context Server
DESCRIPTION: Example configuration for setting up a Postgres context server with a database URL in settings.json.

LANGUAGE: json
CODE:
{
  "context_servers": {
    "postgres-context-server": {
      "settings": {
        "database_url": "postgresql://postgres@localhost/my_database"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Zed Java Extension Settings in JSON
DESCRIPTION: JSON configuration for the Zed Java extension, allowing customization of language server initialization options.

LANGUAGE: json
CODE:
{
  "lsp": {
    "jdtls": {
      "initialization_options": {}
    }
  }
}

----------------------------------------

TITLE: Configuring C++ Formatting in Clang-Format
DESCRIPTION: This YAML configuration example shows how to set up a .clang-format file for C++ code formatting, including style options for indentation and pointer alignment.

LANGUAGE: yaml
CODE:
---
BasedOnStyle: LLVM
IndentWidth: 4
---
Language: Cpp
# Force pointers to the type for C++.
DerivePointerAlignment: false
PointerAlignment: Left
---

----------------------------------------

TITLE: Testing Visual Star Command in Rust with NeovimBackedTestContext
DESCRIPTION: Demonstrates how to write a test that compares Zed's behavior with Neovim for the visual mode '*' command. The test sets up an initial state, simulates keystrokes, and verifies the resulting state matches Neovim's behavior.

LANGUAGE: rust
CODE:
#[gpui::test]
async fn test_visual_star_hash(cx: &mut gpui::TestAppContext) {
    let mut cx = NeovimBackedTestContext::new(cx).await;

    cx.set_shared_state("ˇa.c. abcd a.c. abcd").await;
    cx.simulate_shared_keystrokes(["v", "3", "l", "*"]).await;
    cx.assert_shared_state("a.c. abcd ˇa.c. abcd").await;
}

----------------------------------------

TITLE: Installing Scala Development Tools
DESCRIPTION: Commands for installing Scala, Coursier, and Almond REPL using Homebrew

LANGUAGE: shell
CODE:
brew install coursier/formulas/coursier && cs setup

LANGUAGE: shell
CODE:
brew install --cask temurin

LANGUAGE: shell
CODE:
coursier launch --use-bootstrap almond -- --install

----------------------------------------

TITLE: Enabling Lombok Support in Java with Eclipse JDTLS Configuration
DESCRIPTION: JSON configuration example for enabling Lombok support in the Java with Eclipse JDTLS extension for Zed.

LANGUAGE: json
CODE:
{
  "lsp": {
    "java": {
      "settings": {
        "java.jdt.ls.lombokSupport.enabled:": true
      }
    }
  }
}

----------------------------------------

TITLE: Configuring OmniSharp Binary Path in Zed
DESCRIPTION: JSON configuration for specifying the OmniSharp binary path and additional arguments in Zed settings. This allows custom binary location and argument passing for the C# language server.

LANGUAGE: json
CODE:
{
  "lsp": {
    "omnisharp": {
      "binary": {
        "path": "/path/to/OmniSharp",
        "arguments": ["optional", "additional", "args", "-lsp"]
      }
    }
  }
}

----------------------------------------

TITLE: Installing Language Server Gems
DESCRIPTION: Shell commands for installing Ruby language server gems

LANGUAGE: sh
CODE:
gem install solargraph
gem install ruby-lsp
gem install rubocop

----------------------------------------

TITLE: Customizing HTML Formatting Options in Zed Settings
DESCRIPTION: JSON configuration to customize HTML formatting options for vscode-html-language-server in Zed. This snippet demonstrates how to set various formatting preferences.

LANGUAGE: json
CODE:
  "lsp": {
    "vscode-html-language-server": {
      "settings": {
        "html": {
          "format": {
            // Indent under <html> and <head> (default: false)
            "indentInnerHtml": true,
            // Disable formatting inside <svg> or <script>
            "contentUnformatted": "svg,script",
            // Add an extra newline before <div> and <p>
            "extraLiners": "div,p"
          }
        }
      }
    }
  }

----------------------------------------

TITLE: Configuring Deno Language Server Settings in Zed
DESCRIPTION: Configuration settings to enable Deno language server for TypeScript and TSX files while disabling default language servers. This setup configures Deno as the primary language server and formatter for TypeScript and TSX files.

LANGUAGE: json
CODE:
{
  "lsp": {
    "deno": {
      "settings": {
        "deno": {
          "enable": true
        }
      }
    }
  },
  "languages": {
    "TypeScript": {
      "language_servers": [
        "deno",
        "!typescript-language-server",
        "!vtsls",
        "!eslint"
      ],
      "formatter": "language_server"
    },
    "TSX": {
      "language_servers": [
        "deno",
        "!typescript-language-server",
        "!vtsls",
        "!eslint"
      ],
      "formatter": "language_server"
    }
  }
}

----------------------------------------

TITLE: Configuring Edit Predictions Disabled Globs in Zed
DESCRIPTION: This JSON snippet shows the default configuration for disabling edit predictions on certain file types in Zed. It includes a list of glob patterns for files that should be excluded from edit predictions.

LANGUAGE: json
CODE:
{
  "edit_predictions": {
    // A list of globs representing files that edit predictions should be disabled for.
    // There's a sensible default list of globs already included.
    // Any addition to this list will be merged with the default list.
    "disabled_globs": [
      "**/.env*",
      "**/*.pem",
      "**/*.key",
      "**/*.cert",
      "**/*.crt",
      "**/secrets.yml"
    ]
  }
}

----------------------------------------

TITLE: Updating Zed Extensions Repository
DESCRIPTION: Shell commands for updating the extensions repository, including submodule initialization and synchronization with the main Zed repository.

LANGUAGE: sh
CODE:
# Go into your clone of the extensions repo
cd ../extensions

# Update
git checkout main
git pull
just init-submodule extensions/zed

# Update the Zed submodule
cd extensions/zed
git checkout main
git pull
cd -
git add extensions.toml extensions/zed

----------------------------------------

TITLE: Configuring Regal Language Server Rules in YAML
DESCRIPTION: Example configuration for the Regal language server showing how to customize rule behavior including disabling todo-comment checks, setting line length limits, and configuring opa-fmt rules with file exclusions

LANGUAGE: yaml
CODE:
rules:
  style:
    todo-comment:
      # don't report on todo comments
      level: ignore
    line-length:
      # custom rule configuration
      max-line-length: 100
      # warn on too long lines, but don't fail
      level: warning
    opa-fmt:
      # not needed as error is the default, but
      # being explicit won't hurt
      level: error
      # files can be ignored for any individual rule
      # in this example, test files are ignored
      ignore:
        files:
          - "*_test.rego"

----------------------------------------

TITLE: Configuring Elm Language Server Settings in Zed
DESCRIPTION: JSON configuration for elm-language-server in Zed's settings.json file. Includes initialization options for diagnostics handling and elm-review integration.

LANGUAGE: json
CODE:
{
  "lsp": {
    "elm-language-server": {
      "initialization_options": {
        "disableElmLSDiagnostics": true,
        "onlyUpdateDiagnosticsOnSave": false,
        "elmReviewDiagnostics": "warning"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Needle Search in Python
DESCRIPTION: A Python function that searches for a 'needle' (substring) within a 'haystack' (larger string). It returns True if the needle is found, False otherwise.

LANGUAGE: python
CODE:
def search_for_needle(haystack, needle):
    if needle in haystack:
        return True
    else:
        return False

----------------------------------------

TITLE: Zed Formatter Configuration for Proto
DESCRIPTION: JSON configuration for setting up Proto formatting in Zed's settings

LANGUAGE: json
CODE:
  "languages": {
    "Proto": {
      "format_on_save": "on",
      "tab_size": 4,
      "formatter": {
        "external": {
          "command": "clang-format",
          "arguments": ["-style={IndentWidth: 4, ColumnLimit: 0}"]
        }
      }
    },
  }

----------------------------------------

TITLE: Customizing Theme Attributes with Theme Overrides
DESCRIPTION: Example of using experimental.theme_overrides to customize editor background color and comment styling. Demonstrates syntax for overriding specific theme attributes.

LANGUAGE: json
CODE:
{
  "experimental.theme_overrides": {
    "editor.background": "#333",
    "syntax": {
      "comment": {
        "font_style": "italic"
      },
      "comment.doc": {
        "font_style": "italic"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Rust-Analyzer Binary Ignoring System Version in Zed
DESCRIPTION: This JSON snippet shows how to configure Zed to ignore the system version of rust-analyzer and use its own version instead.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "binary": {
        "ignore_system_version": true
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Terraform Language Server in Zed
DESCRIPTION: This JSON snippet demonstrates how to configure the Terraform language server in the Zed settings.json file. It shows an example of enabling an experimental feature for prefilling required fields.

LANGUAGE: json
CODE:
{
  "lsp": {
    "terraform-ls": {
      "initialization_options": {
        "experimentalFeatures": {
          "prefillRequiredFields": true
        }
      }
    }
  }
}

----------------------------------------

TITLE: LSP Configuration for Proto
DESCRIPTION: JSON configuration for setting up the Protocol Buffer language server in Zed

LANGUAGE: json
CODE:
"lsp": {
  "protobuf-language-server": {
    "binary": {
      "path": "protols"
    }
  }
}

----------------------------------------

TITLE: Configuring Gopls Inlay Hints
DESCRIPTION: Default initialization options for gopls inlay hints in Zed

LANGUAGE: json
CODE:
"hints": {
    "assignVariableTypes": true,
    "compositeLiteralFields": true,
    "compositeLiteralTypes": true,
    "constantValues": true,
    "functionTypeParameters": true,
    "parameterNames": true,
    "rangeVariableTypes": true
}

----------------------------------------

TITLE: Setting Keychain Access for Zed Development Build
DESCRIPTION: Environment variable configuration to enable system keychain usage in Zed development builds instead of the default alternative credential provider. This helps developers test keychain-related functionality.

LANGUAGE: bash
CODE:
ZED_DEVELOPMENT_USE_KEYCHAIN=1

----------------------------------------

TITLE: Disabling Auto-Install of HTML Extension in Zed Settings
DESCRIPTION: JSON configuration to disable automatic installation of the HTML extension in Zed. This snippet shows how to modify the auto_install_extensions setting.

LANGUAGE: json
CODE:
{
  "auto_install_extensions": {
    "html": false
  }
}

----------------------------------------

TITLE: Configuring Jsonnet Language Server Settings in Zed
DESCRIPTION: Example configuration for the Jsonnet language server in Zed's settings.json file. This snippet demonstrates how to enable Tanka import path resolution support through LSP settings.

LANGUAGE: json
CODE:
{
  "lsp": {
    "jsonnet-language-server": {
      "settings": {
        "resolve_paths_with_tanka": true
      }
    }
  }
}

----------------------------------------

TITLE: Checking Perplexity API Key Environment Variable
DESCRIPTION: Command to verify if the PERPLEXITY_API_KEY environment variable is properly set

LANGUAGE: sh
CODE:
env | grep PERPLEXITY_API_KEY

----------------------------------------

TITLE: Configuring Taplo TOML Language Server in TOML
DESCRIPTION: Example of a .taplo.toml configuration file for controlling the behavior of the Taplo TOML language server. It specifies files to include, and sets formatting options for aligning entries and reordering keys.

LANGUAGE: toml
CODE:
# .taplo.toml
include = ["Cargo.toml", "some_directory/**/*.toml"]
# exclude = ["Cargo.toml"]

[formatting]
align_entries = true
reorder_keys = true

----------------------------------------

TITLE: JSON Language Server Schema Configuration
DESCRIPTION: LSP settings configuration for json-language-server to associate JSON schemas with specific file patterns using fileMatch patterns.

LANGUAGE: json
CODE:
"lsp": {
  "json-language-server": {
    "settings": {
      "json": {
        "schemas": [
          {
            "fileMatch": ["*/*.luarc.json"],
            "url": "https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json"
          }
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Configuring ESLint's problems Setting in Zed
DESCRIPTION: This configuration shows how to adjust ESLint's 'problems' setting in Zed. Specifically, it enables the 'shortenToSingleLine' option, which affects how ESLint problems are displayed.

LANGUAGE: json
CODE:
{
  "lsp": {
    "eslint": {
      "settings": {
        "problems": {
          "shortenToSingleLine": true
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Svelte Inlay Hints in JSON
DESCRIPTION: Default initialization options for Svelte language server inlay hints, controlling the display of parameter names, types, and return types.

LANGUAGE: json
CODE:
"inlayHints": {
  "parameterNames": {
    "enabled": "all",
    "suppressWhenArgumentMatchesName": false
  },
  "parameterTypes": {
    "enabled": true
  },
  "variableTypes": {
    "enabled": true,
    "suppressWhenTypeMatchesName": false
  },
  "propertyDeclarationTypes": {
    "enabled": true
  },
  "functionLikeReturnTypes": {
    "enabled": true
  },
  "enumMemberValues": {
    "enabled": true
  }
}

----------------------------------------

TITLE: Enabling LuaLS Formatting in Zed Settings
DESCRIPTION: Zed editor settings to enable automatic formatting using the Lua Language Server on file save.

LANGUAGE: json
CODE:
{
  "languages": {
    "Lua": {
      "format_on_save": "on",
      "formatter": "language_server"
    }
  }
}

----------------------------------------

TITLE: Configuring ESLint's nodePath in Zed
DESCRIPTION: This snippet demonstrates how to set the 'nodePath' for ESLint in Zed's configuration. This can be useful when working with projects that use custom Node.js environments or package managers like Yarn.

LANGUAGE: json
CODE:
{
  "lsp": {
    "eslint": {
      "settings": {
        "nodePath": ".yarn/sdks"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring XML File Type Extensions in Zed Settings
DESCRIPTION: JSON configuration for adding custom file extensions to be recognized as XML files in Zed. This allows Zed to properly handle additional XML-based file formats like RDF, GPX, and KML.

LANGUAGE: json
CODE:
  "file_types": {
    "XML": ["rdf", "gpx", "kml"]
  }

----------------------------------------

TITLE: Terminal Key Forwarding Configuration
DESCRIPTION: Configuration for forwarding key combinations to the built-in terminal on Linux/Windows.

LANGUAGE: json
CODE:
{
  "context": "Terminal",
  "bindings": {
    "ctrl-n": ["terminal::SendKeystroke", "ctrl-n"]
  }
}

----------------------------------------

TITLE: Configuring StyLua Formatting in Zed Settings
DESCRIPTION: Zed editor settings for using StyLua as an external formatter, including command-line arguments and syntax specification.

LANGUAGE: json
CODE:
{
  "languages": {
    "Lua": {
      "format_on_save": "on",
      "formatter": {
        "external": {
          "command": "stylua",
          "arguments": [
            "--syntax=Lua54",
            "--respect-ignores",
            "--stdin-filepath",
            "{buffer_path}",
            "-"
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Setting ESLint's Working Directory in Zed
DESCRIPTION: This configuration sets the 'workingDirectory' mode for ESLint in Zed. Setting it to 'auto' allows ESLint to automatically determine the appropriate working directory for each file.

LANGUAGE: json
CODE:
{
  "lsp": {
    "eslint": {
      "settings": {
        "workingDirectory": {
          "mode": "auto"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Language-Specific Debug Configurations
DESCRIPTION: Collection of debug configurations for different programming languages including JavaScript, PHP, Python, GDB, and LLDB.

LANGUAGE: json
CODE:
{
  "label": "JavaScript: Debug Active File",
  "adapter": "javascript",
  "program": "$ZED_FILE",
  "request": "launch",
  "cwd": "$ZED_WORKTREE_ROOT"
}

LANGUAGE: json
CODE:
{
  "label": "PHP: Debug Active File",
  "adapter": "php",
  "program": "$ZED_FILE",
  "request": "launch",
  "cwd": "$ZED_WORKTREE_ROOT"
}

LANGUAGE: json
CODE:
{
  "label": "Python: Debug Active File",
  "adapter": "python",
  "program": "$ZED_FILE",
  "request": "launch",
  "cwd": "$ZED_WORKTREE_ROOT"
}

----------------------------------------

TITLE: Configuring Lexical Language Server for Elixir in Zed
DESCRIPTION: JSON configuration to switch from the default elixir-ls to lexical language server in Zed's settings.json file.

LANGUAGE: json
CODE:
{
  "languages": {
    "Elixir": {
      "language_servers": ["lexical", "!elixir-ls", "..."]
    }
  }
}

----------------------------------------

TITLE: StyLua Configuration in TOML
DESCRIPTION: Configuration file for StyLua formatter specifying syntax version, formatting rules, and code style preferences.

LANGUAGE: toml
CODE:
syntax = "Lua54"
column_width = 100
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 4
quote_style = "AutoPreferDouble"
call_parentheses = "Always"
collapse_simple_statement = "All"

[sort_requires]
enabled = true

----------------------------------------

TITLE: Installing Rust and Cloning Zed Repository
DESCRIPTION: Commands for installing the Rust toolchain and cloning the Zed repository for extension development

LANGUAGE: sh
CODE:
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

mkdir -p ~/code
cd ~/code
git clone https://github.com/zed-industries/zed

----------------------------------------

TITLE: Running Zed CLI in Development
DESCRIPTION: Command to run the CLI interface in development mode

LANGUAGE: sh
CODE:
cargo run -p cli

----------------------------------------

TITLE: Configuring Next-LS Language Server for Elixir in Zed
DESCRIPTION: JSON configuration to switch from the default elixir-ls to next-ls language server in Zed's settings.json file.

LANGUAGE: json
CODE:
{
  "languages": {
    "Elixir": {
      "language_servers": ["next-ls", "!elixir-ls", "..."]
    }
  }
}

----------------------------------------

TITLE: Disabling Trailing Whitespace Removal for Markdown in Zed
DESCRIPTION: JSON configuration to prevent Zed from removing trailing whitespace on save for Markdown files, preserving invisible trailing whitespace for HTML line breaks.

LANGUAGE: json
CODE:
  "languages": {
    "Markdown": {
      "remove_trailing_whitespace_on_save": false
    }
  },

----------------------------------------

TITLE: Tailwind CSS Integration Example
DESCRIPTION: Ruby and ERB examples showing Tailwind CSS class completions

LANGUAGE: ruby
CODE:
# Ruby file:
def method
  div(class: "pl-2 <completion here>") do
    p(class: "mt-2 <completion here>") { "Hello World" }
  end
end

# ERB file:
<%= link_to "Hello", "/hello", class: "pl-2 <completion here>" %>
<a href="/hello" class="pl-2 <completion here>">Hello</a>

----------------------------------------

TITLE: Disabling Dialyzer in Elixir-LS Workspace Configuration
DESCRIPTION: JSON configuration to disable Dialyzer in the Elixir-LS workspace settings for Zed.

LANGUAGE: json
CODE:
"lsp": {
  "elixir-ls": {
    "settings": {
      "dialyzerEnabled": false
    }
  }
}

----------------------------------------

TITLE: Configuring Nim Formatter in Zed Settings
DESCRIPTION: This JSON configuration snippet demonstrates how to set up the 'nph' formatter for Nim in Zed's settings.json file. It specifies the external command and arguments for formatting Nim code.

LANGUAGE: json
CODE:
  "languages": {
    "Nim": {
      "formatter": {
        "external": {
          "command": "nph",
          "arguments": ["-"]
        }
      }
    }
  }

----------------------------------------

TITLE: Configuring Edit Prediction Keybindings
DESCRIPTION: Example of customizing keybindings for edit predictions in Zed with alternate accept key.

LANGUAGE: json
CODE:
{
  "context": "Editor && edit_prediction",
  "bindings": {
    "alt-enter": "editor::AcceptEditPrediction"
  }
}

----------------------------------------

TITLE: Configuring Telemetry Settings in JSON for Zed
DESCRIPTION: This JSON snippet demonstrates how to disable diagnostics and metrics telemetry in Zed's settings.json file. Users can customize these settings to control what data is sent by the application.

LANGUAGE: json
CODE:
"telemetry": {
    "diagnostics": false,
    "metrics": false
},

----------------------------------------

TITLE: Configuring PyRight Virtual Environment in JSON
DESCRIPTION: PyRight configuration for virtual environment settings using pyrightconfig.json file.

LANGUAGE: json
CODE:
{
  "venvPath": ".",
  "venv": ".venv"
}

----------------------------------------

TITLE: Key Remapping with SendKeystrokes
DESCRIPTION: Examples of remapping keys using the workspace::SendKeystrokes action for complex key sequences.

LANGUAGE: json
CODE:
[
  {
    "bindings": {
      "alt-down": ["workspace::SendKeystrokes", "down down down down"],
      "cmd-alt-c": ["workspace::SendKeystrokes", "cmd-shift-p copy relative path enter"],
      "cmd-alt-r": ["workspace::SendKeystrokes", "cmd-p README enter"]
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j k": ["workspace::SendKeystrokes", "escape"]
    }
  }
]

----------------------------------------

TITLE: Adding Custom Disabled Globs for Edit Predictions in Zed
DESCRIPTION: This JSON snippet demonstrates how users can add custom glob patterns to disable edit predictions for specific directories or file types in their Zed settings.json file.

LANGUAGE: json
CODE:
{
  "edit_predictions": {
    "disabled_globs": ["secret_dir/*", "**/*.log"]
  }
}

----------------------------------------

TITLE: Configuring Dart Formatting Settings
DESCRIPTION: JSON configuration for customizing Dart formatting settings, specifically the maximum line length in the LSP.

LANGUAGE: json
CODE:
{
  "lsp": {
    "dart": {
      "settings": {
        "lineLength": 140
      }
    }
  }
}

----------------------------------------

TITLE: Configuring PyRight Virtual Environment in TOML
DESCRIPTION: PyRight configuration for virtual environment settings using pyproject.toml file.

LANGUAGE: toml
CODE:
[tool.pyright]
venvPath = "."
venv = ".venv"

----------------------------------------

TITLE: Styled and Interactive Element Implementation in Rust
DESCRIPTION: Implements styling and interaction traits for UI elements with support for custom styles and event handling. Includes background/foreground painting and click event management.

LANGUAGE: rust
CODE:
#[derive(Styled, Interactive)]
pub struct Div {
    declared_style: StyleRefinement,
    interactions: Interactions
}

pub trait Styled {
    fn declared_style(&mut self) -> &mut StyleRefinement;
    fn compute_style(&mut self) -> Style {
        Style::default().refine(self.declared_style())
    }

    // All the tailwind classes, modifying self.declared_style()
}

impl Style {
    pub fn paint_background<V>(layout: Layout, cx: &mut PaintContext<V>);
    pub fn paint_foreground<V>(layout: Layout, cx: &mut PaintContext<V>);
}

pub trait Interactive<V> {
    fn interactions(&mut self) -> &mut Interactions<V>;

    fn on_click(self, )
}

struct Interactions<V> {
    click: SmallVec<[<Rc<dyn Fn(&mut V, &dyn Any, )>; 1]>,
}

----------------------------------------

TITLE: Configuring Custom Dart Binary Path
DESCRIPTION: JSON configuration for specifying a custom Dart binary path or using Dart via FVM in Zed settings.

LANGUAGE: json
CODE:
{
  "lsp": {
    "dart": {
      "binary": {
        "path": "/opt/homebrew/bin/fvm",
        "arguments": ["dart", "language-server", "--protocol=lsp"]
      }
    }
  }
}

----------------------------------------

TITLE: Clang Format Configuration
DESCRIPTION: Example clang-format configuration for Proto files

LANGUAGE: clang-format
CODE:
IndentWidth: 4
ColumnLimit: 120

----------------------------------------

TITLE: Configuring Multi-Project Workspaces for Rust-Analyzer in Zed
DESCRIPTION: This JSON configuration shows how to set up rust-analyzer to analyze multiple Rust projects in the same folder that are not listed in the Cargo workspace.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "linkedProjects": ["./path/to/a/Cargo.toml", "./path/to/b/Cargo.toml"]
      }
    }
  }
}

----------------------------------------

TITLE: Disabling System OmniSharp Binary Detection
DESCRIPTION: JSON configuration to prevent Zed from automatically detecting and using system-installed OmniSharp binary by setting ignore_system_version flag.

LANGUAGE: json
CODE:
{
  "lsp": {
    "omnisharp": {
      "binary": {
        "ignore_system_version": true
      }
    }
  }
}

----------------------------------------

TITLE: Installing PHP on Different Operating Systems
DESCRIPTION: Commands for installing PHP on macOS, Debian/Ubuntu, CentOS/RHEL, and Arch Linux, followed by a command to verify the installation.

LANGUAGE: sh
CODE:
# brew install php            # macOS
# sudo apt-get install php    # Debian/Ubuntu
# yum install php             # CentOS/RHEL
# pacman -S php               # Arch Linux
which php

----------------------------------------

TITLE: Configuring Custom Debug Adapter in Zed
DESCRIPTION: Example configuration for setting up a custom debug adapter in Zed's .zed/debug.json file. Shows basic structure with essential fields like label, adapter, request type, working directory, and program path.

LANGUAGE: json
CODE:
[
  {
    "label": "Example Start debugger config",
    "adapter": "custom",
    "request": "launch",
    "cwd": "$ZED_WORKTREE_ROOT",
    "program": "path_to_program",
    "initialize_args": {
    },
    "connection": "stdio",
    "command": "path_to_cli"
  }
]

----------------------------------------

TITLE: Configuring Prettier for JSONC Files
DESCRIPTION: Configuration to prevent Prettier from adding trailing commas in JSONC files by specifying parser and trailing comma options in .prettierrc file.

LANGUAGE: json
CODE:
{
  "overrides": [
    {
      "files": ["*.jsonc"],
      "options": {
        "parser": "json",
        "trailingComma": "none"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Intelephense Language Server in Zed
DESCRIPTION: JSON configuration to switch from the default phpactor to intelephense language server for PHP in Zed's settings.json file.

LANGUAGE: json
CODE:
{
  "languages": {
    "PHP": {
      "language_servers": ["intelephense", "!phpactor", "..."]
    }
  }
}

----------------------------------------

TITLE: Defining Syntax Overrides in Tree-sitter
DESCRIPTION: Shows how to specify syntactic scopes for overriding editor settings within specific language constructs using Tree-sitter queries in the overrides.scm file. This example defines string scopes in JavaScript.

LANGUAGE: scheme
CODE:
[
  (string)
  (template_string)
] @string

----------------------------------------

TITLE: Configuring Custom Diff File Extensions in Zed
DESCRIPTION: This JSON snippet shows how to add custom file extensions to be recognized as Diff files in Zed's settings.json. It demonstrates adding the 'dif' extension to the Diff file type.

LANGUAGE: json
CODE:
  "file_types": {
    "Diff": ["dif"]
  },

----------------------------------------

TITLE: Installing Ark R Kernel on macOS
DESCRIPTION: This shell script demonstrates how to download and install the latest non-debug build of Ark, an R Kernel for Jupyter applications, on macOS.

LANGUAGE: sh
CODE:
# macOS
cd /tmp
curl -L -o ark-latest-darwin.zip \
    $(curl -s "https://api.github.com/repos/posit-dev/ark/releases/latest" | \
    jq -r '.assets[] | select(.name | contains("darwin-universal") and (contains("debug") | not)) | .browser_download_url')
unzip ark-latest-darwin.zip ark
sudo mv /tmp/ark /usr/local/bin/

----------------------------------------

TITLE: Setting up Zed Postgres Database
DESCRIPTION: This command runs a bootstrap script to set up the Zed Postgres database and populate it with some users. It requires internet access to fetch users from the GitHub API.

LANGUAGE: sh
CODE:
script/bootstrap

----------------------------------------

TITLE: Installing Haskell Language Server via ghcup
DESCRIPTION: Commands to install the Haskell Language Server (HLS) using ghcup and verify its installation.

LANGUAGE: sh
CODE:
ghcup install hls
which haskell-language-server-wrapper

----------------------------------------

TITLE: Installing Solargraph via Bundler
DESCRIPTION: Ruby code for adding Solargraph gem to development group in Gemfile

LANGUAGE: ruby
CODE:
gem 'solargraph', group: :development

----------------------------------------

TITLE: Symbolicate Crash Report on macOS
DESCRIPTION: Shell command to symbolicate a .ips crash report file using debug symbols from a digital ocean bucket. This process converts mangled symbols into readable stack traces with source file locations and line numbers.

LANGUAGE: sh
CODE:
./script/symbolicate ~/path/zed-XXX-XXX.ips

----------------------------------------

TITLE: Configuring Mix as External Formatter for Elixir in Zed
DESCRIPTION: JSON configuration to set up Mix as an external formatter for Elixir files in Zed, applying formatting on file save.

LANGUAGE: json
CODE:
{
  "languages": {
    "Elixir": {
      "format_on_save": {
        "external": {
          "command": "mix",
          "arguments": ["format", "--stdin-filename", "{buffer_path}", "-"]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Installing shfmt for Shell Script Formatting
DESCRIPTION: Commands for installing shfmt on various operating systems to enable Shell Script formatting in Zed.

LANGUAGE: sh
CODE:
brew install shfmt            # macos (homebrew)
sudo apt-get install shfmt    # debian/ubuntu
dnf install shfmt             # fedora
yum install shfmt             # redhat
pacman -Sy shfmt              # archlinux
choco install shfmt           # windows (chocolatey)

----------------------------------------

TITLE: Implementing Context Server Command in Rust
DESCRIPTION: Shows the implementation of the context_server_command method for a Zed extension in Rust. This method returns the command to start a context server, including arguments and environment variables.

LANGUAGE: rust
CODE:
impl zed::Extension for MyExtension {
    fn context_server_command(
        &mut self,
        context_server_id: &ContextServerId,
        project: &zed::Project,
    ) -> Result<zed::Command> {
        Ok(zed::Command {
            command: get_path_to_context_server_executable()?,
            args: get_args_for_context_server()?,
            env: get_env_for_context_server()?,
        })
    }
}

----------------------------------------

TITLE: JSON Schema Inline Configuration Example
DESCRIPTION: Example of inline JSON schema specification for .luarc.json using the $schema property to reference an external schema definition.

LANGUAGE: json
CODE:
{
  "$schema": "https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json",
  "runtime.version": "Lua 5.4"
}

----------------------------------------

TITLE: Overriding Svelte LSP Settings in JSON
DESCRIPTION: Configuration template for overriding default Svelte language server settings, including TypeScript and JavaScript configurations.

LANGUAGE: json
CODE:
"lsp": {
  "svelte-language-server": {
    "initialization_options": {
      "configuration": {
        "typescript": {
          ......
        },
        "javascript": {
          ......
        }
      }
    }
  }
}

----------------------------------------

TITLE: Advanced Port Forwarding Configuration in Zed
DESCRIPTION: This JSON snippet demonstrates advanced port forwarding configuration in Zed, including binding to specific local and remote interfaces.

LANGUAGE: json
CODE:
{
  "ssh_connections": [
    {
      "host": "192.168.1.10",
      "port_forwards": [
        {
          "local_port": 8080,
          "remote_port": 80,
          "local_host": "0.0.0.0",
          "remote_host": "docker-host"
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Disabling Linked Edits for Elm in Zed
DESCRIPTION: Configuration to disable linked edits feature for Elm in Zed due to upstream issues with elm-language-server.

LANGUAGE: json
CODE:
  "languages": {
    "Elm": {
      "linked_edits": false
    }
  }

----------------------------------------

TITLE: Configuring Taplo TOML Language Server in Zed LSP Settings
DESCRIPTION: Example of configuring Taplo TOML language server options using Zed's LSP settings in JSON format. This snippet demonstrates how to set the array_auto_collapse option to false.

LANGUAGE: json
CODE:
  "lsp": {
    "taplo": {
      "settings": {
        "array_auto_collapse": false
      }
    }
  }

----------------------------------------

TITLE: Implementing Slash Command Behavior in Rust
DESCRIPTION: Implementation of run_slash_command method to handle command execution. Shows handling of 'echo' and 'pick-one' commands with argument processing and output formatting.

LANGUAGE: rust
CODE:
impl zed::Extension for MyExtension {
    fn run_slash_command(
        &self,
        command: SlashCommand,
        args: Vec<String>,
        _worktree: Option<&Worktree>,
    ) -> Result<SlashCommandOutput, String> {
        match command.name.as_str() {
            "echo" => {
                if args.is_empty() {
                    return Err("nothing to echo".to_string());
                }

                let text = args.join(" ");

                Ok(SlashCommandOutput {
                    sections: vec![SlashCommandOutputSection {
                        range: (0..text.len()).into(),
                        label: "Echo".to_string(),
                    }],
                    text,
                })
            }
            "pick-one" => {
                let Some(selection) = args.first() else {
                    return Err("no option selected".to_string());
                };

                match selection.as_str() {
                    "option-1" | "option-2" | "option-3" => {}
                    invalid_option => {
                        return Err(format!("{invalid_option} is not a valid option"));
                    }
                }

                let text = format!("You chose {selection}.");

                Ok(SlashCommandOutput {
                    sections: vec![SlashCommandOutputSection {
                        range: (0..text.len()).into(),
                        label: format!("Pick One: {selection}"),
                    }],
                    text,
                })
            }
            command => Err(format!("unknown slash command: \"{command}\""))
        }
    }
}

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Shell commands for creating and activating a Python virtual environment in the project directory.

LANGUAGE: sh
CODE:
# create a virtual environment in the .venv directory
python3 -m venv .venv
# set up the current shell to use that virtual environment
source .venv/bin/activate

----------------------------------------

TITLE: Configuring Inlay Hints for typescript-language-server
DESCRIPTION: Settings to configure inlay hints display when using typescript-language-server in Zed.

LANGUAGE: json
CODE:
{
  "lsp": {
    "typescript-language-server": {
      "initialization_options": {
        "preferences": {
          "includeInlayParameterNameHints": "all",
          "includeInlayParameterNameHintsWhenArgumentMatchesName": true,
          "includeInlayFunctionParameterTypeHints": true,
          "includeInlayVariableTypeHints": true,
          "includeInlayVariableTypeHintsWhenTypeMatchesName": true,
          "includeInlayPropertyDeclarationTypeHints": true,
          "includeInlayFunctionLikeReturnTypeHints": true,
          "includeInlayEnumMemberValueHints": true
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Clangd for C-only Projects
DESCRIPTION: YAML configuration to force Clangd to treat all files as C using the -xc flag.

LANGUAGE: yaml
CODE:
CompileFlags:
  Add: [-xc]

----------------------------------------

TITLE: Launching Zed Editor with OCaml Support in Shell
DESCRIPTION: This command launches the Zed editor with OCaml support for the current project directory. It requires the Zed CLI to be installed.

LANGUAGE: sh
CODE:
zed .

----------------------------------------

TITLE: Customizing Prettier YAML Formatting
DESCRIPTION: Configuration for customizing Prettier's YAML formatting behavior in .prettierrc file, specifically for setting quote style in YAML files.

LANGUAGE: json
CODE:
{
  "overrides": [
    {
      "files": ["*.yaml", "*.yml"],
      "options": {
        "singleQuote": false
      }
    }
  ]
}

----------------------------------------

TITLE: Test Framework Task Configurations
DESCRIPTION: JSON configurations for various Ruby test frameworks including Minitest, RSpec, quickdraw, and tldr

LANGUAGE: json
CODE:
[
  {
    "label": "test $ZED_RELATIVE_FILE:$ZED_ROW",
    "command": "bundle exec rails",
    "args": ["test", "\"$ZED_RELATIVE_FILE:$ZED_ROW\""],
    "tags": ["ruby-test"]
  }
]

----------------------------------------

TITLE: Configuring StyLua in Zed Settings
DESCRIPTION: JSON configuration to set up StyLua as the external formatter for Luau files in Zed editor settings

LANGUAGE: json
CODE:
  "languages": {
    "Luau": {
      "formatter": {
        "external": {
          "command": "stylua",
          "arguments": ["-"]
        }
      }
    }
  }

----------------------------------------

TITLE: Configuring YAML Formatter Selection
DESCRIPTION: Settings to use yaml-language-server instead of Prettier for YAML formatting in Zed.

LANGUAGE: json
CODE:
  "languages": {
    "YAML": {
      "formatter": "language_server"
    }
  }

----------------------------------------

TITLE: Displaying Markdown Image in Zed Assistant Panel Documentation
DESCRIPTION: This code snippet demonstrates how to embed an image in Markdown format within the Zed Assistant Panel documentation. It shows an example of asking a question to the assistant.

LANGUAGE: markdown
CODE:
![Asking a question](https://zed.dev/img/assistant/ask-a-question.png)

----------------------------------------

TITLE: Installing Protocol Buffer Language Server
DESCRIPTION: Commands to install and verify the protobuf-language-server installation

LANGUAGE: sh
CODE:
go install github.com/lasorda/protobuf-language-server@latest
which protobuf-language-server

----------------------------------------

TITLE: YAML Schema Definition Example
DESCRIPTION: Example of inline schema definition in YAML file using modeline comment.

LANGUAGE: yaml
CODE:
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Issue Assignment
on:
  issues:
    types: [oppened]

----------------------------------------

TITLE: Displaying Markdown Image for Quoting Selection in Zed Assistant
DESCRIPTION: This code snippet shows how to embed an image in Markdown format to illustrate the process of quoting a selection in the Zed Assistant Panel.

LANGUAGE: markdown
CODE:
![Quoting a selection](https://zed.dev/img/assistant/quoting-a-selection.png)

----------------------------------------

TITLE: Installing ProtoLS
DESCRIPTION: Commands to install and verify the ProtoLS installation using Cargo

LANGUAGE: sh
CODE:
cargo install protols
which protols

----------------------------------------

TITLE: Disabling Schema Store Integration
DESCRIPTION: Configuration to disable automatic schema detection and retrieval from JSON Schema Store.

LANGUAGE: json
CODE:
  "lsp": {
    "yaml-language-server": {
      "settings": {
        "yaml": {
          "schemaStore": {
            "enable": false
          }
        }
      }
    }
  }

----------------------------------------

TITLE: Running Zed Schema Generator Commands
DESCRIPTION: Command-line instructions for running the schema generator tool using Cargo. Shows how to access help documentation and generate specific schema types like theme and icon_theme.

LANGUAGE: sh
CODE:
cargo run -p schema_generator -- --help

cargo run -p schema_generator -- theme
cargo run -p schema_generator -- icon_theme

----------------------------------------

TITLE: Installing clang-format
DESCRIPTION: Package installation commands for clang-format across different operating systems

LANGUAGE: sh
CODE:
# MacOS:
brew install clang-format
# Ubuntu
sudo apt-get install clang-format
# Fedora
sudo dnf install clang-tools-extra

----------------------------------------

TITLE: Manually Installing Zed on Linux
DESCRIPTION: This snippet demonstrates how to manually install Zed by extracting the tarball and creating a symlink. It also includes steps for integrating Zed with XDG-compatible desktop environments.

LANGUAGE: sh
CODE:
mkdir -p ~/.local
# extract zed to ~/.local/zed.app/
tar -xvf <path/to/download>.tar.gz -C ~/.local
# link the zed binary to ~/.local/bin (or another directory in your $PATH)
ln -sf ~/.local/zed.app/bin/zed ~/.local/bin/zed

LANGUAGE: sh
CODE:
cp ~/.local/zed.app/share/applications/zed.desktop ~/.local/share/applications/dev.zed.Zed.desktop
sed -i "s|Icon=zed|Icon=$HOME/.local/zed.app/share/icons/hicolor/512x512/apps/zed.png|g" ~/.local/share/applications/dev.zed.Zed.desktop
sed -i "s|Exec=zed|Exec=$HOME/.local/zed.app/libexec/zed-editor|g" ~/.local/share/applications/dev.zed.Zed.desktop

----------------------------------------

TITLE: Registering Slash Commands in TOML Configuration
DESCRIPTION: Example of registering slash commands in extension.toml configuration file. Shows how to define commands with descriptions and argument requirements.

LANGUAGE: toml
CODE:
[slash_commands.echo]
description = "echoes the provided input"
requires_argument = true

[slash_commands.pick-one]
description = "pick one of three options"
requires_argument = true

----------------------------------------

TITLE: Uninstalling Previous Gopls Installations
DESCRIPTION: Commands to remove existing gopls installations from various package managers before installing the recommended version

LANGUAGE: sh
CODE:
# MacOS homebrew
brew remove gopls
# Ubuntu
sudo apt-get remove gopls
sudo snap remove gopls
# Arch
sudo pacman -R gopls

----------------------------------------

TITLE: Troubleshooting Vulkan Issues for Zed on Linux
DESCRIPTION: This snippet shows how to use the vkcube command to test Vulkan compatibility, which is essential for Zed's graphics functionality.

LANGUAGE: sh
CODE:
vkcube

----------------------------------------

TITLE: LSP Configuration for Rust Analyzer
DESCRIPTION: Configuration example for Rust Analyzer language server initialization options.

LANGUAGE: json
CODE:
"lsp": {
  "rust-analyzer": {
    "initialization_options": {
      "checkOnSave": {
        "command": "clippy"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Format on Save for Markdown in Zed
DESCRIPTION: JSON configuration to enable automatic formatting of Markdown documents on save using Prettier.

LANGUAGE: json
CODE:
  "languages": {
    "Markdown": {
      "format_on_save": "on"
    }
  },

----------------------------------------

TITLE: Installing Local Development Build
DESCRIPTION: Script to install a local build of Zed with desktop integration

LANGUAGE: sh
CODE:
./script/install-linux

----------------------------------------

TITLE: Creating a New Database Migration
DESCRIPTION: This command creates a new database migration file. After creating a migration, the SQLite schema used for testing needs to be updated manually.

LANGUAGE: sh
CODE:
./script/create-migration <name>

----------------------------------------

TITLE: Verifying OCaml Language Server Installation in Shell
DESCRIPTION: This command checks if the OCaml Language Server (ocamllsp) is properly installed by displaying its help message.

LANGUAGE: sh
CODE:
ocamllsp --help

----------------------------------------

TITLE: Memory Profiling Setup
DESCRIPTION: Commands for installing and using heaptrack for memory profiling

LANGUAGE: sh
CODE:
$ sudo apt install heaptrack heaptrack-gui
$ cargo install cargo-heaptrack

LANGUAGE: sh
CODE:
$ cargo heaptrack -b zed

----------------------------------------

TITLE: Installing Zed Preview on Linux via Installation Script
DESCRIPTION: This command downloads and executes the Zed installation script for Linux, installing the preview version by setting the ZED_CHANNEL environment variable.

LANGUAGE: sh
CODE:
curl -f https://zed.dev/install.sh | ZED_CHANNEL=preview sh

----------------------------------------

TITLE: Verifying Dart Installation
DESCRIPTION: Shell commands to verify Dart installation and check its version in the system path.

LANGUAGE: sh
CODE:
which dart
dart --version

----------------------------------------

TITLE: Custom Admin Configuration JSON
DESCRIPTION: JSON configuration template for specifying custom admin users and channels

LANGUAGE: json
CODE:
{
  "admins": ["admin1", "admin2"],
  "channels": ["zed"]
}

----------------------------------------

TITLE: Implementing Language Server Command in Rust
DESCRIPTION: Demonstrates how to implement the language_server_command method in Rust to provide a language server from an extension. This method returns the command, arguments, and environment variables for the language server.

LANGUAGE: rust
CODE:
impl zed::Extension for MyExtension {
    fn language_server_command(
        &mut self,
        language_server_id: &LanguageServerId,
        worktree: &zed::Worktree,
    ) -> Result<zed::Command> {
        Ok(zed::Command {
            command: get_path_to_language_server_executable()?,
            args: get_args_for_language_server()?,
            env: get_env_for_language_server()?,
        })
    }
}

----------------------------------------

TITLE: Disabling Format on Save for HTML in Zed Settings
DESCRIPTION: JSON configuration to turn off automatic formatting on save for HTML files in Zed. This snippet demonstrates how to modify the languages settings for HTML.

LANGUAGE: json
CODE:
  "languages": {
    "HTML": {
      "format_on_save": "off",
    }
  }

----------------------------------------

TITLE: Starting Multiple Zed Instances - macOS/Linux
DESCRIPTION: Script to launch multiple instances of Zed for testing collaboration features

LANGUAGE: sh
CODE:
script/zed-local -3

----------------------------------------

TITLE: REPL Kernel Configuration
DESCRIPTION: JSON configuration for specifying default kernels per programming language in Zed settings

LANGUAGE: json
CODE:
{
  "jupyter": {
    "kernel_selections": {
      "python": "conda-env",
      "typescript": "deno",
      "javascript": "deno",
      "r": "ark"
    }
  }
}

----------------------------------------

TITLE: Configuring File Types for Helm in Zed Settings
DESCRIPTION: This JSON snippet shows how to enable Helm language support for specific file patterns in Zed. It maps the Helm language to various template and YAML files typically used in Helm charts.

LANGUAGE: json
CODE:
  "file_types": {
    "Helm": [
      "**/templates/**/*.tpl",
      "**/templates/**/*.yaml",
      "**/templates/**/*.yml",
      "**/helmfile.d/**/*.yaml",
      "**/helmfile.d/**/*.yml"
    ]
  }

----------------------------------------

TITLE: Configuring Xcode Developer Tools
DESCRIPTION: Commands to set up Xcode developer tools path and accept license agreement.

LANGUAGE: sh
CODE:
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
sudo xcodebuild -license accept

----------------------------------------

TITLE: Configuring Custom Keybinding for Prefilled Prompt in JSON
DESCRIPTION: This JSON snippet demonstrates how to create a custom keybinding that prefills a prompt for the inline assistant. It binds ctrl-shift-enter to open the inline assistant with a specific prompt in the full editor mode.

LANGUAGE: json
CODE:
[
  {
    "context": "Editor && mode == full",
    "bindings": {
      "ctrl-shift-enter": [
        "assistant::InlineAssist",
        { "prompt": "Build a snake game" }
      ]
    }
  }
]

----------------------------------------

TITLE: Configuring Erlang Language Server in Zed
DESCRIPTION: JSON configuration snippet to switch from the default erlang_ls to the erlang-language-platform (elp) server in Zed settings. This configuration should be added to settings.json to modify the language server preferences.

LANGUAGE: json
CODE:
{
  "languages": {
    "Erlang": {
      "language_servers": ["elp", "!erlang-ls", "..."]
    }
  }
}

----------------------------------------

TITLE: Setting BINDGEN Environment Variable
DESCRIPTION: Commands to set up environment variables for resolving dispatch.h file not found error.

LANGUAGE: sh
CODE:
export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=$(xcrun --show-sdk-path)"
cargo clean
cargo run

----------------------------------------

TITLE: Implementing Hoverable Element Container in Rust
DESCRIPTION: Generic struct and element implementation for wrapping elements to make them hoverable. Provides basic structure for hover functionality.

LANGUAGE: rust
CODE:
struct Hoverable<E: Element> {

}

impl<V> Element<V> for Hoverable {

}

----------------------------------------

TITLE: Installing Elm Development Tools via NPM
DESCRIPTION: Commands for installing elm-review and elm-format using npm package manager. elm-review provides code linting capabilities while elm-format enables automatic code formatting.

LANGUAGE: sh
CODE:
npm install elm-review --save-dev
npm install -g elm-format

----------------------------------------

TITLE: Required Visual Studio Components Configuration
DESCRIPTION: JSON configuration specifying the required Visual Studio components for building Zed.

LANGUAGE: json
CODE:
{
  "version": "1.0",
  "components": [
    "Microsoft.VisualStudio.Component.CoreEditor",
    "Microsoft.VisualStudio.Workload.CoreEditor",
    "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
    "Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake",
    "Microsoft.VisualStudio.Component.VC.CMake.Project",
    "Microsoft.VisualStudio.Component.Windows11SDK.26100",
    "Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre"
  ],
  "extensions": []
}

----------------------------------------

TITLE: Verifying shfmt Installation
DESCRIPTION: Shell commands to check the availability and version of shfmt after installation.

LANGUAGE: sh
CODE:
which shfmt
shfmt --version

----------------------------------------

TITLE: Configuring Ruby-LSP Settings
DESCRIPTION: JSON configuration to enable ruby-lsp and disable solargraph/rubocop in Zed settings

LANGUAGE: json
CODE:
{
  "languages": {
    "Ruby": {
      "language_servers": ["ruby-lsp", "!solargraph", "!rubocop", "..."]
    }
  }
}

----------------------------------------

TITLE: Docker Compose Backend Dependencies Setup
DESCRIPTION: Command to start backend dependencies using Docker Compose for collaborative features.

LANGUAGE: sh
CODE:
docker compose up -d

----------------------------------------

TITLE: Configuring Inlay Hints for vtsls
DESCRIPTION: Comprehensive settings for configuring inlay hints when using vtsls for both JavaScript and TypeScript in Zed.

LANGUAGE: json
CODE:
{
  "lsp": {
    "vtsls": {
      "settings": {
        "javascript": {
          "inlayHints": {
            "parameterNames": {
              "enabled": "all",
              "suppressWhenArgumentMatchesName": false
            },
            "parameterTypes": {
              "enabled": true
            },
            "variableTypes": {
              "enabled": true,
              "suppressWhenTypeMatchesName": true
            },
            "propertyDeclarationTypes": {
              "enabled": true
            },
            "functionLikeReturnTypes": {
              "enabled": true
            },
            "enumMemberValues": {
              "enabled": true
            }
          }
        },
        "typescript": {
          "inlayHints": {
            "parameterNames": {
              "enabled": "all",
              "suppressWhenArgumentMatchesName": false
            },
            "parameterTypes": {
              "enabled": true
            },
            "variableTypes": {
              "enabled": true,
              "suppressWhenTypeMatchesName": true
            },
            "propertyDeclarationTypes": {
              "enabled": true
            },
            "functionLikeReturnTypes": {
              "enabled": true
            },
            "enumMemberValues": {
              "enabled": true
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Installing Ark R Kernel on Linux
DESCRIPTION: This shell script shows how to download and install the latest non-debug build of Ark, an R Kernel for Jupyter applications, on Linux x86_64 systems.

LANGUAGE: sh
CODE:
# Linux X86_64
cd /tmp
curl -L -o ark-latest-linux.zip \
    $(curl -s "https://api.github.com/repos/posit-dev/ark/releases/latest" \
        | jq -r '.assets[] | select(.name | contains("linux-x64") and (contains("debug") | not)) | .browser_download_url'
    )
unzip ark-latest-linux.zip ark
sudo mv /tmp/ark /usr/local/bin/

----------------------------------------

TITLE: Rust Flags Configuration
DESCRIPTION: TOML configuration for setting custom Rust flags in Cargo config.

LANGUAGE: toml
CODE:
[build]
rustflags = ["-C", "symbol-mangling-version=v0", "--cfg", "tokio_unstable"]

[target.'cfg(target_os = "windows")']
rustflags = [
    "--cfg",
    "windows_slim_errors",
    "-C",
    "target-feature=+crt-static",
]

[target.'cfg(all())']
rustflags = ["--cfg", "gles"]

----------------------------------------

TITLE: Zed-Specific SSH Connection Options
DESCRIPTION: This JSON snippet demonstrates Zed-specific SSH connection options, including binary upload over SSH and setting a nickname for the connection.

LANGUAGE: json
CODE:
{
  "ssh_connections": [
    {
      "host": "192.168.1.10",
      "projects": [{ "paths": ["~/code/zed/zed"] }],
      "upload_binary_over_ssh": true,
      "nickname": "lil-linux"
    }
  ]
}

----------------------------------------

TITLE: Installing R Packages for Zed Support in R
DESCRIPTION: This snippet demonstrates how to install the 'languageserver' and 'lintr' packages in R, which are required for language support in Zed.

LANGUAGE: R
CODE:
install.packages("languageserver")
install.packages("lintr")

----------------------------------------

TITLE: Registering Context Server in TOML Configuration
DESCRIPTION: Demonstrates how to register a context server in the extension.toml file for a Zed extension.

LANGUAGE: toml
CODE:
[context_servers.my-context-server]

----------------------------------------

TITLE: File Type Override Settings for C Files
DESCRIPTION: JSON configuration to override file extensions for C files, particularly useful for legacy uppercase file extensions.

LANGUAGE: json
CODE:
{
  "file_types": {
    "C": ["C", "H"]
  }
}

----------------------------------------

TITLE: Installing R and Required Packages on macOS
DESCRIPTION: This shell script shows how to install R using Homebrew on macOS, and then install the required 'languageserver' and 'lintr' packages using Rscript.

LANGUAGE: sh
CODE:
brew install --cask r
Rscript --version
Rscript -e 'options(repos = "https://cran.rstudio.com/"); install.packages("languageserver")'
Rscript -e 'options(repos = "https://cran.rstudio.com/"); install.packages("lintr")'
Rscript -e 'packageVersion("languageserver")'
Rscript -e 'packageVersion("lintr")'

----------------------------------------

TITLE: Custom Command Configuration for Context Server
DESCRIPTION: Example showing how to configure a custom command execution for a context server, including path, arguments, environment variables, and additional settings.

LANGUAGE: json
CODE:
{
  "context_servers": {
    "my-context-server": {
      "command": {
        "path": "/path/to/my-context-server",
        "args": ["run"],
        "env": {}
      },
      "settings": {
        "enable_something": true
      }
    }
  }
}

----------------------------------------

TITLE: Configuring CloudFormation Custom YAML Tags
DESCRIPTION: Example configuration for supporting Amazon CloudFormation custom YAML tags in yaml-language-server.

LANGUAGE: json
CODE:
  "lsp": {
    "yaml-language-server": {
      "settings": {
        "yaml": {
          "customTags": [
            "!And scalar",
            "!And mapping",
            "!And sequence",
            "!If scalar",
            "!If mapping",
            "!If sequence",
            "!Not scalar",
            "!Not mapping",
            "!Not sequence",
            "!Equals scalar",
            "!Equals mapping",
            "!Equals sequence",
            "!Or scalar",
            "!Or mapping",
            "!Or sequence",
            "!FindInMap scalar",
            "!FindInMap mapping",
            "!FindInMap sequence",
            "!Base64 scalar",
            "!Base64 mapping",
            "!Base64 sequence",
            "!Cidr scalar",
            "!Cidr mapping",
            "!Cidr sequence",
            "!Ref scalar",
            "!Ref mapping",
            "!Ref sequence",
            "!Sub scalar",
            "!Sub mapping",
            "!Sub sequence",
            "!GetAtt scalar",
            "!GetAtt mapping",
            "!GetAtt sequence",
            "!GetAZs scalar",
            "!GetAZs mapping",
            "!GetAZs sequence",
            "!ImportValue scalar",
            "!ImportValue mapping",
            "!ImportValue sequence",
            "!Select scalar",
            "!Select mapping",
            "!Select sequence",
            "!Split scalar",
            "!Split mapping",
            "!Split sequence",
            "!Join scalar",
            "!Join mapping",
            "!Join sequence",
            "!Condition scalar",
            "!Condition mapping",
            "!Condition sequence"
          ]
        }
      }
    }
  }

----------------------------------------

TITLE: Enabling ESLint Fix on Format for JavaScript in Zed
DESCRIPTION: This configuration enables ESLint's --fix functionality when formatting JavaScript code in Zed. It uses the 'code_actions_on_format' setting to apply ESLint fixes during the formatting process.

LANGUAGE: json
CODE:
{
  "languages": {
    "JavaScript": {
      "code_actions_on_format": {
        "source.fixAll.eslint": true
      }
    }
  }
}

----------------------------------------

TITLE: Displaying Markdown Image for Receiving Answer in Zed Assistant
DESCRIPTION: This code snippet demonstrates how to embed an image in Markdown format to show the process of receiving an answer from the assistant in the Zed Assistant Panel.

LANGUAGE: markdown
CODE:
![Receiving an answer](https://zed.dev/img/assistant/receiving-an-answer.png)

----------------------------------------

TITLE: Disabling System Version of Clangd in Zed
DESCRIPTION: This configuration snippet demonstrates how to disable Zed from looking for a system-installed version of clangd by setting 'ignore_system_version' to true in settings.json.

LANGUAGE: json
CODE:
{
  "lsp": {
    "clangd": {
      "binary": {
        "ignore_system_version": true
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Godot External Editor Settings for Zed
DESCRIPTION: These settings configure Godot to use Zed as an external editor for GDScript files. They specify the path to Zed and the command-line arguments to use when opening files.

LANGUAGE: plaintext
CODE:
Use External Editor: "✅ On"
Exec path: "/Applications/Zed.app/Contents/MacOS/zed"
Exec flags: "{project} {file}:{line}:{col}"

----------------------------------------

TITLE: Using File Command in Zed Prompt
DESCRIPTION: Demonstrates how to use the /file command in a prompt to include project information dynamically.

LANGUAGE: plaintext
CODE:
You are an expert Rust engineer. The user has asked you to review their project and answer some questions.

Here is some information about their project:

/file Cargo.toml

----------------------------------------

TITLE: Configuring Custom Google AI Models
DESCRIPTION: JSON configuration for adding custom Google AI models with specific parameters like model name and token limits.

LANGUAGE: json
CODE:
{
  "language_models": {
    "google": {
      "available_models": [
        {
          "name": "gemini-1.5-flash-latest",
          "display_name": "Gemini 1.5 Flash (Latest)",
          "max_tokens": 1000000
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Installing Elixir and Elixir-LS using Homebrew
DESCRIPTION: Shell commands to install Elixir and elixir-ls using Homebrew package manager.

LANGUAGE: sh
CODE:
brew install elixir
brew install elixir-ls

----------------------------------------

TITLE: Nesting Prompts in Zed
DESCRIPTION: Shows how to nest prompts within other prompts using the /prompt command to create modular and reusable prompt components.

LANGUAGE: plaintext
CODE:
Title: Zed-Flavored Rust

## About Zed

/prompt Zed: Zed (a prompt about what Zed is)

## Rust - Zed Style

/prompt Rust: Async - Async-std (zed doesn't use tokio)
/prompt Rust: Zed-style Crates (we have some unique conventions)
/prompt Rust - Workspace deps (bias towards reusing deps from the workspace)

----------------------------------------

TITLE: Running Zed with Rust-GDB and Rust-LLDB
DESCRIPTION: Commands to start Zed using rust-gdb or rust-lldb for debugging after compiling with full debug info.

LANGUAGE: sh
CODE:
rust-gdb target/debug/zed
rust-lldb target/debug/zed

----------------------------------------

TITLE: Verifying Gopls Installation
DESCRIPTION: Commands to verify gopls installation and check its version

LANGUAGE: sh
CODE:
which gopls
gopls version

----------------------------------------

TITLE: Disabling Code Completions in JSON Settings
DESCRIPTION: Configuration to disable automatic code completions provided by Language Servers in Zed.

LANGUAGE: json
CODE:
"show_completions_on_input": false

----------------------------------------

TITLE: Installing Zed Stable via Homebrew on macOS
DESCRIPTION: This command installs the stable version of Zed using Homebrew package manager on macOS.

LANGUAGE: sh
CODE:
brew install --cask zed

----------------------------------------

TITLE: Installing Zed Stable via Homebrew on macOS
DESCRIPTION: This command installs the stable version of Zed using Homebrew package manager on macOS.

LANGUAGE: sh
CODE:
brew install --cask zed

----------------------------------------

TITLE: Building and Running Zed in Debug Mode
DESCRIPTION: Cargo commands for building and testing Zed in debug mode

LANGUAGE: sh
CODE:
cargo run

LANGUAGE: sh
CODE:
cargo test --workspace

----------------------------------------

TITLE: Language-Specific Edit Prediction Settings
DESCRIPTION: Configuration to disable edit predictions for specific programming languages.

LANGUAGE: json
CODE:
{
  "language": {
    "python": {
      "show_edit_predictions": false
    }
  }
}

----------------------------------------

TITLE: Implementing Needle Search in JavaScript
DESCRIPTION: A JavaScript function that searches for a 'needle' (substring) within a 'haystack' (larger string). It uses the includes() method to return true if the needle is found, false otherwise.

LANGUAGE: javascript
CODE:
function searchForNeedle(haystack, needle) {
  return haystack.includes(needle);
}

----------------------------------------

TITLE: Installing Linux System Dependencies
DESCRIPTION: Command to install required system libraries for building Zed

LANGUAGE: sh
CODE:
script/linux

----------------------------------------

TITLE: Configuring GitHub Copilot Integration
DESCRIPTION: Settings to enable GitHub Copilot as the edit prediction provider in Zed.

LANGUAGE: json
CODE:
{
  "features": {
    "edit_prediction_provider": "copilot"
  }
}

----------------------------------------

TITLE: Compiling Zed with Full Debug Info using Cargo
DESCRIPTION: Commands to compile Zed with full debug information using the --config flag with cargo run and cargo build.

LANGUAGE: sh
CODE:
cargo run --config 'profile.dev.debug="full"'
cargo build --config 'profile.dev.debug="full"'

----------------------------------------

TITLE: Starting Backend Dependencies with Docker
DESCRIPTION: Command to start collaborative features dependencies using Docker Compose

LANGUAGE: sh
CODE:
docker compose up -d

----------------------------------------

TITLE: Configuring Supermaven Integration
DESCRIPTION: Settings to enable Supermaven as the edit prediction provider in Zed.

LANGUAGE: json
CODE:
{
  "features": {
    "edit_prediction_provider": "supermaven"
  }
}

----------------------------------------

TITLE: Clang Format Style Configuration
DESCRIPTION: YAML configuration for C code formatting using GNU style with custom indent width.

LANGUAGE: yaml
CODE:
---
BasedOnStyle: GNU
IndentWidth: 2
---

----------------------------------------

TITLE: Running Docker Compose for Collab Dependencies
DESCRIPTION: Command to start all collaboration dependencies using Docker Compose.

LANGUAGE: sh
CODE:
docker compose up -d

----------------------------------------

TITLE: Modifying Cargo.toml for Full Debug Info
DESCRIPTION: TOML configuration to set full debug info in the dev profile of Cargo.toml, replacing the limited debug setting.

LANGUAGE: toml
CODE:
[profile.dev]
debug = "full"

----------------------------------------

TITLE: Configuring Shell Script Settings in Zed
DESCRIPTION: JSON configuration for setting tab size and hard tabs for Shell Scripts in Zed's user or project settings.

LANGUAGE: json
CODE:
  "languages": {
    "Shell Script": {
      "tab_size": 2,
      "hard_tabs": false
    }
  }

----------------------------------------

TITLE: Installing Xcode Command Line Tools
DESCRIPTION: Commands for installing and configuring Xcode command line tools for macOS development.

LANGUAGE: sh
CODE:
xcode-select --install

----------------------------------------

TITLE: Implementing Zed Extension in Rust
DESCRIPTION: This code snippet shows how to implement a Zed extension in Rust. It defines a struct for the extension, implements the Extension trait, and uses the register_extension! macro to register the extension.

LANGUAGE: rust
CODE:
use zed_extension_api as zed;

struct MyExtension {
    // ... state
}

impl zed::Extension for MyExtension {
    // ...
}

zed::register_extension!(MyExtension);

----------------------------------------

TITLE: Configuring Vim Mode in Zed User Settings
DESCRIPTION: Example JSON configuration for enabling vim mode in Zed user settings.

LANGUAGE: json
CODE:
{
  "vim_mode": true
}

----------------------------------------

TITLE: Installing Backend Dependencies
DESCRIPTION: Command to install Livekit and Foreman for collaborative features.

LANGUAGE: sh
CODE:
brew install livekit foreman

----------------------------------------

TITLE: Registering Tree-sitter Grammar in TOML
DESCRIPTION: Shows how to register a Tree-sitter grammar for a language in the extension.toml file. This specifies the repository and revision for the grammar to be used by Zed.

LANGUAGE: toml
CODE:
[grammars.gleam]
repository = "https://github.com/gleam-lang/tree-sitter-gleam"
rev = "58b7cac8fc14c92b0677c542610d8738c373fa81"

----------------------------------------

TITLE: Adding Extension to Zed Registry in TOML
DESCRIPTION: This snippet demonstrates how to add an entry for a new extension in the top-level extensions.toml file. It specifies the submodule path and version of the extension.

LANGUAGE: toml
CODE:
[my-extension]
submodule = "extensions/my-extension"
version = "0.0.1"

----------------------------------------

TITLE: Database Bootstrap Script - macOS/Linux
DESCRIPTION: Shell command to set up and populate the Zed Postgres database with test users from GitHub API

LANGUAGE: sh
CODE:
script/bootstrap

----------------------------------------

TITLE: Defining Auto-indentation Rules in Tree-sitter
DESCRIPTION: Shows how to specify indentation rules using Tree-sitter queries in the indents.scm file. This example marks the end of arrays and objects for indentation purposes in JSON.

LANGUAGE: scheme
CODE:
(array "]" @end) @indent
(object "}" @end) @indent

----------------------------------------

TITLE: Configuring Custom Anthropic Models in settings.json
DESCRIPTION: JSON configuration for adding custom Anthropic models with specific parameters like max tokens, cache configuration, and extended thinking mode support.

LANGUAGE: json
CODE:
{
  "language_models": {
    "anthropic": {
      "available_models": [
        {
          "name": "claude-3-5-sonnet-20240620",
          "display_name": "Sonnet 2024-June",
          "max_tokens": 128000,
          "max_output_tokens": 2560,
          "cache_configuration": {
            "max_cache_anchors": 10,
            "min_total_token": 10000,
            "should_speculate": false
          },
          "tool_override": "some-model-that-supports-toolcalling"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Starting Collaboration Services - macOS/Linux
DESCRIPTION: Commands to start the collaboration server and LiveKit dev server using foreman or docker compose

LANGUAGE: sh
CODE:
foreman start
# OR
docker compose up

----------------------------------------

TITLE: Implementing Slash Command Argument Auto-completion in Rust
DESCRIPTION: Implementation of complete_slash_command_argument method to provide argument completions. Demonstrates auto-completion for the 'pick-one' command with multiple options.

LANGUAGE: rust
CODE:
impl zed::Extension for MyExtension {
    fn complete_slash_command_argument(
        &self,
        command: SlashCommand,
        _args: Vec<String>,
    ) -> Result<Vec<SlashCommandArgumentCompletion>, String> {
        match command.name.as_str() {
            "echo" => Ok(vec![]),
            "pick-one" => Ok(vec![
                SlashCommandArgumentCompletion {
                    label: "Option One".to_string(),
                    new_text: "option-1".to_string(),
                    run_command: true,
                },
                SlashCommandArgumentCompletion {
                    label: "Option Two".to_string(),
                    new_text: "option-2".to_string(),
                    run_command: true,
                },
                SlashCommandArgumentCompletion {
                    label: "Option Three".to_string(),
                    new_text: "option-3".to_string(),
                    run_command: true,
                },
            ]),
            command => Err(format!("unknown slash command: \"{command}\""))
        }
    }
}

----------------------------------------

TITLE: Installing Rust Toolchain for Zed Extension Development
DESCRIPTION: This command installs the Rust toolchain, which is a prerequisite for developing Zed extensions.

LANGUAGE: sh
CODE:
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

----------------------------------------

TITLE: Windows Database Bootstrap
DESCRIPTION: PowerShell command to initialize database on Windows platform

LANGUAGE: powershell
CODE:
.\script\bootstrap.ps1

----------------------------------------

TITLE: Configuring Legacy Zed Fonts in settings.json
DESCRIPTION: JSON configuration example showing how to set up legacy Zed fonts for UI, buffer, and terminal interfaces in Zed editor. This includes setting the UI font to Zed Sans Extended and the buffer and terminal fonts to Zed Mono Extended.

LANGUAGE: json
CODE:
{
  "ui_font_family": "Zed Sans Extended",
  "buffer_font_family": "Zed Mono Extend",
  "terminal": {
    "font-family": "Zed Mono Extended"
  }
}

----------------------------------------

TITLE: Configuring SourceKit LSP in Zed
DESCRIPTION: Instructions for modifying SourceKit LSP behavior in Zed by creating a configuration file. The file should be named 'config.json' and placed in the '.sourcekit-lsp' directory under the home or project root.

LANGUAGE: markdown
CODE:
## Configuration

You can modify the behavior of SourceKit LSP by creating a `.sourcekit-lsp/config.json` under your home directory or in your project root. See [SourceKit-LSP configuration file](https://github.com/swiftlang/sourcekit-lsp/blob/main/Documentation/Configuration%20File.md) for complete documentation.

----------------------------------------

TITLE: Configuring Edit Prediction Mode
DESCRIPTION: Setting to control the display mode of edit predictions between eager and subtle modes.

LANGUAGE: json
CODE:
"edit_predictions": {
  "mode": "eager" | "subtle"
}

----------------------------------------

TITLE: Installing Zed Stable on Linux via Installation Script
DESCRIPTION: This command downloads and executes the Zed installation script for Linux, installing the stable version.

LANGUAGE: sh
CODE:
curl -f https://zed.dev/install.sh | sh

----------------------------------------

TITLE: Configuring Custom Admin Users
DESCRIPTION: This JSON configuration specifies custom admin users for local development. It should be placed in 'crates/collab/seed.json' to override the default users.

LANGUAGE: json
CODE:
{
  "admins": ["yourgithubhere"],
  "channels": ["zed"]
}

----------------------------------------

TITLE: Disabling Automatic Edit Predictions
DESCRIPTION: Configuration to disable automatic edit predictions globally in Zed.

LANGUAGE: json
CODE:
{
  "show_edit_predictions": false
}

----------------------------------------

TITLE: Git Action Reference Table - Markdown
DESCRIPTION: A reference table of Git-related actions and their corresponding keybindings in Zed editor, showing all available Git commands and their keyboard shortcuts.

LANGUAGE: markdown
CODE:
| Action                                 | Keybinding                         |
| -------------------------------------- | ---------------------------------- |
| {#action git::Add}                     | {#kb git::Add}                     |
| {#action git::StageAll}                | {#kb git::StageAll}                |
| {#action git::UnstageAll}              | {#kb git::UnstageAll}              |
| {#action git::ToggleStaged}            | {#kb git::ToggleStaged}            |
| {#action git::StageAndNext}            | {#kb git::StageAndNext}            |
| {#action git::UnstageAndNext}          | {#kb git::UnstageAndNext}          |
| {#action git::Commit}                  | {#kb git::Commit}                  |
| {#action git::ExpandCommitEditor}      | {#kb git::ExpandCommitEditor}      |
| {#action git::Push}                    | {#kb git::Push}                    |
| {#action git::ForcePush}               | {#kb git::ForcePush}               |
| {#action git::Pull}                    | {#kb git::Pull}                    |
| {#action git::Fetch}                   | {#kb git::Fetch}                   |
| {#action git::Diff}                    | {#kb git::Diff}                    |
| {#action git::Restore}                 | {#kb git::Restore}                 |
| {#action git::RestoreFile}             | {#kb git::RestoreFile}             |
| {#action git::Branch}                  | {#kb git::Branch}                  |
| {#action git::Switch}                  | {#kb git::Switch}                  |
| {#action git::CheckoutBranch}          | {#kb git::CheckoutBranch}          |
| {#action editor::ToggleGitBlame}       | {#kb editor::ToggleGitBlame}       |
| {#action editor::ToggleGitBlameInline} | {#kb editor::ToggleGitBlameInline} |

----------------------------------------

TITLE: Global Python Kernel Installation
DESCRIPTION: Commands for installing and registering the IPython kernel globally

LANGUAGE: shell
CODE:
pip install ipykernel
python -m ipykernel install --user

----------------------------------------

TITLE: Opening Collaboration Panel Keyboard Shortcut
DESCRIPTION: Command shortcut to open the collaboration panel in Zed editor

LANGUAGE: plaintext
CODE:
cmd-shift-c (or cmd-shift-p "collab panel: toggle focus")

----------------------------------------

TITLE: Configuring File Types for Ansible in Zed Settings
DESCRIPTION: This JSON snippet demonstrates how to associate various file patterns with the Ansible language in Zed. It can be added to the project-specific or user-wide Zed settings file to enable Ansible syntax highlighting and features for matching files.

LANGUAGE: json
CODE:
"file_types": {
    "Ansible": [
      "**.ansible.yml",
      "**.ansible.yaml",
      "**/defaults/*.yml",
      "**/defaults/*.yaml",
      "**/meta/*.yml",
      "**/meta/*.yaml",
      "**/tasks/*.yml",
      "**/tasks/*.yml",
      "**/tasks/*.yaml",
      "**/handlers/*.yml",
      "**/handlers/*.yaml",
      "**/group_vars/*.yml",
      "**/group_vars/*.yaml",
      "**/playbooks/*.yaml",
      "**/playbooks/*.yml",
      "**playbook*.yaml",
      "**playbook*.yml"
    ]
  }

----------------------------------------

TITLE: Configuring Automatic Shell Script Formatting in Zed
DESCRIPTION: JSON configuration to set up automatic formatting of Shell Scripts using shfmt in Zed, including command and arguments.

LANGUAGE: json
CODE:
  "languages": {
    "Shell Script": {
      "format_on_save": "on",
      "formatter": {
        "external": {
          "command": "shfmt",
          // Change `--indent 2` to match your preferred tab_size
          "arguments": ["--filename", "{buffer_path}", "--indent", "2"]
        }
      }
    }
  }

----------------------------------------

TITLE: Starting Ollama Server
DESCRIPTION: Shell command for starting the Ollama server daemon.

LANGUAGE: sh
CODE:
ollama serve

----------------------------------------

TITLE: Verifying shellcheck installation
DESCRIPTION: Commands to verify that shellcheck is properly installed and available in the system path.

LANGUAGE: sh
CODE:
which shellcheck
shellcheck --version

----------------------------------------

TITLE: Disabling Prettier for TypeScript
DESCRIPTION: Configuration to disable Prettier formatting for TypeScript files in Zed.

LANGUAGE: json
CODE:
{
  "languages": {
    "TypeScript": {
      "prettier": { "allowed": false }
    }
    //...
  }
}

----------------------------------------

TITLE: Serving Documentation Locally with mdBook
DESCRIPTION: Command to serve the documentation locally using mdBook after installation via cargo.

LANGUAGE: sh
CODE:
mdbook serve docs

----------------------------------------

TITLE: Configuring Clangd Arguments in Zed
DESCRIPTION: This JSON configuration shows how to pass additional arguments to clangd in Zed, specifically setting function-arg-placeholders to 0 for simpler function call completions.

LANGUAGE: json
CODE:
{
  "lsp": {
    "clangd": {
      "binary": {
        "path": "/path/to/clangd",
        "arguments": ["--function-arg-placeholders=0"]
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Core Zed Settings for Vim Mode
DESCRIPTION: Example JSON configuration for adjusting core Zed settings to enhance the Vim experience.

LANGUAGE: json
CODE:
{
  "cursor_blink": false,
  "relative_line_numbers": true,
  "scrollbar": { "show": "never" },
  "scroll_beyond_last_line": "off",
  "vertical_scroll_margin": 0,
  "gutter": {
    "line_numbers": false
  },
  "command_aliases": {
    "W": "w",
    "Wq": "wq",
    "Q": "q"
  }
}

----------------------------------------

TITLE: Keybinding Template Format
DESCRIPTION: Example of the markdown syntax for referencing keybindings in documentation.

LANGUAGE: markdown
CODE:
{#kb zed::OpenSettings}

----------------------------------------

TITLE: Installing Latest Gopls Version
DESCRIPTION: Command to install or update gopls to the latest version using Go's module tool

LANGUAGE: sh
CODE:
go install golang.org/x/tools/gopls@latest

----------------------------------------

TITLE: Implementing Code Injections in Tree-sitter
DESCRIPTION: Demonstrates how to define rules for embedding one language within another using Tree-sitter queries in the injections.scm file. This example identifies fenced code blocks in Markdown.

LANGUAGE: scheme
CODE:
(fenced_code_block
  (info_string
    (language) @injection.language)
  (code_fence_content) @injection.content)

((inline) @content
 (#set! injection.language "markdown-inline"))

----------------------------------------

TITLE: Action Template Format
DESCRIPTION: Example of the markdown syntax for referencing actions in documentation.

LANGUAGE: markdown
CODE:
{#action zed::OpenSettings}

----------------------------------------

TITLE: Installing StyLua Formatter
DESCRIPTION: Commands to install the StyLua formatter either through Homebrew on macOS or using Cargo package manager with specific Lua version features enabled

LANGUAGE: sh
CODE:
# macOS via Homebrew
brew install stylua
# Or via Cargo
cargo install stylua --features lua52,lua53,lua54,luau

----------------------------------------

TITLE: Adding Custom Snippets for Rust-Analyzer in Zed
DESCRIPTION: This JSON configuration demonstrates how to add custom completion snippets for rust-analyzer in Zed. It includes examples for Arc::new, Some, Ok, Rc::new, Box::pin, and vec! macros.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "completion": {
          "snippets": {
            "custom": {
              "Arc::new": {
                "postfix": "arc",
                "body": ["Arc::new(${receiver})"],
                "requires": "std::sync::Arc",
                "scope": "expr"
              },
              "Some": {
                "postfix": "some",
                "body": ["Some(${receiver})"],
                "scope": "expr"
              },
              "Ok": {
                "postfix": "ok",
                "body": ["Ok(${receiver})"],
                "scope": "expr"
              },
              "Rc::new": {
                "postfix": "rc",
                "body": ["Rc::new(${receiver})"],
                "requires": "std::rc::Rc",
                "scope": "expr"
              },
              "Box::pin": {
                "postfix": "boxpin",
                "body": ["Box::pin(${receiver})"],
                "requires": "std::boxed::Box",
                "scope": "expr"
              },
              "vec!": {
                "postfix": "vec",
                "body": ["vec![${receiver}]"],
                "description": "vec![]",
                "scope": "expr"
              }
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Formatting Documentation with Prettier
DESCRIPTION: Command to format documentation files using Prettier version 3.5.0 before committing changes.

LANGUAGE: sh
CODE:
cd docs && pnpm dlx prettier@3.5.0 . --write && cd ..

----------------------------------------

TITLE: Demonstrating Python Syntax Highlighting in Markdown
DESCRIPTION: Shows how to use language-specific syntax highlighting in Markdown code blocks using Python as an example.

LANGUAGE: markdown
CODE:
```python
import functools as ft

@ft.lru_cache(maxsize=500)
def fib(n):
    return n if n < 2 else fib(n - 1) + fib(n - 2)
```

----------------------------------------

TITLE: Conda Environment Kernel Setup
DESCRIPTION: Commands for setting up an IPython kernel in a Conda environment

LANGUAGE: shell
CODE:
source activate myenv
conda install ipykernel
python -m ipykernel install --user --name myenv --display-name "Python (myenv)"

----------------------------------------

TITLE: Debugger Settings Configuration
DESCRIPTION: Various debugger settings examples including stepping granularity, breakpoint saving, timeout configuration, and logging options.

LANGUAGE: json
CODE:
{
  "debugger": {
    "stepping_granularity": "statement"
  }
}

LANGUAGE: json
CODE:
{
  "debugger": {
    "save_breakpoints": true
  }
}

LANGUAGE: json
CODE:
{
  "debugger": {
    "timeout": 3000
  }
}

----------------------------------------

TITLE: Advanced SSH Connection Configuration in Zed
DESCRIPTION: This JSON snippet shows advanced SSH connection configuration options in Zed, including custom SSH arguments, port specification, and username override.

LANGUAGE: json
CODE:
{
  "ssh_connections": [
    {
      "host": "192.168.1.10",
      "projects": [{ "paths": ["~/code/zed/zed"] }],
      "args": ["-i", "~/.ssh/work_id_file"],
      "port": 22,
      "username": "me"
    }
  ]
}

----------------------------------------

TITLE: Configuring File Types with Glob Patterns in Zed Settings
DESCRIPTION: Example of how to configure file type associations in Zed settings using glob patterns. Shows how to map C++ files and Jinja2 template files using explicit wildcard patterns.

LANGUAGE: json
CODE:
{
  "file_types": {
    "C++": ["[cC]"],
    "Jinja2": ["**/templates/*.html"]
  }
}

----------------------------------------

TITLE: Binding Actions to Elements in GPUI Rust
DESCRIPTION: Shows how to bind actions to elements in GPUI using the on_action method. This allows elements to respond to keyboard actions.

LANGUAGE: rust
CODE:
impl Render for Menu {
    fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {
        div()
            .on_action(|this: &mut Menu, move: &MoveUp, window: &mut Window, cx: &mut Context<Menu>| {
                // ...
            })
            .on_action(|this, move: &MoveDown, cx| {
                // ...
            })
            .children(unimplemented!())
    }
}

----------------------------------------

TITLE: Python Cell Mode Example
DESCRIPTION: Demonstrates how to use cell separators in Python scripts to create notebook-like functionality using '# %%' markers.

LANGUAGE: python
CODE:
# %% Cell 1
import time
import numpy as np

# %% Cell 2
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')

----------------------------------------

TITLE: Cargo Build Commands
DESCRIPTION: Commands for building and testing Zed using Cargo.

LANGUAGE: sh
CODE:
cargo run
cargo run --release
cargo test --workspace

----------------------------------------

TITLE: Running Zed Examples with Cargo
DESCRIPTION: Command line instruction for executing example database builds using Cargo's run command with the --example flag.

LANGUAGE: shell
CODE:
cargo run --example [your-example]

----------------------------------------

TITLE: Kernel List Command Output
DESCRIPTION: Example output of the jupyter kernelspec list command showing available kernels

LANGUAGE: shell
CODE:
$ jupyter kernelspec list
Available kernels:
  ark                   /Users/z/Library/Jupyter/kernels/ark
  conda-base            /Users/z/Library/Jupyter/kernels/conda-base
  deno                  /Users/z/Library/Jupyter/kernels/deno
  python-chatlab-dev    /Users/z/Library/Jupyter/kernels/python-chatlab-dev
  python3               /Users/z/Library/Jupyter/kernels/python3
  ruby                  /Users/z/Library/Jupyter/kernels/ruby
  rust                  /Users/z/Library/Jupyter/kernels/rust

----------------------------------------

TITLE: Configuring Inlay Hints for Rust-Analyzer in Zed
DESCRIPTION: This JSON snippet shows how to configure inlay hint settings for rust-analyzer in Zed. It includes options for maxLength, lifetime elision hints, and closure return type hints.

LANGUAGE: json
CODE:
{
  "lsp": {
    "rust-analyzer": {
      "initialization_options": {
        "inlayHints": {
          "maxLength": null,
          "lifetimeElisionHints": {
            "enable": "skip_trivial",
            "useParameterNames": true
          },
          "closureReturnTypeHints": {
            "enable": "always"
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Running Multiple Zed Instances Locally
DESCRIPTION: This script starts multiple instances of Zed connected to the local collaboration server. The number of instances can be specified using flags (-2, -3, or -4).

LANGUAGE: sh
CODE:
script/zed-local -2

----------------------------------------

TITLE: Database File Paths by Operating System
DESCRIPTION: Platform-specific file paths where Zed stores its SQLite databases for workspace persistence.

LANGUAGE: plaintext
CODE:
~/Library/Application Support/Zed
~/.local/share/Zed
%LOCALAPPDATA%\Zed

----------------------------------------

TITLE: Custom Server Admin Configuration
DESCRIPTION: JSON configuration for setting up custom admin users on a self-hosted collaboration server

LANGUAGE: json
CODE:
{
  "admins": ["nathansobo"]
}

----------------------------------------

TITLE: Demonstrating Code Symbol Outline Format in Markdown
DESCRIPTION: Example showing how the tool formats code symbol hierarchies using markdown headings. Each entry includes line numbers or ranges indicating the symbol's location in the source file.

LANGUAGE: markdown
CODE:
# class Foo [L123-136]
## method do_something(arg1, arg2) [L124-126]
## method process_data(data) [L128-135]
# class Bar [L145-161]
## method initialize() [L146-149]
## method update_state(new_state) [L160]
## private method _validate_state(state) [L161-162]

----------------------------------------

TITLE: Running Single Evaluation with Cargo in Rust
DESCRIPTION: This command demonstrates how to run a specific evaluation using Cargo in a Rust project. It executes the assistant_eval package with a specific evaluation name as an argument.

LANGUAGE: bash
CODE:
cargo run -p assistant_eval -- bubbletea-add-set-window-title

----------------------------------------

TITLE: PostgreSQL Locale Configuration
DESCRIPTION: Configuration setting for PostgreSQL locale to ensure UTF8 compatibility.

LANGUAGE: conf
CODE:
# lc_messages = 'Chinese (Simplified)_China.936' # locale for system error message strings
lc_messages = 'English_United States.1252'

----------------------------------------

TITLE: Running All Evaluations with Cargo in Rust
DESCRIPTION: This command illustrates how to run all available evaluations using Cargo in a Rust project. It executes the assistant_eval package with the --all flag as an argument.

LANGUAGE: bash
CODE:
cargo run -p assistant_eval -- --all

----------------------------------------

TITLE: Querying File-Specific Diagnostics in JSON
DESCRIPTION: This JSON structure is used to request diagnostics for a specific file in the project. It requires a 'path' parameter specifying the file to analyze.

LANGUAGE: json
CODE:
{
    "path": "src/main.rs"
}

----------------------------------------

TITLE: Building and Running Zed
DESCRIPTION: Commands for building Zed in debug and release modes, and running tests.

LANGUAGE: sh
CODE:
cargo run
cargo run --release
cargo test --workspace

----------------------------------------

TITLE: Running Multiple Evaluations with Regex Pattern in Rust
DESCRIPTION: This command shows how to run multiple evaluations that match a regex pattern using Cargo in a Rust project. It executes the assistant_eval package with a partial evaluation name as an argument.

LANGUAGE: bash
CODE:
cargo run -p assistant_eval -- bubbletea

----------------------------------------

TITLE: Querying Project-Wide Diagnostic Summary in JSON
DESCRIPTION: This empty JSON object is used to request a project-wide diagnostic summary. It returns error and warning counts for all files in the project.

LANGUAGE: json
CODE:
{}

----------------------------------------

TITLE: Database Seed Configuration
DESCRIPTION: Command to view default database seed configuration for admin users and channels

LANGUAGE: sh
CODE:
cat crates/collab/seed.default.json

----------------------------------------

TITLE: Non-QWERTY Keyboard Configuration
DESCRIPTION: Configuration example for enabling key equivalents mapping on non-QWERTY keyboards.

LANGUAGE: json
CODE:
[
  {
    "use_key_equivalents": true,
    "bindings": {
      "ctrl->":"editor::Indent"
    }
  }
]

----------------------------------------

TITLE: Deploying Zed Server to Staging or Production
DESCRIPTION: These commands deploy the Zed Server to either the staging or production environment. Deployment is triggered by pushing to specific tags in GitHub.

LANGUAGE: sh
CODE:
./script/deploy-collab staging

LANGUAGE: sh
CODE:
./script/deploy-collab production

----------------------------------------

TITLE: Defining Custom Keybindings for Zed Tasks
DESCRIPTION: This snippet demonstrates how to create custom keybindings for Zed tasks in the keymap.json file, allowing quick access to specific tasks.

LANGUAGE: json
CODE:
{
  "context": "Workspace",
  "bindings": {
    "alt-g": ["task::Spawn", { "task_name": "echo current file's path" }]
  }
}

----------------------------------------

TITLE: Configuring Light and Dark Icon Themes in Zed Settings
DESCRIPTION: This JSON snippet demonstrates how to configure different icon themes for light and dark modes in Zed's settings file. It allows for system-based mode selection or manual override.

LANGUAGE: json
CODE:
{
  "icon_theme": {
    "mode": "system",
    "light": "Light Icon Theme",
    "dark": "Dark Icon Theme"
  }
}

----------------------------------------

TITLE: Checking Current Deployment Status
DESCRIPTION: This command displays information about what is currently deployed in the Zed Server environments.

LANGUAGE: sh
CODE:
./script/what-is-deployed

----------------------------------------

TITLE: Specifying Text Objects in Tree-sitter
DESCRIPTION: Illustrates how to define rules for navigating by text objects using Tree-sitter queries in the textobjects.scm file. This example shows how to define function and comment text objects.

LANGUAGE: scheme
CODE:
; include only the content of the method in the function
(method_definition
    body: (_
        "{"
        (_)* @function.inside
        "}")) @function.around

; match function.around for declarations with no body
(function_signature_item) @function.around

; join all adjacent comments into one
(comment)+ @comment.around

----------------------------------------

TITLE: Configuring Cargo.toml for Zed Extension Development
DESCRIPTION: This snippet shows the necessary configuration in Cargo.toml for developing a Zed extension. It specifies the dependency on zed_extension_api and sets the crate-type to cdylib for WebAssembly compilation.

LANGUAGE: toml
CODE:
[dependencies]
zed_extension_api = "0.3.0"

[lib]
crate-type = ["cdylib"]

----------------------------------------

TITLE: Defining Text Redactions in Tree-sitter
DESCRIPTION: Shows how to specify text redaction rules using Tree-sitter queries in the redactions.scm file. This example marks number and string values in key-value pairs and arrays for redaction in JSON.

LANGUAGE: scheme
CODE:
(pair value: (number) @redact)
(pair value: (string) @redact)
(array (number) @redact)
(array (string) @redact)

----------------------------------------

TITLE: Implementing a Zed Extension in Rust
DESCRIPTION: This code snippet demonstrates how to implement a Zed extension in Rust. It shows the creation of a custom extension type, implementation of the Extension trait, and registration of the extension using the provided macro.

LANGUAGE: rust
CODE:
use zed_extension_api as zed;

struct MyExtension {
    // ... state
}

impl zed::Extension for MyExtension {
    // ...
}

zed::register_extension!(MyExtension);

----------------------------------------

TITLE: Creating Code Outline Structure in Tree-sitter
DESCRIPTION: Illustrates how to define the structure for the code outline using Tree-sitter queries in the outline.scm file. This example captures object keys for the outline structure in JSON.

LANGUAGE: scheme
CODE:
(pair
  key: (string (string_content) @name)) @item

----------------------------------------

TITLE: Installing Xcode Command Line Tools on macOS
DESCRIPTION: Shows the terminal command to install Xcode command line tools, which are required for GPUI to work with Metal rendering on macOS.

LANGUAGE: sh
CODE:
xcode-select --install

----------------------------------------

TITLE: Extension Installation Paths
DESCRIPTION: File system paths where Zed extensions are installed on macOS and Linux systems

LANGUAGE: markdown
CODE:
~/Library/Application Support/Zed/extensions
$XDG_DATA_HOME/zed/extensions
~/.local/share/zed/extensions

----------------------------------------

TITLE: Configuring Process Attachment in Zed Debugger
DESCRIPTION: Configuration examples for attaching to processes with and without specific process IDs using JavaScript adapter.

LANGUAGE: json
CODE:
{
  "label": "Attach to Process",
  "adapter": "javascript",
  "request": {
    "attach": {
      "process_id": "12345"
    }
  }
}

LANGUAGE: json
CODE:
{
  "label": "Attach to Process",
  "adapter": "javascript",
  "request": {
    "attach": {}
  }
}

----------------------------------------

TITLE: Keyboard Shortcuts for Extension Gallery
DESCRIPTION: Command key combinations to open the Zed Extension Gallery on different operating systems

LANGUAGE: markdown
CODE:
cmd-shift-x (macOS)
ctrl-shift-x (Linux)

----------------------------------------

TITLE: Stylable Trait Definition in Rust
DESCRIPTION: Defines a trait for implementing stylable elements with associated types for custom styling. Allows elements to be modified with custom styles.

LANGUAGE: rust
CODE:
trait Stylable {
    type Style;

    fn with_style(self, style: Self::Style) -> Self;
}

----------------------------------------

TITLE: Configuring Cargo for Zed Extension in TOML
DESCRIPTION: This snippet demonstrates how to set up the Cargo.toml file for a Zed extension. It specifies the package name, version, edition, crate type, and dependencies, including the zed_extension_api.

LANGUAGE: toml
CODE:
[package]
name = "my-extension"
version = "0.0.1"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
zed_extension_api = "0.1.0"

----------------------------------------

TITLE: Running Theme Importer CLI Command in Shell
DESCRIPTION: Command to execute the theme importer tool using Cargo. Takes a source theme JSON file and outputs a converted theme file. Uses the theme_importer package to process the conversion.

LANGUAGE: shell
CODE:
cargo run -p theme_importer -- dark-plus-syntax-color-theme.json --output output-theme.json

----------------------------------------

TITLE: Setting Environment Variables for Zed CLI Launch
DESCRIPTION: Example showing how to set environment variables before launching Zed from command line, which will be inherited by the Zed process.

LANGUAGE: bash
CODE:
$ export MY_ENV_VAR=hello
$ zed .

----------------------------------------

TITLE: Running Neovim-backed Tests with Cargo
DESCRIPTION: Command to run tests with Neovim integration enabled. This is required when developing new tests that need to compare behavior with Neovim. Requires Neovim to be installed and available in the system PATH.

LANGUAGE: sh
CODE:
cargo test -p vim --features neovim test_visual_star_hash

----------------------------------------

TITLE: Configuring Xcode Command Line Tools Path on macOS
DESCRIPTION: Illustrates the command to ensure that the Xcode command line tools are using the newly installed copy of Xcode, which is necessary for GPUI to function correctly on macOS.

LANGUAGE: sh
CODE:
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

----------------------------------------

TITLE: Using Perplexity Command in Zed
DESCRIPTION: Example of how to use the /perplexity slash command in Zed's AI Assistant panel to query information

LANGUAGE: plaintext
CODE:
/perplexity What's the weather in Boulder, CO tomorrow evening?

----------------------------------------

TITLE: PostgreSQL Host Configuration
DESCRIPTION: Configuration settings for PostgreSQL host authentication methods.

LANGUAGE: conf
CODE:
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust