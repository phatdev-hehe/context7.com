TITLE: Loading Page Data in SvelteKit
DESCRIPTION: Defines a load function in +page.js to fetch data for a page component. The data is then available to the page via the data prop.

LANGUAGE: javascript
CODE:
/// file: src/routes/blog/[slug]/+page.js
/** @type {import('./$types').PageLoad} */
export function load({ params }) {
	return {
		post: {
			title: `Title for ${params.slug} goes here`,
			content: `Content for ${params.slug} goes here`
		}
	};
}

LANGUAGE: svelte
CODE:
<!--- file: src/routes/blog/[slug]/+page.svelte --->
<script>
	/** @type {import('./$types').PageProps} */
	let { data } = $props();
</script>

<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>

----------------------------------------

TITLE: Implementing Form Action Logic in SvelteKit
DESCRIPTION: Demonstrates a complete implementation of form actions including form data processing, database interaction, and returning action results.

LANGUAGE: javascript
CODE:
/// file: src/routes/login/+page.server.js
import * as db from '$lib/server/db';

/** @type {import('./$types').PageServerLoad} */
export async function load({ cookies }) {
	const user = await db.getUserFromSession(cookies.get('sessionid'));
	return { user };
}

/** @satisfies {import('./$types').Actions} */
export const actions = {
	login: async ({ cookies, request }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

		const user = await db.getUser(email);
		cookies.set('sessionid', await db.createSession(user), { path: '/' });

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};

----------------------------------------

TITLE: Basic Page Component Implementation in Svelte
DESCRIPTION: Demonstrates creating basic page components using +page.svelte files for home and about pages with navigation links between them.

LANGUAGE: svelte
CODE:
<!--- file: src/routes/+page.svelte --->
<h1>Hello and welcome to my site!</h1>
<a href="/about">About my site</a>

LANGUAGE: svelte
CODE:
<!--- file: src/routes/about/+page.svelte --->
<h1>About this site</h1>
<p>TODO...</p>
<a href="/">Home</a>

----------------------------------------

TITLE: Implementing Server-Side Handle Hook in SvelteKit
DESCRIPTION: This snippet demonstrates how to implement the 'handle' hook in SvelteKit for server-side request handling. It shows how to customize responses or bypass SvelteKit for specific routes.

LANGUAGE: javascript
CODE:
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	if (event.url.pathname.startsWith('/custom')) {
		return new Response('custom response');
	}

	const response = await resolve(event);
	return response;
}

----------------------------------------

TITLE: Initializing SvelteKit Project via CLI
DESCRIPTION: Commands to create a new SvelteKit project, install dependencies, and start the development server. The server will run on localhost:5173 after setup.

LANGUAGE: bash
CODE:
npx sv create my-app
cd my-app
npm install
npm run dev

----------------------------------------

TITLE: Configuring SvelteKit with Adapter in JavaScript
DESCRIPTION: Demonstrates the basic structure of a svelte.config.js file, showing how to import and configure an adapter for SvelteKit. The configuration includes TypeScript type declarations and the main configuration object with adapter setup.

LANGUAGE: javascript
CODE:
/// file: svelte.config.js
// @filename: ambient.d.ts
declare module '@sveltejs/adapter-auto' {
	const plugin: () => import('@sveltejs/kit').Adapter;
	export default plugin;
}

// @filename: index.js
// ---cut---
import adapter from '@sveltejs/adapter-auto';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter()
	}
};

export default config;

----------------------------------------

TITLE: Implementing Form Validation in SvelteKit Actions
DESCRIPTION: Demonstrates how to implement form validation in SvelteKit actions using the fail function to return validation errors and previously submitted form values.

LANGUAGE: javascript
CODE:
/// file: src/routes/login/+page.server.js
import { fail } from '@sveltejs/kit';
import * as db from '$lib/server/db';

/** @satisfies {import('./$types').Actions} */
export const actions = {
	login: async ({ cookies, request }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

		if (!email) {
			return fail(400, { email, missing: true });
		}

		const user = await db.getUser(email);

		if (!user || user.password !== db.hash(password)) {
			return fail(400, { email, incorrect: true });
		}

		cookies.set('sessionid', await db.createSession(user), { path: '/' });

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};

----------------------------------------

TITLE: Server-side Page Data Loading in SvelteKit
DESCRIPTION: Demonstrates a server-side load function in +page.server.js that fetches data from a database. This function only runs on the server and can access private resources.

LANGUAGE: javascript
CODE:
/// file: src/routes/blog/[slug]/+page.server.js
import * as db from '$lib/server/database';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	return {
		post: await db.getPost(params.slug)
	};
}

----------------------------------------

TITLE: Displaying Validation Errors in Svelte Form
DESCRIPTION: Shows how to display validation errors returned from a form action in a Svelte component, including error messages and preserving form values.

LANGUAGE: svelte
CODE:
/// file: src/routes/login/+page.svelte
<form method="POST" action="?/login">
	{#if form?.missing}<p class="error">The email field is required</p>{/if}
	{#if form?.incorrect}<p class="error">Invalid credentials!</p>{/if}
	<label>
		Email
		<input name="email" type="email" value={form?.email ?? ''}>
	</label>
	<label>
		Password
		<input name="password" type="password">
	</label>
	<button>Log in</button>
	<button formaction="?/register">Register</button>
</form>

----------------------------------------

TITLE: Defining Default Form Action in SvelteKit
DESCRIPTION: Shows how to define a default form action in a +page.server.js file. This action will handle POST requests from forms without a specific action attribute.

LANGUAGE: javascript
CODE:
/// file: src/routes/login/+page.server.js
/** @satisfies {import('./$types').Actions} */
export const actions = {
	default: async (event) => {
		// TODO log the user in
	}
};

----------------------------------------

TITLE: Using Progressive Enhancement with use:enhance in Svelte
DESCRIPTION: Shows how to use the use:enhance directive in Svelte to progressively enhance form submissions without full page reloads.

LANGUAGE: svelte
CODE:
/// file: src/routes/login/+page.svelte
<script>
	import { enhance } from '$app/forms';

	/** @type {import('./$types').PageProps} */
	let { form } = $props();
</script>

<form method="POST" use:enhance>
	<!-- form content -->
</form>

----------------------------------------

TITLE: Correct Load Function Implementation
DESCRIPTION: Demonstrates the proper way to handle data in a load function by returning it instead of setting global state.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageServerLoad} */
export async function load({ fetch }) {
	const response = await fetch('/api/user');

	return {
		user: await response.json()
	};
}

----------------------------------------

TITLE: Implementing Custom SvelteKit Adapter in JavaScript
DESCRIPTION: This code snippet demonstrates the structure and required methods for creating a custom SvelteKit adapter. It includes the main adapter function, the 'adapt' method for building, an optional 'emulate' method for development and preview, and a 'supports' object for handling file system operations.

LANGUAGE: javascript
CODE:
/** @param {AdapterSpecificOptions} options */
export default function (options) {
	/** @type {import('@sveltejs/kit').Adapter} */
	const adapter = {
		name: 'adapter-package-name',
		async adapt(builder) {
			// adapter implementation
		},
		async emulate() {
			return {
				async platform({ config, prerender }) {
					// the returned object becomes `event.platform` during dev, build and
					// preview. Its shape is that of `App.Platform`
				}
			}
		},
		supports: {
			read: ({ config, route }) => {
				// Return `true` if the route with the given `config` can use `read`
				// from `$app/server` in production, return `false` if it can't.
				// Or throw a descriptive error describing how to configure the deployment
			}
		}
	};

	return adapter;
}

----------------------------------------

TITLE: Layout Data Loading in SvelteKit
DESCRIPTION: Shows how to load data for a layout component using +layout.server.js. The loaded data is available to child components.

LANGUAGE: javascript
CODE:
/// file: src/routes/blog/[slug]/+layout.server.js
import * as db from '$lib/server/database';

/** @type {import('./$types').LayoutServerLoad} */
export async function load() {
	return {
		posts: await db.getPostSummaries()
	};
}

LANGUAGE: svelte
CODE:
<!--- file: src/routes/blog/[slug]/+layout.svelte --->
<script>
	/** @type {import('./$types').LayoutProps} */
	let { data, children } = $props();
</script>

<main>
	<!-- +page.svelte is `@render`ed here -->
	{@render children()}
</main>

<aside>
	<h2>More posts</h2>
	<ul>
		{#each data.posts as post}
			<li>
				<a href="/blog/{post.slug}">
					{post.title}
				</a>
			</li>
		{/each}
	</ul>
</aside>

----------------------------------------

TITLE: Setting Page Title in Svelte Component
DESCRIPTION: Demonstrates how to set a unique, descriptive title for each page in a SvelteKit application using the <svelte:head> element. This is important for route announcements and SEO.

LANGUAGE: svelte
CODE:
<svelte:head>
	<title>Todo List</title>
</svelte:head>

----------------------------------------

TITLE: Configuring SvelteKit Adapter in JavaScript
DESCRIPTION: Demonstrates how to configure a SvelteKit adapter in the svelte.config.js file. The code shows the basic structure for importing and configuring an adapter with custom options. This configuration is essential for preparing the app for deployment to specific platforms.

LANGUAGE: javascript
CODE:
import adapter from 'svelte-adapter-foo';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter({
			// adapter options go here
		})
	}
};

export default config;

----------------------------------------

TITLE: Implementing handleFetch Hook for Server-Side Fetch Requests in SvelteKit
DESCRIPTION: This snippet demonstrates the implementation of the 'handleFetch' hook in SvelteKit, allowing modification of fetch requests made inside server-side load or action functions.

LANGUAGE: javascript
CODE:
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').HandleFetch} */
export async function handleFetch({ request, fetch }) {
	if (request.url.startsWith('https://api.yourapp.com/')) {
		request = new Request(
			request.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),
			request
		);
	}

	return fetch(request);
}

----------------------------------------

TITLE: Error Handling in SvelteKit Load Functions
DESCRIPTION: Shows how to handle errors in load functions using the error helper from @sveltejs/kit.

LANGUAGE: javascript
CODE:
/// file: src/routes/admin/+layout.server.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').LayoutServerLoad} */
export function load({ locals }) {
	if (!locals.user) {
		error(401, 'not logged in');
	}

	if (!locals.user.isAdmin) {
		error(403, 'not an admin');
	}
}

----------------------------------------

TITLE: Implementing handleError Hook for Error Handling in SvelteKit
DESCRIPTION: This example shows how to implement the 'handleError' hook in SvelteKit for custom error handling and logging, including integration with error tracking services like Sentry.

LANGUAGE: javascript
CODE:
/// file: src/hooks.server.js
import * as Sentry from '@sentry/sveltekit';

Sentry.init({/*...*/})

/** @type {import('@sveltejs/kit').HandleServerError} */
export async function handleError({ error, event, status, message }) {
	const errorId = crypto.randomUUID();

	Sentry.captureException(error, {
		extra: { event, errorId, status }
	});

	return {
		message: 'Whoops!',
		errorId
	};
}

----------------------------------------

TITLE: Throwing Expected Errors in SvelteKit Page Load Function
DESCRIPTION: This snippet demonstrates how to throw an expected error using the 'error' helper from '@sveltejs/kit' in a page server load function. It checks if a post exists and throws a 404 error if not found.

LANGUAGE: javascript
CODE:
import { error } from '@sveltejs/kit';
import * as db from '$lib/server/database';

/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	const post = await db.getPost(params.slug);

	if (!post) {
		error(404, {
			message: 'Not found'
		});
	}

	return { post };
}

----------------------------------------

TITLE: Configuring Prerender Option in SvelteKit
DESCRIPTION: Enables or disables prerendering for routes. Can be set to true, false, or 'auto'. When true, the route will be prerendered at build time.

LANGUAGE: javascript
CODE:
export const prerender = true;

----------------------------------------

TITLE: Dynamic Page Loading with Parameters
DESCRIPTION: Shows how to implement dynamic page loading using +page.js for blog posts with error handling

LANGUAGE: javascript
CODE:
/// file: src/routes/blog/[slug]/+page.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageLoad} */
export function load({ params }) {
	if (params.slug === 'hello-world') {
		return {
			title: 'Hello world!',
			content: 'Welcome to our blog. Lorem ipsum dolor sit amet...'
		};
	}

	error(404, 'Not found');
}

----------------------------------------

TITLE: Custom Express Server Integration
DESCRIPTION: Example of creating a custom server using Express with SvelteKit's handler, including a separate healthcheck endpoint.

LANGUAGE: javascript
CODE:
import { handler } from './build/handler.js';
import express from 'express';

const app = express();

// add a route that lives separately from the SvelteKit app
app.get('/healthcheck', (req, res) => {
	res.end('ok');
});

// let SvelteKit handle everything else, including serving prerendered pages and static assets
app.use(handler);

app.listen(3000, () => {
	console.log('listening on port 3000');
});

----------------------------------------

TITLE: Adding Custom Data to Request with Locals in SvelteKit
DESCRIPTION: This example shows how to use the 'locals' object in SvelteKit to add custom data to the request, which can be accessed in handlers and server-side load functions.

LANGUAGE: javascript
CODE:
/// file: src/hooks.server.js
/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	event.locals.user = await getUserInformation(event.cookies.get('sessionid'));

	const response = await resolve(event);

	response.headers.set('x-custom-header', 'potato');

	return response;
}

----------------------------------------

TITLE: Handling Headers with Fetch API in SvelteKit Server Route
DESCRIPTION: Demonstrates how to work with request and response headers in a SvelteKit server route. Shows logging request headers and creating a JSON response with custom headers using the user-agent information.

LANGUAGE: javascript
CODE:
import { json } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export function GET({ request }) {
	// log all headers
	console.log(...request.headers);

	// create a JSON Response using a header we received
	return json({
		// retrieve a specific header
		userAgent: request.headers.get('user-agent')
	}, {
		// set a header on the response
		headers: { 'x-custom-header': 'potato' }
	});
}

----------------------------------------

TITLE: Making Fetch Requests in SvelteKit Load Functions
DESCRIPTION: Shows how to use the provided fetch function to make API requests within a load function.

LANGUAGE: javascript
CODE:
/// file: src/routes/items/[id]/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, params }) {
	const res = await fetch(`/api/items/${params.id}`);
	const item = await res.json();

	return { item };
}

----------------------------------------

TITLE: Implementing Redirects in SvelteKit Form Actions
DESCRIPTION: Demonstrates how to implement redirects in SvelteKit form actions using the redirect function from @sveltejs/kit.

LANGUAGE: javascript
CODE:
// @errors: 2345
/// file: src/routes/login/+page.server.js
import { fail, redirect } from '@sveltejs/kit';
import * as db from '$lib/server/db';

/** @satisfies {import('./$types').Actions} */
export const actions = {
	login: async ({ cookies, request, url }) => {
		const data = await request.formData();
		const email = data.get('email');
		const password = data.get('password');

		const user = await db.getUser(email);
		if (!user) {
			return fail(400, { email, missing: true });
		}

		if (user.password !== db.hash(password)) {
			return fail(400, { email, incorrect: true });
		}

		cookies.set('sessionid', await db.createSession(user), { path: '/' });

		if (url.searchParams.has('redirectTo')) {
			redirect(303, url.searchParams.get('redirectTo'));
		}

		return { success: true };
	},
	register: async (event) => {
		// TODO register the user
	}
};

----------------------------------------

TITLE: Implementing Offline-Capable Service Worker
DESCRIPTION: Complete implementation of a service worker that caches built app assets and static files eagerly, while caching other requests as they occur. Enables offline functionality for previously visited pages.

LANGUAGE: javascript
CODE:
// @errors: 2339
/// <reference types="@sveltejs/kit" />
import { build, files, version } from '$service-worker';

const CACHE = `cache-${version}`;

const ASSETS = [
	...build,
	...files
];

self.addEventListener('install', (event) => {
	async function addFilesToCache() {
		const cache = await caches.open(CACHE);
		await cache.addAll(ASSETS);
	}

	event.waitUntil(addFilesToCache());
});

self.addEventListener('activate', (event) => {
	async function deleteOldCaches() {
		for (const key of await caches.keys()) {
			if (key !== CACHE) await caches.delete(key);
		}
	}

	event.waitUntil(deleteOldCaches());
});

self.addEventListener('fetch', (event) => {
	if (event.request.method !== 'GET') return;

	async function respond() {
		const url = new URL(event.request.url);
		const cache = await caches.open(CACHE);

		if (ASSETS.includes(url.pathname)) {
			const response = await cache.match(url.pathname);

			if (response) {
				return response;
			}
		}

		try {
			const response = await fetch(event.request);

			if (!(response instanceof Response)) {
				throw new Error('invalid response from fetch');
			}

			if (response.status === 200) {
				cache.put(event.request, response.clone());
			}

			return response;
		} catch (err) {
			const response = await cache.match(event.request);

			if (response) {
				return response;
			}

			throw err;
		}
	}

	event.respondWith(respond());
});

----------------------------------------

TITLE: Redirects in SvelteKit Load Functions
DESCRIPTION: Demonstrates how to perform redirects in load functions using the redirect helper from @sveltejs/kit.

LANGUAGE: javascript
CODE:
/// file: src/routes/user/+layout.server.js
import { redirect } from '@sveltejs/kit';

/** @type {import('./$types').LayoutServerLoad} */
export function load({ locals }) {
	if (!locals.user) {
		redirect(307, '/login');
	}
}

----------------------------------------

TITLE: Defining Named Form Actions in SvelteKit
DESCRIPTION: Illustrates how to define multiple named actions in a +page.server.js file. This allows for different actions to be triggered based on the form's action attribute.

LANGUAGE: javascript
CODE:
/// file: src/routes/login/+page.server.js
/** @satisfies {import('./$types').Actions} */
export const actions = {
	login: async (event) => {
		// TODO log the user in
	},
	register: async (event) => {
		// TODO register the user
	}
};

----------------------------------------

TITLE: Configuring SvelteKit for Cloudflare Pages Deployment
DESCRIPTION: This snippet shows how to configure the svelte.config.js file to use the Cloudflare adapter. It includes options for customizing routes and platform proxy settings.

LANGUAGE: javascript
CODE:
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-cloudflare';

export default {
	kit: {
		adapter: adapter({
			// See below for an explanation of these options
			routes: {
				include: ['/*'],
				exclude: ['<all>']
			},
			platformProxy: {
				configPath: undefined,
				environment: undefined,
				persist: undefined
			}
		})
	}
};

----------------------------------------

TITLE: Context-Based State Management in SvelteKit Layout
DESCRIPTION: Shows how to properly manage state using Svelte's context API in a layout component.

LANGUAGE: svelte
CODE:
<script>
	import { setContext } from 'svelte';

	/** @type {import('./$types').LayoutProps} */
	let { data } = $props();

	// Pass a function referencing our state
	// to the context for child components to access
	setContext('user', () => data.user);
</script>

----------------------------------------

TITLE: Configuring SvelteKit Node Adapter
DESCRIPTION: Basic configuration for setting up adapter-node in a SvelteKit project's svelte.config.js file.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-node';

export default {
	kit: {
		adapter: adapter()
	}
};

----------------------------------------

TITLE: Configuring SvelteKit Vercel Adapter
DESCRIPTION: Basic setup for adapter-vercel in svelte.config.js file. Shows how to initialize and configure the Vercel adapter with optional settings.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-vercel';

export default {
	kit: {
		adapter: adapter({
			// see below for options that can be set here
		})
	}
};

----------------------------------------

TITLE: Configuring adapter-static in SvelteKit
DESCRIPTION: Basic configuration setup for adapter-static in svelte.config.js showing default options including pages, assets, fallback, precompress and strict settings.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-static';

export default {
	kit: {
		adapter: adapter({
			// default options are shown. On some platforms
			// these options are set automatically — see below
			pages: 'build',
			assets: 'build',
			fallback: undefined,
			precompress: false,
			strict: true
		})
	}
};

----------------------------------------

TITLE: Accessing Parent Data in SvelteKit Load Functions
DESCRIPTION: Demonstrates how to access data from a parent load function using await parent().

LANGUAGE: javascript
CODE:
/// file: src/routes/+layout.js
/** @type {import('./$types').LayoutLoad} */
export function load() {
	return { a: 1 };
}

LANGUAGE: javascript
CODE:
/// file: src/routes/abc/+layout.js
/** @type {import('./$types').LayoutLoad} */
export async function load({ parent }) {
	const { a } = await parent();
	return { b: a + 1 };
}

LANGUAGE: javascript
CODE:
/// file: src/routes/abc/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ parent }) {
	const { a, b } = await parent();
	return { c: a + b };
}

LANGUAGE: svelte
CODE:
<!--- file: src/routes/abc/+page.svelte --->
<script>
	/** @type {import('./$types').PageProps} */
	let { data } = $props();
</script>

<!-- renders `1 + 2 = 3` -->
<p>{data.a} + {data.b} = {data.c}</p>

----------------------------------------

TITLE: Displaying SvelteKit Project Structure in Bash
DESCRIPTION: This snippet shows the typical directory and file structure of a SvelteKit project, including the src directory, configuration files, and other common project files.

LANGUAGE: bash
CODE:
my-project/
├ src/
│ ├ lib/
│ │ ├ server/
│ │ │ └ [your server-only lib files]
│ │ └ [your lib files]
│ ├ params/
│ │ └ [your param matchers]
│ ├ routes/
│ │ └ [your routes]
│ ├ app.html
│ ├ error.html
│ ├ hooks.client.js
│ ├ hooks.server.js
│ └ service-worker.js
├ static/
│ └ [your static assets]
├ tests/
│ └ [your tests]
├ package.json
├ svelte.config.js
├ tsconfig.json
└ vite.config.js

----------------------------------------

TITLE: Defining RequestHandler Type for Route Parameters in SvelteKit (JavaScript)
DESCRIPTION: Demonstrates how to manually define types for route parameters in a SvelteKit RequestHandler. This approach is cumbersome and less portable.

LANGUAGE: javascript
CODE:
/** @type {import('@sveltejs/kit').RequestHandler<{
    foo: string;
    bar: string;
    baz: string
  }>} */
export async function GET({ params }) {
	// ...
}

----------------------------------------

TITLE: Server-Side Rendering Configuration
DESCRIPTION: Controls server-side rendering behavior. When set to false, renders an empty shell page instead of server-rendering the content.

LANGUAGE: javascript
CODE:
export const ssr = false;
// If both `ssr` and `csr` are `false`, nothing will be rendered!

----------------------------------------

TITLE: Using Generated Types for RequestHandler in SvelteKit (JavaScript)
DESCRIPTION: Shows how to use SvelteKit's generated types for route parameters in a RequestHandler, which is more maintainable and automatically updates with route changes.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').RequestHandler} */
export async function GET({ params }) {
	// ...
}

----------------------------------------

TITLE: Using Named Actions in Svelte Forms
DESCRIPTION: Shows how to use named actions in Svelte forms by adding a query parameter to the action attribute. Also demonstrates the use of the formaction attribute for buttons.

LANGUAGE: svelte
CODE:
/// file: src/routes/login/+page.svelte
<form method="POST" action="?/login">
	<label>
		Email
		<input name="email" type="email">
	</label>
	<label>
		Password
		<input name="password" type="password">
	</label>
	<button>Log in</button>
	<button formaction="?/register">Register</button>
</form>

----------------------------------------

TITLE: Installing and Initializing SvelteKit Application using sv CLI
DESCRIPTION: Command sequence for creating a new SvelteKit application using the 'sv' CLI tool. Creates a new project directory, installs dependencies, and starts the development server.

LANGUAGE: bash
CODE:
npx sv create my-app
cd my-app
npm install
npm run dev

----------------------------------------

TITLE: Configuring SvelteKit Netlify Adapter
DESCRIPTION: Basic configuration of the Netlify adapter in svelte.config.js with default options for edge and split functionality. The adapter can be configured to use either standard Node-based functions or Netlify Edge Functions.

LANGUAGE: javascript
CODE:
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-netlify';

export default {
	kit: {
		// default options are shown
		adapter: adapter({
			// if true, will create a Netlify Edge Function rather
			// than using standard Node-based functions
			edge: false,

			// if true, will split your app into multiple functions
			// instead of creating a single one for the entire app.
			// if `edge` is true, this option cannot be used
			split: false
		})
	}
};

----------------------------------------

TITLE: Configuring vitePreprocess in SvelteKit
DESCRIPTION: This snippet demonstrates how to set up vitePreprocess in a SvelteKit project's svelte.config.js file. vitePreprocess allows the use of various CSS flavors supported by Vite, such as PostCSS, SCSS, Less, Stylus, and SugarSS.

LANGUAGE: javascript
CODE:
// svelte.config.js
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

export default {
  preprocess: [vitePreprocess()]
};

----------------------------------------

TITLE: Streaming with Promises in SvelteKit Server Load Functions
DESCRIPTION: Shows how to use promises for streaming data in server load functions.

LANGUAGE: javascript
CODE:
/// file: src/routes/blog/[slug]/+page.server.js
/** @type {import('./$types').PageServerLoad} */
export async function load({ params }) {
	return {
		// make sure the `await` happens at the end, otherwise we
		// can't start loading comments until we've loaded the post
		comments: loadComments(params.slug),
		post: await loadPost(params.slug)
	};
}

LANGUAGE: svelte
CODE:
<!--- file: src/routes/blog/[slug]/+page.svelte --->
<script>
	/** @type {import('./$types').PageProps} */
	let { data } = $props();
</script>

<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>

{#await data.comments}
	Loading comments...
{:then comments}
	{#each comments as comment}
		<p>{comment.content}</p>
	{/each}
{:catch error}
	<p>error loading comments: {error.message}</p>
{/await}

----------------------------------------

TITLE: Loading Data for Shallow Routing in SvelteKit
DESCRIPTION: This code snippet shows how to implement shallow routing for a photo gallery. It uses preloadData to fetch data for a photo detail view without navigating, and pushState to update the URL and render the detail view in a modal.

LANGUAGE: svelte
CODE:
<script>
	import { preloadData, pushState, goto } from '$app/navigation';
	import { page } from '$app/state';
	import Modal from './Modal.svelte';
	import PhotoPage from './[id]/+page.svelte';

	let { data } = $props();
</script>

{#each data.thumbnails as thumbnail}
	<a
		href="/photos/{thumbnail.id}"
		onclick={async (e) => {
			if (innerWidth < 640        // bail if the screen is too small
				|| e.shiftKey             // or the link is opened in a new window
				|| e.metaKey || e.ctrlKey // or a new tab (mac: metaKey, win/linux: ctrlKey)
				// should also consider clicking with a mouse scroll wheel
			) return;

			// prevent navigation
			e.preventDefault();

			const { href } = e.currentTarget;

			// run `load` functions (or rather, get the result of the `load` functions
			// that are already running because of `data-sveltekit-preload-data`)
			const result = await preloadData(href);

			if (result.type === 'loaded' && result.status === 200) {
				pushState(href, { selected: result.data });
			} else {
				// something bad happened! try navigating
				goto(href);
			}
		}}
	>
		<img alt={thumbnail.alt} src={thumbnail.src} />
	</a>
{/each}

{#if page.state.selected}
	<Modal onclose={() => history.back()}>
		<!-- pass page data to the +page.svelte component,
		     just like SvelteKit would on navigation -->
		<PhotoPage data={page.state.selected} />
	</Modal>
{/if}

----------------------------------------

TITLE: Rest Parameter Data Object Example
DESCRIPTION: Shows the resulting parameter object when accessing a route with rest parameters.

LANGUAGE: javascript
CODE:
{
	org: 'sveltejs',
	repo: 'kit',
	branch: 'main',
	file: 'documentation/docs/04-advanced-routing.md'
}

----------------------------------------

TITLE: Customizing use:enhance Behavior in Svelte
DESCRIPTION: Demonstrates how to customize the behavior of use:enhance in Svelte, including handling form submission and processing action results.

LANGUAGE: svelte
CODE:
/// file: src/routes/login/+page.svelte
<script>
	import { enhance, applyAction } from '$app/forms';

	/** @type {import('./$types').PageProps} */
	let { form } = $props();
</script>

<form
	method="POST"
	use:enhance={({ formElement, formData, action, cancel }) => {
		return async ({ result }) => {
			if (result.type === 'redirect') {
				goto(result.location);
			} else {
				await applyAction(result);
			}
		};
	}}
>
	<!-- form content -->
</form>

----------------------------------------

TITLE: Incorrect Server-Side State Management Example
DESCRIPTION: Demonstrates an anti-pattern of using shared state variables on the server, which can lead to data leaks between users.

LANGUAGE: javascript
CODE:
let user;

/** @type {import('./$types').PageServerLoad} */
export function load() {
	return { user };
}

/** @satisfies {import('./$types').Actions} */
export const actions = {
	default: async ({ request }) => {
		const data = await request.formData();

		// NEVER DO THIS!
		user = {
			name: data.get('name'),
			embarrassingSecret: data.get('secret')
		};
	}
}

----------------------------------------

TITLE: Using Generated Types for PageLoad in SvelteKit (JavaScript)
DESCRIPTION: Demonstrates the usage of SvelteKit's generated types for the PageLoad function, providing type safety for route parameters and other load function arguments.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageLoad} */
export async function load({ params, fetch }) {
	// ...
}

----------------------------------------

TITLE: Configuring Default Preload Behavior in SvelteKit HTML Template
DESCRIPTION: Demonstrates how to set up default preload behavior for all links by adding the data-sveltekit-preload-data attribute to the body element in the app.html template.

LANGUAGE: html
CODE:
<body data-sveltekit-preload-data="hover">
	<div style="display: contents">%sveltekit.body%</div>
</body>

----------------------------------------

TITLE: Updating Error Handling in SvelteKit
DESCRIPTION: Changes to error handling syntax where error() and redirect() functions no longer need to be thrown.

LANGUAGE: javascript
CODE:
import { error } from '@sveltejs/kit'

// Old way
throw error(500, 'something went wrong');

// New way
error(500, 'something went wrong');

----------------------------------------

TITLE: Disabling SSR in SvelteKit Root Layout
DESCRIPTION: Configures the root layout to disable server-side rendering, effectively turning the app into a client-rendered SPA.

LANGUAGE: javascript
CODE:
export const ssr = false;

----------------------------------------

TITLE: Advanced Node Adapter Configuration
DESCRIPTION: Extended configuration showing all available adapter options including output directory, precompression, and environment variable prefix settings.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-node';

export default {
	kit: {
		adapter: adapter({
			// default options are shown
			out: 'build',
			precompress: true,
			envPrefix: ''
		})
	}
};

----------------------------------------

TITLE: Handling Form Action Results in Svelte
DESCRIPTION: Shows how to handle the results of form actions in a Svelte component, including displaying success messages and accessing user data.

LANGUAGE: svelte
CODE:
<!--- file: src/routes/login/+page.svelte --->
<script>
	/** @type {import('./$types').PageProps} */
	let { data, form } = $props();
</script>

{#if form?.success}
	<!-- this message is ephemeral; it exists because the page was rendered in
	       response to a form submission. it will vanish if the user reloads -->
	<p>Successfully logged in! Welcome back, {data.user.name}</p>
{/if}

----------------------------------------

TITLE: Configuring launch.json for VSCode Debugging in SvelteKit
DESCRIPTION: This JSON configuration sets up a launch configuration for debugging a SvelteKit project in Visual Studio Code. It defines a command to run the development server and specifies the debug configuration type.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"command": "npm run dev",
			"name": "Run development server",
			"request": "launch",
			"type": "node-terminal"
		}
	]
}

----------------------------------------

TITLE: Importing Component Using $lib Alias in SvelteKit
DESCRIPTION: Shows how to import and use a component from the lib directory using the $lib alias in a SvelteKit route component.

LANGUAGE: svelte
CODE:
<!--- file: src/routes/+page.svelte --->
<script>
    import Component from '$lib/Component.svelte';
</script>

<Component />

----------------------------------------

TITLE: Running Vite Development Commands in SvelteKit
DESCRIPTION: Core Vite CLI commands used in SvelteKit projects for development, building, and previewing applications. These commands are typically run through npm scripts.

LANGUAGE: shell
CODE:
vite dev\nvite build\nvite preview

----------------------------------------

TITLE: Maintaining Focus State During SvelteKit Navigation
DESCRIPTION: Demonstrates how to maintain focus on form elements during navigation using the data-sveltekit-keepfocus attribute.

LANGUAGE: html
CODE:
<form data-sveltekit-keepfocus>
	<input type="text" name="query">
</form>

----------------------------------------

TITLE: Dynamically Setting Language Attribute in SvelteKit
DESCRIPTION: Shows how to use the handle hook to dynamically set the lang attribute based on the current page's language. This example uses a placeholder function get_lang to determine the language.

LANGUAGE: javascript
CODE:
/**
 * @param {import('@sveltejs/kit').RequestEvent} event
 */
function get_lang(event) {
	return 'en';
}

/** @type {import('@sveltejs/kit').Handle} */
export function handle({ event, resolve }) {
	return resolve(event, {
		transformPageChunk: ({ html }) => html.replace('%lang%', get_lang(event))
	});
}

----------------------------------------

TITLE: Configuring SvelteKit Adapter for Cloudflare Workers
DESCRIPTION: Basic setup of the Cloudflare Workers adapter in the SvelteKit configuration file. Demonstrates how to import and configure the adapter with optional settings.

LANGUAGE: javascript
CODE:
// @errors: 2307
import adapter from '@sveltejs/adapter-cloudflare-workers';

export default {
	kit: {
		adapter: adapter({
			// see below for options that can be set here
		})
	}
};

----------------------------------------

TITLE: Nested Preload Control in SvelteKit
DESCRIPTION: Shows how to selectively disable preloading for specific sections while maintaining it for others using nested data-sveltekit-preload-data attributes.

LANGUAGE: html
CODE:
<div data-sveltekit-preload-data>
	<!-- these links will be preloaded -->
	<a href="/a">a</a>
	<a href="/b">b</a>
	<a href="/c">c</a>

	<div data-sveltekit-preload-data="false">
		<!-- these links will NOT be preloaded -->
		<a href="/d">d</a>
		<a href="/e">e</a>
		<a href="/f">f</a>
	</div>
</div>

----------------------------------------

TITLE: Defining Server-Only Module in SvelteKit
DESCRIPTION: Example of creating a server-only module containing sensitive data. This module can only be imported by server-side code.

LANGUAGE: javascript
CODE:
// @errors: 7005
/// file: $lib/server/secrets.js
export const atlantisCoordinates = [/* redacted */];

----------------------------------------

TITLE: Creating Reusable Component with SvelteKit
DESCRIPTION: Demonstrates creating a reusable component in the src/lib directory that can be imported using the $lib alias.

LANGUAGE: svelte
CODE:
<!--- file: src/lib/Component.svelte --->
A reusable component

----------------------------------------

TITLE: Generating Dynamic Sitemap XML in SvelteKit
DESCRIPTION: Creates a dynamic sitemap.xml file using a SvelteKit server route. This helps search engines prioritize pages within your site, particularly for large websites.

LANGUAGE: javascript
CODE:
export async function GET() {
	return new Response(
		`
		<?xml version="1.0" encoding="UTF-8" ?>
		<urlset
			xmlns="https://www.sitemaps.org/schemas/sitemap/0.9"
			xmlns:xhtml="https://www.w3.org/1999/xhtml"
			xmlns:mobile="https://www.google.com/schemas/sitemap-mobile/1.0"
			xmlns:news="https://www.google.com/schemas/sitemap-news/0.9"
			xmlns:image="https://www.google.com/schemas/sitemap-image/1.1"
			xmlns:video="https://www.google.com/schemas/sitemap-video/1.1"
		>
			<!-- <url> elements go here -->
		</urlset>`.trim(),
		{
			headers: {
				'Content-Type': 'application/xml'
			}
		}
	);
}

----------------------------------------

TITLE: Setting Tap Preload for Time-Sensitive Data in SvelteKit
DESCRIPTION: Shows how to configure a link to only preload data on tap/click rather than hover, useful for frequently updating content.

LANGUAGE: html
CODE:
<a data-sveltekit-preload-data="tap" href="/stonks">
	Get current stonk values
</a>

----------------------------------------

TITLE: Accessing PageProps in SvelteKit Component (Svelte)
DESCRIPTION: Shows how to use the PageProps type in a Svelte component to type-check the data and form properties. This example uses the newer $props() syntax introduced in SvelteKit 2.16.0.

LANGUAGE: svelte
CODE:
<script>
	/** @type {import('./$types').PageProps} */
	let { data, form } = $props();
</script>

----------------------------------------

TITLE: Setting Headers in SvelteKit Load Functions
DESCRIPTION: Shows how to set response headers using the setHeaders function within a load function.

LANGUAGE: javascript
CODE:
// @errors: 2322 1360
/// file: src/routes/products/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, setHeaders }) {
	const url = `https://cms.example.com/products.json`;
	const response = await fetch(url);

	// Headers are only set during SSR, caching the page's HTML
	// for the same length of time as the underlying data.
	setHeaders({
		age: response.headers.get('age'),
		'cache-control': response.headers.get('cache-control')
	});

	return response.json();
}

----------------------------------------

TITLE: Configuring SvelteKit Static Adapter with Fallback
DESCRIPTION: Configuration for @sveltejs/adapter-static that enables SPA functionality through a fallback page mechanism. Essential for deployments without server-side logic.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-static';

export default {
	kit: {
		adapter: adapter({
			fallback: '200.html' // may differ from host to host
		})
	}
};

----------------------------------------

TITLE: Importing SvelteKit Path Module
DESCRIPTION: Example of importing the $app/paths module in a SvelteKit application. This is a core module that provides path-related utilities.

LANGUAGE: javascript
CODE:
import { paths } from '$app/paths';

----------------------------------------

TITLE: Extending Error Interface for Type Safety in SvelteKit
DESCRIPTION: This TypeScript declaration extends the App.Error interface to include additional properties for custom error objects in a SvelteKit application.

LANGUAGE: typescript
CODE:
declare global {
	namespace App {
		interface Error {
			code: string;
			id: string;
		}
	}
}

export {};

----------------------------------------

TITLE: Systemd Service Configuration
DESCRIPTION: Configuration for running a SvelteKit app as a systemd service with idle timeout settings.

LANGUAGE: ini
CODE:
[Service]
Environment=NODE_ENV=production IDLE_TIMEOUT=60
ExecStart=/usr/bin/node /usr/bin/myapp/build

----------------------------------------

TITLE: Handling Cookies in SvelteKit Server Load Functions
DESCRIPTION: Demonstrates how to get and set cookies within a server load function.

LANGUAGE: javascript
CODE:
/// file: src/routes/+layout.server.js
import * as db from '$lib/server/database';

/** @type {import('./$types').LayoutServerLoad} */
export async function load({ cookies }) {
	const sessionid = cookies.get('sessionid');

	return {
		user: await db.getUser(sessionid)
	};
}

----------------------------------------

TITLE: Systemd Socket Configuration
DESCRIPTION: Socket unit configuration for systemd to enable socket activation for the SvelteKit application.

LANGUAGE: ini
CODE:
[Socket]
ListenStream=3000

[Install]
WantedBy=sockets.target

----------------------------------------

TITLE: Implementing DOM State Snapshot in SvelteKit Component
DESCRIPTION: Example of implementing snapshot functionality in a SvelteKit component to preserve form input state across navigations. The snapshot interface captures the current comment value before navigation and restores it when returning to the page. The captured data must be JSON-serializable for persistence in sessionStorage.

LANGUAGE: svelte
CODE:
<!--- file: +page.svelte --->
<script>
	let comment = $state('');

	/** @type {import('./$types').Snapshot<string>} */
	export const snapshot = {
		capture: () => comment,
		restore: (value) => comment = value
	};
</script>

<form method="POST">
	<label for="comment">Comment</label>
	<textarea id="comment" bind:value={comment} />
	<button>Post comment</button>
</form>

----------------------------------------

TITLE: Using Public Exports in Svelte Component
DESCRIPTION: Example of a Svelte component importing and using a public export from a module that also imports server-only code. This demonstrates how SvelteKit prevents indirect exposure of sensitive data.

LANGUAGE: html
CODE:
/// file: src/routes/+page.svelte
<script>
	import { add } from './utils.js';
</script>

----------------------------------------

TITLE: Implementing AMP Transformation in SvelteKit Hooks
DESCRIPTION: Uses the SvelteKit handle hook to transform HTML for AMP compatibility. It also includes an optional step to remove unused CSS using the dropcss package.

LANGUAGE: javascript
CODE:
import * as amp from '@sveltejs/amp';

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	let buffer = '';
	return await resolve(event, {
		transformPageChunk: ({ html, done }) => {
			buffer += html;
			if (done) return amp.transform(buffer);
		}
	});
}

LANGUAGE: javascript
CODE:
import * as amp from '@sveltejs/amp';
import dropcss from 'dropcss';

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	let buffer = '';

	return await resolve(event, {
		transformPageChunk: ({ html, done }) => {
			buffer += html;

			if (done) {
				let css = '';
				const markup = amp
					.transform(buffer)
					.replace('⚡', 'amp') // dropcss can't handle this character
					.replace(/<style amp-custom([^>]*?)>([^]+?)<\/style>/, (match, attributes, contents) => {
						css = contents;
						return `<style amp-custom${attributes}></style>`;
					});

				css = dropcss({ css, html: markup }).css;
				return markup.replace('</style>', `${css}</style>`);
			}
		}
	});
}

----------------------------------------

TITLE: Setting Prerender Option in SvelteKit Layout
DESCRIPTION: Configuration for the prerender option in the root layout file to enable static site generation.

LANGUAGE: javascript
CODE:
// This can be false if you're using a fallback (i.e. SPA mode)
export const prerender = true;

----------------------------------------

TITLE: Conditional Code Execution During SvelteKit Build Process
DESCRIPTION: This snippet demonstrates how to prevent certain code from executing during the build process in SvelteKit. It uses the 'building' flag from '$app/environment' to conditionally run setup code only when not building.

LANGUAGE: javascript
CODE:
import { building } from '$app/environment';
import { setupMyDatabase } from '$lib/server/database';

if (!building) {
	setupMyDatabase();
}

export function load() {
	// ...
}

----------------------------------------

TITLE: GitHub Pages Configuration for SvelteKit
DESCRIPTION: Extended configuration for deploying SvelteKit static sites to GitHub Pages, including base path and fallback page settings.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-static';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	kit: {
		adapter: adapter({
			fallback: '404.html'
		}),
		paths: {
			base: process.argv.includes('dev') ? '' : process.env.BASE_PATH
		}
	}
};

export default config;

----------------------------------------

TITLE: Rendering Error Message in SvelteKit Error Component
DESCRIPTION: This Svelte component shows how to access and display the error message from the 'page' store in a SvelteKit error component.

LANGUAGE: svelte
CODE:
<script>
	import { page } from '$app/state';
</script>

<h1>{page.error.message}</h1>

----------------------------------------

TITLE: Handling Top-level Promises in Load Functions
DESCRIPTION: Changes to promise handling in load functions, requiring explicit await for top-level promises.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageServerLoad} */
export async function load({ fetch }) {
	const response = await fetch(url).then(r => r.json());
	return { response }
}

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageServerLoad} */
export async function load({ fetch }) {
	const [a, b] = await Promise.all([
	  fetch(url1).then(r => r.json()),
	  fetch(url2).then(r => r.json()),
	]);
	return { a, b };
}

----------------------------------------

TITLE: Forcing Full Page Reload in SvelteKit Navigation
DESCRIPTION: Example of using data-sveltekit-reload attribute to force a full page reload instead of SvelteKit's default client-side navigation.

LANGUAGE: html
CODE:
<a data-sveltekit-reload href="/path">Path</a>

----------------------------------------

TITLE: Migrating from $app/stores to $app/state
DESCRIPTION: Update to use new $app/state module instead of deprecated $app/stores, removing $ prefixes from usage sites.

LANGUAGE: svelte
CODE:
<script>
	import { page } from '$app/state';
</script>

{page.data}

----------------------------------------

TITLE: Setting Language Attribute in SvelteKit HTML Template
DESCRIPTION: Demonstrates how to set the lang attribute in the HTML template (app.html) for multi-language support in SvelteKit applications.

LANGUAGE: html
CODE:
<html lang="%lang%">

----------------------------------------

TITLE: Accessing Dynamic Private Environment Variables in SvelteKit
DESCRIPTION: Demonstrates how to import and use dynamic private environment variables from the $env/dynamic/private module. This code can only be used server-side and cannot be used during prerendering. The variables must not begin with publicPrefix and must start with privatePrefix if configured.

LANGUAGE: typescript
CODE:
import { env } from '$env/dynamic/private';
console.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);

----------------------------------------

TITLE: Basic Package Exports Configuration
DESCRIPTION: Configures package entry points with TypeScript types and Svelte component support.

LANGUAGE: json
CODE:
{
	"exports": {
		".": {
			"types": "./dist/index.d.ts",
			"svelte": "./dist/index.js"
		}
	}
}

----------------------------------------

TITLE: Declaring Empty Environment Variables in .env File
DESCRIPTION: Shows how to declare environment variables in a .env file, even if they don't have a value initially. This is important for referencing variables that may be set during deployment.

LANGUAGE: plaintext
CODE:
MY_FEATURE_FLAG=""

----------------------------------------

TITLE: Installing pnpm for SvelteKit Development
DESCRIPTION: Command to install pnpm globally using npm. pnpm is required for managing the monorepo structure of SvelteKit.

LANGUAGE: bash
CODE:
npm i -g pnpm

----------------------------------------

TITLE: Importing Dynamic Public Environment Variables in SvelteKit TypeScript
DESCRIPTION: Shows how to import and use dynamic public environment variables in a SvelteKit application. Only includes variables that begin with PUBLIC_ prefix by default. These variables are sent from server to client, which can increase network request size. Cannot be used during prerendering.

LANGUAGE: typescript
CODE:
import { env } from '$env/dynamic/public';
console.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);

----------------------------------------

TITLE: Adding Custom Properties to SvelteKit Error Object
DESCRIPTION: This example shows how to add extra properties to the error object when throwing an expected error in SvelteKit.

LANGUAGE: javascript
CODE:
error(404, {
	message: 'Not found',
	code: 'NOT_FOUND'
});

----------------------------------------

TITLE: Importing Public Environment Variables in SvelteKit TypeScript
DESCRIPTION: Shows how to import public environment variables from the $env/static/public module. Only variables prefixed with PUBLIC_ (configurable via kit.env.publicPrefix) are accessible. Values are statically replaced at build time for security.

LANGUAGE: typescript
CODE:
import { PUBLIC_BASE_URL } from '$env/static/public';

----------------------------------------

TITLE: Customizing Focus Management in SvelteKit
DESCRIPTION: Shows how to use the afterNavigate hook to customize focus management after navigation. This example focuses on an element with the class 'focus-me'.

LANGUAGE: javascript
CODE:
import { afterNavigate } from '$app/navigation';

afterNavigate(() => {
	/** @type {HTMLElement | null} */
	const to_focus = document.querySelector('.focus-me');
	to_focus?.focus();
});

----------------------------------------

TITLE: Configuring TypeScript Types for Cloudflare Platform in SvelteKit
DESCRIPTION: This snippet shows how to extend the global App namespace in the app.d.ts file to include types for Cloudflare-specific features like KV and Durable Object namespaces.

LANGUAGE: typescript
CODE:
/// file: src/app.d.ts
+++import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';+++

declare global {
	namespace App {
		interface Platform {
+++			env?: {
				YOUR_KV_NAMESPACE: KVNamespace;
				YOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;
			};+++
		}
	}
}

export {};

----------------------------------------

TITLE: Replacing History State in SvelteKit Navigation
DESCRIPTION: Shows how to prevent creating new browser history entries during navigation by using the data-sveltekit-replacestate attribute.

LANGUAGE: html
CODE:
<a data-sveltekit-replacestate href="/path">Path</a>

----------------------------------------

TITLE: Enabling Node.js Compatibility for Cloudflare Workers
DESCRIPTION: This configuration snippet shows how to enable Node.js compatibility for Cloudflare Workers by adding a compatibility flag in the wrangler.jsonc file.

LANGUAGE: json
CODE:
/// file: wrangler.jsonc
{
	"compatibility_flags": ["nodejs_compat"]
}

----------------------------------------

TITLE: Creating a SvelteKit Project using create-svelte in Bash
DESCRIPTION: Commands to initialize a new SvelteKit project using create-svelte. It shows how to create a project in the current directory or in a new directory.

LANGUAGE: bash
CODE:
# create a new project in the current directory
npm init svelte

# create a new project in my-app
npm init svelte my-app

----------------------------------------

TITLE: TypeScript Platform Types Configuration
DESCRIPTION: TypeScript type definitions for Cloudflare Workers platform APIs in SvelteKit application.

LANGUAGE: typescript
CODE:
import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';

declare global {
	namespace App {
		interface Platform {
			env?: {
				YOUR_KV_NAMESPACE: KVNamespace;
				YOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;
			};
		}
	}
}

export {};

----------------------------------------

TITLE: Using Context in Child Components
DESCRIPTION: Demonstrates how to access context-based state in child components.

LANGUAGE: svelte
CODE:
<script>
	import { getContext } from 'svelte';

	// Retrieve user store from context
	const user = getContext('user');
</script>

<p>Welcome {user().name}</p>

----------------------------------------

TITLE: Node.js Compatibility Configuration
DESCRIPTION: Wrangler configuration for enabling Node.js compatibility in Cloudflare Workers.

LANGUAGE: jsonc
CODE:
{
	"compatibility_flags": ["nodejs_compat"]
}

----------------------------------------

TITLE: Accessing URL Data in SvelteKit Load Functions
DESCRIPTION: Demonstrates how to access URL-related data (url, route, params) within a load function.

LANGUAGE: javascript
CODE:
/// file: src/routes/a/[b]/[...c]/+page.js
/** @type {import('./$types').PageLoad} */
export function load({ route }) {
	console.log(route.id); // '/a/[b]/[...c]'
}

----------------------------------------

TITLE: Vercel Image Optimization Configuration
DESCRIPTION: Configuration for Vercel's image optimization features including sizes, formats, cache settings, and allowed domains.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-vercel';

export default {
	kit: {
		adapter: adapter({
			images: {
				sizes: [640, 828, 1200, 1920, 3840],
				formats: ['image/avif', 'image/webp'],
				minimumCacheTTL: 300,
				domains: ['example-app.vercel.app'],
			}
		})
	}
};

----------------------------------------

TITLE: Configuring pnpm Overrides for Dependency Testing
DESCRIPTION: JSON configuration for overriding dependencies like Vite with local versions using pnpm overrides in the root package.json of SvelteKit.

LANGUAGE: jsonc
CODE:
{
	// ...
	"dependencies": {
		"vite": "^4.0.0"
	},
	"pnpm": {
		"overrides": {
			"vite": "link:../path/to/vite/packages/vite"
		}
	}
}

----------------------------------------

TITLE: ISR Configuration Example
DESCRIPTION: Configuration for Incremental Static Regeneration (ISR) including expiration time, bypass token, and allowed query parameters.

LANGUAGE: javascript
CODE:
import { BYPASS_TOKEN } from '$env/static/private';

export const config = {
	isr: {
		expiration: 60,
		bypassToken: BYPASS_TOKEN,
		allowQuery: ['search']
	}
};

----------------------------------------

TITLE: Incorrect Load Function with Side Effects
DESCRIPTION: Shows incorrect usage of store updates within a load function, which can cause shared state issues.

LANGUAGE: javascript
CODE:
import { user } from '$lib/user';

/** @type {import('./$types').PageLoad} */
export async function load({ fetch }) {
	const response = await fetch('/api/user');

	// NEVER DO THIS!
	user.set(await response.json());
}

----------------------------------------

TITLE: Conditional Preload Attribute in Svelte
DESCRIPTION: Demonstrates how to conditionally apply preload behavior using Svelte's template syntax.

LANGUAGE: svelte
CODE:
<div data-sveltekit-preload-data={condition ? 'hover' : false}>

----------------------------------------

TITLE: Legacy Svelte Field Configuration
DESCRIPTION: Backwards compatibility configuration for older tooling that doesn't support export conditions.

LANGUAGE: json
CODE:
{
	"svelte": "./dist/index.js"
}

----------------------------------------

TITLE: Installing Enhanced Image Plugin
DESCRIPTION: Command to install the @sveltejs/enhanced-img plugin for advanced image optimization.

LANGUAGE: bash
CODE:
npm install --save-dev @sveltejs/enhanced-img

----------------------------------------

TITLE: Side Effects Configuration
DESCRIPTION: Configuration to mark CSS files as having side effects for webpack compatibility.

LANGUAGE: json
CODE:
{
	"sideEffects": ["**/*.css"]
}

----------------------------------------

TITLE: Configuring Vite for Enhanced Images
DESCRIPTION: Configuration setup in vite.config.js to enable the enhanced-img plugin alongside SvelteKit.

LANGUAGE: javascript
CODE:
import { sveltekit } from '@sveltejs/kit/vite';
import { enhancedImages } from '@sveltejs/enhanced-img';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [
		enhancedImages(),
		sveltekit()
	]
});

----------------------------------------

TITLE: Starting a SvelteKit Development Server in Bash
DESCRIPTION: Commands to start a development server for a SvelteKit project. It includes options to run the server and to open the app in a new browser tab.

LANGUAGE: bash
CODE:
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open

----------------------------------------

TITLE: Dynamic Image Import with Enhancement
DESCRIPTION: Example of dynamically importing and using enhanced images with the ?enhanced query parameter.

LANGUAGE: svelte
CODE:
<script>
	import MyImage from './path/to/your/image.jpg?enhanced';
</script>

<enhanced:img src={MyImage} alt="some alt text" />

----------------------------------------

TITLE: Netlify Functions Directory Configuration
DESCRIPTION: Configuration in netlify.toml for specifying custom Netlify functions directory alongside build settings.

LANGUAGE: toml
CODE:
[build]
	command = "npm run build"
	publish = "build"

[functions]
	directory = "functions"

----------------------------------------

TITLE: Glob Import for Multiple Images
DESCRIPTION: Using Vite's glob import feature to handle multiple enhanced images dynamically.

LANGUAGE: svelte
CODE:
<script>
	const imageModules = import.meta.glob(
		'/path/to/assets/*.{avif,gif,heif,jpeg,jpg,png,tiff,webp,svg}',
		{
			eager: true,
			query: {
				enhanced: true
			}
		}
	)
</script>

{#each Object.entries(imageModules) as [_path, module]}
	<enhanced:img src={module.default} alt="some alt text" />
{/each}

----------------------------------------

TITLE: Accessing Public Environment Variables in SvelteKit TypeScript
DESCRIPTION: This code snippet demonstrates how to import and use public environment variables from the $env/static/public module in SvelteKit. It provides type safety for accessing these variables and shows how to use them in your application.

LANGUAGE: typescript
CODE:
import { PUBLIC_BASE_URL } from '$env/static/public';

console.log(PUBLIC_BASE_URL);

----------------------------------------

TITLE: Accessing Stores in SvelteKit
DESCRIPTION: Demonstrates how to access stores in SvelteKit, replacing the Sapper approach. It shows importing navigating and page stores directly from $app/stores.

LANGUAGE: javascript
CODE:
// @filename: ambient.d.ts
declare module '@sapper/app';

// @filename: index.js
// ---cut---
import { stores } from '@sapper/app';
const { preloading, page, session } = stores();

----------------------------------------

TITLE: Importing Private Static Environment Variables in SvelteKit TypeScript
DESCRIPTION: Demonstrates how to import private static environment variables in a SvelteKit project. This method allows for static injection at build time, enabling optimizations like dead code elimination.

LANGUAGE: typescript
CODE:
import { API_KEY } from '$env/static/private';

----------------------------------------

TITLE: Development Mode Service Worker Registration
DESCRIPTION: Service worker registration code that handles both development and production environments, using module type for development and classic for production.

LANGUAGE: javascript
CODE:
import { dev } from '$app/environment';

navigator.serviceWorker.register('/service-worker.js', {
	type: dev ? 'module' : 'classic'
});

----------------------------------------

TITLE: Adding middleware to Vite in SvelteKit development
DESCRIPTION: Shows how to add custom middleware to the Vite development server in a SvelteKit project using a Vite plugin.

LANGUAGE: javascript
CODE:
import { sveltekit } from '@sveltejs/kit/vite';

/** @type {import('vite').Plugin} */
const myPlugin = {
	name: 'log-request-middleware',
	configureServer(server) {
		server.middlewares.use((req, res, next) => {
			console.log(`Got request ${req.url}`);
			next();
		});
	}
};

/** @type {import('vite').UserConfig} */
const config = {
	plugins: [myPlugin, sveltekit()]
};

export default config;

----------------------------------------

TITLE: Generating UUID with Web Crypto API
DESCRIPTION: Demonstrates using the Web Crypto API to generate a UUID.

LANGUAGE: javascript
CODE:
const uuid = crypto.randomUUID();

----------------------------------------

TITLE: Building a SvelteKit Project for Production in Bash
DESCRIPTION: Command to create a production build of a SvelteKit app. It's noted that an adapter should be installed for the target environment before building.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Route Parameter Matcher Definition
DESCRIPTION: Shows how to create a parameter matcher to validate route parameters against allowed values.

LANGUAGE: javascript
CODE:
/**
 * @param {string} param
 * @return {param is ('apple' | 'orange')}
 * @satisfies {import('@sveltejs/kit').ParamMatcher}
 */
export function match(param) {
	return param === 'apple' || param === 'orange';
}

----------------------------------------

TITLE: Loading package.json details in SvelteKit configuration
DESCRIPTION: Demonstrates how to load and parse package.json contents in svelte.config.js for use in a SvelteKit application.

LANGUAGE: javascript
CODE:
import { readFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';

const path = fileURLToPath(new URL('package.json', import.meta.url));
const pkg = JSON.parse(readFileSync(path, 'utf8'));

----------------------------------------

TITLE: Customizing Fallback Error Page in SvelteKit
DESCRIPTION: This HTML template demonstrates how to create a custom fallback error page for SvelteKit, using placeholders for status and error message.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>%sveltekit.error.message%</title>
	</head>
	<body>
		<h1>My custom error page</h1>
		<p>Status: %sveltekit.status%</p>
		<p>Message: %sveltekit.error.message%</p>
	</body>
</html>

----------------------------------------

TITLE: Using URLSearchParams in SvelteKit
DESCRIPTION: Example of accessing URL query parameters using the URLSearchParams interface.

LANGUAGE: javascript
CODE:
const foo = url.searchParams.get('foo');

----------------------------------------

TITLE: Displaying URL Slug Parameter in SvelteKit Component
DESCRIPTION: Imports the page store from SvelteKit's $app/state and renders the slug parameter from the URL in uppercase letters. The component uses Svelte's template syntax to access and transform the route parameter.

LANGUAGE: svelte
CODE:
<script>import { page } from '$app/state';</script>

<h2>{page.params.slug.toUpperCase()}</h2>

----------------------------------------

TITLE: Implementing HTML Minification in SvelteKit
DESCRIPTION: Shows how to add HTML minification to a SvelteKit project using html-minifier. It includes setting up minification options and implementing a server hook to apply minification during the build process.

LANGUAGE: javascript
CODE:
// @filename: ambient.d.ts
/// <reference types="@sveltejs/kit" />
declare module 'html-minifier';

// @filename: index.js
// ---cut---
import { minify } from 'html-minifier';
import { building } from '$app/environment';

const minification_options = {
	collapseBooleanAttributes: true,
	collapseWhitespace: true,
	conservativeCollapse: true,
	decodeEntities: true,
	html5: true,
	ignoreCustomComments: [/^#/],
	minifyCSS: true,
	minifyJS: false,
	removeAttributeQuotes: true,
	removeComments: false, // some hydration code needs comments, so leave them in
	removeOptionalTags: true,
	removeRedundantAttributes: true,
	removeScriptTypeAttributes: true,
	removeStyleLinkTypeAttributes: true,
	sortAttributes: true,
	sortClassName: true
};

/** @type {import('@sveltejs/kit').Handle} */
export async function handle({ event, resolve }) {
	let page = '';

	return resolve(event, {
		transformPageChunk: ({ html, done }) => {
			page += html;
			if (done) {
				return building ? minify(page, minification_options) : page;
			}
		}
	});
}

----------------------------------------

TITLE: Creating and Initializing a Svelte Package Project with sv CLI
DESCRIPTION: This bash script demonstrates how to create a new Svelte package project, navigate into the project directory, install dependencies, and start the development server using the 'sv' CLI tool.

LANGUAGE: bash
CODE:
npm sv create my-app
cd my-app
npm install
npm run dev

----------------------------------------

TITLE: Platform-Specific Configuration
DESCRIPTION: Defines adapter-specific configuration options for deployment platforms like Vercel. Configuration objects are merged at the top level.

LANGUAGE: javascript
CODE:
/** @type {import('some-adapter').Config} */
export const config = {
	runtime: 'edge'
};

----------------------------------------

TITLE: GitHub Actions Workflow for SvelteKit Deployment
DESCRIPTION: GitHub Actions workflow configuration for automatically deploying a SvelteKit static site to GitHub Pages.

LANGUAGE: yaml
CODE:
name: Deploy to GitHub Pages

on:
  push:
    branches: 'main'

jobs:
  build_site:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
        run: |
          npm run build

      - name: Upload Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'

  deploy:
    needs: build_site
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Enabling Prerendering for Specific SvelteKit Routes
DESCRIPTION: Route-specific configuration to enable both prerendering and server-side rendering for individual pages within a SPA setup.

LANGUAGE: javascript
CODE:
export const prerender = true;
export const ssr = true;

----------------------------------------

TITLE: Entry Point Configuration for Dynamic Routes
DESCRIPTION: Defines entry points for prerendering dynamic routes by exporting an entries function that returns an array of parameter objects.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').EntryGenerator} */
export function entries() {
	return [
		{ slug: 'hello-world' },
		{ slug: 'another-blog-post' }
	];
}

export const prerender = true;

----------------------------------------

TITLE: Server-Side API Route Implementation
DESCRIPTION: Example of creating a server-side API endpoint using +server.js for generating random numbers with error handling

LANGUAGE: javascript
CODE:
/// file: src/routes/api/random-number/+server.js
import { error } from '@sveltejs/kit';

/** @type {import('./$types').RequestHandler} */
export function GET({ url }) {
	const min = Number(url.searchParams.get('min') ?? '0');
	const max = Number(url.searchParams.get('max') ?? '1');

	const d = max - min;

	if (isNaN(d) || d < 0) {
		error(400, 'min and max must be numbers, and min must be less than max');
	}

	const random = min + Math.random() * d;

	return new Response(String(random));
}

----------------------------------------

TITLE: Trailing Slash Configuration
DESCRIPTION: Controls how trailing slashes in URLs are handled. Can be set to 'never', 'always', or 'ignore'.

LANGUAGE: javascript
CODE:
export const trailingSlash = 'always';

----------------------------------------

TITLE: Overriding Environment Variables via Command Line in SvelteKit
DESCRIPTION: Illustrates how to override environment variables defined in .env files using command-line arguments when running SvelteKit applications. This is useful for temporary or development-specific configurations.

LANGUAGE: bash
CODE:
MY_FEATURE_FLAG="enabled" npm run dev

----------------------------------------

TITLE: Changelog Entry Example
DESCRIPTION: Example of a changelog entry showing version number, change type, and list of changes

LANGUAGE: markdown
CODE:
## 1.0.0-next.123

### Patch Changes

- 4c45784: Add ambient types to published files ([#980](https://github.com/sveltejs/kit/pull/980))

----------------------------------------

TITLE: Registering Service Worker in SvelteKit
DESCRIPTION: Basic code snippet showing how to register a service worker in a SvelteKit application. This is the default registration logic that SvelteKit uses automatically.

LANGUAGE: javascript
CODE:
if ('serviceWorker' in navigator) {
	addEventListener('load', function () {
		navigator.serviceWorker.register('./path/to/service-worker.js');
	});
}

----------------------------------------

TITLE: Adding Wrangler Configuration for Module Workers
DESCRIPTION: Configuration to add to wrangler.toml to use the Module Worker format instead of Service Worker.

LANGUAGE: toml
CODE:
[build.upload]
format = "modules"
main = "./worker.mjs"

----------------------------------------

TITLE: Importing Server-Only Module in Public-Facing Code
DESCRIPTION: Demonstration of an illegal import of a server-only module in a file that could be exposed to the client. This will result in a SvelteKit error.

LANGUAGE: javascript
CODE:
// @errors: 2307 7006 7005
/// file: src/routes/utils.js
export { atlantisCoordinates } from '$lib/server/secrets.js';

export const add = (a, b) => a + b;

----------------------------------------

TITLE: Package License Configuration
DESCRIPTION: Sets the MIT license for the package in package.json.

LANGUAGE: json
CODE:
{
	"license": "MIT"
}

----------------------------------------

TITLE: Client-Side Rendering Configuration
DESCRIPTION: Controls client-side rendering and hydration. When false, no JavaScript is shipped to the client, making the page static HTML only.

LANGUAGE: javascript
CODE:
export const csr = false;
// If both `csr` and `ssr` are `false`, nothing will be rendered!

----------------------------------------

TITLE: Package Files Configuration
DESCRIPTION: Specifies which files should be included when publishing to npm, targeting the dist directory.

LANGUAGE: json
CODE:
{
	"files": ["dist"]
}

----------------------------------------

TITLE: Layout Reset Example with SvelteKit
DESCRIPTION: Demonstrates how to reset layout hierarchy using the @-syntax in SvelteKit components.

LANGUAGE: svelte
CODE:
<!--- file: src/routes/nested/route/+layout@.svelte --->
<script>
	import ReusableLayout from '$lib/ReusableLayout.svelte';
	let { data, children } = $props();
</script>

<ReusableLayout {data}>
	{@render children()}
</ReusableLayout>

----------------------------------------

TITLE: Extended Side Effects Configuration
DESCRIPTION: Configuration specifying multiple files with side effects including CSS and specific JavaScript files.

LANGUAGE: json
CODE:
{
    "sideEffects": [
    	"**/*.css",
    	"./dist/sideEffectfulFile.js"
    ]
}

----------------------------------------

TITLE: Accessing Cloudflare Platform in SvelteKit Endpoints
DESCRIPTION: This example demonstrates how to access Cloudflare-specific platform features like Durable Objects in a SvelteKit endpoint function.

LANGUAGE: javascript
CODE:
// @errors: 7031
export async function POST({ request, platform }) {
	const x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');
}

----------------------------------------

TITLE: Defining Markdown Frontmatter in SvelteKit
DESCRIPTION: Basic markdown frontmatter block defining the page title for a SvelteKit documentation page

LANGUAGE: markdown
CODE:
---
title: Reference
---

----------------------------------------

TITLE: Manual Invalidation in SvelteKit Load Functions
DESCRIPTION: Demonstrates how to manually invalidate load functions using invalidate and invalidateAll.

LANGUAGE: javascript
CODE:
/// file: src/routes/random-number/+page.js
/** @type {import('./$types').PageLoad} */
export async function load({ fetch, depends }) {
	// load reruns when `invalidate('https://api.example.com/random-number')` is called...
	const response = await fetch('https://api.example.com/random-number');

	// ...or when `invalidate('app:random')` is called
	depends('app:random');

	return {
		number: await response.json()
	};
}

LANGUAGE: svelte
CODE:
<!--- file: src/routes/random-number/+page.svelte --->
<script>
	import { invalidate, invalidateAll } from '$app/navigation';

	/** @type {import('./$types').PageProps} */
	let { data } = $props();

	function rerunLoadFunction() {
		// any of these will cause the `load` function to rerun
		invalidate('app:random');
		invalidate('https://api.example.com/random-number');
		invalidate(url => url.href.includes('random-number'));
		invalidateAll();
	}
</script>

<p>random number: {data.number}</p>
<button onclick={rerunLoadFunction}>Update random number</button>

----------------------------------------

TITLE: Cloning and Setting Up SvelteKit Repository
DESCRIPTION: Series of commands to clone the SvelteKit repository, navigate to the project directory, and install dependencies using pnpm.

LANGUAGE: bash
CODE:
git clone git@github.com:sveltejs/kit.git
cd kit
pnpm install

----------------------------------------

TITLE: Rest Parameter Route Definition in SvelteKit
DESCRIPTION: Demonstrates how to define a route with rest parameters to handle variable path segments, using GitHub's file viewer as an example.

LANGUAGE: bash
CODE:
/[org]/[repo]/tree/[branch]/[...file]

----------------------------------------

TITLE: Installing SvelteKit Project with New Package
DESCRIPTION: Command to create a new SvelteKit project using the replacement 'sv' package via npx.

LANGUAGE: bash
CODE:
npx sv create

----------------------------------------

TITLE: Custom 404 Handler Implementation
DESCRIPTION: Example of implementing a custom 404 error handler using rest parameters and the error helper function.

LANGUAGE: javascript
CODE:
import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageLoad} */
export function load(event) {
	error(404, 'Not Found');
}

----------------------------------------

TITLE: Configuring Robot Access in robots.txt
DESCRIPTION: This snippet defines the default behavior for web crawlers accessing the site. It allows all user agents full access to the website content.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Implementing Universal Transport Hook in SvelteKit
DESCRIPTION: This example shows how to implement the 'transport' hook in SvelteKit for encoding and decoding custom types across the server/client boundary.

LANGUAGE: javascript
CODE:
/// file: src/hooks.js
import { Vector } from '$lib/math';

/** @type {import('@sveltejs/kit').Transport} */
export const transport = {
	Vector: {
		encode: (value) => value instanceof Vector && [value.x, value.y],
		decode: ([x, y]) => new Vector(x, y)
	}
};

----------------------------------------

TITLE: Generating TypeScript Configuration and Types in SvelteKit
DESCRIPTION: SvelteKit command for generating TypeScript configuration and type definitions. Creates tsconfig.json and generates types that can be imported as ./$types in routing files. Runs automatically as part of npm prepare script.

LANGUAGE: shell
CODE:
svelte-kit sync

----------------------------------------

TITLE: Edge Function Configuration
DESCRIPTION: Example of configuring a route to use Vercel Edge Functions through the runtime config option.

LANGUAGE: javascript
CODE:
/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	runtime: 'edge'
};

----------------------------------------

TITLE: Service Worker Type Safety Setup
DESCRIPTION: TypeScript reference configuration for service workers in SvelteKit, providing proper type definitions and global scope access.

LANGUAGE: javascript
CODE:
/// <reference types="@sveltejs/kit" />
/// <reference no-default-lib="true"/>
/// <reference lib="esnext" />
/// <reference lib="webworker" />

const sw = /** @type {ServiceWorkerGlobalScope} */ (/** @type {unknown} */ (self));

LANGUAGE: typescript
CODE:
/// <reference types="@sveltejs/kit" />
/// <reference no-default-lib="true"/>
/// <reference lib="esnext" />
/// <reference lib="webworker" />

const sw = self as unknown as ServiceWorkerGlobalScope;

----------------------------------------

TITLE: Accessing Cloudflare Platform APIs in SvelteKit
DESCRIPTION: Example of accessing Cloudflare Workers runtime APIs through the platform property in SvelteKit endpoints.

LANGUAGE: javascript
CODE:
// @errors: 7031
export async function POST({ request, platform }) {
	const x = platform.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');
}

----------------------------------------

TITLE: Configuring SvelteKit with Netlify Edge Functions
DESCRIPTION: Configuration for enabling Netlify Edge Functions using Deno-based deployment instead of Node-based functions.

LANGUAGE: javascript
CODE:
// @errors: 2307
/// file: svelte.config.js
import adapter from '@sveltejs/adapter-netlify';

export default {
	kit: {
		adapter: adapter({
			// will create a Netlify Edge Function using Deno-based
			// rather than using standard Node-based functions
			edge: true
		})
	}
};

----------------------------------------

TITLE: Serverless Function Configuration
DESCRIPTION: Configuration for deploying routes as Vercel Serverless Functions with Node.js runtime specification.

LANGUAGE: javascript
CODE:
/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	runtime: 'nodejs22.x'
};

----------------------------------------

TITLE: Disabling Scroll Behavior in SvelteKit Navigation
DESCRIPTION: Example of preventing automatic scrolling after navigation using the data-sveltekit-noscroll attribute.

LANGUAGE: html
CODE:
<a href="path" data-sveltekit-noscroll>Path</a>

----------------------------------------

TITLE: Wrangler Configuration for Cloudflare Workers
DESCRIPTION: Sample Wrangler configuration file showing essential settings for deploying a SvelteKit app to Cloudflare Workers, including service name, account ID, and build settings.

LANGUAGE: jsonc
CODE:
{
	"name": "<your-service-name>",
	"account_id": "<your-account-id>",
	"main": "./.cloudflare/worker.js",
	"site": {
		"bucket": "./.cloudflare/public"
	},
	"build": {
		"command": "npm run build"
	},
	"compatibility_date": "2021-11-12"
}

----------------------------------------

TITLE: Creating a proxy API route in SvelteKit
DESCRIPTION: Demonstrates how to create an API route in SvelteKit that acts as a proxy to an external API server, bypassing CORS issues.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').RequestHandler} */
export function GET({ params, url }) {
	return fetch(`https://my-api-server.com/${params.path + url.search}`);
}

----------------------------------------

TITLE: Conditional client-side code execution in SvelteKit
DESCRIPTION: Illustrates how to run code only on the client-side in SvelteKit using the browser check and onMount function.

LANGUAGE: javascript
CODE:
import { browser } from '$app/environment';

if (browser) {
	// client-only code here
}

LANGUAGE: javascript
CODE:
import { onMount } from 'svelte';

onMount(async () => {
	const { method } = await import('some-browser-only-library');
	method('hello world');
});

----------------------------------------

TITLE: Implementing view transitions in SvelteKit navigation
DESCRIPTION: Shows how to use the view transitions API with SvelteKit's onNavigate function for smooth client-side navigation effects.

LANGUAGE: javascript
CODE:
import { onNavigate } from '$app/navigation';

onNavigate((navigation) => {
	if (!document.startViewTransition) return;

	return new Promise((resolve) => {
		document.startViewTransition(async () => {
			resolve();
			await navigation.complete;
		});
	});
});

----------------------------------------

TITLE: Basic Image Import in Svelte
DESCRIPTION: Demonstrates how to import and display an image using Vite's built-in asset handling in a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	import logo from '$lib/assets/logo.png';
</script>

<img alt="The project logo" src={logo} />

----------------------------------------

TITLE: Netlify Build Configuration
DESCRIPTION: Basic Netlify configuration in netlify.toml specifying build command and publish directory for static assets.

LANGUAGE: toml
CODE:
[build]
	command = "npm run build"
	publish = "build"

----------------------------------------

TITLE: Creating a Basic Form in Svelte
DESCRIPTION: Demonstrates how to create a simple form in Svelte that will use the default action defined in the server file. This form doesn't require any client-side JavaScript.

LANGUAGE: svelte
CODE:
<!--- file: src/routes/login/+page.svelte --->
<form method="POST">
	<label>
		Email
		<input name="email" type="email">
	</label>
	<label>
		Password
		<input name="password" type="password">
	</label>
	<button>Log in</button>
</form>

----------------------------------------

TITLE: Changelog Entry Markdown
DESCRIPTION: Markdown formatted changelog entries documenting version changes, patch updates, and dependency updates for the @sveltejs/amp package.

LANGUAGE: markdown
CODE:
# @sveltejs/amp

## 1.1.4
### Patch Changes

- docs: update URLs for new svelte.dev site ([#12857](https://github.com/sveltejs/kit/pull/12857))

- Updated dependencies [[`dcbe4222a194c5f90cfc0fc020cf065f7a4e4c46`](https://github.com/sveltejs/kit/commit/dcbe4222a194c5f90cfc0fc020cf065f7a4e4c46), [`4cdbf76fbbf0c0ce7f574ef69c8daddcf954d39d`](https://github.com/sveltejs/kit/commit/4cdbf76fbbf0c0ce7f574ef69c8daddcf954d39d), [`3a9b78f04786898ca93f6d4b75ab18d26bc45192`](https://github.com/sveltejs/kit/commit/3a9b78f04786898ca93f6d4b75ab18d26bc45192), [`723eb8b31e6a22c82f730c30e485386c8676b746`](https://github.com/sveltejs/kit/commit/723eb8b31e6a22c82f730c30e485386c8676b746), [`8ec471c875345b751344e67580ff1b772ef2735b`](https://github.com/sveltejs/kit/commit/8ec471c875345b751344e67580ff1b772ef2735b)]:
  - @sveltejs/kit@2.7.3

----------------------------------------

TITLE: Configuring pnpm Overrides for Local Testing
DESCRIPTION: JSON configuration for overriding SvelteKit packages with local versions using pnpm overrides in an existing project's package.json.

LANGUAGE: jsonc
CODE:
{
	// ...
	"pnpm": {
		"overrides": {
			"@sveltejs/kit": "link:../path/to/svelte-kit/packages/kit",
			// additionally/optional the adapter you're using
			"@sveltejs/adapter-auto": "link:../path/to/svelte-kit/packages/adapter-auto"
		}
	}
}

----------------------------------------

TITLE: Component Export Configuration
DESCRIPTION: Example of exporting a specific Svelte component with its type definitions.

LANGUAGE: json
CODE:
{
	"exports": {
		"./Foo.svelte": {
			"types": "./dist/Foo.svelte.d.ts",
			"svelte": "./dist/Foo.svelte"
		}
	}
}

----------------------------------------

TITLE: Enhanced Image Component Usage
DESCRIPTION: Basic usage of the enhanced:img component for optimized image rendering.

LANGUAGE: svelte
CODE:
<enhanced:img src="./path/to/your/image.jpg" alt="An alt text" />

----------------------------------------

TITLE: Basic Package Name Configuration
DESCRIPTION: Defines the package name in package.json which will be used for npm publishing and package identification.

LANGUAGE: json
CODE:
{
	"name": "your-library"
}

----------------------------------------

TITLE: Setting Cookie Path in SvelteKit
DESCRIPTION: Updated cookie management requiring explicit path parameter when setting cookies.

LANGUAGE: javascript
CODE:
/** @type {import('./$types').PageServerLoad} */
export function load({ cookies }) {
	cookies.set(name, value, { path: '/' });
	return { response }
}

----------------------------------------

TITLE: Updating App Render Signature
DESCRIPTION: Change to the app.render function signature in version 1.0.0-next.30.

LANGUAGE: typescript
CODE:
(request: Request) => Promise<Response>