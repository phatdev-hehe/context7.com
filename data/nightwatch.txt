TITLE: Configuring Test Suite Options in Nightwatch BDD
DESCRIPTION: This snippet demonstrates various configuration options available for Nightwatch BDD test suites, including unit testing, session management, and test case execution behavior.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
   this.unitTest = true;
   this.endSessionOnFail = false
   this.skipTestcasesOnFail = true
   this.disabled = true
   this.timeout(1000)
   this.retryInterval(100);
   this.tags = ['login']
   
   it('...', function() {
     // ...
   });
});

----------------------------------------

TITLE: Element Interaction Commands in Nightwatch
DESCRIPTION: Common interaction commands for web elements including click, double click, right click, typing, setting values, and clearing inputs.

LANGUAGE: javascript
CODE:
browser.element.find('selector').click();
browser.element.find('selector').doubleClick();
browser.element.find('selector').rightClick();
browser.element.find('selector').sendKeys('text');
browser.element.find('selector').setValue();
browser.element.find('selector').clear();

----------------------------------------

TITLE: Using CSS Selectors in Nightwatch
DESCRIPTION: Demonstrates how to use various CSS selectors to find elements in the DOM tree. Examples include selecting by id, class, element class, and nested elements.

LANGUAGE: javascript
CODE:
// Find an element which contains id = element-id
browser.element.find('#element-id');

// Find all elements with CSS class active
browser.element.findAll('.active');

// Find all <p> elements with class active
browser.element.find('p.active');

// Find element with class active nested within an element with id list
browser.element.find('#id > .active');

LANGUAGE: typescript
CODE:
// Find an element which contains id = element-id
browser.element.find('#element-id');

// Find all elements with CSS class active
browser.element.findAll('.active');

// Find all <p> elements with class active
browser.element.find('p.active');

// Find element with class active nested within an element with id list
browser.element.find('#id > .active');

----------------------------------------

TITLE: Writing React Component Test
DESCRIPTION: Example test case demonstrating how to mount and test a React component using Nightwatch's component testing API.

LANGUAGE: javascript
CODE:
describe('form test', function() {
  let component;

  before(async () => {
    component = await browser.mountComponent('/test/components/Form.jsx');
  });

  it('should render functional components without error', async function() {
    await browser.expect(component).to.be.visible;
  })
})

----------------------------------------

TITLE: Setting Value and Asserting Text in Nightwatch.js
DESCRIPTION: Demonstrates how to navigate to a website, set a value in a search input, click a submit button, and assert text content using Nightwatch.js. This snippet showcases basic element interaction and assertion.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    browser
      .url('https://www.ecosia.org/')
      .setValue('input[type=search]', 'nightwatch')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

----------------------------------------

TITLE: Demonstrating Element Expect Assertions in Nightwatch
DESCRIPTION: This snippet shows various expect.element assertions in a Nightwatch test, including checking for element presence, CSS properties, attributes, tag types, and visibility.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test Ecosia.org': function (browser) {
    browser.url('https://www.ecosia.org/');
    
    // expect element header to be present in 1000ms
    browser.expect.element('header').to.be.present.before(1000);
    
    // expect element header to have css property 'display'
    browser.expect.element('header').to.have.css('display');
    
    // expect element header to have attribute 'class' which contains text 'index-header'
    browser.expect.element('header').to.have.attribute('class').which.contains('index-header');
    
    // expect element .search-form to be an input tag
    browser.expect.element('.search-form').to.be.a('form');
    
    // expect element header to be visible
    browser.expect.element('header').to.be.visible;
    
    browser.end();
  }
};

----------------------------------------

TITLE: Defining a Basic Page Object with URL in Nightwatch
DESCRIPTION: Creates a simple page object with a static URL property. This is typically defined in a separate file within the configured page objects directory.

LANGUAGE: javascript
CODE:
module.exports = {
  url: 'https://google.com',
  elements: {}
};

----------------------------------------

TITLE: Implementing Test Hooks in Nightwatch
DESCRIPTION: This snippet demonstrates how to use before, after, beforeEach, and afterEach hooks in a Nightwatch test suite. It shows the basic structure and execution order of these hooks.

LANGUAGE: javascript
CODE:
module.exports = {
  before : function(browser) {
    console.log('Setting up...');
  },
  
  after : function(browser) {
    console.log('Closing down...');
  },
  
  beforeEach : function(browser) {
    
  },
  
  afterEach : function(browser) {
    
  },
  
  'step one' : function (browser) {
    browser
     // ...
  },
  
  'step two' : function (browser) {
    browser
    // ...
      .end();
  }
};

----------------------------------------

TITLE: Defining Page Object Structure in Nightwatch
DESCRIPTION: Illustrates the structure of a page object module in Nightwatch, including url, elements, commands, props, and sections definitions.

LANGUAGE: javascript
CODE:
module.exports = {
  // can be string or function
  url: function () {
    return this.api.launchUrl;
  },
  elements: {
    // shorthand, specifies selector
    mySubmitButton: 'input[type=submit]'
    
    // full
    myTextInput: {
      selector: 'input[type=text]',
      locateStrategy: 'css selector'
    }
  },
  commands: [
    {
      myCustomPause: function () {
        this.api.pause(this.props.myPauseTime);
      }
    }
  ],
  // object version (best considered immutable)
  props: {
    myPauseTime: 1000
  },
  
  sections: {
    myFooterSection: {
      selector: '#my-footer',
      locateStrategy: 'css selector',
      elements: {
        myLogo: {
          selector: '.my-logo',
          locateStrategy: 'css selector'
        }
      },
      commands: [
        {
          myMoveToLogo: function () {
            this.moveToElement('@myLogo', this.props.myLogoX, this.props.myLogoY);
          }
        }
      ],
      // function version (recommended)
      props: function () {
        return {
          myLogoX: 10,
          myLogoY: 10
        };
      },
      sections: {
        // additional, nested sections
      }
    }
  }
};

----------------------------------------

TITLE: Basic Nightwatch.js Test Example
DESCRIPTION: Simple test suite that demonstrates navigating to Ecosia.org, performing a search for 'nightwatch', and verifying the search results. Shows basic usage of browser commands and assertions.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org' : function(browser) {
    browser
      .url('https://www.ecosia.org/')
      .waitForElementVisible('body')
      .assert.titleContains('Ecosia')
      .assert.visible('input[type=search]')
      .setValue('input[type=search]', 'nightwatch')
      .assert.visible('button[type=submit]')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

----------------------------------------

TITLE: Basic Nightwatch Test Using describe() Interface
DESCRIPTION: Demonstrates a simple test using the describe() and it() functions to perform a search on Ecosia and verify the results.

LANGUAGE: javascript
CODE:
describe('Ecosia', function() {
  
  // test() and specify() is also available
  
  it('demo test', function(browser) {
    browser
      .url('https://www.ecosia.org/')
      .setValue('input[type=search]', 'nightwatch')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  });
  
});

----------------------------------------

TITLE: Assertions in Nightwatch
DESCRIPTION: Built-in assertion methods for validating element text, values, URLs, and visibility states.

LANGUAGE: javascript
CODE:
browser.element.find('selector').getText().assert.equals('text');
browser.element.find('selector').getText().assert.contains('text');
browser.element.find('selector').getText().assert.matches('regex');
browser.assert.urlEquals('text');
browser.assert.urlContains('text');
browser.assert.urlMatches('regex');
browser.element.find('selector').assert.visible();

----------------------------------------

TITLE: Complete Page Object Example in Nightwatch.js
DESCRIPTION: Demonstrates a complete page object with URL and elements definitions, combining both CSS and XPath selectors.

LANGUAGE: javascript
CODE:
module.exports = {
  url: 'https://google.com',
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submit: {
      selector: '//[@name="q"]',
      locateStrategy: 'xpath'
    }
  }
};

----------------------------------------

TITLE: Performing DOM Interactions in Nightwatch.js
DESCRIPTION: This snippet demonstrates how to navigate to a website, set a value in a search input, click a submit button, and assert text content. It showcases basic Nightwatch commands for DOM interaction.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    browser
      .url('https://www.ecosia.org/')
      .setValue('input[type=search]', 'nightwatch')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

LANGUAGE: typescript
CODE:
import {NightwatchTests} from 'nightwatch';

const ecosiaTest: NightwatchTests = {
'Demo test ecosia.org': () => {
  browser
    .url('https://www.ecosia.org/')
    .setValue('input[type=search]', 'nightwatch')
    .click('button[type=submit]')
    .assert.containsText('.mainline-results', 'Nightwatch.js')
    .end();
},

export default ecosiaTest;

----------------------------------------

TITLE: Element Selection Using Nightwatch v3 Element API
DESCRIPTION: Demonstrates various ways to find elements using the new Element API including CSS selectors, Nightwatch selector objects, Selenium by locator, and finding elements by text.

LANGUAGE: javascript
CODE:
// using regular css selectors
const submitElem = browser.element.find('button[name=submit]');

// using Nightwatch selector objects
const addButtonElem = browser.element.find({
  selector: '//button[@type="button"]',
  locateStrategy: 'xpath',
  index: 1
});

// using Selenium `by` locator
const addButtonElem2 = browser.element.find(
  by.xpath('//button[@type="button"]')
);

// locating child elements
const childChildElem = browser.element
  .find('.element')
  .find('.child-element')
  .find('.child-child-element');

// locating elements by text
const newsElem = browser.element.findByText('News');

// use await to retrieve Selenium WebElement instance
const addButtonWebElem = await addButtonElem;

----------------------------------------

TITLE: Basic Nightwatch Configuration in JavaScript
DESCRIPTION: Example of a basic Nightwatch configuration file (nightwatch.conf.js) using Firefox as the target browser with geckodriver. It defines src_folders, webdriver settings, and test_settings.

LANGUAGE: javascript
CODE:
module.exports = {
  // An array of folders (excluding subfolders) where your tests are located;
  // if this is not specified, the test source must be passed as the second argument to the test runner.
  src_folders: [],

  webdriver: {
    start_process: true,
    port: 4444,
    server_path: require('geckodriver').path,
    cli_args: [
      // very verbose geckodriver logs
      // '-vv'
    ]
  },

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org',
      desiredCapabilities : {
        browserName : 'firefox'
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Selenium Server with Multiple Browser Support in Nightwatch
DESCRIPTION: Example configuration for Nightwatch that sets up Selenium Server with support for Firefox, Chrome, and Internet Explorer. Includes server path configuration, port settings, and browser-specific WebDriver configurations. Requires geckodriver, chromedriver, selenium-server, and iedriver NPM packages.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],
  
  test_settings: {
    default: {
    launch_url: 'https://nightwatchjs.org'
  },
  
  selenium: {
    // Selenium Server is running locally and is managed by Nightwatch
    selenium: {
      start_process: true,
      port: 4444,
      server_path: require('selenium-server').path,
      cli_args: {
        'webdriver.gecko.driver': require('geckodriver').path,
        'webdriver.chrome.driver': require('chromedriver').path,
        'webdriver.ie.driver': process.platform === 'win32' ? require('iedriver').path : ''
      }
    },
    webdriver: {
      start_process: false
    }
  },
  
  'selenium.chrome': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'chrome',
      chromeOptions: {
      }
    }
  },
  
  'selenium.firefox': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'firefox'
    }
  },
  
  'selenium.ie': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'internet explorer'
    }
  }
}}

----------------------------------------

TITLE: Basic Expect Element Assertions in Nightwatch
DESCRIPTION: Demonstrates basic element presence and visibility assertions using Nightwatch's expect API in a test case.

LANGUAGE: javascript
CODE:
describe('expect example', function() {
  it('sample test', function (browser) {
    // start with identifying the element
    // and then assert the element is present
    browser.expect.element('#main').to.be.present;
    // or assert the element is visible
    browser.expect.element('#main').to.be.visible;
  });
}

----------------------------------------

TITLE: React Component Test with Interaction and Hooks
DESCRIPTION: Illustrates a comprehensive React component test with interaction tests, hooks, and Testing Library integration. It includes global setup and teardown hooks, as well as pre-render and post-render functions.

LANGUAGE: jsx
CODE:
import { fireEvent, within } from '@testing-library/dom';
import Form from '../components/Form.jsx';

export default {
  title: 'Form Component',
  component: Form,

  // executed before all the individual component stories; runs in Node context
  async setup(browser) {
    console.log('global setup hook', browser.capabilities)
  },

  // executed after all the individual component stories; runs in Node context
  async teardown(browser) {
    console.log('global teardown hook')
  },

  // executed before each individual component story; runs in Node context
  async preRender(browser, context) {
    // context is made of {id, name, title}
    console.log('preRender', context.id);
  },

  // executed after each individual component story; runs in Node context
  async postRender(browser, context) {
    // context is made of {id, name, title}
    console.log('postRender', context.id);
  }
}

export const AnotherForm = Object.assign(() => <Form addTask={function(value) {
  console.log('Add Task', value);
}} />, {
  async preRender() {},

  async postRender() {
    console.log('after mount', window);
  },

  async play({canvasElement, args}) {
    console.log('play function', args);

    const root = within(canvasElement);
    const input = root.getByTestId('new-todo-input');


    fireEvent.change(input, {
      target: {
        value: 'another one bites the dust'
      }
    });

    return {
      fromPlay: input
    }
  },

  test: async (browser, {component, result}) => {
    console.log('Result from play', result)
    await expect(component).to.be.visible;

    await expect(component.find('input')).to.have.property('value').equal('another one bites the dust');
  }
});


----------------------------------------

TITLE: POST Request Test Example
DESCRIPTION: Example of testing a POST request with request body and response validation

LANGUAGE: javascript
CODE:
describe('api testing', function () {
  it('post api test', async function({supertest}) {
    await supertest
      .request("https://petstore.swagger.io/v2")
      .post("/pet")
      .send({
        "id": 0,
        "category": {
          "id": 0,
          "name": "string"
        },
        "name": "doggie",
        "photoUrls": [
          "string"
        ],
        "tags": [
          {
            "id": 0,
            "name": "string"
          }
        ],
        "status": "available"
      })
      .expect(200)
      .expect('Content-Type', /json/)
      .then(function(response){
          expect(response._body.name).to.be.equal("doggie");
      });
  });
});

----------------------------------------

TITLE: Basic Nightwatch Test using 'exports' Syntax in JavaScript
DESCRIPTION: This snippet demonstrates a basic Nightwatch test suite that searches for 'nightwatch' on Ecosia.org and verifies the search results. It uses the 'exports' syntax to define the test function.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org' : function(browser) {
    browser
      .url('https://www.ecosia.org/')
      .waitForElementVisible('body')
      .assert.titleContains('Ecosia')
      .assert.visible('input[type=search]')
      .setValue('input[type=search]', 'nightwatch')
      .assert.visible('button[type=submit]')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

----------------------------------------

TITLE: Finding Elements using Nightwatch Selectors
DESCRIPTION: Examples of using different selector methods to find elements in the DOM, including CSS, XPath, role, text, placeholder, label, and alt text selectors.

LANGUAGE: javascript
CODE:
browser.element.find('css selector');
browser.element.findAll('css selector');

browser.element.find(by.xpath(('xpath string'));
browser.element.findAll(by.xpath(('xpath string'));

browser.element.findByRole('role');
browser.element.findAllByRole('role');

browser.element.findByText('text');
browser.element.findAllByText('text');

browser.element.findByPlaceholderText('placeholder text');
browser.element.findAllByPlaceholderText('placeholder text');

browser.element.findByLabelText('label text');
browser.element.findAllByLabelText('label text');

browser.element.findByAltText('alt text');
browser.element.findAllByAltText('alt text');

----------------------------------------

TITLE: Using Custom Page Commands in Nightwatch Tests
DESCRIPTION: This example shows how to use a custom page command ('submit') within a Nightwatch test. It demonstrates the simplified test structure when page-specific logic is encapsulated in commands.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();
    google.setValue('@searchBar', 'nightwatch')
      .submit();
    
    browser.end();
}
};

----------------------------------------

TITLE: Using Assert and Verify in Nightwatch
DESCRIPTION: Demonstrates the difference between 'assert' and 'verify' methods in Nightwatch. The 'assert' method ends the test on failure, while 'verify' logs the failure and continues.

LANGUAGE: javascript
CODE:
browser.assert.visible('.non_existing');

LANGUAGE: javascript
CODE:
browser.verify.visible('.non_existing');

----------------------------------------

TITLE: Basic Usage of .ensure API in Nightwatch.js
DESCRIPTION: Demonstrates a simple test using the .ensure API to check the page title and element visibility on the Nightwatch.js website.

LANGUAGE: javascript
CODE:
describe('demo test for .ensure', function() {
  
  it('basic test', function(browser) {
    browser
      .url('https://nightwatchjs.org')
      .ensure.titleMatches(/Nightwatch\.js/)
      .ensure.elementIsVisible('#index-container')  
  });
});

----------------------------------------

TITLE: Declaring Page Elements with CSS and XPath in Nightwatch
DESCRIPTION: This snippet demonstrates how to declare page elements using both CSS and XPath locate strategies in a Nightwatch page object file.

LANGUAGE: javascript
CODE:
module.exports = {
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submit: {
      selector: '//[@name="q"]',
      locateStrategy: 'xpath'
    }
  }
};

----------------------------------------

TITLE: Complete Mocha Test Example with Nightwatch
DESCRIPTION: Full example of a Mocha test suite using Nightwatch APIs to perform a Google search test, including before/after hooks.

LANGUAGE: javascript
CODE:
describe('Google demo test for Mocha', function() {
  describe('with Nightwatch', function() {
    before(function(browser, done) {
      done();
    });

    after(function(browser, done) {
      browser.end(function() {
        done();
      });
    });

    afterEach(function(browser, done) {
      done();
    });

    beforeEach(function(browser, done) {
      done();
    });

    it('uses BDD to run the Google simple test', function(browser) {
      browser
        .url('https://google.com')
        .expect.element('body').to.be.present.before(1000);

      browser.setValue('input[type=text]', ['nightwatch', browser.Keys.ENTER])
        .pause(1000)
        .assert.containsText('#main', 'Night Watch');
    });
  });
});

----------------------------------------

TITLE: Using .before and .after for Timed Assertions in Nightwatch
DESCRIPTION: Shows how to use .before and .after methods to add retry capability to assertions. These methods allow specifying a time limit within which the assertion should pass, useful for handling asynchronous page changes.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.contain('The Night Watch').before(1000);

  browser.expect.element('#main').text.to.not.contain('The Night Watch').after(500);
};

----------------------------------------

TITLE: Using Page Objects in Nightwatch Tests
DESCRIPTION: This snippet demonstrates how to use defined page objects in a Nightwatch test, including navigation, assertions, and element interactions.

LANGUAGE: javascript
CODE:
describe('sample test with page objects', function() {
  it('Test', function (browser) {
    var google = browser.page.google();
    
    google.navigate()
      .assert.title('Google')
      .assert.visible('@searchBar')
      .setValue('@searchBar', 'nightwatch')
      .click('@submit');
    
    browser.end();
  });
});

----------------------------------------

TITLE: Complex Actions Sequence Example
DESCRIPTION: Shows how to chain multiple actions together including keyboard and mouse interactions in a synchronized sequence.

LANGUAGE: javascript
CODE:
describe('user actions api', function() {
  
  it('demo test', function() {
    browser
      .perform(function() {
        const actions = this.actions({async: true});
        
        return actions
          .keyDown(Keys.SHIFT)
          .move({origin: el})
          .press()
          .release()
          .keyUp(Keys.SHIFT);
      });
    })
})

----------------------------------------

TITLE: Implementing Global Test Hooks in Nightwatch
DESCRIPTION: Example showing implementation of global test hooks including before, after, beforeEach, and afterEach hooks. Also includes browser navigation and quit hooks. The hooks can be configured for different environments (local/integration) and receive the Nightwatch browser object.

LANGUAGE: javascript
CODE:
module.exports = {
  'default' : {
    isLocal : true,
  },

  'integration' : {
    isLocal : false
  },

  // External before hook is ran at the beginning of the tests run, before creating the Selenium session
  before(done) {
    // run this only for the local-env
    if (this.isLocal) {
      // start the local server
      App.startServer(function() {
        // server listening
        done();
      });
    } else {
      done();
    }
  },

  // External after hook is ran at the very end of the tests run, after closing the Selenium session
  after(done) {
    // run this only for the local-env
    if (this.isLocal) {
      // stop the local server
      App.stopServer(function() {
        // shutting down
        done();
      });
    } else {
      done();
    }
  },

  // This will be run before each test suite is started
  beforeEach(browser, done) {
    // getting the session info
    browser.status(function(result) {
      console.log(result.value);
      done();
    });
  },

  // This will be run after each test suite is finished
  afterEach(browser, done) {
    console.log(browser.currentTest);
    done();
  },

  // Called right after the command .navigateTo() is finished
  async onBrowserNavigate(browser) {
    return Promise.resolve();
  },

  // Called right before the command .quite() is finished
  async onBrowserQuit(browser) {
    return Promise.resolve();
  }
}

----------------------------------------

TITLE: Implementing Async Custom Command
DESCRIPTION: Demonstrates an async custom command that handles errors and returns a value.

LANGUAGE: javascript
CODE:
module.exports = class CustomCommand {
  async command() {
    let returnValue;
    try {
      returnValue = await anotherAsyncFunction();
    } catch (err) {
      console.error('An error occurred', err);
      returnValue = {
        status: -1,
        error: err.message
      }
    }
    
    return returnValue;
  }
}

----------------------------------------

TITLE: Clicking Elements in Nightwatch
DESCRIPTION: Demonstrates how to click on a web element using Nightwatch. The example shows clicking on a 'Sign In' button.

LANGUAGE: javascript
CODE:
// Click on the sign in button
browser.element.findByText('Sign In').click();

LANGUAGE: typescript
CODE:
// Click on the sign in button
browser.element.findByText('Sign In').click();

----------------------------------------

TITLE: Capturing Network Requests Using Chrome DevTools Protocol in Nightwatch
DESCRIPTION: This example demonstrates how to capture network requests using the Chrome DevTools Protocol in a Nightwatch test. It enables network tracking, performs actions, and then retrieves and asserts on the captured requests.

LANGUAGE: javascript
CODE:
module.exports = {
  'Capture Network Requests': function(browser) {
    browser
      .cdp('Network.enable')
      .cdp('Network.setCacheDisabled', { cacheDisabled: true })
      .url('https://example.com')
      .cdp('Network.getResponseBody', { requestId: 'requestId' }, function(response) {
        console.log('Response body:', response.body);
      })
      .cdp('Network.disable')
      .end();
  }
}

----------------------------------------

TITLE: Using Expect API for Element Assertions in Nightwatch
DESCRIPTION: This snippet demonstrates how to use the Expect API in Nightwatch to perform assertions on elements. It shows how to check if an element is present and visible using a chainable syntax.

LANGUAGE: javascript
CODE:
describe('expect example', function() {
  it('sample test', function (browser) {
    // start with identifying the element
    // and then assert the element is present
    browser.expect.element('#main').to.be.present;
    // or assert the element is visible
    browser.expect.element('#main').to.be.visible;
  });
}

----------------------------------------

TITLE: Complete Angular Component Test Example
DESCRIPTION: Full example of testing an Angular component including mounting and assertions

LANGUAGE: javascript
CODE:
it('Test Form Component', async function (browser) {
  const component = await browser.mountComponent('/src/components/Form.component');

  expect(component).text.to.equal('form-component works!');
});

----------------------------------------

TITLE: Nesting Page Sections in Nightwatch
DESCRIPTION: This snippet illustrates how to nest sections within other sections for complex DOM structures in Nightwatch page objects. It shows a menu section with a nested apps section.

LANGUAGE: javascript
CODE:
module.exports = {
  sections: {
    menu: {
      selector: '#gb',
      elements: {
        mail: {
          selector: 'a[href*="mail"]'
        },
        images: {
          selector: 'a[href*="imghp"]'
        }
      },
      sections: {
        apps: {
          selector: 'div.gb_pc',
          elements: {
            myAccount: {
              selector: '#gb192'
            },
            googlePlus: {
              selector: '#gb119'
            }
          }
        }
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Nightwatch with Firefox WebDriver
DESCRIPTION: Example configuration file that sets up Nightwatch to run tests in Firefox using geckodriver. Demonstrates basic configuration structure including webdriver settings, test folders, and browser capabilities.

LANGUAGE: javascript
CODE:
module.exports = {
  // An array of folders (excluding subfolders) where your tests are located;
  // if this is not specified, the test source must be passed as the second argument to the test runner.
  src_folders: [],

  webdriver: {
    start_process: true,
    port: 4444,
    server_path: require('geckodriver').path,
    cli_args: [
      // very verbose geckodriver logs
      // '-vv'
    ]
  },

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org',
      desiredCapabilities : {
        browserName : 'firefox'
      }
    }
  }
};

----------------------------------------

TITLE: Disabling Browser Session Configuration
DESCRIPTION: Configuration to disable browser session for API testing by adding a dedicated environment

LANGUAGE: javascript
CODE:
module.exports = {
  // ....
  api_testing: {
    start_session: false,
    webdriver: {
      start_process: false,
    }
  }
}

----------------------------------------

TITLE: Configuring Vite Dev Server
DESCRIPTION: Configuration options for the Vite dev server in Nightwatch

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/react'],
  vite_dev_server: {
    start_vite: true,
    port: 5173
  }
}

----------------------------------------

TITLE: Complete Page Object Definition in Nightwatch
DESCRIPTION: This snippet shows a complete page object definition for a Google search page, including the URL and multiple elements with different locate strategies.

LANGUAGE: javascript
CODE:
module.exports = {
  url: 'https://google.com',
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submit: {
      selector: '//[@name="q"]',
      locateStrategy: 'xpath'
    }
  }
};

----------------------------------------

TITLE: Implementing Function-based Custom Commands for Google Page Object in Nightwatch
DESCRIPTION: This snippet demonstrates how to create a custom 'submit' command for a Google page object. It encapsulates the logic for clicking the submit button, including waiting for element visibility and disappearance.

LANGUAGE: javascript
CODE:
const googleCommands = {
  submit: function() {
    this.api.pause(1000);
    
    return this.waitForElementVisible('@submitButton', 1000)
      .click('@submitButton')
      .waitForElementNotPresent('@submitButton');
  }
};

module.exports = {
  commands: [googleCommands],
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submitButton: {
      selector: 'input[name=btnK]'
    }
  }
};

----------------------------------------

TITLE: Defining a Page Object with Dynamic URL in Nightwatch
DESCRIPTION: Creates a page object with a dynamic URL using a function. This allows for flexible URL generation based on the test environment or other factors.

LANGUAGE: javascript
CODE:
module.exports = {
  url: function() { 
    return this.api.launchUrl + '/login'; 
  },
  elements: {}
};

----------------------------------------

TITLE: Using Relative Locators in Nightwatch.js
DESCRIPTION: This example shows how to use relative locators in Nightwatch to find elements based on their spatial relationship to other elements. It demonstrates locating a password input field below an email input field.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));
    
    browser
      .navigateTo('https://archive.org/account/login')
      .setValue(passwordElement, 'password')
      .assert.valueEquals('input[type=password]', 'password');
  }
};

LANGUAGE: typescript
CODE:
import {NightwatchTests} from 'nightwatch';

const ecosiaTest: NightwatchTests = {
'Demo test ecosia.org': () => {
  const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));
  
  browser
    .navigateTo('https://archive.org/account/login')
    .setValue(passwordElement, 'password')
    .assert.valueEquals('input[type=password]', 'password');
},

export default ecosiaTest;

----------------------------------------

TITLE: Configuring Basic Test Environments in Nightwatch
DESCRIPTION: Demonstrates how to configure multiple browser environments (Safari and Firefox) in Nightwatch. Includes setup for default environment and browser-specific capabilities.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },

    safari: {
      desiredCapabilities : {
        browserName : 'safari',
        alwaysMatch: {
          acceptInsecureCerts: false
        }
      },
      webdriver: {
        port: 4445,
        start_process: true,
        server_path: '/usr/bin/safaridriver'
      }
    },

    firefox: {
      desiredCapabilities : {
        browserName : 'firefox'
      },

      webdriver: {
        start_process: true,
        port: 4444,
        server_path: require('geckodriver').path
      }
    }
  }
}

----------------------------------------

TITLE: Nightwatch Configuration with Multiple Test Environments
DESCRIPTION: Example of a Nightwatch configuration file with multiple test environments defined, including default, safari, and firefox. It demonstrates how to set specific settings for different browsers.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },

    safari: {
      desiredCapabilities : {
        browserName : 'safari',
        alwaysMatch: {
          acceptInsecureCerts: false
        }
      },
      webdriver: {
        port: 4445,
        start_process: true,
        server_path: '/usr/bin/safaridriver'
      }
    },

    firefox: {
      desiredCapabilities : {
        browserName : 'firefox'
      },

      webdriver: {
        start_process: true,
        port: 4444,
        server_path: require('geckodriver').path
      }
    }
  }
}

----------------------------------------

TITLE: Defining BDD Test Suite in JavaScript for Nightwatch
DESCRIPTION: This snippet demonstrates how to define a basic BDD test suite using Nightwatch. It includes a single test case that searches for 'nightwatch' on Ecosia and verifies the results.

LANGUAGE: javascript
CODE:
describe('Ecosia', function() {
  
  // test() and specify() is also available
  
  it('demo test', function(browser) {
    browser
      .url('https://www.ecosia.org/')
      .setValue('input[type=search]', 'nightwatch')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  });
});

----------------------------------------

TITLE: Creating Basic Class-based Page Commands in Nightwatch
DESCRIPTION: This example demonstrates how to create basic class-based page commands in Nightwatch 2. It includes methods for basic commands, dropdown selection, and naming.

LANGUAGE: javascript
CODE:
module.exports = class {
  basicCommand() {
    return {
      basicResult: 'from-helper-class'
    };
  }
  
  dropdownSelect() {
    return this;
  }
  
  dropdownSelectByText() {
    return this;
  }
  
  name() {
    return this;
  }
};

----------------------------------------

TITLE: Element Property Retrieval in Nightwatch
DESCRIPTION: Methods for getting element properties such as text, value, tag name, attributes, CSS properties, ID, accessibility name, and rect.

LANGUAGE: javascript
CODE:
browser.element.find('selector').getText();
browser.element.find('selector').getValue();
browser.element.find('selector').getTagName();
browser.element.find('selector').getAttribute();
browser.element.find('selector').getCssProperty();
browser.element.find('selector').getId();
browser.element.find('selector').getAccessibilityName();
browser.element.find('selector').getRect();

----------------------------------------

TITLE: Configuring Github Actions Workflow for Nightwatch Tests in YML
DESCRIPTION: This YML configuration sets up a Github Actions workflow to run Nightwatch tests. It installs Node.js, sets up the environment, and executes the tests using xvfb for headless browser testing.

LANGUAGE: yml
CODE:
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Nightwatch Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: npm-install
      run: npm ci
    - run: sudo apt-get install xvfb

    - name: Run Nightwatch tests
      run: xvfb-run --auto-servernum npm test -- --env chrome

----------------------------------------

TITLE: Defining Basic Page Elements in Nightwatch.js
DESCRIPTION: Shows how to define page elements using both CSS and XPath selectors. The elements property allows defining multiple page elements with different locate strategies.

LANGUAGE: javascript
CODE:
module.exports = {
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submit: {
      selector: '//[@name="q"]',
      locateStrategy: 'xpath'
    }
  }
};

----------------------------------------

TITLE: Capturing and Logging Network Requests in Nightwatch
DESCRIPTION: This code snippet demonstrates how to use the captureNetworkRequests() method in Nightwatch to capture and log network requests made during a test. It includes logging the request number, URL, method, and headers for each network call.

LANGUAGE: javascript
CODE:
describe('capture network requests', function() {
  it('captures and logs network requests as they occur', function() {
    this.requestCount = 1;
    browser
      .captureNetworkRequests((requestParams) => {
        console.log('Request Number:', this.requestCount++);
        console.log('Request URL:', requestParams.request.url);
        console.log('Request method:', requestParams.request.method);
        console.log('Request headers:', requestParams.request.headers);
      })
      .navigateTo('https://www.google.com');
  });
});

----------------------------------------

TITLE: Executing Async Scripts with Nightwatch.js
DESCRIPTION: A complete test suite demonstrating how to execute asynchronous JavaScript in the browser using Nightwatch.js. Includes setup of global timeout, async script execution with callback handling, and proper test cleanup.

LANGUAGE: javascript
CODE:
module.exports = {
  before : function(browser) {
    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12
    browser.globals.waitForConditionTimeout = 5000;
  },

  'executeAsync example test' : function (browser) {
    browser
      .timeoutsAsyncScript(10000)
      .executeAsync(function (inputVal, done) {
          // ... do stuff with window ...
          setTimeout(done, 5000, 'result');
        },
        ['input'],
        function (resultVal) {
          console.log('result =', resultVal);
        }
      );
  },

  after : function(browser) {
    browser.end();
  }
};

----------------------------------------

TITLE: GitLab CI Configuration for Nightwatch Tests
DESCRIPTION: Create a .gitlab-ci.yml file to define the CI/CD pipeline for running Nightwatch tests. This configuration installs necessary dependencies, sets up the environment, and executes the tests using Node.js 14.19.0 as the base image.

LANGUAGE: yaml
CODE:
# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:14.19.0

cache:
  paths:
    - node_modules/

test_async:
  before_script:
    - apt-get update -q -y
    - apt-get --yes install xvfb
  script:
    # Installing Google Chrome
    - curl -sS -L https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
    - apt-get update -q -y
    - apt-get install -y google-chrome-stable
    # Installing chromedriver
    - npm install chromedriver

    # Installing Geckodriver
    - npm install geckodriver

    # installing all the packages
    - npm install 
    # Ensuring everything is installed
    - ./node_modules/.bin/chromedriver --version
    - ./node_modules/.bin/nightwatch --version
    - /usr/bin/google-chrome --version
    # Install display manager
    - Xvfb -ac :99 -screen 0 1280x1024x16 &
    - export DISPLAY=:99
    # Run nightwatch tests
    - npx nightwatch tests/ecosia.js --env chrome

----------------------------------------

TITLE: Chai-Style Assertions in Nightwatch
DESCRIPTION: Alternative assertion syntax using Chai expect() style for validating element properties and states.

LANGUAGE: javascript
CODE:
expect(element).text.to.equal();
expect(element).text.to.contain();
expect(element).text.to.match();
expect(element).value.to.equal();
expect(element).value.to.contain();
expect(element).value.to.match();
expect(brower.url()).to.equal();
expect(brower.url()).to.contain();
expect(brower.url()).to.match();
expect(element).to.be.visible();

----------------------------------------

TITLE: Configuring Nightwatch for Android Mobile App Testing
DESCRIPTION: Nightwatch configuration for Android emulators and real devices, including Appium settings and desired capabilities.

LANGUAGE: javascript
CODE:
{
    ...
    'test_settings':{
        app: {
            selenium: {
                start_process: true,
                use_appium: true,
                host: 'localhost',
                port: 4723,
                server_path: '',
                cli_args: [],
                default_path_prefix: ''
            },
            webdriver: {
                timeout_options: {
                timeout: 150000,
                retry_attempts: 3
                },
                keep_alive: false,
                start_process: false
            }
        },
        'app.android.emulator': {
            extends: 'app',
            'desiredCapabilities': {
                browserName: null,
                platformName: 'android',
                'appium:options': {
                automationName: 'UiAutomator2',
                avd: 'nightwatch-android-11',
                app: `${__dirname}/wikipedia.apk`,
                appPackage: 'org.wikipedia',
                appActivity: 'org.wikipedia.main.MainActivity',
                appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',
                chromedriverExecutable: `${__dirname}/chromedriver-mobile/chromedriver`,
                newCommandTimeout: 0
                }
            }
        },
        'app.android.real': {
            extends: 'app',
            'desiredCapabilities': {
                browserName: null,
                platformName: 'android',
                'appium:options': {
                    automationName: 'UiAutomator2',
                    app: `${__dirname}/nightwatch/sample-apps/wikipedia.apk`,
                    appPackage: 'org.wikipedia',
                    appActivity: 'org.wikipedia.main.MainActivity',
                    appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',
                    chromedriverExecutable: '',
                    newCommandTimeout: 0,
                }
            }
        },
    }
}

----------------------------------------

TITLE: Mock Server Implementation
DESCRIPTION: Example of setting up and using the built-in mock server for API testing with request assertions

LANGUAGE: javascript
CODE:
describe('api testing with supertest in nightwatch POST', function () {
  
  let server;
  
  before(async function(client) {
    server = await client.mockserver.create();
    server.setup((app) => {
      app.post('/api/v1/datasets/', function (req, res) {
        res.status(200).json({
          id: 'test-dataset-id'
        });
      });
    });
    
    await server.start(3000);
  });
  
  after(() => {
    server.close();
  });
  
  it('demo test', async function(client) {
    const req = await server.request()
      .post('/api/v1/datasets/')
      .send({name: 'medea'})
      .set('Accept', 'application/json')
      .expect(200)
      .expect('Content-Type', /json/);
    
    await client.assert.deepStrictEqual(server.route.post('/api/v1/datasets/').requestBody, {name: 'medea'});
  });
  
});

----------------------------------------

TITLE: Using Negated Assertions in Nightwatch
DESCRIPTION: Shows how to use the '.not' counterpart for assertions in Nightwatch, which asserts the opposite of the regular assertion. This example demonstrates negated element presence, visibility, and URL content checks.

LANGUAGE: javascript
CODE:
describe('Demo .not assertion', function() {
  it('demo test', function(browser) {
    browser.init();
    
    browser
      .assert.not.elementPresent('.not_present') // previously .assert.elementNotPresent()
      .assert.not.visible('.non_visible') // previously .assert.hidden()
      .assert.not.urlContains('http://');
    
    // ...
  })
})

----------------------------------------

TITLE: Configuring Page Objects Path in Nightwatch
DESCRIPTION: Configuration snippet showing how to specify the directory path where Nightwatch should look for page objects using the page_objects_path property.

LANGUAGE: javascript
CODE:
{
  "page_objects_path": ["nightwatch/pages"]
}

----------------------------------------

TITLE: Installing Nightwatch as a New Project
DESCRIPTION: Command to set up Nightwatch as a new project in a specified directory.

LANGUAGE: bash
CODE:
npm init nightwatch <directory-name>

----------------------------------------

TITLE: Complete Page Object Module Definition
DESCRIPTION: Comprehensive example showing page object structure including URL definition, elements, commands, props, and nested sections.

LANGUAGE: javascript
CODE:
module.exports = {
  url: function () {
    return this.api.launchUrl;
  },
  elements: {
    mySubmitButton: 'input[type=submit]',
    myTextInput: {
      selector: 'input[type=text]',
      locateStrategy: 'css selector'
    }
  },
  commands: [
    {
      myCustomPause: function () {
        this.api.pause(this.props.myPauseTime);
      }
    }
  ],
  props: {
    myPauseTime: 1000
  },
  sections: {
    myFooterSection: {
      selector: '#my-footer',
      locateStrategy: 'css selector',
      elements: {
        myLogo: {
          selector: '.my-logo',
          locateStrategy: 'css selector'
        }
      },
      commands: [
        {
          myMoveToLogo: function () {
            this.moveToElement('@myLogo', this.props.myLogoX, this.props.myLogoY);
          }
        }
      ],
      props: function () {
        return {
          myLogoX: 10,
          myLogoY: 10
        };
      },
      sections: {}
    }
  }
};

----------------------------------------

TITLE: Configuring BrowserStack Environment in Nightwatch
DESCRIPTION: This snippet shows how to configure the BrowserStack environment for running tests on cloud devices in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
test_settings:{
  ...
  browserstack: {
    selenium: {
      host: 'hub.browserstack.com',
      port: 443
    },
    desiredCapabilities: {
      'bstack:options': {
        userName: '<username>',
        accessKey: '<access_key>',
        appiumVersion: '2.0.0'
      }
    },
    disable_error_log: false,
    webdriver: {
      timeout_options: {
        timeout: 60000,
        retry_attempts: 3
      },
      keep_alive: true,
      start_process: false
    }
  },
  'browserstack.android': {
    extends: 'browserstack',
    'desiredCapabilities': {
      browserName: null,
      'appium:options': {
        automationName: 'UiAutomator2',
        app: 'wikipedia-sample-app',
        appPackage: 'org.wikipedia',
        appActivity: 'org.wikipedia.main.MainActivity',
        appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',
        platformVersion: '11.0',
        deviceName: 'Google Pixel 5'
      },
      appUploadUrl: 'https://raw.githubusercontent.com/priyansh3133/wikipedia/main/wikipedia.apk',
    }
  },
  'browserstack.ios': {
    extends: 'browserstack',
    'desiredCapabilities': {
      browserName: null,
      platformName: 'ios',
      'appium:options': {
        automationName: 'XCUITest',
        app: 'BStackSampleApp',
        platformVersion: '16',
        deviceName: 'iPhone 14'
      },
      appUploadUrl: 'https://www.browserstack.com/app-automate/sample-apps/ios/BStackSampleApp.ipa',
    }
  ...
}

----------------------------------------

TITLE: Using Page Objects in Nightwatch Tests
DESCRIPTION: Shows how to use defined page objects in test scripts, including navigation, assertions, and element interactions.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();

    google.navigate()
      .assert.title('Google')
      .assert.visible('@searchBar')
      .setValue('@searchBar', 'nightwatch')
      .click('@submit');

    browser.end();
  }
};

----------------------------------------

TITLE: Configuring Nightwatch for BrowserStack Integration
DESCRIPTION: This configuration sets up Nightwatch to run tests on BrowserStack. It includes settings for different browsers, BrowserStack credentials, and Selenium configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],
  
  webdriver: {
    keep_alive: true,
    timeout_options: {
      timeout: 60000,
      retry_attempts: 3
    }
  },
  
  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },
    
    browserstack: {
      selenium: {
        host: 'hub-cloud.browserstack.com',
        port: 443
      },
      
      // More info on configuring capabilities can be found on:
      // https://www.browserstack.com/automate/capabilities?tag=selenium-4
      desiredCapabilities: {
        'bstack:options' : {
          local: 'false',
          userName: '${BROWSERSTACK_USERNAME}',
          accessKey: '${BROWSERSTACK_ACCESS_KEY}',
        }
      }
    },
    
    'browserstack.chrome': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'chrome'
      }
    },
    
    'browserstack.firefox': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'firefox'
      }
    },
    
    'browserstack.ie': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'IE',
        browserVersion: '11.0',
        'bstack:options' : {
          os: 'Windows',
          osVersion: '10',
          local: 'false',
          seleniumVersion: '3.5.2',
          resolution: '1366x768'
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Android Emulator Environment in Nightwatch
DESCRIPTION: This snippet shows how to configure the Android emulator environment in the Nightwatch configuration file. It includes settings for Selenium, Appium, and desired capabilities for Android testing.

LANGUAGE: javascript
CODE:
test_settings: {
  ...
  app: {
      selenium: {
        start_process: true,
        use_appium: true,
        host: 'localhost',
        port: 4723,
        server_path: '',
        cli_args: [
        ],
      },
      webdriver: {
        timeout_options: {
          timeout: 150000,
          retry_attempts: 3
        },
        keep_alive: false,
        start_process: false
      }
  },

   'app.android.emulator': {
      extends: 'app',
      'desiredCapabilities': {
        browserName: null,
        platformName: 'android',
        'appium:options': {
          automationName: 'UiAutomator2',
          avd: 'nightwatch-android-11',
          app: `${__dirname}/nightwatch/sample-apps/wikipedia.apk`,
          appPackage: 'org.wikipedia',
          appActivity: 'org.wikipedia.main.MainActivity',
          appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',
          chromedriverExecutable: `${__dirname}/chromedriver-mobile/chromedriver`,
          newCommandTimeout: 0
        }
      }
    },
    ...
}

----------------------------------------

TITLE: Using Page Object Sections in Nightwatch Tests
DESCRIPTION: Demonstrates how to use defined page object sections in test cases, including visibility assertions and element interactions.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();
    google.expect.section('@menu').to.be.visible;

    var menuSection = google.section.menu;
    menuSection.expect.element('@mail').to.be.visible;
    menuSection.expect.element('@images').to.be.visible;

    menuSection.click('@mail');

    browser.end();
  }
};

----------------------------------------

TITLE: Implementing Asynchronous Test Hooks in Nightwatch
DESCRIPTION: This snippet shows how to implement asynchronous beforeEach and afterEach hooks in Nightwatch. It demonstrates the use of the 'done' callback to handle asynchronous operations.

LANGUAGE: javascript
CODE:
module.exports = {
  beforeEach: function(browser, done) {
    // performing an async operation
    setTimeout(function() {
      // finished async duties
      done();
    }, 100);
  },
  
  afterEach: function(browser, done) {
    // performing an async operation
    setTimeout(function() {
      // finished async duties
      done();
    }, 200);
  }
};

----------------------------------------

TITLE: Configuring Proxy Settings for BrowserStack in Nightwatch
DESCRIPTION: This snippet demonstrates how to add proxy settings in the Nightwatch configuration file for connecting to BrowserStack through a proxy server.

LANGUAGE: javascript
CODE:
  test_settings: {
    default: {
      desiredCapabilities: {
        // Your capabilities
      },
      proxy: {
        "host": "",     // "127.0.0.1"
        "port": "",     // "8081"
        "protocol": ""  // "http"
      }
    }
  }

----------------------------------------

TITLE: Asserting Page Title with Nightwatch.js expect.title()
DESCRIPTION: Demonstrates how to use the expect.title() method in Nightwatch.js to perform assertions on the page title. The example shows how to check if the title contains a specific value or matches a regular expression.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.title().to.contain('value');
  browser.expect.title().to.match(/value/);
};

----------------------------------------

TITLE: Configuring Vite Plugin with Custom Render Page
DESCRIPTION: Specify a custom test renderer in the Vite configuration.

LANGUAGE: javascript
CODE:
export default {
  plugins: [
    // ... other plugins, such as vue() or react()
    nightwatchPlugin({
      renderPage: './src/test_renderer.html'
    })
  ]
}

----------------------------------------

TITLE: Using expect.url() for URL Assertions in Nightwatch
DESCRIPTION: This code snippet demonstrates how to use the expect.url() assertion in Nightwatch to perform checks on the current page URL. It shows examples of using the 'contain' and 'endWith' assertions to verify URL properties.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.url().to.contain('https://');
  browser.expect.url().to.endWith('.org');
};

----------------------------------------

TITLE: Array-based Element Definition in Nightwatch.js
DESCRIPTION: Shows how to define elements using an array of objects, allowing combination of shared elements with page-specific ones.

LANGUAGE: javascript
CODE:
var sharedElements = {
  mailLink: 'a[href*="mail.google.com"]'
};

module.exports = {
  elements: [
    sharedElements,
    { searchBar: 'input[type=text]' }
  ]
};

----------------------------------------

TITLE: Using .expect API for Element Assertions in Nightwatch
DESCRIPTION: Demonstrates how to use the .expect API to assert the presence and visibility of an element on a web page. This example shows basic usage of the expect.element() method with chained assertions.

LANGUAGE: javascript
CODE:
describe('expect example', function() {
  it('sample test', function (browser) {
    // start with identifying the element
    // and then assert the element is present
    browser.expect.element('#main').to.be.present;

    // or assert the element is visible
    browser.expect.element('#main').to.be.visible;
  });
}

----------------------------------------

TITLE: Chaining Relative Locators in Nightwatch.js
DESCRIPTION: Shows how to chain multiple relative locators to precisely locate an element based on its position relative to other elements. This snippet locates a button below an email input and to the right of a cancel button.

LANGUAGE: javascript
CODE:
locateWith(By.tagName('button'))
  .below(By.id('email')
  .toRightOf(By.css('#cancel')));

----------------------------------------

TITLE: Using Pseudo-selectors with Page Object Elements in Nightwatch
DESCRIPTION: This snippet demonstrates how to use CSS pseudo-selectors with named page object elements in Nightwatch tests.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    google.waitForElementVisible('@searchBar:first-child');
    
    google.waitForElementVisible('@searchBar:nth-child(1)');
  }
};

----------------------------------------

TITLE: Defining Class-Based Page Commands in Nightwatch
DESCRIPTION: This snippet illustrates how to define page commands using an ES6 class in Nightwatch 2+. It includes several basic command methods that can be used in page objects.

LANGUAGE: javascript
CODE:
module.exports = class {
  basicCommand() {
    return {
      basicResult: 'from-helper-class'
    };
  }
  
  dropdownSelect() {
    return this;
  }
  
  dropdownSelectByText() {
    return this;
  }
  
  name() {
    return this;
  }
};

----------------------------------------

TITLE: Configuring Nightwatch with Chrome-Local Environment
DESCRIPTION: Extends the Nightwatch configuration to include a 'chrome-local' environment for Google Chrome testing.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],
  
  test_settings: {
    default: {
      launch_url: 'https://home.cern',
      webdriver: {
        start_process: true,
        server_path: ''
      }
    },
    'chrome-local': {
      desiredCapabilities: {
        browserName: 'chrome'
      }
    }
  }
}

----------------------------------------

TITLE: Using Placeholder Text Selectors in Nightwatch
DESCRIPTION: Shows how to find elements using placeholder text, which is common in form elements and search bars. Includes examples for single and multiple element selection.

LANGUAGE: javascript
CODE:
// Find the search bar with placeholder text 'Search here...'
browser.element.findByPlaceholderText('Search here...');

// Find all elements with placeholder text 'Enter here'
browser.element.findAllByPlaceholderText('Enter here');

LANGUAGE: typescript
CODE:
// Find the search bar with placeholder text 'Search here...'
browser.element.findByPlaceholderText('Search here...');

// Find all elements with placeholder text 'Enter here'
browser.element.findAllByPlaceholderText('Enter here');

----------------------------------------

TITLE: Disabling Selected Accessibility Rules with Nightwatch
DESCRIPTION: This snippet demonstrates how to run all accessibility tests while excluding specific rules. It navigates to a URL, injects the aXe library, and then runs accessibility tests on the body element, disabling the 'color-contrast' and 'region' rules.

LANGUAGE: javascript
CODE:
describe('accessibility testing', function() {
  
  it('accessibility rule subset', function(browser) {
    browser
      .navigateTo('https://www.w3.org/WAI/demos/bad/after/home.html')
      .axeInject()
      .axeRun('body', {
        rules: {
            'color-contrast': {
                enabled: false
            },
            'region': {
                enabled: false
            }
        }
    });
  });
});

----------------------------------------

TITLE: Basic Manual Nightwatch Configuration
DESCRIPTION: A simple Nightwatch JSON configuration file for manual setup, using ChromeDriver. It defines src_folders, webdriver settings, and basic test settings for Chrome.

LANGUAGE: javascript
CODE:
{
  "src_folders" : ["tests"],

  "webdriver" : {
    "start_process": true,
    "server_path": "node_modules/.bin/chromedriver",
    "port": 9515
  },

  "test_settings" : {
    "default" : {
      "desiredCapabilities": {
        "browserName": "chrome"
      }
    }
  }
}

----------------------------------------

TITLE: Writing a Sample Nightwatch Test
DESCRIPTION: Defines a simple Nightwatch test that opens a browser, checks the page title, and ends the session.

LANGUAGE: javascript
CODE:
describe('sample nightwatch test', function() {
  it('opens the browser and checks for input', function(browser) {
    browser
      .init()
      .assert.titleEquals('Home | CERN')
      .end();
  });
})

----------------------------------------

TITLE: Complete BDD Syntax Example in Nightwatch
DESCRIPTION: Provides a comprehensive example of the BDD syntax in Nightwatch, including various configuration options, hooks, and test cases.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // All current settings are available via this.settings
  // console.log('Settings', this.settings);
  
  // testsuite specific capabilities
  // this.desiredCapabilities = {};
  
  // Enable this if the current test is a unit/integration test (i.e. no Webdriver session will be created)
  // this.unitTest = false
  
  // Set this to false if you'd like the browser window to be kept open in case of a failure or error (useful for debugging)
  // this.endSessionOnFail = true
  
  // Set this to false if you'd like the rest of the test cases/test steps to be executed in the event of an assertion failure/error
  // this.skipTestcasesOnFail = true
  
  // Set this to true if you'd like this test suite to be skipped by the test runner
  // this.disabled = false
  
  // this.retries(3);
  // this.suiteRetries(2);
  
  // Control the assertion and element commands timeout until when an element should be located or assertion passed
  // this.timeout(1000)
  
  // Controll the polling interval between re-tries for assertions or element commands
  // this.retryInterval(100);
  
  before(function(browser) {
    this.homepage = browser.page.home();
  });
  
  it('startHomepage', () => {
    this.homepage.navigate();
    this.homepage.expect.section('@indexContainer').to.be.not.visible;
  });
  
  
  // Run only this testcase
  /*
  it.only('startHomepage', () => {
    this.homepage.navigate();
  });
  */ 
  
  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()
  xtest('async testcase', async browser => {
    const result = await browser.getText('#navigation');
    console.log('result', result.value)
  });
  
  test('version dropdown is enabled', browser => {
    const navigation = this.homepage.section.navigation;
    const navbarHeader = navigation.section.navbarHeader;
    
    navbarHeader.expect.element('@versionDropdown').to.be.enabled;
  });
  
  after(browser => browser.end());
});

----------------------------------------

TITLE: Previewing Components in Nightwatch
DESCRIPTION: Run component tests in preview mode using the --preview CLI argument, which opens the Vite test renderer and pauses execution indefinitely. This is useful for development with Hot Module Replacement (HMR).

LANGUAGE: bash
CODE:
npx nightwatch test/components --preview

LANGUAGE: bash
CODE:
npx nightwatch test/components --env chrome,firefox --preview

----------------------------------------

TITLE: Defining BDD Test Suite in TypeScript for Nightwatch
DESCRIPTION: This snippet shows how to define a BDD test suite using TypeScript with Nightwatch. It exports a test object that performs a search on Ecosia and verifies the results.

LANGUAGE: typescript
CODE:
import {NightwatchTests} from 'nightwatch';

const Ecosia: NightwatchTests = {
  'demo test': () => {
    browser
      .url('https://www.ecosia.org/')
      .setValue('input[type=search]', 'nightwatch')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

export default Ecosia;

----------------------------------------

TITLE: Basic User Actions Example with Nightwatch
DESCRIPTION: Demonstrates using the Actions API to perform drag-and-drop, context click, and double click operations on a GitHub button element. Shows initialization of the actions chain and element handling.

LANGUAGE: javascript
CODE:
describe('example with user actions api', function () {

  before(browser => browser.navigateTo('https://nightwatchjs.org'));

  it('demo test', async function (browser) {
    // retrieve the element; the actions api requires Selenium WebElement objects,
    //  which can be retrieved using the global element() utility
    const btnElement = await element('a.btn-github').findElement();

    await browser.perform(function() {
      // initiate the actions chain
      const actions = this.actions({async: true});

      return actions
        .dragAndDrop(btnElement, {x: 100, y: 100})
        .pause(500)
        .contextClick(btnElement)
        .pause(500)
        .doubleClick(btnElement)
        .pause(500)
    });
  });
});

----------------------------------------

TITLE: Text Start/End Assertions in Nightwatch
DESCRIPTION: Examples of asserting text content starts or ends with specific values.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.endWith('Watch');

  browser.expect.element('#main').text.to.startWith('The');
};

----------------------------------------

TITLE: Using Relative Locators in Nightwatch.js
DESCRIPTION: Illustrates the use of relative locators in Nightwatch.js to find elements based on their spatial relationship to other elements. This example locates a password input field below an email input and sets its value.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));
    
    browser
      .navigateTo('https://archive.org/account/login')
      .setValue(passwordElement, 'password')
      .assert.valueEquals('input[type=password]', 'password');
  }
};

----------------------------------------

TITLE: Debugging React Component with Storybook in Nightwatch
DESCRIPTION: Example of a React component story with a play function for simulating user interactions. The debugger statement is used to add a breakpoint for debugging with browser devtools.

LANGUAGE: javascript
CODE:
import { userEvent, within } from '@storybook/testing-library';
import Form from './Form.jsx';

export default {
  title: 'Form',
  component: Form,
}

const Template = (args) => <Form {...args} />

// Component story for an empty form
export const EmptyForm = Template.bind({});

// Component story simulating filling in the form
export const FilledForm = Template.bind({});

FilledForm.play = async ({ canvasElement }) => {
  
  // Starts querying the component from its root element
  const canvas = within(canvasElement);
  
  debugger;
  
  // 👇 Simulate interactions with the component
  await userEvent.type(canvas.getByTestId('new-todo-input'), 'outdoors hike');
  await userEvent.click(canvas.getByRole('button'));
};

FilledForm.test = async (browser, { component }) => {
  // 👇 Run commands and assertions in the Nightwatch context
  await expect(component).to.be.visible;
}

----------------------------------------

TITLE: Configuring Nightwatch for iOS Mobile App Testing
DESCRIPTION: Nightwatch configuration for iOS simulators and real devices, including Appium settings and desired capabilities.

LANGUAGE: javascript
CODE:
{
    ...
    'test_settings':{
        app: {
            selenium: {
                start_process: true,
                use_appium: true,
                host: 'localhost',
                port: 4723,
                server_path: '',
                cli_args: [],
                default_path_prefix: ''
            },
            webdriver: {
                timeout_options: {
                timeout: 150000,
                retry_attempts: 3
                },
                keep_alive: false,
                start_process: false
            }
        },
        
        'app.ios.simulator': {
            extends: 'app',
            'desiredCapabilities': {
                browserName: null,
                platformName: 'ios',
                'appium:options': {
                automationName: 'XCUITest',
                deviceName: 'iPhone 13',
                app: `${__dirname}/wikipedia.zip`,
                bundleId: 'org.wikimedia.wikipedia',
                newCommandTimeout: 0
                }
            }
        },
        
        'app.ios.real': {
            extends: 'app',
            'desiredCapabilities': {
                browserName: null,
                platformName: 'ios',
                'appium:options': {
                    automationName: 'XCUITest',
                    app: `${__dirname}/wikipedia.zip`,
                    bundleId: 'org.wikimedia.wikipedia',
                    newCommandTimeout: 0,
                }
            }
        },
    }
}

----------------------------------------

TITLE: Running Nightwatch with Debugging Flags
DESCRIPTION: Command to run a specific story with debugging enabled, using the --devtools and --debug flags to inject the .debug() command after component rendering.

LANGUAGE: bash
CODE:
npx nightwatch src/stories/Form.stories.jsx --env chrome --devtools --debug --story=FilledForm

----------------------------------------

TITLE: Writing Async Test Function in Nightwatch
DESCRIPTION: This snippet demonstrates how to write a Nightwatch test using an async function. It shows how to use the await operator to get window handles and switch to a different window.

LANGUAGE: javascript
CODE:
module.exports = {
  'demo test async': async function (browser) {
    // get the available window handles
    const result = await browser.windowHandles();
    console.log('result', result);
    
    // switch to the second window
    // await is not necessary here since we're not interested in the result
    browser.switchWindow(result.value[1]);
  }
};

----------------------------------------

TITLE: Configuring iOS Simulator Environment in Nightwatch
DESCRIPTION: This snippet shows how to configure the iOS simulator environment in the Nightwatch configuration file. It includes desired capabilities for iOS testing.

LANGUAGE: javascript
CODE:
test_setting:{
  ...
  'app.ios.simulator': {
      extends: 'app',
      'desiredCapabilities': {
        browserName: null,
        platformName: 'ios',
        'appium:options': {
          automationName: 'XCUITest',
          deviceName: 'iPhone 13',
          app: `${__dirname}/nightwatch/sample-apps/wikipedia.zip`,
          bundleId: 'org.wikimedia.wikipedia',
          newCommandTimeout: 0
        }
      }
    },
  ...
}

----------------------------------------

TITLE: Using 'browser' Object in Nightwatch Test (JavaScript)
DESCRIPTION: Demonstrates how to use the 'browser' object in a Nightwatch test script. The 'browser' object is passed as an argument to the test function.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function (browser) {
    browser.init();
  }
};

----------------------------------------

TITLE: Using Standard Mocha with Nightwatch
DESCRIPTION: Example of how to use standard Mocha to run Nightwatch tests, including initialization of the Nightwatch client and browser, and setting up test hooks.

LANGUAGE: javascript
CODE:
var nightwatch = require('nightwatch');

describe('Github', function() {
  var client = nightwatch.initClient({
    silent : true
  });
  
  var browser = client.api();
  
  this.timeout(99999999);
  
  before(function() {
    
    browser.perform(function() {
      console.log('beforeAll')
    });
    
  });
  
  beforeEach(function(done) {
    browser.perform(function() {
      console.log('beforeEach')
    });
    
    client.start(done);
  });
  
  
  it('Demo test GitHub', function (done) {
    browser
      .url('https://github.com/nightwatchjs/nightwatch')
      .waitForElementVisible('body', 5000)
      .assert.title('nightwatchjs/nightwatch · GitHub')
      .waitForElementVisible('body', 1000)
      .assert.visible('.container .breadcrumb a span')
      .assert.containsText('.container .breadcrumb a span', 'nightwatch', 'Checking project title is set to nightwatch');
    
    client.start(done);
  });
  
  afterEach(function() {
    browser.perform(function() {
      console.log('afterEach')
    });
  });
  
  after(function(done) {
    browser.end(function() {
      console.log('afterAll')
    });
    
    client.start(done);
  });
  
});


----------------------------------------

TITLE: Complete React Component Test Example
DESCRIPTION: Full example of a React component test with props and assertions

LANGUAGE: javascript
CODE:
describe('user info test', function() {
  let component;
  
  before(async () => {
    component = await browser.mountComponent('/src/components/UserInfo.jsx', function() {
      return {
        date: new Date(),
        text: 'I hope you enjoy reading Ulysses!',
        author: {
          name: 'Leopold Bloom',
          avatarUrl: 'https://upload.wikimedia.org/wikipedia/commons/5/52/Poldy.png'
        }
      }
    });
  });
  
  it('should render the component without error', function() {
    browser.expect(component).to.be.visible;
  })
})

----------------------------------------

TITLE: Skipping Individual Test Case with BDD Syntax
DESCRIPTION: Demonstrates how to skip a single test case using BDD describe interface with xtest(). Also applicable with test.skip(), it.skip(), and xit().

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  
  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()
  xtest('async testcase', async browser => {
    const result = await browser.getText('#navigation');
    console.log('result', result.value)
  });
});


----------------------------------------

TITLE: Using Promises in Nightwatch Test Callbacks
DESCRIPTION: This example demonstrates how to use Promises in Nightwatch test callbacks. It includes both a regular test function and an async function using await.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function (browser) {
    browser
      .init()
      .getText("#main ul li", function(result) {
        return new Promise(function(resolve, reject) {
          setTimeout(function() {
            console.log('Value:', result.value);
            resolve();
          }, 1000);
        });
      })
      .click('#login button');
  },
  
  demoTestAsync: async function(browser) {
    const text = await browser.init().getText("#main ul li", function(result) {
      return Promise.resolve(result.value);
    });              
    
    console.log('The text is', text);
  }
};

----------------------------------------

TITLE: Configuring Nightwatch Plugin
DESCRIPTION: Basic configuration to add the API testing plugin to Nightwatch configuration file

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/apitesting']
  
  // other Nightwatch settings...
}

----------------------------------------

TITLE: Implementing Basic Element Assertions with Nightwatch Expect API
DESCRIPTION: Demonstrates basic usage of Nightwatch's expect API for performing element assertions. Shows how to check for element presence and visibility using chain-able BDD-style syntax.

LANGUAGE: javascript
CODE:
describe('expect example', function() {
  it('sample test', function (browser) {
    // start with identifying the element
    // and then assert the element is present
    browser.expect.element('#main').to.be.present;
    // or assert the element is visible
    browser.expect.element('#main').to.be.visible;
  });
}

----------------------------------------

TITLE: Sending Keys to Elements in Nightwatch
DESCRIPTION: Demonstrates how to type text into input fields and use special key constants in Nightwatch. Examples include typing text and pressing the Enter key.

LANGUAGE: javascript
CODE:
// Type in 'Nightwatch' into input field search
browser.element.findByPlaceholderText('search').sendKeys('Nightwatch');

//or

// Type in 'John Doe' into the username field and press enter
browser.element.findByLabelText('username').sendKeys(['Nightwatch', browser.Keys.ENTER]);

LANGUAGE: typescript
CODE:
// Type in 'Nightwatch' into input field search
browser.element.findByPlaceholderText('search').sendKeys('Nightwatch');

or
// Type in 'John Doe' into the username field and press enter
browser.element.findByLabelText('username').sendKeys(['Nightwatch', browser.Keys.ENTER]);

----------------------------------------

TITLE: Chaining Selectors in Nightwatch 3
DESCRIPTION: Demonstrates how to use the new chaining capability for selectors in Nightwatch v3. This example shows how to find an element by ID and then by text content before performing a click action.

LANGUAGE: javascript
CODE:
browser.element.find('#selector').findByText('text').click();

----------------------------------------

TITLE: Running Nightwatch with Specific Environment
DESCRIPTION: Command-line example showing how to run Nightwatch tests using a specific environment configuration using the --env flag.

LANGUAGE: bash
CODE:
nightwatch --env integration

----------------------------------------

TITLE: Retrieving All Cookies with Nightwatch.js
DESCRIPTION: This snippet demonstrates how to retrieve all cookies from the browser using the .getCookies() method in Nightwatch.js. It logs the cookies to the console and performs assertions on the cookie count.

LANGUAGE: javascript
CODE:
module.exports = {
  'Get all cookies': function(browser) {
    browser
      .url('http://localhost')
      .getCookies(function callback(result) {
        console.log('Cookies:', result.value);
        this.assert.equal(result.value.length, 2);
      });
  }
};

----------------------------------------

TITLE: Running Nightwatch globally in Bash
DESCRIPTION: Command to run Nightwatch when installed globally, allowing execution from any location.

LANGUAGE: bash
CODE:
nightwatch [source] [options]

----------------------------------------

TITLE: Running Specific Test Files
DESCRIPTION: Examples of running single or multiple test files and folders

LANGUAGE: bash
CODE:
nightwatch tests/one/firstTest.js

LANGUAGE: bash
CODE:
nightwatch tests/one/firstTest.js tests/secondTest.js

LANGUAGE: bash
CODE:
nightwatch tests/one/test.js tests/utils

----------------------------------------

TITLE: Configuring Unit Test Mode in Nightwatch JSON
DESCRIPTION: Basic configuration to enable unit test mode globally in Nightwatch by setting unit_tests_mode flag.

LANGUAGE: javascript
CODE:
{
  "src_folders" : ["tests"],
  "unit_tests_mode": true
}

----------------------------------------

TITLE: Using Element Properties in Nightwatch.js
DESCRIPTION: This example shows how to use element properties to specify additional details when interacting with elements. It demonstrates selecting the second search input element on a page using the 'index' property.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    browser.setValue({selector: 'input[type=search]', index: 1}, 'nightwatch')
  }
};

LANGUAGE: typescript
CODE:
import {NightwatchTests} from 'nightwatch';

const ecosiaTest: NightwatchTests = {
'Demo test ecosia.org': () => {
  browser.setValue({selector: 'input[type=search]', index: 1}, 'nightwatch');
},


----------------------------------------

TITLE: Running Nightwatch with npx in Bash
DESCRIPTION: Command to run Nightwatch using npx when installed as a project dependency.

LANGUAGE: bash
CODE:
npx nightwatch [source] [options]

----------------------------------------

TITLE: Setting a New Cookie with Nightwatch.js
DESCRIPTION: This snippet shows how to set a new cookie using the .setCookie() method in Nightwatch.js. It sets a cookie named 'test_cookie' with a specific value and path, then retrieves and verifies the cookie.

LANGUAGE: javascript
CODE:
module.exports = {
  'Set a cookie': function(browser) {
    browser
      .url('http://localhost')
      .setCookie({
        name: "test_cookie",
        value: "test_value",
        path: "/"
      })
      .getCookie('test_cookie', function callback(result) {
        this.assert.equal(result.value, 'test_value');
      });
  }
};

----------------------------------------

TITLE: Defining Static URL in Page Object
DESCRIPTION: Example of creating a page object with a static URL property pointing to a specific webpage.

LANGUAGE: javascript
CODE:
module.exports = {
  url: 'https://google.com',
  elements: {}
};

----------------------------------------

TITLE: Implementing Custom Pause Command with Promise
DESCRIPTION: Defines a class-style custom command that implements a pause functionality using a Promise for completion.

LANGUAGE: javascript
CODE:
module.exports = class CustomPause {
  command(ms, cb) {
    // If we don't pass the milliseconds, the client will
    // be suspended indefinitely
    if (!ms) {
      return;
    }
    
    const returnValue = {
      value: 'something'
    };
    
    return new Promise((resolve) => {
      setTimeout(() => {
        // if we have a callback, call it right before the complete event
        if (cb) {
          cb.call(this.api);
        }
        
        resolve(returnValue);
      }, ms);
    });
  }
}

----------------------------------------

TITLE: Running Specific Test Groups in Nightwatch
DESCRIPTION: Command to run a specific test group in Nightwatch. This example shows how to execute only the 'smoketests' group.

LANGUAGE: bash
CODE:
nightwatch --group smoketests

----------------------------------------

TITLE: Selecting nth Element in Nightwatch
DESCRIPTION: Demonstrates how to select a specific element by its index from a list of elements using the .nth method.

LANGUAGE: javascript
CODE:
// Find the 2nd element from all ul elements
browser.element.findAll('ul').nth(2);

LANGUAGE: typescript
CODE:
// Find the 2nd element from all ul elements
browser.element.findAll('ul').nth(2);

----------------------------------------

TITLE: Retrieving Element Details in Nightwatch
DESCRIPTION: Shows various methods to get details of elements using Nightwatch, including text, value, tag name, attributes, CSS properties, ID, accessibility name, and bounding rectangle.

LANGUAGE: javascript
CODE:
// Get the text of the header
browser.element.find('#header').getText();

// Get the value of the input field
browser.element.find('#input').getValue();

// Get the tag name of an element
browser.element.findByRole('link').getTagName();

// Get the style attribute of an element
browser.element.find('#element').getAttribute('style');

// Get the background-color of an element
browser.element.find('#element').getCssProperty('background-color');

// Get the id of an element
browser.element.find('#element').getId();

// Get the accessibility name of an element
browser.element.find('#element').getAccessibilityName();

// Get the rectangle bounding box of an element
browser.element.find('#element').getRect();

LANGUAGE: typescript
CODE:
// Get the text of the header
browser.element.find('#header').getText();

// Get the value of the input field
browser.element.find('#input').getValue();

// Get the tag name of an element
browser.element.findByRole('link').getTagName();

// Get the style attribute of an element
browser.element.find('#element').getAttribute('style');

// Get the background-color of an element
browser.element.find('#element').getCssProperty('background-color');

// Get the id of an element
browser.element.find('#element').getId();

// Get the accessibility name of an element
browser.element.find('#element').getAccessibilityName();

// Get the rectangle bounding box of an element
browser.element.find('#element').getRect();

----------------------------------------

TITLE: Testing Wikipedia Android App with Nightwatch
DESCRIPTION: Example test script demonstrating how to automate the Wikipedia Android app using Nightwatch. Shows navigation, search functionality, and context switching between native and webview.

LANGUAGE: javascript
CODE:
describe('Wikipedia Android app test', function() {
    before(function(app) {
        app.click('id', 'org.wikipedia:id/fragment_onboarding_skip_button');
    });
    
    it('Search for BrowserStack', async function(app) {
        app
            .click('id', 'org.wikipedia:id/search_container')
            .sendKeys('id', 'org.wikipedia:id/search_src_text', 'browserstack')
            .debug() //Added debug command. The inspector will be at a state where previous step is executed
            .click({selector: 'org.wikipedia:id/page_list_item_title', locateStrategy: 'id', index: 0})
            .waitUntil(async function() {
                // wait for webview context to be available
                const contexts = await this.appium.getContexts();
                
                return contexts.includes('WEBVIEW_org.wikipedia');
            })
            .appium.setContext('WEBVIEW_org.wikipedia')
            .assert.textEquals('.pcs-edit-section-title', 'BrowserStack');  // command run in webview context
    });
});

----------------------------------------

TITLE: Configuring package.json for Ava
DESCRIPTION: JSON configuration in package.json to set up the test script for running Ava tests.

LANGUAGE: json
CODE:
{
 "scripts": {
   "test": "ava"
 }
}

----------------------------------------

TITLE: Skipping Test Groups in Nightwatch
DESCRIPTION: Commands to skip specific test groups during Nightwatch execution. Shows both single group and multiple group skip syntax.

LANGUAGE: bash
CODE:
nightwatch --skipgroup smoketests

LANGUAGE: bash
CODE:
nightwatch --skipgroup addressbook,chat

----------------------------------------

TITLE: Configuring Ava in package.json
DESCRIPTION: JSON configuration for Ava in package.json, including file patterns, concurrency, and other options.

LANGUAGE: json
CODE:
{
	"ava": {
		"files": [
			"test/**/*",
			"!test/exclude-files-in-this-directory",
			"!**/exclude-files-with-this-name.*"
		],
		"match": [
		//	"*oo",
		//	"!foo"
		],
		"concurrency": 5,
		"failFast": true,
		"failWithoutAssertions": false,
		"environmentVariables": {
			"MY_ENVIRONMENT_VARIABLE": "some value"
		},
		"verbose": true,
		"nodeArguments": [
			"--trace-deprecation",
			"--napi-modules"
		]
	}
}

----------------------------------------

TITLE: Implementing Custom Assertion in Nightwatch
DESCRIPTION: Defines a custom assertion in Nightwatch, including methods for formatting messages, evaluating conditions, handling command results, and executing the assertion command.

LANGUAGE: javascript
CODE:
exports.assertion = function(definition, expectedText, msg) {
  
  // If the custom commands operates with DOM elements, this options should be set
  // this.options = {
  //   elementSelector: true
  // };
  
  /**
   * Returns the message format which will be used to output the message in the console and also
   *  the arguments which will be used for replace the place holders, used in the order of appearance
   * 
   * The message format also takes into account whether the .not negate has been used
   *
   * @return {{args: [], message: string}}
   */
   this.formatMessage = function() {
     // Use this.negate to determine if ".not" is in use
     // Example: 
     const message = `Testing if the page title ${this.negate ? 'doesn't equal %s' : 'equals %s'}`;
     
     return {
       message,
       args: [`'${expected}'`]
     }
   };
  
  /**
    * Returns the expected value of the assertion which is displayed in the case of a failure
    *
    * @return {string}
    */
   this.expected = function() {
     return this.negate ? `is not '${expectedText}'` : `is '${expectedText}'`;
   };
   
   /**
    * Given the value, the condition used to evaluate if the assertion is passed
    * @param {*} value
    * @return {Boolean}
    */
   this.evaluate = function(value) {
     if (typeof value != 'string') {
       return false;
     }
     
     return value.includes(expectedText);
   };
  
  /**
   * Called with the result object of the command to retrieve the value which is to be evaluated
   *
   * @param {Object} result
   * @return {*}
   */
   this.value = function(result) {
     return result.value;
   };
  
  /**
   * When defined, this method is called by the assertion runner with the command result, to determine if the
   *  value can be retrieved successfully from the result object
   *
   * @param result
   * @return {boolean|*}
   */
   this.failure = function(result) {
     return result === false || result && result.status === -1;
   };
  
   /**
    * When defined, this method is called by the assertion runner with the command result to determine the actual
    *  state of the assertion in the event of a failure
    *
    * @param {Boolean} passed
    * @return {string}
    */
   this.actual = function(passed) {
     return passed ? `contains '${expectedText}'` : `does not contain '${expectedText}'`;
   };
  
  /**
   * The command which is to be executed by the assertion runner; Nightwatch api is available as this.api
   * @param {function} callback
   */
  this.command = function(callback) {
     // Example: this.api.getText(definition, callback);
     
     setTimeout(function() {
       // The object containing a "value" property will be passed to the .value() method to determine the value w
       // which is to be evaluated (by the .evaluate() method)
       callback({
         value: ''
       });
       
     }, 1000);   
    
  };
  
};

----------------------------------------

TITLE: Using .startWith and .endWith Assertions in Nightwatch
DESCRIPTION: Shows how to use the .startWith and .endWith methods for asserting the beginning or end of text content in elements. These methods are useful for partial string matching at specific positions.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.endWith('Watch');

  browser.expect.element('#main').text.to.startWith('The');
};

----------------------------------------

TITLE: Configuring Extended Test Environments with Selenium
DESCRIPTION: Demonstrates how to set up extended test environments using Selenium Server, including configuration for Chrome and Firefox browsers with inheritance.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },

    selenium: {
      selenium: {
        start_process: true,
        port: 4444,
        server_path: require('selenium-server').path,
        cli_args: {
          'webdriver.gecko.driver': require('geckodriver').path,
          'webdriver.chrome.driver': require('chromedriver').path
        }
      },
      webdriver: {
        start_process: false
      }
    },

    'selenium.chrome': {
      extends: 'selenium',
      desiredCapabilities: {
        browserName: 'chrome',
        chromeOptions : {
        }
      }
    },

    'selenium.firefox': {
      extends: 'selenium',
      desiredCapabilities: {
        browserName: 'firefox'
      }
    }
  }
}

----------------------------------------

TITLE: Installing Ava with npm
DESCRIPTION: Command to install Ava as a dev dependency using npm.

LANGUAGE: bash
CODE:
npm i ava --save-dev

----------------------------------------

TITLE: Running Nightwatch Tests with Specific Tag
DESCRIPTION: This command demonstrates how to run Nightwatch tests with a specific tag using the --tag command line flag. The example shows running tests tagged with 'login'.

LANGUAGE: bash
CODE:
nightwatch --tag login

----------------------------------------

TITLE: Running Nightwatch Tests on BrowserStack Android
DESCRIPTION: This command demonstrates how to run Nightwatch tests on BrowserStack Android devices using the configured environment.

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --env browserstack.android

----------------------------------------

TITLE: Implementing Swipe and Pinch Zoom Gestures with W3C Actions API
DESCRIPTION: Demonstrates how to use the W3C Actions API in Nightwatch to perform swipe and pinch zoom gestures on a mobile device. Uses multiple pointers to simulate multi-touch interactions.

LANGUAGE: javascript
CODE:
describe('W3C Actions API', function() {
  it('swipe down and zoom in the page - w3c actions api ', async function(){
    //Scroll down the page
    await  browser.perform(function(){
      const actions = this.actions();
      
      return actions.move({x: 100, y: 100}).press().move({origin: 'pointer', y: -300, duration: 50}).release();
    });
    
    await browser.pause(2000);
    
    //Pinch zoom
    await browser.perform(function(){
      const actions= this.actions();
      const pointer1 = new Device('finger-1', 'touch');
      const pointer2 = new Device('finger-2', 'touch');
      actions.insert(pointer1, pointer1.move({duration: 0, x: 100, y: 70}), pointer1.press(), {type: 'pause', duration: 500}, pointer1.move({duration: 1000, origin: 'pointer', x: 0, y: -20}), pointer1.release());
      actions.insert(pointer2, pointer2.move({duration: 0, x: 100, y: 100}), pointer2.press(), {type: 'pause', duration: 500}, pointer2.move({duration: 1000, origin: 'pointer', x: 0, y: 20}), pointer2.release());
      
      return actions; 
    });
  });
});

----------------------------------------

TITLE: Running Nightwatch Tests with Multiple Tags
DESCRIPTION: This command shows how to run Nightwatch tests with multiple tags by using multiple --tag flags. The example demonstrates running tests tagged with both 'login' and 'something_else'.

LANGUAGE: bash
CODE:
nightwatch --tag login --tag something_else

----------------------------------------

TITLE: Configuring Slack Reporter in globals.js for Nightwatch
DESCRIPTION: Set up the Slack reporter options in the globals.js file, including the Slack message function and webhook URL.

LANGUAGE: javascript
CODE:
const options = {
   // function or message string
   slack_message: function(results, options) {
     // Message payload or string  
     return {
       text: 'Test completed, passed ' + results.passed + ', failed ' + results.failed,
       username: 'Nightwatch',
       icon_emoji: ':ghost:'
     }
   },
   // This can be specified with SLACK_WEBHOOK_URL environment variable
   slack_webhook_url: 'https://hooks.slack.com/services/...'
}
module.exports = {
  reporter: (require('nightwatch-slack-reporter')(options))
}

----------------------------------------

TITLE: Nightwatch Configuration with Environment Variables
DESCRIPTION: Example of using environment variables in a Nightwatch configuration file, specifically for BrowserStack integration.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],

  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },

    browserstack: {
      webdriver: {
        start_process: false
      },

      selenium: {
        host: 'hub-cloud.browserstack.com',
        port: 443
      },

      desiredCapabilities: {
         browserName: 'chrome',
        'bstack:options' : {
          userName: '${BROWSERSTACK_USER}',
          accessKey: '${BROWSERSTACK_KEY}',
        }
      }
    }
  }
}

----------------------------------------

TITLE: Switching Between Windows in Nightwatch.js
DESCRIPTION: This code snippet shows how to switch between windows using Nightwatch.js. It opens a new window, switches to it, performs an action, and then switches back to the original window.

LANGUAGE: javascript
CODE:
describe('window switching example', function() {
  it('demonstrate the window switching', function (browser) {
    browser
      .url('http://nightwatchjs.org')
      .window.open('http://google.com')
      .window.switch(function(result) {
        console.log('New Window URL:', result.value);
        this.assert.urlContains('google.com');
      })
      .window.switchBack()
      .assert.urlContains('nightwatchjs.org');
  });
});

----------------------------------------

TITLE: Running Nightwatch Tests on BrowserStack iOS
DESCRIPTION: This command demonstrates how to run Nightwatch tests on BrowserStack iOS devices using the configured environment.

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --env browserstack.ios

----------------------------------------

TITLE: Nightwatch AWS Device Farm Configuration
DESCRIPTION: Complete Nightwatch configuration file setup for AWS Device Farm integration, including test grid URL creation and WebDriver settings

LANGUAGE: javascript
CODE:
let AWS = require("aws-sdk");
let PROJECT_ARN = "<PROJECT_ARN>";
let devicefarm = new AWS.DeviceFarm({ region: "us-west-2" });

module.exports = (async function() {
 const testGridUrlResult = await devicefarm.createTestGridUrl({
     projectArn: PROJECT_ARN,
     expiresInSeconds: 86400
 }).promise();
 const testGridUrl = new URL(testGridUrlResult.url);
 
 return {
   src_folders: [],
   page_objects_path: ['node_modules/nightwatch/examples/pages/'],
   custom_commands_path: ['node_modules/nightwatch/examples/custom-commands/'],
   custom_assertions_path: '',
   plugins: [],
   globals_path : '',
   webdriver: {},
   test_settings: {
     default: {
       disable_error_log: false,
       launch_url: 'https://nightwatchjs.org',
       screenshots: {
         enabled: false,
         path: 'screens',
         on_failure: true
       },
       desiredCapabilities: {
         browserName : 'chrome'
       },
     },
     awsDeviceFarm: {
       selenium: {
         host: testGridUrl.host,
         default_path_prefix: testGridUrl.pathname,
         port: 443
       },
       webdriver: {
         timeout_options: {
           timeout: 150000,
           retry_attempts: 3
         },
         ssl: true,
         keep_alive: true,
         start_process: false
       }
     }
   }
 }
})();

----------------------------------------

TITLE: Installing Nightwatch and ChromeDriver
DESCRIPTION: Installs Nightwatch and ChromeDriver packages from npm for browser automation testing.

LANGUAGE: bash
CODE:
npm i nightwatch chromedriver

----------------------------------------

TITLE: Selecting an Option from a Dropdown List using Nightwatch.js
DESCRIPTION: This test navigates to the W3C website, selects the 'All' option from the regions dropdown, and submits the form. It showcases dropdown interaction and form submission in Nightwatch.js.

LANGUAGE: javascript
CODE:
module.exports = {
  before : function(browser) {
    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12
    browser.globals.waitForConditionTimeout = 5000;
  },
  
  'click option from drop down list' : function (browser) {
    
    browser
      .url('https://www.w3.org/')
      .waitForElementVisible('#region_form')
      .click('#region_form select')
      .click('#region_form select option[value="all"]')
      .click('input[type=submit]', function(result) {
        this.assert.strictEqual(result.status, 0);
      });
  },
  
  after : function(browser) {
    browser.end();
  }
};

----------------------------------------

TITLE: Configuring Global Test Settings in Nightwatch
DESCRIPTION: Provides a comprehensive example of global test settings that can be configured in Nightwatch, including timeouts and error handling options.

LANGUAGE: javascript
CODE:
module.exports = {
  // An object which will be made available on the main test api, throughout the test execution
  globals: {
    // this controls whether to abort the test execution when an assertion failed and skip the rest
    // it's being used in waitFor commands and expect assertions
    abortOnAssertionFailure: true,
    
    // this controls whether to abort the test execution when an element cannot be located; an error
    // is logged in all cases, but this also enables skipping the rest of the testcase;
    // it's being used in element commands such as .click() or .getText()
    abortOnElementLocateError: false,
    
    // this will overwrite the default polling interval (currently 500ms) for waitFor commands
    // and expect assertions that use retry
    waitForConditionPollInterval: 500,
    
    // default timeout value in milliseconds for waitFor commands and implicit waitFor value for
    // expect assertions
    waitForConditionTimeout: 5000,
    
    // since 1.4.0 – this controls whether to abort the test execution when an element cannot be located; an error
    // is logged in all cases, but this also enables skipping the rest of the testcase;
    // it's being used in element commands such as .click() or .getText()
    abortOnElementLocateError: false,
    
    // this will cause waitFor commands on elements to throw an error if multiple
    // elements are found using the given locate strategy and selector
    throwOnMultipleElementsReturned: false,
    
    // By default a warning is printed if multiple elements are found using the given locate strategy
    // and selector; set this to true to suppress those warnings
    suppressWarningsOnMultipleElementsReturned: false,
    
    // controls the timeout value for async hooks. Expects the done() callback to be invoked within this time
    // or an error is thrown
    asyncHookTimeout : 10000,
    
    // controls the timeout value for when running async unit tests. Expects the done() callback to be invoked within this time
    // or an error is thrown
    unitTestsTimeout : 2000,
    
    // controls the timeout value for when executing the global async reporter. Expects the done() callback to be invoked within this time
    // or an error is thrown
    customReporterCallbackTimeout: 20000,
    
    // Automatically retrying failed assertions - You can tell Nightwatch to automatically retry failed assertions until a given timeout is reached, before the test runner gives up and fails the test.
    retryAssertionTimeout: 5000,
    
    reporter: function(results, cb) {cb(results);}
  }
};

----------------------------------------

TITLE: Running Nightwatch with Undefined Environment
DESCRIPTION: Demonstrates running Nightwatch with an undefined environment, which results in an error.

LANGUAGE: bash
CODE:
npx nightwatch --env chrome-local

----------------------------------------

TITLE: Installing AWS SDK for Node.js
DESCRIPTION: NPM command to install the AWS SDK package required for Device Farm integration

LANGUAGE: bash
CODE:
npm install  aws-sdk

----------------------------------------

TITLE: Running Nightwatch Tests with Specific Environment
DESCRIPTION: This command demonstrates how to run Nightwatch tests using a specific environment. The --env flag is used to specify the environment name.

LANGUAGE: bash
CODE:
nightwatch --env integration

----------------------------------------

TITLE: Creating Nightwatch Client - JavaScript
DESCRIPTION: Creates a new Nightwatch client instance with customizable options for WebDriver sessions. Demonstrates configuration of headless mode, browser selection, timeouts, capabilities, and other settings.

LANGUAGE: javascript
CODE:
const Nightwatch = require('nightwatch');

const client = Nightwatch.createClient({
  headless: true,
  output: true,
  silent: true, // set to false to enable verbose logging
  browserName: 'firefox', // can be either: firefox, chrome, safari, or edge

  // set the global timeout to be used with waitFor commands and when retrying assertions/expects
  timeout: 10000,

  // set the current test environment from the nightwatch config
  env: null,

  // any additional capabilities needed
  desiredCapabilities: {

  },

  // can define/overwrite test globals here; 
  // when using a third-party test runner only the global hooks onBrowserNavigate/onBrowserQuit are supported
  globals: {},

  // when the test runner used supports running tests in parallel; 
  // set to true if you need the webdriver port to be randomly generated
  parallel: false, 

  // All other Nightwatch config settings can be overwritten here, such as:
  disable_colors: false
});

----------------------------------------

TITLE: Running Nightwatch Test with Chrome-Local Environment
DESCRIPTION: Executes the Nightwatch test using the newly defined 'chrome-local' environment.

LANGUAGE: bash
CODE:
npx nightwatch --env chrome-local

----------------------------------------

TITLE: Capturing Console Messages in Nightwatch Test
DESCRIPTION: This snippet demonstrates how to use the captureBrowserConsoleLogs() command to capture and log console events in a Nightwatch test. It navigates to Google's homepage and executes a script that logs a message to the console.

LANGUAGE: javascript
CODE:
describe('capture console events', function() {
  it('captures and logs console.log event', function() {
    browser
      .captureBrowserConsoleLogs((event) => {
        console.log(event.type, event.timestamp, event.args[0].value);
      })
      .navigateTo('https://www.google.com')
      .executeScript(function() {
        console.log('here');
      }, []);
  });
});

----------------------------------------

TITLE: Configuring Multiple Test Environments in Nightwatch
DESCRIPTION: Example configuration showing how to define multiple test environments in Nightwatch's test_settings. Demonstrates setting up a default environment with base settings and an integration environment that inherits and overwrites specific values.

LANGUAGE: javascript
CODE:
{
  ...
  "test_settings" : {
    "default" : {
      "launch_url" : "http://localhost",
      "globals" : {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    },

    "integration" : {
      "launch_url" : "http://staging.host",
      "globals" : {
        "myGlobalVar" : "other value"
      }
    }
  }
}

----------------------------------------

TITLE: Element Interaction Using ScopedElement
DESCRIPTION: Shows how to interact with elements using the ScopedElement wrapper, including clicking, sending keys, and performing assertions.

LANGUAGE: javascript
CODE:
// `find()` and `findBy*()` commands return ScopedElement,
// a wrapper around the actual result, i.e., `WebElement`.
const inputElem = browser.element.find('input[name=q]');

// This wrapper provides a host of commands and assertions
// available directly on the result.
inputElem.click();
inputElem.sendKeys('Nightwatch.js');

// No need to await when performing actions or assertions
// on the element.
inputElem.assert.enabled();
inputElem.getText().assert.equals('Nightwatch.js');

// Use await to retrieve the actual result from the command.
const inputWebElem = await inputElem; // returns a `WebElement` instance
const inputText = await inputElem.getText();
const inputSize = await inputElem.getSize();

----------------------------------------

TITLE: Running Nightwatch Tests with Specific Environment
DESCRIPTION: Command to run Nightwatch tests using a specific environment (in this case, safari) defined in the configuration file.

LANGUAGE: bash
CODE:
nightwatch --env safari

----------------------------------------

TITLE: Nightwatch Configuration with Global Variables
DESCRIPTION: Example of defining global variables in a Nightwatch JSON configuration file. These variables can be accessed within test scripts.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],

  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",

      "globals": {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    }
  }
}

----------------------------------------

TITLE: Working with Multiple Elements Using ScopedElements
DESCRIPTION: Demonstrates how to work with multiple elements using ScopedElements wrapper, including counting elements and accessing specific items in the collection.

LANGUAGE: javascript
CODE:
// `findAll()` and `findAllBy*()` commands return ScopedElements,
// a wrapper around the actual result, i.e., `WebElement[]`.
const postElems = browser.element.findAll('.post');

// get count of all the posts
// use await to get the actual result
const postElemsCount = await postElems.cound();

// assert that the count is 15
postElems.count().assert.equals(15);

// assert that the 5th post contains "nightwatch" text
const post5Elem = postElems.nth(4); // 0-based indexing
post5Elem.getText().assert.contains("nightwatch");

// click on the 2nd post
postElems.nth(1).click();

// `findAll` can also be chained on `find()`
browser.element.find('body').findAll('.post').nth(1).findByText('Comments');

----------------------------------------

TITLE: Implementing Custom Reporter with Callback
DESCRIPTION: Basic implementation of a custom reporter using a callback function to signal completion. The reporter exports a write method that takes results, options, and a done callback.

LANGUAGE: javascript
CODE:
module.exports = {
  write : function(results, options, done) {
    console.log('custom reporting...');
    
    done();
  }
};

----------------------------------------

TITLE: Sample Android App Test for Wikipedia
DESCRIPTION: Example Nightwatch test script for testing the Wikipedia Android app, including searching for content and verifying results.

LANGUAGE: javascript
CODE:
describe('Wikipedia Android app test',function(){
    before(function(app) {
        app.click('id','org.wikipedia:id/fragment_onboarding_skip_button');
    });
    it('Search for BrowserStack',async function(app) {
        app
            .click('id','org.wikipedia:id/search_container')
            .sendKeys('id','org.wikipedia:id/search_src_text','browserstack')
            .click({selector: 'org.wikipedia:id/page_list_item_title',locateStrategy: 'id',index: 0})
            .waitUntil(async function() {
                const contexts = await this.appium.getContexts();
                
                return contexts.includes('WEBVIEW_org.wikipedia');
            })
            .appium.setContext('WEBVIEW_org.wikipedia')
            .assert.textEquals('.pcs-edit-section-title','BrowserStack');
    });
});

----------------------------------------

TITLE: Defining Multiple Test Environments in Nightwatch Configuration
DESCRIPTION: This snippet demonstrates how to define multiple test environments in the Nightwatch configuration file. It shows a default environment and an integration environment with different settings for launch_url and global variables.

LANGUAGE: javascript
CODE:
{
  "src_folders": ["./tests"],
  
  "test_settings" : {
    "default" : {
      "launch_url" : "http://localhost",
      "globals" : {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    },
    "integration" : {
      "launch_url" : "http://staging.host",
      "globals" : {
        "myGlobalVar" : "other value"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Mochawesome Reporter Options
DESCRIPTION: Example of how to configure Mochawesome reporter options in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
{
  ...
  test_runner: {
    type : 'mocha',
    options : {
      ui : 'bdd',
      reporter : 'mochawesome',
      reporterOptions: {
        reporterDir: './output'
      }
    }
  }
  ...
}

----------------------------------------

TITLE: Accessing Global Variables in Nightwatch Tests
DESCRIPTION: Example of how to access global variables defined in the Nightwatch configuration within a test script.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test' : function (browser) {

    console.log(browser.globals.myGlobalVar); // myGlobalVar == "some value"
  }
};

----------------------------------------

TITLE: Running Nightwatch Tests with Mochawesome Reporter
DESCRIPTION: Command to run Nightwatch tests using Mocha with the Mochawesome reporter.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/ --reporter mochawesome

----------------------------------------

TITLE: Adding Tags to Nightwatch Test Using Describe Interface
DESCRIPTION: This snippet shows how to add tags to a Nightwatch test using the describe interface. The example demonstrates tagging a test suite with 'login' and 'sanity'.

LANGUAGE: javascript
CODE:
describe('testsuite', function() {
  this.tags = ['login', 'sanity'];
  
  it('demo login test', function(browser) {
     
  });
});

----------------------------------------

TITLE: Directly Calling Selenium/Webdriver Endpoints in Custom Command
DESCRIPTION: Shows how to directly call Selenium/Webdriver HTTP endpoints from a custom command using the httpRequest method.

LANGUAGE: javascript
CODE:
module.exports = class CustomCommand {
  async command() {
    let returnValue;
    
    try {
      returnValue = await this.httpRequest({
        // the pathname of the endpoint to call
        path: '/session/:sessionId/url',
        
        // the current Selenium/Webdriver sessionId
        sessionId: this.api.sessionId,
        
        // host and port are normally not necessary, since it is the current Webdriver hostname/port
        //host: '',
        //port: '',
        
        // the body of the request
        data: {
          url: 'http://localhost/test_url'
        },
        
        method: 'POST'
      });
    } catch (err) {
      console.error('An error occurred', err);
      returnValue = {
        status: -1,
        error: err.message
      }
    }
    
    return returnValue;
  }
}

----------------------------------------

TITLE: Configuring Nightwatch with Default Environment
DESCRIPTION: Sets up the basic Nightwatch configuration with a default test environment and WebDriver settings.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],
  
  test_settings: {
    default: {
      launch_url: 'https://home.cern',
      webdriver: {
        start_process: true,
        server_path: ''
      }
    }
  }
}

----------------------------------------

TITLE: Error Handling in Async Test Hooks
DESCRIPTION: Demonstrates how to handle errors and explicitly fail tests in asynchronous test hooks by passing an error to the done callback.

LANGUAGE: javascript
CODE:
module.exports = {
  afterEach: function(browser, done) {
    // performing an async operation
    performAsync(function(err) {
      if (err) {
        done(err);
        return;
      }
      // ...
    });
  }
};

----------------------------------------

TITLE: Error Handling in Async Test Hooks
DESCRIPTION: Demonstrates how to handle errors and explicitly fail tests in asynchronous test hooks by passing an error to the done callback.

LANGUAGE: javascript
CODE:
module.exports = {
  afterEach: function(browser, done) {
    // performing an async operation
    performAsync(function(err) {
      if (err) {
        done(err);
        return;
      }
      // ...
    });
  }
};

----------------------------------------

TITLE: Sample iOS App Test for Wikipedia
DESCRIPTION: Example Nightwatch test script for testing the Wikipedia iOS app, including searching for content and verifying results.

LANGUAGE: javascript
CODE:
describe('Wikipedia iOS app test',function() {
    before(function(app) {
        app.click('xpath','//XCUIElementTypeButton[@name="Skip"]');
    });
    it('Search for BrowserStack',async function(app) {
        app
            .useXpath()
            .click('//XCUIElementTypeSearchField[@name="Search Wikipedia"]')
            .sendKeys('//XCUIElementTypeSearchField[@name="Search Wikipedia"]','browserstack')
            .click('//XCUIElementTypeStaticText[@name="BrowserStack"]')
            .waitUntil(async function() {
            const contexts = await this.appium.getContexts();
            
            return contexts.length > 1;
            },5000)
            .perform(async function() {
            const contexts = await this.appium.getContexts();
            
            await this.appium.setContext(contexts[1]);
            })
            .useCss()
            .assert.textEquals('.pcs-edit-section-title','BrowserStack');
    });
});

----------------------------------------

TITLE: Implementing Function-Style Custom Command
DESCRIPTION: Demonstrates a deprecated function-style custom command that loads an image file and calls an application-specific method.

LANGUAGE: javascript
CODE:
module.exports.command = function(file, callback) {
  var self = this;
  var imageData;
  var fs = require('fs');
  
  try {
    var originalData = fs.readFileSync(file);
    var base64Image = new Buffer(originalData, 'binary').toString('base64');
    imageData = 'data:image/jpeg;base64,' + base64Image;
  } catch (err) {
    console.log(err);
    throw "Unable to open file: " + file;
  }
  
  this.execute(function(data) {
    // execute application specific code
    App.resizePicture(data);
    return true;
  },
  [imageData], // arguments array to be passed
  function(result) {
    if (typeof callback === "function") {
      callback.call(self, result);
    }
  });
  
  return this;
};

----------------------------------------

TITLE: Installing mocha-junit-reporter
DESCRIPTION: Command to install the mocha-junit-reporter for use with Mocha in Nightwatch.

LANGUAGE: bash
CODE:
npm i mocha-junit-reporter --save-dev

----------------------------------------

TITLE: Using Callbacks with Async Functions in Nightwatch
DESCRIPTION: This example shows how to use callbacks in combination with async functions in Nightwatch. It demonstrates retrieving window handles using a callback that returns a Promise, and then switching to a specific window.

LANGUAGE: javascript
CODE:
module.exports = {
  'demo test async': async function (browser) {
    // get the available window handles
    const value = await browser.windowHandles(function(result) {
      // we only want the value, not the entire result object
      return Promise.resolve(result.value);
    });
    
    console.log('value', value);
    
    // switch to the second window
    browser.switchWindow(value[1]);
  }
};

----------------------------------------

TITLE: Using Nightwatch Protocol Actions in Custom Command
DESCRIPTION: Demonstrates how to use Nightwatch protocol actions directly in a custom command.

LANGUAGE: javascript
CODE:
module.exports = class CustomCommand {
  async command() {
    let returnValue;
    
    // list all the avaialble transport actions
    // console.log(this.transportActions);
    
    try {
      returnValue = await this.transportActions.getCurrentUrl();
    } catch (err) {
      console.error('An error occurred', err);
      returnValue = {
        status: -1,
        error: err.message
      }
    }
    
    return returnValue;
  }
}

----------------------------------------

TITLE: Installing Additional Packages for Parallel Running with Mochawesome
DESCRIPTION: Command to install additional packages required for running tests in parallel with Mochawesome reporter.

LANGUAGE: bash
CODE:
npm install mochawesome-report-generator mochawesome-merge --save-dev

----------------------------------------

TITLE: Adding Custom Reporter via External Globals in JavaScript
DESCRIPTION: This example demonstrates how to add a custom reporter using the external globals file in Nightwatch. The reporter is defined as a function that takes results and a done callback, allowing for custom logging or processing of test results.

LANGUAGE: javascript
CODE:
module.exports = {
  reporter : function(results, done) {
    console.log(results);
    done();
  }
};

----------------------------------------

TITLE: Installing Angular Plugin for Nightwatch
DESCRIPTION: Command to install the @nightwatch/angular plugin via NPM package manager

LANGUAGE: bash
CODE:
npm install @nightwatch/angular

----------------------------------------

TITLE: Configuring Nightwatch for BrowserStack in JavaScript
DESCRIPTION: This snippet shows how to configure Nightwatch to run tests on BrowserStack. It includes settings for the Selenium host, desired capabilities, and various browser configurations.

LANGUAGE: javascript
CODE:
module.exports = {
    ...,
    test_settings: {
        ...,
        browserstack: {
            selenium: {
                host: 'hub.browserstack.com',
                port: 443
            },
            // More info on configuring capabilities can be found on:
            // https://www.browserstack.com/automate/capabilities?tag=selenium-4
            desiredCapabilities: {
                'bstack:options': {
                    userName: '${BROWSERSTACK_USERNAME}',
                    accessKey: '${BROWSERSTACK_ACCESS_KEY}'
                }
            },
            
            disable_error_log: true,
            webdriver: {
                    timeout_options: {
                        timeout: 15000,
                        retry_attempts: 3
                    },
                    keep_alive: true,
                    start_process: false
                }
            },
            
            'browserstack.local': {
                extends: 'browserstack',
                desiredCapabilities: {
                    'browserstack.local': true
                }
            },
            
            'browserstack.firefox': {
                extends: 'browserstack',
                desiredCapabilities: {
                    browserName: 'firefox'
                }
            },
            
            'browserstack.local_firefox': {
                extends: 'browserstack.local',
                desiredCapabilities: {
                    browserName: 'firefox'
                }
            },
        ...
    }
}

----------------------------------------

TITLE: Installing Nightwatch Plugin via NPM
DESCRIPTION: Demonstrates how to install a Nightwatch plugin using NPM. This command installs the plugin and saves it as a dev dependency in the project.

LANGUAGE: bash
CODE:
npm i my-new-plugin --save-dev

----------------------------------------

TITLE: Basic Nightwatch Test for Mobile Web
DESCRIPTION: A sample Nightwatch test that searches for 'Night Watch' on the Rijks Museum website. Demonstrates navigation, handling cookie dialogs, and assertions in a mobile web context.

LANGUAGE: javascript
CODE:
describe('Nightwatch Website tests', function() {
    
    it('Searching the Rijksmuseum ', async function(){
    browser.navigateTo('https://www.rijksmuseum.nl/en');
    const cookieDialogVisible = await browser.isVisible({
      selector: '.cookie-consent-bar-wrap',
      suppressNotFoundErrors: true
    });
    
    if (cookieDialogVisible) {
      browser.click('.cookie-consent-bar-wrap button.link');
    }
    browser.pause(1000).click('a[aria-label="Search"]');
    
    return browser.setValue('input.search-bar-input[type=text]', ['night watch'])
      .click('button.button.search-bar-button')
      .pause(1000)
      .assert.containsText('.search-results', 'The Night Watch, Rembrandt van Rijn, 1642');
  });
});

----------------------------------------

TITLE: Implementing React Form Component
DESCRIPTION: A basic React class component implementing a form with text input and submit functionality. The component manages its state for the input field and handles form submission.

LANGUAGE: javascript
CODE:
import React from 'react';

class Form extends React.Component {
  constructor(props) {
    super(props);
    this.state = {name: ''};
  }

  handleSubmit = (e) => {
    e.preventDefault();
    if (!this.state.name.trim()) {
      return;
    }
    this.props.addTask(this.state.name);
    this.setState({name: ''});
  };

  handleChange = (e) => {
    this.setState({name: e.target.value});
  };

  render() {
    return (
      <form onSubmit={this.handleSubmit} method='post'>
        <h2 className='label-wrapper'>
          <label htmlFor='new-todo-input' className='label__lg'>
            What needs to be done?
          </label>
        </h2>
        <input
          type='text'
          id='new-todo-input'
          className='input input__lg'
          name='text'
          autoComplete='off'
          value={this.state.name}
          onChange={this.handleChange}
        />
        <button type='submit' className='btn btn__primary btn__lg'>
          Add
        </button>
      </form>
    );
  }
}

export default Form;

----------------------------------------

TITLE: Configuring Nightwatch Default Settings in JavaScript
DESCRIPTION: This code snippet defines the default configuration object for Nightwatch, including settings for custom paths, globals, webdriver, test settings, and various other options.

LANGUAGE: javascript
CODE:
module.exports = {
  custom_commands_path: null,
  custom_assertions_path: null,
  page_objects_path: null,
  globals_path: null,
  globals: {
    abortOnAssertionFailure: true,
    abortOnElementLocateError: false,
    waitForConditionPollInterval: 500,
    waitForConditionTimeout: 5000,
    throwOnMultipleElementsReturned: false,
    suppressWarningsOnMultipleElementsReturned: false,
    asyncHookTimeout: 10000,
    unitTestsTimeout: 2000,
    customReporterCallbackTimeout: 20000,
    retryAssertionTimeout: 5000,
    reporter: function(results, cb) {cb(results)}
  },
  dotenv: {},
  persist_globals: false,
  output_folder: 'tests_output',
  src_folders: null,
  live_output: false,
  disable_typescript: false,
  disable_colors: false,
  parallel_process_delay: 10,
  selenium: {
    start_process: false,
    cli_args: {},
    server_path: null,
    log_path: '',
    port: undefined,
    check_process_delay: 500,
    max_status_poll_tries: 15,
    status_poll_interval: 200
  },
  start_session: true,
  end_session_on_fail: true,
  skip_testcases_on_fail: undefined,
  test_workers: false,
  test_runner: 'default',
  webdriver: {
    start_process: false,
    cli_args: {},
    server_path: null,
    log_path: '',
    use_legacy_jsonwire: undefined,
    check_process_delay: 100,
    max_status_poll_tries: 10,
    status_poll_interval: 200,
    process_create_timeout: 120000,
    host: undefined,
    port: undefined,
    ssl: undefined,
    proxy: undefined,
    timeout_options: {
      timeout: undefined,
      retry_attempts: undefined
    },
    default_path_prefix: undefined,
    username: undefined,
    access_key: undefined
  },
  test_settings: {
  },
  launch_url: '',
  silent: true,
  output: true,
  detailed_output: true,
  output_timestamp: false,
  timestamp_format: '',
  disable_error_log: false,
  report_command_errors: false,
  screenshots: {
    enabled: false,
    filename_format,
    path: '',
    on_error: true,
    on_failure: true
  },
  log_screenshot_data: false,
  desiredCapabilities: {
    browserName: 'firefox'
  },
  exclude: null,
  filter: null,
  skipgroup: '',
  sync_test_names: true,
  skiptags: '',
  use_xpath: false,
  parallel_mode: false,
  report_prefix: '',
  unit_tests_mode: false,
  default_reporter: 'junit',
  backwards_compatibility_mode: false,
  disable_global_apis: false,
  enable_fail_fast: false
}

----------------------------------------

TITLE: Configuring Nightwatch Angular Plugin
DESCRIPTION: Basic configuration to enable the Angular plugin in Nightwatch configuration file

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/angular']
}

----------------------------------------

TITLE: Element State Assertions in Mobile Testing
DESCRIPTION: Shows how to verify element states like selected, enabled, and visible using dedicated assertion methods.

LANGUAGE: javascript
CODE:
app.assert.selected({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});
app.assert.enabled({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});
app.assert.visible({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});

----------------------------------------

TITLE: Creating Feature Branch
DESCRIPTION: Command to create and checkout a new feature branch for development.

LANGUAGE: shell
CODE:
% git checkout -b feature-branch

----------------------------------------

TITLE: Configuring Chrome User Preferences
DESCRIPTION: Example showing how to set Chrome profile preferences to disable password manager functionality

LANGUAGE: javascript
CODE:
"desiredCapabilities" : {
  "browserName" : "chrome",
  "javascriptEnabled" : true,
  "acceptSslCerts" : true,
  "chromeOptions" : {
    "prefs" : {
      "credentials_enable_service" : false,
      "profile.password_manager_enabled" : false
    }
  }
}

----------------------------------------

TITLE: Sample JUnit XML Output Format
DESCRIPTION: Example of the JUnit XML report structure generated by Nightwatch after test execution.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<testsuites errors="0"
            failures="0"
            tests="1">

  <testsuite name="duckDuckGo"
    errors="0" failures="0" hostname="" id="" package="duckDuckGo" skipped="0"
    tests="1" time="2.007" timestamp="">

    <testcase name="Search Nightwatch.js and check results" classname="duckDuckGo" time="2.007" assertions="3">
    </testcase>

  </testsuite>

</testsuites>

----------------------------------------

TITLE: Configuring Test and Suite Retries in Nightwatch
DESCRIPTION: Demonstrates how to set retry attempts for individual tests and the entire suite using this.retries() and this.suiteRetries() methods.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // how many time to retry a failed testcase inside this test suite
   this.retries(3);
   
   // how many times to retry the current test suite in case of an assertion failure or error
   this.suiteRetries(2);
   
   it('...', function() {...});
});

----------------------------------------

TITLE: Setting Debug Point in Nightwatch Mobile Test
DESCRIPTION: Example showing how to add a debug point in a Nightwatch mobile test script using the .debug() command. The test interacts with a Wikipedia search field and clicks on search results before pausing for debugging.

LANGUAGE: javascript
CODE:
app
  .useXpath()
  .click('//XCUIElementTypeSearchField[@name="Search Wikipedia"]')
  .sendKeys('//XCUIElementTypeSearchField[@name="Search Wikipedia"]','browserstack')
  .click('//XCUIElementTypeStaticText[@name="BrowserStack"]')
  .debug()

----------------------------------------

TITLE: BDD Style Expects in Mobile Testing
DESCRIPTION: Demonstrates using Chai-style expect assertions for mobile app testing, showing how to verify current activity.

LANGUAGE: javascript
CODE:
app.appium.getCurrentActivity(function(activity){
    expect(activity.value).to.equal('.page.PageActivity')
})

----------------------------------------

TITLE: Setting Mock Geolocation in Nightwatch Test
DESCRIPTION: Example showing how to set browser geolocation to Tokyo, Japan coordinates using the setGeolocation() command. Demonstrates setting latitude, longitude and accuracy parameters.

LANGUAGE: javascript
CODE:
describe('mock geolocation', function() {
  it('sets the geolocation to Tokyo, Japan', () => {
    browser
      .setGeolocation({
        latitude: 35.689487,
        longitude: 139.691706,
        accuracy: 100
      })
      .navigateTo('https://www.gps-coordinates.net/my-location')
      .pause(3000);
  });
});

----------------------------------------

TITLE: Extended Mocha Describe Syntax in Nightwatch
DESCRIPTION: Complete example showing the extended describe() syntax available when using Mocha with Nightwatch, including hooks and configuration options.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  before(function(browser) {
    this.homepage = browser.page.home();
  });

  it('startHomepage', () => {
    this.homepage.navigate();
    this.homepage.expect.section('@indexContainer').to.be.not.visible;
  });

  it.skip('async testcase', async browser => {
    const result = await browser.getText('#navigation');
    console.log('result', result.value)
  });

  after(browser => browser.end());
});

----------------------------------------

TITLE: Terminal Debugging Example for Nightwatch Mobile Tests
DESCRIPTION: Sample code demonstrating how to set up debugging in terminal console for mobile app tests. Shows the same Wikipedia search test flow with a debug point for terminal-based debugging.

LANGUAGE: javascript
CODE:
app
  .useXpath()
  .click('//XCUIElementTypeSearchField[@name="Search Wikipedia"]')
  .sendKeys('//XCUIElementTypeSearchField[@name="Search Wikipedia"]','browserstack')
  .click('//XCUIElementTypeStaticText[@name="BrowserStack"]')
  .debug()

----------------------------------------

TITLE: Accessing Section in Nightwatch Page Object
DESCRIPTION: Shows how to access a section defined in a page object using the section property of a page object instance.

LANGUAGE: javascript
CODE:
const myPageObject = browser.page.MyPage();
const mySection = myPageObject.section.MySection; // from a `sections: {}` block in page object

----------------------------------------

TITLE: Filtering Elements in Nightwatch Page Objects
DESCRIPTION: This snippet shows how to filter elements in a Nightwatch page object definition and override the filter in test commands.

LANGUAGE: javascript
CODE:
module.exports = {
  elements: {
    searchBar: {
      selector: 'input[type=text]',
      index: 1
    }
  }
};

LANGUAGE: javascript
CODE:
describe('sample test with page objects', function() {
  it('Test', function (browser) {
    var google = browser.page.google();
    
    google
      .navigate()
      .assert.title('Google');
    
    google.waitForElementVisible('@searchBar') // 2nd input element
    google.waitForElementVisible({selector:'@searchBar', index:1}, function(result){}); // 1st div
    
    google.click('@submit');
    
    browser.end();
 });
});

----------------------------------------

TITLE: Configuring Nightwatch for Sauce Labs in JavaScript
DESCRIPTION: This code snippet shows how to configure Nightwatch to run tests on Sauce Labs. It includes settings for the Selenium host, desired capabilities, and a Firefox-specific configuration.

LANGUAGE: javascript
CODE:
module.exports = {
    ...,
    test_settings: {
        ...,
        saucelabs: {
            selenium: {
                host: 'ondemand.saucelabs.com',
                port: 443
            },
            // More info on configuring capabilities can be found on:
            // https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options
            desiredCapabilities: {
                'sauce:options': {
                username: '${SAUCE_USERNAME}',
                accessKey: '${SAUCE_ACCESS_KEY}',
                screenResolution: '1280x1024'
                // https://docs.saucelabs.com/dev/cli/sauce-connect-proxy/#--region
                // region: 'us-west-1'
                // https://docs.saucelabs.com/dev/test-configuration-options/#tunnelidentifier
                // parentTunnel: '',
                // tunnelIdentifier: '',
                },
                javascriptEnabled: true,
                acceptSslCerts: true,
                // https://docs.saucelabs.com/dev/test-configuration-options/#timezone
                timeZone: 'London'
            },
            disable_error_log: false,
            webdriver: {
                start_process: false
            }
        },
        
        'saucelabs.firefox': {
            extends: 'saucelabs',
            desiredCapabilities: {
                browserName: 'firefox',
                browserVersion: 'latest',
                platformName: 'Windows 10'
            }
        },
        ...
    }
}

----------------------------------------

TITLE: Accessing Section Instance in Nightwatch
DESCRIPTION: Example showing how to access a section instance from a page object.

LANGUAGE: javascript
CODE:
const myPageObject = browser.page.MyPage();
const mySection = myPageObject.section.MySection;

----------------------------------------

TITLE: Initializing Nightwatch in App Mode
DESCRIPTION: Alternative command to initiate Nightwatch installation specifically for mobile app testing.

LANGUAGE: bash
CODE:
npm init nightwatch@latest <foldername> -- --app

----------------------------------------

TITLE: Retrieving a Specific Cookie with Nightwatch.js
DESCRIPTION: This snippet demonstrates how to retrieve a specific cookie by name using the .getCookieNamed() method in Nightwatch.js. It gets a cookie named 'test_cookie' and performs an assertion on its value.

LANGUAGE: javascript
CODE:
module.exports = {
  'Get a specific cookie': function(browser) {
    browser
      .url('http://localhost')
      .getCookieNamed('test_cookie', function callback(result) {
        this.assert.equal(result.value, 'test_value');
      });
  }
};

----------------------------------------

TITLE: Setting Test Suite Specific Capabilities in Nightwatch
DESCRIPTION: Shows how to set desired capabilities for a specific test suite using the this.desiredCapabilities property.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // testsuite specific capabilities
  this.desiredCapabilities = {
    browserName: 'firefox'
  };
  
  it('...', function() {...});
});

----------------------------------------

TITLE: Configuring Nightwatch with Environment Variables in JavaScript
DESCRIPTION: This snippet shows a Nightwatch configuration file (nightwatch.conf.js) that uses environment variables for BrowserStack credentials. It demonstrates how to structure the configuration object and incorporate environment variables using ${VARIABLE_NAME} syntax.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],
  
  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },
    
    browserstack: {
      webdriver: {
        start_process: false
      },
      
      selenium: {
        host: 'hub-cloud.browserstack.com',
        port: 443
      },
      
      desiredCapabilities: {
         browserName: 'chrome',
        'bstack:options' : {
          userName: '${BROWSERSTACK_USERNAME}',
          accessKey: '${BROWSERSTACK_ACCESS_KEY}',
        }
      }
    }
  }
}

----------------------------------------

TITLE: Running Only Specific Test Cases in Nightwatch
DESCRIPTION: Illustrates how to run only a particular test case within a test suite using 'test.only()' or 'it.only()'. This example will only execute the 'startHomepage' test case.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  
  test.only('startHomepage', () => {
    // ...
  });
  
  test('other testcase', () => {
    // ...
  });
});


----------------------------------------

TITLE: Selecting Nth Element with Nightwatch Mobile Selector
DESCRIPTION: Demonstrates how to select the nth element from a list using Nightwatch's selector object format. This approach allows targeting specific elements when multiple matches exist by specifying an index.

LANGUAGE: javascript
CODE:
app.click({selector: 'org.wikipedia:id/page_list_item_title', locateStrategy: 'id', index: n})

----------------------------------------

TITLE: Configuring Firefox Profile as a Function in Nightwatch
DESCRIPTION: This snippet demonstrates how to configure a Firefox profile as a function in Nightwatch. It uses the selenium-webdriver/firefox Options class to add an extension and set preferences.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities() {
        const firefox = require('selenium-webdriver/firefox');

        const options = new firefox.Options()
          .addExtensions('/path/to/firebug.xpi')
          .setPreference('extensions.firebug.showChromeErrors', true);
        
        return options;
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Nightwatch for CucumberJS
DESCRIPTION: Configuration setup in nightwatch.conf.js to enable CucumberJS as the test runner with parallel execution support and feature path specification.

LANGUAGE: javascript
CODE:
{
  test_runner: {
    // set cucumber as the runner
    type: 'cucumber',
    
    // define cucumber specific options
    
    options: {
      //set the feature path
      feature_path: 'examples/cucumber-js/*/*.feature',
      
      // start the webdriver session automatically (enabled by default)
      auto_start_session: true,
      
      // use parallel execution in Cucumber
      // set number of workers to use (can also be defined in the cli as --parallel 2
      parallel: 2 
    }
  },
  
  src_folders: ['examples/cucumber-js/features/step_definitions']
}

----------------------------------------

TITLE: Complete Selenium Configuration Example
DESCRIPTION: Full example configuration for running Selenium Server with Firefox, Chrome and IE support

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],
  
  test_settings: {
    default: {
    launch_url: 'https://nightwatchjs.org'
  },
  
  selenium: {
    // Selenium Server is running locally and is managed by Nightwatch
    selenium: {
      start_process: true,
      port: 4444,
      server_path: require('selenium-server').path,
      cli_args: {
        'webdriver.gecko.driver': require('geckodriver').path,
        'webdriver.chrome.driver': require('chromedriver').path,
        'webdriver.ie.driver': process.platform === 'win32' ? require('iedriver').path : ''
      }
    },
    webdriver: {
      start_process: false
    }
  },
  
  'selenium.chrome': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'chrome',
      chromeOptions: {
      }
    }
  },
  
  'selenium.firefox': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'firefox'
    }
  },
  
  'selenium.ie': {
    extends: 'selenium',
    desiredCapabilities: {
      browserName: 'internet explorer'
    }
  }
}
}

----------------------------------------

TITLE: Element Click Commands in Mobile Apps
DESCRIPTION: Commands for clicking elements in mobile apps using either selector strategy pairs or selector objects. Supports element identification by ID and index-based selection.

LANGUAGE: javascript
CODE:
// Mention the selector strategy followed by the selector itself
app.click('id','org.wikipedia:id/search_container')

// Mention a selector object and index.
app.click({selector: 'org.wikipedia:id/page_list_item_title',locateStrategy: 'id',index: n})

----------------------------------------

TITLE: Complete User Actions Example with Multiple Operations
DESCRIPTION: Shows a complete test implementation using multiple action sequences including drag-and-drop, context click, and double click operations with pauses.

LANGUAGE: javascript
CODE:
describe('example with user actions api', function () {

  before(browser => browser.navigateTo('https://nightwatchjs.org'));

  it('demo test', async function (browser) {
    // retrieve the element; the actions api requires Selenium WebElement objects,
    //  which can be retrieved using the global element() utility
    const btnElement = await element('a.btn-github').findElement();

    await browser.perform(function() {
      // initiate the actions chain
      const actions = this.actions({async: true});

      return actions
        .dragAndDrop(btnElement, {x: 100, y: 100})
        .pause(500)
        .contextClick(btnElement)
        .pause(500)
        .doubleClick(btnElement)
        .pause(500)
    });
  });
});

----------------------------------------

TITLE: Writing React Component Test with JSX
DESCRIPTION: Example of a simple React component test using Component Story Format

LANGUAGE: javascript
CODE:
import Form from '../components/Form.jsx';

export default {
  title: 'Form',
  component: Form,
}

export const FormStory = () => <Form />


----------------------------------------

TITLE: Using Chrome DevTools Protocol in Nightwatch Tests
DESCRIPTION: This snippet demonstrates how to use the Chrome DevTools Protocol in a Nightwatch test. It captures a DOM snapshot using the DOMSnapshot.captureSnapshot command.

LANGUAGE: javascript
CODE:
describe('Chrome DevTools Example', function() {
  
  it ('using CDP DOM Snapshot', async function() {
    const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {
       computedStyles: []
    });
    
    console.log('DOM', dom)
  })
});

----------------------------------------

TITLE: BrowserStack Configuration Example
DESCRIPTION: Example configuration for running tests on BrowserStack cloud testing platform

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: [],
  
  webdriver: {
    keep_alive: true,
    timeout_options: {
      timeout: 60000,
      retry_attempts: 3
    }
  }
  
  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org'
    },
    
    browserstack: {
      selenium: {
        host: 'hub-cloud.browserstack.com',
        port: 443
      },
      
      // More info on configuring capabilities can be found on:
      // https://www.browserstack.com/automate/capabilities?tag=selenium-4
      desiredCapabilities: {
        'bstack:options' : {
          local: 'false',
          userName: '${BROWSERSTACK_USER}',
          accessKey: '${BROWSERSTACK_KEY}',
        }
      }
    },
    
    'browserstack.chrome': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'chrome',
        chromeOptions : {
        }
      }
    },
    
    'browserstack.firefox': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'firefox'
      }
    },
    
    'browserstack.ie': {
      extends: 'browserstack',
      desiredCapabilities: {
        browserName: 'IE',
        browserVersion: '11.0',
        'bstack:options' : {
          os: 'Windows',
          osVersion: '10',
          local: 'false',
          seleniumVersion: '3.5.2',
          resolution: '1366x768'
        }
      }
    }
  }
}

----------------------------------------

TITLE: Taking Heap Snapshot in Nightwatch Test
DESCRIPTION: Demonstrates how to navigate to a webpage and take a heap snapshot using Nightwatch's takeHeapSnapshot() command. The snapshot is saved to a specified file path.

LANGUAGE: javascript
CODE:
describe('take heap snapshot', function() {
  it('takes heap snapshot and saves it as snapshot1.heapsnapshot file', function() {
    browser
      .navigateTo('https://www.google.com')
      .takeHeapSnapshot('heap_snaps/snapshot1.heapsnapshot');
  });
});

----------------------------------------

TITLE: Configuring Mocha Test Runner in Nightwatch
DESCRIPTION: Basic configuration for enabling Mocha test runner with custom options in Nightwatch configuration file.

LANGUAGE: javascript
CODE:
{
  // other settings...
  test_runner: {
    type : 'mocha',
    options : {
      ui : 'bdd',
      reporter : 'list'
    }
  }
}

----------------------------------------

TITLE: Modifying and Resetting Device Dimensions in Nightwatch
DESCRIPTION: Example demonstrating how to modify device dimensions and then reset them back to original values. Shows the complete workflow of setting custom dimensions and reverting them.

LANGUAGE: javascript
CODE:
describe('modify device dimensions', function() {
  it('modifies the device dimensions and then resets it', function() {
    browser
      .setDeviceDimensions({
        width: 400,
        height: 600,
        deviceScaleFactor: 50,
        mobile: true
      })
      .navigateTo('https://www.google.com')
      .pause(1000)
      .setDeviceDimensions()  // resets the device dimensions
      .navigateTo('https://www.google.com')
      .pause(1000);
  });
});

----------------------------------------

TITLE: Using Custom Command in Nightwatch Test
DESCRIPTION: Illustrates how to use a custom command (resizePicture) in a Nightwatch test scenario.

LANGUAGE: javascript
CODE:
module.exports = {
  "testing resize picture" : function (browser) {
    browser
      .url("http://app.host")
      .waitForElementVisible("body")
      .resizePicture("/var/www/pics/moon.jpg")
      .assert.element(".container .picture-large")
      .end();
  }
};

----------------------------------------

TITLE: Output of Captured Browser Exception in Nightwatch
DESCRIPTION: This snippet shows the console output when a JavaScript exception is captured using the captureBrowserExceptions() command in Nightwatch. It includes detailed information about the exception, such as its type, description, and stack trace.

LANGUAGE: bash
CODE:
Running captureBrowserExceptions():
────────────────────────────────────────────────────────────────────────────────
{
  exceptionDetails: {
    exceptionId: 1,
    text: 'Uncaught',
    lineNumber: 0,
    columnNumber: 6,
    scriptId: '55',
    url: 'https://duckduckgo.com/',
    stackTrace: { callFrames: [Array] },
    exception: {
      type: 'object',
      subtype: 'error',
      className: 'Error',
      description: 'Error: Hello world!\n' +
        '    at HTMLAnchorElement.onclick (https://duckduckgo.com/:1:7)',
      objectId: '6711588812373266697.1.1',
      preview: [Object]
    },
    executionContextId: 1
  },
  timestamp: 2022-06-10T13:14:52.722Z
}
No assertions ran.

----------------------------------------

TITLE: Running Tests with HTML Reporter
DESCRIPTION: Various CLI commands for running tests with different reporter configurations.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=html

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit --reporter=html

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=html --open

----------------------------------------

TITLE: Running Nightwatch Tests with Specific Tags
DESCRIPTION: These command-line examples show how to run Nightwatch tests with specific tags or skip tests with certain tags. This allows for selective test execution based on tag names.

LANGUAGE: bash
CODE:
nightwatch --tag login

nightwatch --tag login --tag something_else

nightwatch --skiptags login

nightwatch --skiptags login,something_else

----------------------------------------

TITLE: GET Request Test Example
DESCRIPTION: Example of testing a GET request to the pet store API, including status code and response validation

LANGUAGE: javascript
CODE:
describe('api testing', function () {
  it('get api test', async function({supertest}) {
    await supertest
      .request("https://petstore.swagger.io/v2")
      .get("/pet/findByStatus?status=available")
      .expect(200)
      .expect('Content-Type', /json/)
      .then(function(response){
          expect(response._body.length).to.be.greaterThan(0);
      });
  });
});

----------------------------------------

TITLE: Configuring JSON Reporter Output Path
DESCRIPTION: Basic configuration to specify the output folder for JSON reports in Nightwatch defaults file.

LANGUAGE: javascript
CODE:
module.exports = { output_folder: 'tests_output' }

----------------------------------------

TITLE: Extended Mocha describe() Syntax in Nightwatch
DESCRIPTION: Example of the extended describe() syntax available when using Mocha in Nightwatch, including various configuration options and hooks.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // All current settings are available via this.settings
  // console.log('Settings', this.settings);
  
  // All current cli arguments are available via this.argv
  // console.log('argv', this.argv);
  
  // The current mocha options object
  // console.log('mochaOptions', this.mochaOptions);
  
  // All current globals are available via this.globals
  // console.log('globals', this.globals);
  
  // testsuite specific capabilities
  // this.desiredCapabilities = {};
  
  // Enable this if the current test is a unit/integration test (i.e. no Webdriver session will be created)
  // this.unitTest = false
  
  // Set this to false if you'd like the browser window to be kept open in case of a failure or error (useful for debugging)
  // this.endSessionOnFail = true
  
  // Set this to false if you'd like the rest of the test cases/test steps to be executed in the event of an assertion failure/error
  // this.skipTestcasesOnFail = true
  
  // this.suiteRetries(2);
  
  // Control the assertion and element commands timeout until when an element should be located or assertion passed
  // this.waitForTimeout(1000)
  
  // Control the unit test timeout 
  // this.timeout(1000)
  
  // Controll the polling interval between re-tries for assertions or element commands
  // this.waitForRetryInterval(100);
  
  before(function(browser) {
    this.homepage = browser.page.home();
  });
  
  it('startHomepage', () => {
    this.homepage.navigate();
    this.homepage.expect.section('@indexContainer').to.be.not.visible;
  });
  
  
  // Run only this testcase
  // it.only('startHomepage', () => {
  //   this.homepage.navigate();
  // });
  
  // skipped testcase: equivalent to xit()
  it.skip('async testcase', async browser => {
    const result = await browser.getText('#navigation');
    console.log('result', result.value)
  });
  
  after(browser => browser.end());
});

----------------------------------------

TITLE: Implementing Global Test Hooks in Nightwatch
DESCRIPTION: Demonstrates how to implement global before, after, beforeEach, and afterEach hooks in Nightwatch, including environment-specific logic and browser interactions.

LANGUAGE: javascript
CODE:
module.exports = {
  'default' : {
    isLocal : true,
  },
  
  'integration' : {
    isLocal : false
  },
  
  // External before hook is ran at the beginning of the tests run, before creating the Selenium session
  before(done) {
    // run this only for the local-env
    if (this.isLocal) {
      // start the local server
      App.startServer(function() {
        // server listening
        done();
      });
    } else {
      done();
    }
  },
  
  // External after hook is ran at the very end of the tests run, after closing the Selenium session
  after(done) {
    // run this only for the local-env
    if (this.isLocal) {
      // stop the local server
      App.stopServer(function() {
        // shutting down
        done();
      });
    } else {
      done();
    }
  },
  
  // This will be run before each test suite is started
  beforeEach(browser, done) {
    // getting the session info
    browser.status(function(result) {
      console.log(result.value);
      done();
    });
  },
  
  // This will be run after each test suite is finished
  afterEach(browser, done) {
    console.log(browser.currentTest);
    done();
  },
  
  // Called right after the command .navigateTo() is finished
  async onBrowserNavigate(browser) {
    return Promise.resolve();
  },
  
  // Called right before the command .quite() is finished
  async onBrowserQuit(browser) {
    return Promise.resolve();
  }
};

----------------------------------------

TITLE: Comprehensive Unit Test Example for Utils Module
DESCRIPTION: Detailed example showing multiple unit tests for a Utils module, including time formatting and async function testing.

LANGUAGE: javascript
CODE:
var assert = require('assert');
var common = require('../../common.js');
var Utils = common.require('util/utils.js');

module.exports = {
  'test Utils' : {
    testFormatElapsedTime : function() {
      
      var resultMs = Utils.formatElapsedTime(999);
      assert.equal(resultMs, '999ms');
      
      var resultSec = Utils.formatElapsedTime(1999);
      assert.equal(resultSec, '1.999s');
      
      var resultMin = Utils.formatElapsedTime(122299, true);
      assert.equal(resultMin, '2m 2s / 122299ms');
    },
    
    testMakeFnAsync : function() {
      function asyncFn(cb) {
        cb();
      }
      
      function syncFn() {}
      
      var convertedFn = Utils.makeFnAsync(1, syncFn);
      var called = false;
      convertedFn(function() {
        called = true;
      });
      
      assert.equal(Utils.makeFnAsync(1, asyncFn), asyncFn);
      assert.ok(called);
    }
  }
};

----------------------------------------

TITLE: Running Nightwatch with Mochawesome Reporter
DESCRIPTION: This command runs Nightwatch tests using the Mochawesome reporter by passing the --reporter argument.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/ --reporter mochawesome

----------------------------------------

TITLE: Basic Cookie Assertion Syntax
DESCRIPTION: Shows the basic syntax for using expect.cookie() assertion in Nightwatch.js. Allows checking cookie values with an optional domain parameter.

LANGUAGE: javascript
CODE:
browser.expect.cookie('cookie-name', ['cookie-domain'])

----------------------------------------

TITLE: Nightwatch Test using ES Modules Syntax in JavaScript
DESCRIPTION: This snippet shows how to write a Nightwatch test using ES Modules syntax. It uses 'export default' instead of 'module.exports' to define the test suite.

LANGUAGE: javascript
CODE:
exports default {
  'Demo test ecosia.org' : function(browser) {
    browser
      .url('https://www.ecosia.org/')
      .waitForElementVisible('body')
      .assert.titleContains('Ecosia')
      .assert.visible('input[type=search]')
      .setValue('input[type=search]', 'nightwatch')
      .assert.visible('button[type=submit]')
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

----------------------------------------

TITLE: Composite Reporter Configuration
DESCRIPTION: Example of combining TeamCity reporter with HTML reporter in a custom configuration.

LANGUAGE: javascript
CODE:
const HtmlReporter = require("nightwatch-html-reporter");

const teamCityFormatter = require("nightwatch-teamcity").format;

const reporter = new HtmlReporter({ 
    reportsDirectory: "./reports",
});

module.exports = {
    write: function(results, options, done) {
        teamCityFormatter(results);
        reporter.fn(results, done);
        done();
    }
};

----------------------------------------

TITLE: Implementing Complex Mobile Gestures with W3C Actions API
DESCRIPTION: Advanced example demonstrating scroll and pinch-zoom gestures implementation using W3C Actions API with multiple touch points.

LANGUAGE: javascript
CODE:
describe('W3C Actions API', function() {
  it('swipe down and zoom in the page - w3c actions api ', async function(){
    //Scroll down the page
    await  browser.perform(function(){
      const actions = this.actions();
      
      return actions.move({x: 100, y: 100}).press().move({origin: 'pointer', y: -300, duration: 50}).release();
    });
    
    await browser.pause(2000);
    
    //Pinch zoom
    await browser.perform(function(){
      const actions= this.actions();
      const pointer1 = new Device('finger-1', 'touch');
      const pointer2 = new Device('finger-2', 'touch');
      actions.insert(pointer1, pointer1.move({duration: 0, x: 100, y: 70}), pointer1.press(), {type: 'pause', duration: 500}, pointer1.move({duration: 1000, origin: 'pointer', x: 0, y: -20}), pointer1.release());
      actions.insert(pointer2, pointer2.move({duration: 0, x: 100, y: 100}), pointer2.press(), {type: 'pause', duration: 500}, pointer2.move({duration: 1000, origin: 'pointer', x: 0, y: 20}), pointer2.release());
      
      return actions;       
    });
  });
});

----------------------------------------

TITLE: Adding Tags to Nightwatch Test Module
DESCRIPTION: This snippet demonstrates how to add tags to a Nightwatch test module using the '@tags' property. The example shows a test tagged with 'login' and 'sanity'.

LANGUAGE: javascript
CODE:
module.exports = {
  '@tags': ['login', 'sanity'],
  'demo login test': function (browser) {
     // test code
  }
};

----------------------------------------

TITLE: Configuring Allure Reporter in Globals
DESCRIPTION: Configuration code to set up Allure reporter in Nightwatch globals.js file. Implements the reporter function to process test results using the Allure reporter.

LANGUAGE: javascript
CODE:
const allureReporter = require('nightwatch-allure');
module.exports = {
  reporter: (results,done)=>{
   const reporter = new allureReporter.NightwatchAllureReporter({});
   reporter.write(results,done);
 }
};

----------------------------------------

TITLE: Skipping Tests with Specific Tags
DESCRIPTION: Command line examples showing how to skip tests with specific tags using the --skiptags flag.

LANGUAGE: bash
CODE:
nightwatch --skiptags login

LANGUAGE: bash
CODE:
nightwatch --skiptags login,something_else

----------------------------------------

TITLE: Adding Tags to Nightwatch Tests in JavaScript
DESCRIPTION: This example demonstrates how to add tags to a Nightwatch test module. Tags can be used to selectively run tests or skip specific tests during execution.

LANGUAGE: javascript
CODE:
module.exports = {
  '@tags': ['login', 'sanity'],
  'demo login test': function (browser) {
     // test code
  }
};

----------------------------------------

TITLE: Configuring Slack Reporter in nightwatch.conf.js
DESCRIPTION: Alternative setup for Slack reporter options in the Nightwatch configuration file, including the reporter function in globals.

LANGUAGE: javascript
CODE:
const options = {
   slack_message: function(results, options) {
   return {
       text: 'Test completed, passed ' + results.passed + ', failed ' + results.failed,
       username: 'Nightwatch',
       icon_emoji: ':ghost:'
       }
   },
   slack_webhook_url: 'https://hooks.slack.com/services/...'
}
module.exports = {
   src_folders: ['tests'],
   globals: {
      reporter: (require('nightwatch-slack-reporter')(options)),
    },
   // Other stuff
}

----------------------------------------

TITLE: Basic Nightwatch CLI Usage
DESCRIPTION: Basic command syntax for running Nightwatch tests from command line

LANGUAGE: bash
CODE:
nightwatch [source] [options]

----------------------------------------

TITLE: Running Selected Accessibility Rules with Nightwatch
DESCRIPTION: This snippet shows how to run only selected accessibility tests by passing specific rule IDs. It navigates to a URL, injects the aXe library, and then runs only the 'color-contrast' and 'image-alt' accessibility tests on the body element.

LANGUAGE: javascript
CODE:
describe('accessibility testing', function() {
  
  it('accessibility rule subset', function(browser) {
    browser
      .navigateTo('https://www.w3.org/WAI/demos/bad/after/home.html')
      .axeInject()
      .axeRun('body', {
        runOnly: ['color-contrast', 'image-alt'],
      });
  });
});

----------------------------------------

TITLE: Writing a Visual Regression Test in Nightwatch
DESCRIPTION: Example of a Nightwatch test using the screenshotIdenticalToBaseline assertion for visual regression testing.

LANGUAGE: javascript
CODE:
describe('VRT demo test', function() {
    it('Test Google UI loads correctly', function(browser) {
        browser
            .navigateTo('https://www.google.co.uk')
            .assert.screenshotIdenticalToBaseline('body',  /* Optional */ 'custom-name', {threshold: 0.0}, 'VRT custom-name complete.')
            .end()
    })
})

----------------------------------------

TITLE: Selecting Elements with CSS/Xpath in Nightwatch
DESCRIPTION: Demonstrates how to select elements using a CSS or Xpath selector in Nightwatch for assertions.

LANGUAGE: javascript
CODE:
browser.elements('#selector')

----------------------------------------

TITLE: Sample Nightwatch Test Example
DESCRIPTION: Example test script demonstrating a basic search functionality test on DuckDuckGo using Nightwatch.js.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Performing Actions on Specific Windows in Nightwatch.js
DESCRIPTION: This code snippet demonstrates how to perform actions on specific windows using Nightwatch.js. It opens multiple windows, retrieves their handles, and then closes a specific window based on its handle.

LANGUAGE: javascript
CODE:
describe('window actions example', function() {
  it('demonstrate actions on specific windows', function(browser) {
    let handles;
    browser
      .url('http://nightwatchjs.org')
      .window.open('http://google.com')
      .window.open('http://stackoverflow.com')
      .window.getAllHandles(function(result) {
        handles = result.value;
        this.assert.equal(handles.length, 3);
      })
      .window.close(handles[1])
      .window.getAllHandles(function(result) {
        this.assert.equal(result.value.length, 2);
      });
  });
});

----------------------------------------

TITLE: Running Single Test Case with test.only()
DESCRIPTION: Demonstrates how to run only a specific test case using test.only() while ignoring other test cases in the suite.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  
  test.only('startHomepage', () => {
    // ...
  });
  
  test('other testcase', () => {
    // ...
  });
});


----------------------------------------

TITLE: Simple Mocha Test Runner Configuration
DESCRIPTION: Minimal configuration to enable Mocha test runner in Nightwatch.

LANGUAGE: javascript
CODE:
{
  test_runner : 'mocha'
}

----------------------------------------

TITLE: Intercepting Google Search Request with Nightwatch
DESCRIPTION: Demonstrates how to use mockNetworkResponse() to intercept requests to Google search and return a custom response. The example shows setting custom status code, headers, and response body.

LANGUAGE: javascript
CODE:
describe('mock network response', function() {
  it('intercepts the request made to Google search and mocks its response', function() {
    browser
      .mockNetworkResponse('https://www.google.com/', {
        status: 200,
        headers: {
          'Content-Type': 'UTF-8'
        },
        body: 'Hello there!'
      })
      .navigateTo('https://www.google.com/')
      .pause(2000);
  });
});

----------------------------------------

TITLE: NPM Package Usage Commands
DESCRIPTION: Commands for installing and using a custom reporter NPM package with Nightwatch.

LANGUAGE: bash
CODE:
npm i <nightwatch-custom-reporter>

LANGUAGE: bash
CODE:
nightwatch --reporter=<nightwatch-custom-reporter>

----------------------------------------

TITLE: Creating Nightwatch runner script for Windows
DESCRIPTION: JavaScript code to create a Nightwatch runner script for Windows environments.

LANGUAGE: javascript
CODE:
require('nightwatch/bin/runner.js');

----------------------------------------

TITLE: Configuring Multiple Browser Environments in Nightwatch
DESCRIPTION: This snippet shows how to configure multiple browser environments (Safari and Firefox) in the Nightwatch configuration file. It includes settings for desired capabilities and WebDriver options for each browser.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],

  test_settings: {
    default: {
      webdriver: {
        start_process: true,
        server_path: ''
      }
    },

    safari: {
      desiredCapabilities : {
        browserName : 'safari',
        alwaysMatch: {
          acceptInsecureCerts: false
        }
      },
      webdriver: {
        port: 4445
      }
    },
    
    firefox: {
      desiredCapabilities : {
        browserName : 'firefox'
      },
      
      webdriver: {
        start_process: true,
        port: 4444
      }
    }
  }
}

----------------------------------------

TITLE: Running Nightwatch script on Windows
DESCRIPTION: Command to execute the Nightwatch runner script on Windows using Node.js.

LANGUAGE: bash
CODE:
node nightwatch.js [source] [options]

----------------------------------------

TITLE: Running Android Mobile App Tests
DESCRIPTION: Command to run sample tests on Android emulators using Nightwatch.

LANGUAGE: bash
CODE:
npx nightwatch nightwatch/examples/mobile-app-tests/wikipedia-android.js --env app.android.emulator

----------------------------------------

TITLE: Setting and Resetting Geolocation in Nightwatch Test
DESCRIPTION: Example demonstrating how to first set geolocation to Tokyo coordinates and then reset it back to default using setGeolocation() without arguments.

LANGUAGE: javascript
CODE:
describe('mock and reset geolocation', function() {
  it('sets the geolocation to Tokyo, Japan and then resets it', () => {
    browser
      .setGeolocation({
        latitude: 35.689487,
        longitude: 139.691706,
        accuracy: 100
      })  // sets the geolocation to Tokyo, Japan
      .navigateTo('https://www.gps-coordinates.net/my-location')
      .pause(3000)
      .setGeolocation()  // resets the geolocation
      .navigateTo('https://www.gps-coordinates.net/my-location')
      .pause(3000);
  });
});

----------------------------------------

TITLE: Uploading Files using setValue in Nightwatch
DESCRIPTION: This snippet shows the recommended approach for uploading files in Nightwatch using the setValue command. It works with both local and remote Selenium sessions.

LANGUAGE: javascript
CODE:
module.exports = {
  'Upload file test': function(browser) {
    browser
      .url('http://example.com/upload')
      .setValue('input[type="file"]', require('path').resolve(__dirname + '/testdata/sample.jpg'))
      .click('button[type="submit"]')
      .assert.textContains('#upload-status', 'File uploaded successfully')
      .end();
  }
};

----------------------------------------

TITLE: Creating New Test Project Directory
DESCRIPTION: Command to create and navigate to a new project directory for Nightwatch testing.

LANGUAGE: bash
CODE:
mkdir ./test-project && cd ./test-project

----------------------------------------

TITLE: Running Nightwatch tests from mixed sources
DESCRIPTION: Example command to run Nightwatch tests from both individual files and folders.

LANGUAGE: bash
CODE:
nightwatch tests/one/test.js tests/utils

----------------------------------------

TITLE: Running Ava tests with npm or npx
DESCRIPTION: Commands to run Ava tests using either npm or npx.

LANGUAGE: bash
CODE:
npm test

LANGUAGE: bash
CODE:
npx ava

----------------------------------------

TITLE: Accessing Test Globals in Nightwatch Tests
DESCRIPTION: Demonstrates how to access global variables in a test file using the browser.globals object.

LANGUAGE: javascript
CODE:
describe('test globals example', function() {
  
  it('Demo test', function(browser) {
    console.log(browser.globals.myGlobalVar); // myGlobalVar == "some value"
  });
  
})

----------------------------------------

TITLE: Custom Reporter Interface Implementation
DESCRIPTION: Example of implementing a custom reporter interface for Nightwatch test results output

LANGUAGE: javascript
CODE:
module.exports = {
write(results, options, done) {
  done();
}
};

----------------------------------------

TITLE: Configuring Visual Regression Settings in Nightwatch
DESCRIPTION: Example of overriding default VRT settings in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
module.exports = {
  
  //... other config
  
  '@nightwatch/vrt': {
    latest_screenshots_path: 'vrt/latest',
    latest_suffix: '',
    baseline_screenshots_path: 'vrt/baseline',
    baseline_suffix: '',
    diff_screenshots_path: 'vrt/diff',
    diff_suffix: '',
    threshold: 0.00,
    prompt: false,
    updateScreenshots: false
  },
}

----------------------------------------

TITLE: Running multiple Nightwatch tests
DESCRIPTION: Example command to run multiple individual Nightwatch test files.

LANGUAGE: bash
CODE:
nightwatch tests/one/firstTest.js tests/secondTest.js

----------------------------------------

TITLE: Running Tests with Workers via CLI
DESCRIPTION: Command line example showing how to specify the number of parallel test workers.

LANGUAGE: bash
CODE:
nightwatch --workers=4

----------------------------------------

TITLE: Configuring Basic Test Globals in Nightwatch
DESCRIPTION: Example of defining basic test globals directly in the nightwatch.json configuration file using the globals property.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],

  "globals": {
    "myGlobalVar" : "some value",
    "otherGlobal" : "some other value"
  },

  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",
    }
  }
}

----------------------------------------

TITLE: Configuring ChromeDriver Path in Nightwatch
DESCRIPTION: Configuration snippet showing how to set the ChromeDriver binary path in nightwatch.json configuration file

LANGUAGE: javascript
CODE:
"webdriver" : {
  "server_path" : "/path/to/chromedriver"
}

----------------------------------------

TITLE: Running Multiple Environments in Parallel
DESCRIPTION: Command line example demonstrating how to run tests across multiple browsers simultaneously.

LANGUAGE: bash
CODE:
nightwatch --env firefox,chrome

----------------------------------------

TITLE: Installing Appium UiAutomator2 Driver for Android
DESCRIPTION: Command to install the Appium UiAutomator2 driver for Android testing.

LANGUAGE: bash
CODE:
npx appium driver install uiautomator2

----------------------------------------

TITLE: Implementing Mock Test Double
DESCRIPTION: Example of using a mock to create expectations and verify method calls

LANGUAGE: javascript
CODE:
describe('use mocks in nightwatch', function() {
  it('mock hello obj', function({sinon}) {
    const obj = {
      hello: () => console.log('Hello!')
    }
    const sayHello = () => obj.hello();
    const mock = sinon.mock(obj).expects('hello').atLeast(1).returns(null); //set a mock on hello
    sayHello();
    mock.verify(); // mocks comes with inbuilt assertion 
  })
})

----------------------------------------

TITLE: Using Chrome DevTools Protocol Commands in Nightwatch Tests
DESCRIPTION: This code snippet shows how to use Chrome DevTools Protocol commands within a Nightwatch test. It demonstrates sending a command to get the document title and asserting the result.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo Test': function(browser) {
    browser
      .url('https://example.com')
      .cdp('Runtime.evaluate', {
        expression: 'document.title',
        returnByValue: true
      }, function(result) {
        browser.assert.equal(result.value, 'Example Domain');
      })
      .end();
  }
}

----------------------------------------

TITLE: Environment-Specific Globals Configuration
DESCRIPTION: Demonstrates how to configure environment-specific globals that override default values for different test environments.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],
  
  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",
      
      "globals": {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    },
    
    "integration": {
      "globals": {
        "myGlobalVar" : "integrated global"
      }
    }
  }
}

----------------------------------------

TITLE: Combining Workers and Multiple Environments
DESCRIPTION: Command showing how to run tests against multiple browsers in parallel while also distributing tests across workers.

LANGUAGE: bash
CODE:
nightwatch -e firefox,chrome --workers=4

----------------------------------------

TITLE: Using WebDriver Instance in Nightwatch Custom Command (JavaScript)
DESCRIPTION: Shows how to access and use the Selenium WebDriver instance in a Nightwatch custom command, wrapped in a .perform() call to retrieve the WebDriver Session.

LANGUAGE: javascript
CODE:
describe('Nightwatch APIs', function() {
  it('driver demoTest', async function () {
    const session = await browser
      .init()
      .perform(function() {
        return this.driver.getSession();
      });
  })
};

----------------------------------------

TITLE: Configuring Safari WebDriver Capabilities in Nightwatch.js
DESCRIPTION: Configuration snippet showing how to set up Safari WebDriver desired capabilities in Nightwatch.js. Includes basic configuration for enabling JavaScript and SSL certificate acceptance.

LANGUAGE: javascript
CODE:
"desiredCapabilities" : {
  "browserName" : "safari",
  "javascriptEnabled" : true,
  "acceptSslCerts" : true
}

----------------------------------------

TITLE: Pushing Changes to Remote
DESCRIPTION: Command to push local changes to remote feature branch.

LANGUAGE: shell
CODE:
% git push origin feature-branch

----------------------------------------

TITLE: Implementing Spy Test Double
DESCRIPTION: Example of using a spy to track function calls and verify execution

LANGUAGE: javascript
CODE:
describe('use spies in nightwatch', function() {
  it('should log message when called', function({sinon}) {
    const obj = {
      hello: () => console.log('Hello!')
    }
    const sayHello = () => obj.hello(); 
    const spy = sinon.spy(obj, 'hello'); // create a spy on hello
    sayHello();
    assert(spy.calledOnce);  // assert that the spy was called once
    spy.restore();  // restore original hello function
  })
})

----------------------------------------

TITLE: Configuring Basic Globals in Nightwatch
DESCRIPTION: Example of defining global variables in the Nightwatch configuration file using the 'globals' property.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],

  "globals": {
    "myGlobalVar" : "some value",
    "otherGlobal" : "some other value"
  },

  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",
    }
  }
}

----------------------------------------

TITLE: Using Page Sections in Nightwatch Tests
DESCRIPTION: This code snippet shows how to use defined page sections in Nightwatch tests. It demonstrates accessing section elements and performing assertions on them.

LANGUAGE: javascript
CODE:
describe('sample test with page objects', function() {
  it('Test', function (browser) {
    var google = browser.page.google();
    google.expect.section('@menu').to.be.visible;
    
    var menuSection = google.section.menu;
    menuSection.expect.element('@mail').to.be.visible;
    menuSection.expect.element('@images').to.be.visible;
    
    menuSection.click('@mail');
    
    browser.end();
  });
});

----------------------------------------

TITLE: Using Global 'browser' in BDD-style Nightwatch Test (JavaScript)
DESCRIPTION: Shows how to use the global 'browser' object in a BDD-style (describe/it) Nightwatch test structure.

LANGUAGE: javascript
CODE:
describe('Nightwatch APIs', function() {
  it('demoTest', function () {
    browser.init();
  })
};

----------------------------------------

TITLE: Skipping Nightwatch Tests with Specific Tag
DESCRIPTION: This command illustrates how to skip Nightwatch tests with a specific tag using the --skiptags flag. The example shows skipping tests tagged with 'login'.

LANGUAGE: bash
CODE:
nightwatch --skiptags login

----------------------------------------

TITLE: Using Nested Page Sections in Nightwatch Tests
DESCRIPTION: This code example demonstrates how to use nested page sections in Nightwatch tests. It shows accessing and interacting with elements in both parent and child sections.

LANGUAGE: javascript
CODE:
describe('sample test with page objects', function() {
  it('Test', function (browser) {
    var google = browser.page.google();
    google.expect.section('@menu').to.be.visible;
    
    var menuSection = google.section.menu;
    var appSection = menuSection.section.apps;
    menuSection.click('@appSection');
    
    appSection.expect.element('@myAccount').to.be.visible;
    appSection.expect.element('@googlePlus').to.be.visible;
    
    browser.end();
  });
});

----------------------------------------

TITLE: Cloning Nightwatch Documentation Repository
DESCRIPTION: Commands for forking and cloning the Nightwatch documentation repository locally.

LANGUAGE: shell
CODE:
% git clone git@github.com:nightwatchjs/nightwatch-docs.git
% cd nightwatch-docs

----------------------------------------

TITLE: Basic Nightwatch Help Command
DESCRIPTION: Command to display all available Nightwatch CLI options

LANGUAGE: bash
CODE:
nightwatch --help

----------------------------------------

TITLE: Advanced Class-Based Page Commands in Nightwatch
DESCRIPTION: This example demonstrates more advanced usage of class-based page commands in Nightwatch. It includes methods for custom element finding, showcasing both callback and async/await patterns.

LANGUAGE: javascript
CODE:
module.exports = class RealCommands {
  customFindElements(selector, callback = function(r) {return r}) {
    return this.page.findElements({
      selector,
      suppressNotFoundErrors: true
    }, function(result) {
      return callback(result ? result.value: []);
    });
  }
  
  async customFindElementsES6(selector) {
    const result = await this.page.findElements({
      selector,
      suppressNotFoundErrors: true
    });
    
    return result;
  }
};

----------------------------------------

TITLE: Configuring Firefox Profile with Extensions as a Function in Nightwatch
DESCRIPTION: This snippet demonstrates how to configure a Firefox profile with extensions using a function in the Nightwatch configuration file, allowing for more dynamic setup.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities() {
        const firefox = require('selenium-webdriver/firefox');
        
        const options = new firefox.Options()
          .addExtensions('/path/to/firebug.xpi')
          .setPreference('extensions.firebug.showChromeErrors', true);
        
        return options;
      }
    }
  }
};

----------------------------------------

TITLE: Defining Page-Specific Commands in Nightwatch
DESCRIPTION: This snippet demonstrates how to define custom commands for a page object in Nightwatch. It includes a 'submit' command that encapsulates the logic for clicking a submit button with appropriate waits.

LANGUAGE: javascript
CODE:
const googleCommands = {
  submit: function() {
    this.api.pause(1000);
    
    return this.waitForElementVisible('@submitButton', 1000)
      .click('@submitButton')
      .waitForElementNotPresent('@submitButton');
  }
};

module.exports = {
  commands: [googleCommands],
  elements: {
    searchBar: {
      selector: 'input[type=text]'
    },
    submitButton: {
      selector: 'input[name=btnK]'
    }
  }
};

----------------------------------------

TITLE: Direct Project Creation
DESCRIPTION: Single command to create and initialize a Nightwatch project in a new directory.

LANGUAGE: bash
CODE:
npm init nightwatch <directory-name>

----------------------------------------

TITLE: Configuring Android Real Device Environment in Nightwatch
DESCRIPTION: This snippet shows how to configure the environment for running tests on real Android devices in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
'app.android.real': {
    extends: 'app',
    'desiredCapabilities': {
      browserName: null,
      platformName: 'android',
      'appium:options': {
        automationName: 'UiAutomator2',
        app: `${__dirname}/nightwatch/sample-apps/wikipedia.apk`,
        appPackage: 'org.wikipedia',
        appActivity: 'org.wikipedia.main.MainActivity',
        appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',
        chromedriverExecutable: '',
        newCommandTimeout: 0,
      }
    }
  },

----------------------------------------

TITLE: Creating Lists in Nightwatch Documentation
DESCRIPTION: HTML markup for creating unordered and ordered lists in Nightwatch documentation to represent steps or prerequisites.

LANGUAGE: html
CODE:
<ul style="margin-top:20px">
<li>add **`-g`** option to make `nightwatch` runner available globally in your system.</li>
<li>add **`--save-dev`** option to save `nightwatch` as a `devDependency` in your <a href="https://docs.npmjs.com/files/package.json" target="_blank">package.json</a>.</li>
</ul>

LANGUAGE: html
CODE:
<ol style="margin-top:20px">
<li>1. add **`-g`** option to make `nightwatch` runner available globally in your system.</li>
<li>2. add **`--save-dev`** option to save `nightwatch` as a `devDependency` in your <a href="https://docs.npmjs.com/files/package.json" target="_blank">package.json</a>.</li>
</ol>

----------------------------------------

TITLE: DOM Element Interactions
DESCRIPTION: Examples of common DOM interactions like clicking, clearing values, and scrolling

LANGUAGE: javascript
CODE:
// Protractor
element(by.css('button')).click()
element(by.css('input')).clear()
element.all(by.css('[type="checkbox"]')).first().click()
browser.actions().mouseMove(element(by.id('my-id'))).perform()

// Nightwatch v2
browser.click(element(by.css('button')))
browser.click('button')
browser.clearValue('input')
browser.click('[type="checkbox"]')
browser.moveToElement(element(by.id('my-id'), 0, 0))
browser.perform(function() {
  return this.actions().mouseMove(element(by.id('my-id')))
})

----------------------------------------

TITLE: Capturing DOM Snapshot using Chrome DevTools Protocol in Nightwatch
DESCRIPTION: This snippet demonstrates how to use the Chrome DevTools Protocol to capture a DOM snapshot in a Nightwatch test. It utilizes the sendAndGetDevToolsCommand method to execute the DOMSnapshot.captureSnapshot command.

LANGUAGE: javascript
CODE:
describe('Chrome DevTools Example', function() {
    it ('using CDP DOM Snapshot', async function() {
        const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {
            computedStyles: []
        });
        console.log('DOM', dom)
    });
});

----------------------------------------

TITLE: Running Nightwatch Tests on Real Android Device
DESCRIPTION: This command demonstrates how to run Nightwatch tests on a real Android device using the configured environment.

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --env app.android.real

----------------------------------------

TITLE: Demonstrating Callback Function Usage in Nightwatch
DESCRIPTION: This snippet shows how to use a callback function with a Nightwatch command. The callback receives the browser object as context and the response object as an argument.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.click("#main ul li a.first", function(result) {
    this.assert.ok(browser === this);
    this.assert.ok(typeof result == "object");
  });
};

----------------------------------------

TITLE: Formatting H3 Header with ID in HTML for Nightwatch Docs
DESCRIPTION: HTML markup for creating an H3 header with a custom ID, used for specific sections in Nightwatch documentation.

LANGUAGE: html
CODE:
<h3 id="install-geckodriver">GeckoDriver</h3>

----------------------------------------

TITLE: Assertions and Expectations
DESCRIPTION: Comparison of assertion syntax between Protractor and Nightwatch

LANGUAGE: javascript
CODE:
// Protractor
expect(element(by.css('input[name="first_name"]'))).getAttribute('value').toBe('foo')
expect(element(by.id('user-name')).getText()).toBe('John Doe')

// Nightwatch v2
expect(element('input[name="first_name"]')).attribute('value').toEqual('foo');
expect.element(by.id('user-name')).text.toEqual('John Doe');

----------------------------------------

TITLE: Implementing Custom Reporter with Async/Promise
DESCRIPTION: Implementation of a custom reporter using an async function, which returns a Promise to signal completion. The reporter exports an async write method that takes results and options.

LANGUAGE: javascript
CODE:
module.exports = {
  write: async function(results, options) {
    
    console.log('custom reporting...');    
    
  }
};

----------------------------------------

TITLE: Using Chrome DevTools Protocol in Nightwatch
DESCRIPTION: This snippet demonstrates how to use the Chrome DevTools Protocol in Nightwatch to capture a DOM snapshot. It uses the sendAndGetDevToolsCommand method.

LANGUAGE: javascript
CODE:
describe('Chrome DevTools Example', function() {
  
  it ('using CDP DOM Snapshot', async function() {
    const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {
       computedStyles: []
    });
    
    console.log('DOM', dom)
  })
});

----------------------------------------

TITLE: Importing Script for Component Rendering
DESCRIPTION: Example of importing a script to render a component using the Nightwatch API.

LANGUAGE: javascript
CODE:
const formComponent = await browser
  .launchComponentRenderer()
  .importScript('/test/lib/scriptToImport.js');

----------------------------------------

TITLE: Running Nightwatch Tests on Real iOS Device
DESCRIPTION: This command demonstrates how to run Nightwatch tests on a real iOS device using the configured environment.

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --env app.ios.real

----------------------------------------

TITLE: Defining Frontmatter in Markdown for Nightwatch Documentation
DESCRIPTION: Example of required frontmatter elements for a Nightwatch documentation page, including id, title, sidebar_label, and description.

LANGUAGE: markdown
CODE:
---
id: overview-contributing
title: Overview
sidebar_label: Overview
description: Nightwatch Contribution Guidelines
---

----------------------------------------

TITLE: Mounting Angular Component Example
DESCRIPTION: Basic example of mounting an Angular component using the mountComponent command

LANGUAGE: javascript
CODE:
const component = await browser.mountComponent('/src/components/Form.component')

----------------------------------------

TITLE: Configuring Vite Plugin
DESCRIPTION: Configuration for vite-plugin-nightwatch in a Vite project

LANGUAGE: javascript
CODE:
import nightwatchPlugin from 'vite-plugin-nightwatch'

export default {
  plugins: [
	// ... other plugins, such as vue() or react()
	nightwatchPlugin()
  ]
})

----------------------------------------

TITLE: Element Selection with Selenium Locator
DESCRIPTION: Shows how to use Selenium-style locators with the by.css() method

LANGUAGE: javascript
CODE:
const locator = by.css('button[type="button"]');
const addButtonEl = element(locator);

----------------------------------------

TITLE: Configuring Test File Filtering in Nightwatch JSON
DESCRIPTION: This snippet demonstrates how to filter test files based on a specific pattern. Only files matching this pattern will be included in the test execution.

LANGUAGE: json
CODE:
"filter" : "tests/*-smoke.js"

----------------------------------------

TITLE: Skipping Nightwatch Tests with Multiple Tags
DESCRIPTION: This command demonstrates how to skip Nightwatch tests with multiple tags by providing a comma-separated list to the --skiptags flag. The example shows skipping tests tagged with 'login' and 'something_else'.

LANGUAGE: bash
CODE:
nightwatch --skiptags login,something_else

----------------------------------------

TITLE: Element Selection with WebElement Instance
DESCRIPTION: Demonstrates using a Selenium WebElement instance with the element() API

LANGUAGE: javascript
CODE:
// webElement is an instance of WebElement class from Selenium
const addButtonEl = element(webElement);

----------------------------------------

TITLE: Initializing Nightwatch for Mobile App Testing
DESCRIPTION: Command to initialize a new Nightwatch project with mobile app testing setup. It triggers a series of questions to guide the user through the installation process.

LANGUAGE: bash
CODE:
npm init nightwatch <directory-name>

----------------------------------------

TITLE: Custom Render Page Configuration
DESCRIPTION: Example of configuring a custom test renderer path

LANGUAGE: javascript
CODE:
export default {
  plugins: [
    // ... other plugins, such as vue() or react()
    nightwatchPlugin({
      renderPage: './src/test_renderer.html'
    })
  ]
}

----------------------------------------

TITLE: Selenium Capabilities Configuration Example
DESCRIPTION: Example showing how to configure Firefox capabilities using Selenium Capabilities object

LANGUAGE: javascript
CODE:
const firefox = require('selenium-webdriver/firefox');

const options = new firefox.Options()
  .addExtensions('/path/to/extension.xpi');

module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities: options
    }
  }
};

----------------------------------------

TITLE: Configuring Nightwatch for TestingBot in JavaScript
DESCRIPTION: This snippet illustrates how to configure Nightwatch to run tests on TestingBot. It includes settings for the Selenium host and browser-specific configurations for Chrome and Firefox.

LANGUAGE: javascript
CODE:
module.exports = {
    ...,
    test_settings: {
        ...,
        testingbot: {
            selenium: {
                host: 'hub.testingbot.com',
                port: 443
            },
            'username': '${TB_KEY}',
            'access_key': '${TB_SECRET}',
        },
        'testingbot.chrome': {
            extends: 'testingbot',
            desiredCapabilities: {
                browserName: 'chrome',
                'tb:options': {
                    'platformName': 'Windows 10',
                    'version': 'latest',
                    'name': 'First Nightwatch test',
                }
            }
        },
        
        'testingbot.firefox': {
            extends: 'testingbot',
            desiredCapabilities: {
                browserName: 'firefox',
                'tb:options': {
                    'platformName': 'Windows 10',
                    'version': 'latest',
                    'name': 'First Nightwatch test',
                }
            }
        },
        ...
    }
}

----------------------------------------

TITLE: Retrieving Selenium WebElement Instance
DESCRIPTION: Shows how to get the underlying Selenium WebElement instance from an element reference

LANGUAGE: javascript
CODE:
const addButtonEl = element('button[type="submit"]');
const instance = await addButtonEl.findElement();

----------------------------------------

TITLE: Accessing WebDriver Capabilities in Nightwatch (JavaScript)
DESCRIPTION: Demonstrates the structure of the WebDriver capabilities object, which contains information about the browser session and supported features.

LANGUAGE: javascript
CODE:
{
  acceptInsecureCerts: false,
  browserName: 'chrome',
  browserVersion: '96.0.4664.55',
  'goog:chromeOptions': { debuggerAddress: 'localhost:50427' },
  // ... continued
}

----------------------------------------

TITLE: Configuring Mocha Test Runner for Specific Environment
DESCRIPTION: Example of how to configure Mocha as the test runner for a specific test environment in Nightwatch.

LANGUAGE: javascript
CODE:
{
  test_settings : {
    default: {
      test_runner: 'default'
    },
    
    mocha_tests: {
      test_runner : {
        type : "mocha",
        options : {
          ui : "bdd",
          reporter : "list"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Defining Global Variables in Nightwatch Configuration
DESCRIPTION: Shows how to define global variables in the Nightwatch configuration file that can be accessed throughout the test suite.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],

  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",

      "globals": {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    }
  }
}

----------------------------------------

TITLE: Comparison of Old vs New Element API Syntax
DESCRIPTION: Compares the syntax between old and new Element APIs, highlighting improvements in selector repetition and assertion handling.

LANGUAGE: javascript
CODE:
// Before
// no await required for normal actions
browser
  .click('input[name=q]')
  .sendKeys('input[name=q]', 'Nightwatch.js');

// await required to get the actual command result
const inputText = await browser.getText('input[name=q]');
browser.assert.equal(inputText, 'Nightwatch.js');

browser
  .click('button[name=submit]')
  .assert.not.visible('button[name=submit]');

LANGUAGE: javascript
CODE:
// Now
// no await required for normal actions
const inputElem = browser.element.find('input[name=q]');
inputElem.click(); // no repetition of selector
inputElem.sendKeys('Nightwatch.js');

// await required to get the actual command result
const inputText = await inputElem.getText();
browser.assert.equal(inputText, 'Nightwatch.js');

// assertions can also be done directly
// no await required as we are not storing the actual command result anywhere
inputElem.getText().assert.equals('Nightwatch.js');

const submitElem = browser.element.find('input[name=submit]');
submitElem.click();
submitElem.assert.not.visible();

// await the element to get the `WebElement` instance.
const submitWebElem = await submitElem;

----------------------------------------

TITLE: Accessing Current Test Information in Nightwatch (JavaScript)
DESCRIPTION: Shows the structure of the 'currentTest' object, which contains information about the currently running test case, including name, module, and results.

LANGUAGE: javascript
CODE:
{
  // name of the current running testcase
  name: ' ... ',
  // name of the current running testsuite, i.e. the test file
  module: ' ... ',
  // name of the current running test group, if any
  group: '', 
  // the results object is shared among all testcases in the current testsuite
  results: {
    time: 0,
    assertions: [Array],
    passed: 0,
    errors: 0,
    failed: 0,
    retries: [Number],
    skipped: 0,
    tests: 0,
    steps: [],
    stackTrace: '',
    // an object accumulating the results of each testcase
    testcases: [Object]
  },
  // the current timestamp, in the format: Wed, 01 Dec 2021 08:34:00 GMT
  timestamp: ''
}

----------------------------------------

TITLE: Using 'client' Instead of 'browser' in Nightwatch Test (JavaScript)
DESCRIPTION: Shows an alternative way to use the main API object, referring to it as 'client' instead of 'browser'. This is consistent with older versions of Nightwatch.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function (client) {
    client.init();
  }
};

----------------------------------------

TITLE: Implementing a Global Reporter in Nightwatch
DESCRIPTION: Shows how to implement a custom global reporter in Nightwatch that logs test results before the built-in reporters are executed.

LANGUAGE: javascript
CODE:
module.exports = {
  reporter : function(results, cb) {
    console.log('results', results);
    cb();
  }
};

----------------------------------------

TITLE: Action Ticks Example
DESCRIPTION: Demonstrates how action sequences are divided into ticks, showing keyboard and mouse coordination with shift key and mouse movements.

LANGUAGE: javascript
CODE:
describe('user actions api', function() {

  it('demo test', function() {
    browser
      .perform(function() {
        const actions = this.actions({async: true});

        return actions
          .keyDown(Keys.SHIFT)
          .move({origin: el})
          .press()
          .release()
          .keyUp(Keys.SHIFT);
      });
    })
})

----------------------------------------

TITLE: Accessing Desired Capabilities in Nightwatch (JavaScript)
DESCRIPTION: Demonstrates the structure of the 'desiredCapabilities' object, which contains the capabilities sent by Nightwatch to WebDriver as defined in the configuration file.

LANGUAGE: javascript
CODE:
{
  browserName: 'chrome',
  'goog:chromeOptions': {},
  name: 'Example Test'
}

----------------------------------------

TITLE: Configuring Nightwatch for Vite Plugin
DESCRIPTION: Update the Nightwatch configuration to include the Vite plugin.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['vite-plugin-nightwatch']
}

----------------------------------------

TITLE: Example Nightwatch Test with Jest
DESCRIPTION: Sample test case demonstrating Nightwatch commands in Jest environment

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Chrome Configuration for Docker Environment
DESCRIPTION: Configuration for running Chrome in a Docker container by adding the required no-sandbox argument

LANGUAGE: javascript
CODE:
"chromeOptions" : {
  "args" : ["--no-sandbox"]
}

----------------------------------------

TITLE: Accessing WebDriver Session ID in Nightwatch (JavaScript)
DESCRIPTION: Demonstrates how to access the WebDriver session ID, which is a unique identifier for each WebDriver session.

LANGUAGE: javascript
CODE:
console.log(browser.sessionId); // e0b40362dcec8ec501ac2b42b62bdce2

----------------------------------------

TITLE: Installing GeckoDriver via NPM
DESCRIPTION: Command to install GeckoDriver as a development dependency using NPM package manager

LANGUAGE: javascript
CODE:
npm install geckodriver --save-dev

----------------------------------------

TITLE: Installing vite-plugin-nightwatch
DESCRIPTION: Command to install the Vite plugin for Nightwatch from NPM.

LANGUAGE: bash
CODE:
npm install vite-plugin-nightwatch

----------------------------------------

TITLE: Jest Configuration for Nightwatch
DESCRIPTION: Complete Jest configuration file with Nightwatch environment settings

LANGUAGE: javascript
CODE:
{
  testEnvironment: 'jest-environment-nightwatch',
  testEnvironmentOptions: {
    headless: true,
    browserName: 'chrome',
    baseUrl: '',
    verbose: false,  
    output: true,
    env: null, 
    parallel: false,
    devtools: false,
    debug: false,
    autoStartSession: true,
    persistGlobals: true,
    configFile: './nightwatch.conf.js',
    globals: {}, 
    webdriver: {},
    timeout: null,
    enableGlobalApis: false,
    alwaysAsync: true,
    desiredCapabilities: {},
    async setup(browser) {},
    async teardown(browser) {},
  },
  
  testMatch: [
      "**/tests/*.[jt]s?(x)"
   ],
}

----------------------------------------

TITLE: Implementing Dynamic URL in Page Object
DESCRIPTION: Example of creating a page object with a dynamic URL function that constructs the page URL using the base launch URL.

LANGUAGE: javascript
CODE:
module.exports = {
  url: function() { 
    return this.api.launchUrl + '/login'; 
  },
  elements: {}
};

----------------------------------------

TITLE: Configuring Nightwatch for Unpacked Chrome Extensions
DESCRIPTION: Configuration setup in nightwatch.conf.js for testing unpacked Chrome extensions from a directory

LANGUAGE: javascript
CODE:
chrome: {
  desiredCapabilities: {
    browserName: 'chrome',
    'goog:chromeOptions': {
      args: [
        //'--headless',
        'auto-open-devtools-for-tabs',
        '--load-extension=/path/to/extension/directory',
      ],
    }
  },
}

----------------------------------------

TITLE: Disabling Test Module in Nightwatch
DESCRIPTION: Shows how to disable an entire test module using the @disabled attribute. This prevents the test module from running during test execution.

LANGUAGE: javascript
CODE:
module.exports = {
  '@disabled': true, // This will prevent the test module from running.
  
  'sample test': function (browser) {
    // test code
  }
};

----------------------------------------

TITLE: Nightwatch.js Test Output Example
DESCRIPTION: Sample output from running the clearValue example test, showing successful test execution with three passed assertions and execution time.

LANGUAGE: javascript
CODE:
[Clear Value] Test Suite
============================

Running:  clearValue example test
 ✔ Element <input[type=text]> was visible after 68 milliseconds.
 ✔ Expected element <#rcnt> text to contain: "nightwatchjs.org/" - condition was met in 763ms
 ✔ Expected element <#rcnt> text to equal: "" - condition was met in 36ms

OK. 3 assertions passed. (7.593s)

----------------------------------------

TITLE: Installing Nightwatch Jest Environment
DESCRIPTION: Command to install jest-environment-nightwatch package

LANGUAGE: bash
CODE:
npm i jest-environment-nightwatch --save-dev

----------------------------------------

TITLE: Writing Chrome Extension Test Suite with Nightwatch
DESCRIPTION: Complete test suite example showing how to test Chrome Extensions, including DevTools context switching and element assertions

LANGUAGE: javascript
CODE:
describe('test Chrome Extension inside DevTools', function() {
  before(async function() {
    // navigate to the website you want to test the extension against
    await browser.navigateTo('https://google.com');

    // get all targets (contexts) we can possibly switch to
    const targets = await browser.driver.sendAndGetDevToolsCommand('Target.getTargets', {});

    const devToolsTarget = targets.targetInfos.find(target => {
      return target.type === 'page' &&
        target.url.includes('devtools://devtools/bundled/devtools_app.html');
    });

    // switch to DevTools window context
    await browser.window.switchTo(devToolsTarget.targetId);

    // switch to last tab in pane (our extension)
    await browser.sendKeys('body', [browser.Keys.COMMAND, '[']); // for macos
    await browser.sendKeys('body', [browser.Keys.CONTROL, '[']); // for windows/linux

    // switch to the iframe inside the tab
    await browser.frame('iframe[src*="index.html"]');
  });

  it('checks the header text of the extension', async function() {
    // run automation on the extension
    await browser.element('header').getText().assert.equals('My Extension');

    // to visualize the extension during test run
    // await browser.pause(1000);
  });
});

----------------------------------------

TITLE: Running Nightwatch from node_modules on Linux/MacOS
DESCRIPTION: Command to run Nightwatch directly from the node_modules folder on Unix-based systems.

LANGUAGE: bash
CODE:
./node_modules/.bin/nightwatch [source] [options]

----------------------------------------

TITLE: Running Chrome Extension Tests with Nightwatch
DESCRIPTION: Command to execute Chrome Extension tests using Nightwatch CLI

LANGUAGE: bash
CODE:
npx nightwatch tests/sampleTest.js --env chrome

----------------------------------------

TITLE: Defining Environment-Specific Globals in Nightwatch
DESCRIPTION: Shows how to define different global settings for local and integration environments in Nightwatch.

LANGUAGE: javascript
CODE:
module.exports = {
  'default' : {
    isLocal : true,
  },
  
  'integration' : {
    isLocal : false
  }
};

----------------------------------------

TITLE: Package.json Jest Script Configuration
DESCRIPTION: JSON configuration to add Jest test script to package.json

LANGUAGE: json
CODE:
{
 "scripts": {
   "test": "jest"
 }
}

----------------------------------------

TITLE: Device Control Commands
DESCRIPTION: Commands for controlling device-level features including activity management, orientation, geolocation, and keyboard operations. Supports both Android and iOS platforms.

LANGUAGE: javascript
CODE:
app.appium.startActivity({
  appPackage: 'com.example',
  appActivity: 'Activity'
})

await app.appium.setOrientation('LANDSCAPE');

await app.appium.setGeolocation({latitude:23.03,longitude: 34.23,altitude: 35.03});

----------------------------------------

TITLE: Nightwatch Configuration for Storybook
DESCRIPTION: Configuration setup in nightwatch.conf.js to enable the Storybook plugin.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    //...
    '@nightwatch/storybook'      
  ]
}

----------------------------------------

TITLE: Display Nightwatch CLI Help
DESCRIPTION: Command to show all available CLI options and their descriptions

LANGUAGE: bash
CODE:
nightwatch --help

----------------------------------------

TITLE: Multi-step Nightwatch Test using 'exports' Syntax in JavaScript
DESCRIPTION: This example shows how to include multiple steps in a Nightwatch test using the 'exports' syntax. It separates the test into two steps: navigating to the website and performing the search.

LANGUAGE: javascript
CODE:
module.exports = {
  'step one: navigate to ecosia.org': function(browser) {
    browser
      .url('https://www.ecosia.org')
      .waitForElementVisible('body')
      .assert.titleContains('Ecosia')
      .assert.visible('input[type=search]')
      .setValue('input[type=search]', 'nightwatch')
      .assert.visible('button[type=submit]');
  },
  
  'step two: click submit' : function (browser) {
    browser
      .click('button[type=submit]')
      .assert.containsText('.mainline-results', 'Nightwatch.js')
      .end();
  }
};

----------------------------------------

TITLE: Running Test with TeamCity Reporter
DESCRIPTION: Command to execute Nightwatch tests using the TeamCity reporter.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js -–reporter node_modules/nightwatch-teamcity/index.js

----------------------------------------

TITLE: Extended Nightwatch Configuration
DESCRIPTION: Detailed configuration options for the Storybook plugin in Nightwatch.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['src/stories/*.stories.jsx'],
  
  '@nightwatch/storybook': {
    start_storybook: false,
    storybook_url: 'http://localhost:6006/',
    storybook_config_dir: '.storybook', // default storybook config directory
    hide_csf_errors: false,
    show_browser_console: true
  }
}

----------------------------------------

TITLE: Initializing Nightwatch Project
DESCRIPTION: Commands to create a new Nightwatch project directory and initialize it. Can be done either as separate steps or as a single command.

LANGUAGE: bash
CODE:
mkdir <directory-name>
cd <directory-name>
npm init nightwatch@latest

----------------------------------------

TITLE: Configuring Vite Plugin with Component Type
DESCRIPTION: Specify the component type (Vue or React) in the Vite configuration.

LANGUAGE: javascript
CODE:
export default {
  plugins: [
    // ... other plugins, such as vue() or react()
    nightwatchPlugin({
      componentType: 'vue'
    })
  ]
}

----------------------------------------

TITLE: Complete DuckDuckGo Search Test with Debug
DESCRIPTION: Example test case showing debug() command usage in a complete test scenario that searches for Nightwatch.js on DuckDuckGo and verifies results.

LANGUAGE: javascript
CODE:
describe('duckduckgo debug example', function() {
  // function passed as second argument to `it` should be `async`.
  it('Search Nightwatch.js and check results', async function(browser) {
    await browser
      .url('https://duckduckgo.com')
      .debug()
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  });
});

----------------------------------------

TITLE: NPM Package Structure for Custom Reporter
DESCRIPTION: Directory structure for creating a custom reporter as an NPM package, showing the recommended file organization.

LANGUAGE: bash
CODE:
  ├── / 
  |   ├── src/
  |   |    ├── my_custom_reporter_lib.js
  |   |    └── my_other_custom_reporter_lib.js
  |   └── test/
  |        ├── test_for_my_custom_reporter_lib.js
  |        └── test_for_my_other_custom_reporter_lib.js
  ├── index.js
  ├── LICENSE.md
  ├── package.json
  └── README.md

----------------------------------------

TITLE: Example Nightwatch Test with Allure Reporting
DESCRIPTION: Sample test script demonstrating a basic Nightwatch test that will generate Allure reports. Tests DuckDuckGo search functionality.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Script for Mounting Vue Component
DESCRIPTION: Example of a script to mount a Vue component using @vue/test-utils.

LANGUAGE: javascript
CODE:
import {mount} from '/node_modules/@vue/test-utils/dist/vue-test-utils.esm-browser.js'
import Component from '/test/components/vue/Form.vue'

let element = mount(Component, {
 attachTo: document.getElementById('app'),
 global: {
   plugins: []
 }
});

// This will be used by Nightwatch to inspect properties of this component
window['@@component_element'] = element;

----------------------------------------

TITLE: Running Tests with Selenium Safari
DESCRIPTION: Command to run Nightwatch tests using Safari browser with Selenium Server.

LANGUAGE: bash
CODE:
npx nightwatch tests/specs/basic/ecosia.js --env selenium.safari

----------------------------------------

TITLE: Manual WebDriver Session Configuration
DESCRIPTION: Configuration for manually starting WebDriver sessions in Cucumber tests

LANGUAGE: javascript
CODE:
{
  test_runner: {
    type: 'cucumber',
    options: {
      feature_path: 'examples/cucumber-js/*/*.feature',
      auto_start_session: false
    }
  }
}

----------------------------------------

TITLE: Sending Input Capabilities in Nightwatch POST Request
DESCRIPTION: Example of desired capabilities sent by Nightwatch as part of the initial /session request to create a new browser session.

LANGUAGE: bash
CODE:
Request POST /session  
{
 desiredCapabilities: {
   browserName: 'chrome',
   name: 'To-Do List End-to-End Test'
 }
}

----------------------------------------

TITLE: Installing Appium for Nightwatch
DESCRIPTION: Command to install Appium 2 in the Nightwatch project for mobile app testing.

LANGUAGE: bash
CODE:
npm i appium@next --save-dev

----------------------------------------

TITLE: External Globals Configuration
DESCRIPTION: Shows how to configure Nightwatch to use an external file for globals definition using globals_path setting.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],
  "globals_path": "lib/globals.js",
  
  "test_settings": {
    "default": {
    "launch_url": "https://nightwatchjs.org"
  }
}

----------------------------------------

TITLE: Configuring iOS Real Device Environment in Nightwatch
DESCRIPTION: This snippet shows how to configure the environment for running tests on real iOS devices in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
'app.ios.real': {
    extends: 'app',
    'desiredCapabilities': {
      browserName: null,
      platformName: 'ios',
      'appium:options': {
        automationName: 'XCUITest',
        app: `${__dirname}/nightwatch/sample-apps/wikipedia.zip`,
        bundleId: 'org.wikimedia.wikipedia',
        newCommandTimeout: 0,
      }
    }
  },

----------------------------------------

TITLE: Complete DuckDuckGo Search Test with Pause
DESCRIPTION: A full test example showing pause() usage in context of a DuckDuckGo search test, demonstrating integration with other Nightwatch commands.

LANGUAGE: javascript
CODE:
describe('duckduckgo pause example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .url('https://duckduckgo.com')
      .pause()
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  });
});

----------------------------------------

TITLE: Configuring Test Workers in Nightwatch JSON
DESCRIPTION: Configuration snippet showing how to enable test workers with automatic worker count based on CPU cores.

LANGUAGE: javascript
CODE:
{
  "test_workers": {
    "enabled": true,
    "workers": "auto"
  }
}

----------------------------------------

TITLE: Configuring Test Exclusion in Nightwatch JSON
DESCRIPTION: This snippet shows how to exclude specific folders or file patterns from test execution in Nightwatch. It demonstrates two examples: excluding a folder and excluding files matching a specific pattern.

LANGUAGE: json
CODE:
"exclude" : ["excluded-folder"]

LANGUAGE: json
CODE:
"exclude" : ["test-folder/*-smoke.js"]

----------------------------------------

TITLE: Multiple Elements Selection
DESCRIPTION: Comparison of selecting multiple elements in Protractor and Nightwatch

LANGUAGE: javascript
CODE:
// Protractor
element.all(by.css('.myclass'))

// Nightwatch v2
browser.findElements(by.css('.myclass'))

// or simply:
browser.findElements('.myclass')

----------------------------------------

TITLE: Context Management Commands
DESCRIPTION: Commands for managing and switching between different app contexts like webview and native app views. Includes getting current context, listing all contexts, and setting context.

LANGUAGE: javascript
CODE:
const context = await app.appium.getContext()

const contexts = await app.appium.getContexts()

await app.appium.setContext('WEBVIEW_org.wikipedia')

----------------------------------------

TITLE: Launching Browser with Nightwatch Client in JavaScript
DESCRIPTION: Demonstrates how to launch a new browser session using an existing Nightwatch client with the launchBrowser method. This returns a Nightwatch browser API object.

LANGUAGE: javascript
CODE:
const browser = await client.launchBrowser();

----------------------------------------

TITLE: Configuring Nightwatch for screenshots on failures/errors
DESCRIPTION: This JSON configuration enables screenshots for test failures and errors in Nightwatch. It sets the screenshots property under the default test_settings environment, specifying the enabled status, when to take screenshots, and the output path.

LANGUAGE: javascript
CODE:
{
  "test_settings" : {
    "default" : {
      "screenshots" : {
        "enabled" : true,
        "on_failure" : true,
        "path" : "./screens"
      }
    }
  }
}

----------------------------------------

TITLE: Demo Test Using baseUrl Config
DESCRIPTION: Example showing how to use the configured baseUrl property in a test

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test' : function (browser) {
    browser
      .url(browser.baseUrl)
      // ...
      .end();
  }
};

----------------------------------------

TITLE: Configuring Git User Information
DESCRIPTION: Commands to set up git user name and email globally.

LANGUAGE: shell
CODE:
% git config --global user.name 'John Doe'
% git config --global user.email 'john@example.com'

----------------------------------------

TITLE: Installing and Running Nightwatch in Headless Mode on Bamboo
DESCRIPTION: Commands to install npx and run Nightwatch tests in headless mode within a Bamboo CI pipeline task.

LANGUAGE: bash
CODE:
npm install npx 
npx nightwatch --headless

----------------------------------------

TITLE: Updating Nightwatch Client Capabilities in JavaScript
DESCRIPTION: Shows how to update the capabilities of an existing Nightwatch client using the updateCapabilities method.

LANGUAGE: javascript
CODE:
client.updateCapabilities({
  testCapability: 'one, two, three'
});

----------------------------------------

TITLE: Setting Geolocation in Nightwatch
DESCRIPTION: Shows how to simulate traffic from a specific latitude and longitude using the setGeolocation method in Nightwatch.

LANGUAGE: javascript
CODE:
// Set the latitude & longitude of the prime meridian
browser.setGeolocation({latitude: 51.4780, longitude: 0.0014, accuracy: 100})

LANGUAGE: typescript
CODE:
// Set the latitude & longitude of the prime meridian
browser.setGeolocation({latitude: 51.4780, longitude: 0.0014, accuracy: 100})

----------------------------------------

TITLE: Example Commit Message Format
DESCRIPTION: Template showing the proper format for writing commit messages, including title, body, and issue reference.

LANGUAGE: text
CODE:
explain commit normatively in one line

Body of commit message is a few lines of text, explaining things
in more detail, possibly giving some background about the issue
being fixed, etc.

The body of the commit message can be several paragraphs, and
please do proper word-wrap and keep columns shorter than about
72 characters or so. That way `git log` will show things
nicely even when it is indented.

Fixes #141

----------------------------------------

TITLE: Custom TeamCity Reporter Configuration
DESCRIPTION: JavaScript configuration for creating a custom TeamCity reporter implementation.

LANGUAGE: javascript
CODE:
const teamCityFormatter = require("nightwatch-teamcity").format;

module.exports = {
 reporter: (results,done)=>{
   teamCityFormatter(results);
   done();
 }
};

----------------------------------------

TITLE: Installing and Running Nightwatch Tests on Jenkins
DESCRIPTION: Commands to install dependencies and run Nightwatch tests in a Jenkins build step. These commands are executed in the shell as part of the Jenkins pipeline.

LANGUAGE: bash
CODE:
npm install
npm test

----------------------------------------

TITLE: Creating Page Object Instance in Nightwatch
DESCRIPTION: Example of instantiating a page object from a module definition.

LANGUAGE: javascript
CODE:
const myPageObject = browser.page.MyPage();

----------------------------------------

TITLE: Syncing with Upstream Repository
DESCRIPTION: Commands to sync local repository with upstream changes using rebase.

LANGUAGE: shell
CODE:
% git fetch upstream
% git rebase upstream/trunk

----------------------------------------

TITLE: Running Nightwatch Tests with Chrome
DESCRIPTION: Execute the Nightwatch tests using Chrome browser environment.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome

----------------------------------------

TITLE: Running Nightwatch Tests
DESCRIPTION: Commands to execute Nightwatch tests in an Angular project

LANGUAGE: bash
CODE:
ng e2e

ng run {your-project-name}:nightwatch-run

----------------------------------------

TITLE: Element Selection with CSS Selector in Nightwatch
DESCRIPTION: Shows how to select an element using a CSS selector with the element() API

LANGUAGE: javascript
CODE:
const addButtonEl = element('button[type="submit"]');

----------------------------------------

TITLE: Setting Element Details in Nightwatch
DESCRIPTION: Demonstrates how to set text and attributes of elements using Nightwatch. Examples include setting text content and modifying element style.

LANGUAGE: javascript
CODE:
// Set the text of header as 'Nightwatch'
browser.element.find('#headeer').setText('Nightwatch');

// Set the style of button as "display:none;"
browser.element.find('#button').setAttribute('style','display:none;');

LANGUAGE: typescript
CODE:
// Set the text of header as 'Nightwatch'
browser.element.find('#headeer').setText('Nightwatch');

// Set the style of button as "display:none;"
browser.element.find('#button').setAttribute('style','display:none;');

----------------------------------------

TITLE: Configuring Nightwatch for Remote Selenium Server in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up Nightwatch to run tests on a remote Selenium server. It includes configurations for the remote host and a Firefox-specific setup.

LANGUAGE: javascript
CODE:
module.exports = {
    ...,
    test_settings : {
        ...,
        remote: {
            // Info on all the available options with "selenium":
            // /guide/configuration/settings.html#selenium-server-settings
            selenium: {
                start_process: false,
                server_path: '',
                host: '<remote-hostname>',
                port: 4444
            },
            
            username: '${REMOTE_USERNAME}',
            access_key: '${REMOTE_ACCESS_KEY}',
            
            webdriver: {
                keep_alive: true,
                start_process: false
            }
        },
        
        'remote.firefox': {
            extends: 'remote',
            desiredCapabilities: {
                browserName: 'firefox',
                'moz:firefoxOptions': {
                    args: [
                        // '-headless',
                        // '-verbose'
                    ]
                }
            }
        },
        ...
    }
}

----------------------------------------

TITLE: Configuring Mochawesome Reporter Options in Nightwatch
DESCRIPTION: This snippet demonstrates how to configure Mochawesome reporter options in the Nightwatch configuration file. It sets the reporter to 'mochawesome' and specifies a custom report output directory.

LANGUAGE: javascript
CODE:
{
  // ...
  test_runner: {
    type : 'mocha',
    options : {
      ui : 'bdd',
      reporter : 'mochawesome',
      reporterOptions: {
        reporterDir: './output'
      }
    }
  }
}

----------------------------------------

TITLE: Basic Unit Test Implementation with @unitTest Property
DESCRIPTION: Example of a simple unit test using the @unitTest property for individual test suite configuration with async callback.

LANGUAGE: javascript
CODE:
const assert = require('assert');

module.exports = {
  '@unitTest': true,
  
  'demo UnitTest' : function (done) {
    assert.equal('TEST', 'TEST');
    setTimeout(function() {
      done();
    }, 10);
  }
};

----------------------------------------

TITLE: Installing Nightwatch Test Doubles Plugin
DESCRIPTION: NPM command to install the @nightwatch/testdoubles plugin as a dev dependency

LANGUAGE: bash
CODE:
npm i @nightwatch/testdoubles --save-dev

----------------------------------------

TITLE: Running Tests with Selenium Firefox
DESCRIPTION: Command to run Nightwatch tests using Firefox browser with Selenium Server.

LANGUAGE: bash
CODE:
npx nightwatch tests/specs/basic/ecosia.js --env selenium.firefox

----------------------------------------

TITLE: Installing Mochawesome via NPM
DESCRIPTION: This command installs the Mochawesome package as a dev dependency using npm.

LANGUAGE: bash
CODE:
npm i mochawesome --save-dev

----------------------------------------

TITLE: Defining Custom Filename Format Function in JavaScript
DESCRIPTION: This function generates a custom filename format for screenshots, incorporating test suite, test case, error status, and timestamp information.

LANGUAGE: javascript
CODE:
const filename_format = function ({testSuite = '', testCase = '', isError = false, dateObject = new Date()} = {}) {
  const fileName = [];
  const dateParts = dateObject.toString().replace(/:/g, '').split(' ');
  dateParts.shift();

  const dateStamp = dateParts.slice(0, 5).join('-');
  if (testSuite) {
    fileName.push(testSuite);
  }
  if (testCase) {
    fileName.push(testCase);
  }

  return `${fileName.join('/')}${isError ? '_ERROR' : '_FAILED'}_${dateStamp}.png`;
};

----------------------------------------

TITLE: Installing Nightwatch Dependencies
DESCRIPTION: NPM command to install Nightwatch and chromedriver packages.

LANGUAGE: bash
CODE:
npm i nightwatch chromedriver

----------------------------------------

TITLE: Adding Android Mobile App Testing to Existing Project
DESCRIPTION: Command to add Android mobile app testing capabilities to an existing Nightwatch project using the mobile helper tool.

LANGUAGE: bash
CODE:
npx @nightwatch/mobile-helper android --appium

----------------------------------------

TITLE: Text Input Commands for Mobile Apps
DESCRIPTION: Commands for sending text input to form fields using sendKeys method. Supports both direct selector strategy and object-based selection with indexing.

LANGUAGE: javascript
CODE:
app.sendKeys('id','org.wikipedia:id/search_src_text','Test')

app.sendKeys({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n},'Test')

----------------------------------------

TITLE: Running Nightwatch with DOM History
DESCRIPTION: Commands to enable DOM history tracing in Nightwatch tests using the --trace flag. This can be used either for all tests or specific test files/folders.

LANGUAGE: bash
CODE:
npx nightwatch --trace

LANGUAGE: bash
CODE:
npx nightwatch <path to test file/folder> --trace

----------------------------------------

TITLE: Disabling JUnit Reports Configuration
DESCRIPTION: Configuration snippet showing how to completely disable JUnit XML report generation in Nightwatch.

LANGUAGE: javascript
CODE:
module.exports = {
  output_folder: false
}

----------------------------------------

TITLE: Installing Nightwatch React Plugin
DESCRIPTION: Command to install the @nightwatch/react plugin which enables React component testing using Vite dev server.

LANGUAGE: bash
CODE:
npm install @nightwatch/react

----------------------------------------

TITLE: DOM Element Selection Comparison
DESCRIPTION: Examples showing how to select DOM elements in both Protractor and Nightwatch

LANGUAGE: javascript
CODE:
// Protractor
element(by.css('.myclass'))

// Nightwatch v2
element(by.css('.myclass'))

----------------------------------------

TITLE: Adding Tags Using Describe Interface
DESCRIPTION: Demonstrates how to add tags to tests when using the describe interface in Nightwatch.

LANGUAGE: javascript
CODE:
describe('testsuite', function() {
  this.tags = ['login', 'sanity'];
  
  it('demo login test', function(browser) {
     
  });
});

----------------------------------------

TITLE: Sample Output Folder Configuration
DESCRIPTION: Example configuration object showing how to set the output folder for test reports.

LANGUAGE: javascript
CODE:
module.exports = {
    output_folder: 'tests_output'
}

----------------------------------------

TITLE: Project-Specific Nightwatch Execution
DESCRIPTION: Methods to run Nightwatch when installed as a project dependency, using npx or direct path

LANGUAGE: bash
CODE:
npx nightwatch [source] [options]

LANGUAGE: bash
CODE:
./node_modules/.bin/nightwatch [source] [options]

LANGUAGE: bash
CODE:
node node_modules/.bin/nightwatch [source] [options]

----------------------------------------

TITLE: Installing Nightwatch React Plugin
DESCRIPTION: NPM installation command for the @nightwatch/react plugin

LANGUAGE: bash
CODE:
npm install @nightwatch/react

----------------------------------------

TITLE: Installing Nightwatch Angular Schematic
DESCRIPTION: Command to add Nightwatch to an Angular project using the Angular CLI

LANGUAGE: bash
CODE:
ng add @nightwatch/schematics

----------------------------------------

TITLE: Attribute Assertions in Mobile Testing
DESCRIPTION: Demonstrates various attribute-based assertions including contains, equals, and matches. Uses element attributes like text, index, and resource-id.

LANGUAGE: javascript
CODE:
app.assert.attributeContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','Browser');

----------------------------------------

TITLE: Running Tests with Extra Setup
DESCRIPTION: Command for running Cucumber tests with additional setup files and formatters

LANGUAGE: bash
CODE:
nightwatch examples/cucumber-js/features/step_definitions --require {/full/path/to/_extra_setup.js}

LANGUAGE: bash
CODE:
npx nightwatch --env cucumber-js --format @cucumber/pretty-formatter

LANGUAGE: bash
CODE:
npx nightwatch --env cucumber-js --require cucumber.conf.js --format json:report/cucumber_report.json

----------------------------------------

TITLE: Modifying Device Dimensions in Nightwatch Tests
DESCRIPTION: Example showing how to modify device dimensions before navigating to a website. Sets custom width, height, scale factor and enables mobile emulation.

LANGUAGE: javascript
CODE:
describe('modify device dimensions', function() {
  it('modifies the device dimensions', function() {
    browser
      .setDeviceDimensions({
        width: 400,
        height: 600,
        deviceScaleFactor: 50,
        mobile: true
      })
      .navigateTo('https://www.google.com')
      .pause(1000);
  });
});

----------------------------------------

TITLE: Shorthand Element Declaration in Nightwatch
DESCRIPTION: This snippet shows a shorthand way to declare page elements in Nightwatch when using the default locate strategy.

LANGUAGE: javascript
CODE:
module.exports = {
  elements: {
    searchBar: 'input[type=text]'
  }
};

----------------------------------------

TITLE: Running Nightwatch Tests on BrowserStack from Jenkins
DESCRIPTION: Command to execute Nightwatch tests on BrowserStack environment from Jenkins. This command is used in the build step to trigger tests on BrowserStack.

LANGUAGE: bash
CODE:
npm test -- --env browserstack

----------------------------------------

TITLE: Configuring Mocha Test Runner in Nightwatch
DESCRIPTION: Example of how to configure Mocha as the test runner in Nightwatch, including setting custom options for Mocha.

LANGUAGE: javascript
CODE:
{
  ...
  test_runner: {
    type : 'mocha',
    options : {
      ui : 'bdd',
      reporter : 'list'
    }
  }
  ...
}

----------------------------------------

TITLE: Implementing Indefinite Pause in Nightwatch.js Test
DESCRIPTION: Shows how to pause test execution indefinitely until manually resumed, useful for debugging purposes.

LANGUAGE: javascript
CODE:
it('demos pause command', function(browser) {
  // pause indefinitely, until resumed
  browser.pause();
});

----------------------------------------

TITLE: Accessing Global Variables in Tests
DESCRIPTION: Demonstrates how to access global variables within Nightwatch test cases.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test' : function (browser) {
    console.log(browser.globals.myGlobalVar); // myGlobalVar == "some value"
  }
};

----------------------------------------

TITLE: Configuring Firefox Extension Installation - Function Format
DESCRIPTION: Alternative approach to configure Firefox options in nightwatch.conf.js using a function that returns the options object, allowing for dynamic configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities() {
        const firefox = require('selenium-webdriver/firefox');

        const options = new firefox.Options()
          .addExtensions('/path/to/firebug.xpi')
          .setPreference('extensions.firebug.showChromeErrors', true);
        
        return options;
      }
    }
}
};

----------------------------------------

TITLE: CircleCI Configuration for Nightwatch Tests
DESCRIPTION: CircleCI configuration file that sets up a Node.js environment with browser tools for running Nightwatch tests. It defines the test job, workflows, and necessary orbs for browser testing.

LANGUAGE: yaml
CODE:
version: 2.1

orbs:
  node: circleci/node@4.7
  browser-tools: circleci/browser-tools@1.1.0
jobs:
  test:
    docker:
      - image: cimg/node:lts-browsers
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - node/install-packages
      - run:
          command: npm run test
      - store_test_results:
          path: /tests_output
workflows:
  e2e-test:
    jobs:
      - test

----------------------------------------

TITLE: Text Equals Assertion in Mobile Testing
DESCRIPTION: Shows how to verify exact text matches using textEquals method. Compares element text with expected string value.

LANGUAGE: javascript
CODE:
app.assert.textEquals({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'BrowserStack');

----------------------------------------

TITLE: Configuring Appium iOS Environment in Nightwatch
DESCRIPTION: Configuration setup for running Nightwatch tests on iOS devices using Appium server. Includes essential capabilities like browser settings, platform details, and timeout configurations.

LANGUAGE: javascript
CODE:
appium_ios: {
  selenium: {
    host: 'localhost',
    port: 4723
  },
  disable_error_log: true,
  webdriver: {
    timeout_options: {
      timeout: 150000,
      retry_attempts: 3
    },
    keep_alive: false,
    start_process: false
  },
  desiredCapabilities: {
    browserName: 'Safari', //not required incase using app
    javascriptEnabled: true,
    platformName: 'iOS', //android or iOS
    platformVersion: '15.0',
    deviceName: 'iPhone 13'
    // "app": APP_PATH + "ios/PieDrive.app", // path for the ios app you want to test
  }
}

----------------------------------------

TITLE: Creating a New Nightwatch Project Directory
DESCRIPTION: Creates a new directory for the Nightwatch project and changes into it.

LANGUAGE: bash
CODE:
mkdir ./test-project && cd ./test-project

----------------------------------------

TITLE: Right Clicking Elements in Nightwatch
DESCRIPTION: Illustrates how to right-click on a web element using Nightwatch. The example shows right-clicking on an 'options' button.

LANGUAGE: javascript
CODE:
// Right click on the options button
browser.element.findByText('options').rightClick();

LANGUAGE: typescript
CODE:
// Right click on the options button
browser.element.findByText('options').rightClick();

----------------------------------------

TITLE: Configuring Azure Pipelines YAML for Nightwatch Tests
DESCRIPTION: This YAML configuration sets up an Azure pipeline to run Nightwatch tests on an Ubuntu environment. It installs Node.js, sets up dependencies, installs Xvfb for headless browser testing, and executes the tests using npm.

LANGUAGE: yaml
CODE:
# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    sudo apt-get install xvfb

- script: xvfb-run --auto-servernum npm test -- --env chrome
  displayName: 'Run tests'

----------------------------------------

TITLE: Implementing Stub Test Double
DESCRIPTION: Example of using a stub to replace function implementation and control return values

LANGUAGE: javascript
CODE:
describe('use stubs in nightwatch', function() {
  it('stub hello', function({sinon}) {
    const obj = {
      hello: () => console.log('Hello!')
    }
    const sayHello = () => obj.hello();
    const stub = sinon.stub(obj, 'hello').returns('hi'); // replace hello with a dummy implementation that returns 'hi'
    const result = sayHello();
    assert.strictEqual(result, 'hi'); // check that the stubbed function returned 'hi'
  });
});

----------------------------------------

TITLE: Creating Nightwatch Configuration File
DESCRIPTION: Creates an empty Nightwatch configuration file using the nano text editor.

LANGUAGE: bash
CODE:
nano nightwatch.conf.js

----------------------------------------

TITLE: Defining Test Suite Tags in Nightwatch BDD
DESCRIPTION: This snippet shows how to define tags for a test suite using the BDD syntax in Nightwatch, which can be used for organizing and filtering tests.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // defining tags using bdd
  this.tags = ['login', 'authentication''];
  
  it('...', function() {...});
});

----------------------------------------

TITLE: Defining Test Suite Tags in Nightwatch
DESCRIPTION: Illustrates how to assign tags to a test suite using the this.tags property within the describe() function.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  // defining tags using bdd
  this.tags = ['login', 'authentication''];
  
  it('...', function() {...});
});

----------------------------------------

TITLE: Setting Chrome Capabilities with Command Line Arguments
DESCRIPTION: Configuration example demonstrating how to set Chrome-specific capabilities and command line arguments in nightwatch.json

LANGUAGE: javascript
CODE:
"desiredCapabilities" : {
  "browserName" : "chrome",
  "javascriptEnabled" : true,
  "acceptSslCerts" : true,
  "chromeOptions" : {
    "args" : ["start-fullscreen"]
  }
}

----------------------------------------

TITLE: Text Contains Assertion in Mobile Testing
DESCRIPTION: Demonstrates how to assert if an element's text contains specific content using textContains method. Takes a selector object with ID strategy and expected text as parameters.

LANGUAGE: javascript
CODE:
app.assert.textContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'Browser');

----------------------------------------

TITLE: Implementing Test Hooks and Functions in Nightwatch BDD
DESCRIPTION: This snippet showcases the implementation of test hooks (before, after) and various test functions (it, test) in a Nightwatch BDD test suite, including asynchronous tests and skipping mechanisms.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  
  before(function(browser) {
    this.homepage = browser.page.home();
  });
  
  it('startHomepage', () => {
    this.homepage.navigate();
    this.homepage.expect.section('@indexContainer').to.be.not.visible;
  });
  
  
  // Run only this testcase
  /*
  it.only('startHomepage', () => {
    this.homepage.navigate();
  });
  */ 
  
  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()
  xtest('async testcase', async browser => {
    const result = await browser.getText('#navigation');
    console.log('result', result.value)
  });
  
  test('version dropdown is enabled', browser => {
    const navigation = this.homepage.section.navigation;
    const navbarHeader = navigation.section.navbarHeader;
    
    navbarHeader.expect.element('@versionDropdown').to.be.enabled;
  });
  
  after(browser => browser.end());
});

----------------------------------------

TITLE: Configuring Vite for Nightwatch Plugin
DESCRIPTION: Update the Vite configuration to include the Nightwatch plugin.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import nightwatchPlugin from 'vite-plugin-nightwatch'

export default defineConfig({
  plugins: [
    // ... other plugins, such as vue() or react()
    nightwatchPlugin()
  ]
})

----------------------------------------

TITLE: Configuring Firefox Profile with Extensions in Nightwatch
DESCRIPTION: This example shows how to configure a Firefox profile with extensions using the selenium-webdriver Options class in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
const firefox = require('selenium-webdriver/firefox');

const options = new firefox.Options()
  .addExtensions('/path/to/firebug.xpi')
  .setPreference('extensions.firebug.showChromeErrors', true);

module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities: options
    }
  }
};

----------------------------------------

TITLE: Installing AWS CLI Configuration
DESCRIPTION: Command to configure AWS CLI credentials which are required for the Node.js SDK

LANGUAGE: bash
CODE:
aws configure

----------------------------------------

TITLE: Manual WebDriver Session Configuration
DESCRIPTION: Configuration for manual WebDriver session management by disabling auto-start functionality.

LANGUAGE: javascript
CODE:
{
  test_runner: {
    type: 'cucumber',
    options: {
      feature_path: 'examples/cucumber-js/*/*.feature',
      auto_start_session: false
    }
  }
}

----------------------------------------

TITLE: Mounting React Component
DESCRIPTION: Example of mounting a React component using the Nightwatch API.

LANGUAGE: javascript
CODE:
const component = await browser.mountReactComponent('/src/components/Form.jsx')

----------------------------------------

TITLE: Extra Setup for Manual Browser Launch
DESCRIPTION: Custom setup file for manually launching browser sessions with capability updates using Cucumber Before hook.

LANGUAGE: javascript
CODE:
const {Before} = require('@cucumber/cucumber');

Before(async function(testCase) {
  if (!this.client) {
    console.error('Nightwatch instance was not created.');
    
    return;
  }
  
  this.client.updateCapabilities({
    testCap: 'testing'
  });
  
  this.browser = await this.client.launchBrowser();
});

----------------------------------------

TITLE: Adding Admonitions in Nightwatch Documentation
DESCRIPTION: HTML markup for creating info and warning admonitions in Nightwatch documentation to highlight important information or potential issues.

LANGUAGE: html
CODE:
<div class="alert alert-info">
The below commands runs an example test which opens the search engine [Ecosia.org](https://www.ecosia.org/), types the term "nightwatch" into the search input field, then verifies if the results page contains the text "Nightwatch.js".
</div>

LANGUAGE: html
CODE:
<div class="alert alert-warning">
To improve support for displaying the output when running tests in parallel, we recommend setting `detailed_output` to `false` in your test settings (and also make sure `live_output` is enabled).
</div>

----------------------------------------

TITLE: Using Text-based Selectors in Nightwatch
DESCRIPTION: Demonstrates how to use text-based selectors to find elements. Includes examples for finding single and multiple elements by their text content.

LANGUAGE: javascript
CODE:
// Find an element with text 'Sign In'
browser.element.findByText('Sign In');

// Find all elements with text 'Sign In'
browser.element.findAllByText('Sign In');

LANGUAGE: typescript
CODE:
// Find an element with text 'Sign In'
browser.element.findByText('Sign In');

// Find all elements with text 'Sign In'
browser.element.findAllByText('Sign In');

----------------------------------------

TITLE: Configuring Nightwatch Plugin
DESCRIPTION: Basic Nightwatch configuration to enable the React plugin

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/react']
}

----------------------------------------

TITLE: Creating Nightwatch Client in JavaScript
DESCRIPTION: Demonstrates how to create a new Nightwatch client using the createClient method. It shows various configuration options including browser settings, timeouts, and capabilities.

LANGUAGE: javascript
CODE:
const Nightwatch = require('nightwatch');

const client = Nightwatch.createClient({
  headless: true,
  output: true,
  silent: true, // set to false to enable verbose logging
  browserName: 'firefox', // can be either: firefox, chrome, safari, or edge
  
  // set the global timeout to be used with waitFor commands and when retrying assertions/expects
  timeout: 10000,
  
  // set the current test environment from the nightwatch config
  env: null,
  
  // any additional capabilities needed
  desiredCapabilities: {
    
  },
  
  // can define/overwrite test globals here; 
  // when using a third-party test runner only the global hooks onBrowserNavigate/onBrowserQuit are supported
  globals: {},
  
  // when the test runner used supports running tests in parallel; 
  // set to true if you need the webdriver port to be randomly generated
  parallel: false, 
  
  // All other Nightwatch config settings can be overwritten here, such as:
  disable_colors: false
});

----------------------------------------

TITLE: Creating Page Header in HTML for Nightwatch Documentation
DESCRIPTION: HTML markup for creating a page header with an H1 title, used to differentiate the main title in Nightwatch documentation.

LANGUAGE: html
CODE:
<div class="page-header"><h1>Adding custom assertions</h1></div>

----------------------------------------

TITLE: Setting BrowserStack Environment Variables for Jenkins
DESCRIPTION: Environment variables required to run Nightwatch tests on BrowserStack from Jenkins. These variables should be set in Jenkins configuration.

LANGUAGE: bash
CODE:
BROWSERSTACK_USERNAME
BROWERSTACK_ACCESS_KEY

----------------------------------------

TITLE: Creating Nightwatch Client in JavaScript
DESCRIPTION: Demonstrates how to create a new Nightwatch client using the createClient method. This client can be used to create WebDriver sessions with various configuration options.

LANGUAGE: javascript
CODE:
const Nightwatch = require('nightwatch');

const client = Nightwatch.createClient({
  headless: true,
  output: true,
  silent: true, // set to false to enable verbose logging
  browserName: 'firefox', // can be either: firefox, chrome, safari, or edge

  // set the global timeout to be used with waitFor commands and when retrying assertions/expects
  timeout: 10000,

  // set the current test environment from the nightwatch config
  env: null,

  // any additional capabilities needed
  desiredCapabilities: {
    
  },

  // can define/overwrite test globals here; 
  // when using a third-party test runner only the global hooks onBrowserNavigate/onBrowserQuit are supported
  globals: {},

  // when the test runner used supports running tests in parallel; 
  // set to true if you need the webdriver port to be randomly generated
  parallel: false, 
  
  // All other Nightwatch config settings can be overwritten here, such as:
  disable_colors: false
});

----------------------------------------

TITLE: Mounting Vue Component with Options
DESCRIPTION: Example of mounting a Vue component with plugins and mocks using the Nightwatch API.

LANGUAGE: javascript
CODE:
const component = await browser.mountVueComponent('/src/components/Form.vue', {
  plugins: {
    store: '/src/lib/store.js',
    router: '/src/lib/router.js'
  },
  
  mocks: {
    '/api/get-user': {
      type: 'fetch',
      body: {
        data: {
          "firstName": "Jimmy",
          "lastName": "Hendrix"
        }
      }
    }
  }
})

----------------------------------------

TITLE: Defining Custom Reporter Interface in JavaScript
DESCRIPTION: This code snippet shows the interface for defining a custom reporter in a separate file. The reporter must export an object with a write method that takes results, options, and a done callback.

LANGUAGE: javascript
CODE:
module.exports = {
  write : function(results, options, done) {
    done();
  }
};

----------------------------------------

TITLE: Configuring Chrome Options in Nightwatch
DESCRIPTION: Update the nightwatch.conf.js file to add '--no-sandbox' and '--disable-dev-shm-usage' arguments to Chrome options. This configuration is necessary for running Chrome in a CI environment.

LANGUAGE: javascript
CODE:
chrome: {
    desiredCapabilities : {
    browserName : 'chrome',
    'goog:chromeOptions' : {
        // More info on Chromedriver: https://sites.google.com/a/chromium.org/chromedriver/
        //
        // w3c:false tells Chromedriver to run using the legacy JSONWire protocol (not required in Chrome 78)
        w3c: true,
        args: [
        '--no-sandbox',
        '--disable-dev-shm-usage'
        //'--ignore-certificate-errors',
        //'--allow-insecure-localhost',
        //'--headless'
        ]
    }
},

----------------------------------------

TITLE: Configuring Standalone GeckoDriver in Nightwatch
DESCRIPTION: Configuration example for using GeckoDriver directly with Nightwatch, including WebDriver settings and Firefox capabilities

LANGUAGE: javascript
CODE:
{ 
  "webdriver": {
    "start_process" : true,
    "server_path": "./bin/geckodriver-0.23",
    "cli_args": [
      "--log", "debug"
    ],
    "port": 4444
  },
  
  "test_settings" : {
    "default" : {
      "desiredCapabilities": {
        "browserName" : "firefox",
        "acceptInsecureCerts": true
      }
    }
  }
}

----------------------------------------

TITLE: Setting Project Root Configuration
DESCRIPTION: Configuration to specify custom project root directory for Angular tests

LANGUAGE: javascript
CODE:
module.exports = {
  '@nightwatch/angular': {
    projectRoot: 'path/to/angular/project' // defaults to current directory
  },
  // other nightwatch settings...
}

----------------------------------------

TITLE: Configuring Nightwatch for Packed Chrome Extensions
DESCRIPTION: Configuration setup in nightwatch.conf.js for testing packed (.crx) Chrome extensions, including extension loading and DevTools setup

LANGUAGE: javascript
CODE:
chrome: {
  desiredCapabilities: {
    browserName: 'chrome',
    'goog:chromeOptions': {
      args: [
        //'--headless',
        'auto-open-devtools-for-tabs'
      ],
      // load extension from .crx file.
      extensions: [
        require('fs').readFileSync('path/to/extension.crx', {encoding: 'base64'})
      ]
    }
  },
}

----------------------------------------

TITLE: Taking Heap Snapshot with Async/Await in Nightwatch
DESCRIPTION: Shows how to use async/await syntax to take a heap snapshot, retrieve its content, and manually save it to a file using the fs module. This approach allows for more flexibility in handling the snapshot data.

LANGUAGE: javascript
CODE:
const fs = require('fs');

describe('take heap snapshot with async/await', function() {
  it('takes heap snapshot and returns the snapshot content', async function() {
    await browser.navigateTo('https://www.google.com');
    
    const heapSnapshot = await browser.takeHeapSnapshot();
    fs.writeFileSync('heap_snaps/snapshot2.heapsnapshot', heapSnapshot);
  });
});

----------------------------------------

TITLE: Configuring Automatic Retries for Assertions in Nightwatch
DESCRIPTION: Demonstrates how to configure the 'retryAssertionTimeout' in Nightwatch's globals. This setting determines how long Nightwatch will automatically retry failed assertions before marking them as failed.

LANGUAGE: javascript
CODE:
{
  src_folders: ['tests'],
  
  test_settings: {
    default: {
      launch_url: 'https://nightwatchjs.org',
      
      globals: {
        myGlobalVar: 'some value',
        retryAssertionTimeout: 5000
      }
    }
  }
}

----------------------------------------

TITLE: Running a single Nightwatch test
DESCRIPTION: Example command to run a single Nightwatch test file.

LANGUAGE: bash
CODE:
nightwatch tests/one/firstTest.js

----------------------------------------

TITLE: Using Custom Commands in Nightwatch Test
DESCRIPTION: This snippet shows how to use the custom 'submit' command in a Nightwatch test. It demonstrates setting a value in the search bar and then calling the custom submit command.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();
    google.setValue('@searchBar', 'nightwatch')
      .submit();
    
    browser.end();
  }
};

----------------------------------------

TITLE: Installing Nightwatch in an Existing Project
DESCRIPTION: Commands to navigate to an existing project directory and initialize Nightwatch.

LANGUAGE: bash
CODE:
cd <directory-name> 
npm init nightwatch

----------------------------------------

TITLE: Using Nested Page Object Sections in Nightwatch Tests
DESCRIPTION: Demonstrates how to interact with nested sections in test cases, including accessing nested elements and making assertions.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();
    google.expect.section('@menu').to.be.visible;

    var menuSection = google.section.menu;
    var appSection = menuSection.section.apps;
    menuSection.click('@appSection');

    appSection.expect.element('@myAccount').to.be.visible;
    appSection.expect.element('@googlePlus').to.be.visible;

    browser.end();
  }
};

----------------------------------------

TITLE: Running Tests with JSON Reporter
DESCRIPTION: CLI commands for running tests with JSON reporter output.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome 

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=json 

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit --reporter=json 

----------------------------------------

TITLE: Initializing Page Object in Nightwatch
DESCRIPTION: Demonstrates how to create a new instance of a page object using the browser.page reference in Nightwatch.

LANGUAGE: javascript
CODE:
const myPageObject = browser.page.MyPage(); // defined in MyPage.js module

----------------------------------------

TITLE: Defining Multiple Element Sets in Nightwatch
DESCRIPTION: This snippet demonstrates how to define multiple sets of elements in a Nightwatch page object, including shared elements.

LANGUAGE: javascript
CODE:
var sharedElements = {
  mailLink: 'a[href*="mail.google.com"]'
};

module.exports = {
  elements: [
    sharedElements,
    { searchBar: 'input[type=text]' }
  ]
};

----------------------------------------

TITLE: Running an example Ava test with Nightwatch
DESCRIPTION: JavaScript code demonstrating an example Ava test using Nightwatch to navigate to a website and perform assertions.

LANGUAGE: javascript
CODE:
const test = require('ava');
const await_nightwatch_browser = require('../../../_setup-nightwatch-env.js');

test('duckduckgo example', await_nightwatch_browser, async function(t) {
 browser
   .navigateTo('https://www.ecosia.org/')
   .waitForElementVisible('body')

 const titleContains = await browser.assert.titleContains('Ecosia');
 t.is(titleContains.passed, true);

 const visible =  await browser.assert.visible('input[type=search]')
 t.is(visible.passed, true);

 t.pass();
});

----------------------------------------

TITLE: Implementing Timed Pause in Nightwatch.js Test
DESCRIPTION: Demonstrates how to pause test execution for a fixed duration of 300 milliseconds using the pause() command.

LANGUAGE: javascript
CODE:
it('demos pause command', function(browser) {
  // pause for 300 ms
  browser.pause(300);
});

----------------------------------------

TITLE: Example DuckDuckGo Search Test
DESCRIPTION: Sample Nightwatch test script that performs a search on DuckDuckGo and validates results.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Setting up Nightwatch environment for Ava
DESCRIPTION: JavaScript code to create a Nightwatch client compatible with Ava, including configuration options and browser setup.

LANGUAGE: javascript
CODE:
const Nightwatch = require('nightwatch');

const createNightwatchClient = function({
  headless = true,
  browserName = undefined,
  silent = true,
  verbose = false,
  output = true,
  env = null,
  parallel = false,
  devtools = false,
  debug = false,
  persistGlobals = true,
  configFile = './nightwatch.conf.js',
  globals = {},
  webdriver = {},
  timeout = null,
  enableGlobalApis = false,
  reporter = null,
  alwaysAsync = true,
  desiredCapabilities = {}
} = {}) {

  const client = Nightwatch.createClient({
    headless,
    browserName,
    reporter,
    env,
    timeout,
    parallel,
    output,
    devtools,
    debug,
    enable_global_apis: enableGlobalApis,
    silent: silent && !verbose,
    always_async_commands: alwaysAsync,
    webdriver,
    persist_globals: persistGlobals,
    config: configFile,
    globals,
    desiredCapabilities
  });

  client.updateCapabilities(desiredCapabilities);

  return client.launchBrowser();
};

module.exports = async (t, run) => {
 global.browser = await createNightwatchClient();
 try {
   await run(t);
 } finally {
   await global.browser.end();
 }
};

----------------------------------------

TITLE: Disabling a Test Module in Nightwatch
DESCRIPTION: Demonstrates how to prevent a test module from running by setting the '@disabled' attribute to true. This is useful for excluding known failing tests.

LANGUAGE: javascript
CODE:
module.exports = {
  '@disabled': true, // This will prevent the test module from running.
  
  'sample test': function (browser) {
    // test code
  }
};

----------------------------------------

TITLE: Basic Rijksmuseum Search Test with Nightwatch
DESCRIPTION: Example test case demonstrating web navigation, cookie handling, and search functionality on Rijksmuseum website using Nightwatch commands.

LANGUAGE: javascript
CODE:
describe('Nightwatch Website tests', function() {
  
  it('Searching the Rijksmuseum ', async function(){
    browser.navigateTo('https://www.rijksmuseum.nl/en');
    const cookieDialogVisible = await browser.isVisible({
      selector: '.cookie-consent-bar-wrap',
      suppressNotFoundErrors: true
    });
    
    if (cookieDialogVisible) {
      browser.click('.cookie-consent-bar-wrap button.link');
    }
    browser.pause(1000).click('a[aria-label="Search"]');
    
    return browser.setValue('input.search-bar-input[type=text]', ['night watch'])
      .click('button.button.search-bar-button')
      .pause(1000)
      .assert.containsText('.search-results', 'The Night Watch, Rembrandt van Rijn, 1642');
  });
});

----------------------------------------

TITLE: Extra Setup for Manual WebDriver Session
DESCRIPTION: Example setup file for manually managing WebDriver sessions in Cucumber tests, including capability updates

LANGUAGE: javascript
CODE:
const {Before} = require('@cucumber/cucumber');

Before(async function(testCase) {
  if (!this.client) {
    console.error('Nightwatch instance was not created.');
    return;
  }
  this.client.updateCapabilities({
    testCap: 'testing'
  });
  this.browser = await this.client.launchBrowser();
});

----------------------------------------

TITLE: Updating Nightwatch Client Capabilities - JavaScript
DESCRIPTION: Updates the capabilities of an existing Nightwatch client instance. Allows modification of WebDriver capabilities after initial client creation.

LANGUAGE: javascript
CODE:
client.updateCapabilities({
  testCapability: 'one, two, three'
});

----------------------------------------

TITLE: Specifying Element Properties in Nightwatch.js
DESCRIPTION: Demonstrates how to use an object to specify element properties for more flexible element location and interaction. This example sets a value in the second search input element when multiple elements match the selector.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test ecosia.org': function (browser) {
    browser.setValue({selector: 'input[type=search]', index: 1}, 'nightwatch')
  }
};

----------------------------------------

TITLE: CLI Command for Output Directory
DESCRIPTION: Command line instruction to specify custom output directory for test reports.

LANGUAGE: bash
CODE:
nightwatch --output ./tests-output

----------------------------------------

TITLE: Configuring CucumberJs in Nightwatch
DESCRIPTION: Configuration object showing how to set up CucumberJs as the test runner in Nightwatch, including feature path and parallel execution options

LANGUAGE: javascript
CODE:
{
  test_runner: {
    type: 'cucumber',
    options: {
      feature_path: 'examples/cucumber-js/*/*.feature',
      auto_start_session: true,
      parallel: 2
    }
  },
  src_folders: ['examples/cucumber-js/features/step_definitions']
}

----------------------------------------

TITLE: Configuring Nightwatch for iOS Appium Testing
DESCRIPTION: Nightwatch configuration for running tests on iOS devices using Appium. Specifies Selenium host, port, and desired capabilities for the iOS device.

LANGUAGE: javascript
CODE:
appium_ios: {
  selenium: {
    host: 'localhost',
    port: 4723
  },
  disable_error_log: true,
  webdriver: {
    timeout_options: {
      timeout: 150000,
      retry_attempts: 3
    },
    keep_alive: false,
    start_process: false
  },
  desiredCapabilities: {
    browserName: 'Safari', //not required incase using app
    javascriptEnabled: true,
    platformName: 'iOS', //android or iOS
    platformVersion: '15.0',
    deviceName: 'iPhone 13'
    // "app": APP_PATH + "ios/PieDrive.app", // path for the ios app you want to test
  }
}

----------------------------------------

TITLE: Installing CucumberJs Dependency
DESCRIPTION: Command to install the Cucumber library as a dev dependency in a Nightwatch project

LANGUAGE: bash
CODE:
npm i @cucumber/cucumber --save-dev

----------------------------------------

TITLE: Using .not for Negated Assertions in Nightwatch
DESCRIPTION: Demonstrates the use of .not to negate assertions in Nightwatch. This allows for testing that certain conditions are not met, such as element text not matching a specific value or CSS properties not having certain values.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.not.equal('The Night Watch');

  browser.expect.element('#main').text.to.not.contain('The Night Watch');

  browser.expect.element('#main').to.have.css('display').which.does.not.equal('block');
};

----------------------------------------

TITLE: Defining Globals in Nightwatch Configuration
DESCRIPTION: Example showing how to define global variables in the nightwatch.json configuration file using the 'globals' property. The globals are defined within the test_settings object under the default environment.

LANGUAGE: javascript
CODE:
{
  "src_folders": [],

  "test_settings": {
    "default": {
      "launch_url": "https://nightwatchjs.org",

      "globals": {
        "myGlobalVar" : "some value",
        "otherGlobal" : "some other value"
      }
    }
  }
}

----------------------------------------

TITLE: Basic Story Structure in React
DESCRIPTION: Example of a basic story structure showing the default export and story template setup.

LANGUAGE: javascript
CODE:
import Form from '../components/Form.jsx';

export default {
  title: 'Form Stories',
  component: Form
}

const Template = (args) => <Form {...args} />
export const FilledForm = Template.bind({});

// Runs in the browser context
FilledForm.play = async ({ canvasElement }) => {

};

// Runs in the Nightwatch context
FilledForm.test = async (browser, { component }) => {

}


----------------------------------------

TITLE: Receiving Browser Capabilities in Nightwatch POST Response
DESCRIPTION: Example of browser capabilities received by Nightwatch as part of the initial /session response, including detailed information about the created browser session.

LANGUAGE: bash
CODE:
Response 200 POST /session (724ms)
{
 value: {
   capabilities: {
     acceptInsecureCerts: false,
     browserName: 'chrome',
     browserVersion: '102.0.5005.61',
     chrome: {
       chromedriverVersion: '101.0.4951.41 (93c720...)'
     },
     'goog:chromeOptions': { debuggerAddress: 'localhost:52470' },
     networkConnectionEnabled: false,
     pageLoadStrategy: 'normal',
     platformName: 'mac os x',
     proxy: {},
     setWindowRect: true,
     strictFileInteractability: false,
     timeouts: { implicit: 0, pageLoad: 300000, script: 30000 },
     unhandledPromptBehavior: 'dismiss and notify',
     'webauthn:extension:credBlob': true,
     'webauthn:extension:largeBlob': true,
     'webauthn:virtualAuthenticators': true
   },
   sessionId: '15d21f2132ff0675a97ca419bf6fbd4'
 }}

----------------------------------------

TITLE: Explicitly Failing a Test in Nightwatch Hooks
DESCRIPTION: This snippet demonstrates how to explicitly fail a test in a Nightwatch test hook. It shows how to use the 'done' callback with an Error argument to indicate a test failure.

LANGUAGE: javascript
CODE:
module.exports = {
  afterEach: function(browser, done) {
    // performing an async operation
    performAsync(function(err) {
      if (err) {
        done(err);
        return;
      }
      // ...
    });
  }
};

----------------------------------------

TITLE: Accessing Nightwatch Settings in BDD Tests
DESCRIPTION: This snippet shows how to access the current Nightwatch settings within a BDD test suite, which can be useful for debugging or conditional test execution.

LANGUAGE: javascript
CODE:
describe('homepage test with describe', function() {
  console.log('Settings', this.settings);
  
  it('...', function() {
    // ...
  });
});

----------------------------------------

TITLE: Installing Jest via NPM
DESCRIPTION: Command to install Jest as a dev dependency

LANGUAGE: bash
CODE:
npm i jest --save-dev

----------------------------------------

TITLE: Accessing Globals in Nightwatch Tests
DESCRIPTION: Demonstrates how to access global variables within a Nightwatch test case.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test' : function (browser) {
    console.log(browser.globals.myGlobalVar); // myGlobalVar == "some value"
  }
};

----------------------------------------

TITLE: Installing TeamCity Reporter Package
DESCRIPTION: Command to install the nightwatch-teamcity reporter package as a development dependency.

LANGUAGE: bash
CODE:
npm i nightwatch-teamcity --save-dev

----------------------------------------

TITLE: Initializing Nightwatch Project for Chrome Extension Testing
DESCRIPTION: Basic setup commands to initialize a new Nightwatch project for Chrome Extension testing

LANGUAGE: bash
CODE:
cd /path/to/project/directory
npm init nightwatch

----------------------------------------

TITLE: Custom Reporter Interface for Nightwatch in JavaScript
DESCRIPTION: This code snippet demonstrates the structure of a custom reporter module for Nightwatch. The reporter exports a 'write' function that takes test results, options, and a callback.

LANGUAGE: javascript
CODE:
module.exports = {
write(results, options, done) {
  done();
}
};

----------------------------------------

TITLE: Example Nightwatch Test for DuckDuckGo Search
DESCRIPTION: A sample Nightwatch test that searches for 'Nightwatch.js' on DuckDuckGo and verifies the results.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Command to start the local development server and open in specific browser

LANGUAGE: bash
CODE:
npm start -- --open [chrome|firefox|edge|safari]

----------------------------------------

TITLE: Structuring Nightwatch Release History Page with HTML
DESCRIPTION: This HTML snippet structures a web page for Nightwatch release history. It includes a title, description, and navigation links to adjacent pages in the documentation.

LANGUAGE: html
CODE:
<div class="doc-pagination pt-40">
  <div class="previous">
    <a href="/guide/overview/whats-new-in-v3.html">
      <span>←</span>
        <div class="d-flex flex-column">
          <span class="smallT">Back</span>
          <span class="bigT">What's new in v3?</span>
        </div>
    </a>
  </div>
  <div class="next">
    <a href="/guide/quickstarts/create-and-run-a-nightwatch-test.html">
        <div class="d-flex flex-column">
          <span class="smallT">Next Page</span>
          <span class="bigT">Run your first end-to-end test</span>
        </div>
        <span>→</span>
    </a>
  </div>
</div>

----------------------------------------

TITLE: Viewing Nightwatch Help Options in Bash
DESCRIPTION: This command displays all available command-line options for the Nightwatch test runner.

LANGUAGE: bash
CODE:
nightwatch --help

----------------------------------------

TITLE: Timed Assertions in Nightwatch
DESCRIPTION: Shows how to use before/after timing assertions with retry capabilities for element validation.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.contain('The Night Watch').before(1000);

  browser.expect.element('#main').text.to.not.contain('The Night Watch').after(500);
};

----------------------------------------

TITLE: Disabling API Docs Generation
DESCRIPTION: JavaScript configuration to disable API documentation generation in postdoc.config.js

LANGUAGE: javascript
CODE:
// postdoc.config.js
export default {
  apidocs: false
}

----------------------------------------

TITLE: Updating Nightwatch Client Capabilities in JavaScript
DESCRIPTION: Shows how to update the capabilities of an existing Nightwatch client using the updateCapabilities method.

LANGUAGE: javascript
CODE:
client.updateCapabilities({
  testCapability: 'one, two, three'
});

----------------------------------------

TITLE: Advanced Element Selection in Nightwatch Tests
DESCRIPTION: Shows advanced usage of element selectors including index overrides and callback functions in commands.

LANGUAGE: javascript
CODE:
module.exports = {
  'Test': function (browser) {
    var google = browser.page.google();

    google
      .navigate()
      .assert.title('Google');

    google.waitForElementVisible('@searchBar')
    google.waitForElementVisible({selector:'@searchBar', index:1}, function(result){});

    google.click('@submit');

    browser.end();
  }
};

----------------------------------------

TITLE: Running Tests with Specific Tags
DESCRIPTION: Command line examples showing how to run tests with specific tags using the --tag flag.

LANGUAGE: bash
CODE:
nightwatch --tag login

LANGUAGE: bash
CODE:
nightwatch --tag login --tag something_else

----------------------------------------

TITLE: Sample Output of Captured Network Request in Nightwatch
DESCRIPTION: This code snippet shows an example of the output generated by the captureNetworkRequests() method in Nightwatch. It displays the request number, URL, method, and headers for a single network call made during the test execution.

LANGUAGE: bash
CODE:
Running Capture network calls:
───────────────────────────────────────────────────────────────────────────────────────────────────
Request Number: 35
Request URL: https://www.google.com/favicon.ico
Request method: GET
Request headers: {
  'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="102", "Google Chrome";v="102"',
  'sec-ch-ua-full-version-list': '" Not A;Brand";v="99.0.0.0", "Chromium";v="102.0.5005.61", "Google Chrome";v="102.0.5005.61"',
  'sec-ch-ua-mobile': '?0',
  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36',
  'sec-ch-ua-arch': '"x86"',
  'sec-ch-viewport-width': '1200',
  'sec-ch-ua-full-version': '"102.0.5005.61"',
  'sec-ch-ua-platform-version': '"12.1.0"',
  Referer: 'https://www.google.com/',
  'sec-ch-dpr': '2',
  'sec-ch-ua-bitness': '"64"',
  'sec-ch-ua-wow64': '?0',
  'sec-ch-ua-model': '',
  'sec-ch-ua-platform': '"macOS"'
}

----------------------------------------

TITLE: Asserting Element Count in Nightwatch
DESCRIPTION: Shows how to use the expect.elements().count assertion to check the number of elements matching a selector. Includes examples of asserting equality and inequality.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.elements('div').count.to.equal(10);
  browser.expect.elements('p').count.to.not.equal(1);
}

----------------------------------------

TITLE: Defining Nested Page Object Sections in Nightwatch.js
DESCRIPTION: Shows how to create nested sections within page objects for complex DOM structures. Includes a menu section with nested apps section.

LANGUAGE: javascript
CODE:
module.exports = {
  sections: {
    menu: {
      selector: '#gb',
      elements: {
        mail: {
          selector: 'a[href*="mail"]'
        },
        images: {
          selector: 'a[href*="imghp"]'
        }
      },
      sections: {
        apps: {
          selector: 'div.gb_pc',
          elements: {
            myAccount: {
              selector: '#gb192'
            },
            googlePlus: {
              selector: '#gb119'
            }
          }
        }
      }
    }
  }
};

----------------------------------------

TITLE: Adding Tags to Nightwatch Test Module
DESCRIPTION: Shows how to add tags to a test module using the @tags property. Tags allow tests to belong to multiple suites or categories.

LANGUAGE: javascript
CODE:
module.exports = {
  '@tags': ['login', 'sanity'],
  'demo login test': function (browser) {
     // test code
  }
};

----------------------------------------

TITLE: Using expect.element() in Nightwatch
DESCRIPTION: Demonstrates how to use the expect.element() assertion in Nightwatch to target a specific element using a CSS selector. This method is used to perform assertions on a single element identified by its selector.

LANGUAGE: javascript
CODE:
browser.element('#selector')

----------------------------------------

TITLE: Configuring Web Crawler Access Rules in robots.txt
DESCRIPTION: Defines crawler access rules that prevent indexing of specific version directories while allowing access to other content. Includes a sitemap reference for improved search engine crawling.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow: /v09/
Disallow: /v17/
Disallow: /v26/


Sitemap: https://nightwatchjs.org/sitemap.xml

----------------------------------------

TITLE: Running Specific Test Groups in Nightwatch
DESCRIPTION: Examples of how to run or skip specific test groups using the Nightwatch CLI. Shows commands for running a single group, skipping a group, and skipping multiple groups.

LANGUAGE: bash
CODE:
nightwatch --group smoketests

LANGUAGE: bash
CODE:
nightwatch --skipgroup smoketests

LANGUAGE: bash
CODE:
nightwatch --skipgroup addressbook,chat

----------------------------------------

TITLE: Installing Appium XCUITest Driver for iOS
DESCRIPTION: Command to install the Appium XCUITest driver for iOS testing.

LANGUAGE: bash
CODE:
npx appium driver install xcuitest

----------------------------------------

TITLE: Element Text and CSS Assertions in Nightwatch
DESCRIPTION: Shows how to perform assertions on element text content and CSS properties using equal, contain, and match methods.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.equal('The Night Watch');
  browser.expect.element('#main').text.to.contain('The Night Watch');
  browser.expect.element('#main').to.have.css('display').which.equals('block');
};

----------------------------------------

TITLE: Building and Previewing Documentation
DESCRIPTION: Commands to build the documentation website and preview the generated files

LANGUAGE: bash
CODE:
npm run build
npx postdoc preview

----------------------------------------

TITLE: Defining Nightwatch Plugin Folder Structure
DESCRIPTION: Shows the required folder structure for a Nightwatch plugin, including the nightwatch folder with commands and assertions subdirectories.

LANGUAGE: bash
CODE:
  ├── nightwatch/ 
  |   ├── commands/
  |   |    ├── my_new_custom_command.js
  |   |    └── my_other_custom_command.js
  |   └── assertions/
  |        ├── my_new_custom_assertions.js
  |        └── my_other_custom_command.js
  ├── index.js
  ├── LICENSE.md
  ├── package.json
  └── README.md

----------------------------------------

TITLE: Implementing Async/Await Custom Command
DESCRIPTION: Demonstrates how to use ES6 async/await syntax in a function-style custom command.

LANGUAGE: javascript
CODE:
module.exports = {
  command: async function () {
    this.url('http://nightwatchjs.org');
    this.waitForElementVisible('section#index-container');
    
    const result = await this.elements('css selector', '#index-container ul.features li');
    this.assert.strictEqual(result.value.length, 7, 'Feature elements number is correct');
  }
};

----------------------------------------

TITLE: Configuring Custom Commands Path in Nightwatch
DESCRIPTION: Specifies the path to the folder containing custom commands in the nightwatch.json configuration file.

LANGUAGE: javascript
CODE:
{
  "custom_commands_path" : "nightwatch/commands"
}

----------------------------------------

TITLE: Configuring Custom Commands Path in Nightwatch
DESCRIPTION: Specifies the path to the folder containing custom commands in the nightwatch.json configuration file.

LANGUAGE: javascript
CODE:
{
  "custom_commands_path" : "nightwatch/commands"
}

----------------------------------------

TITLE: Adding iOS Mobile App Testing to Existing Project
DESCRIPTION: Command to add iOS mobile app testing capabilities to an existing Nightwatch project using the mobile helper tool.

LANGUAGE: bash
CODE:
npx @nightwatch/mobile-helper ios --setups

----------------------------------------

TITLE: Implementing Custom Pause Command with EventEmitter
DESCRIPTION: Defines a class-style custom command that implements a pause functionality using EventEmitter for completion.

LANGUAGE: javascript
CODE:
const Events = require('events');

module.exports = class CustomPause extends Events {
  command(ms, cb) {
    // If we don't pass the milliseconds, the client will
    // be suspended indefinitely
    if (!ms) {
      return;
    }
    
    const returnValue = {
      value: 'something'
    };
    
    setTimeout(() => {
      // if we have a callback, call it right before the complete event
      if (cb) {
        cb.call(this.api);
      }
      
      // This also works: this.complete(returnValue)
      this.emit('complete', returnValue);
    }, ms);
  }
}

----------------------------------------

TITLE: Basic React Component Test in JSX
DESCRIPTION: Demonstrates the simplest form of a React component test using JSX syntax in Nightwatch. It imports a Form component and exports a default configuration and a story.

LANGUAGE: jsx
CODE:
import Form from '../components/Form.jsx';

export default {
  title: 'Form',
  component: Form,
}

export const FormStory = () => <Form />


----------------------------------------

TITLE: Uploading Files using Legacy Method in Nightwatch
DESCRIPTION: This snippet demonstrates the older method of uploading files in Nightwatch using the browser.uploadFile command. It's not recommended for current use.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo upload test': function (browser) {
    browser
      .url('http://example.com/upload')
      .waitForElementVisible('input[type="file"]')
      .uploadFile('input[type="file"]', '/path/to/file.jpg')
      .click('button[type="submit"]')
      .assert.textContains('#upload-status', 'File uploaded successfully')
      .end();
  }
};

----------------------------------------

TITLE: Running iOS Mobile App Tests
DESCRIPTION: Command to run sample tests on iOS simulators using Nightwatch.

LANGUAGE: bash
CODE:
npx nightwatch./nightwatch/examples/mobile-app-tests/wikipedia-ios.js --env app.ios.simulator

----------------------------------------

TITLE: Configuring Custom Assertions Path in Nightwatch
DESCRIPTION: Specifies the path to the folder containing custom assertions in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
{
  "custom_assertions_path" : "nightwatch/assertions"
}

----------------------------------------

TITLE: Configuring GeckoDriver with Selenium Server
DESCRIPTION: Configuration for using GeckoDriver through Selenium Server, including server path and CLI arguments

LANGUAGE: javascript
CODE:
{
  "selenium" : {
    "start_process" : true,
    "server_path" : "./bin/selenium-server-standalone-3.{VERSION}.jar",
    "log_path" : "",
    "port" : 4444,
    "cli_args" : {
      "webdriver.gecko.driver" : "./bin/geckodriver"
    }
  }
}

----------------------------------------

TITLE: Configuring Nightwatch to Use a Plugin
DESCRIPTION: Shows how to update the Nightwatch configuration file (nightwatch.conf.js or nightwatch.json) to include the newly installed plugin in the plugins list.

LANGUAGE: javascript
CODE:
{
  plugins: ['my-new-plugin']
  
  // other nightwatch config options
  
}

----------------------------------------

TITLE: Configuring Firefox Extension Installation - Object Format
DESCRIPTION: Example of how to configure Firefox options in nightwatch.conf.js to install extensions and set preferences using a static configuration object.

LANGUAGE: javascript
CODE:
const firefox = require('selenium-webdriver/firefox');

const options = new firefox.Options()
  .addExtensions('/path/to/firebug.xpi')
  .setPreference('extensions.firebug.showChromeErrors', true);

module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities: options
    }
  }
};

----------------------------------------

TITLE: Updating Visual Regression Baseline Screenshots
DESCRIPTION: Command to run Nightwatch tests and update the baseline screenshots for visual regression testing.

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --update-screenshots

----------------------------------------

TITLE: Configuring Nightwatch for VRT
DESCRIPTION: Update the Nightwatch configuration file to include the VRT plugin.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/vrt']
  // other nightwatch settings...
}

----------------------------------------

TITLE: Configuring Nightwatch to Always Use XPath by Default
DESCRIPTION: Demonstrates how to set XPath as the default selector strategy in the Nightwatch configuration file.

LANGUAGE: javascript
CODE:
{
  "use_xpath": true
}

----------------------------------------

TITLE: Finding Elements with XPath Selectors in Nightwatch
DESCRIPTION: Shows how to use XPath selectors directly in Nightwatch commands by passing an element selector object or specifying 'xpath' strategy as the first argument.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest(browser) {
    // using element selector objects
    browser.click({
      selector: '//tr[@data-recordid]/span[text()='Search Text']',
      locateStrategy: 'xpath'
    });
    
    // specifying xpath strategy as first argument
    browser.click('xpath', '//tr[@data-recordid]/span[text()='Search Text']');
}
};

----------------------------------------

TITLE: Running API Tests Command
DESCRIPTION: Command to run API tests with test doubles environment configuration

LANGUAGE: bash
CODE:
npx nightwatch <path to tests> --env testdoubles

----------------------------------------

TITLE: Disabling Browser Session for Unit Testing
DESCRIPTION: Configuration to disable browser session and webdriver process for unit testing

LANGUAGE: javascript
CODE:
module.exports = {
  // ....
  testdoubles: {
    start_session: false,
    webdriver: {
      start_process: false,
    }
  }
}

----------------------------------------

TITLE: Combined E2E and Unit Test Configuration
DESCRIPTION: Example of Nightwatch configuration combining end-to-end tests and unit tests in the same file using exclude and filter properties.

LANGUAGE: json
CODE:
{
  "src_folders" : ["./examples/tests", "./examples/unittests"],
  "output_folder" : "./examples/reports",

  "webdriver" : {
    "start_process": true,
    "server_path": "node_modules/.bin/chromedriver",
    "port": 9515
  },

  "test_settings" : {
    "default" : {
      "launch_url" : "http://localhost",
      "desiredCapabilities": {
        "browserName": "chrome"
      },
      "exclude" : "./examples/unittests/*"
    },

    "unittests" : {
      "unit_tests_mode" : true,
      "filter" : "./examples/unittests/*",
      "exclude" : ""
    }
  }
}

----------------------------------------

TITLE: Utils Module Unit Test Example
DESCRIPTION: Comprehensive example showing unit tests for Nightwatch utils module with multiple test cases and assertions.

LANGUAGE: javascript
CODE:
const assert = require('assert');
const common = require('../../common.js');
const Utils = common.require('util/utils.js');

module.exports = {
  'test Utils' : {
    testFormatElapsedTime : function() {
      var resultMs = Utils.formatElapsedTime(999);
      assert.equal(resultMs, '999ms');

      var resultSec = Utils.formatElapsedTime(1999);
      assert.equal(resultSec, '1.999s');

      var resultMin = Utils.formatElapsedTime(122299, true);
      assert.equal(resultMin, '2m 2s / 122299ms');
    },

    testMakeFnAsync : function() {
      function asyncFn(cb) {
        cb();
      }

      function syncFn() {}

      var convertedFn = Utils.makeFnAsync(1, syncFn);
      var called = false;
      convertedFn(function() {
        called = true;
      });

      assert.equal(Utils.makeFnAsync(1, asyncFn), asyncFn);
      assert.ok(called);
    }
  }
};

----------------------------------------

TITLE: Configuring Unit Test Mode in Nightwatch JSON
DESCRIPTION: JSON configuration example showing how to enable unit test mode globally in Nightwatch by setting unit_tests_mode to true.

LANGUAGE: json
CODE:
{
  "src_folders" : ["tests"],
  "unit_tests_mode": true
}

----------------------------------------

TITLE: Configuring Nightwatch for React Testing
DESCRIPTION: Basic Nightwatch configuration setup to enable React plugin and specify globals path.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: ['@nightwatch/react'],
  globals_path: 'test/globals.js'
}

----------------------------------------

TITLE: Generating and Viewing Allure Reports
DESCRIPTION: Command to generate Allure HTML reports from test results and launch the Allure report server.

LANGUAGE: bash
CODE:
allure generate ./allure-results --clean && allure open

----------------------------------------

TITLE: Running Tests with Allure Reporter
DESCRIPTION: Command to execute Nightwatch tests with Chrome browser that will generate Allure results.

LANGUAGE: bash
CODE:
npx nightwatch examples/tests/duckDuckGo.js --env chrome

----------------------------------------

TITLE: Installing Nightwatch Allure Reporter
DESCRIPTION: NPM command to install the Nightwatch Allure reporter package as a dev dependency.

LANGUAGE: bash
CODE:
npm i nightwatch-allure --save-dev

----------------------------------------

TITLE: Example Nightwatch Test for DuckDuckGo Search
DESCRIPTION: Sample test script demonstrating a basic search functionality test on DuckDuckGo using Nightwatch commands and assertions.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Configuring Output Folder in Nightwatch Settings
DESCRIPTION: Default configuration for specifying the JUnit XML report output location in Nightwatch settings file.

LANGUAGE: javascript
CODE:
module.exports = {
  output_folder: 'tests_output'
}

----------------------------------------

TITLE: Sample DuckDuckGo Search Test
DESCRIPTION: Example test script demonstrating a search functionality test on DuckDuckGo using Nightwatch commands and assertions.

LANGUAGE: javascript
CODE:
describe('duckduckgo example', function() {
  it('Search Nightwatch.js and check results', function(browser) {
    browser
      .navigateTo('https://duckduckgo.com')
      .waitForElementVisible('#search_form_input_homepage')
      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])
      .click('#search_button_homepage')
      .assert.visible('.results--main')
      .assert.textContains('.results--main', 'Nightwatch.js');
  }); 
});

----------------------------------------

TITLE: Configuring Output Folder in Nightwatch Settings
DESCRIPTION: Default configuration settings for specifying the output folder where HTML reports will be saved.

LANGUAGE: javascript
CODE:
module.exports = {
  output_folder: 'tests_output'
}

----------------------------------------

TITLE: Running Custom Reporter Commands
DESCRIPTION: CLI commands for running Nightwatch with custom reporters. Shows how to use a single custom reporter or multiple reporters together.

LANGUAGE: bash
CODE:
nightwatch --reporter=junit --reporter=/path/to/custom_reporter.js

LANGUAGE: bash
CODE:
nightwatch --reporter=/path/to/custom_reporter.js --reporter=html

----------------------------------------

TITLE: Configuring Nightwatch for LambdaTest in JavaScript
DESCRIPTION: This snippet demonstrates how to set up Nightwatch to run tests on LambdaTest. It includes configurations for the Selenium host and browser-specific settings for Chrome and Firefox.

LANGUAGE: javascript
CODE:
module.exports = {
    ...,
    test_settings: {
        ...,
        lambdatest: {
            selenium: {
                host: 'hub.lambdatest.com',
                port: 443
            },
            'username': '${LAMBDATEST_USERNAME}',
            'access_key': '${LAMBDATEST_ACCESS_KEY}',
        },
        // More info on configuring capabilities can be found on:
        // https://www.lambdatest.com/capabilities-generator/
        'lambdatest.chrome': {
            extends: 'lambdatest',
            desiredCapabilities: {
                browserName: 'chrome',
                'LT:Options': {
                    'platformName': 'Windows 10',
                    'browserVersion': '108.0',
                    'project': 'Project',
                }
            }
        },
        
        'lambdatest.firefox': {
            extends: 'lambdatest',
            desiredCapabilities: {
                browserName: 'firefox',
                'LT:Options': {
                    'platformName': 'Windows 10',
                    'browserVersion': '108.0',
                    'project': 'Untitled',
                }
            }
        },
        ...
    }
}

----------------------------------------

TITLE: Navigation Commands
DESCRIPTION: Examples of page navigation in both frameworks

LANGUAGE: javascript
CODE:
// Protractor
it('visits a page', () => {
  browser.get('/about')
  browser.navigate().forward()
  browser.navigate().back()
})

// Nightwatch v2
it('visits a page', () => {
  browser
    .navigateTo('/about')
    .forward()
    .back()
})

----------------------------------------

TITLE: Predefined Nightwatch Globals Configuration
DESCRIPTION: Comprehensive example of all predefined globals that can be configured in Nightwatch, including hooks and timeout settings.

LANGUAGE: javascript
CODE:
module.exports = {
  abortOnAssertionFailure: true,
  waitForConditionPollInterval: 500,
  waitForConditionTimeout : 5000,
  abortOnElementLocateError: false,
  throwOnMultipleElementsReturned: false,
  suppressWarningsOnMultipleElementsReturned: false,
  asyncHookTimeout : 10000,
  unitTestsTimeout : 2000,
  customReporterCallbackTimeout: 20000,
  retryAssertionTimeout: 5000,
  reuseBrowserSession: false,

  reporter: function(results, done) {
    done(results);
  },

  before(done) {
    done();
  },

  after(done) {
    done();
  },

  beforeEach(browser, done) {
    done();
  },

  afterEach(browser, done) {
    done();
  },

  async onBrowserNavigate(browser) {
    return Promise.resolve();
  },

  async onBrowserQuit(browser) {
    return Promise.resolve();
  }
}

----------------------------------------

TITLE: Accessing Globals in Nightwatch Tests
DESCRIPTION: Example demonstrating how to access global variables within a Nightwatch test case using the browser.globals object. The globals defined in configuration are available directly through the Nightwatch API.

LANGUAGE: javascript
CODE:
module.exports = {
  'Demo test' : function (browser) {
    console.log(browser.globals.myGlobalVar); // myGlobalVar == "some value"
  }
};

----------------------------------------

TITLE: Formatting Code Blocks in Nightwatch Documentation
DESCRIPTION: Examples of how to format and style code blocks for different programming languages in Nightwatch documentation.

LANGUAGE: html
CODE:
<pre class="hide-indicator" style="font-size:14px"><code class="language-bash">
[Ecosia.org Demo] Test Suite
============================
ℹ Connected to localhost on port 4444 (2153ms).
Using: firefox (94.0.1) on mac 20.6.0 platform.

✔ Running Demo test ecosia.org:

✔ Element <body> was visible after 24 milliseconds.
✔ Testing if the page title contains 'Ecosia' (10ms)
✔ Testing if element <input[type=search]> is visible (51ms)
✔ Testing if element <button[type=submit]> is visible (12ms)
✔ Testing if element <.mainline-results> contains text 'Nightwatch.js' (197ms)

OK. 5 assertions passed. (1.838s)
</code></pre>

LANGUAGE: html
CODE:
<pre>your code goes here</pre>

LANGUAGE: html
CODE:
<pre data-language="javascript"><code class="language-javascript">
"desiredCapabilities" : {
"browserName" : "chrome",
"javascriptEnabled" : true,
"acceptSslCerts" : true,
"chromeOptions" : {
    "args" : ["start-fullscreen"]
     }
}
</code></pre>

----------------------------------------

TITLE: Displaying Code Snippets in Nightwatch Documentation
DESCRIPTION: Various methods for displaying inline code and code blocks in Nightwatch documentation, including syntax highlighting for different languages.

LANGUAGE: markdown
CODE:
<code>[element]</code>)

LANGUAGE: markdown
CODE:
`code`

LANGUAGE: html
CODE:
<pre style="font-size:20px"><code class="language-bash">npm install nightwatch</code></pre>

----------------------------------------

TITLE: Configuring Webpack Dev Server Port
DESCRIPTION: Configuration to customize the Webpack dev server port used for component rendering

LANGUAGE: javascript
CODE:
module.exports = {
  'webpack_dev_server': {
    port: 10096 // defaults to 5173
  },
  // other nightwatch settings...
}

----------------------------------------

TITLE: Complete Form Story Example
DESCRIPTION: Full example of a Form component story with play and test functions, including setup and teardown hooks.

LANGUAGE: javascript
CODE:
import { userEvent, within } from '@storybook/testing-library';
import Form from './Form.jsx';

export default {
  title: 'Form',
  component: Form,
  
  async setup(browser) {
    console.log('setup hook', browser.capabilities)
  },
  
  async preRender(browser) {
    console.log('preRender hook')
  },
  
  async postRender(browser) {
    console.log('postRender hook')
  },
  
  async teardown(browser) {
    console.log('teardown hook')
  },
}

const Template = (args) => <Form {...args} />;

// Component story for an empty form
export const EmptyForm = Template.bind({});

// Component story simulating filling in the form
export const FilledForm = Template.bind({});

FilledForm.play = async ({ canvasElement }) => {
  
  // Starts querying the component from its root element
  const canvas = within(canvasElement);
  
  // 👇 Simulate interactions with the component
  await userEvent.type(canvas.getByTestId('new-todo-input'), 'outdoors hike');
  await userEvent.click(canvas.getByRole('button'));
};

FilledForm.test = async (browser, { component }) => {
  // 👇 Run commands and assertions in the Nightwatch context
  await expect(component).to.be.visible;
}

----------------------------------------

TITLE: GeckoDriver Command Line Options
DESCRIPTION: Available command line options and flags for GeckoDriver standalone usage

LANGUAGE: plaintext
CODE:
$ ./bin/geckodriver-0.23 -help
geckodriver 0.23.0

USAGE:
    geckodriver-0.23 [FLAGS] [OPTIONS]

FLAGS:
        --connect-existing    Connect to an existing Firefox instance
    -h, --help                Prints help information
        --no-e10s             Start Firefox without multiprocess support (e10s) enabled
    -V, --version             Prints version information
    -v                        Set the level of verbosity. Pass once for debug level logging and twice for trace level logging

OPTIONS:
    -b, --binary <BINARY>        Path to the Firefox binary, if no binary capability provided
        --log <LEVEL>            Set Gecko log level [values: fatal, error, warn, info, config, debug, trace]
        --marionette-port <PORT> Port to use to connect to gecko (default: random free port)
        --host <HOST>            Host ip to use for WebDriver server (default: 127.0.0.1)
    -p, --port <PORT>            Port to use for WebDriver server (default: 4444)

----------------------------------------

TITLE: Configuring Microsoft Edge WebDriver in Nightwatch.json
DESCRIPTION: This snippet shows how to configure the Microsoft Edge WebDriver in the Nightwatch.json file. It includes setting the Selenium host and port, specifying the WebDriver path, and defining desired capabilities for the Edge browser.

LANGUAGE: javascript
CODE:
"localEdge": {
       selenium_host: "127.0.0.1",
       selenium_port: 4444,
       selenium: {
           start_process: true,
           host: "127.0.0.1",
           port: 4444,
           cli_args: {
               "webdriver.edge.driver": "C:\\Program Files (x86)\\Microsoft Web Driver\\MicrosoftWebDriver.exe",
           }
       },
        desiredCapabilities: {
           platform: "Windows 10",
           browserName: "MicrosoftEdge",
           javascriptEnabled: true
       }
}

----------------------------------------

TITLE: Configuring Screenshots for Test Failures in Nightwatch
DESCRIPTION: This snippet demonstrates how to enable screenshot capture for test failures and errors in Nightwatch. It shows the configuration in the nightwatch.json file, specifying the enabled status, when to capture (on failure), and the path to save screenshots.

LANGUAGE: javascript
CODE:
{
  "test_settings" : {
    "default" : {
      "screenshots" : {
        "enabled" : true,
        "on_failure" : true,
        "path" : "./screens"
      }
    }
  }
}

----------------------------------------

TITLE: Clicking a Button in Google Search using Nightwatch.js
DESCRIPTION: This test navigates to Google, searches for 'nightwatch.js', clicks the submit button, and verifies the search results. It demonstrates element selection, value setting, clicking, and text assertion in Nightwatch.js.

LANGUAGE: javascript
CODE:
module.exports = {
  before : function(browser) {
    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12
    browser.globals.waitForConditionTimeout = 5000;
  },
  
  'click example test' : function (browser) {
    
    browser
      .url('https://google.com')
      .waitForElementVisible('input[type=text]')
      .setValue('input[type=text]', 'nightwatch.js')
      .click('button[type=submit]', function(result) {
        this.assert.strictEqual(result.status, 0);
      })
      .expect.element('#rcnt').text.to.contain('nightwatchjs.org/');
  },
  
  after : function(browser) {
    browser.end();
  }
};

----------------------------------------

TITLE: Using Global 'browser' Object in Nightwatch 2+ (JavaScript)
DESCRIPTION: Demonstrates how to use the 'browser' object as a global in Nightwatch version 2 and above, without passing it as an argument to the test function.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function () {
    browser.init();
  }
};

----------------------------------------

TITLE: Using .equal, .contain, and .match Assertions in Nightwatch
DESCRIPTION: Illustrates how to use the .equal, .contain, and .match methods for asserting text content and CSS properties of elements. These methods can be used to verify specific values or patterns in element attributes or text.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.equal('The Night Watch');

  browser.expect.element('#main').text.to.contain('The Night Watch');

  browser.expect.element('#main').to.have.css('display').which.equals('block');
};

----------------------------------------

TITLE: Switching Between XPath and CSS Selectors in Nightwatch
DESCRIPTION: Demonstrates how to toggle between XPath and CSS selectors using useXpath() and useCss() commands. This approach is useful when multiple subsequent commands need to use XPath expressions.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function (browser) {
    browser
      .useXpath() // every selector now must be xpath
      .click("//tr[@data-recordid]/span[text()='Search Text']")
      .useCss() // we're back to CSS now
      .setValue('input[type=text]', 'nightwatch')
  }
};

----------------------------------------

TITLE: Switching Between XPath and CSS Selectors in Nightwatch
DESCRIPTION: Demonstrates how to toggle between XPath and CSS selectors using useXpath() and useCss() commands. This approach is useful when multiple subsequent commands need to use XPath expressions.

LANGUAGE: javascript
CODE:
module.exports = {
  demoTest: function (browser) {
    browser
      .useXpath() // every selector now must be xpath
      .click("//tr[@data-recordid]/span[text()='Search Text']")
      .useCss() // we're back to CSS now
      .setValue('input[type=text]', 'nightwatch')
  }
};

----------------------------------------

TITLE: Asserting Specific Element Count in Nightwatch
DESCRIPTION: This example demonstrates how to use the expect.elements(...).count assertion to verify that a specific number of elements exist on a page in a Nightwatch test.

LANGUAGE: javascript
CODE:
module.exports = {
  'demo test ecosia.org'(browser) {
    browser
      .url('https://www.ecosia.org/')
      .expect.elements('section').count.to.equal(5);
  },
  
  after(browser) {
    browser.end();
  }
};

----------------------------------------

TITLE: Launching Browser Session - JavaScript
DESCRIPTION: Creates a new browser session using an existing Nightwatch client. Returns the Nightwatch browser API object for test automation.

LANGUAGE: javascript
CODE:
const browser = await client.launchBrowser();

----------------------------------------

TITLE: Running Nightwatch Test with Debug Flag
DESCRIPTION: Command to run a specific Nightwatch test with the debug flag enabled to initiate the Nightwatch Inspector. The debug flag pauses test execution at browser.debug() statements.

LANGUAGE: bash
CODE:
npx nightwatch /test/inspector_demo.js --env chrome --debug

----------------------------------------

TITLE: Enabling Chrome DevTools Protocol in Nightwatch Configuration
DESCRIPTION: This snippet demonstrates how to enable the Chrome DevTools Protocol in the Nightwatch configuration file. It sets the 'chromeOptions' property to include the necessary flags for DevTools Protocol support.

LANGUAGE: javascript
CODE:
module.exports = {
  test_settings: {
    default: {
      desiredCapabilities: {
        browserName: 'chrome',
        chromeOptions: {
          args: ['--remote-debugging-port=9222']
        }
      }
    }
  }
}

----------------------------------------

TITLE: Executing Environment-Specific Tests
DESCRIPTION: Shows how to run Nightwatch tests using a specific browser environment from the command line.

LANGUAGE: bash
CODE:
nightwatch --env safari

----------------------------------------

TITLE: Configuring Firefox Profile with Extensions in Nightwatch
DESCRIPTION: This example shows how to configure a Firefox profile with extensions in Nightwatch. It uses the selenium-webdriver/firefox Options class to add an extension and set preferences.

LANGUAGE: javascript
CODE:
const firefox = require('selenium-webdriver/firefox');

const options = new firefox.Options()
  .addExtensions('/path/to/firebug.xpi')
  .setPreference('extensions.firebug.showChromeErrors', true);

module.exports = {
  src_folders: ['tests'],
  test_settings: {
    default: {
      browserName: 'firefox',
      desiredCapabilities: options
    }
  }
};

----------------------------------------

TITLE: Negative Assertions in Nightwatch
DESCRIPTION: Demonstrates how to use the 'not' chain to negate assertions for text and CSS properties.

LANGUAGE: javascript
CODE:
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.not.equal('The Night Watch');

  browser.expect.element('#main').text.to.not.contain('The Night Watch');

  browser.expect.element('#main').to.have.css('display').which.does.not.equal('block');
};