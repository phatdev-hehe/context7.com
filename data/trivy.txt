TITLE: Scanning Targets with Trivy in Bash
DESCRIPTION: Demonstrates the general usage pattern for Trivy CLI, allowing users to specify targets and scanners for vulnerability analysis.

LANGUAGE: bash
CODE:
trivy <target> [--scanners <scanner1,scanner2>] <subject>

----------------------------------------

TITLE: Installing Trivy on RHEL/CentOS via Repository
DESCRIPTION: Configuration for adding Trivy repository and installing via yum package manager on RHEL/CentOS systems.

LANGUAGE: bash
CODE:
cat << EOF | sudo tee -a /etc/yum.repos.d/trivy.repo
[trivy]
name=Trivy repository
baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/\$basearch/
gpgcheck=1
enabled=1
gpgkey=https://aquasecurity.github.io/trivy-repo/rpm/public.key
EOF
sudo yum -y update
sudo yum -y install trivy

----------------------------------------

TITLE: Basic Usage of Trivy Security Scanner
DESCRIPTION: Demonstrates the general usage pattern for Trivy, allowing specification of target, scanners, and subject to scan.

LANGUAGE: bash
CODE:
trivy <target> [--scanners <scanner1,scanner2>] <subject>

----------------------------------------

TITLE: Installing Trivy using Docker Container
DESCRIPTION: Example of running Trivy in a Docker container with mounted socket and cache directory for scanning container images.

LANGUAGE: bash
CODE:
docker run -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:{{ git.tag[1:] }} image python:3.4-alpine

----------------------------------------

TITLE: Generating CycloneDX SBOM with Vulnerabilities for Docker Image
DESCRIPTION: Command to generate a CycloneDX SBOM including vulnerability information for the Alpine 3.15 Docker image using Trivy.

LANGUAGE: bash
CODE:
$ trivy image --scanners vuln --format cyclonedx --output result.json alpine:3.15

----------------------------------------

TITLE: Installing Trivy on Debian/Ubuntu via Repository
DESCRIPTION: Steps to add Trivy repository and install via apt package manager on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
sudo apt-get install wget gnupg
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy

----------------------------------------

TITLE: Detailed Namespace-Specific Scan with Trivy
DESCRIPTION: Performs a detailed scan of a specific namespace (kube-system) with comprehensive reporting.

LANGUAGE: sh
CODE:
trivy k8s --include-namespaces kube-system --report all

----------------------------------------

TITLE: Scanning Local Code Repository with Trivy in Bash
DESCRIPTION: Demonstrates scanning a local code repository for vulnerabilities, exposed secrets, and misconfigurations using Trivy.

LANGUAGE: bash
CODE:
trivy fs --scanners vuln,secret,misconfig /path/to/myproject

----------------------------------------

TITLE: Scanning Container Image for Vulnerabilities with Trivy in Bash
DESCRIPTION: Shows how to scan a container image from a registry using Trivy's default vulnerability scanner.

LANGUAGE: bash
CODE:
trivy image python:3.4-alpine

----------------------------------------

TITLE: Creating Signed Attestation with Local Key Pair
DESCRIPTION: These commands generate a vulnerability scan record using Trivy and then use Cosign to create a signed attestation for a container image using a local key pair.

LANGUAGE: bash
CODE:
$ trivy image --format cosign-vuln --output vuln.json <IMAGE>
$ cosign attest --key /path/to/cosign.key --type vuln --predicate vuln.json <IMAGE>

----------------------------------------

TITLE: Scanning Local Project with Trivy
DESCRIPTION: Basic command to scan a local project directory for vulnerabilities and secrets using Trivy. This is the default scan which includes vulnerability and secret scanning.

LANGUAGE: bash
CODE:
$ trivy fs /path/to/project

----------------------------------------

TITLE: Scanning Container Image for Misconfigurations
DESCRIPTION: Scan a container image for misconfigurations, which is useful for images containing IaC files

LANGUAGE: shell
CODE:
$ trivy image --scanners misconfig [YOUR_IMAGE_NAME]

----------------------------------------

TITLE: Setting Trivy Environment Variables in Bash
DESCRIPTION: Example showing how to configure Trivy using environment variables to set debug mode and severity level when scanning an Alpine image.

LANGUAGE: bash
CODE:
$ TRIVY_DEBUG=true TRIVY_SEVERITY=CRITICAL trivy image alpine:3.15

----------------------------------------

TITLE: Scanning Docker Image with Trivy
DESCRIPTION: Example of using Trivy to scan a Python Alpine Docker image for vulnerabilities.

LANGUAGE: bash
CODE:
trivy image python:3.4-alpine

----------------------------------------

TITLE: Scanning Container Image for Specific Architecture
DESCRIPTION: Scan a container image for a specific OS/Architecture platform

LANGUAGE: shell
CODE:
$ trivy image --platform=linux/arm alpine:3.16.1

----------------------------------------

TITLE: Keyless Signing of CycloneDX SBOM Attestation
DESCRIPTION: This snippet shows how to generate and sign a CycloneDX SBOM attestation using Cosign's keyless signing feature, which uses OpenID Connect for authentication.

LANGUAGE: bash
CODE:
$ trivy image --format cyclonedx -o sbom.cdx.json <IMAGE>
$ COSIGN_EXPERIMENTAL=1 cosign attest --type cyclonedx --predicate sbom.cdx.json <IMAGE>

----------------------------------------

TITLE: Scanning Container Image Configuration for Secrets
DESCRIPTION: Scan the configuration of a container image for secrets

LANGUAGE: shell
CODE:
$ trivy image --image-config-scanners secret [YOUR_IMAGE_NAME]

----------------------------------------

TITLE: Scanning Filesystem with Multiple Trivy Scanners
DESCRIPTION: Demonstrates scanning a project directory for vulnerabilities, secrets, and misconfigurations using Trivy.

LANGUAGE: bash
CODE:
trivy fs --scanners vuln,secret,misconfig myproject/

----------------------------------------

TITLE: Custom Trivy Container Scanning Job in GitLab CI
DESCRIPTION: Defines a custom GitLab CI job for running Trivy container scans. It builds a Docker image, scans it for vulnerabilities, and generates reports.

LANGUAGE: yaml
CODE:
stages:
  - test

trivy:
  stage: test
  image: docker:stable
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    IMAGE: trivy-ci-test:$CI_COMMIT_SHA
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  allow_failure: true
  script:
    # Build image
    - docker build -t $IMAGE .
    # Build report
    - ./trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl" -o gl-container-scanning-report.json $IMAGE
    # Print report
    - ./trivy image --exit-code 0 --severity HIGH $IMAGE
    # Fail on severe vulnerabilities
    - ./trivy image --exit-code 1 --severity CRITICAL $IMAGE
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab Ultimate)
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

----------------------------------------

TITLE: Scanning with Multiple Scanners
DESCRIPTION: Examples of using trivy with different scanner types for images, filesystems and repositories

LANGUAGE: bash
CODE:
$ trivy image --scanners misconfig IMAGE_NAME

LANGUAGE: bash
CODE:
$ trivy fs --scanners misconfig /path/to/dir

----------------------------------------

TITLE: Basic Repository Scanning with Trivy
DESCRIPTION: Basic command syntax for scanning local or remote repositories with Trivy. Shows examples for scanning local directories, single files, and remote GitHub repositories.

LANGUAGE: bash
CODE:
$ trivy repo (REPO_PATH | REPO_URL)

LANGUAGE: bash
CODE:
$ trivy repo ./

LANGUAGE: bash
CODE:
$ trivy repo ./trivy-ci-test/Pipfile.lock

LANGUAGE: bash
CODE:
$ trivy repo https://github.com/aquasecurity/trivy-ci-test

----------------------------------------

TITLE: Scanning Kubernetes Cluster with Trivy in Bash
DESCRIPTION: Shows how to scan a Kubernetes cluster using all available scanners in Trivy and generate a summary report.

LANGUAGE: bash
CODE:
trivy k8s --report summary cluster

----------------------------------------

TITLE: Trivy Image Scanning Examples
DESCRIPTION: Common usage examples showing different scanning scenarios including basic scans, filtering by severity, and generating reports in various formats.

LANGUAGE: shell
CODE:
  # Scan a container image
  $ trivy image python:3.4-alpine

  # Scan a container image from a tar archive
  $ trivy image --input ruby-3.1.tar

  # Filter by severities
  $ trivy image --severity HIGH,CRITICAL alpine:3.15

  # Ignore unfixed/unpatched vulnerabilities
  $ trivy image --ignore-unfixed alpine:3.15

  # Scan a container image in client mode
  $ trivy image --server http://127.0.0.1:4954 alpine:latest

  # Generate json result
  $ trivy image --format json --output result.json alpine:3.15

  # Generate a report in the CycloneDX format
  $ trivy image --format cyclonedx --output result.cdx alpine:3.15

----------------------------------------

TITLE: Configuring CircleCI for Docker Image Building and Trivy Scanning
DESCRIPTION: This YAML configuration sets up a CircleCI job to build a Docker image, install Trivy, and scan the image for vulnerabilities. It uses the docker:stable-git image and includes steps for checking out code, setting up remote Docker, building the image, installing Trivy, and running a scan.

LANGUAGE: yaml
CODE:
jobs:
  build:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          command: docker build -t trivy-ci-test:${CIRCLE_SHA1} .
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan the local image with trivy
          command: trivy image --exit-code 0 --no-progress trivy-ci-test:${CIRCLE_SHA1}
workflows:
  version: 2
  release:
    jobs:
      - build

----------------------------------------

TITLE: Generating SPDX SBOM for Docker Image with Trivy
DESCRIPTION: Command to generate an SPDX JSON SBOM for the Alpine 3.15 Docker image using Trivy.

LANGUAGE: bash
CODE:
$ trivy image --format spdx-json --output result.json alpine:3.15

----------------------------------------

TITLE: Trivy Image Command Options
DESCRIPTION: Comprehensive list of available command line options and flags for customizing image scans.

LANGUAGE: text
CODE:
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "fs")
      --cache-ttl duration                cache TTL when using redis as cache backend
      --check-namespaces strings          Rego namespaces
      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default "mirror.gcr.io/aquasec/trivy-checks:1")
      [... truncated for brevity ...]

----------------------------------------

TITLE: Starting Trivy Server
DESCRIPTION: Launches Trivy server that downloads and maintains vulnerability database automatically

LANGUAGE: bash
CODE:
$ trivy server --listen localhost:8080

----------------------------------------

TITLE: Displaying Severity Source Example
DESCRIPTION: Shows how to view the source of vulnerability severity ratings in JSON format.

LANGUAGE: shell
CODE:
"SeveritySource": "debian",

----------------------------------------

TITLE: Package Version Detection Example
DESCRIPTION: Example showing how to check Python package version information.

LANGUAGE: bash
CODE:
[root@987ee49dc93d /]# head -n 3 /usr/lib/python3.6/site-packages/requests-2.20.0-py3.6.egg-info/PKG-INFO
Metadata-Version: 2.1
Name: requests
Version: 2.20.0

----------------------------------------

TITLE: Scanning EBS Snapshot in Specific Region with Trivy
DESCRIPTION: This command shows how to scan an EBS snapshot in a non-default AWS region by using the '--aws-region' option with Trivy.

LANGUAGE: bash
CODE:
$ trivy vm --aws-region ap-northeast-1 ebs:ebs-0123456789abcdefg

----------------------------------------

TITLE: Running Trivy Config Scan
DESCRIPTION: Basic usage of the 'trivy config' command to scan a directory for misconfigurations. The command accepts flags and a directory path as arguments.

LANGUAGE: bash
CODE:
trivy config [flags] DIR

----------------------------------------

TITLE: Basic Kubernetes Cluster Scanning Command
DESCRIPTION: Basic command to scan a Kubernetes cluster using Trivy with default configuration

LANGUAGE: sh
CODE:
trivy k8s [flags] [CONTEXT]

----------------------------------------

TITLE: Scanning Container Image for Vulnerabilities
DESCRIPTION: Scan a container image for vulnerabilities using Trivy's default settings

LANGUAGE: shell
CODE:
$ trivy image [YOUR_IMAGE_NAME]

----------------------------------------

TITLE: Trivy Kubernetes Command Options
DESCRIPTION: Comprehensive list of command-line options for configuring Kubernetes cluster scans.

LANGUAGE: bash
CODE:
      --burst int                         specify the maximum burst for throttle (default 10)
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "fs")
      --cache-ttl duration                cache TTL when using redis as cache backend
      [... truncated for brevity ...]

----------------------------------------

TITLE: Scanning Local VM Image for Vulnerabilities with Trivy
DESCRIPTION: This command demonstrates how to use Trivy to scan a local virtual machine image file (disk.vmdk) for vulnerabilities using the 'vm' subcommand.

LANGUAGE: bash
CODE:
$ trivy vm --scanners vuln disk.vmdk

----------------------------------------

TITLE: Updating Trivy Database Without Scanning
DESCRIPTION: Shows how to update the Trivy vulnerability database without performing a scan. This is useful for ensuring the database is up-to-date for subsequent scans.

LANGUAGE: bash
CODE:
trivy image --download-db-only

----------------------------------------

TITLE: Trivy Usage Examples
DESCRIPTION: Common usage examples showing how to scan container images, local filesystems, and run Trivy in server mode.

LANGUAGE: bash
CODE:
  # Scan a container image
  $ trivy image python:3.4-alpine

  # Scan a container image from a tar archive
  $ trivy image --input ruby-3.1.tar

  # Scan local filesystem
  $ trivy fs .

  # Run in server mode
  $ trivy server

----------------------------------------

TITLE: Installing Trivy with Curl in Dockerfile
DESCRIPTION: Demonstrates how to install and run Trivy directly in a Dockerfile using curl. This method downloads Trivy from the official repository, installs it, and performs a rootfs scan with fail-on-error functionality.

LANGUAGE: dockerfile
CODE:
FROM alpine:3.7

RUN apk add curl \
    && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \
    && trivy rootfs --exit-code 1 --no-progress /

LANGUAGE: bash
CODE:
docker build -t vulnerable-image .

----------------------------------------

TITLE: Basic Trivy Command Structure
DESCRIPTION: The basic command structure for running Trivy scans. Shows the general syntax pattern used across all Trivy commands.

LANGUAGE: bash
CODE:
trivy [global flags] command [flags] target

----------------------------------------

TITLE: Basic Kubernetes Cluster Summary Scan with Trivy
DESCRIPTION: Scans the entire Kubernetes cluster and provides a summary report of vulnerabilities.

LANGUAGE: sh
CODE:
trivy k8s --report=summary

----------------------------------------

TITLE: Running Trivy Config with Custom Checks
DESCRIPTION: Command to execute Trivy configuration scanning with custom Rego policy files and namespace specification.

LANGUAGE: bash
CODE:
trivy config --config-check /path/to/policy.rego --config-check /path/to/custom_checks --namespaces user /path/to/config_dir

----------------------------------------

TITLE: Installing Trivy-Operator with ArgoCD CLI
DESCRIPTION: These commands create a namespace for Trivy and use ArgoCD to deploy the Trivy-Operator from its GitHub repository.

LANGUAGE: bash
CODE:
> kubectl create ns trivy-system
> argocd app create trivy-operator --repo https://github.com/aquasecurity/trivy-operator --path deploy/helm --dest-server https://kubernetes.default.svc --dest-namespace trivy-system

----------------------------------------

TITLE: Installing Trivy using Install Script
DESCRIPTION: Official installation script that downloads and installs Trivy from GitHub Release to /usr/local/bin.

LANGUAGE: bash
CODE:
curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin {{ git.tag }}

----------------------------------------

TITLE: Scanning CloudFormation with Parameter Overrides in Trivy
DESCRIPTION: This command demonstrates how to use Trivy to scan CloudFormation templates with parameter overrides. It uses the --cf-params flag to specify a JSON file containing CloudFormation parameters, allowing for more accurate misconfiguration detection.

LANGUAGE: bash
CODE:
trivy config --cf-params params.json ./infrastructure/cf

----------------------------------------

TITLE: Scanning for Misconfigurations with Trivy
DESCRIPTION: Command to enable misconfiguration scanning, which is disabled by default. This scans a project for potential misconfigurations.

LANGUAGE: bash
CODE:
$ trivy fs --scanners misconfig /path/to/project

----------------------------------------

TITLE: Creating and Signing CycloneDX SBOM Attestation
DESCRIPTION: This snippet demonstrates how to generate a CycloneDX SBOM using Trivy and then sign it with Cosign using a local key pair.

LANGUAGE: bash
CODE:
$ trivy image --format cyclonedx -o sbom.cdx.json <IMAGE>
$ cosign attest --key /path/to/cosign.key --type cyclonedx --predicate sbom.cdx.json <IMAGE>

----------------------------------------

TITLE: Vendor Severity Rating Example
DESCRIPTION: Example JSON output showing severity ratings from different vendors for a vulnerability.

LANGUAGE: json
CODE:
"VendorSeverity": {
  "amazon": 2,
  "cbl-mariner": 4,
  "ghsa": 4,
  "nvd": 4,
  "photon": 4,
  "redhat": 2,
  "ubuntu": 2
}

----------------------------------------

TITLE: Package Type Filtering Command
DESCRIPTION: Example command showing how to scan only OS packages in a Ruby image.

LANGUAGE: bash
CODE:
$ trivy image --pkg-types os ruby:2.4.0

----------------------------------------

TITLE: Required RBAC Permissions for Trivy Kubernetes Scanning
DESCRIPTION: YAML configuration showing the required RBAC permissions for Trivy to scan Kubernetes clusters, including permissions for listing resources and node collector operations

LANGUAGE: yaml
CODE:
- apiGroups: [""] 
  resources: ["*"]
  verbs: ["list"]
- apiGroups: ["apps", "batch", "networking.k8s.io", "rbac.authorization.k8s.io"]
  resources: ["*"]
  verbs: ["list"]

LANGUAGE: yaml
CODE:
- apiGroups: [""]
  resources: ["nodes/proxy", "pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["list", "get"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create","delete", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create"]

----------------------------------------

TITLE: Creating Keyless Signed Attestation
DESCRIPTION: These commands generate a vulnerability scan record using Trivy and then use Cosign to create a keyless signed attestation for a container image.

LANGUAGE: bash
CODE:
$ trivy image --format cosign-vuln -o vuln.json <IMAGE>
$ cosign attest --type vuln --predicate vuln.json <IMAGE>

----------------------------------------

TITLE: Filtering Vulnerabilities by Severity
DESCRIPTION: Shows how to filter vulnerability scan results by HIGH and CRITICAL severity levels using the --severity flag

LANGUAGE: bash
CODE:
$ trivy image --severity HIGH,CRITICAL ruby:2.4.0

----------------------------------------

TITLE: Scanning Single File with Trivy
DESCRIPTION: Command to scan a specific file (in this case, a Pipfile.lock) for vulnerabilities using Trivy.

LANGUAGE: bash
CODE:
$ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test/Pipfile.lock

----------------------------------------

TITLE: Scanning Kubernetes Cluster with Trivy
DESCRIPTION: Shows how to use Trivy to scan a Kubernetes cluster and generate a summary report.

LANGUAGE: bash
CODE:
trivy k8s --report summary cluster

----------------------------------------

TITLE: Authenticate Using Environment Variables
DESCRIPTION: Shows how to authenticate with a private registry using environment variables for username and password credentials.

LANGUAGE: shell
CODE:
$ TRIVY_USERNAME=YOUR_USERNAME TRIVY_PASSWORD=YOUR_PASSWORD trivy image YOUR_PRIVATE_IMAGE

----------------------------------------

TITLE: Trivy Kubernetes Usage Examples
DESCRIPTION: Examples showing different ways to scan Kubernetes clusters, including summary reports and namespace-specific scans.

LANGUAGE: bash
CODE:
  # cluster scanning
  $ trivy k8s --report summary

  # cluster scanning with specific namespace:
  $ trivy k8s --include-namespaces kube-system --report summary 

  # cluster with specific context:
  $ trivy k8s kind-kind --report summary

----------------------------------------

TITLE: Basic Trivy Kubernetes Command Syntax
DESCRIPTION: Basic command syntax for scanning Kubernetes clusters with Trivy.

LANGUAGE: bash
CODE:
trivy kubernetes [flags] [CONTEXT]

----------------------------------------

TITLE: Combining Exit Codes for Vulnerabilities and EOL in Shell
DESCRIPTION: Example of combining exit codes for critical vulnerabilities and end-of-life operating systems.

LANGUAGE: shell
CODE:
$ trivy image --exit-code 1 --exit-on-eol 1 --severity CRITICAL alpine:3.16.3

----------------------------------------

TITLE: Configuring Secret Options for Trivy in YAML
DESCRIPTION: Defines secret-related options for Trivy, specifying the configuration file for secret scanning.

LANGUAGE: yaml
CODE:
secret:
  # Same as '--secret-config'
  config: "trivy-secret.yaml"

----------------------------------------

TITLE: Detailed Kubernetes Cluster Scan with Trivy
DESCRIPTION: Performs a comprehensive scan of the entire Kubernetes cluster with detailed reporting of all findings.

LANGUAGE: sh
CODE:
trivy k8s --report=all

----------------------------------------

TITLE: Configuring Trivy Scanners in Shell
DESCRIPTION: Example of disabling secret scanning for container image analysis using the --scanners flag.

LANGUAGE: shell
CODE:
$ trivy image --scanners vuln alpine:3.15

----------------------------------------

TITLE: Loading Custom Checks
DESCRIPTION: Commands demonstrating how to load custom policy checks and checks bundles

LANGUAGE: bash
CODE:
trivy config --config-check custom-policy/policy --config-check combine/policy --config-check policy.rego --namespaces user myapp

LANGUAGE: bash
CODE:
trivy config --checks-bundle-repository myregistry.local/mychecks --namespaces user myapp

----------------------------------------

TITLE: Scanning with OpenVEX
DESCRIPTION: Command to scan a Debian 11.6 image with an OpenVEX file using Trivy.

LANGUAGE: bash
CODE:
$ trivy image debian:11.6 --vex debian11.openvex.json

----------------------------------------

TITLE: Trivy Global Options
DESCRIPTION: Available global configuration options for Trivy, including cache directory, config path, debug mode, and output format settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
  -f, --format string             version format (json)
      --generate-default-config   write the default config to trivy-default.yaml
  -h, --help                      help for trivy
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Trivy Clean Usage Examples
DESCRIPTION: Examples demonstrating different ways to use the trivy clean command, including removing all caches, scan cache, and vulnerability database.

LANGUAGE: bash
CODE:
  # Remove all caches
  $ trivy clean --all

  # Remove scan cache
  $ trivy clean --scan-cache

  # Remove vulnerability database
  $ trivy clean --vuln-db

----------------------------------------

TITLE: License Scanning with Ignored Licenses in Trivy
DESCRIPTION: This command demonstrates how to ignore specific licenses (MPL-2.0 and MIT) during license scanning of the Grafana image using Trivy.

LANGUAGE: shell
CODE:
trivy image --scanners license --ignored-licenses MPL-2.0,MIT --severity HIGH grafana/grafana:latest

----------------------------------------

TITLE: Resolving Python Package Dependencies with pip freeze
DESCRIPTION: Example showing how to detect transitive dependencies by generating a complete requirements.txt file using pip freeze.

LANGUAGE: bash
CODE:
$ cat requirements.txt # it will only find `requests@2.28.2`.
requests==2.28.2 
$ pip install -r requirements.txt
...

$ pip freeze > requirements.txt   
$ cat requirements.txt # it will also find the transitive dependencies of `requests@2.28.2`.
certifi==2022.12.7
charset-normalizer==3.1.0
idna==3.4
PyJWT==2.1.0
requests==2.28.2
urllib3==1.26.15

----------------------------------------

TITLE: Trivy Config Command Options
DESCRIPTION: List of available options for the 'trivy config' command. These options allow users to customize the scan behavior, output format, and various other settings.

LANGUAGE: bash
CODE:
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "memory")
      --cache-ttl duration                cache TTL when using redis as cache backend
      --cf-params strings                 specify paths to override the CloudFormation parameters files
      --check-namespaces strings          Rego namespaces
      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default "mirror.gcr.io/aquasec/trivy-checks:1")
      --compliance string                 compliance report to generate
      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files
      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded
      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking
      --enable-modules strings            [EXPERIMENTAL] module names to enable
      --exit-code int                     specify exit code when any security issues are found
      --file-patterns strings             specify config file patterns
  -f, --format string                     format
                                          Allowed values:
                                            - table
                                            - json
                                            - template
                                            - sarif
                                            - cyclonedx
                                            - spdx
                                            - spdx-json
                                            - github
                                            - cosign-vuln
                                           (default "table")
      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)
      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.
      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --helm-values strings               specify paths to override the Helm values.yaml files
  -h, --help                              help for config
      --ignore-policy string              specify the Rego file path to evaluate each vulnerability
      --ignorefile string                 specify .trivyignore file (default ".trivyignore")
      --include-deprecated-checks         include deprecated checks
      --include-non-failures              include successes, available with '--scanners misconfig'
      --k8s-version string                specify k8s version to validate outdated api by it (example: 1.21.0)
      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])
      --module-dir string                 specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")
  -o, --output string                     output file name
      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments
      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.
      --password-stdin                    password from stdin. Comma-separated passwords are not supported.
      --redis-ca string                   redis ca file location, if using redis as cache backend
      --redis-cert string                 redis certificate file location, if using redis as cache backend
      --redis-key string                  redis key file location, if using redis as cache backend
      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend
      --registry-token string             registry token
      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)
      --report string                     specify a compliance report format for the output (allowed values: all,summary) (default "all")
  -s, --severity strings                  severities of security issues to be displayed
                                          Allowed values:
                                            - UNKNOWN
                                            - LOW
                                            - MEDIUM
                                            - HIGH
                                            - CRITICAL
                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])
      --skip-check-update                 skip fetching rego check updates
      --skip-dirs strings                 specify the directories or glob patterns to skip
      --skip-files strings                specify the files or glob patterns to skip
      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])
  -t, --template string                   output template
      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules
      --tf-vars strings                   specify paths to override the Terraform tfvars files
      --trace                             enable more verbose trace output for custom queries
      --username strings                  username. Comma-separated usernames allowed.

----------------------------------------

TITLE: Scanning Helm Chart with Value File Override in Trivy
DESCRIPTION: Illustrates how to use Trivy to scan a Helm chart while applying value overrides from a file. This command uses the overrides.yaml file for the mySql chart.

LANGUAGE: bash
CODE:
trivy config --helm-values overrides.yaml ./charts/mySql

----------------------------------------

TITLE: Skipping Database Updates in Trivy
DESCRIPTION: Demonstrates how to configure Trivy to skip updating all databases. This can be useful in air-gapped environments or when you want to use existing database versions.

LANGUAGE: bash
CODE:
trivy image --skip-db-update --skip-java-db-update --skip-check-update alpine

----------------------------------------

TITLE: Inherited Options for Trivy Server Command
DESCRIPTION: Options inherited from parent commands that are also applicable to the 'trivy server' command. These include general configuration options, debug mode, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Redis Cache Backend Configuration
DESCRIPTION: Commands for configuring Redis as cache backend, including TLS and certificate-based authentication

LANGUAGE: bash
CODE:
$ trivy server --cache-backend redis://localhost:6379

LANGUAGE: bash
CODE:
$ trivy server --cache-backend redis://localhost:6379 --redis-tls

LANGUAGE: bash
CODE:
$ trivy server --cache-backend redis://localhost:6379 \
  --redis-ca /path/to/ca-cert.pem \
  --redis-cert /path/to/cert.pem \
  --redis-key /path/to/key.pem

----------------------------------------

TITLE: Filtering by Vulnerability Status
DESCRIPTION: Demonstrates filtering vulnerabilities by their fix status using the --ignore-status flag

LANGUAGE: bash
CODE:
$ trivy image --ignore-status affected,fixed ruby:2.4.0

----------------------------------------

TITLE: Private Repository Scanning with Trivy
DESCRIPTION: Commands showing how to scan private GitHub or GitLab repositories using authentication tokens.

LANGUAGE: bash
CODE:
$ export GITHUB_TOKEN="your_private_github_token"
$ trivy repo <your private GitHub repo URL>

# or
$ export GITLAB_TOKEN="your_private_gitlab_token"
$ trivy repo <your private GitLab repo URL>

----------------------------------------

TITLE: Basic Trivy Registry Login Command
DESCRIPTION: The basic syntax for logging into a container registry using Trivy.

LANGUAGE: bash
CODE:
trivy registry login SERVER [flags]

----------------------------------------

TITLE: Removing Specific Trivy Databases
DESCRIPTION: Demonstrates how to remove specific Trivy databases using the 'clean' command. This example removes both the vulnerability and Java databases.

LANGUAGE: bash
CODE:
$ trivy clean --vuln-db --java-db
2024-06-24T11:42:31+06:00       INFO    Removing vulnerability database...
2024-06-24T11:42:31+06:00       INFO    Removing Java database...

----------------------------------------

TITLE: Executing Trivy Rootfs Command in Bash
DESCRIPTION: Basic usage of the 'trivy rootfs' command to scan a rootfs directory. It includes examples for scanning an unpacked filesystem and scanning from inside a container.

LANGUAGE: bash
CODE:
trivy rootfs [flags] ROOTDIR

LANGUAGE: bash
CODE:
# Scan unpacked filesystem
$ docker export $(docker create alpine:3.10.2) | tar -C /tmp/rootfs -xvf -
$ trivy rootfs /tmp/rootfs

# Scan from inside a container
$ docker run --rm -it alpine:3.11
/ # curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
/ # trivy rootfs /

----------------------------------------

TITLE: Defining Command Data for Kubelet File Permissions Check
DESCRIPTION: YAML configuration for defining a command to check kubelet.conf file permissions in Kubernetes environments.

LANGUAGE: yaml
CODE:
---
- id: CMD-0001
  key: kubeletConfFilePermissions
  title: kubelet.conf file permissions
  nodeType: worker
  audit: stat -c %a $kubelet.kubeconfig
  platforms:
    - k8s
    - aks

----------------------------------------

TITLE: Namespace-Specific Summary Scan with Trivy
DESCRIPTION: Scans a specific namespace (kube-system) and provides a summary of vulnerabilities.

LANGUAGE: sh
CODE:
trivy k8s --include-namespaces kube-system --report summary

----------------------------------------

TITLE: Scanning SBOM with Trivy CLI
DESCRIPTION: Basic usage of the 'trivy sbom' command to scan an SBOM file for vulnerabilities and licenses. The command accepts flags and the path to the SBOM file as arguments.

LANGUAGE: bash
CODE:
trivy sbom [flags] SBOM_PATH

----------------------------------------

TITLE: Configuring Report Options for Trivy in YAML
DESCRIPTION: Specifies report-related options for Trivy, including output format, exit codes, and severity levels.

LANGUAGE: yaml
CODE:
# Same as '--dependency-tree'
dependency-tree: false

# Same as '--exit-code'
exit-code: 0

# Same as '--exit-on-eol'
exit-on-eol: 0

# Same as '--format'
format: "table"

# Same as '--ignore-policy'
ignore-policy: ""

# Same as '--ignorefile'
ignorefile: ".trivyignore"

# Same as '--list-all-pkgs'
list-all-pkgs: false

# Same as '--output'
output: ""

# Same as '--output-plugin-arg'
output-plugin-arg: ""

# Same as '--report'
report: "all"

scan:
  # Same as '--compliance'
  compliance: ""

  # Same as '--show-suppressed'
  show-suppressed: false

# Same as '--severity'
severity:
 - UNKNOWN
 - LOW
 - MEDIUM
 - HIGH
 - CRITICAL

# Same as '--table-mode'
table-mode:
 - summary
 - detailed

# Same as '--template'
template: ""

----------------------------------------

TITLE: Setting Custom Cache Directory
DESCRIPTION: Command to specify a custom cache directory location using the --cache-dir flag

LANGUAGE: bash
CODE:
$ trivy --cache-dir /tmp/trivy/ image python:3.4-alpine3.9

----------------------------------------

TITLE: Configuring Misconfiguration Options for Trivy in YAML
DESCRIPTION: Defines misconfiguration-related options for Trivy, including checks bundle repository, CloudFormation parameters, Helm settings, and scanner configurations.

LANGUAGE: yaml
CODE:
misconfiguration:
  # Same as '--checks-bundle-repository'
  checks-bundle-repository: "mirror.gcr.io/aquasec/trivy-checks:1"

  cloudformation:
    # Same as '--cf-params'
    params: []

  # Same as '--config-file-schemas'
  config-file-schemas: []

  helm:
    # Same as '--helm-api-versions'
    api-versions: []

    # Same as '--helm-kube-version'
    kube-version: ""

    # Same as '--helm-set'
    set: []

    # Same as '--helm-set-file'
    set-file: []

    # Same as '--helm-set-string'
    set-string: []

    # Same as '--helm-values'
    values: []

  # Same as '--include-non-failures'
  include-non-failures: false

  # Same as '--render-cause'
  render-cause: []

  # Same as '--misconfig-scanners'
  scanners:
   - azure-arm
   - cloudformation
   - dockerfile
   - helm
   - kubernetes
   - terraform
   - terraformplan-json
   - terraformplan-snapshot

  terraform:
    # Same as '--tf-exclude-downloaded-modules'
    exclude-downloaded-modules: false

    # Same as '--tf-vars'
    vars: []

----------------------------------------

TITLE: Trivy Repository Command Options
DESCRIPTION: Comprehensive list of available command line options for configuring repository scans.

LANGUAGE: bash
CODE:
      --branch string                     pass the branch name to be scanned
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "fs")
      --cache-ttl duration                cache TTL when using redis as cache backend
      --cf-params strings                 specify paths to override the CloudFormation parameters files
      --check-namespaces strings          Rego namespaces
      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default "mirror.gcr.io/aquasec/trivy-checks:1")
      --commit string                     pass the commit hash to be scanned
      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files
      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded
      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking

----------------------------------------

TITLE: Configuring Exit Codes Based on Severity in Shell
DESCRIPTION: Examples of setting different exit codes based on the severity of detected vulnerabilities.

LANGUAGE: shell
CODE:
$ trivy image --exit-code 0 --severity MEDIUM,HIGH ruby:2.4.0
$ trivy image --exit-code 1 --severity CRITICAL ruby:2.4.0

----------------------------------------

TITLE: Searching Trivy Plugins
DESCRIPTION: Commands to search and list available Trivy plugins, with examples of searching all plugins and filtering by keyword.

LANGUAGE: bash
CODE:
$ trivy plugin search
NAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT
aqua                 A plugin for integration with Aqua Security SaaS platform    aquasecurity
kubectl              A plugin scanning the images of a kubernetes resource        aquasecurity
referrer             A plugin for OCI referrers                                   aquasecurity           ✓

LANGUAGE: bash
CODE:
$ trivy plugin search referrer

NAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT
referrer             A plugin for OCI referrers                                   aquasecurity           ✓

----------------------------------------

TITLE: Configuring Registry Options for Trivy in YAML
DESCRIPTION: Specifies registry-related options for Trivy, including authentication settings for container registries.

LANGUAGE: yaml
CODE:
registry:
  mirrors:

  # Same as '--password'
  password: []

  # Same as '--password-stdin'
  password-stdin: false

  # Same as '--registry-token'
  token: ""

  # Same as '--username'
  username: []

----------------------------------------

TITLE: Managing Trivy Plugins
DESCRIPTION: Commands for plugin management including upgrading and uninstalling plugins.

LANGUAGE: bash
CODE:
$ trivy plugin upgrade

LANGUAGE: bash
CODE:
$ trivy plugin upgrade <PLUGIN1> <PLUGIN2>

LANGUAGE: bash
CODE:
$ trivy plugin uninstall kubectl

----------------------------------------

TITLE: Configuring Kubernetes Options for Trivy in YAML
DESCRIPTION: Defines Kubernetes-related options for Trivy, including cluster settings, node collector configuration, and scanning preferences.

LANGUAGE: yaml
CODE:
kubernetes:
  # Same as '--burst'
  burst: 10

  # Same as '--disable-node-collector'
  disableNodeCollector: false

  exclude:
    # Same as '--exclude-nodes'
    nodes: []

    # Same as '--exclude-owned'
    owned: false

  # Same as '--exclude-kinds'
  excludeKinds: []

  # Same as '--exclude-namespaces'
  excludeNamespaces: []

  # Same as '--include-kinds'
  includeKinds: []

  # Same as '--include-namespaces'
  includeNamespaces: []

  # Same as '--k8s-version'
  k8s-version: ""

  # Same as '--kubeconfig'
  kubeconfig: ""

  node-collector:
    # Same as '--node-collector-imageref'
    imageref: "ghcr.io/aquasecurity/node-collector:0.3.1"

    # Same as '--node-collector-namespace'
    namespace: "trivy-temp"

  # Same as '--qps'
  qps: 5

  # Same as '--skip-images'
  skipImages: false

  # Same as '--tolerations'
  tolerations: []

----------------------------------------

TITLE: Listing Inherited Options for Trivy Registry Command
DESCRIPTION: This code block displays the options inherited from parent commands. These options include settings for cache directory, config path, debug mode, insecure connections, quiet mode, timeout, and version display.

LANGUAGE: plaintext
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Configuring Custom Database Repository for Trivy
DESCRIPTION: Demonstrates how to specify a custom repository for downloading the Trivy vulnerability database. This can be used to override the default database locations.

LANGUAGE: bash
CODE:
trivy image --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db alpine

----------------------------------------

TITLE: Basic Trivy Filesystem Usage Commands
DESCRIPTION: Examples of basic trivy filesystem scanning commands for scanning local projects and individual files.

LANGUAGE: bash
CODE:
trivy filesystem [flags] PATH

LANGUAGE: bash
CODE:
# Scan a local project including language-specific files
$ trivy fs /path/to/your_project

# Scan a single file
$ trivy fs ./trivy-ci-test/Pipfile.lock

----------------------------------------

TITLE: Configuring Package Options for Trivy in YAML
DESCRIPTION: Defines package-related options for Trivy, including development dependencies, package relationships, and package types.

LANGUAGE: yaml
CODE:
pkg:
  # Same as '--include-dev-deps'
  include-dev-deps: false

  # Same as '--pkg-relationships'
  relationships:
   - unknown
   - root
   - workspace
   - direct
   - indirect

  # Same as '--pkg-types'
  types:
   - os
   - library

----------------------------------------

TITLE: Generating and Scanning SPDX JSON SBOM with Trivy
DESCRIPTION: Demonstrates how to generate an SPDX JSON SBOM from a container image and then scan it using Trivy.

LANGUAGE: bash
CODE:
$ trivy image --format spdx-json --output spdx.json alpine:3.16.0
$ trivy sbom spdx.json

----------------------------------------

TITLE: Configuring Image Options for Trivy in YAML
DESCRIPTION: Specifies image-related options for Trivy, including Docker and Podman settings, image config scanners, and source preferences.

LANGUAGE: yaml
CODE:
image:
  docker:
    # Same as '--docker-host'
    host: ""

  # Same as '--image-config-scanners'
  image-config-scanners: []

  # Same as '--input'
  input: ""

  # Same as '--max-image-size'
  max-size: ""

  # Same as '--platform'
  platform: ""

  podman:
    # Same as '--podman-host'
    host: ""

  # Same as '--removed-pkgs'
  removed-pkgs: false

  # Same as '--image-src'
  source:
   - docker
   - containerd
   - podman
   - remote

----------------------------------------

TITLE: Login to Private Registry using Trivy CLI
DESCRIPTION: Demonstrates how to log into a private registry using the trivy registry login command with a password file input.

LANGUAGE: shell
CODE:
$ cat ~/my_password.txt | trivy registry login --username foo --password-stdin ghcr.io
$ trivy image ghcr.io/your/private_image

----------------------------------------

TITLE: Basic Table Output for Container Image
DESCRIPTION: Example showing the default table output format when scanning a container image

LANGUAGE: bash
CODE:
trivy image -f table golang:1.22.11-alpine3.20

----------------------------------------

TITLE: Displaying Options for Trivy Module Command
DESCRIPTION: This code block shows the available options specific to the 'trivy module' command. It includes options for enabling experimental modules, specifying the module directory, and accessing help.

LANGUAGE: plaintext
CODE:
      --enable-modules strings   [EXPERIMENTAL] module names to enable
  -h, --help                     help for module
      --module-dir string        specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")

----------------------------------------

TITLE: Scanning Container Image with Custom Image Source
DESCRIPTION: Scan a container image using specific image sources in a defined order

LANGUAGE: shell
CODE:
trivy image --image-src podman,containerd alpine:3.7.3

----------------------------------------

TITLE: Configuring Multiple Database Repositories for Trivy
DESCRIPTION: Shows how to specify multiple alternative repository locations for the Trivy database. Trivy will attempt to use these repositories in the order specified if there are transient errors.

LANGUAGE: bash
CODE:
trivy image --db-repository my.registry.local/trivy-db --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db alpine

----------------------------------------

TITLE: Standard License Scanning of Alpine Image with Trivy
DESCRIPTION: This command performs standard license scanning on the Alpine 3.15 image using Trivy. It focuses on UNKNOWN, HIGH, and CRITICAL severity licenses.

LANGUAGE: shell
CODE:
trivy image --scanners license --severity UNKNOWN,HIGH,CRITICAL alpine:3.15

----------------------------------------

TITLE: Multiple Credential Sets Authentication
DESCRIPTION: Shows how to configure multiple sets of credentials using comma-separated values in environment variables.

LANGUAGE: shell
CODE:
$ export TRIVY_USERNAME=USERNAME1,USERNAME2
$ export TRIVY_PASSWORD=PASSWORD1,PASSWORD2
$ trivy image YOUR_PRIVATE_IMAGE

----------------------------------------

TITLE: Clearing Trivy Scan Cache
DESCRIPTION: Command to remove scan cache using the trivy clean subcommand

LANGUAGE: bash
CODE:
$ trivy clean --scan-cache

----------------------------------------

TITLE: Misconfiguration Scanning in Trivy
DESCRIPTION: Command for enabling misconfiguration scanning, which is disabled by default.

LANGUAGE: shell
CODE:
$ trivy repo --scanners misconfig (REPO_PATH | REPO_URL)

----------------------------------------

TITLE: Scanning Container Image Tar File
DESCRIPTION: Scan a container image tar file generated by tools like Docker

LANGUAGE: shell
CODE:
$ docker pull ruby:3.1-alpine3.15
$ docker save ruby:3.1-alpine3.15 -o ruby-3.1.tar
$ trivy image --input ruby-3.1.tar

----------------------------------------

TITLE: License Scanning in Trivy
DESCRIPTION: Command for enabling license scanning, which is disabled by default.

LANGUAGE: shell
CODE:
$ trivy repo --scanners license (REPO_PATH | REPO_URL)

----------------------------------------

TITLE: Initializing Rego Input Configuration for Trivy Combine Mode
DESCRIPTION: Demonstrates the structure of the __rego_input__ configuration object that controls whether files are combined. The combine flag determines if multiple config files should be processed as one data structure.

LANGUAGE: rego
CODE:
__rego_input__ := {
    "combine": false,
}

----------------------------------------

TITLE: Configuring Kube2iam or Kiam for Trivy in Kubernetes YAML
DESCRIPTION: This YAML snippet demonstrates how to add AWS role annotations to Trivy's pod for accessing private ECR registries when using Kube2iam or Kiam. The iam.amazonaws.com/role annotation should be uncommented and filled with the appropriate AWS role ARN.

LANGUAGE: yaml
CODE:
podAnnotations: {}
  ## kube2iam/kiam annotation
  # iam.amazonaws.com/role: arn:aws:iam::ACCOUNT_ID:role/IAM_ROLE_NAME

----------------------------------------

TITLE: Configuring File Skipping in Trivy YAML
DESCRIPTION: Shows how to configure file skipping in Trivy's YAML configuration file, including the use of glob patterns.

LANGUAGE: yaml
CODE:
image:
  skip-files:
    - foo
    - "testdata/*/bar"

----------------------------------------

TITLE: Setting Non-Zero Exit Code for Vulnerabilities in Shell
DESCRIPTION: Example of using the --exit-code option to set a non-zero exit code when vulnerabilities are detected.

LANGUAGE: shell
CODE:
$ trivy image --exit-code 1 python:3.4-alpine3.9

----------------------------------------

TITLE: Scanning Container Image for Compliance
DESCRIPTION: Scan a container image configuration and generate a compliance summary report

LANGUAGE: shell
CODE:
trivy image --compliance docker-cis-1.6.0 [YOUR_IMAGE_NAME]

----------------------------------------

TITLE: Using Memory Cache Backend
DESCRIPTION: Command to use memory backend for container image scanning

LANGUAGE: bash
CODE:
$ trivy image debian:11 --cache-backend memory

----------------------------------------

TITLE: Rego Policy Metadata Example
DESCRIPTION: Example of metadata configuration for a Rego policy, showing title, description, and custom fields for severity and input selection.

LANGUAGE: rego
CODE:
# METADATA
# title: Deployment not allowed
# description: Deployments are not allowed because of some reasons.
# custom:
#   id: ID001
#   severity: LOW
#   input:
#     selector:
#     - type: kubernetes

----------------------------------------

TITLE: Uninstalling a Trivy Module
DESCRIPTION: Command to uninstall a Trivy module.

LANGUAGE: bash
CODE:
$ trivy module uninstall ghcr.io/aquasecurity/trivy-module-spring4shell

----------------------------------------

TITLE: Setting Azure Environment Variables for Trivy
DESCRIPTION: This snippet shows how to set the required environment variables for Trivy to authenticate with Azure. It extracts the necessary information from the previously created service principal data.

LANGUAGE: bash
CODE:
# must set TRIVY_USERNAME empty char
export AZURE_CLIENT_ID=$(echo $SP_DATA | jq -r '.appId')
export AZURE_CLIENT_SECRET=$(echo $SP_DATA | jq -r '.password')
export AZURE_TENANT_ID=$(echo $SP_DATA | jq -r '.tenant')

----------------------------------------

TITLE: Basic Trivy Plugin Info Command Usage
DESCRIPTION: Shows how to use the basic plugin info command to display information about a specific plugin.

LANGUAGE: bash
CODE:
trivy plugin info PLUGIN_NAME

----------------------------------------

TITLE: Scanning Container Image with Custom Docker Daemon
DESCRIPTION: Scan a container image using a custom Docker daemon socket

LANGUAGE: shell
CODE:
$ trivy image --docker-host tcp://127.0.0.1:2375 YOUR_IMAGE

----------------------------------------

TITLE: VEX Basic Command Options
DESCRIPTION: Basic command line options for the Trivy VEX utility. Includes help option for displaying command usage information.

LANGUAGE: bash
CODE:
  -h, --help   help for vex

----------------------------------------

TITLE: Running Trivy with Custom Policy
DESCRIPTION: Bash command to run Trivy with a custom policy file or directory containing schemas and checks.

LANGUAGE: bash
CODE:
$ trivy --config-policy=/Users/user/my-custom-checks <path/to/iac>

----------------------------------------

TITLE: Basic Config Scanning
DESCRIPTION: Basic command to scan a directory containing IaC files for misconfigurations

LANGUAGE: bash
CODE:
$ trivy config [YOUR_IaC_DIRECTORY]

----------------------------------------

TITLE: Setting Google Cloud Credentials for Trivy Authentication
DESCRIPTION: This bash command demonstrates how to set the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the credential JSON file. This setup is necessary for Trivy to authenticate with Google Cloud Registry.

LANGUAGE: bash
CODE:
# must set TRIVY_USERNAME empty char
export GOOGLE_APPLICATION_CREDENTIALS=/path/to/credential.json

----------------------------------------

TITLE: Installing Trivy Plugin Basic Usage
DESCRIPTION: Basic command syntax for installing a Trivy plugin using name, URL, or file path.

LANGUAGE: bash
CODE:
trivy plugin install NAME | URL | FILE_PATH

----------------------------------------

TITLE: Installing Trivy Plugin Basic Usage
DESCRIPTION: Basic command syntax for installing a Trivy plugin using name, URL, or file path.

LANGUAGE: bash
CODE:
trivy plugin install NAME | URL | FILE_PATH

----------------------------------------

TITLE: Scanning Container Image with Size Limit
DESCRIPTION: Scan a container image with a maximum size limit to prevent scanning oversized images

LANGUAGE: shell
CODE:
$ trivy image --max-image-size=10GB myapp:latest

----------------------------------------

TITLE: Trivy Module Uninstall Command Options
DESCRIPTION: This snippet lists the specific options available for the 'trivy module uninstall' command. Currently, it only includes the help flag.

LANGUAGE: plaintext
CODE:
  -h, --help   help for uninstall

----------------------------------------

TITLE: Running Trivy with Installed Modules
DESCRIPTION: Example of running Trivy with an installed module, showing how the module affects the scan results.

LANGUAGE: bash
CODE:
$ trivy image ghcr.io/aquasecurity/trivy-test-images:spring4shell-jre8

----------------------------------------

TITLE: Severity Filtering
DESCRIPTION: Command to filter scan results by severity levels

LANGUAGE: bash
CODE:
trivy config --severity CRITICAL, MEDIUM terraform-infra

----------------------------------------

TITLE: Setting Trivy BasicAuth Environment Variables
DESCRIPTION: Sets up required environment variables for Trivy BasicAuth server authentication including username and password credentials. Also includes an optional setting for using non-SSL connections on port 80.

LANGUAGE: bash
CODE:
export TRIVY_USERNAME={USERNAME}
export TRIVY_PASSWORD={PASSWORD}

# if you want to use 80 port, use NonSSL
export TRIVY_NON_SSL=true

----------------------------------------

TITLE: Basic Trivy Config Command Structure
DESCRIPTION: Shows the basic command structure for scanning configuration files with Trivy

LANGUAGE: bash
CODE:
trivy config <any flags you want to use> <file or directory that you would like to scan>

----------------------------------------

TITLE: Options for Trivy VEX Repository Initialization (Bash)
DESCRIPTION: This snippet shows the available options specific to the 'init' command. Currently, it only includes a help flag for displaying command usage information.

LANGUAGE: bash
CODE:
  -h, --help   help for init

----------------------------------------

TITLE: Generating SPDX SBOM for Docker Image with Trivy
DESCRIPTION: Command to generate an SPDX SBOM in plain text format for the Alpine 3.15 Docker image using Trivy.

LANGUAGE: bash
CODE:
$ trivy image --format spdx --output result.spdx alpine:3.15

----------------------------------------

TITLE: Command-Specific Options for VEX Download
DESCRIPTION: Available command-specific options for the download command, including help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for download

----------------------------------------

TITLE: Implementing Trivy Module Interfaces in Go
DESCRIPTION: Example Go code showing the implementation of Module, Analyzer, and PostScanner interfaces for a WordPress module.

LANGUAGE: go
CODE:
package main

const (
    version = 1
    name = "wordpress-module"
)

// main is required for Go to compile the Wasm module
func main() {}  

type WordpressModule struct{
	// Cannot define fields as modules can't keep state.
}

func (WordpressModule) Version() int {
    return version
}

func (WordpressModule) Name() string {
    return name
}

// Analyzer interface implementation
const typeWPVersion = "wordpress-version"

func (WordpressModule) RequiredFiles() []string {
    return []string{
        `wp-includes\/version.php`,
    }
}

func (WordpressModule) Analyze(filePath string) (*serialize.AnalysisResult, error) {
    // Implementation details omitted for brevity
}

// PostScanner interface implementation
func (WordpressModule) PostScanSpec() serialize.PostScanSpec {
    return serialize.PostScanSpec{
        Action: api.ActionInsert, // Add new vulnerabilities
    }
}

func (WordpressModule) PostScan(results types.Results) (types.Results, error) {
    // Implementation details omitted for brevity
}

----------------------------------------

TITLE: Terraform Variables Scan
DESCRIPTION: Command to include terraform.tfvars in the scan

LANGUAGE: bash
CODE:
trivy config --tf-vars terraform.tfvars ./

----------------------------------------

TITLE: Pulling Trivy DB with Trivy CLI in Shell
DESCRIPTION: Uses Trivy CLI to download the database files into the current working directory.

LANGUAGE: shell
CODE:
trivy image --cache-dir . --download-db-only

----------------------------------------

TITLE: VEX Inherited Parent Command Options
DESCRIPTION: Configuration options inherited from parent commands including cache directory settings, config path, debug mode, security settings, output controls, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Scanning SBOM with Trivy CLI
DESCRIPTION: Demonstrates how to use the Trivy CLI to scan an SBOM file. The command automatically detects the input format and performs a vulnerability scan by default.

LANGUAGE: bash
CODE:
$ trivy sbom /path/to/sbom_file

----------------------------------------

TITLE: Trivy VEX Repo Command Options
DESCRIPTION: Available options for the 'trivy vex repo' command, including help flag and inherited options from parent commands. These options allow for customization of cache directory, config path, debug mode, and other settings.

LANGUAGE: bash
CODE:
-h, --help   help for repo

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Distributing a Trivy Module
DESCRIPTION: Command to push a built Trivy module to an OCI registry using ORAS.

LANGUAGE: bash
CODE:
oras push ghcr.io/aquasecurity/trivy-module-wordpress:latest wordpress.wasm:application/vnd.module.wasm.content.layer.v1+wasm

----------------------------------------

TITLE: Generating Cosign Vulnerability Scan Record with Trivy
DESCRIPTION: This command uses Trivy to generate a vulnerability scan report in the Cosign vulnerability scan record format for a specified Docker image.

LANGUAGE: bash
CODE:
$ trivy image --format cosign-vuln --output vuln.json alpine:3.10

----------------------------------------

TITLE: Configuring Scan Options for Trivy in YAML
DESCRIPTION: Specifies scan-related options for Trivy, including detection priority, offline scanning, and scanner selection.

LANGUAGE: yaml
CODE:
scan:
  # Same as '--detection-priority'
  detection-priority: "precise"

  # Same as '--distro'
  distro: ""

  # Same as '--file-patterns'
  file-patterns: []

  # Same as '--offline-scan'
  offline: false

  # Same as '--parallel'
  parallel: 5

  # Same as '--rekor-url'
  rekor-url: "https://rekor.sigstore.dev"

  # Same as '--sbom-sources'
  sbom-sources: []

  # Same as '--scanners'
  scanners:
   - vuln
   - secret

  # Same as '--skip-dirs'
  skip-dirs: []

  # Same as '--skip-files'
  skip-files: []

----------------------------------------

TITLE: Inherited Options for Trivy SBOM Command
DESCRIPTION: Options inherited from parent commands that are also applicable to the 'trivy sbom' command. These include cache directory, config path, debug mode, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Scanning CycloneDX SBOM with Trivy
DESCRIPTION: Shows how to scan a CycloneDX JSON SBOM using Trivy. Note that CycloneDX XML format is not supported.

LANGUAGE: bash
CODE:
$ trivy sbom /path/to/cyclonedx.json

----------------------------------------

TITLE: Inherited Options for Trivy VEX Repository Commands (Bash)
DESCRIPTION: These options are inherited from parent commands and can be used with the 'trivy vex repo init' command. They include settings for cache directory, config path, debug mode, insecure connections, quiet mode, timeout, and version display.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Locating Trivy Cache Directory in Shell
DESCRIPTION: Identifies the location of the Trivy cache directory using the Trivy CLI.

LANGUAGE: shell
CODE:
trivy -h | grep cache

----------------------------------------

TITLE: Verifying Keyless Signed Attestation
DESCRIPTION: This command verifies a keyless signed attestation on an image using Cosign with the provided certificate and identity information.

LANGUAGE: bash
CODE:
$ cosign verify-attestation --certificate=path-to-the-certificate --type vuln --certificate-identity Email-used-to-sign  --certificate-oidc-issuer='the-issuer-used' <IMAGE>

----------------------------------------

TITLE: Configuring Module Options for Trivy in YAML
DESCRIPTION: Specifies module-related options for Trivy, including module directory and enabled modules.

LANGUAGE: yaml
CODE:
module:
  # Same as '--module-dir'
  dir: "$HOME/.trivy/modules"

  # Same as '--enable-modules'
  enable-modules: []

----------------------------------------

TITLE: Remote Image Scanning
DESCRIPTION: Performs vulnerability scanning on container images using remote Trivy server

LANGUAGE: bash
CODE:
$ trivy image --server http://localhost:8080 alpine:3.10

----------------------------------------

TITLE: Example Kubernetes Scan Output in JSON Format
DESCRIPTION: Sample JSON output from a Trivy Kubernetes scan showing vulnerability and misconfiguration findings

LANGUAGE: json
CODE:
{
  "ClusterName": "minikube",
  "Vulnerabilities": [...],
  "Misconfigurations": [...]
}

----------------------------------------

TITLE: Remote Git Repository Scanning
DESCRIPTION: Scans remote git repository for vulnerabilities using Trivy server

LANGUAGE: shell
CODE:
$ trivy repo https://github.com/knqyf263/trivy-ci-test --server http://localhost:8080

----------------------------------------

TITLE: Populating Trivy Cache in Shell
DESCRIPTION: Creates the cache directory and copies the downloaded database files into it.

LANGUAGE: shell
CODE:
TRIVY_CACHE_DIR=/home/user/.cache/trivy

# ensure cache db directory exists
mkdir -p ${TRIVY_CACHE_DIR}/db
# copy the db files
cp /path/to/trivy.db /path/to/metadata.json ${TRIVY_CACHE_DIR}/db/

----------------------------------------

TITLE: Generating and Storing SBOM for Binary
DESCRIPTION: Series of commands to generate SBOM from a Cargo.lock file and store its attestation in Rekor using Trivy plugins.

LANGUAGE: bash
CODE:
$ git clone -b v0.20.0 https://github.com/sharkdp/bat
$ trivy fs --format cyclonedx --output bat.cdx ./bat/Cargo.lock
$ wget https://github.com/sharkdp/bat/releases/download/v0.20.0/bat-v0.20.0-x86_64-apple-darwin.tar.gz
$ tar xvf bat-v0.20.0-x86_64-apple-darwin.tar.gz
$ trivy plugin install github.com/aquasecurity/trivy-plugin-attest
$ trivy attest --predicate ./bat.cdx --type cyclonedx ./bat-v0.20.0-x86_64-apple-darwin/bat

----------------------------------------

TITLE: Configuring License Options for Trivy in YAML
DESCRIPTION: Specifies license-related options for Trivy, including confidence levels, forbidden licenses, and license categorization.

LANGUAGE: yaml
CODE:
license:
  # Same as '--license-confidence-level'
  confidenceLevel: 0.9

  forbidden:
   - AGPL-1.0
   - AGPL-3.0
   - CC-BY-NC-1.0
   - CC-BY-NC-2.0
   - CC-BY-NC-2.5
   - CC-BY-NC-3.0
   - CC-BY-NC-4.0
   - CC-BY-NC-ND-1.0
   - CC-BY-NC-ND-2.0
   - CC-BY-NC-ND-2.5
   - CC-BY-NC-ND-3.0
   - CC-BY-NC-ND-4.0
   - CC-BY-NC-SA-1.0
   - CC-BY-NC-SA-2.0
   - CC-BY-NC-SA-2.5
   - CC-BY-NC-SA-3.0
   - CC-BY-NC-SA-4.0
   - Commons-Clause
   - Facebook-2-Clause
   - Facebook-3-Clause
   - Facebook-Examples
   - WTFPL

  # Same as '--license-full'
  full: false

  # Same as '--ignored-licenses'
  ignored: []

  notice:
   - AFL-1.1
   - AFL-1.2
   - AFL-2.0
   - AFL-2.1
   - AFL-3.0
   - Apache-1.0
   - Apache-1.1
   - Apache-2.0
   - Artistic-1.0-cl8
   - Artistic-1.0-Perl
   - Artistic-1.0
   - Artistic-2.0
   - BSL-1.0
   - BSD-2-Clause-FreeBSD
   - BSD-2-Clause-NetBSD
   - BSD-2-Clause
   - BSD-3-Clause-Attribution
   - BSD-3-Clause-Clear
   - BSD-3-Clause-LBNL
   - BSD-3-Clause
   - BSD-4-Clause
   - BSD-4-Clause-UC
   - BSD-Protection
   - CC-BY-1.0
   - CC-BY-2.0
   - CC-BY-2.5
   - CC-BY-3.0
   - CC-BY-4.0
   - FTL
   - ISC
   - ImageMagick
   - Libpng
   - Lil-1.0
   - Linux-OpenIB
   - LPL-1.02
   - LPL-1.0
   - MS-PL
   - MIT
   - NCSA
   - OpenSSL
   - PHP-3.01
   - PHP-3.0
   - PIL
   - Python-2.0
   - Python-2.0-complete
   - PostgreSQL
   - SGI-B-1.0
   - SGI-B-1.1
   - SGI-B-2.0
   - Unicode-DFS-2015
   - Unicode-DFS-2016
   - Unicode-TOU
   - UPL-1.0
   - W3C-19980720
   - W3C-20150513
   - W3C
   - X11
   - Xnet
   - Zend-2.0
   - zlib-acknowledgement
   - Zlib
   - ZPL-1.1
   - ZPL-2.0
   - ZPL-2.1

  permissive: []

  reciprocal:
   - APSL-1.0
   - APSL-1.1
   - APSL-1.2
   - APSL-2.0
   - CDDL-1.0
   - CDDL-1.1
   - CPL-1.0
   - EPL-1.0
   - EPL-2.0
   - FreeImage
   - IPL-1.0
   - MPL-1.0
   - MPL-1.1
   - MPL-2.0
   - Ruby

  restricted:
   - BCL
   - CC-BY-ND-1.0
   - CC-BY-ND-2.0
   - CC-BY-ND-2.5
   - CC-BY-ND-3.0
   - CC-BY-ND-4.0
   - CC-BY-SA-1.0
   - CC-BY-SA-2.0
   - CC-BY-SA-2.5
   - CC-BY-SA-3.0
   - CC-BY-SA-4.0
   - GPL-1.0
   - GPL-2.0
   - GPL-2.0-with-autoconf-exception
   - GPL-2.0-with-bison-exception
   - GPL-2.0-with-classpath-exception
   - GPL-2.0-with-font-exception
   - GPL-2.0-with-GCC-exception
   - GPL-3.0
   - GPL-3.0-with-autoconf-exception
   - GPL-3.0-with-GCC-exception
   - LGPL-2.0
   - LGPL-2.1
   - LGPL-3.0
   - NPL-1.0
   - NPL-1.1
   - OSL-1.0
   - OSL-1.1
   - OSL-2.0
   - OSL-2.1
   - OSL-3.0
   - QPL-1.0
   - Sleepycat

  unencumbered:
   - CC0-1.0
   - Unlicense
   - 0BSD

----------------------------------------

TITLE: Downloading EBS Snapshot and Scanning Locally with Trivy
DESCRIPTION: These commands demonstrate how to download an EBS snapshot using coldsnap and then scan it locally with Trivy for faster repeated scans.

LANGUAGE: bash
CODE:
$ coldsnap download snap-0123456789abcdefg disk.img
$ trivy vm ./disk.img

----------------------------------------

TITLE: Trivy Registry Login Example
DESCRIPTION: Example showing how to log in to a registry using a username and password from stdin.

LANGUAGE: bash
CODE:
cat ~/my_password.txt | trivy registry login --username foo --password-stdin reg.example.com

----------------------------------------

TITLE: Deploying Trivy-Operator with ArgoCD Kubernetes Manifest
DESCRIPTION: This YAML manifest defines an ArgoCD Application resource to deploy the Trivy-Operator using its Helm chart. It specifies the chart source, target revision, and some configuration values.

LANGUAGE: yaml
CODE:
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: trivy-operator
  namespace: argocd
spec:
  project: default
  source:
    chart: trivy-operator
    repoURL: https://aquasecurity.github.io/helm-charts/
    targetRevision: 0.0.3
    helm:
      values: |
        trivy:
          ignoreUnfixed: true
  destination:
    server: https://kubernetes.default.svc
    namespace: trivy-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

----------------------------------------

TITLE: Searching for Trivy Plugins in Bash
DESCRIPTION: This command lists available Trivy plugins from the plugin index, showing their names, descriptions, maintainers, and output capabilities.

LANGUAGE: bash
CODE:
$ trivy plugin search

----------------------------------------

TITLE: Scanning Container with Binary SBOM
DESCRIPTION: Example showing how to scan both container image and included binary using SBOM attestation from Rekor.

LANGUAGE: bash
CODE:
$ trivy image --sbom-sources rekor --scanners vuln alpine-with-bat

----------------------------------------

TITLE: Configuring DB Options for Trivy in YAML
DESCRIPTION: Defines database-related options for Trivy, including download settings, repository URLs, and update preferences.

LANGUAGE: yaml
CODE:
db:
  # Same as '--download-java-db-only'
  download-java-only: false

  # Same as '--download-db-only'
  download-only: false

  # Same as '--java-db-repository'
  java-repository:
   - mirror.gcr.io/aquasec/trivy-java-db:1
   - ghcr.io/aquasecurity/trivy-java-db:1

  # Same as '--skip-java-db-update'
  java-skip-update: false

  # Same as '--no-progress'
  no-progress: false

  # Same as '--db-repository'
  repository:
   - mirror.gcr.io/aquasec/trivy-db:2
   - ghcr.io/aquasecurity/trivy-db:2

  # Same as '--skip-db-update'
  skip-update: false

----------------------------------------

TITLE: Syncing Trivy-Operator Application in ArgoCD
DESCRIPTION: This command triggers ArgoCD to synchronize the Trivy-Operator application, ensuring the actual state matches the desired state.

LANGUAGE: bash
CODE:
argocd app sync trivy-operator

----------------------------------------

TITLE: Inherited Trivy Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with the login command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Creating CSAF VEX Document
DESCRIPTION: Example of creating a CSAF VEX document for vulnerability filtering.

LANGUAGE: bash
CODE:
$ cat <<EOF > debian11.vex.csaf
{
  "document": {
    "category": "csaf_vex",
    "csaf_version": "2.0",
    "notes": [
      {
        "category": "summary",
        "text": "Example Company VEX document. Unofficial content for demonstration purposes only.",
        "title": "Author comment"
      }
    ],
    "publisher": {
      "category": "vendor",
      "name": "Example Company ProductCERT",
      "namespace": "https://psirt.example.com"
    },
    "title": "AquaSecurity example VEX document",
    "tracking": {
      "current_release_date": "2024-01-01T11:00:00.000Z",
      "generator": {
        "date": "2024-01-01T11:00:00.000Z",
        "engine": {
          "name": "Secvisogram",
          "version": "1.11.0"
        }
      },
      "id": "2024-EVD-UC-01-A-001",
      "initial_release_date": "2024-01-01T11:00:00.000Z",
      "revision_history": [
        {
          "date": "2024-01-01T11:00:00.000Z",
          "number": "1",
          "summary": "Initial version."
        }
      ],
      "status": "final",
      "version": "1"
    }
  },
  "product_tree": {
    "branches": [
      {
        "branches": [
          {
            "branches": [
              {
                "category": "product_version",
                "name": "5.3",
                "product": {
                  "name": "Database Libraries 5.3",
                  "product_id": "LIBDB-5328",
                  "product_identification_helper": {
                    "purl": "pkg:deb/debian/libdb5.3@5.3.28%2Bdfsg1-0.8?arch=amd64\u0026distro=debian-11.8"
                  }
                }
              }
            ],
            "category": "product_name",
            "name": "Database Libraries"
          }
        ],
        "category": "vendor",
        "name": "Debian"
      }
    ]
  },
  "vulnerabilities": [
    {
      "cve": "CVE-2019-8457",
      "notes": [
        {
          "category": "description",
          "text": "SQLite3 from 3.6.0 to and including 3.27.2 is vulnerable to heap out-of-bound read in the rtreenode() function when handling invalid rtree tables.",
          "title": "CVE description"
        }
      ],
      "product_status": {
        "known_not_affected": [
          "LIBDB-5328"
        ]
      },
      "threats": [
        {
          "category": "impact",
          "details": "Vulnerable code not in execute path.",
          "product_ids": [
            "LIBDB-5328"
          ]
        }
      ]
    }
  ]
}
EOF

----------------------------------------

TITLE: Installing Trivy Plugins
DESCRIPTION: Various methods to install Trivy plugins, including from the plugin index, direct URLs, and local files.

LANGUAGE: bash
CODE:
$ trivy plugin install referrer

LANGUAGE: bash
CODE:
$ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl

LANGUAGE: bash
CODE:
$ trivy plugin install https://github.com/aquasecurity/trivy-plugin-kubectl/archive/refs/heads/main.zip

LANGUAGE: bash
CODE:
$ trivy plugin install ./myplugin.tar.gz

LANGUAGE: bash
CODE:
$ trivy plugin install referrer@v0.3.0

----------------------------------------

TITLE: Generating Key Pair with Cosign
DESCRIPTION: This command generates a public and private key pair using Cosign for signing and verification purposes.

LANGUAGE: bash
CODE:
$ cosign generate-key-pair

----------------------------------------

TITLE: Configuring Client/Server Options for Trivy in YAML
DESCRIPTION: Specifies client/server options for Trivy, including server address, custom headers, listen address, and token settings.

LANGUAGE: yaml
CODE:
server:
  # Same as '--server'
  addr: ""

  # Same as '--custom-headers'
  custom-headers: []

  # Same as '--listen'
  listen: "localhost:4954"

  # Same as '--token'
  token: ""

  # Same as '--token-header'
  token-header: "Trivy-Token"

----------------------------------------

TITLE: Scanning with CSAF VEX
DESCRIPTION: Command to scan a Debian 11.8 image with a CSAF VEX file using Trivy.

LANGUAGE: bash
CODE:
$ trivy image debian:11.8 --vex debian11.vex.csaf

----------------------------------------

TITLE: Registry Logout Command Options
DESCRIPTION: Available command-line options specific to the logout command.

LANGUAGE: bash
CODE:
-h, --help   help for logout

----------------------------------------

TITLE: Authenticated VEX Repository Configuration (YAML)
DESCRIPTION: YAML configuration example for adding an authenticated custom VEX repository using a token.

LANGUAGE: yaml
CODE:
- name: custom
  url: https://example.com/custom-repo
  enabled: true
  token: "my-token"

----------------------------------------

TITLE: Uninstalling a Trivy Plugin in Bash
DESCRIPTION: This command removes a specific Trivy plugin from the system, in this case, the 'referrer' plugin.

LANGUAGE: bash
CODE:
trivy plugin uninstall referrer

----------------------------------------

TITLE: Verifying Keyless Signed SBOM Attestation
DESCRIPTION: This command verifies a keyless signed CycloneDX SBOM attestation using Cosign's experimental mode.

LANGUAGE: bash
CODE:
$ COSIGN_EXPERIMENTAL=1 cosign verify-attestation --type cyclonedx <IMAGE>

----------------------------------------

TITLE: Server Authentication
DESCRIPTION: Configures authentication token for Trivy server and client

LANGUAGE: bash
CODE:
$ trivy server --listen localhost:8080 --token dummy

LANGUAGE: bash
CODE:
$ trivy image --server http://localhost:8080 --token dummy alpine:3.10

----------------------------------------

TITLE: Displaying Filtered Vulnerabilities (Bash)
DESCRIPTION: Command to run Trivy with VEX repository integration and show suppressed vulnerabilities.

LANGUAGE: bash
CODE:
$ trivy image ghcr.io/aquasecurity/trivy:0.50.0 --vex repo --show-suppressed

----------------------------------------

TITLE: Multiple VEX Repository Configuration (YAML)
DESCRIPTION: YAML configuration example for setting up multiple VEX repositories with priority order.

LANGUAGE: yaml
CODE:
- name: repo1
  url: https://example.com/repo1
- name: repo2
  url: https://example.com/repo2

----------------------------------------

TITLE: Generating CycloneDX SBOM for Filesystem with Trivy
DESCRIPTION: Command to generate a CycloneDX SBOM for a local filesystem directory using Trivy.

LANGUAGE: bash
CODE:
$ trivy fs --format cyclonedx --output result.json /app/myproject

----------------------------------------

TITLE: Remote Filesystem Scanning
DESCRIPTION: Scans local filesystem for vulnerabilities using remote Trivy server

LANGUAGE: shell
CODE:
$ trivy fs --server http://localhost:8080 --severity CRITICAL ./integration/testdata/fixtures/fs/pom/

----------------------------------------

TITLE: Configuring Repository Options for Trivy in YAML
DESCRIPTION: Defines repository-related options for Trivy, including branch, commit, and tag settings.

LANGUAGE: yaml
CODE:
repository:
  # Same as '--branch'
  branch: ""

  # Same as '--commit'
  commit: ""

  # Same as '--tag'
  tag: ""

----------------------------------------

TITLE: Listing Trivy Standalone Commands
DESCRIPTION: Lists the Trivy commands that operate in standalone mode, including image scanning, filesystem scanning, and repository scanning.

LANGUAGE: markdown
CODE:
`trivy image`, `trivy filesystem`, and `trivy repo` works as standalone mode.

----------------------------------------

TITLE: Building Spring4Shell WASM Module
DESCRIPTION: Commands to build the Spring4Shell WebAssembly module and install it in the Trivy modules directory.

LANGUAGE: shell
CODE:
$ GOOS=wasip1 GOARCH=wasm go build -o spring4shell.wasm -buildmode=c-shared spring4shell.go 
$ mkdir -p ~/.trivy/modules
$ cp spring4shell.wasm ~/.trivy/modules

----------------------------------------

TITLE: Including GitLab Container Scanning Template in YAML
DESCRIPTION: Demonstrates how to include the built-in GitLab Container Scanning template in a .gitlab-ci.yml file for GitLab 15.0+ or GitLab 14.x Ultimate.

LANGUAGE: yaml
CODE:
include:
  - template: Security/Container-Scanning.gitlab-ci.yml

----------------------------------------

TITLE: Disabling VEX Repository Auto-update (Bash)
DESCRIPTION: Command to run Trivy with VEX repository integration while skipping the automatic repository update.

LANGUAGE: bash
CODE:
$ trivy image ghcr.io/aquasecurity/trivy:0.50.0 --vex repo --skip-vex-repo-update

----------------------------------------

TITLE: GitLab CI Job for Trivy Scanning with Code Climate Report
DESCRIPTION: Defines a GitLab CI job that uses Trivy to scan both a container image and the filesystem, generating a combined Code Climate report for vulnerability and misconfiguration findings.

LANGUAGE: yaml
CODE:
stages:
  - test

trivy:
  stage: test
  image: docker:stable
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    IMAGE: trivy-ci-test:$CI_COMMIT_SHA
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  allow_failure: true
  script:
    # Build image
    - docker build -t $IMAGE .
    # Image report
    - ./trivy image --exit-code 0 --format template --template "@/contrib/gitlab-codequality.tpl" -o gl-codeclimate-image.json $IMAGE
    # Filesystem report
    - ./trivy filesystem --scanners misconfig,vuln --exit-code 0 --format template --template "@/contrib/gitlab-codequality.tpl" -o gl-codeclimate-fs.json .
    # Combine report
    - apk update && apk add jq
    - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate.json
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    paths:
      - gl-codeclimate.json
    reports:
      codequality: gl-codeclimate.json

----------------------------------------

TITLE: Remote Rootfs Scanning
DESCRIPTION: Scans root filesystem for vulnerabilities using remote Trivy server

LANGUAGE: shell
CODE:
$ trivy rootfs --server http://localhost:8080 --severity CRITICAL /tmp/rootfs

----------------------------------------

TITLE: Configuring Cache Options for Trivy in YAML
DESCRIPTION: Specifies cache-related options for Trivy, including backend type, Redis settings, and cache TTL.

LANGUAGE: yaml
CODE:
cache:
  # Same as '--cache-backend'
  backend: "fs"

  redis:
    # Same as '--redis-ca'
    ca: ""

    # Same as '--redis-cert'
    cert: ""

    # Same as '--redis-key'
    key: ""

    # Same as '--redis-tls'
    tls: false

  # Same as '--cache-ttl'
  ttl: 0s

----------------------------------------

TITLE: Changing Temporary Directory for Trivy
DESCRIPTION: Demonstrates how to change the temporary directory used by Trivy during scans to avoid space issues.

LANGUAGE: bash
CODE:
$ TMPDIR=/my/custom/path trivy image ...

----------------------------------------

TITLE: Configuring Kyverno Vulnerability Attestation Policy
DESCRIPTION: Defines a Kyverno ClusterPolicy that validates container image attestations. The policy checks if vulnerability scan attestations are no older than 1 hour and verifies them against a specified public key.

LANGUAGE: yaml
CODE:
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-vulnerabilities
spec:
  validationFailureAction: Enforce
  background: false
  webhookTimeoutSeconds: 30
  failurePolicy: Fail
  rules:
    - name: checking-vulnerability-scan-not-older-than-one-hour
      match:
        any:
        - resources:
            kinds:
              - Pod
      verifyImages:
      - imageReferences:
        - "*"
        attestations:
        - type: https://cosign.sigstore.dev/attestation/vuln/v1
          conditions:
          - all:
            - key: "{{ time_since('','{{ metadata.scanFinishedOn }}', '') }}"
              operator: LessThanOrEquals
              value: "1h"
          attestors:
          - count: 1
            entries:
            - keys:
                publicKeys: |-
                  -----BEGIN PUBLIC KEY-----
                  abc
                  xyz
                  -----END PUBLIC KEY-----

----------------------------------------

TITLE: Generating CycloneDX SBOM with Trivy
DESCRIPTION: Command to generate a CycloneDX SBOM for a Debian 11 image using Trivy.

LANGUAGE: bash
CODE:
$ trivy image --format cyclonedx --output debian11.sbom.cdx debian:11

----------------------------------------

TITLE: Specifying Trivy Metadata for Custom Check
DESCRIPTION: Defines the metadata for the custom Trivy check, including title, description, schema, and custom fields such as ID and severity. This metadata helps Trivy load and process the check correctly.

LANGUAGE: rego
CODE:
# METADATA
# title: Verify Image
# description: Verify Image is allowed to be used and in the right format
# schemas:
#   - input: schema["dockerfile"]
# custom:
#   id: ID001
#   severity: MEDIUM
#   input:
#     selector: 
#     - type: dockerfile

----------------------------------------

TITLE: Downloading Java DB in Advance for Trivy
DESCRIPTION: Shows how to download the Java DB in advance to mitigate issues with opening JAR files during scans.

LANGUAGE: bash
CODE:
$ trivy image --download-java-db-only
$ trivy image [YOUR_JAVA_IMAGE]

----------------------------------------

TITLE: Upgrading Trivy Plugins in Bash
DESCRIPTION: This command upgrades all installed Trivy plugins to their latest versions.

LANGUAGE: bash
CODE:
$ trivy plugin upgrade

----------------------------------------

TITLE: Verifying Trivy Shell Completion
DESCRIPTION: This snippet demonstrates how to verify that shell completion is working for Trivy by showing the available sub-commands when pressing the tab key after 'trivy'.

LANGUAGE: bash
CODE:
$ trivy [tab]
completion  -- Generate the autocompletion script for the specified shell
config      -- Scan config files for misconfigurations
filesystem  -- Scan local filesystem
help        -- Help about any command
image       -- Scan a container image
kubernetes  -- scan kubernetes cluster
module      -- Manage modules
plugin      -- Manage plugins
repository  -- Scan a repository
rootfs      -- Scan rootfs
sbom        -- Scan SBOM for vulnerabilities
server      -- Server mode
version     -- Print the version

----------------------------------------

TITLE: Defining Package and Imports for Rego Check
DESCRIPTION: Specifies the package name for the custom check and imports necessary keywords. The package name is important for avoiding conflicts with built-in checks and for running the check with Trivy.

LANGUAGE: rego
CODE:
package custom.dockerfile.ID001

import future.keywords.in

----------------------------------------

TITLE: Creating OpenVEX Document
DESCRIPTION: Example of creating an OpenVEX document for vulnerability filtering.

LANGUAGE: bash
CODE:
$ cat <<EOF > debian11.openvex.json
{
  "@context": "https://openvex.dev/ns/v0.2.0",
  "@id": "https://openvex.dev/docs/public/vex-2e67563e128250cbcb3e98930df948dd053e43271d70dc50cfa22d57e03fe96f",
  "author": "Aqua Security",
  "timestamp": "2023-08-29T19:07:16.853479631-06:00",
  "version": 1,
  "statements": [
    {
      "vulnerability": {"name": "CVE-2019-8457"},
      "products": [
        {"@id": "pkg:deb/debian/libdb5.3@5.3.28+dfsg1-0.8"}
      ],
      "status": "not_affected",
      "justification": "vulnerable_code_not_in_execute_path"
    }
  ]
}
EOF

----------------------------------------

TITLE: Exporting and Scanning Unpacked Container Filesystem with Trivy
DESCRIPTION: This snippet shows how to export a Docker container's filesystem and scan it using Trivy. It first exports the filesystem of an Alpine 3.10.2 container, then uses Trivy to scan the unpacked filesystem for vulnerabilities.

LANGUAGE: bash
CODE:
$ docker export $(docker create alpine:3.10.2) | tar -C /tmp/rootfs -xvf -
$ trivy rootfs /tmp/rootfs

----------------------------------------

TITLE: Cleaning Trivy Cache and DB
DESCRIPTION: Shows how to clean all Trivy caches and databases to troubleshoot unknown errors.

LANGUAGE: bash
CODE:
$ trivy clean --all

----------------------------------------

TITLE: Accessing Help for a Trivy Plugin in Bash
DESCRIPTION: This command displays the help information for an installed Trivy plugin, specifically the 'referrer' plugin.

LANGUAGE: bash
CODE:
$ trivy referrer --help

----------------------------------------

TITLE: Identifying Current Shell in Bash
DESCRIPTION: This command displays the current shell being used, which is necessary for configuring the correct shell completion.

LANGUAGE: bash
CODE:
$ echo $SHELL
/bin/zsh # For this example it is zsh, but will be vary depend on your $SHELL, maybe /bin/bash or /bin/fish

----------------------------------------

TITLE: Trivy Scan Results for Alpine 3.10.2 Filesystem
DESCRIPTION: This snippet shows the output of a Trivy scan on an Alpine 3.10.2 filesystem. It details various vulnerabilities found in libraries such as libcrypto1.1, libssl1.1, and musl, including their severity levels, affected versions, and brief descriptions.

LANGUAGE: bash
CODE:
2021-03-08T05:22:26.378Z        INFO    Need to update DB
2021-03-08T05:22:26.380Z        INFO    Downloading DB...
20.37 MiB / 20.37 MiB [-------------------------------------------------------------------------------------------------------------------------------------] 100.00% 8.24 MiB p/s 2s
2021-03-08T05:22:30.134Z        INFO    Detecting Alpine vulnerabilities...

/tmp/rootfs (alpine 3.10.2)
===========================
Total: 20 (UNKNOWN: 0, LOW: 2, MEDIUM: 10, HIGH: 8, CRITICAL: 0)

+--------------+------------------+----------+-------------------+---------------+---------------------------------------+
|   LIBRARY    | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |                 TITLE                 |
+--------------+------------------+----------+-------------------+---------------+---------------------------------------+
| libcrypto1.1 | CVE-2020-1967    | HIGH     | 1.1.1c-r0         | 1.1.1g-r0     | openssl: Segmentation                 |
|              |                  |          |                   |               | fault in SSL_check_chain              |
|              |                  |          |                   |               | causes denial of service              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2020-1967  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2021-23839   |          |                   | 1.1.1j-r0     | openssl: incorrect SSLv2              |
|              |                  |          |                   |               | rollback protection                   |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23839 |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2021-23840   |          |                   |               | openssl: integer                      |
|              |                  |          |                   |               | overflow in CipherUpdate              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23840 |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2021-23841   |          |                   |               | openssl: NULL pointer dereference     |
|              |                  |          |                   |               | in X509_issuer_and_serial_hash()      |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23841 |
+              +------------------+----------+                   +---------------+---------------------------------------+
|              | CVE-2019-1547    | MEDIUM   |                   | 1.1.1d-r0     | openssl: side-channel weak            |
|              |                  |          |                   |               | encryption vulnerability              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1547  |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2019-1549    |          |                   |               | openssl: information                  |
|              |                  |          |                   |               | disclosure in fork()                  |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1549  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2019-1551    |          |                   | 1.1.1d-r2     | openssl: Integer overflow in RSAZ     |
|              |                  |          |                   |               | modular exponentiation on x86_64      |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1551  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2020-1971    |          |                   | 1.1.1i-r0     | openssl: EDIPARTYNAME                 |
|              |                  |          |                   |               | NULL pointer de-reference             |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2020-1971  |
+              +------------------+----------+                   +---------------+---------------------------------------+
|              | CVE-2019-1563    | LOW      |                   | 1.1.1d-r0     | openssl: information                  |
|              |                  |          |                   |               | disclosure in PKCS7_dataDecode        |
|              |                  |          |                   |               | and CMS_decrypt_set1_pkey             |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1563  |
+--------------+------------------+----------+                   +---------------+---------------------------------------+
| libssl1.1    | CVE-2020-1967    | HIGH     |                   | 1.1.1g-r0     | openssl: Segmentation                 |
|              |                  |          |                   |               | fault in SSL_check_chain              |
|              |                  |          |                   |               | causes denial of service              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2020-1967  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2021-23839   |          |                   | 1.1.1j-r0     | openssl: incorrect SSLv2              |
|              |                  |          |                   |               | rollback protection                   |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23839 |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2021-23840   |          |                   |               | openssl: integer                      |
|              |                  |          |                   |               | overflow in CipherUpdate              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23840 |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2021-23841   |          |                   |               | openssl: NULL pointer dereference     |
|              |                  |          |                   |               | in X509_issuer_and_serial_hash()      |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2021-23841 |
+              +------------------+----------+                   +---------------+---------------------------------------+
|              | CVE-2019-1547    | MEDIUM   |                   | 1.1.1d-r0     | openssl: side-channel weak            |
|              |                  |          |                   |               | encryption vulnerability              |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1547  |
+              +------------------+          +                   +               +---------------------------------------+
|              | CVE-2019-1549    |          |                   |               | openssl: information                  |
|              |                  |          |                   |               | disclosure in fork()                  |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1549  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2019-1551    |          |                   | 1.1.1d-r2     | openssl: Integer overflow in RSAZ     |
|              |                  |          |                   |               | modular exponentiation on x86_64      |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1551  |
+              +------------------+          +                   +---------------+---------------------------------------+
|              | CVE-2020-1971    |          |                   | 1.1.1i-r0     | openssl: EDIPARTYNAME                 |
|              |                  |          |                   |               | NULL pointer de-reference             |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2020-1971  |
+              +------------------+----------+                   +---------------+---------------------------------------+
|              | CVE-2019-1563    | LOW      |                   | 1.1.1d-r0     | openssl: information                  |
|              |                  |          |                   |               | disclosure in PKCS7_dataDecode        |
|              |                  |          |                   |               | and CMS_decrypt_set1_pkey             |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2019-1563  |
+--------------+------------------+----------+-------------------+---------------+---------------------------------------+
| musl         | CVE-2020-28928   | MEDIUM   | 1.1.22-r3         | 1.1.22-r4     | In musl libc through 1.2.1,           |
|              |                  |          |                   |               | wcsnrtombs mishandles particular      |
|              |                  |          |                   |               | combinations of destination buffer... |
|              |                  |          |                   |               | -->avd.aquasec.com/nvd/cve-2020-28928 |
+--------------+                  +          +                   +               +                                       +
| musl-utils   |                  |          |                   |               |                                       |
|              |                  |          |                   |               |                                       |
|              |                  |          |                   |               |                                       |
|              |                  |          |                   |               |                                       |
+--------------+------------------+----------+-------------------+---------------+---------------------------------------+

----------------------------------------

TITLE: Configuring External VEX Reference in CycloneDX SBOM
DESCRIPTION: Example of how to specify an external VEX document reference in a CycloneDX SBOM using the externalReferences field with type 'exploitability-statement'.

LANGUAGE: json
CODE:
  "externalReferences": [
    {
      "type": "exploitability-statement",
      "url": "https://vex.example.com/vex"
    }
  ]

----------------------------------------

TITLE: Configuring IAM Role Service Account for Trivy in Kubernetes YAML
DESCRIPTION: This YAML snippet shows how to add AWS role annotations to Trivy's service account for accessing private ECR registries. The eks.amazonaws.com/role-arn annotation should be uncommented and filled with the appropriate AWS role ARN.

LANGUAGE: yaml
CODE:
trivy:

  serviceAccount:
    annotations: {}
      # eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/IAM_ROLE_NAME

----------------------------------------

TITLE: Scanning Binary SBOM from Rekor
DESCRIPTION: Example of scanning a non-packaged binary using its SBOM attestation from Rekor.

LANGUAGE: bash
CODE:
$ trivy fs --sbom-sources rekor ./bat-v0.20.0-x86_64-apple-darwin/bat

----------------------------------------

TITLE: Installing a Trivy Plugin in Bash
DESCRIPTION: This command installs a specific Trivy plugin, in this case, the 'referrer' plugin.

LANGUAGE: bash
CODE:
$ trivy plugin install referrer

----------------------------------------

TITLE: Filesystem Scan with Multiple Scanners
DESCRIPTION: Command to scan for both secrets and misconfigurations in filesystem

LANGUAGE: bash
CODE:
trivy fs --scanners secret,misconfig ./

----------------------------------------

TITLE: Authenticate Using CLI Flags
DESCRIPTION: Demonstrates authentication using CLI flags for username while passing password via environment variable.

LANGUAGE: shell
CODE:
$ TRIVY_PASSWORD=YOUR_PASSWORD trivy image --username YOUR_USERNAME YOUR_PRIVATE_IMAGE

----------------------------------------

TITLE: GitHub-hosted VEX Reference Configuration
DESCRIPTION: Example showing how to reference a VEX file hosted on GitHub in a CycloneDX SBOM's external references.

LANGUAGE: json
CODE:
  "externalReferences": [
    {
      "type": "exploitability-statement",
      "url": "https://raw.githubusercontent.com/aquasecurity/trivy/refs/heads/main/.vex/trivy.openvex.json"
    }
  ]

----------------------------------------

TITLE: Converting Bicep to ARM Template using Azure CLI
DESCRIPTION: This snippet demonstrates how to convert a Bicep file to an ARM template using the Azure CLI. This step is necessary before scanning Bicep files with Trivy, as Bicep is not natively supported.

LANGUAGE: bash
CODE:
az bicep build -f main.bicep

----------------------------------------

TITLE: Verifying CycloneDX SBOM Attestation
DESCRIPTION: This command verifies the CycloneDX SBOM attestation on an image using Cosign with a public key.

LANGUAGE: bash
CODE:
$ cosign verify-attestation --key /path/to/cosign.pub --type cyclonedx <IMAGE>

----------------------------------------

TITLE: Updating Trivy Plugin List in Bash
DESCRIPTION: This command downloads the latest plugin list for Trivy.

LANGUAGE: bash
CODE:
$ trivy plugin update

----------------------------------------

TITLE: Output to JSON File
DESCRIPTION: Command to save scan results to a JSON file

LANGUAGE: bash
CODE:
trivy config -f json -o example.json terraform-infra

----------------------------------------

TITLE: Converting Bicep to ARM Template using Bicep CLI
DESCRIPTION: This snippet shows an alternative method to convert a Bicep file to an ARM template using the Bicep CLI. This conversion is required before Trivy can scan Bicep files.

LANGUAGE: bash
CODE:
bicep build main.bicep

----------------------------------------

TITLE: Scanning for Licenses with Trivy
DESCRIPTION: Command to enable license scanning, which is disabled by default. This scans a project for license information.

LANGUAGE: bash
CODE:
$ trivy fs --scanners license /path/to/project

----------------------------------------

TITLE: Creating and Signing SPDX SBOM Attestations
DESCRIPTION: These commands demonstrate how to generate and sign SPDX and SPDX-JSON format SBOMs using Trivy and Cosign.

LANGUAGE: bash
CODE:
# spdx
$ trivy image --format spdx -o sbom.spdx <IMAGE>
$ cosign attest --key /path/to/cosign.key --type spdx --predicate sbom.spdx <IMAGE>

# spdx-json
$ trivy image --format spdx-json -o sbom.spdx.json <IMAGE>
$ cosign attest --key /path/to/cosign.key --type spdx --predicate sbom.spdx.json <IMAGE>

----------------------------------------

TITLE: Scanning SBOM with CycloneDX VEX
DESCRIPTION: Command to scan a CycloneDX SBOM with a VEX file using Trivy.

LANGUAGE: bash
CODE:
$ trivy sbom trivy.sbom.cdx --vex trivy.vex.cdx

----------------------------------------

TITLE: Defining Trivy Plugin Structure in YAML
DESCRIPTION: This YAML snippet demonstrates the structure of a plugin.yaml file for a Trivy plugin. It includes essential fields such as name, version, repository, maintainer, and platform-specific configurations.

LANGUAGE: yaml
CODE:
name: "kubectl"
version: "0.1.0"
repository: github.com/aquasecurity/trivy-plugin-kubectl
maintainer: aquasecurity
output: false
summary: Scan kubectl resources
description: |-
  A Trivy plugin that scans the images of a kubernetes resource.
  Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME
platforms:
  - selector: # optional
      os: darwin
      arch: amd64
    uri: ./trivy-kubectl # where the execution file is (local file, http, git, etc.)
    bin: ./trivy-kubectl # path to the execution file
  - selector: # optional
      os: linux
      arch: amd64
    uri: https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz
    bin: ./trivy-kubectl

----------------------------------------

TITLE: Basic Directory Scan
DESCRIPTION: Basic command to scan the current directory for Terraform configurations

LANGUAGE: bash
CODE:
trivy config ./

----------------------------------------

TITLE: Generating and Scanning KBOM with Trivy
DESCRIPTION: Shows how to generate a Kubernetes Bill of Materials (KBOM) in CycloneDX format and then scan it using Trivy. This is specific to Kubernetes cluster scanning.

LANGUAGE: bash
CODE:
$ trivy k8s --format cyclonedx cluster -o kbom.json
$ trivy sbom kbom.json

----------------------------------------

TITLE: Scanning AWS AMI for Vulnerabilities with Trivy
DESCRIPTION: This command shows how to scan an Amazon Machine Image (AMI) for vulnerabilities using Trivy. The AMI ID is specified with the 'ami:' prefix.

LANGUAGE: bash
CODE:
$ trivy vm --scanners vuln ami:ami-0123456789abcdefg

----------------------------------------

TITLE: Limiting Findings to 100 for Upload
DESCRIPTION: This jq command limits the number of findings to 100, which is the maximum allowed per batch-import-findings request.

LANGUAGE: bash
CODE:
jq '.[:100]' report.asff 1> short_report.asff

----------------------------------------

TITLE: Example VEX Document Structure in JSON
DESCRIPTION: Complete example of a VEX document structure including context, vulnerability statements, product identification, and status declarations.

LANGUAGE: json
CODE:
{
  "@context": "https://openvex.dev/ns/v0.2.0",
  "@id": "https://openvex.dev/docs/public/vex-2e67563e128250cbcb3e98930df948dd053e43271d70dc50cfa22d57e03fe96f",
  "author": "Aqua Security",
  "timestamp": "2024-07-30T19:07:16.853479631-06:00",
  "version": 1,
  "statements": [
    {
      "vulnerability": {
        "name": "CVE-2023-42363"
      },
      "products": [
        {
          "@id": "pkg:oci/trivy?repository_url=ghcr.io/aquasecurity/trivy",
          "subcomponents": [
            {"@id": "pkg:apk/alpine/busybox"},
            {"@id": "pkg:apk/alpine/busybox-binsh"}
          ]
        }
      ],
      "status": "not_affected",
      "justification": "vulnerable_code_cannot_be_controlled_by_adversary",
      "impact_statement": "awk is not used"
    }
  ]
}

----------------------------------------

TITLE: Defining Custom Compliance Report in YAML
DESCRIPTION: YAML structure for creating a custom compliance report, including report metadata, controls, and check references.

LANGUAGE: yaml
CODE:
spec:
  id: "k8s-myreport" # report unique identifier. this should not container spaces.
  title: "My custom Kubernetes report" # report title. Any one-line title.
  description: "Describe your report" # description of the report. Any text.
  relatedResources :
    - https://some.url # useful references. URLs only.
  version: "1.0" # spec version (string)
  controls:
    - name: "Non-root containers" # Name for the control (appears in the report as is). Any one-line name.
      description: 'Check that container is not running as root' # Description (appears in the report as is). Any text.
      id: "1.0" # control identifier (string)
      checks:   # list of existing Trivy checks that define the control
        - id: AVD-KSV-0012 # check ID. Must start with `AVD-` or `CVE-` 
      severity: "MEDIUM" # Severity for the control (note that checks severity isn't used)
    - name: "Immutable container file systems"
      description: 'Check that container root file system is immutable'
      id: "1.1"
      checks:
        - id: AVD-KSV-0014
      severity: "LOW"

----------------------------------------

TITLE: Clone Repository Command
DESCRIPTION: Commands to clone and navigate to the example repository for Terraform scanning

LANGUAGE: bash
CODE:
git clone git@github.com:Cloud-Native-Security/trivy-demo.git
cd bad_iac/terraform

----------------------------------------

TITLE: Basic Helm Chart Installation
DESCRIPTION: Command to install the Trivy chart with a custom release name

LANGUAGE: bash
CODE:
$ helm install my-release .

----------------------------------------

TITLE: Scanning VM Image for Misconfigurations with Trivy
DESCRIPTION: This command shows how to scan a VM image for misconfigurations using Trivy. This is useful if the image contains IaC files like Kubernetes YAML or Terraform files.

LANGUAGE: bash
CODE:
$ trivy vm --scanners misconfig [YOUR_VM_IMAGE]

----------------------------------------

TITLE: Uninstalling Trivy Chart
DESCRIPTION: Command to remove Trivy deployment and associated Kubernetes components

LANGUAGE: bash
CODE:
$ helm delete my-release

----------------------------------------

TITLE: Default VEX Repository Configuration (YAML)
DESCRIPTION: Default YAML configuration for VEX repositories in Trivy. This configuration is created automatically or can be manually set up.

LANGUAGE: yaml
CODE:
repositories:
  - name: default
    url: https://github.com/aquasecurity/vexhub
    enabled: true
    username: ""
    password: ""
    token: ""

----------------------------------------

TITLE: Sample Node-collector Output in JSON
DESCRIPTION: Example JSON output from the node-collector showing NodeInfo resource with file ownership and permissions data.

LANGUAGE: json
CODE:
{
  "apiVersion": "v1",
  "kind": "NodeInfo",
  "metadata": {
    "creationTimestamp": "2023-01-04T11:37:11+02:00"
  },
  "type": "master",
  "info": {
    "adminConfFileOwnership": {
      "values": [
        "root:root"
      ]
    },
    "adminConfFilePermissions": {
      "values": [
        600
      ]
    }
  }
}

----------------------------------------

TITLE: Applying FluxCD Manifest with kubectl
DESCRIPTION: This command applies the Trivy-Operator FluxCD manifest to the Kubernetes cluster using kubectl.

LANGUAGE: bash
CODE:
kubectl apply -f trivy-operator.yaml

----------------------------------------

TITLE: Configuring Global Options for Trivy in YAML
DESCRIPTION: Defines global configuration options for Trivy, including cache directory, debug mode, insecure connections, quiet mode, and timeout settings.

LANGUAGE: yaml
CODE:
cache:
  # Same as '--cache-dir'
  dir: "/path/to/cache"

# Same as '--debug'
debug: false

# Same as '--insecure'
insecure: false

# Same as '--quiet'
quiet: false

# Same as '--timeout'
timeout: 5m0s

----------------------------------------

TITLE: Scanning Rootfs with Trivy in Bash
DESCRIPTION: This command demonstrates how to use Trivy to scan a root filesystem. It requires specifying the path to the rootfs directory.

LANGUAGE: bash
CODE:
$ trivy rootfs /path/to/rootfs

----------------------------------------

TITLE: Configuring Clean Options for Trivy in YAML
DESCRIPTION: Defines clean-up options for Trivy, including settings for removing various caches and databases.

LANGUAGE: yaml
CODE:
clean:
  # Same as '--all'
  all: false

  # Same as '--checks-bundle'
  checks-bundle: false

  # Same as '--java-db'
  java-db: false

  # Same as '--scan-cache'
  scan-cache: false

  # Same as '--vex-repo'
  vex-repo: false

  # Same as '--vuln-db'
  vuln-db: false

----------------------------------------

TITLE: Custom VEX Repository Configuration (YAML)
DESCRIPTION: Example YAML configuration for adding a custom VEX repository to Trivy's configuration file.

LANGUAGE: yaml
CODE:
- name: custom
  url: https://example.com/custom-repo
  enabled: true

----------------------------------------

TITLE: Defining Rego Check for Kubelet File Permissions
DESCRIPTION: Rego code defining a check for ensuring kubelet.conf file permissions are set to 600 or more restrictive.

LANGUAGE: rego
CODE:
# METADATA
# title: "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive"
# description: "Ensure that the kubelet.conf file has permissions of 600 or more restrictive."
# scope: package
# schemas:
# - input: schema["kubernetes"]
# related_resources:
# - https://www.cisecurity.org/benchmark/kubernetes
# custom:
#   id: KCV0073
#   avd_id: AVD-KCV-0073
#   severity: HIGH
#   short_code: ensure-kubelet.conf-file-permissions-600-or-more-restrictive.
#   recommended_action: "Change the kubelet.conf file permissions to 600 or more restrictive if exist"
#   input:
#     selector:
#     - type: kubernetes
package builtin.kubernetes.KCV0073

import data.lib.kubernetes

types := ["master", "worker"]

validate_kubelet_file_permission(sp) := {"kubeletConfFilePermissions": violation} {
 sp.kind == "NodeInfo"
 sp.type == types[_]
 violation := {permission | permission = sp.info.kubeletConfFilePermissions.values[_]; permission > 600}
 count(violation) > 0
}

deny[res] {
 output := validate_kubelet_file_permission(input)
 msg := "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive"
 res := result.new(msg, output)
}

----------------------------------------

TITLE: Deploying Trivy-Operator with FluxCD Kubernetes Manifest
DESCRIPTION: This YAML manifest defines a HelmRepository and HelmRelease for deploying the Trivy-Operator using FluxCD. It specifies the Helm chart source, version, and some configuration values.

LANGUAGE: yaml
CODE:
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: trivy-operator
  namespace: flux-system
spec:
  interval: 60m
  url: https://aquasecurity.github.io/helm-charts/

---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: trivy-operator
  namespace: trivy-system
spec:
  chart:
    spec:
      chart: trivy-operator
      sourceRef:
        kind: HelmRepository
        name: trivy-operator
        namespace: flux-system
      version: 0.10.1
  interval: 60m
  values:
    trivy:
      ignoreUnfixed: true
  install:
    crds: CreateReplace
    createNamespace: true

----------------------------------------

TITLE: Configuring Vulnerability Options for Trivy in YAML
DESCRIPTION: Specifies vulnerability-related options for Trivy, including ignore settings, severity sources, and VEX configuration.

LANGUAGE: yaml
CODE:
vulnerability:
  # Same as '--ignore-status'
  ignore-status: []

  # Same as '--ignore-unfixed'
  ignore-unfixed: false

  # Same as '--vuln-severity-source'
  severity-source:
   - auto

  # Same as '--skip-vex-repo-update'
  skip-vex-repo-update: false

  # Same as '--vex'
  vex: []

----------------------------------------

TITLE: Skipping Files with Trivy CLI
DESCRIPTION: Demonstrates how to use the --skip-files flag to exclude specific files from Trivy scanning.

LANGUAGE: bash
CODE:
$ trivy image --skip-files "/Gemfile.lock" --skip-files "/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0/Gemfile.lock" quay.io/fluentd_elasticsearch/fluentd:v2.9.0

----------------------------------------

TITLE: Installing Trivy via NixOS Configuration
DESCRIPTION: NixOS system configuration for installing Trivy package.

LANGUAGE: nix
CODE:
environment.systemPackages = with pkgs; [
  # your other packages ...
  trivy
];

----------------------------------------

TITLE: Scanning SBOM with External VEX Reference
DESCRIPTION: Command line example demonstrating how to scan a CycloneDX SBOM while using externally referenced VEX documents with the --vex sbom-ref flag.

LANGUAGE: shell
CODE:
$ trivy sbom trivy.cdx.json --vex sbom-ref
2025-01-19T13:29:31+01:00       INFO    [vex] Retrieving external VEX document from host vex.example.com type="externalReference"
2025-01-19T13:29:31+01:00       INFO    Some vulnerabilities have been ignored/suppressed. Use the "--show-suppressed" flag to display them.

----------------------------------------

TITLE: Defining CIS Compliance Report for Kubernetes in YAML
DESCRIPTION: Example YAML structure for defining a CIS compliance report for Kubernetes, including spec details, controls, and check references.

LANGUAGE: yaml
CODE:
---
spec:
  id: k8s-cis-1.23
  title: CIS Kubernetes Benchmarks v1.23
  description: CIS Kubernetes Benchmarks
  platform: k8s
  type: cis
  version: '1.23'
  relatedResources:
  - https://www.cisecurity.org/benchmark/kubernetes
  controls:
  - id: 1.1.1
    name: Ensure that the API server pod specification file permissions are set to
      600 or more restrictive
    description: Ensure that the API server pod specification file has permissions
      of 600 or more restrictive
    checks:
    - id: AVD-KCV-0073
    commands:
    - id: CMD-0001
    severity: HIGH

----------------------------------------

TITLE: Applying ArgoCD Manifest from Git Repository
DESCRIPTION: This command applies the Trivy-Operator ArgoCD Application manifest directly from a Git repository to the Kubernetes cluster.

LANGUAGE: bash
CODE:
> kubectl apply -n argocd -f https://raw.githubusercontent.com/AnaisUrlichs/argocd-starboard/main/starboard/argocd-starboard.yaml

----------------------------------------

TITLE: Defining Python Package Dependencies with Fixed Versions
DESCRIPTION: Requirements file that pins specific versions of Flask and its dependencies. Includes core Flask framework components like Werkzeug, Jinja2, and supporting utilities like click and itsdangerous.

LANGUAGE: plaintext
CODE:
click==8.0.0
Flask==2.0.0
itsdangerous==2.0.0
Jinja2==3.0.0
MarkupSafe==2.0.0
Werkzeug==2.0.0

----------------------------------------

TITLE: Configuring Directory Skipping in Trivy YAML
DESCRIPTION: Demonstrates how to configure directory skipping in Trivy's YAML configuration file, including the use of glob patterns.

LANGUAGE: yaml
CODE:
image:
  skip-dirs:
    - foo/bar/
    - "**/.terraform"

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: List of Python package dependencies with exact version specifications for the Trivy project. Includes core web framework Flask and its dependencies click, itsdangerous, and Jinja2.

LANGUAGE: plaintext
CODE:
click   == 8.0.0
Flask ==2.0.0
itsdangerous== 2.0.0

Jinja2 == 3.0.0 # comment

----------------------------------------

TITLE: Scanning Container Image Configuration for Misconfigurations
DESCRIPTION: Scan the configuration of a container image for misconfigurations

LANGUAGE: shell
CODE:
$ trivy image --image-config-scanners misconfig [YOUR_IMAGE_NAME]

----------------------------------------

TITLE: Handling Scan Timeout in Trivy
DESCRIPTION: Demonstrates how to increase the timeout value for Trivy scans, particularly useful for Java images which may take longer to scan.

LANGUAGE: bash
CODE:
$ trivy image --timeout 15m

----------------------------------------

TITLE: Critical Severity Scan with Trivy
DESCRIPTION: Filters scan results to show only CRITICAL severity vulnerabilities in summary format.

LANGUAGE: sh
CODE:
trivy k8s --severity=CRITICAL --report=summary

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: A requirements file listing Python packages with their exact versions. The file includes commented out dependencies and active dependencies for common packages like Click, Flask, Jinja2, and MarkupSafe.

LANGUAGE: plaintext
CODE:
# foo==8.0.0
#bar==8.0.0
#comment
click==8.0.0
Flask==2.0.0 #comment
Jinja2==3.0.0#comment
MarkupSafe==2.0.0 # comment

----------------------------------------

TITLE: Using File Patterns with Trivy CLI
DESCRIPTION: Shows how to use the --file-patterns flag to specify custom file patterns for Trivy to scan, including examples for different analyzers.

LANGUAGE: bash
CODE:
--file-patterns "dockerfile:.*.docker" --file-patterns "kubernetes:*.tpl" --file-patterns "pip:requirements-.*\.txt"

----------------------------------------

TITLE: Installing FooProject with Hash Verification
DESCRIPTION: Specifies FooProject version 1.2 with two SHA-256 hash values for package verification. The hashes ensure package integrity during installation.

LANGUAGE: python
CODE:
FooProject == 1.2 --hash=sha256:2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824 \
                  --hash=sha256:486ea46224d1bb4fb680f34f7c9ad96a8f24ec88be73ea8e5a6c65260e9cb8a7

----------------------------------------

TITLE: Scanning Container Image with Custom Podman Daemon
DESCRIPTION: Scan a container image using a custom Podman daemon socket

LANGUAGE: shell
CODE:
$ trivy image --podman-host /run/user/1000/podman/podman.sock YOUR_IMAGE

----------------------------------------

TITLE: Vulnerability Scanning RPM Archives with OS Information
DESCRIPTION: Shows a three-step process to scan RPM archives for vulnerabilities: generate SBOM, manually add OS information using jq, and scan the modified SBOM. This is necessary because RPM files don't contain OS information by default.

LANGUAGE: shell
CODE:
$ TRIVY_EXPERIMENTAL_RPM_ARCHIVE=true trivy fs ./rpms -f cyclonedx -o rpms.cdx.json
$ jq '(.components[] | select(.type == "operating-system")) |= (.name = "redhat" | .version = "7.9")' rpms.cdx.json > rpms-res.cdx.json
$ trivy sbom ./rpms-res.cdx.json

----------------------------------------

TITLE: RSA Private Key in PEM Format
DESCRIPTION: A PEM-encoded RSA private key that uses the standard BEGIN/END delimiters. This appears to be a shortened example or partial key as it's not a complete RSA key length.

LANGUAGE: text
CODE:
-----BEGIN RSA PRIVATE KEY-----
YObVAoGAGsWtK3K2Q4OSf6Z1az3AuDfo8xj9/UBuBQe1Op9RFTXps84foAqEgFwj
7eUHc9npsdql24xsVK8huo9VKPu/mrDStv8JYRWP4cSUXWWBx5oGpPBP7uaMgQCx
uks3gKrUL/3LFndE0egKslgGSkoyYb3iHP1X3IFsOtTQz6ZPmzc=
-----END RSA PRIVATE KEY-----

----------------------------------------

TITLE: Specifying Python Package Dependencies
DESCRIPTION: This snippet lists the required Python packages for the project. It specifies Flask version 2.0.0 and includes pandas without a version constraint.

LANGUAGE: Text
CODE:
Flask==2.0.0
pandas

----------------------------------------

TITLE: Exiting on EOL Operating Systems in Shell
DESCRIPTION: Example of using the --exit-on-eol flag to fail scanning on end-of-life operating systems.

LANGUAGE: shell
CODE:
$ trivy image --exit-on-eol 1 alpine:3.10

----------------------------------------

TITLE: HuggingFace API Token Declaration
DESCRIPTION: A hardcoded HuggingFace API token credential. This appears to be a test or example token based on its format and naming convention.

LANGUAGE: plaintext
CODE:
HF_example_token: hf_Testpoiqazwsxedcrfvtgbyhn12345ujmik6789

----------------------------------------

TITLE: Using Scan Cache with Trivy
DESCRIPTION: Command to enable caching of scan results for a git repository. This uses the filesystem as the cache backend and the latest commit hash as the cache key.

LANGUAGE: bash
CODE:
$ trivy fs --cache-backend fs /path/to/git/repo

----------------------------------------

TITLE: Oracle Linux Package Version Format Examples
DESCRIPTION: Examples showing different version format patterns for Oracle Linux packages across normal, FIPS, and KSplice flavors

LANGUAGE: text
CODE:
3.6.16-4.el8                           # normal flavor
10:3.6.16-4.0.1.el8_fips               # fips flavor
2:2.34-60.0.3.ksplice1.el9_2.7         # ksplice flavor
151.0.1.ksplice2.el8                   # ksplice flavor

----------------------------------------

TITLE: Setting AWS Credentials in Environment Variables
DESCRIPTION: Examples of AWS credential environment variable formats including secret keys, access key IDs, and account identifiers. These patterns demonstrate common AWS credential configuration formats.

LANGUAGE: env
CODE:
'AWS_secret_KEY'="12ASD34qwe56CXZ78tyH10Tna543VBokN85RHCas"
AWS_ACCESS_KEY_ID=AKIA0123456789ABCDEF
"aws_account_ID":'1234-5678-9123'
AWS_example=AKIAIOSFODNN7EXAMPLE
  "created_by": "ENV aws_sec_key \"KEYKEYKEYKEYKEYKEYKEYKEYKEYKEYKEYKEYKEYK\""

----------------------------------------

TITLE: Example of Overly Long AWS Key
DESCRIPTION: This snippet shows an example of an AWS key that is too long, which could potentially be a security risk. It demonstrates improper key formatting or storage.

LANGUAGE: plaintext
CODE:
"AWS_key":HGM724ngha9785NGKbbar6jk76mnLL80BHJnabyhdngha9785NGKbb6jk76mnLL8

----------------------------------------

TITLE: Example Go Module Version Declaration
DESCRIPTION: Demonstrates how to declare the Go version in a go.mod file. This is used by Trivy to determine the Go version for vulnerability scanning.

LANGUAGE: go
CODE:
module github.com/aquasecurity/trivy

go 1.18

require (
        github.com/CycloneDX/cyclonedx-go v0.5.0
        ...
)

----------------------------------------

TITLE: Setting Packagist API Tokens
DESCRIPTION: Environment variables defining Packagist API tokens for different access levels: organization read, organization write, and user access. These tokens are used to authenticate API requests to Packagist.

LANGUAGE: env
CODE:
ORG_READ_TOKEN=packagist_ort_6675e11a686c692f3f2e3b6ce528c3d122d22d912ea69a20713cdf51714ba710ad74
ORG_WRITE_TOKEN=packagist_out_d63BD7be741c67ca810f924225b525fa5d20e6e1b316c8bfc0a1b33c68e4861bd5a4
USER_TOKEN=packagist_uut_02f17e5917451dcdcc2995157e08cac2976a0373097b95d7021ba7a6844437973421

----------------------------------------

TITLE: Branch, Commit, and Tag Scanning in Trivy
DESCRIPTION: Commands for scanning specific branches, commits, or tags in remote repositories.

LANGUAGE: bash
CODE:
$ trivy repo --branch <branch-name> <repo-name>

LANGUAGE: bash
CODE:
$ trivy repo --commit <commit-hash> <repo-name>

LANGUAGE: bash
CODE:
$ trivy repo --tag <tag-name> <repo-name>

----------------------------------------

TITLE: Example Dart SDK Dependency in pubspec.lock
DESCRIPTION: Demonstrates how Trivy handles SDK dependencies in Dart projects, particularly when using the --detection-priority comprehensive option.

LANGUAGE: yaml
CODE:
flutter:
  dependency: "direct main"
  description: flutter
  source: sdk
  version: "0.0.0"
sdks:
  dart: ">=2.18.0 <3.0.0"
  flutter: "^3.3.0"

----------------------------------------

TITLE: Defining GitHub Personal Access Token
DESCRIPTION: This line sets the GitHub Personal Access Token (PAT) as an environment variable. PATs are used for authenticating with GitHub APIs and services.

LANGUAGE: plaintext
CODE:
GITHUB_PAT=ghp_012345678901234567890123456789abcdef

----------------------------------------

TITLE: Storing Incomplete RSA Private Key in PEM Format
DESCRIPTION: This snippet contains an incomplete or placeholder RSA private key in PEM format. It only includes the BEGIN and END markers without any key data.

LANGUAGE: PEM
CODE:
-----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY-----

----------------------------------------

TITLE: Parsing Python Package Version Specifiers
DESCRIPTION: Example showing different version specifier formats supported by Trivy in requirements.txt, including minimum version specifications with >=, ~=, and .* operators.

LANGUAGE: text
CODE:
keyring >= 4.1.1            # Minimum version 4.1.1
Mopidy-Dirble ~= 1.1        # Minimum version 1.1
python-gitlab==2.0.*        # Minimum version 2.0.0

----------------------------------------

TITLE: Exposing AWS Secret Access Key in Environment Variable
DESCRIPTION: A plaintext AWS secret access key is assigned to an environment variable 'AWS_secret_KEY'. This represents a security risk as credentials should never be hardcoded or stored in plaintext.

LANGUAGE: plaintext
CODE:
'AWS_secret_KEY'="12ASD34qwe56CXZ78tyH10Tna543VBokN85RHCas"

----------------------------------------

TITLE: Scanning SBOM Attestation with Cosign and Trivy
DESCRIPTION: Illustrates how to verify an SBOM attestation using Cosign and then scan it with Trivy. This example assumes a CycloneDX-type attestation has been created and attached to an image.

LANGUAGE: bash
CODE:
$ cosign verify-attestation --key /path/to/cosign.pub --type cyclonedx <IMAGE> > sbom.cdx.intoto.jsonl
$ trivy sbom ./sbom.cdx.intoto.jsonl

----------------------------------------

TITLE: Template Format Example
DESCRIPTION: Example of using a custom template to format the output

LANGUAGE: bash
CODE:
trivy image --format template --template "{{ range . }} {{ .Target }} {{ end }}" golang:1.12-alpine

----------------------------------------

TITLE: Detecting Aliyun Access Keys in Various Formats
DESCRIPTION: This snippet shows different ways Aliyun access keys might appear in code or configuration files. It includes keys in key-value pairs, standalone strings, and with slight variations to test detection capabilities.

LANGUAGE: plaintext
CODE:
key : LTAI1234567890ABCDEFG123asd
key = LTAI1234567890ABCDEFG123,
asdLTAI1234567890ABCDEFG123
asDLTAI1234567890ABCDEFG123
as1LTAI1234567890ABCDEFG123
key : LTAI1234567890ABCDEFG123Asd

----------------------------------------

TITLE: Implementing RDS IAM Database Authentication Check in Rego
DESCRIPTION: This snippet demonstrates a Rego check for ensuring IAM Database Authentication is enabled for RDS instances in AWS. It includes metadata, package definition, and a deny rule.

LANGUAGE: rego
CODE:
# METADATA
# title: "RDS IAM Database Authentication Disabled"
# description: "Ensure IAM Database Authentication is enabled for RDS database instances to manage database access"
# scope: package
# schemas:
# - input: schema["aws"]
# related_resources:
# - https://docs.aws.amazon.com/neptune/latest/userguide/iam-auth.html
# custom:
#   id: AVD-AWS-0176
#   avd_id: AVD-AWS-0176
#   provider: aws
#   service: rds
#   severity: MEDIUM
#   short_code: enable-iam-auth
#   recommended_action: "Modify the PostgreSQL and MySQL type RDS instances to enable IAM database authentication."
#   input:
#     selector:
#     - type: cloud
#       subtypes:
#         - service: rds
#           provider: aws

package builtin.aws.rds.aws0176

deny[res] {
	instance := input.aws.rds.instances[_]
	instance.engine.value == ["postgres", "mysql"][_]
	not instance.iamauthenabled.value
	res := result.new("Instance does not have IAM Authentication enabled", instance.iamauthenabled)
}

----------------------------------------

TITLE: Composer Scanner Features
DESCRIPTION: Details of Composer scanning capabilities in Trivy, including SBOM generation, vulnerability scanning, and license scanning support.

LANGUAGE: markdown
CODE:
| Package manager | SBOM | Vulnerability | License |
|-----------------|:----:|:-------------:|:-------:|
| Composer        |  ✓   |       ✓       |    ✓    |

----------------------------------------

TITLE: Defining CodeBuild Service Structure in Go
DESCRIPTION: Core data structure for representing AWS CodeBuild service configuration in Trivy. Defines the main CodeBuild struct that contains a list of Projects.

LANGUAGE: go
CODE:
type CodeBuild struct {
	Projects []Project
}

----------------------------------------

TITLE: Scanning EBS Snapshot for Vulnerabilities with Trivy
DESCRIPTION: This command illustrates how to scan an Amazon Elastic Block Store (EBS) snapshot for vulnerabilities using Trivy. The snapshot ID is specified with the 'ebs:' prefix.

LANGUAGE: bash
CODE:
$ trivy vm --scanners vuln ebs:snap-0123456789abcdefg

----------------------------------------

TITLE: Adding Release Notes Link in GitHub Releases
DESCRIPTION: This snippet shows how to format the release notes link in the GitHub Releases page. It includes placeholders for the release highlights discussion link and the changelog link.

LANGUAGE: markdown
CODE:
## ⚡Release highlights and summary⚡

👉 https://github.com/aquasecurity/trivy/discussions/6838

## Changelog
https://github.com/aquasecurity/trivy/blob/main/CHANGELOG.md#0520-2024-06-03

----------------------------------------

TITLE: Credential Object Definition
DESCRIPTION: YAML-style object containing username and password credentials.

LANGUAGE: yaml
CODE:
credentials: { user: "username" password: "123456789" }

----------------------------------------

TITLE: Basic Registry Logout Command Usage
DESCRIPTION: The basic syntax for logging out of a container registry using trivy. SERVER parameter specifies the registry to log out from.

LANGUAGE: bash
CODE:
trivy registry logout SERVER [flags]

----------------------------------------

TITLE: Visualizing Git Branching Strategy with Mermaid
DESCRIPTION: A Mermaid diagram illustrating the Git branching and backporting workflow for Trivy v0.50 releases, showing the relationship between main branch, release branch, and how features and bugfixes are managed across branches.

LANGUAGE: mermaid
CODE:
gitGraph:
  commit id:"Feature 1"
  commit id:"v0.50.0 release" tag:"v0.50.0"

  branch "release/v0.50"
  
  checkout main
  commit id:"Bugfix 1"

  checkout "release/v0.50"
  cherry-pick id:"Bugfix 1"

  checkout main
  commit id:"Feature 2"
  commit id:"Bugfix 2"
  commit id:"Feature 3"

  checkout "release/v0.50"
  cherry-pick id:"Bugfix 2"
  commit id:"v0.50.1 release" tag:"v0.50.1"

----------------------------------------

TITLE: Markdown Tables - Conan Package Manager Support Features
DESCRIPTION: Tables documenting Trivy's support for Conan package manager features including SBOM, vulnerability scanning, license detection, and dependency analysis capabilities. Also details support for different lock file versions and their features.

LANGUAGE: markdown
CODE:
| Package manager | SBOM | Vulnerability | License |
|-----------------|:----:|:-------------:|:-------:|
| Conan           |  ✓   |       ✓       |  ✓[^1]  |

| Package manager       | File           | Transitive dependencies | Dev dependencies | [Dependency graph][dependency-graph] | Position |
|-----------------------|----------------|:-----------------------:|:----------------:|:------------------------------------:|:--------:|
| Conan (lockfile v1)   | conan.lock[^2] |            ✓            |     Excluded     |                  ✓                   |    ✓     |
| Conan (lockfile v2)   | conan.lock[^2] |            ✓ [^3]       |     Excluded     |                  -                   |    ✓     |

----------------------------------------

TITLE: HubSpot Forms Script Integration
DESCRIPTION: JavaScript code to load the HubSpot forms embed script and create a form instance with specific portal and form IDs

LANGUAGE: html
CODE:
<script charset="utf-8" type="text/javascript" src="//js.hsforms.net/forms/embed/v2.js"></script>

LANGUAGE: javascript
CODE:
<script>
  hbspt.forms.create({
    portalId: "1665891",
    formId: "a1d0c098-3b3a-40d8-afb4-e04ddb697afe"
  });
</script>

----------------------------------------

TITLE: Scanning VM Image for Licenses with Trivy
DESCRIPTION: This command demonstrates how to scan a VM image for licenses using Trivy. The license scanner is disabled by default and needs to be explicitly enabled.

LANGUAGE: bash
CODE:
$ trivy vm --scanners license [YOUR_VM_IMAGE]

----------------------------------------

TITLE: Implementing Project and Artifact Settings Structures in Go
DESCRIPTION: Defines the data structures for CodeBuild Project resources and their associated ArtifactSettings. Uses Trivy's custom types for metadata and boolean values to track resource configuration details.

LANGUAGE: go
CODE:
type Project struct {
	Metadata                  iacTypes.Metadata
	ArtifactSettings          ArtifactSettings
	SecondaryArtifactSettings []ArtifactSettings
}

type ArtifactSettings struct {
	Metadata          iacTypes.Metadata
	EncryptionEnabled iacTypes.BoolValue
}

----------------------------------------

TITLE: Storing Secrets and Credentials in YAML
DESCRIPTION: This snippet shows various ways of storing secrets and credentials in a YAML-like format. It includes a generic secret, an ignored block containing a secret, and a credentials object with a username and password. Note that storing secrets and credentials in plaintext is not recommended for security reasons.

LANGUAGE: yaml
CODE:
secret="othervalue"
credentials: { user: "username" password: "123456789" }

----------------------------------------

TITLE: Retrieving NodePort Service URL
DESCRIPTION: This snippet exports the NODE_PORT and NODE_IP for a NodePort service type, then constructs the service URL.

LANGUAGE: bash
CODE:
export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "testchart.fullname" . }})
export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
echo http://$NODE_IP:$NODE_PORT

----------------------------------------

TITLE: Parsing Conda environment.yml for SBOM Generation
DESCRIPTION: Trivy parses environment.yml files to find the dependency list for Conda environments. It supports both .yaml and .yml extensions. Version ranges are supported, but exact versions may not be determined without using 'conda env export'.

LANGUAGE: yaml
CODE:
name: myenv
channels:
  - conda-forge
dependencies:
  - python=3.7
  - numpy
  - pandas

----------------------------------------

TITLE: Adding MySQL Init Containers
DESCRIPTION: Example YAML configuration for adding initialization containers

LANGUAGE: yaml
CODE:
initContainers:
  - name: your-image-name
    image: your-image
    imagePullPolicy: Always
    ports:
      - name: portname
        containerPort: 1234

----------------------------------------

TITLE: Importing GPG Public Key for Trivy RPM Verification
DESCRIPTION: This snippet demonstrates how to download and import the GPG public key for verifying Trivy RPM packages. It also shows how to confirm the key import.

LANGUAGE: shell
CODE:
curl https://aquasecurity.github.io/trivy-repo/rpm/public.key \
--output pub.key
rpm --import pub.key
rpm -q --queryformat "%{SUMMARY}\n" $(rpm -q gpg-pubkey)

----------------------------------------

TITLE: Generating Python Dependencies with pip-compile for Trivy Documentation
DESCRIPTION: This code snippet shows the command used to generate the requirements file for the Trivy project documentation build. It uses pip-compile to create an output file with specific package versions based on the input requirements.

LANGUAGE: Bash
CODE:
#    pip-compile --output-file=docs/build/requirements.txt docs/build/requirements.in

----------------------------------------

TITLE: Specifying Flask Dependency in Python
DESCRIPTION: This line specifies a dependency on Flask version 2.0.0. It's commonly used in a requirements.txt file to ensure the correct version of Flask is installed for the project.

LANGUAGE: Text
CODE:
Flask==2.0.0

----------------------------------------

TITLE: Deploying MySQL Helm Chart in Diagnostic Mode
DESCRIPTION: This snippet shows how to deploy the MySQL Helm chart in diagnostic mode, which disables all probes and overwrites the command.

LANGUAGE: yaml
CODE:
command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}

----------------------------------------

TITLE: Defining Conda Environment Prefix for License Scanning
DESCRIPTION: To correctly define licenses, the environment.yml file should contain a 'prefix' field pointing to a directory with package.json files. This ensures Trivy can parse the necessary files for license information.

LANGUAGE: yaml
CODE:
name: myenv
channels:
  - conda-forge
dependencies:
  - python=3.7
  - numpy
  - pandas
prefix: /path/to/conda/env

----------------------------------------

TITLE: Generating Application URLs in Kubernetes
DESCRIPTION: A template that generates appropriate commands for accessing the application URL based on the service type configuration. Handles Ingress, NodePort, LoadBalancer, and ClusterIP service types with specific commands for each scenario.

LANGUAGE: helm
CODE:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "testchart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "testchart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "testchart.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "testchart.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

----------------------------------------

TITLE: Verifying Trivy RPM Package Signature
DESCRIPTION: This snippet shows how to download a Trivy RPM package and verify its signature using the rpm command. It assumes the GPG public key has been imported.

LANGUAGE: shell
CODE:
curl -L https://github.com/aquasecurity/trivy/releases/download/<version>/<file name>.rpm \
--output trivy.rpm
rpm -K trivy.rpm

----------------------------------------

TITLE: Configuring Zsh Shell Completion for Trivy
DESCRIPTION: This code block shows the commands to enable and configure Zsh shell completion for Trivy. It includes adding the autoload command to .zshrc, sourcing the completion script, and saving it for future sessions.

LANGUAGE: bash
CODE:
echo "autoload -U compinit; compinit" >> ~/.zshrc
source <(trivy completion zsh); compdef _trivy trivy
trivy completion zsh > "${fpath[1]}/_trivy"

----------------------------------------

TITLE: Defining Python Package Dependencies with Version Constraints
DESCRIPTION: Requirements specification showing different ways to declare package dependencies including minimum versions, version exclusions, compatible releases, exact versions, and platform-specific conditions.

LANGUAGE: pip
CODE:
keyring >= 4.1.1            # Minimum version 4.1.1
coverage != 3.5             # Version Exclusion. Anything except version 3.5
Mopidy-Dirble ~= 1.1        # Compatible release. Same as >= 1.1, == 1.*
Django == 2.3.4
SomeProject ==5.4 ; python_version < '3.8'
numpyNew; sys_platform == 'win32'
numpy >= 3.4.1; sys_platform == 'win32'

----------------------------------------

TITLE: Configuring S3 Bucket Notification with SQS in YAML
DESCRIPTION: This YAML snippet defines the S3 bucket notification configuration for Trivy. It sets up an SQS queue as the notification target and specifies the events to trigger notifications.

LANGUAGE: yaml
CODE:
NotificationConfiguration:
  QueueConfigurations:
    - Event: s3:ObjectCreated:*
      Queue: arn:aws:sqs:region:account-id:queue-name

----------------------------------------

TITLE: Scanning Helm Chart with Inline Value Override in Trivy
DESCRIPTION: Demonstrates how to use Trivy to scan a Helm chart while overriding values inline. This command sets the securityContext.runAsUser to 0 for the mySql chart.

LANGUAGE: bash
CODE:
trivy config --helm-set securityContext.runAsUser=0 ./charts/mySql

----------------------------------------

TITLE: Extracting Findings Array from ASFF Report
DESCRIPTION: This command uses jq to extract the Findings array from the ASFF report, which is necessary for uploading to Security Hub.

LANGUAGE: bash
CODE:
cat report.asff | jq '.Findings'

----------------------------------------

TITLE: Running Trivy Completion Command for Zsh
DESCRIPTION: This snippet shows how to run the Trivy completion command for Zsh shell, displaying usage instructions and setup steps for shell completion.

LANGUAGE: bash
CODE:
$ trivy completion zsh -h
Generate the autocompletion script for the zsh shell.

If shell completion is not already enabled in your environment you will need
to enable it.  You can execute the following once:

	echo "autoload -U compinit; compinit" >> ~/.zshrc

To load completions in your current shell session:

	source <(trivy completion zsh); compdef _trivy trivy

To load completions for every new session, execute once:

#### Linux:

	trivy completion zsh > "${fpath[1]}/_trivy"

#### macOS:

	trivy completion zsh > $(brew --prefix)/share/zsh/site-functions/_trivy

You will need to start a new shell for this setup to take effect.

----------------------------------------

TITLE: Installing Jinja2 with Hash Verification
DESCRIPTION: Specifies Jinja2 version 3.0.0 with two SHA-256 hash values for package verification. The hashes ensure package integrity during installation.

LANGUAGE: python
CODE:
Jinja2 == 3.0.0 \
    --hash=sha256:2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824 \
    --hash=sha256:486ea46224d1bb4fb680f34f7c9ad96a8f24ec88be73ea8e5a6c65260e9cb8a7

----------------------------------------

TITLE: Defining Helm Value Overrides in YAML for Trivy Scanning
DESCRIPTION: Shows an example of a YAML file (overrides.yaml) used to override values in a Helm chart during Trivy scanning. This override sets the securityContext.runAsUser to 0.

LANGUAGE: yaml
CODE:
# Example override file (overrides.yaml)

securityContext:
  runAsUser: 0

----------------------------------------

TITLE: Uploading Findings to Security Hub
DESCRIPTION: This AWS CLI command uploads the extracted findings to Security Hub using the batch-import-findings API.

LANGUAGE: bash
CODE:
$ aws securityhub batch-import-findings --findings file://report.asff

----------------------------------------

TITLE: Deploying and Testing Kyverno Attestation Policy
DESCRIPTION: Commands for applying the Kyverno policy and testing it with signed and unsigned container images. Demonstrates successful deployment with properly attested images and failure with unattested images.

LANGUAGE: bash
CODE:
kubectl apply -f vuln-attestation.yaml

LANGUAGE: bash
CODE:
kubectl run app-signed --image= docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd

LANGUAGE: bash
CODE:
kubectl apply -f deployment.yaml -n app

LANGUAGE: bash
CODE:
kubectl run app-unsigned --image=docker.io/anaisurlichs/cns-website:0.1.1

----------------------------------------

TITLE: Specifying Python Package Dependencies
DESCRIPTION: This snippet defines two Python package dependencies with specific versions and extras. It uses the pip requirements format to specify pyjwt with the crypto extra and celery with redis and pytest extras.

LANGUAGE: Text
CODE:
pyjwt[crypto]==2.1.0
celery[redis, pytest]==4.4.7

----------------------------------------

TITLE: Scanning Terraform Plan JSON with Trivy
DESCRIPTION: Commands to convert a Terraform plan to JSON format and scan it using Trivy.

LANGUAGE: bash
CODE:
terraform show -json tfplan > tfplan.json
trivy config tfplan.json

----------------------------------------

TITLE: GitLab CI Job for Scanning Pre-built Container Images
DESCRIPTION: Configures a GitLab CI job to scan a pre-built container image from the GitLab container registry using Trivy. It handles authentication and generates vulnerability reports.

LANGUAGE: yaml
CODE:
container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts. See
    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - trivy --version
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json
  tags:
    - docker-runner

----------------------------------------

TITLE: Customizing ASFF Report Generation
DESCRIPTION: This command demonstrates how to use a custom ASFF template with Trivy. It requires AWS_REGION and AWS_ACCOUNT_ID environment variables to be set.

LANGUAGE: bash
CODE:
$ export AWS_REGION=us-west-1
$ export AWS_ACCOUNT_ID=123456789012
$ trivy image --format template --template "@your-asff.tpl" -o report.asff golang:1.12-alpine

----------------------------------------

TITLE: Displaying NSA Compliance Report Table in ASCII Format
DESCRIPTION: ASCII formatted table showing results of an NSA compliance scan with column headers for ID, Severity, Control Name, Status and Issues. Table contains two rows of compliance failures.

LANGUAGE: text
CODE:
Summary Report for compliance: NSA
┌─────┬──────────┬──────────────────────────────────┬────────┬────────┐
│ ID  │ Severity │           Control Name           │ Status │ Issues │
├─────┼──────────┼──────────────────────────────────┼────────┼────────┤
│ 1.0 │  MEDIUM  │ Non-root containers              │  FAIL  │   1    │
│ 1.1 │   LOW    │ Immutable container file systems │  FAIL  │   1    │
└─────┴──────────┴──────────────────────────────────┴────────┴────────┘

----------------------------------------

TITLE: Scanning Terraform with Value Overrides in Trivy
DESCRIPTION: Command to scan Terraform configurations with Trivy, using a tfvars file to override default values.

LANGUAGE: bash
CODE:
trivy config --tf-vars dev.terraform.tfvars ./infrastructure/tf

----------------------------------------

TITLE: Installing Trivy-Operator with FluxCD CLI
DESCRIPTION: These commands create a namespace for Trivy, add the Helm repository source, and create a HelmRelease for the Trivy-Operator using FluxCD.

LANGUAGE: bash
CODE:
> kubectl create ns trivy-system
> flux create source helm trivy-operator --url https://aquasecurity.github.io/helm-charts --namespace trivy-system
> flux create helmrelease trivy-operator --chart trivy-operator
  --source HelmRepository/trivy-operator
  --chart-version 0.0.3
  --namespace trivy-system

----------------------------------------

TITLE: Generating ASFF Report with Trivy
DESCRIPTION: This command generates an ASFF report for a Docker image using Trivy. It requires AWS_REGION and AWS_ACCOUNT_ID environment variables to be set.

LANGUAGE: bash
CODE:
$ AWS_REGION=us-west-1 AWS_ACCOUNT_ID=123456789012 trivy image --format template --template "@contrib/asff.tpl" -o report.asff golang:1.12-alpine

----------------------------------------

TITLE: Configuring Metrics Server Container in Kubernetes Deployment
DESCRIPTION: This YAML snippet defines the container configuration for the Metrics Server in a Kubernetes Deployment. It specifies the container image, pull policy, and volume mounts. The configuration lacks security context settings for privilege escalation and capability dropping.

LANGUAGE: yaml
CODE:
- image: rancher/metrics-server:v0.3.6
  imagePullPolicy: IfNotPresent
  name: metrics-server
  resources: {}
  terminationMessagePath: /dev/termination-log
  terminationMessagePolicy: File
  volumeMounts:
    - mountPath: /tmp
      name: tmp-dir

----------------------------------------

TITLE: Excluding Downloaded Terraform Modules in Trivy Scan
DESCRIPTION: Command to scan Terraform configurations with Trivy while excluding downloaded modules from the scan.

LANGUAGE: bash
CODE:
trivy config --tf-exclude-downloaded-modules ./configs

----------------------------------------

TITLE: Defining Allowed Container Images
DESCRIPTION: Creates a list of allowed container images that will be used in the custom check to verify if the images used in the Dockerfile are permitted.

LANGUAGE: rego
CODE:
allowed_images :=  {
    ["node:21-alpine3.19", "as", "build-deps"],
    ["nginx:1.2"]
}

----------------------------------------

TITLE: Configuring AWS S3 Bucket Versioning in Terraform
DESCRIPTION: This snippet configures versioning for the AWS S3 bucket. It allows enabling or disabling versioning based on the provided variable.

LANGUAGE: hcl
CODE:
resource "aws_s3_bucket_versioning" "this" {
  count  = var.versioning_enabled ? 1 : 0
  bucket = aws_s3_bucket.this.id

  versioning_configuration {
    status = "Enabled"
  }
}

----------------------------------------

TITLE: Terraform Configuration with For_Each and Count Limitations
DESCRIPTION: Example Terraform configuration demonstrating limitations in scanning plans with 'for_each' and 'count' objects due to incomplete reference information.

LANGUAGE: hcl
CODE:
locals {
  buckets = toset(["test"])
}

resource "aws_s3_bucket" "this" {
  for_each = local.buckets
  bucket = each.key
}

resource "aws_s3_bucket_acl" "this" {
  for_each = local.buckets
  bucket = aws_s3_bucket.this[each.key].id
  acl    = "private"
}

----------------------------------------

TITLE: JSON Format Scan
DESCRIPTION: Command to perform a scan with JSON output format

LANGUAGE: bash
CODE:
trivy config -f json terraform-infra

----------------------------------------

TITLE: Listing VEX Repositories (Bash)
DESCRIPTION: Command to list configured VEX repositories in Trivy, showing the config file path and repository details.

LANGUAGE: bash
CODE:
$ trivy vex repo list

----------------------------------------

TITLE: Retrieving MySQL Administrator Credentials
DESCRIPTION: This bash snippet demonstrates how to retrieve the MySQL root password from a Kubernetes secret.

LANGUAGE: bash
CODE:
echo Username: root
MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "mysql.secretName" . }} -o jsonpath="{.data.mysql-root-password}" | base64 --decode)

----------------------------------------

TITLE: IaC File Pattern Support Table
DESCRIPTION: A markdown table defining the mapping between configuration types and their supported file patterns in Trivy's IaC scanner.

LANGUAGE: markdown
CODE:
| Config type                         | File patterns                    |
|-------------------------------------|----------------------------------|
| [Kubernetes](kubernetes.md)         | *.yml, *.yaml, *.json         |
| [Docker](docker.md)                 | Dockerfile, Containerfile        |
| [Terraform](terraform.md)           | *.tf, *.tf.json, *.tfvars     |
| [Terraform Plan](terraform.md)      | tfplan, *.tfplan, *.json       |
| [CloudFormation](cloudformation.md) | *.yml, *.yaml, *.json         |
| [Azure ARM Template](azure-arm.md)  | *.json                          |
| [Helm](helm.md)                     | *.yaml, *.tpl, *.tar.gz, etc. |
| [YAML][json-and-yaml]               | *.yaml, *.yml                  |
| [JSON][json-and-yaml]               | *.json                          |

----------------------------------------

TITLE: Output to SARIF File
DESCRIPTION: Command to save scan results to a SARIF file

LANGUAGE: bash
CODE:
trivy config -f sarif -o example.sarif terraform-infra

----------------------------------------

TITLE: Enabling VEX Repository in Trivy Scan
DESCRIPTION: This command demonstrates how to enable the VEX Repository method when scanning an image with Trivy. It uses the '--vex repo' option to specify the VEX method.

LANGUAGE: bash
CODE:
$ trivy image ghcr.io/aquasecurity/trivy:0.52.0 --vex repo

----------------------------------------

TITLE: Exporting Conda Package Definitions for Trivy Tests
DESCRIPTION: Copies specific conda package definition files from the container to the host machine. These files are used for testing the dependency parser in Trivy.

LANGUAGE: bash
CODE:
docker cp miniconda:/opt/conda/envs/test-dep-parser/conda-meta/_libgcc_mutex-0.1-main.json .
docker cp miniconda:/opt/conda/envs/test-dep-parser/conda-meta/libgomp-11.2.0-h1234567_1.json .

----------------------------------------

TITLE: Defining Trivy Plugin Index Entry in YAML
DESCRIPTION: This YAML snippet shows the structure of an entry in the Trivy plugin index. It specifies the plugin name and its repository location for distribution.

LANGUAGE: yaml
CODE:
name: referrer
repository: github.com/aquasecurity/trivy-plugin-referrer

----------------------------------------

TITLE: Updating Go Version in Project
DESCRIPTION: Command to update the Go version in a project's go.mod file. This is recommended for better vulnerability detection in newer Go versions.

LANGUAGE: shell
CODE:
$ go mod tidy -go=1.18

----------------------------------------

TITLE: Testing Custom Checks with Go Table-Driven Tests
DESCRIPTION: A Go table-driven test example that demonstrates how to test custom security checks against Dockerfile configurations. The test verifies both allowed and denied configurations for exposed ports.

LANGUAGE: go
CODE:
{
	name:  "disallowed ports",
	input: "configs/",
	fields: fields{
		policyPaths: []string{"policy"},
		dataPaths:   []string{"data"},
		namespaces:  []string{"user"},
	},
	want: []types.Misconfiguration{
		{
			FileType: types.Dockerfile,
			FilePath: "Dockerfile.allowed",
			Successes: types.MisconfResults{
				{
					Namespace: "user.dockerfile.ID002",
					PolicyMetadata: types.PolicyMetadata{
						ID:          "ID002",
						Type:        "Docker Custom Check",
						Title:       "Disallowed ports exposed",
						Severity:    "HIGH",
					},
				},
			},
		},
		{
			FileType: types.Dockerfile,
			FilePath: "Dockerfile.denied",
			Failures: types.MisconfResults{
				{
					Namespace: "user.dockerfile.ID002",
					Message:   "Port 23 should not be exposed",
					PolicyMetadata: types.PolicyMetadata{
						ID:          "ID002",
						Type:        "Docker Custom Check",
						Title:       "Disallowed ports exposed",
						Severity:    "HIGH",
					},
				},
			},
		},
	},
}

----------------------------------------

TITLE: Starting Miniconda Container for Trivy Test Files
DESCRIPTION: Launches a miniconda container using Docker with a specific image SHA. This container will be used to set up the test environment.

LANGUAGE: bash
CODE:
docker run --name miniconda --rm -it continuumio/miniconda3@sha256:58b1c7df8d69655ffec017ede784a075e3c2e9feff0fc50ef65300fc75aa45ae bash

----------------------------------------

TITLE: Using Trivy Plugins
DESCRIPTION: Examples of how to use installed plugins, including usage with kubectl and environment variables.

LANGUAGE: bash
CODE:
$ trivy kubectl deployment <deployment-id> -- --ignore-unfixed --severity CRITICAL

LANGUAGE: bash
CODE:
$ TRIVY_RUN_AS_PLUGIN=kubectl trivy job your-job -- --format json

----------------------------------------

TITLE: Composer File Support Configuration
DESCRIPTION: Overview of supported Composer files and their scanning capabilities. Composer.lock requires composer.json for accurate dependency tree visualization. Installed.json is typically found at vendor/composer/installed.json.

LANGUAGE: markdown
CODE:
| Package manager | File           | Transitive dependencies | Dev dependencies | Dependency graph | Position |
|-----------------|----------------|:-----------------------:|:----------------:|:----------------:|:--------:|
| Composer        | composer.lock  |            ✓            |     Excluded     |         ✓        |    ✓     |
| Composer        | installed.json |            ✓            |     Excluded     |         -        |    ✓     |

----------------------------------------

TITLE: Defining Rego Policy with Multiple Custom Schemas
DESCRIPTION: Example of a Rego policy that references multiple custom schemas for input validation.

LANGUAGE: rego
CODE:
# METADATA
# schemas:
# - input: schema["fooschema"]
# - input: schema["barschema"]
package mypackage

deny {
    input.evil == "foo bar"
}

----------------------------------------

TITLE: Installing Trivy with Helm Basic Command
DESCRIPTION: Simple command to install Trivy scanner with namespace creation

LANGUAGE: bash
CODE:
$ helm install trivy . --namespace trivy --create-namespace

----------------------------------------

TITLE: Displaying Options for Trivy Plugin Command
DESCRIPTION: Shows the available options for the 'trivy plugin' command, including the help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for plugin

----------------------------------------

TITLE: Generating SBOM from RPM Archives using Trivy
DESCRIPTION: Demonstrates how to generate a CycloneDX SBOM from RPM archives using Trivy's experimental RPM archive feature. This command analyzes RPM files and outputs the results in CycloneDX format.

LANGUAGE: shell
CODE:
TRIVY_EXPERIMENTAL_RPM_ARCHIVE=true trivy fs ./rpms --format cyclonedx --output rpms.cdx.json

----------------------------------------

TITLE: Defining Rego Policy with Dockerfile Schema
DESCRIPTION: Example of a Rego policy that includes a reference to a Dockerfile schema for input validation.

LANGUAGE: rego
CODE:
# METADATA
# schemas:
# - input: schema["dockerfile"]
package mypackage

deny {
    input.evil == "foo bar"
}

----------------------------------------

TITLE: Installing Spring4Shell Module from GHCR
DESCRIPTION: Command to install the Spring4Shell module from GitHub Container Registry using Trivy's module installer.

LANGUAGE: bash
CODE:
$ trivy module install ghcr.io/aquasecurity/trivy-module-spring4shell
2022-06-13T15:32:21.972+0300    INFO    Installing the module from ghcr.io/aquasecurity/trivy-module-spring4shell...

----------------------------------------

TITLE: Basic Trivy Convert Command Syntax
DESCRIPTION: Shows the basic syntax for the trivy convert command which requires a JSON result file as input.

LANGUAGE: bash
CODE:
trivy convert [flags] RESULT_JSON

----------------------------------------

TITLE: Custom Kubernetes Deployment Check in Rego
DESCRIPTION: Example Rego policy that checks for and denies Kubernetes Deployments. Includes metadata configuration, package definition, and deny rule implementation.

LANGUAGE: rego
CODE:
# METADATA
# title: Deployment not allowed
# description: Deployments are not allowed because of some reasons.
# schemas:
#   - input: schema["kubernetes"]
# custom:
#   id: ID001
#   severity: LOW
#   input:
#     selector: 
#     - type: kubernetes
package user.kubernetes.ID001

deny[res] {
    input.kind == "Deployment"
    msg := sprintf("Found deployment '%s' but deployments are not allowed", [input.metadata.name])
    res := result.new(msg, input.kind)
}

----------------------------------------

TITLE: Verifying Attestation with Keypair
DESCRIPTION: Verifies an attestation using a previously generated Cosign public key.

LANGUAGE: bash
CODE:
cosign verify-attestation --key cosign.pub --type vuln anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd

----------------------------------------

TITLE: Installing Trivy Plugin Examples
DESCRIPTION: Examples demonstrating different ways to install Trivy plugins, including from plugin index, specific versions, and URLs.

LANGUAGE: bash
CODE:
  # Install a plugin from the plugin index
  $ trivy plugin install referrer

  # Specify the version of the plugin to install
  $ trivy plugin install referrer@v0.3.0

  # Install a plugin from a URL
  $ trivy plugin install github.com/aquasecurity/trivy-plugin-referrer

----------------------------------------

TITLE: Trivy Convert Command Options
DESCRIPTION: Lists all available options for the trivy convert command including format specifications, severity filters, and output controls.

LANGUAGE: bash
CODE:
      --compliance string          compliance report to generate
      --dependency-tree            [EXPERIMENTAL] show dependency origin tree of vulnerable packages
      --exit-code int              specify exit code when any security issues are found
      --exit-on-eol int            exit with the specified code when the OS reaches end of service/life
  -f, --format string              format
                                   Allowed values:
                                     - table
                                     - json
                                     - template
                                     - sarif
                                     - cyclonedx
                                     - spdx
                                     - spdx-json
                                     - github
                                     - cosign-vuln
                                    (default "table")
  -h, --help                       help for convert
      --ignore-policy string       specify the Rego file path to evaluate each vulnerability
      --ignorefile string          specify .trivyignore file (default ".trivyignore")
      --list-all-pkgs              output all packages in the JSON report regardless of vulnerability
  -o, --output string              output file name
      --output-plugin-arg string   [EXPERIMENTAL] output plugin arguments
      --report string              specify a report format for the output (allowed values: all,summary) (default "all")
      --scanners strings           List of scanners included when generating the json report. Used only for rendering the summary table. (allowed values: vuln,misconfig,secret,license)
  -s, --severity strings           severities of security issues to be displayed
                                   Allowed values:
                                     - UNKNOWN
                                     - LOW
                                     - MEDIUM
                                     - HIGH
                                     - CRITICAL
                                    (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])
      --show-suppressed            [EXPERIMENTAL] show suppressed vulnerabilities
      --table-mode strings         [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])
  -t, --template string            output template

----------------------------------------

TITLE: Defining Allowed Services in YAML Data File
DESCRIPTION: Example YAML configuration defining an allowed list of service ports and protocols that can be referenced in Rego policies.

LANGUAGE: yaml
CODE:
services:
  ports:
    - "20"
    - "20/tcp"
    - "20/udp"
    - "23"
    - "23/tcp"

----------------------------------------

TITLE: Verifying Attestation without Keypair
DESCRIPTION: Verifies an attestation using certificate-based authentication with GitHub/Google/Microsoft credentials.

LANGUAGE: bash
CODE:
cosign verify-attestation --type vuln --certificate-identity Email-used-to-sign  --certificate-oidc-issuer='the-issuer-used' docker.io/DockerHubID/imagename:imageSHA

----------------------------------------

TITLE: Trivy Plugin Install Command Options
DESCRIPTION: Available command-line options specific to the plugin install command.

LANGUAGE: bash
CODE:
  -h, --help   help for install

----------------------------------------

TITLE: Inherited Command Options
DESCRIPTION: Options inherited from parent commands that apply to all Trivy operations.

LANGUAGE: text
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Generating and Customizing Trivy Configuration
DESCRIPTION: These commands demonstrate how to generate a default Trivy configuration file and customize it for license classification.

LANGUAGE: shell
CODE:
trivy image --generate-default-config

LANGUAGE: shell
CODE:
vim trivy.yaml

----------------------------------------

TITLE: Generating Cosign Keypair
DESCRIPTION: Generates a new keypair for signing container images and attestations with Cosign.

LANGUAGE: bash
CODE:
cosign generate-key-pair

----------------------------------------

TITLE: Trivy Global Command Options
DESCRIPTION: Inherited global command-line options available for all Trivy commands, including cache, config, debug, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Displaying Inherited Options for Trivy Module Command
DESCRIPTION: This code block lists the options inherited from parent commands when using the 'trivy module' command. It includes options for cache directory, configuration, debug mode, insecure connections, quiet mode, timeout, and version display.

LANGUAGE: plaintext
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: License Scanning with Custom Confidence Level in Trivy
DESCRIPTION: These commands show how to adjust the confidence level for license detection in Trivy, demonstrating the difference in results between the default level (0.9) and a lower level (0.8).

LANGUAGE: shell
CODE:
trivy fs --scanners license --license-full <path/to/spdx/list/data>

LANGUAGE: shell
CODE:
trivy fs --scanners license --license-full --license-confidence-level 0.8 <path/to/spdx/list/data>

----------------------------------------

TITLE: Generating Vulnerability Attestation
DESCRIPTION: Creates and uploads a vulnerability scan attestation for a container image using the scan results.

LANGUAGE: bash
CODE:
cosign attest --predicate scan.json --type vuln docker.io/DockerHubID/imagename:imageSHA

----------------------------------------

TITLE: Trivy Plugin Info Command Options
DESCRIPTION: Lists the command-specific options available for the plugin info command.

LANGUAGE: bash
CODE:
  -h, --help   help for info

----------------------------------------

TITLE: Trivy Module Install - Help Options
DESCRIPTION: Available help flags specific to the install command.

LANGUAGE: bash
CODE:
  -h, --help   help for install

----------------------------------------

TITLE: Pulling Trivy DB with ORAS in Shell
DESCRIPTION: Uses ORAS to pull the Trivy database container archive and extract it to reveal the db files.

LANGUAGE: shell
CODE:
oras pull ghcr.io/aquasecurity/trivy-db:2

LANGUAGE: shell
CODE:
tar -xzf db.tar.gz

----------------------------------------

TITLE: Running Custom Check with Trivy
DESCRIPTION: Executes the Trivy misconfiguration scan using the custom Rego check. This command scans a Dockerfile using the specified custom check and namespace.

LANGUAGE: bash
CODE:
trivy fs --scanners misconf --config-check ./docker-check.rego --namespaces custom ./Dockerfile

----------------------------------------

TITLE: Executing Trivy Plugin List Command
DESCRIPTION: This command lists all installed plugins for Trivy. It does not require any additional arguments.

LANGUAGE: bash
CODE:
trivy plugin list

----------------------------------------

TITLE: Trivy Module Install - Inherited Options
DESCRIPTION: Global configuration options inherited from parent commands, including cache settings, debug mode, module configuration, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --enable-modules strings    [EXPERIMENTAL] module names to enable
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
      --module-dir string         specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Building a Trivy Module in Go
DESCRIPTION: Commands to build a Trivy module as a WebAssembly binary.

LANGUAGE: bash
CODE:
$ GOOS=wasip1 GOARCH=wasm go build -o wordpress.wasm -buildmode=c-shared wordpress.go
$ mkdir -p ~/.trivy/modules
$ cp wordpress.wasm ~/.trivy/modules

----------------------------------------

TITLE: Implementing Custom Check Logic
DESCRIPTION: Defines the deny rule that checks if the container images used in the Dockerfile are allowed. It iterates through the Dockerfile commands, identifies 'FROM' commands, and compares the image values against the allowed_images list.

LANGUAGE: rego
CODE:
deny[msg] {
    input.Stages[m].Commands[l].Cmd == "from"
    val := input.Stages[m].Commands[l].Value
    not val in allowed_images
    msg := sprintf("The container image '%s' used in the Dockerfile is not allowed", val)
}

----------------------------------------

TITLE: Trivy Plugin Run Command-Specific Options
DESCRIPTION: Lists the options specific to the 'trivy plugin run' command. Currently, it only includes the help option.

LANGUAGE: plaintext
CODE:
  -h, --help   help for run

----------------------------------------

TITLE: Executing Trivy Module Uninstall Command
DESCRIPTION: This snippet shows the basic syntax for running the 'trivy module uninstall' command. It requires specifying the REPOSITORY of the module to be uninstalled.

LANGUAGE: plaintext
CODE:
trivy module uninstall [flags] REPOSITORY

----------------------------------------

TITLE: Configuring AWS S3 Bucket Lifecycle Rules in Terraform
DESCRIPTION: This snippet sets up lifecycle rules for the AWS S3 bucket. It allows configuring multiple rules with options for transitions, expirations, and noncurrent version management.

LANGUAGE: hcl
CODE:
resource "aws_s3_bucket_lifecycle_configuration" "this" {
  count  = length(var.lifecycle_rules) > 0 ? 1 : 0
  bucket = aws_s3_bucket.this.id

  dynamic "rule" {
    for_each = var.lifecycle_rules

    content {
      id     = try(rule.value.id, null)
      status = try(rule.value.status, "Enabled")

      # ... (additional configuration options)
    }
  }
}

----------------------------------------

TITLE: Configuring Travis CI for Trivy Vulnerability Scanning
DESCRIPTION: This YAML configuration sets up a Travis CI pipeline to build a Docker image and scan it using Trivy. It installs the latest version of Trivy, runs scans with different severity thresholds, and caches Trivy's database for faster subsequent runs.

LANGUAGE: yaml
CODE:
services:
  - docker

env:
  global:
    - COMMIT=${TRAVIS_COMMIT::8}

before_install:
  - docker build -t trivy-ci-test:${COMMIT} .
  - export VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
  - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
  - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
script:
  - ./trivy image --exit-code 0 --severity HIGH --no-progress trivy-ci-test:${COMMIT}
  - ./trivy image --exit-code 1 --severity CRITICAL --no-progress trivy-ci-test:${COMMIT}
cache:
  directories:
    - $HOME/.cache/trivy

----------------------------------------

TITLE: Executing Trivy Plugin Search Command
DESCRIPTION: The basic syntax for running the 'trivy plugin search' command. It allows searching for Trivy plugins using an optional keyword.

LANGUAGE: bash
CODE:
trivy plugin search [KEYWORD]

----------------------------------------

TITLE: Trivy Plugin List Command Options
DESCRIPTION: This snippet shows the options specific to the 'list' command. Currently, it only includes a help option.

LANGUAGE: plaintext
CODE:
  -h, --help   help for list

----------------------------------------

TITLE: Setting Up AWS S3 Bucket Server-Side Encryption in Terraform
DESCRIPTION: This snippet configures server-side encryption for the AWS S3 bucket. It allows specifying the encryption algorithm and KMS key ID if applicable.

LANGUAGE: hcl
CODE:
resource "aws_s3_bucket_server_side_encryption_configuration" "this" {
  count  = var.sse_algorithm != "" ? 1 : 0
  bucket = aws_s3_bucket.this.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = var.sse_algorithm
      kms_master_key_id = var.kms_master_key_id
    }
  }
}

----------------------------------------

TITLE: Enabling VEX Repository in Trivy (Bash)
DESCRIPTION: Command to enable VEX repository usage in Trivy. This creates a default repository configuration file if it doesn't exist.

LANGUAGE: bash
CODE:
$ trivy image ghcr.io/aquasecurity/trivy:0.52.0 --vex repo

----------------------------------------

TITLE: Trivy Plugin Upgrade Command Options in Markdown
DESCRIPTION: This snippet lists the specific options available for the 'trivy plugin upgrade' command. Currently, it only includes the help option.

LANGUAGE: markdown
CODE:
```
  -h, --help   help for upgrade
```

----------------------------------------

TITLE: Inherited Options for Trivy Plugin Commands
DESCRIPTION: This snippet lists the options inherited from parent commands. These options can be used with the 'trivy plugin list' command and include settings for cache directory, config path, debug mode, and more.

LANGUAGE: plaintext
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Upgrading MySQL Helm Chart
DESCRIPTION: This bash snippet demonstrates how to upgrade the MySQL Helm chart while preserving the root password.

LANGUAGE: bash
CODE:
ROOT_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }} -o jsonpath="{.data.mysql-root-password}" | base64 --decode)
helm upgrade --namespace {{ .Release.Namespace }} {{ .Release.Name }} bitnami/mysql --set auth.rootPassword=$ROOT_PASSWORD

----------------------------------------

TITLE: Trivy Commands for Using VEX Attestations
DESCRIPTION: Commands for scanning container images with VEX attestations using Trivy, including options to show suppressed vulnerabilities.

LANGUAGE: bash
CODE:
$ trivy image --vex oci <IMAGE>
$ trivy image --vex oci --show-suppressed <IMAGE>

----------------------------------------

TITLE: Inherited Options for Trivy Plugin Commands in Markdown
DESCRIPTION: This snippet lists the options inherited from parent commands that are also available when using the 'trivy plugin upgrade' command. These options include settings for cache directory, config path, debug mode, and more.

LANGUAGE: markdown
CODE:
```
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version
```

----------------------------------------

TITLE: Running Trivy Plugin Command Usage
DESCRIPTION: Demonstrates the basic usage syntax for running a Trivy plugin. The command accepts a plugin name, URL, or file path as an argument.

LANGUAGE: plaintext
CODE:
trivy plugin run NAME | URL | FILE_PATH

----------------------------------------

TITLE: Accessing MySQL Prometheus Metrics
DESCRIPTION: This bash snippet shows how to access MySQL Prometheus metrics from outside the Kubernetes cluster using port forwarding.

LANGUAGE: bash
CODE:
kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ printf "%s-metrics" (include "common.names.fullname" .) }} {{ .Values.metrics.service.port }}:{{ .Values.metrics.service.port }} &
curl http://127.0.0.1:{{ .Values.metrics.service.port }}/metrics

----------------------------------------

TITLE: Cosign Commands for VEX Attestation
DESCRIPTION: Commands for generating and attaching VEX attestations to container images using Cosign.

LANGUAGE: bash
CODE:
$ cosign attest --predicate oci.openvex.json --type openvex <IMAGE>

----------------------------------------

TITLE: Implementing Deny Rule for Combined Configuration Analysis in Trivy
DESCRIPTION: Shows how to implement a deny rule when operating in combine mode. The rule must return an object containing the filepath and message for any identified issues across the combined configuration files.

LANGUAGE: rego
CODE:
deny[res] {
    resource := input[i].contents
    ... some logic ...

    res := {
        "filepath": input[i].path,
        "msg": "something bad",
    }
}

----------------------------------------

TITLE: Basic Plugin Uninstall Command
DESCRIPTION: Basic command syntax for uninstalling a Trivy plugin where PLUGIN_NAME is the name of the plugin to be removed.

LANGUAGE: bash
CODE:
trivy plugin uninstall PLUGIN_NAME

----------------------------------------

TITLE: Connecting to MySQL Database in Kubernetes
DESCRIPTION: This snippet provides instructions for connecting to the MySQL database within the Kubernetes cluster, including running a client pod and connecting to primary and secondary services.

LANGUAGE: bash
CODE:
kubectl run {{ include "common.names.fullname" . }}-client --rm --tty -i --restart='Never' --image  {{ template "mysql.image" . }} --namespace {{ .Release.Namespace }} --command -- bash

mysql -h {{ include "mysql.primary.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} -uroot -p"$MYSQL_ROOT_PASSWORD"

mysql -h {{ include "mysql.secondary.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }} -uroot -p"$MYSQL_ROOT_PASSWORD"

----------------------------------------

TITLE: Package URL (PURL) Format Examples for OCI Images
DESCRIPTION: Examples showing the correct PURL format for specifying product IDs in VEX documents for container images.

LANGUAGE: text
CODE:
pkg:oci/trivy?repository_url=ghcr.io/aquasecurity/trivy

LANGUAGE: text
CODE:
pkg:oci/trivy@sha256:5bd5ab35814f86783561603ebb35d5d5d99006dcdcd5c3f828ea1afb4c12d159?repository_url=ghcr.io/aquasecurity/trivy

----------------------------------------

TITLE: Running Trivy with Custom Data Files
DESCRIPTION: Command line example showing how to run Trivy with custom data files using the --data flag for policy evaluation.

LANGUAGE: bash
CODE:
trivy config --config-check ./checks --data ./data --namespaces user ./configs

----------------------------------------

TITLE: Trivy Plugin Update Inherited Options
DESCRIPTION: Options inherited from parent commands that can be used with the plugin update command. Includes configuration for cache directory, debug mode, timeout settings, and other global options.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Using Bitnami Common Library Chart in Kubernetes ConfigMap
DESCRIPTION: This snippet demonstrates how to use a helper function from the Bitnami Common Library Chart to generate a ConfigMap name in a Kubernetes manifest.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}
data:
  myvalue: "Hello World"

----------------------------------------

TITLE: Creating CycloneDX VEX Document
DESCRIPTION: Example of creating a CycloneDX VEX document for vulnerability filtering.

LANGUAGE: bash
CODE:
$ cat <<EOF > trivy.vex.cdx
{
  "bomFormat": "CycloneDX",
  "specVersion": "1.5",
  "version": 1,
  "vulnerabilities": [
    {
      "id": "CVE-2020-8911",
      "analysis": {
        "state": "not_affected",
        "justification": "code_not_reachable",
        "response": ["will_not_fix", "update"],
        "detail": "The vulnerable function is not called"
      },
      "affects": [
        {
          "ref": "urn:cdx:3e671687-395b-41f5-a30f-a58921a69b79/1#pkg:golang/github.com/aws/aws-sdk-go@v1.44.234"
        }
      ]
    }
  ]
}
EOF

----------------------------------------

TITLE: Defining Basic Rego Policy without Schema
DESCRIPTION: Example of a simple Rego policy without an input schema definition.

LANGUAGE: rego
CODE:
# METADATA
package mypackage

deny {
    input.evil == "foo bar"
}

----------------------------------------

TITLE: Using Trivy Plugin Upgrade Command in Shell
DESCRIPTION: This command upgrades installed Trivy plugins to newer versions. It can upgrade specific plugins by providing their names as arguments, or upgrade all plugins if no names are specified.

LANGUAGE: shell
CODE:
trivy plugin upgrade [PLUGIN_NAMES]

----------------------------------------

TITLE: Basic Secret Assignment
DESCRIPTION: Simple secret value assignment using key-value format.

LANGUAGE: plaintext
CODE:
secret="othervalue"

----------------------------------------

TITLE: Scanning with Custom Rekor URL
DESCRIPTION: Shows how to specify a custom Rekor instance URL when scanning SBOM attestations.

LANGUAGE: bash
CODE:
$ trivy image --sbom-sources rekor --rekor-url https://my-rekor.dev otms61/alpine:3.7.3

----------------------------------------

TITLE: RDS Public Access Policy with Input Selector
DESCRIPTION: A Rego policy example that uses input selectors to ensure the policy only runs on AWS RDS instances. The policy checks if RDS instances are publicly accessible.

LANGUAGE: rego
CODE:
# METADATA
# title: "RDS Publicly Accessible"
# description: "Ensures RDS instances are not launched into the public cloud."
# custom:
#   input:
#     selector:
#     - type: cloud
#       subtypes:
#         - provider: aws
#           service: rds
package builtin.aws.rds.aws0999

deny[res] {
instance := input.aws.rds.instances[_]
instance.publicaccess.value
res := result.new("Instance has Public Access enabled", instance.publicaccess)

----------------------------------------

TITLE: Trivy Registry Login Options
DESCRIPTION: Available command-line options specific to the login command.

LANGUAGE: bash
CODE:
  -h, --help               help for login
      --password strings   password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.
      --password-stdin     password from stdin. Comma-separated passwords are not supported.
      --username strings   username. Comma-separated usernames allowed.

----------------------------------------

TITLE: Generic Secret Pattern
DESCRIPTION: Example showing a generic secret pattern with key-value format.

LANGUAGE: plaintext
CODE:
generic secret line secret="somevalue"

----------------------------------------

TITLE: Scanning Container Image SBOM from Rekor
DESCRIPTION: Example of scanning a container image's SBOM attestation stored in Rekor using Trivy. Shows how to use the --sbom-sources flag to scan vulnerabilities from SBOM stored in Rekor.

LANGUAGE: bash
CODE:
$ trivy image --sbom-sources rekor otms61/alpine:3.7.3

----------------------------------------

TITLE: Testing Dockerfile ADD Command Check with Rego
DESCRIPTION: A Rego test case that verifies a custom rule (ID002) which checks for improper usage of ADD commands in Dockerfiles. The test ensures the rule correctly identifies when ADD is used instead of the recommended COPY command.

LANGUAGE: rego
CODE:
package user.dockerfile.ID002

test_add_denied {
    r := deny with input as {"stages": {"alpine:3.13": [
        {"Cmd": "add", "Value": ["/target/resources.tar.gz", "resources.jar"]},
        {"Cmd": "add", "Value": ["/target/app.jar", "app.jar"]},
    ]}}

    count(r) == 1
    r[_] == "Consider using 'COPY /target/app.jar app.jar' command instead of 'ADD /target/app.jar app.jar'"
}

----------------------------------------

TITLE: Registry Logout Example
DESCRIPTION: Example showing how to log out of a specific container registry using its domain name.

LANGUAGE: bash
CODE:
trivy registry logout reg.example.com

----------------------------------------

TITLE: Setting Grafana Token as Environment Variable in Bash
DESCRIPTION: This snippet demonstrates how to set a Grafana authentication token as an environment variable in Bash. It includes two different formats for setting the token, one with quotes and one without.

LANGUAGE: Bash
CODE:
GRAFANA_TOKEN="eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbkT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk"
GRAFANA_TOKEN=eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbkT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk

----------------------------------------

TITLE: Running Trivy Config Scan with Trace Output
DESCRIPTION: This command runs a Trivy configuration scan on the 'configs/' directory with the --trace flag enabled. It generates a detailed trace of the policy evaluation process, useful for debugging complex queries or learning Rego.

LANGUAGE: shell
CODE:
$ trivy config --trace configs/

----------------------------------------

TITLE: Inherited Trivy Command Options
DESCRIPTION: Shows the global options inherited from parent commands that can be used with the convert command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Trivy SBOM Command Options
DESCRIPTION: Comprehensive list of available options for the 'trivy sbom' command, including caching, compliance, custom headers, database settings, detection priorities, output formats, and various scanning configurations.

LANGUAGE: bash
CODE:
      --cache-backend string           [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "memory")
      --cache-ttl duration             cache TTL when using redis as cache backend
      --compliance string              compliance report to generate
      --custom-headers strings         custom headers in client mode
      --db-repository strings          OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])
      --detection-priority string      specify the detection priority:
                                         - "precise": Prioritizes precise by minimizing false positives.
                                         - "comprehensive": Aims to detect more security findings at the cost of potential false positives.
                                        (allowed values: precise,comprehensive) (default "precise")
      --distro string                  [EXPERIMENTAL] specify a distribution, <family>/<version>
      --download-db-only               download/update vulnerability database but don't run a scan
      --download-java-db-only          download/update Java index database but don't run a scan
      --exit-code int                  specify exit code when any security issues are found
      --exit-on-eol int                exit with the specified code when the OS reaches end of service/life
      --file-patterns strings          specify config file patterns
  -f, --format string                  format
                                       Allowed values:
                                         - table
                                         - json
                                         - template
                                         - sarif
                                         - cyclonedx
                                         - spdx
                                         - spdx-json
                                         - github
                                         - cosign-vuln
                                        (default "table")
  -h, --help                           help for sbom
      --ignore-policy string           specify the Rego file path to evaluate each vulnerability
      --ignore-status strings          comma-separated list of vulnerability status to ignore
                                       Allowed values:
                                         - unknown
                                         - not_affected
                                         - affected
                                         - fixed
                                         - under_investigation
                                         - will_not_fix
                                         - fix_deferred
                                         - end_of_life
      --ignore-unfixed                 display only fixed vulnerabilities
      --ignored-licenses strings       specify a list of license to ignore
      --ignorefile string              specify .trivyignore file (default ".trivyignore")
      --java-db-repository strings     OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])
      --list-all-pkgs                  output all packages in the JSON report regardless of vulnerability
      --no-progress                    suppress progress bar
      --offline-scan                   do not issue API requests to identify dependencies
  -o, --output string                  output file name
      --output-plugin-arg string       [EXPERIMENTAL] output plugin arguments
      --password strings               password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.
      --password-stdin                 password from stdin. Comma-separated passwords are not supported.
      --pkg-relationships strings      list of package relationships
                                       Allowed values:
                                         - unknown
                                         - root
                                         - workspace
                                         - direct
                                         - indirect
                                        (default [unknown,root,workspace,direct,indirect])
      --pkg-types strings              list of package types (allowed values: os,library) (default [os,library])
      --redis-ca string                redis ca file location, if using redis as cache backend
      --redis-cert string              redis certificate file location, if using redis as cache backend
      --redis-key string               redis key file location, if using redis as cache backend
      --redis-tls                      enable redis TLS with public certificates, if using redis as cache backend
      --registry-token string          registry token
      --rekor-url string               [EXPERIMENTAL] address of rekor STL server (default "https://rekor.sigstore.dev")
      --sbom-sources strings           [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)
      --scanners strings               comma-separated list of what security issues to detect (allowed values: vuln,license) (default [vuln])
      --server string                  server address in client mode
  -s, --severity strings               severities of security issues to be displayed
                                       Allowed values:
                                         - UNKNOWN
                                         - LOW
                                         - MEDIUM
                                         - HIGH
                                         - CRITICAL
                                        (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])
      --show-suppressed                [EXPERIMENTAL] show suppressed vulnerabilities
      --skip-db-update                 skip updating vulnerability database
      --skip-dirs strings              specify the directories or glob patterns to skip
      --skip-files strings             specify the files or glob patterns to skip
      --skip-java-db-update            skip updating Java index database
      --skip-vex-repo-update           [EXPERIMENTAL] Skip VEX Repository update
      --table-mode strings             [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])
  -t, --template string                output template
      --token string                   for authentication in client/server mode
      --token-header string            specify a header name for token in client/server mode (default "Trivy-Token")
      --username strings               username. Comma-separated usernames allowed.
      --vex strings                    [EXPERIMENTAL] VEX sources ("repo", "oci" or file path)
      --vuln-severity-source strings   order of data sources for selecting vulnerability severity level
                                       Allowed values:
                                         - nvd
                                         - redhat
                                         - redhat-oval
                                         - debian
                                         - ubuntu
                                         - alpine
                                         - amazon
                                         - oracle-oval
                                         - suse-cvrf
                                         - photon
                                         - arch-linux
                                         - alma
                                         - rocky
                                         - cbl-mariner
                                         - azure
                                         - ruby-advisory-db
                                         - php-security-advisories
                                         - nodejs-security-wg
                                         - ghsa
                                         - glad
                                         - aqua
                                         - osv
                                         - k8s
                                         - wolfi
                                         - chainguard
                                         - bitnami
                                         - govulndb
                                         - auto
                                        (default [auto])

----------------------------------------

TITLE: Configuring Docker Registry Secrets in Kubernetes
DESCRIPTION: Shows two different formats for storing Docker registry authentication secrets in Kubernetes. Uses both .dockerconfigjson and legacy .dockercfg formats with base64 encoded credentials.

LANGUAGE: yaml
CODE:
data1:
  .dockerconfigjson: eyE1x2a3MpLe
data2:
  .dockercfg: ewE1x2a3MpLe

----------------------------------------

TITLE: Importing Custom Data in Rego Policy
DESCRIPTION: Demonstrates how to import and use custom data within a Rego policy check using the data.services import statement.

LANGUAGE: rego
CODE:
import data.services

ports := services.ports

----------------------------------------

TITLE: Trivy Kubernetes Inherited Options
DESCRIPTION: Options inherited from parent commands that apply to Kubernetes scanning.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Trivy Server Command Options
DESCRIPTION: Comprehensive list of available options for the 'trivy server' command. Includes options for cache configuration, database management, authentication, and various other server settings.

LANGUAGE: bash
CODE:
      --cache-backend string     [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "fs")
      --cache-ttl duration       cache TTL when using redis as cache backend
      --db-repository strings    OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])
      --download-db-only         download/update vulnerability database but don't run a scan
      --enable-modules strings   [EXPERIMENTAL] module names to enable
  -h, --help                     help for server
      --listen string            listen address in server mode (default "localhost:4954")
      --module-dir string        specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")
      --no-progress              suppress progress bar
      --password strings         password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.
      --password-stdin           password from stdin. Comma-separated passwords are not supported.
      --redis-ca string          redis ca file location, if using redis as cache backend
      --redis-cert string        redis certificate file location, if using redis as cache backend
      --redis-key string         redis key file location, if using redis as cache backend
      --redis-tls                enable redis TLS with public certificates, if using redis as cache backend
      --registry-token string    registry token
      --skip-db-update           skip updating vulnerability database
      --token string             for authentication in client/server mode
      --token-header string      specify a header name for token in client/server mode (default "Trivy-Token")
      --username strings         username. Comma-separated usernames allowed.

----------------------------------------

TITLE: Setting AWS Access Key ID
DESCRIPTION: This line defines the AWS Access Key ID as an environment variable. It is part of the credentials used to authenticate with AWS services.

LANGUAGE: plaintext
CODE:
AWS_ACCESS_KEY_ID=AKIA0123456789ABCDEF

----------------------------------------

TITLE: Full License Scanning of Grafana Image with Trivy
DESCRIPTION: This command performs full license scanning on the Grafana image using Trivy. It includes scanning of source code files, Markdown documents, text files, and LICENSE documents.

LANGUAGE: shell
CODE:
trivy image --scanners license --severity UNKNOWN,HIGH,CRITICAL --license-full grafana/grafana

----------------------------------------

TITLE: Installing Trivy Modules - Basic Command
DESCRIPTION: Basic command syntax for installing a Trivy module from a repository.

LANGUAGE: bash
CODE:
trivy module install [flags] REPOSITORY

----------------------------------------

TITLE: Inherited Options for Trivy VEX Repository List Command in Bash
DESCRIPTION: Options inherited from parent commands, including cache directory, config path, debug mode, and various other settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Configuring Active Secrets in Trivy (YAML)
DESCRIPTION: This snippet demonstrates how to configure active secrets in Trivy. It includes a secret key-value pair and a credentials object with username and password.

LANGUAGE: yaml
CODE:
secret="othervalue"
credentials: { user: "username" password: "123456789" }

----------------------------------------

TITLE: Converting Python Package Requirements Using pip
DESCRIPTION: Demonstration of converting requirements.txt with unsupported version specifiers to a format with exact versions using pip freeze command.

LANGUAGE: bash
CODE:
$ cat requirements.txt 
boto3~=1.24.60
click>=8.0
json-fix==0.5.*
$ pip install -r requirements.txt
...
$ pip freeze > requirements.txt 
$ cat requirements.txt 
boto3==1.24.96
botocore==1.27.96
click==8.1.7
jmespath==1.0.1
json-fix==0.5.2
python-dateutil==2.8.2
s3transfer==0.6.2
setuptools==69.0.2
six==1.16.0
urllib3==1.26.18
wheel==0.42.0

----------------------------------------

TITLE: Inherited Options for Trivy Module Commands
DESCRIPTION: This snippet shows the options inherited from parent commands. These options are available for all Trivy module-related commands, including various configuration settings and flags.

LANGUAGE: plaintext
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --enable-modules strings    [EXPERIMENTAL] module names to enable
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
      --module-dir string         specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Command line options inherited from the parent trivy command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Initializing Conda Environment for Trivy Tests
DESCRIPTION: Creates a new conda environment named 'test-dep-parser' with Python 3.9.12. This environment will be used for generating the test files.

LANGUAGE: bash
CODE:
conda create --yes -n test-dep-parser python=3.9.12

----------------------------------------

TITLE: Scanning Go Binary with Trivy
DESCRIPTION: Command to scan a Go binary using Trivy. This analyzes the binary for vulnerabilities in its dependencies and standard library.

LANGUAGE: shell
CODE:
$ trivy rootfs ./your_binary

----------------------------------------

TITLE: Inherited Options for Trivy Rootfs Command
DESCRIPTION: Options inherited from parent commands that are also applicable to the 'trivy rootfs' command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Configuring Rego Options for Trivy in YAML
DESCRIPTION: Defines Rego-related options for Trivy, including configuration checks, data, and namespaces.

LANGUAGE: yaml
CODE:
rego:
  # Same as '--config-check'
  check: []

  # Same as '--config-data'
  data: []

  # Same as '--include-deprecated-checks'
  include-deprecated-checks: false

  # Same as '--check-namespaces'
  namespaces: []

  # Same as '--skip-check-update'
  skip-check-update: false

  # Same as '--trace'
  trace: false

----------------------------------------

TITLE: Specifying Python Package Dependencies for Trivy Project
DESCRIPTION: This snippet lists the required Python packages and their version constraints for the Trivy project. It includes web framework components, templating engines, and specific libraries for OAuth and GitLab integration.

LANGUAGE: Plain Text
CODE:
click==8.0.0
Flask==2.0.0
itsdangerous==2.0.0
Jinja2==3.0.0
MarkupSafe>2.0.0
Werkzeug==0.11
oauth2-client==4.0.0
python-gitlab==2.0.0

----------------------------------------

TITLE: Scanning Helm Chart with File-Based Value Override in Trivy
DESCRIPTION: Demonstrates how to use Trivy to scan a Helm chart while overriding values from a specific file. This command uses the dev.values.yaml file to set the 'environment' for the mySql chart.

LANGUAGE: bash
CODE:
trivy config --helm-set-file environment=dev.values.yaml ./charts/mySql

----------------------------------------

TITLE: Basic Trivy Version Command Usage
DESCRIPTION: Shows the basic syntax for running the trivy version command.

LANGUAGE: bash
CODE:
trivy version [flags]

----------------------------------------

TITLE: Installing Trivy from Aqua Chart Repository
DESCRIPTION: Commands to add Aqua Security repository, update Helm repos, search for Trivy, and install it

LANGUAGE: bash
CODE:
helm repo add aquasecurity https://aquasecurity.github.io/helm-charts/
helm repo update
helm search repo trivy
helm install my-trivy aquasecurity/trivy

----------------------------------------

TITLE: Setting Up Port Forwarding for ClusterIP Service
DESCRIPTION: This snippet retrieves the pod name and container port for a ClusterIP service, then sets up port forwarding to access the service locally.

LANGUAGE: bash
CODE:
export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "testchart.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
echo "Visit http://127.0.0.1:8080 to use your application"
kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

----------------------------------------

TITLE: Creating Service Principal for Azure Container Registry Access
DESCRIPTION: This snippet demonstrates how to create a service principal with AcrPull permissions for Azure Container Registry access. It uses the Azure CLI to create the service principal and assign the necessary role.

LANGUAGE: bash
CODE:
export SP_DATA=$(az ad sp create-for-rbac --name TrivyTest --role AcrPull --scope "/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.ContainerRegistry/registries/<registry_name>")

----------------------------------------

TITLE: Trivy VM Command Options
DESCRIPTION: Complete list of available command line options and flags for the trivy vm command.

LANGUAGE: bash
CODE:
      --aws-region string                 AWS region to scan
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "fs")
      --cache-ttl duration                cache TTL when using redis as cache backend
      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default "mirror.gcr.io/aquasec/trivy-checks:1")
      --compliance string                 compliance report to generate
      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking

----------------------------------------

TITLE: Custom Trivy Installation with Parameters
DESCRIPTION: Example of installing Trivy with custom service port and vulnerability type settings

LANGUAGE: bash
CODE:
$ helm install my-release . \
       --namespace my-namespace \
       --set "service.port=9090" \
       --set "trivy.vulnType=os\,library"

----------------------------------------

TITLE: Running Trivy with Spring4Shell Module
DESCRIPTION: Example of running Trivy with the Spring4Shell module to analyze a Docker image, showing how the module adjusts vulnerability severity based on Java version.

LANGUAGE: shell
CODE:
$ trivy image spring-core-rce-jdk8:latest
2022-05-29T22:35:04.873+0300    INFO    Loading spring4shell.wasm...
2022-05-29T22:35:05.348+0300    INFO    Registering WASM module: spring4shell@v1
2022-05-29T22:35:07.124+0300    INFO    Module spring4shell: analyzing /app/tomcat/RELEASE-NOTES...
2022-05-29T22:35:07.139+0300    INFO    Module spring4shell: analyzing /app/jdk9/release...
2022-05-29T22:37:04.636+0300    INFO    Module spring4shell: analyzing /app/jdk9/release...
...
2022-05-29T22:37:08.917+0300    INFO    Module spring4shell: Java Version: 8, Tomcat Version: 8.5.77
2022-05-29T22:37:08.917+0300    INFO    Module spring4shell: change CVE-2022-22965 severity from CRITICAL to LOW

----------------------------------------

TITLE: Adding Service Reference to AWS Provider Struct
DESCRIPTION: Updates the main AWS provider struct to include the new CodeBuild service. This addition allows the provider to handle CodeBuild resources during scanning.

LANGUAGE: go
CODE:
type AWS struct {
	...
	CodeBuild      codebuild.CodeBuild
    ...
}

----------------------------------------

TITLE: Installing a Trivy Module
DESCRIPTION: Command to install a Trivy module from a container registry.

LANGUAGE: bash
CODE:
$ trivy module install ghcr.io/aquasecurity/trivy-module-spring4shell

----------------------------------------

TITLE: Retrieving LoadBalancer Service IP
DESCRIPTION: This snippet exports the SERVICE_IP for a LoadBalancer service type and constructs the service URL. It includes a note about potential delays in IP availability.

LANGUAGE: bash
CODE:
export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "testchart.fullname" . }} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
echo http://$SERVICE_IP:{{ .Values.service.port }}

----------------------------------------

TITLE: Configuring Trivy Home Page Template in YAML
DESCRIPTION: This YAML configuration sets up the home page for the Trivy project. It specifies a custom template and hides navigation, table of contents, path, and tags from the rendered page.

LANGUAGE: yaml
CODE:
---
template: home.html
hide:
  - navigation
  - toc
  - path
  - tags
---

----------------------------------------

TITLE: Scanning CycloneDX SBOM with Trivy
DESCRIPTION: Examples of using the 'trivy sbom' command to scan CycloneDX format SBOM files and attestations. The results are displayed in table format by default.

LANGUAGE: bash
CODE:
# Scan CycloneDX and show the result in tables
$ trivy sbom /path/to/report.cdx

# Scan CycloneDX-type attestation and show the result in tables
$ trivy sbom /path/to/report.cdx.intoto.jsonl

----------------------------------------

TITLE: Sample Cosign Vulnerability Scan Record JSON Output
DESCRIPTION: This is an example of the JSON output generated by Trivy in the Cosign vulnerability scan record format. It includes detailed information about the scanned image and any vulnerabilities found.

LANGUAGE: json
CODE:
{
  "invocation": {
    "parameters": null,
    "uri": "",
    "event_id": "",
    "builder.id": ""
  },
  "scanner": {
    "uri": "pkg:github/aquasecurity/trivy@v0.30.1-8-gf9cb8a28",
    "version": "v0.30.1-8-gf9cb8a28",
    "db": {
      "uri": "",
      "version": ""
    },
    "result": {
      "SchemaVersion": 2,
      "CreatedAt": 1629894030,
      "ArtifactName": "alpine:3.10",
      "ArtifactType": "container_image",
      "Metadata": {
        "OS": {
          "Family": "alpine",
          "Name": "3.10.9",
          "EOSL": true
        },
        "ImageID": "sha256:e7b300aee9f9bf3433d32bc9305bfdd22183beb59d933b48d77ab56ba53a197a",
        "DiffIDs": [
          "sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635"
        ],
        "RepoTags": [
          "alpine:3.10"
        ],
        "RepoDigests": [
          "alpine@sha256:451eee8bedcb2f029756dc3e9d73bab0e7943c1ac55cff3a4861c52a0fdd3e98"
        ],
        "ImageConfig": {
          "architecture": "amd64",
          "container": "fdb7e80e3339e8d0599282e606c907aa5881ee4c668a68136119e6dfac6ce3a4",
          "created": "2021-04-14T19:20:05.338397761Z",
          "docker_version": "19.03.12",
          "history": [
            {
              "created": "2021-04-14T19:20:04.987219124Z",
              "created_by": "/bin/sh -c #(nop) ADD file:c5377eaa926bf412dd8d4a08b0a1f2399cfd708743533b0aa03b53d14cb4bb4e in / "
            },
            {
              "created": "2021-04-14T19:20:05.338397761Z",
              "created_by": "/bin/sh -c #(nop)  CMD [\"/bin/sh\"]",
              "empty_layer": true
            }
          ],
          "os": "linux",
          "rootfs": {
            "type": "layers",
            "diff_ids": [
              "sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635"
            ]
          },
          "config": {
            "Cmd": [
              "/bin/sh"
            ],
            "Env": [
              "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Image": "sha256:eb2080c455e94c22ae35b3aef9e078c492a00795412e026e4d6b41ef64bc7dd8"
          }
        }
      },
      "Results": [
        {
          "Target": "alpine:3.10 (alpine 3.10.9)",
          "Class": "os-pkgs",
          "Type": "alpine",
          "Vulnerabilities": [
            {
              "VulnerabilityID": "CVE-2021-36159",
              "PkgName": "apk-tools",
              "InstalledVersion": "2.10.6-r0",
              "FixedVersion": "2.10.7-r0",
              "Layer": {
                "Digest": "sha256:396c31837116ac290458afcb928f68b6cc1c7bdd6963fc72f52f365a2a89c1b5",
                "DiffID": "sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635"
              },
              "SeveritySource": "nvd",
              "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2021-36159",
              "DataSource": {
                "ID": "alpine",
                "Name": "Alpine Secdb",
                "URL": "https://secdb.alpinelinux.org/"
              },
              "Description": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
              "Severity": "CRITICAL",
              "CweIDs": [
                "CWE-125"
              ],
              "CVSS": {
                "nvd": {
                  "V2Vector": "AV:N/AC:L/Au:N/C:P/I:N/A:P",
                  "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H",
                  "V2Score": 6.4,
                  "V3Score": 9.1
                }
              },
              "References": [
                "https://github.com/freebsd/freebsd-src/commits/main/lib/libfetch",
                "https://gitlab.alpinelinux.org/alpine/apk-tools/-/issues/10749",
                "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cdev.kafka.apache.org%3E",
                "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cusers.kafka.apache.org%3E",
                "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cdev.kafka.apache.org%3E",
                "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cusers.kafka.apache.org%3E"
              ],
              "PublishedDate": "2021-08-03T14:15:00Z",
              "LastModifiedDate": "2021-10-18T12:19:00Z"
            }
          ]
        }
      ]
    }
  },
  "metadata": {
    "scanStartedOn": "2022-07-24T17:14:04.864682+09:00",
    "scanFinishedOn": "2022-07-24T17:14:04.864682+09:00"
  }
}

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Lists required Python packages with version specifications. Includes Flask web framework and its dependencies with specific version constraints.

LANGUAGE: plaintext
CODE:
click==8.0.0
Flask==2.0.0
itsdangerous==2.0.0
Jinja2<3.0.0
MarkupSafe>2.0.0
Werkzeug

----------------------------------------

TITLE: Running Trivy Server with Basic and Custom Configurations
DESCRIPTION: Examples of how to run the Trivy server in different configurations. Shows the basic command to start the server and how to specify a custom listening address.

LANGUAGE: bash
CODE:
  # Run a server
  $ trivy server

  # Listen on 0.0.0.0:10000
  $ trivy server --listen 0.0.0.0:10000

----------------------------------------

TITLE: Verifying Attestation with Local Key Pair
DESCRIPTION: This command verifies the attestation on an image using Cosign with a local public key.

LANGUAGE: bash
CODE:
$ cosign verify-attestation --key /path/to/cosign.pub --type vuln <IMAGE>

----------------------------------------

TITLE: Storing Complete RSA Private Key in PEM Format
DESCRIPTION: This snippet contains a complete RSA private key encoded in PEM format. It includes the full key data between the BEGIN and END markers.

LANGUAGE: PEM
CODE:
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAu/Nua0/1y08gkbnBfKd6VDHia8Na0ATgMQqZ4YEbi/t73g84IEPQPkLbPF3X
De++JA1QzqTZbbePLsW44DbbgMX/5jj+Sh2SvGe5IXNeNwyyMox+DKQccJUPxbCxnhF/gSnF76cM
BXJC63nDnGawz4g3qwU1+0sfyKG0ixFI3e3992fk6QnF49Cv5iqwjgKPIZjgfoM70r71XDKJjVTC
rJdSBfyQwX2TU0CncglvJSzhhcuTeQZWldbk/BHjxINrqQIxKaG2OfBgkupPjnrImzSAUE9a/gIS
REUVSamc69qqQnXER3Jmoy8HXiAQdPI+CpVVkI7FCCq4qD7fVqsNhwIDAQABAoIBAQC5707zNr1Q
jk0IHR3+9agdFuSJ+08hr1Ei8vvcjN71kqqtuZyqvquKjJVamPMhRGV0QQAKDidTVV5+xPfqSBrK
wBYyaXuXUr5RSMNrBjjUeOjo/PfOBaRk8/IQfoaYe3MKEotQVI+d67WsQl9zoFuWU4nO1G7c1Sry
TpbPZSAS+6J7fUClUgT9pvg+EpoboXs+voeWTh9r9eracxUmlclVAdS3tP7xMv5R29EBYtjGKbF6
r0Ku/hXJjPu5Eck4/BeciEinVWn/yqSsqd5XKOUwTuLlUyAGWhJKcn/zWgaBYUvknzSmwePvW/W8
iwrEhP4GNHBEHisJHdWPtbCDdOVxAoGBAPqyR/9ocwZ3GhHz3dI53Z6UjKUPtRnxJb19ZS8UVN57
P7yCXpH+L6KhIxo9yx0D5Z4bdNSYTyjl6eFnv0FZA3UXsM2tyY+Ylih1LOqcttehJkK2JaFmuefx
d6bcpPJG00EKFDZoTH5bbnrB3uGKUVJ5TMFlUbOgkATJL652VTNTAoGBAL/tVWwlO5ET80BSheJ/
V88rSF4AxK48ZNt5EG7RHph46KukwywPUnWRoFLxRtVP/udZf9Qq164IPGgDrn4E6VTpZwmp7HDv
6P8sSLwJj/YW3y9c57lA4SMoowO2ik09fbBJVvWLeev4n6taDNwgCZ4fuLUtMf/mUU3r80okeUp9
AoGAIySIyTn4HejmQ6v+5XBtK8TBLoZUKc3PL4/7di0QdJusZJ2V6jtKrC6QgCY3adrY/l/08bRk
LGSGc62aduume2yVwU9iWPnX2tYKNN1BGFsjxOhJwCVpXCVSU5bMnJXnGU/zY2kdh/0DMLwqpU1B
dyE/7EBqwpZ4eeNGBtvZt7cCgYB8jaZJJ6SPkzXiwWtXwTKYJMuzDaaWOGVvtRKACEBlzNmaQrPS
jSMDX31/Nku0tVSEiSWW6DLOI1QoYHNGHyPZ0hrnP5pM9LTtnKybM0109ATlNNLA+6Tf70hTaYw5
cjV2STIg6eI2zEO6rRb5Z+U18/onwevX2X1cJ0rdC+yW9QKBgH0xSLUGFZwFDCPE+jKGgqJQme5Q
8oxHs1CTkV4SxeLFNldA9c6uESMppSUwO7wx+NaFAJw9m2Q9Ifmo57pncAx2iVXOA9Jxaa7YFIsL
vKftqLPCPbAPPxkaqQi0Ico/1fzD10znRy66aosPBrbleduiynubgk+GVm9y/R6bDYhR
-----END RSA PRIVATE KEY-----

----------------------------------------

TITLE: Scanning AWS AMI in Specific Region with Trivy
DESCRIPTION: This command demonstrates scanning an AMI in a non-default AWS region by using the '--aws-region' option with Trivy.

LANGUAGE: bash
CODE:
$ trivy vm --aws-region ap-northeast-1 ami:ami-0123456789abcdefg

----------------------------------------

TITLE: Trivy Rootfs Command Options
DESCRIPTION: Comprehensive list of available options for the 'trivy rootfs' command, including cache settings, scanning configurations, output formats, and various customization flags.

LANGUAGE: bash
CODE:
      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default "memory")
      --cache-ttl duration                cache TTL when using redis as cache backend
      --cf-params strings                 specify paths to override the CloudFormation parameters files
      --check-namespaces strings          Rego namespaces
      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default "mirror.gcr.io/aquasec/trivy-checks:1")
      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files
      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded
      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking
      --custom-headers strings            custom headers in client mode
      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])
      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages
      --detection-priority string         specify the detection priority:
                                            - "precise": Prioritizes precise by minimizing false positives.
                                            - "comprehensive": Aims to detect more security findings at the cost of potential false positives.
                                           (allowed values: precise,comprehensive) (default "precise")
      --distro string                     [EXPERIMENTAL] specify a distribution, <family>/<version>
      --download-db-only                  download/update vulnerability database but don't run a scan
      --download-java-db-only             download/update Java index database but don't run a scan
      --enable-modules strings            [EXPERIMENTAL] module names to enable
      --exit-code int                     specify exit code when any security issues are found
      --exit-on-eol int                   exit with the specified code when the OS reaches end of service/life
      --file-patterns strings             specify config file patterns
  -f, --format string                     format
                                          Allowed values:
                                            - table
                                            - json
                                            - template
                                            - sarif
                                            - cyclonedx
                                            - spdx
                                            - spdx-json
                                            - github
                                            - cosign-vuln
                                           (default "table")
      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)
      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.
      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --helm-values strings               specify paths to override the Helm values.yaml files
  -h, --help                              help for rootfs
      --ignore-policy string              specify the Rego file path to evaluate each vulnerability
      --ignore-status strings             comma-separated list of vulnerability status to ignore
                                          Allowed values:
                                            - unknown
                                            - not_affected
                                            - affected
                                            - fixed
                                            - under_investigation
                                            - will_not_fix
                                            - fix_deferred
                                            - end_of_life
      --ignore-unfixed                    display only fixed vulnerabilities
      --ignored-licenses strings          specify a list of license to ignore
      --ignorefile string                 specify .trivyignore file (default ".trivyignore")
      --include-deprecated-checks         include deprecated checks
      --include-non-failures              include successes, available with '--scanners misconfig'
      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])
      --license-confidence-level float    specify license classifier's confidence level (default 0.9)
      --license-full                      eagerly look for licenses in source code headers and license files
      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability
      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])
      --module-dir string                 specify directory to the wasm modules that will be loaded (default "$HOME/.trivy/modules")
      --no-progress                       suppress progress bar
      --offline-scan                      do not issue API requests to identify dependencies
  -o, --output string                     output file name
      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments
      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)
      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.
      --password-stdin                    password from stdin. Comma-separated passwords are not supported.
      --pkg-relationships strings         list of package relationships
                                          Allowed values:
                                            - unknown
                                            - root
                                            - workspace
                                            - direct
                                            - indirect
                                           (default [unknown,root,workspace,direct,indirect])
      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])
      --redis-ca string                   redis ca file location, if using redis as cache backend
      --redis-cert string                 redis certificate file location, if using redis as cache backend
      --redis-key string                  redis key file location, if using redis as cache backend
      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend
      --registry-token string             registry token
      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default "https://rekor.sigstore.dev")
      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)
      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)
      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])
      --secret-config string              specify a path to config file for secret scanning (default "trivy-secret.yaml")
      --server string                     server address in client mode
  -s, --severity strings                  severities of security issues to be displayed
                                          Allowed values:
                                            - UNKNOWN
                                            - LOW
                                            - MEDIUM
                                            - HIGH
                                            - CRITICAL
                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])
      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities
      --skip-check-update                 skip fetching rego check updates
      --skip-db-update                    skip updating vulnerability database
      --skip-dirs strings                 specify the directories or glob patterns to skip
      --skip-files strings                specify the files or glob patterns to skip
      --skip-java-db-update               skip updating Java index database
      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update
      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])
  -t, --template string                   output template
      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules
      --tf-vars strings                   specify paths to override the Terraform tfvars files
      --token string                      for authentication in client/server mode
      --token-header string               specify a header name for token in client/server mode (default "Trivy-Token")
      --trace                             enable more verbose trace output for custom queries
      --username strings                  username. Comma-separated usernames allowed.
      --vex strings                       [EXPERIMENTAL] VEX sources ("repo", "oci" or file path)
      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level
                                          Allowed values:
                                            - nvd
                                            - redhat
                                            - redhat-oval
                                            - debian
                                            - ubuntu
                                            - alpine
                                            - amazon
                                            - oracle-oval
                                            - suse-cvrf
                                            - photon
                                            - arch-linux
                                            - alma
                                            - rocky
                                            - cbl-mariner
                                            - azure
                                            - ruby-advisory-db
                                            - php-security-advisories
                                            - nodejs-security-wg
                                            - ghsa
                                            - glad
                                            - aqua
                                            - osv
                                            - k8s
                                            - wolfi
                                            - chainguard
                                            - bitnami
                                            - govulndb
                                            - auto
                                           (default [auto])

----------------------------------------

TITLE: Executing Compliance Scan for Kubernetes CIS Benchmark
DESCRIPTION: Shell command to run a compliance scan using Trivy for Kubernetes CIS Benchmark version 1.23.

LANGUAGE: sh
CODE:
trivy k8s --compliance k8s-cis-1.23

----------------------------------------

TITLE: Setting GitHub Personal Access Token Environment Variable
DESCRIPTION: Configures a GitHub personal access token as an environment variable named GITHUB_TOKEN. Note: This appears to be an actual token that should not be exposed publicly.

LANGUAGE: env
CODE:
GITHUB_TOKEN=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

----------------------------------------

TITLE: Input Selector Subtype Configuration
DESCRIPTION: YAML configuration showing how to specify AWS RDS as a subtype in the input selector configuration.

LANGUAGE: yaml
CODE:
#       subtypes:
#         - provider: aws
#           service: rds

----------------------------------------

TITLE: Inherited Command Options
DESCRIPTION: Shows options inherited from parent commands that can be used with the repository command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Configuring Trivy Security Scanning in Woodpecker CI Pipeline
DESCRIPTION: This YAML snippet demonstrates how to set up a Trivy security scanning step in a Woodpecker CI pipeline. It uses the latest Trivy Docker image and runs a filesystem scan with specific severity levels and directory exclusions.

LANGUAGE: yaml
CODE:
pipeline:
  securitycheck:
    image: aquasec/trivy:latest
    commands:
      # use any trivy command, if exit code is 0 woodpecker marks it as passed, else it assumes it failed
      - trivy fs --exit-code 1 --skip-dirs web/ --skip-dirs docs/ --severity MEDIUM,HIGH,CRITICAL .

----------------------------------------

TITLE: Encoding AWS Access Key ID with Base64
DESCRIPTION: This snippet shows an AWS access key ID encoded in base64 format. Base64 encoding is commonly used to represent binary data in ASCII string format.

LANGUAGE: plaintext
CODE:
YXdzLWFjY2AIPA1rZXktaWQgdGVzdCBzdHJpbmc=

----------------------------------------

TITLE: Basic Trivy VM Command Usage
DESCRIPTION: Base command syntax for scanning a virtual machine image with Trivy.

LANGUAGE: bash
CODE:
trivy vm [flags] VM_IMAGE

----------------------------------------

TITLE: Trivy Repository Usage Examples
DESCRIPTION: Demonstrates how to scan both remote and local Git repositories using Trivy.

LANGUAGE: bash
CODE:
  # Scan your remote git repository
  $ trivy repo https://github.com/knqyf263/trivy-ci-test
  # Scan your local git repository
  $ trivy repo /path/to/your/repository

----------------------------------------

TITLE: Verifying Trivy Container Image Signature with Cosign
DESCRIPTION: This snippet demonstrates how to use Cosign for keyless verification of a Trivy container image. It specifies the certificate identity and OIDC issuer for GitHub Actions.

LANGUAGE: shell
CODE:
cosign verify aquasec/trivy:<version> \
--certificate-identity-regexp 'https://github\.com/aquasecurity/trivy/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"

----------------------------------------

TITLE: GitHub PAT Token Pattern
DESCRIPTION: An example of a GitHub Personal Access Token (PAT) pattern. This shows how PATs are structured with the 'ghp_' prefix followed by 40 hexadecimal characters.

LANGUAGE: plaintext
CODE:
GITHUB_PAT=ghp_012345678901234567890123456789abcdef

----------------------------------------

TITLE: Trivy Version Inherited Options
DESCRIPTION: Global options inherited from parent commands that can be used with the version command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Displaying Options for Trivy Registry Command
DESCRIPTION: This code block shows the available options specific to the 'trivy registry' command. It includes a help option for displaying command usage information.

LANGUAGE: plaintext
CODE:
  -h, --help   help for registry

----------------------------------------

TITLE: Verifying Trivy Binary Signature with Cosign
DESCRIPTION: This snippet shows how to use Cosign for keyless verification of a Trivy binary. It requires the binary, signature, and certificate files, and specifies the certificate identity and OIDC issuer.

LANGUAGE: shell
CODE:
cosign verify-blob <path to binray> \
--certificate <path to cert> \
--signature <path to sig> \
--certificate-identity-regexp 'https://github\.com/aquasecurity/trivy/\.github/workflows/.+' \
--certificate-oidc-issuer "https://token.actions.githubusercontent.com"

----------------------------------------

TITLE: Installing MySQL with Values File
DESCRIPTION: Installing MySQL chart using a custom values YAML file

LANGUAGE: bash
CODE:
$ helm install my-release -f values.yaml bitnami/mysql

----------------------------------------

TITLE: Trivy VEX Repository List Command Options in Bash
DESCRIPTION: Available options specific to the 'list' command. Currently, it only includes a help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for list

----------------------------------------

TITLE: Inherited Trivy Command Options
DESCRIPTION: Lists the options inherited from parent commands that can be used with the 'trivy plugin search' command. These include options for cache directory, config path, debug mode, and more.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Applying ArgoCD Manifest with kubectl
DESCRIPTION: This command applies the Trivy-Operator ArgoCD Application manifest to the Kubernetes cluster using kubectl.

LANGUAGE: bash
CODE:
> kubectl apply -f trivy-operator.yaml

application.argoproj.io/trivy-operator created

----------------------------------------

TITLE: Configuring MySQL Sidecar Containers
DESCRIPTION: Example YAML configuration for adding sidecar containers to MySQL pods

LANGUAGE: yaml
CODE:
sidecars:
  - name: your-image-name
    image: your-image
    imagePullPolicy: Always
    ports:
      - name: portname
       containerPort: 1234

----------------------------------------

TITLE: Initializing VEX Repository Configuration in Trivy (Bash)
DESCRIPTION: This command initializes a configuration file for VEX repositories in Trivy. It doesn't require any specific flags but inherits options from parent commands for customization.

LANGUAGE: bash
CODE:
trivy vex repo init [flags]

----------------------------------------

TITLE: Trivy Plugin Run Inherited Options
DESCRIPTION: Displays the options inherited from parent commands, including cache directory, config path, debug mode, and various other settings.

LANGUAGE: plaintext
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Verifying Trivy-Operator Deployment
DESCRIPTION: This command checks the deployment status of the Trivy-Operator in the trivy-system namespace after installation.

LANGUAGE: bash
CODE:
kubectl get deployment -n trivy-system

----------------------------------------

TITLE: Installing Bitnami Common Library Chart in Helm
DESCRIPTION: This snippet shows how to add the Bitnami Common Library Chart as a dependency in a Helm chart's Chart.yaml file and update dependencies.

LANGUAGE: yaml
CODE:
dependencies:
  - name: common
    version: 0.x.x
    repository: https://charts.bitnami.com/bitnami

LANGUAGE: bash
CODE:
$ helm dependency update

----------------------------------------

TITLE: Inherited Global Options for Trivy Commands
DESCRIPTION: Global options inherited from parent commands, including cache directory configuration, debug mode, timeout settings, and other general parameters.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Trivy Filesystem Command Options
DESCRIPTION: Comprehensive list of command line options and flags available for the trivy filesystem command, including cache configuration, scanning options, and output formatting.

LANGUAGE: bash
CODE:
--cache-dir string          cache directory (default "/path/to/cache")
-c, --config string             config path (default "trivy.yaml")
-d, --debug                     debug mode
    --generate-default-config   write the default config to trivy-default.yaml
    --insecure                  allow insecure server connections
-q, --quiet                     suppress progress bar and log output
    --timeout duration          timeout (default 5m0s)
-v, --version                   show version

----------------------------------------

TITLE: Enabling Import Findings for Security Hub Product
DESCRIPTION: This AWS CLI command enables importing findings for the Aqua Security product in Security Hub. Replace <AWS_REGION> with your specific region.

LANGUAGE: bash
CODE:
aws securityhub enable-import-findings-for-product --product-arn arn:aws:securityhub:<AWS_REGION>::product/aquasecurity/aquasecurity

----------------------------------------

TITLE: Defining AWS S3 Bucket Resource in Terraform
DESCRIPTION: This snippet defines the main AWS S3 bucket resource using Terraform. It sets up the bucket with various configurable options including versioning, server-side encryption, and lifecycle rules.

LANGUAGE: hcl
CODE:
resource "aws_s3_bucket" "this" {
  bucket        = var.bucket
  bucket_prefix = var.bucket_prefix

  force_destroy       = var.force_destroy
  object_lock_enabled = var.object_lock_enabled
  tags                = var.tags
}

----------------------------------------

TITLE: Executing VEX Repository Download Command in Trivy
DESCRIPTION: Base command syntax for downloading VEX repositories. Users can specify optional repository names as arguments to download specific repositories, or omit them to download all enabled repositories.

LANGUAGE: bash
CODE:
trivy vex repo download [REPO_NAMES] [flags]

----------------------------------------

TITLE: Inherited Options for Trivy Config Command
DESCRIPTION: Options inherited from parent commands that can be used with the 'trivy config' command. These options provide additional configuration for the Trivy tool.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Creating Rego File for Custom Trivy Check
DESCRIPTION: Creates a new Rego file for implementing a custom Trivy check. This file will contain the Rego code for the custom check.

LANGUAGE: bash
CODE:
touch docker-check.rego

----------------------------------------

TITLE: Trivy Multi-stage Build Scanner
DESCRIPTION: Shows how to implement Trivy scanning in a multi-stage Docker build, which is more secure than the curl method. This approach copies Trivy from an official image and runs the vulnerability scan during the build process.

LANGUAGE: dockerfile
CODE:
FROM build AS vulnscan
COPY --from=aquasec/trivy:latest /usr/local/bin/trivy /usr/local/bin/trivy
RUN trivy rootfs --exit-code 1 --no-progress /

----------------------------------------

TITLE: Trivy Plugin Update Command Options
DESCRIPTION: Command-specific options for the plugin update command.

LANGUAGE: bash
CODE:
  -h, --help   help for update

----------------------------------------

TITLE: Trivy Global Command Options
DESCRIPTION: Inherited options available for all trivy commands, including cache directory, config path, and timeout settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: SARIF Format Scan
DESCRIPTION: Command to perform a scan with SARIF output format

LANGUAGE: bash
CODE:
trivy config -f sarif terraform-infra

----------------------------------------

TITLE: Testing Trivy with Azure Container Registry
DESCRIPTION: This snippet provides a Docker command to test Trivy's ability to scan an image from Azure Container Registry using the configured credentials. It mounts a local directory and passes the necessary environment variables.

LANGUAGE: bash
CODE:
docker run -it --rm -v /tmp:/tmp \
  -e AZURE_CLIENT_ID -e AZURE_CLIENT_SECRET -e AZURE_TENANT_ID \
  aquasec/trivy image your_special_project.azurecr.io/your_special_image:your_special_tag

----------------------------------------

TITLE: Executing Trivy Plugin Update
DESCRIPTION: Basic command to update the local copy of the plugin index in Trivy.

LANGUAGE: bash
CODE:
trivy plugin update

----------------------------------------

TITLE: Trivy Clean Command Options
DESCRIPTION: Available options specific to the clean command for controlling which caches to remove.

LANGUAGE: bash
CODE:
  -a, --all             remove all caches
      --checks-bundle   remove checks bundle
  -h, --help            help for clean
      --java-db         remove Java database
      --scan-cache      remove scan cache (container and VM image analysis results)
      --vex-repo        remove VEX repositories
      --vuln-db         remove vulnerability database

----------------------------------------

TITLE: Using GitHub Token for Authentication in Trivy
DESCRIPTION: Demonstrates how to use a GitHub token to authenticate and avoid rate limiting when using Trivy with VEX repositories.

LANGUAGE: bash
CODE:
$ GITHUB_TOKEN=XXXXXXXXXX trivy image --vex repo [YOUR_IMAGE]

----------------------------------------

TITLE: Structuring Google Cloud Service Account JSON for Trivy Authentication
DESCRIPTION: This JSON structure represents the format of the credential file required for Google Cloud Registry authentication. It includes essential fields such as project ID, private key, client email, and various URIs for authentication and token management.

LANGUAGE: json
CODE:
{
  "type": "service_account",
  "project_id": "your_special_project",
  "private_key_id": "XXXXXXXXXXXXXXXXXXXXxx",
  "private_key": "-----BEGIN PRIVATE KEY-----\nNONONONO\n-----END PRIVATE KEY-----\n",
  "client_email": "somedude@your_special_project.iam.gserviceaccount.com",
  "client_id": "1234567890",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/somedude%40your_special_project.iam.gserviceaccount.com"
}

----------------------------------------

TITLE: Inherited Command Options
DESCRIPTION: Options inherited from parent commands that can be used with the uninstall command, including cache directory, config path, debug mode, and various other settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Trivy Version Command Options
DESCRIPTION: Command-specific options for the version command, including format specification.

LANGUAGE: bash
CODE:
  -f, --format string   version format (json)
  -h, --help            help for version

----------------------------------------

TITLE: Accessing Trivy Server URL with Helm Template
DESCRIPTION: Helm template expression for constructing the internal cluster URL to access Trivy server. Uses the service name, namespace, and configured port.

LANGUAGE: helm
CODE:
http://{{ include "trivy.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.service.port }}

----------------------------------------

TITLE: Testing Trivy Authentication with Google Cloud Registry
DESCRIPTION: This bash command shows how to test the Google Cloud Registry credentials using Docker. It mounts the credential file from the host machine and runs Trivy to scan an image from the authenticated Google Cloud Registry.

LANGUAGE: bash
CODE:
docker run -it --rm -v /tmp:/tmp\
  -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/service_account.json\
  aquasec/trivy image gcr.io/your_special_project/your_special_image:your_special_tag

----------------------------------------

TITLE: Uninstall Command Help Options
DESCRIPTION: Available help options specific to the uninstall command.

LANGUAGE: bash
CODE:
  -h, --help   help for uninstall

----------------------------------------

TITLE: Executing Trivy VEX Repository List Command in Bash
DESCRIPTION: This command lists VEX repositories in Trivy. It can be executed with optional flags to customize its behavior.

LANGUAGE: bash
CODE:
trivy vex repo list [flags]

----------------------------------------

TITLE: Generating Service URL for Ingress-Enabled Configuration
DESCRIPTION: This snippet constructs the service URL when ingress is enabled. It iterates through ingress hosts and paths, considering TLS configuration.

LANGUAGE: yaml
CODE:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}

----------------------------------------

TITLE: Skipping Directories with Trivy CLI
DESCRIPTION: Illustrates the use of the --skip-dirs flag to exclude specific directories from Trivy scanning.

LANGUAGE: bash
CODE:
$ trivy image --skip-dirs /var/lib/gems/2.5.0/gems/fluent-plugin-detect-exceptions-0.0.13 --skip-dirs "/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0" quay.io/fluentd_elasticsearch/fluentd:v2.9.0

----------------------------------------

TITLE: Trivy Plugin Search Command Options
DESCRIPTION: Lists the options specific to the 'trivy plugin search' command. Currently, it only includes the help option.

LANGUAGE: bash
CODE:
  -h, --help   help for search

----------------------------------------

TITLE: Using Trivy VEX Repo Commands in Bash
DESCRIPTION: Examples of using the 'trivy vex repo' command for initializing configuration, listing repositories, and downloading repositories. These commands are part of Trivy's VEX utilities for managing vulnerability information.

LANGUAGE: bash
CODE:
# Initialize the configuration file
$ trivy vex repo init

# List VEX repositories
$ trivy vex repo list

# Download the VEX repositories
$ trivy vex repo download

----------------------------------------

TITLE: Defining Python Package Version Requirements
DESCRIPTION: Specifies version constraints for Python packages using operators like >=, ~=, and == with wildcard patterns. Includes requirements for keyring, Mopidy-Dirble, python-gitlab, and django packages.

LANGUAGE: plaintext
CODE:
keyring >= 4.1.1            # Minimum version 4.1.1
Mopidy-Dirble ~= 1.1        # Compatible release. Same as >= 1.1, == 1.*
python-gitlab==2.0.*
django==5.*.*               # this dep should be skipped
django==4.*.1

----------------------------------------

TITLE: Scanning Terraform Plan with Trivy
DESCRIPTION: Commands to create a Terraform plan and scan it using Trivy for misconfigurations and secrets.

LANGUAGE: bash
CODE:
terraform plan --out tfplan
trivy config tfplan

----------------------------------------

TITLE: Inherited Trivy Command Options
DESCRIPTION: Lists all options inherited from parent commands that can be used with the plugin info command.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Using Trivy Plugin Output Mode
DESCRIPTION: Examples of using plugins in output mode for processing scan results.

LANGUAGE: bash
CODE:
$ trivy plugin search
NAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT
aqua                 A plugin for integration with Aqua Security SaaS platform    aquasecurity
kubectl              A plugin scanning the images of a kubernetes resource        aquasecurity
referrer             A plugin for OCI referrers                                   aquasecurity           ✓

LANGUAGE: bash
CODE:
$ trivy image --format json --output plugin=count --output-plugin-arg "--published-after 2023-10-01" debian:12

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Lists required Python packages and their specific versions. Includes oauth2-client 4.0.0 and python-gitlab 2.0.0 as dependencies.

LANGUAGE: plaintext
CODE:
oauth2-client==4.0.0
python-gitlab==2.0.0

----------------------------------------

TITLE: JSON Output Format Example
DESCRIPTION: Example showing JSON format output when scanning an Alpine container image

LANGUAGE: json
CODE:
{
  "SchemaVersion": 2,
  "CreatedAt": "2024-12-26T21:58:15.943876+05:30",
  "ArtifactName": "alpine:latest",
  "ArtifactType": "container_image",
  "Metadata": {
    "OS": {
      "Family": "alpine",
      "Name": "3.20.3"
    },
    "ImageID": "sha256:511a44083d3a23416fadc62847c45d14c25cbace86e7a72b2b350436978a0450"
  }
}

----------------------------------------

TITLE: Inherited Options for Trivy Plugin Command
DESCRIPTION: Lists the options inherited from parent commands, including cache directory, config path, debug mode, and various other settings.

LANGUAGE: bash
CODE:
      --cache-dir string          cache directory (default "/path/to/cache")
  -c, --config string             config path (default "trivy.yaml")
  -d, --debug                     debug mode
      --generate-default-config   write the default config to trivy-default.yaml
      --insecure                  allow insecure server connections
  -q, --quiet                     suppress progress bar and log output
      --timeout duration          timeout (default 5m0s)
  -v, --version                   show version

----------------------------------------

TITLE: Updating Plugin Index in Trivy
DESCRIPTION: Command to refresh the local copy of the plugin index.

LANGUAGE: bash
CODE:
$ trivy plugin update

----------------------------------------

TITLE: Storing Public Key in Windows Container Web.config
DESCRIPTION: This example demonstrates how a public key is stored in a web.config file for Windows containers. The key is represented as a hexadecimal string.

LANGUAGE: plaintext
CODE:
publicKey="F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"

----------------------------------------

TITLE: Custom CSS Styling for Content and Form Inputs
DESCRIPTION: CSS styles that hide content elements and format HubSpot form input fields with specific borders, font sizes, and padding

LANGUAGE: css
CODE:
<style>
    .md-content .md-content__inner a, h1 {
        display:none;
    }
    input.hs-input, textarea.hs-input {
        border: silver solid 1px !important;
        font-size: 0.8em;
        padding: 5px;
    }
</style>

----------------------------------------

TITLE: Basic Trivy Image Command
DESCRIPTION: The basic command syntax for scanning container images with Trivy.

LANGUAGE: shell
CODE:
trivy image [flags] IMAGE_NAME

----------------------------------------

TITLE: Exposed AWS Secret Key and GitHub PAT
DESCRIPTION: Examples of sensitive credentials that should be stored securely in environment variables or secret management systems rather than in plaintext. Includes an AWS secret access key and GitHub personal access token.

LANGUAGE: plaintext
CODE:
MyAWS_secret_KEY="12ASD34qwe56CXZ78tyH10Tna543VBokN85RHCas"
our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

----------------------------------------

TITLE: Signing Container Image with Cosign
DESCRIPTION: Signs a container image using Cosign without generating new keypairs. Uses the image SHA for better security practices.

LANGUAGE: bash
CODE:
cosign sign DockerHubID/imagename@imageSHA

----------------------------------------

TITLE: Trivy Convert Usage Example
DESCRIPTION: Demonstrates a complete workflow of generating a JSON report from an image scan and converting it to CycloneDX format.

LANGUAGE: bash
CODE:
  # report conversion
  $ trivy image --format json --output result.json --list-all-pkgs debian:11
  $ trivy convert --format cyclonedx --output result.cdx result.json

----------------------------------------

TITLE: Installing MySQL with Custom Password and Database
DESCRIPTION: Basic installation of MySQL chart with root password and database name configuration

LANGUAGE: bash
CODE:
$ helm install my-release \
  --set auth.rootPassword=secretpassword,auth.database=app_database \
    bitnami/mysql

----------------------------------------

TITLE: Basic Trivy Clean Command Syntax
DESCRIPTION: The basic syntax for the trivy clean command with flags.

LANGUAGE: bash
CODE:
trivy clean [flags]