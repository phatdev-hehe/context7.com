TITLE: Sending a Message to RabbitMQ Queue in JavaScript
DESCRIPTION: This code declares a queue and sends a message to it using RabbitMQ. It demonstrates queue assertion and message publishing.

LANGUAGE: javascript
CODE:
amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var queue = 'hello';
    var msg = 'Hello world';

    channel.assertQueue(queue, {
      durable: false
    });

    channel.sendToQueue(queue, Buffer.from(msg));
    console.log(" [x] Sent %s", msg);
  });
});

----------------------------------------

TITLE: Complete RabbitMQ Consumer Script in Python
DESCRIPTION: Full implementation of a Python script to receive messages from a RabbitMQ queue and handle program interruption.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika, sys, os

def main():
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    channel = connection.channel()

    channel.queue_declare(queue='hello')

    def callback(ch, method, properties, body):
        print(f" [x] Received {body}")

    channel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)

    print(' [*] Waiting for messages. To exit press CTRL+C')
    channel.start_consuming()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Interrupted')
        try:
            sys.exit(0)
        except SystemExit:
            os._exit(0)

----------------------------------------

TITLE: Receiving Messages from RabbitMQ Queue in JavaScript
DESCRIPTION: This code sets up a consumer to receive messages from a RabbitMQ queue. It declares the queue and sets up a callback to handle incoming messages.

LANGUAGE: javascript
CODE:
amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var queue = 'hello';

    channel.assertQueue(queue, {
      durable: false
    });

    console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", queue);
    channel.consume(queue, function(msg) {
      console.log(" [x] Received %s", msg.content.toString());
    }, {
        noAck: true
    });
  });
});

----------------------------------------

TITLE: Basic RabbitMQ Connection Setup in Java
DESCRIPTION: Demonstrates how to establish a basic connection to RabbitMQ using connection factory with default and custom parameters.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
// "guest"/"guest" by default, limited to localhost connections
factory.setUsername(userName);
factory.setPassword(password);
factory.setVirtualHost(virtualHost);
factory.setHost(hostName);
factory.setPort(portNumber);

Connection conn = factory.newConnection();

----------------------------------------

TITLE: Complete Worker Implementation
DESCRIPTION: Full implementation of worker with message acknowledgments, prefetch count, and proper queue declaration.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import time

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.queue_declare(queue='task_queue', durable=True)
print(' [*] Waiting for messages. To exit press CTRL+C')


def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")
    time.sleep(body.count(b'.'))
    print(" [x] Done")
    ch.basic_ack(delivery_tag=method.delivery_tag)


channel.basic_qos(prefetch_count=1)
channel.basic_consume(queue='task_queue', on_message_callback=callback)

channel.start_consuming()

----------------------------------------

TITLE: Complete NewTask.java Implementation for RabbitMQ Work Queue
DESCRIPTION: This is the complete implementation of the NewTask class for sending tasks to a RabbitMQ work queue using Java. It includes queue declaration, message persistence, and publishing.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.MessageProperties;

public class NewTask {

  private static final String TASK_QUEUE_NAME = "task_queue";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    try (Connection connection = factory.newConnection();
         Channel channel = connection.createChannel()) {
        channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);

        String message = String.join(" ", argv);

        channel.basicPublish("", TASK_QUEUE_NAME,
                MessageProperties.PERSISTENT_TEXT_PLAIN,
                message.getBytes("UTF-8"));
        System.out.println(" [x] Sent '" + message + "'");
    }
  }

}

----------------------------------------

TITLE: Importing RabbitMQ Client Libraries in Java
DESCRIPTION: Imports the necessary classes from the RabbitMQ Java client library to establish a connection and create a channel.

LANGUAGE: java
CODE:
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;

----------------------------------------

TITLE: Implementing RPC Server with Spring AMQP RabbitListener
DESCRIPTION: This class implements the RPC server using Spring AMQP's @RabbitListener annotation. It listens for incoming RPC requests, computes the Fibonacci number, and returns the result.

LANGUAGE: java
CODE:
package org.springframework.amqp.tutorials.tut6;

import org.springframework.amqp.rabbit.annotation.RabbitListener;

public class Tut6Server {

	@RabbitListener(queues = "tut.rpc.requests")
	// @SendTo("tut.rpc.replies") used when the
	// client doesn't set replyTo.
	public int fibonacci(int n) {
		System.out.println(" [x] Received request for " + n);
		int result = fib(n);
		System.out.println(" [.] Returned " + result);
		return result;
	}

	public int fib(int n) {
		return n == 0 ? 0 : n == 1 ? 1 : (fib(n - 1) + fib(n - 2));
	}

}

----------------------------------------

TITLE: Running RabbitMQ Docker Container
DESCRIPTION: Command to run the latest RabbitMQ 4.x version in a Docker container with management plugin enabled. Exposes both AMQP (5672) and management interface (15672) ports.

LANGUAGE: bash
CODE:
# latest RabbitMQ 4.x
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4-management

----------------------------------------

TITLE: Receiving and Processing Messages from Work Queue in Java
DESCRIPTION: This code shows how to receive and process messages from a work queue in RabbitMQ using Java. It includes message acknowledgment and simulated work processing.

LANGUAGE: Java
CODE:
DeliverCallback deliverCallback = (consumerTag, delivery) -> {
  String message = new String(delivery.getBody(), "UTF-8");

  System.out.println(" [x] Received '" + message + "'");
  try {
    doWork(message);
  } finally {
    System.out.println(" [x] Done");
  }
};
boolean autoAck = true; // acknowledgment is covered below
channel.basicConsume(TASK_QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });

----------------------------------------

TITLE: Checking RabbitMQ port connectivity
DESCRIPTION: Use rabbitmq-diagnostics to check port connectivity for a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q check_port_connectivity --node rabbit@target-hostname --address <ip-address-to-connect-to>
# If the check succeeds, the exit code will be 0

----------------------------------------

TITLE: Publishing a Message to RabbitMQ Queue in Python
DESCRIPTION: Send a 'Hello World!' message to the 'hello' queue using the basic_publish method.

LANGUAGE: python
CODE:
channel.basic_publish(exchange='',
                      routing_key='hello',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'"

----------------------------------------

TITLE: Installing amqp.node Client for RabbitMQ in JavaScript
DESCRIPTION: This command installs the amqp.node client library for RabbitMQ using npm.

LANGUAGE: bash
CODE:
npm install amqplib

----------------------------------------

TITLE: Starting RabbitMQ Message Consumption Loop
DESCRIPTION: Begin an infinite loop to consume messages from the RabbitMQ queue.

LANGUAGE: python
CODE:
print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()

----------------------------------------

TITLE: Declaring Queue and Publishing Message in RabbitMQ using Java
DESCRIPTION: Declares a queue and publishes a message to it using the RabbitMQ channel. The message is sent as a byte array.

LANGUAGE: java
CODE:
channel.queueDeclare(QUEUE_NAME, false, false, false, null);
String message = "Hello World!";
channel.basicPublish("", QUEUE_NAME, null, message.getBytes());
System.out.println(" [x] Sent '" + message + "'");

----------------------------------------

TITLE: Establishing RabbitMQ Connection in Python
DESCRIPTION: Connect to a RabbitMQ server running on localhost using Pika and create a channel.

LANGUAGE: python
CODE:
import pika

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

----------------------------------------

TITLE: Complete RabbitMQ Producer Script in Python
DESCRIPTION: Full implementation of a Python script to send a 'Hello World!' message to a RabbitMQ queue.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.queue_declare(queue='hello')

channel.basic_publish(exchange='', routing_key='hello', body='Hello World!')
print(" [x] Sent 'Hello World!'")
connection.close()

----------------------------------------

TITLE: Positively Acknowledging Deliveries in C#
DESCRIPTION: Example of how to positively acknowledge a single delivery using the RabbitMQ .NET client. The message will be discarded after acknowledgement.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // positively acknowledge a single delivery, the message will
                    // be discarded
                    channel.BasicAck(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Network Bandwidth Calculation Formula
DESCRIPTION: Formula for calculating minimum required network bandwidth for RabbitMQ cluster nodes based on message rate and size

LANGUAGE: ini
CODE:
MR * MS * 110% * 8

20K * 6 KB * 110% * 8 bit/B = 20000 * 6000 * 1.1 * 8 = 1.056 (gigabit/second)

----------------------------------------

TITLE: Complete Worker.java Implementation for RabbitMQ Work Queue
DESCRIPTION: This is the complete implementation of the Worker class for processing tasks from a RabbitMQ work queue using Java. It includes queue declaration, message acknowledgment, fair dispatch, and work simulation.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class Worker {

  private static final String TASK_QUEUE_NAME = "task_queue";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    final Connection connection = factory.newConnection();
    final Channel channel = connection.createChannel();

    channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);
    System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

    channel.basicQos(1);

    DeliverCallback deliverCallback = (consumerTag, delivery) -> {
        String message = new String(delivery.getBody(), "UTF-8");

        System.out.println(" [x] Received '" + message + "'");
        try {
            doWork(message);
        } finally {
            System.out.println(" [x] Done");
            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
        }
    };
    channel.basicConsume(TASK_QUEUE_NAME, false, deliverCallback, consumerTag -> { });
  }

  private static void doWork(String task) {
    for (char ch : task.toCharArray()) {
        if (ch == '.') {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException _ignored) {
                Thread.currentThread().interrupt();
            }
        }
    }
  }
}

----------------------------------------

TITLE: Complete Log Receiver Implementation
DESCRIPTION: Full implementation of a program that receives logs filtered by severity levels using RabbitMQ direct exchange.

LANGUAGE: java
CODE:
import com.rabbitmq.client.*;

public class ReceiveLogsDirect {

  private static final String EXCHANGE_NAME = "direct_logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    Connection connection = factory.newConnection();
    Channel channel = connection.createChannel();

    channel.exchangeDeclare(EXCHANGE_NAME, "direct");
    String queueName = channel.queueDeclare().getQueue();

    if (argv.length < 1) {
        System.err.println("Usage: ReceiveLogsDirect [info] [warning] [error]");
        System.exit(1);
    }

    for (String severity : argv) {
        channel.queueBind(queueName, EXCHANGE_NAME, severity);
    }
    System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

    DeliverCallback deliverCallback = (consumerTag, delivery) -> {
        String message = new String(delivery.getBody(), "UTF-8");
        System.out.println(" [x] Received '" +
            delivery.getEnvelope().getRoutingKey() + "':'" + message + "'");
    };
    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });
  }
}

----------------------------------------

TITLE: Establishing RabbitMQ Connection in Elixir
DESCRIPTION: Establishes a connection to RabbitMQ server and opens a channel. This is a prerequisite for sending or receiving messages.

LANGUAGE: elixir
CODE:
{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

----------------------------------------

TITLE: Batch Message Publishing with RabbitMQ Confirms
DESCRIPTION: Implementation of batch message publishing with confirms. This approach publishes messages in batches of 100 and waits for confirmation of the entire batch, offering better throughput.

LANGUAGE: java
CODE:
int batchSize = 100;
int outstandingMessageCount = 0;
while (thereAreMessagesToPublish()) {
    byte[] body = ...;
    BasicProperties properties = ...;
    channel.basicPublish(exchange, queue, properties, body);
    outstandingMessageCount++;
    if (outstandingMessageCount == batchSize) {
        channel.waitForConfirmsOrDie(5_000);
        outstandingMessageCount = 0;
    }
}
if (outstandingMessageCount > 0) {
    channel.waitForConfirmsOrDie(5_000);
}

----------------------------------------

TITLE: Installing Pika Python Client for RabbitMQ
DESCRIPTION: Use pip to install the Pika library, which is the recommended Python client for RabbitMQ.

LANGUAGE: bash
CODE:
python -m pip install pika --upgrade

----------------------------------------

TITLE: Enabling Publisher Confirms on a Channel in C#
DESCRIPTION: This snippet demonstrates how to enable publisher confirms on a RabbitMQ channel using the CreateChannelOptions class in C#.

LANGUAGE: csharp
CODE:
var channel = await connection.CreateChannelAsync(
    new CreateChannelOptions
    {
        ConfirmPublish = true
    });

----------------------------------------

TITLE: Complete Worker Implementation (worker.js)
DESCRIPTION: Full implementation of the worker consumer including connection handling, channel creation, prefetch settings, and message processing with acknowledgments.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var queue = 'task_queue';

    channel.assertQueue(queue, {
      durable: true
    });
    channel.prefetch(1);
    console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", queue);
    channel.consume(queue, function(msg) {
      var secs = msg.content.toString().split('.').length - 1;

      console.log(" [x] Received %s", msg.content.toString());
      setTimeout(function() {
        console.log(" [x] Done");
        channel.ack(msg);
      }, secs * 1000);
    }, {
      noAck: false
    });
  });
});

----------------------------------------

TITLE: Installing Go RabbitMQ Client
DESCRIPTION: Commands to initialize a Go module and install the RabbitMQ AMQP client library

LANGUAGE: go
CODE:
go mod init <your-module-name>
go get github.com/rabbitmq/amqp091-go

----------------------------------------

TITLE: Setting Up RabbitMQ Connection and Channel in Java
DESCRIPTION: Creates a connection to the RabbitMQ server and opens a channel for communication. Uses try-with-resources for automatic resource management.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
factory.setHost("localhost");
try (Connection connection = factory.newConnection();
     Channel channel = connection.createChannel()) {

}

----------------------------------------

TITLE: Enabling the Management Plugin
DESCRIPTION: Command to enable the RabbitMQ management plugin using rabbitmq-plugins tool

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_management

----------------------------------------

TITLE: Basic Connection Setup in C#
DESCRIPTION: Establishing a connection to RabbitMQ using ConnectionFactory with hostname and credentials

LANGUAGE: csharp
CODE:
ConnectionFactory factory = new ConnectionFactory();
// "guest"/"guest" by default, limited to localhost connections
factory.UserName = user;
factory.Password = pass;
factory.VirtualHost = vhost;
factory.HostName = hostName;

IConnection conn = await factory.CreateConnectionAsync();

----------------------------------------

TITLE: Configuring Authentication Backends in RabbitMQ
DESCRIPTION: Examples of configuring different authentication backends in RabbitMQ's configuration file.

LANGUAGE: ini
CODE:
# rabbitmq.conf
#
# 1 here is a backend name. It can be anything.
# Since we only really care about backend
# ordering, we use numbers throughout this guide.
#
# "internal" is an alias for rabbit_auth_backend_internal
auth_backends.1 = internal

# note that the module name begins with a "rabbit_", not "rabbitmq_", like plugin
# names usually do
auth_backends.1 = rabbit_auth_backend_ip_range

auth_backends.1 = ldap
auth_backends.2 = internal

# rabbitmq.conf
#
auth_backends.1 = ldap
# uses module name instead of a short alias, "http"
auth_backends.2 = rabbit_auth_backend_http

# See HTTP backend docs for details
auth_http.user_path = http://my-authenticator-app/auth/user
auth_http.vhost_path = http://my-authenticator-app/auth/vhost
auth_http.resource_path = http://my-authenticator-app/auth/resource
auth_http.topic_path = http://my-authenticator-app/auth/topic

# rabbitmq.conf
#
auth_backends.1.authn = internal
# uses module name because this backend is from a 3rd party
auth_backends.1.authz = rabbit_auth_backend_ip_range

# rabbitmq.conf
#
auth_backends.1.authn = ldap
auth_backends.1.authz = internal

# rabbitmq.conf
#
auth_backends.1.authn = ldap
auth_backends.1.authz = internal
auth_backends.2       = internal

----------------------------------------

TITLE: RPC Server Implementation - Elixir
DESCRIPTION: Complete RPC server implementation including Fibonacci calculation and message handling

LANGUAGE: elixir
CODE:
defmodule FibServer do
  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n) when n > 1, do: fib(n-1) + fib(n-2)

  def wait_for_messages(channel) do
    receive do
      {:basic_deliver, payload, meta} ->
        {n, _} = Integer.parse(payload)
        IO.puts " [.] fib(#{n})"
        response = fib(n)

        AMQP.Basic.publish(channel,
                           "",
                           meta.reply_to,
                           "#{response}",
                           correlation_id: meta.correlation_id)
        AMQP.Basic.ack(channel, meta.delivery_tag)

        wait_for_messages(channel)
    end
  end
end

{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

AMQP.Queue.declare(channel, "rpc_queue")
AMQP.Basic.qos(channel, prefetch_count: 1)
AMQP.Basic.consume(channel, "rpc_queue")
IO.puts " [x] Awaiting RPC requests"

FibServer.wait_for_messages(channel)

----------------------------------------

TITLE: Emitting Logs with Topic Routing in Python
DESCRIPTION: This script demonstrates how to publish messages to a RabbitMQ topic exchange. It uses a routing key with two words (facility and severity) and allows custom messages to be sent.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='topic_logs', exchange_type='topic')

routing_key = sys.argv[1] if len(sys.argv) > 2 else 'anonymous.info'
message = ' '.join(sys.argv[2:]) or 'Hello World!'
channel.basic_publish(
    exchange='topic_logs', routing_key=routing_key, body=message)
print(f" [x] Sent {routing_key}:{message}")
connection.close()

----------------------------------------

TITLE: RabbitMQ Default User Configuration
DESCRIPTION: Configuration options for overriding default user credentials

LANGUAGE: ini
CODE:
# default is "guest"
default_user = a-user
# default is "guest"
default_pass = 768a852ed69ce916fa7faa278c962de3e4275e5f

----------------------------------------

TITLE: Complete ReceiveLogsDirect Implementation in C# for RabbitMQ
DESCRIPTION: This is the full implementation of the ReceiveLogsDirect class, which subscribes to and receives log messages of specified severities from a RabbitMQ direct exchange.

LANGUAGE: csharp
CODE:
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

var factory = new ConnectionFactory { HostName = "localhost" };
using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

channel.ExchangeDeclare(exchange: "direct_logs", type: ExchangeType.Direct);
// declare a server-named queue
var queueName = channel.QueueDeclare().QueueName;

if (args.Length < 1)
{
    Console.Error.WriteLine("Usage: {0} [info] [warning] [error]", Environment.GetCommandLineArgs()[0]);
    Console.WriteLine(" Press [enter] to exit.");
    Console.ReadLine();
    Environment.ExitCode = 1;
    return;
}

foreach (var severity in args)
{
    channel.QueueBind(queue: queueName,
                      exchange: "direct_logs",
                      routingKey: severity);
}

Console.WriteLine(" [*] Waiting for messages.");

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (model, ea) =>
{
    var body = ea.Body.ToArray();
    var message = Encoding.UTF8.GetString(body);
    var routingKey = ea.RoutingKey;
    Console.WriteLine($" [x] Received '{routingKey}':'{message}'");
};
channel.BasicConsume(queue: queueName,
                     autoAck: true,
                     consumer: consumer);

Console.WriteLine(" Press [enter] to exit.");
Console.ReadLine();

----------------------------------------

TITLE: Enabling RabbitMQ Management Plugin
DESCRIPTION: Command to enable the management plugin using rabbitmq-plugins tool

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_management

----------------------------------------

TITLE: Implementing Topic Exchange Consumer in Java for RabbitMQ
DESCRIPTION: This code snippet shows how to create a consumer that uses a topic exchange in RabbitMQ. It sets up a connection, declares a topic exchange, creates a queue, binds the queue to the exchange with routing keys, and consumes messages.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class ReceiveLogsTopic {

  private static final String EXCHANGE_NAME = "topic_logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    Connection connection = factory.newConnection();
    Channel channel = connection.createChannel();

    channel.exchangeDeclare(EXCHANGE_NAME, "topic");
    String queueName = channel.queueDeclare().getQueue();

    if (argv.length < 1) {
        System.err.println("Usage: ReceiveLogsTopic [binding_key]...");
        System.exit(1);
    }

    for (String bindingKey : argv) {
        channel.queueBind(queueName, EXCHANGE_NAME, bindingKey);
    }

    System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

    DeliverCallback deliverCallback = (consumerTag, delivery) -> {
        String message = new String(delivery.getBody(), "UTF-8");
        System.out.println(" [x] Received '" +
            delivery.getEnvelope().getRoutingKey() + "':'" + message + "'");
    };
    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });
  }
}

----------------------------------------

TITLE: Establishing RabbitMQ Connection in C#
DESCRIPTION: Create a connection to a RabbitMQ server running on localhost using the ConnectionFactory class.

LANGUAGE: C#
CODE:
var factory = new ConnectionFactory { HostName = "localhost" };
using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

----------------------------------------

TITLE: Enabling RabbitMQ Management Plugin
DESCRIPTION: Command to enable the RabbitMQ management plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_management

----------------------------------------

TITLE: Running RabbitMQ Consumer in Terminal
DESCRIPTION: Command to start the Python consumer script, which will wait for messages from the RabbitMQ queue.

LANGUAGE: bash
CODE:
python receive.py

----------------------------------------

TITLE: Comprehensive Health Check
DESCRIPTION: Shows how to perform a more comprehensive health check by checking running status and alarms

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
# if both checks succeed, the exit code will be 0

----------------------------------------

TITLE: Configuring RabbitMQ Work Queues with Spring AMQP
DESCRIPTION: Spring configuration class that sets up the work queue, defines receiver workers and sender beans. Uses Spring profiles to separate sender and receiver configurations.

LANGUAGE: java
CODE:
import org.springframework.amqp.core.Queue;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Profile({"tut2", "work-queues"})
@Configuration
public class Tut2Config {

    @Bean
    public Queue hello() {
        return new Queue("hello");
    }

    @Profile("receiver")
    private static class ReceiverConfig {

        @Bean
        public Tut2Receiver receiver1() {
            return new Tut2Receiver(1);
        }

        @Bean
        public Tut2Receiver receiver2() {
            return new Tut2Receiver(2);
        }
    }

    @Profile("sender")
    @Bean
    public Tut2Sender sender() {
        return new Tut2Sender();
    }
}

----------------------------------------

TITLE: Running RabbitMQ 4.0 Management Docker Container
DESCRIPTION: Command to run the latest RabbitMQ 4.0.x management Docker container, exposing ports 5672 and 15672 for AMQP and management interface respectively.

LANGUAGE: bash
CODE:
# latest RabbitMQ 4.0.x
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4.0-management

----------------------------------------

TITLE: RabbitMQ Default User Configuration
DESCRIPTION: Configuration options for overriding default user credentials

LANGUAGE: ini
CODE:
# default is "guest"
default_user = a-user
# default is "guest"
default_pass = 768a852ed69ce916fa7faa278c962de3e4275e5f

----------------------------------------

TITLE: Comprehensive Health Check
DESCRIPTION: Shows how to perform a more comprehensive health check by checking running status and alarms

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
# if both checks succeed, the exit code will be 0

----------------------------------------

TITLE: Removing a Node from the Cluster
DESCRIPTION: Commands to remove rabbit@rabbit3 from the cluster and return it to independent operation.

LANGUAGE: bash
CODE:
# on rabbit3
rabbitmqctl stop_app
# on rabbit2
rabbitmqctl forget_cluster_node rabbit@rabbit3

----------------------------------------

TITLE: Basic Exchange and Queue Declaration in Java
DESCRIPTION: Demonstrates declaring exchanges and queues and binding them together using the RabbitMQ Java client.

LANGUAGE: java
CODE:
channel.exchangeDeclare(exchangeName, "direct", true);
String queueName = channel.queueDeclare().getQueue();
channel.queueBind(queueName, exchangeName, routingKey);

----------------------------------------

TITLE: Guaranteed Delivery with Transactions in RabbitMQ (Java)
DESCRIPTION: This snippet demonstrates how to use transactions in RabbitMQ for guaranteed message delivery. It shows both the publisher and consumer code using the txSelect() and txCommit() methods.

LANGUAGE: java
CODE:
ch.txSelect();
for (int i = 0; i < MSG_COUNT; ++i) {
        ch.basicPublish("", QUEUE_NAME,
                            MessageProperties.PERSISTENT_BASIC,
                            "nop".getBytes());
        ch.txCommit();
}

LANGUAGE: java
CODE:
QueueingConsumer qc = new QueueingConsumer(ch);
ch.basicConsume(QUEUE_NAME, true, qc);
for (int i = 0; i < MSG_COUNT; ++i) {
        qc.nextDelivery();
        System.out.printf("Consumed %d\n", i);
}

----------------------------------------

TITLE: Environment Variable Configuration for TLS
DESCRIPTION: Example TLS configuration using SSL options in rabbitmq.conf

LANGUAGE: ini
CODE:
ssl_options.cacertfile           = /path/to/ca_certificate.pem
ssl_options.certfile             = /path/to/server_certificate.pem
ssl_options.keyfile              = /path/to/server_key.pem
ssl_options.verify               = verify_peer
ssl_options.fail_if_no_peer_cert = true

----------------------------------------

TITLE: Message Consumer Setup in RabbitMQ Java
DESCRIPTION: Demonstrates how to set up a message consumer with manual acknowledgments using the RabbitMQ Java client.

LANGUAGE: java
CODE:
boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "myConsumerTag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             String routingKey = envelope.getRoutingKey();
             String contentType = properties.getContentType();
             long deliveryTag = envelope.getDeliveryTag();
             channel.basicAck(deliveryTag, false);
         }
     });

----------------------------------------

TITLE: Configuring RabbitMQ Quorum Queue Settings
DESCRIPTION: Example of configuring quorum queue settings in advanced.config file, showing how to set default cluster size and commands soft limit.

LANGUAGE: erlang
CODE:
[
 %% five replicas by default, only makes sense for nine node clusters
 {rabbit, [{quorum_cluster_size, 5},
           {quorum_commands_soft_limit, 64}]}
].

----------------------------------------

TITLE: Starting Multiple RabbitMQ Nodes on a Single Machine
DESCRIPTION: Commands to start and cluster multiple RabbitMQ nodes on a single machine with different ports and node names.

LANGUAGE: bash
CODE:
RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached
RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached
rabbitmqctl -n hare stop_app
rabbitmqctl -n hare join_cluster rabbit@`hostname -s`
rabbitmqctl -n hare start_app

----------------------------------------

TITLE: RPC Server Implementation in Go with RabbitMQ
DESCRIPTION: Complete RPC server implementation that processes Fibonacci calculation requests and handles message correlation.

LANGUAGE: go
CODE:
package main

import (
        "context"
        "log"
        "strconv"
        "time"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func fib(n int) int {
        if n == 0 {
                return 0
        } else if n == 1 {
                return 1
        } else {
                return fib(n-1) + fib(n-2)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        q, err := ch.QueueDeclare(
                "rpc_queue", // name
                false,       // durable
                false,       // delete when unused
                false,       // exclusive
                false,       // no-wait
                nil,         // arguments
        )
        failOnError(err, "Failed to declare a queue")

        err = ch.Qos(
                1,     // prefetch count
                0,     // prefetch size
                false, // global
        )
        failOnError(err, "Failed to set QoS")

        msgs, err := ch.Consume(
                q.Name, // queue
                "",     // consumer
                false,  // auto-ack
                false,  // exclusive
                false,  // no-local
                false,  // no-wait
                nil,    // args
        )
        failOnError(err, "Failed to register a consumer")

        var forever chan struct{}

        go func() {
                ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
                defer cancel()
                for d := range msgs {
                        n, err := strconv.Atoi(string(d.Body))
                        failOnError(err, "Failed to convert body to integer")

                        log.Printf(" [.] fib(%d)", n)
                        response := fib(n)

                        err = ch.PublishWithContext(ctx,
                                "",        // exchange
                                d.ReplyTo, // routing key
                                false,     // mandatory
                                false,     // immediate
                                amqp.Publishing{
                                        ContentType:   "text/plain",
                                        CorrelationId: d.CorrelationId,
                                        Body:          []byte(strconv.Itoa(response)),
                                })
                        failOnError(err, "Failed to publish a message")

                        d.Ack(false)
                }
        }()

        log.Printf(" [*] Awaiting RPC requests")
        <-forever
}

----------------------------------------

TITLE: Message Publishing in RabbitMQ Java Client
DESCRIPTION: Shows different ways to publish messages including with custom properties and headers.

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);

----------------------------------------

TITLE: Setting Per-Consumer and Per-Channel Prefetch Limits in Java
DESCRIPTION: This example demonstrates how to set both per-consumer and per-channel prefetch limits, which are enforced independently.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10, false); // Per consumer limit
channel.basicQos(15, true);  // Per channel limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Declaring Durable Queue in RabbitMQ with Java
DESCRIPTION: This snippet demonstrates how to declare a durable queue in RabbitMQ using Java, ensuring the queue survives server restarts.

LANGUAGE: Java
CODE:
boolean durable = true;
channel.queueDeclare("task_queue", durable, false, false, null);

----------------------------------------

TITLE: Implementing a Log Message Consumer in Java with RabbitMQ
DESCRIPTION: Complete implementation of a consumer that receives log messages from a fanout exchange using the RabbitMQ Java client. It creates a temporary queue and binds it to the 'logs' exchange.

LANGUAGE: java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class ReceiveLogs {
  private static final String EXCHANGE_NAME = "logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    Connection connection = factory.newConnection();
    Channel channel = connection.createChannel();

    channel.exchangeDeclare(EXCHANGE_NAME, "fanout");
    String queueName = channel.queueDeclare().getQueue();
    channel.queueBind(queueName, EXCHANGE_NAME, "");

    System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

    DeliverCallback deliverCallback = (consumerTag, delivery) -> {
        String message = new String(delivery.getBody(), "UTF-8");
        System.out.println(" [x] Received '" + message + "'");
    };
    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });
  }
}

----------------------------------------

TITLE: Creating RabbitMQ Stream Environment in Java
DESCRIPTION: This code snippet demonstrates how to create an Environment instance, which is the entry point for the RabbitMQ Stream Java client. It establishes a connection to the RabbitMQ server.

LANGUAGE: java
CODE:
try (Environment environment = Environment.builder()
        .uri("rabbitmq-stream://localhost:5552").build()) {

 // ...

}

----------------------------------------

TITLE: Implementing Topic Exchange Publisher in Java for RabbitMQ
DESCRIPTION: This code snippet demonstrates how to create a publisher that uses a topic exchange in RabbitMQ. It sets up a connection, declares a topic exchange, and publishes messages with routing keys.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

public class EmitLogTopic {

  private static final String EXCHANGE_NAME = "topic_logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    try (Connection connection = factory.newConnection();
         Channel channel = connection.createChannel()) {

        channel.exchangeDeclare(EXCHANGE_NAME, "topic");

        String routingKey = getRouting(argv);
        String message = getMessage(argv);

        channel.basicPublish(EXCHANGE_NAME, routingKey, null, message.getBytes("UTF-8"));
        System.out.println(" [x] Sent '" + routingKey + "':'" + message + "'");
    }
  }
  //...
}

----------------------------------------

TITLE: UAA Signing Key Configuration
DESCRIPTION: Example configuration for using UAA signing keys in OAuth 2.0 authentication

LANGUAGE: ini
CODE:
auth_oauth2.resource_server_id = my_rabbit_server
auth_oauth2.signing_keys.a-key-ID = /path-to-signing-key-pem-file

----------------------------------------

TITLE: Enabling RabbitMQ Plugins via CLI
DESCRIPTION: Commands for enabling and disabling RabbitMQ plugins using the rabbitmq-plugins CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable <plugin-name>
rabbitmq-plugins disable <plugin-name>

----------------------------------------

TITLE: UAA Signing Key Configuration
DESCRIPTION: Example configuration for using UAA signing keys in OAuth 2.0 authentication

LANGUAGE: ini
CODE:
auth_oauth2.resource_server_id = my_rabbit_server
auth_oauth2.signing_keys.a-key-ID = /path-to-signing-key-pem-file

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugin
DESCRIPTION: Command to enable the RabbitMQ Stream plugin using rabbitmq-plugins CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Implementing RPC Client in PHP with RabbitMQ
DESCRIPTION: This code implements an RPC client using RabbitMQ in PHP. It sets up a connection, creates a callback queue, and provides methods to send RPC requests and handle responses.

LANGUAGE: php
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

class FibonacciRpcClient
{
    private $connection;
    private $channel;
    private $callback_queue;
    private $response;
    private $corr_id;

    public function __construct()
    {
        $this->connection = new AMQPStreamConnection(
            'localhost',
            5672,
            'guest',
            'guest'
        );
        $this->channel = $this->connection->channel();
        list($this->callback_queue, ,) = $this->channel->queue_declare(
            "",
            false,
            false,
            true,
            false
        );
        $this->channel->basic_consume(
            $this->callback_queue,
            '',
            false,
            true,
            false,
            false,
            array(
                $this,
                'onResponse'
            )
        );
    }

    public function onResponse($rep)
    {
        if ($rep->get('correlation_id') == $this->corr_id) {
            $this->response = $rep->body;
        }
    }

    public function call($n)
    {
        $this->response = null;
        $this->corr_id = uniqid();

        $msg = new AMQPMessage(
            (string) $n,
            array(
                'correlation_id' => $this->corr_id,
                'reply_to' => $this->callback_queue
            )
        );
        $this->channel->basic_publish($msg, '', 'rpc_queue');
        while (!$this->response) {
            $this->channel->wait();
        }
        return intval($this->response);
    }
}

$fibonacci_rpc = new FibonacciRpcClient();
$response = $fibonacci_rpc->call(30);
echo ' [.] Got ', $response, "\n";

----------------------------------------

TITLE: Setting Up RabbitMQ Consumer in Python
DESCRIPTION: Configure the channel to consume messages from the 'hello' queue using the defined callback function.

LANGUAGE: python
CODE:
channel.basic_consume(queue='hello',
                      auto_ack=True,
                      on_message_callback=callback)

----------------------------------------

TITLE: Basic RabbitMQ Configuration File
DESCRIPTION: Example of a basic rabbitmq.conf file showing port configuration

LANGUAGE: ini
CODE:
# this is a comment
listeners.tcp.default = 5673

----------------------------------------

TITLE: Complete Log Message Consumer Implementation
DESCRIPTION: Full implementation of a consumer that receives log messages from the fanout exchange. Includes queue creation, binding, and message consumption logic.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'logs';

    channel.assertExchange(exchange, 'fanout', {
      durable: false
    });

    channel.assertQueue('', {
      exclusive: true
    }, function(error2, q) {
      if (error2) {
        throw error2;
      }
      console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", q.queue);
      channel.bindQueue(q.queue, exchange, '');

      channel.consume(q.queue, function(msg) {
      	if(msg.content) {
	        console.log(" [x] %s", msg.content.toString());
	      }
      }, {
        noAck: true
      });
    });
  });
});

----------------------------------------

TITLE: Default User Definition Example
DESCRIPTION: JSON configuration example for creating a default administrator user with full permissions.

LANGUAGE: javascript
CODE:
    "users": [
        {
            "name": "guest",
            "password_hash": "9/1i+jKFRpbTRV1PtRnzFFYibT3cEpP92JeZ8YKGtflf4e/u",
            "tags": ["administrator"]
        }
    ],
    "permissions":[
        {
            "user":"guest",
            "vhost":"/",
            "configure":".*",
            "read":".*",
            "write":".*"}
    ]

----------------------------------------

TITLE: Connection Setup with URI in C#
DESCRIPTION: Creating a RabbitMQ connection using a connection URI string

LANGUAGE: csharp
CODE:
ConnectionFactory factory = new ConnectionFactory();
factory.Uri = new Uri("amqp://user:pass@hostName:port/vhost");

IConnection conn = await factory.CreateConnectionAsync();

----------------------------------------

TITLE: Declaring a Queue in RabbitMQ using Python
DESCRIPTION: Create a queue named 'hello' in RabbitMQ using the channel's queue_declare method.

LANGUAGE: python
CODE:
channel.queue_declare(queue='hello')

----------------------------------------

TITLE: UAA Signing Key Configuration
DESCRIPTION: Example configuration for using UAA signing keys in OAuth 2.0 authentication

LANGUAGE: ini
CODE:
auth_oauth2.resource_server_id = my_rabbit_server
auth_oauth2.signing_keys.a-key-ID = /path-to-signing-key-pem-file

----------------------------------------

TITLE: Installing RabbitMQ Cluster Operator with kubectl
DESCRIPTION: Command to install the latest version of the RabbitMQ Cluster Operator using kubectl apply. This creates necessary Kubernetes resources including a new namespace, custom resource definition, and RBAC roles.

LANGUAGE: bash
CODE:
kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

----------------------------------------

TITLE: Generating RabbitMQ Server Report
DESCRIPTION: Generates a comprehensive server status report for support purposes.

LANGUAGE: bash
CODE:
rabbitmqctl report > server_report.txt

----------------------------------------

TITLE: Implementing Log Receiver with Direct Exchange in Ruby
DESCRIPTION: Complete implementation of a script that receives log messages based on specified severity levels using a direct exchange.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

abort "Usage: #{$PROGRAM_NAME} [info] [warning] [error]" if ARGV.empty?

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.direct('direct_logs')
queue = channel.queue('', exclusive: true)

ARGV.each do |severity|
  queue.bind(exchange, routing_key: severity)
end

puts ' [*] Waiting for logs. To exit press CTRL+C'

begin
  queue.subscribe(block: true) do |delivery_info, _properties, body|
    puts " [x] #{delivery_info.routing_key}:#{body}"
  end
rescue Interrupt => _
  channel.close
  connection.close

  exit(0)
end

----------------------------------------

TITLE: Implementing RPC Server in PHP with RabbitMQ
DESCRIPTION: This code sets up an RPC server using RabbitMQ in PHP. It declares a queue, defines the Fibonacci function, and sets up a callback to process incoming RPC requests.

LANGUAGE: php
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->queue_declare('rpc_queue', false, false, false, false);

function fib($n)
{
    if ($n == 0) {
        return 0;
    }
    if ($n == 1) {
        return 1;
    }
    return fib($n-1) + fib($n-2);
}

echo " [x] Awaiting RPC requests\n";
$callback = function ($req) {
    $n = intval($req->getBody());
    echo ' [.] fib(', $n, ")\n";

    $msg = new AMQPMessage(
        (string) fib($n),
        array('correlation_id' => $req->get('correlation_id'))
    );

    $req->getChannel()->basic_publish(
        $msg,
        '',
        $req->get('reply_to')
    );
    $req->ack();
};

$channel->basic_qos(null, 1, false);
$channel->basic_consume('rpc_queue', '', false, false, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

$channel->close();
$connection->close();

----------------------------------------

TITLE: RPC Server Implementation - Python
DESCRIPTION: Complete RPC server implementation that handles Fibonacci calculation requests and sends back responses

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))

channel = connection.channel()

channel.queue_declare(queue='rpc_queue')

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

def on_request(ch, method, props, body):
    n = int(body)

    print(f" [.] fib({n})")
    response = fib(n)

    ch.basic_publish(exchange='',
                     routing_key=props.reply_to,
                     properties=pika.BasicProperties(correlation_id = \
                                                         props.correlation_id),
                     body=str(response))
    ch.basic_ack(delivery_tag=method.delivery_tag)

channel.basic_qos(prefetch_count=1)
channel.basic_consume(queue='rpc_queue', on_message_callback=on_request)

print(" [x] Awaiting RPC requests")
channel.start_consuming()

----------------------------------------

TITLE: Setting Fair Dispatch in RabbitMQ with Java
DESCRIPTION: This snippet demonstrates how to set fair dispatch in RabbitMQ using Java, ensuring workers only receive one message at a time until processed.

LANGUAGE: Java
CODE:
int prefetchCount = 1;
channel.basicQos(prefetchCount);

----------------------------------------

TITLE: Receiving Logs with Topic-Based Filtering in Python
DESCRIPTION: This script sets up a consumer that binds to a RabbitMQ topic exchange with specified routing patterns. It allows flexible subscription to logs based on facility and severity using wildcard characters (* and #).

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='topic_logs', exchange_type='topic')

result = channel.queue_declare('', exclusive=True)
queue_name = result.method.queue

binding_keys = sys.argv[1:]
if not binding_keys:
    sys.stderr.write("Usage: %s [binding_key]...\n" % sys.argv[0])
    sys.exit(1)

for binding_key in binding_keys:
    channel.queue_bind(
        exchange='topic_logs', queue=queue_name, routing_key=binding_key)

print(' [*] Waiting for logs. To exit press CTRL+C')


def callback(ch, method, properties, body):
    print(f" [x] {method.routing_key}:{body}")


channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

channel.start_consuming()

----------------------------------------

TITLE: Implementing Task Publisher in Swift with RabbitMQ
DESCRIPTION: Implementation of a task publisher that sends messages to a durable queue. The method creates a connection, declares a durable queue, and publishes messages with persistence enabled.

LANGUAGE: swift
CODE:
func newTask(_ msg: String) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let q = ch.queue("task_queue", options: .durable)
    let msgData = msg.data(using: .utf8)
    ch.defaultExchange().publish(msgData, routingKey: q.name, persistent: true)
    print("Sent \(msg)")
    conn.close()
}

----------------------------------------

TITLE: Setting Up RabbitMQ Consumer in Java
DESCRIPTION: Configures a consumer to receive messages from a RabbitMQ queue. Uses a DeliverCallback to handle incoming messages asynchronously.

LANGUAGE: java
CODE:
DeliverCallback deliverCallback = (consumerTag, delivery) -> {
    String message = new String(delivery.getBody(), "UTF-8");
    System.out.println(" [x] Received '" + message + "'");
};
channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> { });

----------------------------------------

TITLE: Implementing Worker Consumer in Swift with RabbitMQ
DESCRIPTION: Implementation of a worker consumer that processes messages from the queue. Includes message acknowledgment, prefetch limits, and simulated work processing.

LANGUAGE: swift
CODE:
func workerNamed(_ name: String) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let q = ch.queue("task_queue", options: .durable)
    ch.basicQos(1, global: false)
    print("\(name): Waiting for messages")
    let manualAck = RMQBasicConsumeOptions()
    q.subscribe(manualAck, handler: {(_ message: RMQMessage) -> Void in
        let messageText = String(data: message.body, encoding: .utf8)
        print("\(name): Received \(messageText)")
        // imitate some work
        let sleepTime = UInt(messageText.components(separatedBy: ".").count) - 1
        print("\(name): Sleeping for \(sleepTime) seconds")
        sleep(sleepTime)
        ch.ack(message.deliveryTag)
    })
}

----------------------------------------

TITLE: Testing TCP Connection with Telnet
DESCRIPTION: This snippet demonstrates how to use telnet to test TCP connectivity to a RabbitMQ node on the default AMQP port (5672). It shows both a successful connection attempt and a failed attempt to an incorrect port.

LANGUAGE: bash
CODE:
telnet localhost 5672
# => Trying ::1...
# => Connected to localhost.
# => Escape character is '^]'.
12345 # enter this and hit Enter to send
# => AMQP	Connection closed by foreign host.

LANGUAGE: bash
CODE:
telnet localhost 5673
# => Trying ::1...
# => telnet: connect to address ::1: Connection refused
# => Trying 127.0.0.1...
# => telnet: connect to address 127.0.0.1: Connection refused
# => telnet: Unable to connect to remote host

----------------------------------------

TITLE: Direct Exchange Declaration
DESCRIPTION: Creates a direct exchange for routing messages based on exact routing key matches.

LANGUAGE: java
CODE:
channel.exchangeDeclare(EXCHANGE_NAME, "direct");

----------------------------------------

TITLE: Installing RabbitMQ using Cloudsmith apt repository on Ubuntu 24.04
DESCRIPTION: A bash script that sets up the Cloudsmith apt repository, installs Erlang dependencies, and installs RabbitMQ on Ubuntu 24.04.

LANGUAGE: bash
CODE:
#!/bin/sh

sudo apt-get install curl gnupg apt-transport-https -y

## Team RabbitMQ's main signing key
curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null
## Community mirror of Cloudsmith: modern Erlang repository
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null
## Community mirror of Cloudsmith: RabbitMQ repository
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null

## Add apt repositories maintained by Team RabbitMQ
sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF
## Provides modern Erlang/OTP releases
##
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main

# another mirror for redundancy
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main

## Provides RabbitMQ
##
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main

# another mirror for redundancy
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
EOF

## Update package indices
sudo apt-get update -y

## Install Erlang packages
##
## For versions not compatible with the latest available Erlang series, which is the case
## for 3.13.x, apt must be instructed to install specifically Erlang 26.
## Alternatively this can be done via version pinning, documented further in this guide.
supported_erlang_version="1:26.2.5.6-1"
sudo apt-get install -y erlang-base=$supported_erlang_version \
                        erlang-asn1=$supported_erlang_version \
                        erlang-crypto=$supported_erlang_version \
                        erlang-eldap=$supported_erlang_version \
                        erlang-ftp=$supported_erlang_version \
                        erlang-inets=$supported_erlang_version \
                        erlang-mnesia=$supported_erlang_version \
                        erlang-os-mon=$supported_erlang_version \
                        erlang-parsetools=$supported_erlang_version \
                        erlang-public-key=$supported_erlang_version \
                        erlang-runtime-tools=$supported_erlang_version \
                        erlang-snmp=$supported_erlang_version \
                        erlang-ssl=$supported_erlang_version \
                        erlang-syntax-tools=$supported_erlang_version \
                        erlang-tftp=$supported_erlang_version \
                        erlang-tools=$supported_erlang_version \
                        erlang-xmerl=$supported_erlang_version

## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugin
DESCRIPTION: Command to enable the RabbitMQ Stream plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Creating Temporary Queue in RabbitMQ
DESCRIPTION: Creates a temporary exclusive queue with a server-generated name. The queue will be automatically deleted when the connection closes.

LANGUAGE: javascript
CODE:
channel.assertQueue('', {
  exclusive: true
});

----------------------------------------

TITLE: Receiving Logs from Direct Exchange in RabbitMQ using JavaScript
DESCRIPTION: This script connects to RabbitMQ, creates a direct exchange, and sets up a consumer that binds to the exchange with specified severities as routing keys.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

var args = process.argv.slice(2);

if (args.length == 0) {
  console.log("Usage: receive_logs_direct.js [info] [warning] [error]");
  process.exit(1);
}

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'direct_logs';

    channel.assertExchange(exchange, 'direct', {
      durable: false
    });

    channel.assertQueue('', {
      exclusive: true
      }, function(error2, q) {
        if (error2) {
          throw error2;
        }
      console.log(' [*] Waiting for logs. To exit press CTRL+C');

      args.forEach(function(severity) {
        channel.bindQueue(q.queue, exchange, severity);
      });

      channel.consume(q.queue, function(msg) {
        console.log(" [x] %s: '%s'", msg.fields.routingKey, msg.content.toString());
      }, {
        noAck: true
      });
    });
  });
});

----------------------------------------

TITLE: Clearing RabbitMQ User Limits
DESCRIPTION: Clears limits for a specific user or all limits at once.

LANGUAGE: bash
CODE:
rabbitmqctl clear_user_limits limited_user all

----------------------------------------

TITLE: Basic RabbitMQ Health Check Using Ping
DESCRIPTION: Performs a basic health check by pinging the RabbitMQ node to verify the runtime is running and CLI tools can authenticate

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q ping

----------------------------------------

TITLE: Complete Task Publisher Implementation
DESCRIPTION: Full implementation of task publisher with message persistence and proper queue declaration.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.queue_declare(queue='task_queue', durable=True)

message = ' '.join(sys.argv[1:]) or "Hello World!"
channel.basic_publish(
    exchange='',
    routing_key='task_queue',
    body=message,
    properties=pika.BasicProperties(
        delivery_mode=pika.DeliveryMode.Persistent
    ))
print(f" [x] Sent {message}")
connection.close()

----------------------------------------

TITLE: Joining RabbitMQ Cluster
DESCRIPTION: Instructs the node to become a member of an existing cluster.

LANGUAGE: bash
CODE:
rabbitmqctl join_cluster hare@elena --ram

----------------------------------------

TITLE: Installing RabbitMQ using Cloudsmith apt repository on Ubuntu 24.04
DESCRIPTION: A bash script that sets up the Cloudsmith apt repository, installs Erlang dependencies, and installs RabbitMQ on Ubuntu 24.04.

LANGUAGE: bash
CODE:
#!/bin/sh

sudo apt-get install curl gnupg apt-transport-https -y

## Team RabbitMQ's main signing key
curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null
## Community mirror of Cloudsmith: modern Erlang repository
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null
## Community mirror of Cloudsmith: RabbitMQ repository
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null

## Add apt repositories maintained by Team RabbitMQ
sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF
## Provides modern Erlang/OTP releases
##
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main

# another mirror for redundancy
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main

## Provides RabbitMQ
##
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main

# another mirror for redundancy
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
EOF

## Update package indices
sudo apt-get update -y

## Install Erlang packages
##
## For versions not compatible with the latest available Erlang series, which is the case
## for 3.13.x, apt must be instructed to install specifically Erlang 26.
## Alternatively this can be done via version pinning, documented further in this guide.
supported_erlang_version="1:26.2.5.6-1"
sudo apt-get install -y erlang-base=$supported_erlang_version \
                        erlang-asn1=$supported_erlang_version \
                        erlang-crypto=$supported_erlang_version \
                        erlang-eldap=$supported_erlang_version \
                        erlang-ftp=$supported_erlang_version \
                        erlang-inets=$supported_erlang_version \
                        erlang-mnesia=$supported_erlang_version \
                        erlang-os-mon=$supported_erlang_version \
                        erlang-parsetools=$supported_erlang_version \
                        erlang-public-key=$supported_erlang_version \
                        erlang-runtime-tools=$supported_erlang_version \
                        erlang-snmp=$supported_erlang_version \
                        erlang-ssl=$supported_erlang_version \
                        erlang-syntax-tools=$supported_erlang_version \
                        erlang-tftp=$supported_erlang_version \
                        erlang-tools=$supported_erlang_version \
                        erlang-xmerl=$supported_erlang_version

## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing

----------------------------------------

TITLE: Complete Publisher Implementation in C# for RabbitMQ
DESCRIPTION: This code snippet provides the complete implementation of a log message publisher using RabbitMQ and the .NET client. It sets up a connection, declares an exchange, and publishes messages.

LANGUAGE: C#
CODE:
using System;
using System.Text;
using RabbitMQ.Client;

class EmitLog
{
    public static void Main(string[] args)
    {
        var factory = new ConnectionFactory() { HostName = "localhost" };
        using (var connection = factory.CreateConnection())
        using (var channel = connection.CreateModel())
        {
            channel.ExchangeDeclare(exchange: "logs", type: ExchangeType.Fanout);

            var message = GetMessage(args);
            var body = Encoding.UTF8.GetBytes(message);
            channel.BasicPublish(exchange: "logs",
                                 routingKey: string.Empty,
                                 basicProperties: null,
                                 body: body);
            Console.WriteLine(" [x] Sent {0}", message);
        }

        Console.WriteLine(" Press [enter] to exit.");
        Console.ReadLine();
    }

    private static string GetMessage(string[] args)
    {
        return ((args.Length > 0) ? string.Join(" ", args) : "info: Hello World!");
    }
}

----------------------------------------

TITLE: Configuring SASL Authentication Mechanisms
DESCRIPTION: Configuration snippet showing how to disable anonymous logins and restrict available SASL authentication mechanisms to PLAIN and AMQPLAIN

LANGUAGE: ini
CODE:
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN

# note: the ANONYMOUS mechanism is not listed

# Value none has a special meaning that no user is configured for anonymous logins.
anonymous_login_user = none

----------------------------------------

TITLE: Exporting Definitions Using rabbitmqctl in Bash
DESCRIPTION: Demonstrates how to export RabbitMQ definitions to a JSON file using the rabbitmqctl command-line tool. This method does not require the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqctl export_definitions /path/to/definitions.file.json

----------------------------------------

TITLE: Implementing Blocked Connection Notifications in Java
DESCRIPTION: Demonstrates how to implement blocked connection notification handlers using the RabbitMQ Java client. Uses BlockedListener interface to handle connection.blocked and connection.unblocked events.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
connection.addBlockedListener(new BlockedListener() {
    public void handleBlocked(String reason) throws IOException {
        // Connection is now blocked
    }

    public void handleUnblocked() throws IOException {
        // Connection is now unblocked
    }
});

----------------------------------------

TITLE: Complete RabbitMQ Consumer Script in Elixir
DESCRIPTION: Full implementation of the message receiver (consumer) that connects to RabbitMQ, declares a queue, sets up message consumption, and waits for incoming messages.

LANGUAGE: elixir
CODE:
defmodule Receive do
  def wait_for_messages do
    receive do
      {:basic_deliver, payload, _meta} ->
        IO.puts " [x] Received #{payload}"
        wait_for_messages()
    end
  end
end

{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)
AMQP.Queue.declare(channel, "hello")
AMQP.Basic.consume(channel, "hello", nil, no_ack: true)
IO.puts " [*] Waiting for messages. To exit press CTRL+C, CTRL+C"

Receive.wait_for_messages()

----------------------------------------

TITLE: Implementing RPC Client with RabbitMQ in JavaScript
DESCRIPTION: Implementation of an RPC client using RabbitMQ. It establishes a connection, creates a channel, sets up a callback queue, and sends RPC requests to calculate Fibonacci numbers.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

var args = process.argv.slice(2);

if (args.length == 0) {
  console.log("Usage: rpc_client.js num");
  process.exit(1);
}

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    channel.assertQueue('', {
      exclusive: true
    }, function(error2, q) {
      if (error2) {
        throw error2;
      }
      var correlationId = generateUuid();
      var num = parseInt(args[0]);

      console.log(' [x] Requesting fib(%d)', num);

      channel.consume(q.queue, function(msg) {
        if (msg.properties.correlationId == correlationId) {
          console.log(' [.] Got %s', msg.content.toString());
          setTimeout(function() {
            connection.close();
            process.exit(0)
          }, 500);
        }
      }, {
        noAck: true
      });

      channel.sendToQueue('rpc_queue',
        Buffer.from(num.toString()),{
          correlationId: correlationId,
          replyTo: q.queue });
    });
  });
});

function generateUuid() {
  return Math.random().toString() +
         Math.random().toString() +
         Math.random().toString();
}

----------------------------------------

TITLE: Implementing a Topic Exchange Consumer in Go
DESCRIPTION: This code snippet shows how to create a consumer that receives messages from a topic exchange in RabbitMQ using Go. It sets up a connection, declares a topic exchange, creates a queue with bindings based on command-line arguments, and consumes messages.

LANGUAGE: Go
CODE:
package main

import (
        "log"
        "os"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs_topic", // name
                "topic",      // type
                true,         // durable
                false,        // auto-deleted
                false,        // internal
                false,        // no-wait
                nil,          // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        q, err := ch.QueueDeclare(
                "",    // name
                false, // durable
                false, // delete when unused
                true,  // exclusive
                false, // no-wait
                nil,   // arguments
        )
        failOnError(err, "Failed to declare a queue")

        if len(os.Args) < 2 {
                log.Printf("Usage: %s [binding_key]...", os.Args[0])
                os.Exit(0)
        }
        for _, s := range os.Args[1:] {
                log.Printf("Binding queue %s to exchange %s with routing key %s",
                        q.Name, "logs_topic", s)
                err = ch.QueueBind(
                        q.Name,       // queue name
                        s,            // routing key
                        "logs_topic", // exchange
                        false,
                        nil)
                failOnError(err, "Failed to bind a queue")
        }

        msgs, err := ch.Consume(
                q.Name, // queue
                "",     // consumer
                true,   // auto ack
                false,  // exclusive
                false,  // no local
                false,  // no wait
                nil,    // args
        )
        failOnError(err, "Failed to register a consumer")

        var forever chan struct{}

        go func() {
                for d := range msgs {
                        log.Printf(" [x] %s", d.Body)
                }
        }()

        log.Printf(" [*] Waiting for logs. To exit press CTRL+C")
        <-forever
}

----------------------------------------

TITLE: Setting Consumer Priority in RabbitMQ Java Client
DESCRIPTION: Demonstrates how to create a new consumer with a specified priority using the RabbitMQ Java client. The example shows setting a priority of 10 using the x-priority argument in the basicConsume method.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-priority", 10);
channel.basicConsume("my-queue", false, args, consumer);

----------------------------------------

TITLE: Implementing Topic Exchange Message Publisher in Ruby
DESCRIPTION: Ruby script that publishes messages to a topic exchange with configurable routing keys. The routing key format follows '<facility>.<severity>' pattern and allows for flexible message routing based on these criteria.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.topic('topic_logs')
severity = ARGV.shift || 'anonymous.info'
message = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')

exchange.publish(message, routing_key: severity)
puts " [x] Sent #{severity}:#{message}"

connection.close

----------------------------------------

TITLE: Binding Queue to Exchange in Ruby
DESCRIPTION: Establishes a binding between a queue and the 'logs' exchange to receive messages.

LANGUAGE: ruby
CODE:
queue.bind('logs')

----------------------------------------

TITLE: Adding a User in RabbitMQ
DESCRIPTION: Examples of adding a user using rabbitmqctl with different password input methods and shell-specific syntax.

LANGUAGE: bash
CODE:
# will prompt for password, only use this option interactively
rabbitmqctl add_user "username"

# Password is provided via standard input.
# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid
# special interpretation by the shell.
echo '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b' | rabbitmqctl add_user 'username'

# Password is provided as a command line argument.
# Note that certain characters such as !, &, $, #, and so on must be escaped to avoid
# special interpretation by the shell.
rabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'

LANGUAGE: PowerShell
CODE:
# password is provided as a command line argument
rabbitmqctl.bat add_user 'username' '9a55f70a841f18b97c3a7db939b7adc9e34a0f1d'

# passwords with special characters must be quoted correctly
rabbitmqctl.bat add_user 'username' '"w63pnZ&LnYMO(t"'

----------------------------------------

TITLE: Setting Consumer Priority in RabbitMQ Java Client
DESCRIPTION: Demonstrates how to create a new consumer with a specified priority using the RabbitMQ Java client. The example shows setting a priority of 10 using the x-priority argument in the basicConsume method.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-priority", 10);
channel.basicConsume("my-queue", false, args, consumer);

----------------------------------------

TITLE: Message Acknowledgment Implementation
DESCRIPTION: Enhanced worker implementation with manual message acknowledgment to ensure messages aren't lost when a worker dies.

LANGUAGE: ruby
CODE:
queue.subscribe(manual_ack: true, block: true) do |delivery_info, _properties, body|
  puts " [x] Received '#{body}'"
  # imitate some work
  sleep body.count('.').to_i
  puts ' [x] Done'
  channel.ack(delivery_info.delivery_tag)
end

----------------------------------------

TITLE: Positively Acknowledging Deliveries in C#
DESCRIPTION: Example of how to positively acknowledge a single delivery using the RabbitMQ .NET client. This code sets up an EventingBasicConsumer with manual acknowledgement mode and uses the BasicAck method to confirm message processing.

LANGUAGE: csharp
CODE:
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // positively acknowledge a single delivery, the message will
                    // be discarded
                    channel.BasicAck(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Configuring Basic TLS in RabbitMQ Server (INI Format)
DESCRIPTION: Example configuration to enable TLS in RabbitMQ server with basic certificate settings and peer verification.

LANGUAGE: ini
CODE:
listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true

----------------------------------------

TITLE: Managing RabbitMQ service with systemctl
DESCRIPTION: Commands to start, stop, and check the status of the RabbitMQ service using systemctl.

LANGUAGE: bash
CODE:
# stop the local node
sudo systemctl stop rabbitmq-server

# start it back
sudo systemctl start rabbitmq-server

# check on service status as observed by service manager
sudo systemctl status rabbitmq-server

----------------------------------------

TITLE: Performing a basic RabbitMQ health check
DESCRIPTION: Use rabbitmq-diagnostics to perform a basic health check on a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q ping
# => Ping succeeded if exit code is 0

----------------------------------------

TITLE: Enabling OAuth 2.0 Plugin
DESCRIPTION: Command to enable the OAuth 2.0 authentication plugin in RabbitMQ

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_oauth2

----------------------------------------

TITLE: Publishing Messages with Routing Keys
DESCRIPTION: Demonstrates how to publish messages to a direct exchange with severity-based routing keys.

LANGUAGE: python
CODE:
channel.basic_publish(exchange='direct_logs',
                      routing_key=severity,
                      body=message)

----------------------------------------

TITLE: Receiving Messages from RabbitMQ Queue in C#
DESCRIPTION: Set up a consumer to receive messages from a RabbitMQ queue and process them asynchronously.

LANGUAGE: C#
CODE:
using System.Text;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

var factory = new ConnectionFactory { HostName = "localhost" };
using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

channel.QueueDeclare(queue: "hello",
                     durable: false,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);

Console.WriteLine(" [*] Waiting for messages.");

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (model, ea) =>
{
    var body = ea.Body.ToArray();
    var message = Encoding.UTF8.GetString(body);
    Console.WriteLine($" [x] Received {message}");
};
channel.BasicConsume(queue: "hello",
                     autoAck: true,
                     consumer: consumer);

Console.WriteLine(" Press [enter] to exit.");
Console.ReadLine();

----------------------------------------

TITLE: Declaring Queue with Message TTL in Java
DESCRIPTION: Java code example showing how to declare a queue with a message TTL of 60 seconds using queue arguments

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-message-ttl", 60000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Checking Online Quorum Before Node Shutdown
DESCRIPTION: Command to verify if it's safe to stop a node by ensuring enough quorum members are online.

LANGUAGE: bash
CODE:
rabbitmq-upgrade await_online_quorum_plus_one

----------------------------------------

TITLE: Declaring Queue with Message TTL in Java
DESCRIPTION: Java code example showing how to declare a queue with a message TTL of 60 seconds using queue arguments

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-message-ttl", 60000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Enabling OAuth 2.0 Plugin
DESCRIPTION: Command to enable the OAuth 2.0 authentication plugin in RabbitMQ

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_oauth2

----------------------------------------

TITLE: Listing RabbitMQ Users
DESCRIPTION: Lists users in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl list_users

----------------------------------------

TITLE: Declaring a Fanout Exchange in C# for RabbitMQ
DESCRIPTION: This code snippet demonstrates how to declare a fanout exchange named 'logs' using the RabbitMQ .NET client. Fanout exchanges broadcast all messages to all bound queues.

LANGUAGE: C#
CODE:
channel.ExchangeDeclare(exchange: "logs", type: ExchangeType.Fanout);

----------------------------------------

TITLE: Configuring Heartbeats in Java RabbitMQ Client
DESCRIPTION: Example showing how to set heartbeat timeout to 60 seconds using the Java client's ConnectionFactory. The heartbeat timeout determines how quickly connection failures are detected.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();

// set the heartbeat timeout to 60 seconds
cf.setRequestedHeartbeat(60);

----------------------------------------

TITLE: RabbitMQ Connection Using URI in Java
DESCRIPTION: Shows how to connect to RabbitMQ using a connection URI string that includes credentials and connection details.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
factory.setUri("amqp://userName:password@hostName:portNumber/virtualHost");
Connection conn = factory.newConnection();

----------------------------------------

TITLE: Setting RabbitMQ User Permissions
DESCRIPTION: Sets permissions for a user in a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions -p my-vhost janeway "^janeway-.*" ".*" ".*"

----------------------------------------

TITLE: Configuring Consul Peer Discovery
DESCRIPTION: Example of how to configure Consul-based peer discovery in RabbitMQ.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = consul

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_consul

cluster_formation.consul.host = consul.eng.example.local

----------------------------------------

TITLE: Configuring Heartbeats in Java RabbitMQ Client
DESCRIPTION: Example showing how to set heartbeat timeout to 60 seconds using the Java client's ConnectionFactory. The heartbeat timeout determines how quickly connection failures are detected.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();

// set the heartbeat timeout to 60 seconds
cf.setRequestedHeartbeat(60);

----------------------------------------

TITLE: Sending a Message to RabbitMQ Queue in C#
DESCRIPTION: Declare a queue, create a message, and publish it to the queue using the RabbitMQ client.

LANGUAGE: C#
CODE:
using System.Text;
using RabbitMQ.Client;

var factory = new ConnectionFactory { HostName = "localhost" };
using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

channel.QueueDeclare(queue: "hello",
                     durable: false,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);

string message = "Hello World!";
var body = Encoding.UTF8.GetBytes(message);

channel.BasicPublish(exchange: string.Empty,
                     routingKey: "hello",
                     basicProperties: null,
                     body: body);

Console.WriteLine($" [x] Sent {message}");

Console.WriteLine(" Press [enter] to exit.");
Console.ReadLine();

----------------------------------------

TITLE: RPC Client Implementation in Go with RabbitMQ
DESCRIPTION: Complete RPC client implementation that sends Fibonacci calculation requests and handles responses using correlation IDs.

LANGUAGE: go
CODE:
package main

import (
        "context"
        "log"
        "math/rand"
        "os"
        "strconv"
        "strings"
        "time"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func randomString(l int) string {
        bytes := make([]byte, l)
        for i := 0; i < l; i++ {
                bytes[i] = byte(randInt(65, 90))
        }
        return string(bytes)
}

func randInt(min int, max int) int {
        return min + rand.Intn(max-min)
}

func fibonacciRPC(n int) (res int, err error) {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        q, err := ch.QueueDeclare(
                "",    // name
                false, // durable
                false, // delete when unused
                true,  // exclusive
                false, // noWait
                nil,   // arguments
        )
        failOnError(err, "Failed to declare a queue")

        msgs, err := ch.Consume(
                q.Name, // queue
                "",     // consumer
                true,   // auto-ack
                false,  // exclusive
                false,  // no-local
                false,  // no-wait
                nil,    // args
        )
        failOnError(err, "Failed to register a consumer")

        corrId := randomString(32)

        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
        defer cancel()

        err = ch.PublishWithContext(ctx,
                "",          // exchange
                "rpc_queue", // routing key
                false,       // mandatory
                false,       // immediate
                amqp.Publishing{
                        ContentType:   "text/plain",
                        CorrelationId: corrId,
                        ReplyTo:       q.Name,
                        Body:          []byte(strconv.Itoa(n)),
                })
        failOnError(err, "Failed to publish a message")

        for d := range msgs {
                if corrId == d.CorrelationId {
                        res, err = strconv.Atoi(string(d.Body))
                        failOnError(err, "Failed to convert body to integer")
                        break
                }
        }

        return
}

func main() {
        rand.Seed(time.Now().UTC().UnixNano())

        n := bodyFrom(os.Args)

        log.Printf(" [x] Requesting fib(%d)", n)
        res, err := fibonacciRPC(n)
        failOnError(err, "Failed to handle RPC request")

        log.Printf(" [.] Got %d", res)
}

func bodyFrom(args []string) int {
        var s string
        if (len(args) < 2) || os.Args[1] == "" {
                s = "30"
        } else {
                s = strings.Join(args[1:], " ")
        }
        n, err := strconv.Atoi(s)
        failOnError(err, "Failed to convert arg to integer")
        return n
}

----------------------------------------

TITLE: Example Usage of Topic-Based Routing in RabbitMQ
DESCRIPTION: Demonstrates various ways to use topic-based routing patterns, including receiving all logs, filtering by facility or severity, and creating multiple bindings.

LANGUAGE: objectivec
CODE:
[self receiveLogsTopic:@[@"#"]];

LANGUAGE: objectivec
CODE:
[self receiveLogsTopic:@[@"kern.*"]];

LANGUAGE: objectivec
CODE:
[self receiveLogsTopic:@[@"*.critical"]];

LANGUAGE: objectivec
CODE:
[self receiveLogsTopic:@[@"kern.*", @"*.critical"]];

LANGUAGE: objectivec
CODE:
[self emitLogTopic:@"A critical kernel error" routingKey:@"kern.critical"];

----------------------------------------

TITLE: Retrieving Virtual Host Metadata Using RabbitMQ HTTP API
DESCRIPTION: This example shows how to retrieve the metadata of a virtual host using the RabbitMQ HTTP API and curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X GET http://rabbitmq.local:15672/api/vhosts/qa1

----------------------------------------

TITLE: Configuring Single Consumer Prefetch in Java
DESCRIPTION: Basic example showing how to set a prefetch limit of 10 unacknowledged messages for a single consumer. Also demonstrates setting unlimited prefetch with a value of 0.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue", false, consumer);

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(0); // No limit for this consumer
channel.basicConsume("my-queue", false, consumer);

----------------------------------------

TITLE: Creating Queue Bindings for Multiple Severities in Go
DESCRIPTION: Binds a queue to the 'logs_direct' exchange with multiple severity-based routing keys using the RabbitMQ Go client.

LANGUAGE: go
CODE:
q, err := ch.QueueDeclare(
  "",    // name
  false, // durable
  false, // delete when unused
  true,  // exclusive
  false, // no-wait
  nil,   // arguments
)
failOnError(err, "Failed to declare a queue")

if len(os.Args) < 2 {
  log.Printf("Usage: %s [info] [warning] [error]", os.Args[0])
  os.Exit(0)
}
for _, s := range os.Args[1:] {
  log.Printf("Binding queue %s to exchange %s with routing key %s",
     q.Name, "logs_direct", s)
  err = ch.QueueBind(
    q.Name,        // queue name
    s,             // routing key
    "logs_direct", // exchange
    false,
    nil)
  failOnError(err, "Failed to bind a queue")
}

----------------------------------------

TITLE: Adding a RabbitMQ User
DESCRIPTION: Creates a new user with the specified username and password.

LANGUAGE: bash
CODE:
rabbitmqctl add_user janeway changeit

----------------------------------------

TITLE: Implementing Log Receiver in Go
DESCRIPTION: Complete implementation of a log receiver program that connects to RabbitMQ, declares the 'logs' exchange, creates a temporary queue, binds it to the exchange, and consumes messages.

LANGUAGE: go
CODE:
package main

import (
        "log"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs",   // name
                "fanout", // type
                true,     // durable
                false,    // auto-deleted
                false,    // internal
                false,    // no-wait
                nil,      // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        q, err := ch.QueueDeclare(
                "",    // name
                false, // durable
                false, // delete when unused
                true,  // exclusive
                false, // no-wait
                nil,   // arguments
        )
        failOnError(err, "Failed to declare a queue")

        err = ch.QueueBind(
                q.Name, // queue name
                "",     // routing key
                "logs", // exchange
                false,
                nil,
        )
        failOnError(err, "Failed to bind a queue")

        msgs, err := ch.Consume(
                q.Name, // queue
                "",     // consumer
                true,   // auto-ack
                false,  // exclusive
                false,  // no-local
                false,  // no-wait
                nil,    // args
        )
        failOnError(err, "Failed to register a consumer")

        var forever chan struct{}

        go func() {
                for d := range msgs {
                        log.Printf(" [x] %s", d.Body)
                }
        }()

        log.Printf(" [*] Waiting for logs. To exit press CTRL+C")
        <-forever
}

----------------------------------------

TITLE: Setting Relative Memory Threshold in RabbitMQ
DESCRIPTION: Configuration example for setting a relative memory threshold as a fraction of total available RAM.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.relative = 0.6

----------------------------------------

TITLE: Configuring Producer with Filter Value in Java
DESCRIPTION: This snippet shows how to create a Producer that associates messages with filter values based on the message's application properties.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
  .stream("invoices")
  .filterValue(msg -> msg.getApplicationProperties().get("region").toString())  
  .build();

----------------------------------------

TITLE: Publishing Persistent Messages to RabbitMQ in C#
DESCRIPTION: Publishes a message to the 'task_queue' with persistence enabled to survive server restarts.

LANGUAGE: C#
CODE:
var message = GetMessage(args);
var body = Encoding.UTF8.GetBytes(message);
var properties = channel.CreateBasicProperties();
properties.Persistent = true;

channel.BasicPublish(exchange: string.Empty,
                     routingKey: "task_queue",
                     basicProperties: properties,
                     body: body);

----------------------------------------

TITLE: Configuring Named Upstream Sets in Bash
DESCRIPTION: Commands to create a named upstream set and apply it via policy

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream-set":"location-1"}'

----------------------------------------

TITLE: Java Client TLS Connection Example
DESCRIPTION: Java code demonstrating how to establish a TLS connection to RabbitMQ with proper certificate handling and trust store setup.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
factory.setHost("localhost");
factory.setPort(5671);

factory.useSslProtocol("TLSv1.2");
// Tells the library to setup the default Key and Trust managers for you
// which do not do any form of remote server trust verification

----------------------------------------

TITLE: Declaring a Durable Queue in RabbitMQ using C#
DESCRIPTION: Declares a durable queue named 'task_queue' that will survive RabbitMQ restarts.

LANGUAGE: C#
CODE:
channel.QueueDeclare(queue: "task_queue",
                     durable: true,
                     exclusive: false,
                     autoDelete: false,
                     arguments: null);

----------------------------------------

TITLE: Sending RPC Request with Spring AMQP RabbitTemplate
DESCRIPTION: This snippet shows how to send an RPC request using Spring AMQP's RabbitTemplate. It demonstrates the use of convertSendAndReceive method to send a message and receive a response.

LANGUAGE: java
CODE:
Integer response = (Integer) template.convertSendAndReceive
    (exchange.getName(), "rpc", start++);
System.out.println(" [.] Got '" + response + "'");

----------------------------------------

TITLE: Initializing RabbitMQ Stream System in C#
DESCRIPTION: Creates a StreamSystem object to connect to RabbitMQ and declare a stream. This is used for both the producer and consumer.

LANGUAGE: csharp
CODE:
var streamSystem = await StreamSystem.Create(new StreamSystemConfig());

await streamSystem.CreateStream(new StreamSpec("hello-stream")
{
    MaxLengthBytes = 5_000_000_000
});

----------------------------------------

TITLE: Basic Java TLS Connection Example
DESCRIPTION: Simple example demonstrating how to establish a TLS connection to RabbitMQ in Java without certificate validation.

LANGUAGE: Java
CODE:
import java.io.*;
import java.security.*;

import com.rabbitmq.client.*;

public class Example1 {

    public static void main(String[] args) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        factory.setPort(5671);

        factory.useSslProtocol();
        // Tells the library to setup the default Key and Trust managers for you
        // which do not do any form of remote server trust verification

        Connection conn = factory.newConnection();
        Channel channel = conn.createChannel();

        // non-durable, exclusive, auto-delete queue
        channel.queueDeclare("rabbitmq-java-test", false, true, true, null);
        channel.basicPublish("", "rabbitmq-java-test", null, "Hello, World".getBytes());

        GetResponse chResponse = channel.basicGet("rabbitmq-java-test", false);
        if (chResponse == null) {
            System.out.println("No message retrieved");
        } else {
            byte[] body = chResponse.getBody();
            System.out.println("Received: " + new String(body));
        }

        channel.close();
        conn.close();
    }
}

----------------------------------------

TITLE: Implementing a Log Message Producer in Java with RabbitMQ
DESCRIPTION: Complete implementation of a producer that emits log messages to the 'logs' fanout exchange using the RabbitMQ Java client.

LANGUAGE: java
CODE:
public class EmitLog {

  private static final String EXCHANGE_NAME = "logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    try (Connection connection = factory.newConnection();
         Channel channel = connection.createChannel()) {
        channel.exchangeDeclare(EXCHANGE_NAME, "fanout");

        String message = argv.length < 1 ? "info: Hello World!" :
                            String.join(" ", argv);

        channel.basicPublish(EXCHANGE_NAME, "", null, message.getBytes("UTF-8"));
        System.out.println(" [x] Sent '" + message + "'");
    }
  }
}

----------------------------------------

TITLE: Checking RabbitMQ Node Status
DESCRIPTION: Command to check the status and health of a RabbitMQ node

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat status

----------------------------------------

TITLE: Implementing Positive Acknowledgements in Java
DESCRIPTION: Demonstrates how to positively acknowledge message delivery using the RabbitMQ Java client with manual acknowledgement mode.

LANGUAGE: java
CODE:
boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge a single delivery, the message will
             // be discarded
             channel.basicAck(deliveryTag, false);
         }
     });

----------------------------------------

TITLE: Managing RabbitMQ Users with rabbitmqctl
DESCRIPTION: Examples of using rabbitmqctl to add users, list users, and set permissions.

LANGUAGE: bash
CODE:
rabbitmqctl add_user "username"

echo '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b' | rabbitmqctl add_user 'username'

rabbitmqctl add_user 'username' '2a55f70a841f18b97c3a7db939b7adc9e34a0f1b'

LANGUAGE: bash
CODE:
rabbitmqctl list_users

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions -p "custom-vhost" "username" ".*" ".*" ".*"

----------------------------------------

TITLE: Configuring Basic TCP Listener
DESCRIPTION: Example of configuring AMQP TCP listener with specific IP and port settings

LANGUAGE: ini
CODE:
listeners.tcp.1 = 192.168.1.99:5672

----------------------------------------

TITLE: Creating and Publishing to a RabbitMQ Stream in Java
DESCRIPTION: This Java code snippet shows how to create a stream, set its maximum length, create a producer, and send a message to the stream. It demonstrates stream declaration, producer creation, and message sending.

LANGUAGE: Java
CODE:
String stream = "hello-java-stream";
environment.streamCreator().stream(stream).maxLengthBytes(ByteCapacity.GB(5)).create();
Producer producer = environment.producerBuilder().stream(stream).build();
producer.send(producer.messageBuilder().addData("Hello, World!".getBytes()).build(), null);
System.out.println(" [x] 'Hello, World!' message sent");

----------------------------------------

TITLE: Complete RabbitMQ Producer Script in Elixir
DESCRIPTION: Full implementation of the message sender (producer) that connects to RabbitMQ, declares a queue, sends a message, and closes the connection.

LANGUAGE: elixir
CODE:
{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)
AMQP.Queue.declare(channel, "hello")
AMQP.Basic.publish(channel, "", "hello", "Hello World!")
IO.puts " [x] Sent 'Hello World!'"
AMQP.Connection.close(connection)

----------------------------------------

TITLE: Checking Cluster Status of Independent Nodes
DESCRIPTION: Commands to check the cluster status of each independent node using rabbitmqctl.

LANGUAGE: bash
CODE:
# on rabbit1
rabbitmqctl cluster_status
# on rabbit2
rabbitmqctl cluster_status
# on rabbit3
rabbitmqctl cluster_status

----------------------------------------

TITLE: Enabling a RabbitMQ Plugin with rabbitmq-plugins CLI
DESCRIPTION: Use the rabbitmq-plugins command to enable a plugin on a RabbitMQ node. This example enables the Kubernetes peer discovery plugin.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_peer_discovery_k8s

----------------------------------------

TITLE: Publishing Messages with Severity Routing
DESCRIPTION: Demonstrates how to publish messages to a direct exchange with severity-based routing keys.

LANGUAGE: java
CODE:
channel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes());

----------------------------------------

TITLE: Joining a RabbitMQ Cluster
DESCRIPTION: Instructs the node to become a member of the cluster that the specified node is in.

LANGUAGE: bash
CODE:
rabbitmqctl join_cluster hare@elena --ram

----------------------------------------

TITLE: Setting Up Message Receiver in Swift
DESCRIPTION: Set up a message receiver that connects to RabbitMQ, declares a queue, and prepares to consume messages using Swift.

LANGUAGE: swift
CODE:
func receive() {
    print("Attempting to connect to local RabbitMQ broker")
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let q = ch.queue("hello")
}

----------------------------------------

TITLE: Worker Consumer Implementation in Go
DESCRIPTION: Worker implementation that consumes messages from RabbitMQ queue, processes them with simulated work time, and sends acknowledgments. Includes channel setup and message handling.

LANGUAGE: go
CODE:
msgs, err := ch.Consume(
  q.Name, // queue
  "",     // consumer
  true,   // auto-ack
  false,  // exclusive
  false,  // no-local
  false,  // no-wait
  nil,    // args
)
failOnError(err, "Failed to register a consumer")

var forever chan struct{}

go func() {
  for d := range msgs {
    log.Printf("Received a message: %s", d.Body)
    dotCount := bytes.Count(d.Body, []byte("."))
    t := time.Duration(dotCount)
    time.Sleep(t * time.Second)
    log.Printf("Done")
  }
}()

log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
<-forever

----------------------------------------

TITLE: Listing Queues in a Specific Virtual Host
DESCRIPTION: This command lists all queues in the 'monitoring' virtual host using rabbitmqadmin.

LANGUAGE: shell
CODE:
rabbitmqadmin --vhost "monitoring" list queues

----------------------------------------

TITLE: Configuring Dead Letter Exchange using Queue Arguments in Java
DESCRIPTION: This Java code snippet demonstrates how to declare a queue with a Dead Letter Exchange specified as an optional argument. It creates an exchange and sets it as the DLX for a new queue.

LANGUAGE: java
CODE:
channel.exchangeDeclare("some.exchange.name", "direct");

Map<String, Object> args = new HashMap<String, Object>();
args.put("x-dead-letter-exchange", "some.exchange.name");
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Basic RabbitMQ CLI Commands
DESCRIPTION: Essential RabbitMQ CLI commands for Windows, including help documentation, service management, and status checking.

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help
rabbitmq-diagnostics.bat help
rabbitmq-plugins.bat help
rabbitmqctl.bat help add_user
rabbitmqctl.bat stop
rabbitmqctl.bat status

----------------------------------------

TITLE: Basic Health Check
DESCRIPTION: Shows how to perform a basic health check using rabbitmq-diagnostics ping

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q ping
# => Ping succeeded if exit code is 0

----------------------------------------

TITLE: Complete Log Receiver Implementation in Ruby
DESCRIPTION: Full implementation of a consumer program that receives and processes log messages from the fanout exchange.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.fanout('logs')
queue = channel.queue('', exclusive: true)

queue.bind(exchange)

puts ' [*] Waiting for logs. To exit press CTRL+C'

begin
  queue.subscribe(block: true) do |_delivery_info, _properties, body|
    puts " [x] #{body}"
  end
rescue Interrupt => _
  channel.close
  connection.close
end

----------------------------------------

TITLE: Implementing Message Receiver in Elixir
DESCRIPTION: Defines a module with a recursive function to wait for and handle incoming messages from RabbitMQ.

LANGUAGE: elixir
CODE:
defmodule Receive do
  def wait_for_messages do
    receive do
      {:basic_deliver, payload, _meta} ->
        IO.puts " [x] Received #{payload}"
        wait_for_messages()
    end
  end
end

----------------------------------------

TITLE: Configuring SASL Authentication Mechanisms in RabbitMQ
DESCRIPTION: Configuration settings to disable anonymous login and specify allowed SASL authentication mechanisms in rabbitmq.conf.

LANGUAGE: ini
CODE:
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN

# note: the ANONYMOUS mechanism is not listed

# Value none has a special meaning that no user is configured for anonymous logins.
anonymous_login_user = none

----------------------------------------

TITLE: Implementing a Log Message Publisher in PHP
DESCRIPTION: This snippet shows the complete code for a publisher that emits log messages to the 'logs' exchange.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('logs', 'fanout', false, false, false);

$data = implode(' ', array_slice($argv, 1));
if (empty($data)) {
    $data = "info: Hello World!";
}
$msg = new AMQPMessage($data);

$channel->basic_publish($msg, 'logs');

echo ' [x] Sent ', $data, "\n";

$channel->close();
$connection->close();

----------------------------------------

TITLE: RPC Client Implementation - Python
DESCRIPTION: Complete RPC client class implementation with correlation ID handling and response matching

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import uuid


class FibonacciRpcClient(object):

    def __init__(self):
        self.connection = pika.BlockingConnection(
            pika.ConnectionParameters(host='localhost'))

        self.channel = self.connection.channel()

        result = self.channel.queue_declare(queue='', exclusive=True)
        self.callback_queue = result.method.queue

        self.channel.basic_consume(
            queue=self.callback_queue,
            on_message_callback=self.on_response,
            auto_ack=True)

        self.response = None
        self.corr_id = None

    def on_response(self, ch, method, props, body):
        if self.corr_id == props.correlation_id:
            self.response = body

    def call(self, n):
        self.response = None
        self.corr_id = str(uuid.uuid4())
        self.channel.basic_publish(
            exchange='',
            routing_key='rpc_queue',
            properties=pika.BasicProperties(
                reply_to=self.callback_queue,
                correlation_id=self.corr_id,
            ),
            body=str(n))
        while self.response is None:
            self.connection.process_data_events(time_limit=None)
        return int(self.response)


fibonacci_rpc = FibonacciRpcClient()

print(" [x] Requesting fib(30)")
response = fibonacci_rpc.call(30)
print(f" [.] Got {response}")

----------------------------------------

TITLE: Establishing RabbitMQ Connection - Local Server
DESCRIPTION: Code to establish a connection to a local RabbitMQ server using default settings.

LANGUAGE: ruby
CODE:
connection = Bunny.new
connection.start

----------------------------------------

TITLE: Stopping RabbitMQ Application
DESCRIPTION: Stops the RabbitMQ application, leaving the runtime running.

LANGUAGE: bash
CODE:
rabbitmqctl stop_app

----------------------------------------

TITLE: Acknowledging Multiple Deliveries in C#
DESCRIPTION: Example of how to acknowledge multiple deliveries at once using the RabbitMQ .NET client. All unacknowledged deliveries up to the specified delivery tag will be acknowledged.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // positively acknowledge all deliveries up to
                    // this delivery tag
                    channel.BasicAck(ea.DeliveryTag, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Complete Log Emitter Implementation in Go
DESCRIPTION: Full implementation of a log emitter that publishes messages to a direct exchange with severity-based routing keys using the RabbitMQ Go client.

LANGUAGE: go
CODE:
package main

import (
        "context"
        "log"
        "os"
        "strings"
        "time"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs_direct", // name
                "direct",      // type
                true,          // durable
                false,         // auto-deleted
                false,         // internal
                false,         // no-wait
                nil,           // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
        defer cancel()

        body := bodyFrom(os.Args)
        err = ch.PublishWithContext(ctx,
                "logs_direct",         // exchange
                severityFrom(os.Args), // routing key
                false,                 // mandatory
                false,                 // immediate
                amqp.Publishing{
                        ContentType: "text/plain",
                        Body:        []byte(body),
                })
        failOnError(err, "Failed to publish a message")

        log.Printf(" [x] Sent %s", body)
}

func bodyFrom(args []string) string {
        var s string
        if (len(args) < 3) || os.Args[2] == "" {
                s = "hello"
        } else {
                s = strings.Join(args[2:], " ")
        }
        return s
}

func severityFrom(args []string) string {
        var s string
        if (len(args) < 2) || os.Args[1] == "" {
                s = "info"
        } else {
                s = os.Args[1]
        }
        return s
}

----------------------------------------

TITLE: Pinging RabbitMQ Node
DESCRIPTION: Checks if the node OS process is up and CLI tools can authenticate with it.

LANGUAGE: bash
CODE:
rabbitmqctl ping -n rabbit@hostname

----------------------------------------

TITLE: Creating a Virtual Host using RabbitMQ CLI
DESCRIPTION: Demonstrates how to create a virtual host named 'qa1' using the rabbitmqctl command line tool.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1

----------------------------------------

TITLE: Declaring a RabbitMQ Stream using Java AMQP 0.9.1 Client
DESCRIPTION: This snippet demonstrates how to create a stream using the AMQP 0.9.1 Java client. It sets the 'x-queue-type' argument to 'stream' to create a stream instead of a classic queue.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
Channel channel = connection.createChannel();
channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  Collections.singletonMap("x-queue-type", "stream")
);

----------------------------------------

TITLE: Configuring Stream TLS Support
DESCRIPTION: Configuration for enabling TLS support for stream connections including certificate paths and verification options.

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/tls/ca_certificate.pem
ssl_options.certfile   = /path/to/tls/server_certificate.pem
ssl_options.keyfile    = /path/to/tls/server_key.pem
ssl_options.verify     =  verify_peer
ssl_options.fail_if_no_peer_cert = true

stream.listeners.tcp.1 = 5552
stream.listeners.ssl.1 = 5551

----------------------------------------

TITLE: Complete Log Message Publisher Implementation
DESCRIPTION: Full implementation of a publisher that emits log messages to a fanout exchange. Includes connection setup, exchange declaration, and message publishing.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'logs';
    var msg = process.argv.slice(2).join(' ') || 'Hello World!';

    channel.assertExchange(exchange, 'fanout', {
      durable: false
    });
    channel.publish(exchange, '', Buffer.from(msg));
    console.log(" [x] Sent %s", msg);
  });

  setTimeout(function() {
    connection.close();
    process.exit(0);
  }, 500);
});

----------------------------------------

TITLE: Implementing Publisher Confirms in RabbitMQ (Java)
DESCRIPTION: This snippet shows how to implement Publisher Confirms in RabbitMQ using Java. It sets up a ConfirmListener, enables confirm mode on the channel, and tracks unconfirmed messages using a SortedSet.

LANGUAGE: java
CODE:
private volatile SortedSet<Long> unconfirmedSet =
    Collections.synchronizedSortedSet(new TreeSet());

...

ch.setConfirmListener(new ConfirmListener() {
    public void handleAck(long seqNo, boolean multiple) {
        if (multiple) {
            unconfirmedSet.headSet(seqNo+1).clear();
        } else {
            unconfirmedSet.remove(seqNo);
        }
    }
    public void handleNack(long seqNo, boolean multiple) {
        // handle the lost messages somehow
    }
});
ch.confirmSelect();
for (long i = 0; i < MSG_COUNT; ++i) {
     unconfirmedSet.add(ch.getNextPublishSeqNo());
     ch.basicPublish("", QUEUE_NAME, MessageProperties.PERSISTENT_BASIC,
                       "nop".getBytes());
 }
while (unconfirmedSet.size() > 0)
     Thread.sleep(10);

----------------------------------------

TITLE: Checking Port Connectivity
DESCRIPTION: Example of using the check_port_connectivity command to verify if listener ports on the target node can accept new TCP connections.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_port_connectivity

----------------------------------------

TITLE: Listing Feature Flags with rabbitmqctl
DESCRIPTION: Shows how to use the rabbitmqctl command to list available feature flags and their states.

LANGUAGE: bash
CODE:
rabbitmqctl list_feature_flags

# => Listing feature flags ...
# => name	state
# => empty_basic_get_metric	enabled
# => implicit_default_bindings	enabled
# => quorum_queue	enabled

----------------------------------------

TITLE: Setting Independent Consumer Prefetch Limits in Java
DESCRIPTION: This snippet shows how to set independent prefetch limits for two consumers on the same channel.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Positively Acknowledging Deliveries in Java
DESCRIPTION: Example of how to positively acknowledge a single delivery using the RabbitMQ Java client. This code sets up a consumer with manual acknowledgement mode and uses the basicAck method to confirm message processing.

LANGUAGE: java
CODE:
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge a single delivery, the message will
             // be discarded
             channel.basicAck(deliveryTag, false);
         }
     });

----------------------------------------

TITLE: Runtime Memory Threshold Commands in RabbitMQ
DESCRIPTION: Command-line examples for updating memory thresholds on a running RabbitMQ node using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0.7

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark absolute "4G"

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0

----------------------------------------

TITLE: Declaring a Fanout Exchange in Java with RabbitMQ
DESCRIPTION: Creates a fanout exchange named 'logs' using the RabbitMQ Java client. This exchange will broadcast all received messages to all bound queues.

LANGUAGE: java
CODE:
channel.exchangeDeclare("logs", "fanout");

----------------------------------------

TITLE: Negatively Acknowledging Multiple Deliveries in Java
DESCRIPTION: Example of how to negatively acknowledge multiple deliveries at once using the RabbitMQ Java client. All unacknowledged deliveries up to the specified delivery tag will be requeued.

LANGUAGE: java
CODE:
boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // requeue all unacknowledged deliveries up to
             // this delivery tag
             channel.basicNack(deliveryTag, true, true);
         }
     });

----------------------------------------

TITLE: Configuring Multiple OAuth 2.0 Providers
DESCRIPTION: Example configuration for setting up multiple OAuth 2.0 providers in RabbitMQ.

LANGUAGE: ini
CODE:
auth_oauth2.scope_prefix = rabbitmq.

auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.1.oauth_provider_id = prod
auth_oauth2.resource_servers.2.id = rabbit_dev
auth_oauth2.resource_servers.2.oauth_provider_id = dev
auth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.

auth_oauth2.oauth_providers.prod.issuer = https://rabbit_prod:8080
auth_oauth2.oauth_providers.prod.https.cacertfile = /opts/certs/prod.pem
auth_oauth2.oauth_providers.dev.issuer = https://rabbit_dev:8080
auth_oauth2.oauth_providers.dev.https.cacertfile = /opts/certs/dev.pem

----------------------------------------

TITLE: Implementing Blocked Connection Notifications in Java
DESCRIPTION: Demonstrates how to register a BlockedListener with a RabbitMQ connection to handle connection.blocked and connection.unblocked notifications using the Java client.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
connection.addBlockedListener(new BlockedListener() {
    public void handleBlocked(String reason) throws IOException {
        // Connection is now blocked
    }

    public void handleUnblocked() throws IOException {
        // Connection is now unblocked
    }
});

----------------------------------------

TITLE: Implementing Message Receiver for RabbitMQ Work Queue
DESCRIPTION: Message receiver that processes messages with simulated work loads based on message content. Uses RabbitListener annotation for message consumption.

LANGUAGE: java
CODE:
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.util.StopWatch;

@RabbitListener(queues = "hello")
public class Tut2Receiver {

    private final int instance;

    public Tut2Receiver(int i) {
        this.instance = i;
    }

    @RabbitHandler
    public void receive(String in) throws InterruptedException {
        StopWatch watch = new StopWatch();
        watch.start();
        System.out.println("instance " + this.instance +
            " [x] Received '" + in + "'");
        doWork(in);
        watch.stop();
        System.out.println("instance " + this.instance +
            " [x] Done in " + watch.getTotalTimeSeconds() + "s");
    }

    private void doWork(String in) throws InterruptedException {
        for (char ch : in.toCharArray()) {
            if (ch == '.') {
                Thread.sleep(500);
            }
        }
    }
}

----------------------------------------

TITLE: Declaring a Priority Queue in RabbitMQ using Java
DESCRIPTION: This code snippet demonstrates how to declare a priority queue in RabbitMQ using the Java client. It sets the 'x-max-priority' argument to 10, indicating the maximum priority level supported by the queue.

LANGUAGE: java
CODE:
Channel ch = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-priority", 10);
ch.queueDeclare("my-priority-queue", true, false, false, args);

----------------------------------------

TITLE: Creating a RabbitMQ Cluster
DESCRIPTION: Steps to join rabbit@rabbit2 and rabbit@rabbit3 to the cluster of rabbit@rabbit1.

LANGUAGE: bash
CODE:
# on rabbit2
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@rabbit1
rabbitmqctl start_app

----------------------------------------

TITLE: Deleting RabbitMQ User
DESCRIPTION: Deletes a user from the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl delete_user janeway

----------------------------------------

TITLE: Implementing a Log Message Subscriber in PHP
DESCRIPTION: This code demonstrates a complete subscriber that receives and processes log messages from the 'logs' exchange.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('logs', 'fanout', false, false, false);

list($queue_name, ,) = $channel->queue_declare("", false, false, true, false);

$channel->queue_bind($queue_name, 'logs');

echo " [*] Waiting for logs. To exit press CTRL+C\n";

$callback = function ($msg) {
    echo ' [x] ', $msg->getBody(), "\n";
};

$channel->basic_consume($queue_name, '', false, true, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

$channel->close();
$connection->close();

----------------------------------------

TITLE: Configuring Cache Backend for HTTP Authentication
DESCRIPTION: INI configuration to set up the cache backend for HTTP authentication in RabbitMQ.

LANGUAGE: ini
CODE:
auth_backends.1 = cache
auth_cache.cached_backend = http

auth_http.http_method = post

----------------------------------------

TITLE: Publishing Messages to a Named Exchange in Java with RabbitMQ
DESCRIPTION: Publishes a message to the 'logs' exchange without specifying a routing key, as it's not used in fanout exchanges.

LANGUAGE: java
CODE:
channel.basicPublish( "logs", "", null, message.getBytes());

----------------------------------------

TITLE: Complete Log Receiver Implementation in Go
DESCRIPTION: Full implementation of a log receiver that consumes messages from a direct exchange based on specified severity levels using the RabbitMQ Go client.

LANGUAGE: go
CODE:
package main

import (
        "log"
        "os"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs_direct", // name
                "direct",      // type
                true,          // durable
                false,         // auto-deleted
                false,         // internal
                false,         // no-wait
                nil,           // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        q, err := ch.QueueDeclare(
                "",    // name
                false, // durable
                false, // delete when unused
                true,  // exclusive
                false, // no-wait
                nil,   // arguments
        )
        failOnError(err, "Failed to declare a queue")

        if len(os.Args) < 2 {
                log.Printf("Usage: %s [info] [warning] [error]", os.Args[0])
                os.Exit(0)
        }
        for _, s := range os.Args[1:] {
                log.Printf("Binding queue %s to exchange %s with routing key %s",
                        q.Name, "logs_direct", s)
                err = ch.QueueBind(
                        q.Name,        // queue name
                        s,             // routing key
                        "logs_direct", // exchange
                        false,
                        nil)
                failOnError(err, "Failed to bind a queue")
        }

        msgs, err := ch.Consume(
                q.Name, // queue
                "",     // consumer
                true,   // auto ack
                false,  // exclusive
                false,  // no local
                false,  // no wait
                nil,    // args
        )
        failOnError(err, "Failed to register a consumer")

        var forever chan struct{}

        go func() {
                for d := range msgs {
                        log.Printf(" [x] %s", d.Body)
                }
        }()

        log.Printf(" [*] Waiting for logs. To exit press CTRL+C")
        <-forever
}

----------------------------------------

TITLE: Configuring File Logging in RabbitMQ
DESCRIPTION: Basic configuration settings for logging to a file in RabbitMQ using rabbitmq.conf

LANGUAGE: ini
CODE:
log.file = rabbit.log
log.file.level = debug
log.file.formatter = json

----------------------------------------

TITLE: Setting Channel Max in Java
DESCRIPTION: Example of setting the maximum number of channels per connection using the RabbitMQ Java client.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();
// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured
// to use a higher limit, otherwise the server's limit will be used.
cf.setRequestedChannelMax(32);

----------------------------------------

TITLE: Implementing RPC Client in Ruby using RabbitMQ
DESCRIPTION: This code implements the RPC client using RabbitMQ and Ruby. It sets up a connection, creates a channel, declares a callback queue, and implements the 'call' method to send RPC requests and wait for responses.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'
require 'thread'

class FibonacciClient
  attr_accessor :call_id, :response, :lock, :condition, :connection,
                :channel, :server_queue_name, :reply_queue, :exchange

  def initialize(server_queue_name)
    @connection = Bunny.new(automatically_recover: false)
    @connection.start

    @channel = connection.create_channel
    @exchange = channel.default_exchange
    @server_queue_name = server_queue_name

    setup_reply_queue
  end

  def call(n)
    @call_id = generate_uuid

    exchange.publish(n.to_s,
                     routing_key: server_queue_name,
                     correlation_id: call_id,
                     reply_to: reply_queue.name)

    # wait for the signal to continue the execution
    lock.synchronize { condition.wait(lock) }

    response
  end

  def stop
    channel.close
    connection.close
  end

  private

  def setup_reply_queue
    @lock = Mutex.new
    @condition = ConditionVariable.new
    that = self
    @reply_queue = channel.queue('', exclusive: true)

    reply_queue.subscribe do |_delivery_info, properties, payload|
      if properties[:correlation_id] == that.call_id
        that.response = payload.to_i

        # sends the signal to continue the execution of #call
        that.lock.synchronize { that.condition.signal }
      end
    end
  end

  def generate_uuid
    # very naive but good enough for code examples
    "#{rand}#{rand}#{rand}"
  end
end

client = FibonacciClient.new('rpc_queue')

puts ' [x] Requesting fib(30)'
response = client.call(30)

puts " [.] Got #{response}"

client.stop

----------------------------------------

TITLE: RabbitMQ Connection Setup
DESCRIPTION: Establishing connection to RabbitMQ server with default credentials

LANGUAGE: go
CODE:
func main() {
  conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
  failOnError(err, "Failed to connect to RabbitMQ")
  defer conn.Close()
}

----------------------------------------

TITLE: Implementing Log Emitter in Go
DESCRIPTION: Complete implementation of a log emitter program that connects to RabbitMQ, declares the 'logs' exchange, and publishes messages to it.

LANGUAGE: go
CODE:
package main

import (
        "context"
        "log"
        "os"
        "strings"
        "time"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs",   // name
                "fanout", // type
                true,     // durable
                false,    // auto-deleted
                false,    // internal
                false,    // no-wait
                nil,      // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
        defer cancel()

        body := bodyFrom(os.Args)
        err = ch.PublishWithContext(ctx,
                "logs", // exchange
                "",     // routing key
                false,  // mandatory
                false,  // immediate
                amqp.Publishing{
                        ContentType: "text/plain",
                        Body:        []byte(body),
                })
        failOnError(err, "Failed to publish a message")

        log.Printf(" [x] Sent %s", body)
}

func bodyFrom(args []string) string {
        var s string
        if (len(args) < 2) || os.Args[1] == "" {
                s = "hello"
        } else {
                s = strings.Join(args[1:], " ")
        }
        return s
}

----------------------------------------

TITLE: Installing Dependencies Check - PowerShell
DESCRIPTION: Verifies that npm is installed and available in the system PATH.

LANGUAGE: powershell
CODE:
npm --help

----------------------------------------

TITLE: Starting RabbitMQ with Keycloak OAuth 2.0 Configuration
DESCRIPTION: Bash commands to start RabbitMQ configured to use Keycloak as the OAuth 2.0 server.

LANGUAGE: bash
CODE:
export MODE=keycloak
make start-rabbitmq

----------------------------------------

TITLE: Enabling a Peer Discovery Plugin in RabbitMQ
DESCRIPTION: Example of how to enable a peer discovery plugin in RabbitMQ using the rabbitmq-plugins command in offline mode.

LANGUAGE: bash
CODE:
rabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s

----------------------------------------

TITLE: Sending Tasks to a Work Queue in Objective-C
DESCRIPTION: This snippet shows how to send a task message to a RabbitMQ queue. It connects to RabbitMQ, creates a channel, declares a durable queue, and publishes a persistent message.

LANGUAGE: Objective-C
CODE:
- (void)newTask:(NSString *)msg {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];

    RMQQueue *q = [ch queue:@"task_queue" options:RMQQueueDeclareDurable];

    NSData *msgData = [msg dataUsingEncoding:NSUTF8StringEncoding];
    [ch.defaultExchange publish:msgData routingKey:q.name persistent:YES];
    NSLog(@"Sent %@", msg);

    [conn close];
}

----------------------------------------

TITLE: Importing Definitions Using rabbitmqctl in Bash
DESCRIPTION: Shows how to import RabbitMQ definitions from a JSON file using the rabbitmqctl command-line tool. This method does not require the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqctl import_definitions /path/to/definitions.file.json

----------------------------------------

TITLE: Configuring RabbitMQ Management UI for OAuth 2.0
DESCRIPTION: Configuration entries required in rabbitmq.conf to enable OAuth 2.0 for the RabbitMQ Management UI.

LANGUAGE: ini
CODE:
# ...
management.oauth_enabled = true
management.oauth_client_id = rabbit_client_code
management.oauth_provider_url = https://uaa:8443
# ...

----------------------------------------

TITLE: Closing Channel in Java
DESCRIPTION: Demonstrates how to properly close a channel when it's no longer needed using the Java client.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();

// do some work

// close the channel when it is no longer needed

ch.close();

----------------------------------------

TITLE: Enabling Single Active Consumer on Queues in Java
DESCRIPTION: This code snippet demonstrates how to enable the Single Active Consumer feature when declaring a queue using the Java client for RabbitMQ. It sets the 'x-single-active-consumer' argument to true.

LANGUAGE: java
CODE:
Channel ch = ...;
Map<String, Object> arguments = new HashMap<String, Object>();
arguments.put("x-single-active-consumer", true);
ch.queueDeclare("my-queue", false, false, false, arguments);

----------------------------------------

TITLE: Individual Message Publishing with RabbitMQ Confirms
DESCRIPTION: Implementation of synchronous individual message publishing with confirms. This approach waits for confirmation after each message, providing simple but slow publishing.

LANGUAGE: java
CODE:
while (thereAreMessagesToPublish()) {
    byte[] body = ...;
    BasicProperties properties = ...;
    channel.basicPublish(exchange, queue, properties, body);
    // uses a 5 second timeout
    channel.waitForConfirmsOrDie(5_000);
}

----------------------------------------

TITLE: RabbitMQ Callback Queue Implementation
DESCRIPTION: Shows how to create a callback queue and set message properties for RPC communication.

LANGUAGE: java
CODE:
callbackQueueName = channel.queueDeclare().getQueue();

BasicProperties props = new BasicProperties
                            .Builder()
                            .replyTo(callbackQueueName)
                            .build();

channel.basicPublish("", "rpc_queue", props, message.getBytes());

----------------------------------------

TITLE: Adding RabbitMQ Java Client Dependency in Gradle
DESCRIPTION: This Groovy snippet demonstrates how to add the RabbitMQ Java client library as a dependency in a Gradle project. It specifies the compile dependency with the library's group, name, and version.

LANGUAGE: Groovy
CODE:
dependencies {
  compile 'com.rabbitmq:amqp-client:5.24.0'
}

----------------------------------------

TITLE: Enabling RabbitMQ Prometheus Plugin
DESCRIPTION: Command to enable the Prometheus metrics plugin which exposes metrics for Prometheus-compatible scrapers

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_prometheus

----------------------------------------

TITLE: Listing RabbitMQ Channels
DESCRIPTION: Lists information on all current channels with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_channels connection messages_unacknowledged

----------------------------------------

TITLE: Management Plugin HTTPS Configuration
DESCRIPTION: Configuration for enabling HTTPS/TLS for the management interface

LANGUAGE: ini
CODE:
management.ssl.port       = 15671
management.ssl.cacertfile = /path/to/ca_certificate.pem
management.ssl.certfile   = /path/to/server_certificate.pem
management.ssl.keyfile    = /path/to/server_key.pem

----------------------------------------

TITLE: Displaying Listening TCP Sockets with ss
DESCRIPTION: These commands use ss to display listening TCP sockets and their associated processes for both IPv4 and IPv6.

LANGUAGE: bash
CODE:
sudo ss --tcp -f inet --listening --numeric --processes

LANGUAGE: bash
CODE:
sudo ss --tcp -f inet6 --listening --numeric --processes

----------------------------------------

TITLE: Implementing Worker Consumer in PHP
DESCRIPTION: Worker implementation that processes messages from the work queue with acknowledgments and fair dispatch enabled. Simulates work by sleeping based on message content.

LANGUAGE: php
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->queue_declare('task_queue', false, true, false, false);

echo " [*] Waiting for messages. To exit press CTRL+C\n";

$callback = function ($msg) {
    echo ' [x] Received ', $msg->getBody(), "\n";
    sleep(substr_count($msg->getBody(), '.'));
    echo " [x] Done\n";
    $msg->ack();
};

$channel->basic_qos(null, 1, false);
$channel->basic_consume('task_queue', '', false, false, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

$channel->close();
$connection->close();

----------------------------------------

TITLE: Publishing Persistent Messages in RabbitMQ with Java
DESCRIPTION: This code shows how to publish persistent messages to RabbitMQ using Java, ensuring messages survive server restarts.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.MessageProperties;

channel.basicPublish("", "task_queue",
            MessageProperties.PERSISTENT_TEXT_PLAIN,
            message.getBytes());

----------------------------------------

TITLE: Error Handler Function
DESCRIPTION: Helper function to handle errors in AMQP operations

LANGUAGE: go
CODE:
func failOnError(err error, msg string) {
  if err != nil {
    log.Panicf("%s: %s", msg, err)
  }
}

----------------------------------------

TITLE: Managing RabbitMQ Service
DESCRIPTION: Commands to start, stop, and check the status of the RabbitMQ service.

LANGUAGE: bash
CODE:
# stop the local node
sudo service rabbitmq-server stop

# start it back
sudo service rabbitmq-server start

# check on service status as observed by service manager
sudo service rabbitmq-server status

----------------------------------------

TITLE: Creating a RabbitMQ Stream Consumer Connection
DESCRIPTION: Establishes a connection to RabbitMQ for a stream consumer and declares the stream.

LANGUAGE: python
CODE:
consumer = Consumer(host="localhost", username="guest", password="guest")
await consumer.create_stream(
    STREAM_NAME, exists_ok=True, arguments={"MaxLengthBytes": STREAM_RETENTION}
)

----------------------------------------

TITLE: Displaying Cluster Overview with rabbitmqadmin
DESCRIPTION: This command shows an overview of the RabbitMQ cluster, including version information and Erlang details.

LANGUAGE: shell
CODE:
rabbitmqadmin show overview

----------------------------------------

TITLE: Publishing Persistent Messages in RabbitMQ with Java
DESCRIPTION: This code shows how to publish persistent messages to RabbitMQ using Java, ensuring messages survive server restarts.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.MessageProperties;

channel.basicPublish("", "task_queue",
            MessageProperties.PERSISTENT_TEXT_PLAIN,
            message.getBytes());

----------------------------------------

TITLE: Setting Heartbeat Timeout in .NET Client
DESCRIPTION: This code example shows how to configure the heartbeat timeout to 60 seconds using the .NET client for RabbitMQ. It uses the ConnectionFactory class to set the RequestedHeartbeat property before creating a connection.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();

// set the heartbeat timeout to 60 seconds
cf.RequestedHeartbeat = TimeSpan.FromSeconds(60);

----------------------------------------

TITLE: Enabled Plugins File Format
DESCRIPTION: Example of the enabled_plugins file format which lists enabled plugins in Erlang term format.

LANGUAGE: erlang
CODE:
[rabbitmq_management,rabbitmq_management_agent,rabbitmq_shovel].

----------------------------------------

TITLE: Binding a Queue to an Exchange in PHP
DESCRIPTION: This code demonstrates how to bind a queue to the 'logs' exchange using php-amqplib.

LANGUAGE: PHP
CODE:
$channel->queue_bind($queue_name, 'logs');

----------------------------------------

TITLE: Starting Independent RabbitMQ Nodes
DESCRIPTION: Commands to start three independent RabbitMQ brokers on separate nodes.

LANGUAGE: bash
CODE:
# on rabbit1
rabbitmq-server -detached
# on rabbit2
rabbitmq-server -detached
# on rabbit3
rabbitmq-server -detached

----------------------------------------

TITLE: Starting Multiple Nodes on Single Machine
DESCRIPTION: Commands to start multiple RabbitMQ nodes on a single machine with different ports and node names

LANGUAGE: bash
CODE:
RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached
RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached
rabbitmqctl -n hare stop_app
rabbitmqctl -n hare join_cluster rabbit@`hostname -s`
rabbitmqctl -n hare start_app

----------------------------------------

TITLE: Implementing Topic Exchange Message Consumer in Node.js
DESCRIPTION: Node.js script that consumes messages from a RabbitMQ topic exchange. It creates bindings using routing patterns that can include wildcards (* and #). The consumer can subscribe to multiple routing patterns and processes messages based on their routing keys.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

var args = process.argv.slice(2);

if (args.length == 0) {
  console.log("Usage: receive_logs_topic.js <facility>.<severity>");
  process.exit(1);
}

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'topic_logs';

    channel.assertExchange(exchange, 'topic', {
      durable: false
    });

    channel.assertQueue('', {
      exclusive: true
    }, function(error2, q) {
      if (error2) {
        throw error2;
      }
      console.log(' [*] Waiting for logs. To exit press CTRL+C');

      args.forEach(function(key) {
        channel.bindQueue(q.queue, exchange, key);
      });

      channel.consume(q.queue, function(msg) {
        console.log(" [x] %s:'%s'", msg.fields.routingKey, msg.content.toString());
      }, {
        noAck: true
      });
    });
  });
});

----------------------------------------

TITLE: Setting Heartbeat Timeout in .NET Client
DESCRIPTION: This code example shows how to configure the heartbeat timeout to 60 seconds using the .NET client for RabbitMQ. It uses the ConnectionFactory class to set the RequestedHeartbeat property before creating a connection.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();

// set the heartbeat timeout to 60 seconds
cf.RequestedHeartbeat = TimeSpan.FromSeconds(60);

----------------------------------------

TITLE: Changing RabbitMQ User Password
DESCRIPTION: Changes the password for a user in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl change_password janeway newpass

----------------------------------------

TITLE: Declaring Priority Queue in RabbitMQ using Java
DESCRIPTION: Example showing how to declare a priority queue using the RabbitMQ Java client with optional arguments. The code sets a maximum priority of 10 for the queue using the x-max-priority argument.

LANGUAGE: java
CODE:
Channel ch = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-priority", 10);
ch.queueDeclare("my-priority-queue", true, false, false, args);

----------------------------------------

TITLE: Implementing Blocked Connection Notifications in .NET
DESCRIPTION: Shows how to implement blocked connection notification handlers using the RabbitMQ .NET client. Uses event handlers to manage ConnectionBlocked and ConnectionUnblocked events.

LANGUAGE: csharp
CODE:
  public void HandleBlocked(object sender, ConnectionBlockedEventArgs args)
  {
      // Connection is now blocked
  }

  public void HandleUnblocked(object sender, EventArgs args)
  {
      // Connection is now unblocked
  }

Conn.ConnectionBlocked   += HandleBlocked;
Conn.ConnectionUnblocked += HandleUnblocked;

----------------------------------------

TITLE: Configuring Stream TCP Listener Options
DESCRIPTION: Example configuration for various TCP listener options including buffer sizes, keepalives, and timeouts.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 127.0.0.1:5552
stream.listeners.tcp.2 = ::1:5552

stream.tcp_listen_options.backlog = 4096
stream.tcp_listen_options.recbuf  = 131072
stream.tcp_listen_options.sndbuf  = 131072

stream.tcp_listen_options.keepalive = true
stream.tcp_listen_options.nodelay   = true

stream.tcp_listen_options.exit_on_close = true
stream.tcp_listen_options.send_timeout  = 120

----------------------------------------

TITLE: Checking Erlang Cookie Sources
DESCRIPTION: Shows how to use the rabbitmq-diagnostics command to check Erlang cookie file information for CLI tools.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics erlang_cookie_sources

----------------------------------------

TITLE: Publishing Messages to RabbitMQ Stream
DESCRIPTION: This code demonstrates how to publish messages to a RabbitMQ stream. It creates AMQP 1.0 format messages with properties and a payload, then sends them using the producer. It also uses a CountDownLatch for publish confirmations.

LANGUAGE: java
CODE:
int messageCount = 1_000_000;
CountDownLatch confirmLatch = new CountDownLatch(messageCount);
IntStream.range(0, messageCount).forEach(i -> {
    Message message = producer.messageBuilder()
        .properties()
            .creationTime(System.currentTimeMillis())
            .messageId(i)
        .messageBuilder()
        .addData("hello world".getBytes(StandardCharsets.UTF_8))
        .build();
    producer.send(message, confirmationStatus -> confirmLatch.countDown());
});
boolean done = confirmLatch.await(1, TimeUnit.MINUTES);

----------------------------------------

TITLE: Handling Blocked Connection Notifications in Java
DESCRIPTION: This snippet demonstrates how to register a BlockedListener to handle connection.blocked and connection.unblocked notifications in the RabbitMQ Java client. It uses the Connection.addBlockedListener method to add a listener that implements the BlockedListener interface.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
connection.addBlockedListener(new BlockedListener() {
    public void handleBlocked(String reason) throws IOException {
        // Connection is now blocked
    }

    public void handleUnblocked() throws IOException {
        // Connection is now unblocked
    }
});

----------------------------------------

TITLE: Displaying RabbitMQ Cluster Status
DESCRIPTION: Displays all the nodes in the cluster grouped by node type, together with the currently running nodes.

LANGUAGE: bash
CODE:
rabbitmqctl cluster_status

----------------------------------------

TITLE: Basic Management Plugin Configuration
DESCRIPTION: Example configuration showing common management plugin settings including ports, SSL, and statistics collection

LANGUAGE: ini
CODE:
listeners.tcp.default = 5672

collect_statistics_interval = 10000

management.tcp.port = 15672
management.tcp.ip   = 0.0.0.0

management.ssl.port       = 15671
management.ssl.ip         = 0.0.0.0
management.ssl.cacertfile = /path/to/ca_certificate.pem
management.ssl.certfile   = /path/to/server_certificate.pem
management.ssl.keyfile    = /path/to/server_key.pem

management.http_log_dir = /path/to/rabbit/logs/http

management.rates_mode = basic

----------------------------------------

TITLE: Creating a Fanout Exchange in Swift
DESCRIPTION: This snippet shows how to create a fanout exchange named 'logs' using the RabbitMQ Swift client.

LANGUAGE: swift
CODE:
ch.fanout("logs")

----------------------------------------

TITLE: Checking Node Quorum Criticality in RabbitMQ
DESCRIPTION: Command to check if shutting down a node would cause quorum queues to lose their quorum.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_node_is_quorum_critical

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat check_if_node_is_quorum_critical

----------------------------------------

TITLE: Locating RabbitMQ Node Data Directory using Diagnostics Command
DESCRIPTION: Command to find the data directory path of a running RabbitMQ node using rabbitmq-diagnostics. This is useful for identifying where definitions and message data are stored.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status | grep -A 2 -B 2 "Node data directory"

----------------------------------------

TITLE: Declaring and Publishing to a RabbitMQ Stream in Rust
DESCRIPTION: This code creates a stream, handles potential errors, and then publishes a message to the stream. It demonstrates stream declaration, error handling, and message sending.

LANGUAGE: rust
CODE:
let stream = "hello-rust-stream";
let create_response = environment
    .stream_creator()
    .max_length(ByteCapacity::GB(5))
    .create(stream)
    .await;

if let Err(e) = create_response {
    if let StreamCreateError::Create { stream, status } = e {
        match status {
            ResponseCode::StreamAlreadyExists => {}
            err => {
                println!("Error creating stream: {:?} {:?}", stream, err);
            }
        }
    }
}
let producer = environment.producer().build(stream).await?;
producer
    .send_with_confirm(Message::builder().body("Hello, World!").build())
    .await?;

----------------------------------------

TITLE: Binding a Queue to an Exchange in Java with RabbitMQ
DESCRIPTION: Creates a binding between the 'logs' exchange and a queue, allowing messages from the exchange to be routed to the queue.

LANGUAGE: java
CODE:
channel.queueBind(queueName, "logs", "");

----------------------------------------

TITLE: Creating Callback Queue for RPC in Ruby
DESCRIPTION: This code snippet shows how to create a callback queue for receiving RPC responses. It uses an exclusive queue and publishes a message with the 'reply_to' property set to the callback queue name.

LANGUAGE: ruby
CODE:
queue = channel.queue('', exclusive: true)
exchange = channel.default_exchange

exchange.publish(message, routing_key: 'rpc_queue', reply_to: queue.name)

# ... then code to read a response message from the callback_queue ...

----------------------------------------

TITLE: Implementing Topic Exchange Message Emission in Swift
DESCRIPTION: Function to emit log messages using a topic exchange. Creates a connection, declares a topic exchange, and publishes messages with specific routing keys.

LANGUAGE: swift
CODE:
func emitLogTopic(_ msg: String, routingKey: String) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let x = ch.topic("topic_logs")
    x.publish(msg.data(using: .utf8), routingKey: routingKey)
    print("Sent '\(msg)'")
    conn.close()
}

----------------------------------------

TITLE: Configuring Absolute Memory Threshold in RabbitMQ
DESCRIPTION: Examples of setting absolute memory thresholds using different memory units like MiB, GiB, and TiB. Supports both decimal and binary memory units.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1073741824

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1024MiB

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 4Gi

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1Ti

----------------------------------------

TITLE: Configuring Queue Leader Locator
DESCRIPTION: Sets the queue_leader_locator setting in rabbitmq.conf to ensure balanced queue distribution across cluster nodes

LANGUAGE: ini
CODE:
queue_leader_locator = balanced

----------------------------------------

TITLE: Binding Exchanges in Java using RabbitMQ Client
DESCRIPTION: Demonstrates how to bind two exchanges using the Channel#exchangeBind method in Java. Creates a binding from a source exchange to a destination exchange with a specified routing key.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();
ch.exchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Complete Log Emitter Implementation
DESCRIPTION: Full implementation of the log emitter with direct exchange and severity routing.

LANGUAGE: objectivec
CODE:
- (void)emitLogDirect:(NSString *)msg severity:(NSString *)severity {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];
    RMQExchange *x    = [ch direct:@"direct_logs"];

    [x publish:[msg dataUsingEncoding:NSUTF8StringEncoding] routingKey:severity];
    NSLog(@"Sent '%@'", msg);

    [conn close];
}

----------------------------------------

TITLE: .NET Client TLS Connection Example
DESCRIPTION: C# code showing TLS connection setup with certificate configuration and SSL options.

LANGUAGE: csharp
CODE:
ConnectionFactory cf = new ConnectionFactory();

cf.Ssl.Enabled = true;
cf.Ssl.ServerName = System.Net.Dns.GetHostName();
cf.Ssl.CertPath = "/path/to/client_key.p12";
cf.Ssl.CertPassphrase = "MySecretPassword";

using (IConnection conn = cf.CreateConnection())
{
    using (IModel ch = conn.CreateModel())
    {
        // Channel operations
    }
}

----------------------------------------

TITLE: Declaring Queue with Max Length in Java
DESCRIPTION: Declares a queue with a maximum length of 10 messages using the x-max-length argument in Java.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-length", 10);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Setting Queue Leader Locator in RabbitMQ Configuration
DESCRIPTION: Configuration example showing how to set the queue_leader_locator parameter to ensure balanced queue distribution across cluster nodes

LANGUAGE: ini
CODE:
queue_leader_locator = balanced

----------------------------------------

TITLE: Creating a Direct Exchange in RabbitMQ with JavaScript
DESCRIPTION: This snippet demonstrates how to create a direct exchange in RabbitMQ using the amqp.node client. It sets up a non-durable exchange named 'direct_logs'.

LANGUAGE: javascript
CODE:
var exchange = 'direct_logs';

channel.assertExchange(exchange, 'direct', {
  durable: false
});

----------------------------------------

TITLE: Java TLS Connection with Peer Verification
DESCRIPTION: Advanced Java example demonstrating TLS connection with peer verification using key stores and trust stores.

LANGUAGE: java
CODE:
import java.io.*;
import java.security.*;
import javax.net.ssl.*;

import com.rabbitmq.client.*;

public class Example2 {

    public static void main(String[] args) throws Exception {
      char[] keyPassphrase = "MySecretPassword".toCharArray();
      KeyStore ks = KeyStore.getInstance("PKCS12");
      ks.load(new FileInputStream("/path/to/client_key.p12"), keyPassphrase);

      KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
      kmf.init(ks, keyPassphrase);

      char[] trustPassphrase = "rabbitstore".toCharArray();
      KeyStore tks = KeyStore.getInstance("JKS");
      tks.load(new FileInputStream("/path/to/trustStore"), trustPassphrase);

      TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
      tmf.init(tks);

      SSLContext c = SSLContext.getInstance("TLSv1.2");
      c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

      ConnectionFactory factory = new ConnectionFactory();
      factory.setHost("localhost");
      factory.setPort(5671);
      factory.useSslProtocol(c);
      factory.enableHostnameVerification();

      Connection conn = factory.newConnection();
      Channel channel = conn.createChannel();
      
      channel.queueDeclare("rabbitmq-java-test", false, true, true, null);
      channel.basicPublish("", "rabbitmq-java-test", null, "Hello, World".getBytes());

      GetResponse chResponse = channel.basicGet("rabbitmq-java-test", false);
      if (chResponse == null) {
          System.out.println("No message retrieved");
      } else {
          byte[] body = chResponse.getBody();
          System.out.println("Received: " + new String(body));
      }

      channel.close();
      conn.close();
  }
}

----------------------------------------

TITLE: Importing Definitions After Node Boot in Bash
DESCRIPTION: These commands demonstrate how to import definitions immediately after node boot using a combination of rabbitmqctl commands. It waits for startup and then imports the definitions.

LANGUAGE: bash
CODE:
rabbitmqctl await_startup --timeout 300

rabbitmqctl import_definitions /path/to/definitions.file.json

# OR, import using rabbitmqadmin
# Requires management plugin to be enabled
rabbitmqadmin import /path/to/definitions.file.json

----------------------------------------

TITLE: Configuring Syslog Logging in RabbitMQ
DESCRIPTION: Example of how to configure Syslog logging, including transport protocol, endpoint, and TLS options.

LANGUAGE: ini
CODE:
log.syslog = true
log.syslog.transport = tcp
log.syslog.protocol = rfc5424

log.syslog.ssl_options.cacertfile = /path/to/ca_certificate.pem
log.syslog.ssl_options.certfile = /path/to/client_certificate.pem
log.syslog.ssl_options.keyfile = /path/to/client_key.pem

----------------------------------------

TITLE: Complete Log Emitter Implementation
DESCRIPTION: Full implementation of a log message emitter using direct exchange and severity-based routing.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='direct_logs', exchange_type='direct')

severity = sys.argv[1] if len(sys.argv) > 1 else 'info'
message = ' '.join(sys.argv[2:]) or 'Hello World!'
channel.basic_publish(
    exchange='direct_logs', routing_key=severity, body=message)
print(f" [x] Sent {severity}:{message}")
connection.close()

----------------------------------------

TITLE: Implementing Topic Exchange Message Emission in Swift
DESCRIPTION: Function to emit log messages using a topic exchange. Creates a connection, declares a topic exchange, and publishes messages with specific routing keys.

LANGUAGE: swift
CODE:
func emitLogTopic(_ msg: String, routingKey: String) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let x = ch.topic("topic_logs")
    x.publish(msg.data(using: .utf8), routingKey: routingKey)
    print("Sent '\(msg)'")
    conn.close()
}

----------------------------------------

TITLE: Setting DLX Policy Using rabbitmqctl (Bash)
DESCRIPTION: Command to set a Dead Letter Exchange policy using rabbitmqctl in Unix-like systems. This policy applies the DLX 'my-dlx' to all queues.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy DLX ".*" '{"dead-letter-exchange":"my-dlx"}' --apply-to queues

----------------------------------------

TITLE: Listing RabbitMQ Channels
DESCRIPTION: Lists channels with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_channels connection messages_unacknowledged

----------------------------------------

TITLE: Example RabbitMQ Configuration with LDAP Support
DESCRIPTION: A comprehensive example configuration using both standard and advanced config files to set up LDAP authentication and authorization in RabbitMQ.

LANGUAGE: ini
CODE:
auth_backends.1 = ldap

auth_ldap.servers.1  = my-ldap-server
auth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com
auth_ldap.use_ssl    = false
auth_ldap.port       = 389
auth_ldap.log        = false

LANGUAGE: erlang
CODE:
[{rabbitmq_auth_backend_ldap,[
    {vhost_access_query,    {in_group,
                              "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},
     {resource_access_query,
      {for, [{permission, configure, {in_group, "cn=admin,dc=example,dc=com"}},
             {permission, write,
              {for, [{resource, queue,    {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, exchange, {constant, true}}]}},
             {permission, read,
              {for, [{resource, exchange, {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, queue,    {constant, true}}]}}
            ]
      }},
     {topic_access_query,
      {for, [{permission, write, {match, {string, "${routing_key}"}, {string, "^a"}}},
             {permission, read,  {constant, true}}]
      }},
     {tag_queries,           [{administrator, {constant, false}},
                              {management,    {constant, true}}]}
]}].

----------------------------------------

TITLE: Configuring Alternate Exchange Using Java Client
DESCRIPTION: Java code example demonstrating how to declare an exchange with an alternate exchange using client-provided arguments. Creates a direct exchange with a fanout alternate exchange and sets up routing bindings.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("alternate-exchange", "my-ae");
channel.exchangeDeclare("my-direct", "direct", false, false, args);
channel.exchangeDeclare("my-ae", "fanout");
channel.queueDeclare("routed");
channel.queueBind("routed", "my-direct", "key1");
channel.queueDeclare("unrouted");
channel.queueBind("unrouted", "my-ae", "");

----------------------------------------

TITLE: .NET Client TLS Connection Example
DESCRIPTION: C# code showing TLS connection setup with certificate configuration and SSL options.

LANGUAGE: csharp
CODE:
ConnectionFactory cf = new ConnectionFactory();

cf.Ssl.Enabled = true;
cf.Ssl.ServerName = System.Net.Dns.GetHostName();
cf.Ssl.CertPath = "/path/to/client_key.p12";
cf.Ssl.CertPassphrase = "MySecretPassword";

using (IConnection conn = cf.CreateConnection())
{
    using (IModel ch = conn.CreateModel())
    {
        // Channel operations
    }
}

----------------------------------------

TITLE: Creating a Stream in RabbitMQ
DESCRIPTION: This code creates a new stream named 'first-application-stream' using the Environment instance. It uses default settings for the stream.

LANGUAGE: java
CODE:
environment.streamCreator().stream("first-application-stream").create();

----------------------------------------

TITLE: Configuring Consumer Timeout in RabbitMQ
DESCRIPTION: Configuration examples for setting consumer acknowledgement timeout in rabbitmq.conf file. The timeout value is specified in milliseconds and helps prevent disk space issues from unacknowledged deliveries.

LANGUAGE: ini
CODE:
# 30 minutes in milliseconds
consumer_timeout = 1800000

----------------------------------------

TITLE: Enabling Management Plugin
DESCRIPTION: Shows how to enable the RabbitMQ management plugin for monitoring

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_management

----------------------------------------

TITLE: Configuring Raft WAL Segment Size for Quorum Queues in RabbitMQ
DESCRIPTION: Sets the maximum size of the Raft write-ahead log (WAL) segment file to 32 MiB before flushing to disk. This affects the amount of message data that quorum queues can keep in memory under steady load.

LANGUAGE: ini
CODE:
raft.wal_max_size_bytes = 32000000

----------------------------------------

TITLE: Starting RabbitMQ with Khepri via Environment Variable
DESCRIPTION: Command to start RabbitMQ server with Khepri enabled through environment variable configuration.

LANGUAGE: bash
CODE:
env RABBITMQ_FEATURE_FLAGS="khepri_db,..." rabbitmq-server

----------------------------------------

TITLE: Acknowledging Multiple Deliveries in Java
DESCRIPTION: Example of how to acknowledge multiple deliveries at once using the RabbitMQ Java client. This code uses the basicAck method with the multiple parameter set to true to acknowledge all unacknowledged deliveries up to the specified delivery tag.

LANGUAGE: java
CODE:
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge all deliveries up to
             // this delivery tag
             channel.basicAck(deliveryTag, true);
         }
     });

----------------------------------------

TITLE: Setting Default Virtual Host Configuration
DESCRIPTION: Configuration snippet showing how to set the default virtual host in rabbitmq.conf file

LANGUAGE: ini
CODE:
default_vhost = /

----------------------------------------

TITLE: Removing Node from RabbitMQ Cluster
DESCRIPTION: Removes a cluster node remotely, with an option for offline removal.

LANGUAGE: bash
CODE:
rabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer

----------------------------------------

TITLE: Configuring Spring Boot Application for RabbitMQ
DESCRIPTION: YAML configuration for a Spring Boot application using RabbitMQ. It sets active profiles, logging levels, and tutorial-specific client duration.

LANGUAGE: yaml
CODE:
spring:
  profiles:
    active: usage_message

logging:
  level:
    org: ERROR

tutorial:
  client:
    duration: 10000

----------------------------------------

TITLE: Listing Stream Consumers using RabbitMQ CLI
DESCRIPTION: This shell command uses the RabbitMQ CLI to list stream consumers, showing their connection PID, stream, messages consumed, active status, and activity status.

LANGUAGE: shell
CODE:
docker exec rabbitmq rabbitmqctl list_stream_consumers \
  connection_pid,stream,messages_consumed,active,activity_status

----------------------------------------

TITLE: Deleting RabbitMQ Queue
DESCRIPTION: Deletes a queue with optional conditions.

LANGUAGE: bash
CODE:
rabbitmqctl delete_queue my_queue --if-empty --if-unused

----------------------------------------

TITLE: Creating RabbitMQ Stream Producer in C#
DESCRIPTION: Sets up a producer to send messages to the 'hello-stream' stream. It creates the producer and sends a single message.

LANGUAGE: csharp
CODE:
var producer = await Producer.Create(new ProducerConfig(streamSystem, "hello-stream"));

await producer.Send(new Message(Encoding.UTF8.GetBytes($"Hello, World")));

----------------------------------------

TITLE: Listing RabbitMQ Queues
DESCRIPTION: Lists queue details for a specific virtual host with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_queues -p my-vhost messages consumers

----------------------------------------

TITLE: Setting Virtual Host Limits
DESCRIPTION: Configures limits on maximum connections and queues for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-connections": 256}'

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-queues": 1024}'

----------------------------------------

TITLE: Listing Bindings for a Virtual Host
DESCRIPTION: Command to list bindings for a specific virtual host using rabbitmq-diagnostics.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics list_bindings --vhost "/"

----------------------------------------

TITLE: Basic Cluster Formation Commands
DESCRIPTION: Example of basic RabbitMQ commands to stop, reset and join a node to an existing cluster

LANGUAGE: bash
CODE:
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@rabbit1
rabbitmqctl start_app

----------------------------------------

TITLE: Basic Java TLS Connection Example
DESCRIPTION: Simple example showing how to establish a TLS connection to RabbitMQ in Java without peer verification.

LANGUAGE: java
CODE:
import java.io.*;
import java.security.*;

import com.rabbitmq.client.*;

public class Example1 {

    public static void main(String[] args) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        factory.setPort(5671);

        factory.useSslProtocol();
        // Tells the library to setup the default Key and Trust managers for you
        // which do not do any form of remote server trust verification

        Connection conn = factory.newConnection();
        Channel channel = conn.createChannel();

        // non-durable, exclusive, auto-delete queue
        channel.queueDeclare("rabbitmq-java-test", false, true, true, null);
        channel.basicPublish("", "rabbitmq-java-test", null, "Hello, World".getBytes());

        GetResponse chResponse = channel.basicGet("rabbitmq-java-test", false);
        if (chResponse == null) {
            System.out.println("No message retrieved");
        } else {
            byte[] body = chResponse.getBody();
            System.out.println("Received: " + new String(body));
        }

        channel.close();
        conn.close();
    }
}

----------------------------------------

TITLE: Closing RabbitMQ Connection in JavaScript
DESCRIPTION: This code snippet demonstrates how to close the RabbitMQ connection and exit the process after sending a message.

LANGUAGE: javascript
CODE:
setTimeout(function() {
  connection.close();
  process.exit(0)
}, 500);

----------------------------------------

TITLE: Configuring TLS for Federation
DESCRIPTION: Example of configuring a federation upstream to use TLS with client certificate authentication.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none","expires":3600000}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream my-upstream `
    '"{""uri":""amqps://target.hostname:5671?cacertfile=drive:\path\to\ca_bundle.pem&certfile=drive:\path\to\client_certificate.pem&keyfile=drive:\path\to\client_key.pem&verify=verify_none"",""expires":3600000}"'

LANGUAGE: ini
CODE:
PUT /api/parameters/federation-upstream/%2f/my-upstream
{"value":{"uri":"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none","expires":3600000}}

----------------------------------------

TITLE: Managing Virtual Host Parameters in RabbitMQ
DESCRIPTION: Commands for setting, clearing and listing runtime parameters scoped to a virtual host using rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
# sets a runtime parameter in a virtual host
rabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>

# clears (unsets) a runtime parameter in a virtual host
rabbitmqctl clear_parameter [-p vhost] <component_name> <name>

# lists runtime parameters in a virtual host
rabbitmqctl list_parameters [-p vhost]

LANGUAGE: PowerShell
CODE:
# sets a runtime parameter in a virtual host
rabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>

# clears (unsets) a runtime parameter in a virtual host
rabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>

# lists runtime parameters in a virtual host
rabbitmqctl.bat list_parameters [-p vhost]

----------------------------------------

TITLE: Listing RabbitMQ Permissions
DESCRIPTION: Lists permissions in a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_permissions -p my-vhost

----------------------------------------

TITLE: Creating a RabbitMQ Stream Environment in Go
DESCRIPTION: Establishes a new environment for RabbitMQ stream operations, which is the entry point for configuring publishers, consumers, and streams.

LANGUAGE: go
CODE:
env, err := stream.NewEnvironment(
		stream.NewEnvironmentOptions())

----------------------------------------

TITLE: Declaring Queue with TTL in Java
DESCRIPTION: Creates a queue with a message TTL of 60 seconds using the Java client library.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-message-ttl", 60000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Configuring DLX Using Queue Arguments - Java
DESCRIPTION: Demonstrates how to declare a queue with a dead letter exchange configuration using queue arguments in Java. Includes exchange declaration and optional routing key setting.

LANGUAGE: java
CODE:
channel.exchangeDeclare("some.exchange.name", "direct");

Map<String, Object> args = new HashMap<String, Object>();
args.put("x-dead-letter-exchange", "some.exchange.name");
channel.queueDeclare("myqueue", false, false, false, args);

LANGUAGE: java
CODE:
args.put("x-dead-letter-routing-key", "some-routing-key");

----------------------------------------

TITLE: Configuring Quorum Queue Settings in Erlang
DESCRIPTION: Example of modifying quorum queue configuration settings using the advanced.config file in Erlang syntax.

LANGUAGE: erlang
CODE:
[
 {rabbit, [{quorum_cluster_size, 5},
           {quorum_commands_soft_limit, 64}]}
].

----------------------------------------

TITLE: Importing Definitions Using rabbitmqadmin in Bash
DESCRIPTION: Demonstrates how to import RabbitMQ definitions using the rabbitmqadmin tool, which requires the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqadmin import /path/to/definitions.file.json

----------------------------------------

TITLE: Configuring TCP Listener for AMQP
DESCRIPTION: Example configuration for AMQP TCP listener specifying IP address and port.

LANGUAGE: ini
CODE:
listeners.tcp.1 = 192.168.1.99:5672

----------------------------------------

TITLE: Importing Definitions Using rabbitmqadmin in Bash
DESCRIPTION: Demonstrates how to import RabbitMQ definitions using the rabbitmqadmin tool, which requires the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqadmin import /path/to/definitions.file.json

----------------------------------------

TITLE: Configuring TLS for Federation
DESCRIPTION: Example of configuring a federation upstream to use TLS with client certificates and disabling peer verification.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none","expires":3600000}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream my-upstream `
    '"{""uri"":""amqps://target.hostname:5671?cacertfile=drive:\\path\\to\\ca_bundle.pem&certfile=drive:\\path\\to\\client_certificate.pem&keyfile=drive:\\path\\to\\client_key.pem&verify=verify_none"",""expires"":3600000}"'

LANGUAGE: http
CODE:
PUT /api/parameters/federation-upstream/%2f/my-upstream
{"value":{"uri":"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none","expires":3600000}}

----------------------------------------

TITLE: Emitting Error Log Example
DESCRIPTION: Example of how to emit an error log message using the implemented system.

LANGUAGE: objectivec
CODE:
[self emitLogDirect:@"Hi there!" severity:@"error"];

----------------------------------------

TITLE: Acknowledging Multiple Deliveries in C#
DESCRIPTION: Example of how to acknowledge multiple deliveries at once using the RabbitMQ .NET client. This code uses the BasicAck method with the multiple parameter set to true to acknowledge all unacknowledged deliveries up to the specified delivery tag.

LANGUAGE: csharp
CODE:
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // positively acknowledge all deliveries up to
                    // this delivery tag
                    channel.BasicAck(ea.DeliveryTag, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Installing RabbitMQ and Dependencies
DESCRIPTION: Commands for installing RabbitMQ server and its dependencies using dnf/yum

LANGUAGE: bash
CODE:
dnf update -y

## install these dependencies from standard OS repositories
dnf install -y logrotate

## install RabbitMQ and zero dependency Erlang
dnf install -y erlang rabbitmq-server

----------------------------------------

TITLE: Multi-Node Management Plugin Configuration
DESCRIPTION: Commands for configuring multiple nodes with management plugin on different ports

LANGUAGE: bash
CODE:
RABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [{port,15672}]" RABBITMQ_NODENAME=rabbit rabbitmq-server -detached
RABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [{port,15673}]" RABBITMQ_NODENAME=hare rabbitmq-server -detached

----------------------------------------

TITLE: Closing Specific RabbitMQ Connection
DESCRIPTION: Closes a specific connection identified by its Erlang process ID.

LANGUAGE: bash
CODE:
rabbitmqctl close_connection "<rabbit@tanto.4262.0>" "go away"

----------------------------------------

TITLE: Negatively Acknowledging Multiple Deliveries in Java
DESCRIPTION: Example of how to negatively acknowledge multiple deliveries at once using the RabbitMQ Java client. This code uses the basicNack method to requeue all unacknowledged deliveries up to the specified delivery tag.

LANGUAGE: java
CODE:
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // requeue all unacknowledged deliveries up to
             // this delivery tag
             channel.basicNack(deliveryTag, true, true);
         }
     });

----------------------------------------

TITLE: Inspecting Messaging Topology Operator Logs in Kubernetes
DESCRIPTION: Command to view logs from the Messaging Topology Operator pods for debugging purposes.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system logs -l app.kubernetes.io/name=messaging-topology-operator

----------------------------------------

TITLE: Adding RabbitMQ Virtual Host
DESCRIPTION: Creates a new virtual host with optional description, tags, and default queue type.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost project9_dev_18 --description 'Dev environment no. 18' --tags dev,project9

----------------------------------------

TITLE: Configuring Relative Memory Threshold in RabbitMQ
DESCRIPTION: Example of setting a relative memory threshold as a fraction of total available RAM.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.relative = 0.4

----------------------------------------

TITLE: RabbitMQ Environment Configuration Using ssl_dist_optfile
DESCRIPTION: Configuration of /etc/rabbitmq/rabbitmq-env.conf using a separate TLS configuration file for inter-node communication.

LANGUAGE: bash
CODE:
ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-9.4/ebin"

SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH
  -proto_dist inet_tls
  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config"

RABBITMQ_CTL_ERL_ARGS="-pa $ERL_SSL_PATH
  -proto_dist inet_tls
  -ssl_dist_optfile /etc/rabbitmq/inter_node_tls.config"

----------------------------------------

TITLE: Multi-Node Management Plugin Configuration
DESCRIPTION: Commands for configuring multiple nodes with management plugin on different ports

LANGUAGE: bash
CODE:
RABBITMQ_NODE_PORT=5672 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [{port,15672}]" RABBITMQ_NODENAME=rabbit rabbitmq-server -detached
RABBITMQ_NODE_PORT=5673 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [{port,15673}]" RABBITMQ_NODENAME=hare rabbitmq-server -detached

----------------------------------------

TITLE: Configuring Node List for Classic Config Peer Discovery
DESCRIPTION: Example of how to configure a list of peer nodes when using the classic config peer discovery backend.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = classic_config

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

cluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local
cluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local

----------------------------------------

TITLE: Configuring AWS Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the AWS (EC2) peer discovery backend with region and credentials.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = aws

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws

cluster_formation.aws.region = us-east-1
cluster_formation.aws.access_key_id = ANIDEXAMPLE
cluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY

----------------------------------------

TITLE: Verifying Docker Installation
DESCRIPTION: Command to check Docker and Docker Compose installation

LANGUAGE: bash
CODE:
docker info && docker-compose version

----------------------------------------

TITLE: Configuring Custom Scheduler Count in Erlang VM
DESCRIPTION: Sets the number of runtime schedulers to 4 regardless of available CPU cores using the +S flag.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+S 4:4"

----------------------------------------

TITLE: Rebalancing Queue Leaders in RabbitMQ
DESCRIPTION: Command to rebalance queue leader replicas across cluster nodes. Supports different queue types including all, quorum, classic, and stream queues.

LANGUAGE: bash
CODE:
rabbitmq-queues rebalance "all" --vhost-pattern "a-vhost" --queue-pattern ".*"

----------------------------------------

TITLE: Configuring Stream Flow Control
DESCRIPTION: Configuration for stream flow control parameters including initial credits and unblocking thresholds.

LANGUAGE: ini
CODE:
stream.initial_credits = 100000
stream.credits_required_for_unblocking = 25000

----------------------------------------

TITLE: Publishing Message to Direct Exchange in PHP
DESCRIPTION: Illustrates how to publish a message to a direct exchange with a specific severity as the routing key using php-amqplib.

LANGUAGE: PHP
CODE:
$channel->exchange_declare('direct_logs', 'direct', false, false, false);
$channel->basic_publish($msg, 'direct_logs', $severity);

----------------------------------------

TITLE: Implementing Basic RPC Queue Declaration and Message Publishing in Go
DESCRIPTION: Example of declaring a callback queue and publishing an RPC request message with correlation ID and reply-to properties.

LANGUAGE: go
CODE:
q, err := ch.QueueDeclare(
  "",    // name
  false, // durable
  false, // delete when unused
  true,  // exclusive
  false, // noWait
  nil,   // arguments
)

ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
defer cancel()

err = ch.PublishWithContext(ctx,
  "",          // exchange
  "rpc_queue", // routing key
  false,       // mandatory
  false,       // immediate
  amqp.Publishing{
    ContentType:   "text/plain",
    CorrelationId: corrId,
    ReplyTo:       q.Name,
    Body:          []byte(strconv.Itoa(n)),
})

----------------------------------------

TITLE: Publishing Message with TTL in C#
DESCRIPTION: Publishes a message with a 60-second TTL using the .NET client library.

LANGUAGE: csharp
CODE:
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Expiration = "60000";

model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);

----------------------------------------

TITLE: Configuring SHA-512 Password Hashing in RabbitMQ
DESCRIPTION: This snippet demonstrates how to configure RabbitMQ to use SHA-512 for password hashing in the configuration file.

LANGUAGE: ini
CODE:
password_hashing_module = rabbit_password_hashing_sha512

----------------------------------------

TITLE: Configuring TLS for Web MQTT Plugin
DESCRIPTION: Configuration example for enabling TLS (WSS) connections for the Web MQTT plugin.

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# web_mqtt.ssl.password   = changeme

----------------------------------------

TITLE: Starting RabbitMQ Server in Foreground
DESCRIPTION: Command to start a RabbitMQ node in the foreground, specifying the configuration file location.

LANGUAGE: bash
CODE:
CONF_ENV_FILE="/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server

----------------------------------------

TITLE: Creating Virtual Host via HTTP API
DESCRIPTION: Creates a new RabbitMQ virtual host using the HTTP Management API endpoint.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin HTTPS
DESCRIPTION: Configuration snippet to enable HTTPS for the management plugin.

LANGUAGE: ini
CODE:
management.ssl.port       = 15671
management.ssl.cacertfile = /path/to/ca_certificate.pem
management.ssl.certfile   = /path/to/server_certificate.pem
management.ssl.keyfile    = /path/to/server_key.pem

----------------------------------------

TITLE: Negatively Acknowledging Deliveries in Java
DESCRIPTION: Examples of how to negatively acknowledge deliveries using the RabbitMQ Java client. These code snippets demonstrate using basicReject to either discard a message or requeue it for later processing.

LANGUAGE: java
CODE:
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // negatively acknowledge, the message will
             // be discarded
             channel.basicReject(deliveryTag, false);
         }
     });

LANGUAGE: java
CODE:
// this example assumes an existing channel instance

boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // requeue the delivery
             channel.basicReject(deliveryTag, true);
         }
     });

----------------------------------------

TITLE: Basic MQTT Plugin Configuration
DESCRIPTION: Sample configuration showing common MQTT plugin settings including TCP listeners, anonymous connections, and default credentials

LANGUAGE: ini
CODE:
mqtt.listeners.tcp.default = 1883
mqtt.allow_anonymous  = true
mqtt.default_user     = guest
mqtt.default_pass     = guest
mqtt.vhost            = /
mqtt.exchange         = amq.topic
mqtt.prefetch         = 10
mqtt.max_session_expiry_interval_seconds = 86400

----------------------------------------

TITLE: Setting Federation Policy in Bash
DESCRIPTION: Command to set a policy that enables federation for exchanges matching a pattern using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy exchange-federation "^federated\." '{"federation-upstream-set":"all"}' --priority 10 --apply-to exchanges

----------------------------------------

TITLE: Rejecting Single Message with Requeue in Java
DESCRIPTION: This Java snippet demonstrates how to reject a single message consumed via polling (basic.get) and request the broker to requeue it using the basicNack method.

LANGUAGE: java
CODE:
GetResponse gr = channel.basicGet("some.queue", false);
channel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);

----------------------------------------

TITLE: Basic RPC Client Usage in Java
DESCRIPTION: Demonstrates the basic usage of the RPC client to calculate Fibonacci numbers.

LANGUAGE: java
CODE:
FibonacciRpcClient fibonacciRpc = new FibonacciRpcClient();
String result = fibonacciRpc.call("4");
System.out.println( "fib(4) is " + result);

----------------------------------------

TITLE: Starting RabbitMQ Application
DESCRIPTION: Starts the RabbitMQ application on the node.

LANGUAGE: bash
CODE:
rabbitmqctl start_app

----------------------------------------

TITLE: Configuring Independent Consumers Prefetch in Java
DESCRIPTION: Example demonstrating how to set independent prefetch limits for multiple consumers on the same channel, where each consumer receives a maximum of 10 unacknowledged messages.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Joining RabbitMQ Cluster Using CLI
DESCRIPTION: Command to join a remote RabbitMQ node to form a cluster using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl join_cluster rabbit@remote-host

----------------------------------------

TITLE: Retrieving RabbitMQ memory usage details
DESCRIPTION: Use the HTTP API to retrieve detailed memory usage information for a RabbitMQ node.

LANGUAGE: bash
CODE:
curl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq
# => {detailed JSON output}

----------------------------------------

TITLE: Implementing Positive Acknowledgements in .NET
DESCRIPTION: Shows how to positively acknowledge message delivery using the RabbitMQ .NET client with manual acknowledgement mode.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // positively acknowledge a single delivery, the message will
                    // be discarded
                    channel.BasicAck(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Clearing User Limits via HTTP API Endpoint
DESCRIPTION: This snippet shows the HTTP API endpoint for clearing user limits, which can be used to remove both max-connections and max-channels limits.

LANGUAGE: ini
CODE:
DELETE /api/user-limits/{username}/{limit}

----------------------------------------

TITLE: Cluster Status Output With Partitions
DESCRIPTION: Example output of the cluster_status command when network partitions are detected.

LANGUAGE: bash
CODE:
rabbitmqctl cluster_status
# => Cluster status of node rabbit@warp10 ...
# => Basics
# =>
# => Cluster name: local.1
# =>
# => ...edited out for brevity...
# =>
# => Network Partitions
# =>
# => Node flopsy@warp10 cannot communicate with hare@warp10
# => Node rabbit@warp10 cannot communicate with hare@warp10

----------------------------------------

TITLE: Creating a Channel and Sending a Message in Swift
DESCRIPTION: Create a channel, declare a queue, and publish a message to the queue using Swift and RabbitMQ.

LANGUAGE: swift
CODE:
let ch = conn.createChannel()
let q = ch.queue("hello")
ch.defaultExchange().publish("Hello World!".data(using: .utf8), routingKey: q.name)
conn.close()

----------------------------------------

TITLE: Basic OAuth 2.0 Authentication Configuration
DESCRIPTION: Minimal configuration needed to set up OAuth 2.0 authentication with an identity provider

LANGUAGE: ini
CODE:
auth_backends.1 = rabbit_auth_backend_oauth2

auth_oauth2.resource_server_id = new_resource_server_id
auth_oauth2.issuer = https://my-oauth2-provider.com/realm/rabbitmq

----------------------------------------

TITLE: Environment Variable Configuration for Windows
DESCRIPTION: Example PowerShell commands for setting RabbitMQ environment variables on Windows

LANGUAGE: powershell
CODE:
set RABBITMQ_BASE=C:\Data\RabbitMQ

----------------------------------------

TITLE: Locating Plugin Directories with rabbitmq-plugins
DESCRIPTION: Use the rabbitmq-plugins directories command to find the locations of plugin directories, expansion directory, and enabled plugins file.

LANGUAGE: bash
CODE:
rabbitmq-plugins directories -s

----------------------------------------

TITLE: Declaring a Direct Exchange in Elixir
DESCRIPTION: This code declares a direct exchange named 'direct_logs' using the AMQP Elixir library.

LANGUAGE: elixir
CODE:
AMQP.Exchange.declare(channel, "direct_logs", :direct)

----------------------------------------

TITLE: Purging RabbitMQ Queue
DESCRIPTION: Removes all messages from a specified queue.

LANGUAGE: bash
CODE:
rabbitmqctl purge_queue -p my_vhost my_queue

----------------------------------------

TITLE: Creating RabbitMQ Cluster Resource Definition
DESCRIPTION: YAML definition for creating a basic RabbitmqCluster resource in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: definition

----------------------------------------

TITLE: Setting Maximum Connection Limit for a Virtual Host
DESCRIPTION: This snippet demonstrates how to set a maximum connection limit for a virtual host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-connections": 256}'

----------------------------------------

TITLE: Importing Definitions Using rabbitmqctl in Bash
DESCRIPTION: This command imports RabbitMQ definitions from a JSON file using the rabbitmqctl command-line tool. It does not require the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqctl import_definitions /path/to/definitions.file.json

----------------------------------------

TITLE: Configuring Password Regular Expression Validator in RabbitMQ
DESCRIPTION: This snippet demonstrates how to set up a regular expression validator for passwords in RabbitMQ's configuration file.

LANGUAGE: ini
CODE:
credential_validator.validation_backend = rabbit_credential_validator_password_regexp
credential_validator.regexp = ^[a-bA-Z0-9$]{20,100}

----------------------------------------

TITLE: Complete Log Receiver Implementation
DESCRIPTION: Full implementation of a log message receiver that filters messages based on severity levels.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='direct_logs', exchange_type='direct')

result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

severities = sys.argv[1:]
if not severities:
    sys.stderr.write("Usage: %s [info] [warning] [error]\n" % sys.argv[0])
    sys.exit(1)

for severity in severities:
    channel.queue_bind(
        exchange='direct_logs', queue=queue_name, routing_key=severity)

print(' [*] Waiting for logs. To exit press CTRL+C')


def callback(ch, method, properties, body):
    print(f" [x] {method.routing_key}:{body}")


channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

channel.start_consuming()

----------------------------------------

TITLE: Configuring AMQP Listener in RabbitMQ
DESCRIPTION: This snippet demonstrates how to configure an AMQP listener for RabbitMQ to use a specific IP address and the standard port.

LANGUAGE: ini
CODE:
listeners.tcp.1 = 192.168.1.99:5672

----------------------------------------

TITLE: Configuring TLS for Federation Links
DESCRIPTION: Commands to set up federation with TLS security including certificates and verification settings

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none","expires":3600000}'

----------------------------------------

TITLE: Setting Queue Length Policy Using rabbitmqctl on Windows
DESCRIPTION: Windows-specific command to set a queue size limit policy using rabbitmqctl. Uses proper Windows command line escaping.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy my-pol "^one-meg$" ^
  "{""max-length-bytes"":1048576}" ^
  --apply-to queues

----------------------------------------

TITLE: Launching RabbitMQ with OAuth 2.0 configuration
DESCRIPTION: Start RabbitMQ with specific OAuth 2.0 configuration file

LANGUAGE: bash
CODE:
MODE="multi-keycloak" CONF="rabbitmq.scenario1.conf" make start-rabbitmq

----------------------------------------

TITLE: Basic RPC Client Usage Example - Python
DESCRIPTION: Simple example showing how to use the RPC client to calculate a Fibonacci number

LANGUAGE: python
CODE:
fibonacci_rpc = FibonacciRpcClient()
result = fibonacci_rpc.call(4)
print(f"fib(4) is {result}")

----------------------------------------

TITLE: Publishing Messages Individually with Confirms in C#
DESCRIPTION: This code shows how to publish a message and await its confirmation individually using RabbitMQ's publisher confirms in C#.

LANGUAGE: csharp
CODE:
for (int i = 0; i < MESSAGE_COUNT; i++)
{
    byte[] body = Encoding.UTF8.GetBytes(i.ToString());
    try
    {
        await channel.BasicPublishAsync("", "hello", null, body);
    }
    catch (Exception e)
    {
        Console.WriteLine($"Error publishing message {i}: {e.Message}");
    }
}

----------------------------------------

TITLE: Creating a Consumer for RabbitMQ Stream
DESCRIPTION: This code creates a Consumer instance to consume messages from the specified stream. It sets the stream to consume from, the starting offset, and defines the behavior when receiving a message.

LANGUAGE: java
CODE:
AtomicInteger messageConsumed = new AtomicInteger(0); // just a counter
Consumer consumer = environment.consumerBuilder()
    .stream("first-application-stream") // stream to consume from
    .offset(OffsetSpecification.first()) // where to start consuming
    .messageHandler((context, message) -> messageConsumed.incrementAndGet()) // behavior
    .build();

----------------------------------------

TITLE: Setting RabbitMQ User Permissions
DESCRIPTION: Sets permissions for a user on a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions -p my-vhost janeway "^janeway-.*" ".*" ".*"

----------------------------------------

TITLE: Updating PATH for RabbitMQ CLI Tools
DESCRIPTION: Commands to update the PATH environment variable to include RabbitMQ CLI tools for different Mac architectures.

LANGUAGE: bash
CODE:
# for macOS Intel
export PATH=$PATH:/usr/local/sbin
# for Apple Silicon
export PATH=$PATH:/opt/homebrew/sbin

----------------------------------------

TITLE: Implementing RPC Client Call Method in C#
DESCRIPTION: Basic client interface implementation that sends an RPC request and awaits the response using Task-based asynchronous pattern.

LANGUAGE: csharp
CODE:
public async Task<int> CallAsync(int n)
{
    var response = await SendAndReceiveAsync(n.ToString());
    return int.Parse(response);
}

----------------------------------------

TITLE: RabbitMQ Memory Breakdown
DESCRIPTION: Command to analyze memory usage breakdown across different RabbitMQ components and display in MB units

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q memory_breakdown --unit "MB"

----------------------------------------

TITLE: Basic TLS Configuration in RabbitMQ
DESCRIPTION: Example RabbitMQ configuration showing how to enable TLS support with basic settings.

LANGUAGE: ini
CODE:
listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true

----------------------------------------

TITLE: Running RabbitMQ AMQP Server in Background
DESCRIPTION: This command starts the RabbitMQ AMQP server as a background process using the -detached option. When run in this mode, the server's process ID will not be written to the PID file.

LANGUAGE: bash
CODE:
rabbitmq-server -detached

----------------------------------------

TITLE: Enabling All Stable Feature Flags
DESCRIPTION: Command to enable all stable feature flags using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag all

----------------------------------------

TITLE: Complete Subscriber Implementation in C# for RabbitMQ
DESCRIPTION: This code snippet provides the complete implementation of a log message subscriber using RabbitMQ and the .NET client. It sets up a connection, declares a temporary queue, binds it to the exchange, and consumes messages.

LANGUAGE: C#
CODE:
using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;

class ReceiveLogs
{
    public static void Main()
    {
        var factory = new ConnectionFactory() { HostName = "localhost" };
        using (var connection = factory.CreateConnection())
        using (var channel = connection.CreateModel())
        {
            channel.ExchangeDeclare(exchange: "logs", type: ExchangeType.Fanout);

            var queueName = channel.QueueDeclare().QueueName;
            channel.QueueBind(queue: queueName,
                              exchange: "logs",
                              routingKey: string.Empty);

            Console.WriteLine(" [*] Waiting for logs.");

            var consumer = new EventingBasicConsumer(channel);
            consumer.Received += (model, ea) =>
            {
                byte[] body = ea.Body.ToArray();
                var message = Encoding.UTF8.GetString(body);
                Console.WriteLine(" [x] {0}", message);
            };
            channel.BasicConsume(queue: queueName,
                                 autoAck: true,
                                 consumer: consumer);

            Console.WriteLine(" Press [enter] to exit.");
            Console.ReadLine();
        }
    }
}

----------------------------------------

TITLE: Moving Queue Leader in RabbitMQ
DESCRIPTION: Commands to move a queue leader using a temporary policy, useful for rebalancing queue leaders after an upgrade.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to queues --priority 100 move-my-queue '^<queue>$;' '{"ha-mode":"nodes", "ha-params":["<new-leader-node>"]}'
rabbitmqctl clear_policy move-my-queue

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_policy --apply-to queues --priority 100 move-my-queue '^<queue>$;' '{"ha-mode":"nodes", "ha-params":["<new-leader-node>"]}'
rabbitmqctl.bat clear_policy move-my-queue

----------------------------------------

TITLE: Checking RabbitMQ node status
DESCRIPTION: Use rabbitmq-diagnostics to check the status of a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q status
# => [output elided for brevity]

----------------------------------------

TITLE: Setting Erlang Process Limit in RabbitMQ
DESCRIPTION: Increases the limit on the number of Erlang processes to 2 million using either an environment variable or a VM flag.

LANGUAGE: bash
CODE:
RABBITMQ_MAX_NUMBER_OF_PROCESSES=2000000

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+P 2000000"

----------------------------------------

TITLE: Multiple Severity Bindings
DESCRIPTION: Creating bindings for multiple severity levels to receive filtered messages.

LANGUAGE: objectivec
CODE:
RMQQueue *q = [ch queue:@"" options:RMQQueueDeclareExclusive];

NSArray *severities = @[@"error", @"warning", @"info"];
for (NSString *severity in severities) {
    [q bind:x routingKey:severity];
}

----------------------------------------

TITLE: Listing RabbitMQ Bindings
DESCRIPTION: Lists binding details for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_bindings -p my-vhost exchange_name queue_name

----------------------------------------

TITLE: Setting RabbitMQ User Permissions
DESCRIPTION: Sets permissions for a user on a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions -p my-vhost janeway "^janeway-.*" ".*" ".*"

----------------------------------------

TITLE: Disabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to disable Firehose tracing for a specific virtual host in RabbitMQ. This stops the tracking of messages and returns the system to normal operation.

LANGUAGE: bash
CODE:
rabbitmqctl trace_off -p [virtual host]

----------------------------------------

TITLE: Disabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to disable Firehose tracing for a specific virtual host in RabbitMQ. This stops the tracking of messages and returns the system to normal operation.

LANGUAGE: bash
CODE:
rabbitmqctl trace_off -p [virtual host]

----------------------------------------

TITLE: Starting and Stopping RabbitMQ Nodes
DESCRIPTION: Demonstrates how to start and stop RabbitMQ nodes using CLI tools.

LANGUAGE: bash
CODE:
rabbitmqctl shutdown
rabbitmqctl shutdown --node rabbit@target-hostname.local

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat shutdown
rabbitmqctl.bat shutdown --node rabbit@target-hostname.local

----------------------------------------

TITLE: Configuring Reverse DNS Lookups in RabbitMQ
DESCRIPTION: These snippets show how to explicitly activate or deactivate reverse DNS lookups for client IP addresses.

LANGUAGE: ini
CODE:
reverse_dns_lookups = true

LANGUAGE: ini
CODE:
reverse_dns_lookups = false

----------------------------------------

TITLE: Updating Homebrew and Installing RabbitMQ
DESCRIPTION: Commands to update Homebrew taps and install the RabbitMQ formula, which includes dependencies like Erlang/OTP.

LANGUAGE: bash
CODE:
brew update
brew install rabbitmq

----------------------------------------

TITLE: Starting RabbitMQ Server and Enabling Khepri via CLI
DESCRIPTION: Commands to start RabbitMQ server and enable the Khepri feature flag using command line interface.

LANGUAGE: bash
CODE:
rabbitmq-server

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag --experimental khepri_db

----------------------------------------

TITLE: Running the Topic Exchange Example
DESCRIPTION: Commands to build and run the topic exchange example with separate sender and receiver processes.

LANGUAGE: bash
CODE:
./mvnw clean package

# shell 1
java -jar target/rabbitmq-tutorials.jar \
    --spring.profiles.active=topics,receiver \
    --tutorial.client.duration=60000
# shell 2
java -jar target/rabbitmq-tutorials.jar \
    --spring.profiles.active=topics,sender \
    --tutorial.client.duration=60000

----------------------------------------

TITLE: Setting Connection Handshake Timeout in RabbitMQ
DESCRIPTION: This configuration increases the connection handshake timeout to 20 seconds for clients in constrained environments.

LANGUAGE: ini
CODE:
handshake_timeout = 20000

----------------------------------------

TITLE: Configuring Stream Heartbeat Timeout
DESCRIPTION: Configuration to set a custom heartbeat timeout value for stream protocol connections.

LANGUAGE: ini
CODE:
stream.heartbeat = 20

----------------------------------------

TITLE: Displaying Help for CLI Tools
DESCRIPTION: Shows how to use the help command to discover available commands for RabbitMQ CLI tools.

LANGUAGE: bash
CODE:
rabbitmqctl help

rabbitmq-diagnostics help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help

rabbitmq-diagnostics.bat help

----------------------------------------

TITLE: Changing RabbitMQ Cluster Node Type
DESCRIPTION: Changes the type of the cluster node between disc and ram.

LANGUAGE: bash
CODE:
rabbitmqctl change_cluster_node_type disc

----------------------------------------

TITLE: Configuring Stream Heartbeat Timeout
DESCRIPTION: Configuration to set a custom heartbeat timeout value for stream protocol connections.

LANGUAGE: ini
CODE:
stream.heartbeat = 20

----------------------------------------

TITLE: Displaying RabbitMQ Status
DESCRIPTION: Displays broker status information such as running applications, versions, and statistics.

LANGUAGE: bash
CODE:
rabbitmqctl status

----------------------------------------

TITLE: Creating a Consumer with AMQP 1.0 in Go
DESCRIPTION: Shows how to create a consumer to receive messages from a queue using the AMQP 1.0 Go client for RabbitMQ.

LANGUAGE: Go
CODE:
// create the consumer
consumer, err := connection.NewConsumer(context.Background(), "some-queue", nil)
// receive the message
deliveryContext, err := consumer.Receive(context.Background())
// ....
deliveryContext.Accept(context.Background()) // settle the message

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugin
DESCRIPTION: This command enables the RabbitMQ Stream plugin in the running Docker container. It's necessary to activate the Streams functionality.

LANGUAGE: shell
CODE:
docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Configuring Shared Prefetch Limits in Java
DESCRIPTION: Example showing how to configure both per-consumer and per-channel prefetch limits, where consumers share a global limit while maintaining individual maximums.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10, false); // Per consumer limit
channel.basicQos(15, true);  // Per channel limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Waiting for RabbitMQ Application Startup
DESCRIPTION: Waits for the RabbitMQ application to start on the target node.

LANGUAGE: bash
CODE:
rabbitmqctl await_startup

----------------------------------------

TITLE: Starting RabbitMQ Server in Detached Mode
DESCRIPTION: Command to start the RabbitMQ server as a background process, not attached to the Command Prompt window.

LANGUAGE: PowerShell
CODE:
rabbitmq-server.bat -detached

----------------------------------------

TITLE: Logging Node Unavailability in RabbitMQ
DESCRIPTION: This snippet shows a log message generated when a RabbitMQ node detects that another node has gone down due to a net tick timeout.

LANGUAGE: ini
CODE:
2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout

----------------------------------------

TITLE: Starting RabbitMQ Server in Detached Mode
DESCRIPTION: Command to start the RabbitMQ server as a background process, not attached to the Command Prompt window.

LANGUAGE: PowerShell
CODE:
rabbitmq-server.bat -detached

----------------------------------------

TITLE: Configuring RabbitMQ TLS Connection with Peer Verification
DESCRIPTION: Example of a TLS-enabled RabbitMQ connection URI with peer verification enabled, including certificate paths and server name indication.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_peer&server_name_indication=myhost

----------------------------------------

TITLE: Displaying Help for CLI Tools
DESCRIPTION: Shows how to use the help command to discover available commands for RabbitMQ CLI tools.

LANGUAGE: bash
CODE:
rabbitmqctl help

rabbitmq-diagnostics help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help

rabbitmq-diagnostics.bat help

----------------------------------------

TITLE: JSON Payload for Setting User Limits via HTTP API
DESCRIPTION: This JSON payload is used in the HTTP API request body to set the value of a user limit.

LANGUAGE: javascript
CODE:
{"value": 20}

----------------------------------------

TITLE: Inspecting RabbitMQ Listeners using rabbitmq-diagnostics
DESCRIPTION: This code snippet shows the output of the 'rabbitmq-diagnostics listeners' command, which displays the active TCP listeners on a RabbitMQ node, including their ports, protocols, and purposes.

LANGUAGE: ini
CODE:
Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS
Interface: [::], port: 15672, protocol: http, purpose: HTTP API
Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)
Interface: [::], port: 1883, protocol: mqtt, purpose: MQTT

----------------------------------------

TITLE: Setting Overflow Behavior Policy with rabbitmqctl in PowerShell
DESCRIPTION: Uses rabbitmqctl on Windows to set a policy that limits a queue to 2 messages and rejects new publishes when the limit is reached.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy my-pol "^two-messages$" ^
  "{""max-length"":2,""overflow"":""reject-publish""}" ^
  --apply-to queues

----------------------------------------

TITLE: Configuring Shared Prefetch Limits in Java
DESCRIPTION: Example showing how to configure both per-consumer and per-channel prefetch limits, where consumers share a global limit while maintaining individual maximums.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10, false); // Per consumer limit
channel.basicQos(15, true);  // Per channel limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin HTTP Logging
DESCRIPTION: Configuration snippet to enable HTTP request logging for the management plugin.

LANGUAGE: ini
CODE:
management.http_log_dir = /path/to/a/writeable/directory

----------------------------------------

TITLE: Implementing RabbitMQ Stream Consumer Callback and Subscription
DESCRIPTION: Defines a callback function for handling received messages and sets up the consumer subscription.

LANGUAGE: python
CODE:
async def on_message(msg: AMQPMessage, message_context: MessageContext):
    stream = message_context.consumer.get_stream(message_context.subscriber_name)
    print("Got message: {} from stream {}".format(msg, stream))

await consumer.start()
await consumer.subscribe(
    stream=STREAM_NAME,
    callback=on_message,
    offset_specification=ConsumerOffsetSpecification(OffsetType.FIRST, None),
)
await consumer.run()

----------------------------------------

TITLE: Waiting for RabbitMQ Application Startup
DESCRIPTION: Waits for the RabbitMQ application to start on the target node.

LANGUAGE: bash
CODE:
rabbitmqctl await_startup

----------------------------------------

TITLE: Message Headers for Sender-selected Distribution in RabbitMQ
DESCRIPTION: RabbitMQ extends AMQP 0-9-1 routing capabilities by implementing CC and BCC message headers. These headers must contain arrays of strings (longstr values) that specify additional routing destinations. BCC values are removed before message delivery for confidentiality.



----------------------------------------

TITLE: Setting TTL Policy Using rabbitmqctl (Windows PowerShell)
DESCRIPTION: Sets a message TTL policy of 60 seconds for all queues using rabbitmqctl on Windows.

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy TTL ".*" "{""message-ttl"":60000}" --apply-to queues

----------------------------------------

TITLE: Smart Publishing with Deduplication in Java
DESCRIPTION: This code demonstrates a smart publishing approach that uses deduplication and queries the broker for the last publishing ID. It only publishes new messages starting from the last published ID.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
  .stream("deduplication-stream")
  .name("app-1") // provide a name for the producer
  .confirmTimeout(Duration.ZERO) // to never stop retrying
  .build();
long start = producer.getLastPublishingId() + 1; // get last publishing ID and add 1
int messageCount = 20;
records(start, messageCount).forEach(record -> {
  Message message = producer.messageBuilder()
    .publishingId(record.id()) // set the publishing ID
    .addData(record.content().getBytes(StandardCharsets.UTF_8))
    .build();
  producer.send(message, confirmationStatus -> latch.countDown());
});

----------------------------------------

TITLE: Accessing a RabbitMQ Semaphore in Java
DESCRIPTION: This code snippet shows how a process can access a semaphore implemented in RabbitMQ using Java. It creates a QueueingConsumer, sets the prefetch count to 1, and consumes messages from the semaphore queue without acknowledging them.

LANGUAGE: java
CODE:
QueueingConsumer consumer = new QueueingConsumer(channel);
channel.basicQos(1);
channel.basicConsume("resource.semaphore", false, consumer);

while (true) {
  QueueingConsumer.Delivery delivery = consumer.nextDelivery();

  // here we access the resource controlled by the semaphore.  

  if(shouldStopProcessing()) {
    channel.basicReject(delivery.getEnvelope().getDeliveryTag(), true);
  }
}

----------------------------------------

TITLE: Setting TLS Handshake Timeout in RabbitMQ
DESCRIPTION: This configuration sets the TLS handshake timeout to 10 seconds when TLS is enabled.

LANGUAGE: ini
CODE:
ssl_handshake_timeout = 10000

----------------------------------------

TITLE: Setting Fair Dispatch with BasicQos in C#
DESCRIPTION: Configures RabbitMQ to use fair dispatch by limiting the number of unacknowledged messages per consumer.

LANGUAGE: C#
CODE:
channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);

----------------------------------------

TITLE: Setting policies in RabbitMQ
DESCRIPTION: Examples of setting policies in RabbitMQ using rabbitmqctl, HTTP API, and management UI.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me \
    "^federated\." '{"federation-upstream-set":"all"}' \
    --priority 1 \
    --apply-to exchanges

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy federate-me ^
    "^federated\." "{""federation-upstream-set"":""all""}" ^
    --priority 1 ^
    --apply-to exchanges

LANGUAGE: ini
CODE:
PUT /api/policies/%2f/federate-me
    {"pattern": "^federated\.",
     "definition": {"federation-upstream-set":"all"},
     "priority": 1,
    "apply-to": "exchanges"}

----------------------------------------

TITLE: Negatively Acknowledging Multiple Deliveries in C#
DESCRIPTION: Example of how to negatively acknowledge multiple deliveries at once using the RabbitMQ .NET client. This code uses the BasicNack method to requeue all unacknowledged deliveries up to the specified delivery tag.

LANGUAGE: csharp
CODE:
// this example assumes an existing channel (IModel) instance

var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // requeue all unacknowledged deliveries up to
                    // this delivery tag
                    channel.BasicNack(ea.DeliveryTag, true, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Disabling RabbitMQ Plugins
DESCRIPTION: Command to disable a plugin and its dependent plugins

LANGUAGE: bash
CODE:
rabbitmq-plugins disable rabbitmq_management

----------------------------------------

TITLE: Creating Temporary Queue in Elixir
DESCRIPTION: Declares an exclusive temporary queue with a server-generated name that will be deleted when the connection closes.

LANGUAGE: elixir
CODE:
{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, "", exclusive: true)

----------------------------------------

TITLE: Configuring System Limits in Systemd
DESCRIPTION: Configuration for setting file descriptor limits in systemd service for RabbitMQ operation.

LANGUAGE: ini
CODE:
[Service]
LimitNOFILE=64000

----------------------------------------

TITLE: Setting Message TTL Policy using rabbitmqctl
DESCRIPTION: Commands to set a message TTL policy of 60 seconds for all queues using rabbitmqctl on Unix and Windows systems

LANGUAGE: bash
CODE:
rabbitmqctl set_policy TTL ".*" '{"message-ttl":60000}' --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy TTL ".*" "{""message-ttl"":60000}" --apply-to queues

----------------------------------------

TITLE: Enabling RabbitMQ Shovel Plugin
DESCRIPTION: Command to enable the RabbitMQ Shovel plugin using rabbitmq-plugins CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel

----------------------------------------

TITLE: Implementing RabbitMQ Message Sender with Spring AMQP
DESCRIPTION: Java class for sending messages to a RabbitMQ queue using Spring AMQP's RabbitTemplate. It sends a 'Hello World!' message every second.

LANGUAGE: java
CODE:
package org.springframework.amqp.tutorials.tut1;

import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;

public class Tut1Sender {

    @Autowired
    private RabbitTemplate template;

    @Autowired
    private Queue queue;

    @Scheduled(fixedDelay = 1000, initialDelay = 500)
    public void send() {
        String message = "Hello World!";
        this.template.convertAndSend(queue.getName(), message);
        System.out.println(" [x] Sent '" + message + "'");
    }
}

----------------------------------------

TITLE: Enabling RabbitMQ Shovel Plugin
DESCRIPTION: Command to enable the RabbitMQ Shovel plugin using rabbitmq-plugins tool

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel

----------------------------------------

TITLE: Setting Maximum Connections Limit using RabbitMQ CLI
DESCRIPTION: This command sets the maximum number of connections a user can open to 10 using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits user1 '{"max-connections": 10}'

----------------------------------------

TITLE: Configuring etcd Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the etcd peer discovery backend with endpoints and authentication.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = etcd

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_etcd

cluster_formation.etcd.endpoints.1 = one.etcd.eng.example.local:2379
cluster_formation.etcd.endpoints.2 = two.etcd.eng.example.local:2479
cluster_formation.etcd.endpoints.3 = three.etcd.eng.example.local:2579

cluster_formation.etcd.username = rabbitmq
cluster_formation.etcd.password = s3kR37

----------------------------------------

TITLE: Declaring Queue with Expiration in Java
DESCRIPTION: Java code example showing how to declare a queue that expires after 30 minutes of inactivity

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-expires", 1800000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Importing Cloudsmith Repository Key
DESCRIPTION: Downloads and imports the Cloudsmith repository signing key for RabbitMQ packages.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc
gpg --import cloudsmith-rabbitmq-key.asc

----------------------------------------

TITLE: Setting Max Queue Length Policy with rabbitmqctl in PowerShell
DESCRIPTION: Uses rabbitmqctl on Windows to set a policy that limits a queue to 1MiB of message data. When the limit is reached, the oldest messages are discarded.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy my-pol "^one-meg$" ^
  "{""max-length-bytes"":1048576}" ^
  --apply-to queues

----------------------------------------

TITLE: Setting Message TTL Policy using rabbitmqctl
DESCRIPTION: Commands to set a message TTL policy of 60 seconds for all queues using rabbitmqctl on Unix and Windows systems

LANGUAGE: bash
CODE:
rabbitmqctl set_policy TTL ".*" '{"message-ttl":60000}' --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy TTL ".*" "{""message-ttl"":60000}" --apply-to queues

----------------------------------------

TITLE: Configuring Erlang Scheduler Count in RabbitMQ
DESCRIPTION: Sets the number of Erlang schedulers to 4, overriding the default behavior of using all available CPU cores.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+S 4:4"

----------------------------------------

TITLE: Start RabbitMQ Server in Foreground
DESCRIPTION: Command to start a RabbitMQ node in the foreground with configuration file specification

LANGUAGE: bash
CODE:
CONF_ENV_FILE="/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server

----------------------------------------

TITLE: Verifying Erlang Port Usage with EPMD
DESCRIPTION: This command checks which ports are being used for inter-node and CLI tool communication in the Erlang environment.

LANGUAGE: bash
CODE:
epmd -names

----------------------------------------

TITLE: Publishing Message with TTL in Java
DESCRIPTION: Java code example demonstrating how to publish a message with a TTL of 60 seconds using message properties

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()
                                   .expiration("60000")
                                   .build();
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);

----------------------------------------

TITLE: Listing RabbitMQ Virtual Hosts
DESCRIPTION: Lists virtual hosts with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_vhosts name tracing

----------------------------------------

TITLE: Rejecting Single Message with Requeue in Java using RabbitMQ
DESCRIPTION: This example demonstrates how to reject a single message consumed via polling (basic.get) in RabbitMQ using Java, instructing the broker to requeue it.

LANGUAGE: java
CODE:
GetResponse gr = channel.basicGet("some.queue", false);
channel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);

----------------------------------------

TITLE: Running CLI Observer
DESCRIPTION: Example of using the observer command to start a CLI observer interface on the target node with a specified interval.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics observer --interval 10

----------------------------------------

TITLE: Configuring Console Logging in RabbitMQ
DESCRIPTION: Example of how to activate and configure console logging, including log level and JSON formatting.

LANGUAGE: ini
CODE:
log.console = true
log.console.level = info
log.console.formatter = json

----------------------------------------

TITLE: LDAP Server Connection Configuration
DESCRIPTION: Example configuration for LDAP server connection settings

LANGUAGE: ini
CODE:
auth_ldap.servers.1 = ldap.eng.megacorp.local
auth_ldap.servers.2 = 192.168.0.100
auth_ldap.port = 6389

----------------------------------------

TITLE: Enabling RabbitMQ Plugins via CLI
DESCRIPTION: Commands to enable RabbitMQ plugins using the rabbitmq-plugins command line tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable <plugin-name>
rabbitmq-plugins enable rabbitmq_peer_discovery_k8s

----------------------------------------

TITLE: Configuring Federation Upstream in RabbitMQ
DESCRIPTION: This snippet demonstrates how to add a federation upstream named 'origin' using the rabbitmqctl command. The upstream is configured with a URI pointing to a remote RabbitMQ host.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri"":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: Creating Virtual Host via CLI
DESCRIPTION: Creates a new RabbitMQ virtual host using rabbitmqctl command line tool.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1

----------------------------------------

TITLE: Setting Virtual Host Parameters in RabbitMQ
DESCRIPTION: Commands for managing vhost-scoped runtime parameters. Shows how to set, clear and list parameters for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>

rabbitmqctl clear_parameter [-p vhost] <component_name> <name>

rabbitmqctl list_parameters [-p vhost]

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>

rabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>

rabbitmqctl.bat list_parameters [-p vhost]

LANGUAGE: ini
CODE:
PUT /api/parameters/{component_name}/{vhost}/{name}
DELETE /api/parameters/{component_name}/{vhost}/{name}
GET /api/parameters

----------------------------------------

TITLE: Setting Raft WAL File Size Limit
DESCRIPTION: Configuration for setting the maximum size limit of the Write Ahead Log (WAL) file before it is flushed to disk segments.

LANGUAGE: ini
CODE:
# Flush current WAL file to a segment file on disk once it reaches 64 MiB in size
raft.wal_max_size_bytes = 64000000

----------------------------------------

TITLE: Binding Queue to Exchange in RabbitMQ
DESCRIPTION: Creates a binding between a queue and the logs exchange, allowing messages to flow from the exchange to the queue.

LANGUAGE: javascript
CODE:
channel.bindQueue(queue_name, 'logs', '');

----------------------------------------

TITLE: Rendering SVG Diagram with JSX and CSS Modules
DESCRIPTION: This code snippet shows how to render an SVG diagram using JSX and CSS modules, including a figure and caption.

LANGUAGE: jsx
CODE:
<figure className={diagramStyles.diagram}>
<MetadataStoreRole/>
<figcaption>Role of the metadata store</figcaption>
</figure>

----------------------------------------

TITLE: Resetting a RabbitMQ Node
DESCRIPTION: Commands to reset a running and responsive RabbitMQ node.

LANGUAGE: bash
CODE:
# on rabbit1
rabbitmqctl stop_app
rabbitmqctl reset

----------------------------------------

TITLE: Multi-Node Single Machine Cluster Setup
DESCRIPTION: Commands for running multiple RabbitMQ nodes on a single machine with different ports

LANGUAGE: bash
CODE:
RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached
RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=hare rabbitmq-server -detached
rabbitmqctl -n hare stop_app
rabbitmqctl -n hare join_cluster rabbit@`hostname -s`
rabbitmqctl -n hare start_app

----------------------------------------

TITLE: Enabling Federation Plugins in RabbitMQ
DESCRIPTION: CLI commands to enable the federation plugin and its management UI extension

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_federation
rabbitmq-plugins enable rabbitmq_federation_management

----------------------------------------

TITLE: RabbitMQ Repository Configuration for Modern Distributions
DESCRIPTION: Repository configuration for modern RPM-based distributions like RHEL 9, CentOS Stream 9 and modern Fedora releases

LANGUAGE: ini
CODE:
# In /etc/yum.repos.d/rabbitmq.repo

##
## Zero dependency Erlang RPM
##

[modern-erlang]
name=modern-erlang-el9
baseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch
        https://yum2.rabbitmq.com/erlang/el/9/$basearch
repo_gpgcheck=1
enabled=1
gpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key
gpgcheck=1
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
metadata_expire=300
pkg_gpgcheck=1
autorefresh=1
type=rpm-md

[modern-erlang-noarch]
name=modern-erlang-el9-noarch
baseurl=https://yum1.rabbitmq.com/erlang/el/9/noarch
        https://yum2.rabbitmq.com/erlang/el/9/noarch
...

----------------------------------------

TITLE: Handling Publisher Confirms Asynchronously in C#
DESCRIPTION: This code snippet shows how to handle RabbitMQ publisher confirms asynchronously by registering callbacks for confirmations, nacks, and returns in C#.

LANGUAGE: csharp
CODE:
channel.BasicAcks += (sender, ea) =>
{
    HandleAck(ea.DeliveryTag, ea.Multiple);
};

channel.BasicNacks += (sender, ea) =>
{
    HandleNack(ea.DeliveryTag, ea.Multiple);
};

channel.BasicReturn += (sender, ea) =>
{
    Console.WriteLine($"{DateTime.Now:MM/dd/yyyy hh:mm:ss tt} [WARNING] message sequence number {ea.SequenceNumber} has been basic.return-ed");
};

for (int i = 0; i < MESSAGE_COUNT; i++)
{
    long nextSeqNo = await channel.GetNextPublishSequenceNumberAsync();
    byte[] body = Encoding.UTF8.GetBytes(i.ToString());
    outstandingConfirms.TryAdd(nextSeqNo, new OutstandingConfirm { Body = body, Message = i.ToString() });
    await channel.BasicPublishAsync("", "hello", null, body);
}

----------------------------------------

TITLE: Creating a Virtual Host with Metadata using RabbitMQ CLI
DESCRIPTION: Shows how to create a virtual host with a description, default queue type, and tags using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1 --description "QA env 1" --default-queue-type quorum

----------------------------------------

TITLE: Declaring Exchanges and Queues with Alternate Exchange in Java
DESCRIPTION: This Java code snippet demonstrates how to declare exchanges and queues with an Alternate Exchange configuration. It creates a direct exchange 'my-direct' with an AE 'my-ae', declares 'my-ae' as a fanout exchange, and binds queues to both exchanges.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("alternate-exchange", "my-ae");
channel.exchangeDeclare("my-direct", "direct", false, false, args);
channel.exchangeDeclare("my-ae", "fanout");
channel.queueDeclare("routed");
channel.queueBind("routed", "my-direct", "key1");
channel.queueDeclare("unrouted");
channel.queueBind("unrouted", "my-ae", "");

----------------------------------------

TITLE: Setting Overflow Behavior Policy with rabbitmqctl (PowerShell)
DESCRIPTION: Uses rabbitmqctl on Windows to set a policy that limits a queue to 2 messages and configures overflow behavior to reject new publishes when the limit is reached.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy my-pol "^two-messages$" ^
  "{""max-length"":2,""overflow"":""reject-publish""}" ^
  --apply-to queues

----------------------------------------

TITLE: Publishing Messages with TTL
DESCRIPTION: Examples demonstrating how to publish messages with a per-message TTL of 60 seconds.

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()
                                   .expiration("60000")
                                   .build();
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);

LANGUAGE: csharp
CODE:
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Expiration = "60000";

model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);

----------------------------------------

TITLE: Configuring Prometheus Scraping Timeouts
DESCRIPTION: Example configuration snippet for modifying Prometheus scraping timeouts in RabbitMQ

LANGUAGE: ini
CODE:
prometheus.tcp.idle_timeout = 120000
prometheus.tcp.inactivity_timeout = 120000
prometheus.tcp.request_timeout = 120000

----------------------------------------

TITLE: Multi-Datacenter Metrics Configuration
DESCRIPTION: Implements metrics collection for distributed RabbitMQ clients across multiple datacenters using tags for identification. Includes both JMX and Datadog registry configuration.

LANGUAGE: java
CODE:
for (String dc : new String[] {"us", "europe", "asia"}) {
    CompositeMeterRegistry compositeMeterRegistry = new CompositeMeterRegistry();
    MeterRegistry datadogRegistry = new DatadogMeterRegistry(config, Clock.SYSTEM);
    MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);

    Tags tags = Tags.of("host", hostname, "dc", dc);
    new ClassLoaderMetrics(tags).bindTo(compositeMeterRegistry);
    new JvmMemoryMetrics(tags).bindTo(compositeMeterRegistry);
    new JvmGcMetrics(tags).bindTo(compositeMeterRegistry);
    new ProcessorMetrics(tags).bindTo(compositeMeterRegistry);
    new JvmThreadMetrics(tags).bindTo(compositeMeterRegistry);

    compositeMeterRegistry.add(datadogRegistry);
    compositeMeterRegistry.add(jmxRegistry);

    ConnectionFactory connectionFactory = new ConnectionFactory();
    MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(
        compositeMeterRegistry, "rabbitmq.client", tags
    );
    connectionFactory.setMetricsCollector(metricsCollector);

----------------------------------------

TITLE: Removing Node from RabbitMQ Cluster
DESCRIPTION: Series of commands to safely remove a node from a RabbitMQ cluster by stopping the application, resetting its state, and restarting it as a standalone node.

LANGUAGE: bash
CODE:
# Stop RabbitMQ without stopping the runtime (its OS process).
rabbitmqctl stop_app

# Reset it.
rabbitmqctl reset

# Restart the node as a blank one.
rabbitmqctl start_app

----------------------------------------

TITLE: Publishing Messages with TTL
DESCRIPTION: Examples demonstrating how to publish messages with a per-message TTL of 60 seconds.

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()
                                   .expiration("60000")
                                   .build();
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);

LANGUAGE: csharp
CODE:
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Expiration = "60000";

model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);

----------------------------------------

TITLE: Changing RabbitMQ User Password
DESCRIPTION: Changes the password for the specified user.

LANGUAGE: bash
CODE:
rabbitmqctl change_password janeway newpass

----------------------------------------

TITLE: Creating Virtual Host via CLI
DESCRIPTION: Creates a new RabbitMQ virtual host using rabbitmqctl command line tool.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1

----------------------------------------

TITLE: Configuring DNS Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the DNS-based peer discovery backend with a seed hostname.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = dns

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns

cluster_formation.dns.hostname = discovery.eng.example.local

----------------------------------------

TITLE: Exporting Definitions Using HTTP API in Bash
DESCRIPTION: Demonstrates how to export RabbitMQ definitions using a direct HTTP API call. This method requires the management plugin to be enabled and uses curl to make the API request.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Securing Prometheus Endpoint with TLS
DESCRIPTION: Configuration example for enabling TLS on the Prometheus metrics endpoint

LANGUAGE: ini
CODE:
prometheus.ssl.port       = 15691
prometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem
prometheus.ssl.certfile   = /full/path/to/server_certificate.pem
prometheus.ssl.keyfile    = /full/path/to/server_key.pem
prometheus.ssl.password   = password-if-keyfile-is-encrypted
## To enforce TLS (disable the non-TLS port):
# prometheus.tcp.listener = none

----------------------------------------

TITLE: Listing RabbitMQ Exchanges
DESCRIPTION: Lists exchange details for a specific virtual host with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_exchanges -p my-vhost name type

----------------------------------------

TITLE: Configuring Advanced Log Formatting in RabbitMQ
DESCRIPTION: Examples of how to configure advanced log formatting options, including time format, log level format, and custom message format.

LANGUAGE: ini
CODE:
log.file.formatter.time_format = epoch_usecs
log.file.formatter.level_format = uc4
log.console.formatter.plaintext.format = $level $time $msg

----------------------------------------

TITLE: Setting Federation Policy in RabbitMQ
DESCRIPTION: This snippet shows how to set a federation policy named 'exchange-federation' using the rabbitmqctl command. The policy applies to exchanges with names starting with 'federated.' and configures them to use all defined upstreams.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy exchange-federation \
    "^federated\." \
    '{"federation-upstream-set":"all"}' \
    --priority 10 \
    --apply-to exchanges

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy exchange-federation `
    "^federated\." `
    '"{""federation-upstream-set"":""all""}"' `
    --priority 10 `
    --apply-to exchanges

----------------------------------------

TITLE: Deactivating Non-TLS Listeners in RabbitMQ
DESCRIPTION: This configuration deactivates non-TLS listeners and sets up TLS-only connections with specific SSL options.

LANGUAGE: ini
CODE:
listeners.tcp = none

listeners.ssl.default = 5671

ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = false

----------------------------------------

TITLE: Setting Custom RabbitMQ Configuration File Path in rabbitmq-env.conf
DESCRIPTION: This example shows how to specify a custom location for the RabbitMQ configuration file using the rabbitmq-env.conf file. It sets the configuration file path to "/data/services/rabbitmq/rabbitmq.conf".

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
CONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf

----------------------------------------

TITLE: Starting RabbitMQ Server in Background Mode
DESCRIPTION: Launches the RabbitMQ AMQP server as a background process using the -detached flag. This command starts the server without writing the process ID to the PID file.

LANGUAGE: bash
CODE:
rabbitmq-server -detached

----------------------------------------

TITLE: Certificate Expiration Check
DESCRIPTION: Checks TLS certificate expiration within specified time period

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6

----------------------------------------

TITLE: Initializing STOMP WebSocket Client
DESCRIPTION: JavaScript code to initialize and connect a STOMP client over WebSocket, including HTML script inclusion and connection setup with authentication.

LANGUAGE: html
CODE:
<!-- include the client library -->
<script src="stomp.js"></script>

LANGUAGE: javascript
CODE:
var ws = new WebSocket('ws://127.0.0.1:15674/ws');
var client = Stomp.over(ws);

LANGUAGE: javascript
CODE:
var on_connect = function() {
    console.log('connected');
};
var on_error =  function() {
    console.log('error');
};
client.connect('guest', 'guest', on_connect, on_error, '/');

----------------------------------------

TITLE: Creating a Durable Subscription in STOMP
DESCRIPTION: Example of a SUBSCRIBE frame for creating a durable subscription to a topic.

LANGUAGE: plaintext
CODE:
SUBSCRIBE
destination:/topic/my-durable
id:1234
durable:true
auto-delete:false

----------------------------------------

TITLE: RabbitMQ Direct Reply-to Queue Names
DESCRIPTION: Special queue names used in Direct Reply-to implementation. These are pseudo-queue identifiers that don't represent actual queues but are used for direct reply routing.

LANGUAGE: plaintext
CODE:
amq.rabbitmq.reply-to

----------------------------------------

TITLE: Setting Maximum Connections Limit using curl and HTTP API
DESCRIPTION: This curl command demonstrates how to set the maximum connections limit for a user using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Setting a Federation Policy in RabbitMQ
DESCRIPTION: Example of defining a policy for federation that applies to exchanges with names matching a pattern.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me \
    "^federated\." '{"federation-upstream-set":"all"}' \
    --priority 1 \
    --apply-to exchanges

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_policy federate-me ^
    "^federated\." "{""federation-upstream-set"":""all""}" ^
    --priority 1 ^
    --apply-to exchanges

----------------------------------------

TITLE: Setting Custom RabbitMQ Configuration File Path in rabbitmq-env.conf
DESCRIPTION: This example shows how to specify a custom location for the RabbitMQ configuration file using the rabbitmq-env.conf file. It sets the configuration file path to "/data/services/rabbitmq/rabbitmq.conf".

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
CONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf

----------------------------------------

TITLE: Implementing Server-Side Offset Tracking in RabbitMQ Stream Consumer
DESCRIPTION: This snippet demonstrates how to implement server-side offset tracking in a RabbitMQ stream consumer. It shows how to name the consumer, activate manual tracking strategy, and store offsets at regular intervals.

LANGUAGE: java
CODE:
OffsetSpecification offsetSpecification = OffsetSpecification.first();
AtomicLong messageCount = new AtomicLong(0);
environment.consumerBuilder()
    .stream(stream)
    .offset(offsetSpecification)
    .name("offset-tracking-tutorial") // the consumer must a have name
    .manualTrackingStrategy().builder() // activate manual offset tracking
    .messageHandler((ctx, msg) -> {
        if (firstOffset.compareAndSet(-1, ctx.offset())) {
            System.out.println("First message received.");
        }
        if (messageCount.incrementAndGet() % 10 == 0) {
            ctx.storeOffset(); // store offset every 10 messages
        }
        String body = new String(msg.getBodyAsBinary(), StandardCharsets.UTF_8);
        if (body.equals("marker")) {
            lastOffset.set(ctx.offset());
            ctx.storeOffset(); // store the offset on consumer closing
            ctx.consumer().close();
            consumedLatch.countDown();
        }
    })
    .build();

----------------------------------------

TITLE: Checking Certificate Expiration
DESCRIPTION: Example of using the check_certificate_expiration command to check the expiration date of TLS certificates on the target node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6

----------------------------------------

TITLE: Updating Virtual Host Metadata using RabbitMQ CLI
DESCRIPTION: Demonstrates updating virtual host metadata including description, default queue type, and tags.

LANGUAGE: bash
CODE:
rabbitmqctl update_vhost_metadata qa1 --description "QA environment for issue 1662" --default-queue-type quorum --tags qa,project-a,qa-1662

----------------------------------------

TITLE: Implementing RPC Client with Spring AMQP RabbitTemplate
DESCRIPTION: This class implements the RPC client using Spring AMQP's RabbitTemplate. It sends RPC requests to compute Fibonacci numbers and prints the results.

LANGUAGE: java
CODE:
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;

public class Tut6Client {

	@Autowired
	private RabbitTemplate template;

	@Autowired
	private DirectExchange exchange;

	int start = 0;

	@Scheduled(fixedDelay = 1000, initialDelay = 500)
	public void send() {
		System.out.println(" [x] Requesting fib(" + start + ")");
		Integer response = (Integer) template.convertSendAndReceive
		    (exchange.getName(), "rpc", start++);
		System.out.println(" [.] Got '" + response + "'");
	}
}

----------------------------------------

TITLE: Configuring Log File Output in RabbitMQ
DESCRIPTION: Example of how to configure log file output, including file name, location, and log level using the rabbitmq.conf configuration file.

LANGUAGE: ini
CODE:
log.file = rabbit.log
log.file = /opt/custom/var/log/rabbit.log
log.file.level = debug

----------------------------------------

TITLE: Certificate Expiration Check
DESCRIPTION: Checks TLS certificate expiration within specified time period

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6

----------------------------------------

TITLE: Defining RabbitMQ User with Provided Credentials
DESCRIPTION: YAML definition for a RabbitMQ User resource with credentials provided from a secret.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: User
metadata:
  name: import-user-sample
spec:
  tags:
  - policymaker
  - monitoring
  rabbitmqClusterReference:
    name: rabbit-example
  importCredentialsSecret:
    name: my-rabbit-user

----------------------------------------

TITLE: Setting Maximum Connections Limit using curl and HTTP API
DESCRIPTION: This curl command demonstrates how to set the maximum connections limit for a user using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Deleting RabbitMQ Virtual Host
DESCRIPTION: Deletes a virtual host and all its associated resources.

LANGUAGE: bash
CODE:
rabbitmqctl delete_vhost a-vhost

----------------------------------------

TITLE: Setting RabbitMQ User Permissions Globally
DESCRIPTION: Sets permissions for a user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions_globally janeway "^janeway-.*" ".*" ".*"

----------------------------------------

TITLE: Setting Maximum Connections Limit via CLI
DESCRIPTION: Shows how to set the maximum number of connections a user can open using rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits user1 '{"max-connections": 10}'

----------------------------------------

TITLE: Setting Maximum Connections Limit via CLI
DESCRIPTION: Shows how to set the maximum number of connections a user can open using rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits user1 '{"max-connections": 10}'

----------------------------------------

TITLE: Changing RabbitMQ Node Type
DESCRIPTION: Changes the type of the cluster node to disc or ram.

LANGUAGE: bash
CODE:
rabbitmqctl change_cluster_node_type disc

----------------------------------------

TITLE: Closing a Channel in .NET
DESCRIPTION: Example of closing a channel (called 'model' in .NET client) when it's no longer needed using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
// the .NET client calls channels "models"
var ch = conn.CreateModel();

// do some work

// close the channel when it is no longer needed

ch.Close();

----------------------------------------

TITLE: Listing Queues in a Specific Virtual Host with rabbitmqadmin
DESCRIPTION: Shows how to list queues in a specific virtual host using rabbitmqadmin.

LANGUAGE: shell
CODE:
rabbitmqadmin --vhost "monitoring" list queues

----------------------------------------

TITLE: Modifying Shell Script Shebang for Solaris Compatibility
DESCRIPTION: Replace the first line of each RabbitMQ shell script to use the POSIX-compliant shell on Solaris. This ensures proper execution of the scripts in the Solaris environment.

LANGUAGE: shell
CODE:
#!/usr/xpg4/bin/sh

----------------------------------------

TITLE: Listing RabbitMQ User Topic Permissions
DESCRIPTION: Lists topic permissions for a specific user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl list_user_topic_permissions janeway

----------------------------------------

TITLE: Enabling LDAP Plugin
DESCRIPTION: Command to enable the RabbitMQ LDAP authentication plugin

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_ldap

----------------------------------------

TITLE: Configuring WAL File Size Limit for Quorum Queues
DESCRIPTION: Example of setting the WAL file size limit for quorum queues in the configuration file.

LANGUAGE: ini
CODE:
# Flush current WAL file to a segment file on disk once it reaches 64 MiB in size
raft.wal_max_size_bytes = 64000000

----------------------------------------

TITLE: Configuring Peer Discovery Backend in RabbitMQ
DESCRIPTION: Example of how to configure the peer discovery backend in RabbitMQ's configuration file.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = classic_config

# The backend can also be specified using its module name. Note that
# module names do not necessarily match plugin names exactly.
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

----------------------------------------

TITLE: Referencing Authentication Failure Close Capability in RabbitMQ
DESCRIPTION: This snippet demonstrates how RabbitMQ refers to the 'authentication_failure_close' capability, which is used by clients to indicate their ability to receive explicit authentication failure notifications.

LANGUAGE: markdown
CODE:
<code>authentication_failure_close</code>

----------------------------------------

TITLE: Growing Queue Replicas in RabbitMQ
DESCRIPTION: Command to add a new replica on a specified node for matching quorum queues. Can target specific virtual hosts and queue patterns.

LANGUAGE: bash
CODE:
rabbitmq-queues grow "rabbit@newhost" "all" --vhost-pattern "a-vhost" --queue-pattern ".*"

----------------------------------------

TITLE: Configuring Consul Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the Consul peer discovery backend with host and service details.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = consul

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_consul

cluster_formation.consul.host = consul.eng.example.local
# 8500 is used by default
cluster_formation.consul.port = 8500
# http is used by default
cluster_formation.consul.scheme = http

----------------------------------------

TITLE: RabbitMQ TLS Configuration File (All Platforms)
DESCRIPTION: Example inter-node TLS configuration file specifying certificate locations, verification settings, and security options.

LANGUAGE: bash
CODE:
[
  {server, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/server_certificate.pem"},
    {keyfile,    "/full/path/to/server_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer},
    {fail_if_no_peer_cert, true}
  ]},
  {client, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/client_certificate.pem"},
    {keyfile,    "/full/path/to/client_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer}
  ]}
].

----------------------------------------

TITLE: Enabling LDAP Plugin
DESCRIPTION: Command to enable the RabbitMQ LDAP authentication plugin

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_ldap

----------------------------------------

TITLE: Authenticating RabbitMQ User
DESCRIPTION: Authenticates a user against the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl authenticate_user janeway verifyit

----------------------------------------

TITLE: Implementing Log Receiver with Direct Exchange in PHP
DESCRIPTION: Complete implementation of a log receiver using direct exchange routing in RabbitMQ with php-amqplib, allowing subscription to specific severities.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('direct_logs', 'direct', false, false, false);

list($queue_name, ,) = $channel->queue_declare("", false, false, true, false);

$severities = array_slice($argv, 1);
if (empty($severities)) {
    file_put_contents('php://stderr', "Usage: $argv[0] [info] [warning] [error]\n");
    exit(1);
}

foreach ($severities as $severity) {
    $channel->queue_bind($queue_name, 'direct_logs', $severity);
}

echo " [*] Waiting for logs. To exit press CTRL+C\n";

$callback = function ($msg) {
    echo ' [x] ', $msg->getRoutingKey(), ':', $msg->getBody(), "\n";
};

$channel->basic_consume($queue_name, '', false, true, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

$channel->close();
$connection->close();

----------------------------------------

TITLE: Sending Messages with Marker in C# for Offset Tracking
DESCRIPTION: C# code to send messages with a marker using RabbitMQ Stream, demonstrating message confirmation handling.

LANGUAGE: csharp
CODE:
var messageCount = 100;
var confirmedCde = new CountdownEvent(messageCount);
var producer = await Producer.Create(new ProducerConfig(streamSystem, stream) {
    ConfirmationHandler = async confirmation => {
        if (confirmation.Status == ConfirmationStatus.Confirmed) {
            confirmedCde.Signal();
        }
        await Task.CompletedTask.ConfigureAwait(false);
    }
});

Console.WriteLine("Publishing {0} messages...", messageCount);
for (int i = 0; i < messageCount; i++) {
    var body = i == messageCount - 1 ? "marker" : "hello";
    await producer.Send(new Message(Encoding.UTF8.GetBytes(body)));
}

confirmedCde.Wait();
Console.WriteLine("Messages confirmed.");
await producer.Close();
await streamSystem.Close();

----------------------------------------

TITLE: Enabling a Specific Feature Flag
DESCRIPTION: Command to enable a specific feature flag using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag <name>

----------------------------------------

TITLE: Configuring TLS-enabled Shovel with URI Parameters
DESCRIPTION: curl command to create a dynamic shovel with TLS configuration using the Management API. The example shows source connecting to localhost without TLS and destination using TLS with client certificates.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": {
    "src-protocol": "amqp091",
    "src-uri": "amqp://localhost",
    "src-queue": "source-queue",
    "dest-protocol": "amqp091",
    "dest-uri": "amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none",
    "dest-queue": "destination-queue"
  }
}
EOF

----------------------------------------

TITLE: Enabling RabbitMQ Feature Flag
DESCRIPTION: Enables a feature flag on the target RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag restart_streams

----------------------------------------

TITLE: Referencing Authentication Failure Close Capability in RabbitMQ
DESCRIPTION: This snippet demonstrates how RabbitMQ refers to the 'authentication_failure_close' capability, which is used by clients to indicate their ability to receive explicit authentication failure notifications.

LANGUAGE: markdown
CODE:
<code>authentication_failure_close</code>

----------------------------------------

TITLE: Positively Acknowledging Deliveries in Java
DESCRIPTION: Example of how to positively acknowledge a single delivery using the RabbitMQ Java client. The message will be discarded after acknowledgement.

LANGUAGE: java
CODE:
boolean autoAck = false;
channel.basicConsume(queueName, autoAck, "a-consumer-tag",
     new DefaultConsumer(channel) {
         @Override
         public void handleDelivery(String consumerTag,
                                    Envelope envelope,
                                    AMQP.BasicProperties properties,
                                    byte[] body)
             throws IOException
         {
             long deliveryTag = envelope.getDeliveryTag();
             // positively acknowledge a single delivery, the message will
             // be discarded
             channel.basicAck(deliveryTag, false);
         }
     });

----------------------------------------

TITLE: Setting Queue TTL in Java
DESCRIPTION: Demonstrates how to set a time-to-live (TTL) of 60 seconds for messages in a RabbitMQ queue using Java client.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-message-ttl", 60000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Importing Definitions After Node Boot in Bash
DESCRIPTION: Demonstrates how to import definitions immediately after node boot using a combination of CLI commands. This method is useful for older versions that don't support built-in definition import.

LANGUAGE: bash
CODE:
rabbitmqctl await_startup --timeout 300

rabbitmqctl import_definitions /path/to/definitions.file.json

# OR, import using rabbitmqadmin
# Requires management plugin to be enabled
rabbitmqadmin import /path/to/definitions.file.json

----------------------------------------

TITLE: Setting RabbitMQ Cluster Name
DESCRIPTION: Sets the name of the RabbitMQ cluster.

LANGUAGE: bash
CODE:
rabbitmqctl set_cluster_name london

----------------------------------------

TITLE: Checking Classic Queue Mirroring Policy in RabbitMQ
DESCRIPTION: Health check command to verify if any policies enable classic queue mirroring in the cluster.

LANGUAGE: bash
CODE:
rabbitmq-queues check_if_cluster_has_classic_queue_mirroring_policy

----------------------------------------

TITLE: Opening a Channel in .NET
DESCRIPTION: Example of opening a new channel (called 'model' in .NET client) after opening a new connection using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();
var conn = cf.newConnection();

// the .NET client calls channels "models"
var ch = conn.CreateModel();

// ... use the channel to declare topology, publish, consume

----------------------------------------

TITLE: Clearing Auth Backend Cache
DESCRIPTION: Command to clear the authentication backend cache across all cluster nodes using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl clear_auth_backend_cache

----------------------------------------

TITLE: Listing RabbitMQ Parameters
DESCRIPTION: Lists all parameters for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_parameters

----------------------------------------

TITLE: Enabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to enable Firehose tracing for a specific virtual host. This allows monitoring of all published and delivered messages.

LANGUAGE: bash
CODE:
rabbitmqctl trace_on -p [virtual host]

----------------------------------------

TITLE: Setting Channel Max in .NET
DESCRIPTION: Example of setting the maximum number of channels per connection using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();
// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured
// to use a higher limit, otherwise the server's limit will be used.
cf.RequestedChannelMax = 32;

----------------------------------------

TITLE: Consuming Messages with Manual Acknowledgment in C#
DESCRIPTION: Sets up a consumer that manually acknowledges messages after processing, ensuring no messages are lost.

LANGUAGE: C#
CODE:
var consumer = new AsyncEventingBasicConsumer(channel);
consumer.ReceivedAsync += async (model, ea) =>
{
    var body = ea.Body.ToArray();
    var message = Encoding.UTF8.GetString(body);
    Console.WriteLine($" [x] Received {message}");

    int dots = message.Split('.').Length - 1;
    await Task.Delay(dots * 1000);

    Console.WriteLine(" [x] Done");

    await channel.BasicAckAsync(deliveryTag: ea.DeliveryTag, multiple: false);
};

await channel.BasicConsumeAsync(queue: "task_queue", autoAck: false, consumer: consumer);

----------------------------------------

TITLE: Configuring ViewDidLoad for RabbitMQ Workers
DESCRIPTION: Example setup showing how to initialize multiple workers and send test messages to the queue system.

LANGUAGE: swift
CODE:
override func viewDidLoad() {
    super.viewDidLoad()
    self.workerNamed("Jack")
    self.workerNamed("Jill")
    self.newTask("Hello World...")
    self.newTask("Just one this time.")
    self.newTask("Five.....")
    self.newTask("None")
    self.newTask("Two..dots")
}

----------------------------------------

TITLE: Checking Quorum Critical Status in RabbitMQ
DESCRIPTION: Health check command to verify if any queues would lose their quorum if the target node is shut down.

LANGUAGE: bash
CODE:
rabbitmq-queues check_if_node_is_quorum_critical

----------------------------------------

TITLE: Using Long Node Names
DESCRIPTION: Demonstrates how to use long node names with CLI tools when fully qualified domain names are used.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -n rabbit@host1.messaging.eng.coolcorporation.banana check_alarms --longnames

----------------------------------------

TITLE: Declaring a Quorum Queue with rabbitmqadmin
DESCRIPTION: Shows how to declare a quorum queue in a specific virtual host using rabbitmqadmin.

LANGUAGE: shell
CODE:
rabbitmqadmin --vhost "events" declare queue --name "target.quorum.queue.name" --type "quorum" --durable true

----------------------------------------

TITLE: Clearing RabbitMQ User Password
DESCRIPTION: Clears the password for the specified user, preventing password-based login.

LANGUAGE: bash
CODE:
rabbitmqctl clear_password janeway

----------------------------------------

TITLE: Viewing RabbitMQ Cluster Operator Logs in Kubernetes
DESCRIPTION: Bash command to retrieve logs from the RabbitMQ Cluster Operator in Kubernetes, useful for troubleshooting operator issues.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system logs -l app.kubernetes.io/name=rabbitmq-cluster-operator

----------------------------------------

TITLE: Using Long Node Names
DESCRIPTION: Demonstrates how to use long node names with CLI tools when fully qualified domain names are used.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -n rabbit@host1.messaging.eng.coolcorporation.banana check_alarms --longnames

----------------------------------------

TITLE: RabbitMQ Stream Consumer Implementation - JavaScript
DESCRIPTION: Implementation of a message consumer that connects to RabbitMQ and processes incoming messages.

LANGUAGE: javascript
CODE:
await client.declareConsumer({ stream: streamName, offset: rabbit.Offset.first() }, (message) => {
        console.log(`Received message ${message.content.toString()}`)
})

----------------------------------------

TITLE: Setting Queue TTL Policy using rabbitmqctl
DESCRIPTION: Command to set a TTL policy of 60 seconds for all queues using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy TTL ".*" '{"message-ttl":60000}' --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy TTL ".*" "{""message-ttl"":60000}" --apply-to queues

----------------------------------------

TITLE: Feature Flag Migration Function in Erlang
DESCRIPTION: Illustrates the structure of a migration function for a feature flag in Erlang.

LANGUAGE: erlang
CODE:
quorum_queue_migration(FeatureName, _FeatureProps, enable) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);
quorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso
    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.

----------------------------------------

TITLE: Using CLI Tools with Remote Nodes
DESCRIPTION: Shows how to use CLI tools to interact with remote RabbitMQ nodes by specifying the node name.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status -n rabbit@remote-host.local

----------------------------------------

TITLE: Complete RabbitMQ Client Example in Erlang
DESCRIPTION: A complete example showing basic usage of the RabbitMQ Erlang client including connection setup, publishing, and consuming messages

LANGUAGE: erlang
CODE:
-module(amqp_example).

-include("amqp_client.hrl").

-compile([export_all]).

test() ->
    %% Start a network connection
    {ok, Connection} = amqp_connection:start(#amqp_params_network{}),
    %% Open a channel on the connection
    {ok, Channel} = amqp_connection:open_channel(Connection),

    %% Declare a queue
    #'queue.declare_ok'{queue = Q}
        = amqp_channel:call(Channel, #'queue.declare'{}),

    %% Publish a message
    Payload = <<"foobar">>,
    Publish = #'basic.publish'{exchange = <<>>, routing_key = Q},
    amqp_channel:cast(Channel, Publish, #amqp_msg{payload = Payload}),

    %% Poll for a message
    Get = #'basic.get'{queue = Q},
    {#'basic.get_ok'{delivery_tag = Tag}, Content}
         = amqp_channel:call(Channel, Get),

    %% Do something with the message payload
    %% (some work here)

    %% Ack the message
    amqp_channel:cast(Channel, #'basic.ack'{delivery_tag = Tag}),

    %% Close the channel
    amqp_channel:close(Channel),
    %% Close the connection
    amqp_connection:close(Connection),

    ok.

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugin
DESCRIPTION: Command to enable the RabbitMQ Stream plugin using rabbitmq-plugins CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Configuring Shovel Plugin for Message Draining
DESCRIPTION: Command to set up a shovel for moving messages from a queue in the blue cluster to the corresponding queue in the green cluster.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel drain-blue \
'{"src-protocol": "amqp091", "src-uri": "amqp://node-in-blue-cluster", \
"src-queue": "queue1", "dest-protocol": "amqp091", \
"dest-uri": "amqp://", "dest-queue": "queue1"}'

----------------------------------------

TITLE: Feature Flag Migration Function in Erlang
DESCRIPTION: Illustrates the structure of a migration function for a feature flag in Erlang.

LANGUAGE: erlang
CODE:
quorum_queue_migration(FeatureName, _FeatureProps, enable) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);
quorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso
    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.

----------------------------------------

TITLE: Basic RabbitMQ Alarms Check
DESCRIPTION: Command to check resource alarms in a RabbitMQ cluster

LANGUAGE: bash
CODE:
rabbitmq-diagnostics alarms

----------------------------------------

TITLE: Listing RabbitMQ Connections
DESCRIPTION: Lists connections with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_connections send_pend port

----------------------------------------

TITLE: Basic RabbitMQ Alarms Check
DESCRIPTION: Command to check resource alarms in a RabbitMQ cluster

LANGUAGE: bash
CODE:
rabbitmq-diagnostics alarms

----------------------------------------

TITLE: Listing RabbitMQ Feature Flags
DESCRIPTION: Lists feature flags with specified information columns.

LANGUAGE: bash
CODE:
rabbitmqctl list_feature_flags name state

----------------------------------------

TITLE: Running RabbitMQ Producer in Terminal
DESCRIPTION: Command to execute the Python producer script, which will send a 'Hello World!' message to the RabbitMQ queue.

LANGUAGE: bash
CODE:
python send.py

----------------------------------------

TITLE: Inspecting Node Memory Breakdown
DESCRIPTION: This command displays a breakdown of memory usage in percent for a specific RabbitMQ node.

LANGUAGE: shell
CODE:
rabbitmqadmin show memory_breakdown_in_percent --node 'rabbit@hostname'

----------------------------------------

TITLE: Setting RabbitMQ Global Parameter
DESCRIPTION: Sets a global runtime parameter that is not tied to a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_global_parameter mqtt_default_vhosts '{"O=client,CN=guest":"/"}'

----------------------------------------

TITLE: Installing Essential Dependencies with Apt
DESCRIPTION: Basic commands to update package lists and install required system dependencies for RabbitMQ installation.

LANGUAGE: bash
CODE:
sudo apt-get install curl gnupg apt-transport-https -y

----------------------------------------

TITLE: Configuring Atom Limit in RabbitMQ
DESCRIPTION: Increases the limit on the number of atoms to 9 million using either a runtime argument or an environment variable.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+t 9000000"

LANGUAGE: bash
CODE:
RABBITMQ_MAX_NUMBER_OF_ATOMS=9000000

----------------------------------------

TITLE: RPC Callback Queue Implementation - Python
DESCRIPTION: Shows how to set up a callback queue for receiving RPC responses and publishing requests with proper properties

LANGUAGE: python
CODE:
result = channel.queue_declare(queue='', exclusive=True)
callback_queue = result.method.queue

channel.basic_publish(exchange='',
                      routing_key='rpc_queue',
                      properties=pika.BasicProperties(
                            reply_to = callback_queue,
                            ),
                      body=request)

----------------------------------------

TITLE: Deleting RabbitMQ Queue
DESCRIPTION: Deletes a queue with optional conditions such as if it's empty or unused.

LANGUAGE: bash
CODE:
rabbitmqctl delete_queue my_queue --if-empty --if-unused

----------------------------------------

TITLE: Enabling Federation Plugin
DESCRIPTION: Commands to enable the Federation plugin and its management UI extension using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_federation
rabbitmq-plugins enable rabbitmq_federation_management

----------------------------------------

TITLE: Publishing Messages to RabbitMQ Stream in Java
DESCRIPTION: This code snippet demonstrates how to publish messages to a RabbitMQ stream without deduplication. It creates a producer, builds messages from records, and sends them to the stream.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
  .stream("deduplication-stream")
  .build();
int messageCount = 10;
records(0, messageCount).forEach(record -> {
  Message message = producer.messageBuilder()
    .addData(record.content().getBytes(StandardCharsets.UTF_8))
    .build();
  producer.send(message, confirmationStatus -> latch.countDown());
});

----------------------------------------

TITLE: Advanced TLS Configuration for Web MQTT Plugin
DESCRIPTION: Extended configuration example for TLS, including cipher suites and other TLS options.

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem
web_mqtt.ssl.password   = changeme

web_mqtt.ssl.honor_cipher_order   = true
web_mqtt.ssl.honor_ecc_order      = true
web_mqtt.ssl.client_renegotiation = false
web_mqtt.ssl.secure_renegotiate   = true

web_mqtt.ssl.versions.1 = tlsv1.2
web_mqtt.ssl.versions.2 = tlsv1.1
web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384

----------------------------------------

TITLE: Declaring Dynamic Shovel using rabbitmqctl (Windows)
DESCRIPTION: Windows CLI command to declare a dynamic shovel between local and remote RabbitMQ nodes

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_parameter shovel my-shovel ^
  "{""src-protocol"": ""amqp091"", ""src-uri"":""amqp://localhost"", ""src-queue"": ""source-queue"", ^
   ""dest-protocol"": ""amqp091"", ""dest-uri"": ""amqp://remote.rabbitmq.local"", ^
   ""dest-queue"": ""target-queue"", ""dest-queue-args"": {""x-queue-type"": ""quorum""}}"

----------------------------------------

TITLE: Creating Docker Network for RabbitMQ Streams
DESCRIPTION: This shell command creates a Docker network named 'rabbitmq-streams' for communication between the RabbitMQ server and performance tool containers.

LANGUAGE: shell
CODE:
docker network create rabbitmq-streams

----------------------------------------

TITLE: Listing RabbitMQ Permissions
DESCRIPTION: Lists permissions for all users in a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_permissions -p my-vhost

----------------------------------------

TITLE: Clearing RabbitMQ Global Parameter
DESCRIPTION: Clears a global runtime parameter that is not tied to a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_global_parameter mqtt_default_vhosts

----------------------------------------

TITLE: Setting Raft Segment File Entry Count
DESCRIPTION: Configuration examples for tuning the number of entries allowed in a Raft segment file for both small and large message workloads.

LANGUAGE: bash
CODE:
# Positive values up to 65535 are allowed, the default is 4096.
# This value is reasonable for workloads with small (say, smaller than 8 kiB) messages
raft.segment_max_entries = 32768

# The default is 4096.
# This value is only reasonable for workloads with messages of 1 MiB or even larger
raft.segment_max_entries = 128

----------------------------------------

TITLE: Publishing Messages to RabbitMQ Stream in Python
DESCRIPTION: This code snippet demonstrates how to publish messages to a RabbitMQ stream using Python. It creates a Producer instance, sends 100 messages with a marker message at the end, and handles message confirmations.

LANGUAGE: python
CODE:
STREAM = "stream-offset-tracking-python"
MESSAGES = 100
# 2GB
STREAM_RETENTION = 2000000000
confirmed_messages = 0
all_confirmed_messages_cond = asyncio.Condition()

async def _on_publish_confirm_client(confirmation: ConfirmationStatus) -> None:
    global confirmed_messages
    if confirmation.is_confirmed:
        confirmed_messages = confirmed_messages + 1
        if confirmed_messages == 100:
            async with all_confirmed_messages_cond:
                all_confirmed_messages_cond.notify()

async def publish():
    async with Producer("localhost", username="guest", password="guest") as producer:
        # create a stream if it doesn't already exist
        await producer.create_stream(
            STREAM, exists_ok=True, arguments={"max-length-bytes": STREAM_RETENTION}
        )

        print("Publishing {} messages".format(MESSAGES))
        # Send 99 hello message
        for i in range(MESSAGES - 1):
            amqp_message = AMQPMessage(
                body=bytes("hello: {}".format(i), "utf-8"),
            )

            await producer.send(
                stream=STREAM,
                message=amqp_message,
                on_publish_confirm=_on_publish_confirm_client,
            )
        # Send a final marker message
        amqp_message = AMQPMessage(
            body=bytes("marker: {}".format(i + 1), "utf-8"),
        )

        await producer.send(
            stream=STREAM,
            message=amqp_message,
            on_publish_confirm=_on_publish_confirm_client,
        )

        async with all_confirmed_messages_cond:
            await all_confirmed_messages_cond.wait()

        print("Messages confirmed.")


asyncio.run(publish())

----------------------------------------

TITLE: Erlang Distribution Configuration
DESCRIPTION: Advanced config example for Erlang distribution settings

LANGUAGE: erlang
CODE:
[
  {kernel, [
    {inet_default_connect_options, [{nodelay, true}]},
    {inet_default_listen_options,  [{nodelay, true}]}
  ]},
  {rabbit, [
    {tcp_listen_options, [
                          {backlog,       4096},
                          {nodelay,       true},
                          {linger,        {true,0}},
                          {exit_on_close, false}
                         ]}
  ]}
].

----------------------------------------

TITLE: Configuring SHA-512 Password Hashing in RabbitMQ
DESCRIPTION: This snippet demonstrates how to configure RabbitMQ to use SHA-512 for password hashing in the configuration file.

LANGUAGE: ini
CODE:
password_hashing_module = rabbit_password_hashing_sha512

----------------------------------------

TITLE: Creating a Temporary Queue in PHP
DESCRIPTION: This snippet shows how to create a non-durable queue with a server-generated name using php-amqplib.

LANGUAGE: PHP
CODE:
list($queue_name, ,) = $channel->queue_declare("");

----------------------------------------

TITLE: Disk Free Limit Configuration - Using Memory Units
DESCRIPTION: Configuration example showing how to set disk free space limit using memory units (GB).

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1GB

----------------------------------------

TITLE: Configuring Console Logging in RabbitMQ
DESCRIPTION: Configuration for logging to console/standard output streams in RabbitMQ

LANGUAGE: ini
CODE:
log.console = true
log.console.level = info

log.file = false

----------------------------------------

TITLE: Displaying RabbitMQ Cluster Status
DESCRIPTION: Displays all the nodes in the cluster grouped by node type.

LANGUAGE: bash
CODE:
rabbitmqctl cluster_status

----------------------------------------

TITLE: Configuring Peer Discovery Retries in RabbitMQ
DESCRIPTION: Example of configuring retry behavior for peer discovery operations.

LANGUAGE: ini
CODE:
# These are the default values

# Retry peer discovery operations up to ten times
cluster_formation.discovery_retry_limit = 10

# 500 milliseconds
cluster_formation.discovery_retry_interval = 500

----------------------------------------

TITLE: Advanced TLS Configuration for Web MQTT Plugin
DESCRIPTION: Extended configuration example for TLS, including cipher suites and other TLS options.

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem
web_mqtt.ssl.password   = changeme

web_mqtt.ssl.honor_cipher_order   = true
web_mqtt.ssl.honor_ecc_order      = true
web_mqtt.ssl.client_renegotiation = false
web_mqtt.ssl.secure_renegotiate   = true

web_mqtt.ssl.versions.1 = tlsv1.2
web_mqtt.ssl.versions.2 = tlsv1.1
web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384

----------------------------------------

TITLE: OpenSSL Server Test Configuration
DESCRIPTION: Command to start OpenSSL test server with TLS certificates for connection testing

LANGUAGE: bash
CODE:
openssl s_server -accept 8443 \
  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem

----------------------------------------

TITLE: Creating a Virtual Host Using RabbitMQ HTTP API
DESCRIPTION: This example shows how to create a virtual host named 'vh1' using the RabbitMQ HTTP API with curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1

----------------------------------------

TITLE: Listing RabbitMQ Ciphers
DESCRIPTION: Lists cipher suites supported by encoding commands.

LANGUAGE: bash
CODE:
rabbitmqctl list_ciphers

----------------------------------------

TITLE: Setting vhost-scoped parameters in RabbitMQ
DESCRIPTION: Commands for setting, clearing, and listing vhost-scoped runtime parameters in RabbitMQ using rabbitmqctl.

LANGUAGE: bash
CODE:
# sets a runtime parameter in a virtual host
rabbitmqctl set_parameter [-p vhost] <component_name> <name> <value>

# clears (unsets) a runtime parameter in a virtual host
rabbitmqctl clear_parameter [-p vhost] <component_name> <name>

# lists runtime parameters in a virtual host
rabbitmqctl list_parameters [-p vhost]

LANGUAGE: powershell
CODE:
# sets a runtime parameter in a virtual host
rabbitmqctl.bat set_parameter [-p vhost] <component_name> <name> <value>

# clears (unsets) a runtime parameter in a virtual host
rabbitmqctl.bat clear_parameter [-p vhost] <component_name> <name>

# lists runtime parameters in a virtual host
rabbitmqctl.bat list_parameters [-p vhost]

LANGUAGE: ini
CODE:
PUT /api/parameters/{component_name}/{vhost}/{name}
DELETE /api/parameters/{component_name}/{vhost}/{name}
GET /api/parameters

----------------------------------------

TITLE: Enabling RabbitMQ Plugins
DESCRIPTION: Command to enable multiple plugins and their dependencies simultaneously

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel rabbitmq_management

----------------------------------------

TITLE: Implementing Fibonacci Function in Ruby
DESCRIPTION: A simple recursive implementation of the Fibonacci function in Ruby. This function is used as the task for the RPC server to compute.

LANGUAGE: ruby
CODE:
def fibonacci(value)
  return value if value.zero? || value == 1

  fibonacci(value - 1) + fibonacci(value - 2)
end

----------------------------------------

TITLE: Stunnel Configuration for TLS Testing
DESCRIPTION: Configuration file example for using Stunnel as a TLS proxy to test client connections.

LANGUAGE: ini
CODE:
foreground = yes

[rabbit-amqp]
connect = localhost:5672
accept = 5679
cert = client/key-cert.pem
debug = 7

----------------------------------------

TITLE: Configuring Quorum Queues in RabbitMQ
DESCRIPTION: This snippet shows the configuration properties used for declaring quorum queues in the study. It sets the initial group size and forces immediate removal of message bodies from memory.

LANGUAGE: plaintext
CODE:
x-quorum-initial-group-size=3
x-max-in-memory-length=0

----------------------------------------

TITLE: Stunnel Configuration for TLS Testing
DESCRIPTION: Configuration file example for using Stunnel as a TLS proxy to test client connections.

LANGUAGE: ini
CODE:
foreground = yes

[rabbit-amqp]
connect = localhost:5672
accept = 5679
cert = client/key-cert.pem
debug = 7

----------------------------------------

TITLE: Decoding RabbitMQ Configuration Value
DESCRIPTION: Decrypts an encoded configuration value using a specified passphrase and optional cipher settings.

LANGUAGE: bash
CODE:
rabbitmqctl decode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '{encrypted,<<"...">>}' mypassphrase

----------------------------------------

TITLE: Publishing Messages with Deduplication in Java
DESCRIPTION: This code snippet shows how to publish messages to a RabbitMQ stream with deduplication enabled. It sets a producer name and uses a publishing ID for each message.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
  .stream("deduplication-stream")
  .name("app-1") // provide a name for the producer
  .confirmTimeout(Duration.ZERO) // to never stop retrying
  .build();
int messageCount = 10;
records(0, messageCount).forEach(record -> {
  Message message = producer.messageBuilder()
    .publishingId(record.id()) // set the publishing ID
    .addData(record.content().getBytes(StandardCharsets.UTF_8))
    .build();
  producer.send(message, confirmationStatus -> latch.countDown());
});

----------------------------------------

TITLE: Setting RabbitMQ Log Level
DESCRIPTION: Sets the log level for the running RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl set_log_level debug

----------------------------------------

TITLE: Windows Service Management Commands for RabbitMQ
DESCRIPTION: Core commands available in rabbitmq-service.bat for managing the RabbitMQ Windows service. Includes commands for installation, removal, starting, stopping, and controlling service startup behavior.

LANGUAGE: batch
CODE:
rabbitmq-service.bat help    # Display usage information
rabbitmq-service.bat install  # Install the service
rabbitmq-service.bat remove   # Remove the service
rabbitmq-service.bat start    # Start the service
rabbitmq-service.bat stop     # Stop the service
rabbitmq-service.bat disable  # Disable service startup
rabbitmq-service.bat enable   # Enable automatic startup

----------------------------------------

TITLE: Deleting a Virtual Host Using RabbitMQ HTTP API
DESCRIPTION: This example shows how to delete a virtual host named 'vh1' using the RabbitMQ HTTP API with curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X DELETE http://rabbitmq.local:15672/api/vhosts/vh1

----------------------------------------

TITLE: Rejecting Multiple Messages in Bulk with Java
DESCRIPTION: This Java example shows how to reject two messages with a single call to the broker using the basicNack method. The second argument (multiple flag) is set to true for bulk rejection.

LANGUAGE: java
CODE:
GetResponse gr1 = channel.basicGet("some.queue", false);
GetResponse gr2 = channel.basicGet("some.queue", false);
channel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);

----------------------------------------

TITLE: Listing RabbitMQ Connections
DESCRIPTION: Lists TCP/IP connection statistics with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_connections send_pend port

----------------------------------------

TITLE: Importing RabbitMQ Stream Client Dependencies in Rust
DESCRIPTION: This code snippet shows the necessary use declarations for the RabbitMQ Stream client in Rust. It imports error handling, message types, and response codes.

LANGUAGE: rust
CODE:
use rabbitmq_stream_client::error::StreamCreateError;
use rabbitmq_stream_client::types::{ByteCapacity, Message, ResponseCode};

----------------------------------------

TITLE: Implementing Worker Consumer in Ruby
DESCRIPTION: A Ruby worker script that consumes messages from the queue and simulates work by sleeping based on the number of dots in the message.

LANGUAGE: ruby
CODE:
queue.subscribe(block: true) do |delivery_info, _properties, body|
  puts " [x] Received #{body}"
  # imitate some work
  sleep body.count('.').to_i
  puts ' [x] Done'
end

----------------------------------------

TITLE: Advanced Consumer with Offset Tracking
DESCRIPTION: Implements a consumer with server-side offset tracking, storing offsets periodically and resuming from last stored position.

LANGUAGE: javascript
CODE:
const consumerRef = "offset-tracking-tutorial";
let firstOffset = undefined;
let offsetSpecification = rabbit.Offset.first();
try {
  const offset = await client.queryOffset({ reference: consumerRef, stream: streamName });
  offsetSpecification = rabbit.Offset.offset(offset + 1n);
} catch (e) {}

let lastOffset = offsetSpecification.value;
let messageCount = 0;
const consumer = await client.declareConsumer(
  { stream: streamName, offset: offsetSpecification, consumerRef },
  async (message) => {
    messageCount++;
    if (!firstOffset && messageCount === 1) {
      firstOffset = message.offset;
      console.log("First message received");
    }
    if (messageCount % 10 === 0) {
      await consumer.storeOffset(message.offset);
    }
    if (message.content.toString() === "marker") {
      console.log("Marker found");
      lastOffset = message.offset;
      await consumer.storeOffset(message.offset);
      await consumer.close(true);
    }
  }
);

----------------------------------------

TITLE: Importing RabbitMQ Signing Key via Key Servers
DESCRIPTION: Commands for importing the RabbitMQ signing key from various key servers using GPG.

LANGUAGE: bash
CODE:
gpg --keyserver "hkps://keys.openpgp.org" --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"

----------------------------------------

TITLE: Declaring Queue with TTL in C#
DESCRIPTION: Creates a queue with a message TTL of 60 seconds using the .NET client library.

LANGUAGE: csharp
CODE:
var args = new Dictionary<string, object>();
args.Add("x-message-ttl", 60000);
model.QueueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Rejecting a Single Message with Requeue in Java using RabbitMQ
DESCRIPTION: This snippet demonstrates how to reject a single message consumed via polling (basic.get) in RabbitMQ using Java, with the instruction to requeue the message.

LANGUAGE: java
CODE:
GetResponse gr = channel.basicGet("some.queue", false);
channel.basicNack(gr.getEnvelope().getDeliveryTag(), false, true);

----------------------------------------

TITLE: Creating and Triggering Alerts in a RabbitMQ Cluster
DESCRIPTION: Creates a RabbitMQ cluster using kubectl-rabbitmq plugin and demonstrates how to trigger the 'NoMajorityOfNodesReady' alert by stopping the rabbit application on two out of three nodes.

LANGUAGE: bash
CODE:
# Add kubectl-rabbitmq plugin to PATH so that it can be used directly
export PATH="$PWD/cluster-operator/bin:$PATH"

# Use kubectl-rabbitmq plugin to create RabbitmqClusters via kubectl
kubectl rabbitmq create myrabbit --replicas 3

# To trigger the NoMajorityOfNodesReady alert, we stop the rabbit application on two out of three nodes:
kubectl exec myrabbit-server-0 --container rabbitmq -- rabbitmqctl stop_app
kubectl exec myrabbit-server-1 --container rabbitmq -- rabbitmqctl stop_app

----------------------------------------

TITLE: Rejecting Multiple Messages in Bulk with Java
DESCRIPTION: This Java example shows how to reject two messages with a single call to the broker using the basicNack method. The second argument (multiple flag) is set to true for bulk rejection.

LANGUAGE: java
CODE:
GetResponse gr1 = channel.basicGet("some.queue", false);
GetResponse gr2 = channel.basicGet("some.queue", false);
channel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);

----------------------------------------

TITLE: Shutting Down RabbitMQ Node
DESCRIPTION: Shuts down the RabbitMQ node and its runtime.

LANGUAGE: bash
CODE:
rabbitmqctl shutdown

----------------------------------------

TITLE: Setting Queue Length Policy Using rabbitmqctl
DESCRIPTION: Sets a policy to limit queue size to 1MiB using rabbitmqctl command line tool. When the limit is reached, oldest messages are discarded.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy my-pol "^one-meg$" \
  '{"max-length-bytes":1048576}' \
  --apply-to queues

----------------------------------------

TITLE: Connecting to RabbitMQ Broker in Swift
DESCRIPTION: Establish a connection to a local RabbitMQ broker using Swift. This code creates a connection with a logging delegate to display errors in the Xcode console.

LANGUAGE: swift
CODE:
func send() {
    print("Attempting to connect to local RabbitMQ broker")
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
}

----------------------------------------

TITLE: Declaring and Publishing to a RabbitMQ Stream
DESCRIPTION: Creates a stream, sets retention policy, and publishes a message to the stream.

LANGUAGE: python
CODE:
STREAM_NAME = "hello-python-stream"
# 5GB
STREAM_RETENTION = 5000000000

await producer.create_stream(
            STREAM_NAME, exists_ok=True, arguments={"MaxLengthBytes": STREAM_RETENTION})

await producer.send(stream=STREAM_NAME, message=b"Hello, World!")

----------------------------------------

TITLE: Shrinking Quorum Queue Clusters in RabbitMQ
DESCRIPTION: Command to remove queue members from a specified node in the cluster.

LANGUAGE: bash
CODE:
rabbitmq-queues shrink "rabbit@decomissioned-node"

----------------------------------------

TITLE: Pinging a RabbitMQ Node
DESCRIPTION: Checks that the node OS process is up, registered with EPMD, and CLI tools can authenticate with it.

LANGUAGE: bash
CODE:
rabbitmqctl ping -n rabbit@hostname

----------------------------------------

TITLE: Authenticating a RabbitMQ User
DESCRIPTION: Attempts to authenticate a user with the given username and password.

LANGUAGE: bash
CODE:
rabbitmqctl authenticate_user janeway verifyit

----------------------------------------

TITLE: Running RabbitMQ PerfTest for Mirrored Queues
DESCRIPTION: Command to run RabbitMQ PerfTest for benchmarking mirrored queues with specific configuration parameters. It sets up multiple connections, persistent messages, and configures various test parameters like rate, message size, and number of queues.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-c 1000 \
-ct -1 \
--rate 50 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
--producers 200 \
--consumers 200 \
--consumer-latency 10000 \
--producer-random-start-delay 30

----------------------------------------

TITLE: Implementing a Log Message Producer in Swift
DESCRIPTION: This snippet shows a complete implementation of a log message producer using RabbitMQ and Swift, including connection setup, exchange declaration, and message publishing.

LANGUAGE: swift
CODE:
let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
conn.start()
let ch = conn.createChannel()
let x = ch.fanout("logs")
let msg = "Hello World!"
x.publish(msg.data(using: .utf8))
print("Sent \(msg)")
conn.close()

----------------------------------------

TITLE: Creating RabbitMQ Stream Consumer in C#
DESCRIPTION: Sets up a consumer to receive messages from the 'hello-stream' stream. It configures the consumer to start from the first message and defines a message handler.

LANGUAGE: csharp
CODE:
var consumer = await Consumer.Create(new ConsumerConfig(streamSystem, "hello-stream")
{
    OffsetSpec = new OffsetTypeFirst(),
    MessageHandler = async (stream, _, _, message) =>
    {
        Console.WriteLine($"Stream: {stream} - " +
                          $"Received message: {Encoding.UTF8.GetString(message.Data.Contents)}");
        await Task.CompletedTask;
    }
});

----------------------------------------

TITLE: Complete Log Receiver Implementation
DESCRIPTION: Full implementation of the log receiver with multiple severity bindings and message handling.

LANGUAGE: objectivec
CODE:
- (void)receiveLogsDirect {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];
    RMQExchange *x    = [ch direct:@"direct_logs"];
    RMQQueue *q       = [ch queue:@"" options:RMQQueueDeclareExclusive];

    NSArray *severities = @[@"error", @"warning", @"info"];
    for (NSString *severity in severities) {
        [q bind:x routingKey:severity];
    }

    NSLog(@"Waiting for logs.");

    [q subscribe:^(RMQMessage * _Nonnull message) {
        NSLog(@"%@:%@", message.routingKey, [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);
    }];
}

----------------------------------------

TITLE: Configuring IPv4-only Listeners in RabbitMQ
DESCRIPTION: This example shows how to configure RabbitMQ to listen on specific IPv4 interfaces for both plain AMQP and TLS connections.

LANGUAGE: ini
CODE:
listeners.tcp.1 = 192.168.1.99:5672 # Plain AMQP
listeners.ssl.1 = 192.168.1.99:5671 # TLS (AMQPS)

----------------------------------------

TITLE: Declaring a RabbitMQ Stream with Additional Arguments in Java
DESCRIPTION: This example shows how to declare a stream with additional arguments such as maximum size, segment size, and filter size using the AMQP 0.9.1 Java client.

LANGUAGE: java
CODE:
Map<String, Object> arguments = new HashMap<>();
arguments.put("x-queue-type", "stream");
// maximum stream size: 20 GB
arguments.put("x-max-length-bytes", 20_000_000_000);
// size of segment files: 100 MB
arguments.put("x-stream-max-segment-size-bytes", 100_000_000);
// size of stream bloom filter: 32
arguments.put("x-stream-filter-size-bytes", 32);

channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  arguments
);

----------------------------------------

TITLE: Queue Declaration Error Handling in Ruby AMQP
DESCRIPTION: Demonstrates improved error handling when attempting to redeclare entities with different options.

LANGUAGE: ruby
CODE:
channel = MQ.new
channel.queue(:tasks, auto_delete: true)
channel.queue(:tasks, auto_delete: false)

# Exception: There is already an instance called tasks with options

{:queue => :tasks, :nowait => true, :auto_delete => true},
you can't define the same instance with different options ({:queue => :tasks,
:nowait => true, :auto_delete => false})! (MQ::IncompatibleOptionsError)

----------------------------------------

TITLE: RPC Server and Client Compilation Commands
DESCRIPTION: Terminal commands for compiling the RPC server and client implementations.

LANGUAGE: bash
CODE:
javac -cp $CP RPCClient.java RPCServer.java

----------------------------------------

TITLE: Checking Quorum Critical Status in RabbitMQ
DESCRIPTION: Health check command to verify if there are queues that would lose their quorum if the target node is shut down.

LANGUAGE: bash
CODE:
rabbitmq-queues check_if_node_is_quorum_critical

----------------------------------------

TITLE: Running Topic-based Message Emission in Bash
DESCRIPTION: This bash command shows how to run the EmitLogTopic program to send a log message with a specific routing key.

LANGUAGE: bash
CODE:
cd EmitLogTopic
dotnet run "kern.critical" "A critical kernel error"

----------------------------------------

TITLE: Configuring Absolute Disk Free Space Limit in RabbitMQ
DESCRIPTION: This snippet shows how to set the disk free space limit to an absolute value of 1GB using the disk_free_limit.absolute configuration setting.

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1000000000

----------------------------------------

TITLE: Creating a Producer for RabbitMQ Stream
DESCRIPTION: This code snippet creates a Producer instance, which is used to publish messages to the specified stream. It uses the Environment to build the producer.

LANGUAGE: java
CODE:
Producer producer = environment
    .producerBuilder()
    .stream("first-application-stream") // stream to publish to
    .build();

----------------------------------------

TITLE: Setting RabbitMQ Parameter
DESCRIPTION: Sets a parameter for a specific component in a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream node01 '{"uri":"amqp://user:password@server/%2F","ack-mode":"on-publish"}'

----------------------------------------

TITLE: Disabling Scheduler Busy Waiting in RabbitMQ
DESCRIPTION: Turns off speculative busy waiting for Erlang schedulers, which can reduce CPU usage on systems with limited resources.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+sbwt none +sbwtdcpu none +sbwtdio none"

----------------------------------------

TITLE: Managing Global Parameters in RabbitMQ
DESCRIPTION: Commands for setting, clearing and listing global runtime parameters that apply across all virtual hosts using rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
# sets a global (virtual-host-independent) runtime parameter
rabbitmqctl set_global_parameter <name> <value>

# clears (unsets) a global (virtual-host-independent) runtime parameter
rabbitmqctl clear_global_parameter <name>

# lists global (virtual-host-independent) runtime parameters
rabbitmqctl list_global_parameters

LANGUAGE: PowerShell
CODE:
# sets a global (virtual-host-independent) runtime parameter
rabbitmqctl.bat set_global_parameter <name> <value>

# clears (unsets) a global (virtual-host-independent) runtime parameter
rabbitmqctl.bat clear_global_parameter <name>

# lists global (virtual-host-independent) runtime parameters
rabbitmqctl.bat list_global_parameters

----------------------------------------

TITLE: Setting RabbitMQ User Permissions Globally
DESCRIPTION: Sets permissions for a user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl set_permissions_globally janeway "^janeway-.*" ".*" ".*"

----------------------------------------

TITLE: Setting Up Federation Upstream for Migration
DESCRIPTION: Command to create federation upstream pointing from new virtual host to old virtual host

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream quorum-migration-upstream \
    --vhost NEW_VHOST \
    '{"uri":"amqp:///OLD_VHOST", "trust-user-id":true}'

----------------------------------------

TITLE: Listing Feature Flags in RabbitMQ
DESCRIPTION: Use the rabbitmqctl command to list available feature flags and their states.

LANGUAGE: bash
CODE:
rabbitmqctl list_feature_flags

LANGUAGE: bash
CODE:
rabbitmqctl -q --formatter pretty_table list_feature_flags \
  name state provided_by desc doc_url

----------------------------------------

TITLE: Setting RabbitMQ Log Level
DESCRIPTION: Sets the log level for the running RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl set_log_level debug

----------------------------------------

TITLE: Channel Max Configuration in RabbitMQ
DESCRIPTION: Configuration setting to limit the maximum number of channels per connection in RabbitMQ.

LANGUAGE: ini
CODE:
channel_max = 16

----------------------------------------

TITLE: Creating a Binding with Routing Key in PHP
DESCRIPTION: Demonstrates how to create a binding between a queue and an exchange with a specific routing key using php-amqplib.

LANGUAGE: PHP
CODE:
$binding_key = 'black';
$channel->queue_bind($queue_name, $exchange_name, $binding_key);

----------------------------------------

TITLE: Stopping a Node
DESCRIPTION: Use the 'shutdown' command to stop a RabbitMQ node, optionally specifying a target node.

LANGUAGE: bash
CODE:
rabbitmqctl shutdown
rabbitmqctl shutdown --node rabbit@target-hostname.local

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat shutdown
rabbitmqctl.bat shutdown --node rabbit@target-hostname.local

----------------------------------------

TITLE: Waiting for Multiple RabbitMQ Nodes
DESCRIPTION: Waits for a specified number of nodes to join the cluster.

LANGUAGE: bash
CODE:
rabbitmqctl await_online_nodes 2

----------------------------------------

TITLE: Listing Unresponsive RabbitMQ Queues
DESCRIPTION: Lists queues that did not respond within a given timeout.

LANGUAGE: bash
CODE:
rabbitmqctl list_unresponsive_queues --local name

----------------------------------------

TITLE: Checking RabbitMQ Cluster Status
DESCRIPTION: Command to verify cluster status and ensure nodes are properly connected after upgrade.

LANGUAGE: bash
CODE:
rabbitmqctl cluster_status

----------------------------------------

TITLE: Starting RPC Consumers with PerfTest across Cluster Nodes
DESCRIPTION: Commands to start 5 consumers across a 3-node RabbitMQ cluster using PerfTest. Sets up exclusive queues bound to an x-local-random exchange type for RPC workload testing.

LANGUAGE: shell
CODE:
perf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''
perf-test -H amqp://localhost:5672 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''
perf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''
perf-test -H amqp://localhost:5673 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''
perf-test -H amqp://localhost:5674 --producers 0 --exchange rpc -t x-local-random --exclusive --routing-key ''

----------------------------------------

TITLE: Creating RabbitMQ Stream Environment in Rust
DESCRIPTION: This snippet demonstrates how to create a connection to the RabbitMQ server using the Environment builder. It sets up the basic configuration for stream operations.

LANGUAGE: rust
CODE:
use rabbitmq_stream_client::Environment;
let environment = Environment::builder().build().await?;

----------------------------------------

TITLE: Erlang Client TLS Configuration
DESCRIPTION: Example showing TLS configuration for the RabbitMQ Erlang client with certificate settings.

LANGUAGE: erlang
CODE:
SslOpts = [{cacertfile, "/path/to/ca_certificate.pem"},
           {certfile, "/path/to/client/certificate.pem"},
           {keyfile, "/path/to/client/private_key.pem"},
           {verify, verify_peer},
           {server_name_indication, "my.rmq-server.net"}]

----------------------------------------

TITLE: Publishing Messages with Routing Key in Ruby
DESCRIPTION: Illustrates how to publish a message to a direct exchange with a severity-based routing key.

LANGUAGE: ruby
CODE:
exchange = channel.direct('logs')
exchange.publish(message, routing_key: severity)

----------------------------------------

TITLE: Publishing Messages to a Direct Exchange in RabbitMQ with JavaScript
DESCRIPTION: This code shows how to publish a message to a direct exchange in RabbitMQ, using a severity as the routing key. It assumes 'severity' can be 'info', 'warning', or 'error'.

LANGUAGE: javascript
CODE:
var exchange = 'direct_logs';

channel.assertExchange(exchange, 'direct', {
  durable: false
});
channel.publish(exchange, severity, Buffer.from(msg));

----------------------------------------

TITLE: Setting Per-Consumer Prefetch Limit in Java
DESCRIPTION: This snippet demonstrates how to set a prefetch limit of 10 unacknowledged messages for a single consumer using the basicQos method.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(10); // Per consumer limit
channel.basicConsume("my-queue", false, consumer);

----------------------------------------

TITLE: Installing LDAP Dependencies on Debian/Ubuntu
DESCRIPTION: Command to install required LDAP client library on Debian-based systems

LANGUAGE: bash
CODE:
sudo apt-get install -y erlang-eldap

----------------------------------------

TITLE: Setting Up RabbitMQ Consumer in Elixir
DESCRIPTION: Configures the RabbitMQ channel to consume messages from the 'hello' queue without acknowledgement.

LANGUAGE: elixir
CODE:
AMQP.Basic.consume(channel,
                   "hello",
                   nil, # consumer process, defaults to self()
                   no_ack: true)

----------------------------------------

TITLE: Configuring Partition Handling Strategy in RabbitMQ
DESCRIPTION: Example configuration snippet for setting up the pause_if_all_down partition handling strategy in RabbitMQ.

LANGUAGE: plaintext
CODE:
cluster_partition_handling = pause_if_all_down

## Recovery strategy. Can be either 'autoheal' or 'ignore'
cluster_partition_handling.pause_if_all_down.recover = ignore

## Node names to check
cluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1
cluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2

----------------------------------------

TITLE: Installing LDAP Dependencies on Debian/Ubuntu
DESCRIPTION: Command to install required LDAP client library on Debian-based systems

LANGUAGE: bash
CODE:
sudo apt-get install -y erlang-eldap

----------------------------------------

TITLE: Configuring RabbitMQ Federation in rabbitmq.config
DESCRIPTION: This snippet demonstrates how to configure the federation plugin in the rabbitmq.config file. It sets up a federated 'stocks' exchange with connections to 'paris' and 'newyork' brokers, including SSL and authentication settings.

LANGUAGE: erlang
CODE:
[
  {rabbitmq_federation,
   [{exchanges, [[{exchange,     "stocks"},
                  {virtual_host, "/"},
                  {type,         "topic"},
                  {durable,      true},
                  {auto_delete,  false},
                  {internal,     false},
                  {upstream_set, "common-upstreams"}]]},
    {upstream_sets, [{"common-upstreams", [[{connection, "newyork"}],
                                           [{connection, "paris"}]]}
                    ]},
    {connections, [{"newyork", [{host, "newyork.mycompany.com"}]},
                   {"paris",   [{host, "paris.mycompany.com"}, {protocol, "amqps"},
                                {username, "my-user"}, {password, "secret"}]}
                  ]},
    {local_username, "my-user"}
   ]}
].

----------------------------------------

TITLE: Inspecting Open Ports with lsof
DESCRIPTION: These commands use lsof to display OS processes listening on specific ports (5672 and 1883) for both IPv4 and IPv6.

LANGUAGE: bash
CODE:
sudo lsof -n -i4TCP:5672 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i6TCP:5672 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i4TCP:1883 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i6TCP:1883 | grep LISTEN

----------------------------------------

TITLE: Running Consumer Slowdown Test with PerfTest
DESCRIPTION: This command demonstrates how to use RabbitMQ PerfTest tool to simulate a consumer slowdown scenario. It configures various parameters such as cluster nodes, message rate, queue properties, and variable latencies.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-c 1000 \
-ct -1 \
-ad false \
--rate 100 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
-qa auto-delete=false,durable=false,x-queue-type=quorum \
--producers 200 \
--consumers 200 \
--producer-random-start-delay 30 \
-vl 10000:300 \
-vl 11000:60 -vl 12000:60 -vl 13000:60 -vl 14000:60 -vl 15000:60 -vl 16000:60 -vl 17000:60 -vl 18000:60 -vl 19000:60 \
-vl 20000:60 -vl 21000:60 -vl 22000:60 -vl 23000:60 -vl 24000:60 -vl 25000:60 -vl 26000:60 -vl 27000:60 -vl 28000:60 -vl 29000:60 \
-vl 30000:300 \
-vl 29000:60 -vl 28000:60 -vl 27000:60 -vl 26000:60 -vl 25000:60 -vl 24000:60 -vl 23000:60 -vl 22000:60 -vl 21000:60 -vl 20000:60 \
-vl 19000:60 -vl 18000:60 -vl 17000:60 -vl 16000:60 -vl 15000:60 -vl 14000:60 -vl 13000:60 -vl 12000:60 -vl 11000:60 -vl 10000:60 \
-vl 10000:3000

----------------------------------------

TITLE: Enabling RabbitMQ Auth Backend Cache Plugin
DESCRIPTION: Command to enable the rabbitmq_auth_backend_cache plugin using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_cache

----------------------------------------

TITLE: Starting Keycloak Server for RabbitMQ OAuth 2.0
DESCRIPTION: Bash command to start the Keycloak server preconfigured for RabbitMQ OAuth 2.0 authentication.

LANGUAGE: bash
CODE:
make start-keycloak

----------------------------------------

TITLE: Initializing RabbitMQ Connection in Node.js
DESCRIPTION: Initial setup code that configures module dependencies and establishes connection parameters for RabbitMQ, including environment-specific URL detection for Cloud Foundry.

LANGUAGE: javascript
CODE:
require.paths.unshift('./node_modules');

var http = require('http');
var amqp = require('amqp');
var URL = require('url');
var htmlEscape = require('sanitizer/sanitizer').escape;

function rabbitUrl() {
  if (process.env.VCAP_SERVICES) {
    conf = JSON.parse(process.env.VCAP_SERVICES);
    return conf['rabbitmq-2.4'][0].credentials.url;
  }
  else {
    return "amqp://localhost";
  }
}

var port = process.env.VCAP_APP_PORT || 3000;

----------------------------------------

TITLE: Testing TLS Connection with OpenSSL Server
DESCRIPTION: Commands to start an OpenSSL test server and establish a TLS connection for certificate validation.

LANGUAGE: bash
CODE:
openssl s_server -accept 8443 \
  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem

LANGUAGE: bash
CODE:
openssl s_client -connect localhost:8443 \
  -cert client_certificate.pem -key client_key.pem -CAfile ca_certificate.pem \
  -verify 8 -verify_hostname CN_NAME

----------------------------------------

TITLE: Configuring Stream TCP Listener Options
DESCRIPTION: Comprehensive TCP listener options configuration including backlog, buffer sizes, and keepalive settings.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 127.0.0.1:5552
stream.listeners.tcp.2 = ::1:5552

stream.tcp_listen_options.backlog = 4096
stream.tcp_listen_options.recbuf  = 131072
stream.tcp_listen_options.sndbuf  = 131072

stream.tcp_listen_options.keepalive = true
stream.tcp_listen_options.nodelay   = true

stream.tcp_listen_options.exit_on_close = true
stream.tcp_listen_options.send_timeout  = 120

----------------------------------------

TITLE: Configuring Source and Destination for Static Shovels
DESCRIPTION: This example demonstrates how to configure the source and destination for a static shovel, including protocol specification and URI settings.

LANGUAGE: erlang
CODE:
{shovel_name, [
  {source, [
    %% protocol-specific source configuration goes here
  ]},
  {destination, [
    %% protocol-specific destination configuration goes here
  ]},
  %% 'confirm' is the default acknowledgement mode
  {ack_mode, confirm},
  %% reconnect with a 5 second delay
  {reconnect_delay, 5}
]}

----------------------------------------

TITLE: Enabling RabbitMQ Auth Cache Plugin using rabbitmqctl
DESCRIPTION: This command enables the rabbitmq_auth_backend_cache plugin using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_cache

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugin
DESCRIPTION: This shell command enables the RabbitMQ stream plugin in the running RabbitMQ Docker container.

LANGUAGE: shell
CODE:
docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Configuring IPv6 Dual Stack Listeners
DESCRIPTION: Configuration for listening on both IPv4 and IPv6 localhost interfaces

LANGUAGE: ini
CODE:
listeners.tcp.1 = 127.0.0.1:5672
listeners.tcp.2 = ::1:5672

----------------------------------------

TITLE: Closing All RabbitMQ Connections
DESCRIPTION: Closes all connections for a specific virtual host or the entire RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl close_all_connections -p qa_env --limit 10 'Please close'

----------------------------------------

TITLE: JWT Token Structure for MQTT Permissions
DESCRIPTION: Example of a JWT token structure with scopes required for publishing messages to MQTT topics.

LANGUAGE: json
CODE:
{
  "scope": [
    "rabbitmq.write:*/*/*",
    "rabbitmq.configure:*/*/*",
    "rabbitmq.read:*/*/*"
  ],
  "extra_scope": "rabbitmq.tag:management",
  "aud": [
    "rabbitmq"
  ]
}

----------------------------------------

TITLE: Connecting to RabbitMQ Server in JavaScript
DESCRIPTION: This code establishes a connection to the RabbitMQ server running on localhost.

LANGUAGE: javascript
CODE:
amqp.connect('amqp://localhost', function(error0, connection) {});

----------------------------------------

TITLE: Configuring Stream TCP Listener Options
DESCRIPTION: Comprehensive TCP listener options configuration including backlog, buffer sizes, and keepalive settings.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 127.0.0.1:5552
stream.listeners.tcp.2 = ::1:5552

stream.tcp_listen_options.backlog = 4096
stream.tcp_listen_options.recbuf  = 131072
stream.tcp_listen_options.sndbuf  = 131072

stream.tcp_listen_options.keepalive = true
stream.tcp_listen_options.nodelay   = true

stream.tcp_listen_options.exit_on_close = true
stream.tcp_listen_options.send_timeout  = 120

----------------------------------------

TITLE: Establishing MQTT Connection in JavaScript
DESCRIPTION: JavaScript code to establish an MQTT connection with the broker using the Paho client.

LANGUAGE: javascript
CODE:
var options = {
    timeout: 3,
    keepAliveInterval: 30,
    onSuccess: function () {
        debug("CONNECTION SUCCESS");
        client.subscribe('/topic/test', {qos: 1});
    },
    onFailure: function (message) {
        debug("CONNECTION FAILURE - " + message.errorMessage);
    }
};
if (location.protocol == "https:") {
    options.useSSL = true;
}
debug("CONNECT TO " + wsbroker + ":" + wsport);
client.connect(options);

----------------------------------------

TITLE: Encoding RabbitMQ Configuration Value
DESCRIPTION: Encrypts a configuration value using a specified passphrase and optional cipher settings.

LANGUAGE: bash
CODE:
rabbitmqctl encode --cipher blowfish_cfb64 --hash sha256 --iterations 10000 '<<"guest">>' mypassphrase

----------------------------------------

TITLE: Listing RabbitMQ Consumers
DESCRIPTION: Lists consumers (subscriptions to queues) for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_consumers -p my-vhost

----------------------------------------

TITLE: Configuring Preferred Username Claims
DESCRIPTION: Configuration to specify which JWT claims should be used to extract the username for display in the Management UI.

LANGUAGE: ini
CODE:
auth_oauth2.resource_server_id = rabbitmq
auth_oauth2.preferred_username_claims.1 = user_name
auth_oauth2.preferred_username_claims.2 = email

----------------------------------------

TITLE: Adding RabbitMQ Java Client 5.0 Dependency in Maven
DESCRIPTION: Demonstrates how to add the RabbitMQ Java Client 5.0 dependency to a Maven project. This XML snippet should be added to the project's pom.xml file to include the client library.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>amqp-client</artifactId>
    <version>5.0.0</version>
</dependency>

----------------------------------------

TITLE: Binding a Queue to an Exchange in C# for RabbitMQ
DESCRIPTION: This code snippet shows how to bind a queue to an exchange using the RabbitMQ .NET client. This establishes the relationship between the exchange and the queue for message routing.

LANGUAGE: C#
CODE:
channel.QueueBind(queue: queueName,
                   exchange: "logs",
                   routingKey: string.Empty);

----------------------------------------

TITLE: Implementing Server-Side Offset Tracking in RabbitMQ Stream with Python
DESCRIPTION: This code snippet demonstrates how to implement server-side offset tracking in a RabbitMQ stream consumer using Python. It stores the offset every 10 messages and when receiving the marker message, allowing the consumer to resume from where it left off in subsequent runs.

LANGUAGE: python
CODE:
async def on_message(msg: AMQPMessage, message_context: MessageContext):
    # variable to keep track of the number of received messages
    global message_count
    global first_offset
    global last_offset

    offset = message_context.offset
    if first_offset == -1:
        print("First message received")
        first_offset = offset

    consumer = message_context.consumer
    stream = message_context.consumer.get_stream(message_context.subscriber_name)

    # store the offset after every 10 messages received
    message_count = message_count + 1

    if message_count % 10 == 0:
        # store_message needs to take a subscriber_name parameter
        await consumer.store_offset(
            stream=stream,
            offset=offset,
            subscriber_name=message_context.subscriber_name,
        )

    # store the offset after receiving the marker message
    if "marker" in str(msg):
        await consumer.store_offset(
            stream=stream,
            offset=offset,
            subscriber_name=message_context.subscriber_name,
        )
        last_offset = offset
        await consumer.close()

async def consume():
    # the offset to start consuming from
    stored_offset = -1
    global first_offset
    global last_offset

    # start a consumer and creates the stream is not exist (same as before...)

    try:
        await consumer.start()
        print("Started consuming: Press control +C to close")
        try:
            # query_offset must take a subscriber_name as parameter
            stored_offset = await consumer.query_offset(
                stream=STREAM_NAME, subscriber_name="subscriber_1"
            )
        except OffsetNotFound as offset_exception:
            print(f"Offset not previously stored. {offset_exception}")

        except ServerError as server_error:
            print(f"Server error: {server_error}")
            exit(1)

        # if no offset was previously stored start from the first offset
        stored_offset = stored_offset + 1
        await consumer.subscribe(
            stream=STREAM_NAME,
             # We explicitely need to assign a name to the consumer
            subscriber_name="subscriber_1",       
            callback=on_message,
            decoder=amqp_decoder,
            offset_specification=ConsumerOffsetSpecification(
                OffsetType.OFFSET, stored_offset
            ),
        )
        await consumer.run()

    except (KeyboardInterrupt, asyncio.exceptions.CancelledError):
        await consumer.close()

----------------------------------------

TITLE: Binding Exchanges in RabbitMQ using .NET
DESCRIPTION: This snippet shows how to bind one exchange to another in RabbitMQ using the .NET client. It uses the IModel#ExchangeBind method to bind a destination exchange to a source exchange with a specified routing key.

LANGUAGE: csharp
CODE:
var ch = conn.CreateModel();
ch.ExchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Advanced Cache Module Configuration
DESCRIPTION: Erlang configuration in advanced.config file to specify cache module arguments.

LANGUAGE: erlang
CODE:
[
 {rabbit, [
   %% ...
 ]},

 {rabbitmq_auth_backend_cache, [
    {cache_module, rabbit_auth_backend_ets_segmented},
    {cache_module_args, [10000]}
  ]}
].

----------------------------------------

TITLE: Starting RabbitMQ Server as Detached Application
DESCRIPTION: Command to start the RabbitMQ broker as a background application process

LANGUAGE: PowerShell
CODE:
rabbitmq-server.bat -detached

----------------------------------------

TITLE: Complete Log Receiver Implementation
DESCRIPTION: Full implementation of a program that receives and processes log messages from the fanout exchange.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='logs', exchange_type='fanout')

result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange='logs', queue=queue_name)

print(' [*] Waiting for logs. To exit press CTRL+C')

def callback(ch, method, properties, body):
    print(f" [x] {body}")

channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

channel.start_consuming()

----------------------------------------

TITLE: Inspecting TCP Connections with netstat
DESCRIPTION: This command uses netstat to list all TCP connection sockets, displaying IP addresses as numbers and showing program names next to port numbers.

LANGUAGE: bash
CODE:
sudo netstat --all --numeric --tcp --programs

----------------------------------------

TITLE: Listing RabbitMQ Queues - Unix
DESCRIPTION: Command to list all queues in RabbitMQ using rabbitmqctl tool on Unix systems.

LANGUAGE: bash
CODE:
sudo rabbitmqctl list_queues

----------------------------------------

TITLE: Listing RabbitMQ Topic Permissions
DESCRIPTION: Lists topic permissions for all users in a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_topic_permissions -p my-vhost

----------------------------------------

TITLE: Consuming Messages from RabbitMQ Stream in Rust
DESCRIPTION: This code snippet shows how to create a consumer that attaches to the beginning of a RabbitMQ stream. It tracks the first and last received message offsets and stops when it receives a marker message.

LANGUAGE: rust
CODE:
let mut first_offset: Option<u64> = None;
let mut last_offset: Option<u64> = None;
let mut consumer = environment
    .consumer()
    .offset(OffsetSpecification::First)
    .build(stream)
    .await
    .unwrap();

while let Some(delivery) = consumer.next().await {
    let d = delivery.unwrap();

    if !first_offset.is_some()  {
        println!("First message received");
        first_offset = Some(d.offset());
    }

    if  String::from_utf8_lossy(d.message().data().unwrap()).contains("marker")
    {
        last_offset = Some(d.offset());
        let handle = consumer.handle();
        _ = handle.close().await;
        break;
    }
}

if first_offset.is_some() {
    println!(
        "Done consuming first_offset: {:?} last_offset: {:?}  ", first_offset.unwrap(), last_offset.unwrap())
}

----------------------------------------

TITLE: Defining Static Shovels in RabbitMQ Configuration
DESCRIPTION: This snippet shows the basic structure for defining static shovels in the RabbitMQ advanced configuration file.

LANGUAGE: erlang
CODE:
{rabbit, [
  %% ...
]},

{rabbitmq_shovel, [
  {shovels, [
    {shovel_one, [
      %% shovel_one properties ...
    ]},
    %% ...
  ]}
]}

----------------------------------------

TITLE: Event Exchange Plugin Configuration for AMQP 1.0
DESCRIPTION: Configuration settings to switch the event_exchange plugin to publish events in the AMQP 1.0 format.

LANGUAGE: ini
CODE:
event_exchange.vhost = /
event_exchange.protocol = amqp_1_0

----------------------------------------

TITLE: Defining Static Shovels in RabbitMQ Configuration
DESCRIPTION: This snippet shows the basic structure for defining static shovels in the RabbitMQ advanced configuration file.

LANGUAGE: erlang
CODE:
{rabbit, [
  %% ...
]},

{rabbitmq_shovel, [
  {shovels, [
    {shovel_one, [
      %% shovel_one properties ...
    ]},
    %% ...
  ]}
]}

----------------------------------------

TITLE: Configuring Direct Exchange in Spring AMQP
DESCRIPTION: Demonstrates how to configure a direct exchange in Spring AMQP using a configuration class.

LANGUAGE: java
CODE:
@Bean
public DirectExchange direct() {
    return new DirectExchange("tut.direct");
}

----------------------------------------

TITLE: Retrieving Basic Node Information with rabbitmqadmin
DESCRIPTION: Demonstrates how to use rabbitmqadmin to display essential node information in tabular form.

LANGUAGE: shell
CODE:
rabbitmqadmin show overview

----------------------------------------

TITLE: Setting Queue Expiration in Java
DESCRIPTION: Demonstrates how to set an expiration time of 15 minutes for an entire queue using Java client.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-expires", 900000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Setting Queue Length Limit in Java
DESCRIPTION: Shows how to set a maximum length limit of 10 messages for a queue using Java client.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-length", 10);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Clearing RabbitMQ Parameter
DESCRIPTION: Clears a parameter for a specific component in a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_parameter federation-upstream node01

----------------------------------------

TITLE: Configuring Multiple OAuth 2.0 Resources
DESCRIPTION: Example configuration for setting up multiple OAuth 2.0 resources in RabbitMQ.

LANGUAGE: ini
CODE:
auth_oauth2.issuer = http//some_idp_url
auth_oauth2.scope_prefix = rabbitmq.

auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.2.id = rabbit_dev
auth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.

----------------------------------------

TITLE: Running the Logging System
DESCRIPTION: Command-line examples showing how to run the logging system with different severity filters.

LANGUAGE: bash
CODE:
python receive_logs_direct.py warning error > logs_from_rabbit.log

python receive_logs_direct.py info warning error
# => [*] Waiting for logs. To exit press CTRL+C

python emit_log_direct.py error "Run. Run. Or it will explode."
# => [x] Sent 'error':'Run. Run. Or it will explode.'

----------------------------------------

TITLE: Adding RabbitMQ Virtual Host
DESCRIPTION: Creates a new virtual host with optional description, tags, and default queue type.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost project9_dev_18 --description 'Dev environment no. 18' --tags dev,project9

----------------------------------------

TITLE: TLS Configuration
DESCRIPTION: INI configuration showing TLS/SSL setup for secure WebSocket connections

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# web_mqtt.ssl.password   = changeme

----------------------------------------

TITLE: TLS Configuration
DESCRIPTION: INI configuration showing TLS/SSL setup for secure WebSocket connections

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# web_mqtt.ssl.password   = changeme

----------------------------------------

TITLE: Passing Arguments to CLI Commands
DESCRIPTION: Illustrates different ways of passing arguments to CLI commands, including using the double hyphen to separate options from positional arguments.

LANGUAGE: bash
CODE:
rabbitmqctl add_user "a-user" "a-pa$$w0rd"

rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "a-pa$$w0rd"

rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "--!a-pa$$w0rd"

rabbitmqctl add_user --node=rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "a-pa$$w0rd"

----------------------------------------

TITLE: Advanced Cache Module Configuration
DESCRIPTION: Erlang configuration in advanced.config file to specify cache module arguments.

LANGUAGE: erlang
CODE:
[
 {rabbit, [
   %% ...
 ]},

 {rabbitmq_auth_backend_cache, [
    {cache_module, rabbit_auth_backend_ets_segmented},
    {cache_module_args, [10000]}
  ]}
].

----------------------------------------

TITLE: Implementing Task Publisher in PHP
DESCRIPTION: Code for publishing messages to a work queue with persistence enabled. Accepts command line input as the task message.

LANGUAGE: php
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->queue_declare('task_queue', false, true, false, false);

$data = implode(' ', array_slice($argv, 1));
if (empty($data)) {
    $data = "Hello World!";
}
$msg = new AMQPMessage(
    $data,
    array('delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT)
);

$channel->basic_publish($msg, '', 'task_queue');

echo ' [x] Sent ', $data, "\n";

$channel->close();
$connection->close();

----------------------------------------

TITLE: Configuring OAuth 2.0 for RabbitMQ Management Plugin in Erlang
DESCRIPTION: This snippet shows how to configure the RabbitMQ management plugin to use OAuth 2.0 authentication. It includes settings for enabling OAuth, specifying client ID and secret, and setting the OpenID Connect provider URL.

LANGUAGE: erlang
CODE:
{ rabbitmq_management,
     ...

     {oauth_enabled, true},
     {oauth_client_id, "PUT YOUR AUTH CLIENT ID"},
     {oauth_client_secret, "PUT YOUR AUTH CLIENT SECRET"},
     {oauth_provider_url, "PUT YOUR OpenID Connect URL"}
     ...
  }

----------------------------------------

TITLE: Disabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to disable Firehose tracing for a specific virtual host. This stops the monitoring of messages.

LANGUAGE: bash
CODE:
rabbitmqctl trace_off -p [virtual host]

----------------------------------------

TITLE: Importing Required Libraries for RabbitMQ Stream Producer
DESCRIPTION: Imports necessary modules for creating a RabbitMQ stream producer in Python.

LANGUAGE: python
CODE:
import asyncio
from rstream import Producer

----------------------------------------

TITLE: Enabling RabbitMQ Web STOMP Plugin
DESCRIPTION: Command to enable the RabbitMQ Web STOMP plugin using rabbitmq-plugins tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_stomp

----------------------------------------

TITLE: Creating a Temporary Queue in Java with RabbitMQ
DESCRIPTION: Declares a non-durable, exclusive, auto-delete queue with a server-generated name using the RabbitMQ Java client.

LANGUAGE: java
CODE:
String queueName = channel.queueDeclare().getQueue();

----------------------------------------

TITLE: Running PerfTest with OAuth Token
DESCRIPTION: Command to run RabbitMQ PerfTest with OAuth authentication

LANGUAGE: bash
CODE:
make start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)

----------------------------------------

TITLE: Publishing a Message with Validated User-ID in RabbitMQ using Java
DESCRIPTION: This snippet demonstrates how to publish a message with a validated user-ID in RabbitMQ using Java. The user-id property is set to 'guest', which must match the connection's user name for successful publication.

LANGUAGE: java
CODE:
AMQP.BasicProperties properties = new AMQP.BasicProperties();
properties.setUserId("guest");
channel.basicPublish("amq.fanout", "", properties, "test".getBytes());

----------------------------------------

TITLE: Accessing RabbitMQ Management UI
DESCRIPTION: Commands to retrieve the username and password for the RabbitMQ Management UI, and set up port forwarding to access the UI locally.

LANGUAGE: bash
CODE:
username="$(kubectl get secret hello-world-default-user -o jsonpath='{.data.username}' | base64 --decode)"
echo "username: $username"
password="$(kubectl get secret hello-world-default-user -o jsonpath='{.data.password}' | base64 --decode)"
echo "password: $password"

kubectl port-forward "service/hello-world" 15672

----------------------------------------

TITLE: Checking Shovel Status via CLI
DESCRIPTION: Command to check the status of all configured shovels using rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl shovel_status

----------------------------------------

TITLE: Configuring JSON Field Mapping in RabbitMQ Logs
DESCRIPTION: Example of how to customize JSON field mapping for log outputs in RabbitMQ.

LANGUAGE: ini
CODE:
log.file.formatter = json
log.file.formatter.json.field_map = 'time:ts level:lvl msg:message *:-'

----------------------------------------

TITLE: Updating Debian Package Sources
DESCRIPTION: Shell commands to update apt package sources after migrating from Bintray to new repositories. This updates the package index after repository configuration changes.

LANGUAGE: shell
CODE:
sudo apt update -y

----------------------------------------

TITLE: Message Consumer Setup
DESCRIPTION: Setting up a consumer to receive messages from the queue

LANGUAGE: go
CODE:
msgs, err := ch.Consume(
  q.Name, // queue
  "",     // consumer
  true,   // auto-ack
  false,  // exclusive
  false,  // no-local
  false,  // no-wait
  nil,    // args
)
failOnError(err, "Failed to register a consumer")

var forever chan struct{}

go func() {
  for d := range msgs {
    log.Printf("Received a message: %s", d.Body)
  }
}()

log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
<-forever

----------------------------------------

TITLE: Configuring Stream Advertised TLS Host and Port
DESCRIPTION: Configuration to set custom advertised host and port for both TLS and non-TLS stream connections.

LANGUAGE: ini
CODE:
stream.advertised_host = private-rabbitmq-1
stream.advertised_port = 12345
stream.advertised_tls_host = public-rabbitmq-1
stream.advertised_tls_port = 12344

----------------------------------------

TITLE: Exporting and Formatting Definitions Using HTTP API and jq in Bash
DESCRIPTION: This command exports RabbitMQ definitions using the HTTP API and pipes the output to jq for more human-friendly formatting. It requires the management plugin and jq to be installed.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions | jq

----------------------------------------

TITLE: Creating a Virtual Host with Metadata Using RabbitMQ HTTP API
DESCRIPTION: This example shows how to create a virtual host with metadata using the RabbitMQ HTTP API and curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \
                           -H "content-type: application/json" \
                           --data-raw '{"description": "QA environment 1", "tags": "qa,project-a", "default_queue_type": "quorum"}'

----------------------------------------

TITLE: AMQP Exchange Binding Methods
DESCRIPTION: RabbitMQ introduces new AMQP methods 'exchange.bind' and 'exchange.unbind' for creating bindings between exchanges. The 'source' field indicates the exchange from which messages enter the binding, while the 'destination' field indicates the exchange to which messages are passed.

LANGUAGE: AMQP
CODE:
exchange.bind
exchange.unbind

----------------------------------------

TITLE: Defining Link-Credit Field in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the link-credit field in the AMQP 1.0 flow frame, which is used to control the number of messages that can be sent.

LANGUAGE: xml
CODE:
<field name="link-credit" type="uint"/>

----------------------------------------

TITLE: Setting Unlimited Prefetch in Java
DESCRIPTION: This example shows how to set an unlimited prefetch by passing 0 to the basicQos method.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(0); // No limit for this consumer
channel.basicConsume("my-queue", false, consumer);

----------------------------------------

TITLE: Listing RabbitMQ Global Parameters
DESCRIPTION: Lists all global runtime parameters.

LANGUAGE: bash
CODE:
rabbitmqctl list_global_parameters

----------------------------------------

TITLE: Troubleshooting Authentication in RabbitMQ
DESCRIPTION: Examples of log messages and commands for troubleshooting authentication issues in RabbitMQ.

LANGUAGE: ini
CODE:
2019-03-25 12:28:19.047 [info] <0.1613.0> accepting AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)
2019-03-25 12:28:19.056 [error] <0.1613.0> Error on AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672, state: starting):
PLAIN login refused: user 'user2' - invalid credentials
2019-03-25 12:28:22.057 [info] <0.1613.0> closing AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)

LANGUAGE: bash
CODE:
rabbitmqctl authenticate_user "a-username" "a/password"

LANGUAGE: PowerShell
CODE:
# note that double quotes are required due to the & character
rabbitmqctl.bat authenticate_user 'a-username' '"a/p&assword"'

----------------------------------------

TITLE: Visualizing RabbitMQ Stream Queue Flow with Mermaid
DESCRIPTION: A flowchart diagram depicting the flow between a producer (P), stream queue (Q), and consumer (C) in a RabbitMQ system. Uses custom CSS classes for styling each component.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    Q[[Stream-Queue]]
    C((C))

    P --> Q --> C

    class P mermaid-producer
    class Q mermaid-queue
    class C mermaid-consumer

----------------------------------------

TITLE: Examining RabbitMQ Crash Dump Header
DESCRIPTION: Shows how to view the first few lines of a RabbitMQ crash dump file to identify the termination reason. The crash dump contains the state of the runtime at the time of abnormal exit.

LANGUAGE: bash
CODE:
head -n 3 ./erl_crash.dump

----------------------------------------

TITLE: Configuring HTTP Options for Web MQTT
DESCRIPTION: Configuration examples for customizing HTTP server settings for the Web MQTT plugin.

LANGUAGE: ini
CODE:
web_mqtt.cowboy_opts.idle_timeout = 60000
web_mqtt.cowboy_opts.max_keepalive = 200
web_mqtt.cowboy_opts.max_headers   = 100
web_mqtt.cowboy_opts.max_empty_lines = 5
web_mqtt.cowboy_opts.max_request_line_length

----------------------------------------

TITLE: Using Long Node Names
DESCRIPTION: When using fully qualified domain names, specify the '--longnames' option for CLI tools.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -n rabbit@host1.messaging.eng.coolcorporation.banana check_alarms --longnames

----------------------------------------

TITLE: Enabling Virtual Host Deletion Protection using RabbitMQ CLI
DESCRIPTION: Shows how to enable deletion protection for a virtual host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl enable_vhost_protection_from_deletion "vhost-name"

----------------------------------------

TITLE: Example RabbitMQ Server Capabilities Table
DESCRIPTION: This snippet demonstrates the structure of a capabilities table that a RabbitMQ server might present to a client when opening a connection. It includes various supported features and version information.

LANGUAGE: haskell
CODE:
{ "product"      = (longstr) "RabbitMQ",
  "platform"     = (longstr) "Erlang/OTP",
  "information"  = (longstr) "Licensed under the MPL 2.0. Website: https://www.rabbitmq.com",
  "capabilities" = (table)   { "exchange_exchange_bindings" = (bool) true,
                               "consumer_cancel_notify"     = (bool) true,
                               "basic.nack"                 = (bool) true,
                               "publisher_confirms"         = (bool) true },
  "version"      = (longstr) "3.12.10" }

----------------------------------------

TITLE: Emitting Error Log Example
DESCRIPTION: Example of how to emit an error log message using the implemented system

LANGUAGE: swift
CODE:
self.emitLogDirect("Hi there!", severity: "error")

----------------------------------------

TITLE: Checking TLS Versions in Erlang
DESCRIPTION: Commands to verify TLS version support in the Erlang runtime used by RabbitMQ.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics --silent tls_versions

LANGUAGE: bash
CODE:
rabbitmqctl eval 'ssl:versions().'

----------------------------------------

TITLE: RabbitMQ .NET Client Strong Naming Public Key
DESCRIPTION: The public part of the signing key used for strong naming the RabbitMQ .NET client assembly.

LANGUAGE: ini
CODE:
00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8
c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a71
96c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d825416
8cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717b
fcb943b5.

----------------------------------------

TITLE: Complete AMQP 0.9.1 Shovel Configuration Example
DESCRIPTION: Full example of a static shovel configuration between AMQP 0.9.1 endpoints with detailed settings

LANGUAGE: erlang
CODE:
{rabbitmq_shovel,
  [ {shovels, [ {my_first_shovel,
                  [ {source,
                      [ {protocol, amqp091},
                        {uris, [ "amqp://fred:secret@host1.domain/my_vhost",
                                  "amqp://john:secret@host2.domain/my_vhost" ]},
                        {declarations, [ {'exchange.declare',
                                            [ {exchange, <<"my_fanout">>},
                                              {type, <<"fanout">>},
                                              durable
                                            ]},
                                          {'queue.declare',
                                            [{arguments,
                                                [{<<"x-message-ttl">>, long, 60000}]}]},
                                          {'queue.bind',
                                            [ {exchange, <<"my_fanout">>},
                                              {queue,    <<>>}
                                            ]}
                                          ]},
                        {queue, <<>>},
                        {prefetch_count, 10}
                      ]},
                    {destination,
                      [ {protocol, amqp091},
                        {uris, ["amqp://"]},
                        {declarations, [ {'exchange.declare',
                                            [ {exchange, <<"my_direct">>},
                                              {type, <<"direct">>},
                                              durable
                                            ]}]},
                        {publish_properties, [ {delivery_mode, 2} ]},
                        {add_forward_headers, true},
                        {publish_fields, [ {exchange, <<"my_direct">>},
                                          {routing_key, <<"from_shovel">>}
                                          ]}
                      ]},
                    {ack_mode, on_confirm},
                    {reconnect_delay, 5}
                  ]}
              ]}
  ]}

----------------------------------------

TITLE: Complete EmitLogDirect Implementation in C# for RabbitMQ
DESCRIPTION: This is the full implementation of the EmitLogDirect class, which publishes log messages with specific severities to a RabbitMQ direct exchange.

LANGUAGE: csharp
CODE:
using System.Text;
using RabbitMQ.Client;

var factory = new ConnectionFactory { HostName = "localhost" };
using var connection = factory.CreateConnection();
using var channel = connection.CreateModel();

channel.ExchangeDeclare(exchange: "direct_logs", type: ExchangeType.Direct);

var severity = (args.Length > 0) ? args[0] : "info";
var message = (args.Length > 1)
              ? string.Join(" ", args.Skip(1).ToArray())
              : "Hello World!";
var body = Encoding.UTF8.GetBytes(message);

channel.BasicPublish(exchange: "direct_logs",
                     routingKey: severity,
                     basicProperties: null,
                     body: body);
Console.WriteLine($" [x] Sent '{severity}':'{message}'");

Console.WriteLine(" Press [enter] to exit.");
Console.ReadLine();

----------------------------------------

TITLE: Enabling VT/ANSI Escape Sequences in PowerShell
DESCRIPTION: This PowerShell command enables VT/ANSI escape sequences globally in PowerShell to fix issues with CLI tools showing ANSI character sequences.

LANGUAGE: PowerShell
CODE:
Set-ItemProperty HKCU:\Console VirtualTerminalLevel -Type DWORD 1

----------------------------------------

TITLE: Configuring Federation Policy
DESCRIPTION: Commands to set up a policy that enables federation for matching exchanges

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to exchanges federate-me "^amq\." \
    '{"federation-upstream-set":"all"}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy --apply-to exchanges federate-me "^amq\." `
    '"{""federation-upstream-set"":""all""}"'

----------------------------------------

TITLE: Establishing STOMP Connection
DESCRIPTION: JavaScript code demonstrating how to establish a STOMP connection with error handling

LANGUAGE: javascript
CODE:
var on_connect = function() {
    console.log('connected');
};
var on_error =  function() {
    console.log('error');
};
client.connect('guest', 'guest', on_connect, on_error, '/');

----------------------------------------

TITLE: Checking RabbitMQ Node Status
DESCRIPTION: Command to check the status of a RabbitMQ node and perform basic health checks.

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat status

----------------------------------------

TITLE: Creating Federation Upstream Set in RabbitMQ
DESCRIPTION: This command creates a federation upstream set named 'location-1' with two previously declared upstreams.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

----------------------------------------

TITLE: JWT Token for MQTT Scopes
DESCRIPTION: Example of JWT token scopes required for publishing MQTT messages.

LANGUAGE: javascript
CODE:
{
  "scope": [
    "rabbitmq.write:*/*/*",
    "rabbitmq.configure:*/*/*",
    "rabbitmq.read:*/*/*"
  ],
  "extra_scope": "rabbitmq.tag:management",
  "aud": [
    "rabbitmq"
  ]
}

----------------------------------------

TITLE: Implementing RabbitMQ Consumer with Priority Settings in Java
DESCRIPTION: Java code demonstrating how to create a RabbitMQ consumer with priority settings. The code establishes a connection, declares a queue and exchange, and sets up a consumer with priority 10 using the x-priority argument. It includes message acknowledgment and continuous message processing.

LANGUAGE: java
CODE:
import java.util.*;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;

public class Consumer {

    private final static String EXCHANGE_NAME = "my_exchange";
    private final static String QUEUE_NAME = "my_queue";

    public static void main(String[] argv) throws Exception {
      ConnectionFactory factory = new ConnectionFactory();
      factory.setHost("localhost");
      Connection connection = factory.newConnection();
      Channel channel = connection.createChannel();

      channel.queueDeclare(QUEUE_NAME, true, false, false, null);
      channel.exchangeDeclare(EXCHANGE_NAME, "direct", true);
      channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "");
      System.out.println("Waiting for messages. To exit press CTRL+C");

      QueueingConsumer consumer = new QueueingConsumer(channel);

      Map<String, Object> args = new HashMap<String, Object>();
      args.put("x-priority", 10);
      channel.basicConsume(QUEUE_NAME, false, "", false, false, args, consumer);

      while (true) {
        QueueingConsumer.Delivery delivery = consumer.nextDelivery();
        String message = new String(delivery.getBody());
        System.out.println("Received '" + message + "'");
        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
      }
  }
}

----------------------------------------

TITLE: Publishing a Message with a Filter Value to a RabbitMQ Stream in Java
DESCRIPTION: This example shows how to publish a message to a stream with an associated filter value using the 'x-stream-filter-value' header.

LANGUAGE: java
CODE:
channel.basicPublish(
  "", // default exchange
  "my-stream",
  new AMQP.BasicProperties.Builder()
    .headers(Collections.singletonMap(
      "x-stream-filter-value", "california" // set filter value
    ))
    .build(),
  body
);

----------------------------------------

TITLE: Configuring Disk Free Space Limit with Memory Units in RabbitMQ
DESCRIPTION: This snippet demonstrates how to set the disk free space limit using memory units (KB, MB, GB) in the RabbitMQ configuration file.

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1GB

----------------------------------------

TITLE: Enabling RabbitMQ Feature Flag
DESCRIPTION: Enables a specific feature flag or all feature flags on the target node.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag restart_streams

----------------------------------------

TITLE: Configuring Federation Policy
DESCRIPTION: Commands to set up a policy that enables federation for matching exchanges

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to exchanges federate-me "^amq\." \
    '{"federation-upstream-set":"all"}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy --apply-to exchanges federate-me "^amq\." `
    '"{""federation-upstream-set"":""all""}"'

----------------------------------------

TITLE: Setting Up RabbitMQ Stream Consumer in Rust
DESCRIPTION: This snippet shows how to set up a consumer for a RabbitMQ stream. It includes stream declaration, consumer configuration, and message processing logic.

LANGUAGE: rust
CODE:
let mut consumer = environment
        .consumer()
        .offset(OffsetSpecification::First)
        .build(stream)
        .await
        .unwrap();

let handle = consumer.handle();
task::spawn(async move {
        while let Some(delivery) = consumer.next().await {
            let d = delivery.unwrap();
            println!("Got message: {:#?} with offset: {}",
                     d.message().data().map(|data| String::from_utf8(data.to_vec()).unwrap()),
                     d.offset(),);
        }
    });

----------------------------------------

TITLE: Setting Multiple User Limits using RabbitMQ CLI
DESCRIPTION: This command sets both the maximum connections and maximum channels limits for a user using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits guest '{"max-connections": 10, "max-channels": 20}'

----------------------------------------

TITLE: Creating Federation Upstream Set in Bash
DESCRIPTION: Command to create a federation upstream set with multiple upstreams

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

----------------------------------------

TITLE: Clearing RabbitMQ User Topic Permissions
DESCRIPTION: Clears topic permissions for a user in a specific virtual host and exchange.

LANGUAGE: bash
CODE:
rabbitmqctl clear_topic_permissions -p my-vhost janeway amq.topic

----------------------------------------

TITLE: Creating Federation Upstream Set in Bash
DESCRIPTION: Command to create a federation upstream set with multiple upstreams

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Stream Plugin
DESCRIPTION: This shell command starts a RabbitMQ Docker container with the stream plugin enabled and necessary port mappings. It also sets the advertised host for the stream plugin.

LANGUAGE: shell
CODE:
docker run -it --rm --name rabbitmq -p 5552:5552 -p 5672:5672 -p 15672:15672 \
   -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \
   pivotalrabbitmq/rabbitmq-stream

----------------------------------------

TITLE: Increasing Atom Limit for RabbitMQ
DESCRIPTION: Sets the limit on the number of atoms to 9 million, which may be necessary for environments with very large numbers of quorum queues.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+t 9000000"

LANGUAGE: bash
CODE:
RABBITMQ_MAX_NUMBER_OF_ATOMS=9000000

----------------------------------------

TITLE: RabbitMQ Exchange Prefix
DESCRIPTION: Reference to the reserved exchange name prefix that cannot be used for declaring new exchanges in RabbitMQ.

LANGUAGE: markdown
CODE:
amq.

----------------------------------------

TITLE: Discovering CLI Commands
DESCRIPTION: Use the 'help' command to discover available CLI commands for RabbitMQ tools.

LANGUAGE: bash
CODE:
rabbitmqctl help

rabbitmq-diagnostics help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help

rabbitmq-diagnostics.bat help

----------------------------------------

TITLE: Establishing MQTT Connection
DESCRIPTION: JavaScript code to establish an MQTT connection with the broker using the Paho client.

LANGUAGE: javascript
CODE:
var options = {
    timeout: 3,
    keepAliveInterval: 30,
    onSuccess: function () {
        debug("CONNECTION SUCCESS");
        client.subscribe('/topic/test', {qos: 1});
    },
    onFailure: function (message) {
        debug("CONNECTION FAILURE - " + message.errorMessage);
    }
};
if (location.protocol == "https:") {
    options.useSSL = true;
}
debug("CONNECT TO " + wsbroker + ":" + wsport);
client.connect(options);

----------------------------------------

TITLE: Configuring Basic RabbitMQ Connection URI
DESCRIPTION: Example of a non-encrypted RabbitMQ connection URI with heartbeat and connection timeout parameters specified.

LANGUAGE: ini
CODE:
amqp://myhost?heartbeat=5&connection_timeout=10000

----------------------------------------

TITLE: Applying Named Upstream Set in RabbitMQ Federation
DESCRIPTION: These commands create a named upstream set 'location-1' with two upstreams and apply it to matching exchanges or queues.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream-set":"location-1"}'

----------------------------------------

TITLE: Starting RabbitMQ Server with Docker
DESCRIPTION: Command to start a RabbitMQ 4.1 server using Docker, exposing necessary ports for AMQP and management interface.

LANGUAGE: bash
CODE:
docker run -it --rm --name rabbitmq \
    -p 5672:5672 -p 15672:15672 \
    rabbitmq:4.1-rc-management

----------------------------------------

TITLE: Consuming from a RabbitMQ Stream with 'first' Offset in Java
DESCRIPTION: This snippet demonstrates how to consume messages from a stream starting from the first available message using the 'x-stream-offset' consumer argument set to 'first'.

LANGUAGE: java
CODE:
channel.basicQos(100); // QoS must be specified
channel.basicConsume(
  "my-stream",
  false,
  Collections.singletonMap("x-stream-offset", "first"), // "first" offset specification
  (consumerTag, message) -> {
    // message processing
    // ...
   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required
  },
  consumerTag -> { });

----------------------------------------

TITLE: Implementing CC Headers in RabbitMQ with Java
DESCRIPTION: Example of how to set CC headers for multiple routing keys in a RabbitMQ message using Java. The code demonstrates creating message properties, setting up headers with a list of routing keys, and publishing the message to an exchange.

LANGUAGE: java
CODE:
BasicProperties props  = new BasicProperties();
Map<String, Object> headers = new HashMap<String, Object>();
List<String> ccList = new ArrayList<String>();
ccList.add("routingkey2");
ccList.add("routingkey3");
headers.put("CC", ccList);
props.setHeaders(headers);
channel.basicPublish(exchange, "routingkey1", props, payload);

----------------------------------------

TITLE: Configuring RabbitMQ Authentication Backends
DESCRIPTION: Examples of configuring different authentication backends in RabbitMQ configuration file

LANGUAGE: ini
CODE:
# rabbitmq.conf
auth_backends.1 = internal
auth_backends.2 = ldap

# Using full module name
auth_backends.1 = rabbit_auth_backend_ip_range

----------------------------------------

TITLE: Setting Console Code Page for UTF-8 Support
DESCRIPTION: This PowerShell command sets the console code page to 65001 (UTF-8) to ensure proper handling of non-ASCII characters in RabbitMQ CLI tools.

LANGUAGE: PowerShell
CODE:
chcp 65001

----------------------------------------

TITLE: Configuring Scope Aliases
DESCRIPTION: Example configuration for mapping custom scopes to RabbitMQ scopes using scope aliases.

LANGUAGE: ini
CODE:
auth_oauth2.scope_aliases.1.alias = api://rabbitmq:Read.All
auth_oauth2.scope_aliases.1.scope = rabbitmq.read:*/*

auth_oauth2.scope_aliases.2.alias = api://rabbitmq:Write.All
auth_oauth2.scope_aliases.2.scope = rabbitmq.write:*/*

auth_oauth2.scope_aliases.3.alias = api://rabbitmq:Configure.All
auth_oauth2.scope_aliases.3.scope = rabbitmq.configure:*/*

auth_oauth2.scope_aliases.3.alias = api://rabbitmq:Administrator
auth_oauth2.scope_aliases.3.scope = rabbitmq.tag:administrator

auth_oauth2.scope_aliases.4.alias = api://rabbitmq:producer
auth_oauth2.scope_aliases.4.scope = rabbitmq.read:*/* rabbitmq.write:*/* rabbitmq.configure:*/* rabbitmq.tag:management

----------------------------------------

TITLE: Configuring Pre-declared Topology for All Shovels
DESCRIPTION: Example of configuring all shovels to use pre-declared topology using rabbitmq.conf

LANGUAGE: ini
CODE:
# all shovels started on this node will use pre-declared topology
shovel.topology.predeclared = true

----------------------------------------

TITLE: Defining RabbitMQ User with Auto-generated Credentials
DESCRIPTION: YAML definition for a RabbitMQ User resource with auto-generated credentials.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: User
metadata:
  name: user-example
  namespace: rabbitmq-system
spec:
  tags:
  - policymaker
  rabbitmqClusterReference:
    name: example-rabbitmq

----------------------------------------

TITLE: Stopping RabbitMQ Node
DESCRIPTION: Command to stop a running RabbitMQ node using rabbitmqctl.

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat stop

----------------------------------------

TITLE: Configuring RabbitMQ TLS Connection with Peer Verification
DESCRIPTION: Example of a secure RabbitMQ connection URI with TLS enabled and peer verification, including certificate paths and server name indication.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_peer&server_name_indication=myhost

----------------------------------------

TITLE: Custom Scope Field Configuration
DESCRIPTION: Configuration example showing how to specify a custom field for OAuth 2.0 scopes

LANGUAGE: ini
CODE:
...
auth_oauth2.additional_scopes_key = extra_scope
...

----------------------------------------

TITLE: Comprehensive STOMP TCP Listener Options
DESCRIPTION: Full configuration of TCP listener options including buffers, keepalive, and timeouts.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 127.0.0.1:61613
stomp.listeners.tcp.2 = ::1:61613

stomp.tcp_listen_options.backlog = 4096
stomp.tcp_listen_options.recbuf  = 131072
stomp.tcp_listen_options.sndbuf  = 131072

stomp.tcp_listen_options.keepalive = true
stomp.tcp_listen_options.nodelay   = true

stomp.tcp_listen_options.exit_on_close = true
stomp.tcp_listen_options.send_timeout  = 120

----------------------------------------

TITLE: Configuring RabbitMQ OAuth 2.0 with Entra ID
DESCRIPTION: RabbitMQ configuration file settings to enable Entra ID as OAuth 2.0 authentication backend. Includes authentication backend selection, management UI settings, and OAuth 2.0 specific configurations.

LANGUAGE: ini
CODE:
auth_backends.1 = rabbit_auth_backend_oauth2
auth_backends.2 = rabbit_auth_backend_internal

management.oauth_enabled = true
management.oauth_client_id = {PUT YOUR AZURE AD APPLICATION ID}
management.oauth_provider_url = https://login.microsoftonline.com/{YOUR_ENTRA_ID_TENANT_ID}

auth_oauth2.resource_server_id = {PUT YOUR AZURE AD APPLICATION ID}
auth_oauth2.additional_scopes_key = roles
auth_oauth2.jwks_url = {PUT YOUR ENTRA ID JWKS URI VALUE}

----------------------------------------

TITLE: Configuring Pre-declared Topology for All Shovels
DESCRIPTION: Example of configuring all shovels to use pre-declared topology using rabbitmq.conf

LANGUAGE: ini
CODE:
# all shovels started on this node will use pre-declared topology
shovel.topology.predeclared = true

----------------------------------------

TITLE: Listing Unresponsive RabbitMQ Queues
DESCRIPTION: Lists unresponsive queues with specified information items and filters.

LANGUAGE: bash
CODE:
rabbitmqctl list_unresponsive_queues --local name

----------------------------------------

TITLE: Binding Exchanges in .NET using RabbitMQ Client
DESCRIPTION: Shows how to bind two exchanges using the IModel#ExchangeBind method in .NET. Creates a binding from a source exchange to a destination exchange with a specified routing key.

LANGUAGE: csharp
CODE:
var ch = conn.CreateModel();
ch.ExchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Setting RabbitMQ Virtual Host Limits
DESCRIPTION: Sets limits for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p qa_env '{"max-connections": 64}'

----------------------------------------

TITLE: Basic SockJS Connection
DESCRIPTION: Simple example of creating a basic SockJS connection.

LANGUAGE: javascript
CODE:
var sockjs = new SockJS('/echo');

----------------------------------------

TITLE: Rebalancing Queue Leaders in RabbitMQ
DESCRIPTION: Command to rebalance queue leader replicas across cluster nodes. Supports different queue types including quorum, classic, and stream queues.

LANGUAGE: bash
CODE:
rabbitmq-queues rebalance "all" --vhost-pattern "a-vhost" --queue-pattern ".*"

----------------------------------------

TITLE: Configuring Federation Upstream in RabbitMQ
DESCRIPTION: This snippet demonstrates how to add a federation upstream named 'origin' using the rabbitmqctl command. The upstream is configured with a URI pointing to a remote RabbitMQ host.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: Configuring TLS in RabbitMQ 3.7 (Classic Erlang Format)
DESCRIPTION: Example of configuring TLS settings in RabbitMQ using the classic Erlang terms configuration format. This snippet sets SSL listeners and options including certificate files and TLS versions.

LANGUAGE: erlang
CODE:
[
    {ssl, [{versions, ['tlsv1.2', 'tlsv1.1']}]},
    {rabbit, [
            {ssl_listeners, [5671]},
            {ssl_options, [{cacertfile,"/path/to/ca_certificate.pem"},
                            {certfile,  "/path/to/server_certificate.pem"},
                            {keyfile,   "/path/to/server_key.pem"},
                            {versions, ['tlsv1.2', 'tlsv1.1']}
                            ]}
            ]}
].

----------------------------------------

TITLE: Implementing Topic Exchange Message Reception in Swift
DESCRIPTION: Function to receive log messages from a topic exchange. Creates a connection, declares an exclusive queue, binds to the topic exchange with specified routing keys, and handles incoming messages.

LANGUAGE: swift
CODE:
func receiveLogsTopic(_ routingKeys: [Any]) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let x = ch.topic("topic_logs")
    let q = ch.queue("", options: .exclusive)
    for routingKey: String in routingKeys {
        q.bind(x, routingKey: routingKey)
    }
    print("Waiting for logs.")
    q.subscribe({(_ message: RMQMessage) -> Void in
        print("\(message.routingKey):\(String(data: message.body,
                                              encoding: .utf8))")
    })
}

----------------------------------------

TITLE: Deleting a RabbitMQ User
DESCRIPTION: Deletes the specified user from the RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl delete_user janeway

----------------------------------------

TITLE: Creating Pod Disruption Budget for RabbitMQ
DESCRIPTION: YAML definition for creating a PodDisruptionBudget to limit simultaneous pod disruptions for a RabbitMQ cluster.

LANGUAGE: yaml
CODE:
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: pdb-rabbitmq
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: YOUR-RABBITMQ-CUSTOM-RESOURCE-NAME

----------------------------------------

TITLE: Enabling STOMP Plugin in RabbitMQ
DESCRIPTION: Command to enable the STOMP plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_stomp

----------------------------------------

TITLE: Setting Queue Federation Policy in RabbitMQ
DESCRIPTION: This snippet shows how to set a policy for queue federation. The policy named 'queue-federation' applies to queues with names starting with 'federated.' and configures them to use all declared federation upstreams.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy queue-federation "^federated\." \
    '{"federation-upstream-set":"all"}' \
    --priority 10 \
    --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy queue-federation '^federated\.' `
    '"{""federation-upstream-set":""all""}"' `
    --priority 10 `
    --apply-to queues

----------------------------------------

TITLE: Inspecting Page Cache Size
DESCRIPTION: Commands to inspect the kernel page cache size in non-containerized and containerized environments.

LANGUAGE: bash
CODE:
cat /proc/meminfo | grep -we "Cached"

LANGUAGE: bash
CODE:
cat /sys/fs/cgroup/memory/memory.stat
cat /sys/fs/cgroup/memory/memory.usage_in_bytes

----------------------------------------

TITLE: Importing CSS Modules and SVG Components in JSX
DESCRIPTION: This code snippet demonstrates the import statements for CSS modules and SVG components used in the RabbitMQ metadata store documentation page.

LANGUAGE: jsx
CODE:
import './index.module.css';
import diagramStyles from './diagram.module.css';
import MetadataStoreRole from './metadata-store-role.svg';

import KhepriLogo from '@site/static/img/khepri-logo.svg';

----------------------------------------

TITLE: Queue Declaration Commands
DESCRIPTION: Commands to declare source and target queues with dead letter configuration

LANGUAGE: zsh
CODE:
kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-source-queue \
    durable=true queue_type=quorum arguments='{"x-dead-letter-exchange" : "",
    "x-dead-letter-routing-key" : "my-target-queue" , "x-overflow" : "reject-publish"}'

kubectl exec my-rabbit-server-0 -c rabbitmq -- rabbitmqadmin declare queue name=my-target-queue \
    durable=true queue_type=classic

----------------------------------------

TITLE: Defining Properties Field in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the properties field in the AMQP 1.0 flow frame, which can carry application-specific link state properties.

LANGUAGE: xml
CODE:
<field name="properties" type="fields"/>

----------------------------------------

TITLE: RabbitMQ Federation Connection Log Output
DESCRIPTION: This snippet shows the expected log output when the RabbitMQ federation plugin successfully connects to remote brokers. It demonstrates the format of connection messages for both standard and SSL connections.

LANGUAGE: plaintext
CODE:
=INFO REPORT==== 22-Jun-2011::12:16:42 ===
Federation exchange 'stocks' in vhost '/' connected to newyork.mycompany.com:5672:/:stocks

=INFO REPORT==== 22-Jun-2011::12:16:43 ===
Federation exchange 'stocks' in vhost '/' connected to paris.mycompany.com:5671:/:stocks

----------------------------------------

TITLE: Checking Cluster Status with RabbitMQ CLI
DESCRIPTION: Command to check the cluster status and detect network partitions using the RabbitMQ diagnostics tool.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cluster_status

----------------------------------------

TITLE: Setting Statistics Collection Interval in RabbitMQ
DESCRIPTION: This snippet shows how to configure the statistics collection interval in RabbitMQ to 60 seconds, which can help reduce CPU and memory usage in environments with a large number of connections.

LANGUAGE: ini
CODE:
# sets the interval to 60 seconds
collect_statistics_interval = 60000

----------------------------------------

TITLE: Configuring OAuth 2 Scope Aliases in RabbitMQ 3.10
DESCRIPTION: Configuration example for the OAuth 2 plugin that maps JWT token scopes to RabbitMQ permissions. This allows integration with identity providers that use scopes as role names for client identity.

LANGUAGE: erlang
CODE:
{rabbitmq_auth_backend_oauth2, [
    {resource_server_id, <<"rabbitmq-122">>},
    {extra_scopes_source, <<"claims">>},
    {scope_aliases, #{
      <<"megacorp.roles.122">>      => [
        <<"rabbitmq.read:vhost-122/*">>,
        <<"rabbitmq.write:vhost-122/*">>,
        <<"rabbitmq.configure:vhost-122/*">>
      ],
      <<"megacorp.roles.188">>     => [
        <<"rabbitmq.read:vhost-188/*">>,
        <<"rabbitmq.configure:vhost-188/*">>
       ],
      <<"megacorp.roles.read-only">> => [<<"rabbitmq.read:*/*">>]
    }}
    %% ...

----------------------------------------

TITLE: Checking Cluster Status with RabbitMQ CLI
DESCRIPTION: Command to check the cluster status and detect network partitions using the RabbitMQ diagnostics tool.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cluster_status

----------------------------------------

TITLE: Overriding Feature Flags on Initial Startup
DESCRIPTION: Use environment variables or configuration settings to override the list of feature flags to enable on initial startup.

LANGUAGE: bash
CODE:
RABBITMQ_FEATURE_FLAGS="delete_ra_cluster_mqtt_node,virtual_host_metadata,stream_single_active_consumer,quorum_queue,classic_mirrored_queue_version,rabbit_mqtt_qos0_queue,implicit_default_bindings,empty_basic_get_metric,'rabbitmq_4.0.0',message_containers,user_limits,queue_master_locator,detailed_queues_endpoint,stream_sac_coordinator_unblock_group,stream_update_config_command,stream_queue,stream_filtering,rabbit_exchange_type_local_random,quorum_queue_non_voters,tracking_records_in_ets,direct_exchange_routing_v2,amqp_address_v1,transient_nonexcl_queues,message_containers_deaths_v2,classic_queue_mirroring,management_metrics_collection,maintenance_mode_status,listener_records_in_ets,feature_flags_v2,global_qos,classic_queue_type_delivery_support,mqtt_v5,ram_node_type,drop_unroutable_metric,restart_streams"

----------------------------------------

TITLE: Configuring Conditional Definition Import at Boot in INI
DESCRIPTION: Shows how to configure RabbitMQ to only import definitions if the file contents have changed. This optimization is useful for environments where the definition file rarely changes.

LANGUAGE: ini
CODE:
definitions.skip_if_unchanged = true

definitions.import_backend = local_filesystem
definitions.local.path = /path/to/definitions/defs.json

----------------------------------------

TITLE: Applying RabbitMQ Cluster Definition
DESCRIPTION: Command to apply the RabbitmqCluster resource definition in Kubernetes.

LANGUAGE: bash
CODE:
kubectl apply -f definition.yaml

----------------------------------------

TITLE: Setting RabbitMQ Global Parameter
DESCRIPTION: Sets a global runtime parameter.

LANGUAGE: bash
CODE:
rabbitmqctl set_global_parameter mqtt_default_vhosts '{"O=client,CN=guest":"/"}'

----------------------------------------

TITLE: Negatively Acknowledging Deliveries in C#
DESCRIPTION: Examples of how to negatively acknowledge deliveries using the RabbitMQ .NET client. Demonstrates both discarding and requeueing messages.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // negatively acknowledge, the message will
                    // be discarded
                    channel.BasicReject(ea.DeliveryTag, false);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // requeue the delivery
                    channel.BasicReject(ea.DeliveryTag, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Setting RabbitMQ User Limits
DESCRIPTION: Sets limits for a specific user.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits limited_user '{"max-connections": 64}'

----------------------------------------

TITLE: Configuring TCP Buffer Size for AMQP in RabbitMQ
DESCRIPTION: This example sets TCP buffer sizes for AMQP 0-9-1 connections to 192 KiB and configures other TCP options.

LANGUAGE: ini
CODE:
tcp_listen_options.backlog = 128
tcp_listen_options.nodelay = true
tcp_listen_options.linger.on      = true
tcp_listen_options.linger.timeout = 0
tcp_listen_options.sndbuf = 196608
tcp_listen_options.recbuf = 196608

----------------------------------------

TITLE: Setting Statistics Collection Interval in RabbitMQ
DESCRIPTION: This snippet shows how to configure the statistics collection interval in RabbitMQ to 60 seconds, which can help reduce CPU and memory usage in environments with a large number of connections.

LANGUAGE: ini
CODE:
# sets the interval to 60 seconds
collect_statistics_interval = 60000

----------------------------------------

TITLE: Checking Stream Status in RabbitMQ
DESCRIPTION: Displays the status of a specified stream in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams stream_status --vhost "a-vhost" "a-stream"

----------------------------------------

TITLE: Configuring Federation Upstream in Bash
DESCRIPTION: Command to configure a federation upstream named 'origin' pointing to a remote RabbitMQ host using the RabbitMQ CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

----------------------------------------

TITLE: Configuring Dead Letter Exchange in Java
DESCRIPTION: Example of setting up a Dead Letter Exchange (DLX) for a queue using Java client.

LANGUAGE: java
CODE:
channel.exchangeDeclare("some.exchange.name", "direct");

Map<String, Object> args = new HashMap<String, Object>();
args.put("x-dead-letter-exchange", "some.exchange.name");
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Enabling RabbitMQ Delayed Message Plugin
DESCRIPTION: This command enables the RabbitMQ Delayed Message Plugin after it has been installed in the RabbitMQ plugin folder.

LANGUAGE: shell
CODE:
rabbitmq-plugins enable rabbitmq_delayed_message_exchange

----------------------------------------

TITLE: Defining a Simple RabbitMQ Cluster
DESCRIPTION: YAML definition for creating a basic RabbitMQ cluster named 'hello-world' using the RabbitmqCluster custom resource. This is the simplest configuration with only the cluster name specified.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
	name: hello-world

----------------------------------------

TITLE: Initializing STOMP WebSocket Connection
DESCRIPTION: JavaScript code showing how to include the STOMP library and establish a WebSocket connection.

LANGUAGE: html
CODE:
<!-- include the client library -->
<script src="stomp.js"></script>

LANGUAGE: javascript
CODE:
var ws = new WebSocket('ws://127.0.0.1:15674/ws');
var client = Stomp.over(ws);

----------------------------------------

TITLE: Creating Multiple Bindings for Log Severities in RabbitMQ with C#
DESCRIPTION: This code creates multiple bindings for different log severities, allowing the consumer to subscribe to specific types of log messages in a RabbitMQ-based logging system.

LANGUAGE: csharp
CODE:
if (args.Length < 1)
{
    Console.Error.WriteLine("Usage: {0} [info] [warning] [error]", Environment.GetCommandLineArgs()[0]);
    Console.WriteLine(" Press [enter] to exit.");
    Console.ReadLine();
    Environment.ExitCode = 1;
    return;
}

foreach (var severity in args)
{
    await channel.QueueBindAsync(exchange: "direct_logs",
                                queue: queueName,
                                routingKey: severity);
}

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin CORS
DESCRIPTION: Configuration snippet to set CORS policies for the management plugin.

LANGUAGE: ini
CODE:
management.cors.allow_origins.1 = https://origin1.org
management.cors.allow_origins.2 = https://origin2.org
management.cors.max_age         = 3600

----------------------------------------

TITLE: Clearing Federation Policy
DESCRIPTION: Command to remove a federation policy by its name, which will deactivate federation for the matching exchanges.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy exchange-federation

----------------------------------------

TITLE: Initializing STOMP WebSocket Client in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a STOMP client using SockJS for WebSocket communication with RabbitMQ. It includes the necessary script imports and client setup code.

LANGUAGE: html
CODE:
<script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>
<script src="stomp.js"></script>
<script>
   WebSocketStompMock = SockJS;

    var client = Stomp.client('http://127.0.0.1:55674/stomp');
    [...]


----------------------------------------

TITLE: Log Tail Stream
DESCRIPTION: Streams logs from a running RabbitMQ node for specified duration

LANGUAGE: bash
CODE:
rabbitmq-diagnostics log_tail_stream --duration 60

----------------------------------------

TITLE: Using CLI Tools with Remote Nodes
DESCRIPTION: Use the '--node' option to specify a remote node when running CLI commands.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status -n rabbit@remote-host.local

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Port
DESCRIPTION: Configuration snippet to set the management plugin's HTTP port.

LANGUAGE: ini
CODE:
management.tcp.port = 15672

----------------------------------------

TITLE: Consuming Messages from RabbitMQ Stream in Go
DESCRIPTION: Sets up a consumer to read messages from the stream, starting from the beginning and stopping at the marker message.

LANGUAGE: go
CODE:
var firstOffset int64 = -1
var lastOffset atomic.Int64
ch := make(chan bool)
messagesHandler := func(consumerContext stream.ConsumerContext, message *amqp.Message) {
    if atomic.CompareAndSwapInt64(&firstOffset, -1, consumerContext.Consumer.GetOffset()) {
        fmt.Println("First message received.")
    }
    if string(message.GetData()) == "marker" {
        lastOffset.Store(consumerContext.Consumer.GetOffset())
        _ = consumerContext.Consumer.Close()
        ch <- true
    }
}

offsetSpecification := stream.OffsetSpecification{}.First()
_, _ = env.NewConsumer(streamName, messagesHandler,
    stream.NewConsumerOptions().
        SetOffset(offsetSpecification))

fmt.Println("Started consuming...")
_ = <-ch

fmt.Printf("Done consuming, first offset %d, last offset %d.\n", firstOffset, lastOffset.Load())

----------------------------------------

TITLE: Setting Federation Upstream Parameters
DESCRIPTION: Commands to define a federation upstream with connection details and expiry time

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqp://target.hostname","expires":3600000}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream my-upstream `
    '"{""uri"":""amqp://target.hostname"",""expires"":3600000}"'

----------------------------------------

TITLE: Rebalancing Queue Leaders in RabbitMQ
DESCRIPTION: This command rebalances all queue and stream leader replicas across the cluster nodes, helping to distribute the load evenly after an upgrade.

LANGUAGE: bash
CODE:
rabbitmq-queues rebalance all

LANGUAGE: powershell
CODE:
rabbitmq-queues.bat rebalance all

----------------------------------------

TITLE: Inspecting Linux Readahead Value in Bash
DESCRIPTION: Bash command to check the current readahead value for a block device on Linux.

LANGUAGE: bash
CODE:
sudo blockdev --getra /dev/sda

----------------------------------------

TITLE: Retrieving RabbitMQ Node Data Directory Path
DESCRIPTION: This command retrieves the path of the RabbitMQ node's data directory using the rabbitmq-diagnostics tool.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status | grep -A 2 -B 2 "Node data directory"

----------------------------------------

TITLE: Displaying RabbitMQ Status
DESCRIPTION: Displays broker status information including running applications, versions, and resource usage.

LANGUAGE: bash
CODE:
rabbitmqctl status

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Port
DESCRIPTION: Configuration snippet to set the management plugin's HTTP port.

LANGUAGE: ini
CODE:
management.tcp.port = 15672

----------------------------------------

TITLE: Rich Authorization Request Configuration
DESCRIPTION: Example of Rich Authorization Request JWT token format for fine-grained permissions

LANGUAGE: javascript
CODE:
{
  "authorization_details": [
    {
      "type" : "rabbitmq",
      "locations": ["cluster:finance/vhost:production-*"],
      "actions": [ "read", "write", "configure"  ]
    }
  ]
}

----------------------------------------

TITLE: Setting RabbitMQ Policy
DESCRIPTION: Sets a policy for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me ^amq. '{"federation-upstream-set":"all"}'

----------------------------------------

TITLE: Setting Queue Expiration Policy
DESCRIPTION: Commands to set a queue expiration policy of 30 minutes for all queues using rabbitmqctl on Unix and Windows systems

LANGUAGE: bash
CODE:
rabbitmqctl set_policy expiry ".*" '{"expires":1800000}' --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy expiry ".*" "{""expires"":1800000}" --apply-to queues

----------------------------------------

TITLE: Clearing RabbitMQ User Limits
DESCRIPTION: Clears limits for a specific user.

LANGUAGE: bash
CODE:
rabbitmqctl clear_user_limits limited_user 'max-connections'

----------------------------------------

TITLE: Configuring Absolute Memory Threshold in RabbitMQ
DESCRIPTION: Examples of setting absolute memory limits using different memory units in RabbitMQ configuration.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1073741824

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1024MiB

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 4Gi

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1Ti

----------------------------------------

TITLE: Enabling RabbitMQ Web MQTT Plugin
DESCRIPTION: Command to enable the RabbitMQ Web MQTT plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_mqtt

----------------------------------------

TITLE: Listing RabbitMQ Plugins
DESCRIPTION: Commands to list all plugins with different verbosity levels and filtering options

LANGUAGE: bash
CODE:
rabbitmq-plugins list

LANGUAGE: bash
CODE:
rabbitmq-plugins list -v

LANGUAGE: bash
CODE:
rabbitmq-plugins list -v management

LANGUAGE: bash
CODE:
rabbitmq-plugins list -e rabbit

----------------------------------------

TITLE: Configuring RabbitMQ for Entra ID OAuth 2.0 Authentication
DESCRIPTION: This configuration enables Entra ID as the OAuth 2.0 authentication backend for RabbitMQ Management UI. It specifies the auth backends, OAuth settings, and JWT verification details.

LANGUAGE: ini
CODE:
auth_backends.1 = rabbit_auth_backend_oauth2
auth_backends.2 = rabbit_auth_backend_internal

management.oauth_enabled = true
management.oauth_client_id = {PUT YOUR AZURE AD APPLICATION ID}
management.oauth_provider_url = https://login.microsoftonline.com/{YOUR_ENTRA_ID_TENANT_ID}

auth_oauth2.resource_server_id = {PUT YOUR AZURE AD APPLICATION ID}
auth_oauth2.additional_scopes_key = roles
auth_oauth2.jwks_url = {PUT YOUR ENTRA ID JWKS URI VALUE}

----------------------------------------

TITLE: Net Ticktime Configuration in Erlang
DESCRIPTION: Advanced configuration example showing how to modify the net_ticktime setting to 120 seconds using the advanced.config file format.

LANGUAGE: erlang
CODE:
[
  {kernel, [{net_ticktime,  120}]}
].

----------------------------------------

TITLE: Linux TLS Configuration Environment Setup
DESCRIPTION: Environment configuration file content for setting up TLS-enabled inter-node communication using individual flags approach on Linux systems.

LANGUAGE: bash
CODE:
ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-9.4/ebin"

SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \
  -ssl_dist_opt server_password password \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

RABBITMQ_CTL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \
  -ssl_dist_opt server_password password \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

----------------------------------------

TITLE: Configuring MacOS Application Firewall for Erlang Runtime
DESCRIPTION: These commands show how to configure the MacOS Application Firewall to allow Erlang runtime processes to bind to ports and accept connections.

LANGUAGE: bash
CODE:
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/bin/erl

LANGUAGE: bash
CODE:
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp /usr/local/Cellar/erlang/{version}/lib/erlang/erts-{erts version}/bin/beam.smp

LANGUAGE: bash
CODE:
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --help

----------------------------------------

TITLE: Installing RabbitMQ Windows Service
DESCRIPTION: Command to install RabbitMQ as a Windows service for production use.

LANGUAGE: PowerShell
CODE:
rabbitmq-service.bat install

----------------------------------------

TITLE: Creating MQTT User
DESCRIPTION: Commands to create a new user for MQTT connections with appropriate permissions

LANGUAGE: bash
CODE:
rabbitmqctl add_user mqtt-test mqtt-test
rabbitmqctl set_permissions -p "/" mqtt-test ".*" ".*" ".*"
rabbitmqctl set_user_tags mqtt-test management

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Entra ID Configuration
DESCRIPTION: This bash command starts a Docker container named 'rabbitmq' with RabbitMQ Management UI/API and HTTPS enabled, configured to use Entra ID as the OAuth 2.0 authentication backend.

LANGUAGE: bash
CODE:
export MODE=entra
make start-rabbitmq

----------------------------------------

TITLE: Establishing RabbitMQ Connection in PHP
DESCRIPTION: Creating a connection and channel to RabbitMQ server using default credentials

LANGUAGE: php
CODE:
$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

----------------------------------------

TITLE: Publishing Messages to RabbitMQ Stream
DESCRIPTION: Creates a publisher and sends 100 messages to the stream, with the last message marked as a special 'marker' message.

LANGUAGE: javascript
CODE:
console.log("Creating the publisher...");
const publisher = await client.declarePublisher({ stream: streamName });

const messageCount = 100;
console.log(`Publishing ${messageCount} messages`);
for (let i = 0; i < messageCount; i++) {
  const body = i === messageCount - 1 ? "marker" : `hello ${i}`;
  await publisher.send(Buffer.from(body));
}

----------------------------------------

TITLE: Adapting Testsuites for Feature Flags
DESCRIPTION: Demonstrates how to adapt testsuites to handle feature flags in mixed-version cluster testing.

LANGUAGE: erlang
CODE:
init_per_testcase(Testcase, Config) ->
    % (...)

    % 1.
    % The broker or cluster is started: we rely on this to query feature
    % flags.
    Config1 = rabbit_ct_helpers:run_steps(
                Config,
                rabbit_ct_broker_helpers:setup_steps() ++
                rabbit_ct_client_helpers:setup_steps()),

    % 2.
    % We try to enable the `quorum_queue` feature flag. The helper is
    % responsible for checking if the feature flag is supported and
    % enabling it.
    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of
        ok ->
            % The feature flag is enabled at this point. The setup can
            % continue to play with `Config1` and the cluster.
            Config1;
        Skip ->
            % The feature flag is unavailable/unsupported. The setup
            % calls `end_per_testcase()` to stop the node/cluster and
            % skips the testcase.
            end_per_testcase(Testcase, Config1),
            Skip
    end.

----------------------------------------

TITLE: Implementing Worker Consumer with Task Processing
DESCRIPTION: Code for worker.js that consumes messages from the work queue and simulates processing time. Includes message acknowledgment and handles task duration based on message content.

LANGUAGE: javascript
CODE:
var queue = 'task_queue';

channel.assertQueue(queue, {
  durable: true
});

channel.consume(queue, function(msg) {
  var secs = msg.content.toString().split('.').length - 1;

  console.log(" [x] Received %s", msg.content.toString());
  setTimeout(function() {
    console.log(" [x] Done");
  }, secs * 1000);
}, {
  noAck: true
});

----------------------------------------

TITLE: Setting Erlang Cookie for CLI Tools
DESCRIPTION: Use the '--erlang-cookie' option to specify the Erlang cookie for CLI tools.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status --erlang-cookie "cookie-value"

----------------------------------------

TITLE: Configuring Node.js Package Dependencies for RabbitMQ
DESCRIPTION: Package.json configuration specifying required dependencies for the RabbitMQ Node.js integration, including the AMQP client library and sanitizer.

LANGUAGE: json
CODE:
{
  "name":"node-srs-demo",
  "author": "Michael Bridgen",
  "version":"0.0.2",
  "dependencies":{
    "amqp":">= 0.1.0",
    "sanitizer": "*"
  }
}

----------------------------------------

TITLE: Checking Erlang Cookie Sources
DESCRIPTION: Shows how to use the rabbitmq-diagnostics command to check Erlang cookie file sources and settings.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics erlang_cookie_sources

----------------------------------------

TITLE: Updating RabbitMQ Man Pages using Shell Script
DESCRIPTION: This shell command runs a script to update HTML man pages for RabbitMQ. It requires the path to the rabbitmq-server repository as an argument.

LANGUAGE: sh
CODE:
./website/docs/man/update-manpages.sh /path/to/rabbitmq-server

----------------------------------------

TITLE: Complete Log Message Producer Implementation
DESCRIPTION: Full implementation of a producer that connects to RabbitMQ and emits log messages to a fanout exchange.

LANGUAGE: objectivec
CODE:
RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
[conn start];

id<RMQChannel> ch = [conn createChannel];
RMQExchange *x = [ch fanout:@"logs"];

NSString *msg = @"Hello World!";

[x publish:[msg dataUsingEncoding:NSUTF8StringEncoding]];
NSLog(@"Sent %@", msg);

[conn close];

----------------------------------------

TITLE: Importing RabbitMQ Signing Key via Key Server
DESCRIPTION: Imports the RabbitMQ signing key from keys.openpgp.org using GPG.

LANGUAGE: bash
CODE:
gpg --keyserver "hkps://keys.openpgp.org" --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"

----------------------------------------

TITLE: Detecting Network Partitions using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates how to use the rabbitmq-diagnostics command to check for network partitions in a RabbitMQ cluster.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cluster_status

----------------------------------------

TITLE: Creating a Direct Exchange in Ruby
DESCRIPTION: Shows how to create a direct exchange for the logging system.

LANGUAGE: ruby
CODE:
channel.direct('logs');

----------------------------------------

TITLE: Full LDAP Configuration Example
DESCRIPTION: Comprehensive example showing various LDAP configuration options in Erlang format

LANGUAGE: erlang
CODE:
[
  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},
  {rabbitmq_auth_backend_ldap,
   [ {servers, ["my-ldap-server"]},
     {user_dn_pattern, "cn=${username},ou=People,dc=example,dc=com"},
     {use_ssl, false},
     {port, 389},
     {log, false},
     {vhost_access_query, {in_group,
                          "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}}
   ]
  }
].

----------------------------------------

TITLE: Memory Usage Analysis
DESCRIPTION: Command to display node memory usage breakdown by category

LANGUAGE: bash
CODE:
rabbitmq-diagnostics memory_breakdown --unit gigabytes

----------------------------------------

TITLE: Multiple Resource Servers Configuration
DESCRIPTION: Configuration example for multiple OAuth 2.0 resources with different providers

LANGUAGE: ini
CODE:
auth_oauth2.scope_prefix = rabbitmq.

auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.1.oauth_provider_id = prod
auth_oauth2.resource_servers.2.id = rabbit_dev
auth_oauth2.resource_servers.2.oauth_provider_id = dev
auth_oauth2.resource_servers.2.scope_prefix = dev-rabbitmq.

auth_oauth2.oauth_providers.prod.issuer = https://rabbit_prod:8080
auth_oauth2.oauth_providers.prod.https.cacertfile = /opts/certs/prod.pem
auth_oauth2.oauth_providers.dev.issuer = https://rabbit_dev:8080
auth_oauth2.oauth_providers.dev.https.cacertfile = /opts/certs/dev.pem

----------------------------------------

TITLE: Configuring Deprecated Feature State - Enable Feature
DESCRIPTION: Configuration example showing how to re-enable a deprecated feature that is denied by default.

LANGUAGE: ini
CODE:
# Permit a deprecated feature that is denied by default.
deprecated_features.permit.some_deprecated_feature = true

----------------------------------------

TITLE: Configuring Operator Log Level
DESCRIPTION: YAML snippet showing how to configure the log level for the Messaging Topology Operator.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-topology-operator
  namespace: rabbitmq-system
spec:
  template:
    spec:
      containers:
      - args:
        - --zap-log-level=debug
        command:
        - /manager

----------------------------------------

TITLE: Configuring STOMP TCP Listener Port
DESCRIPTION: Configuration example for changing the default STOMP TCP listener port to 12345.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Updating RabbitMQ Man Pages using Shell Script
DESCRIPTION: This shell command runs a script to update HTML man pages for RabbitMQ. It requires the path to the rabbitmq-server repository as an argument.

LANGUAGE: sh
CODE:
./website/docs/man/update-manpages.sh /path/to/rabbitmq-server

----------------------------------------

TITLE: Sample Entra ID Access Token for RabbitMQ
DESCRIPTION: This JSON snippet shows an example of an access token issued by Entra ID for RabbitMQ authentication. It includes claims such as audience, issuer, roles, and scopes.

LANGUAGE: javascript
CODE:
{
  "aud": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "iss": "https://sts.windows.net/1ffc6121-590e-4aa5-bf47-c348674069cb/",
  "iat": 1655740039,
  "nbf": 1655740039,
  "exp": 1655744211,
  "acr": "1",
  "aio": "AUQAu/8TAAAAjvwucwL4nZe83vNZvg6A7sAPscI9zsGvRs8EuT7aVhubpmhRnxJ+X7nbkISoP5eBBMxoi2yiCclnH2Ocjjzsqw==",
  "amr": [
    "wia"
  ],
  "appid": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "appidacr": "1",
  "email": "baptiste.daroit@company.com",
  "idp": "https://sts.windows.net/b3f4f7c2-72ce-4192-aba4-d6c7719b5766/",
  "in_corp": "true",
  "ipaddr": "xxx.xxx.xxx.xxx",
  "name": "Baptiste DA ROIT",
  "oid": "cf2df3b4-03df-4e1e-b5c0-f232932aaead",
  "rh": "0.AR8AgCG80x7L90C1mhVBBXQzQjgoklctsdBMtgYVWFwc4tgfAMQ.",
  "roles": [
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.tag:monitoring",
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.configure:*/*"
  ],
  "scp": "User.Read",
  "sub": "6aBzW3a1FOTTrnlZEuC1SmwG0sRjVgQU49DvrYK6Rqg",
  "tid": "1ffc6121-590e-4aa5-bf47-c348674069cb",
  "unique_name": "baptiste.daroit@company.com",
  "uti": "QHqwThTqQEK9iMdnRuD_AA",
  "ver": "1.0"
}

----------------------------------------

TITLE: Enabling MQTT Plugin
DESCRIPTION: Enables the MQTT plugin on a RabbitMQ node using rabbitmq-plugins command

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_mqtt

----------------------------------------

TITLE: Detecting Network Partitions using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates how to use the rabbitmq-diagnostics command to check for network partitions in a RabbitMQ cluster.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cluster_status

----------------------------------------

TITLE: Configuring Statistics Collection Interval in RabbitMQ
DESCRIPTION: This configuration sets the statistics collection interval to 60 seconds to reduce CPU footprint with a large number of connections.

LANGUAGE: ini
CODE:
collect_statistics_interval = 60000

----------------------------------------

TITLE: Starting RabbitMQ Server in Foreground
DESCRIPTION: Command to start RabbitMQ server in foreground mode with configuration file specification.

LANGUAGE: bash
CODE:
CONF_ENV_FILE="/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf" /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server

----------------------------------------

TITLE: Inspecting Queue Length Limits with rabbitmqctl
DESCRIPTION: Uses rabbitmqctl to list queues and display their arguments and applied policies, which can show queue length limits.

LANGUAGE: bash
CODE:
rabbitmqctl list_queues name durable arguments policy --formatter=pretty_table --silent

----------------------------------------

TITLE: Creating Stream Message with Properties in Java
DESCRIPTION: Example of creating a stream message with properties like creation time and message ID using the RabbitMQ Stream Java client.

LANGUAGE: java
CODE:
Message message = producer.messageBuilder()
  .properties()
    .creationTime(System.currentTimeMillis()) // Unix time, with a precision of milliseconds
    .messageId(i) // long, string, binary, or UUID
  .messageBuilder()
    .addData("hello world".getBytes(StandardCharsets.UTF_8))
  .build();

----------------------------------------

TITLE: Publishing to Named Exchange in Ruby
DESCRIPTION: Demonstrates how to publish messages to a specifically named exchange instead of the default exchange.

LANGUAGE: ruby
CODE:
exchange = channel.fanout('logs')
exchange.publish(message)

----------------------------------------

TITLE: RabbitMQ Environment Configuration for Windows
DESCRIPTION: Windows-specific environment configuration using rabbitmq-env-conf.bat with TLS settings.

LANGUAGE: powershell
CODE:
@echo off
set SSL_PATH="C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin"

set SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

set CTL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

----------------------------------------

TITLE: Configuring Relative Memory Threshold in RabbitMQ
DESCRIPTION: Example of setting relative memory threshold as a fraction of total available RAM.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.relative = 0.6

----------------------------------------

TITLE: Updating Virtual Host Metadata Using RabbitMQ HTTP API
DESCRIPTION: This snippet demonstrates updating the metadata of an existing virtual host using the RabbitMQ HTTP API and curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/qa1 \
                           -H "content-type: application/json" \
                           --data-raw '{"description": "QA environment for issue 1662", "tags": "qa,project-a,qa-1662", "default_queue_type": "quorum"}'

----------------------------------------

TITLE: RabbitMQ Environment Configuration for Windows
DESCRIPTION: Windows-specific environment configuration using rabbitmq-env-conf.bat with TLS settings.

LANGUAGE: powershell
CODE:
@echo off
set SSL_PATH="C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin"

set SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

set CTL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

----------------------------------------

TITLE: Checking Erlang Cookie Sources
DESCRIPTION: Use the 'erlang_cookie_sources' command to get information about the Erlang cookie file used by CLI tools.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics erlang_cookie_sources

----------------------------------------

TITLE: Setting Multiple User Limits using rabbitmqctl in Bash
DESCRIPTION: This command sets both maximum connections (10) and maximum channels (20) limits for the guest user using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits guest '{"max-connections": 10, "max-channels": 20}'

----------------------------------------

TITLE: Setting Memory Threshold via rabbitmqctl Commands
DESCRIPTION: CLI commands for updating memory thresholds on a running RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0.7

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark absolute "4G"

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0

----------------------------------------

TITLE: Listing Stream Group Consumers in RabbitMQ
DESCRIPTION: Lists consumers of a specific stream consumer group in a vhost with specified information items.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Stream Plugin
DESCRIPTION: These shell commands start a RabbitMQ Docker container and enable the stream plugin, which is necessary for using RabbitMQ Streams.

LANGUAGE: shell
CODE:
docker run -it --rm --name rabbitmq -p 5552:5552 \
    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \
    rabbitmq:3.9

LANGUAGE: shell
CODE:
docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Configuring Consumer for Super Stream with Single Active Consumer in Java
DESCRIPTION: This code shows how to set up a consumer for a super stream named 'invoices' with single active consumer enabled. It demonstrates the configuration for consuming from a super stream while maintaining message order within partitions.

LANGUAGE: java
CODE:
Consumer consumer = environment.consumerBuilder()
    .superStream("invoices") // set the super stream name 
    .name("application-1") // set the consumer name (mandatory) 
    .singleActiveConsumer() // enable single active consumer
    .messageHandler((context, message) -> {
        // message processing
    })
    .build();

----------------------------------------

TITLE: Disabling Scheduler Busy Waiting for RabbitMQ
DESCRIPTION: Turns off speculative busy waiting for Erlang VM schedulers, which can reduce CPU usage on systems with limited resources. This is done by setting multiple flags via RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+sbwt none +sbwtdcpu none +sbwtdio none"

----------------------------------------

TITLE: Setting RabbitMQ User Tags
DESCRIPTION: Sets tags for a user in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_tags janeway administrator

----------------------------------------

TITLE: Setting RabbitMQ User Tags
DESCRIPTION: Sets tags for a user in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_tags janeway administrator

----------------------------------------

TITLE: Configuring Plugin Version Requirements in Erlang
DESCRIPTION: Example of specifying broker version requirements in a plugin's application configuration. This ensures compatibility with specific RabbitMQ versions.

LANGUAGE: erlang
CODE:
{application, my_plugin,[
    %% ...
    {broker_version_requirements, ["3.11.15", "3.10.22"]}
]}

----------------------------------------

TITLE: Complete Worker Implementation
DESCRIPTION: Full implementation of the worker including connection handling, queue declaration, QoS settings, and message processing with acknowledgments.

LANGUAGE: elixir
CODE:
defmodule Worker do
  def wait_for_messages(channel) do
    receive do
      {:basic_deliver, payload, meta} ->
        IO.puts " [x] Received #{payload}"
        payload
        |> to_char_list
        |> Enum.count(fn x -> x == ?. end)
        |> Kernel.*(1000)
        |> :timer.sleep
        IO.puts " [x] Done."
        AMQP.Basic.ack(channel, meta.delivery_tag)

        wait_for_messages(channel)
    end
  end
end

{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

AMQP.Queue.declare(channel, "task_queue", durable: true)
AMQP.Basic.qos(channel, prefetch_count: 1)

AMQP.Basic.consume(channel, "task_queue")
IO.puts " [*] Waiting for messages. To exit press CTRL+C, CTRL+C"

Worker.wait_for_messages(channel)

----------------------------------------

TITLE: Configuring STOMP TLS Support
DESCRIPTION: Configuration example for enabling TLS support for STOMP connections including certificate paths and verification options.

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/tls/ca_certificate.pem
ssl_options.certfile   = /path/to/tls/server_certificate.pem
ssl_options.keyfile    = /path/to/tls/server_key.pem
ssl_options.verify     =  verify_peer
ssl_options.fail_if_no_peer_cert = true

stomp.listeners.tcp.1 = 61613
stomp.listeners.ssl.1 = 61614

----------------------------------------

TITLE: Port Connectivity Check
DESCRIPTION: Command to verify port connectivity for RabbitMQ listeners

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_port_connectivity

----------------------------------------

TITLE: Defining RabbitMQ Federation
DESCRIPTION: YAML definition for a RabbitMQ Federation resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Federation
metadata:
  name: federation-example
  namespace: rabbitmq-system
spec:
  name: "origin"
  uriSecret:
    name: {secret-name}
  ackMode: "on-confirm"
  rabbitmqClusterReference:
    name: example-rabbit

----------------------------------------

TITLE: Listing RabbitMQ Policies
DESCRIPTION: Lists all policies for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_policies

----------------------------------------

TITLE: Managing RabbitMQ Clusters
DESCRIPTION: Collection of commands for managing RabbitMQ clusters including getting cluster info, listing clusters, and deletion

LANGUAGE: bash
CODE:
kubectl rabbitmq get INSTANCE

LANGUAGE: bash
CODE:
kubectl rabbitmq list

LANGUAGE: bash
CODE:
kubectl rabbitmq delete INSTANCE

----------------------------------------

TITLE: Logging Disk Space Monitoring Activation in RabbitMQ
DESCRIPTION: This snippet shows the log entries generated when RabbitMQ enables free disk space monitoring. It indicates the activation of monitoring and the set disk free limit.

LANGUAGE: ini
CODE:
2019-04-01 12:02:11.564 [info] <0.329.0> Enabling free disk space monitoring
2019-04-01 12:02:11.564 [info] <0.329.0> Disk free limit set to 950MB

----------------------------------------

TITLE: Declaring a RabbitMQ Stream with Custom Arguments
DESCRIPTION: Demonstrates how to declare a stream with custom arguments like maximum size and segment size using the Java client.

LANGUAGE: java
CODE:
Map<String, Object> arguments = new HashMap<>();
arguments.put("x-queue-type", "stream");
arguments.put("x-max-length-bytes", 20_000_000_000); // maximum stream size: 20 GB
arguments.put("x-stream-max-segment-size-bytes", 100_000_000); // size of segment files: 100 MB
channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  arguments
);

----------------------------------------

TITLE: Setting Memory Threshold via rabbitmqctl Commands
DESCRIPTION: CLI commands for updating memory thresholds on a running RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0.7

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark absolute "4G"

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0

----------------------------------------

TITLE: Configuring STOMP TCP Listener Port
DESCRIPTION: Example configuration to change the STOMP listener port to 12345.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Forgetting a RabbitMQ Cluster Node
DESCRIPTION: Removes a cluster node remotely. The node being removed must be offline.

LANGUAGE: bash
CODE:
rabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer

----------------------------------------

TITLE: Limiting Number of Channels per Connection in RabbitMQ
DESCRIPTION: This configuration limits the maximum number of channels that can be opened on a single connection to 16.

LANGUAGE: ini
CODE:
channel_max = 16

----------------------------------------

TITLE: Managing RabbitMQ Service
DESCRIPTION: Commands for starting, stopping, and managing the RabbitMQ service using brew services and direct CLI tools.

LANGUAGE: bash
CODE:
brew services start rabbitmq
/opt/homebrew/sbin/rabbitmqctl enable_feature_flag all
brew services stop rabbitmq
/opt/homebrew/sbin/rabbitmqctl shutdown

----------------------------------------

TITLE: Setting Erlang Distribution Port in Windows Environment
DESCRIPTION: This snippet demonstrates how to set a custom Erlang distribution port for RabbitMQ on Windows. It involves creating a configuration file and specifying the desired port number.

LANGUAGE: PowerShell
CODE:
set DIST_PORT=44556

----------------------------------------

TITLE: Prometheus Metrics Output - Detailed Auth Attempts
DESCRIPTION: Extended Prometheus metrics output including detailed authentication attempt information with source tracking enabled.

LANGUAGE: plaintext
CODE:
# TYPE rabbitmq_auth_attempts_total counter
# HELP rabbitmq_auth_attempts_total Total number of authorization attempts
rabbitmq_auth_attempts_total{protocol="amqp091"} 5
# TYPE rabbitmq_auth_attempts_succeeded_total counter
# HELP rabbitmq_auth_attempts_succeeded_total Total number of successful authentication attempts
rabbitmq_auth_attempts_succeeded_total{protocol="amqp091"} 0
# TYPE rabbitmq_auth_attempts_failed_total counter
# HELP rabbitmq_auth_attempts_failed_total Total number of failed authentication attempts
rabbitmq_auth_attempts_failed_total{protocol="amqp091"} 5
# TYPE rabbitmq_auth_attempts_detailed_total counter
# HELP rabbitmq_auth_attempts_detailed_total Total number of authorization attempts with source info
rabbitmq_auth_attempts_detailed_total{remote_address="::ffff:127.0.0.1",username="guest",protocol="amqp091"} 1
# TYPE rabbitmq_auth_attempts_detailed_succeeded_total counter
# HELP rabbitmq_auth_attempts_detailed_succeeded_total Total number of successful authorization attempts with source info
rabbitmq_auth_attempts_detailed_succeeded_total{remote_address="::ffff:127.0.0.1",username="guest",protocol="amqp091"} 0
# TYPE rabbitmq_auth_attempts_detailed_failed_total counter
# HELP rabbitmq_auth_attempts_detailed_failed_total Total number of failed authorization attempts with source info
rabbitmq_auth_attempts_detailed_failed_total{remote_address="::ffff:127.0.0.1",username="guest",protocol="amqp091"} 1

----------------------------------------

TITLE: Running Publish Rate Peak Test with PerfTest
DESCRIPTION: This command uses RabbitMQ PerfTest to simulate a scenario where the publish rate peak exceeds consumer capacity. It configures various parameters to model the increase and decrease in publish rates while maintaining a constant consumer processing time.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-ct -1 \
-c 1000 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
--producers 200 \
--consumers 200 \
--producer-random-start-delay 30 \
--consumer-latency 10000 \
-vr 100:300 \
-vr 102:60 -vr 104:60 -vr 106:60 -vr 108:60 -vr 110:60 -vr 112:60 -vr 114:60 -vr 116:60 -vr 118:60 -vr 120:60 \
-vr 122:60 -vr 124:60 -vr 126:60 -vr 128:60 -vr 130:60 -vr 132:60 -vr 134:60 -vr 136:60 -vr 138:60 -vr 140:60 \
-vr 142:60 -vr 144:60 -vr 146:60 -vr 148:60 -vr 150:60 \
-vr 148:60 -vr 146:60 -vr 144:60 -vr 142:60 -vr 140:60 -vr 138:60 -vr 136:60 -vr 134:60 -vr 132:60 -vr 130:60 \
-vr 128:60 -vr 126:60 -vr 124:60 -vr 122:60 -vr 120:60 -vr 118:60 -vr 116:60 -vr 114:60 -vr 112:60 -vr 110:60 \
-vr 108:60 -vr 106:60 -vr 104:60 -vr 102:60 -vr 100:60 \
-vr 100:3000

----------------------------------------

TITLE: Configuring Stream Maximum Frame Size
DESCRIPTION: Configuration to increase the maximum frame size for the Stream protocol.

LANGUAGE: ini
CODE:
stream.frame_max = 2097152

----------------------------------------

TITLE: Listing Cipher Suites
DESCRIPTION: Example of using the cipher_suites command to list all available cipher suites in OpenSSL format.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cipher_suites --format openssl --all

----------------------------------------

TITLE: Setting User Limits via HTTP API Endpoint
DESCRIPTION: This snippet shows the HTTP API endpoint for setting user limits. It uses a PUT request to the specified URL.

LANGUAGE: ini
CODE:
PUT /api/user-limits/{username}/{limit}

----------------------------------------

TITLE: Configuring Topic Exchange and Bindings in Spring AMQP
DESCRIPTION: Configuration class that sets up the topic exchange, anonymous queues, and bindings with wildcard patterns. Defines separate profiles for sender and receiver components.

LANGUAGE: java
CODE:
import org.springframework.amqp.core.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Profile({"tut5","topics"})
@Configuration
public class Tut5Config {
	@Bean
	public TopicExchange topic() {
		return new TopicExchange("tut.topic");
	}

	@Profile("receiver")
	private static class ReceiverConfig {
		@Bean
		public Tut5Receiver receiver() {
			return new Tut5Receiver();
		}

		@Bean
		public Queue autoDeleteQueue1() {
			return new AnonymousQueue();
		}

		@Bean
		public Queue autoDeleteQueue2() {
			return new AnonymousQueue();
		}

		@Bean
		public Binding binding1a(TopicExchange topic, Queue autoDeleteQueue1) {
			return BindingBuilder.bind(autoDeleteQueue1)
			    .to(topic)
			    .with("*.orange.*");
		}

		@Bean
		public Binding binding1b(TopicExchange topic, Queue autoDeleteQueue1) {
			return BindingBuilder.bind(autoDeleteQueue1)
			    .to(topic)
			    .with("*.*.rabbit");
		}

		@Bean
		public Binding binding2a(TopicExchange topic, Queue autoDeleteQueue2) {
			return BindingBuilder.bind(autoDeleteQueue2)
			    .to(topic)
			    .with("lazy.#");
		}
	}

	@Profile("sender")
	@Bean
	public Tut5Sender sender() {
		return new Tut5Sender();
	}
}

----------------------------------------

TITLE: Example AWS IAM Policy for Peer Discovery
DESCRIPTION: An example IAM policy that grants necessary permissions for RabbitMQ AWS peer discovery.

LANGUAGE: json
CODE:
{
"Version": "2012-10-17",
"Statement": [
              {
              "Effect": "Allow",
              "Action": [
                         "autoscaling:DescribeAutoScalingInstances",
                         "ec2:DescribeInstances"
                         ],
              "Resource": [
                           "*"
                           ]
              }
              ]
}

----------------------------------------

TITLE: Configuring Erlang VM Scheduler Count for RabbitMQ
DESCRIPTION: Sets the number of Erlang VM schedulers to 4 using the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable. This can be useful in CPU-constrained environments.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+S 4:4"

----------------------------------------

TITLE: Importing Cloudsmith Signing Key
DESCRIPTION: Downloads and imports the Cloudsmith signing key used for RabbitMQ package distribution.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc
gpg --import cloudsmith-rabbitmq-key.asc

----------------------------------------

TITLE: Running Consumer Slowdown Test with PerfTest
DESCRIPTION: This command uses RabbitMQ PerfTest to simulate a consumer slowdown scenario. It configures various parameters such as connection details, test duration, message persistence, queue patterns, and variable publish rates to model the slowdown and recovery phases.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-c 1000 \
-ct -1 \
--rate 100 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
--producers 200 \
--consumers 200 \
--producer-random-start-delay 30 \
-vl 10000:300 \
-vl 11000:60 -vl 12000:60 -vl 13000:60 -vl 14000:60 -vl 15000:60 -vl 16000:60 -vl 17000:60 -vl 18000:60 -vl 19000:60 \
-vl 20000:60 -vl 21000:60 -vl 22000:60 -vl 23000:60 -vl 24000:60 -vl 25000:60 -vl 26000:60 -vl 27000:60 -vl 28000:60 -vl 29000:60 \
-vl 30000:300 \
-vl 29000:60 -vl 28000:60 -vl 27000:60 -vl 26000:60 -vl 25000:60 -vl 24000:60 -vl 23000:60 -vl 22000:60 -vl 21000:60 -vl 20000:60 \
-vl 19000:60 -vl 18000:60 -vl 17000:60 -vl 16000:60 -vl 15000:60 -vl 14000:60 -vl 13000:60 -vl 12000:60 -vl 11000:60 -vl 10000:60 \
-vl 10000:3000

----------------------------------------

TITLE: Restarting RabbitMQ Server on Ubuntu
DESCRIPTION: Shell command for restarting the RabbitMQ server on an Ubuntu system after enabling the Web STOMP plugins.

LANGUAGE: shell
CODE:
sudo /etc/init.d/rabbitmq-server restart

----------------------------------------

TITLE: Implementing Consumer Cancel Notification Handler in Java
DESCRIPTION: This snippet demonstrates how to set up a consumer with a cancel notification handler using the RabbitMQ Java client. It overrides the handleCancel method of the DefaultConsumer class to handle unexpected consumer cancellations.

LANGUAGE: java
CODE:
channel.queueDeclare(queue, false, true, false, null);
Consumer consumer = new DefaultConsumer(channel) {
    @Override
    public void handleCancel(String consumerTag) throws IOException {
        // consumer has been cancelled unexpectedly
    }
};
channel.basicConsume(queue, consumer);

----------------------------------------

TITLE: Computing Password Hash via CLI
DESCRIPTION: Command to compute a password hash using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl hash_password foobarbaz

----------------------------------------

TITLE: Implementing Message Acknowledgments
DESCRIPTION: Worker implementation with proper message acknowledgment to ensure no messages are lost if a worker crashes.

LANGUAGE: python
CODE:
def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")
    time.sleep(body.count(b'.') )
    print(" [x] Done")
    ch.basic_ack(delivery_tag = method.delivery_tag)

channel.basic_consume(queue='hello', on_message_callback=callback)

----------------------------------------

TITLE: Setting RabbitMQ Policy
DESCRIPTION: Sets a policy for a virtual host with specified pattern and definition.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me '^amq.' '{"federation-upstream-set":"all"}'

----------------------------------------

TITLE: RPC Server Execution Commands
DESCRIPTION: Command line instructions for running the RPC server component.

LANGUAGE: bash
CODE:
cd RPCServer
dotnet run
# => [x] Awaiting RPC requests

----------------------------------------

TITLE: Configuring Stream TCP Listener for Localhost
DESCRIPTION: Configuration to set Stream plugin listeners for both IPv4 and IPv6 localhost addresses.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 127.0.0.1:5552
stream.listeners.tcp.2 = ::1:5552

----------------------------------------

TITLE: Forcefully Resetting RabbitMQ Node
DESCRIPTION: Forcefully returns a RabbitMQ node to its virgin state, regardless of the current state.

LANGUAGE: bash
CODE:
rabbitmqctl force_reset

----------------------------------------

TITLE: Implementing Consumer Cancel Notification Handler in Java
DESCRIPTION: Example showing how to implement a consumer that handles unexpected cancellations by overriding the handleCancel callback in the DefaultConsumer class. The code demonstrates queue declaration, consumer creation, and consumption setup with cancel handling.

LANGUAGE: java
CODE:
channel.queueDeclare(queue, false, true, false, null);
Consumer consumer = new DefaultConsumer(channel) {
    @Override
    public void handleCancel(String consumerTag) throws IOException {
        // consumer has been cancelled unexpectedly
    }
};
channel.basicConsume(queue, consumer);

----------------------------------------

TITLE: Viewing RabbitMQ Log Location
DESCRIPTION: CLI commands to find RabbitMQ log file location across different shells

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q log_location

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat -q log_location

LANGUAGE: batch
CODE:
rabbitmq-diagnostics.bat -q log_location

----------------------------------------

TITLE: Configuring PATH for RabbitMQ CLI Tools
DESCRIPTION: Commands for adding RabbitMQ CLI tools to system PATH for both Intel and Apple Silicon Macs.

LANGUAGE: bash
CODE:
# for macOS Intel
export PATH=$PATH:/usr/local/sbin
# for Apple Silicon
export PATH=$PATH:/opt/homebrew/sbin

----------------------------------------

TITLE: Configuring DLX Using RabbitMQ Policy - Bash
DESCRIPTION: Sets a RabbitMQ policy to configure a dead letter exchange named 'my-dlx' that applies to all queues using rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy DLX ".*" '{"dead-letter-exchange":"my-dlx"}' --apply-to queues

----------------------------------------

TITLE: Management Plugin Configuration
DESCRIPTION: Example of configuring the RabbitMQ management plugin with SSL options using the new format.

LANGUAGE: ini
CODE:
management.listener.port = 15672
management.listener.ip   = 127.0.0.1
management.listener.ssl  = true

management.listener.ssl_opts.cacertfile = /path/to/cacert.pem
management.listener.ssl_opts.certfile   = /path/to/cert.pem
management.listener.ssl_opts.keyfile = /path/to/key.pem

----------------------------------------

TITLE: Management Plugin Configuration
DESCRIPTION: Example of configuring the RabbitMQ management plugin with SSL options using the new format.

LANGUAGE: ini
CODE:
management.listener.port = 15672
management.listener.ip   = 127.0.0.1
management.listener.ssl  = true

management.listener.ssl_opts.cacertfile = /path/to/cacert.pem
management.listener.ssl_opts.certfile   = /path/to/cert.pem
management.listener.ssl_opts.keyfile = /path/to/key.pem

----------------------------------------

TITLE: Configuring Inter-node Communication Buffer Size in RabbitMQ
DESCRIPTION: Increases the inter-node communication buffer size to 192 MB using either an environment variable or a VM flag.

LANGUAGE: bash
CODE:
RABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+zdbbl 192000"

----------------------------------------

TITLE: Displaying Help for Specific Commands
DESCRIPTION: Demonstrates how to get usage information for particular commands using the help command or --help option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics help status

rabbitmq-diagnostics status --help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help add_vhost

rabbitmq-diagnostics.bat help status

rabbitmq-diagnostics.bat status --help

----------------------------------------

TITLE: Direct Exchange Messaging Flow in Mermaid
DESCRIPTION: Mermaid flowchart showing a RabbitMQ direct exchange configuration with one producer (P), one direct exchange (X), two queues (Q₁, Q₂), and two consumers (C₁, C₂). The diagram demonstrates message routing using black binding key.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{direct}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X
    X -- black --> Q1 & Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Displaying Help for Specific Commands
DESCRIPTION: Demonstrates how to get usage information for particular commands using the help command or --help option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics help status

rabbitmq-diagnostics status --help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help add_vhost

rabbitmq-diagnostics.bat help status

rabbitmq-diagnostics.bat status --help

----------------------------------------

TITLE: RabbitMQ Advanced Configuration
DESCRIPTION: Advanced configuration settings for RabbitMQ server with disabled metrics collection

LANGUAGE: erlang
CODE:
[
 {
  rabbit, [
   {loopback_users, []}
  ]
 },

 {rabbitmq_management_agent, [
  {disable_metrics_collector, true}
 ]}
].

----------------------------------------

TITLE: Configuring Stunnel for TLS Client Validation
DESCRIPTION: Use Stunnel to validate TLS-enabled clients by proxying connections to RabbitMQ.

LANGUAGE: ini
CODE:
foreground = yes

[rabbit-amqp]
connect = localhost:5672
accept = 5679
cert = client/key-cert.pem
debug = 7

----------------------------------------

TITLE: Starting Local Development Server for RabbitMQ Website
DESCRIPTION: Commands for starting a local development server with live reload capabilities, including an option to specify a custom browser.

LANGUAGE: shell
CODE:
npm start

BROWSER="Brave Beta" npm start

----------------------------------------

TITLE: Enabling Prometheus Plugin in RabbitMQ
DESCRIPTION: Command to enable the rabbitmq_prometheus plugin on all RabbitMQ nodes

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_prometheus

----------------------------------------

TITLE: Cloning RabbitMQ .NET Client Repository
DESCRIPTION: Command to clone the RabbitMQ .NET client source code repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-dotnet-client.git

----------------------------------------

TITLE: Enabling rabbitmq-top Plugin
DESCRIPTION: Command to enable the rabbitmq-top plugin for analyzing per-process memory and CPU usage.

LANGUAGE: bash
CODE:
[sudo] rabbitmq-plugins enable rabbitmq_top

----------------------------------------

TITLE: Setting global parameters in RabbitMQ
DESCRIPTION: Commands for setting, clearing, and listing global runtime parameters in RabbitMQ using rabbitmqctl.

LANGUAGE: bash
CODE:
# sets a global (virtual-host-independent) runtime parameter
rabbitmqctl set_global_parameter <name> <value>

# clears (unsets) a global (virtual-host-independent) runtime parameter
rabbitmqctl clear_global_parameter <name>

# lists global (virtual-host-independent) runtime parameters
rabbitmqctl list_global_parameters

LANGUAGE: powershell
CODE:
# sets a global (virtual-host-independent) runtime parameter
rabbitmqctl.bat set_global_parameter <name> <value>

# clears (unsets) a global (virtual-host-independent) runtime parameter
rabbitmqctl.bat clear_global_parameter <name>

# lists global (virtual-host-independent) runtime parameters
rabbitmqctl.bat list_global_parameters

LANGUAGE: ini
CODE:
PUT /api/global-parameters/name
DELETE /api/global-parameters/name
GET /api/global-parameters

----------------------------------------

TITLE: Modifying RabbitMQ Default Directory Locations in Bash
DESCRIPTION: This snippet shows how to modify the rabbitmq-defaults script to use system default directories instead of the installation directory for RabbitMQ configuration and data.

LANGUAGE: bash
CODE:
PREFIX=${RABBITMQ_HOME}

LANGUAGE: bash
CODE:
SYS_PREFIX=

----------------------------------------

TITLE: Waiting for RabbitMQ Node Startup
DESCRIPTION: Waits for the RabbitMQ application to start at the node, using a PID file.

LANGUAGE: bash
CODE:
rabbitmqctl wait /var/run/rabbitmq/pid

----------------------------------------

TITLE: RabbitMQ Service Management Commands
DESCRIPTION: Commands for managing RabbitMQ service using systemctl

LANGUAGE: bash
CODE:
systemctl enable rabbitmq-server
systemctl start rabbitmq-server
systemctl status rabbitmq-server
systemctl stop rabbitmq-server

----------------------------------------

TITLE: Environment Variable Interpolation
DESCRIPTION: Example of using environment variables in rabbitmq.conf configuration

LANGUAGE: ini
CODE:
default_user = $(SEED_USERNAME)
default_pass = $(SEED_USER_PASSWORD)
cluster_name = deployment-$(DEPLOYMENT_ID)

----------------------------------------

TITLE: Binding Queue to Exchange in Go
DESCRIPTION: Binds the declared queue to the 'logs' exchange. This establishes the relationship between the exchange and the queue for message routing.

LANGUAGE: go
CODE:
err = ch.QueueBind(
  q.Name, // queue name
  "",     // routing key
  "logs", // exchange
  false,
  nil,
)

----------------------------------------

TITLE: Clearing RabbitMQ Policy
DESCRIPTION: Clears a policy for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy federate-me

----------------------------------------

TITLE: Setting Queue TTL via RabbitMQ CLI
DESCRIPTION: Shows how to set a queue TTL policy using the RabbitMQ command line tool.

LANGUAGE: shell
CODE:
rabbitmqctl set_policy TTL ".*" '{"message-ttl":60000}' --apply-to queues

----------------------------------------

TITLE: Describing RabbitMQ Cluster Status in Kubernetes
DESCRIPTION: Bash command to describe the status of a RabbitMQ cluster in Kubernetes, including status conditions that indicate the current state of the cluster.

LANGUAGE: bash
CODE:
kubectl describe rmq RMQ_NAME

----------------------------------------

TITLE: Including MQTT JavaScript Client Library
DESCRIPTION: HTML script tag to include the Paho MQTT JavaScript client library.

LANGUAGE: html
CODE:
<script src="mqttws31.js"></script>

----------------------------------------

TITLE: Creating RabbitMQ Message Flow Diagram with Mermaid
DESCRIPTION: This Mermaid flowchart depicts the message routing in a RabbitMQ system. It shows a producer (P) sending messages to an exchange (X), which then routes to two queues (Q₁ and Q₂) based on different routing keys. Each queue has a corresponding consumer (C₁ and C₂). The diagram uses custom CSS classes for styling different components.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X
    X -- #42;.a.#42; --> Q1
    X -- #42;.#42;.b --> Q2
    X -- c.# --> Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Listing RabbitMQ Plugins
DESCRIPTION: Basic command to list all RabbitMQ plugins with their status indicators

LANGUAGE: bash
CODE:
rabbitmq-plugins list

----------------------------------------

TITLE: Reinstalling RabbitMQ Windows Service
DESCRIPTION: These commands demonstrate how to remove, reinstall, and start the RabbitMQ Windows service, which is necessary after certain configuration changes.

LANGUAGE: PowerShell
CODE:
.\rabbitmq-service.bat remove
.\rabbitmq-service.bat install
.\rabbitmq-service.bat start

----------------------------------------

TITLE: Creating a RabbitMQ Stream Producer Connection
DESCRIPTION: Establishes a connection to RabbitMQ for a stream producer using the rstream library.

LANGUAGE: python
CODE:
async with Producer(
        host="localhost",
        username="guest",
        password="guest",
    ) as producer

----------------------------------------

TITLE: Listing Stream Publishers in RabbitMQ
DESCRIPTION: Displays information about registered publishers for streams, with customizable output fields.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_publishers connection_pid publisher_id stream

----------------------------------------

TITLE: Listing RabbitMQ listeners
DESCRIPTION: Use rabbitmq-diagnostics to list all enabled listeners on a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q listeners --node rabbit@target-hostname
# => {detailed listener output}

----------------------------------------

TITLE: Listing RabbitMQ Bindings
DESCRIPTION: Lists bindings in a specific virtual host with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_bindings -p my-vhost exchange_name queue_name

----------------------------------------

TITLE: Configuring Quorum Queue Settings in RabbitMQ
DESCRIPTION: Example of modifying quorum queue configuration parameters in the advanced.config file.

LANGUAGE: erlang
CODE:
[
 {rabbit, [{quorum_cluster_size, 5},
           {quorum_commands_soft_limit, 512}]}
].

----------------------------------------

TITLE: Stopping Keycloak
DESCRIPTION: Command to stop the Keycloak server

LANGUAGE: bash
CODE:
make stop-keycloak

----------------------------------------

TITLE: Setting Maximum Channels Limit using curl and HTTP API
DESCRIPTION: This curl command demonstrates how to set the maximum channels limit for a user using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Checking Deprecated Features via CLI
DESCRIPTION: Command to check if any deprecated features are being used in a RabbitMQ deployment. Returns 0 if no deprecated features are used, non-zero otherwise.

LANGUAGE: sh
CODE:
rabbitmq-diagnostics check_if_any_deprecated_features_are_used

----------------------------------------

TITLE: Checking Deprecated Features via CLI
DESCRIPTION: Command to check if any deprecated features are being used in a RabbitMQ deployment. Returns 0 if no deprecated features are used, non-zero otherwise.

LANGUAGE: sh
CODE:
rabbitmq-diagnostics check_if_any_deprecated_features_are_used

----------------------------------------

TITLE: Creating the AMQP 1.0 Environment in Java
DESCRIPTION: Creates the environment instance which is the entry point for connecting to RabbitMQ using the AMQP 1.0 Java client.

LANGUAGE: Java
CODE:
import com.rabbitmq.client.amqp.*;
import com.rabbitmq.client.amqp.impl.AmqpEnvironmentBuilder;

// ...

// create the environment instance
Environment environment = new AmqpEnvironmentBuilder()
    .build();
// ...
// close the environment when the application stops
environment.close();

----------------------------------------

TITLE: Webhook Certificate Secret Configuration
DESCRIPTION: Kubernetes secret configuration for storing webhook certificates when using the manual certificate installation method.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: webhook-server-cert
  namespace: rabbitmq-system
data:
  ca.crt: # ca cert that can be used to validate the webhook's server certificate
  tls.crt: # generated certificate
  tls.key: # generated private key

----------------------------------------

TITLE: Configuring TLS for Web MQTT
DESCRIPTION: Configuration options for enabling TLS (WSS) connections for the Web MQTT plugin.

LANGUAGE: ini
CODE:
web_mqtt.ssl.port       = 15676
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem
web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# web_mqtt.ssl.password   = changeme

----------------------------------------

TITLE: Running RabbitMQ Work Queue Application
DESCRIPTION: Commands to build and run the work queue application with separate sender and receiver processes.

LANGUAGE: bash
CODE:
./mvnw clean package

# shell 1
java -jar target/rabbitmq-tutorials.jar --spring.profiles.active=work-queues,receiver
# shell 2
java -jar target/rabbitmq-tutorials.jar --spring.profiles.active=work-queues,sender

----------------------------------------

TITLE: Enabling Peer Discovery Plugin in RabbitMQ
DESCRIPTION: Example of enabling a peer discovery plugin using rabbitmq-plugins in offline mode before first node boot.

LANGUAGE: bash
CODE:
rabbitmq-plugins --offline enable <plugin name>

LANGUAGE: bash
CODE:
rabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s

----------------------------------------

TITLE: Reinstall RabbitMQ Formula
DESCRIPTION: Complete sequence of commands to cleanly remove and reinstall RabbitMQ via Homebrew

LANGUAGE: bash
CODE:
brew services stop rabbitmq
brew uninstall rabbitmq
rm -rf /opt/homebrew/etc/rabbitmq/
rm -rf /opt/homebrew/opt/rabbitmq/
rm -rf /opt/homebrew/var/lib/rabbitmq/
rm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist
brew install rabbitmq

----------------------------------------

TITLE: Configuring WebSocket Options for Web MQTT
DESCRIPTION: Configuration examples for customizing WebSocket-specific settings for the Web MQTT plugin.

LANGUAGE: ini
CODE:
web_mqtt.ws_opts.compress = true
web_mqtt.ws_opts.idle_timeout = 60000
web_mqtt.ws_opts.max_frame_size = 50000

----------------------------------------

TITLE: Enabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to enable Firehose tracing for a specific virtual host in RabbitMQ. The trace_on command activates message tracking for both published and delivered messages.

LANGUAGE: bash
CODE:
rabbitmqctl trace_on -p [virtual host]

----------------------------------------

TITLE: Listing RabbitMQ User Permissions
DESCRIPTION: Lists permissions for a specific user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl list_user_permissions janeway

----------------------------------------

TITLE: Publishing Message with TTL in Java
DESCRIPTION: Publishes a message with a 60-second TTL using the Java client library.

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()
                                   .expiration("60000")
                                   .build();
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);

----------------------------------------

TITLE: Specifying Protocol and URIs for Shovel Connections
DESCRIPTION: This snippet shows how to specify the protocol and URIs for shovel connections in the configuration.

LANGUAGE: erlang
CODE:
%% for AMQP 0-9-1
{protocol, amqp091}

{uris, [
        "amqp://fred:secret@host1.domain/my_vhost",
        "amqp://john:secret@host2.domain/my_vhost"
       ]}

----------------------------------------

TITLE: Enabling Firehose Tracing in RabbitMQ
DESCRIPTION: Command to enable Firehose tracing for a specific virtual host in RabbitMQ. The trace_on command activates message tracking for both published and delivered messages.

LANGUAGE: bash
CODE:
rabbitmqctl trace_on -p [virtual host]

----------------------------------------

TITLE: Visualizing RabbitMQ Consumer with Mermaid
DESCRIPTION: A flowchart diagram showing the representation of a consumer (C) in RabbitMQ messaging system

LANGUAGE: mermaid
CODE:
flowchart LR
    C((C))
    class C mermaid-consumer

----------------------------------------

TITLE: Labeling ServiceMonitor and PodMonitor
DESCRIPTION: Commands to label ServiceMonitor and PodMonitor resources for Prometheus selection.

LANGUAGE: bash
CODE:
kubectl label ServiceMonitor rabbitmq team=frontend
kubectl label PodMonitor rabbitmq-cluster-operator team=frontend

----------------------------------------

TITLE: MQTT Connection Configuration
DESCRIPTION: JavaScript code demonstrating how to establish an MQTT connection with options including SSL support

LANGUAGE: javascript
CODE:
var options = {
    timeout: 3,
    keepAliveInterval: 30,
    onSuccess: function () {
        debug("CONNECTION SUCCESS");
        client.subscribe('/topic/test', {qos: 1});
    },
    onFailure: function (message) {
        debug("CONNECTION FAILURE - " + message.errorMessage);
    }
};
if (location.protocol == "https:") {
    options.useSSL = true;
}
debug("CONNECT TO " + wsbroker + ":" + wsport);
client.connect(options);

----------------------------------------

TITLE: Listing RabbitMQ Schema Information
DESCRIPTION: Lists schema database tables and their properties.

LANGUAGE: bash
CODE:
rabbitmqctl schema_info name active_replicas

----------------------------------------

TITLE: Configuring Deprecated Feature State - Disable Feature
DESCRIPTION: Configuration example showing how to disable a deprecated feature to test behavior as if the feature was already removed.

LANGUAGE: ini
CODE:
# Try RabbitMQ as if the deprecated feature was gone.
deprecated_features.permit.some_deprecated_feature = false

----------------------------------------

TITLE: Configuring Default Consumer Prefetch in Erlang
DESCRIPTION: This snippet shows how to configure the default consumer prefetch in the RabbitMQ advanced configuration file.

LANGUAGE: erlang
CODE:
%% advanced.config file
[
 {rabbit, [
       {default_consumer_prefetch, {false,250}}
     ]
 }
].

----------------------------------------

TITLE: Listing Stream Group Consumers in RabbitMQ
DESCRIPTION: Displays information about consumers of a specific stream consumer group in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state

----------------------------------------

TITLE: Configuring Console Logging in RabbitMQ
DESCRIPTION: Configuration for logging to console (standard output) with JSON formatting.

LANGUAGE: ini
CODE:
log.console = true
log.console.level = info
log.console.formatter = json
log.file = false

----------------------------------------

TITLE: Clearing RabbitMQ User Password
DESCRIPTION: Clears the password for a user in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl clear_password janeway

----------------------------------------

TITLE: Publishing Message with Validated User-ID in RabbitMQ using Java
DESCRIPTION: Demonstrates how to publish a message with a validated user-id property in RabbitMQ. The message will only be published if the specified user-id matches the connected user's name. In this example, the message will only succeed if the connected user is 'guest'.

LANGUAGE: java
CODE:
AMQP.BasicProperties properties = new AMQP.BasicProperties();
properties.setUserId("guest");
channel.basicPublish("amq.fanout", "", properties, "test".getBytes());

----------------------------------------

TITLE: Clearing RabbitMQ Global Parameter
DESCRIPTION: Clears a global runtime parameter.

LANGUAGE: bash
CODE:
rabbitmqctl clear_global_parameter mqtt_default_vhosts

----------------------------------------

TITLE: MQTT to AMQP Conversion Table
DESCRIPTION: Markdown table showing conversions from MQTT 5.0 to AMQP 1.0 and AMQP 0.9.1

LANGUAGE: markdown
CODE:
| MQTT 5.0 Section | MQTT Field | MQTT 5.0 Type | Condition | AMQP Section | AMQP Field | AMQP Type | Comment |
| --- | --- | --- | --- | --- | --- | --- | --- |

----------------------------------------

TITLE: Advanced Config with Encrypted Password
DESCRIPTION: Example of using advanced.config file for configuring etcd peer discovery with encrypted password

LANGUAGE: erlang
CODE:
%% advanced.config file
[
 {rabbit,
     [{cluster_formation,
          [{peer_discovery_etcd, [
                {endpoints, [
                  "one.etcd.eng.example.local:2379",
                  "two.etcd.eng.example.local:2479",
                  "three.etcd.eng.example.local:2579"
                ]},

                {etcd_prefix,   "rabbitmq"},
                {cluster_name,  "default"},

                {etcd_username, "etcd user"},
                {etcd_password, {encrypted, <<"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==">>}}
                ]}
           }]
      }]
 },

  {config_entry_decoder, [
             {passphrase, <<"decryption key passphrase">>}
         ]}
].

----------------------------------------

TITLE: Implementing RPC Server in Ruby using RabbitMQ
DESCRIPTION: This code implements the RPC server using RabbitMQ and Ruby. It sets up a connection, creates a channel, declares a queue, and subscribes to incoming RPC requests. For each request, it computes the Fibonacci number and sends the result back.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

class FibonacciServer
  def initialize
    @connection = Bunny.new
    @connection.start
    @channel = @connection.create_channel
  end

  def start(queue_name)
    @queue = channel.queue(queue_name)
    @exchange = channel.default_exchange
    subscribe_to_queue
  end

  def stop
    channel.close
    connection.close
  end

  def loop_forever
    # This loop only exists to keep the main thread
    # alive. Many real world apps won't need this.
    loop { sleep 5 }
  end

  private

  attr_reader :channel, :exchange, :queue, :connection

  def subscribe_to_queue
    queue.subscribe do |_delivery_info, properties, payload|
      result = fibonacci(payload.to_i)

      exchange.publish(
        result.to_s,
        routing_key: properties.reply_to,
        correlation_id: properties.correlation_id
      )
    end
  end

  def fibonacci(value)
    return value if value.zero? || value == 1

    fibonacci(value - 1) + fibonacci(value - 2)
  end
end

begin
  server = FibonacciServer.new

  puts ' [x] Awaiting RPC requests'
  server.start('rpc_queue')
  server.loop_forever
rescue Interrupt => _
  server.stop
end

----------------------------------------

TITLE: Installing Docusaurus Dependencies for RabbitMQ Website
DESCRIPTION: Command to install JavaScript dependencies required by Docusaurus for building the RabbitMQ website.

LANGUAGE: shell
CODE:
# for NPM users
npm install

----------------------------------------

TITLE: Growing Queue Replicas in RabbitMQ
DESCRIPTION: Command to add a new replica on a specified node for matching quorum queues. Supports 'all' or 'even' selectors for queue selection.

LANGUAGE: bash
CODE:
rabbitmq-queues grow "rabbit@newhost" "all" --vhost-pattern "a-vhost" --queue-pattern ".*"

----------------------------------------

TITLE: Listing Stream Consumer Groups in RabbitMQ
DESCRIPTION: Shows information about groups of stream single active consumers for a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_consumer_groups stream reference consumers

----------------------------------------

TITLE: Enabling OAuth 2.0 Plugin in RabbitMQ
DESCRIPTION: Command to enable the OAuth 2.0 authentication plugin in RabbitMQ

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_oauth2

----------------------------------------

TITLE: Configuring Alternate Exchange Using Policy in PowerShell
DESCRIPTION: This snippet shows how to set a policy to configure an Alternate Exchange named 'my-ae' for an exchange named 'my-direct' using the rabbitmqctl command in PowerShell.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy AE '^my-direct$' '"{""alternate-exchange":""my-ae""}"' --apply-to exchanges

----------------------------------------

TITLE: Generating RabbitMQ Server Report
DESCRIPTION: Generates a comprehensive server status report for support purposes.

LANGUAGE: bash
CODE:
rabbitmqctl report > server_report.txt

----------------------------------------

TITLE: Configuring TLS in RabbitMQ 3.7 (New INI-like Format)
DESCRIPTION: Example of configuring TLS settings in RabbitMQ using the new INI-like configuration format introduced in version 3.7. This format is easier to read and generate, making it more automation-friendly.

LANGUAGE: ini
CODE:
listeners.ssl.1 = 5671
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.versions.1 = tlsv1.2
ssl_options.versions.2 = tlsv1.1

----------------------------------------

TITLE: Listing RabbitMQ User Permissions
DESCRIPTION: Lists permissions for a specific user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl list_user_permissions janeway

----------------------------------------

TITLE: Listing Stream Publishers in RabbitMQ
DESCRIPTION: Lists registered publishers with specified information items.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_publishers connection_pid publisher_id stream

----------------------------------------

TITLE: Configuring TCP Buffer Size for STOMP in RabbitMQ
DESCRIPTION: This example sets TCP buffer sizes for STOMP connections to 192 KiB and configures other TCP options.

LANGUAGE: ini
CODE:
stomp.tcp_listen_options.backlog = 128
stomp.tcp_listen_options.nodelay = true
stomp.tcp_listen_options.linger.on      = true
stomp.tcp_listen_options.linger.timeout = 0
stomp.tcp_listen_options.sndbuf = 196608
stomp.tcp_listen_options.recbuf = 196608

----------------------------------------

TITLE: Configuring OAuth 2.0 Authentication Backend in rabbitmq.conf
DESCRIPTION: Example configuration in rabbitmq.conf to enable OAuth 2.0 authentication and authorization backends.

LANGUAGE: ini
CODE:
auth_backends.1 = rabbit_auth_backend_oauth2

----------------------------------------

TITLE: Declaring Dynamic Shovel Using CLI (AMQP 0-9-1)
DESCRIPTION: Example of declaring a dynamic shovel using rabbitmqctl set_parameter command for AMQP 0-9-1 protocol

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel my-shovel \
  '{"src-protocol": "amqp091", "src-uri": "amqp://", "src-queue": "source-queue", "dest-protocol": "amqp091", "dest-uri": "amqp://remote-server", "dest-queue": "target-queue", "dest-queue-args": {"x-queue-type": "quorum"}}'

----------------------------------------

TITLE: Configuring TCP Keepalives in Linux Kernel
DESCRIPTION: This example shows how to configure TCP keepalive settings in the Linux kernel to detect dead connections after 70 seconds.

LANGUAGE: ini
CODE:
net.ipv4.tcp_keepalive_time=30
net.ipv4.tcp_keepalive_intvl=10
net.ipv4.tcp_keepalive_probes=4

----------------------------------------

TITLE: Clearing RabbitMQ Parameter
DESCRIPTION: Clears a parameter for a specific component.

LANGUAGE: bash
CODE:
rabbitmqctl clear_parameter federation-upstream node01

----------------------------------------

TITLE: Configuring and Applying Named Upstream Set in Bash
DESCRIPTION: These commands create a named set of upstreams called 'location-1' with two upstreams, then apply it to exchanges or queues with names starting with 'federated.'

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream-set":"location-1"}'

----------------------------------------

TITLE: Clearing RabbitMQ Virtual Host Limits
DESCRIPTION: Clears limits for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_vhost_limits -p qa_env

----------------------------------------

TITLE: Monitoring Shovel Status via CLI
DESCRIPTION: Command to check the status of all shovels using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl shovel_status

----------------------------------------

TITLE: TLS Configuration for Web STOMP
DESCRIPTION: INI configuration showing how to set up TLS/SSL for secure WebSocket connections.

LANGUAGE: ini
CODE:
web_stomp.ssl.port       = 15673
web_stomp.ssl.backlog    = 1024
web_stomp.ssl.cacertfile = /path/to/ca_certificate.pem
web_stomp.ssl.certfile   = /path/to/server_certificate.pem
web_stomp.ssl.keyfile    = /path/to/server_key.pem
web_stomp.ssl.password   = changeme

----------------------------------------

TITLE: Cluster Management Command Examples
DESCRIPTION: Examples of commands for managing RabbitMQ clusters, including joining nodes and checking status

LANGUAGE: bash
CODE:
rabbitmqctl await_online_nodes 2
rabbitmqctl -n hare@mcnulty forget_cluster_node rabbit@stringer
rabbitmqctl join_cluster hare@elena --ram

----------------------------------------

TITLE: Basic RabbitMQ Connection URI with Heartbeat
DESCRIPTION: Example of a non-encrypted AMQP connection URI with heartbeat and connection timeout parameters specified.

LANGUAGE: ini
CODE:
amqp://myhost?heartbeat=5&connection_timeout=10000

----------------------------------------

TITLE: Encoding RabbitMQ Configuration Value
DESCRIPTION: Encrypts a configuration value.

LANGUAGE: bash
CODE:
rabbitmqctl encode '<<"guest">>' mypassphrase

----------------------------------------

TITLE: Joining a RabbitMQ Cluster with Khepri Timeout Error (Bash)
DESCRIPTION: This command demonstrates an attempt to join a node to a RabbitMQ cluster using Khepri, resulting in a timeout error due to a lack of quorum. It shows the potential issues when joining a cluster with insufficient active nodes.

LANGUAGE: bash
CODE:
rabbitmqctl -n rabbit@host-5 join_cluster rabbit@host-4

# => Error:
# => Khepri has timed out on node rabbit@host-5.
# => Khepri cluster could be in minority.

----------------------------------------

TITLE: Consuming Filtered Messages from a RabbitMQ Stream in Java
DESCRIPTION: This snippet demonstrates how to consume messages from a stream with a specific filter value using the 'x-stream-filter' consumer argument.

LANGUAGE: java
CODE:
channel.basicQos(100); // QoS must be specified
channel.basicConsume(
  "my-stream",
  false,
  Collections.singletonMap("x-stream-filter", "california"), // set filter
  (consumerTag, message) -> {
    Map<String, Object> headers = message.getProperties().getHeaders();
    // there must be some client-side filter logic
    if ("california".equals(headers.get("x-stream-filter-value"))) {
      // message processing
      // ...
    }
    channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required
  },
  consumerTag -> { });

----------------------------------------

TITLE: Starting Keycloak Server
DESCRIPTION: Command to deploy and start the Keycloak authentication server.

LANGUAGE: bash
CODE:
make start-keycloak

----------------------------------------

TITLE: Configuring RabbitMQ Server for TLS Inter-node Communication
DESCRIPTION: Sets up the SERVER_ADDITIONAL_ERL_ARGS environment variable to enable TLS for inter-node communication in RabbitMQ.

LANGUAGE: bash
CODE:
SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \
  -ssl_dist_opt server_password password \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

----------------------------------------

TITLE: Configuring RabbitMQ for Entra ID OAuth 2.0 Authentication
DESCRIPTION: This code block demonstrates the configuration settings in rabbitmq.conf for using Microsoft Entra ID as an OAuth 2.0 authentication backend. It includes settings for management UI, OAuth scopes, and issuer URL.

LANGUAGE: ini
CODE:
management.oauth_enabled = true
management.oauth_client_id = {Application(client) ID}
management.oauth_scopes = openid profile api://{Application(client) ID}/rabbitmq

auth_oauth2.resource_server_id = {Application(client) ID}
auth_oauth2.additional_scopes_key = roles
auth_oauth2.issuer = https://login.microsoftonline.com/{Directory (tenant) ID}/v2.0

----------------------------------------

TITLE: Listing Stream Consumers in RabbitMQ
DESCRIPTION: Lists consumers attached to streams with specified information items.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_consumers connection_pid subscription_id stream

----------------------------------------

TITLE: Launching OAuth2 Proxy for RabbitMQ
DESCRIPTION: Command to start the OAuth2 Proxy server, which will handle the OAuth2 flow for RabbitMQ.

LANGUAGE: bash
CODE:
make start-oauth2-proxy

----------------------------------------

TITLE: Visualizing RabbitMQ Message Flow with Mermaid
DESCRIPTION: A flowchart diagram showing the message routing from a producer through an exchange to multiple queues and consumers. The diagram uses custom styling classes to differentiate between RabbitMQ components (producer, exchange, queues, consumers).

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[amq.gen-RQ6…]]
    Q2[[amq.gen-As8…]]
    C1((C₁))
    C2((C₂))

    P --> X
    X --> Q1
    X --> Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Implementing Message Producer for Work Queue
DESCRIPTION: Code for new_task.js that sends messages to a durable work queue. Messages are marked as persistent and can be sent with variable processing time indicated by dots in the message.

LANGUAGE: javascript
CODE:
var queue = 'task_queue';
var msg = process.argv.slice(2).join(' ') || "Hello World!";

channel.assertQueue(queue, {
  durable: true
});
channel.sendToQueue(queue, Buffer.from(msg), {
  persistent: true
});
console.log(" [x] Sent '%s'", msg);

----------------------------------------

TITLE: Adding RabbitMQ Repository Configuration
DESCRIPTION: Script for adding the official RabbitMQ repository configuration to apt sources.

LANGUAGE: bash
CODE:
sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF
## Provides modern Erlang/OTP releases
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-erlang/deb/ubuntu noble main
## Provides RabbitMQ
deb [arch=amd64 signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.rabbitmq.com/rabbitmq/rabbitmq-server/deb/ubuntu noble main
EOF

----------------------------------------

TITLE: Filtered Plugin Listing
DESCRIPTION: Command to list plugins filtered by name pattern 'management' with verbose output

LANGUAGE: bash
CODE:
rabbitmq-plugins list -v management

----------------------------------------

TITLE: Setting Channel Max in Java
DESCRIPTION: Sets the maximum number of channels allowed per connection using the Java client.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();
// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured
// to use a higher limit, otherwise the server's limit will be used.
cf.setRequestedChannelMax(32);

----------------------------------------

TITLE: Declaring Dynamic Shovel Using CLI on Windows (AMQP 0-9-1)
DESCRIPTION: Example of declaring a dynamic shovel using rabbitmqctl.bat set_parameter command for AMQP 0-9-1 protocol on Windows

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter shovel my-shovel ^
  "{""src-protocol"": ""amqp091"", ""src-uri"":""amqp://localhost"", ""src-queue"": ""source-queue"", ^
   ""dest-protocol"": ""amqp091"", ""dest-uri"": ""amqp://remote.rabbitmq.local"", ^
   ""dest-queue"": ""target-queue"", ""dest-queue-args"": {""x-queue-type"": ""quorum""}}"

----------------------------------------

TITLE: Updating Virtual Host Metadata Using RabbitMQ CLI
DESCRIPTION: This example shows how to update the metadata of an existing virtual host using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl update_vhost_metadata qa1 --description "QA environment for issue 1662" --default-queue-type quorum --tags qa,project-a,qa-1662

----------------------------------------

TITLE: Implementing a Message Receiver with Routing in Spring AMQP
DESCRIPTION: Demonstrates how to implement a message receiver that listens to multiple queues with different routing keys in Spring AMQP.

LANGUAGE: java
CODE:
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.util.StopWatch;

public class Tut4Receiver {

	@RabbitListener(queues = "#{autoDeleteQueue1.name}")
	public void receive1(String in) throws InterruptedException {
		receive(in, 1);
	}

	@RabbitListener(queues = "#{autoDeleteQueue2.name}")
	public void receive2(String in) throws InterruptedException {
		receive(in, 2);
	}

	public void receive(String in, int receiver) throws InterruptedException {
		StopWatch watch = new StopWatch();
		watch.start();
		System.out.println("instance " + receiver + " [x] Received '" + in + "'");
		doWork(in);
		watch.stop();
		System.out.println("instance " + receiver + " [x] Done in " +
		    watch.getTotalTimeSeconds() + "s");
	}

	private void doWork(String in) throws InterruptedException {
		for (char ch : in.toCharArray()) {
			if (ch == '.') {
				Thread.sleep(1000);
			}
		}
	}

}

----------------------------------------

TITLE: Creating Federation Upstream Set in Bash
DESCRIPTION: This command creates an upstream set named 'location-1' containing two previously declared upstreams, 'up-1' and 'up-2'.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream-set location-1 '[{"upstream": "up-1"}, {"upstream": "up-2"}]'

----------------------------------------

TITLE: Decoding RabbitMQ Configuration Value
DESCRIPTION: Decrypts an encoded configuration value.

LANGUAGE: bash
CODE:
rabbitmqctl decode '{encrypted, <<"...">>}' mypassphrase

----------------------------------------

TITLE: Setting Up Python Environment for Pika
DESCRIPTION: Commands to set up Python virtual environment and install required packages

LANGUAGE: bash
CODE:
python3 --version
pip install pika
pip install requests
python3 pika-client/producer.py producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn

----------------------------------------

TITLE: Protocol Listener Check
DESCRIPTION: Command to verify if a specific protocol listener is active

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_protocol_listener mqtt

----------------------------------------

TITLE: Basic Alarms Check Command
DESCRIPTION: Command to check for resource alarms in a RabbitMQ cluster

LANGUAGE: bash
CODE:
rabbitmq-diagnostics alarms

----------------------------------------

TITLE: Setting Federation Policy in RabbitMQ
DESCRIPTION: Command to create a policy that applies federation to all queues using the previously defined upstream configuration.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to queues blue-green-migration ".*" \
  '{"federation-upstream":"blue"}'

----------------------------------------

TITLE: Configuring Identity-Provider Initiated Logon
DESCRIPTION: Configuration entries in rabbitmq.conf to enable Identity-Provider initiated logon for the RabbitMQ Management UI.

LANGUAGE: ini
CODE:
management.oauth_enabled = true
management.oauth_initiated_logon_type = idp_initiated
management.oauth_provider_url = http://localhost:8080

----------------------------------------

TITLE: Removing a Node from a RabbitMQ Cluster Using CLI
DESCRIPTION: This sequence of commands shows how to remove a node from a RabbitMQ cluster using the rabbitmqctl CLI tool. It stops the RabbitMQ application, resets the node, and then restarts it as a standalone node.

LANGUAGE: bash
CODE:
# Stop RabbitMQ without stopping the runtime (its OS process).
rabbitmqctl stop_app

# Reset it.
rabbitmqctl reset

# Restart the node as a blank one.
rabbitmqctl start_app

----------------------------------------

TITLE: RabbitMQ Upgrade Command Synopsis
DESCRIPTION: Command line syntax for the rabbitmq-upgrade tool showing available options including node specification, quiet/silent modes, timeout settings, and long names support.

LANGUAGE: shell
CODE:
rabbitmq-upgrade [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]

----------------------------------------

TITLE: Configuring Maven Dependencies for RabbitMQ Stream Client in Java
DESCRIPTION: This XML snippet shows how to add the RabbitMQ Stream Java client as a dependency in a Maven pom.xml file. It specifies the groupId, artifactId, and version of the stream client library.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>stream-client</artifactId>
    <version>0.16.0</version>
</dependency>

----------------------------------------

TITLE: Exporting Definitions Using rabbitmqadmin in Bash
DESCRIPTION: This command exports RabbitMQ definitions to a JSON file using the rabbitmqadmin command-line tool. It requires the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqadmin export /path/to/definitions.file.json

----------------------------------------

TITLE: Windows RabbitMQ Inter-node TLS Configuration File
DESCRIPTION: Example of inter_node_tls.config file for configuring TLS settings for inter-node communication on Windows.

LANGUAGE: erlang
CODE:
[
    {server, [
        {cacertfile, "C:/Path/To/ca_certificate.pem"},
        {certfile, "C:/Path/To/server_certificate.pem"},
        {keyfile, "C:/Path/To/server_key.pem"},
        {password, "password-if-keyfile-is-encrypted"},
        {secure_renegotiate, true},
        {verify, verify_peer},
        {fail_if_no_peer_cert, true}
    ]},
    {client, [
        {cacertfile, "C:/Path/To/ca_certificate.pem"},
        {certfile, "C:/Path/To/client_certificate.pem"},
        {keyfile, "C:/Path/To/client_key.pem"},
        {password, "password-if-keyfile-is-encrypted"},
        {secure_renegotiate, true},
        {verify, verify_peer}
    ]}
].

----------------------------------------

TITLE: Basic Cluster Node Setup Commands
DESCRIPTION: Commands for stopping, resetting and joining a node to an existing RabbitMQ cluster

LANGUAGE: bash
CODE:
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@rabbit1
rabbitmqctl start_app

----------------------------------------

TITLE: Basic Cluster Node Setup Commands
DESCRIPTION: Commands for stopping, resetting and joining a node to an existing RabbitMQ cluster

LANGUAGE: bash
CODE:
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@rabbit1
rabbitmqctl start_app

----------------------------------------

TITLE: Installing LDAP Dependencies on Debian/Ubuntu
DESCRIPTION: Command to install required LDAP client library on Debian-based systems

LANGUAGE: bash
CODE:
sudo apt-get install -y erlang-eldap

----------------------------------------

TITLE: Accessing Management API
DESCRIPTION: Command to access the RabbitMQ management API using OAuth 2.0 authentication

LANGUAGE: bash
CODE:
make curl-keycloak url=https://localhost:15671/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa realm=test

----------------------------------------

TITLE: Exporting Definitions Using rabbitmqctl in Bash
DESCRIPTION: This command exports RabbitMQ definitions to a JSON file using the rabbitmqctl command-line tool. It does not require the management plugin to be enabled.

LANGUAGE: bash
CODE:
rabbitmqctl export_definitions /path/to/definitions.file.json

----------------------------------------

TITLE: Setting Default Version for Classic Queues in RabbitMQ
DESCRIPTION: Configures the default version for classic queues to use version 2, which provides a more efficient message storage and queue index implementation.

LANGUAGE: ini
CODE:
classic_queue.default_version = 2

----------------------------------------

TITLE: Listing RabbitMQ Schema Information
DESCRIPTION: Lists schema database tables and their properties.

LANGUAGE: bash
CODE:
rabbitmqctl schema_info name active_replicas

----------------------------------------

TITLE: Certificate Expiration Check
DESCRIPTION: Command to check TLS certificate expiration within a specified timeframe

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_certificate_expiration --unit weeks --within 6

----------------------------------------

TITLE: Stopping RabbitMQ Node
DESCRIPTION: Stops the Erlang node on which RabbitMQ is running.

LANGUAGE: bash
CODE:
rabbitmqctl stop

----------------------------------------

TITLE: Configure APT Pinning for Erlang Packages
DESCRIPTION: Sample apt preference configuration to pin Erlang package versions from specific repositories

LANGUAGE: ini
CODE:
# /etc/apt/preferences.d/erlang
Package: erlang*
Pin: origin ppa1.rabbitmq.com
# Note: priority of 1001 (greater than 1000) allows for downgrading.
# To make package downgrading impossible, use a value of 999
Pin-Priority: 1001

----------------------------------------

TITLE: Repository Configuration for Modern Distributions
DESCRIPTION: Repository configuration for modern distributions like Fedora, RHEL 9, CentOS Stream 9

LANGUAGE: ini
CODE:
# In /etc/yum.repos.d/rabbitmq.repo

##
## Zero dependency Erlang RPM
##

[modern-erlang]
name=modern-erlang-el9
baseurl=https://yum1.rabbitmq.com/erlang/el/9/$basearch
        https://yum2.rabbitmq.com/erlang/el/9/$basearch
repo_gpgcheck=1
enabled=1
gpgkey=https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key
gpgcheck=1
...

----------------------------------------

TITLE: Setting User Limits via HTTP API Endpoint
DESCRIPTION: This snippet shows the HTTP API endpoint for setting user limits, which can be used to set both max-connections and max-channels limits.

LANGUAGE: ini
CODE:
PUT /api/user-limits/{username}/{limit}

----------------------------------------

TITLE: Rendering Khepri Logo with JSX and Inline Styles
DESCRIPTION: This code snippet shows how to render the Khepri logo using JSX, including inline CSS styles and an imported SVG component.

LANGUAGE: jsx
CODE:
<figure className="without-borders" style={{float: "right"}}>
<KhepriLogo className="floating-logo" style={{width: "100px", height: "175px",}}/>
<figcaption>Khepri logo</figcaption>
</figure>

----------------------------------------

TITLE: Deactivating Queue Federation Policy in RabbitMQ
DESCRIPTION: This snippet demonstrates how to deactivate a queue federation policy by clearing it using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy queue-federation

----------------------------------------

TITLE: Configuring PHP-AMQPLIB Dependencies with Composer
DESCRIPTION: JSON configuration for installing php-amqplib via Composer package manager. Requires php-amqplib version 3.2 or higher.

LANGUAGE: javascript
CODE:
{
    "require": {
        "php-amqplib/php-amqplib": "^3.2"
    }
}

----------------------------------------

TITLE: Waiting for Multiple RabbitMQ Nodes
DESCRIPTION: Waits for a specified number of nodes to join the cluster.

LANGUAGE: bash
CODE:
rabbitmqctl await_online_nodes 2

----------------------------------------

TITLE: Disabling RabbitMQ Plugins
DESCRIPTION: Command to disable specified plugins and their dependencies. Example shows disabling the management plugin.

LANGUAGE: bash
CODE:
rabbitmq-plugins disable rabbitmq_management

----------------------------------------

TITLE: Enabling RabbitMQ Web MQTT Plugin
DESCRIPTION: Command to enable the Web MQTT plugin using rabbitmq-plugins tool

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_mqtt

----------------------------------------

TITLE: Configuring OAuth 2.0 resources in RabbitMQ
DESCRIPTION: Define multiple OAuth 2.0 resources in RabbitMQ configuration for different audiences

LANGUAGE: ini
CODE:
auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.2.id = rabbit_dev

auth_oauth2.preferred_username_claims.1 = preferred_username
auth_oauth2.preferred_username_claims.2 = user_name
auth_oauth2.preferred_username_claims.3 = email
auth_oauth2.issuer = https://keycloak:8443/realms/test
auth_oauth2.scope_prefix = rabbitmq.

auth_oauth2.oauth_providers.keycloak.issuer = https://keycloak:8443/realms/test
auth_oauth2.oauth_providers.keycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem
auth_oauth2.oauth_providers.keycloak.https.verify = verify_peer
auth_oauth2.oauth_providers.keycloak.https.hostname_verification = wildcard
auth_oauth2.default_oauth_provider = keycloak

----------------------------------------

TITLE: Starting RabbitMQ Server
DESCRIPTION: Commands to deploy RabbitMQ with OAuth 2.0 configuration using Tanzu RabbitMQ image

LANGUAGE: bash
CODE:
export IMAGE=<Tanzu RabbitMQ OCI image name>
export IMAGE_TAG=<Tanzu RabbitMQ OCI image tag>
MODE=forward-proxy OAUTH_PROVIDER=keycloak make start-rabbitmq

----------------------------------------

TITLE: Creating a RabbitMQ Stream Consumer in Java
DESCRIPTION: This Java code snippet demonstrates how to create a RabbitMQ Stream consumer. It sets up the environment, creates a stream, and configures a consumer to start from the first message in the stream, printing received messages.

LANGUAGE: Java
CODE:
Environment environment = Environment.builder().build();
String stream = "hello-java-stream";
environment.streamCreator().stream(stream).maxLengthBytes(ByteCapacity.GB(5)).create();
Consumer consumer = environment.consumerBuilder()
            .stream(stream)
            .offset(OffsetSpecification.first())
            .messageHandler((unused, message) -> {
                System.out.println("Received message: " + new String(message.getBodyAsBinary()));
            }).build();

----------------------------------------

TITLE: Enabling LDAP Plugin
DESCRIPTION: Command to enable the RabbitMQ LDAP authentication/authorization plugin

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_auth_backend_ldap

----------------------------------------

TITLE: Setting RabbitMQ User Limits
DESCRIPTION: Sets limits for a specific user, such as maximum connections or channels.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits limited_user '{"max-connections": 64}'

----------------------------------------

TITLE: Computing Password Hash via HTTP API
DESCRIPTION: cURL command to compute a password hash using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz

----------------------------------------

TITLE: Shrinking Quorum Queue Clusters in RabbitMQ
DESCRIPTION: Command to remove queue members from a specified node in the cluster.

LANGUAGE: bash
CODE:
rabbitmq-queues shrink "rabbit@decomissioned-node"

----------------------------------------

TITLE: Joining a RabbitMQ Cluster Using CLI
DESCRIPTION: This command demonstrates how to join a RabbitMQ node to an existing cluster using the rabbitmqctl CLI tool. It connects the local node to a remote host named 'rabbit@remote-host'.

LANGUAGE: bash
CODE:
rabbitmqctl join_cluster rabbit@remote-host

----------------------------------------

TITLE: Enabling RabbitMQ Event Exchange Plugin
DESCRIPTION: Command to enable the rabbitmq_event_exchange plugin for exposing internal RabbitMQ events to client applications.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_event_exchange

----------------------------------------

TITLE: Installing RabbitMQ and Erlang with dnf
DESCRIPTION: Commands to install RabbitMQ and Erlang using dnf package manager.

LANGUAGE: bash
CODE:
dnf update -y

## install these dependencies from standard OS repositories
dnf install -y logrotate

## install RabbitMQ and zero dependency Erlang
dnf install -y erlang rabbitmq-server

----------------------------------------

TITLE: Consuming Event Stream
DESCRIPTION: Example of using the consume_event_stream command to stream internal events from a running node for a specified duration and pattern.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics consume_event_stream -n rabbit@hostname --duration 20 --pattern queue_.*

----------------------------------------

TITLE: Growing Queue Replicas in RabbitMQ
DESCRIPTION: Command to add a new replica for quorum queues on a specified node. Supports selecting all or even-numbered replica queues with optional vhost and queue pattern filtering.

LANGUAGE: bash
CODE:
rabbitmq-queues grow "rabbit@newhost" "all" --vhost-pattern "a-vhost" --queue-pattern ".*"

----------------------------------------

TITLE: Configuring Erlando Parse Transformers
DESCRIPTION: Shows how to enable the cut and do parse transformers in an Erlang module via compile attributes.

LANGUAGE: erlang
CODE:
-module(test).
-compile({parse_transform, cut}).
-compile({parse_transform, do}).

----------------------------------------

TITLE: Complete Routing Configuration with Spring AMQP
DESCRIPTION: Full configuration class for implementing routing with direct exchanges and multiple bindings in Spring AMQP.

LANGUAGE: java
CODE:
import org.springframework.amqp.core.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Profile({"tut4","routing"})
@Configuration
public class Tut4Config {

	@Bean
	public DirectExchange direct() {
		return new DirectExchange("tut.direct");
	}

	@Profile("receiver")
	private static class ReceiverConfig {

		@Bean
		public Queue autoDeleteQueue1() {
			return new AnonymousQueue();
		}

		@Bean
		public Queue autoDeleteQueue2() {
			return new AnonymousQueue();
		}

		@Bean
		public Binding binding1a(DirectExchange direct,
		    Queue autoDeleteQueue1) {
			return BindingBuilder.bind(autoDeleteQueue1)
			    .to(direct)
			    .with("orange");
		}

		@Bean
		public Binding binding1b(DirectExchange direct,
		    Queue autoDeleteQueue1) {
			return BindingBuilder.bind(autoDeleteQueue1)
			    .to(direct)
			    .with("black");
		}

		@Bean
		public Binding binding2a(DirectExchange direct,
		    Queue autoDeleteQueue2) {
			return BindingBuilder.bind(autoDeleteQueue2)
			    .to(direct)
			    .with("green");
		}

		@Bean
		public Binding binding2b(DirectExchange direct,
		    Queue autoDeleteQueue2) {
			return BindingBuilder.bind(autoDeleteQueue2)
			    .to(direct)
			    .with("black");
		}

		@Bean
		public Tut4Receiver receiver() {
	 	 	return new Tut4Receiver();
		}
	}

	@Profile("sender")
	@Bean
	public Tut4Sender sender() {
		return new Tut4Sender();
	}
}

----------------------------------------

TITLE: Starting UAA for RabbitMQ OAuth2 Authentication
DESCRIPTION: Command to start the UAA (User Account and Authentication) server using Docker for RabbitMQ OAuth2 authentication.

LANGUAGE: bash
CODE:
make start-uaa

----------------------------------------

TITLE: Configuring Global TLS Options in RabbitMQ Erlang Client
DESCRIPTION: Example of setting global TLS options for the RabbitMQ Erlang client using advanced.config configuration.

LANGUAGE: erlang
CODE:
{amqp_client, [
    {ssl_options, [
        {cacertfile, "path-to-ca-certificate"},
        {certfile, "path-to-certificate"},
        {keyfile, "path-to-keyfile"},
        {verify, verify_peer}
    ]}
]}.

----------------------------------------

TITLE: Running rabbitmq-echopid.bat in Windows
DESCRIPTION: Command to execute the rabbitmq-echopid.bat script with the short-name form of the RabbitMQ node name as an argument. This script attempts to find the PID of the Erlang runtime hosting RabbitMQ and echoes it to stdout if successful.

LANGUAGE: Batch
CODE:
rabbitmq-echopid.bat <sname>

----------------------------------------

TITLE: Enabling RabbitMQ Event Exchange Plugin
DESCRIPTION: Command to enable the rabbitmq_event_exchange plugin for exposing internal RabbitMQ events to client applications.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_event_exchange

----------------------------------------

TITLE: Retrieving RabbitMQ Admin Credentials
DESCRIPTION: Bash commands to retrieve and decode the RabbitMQ admin username and password from Kubernetes secrets.

LANGUAGE: bash
CODE:
kubectl -n NAMESPACE get secret INSTANCE-default-user -o jsonpath="{.data.username}" | base64 --decode

LANGUAGE: bash
CODE:
kubectl -n NAMESPACE get secret INSTANCE-default-user -o jsonpath="{.data.password}" | base64 --decode

----------------------------------------

TITLE: Installing RabbitMQ and Erlang with dnf
DESCRIPTION: Commands to install RabbitMQ and Erlang using dnf package manager.

LANGUAGE: bash
CODE:
dnf update -y

## install these dependencies from standard OS repositories
dnf install -y logrotate

## install RabbitMQ and zero dependency Erlang
dnf install -y erlang rabbitmq-server

----------------------------------------

TITLE: Listing Stream Connections in RabbitMQ
DESCRIPTION: Displays connection information for stream protocol connections, with customizable output fields.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_connections conn_name user

----------------------------------------

TITLE: Exchange Routing Key Pattern Examples
DESCRIPTION: Examples demonstrating routing key pattern matching in topic exchanges, showing how wildcards work for message routing.

LANGUAGE: text
CODE:
"regions.na.cities.*" -> matches "regions.na.cities.toronto", "regions.na.cities.newyork"
"audit.events.#" -> matches "audit.events.users.signup", "audit.events.orders.placed"
"#" -> matches any routing key

----------------------------------------

TITLE: Sampling Runtime Thread Statistics
DESCRIPTION: Example of using the runtime_thread_stats command to sample and report runtime thread activity for a specified interval.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics runtime_thread_stats --sample-interval 15

----------------------------------------

TITLE: Checking Federation Status
DESCRIPTION: Command to check the status of federation links.

LANGUAGE: bash
CODE:
rabbitmqctl federation_status

----------------------------------------

TITLE: Running rabbitmq-echopid.bat in Windows
DESCRIPTION: Command to execute the rabbitmq-echopid.bat script with the short-name form of the RabbitMQ node name as an argument. This script attempts to find the PID of the Erlang runtime hosting RabbitMQ and echoes it to stdout if successful.

LANGUAGE: Batch
CODE:
rabbitmq-echopid.bat <sname>

----------------------------------------

TITLE: Configuring RabbitMQ for OAuth2 Authentication
DESCRIPTION: RabbitMQ configuration snippet to disable audience claim validation, allowing the use of OAuth2 Proxy with Keycloak.

LANGUAGE: ini
CODE:
auth_oauth2.verify_aud = false

----------------------------------------

TITLE: Installing RabbitMQ Windows Service
DESCRIPTION: Command to install RabbitMQ as a Windows service for production use

LANGUAGE: PowerShell
CODE:
rabbitmq-service.bat install

----------------------------------------

TITLE: Listing Stream Connections in RabbitMQ
DESCRIPTION: Displays connection information for stream protocol connections, with customizable output fields.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_connections conn_name user

----------------------------------------

TITLE: Configuring OAuth 2.0 for RabbitMQ Management UI
DESCRIPTION: Set up OAuth 2.0 resources for RabbitMQ Management UI access

LANGUAGE: ini
CODE:
management.oauth_resource_servers.1.id = rabbit_prod
management.oauth_resource_servers.1.client_id = rabbit_prod_mgt_ui
management.oauth_resource_servers.1.label = RabbitMQ Production
management.oauth_resource_servers.1.scopes = openid profile rabbitmq.tag:administrator

management.oauth_resource_servers.2.id = rabbit_dev
management.oauth_resource_servers.2.client_id = rabbit_dev_mgt_ui
management.oauth_resource_servers.2.label = RabbitMQ Development
management.oauth_resource_servers.2.scopes = openid profile rabbitmq.tag:management

----------------------------------------

TITLE: Checking Node Quorum Critical Status in RabbitMQ
DESCRIPTION: Command to check if a node is quorum critical by verifying if any internal components, quorum queues, or stream queues will lose online quorum if the target node is shut down.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_node_is_quorum_critical

LANGUAGE: powershell
CODE:
rabbitmq-diagnostics.bat check_if_node_is_quorum_critical

----------------------------------------

TITLE: Defining AMQPS URI Syntax in ABNF
DESCRIPTION: ABNF rule defining the syntax of an AMQPS URI, which is identical to the AMQP URI except for the scheme identifier.

LANGUAGE: abnf
CODE:
amqps_URI      = "amqps://" amqp_authority [ "/" vhost ]

----------------------------------------

TITLE: Shrinking Quorum Queue Clusters in RabbitMQ
DESCRIPTION: Command to remove queue members from a specified node, effectively shrinking the quorum queue cluster.

LANGUAGE: bash
CODE:
rabbitmq-queues shrink "rabbit@decomissioned-node"

----------------------------------------

TITLE: Starting Keycloak for OAuth2 Authentication
DESCRIPTION: Command to deploy and start the Keycloak server for OAuth2 authentication.

LANGUAGE: bash
CODE:
make start-keycloak

----------------------------------------

TITLE: Stopping RabbitMQ Service on Linux
DESCRIPTION: Command to stop the RabbitMQ server service before performing storage configuration like symlinking directories to EBS volumes.

LANGUAGE: bash
CODE:
sudo service rabbitmq-server stop

----------------------------------------

TITLE: Enabling RabbitMQ Web MQTT Plugin
DESCRIPTION: Command to enable the RabbitMQ Web MQTT plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_mqtt

----------------------------------------

TITLE: Enabling Federation Plugin
DESCRIPTION: Commands to enable the federation plugin and its management UI extension using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_federation
rabbitmq-plugins enable rabbitmq_federation_management

----------------------------------------

TITLE: Configuring Shovel Plugin for Message Draining
DESCRIPTION: Sets up a shovel to move messages from a queue in the blue cluster to the corresponding queue in the green cluster. This is used for draining message backlogs during migration.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel drain-blue \
'{"src-protocol": "amqp091", "src-uri": "amqp://node-in-blue-cluster", \
"src-queue": "queue1", "dest-protocol": "amqp091", \
"dest-uri": "amqp://", "dest-queue": "queue1"}'

----------------------------------------

TITLE: Enabling Khepri Feature Flag
DESCRIPTION: Command to enable the khepri_db feature flag using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag --experimental khepri_db

LANGUAGE: powershell
CODE:
rabbitmqctl.bat enable_feature_flag --experimental khepri_db

----------------------------------------

TITLE: Enabling RabbitMQ Web STOMP Plugin
DESCRIPTION: Command to enable the Web STOMP plugin using rabbitmq-plugins tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_stomp

----------------------------------------

TITLE: Importing RabbitMQ Signing Keys
DESCRIPTION: Commands to import the RabbitMQ signing keys for package verification.

LANGUAGE: bash
CODE:
## primary RabbitMQ signing key
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'
## modern Erlang repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'
## RabbitMQ server repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'

----------------------------------------

TITLE: Importing RabbitMQ Signing Key for RPM
DESCRIPTION: Imports the RabbitMQ signing key for use with RPM-based systems like RHEL, Fedora, and CentOS.

LANGUAGE: bash
CODE:
rpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc

----------------------------------------

TITLE: AMQP Transaction Commands in RabbitMQ
DESCRIPTION: Overview of AMQP transaction commands (tx class) and their behavior in different versions of RabbitMQ. Includes transactional operations like basic.publish, basic.ack, and basic.reject.

LANGUAGE: AMQP
CODE:
tx.select
tx.commit
tx.rollback
basic.publish
basic.ack
basic.reject

----------------------------------------

TITLE: Restarting RabbitMQ Virtual Host
DESCRIPTION: Restarts a failed virtual host's data stores and queues.

LANGUAGE: bash
CODE:
rabbitmqctl restart_vhost test

----------------------------------------

TITLE: RabbitMQ Exchange Prefix Restriction
DESCRIPTION: Exchange name prefix that is restricted in RabbitMQ, preventing users from declaring or deleting exchanges with this prefix.

LANGUAGE: text
CODE:
amq.

----------------------------------------

TITLE: Configuring Event Exchange Protocol in RabbitMQ
DESCRIPTION: Configuration settings for the event_exchange plugin in rabbitmq.conf, specifying the protocol to use for publishing events (AMQP 1.0 or 0.9.1).

LANGUAGE: ini
CODE:
event_exchange.protocol = amqp_1_0

----------------------------------------

TITLE: Retrieving Node Memory Breakdown via HTTP API
DESCRIPTION: Uses curl to fetch memory breakdown information from the RabbitMQ HTTP API and formats it using Python's json.tool.

LANGUAGE: bash
CODE:
curl -s -u guest:guest http://127.0.0.1:15672/api/nodes/rabbit@mercurio/memory | python -m json.tool

----------------------------------------

TITLE: Starting RabbitMQ Service
DESCRIPTION: Command to start the RabbitMQ Windows service after installation.

LANGUAGE: PowerShell
CODE:
rabbitmq-service.bat start

----------------------------------------

TITLE: Consuming Messages from RabbitMQ Queue in PHP
DESCRIPTION: Setting up a message consumer with a callback function to process received messages

LANGUAGE: php
CODE:
$callback = function ($msg) {
  echo ' [x] Received ', $msg->body, "\n";
};

$channel->basic_consume('hello', '', false, true, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

----------------------------------------

TITLE: Defining AMQPS URI Syntax in ABNF
DESCRIPTION: Specifies the formal syntax for AMQPS (TLS-secured) URIs using Augmented Backus-Naur Form (ABNF). This defines the structure for 'amqps' scheme URIs, which is identical to 'amqp' URIs except for the scheme identifier.

LANGUAGE: ABNF
CODE:
amqps_URI      = "amqps://" amqp_authority [ "/" vhost ]

----------------------------------------

TITLE: Feature Flag Declaration in Erlang
DESCRIPTION: Shows how to declare a feature flag in Erlang code using a module attribute.

LANGUAGE: erlang
CODE:
-rabbit_feature_flag(
   {quorum_queue,
    #{desc          => "Support queues of type quorum",
      doc_url       => "https://www.rabbitmq.com/docs/quorum-queues",
      stability     => stable,
      migration_fun => {?MODULE, quorum_queue_migration}
     }}).

----------------------------------------

TITLE: Creating New Virtual Host with Quorum Queue Type
DESCRIPTION: Commands to create a new virtual host with quorum as default queue type and set permissions

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost NEW_VHOST --default-queue-type quorum
rabbitmqctl set_permissions -p NEW_VHOST USERNAME '.*' '.*' '.*'

----------------------------------------

TITLE: TLS Configuration for MQTT
DESCRIPTION: Configuration example showing how to enable TLS/SSL for MQTT connections including certificate paths and verification options

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert  = true

mqtt.listeners.ssl.default = 8883
mqtt.listeners.tcp.default = 1883

----------------------------------------

TITLE: Configuring Raft Segment File Entry Count for Large Messages
DESCRIPTION: Example of decreasing the number of Raft log entries allowed in a segment file for workloads with large messages.

LANGUAGE: bash
CODE:
# The default is 4096.
# This value is only reasonable for workloads with messages of 1 MiB or even larger
raft.segment_max_entries = 128

----------------------------------------

TITLE: Configuring Stream Flow Control
DESCRIPTION: Example configuration to adjust flow control settings for stream connections.

LANGUAGE: ini
CODE:
stream.initial_credits = 100000
stream.credits_required_for_unblocking = 25000

----------------------------------------

TITLE: Closing RabbitMQ Connection in Python
DESCRIPTION: Properly close the RabbitMQ connection to ensure message delivery.

LANGUAGE: python
CODE:
connection.close()

----------------------------------------

TITLE: Checking Queue Synchronization in RabbitMQ
DESCRIPTION: Command to check if a node hosts any unsynchronized queue mirrors.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_node_is_mirror_sync_critical

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat check_if_node_is_mirror_sync_critical

----------------------------------------

TITLE: Setting Maximum Queue Limit for a Virtual Host
DESCRIPTION: This example shows how to set a maximum queue limit for a virtual host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-queues": 1024}'

----------------------------------------

TITLE: Stopping RabbitMQ Service on Linux
DESCRIPTION: This command stops the RabbitMQ server service on a Linux system. It's typically used before performing operations that require the server to be offline, such as symlinking directories.

LANGUAGE: bash
CODE:
sudo service rabbitmq-server stop

----------------------------------------

TITLE: RabbitMQ Service Commands in Windows Batch
DESCRIPTION: Core commands available in rabbitmq-service.bat for managing the RabbitMQ Windows service. Includes commands for installing, removing, starting, stopping, enabling, and disabling the service.

LANGUAGE: batch
CODE:
rabbitmq-service.bat help     # Display usage information
rabbitmq-service.bat install  # Install the service
rabbitmq-service.bat remove   # Remove the service
rabbitmq-service.bat start    # Start the service
rabbitmq-service.bat stop     # Stop the service
rabbitmq-service.bat disable  # Disable the service
rabbitmq-service.bat enable   # Enable the service

----------------------------------------

TITLE: Implementing Server-Side Offset Tracking in Go for RabbitMQ Stream
DESCRIPTION: Modifies the consumer to use server-side offset tracking, allowing it to resume consumption from where it left off in previous executions.

LANGUAGE: go
CODE:
var firstOffset int64 = -1
var messageCount int64 = -1
var lastOffset atomic.Int64
ch := make(chan bool)
messagesHandler := func(consumerContext stream.ConsumerContext, message *amqp.Message) {
    if atomic.CompareAndSwapInt64(&firstOffset, -1, consumerContext.Consumer.GetOffset()) {
        fmt.Println("First message received.")
    }
    if atomic.AddInt64(&messageCount, 1)%10 == 0 {
        consumerContext.Consumer.StoreOffset()
    }
    if string(message.GetData()) == "marker" {
        lastOffset.Store(consumerContext.Consumer.GetOffset())
        consumerContext.Consumer.StoreOffset()
        consumerContext.Consumer.Close()
        ch <- true
    }
}

var offsetSpecification stream.OffsetSpecification
consumerName := "offset-tracking-tutorial"
storedOffset, err := env.QueryOffset(consumerName, streamName)
if errors.Is(err, stream.OffsetNotFoundError) {
    offsetSpecification = stream.OffsetSpecification{}.First()
} else {
    offsetSpecification = stream.OffsetSpecification{}.Offset(storedOffset + 1)
}

_, err = env.NewConsumer(streamName, messagesHandler,
    stream.NewConsumerOptions().
        SetManualCommit().
        SetConsumerName(consumerName).
        SetOffset(offsetSpecification))
fmt.Println("Started consuming...")
_ = <-ch

fmt.Printf("Done consuming, first offset %d, last offset %d.\n", firstOffset, lastOffset.Load())

----------------------------------------

TITLE: Cloning RabbitMQ Server Repository
DESCRIPTION: Command to clone the RabbitMQ server source code from GitHub repository

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq

----------------------------------------

TITLE: Checking Prometheus Metrics Exposure
DESCRIPTION: Command to verify that RabbitMQ is exposing metrics in Prometheus format

LANGUAGE: bash
CODE:
curl -s localhost:15692/metrics | head -n 3

----------------------------------------

TITLE: Enabling Proxy Protocol for Web MQTT
DESCRIPTION: Configuration to enable the proxy protocol for MQTT clients.

LANGUAGE: ini
CODE:
web_mqtt.proxy_protocol = true

----------------------------------------

TITLE: Setting Combined User Limits via CLI
DESCRIPTION: Shows how to set both maximum connections and channels limits in a single CLI command.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_limits guest '{"max-connections": 10, "max-channels": 20}'

----------------------------------------

TITLE: Implementing Worker Consumer with Simulated Processing
DESCRIPTION: Worker implementation that processes messages from the queue. Simulates work by sleeping based on number of dots in message.

LANGUAGE: python
CODE:
import time

def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")
    time.sleep(body.count(b'.'))
    print(" [x] Done")

----------------------------------------

TITLE: Including MQTT Client Library in HTML
DESCRIPTION: HTML script tag to include the Paho JavaScript MQTT client library.

LANGUAGE: html
CODE:
<script src="mqttws31.js"></script>

----------------------------------------

TITLE: Setting Virtual Host Limits using RabbitMQ CLI
DESCRIPTION: Shows how to set maximum connection and queue limits for a virtual host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-connections": 256}'

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p vhost_name '{"max-queues": 1024}'

----------------------------------------

TITLE: Default Event Exchange Plugin Configuration
DESCRIPTION: Default configuration settings for the rabbitmq_event_exchange plugin, specifying the virtual host and protocol used.

LANGUAGE: ini
CODE:
event_exchange.vhost = /
event_exchange.protocol = amqp_0_9_1

----------------------------------------

TITLE: Closing All RabbitMQ Connections
DESCRIPTION: Closes all connections for a specific virtual host or the entire node.

LANGUAGE: bash
CODE:
rabbitmqctl close_all_connections -p qa_env --limit 10 'Please close'

----------------------------------------

TITLE: Cloning RabbitMQ Server Repository
DESCRIPTION: Command to clone the RabbitMQ server source code from GitHub repository

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq

----------------------------------------

TITLE: Consuming from a Stream with First Offset
DESCRIPTION: Shows how to consume messages from a stream starting from the first available message using the 'first' offset specification.

LANGUAGE: java
CODE:
channel.basicQos(100); // QoS must be specified
channel.basicConsume(
  "my-stream",
  false,
  Collections.singletonMap("x-stream-offset", "first"), // "first" offset specification
  (consumerTag, message) -> {
    // message processing
    // ...
   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required
  },
  consumerTag -> { });

----------------------------------------

TITLE: Testing TLS Connection with OpenSSL s_server
DESCRIPTION: Use OpenSSL s_server to set up a test TLS server using provided certificates and keys.

LANGUAGE: bash
CODE:
openssl s_server -accept 8443 \
  -cert server_certificate.pem -key server_key.pem -CAfile ca_certificate.pem

----------------------------------------

TITLE: Checking Prometheus Operator Installation in Kubernetes
DESCRIPTION: Command to verify if Prometheus Operator is installed in the Kubernetes cluster by checking for ServiceMonitor CRD.

LANGUAGE: bash
CODE:
kubectl get customresourcedefinitions.apiextensions.k8s.io servicemonitors.monitoring.coreos.com

----------------------------------------

TITLE: Checking Quorum Queue Replica Sync Status in RabbitMQ
DESCRIPTION: Command to verify if there are any ongoing initial quorum queue replica sync operations, ensuring all replicas have completed their initial synchronization.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_new_quorum_queue_replicas_have_finished_initial_sync

LANGUAGE: powershell
CODE:
rabbitmq-diagnostics.bat check_if_new_quorum_queue_replicas_have_finished_initial_sync

----------------------------------------

TITLE: RabbitMQ Service Environment Variables Configuration
DESCRIPTION: Environment variables used to configure the RabbitMQ Windows service, including service name, base directory, node name, networking options, and console logging settings.

LANGUAGE: batch
CODE:
set RABBITMQ_SERVICENAME=RabbitMQ
set RABBITMQ_BASE=C:\Users\AppData
set RABBITMQ_NODENAME=rabbit@hostname
set RABBITMQ_NODE_IP_ADDRESS=0.0.0.0
set RABBITMQ_NODE_PORT=5672
set ERLANG_SERVICE_MANAGER_PATH=C:\Program Files\erl{version}\erts-{version}\bin
set RABBITMQ_CONSOLE_LOG=new

----------------------------------------

TITLE: Setting Quorum Queue Policy via RabbitMQ CLI (PowerShell)
DESCRIPTION: Example of setting a delivery limit policy for quorum queues using rabbitmqctl in PowerShell.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy qq-overrides ^
    "^qq\." "{""delivery-limit"": 50}" ^
    --priority 123 ^
    --apply-to "quorum_queues"

----------------------------------------

TITLE: Inspecting Node Memory Breakdown with rabbitmqadmin
DESCRIPTION: Demonstrates how to use rabbitmqadmin to display a breakdown of node memory usage in percent.

LANGUAGE: shell
CODE:
rabbitmqadmin show memory_breakdown_in_percent --node 'rabbit@hostname'

----------------------------------------

TITLE: AMQP Object Naming UTF-8 Requirement
DESCRIPTION: Implementation of strict UTF-8 validation for AMQP shortstr data type used in exchange names, queue names, and routing keys. Invalid UTF-8 sequences are no longer accepted.

LANGUAGE: AMQP
CODE:
queue.declare(queue="valid-utf8-name")

----------------------------------------

TITLE: Setting Queue Expiry Policy (Windows PowerShell)
DESCRIPTION: Sets a queue expiration policy of 30 minutes for all queues using rabbitmqctl on Windows.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy expiry ".*" "{""expires"":1800000}" --apply-to queues

----------------------------------------

TITLE: Configuring Scheduler Binding Strategy
DESCRIPTION: Configures how schedulers are bound to CPU cores using either environment variable or runtime flag.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+stbt nnts"
RABBITMQ_SCHEDULER_BIND_TYPE="nnts"

----------------------------------------

TITLE: Configuring TLS for STOMP
DESCRIPTION: Configuration example for enabling TLS support for STOMP connections.

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/tls/ca_certificate.pem
ssl_options.certfile   = /path/to/tls/server_certificate.pem
ssl_options.keyfile    = /path/to/tls/server_key.pem
ssl_options.verify     =  verify_peer
ssl_options.fail_if_no_peer_cert = true

stomp.listeners.tcp.1 = 61613
# default TLS-enabled port for STOMP connections
stomp.listeners.ssl.1 = 61614

----------------------------------------

TITLE: Configuring TLS for RabbitMQ Cluster
DESCRIPTION: YAML snippet showing how to configure TLS for a RabbitMQ cluster using a secret containing the TLS certificate and key.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: additional-port
spec:
  replicas: 1
  tls:
    secretName: tls-secret

----------------------------------------

TITLE: Deleting a Stream Replica in RabbitMQ
DESCRIPTION: Removes a stream replica from the specified node for a given queue in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams delete_replica --vhost "a-vhost" "a-queue" "rabbit@decomissioned-node"

----------------------------------------

TITLE: Configuring Colored Version Control Prompt
DESCRIPTION: Bash configuration code that sets up a customized prompt with color-coded version control information. Defines color variables and creates a function to display repository status using vcprompt.

LANGUAGE: shell
CODE:
D=$'\e[37;40m'
PINK=$'\e[35;40m'
GREEN=$'\e[32;40m'
ORANGE=$'\e[33;40m'

vc_ps1() {
    vcprompt -f "(%n:${PINK}%b${D}${GREEN}%u%m${D})" 2>/dev/null
}

export PS1='${GREEN}\u@\h${D} in ${ORANGE}\w${D}$(vc_ps1)\n$ '

----------------------------------------

TITLE: Restarting a Stream in RabbitMQ
DESCRIPTION: Restarts a stream and all its replicas, optionally specifying a preferred leader node.

LANGUAGE: bash
CODE:
rabbitmq-streams restart_stream --vhost "a-vhost" "a-stream" --preferred-leader-node "node"

----------------------------------------

TITLE: Disabling Scheduler Busy Waiting
DESCRIPTION: Turns off speculative busy waiting for schedulers to reduce CPU usage on systems with limited resources.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+sbwt none +sbwtdcpu none +sbwtdio none"

----------------------------------------

TITLE: Updating RPM Package Sources
DESCRIPTION: Shell commands to clean and update yum package sources after migrating from Bintray to new repositories. This refreshes the package cache and updates packages.

LANGUAGE: shell
CODE:
sudo yum clean all
sudo yum update -y

----------------------------------------

TITLE: Configuring Stream TCP Listener Port
DESCRIPTION: Configuration example for changing the default Stream plugin TCP listener port to 12345.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Configuring Stream TCP Listener Port
DESCRIPTION: Configuration example for changing the default Stream plugin TCP listener port to 12345.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Waiting for RabbitMQ Node Startup
DESCRIPTION: Waits for the RabbitMQ application to start at the node, using a specified PID file.

LANGUAGE: bash
CODE:
rabbitmqctl wait /var/run/rabbitmq/pid

----------------------------------------

TITLE: Defining Federation Upstream in Bash
DESCRIPTION: This command sets a federation upstream parameter, which defines how to connect to a remote node or cluster for federation.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream 'name' 'json-object'

----------------------------------------

TITLE: Verifying Package Signatures with GPG
DESCRIPTION: Example of verifying a RabbitMQ package signature using GPG verify command.

LANGUAGE: bash
CODE:
gpg --verify rabbitmq-server_4.0.4-1_all.deb.asc rabbitmq-server_4.0.4-1_all.deb

----------------------------------------

TITLE: Publishing Messages with Filter Values in Java
DESCRIPTION: This example shows how to publish a message to a stream with an associated filter value using the x-stream-filter-value header.

LANGUAGE: java
CODE:
channel.basicPublish(
  "", // default exchange
  "my-stream",
  new AMQP.BasicProperties.Builder()
    .headers(Collections.singletonMap(
      "x-stream-filter-value", "california" // set filter value
    ))
    .build(),
  body
);

----------------------------------------

TITLE: Setting Cache TTL and Refusal Caching in RabbitMQ
DESCRIPTION: This configuration sets the cache TTL to 5000 milliseconds and enables caching of negative authentication/authorization decisions.

LANGUAGE: ini
CODE:
auth_cache.cached_backend = ldap
auth_cache.cache_ttl = 5000
auth_cache.cache_refusals = true

----------------------------------------

TITLE: Disabling Virtual Host Deletion Protection using RabbitMQ CLI
DESCRIPTION: Demonstrates how to disable deletion protection for a virtual host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl disable_vhost_protection_from_deletion "vhost-name"

----------------------------------------

TITLE: Enabling Proxy Protocol for Web MQTT
DESCRIPTION: Configuration to enable the proxy protocol for MQTT clients.

LANGUAGE: ini
CODE:
web_mqtt.proxy_protocol = true

----------------------------------------

TITLE: Receiving Logs with Topic Routing in PHP
DESCRIPTION: This script shows how to consume messages from a topic exchange in RabbitMQ using PHP. It allows specifying multiple binding keys as command-line arguments to filter incoming messages.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('topic_logs', 'topic', false, false, false);

list($queue_name, ,) = $channel->queue_declare("", false, false, true, false);

$binding_keys = array_slice($argv, 1);
if (empty($binding_keys)) {
    file_put_contents('php://stderr', "Usage: $argv[0] [binding_key]\n");
    exit(1);
}

foreach ($binding_keys as $binding_key) {
    $channel->queue_bind($queue_name, 'topic_logs', $binding_key);
}

echo " [*] Waiting for logs. To exit press CTRL+C\n";

$callback = function ($msg) {
    echo ' [x] ', $msg->getRoutingKey(), ':', $msg->getBody(), "\n";
};

$channel->basic_consume($queue_name, '', false, true, false, false, $callback);

try {
    $channel->consume();
} catch (\Throwable $exception) {
    echo $exception->getMessage();
}

$channel->close();
$connection->close();

----------------------------------------

TITLE: Running RabbitMQ Broker with Custom Path
DESCRIPTION: Command to run RabbitMQ broker with a custom temporary directory path

LANGUAGE: bash
CODE:
make run-broker TEST_TMPDIR="/some/other/location/for/rabbitmq-test-instances"

----------------------------------------

TITLE: Consuming Messages with Filtering
DESCRIPTION: This command uses Stream PerfTest to consume messages with a specific filter value.

LANGUAGE: shell
CODE:
java -jar stream-perf-test.jar --producers 0 --consumers 1 --offset first --prometheus --filter-values 5

----------------------------------------

TITLE: Configuration File Example
DESCRIPTION: TOML configuration file format for storing connection settings under aliases

LANGUAGE: toml
CODE:
[local]
hostname = "localhost"
port = 15672
username = "lolz"
password = "lolz"
vhost = '/'

[staging]
hostname = "192.168.20.31"
port = 15672
username = "staging-2387a72329"
password = "staging-1d20cfbd9d"

----------------------------------------

TITLE: Updating RabbitMQ Cluster Operator Manifest
DESCRIPTION: Command to upgrade to the latest version of the RabbitMQ Cluster Operator by applying the new operator manifest. This updates the Custom Resource Definitions and the Operator Pod with the latest container image.

LANGUAGE: bash
CODE:
kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"
# namespace/rabbitmq-system unchanged
# customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com configured
# serviceaccount/rabbitmq-cluster-operator unchanged
# role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role unchanged
# clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role unchanged
# rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding unchanged
# clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding unchanged
# deployment.apps/rabbitmq-cluster-operator configured

----------------------------------------

TITLE: Implementing SslContextFactory Interface in RabbitMQ Java Client 5.0
DESCRIPTION: Shows the new SslContextFactory interface introduced in RabbitMQ Java Client 5.0. This interface allows for more flexible specification of client certificates, enabling different connections to use different certificates based on the connection name.

LANGUAGE: java
CODE:
public interface SslContextFactory {

    SSLContext create(String name);

}

----------------------------------------

TITLE: Configuring RabbitMQ Node Name
DESCRIPTION: Example configuration that changes the default node name prefix from 'rabbit' to 'hare' using the NODENAME variable in rabbitmq-env.conf.

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
NODENAME=hare

----------------------------------------

TITLE: Shutting Down a RabbitMQ Node
DESCRIPTION: Shuts down the node, both RabbitMQ and its runtime. The command is blocking and will return after the runtime process exits.

LANGUAGE: bash
CODE:
rabbitmqctl shutdown

----------------------------------------

TITLE: Configuring multiple OAuth 2.0 providers for RabbitMQ
DESCRIPTION: Define multiple OAuth 2.0 providers in RabbitMQ configuration for different realms

LANGUAGE: ini
CODE:
auth_oauth2.oauth_providers.devkeycloak.issuer = https://keycloak:8443/realms/dev
auth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem
auth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer
auth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard

auth_oauth2.oauth_providers.prodkeycloak.issuer = https://keycloak:8443/realms/prod
auth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem
auth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer
auth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard

----------------------------------------

TITLE: Configuring Stream TCP Listener Port
DESCRIPTION: Configuration example for changing the default Stream plugin TCP listener port to 12345.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Checking Out a Specific Version in Git
DESCRIPTION: This command demonstrates how to check out a specific tagged version in a Git repository. In this example, it's checking out version 3.13.0 of RabbitMQ.

LANGUAGE: bash
CODE:
git checkout v3.13.0

----------------------------------------

TITLE: Declaring a Priority Queue in RabbitMQ using Java
DESCRIPTION: This snippet demonstrates how to declare a priority queue in RabbitMQ using the Java client. It sets the 'x-max-priority' optional argument to 10, indicating the maximum priority the queue should support.

LANGUAGE: java
CODE:
Channel ch = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-priority", 10);
ch.queueDeclare("my-priority-queue", true, false, false, args);

----------------------------------------

TITLE: Running RPC Server and Client
DESCRIPTION: Commands to execute the RPC server and client applications.

LANGUAGE: bash
CODE:
java -cp $CP RPCServer
# => [x] Awaiting RPC requests

LANGUAGE: bash
CODE:
java -cp $CP RPCClient
# => [x] Requesting fib(30)

----------------------------------------

TITLE: Calculating Minimum Network Bandwidth Formula
DESCRIPTION: Formula to calculate the minimum required network bandwidth for RabbitMQ cluster nodes based on message rate and size.

LANGUAGE: ini
CODE:
MR * MS * 110% * 8

----------------------------------------

TITLE: Testing Message Priorities with OMQ in RabbitMQ 4.0
DESCRIPTION: This code snippet demonstrates how to test message priorities using the OMQ testing client for AMQP 1.0. It shows how to declare a quorum queue, publish normal and high priority messages, and consume them to observe the priority behavior.

LANGUAGE: bash
CODE:
# declare a quorum queue (you can use the Management UI or any other method)
rabbitmqadmin declare queue name=qq queue_type=quorum
# publish normal priority messages (10 publishers, 10k messages each)
omq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 1 --pmessages 10000
# publish high priority messages
omq amqp --publishers 10 --consumers 0 --publish-to /queues/qq --message-priority 10 --pmessages 10000
# consume all messages from the queue
omq amqp --publishers 0 --consumers 1 --consume-from /queues/qq --consumer-credits 100

----------------------------------------

TITLE: Running RPC Server and Client
DESCRIPTION: Commands to execute the RPC server and client applications.

LANGUAGE: bash
CODE:
java -cp $CP RPCServer
# => [x] Awaiting RPC requests

LANGUAGE: bash
CODE:
java -cp $CP RPCClient
# => [x] Requesting fib(30)

----------------------------------------

TITLE: Configuring Quorum Queue WAL Segment Size
DESCRIPTION: Configuration setting to control the write-ahead log segment size limit for quorum queues, which determines how much message data can be kept in memory under steady load.

LANGUAGE: ini
CODE:
# Flush current WAL file to a segment file on disk once it reaches 32 MiB in size
raft.wal_max_size_bytes = 32000000

----------------------------------------

TITLE: Creating Passwordless User Commands
DESCRIPTION: Shell commands for creating and configuring a passwordless user in RabbitMQ.

LANGUAGE: bash
CODE:
rabbitmqctl add_user passwordless-user "pa$$wordless"
rabbitmqctl clear_password passwordless-user

----------------------------------------

TITLE: Passing Arguments to CLI Tools
DESCRIPTION: Examples of how to pass arguments and options to RabbitMQ CLI tools.

LANGUAGE: bash
CODE:
rabbitmqctl add_user "a-user" "a-pa$$w0rd"

rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "a-pa$$w0rd"

rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "--!a-pa$$w0rd"

rabbitmqctl add_user --node=rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "a-pa$$w0rd"

----------------------------------------

TITLE: Configuring STOMP TCP Listener Port
DESCRIPTION: Basic configuration to change the STOMP listener port to 12345.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 12345

----------------------------------------

TITLE: Asynchronous Publisher Confirms Setup
DESCRIPTION: Initial setup for handling publisher confirms asynchronously using confirm listeners.

LANGUAGE: java
CODE:
Channel channel = connection.createChannel();
channel.confirmSelect();
channel.addConfirmListener((sequenceNumber, multiple) -> {
    // code when message is confirmed
}, (sequenceNumber, multiple) -> {
    // code when message is nack-ed
});

----------------------------------------

TITLE: Configuring Stream Advertised Host and Port
DESCRIPTION: Configuration to specify the advertised host and port for stream protocol topology discovery.

LANGUAGE: ini
CODE:
stream.advertised_host = rabbitmq-1
stream.advertised_port = 12345

----------------------------------------

TITLE: Installing RabbitMQ Signing Keys
DESCRIPTION: Commands for importing RabbitMQ package signing keys required for package verification

LANGUAGE: bash
CODE:
## primary RabbitMQ signing key
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'
## modern Erlang repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'
## RabbitMQ server repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'

----------------------------------------

TITLE: Displaying RabbitMQ memory breakdown
DESCRIPTION: Use rabbitmq-diagnostics to display a breakdown of memory usage for a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q memory_breakdown --unit "MB"
# => {detailed memory breakdown output}

----------------------------------------

TITLE: Enabling MQTT Plugin in RabbitMQ
DESCRIPTION: Command to enable the MQTT plugin using rabbitmq-plugins

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_mqtt

----------------------------------------

TITLE: Enabling MQTT Plugin in RabbitMQ
DESCRIPTION: Command to enable the MQTT plugin using rabbitmq-plugins

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_mqtt

----------------------------------------

TITLE: Checking Service Status
DESCRIPTION: Command to verify service deployment status

LANGUAGE: bash
CODE:
kubectl get svc
# => NAME                        TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                                          AGE
# => service/rabbitmq-client     LoadBalancer   10.59.244.70   34.105.135.216   15672:30902/TCP,15692:30605/TCP,5672:31210/TCP   2m19s

----------------------------------------

TITLE: Troubleshooting Authorisation in RabbitMQ
DESCRIPTION: Examples of log messages and commands for troubleshooting authorisation issues in RabbitMQ.

LANGUAGE: ini
CODE:
2019-03-25 12:26:16.301 [info] <0.1594.0> accepting AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672)
2019-03-25 12:26:16.309 [error] <0.1594.0> Error on AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672, user: 'user2', state: opening):
access to vhost '/' refused for user 'user2'
2019-03-25 12:26:16.310 [info] <0.1594.0> closing AMQP connection <0.1594.0> (127.0.0.1:63793 -> 127.0.0.1:5672, vhost: 'none', user: 'user2')

LANGUAGE: bash
CODE:
rabbitmqctl list_permissions --vhost /
# => Listing permissions for vhost "/" ...
# => user	configure	write	read
# => user2	.*	.*	.*
# => guest	.*	.*	.*
# => temp-user	.*	.*	.*

rabbitmqctl list_permissions --vhost gw1
# => Listing permissions for vhost "gw1" ...
# => user	configure	write	read
# => guest	.*	.*	.*
# => user2	^user2	^user2	^user2

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat list_permissions --vhost /
rabbitmqctl.bat list_permissions --vhost gw1

LANGUAGE: ini
CODE:
2019-03-25 12:30:05.209 [error] <0.1627.0> Channel error on connection <0.1618.0> (127.0.0.1:63881 -> 127.0.0.1:5672, vhost: 'gw1', user: 'user2'), channel 1:
operation queue.declare caused a channel exception access_refused: access to queue 'user3.q1' in vhost 'gw1' refused for user 'user2'

----------------------------------------

TITLE: Enable Multiple Plugins
DESCRIPTION: Command to enable specific plugins (shovel and management) along with their dependencies

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel rabbitmq_management

----------------------------------------

TITLE: Computing Password Hash via RabbitMQ HTTP API
DESCRIPTION: This curl command shows how to compute a password hash using RabbitMQ's HTTP API.

LANGUAGE: bash
CODE:
curl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz

----------------------------------------

TITLE: Deleting a Virtual Host using RabbitMQ CLI
DESCRIPTION: Shows how to delete a virtual host named 'qa1' using the rabbitmqctl command line tool.

LANGUAGE: bash
CODE:
rabbitmqctl delete_vhost qa1

----------------------------------------

TITLE: Configuring RabbitmqCluster for Openshift Security Context
DESCRIPTION: YAML configuration to override the default security context in RabbitmqCluster deployment for Openshift compatibility. This configuration allows Pods to run with arbitrary UIDs assigned by Openshift instead of fixed, non-root UIDs.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  ...
spec:
  ...
  override:
    statefulSet:
      spec:
        template:
          spec:
            containers: []
            securityContext: {}

----------------------------------------

TITLE: RabbitMQ Unacceptable Trademark Variations
DESCRIPTION: List of prohibited variations and abbreviations of the RabbitMQ trademark.

LANGUAGE: markdown
CODE:
* RMQ\n* MyRabbitMQ\n* RabbitMQ Messaging\n* RabbitMQ Guru

----------------------------------------

TITLE: Computing Password Hash via RabbitMQ HTTP API
DESCRIPTION: This curl command shows how to compute a password hash using RabbitMQ's HTTP API.

LANGUAGE: bash
CODE:
curl -4su guest:guest -X GET localhost:15672/api/auth/hash_password/foobarbaz

----------------------------------------

TITLE: Starting RabbitMQ Docker Container
DESCRIPTION: Commands to start RabbitMQ in Docker with Entra ID OAuth 2.0 configuration

LANGUAGE: bash
CODE:
export MODE=entra
make start-rabbitmq

----------------------------------------

TITLE: Launching Keycloak for OAuth 2.0
DESCRIPTION: Start Keycloak Docker container for OAuth 2.0 authentication

LANGUAGE: bash
CODE:
make start-keycloak

----------------------------------------

TITLE: Installing RabbitMQ Signing Keys
DESCRIPTION: Commands for importing RabbitMQ package signing keys required for package verification

LANGUAGE: bash
CODE:
## primary RabbitMQ signing key
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc'
## modern Erlang repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key'
## RabbitMQ server repository
rpm --import 'https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key'

----------------------------------------

TITLE: Publishing Message with TTL in C#
DESCRIPTION: C# code example showing how to publish a message with a TTL of 60 seconds using message properties

LANGUAGE: csharp
CODE:
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

IBasicProperties props = model.CreateBasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Expiration = "60000";

model.BasicPublish(exchangeName,
                   routingKey, props,
                   messageBodyBytes);

----------------------------------------

TITLE: Maven Dependency Configuration
DESCRIPTION: Maven dependency configuration for including the HOP client in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>http-client</artifactId>
    <version>2.0.0.RELEASE</version>
</dependency>

----------------------------------------

TITLE: Configuring MQTT Plugin Settings
DESCRIPTION: Sample configuration for MQTT plugin settings in RabbitMQ

LANGUAGE: ini
CODE:
mqtt.listeners.tcp.default = 1883
mqtt.allow_anonymous  = true
mqtt.vhost            = /
mqtt.exchange         = amq.topic
mqtt.prefetch         = 10
mqtt.max_session_expiry_interval_seconds = 86400

----------------------------------------

TITLE: Configuring DLX Using RabbitMQ Policy - PowerShell
DESCRIPTION: Sets a RabbitMQ policy to configure a dead letter exchange named 'my-dlx' that applies to all queues using rabbitmqctl command in Windows PowerShell.

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy DLX ".*" "{""dead-letter-exchange"":""my-dlx""}" --apply-to queues

----------------------------------------

TITLE: Configuring Heartbeats in Java Client
DESCRIPTION: Sets up heartbeat timeout to 60 seconds using the RabbitMQ Java client ConnectionFactory. The heartbeat timeout determines how long to wait before considering a connection dead.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();

// set the heartbeat timeout to 60 seconds
cf.setRequestedHeartbeat(60);

----------------------------------------

TITLE: Configuring EPMD Address
DESCRIPTION: Setting the EPMD address using environment variables for IPv6 loopback interface.

LANGUAGE: bash
CODE:
# makes epmd listen on loopback IPv6 and IPv4 interfaces
export ERL_EPMD_ADDRESS="::1"

----------------------------------------

TITLE: Peeking Queue Messages in RabbitMQ
DESCRIPTION: Command to view message details at a specific position in a quorum queue.

LANGUAGE: bash
CODE:
rabbitmq-queues peek --vhost "a-vhost" "a-queue" "1"

----------------------------------------

TITLE: RabbitMQ Log Example of Short-Lived Connection
DESCRIPTION: This snippet shows an example of RabbitMQ log entries for a short-lived connection, which can be an indicator of high connection churn.

LANGUAGE: ini
CODE:
2018-06-17 16:23:29.851 [info] <0.634.0> accepting AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672)
2018-06-17 16:23:29.853 [info] <0.634.0> connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'
2018-06-17 16:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')

----------------------------------------

TITLE: Setting Default User Credentials for STOMP
DESCRIPTION: Configuration to set default login and passcode for STOMP connections.

LANGUAGE: ini
CODE:
stomp.default_user = guest
stomp.default_pass = guest

----------------------------------------

TITLE: Setting RabbitMQ User Topic Permissions
DESCRIPTION: Sets topic permissions for a user in a specific virtual host and exchange.

LANGUAGE: bash
CODE:
rabbitmqctl set_topic_permissions -p my-vhost janeway amq.topic "^janeway-.*" "^janeway-.*"

----------------------------------------

TITLE: Visualizing RabbitMQ RPC Flow with Mermaid Flowchart
DESCRIPTION: This Mermaid flowchart illustrates the RPC flow in RabbitMQ. It shows a client sending a request to a server through an 'rpc_queue', and the server responding through a generated reply queue. The diagram includes details such as correlation IDs and queue names.

LANGUAGE: mermaid
CODE:
flowchart LR
    C((Client))
    S((Server))
    Q1[[rpc_queue]]
    Q2[[amq.gen-Xa2…]]
    Request["`Request
    reply_to=amq.gen-Xa2…
    correlation_id=abc`"]
    Reply["`Reply
    correlation_id=abc`"]

    C --- Request --> Q1 --> S --> Q2 --- Reply --> C

    class C mermaid-producer
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class S mermaid-consumer
    class Request mermaid-msg
    class Reply mermaid-msg

----------------------------------------

TITLE: TLS Configuration in Classic Erlang Format
DESCRIPTION: Equivalent TLS configuration using the classic Erlang terms format for comparison.

LANGUAGE: erlang
CODE:
[
  {rabbit, [{ssl_options, [{cacertfile,           "/path/to/testca/cacert.pem"},
                           {certfile,             "/path/to/server/cert.pem"},
                           {keyfile,              "/path/to/server/key.pem"},
                           {verify,               verify_peer},
                           {fail_if_no_peer_cert, true}]}]}
].

----------------------------------------

TITLE: Configuring Multiple Plugin Directories
DESCRIPTION: Example of configuring multiple plugin directories in rabbitmq-env.conf file. This uses a colon-separated list for Unix-like systems.

LANGUAGE: bash
CODE:
PLUGINS_DIR="/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.11.6/plugins"

----------------------------------------

TITLE: Configuring DNS-based Peer Discovery
DESCRIPTION: Example of how to configure DNS-based peer discovery in RabbitMQ.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = dns

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns

cluster_formation.dns.hostname = discovery.eng.example.local

----------------------------------------

TITLE: Requeueing Messages with Custom Annotations in AMQP 1.0 Java Client
DESCRIPTION: This code snippet demonstrates how to requeue a message at the head of a quorum queue with custom message annotations using the RabbitMQ AMQP 1.0 Java Client. It sets specific annotations for requeue reason, time, and consumer identity.

LANGUAGE: java
CODE:
Consumer consumer = connection.consumerBuilder()
    .queue(ordersQueue)
    .messageHandler((context, message) -> {
        Map<String, Object> annotations = new HashMap<>();
        annotations.put("x-opt-requeue-reason", "external_service_unavailable");
        annotations.put("x-opt-requeue-time", System.currentTimeMillis());
        annotations.put("x-opt-requeued-by", "consumer_1");
        context.requeue(annotations);
    }).build();

----------------------------------------

TITLE: Defining RabbitMQ Queue Resource in Kubernetes YAML
DESCRIPTION: This snippet demonstrates how to define a RabbitMQ Queue resource using the Messaging Topology Operator's Custom Resource Definition. It specifies a quorum queue with its name, vhost, and cluster reference.

LANGUAGE: yaml
CODE:
---
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: my-queue
spec:
  name: my-queue
  vhost: my-vhost
  type: quorum
  rabbitmqClusterReference:
    name: my-rabbit-cluster

----------------------------------------

TITLE: Peeking Queue Messages in RabbitMQ
DESCRIPTION: Command to view message details at a specific position in a quorum queue.

LANGUAGE: bash
CODE:
rabbitmq-queues peek --vhost "a-vhost" "a-queue" "1"

----------------------------------------

TITLE: Establishing RabbitMQ Connection - Remote Server
DESCRIPTION: Code to establish a connection to a remote RabbitMQ server by specifying the hostname.

LANGUAGE: ruby
CODE:
connection = Bunny.new(hostname: 'rabbit.local')
connection.start

----------------------------------------

TITLE: Configuring RabbitMQ Node Name in rabbitmq-env.conf
DESCRIPTION: This snippet demonstrates how to set a custom node name prefix in the rabbitmq-env.conf file. It changes the default prefix from "rabbit" to "hare".

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
NODENAME=hare

----------------------------------------

TITLE: Visualizing RabbitMQ Message Flow with Mermaid
DESCRIPTION: A flowchart diagram showing the basic message flow in RabbitMQ from Producer (P) through Queue to Consumer (C). The diagram uses different node styles to distinguish between components and shows directional flow with arrows.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    Q[[Queue]]
    C((C))

    P --> Q --> C

    class P mermaid-producer
    class Q mermaid-queue
    class C mermaid-consumer

----------------------------------------

TITLE: YTT Overlay for Automatic RabbitMQ Cluster Operator Configuration
DESCRIPTION: YAML configuration for a ytt overlay to automatically add environment variables to the RabbitMQ Cluster Operator deployment during upgrades.

LANGUAGE: yaml
CODE:
#@ load("@ytt:overlay", "overlay")
#@ deployment = overlay.subset({"kind": "Deployment"})
#@ cluster_operator = overlay.subset({"metadata": {"name": "rabbitmq-cluster-operator"}})
#@overlay/match by=overlay.and_op(deployment, cluster_operator),expects="1+"
---
spec:
  template:
    spec:
      containers:
      #@overlay/match by=overlay.subset({"name": "operator"}),expects="1+"
      -
        #@overlay/match missing_ok=True
        env:
        - name: OPERATOR_SCOPE_NAMESPACE
          value: custom-namespace

----------------------------------------

TITLE: Running Qpid Python Test Suite Against RabbitMQ
DESCRIPTION: Command to execute the Qpid Python test suite for AMQP 0-8 and 0-9 protocols against a RabbitMQ broker.

LANGUAGE: bash
CODE:
python2.7 ./qpid-python-test -m tests_0-9 -m tests_0-8

----------------------------------------

TITLE: Configuring RabbitMQ Node Name in rabbitmq-env.conf
DESCRIPTION: This snippet demonstrates how to set a custom node name prefix in the rabbitmq-env.conf file. It changes the default prefix from "rabbit" to "hare".

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
NODENAME=hare

----------------------------------------

TITLE: Setting Global Parameter for MQTT Port to VHost Mapping
DESCRIPTION: Command to set the mqtt_port_to_vhost_mapping global parameter

LANGUAGE: bash
CODE:
rabbitmqctl set_global_parameter mqtt_port_to_vhost_mapping \
    '{"1883":"vhost1", "8883":"vhost1", "1884":"vhost2", "8884":"vhost2"}'

----------------------------------------

TITLE: Adding localhost entries for OAuth 2.0 setup
DESCRIPTION: Add entries to /etc/hosts file for local development of OAuth 2.0 with RabbitMQ

LANGUAGE: bash
CODE:
localhost keycloak devkeycloak prodkeycloak rabbitmq

----------------------------------------

TITLE: RPC Client Execution Commands
DESCRIPTION: Command line instructions for running the RPC client component and making a request.

LANGUAGE: bash
CODE:
cd RPCClient
dotnet run
# => [x] Requesting fib(30)

----------------------------------------

TITLE: Verifying New RabbitMQ Release Signing Key Signature
DESCRIPTION: Command to verify that the new RabbitMQ release signing key is signed by the old key. This step helps ensure the authenticity of the key transition.

LANGUAGE: bash
CODE:
gpg --check-sigs 0x6B73A36E6026DFCA

----------------------------------------

TITLE: Memory Breakdown CLI Output
DESCRIPTION: Sample output from rabbitmq-diagnostics memory_breakdown showing memory usage distribution across different categories.

LANGUAGE: ini
CODE:
quorum_queue_procs: 0.4181 gb (28.8%)
binary: 0.4129 gb (28.44%)
allocated_unused: 0.1959 gb (13.49%)
connection_other: 0.1894 gb (13.05%)
plugins: 0.0373 gb (2.57%)
other_proc: 0.0325 gb (2.24%)
code: 0.0305 gb (2.1%)
quorum_ets: 0.0303 gb (2.09%)
connection_readers: 0.0222 gb (1.53%)
other_system: 0.0209 gb (1.44%)
connection_channels: 0.017 gb (1.17%)
mgmt_db: 0.017 gb (1.17%)
metrics: 0.0109 gb (0.75%)
other_ets: 0.0073 gb (0.5%)
connection_writers: 0.007 gb (0.48%)
atom: 0.0015 gb (0.11%)
mnesia: 0.0006 gb (0.04%)
msg_index: 0.0002 gb (0.01%)
queue_procs: 0.0002 gb (0.01%)
reserved_unallocated: 0.0 gb (0.0%)

----------------------------------------

TITLE: Setting RabbitMQ Policies
DESCRIPTION: Examples showing how to set policies that apply to queues and exchanges. Demonstrates setting federation policy with upstream configuration.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me \
    "^federated\." '{"federation-upstream-set":"all"}' \
    --priority 1 \
    --apply-to exchanges

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_policy federate-me ^
    "^federated\." "{""federation-upstream-set"":""all""}" ^
    --priority 1 ^
    --apply-to exchanges

LANGUAGE: ini
CODE:
PUT /api/policies/%2f/federate-me
    {"pattern": "^federated\.",
     "definition": {"federation-upstream-set":"all"},
     "priority": 1,
    "apply-to": "exchanges"}

----------------------------------------

TITLE: Binding Exchanges in RabbitMQ using .NET
DESCRIPTION: This snippet shows how to bind one exchange to another in RabbitMQ using the .NET client. It uses the IModel#ExchangeBind method to bind a destination exchange to a source exchange with a specific routing key.

LANGUAGE: csharp
CODE:
var ch = conn.CreateModel();
ch.ExchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Running RabbitMQ Docker Container
DESCRIPTION: Command to start a RabbitMQ 3.13 container with management plugin enabled. Exposes AMQP port 5672 and management interface port 15672.

LANGUAGE: bash
CODE:
# latest RabbitMQ 3.13
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management

----------------------------------------

TITLE: Starting Keycloak Server
DESCRIPTION: Command to start the preconfigured Keycloak server

LANGUAGE: bash
CODE:
make start-keycloak

----------------------------------------

TITLE: Basic OAuth 2.0 Backend Configuration
DESCRIPTION: Minimal RabbitMQ configuration to enable OAuth 2.0 authentication backend

LANGUAGE: ini
CODE:
auth_backends.1 = rabbit_auth_backend_oauth2

----------------------------------------

TITLE: Configuring Custom Cache Module
DESCRIPTION: INI configuration to specify a custom cache module implementation.

LANGUAGE: ini
CODE:
auth_cache.cache_module = rabbit_auth_backend_ets_segmented

----------------------------------------

TITLE: Direct Exchange Declaration
DESCRIPTION: Creates a direct exchange for routing messages based on exact routing key matches.

LANGUAGE: python
CODE:
channel.exchange_declare(exchange='direct_logs',
                         exchange_type='direct')

----------------------------------------

TITLE: Configuring Dual Stack IPv4/IPv6 Listeners
DESCRIPTION: Configuration showing how to set up listeners for both IPv4 and IPv6 on localhost.

LANGUAGE: ini
CODE:
listeners.tcp.1 = 127.0.0.1:5672
listeners.tcp.2 = ::1:5672

----------------------------------------

TITLE: Configuring Federation Policy in PowerShell
DESCRIPTION: PowerShell version of the federation policy configuration command.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy queue-federation '^federated\.' '"{""federation-upstream-set"":""all""}"' --priority 10 --apply-to queues

----------------------------------------

TITLE: Configuring Authentication Backends in RabbitMQ
DESCRIPTION: Example configurations for setting up authentication backends in RabbitMQ's configuration file.

LANGUAGE: ini
CODE:
auth_backends.1 = internal

LANGUAGE: ini
CODE:
auth_backends.1 = ldap
auth_backends.2 = internal

LANGUAGE: ini
CODE:
auth_backends.1 = ldap
auth_backends.2 = rabbit_auth_backend_http

auth_http.user_path = http://my-authenticator-app/auth/user
auth_http.vhost_path = http://my-authenticator-app/auth/vhost
auth_http.resource_path = http://my-authenticator-app/auth/resource
auth_http.topic_path = http://my-authenticator-app/auth/topic

----------------------------------------

TITLE: Quick Setup of RabbitMQ Monitoring Stack in Kubernetes
DESCRIPTION: Clones the RabbitMQ Cluster Operator repository and runs a quickstart script to set up the entire RabbitMQ on Kubernetes stack, including monitoring and alerting components.

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/cluster-operator.git

# Optionally, set the name of the Slack channel and the Slack Webhook URL
# If you don't have a Slack Webhook URL, create one via https://api.slack.com/messaging/webhooks
# export SLACK_CHANNEL='#my-channel'
# export SLACK_API_URL='https://hooks.slack.com/services/paste/your/token'

./cluster-operator/observability/quickstart.sh

----------------------------------------

TITLE: Displaying Help for Specific Commands
DESCRIPTION: Demonstrates how to get usage information for a particular command using the help command or --help option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics help status

rabbitmq-diagnostics status --help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help add_vhost

rabbitmq-diagnostics.bat help status

rabbitmq-diagnostics.bat status --help

----------------------------------------

TITLE: Disabling a RabbitMQ Plugin with rabbitmq-plugins CLI
DESCRIPTION: Use the rabbitmq-plugins command to disable a plugin on a RabbitMQ node. This example disables the rabbitmq_top plugin.

LANGUAGE: bash
CODE:
rabbitmq-plugins disable rabbitmq_top

----------------------------------------

TITLE: Displaying Node Certificates
DESCRIPTION: Example of using the certificates command to display TLS certificates for every listener on the target node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics certificates

----------------------------------------

TITLE: Configuring Memory Calculation Strategy in RabbitMQ
DESCRIPTION: Sets the memory calculation strategy to 'rss' (Resident Set Size) for more accurate memory reporting.

LANGUAGE: ini
CODE:
vm_memory_calculation_strategy = rss

----------------------------------------

TITLE: TCP Socket Options Configuration
DESCRIPTION: Example of configuring TCP socket options for performance optimization, including buffer sizes and connection backlog.

LANGUAGE: ini
CODE:
tcp_listen_options.backlog = 128
tcp_listen_options.nodelay = true
tcp_listen_options.linger.on      = true
tcp_listen_options.linger.timeout = 0
tcp_listen_options.sndbuf = 196608
tcp_listen_options.recbuf = 196608

----------------------------------------

TITLE: Referencing RabbitMQ Guaranteed Multicast Module
DESCRIPTION: Reference to the guaranteed multicast (atomic broadcast) module implementation in RabbitMQ's source code

LANGUAGE: erlang
CODE:
http://hg.rabbitmq.com/rabbitmq-server/file/default/src/gm.erl

----------------------------------------

TITLE: Displaying Help for Specific Commands
DESCRIPTION: Demonstrates how to get usage information for a particular command using the help command or --help option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics help status

rabbitmq-diagnostics status --help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help add_vhost

rabbitmq-diagnostics.bat help status

rabbitmq-diagnostics.bat status --help

----------------------------------------

TITLE: Configuring MQTT Retained Message Store
DESCRIPTION: Configuration for using DETS (disk-based) store for retained messages

LANGUAGE: ini
CODE:
mqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets
mqtt.retained_message_store_dets_sync_interval = 2000

----------------------------------------

TITLE: Starting RabbitMQ Docker Container
DESCRIPTION: Shell commands to start RabbitMQ Docker container with Okta configuration

LANGUAGE: bash
CODE:
export MODE=okta
make start-rabbitmq

----------------------------------------

TITLE: Checking Stream Status in RabbitMQ
DESCRIPTION: Displays the status of a specified stream within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams stream_status --vhost "a-vhost" "a-stream"

----------------------------------------

TITLE: Setting Channel Max in Java
DESCRIPTION: Example of setting the maximum number of channels per connection using the RabbitMQ Java client.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();
// Ask for up to 32 channels per connection. Will have an effect as long as the server is configured
// to use a higher limit, otherwise the server's limit will be used.
cf.setRequestedChannelMax(32);

----------------------------------------

TITLE: Installing RabbitMQ with Chocolatey
DESCRIPTION: Command to install RabbitMQ using the Chocolatey package manager on Windows.

LANGUAGE: PowerShell
CODE:
choco install rabbitmq

----------------------------------------

TITLE: Cloning RabbitMQ Erlang Client Repository
DESCRIPTION: Command to clone the RabbitMQ Erlang client repository from GitHub using git.

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-erlang-client.git

----------------------------------------

TITLE: Referencing RabbitMQ Variable Queue Module in Erlang
DESCRIPTION: Shows the location of the variable_queue module in the RabbitMQ server codebase, which contains detailed information about the queue implementation.

LANGUAGE: erlang
CODE:
http://hg.rabbitmq.com/rabbitmq-server/file/default/src/rabbit_variable_queue.erl

----------------------------------------

TITLE: Configuring Federation Upstream in RabbitMQ
DESCRIPTION: This snippet demonstrates how to add a federation upstream named 'origin' using the rabbitmqctl command. The upstream is configured with a URI pointing to a remote RabbitMQ host.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: Running the Applications
DESCRIPTION: Commands to run the publisher and consumer applications

LANGUAGE: bash
CODE:
go run send.go
go run receive.go

----------------------------------------

TITLE: Configuring RabbitMQ Management UI for OAuth 2.0
DESCRIPTION: Essential configuration entries in rabbitmq.conf to enable OAuth 2.0 for the RabbitMQ Management UI.

LANGUAGE: ini
CODE:
management.oauth_enabled = true
management.oauth_client_id = rabbit_client_code
auth_oauth2.issuer = https://uaa:8443

----------------------------------------

TITLE: LDAP Virtual Host Access Query Configuration in Erlang
DESCRIPTION: Configures a simple LDAP query to determine whether users can access a virtual host based on the existence of a corresponding Organizational Unit in LDAP.

LANGUAGE: erlang
CODE:
{vhost_access_query, {exists, "ou=${vhost},ou=vhosts,dc=example,dc=com"}}

----------------------------------------

TITLE: Checking System Limits for RabbitMQ in Bash
DESCRIPTION: These commands are used to verify the system limits, particularly the maximum number of open files, which is crucial for RabbitMQ performance in production environments.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status

LANGUAGE: bash
CODE:
ulimit -a

----------------------------------------

TITLE: Running Topic-based Message Reception in Bash
DESCRIPTION: These bash commands demonstrate how to run the ReceiveLogsTopic program with different routing key patterns to receive specific types of log messages.

LANGUAGE: bash
CODE:
cd ReceiveLogsTopic
dotnet run "#"

LANGUAGE: bash
CODE:
cd ReceiveLogsTopic
dotnet run "kern.*"

LANGUAGE: bash
CODE:
cd ReceiveLogsTopic
dotnet run "*.critical"

LANGUAGE: bash
CODE:
cd ReceiveLogsTopic
dotnet run "kern.*" "*.critical"

----------------------------------------

TITLE: HTTP API Request Body for Setting User Limits
DESCRIPTION: This JSON structure represents the request body for setting a user limit value using the HTTP API.

LANGUAGE: javascript
CODE:
{"value": 20}

----------------------------------------

TITLE: Basic Shovel Definition Template
DESCRIPTION: Shows the basic template for defining a shovel with source, destination, acknowledgement mode and reconnection settings.

LANGUAGE: erlang
CODE:
{shovel_name, [
  {source, [
    %% protocol-specific source configuration goes here
  ]},
  {destination, [
    %% protocol-specific destination configuration goes here
  ]},
  %% 'confirm' is the default acknowledgement mode
  {ack_mode, confirm},
  %% reconnect with a 5 second delay
  {reconnect_delay, 5}
]}

----------------------------------------

TITLE: Deleting a Stream Replica in RabbitMQ
DESCRIPTION: Removes a stream replica from a specified node for a given queue in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams delete_replica --vhost "a-vhost" "a-queue" "rabbit@decomissioned-node"

----------------------------------------

TITLE: Gradle Dependency Configuration
DESCRIPTION: Gradle dependency configuration for including the HOP client in a project.

LANGUAGE: groovy
CODE:
compile 'com.rabbitmq:http-client:2.0.0.RELEASE'

----------------------------------------

TITLE: Enabling TLS with Peer Verification
DESCRIPTION: Configuration example for enabling TLS with peer verification on the Prometheus metrics endpoint

LANGUAGE: ini
CODE:
prometheus.ssl.port       = 15691
prometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem
prometheus.ssl.certfile   = /full/path/to/server_certificate.pem
prometheus.ssl.keyfile    = /full/path/to/server_key.pem
prometheus.ssl.password   = password-if-keyfile-is-encrypted
prometheus.ssl.verify     = verify_peer
prometheus.ssl.depth      = 2
prometheus.ssl.fail_if_no_peer_cert = true
## To enforce TLS (disable the non-TLS port):
# prometheus.tcp.listener = none

----------------------------------------

TITLE: Enabling TLS with Peer Verification
DESCRIPTION: Configuration example for enabling TLS with peer verification on the Prometheus metrics endpoint

LANGUAGE: ini
CODE:
prometheus.ssl.port       = 15691
prometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem
prometheus.ssl.certfile   = /full/path/to/server_certificate.pem
prometheus.ssl.keyfile    = /full/path/to/server_key.pem
prometheus.ssl.password   = password-if-keyfile-is-encrypted
prometheus.ssl.verify     = verify_peer
prometheus.ssl.depth      = 2
prometheus.ssl.fail_if_no_peer_cert = true
## To enforce TLS (disable the non-TLS port):
# prometheus.tcp.listener = none

----------------------------------------

TITLE: Deploying Web Portal for RabbitMQ OAuth2 Login
DESCRIPTION: Command to start the web portal application that facilitates Identity Provider Initiated Logon for RabbitMQ management UI.

LANGUAGE: bash
CODE:
make start-portal

----------------------------------------

TITLE: Deleting RabbitMQ Virtual Host
DESCRIPTION: Deletes a virtual host and all its associated resources.

LANGUAGE: bash
CODE:
rabbitmqctl delete_vhost a-vhost

----------------------------------------

TITLE: Resolving Hostnames Using RabbitMQ Diagnostics Tool
DESCRIPTION: These commands demonstrate how to use the rabbitmq-diagnostics tool to resolve hostnames and check resolver information.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics resolve_hostname node2.cluster.local.svc --address-family IPv6 -n rabbit@node1.cluster.local.svc

LANGUAGE: bash
CODE:
rabbitmq-diagnostics resolve_hostname node2.cluster.local.svc --address-family IPv4 --offline

LANGUAGE: bash
CODE:
rabbitmq-diagnostics resolver_info

----------------------------------------

TITLE: Sample Auth0 JWT Access Token Structure
DESCRIPTION: Example of an Auth0-issued JWT access token containing scopes and permissions for RabbitMQ authentication

LANGUAGE: javascript
CODE:
{
  "iss": "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/",
  "sub": "auth0|66d980b862efcd9f5144f42a",
  "aud": [
    "rabbitmq",
    "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo"
  ],
  "iat": 1725533554,
  "exp": 1725619954,
  "scope": "openid profile rabbitmq.tag:administrator",
  "azp": "IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2",
  "permissions": [
    "rabbitmq.configure:*/*",
    "rabbitmq.read:*/*",
    "rabbitmq.tag:administrator",
    "rabbitmq.write:*/*"
  ]
}

----------------------------------------

TITLE: Configuring RabbitMQ to Extract Scopes from Keycloak JWT
DESCRIPTION: JSON configuration examples for RabbitMQ to extract scopes from different claims in the Keycloak JWT payload.

LANGUAGE: json
CODE:
auth_oauth2.additional_scopes_key = realm_access.roles

LANGUAGE: json
CODE:
auth_oauth2.additional_scopes_key = realm_access.roles resource_access.account.roles

LANGUAGE: json
CODE:
auth_oauth2.additional_scopes_key = roles realm_access.roles resource_access.account.roles

----------------------------------------

TITLE: Memory Usage Analysis
DESCRIPTION: Displays node memory usage breakdown by category with specified unit

LANGUAGE: bash
CODE:
rabbitmq-diagnostics memory_breakdown --unit gigabytes

----------------------------------------

TITLE: Configuring RabbitMQ OAuth 2.0 with Custom Signing Keys
DESCRIPTION: This snippet shows the RabbitMQ configuration required when using custom signing keys with Microsoft Entra ID. It specifies the application ID parameter for the discovery endpoint.

LANGUAGE: ini
CODE:
auth_oauth2.discovery_endpoint_params.appid = {Application(client) ID}

----------------------------------------

TITLE: Locating RabbitMQ Installation
DESCRIPTION: Command to find information about the RabbitMQ installation, including file locations.

LANGUAGE: bash
CODE:
brew info rabbitmq

----------------------------------------

TITLE: Configuring STOMP TCP Listener Options
DESCRIPTION: Example of configuring various TCP listener options for STOMP.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 127.0.0.1:61613
stomp.listeners.tcp.2 = ::1:61613

stomp.tcp_listen_options.backlog = 4096
stomp.tcp_listen_options.recbuf  = 131072
stomp.tcp_listen_options.sndbuf  = 131072

stomp.tcp_listen_options.keepalive = true
stomp.tcp_listen_options.nodelay   = true

stomp.tcp_listen_options.exit_on_close = true
stomp.tcp_listen_options.send_timeout  = 120

----------------------------------------

TITLE: Basic RabbitMQ INI Configuration
DESCRIPTION: Example of basic RabbitMQ configuration using the sysctl/ini format in rabbitmq.conf

LANGUAGE: ini
CODE:
# this is a comment
listeners.tcp.default = 5673

----------------------------------------

TITLE: Running Dialyzer with Custom PLT
DESCRIPTION: Command to run dialyzer analysis on the client source code using a custom PLT file location.

LANGUAGE: bash
CODE:
make PLT=/path/to/plt dialyze

----------------------------------------

TITLE: Configuring HTTP Options for Web MQTT
DESCRIPTION: Advanced HTTP server settings for the Web MQTT plugin using Cowboy options.

LANGUAGE: ini
CODE:
web_mqtt.cowboy_opts.idle_timeout = 60000
web_mqtt.cowboy_opts.max_keepalive = 200
web_mqtt.cowboy_opts.max_headers   = 100
web_mqtt.cowboy_opts.max_empty_lines = 5
web_mqtt.cowboy_opts.max_request_line_length

----------------------------------------

TITLE: Installing RabbitMQ Cluster Operator Plugin
DESCRIPTION: Command to install the RabbitMQ plugin using Krew

LANGUAGE: bash
CODE:
kubectl krew install rabbitmq

----------------------------------------

TITLE: Configuring Definition Import from Local File at Boot Time in INI
DESCRIPTION: This configuration sets up RabbitMQ to import definitions from a local JSON file during node boot. It doesn't require the management plugin to be enabled.

LANGUAGE: ini
CODE:
definitions.import_backend = local_filesystem
definitions.local.path = /path/to/definitions/defs.json

----------------------------------------

TITLE: Defining Federation Upstream
DESCRIPTION: Examples of defining a federation upstream using CLI, Management UI, and HTTP API.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqp://target.hostname","expires":3600000}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream my-upstream `
    '"{""uri":""amqp://target.hostname"",""expires":3600000}"'

LANGUAGE: ini
CODE:
PUT /api/parameters/federation-upstream/%2f/my-upstream
{"value":{"uri":"amqp://target.hostname","expires":3600000}}

----------------------------------------

TITLE: Basic RabbitMQ INI Configuration
DESCRIPTION: Example of basic RabbitMQ configuration using the sysctl/ini format in rabbitmq.conf

LANGUAGE: ini
CODE:
# this is a comment
listeners.tcp.default = 5673

----------------------------------------

TITLE: Starting RabbitMQ with Keycloak Configuration
DESCRIPTION: Commands to start RabbitMQ with Keycloak integration

LANGUAGE: bash
CODE:
export MODE=keycloak
make start-rabbitmq

----------------------------------------

TITLE: Setting up a RabbitMQ Semaphore Queue in Java
DESCRIPTION: This code snippet demonstrates how to set up a semaphore queue in RabbitMQ using Java. It declares a durable queue named 'resource.semaphore' and publishes a message to it using the default exchange.

LANGUAGE: java
CODE:
channel.queueDeclare("resource.semaphore", true, false, false, null);
String message = "resource";
channel.basicPublish("", "resource.semaphore", null, message.getBytes());

----------------------------------------

TITLE: Installing RabbitMQ via Chocolatey
DESCRIPTION: Command to install RabbitMQ using the Chocolatey package manager on Windows systems.

LANGUAGE: powershell
CODE:
choco install rabbitmq

----------------------------------------

TITLE: Configuring Conditional Definition Import at Boot Time in INI
DESCRIPTION: This configuration sets up RabbitMQ to import definitions only if the file contents have changed. It can be used with local files or HTTPS URLs.

LANGUAGE: ini
CODE:
definitions.skip_if_unchanged = true

definitions.import_backend = local_filesystem
definitions.local.path = /path/to/definitions/defs.json

----------------------------------------

TITLE: Listing Stream Group Consumers in RabbitMQ
DESCRIPTION: Lists consumers of a stream consumer group in a vhost, allowing specification of consumer information items to display.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_group_consumers --stream stream-1 --reference stream-1 connection_name state

----------------------------------------

TITLE: Installing RabbitMQ Plugin via Krew
DESCRIPTION: Commands to install and use the kubectl rabbitmq plugin through Krew package manager.

LANGUAGE: bash
CODE:
kubectl krew install rabbitmq

----------------------------------------

TITLE: Example of Short-Lived Connection in RabbitMQ Logs
DESCRIPTION: This log snippet shows an example of a short-lived AMQP connection in RabbitMQ, lasting only a few milliseconds, which could be indicative of high connection churn.

LANGUAGE: ini
CODE:
2018-06-17 16:23:29.851 [info] <0.634.0> accepting AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672)
2018-06-17 16:23:29.853 [info] <0.634.0> connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'
2018-06-17 16:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')

----------------------------------------

TITLE: Installing RabbitMQ via Chocolatey
DESCRIPTION: Command to install RabbitMQ using the Chocolatey package manager on Windows systems.

LANGUAGE: powershell
CODE:
choco install rabbitmq

----------------------------------------

TITLE: Deploying Keycloak Server
DESCRIPTION: Command to deploy Keycloak on a dedicated network called keycloak_net

LANGUAGE: bash
CODE:
PROVIDER_NETWORK=keycloak_net make start-keycloak

----------------------------------------

TITLE: Modifying Shell Script Interpreter for Solaris Compatibility
DESCRIPTION: Replace the default shell interpreter with Solaris-specific POSIX-compliant shell to ensure proper script execution.

LANGUAGE: shell
CODE:
#!/bin/sh

LANGUAGE: shell
CODE:
#!/usr/xpg4/bin/sh

----------------------------------------

TITLE: Modifying RabbitMQ Defaults Script for System Directories
DESCRIPTION: This code snippet shows how to modify the rabbitmq-defaults script to use system directories instead of the installation directory for configuration and data storage.

LANGUAGE: bash
CODE:
PREFIX=${RABBITMQ_HOME}

LANGUAGE: bash
CODE:
SYS_PREFIX=

----------------------------------------

TITLE: Listing RabbitMQ Queues - Windows
DESCRIPTION: Command to list all queues in RabbitMQ using rabbitmqctl tool on Windows systems.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat list_queues

----------------------------------------

TITLE: Compiling with Erlando Extensions
DESCRIPTION: Shell commands demonstrating how to compile Erlang files with the Erlando parse transformers.

LANGUAGE: shell
CODE:
erlc -Wall +debug_info -I ./include -pa ebin -o ebin  src/cut.erl
erlc -Wall +debug_info -I ./include -pa ebin -o ebin  src/do.erl
erlc -Wall +debug_info -I ./include -pa test/ebin -pa ./ebin -o test/ebin test/src/test.erl

----------------------------------------

TITLE: Accessing RabbitMQ Management API with OAuth 2.0 Token
DESCRIPTION: Bash command to access the RabbitMQ management API using an OAuth 2.0 token from Keycloak.

LANGUAGE: bash
CODE:
make curl-keycloak url=https://localhost:15671/api/overview client_id=mgt_api_client secret=LWOuYqJ8gjKg3D2U8CJZDuID3KiRZVDa realm=test

----------------------------------------

TITLE: Cloning RabbitMQ Server Repository
DESCRIPTION: Command to clone the RabbitMQ server source code from GitHub repository

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-server.git rabbitmq

----------------------------------------

TITLE: Binding Exchanges in RabbitMQ using Java
DESCRIPTION: This snippet demonstrates how to bind one exchange to another in RabbitMQ using the Java client. It uses the Channel#exchangeBind method to bind a destination exchange to a source exchange with a specified routing key.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();
ch.exchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Binding Exchanges in RabbitMQ using Java
DESCRIPTION: This snippet demonstrates how to bind one exchange to another in RabbitMQ using the Java client. It uses the Channel#exchangeBind method to bind a destination exchange to a source exchange with a specified routing key.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();
ch.exchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Message Publishing in C#
DESCRIPTION: Publishing messages with headers and properties to a RabbitMQ exchange

LANGUAGE: csharp
CODE:
byte[] messageBodyBytes = System.Text.Encoding.UTF8.GetBytes("Hello, world!");

var props = new BasicProperties();
props.ContentType = "text/plain";
props.DeliveryMode = 2;
props.Headers = new Dictionary<string, object>();
props.Headers.Add("latitude",  51.5252949);
props.Headers.Add("longitude", -0.0905493);

await channel.BasicPublishAsync(exchangeName, routingKey, true, props, messageBodyBytes);

----------------------------------------

TITLE: Creating Gatekeeper ConstraintTemplate for Queue Validation in YAML
DESCRIPTION: This YAML defines a ConstraintTemplate for validating RabbitMQ Queues. It includes Rego code to check if the RabbitMQ cluster name and vhost match the allowed values specified in the constraint parameters.

LANGUAGE: yaml
CODE:
---
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: queuevalidator
spec:
  crd:
    spec:
      names:
        kind: QueueValidator
      validation:
        openAPIV3Schema:
          properties:
            rabbit:
              type: string
            vhost:
              type: string
  targets:
  - target: admission.k8s.gatekeeper.sh
    rego: |
      package queuevalidator
      violation[{"msg":msg}] {
        allowedRabbit := input.parameters.rabbit
        givenRabbit := input.review.object.spec.rabbitmqClusterReference.name
        givenRabbit != allowedRabbit
        allowedVhost := input.parameters.vhost
        givenVhost := input.review.object.spec.vhost
        givenVhost != allowedVhost
        msg := sprintf("Rabbit Cluster must be %v, queues must be declared on vhost %v", [allowedRabbit, allowedVhost])
      }

----------------------------------------

TITLE: RabbitMQ Inter-node TLS Configuration File
DESCRIPTION: Example of /etc/rabbitmq/inter_node_tls.config file for configuring TLS settings for inter-node communication.

LANGUAGE: erlang
CODE:
[
  {server, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/server_certificate.pem"},
    {keyfile,    "/full/path/to/server_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer},
    {fail_if_no_peer_cert, true}
  ]},
  {client, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/client_certificate.pem"},
    {keyfile,    "/full/path/to/client_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer}
  ]}
].

----------------------------------------

TITLE: Declaring Fanout Exchange in Elixir
DESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts messages to all bound queues.

LANGUAGE: elixir
CODE:
AMQP.Exchange.declare(channel, "logs", :fanout)

----------------------------------------

TITLE: Enabling Prometheus Plugin
DESCRIPTION: Shows how to enable the RabbitMQ Prometheus plugin for monitoring

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_prometheus

----------------------------------------

TITLE: Configuring Identity-Provider Initiated Logon
DESCRIPTION: Configuration entries required in rabbitmq.conf to enable Identity-Provider initiated logon for the RabbitMQ Management UI.

LANGUAGE: ini
CODE:
# ...
management.oauth_enabled = true
management.oauth_initiated_logon_type = idp_initiated
management.oauth_provider_url = http://localhost:8080
# ...

----------------------------------------

TITLE: Adding Host Entries
DESCRIPTION: Required host entries to be added to the system's hosts file for local development

LANGUAGE: text
CODE:
localhost keycloak rabbitmq

----------------------------------------

TITLE: Setting HA Policy in RabbitMQ 3.0
DESCRIPTION: Command to configure high availability policy for all non-system queues across all nodes in RabbitMQ 3.0. This replaces the previous x-ha-policy queue argument method.

LANGUAGE: shell
CODE:
rabbitmqctl set_policy HA '^(?!amq\\.).*' '{"ha-mode": "all"}'

----------------------------------------

TITLE: Setting RabbitMQ Parameter
DESCRIPTION: Sets a parameter for a specific component.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream node01 '{"uri":"amqp://user:password@server/%2F","ack-mode":"on-publish"}'

----------------------------------------

TITLE: Configuring TCP Buffer Size for MQTT in RabbitMQ
DESCRIPTION: This example sets TCP buffer sizes for MQTT connections to 192 KiB and configures other TCP options.

LANGUAGE: ini
CODE:
mqtt.tcp_listen_options.backlog = 128
mqtt.tcp_listen_options.nodelay = true
mqtt.tcp_listen_options.linger.on      = true
mqtt.tcp_listen_options.linger.timeout = 0
mqtt.tcp_listen_options.sndbuf = 196608
mqtt.tcp_listen_options.recbuf = 196608

----------------------------------------

TITLE: Stream Message Publishing with Filtering
DESCRIPTION: Demonstrates how to publish messages to a stream with filter values for server-side filtering functionality.

LANGUAGE: java
CODE:
channel.basicPublish(
  "", // default exchange
  "my-stream",
  new AMQP.BasicProperties.Builder()
    .headers(Collections.singletonMap(
      "x-stream-filter-value", "california" // set filter value
    ))
    .build(),
  body
);

----------------------------------------

TITLE: RabbitMQ TLS Connection URI with Peer Verification
DESCRIPTION: Example of an encrypted AMQP connection URI with TLS peer verification enabled, including certificate paths and server name indication.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_peer&server_name_indication=myhost

----------------------------------------

TITLE: RabbitMQ Node Down Log Message
DESCRIPTION: Example log message showing how RabbitMQ reports a node becoming unavailable due to net tick timeout.

LANGUAGE: ini
CODE:
2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout

----------------------------------------

TITLE: Configuring systemd limits for RabbitMQ
DESCRIPTION: An example of how to set the max open file handle limit for RabbitMQ using systemd configuration.

LANGUAGE: ini
CODE:
[Service]
LimitNOFILE=64000

----------------------------------------

TITLE: Starting RabbitMQ with Auth0 Configuration
DESCRIPTION: Commands to start RabbitMQ with the Auth0 configuration. This sets the MODE environment variable to 'auth0' and uses a Makefile to start RabbitMQ.

LANGUAGE: bash
CODE:
export MODE=auth0
make start-rabbitmq

----------------------------------------

TITLE: Reinstalling RabbitMQ Formula
DESCRIPTION: Complete sequence of commands for uninstalling, cleaning up, and reinstalling RabbitMQ via Homebrew.

LANGUAGE: bash
CODE:
brew services stop rabbitmq
brew uninstall rabbitmq
rm -rf /opt/homebrew/etc/rabbitmq/
rm -rf /opt/homebrew/opt/rabbitmq/
rm -rf /opt/homebrew/var/lib/rabbitmq/
rm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist
brew install rabbitmq

----------------------------------------

TITLE: Opening a Channel in .NET
DESCRIPTION: Example of opening a new channel (called 'model' in .NET client) after opening a new connection using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();
var conn = cf.newConnection();

// the .NET client calls channels "models"
var ch = conn.CreateModel();

// ... use the channel to declare topology, publish, consume

----------------------------------------

TITLE: Opening a Channel in .NET
DESCRIPTION: Example of opening a new channel (called 'model' in .NET client) after opening a new connection using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory();
var conn = cf.newConnection();

// the .NET client calls channels "models"
var ch = conn.CreateModel();

// ... use the channel to declare topology, publish, consume

----------------------------------------

TITLE: Nginx Reverse Proxy Configuration
DESCRIPTION: Sample Nginx configuration for proxying requests to RabbitMQ management interface

LANGUAGE: nginxconf
CODE:
location / {
    proxy_pass http://rabbitmq-host:15672;
}

----------------------------------------

TITLE: Basic Cut Expression Example
DESCRIPTION: Shows before and after example of using cut expressions to simplify function abstraction.

LANGUAGE: erlang
CODE:
with_resource(Resource, Fun) ->
    case lookup_resource(Resource) of
        {ok, R}          -> Fun(R);
        {error, _} = Err -> Err
    end.

my_fun(A, B, C) ->
    with_resource(A, fun (Resource) ->
                            my_resource_modification(Resource, B, C)
                        end).

LANGUAGE: erlang
CODE:
my_fun(A, B, C) ->
    with_resource(A, my_resource_modification(_, B, C)).

----------------------------------------

TITLE: Receiving Messages from RabbitMQ in Objective-C
DESCRIPTION: Sets up a connection to RabbitMQ, creates a channel, declares a queue, and subscribes to receive messages. This snippet shows how to consume messages asynchronously using the RabbitMQ Objective-C client.

LANGUAGE: Objective-C
CODE:
- (void)receive {
    NSLog(@"Attempting to connect to local RabbitMQ broker");
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];

    RMQQueue *q = [ch queue:@"hello"];
    NSLog(@"Waiting for messages.");
    [q subscribe:^(RMQMessage * _Nonnull message) {
        NSLog(@"Received %@", [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);
    }];
}

----------------------------------------

TITLE: RabbitMQ Service Commands
DESCRIPTION: Core commands available in rabbitmq-service.bat for managing the RabbitMQ Windows service, including installation, removal, starting, stopping, and enabling/disabling the service.

LANGUAGE: batch
CODE:
rabbitmq-service.bat help    # Display usage information
rabbitmq-service.bat install  # Install the service
rabbitmq-service.bat remove   # Remove the service
rabbitmq-service.bat start    # Start the service
rabbitmq-service.bat stop     # Stop the service
rabbitmq-service.bat disable  # Disable the service
rabbitmq-service.bat enable   # Enable the service

----------------------------------------

TITLE: Implementing HTTP Server with RabbitMQ Integration
DESCRIPTION: HTTP server implementation that handles GET and POST requests, publishing messages to RabbitMQ exchange and displaying received messages.

LANGUAGE: javascript
CODE:
function httpServer(exchange) {
  var serv = http.createServer(function(req, res) {
    var url = URL.parse(req.url);
    if (req.method == 'GET' && url.pathname == '/env') {
      printEnv(res);
    }
    else if (req.method == 'GET' && url.pathname == '/') {
      res.statusCode = 200;
      openHtml(res);
      writeForm(res);
      writeMessages(res);
      closeHtml(res);
    }
    else if (req.method == 'POST' && url.pathname == '/') {
      chunks = '';
      req.on('data', function(chunk) { chunks += chunk; });
      req.on('end', function() {
        msg = unescapeFormData(chunks.split('=')[1]);
        exchange.publish('', {body: msg});
        res.statusCode = 303;
        res.setHeader('Location', '/');
        res.end();
      });
    }
    else {
      res.statusCode = 404;
      res.end("This is not the page you were looking for.");
    }
  });
  serv.listen(port);
}

----------------------------------------

TITLE: Basic Command Usage Examples
DESCRIPTION: Examples of common rabbitmqadmin commands for listing and inspecting RabbitMQ resources

LANGUAGE: shell
CODE:
rabbitmqadmin help
rabbitmqadmin show overview
rabbitmqadmin list nodes
rabbitmqadmin list vhosts
rabbitmqadmin list queues

----------------------------------------

TITLE: Setting Policy for STOMP Queues (Windows)
DESCRIPTION: Windows command to set a policy limiting STOMP queue length to 1000 messages.

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_policy stomp-queues "^stomp-" "{""max-length"":1000}" --apply-to queues

----------------------------------------

TITLE: Configuring Custom Scope Key in OAuth 2.0
DESCRIPTION: Example configuration for using a custom scope key in OAuth 2.0 token validation.

LANGUAGE: erlang
CODE:
[
  {rabbitmq_auth_backend_oauth2, [
    {resource_server_id, <<"my_rabbit_server">>},
    {extra_scopes_source, <<"my_custom_scope_key">>},
    ...
    ]}
].

----------------------------------------

TITLE: Getting Help for Specific Commands
DESCRIPTION: Display usage information for a particular command using the 'help' command or '--help' option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics help status

rabbitmqctl --help

rabbitmq-diagnostics --help

rabbitmq-diagnostics status --help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help add_vhost

rabbitmq-diagnostics.bat help status

rabbitmqctl.bat --help

rabbitmq-diagnostics.bat --help

rabbitmq-diagnostics.bat status --help

----------------------------------------

TITLE: Spring Boot Metrics Endpoint JSON Response
DESCRIPTION: Example JSON output from Spring Boot's metrics endpoint showing various RabbitMQ metrics including message counts and rates.

LANGUAGE: json
CODE:
{
    "rabbitmq.acknowledged.count": 5445,
    "rabbitmq.acknowledged.fifteenMinuteRate": 7.789880284345983,
    "rabbitmq.acknowledged.fiveMinuteRate": 9.311935481093306,
    "rabbitmq.acknowledged.meanRate": 9.930420428656602,
    "rabbitmq.acknowledged.oneMinuteRate": 9.972266275538352,
    "rabbitmq.channels": 2,
    "rabbitmq.connections": 1,
    "rabbitmq.consumed.count": 5445,
    "rabbitmq.consumed.fifteenMinuteRate": 7.789875530041546,
    "rabbitmq.consumed.fiveMinuteRate": 9.311910098253794,
    "rabbitmq.consumed.meanRate": 9.930418948751754,
    "rabbitmq.consumed.oneMinuteRate": 9.972238610447798,
    "rabbitmq.published.count": 5445,
    "rabbitmq.published.fifteenMinuteRate": 7.789875530041546,
    "rabbitmq.published.fiveMinuteRate": 9.311910098253794,
    "rabbitmq.published.meanRate": 9.930419905146142,
    "rabbitmq.published.oneMinuteRate": 9.972238610447798,
    "rabbitmq.rejected.count": 0,
    "rabbitmq.rejected.fifteenMinuteRate": 0,
    "rabbitmq.rejected.fiveMinuteRate": 0,
    "rabbitmq.rejected.meanRate": 0,
    "rabbitmq.rejected.oneMinuteRate": 0
}

----------------------------------------

TITLE: Testing Consumer Priorities with Single Active Consumer using Perf-Test
DESCRIPTION: This code snippet shows how to test consumer priorities combined with Single Active Consumer using the perf-test tool. It demonstrates publishing messages, starting a consumer with default priority, and then starting a higher priority consumer to observe the switchover behavior.

LANGUAGE: bash
CODE:
# Publish 5000 messages to have a backlog (perf-test will declare a quorum queue `qq-sac`)
perf-test --quorum-queue --queue qq-sac --pmessages 5000 --confirm 100 -qa x-single-active-consumer=true --consumers 0
# Start a consumer with the default priority and prefetch of 1000; consume ~10 msgs/s
perf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000
# In another window, some time after starting the first consumer, start a higher priority consumer
perf-test --producers 0 --predeclared --queue qq-sac --consumer-latency 100000 --qos 1000 --consumer-args x-priority=10

----------------------------------------

TITLE: Management UI OAuth Configuration
DESCRIPTION: Configuration for enabling OAuth 2.0 authentication in RabbitMQ management UI with multiple resources

LANGUAGE: ini
CODE:
management.oauth_resource_servers.1.id = rabbit_prod
management.oauth_resource_servers.1.client_id = rabbit_prod_mgt_ui
management.oauth_resource_servers.1.label = RabbitMQ Production
management.oauth_resource_servers.1.scopes = openid profile rabbitmq.tag:administrator

management.oauth_resource_servers.2.id = rabbit_dev
management.oauth_resource_servers.2.client_id = rabbit_dev_mgt_ui
management.oauth_resource_servers.2.label = RabbitMQ Development
management.oauth_resource_servers.2.scopes = openid profile rabbitmq.tag:management

----------------------------------------

TITLE: Binding Queues to a Direct Exchange in RabbitMQ with JavaScript
DESCRIPTION: This snippet demonstrates how to bind queues to a direct exchange in RabbitMQ, creating a new binding for each severity of interest.

LANGUAGE: javascript
CODE:
args.forEach(function(severity) {
  channel.bindQueue(q.queue, exchange, severity);
});

----------------------------------------

TITLE: Exploring Available Command Groups in rabbitmqadmin
DESCRIPTION: Shows how to use the help command to list available command groups in rabbitmqadmin.

LANGUAGE: shell
CODE:
rabbitmqadmin help

----------------------------------------

TITLE: Detecting Network Partitions in RabbitMQ Logs
DESCRIPTION: Example of an error message in RabbitMQ logs indicating a network partition has occurred.

LANGUAGE: plaintext
CODE:
2020-05-18 06:55:37.324 [error] <0.341.0> Mnesia(rabbit@warp10): ** ERROR ** mnesia_event got {inconsistent_database, running_partitioned_network, rabbit@hostname2}

----------------------------------------

TITLE: Adding a Stream Replica in RabbitMQ
DESCRIPTION: Adds a stream replica on a specified node for a given queue in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams add_replica --vhost "a-vhost" "a-queue" "rabbit@new-node"

----------------------------------------

TITLE: Retrieving Queue Memory Usage via HTTP API
DESCRIPTION: Example of using curl to retrieve memory usage information for a specific queue through the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -s -u guest:guest http://127.0.0.1:15672/api/queues/%2f/queue-name | python -m json.tool

----------------------------------------

TITLE: Exporting Definitions Using HTTP API in Bash
DESCRIPTION: This curl command exports RabbitMQ definitions using the HTTP API. It requires the management plugin to be enabled and uses placeholders for credentials and hostname.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Configuring Peer Discovery Backend in RabbitMQ
DESCRIPTION: Example of configuring the peer discovery backend in the RabbitMQ config file.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = classic_config

# The backend can also be specified using its module name. Note that
# module names do not necessarily match plugin names exactly.
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

----------------------------------------

TITLE: Defining RabbitMQ Virtual Host
DESCRIPTION: YAML definition for a RabbitMQ Vhost resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Vhost
metadata:
  name: test-vhost
  namespace: rabbitmq-system
spec:
  name: test
  rabbitmqClusterReference:
    name: example-rabbit

----------------------------------------

TITLE: Configure Docker Container Limits
DESCRIPTION: JSON configuration for setting kernel limits in Docker daemon configuration

LANGUAGE: json
CODE:
{
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": 64000,
      "Soft": 64000
    }
  }
}

----------------------------------------

TITLE: Installing RabbitMQ Client with erlang.mk
DESCRIPTION: Dependency declaration for installing the rabbit_common package using erlang.mk build tool.

LANGUAGE: makefile
CODE:
dep_rabbit_common = hex &version-erlang-client;

----------------------------------------

TITLE: Implementing Topic-Based Log Emission in RabbitMQ with Objective-C
DESCRIPTION: Creates a connection to RabbitMQ and publishes messages to a topic exchange with specified routing keys. Messages are published using a routing key format of <facility>.<severity>.

LANGUAGE: objectivec
CODE:
- (void)emitLogTopic:(NSString *)msg routingKey:(NSString *)routingKey {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];
    RMQExchange *x    = [ch topic:@"topic_logs"];

    [x publish:[msg dataUsingEncoding:NSUTF8StringEncoding] routingKey:routingKey];
    NSLog(@"Sent '%@'", msg);

    [conn close];
}

----------------------------------------

TITLE: Annotating RabbitMQ Cluster with Custom URI
DESCRIPTION: Bash command to annotate a RabbitMQ cluster with a custom connection URI.

LANGUAGE: bash
CODE:
kubectl annotate rmq RMQ-NAME rabbitmq.com/operator-connection-uri=https://test:1234

----------------------------------------

TITLE: Disk Space Monitoring Log Example - Enabled
DESCRIPTION: Example log entries showing the initialization of disk space monitoring with a specified limit.

LANGUAGE: ini
CODE:
2019-04-01 12:02:11.564 [info] <0.329.0> Enabling free disk space monitoring
2019-04-01 12:02:11.564 [info] <0.329.0> Disk free limit set to 950MB

----------------------------------------

TITLE: Sample Output of AMQP Filter Expressions Application
DESCRIPTION: Console output demonstrating the behavior of publishers and consumers using AMQP filter expressions for color-based message filtering.

LANGUAGE: plaintext
CODE:
publisher sent message 0 with color green
publisher sent message 1 with color blue
publisher sent message 2 with color purple
publisher sent message 3 with color purple
publisher sent message 4 with color green
publisher sent message 5 with color green
consumer (filter green) received message 0
consumer (filter green) received message 4
consumer (filter green) received message 5
consumer (filter purple) received message 2
consumer (filter purple) received message 3
consumer (filter blue) received message 1
consumer (filter &s:e) received message 1
consumer (filter &s:e) received message 2
consumer (filter &s:e) received message 3

----------------------------------------

TITLE: Configuring MQTT Topic Alias Maximum in RabbitMQ
DESCRIPTION: Example configuration snippet for setting the MQTT topic alias maximum value in the RabbitMQ configuration file.

LANGUAGE: ini
CODE:
mqtt.topic_alias_maximum = 32

----------------------------------------

TITLE: Queue Binding Callback Implementation in Ruby AMQP
DESCRIPTION: Demonstrates the new callback functionality for MQ::Queue#bind operations.

LANGUAGE: ruby
CODE:
channel = MQ.new
fanout  = channel.fanout(:task_fanout)
channel.queue(:tasks).bind(fanout) do |queue|
  puts "Queue #{queue.name} was bound!"
end

----------------------------------------

TITLE: Configuring Operator Log Level
DESCRIPTION: YAML snippet showing how to configure the log level for the RabbitMQ Cluster Operator in the deployment manifest.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-cluster-operator
  namespace: rabbitmq-system
spec:
  template:
    spec:
      containers:
      - args:
        - --zap-log-level=debug
        command:
        - /manager

----------------------------------------

TITLE: Implementing Priority Consumer in RabbitMQ with Java
DESCRIPTION: Demonstrates how to create a RabbitMQ consumer with a specific priority level using the basic.consume method. The example shows setting a priority of 10 using the x-priority argument in the consumer configuration.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-priority", 10);
channel.basicConsume("my-queue", false, args, consumer);

----------------------------------------

TITLE: Stream PerfTest Metrics Output
DESCRIPTION: This shows the output of the Stream PerfTest metrics, displaying the total number of bytes read.

LANGUAGE: properties
CODE:
# HELP rabbitmq_stream_read_bytes_total
# TYPE rabbitmq_stream_read_bytes_total counter
rabbitmq_stream_read_bytes_total 1.0046894E7

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Okta Configuration
DESCRIPTION: This bash command sets the MODE environment variable to 'okta' and starts the RabbitMQ Docker container using a Makefile. It assumes that the necessary configuration files are present in the specified locations.

LANGUAGE: bash
CODE:
export MODE=okta
make start-rabbitmq

----------------------------------------

TITLE: Deploying RabbitMQ Monitoring Configuration
DESCRIPTION: Commands to deploy ServiceMonitor and PodMonitor for RabbitMQ cluster monitoring.

LANGUAGE: bash
CODE:
kubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-servicemonitor.yml

kubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-cluster-operator-podmonitor.yml

----------------------------------------

TITLE: Configuring Pause-if-all-down Partition Handling
DESCRIPTION: Example configuration snippet for setting up the pause-if-all-down partition handling strategy in RabbitMQ.

LANGUAGE: plaintext
CODE:
cluster_partition_handling = pause_if_all_down

## Recovery strategy. Can be either 'autoheal' or 'ignore'
cluster_partition_handling.pause_if_all_down.recover = ignore

## Node names to check
cluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1
cluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2

----------------------------------------

TITLE: Listing Stream Consumers in RabbitMQ
DESCRIPTION: Shows information about consumers attached to streams, with customizable output fields.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_consumers connection_pid subscription_id stream

----------------------------------------

TITLE: Configuring Channel Max Setting
DESCRIPTION: Example of how to set the maximum number of channels per connection using the channel_max configuration setting.

LANGUAGE: ini
CODE:
channel_max = 16

----------------------------------------

TITLE: Clearing User Limits via CLI
DESCRIPTION: Shows various commands for clearing user limits using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl clear_user_limits user1 'max-connections'

rabbitmqctl clear_user_limits user1 'max-channels'

rabbitmqctl clear_user_limits user1 all

----------------------------------------

TITLE: Debugging Pod with Persistent Volume in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a debug pod that mounts the persistent volume of a RabbitMQ node. This is useful for troubleshooting pods in CrashLoopBackOff state.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: debug-rabbitmq
spec:
  volumes:
    - name: persistence
      persistentVolumeClaim:
        claimName: persistence-RMQ_NAME-server-2
  containers:
    - name: debug-rabbitmq
      image: ... # you can use any image here, but for some tasks you should use the same image you use in the statefulset
      command: ["/bin/sleep", "36000"]
      volumeMounts:
        - mountPath: /var/lib/rabbitmq/mnesia/
          name: persistence

----------------------------------------

TITLE: Disk Free Limit Configuration - Absolute Value in Bytes
DESCRIPTION: Configuration example showing how to set disk free space limit to 1GB using absolute value in bytes.

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1000000000

----------------------------------------

TITLE: Implementing Queue Declaration Callback in Ruby AMQP
DESCRIPTION: Demonstrates the new synchronous API for Queue.Declare/Queue.Declare-Ok request/response exposed via asynchronous callback, allowing access to queue details and counts.

LANGUAGE: ruby
CODE:
channel = MQ.new
fanout  = channel.fanout(:task_fanout)
channel.queue(:tasks) do |queue, message_count, consumer_count|
  puts "Queue #{queue.name} declared!"
  puts "Message count: #{message_count}"
  puts "Consumer count: #{consumer_count}"
end

----------------------------------------

TITLE: Setting Memory Allocator Parameters
DESCRIPTION: Configures memory allocator settings to manage memory fragmentation and allocation strategy.

LANGUAGE: bash
CODE:
RABBITMQ_DEFAULT_ALLOC_ARGS="+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30"
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MHlmbcs 8192"
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 1024"

----------------------------------------

TITLE: Publishing Messages to Named Exchange in Go
DESCRIPTION: Publishes a message to the 'logs' exchange with an empty routing key. This will broadcast the message to all queues bound to the exchange.

LANGUAGE: go
CODE:
err = ch.PublishWithContext(ctx,
  "logs", // exchange
  "",     // routing key
  false,  // mandatory
  false,  // immediate
  amqp.Publishing{
          ContentType: "text/plain",
          Body:        []byte(body),
  })

----------------------------------------

TITLE: Configuring Multiple STOMP TCP Listeners
DESCRIPTION: Configuration for STOMP to listen on localhost for both IPv4 and IPv6.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 127.0.0.1:61613
stomp.listeners.tcp.2 = ::1:61613

----------------------------------------

TITLE: RabbitMQ MQTT Configuration
DESCRIPTION: Configuration settings for RabbitMQ MQTT with small TCP buffer sizes and disabled metrics collection for performance testing.

LANGUAGE: ini
CODE:
mqtt.tcp_listen_options.sndbuf = 1024
mqtt.tcp_listen_options.recbuf = 1024
mqtt.tcp_listen_options.buffer = 1024
management_agent.disable_metrics_collector = true

----------------------------------------

TITLE: Checking RabbitMQ Logs
DESCRIPTION: Commands to view RabbitMQ-specific log entries using journalctl.

LANGUAGE: bash
CODE:
sudo journalctl --system | grep rabbitmq

----------------------------------------

TITLE: Running RabbitMQ AMQP Server in Background
DESCRIPTION: This command starts the RabbitMQ AMQP server as a background process using the -detached option. When run in this mode, the process ID is not written to the PID file.

LANGUAGE: bash
CODE:
rabbitmq-server -detached

----------------------------------------

TITLE: Setting Classic Queue Default Version
DESCRIPTION: Configuration setting to specify the default version (v1 or v2) for classic queues, where v2 offers improved stability under high memory pressure.

LANGUAGE: ini
CODE:
# makes classic queues use a more efficient message storage
# and queue index implementations
classic_queue.default_version = 2

----------------------------------------

TITLE: Setting Default Classic Queue Version in RabbitMQ Configuration
DESCRIPTION: Configuration setting to make classic queue version 2 the default for new queues in RabbitMQ. This is recommended for improved performance and functionality.

LANGUAGE: ini
CODE:
classic_queue.default_version = 2

----------------------------------------

TITLE: Setting Memory Allocator Parameters
DESCRIPTION: Configures memory allocator settings to manage memory fragmentation and allocation strategy.

LANGUAGE: bash
CODE:
RABBITMQ_DEFAULT_ALLOC_ARGS="+MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30"
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MHlmbcs 8192"
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 1024"

----------------------------------------

TITLE: Creating Bindings for Multiple Severities in Elixir
DESCRIPTION: This code creates a new binding for each severity level of interest, allowing the consumer to receive messages of specific severities.

LANGUAGE: elixir
CODE:
for {severity, true} <- severities do
  binding_key = severity |> to_string
  AMQP.Queue.bind(channel, queue_name, "direct_logs", routing_key: binding_key)
end

----------------------------------------

TITLE: Web MQTT Client Setup
DESCRIPTION: HTML and JavaScript code showing how to set up a Web MQTT client using the Paho JavaScript library

LANGUAGE: html
CODE:
<!-- include the client library -->
<script src="mqttws31.js"></script>

LANGUAGE: javascript
CODE:
var wsbroker = location.hostname;
var wsport = 15675;
var client = new Paho.MQTT.Client(wsbroker, wsport, "/ws",
    "myclientid_" + parseInt(Math.random() * 100, 10));
client.onConnectionLost = function (responseObject) {
    debug("CONNECTION LOST - " + responseObject.errorMessage);
};
client.onMessageArrived = function (message) {
    debug("RECEIVE ON " + message.destinationName + " PAYLOAD " + message.payloadString);
    print_first(message.payloadString);
};

----------------------------------------

TITLE: Custom Domain Deployment Configuration
DESCRIPTION: Kubernetes deployment configuration showing how to set a custom domain name for the Messaging Topology Operator.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-topology-operator
  namespace: rabbitmq-system
spec:
  template:
    spec:
      containers:
      - command:
        - /manager
        env:
        - name: OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MESSAGING_DOMAIN_NAME
          value: "my.cluster.domain"

----------------------------------------

TITLE: Configuring Node Cleanup in RabbitMQ Peer Discovery
DESCRIPTION: Example of configuring automatic cleanup of unknown nodes in peer discovery.

LANGUAGE: ini
CODE:
# Don't remove cluster members unknown to the peer discovery backend but log
# warnings.
#
# This setting can only be used if a compatible peer discovery plugin is enabled.
cluster_formation.node_cleanup.only_log_warning = true

LANGUAGE: ini
CODE:
# Forcefully remove cluster members unknown to the peer discovery backend. Once removed,
# the nodes won't be able to rejoin. Use this mode with great care!
#
# This setting can only be used if a compatible peer discovery plugin is enabled.
cluster_formation.node_cleanup.only_log_warning = false

----------------------------------------

TITLE: Restarting a Stream in RabbitMQ
DESCRIPTION: Restarts a stream including all its replicas, with an option to specify a preferred leader node.

LANGUAGE: bash
CODE:
rabbitmq-streams restart_stream --vhost "a-vhost" "a-stream" --preferred-leader-node "node"

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Security Headers
DESCRIPTION: Configuration snippet to set various security-related headers for the management plugin.

LANGUAGE: ini
CODE:
management.hsts.policy = max-age=31536000; includeSubDomains
management.csp.policy = default-src 'self'; script-src 'self' 'unsafe-eval'

management.headers.content_type_options = nosniff
management.headers.xss_protection = 1; mode=block
management.headers.frame_options = DENY

----------------------------------------

TITLE: Closing Specific RabbitMQ Connection
DESCRIPTION: Closes a specific connection identified by its process ID.

LANGUAGE: bash
CODE:
rabbitmqctl close_connection "<rabbit@tanto.4262.0>" "go away"

----------------------------------------

TITLE: Updating Service Account with Image Pull Secret
DESCRIPTION: Command to patch the Operator service account with the image pull secret for private registry access.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system patch serviceaccount \
rabbitmq-cluster-operator -p '{"imagePullSecrets": [{"name": "rabbitmq-cluster-registry-access"}]}'

----------------------------------------

TITLE: Configuring Raft Segment File Entry Count for Small Messages
DESCRIPTION: Example of increasing the number of Raft log entries allowed in a segment file for workloads with small messages.

LANGUAGE: bash
CODE:
# Positive values up to 65535 are allowed, the default is 4096.
# This value is reasonable for workloads with small (say, smaller than 8 kiB) messages
raft.segment_max_entries = 32768

----------------------------------------

TITLE: Auto-named Queue Declaration in Ruby AMQP
DESCRIPTION: Shows how to declare queues with broker-generated random names, a feature newly supported in this version.

LANGUAGE: ruby
CODE:
channel = MQ.new
channel.queue("") do |queue|
  puts "Queue with name #{queue.name} declared!"
end

# OUTPUT: Queue with name amq.gen-PfCGdyBA4Sr4rkZg3IN3Kw== declared!

----------------------------------------

TITLE: Setting Alternate Exchange Using Bash
DESCRIPTION: Command to set an alternate exchange policy using rabbitmqctl in Bash. Defines 'my-ae' as the alternate exchange for 'my-direct' exchange.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy AE "^my-direct$" '{"alternate-exchange":"my-ae"}' --apply-to exchanges

----------------------------------------

TITLE: Prometheus Configuration Example
DESCRIPTION: YAML configuration showing Prometheus setup with label selectors for Pod and Service monitoring.

LANGUAGE: yaml
CODE:
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
spec:
  serviceAccountName: prometheus
  serviceMonitorSelector:
    matchLabels:
      team: frontend
  podMonitorSelector:
    matchLabels:
      team: frontend

----------------------------------------

TITLE: Configuring Multiple OAuth 2.0 Providers for RabbitMQ
DESCRIPTION: This configuration sets up two OAuth 2.0 providers for RabbitMQ, one for development and one for production, each with its own issuer URL and SSL settings.

LANGUAGE: ini
CODE:
auth_oauth2.oauth_providers.devkeycloak.issuer = https://keycloak:8443/realms/dev
auth_oauth2.oauth_providers.devkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem
auth_oauth2.oauth_providers.devkeycloak.https.verify = verify_peer
auth_oauth2.oauth_providers.devkeycloak.https.hostname_verification = wildcard

auth_oauth2.oauth_providers.prodkeycloak.issuer = https://keycloak:8443/realms/prod
auth_oauth2.oauth_providers.prodkeycloak.https.cacertfile = /etc/rabbitmq/keycloak-ca_certificate.pem
auth_oauth2.oauth_providers.prodkeycloak.https.verify = verify_peer
auth_oauth2.oauth_providers.prodkeycloak.https.hostname_verification = wildcard

----------------------------------------

TITLE: Importing RabbitMQ Signing Key via Direct Download
DESCRIPTION: Downloads and imports the RabbitMQ release signing key directly from GitHub using curl and GPG.

LANGUAGE: bash
CODE:
curl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc
gpg --import rabbitmq-release-signing-key.asc

----------------------------------------

TITLE: Consuming Stream Messages with Stream Protocol
DESCRIPTION: Shows how to consume messages from a stream using the RabbitMQ Stream Java client, including handling of message properties and annotations.

LANGUAGE: java
CODE:
environment.consumerBuilder()
  .stream("world")
  .offset(OffsetSpecification.first())
  .messageHandler((context, message) -> {
    String body = new String(message.getBodyAsBinary());
    log(
      "Message #%s, creation time %tF %tT, content type '%s', from exchange %s with routing key %s",
      message.getProperties().getMessageId(),
      message.getProperties().getCreationTime(),
      message.getProperties().getCreationTime(),
      message.getProperties().getContentType(),
      message.getMessageAnnotations().get("x-exchange"),
      message.getMessageAnnotations().get("x-routing-key"));
  })
  .build();

----------------------------------------

TITLE: Setting Per-Message TTL in Java
DESCRIPTION: Example of setting TTL for individual messages during publishing using the Java client.

LANGUAGE: java
CODE:
byte[] messageBodyBytes = "Hello, world!".getBytes();
AMQP.BasicProperties properties = new AMQP.BasicProperties();
properties.setExpiration("60000");
channel.basicPublish("my-exchange", "routing-key", properties, messageBodyBytes);

----------------------------------------

TITLE: Initializing MQTT WebSocket Client
DESCRIPTION: JavaScript code to initialize the Paho MQTT client for WebSocket connection.

LANGUAGE: javascript
CODE:
var wsbroker = location.hostname;
var wsport = 15675;
var client = new Paho.MQTT.Client(wsbroker, wsport, "/ws",
    "myclientid_" + parseInt(Math.random() * 100, 10));
client.onConnectionLost = function (responseObject) {
    debug("CONNECTION LOST - " + responseObject.errorMessage);
};
client.onMessageArrived = function (message) {
    debug("RECEIVE ON " + message.destinationName + " PAYLOAD " + message.payloadString);
    print_first(message.payloadString);
};

----------------------------------------

TITLE: Exporting Definitions via CLI and HTTP API
DESCRIPTION: Commands for exporting RabbitMQ definitions using rabbitmqctl, rabbitmqadmin, and HTTP API. Includes options for formatting output with jq.

LANGUAGE: bash
CODE:
rabbitmqctl export_definitions /path/to/definitions.file.json

LANGUAGE: bash
CODE:
rabbitmqadmin export /path/to/definitions.file.json

LANGUAGE: bash
CODE:
curl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions

LANGUAGE: bash
CODE:
curl -u {username}:{password} -X GET http://{hostname}:15672/api/definitions | jq

----------------------------------------

TITLE: Configuring Plugin Dependency Version Requirements in Erlang
DESCRIPTION: Example of specifying version requirements for plugin dependencies, ensuring compatibility with specific versions of other RabbitMQ plugins.

LANGUAGE: erlang
CODE:
{application, my_plugin, [
    %% ...
    {dependency_version_requirements, [{rabbitmq_management, ["3.11.0", "3.10.22"]}]}
]}

----------------------------------------

TITLE: Listing Stream Connections in RabbitMQ
DESCRIPTION: Lists stream protocol connection statistics, allowing specification of connection information items to display.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_connections conn_name user

----------------------------------------

TITLE: Publishing a Message to a Direct Exchange in Elixir
DESCRIPTION: This snippet demonstrates how to publish a message to a direct exchange with a severity routing key using the AMQP Elixir library.

LANGUAGE: elixir
CODE:
AMQP.Basic.publish(channel, "direct_logs", severity, message)

----------------------------------------

TITLE: Cloning RabbitMQ .NET Client Repository in Bash
DESCRIPTION: Command to clone the RabbitMQ .NET client library repository from GitHub using Git.

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-dotnet-client

----------------------------------------

TITLE: Importing Cloudsmith Signing Key
DESCRIPTION: Downloads and imports the Cloudsmith signing key for RabbitMQ repositories.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key -o cloudsmith-rabbitmq-key.asc
gpg --import cloudsmith-rabbitmq-key.asc

----------------------------------------

TITLE: Setting Erlang Cookie for RabbitMQ Node
DESCRIPTION: Use the RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS environment variable to set the Erlang cookie for a RabbitMQ node.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="-setcookie cookie-value"

----------------------------------------

TITLE: Listing RabbitMQ Queues
DESCRIPTION: Lists queues in a specific virtual host with specified information items and filters.

LANGUAGE: bash
CODE:
rabbitmqctl list_queues -p my-vhost messages consumers

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Message Rates Mode
DESCRIPTION: Configuration snippet to set the message rates mode for the management plugin.

LANGUAGE: ini
CODE:
management.rates_mode = basic

----------------------------------------

TITLE: Checking Quorum Queue Status in RabbitMQ
DESCRIPTION: Command to display the quorum status of a specified queue.

LANGUAGE: bash
CODE:
rabbitmq-queues quorum_status --vhost "a-vhost" "a-queue"

----------------------------------------

TITLE: Adding Library Dependencies with erlang.mk
DESCRIPTION: Configuration for adding the RabbitMQ Erlang client as a dependency in erlang.mk

LANGUAGE: makefile
CODE:
dep_rabbit_common = hex &version-erlang-client;

----------------------------------------

TITLE: Adding a Stream Replica in RabbitMQ
DESCRIPTION: Adds a stream replica on the specified node for a given queue in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams add_replica --vhost "a-vhost" "a-queue" "rabbit@new-node"

----------------------------------------

TITLE: Building RabbitMQ Management Plugin from Source
DESCRIPTION: Shell commands to clone the RabbitMQ repositories, checkout specific versions, and build the management plugin. Note that this method uses a mix of versions due to compatibility issues at the time of writing.

LANGUAGE: shell
CODE:
hg clone http://hg.rabbitmq.com/rabbitmq-public-umbrella
cd rabbitmq-public-umbrella
make checkout
hg update -r rabbitmq_v2_0_0 -R rabbitmq-server
hg update -r rabbitmq_v2_0_0 -R rabbitmq-codegen
hg update -r rabbitmq_v2_0_0 -R rabbitmq-erlang-client
hg clone http://hg.rabbitmq.com/rabbitmq-management
make
cd rabbitmq-management
make

----------------------------------------

TITLE: Creating Docker Registry Secret
DESCRIPTION: Command to create a Kubernetes secret containing private registry credentials for pulling images.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system create secret \
docker-registry rabbitmq-cluster-registry-access \
--docker-server=DOCKER-SERVER \
--docker-username=DOCKER-USERNAME \
--docker-password=DOCKER-PASSWORD

----------------------------------------

TITLE: Setting System Prefix in RabbitMQ Configuration
DESCRIPTION: Configuration snippets showing how to modify the system prefix in rabbitmq-defaults script to use system-wide directories instead of installation-relative paths.

LANGUAGE: bash
CODE:
PREFIX=${RABBITMQ_HOME}

LANGUAGE: bash
CODE:
SYS_PREFIX=

----------------------------------------

TITLE: Restarting a Stream in RabbitMQ
DESCRIPTION: Restarts a stream and all its replicas, with an option to specify a preferred leader node.

LANGUAGE: bash
CODE:
rabbitmq-streams restart_stream --vhost "a-vhost" "a-stream" --preferred-leader-node "node"

----------------------------------------

TITLE: Combining Certificate and Private Key for RabbitMQ TLS
DESCRIPTION: Concatenates the server certificate and private key into a single file for use in RabbitMQ TLS configuration.

LANGUAGE: bash
CODE:
cat server_certificate.pem server_key.pem > combined_keys.pem

----------------------------------------

TITLE: Removing Docker Network for RabbitMQ Streams
DESCRIPTION: This shell command removes the previously created 'rabbitmq-streams' Docker network after completing the performance test.

LANGUAGE: shell
CODE:
docker network rm rabbitmq-streams

----------------------------------------

TITLE: Configuring Disk Free Space Limit with Memory Units in RabbitMQ
DESCRIPTION: This snippet demonstrates how to set the disk free space limit using memory units (GB in this case) with the disk_free_limit.absolute configuration setting.

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1GB

----------------------------------------

TITLE: Importing Definitions via CLI and HTTP API
DESCRIPTION: Commands for importing RabbitMQ definitions using rabbitmqctl, rabbitmqadmin, and HTTP API endpoints.

LANGUAGE: ini
CODE:
rabbitmqctl import_definitions /path/to/definitions.file.json

LANGUAGE: ini
CODE:
rabbitmqadmin import /path/to/definitions.file.json

LANGUAGE: bash
CODE:
curl -u {username}:{password} -H "Content-Type: application/json" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Visualizing RabbitMQ Message Flow with Mermaid Flowchart
DESCRIPTION: This Mermaid flowchart illustrates the basic components and message flow in a RabbitMQ system. It shows a producer (P) sending messages to an exchange (X), which then routes messages to two queues (Q₁ and Q₂) based on bindings.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]

    P --> X -- binding --> Q1 & Q2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue

----------------------------------------

TITLE: Implementing a Log Receiver with Direct Exchange in Elixir
DESCRIPTION: This script shows how to implement a log receiver using a direct exchange in Elixir. It creates bindings for specified severity levels and consumes messages from the resulting queue.

LANGUAGE: elixir
CODE:
defmodule ReceiveLogsDirect do
  def wait_for_messages(channel) do
    receive do
      {:basic_deliver, payload, meta} ->
        IO.puts " [x] Received [#{meta.routing_key}] #{payload}"

        wait_for_messages(channel)
    end
  end
end

{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

{severities, _, _} =
  System.argv
  |> OptionParser.parse(strict: [info:    :boolean,
                                 warning: :boolean,
                                 error:   :boolean])

AMQP.Exchange.declare(channel, "direct_logs", :direct)

{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, "", exclusive: true)

for {severity, true} <- severities do
  binding_key = severity |> to_string
  AMQP.Queue.bind(channel, queue_name, "direct_logs", routing_key: binding_key)
end

AMQP.Basic.consume(channel, queue_name, nil, no_ack: true)

IO.puts " [*] Waiting for messages. To exit press CTRL+C, CTRL+C"

ReceiveLogsDirect.wait_for_messages(channel)

----------------------------------------

TITLE: Implementing Log Emitter with Direct Exchange in PHP
DESCRIPTION: Complete implementation of a log emitter using direct exchange routing in RabbitMQ with php-amqplib.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('direct_logs', 'direct', false, false, false);

$severity = isset($argv[1]) && !empty($argv[1]) ? $argv[1] : 'info';

$data = implode(' ', array_slice($argv, 2));
if (empty($data)) {
    $data = "Hello World!";
}

$msg = new AMQPMessage($data);

$channel->basic_publish($msg, 'direct_logs', $severity);

echo ' [x] Sent ', $severity, ':', $data, "\n";

$channel->close();
$connection->close();

----------------------------------------

TITLE: Starting RabbitMQ 3.9 Docker Container
DESCRIPTION: This shell command starts a RabbitMQ 3.9 Docker container, connecting it to the previously created 'rabbitmq-streams' network.

LANGUAGE: shell
CODE:
docker run -it --rm --network rabbitmq-streams --name rabbitmq rabbitmq:3.9

----------------------------------------

TITLE: Creating a Virtual Host using RabbitMQ HTTP API
DESCRIPTION: Shows how to create a virtual host named 'vh1' using the RabbitMQ HTTP API with curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X PUT http://rabbitmq.local:15672/api/vhosts/vh1

----------------------------------------

TITLE: Listing RabbitMQ Exchanges
DESCRIPTION: Lists exchanges in a specific virtual host with specified information items.

LANGUAGE: bash
CODE:
rabbitmqctl list_exchanges -p my-vhost name type

----------------------------------------

TITLE: Clearing User Limits via HTTP API
DESCRIPTION: Demonstrates clearing user limits using curl commands against the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-channels

curl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-connections

----------------------------------------

TITLE: Creating RabbitMQ Flow Diagram with Mermaid
DESCRIPTION: Mermaid flowchart showing a RabbitMQ producer (P) publishing to a queue (Q) with two consumers (C₁ and C₂) receiving messages. The diagram uses custom CSS classes to style the different components.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    Q[[Queue]]
    C1((C₁))
    C2((C₂))

    P --> Q --> C1 & C2

    class P mermaid-producer
    class Q mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Resolving RabbitMQ Alerts
DESCRIPTION: Demonstrates how to resolve the 'NoMajorityOfNodesReady' alert by starting the rabbit application on the stopped nodes.

LANGUAGE: bash
CODE:
kubectl exec myrabbit-server-0 --container rabbitmq -- rabbitmqctl start_app
kubectl exec myrabbit-server-1 --container rabbitmq -- rabbitmqctl start_app

----------------------------------------

TITLE: Clearing User Limits using curl and HTTP API
DESCRIPTION: These curl commands clear the maximum channels and connections limits for user1 using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-channels

curl -v -u guest:guest -X DELETE http://localhost:15672/api/user-limits/user1/max-connections

----------------------------------------

TITLE: Logging Disk Space Monitoring Deactivation in RabbitMQ
DESCRIPTION: This snippet demonstrates the log entry generated when RabbitMQ disables disk free space monitoring on unrecognized platforms.

LANGUAGE: ini
CODE:
2019-04-01 11:04:54.002 [info] <0.329.0> Disabling disk free space monitoring

----------------------------------------

TITLE: Disk Space Monitoring Log Example - Disabled
DESCRIPTION: Log entry showing deactivation of disk space monitoring on unsupported platforms.

LANGUAGE: ini
CODE:
2019-04-01 11:04:54.002 [info] <0.329.0> Disabling disk free space monitoring

----------------------------------------

TITLE: Port Forwarding for Prometheus, Alertmanager, and Grafana
DESCRIPTION: Sets up port forwarding to access Prometheus, Alertmanager, and Grafana UIs running inside Kubernetes.

LANGUAGE: bash
CODE:
kubectl -n kube-prometheus port-forward svc/prom-kube-prometheus-stack-prometheus 9090
kubectl -n kube-prometheus port-forward svc/prom-kube-prometheus-stack-alertmanager 9093
kubectl -n kube-prometheus port-forward svc/prom-grafana 3000:80

----------------------------------------

TITLE: Configuring Web STOMP TCP Port
DESCRIPTION: Configuration example for changing the default TCP port for the Web STOMP plugin.

LANGUAGE: ini
CODE:
web_stomp.tcp.port = 12345

----------------------------------------

TITLE: Configuring Dead Letter Exchange using RabbitMQ Policy (PowerShell)
DESCRIPTION: This snippet shows how to set a Dead Letter Exchange policy using the rabbitmqctl command in PowerShell. It applies the DLX 'my-dlx' to all queues.

LANGUAGE: powershell
CODE:
rabbitmqctl set_policy DLX ".*" "{""dead-letter-exchange":""my-dlx""}" --apply-to queues

----------------------------------------

TITLE: Running RabbitMQ Tracer CLI Command
DESCRIPTION: Command line syntax for running the RabbitMQ tracer tool. The tool acts as a proxy that can listen on a specified port and forward connections to an upstream RabbitMQ host. Takes optional parameters for proxy port, upstream host, and upstream port.

LANGUAGE: bash
CODE:
runtracer [proxy-port] [upstream-host] [upstream-port]

----------------------------------------

TITLE: Configuring Web STOMP TCP Port
DESCRIPTION: Configuration example for changing the default TCP port for the Web STOMP plugin.

LANGUAGE: ini
CODE:
web_stomp.tcp.port = 12345

----------------------------------------

TITLE: AMQP Message Ordering Commands in RabbitMQ
DESCRIPTION: AMQP commands related to message ordering and requeuing in RabbitMQ. Includes methods for message recovery and rejection that can affect message order.

LANGUAGE: AMQP
CODE:
basic.recover
basic.reject
basic.nack

----------------------------------------

TITLE: Opening Erlang Crash Dump Viewer
DESCRIPTION: Demonstrates how to launch the Erlang Crash Dump Viewer (cdv) tool to analyze a crash dump file graphically. Requires a system with GUI support and Erlang compiled with observer & Wx support.

LANGUAGE: bash
CODE:
/usr/local/lib/erlang/lib/observer-2.9.1/priv/bin/cdv ./erl_crash.dump

----------------------------------------

TITLE: Creating Virtual Host with Metadata
DESCRIPTION: Creates a virtual host with description, default queue type and tags using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1 --description "QA env 1" --default-queue-type quorum

----------------------------------------

TITLE: Inspecting Open Ports and Processes with lsof
DESCRIPTION: These commands use lsof to display OS processes that are listening on specific ports (5672 and 1883) for both IPv4 and IPv6 connections.

LANGUAGE: bash
CODE:
sudo lsof -n -i4TCP:5672 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i6TCP:5672 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i4TCP:1883 | grep LISTEN

LANGUAGE: bash
CODE:
sudo lsof -n -i6TCP:1883 | grep LISTEN

----------------------------------------

TITLE: Updating Documentation Across Versions in RabbitMQ
DESCRIPTION: Commands for making and testing documentation changes across different RabbitMQ versions. Shows how to edit files, test changes locally, and apply patches to older versions.

LANGUAGE: shell
CODE:
# Make changes to the future version's docs.
$EDITOR docs/configure.md

# Test the change in a browser.
npm start

# Once happy, apply to the relevant older release series
cd versioned_docs/version-4.0
git diff ../../docs | patch -p2

# Test again in a browser.
npm start

# Commit everything.
git add docs versioned_docs
git commit

----------------------------------------

TITLE: Setting Preallocated Memory Area in RabbitMQ
DESCRIPTION: Configures a preallocated memory area of 1 GB or 4 GB to reduce allocation rate and memory fragmentation.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 1024"

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 4096"

----------------------------------------

TITLE: Complete Log Emitter Implementation in Ruby
DESCRIPTION: Full implementation of a producer program that emits log messages to a fanout exchange.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.fanout('logs')

message = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')

exchange.publish(message)
puts " [x] Sent #{message}"

connection.close

----------------------------------------

TITLE: Adding RabbitMQ User
DESCRIPTION: Creates a new user in the internal RabbitMQ database.

LANGUAGE: bash
CODE:
rabbitmqctl add_user janeway changeit

----------------------------------------

TITLE: Importing Definitions Using HTTP API in Bash
DESCRIPTION: This curl command imports RabbitMQ definitions using the HTTP API. It requires the management plugin to be enabled and uses placeholders for credentials and hostname.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -H "Content-Type: application/json" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Consuming Messages without Filtering
DESCRIPTION: This command uses Stream PerfTest to consume all messages without any filtering.

LANGUAGE: shell
CODE:
java -jar stream-perf-test.jar --producers 0 --consumers 1 --offset first --prometheus

----------------------------------------

TITLE: Creating Virtual Host with Metadata
DESCRIPTION: Creates a virtual host with description, default queue type and tags using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1 --description "QA env 1" --default-queue-type quorum

----------------------------------------

TITLE: Forcing RabbitMQ Node Boot
DESCRIPTION: Ensures that the node will start next time, even if it was not the last to shut down.

LANGUAGE: bash
CODE:
rabbitmqctl force_boot

----------------------------------------

TITLE: Installing RabbitMQ Client with Rebar3 (Erlang)
DESCRIPTION: Dependency declaration for installing the rabbit_common package using Rebar3 build tool in Erlang projects.

LANGUAGE: erlang
CODE:
{rabbit_common, "&version-erlang-client;"}

----------------------------------------

TITLE: Visualizing RabbitMQ RPC Flow with Mermaid Diagram
DESCRIPTION: This Mermaid flowchart illustrates the RPC process using RabbitMQ. It shows a client sending a request through an RPC queue to a server, which then replies through a separate reply queue back to the client. The diagram uses custom CSS classes to style the different components.

LANGUAGE: mermaid
CODE:
flowchart LR
    C((Client))
    S((Server))
    Q1[[RPC]]
    Q2[[Reply]]

    C -- request --> Q1 --> S --> Q2 -- reply --> C

    class C mermaid-producer
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class S mermaid-consumer

----------------------------------------

TITLE: Configuring TLS-enabled Dynamic Shovel
DESCRIPTION: cURL command to create a dynamic shovel with TLS configuration using the RabbitMQ HTTP API

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/parameters/shovel/%2f/my-shovel \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": {
    "src-protocol": "amqp091",
    "src-uri": "amqp://localhost",
    "src-queue": "source-queue",
    "dest-protocol": "amqp091",
    "dest-uri": "amqps://target.hostname:5671?cacertfile=/path/to/ca_bundle.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none",
    "dest-queue": "destination-queue"
  }
}
EOF

----------------------------------------

TITLE: Declaring Multiple Queues Sequentially in Python using Puka
DESCRIPTION: This snippet demonstrates how to declare 1000 queues one by one using Puka. It uses a for loop to iterate through queue names and declares each queue synchronously.

LANGUAGE: python
CODE:
for i in range(1000):
    promise = client.queue_declare(queue='a%04i' % i)
    client.wait(promise)

----------------------------------------

TITLE: Editing RabbitMQ Cluster Operator Deployment in Kubernetes
DESCRIPTION: Command to edit the RabbitMQ Cluster Operator deployment manifest in Kubernetes to add or modify environment variables.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system edit deployment rabbitmq-cluster-operator

----------------------------------------

TITLE: Starting RabbitMQ with Stream Support
DESCRIPTION: Docker commands to start RabbitMQ with stream plugin support and necessary port configurations.

LANGUAGE: shell
CODE:
docker run -it --rm --name rabbitmq -p 5552:5552 -p 5672:5672 -p 15672:15672 \
    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \
    rabbitmq:3.9-management

----------------------------------------

TITLE: RabbitMQ Architecture Flow Diagram in Mermaid
DESCRIPTION: A flowchart showing message routing in RabbitMQ with one producer (P) sending messages through an exchange (X) to two queues (Q₁, Q₂) and their consumers (C₁, C₂). The exchange routes messages with routing key 'a' to both queues, while 'b' and 'c' route only to Q₂.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X
    X -- a --> Q1 & Q2
    X -- b --> Q2
    X -- c --> Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Complete Log Emitter Implementation
DESCRIPTION: Full implementation of a program that emits log messages to the fanout exchange.

LANGUAGE: python
CODE:
#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='logs', exchange_type='fanout')

message = ' '.join(sys.argv[1:]) or "info: Hello World!"
channel.basic_publish(exchange='logs', routing_key='', body=message)
print(f" [x] Sent {message}")
connection.close()

----------------------------------------

TITLE: Running rabbitmq-echopid.bat Script in Windows
DESCRIPTION: Execute the rabbitmq-echopid.bat script with the short-name form of the RabbitMQ node name as an argument. The script attempts to find the PID of the Erlang runtime process running RabbitMQ and echoes it to stdout if successful.

LANGUAGE: Batch
CODE:
rabbitmq-echopid.bat <sname>

----------------------------------------

TITLE: Basic SockJS Server Setup
DESCRIPTION: Simple example of creating a SockJS server.

LANGUAGE: javascript
CODE:
var service = sockjs.createServer();

----------------------------------------

TITLE: Starting RabbitMQ with Keycloak Configuration
DESCRIPTION: Commands to start RabbitMQ with Keycloak OAuth 2.0 configuration

LANGUAGE: bash
CODE:
export MODE=keycloak
make start-rabbitmq

----------------------------------------

TITLE: Verifying RabbitMQ Cluster Deployment
DESCRIPTION: Command to check the status of the deployed RabbitMQ cluster resources.

LANGUAGE: bash
CODE:
kubectl get all -l app.kubernetes.io/name=definition

----------------------------------------

TITLE: Listing Policies with rabbitmqctl
DESCRIPTION: Uses rabbitmqctl to list all policies, which can include queue length limit policies.

LANGUAGE: bash
CODE:
rabbitmqctl list_policies --formatter=pretty_table --silent

----------------------------------------

TITLE: RabbitMQ Server Startup Command
DESCRIPTION: Command to start RabbitMQ server with specific plugins and configuration

LANGUAGE: bash
CODE:
make run-broker \
    TEST_TMPDIR="$HOME/scratch/rabbit/test" \
    RABBITMQ_CONFIG_FILE="$HOME/scratch/rabbit/advanced.config" \
    PLUGINS="rabbitmq_prometheus rabbitmq_management rabbitmq_amqp1_0" \
    RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+S 3"

----------------------------------------

TITLE: Enabling TLS with Peer Verification for Prometheus
DESCRIPTION: Configuration example for enabling TLS with peer verification for the Prometheus metrics endpoint in RabbitMQ.

LANGUAGE: ini
CODE:
prometheus.ssl.port       = 15691
prometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem
prometheus.ssl.certfile   = /full/path/to/server_certificate.pem
prometheus.ssl.keyfile    = /full/path/to/server_key.pem
prometheus.ssl.password   = password-if-keyfile-is-encrypted
prometheus.ssl.verify     = verify_peer
prometheus.ssl.depth      = 2
prometheus.ssl.fail_if_no_peer_cert = true
## To enforce TLS (disable the non-TLS port):
# prometheus.tcp.listener = none

----------------------------------------

TITLE: Closing a Channel in Java
DESCRIPTION: Example of closing a channel when it's no longer needed using the RabbitMQ Java client.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();

// do some work

// close the channel when it is no longer needed

ch.close();

----------------------------------------

TITLE: Manage RabbitMQ Service
DESCRIPTION: Commands for starting, stopping, and managing RabbitMQ service using brew services

LANGUAGE: bash
CODE:
brew services start rabbitmq
/opt/homebrew/sbin/rabbitmqctl enable_feature_flag all
brew services stop rabbitmq

----------------------------------------

TITLE: Implementing a Feature Flag Migration Function
DESCRIPTION: Example of a migration function for a feature flag in RabbitMQ.

LANGUAGE: erlang
CODE:
quorum_queue_migration(FeatureName, _FeatureProps, enable) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);
quorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso
    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.

----------------------------------------

TITLE: Starting the RabbitMQ Application
DESCRIPTION: Starts the RabbitMQ application on the node.

LANGUAGE: bash
CODE:
rabbitmqctl start_app

----------------------------------------

TITLE: Creating RabbitMQ Flow Diagram with Mermaid
DESCRIPTION: Flowchart diagram showing a RabbitMQ producer (P) publishing to an exchange (X) which routes messages to two queues (Q₁ and Q₂). The diagram uses custom CSS classes to style the different RabbitMQ components.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]

    P --> X --> Q1 & Q2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue

----------------------------------------

TITLE: Hello World Implementation in Elixir
DESCRIPTION: Equivalent Hello World program written in Elixir, demonstrating the more Ruby-like syntax approach.

LANGUAGE: elixir
CODE:
# module_name.ex

defmodule ModuleName do
  def hello do
    IO.puts "Hello World"
  end
end

----------------------------------------

TITLE: Declaring Multiple Queues in Parallel with Puka in Python
DESCRIPTION: This code shows how to declare 1000 queues in parallel using Puka. It creates a list of promises for queue declarations and then waits for each promise to complete.

LANGUAGE: python
CODE:
promises = [client.queue_declare(queue='a%04i' % i) for i in range(1000)]
for promise in promises:
    client.wait(promise)

----------------------------------------

TITLE: Consuming Messages from RabbitMQ Stream in Python
DESCRIPTION: This code snippet shows how to consume messages from a RabbitMQ stream using Python. It creates a Consumer instance, subscribes to the stream, and processes messages until it receives a marker message.

LANGUAGE: python
CODE:
message_count = -1
first_offset = -1
last_offset = -1
STREAM_NAME = "stream-offset-tracking-python"
# 2GB
STREAM_RETENTION = 2000000000

async def on_message(msg: AMQPMessage, message_context: MessageContext):
    global first_offset
    global last_offset

    offset = message_context.offset
    if first_offset == -1:
        print("First message received")
        first_offset = offset

    consumer = message_context.consumer
    stream = message_context.consumer.get_stream(message_context.subscriber_name)

    if "marker" in str(msg):
        last_offset = offset
        await consumer.close()

async def consume():

    global first_offset
    global last_offset

    consumer = Consumer(
        host="localhost",
        port=5552,
        username="guest",
        password="guest",
    )

    await consumer.create_stream(
        STREAM_NAME, exists_ok=True, arguments={"max-length-bytes": STREAM_RETENTION}
    )

    try:
        await consumer.start()
        print("Starting consuming Press control +C to close")

        await consumer.subscribe(
            stream=STREAM_NAME,
            callback=on_message,
            decoder=amqp_decoder,
            offset_specification=ConsumerOffsetSpecification(
                OffsetType.FIRST
            ),
        )
        await consumer.run()

    except (KeyboardInterrupt, asyncio.exceptions.CancelledError):
        await consumer.close()

    # give time to the consumer task to close the consumer
    await asyncio.sleep(1)

    if first_offset != -1:
        print(
            "Done consuming first_offset: {} last_offset {} ".format(
                first_offset, last_offset
            )
        )


with asyncio.Runner() as runner:
    runner.run(consume())

----------------------------------------

TITLE: Checking Quorum Queue Status in RabbitMQ
DESCRIPTION: Command to display the quorum status of a specific queue within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-queues quorum_status --vhost "a-vhost" "a-queue"

----------------------------------------

TITLE: Batch Message Publishing with Confirms in PHP
DESCRIPTION: Implements batch publishing of messages with synchronous confirmation handling. This approach offers better throughput than individual publishing but requires managing message batches.

LANGUAGE: php
CODE:
$batch_size = 100;
$outstanding_message_count = 0;
while (thereAreMessagesToPublish()) {
    $data = ...;
    $msg = new AMQPMessage($data);
    $channel->basic_publish($msg, 'exchange');
    $outstanding_message_count++;
    if ($outstanding_message_count === $batch_size) {
        $channel->wait_for_pending_acks(5.000);
        $outstanding_message_count = 0;
    }
}
if ($outstanding_message_count > 0) {
    $channel->wait_for_pending_acks(5.000);
}

----------------------------------------

TITLE: Declaring a RabbitMQ Stream using Java AMQP 0.9.1 Client
DESCRIPTION: This snippet demonstrates how to create a stream using the AMQP 0.9.1 Java client. It sets the queue type to 'stream' using the x-queue-type argument.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
Channel channel = connection.createChannel();
channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  Collections.singletonMap("x-queue-type", "stream")
);

----------------------------------------

TITLE: Running Testsuites with Mixed-Version Clusters
DESCRIPTION: Shows how to run testsuites in the context of a mixed-version RabbitMQ cluster for testing feature flag compatibility.

LANGUAGE: bash
CODE:
# Clone and set up secondary Umbrella
git clone https://github.com/rabbitmq/rabbitmq-server.git secondary-umbrella
cd secondary-umbrella
git checkout v3.12.x
make co

# Compile plugin in secondary Umbrella
cd secondary-umbrella/deps/rabbitmq_federation
make dist

# Run testsuite with mixed-version configuration
cd /path/to/primary/rabbitmq_federation
SECONDARY_UMBRELLA=/path/to/secondary-umbrella \
RABBITMQ_FEATURE_FLAGS= \
make tests

----------------------------------------

TITLE: Adding Queue Members in RabbitMQ
DESCRIPTION: Command to add a new member (replica) to a quorum queue on a specified node and virtual host.

LANGUAGE: bash
CODE:
rabbitmq-queues add_member --vhost "a-vhost" "a-queue" "rabbit@new-node"

----------------------------------------

TITLE: Pausing Reconciliation for a RabbitMQ Cluster
DESCRIPTION: Commands to pause and resume reconciliation for a RabbitMQ cluster by setting and removing a special label.

LANGUAGE: bash
CODE:
kubectl label rabbitmqclusters INSTANCE-NAME rabbitmq.com/pauseReconciliation=true

LANGUAGE: bash
CODE:
kubectl label rabbitmqclusters INSTANCE-NAME rabbitmq.com/pauseReconciliation-

----------------------------------------

TITLE: Setting Shared Prefetch Limit for Multiple Consumers in Java
DESCRIPTION: This example shows how to set both per-consumer and per-channel prefetch limits for two consumers, demonstrating RabbitMQ's interpretation of multiple basicQos calls.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer1 = ...;
Consumer consumer2 = ...;
channel.basicQos(10, false); // Per consumer limit
channel.basicQos(15, true);  // Per channel limit
channel.basicConsume("my-queue1", false, consumer1);
channel.basicConsume("my-queue2", false, consumer2);

----------------------------------------

TITLE: Docker Image Relocation Commands
DESCRIPTION: Commands for relocating the RabbitMQ Operator image to a private registry, including pulling, tagging, and pushing the image.

LANGUAGE: bash
CODE:
docker pull rabbitmqoperator/cluster-operator:{some-version}
docker tag rabbitmqoperator/cluster-operator:{some-version} {someregistry}/cluster-operator:{some-version}
docker push {someregistry}/cluster-operator:{some-version}

----------------------------------------

TITLE: Running RabbitMQ Broker with Custom Temp Directory
DESCRIPTION: Command to run RabbitMQ broker with a specified temporary directory location

LANGUAGE: bash
CODE:
make run-broker TEST_TMPDIR="/some/other/location/for/rabbitmq-test-instances"

----------------------------------------

TITLE: Displaying RabbitMQ Listener Configuration
DESCRIPTION: Example output of RabbitMQ listener configuration showing various protocol ports and their purposes

LANGUAGE: ini
CODE:
Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS
Interface: [::], port: 15672, protocol: http, purpose: HTTP API
Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)
Interface: [::], port: 1883, protocol: mqtt, purpose: MQTT

----------------------------------------

TITLE: Installing Elixir with kiex
DESCRIPTION: Commands to install and activate Elixir 1.12.3 using kiex tool

LANGUAGE: bash
CODE:
kiex install 1.12.3
kiex use 1.12.3

----------------------------------------

TITLE: Authentication Failure Capability Code Example
DESCRIPTION: Code values used in authentication failure scenarios, including the capability flag 'authentication_failure_close' and the close reason 'ACCESS_REFUSED'

LANGUAGE: markdown
CODE:
authentication_failure_close
connection.close
ACCESS_REFUSED

----------------------------------------

TITLE: Removing Docker Images for RabbitMQ and Stream Performance Test
DESCRIPTION: This shell command removes the Docker images for RabbitMQ 3.9 and the stream performance test tool if they exist locally.

LANGUAGE: shell
CODE:
docker rmi rabbitmq:3.9 pivotalrabbitmq/stream-perf-test

----------------------------------------

TITLE: Setting Linux Readahead Value in Bash
DESCRIPTION: Bash command to set the readahead value for a block device on Linux for performance tuning.

LANGUAGE: bash
CODE:
sudo blockdev --setra 4096 /dev/sda

----------------------------------------

TITLE: Enabling Feature Flags in RabbitMQ
DESCRIPTION: Command to enable all feature flags in RabbitMQ, which is important for future upgrades.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag all

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat enable_feature_flag all

----------------------------------------

TITLE: Complete Asynchronous Publisher Confirms Implementation
DESCRIPTION: Full implementation of asynchronous publisher confirms using a ConcurrentNavigableMap to track outstanding confirms and handle both confirms and nack-ed messages.

LANGUAGE: java
CODE:
ConcurrentNavigableMap<Long, String> outstandingConfirms = new ConcurrentSkipListMap<>();
ConfirmCallback cleanOutstandingConfirms = (sequenceNumber, multiple) -> {
    if (multiple) {
        ConcurrentNavigableMap<Long, String> confirmed = outstandingConfirms.headMap(
          sequenceNumber, true
        );
        confirmed.clear();
    } else {
        outstandingConfirms.remove(sequenceNumber);
    }
};

channel.addConfirmListener(cleanOutstandingConfirms, (sequenceNumber, multiple) -> {
    String body = outstandingConfirms.get(sequenceNumber);
    System.err.format(
      "Message with body %s has been nack-ed. Sequence number: %d, multiple: %b%n",
      body, sequenceNumber, multiple
    );
    cleanOutstandingConfirms.handle(sequenceNumber, multiple);
});

----------------------------------------

TITLE: Handling AMQP Errors with Puka in Python
DESCRIPTION: This snippet demonstrates Puka's error handling capabilities. It attempts to declare a queue and catches a PreconditionFailed exception if the queue already exists with different parameters, then retries with the correct parameters.

LANGUAGE: python
CODE:
try:
   promise = client.queue_declare(queue='test')
   client.wait(promise)
except puka.PreconditionFailed:
    # Oh, sorry. Forgot it was durable.
   promise = client.queue_declare(queue='test', durable=True)
   client.wait(promise)

----------------------------------------

TITLE: Heartbeat Frame Format
DESCRIPTION: Specification of heartbeat frame format as implemented by RabbitMQ, Qpid and OpenAMQ.

LANGUAGE: text
CODE:
frame-type (octet) = %d8 channel (short) = %d0 %d0 payload (long) = %d0 %d0 %d0 %d0 frame-end (octet) = %xCE

----------------------------------------

TITLE: Cloning and Setting up RabbitMQ Server
DESCRIPTION: Git commands to clone RabbitMQ server repo and set up dependencies

LANGUAGE: bash
CODE:
git clone git@github.com:rabbitmq/rabbitmq-server.git
cd rabbitmq-server
git checkout v3.10.1
make fetch-deps
git -C $(pwd)/deps/seshat checkout 68f2b9d4ae7ea730cef613fd5dc4456e462da492

----------------------------------------

TITLE: Declaring a Feature Flag in RabbitMQ
DESCRIPTION: Example of declaring a feature flag as a module attribute in Erlang.

LANGUAGE: erlang
CODE:
-rabbit_feature_flag(
   {quorum_queue,
    #{desc          => "Support queues of type quorum",
      doc_url       => "https://www.rabbitmq.com/docs/quorum-queues",
      stability     => stable,
      migration_fun => {?MODULE, quorum_queue_migration}
     }}).

----------------------------------------

TITLE: Configuring RabbitMQ TLS Connection without Peer Verification
DESCRIPTION: Example of a secure RabbitMQ connection URI with TLS enabled but peer verification disabled.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none&server_name_indication=myhost

----------------------------------------

TITLE: Configuring Federation Upstream in Bash
DESCRIPTION: Command to configure a federation upstream named 'origin' pointing to a remote RabbitMQ host using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

----------------------------------------

TITLE: Running RPC Client - Python
DESCRIPTION: Command to run the RPC client and request a Fibonacci calculation

LANGUAGE: python
CODE:
python rpc_client.py
# => [x] Requesting fib(30)

----------------------------------------

TITLE: Querying RabbitMQ Queue Status
DESCRIPTION: Commands to retrieve the status of a RabbitMQ queue resource using kubectl in YAML format or detailed description.

LANGUAGE: bash
CODE:
kubectl get queues.rabbitmq.com my-queue -oyaml

LANGUAGE: bash
CODE:
kubectl describe queues.rabbitmq.com my-queue

----------------------------------------

TITLE: Implementing Server-Side Offset Tracking in RabbitMQ Stream Consumer
DESCRIPTION: This code snippet demonstrates how to implement server-side offset tracking in a RabbitMQ stream consumer. It includes querying for stored offsets, storing offsets periodically, and resuming consumption from the last stored offset.

LANGUAGE: rust
CODE:
let mut first_offset: Option<u64> = None;
let mut last_offset: Option<u64> = None;
let mut consumer = environment
    .consumer()
    // The consumer needs a name to use Server-Side Offset Tracking
    .name("consumer-1")
    .offset(OffsetSpecification::First)
    .build(stream)
    .await
    .unwrap();

println!("Started consuming");

// We can query if a stored offset exists
let mut stored_offset: u64 = consumer.query_offset().await.unwrap_or_else(|_| 0);

if stored_offset >  0 {
    stored_offset += 1;
}
consumer = environment
    .consumer()
    // The consumer needs a name to use Server-Side Offset Tracking
    .name("consumer-1")
    .offset(OffsetSpecification::Offset(stored_offset))
    .build(stream)
    .await
    .unwrap();

let mut received_messages: i64 = -1;
while let Some(delivery) = consumer.next().await {
    let d = delivery.unwrap();

    if !first_offset.is_some()  {
        println!("First message received");
        first_offset = Some(d.offset());
    }
    received_messages = received_messages + 1;
    if received_messages % 10 == 0
        || String::from_utf8_lossy(d.message().data().unwrap()).contains("marker")
    {
        // We store the offset in the server
        let _ = consumer
            .store_offset(d.offset())
            .await
            .unwrap_or_else(|e| println!("Err: {}", e));
        if String::from_utf8_lossy(d.message().data().unwrap()).contains("marker") {
            last_offset = Some(d.offset());
            let handle = consumer.handle();
            _ = handle.close().await;
            break;
        }
    }
}

if first_offset.is_some() {
    println!(
        "Done consuming first_offset: {:?} last_offset: {:?}  ", first_offset.unwrap(), last_offset.unwrap())
}

----------------------------------------

TITLE: Verifying Krew Installation
DESCRIPTION: Command to verify the installation of Krew kubectl plugin manager

LANGUAGE: bash
CODE:
kubectl krew

----------------------------------------

TITLE: Configuring RabbitMQ TLS Connection without Peer Verification
DESCRIPTION: Example of a secure RabbitMQ connection URI with TLS enabled but peer verification disabled.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none&server_name_indication=myhost

----------------------------------------

TITLE: Checking RabbitMQ virtual hosts
DESCRIPTION: Use rabbitmq-diagnostics to check the status of virtual hosts on a RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q check_virtual_hosts --node rabbit@target-hostname
# if the check succeeded, exit code will be 0

----------------------------------------

TITLE: Configuring Dead Letter Exchange using RabbitMQ Policy (Bash)
DESCRIPTION: This snippet demonstrates how to set a Dead Letter Exchange policy using the rabbitmqctl command in Bash. It applies the DLX 'my-dlx' to all queues.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy DLX ".*" '{"dead-letter-exchange":"my-dlx"}' --apply-to queues

----------------------------------------

TITLE: Configuring Auth Attempt Source Tracking in RabbitMQ
DESCRIPTION: Erlang configuration to enable tracking of authentication attempt sources including IP address, username and protocol. This configuration is set via the advanced config file.

LANGUAGE: erlang
CODE:
[
  {rabbit, [{track_auth_attempt_source, true}]}
]

----------------------------------------

TITLE: Webhook Validation Configuration
DESCRIPTION: ValidatingWebhookConfiguration for configuring webhook validation in the Kubernetes cluster.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
  name: validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    caBundle: # generated ca certificate goes in here
    service:
      name: webhook-service
      namespace: rabbitmq-system
      path: /validate-rabbitmq-com-v1beta1-queue
  failurePolicy: Fail
  name: vqueue.kb.io
  rules:
  - apiGroups:
    - rabbitmq.com

----------------------------------------

TITLE: Analyzing Erlang Crash Dump in Bash
DESCRIPTION: This snippet demonstrates how to view the first few lines of an Erlang crash dump file to identify the termination reason. It uses the 'head' command to display the initial lines of the file.

LANGUAGE: bash
CODE:
head -n 3 ./erl_crash.dump
# => =erl_crash_dump:0.5
# => Sun Aug 25 00:57:34 2019
# => Slogan: Kernel pid terminated (application_controller) ({application_start_failure,rabbit,{{timeout_waiting_for_tables,[rabbit_user,rabbit_user_permission,rabbit_topic_permission,rabbit_vhost,rabbit_durable_r

----------------------------------------

TITLE: Running PerfTest Producer with OAuth 2.0 Token
DESCRIPTION: Bash command to start a RabbitMQ PerfTest producer using an OAuth 2.0 token for authentication.

LANGUAGE: bash
CODE:
make start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)

----------------------------------------

TITLE: Defining RabbitMQ Binding
DESCRIPTION: YAML definition for a RabbitMQ Binding resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Binding
metadata:
  name: binding
  namespace: rabbitmq-system
spec:
  source: test
  destination: test
  destinationType: queue
  rabbitmqClusterReference:
    name: example-rabbit

----------------------------------------

TITLE: Creating RPC Client Queue Configuration in C#
DESCRIPTION: Sets up the RPC client queue configuration with correlation ID and reply-to queue settings for message routing.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(_channel);
_channel.BasicConsume(
    consumer: consumer,
    queue: _replyQueueName,
    autoAck: true);

consumer.Received += (model, ea) =>
{
    if (!correlationDictionary.TryRemove(ea.BasicProperties.CorrelationId, out var tcs))
        return;
    var body = ea.Body.ToArray();
    var response = Encoding.UTF8.GetString(body);
    tcs.TrySetResult(response);
};

----------------------------------------

TITLE: Configuring RabbitMQ Tracing Plugin in Erlang
DESCRIPTION: Illustrates how to configure the rabbitmq-tracing plugin using Erlang syntax. It sets the directory for log files and specifies the username for creating tracing queues and bindings.

LANGUAGE: erlang
CODE:
[{rabbitmq_tracing, [{directory, "/my/log/file/location"},
                     {username,  "guest"}]}].

----------------------------------------

TITLE: RabbitMQ Trademark Usage Examples
DESCRIPTION: Examples of acceptable and unacceptable product naming patterns when using the RabbitMQ trademark.

LANGUAGE: markdown
CODE:
"<product name> for RabbitMQ"\n"<product name>, RabbitMQ Edition"

----------------------------------------

TITLE: RabbitMQ CLI Commands in PowerShell
DESCRIPTION: Basic CLI commands for managing RabbitMQ service on Windows, including help commands and service management.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat help
rabbitmq-diagnostics.bat help
rabbitmq-plugins.bat help
rabbitmqctl.bat help add_user
rabbitmqctl.bat stop
rabbitmqctl.bat status

----------------------------------------

TITLE: Subscribing to Multiple Severity Levels
DESCRIPTION: Shows how to create bindings for multiple severity levels in a logging system

LANGUAGE: swift
CODE:
let q = ch.queue("", options: .exclusive)
let severities = ["error", "warning", "info"]
for severity: String in severities {
    q.bind(x, routingKey: severity)
}

----------------------------------------

TITLE: Setting Federation Policy in RabbitMQ
DESCRIPTION: Creates a policy that applies federation settings to all queues, enabling message transfer from the blue cluster to the green cluster. The policy matches all queues using a regex pattern.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to queues blue-green-migration ".*" \
  '{"federation-upstream":"blue"}'

----------------------------------------

TITLE: Feature Flag Declaration
DESCRIPTION: Example of a feature flag declaration as a module attribute in Erlang.

LANGUAGE: erlang
CODE:
-rabbit_feature_flag(
   {quorum_queue,
    #{desc          => "Support queues of type quorum",
      doc_url       => "https://www.rabbitmq.com/docs/quorum-queues",
      stability     => stable,
      migration_fun => {?MODULE, quorum_queue_migration}
     }}).

----------------------------------------

TITLE: Implementing Durable Queue Declaration
DESCRIPTION: Queue declaration with durability flag to ensure queue survives RabbitMQ restarts.

LANGUAGE: python
CODE:
channel.queue_declare(queue='task_queue', durable=True)

----------------------------------------

TITLE: Modifying Shell Scripts for Solaris Compatibility
DESCRIPTION: Shell script shebang line modification required for Solaris compatibility. The standard POSIX shell must be explicitly specified to ensure proper script execution.

LANGUAGE: shell
CODE:
#!/usr/xpg4/bin/sh

----------------------------------------

TITLE: Displaying RabbitMQ Listeners using rabbitmq-diagnostics
DESCRIPTION: This snippet shows the output of the 'rabbitmq-diagnostics listeners' command, which displays the active listeners on a RabbitMQ node, including their interfaces, ports, protocols, and purposes.

LANGUAGE: ini
CODE:
Interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Interface: [::], port: 5671, protocol: amqp/ssl, purpose: AMQP 0-9-1 and AMQP 1.0 over TLS
Interface: [::], port: 15672, protocol: http, purpose: HTTP API
Interface: [::], port: 15671, protocol: https, purpose: HTTP API over TLS (HTTPS)
Interface: [::], port: 1883, protocol: mqtt, purpose: MQTT

----------------------------------------

TITLE: Configuring Vault Environment Variables for RabbitMQ Messaging Topology Operator
DESCRIPTION: Set environment variables in the operator container to authenticate with Vault and access RabbitMQ cluster credentials. VAULT_ADDR is required, while others are optional with default values.

LANGUAGE: yaml
CODE:
VAULT_ADDR: "<vault-server-api-url>"
OPERATOR_VAULT_ROLE: "messaging-topology-operator"
OPERATOR_VAULT_NAMESPACE: "<vault-namespace>"
OPERATOR_VAULT_AUTH_PATH: "auth/kubernetes"

----------------------------------------

TITLE: Complete Worker Implementation
DESCRIPTION: Complete implementation of the worker with connection handling, message acknowledgment, and prefetch settings.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new(automatically_recover: false)
connection.start

channel = connection.create_channel
queue = channel.queue('task_queue', durable: true)

channel.prefetch(1)
puts ' [*] Waiting for messages. To exit press CTRL+C'

begin
  queue.subscribe(manual_ack: true, block: true) do |delivery_info, _properties, body|
    puts " [x] Received '#{body}'"
    # imitate some work
    sleep body.count('.').to_i
    puts ' [x] Done'
    channel.ack(delivery_info.delivery_tag)
  end
rescue Interrupt => _
  connection.close
end

----------------------------------------

TITLE: Setting RabbitMQ User Tags
DESCRIPTION: Sets one or more tags for a user, which can be used for authorization.

LANGUAGE: bash
CODE:
rabbitmqctl set_user_tags janeway administrator

----------------------------------------

TITLE: Setting Alternate Exchange Using CMD
DESCRIPTION: Command to set an alternate exchange policy using rabbitmqctl in Windows Command Prompt. Defines 'my-ae' as the alternate exchange for 'my-direct' exchange.

LANGUAGE: batch
CODE:
rabbitmqctl.bat set_policy AE "^my-direct$" "{""alternate-exchange":""my-ae""}" --apply-to exchanges

----------------------------------------

TITLE: Creating MQTT User with Full Access
DESCRIPTION: Commands to create a new user for MQTT connections with full access to the default virtual host

LANGUAGE: bash
CODE:
rabbitmqctl add_user mqtt-test mqtt-test
rabbitmqctl set_permissions -p "/" mqtt-test ".*" ".*" ".*"
rabbitmqctl set_user_tags mqtt-test management

----------------------------------------

TITLE: Authentication Attempts API Response - Protocol Summary
DESCRIPTION: JSON response from the /api/auth/attempts/{node} endpoint showing aggregated authentication attempts per protocol.

LANGUAGE: json
CODE:
[{
   "protocol":"http",
   "auth_attempts":553,
   "auth_attempts_failed":0,
   "auth_attempts_succeeded":553
 },
 {
   "protocol":"amqp091",
   "auth_attempts":12,
   "auth_attempts_failed":10,
   "auth_attempts_succeeded":2
 }]

----------------------------------------

TITLE: Installing RabbitMQ Operator via Helm
DESCRIPTION: Commands to install RabbitMQ Cluster Operator using Bitnami Helm chart. Adds the Bitnami repo and installs the operator with default configuration.

LANGUAGE: bash
CODE:
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install my-release bitnami/rabbitmq-cluster-operator

----------------------------------------

TITLE: Running AMQP Filter Expressions Sample App
DESCRIPTION: Maven command to compile and execute the AMQP filter expressions sample application.

LANGUAGE: bash
CODE:
mvn clean compile exec:java

----------------------------------------

TITLE: Configuring Memory Calculation Strategy
DESCRIPTION: Examples of how to configure the vm_memory_calculation_strategy setting for different memory calculation strategies.

LANGUAGE: ini
CODE:
vm_memory_calculation_strategy = rss

LANGUAGE: ini
CODE:
vm_memory_calculation_strategy = allocated

----------------------------------------

TITLE: Defining RabbitMQ User Permissions
DESCRIPTION: YAML definition for a RabbitMQ Permission resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Permission
metadata:
  name: rabbit-user-1-permission
  namespace: rabbitmq-system
spec:
  vhost: "/"
  user: "rabbit-user-1"
  permissions:
    write: ".*"
    configure: ".*"
    read: ".*"
  rabbitmqClusterReference:
    name: sample

----------------------------------------

TITLE: Multiple Severity Bindings
DESCRIPTION: Shows how to create multiple bindings for different message severities in a logging system.

LANGUAGE: python
CODE:
result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

for severity in severities:
    channel.queue_bind(exchange='direct_logs',
                       queue=queue_name,
                       routing_key=severity)

----------------------------------------

TITLE: Setting RabbitMQ Virtual Host Limits
DESCRIPTION: Sets limits for a specific virtual host, such as maximum connections or queues.

LANGUAGE: bash
CODE:
rabbitmqctl set_vhost_limits -p qa_env '{"max-connections": 64}'

----------------------------------------

TITLE: Applying Federation Policy for All Upstreams in Bash
DESCRIPTION: This command sets a policy to federate all exchanges or queues with names starting with 'federated.' using all available upstreams.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream-set":"all"}'

----------------------------------------

TITLE: Specifying Custom Cache Module in RabbitMQ
DESCRIPTION: This configuration specifies the use of a custom cache module (rabbit_auth_backend_ets_segmented) for the auth cache.

LANGUAGE: ini
CODE:
auth_cache.cache_module = rabbit_auth_backend_ets_segmented

----------------------------------------

TITLE: Importing RabbitMQ Client in Swift
DESCRIPTION: Import the RabbitMQ client framework as a module in Swift.

LANGUAGE: swift
CODE:
import RMQClient

----------------------------------------

TITLE: Configuring Net Tick Time in RabbitMQ
DESCRIPTION: This code snippet demonstrates how to configure the net_ticktime setting in RabbitMQ's advanced.config file. It shows doubling the default net_ticktime from 60 to 120 seconds.

LANGUAGE: erlang
CODE:
[
  {kernel, [{net_ticktime,  120}]}
].

----------------------------------------

TITLE: Setting an Operator Policy in RabbitMQ
DESCRIPTION: Example of defining an operator policy that enforces queue TTL limits.

LANGUAGE: bash
CODE:
rabbitmqctl set_operator_policy transient-queue-ttl \
    "^amq\." '{"expires":1800000}' \
    --priority 1 \
    --apply-to queues

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_operator_policy transient-queue-ttl ^
    "^amq\." "{""expires"": 1800000}" ^
    --priority 1 ^
    --apply-to queues

----------------------------------------

TITLE: Checking TCP Port Access with lsof
DESCRIPTION: Commands for checking TCP port access and listening processes using lsof

LANGUAGE: ini
CODE:
sudo lsof -n -i4TCP:5672 | grep LISTEN
sudo lsof -n -i6TCP:5672 | grep LISTEN
sudo lsof -n -i4TCP:1883 | grep LISTEN
sudo lsof -n -i6TCP:1883 | grep LISTEN

----------------------------------------

TITLE: Checking TCP Port Access with lsof
DESCRIPTION: Commands for checking TCP port access and listening processes using lsof

LANGUAGE: ini
CODE:
sudo lsof -n -i4TCP:5672 | grep LISTEN
sudo lsof -n -i6TCP:5672 | grep LISTEN
sudo lsof -n -i4TCP:1883 | grep LISTEN
sudo lsof -n -i6TCP:1883 | grep LISTEN

----------------------------------------

TITLE: Initializing RPC Client in PHP
DESCRIPTION: This code snippet shows how to initialize and use an RPC client to calculate a Fibonacci number. It demonstrates the basic usage of the RPC system.

LANGUAGE: php
CODE:
$fibonacci_rpc = new FibonacciRpcClient();
$response = $fibonacci_rpc->call(30);
echo ' [.] Got ', $response, "\n";

----------------------------------------

TITLE: Clearing RabbitMQ User Permissions
DESCRIPTION: Clears a user's permissions for a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_permissions -p my-vhost janeway

----------------------------------------

TITLE: Testing OAuth 2.0 Management API access
DESCRIPTION: Verify OAuth 2.0 token access to RabbitMQ Management API

LANGUAGE: bash
CODE:
make curl-keycloak url=https://localhost:15671/api/overview client_id=rabbit_dev_mgt_api secret=La1Mvj7Qvt8iAqHisZyAguEE8rUpg014 realm=dev

----------------------------------------

TITLE: Starting RPC Producers with PerfTest
DESCRIPTION: Commands to start 2 producers with different publishing rates to test the local random exchange routing behavior.

LANGUAGE: shell
CODE:
perf-test -H amqp://localhost:5672 --consumers 0 --exchange rpc -t x-local-random --rate 100
perf-test -H amqp://localhost:5673 --consumers 0 --exchange rpc -t x-local-random --rate 20

----------------------------------------

TITLE: Fibonacci Function Implementation
DESCRIPTION: A recursive implementation of the Fibonacci sequence calculator used as the RPC server's main function.

LANGUAGE: java
CODE:
private static int fib(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return fib(n-1) + fib(n-2);
}

----------------------------------------

TITLE: AMQP Connection Error Log for JWT Token Length Exceeded
DESCRIPTION: Server log output showing an AMQP connection being closed due to a JWT token exceeding the maximum frame length limit.

LANGUAGE: erlang
CODE:
2025-03-15 05:55:21.689185+00:00 [info] <0.2771.0> accepting AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672)
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> closing AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672):
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> {handshake_error,starting,0,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                  {amqp_error,frame_error,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              "type 1, all octets = <<>>: {frame_too_large,6307,4088}",
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              none}}

----------------------------------------

TITLE: Resetting a RabbitMQ Node
DESCRIPTION: Returns a RabbitMQ node to its virgin state, removing it from any cluster and deleting all data.

LANGUAGE: bash
CODE:
rabbitmqctl reset

----------------------------------------

TITLE: Overriding Erlang Cookie for CLI Tools
DESCRIPTION: Demonstrates how to override the Erlang cookie value for CLI tools using a command line flag.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status --erlang-cookie "cookie-value"

----------------------------------------

TITLE: Configuring Producer with Stream Filtering in Java
DESCRIPTION: Example showing how to set up a producer with filter value extraction logic using the RabbitMQ stream Java client. The filter value is extracted from the message's application properties.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
  .stream("invoices")
  .filterValue(msg -> msg.getApplicationProperties().get("region").toString())  
  .build();

----------------------------------------

TITLE: Resetting a RabbitMQ Node
DESCRIPTION: Returns a RabbitMQ node to its virgin state, removing it from any cluster and deleting all data.

LANGUAGE: bash
CODE:
rabbitmqctl reset

----------------------------------------

TITLE: Publishing a Message with Routing Key in Go
DESCRIPTION: Publishes a message to the 'logs_direct' exchange with a severity-based routing key using the RabbitMQ Go client.

LANGUAGE: go
CODE:
err = ch.PublishWithContext(ctx,
  "logs_direct",         // exchange
  severityFrom(os.Args), // routing key
  false, // mandatory
  false, // immediate
  amqp.Publishing{
    ContentType: "text/plain",
    Body:        []byte(body),
})

----------------------------------------

TITLE: Patching Messaging Topology Operator Deployment for TLS in Bash
DESCRIPTION: This kubectl command patches the Messaging Topology Operator Deployment to mount the CA certificate secret into the Pod's trust store. It adds a volume mount for the CA certificate and defines the corresponding volume using the previously created secret.

LANGUAGE: bash
CODE:
kubectl -n rabbitmq-system patch deployment messaging-topology-operator --patch "spec:
  template:
    spec:
      containers:
      - name: manager
        volumeMounts:
        - mountPath: /etc/ssl/certs/rabbitmq-ca.crt
          name: rabbitmq-ca
          subPath: ca.crt
      volumes:
      - name: rabbitmq-ca
        secret:
          defaultMode: 420
          secretName: rabbitmq-ca"

----------------------------------------

TITLE: Listing Virtual Hosts with Metadata Using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates how to list virtual hosts along with their metadata using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl -q --formatter=pretty_table list_vhosts name description tags default_queue_type

----------------------------------------

TITLE: Implementing RPC Client Interface in Ruby
DESCRIPTION: This code snippet demonstrates a simple client interface for making RPC calls using RabbitMQ. It creates a FibonacciClient class with a 'call' method that sends an RPC request and waits for the response.

LANGUAGE: ruby
CODE:
client = FibonacciClient.new('rpc_queue')

puts ' [x] Requesting fib(30)'
response = client.call(30)

puts " [.] Got #{response}"

----------------------------------------

TITLE: Prometheus RBAC Configuration
DESCRIPTION: YAML configuration for setting up RBAC permissions for Prometheus in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: monitoring

----------------------------------------

TITLE: Creating Default User in Definitions JSON
DESCRIPTION: Demonstrates how to modify the definitions JSON file to create a default user with administrator privileges. This is useful for test or QA environments when importing definitions at boot time.

LANGUAGE: javascript
CODE:
"users": [
    {
        "name": "guest",
        "password_hash": "9/1i+jKFRpbTRV1PtRnzFFYibT3cEpP92JeZ8YKGtflf4e/u",
        "tags": ["administrator"]
    }
],
"permissions":[
    {
        "user":"guest",
        "vhost":"/",
        "configure":".*",
        "read":".*",
        "write":".*"}
],

----------------------------------------

TITLE: Emitting Log Messages with Topics in Elixir
DESCRIPTION: This code snippet demonstrates how to publish messages to a topic exchange in RabbitMQ using Elixir. It creates a connection, declares a topic exchange, and publishes messages with routing keys based on command-line arguments.

LANGUAGE: elixir
CODE:
{
:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

{topic, message} =
  System.argv
  |> case do
    []            -> {"anonymous.info", "Hello World!"}
    [message]     -> {"anonymous.info", message}
    [topic|words] -> {topic, Enum.join(words, " ")}
  end

AMQP.Exchange.declare(channel, "topic_logs", :topic)

AMQP.Basic.publish(channel, "topic_logs", topic, message)
IO.puts " [x] Sent '[#{topic}] #{message}'"

AMQP.Connection.close(connection)

----------------------------------------

TITLE: Configuring Basic RabbitMQ Connection with URI Parameters
DESCRIPTION: Example of a non-encrypted RabbitMQ connection URI with heartbeat and connection timeout parameters.

LANGUAGE: ini
CODE:
amqp://myhost?heartbeat=5&connection_timeout=10000

----------------------------------------

TITLE: RabbitMQ Stream Client Import - JavaScript
DESCRIPTION: Imports the RabbitMQ stream client library in JavaScript.

LANGUAGE: javascript
CODE:
const rabbit = require("rabbitmq-stream-js-client")

----------------------------------------

TITLE: Downloading MQTT Adapter Plugin for RabbitMQ
DESCRIPTION: Command to download the MQTT adapter plugin for RabbitMQ version 2.8.6 from the preview release downloads.

LANGUAGE: shell
CODE:
wget https://www.rabbitmq.com/releases/plugins/v2.8.6-mqtt-preview/rabbitmq_mqtt-2.8.6.ez

----------------------------------------

TITLE: Channel Creation
DESCRIPTION: Creating a channel for AMQP operations

LANGUAGE: go
CODE:
ch, err := conn.Channel()
failOnError(err, "Failed to open a channel")
defer ch.Close()

----------------------------------------

TITLE: Declaring Delayed Message Exchange in Java
DESCRIPTION: This Java code snippet demonstrates how to declare a delayed message exchange in RabbitMQ. It uses the 'x-delayed-message' exchange type and specifies the underlying exchange type with the 'x-delayed-type' argument.

LANGUAGE: java
CODE:
// ... elided code ...
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-delayed-type", "direct");
channel.exchangeDeclare("my-exchange", "x-delayed-message", true, false, args);
// ... more code ...

----------------------------------------

TITLE: Implementing Message Receiver with Topic Routing
DESCRIPTION: Message receiver class that handles messages from multiple queues using @RabbitListener annotations. Includes timing and processing logic for received messages.

LANGUAGE: java
CODE:
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.util.StopWatch;

public class Tut5Receiver {
	@RabbitListener(queues = "#{autoDeleteQueue1.name}")
	public void receive1(String in) throws InterruptedException {
		receive(in, 1);
	}

	@RabbitListener(queues = "#{autoDeleteQueue2.name}")
	public void receive2(String in) throws InterruptedException {
		receive(in, 2);
	}

	public void receive(String in, int receiver) throws InterruptedException {
		StopWatch watch = new StopWatch();
		watch.start();
		System.out.println("instance " + receiver + " [x] Received '" + in + "'");
		doWork(in);
		watch.stop();
		System.out.println("instance " + receiver + " [x] Done in " + watch.getTotalTimeSeconds() + "s");
	}

	private void doWork(String in) throws InterruptedException {
		for (char ch : in.toCharArray()) {
			if (ch == '.') {
				Thread.sleep(1000);
			}
		}
	}
}

----------------------------------------

TITLE: Implementing RabbitMQ Consumer
DESCRIPTION: Complete consumer implementation including connection setup and message subscription with blocking behavior.

LANGUAGE: ruby
CODE:
begin
  puts ' [*] Waiting for messages. To exit press CTRL+C'
  queue.subscribe(block: true) do |_delivery_info, _properties, body|
    puts " [x] Received #{body}"
  end
rescue Interrupt => _
  connection.close

  exit(0)
end

----------------------------------------

TITLE: Importing Required Libraries for RabbitMQ Stream Consumer
DESCRIPTION: Imports necessary modules for creating a RabbitMQ stream consumer in Python.

LANGUAGE: python
CODE:
import asyncio
import signal

from rstream import (
    AMQPMessage,
    Consumer,
    MessageContext,
    ConsumerOffsetSpecification,
    OffsetType
)

----------------------------------------

TITLE: Listing Virtual Hosts with Metadata Using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates how to list virtual hosts along with their metadata using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl -q --formatter=pretty_table list_vhosts name description tags default_queue_type

----------------------------------------

TITLE: Executing PerfTest with Cluster Minority
DESCRIPTION: Demonstration of PerfTest tool behavior when attempting to declare resources in a RabbitMQ cluster where only 1 out of 5 nodes is running, showing the timeout error response.

LANGUAGE: bash
CODE:
./scripts/PerfTest

# => id: test-161339-979, starting consumer #0
# => id: test-161339-979, starting consumer #0, channel #0
# =>  Main thread caught exception: java.io.IOException
# =>  16:14:10.638 [com.rabbitmq.perf.PerfTest.main()] ERROR com.rabbitmq.perf.PerfTest - Main thread caught exception
# =>  (...)

LANGUAGE: bash
CODE:
[error] <0.1373.0> Error on AMQP connection <0.1373.0> (127.0.0.1:55165 -> 127.0.0.1:5672 - perf-test-consumer-0, vhost: '/', user: 'guest', state: running), channel 1:
[error] <0.1373.0>  operation exchange.declare caused a connection exception internal_error: "failed to declare exchange 'direct' in vhost '/' because the operation timed out"

----------------------------------------

TITLE: Implementing RabbitMQ Message Receiver with Spring AMQP
DESCRIPTION: Java class for receiving messages from a RabbitMQ queue using Spring AMQP's @RabbitListener annotation. It prints received messages to the console.

LANGUAGE: java
CODE:
package org.springframework.amqp.tutorials.tut1;

import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;

@RabbitListener(queues = "hello")
public class Tut1Receiver {

    @RabbitHandler
    public void receive(String in) {
        System.out.println(" [x] Received '" + in + "'");
    }
}

----------------------------------------

TITLE: Auth0 JWT Token Structure
DESCRIPTION: Example of an Auth0-issued JWT access token containing RabbitMQ permissions and scopes

LANGUAGE: javascript
CODE:
{
  "iss": "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/",
  "sub": "auth0|66d980b862efcd9f5144f42a",
  "aud": [
    "rabbitmq",
    "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo"
  ],
  "iat": 1725533554,
  "exp": 1725619954,
  "scope": "openid profile rabbitmq.tag:administrator",
  "azp": "IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2",
  "permissions": [
    "rabbitmq.configure:*/*",
    "rabbitmq.read:*/*",
    "rabbitmq.tag:administrator",
    "rabbitmq.write:*/*"
  ]
}

----------------------------------------

TITLE: Implementing a Message Sender for Fanout Exchange
DESCRIPTION: This code snippet shows how to implement a message sender that publishes messages to a fanout exchange using Spring AMQP. It demonstrates the use of RabbitTemplate and scheduled message sending.

LANGUAGE: Java
CODE:
public class Tut3Sender {

	@Autowired
	private RabbitTemplate template;

	@Autowired
	private FanoutExchange fanout;

	AtomicInteger dots = new AtomicInteger(0);

	AtomicInteger count = new AtomicInteger(0);

	@Scheduled(fixedDelay = 1000, initialDelay = 500)
	public void send() {
		StringBuilder builder = new StringBuilder("Hello");
		if (dots.getAndIncrement() == 3) {
			dots.set(1);
		}
		for (int i = 0; i < dots.get(); i++) {
			builder.append('.');
		}
		builder.append(count.incrementAndGet());
		String message = builder.toString();
		template.convertAndSend(fanout.getName(), "", message);
		System.out.println(" [x] Sent '" + message + "'");
	}

}

----------------------------------------

TITLE: Configuring Consumer with Filter Values in Java
DESCRIPTION: This code demonstrates how to create a Consumer that filters messages based on specific values and includes a post-filter for client-side filtering.

LANGUAGE: java
CODE:
Consumer consumer = environment.consumerBuilder()
  .stream("invoices")
  .filter()
    .values("emea")  
    .postFilter(msg -> "emea".equals(msg.getApplicationProperties().get("region")))
  .builder()
  .messageHandler((ctx, msg) -> {
    // message processing code
  })
  .build();

----------------------------------------

TITLE: Verifying TLS Listeners in RabbitMQ
DESCRIPTION: Use rabbitmq-diagnostics to check the listeners on a RabbitMQ node, including TLS-enabled ports.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics listeners

----------------------------------------

TITLE: Handling Publish Confirmations in Go for RabbitMQ Stream
DESCRIPTION: Implements a goroutine to handle publish confirmations and signal when all messages are confirmed.

LANGUAGE: go
CODE:
func handlePublishConfirm(confirms stream.ChannelPublishConfirm, messageCount int, ch chan bool) {
    go func() {
        confirmedCount := 0
        for confirmed := range confirms {
            for _, _ = range confirmed {
                if msg.IsConfirmed() {
                    confirmedCount++
                    if confirmedCount == messageCount {
                        ch <- true
                    }
                }
            }
        }
    }()
}

----------------------------------------

TITLE: Clearing RabbitMQ User Permissions
DESCRIPTION: Clears permissions for a user in a specific virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_permissions -p my-vhost janeway

----------------------------------------

TITLE: Running RPC Server - Bash
DESCRIPTION: Command to start the RPC server

LANGUAGE: bash
CODE:
python rpc_server.py
# => [x] Awaiting RPC requests

----------------------------------------

TITLE: Identity Monad Implementation
DESCRIPTION: Example implementation of the identity monad showing the basic monad operators.

LANGUAGE: erlang
CODE:
-module(identity_m).
-behaviour(monad).
-export(['>>='/2, return/1, fail/1]).

'>>='(X, Fun) -> Fun(X).
return(X)     -> X.
fail(X)       -> throw({error, X}).

----------------------------------------

TITLE: Top-Level Shovel Definition
DESCRIPTION: Example of a top-level shovel definition with source, destination, and basic configuration options

LANGUAGE: erlang
CODE:
{shovel_name, [
  {source, [
    %% protocol-specific source configuration goes here
  ]},
  {destination, [
    %% protocol-specific destination configuration goes here
  ]},
  %% 'confirm' is the default acknowledgement mode
  {ack_mode, confirm},
  %% reconnect with a 5 second delay
  {reconnect_delay, 5}
]}

----------------------------------------

TITLE: RabbitMQ Stream Producer Implementation - JavaScript
DESCRIPTION: Complete implementation of a message producer that creates a stream and publishes a message.

LANGUAGE: javascript
CODE:
const streamName = "hello-nodejs-stream";

console.log("Connecting...");
const client = await rabbit.connect({
        vhost: "/",
        port: 5552,
        hostname: "localhost",
        username: "guest",
        password: "guest",
    });

console.log("Making sure the stream exists...");
const streamSizeRetention = 5 * 1e9
await client.createStream({ stream: streamName, arguments: { "max-length-bytes": streamSizeRetention } });

const publisher = await client.declarePublisher({ stream: streamName });

console.log("Sending a message...");
await publisher.send(Buffer.from("Test message"));

----------------------------------------

TITLE: Declaring and Publishing to a RabbitMQ Stream in Go
DESCRIPTION: Declares a new stream with a specified name and options, creates a producer, and sends a message to the stream. This snippet demonstrates stream creation and message publishing.

LANGUAGE: go
CODE:
streamName := "hello-go-stream"
env.DeclareStream(streamName,
    &stream.StreamOptions{
        MaxLengthBytes: stream.ByteCapacity{}.GB(2),
    },
)

producer, err := env.NewProducer(streamName, stream.NewProducerOptions())
if err != nil {
    log.Fatalf("Failed to create producer: %v", err)
}

err = producer.Send(amqp.NewMessage([]byte("Hello world")))
if err != nil {
    log.Fatalf("Failed to send message: %v", err)
}

----------------------------------------

TITLE: Testing TCP Connection with Telnet
DESCRIPTION: This snippet demonstrates using telnet to test TCP connectivity to a RabbitMQ server. It shows both a successful connection attempt to port 5672 and a failed attempt to port 5673.

LANGUAGE: bash
CODE:
telnet localhost 5672
# => Trying ::1...
# => Connected to localhost.
# => Escape character is '^]'.
12345 # enter this and hit Enter to send
# => AMQP	Connection closed by foreign host.

LANGUAGE: bash
CODE:
telnet localhost 5673
# => Trying ::1...
# => telnet: connect to address ::1: Connection refused
# => Trying 127.0.0.1...
# => telnet: connect to address 127.0.0.1: Connection refused
# => telnet: Unable to connect to remote host

----------------------------------------

TITLE: Stopping the RabbitMQ Node
DESCRIPTION: Stops the Erlang node on which RabbitMQ is running.

LANGUAGE: bash
CODE:
rabbitmqctl stop

----------------------------------------

TITLE: Subscribing to Multiple Severities in Ruby
DESCRIPTION: Shows how to create bindings for multiple severity levels when subscribing to log messages.

LANGUAGE: ruby
CODE:
queue = channel.queue('')

ARGV.each do |severity|
  queue.bind('logs', routing_key: severity)
end

----------------------------------------

TITLE: Installing Bunny Client - RabbitMQ Ruby Client
DESCRIPTION: Command to install the Bunny gem, which is the Ruby client for RabbitMQ, using Rubygems package manager.

LANGUAGE: bash
CODE:
gem install bunny --version ">= 2.13.0"

----------------------------------------

TITLE: Starting RabbitMQ with Auth0 Configuration
DESCRIPTION: Commands to start RabbitMQ with Auth0 authentication mode enabled

LANGUAGE: bash
CODE:
export MODE=auth0
make start-rabbitmq

----------------------------------------

TITLE: Joining a RabbitMQ Cluster with Khepri Timeout Error (PowerShell)
DESCRIPTION: This PowerShell command shows an attempt to join a node to a RabbitMQ cluster using Khepri, resulting in a timeout error due to a lack of quorum. It illustrates the potential issues when joining a cluster with insufficient active nodes in a Windows environment.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat -n rabbit@host-5 join_cluster rabbit@host-4

# => Error:
# => Khepri has timed out on node rabbit@host-5.
# => Khepri cluster could be in minority.

----------------------------------------

TITLE: Advanced Configuration for etcd Peer Discovery
DESCRIPTION: Example of advanced configuration for etcd peer discovery, including TLS settings.

LANGUAGE: erlang
CODE:
%% advanced.config file
[
 {rabbit,
     [{cluster_formation,
          [{peer_discovery_etcd, [
                {endpoints, [
                  "one.etcd.eng.example.local:2379",
                  "two.etcd.eng.example.local:2479",
                  "three.etcd.eng.example.local:2579"
                ]},

                {etcd_prefix,   "rabbitmq"},
                {cluster_name,  "default"},

                {etcd_username, "etcd user"},
                {etcd_password, {encrypted, <<"cPAymwqmMnbPXXRVqVzpxJdrS8mHEKuo2V+3vt1u/fymexD9oztQ2G/oJ4PAaSb2c5N/hRJ2aqP/X0VAfx8xOQ==">>}
                }]
           }]
      }]
 },

  {config_entry_decoder, [
             {passphrase, <<"decryption key passphrase">>}
         ]}
].

----------------------------------------

TITLE: Starting RabbitMQ with Auth0 Configuration
DESCRIPTION: Commands to start RabbitMQ with Auth0 authentication mode enabled

LANGUAGE: bash
CODE:
export MODE=auth0
make start-rabbitmq

----------------------------------------

TITLE: Implementing Log Emitter with Direct Exchange in Ruby
DESCRIPTION: Complete implementation of a script that emits log messages using a direct exchange and severity-based routing keys.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.direct('direct_logs')
severity = ARGV.shift || 'info'
message = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')

exchange.publish(message, routing_key: severity)
puts " [x] Sent '#{message}'"

connection.close

----------------------------------------

TITLE: Configuring MQTT Session Expiry Interval in RabbitMQ
DESCRIPTION: Configuration snippet to set the maximum allowed MQTT session expiry interval in RabbitMQ.

LANGUAGE: ini
CODE:
mqtt.max_session_expiry_interval_seconds = 60

----------------------------------------

TITLE: Importing RabbitMQ Signing Key via Direct Download
DESCRIPTION: Downloads the RabbitMQ release signing key from GitHub and imports it into GPG.

LANGUAGE: bash
CODE:
curl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc
gpg --import rabbitmq-release-signing-key.asc

----------------------------------------

TITLE: Installing RabbitMQ Cluster Operator via kubectl
DESCRIPTION: Command to install the latest version of RabbitMQ Cluster Operator using kubectl apply. Creates necessary namespaces, custom resource definitions, service accounts, roles, and deployments.

LANGUAGE: bash
CODE:
kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

----------------------------------------

TITLE: Subscribing to RabbitMQ Queue in Swift
DESCRIPTION: Subscribe to a RabbitMQ queue and set up a callback to handle received messages using Swift.

LANGUAGE: swift
CODE:
print("Waiting for messages.")
q.subscribe({(_ message: RMQMessage) -> Void in
    print("Received \(String(data: message.body, encoding: .utf8))")
})

----------------------------------------

TITLE: Example Configuration (AMQP 0-9-1 Source to AMQP 1.0 Destination)
DESCRIPTION: This example illustrates a static shovel configuration between an AMQP 0-9-1 source and an AMQP 1.0 destination, showcasing protocol-specific settings and advanced options for both endpoints.

LANGUAGE: erlang
CODE:
{rabbitmq_shovel,
 [{shovels, [{my_first_shovel,
              {source,
               [{protocol, amqp091},
                {uris, ["amqp://fred:secret@host1.domain/my_vhost",
                        "amqp://john:secret@host2.domain/my_vhost"]},
                {declarations, [{'exchange.declare',
                                   [{exchange, <<"my_fanout">>},
                                    {type, <<"fanout">>},
                                    durable]},
                                {'queue.declare',
                                   [{arguments,
                                      [{<<"x-message-ttl">>, long, 60000}]}]},
                                {'queue.bind',
                                   [{exchange, <<"my_fanout">>},
                                    {queue,    <<>>}
                                    ]}
                               ]},
                {queue, <<>>},
                {prefetch_count, 10}
               ]},
              {destination,
               [{protocol, amqp10},
                {uris, ["amqp://host:5672"]},
                {properties, [{user_id, <<"my-user">>}]},
                {application_properties, [{<<"my-prop">>, <<"my-prop-value">>}]},
                {add_forward_headers, true},
                {target_address, <<"destination-queue">>}
               ]},
              {ack_mode, on_confirm},
              {reconnect_delay, 5}
             }]}
 ]}
}

----------------------------------------

TITLE: Defining AMQP URI Syntax in ABNF
DESCRIPTION: Specifies the formal syntax for AMQP URIs using Augmented Backus-Naur Form (ABNF). This defines the structure for 'amqp' scheme URIs, including rules for the authority component, userinfo, host, port, vhost, and query parameters.

LANGUAGE: ABNF
CODE:
amqp_URI       = "amqp://" amqp_authority [ "/" vhost ] [ "?" query ]

amqp_authority = [ amqp_userinfo "@" ] host [ ":" port ]

amqp_userinfo  = username [ ":" password ]

username       = *( unreserved / pct-encoded / sub-delims )

password       = *( unreserved / pct-encoded / sub-delims )

vhost          = segment

----------------------------------------

TITLE: Importing RabbitMQ Signing Key from Key Server
DESCRIPTION: Imports the RabbitMQ signing key from keys.openpgp.org using GPG.

LANGUAGE: bash
CODE:
gpg --keyserver "hkps://keys.openpgp.org" --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"

----------------------------------------

TITLE: Configuring Minimum Password Length Validator
DESCRIPTION: Configuration example for setting up minimum password length validation.

LANGUAGE: ini
CODE:
credential_validator.validation_backend = rabbit_credential_validator_min_password_length
credential_validator.min_length = 30

----------------------------------------

TITLE: Publishing Message to RabbitMQ Queue
DESCRIPTION: Code to declare a queue and publish a message to it using the default exchange.

LANGUAGE: ruby
CODE:
queue = channel.queue('hello')

channel.default_exchange.publish('Hello World!', routing_key: queue.name)
puts " [x] Sent 'Hello World!'"

----------------------------------------

TITLE: Host Configuration for DNS Resolution
DESCRIPTION: Required host file entries to enable proper DNS resolution for the components

LANGUAGE: plain
CODE:
localhost keycloak rabbitmq forward-proxy

----------------------------------------

TITLE: Importing RabbitMQ Stream Consumer Classes in Java
DESCRIPTION: This Java code snippet shows the import statements required for creating a RabbitMQ Stream consumer. It imports necessary classes from the com.rabbitmq.stream package.

LANGUAGE: Java
CODE:
import com.rabbitmq.stream.ByteCapacity;
import com.rabbitmq.stream.Consumer;
import com.rabbitmq.stream.Environment;
import com.rabbitmq.stream.OffsetSpecification;

----------------------------------------

TITLE: Queue Binding with Routing Key
DESCRIPTION: Shows how to bind a queue to an exchange with a specific routing key for message filtering.

LANGUAGE: java
CODE:
channel.queueBind(queueName, EXCHANGE_NAME, "black");

----------------------------------------

TITLE: Publishing Messages with Validated User-ID in RabbitMQ using Java
DESCRIPTION: Example showing how to publish a message with a validated user-id property in RabbitMQ. The message will only be published if the user-id matches the connected user's name.

LANGUAGE: java
CODE:
AMQP.BasicProperties properties = new AMQP.BasicProperties();
properties.setUserId("guest");
channel.basicPublish("amq.fanout", "", properties, "test".getBytes());

----------------------------------------

TITLE: Connecting Application to RabbitMQ Cluster
DESCRIPTION: Commands to set up and run a performance test application (perf-test) connected to the RabbitMQ cluster. This demonstrates how to connect an application and use the messaging capabilities.

LANGUAGE: bash
CODE:
username="$(kubectl get secret hello-world-default-user -o jsonpath='{.data.username}' | base64 --decode)"
password="$(kubectl get secret hello-world-default-user -o jsonpath='{.data.password}' | base64 --decode)"
service="$(kubectl get service hello-world -o jsonpath='{.spec.clusterIP}')"
kubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri amqp://$username:$password@$service

----------------------------------------

TITLE: Configuring Password Regexp Validator in RabbitMQ
DESCRIPTION: This snippet demonstrates how to set up a regular expression-based password validator in RabbitMQ's configuration file.

LANGUAGE: ini
CODE:
credential_validator.validation_backend = rabbit_credential_validator_password_regexp
credential_validator.regexp = ^[a-bA-Z0-9$]{20,100}

----------------------------------------

TITLE: Complete Log Emitter Implementation
DESCRIPTION: Full implementation of a program that emits logs with different severity levels using RabbitMQ direct exchange.

LANGUAGE: java
CODE:
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

public class EmitLogDirect {

  private static final String EXCHANGE_NAME = "direct_logs";

  public static void main(String[] argv) throws Exception {
    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");
    try (Connection connection = factory.newConnection();
         Channel channel = connection.createChannel()) {
        channel.exchangeDeclare(EXCHANGE_NAME, "direct");

        String severity = getSeverity(argv);
        String message = getMessage(argv);

        channel.basicPublish(EXCHANGE_NAME, severity, null, message.getBytes("UTF-8"));
        System.out.println(" [x] Sent '" + severity + "':'" + message + "'");
    }
  }
  //..
}

----------------------------------------

TITLE: Initializing RabbitMQ Producer - Basic Setup
DESCRIPTION: Basic setup code for a RabbitMQ producer including library import and connection initialization.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

----------------------------------------

TITLE: Configuring Minimum Password Length Validator
DESCRIPTION: Configuration example for setting up minimum password length validation.

LANGUAGE: ini
CODE:
credential_validator.validation_backend = rabbit_credential_validator_min_password_length
credential_validator.min_length = 30

----------------------------------------

TITLE: Monitoring and Debugging RabbitMQ
DESCRIPTION: Commands for monitoring and debugging RabbitMQ clusters including accessing secrets, management UI, and log management

LANGUAGE: bash
CODE:
kubectl rabbitmq secrets INSTANCE

LANGUAGE: bash
CODE:
kubectl rabbitmq manage INSTANCE

LANGUAGE: bash
CODE:
kubectl rabbitmq debug INSTANCE

LANGUAGE: bash
CODE:
kubectl rabbitmq tail INSTANCE

----------------------------------------

TITLE: Setting Max Queue Length Policy with rabbitmqctl (Bash)
DESCRIPTION: Uses rabbitmqctl to set a policy that limits a queue to 1MiB of message data. When the limit is reached, the oldest messages are discarded.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy my-pol "^one-meg$" \
  '{"max-length-bytes":1048576}' \
  --apply-to queues

----------------------------------------

TITLE: Implementing a Message Sender with Routing in Spring AMQP
DESCRIPTION: Shows how to implement a message sender that uses routing keys to send messages to specific queues in Spring AMQP.

LANGUAGE: java
CODE:
package org.springframework.amqp.tutorials.tut4;

import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import java.util.concurrent.atomic.AtomicInteger;

public class Tut4Sender {

	@Autowired
	private RabbitTemplate template;

	@Autowired
	private DirectExchange direct;

	AtomicInteger index = new AtomicInteger(0);

	AtomicInteger count = new AtomicInteger(0);

	private final String[] keys = {"orange", "black", "green"};

	@Scheduled(fixedDelay = 1000, initialDelay = 500)
	public void send() {
		StringBuilder builder = new StringBuilder("Hello to ");
		if (this.index.incrementAndGet() == 3) {
			this.index.set(0);
		}
		String key = keys[this.index.get()];
		builder.append(key).append(' ');
		builder.append(this.count.get());
		String message = builder.toString();
		template.convertAndSend(direct.getName(), key, message);
		System.out.println(" [x] Sent '" + message + "'");
	}

}

----------------------------------------

TITLE: Error Logging for Disabled Required Feature Flags in RabbitMQ
DESCRIPTION: Example error message shown when RabbitMQ 3.11.0+ fails to start due to disabled required feature flags. The log shows the specific feature flag that needs to be enabled and the resulting boot failure.

LANGUAGE: plaintext
CODE:
2022-07-13 11:29:28.366877+02:00 [error] <0.232.0> Feature flags: `implicit_default_bindings`: required feature flag not enabled! It must be enabled before upgrading RabbitMQ.
2022-07-13 11:29:28.366905+02:00 [error] <0.232.0> Failed to initialize feature flags registry: {disabled_required_feature_flag,
2022-07-13 11:29:28.366905+02:00 [error] <0.232.0>                                               implicit_default_bindings}
2022-07-13 11:29:28.372830+02:00 [error] <0.232.0>
2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> BOOT FAILED
2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> ===========
2022-07-13 11:29:28.372830+02:00 [error] <0.232.0> Error during startup: {error,failed_to_initialize_feature_flags_registry}
2022-07-13 11:29:28.372830+02:00 [error] <0.232.0>

----------------------------------------

TITLE: Setting Overflow Behavior Policy with rabbitmqctl in Bash
DESCRIPTION: Uses rabbitmqctl to set a policy that limits a queue to 2 messages and rejects new publishes when the limit is reached.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy my-pol "^two-messages$" \
  '{"max-length":2,"overflow":"reject-publish"}' \
  --apply-to queues

----------------------------------------

TITLE: Initializing MQTT Client in JavaScript
DESCRIPTION: JavaScript code to initialize the Paho MQTT client for WebSocket connection.

LANGUAGE: javascript
CODE:
var wsbroker = location.hostname;
var wsport = 15675;
var client = new Paho.MQTT.Client(wsbroker, wsport, "/ws",
    "myclientid_" + parseInt(Math.random() * 100, 10));
client.onConnectionLost = function (responseObject) {
    debug("CONNECTION LOST - " + responseObject.errorMessage);
};
client.onMessageArrived = function (message) {
    debug("RECEIVE ON " + message.destinationName + " PAYLOAD " + message.payloadString);
    print_first(message.payloadString);
};

----------------------------------------

TITLE: Importing Required Packages for RabbitMQ Stream in Go
DESCRIPTION: Import statements for the necessary packages to work with RabbitMQ streams in Go, including the RabbitMQ stream client library.

LANGUAGE: go
CODE:
import (
    "bufio"
    "fmt"
    "github.com/rabbitmq/rabbitmq-stream-go-client/pkg/amqp"
    "github.com/rabbitmq/rabbitmq-stream-go-client/pkg/stream"
    "log"
    "os"
)

----------------------------------------

TITLE: RabbitMQ Default Virtual Host Configuration
DESCRIPTION: Configuration setting in rabbitmq.conf that specifies the default virtual host used when no explicit virtual host is specified by connecting applications.

LANGUAGE: ini
CODE:
default_vhost = /

----------------------------------------

TITLE: Stopping Keycloak Server
DESCRIPTION: Command to stop the Keycloak server

LANGUAGE: bash
CODE:
make stop-keycloak

----------------------------------------

TITLE: Configuring OAuth 2.0 for RabbitMQ Management UI
DESCRIPTION: This configuration sets up OAuth 2.0 for the RabbitMQ Management UI with two resources, each with its own client ID, label, and scopes.

LANGUAGE: ini
CODE:
management.oauth_resource_servers.1.id = rabbit_prod
management.oauth_resource_servers.1.client_id = rabbit_prod_mgt_ui
management.oauth_resource_servers.1.label = RabbitMQ Production
management.oauth_resource_servers.1.scopes = openid profile rabbitmq.tag:administrator

management.oauth_resource_servers.2.id = rabbit_dev
management.oauth_resource_servers.2.client_id = rabbit_dev_mgt_ui
management.oauth_resource_servers.2.label = RabbitMQ Development
management.oauth_resource_servers.2.scopes = openid profile rabbitmq.tag:management

----------------------------------------

TITLE: Configuring Classic Config Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the classic config peer discovery backend with a list of peer nodes.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = classic_config

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

cluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local
cluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local

----------------------------------------

TITLE: Importing Required RabbitMQ PHP Classes
DESCRIPTION: Setting up necessary PHP imports for RabbitMQ client using php-amqplib library

LANGUAGE: php
CODE:
require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

----------------------------------------

TITLE: Adding a Stream Replica in RabbitMQ
DESCRIPTION: Adds a stream replica on a specified node within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams add_replica --vhost "a-vhost" "a-queue" "rabbit@new-node"

----------------------------------------

TITLE: RabbitMQ Native MQTT Configuration
DESCRIPTION: Full RabbitMQ configuration for Native MQTT benchmarking including TCP options and queue settings.

LANGUAGE: ini
CODE:
mqtt.mailbox_soft_limit = 0
mqtt.tcp_listen_options.nodelay = true
mqtt.tcp_listen_options.backlog = 128
mqtt.tcp_listen_options.sndbuf = 87380
mqtt.tcp_listen_options.recbuf = 87380
mqtt.tcp_listen_options.buffer = 87380
classic_queue.default_version = 2

----------------------------------------

TITLE: Deploying RabbitMQ with OAuth2 Configuration
DESCRIPTION: Commands to start RabbitMQ with OAuth2 configuration using UAA as the provider. It sets environment variables and uses Docker for deployment.

LANGUAGE: bash
CODE:
export MODE=portal
OAUTH_PROVIDER=uaa make start-rabbitmq

----------------------------------------

TITLE: Configuring Log Forwarding to System Exchange in RabbitMQ
DESCRIPTION: Example of how to configure log forwarding to the amq.rabbitmq.log system exchange.

LANGUAGE: ini
CODE:
log.exchange = true
log.exchange.level = warning

----------------------------------------

TITLE: Declaring a Direct Exchange in Go
DESCRIPTION: Creates a direct exchange named 'logs_direct' using the RabbitMQ Go client.

LANGUAGE: go
CODE:
err = ch.ExchangeDeclare(
  "logs_direct", // name
  "direct",      // type
  true,          // durable
  false,         // auto-deleted
  false,         // internal
  false,         // no-wait
  nil,           // arguments
)

----------------------------------------

TITLE: Publishing Messages to Named Exchange in RabbitMQ
DESCRIPTION: Demonstrates how to publish messages to a specific named exchange instead of the default exchange.

LANGUAGE: objectivec
CODE:
RMQExchange *x = [ch fanout:@"logs"];
[x publish:[msg dataUsingEncoding:NSUTF8StringEncoding]];

----------------------------------------

TITLE: Defining AMQP URI Syntax in ABNF
DESCRIPTION: ABNF rules defining the syntax of an AMQP 0-9-1 URI, including the structure of the authority, userinfo, username, password, and vhost components.

LANGUAGE: abnf
CODE:
amqp_URI       = "amqp://" amqp_authority [ "/" vhost ] [ "?" query ]

amqp_authority = [ amqp_userinfo "@" ] host [ ":" port ]

amqp_userinfo  = username [ ":" password ]

username       = *( unreserved / pct-encoded / sub-delims )

password       = *( unreserved / pct-encoded / sub-delims )

vhost          = segment

----------------------------------------

TITLE: Configuring Classic Config Peer Discovery in RabbitMQ
DESCRIPTION: Example of configuring the classic config peer discovery backend with a list of peer nodes.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = classic_config

# the backend can also be specified using its module name
# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

cluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local
cluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local

----------------------------------------

TITLE: Installing Topology Operator with cert-manager
DESCRIPTION: Command to install the RabbitMQ Messaging Topology Operator using the cert-manager installation method.

LANGUAGE: bash
CODE:
kubectl apply -f https://github.com/rabbitmq/messaging-topology-operator/releases/latest/download/messaging-topology-operator-with-certmanager.yaml

----------------------------------------

TITLE: Inspecting Queue Length Limits with rabbitmqctl
DESCRIPTION: Uses rabbitmqctl to list queues and display their arguments and applied policies, which can show queue length limits.

LANGUAGE: bash
CODE:
rabbitmqctl list_queues name durable arguments policy --formatter=pretty_table --silent

----------------------------------------

TITLE: Implementing Worker Consumer in Elixir
DESCRIPTION: Worker implementation that processes messages from the queue, simulates work with delays, and implements proper message acknowledgment.

LANGUAGE: elixir
CODE:
defmodule Worker do
  def wait_for_messages(channel) do
    receive do
      {:basic_deliver, payload, meta} ->
        IO.puts " [x] Received #{payload}"
        payload
        |> to_char_list
        |> Enum.count(fn x -> x == ?. end)
        |> Kernel.*(1000)
        |> :timer.sleep
        IO.puts " [x] Done."

        wait_for_messages(channel)
    end
  end
end

----------------------------------------

TITLE: TLS Configuration in New Format
DESCRIPTION: Shows how to configure SSL/TLS certificates and verification options using the new format.

LANGUAGE: ini
CODE:
ssl_options.cacertfile           = /path/to/testca/cacert.pem
ssl_options.certfile             = /path/to/server/cert.pem
ssl_options.keyfile              = /path/to/server/key.pem
ssl_options.verify               = verify_peer
ssl_options.fail_if_no_peer_cert = true

----------------------------------------

TITLE: Deploying RabbitMQ with OAuth2 Configuration
DESCRIPTION: Commands to start RabbitMQ with OAuth2 configuration using UAA as the provider. It sets environment variables and uses Docker for deployment.

LANGUAGE: bash
CODE:
export MODE=portal
OAUTH_PROVIDER=uaa make start-rabbitmq

----------------------------------------

TITLE: Declaring a Queue in RabbitMQ using Elixir
DESCRIPTION: Declares a queue named 'hello' in RabbitMQ. This ensures the queue exists before sending or receiving messages.

LANGUAGE: elixir
CODE:
AMQP.Queue.declare(channel, "hello")

----------------------------------------

TITLE: Enabling Feature Flags with rabbitmqctl
DESCRIPTION: Demonstrates how to enable a specific feature flag or all stable feature flags using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag <name>

# To enable all stable feature flags:
rabbitmqctl enable_feature_flag all

----------------------------------------

TITLE: Installing Erlang with kerl
DESCRIPTION: Commands to build and install Erlang/OTP 25.0 using kerl tool

LANGUAGE: bash
CODE:
kerl build 25.0 25.0
kerl install 25.0 ~/kerl/25.0
source ~/kerl/25.0

----------------------------------------

TITLE: Launching Erlang Crash Dump Viewer in Bash
DESCRIPTION: This command shows how to launch the Erlang Crash Dump Viewer (cdv) tool to visualize the state of the Erlang runtime from a crash dump file. The path to the cdv binary may vary depending on the Erlang installation.

LANGUAGE: bash
CODE:
/usr/local/lib/erlang/lib/observer-2.9.1/priv/bin/cdv ./erl_crash.dump

----------------------------------------

TITLE: Initializing a Single Active Consumer for Streams in Java
DESCRIPTION: This code snippet demonstrates how to create a single active consumer for a stream using the RabbitMQ Stream Java client. It sets up a consumer with a name, enables the single active consumer feature, and defines a message handler.

LANGUAGE: java
CODE:
System.out.println("Starting consumer instance " + i);
Consumer consumer = environment.consumerBuilder()
    .stream(stream)
    .name(reference)
    .singleActiveConsumer()
    .autoTrackingStrategy()
        .messageCountBeforeStorage(10)
    .builder()
    .messageHandler((context, message) -> {
        System.out.printf(
            "Consumer instance %d received a message (%d).%n",
            i, sequence.incrementAndGet()
        );
    })
    .build();

----------------------------------------

TITLE: Importing Required Namespaces for RabbitMQ in C#
DESCRIPTION: Import the necessary namespaces for using RabbitMQ in a C# application.

LANGUAGE: C#
CODE:
using System.Text;
using RabbitMQ.Client;

----------------------------------------

TITLE: Configuring Pause-if-all-down Partition Handling in RabbitMQ
DESCRIPTION: This configuration snippet shows how to set up the pause-if-all-down partition handling strategy in RabbitMQ, specifying nodes to check and the recovery action.

LANGUAGE: plaintext
CODE:
cluster_partition_handling = pause_if_all_down

## Recovery strategy. Can be either 'autoheal' or 'ignore'
cluster_partition_handling.pause_if_all_down.recover = ignore

## Node names to check
cluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@myhost1
cluster_partition_handling.pause_if_all_down.nodes.2 = rabbit@myhost2

----------------------------------------

TITLE: Creating a Binding with Routing Key in Ruby
DESCRIPTION: Demonstrates how to create a binding between a queue and an exchange with a specific routing key.

LANGUAGE: ruby
CODE:
queue.bind(exchange_name, routing_key: 'black')

----------------------------------------

TITLE: Checking RabbitMQ Server Status
DESCRIPTION: This command uses the rabbitmq-diagnostics tool to check the status of the RabbitMQ server.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status

----------------------------------------

TITLE: Defining RabbitMQ Policy
DESCRIPTION: YAML definition for a RabbitMQ Policy resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Policy
metadata:
  name: policy-example
  namespace: rabbitmq-system
spec:
  name: lazy-queue
  pattern: "^lazy-queue-"
  applyTo: "queues"
  definition:
    queue-mode: lazy
  rabbitmqClusterReference:
    name: example-rabbit

----------------------------------------

TITLE: React Component Import Statements
DESCRIPTION: Import statements for Docusaurus-specific React components used in the blog post

LANGUAGE: javascript
CODE:
import ThemedImage from '@theme/ThemedImage';
import useBaseUrl from '@docusaurus/useBaseUrl';

----------------------------------------

TITLE: RabbitMQ Direct Exchange Flow Diagram in Mermaid
DESCRIPTION: Mermaid flowchart showing a RabbitMQ topology with a producer (P) sending messages through a direct exchange (X) to two queues (Q₁, Q₂) which are consumed by two consumers (C₁, C₂). The exchange routes messages using three different routing keys: orange to Q₁, and both black and green to Q₂.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{direct}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X
    X -- orange --> Q1
    X -- black --> Q2
    X -- green --> Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Configuring Fanout Exchange and Queues with Spring AMQP
DESCRIPTION: This snippet demonstrates how to configure a fanout exchange, anonymous queues, and bindings using Spring AMQP annotations. It sets up the necessary components for a publish/subscribe pattern.

LANGUAGE: Java
CODE:
@Profile({"tut3", "pub-sub", "publish-subscribe"})
@Configuration
public class Tut3Config {

	@Bean
	public FanoutExchange fanout() {
		return new FanoutExchange("tut.fanout");
	}

	@Profile("receiver")
	private static class ReceiverConfig {

		@Bean
		public Queue autoDeleteQueue1() {
			return new AnonymousQueue();
		}

		@Bean
		public Queue autoDeleteQueue2() {
			return new AnonymousQueue();
		}

		@Bean
		public Binding binding1(FanoutExchange fanout,
		    Queue autoDeleteQueue1) {
			return BindingBuilder.bind(autoDeleteQueue1).to(fanout);
		}

		@Bean
		public Binding binding2(FanoutExchange fanout,
		    Queue autoDeleteQueue2) {
			return BindingBuilder.bind(autoDeleteQueue2).to(fanout);
		}

		@Bean
		public Tut3Receiver receiver() {
			return new Tut3Receiver();
		}
	}

	@Profile("sender")
	@Bean
	public Tut3Sender sender() {
		return new Tut3Sender();
	}
}

----------------------------------------

TITLE: Declaring Fanout Exchange in Python
DESCRIPTION: Creates a fanout exchange named 'logs' that will broadcast messages to all bound queues.

LANGUAGE: python
CODE:
channel.exchange_declare(exchange='logs',
                         exchange_type='fanout')

----------------------------------------

TITLE: Declaring Dynamic Shovel using rabbitmqctl (Unix)
DESCRIPTION: CLI command to declare a dynamic shovel that moves messages from a source queue to a target queue on a remote server using AMQP 0-9-1

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel my-shovel \
  '{"src-protocol": "amqp091", "src-uri": "amqp://", "src-queue": "source-queue", "dest-protocol": "amqp091", "dest-uri": "amqp://remote-server", "dest-queue": "target-queue", "dest-queue-args": {"x-queue-type": "quorum"}}'

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Statistics Interval
DESCRIPTION: Configuration snippet to set the statistics collection interval.

LANGUAGE: ini
CODE:
collect_statistics_interval = 15000

----------------------------------------

TITLE: Setting Preallocated Memory Area Size for RabbitMQ
DESCRIPTION: Configures a preallocated memory area of 1 GB or 4 GB for the Erlang VM, which can help reduce allocation rate and memory fragmentation for some workloads.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 1024"

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+MMscs 4096"

----------------------------------------

TITLE: Complete Task Publisher Implementation
DESCRIPTION: Full implementation of the task publisher including connection handling, queue declaration with durability, and message publishing with persistence.

LANGUAGE: elixir
CODE:
{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

AMQP.Queue.declare(channel, "task_queue", durable: true)

message =
  case System.argv do
    []    -> "Hello World!"
    words -> Enum.join(words, " ")
  end

AMQP.Basic.publish(channel, "", "task_queue", message, persistent: true)
IO.puts " [x] Sent '#{message}'"

AMQP.Connection.close(connection)

----------------------------------------

TITLE: Calculating Total VHost Rate with Reactive Client
DESCRIPTION: Example showing how to use the ReactiveClient to calculate the total message rate across all virtual hosts in a RabbitMQ broker using reactive streams.

LANGUAGE: java
CODE:
ReactiveClient client = new ReactiveClient("http://localhost:15672/api", "guest", "guest");
Mono<Double> vhostsRate = client.getVhosts()
        .map(vhostInfo -> vhostInfo.getMessagesDetails().getRate())
        .reduce(0.0, (acc, current) -> acc + current);

----------------------------------------

TITLE: Deleting a Virtual Host Using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates how to delete a virtual host named 'qa1' using the rabbitmqctl command-line tool.

LANGUAGE: bash
CODE:
rabbitmqctl delete_vhost qa1

----------------------------------------

TITLE: AMQP Queue Declaration for Exclusive Queues
DESCRIPTION: AMQP command for declaring an exclusive queue in RabbitMQ. Note that RabbitMQ ignores the durable flag for exclusive queues and creates them as transient.

LANGUAGE: AMQP
CODE:
queue.declare (with exclusive flag set to true)

----------------------------------------

TITLE: Creating RabbitMQ Cluster
DESCRIPTION: Command to create a new RabbitMQ cluster instance with basic configuration

LANGUAGE: bash
CODE:
kubectl rabbitmq create INSTANCE

----------------------------------------

TITLE: RabbitMQ Global TLS Configuration in advanced.config
DESCRIPTION: Example of setting global TLS options in the Erlang client configuration file.

LANGUAGE: erlang
CODE:
{amqp_client, [
    {ssl_options, [
        {cacertfile, "path-to-ca-certificate"},
        {certfile, "path-to-certificate"},
        {keyfile, "path-to-keyfile"},
        {verify, verify_peer}
    ]}
]}.

----------------------------------------

TITLE: RabbitMQ Global TLS Configuration in advanced.config
DESCRIPTION: Example of setting global TLS options in the Erlang client configuration file.

LANGUAGE: erlang
CODE:
{amqp_client, [
    {ssl_options, [
        {cacertfile, "path-to-ca-certificate"},
        {certfile, "path-to-certificate"},
        {keyfile, "path-to-keyfile"},
        {verify, verify_peer}
    ]}
]}.

----------------------------------------

TITLE: Setting Max Queue Length Policy with rabbitmqctl (PowerShell)
DESCRIPTION: Uses rabbitmqctl on Windows to set a policy that limits a queue to 1MiB of message data. When the limit is reached, the oldest messages are discarded.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy my-pol "^one-meg$" ^
  "{""max-length-bytes"":1048576}" ^
  --apply-to queues

----------------------------------------

TITLE: Complete Log Emitter Implementation
DESCRIPTION: Full implementation of the log emitter function that publishes messages with severity routing

LANGUAGE: swift
CODE:
func emitLogDirect(_ msg: String, severity: String) {
    let conn = RMQConnection(delegate: RMQConnectionDelegateLogger())
    conn.start()
    let ch = conn.createChannel()
    let x = ch.direct("direct_logs")
    x.publish(msg.data(using: .utf8), routingKey: severity)
    print("Sent '\(msg)'")
    conn.close()
}

----------------------------------------

TITLE: Implementing Topic-based Message Reception in C#
DESCRIPTION: This code snippet shows how to create a topic exchange, bind queues with specific routing patterns, and consume messages based on those patterns. It allows for flexible message filtering.

LANGUAGE: csharp
CODE:
https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/ReceiveLogsTopic/ReceiveLogsTopic.cs

----------------------------------------

TITLE: Enabling Publisher Confirms in PHP
DESCRIPTION: Demonstrates how to enable publisher confirms on a RabbitMQ channel using php-amqplib. This is a required setup step before using any confirmation strategies.

LANGUAGE: php
CODE:
$channel = $connection->channel();
$channel->confirm_select();

----------------------------------------

TITLE: Creating RabbitMQ Flow Diagram using Mermaid
DESCRIPTION: This Mermaid flowchart depicts the basic structure of a RabbitMQ messaging system. It shows a producer (P) sending messages to a queue named 'hello', which are then consumed by a consumer (C). The diagram uses custom CSS classes to style each component.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    Q[[hello]]
    C((C))

    P --> Q --> C

    class P mermaid-producer
    class Q mermaid-queue
    class C mermaid-consumer

----------------------------------------

TITLE: Enabling RabbitMQ Stream Plugins
DESCRIPTION: Docker exec command to enable the RabbitMQ stream and stream management plugins in a running container.

LANGUAGE: bash
CODE:
docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream rabbitmq_stream_management

----------------------------------------

TITLE: Publishing Messages to a Named Exchange in Swift
DESCRIPTION: This code demonstrates how to publish a message to a named fanout exchange using the RabbitMQ Swift client.

LANGUAGE: swift
CODE:
var x = ch.fanout("logs")
x.publish(msg.data(using: .utf8))

----------------------------------------

TITLE: Configuring LDAP Query Caching in RabbitMQ
DESCRIPTION: Recommendation to use a cache backend in combination with LDAP for improved efficiency and reduced load on LDAP servers.



----------------------------------------

TITLE: Setting Single Federation Upstream Policy in Bash
DESCRIPTION: Command to apply a single federation upstream to matching exchanges and queues

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream":"up-1"}'

----------------------------------------

TITLE: Setting Single Federation Upstream Policy in Bash
DESCRIPTION: Command to apply a single federation upstream to matching exchanges and queues

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream":"up-1"}'

----------------------------------------

TITLE: Displaying Help Information for CLI Tools
DESCRIPTION: Shows how to use the help command to discover available commands for rabbitmqctl and rabbitmq-diagnostics.

LANGUAGE: bash
CODE:
rabbitmqctl help

rabbitmq-diagnostics help

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat help

rabbitmq-diagnostics.bat help

----------------------------------------

TITLE: Starting RabbitMQ Service
DESCRIPTION: Command to start the RabbitMQ service after installation

LANGUAGE: PowerShell
CODE:
rabbitmq-service.bat start

----------------------------------------

TITLE: Creating Projects for Offset Tracking in C#
DESCRIPTION: Shell commands to create C# projects for the offset tracking sender and receiver, and add the RabbitMQ Stream Client dependency.

LANGUAGE: shell
CODE:
dotnet new console --name OffsetTrackingSend
mv OffsetTrackingSend/Program.cs OffsetTrackingSend/OffsetTrackingSend.cs
dotnet new console --name OffsetTrackingReceive
mv OffsetTrackingReceive/Program.cs OffsetTrackingReceive/OffsetTrackingReceive.cs

cd OffsetTrackingSend
dotnet add package RabbitMQ.Stream.Client 
cd ../OffsetTrackingReceive
dotnet add package RabbitMQ.Stream.Client 
cd ..

----------------------------------------

TITLE: Credit Grant Flow in RabbitMQ (Erlang)
DESCRIPTION: This code snippet demonstrates the flow of credit grants between processes in RabbitMQ. It shows how credit is granted from the message store to the queue process, then to the channel, and finally to the reader when unblocking occurs.

LANGUAGE: erlang
CODE:
reader <--[grant]-- channel <--[grant]-- queue process <--[grant]-- message store.

----------------------------------------

TITLE: Disabling Maintenance Mode in RabbitMQ
DESCRIPTION: This command brings a RabbitMQ node out of maintenance mode and back to its regular operational state. It's only necessary if you decide not to restart the node as planned after enabling maintenance mode.

LANGUAGE: bash
CODE:
rabbitmq-upgrade revive

LANGUAGE: powershell
CODE:
rabbitmq-upgrade.bat revive

----------------------------------------

TITLE: Declaring Queue with Queue TTL
DESCRIPTION: Examples showing how to declare a queue that expires after 30 minutes of inactivity.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-expires", 1800000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Configuring Federation Upstream in RabbitMQ
DESCRIPTION: Command to set up federation upstream parameters pointing to the blue cluster. This establishes the connection between green and blue clusters for message federation.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream blue \
  '{"uri":"amqp://node-in-blue-cluster"}'

----------------------------------------

TITLE: Checking Git Version
DESCRIPTION: Command to verify Git installation and version

LANGUAGE: bash
CODE:
git version

----------------------------------------

TITLE: Configuring Web MQTT Port
DESCRIPTION: Configuration to change the listener port for the Web MQTT plugin.

LANGUAGE: ini
CODE:
web_mqtt.tcp.port = 9001

----------------------------------------

TITLE: Setting Unlimited Prefetch for a Consumer in Java
DESCRIPTION: This example shows how to set an unlimited prefetch for a consumer by passing 0 to the basicQos method.

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
channel.basicQos(0); // No limit for this consumer
channel.basicConsume("my-queue", false, consumer);

----------------------------------------

TITLE: Example JWT Token Format
DESCRIPTION: Sample JSON Web Token structure showing authorization permissions format

LANGUAGE: json
CODE:
{
  "authorization": {
    "permissions": [
      {
        "scopes": [
          "rabbitmq-resource.read:*/*"
        ],
        "rsid": "2c390fe4-02ad-41c7-98a2-cebb8c60ccf1",
        "rsname": "allvhost"
      }
    ]
  },
  "scope": "email profile"
}

----------------------------------------

TITLE: Closing RabbitMQ Connection in Elixir
DESCRIPTION: Closes the connection to RabbitMQ, ensuring that the message is actually delivered before the program exits.

LANGUAGE: elixir
CODE:
AMQP.Connection.close(connection)

----------------------------------------

TITLE: Queue Resource Configuration
DESCRIPTION: YAML configuration for creating a quorum queue resource in RabbitMQ with cluster reference.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: my-queue
spec:
  name: qq # name of the queue
  type: quorum
  durable: true
  rabbitmqClusterReference:
    name: custom-configuration

----------------------------------------

TITLE: Visualizing RabbitMQ Queue with Mermaid
DESCRIPTION: A flowchart diagram showing the representation of a message queue in RabbitMQ, labeled with queue_name

LANGUAGE: mermaid
CODE:
flowchart LR
    Q[[queue_name]]
    class Q mermaid-queue

----------------------------------------

TITLE: Declaring a Direct Exchange in RabbitMQ with C#
DESCRIPTION: This code declares a direct exchange named 'direct_logs' using the RabbitMQ .NET client. It's the first step in setting up a routing-based logging system.

LANGUAGE: csharp
CODE:
await channel.ExchangeDeclareAsync(exchange: "direct_logs", type: ExchangeType.Direct);

----------------------------------------

TITLE: Defining Drain Field in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the drain field in the AMQP 1.0 flow frame, which is used to request the sender to use all available link credit.

LANGUAGE: xml
CODE:
<field name="drain" type="boolean" default="false"/>

----------------------------------------

TITLE: Monitoring Shovel Status via CLI
DESCRIPTION: Command to check the status of all shovels using rabbitmqctl

LANGUAGE: bash
CODE:
rabbitmqctl shovel_status

----------------------------------------

TITLE: Stopping RabbitMQ Node
DESCRIPTION: Command to stop a running RabbitMQ broker instance

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat stop

----------------------------------------

TITLE: Initializing RabbitMQ Stream Environment and Declaring Stream in Go
DESCRIPTION: Sets up the RabbitMQ stream environment and declares a stream with a 2GB capacity limit.

LANGUAGE: go
CODE:
env, _ := stream.NewEnvironment(
    stream.NewEnvironmentOptions().
        SetHost("localhost").
        SetPort(5552).
        SetUser("guest").
        SetPassword("guest"))

streamName := "stream-offset-tracking-go"
env.DeclareStream(streamName,
    &stream.StreamOptions{
        MaxLengthBytes: stream.ByteCapacity{}.GB(2),
    },
)

----------------------------------------

TITLE: Message Flow in RabbitMQ (Erlang)
DESCRIPTION: This code snippet illustrates the flow of messages between different processes in RabbitMQ during message publishing. It shows how messages are passed from the reader to the channel, then to the queue process, and finally to the message store.

LANGUAGE: erlang
CODE:
reader -> channel -> queue process -> message store.

----------------------------------------

TITLE: Enabling Maintenance Mode in RabbitMQ
DESCRIPTION: This command puts a RabbitMQ node into maintenance mode, preparing it for shutdown, upgrade, or reconfiguration by transferring its responsibilities and closing client connections.

LANGUAGE: bash
CODE:
rabbitmq-upgrade drain

LANGUAGE: powershell
CODE:
rabbitmq-upgrade.bat drain

----------------------------------------

TITLE: Connecting to RabbitMQ and Sending a Message in Objective-C
DESCRIPTION: Establishes a connection to a RabbitMQ node, creates a channel, declares a queue, and publishes a message. This snippet demonstrates the basic steps for sending a message using the RabbitMQ Objective-C client.

LANGUAGE: Objective-C
CODE:
- (void)send {
    RMQConnection *conn = [[RMQConnection alloc] initWithUri:@"amqp://localhost:5672"
                                                 delegate:[RMQConnectionDelegateLogger new]];
    id<RMQChannel> ch = [conn createChannel];
    RMQQueue *q = [ch queue:@"hello"];
    [ch.defaultExchange publish:[@"Hello World!" dataUsingEncoding:NSUTF8StringEncoding] routingKey:q.name];
    [conn close];
}

----------------------------------------

TITLE: Implementing Topic-based Message Emission in C#
DESCRIPTION: This code snippet demonstrates how to create a topic exchange and publish messages with routing keys. It allows for flexible message routing based on multiple criteria.

LANGUAGE: csharp
CODE:
https://github.com/rabbitmq/rabbitmq-tutorials/blob/main/dotnet/EmitLogTopic/EmitLogTopic.cs

----------------------------------------

TITLE: Configuring Password Regular Expression Validator
DESCRIPTION: Configuration example for setting up password validation using regular expressions.

LANGUAGE: ini
CODE:
credential_validator.validation_backend = rabbit_credential_validator_password_regexp
credential_validator.regexp = ^[a-bA-Z0-9$]{20,100}

----------------------------------------

TITLE: Displaying Memory Breakdown
DESCRIPTION: Example of using the memory_breakdown command to display node's memory usage by category in gigabytes.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics memory_breakdown --unit gigabytes

----------------------------------------

TITLE: Rejecting Multiple Messages with Single Call in Java using RabbitMQ
DESCRIPTION: This example shows how to reject two messages with a single call to the broker in RabbitMQ using Java. The second argument on basicNack is the multiple flag, set to true for bulk rejection.

LANGUAGE: java
CODE:
GetResponse gr1 = channel.basicGet("some.queue", false);
GetResponse gr2 = channel.basicGet("some.queue", false);
channel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);

----------------------------------------

TITLE: Rejecting Multiple Messages with Single Call in Java using RabbitMQ
DESCRIPTION: This example shows how to reject two messages with a single call to the broker in RabbitMQ using Java. The second argument on basicNack is the multiple flag, set to true for bulk rejection.

LANGUAGE: java
CODE:
GetResponse gr1 = channel.basicGet("some.queue", false);
GetResponse gr2 = channel.basicGet("some.queue", false);
channel.basicNack(gr2.getEnvelope().getDeliveryTag(), true, true);

----------------------------------------

TITLE: Setting Scheduler Binding Type in RabbitMQ
DESCRIPTION: Configures the scheduler-to-CPU core binding strategy using either an environment variable or a runtime flag.

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+stbt nnts"

LANGUAGE: bash
CODE:
RABBITMQ_SCHEDULER_BIND_TYPE="nnts"

----------------------------------------

TITLE: Creating RabbitMQ Message Flow Diagram with Mermaid
DESCRIPTION: This Mermaid flowchart depicts the message flow in a RabbitMQ system. It includes a producer (P), an exchange (X), two queues (Q₁ and Q₂), and two consumers (C₁ and C₂). The diagram also shows routing patterns using different binding keys.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X
    X -- #42;.orange.#42; --> Q1
    X -- #42;.#42;.rabbit --> Q2
    X -- lazy.# --> Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Direct Exchange Declaration
DESCRIPTION: Creating a direct exchange for routing messages based on severity.

LANGUAGE: objectivec
CODE:
[ch direct:@"logs"];

----------------------------------------

TITLE: Connecting to RabbitMQ and Sending a Message in Objective-C
DESCRIPTION: Establishes a connection to a RabbitMQ node, creates a channel, declares a queue, and publishes a message. This snippet demonstrates the basic steps for sending a message using the RabbitMQ Objective-C client.

LANGUAGE: Objective-C
CODE:
- (void)send {
    RMQConnection *conn = [[RMQConnection alloc] initWithUri:@"amqp://localhost:5672"
                                                 delegate:[RMQConnectionDelegateLogger new]];
    id<RMQChannel> ch = [conn createChannel];
    RMQQueue *q = [ch queue:@"hello"];
    [ch.defaultExchange publish:[@"Hello World!" dataUsingEncoding:NSUTF8StringEncoding] routingKey:q.name];
    [conn close];
}

----------------------------------------

TITLE: Updating Virtual Host Metadata
DESCRIPTION: Updates the metadata (description, tags, queue type) of an existing virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl update_vhost_metadata qa1 --description "QA environment for issue 1662" --default-queue-type quorum --tags qa,project-a,qa-1662

----------------------------------------

TITLE: Stopping RabbitMQ Node
DESCRIPTION: Command to stop a running RabbitMQ node using the rabbitmqctl tool.

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat stop

----------------------------------------

TITLE: RPC Callback Queue Implementation - Elixir
DESCRIPTION: Implementation of callback queue creation and message publishing for RPC

LANGUAGE: elixir
CODE:
{:ok, %{queue: callback_queue}} = AMQP.Queue.declare(channel,
                                                     "",
                                                     exclusive: true)

AMQP.Basic.publish(channel,
                   "",
                   "rpc_queue",
                   request,
                   reply_to: callback_queue)

----------------------------------------

TITLE: Configuring RabbitMQ TLS Connection without Peer Verification
DESCRIPTION: Example of a TLS-enabled RabbitMQ connection URI with peer verification disabled, including certificate paths.

LANGUAGE: ini
CODE:
amqps://myhost?cacertfile=/path/to/ca_certificate.pem&certfile=/path/to/client_certificate.pem&keyfile=/path/to/client_key.pem&verify=verify_none&server_name_indication=myhost

----------------------------------------

TITLE: Logging AMQP Connection Error Due to Frame Length Exceeded
DESCRIPTION: This snippet shows a log output when an AMQP connection is closed due to exceeding the maximum frame length, which can occur with long JWT tokens.

LANGUAGE: bash
CODE:
2025-03-15 05:55:21.689185+00:00 [info] <0.2771.0> accepting AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672)
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> closing AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672):
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> {handshake_error,starting,0,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                  {amqp_error,frame_error,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              "type 1, all octets = <<>>: {frame_too_large,6307,4088}",
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              none}}

----------------------------------------

TITLE: Testing Faster Recovery of Long Queues in RabbitMQ 4.0
DESCRIPTION: This code snippet demonstrates how to test the faster recovery of long queues in RabbitMQ 4.0. It shows how to publish a large number of messages to a quorum queue, restart the node, and check the queue status to observe the improved startup time.

LANGUAGE: bash
CODE:
# Publish 10 million 12-byte messages (feel free to play with other values)
perf-test --quorum-queue --queue qq --consumers 0 --pmessages 5000000 --confirm 1000 --producers 2
# restart the node
rabbitmqctl stop_app && rabbitmqctl start_app
# list the queues (repeat this command until the number of messages is 10 million instead of 0)
rabbitmqctl list_queues

----------------------------------------

TITLE: Configuring Mixed Backend Caching in RabbitMQ
DESCRIPTION: This configuration sets up the cache to use LDAP for authentication and internal backend for authorization.

LANGUAGE: ini
CODE:
auth_backends.1 = cache

auth_cache.cached_backend.authn = ldap
auth_cache.cached_backend.authz = internal

----------------------------------------

TITLE: Enabling HTTP Authentication
DESCRIPTION: Erlang configuration for enabling HTTP Basic Authentication with the Web STOMP plugin

LANGUAGE: erlang
CODE:
[
  {rabbitmq_web_stomp,
      [{use_http_auth, true}]}
].

----------------------------------------

TITLE: Listing Stream Publishers in RabbitMQ
DESCRIPTION: Lists registered publishers for streams, allowing specification of publisher information items to display.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_publishers connection_pid publisher_id stream

----------------------------------------

TITLE: Setting Policy for STOMP Queues
DESCRIPTION: Command to set a policy limiting STOMP queue length to 1000 messages.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy stomp-queues "^stomp-" '{"max-length":1000}' --apply-to queues

----------------------------------------

TITLE: Complete Producer Implementation (new_task.js)
DESCRIPTION: Full implementation of the message producer including connection handling, channel creation, and message sending with proper error handling and cleanup.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var queue = 'task_queue';
    var msg = process.argv.slice(2).join(' ') || "Hello World!";

    channel.assertQueue(queue, {
      durable: true
    });
    channel.sendToQueue(queue, Buffer.from(msg), {
      persistent: true
    });
    console.log(" [x] Sent '%s'", msg);
  });
  setTimeout(function() {
    connection.close();
    process.exit(0)
  }, 500);
});

----------------------------------------

TITLE: Complete Producer Implementation (new_task.js)
DESCRIPTION: Full implementation of the message producer including connection handling, channel creation, and message sending with proper error handling and cleanup.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var queue = 'task_queue';
    var msg = process.argv.slice(2).join(' ') || "Hello World!";

    channel.assertQueue(queue, {
      durable: true
    });
    channel.sendToQueue(queue, Buffer.from(msg), {
      persistent: true
    });
    console.log(" [x] Sent '%s'", msg);
  });
  setTimeout(function() {
    connection.close();
    process.exit(0)
  }, 500);
});

----------------------------------------

TITLE: Example Queue Status Configuration
DESCRIPTION: Sample YAML configuration showing the status structure of a RabbitMQ queue resource with conditions.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: my-queue
  namespace: rabbitmq-system
spec:
  ...
status:
  conditions:
  - lastTransitionTime: ""
    status: "True" #  could be true, false, or unknown; false means the last reconciliation has failed
    type: Ready
    Reason: "SuccessfulCreateOrUpdate" # status false result in reason FailedCreateOrUpdate
    Message: "" # set with error message when status is false

----------------------------------------

TITLE: Declaring a RabbitMQ Stream in Java
DESCRIPTION: Shows how to declare a stream using the AMQP 0.9.1 Java client by setting the x-queue-type argument to 'stream'.

LANGUAGE: java
CODE:
ConnectionFactory factory = new ConnectionFactory();
Connection connection = factory.newConnection();
Channel channel = connection.createChannel();
channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  Collections.singletonMap("x-queue-type", "stream")
);

----------------------------------------

TITLE: Deleting Queue Members in RabbitMQ
DESCRIPTION: Command to remove a quorum queue member (replica) from a specified node within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-queues delete_member --vhost "a-vhost" "a-queue" "rabbit@decomissioned-node"

----------------------------------------

TITLE: Deleting a Virtual Host using RabbitMQ HTTP API
DESCRIPTION: Demonstrates deleting a virtual host named 'vh1' using the RabbitMQ HTTP API with curl.

LANGUAGE: bash
CODE:
curl -u userename:pa$sw0rD -X DELETE http://rabbitmq.local:15672/api/vhosts/vh1

----------------------------------------

TITLE: Basic RabbitMQ CLI Commands
DESCRIPTION: Essential RabbitMQ CLI commands for Windows, including help documentation, service management, and status checks.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat help

rabbitmq-diagnostics.bat help

rabbitmq-plugins.bat help

rabbitmqctl.bat help add_user

rabbitmqctl.bat stop

rabbitmqctl.bat status

----------------------------------------

TITLE: Basic Queue Binding in RabbitMQ
DESCRIPTION: Demonstrates how to create a basic binding between a queue and an exchange in RabbitMQ using Python.

LANGUAGE: python
CODE:
channel.queue_bind(exchange=exchange_name,
                   queue=queue_name)

----------------------------------------

TITLE: Consuming Filtered Messages from a Stream in Java
DESCRIPTION: This snippet demonstrates how to consume messages from a stream using a filter, and includes client-side filtering logic to handle probabilistic server-side filtering.

LANGUAGE: java
CODE:
channel.basicQos(100); // QoS must be specified
channel.basicConsume(
  "my-stream",
  false,
  Collections.singletonMap("x-stream-filter", "california"), // set filter
  (consumerTag, message) -> {
    Map<String, Object> headers = message.getProperties().getHeaders();
    // there must be some client-side filter logic
    if ("california".equals(headers.get("x-stream-filter-value"))) {
      // message processing
      // ...
    }
    channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required
  },
  consumerTag -> { });

----------------------------------------

TITLE: Setting Enabled RabbitMQ Plugins
DESCRIPTION: Command to set exactly which plugins should be enabled, disabling all others. Example enables only the management plugin and its dependencies.

LANGUAGE: bash
CODE:
rabbitmq-plugins set rabbitmq_management

----------------------------------------

TITLE: Setting net_ticktime in Windows Environment
DESCRIPTION: Configuration script to set the net_ticktime kernel parameter for RabbitMQ Windows service.

LANGUAGE: PowerShell
CODE:
@echo off
set SERVER_ADDITIONAL_ERL_ARGS=-kernel net_ticktime 120

----------------------------------------

TITLE: Producing Messages to RabbitMQ Stream in Go
DESCRIPTION: Creates a producer and sends 100 messages to the stream, with the last message marked as 'marker'.

LANGUAGE: go
CODE:
producer, _ := env.NewProducer(streamName, stream.NewProducerOptions())

messageCount := 100
ch := make(chan bool)
chPublishConfirm := producer.NotifyPublishConfirmation()
handlePublishConfirm(chPublishConfirm, messageCount, ch)

fmt.Printf("Publishing %d messages\n", messageCount)
for i := 0; i < messageCount; i++ {
    var body string
    if i == messageCount-1 {
        body = "marker"
    } else {
        body = "hello"
    }
    producer.Send(amqp.NewMessage([]byte(body)))
}
_ = <-ch
fmt.Println("Messages confirmed")

producer.Close()

----------------------------------------

TITLE: Sample Entra ID Access Token
DESCRIPTION: Example of an access token issued by Entra ID containing user roles and permissions

LANGUAGE: javascript
CODE:
{
  "aud": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "iss": "https://sts.windows.net/1ffc6121-590e-4aa5-bf47-c348674069cb/",
  "iat": 1655740039,
  "nbf": 1655740039,
  "exp": 1655744211,
  "acr": "1",
  "aio": "AUQAu/8TAAAAjvwucwL4nZe83vNZvg6A7sAPscI9zsGvRs8EuT7aVhubpmhRnxJ+X7nbkISoP5eBBMxoi2yiCclnH2Ocjjzsqw==",
  "amr": [
    "wia"
  ],
  "appid": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "appidacr": "1",
  "email": "baptiste.daroit@company.com",
  "idp": "https://sts.windows.net/b3f4f7c2-72ce-4192-aba4-d6c7719b5766/",
  "in_corp": "true",
  "ipaddr": "xxx.xxx.xxx.xxx",
  "name": "Baptiste DA ROIT",
  "oid": "cf2df3b4-03df-4e1e-b5c0-f232932aaead",
  "rh": "0.AR8AgCG80x7L90C1mhVBBXQzQjgoklctsdBMtgYVWFwc4tgfAMQ.",
  "roles": [
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.tag:monitoring",
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.configure:*/*"
  ],
  "scp": "User.Read",
  "sub": "6aBzW3a1FOTTrnlZEuC1SmwG0sRjVgQU49DvrYK6Rqg",
  "tid": "1ffc6121-590e-4aa5-bf47-c348674069cb",
  "unique_name": "baptiste.daroit@company.com",
  "uti": "QHqwThTqQEK9iMdnRuD_AA",
  "ver": "1.0"
}

----------------------------------------

TITLE: Sending Messages to Work Queue in Java
DESCRIPTION: This snippet shows how to send messages to a work queue in RabbitMQ using Java. It demonstrates publishing messages with persistent properties.

LANGUAGE: Java
CODE:
String message = String.join(" ", argv);

channel.basicPublish("", "hello", null, message.getBytes());
System.out.println(" [x] Sent '" + message + "'");

----------------------------------------

TITLE: Establishing STOMP Connection
DESCRIPTION: JavaScript code demonstrating how to establish a STOMP connection with the broker using credentials.

LANGUAGE: javascript
CODE:
var on_connect = function() {
    console.log('connected');
};
var on_error =  function() {
    console.log('error');
};
client.connect('guest', 'guest', on_connect, on_error, '/');

----------------------------------------

TITLE: Running Publish Rate Peak Test with PerfTest
DESCRIPTION: This command uses RabbitMQ PerfTest to simulate a scenario where the publish rate peak exceeds consumer capacity. It configures cluster nodes, message properties, queue settings, and variable publish rates.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-ct -1 \
-ad false \
-c 1000 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
-qa auto-delete=false,durable=false,x-queue-type=quorum \
--producers 200 \
--consumers 200 \
--producer-random-start-delay 30 \
--consumer-latency 10000 \
-vr 100:300 \
-vr 102:60 -vr 104:60 -vr 106:60 -vr 108:60 -vr 110:60 -vr 112:60 -vr 114:60 -vr 116:60 -vr 118:60 -vr 120:60 \
-vr 122:60 -vr 124:60 -vr 126:60 -vr 128:60 -vr 130:60 -vr 132:60 -vr 134:60 -vr 136:60 -vr 138:60 -vr 140:60 \
-vr 142:60 -vr 144:60 -vr 146:60 -vr 148:60 -vr 150:60 \
-vr 148:60 -vr 146:60 -vr 144:60 -vr 142:60 -vr 140:60 -vr 138:60 -vr 136:60 -vr 134:60 -vr 132:60 -vr 130:60 \
-vr 128:60 -vr 126:60 -vr 124:60 -vr 122:60 -vr 120:60 -vr 118:60 -vr 116:60 -vr 114:60 -vr 112:60 -vr 110:60 \
-vr 108:60 -vr 106:60 -vr 104:60 -vr 102:60 -vr 100:60 \
-vr 100:3000

----------------------------------------

TITLE: Setting Maximum Connections Limit via HTTP API
DESCRIPTION: Demonstrates setting connection limits using curl commands against the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-connections \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Listing Feature Flags using rabbitmqctl
DESCRIPTION: Command to list feature flags using rabbitmqctl with a pretty table formatter for improved readability.

LANGUAGE: bash
CODE:
rabbitmqctl -q --formatter pretty_table list_feature_flags \
  name state provided_by desc doc_url

----------------------------------------

TITLE: Prometheus Metrics Output - Basic Auth Attempts
DESCRIPTION: Sample Prometheus metrics output showing basic authentication attempt counters without source tracking.

LANGUAGE: plaintext
CODE:
# TYPE rabbitmq_auth_attempts_total counter
# HELP rabbitmq_auth_attempts_total Total number of authorization attempts
rabbitmq_auth_attempts_total{protocol="amqp091"} 2
# TYPE rabbitmq_auth_attempts_succeeded_total counter
# HELP rabbitmq_auth_attempts_succeeded_total Total number of successful authentication attempts
rabbitmq_auth_attempts_succeeded_total{protocol="amqp091"} 0
# TYPE rabbitmq_auth_attempts_failed_total counter
# HELP rabbitmq_auth_attempts_failed_total Total number of failed authentication attempts
rabbitmq_auth_attempts_failed_total{protocol="amqp091"} 2

----------------------------------------

TITLE: Setting Console Code Page for UTF-8
DESCRIPTION: This command sets the Windows console to use UTF-8 encoding, which can help with displaying non-ASCII characters correctly in RabbitMQ CLI tools.

LANGUAGE: PowerShell
CODE:
chcp 65001

----------------------------------------

TITLE: Importing RabbitMQ Client Framework in Objective-C
DESCRIPTION: Imports the RabbitMQ client framework as a module in an Objective-C file.

LANGUAGE: Objective-C
CODE:
@import RMQClient;

----------------------------------------

TITLE: Enabling Feature Flags in RabbitMQ
DESCRIPTION: Command to enable all stable feature flags in RabbitMQ, which should be run after upgrading all nodes to ensure full compatibility with new features.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag all

----------------------------------------

TITLE: Listing RabbitMQ Plugins
DESCRIPTION: Commands to list all plugins with different verbosity levels and filtering options. Shows plugin status, version, and dependency information.

LANGUAGE: bash
CODE:
rabbitmq-plugins list

LANGUAGE: bash
CODE:
rabbitmq-plugins list -v

LANGUAGE: bash
CODE:
rabbitmq-plugins list -v management

LANGUAGE: bash
CODE:
rabbitmq-plugins list -e rabbit

----------------------------------------

TITLE: Deleting Queue Members in RabbitMQ
DESCRIPTION: Command to remove a member (replica) from a quorum queue on a specified node and virtual host.

LANGUAGE: bash
CODE:
rabbitmq-queues delete_member --vhost "a-vhost" "a-queue" "rabbit@decomissioned-node"

----------------------------------------

TITLE: Adapting Testsuites for Feature Flags
DESCRIPTION: Example of how to adapt a testsuite to check for and enable a feature flag before running tests.

LANGUAGE: erlang
CODE:
init_per_testcase(Testcase, Config) ->
    Config1 = rabbit_ct_helpers:run_steps(
                Config,
                rabbit_ct_broker_helpers:setup_steps() ++
                rabbit_ct_client_helpers:setup_steps()),

    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of
        ok ->
            Config1;
        Skip ->
            end_per_testcase(Testcase, Config1),
            Skip
    end.

----------------------------------------

TITLE: Enabling HTTP Authentication
DESCRIPTION: Configuration for enabling HTTP Basic Authentication for STOMP connections.

LANGUAGE: erlang
CODE:
[
  {rabbitmq_web_stomp,
      [{use_http_auth, true}]}
].

----------------------------------------

TITLE: Topic Exchange Usage Examples
DESCRIPTION: Command-line examples showing how to use the topic exchange implementation with different routing patterns for message filtering.

LANGUAGE: bash
CODE:
ruby receive_logs_topic.rb "#"
ruby receive_logs_topic.rb "kern.*"
ruby receive_logs_topic.rb "*.critical"
ruby receive_logs_topic.rb "kern.*" "*.critical"
ruby emit_log_topic.rb "kern.critical" "A critical kernel error"

----------------------------------------

TITLE: Inspecting Page Cache Size in Containerized Environments
DESCRIPTION: Reads memory statistics from cgroup files to inspect RSS and page cache footprint in containerized environments.

LANGUAGE: bash
CODE:
cat /sys/fs/cgroup/memory/memory.stat
cat /sys/fs/cgroup/memory/memory.usage_in_bytes

----------------------------------------

TITLE: Deleting a Stream Replica in RabbitMQ
DESCRIPTION: Removes a stream replica from a specified node within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams delete_replica --vhost "a-vhost" "a-queue" "rabbit@decomissioned-node"

----------------------------------------

TITLE: Running RabbitMQ Broker with Custom Node Name
DESCRIPTION: Command to run RabbitMQ broker with a specified node name

LANGUAGE: bash
CODE:
make run-broker RABBITMQ_NODENAME=rmq

----------------------------------------

TITLE: Creating RabbitMQ Stream and Producer in Rust
DESCRIPTION: This code snippet demonstrates how to create a RabbitMQ stream and a producer to send messages. It includes error handling for stream creation and uses a notification mechanism to ensure all messages are confirmed before closing.

LANGUAGE: rust
CODE:
let create_response = environment
    .stream_creator()
    .max_length(ByteCapacity::GB(2))
    .create(stream)
    .await;

if let Err(e) = create_response {
    if let StreamCreateError::Create { stream, status } = e {
        match status {
            // we can ignore this error because the stream already exists
            ResponseCode::StreamAlreadyExists => {}
            err => {
                println!("Error creating stream: {:?} {:?}", stream, err);
                std::process::exit(1);
            }
        }
    }
}

let producer = environment.producer().build(stream).await?;

println!("Publishing {:?} messages", message_count);

for i in 0..message_count {
    let msg;
    if i < message_count - 1 {
        msg = Message::builder().body(format!("hello{}", i)).build();
    } else {
        msg = Message::builder().body(format!("marker{}", i)).build();
    };

    let counter = confirmed_messages.clone();
    let notifier = notify_on_send.clone();
    producer
        .send(msg, move |_| {
            let inner_counter = counter.clone();
            let inner_notifier = notifier.clone();
            async move {
                if inner_counter.fetch_add(1, Ordering::Relaxed) == message_count - 1 {
                    inner_notifier.notify_one();
                }
            }
        })
        .await?;
}

notify_on_send.notified().await;
println!("Messages confirmed: True");
producer.close().await?

----------------------------------------

TITLE: Stopping RabbitMQ Server with CLI
DESCRIPTION: Command to stop a running RabbitMQ node using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
/opt/homebrew/sbin/rabbitmqctl shutdown

----------------------------------------

TITLE: Alternative Python Setup Commands
DESCRIPTION: Alternative commands for setting up Python virtual environment if pip is not available

LANGUAGE: bash
CODE:
python3 -m venv venv
source venv/bin/activate

----------------------------------------

TITLE: Basic OAuth Resource Configuration
DESCRIPTION: Configuration for defining multiple OAuth 2.0 resources and their common settings in RabbitMQ

LANGUAGE: ini
CODE:
auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.2.id = rabbit_dev

auth_oauth2.preferred_username_claims.1 = preferred_username
auth_oauth2.preferred_username_claims.2 = user_name
auth_oauth2.preferred_username_claims.3 = email
auth_oauth2.scope_prefix = rabbitmq.

----------------------------------------

TITLE: Importing RabbitMQ Signing Key for RPM
DESCRIPTION: Imports the RabbitMQ signing key for RPM-based systems using rpm command.

LANGUAGE: bash
CODE:
rpm --import https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc

----------------------------------------

TITLE: Reinstalling RabbitMQ Formula
DESCRIPTION: A series of commands to completely uninstall and reinstall the RabbitMQ formula, including removal of data directories and configuration files.

LANGUAGE: bash
CODE:
brew services stop rabbitmq

brew uninstall rabbitmq

# Now delete all node's data directories and configuration files.
# This assumes that Homebrew root is at /opt/homebrew
rm -rf /opt/homebrew/etc/rabbitmq/
rm -rf /opt/homebrew/opt/rabbitmq/
rm -rf /opt/homebrew/var/lib/rabbitmq/
# the launch agent file
rm -f $HOME/Library/LaunchAgents/homebrew.mxcl.rabbitmq.plist

# re-install
brew install rabbitmq

## start the service if necessary
# brew services start rabbitmq

## after starting the service, enable all feature flags
# /opt/homebrew/sbin/rabbitmqctl enable_feature_flag all

----------------------------------------

TITLE: Importing amqp.node Library in JavaScript
DESCRIPTION: This code snippet shows how to require the amqp.node library in a JavaScript file for RabbitMQ operations.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

----------------------------------------

TITLE: Basic OAuth Resource Configuration
DESCRIPTION: Configuration for defining multiple OAuth 2.0 resources and their common settings in RabbitMQ

LANGUAGE: ini
CODE:
auth_oauth2.resource_servers.1.id = rabbit_prod
auth_oauth2.resource_servers.2.id = rabbit_dev

auth_oauth2.preferred_username_claims.1 = preferred_username
auth_oauth2.preferred_username_claims.2 = user_name
auth_oauth2.preferred_username_claims.3 = email
auth_oauth2.scope_prefix = rabbitmq.

----------------------------------------

TITLE: Enabling RabbitMQ Web STOMP Plugins
DESCRIPTION: Shell commands for enabling the RabbitMQ Web STOMP plugin and the examples plugin using the rabbitmq-plugins tool.

LANGUAGE: shell
CODE:
sudo rabbitmq-plugins enable rabbitmq_web_stomp
sudo rabbitmq-plugins enable rabbitmq_web_stomp_examples

----------------------------------------

TITLE: Enabling Feature Flags in RabbitMQ
DESCRIPTION: Use the rabbitmqctl command to enable specific or all stable feature flags.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag <name>

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag all

----------------------------------------

TITLE: Setting Federation Policy for All Queues in RabbitMQ
DESCRIPTION: This command sets a policy to apply federation to all queues, using the previously defined 'blue' upstream.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy --apply-to queues blue-green-migration ".*" \
  '{"federation-upstream":"blue"}'

----------------------------------------

TITLE: Importing RabbitMQ Signing Key for APT
DESCRIPTION: Downloads and configures the RabbitMQ signing key for Debian/Ubuntu package management systems.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg

----------------------------------------

TITLE: Adding Environment Variables to RabbitMQ Cluster Operator Deployment
DESCRIPTION: YAML snippet showing how to add the OPERATOR_SCOPE_NAMESPACE environment variable to the RabbitMQ Cluster Operator deployment manifest.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: rabbitmq-operator
    app.kubernetes.io/name: rabbitmq-cluster-operator
    app.kubernetes.io/part-of: rabbitmq
  name: rabbitmq-cluster-operator
  namespace: rabbitmq-system
spec:
  template:
    spec:
      containers:
      - command:
        - /manager
        env:
        - name: OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPERATOR_SCOPE_NAMESPACE
          value: "custom-namespace,my-namespace"
# ...

----------------------------------------

TITLE: Configuring TLS for LDAP Connections in RabbitMQ
DESCRIPTION: Example configuration for enabling TLS for LDAP connections, including CA certificate, client certificate, and private key settings.

LANGUAGE: ini
CODE:
auth_ldap.use_ssl   = true

# local filesystem path to a CA certificate bundle file
auth_ldap.ssl_options.cacertfile = /path/to/ca_certificate.pem

# local filesystem path to a client certificate file
auth_ldap.ssl_options.certfile = /path/to/client_certfile.pem

# local filesystem path to a client private key file
auth_ldap.ssl_options.keyfile = /path/to/client_key.pem

----------------------------------------

TITLE: Consuming from a Stream with Offset Specification in Java
DESCRIPTION: This snippet demonstrates how to consume messages from a stream, starting from the first available message using the 'first' offset specification.

LANGUAGE: java
CODE:
channel.basicQos(100); // QoS must be specified
channel.basicConsume(
  "my-stream",
  false,
  Collections.singletonMap("x-stream-offset", "first"), // "first" offset specification
  (consumerTag, message) -> {
    // message processing
    // ...
   channel.basicAck(message.getEnvelope().getDeliveryTag(), false); // ack is required
  },
  consumerTag -> { });

----------------------------------------

TITLE: Configuring RabbitMQ Queue and Beans in Spring
DESCRIPTION: Java configuration class for defining RabbitMQ queue and sender/receiver beans in a Spring application.

LANGUAGE: java
CODE:
package org.springframework.amqp.tutorials.tut1;

import org.springframework.amqp.core.Queue;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Profile({"tut1","hello-world"})
@Configuration
public class Tut1Config {

    @Bean
    public Queue hello() {
        return new Queue("hello");
    }

    @Profile("receiver")
    @Bean
    public Tut1Receiver receiver() {
        return new Tut1Receiver();
    }

    @Profile("sender")
    @Bean
    public Tut1Sender sender() {
        return new Tut1Sender();
    }
}

----------------------------------------

TITLE: Testing OAuth 2.0 Authentication with RabbitMQ AMQP Producers
DESCRIPTION: These commands show how to start AMQP producers with OAuth 2.0 tokens for different scenarios and resources.

LANGUAGE: bash
CODE:
make start-perftest-producer-with-token PRODUCER=prod_producer TOKEN=$(bin/keycloak/token prod_producer PdLHb1w8RH1oD5bpppgy8OF9G6QeRpL9)

make start-perftest-producer-with-token PRODUCER=dev_producer TOKEN=$(bin/keycloak/token dev_producer z1PNm47wfWyulTnAaDOf1AggTy3MxX2H)

make start-perftest-producer-with-token PRODUCER=prod_producer TOKEN=$(bin/keycloak/token prod_producer sIqZ5flmSz3r6uKXMSz8CWGeScdTpqq0 prod)

make start-perftest-producer-with-token PRODUCER=dev_producer TOKEN=$(bin/keycloak/token dev_producer SBuw1L5a7Y2aQfWfbsgXlEKGTNaEHxO8 dev)

----------------------------------------

TITLE: Reinstalling RabbitMQ Windows Service
DESCRIPTION: Commands for removing and reinstalling the RabbitMQ Windows service after Erlang upgrades.

LANGUAGE: PowerShell
CODE:
.\rabbitmq-service.bat remove
.\rabbitmq-service.bat install
.\rabbitmq-service.bat start

----------------------------------------

TITLE: TLS with Peer Verification in .NET Client
DESCRIPTION: Example showing how to configure TLS connections with peer verification in the .NET client.

LANGUAGE: C#
CODE:
using System;
using System.IO;
using System.Text;

using RabbitMQ.client;

namespace RabbitMQ.client.Examples
{
  public class TestSSL
  {
    public static async Task<int> Main(string[] args)
    {
      ConnectionFactory cf = new ConnectionFactory();

      cf.Ssl.Enabled = true;
      cf.Ssl.ServerName = System.Net.Dns.GetHostName();
      cf.Ssl.CertPath = "/path/to/client_key.p12";
      cf.Ssl.CertPassphrase = "MySecretPassword";

      using (IConnection conn = await cf.CreateConnectionAsync())
      {
        using (IChannel ch = await conn.CreateChannelAsync())
        {
          Console.WriteLine("Successfully connected and opened a channel");
          await ch.QueueDeclareAsync("rabbitmq-dotnet-test", false, false, false, null);
          Console.WriteLine("Successfully declared a queue");
          await ch.QueueDeleteAsync("rabbitmq-dotnet-test");
          Console.WriteLine("Successfully deleted the queue");
        }
      }
      return 0;
    }
  }
}

----------------------------------------

TITLE: Emitting Logs with Topic Routing in PHP
DESCRIPTION: This script demonstrates how to publish messages to a topic exchange in RabbitMQ using PHP. It allows specifying a routing key and message content via command-line arguments.

LANGUAGE: PHP
CODE:
<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection->channel();

$channel->exchange_declare('topic_logs', 'topic', false, false, false);

$routing_key = isset($argv[1]) && !empty($argv[1]) ? $argv[1] : 'anonymous.info';
$data = implode(' ', array_slice($argv, 2));
if (empty($data)) {
    $data = "Hello World!";
}

$msg = new AMQPMessage($data);

$channel->basic_publish($msg, 'topic_logs', $routing_key);

echo ' [x] Sent ', $routing_key, ':', $data, "\n";

$channel->close();
$connection->close();

----------------------------------------

TITLE: Importing RabbitMQ Signing Key for APT
DESCRIPTION: Downloads and configures the RabbitMQ signing key for Debian/Ubuntu package management systems.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg

----------------------------------------

TITLE: Displaying User Limits
DESCRIPTION: This command displays the current user limits, including the maximum number of open files.

LANGUAGE: bash
CODE:
ulimit -a

----------------------------------------

TITLE: Creating Multiple Bindings for Different Severities in PHP
DESCRIPTION: Shows how to create multiple bindings for different log severities in a consumer using php-amqplib.

LANGUAGE: PHP
CODE:
foreach ($severities as $severity) {
    $channel->queue_bind($queue_name, 'direct_logs', $severity);
}

----------------------------------------

TITLE: Net Ticktime Configuration in Advanced Config
DESCRIPTION: Example configuration for modifying the net_ticktime setting to 120 seconds using RabbitMQ's advanced.config file format.

LANGUAGE: erlang
CODE:
[
  {kernel, [{net_ticktime,  120}]}
].

----------------------------------------

TITLE: Importing RabbitMQ Signing Key via Direct Download
DESCRIPTION: Downloads the RabbitMQ release signing key from GitHub and imports it using GPG.

LANGUAGE: bash
CODE:
curl -L https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc --output rabbitmq-release-signing-key.asc
gpg --import rabbitmq-release-signing-key.asc

----------------------------------------

TITLE: Restarting RabbitMQ Server
DESCRIPTION: Command to restart the RabbitMQ server after enabling the MQTT adapter plugin.

LANGUAGE: shell
CODE:
sudo /etc/init.d/rabbitmq-server restart 

----------------------------------------

TITLE: Configuring Definition Import from Local File at Boot in INI
DESCRIPTION: Demonstrates how to configure RabbitMQ to import definitions from a local file at node boot time. This method does not require the management plugin to be enabled.

LANGUAGE: ini
CODE:
definitions.import_backend = local_filesystem
definitions.local.path = /path/to/definitions/defs.json

----------------------------------------

TITLE: Managing RabbitMQ Service with Homebrew
DESCRIPTION: Commands to start and stop the RabbitMQ service using Homebrew's service management.

LANGUAGE: bash
CODE:
brew services start rabbitmq
brew services stop rabbitmq

----------------------------------------

TITLE: Increasing Inter-node Communication Buffer Size for RabbitMQ
DESCRIPTION: Sets the inter-node communication buffer size to 192 MB using either an environment variable or VM flag. This can help with heavy inter-node traffic or very large messages.

LANGUAGE: bash
CODE:
RABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+zdbbl 192000"

----------------------------------------

TITLE: Configuring Federation Upstream in PowerShell
DESCRIPTION: PowerShell command to configure a federation upstream named 'origin' pointing to a remote RabbitMQ host.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri"":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: RabbitMQ Environment Configuration with Individual TLS Flags (Unix)
DESCRIPTION: Example rabbitmq-env.conf configuration using individual flags for TLS setup, including SSL path configuration and secure renegotiation settings.

LANGUAGE: bash
CODE:
ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-9.4/ebin"

SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \
  -ssl_dist_opt server_password password \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

RABBITMQ_CTL_ERL_ARGS="-pa $ERL_SSL_PATH \
  -proto_dist inet_tls \
  -ssl_dist_opt server_certfile /path/to/combined_keys.pem \
  -ssl_dist_opt server_password password \
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"

----------------------------------------

TITLE: Configuring Docker Ulimits
DESCRIPTION: JSON configuration for setting kernel limits in Docker daemon configuration.

LANGUAGE: json
CODE:
{
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": 64000,
      "Soft": 64000
    }
  }
}

----------------------------------------

TITLE: Regenerating HTML Man Pages for RabbitMQ Using Shell Script
DESCRIPTION: This shell command uses the update-manpages.sh script to regenerate HTML man pages for RabbitMQ. It requires the path to the rabbitmq-server repository as an argument.

LANGUAGE: sh
CODE:
./website/versioned_docs/version-4.0/man/update-manpages.sh /path/to/rabbitmq-server

----------------------------------------

TITLE: Configuring Prometheus TCP Port
DESCRIPTION: Configuration to set the TCP port for the Prometheus plugin

LANGUAGE: ini
CODE:
prometheus.tcp.port = 15692

----------------------------------------

TITLE: Enabling Prometheus Plugin in RabbitMQ
DESCRIPTION: Command to enable the rabbitmq_prometheus plugin on all RabbitMQ nodes.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_prometheus

----------------------------------------

TITLE: Adding Queue Members in RabbitMQ
DESCRIPTION: Command to add a quorum queue member (replica) on a specified node within a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-queues add_member --vhost "a-vhost" "a-queue" "rabbit@new-node"

----------------------------------------

TITLE: Importing RabbitMQ Signing Key for apt
DESCRIPTION: Downloads and imports the RabbitMQ signing key for use with apt on Debian and Ubuntu systems.

LANGUAGE: bash
CODE:
curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc | sudo gpg --dearmor > /usr/share/keyrings/com.rabbitmq.team.gpg

----------------------------------------

TITLE: Stopping RabbitMQ Service on Linux
DESCRIPTION: Command to stop the RabbitMQ server service before performing storage directory symlinking operations.

LANGUAGE: bash
CODE:
sudo service rabbitmq-server stop

----------------------------------------

TITLE: Defining Session Flow Control Fields in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the session flow control fields in the AMQP 1.0 flow frame, used for managing the flow of transfer frames between endpoints.

LANGUAGE: xml
CODE:
<field name="next-incoming-id" type="transfer-number"/>
<field name="incoming-window" type="uint" mandatory="true"/>
<field name="next-outgoing-id" type="transfer-number" mandatory="true"/>
<field name="outgoing-window" type="uint" mandatory="true"/>

----------------------------------------

TITLE: Clearing User Limits using RabbitMQ CLI
DESCRIPTION: These commands demonstrate how to clear specific or all user limits using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl clear_user_limits user1 'max-connections'

rabbitmqctl clear_user_limits user1 'max-channels'

rabbitmqctl clear_user_limits user1 all

----------------------------------------

TITLE: Running RabbitMQ Consumer in JavaScript
DESCRIPTION: This command runs the consumer script to receive messages from RabbitMQ.

LANGUAGE: bash
CODE:
./receive.js

----------------------------------------

TITLE: Enabling Debug PPROF for RabbitMQ Cluster Operator in Kubernetes
DESCRIPTION: This command enables the ENABLE_DEBUG_PPROF variable on the RabbitMQ Cluster Operator deployment in the rabbitmq-system namespace.

LANGUAGE: bash
CODE:
$ kubectl -n rabbitmq-system set env deployment/rabbitmq-cluster-operator ENABLE_DEBUG_PPROF=True

----------------------------------------

TITLE: Stopping the RabbitMQ Application
DESCRIPTION: Stops the RabbitMQ application, leaving the runtime (Erlang VM) running.

LANGUAGE: bash
CODE:
rabbitmqctl stop_app

----------------------------------------

TITLE: Setting Federation Policy in PowerShell
DESCRIPTION: PowerShell command to set a policy that enables federation for exchanges matching a pattern.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy exchange-federation "^federated\." '"{""federation-upstream-set"":""all""}"' --priority 10 --apply-to exchanges

----------------------------------------

TITLE: Fibonacci Function Implementation in Go
DESCRIPTION: Basic recursive implementation of the Fibonacci sequence calculator used in the RPC example.

LANGUAGE: go
CODE:
func fib(n int) int {
        if n == 0 {
                return 0
        } else if n == 1 {
                return 1
        } else {
                return fib(n-1) + fib(n-2)
        }
}

----------------------------------------

TITLE: Setting Federation Policy in PowerShell
DESCRIPTION: PowerShell command to set up a federation policy that matches exchanges with a specific prefix and configures them to federate with all upstream nodes.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy exchange-federation `
    "^federated\." `
    '"{""federation-upstream-set":""all""}"' `
    --priority 10 `
    --apply-to exchanges

----------------------------------------

TITLE: Inspecting Page Cache Size in Non-Containerized Environments
DESCRIPTION: Uses the /proc/meminfo file to check the size of the kernel page cache.

LANGUAGE: bash
CODE:
cat /proc/meminfo | grep -we "Cached"

----------------------------------------

TITLE: Listing RabbitMQ User Topic Permissions
DESCRIPTION: Lists topic permissions for a specific user across all virtual hosts.

LANGUAGE: bash
CODE:
rabbitmqctl list_user_topic_permissions janeway

----------------------------------------

TITLE: Deactivating Queue Federation Policy in RabbitMQ
DESCRIPTION: This snippet demonstrates how to deactivate a queue federation policy by clearing it using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy queue-federation

----------------------------------------

TITLE: Forcefully Deleting a Kubernetes Pod
DESCRIPTION: Bash command to forcefully delete a Kubernetes pod that is stuck in the terminating state, typically due to a leftover quorum queue in RabbitMQ.

LANGUAGE: bash
CODE:
kubectl delete pod --force --grace-period=0 POD-NAME

----------------------------------------

TITLE: Computing Password Hash using rabbitmqctl
DESCRIPTION: This bash command demonstrates how to compute a password hash using the rabbitmqctl command-line tool.

LANGUAGE: bash
CODE:
rabbitmqctl hash_password foobarbaz

----------------------------------------

TITLE: Running RabbitMQ Broker with Custom Node Name
DESCRIPTION: Command to run RabbitMQ broker with a custom node name

LANGUAGE: bash
CODE:
make run-broker RABBITMQ_NODENAME=rmq

----------------------------------------

TITLE: Defining Delivery-Count Field in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the delivery-count field in the AMQP 1.0 flow frame, which is used to track the number of messages transferred.

LANGUAGE: xml
CODE:
<field name="delivery-count" type="sequence-no"/>

----------------------------------------

TITLE: Default User Definition in JavaScript
DESCRIPTION: This JSON snippet demonstrates how to define a default 'guest' user with administrator privileges in the definitions file. It's intended for test or QA environments only.

LANGUAGE: javascript
CODE:
"users": [
    {
        "name": "guest",
        "password_hash": "9/1i+jKFRpbTRV1PtRnzFFYibT3cEpP92JeZ8YKGtflf4e/u",
        "tags": ["administrator"]
    }
],
"permissions":[
    {
        "user":"guest",
        "vhost":"/",
        "configure":".*",
        "read":".*",
        "write":".*"}
],

----------------------------------------

TITLE: Creating RabbitMQ Credentials Secret
DESCRIPTION: YAML definition for a Kubernetes Secret containing RabbitMQ connection credentials.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: my-rabbit-creds
type: Opaque
stringData:
  username: a-user
  password: a-secure-password
  uri: https://my.rabbit:15672

----------------------------------------

TITLE: Exporting Definitions Using rabbitmqadmin in Bash
DESCRIPTION: Shows how to export RabbitMQ definitions using the rabbitmqadmin tool, which requires the management plugin to be enabled. This method is compatible with older versions of RabbitMQ.

LANGUAGE: bash
CODE:
rabbitmqadmin export /path/to/definitions.file.json

----------------------------------------

TITLE: Listing RabbitMQ Queues on Windows
DESCRIPTION: This command lists the queues in RabbitMQ and their message counts using rabbitmqctl on Windows systems.

LANGUAGE: bash
CODE:
rabbitmqctl.bat list_queues

----------------------------------------

TITLE: Running PerfTest with OAuth Token
DESCRIPTION: Command to run RabbitMQ PerfTest using OAuth token authentication

LANGUAGE: bash
CODE:
make start-perftest-producer-with-token PRODUCER=producer TOKEN=$(bin/keycloak/token producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn test)

----------------------------------------

TITLE: Disabling RabbitMQ Plugins
DESCRIPTION: Commands to disable RabbitMQ plugins using the rabbitmq-plugins command.

LANGUAGE: bash
CODE:
rabbitmq-plugins disable <plugin-name>
rabbitmq-plugins disable rabbitmq_top

----------------------------------------

TITLE: Creating a Passwordless User in RabbitMQ
DESCRIPTION: This bash script shows how to create a passwordless user in RabbitMQ using rabbitmqctl commands.

LANGUAGE: bash
CODE:
rabbitmqctl add_user passwordless-user "pa$$wordless"
rabbitmqctl clear_password passwordless-user

----------------------------------------

TITLE: Python Virtual Environment Setup
DESCRIPTION: Alternative commands for setting up Python virtual environment

LANGUAGE: bash
CODE:
python3 -m venv venv
source venv/bin/activate

----------------------------------------

TITLE: Launching Keycloak and RabbitMQ with OAuth 2.0 Configuration
DESCRIPTION: These commands demonstrate how to start Keycloak and RabbitMQ with specific OAuth 2.0 configurations for multiple scenarios.

LANGUAGE: bash
CODE:
make start-keycloak
MODE="multi-keycloak" CONF="rabbitmq.scenario1.conf" make start-rabbitmq

make start-keycloak
MODE=multi-keycloak OAUTH_PROVIDER=keycloak CONF=rabbitmq.scenario2.conf make start-rabbitmq

make start-dev-keycloak
make start-prod-keycloak
MODE=multi-keycloak CONF=rabbitmq.scenario3.conf make start-rabbitmq

----------------------------------------

TITLE: Disabling RabbitMQ Plugins
DESCRIPTION: Commands to disable RabbitMQ plugins using the rabbitmq-plugins command.

LANGUAGE: bash
CODE:
rabbitmq-plugins disable <plugin-name>
rabbitmq-plugins disable rabbitmq_top

----------------------------------------

TITLE: Creating a Passwordless User in RabbitMQ
DESCRIPTION: This bash script shows how to create a passwordless user in RabbitMQ using rabbitmqctl commands.

LANGUAGE: bash
CODE:
rabbitmqctl add_user passwordless-user "pa$$wordless"
rabbitmqctl clear_password passwordless-user

----------------------------------------

TITLE: Publishing a Message with Routing Key in RabbitMQ using C#
DESCRIPTION: This snippet demonstrates how to publish a message to a direct exchange with a specific routing key (severity) using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
await channel.BasicPublishAsync(exchange: "direct_logs",
                            routingKey: severity,
                            body: body);

----------------------------------------

TITLE: Listing RabbitMQ Users
DESCRIPTION: Lists all users and their tags on the RabbitMQ node.

LANGUAGE: bash
CODE:
rabbitmqctl list_users

----------------------------------------

TITLE: Rich Authorization Request Token Example
DESCRIPTION: Sample JWT token demonstrating Rich Authorization Request format for fine-grained permissions

LANGUAGE: javascript
CODE:
{
  "authorization_details": [
    { "type" : "rabbitmq",
      "locations": ["cluster:finance/vhost:primary-*"],
      "actions": [ "read", "write", "configure"  ]
    },
    { "type" : "rabbitmq",
      "locations": ["cluster:finance", "cluster:inventory", ],
      "actions": ["tag:administrator" ]
    }
  ]
}

----------------------------------------

TITLE: Implementing a Worker for RabbitMQ Work Queue in Objective-C
DESCRIPTION: This snippet demonstrates how to create a worker that consumes messages from a RabbitMQ work queue. It sets up a connection, declares a durable queue, sets QoS prefetch, and implements message acknowledgment after processing.

LANGUAGE: Objective-C
CODE:
- (void)workerNamed:(NSString *)name {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];

    RMQQueue *q = [ch queue:@"task_queue" options:RMQQueueDeclareDurable];

    [ch basicQos:@1 global:NO];
    NSLog(@"%@: Waiting for messages", name);

    RMQBasicConsumeOptions manualAck = RMQBasicConsumeNoOptions;
    [q subscribe:manualAck handler:^(RMQMessage * _Nonnull message) {
        NSString *messageText = [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding];
        NSLog(@"%@: Received %@", name, messageText);
        // imitate some work
        unsigned int sleepTime = (unsigned int)[messageText componentsSeparatedByString:@"."].count - 1;
        NSLog(@"%@: Sleeping for %u seconds", name, sleepTime);
        sleep(sleepTime);

        [ch ack:message.deliveryTag];
    }];
}

----------------------------------------

TITLE: Configuring SHA-512 Password Hashing in RabbitMQ
DESCRIPTION: Configuration snippet showing how to set SHA-512 as the password hashing algorithm.

LANGUAGE: ini
CODE:
password_hashing_module = rabbit_password_hashing_sha512

----------------------------------------

TITLE: Cloning RabbitMQ Java Client Repository
DESCRIPTION: This bash command clones the RabbitMQ Java client repository from GitHub. It's used for accessing the source code of the client library.

LANGUAGE: Bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-java-client.git

----------------------------------------

TITLE: Cluster Node Configuration
DESCRIPTION: Example of configuring multiple cluster nodes using indexed keys in the new format.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

cluster_formation.classic_config.nodes.1 = rabbit1@hostname
cluster_formation.classic_config.nodes.2 = rabbit2@hostname
cluster_formation.classic_config.nodes.3 = rabbit3@hostname
cluster_formation.classic_config.nodes.4 = rabbit4@hostname

----------------------------------------

TITLE: Configuring HTTP Backend Caching in RabbitMQ
DESCRIPTION: This configuration snippet sets up the cache backend to cache requests to the HTTP authentication backend.

LANGUAGE: ini
CODE:
auth_backends.1 = cache
auth_cache.cached_backend = http

auth_http.http_method = post

----------------------------------------

TITLE: Building RabbitMQ .NET Client on Linux/MacOS
DESCRIPTION: Shell command to build the RabbitMQ .NET client on Linux or MacOS using .NET Core 2. This performs code generation and builds a release version of the library.

LANGUAGE: bash
CODE:
build.sh

----------------------------------------

TITLE: Profiling RabbitMQ Operator Pod Memory Allocations with pprof
DESCRIPTION: This command uses the go tool pprof to analyze memory allocations in the RabbitMQ Operator Pod by connecting to the exposed debug endpoint.

LANGUAGE: bash
CODE:
$ go tool pprof "localhost:9782/debug/pprof/heap"

----------------------------------------

TITLE: Checking Erlang Distribution Ports
DESCRIPTION: Command to verify which ports are being used for inter-node and CLI tool communication.

LANGUAGE: bash
CODE:
epmd -names

----------------------------------------

TITLE: Configuring Consumer Cancellation on Failover
DESCRIPTION: Example of configuring a consumer to be notified when a mirrored queue fails over by setting the x-cancel-on-ha-failover argument

LANGUAGE: java
CODE:
Channel channel = ...;
Consumer consumer = ...;
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-cancel-on-ha-failover", true);
channel.basicConsume("my-queue", false, args, consumer);

----------------------------------------

TITLE: Deploying RabbitMQ with OAuth Configuration
DESCRIPTION: Commands to start RabbitMQ with OAuth2 authentication mode and UAA provider settings

LANGUAGE: bash
CODE:
export MODE=portal
OAUTH_PROVIDER=uaa make start-rabbitmq

----------------------------------------

TITLE: Starting RabbitMQ with OAuth2 Proxy Configuration
DESCRIPTION: Command to start RabbitMQ with the OAuth2 Proxy mode enabled for authentication.

LANGUAGE: bash
CODE:
MODE=oauth2-proxy make start-rabbitmq

----------------------------------------

TITLE: Pre-declared Topology Configuration
DESCRIPTION: RabbitMQ configuration to use pre-declared topology for all shovels on a node

LANGUAGE: ini
CODE:
# all shovels started on this node will use pre-declared topology
shovel.topology.predeclared = true

----------------------------------------

TITLE: Configuring Federation Upstream in PowerShell
DESCRIPTION: PowerShell version of the federation upstream configuration command.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri"":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: Setting Alternate Exchange Using PowerShell
DESCRIPTION: Command to set an alternate exchange policy using rabbitmqctl in PowerShell. Defines 'my-ae' as the alternate exchange for 'my-direct' exchange.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_policy AE '^my-direct$' '"{""alternate-exchange":""my-ae""}"' --apply-to exchanges

----------------------------------------

TITLE: Tailing RabbitMQ Logs Using CLI Tools
DESCRIPTION: Examples of how to tail RabbitMQ logs using the rabbitmq-diagnostics CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -n rabbit@target-host log_tail -N 300
rabbitmq-diagnostics -n rabbit@target-host log_tail_stream

----------------------------------------

TITLE: Tailing RabbitMQ Logs Using CLI Tools
DESCRIPTION: Examples of how to tail RabbitMQ logs using the rabbitmq-diagnostics CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -n rabbit@target-host log_tail -N 300
rabbitmq-diagnostics -n rabbit@target-host log_tail_stream

----------------------------------------

TITLE: Starting RabbitMQ with OAuth2 Proxy Configuration
DESCRIPTION: Command to start RabbitMQ with the OAuth2 Proxy mode enabled for authentication.

LANGUAGE: bash
CODE:
MODE=oauth2-proxy make start-rabbitmq

----------------------------------------

TITLE: Downloading RabbitMQ Web STOMP Plugin Files
DESCRIPTION: Shell commands for downloading the required Erlang plugin files for RabbitMQ Web STOMP. These files include cowboy, sockjs, rabbitmq_web_stomp, and rabbitmq_web_stomp_examples.

LANGUAGE: shell
CODE:
wget \
  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/cowboy-0.5.0-rmq2.8.2-git4b93c2d.ez \
  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/sockjs-0.2.1-rmq2.8.2-gitfa1db96.ez \
  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp-2.8.2.ez \
  https://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp_examples-2.8.2.ez

----------------------------------------

TITLE: Creating RabbitMQ Stream Queue Flow Diagram Using Mermaid
DESCRIPTION: A flowchart diagram showing the relationship between a producer (P), a stream queue (Q), and a consumer (C) in a RabbitMQ system. The diagram uses custom CSS classes for styling each component.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    Q[[Stream-Queue]]
    C((C))

    P --> Q <--> C

    class P mermaid-producer
    class Q mermaid-queue
    class C mermaid-consumer

----------------------------------------

TITLE: Enabling Basic Metrics Collection in RabbitMQ Java Client
DESCRIPTION: Demonstrates how to enable metrics collection using StandardMetricsCollector with the ConnectionFactory and retrieve published message counts.

LANGUAGE: java
CODE:
ConnectionFactory connectionFactory = new ConnectionFactory();
StandardMetricsCollector metrics = new StandardMetricsCollector();
connectionFactory.setMetricsCollector(metrics);    
// later in the code
long publishedMessagesCount = metrics.getPublishedMessages().getCount();

----------------------------------------

TITLE: Adding RabbitMQ Java Client 5.0 Dependency in Gradle
DESCRIPTION: Shows how to add the RabbitMQ Java Client 5.0 dependency to a Gradle project. This single line should be added to the project's build.gradle file to include the client library.

LANGUAGE: groovy
CODE:
compile 'com.rabbitmq:amqp-client:5.0.0'

----------------------------------------

TITLE: Creating a Virtual Host with Metadata Using RabbitMQ CLI
DESCRIPTION: This snippet demonstrates creating a virtual host with a description, default queue type, and tags using the rabbitmqctl command.

LANGUAGE: bash
CODE:
rabbitmqctl add_vhost qa1 --description "QA env 1" --default-queue-type quorum

----------------------------------------

TITLE: Running Publisher Confirms Example
DESCRIPTION: Terminal commands to compile and run the publisher confirms example code.

LANGUAGE: bash
CODE:
javac -cp $CP PublisherConfirms.java
java -cp $CP PublisherConfirms

----------------------------------------

TITLE: Implementing a Topic Exchange Publisher in Go
DESCRIPTION: This code snippet demonstrates how to create a publisher that sends messages to a topic exchange in RabbitMQ using Go. It sets up a connection, declares a topic exchange, and publishes messages with routing keys based on command-line arguments.

LANGUAGE: Go
CODE:
package main

import (
        "context"
        "log"
        "os"
        "strings"
        "time"

        amqp "github.com/rabbitmq/amqp091-go"
)

func failOnError(err error, msg string) {
        if err != nil {
                log.Panicf("%s: %s", msg, err)
        }
}

func main() {
        conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
        failOnError(err, "Failed to connect to RabbitMQ")
        defer conn.Close()

        ch, err := conn.Channel()
        failOnError(err, "Failed to open a channel")
        defer ch.Close()

        err = ch.ExchangeDeclare(
                "logs_topic", // name
                "topic",      // type
                true,         // durable
                false,        // auto-deleted
                false,        // internal
                false,        // no-wait
                nil,          // arguments
        )
        failOnError(err, "Failed to declare an exchange")

        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
        defer cancel()

        body := bodyFrom(os.Args)
        err = ch.PublishWithContext(ctx,
                "logs_topic",          // exchange
                severityFrom(os.Args), // routing key
                false, // mandatory
                false, // immediate
                amqp.Publishing{
                        ContentType: "text/plain",
                        Body:        []byte(body),
                })
        failOnError(err, "Failed to publish a message")

        log.Printf(" [x] Sent %s", body)
}

func bodyFrom(args []string) string {
        var s string
        if (len(args) < 3) || os.Args[2] == "" {
                s = "hello"
        } else {
                s = strings.Join(args[2:], " ")
        }
        return s
}

func severityFrom(args []string) string {
        var s string
        if (len(args) < 2) || os.Args[1] == "" {
                s = "anonymous.info"
        } else {
                s = os.Args[1]
        }
        return s
}

----------------------------------------

TITLE: Opening an AMQP 1.0 Connection in C#
DESCRIPTION: Opens a connection to RabbitMQ using the AMQP 1.0 .NET client, with options to specify custom connection settings.

LANGUAGE: C#
CODE:
// open a connection from the environment setting   
IConnection connection = await environment.CreateConnectionAsync();

//open a connection from the environment with different settings
ConnectionSettingBuilder otherSettingBuilder = ConnectionSettingBuilder.Create()
    .ContainerId("my_containerId")
    .Host("localhost");
IConnection connection = await environment.CreateConnectionAsync(otherSettingBuilder.Build());
// ...
// close the connection when it is no longer necessary
await connection.CloseAsync();

----------------------------------------

TITLE: Using Configuration File with rabbitmqadmin
DESCRIPTION: This example demonstrates how to use a TOML configuration file with rabbitmqadmin to connect to a pre-configured cluster.

LANGUAGE: shell
CODE:
rabbitmqadmin --node staging show churn

----------------------------------------

TITLE: Blocking All Publishers
DESCRIPTION: Command to temporarily block all publishing by setting memory high watermark to 0

LANGUAGE: bash
CODE:
rabbitmqctl set_vm_memory_high_watermark 0

----------------------------------------

TITLE: Running Worker and Task Publisher
DESCRIPTION: Command line examples showing how to run the worker and publisher scripts in separate terminals.

LANGUAGE: bash
CODE:
# shell 1
php worker.php

# shell 2
php new_task.php "A very hard task which takes two seconds.."

----------------------------------------

TITLE: Network Bandwidth Calculation Example
DESCRIPTION: Example calculation of minimum network bandwidth requirement for 20K messages/sec with 6KB payloads.

LANGUAGE: ini
CODE:
20K * 6 KB * 110% * 8 bit/B = 20000 * 6000 * 1.1 * 8 = 1.056 (gigabit/second)

----------------------------------------

TITLE: Clearing RabbitMQ Policy
DESCRIPTION: Clears a policy for a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy federate-me

----------------------------------------

TITLE: Checking Node Quorum Criticality in RabbitMQ (PowerShell)
DESCRIPTION: This PowerShell command checks if a node is quorum critical in a RabbitMQ cluster. It exits with a non-zero code if any internal components, quorum queues, or stream queues will lose online quorum should the target node be shut down. It also prints which components and/or queues are affected.

LANGUAGE: powershell
CODE:
rabbitmq-diagnostics.bat check_if_node_is_quorum_critical

----------------------------------------

TITLE: Viewing RabbitMQ Cluster Status in Kubernetes
DESCRIPTION: Bash command to view the status of a RabbitMQ cluster instance in Kubernetes, including pods, services, and statefulsets.

LANGUAGE: bash
CODE:
kubectl -n NAMESPACE get all

----------------------------------------

TITLE: Visualizing RabbitMQ Message Flow with Mermaid Flowchart
DESCRIPTION: This Mermaid flowchart illustrates the message flow in a RabbitMQ setup. It shows a producer (P) sending messages to a queue named 'hello', which are then consumed by two consumers (C1 and C2) with a prefetch limit of 1.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P)) --> Q[[hello]]
    Q -- prefetch=1 --> C1((C1))
    Q -- prefetch=1 --> C2((C2))

    class P mermaid-producer
    class Q mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: RabbitMQ Advanced Erlang Configuration
DESCRIPTION: Example of RabbitMQ advanced configuration using the Erlang format in advanced.config

LANGUAGE: erlang
CODE:
[{rabbit, [{tcp_listeners, [5673]}]}].

----------------------------------------

TITLE: Configuring JMX Metrics Reporting in RabbitMQ
DESCRIPTION: Shows how to set up JMX reporting for RabbitMQ metrics using Dropwizard Metrics' JmxReporter with a shared MetricRegistry.

LANGUAGE: java
CODE:
MetricRegistry registry = new MetricRegistry();
StandardMetricsCollector metrics = new StandardMetricsCollector(registry);

ConnectionFactory connectionFactory = new ConnectionFactory();
connectionFactory.setMetricsCollector(metrics);

JmxReporter reporter = JmxReporter
    .forRegistry(registry)
    .inDomain("com.rabbitmq.client.jmx")
    .build();
reporter.start();

----------------------------------------

TITLE: Declaring Queue with Expiration in Java
DESCRIPTION: Creates a queue that expires after 30 minutes of inactivity using the Java client library.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-expires", 1800000);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Custom RabbitMQ Cluster Configuration
DESCRIPTION: Example YAML configuration for a RabbitMQ cluster with custom default user credentials.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: custom-configuration
spec:
  replicas: 1
  rabbitmq:
    additionalConfig: |
      default_user = some-user
      default_pass = some-pass

----------------------------------------

TITLE: Rotating RabbitMQ Log Files
DESCRIPTION: Instructs the RabbitMQ node to perform internal log rotation.

LANGUAGE: bash
CODE:
rabbitmqctl rotate_logs

----------------------------------------

TITLE: Setting Erlang Distribution Port in Windows Environment
DESCRIPTION: This snippet shows how to set a custom Erlang distribution port by creating a configuration file. It's used to specify a non-standard port for Erlang distribution in RabbitMQ on Windows.

LANGUAGE: PowerShell
CODE:
set DIST_PORT=44556

----------------------------------------

TITLE: Applying YTT Overlay for RabbitMQ Cluster Operator Upgrade
DESCRIPTION: Bash command to apply the ytt overlay when upgrading the RabbitMQ Cluster Operator, ensuring custom configuration is applied to the new version.

LANGUAGE: bash
CODE:
ytt -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml -f values.yaml | kubectl apply -f -

----------------------------------------

TITLE: Adjusting Erlang Process Limit for RabbitMQ
DESCRIPTION: Increases the limit on the number of Erlang processes to 2 million, which can be necessary for environments with a high number of connections or queues.

LANGUAGE: bash
CODE:
RABBITMQ_MAX_NUMBER_OF_PROCESSES=2000000

LANGUAGE: bash
CODE:
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+P 2000000"

----------------------------------------

TITLE: Enabling LDAP AuthN and AuthZ Backends in RabbitMQ Configuration
DESCRIPTION: Example configuration to use LDAP exclusively for authentication and authorization, ignoring the internal database.

LANGUAGE: ini
CODE:
# use LDAP exclusively for authentication and authorisation
auth_backends.1 = ldap

----------------------------------------

TITLE: Managing RabbitMQ Nodes
DESCRIPTION: Demonstrates how to check node status and stop a node using rabbitmqctl commands.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status

rabbitmq-diagnostics status --node rabbit@target-hostname.local

rabbitmqctl shutdown
rabbitmqctl shutdown --node rabbit@target-hostname.local

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat status

rabbitmq-diagnostics.bat status --node rabbit@target-hostname.local

rabbitmqctl.bat shutdown
rabbitmqctl.bat shutdown --node rabbit@target-hostname.local

----------------------------------------

TITLE: Checking Node Quorum Criticality in RabbitMQ (Bash)
DESCRIPTION: This command checks if a node is quorum critical in a RabbitMQ cluster. It exits with a non-zero code if any internal components, quorum queues, or stream queues will lose online quorum should the target node be shut down. It also prints which components and/or queues are affected.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_node_is_quorum_critical

----------------------------------------

TITLE: Running Pika Client with OAuth 2.0 Authentication
DESCRIPTION: Bash commands to set up and run a Python Pika client using OAuth 2.0 authentication with RabbitMQ.

LANGUAGE: bash
CODE:
python3 --version
pip install pika
pip install requests
python3 pika-client/producer.py producer kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn

----------------------------------------

TITLE: Hello World Implementation in Erlang
DESCRIPTION: Basic Hello World program example written in Erlang showing module definition and function implementation.

LANGUAGE: erlang
CODE:
-module(module_name).
-compile(export_all).

hello() ->
  io:format("~s~n", ["Hello world!"]).

----------------------------------------

TITLE: Listing Git Tags in RabbitMQ Repository
DESCRIPTION: This command shows how to list all tags in a Git repository. In the context of RabbitMQ, tags are used to mark release versions and important snapshots of the code.

LANGUAGE: bash
CODE:
git tag
# omitted for brevity
# => v3.13.0
# => v3.12.13
# => v3.12.12

----------------------------------------

TITLE: Listing Queue Mirror Status in RabbitMQ
DESCRIPTION: Command to list queues with their mirror status, used to verify classic mirrored queue replica state.

LANGUAGE: bash
CODE:
rabbitmqctl -n rabbit@to-be-stopped list_queues --local name mirror_pids synchronised_mirror_pids

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat -n rabbit@to-be-stopped list_queues --local name mirror_pids synchronised_mirror_pids

----------------------------------------

TITLE: Defining AMQP URI Syntax in ABNF
DESCRIPTION: This ABNF (Augmented Backus-Naur Form) snippet defines the syntax rules for AMQP URIs, including the structure for authority, userinfo, username, password, and virtual host components.

LANGUAGE: ABNF
CODE:
amqp_URI       = "amqp://" amqp_authority [ "/" vhost ] [ "?" query ]

amqp_authority = [ amqp_userinfo "@" ] host [ ":" port ]

amqp_userinfo  = username [ ":" password ]

username       = *( unreserved / pct-encoded / sub-delims )

password       = *( unreserved / pct-encoded / sub-delims )

vhost          = segment

----------------------------------------

TITLE: Setting Queue Expiry Policy (Bash)
DESCRIPTION: Sets a queue expiration policy of 30 minutes for all queues using rabbitmqctl.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy expiry ".*" '{"expires":1800000}' --apply-to queues

----------------------------------------

TITLE: Adding RabbitMQ Java Client Dependency in Maven POM
DESCRIPTION: This XML snippet shows how to add the RabbitMQ Java client library as a dependency in a Maven project's POM file. It specifies the groupId, artifactId, and version of the library.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>com.rabbitmq</groupId>
  <artifactId>amqp-client</artifactId>
  <version>5.24.0</version>
</dependency>

----------------------------------------

TITLE: Dead Lettering Messages with Custom Reason in AMQP 1.0 Java Client
DESCRIPTION: This code snippet shows how to dead letter a message with a custom reason included in the message annotations using the RabbitMQ AMQP 1.0 Java Client. It sets a specific annotation for the dead letter reason.

LANGUAGE: java
CODE:
Consumer consumer = connection.consumerBuilder()
    .queue(ordersQueue)
    .messageHandler((context, message) -> {
        Map<String, Object> annotations = new HashMap<>();
        annotations.put("x-opt-dead-letter-reason", "Incompatible Message Format");
        context.discard(annotations);
    }).build();

----------------------------------------

TITLE: Defining Available Field in AMQP 1.0 Flow Frame
DESCRIPTION: XML definition of the available field in the AMQP 1.0 flow frame, which is used to inform the consumer about the number of messages available in the queue.

LANGUAGE: xml
CODE:
<field name="available" type="uint"/>

----------------------------------------

TITLE: RabbitMQ Connection Log Example
DESCRIPTION: Example log entries showing a short-lived connection lifecycle

LANGUAGE: ini
CODE:
2018-06-17 16:23:29.851 [info] <0.634.0> accepting AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672)
2018-06-17 16:23:29.853 [info] <0.634.0> connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'
2018-06-17 16:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')

----------------------------------------

TITLE: Advanced LDAP Configuration in Erlang Format
DESCRIPTION: Complex LDAP authentication configuration example using the classic Erlang format for advanced scenarios.

LANGUAGE: erlang
CODE:
[
  {rabbit, [{auth_backends, [rabbit_auth_backend_ldap]}]},
  {rabbitmq_auth_backend_ldap,
   [ {servers,               ["my-ldap-server"]},
     {user_dn_pattern,       "cn=${username},ou=People,dc=example,dc=com"},
     {use_ssl,               false},
     {port,                  389},
     {log,                   false},
     {vhost_access_query,    {in_group,
                              "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},
     {resource_access_query,
      {for, [{permission, configure, {in_group, "cn=admin,dc=example,dc=com"}},
             {permission, write,
              {for, [{resource, queue,    {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, exchange, {constant, true}}]}},
             {permission, read,
              {for, [{resource, exchange, {in_group, "cn=admin,dc=example,dc=com"}},
                     {resource, queue,    {constant, true}}]}}
            ]
      }},
     {topic_access_query,
      {for, [{permission, write, {match, {string, "${routing_key}"}, {string, "^a"}}},
             {permission, read,  {constant, true}}]
     }},
     {tag_queries,           [{administrator, {constant, false}},
                              {management,    {constant, true}}]}
   ]
  }
].

----------------------------------------

TITLE: Configuring Keycloak JWT Payload for RabbitMQ OAuth 2.0
DESCRIPTION: Example JSON payload from Keycloak showing different claims and roles that can be used for RabbitMQ authentication and authorization.

LANGUAGE: json
CODE:
{
  "realm_access": {
    "roles": [
      "offline_access",
      "uma_authorization",
      "rabbitmq.tag:management"
    ]
  },
  "resource_access": {
    "account": {
      "roles": [
        "manage-account",
        "manage-account-links",
        "view-profile",
        "rabbitmq.write:*/*"
      ]
    }
  },
  "roles": "rabbitmq.read:*/*",
  "scope": "profile email"
}

----------------------------------------

TITLE: Forcing RabbitMQ Node Boot
DESCRIPTION: Ensures that the node will start next time, even if it was not the last to shut down.

LANGUAGE: bash
CODE:
rabbitmqctl force_boot

----------------------------------------

TITLE: Defining Queue in Allowed Namespace
DESCRIPTION: YAML definition for a Queue resource targeting a RabbitMQ cluster in a different namespace.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: test
  namespace: my-app
spec:
  name: test-queue
  rabbitmqClusterReference:
    name: example-rabbit
    namespace: rabbitmq-service

----------------------------------------

TITLE: Configuring Keycloak JWT Payload for RabbitMQ OAuth 2.0
DESCRIPTION: Example JSON payload from Keycloak showing different claims and roles that can be used for RabbitMQ authentication and authorization.

LANGUAGE: json
CODE:
{
  "realm_access": {
    "roles": [
      "offline_access",
      "uma_authorization",
      "rabbitmq.tag:management"
    ]
  },
  "resource_access": {
    "account": {
      "roles": [
        "manage-account",
        "manage-account-links",
        "view-profile",
        "rabbitmq.write:*/*"
      ]
    }
  },
  "roles": "rabbitmq.read:*/*",
  "scope": "profile email"
}

----------------------------------------

TITLE: Creating Temporary Queue in Ruby
DESCRIPTION: Creates a non-durable, exclusive queue with a server-generated name that will be automatically deleted when the connection closes.

LANGUAGE: ruby
CODE:
queue = channel.queue('', exclusive: true)

----------------------------------------

TITLE: SockJS Multiplexing Server Implementation
DESCRIPTION: Example showing how to implement multiplexing with SockJS on the server side using MultiplexServer.

LANGUAGE: javascript
CODE:
var real_service = sockjs.createServer();

var multiplexer = new multiplex_server.MultiplexServer(real_service);
var fake_service_1 = multiplexer.registerChannel('ann');
var fake_service_2 = multiplexer.registerChannel('bob');

----------------------------------------

TITLE: Configuring Automatic Recovery with AMQP 1.0 in C#
DESCRIPTION: Shows how to configure automatic connection recovery settings using the AMQP 1.0 .NET client for RabbitMQ.

LANGUAGE: C#
CODE:
class MyBackOffDelay : IBackOffDelayPolicy {
    ...
}

await AmqpConnection.CreateAsync(
    ConnectionSettingBuilder.Create().RecoveryConfiguration(
    RecoveryConfiguration.Create()
    .BackOffDelayPolicy(new MyBackOffDelay())).Build());

----------------------------------------

TITLE: RabbitMQ Connection Log Example
DESCRIPTION: Example log entries showing a short-lived connection lifecycle

LANGUAGE: ini
CODE:
2018-06-17 16:23:29.851 [info] <0.634.0> accepting AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672)
2018-06-17 16:23:29.853 [info] <0.634.0> connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672): user 'guest' authenticated and granted access to vhost '/'
2018-06-17 16:23:29.855 [info] <0.634.0> closing AMQP connection <0.634.0> (127.0.0.1:58588 -> 127.0.0.1:5672, vhost: '/', user: 'guest')

----------------------------------------

TITLE: Checking Quorum Queue Replica Sync Status in RabbitMQ (PowerShell)
DESCRIPTION: This PowerShell command checks if there are any ongoing initial quorum queue replica sync operations in a RabbitMQ cluster. It exits with a non-zero status if such operations are detected.

LANGUAGE: powershell
CODE:
rabbitmq-diagnostics.bat check_if_new_quorum_queue_replicas_have_finished_initial_sync

----------------------------------------

TITLE: Import Documentation URLs in JavaScript
DESCRIPTION: Imports documentation URL constants for Java and .NET clients from site components

LANGUAGE: javascript
CODE:
import {
  JavaClientDocURL,
} from '@site/src/components/JavaClient';

import {
  DotNetClientDocURL,
} from '@site/src/components/DotNetClient';

----------------------------------------

TITLE: Detecting Classic Queue Mirroring Policies in Bash
DESCRIPTION: Commands to check for and list policies that enable classic queue mirroring in RabbitMQ cluster.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics check_if_cluster_has_classic_queue_mirroring_policy

rabbitmq-diagnostics list_policies_with_classic_queue_mirroring -s --formatter=pretty_table

----------------------------------------

TITLE: Checking TLS Versions Support in Erlang
DESCRIPTION: Use rabbitmq-diagnostics to verify TLS versions supported by the Erlang runtime used by RabbitMQ.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics --silent tls_versions

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat --silent tls_versions

----------------------------------------

TITLE: Setting Stream Retention Policy in RabbitMQ
DESCRIPTION: Sets the retention policy for a specified stream in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams set_stream_retention_policy --vhost "a-vhost" "a-stream" "a-policy"

----------------------------------------

TITLE: RabbitMQ AMQP Method Reference
DESCRIPTION: Reference to the access.request method which is implemented as a no-op in RabbitMQ for backward compatibility with older clients. This method is marked for future removal.

LANGUAGE: text
CODE:
access.request

----------------------------------------

TITLE: YAML Frontmatter for Blog Post
DESCRIPTION: YAML frontmatter defining the title, tags, and authors for the blog post about RabbitMQ 3.13 classic queues changes.

LANGUAGE: yaml
CODE:
---
title: "RabbitMQ 3.13: Classic Queues Changes"
tags: ["Performance", "RabbitMQ 3.13.x"]
authors: [kura]
---

----------------------------------------

TITLE: Creating Fanout Exchange in Ruby
DESCRIPTION: Creates a fanout exchange named 'logs' that broadcasts messages to all bound queues.

LANGUAGE: ruby
CODE:
channel.fanout('logs')

----------------------------------------

TITLE: Enabling RabbitMQ Web STOMP Plugin
DESCRIPTION: Command to enable the RabbitMQ Web STOMP plugin using rabbitmq-plugins tool

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_web_stomp

----------------------------------------

TITLE: Enabling Management Plugin in RabbitMQ
DESCRIPTION: Commands to enable the RabbitMQ management plugin for UI access to feature flags.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_management

----------------------------------------

TITLE: Configuring Federation Upstream in RabbitMQ
DESCRIPTION: Sets up federation upstream configuration to point the green cluster to the blue cluster for message transfer. This command defines the connection parameters for the upstream blue cluster.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream blue \
  '{"uri":"amqp://node-in-blue-cluster"}'

----------------------------------------

TITLE: Listing RabbitMQ Topic Permissions
DESCRIPTION: Lists topic permissions in a virtual host.

LANGUAGE: bash
CODE:
rabbitmqctl list_topic_permissions -p my-vhost

----------------------------------------

TITLE: Connection Close Response Code
DESCRIPTION: Shows the response code sent by the broker when authentication fails for clients that support explicit notifications.

LANGUAGE: markdown
CODE:
connection.close

LANGUAGE: markdown
CODE:
ACCESS_REFUSED

----------------------------------------

TITLE: Cloning Sample Project Repository
DESCRIPTION: Command to clone the GitHub repository containing the sample code for RabbitMQ Streams offset tracking examples.

LANGUAGE: shell
CODE:
git clone https://github.com/acogoluegnes/rabbitmq-streams-blog-posts.git
cd rabbitmq-streams-blog-posts

----------------------------------------

TITLE: Building RabbitMQ Erlang Client
DESCRIPTION: Commands to change directory to the cloned repository and build the client using make.

LANGUAGE: bash
CODE:
cd rabbitmq-erlang-client
make

----------------------------------------

TITLE: Declaring Dynamic Shovel Using rabbitmqctl (Unix/Linux)
DESCRIPTION: Command to create a dynamic shovel that transfers messages from a source queue to a target queue using AMQP 0-9-1

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel my-shovel \
  '{"src-protocol": "amqp091", "src-uri": "amqp://", "src-queue": "source-queue", "dest-protocol": "amqp091", "dest-uri": "amqp://remote-server", "dest-queue": "target-queue", "dest-queue-args": {"x-queue-type": "quorum"}}'

----------------------------------------

TITLE: Installing RabbitMQ Client with Mix (Elixir)
DESCRIPTION: Dependency declaration for installing the rabbit_common package using Mix package manager in Elixir projects.

LANGUAGE: elixir
CODE:
{:rabbit_common, "~> 3.11"}

----------------------------------------

TITLE: Adding Library Dependencies with Rebar3
DESCRIPTION: Configuration for adding the RabbitMQ Erlang client as a dependency in Rebar3

LANGUAGE: erlang
CODE:
{rabbit_common, "&version-erlang-client;"}

----------------------------------------

TITLE: Implementing Fibonacci Function in JavaScript
DESCRIPTION: A recursive implementation of the Fibonacci sequence calculator function. This function is used as the core logic for the RPC server.

LANGUAGE: javascript
CODE:
function fibonacci(n) {
  if (n == 0 || n == 1)
    return n;
  else
    return fibonacci(n - 1) + fibonacci(n - 2);
}

----------------------------------------

TITLE: Logging AMQP Connection Error due to JWT Token Length
DESCRIPTION: This snippet shows a log output when an AMQP connection is closed due to exceeding the maximum frame length, likely caused by a large JWT token.

LANGUAGE: erlang
CODE:
2025-03-15 05:55:21.689185+00:00 [info] <0.2771.0> accepting AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672)
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> closing AMQP connection <0.2771.0> (10.8.121.164:45024 -> 10.8.121.141:5672):
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0> {handshake_error,starting,0,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                  {amqp_error,frame_error,
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              "type 1, all octets = <<>>: {frame_too_large,6307,4088}",
2025-03-15 05:55:24.745906+00:00 [error] <0.2771.0>                              none}}

----------------------------------------

TITLE: Setting RabbitMQ Cluster Name in Bash
DESCRIPTION: This command sets the cluster name for the RabbitMQ federation, which is used to identify the cluster in the federation graph.

LANGUAGE: bash
CODE:
rabbitmqctl set_cluster_name "east1-production"

----------------------------------------

TITLE: Implementing Message Publisher in Elixir
DESCRIPTION: Code for publishing messages to a work queue with configurable message content from command line arguments. Includes message persistence for durability.

LANGUAGE: elixir
CODE:
message =
  case System.argv do
    []    -> "Hello World!"
    words -> Enum.join(words, " ")
  end

AMQP.Basic.publish(channel, "", "task_queue", message, persistent: true)

IO.puts " [x] Send '#{message}'"

----------------------------------------

TITLE: Running Stream Performance Test Tool
DESCRIPTION: This shell command downloads and runs the RabbitMQ stream performance test tool. It's configured to publish one message per second to the 'single-active-consumer' stream.

LANGUAGE: shell
CODE:
cd /tmp
wget -O stream-perf-test.jar \
  https://github.com/rabbitmq/rabbitmq-java-tools-binaries-dev/releases/download/v-stream-perf-test-latest/stream-perf-test-latest.jar
java -jar /tmp/stream-perf-test.jar --rate 1 -x 1 -y 0 --streams single-active-consumer

----------------------------------------

TITLE: Defining Federation Upstream
DESCRIPTION: Examples of defining a federation upstream using CLI, Management UI, and HTTP API. The upstream is configured with a URI and expiration time.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream my-upstream \
    '{"uri":"amqp://target.hostname","expires":3600000}'

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream my-upstream `
    '"{""uri"":""amqp://target.hostname"",""expires"":3600000}"'

LANGUAGE: http
CODE:
PUT /api/parameters/federation-upstream/%2f/my-upstream
{"value":{"uri":"amqp://target.hostname","expires":3600000}}

----------------------------------------

TITLE: List Enabled Plugins
DESCRIPTION: Command to list all enabled RabbitMQ plugins (both implicit and explicit)

LANGUAGE: bash
CODE:
rabbitmq-plugins list -e rabbit

----------------------------------------

TITLE: Declaring Queue with Max Length in Java
DESCRIPTION: Declares a queue with a maximum length of 10 messages using the x-max-length argument in Java.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("x-max-length", 10);
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Declaring a Fanout Exchange in PHP
DESCRIPTION: This snippet shows how to declare a fanout exchange named 'logs' using the php-amqplib library.

LANGUAGE: PHP
CODE:
$channel->exchange_declare('logs', 'fanout', false, false, false);

----------------------------------------

TITLE: Setting operator policies in RabbitMQ
DESCRIPTION: Examples of setting operator policies in RabbitMQ using rabbitmqctl, HTTP API, and management UI.

LANGUAGE: bash
CODE:
rabbitmqctl set_operator_policy transient-queue-ttl \
    "^amq\." '{"expires":1800000}' \
    --priority 1 \
    --apply-to queues

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_operator_policy transient-queue-ttl ^
    "^amq\." "{""expires"": 1800000}" ^
    --priority 1 ^
    --apply-to queues

LANGUAGE: ini
CODE:
PUT /api/operator-policies/%2f/transient-queue-ttl
                {"pattern": "^amq\.",
                 "definition": {"expires": 1800000},
                 "priority": 1,
                 "apply-to": "queues"}

----------------------------------------

TITLE: Finding Mirrored Queue Policies in RabbitMQ
DESCRIPTION: Bash script to list all policies that contain ha-mode setting, indicating mirrored queues configuration across different vhosts.

LANGUAGE: bash
CODE:
#!/bin/sh
printf "%s\t%s\t%s\t%s\t%s\t%s\n" vhost policy_name pattern apply_to definition priority
for vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do
  rabbitmqctl -q list_policies -p "$vhost" |
    grep 'ha-mode'
done

----------------------------------------

TITLE: Declaring Dynamic Shovel Using rabbitmqctl (Windows)
DESCRIPTION: PowerShell command to create a dynamic shovel with proper Windows command line escaping

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_parameter shovel my-shovel ^
  "{""src-protocol"": ""amqp091"", ""src-uri"":""amqp://localhost"", ""src-queue"": ""source-queue"", ^
   ""dest-protocol"": ""amqp091"", ""dest-uri"": ""amqp://remote.rabbitmq.local"", ^
   ""dest-queue"": ""target-queue"", ""dest-queue-args"": {""x-queue-type"": ""quorum""}}"

----------------------------------------

TITLE: Initializing StreamSystem and Creating Stream in C#
DESCRIPTION: C# code to initialize a StreamSystem and create a stream for offset tracking.

LANGUAGE: csharp
CODE:
var streamSystem = await StreamSystem.Create(new StreamSystemConfig());

var stream = "stream-offset-tracking-dotnet";
await streamSystem.CreateStream(new StreamSpec(stream));

----------------------------------------

TITLE: RabbitMQ Plugin Build Configuration
DESCRIPTION: Makefile configurations required for building RabbitMQ plugins with Elixir support.

LANGUAGE: makefile
CODE:
include ../umbrella.mk

LANGUAGE: makefile
CODE:
DEPS:=rabbitmq-server rabbitmq-erlang-client elixir_wrapper
RETAIN_ORIGINAL_VERSION:=true
ORIGINAL_VERSION:=0.1
DO_NOT_GENERATE_APP_FILE:=

CONSTRUCT_APP_PREREQS:=mix-compile
define construct_app_commands
	mkdir -p $(APP_DIR)/ebin
	cp $(PACKAGE_DIR)/ebin/* $(APP_DIR)/ebin
endef

define package_rules

$(PACKAGE_DIR)/deps/.done:
	rm -rf $$(@D)
	mkdir -p $$(@D)
	@echo [elided] unzip ezs
	@cd $$(@D) && $$(foreach EZ,$$(wildcard $(PACKAGE_DIR)/build/dep-ezs/*.ez),unzip -q $$(abspath $$(EZ)) &&) :
	touch $$@

mix-compile: $(PACKAGE_DIR)/deps/.done
	mix clean
	ERL_LIBS=$(PACKAGE_DIR)/deps mix compile

endef

----------------------------------------

TITLE: Queue Binding with Routing Key
DESCRIPTION: Shows how to create a queue binding with a specific routing key for message filtering.

LANGUAGE: python
CODE:
channel.queue_bind(exchange=exchange_name,
                   queue=queue_name,
                   routing_key='black')

----------------------------------------

TITLE: Message Requeue Commands in AMQP Protocol
DESCRIPTION: AMQP commands used for message requeuing operations, which affect message ordering in RabbitMQ queues. These commands are used to return messages to the queue with different ordering behaviors depending on the RabbitMQ version.

LANGUAGE: AMQP
CODE:
basic.recover
basic.reject
basic.nack

----------------------------------------

TITLE: Handling Blocked Connection Notifications in .NET
DESCRIPTION: This snippet shows how to register event handlers for ConnectionBlocked and ConnectionUnblocked events in the RabbitMQ .NET client. It defines two methods to handle the blocked and unblocked states, and then subscribes these methods to the respective events on the IConnection object.

LANGUAGE: csharp
CODE:
  public void HandleBlocked(object sender, ConnectionBlockedEventArgs args)
  {
      // Connection is now blocked
  }

  public void HandleUnblocked(object sender, EventArgs args)
  {
      // Connection is now unblocked
  }

Conn.ConnectionBlocked   += HandleBlocked;
Conn.ConnectionUnblocked += HandleUnblocked;

----------------------------------------

TITLE: Windows TLS Configuration Environment Setup
DESCRIPTION: Environment configuration batch file content for setting up TLS-enabled inter-node communication on Windows systems.

LANGUAGE: bash
CODE:
@echo off
set SSL_PATH="C:/Program Files/erl10.0.1/lib/ssl-9.0/ebin"

set SERVER_ADDITIONAL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

set CTL_ERL_ARGS=-pa %SSL_PATH% ^
    -proto_dist inet_tls ^
    -ssl_dist_optfile C:/Users/rmq_user/AppData/Roaming/RabbitMQ/inter_node_tls.config

----------------------------------------

TITLE: Configuring Alternate Exchange Using Java Client in RabbitMQ
DESCRIPTION: Shows how to declare an exchange with an Alternate Exchange using client-provided arguments in Java. This method is discouraged in favor of using policies. The example sets up a direct exchange 'my-direct' with an AE 'my-ae', and creates bindings for routed and unrouted messages.

LANGUAGE: java
CODE:
Map<String, Object> args = new HashMap<String, Object>();
args.put("alternate-exchange", "my-ae");
channel.exchangeDeclare("my-direct", "direct", false, false, args);
channel.exchangeDeclare("my-ae", "fanout");
channel.queueDeclare("routed");
channel.queueBind("routed", "my-direct", "key1");
channel.queueDeclare("unrouted");
channel.queueBind("unrouted", "my-ae", "");

----------------------------------------

TITLE: Configuring TLS for Prometheus Endpoint
DESCRIPTION: Configuration snippet for enabling TLS on the Prometheus metrics endpoint

LANGUAGE: ini
CODE:
prometheus.ssl.port       = 15691
prometheus.ssl.cacertfile = /full/path/to/ca_certificate.pem
prometheus.ssl.certfile   = /full/path/to/server_certificate.pem
prometheus.ssl.keyfile    = /full/path/to/server_key.pem
prometheus.ssl.password   = password-if-keyfile-is-encrypted

----------------------------------------

TITLE: Adding Library Dependencies with Mix
DESCRIPTION: Configuration for adding the RabbitMQ Erlang client as a dependency in Mix (Elixir build tool)

LANGUAGE: elixir
CODE:
{:rabbit_common, "~> 3.8"}

----------------------------------------

TITLE: Configuring Absolute Disk Free Space Limit in RabbitMQ
DESCRIPTION: This snippet shows how to set the disk free space limit to an absolute value of 1GB using the disk_free_limit.absolute configuration setting.

LANGUAGE: ini
CODE:
disk_free_limit.absolute = 1000000000

----------------------------------------

TITLE: Disable Maintenance Mode - Bash/PowerShell
DESCRIPTION: Commands to disable maintenance mode and restore normal node operation if restart is not performed.

LANGUAGE: bash
CODE:
rabbitmq-upgrade revive

LANGUAGE: powershell
CODE:
rabbitmq-upgrade.bat revive

----------------------------------------

TITLE: Configuring RabbitMQ Cluster in Kubernetes
DESCRIPTION: YAML configuration for deploying a RabbitMQ cluster using the Kubernetes Operator. It specifies resource allocations, persistence settings, and advanced configurations like disabling credit flow.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: ...
spec:
  replicas: 1 # or 3
  image: rabbitmq:3.10.1-management # or rabbitmq:3.9.0-management
  resources:
    requests:
      cpu: 8
      memory: 16Gi
    limits:
      cpu: 8
      memory: 16Gi
  persistence:
    storageClassName: premium-rwo
    storage: "3000Gi"
  rabbitmq:
    advancedConfig: |
      [
      {rabbit, [
          {credit_flow_default_credit,{0,0}}
      ]}
      ].

----------------------------------------

TITLE: Apache Reverse Proxy Configuration
DESCRIPTION: Example Apache configuration for proxying requests to RabbitMQ management interface

LANGUAGE: apacheconf
CODE:
AllowEncodedSlashes On
ProxyPassReverse / http://rabbitmq-host:15672/
ProxyPass / http://rabbitmq-host:15672/ nocanon

----------------------------------------

TITLE: Frontmatter Configuration in Markdown
DESCRIPTION: Blog post frontmatter configuration defining metadata like title, tags, authors and image path

LANGUAGE: markdown
CODE:
---
title: "New website for RabbitMQ 3.13.0"
tags: ["Documentation",]
authors: [jpedron]
image: ./thumbnail.png
---

----------------------------------------

TITLE: Running Testsuites with Mixed-Version Clusters
DESCRIPTION: Commands to set up and run testsuites in the context of a mixed-version cluster for testing feature flag compatibility.

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-server.git secondary-umbrella
cd secondary-umbrella
git checkout v3.12.x
make co

cd secondary-umbrella/deps/rabbitmq_federation
make dist

cd /path/to/primary/rabbitmq_federation

SECONDARY_UMBRELLA=/path/to/secondary-umbrella \
RABBITMQ_FEATURE_FLAGS= \
make tests

----------------------------------------

TITLE: Creating Temporary Queue in Python
DESCRIPTION: Creates a temporary queue with a server-generated name that will be automatically deleted when the connection closes.

LANGUAGE: python
CODE:
result = channel.queue_declare(queue='', exclusive=True)

----------------------------------------

TITLE: JSON Log Formatting Configuration
DESCRIPTION: Example of customizing JSON log output field mapping.

LANGUAGE: ini
CODE:
log.file.formatter = json
log.file.formatter.json.field_map = 'time:ts level:lvl msg:message *:-'

----------------------------------------

TITLE: Configuring Default Prefetch in RabbitMQ Advanced Configuration
DESCRIPTION: This snippet shows how to set a default prefetch limit in the RabbitMQ advanced configuration file, which will be applied if the consumer doesn't specify one.

LANGUAGE: erlang
CODE:
%% advanced.config file
[
 {rabbit, [
       {default_consumer_prefetch, {false,250}}
     ]
 }
].

----------------------------------------

TITLE: Starting RabbitMQ Server
DESCRIPTION: Command to start RabbitMQ with perf support and scheduler configuration

LANGUAGE: bash
CODE:
make run-broker PLUGINS="" RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+JPperf true +S 4" \
                RABBITMQ_CONFIG_FILE="advanced.config" TEST_TMPDIR="test-rabbit"

----------------------------------------

TITLE: Implementing Task Publisher in Ruby
DESCRIPTION: A Ruby script that publishes messages to a RabbitMQ queue. It takes command line arguments as the message content and ensures message persistence.

LANGUAGE: ruby
CODE:
message = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')

queue.publish(message, persistent: true)
puts " [x] Sent #{message}"

----------------------------------------

TITLE: Building RabbitMQ Server
DESCRIPTION: Basic make command to build RabbitMQ server and its plugins

LANGUAGE: bash
CODE:
cd rabbitmq
make

----------------------------------------

TITLE: Implementing Topic Exchange Message Publisher in Node.js
DESCRIPTION: Node.js script that publishes messages to a RabbitMQ topic exchange. Messages are routed using dot-delimited routing keys in the format <facility>.<severity>. The script connects to RabbitMQ, creates a topic exchange, and publishes messages with specified routing keys.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'topic_logs';
    var args = process.argv.slice(2);
    var key = (args.length > 0) ? args[0] : 'anonymous.info';
    var msg = args.slice(1).join(' ') || 'Hello World!';

    channel.assertExchange(exchange, 'topic', {
      durable: false
    });
    channel.publish(exchange, key, Buffer.from(msg));
    console.log(" [x] Sent %s:'%s'", key, msg);
  });

  setTimeout(function() {
    connection.close();
    process.exit(0)
  }, 500);
});

----------------------------------------

TITLE: Enabling MQTT Adapter Plugin for RabbitMQ
DESCRIPTION: Command to enable the MQTT adapter plugin using the rabbitmq-plugins tool.

LANGUAGE: shell
CODE:
sudo rabbitmq-plugins enable rabbitmq_mqtt

----------------------------------------

TITLE: Rotating RabbitMQ Logs
DESCRIPTION: Instructs the RabbitMQ node to perform internal log rotation.

LANGUAGE: bash
CODE:
rabbitmqctl rotate_logs

----------------------------------------

TITLE: Binding Queue to Exchange in Python
DESCRIPTION: Creates a binding between the logs exchange and a queue to receive messages.

LANGUAGE: python
CODE:
channel.queue_bind(exchange='logs',
                   queue=result.method.queue)

----------------------------------------

TITLE: Exploring Available Command Groups in rabbitmqadmin
DESCRIPTION: This command lists all available command groups in rabbitmqadmin v2.

LANGUAGE: shell
CODE:
rabbitmqadmin help

----------------------------------------

TITLE: Adding JVM Metrics to RabbitMQ Client
DESCRIPTION: Extends the basic metrics setup by adding JVM-specific metrics including classloader, memory, garbage collection, processor, and thread metrics.

LANGUAGE: java
CODE:
MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);
// JVM and system metrics:
new ClassLoaderMetrics().bindTo(jmxRegistry);
new JvmMemoryMetrics().bindTo(jmxRegistry);
new JvmGcMetrics().bindTo(jmxRegistry);
new ProcessorMetrics().bindTo(jmxRegistry);
new JvmThreadMetrics().bindTo(jmxRegistry);
ConnectionFactory connectionFactory = new ConnectionFactory();
MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(
    jmxRegistry, "rabbitmq.client"
);
connectionFactory.setMetricsCollector(metricsCollector);

----------------------------------------

TITLE: Starting PerfTest Producers for Local Random Exchange in RabbitMQ
DESCRIPTION: These shell commands start 2 PerfTest producers with different publishing rates, connecting to different nodes in the RabbitMQ cluster. They publish to the 'rpc' exchange of type 'x-local-random'.

LANGUAGE: shell
CODE:
perf-test -H amqp://localhost:5672 --consumers 0 --exchange rpc -t x-local-random --rate 100
perf-test -H amqp://localhost:5673 --consumers 0 --exchange rpc -t x-local-random --rate 20

----------------------------------------

TITLE: Deleting a RabbitMQ Instance
DESCRIPTION: Commands to delete a RabbitMQ cluster instance from Kubernetes.

LANGUAGE: bash
CODE:
kubectl delete rabbitmqcluster INSTANCE

LANGUAGE: bash
CODE:
kubectl delete -f INSTANCE.yaml

----------------------------------------

TITLE: Feature Flag Migration Function
DESCRIPTION: Example of a migration function for a feature flag in Erlang.

LANGUAGE: erlang
CODE:
quorum_queue_migration(FeatureName, _FeatureProps, enable) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    migrate_to_amqqueue_with_type(FeatureName, Tables, Fields);
quorum_queue_migration(_FeatureName, _FeatureProps, is_enabled) ->
    Tables = ?quorum_queue_tables,
    rabbit_table:wait(Tables),
    Fields = amqqueue:fields(amqqueue_v2),
    mnesia:table_info(rabbit_queue, attributes) =:= Fields andalso
    mnesia:table_info(rabbit_durable_queue, attributes) =:= Fields.

----------------------------------------

TITLE: Complete Task Publisher Implementation
DESCRIPTION: Complete implementation of the task publisher with connection handling and queue durability settings.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

connection = Bunny.new(automatically_recover: false)
connection.start

channel = connection.create_channel
queue = channel.queue('task_queue', durable: true)

message = ARGV.empty? ? 'Hello World!' : ARGV.join(' ')

queue.publish(message, persistent: true)
puts " [x] Sent #{message}"

connection.close

----------------------------------------

TITLE: Enabling RabbitMQ Peer Discovery Plugin
DESCRIPTION: Example showing how to enable a peer discovery plugin using rabbitmq-plugins in offline mode

LANGUAGE: bash
CODE:
rabbitmq-plugins --offline enable <plugin name>

LANGUAGE: bash
CODE:
rabbitmq-plugins --offline enable rabbitmq_peer_discovery_k8s

----------------------------------------

TITLE: Classic Config Format Example
DESCRIPTION: Example of configuration using the classic Erlang terms format in advanced.config

LANGUAGE: erlang
CODE:
%% this is a comment
[
  {rabbit, [
      {tcp_listeners, [5673]}
    ]
  }
].

----------------------------------------

TITLE: RabbitMQ Advanced Configuration
DESCRIPTION: Advanced configuration settings for RabbitMQ memory and flow control

LANGUAGE: erlang
CODE:
[
 {rabbit,[
  {vm_memory_high_watermark, {absolute, 15_000_000_000}},
  {credit_flow_default_credit, {1600, 800}}
 ]}.
].

----------------------------------------

TITLE: Retrieving specific RabbitMQ memory metric
DESCRIPTION: Use the HTTP API and jq to retrieve a specific memory metric for a RabbitMQ node.

LANGUAGE: bash
CODE:
curl --silent -u guest:guest -X GET http://127.0.0.1:15672/api/nodes/rabbit@hostname/memory | jq ".memory.total.allocated"
# => 397365248

----------------------------------------

TITLE: Configuring Plugin Directory Paths
DESCRIPTION: Example configuration for setting custom plugin directory paths in rabbitmq-env.conf files.

LANGUAGE: bash
CODE:
PLUGINS_DIR="/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.11.6/plugins"

LANGUAGE: powershell
CODE:
PLUGINS_DIR="C:\Example\RabbitMQ\plugins;C:\Example\RabbitMQ\rabbitmq_server-3.11.6\plugins"

----------------------------------------

TITLE: Configuring Producer for Super Stream in Java
DESCRIPTION: This snippet demonstrates how to configure a producer to publish messages to a super stream named 'invoices'. It shows how to set up routing based on a message property.

LANGUAGE: java
CODE:
Producer producer = environment.producerBuilder()
    .superStream("invoices") // set the super stream name
    .routing(message -> message.getProperties().getMessageIdAsString()) // extract routing key 
    .producerBuilder()
    .build();

producer.send(...);

----------------------------------------

TITLE: Checking Global QoS Settings in RabbitMQ
DESCRIPTION: Commands to detect channels using global QoS settings and map them to queue names.

LANGUAGE: bash
CODE:
rabbitmqctl list_channels pid name global_prefetch_count | sed -n '/\t0$/!p'
rabbitmqctl list_consumers queue_name channel_pid

----------------------------------------

TITLE: Implementing Topic Exchange Message Consumer in Ruby
DESCRIPTION: Ruby script that consumes messages from a topic exchange using pattern-based binding keys. Supports multiple bindings and demonstrates the use of * and # wildcards for flexible message filtering.

LANGUAGE: ruby
CODE:
#!/usr/bin/env ruby
require 'bunny'

abort "Usage: #{$PROGRAM_NAME} [binding key]" if ARGV.empty?

connection = Bunny.new
connection.start

channel = connection.create_channel
exchange = channel.topic('topic_logs')
queue = channel.queue('', exclusive: true)

ARGV.each do |severity|
  queue.bind(exchange, routing_key: severity)
end

puts ' [*] Waiting for logs. To exit press CTRL+C'

begin
  queue.subscribe(block: true) do |delivery_info, _properties, body|
    puts " [x] #{delivery_info.routing_key}:#{body}"
  end
rescue Interrupt => _
  channel.close
  connection.close

  exit(0)
end

----------------------------------------

TITLE: Field Array Grammar Definition
DESCRIPTION: AMQP protocol grammar specification for field arrays showing the encoding format used by RabbitMQ.

LANGUAGE: text
CODE:
field-array = long-int *field-value

----------------------------------------

TITLE: Initializing RabbitMQ Client with JMX Metrics
DESCRIPTION: Sets up basic RabbitMQ client metrics collection using Micrometer with JMX registry. Configures a connection factory with metrics collector and demonstrates basic queue operations.

LANGUAGE: java
CODE:
MeterRegistry jmxRegistry = new JmxMeterRegistry(JmxConfig.DEFAULT, Clock.SYSTEM);
ConnectionFactory connectionFactory = new ConnectionFactory();
MicrometerMetricsCollector metricsCollector = new MicrometerMetricsCollector(
    jmxRegistry, "rabbitmq.client"
);
connectionFactory.setMetricsCollector(metricsCollector);

Connection connection = connectionFactory.newConnection();
Channel channel = connection.createChannel();
String queue = channel.queueDeclare().getQueue();
channel.basicConsume(queue, true, (ctag, msg) -> { }, (ctag) -> { });
executor.submit(() -> {
    Random random = new Random();
    while (true) {
        Thread.sleep(random.nextInt(100));
        channel.basicPublish("", queue, null, "".getBytes());
    }
});

----------------------------------------

TITLE: Configuring Federation Upstream in PowerShell
DESCRIPTION: PowerShell command to configure a federation upstream named 'origin' pointing to a remote RabbitMQ host using the RabbitMQ CLI tool.

LANGUAGE: powershell
CODE:
rabbitmqctl.bat set_parameter federation-upstream origin '"{""uri"":""amqp://remote-host.local:5672""}"'

----------------------------------------

TITLE: Adapting Testsuites for Feature Flags
DESCRIPTION: Example of how to adapt a testsuite to handle feature flags in RabbitMQ.

LANGUAGE: erlang
CODE:
init_per_testcase(Testcase, Config) ->
    % (...)

    % 1.
    % The broker or cluster is started: we rely on this to query feature
    % flags.
    Config1 = rabbit_ct_helpers:run_steps(
                Config,
                rabbit_ct_broker_helpers:setup_steps() ++
                rabbit_ct_client_helpers:setup_steps()),

    % 2.
    % We try to enable the `quorum_queue` feature flag. The helper is
    % responsible for checking if the feature flag is supported and
    % enabling it.
    case rabbit_ct_broker_helpers:enable_feature_flag(Config1, quorum_queue) of
        ok ->
            % The feature flag is enabled at this point. The setup can
            % continue to play with `Config1` and the cluster.
            Config1;
        Skip ->
            % The feature flag is unavailable/unsupported. The setup
            % calls `end_per_testcase()` to stop the node/cluster and
            % skips the testcase.
            end_per_testcase(Testcase, Config1),
            Skip
    end.

----------------------------------------

TITLE: Creating a Channel for RabbitMQ Operations in JavaScript
DESCRIPTION: This snippet creates a channel for performing RabbitMQ operations after establishing a connection.

LANGUAGE: javascript
CODE:
amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {});
});

----------------------------------------

TITLE: Value Escaping Example
DESCRIPTION: Example showing how to escape values containing # character in rabbitmq.conf

LANGUAGE: ini
CODE:
default_user = '7f11ddc4f1900a233964'
default_pass = 'efd3!53a9@92#a08_d_6d'

----------------------------------------

TITLE: Value Escaping Example
DESCRIPTION: Example showing how to escape values containing # character in rabbitmq.conf

LANGUAGE: ini
CODE:
default_user = '7f11ddc4f1900a233964'
default_pass = 'efd3!53a9@92#a08_d_6d'

----------------------------------------

TITLE: Combining Certificate and Private Key Files
DESCRIPTION: Command to concatenate the server certificate and private key files into a single combined file for use with TLS configuration.

LANGUAGE: bash
CODE:
cat server_certificate.pem server_key.pem > combined_keys.pem

----------------------------------------

TITLE: Setting Max Queue Length Policy with rabbitmqctl in Bash
DESCRIPTION: Uses rabbitmqctl to set a policy that limits a queue to 1MiB of message data. When the limit is reached, the oldest messages are discarded.

LANGUAGE: bash
CODE:
rabbitmqctl set_policy my-pol "^one-meg$" \
  '{"max-length-bytes":1048576}' \
  --apply-to queues

----------------------------------------

TITLE: Running RabbitMQ PerfTest Benchmark with Quorum Queues
DESCRIPTION: Bash command to run the RabbitMQ PerfTest tool for benchmarking quorum queue performance. Configures test parameters like number of queues, publishers, consumers, message size, and quorum queue properties.

LANGUAGE: bash
CODE:
bin/runjava com.rabbitmq.perf.PerfTest \
-H amqp://guest:guest@10.0.0.1:5672/%2f,amqp://guest:guest@10.0.0.2:5672/%2f,amqp://guest:guest@10.0.0.3:5672/%2f \
-z 1800 \
-f persistent \
-q 1000 \
-c 1000 \
-ct -1 \
-ad false \
--rate 50 \
--size 1024 \
--queue-pattern 'perf-test-%d' \
--queue-pattern-from 1 \
--queue-pattern-to 100 \
-qa auto-delete=false,durable=false,x-queue-type=quorum \
--producers 200 \
--consumers 200 \
--consumer-latency 10000 \
--producer-random-start-delay 30

----------------------------------------

TITLE: Using CLI Tools with Remote Nodes
DESCRIPTION: Shows how to use CLI tools to interact with remote RabbitMQ nodes using the --node option.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status -n rabbit@remote-host.local

----------------------------------------

TITLE: RPC Client Implementation - Elixir
DESCRIPTION: Complete RPC client implementation with correlation ID handling and response management

LANGUAGE: elixir
CODE:
defmodule FibonacciRpcClient do
  def wait_for_messages(_channel, correlation_id) do
    receive do
      {:basic_deliver, payload, %{correlation_id: ^correlation_id}} ->
        {n, _} = Integer.parse(payload)
        n
    end
  end
  def call(n) do
    {:ok, connection} = AMQP.Connection.open
    {:ok, channel} = AMQP.Channel.open(connection)

    {:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel,
                                                     "",
                                                     exclusive: true)
    AMQP.Basic.consume(channel, queue_name, nil, no_ack: true)
    correlation_id =
      :erlang.unique_integer
      |> :erlang.integer_to_binary
      |> Base.encode64

    request = to_string(n)
    AMQP.Basic.publish(channel,
                       "",
                       "rpc_queue",
                       request,
                       reply_to: queue_name,
                       correlation_id: correlation_id)

    FibonacciRpcClient.wait_for_messages(channel, correlation_id)
  end
end

----------------------------------------

TITLE: Setting Maximum MQTT Packet Size in RabbitMQ Configuration
DESCRIPTION: Configuration snippet to set the maximum allowed MQTT packet size for authenticated clients in RabbitMQ.

LANGUAGE: ini
CODE:
mqtt.max_packet_size_authenticated = 1024

----------------------------------------

TITLE: Simulating Work Processing in Java
DESCRIPTION: This function simulates work processing by introducing delays based on the number of dots in the message.

LANGUAGE: Java
CODE:
private static void doWork(String task) throws InterruptedException {
    for (char ch: task.toCharArray()) {
        if (ch == '.') Thread.sleep(1000);
    }
}

----------------------------------------

TITLE: Basic Queue Binding in RabbitMQ
DESCRIPTION: Simple binding between a queue and an exchange without routing key.

LANGUAGE: objectivec
CODE:
[q bind:exchange];

----------------------------------------

TITLE: Installing Pre-release Version of AMQP Gem in Ruby
DESCRIPTION: Shows how to install the pre-release version of the AMQP gem using RubyGems. This allows users to test the latest development version.

LANGUAGE: Ruby
CODE:
gem install amqp --pre

----------------------------------------

TITLE: Basic INI Configuration in RabbitMQ
DESCRIPTION: Shows basic heartbeat configuration using the new INI-style format.

LANGUAGE: ini
CODE:
heartbeat = 30

----------------------------------------

TITLE: Example RabbitMQ Server Capabilities Table
DESCRIPTION: Example of the capabilities table presented by a RabbitMQ node to a client, showing supported features like exchange bindings, consumer cancellation, and publisher confirms.

LANGUAGE: haskell
CODE:
{ "product"      = (longstr) "RabbitMQ",
  "platform"     = (longstr) "Erlang/OTP",
  "information"  = (longstr) "Licensed under the MPL 2.0. Website: https://www.rabbitmq.com",
  "capabilities" = (table)   { "exchange_exchange_bindings" = (bool) true,
                               "consumer_cancel_notify"     = (bool) true,
                               "basic.nack"                 = (bool) true,
                               "publisher_confirms"         = (bool) true },
  "version"      = (longstr) "3.12.10" }

----------------------------------------

TITLE: Elixir Module Attributes for RabbitMQ Boot Steps
DESCRIPTION: Implementation of RabbitMQ boot steps using Elixir module attributes for plugin registration.

LANGUAGE: elixir
CODE:
defmodule RabbitExchangeTypeRecentHistory do

  Module.register_attribute __MODULE__,
       :rabbit_boot_step,
       accumulate: true, persist: true

  @rabbit_boot_step { __MODULE__,
                     [{:description, "exchange type x-recent-history"},
                      {:mfa, {:rabbit_registry, :register,
                              [:exchange, <<"x-recent-history">>, __MODULE__]}},
                      {:requires, :rabbit_registry},
                      {:enables, :kernel_ready}]
end

----------------------------------------

TITLE: Configuring Deprecated Feature Behavior in RabbitMQ (INI)
DESCRIPTION: Examples of INI configuration to disable a deprecated feature for testing or re-enable a feature that is denied by default. These configurations allow users to manage the behavior of deprecated features in RabbitMQ.

LANGUAGE: ini
CODE:
# Try RabbitMQ as if the deprecated feature was gone.
deprecated_features.permit.some_deprecated_feature = false

LANGUAGE: ini
CODE:
# Permit a deprecated feature that is denied by default.
deprecated_features.permit.some_deprecated_feature = true

----------------------------------------

TITLE: Declaring Fanout Exchange in Go
DESCRIPTION: Declares a fanout exchange named 'logs' using the RabbitMQ Go client. This exchange will broadcast all messages it receives to all bound queues.

LANGUAGE: go
CODE:
err = ch.ExchangeDeclare(
  "logs",   // name
  "fanout", // type
  true,     // durable
  false,    // auto-deleted
  false,    // internal
  false,    // no-wait
  nil,      // arguments
)

----------------------------------------

TITLE: TLS Configuration in Erlang Client
DESCRIPTION: Example demonstrating TLS configuration in the RabbitMQ Erlang client with peer verification.

LANGUAGE: Erlang
CODE:
SslOpts = [{cacertfile, "/path/to/ca_certificate.pem"},
           {certfile, "/path/to/client/certificate.pem"},
           {keyfile, "/path/to/client/private_key.pem"},

           %% only necessary with intermediate CAs
           %% {depth, 2},

           %% Note: it is recommended to set 'verify' to
           %% to 'verify_peer' to ensure that X509
           %% certificate chain validation is enabled
           %%
           %% Do not set 'verify' or set it to verify_none
           %% if x509 certificate chain validation is
           %% not desired
           {verify, verify_peer},

           %% If Server Name Indication validation is desired,
           %% set the following option to the host name to which
           %% the connection is made. If necessary, this option
           %% may be set to another host name to match the server
           %% certificate's CN= value.
           %% Do not set this option or set it to the atom 'disable'
           %% to disable SNI validation
           {server_name_indication, "my.rmq-server.net"}],

Params = #amqp_params_network{host = "my.rmq-server.net",
                              port = 5671,
                              ssl_options = SslOpts}

{ok, Conn} = amqp_connection:start(Params),

----------------------------------------

TITLE: Closing a Channel in .NET
DESCRIPTION: Example of closing a channel (called 'model' in .NET client) when it's no longer needed using the RabbitMQ .NET client.

LANGUAGE: csharp
CODE:
// the .NET client calls channels "models"
var ch = conn.CreateModel();

// do some work

// close the channel when it is no longer needed

ch.Close();

----------------------------------------

TITLE: Implementing Message Receivers for Fanout Exchange
DESCRIPTION: This snippet shows how to implement message receivers that consume messages from queues bound to a fanout exchange using Spring AMQP. It uses @RabbitListener annotations to define multiple consumers.

LANGUAGE: Java
CODE:
public class Tut3Receiver {

	@RabbitListener(queues = "#{autoDeleteQueue1.name}")
	public void receive1(String in) throws InterruptedException {
		receive(in, 1);
	}

	@RabbitListener(queues = "#{autoDeleteQueue2.name}")
	public void receive2(String in) throws InterruptedException {
		receive(in, 2);
	}

	public void receive(String in, int receiver) throws InterruptedException {
		StopWatch watch = new StopWatch();
		watch.start();
		System.out.println("instance " + receiver + " [x] Received '" + in + "'");
		doWork(in);
		watch.stop();
		System.out.println("instance " + receiver + " [x] Done in "
		    + watch.getTotalTimeSeconds() + "s");
	}

	private void doWork(String in) throws InterruptedException {
		for (char ch : in.toCharArray()) {
			if (ch == '.') {
				Thread.sleep(1000);
			}
		}
	}

}

----------------------------------------

TITLE: Running RabbitMQ Publisher in JavaScript
DESCRIPTION: This command runs the publisher script to send a message to RabbitMQ.

LANGUAGE: bash
CODE:
./send.js

----------------------------------------

TITLE: Starting RabbitMQ 3.13+ Node with Docker
DESCRIPTION: This shell command starts a RabbitMQ 3.13+ node using Docker, configuring the necessary ports and environment variables.

LANGUAGE: shell
CODE:
docker run -it --rm --name rabbitmq -p 5552:5552 \
    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \
    rabbitmq:3.13

----------------------------------------

TITLE: Creating Local Kubernetes Cluster
DESCRIPTION: Command to create a local Kubernetes cluster using kind

LANGUAGE: zsh
CODE:
kind create cluster

----------------------------------------

TITLE: Enabling Publisher Confirms in RabbitMQ with Java
DESCRIPTION: Basic setup code to enable publisher confirms on a RabbitMQ channel. This must be called once per channel before publishing messages with confirms.

LANGUAGE: java
CODE:
Channel channel = connection.createChannel();
channel.confirmSelect();

----------------------------------------

TITLE: Migrating Federation Plugin in RabbitMQ 3.0
DESCRIPTION: Commands to switch from the new federation plugin to the backwards-compatible old federation plugin for maintaining existing federation setups in RabbitMQ 3.0.

LANGUAGE: shell
CODE:
rabbitmq-plugins disable rabbitmq_federation

rabbitmq-plugins enable rabbitmq_old_federation

----------------------------------------

TITLE: Troubleshooting Authentication in RabbitMQ
DESCRIPTION: Example log output for authentication failures and commands for testing authentication.

LANGUAGE: ini
CODE:
2019-03-25 12:28:19.047 [info] <0.1613.0> accepting AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)
2019-03-25 12:28:19.056 [error] <0.1613.0> Error on AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672, state: starting):
PLAIN login refused: user 'user2' - invalid credentials
2019-03-25 12:28:22.057 [info] <0.1613.0> closing AMQP connection <0.1613.0> (127.0.0.1:63839 -> 127.0.0.1:5672)

LANGUAGE: bash
CODE:
rabbitmqctl authenticate_user "a-username" "a/password"

----------------------------------------

TITLE: Configuring Stream TCP Listener Host
DESCRIPTION: Configuration for setting Stream plugin TCP listeners to only listen on localhost for both IPv4 and IPv6.

LANGUAGE: ini
CODE:
stream.listeners.tcp.1 = 127.0.0.1:5552
stream.listeners.tcp.2 = ::1:5552

----------------------------------------

TITLE: Configuring Deprecated Feature Behavior in RabbitMQ (INI)
DESCRIPTION: Examples of INI configuration to control the behavior of deprecated features in RabbitMQ. The first snippet shows how to disable a deprecated feature for testing, while the second demonstrates how to re-enable a feature that is denied by default.

LANGUAGE: ini
CODE:
# Try RabbitMQ as if the deprecated feature was gone.
deprecated_features.permit.some_deprecated_feature = false

LANGUAGE: ini
CODE:
# Permit a deprecated feature that is denied by default.
deprecated_features.permit.some_deprecated_feature = true

----------------------------------------

TITLE: Log Message Consumer Implementation
DESCRIPTION: Complete implementation of a log message consumer that receives messages from a fanout exchange using a temporary queue.

LANGUAGE: elixir
CODE:
defmodule ReceiveLogs do
  def wait_for_messages(channel) do
    receive do
      {:basic_deliver, payload, _meta} ->
        IO.puts " [x] Received #{payload}"

        wait_for_messages(channel)
    end
  end
end

{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

AMQP.Exchange.declare(channel, "logs", :fanout)
{:ok, %{queue: queue_name}} = AMQP.Queue.declare(channel, "", exclusive: true)
AMQP.Queue.bind(channel, queue_name, "logs")
AMQP.Basic.consume(channel, queue_name, nil, no_ack: true)
IO.puts " [*] Waiting for messages. To exit press CTRL+C, CTRL+C"

ReceiveLogs.wait_for_messages(channel)

----------------------------------------

TITLE: Setting Federation Policy for All Upstreams in Bash
DESCRIPTION: Command to apply all federation upstreams to exchanges and queues matching the pattern '^federated\.'

LANGUAGE: bash
CODE:
rabbitmqctl set_policy federate-me '^federated\.' '{"federation-upstream-set":"all"}'

----------------------------------------

TITLE: Configuring Shovel Plugin to Drain Messages in RabbitMQ
DESCRIPTION: This snippet demonstrates how to use the Shovel plugin to drain messages from a queue in the 'blue' cluster to the corresponding queue in the 'green' cluster.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter shovel drain-blue \
'{"src-protocol": "amqp091", "src-uri": "amqp://node-in-blue-cluster", \
"src-queue": "queue1", "dest-protocol": "amqp091", \
"dest-uri": "amqp://", "dest-queue": "queue1"}'

----------------------------------------

TITLE: Extended INI Configuration with TCP Listener
DESCRIPTION: Demonstrates configuring both heartbeat and TCP listener settings.

LANGUAGE: ini
CODE:
heartbeat = 30

listeners.tcp.default = 5672

----------------------------------------

TITLE: Implementing Basic Task Publisher in Python
DESCRIPTION: Code for publishing messages to a work queue. Uses sys.argv to accept messages from command line arguments.

LANGUAGE: python
CODE:
import sys

message = ' '.join(sys.argv[1:]) or "Hello World!"
channel.basic_publish(exchange='',
                      routing_key='hello',
                      body=message)
print(f" [x] Sent {message}")

----------------------------------------

TITLE: LDAP Advanced Configuration
DESCRIPTION: Example showing advanced LDAP configuration with TLS and queries in Erlang format

LANGUAGE: erlang
CODE:
[{rabbitmq_auth_backend_ldap, [
  {servers, ["ldap1.eng.megacorp.local", "ldap2.eng.megacorp.local"]},
  {use_ssl, true},
  {ssl_options, [{cacertfile, "/path/to/ca_certificate.pem"},
                 {certfile, "/path/to/server_certificate.pem"},
                 {keyfile, "/path/to/server_key.pem"},
                 {verify, verify_peer},
                 {fail_if_no_peer_cert, true}]},
                 {server_name_indication, "ldap.identity.eng.megacorp.local"},
                 {ssl_hostname_verification, wildcard}
]}].

----------------------------------------

TITLE: Configuring AWS Instance Discovery in RabbitMQ
DESCRIPTION: Complete configuration example for AWS-based peer discovery including region, credentials, and instance tag filtering.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_aws

cluster_formation.aws.region = us-east-1
cluster_formation.aws.access_key_id = ANIDEXAMPLE
cluster_formation.aws.secret_key = WjalrxuTnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY

cluster_formation.aws.instance_tags.region = us-east-1
cluster_formation.aws.instance_tags.service = rabbitmq
cluster_formation.aws.instance_tags.environment = staging

----------------------------------------

TITLE: Building RabbitMQ Server
DESCRIPTION: Command to build RabbitMQ server and its plugins using GNU Make

LANGUAGE: bash
CODE:
cd rabbitmq
make

----------------------------------------

TITLE: Listing RabbitMQ Queues on Unix-like Systems
DESCRIPTION: This command lists the queues in RabbitMQ and their message counts using rabbitmqctl on Unix-like systems.

LANGUAGE: bash
CODE:
sudo rabbitmqctl list_queues

----------------------------------------

TITLE: Running RabbitMQ Broker with Custom Settings
DESCRIPTION: Make command to build and run the RabbitMQ broker with custom temporary directory and node name settings.

LANGUAGE: bash
CODE:
make run-broker TEST_TMPDIR="/some/other/location/for/rabbitmq-test-instances"

LANGUAGE: bash
CODE:
make run-broker RABBITMQ_NODENAME=rmq

----------------------------------------

TITLE: Defining RabbitMQ Exchange
DESCRIPTION: YAML definition for a RabbitMQ Exchange resource.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: Exchange
metadata:
  name: fanout
  namespace: rabbitmq-system
spec:
  name: fanout-exchange
  type: fanout
  autoDelete: false
  durable: true
  rabbitmqClusterReference:
    name: example-rabbit

----------------------------------------

TITLE: Installing MQTT Adapter Plugin for RabbitMQ
DESCRIPTION: Command to copy the downloaded MQTT adapter plugin to the RabbitMQ plugins directory on a Debian-based system.

LANGUAGE: shell
CODE:
sudo cp rabbitmq_mqtt-2.8.6.ez /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.6/plugins

----------------------------------------

TITLE: Visualizing RabbitMQ Producer with Mermaid
DESCRIPTION: A flowchart diagram showing the representation of a producer (P) in RabbitMQ messaging system

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    class P mermaid-producer

----------------------------------------

TITLE: Cloning RabbitMQ Code Generator Repository
DESCRIPTION: These bash commands clone the RabbitMQ server repository and navigate to the code generator module. This is used for accessing the code generation library that the Java client depends on.

LANGUAGE: Bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-server
cd rabbitmq-server/deps/rabbitmq_codegen

----------------------------------------

TITLE: Configuring Alternate Exchange Using Policy in Windows Command Prompt
DESCRIPTION: This snippet illustrates how to set a policy to configure an Alternate Exchange named 'my-ae' for an exchange named 'my-direct' using the rabbitmqctl command in Windows Command Prompt.

LANGUAGE: batch
CODE:
rabbitmqctl.bat set_policy AE "^my-direct$" "{""alternate-exchange":""my-ae""}" --apply-to exchanges

----------------------------------------

TITLE: Configuring Classic Peer Discovery in RabbitMQ
DESCRIPTION: Configuration snippet showing how to set up classic peer discovery with predefined node list using the new configuration format in RabbitMQ 3.7.

LANGUAGE: ini
CODE:
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config

cluster_formation.classic_config.nodes.1 = rabbit@hostname1.eng.example.local
cluster_formation.classic_config.nodes.2 = rabbit@hostname2.eng.example.local

----------------------------------------

TITLE: Sample Entra ID Access Token Structure
DESCRIPTION: This JSON structure represents a sample access token issued by Entra ID. It includes claims such as audience, issuer, expiration, and roles, which are used by RabbitMQ for permission management.

LANGUAGE: javascript
CODE:
{
  "aud": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "iss": "https://sts.windows.net/1ffc6121-590e-4aa5-bf47-c348674069cb/",
  "iat": 1655740039,
  "nbf": 1655740039,
  "exp": 1655744211,
  "acr": "1",
  "aio": "AUQAu/8TAAAAjvwucwL4nZe83vNZvg6A7sAPscI9zsGvRs8EuT7aVhubpmhRnxJ+X7nbkISoP5eBBMxoi2yiCclnH2Ocjjzsqw==",
  "amr": [
    "wia"
  ],
  "appid": "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88",
  "appidacr": "1",
  "email": "baptiste.daroit@company.com",
  "idp": "https://sts.windows.net/b3f4f7c2-72ce-4192-aba4-d6c7719b5766/",
  "in_corp": "true",
  "ipaddr": "xxx.xxx.xxx.xxx",
  "name": "Baptiste DA ROIT",
  "oid": "cf2df3b4-03df-4e1e-b5c0-f232932aaead",
  "rh": "0.AR8AgCG80x7L90C1mhVBBXQzQjgoklctsdBMtgYVWFwc4tgfAMQ.",
  "roles": [
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.tag:monitoring",
    "30b61ef8-72d7-4e40-88f2-6e16c8d3fd88.configure:*/*"
  ],
  "scp": "User.Read",
  "sub": "6aBzW3a1FOTTrnlZEuC1SmwG0sRjVgQU49DvrYK6Rqg",
  "tid": "1ffc6121-590e-4aa5-bf47-c348674069cb",
  "unique_name": "baptiste.daroit@company.com",
  "uti": "QHqwThTqQEK9iMdnRuD_AA",
  "ver": "1.0"
}

----------------------------------------

TITLE: Inter-node TLS Configuration File
DESCRIPTION: Erlang configuration file specifying TLS options for both server and client components including certificate paths and verification settings.

LANGUAGE: erlang
CODE:
[
  {server, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/server_certificate.pem"},
    {keyfile,    "/full/path/to/server_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer},
    {fail_if_no_peer_cert, true}
  ]},
  {client, [
    {cacertfile, "/full/path/to/ca_certificate.pem"},
    {certfile,   "/full/path/to/client_certificate.pem"},
    {keyfile,    "/full/path/to/client_key.pem"},
    {password,   "password-if-keyfile-is-encrypted"},
    {secure_renegotiate, true},
    {verify, verify_peer}
  ]}
].

----------------------------------------

TITLE: Configuring Federation Upstream in Bash
DESCRIPTION: Sets up a federation upstream named 'origin' that points to a remote RabbitMQ host using the RabbitMQ CLI.

LANGUAGE: bash
CODE:
rabbitmqctl set_parameter federation-upstream origin '{"uri":"amqp://remote-host.local:5672"}'

----------------------------------------

TITLE: Starting UAA Server with Docker
DESCRIPTION: Command to start the UAA authorization server container

LANGUAGE: bash
CODE:
make start-uaa

----------------------------------------

TITLE: Configuring Stream Arguments in Java
DESCRIPTION: This example shows how to set various stream-specific arguments when declaring a stream, including maximum size, segment size, and filter size.

LANGUAGE: java
CODE:
Map<String, Object> arguments = new HashMap<>();
arguments.put("x-queue-type", "stream");
// maximum stream size: 20 GB
arguments.put("x-max-length-bytes", 20_000_000_000);
// size of segment files: 100 MB
arguments.put("x-stream-max-segment-size-bytes", 100_000_000);
// size of stream bloom filter: 32
arguments.put("x-stream-filter-size-bytes", 32);

channel.queueDeclare(
  "my-stream",
  true,         // durable
  false, false, // not exclusive, not auto-delete
  arguments
);

----------------------------------------

TITLE: Sample JWT Token with Custom Scopes
DESCRIPTION: Example JWT token structure with custom scopes for RabbitMQ authentication

LANGUAGE: javascript
CODE:
{
  "scope": [],
  "extra_scope": [
    "rabbitmq.tag:management"
  ],
  "aud": [
    "rabbitmq"
  ]
}

----------------------------------------

TITLE: Implementing Dictionary Function in Erlang
DESCRIPTION: Example of generating a dictionary function that maps keys to values using pattern matching. This approach was tested as an optimization for graph implementation but proved impractical for large DFAs due to compilation time constraints.

LANGUAGE: erlang
CODE:
mydict(k1) -> {ok, v1};

mydict(k2) -> {ok, v2};

mydict(k3) -> {ok, v3};

mydict(_) -> error.

----------------------------------------

TITLE: Combining Certificate and Private Key Files (Unix)
DESCRIPTION: Command to concatenate certificate and private key files into a single combined key file required for TLS configuration.

LANGUAGE: bash
CODE:
cat server_certificate.pem server_key.pem > combined_keys.pem

----------------------------------------

TITLE: Consuming Messages with Lambda in RabbitMQ Java Client 5.0
DESCRIPTION: Demonstrates how to use the new lambda-oriented method for consuming messages in RabbitMQ Java Client 5.0. This approach provides a more concise and readable way to handle message consumption and consumer cancellation.

LANGUAGE: java
CODE:
consumingChannel.basicConsume(queue,
    (consumerTag, delivery) -> businessService.handle(delivery),
    consumerTag -> LOGGER.info("Consumer {} has been cancelled")
);

----------------------------------------

TITLE: Defining AMQPS URI Syntax in ABNF
DESCRIPTION: This ABNF snippet defines the syntax for AMQPS URIs, which are used for TLS-secured connections. The structure is identical to AMQP URIs except for the scheme identifier.

LANGUAGE: ABNF
CODE:
amqps_URI      = "amqps://" amqp_authority [ "/" vhost ]

----------------------------------------

TITLE: RabbitMQ Flow Diagram in Mermaid
DESCRIPTION: A flowchart showing message routing in RabbitMQ from producer (P) through exchange (X) to two queues (Q₁, Q₂) and their respective consumers (C₁, C₂). The diagram uses custom CSS classes to style different components of the messaging system.

LANGUAGE: mermaid
CODE:
flowchart LR
    P((P))
    X{{X}}
    Q1[[Q₁]]
    Q2[[Q₂]]
    C1((C₁))
    C2((C₂))

    P --> X --> Q1 & Q2
    Q1 --> C1
    Q2 --> C2

    class P mermaid-producer
    class X mermaid-exchange
    class Q1 mermaid-queue
    class Q2 mermaid-queue
    class C1 mermaid-consumer
    class C2 mermaid-consumer

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Okta Configuration
DESCRIPTION: Commands to start RabbitMQ Docker container with Okta OAuth 2.0 authentication configuration. Sets the MODE environment variable to 'okta' and uses make to start the RabbitMQ container.

LANGUAGE: bash
CODE:
export MODE=okta
make start-rabbitmq

----------------------------------------

TITLE: Defining Callback Function for RabbitMQ Message Consumption
DESCRIPTION: Create a callback function to handle received messages from the RabbitMQ queue.

LANGUAGE: python
CODE:
def callback(ch, method, properties, body):
    print(f" [x] Received {body}")

----------------------------------------

TITLE: RabbitMQ AMQP Method Reference
DESCRIPTION: Reference to the access.request method that RabbitMQ implements as a no-op for backward compatibility with older clients. This method is marked for future removal.

LANGUAGE: markdown
CODE:
access.request

----------------------------------------

TITLE: Consumer Utilization Data Table
DESCRIPTION: Table showing the relationship between prefetch limit and consumer utilization percentage when consuming tiny messages over localhost with a single consumer. Demonstrates how prefetch limits affect system performance up to around 30, after which network bandwidth becomes the limiting factor.

LANGUAGE: markdown
CODE:
|Prefetch limit|Consumer utilisation|
|--- |--- |
|1|14%|
|3|25%|
|10|46%|
|30|70%|
|1000|74%|

----------------------------------------

TITLE: Implementing Password Hashing in Erlang for RabbitMQ
DESCRIPTION: Shows the Erlang behaviour that needs to be implemented to add a new password hashing algorithm to RabbitMQ via plugins. The behaviour exposes a single function hash/1.

LANGUAGE: erlang
CODE:
rabbit_password_hashing.erl

----------------------------------------

TITLE: RabbitMQ Port Connectivity Check
DESCRIPTION: Verifies TCP connectivity to all enabled RabbitMQ listener ports

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q check_port_connectivity --node rabbit@target-hostname --address <ip-address-to-connect-to>

----------------------------------------

TITLE: Setting STOMP Frame Size Limit
DESCRIPTION: Configuration to set the maximum frame size for STOMP connections.

LANGUAGE: ini
CODE:
stomp.max_frame_size = 4 * 1024 * 1024

----------------------------------------

TITLE: Complete Log Message Consumer Implementation
DESCRIPTION: Full implementation of a consumer that connects to RabbitMQ, creates a temporary queue, binds to the logs exchange, and receives messages.

LANGUAGE: objectivec
CODE:
RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
[conn start];

id<RMQChannel> ch = [conn createChannel];
RMQExchange *x = [ch fanout:@"logs"];
RMQQueue *q = [ch queue:@"" options:RMQQueueDeclareExclusive];

[q bind:x];

NSLog(@"Waiting for logs.");

[q subscribe:^(RMQMessage * _Nonnull message) {
    NSLog(@"Received %@", [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);
}];

----------------------------------------

TITLE: Importing RabbitMQ Version Components in React
DESCRIPTION: Imports React components that display RabbitMQ server version information for the documentation interface.

LANGUAGE: javascript
CODE:
import {
    RabbitMQServerReleaseBranch,
    RabbitMQServerVersion,
} from '@site/src/components/RabbitMQServer';

----------------------------------------

TITLE: Cloning RabbitMQ Repositories
DESCRIPTION: Commands to clone the required RabbitMQ repositories: rabbitmq-codegen (for code generation) and rabbitmq-java-client (main client library).

LANGUAGE: bash
CODE:
git clone https://github.com/rabbitmq/rabbitmq-codegen.git rabbitmq_codegen
git clone https://github.com/rabbitmq/rabbitmq-java-client.git

----------------------------------------

TITLE: Configuring STOMP TCP Listeners for Localhost
DESCRIPTION: Configuration to set STOMP listeners for localhost on both IPv4 and IPv6.

LANGUAGE: ini
CODE:
stomp.listeners.tcp.1 = 127.0.0.1:61613
stomp.listeners.tcp.2 = ::1:61613

----------------------------------------

TITLE: Message Body Helper Function in Go
DESCRIPTION: Helper function to extract message body from command line arguments with default value.

LANGUAGE: go
CODE:
func bodyFrom(args []string) string {
	var s string
	if (len(args) < 2) || os.Args[1] == "" {
		s = "hello"
	} else {
		s = strings.Join(args[1:], " ")
	}
	return s
}

----------------------------------------

TITLE: Package Configuration - JSON
DESCRIPTION: Package.json configuration for the RabbitMQ stream tutorial project, including dependencies and scripts.

LANGUAGE: json
CODE:
{
  "name": "rabbitmq-stream-node-tutorial",
  "version": "1.0.0",
  "description": "Tutorial for the nodejs RabbitMQ stream client",
  "scripts": {
    "send": "node send.js",
    "receive": "node receive.js"
  },
  "dependencies": {
    "rabbitmq-stream-js-client": "^0.3.1"
  }
}

----------------------------------------

TITLE: Publishing a Message to RabbitMQ in Elixir
DESCRIPTION: Publishes a 'Hello World!' message to the 'hello' queue in RabbitMQ using the default exchange.

LANGUAGE: elixir
CODE:
AMQP.Basic.publish(channel, "", "hello", "Hello World!")
IO.puts " [x] Sent 'Hello World!'"

----------------------------------------

TITLE: Querying Stream PerfTest Metrics
DESCRIPTION: This curl command retrieves the metrics for the total number of bytes read by Stream PerfTest.

LANGUAGE: shell
CODE:
curl --silent localhost:8080/metrics | grep rabbitmq_stream_read_bytes_total

----------------------------------------

TITLE: Configuring Docker daemon ulimits for RabbitMQ
DESCRIPTION: An example of how to set ulimits for Docker containers running RabbitMQ using the Docker daemon configuration file.

LANGUAGE: json
CODE:
{
  "default-ulimits": {
    "nofile": {
      "Name": "nofile",
      "Hard": 64000,
      "Soft": 64000
    }
  }
}

----------------------------------------

TITLE: Sample Auth0 Access Token for RabbitMQ
DESCRIPTION: Example of an access token issued by Auth0 for RabbitMQ authentication. It includes claims for scope, permissions, and other standard JWT fields.

LANGUAGE: javascript
CODE:
{
  "iss": "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/",
  "sub": "auth0|66d980b862efcd9f5144f42a",
  "aud": [
    "rabbitmq",
    "https://dev-tm5ebsbbdcbqddcj.us.auth0.com/userinfo"
  ],
  "iat": 1725533554,
  "exp": 1725619954,
  "scope": "openid profile rabbitmq.tag:administrator",
  "azp": "IC1fqsSjkQq2cVsYyHUuQyq30OAYuUv2",
  "permissions": [
    "rabbitmq.configure:*/*",
    "rabbitmq.read:*/*",
    "rabbitmq.tag:administrator",
    "rabbitmq.write:*/*"
  ]
}

----------------------------------------

TITLE: Enabling RabbitMQ Shovel Plugin
DESCRIPTION: Command to enable the RabbitMQ Shovel plugin using rabbitmq-plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel

----------------------------------------

TITLE: Setting Distribution Buffer Size
DESCRIPTION: Configures the inter-node communication buffer size for handling heavy inter-node traffic.

LANGUAGE: bash
CODE:
RABBITMQ_DISTRIBUTION_BUFFER_SIZE=192000
RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="+zdbbl 192000"

----------------------------------------

TITLE: Importing Definitions Using HTTP API in Bash
DESCRIPTION: Shows how to import RabbitMQ definitions using a direct HTTP API call. This method requires the management plugin to be enabled and uses curl to make the API request.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -H "Content-Type: application/json" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Cluster Status Output Without Partitions
DESCRIPTION: Example output of the cluster_status command when no network partitions are present.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics cluster_status
# => Cluster status of node rabbit@warp10 ...
# => Basics
# =>
# => Cluster name: local.1
# =>
# => ...edited out for brevity...
# =>
# => Network Partitions
# =>
# => (none)
# =>
# => ...edited out for brevity...

----------------------------------------

TITLE: Listing RabbitMQ Feature Flags
DESCRIPTION: Lists feature flags with specified columns.

LANGUAGE: bash
CODE:
rabbitmqctl list_feature_flags name state

----------------------------------------

TITLE: Verifying Integrity of Key Transition Statement
DESCRIPTION: Command to download and verify the integrity of the key transition statement using GnuPG. This ensures that the statement hasn't been tampered with and is authentic.

LANGUAGE: bash
CODE:
wget -q -O- https://www.rabbitmq.com/key-transition-0xF7B8CEA6056E8E56.txt | gpg --verify

----------------------------------------

TITLE: Configuring Gatekeeper for RabbitMQ Queue Resources in YAML
DESCRIPTION: This YAML configuration informs Gatekeeper to monitor RabbitMQ Queue resources. It specifies the API group, version, and kind of the resource to be synced.

LANGUAGE: yaml
CODE:
---
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: gatekeeper-system
spec:
  sync:
    syncOnly:
    - group: rabbitmq.com
      version: v1beta1
      kind: Queue

----------------------------------------

TITLE: Importing Definitions Using HTTP API in Bash
DESCRIPTION: Shows how to import RabbitMQ definitions using a direct HTTP API call. This method requires the management plugin to be enabled and uses curl to make the API request.

LANGUAGE: bash
CODE:
curl -u {username}:{password} -H "Content-Type: application/json" -X POST -T /path/to/definitions.file.json http://{hostname}:15672/api/definitions

----------------------------------------

TITLE: Creating Direct Exchange and Publishing Messages
DESCRIPTION: Demonstrates how to create a direct exchange and publish messages with severity routing keys

LANGUAGE: swift
CODE:
ch.direct("logs")

let x = ch.direct("logs")
x.publish(msg.data(using: .utf8), routingKey: severity)

----------------------------------------

TITLE: AMQP basic.qos Configuration Change
DESCRIPTION: Change in prefetch-count behavior where the limit is now applied per consumer rather than shared across all consumers in a channel. For shared prefetch limiting, the basic.qos global flag can be enabled.

LANGUAGE: AMQP
CODE:
channel.basic.qos(prefetch_count=N, global=True)

----------------------------------------

TITLE: Basic RabbitMQ OAuth 2.0 Management UI Configuration
DESCRIPTION: Essential configuration settings in rabbitmq.conf to enable OAuth 2.0 authentication for the Management UI

LANGUAGE: ini
CODE:
# ...
management.oauth_enabled = true
management.oauth_client_id = rabbit_client_code
management.oauth_provider_url = https://uaa:8443
# ...

----------------------------------------

TITLE: Adding Hosts Entries for OAuth2 Setup
DESCRIPTION: Add necessary host entries to the /etc/hosts file to avoid DNS errors when accessing the services in a browser.

LANGUAGE: plain
CODE:
127.0.0.1  localhost keycloak rabbitmq oauth2-proxy

----------------------------------------

TITLE: Complete Example of Static Shovel Configuration (AMQP 0-9-1)
DESCRIPTION: This comprehensive example demonstrates a full static shovel configuration between AMQP 0-9-1 endpoints, including source and destination settings, declarations, and publishing options.

LANGUAGE: erlang
CODE:
{rabbitmq_shovel,
  [ {shovels, [ {my_first_shovel,
                  [ {source,
                      [ {protocol, amqp091},
                        {uris, [ "amqp://fred:secret@host1.domain/my_vhost",
                                  "amqp://john:secret@host2.domain/my_vhost" ]},
                        {declarations, [ {'exchange.declare',
                                            [ {exchange, <<"my_fanout">>},
                                              {type, <<"fanout">>},
                                              durable
                                            ]},
                                          {'queue.declare',
                                            [{arguments,
                                                [{<<"x-message-ttl">>, long, 60000}]}]},
                                          {'queue.bind',
                                            [ {exchange, <<"my_fanout">>},
                                              {queue,    <<>>}
                                            ]}
                                          ]},
                        {queue, <<>>},
                        {prefetch_count, 10}
                      ]},
                    {destination,
                      [ {protocol, amqp091},
                        {uris, ["amqp://"]},
                        {declarations, [ {'exchange.declare',
                                            [ {exchange, <<"my_direct">>},
                                              {type, <<"direct">>},
                                              durable
                                            ]}
                                        ]},
                        {publish_properties, [ {delivery_mode, 2} ]},
                        {add_forward_headers, true},
                        {publish_fields, [ {exchange, <<"my_direct">>},
                                          {routing_key, <<"from_shovel">>}
                                          ]}
                          ]},
                    {ack_mode, on_confirm},
                    {reconnect_delay, 5}
                  ]}
              ]}
  ]}

----------------------------------------

TITLE: TLS Configuration for MQTT
DESCRIPTION: Example TLS configuration for secure MQTT connections

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/ca_certificate.pem
ssl_options.certfile   = /path/to/server_certificate.pem
ssl_options.keyfile    = /path/to/server_key.pem
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert  = true

mqtt.listeners.ssl.default = 8883
mqtt.listeners.tcp.default = 1883

----------------------------------------

TITLE: Emitting Logs with Direct Exchange in RabbitMQ using JavaScript
DESCRIPTION: This script creates a connection to RabbitMQ, sets up a direct exchange, and publishes a message with a specified severity as the routing key.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
  if (error0) {
    throw error0;
  }
  connection.createChannel(function(error1, channel) {
    if (error1) {
      throw error1;
    }
    var exchange = 'direct_logs';
    var args = process.argv.slice(2);
    var msg = args.slice(1).join(' ') || 'Hello World!';
    var severity = (args.length > 0) ? args[0] : 'info';

    channel.assertExchange(exchange, 'direct', {
      durable: false
    });
    channel.publish(exchange, severity, Buffer.from(msg));
    console.log(" [x] Sent %s: '%s'", severity, msg);
  });

  setTimeout(function() {
    connection.close();
    process.exit(0)
  }, 500);
});

----------------------------------------

TITLE: Launching Web Portal
DESCRIPTION: Command to start the web portal application that serves as the identity provider interface.

LANGUAGE: bash
CODE:
make start-portal

----------------------------------------

TITLE: Basic Consumer Setup in C#
DESCRIPTION: Setting up a message consumer using AsyncEventingBasicConsumer

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += async (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // copy or deserialise the payload
                    // and process the message
                    // ...
                    await channel.BasicAckAsync(ea.DeliveryTag, false);
                };
// this consumer tag identifies the subscription
// when it has to be cancelled
string consumerTag = await channel.BasicConsumeAsync(queueName, false, consumer);

----------------------------------------

TITLE: Starting RabbitMQ Docker Container with Stream Support
DESCRIPTION: Shell commands to start a RabbitMQ container with stream support and enable the stream plugin.

LANGUAGE: shell
CODE:
docker run -it --rm --name rabbitmq -p 5552:5552 \
    -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS='-rabbitmq_stream advertised_host localhost' \
    rabbitmq:3.9

LANGUAGE: shell
CODE:
docker exec rabbitmq rabbitmq-plugins enable rabbitmq_stream

----------------------------------------

TITLE: Example RabbitMQ Tracing Log Output in Text Format
DESCRIPTION: Demonstrates the human-readable text format for RabbitMQ tracing logs. It shows two log entries: one for a message being published and another for a message being received, including details such as timestamp, node, exchange, routing keys, and payload.

LANGUAGE: text
CODE:
================================================================================
2011-9-9 10:57:24: Message published

Node:         rabbit@smacmullen
Exchange:     direct
Routing keys: [<<"5d07bff4-1708-4a5d-87f9-a14177d6681b">>]
Properties:   []
Payload: 
Hello world

================================================================================
2011-9-9 10:57:24: Message received

Node:         rabbit@smacmullen
Exchange:     direct
Queue:        amq.gen-PJfnaKdg7AmsWmYTUeuApw==
Routing keys: [<<"5d07bff4-1708-4a5d-87f9-a14177d6681b">>]
Properties:   []
Payload: 
Hello world

================================================================================

----------------------------------------

TITLE: Rendering Erlang/OTP Logo with JSX
DESCRIPTION: This code snippet demonstrates how to render the Erlang/OTP logo using JSX, including inline CSS styles and an image source.

LANGUAGE: jsx
CODE:
<figure className="without-borders" style={{float: "right"}}>
![](https://www.erlang.org/assets/img/erlang-logo.svg)
<figcaption>Erlang/OTP logo</figcaption>
</figure>

----------------------------------------

TITLE: Basic Queue Binding in Swift
DESCRIPTION: Shows how to bind a queue to an exchange with and without routing keys

LANGUAGE: swift
CODE:
q.bind(exchange)

q.bind(exchange, routingKey: "black")

----------------------------------------

TITLE: Asynchronous Message Publishing with Puka in Python
DESCRIPTION: This snippet demonstrates how to publish a message asynchronously using Puka. It sends a 'Hello world!' message to the default exchange with the routing key 'test'.

LANGUAGE: python
CODE:
client.basic_publish(exchange='', routing_key='test',
                     body="Hello world!")

----------------------------------------

TITLE: Building Static Content for RabbitMQ Website
DESCRIPTION: Command to generate static website content into the build directory for production deployment.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Implementing Consumer Cancel Notification Handling in Java
DESCRIPTION: This code snippet demonstrates how to set up a consumer that can handle unexpected cancellations using RabbitMQ's Java client. It overrides the handleCancel method of the DefaultConsumer class to implement custom behavior when a consumer is cancelled unexpectedly.

LANGUAGE: Java
CODE:
channel.queueDeclare(queue, false, true, false, null);
Consumer consumer = new DefaultConsumer(channel) {
    @Override
    public void handleCancel(String consumerTag) throws IOException {
        // consumer has been cancelled unexpectedly
    }
};
channel.basicConsume(queue, consumer);

----------------------------------------

TITLE: Querying RabbitMQ Node Data Directory Location Using Bash
DESCRIPTION: Command to retrieve the RabbitMQ node data directory path from a running instance using rabbitmq-diagnostics. This is useful for locating data files for manual backup.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics status | grep -A 2 -B 2 "Node data directory"

----------------------------------------

TITLE: Viewing Erlang Crash Dump File Contents
DESCRIPTION: This command displays the first few lines of an Erlang crash dump file, which contain the termination reason (slogan) for the abnormal exit of the Erlang runtime system.

LANGUAGE: bash
CODE:
head -n 3 ./erl_crash.dump

----------------------------------------

TITLE: Initializing STOMP WebSocket Connection
DESCRIPTION: JavaScript code showing how to include the STOMP client library and establish a WebSocket connection

LANGUAGE: html
CODE:
<!-- include the client library -->
<script src="stomp.js"></script>

LANGUAGE: javascript
CODE:
var ws = new WebSocket('ws://127.0.0.1:15674/ws');
var client = Stomp.over(ws);

----------------------------------------

TITLE: Checking Stream Status in RabbitMQ
DESCRIPTION: Displays the status of a specified stream in a virtual host.

LANGUAGE: bash
CODE:
rabbitmq-streams stream_status --vhost "a-vhost" "a-stream"

----------------------------------------

TITLE: Configuring Prometheus Scraping Endpoint Timeouts
DESCRIPTION: Example configuration snippet for modifying Prometheus scraping endpoint timeouts in RabbitMQ.

LANGUAGE: ini
CODE:
prometheus.tcp.idle_timeout = 120000
prometheus.tcp.inactivity_timeout = 120000
prometheus.tcp.request_timeout = 120000

----------------------------------------

TITLE: Creating Erlang Cookie Secret
DESCRIPTION: Commands to create a Kubernetes secret for the Erlang cookie used in RabbitMQ node authentication

LANGUAGE: bash
CODE:
echo -n "this secret value is JUST AN EXAMPLE. Replace it!" > cookie
kubectl create secret generic erlang-cookie --from-file=./cookie

----------------------------------------

TITLE: SockJS Multiplexing Client Implementation
DESCRIPTION: Example showing how to implement multiplexing with SockJS on the client side using WebSocketMultiplex.

LANGUAGE: javascript
CODE:
var real_sockjs = new SockJS('/echo');

var multiplexer = new WebSocketMultiplex(real_sockjs);
var fake_sockjs_1 = multiplexer.channel('ann');
var fake_sockjs_2 = multiplexer.channel('bob');

----------------------------------------

TITLE: Importing RabbitMQ Server Version Component in JSX
DESCRIPTION: This code snippet imports the RabbitMQServerVersion component from a specific path. It's likely used to display the current RabbitMQ server version dynamically in the documentation.

LANGUAGE: jsx
CODE:
import {
  RabbitMQServerVersion,
} from '@site/src/components/RabbitMQServer';

----------------------------------------

TITLE: Declaring Direct Exchange in PHP
DESCRIPTION: Shows how to declare a direct exchange using php-amqplib, which is used for routing messages based on their routing key.

LANGUAGE: PHP
CODE:
$channel->exchange_declare('direct_logs', 'direct', false, false, false);

----------------------------------------

TITLE: RabbitMQ Kubernetes Operator Configuration
DESCRIPTION: YAML configuration for deploying RabbitMQ cluster using Kubernetes Operator, specifying resources, storage, and advanced configurations.

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: ...
spec:
  replicas: 1
  image: rabbitmq:3.11.7-management
  resources:
    requests:
      cpu: 14
      memory: 12Gi
    limits:
      cpu: 14
      memory: 12Gi
  persistence:
    storageClassName: premium-rwo
    storage: "150Gi"
  rabbitmq:
    advancedConfig: |
      [
      {rabbit, [
          {credit_flow_default_credit,{0,0}}
      ]}
      ].

----------------------------------------

TITLE: Implementing Topic-Based Log Reception in RabbitMQ with Objective-C
DESCRIPTION: Sets up a consumer that binds to a topic exchange with specified routing keys. Supports multiple binding patterns using * and # wildcards for flexible message filtering.

LANGUAGE: objectivec
CODE:
- (void)receiveLogsTopic:(NSArray *)routingKeys {
    RMQConnection *conn = [[RMQConnection alloc] initWithDelegate:[RMQConnectionDelegateLogger new]];
    [conn start];

    id<RMQChannel> ch = [conn createChannel];
    RMQExchange *x    = [ch topic:@"topic_logs"];
    RMQQueue *q       = [ch queue:@"" options:RMQQueueDeclareExclusive];

    for (NSString *routingKey in routingKeys) {
        [q bind:x routingKey:routingKey];
    }

    NSLog(@"Waiting for logs.");

    [q subscribe:^(RMQMessage * _Nonnull message) {
        NSLog(@"%@:%@", message.routingKey, [[NSString alloc] initWithData:message.body encoding:NSUTF8StringEncoding]);
    }];
}

----------------------------------------

TITLE: Creating a Binding with Routing Key in Elixir
DESCRIPTION: This snippet shows how to create a binding between a queue and an exchange with a specific routing key using the AMQP Elixir library.

LANGUAGE: elixir
CODE:
AMQP.Queue.bind(channel, queue_name, exchange_name, routing_key: "black")

----------------------------------------

TITLE: Checking Classic Queue Mirroring Policy in RabbitMQ
DESCRIPTION: Health check command to verify if there are any policies enabling classic queue mirroring in the cluster.

LANGUAGE: bash
CODE:
rabbitmq-queues check_if_cluster_has_classic_queue_mirroring_policy

----------------------------------------

TITLE: Publishing Messages with Stream PerfTest
DESCRIPTION: This command uses Stream PerfTest to publish messages with random filter values for 10 seconds.

LANGUAGE: shell
CODE:
java -jar stream-perf-test.jar --producers 1 --consumers 0 --rate 100 --filter-value-set 1..50 --size 10000 --time 10

----------------------------------------

TITLE: Required Host Entries Configuration
DESCRIPTION: DNS entries that need to be added to the /etc/hosts file to prevent DNS resolution errors in the browser.

LANGUAGE: plain
CODE:
localhost keycloak rabbitmq oauth2-proxy

----------------------------------------

TITLE: Installing RabbitMQ Java Client with Gradle
DESCRIPTION: Gradle dependency configuration for adding RabbitMQ Java Client version 4.0.0 to a project.

LANGUAGE: groovy
CODE:
compile 'com.rabbitmq:amqp-client:4.0.0'

----------------------------------------

TITLE: Single Active Consumer Queue Declaration
DESCRIPTION: Example showing how to enable Single Active Consumer mode when declaring a queue using the Java client, which ensures only one consumer processes messages at a time.

LANGUAGE: java
CODE:
Channel ch = ...;
Map<String, Object> arguments = new HashMap<String, Object>();
arguments.put("x-single-active-consumer", true);
ch.queueDeclare("my-queue", false, false, false, arguments);

----------------------------------------

TITLE: RabbitMQ Node Down Log Example in INI
DESCRIPTION: Example log message showing when a RabbitMQ node detects another node as unavailable due to net tick timeout.

LANGUAGE: ini
CODE:
2018-11-22 10:44:33.654 [info] node rabbit@peer-hostname down: net_tick_timeout

----------------------------------------

TITLE: AMQP URL Connection Configuration
DESCRIPTION: Shows how to use URL-based connection configuration instead of option hashes for AMQP.connect and AMQP.start.

LANGUAGE: ruby
CODE:
AMQP.start("amqps:/")

# Will resolve to: {vhost: "/", port: 5671, ssl: true}

AMQP.start("amqp://botanicus@localhost:1111/")

# Will resolve to: {user: "botanicus", vhost: "/", host: "localhost", port: 1111, ssl: false}

----------------------------------------

TITLE: Implementing QueueValidator Constraint in Kubernetes YAML
DESCRIPTION: This YAML defines an instance of the QueueValidator constraint. It specifies the RabbitMQ resources to be validated and sets the allowed RabbitMQ cluster name and vhost as parameters.

LANGUAGE: yaml
CODE:
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: QueueValidator
metadata:
  name: queue-validator
spec:
  match:
    kinds:
    - apiGroups: ["rabbitmq.com"]
      kinds: ["Queue"]
  parameters:
  - rabbit: my-rabbit-cluster
  - vhost: my-vhost

----------------------------------------

TITLE: Basic LDAP Backend Configuration
DESCRIPTION: Example configuration showing how to specify LDAP as the authentication backend

LANGUAGE: ini
CODE:
# use LDAP exclusively for authentication and authorisation
auth_backends.1 = ldap

----------------------------------------

TITLE: Configuring RabbitMQ Management Plugin Sample Retention
DESCRIPTION: Configuration snippet to set the sample retention policies for the management plugin.

LANGUAGE: ini
CODE:
management.sample_retention_policies.global.minute  = 5
management.sample_retention_policies.global.hour    = 60
management.sample_retention_policies.global.day = 1200

management.sample_retention_policies.basic.minute = 5
management.sample_retention_policies.basic.hour   = 60

management.sample_retention_policies.detailed.10 = 5

----------------------------------------

TITLE: Queue Declaration and Message Publishing
DESCRIPTION: Declaring a queue and publishing a message to it using the AMQP channel

LANGUAGE: go
CODE:
q, err := ch.QueueDeclare(
  "hello", // name
  false,   // durable
  false,   // delete when unused
  false,   // exclusive
  false,   // no-wait
  nil,     // arguments
)
failOnError(err, "Failed to declare a queue")

ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
defer cancel()

body := "Hello World!"
err = ch.PublishWithContext(ctx,
  "",     // exchange
  q.Name, // routing key
  false,  // mandatory
  false,  // immediate
  amqp.Publishing {
    ContentType: "text/plain",
    Body:        []byte(body),
  })
failOnError(err, "Failed to publish a message")
log.Printf(" [x] Sent %s\n", body)

----------------------------------------

TITLE: Enabling Implicit Connect for STOMP
DESCRIPTION: Configuration to allow STOMP clients to omit the CONNECT frame.

LANGUAGE: ini
CODE:
stomp.default_user = guest
stomp.default_pass = guest
stomp.implicit_connect = true

----------------------------------------

TITLE: Applying RabbitMQ Cluster Configuration
DESCRIPTION: Command to apply the RabbitMQ cluster configuration using kubectl. This creates a RabbitMQ cluster based on the specified YAML file.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml

----------------------------------------

TITLE: Configuring Preferred Username Claims in rabbitmq.conf
DESCRIPTION: Example configuration for setting preferred username claims in OAuth 2.0 token validation.

LANGUAGE: ini
CODE:
# ...
auth_oauth2.resource_server_id = rabbitmq
auth_oauth2.preferred_username_claims.1 = user_name
auth_oauth2.preferred_username_claims.2 = email
# ...

----------------------------------------

TITLE: Stream PerfTest Load Balancer Commands
DESCRIPTION: Shell commands demonstrating how to run the Stream PerfTest tool with load balancer configuration using both Java binary and Docker approaches.

LANGUAGE: shell
CODE:
# with the Java binary
java -jar stream-perf-test.jar --uris rabbitmq-stream://my-load-balancer:5552 --load-balancer

# with Docker
docker run -it --rm pivotalrabbitmq/stream-perf-test --uris rabbitmq-stream://my-load-balancer:5552 --load-balancer

----------------------------------------

TITLE: Queue Binding with Routing Key
DESCRIPTION: Creating a binding between a queue and exchange with a specific routing key.

LANGUAGE: objectivec
CODE:
[q bind:exchange routingKey:@"black"];

----------------------------------------

TITLE: RabbitMQ Cluster Deployment
DESCRIPTION: YAML configuration to deploy a 3-node RabbitMQ cluster using the cluster-operator

LANGUAGE: yaml
CODE:
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: my-rabbit
spec:
  replicas: 3
  image: rabbitmq:3.10.0-management

----------------------------------------

TITLE: Building RabbitMQ .NET Client on Windows
DESCRIPTION: PowerShell command to build the RabbitMQ .NET client on Windows. This performs code generation and builds a release version of the library.

LANGUAGE: powershell
CODE:
build.bat

----------------------------------------

TITLE: Reinstalling RabbitMQ Windows Service
DESCRIPTION: These PowerShell commands are used to reinstall the RabbitMQ Windows service after upgrading Erlang or changing environment variables.

LANGUAGE: PowerShell
CODE:
.\rabbitmq-service.bat remove
.\rabbitmq-service.bat install
.\rabbitmq-service.bat start

----------------------------------------

TITLE: Publishing Messages with AMQP 1.0 in Python
DESCRIPTION: Demonstrates how to create a publisher, construct a message, and publish it using the AMQP 1.0 Python client for RabbitMQ.

LANGUAGE: Python
CODE:
# create the message
message = Message(body="Hello")
# publish the message and deal with broker feedback
# The result is synchronous
status = publisher.publish(Message(message)
match status.remote_state:
    case OutcomeState.ACCEPTED:
        # the broker accepted (confirmed) the message
    case OutcomeState.RELEASED:
        # the broker could not route the message anywhere 
    case OutcomeState.REJECTED:
        # at least one queue rejected the message

----------------------------------------

TITLE: Authentication Attempts API Response - Detailed Source
DESCRIPTION: JSON response from the /api/auth/attempts/{node}/source endpoint showing detailed authentication attempts including source information.

LANGUAGE: json
CODE:
[{
   "remote_address":"127.0.0.1",
   "username":"guest",
   "protocol":"http",
   "auth_attempts":533,
   "auth_attempts_failed":0,
   "auth_attempts_succeeded":533
 },
 {
   "remote_address":"127.0.0.1",
   "username":"roger",
   "protocol":"amqp091",
   "auth_attempts":10,
   "auth_attempts_failed":10,
   "auth_attempts_succeeded":0
 },
 {
   "remote_address":"127.0.0.1",
   "username":"bugs",
   "protocol":"amqp091",
   "auth_attempts":2,
   "auth_attempts_failed":0,
   "auth_attempts_succeeded":2
 }]

----------------------------------------

TITLE: Installing vcprompt using Homebrew
DESCRIPTION: Command to install vcprompt package using the Homebrew package manager on MacOS.

LANGUAGE: shell
CODE:
$ brew install vcprompt

----------------------------------------

TITLE: Implementing a Log Emitter with Direct Exchange in Elixir
DESCRIPTION: This script demonstrates how to implement a log emitter using a direct exchange in Elixir. It parses command-line arguments for severity levels and messages, then publishes them to the appropriate routing key.

LANGUAGE: elixir
CODE:
{:ok, connection} = AMQP.Connection.open
{:ok, channel} = AMQP.Channel.open(connection)

{severities, raw_message, _} =
  System.argv
  |> OptionParser.parse(strict: [info:    :boolean,
                                 warning: :boolean,
                                 error:   :boolean])
  |> case do
    {[], msg, _} -> {[info: true], msg, []}
    other -> other
  end

message =
  case raw_message do
    []    -> "Hello World!"
    words -> Enum.join(words, " ")
  end

AMQP.Exchange.declare(channel, "direct_logs", :direct)

for {severity, true} <- severities do
  severity = severity |> to_string
  AMQP.Basic.publish(channel, "direct_logs", severity, message)
  IO.puts " [x] Sent '[#{severity}] #{message}'"
end

AMQP.Connection.close(connection)

----------------------------------------

TITLE: Configuring Raft WAL Size Limit for Quorum Queues in RabbitMQ
DESCRIPTION: Sets the maximum size of the Raft write-ahead log (WAL) file before it's flushed to disk. This affects how much message data quorum queues can keep in memory under steady load.

LANGUAGE: ini
CODE:
raft.wal_max_size_bytes = 32000000

----------------------------------------

TITLE: Managing Global Parameters in RabbitMQ
DESCRIPTION: Commands for managing global (virtual-host-independent) runtime parameters. Shows how to set, clear and list global parameters.

LANGUAGE: bash
CODE:
rabbitmqctl set_global_parameter <name> <value>

rabbitmqctl clear_global_parameter <name>

rabbitmqctl list_global_parameters

LANGUAGE: PowerShell
CODE:
rabbitmqctl.bat set_global_parameter <name> <value>

rabbitmqctl.bat clear_global_parameter <name>

rabbitmqctl.bat list_global_parameters

LANGUAGE: ini
CODE:
PUT /api/global-parameters/name
DELETE /api/global-parameters/name
GET /api/global-parameters

----------------------------------------

TITLE: Clearing Federation Policy
DESCRIPTION: Removes the federation policy to deactivate federation for the matching queues.

LANGUAGE: bash
CODE:
rabbitmqctl clear_policy queue-federation

----------------------------------------

TITLE: Declaring a Quorum Queue with rabbitmqadmin
DESCRIPTION: This command declares a new quorum queue named 'target.quorum.queue.name' in the 'events' virtual host.

LANGUAGE: shell
CODE:
rabbitmqadmin --vhost "events" declare queue --name "target.quorum.queue.name" --type "quorum" --durable true

----------------------------------------

TITLE: Field Type Definitions in AMQP 0-9-1
DESCRIPTION: Comparison of field type definitions between AMQP 0-9, 0-9-1 and Qpid/RabbitMQ implementations, highlighting incompatibilities and conflicts in type specifications.

LANGUAGE: text
CODE:
  0-9   0-9-1   Qpid/Rabbit  Type               Remarks
---------------------------------------------------------------------------
        t       t            Boolean
        b       b            Signed 8-bit
        B       B            Unsigned 8-bit
        U       s            Signed 16-bit      (A1)
        u       u            Unsigned 16-bit
  I     I       I            Signed 32-bit
        i       i            Unsigned 32-bit
        L       l            Signed 64-bit      (B)
        l                    Unsigned 64-bit
        f       f            32-bit float
        d       d            64-bit float
  D     D       D            Decimal
        s                    Short string       (A2)
  S     S       S            Long string
        A       A            Array              (C)
  T     T       T            Timestamp (u64)
  F     F       F            Nested Table
  V     V       V            Void
                x            Byte array         (D)

----------------------------------------

TITLE: Checking Log Location via CLI
DESCRIPTION: Commands to query log file location using rabbitmq-diagnostics across different shells.

LANGUAGE: bash
CODE:
rabbitmq-diagnostics -q log_location

LANGUAGE: PowerShell
CODE:
rabbitmq-diagnostics.bat -q log_location

LANGUAGE: batch
CODE:
rabbitmq-diagnostics.bat -q log_location

----------------------------------------

TITLE: Installing cert-manager in Kubernetes
DESCRIPTION: Command to install cert-manager version 1.3.1 in the Kubernetes cluster, which is a prerequisite for the cert-manager installation method.

LANGUAGE: bash
CODE:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.yaml

----------------------------------------

TITLE: Benchmarking Object Count in Ruby 1.9
DESCRIPTION: This snippet demonstrates how to use Object.count_objects for memory benchmarking in Ruby 1.9. It's used to compare memory usage between different AMQP implementations.

LANGUAGE: ruby
CODE:
Object.count_objects

----------------------------------------

TITLE: Topic Exchange Routing Key Pattern Examples
DESCRIPTION: Demonstrates pattern matching behavior for topic exchange routing keys using wildcards (* for single segment, # for multiple segments)

LANGUAGE: plaintext
CODE:
"regions.na.cities.*" -> matches "regions.na.cities.toronto", "regions.na.cities.newyork"
"audit.events.#" -> matches "audit.events.users.signup", "audit.events.orders.placed"
"#" -> matches any routing key

----------------------------------------

TITLE: Importing RabbitMQ Server Version Components in JSX
DESCRIPTION: This code snippet imports two components related to RabbitMQ server version information. These components are likely used to dynamically display the current RabbitMQ server version and release branch in the documentation.

LANGUAGE: jsx
CODE:
import {
    RabbitMQServerReleaseBranch,
    RabbitMQServerVersion,
} from '@site/src/components/RabbitMQServer';

----------------------------------------

TITLE: Publishing Messages with AMQP 0.9.1 Protocol
DESCRIPTION: Demonstrates publishing messages using the RabbitMQ AMQP 0.9.1 Java client with message properties and routing keys.

LANGUAGE: java
CODE:
channel.basicPublish(
  "events",  // exchange
  REGIONS[i % REGIONS.length], // routing key, round robin across regions
  new AMQP.BasicProperties.Builder()
    .messageId(String.valueOf(i)) // message ID
    .timestamp(new Date()) // creation time
    .contentType("text/plain") // content type
    .build(),
  ("message " + i).getBytes(StandardCharsets.UTF_8) // body
);

----------------------------------------

TITLE: Changing Log Level at Runtime in RabbitMQ
DESCRIPTION: Examples of how to change the log level at runtime using the rabbitmqctl CLI tool.

LANGUAGE: bash
CODE:
rabbitmqctl -n rabbit@target-host set_log_level debug
rabbitmqctl -n rabbit@target-host set_log_level info

----------------------------------------

TITLE: Installing RabbitMQ Java Client with Maven
DESCRIPTION: Maven dependency configuration for adding RabbitMQ Java Client version 4.0.0 to a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>amqp-client</artifactId>
    <version>4.0.0</version>
</dependency>

----------------------------------------

TITLE: Enabling Khepri Experimental Feature in RabbitMQ
DESCRIPTION: Command to enable the experimental Khepri feature in RabbitMQ 3.13. This is a non-reversible operation and should not be used in production without thorough testing.

LANGUAGE: bash
CODE:
rabbitmqctl enable_feature_flag khepri_db

----------------------------------------

TITLE: Configuring LDAP Servers in RabbitMQ
DESCRIPTION: Example configuration for specifying LDAP servers and port to be used by RabbitMQ.

LANGUAGE: ini
CODE:
auth_ldap.servers.1 = ldap.eng.megacorp.local
auth_ldap.servers.2 = 192.168.0.100

auth_ldap.port      = 6389

----------------------------------------

TITLE: Setting Channel Limits via HTTP API
DESCRIPTION: Demonstrates setting channel limits using curl commands against the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Binding Exchanges in RabbitMQ using Java
DESCRIPTION: This snippet demonstrates how to bind one exchange to another in RabbitMQ using the Java client. It uses the Channel#exchangeBind method to bind a destination exchange to a source exchange with a specific routing key.

LANGUAGE: java
CODE:
Channel ch = conn.createChannel();
ch.exchangeBind("destination", "source", "routingKey");

----------------------------------------

TITLE: Configuring Absolute Memory Threshold in RabbitMQ
DESCRIPTION: Examples of setting absolute memory limits using different memory units in RabbitMQ configuration.

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1073741824

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1024MiB

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 4Gi

LANGUAGE: ini
CODE:
vm_memory_high_watermark.absolute = 1Ti

----------------------------------------

TITLE: Setting Stream Filter Size in Java
DESCRIPTION: Shows how to configure the Bloom filter size when creating a stream using the RabbitMQ stream Java client. The filter size can be set between 16 and 255 bytes.

LANGUAGE: java
CODE:
environment.streamCreator()
  .stream("invoices")
  .filterSize(32)
  .create()

----------------------------------------

TITLE: Finding Mirrored Classic Queues Bash Script
DESCRIPTION: Script to find all mirrored classic queues across all virtual hosts using rabbitmqctl

LANGUAGE: bash
CODE:
#!/bin/sh
printf "%s\t%s\t%s\n" vhost queue_name mirrors
for vhost in $(rabbitmqctl -q list_vhosts | tail -n +2) ; do
  rabbitmqctl -q list_queues -p "$vhost" name durable policy effective_policy_definition arguments mirror_pids type |
	sed -n '/\t\[[^\t]\+\tclassic$/{s/\t\[[^\t]\+\tclassic$//; p}' |
	xargs -x -r -L1 -d '\n' printf "%s\t%s\n" "$vhost"
done

----------------------------------------

TITLE: Configuring Web STOMP TLS Settings
DESCRIPTION: Configuration example for TLS/SSL settings including port, certificates, and security options.

LANGUAGE: ini
CODE:
web_stomp.ssl.port       = 15673
web_stomp.ssl.backlog    = 1024
web_stomp.ssl.cacertfile = /path/to/ca_certificate.pem
web_stomp.ssl.certfile   = /path/to/server_certificate.pem
web_stomp.ssl.keyfile    = /path/to/server_key.pem
web_stomp.ssl.password   = changeme

----------------------------------------

TITLE: Creating RabbitMQ Channel
DESCRIPTION: Code to create a channel for communication with RabbitMQ.

LANGUAGE: ruby
CODE:
channel = connection.create_channel

----------------------------------------

TITLE: OAuth Discovery Endpoint Error Example
DESCRIPTION: Example error message when OpenID Connect Discovery endpoint is not reachable or properly configured.

LANGUAGE: json
CODE:
OAuth resource [rabbitmq] not available. OpenId Discovery endpoint https://<the_issuer_url>/.well-known/openid-configuration not reachable

----------------------------------------

TITLE: Enabling STOMP Plugin in RabbitMQ CLI
DESCRIPTION: Command to enable the STOMP plugin using rabbitmq-plugins CLI tool.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_stomp

----------------------------------------

TITLE: Setting RabbitMQ Cluster Name in Bash
DESCRIPTION: Command to set a custom cluster name for federation identification

LANGUAGE: bash
CODE:
rabbitmqctl set_cluster_name "east1-production"

----------------------------------------

TITLE: Setting ERL_SSL_PATH in RabbitMQ Environment Configuration
DESCRIPTION: Infers the Erlang TLS library path and sets it as ERL_SSL_PATH in the RabbitMQ environment configuration file.

LANGUAGE: bash
CODE:
erl -noinput -eval 'io:format("ERL_SSL_PATH=~s~n", [filename:dirname(code:which(inet_tls_dist))])' -s init stop > /tmp/ssl-path.txt
cat /tmp/ssl-path.txt /etc/rabbitmq/rabbitmq-env.conf > /tmp/new-rabbitmq-env.conf
mv -f /tmp/new-rabbitmq-env.conf /etc/rabbitmq/rabbitmq-env.conf

----------------------------------------

TITLE: Opening a Channel in Java
DESCRIPTION: Example of opening a new channel with an automatically allocated channel ID after opening a new connection using the RabbitMQ Java client.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();
Connection conn = cf.createConnection();

Channel ch = conn.createChannel();

// ... use the channel to declare topology, publish, consume

----------------------------------------

TITLE: Opening a Channel in Java
DESCRIPTION: Example of opening a new channel with an automatically allocated channel ID after opening a new connection using the RabbitMQ Java client.

LANGUAGE: java
CODE:
ConnectionFactory cf = new ConnectionFactory();
Connection conn = cf.createConnection();

Channel ch = conn.createChannel();

// ... use the channel to declare topology, publish, consume

----------------------------------------

TITLE: Adding a User with Special Characters
DESCRIPTION: Shows how to add a user with a password containing special characters using the double hyphen separator.

LANGUAGE: bash
CODE:
rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "--!a-pa$$w0rd"

----------------------------------------

TITLE: Adding a User with Special Characters
DESCRIPTION: Shows how to add a user with a password containing special characters using the double hyphen separator.

LANGUAGE: bash
CODE:
rabbitmqctl add_user --node rabbit@host1.messaging.eng.coolcorporation.banana -- "a-user" "--!a-pa$$w0rd"

----------------------------------------

TITLE: Building RabbitMQ Java Client
DESCRIPTION: Maven command to build the RabbitMQ Java client library. The command cleans previous builds, packages the library, and skips tests. The deps.dir parameter points to the directory containing the codegen repository.

LANGUAGE: bash
CODE:
cd rabbitmq-java-client

./mvnw clean package -Ddeps.dir=../ -DskipTests

----------------------------------------

TITLE: Negatively Acknowledging Multiple Deliveries in C#
DESCRIPTION: Example of how to negatively acknowledge multiple deliveries at once using the RabbitMQ .NET client. All unacknowledged deliveries up to the specified delivery tag will be requeued.

LANGUAGE: csharp
CODE:
var consumer = new EventingBasicConsumer(channel);
consumer.Received += (ch, ea) =>
                {
                    var body = ea.Body.ToArray();
                    // requeue all unacknowledged deliveries up to
                    // this delivery tag
                    channel.BasicNack(ea.DeliveryTag, true, true);
                };
String consumerTag = channel.BasicConsume(queueName, false, consumer);

----------------------------------------

TITLE: Logging Disk Space Monitoring Activation in RabbitMQ
DESCRIPTION: This snippet shows the log entries generated when RabbitMQ enables free disk space monitoring. It includes the timestamp, log level, and the configured disk free limit.

LANGUAGE: ini
CODE:
2019-04-01 12:02:11.564 [info] <0.329.0> Enabling free disk space monitoring
2019-04-01 12:02:11.564 [info] <0.329.0> Disk free limit set to 950MB

----------------------------------------

TITLE: Referencing Connection Close Command in RabbitMQ
DESCRIPTION: This snippet shows how RabbitMQ refers to the 'connection.close' command, which is sent to clients with the 'authentication_failure_close' capability to indicate an authentication failure.

LANGUAGE: markdown
CODE:
<code>connection.close</code>

----------------------------------------

TITLE: Referencing Access Refused Error in RabbitMQ
DESCRIPTION: This snippet demonstrates how RabbitMQ refers to the 'ACCESS_REFUSED' error, which is used as the reason in the 'connection.close' command when an authentication failure occurs.

LANGUAGE: markdown
CODE:
<code>ACCESS_REFUSED</code>

----------------------------------------

TITLE: Setting Maximum Channels Limit using curl and HTTP API
DESCRIPTION: This curl command sets a limit of 20 maximum channels for user1 using the RabbitMQ HTTP API.

LANGUAGE: bash
CODE:
curl -v -u guest:guest -X PUT http://localhost:15672/api/user-limits/user1/max-channels \
                       -H "content-type: application/json" \
                       -d @- <<EOF
{
  "value": 20
}
EOF

----------------------------------------

TITLE: Configuring TLS Support for Stream Plugin
DESCRIPTION: Configuration for enabling TLS support with certificate paths and verification options.

LANGUAGE: ini
CODE:
ssl_options.cacertfile = /path/to/tls/ca_certificate.pem
ssl_options.certfile   = /path/to/tls/server_certificate.pem
ssl_options.keyfile    = /path/to/tls/server_key.pem
ssl_options.verify     =  verify_peer
ssl_options.fail_if_no_peer_cert = true

stream.listeners.tcp.1 = 5552
stream.listeners.ssl.1 = 5551

----------------------------------------

TITLE: Executing RabbitMQ Upgrade Command
DESCRIPTION: Syntax for running the rabbitmq-upgrade command with various options and subcommands. The command allows specifying a node, timeout, and other flags to control output verbosity.

LANGUAGE: shell
CODE:
rabbitmq-upgrade [-q] [-s] [-l] [-n node] [-t timeout] command [command_options]

----------------------------------------

TITLE: Listing Stream Consumer Groups in RabbitMQ
DESCRIPTION: Lists groups of stream single active consumers for a vhost, allowing specification of group information items to display.

LANGUAGE: bash
CODE:
rabbitmq-streams list_stream_consumer_groups stream reference consumers

----------------------------------------

TITLE: Enabling RabbitMQ Plugins
DESCRIPTION: Command to enable specified plugins and their dependencies. Example shows enabling the shovel and management plugins.

LANGUAGE: bash
CODE:
rabbitmq-plugins enable rabbitmq_shovel rabbitmq_management

----------------------------------------

TITLE: Configuring RabbitMQ Config File Location
DESCRIPTION: Example configuration that sets a custom path for the RabbitMQ configuration file using the CONFIG_FILE variable in rabbitmq-env.conf.

LANGUAGE: bash
CODE:
# I am a complete rabbitmq-env.conf file.
# Comment lines start with a hash character.
# This is a /bin/sh script file - use ordinary envt var syntax
CONFIG_FILE=/data/services/rabbitmq/rabbitmq.conf

----------------------------------------

TITLE: Rich Authorization Request Token Example
DESCRIPTION: Sample JWT token using Rich Authorization Request format for fine-grained permissions

LANGUAGE: javascript
CODE:
{
  "authorization_details": [
    {
      "type" : "rabbitmq",
      "locations": ["cluster:finance/vhost:production-*"],
      "actions": [ "read", "write", "configure"  ]
    },
    {
      "type" : "rabbitmq",
      "locations": ["cluster:finance", "cluster:inventory" ],
      "actions": ["administrator" ]
    }
  ]
}

----------------------------------------

TITLE: Configuring DLX Using Queue Arguments in Java
DESCRIPTION: Java code demonstrating how to declare a queue with Dead Letter Exchange configuration using optional queue arguments. Shows both exchange declaration and queue setup with DLX arguments.

LANGUAGE: java
CODE:
channel.exchangeDeclare("some.exchange.name", "direct");

Map<String, Object> args = new HashMap<String, Object>();
args.put("x-dead-letter-exchange", "some.exchange.name");
channel.queueDeclare("myqueue", false, false, false, args);

----------------------------------------

TITLE: Setting net_ticktime in Windows Environment
DESCRIPTION: This batch script sets the net_ticktime kernel parameter for RabbitMQ on Windows using an environment variable.

LANGUAGE: PowerShell
CODE:
@echo off
set SERVER_ADDITIONAL_ERL_ARGS=-kernel net_ticktime 120