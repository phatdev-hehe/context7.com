TITLE: Python Version Management
DESCRIPTION: Demonstrates uv's Python version management capabilities including installing multiple versions and switching between them

LANGUAGE: console
CODE:
$ uv python install 3.10 3.11 3.12
Searching for Python versions matching: Python 3.10
Searching for Python versions matching: Python 3.11
Searching for Python versions matching: Python 3.12
Installed 3 versions in 3.42s
 + cpython-3.10.14-macos-aarch64-none
 + cpython-3.11.9-macos-aarch64-none
 + cpython-3.12.4-macos-aarch64-none

----------------------------------------

TITLE: Project Management with uv
DESCRIPTION: Series of commands demonstrating uv's project management capabilities including initialization, adding dependencies, and running tools.

LANGUAGE: shell
CODE:
$ uv init example
$ cd example
$ uv add ruff
$ uv run ruff check
$ uv lock
$ uv sync

----------------------------------------

TITLE: Adding a Platform-Specific Dependency
DESCRIPTION: This snippet demonstrates how to add a dependency that is only installed on a specific platform. It adds the 'jax' package only for Linux systems.

LANGUAGE: console
CODE:
$ uv add "jax; sys_platform == 'linux'"

----------------------------------------

TITLE: Using a Virtual Environment with uv
DESCRIPTION: Shows how to use a newly created virtual environment with uv, including installing packages and activating the environment on different operating systems.

LANGUAGE: console
CODE:
$ uv venv

$ # Install a package in the new virtual environment
$ uv pip install ruff

LANGUAGE: console
CODE:
$ source .venv/bin/activate

LANGUAGE: console
CODE:
$ .venv\Scripts\activate

----------------------------------------

TITLE: Installing packages with uv pip
DESCRIPTION: Demonstrates various ways to install packages using uv pip, including basic installation, installing with extras, multiple packages, version constraints, and from different sources.

LANGUAGE: console
CODE:
$ uv pip install flask

LANGUAGE: console
CODE:
$ uv pip install "flask[dotenv]"

LANGUAGE: console
CODE:
$ uv pip install flask ruff

LANGUAGE: console
CODE:
$ uv pip install 'ruff>=0.2.0'

LANGUAGE: console
CODE:
$ uv pip install 'ruff==0.3.0'

LANGUAGE: console
CODE:
$ uv pip install "ruff @ ./projects/ruff"

LANGUAGE: console
CODE:
$ uv pip install "git+https://github.com/astral-sh/ruff"

LANGUAGE: console
CODE:
$ # Install a tag
$ uv pip install "git+https://github.com/astral-sh/ruff@v0.2.0"

$ # Install a commit
$ uv pip install "git+https://github.com/astral-sh/ruff@1fadefa67b26508cc59cf38e6130bde2243c929d"

$ # Install a branch
$ uv pip install "git+https://github.com/astral-sh/ruff@main"

----------------------------------------

TITLE: Creating a New Python Project with uv
DESCRIPTION: Demonstrates how to create a new Python project using the 'uv init' command. It shows two methods: creating a new directory and initializing within an existing directory.

LANGUAGE: console
CODE:
$ uv init hello-world
$ cd hello-world

LANGUAGE: console
CODE:
$ mkdir hello-world
$ cd hello-world
$ uv init

----------------------------------------

TITLE: Managing Dependencies with uv
DESCRIPTION: Demonstrates how to add, remove, and upgrade dependencies using uv commands. It covers adding specific versions, git dependencies, and importing from requirements.txt.

LANGUAGE: console
CODE:
$ uv add requests
$ uv add 'requests==2.31.0'
$ uv add git+https://github.com/psf/requests
$ uv add -r requirements.txt -c constraints.txt
$ uv remove requests
$ uv lock --upgrade-package requests

----------------------------------------

TITLE: Installing packages from files with uv pip
DESCRIPTION: Demonstrates how to install packages from requirements.txt and pyproject.toml files, including options for extras and dependency groups.

LANGUAGE: console
CODE:
$ uv pip install -r requirements.txt

LANGUAGE: console
CODE:
$ uv pip install -r pyproject.toml

LANGUAGE: console
CODE:
$ uv pip install -r pyproject.toml --extra foo

LANGUAGE: console
CODE:
$ uv pip install -r pyproject.toml --all-extras

LANGUAGE: console
CODE:
$ uv pip install --group foo

LANGUAGE: console
CODE:
$ uv pip install --project some/path/ --group foo --group bar

LANGUAGE: console
CODE:
$ uv pip install --group some/path/pyproject.toml:foo --group other/pyproject.toml:bar

----------------------------------------

TITLE: Verifying UV Installation via Command Line
DESCRIPTION: Shows how to verify UV installation by running the basic command which displays the help menu and available commands.

LANGUAGE: console
CODE:
$ uv
An extremely fast Python package manager.

Usage: uv [OPTIONS] <COMMAND>

...

----------------------------------------

TITLE: Project Management Example
DESCRIPTION: Demonstrates basic project management workflows with uv including initialization, adding dependencies, running tools and managing lockfiles

LANGUAGE: console
CODE:
$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms

----------------------------------------

TITLE: Configuring Limited Resolution Environments in pyproject.toml
DESCRIPTION: Example showing how to configure the environments setting to constrain package resolution to specific platforms like macOS and Linux.

LANGUAGE: toml
CODE:
[tool.uv]
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
]

----------------------------------------

TITLE: Project Structure in pyproject.toml
DESCRIPTION: Illustrates the basic structure of a pyproject.toml file, which contains project metadata and dependencies.

LANGUAGE: toml
CODE:
[project]
name = "hello-world"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
dependencies = []

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: Demonstrates how to create a virtual environment using uv's 'venv' command. It shows the default behavior and how to specify a custom name or Python version.

LANGUAGE: console
CODE:
$ uv venv

LANGUAGE: console
CODE:
$ uv venv my-name

LANGUAGE: console
CODE:
$ uv venv --python 3.11

----------------------------------------

TITLE: Defining Dependencies in pyproject.toml
DESCRIPTION: This snippet shows how to declare project dependencies in a pyproject.toml file. It includes examples of both regular and optional dependencies, which can be installed using --extra and --all-extras flags or package[<extra>] syntax.

LANGUAGE: toml
CODE:
[project]
dependencies = [
  "httpx",
  "ruff>=0.3.0"
]

LANGUAGE: toml
CODE:
[project.optional-dependencies]
cli = [
  "rich",
  "click",
]

----------------------------------------

TITLE: Managing Python Versions
DESCRIPTION: Commands showing uv's Python version management capabilities including installation and environment creation.

LANGUAGE: shell
CODE:
$ uv python install 3.10 3.11 3.12
$ uv venv --python 3.12.0
$ uv python pin 3.11

----------------------------------------

TITLE: Declaring Dependencies in requirements.in
DESCRIPTION: This snippet demonstrates how to define project dependencies using a requirements.in file. Each requirement is listed on a separate line. This format is a lightweight alternative to pyproject.toml but does not support optional dependency groups.

LANGUAGE: python
CODE:
httpx
ruff>=0.3.0

----------------------------------------

TITLE: Upgrading All Packages in uv
DESCRIPTION: Shows how to upgrade all packages to their latest versions within the project's dependency constraints using the --upgrade flag with uv lock.

LANGUAGE: console
CODE:
$ uv lock --upgrade

----------------------------------------

TITLE: Installing UV via Standalone Installer on Unix Systems
DESCRIPTION: Commands for downloading and installing UV using curl or wget on macOS and Linux systems. Includes options for specific version installation.

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/install.sh | sh

LANGUAGE: console
CODE:
$ wget -qO- https://astral.sh/uv/install.sh | sh

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/0.6.11/install.sh | sh

----------------------------------------

TITLE: Basic Application Project Structure
DESCRIPTION: Shows the directory structure created by UV for a basic application project.

LANGUAGE: console
CODE:
$ tree example-app
example-app
├── .python-version
├── README.md
├── main.py
└── pyproject.toml

----------------------------------------

TITLE: Packaged Application PyProject Configuration
DESCRIPTION: Extended pyproject.toml configuration for a packaged application with build system and entry points.

LANGUAGE: toml
CODE:
[project]
name = "example-pkg"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[project.scripts]
example-pkg = "example_pkg:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

----------------------------------------

TITLE: Disabling Automatic Project Environment Management in uv
DESCRIPTION: This configuration snippet demonstrates how to disable uv's automatic management of the project environment. By setting 'managed = false', users can prevent uv from automatically locking and syncing the project.

LANGUAGE: toml
CODE:
[tool.uv]
managed = false

----------------------------------------

TITLE: Defining Optional Dependencies
DESCRIPTION: This snippet demonstrates how to define optional dependencies in the pyproject.toml file. It includes examples for 'plot' and 'excel' extras in a hypothetical pandas project.

LANGUAGE: toml
CODE:
[project]
name = "pandas"
version = "1.0.0"

[project.optional-dependencies]
plot = [
  "matplotlib>=3.6.3"
]
excel = [
  "odfpy>=1.4.1",
  "openpyxl>=3.1.0",
  "python-calamine>=0.1.7",
  "pyxlsb>=1.0.10",
  "xlrd>=2.0.1",
  "xlsxwriter>=3.0.5"
]

----------------------------------------

TITLE: Installing Specific Python Version with uv
DESCRIPTION: This snippet shows how to install a specific Python version (3.12) using uv. It uses the 'uv python install' command followed by the desired version number.

LANGUAGE: console
CODE:
$ uv python install 3.12

----------------------------------------

TITLE: Running Commands in Project Environment
DESCRIPTION: Shows how to run commands and scripts within the project's virtual environment using 'uv run' or by activating the environment manually.

LANGUAGE: console
CODE:
$ uv add flask
$ uv run -- flask run -p 3000

LANGUAGE: console
CODE:
$ uv run example.py

----------------------------------------

TITLE: Installing Python Tools
DESCRIPTION: Demonstrates how to install a Python tool for persistent use. This example installs the 'ruff' tool.

LANGUAGE: console
CODE:
$ uv tool install ruff

----------------------------------------

TITLE: Handling Multiple Python Versions with uv in GitHub Actions
DESCRIPTION: This snippet demonstrates how to use a matrix strategy to test multiple Python versions with uv in GitHub Actions. It shows setting the Python version using astral-sh/setup-uv or the UV_PYTHON environment variable.

LANGUAGE: yaml
CODE:
jobs:
  build:
    name: continuous-integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

jobs:
  build:
    name: continuous-integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
    env:
      UV_PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4

----------------------------------------

TITLE: Installing uv on macOS/Linux
DESCRIPTION: Command to install uv using curl on macOS and Linux systems via the standalone installer

LANGUAGE: bash
CODE:
curl -LsSf https://astral.sh/uv/install.sh | sh

----------------------------------------

TITLE: Uninstalling packages with uv pip
DESCRIPTION: Shows how to uninstall single or multiple packages using uv pip.

LANGUAGE: console
CODE:
$ uv pip uninstall flask

LANGUAGE: console
CODE:
$ uv pip uninstall flask ruff

----------------------------------------

TITLE: Creating or Updating Lockfile in uv
DESCRIPTION: Shows how to explicitly create or update the lockfile using the uv lock command. This can be useful when you want to ensure the lockfile is up-to-date without running other commands.

LANGUAGE: console
CODE:
$ uv lock

----------------------------------------

TITLE: Including Additional Dependencies for Tool Installation (Python)
DESCRIPTION: Shows how to include additional packages when installing a tool using uv tool install with the --with option.

LANGUAGE: console
CODE:
$ uv tool install --with <extra-package> <tool-package>

----------------------------------------

TITLE: Syncing Environment in uv
DESCRIPTION: Demonstrates how to explicitly sync the environment using the uv sync command. This is useful for ensuring your editor has the correct versions of dependencies.

LANGUAGE: console
CODE:
$ uv sync

----------------------------------------

TITLE: Upgrading Specific Package in uv
DESCRIPTION: Demonstrates how to upgrade a single package to its latest version while retaining locked versions of other packages using the --upgrade-package option with uv lock.

LANGUAGE: console
CODE:
$ uv lock --upgrade-package <package>

----------------------------------------

TITLE: Optimizing Docker builds with uv intermediate layers
DESCRIPTION: Shows how to optimize Docker builds by using intermediate layers with uv. This approach separates dependency installation from project installation to improve build times.

LANGUAGE: dockerfile
CODE:
# Install uv
FROM python:3.12-slim
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Change the working directory to the `app` directory
WORKDIR /app

# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project

# Copy the project into the image
ADD . /app

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen

----------------------------------------

TITLE: Creating a Jupyter Kernel for a uv Project
DESCRIPTION: This command creates a Jupyter kernel for the current project, using the project's virtual environment managed by uv.

LANGUAGE: console
CODE:
$ uv run ipython kernel install --user --env VIRTUAL_ENV $(pwd)/.venv --name=project

----------------------------------------

TITLE: Using pip-compatible Interface
DESCRIPTION: Examples of using uv's pip-compatible interface for managing requirements and virtual environments.

LANGUAGE: shell
CODE:
$ uv pip compile docs/requirements.in \
   --universal \
   --output-file docs/requirements.txt
$ uv venv
$ uv pip sync docs/requirements.txt

----------------------------------------

TITLE: Running uv in a Debian-based Docker container
DESCRIPTION: Demonstrates how to run uv in a Docker container using a Debian-based image. This command executes the uv help command within the container.

LANGUAGE: console
CODE:
$ docker run --rm -it ghcr.io/astral-sh/uv:debian uv --help

----------------------------------------

TITLE: Sample requirements.in File
DESCRIPTION: Basic requirements input file specifying Flask dependency.

LANGUAGE: python
CODE:
flask>=2.0.0

----------------------------------------

TITLE: Library Module Implementation
DESCRIPTION: Simple library module implementation with type hints.

LANGUAGE: python
CODE:
def hello() -> str:
    return "Hello from example-lib!"

----------------------------------------

TITLE: Running a Python Script with External Dependencies using uv
DESCRIPTION: Demonstrates how to run a Python script that requires external packages, using the --with option to specify dependencies.

LANGUAGE: python
CODE:
import time
from rich.progress import track

for i in track(range(20), description="For example:"):
    time.sleep(0.05)

LANGUAGE: console
CODE:
$ uv run --with rich example.py
For example: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:01

----------------------------------------

TITLE: Installing UV via Standalone Installer on Windows
DESCRIPTION: PowerShell commands for downloading and installing UV on Windows systems, including version-specific installation.

LANGUAGE: console
CODE:
$ powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"

LANGUAGE: console
CODE:
$ powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/0.6.11/install.ps1 | iex"

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Lists required Python packages with version specifications. Includes fixed versions for inflection and upsidedown, an unversioned numpy requirement, and a constrained pandas requirement with the tabulate extra.

LANGUAGE: text
CODE:
inflection==0.5.1
upsidedown==0.4
numpy
pandas[tabulate]>=1,<2

----------------------------------------

TITLE: Locking Dependencies from pyproject.toml
DESCRIPTION: Command to compile and lock dependencies from pyproject.toml into requirements.txt

LANGUAGE: console
CODE:
$ uv pip compile pyproject.toml -o requirements.txt

----------------------------------------

TITLE: Running Tools with Additional Dependencies
DESCRIPTION: Shows how to include additional dependencies when running a tool using the --with option. This example runs 'mkdocs' with the 'mkdocs-material' package.

LANGUAGE: console
CODE:
$ uvx --with mkdocs-material mkdocs --help

----------------------------------------

TITLE: Editable Installation with Environment Markers
DESCRIPTION: Editable installation with Python version and OS constraints. Demonstrates both compact and whitespace-separated extras formats.

LANGUAGE: ini
CODE:
-e ./editable[d,dev] ; python_version >= "3.9" and os_name == "posix"
-e ./editable[d, dev] ; python_version >= "3.9" and os_name == "posix"
-e ./editable ; python_version >= "3.9" and os_name == "posix"

----------------------------------------

TITLE: Listing Python Versions
DESCRIPTION: Commands for listing available and installed Python versions with various filtering options.

LANGUAGE: console
CODE:
$ uv python list
$ uv python list 3.13
$ uv python list pypy
$ uv python list --all-versions
$ uv python list --all-platforms
$ uv python list --only-installed

----------------------------------------

TITLE: Publishing a Package with uv
DESCRIPTION: Demonstrates the command to publish a built package using uv. This command uploads the package to a package index like PyPI.

LANGUAGE: console
CODE:
$ uv publish

----------------------------------------

TITLE: Adding a Dependency with uv
DESCRIPTION: This snippet demonstrates how to add a dependency using the uv command-line tool. It adds the 'httpx' package to the project dependencies.

LANGUAGE: console
CODE:
$ uv add httpx

----------------------------------------

TITLE: Displaying uv Tool Directory (Python)
DESCRIPTION: Demonstrates how to display the path to the uv tool installation directory using the uv tool dir command.

LANGUAGE: console
CODE:
$ uv tool dir

----------------------------------------

TITLE: Installing Multiple Python Versions with uv
DESCRIPTION: This snippet demonstrates how to install multiple Python versions (3.11 and 3.12) simultaneously using uv. It uses the 'uv python install' command followed by multiple version numbers.

LANGUAGE: console
CODE:
$ uv python install 3.11 3.12

----------------------------------------

TITLE: Inspecting Specific Packages with uv
DESCRIPTION: Command to show detailed information about a specific installed package using uv. The example uses 'numpy', but multiple packages can be inspected at once.

LANGUAGE: console
CODE:
$ uv pip show numpy

----------------------------------------

TITLE: Specifying 'black' Package Dependencies in Various Formats
DESCRIPTION: This snippet demonstrates different ways to specify the 'black' package as a dependency, including relative paths, file URIs, and version constraints. It showcases various formats that might be used in a requirements file or package configuration.

LANGUAGE: plaintext
CODE:
./scripts/packages/black_editable
./scripts/packages/black_editable[dev]
file:///scripts/packages/black_editable
./scripts/packages/black editable
./scripts/packages/black editable ; python_version >= "3.9"
./scripts/packages/black editable # comment

----------------------------------------

TITLE: Listing Available and Installed Python Versions with uv
DESCRIPTION: This snippet shows how to view available and installed Python versions using uv. It uses the 'uv python list' command to display this information.

LANGUAGE: console
CODE:
$ uv python list

----------------------------------------

TITLE: Installing uv with custom path on macOS and Linux
DESCRIPTION: This snippet demonstrates how to install uv to a custom path on macOS and Linux systems using the UV_INSTALL_DIR environment variable.

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR="/custom/path" sh

----------------------------------------

TITLE: Setting Python Version Requirement in TOML
DESCRIPTION: Example showing how to set Python version requirement in pyproject.toml using the requires-python field.

LANGUAGE: toml
CODE:
[project]
name = "example"
version = "0.1.0"
requires-python = ">=3.12"

----------------------------------------

TITLE: Including Additional Dependencies for Tool Execution (Python)
DESCRIPTION: Demonstrates how to include additional packages when executing a tool using uvx with the --with option.

LANGUAGE: console
CODE:
$ uvx --with <extra-package> <tool>

----------------------------------------

TITLE: Comparing Installed and uvx Versions of Ruff (Python)
DESCRIPTION: Demonstrates that after installation, both the system-wide ruff command and uvx ruff use the same installed version.

LANGUAGE: console
CODE:
$ ruff --version
ruff 0.5.0
$ uvx ruff --version
ruff 0.5.0

----------------------------------------

TITLE: Project Dependencies Configuration
DESCRIPTION: Configuration file defining project dependencies including FastAPI and Mangum for AWS Lambda integration

LANGUAGE: toml
CODE:
[project]
name = "uv-aws-lambda-example"
version = "0.1.0"
requires-python = ">=3.13"
dependencies = [
    # FastAPI is a modern web framework for building APIs with Python.
    "fastapi",
    # Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.
    "mangum",
]

[dependency-groups]
dev = [
    # In development mode, include the FastAPI development server.
    "fastapi[standard]>=0.115",
]

----------------------------------------

TITLE: Command Line Argument Formatting
DESCRIPTION: Shows the correct format for command line arguments with values using spaces instead of equals signs.

LANGUAGE: console
CODE:
--resolution lowest

----------------------------------------

TITLE: Specifying Package Versions with --from
DESCRIPTION: Shows how to use the --from option to specify package versions when running a tool. This example runs 'ruff' version 0.3.0.

LANGUAGE: console
CODE:
$ uvx --from 'ruff==0.3.0' ruff check

----------------------------------------

TITLE: Configuring pre-commit for pip-compile in YAML
DESCRIPTION: This snippet shows how to add a pre-commit hook to compile requirements using pip-compile with uv.

LANGUAGE: yaml
CODE:
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.11
    hooks:
      # Compile requirements
      - id: pip-compile
        args: [requirements.in, -o, requirements.txt]

----------------------------------------

TITLE: Basic Application PyProject Configuration
DESCRIPTION: Basic pyproject.toml configuration for a simple application project.

LANGUAGE: toml
CODE:
[project]
name = "example-app"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

----------------------------------------

TITLE: Displaying uv install script options
DESCRIPTION: This command shows how to view the available options for the uv install script by passing the --help flag directly to the script.

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/install.sh | sh -s -- --help

----------------------------------------

TITLE: Running uv Without Syncing
DESCRIPTION: Shows how to use the --no-sync option to run a command without checking if the environment is up-to-date. This can be useful for faster execution when you're certain the environment is correct.

LANGUAGE: console
CODE:
$ uv run --no-sync ...

----------------------------------------

TITLE: Using uv pip in GitHub Actions
DESCRIPTION: This snippet shows how to use the uv pip interface in GitHub Actions workflows. It demonstrates setting the UV_SYSTEM_PYTHON variable at different scopes to allow installing packages into the system environment.

LANGUAGE: yaml
CODE:
env:
  UV_SYSTEM_PYTHON: 1

jobs: ...

jobs:
  install_job:
    env:
      UV_SYSTEM_PYTHON: 1
    ...

steps:
  - name: Install requirements
    run: uv pip install -r requirements.txt
    env:
      UV_SYSTEM_PYTHON: 1

----------------------------------------

TITLE: Installing a Specific Version of Ruff with uv tool install (Python)
DESCRIPTION: Shows how to install a specific version of Ruff using uv tool install, which makes the tool available on the system PATH.

LANGUAGE: console
CODE:
$ uv tool install ruff==0.5.0

----------------------------------------

TITLE: Checking Lockfile Status in uv
DESCRIPTION: Demonstrates how to check if the lockfile is up-to-date using the --check flag with uv lock. This is equivalent to using the --locked flag with other commands.

LANGUAGE: console
CODE:
$ uv lock --check

----------------------------------------

TITLE: Creating a Seeded Virtual Environment with uv
DESCRIPTION: This command creates a virtual environment with uv and includes pip, which can be useful for certain Jupyter operations.

LANGUAGE: console
CODE:
$ uv venv --seed

----------------------------------------

TITLE: Locking Dependencies from requirements.in
DESCRIPTION: Command to compile and lock dependencies from requirements.in file

LANGUAGE: console
CODE:
$ uv pip compile requirements.in -o requirements.txt

----------------------------------------

TITLE: Documentation Code Block Example
DESCRIPTION: Demonstrates proper code block formatting with language markers and command prefixes.

LANGUAGE: console
CODE:
$ command
output

----------------------------------------

TITLE: Minimal Project Configuration
DESCRIPTION: Bare minimum pyproject.toml configuration created with --bare option.

LANGUAGE: toml
CODE:
[project]
name = "example"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = []

----------------------------------------

TITLE: Running a Specific Version of Ruff with uvx (Python)
DESCRIPTION: Demonstrates how to run a specific version of the Ruff tool using the uvx command, which is an alias for uv tool run. This example shows version checking for Ruff 0.6.0.

LANGUAGE: console
CODE:
$ uvx ruff@0.6.0 --version
ruff 0.6.0

----------------------------------------

TITLE: Creating Virtual Environment with Specific Python Version
DESCRIPTION: Command to create a virtual environment using Python 3.11.6 using uv's venv command.

LANGUAGE: console
CODE:
$ uv venv --python 3.11.6

----------------------------------------

TITLE: Installing uv in GitHub Actions
DESCRIPTION: This snippet demonstrates how to install uv in a GitHub Actions workflow using the official astral-sh/setup-uv action. It shows both the latest version installation and pinning to a specific version.

LANGUAGE: yaml
CODE:
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.6.11"

----------------------------------------

TITLE: Running Latest Version of Ruff with uvx (Python)
DESCRIPTION: Shows how to run the latest version of Ruff using uvx, which uses the cached version unless explicitly told to use the latest.

LANGUAGE: console
CODE:
$ uvx ruff --version
ruff 0.6.2

----------------------------------------

TITLE: Adding a Development Dependency
DESCRIPTION: This example shows how to add a development dependency using the uv command-line tool. It adds the 'pytest' package as a development dependency.

LANGUAGE: console
CODE:
$ uv add --dev pytest

----------------------------------------

TITLE: Example Snapshot Test Implementation
DESCRIPTION: Example showing how to write snapshot tests using the uv_snapshot macro

LANGUAGE: rust
CODE:
#[test]
fn test_add() {
    let context = TestContext::new("3.12");
    uv_snapshot!(context.filters(), context.add().arg("requests"), @"");
}

----------------------------------------

TITLE: Configuring Basic Package Index in TOML
DESCRIPTION: Demonstrates how to define a basic additional package index in pyproject.toml using the tool.uv.index configuration.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
# Optional name for the index.
name = "pytorch"
# Required URL for the index.
url = "https://download.pytorch.org/whl/cpu"

----------------------------------------

TITLE: Configuring Azure Artifacts index in pyproject.toml
DESCRIPTION: Adds an Azure Artifacts index to the project configuration file.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "private-registry"
url = "https://pkgs.dev.azure.com/<ORGANIZATION>/<PROJECT>/_packaging/<FEED>/pypi/simple/"

----------------------------------------

TITLE: Syncing with Inexact Mode in uv
DESCRIPTION: Shows how to use the --inexact option with uv sync to retain extraneous packages that are not present in the lockfile. This can be useful when you want to keep manually installed packages.

LANGUAGE: console
CODE:
$ uv sync --inexact

----------------------------------------

TITLE: Configuring Basic UV Workspace
DESCRIPTION: Basic workspace configuration in pyproject.toml showing workspace members definition and package dependencies. Demonstrates how to specify workspace members using globs and exclude certain directories.

LANGUAGE: toml
CODE:
[project]
name = "albatross"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = ["bird-feeder", "tqdm>=4,<5"]

[tool.uv.sources]
bird-feeder = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]
exclude = ["packages/seeds"]

----------------------------------------

TITLE: Generating and setting Google Artifact Registry credentials
DESCRIPTION: Generates an access token and sets credentials for Google Artifact Registry.

LANGUAGE: bash
CODE:
export ARTIFACT_REGISTRY_TOKEN=$(
    gcloud auth application-default print-access-token
)

export UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD="$ARTIFACT_REGISTRY_TOKEN"

----------------------------------------

TITLE: Setting Up Jupyter in a Non-Project Environment with uv (macOS and Linux)
DESCRIPTION: This set of commands creates a virtual environment, installs necessary packages, and starts Jupyter Lab in a non-project environment using uv.

LANGUAGE: console
CODE:
$ uv venv --seed
$ uv pip install pydantic
$ uv pip install jupyterlab
$ .venv/bin/jupyter lab

----------------------------------------

TITLE: Unmanaged installation of uv
DESCRIPTION: This snippet demonstrates an unmanaged installation of uv to a specific path without modifying shell profiles or environment variables, suitable for CI environments.

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/install.sh | env UV_UNMANAGED_INSTALL="/custom/path" sh

----------------------------------------

TITLE: Upgrading All Packages in a Tool Environment (Python)
DESCRIPTION: Shows how to upgrade all packages in a specific tool environment (black in this case) using uv tool upgrade.

LANGUAGE: console
CODE:
$ uv tool upgrade black

----------------------------------------

TITLE: Plugin Entry Point Configuration
DESCRIPTION: Example of registering a plugin entry point in pyproject.toml and its corresponding Python implementation

LANGUAGE: toml
CODE:
[project.entry-points.'example.plugins']
a = "example_plugin_a"

LANGUAGE: python
CODE:
from importlib.metadata import entry_points

for plugin in entry_points(group='example.plugins'):
    plugin.load()

----------------------------------------

TITLE: Setting Default Package Index in TOML
DESCRIPTION: Shows how to configure a package index as the default, replacing PyPI as the fallback index.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
default = true

----------------------------------------

TITLE: Example Python Script Using Project Dependency
DESCRIPTION: A simple Python script that imports a project dependency (flask) and prints a message, demonstrating how to use project dependencies in code.

LANGUAGE: python
CODE:
# Require a project dependency
import flask

print("hello world")

----------------------------------------

TITLE: Configuring Renovate for Python Script Inline Dependencies
DESCRIPTION: Configuration for specifying Python files that use script inline metadata for dependency management. This allows Renovate to detect and update dependencies defined within Python scripts.

LANGUAGE: json
CODE:
{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  pep723: {
    fileMatch: [
      "scripts/generate_docs\\.py",
      "scripts/run_server\\.py",
    ],
  },
}

----------------------------------------

TITLE: Removing a Dependency
DESCRIPTION: This example shows how to remove a dependency using the uv command-line tool. It removes the 'httpx' package from the project dependencies.

LANGUAGE: console
CODE:
$ uv remove httpx

----------------------------------------

TITLE: Basic UV Docker Image Setup
DESCRIPTION: Demonstrates how to set up a basic Docker image for UV testing using a specific version and platform architecture.

LANGUAGE: dockerfile
CODE:
FROM ghcr.io/astral-sh/uv:0.5.24-debian-slim

LANGUAGE: dockerfile
CODE:
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim

----------------------------------------

TITLE: Displaying Help Menu for uv CLI
DESCRIPTION: Shows how to access the condensed help menu for the uv CLI using the --help flag.

LANGUAGE: console
CODE:
$ uv --help

----------------------------------------

TITLE: Defining Minimal Project Metadata in pyproject.toml for uv
DESCRIPTION: This snippet shows the minimal required configuration in a pyproject.toml file for a uv project. It defines the project name and version, which are essential for project identification.

LANGUAGE: toml
CODE:
[project]
name = "example"
version = "0.1.0"

----------------------------------------

TITLE: Deactivating a Virtual Environment
DESCRIPTION: Shows the command to deactivate an active virtual environment.

LANGUAGE: console
CODE:
$ deactivate

----------------------------------------

TITLE: Forcing Latest Version Update for Ruff with uvx (Python)
DESCRIPTION: Demonstrates how to force uvx to use the latest version of Ruff by using the @latest suffix, which refreshes the cache.

LANGUAGE: console
CODE:
$ uvx ruff@latest --version
0.6.2

----------------------------------------

TITLE: Authentication Configuration in TOML
DESCRIPTION: Example of configuring package index authentication settings in pyproject.toml.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "internal-proxy"
url = "https://example.com/simple"

----------------------------------------

TITLE: Reinstalling Python Versions with uv
DESCRIPTION: This snippet demonstrates how to reinstall all previously installed Python versions managed by uv. It uses the 'uv python install' command with the '--reinstall' flag.

LANGUAGE: console
CODE:
$ uv python install --reinstall

----------------------------------------

TITLE: Running Benchmark for uv and Poetry Package Resolvers
DESCRIPTION: This shell command runs a benchmark to compare the package resolution performance of uv and Poetry. It uses the 'resolver' script with options for uv-pip and poetry, and performs a cold resolve benchmark using a requirements file.

LANGUAGE: shell
CODE:
uv run resolver \
    --uv-pip \
    --poetry \
    --benchmark \
    resolve-cold \
    ../requirements/trio.in

----------------------------------------

TITLE: Upgrading All Installed Tools
DESCRIPTION: Shows how to upgrade all installed tools at once.

LANGUAGE: console
CODE:
$ uv tool upgrade --all

----------------------------------------

TITLE: Adding FastAPI Dependency with uv
DESCRIPTION: Command to add FastAPI as a dependency to the project using uv, including the 'standard' extra.

LANGUAGE: console
CODE:
$ uv add fastapi --extra standard

----------------------------------------

TITLE: Installing PyPy with uv
DESCRIPTION: This snippet shows how to install an alternative Python implementation, specifically PyPy 3.10, using uv. It uses the 'uv python install' command with the implementation name and version.

LANGUAGE: console
CODE:
$ uv python install pypy@3.10

----------------------------------------

TITLE: Updated FastAPI Project Structure with uv
DESCRIPTION: Shows the updated directory structure after initializing the uv project and adding FastAPI as a dependency.

LANGUAGE: plaintext
CODE:
project
├── pyproject.toml
└── app
    ├── __init__.py
    ├── main.py
    ├── dependencies.py
    ├── routers
    │   ├── __init__.py
    │   ├── items.py
    │   └── users.py
    └── internal
        ├── __init__.py
        └── admin.py

----------------------------------------

TITLE: Installing Specific Python Version
DESCRIPTION: Commands demonstrating different ways to install Python versions using uv, including specific versions, latest patch versions, and versions with constraints.

LANGUAGE: console
CODE:
$ uv python install 3.12.3
$ uv python install 3.12
$ uv python install '>=3.8,<3.10'
$ uv python install 3.9 3.10 3.11
$ uv python install pypy

----------------------------------------

TITLE: Syncing Optional Dependencies in uv
DESCRIPTION: Demonstrates how to include optional dependencies (extras) when syncing using the --extra option. This allows you to install specific optional feature sets.

LANGUAGE: console
CODE:
$ uv sync --extra foo

----------------------------------------

TITLE: Git Dependency in pyproject.toml
DESCRIPTION: This snippet shows how a Git dependency is represented in the pyproject.toml file. It includes both the standard dependency entry and the source specification.

LANGUAGE: toml
CODE:
[project]
name = "example"
version = "0.1.0"
dependencies = [
    "httpx",
]

[tool.uv.sources]
httpx = { git = "https://github.com/encode/httpx" }

----------------------------------------

TITLE: Using Isolated Mode with uvx for Ruff (Python)
DESCRIPTION: Demonstrates how to use the --isolated flag with uvx to ignore the installed version of Ruff without refreshing the cache.

LANGUAGE: console
CODE:
$ uvx --isolated ruff --version
0.6.2

----------------------------------------

TITLE: Passing Arguments to a Python Script with uv
DESCRIPTION: Illustrates how to pass command-line arguments to a Python script when using uv run.

LANGUAGE: python
CODE:
import sys

print(" ".join(sys.argv[1:]))

LANGUAGE: console
CODE:
$ uv run example.py test
test

$ uv run example.py hello world!
hello world!

----------------------------------------

TITLE: Running Tools with Different Package Names
DESCRIPTION: Demonstrates how to use the --from option to run a tool when the package name differs from the command name. This example runs the 'http' command from the 'httpie' package.

LANGUAGE: console
CODE:
$ uvx --from httpie http

----------------------------------------

TITLE: Reinstalling a Single Package in a Tool Environment (Python)
DESCRIPTION: Shows how to reinstall a single package (click) in a specific tool environment (black) during an upgrade using the --reinstall-package flag.

LANGUAGE: console
CODE:
$ uv tool upgrade black --reinstall-package click

----------------------------------------

TITLE: Installing ipykernel as a Development Dependency with uv
DESCRIPTION: This command adds ipykernel as a development dependency to the project using uv.

LANGUAGE: console
CODE:
$ uv add --dev ipykernel

----------------------------------------

TITLE: Constraining Tool Versions
DESCRIPTION: Demonstrates how to constrain a tool to a range of versions using the --from option. This example runs 'ruff' with a version greater than 0.2.0 but less than 0.3.0.

LANGUAGE: console
CODE:
$ uvx --from 'ruff>0.2.0,<0.3.0' ruff check

----------------------------------------

TITLE: Configuring Cache Keys for Git Commit, Tags, and pyproject.toml in TOML
DESCRIPTION: This snippet shows how to configure cache keys in pyproject.toml to include the pyproject.toml file, Git commit hash, and Git tags. This configuration is useful when dynamic metadata incorporates information from Git tags.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { git = { commit = true, tags = true } }]

----------------------------------------

TITLE: Installing editable packages with uv pip
DESCRIPTION: Shows how to install editable packages, which don't need to be reinstalled for source code changes to take effect.

LANGUAGE: console
CODE:
$ uv pip install -e .

LANGUAGE: console
CODE:
$ uv pip install -e "ruff @ ./project/ruff"

----------------------------------------

TITLE: Benchmarking Resolution Commands for UV Package Manager
DESCRIPTION: Shell commands to benchmark dependency resolution performance comparing UV against pip-compile, Poetry, and PDM. Requires a local UV release build, production UV binary, and hyperfine tool.

LANGUAGE: shell
CODE:
uv run resolver \
    --uv-project \
    --poetry \
    --pdm \
    --pip-compile \
    --benchmark resolve-warm --benchmark resolve-cold \
    --json \
    ../requirements/trio.in

----------------------------------------

TITLE: Disabling Automatic Locking in uv
DESCRIPTION: Shows how to use the --locked option to disable automatic locking in uv. This will raise an error if the lockfile is not up-to-date instead of updating it.

LANGUAGE: console
CODE:
$ uv run --locked ...

----------------------------------------

TITLE: Installing keyring and Azure Artifacts plugin
DESCRIPTION: Installs necessary packages for keyring authentication with Azure Artifacts.

LANGUAGE: bash
CODE:
uv tool install keyring --with artifacts-keyring

export UV_KEYRING_PROVIDER=subprocess

export UV_INDEX_PRIVATE_REGISTRY_USERNAME=VssSessionToken

----------------------------------------

TITLE: Running Python Tools with Arguments
DESCRIPTION: Shows how to pass arguments to a Python tool when using uvx. This example uses the 'pycowsay' tool to display a message.

LANGUAGE: console
CODE:
$ uvx pycowsay hello from uv

  -------------
< hello from uv >
  -------------
   \   ^__^
    \  (oo)\_______
       (__)\       )\/\
           ||----w |
           ||     ||

----------------------------------------

TITLE: Reinstalling a Tool with New Version Constraints (Python)
DESCRIPTION: Shows how to reinstall a tool (black) with new version constraints using uv tool install, which replaces the previous constraints.

LANGUAGE: console
CODE:
$ uv tool install black>=24

----------------------------------------

TITLE: Multi-file Dependency Locking
DESCRIPTION: Command to compile dependencies from multiple source files

LANGUAGE: console
CODE:
$ uv pip compile pyproject.toml requirements-dev.in -o requirements-dev.txt

----------------------------------------

TITLE: Configuring Google Artifact Registry index in pyproject.toml
DESCRIPTION: Adds a Google Artifact Registry index to the project configuration file.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "private-registry"
url = "https://<REGION>-python.pkg.dev/<PROJECT>/<REPOSITORY>"

----------------------------------------

TITLE: Running Latest Version of Python Tools
DESCRIPTION: Demonstrates how to run the latest version of a Python tool using uvx. This example runs the latest version of the 'ruff' tool.

LANGUAGE: console
CODE:
$ uvx ruff@latest check

----------------------------------------

TITLE: Listing Python Package Dependencies for Black
DESCRIPTION: This snippet shows the required Python packages and their versions for the 'black' formatter and its dependencies. It includes direct and indirect dependencies, with comments indicating the source of each indirect dependency.

LANGUAGE: Python
CODE:
black==23.12.1
click==8.1.7
    # via black
mypy-extensions==1.0.0
    # via black
packaging==23.2
    # via black
pathspec==0.12.1
    # via black
platformdirs==4.1.0
    # via black
tomli==2.0.1
    # via black
typing-extensions==4.9.0
    # via black

----------------------------------------

TITLE: Configuring AWS CodeArtifact index in pyproject.toml
DESCRIPTION: Adds an AWS CodeArtifact index to the project configuration file.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "private-registry"
url = "https://<DOMAIN>-<ACCOUNT_ID>.d.codeartifact.<REGION>.amazonaws.com/pypi/<REPOSITORY>/simple/"

----------------------------------------

TITLE: Finding Python Executables
DESCRIPTION: Commands for locating Python executables with version constraints and system preferences.

LANGUAGE: console
CODE:
$ uv python find
$ uv python find '>=3.11'
$ uv python find --system

----------------------------------------

TITLE: Marking Package as Private in pyproject.toml
DESCRIPTION: Demonstrates how to mark a package as private to prevent accidental uploads to PyPI. This is done by adding a specific classifier to the project configuration.

LANGUAGE: toml
CODE:
[project]
classifiers = ["Private :: Do Not Upload"]

----------------------------------------

TITLE: Managing Script Dependencies
DESCRIPTION: Example showing how to create a Python script with dependencies and run it using uv.

LANGUAGE: python
CODE:
import requests; print(requests.get("https://astral.sh"))

LANGUAGE: shell
CODE:
$ uv add --script example.py requests
$ uv run example.py

----------------------------------------

TITLE: Managing Script Dependencies
DESCRIPTION: Example showing how to create a Python script with dependencies and run it using uv.

LANGUAGE: python
CODE:
import requests; print(requests.get("https://astral.sh"))

LANGUAGE: shell
CODE:
$ uv add --script example.py requests
$ uv run example.py

----------------------------------------

TITLE: Installing keyring and AWS CodeArtifact plugin
DESCRIPTION: Installs necessary packages for keyring authentication with AWS CodeArtifact.

LANGUAGE: bash
CODE:
uv tool install keyring --with keyrings.codeartifact

export UV_KEYRING_PROVIDER=subprocess

export UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws

----------------------------------------

TITLE: UV Docker Project Configuration
DESCRIPTION: Demonstrates how to include project configuration files within a Docker image for UV testing.

LANGUAGE: dockerfile
CODE:
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim

COPY <<EOF /mre/pyproject.toml
[project]
name = "example"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["pydantic"]
EOF

WORKDIR /mre
RUN uv lock

----------------------------------------

TITLE: Docker Container Build and Run Commands
DESCRIPTION: Commands for building and running UV inside a Docker container for safe dependency resolution

LANGUAGE: shell
CODE:
docker buildx build -t uv-builder -f builder.dockerfile --load .
cargo build --target x86_64-unknown-linux-musl --profile profiling
docker run --rm -it -v $(pwd):/app uv-builder /app/target/x86_64-unknown-linux-musl/profiling/uv-dev resolve-many --cache-dir /app/cache-docker /app/scripts/popular_packages/pypi_10k_most_dependents.txt

----------------------------------------

TITLE: Running UV in Development Mode
DESCRIPTION: Commands showing how to run the development version of UV using cargo run

LANGUAGE: shell
CODE:
cargo run -- venv
cargo run -- pip install requests

----------------------------------------

TITLE: Running Legacy Windows Scripts
DESCRIPTION: Shows how to run legacy Windows scripts provided by tools. This example runs the 'nuitka' command without specifying the file extension.

LANGUAGE: console
CODE:
$ uv tool run --from nuitka==2.6.7 nuitka --version

----------------------------------------

TITLE: UV Generated Requirements File
DESCRIPTION: A requirements.txt file listing Python package dependencies with exact versions. Generated using uv pip compile command, showing direct requirements and their dependencies with version constraints.

LANGUAGE: text
CODE:
chevron-blue==0.2.1
    # via
    #   -r scripts/scenarios/requirements.in
    #   packse
hatchling==1.27.0
    # via packse
msgspec==0.18.6
    # via packse
packaging==24.2
    # via hatchling
packse==0.3.45
    # via -r scripts/scenarios/requirements.in
pathspec==0.12.1
    # via hatchling
pluggy==1.5.0
    # via hatchling
pyyaml==6.0.2
    # via packse
setuptools==75.6.0
    # via packse
trove-classifiers==2024.10.21.16
    # via hatchling
uv==0.5.10
    # via packse

----------------------------------------

TITLE: Running Python Tools with uvx
DESCRIPTION: Demonstrates how to use the uvx command to run Python tools without installing them. This example shows running the 'ruff' tool.

LANGUAGE: console
CODE:
$ uvx ruff

----------------------------------------

TITLE: FastAPI Project Structure
DESCRIPTION: Displays the directory structure of a sample FastAPI application as defined in the FastAPI documentation.

LANGUAGE: plaintext
CODE:
project
└── app
    ├── __init__.py
    ├── main.py
    ├── dependencies.py
    ├── routers
    │   ├── __init__.py
    │   ├── items.py
    │   └── users.py
    └── internal
        ├── __init__.py
        └── admin.py

----------------------------------------

TITLE: Including Additional Dependencies with Version Specification (Python)
DESCRIPTION: Demonstrates how to include additional packages with specific versions when executing a tool using uvx with the --with option.

LANGUAGE: console
CODE:
$ uvx --with <extra-package>==<version> <tool-package>

----------------------------------------

TITLE: Build Constraint Dependencies Configuration
DESCRIPTION: Configuration for constraining build dependency versions during package building

LANGUAGE: toml
CODE:
[tool.uv]
# Ensure that the setuptools v60.0.0 is used whenever a package has a build dependency
# on setuptools.
build-constraint-dependencies = ["setuptools==60.0.0"]

----------------------------------------

TITLE: Installing uv in a Docker image
DESCRIPTION: Shows how to install uv in a Docker image by copying the binary from the official distroless Docker image. This method ensures uv is available in the resulting image.

LANGUAGE: dockerfile
CODE:
FROM python:3.12-slim-bookworm
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

----------------------------------------

TITLE: Configuring Docker Compose for development with uv
DESCRIPTION: Demonstrates how to configure Docker Compose for development using uv. This snippet shows how to use the 'watch' feature to sync the project directory and rebuild the image when configuration changes.

LANGUAGE: yaml
CODE:
services:
  example:
    build: .

    # ...

    develop:
      # Create a `watch` configuration to update the app
      #
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment
          ignore:
            - .venv/

        # Rebuild the image on changes to the `pyproject.toml`
        - action: rebuild
          path: ./pyproject.toml

----------------------------------------

TITLE: Requirements Input Example in Python
DESCRIPTION: Simple requirements.in file example showing basic package dependencies.

LANGUAGE: python
CODE:
starlette
fastapi

----------------------------------------

TITLE: Platform-Specific Dependency in pyproject.toml
DESCRIPTION: This example shows how a platform-specific dependency appears in the pyproject.toml file. It includes the 'jax' package with an environment marker for Linux.

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.11"
dependencies = ["jax; sys_platform == 'linux'"]

----------------------------------------

TITLE: Installing a project using uv in Docker
DESCRIPTION: Shows how to copy a project into a Docker image and install it using uv. This snippet demonstrates syncing the project into a new environment using a frozen lockfile.

LANGUAGE: dockerfile
CODE:
# Copy the project into the image
ADD . /app

# Sync the project into a new environment, using the frozen lockfile
WORKDIR /app
RUN uv sync --frozen

----------------------------------------

TITLE: Installing and Running Python Tools
DESCRIPTION: Commands demonstrating how to run and install Python-based tools using uv's tool management features.

LANGUAGE: shell
CODE:
$ uvx pycowsay 'hello world!'
$ uv tool install ruff
$ ruff --version

----------------------------------------

TITLE: Running a Python Script with Standard Library Dependencies
DESCRIPTION: Shows how to execute a Python script that uses modules from the standard library.

LANGUAGE: python
CODE:
import os

print(os.path.expanduser("~"))

LANGUAGE: console
CODE:
$ uv run example.py
/Users/astral

----------------------------------------

TITLE: Basic FastAPI Project Structure
DESCRIPTION: Shows the initial project structure for a minimal FastAPI application

LANGUAGE: plaintext
CODE:
project
├── pyproject.toml
└── app
    ├── __init__.py
    └── main.py

----------------------------------------

TITLE: Building Trampolines for Multiple Architectures on macOS
DESCRIPTION: This snippet demonstrates how to build Windows trampolines for different architectures (i686, x86_64, aarch64) using cargo xwin on a macOS system.

LANGUAGE: shell
CODE:
cargo +nightly-2025-02-16 xwin build --release --target i686-pc-windows-msvc
cargo +nightly-2025-02-16 xwin build --release --target x86_64-pc-windows-msvc
cargo +nightly-2025-02-16 xwin build --release --target aarch64-pc-windows-msvc

----------------------------------------

TITLE: Defining Version Constraints
DESCRIPTION: Example of defining version constraints for packages

LANGUAGE: python
CODE:
pydantic<2.0

----------------------------------------

TITLE: Adding uv as a Development Dependency for Notebook Operations
DESCRIPTION: This command adds uv itself as a development dependency, allowing for uv operations within Jupyter notebooks in VS Code.

LANGUAGE: console
CODE:
$ uv add --dev uv

----------------------------------------

TITLE: Excluding Groups in uv Sync
DESCRIPTION: Demonstrates how to exclude specific groups when syncing dependencies. In this example, the 'foo' group is excluded even though it's also included, as exclusions take precedence.

LANGUAGE: console
CODE:
$ uv sync --no-group foo --group foo

----------------------------------------

TITLE: Running Legacy Windows Scripts with uv
DESCRIPTION: Shows how to run legacy setuptools scripts on Windows using uv run, with and without specifying file extensions.

LANGUAGE: console
CODE:
$ uv run --with nuitka==2.6.7 -- nuitka.cmd --version

LANGUAGE: console
CODE:
$ uv run --with nuitka==2.6.7 -- nuitka --version

----------------------------------------

TITLE: Verifying Environment Integrity with uv
DESCRIPTION: Command to check for conflicts or missing dependencies in the Python environment. This is useful to ensure consistency, especially after installing packages in multiple steps.

LANGUAGE: console
CODE:
$ uv pip check

----------------------------------------

TITLE: FastAPI Lambda Handler Implementation
DESCRIPTION: Main application code implementing a FastAPI endpoint with Mangum handler for AWS Lambda

LANGUAGE: python
CODE:
import logging

from fastapi import FastAPI
from mangum import Mangum

logger = logging.getLogger()
logger.setLevel(logging.INFO)

app = FastAPI()
handler = Mangum(app)


@app.get("/")
async def root() -> str:
    return "Hello, world!"

----------------------------------------

TITLE: Installing Latest and Specific Versions of Ruff (Python)
DESCRIPTION: Shows how to install the latest version and a specific version of Ruff using uv tool install with version specifiers.

LANGUAGE: console
CODE:
$ uv tool install ruff@latest
$ uv tool install ruff@0.6.0

----------------------------------------

TITLE: Configuring GUI Entry Points
DESCRIPTION: Shows configuration for graphical user interface entry points in pyproject.toml

LANGUAGE: toml
CODE:
[project.gui-scripts]
hello = "example:app"

----------------------------------------

TITLE: Configuring Explicit Package Indexes
DESCRIPTION: Example of configuring an explicit index that only allows pinned packages

LANGUAGE: toml
CODE:
[tool.uv.sources]
torch = { index = "pytorch" }

[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

----------------------------------------

TITLE: AWS Lambda Docker Deployment Configuration
DESCRIPTION: Multi-stage Dockerfile for building and deploying the FastAPI application to AWS Lambda

LANGUAGE: dockerfile
CODE:
FROM ghcr.io/astral-sh/uv:0.6.11 AS uv

# First, bundle the dependencies into the task root.
FROM public.ecr.aws/lambda/python:3.13 AS builder

# Enable bytecode compilation, to improve cold-start performance.
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata, to create a deterministic layer.
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching.
ENV UV_LINK_MODE=copy

# Bundle the dependencies into the Lambda task root via `uv pip install --target`.
#
# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`).
# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`
# files change, but remains robust to changes in the application code.
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"

FROM public.ecr.aws/lambda/python:3.13

# Copy the runtime dependencies from the builder stage.
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Copy the application code.
COPY ./app ${LAMBDA_TASK_ROOT}/app

# Set the AWS Lambda handler.
CMD ["app.main.handler"]

----------------------------------------

TITLE: Package Dependencies List
DESCRIPTION: List of Python packages and their specific versions required for a project. Includes major frameworks and libraries for cloud services, data processing, and web applications.

LANGUAGE: text
CODE:
adal==1.2.7
alembic==1.8.1
amqp==5.1.1
anyio==3.6.1
apache-airflow==2.3.4
apache-airflow-providers-amazon==5.0.0
apache-airflow-providers-celery==3.0.0
apache-airflow-providers-cncf-kubernetes==4.3.0
apache-airflow-providers-common-sql==1.1.0
apache-airflow-providers-docker==3.1.0
apache-airflow-providers-elasticsearch==4.2.0
apache-airflow-providers-ftp==3.1.0
apache-airflow-providers-google==8.3.0
apache-airflow-providers-grpc==3.0.0
apache-airflow-providers-hashicorp==3.1.0
apache-airflow-providers-http==4.0.0
apache-airflow-providers-imap==3.0.0
apache-airflow-providers-microsoft-azure==4.2.0
apache-airflow-providers-mysql==3.2.0
apache-airflow-providers-odbc==3.1.1
apache-airflow-providers-postgres==5.2.0
apache-airflow-providers-redis==3.0.0
apache-airflow-providers-sendgrid==3.0.0
apache-airflow-providers-sftp==4.0.0
apache-airflow-providers-slack==5.1.0
apache-airflow-providers-sqlite==3.2.0
apache-airflow-providers-ssh==3.1.0
apispec==3.3.2
argcomplete==2.0.0
asn1crypto==1.5.1
attrs==22.1.0
Authlib==0.15.5
azure-batch==12.0.0
azure-common==1.1.28
azure-core==1.25.0
azure-cosmos==4.3.0
azure-datalake-store==0.0.52
azure-identity==1.10.0
azure-keyvault-secrets==4.5.1
azure-kusto-data==0.0.45
azure-mgmt-containerinstance==1.5.0
azure-mgmt-core==1.3.2
azure-mgmt-datafactory==1.1.0
azure-mgmt-datalake-nspkg==3.0.1
azure-mgmt-datalake-store==0.5.0
azure-mgmt-nspkg==3.0.2
azure-mgmt-resource==21.1.0
azure-nspkg==3.0.2
azure-servicebus==7.8.0
azure-storage-blob==12.8.1
azure-storage-common==2.1.0
azure-storage-file==2.1.0
Babel==2.10.3
bcrypt==3.2.2
beautifulsoup4==4.11.1
billiard==3.6.4.0
blinker==1.5
boto3==1.24.56
botocore==1.27.56
cachelib==0.9.0
cachetools==4.2.2
cattrs==22.1.0
celery==5.2.7
certifi==2022.6.15
cffi==1.15.1
charset-normalizer==2.0.12
click==8.1.3
click-didyoumean==0.3.0
click-plugins==1.1.1
click-repl==0.2.0
clickclick==20.10.2
cloudpickle==2.1.0
colorama==0.4.5
colorlog==4.8.0
commonmark==0.9.1
connexion==2.14.0
cron_descriptor==1.2.31
croniter==1.3.5
cryptography==36.0.2
dask==2022.8.0
db-dtypes==1.0.3
decorator==5.1.1
Deprecated==1.2.13
dill==0.3.1.1
distlib==0.3.5
distributed==2022.8.0
dnspython==2.2.1
docker==6.1.3
docutils==0.19
elasticsearch==7.13.4
elasticsearch-dbapi==0.2.9
elasticsearch-dsl==7.4.0
email-validator==1.2.1
eventlet==0.33.1
exceptiongroup==1.0.0rc8
filelock==3.8.0
Flask==2.2.2
Flask-AppBuilder==4.1.3
Flask-Babel==2.0.0
Flask-Caching==2.0.1
Flask-JWT-Extended==4.4.4
Flask-Login==0.6.2
Flask-Session==0.4.0
Flask-SQLAlchemy==2.5.1
Flask-WTF==0.15.1
flower==1.2.0
fsspec==2022.7.1
future==0.18.2
gevent==21.12.0
google-ads==18.0.0
google-api-core==2.8.2
google-api-python-client==1.12.11
google-auth==2.10.0
google-auth-httplib2==0.1.0
google-auth-oauthlib==0.5.2
google-cloud-aiplatform==1.16.1
google-cloud-appengine-logging==1.1.3
google-cloud-audit-log==0.2.4
google-cloud-automl==2.8.0
google-cloud-bigquery==2.34.4
google-cloud-bigquery-datatransfer==3.7.0
google-cloud-bigquery-storage==2.14.1
google-cloud-bigtable==1.7.2
google-cloud-build==3.9.0
google-cloud-container==2.11.1
google-cloud-core==2.3.2
google-cloud-datacatalog==3.9.0
google-cloud-dataform==0.2.0
google-cloud-dataplex==1.1.0
google-cloud-dataproc==5.0.0
google-cloud-dataproc-metastore==1.6.0
google-cloud-dlp==1.0.2
google-cloud-kms==2.12.0
google-cloud-language==1.3.2
google-cloud-logging==3.2.1
google-cloud-memcache==1.4.1
google-cloud-monitoring==2.11.0
google-cloud-orchestration-airflow==1.4.1
google-cloud-os-login==2.7.1
google-cloud-pubsub==2.13.5
google-cloud-redis==2.9.0
google-cloud-resource-manager==1.6.0
google-cloud-secret-manager==1.0.2
google-cloud-spanner==1.19.3
google-cloud-speech==1.3.4
google-cloud-storage==1.44.0
google-cloud-tasks==2.10.1
google-cloud-texttospeech==1.0.3
google-cloud-translate==1.7.2
google-cloud-videointelligence==1.16.3
google-cloud-vision==1.0.2
google-cloud-workflows==1.7.1
google-crc32c==1.3.0
google-resumable-media==2.3.3
googleapis-common-protos==1.56.4
graphviz==0.20.1
greenlet==1.1.2
grpc-google-iam-v1==0.12.4
grpcio==1.47.0
grpcio-gcp==0.2.2
grpcio-status==1.47.0
gunicorn==20.1.0
h11==0.12.0
HeapDict==1.0.1
httpcore==0.15.0
httplib2==0.20.4
httpx==0.23.0
humanize==4.3.0
hvac==1.1.1
idna==3.3
inflection==0.5.1
isodate==0.6.1
itsdangerous==2.1.2
Jinja2==3.1.2
jmespath==0.10.0
json-merge-patch==0.2
jsonpath-ng==1.5.3
jsonschema==4.13.0
kombu==5.2.4
kubernetes==23.6.0
lazy-object-proxy==1.7.1
ldap3==2.9.1
linkify-it-py==2.0.0
locket==1.0.0
lockfile==0.12.2
looker-sdk==22.10.0
lxml==4.9.1
Mako==1.2.1
Markdown==3.4.1
markdown-it-py==2.1.0
MarkupSafe==2.1.1
marshmallow==3.17.0
marshmallow-enum==1.5.1
marshmallow-oneofschema==3.0.1
marshmallow-sqlalchemy==0.26.1
mdit-py-plugins==0.3.0
mdurl==0.1.2
msal==1.18.0
msal-extensions==1.0.0
msgpack==1.0.4
msrest==0.7.1
msrestazure==0.6.4
mypy-boto3-appflow==1.24.36.post1
mypy-boto3-rds==1.24.54
mypy-boto3-redshift-data==1.24.36.post1
mysql-connector-python==8.0.30
mysqlclient==2.1.1
numpy==1.22.4
oauthlib==3.2.0
packaging==21.3
pandas==1.4.3
pandas-gbq==0.17.8
paramiko==2.11.0
partd==1.3.0
pathspec==0.9.0
pendulum==2.1.2
platformdirs==2.5.2
plugging==1.0.0
ply==3.11
portalocker==2.5.1
prison==0.2.1
prometheus-client==0.14.1
prompt-toolkit==3.0.30
proto-plus==1.19.6
protobuf==3.20.0
psutil==5.9.1
psycopg2-binary==2.9.3
pyarrow==6.0.1
pyasn1==0.4.8
pyasn1-modules==0.2.8
pycparser==2.21
pydata-google-auth==1.4.0
Pygments==2.13.0
PyJWT==2.4.0
PyNaCl==1.5.0
pyodbc==4.0.34
pyOpenSSL==22.0.0
pyparsing==3.0.9
pyrsistent==0.18.1
python-daemon==2.3.1
python-dateutil==2.8.2
python-http-client==3.3.7
python-ldap==3.4.2
python-nvd3==0.15.0
python-slugify==6.1.2
pytz==2022.1
pytzdata==2020.1
PyYAML==6.0
redis==3.5.3
redshift-connector==2.0.908
requests==2.28.0
requests-oauthlib==1.3.1
requests-toolbelt==0.9.1
rfc3986==1.5.0
rich==12.5.1
rsa==4.9
s3transfer==0.6.0
scramp==1.4.1
sendgrid==6.9.7
setproctitle==1.3.2
six==1.16.0
slack-sdk==3.18.1
sniffio==1.2.0
sortedcontainers==2.4.0
soupsieve==2.3.2.post1
SQLAlchemy==1.4.27
sqlalchemy-bigquery==1.4.4
SQLAlchemy-JSONField==1.0.0
sqlalchemy-redshift==0.8.11
SQLAlchemy-Utils==0.38.3
sqlparse==0.4.2
sshtunnel==0.4.0
starkbank-ecdsa==2.0.3
statsd==3.3.0
swagger-ui-bundle==0.0.9
tabulate==0.8.10
tblib==1.7.0
tenacity==8.0.1
termcolor==1.1.0
text-unidecode==1.3
toolz==0.12.0
tornado==6.1
typing_extensions==4.3.0
uamqp==1.6.0
uc-micro-py==1.0.1
unicodecsv==0.14.1
uritemplate==3.0.1
urllib3==1.26.11
vine==5.0.0
virtualenv==20.16.3
watchtower==2.0.1
wcwidth==0.2.5
websocket-client==1.3.3
Werkzeug==2.2.2
wrapt==1.14.1
WTForms==2.3.3
zict==2.2.0
zope.event==4.5.0
zope.interface==5.4.0

----------------------------------------

TITLE: Configuring PyTorch Accelerators with Environment Markers
DESCRIPTION: This snippet demonstrates how to use environment markers to specify different PyTorch builds for different platforms, using CUDA-enabled builds on Linux and CPU-only builds on other platforms.

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.12.0"
dependencies = [
  "torch>=2.6.0",
  "torchvision>=0.21.0",
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu124", marker = "sys_platform == 'linux'" },
]
torchvision = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu124", marker = "sys_platform == 'linux'" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

----------------------------------------

TITLE: AWS Lambda Event JSON Example
DESCRIPTION: Sample JSON event payload for testing the Lambda function

LANGUAGE: json
CODE:
{
  "httpMethod": "GET",
  "path": "/",
  "requestContext": {},
  "version": "1.0"
}

----------------------------------------

TITLE: Installing Python Executables with Preview Feature
DESCRIPTION: Commands showing how to install Python executables into PATH using the preview feature, including setting default Python versions.

LANGUAGE: console
CODE:
$ uv python install 3.12 --preview
$ uv python install 3.12 --default --preview

----------------------------------------

TITLE: Configuring Build Isolation Exceptions
DESCRIPTION: Example of configuring package build isolation exceptions in pyproject.toml

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
description = "..."
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["cchardet"]

[tool.uv]
no-build-isolation-package = ["cchardet"]

----------------------------------------

TITLE: Installing PyTorch with Default Configuration
DESCRIPTION: This snippet shows the default configuration for installing PyTorch using uv, which installs CPU-only wheels for Windows and macOS, and GPU-accelerated wheels on Linux targeting CUDA 12.4.

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = [
  "torch>=2.6.0",
  "torchvision>=0.21.0",
]

----------------------------------------

TITLE: Running FastAPI Application with uv
DESCRIPTION: Command to run the FastAPI application using uv, which resolves dependencies, creates a virtual environment, and executes the command.

LANGUAGE: console
CODE:
$ uv run fastapi dev

----------------------------------------

TITLE: Configuring Cache Keys with Environment Variable in TOML
DESCRIPTION: This snippet demonstrates how to include an environment variable in the cache keys configuration. This will invalidate the cache whenever the specified environment variable changes.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { env = "MY_ENV_VAR" }]

----------------------------------------

TITLE: Documentation Server Commands
DESCRIPTION: Commands for running the documentation development server locally

LANGUAGE: shell
CODE:
uvx --with-requirements docs/requirements.txt -- mkdocs serve -f mkdocs.public.yml

uvx --with-requirements docs/requirements-insiders.txt -- mkdocs serve -f mkdocs.insiders.yml

----------------------------------------

TITLE: Building Docker Image for FastAPI Application
DESCRIPTION: Command to build a Docker image for the FastAPI application using the provided Dockerfile.

LANGUAGE: console
CODE:
$ docker build -t fastapi-app .

----------------------------------------

TITLE: Declaring Package Dependency
DESCRIPTION: Specifies tomli as a required package dependency for the project

LANGUAGE: plaintext
CODE:
tomli

----------------------------------------

TITLE: Configuring Package for Always Reinstall in TOML
DESCRIPTION: This snippet demonstrates how to configure a package to always be rebuilt and reinstalled, regardless of file changes. This is useful for packages with dynamic metadata not covered by other cache key options.

LANGUAGE: toml
CODE:
[tool.uv]
reinstall-package = ["my-package"]

----------------------------------------

TITLE: Dependency Entry in pyproject.toml
DESCRIPTION: This snippet shows how the added dependency appears in the pyproject.toml file. It includes the 'httpx' package with a version constraint.

LANGUAGE: toml
CODE:
[project]
name = "example"
version = "0.1.0"
dependencies = ["httpx>=0.27.2"]

----------------------------------------

TITLE: Configuring pre-commit for multiple pip-compile hooks in YAML
DESCRIPTION: This snippet shows how to set up multiple pip-compile hooks to run over different files simultaneously.

LANGUAGE: yaml
CODE:
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.11
    hooks:
      # Compile requirements
      - id: pip-compile
        name: pip-compile requirements.in
        args: [requirements.in, -o, requirements.txt]
      - id: pip-compile
        name: pip-compile requirements-dev.in
        args: [requirements-dev.in, -o, requirements-dev.txt]
        files: ^requirements-dev\.(in|txt)$

----------------------------------------

TITLE: Running Project-Provided CLI and Bash Script with uv
DESCRIPTION: Shows examples of running a project-provided CLI tool and a bash script using uv run.

LANGUAGE: console
CODE:
$ # Presuming the project provides `example-cli`
$ uv run example-cli foo

$ # Running a `bash` script that requires the project to be available
$ uv run bash scripts/foo.sh

----------------------------------------

TITLE: Setting Up Jupyter in a Non-Project Environment with uv (Windows)
DESCRIPTION: This set of PowerShell commands creates a virtual environment, installs necessary packages, and starts Jupyter Lab in a non-project environment using uv on Windows.

LANGUAGE: powershell
CODE:
uv venv --seed
uv pip install pydantic
uv pip install jupyterlab
.venv\Scripts\jupyter lab

----------------------------------------

TITLE: Defining Build Constraints in Text File
DESCRIPTION: Shows the content of a 'constraints.txt' file used to specify version and hash constraints for build dependencies.

LANGUAGE: text
CODE:
setuptools==68.2.2 --hash=sha256:b454a35605876da60632df1a60f736524eb73cc47bbc9f3f1ef1b644de74fd2a

----------------------------------------

TITLE: Installing uv without modifying shell profiles
DESCRIPTION: This command installs uv without modifying shell profiles by setting the INSTALLER_NO_MODIFY_PATH environment variable to 1.

LANGUAGE: console
CODE:
$ curl -LsSf https://astral.sh/uv/install.sh | env INSTALLER_NO_MODIFY_PATH=1 sh

----------------------------------------

TITLE: Configuring Cache Keys with Glob Pattern for TOML Files in TOML
DESCRIPTION: This snippet shows how to use a glob pattern in cache keys configuration to invalidate the cache when any .toml file in the project directory or its subdirectories is modified.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "**/*.toml" }]

----------------------------------------

TITLE: Automatic PyTorch Backend Selection
DESCRIPTION: This snippet shows how to use uv's automatic backend selection feature to install PyTorch, which inspects the system configuration to choose the appropriate PyTorch index at runtime.

LANGUAGE: shell
CODE:
$ UV_TORCH_BACKEND=auto uv pip install torch

----------------------------------------

TITLE: Configuring Conflicting Dependencies
DESCRIPTION: Example of handling conflicting package dependencies using UV's conflict resolution system

LANGUAGE: toml
CODE:
[project.optional-dependencies]
extra1 = ["numpy==2.1.2"]
extra2 = ["numpy==2.0.0"]

[tool.uv]
conflicts = [
    [
      { extra = "extra1" },
      { extra = "extra2" },
    ],
]

----------------------------------------

TITLE: Manylinux Compatibility Implementation
DESCRIPTION: Example Python code showing implementation of manylinux compatibility checks using the no-manylinux approach.

LANGUAGE: python
CODE:
from __future__ import annotations
manylinux1_compatible = False
manylinux2010_compatible = False
manylinux2014_compatible = False


def manylinux_compatible(*_, **__):
    return False

----------------------------------------

TITLE: Building Project Distributions with uv
DESCRIPTION: Shows how to use 'uv build' to create source and binary distributions (wheels) for the project, placing the artifacts in a 'dist/' directory.

LANGUAGE: console
CODE:
$ uv build
$ ls dist/
hello-world-0.1.0-py3-none-any.whl
hello-world-0.1.0.tar.gz

----------------------------------------

TITLE: Configuring Command Line Interface Entry Points
DESCRIPTION: Demonstrates how to define a command line interface entry point in pyproject.toml

LANGUAGE: toml
CODE:
[project.scripts]
hello = "example:hello"

----------------------------------------

TITLE: Starting Jupyter Lab with uv in a Project Environment
DESCRIPTION: This command starts a Jupyter Lab server with access to the project's virtual environment managed by uv.

LANGUAGE: console
CODE:
$ uv run --with jupyter jupyter lab

----------------------------------------

TITLE: Publishing packages to alternative indexes
DESCRIPTION: Demonstrates how to publish packages to alternative indexes using uv publish.

LANGUAGE: console
CODE:
$ export UV_PUBLISH_USERNAME=dummy
$ export UV_PUBLISH_PASSWORD="$AZURE_ARTIFACTS_TOKEN"
$ uv publish --index private-registry

----------------------------------------

TITLE: Adding a Git Dependency
DESCRIPTION: This example demonstrates how to add a dependency from a Git repository using uv. It adds the 'httpx' package directly from its GitHub repository.

LANGUAGE: console
CODE:
$ uv add "httpx @ git+https://github.com/encode/httpx"

----------------------------------------

TITLE: Installing Dependencies for Cross-Compilation on macOS
DESCRIPTION: This snippet shows how to install necessary dependencies and Rust components for cross-compiling Windows trampolines on a macOS system.

LANGUAGE: shell
CODE:
brew install llvm
cargo install cargo-xwin
rustup toolchain install nightly-2025-02-16
rustup component add rust-src --toolchain nightly-2025-02-16-aarch64-apple-darwin
rustup target add --toolchain nightly-2025-02-16 i686-pc-windows-msvc
rustup target add --toolchain nightly-2025-02-16 x86_64-pc-windows-msvc
rustup target add --toolchain nightly-2025-02-16 aarch64-pc-windows-msvc

----------------------------------------

TITLE: Upgrading Installed Tools
DESCRIPTION: Demonstrates how to upgrade an installed tool. This example upgrades the 'ruff' tool.

LANGUAGE: console
CODE:
$ uv tool upgrade ruff

----------------------------------------

TITLE: Installing uv on macOS/Linux
DESCRIPTION: Command to install uv using the official standalone installer script on Unix-like systems.

LANGUAGE: shell
CODE:
curl -LsSf https://astral.sh/uv/install.sh | sh

----------------------------------------

TITLE: Updating Prebuilt Executables
DESCRIPTION: This snippet shows how to copy the built trampoline executables to their respective locations in the project directory structure.

LANGUAGE: shell
CODE:
cp target/aarch64-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-aarch64-console.exe
cp target/aarch64-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-aarch64-gui.exe
cp target/x86_64-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-x86_64-console.exe
cp target/x86_64-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-x86_64-gui.exe
cp target/i686-pc-windows-msvc/release/uv-trampoline-console.exe trampolines/uv-trampoline-i686-console.exe
cp target/i686-pc-windows-msvc/release/uv-trampoline-gui.exe trampolines/uv-trampoline-i686-gui.exe

----------------------------------------

TITLE: Development Dependencies in pyproject.toml
DESCRIPTION: This snippet demonstrates how development dependencies are represented in the pyproject.toml file using the dependency-groups table.

LANGUAGE: toml
CODE:
[dependency-groups]
dev = [
  "pytest >=8.1.1,<9"
]

----------------------------------------

TITLE: Installing keyring and Google Artifact Registry plugin
DESCRIPTION: Installs necessary packages for keyring authentication with Google Artifact Registry.

LANGUAGE: bash
CODE:
uv tool install keyring --with keyrings.google-artifactregistry-auth

export UV_KEYRING_PROVIDER=subprocess

export UV_INDEX_PRIVATE_REGISTRY_USERNAME=oauth2accesstoken

----------------------------------------

TITLE: Automatic Python Download and Execution with uv
DESCRIPTION: This snippet demonstrates automatic Python download and execution using uv. It runs a Python 3.12 command, which will download Python 3.12 if not already installed.

LANGUAGE: console
CODE:
$ uvx python@3.12 -c "print('hello world')"

----------------------------------------

TITLE: Building Trampolines for Release
DESCRIPTION: This snippet shows the commands to build the trampolines for release for different Windows architectures using cargo.

LANGUAGE: shell
CODE:
cargo build --release --target i686-pc-windows-msvc
cargo build --release --target x86_64-pc-windows-msvc
cargo build --release --target aarch64-pc-windows-msvc

----------------------------------------

TITLE: Complex Forking Scenario in Python Package Resolution
DESCRIPTION: Example of multiple requirements for a package with different platform-specific markers, showcasing the need for multiple forks in the resolution process.

LANGUAGE: python
CODE:
flask > 1 ; sys_platform == 'darwin'
flask > 2 ; sys_platform == 'win32'
flask

----------------------------------------

TITLE: Upgrading Package to Specific Version in uv
DESCRIPTION: Shows how to upgrade a single package to a specific version using the --upgrade-package option with uv lock. This allows precise control over package versions.

LANGUAGE: console
CODE:
$ uv lock --upgrade-package <package>==<version>

----------------------------------------

TITLE: Configuring Python Implementation Constraints
DESCRIPTION: Example showing how to limit resolution to CPython implementation only.

LANGUAGE: toml
CODE:
[tool.uv]
environments = [
    "implementation_name == 'cpython'"
]

----------------------------------------

TITLE: Git Repository Clone Script
DESCRIPTION: Commands for cloning and checking out a specific commit in a Git repository for UV testing.

LANGUAGE: bash
CODE:
git clone https://github.com/<user>/<project>.git
cd <project>
git checkout <commit>
<commands to produce error>

----------------------------------------

TITLE: Setting Azure Artifacts credentials with environment variables
DESCRIPTION: Configures authentication for Azure Artifacts using environment variables.

LANGUAGE: bash
CODE:
export UV_INDEX_PRIVATE_REGISTRY_USERNAME=dummy
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD="$AZURE_ARTIFACTS_TOKEN"

----------------------------------------

TITLE: Building a Package with uv
DESCRIPTION: Shows the command to build a Python package using uv. By default, this builds the project in the current directory and places artifacts in a 'dist/' subdirectory.

LANGUAGE: console
CODE:
$ uv build

----------------------------------------

TITLE: Dependency Metadata Configuration
DESCRIPTION: Example showing how to provide static dependency metadata for packages in pyproject.toml.

LANGUAGE: toml
CODE:
[[tool.uv.dependency-metadata]]
name = "chumpy"
version = "0.70"
requires-dist = ["numpy>=1.8.1", "scipy>=0.13.0", "six>=1.11.0"]

----------------------------------------

TITLE: Running a Simple Python Script with uv
DESCRIPTION: Demonstrates how to run a basic Python script without dependencies using uv.

LANGUAGE: python
CODE:
print("Hello world")

LANGUAGE: console
CODE:
$ uv run example.py
Hello world

----------------------------------------

TITLE: Syncing and Running Projects with uv in GitHub Actions
DESCRIPTION: This snippet shows how to install a project and run commands using uv in a GitHub Actions workflow. It demonstrates using uv sync to install dependencies and uv run to execute commands in the environment.

LANGUAGE: yaml
CODE:
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest tests

----------------------------------------

TITLE: Declaring Script Dependencies with Inline Metadata
DESCRIPTION: Shows how to use inline script metadata to declare dependencies for a Python script, which uv will automatically manage.

LANGUAGE: python
CODE:
# /// script
# dependencies = [
#   "requests<3",
#   "rich",
# ]
# ///

import requests
from rich.pretty import pprint

resp = requests.get("https://peps.python.org/api/peps.json")
data = resp.json()
pprint([(k, v["title"]) for k, v in data.items()][:10])

LANGUAGE: console
CODE:
$ uv run example.py
[
│   ('1', 'PEP Purpose and Guidelines'),
│   ('2', 'Procedure for Adding New Modules'),
│   ('3', 'Guidelines for Handling Bug Reports'),
│   ('4', 'Deprecation of Standard Modules'),
│   ('5', 'Guidelines for Language Evolution'),
│   ('6', 'Bug Fix Releases'),
│   ('7', 'Style Guide for C Code'),
│   ('8', 'Style Guide for Python Code'),
│   ('9', 'Sample Plaintext PEP Template'),
│   ('10', 'Voting Guidelines')
]

----------------------------------------

TITLE: Checking Installed Version of uv CLI
DESCRIPTION: Shows how to check the installed version of the uv CLI using the 'version' command, which is useful for troubleshooting and support purposes.

LANGUAGE: console
CODE:
$ uv version

----------------------------------------

TITLE: Building Trampolines for Multiple Architectures on Linux
DESCRIPTION: This snippet demonstrates how to build Windows trampolines for different architectures (x86, x86_64, aarch64) using cargo xwin on a Linux system.

LANGUAGE: shell
CODE:
cargo +nightly-2025-02-16 xwin build --xwin-arch x86 --release --target i686-pc-windows-msvc
cargo +nightly-2025-02-16 xwin build --release --target x86_64-pc-windows-msvc
cargo +nightly-2025-02-16 xwin build --release --target aarch64-pc-windows-msvc

----------------------------------------

TITLE: Activating Virtual Environments in Alternative Shells
DESCRIPTION: Demonstrates how to activate virtual environments in different shell environments such as fish, csh/tcsh, and Nushell.

LANGUAGE: console
CODE:
$ source .venv/bin/activate.fish

LANGUAGE: console
CODE:
$ source .venv/bin/activate.csh

LANGUAGE: console
CODE:
$ use .venv\Scripts\activate.nu

----------------------------------------

TITLE: Specifying Python Version Requirements in Scripts
DESCRIPTION: Demonstrates how to specify Python version requirements using inline script metadata, which uv will respect when executing the script.

LANGUAGE: python
CODE:
# /// script
# requires-python = ">=3.12"
# dependencies = []
# ///

# Use some syntax added in Python 3.12
type Point = tuple[float, float]
print(Point)

----------------------------------------

TITLE: Generating UV Project Requirements
DESCRIPTION: This code snippet shows the command used to generate the requirements file using UV. It compiles the dependencies from an input file and outputs them to a specific requirements file with universal wheel support for Python 3.12.

LANGUAGE: Shell
CODE:
uv pip compile docs/requirements-insiders.in -o docs/requirements-insiders.txt --universal -p 3.12

----------------------------------------

TITLE: Configuring PyTorch CPU/GPU Selection with TOML
DESCRIPTION: Example configuration showing how to define conflicting CPU/GPU extras for PyTorch using TOML configuration to select appropriate package indexes

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.12.0"

[project.optional-dependencies]
cpu = ["torch>=2.5.1"]
gpu = ["torch>=2.5.1"]

[tool.uv]
conflicts = [[{ extra = "cpu" }, { extra = "gpu" }]]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", extra = "cpu", marker = "platform_system != 'Darwin'" },
  { index = "pytorch-gpu", extra = "gpu" }
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-gpu"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

----------------------------------------

TITLE: Running Python Scripts with Different Python Versions
DESCRIPTION: Shows how to use uv to run a Python script with different Python versions specified at runtime.

LANGUAGE: python
CODE:
import sys

print(".join(map(str, sys.version_info[:3])))

LANGUAGE: console
CODE:
$ # Use the default Python version, may differ on your machine
$ uv run example.py
3.12.6

$ # Use a specific Python version
$ uv run --python 3.10 example.py
3.10.15

----------------------------------------

TITLE: Handling Contradictory Requirements in Python Package Resolution
DESCRIPTION: Example of contradictory package requirements for different Python versions, demonstrating the need for a forking resolver.

LANGUAGE: python
CODE:
numpy>=2,<3 ; python_version >= "3.11"
numpy>=1.16,<2 ; python_version < "3.11"

----------------------------------------

TITLE: Parsing and Accessing PEP 508 Dependency Specifiers in Rust
DESCRIPTION: This code snippet demonstrates how to use the pep508_rs library to parse a PEP 508 dependency specifier string and access its components. It parses a complex requirement string with extras and version constraints.

LANGUAGE: rust
CODE:
use std::str::FromStr;
use pep508_rs::Requirement;

let marker = r#"requests [security,tests] >= 2.8.1, == 2.8.* ; python_version > "3.8""#;
let dependency_specification = Requirement::from_str(marker).unwrap();
assert_eq!(dependency_specification.name, "requests");
assert_eq!(dependency_specification.extras, Some(vec!["security".to_string(), "tests".to_string()]));

----------------------------------------

TITLE: Initializing uv Project with Application Layout
DESCRIPTION: Command to initialize a uv project with an application layout, creating a pyproject.toml file.

LANGUAGE: console
CODE:
$ uv init --app

----------------------------------------

TITLE: Using Index Commands in Shell
DESCRIPTION: Examples of specifying package indexes via command line arguments and environment variables.

LANGUAGE: shell
CODE:
# On the command line.
$ uv lock --index pytorch=https://download.pytorch.org/whl/cpu
# Via an environment variable.
$ UV_INDEX=pytorch=https://download.pytorch.org/whl/cpu uv lock

----------------------------------------

TITLE: Index Configuration
DESCRIPTION: Configuration for specifying package indexes for dependency resolution

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[tool.uv.sources]
torch = { index = "pytorch" }

----------------------------------------

TITLE: Configuring Path Dependencies
DESCRIPTION: Alternative to workspaces using path dependencies in pyproject.toml, useful when packages need separate virtual environments or have conflicting requirements.

LANGUAGE: toml
CODE:
[project]
name = "albatross"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = ["bird-feeder", "tqdm>=4,<5"]

[tool.uv.sources]
bird-feeder = { path = "packages/bird-feeder" }

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

----------------------------------------

TITLE: Pinning Package to Specific Index in TOML
DESCRIPTION: Configuration for ensuring a specific package is always installed from a particular index.

LANGUAGE: toml
CODE:
[tool.uv.sources]
torch = { index = "pytorch" }

[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"

----------------------------------------

TITLE: Configuring Insecure Host Access in UV using TOML
DESCRIPTION: Configuration snippet for allowing insecure connections to specific hosts in UV package manager through pyproject.toml. This setting bypasses certificate verification for designated hosts, but should be used cautiously and only in trusted environments.

LANGUAGE: toml
CODE:
[tool.uv]
allow-insecure-host = ["example.com"]

----------------------------------------

TITLE: Installing UV via Package Managers
DESCRIPTION: Commands for installing UV through various package managers including pipx, pip, cargo, homebrew, winget, and scoop.

LANGUAGE: console
CODE:
$ pipx install uv

LANGUAGE: console
CODE:
$ pip install uv

LANGUAGE: console
CODE:
$ cargo install --git https://github.com/astral-sh/uv uv

LANGUAGE: console
CODE:
$ brew install uv

LANGUAGE: console
CODE:
$ winget install --id=astral-sh.uv  -e

LANGUAGE: console
CODE:
$ scoop install main/uv

----------------------------------------

TITLE: Explicit Index Configuration in TOML
DESCRIPTION: Configuration for an explicit index that only allows specifically pinned packages.

LANGUAGE: toml
CODE:
[tool.uv.sources]
torch = { index = "pytorch" }

[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

----------------------------------------

TITLE: Installing Build Dependencies on Debian Systems
DESCRIPTION: Command to install required C compiler and build tools on Ubuntu/Debian systems

LANGUAGE: shell
CODE:
sudo apt install build-essential

----------------------------------------

TITLE: Dockerfile for FastAPI Application Deployment
DESCRIPTION: Dockerfile configuration for deploying the FastAPI application using uv, including installing uv, copying the application, installing dependencies, and running the app.

LANGUAGE: dockerfile
CODE:
FROM python:3.12-slim

# Install uv.
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Copy the application into the container.
COPY . /app

# Install the application dependencies.
WORKDIR /app
RUN uv sync --frozen --no-cache

# Run the application.
CMD ["/app/.venv/bin/fastapi", "run", "app/main.py", "--port", "80", "--host", "0.0.0.0"]

----------------------------------------

TITLE: Flat Index Configuration in TOML
DESCRIPTION: Configuration for a flat index that points to a local directory or HTML page with wheel files.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "example"
url = "/path/to/directory"
format = "flat"

----------------------------------------

TITLE: Listing Policy Links in Markdown
DESCRIPTION: This snippet uses Markdown syntax to create a bulleted list of links to various policy documents for the uv project. It includes links to versioning, platform support, and license information.

LANGUAGE: markdown
CODE:
# Policies

- [Versioning](./versioning.md)
- [Platform support](./platforms.md)
- [License](./license.md)

----------------------------------------

TITLE: Specifying Python Version for Running Tools
DESCRIPTION: Demonstrates how to specify a Python version when running a tool. This example runs 'ruff' using Python 3.10.

LANGUAGE: console
CODE:
$ uvx --python 3.10 ruff

----------------------------------------

TITLE: Configuring Cache Keys for Git Commit and pyproject.toml in TOML
DESCRIPTION: This snippet demonstrates how to configure cache keys in pyproject.toml to include both the pyproject.toml file and the Git commit hash. This ensures that the project is rebuilt when either the pyproject.toml file or the Git commit changes.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { git = { commit = true } }]

----------------------------------------

TITLE: Listing Python Package Requirements for Jupyter
DESCRIPTION: This snippet lists all the Python packages and their specific versions required to run Jupyter and its associated tools. It includes direct dependencies and their sub-dependencies, along with comments indicating which package requires each dependency.

LANGUAGE: Text
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile scripts/requirements/jupyter.in
anyio==4.2.0
    # via jupyter-server
argon2-cffi==23.1.0
    # via jupyter-server
argon2-cffi-bindings==21.2.0
    # via argon2-cffi
arrow==1.3.0
    # via isoduration
asttokens==2.4.1
    # via stack-data
async-lru==2.0.4
    # via jupyterlab
attrs==23.2.0
    # via
    #   jsonschema
    #   referencing
babel==2.14.0
    # via jupyterlab-server
beautifulsoup4==4.12.3
    # via nbconvert
bleach==6.1.0
    # via nbconvert
certifi==2023.11.17
    # via requests
cffi==1.16.0
    # via argon2-cffi-bindings
charset-normalizer==3.3.2
    # via requests
comm==0.2.1
    # via
    #   ipykernel
    #   ipywidgets
debugpy==1.8.0
    # via ipykernel
decorator==5.1.1
    # via ipython
defusedxml==0.7.1
    # via nbconvert
executing==2.0.1
    # via stack-data
fastjsonschema==2.19.1
    # via nbformat
fqdn==1.5.1
    # via jsonschema
idna==3.6
    # via
    #   anyio
    #   jsonschema
    #   requests
ipykernel==6.29.0
    # via
    #   jupyter
    #   jupyter-console
    #   jupyterlab
    #   qtconsole
ipython==8.20.0
    # via
    #   ipykernel
    #   ipywidgets
    #   jupyter-console
ipywidgets==8.1.1
    # via jupyter
isoduration==20.11.0
    # via jsonschema
jedi==0.19.1
    # via ipython
jinja2==3.1.3
    # via
    #   jupyter-server
    #   jupyterlab
    #   jupyterlab-server
    #   nbconvert
json5==0.9.14
    # via jupyterlab-server
jsonpointer==2.4
    # via jsonschema
jsonschema==4.21.1
    # via
    #   jupyter-events
    #   jupyterlab-server
    #   nbformat
jsonschema-specifications==2023.12.1
    # via jsonschema
jupyter==1.0.0
jupyter-client==8.6.0
    # via
    #   ipykernel
    #   jupyter-console
    #   jupyter-server
    #   nbclient
    #   qtconsole
jupyter-console==6.6.3
    # via jupyter
jupyter-core==5.7.1
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-console
    #   jupyter-server
    #   jupyterlab
    #   nbclient
    #   nbconvert
    #   nbformat
    #   qtconsole
jupyter-events==0.9.0
    # via jupyter-server
jupyter-lsp==2.2.2
    # via jupyterlab
jupyter-server==2.12.5
    # via
    #   jupyter-lsp
    #   jupyterlab
    #   jupyterlab-server
    #   notebook
    #   notebook-shim
jupyter-server-terminals==0.5.2
    # via jupyter-server
jupyterlab==4.0.11
    # via notebook
jupyterlab-pygments==0.3.0
    # via nbconvert
jupyterlab-server==2.25.2
    # via
    #   jupyterlab
    #   notebook
jupyterlab-widgets==3.0.9
    # via ipywidgets
markupsafe==2.1.4
    # via
    #   jinja2
    #   nbconvert
matplotlib-inline==0.1.6
    # via
    #   ipykernel
    #   ipython
mistune==3.0.2
    # via nbconvert
nbclient==0.9.0
    # via nbconvert
nbconvert==7.14.2
    # via
    #   jupyter
    #   jupyter-server
nbformat==5.9.2
    # via
    #   jupyter-server
    #   nbclient
    #   nbconvert
nest-asyncio==1.6.0
    # via ipykernel
notebook==7.0.7
    # via jupyter
notebook-shim==0.2.3
    # via
    #   jupyterlab
    #   notebook
overrides==7.7.0
    # via jupyter-server
packaging==23.2
    # via
    #   ipykernel
    #   jupyter-server
    #   jupyterlab
    #   jupyterlab-server
    #   nbconvert
    #   qtconsole
    #   qtpy
pandocfilters==1.5.1
    # via nbconvert
parso==0.8.3
    # via jedi
pexpect==4.9.0
    # via ipython
platformdirs==4.1.0
    # via jupyter-core
prometheus-client==0.19.0
    # via jupyter-server
prompt-toolkit==3.0.43
    # via
    #   ipython
    #   jupyter-console
psutil==5.9.8
    # via ipykernel
ptyprocess==0.7.0
    # via
    #   pexpect
    #   terminado
pure-eval==0.2.2
    # via stack-data
pycparser==2.21
    # via cffi
pygments==2.17.2
    # via
    #   ipython
    #   jupyter-console
    #   nbconvert
    #   qtconsole
python-dateutil==2.8.2
    # via
    #   arrow
    #   jupyter-client
python-json-logger==2.0.7
    # via jupyter-events
pyyaml==6.0.1
    # via jupyter-events
pyzmq==25.1.2
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-console
    #   jupyter-server
    #   qtconsole
qtconsole==5.5.1
    # via jupyter
qtpy==2.4.1
    # via qtconsole
referencing==0.33.0
    # via
    #   jsonschema
    #   jsonschema-specifications
    #   jupyter-events
requests==2.31.0
    # via jupyterlab-server
rfc3339-validator==0.1.4
    # via
    #   jsonschema
    #   jupyter-events
rfc3986-validator==0.1.1
    # via
    #   jsonschema
    #   jupyter-events
rpds-py==0.17.1
    # via
    #   jsonschema
    #   referencing
send2trash==1.8.2
    # via jupyter-server
six==1.16.0
    # via
    #   asttokens
    #   bleach
    #   python-dateutil
    #   rfc3339-validator
sniffio==1.3.0
    # via anyio
soupsieve==2.5
    # via beautifulsoup4
stack-data==0.6.3
    # via ipython
terminado==0.18.0
    # via
    #   jupyter-server
    #   jupyter-server-terminals
tinycss2==1.2.1
    # via nbconvert
tornado==6.4
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-server
    #   jupyterlab
    #   notebook
    #   terminado
traitlets==5.14.1
    # via
    #   comm
    #   ipykernel
    #   ipython
    #   ipywidgets
    #   jupyter-client
    #   jupyter-console
    #   jupyter-core
    #   jupyter-events
    #   jupyter-server
    #   jupyterlab
    #   matplotlib-inline
    #   nbclient
    #   nbconvert
    #   nbformat
    #   qtconsole
types-python-dateutil==2.8.19.20240106
    # via arrow
uri-template==1.3.0
    # via jsonschema
urllib3==2.1.0
    # via requests
wcwidth==0.2.13
    # via prompt-toolkit
webcolors==1.13
    # via jsonschema
webencodings==0.5.1
    # via
    #   bleach
    #   tinycss2
websocket-client==1.7.0
    # via jupyter-server
widgetsnbextension==4.0.9
    # via ipywidgets

----------------------------------------

TITLE: Configuring pre-commit for uv-lock in YAML
DESCRIPTION: This snippet shows how to add a pre-commit hook to keep the uv.lock file up to date when pyproject.toml changes.

LANGUAGE: yaml
CODE:
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.11
    hooks:
      - id: uv-lock

----------------------------------------

TITLE: Configuring Cache Keys for pyproject.toml and requirements.txt in TOML
DESCRIPTION: This snippet demonstrates how to configure cache keys in pyproject.toml to include both the pyproject.toml and requirements.txt files. This is useful for projects that read dependencies from a requirements.txt file.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { file = "requirements.txt" }]

----------------------------------------

TITLE: Building with Constraints in Console
DESCRIPTION: Demonstrates how to use the 'uv build' command with build constraints and hash verification for reproducible builds.

LANGUAGE: console
CODE:
$ uv build --build-constraint constraints.txt --require-hashes

----------------------------------------

TITLE: Configuring PyTorch Sources for CPU-only Builds
DESCRIPTION: This snippet shows how to update the pyproject.toml to point torch and torchvision to the desired CPU-only index.

LANGUAGE: toml
CODE:
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu" },
]
torchvision = [
  { index = "pytorch-cpu" },
]

----------------------------------------

TITLE: Configuring Cache Keys with Directory Tracking in TOML
DESCRIPTION: This snippet shows how to configure cache keys to track changes to a specific directory. This will invalidate the cache when the directory is created or removed, but not for changes within the directory.

LANGUAGE: toml
CODE:
[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { dir = "src" }]

----------------------------------------

TITLE: Configuring Index URL in pyproject.toml for uv
DESCRIPTION: Demonstrates how to set a persistent index URL in a pyproject.toml file for uv. This configuration is placed in the [tool.uv] table.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
url = "https://test.pypi.org/simple"
default = true

----------------------------------------

TITLE: Configuring pre-commit for uv-export in YAML
DESCRIPTION: This snippet demonstrates how to set up a pre-commit hook to keep the requirements.txt file updated using uv-export.

LANGUAGE: yaml
CODE:
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.11
    hooks:
      - id: uv-export

----------------------------------------

TITLE: Upgrading a Single Package in a Tool Environment (Python)
DESCRIPTION: Demonstrates how to upgrade a single package (click) in a specific tool environment (black) using uv tool upgrade.

LANGUAGE: console
CODE:
$ uv tool upgrade black --upgrade-package click

----------------------------------------

TITLE: Defining Build Dependencies
DESCRIPTION: This example shows how to define build dependencies in the pyproject.toml file. It includes setuptools as a build dependency for a project using setuptools as its build backend.

LANGUAGE: toml
CODE:
[project]
name = "pandas"
version = "0.1.0"

[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

----------------------------------------

TITLE: Installing uv on Windows
DESCRIPTION: PowerShell command to install uv on Windows systems via the standalone installer

LANGUAGE: bash
CODE:
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"

----------------------------------------

TITLE: Running Tools with Extras
DESCRIPTION: Shows how to run a tool with extras using the --from option. This example runs 'mypy' with the 'faster-cache' and 'reports' extras.

LANGUAGE: console
CODE:
$ uvx --from 'mypy[faster-cache,reports]' mypy --xml-report mypy_report

----------------------------------------

TITLE: Running Specific Versions of Python Tools
DESCRIPTION: Shows how to run a specific version of a Python tool using uvx. This example runs version 0.3.0 of the 'ruff' tool.

LANGUAGE: console
CODE:
$ uvx ruff@0.3.0 check

----------------------------------------

TITLE: Configuring Shell Completion for UV
DESCRIPTION: Shell-specific commands for enabling command-line completion for UV and UVX commands across different shell environments.

LANGUAGE: bash
CODE:
echo 'eval "$(uv generate-shell-completion bash)"' >> ~/.bashrc

LANGUAGE: bash
CODE:
echo 'eval "$(uv generate-shell-completion zsh)"' >> ~/.zshrc

LANGUAGE: bash
CODE:
echo 'uv generate-shell-completion fish | source' >> ~/.config/fish/completions/uv.fish

LANGUAGE: bash
CODE:
echo 'eval (uv generate-shell-completion elvish | slurp)' >> ~/.elvish/rc.elv

----------------------------------------

TITLE: Attempting to Import Installed Tool (Fails)
DESCRIPTION: Demonstrates that installing a tool does not make its modules available in the current environment. This example attempts to import 'ruff' and fails.

LANGUAGE: console
CODE:
$ python -c "import ruff"

----------------------------------------

TITLE: Running FastAPI Application Docker Container
DESCRIPTION: Command to run the Docker container with the FastAPI application, mapping port 8000 on the host to port 80 in the container.

LANGUAGE: console
CODE:
$ docker run -p 8000:80 fastapi-app

----------------------------------------

TITLE: Listing Installed Packages with uv
DESCRIPTION: Commands to list all installed packages in an environment using uv. Includes options for different output formats such as default, JSON, and requirements.txt format.

LANGUAGE: console
CODE:
$ uv pip list

LANGUAGE: console
CODE:
$ uv pip list --format json

LANGUAGE: console
CODE:
$ uv pip freeze

----------------------------------------

TITLE: Displaying Help Menu for Specific uv Command
DESCRIPTION: Demonstrates how to view the help menu for a specific uv command, such as 'uv init', using the --help flag.

LANGUAGE: console
CODE:
$ uv init --help

----------------------------------------

TITLE: Installing Dependencies for Cross-Compilation on Linux
DESCRIPTION: This snippet shows how to install necessary dependencies and Rust components for cross-compiling Windows trampolines on a Linux system.

LANGUAGE: shell
CODE:
sudo apt install llvm clang lld
cargo install cargo-xwin
rustup toolchain install nightly-2025-02-16
rustup component add rust-src --toolchain nightly-2025-02-16-x86_64-unknown-linux-gnu
rustup target add --toolchain nightly-2025-02-16 i686-pc-windows-msvc
rustup target add --toolchain nightly-2025-02-16 x86_64-pc-windows-msvc
rustup target add --toolchain nightly-2025-02-16 aarch64-pc-windows-msvc

----------------------------------------

TITLE: Sample pyproject.toml Configuration
DESCRIPTION: Example content of the pyproject.toml file after initializing the uv project and adding FastAPI as a dependency.

LANGUAGE: toml
CODE:
[project]
name = "uv-fastapi-example"
version = "0.1.0"
description = "FastAPI project"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi[standard]",
]

----------------------------------------

TITLE: Accessing Long Help Menu for uv CLI
DESCRIPTION: Shows how to access the extended help menu for the uv CLI using the 'help' command, which displays more detailed information.

LANGUAGE: console
CODE:
$ uv help

----------------------------------------

TITLE: Setting up Python with uv in GitHub Actions
DESCRIPTION: This snippet shows how to set up Python using uv's python install command or the official GitHub setup-python action. It demonstrates respecting the project's Python version and using the latest compatible version.

LANGUAGE: yaml
CODE:
name: Example

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

----------------------------------------

TITLE: Installing PyTorch using uv pip interface
DESCRIPTION: This snippet demonstrates how to install PyTorch using the uv pip interface, which is similar to the standard pip command but uses uv instead.

LANGUAGE: shell
CODE:
$ uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

----------------------------------------

TITLE: Accessing Long Help Menu for Specific uv Command
DESCRIPTION: Demonstrates how to view the extended help menu for a specific uv command, such as 'uv init', using the 'help' command.

LANGUAGE: console
CODE:
$ uv help init

----------------------------------------

TITLE: Markdown URL Formatting Examples
DESCRIPTION: Demonstrates proper URL formatting in documentation using backticks and angle brackets.

LANGUAGE: markdown
CODE:
<https://astral.sh>

----------------------------------------

TITLE: Specifying Python Package Dependencies
DESCRIPTION: This snippet lists the required Python packages and their specific versions for a project. It includes popular data science libraries like NumPy and pandas, as well as utility packages for date and time handling.

LANGUAGE: text
CODE:
numpy==1.24.2
pandas==2.0.0
python-dateutil==2.8.2
pytz==2023.3
six==1.16.0
tzdata==2023.3

----------------------------------------

TITLE: Installing Package with No Build Isolation in Shell
DESCRIPTION: Example showing how to install a package by first installing wheel and then installing the target package with build isolation disabled.

LANGUAGE: shell
CODE:
uv pip install wheel && uv pip install --no-build-isolation biopython==1.77

----------------------------------------

TITLE: Alternative Methods for Checking uv CLI Version
DESCRIPTION: Demonstrates various alternative commands to check the version of the uv CLI, including shortened flags and subcommand usage.

LANGUAGE: console
CODE:
$ uv --version      # Same output as `uv version`
$ uv -V             # Will not include the build commit and date
$ uv pip --version  # Can be used with a subcommand

----------------------------------------

TITLE: Configuring uv Docker Image in GitLab CI
DESCRIPTION: Sets up a GitLab CI job using a uv Docker image with configurable Python version and base layer. Includes variable configuration for UV version control and link mode settings.

LANGUAGE: yaml
CODE:
variables:
  UV_VERSION: 0.5
  PYTHON_VERSION: 3.12
  BASE_LAYER: bookworm-slim
  # GitLab CI creates a separate mountpoint for the build directory,
  # so we need to copy instead of using hard links.
  UV_LINK_MODE: copy

uv:
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  script:
    # your `uv` commands

----------------------------------------

TITLE: Configuring PyTorch Index for CPU-only Builds
DESCRIPTION: This snippet demonstrates how to configure a PyTorch index for CPU-only builds across all platforms by adding the relevant PyTorch index to the pyproject.toml file.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

----------------------------------------

TITLE: Generating and setting AWS CodeArtifact credentials
DESCRIPTION: Generates an access token and sets credentials for AWS CodeArtifact.

LANGUAGE: bash
CODE:
export AWS_CODEARTIFACT_TOKEN="$(
    aws codeartifact get-authorization-token \
    --domain <DOMAIN> \
    --domain-owner <ACCOUNT_ID> \
    --query authorizationToken \
    --output text
)"

export UV_INDEX_PRIVATE_REGISTRY_USERNAME=aws
export UV_INDEX_PRIVATE_REGISTRY_PASSWORD="$AWS_CODEARTIFACT_TOKEN"

----------------------------------------

TITLE: Uninstalling UV
DESCRIPTION: Commands for completely removing UV from the system, including cleaning cached data and removing binaries.

LANGUAGE: console
CODE:
$ uv cache clean
$ rm -r "$(uv python dir)"
$ rm -r "$(uv tool dir)"

----------------------------------------

TITLE: Configuring PyTorch Accelerators with Optional Dependencies
DESCRIPTION: This snippet shows how to configure PyTorch builds as optional dependencies, allowing users to choose between CPU-only and CUDA-enabled builds using extras.

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.12.0"
dependencies = []

[project.optional-dependencies]
cpu = [
  "torch>=2.6.0",
  "torchvision>=0.21.0",
]
cu124 = [
  "torch>=2.6.0",
  "torchvision>=0.21.0",
]

[tool.uv]
conflicts = [
  [
    { extra = "cpu" },
    { extra = "cu124" },
  ],
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu124", extra = "cu124" },
]
torchvision = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu124", extra = "cu124" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

----------------------------------------

TITLE: Processing and Saving Package Names
DESCRIPTION: Processes the collected API responses by extracting package names and saving them to a text file named 'pypi_10k_most_dependents.txt', with each package name on a new line.

LANGUAGE: python
CODE:
flat_list = []
for response in responses.values():
    for entry in response:
        flat_list.append(entry["name"])
print(flat_list)
Path().parent.joinpath("pypi_10k_most_dependents.txt").write_text("\n".join(flat_list))

----------------------------------------

TITLE: Installing uv using the installer script
DESCRIPTION: Demonstrates how to install uv in a Docker image using the official installer script. This method requires curl to be available in the image.

LANGUAGE: dockerfile
CODE:
FROM python:3.12-slim-bookworm

# The installer requires curl (and certificates) to download the release archive
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates

# Download the latest installer
ADD https://astral.sh/uv/install.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Ensure the installed binary is on the `PATH`
ENV PATH="/root/.local/bin/:$PATH"

----------------------------------------

TITLE: Configuring UV Build Backend for Python Package in pyproject.toml
DESCRIPTION: This TOML configuration sets up a Python package named 'built_by_uv' using the UV build backend. It defines package metadata, dependencies, and build system requirements, demonstrating various features supported by UV.

LANGUAGE: toml
CODE:
[project]
name = "built_by_uv"
version = "0.1.0"
description = "A package built with uv"
readme = "README.md"
requires-python = ">= 3.8"
license = {file = "LICENSE"}
keywords = ["sample", "setuptools", "development"]
authors = [
  {name = "John Smith", email = "john@example.com"},
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "requests",
  "importlib-metadata; python_version < '3.8'",
]

[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

[project.urls]
"Homepage" = "https://github.com/pypa/sampleproject"
"Bug Reports" = "https://github.com/pypa/sampleproject/issues"
"Source" = "https://github.com/pypa/sampleproject/"

[project.scripts]
sample = "sample:main"

[build-system]
requires = ["uv"]
build-backend = "uv.setuptools_legacy_backend"

[tool.uv]
package-dir = "src"
include-packages = ["sample"]
extra-paths = ["scripts"]
data-files = [
  {src = "data/*.dat", dst = "data"}
]


----------------------------------------

TITLE: Initializing Libraries.io API Connection
DESCRIPTION: Sets up the initial connection requirements for the Libraries.io API by importing necessary modules and initializing the API key and response storage dictionary.

LANGUAGE: python
CODE:
"""To update `pypi_10k_most_dependents.txt`, enter your `api_key` from https://libraries.io/account.

The latest version is available at: https://gist.github.com/charliermarsh/07afd9f543dfea68408a4a42cede4be4.
"""

from pathlib import Path
import httpx

api_key = ""
responses = {}

----------------------------------------

TITLE: Building Distributions with uv in Console
DESCRIPTION: Demonstrates how to use the 'uv build' command to create distributable formats for a Python project, and shows the resulting output files.

LANGUAGE: console
CODE:
$ uv build
$ ls dist/
example-0.1.0-py3-none-any.whl
example-0.1.0.tar.gz

----------------------------------------

TITLE: Configuring Named Package Indexes in pyproject.toml
DESCRIPTION: Example of configuring named package indexes to control where packages are downloaded from

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"

----------------------------------------

TITLE: Constraining Django Debug Toolbar Version in Requirements File
DESCRIPTION: Specifies a version constraint for the Django Debug Toolbar package, ensuring it is installed with a version lower than 2.2. This constraint is typically used in a requirements file for Python projects using pip.

LANGUAGE: plaintext
CODE:
django-debug-toolbar<2.2

----------------------------------------

TITLE: Caching uv in GitHub Actions
DESCRIPTION: This snippet demonstrates various caching strategies for uv in GitHub Actions. It shows how to use the built-in caching of astral-sh/setup-uv and manual caching with actions/cache, including cache invalidation and pruning.

LANGUAGE: yaml
CODE:
- name: Enable caching
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true

- name: Define a custom uv cache path
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-local-path: "/path/to/cache"

- name: Define a cache dependency glob
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-dependency-glob: "uv.lock"

- name: Define a cache dependency glob
  uses: astral-sh/setup-uv@v5
  with:
    enable-cache: true
    cache-dependency-glob: "requirements**.txt"

jobs:
  install_job:
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache

    steps:
      # ... setup up Python and uv ...

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      # ... install packages, run tests, etc ...

      - name: Minimize uv cache
        run: uv cache prune --ci

----------------------------------------

TITLE: Example Docker Installation Command
DESCRIPTION: Example showing basic Docker uv installation command mentioned in documentation updates.

LANGUAGE: dockerfile
CODE:
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

----------------------------------------

TITLE: Listing Python Package Dependencies for UV Project Documentation
DESCRIPTION: This snippet enumerates all the Python packages and their versions required for the UV project's documentation. It includes both direct dependencies and their sub-dependencies, along with comments indicating the source of each requirement.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile docs/requirements.in -o docs/requirements.txt --universal -p 3.12
babel==2.15.0
    # via
    #   mkdocs-git-revision-date-localized-plugin
    #   mkdocs-material
black==24.4.2
    # via -r docs/requirements.in
certifi==2024.7.4
    # via requests
charset-normalizer==3.3.2
    # via requests
click==8.1.7
    # via
    #   black
    #   mkdocs
colorama==0.4.6
    # via
    #   click
    #   mkdocs
    #   mkdocs-material
ghp-import==2.1.0
    # via mkdocs
gitdb==4.0.12
    # via gitpython
gitpython==3.1.44
    # via mkdocs-git-revision-date-localized-plugin
idna==3.7
    # via requests
jinja2==3.1.4
    # via
    #   mkdocs
    #   mkdocs-material
linkify-it-py==2.0.3
    # via markdown-it-py
markdown==3.6
    # via
    #   mkdocs
    #   mkdocs-material
    #   pymdown-extensions
markdown-it-py==3.0.0
    # via
    #   mdformat
    #   mdformat-gfm
    #   mdit-py-plugins
markupsafe==2.1.5
    # via
    #   jinja2
    #   mkdocs
mdformat==0.7.17
    # via
    #   -r docs/requirements.in
    #   mdformat-admon
    #   mdformat-gfm
    #   mdformat-mkdocs
    #   mdformat-tables
mdformat-admon==2.0.6
    # via
    #   -r docs/requirements.in
    #   mdformat-mkdocs
mdformat-gfm==0.3.6
    # via mdformat-mkdocs
mdformat-mkdocs==3.0.0
    # via -r docs/requirements.in
mdformat-tables==0.4.1
    # via mdformat-gfm
mdit-py-plugins==0.4.1
    # via
    #   mdformat-admon
    #   mdformat-gfm
    #   mdformat-mkdocs
mdurl==0.1.2
    # via markdown-it-py
mergedeep==1.3.4
    # via
    #   mkdocs
    #   mkdocs-get-deps
mkdocs==1.6.0
    # via
    #   -r docs/requirements.in
    #   mkdocs-git-revision-date-localized-plugin
    #   mkdocs-material
    #   mkdocs-redirects
mkdocs-get-deps==0.2.0
    # via mkdocs
mkdocs-git-revision-date-localized-plugin==1.3.0
    # via -r docs/requirements.in
mkdocs-material==9.5.29
    # via -r docs/requirements.in
mkdocs-material-extensions==1.3.1
    # via mkdocs-material
mkdocs-redirects==1.2.2
    # via -r docs/requirements.in
more-itertools==10.3.0
    # via mdformat-mkdocs
mypy-extensions==1.0.0
    # via black
packaging==24.1
    # via
    #   black
    #   mkdocs
paginate==0.5.6
    # via mkdocs-material
pathspec==0.12.1
    # via
    #   black
    #   mkdocs
platformdirs==4.2.2
    # via
    #   black
    #   mkdocs-get-deps
pygments==2.18.0
    # via mkdocs-material
pymdown-extensions==10.8.1
    # via mkdocs-material
python-dateutil==2.9.0.post0
    # via ghp-import
pytz==2025.1
    # via mkdocs-git-revision-date-localized-plugin
pyyaml==6.0.1
    # via
    #   mkdocs
    #   mkdocs-get-deps
    #   pymdown-extensions
    #   pyyaml-env-tag
pyyaml-env-tag==0.1
    # via mkdocs
regex==2024.5.15
    # via mkdocs-material
requests==2.32.3
    # via mkdocs-material
six==1.16.0
    # via python-dateutil
smmap==5.0.2
    # via gitdb
uc-micro-py==1.0.3
    # via linkify-it-py
urllib3==2.2.2
    # via requests
watchdog==4.0.1
    # via mkdocs

----------------------------------------

TITLE: Configuring Custom Index in pyproject.toml
DESCRIPTION: Shows how to configure a custom package index (like TestPyPI) in the project's pyproject.toml file. This includes specifying the index name, URL, and publish URL.

LANGUAGE: toml
CODE:
[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

----------------------------------------

TITLE: Python Version File Example
DESCRIPTION: Example of a .python-version file reference mentioned in the changelog for Python version management.

LANGUAGE: txt
CODE:
3.11.0

----------------------------------------

TITLE: UV Docker Commands Example
DESCRIPTION: Shows a complete Docker setup with UV commands for package installation and testing.

LANGUAGE: dockerfile
CODE:
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:0.5.24-debian-slim

RUN uv init /mre
WORKDIR /mre
RUN uv add pydantic
RUN uv sync
RUN uv run -v python -c "import pydantic"

----------------------------------------

TITLE: Complete Example of PyTorch CPU-only Configuration
DESCRIPTION: This snippet provides a complete example of a project configuration that uses PyTorch's CPU-only builds on all platforms.

LANGUAGE: toml
CODE:
[project]
name = "project"
version = "0.1.0"
requires-python = ">=3.12.0"
dependencies = [
  "torch>=2.6.0",
  "torchvision>=0.21.0",
]

[tool.uv.sources]
torch = [
    { index = "pytorch-cpu" },
]
torchvision = [
    { index = "pytorch-cpu" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

----------------------------------------

TITLE: UV Run Script Example
DESCRIPTION: Example of using uv run with stdin mentioned in documentation updates.

LANGUAGE: bash
CODE:
echo "print('hello')" | uv run python -

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: Lists required Python packages with pinned versions. Includes Django 2.1.15 and pytz 2023.3 for timezone support.

LANGUAGE: plaintext
CODE:
django==2.1.15
pytz==2023.3

----------------------------------------

TITLE: Platform-Specific Index Configuration in TOML
DESCRIPTION: Advanced configuration showing how to use different package indexes based on platform-specific markers.

LANGUAGE: toml
CODE:
[project]
dependencies = ["torch"]

[tool.uv.sources]
torch = [
  { index = "pytorch-cu118", marker = "sys_platform == 'darwin'"},
  { index = "pytorch-cu124", marker = "sys_platform != 'darwin'"},
]

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"

----------------------------------------

TITLE: Configuring Renovate Lock File Maintenance for uv
DESCRIPTION: Configuration for enabling automatic lockfile maintenance in Renovate bot. This setting allows Renovate to regularly update the uv.lock file to refresh transitive dependencies.

LANGUAGE: json
CODE:
{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  lockFileMaintenance: {
    enabled: true,
  },
}

----------------------------------------

TITLE: Configuring pre-commit for custom pip-compile in YAML
DESCRIPTION: This snippet demonstrates how to modify the pip-compile hook for alternative files by adjusting args and files parameters.

LANGUAGE: yaml
CODE:
repos:
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.6.11
    hooks:
      # Compile requirements
      - id: pip-compile
        args: [requirements-dev.in, -o, requirements-dev.txt]
        files: ^requirements-dev\.(in|txt)$

----------------------------------------

TITLE: Specifying Python Package Dependencies for UV Project
DESCRIPTION: This snippet lists the required Python packages and their versions for the UV project. It includes tqdm version 4.65.0 for progress bars and tomli-w version 1.0.0 for TOML writing. These packages are noted to be small and quick to install.

LANGUAGE: Python
CODE:
tqdm==4.65.0
tomli-w==1.0.0

----------------------------------------

TITLE: Creating a Virtual Environment with Automatic Python Download
DESCRIPTION: This snippet shows how uv automatically downloads the latest Python version when creating a new virtual environment if no Python versions are installed on the system.

LANGUAGE: console
CODE:
$ uv venv

----------------------------------------

TITLE: Installing uv with custom path on Windows
DESCRIPTION: This PowerShell command installs uv to a custom path on Windows systems by setting the UV_INSTALL_DIR environment variable before executing the installation script.

LANGUAGE: powershell
CODE:
powershell -ExecutionPolicy ByPass -c {$env:UV_INSTALL_DIR = "C:\Custom\Path";irm https://astral.sh/uv/install.ps1 | iex}

----------------------------------------

TITLE: Running Python Command in Project Environment with uv
DESCRIPTION: Demonstrates how to use uv run to execute a Python command within the project's virtual environment.

LANGUAGE: console
CODE:
$ uv run python -c "import example"

----------------------------------------

TITLE: Rust Extension Module
DESCRIPTION: Rust implementation of a Python extension module using PyO3.

LANGUAGE: rust
CODE:
use pyo3::prelude::*;

#[pyfunction]
fn hello_from_bin() -> String {
    "Hello from example-ext!".to_string()
}

#[pymodule]
fn _core(m: &Bound<'_, PyModule>) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(hello_from_bin, m)?)?;
    Ok(())
}

----------------------------------------

TITLE: Build Constraints Definition
DESCRIPTION: Example of defining specific build constraints for packages

LANGUAGE: python
CODE:
setuptools==75.0.0

----------------------------------------

TITLE: Configuring Global Workspace Sources
DESCRIPTION: Advanced workspace configuration showing how to set global source definitions that apply to all workspace members, with the option to override in individual packages.

LANGUAGE: toml
CODE:
[project]
name = "albatross"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = ["bird-feeder", "tqdm>=4,<5"]

[tool.uv.sources]
bird-feeder = { workspace = true }
tqdm = { git = "https://github.com/tqdm/tqdm" }

[tool.uv.workspace]
members = ["packages/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

----------------------------------------

TITLE: Configuring Workspace Sources
DESCRIPTION: Example of configuring workspace sources in pyproject.toml, showing how to specify workspace dependencies and external package sources that apply to all workspace members.

LANGUAGE: toml
CODE:
[project]
name = "albatross"
version = "0.1.0"
requires-python = ">=3.12"
dependencies = ["bird-feeder", "tqdm>=4,<5"]

[tool.uv.sources]
bird-feeder = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

----------------------------------------

TITLE: Environment Variable Reference
DESCRIPTION: Example of proper UV environment variable capitalization.

LANGUAGE: text
CODE:
UV_PYTHON

----------------------------------------

TITLE: Requesting Specific Dependency Versions with uv run
DESCRIPTION: Illustrates how to use the --with option to request specific versions of dependencies for a single invocation.

LANGUAGE: console
CODE:
$ uv run --with httpx==0.26.0 python -c "import httpx; print(httpx.__version__)"
0.26.0
$ uv run --with httpx==0.25.0 python -c "import httpx; print(httpx.__version__)"
0.25.0

----------------------------------------

TITLE: Markdown Changelog Entry
DESCRIPTION: A standardized changelog entry format used throughout the document to track version changes, including sections for enhancements, bug fixes, and other modifications.

LANGUAGE: markdown
CODE:
## 0.6.11

### Enhancements

- Add dependents ("via ..." comments) in `uv export` command ([#12350](https://github.com/astral-sh/uv/pull/12350))
- Bump least-recent non-EOL macOS version to 13.0 ([#12518](https://github.com/astral-sh/uv/pull/12518))
- Support `--find-links`-style "flat" indexes in `[[tool.uv.index]]` ([#12407](https://github.com/astral-sh/uv/pull/12407))
- Distinguish between `-q` and `-qq` ([#12300](https://github.com/astral-sh/uv/pull/12300))

----------------------------------------

TITLE: Configuring UV System Python in GitLab CI
DESCRIPTION: Shows how to configure UV to use system Python installation instead of virtual environments by setting the UV_SYSTEM_PYTHON variable at the workflow level.

LANGUAGE: yaml
CODE:
variables:
  UV_SYSTEM_PYTHON: 1

# [...]

----------------------------------------

TITLE: Using Latest Version of Ruff with uvx Ignoring Installed Version (Python)
DESCRIPTION: Shows how to use the latest version of Ruff with uvx, ignoring the installed version by using the @latest suffix.

LANGUAGE: console
CODE:
$ uvx ruff@latest --version
0.6.2

----------------------------------------

TITLE: Installing Python Test Environments
DESCRIPTION: Command to install required Python versions for testing UV

LANGUAGE: shell
CODE:
cargo run python install

----------------------------------------

TITLE: Using Frozen Lockfile in uv
DESCRIPTION: Demonstrates how to use the --frozen option to use the lockfile without checking if it's up-to-date. This can be useful for consistent builds or deployments.

LANGUAGE: console
CODE:
$ uv run --frozen ...

----------------------------------------

TITLE: Edge Cases in Editable Installation
DESCRIPTION: Special cases including unterminated extras brackets and comments. Shows UV's flexibility in parsing various formats.

LANGUAGE: ini
CODE:
-e ./editable[d
-e ./editable # comment
-e ./editable #comment

----------------------------------------

TITLE: Fetching Package Data from Libraries.io API
DESCRIPTION: Iterates through 100 pages of PyPI package data, making API requests to Libraries.io to fetch packages sorted by dependent count. Each page contains 100 entries, totaling 10,000 packages.

LANGUAGE: python
CODE:
for i in range(100):  # 100 pages with 100 per page -> 10k
    print(i)
    if i not in responses:
        # https://libraries.io/api#project-search
        sort = "dependents_count"
        url = f"https://libraries.io/api/search?platforms=Pypi&per_page=100&page={i + 1}&sort{sort}&api_key={api_key}"
        responses[i] = httpx.get(url, timeout=30.0).json()

----------------------------------------

TITLE: Specifying Python Package Dependencies with Version Constraints and Hash Values
DESCRIPTION: This snippet demonstrates how to specify Python package dependencies with version constraints, platform-specific requirements, and hash values for security. It includes examples for werkzeug, urllib3, ansicon, requests-oauthlib, and psycopg2.

LANGUAGE: Text
CODE:
# Includes more styles than poetry uses
werkzeug==2.2.3 ; python_version >= "3.8" and python_version < "4.0" --hash=sha256:2e1ccc9417d4da358b9de6f174e3ac094391ea1d4fbef2d667865d819dfd0afe
urllib3==1.26.15 ; python_version >= "3.8" and python_version < "4" \
    --hash sha256:8a388717b9476f934a21484e8c8e61875ab60644d29b9b39e11e4b9dc1c6b305
ansicon==1.89.0 ; python_version >= "3.8" and python_version < "4" and platform_system == "Windows" \
    --hash=sha256:e4d039def5768a47e4afec8e89e83ec3ae5a26bf00ad851f914d1240b444d2b1
requests-oauthlib==1.3.1 ; python_version >= "3.8" and python_version < "4.0" \
    --hash=sha256:2577c501a2fb8d05a304c09d090d6e47c306fef15809d102b327cf8364bddab5 \
    --hash=sha256:75beac4a47881eeb94d5ea5d6ad31ef88856affe2332b9aafb52c6452ccf0d7a
psycopg2==2.9.5 ; python_version >= "3.8" and python_version < "4.0" \
    --hash=sha256:093e3894d2d3c592ab0945d9eba9d139c139664dcf83a1c440b8a7aa9bb21955 \
    --hash=sha256:190d51e8c1b25a47484e52a79638a8182451d6f6dff99f26ad9bd81e5359a0fa \
    --hash=sha256:1a5c7d7d577e0eabfcf15eb87d1e19314c8c4f0e722a301f98e0e3a65e238b4e \
    --hash=sha256:1e5a38aa85bd660c53947bd28aeaafb6a97d70423606f1ccb044a03a1203fe4a

----------------------------------------

TITLE: UV Generated Requirements File with Package Dependencies
DESCRIPTION: A comprehensive requirements file listing Python package dependencies with exact versions, generated by UV pip compile. Includes core packages like Sphinx, Trio, and their dependencies with version constraints. Each entry shows which other packages depend on it.

LANGUAGE: pip
CODE:
alabaster==0.7.15
    # via sphinx
attrs==23.2.0
    # via outcome
babel==2.14.0
    # via sphinx
certifi==2023.11.17
    # via requests
cffi==1.16.0
    # via cryptography
charset-normalizer==3.3.2
    # via requests
click==8.1.7
    # via towncrier
cryptography==41.0.7
    # via pyopenssl
docutils==0.19
    # via
    #   sphinx
    #   sphinx-rtd-theme
exceptiongroup==1.2.0
idna==3.6
    # via requests
imagesize==1.4.1
    # via sphinx
immutables==0.20
incremental==22.10.0
    # via towncrier
jinja2==3.1.2
    # via
    #   sphinx
    #   towncrier
markupsafe==2.1.3
    # via jinja2
outcome==1.3.0.post0
packaging==23.2
    # via sphinx
pycparser==2.21
    # via cffi
pygments==2.17.2
    # via sphinx
pyopenssl==23.3.0
requests==2.31.0
    # via sphinx
sniffio==1.3.0
snowballstemmer==2.2.0
    # via sphinx
sortedcontainers==2.4.0
sphinx==6.1.3
    # via
    #   sphinx-rtd-theme
    #   sphinxcontrib-applehelp
    #   sphinxcontrib-devhelp
    #   sphinxcontrib-htmlhelp
    #   sphinxcontrib-jquery
    #   sphinxcontrib-qthelp
    #   sphinxcontrib-serializinghtml
    #   sphinxcontrib-trio
sphinx-rtd-theme==2.0.0
sphinxcontrib-applehelp==1.0.7
    # via sphinx
sphinxcontrib-devhelp==1.0.5
    # via sphinx
sphinxcontrib-htmlhelp==2.0.4
    # via sphinx
sphinxcontrib-jquery==4.1
    # via sphinx-rtd-theme
sphinxcontrib-jsmath==1.0.1
    # via sphinx
sphinxcontrib-qthelp==1.0.6
    # via sphinx
sphinxcontrib-serializinghtml==1.1.9
    # via sphinx
sphinxcontrib-trio==1.1.2
tomli==2.0.1
    # via towncrier
towncrier==23.11.0
urllib3==2.1.0
    # via requests

----------------------------------------

TITLE: UV Basic Script Commands
DESCRIPTION: Basic script showing common UV commands for package management and execution.

LANGUAGE: bash
CODE:
uv init
uv add pydantic
uv sync
uv run -v python -c "import pydantic"

----------------------------------------

TITLE: Defining Python Package Requirements with UV
DESCRIPTION: This code snippet defines the required Python packages and their versions for a project using dtlssocket. It specifies Cython as a dependency for dtlssocket.

LANGUAGE: Python
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile scripts/requirements/dtlssocket.in
cython==0.29.37
    # via dtlssocket
dtlssocket==0.1.16

----------------------------------------

TITLE: Python Script with Inline Metadata for Isolated Execution
DESCRIPTION: Demonstrates a Python script with inline metadata declaring dependencies, which can be run in isolation using uv run.

LANGUAGE: python
CODE:
# /// script
# dependencies = [
#   "httpx",
# ]
# ///

import httpx

resp = httpx.get("https://peps.python.org/api/peps.json")
data = resp.json()
print([(k, v["title"]) for k, v in data.items()][:10])

----------------------------------------

TITLE: Specifying Dependencies with Incorrect Formatting in UV Project
DESCRIPTION: This snippet demonstrates an incorrect way to specify dependencies in a UV project configuration. It shows a disallowed format where there's missing whitespace before the colon in the Python version and OS name conditions. This example serves as a reminder of proper formatting requirements in UV configurations.

LANGUAGE: plaintext
CODE:
# Disallowed (missing whitespace before colon)
-e ./editable;python_version >= "3.9" and os_name == "posix"

----------------------------------------

TITLE: Testing Trampolines on Windows
DESCRIPTION: This snippet provides commands to perform a basic smoke test of the trampolines on a Windows machine, including creating a virtual environment and running a Python tool.

LANGUAGE: shell
CODE:
cargo clean
cargo run venv
cargo run pip install black
.venv\Scripts\black --version

----------------------------------------

TITLE: Specifying Python Package Requirements with UV
DESCRIPTION: Requirements file that defines numpy version 1.24.2 as a project dependency. This file is used by UV package manager to install the specified version of numpy.

LANGUAGE: plaintext
CODE:
numpy==1.24.2

----------------------------------------

TITLE: Checking Installed Tool Version
DESCRIPTION: Shows how to check the version of an installed tool. This example checks the version of the 'ruff' tool.

LANGUAGE: console
CODE:
$ ruff --version

----------------------------------------

TITLE: Invalid editable package installation syntax in pip/uv
DESCRIPTION: Example showing incorrect syntax for editable package installation where the comment hash lacks required preceding whitespace. This format is not allowed and will cause errors.

LANGUAGE: pip
CODE:
-e ./editable# comment

----------------------------------------

TITLE: Standard Editable Installation
DESCRIPTION: Basic editable installation syntax with extras. Shows both standard format and pip-incompatible whitespace variations.

LANGUAGE: ini
CODE:
-e ./editable[d,dev]
-e ./editable[d, dev]

----------------------------------------

TITLE: Configuring Include and Exclude Patterns in TOML
DESCRIPTION: Example TOML configuration for specifying include and exclude patterns for directory filtering. This demonstrates how users can select paths within a project using glob patterns.

LANGUAGE: toml
CODE:
include = ["src", "License.txt", "resources/icons/*.svg"]
exclude = ["target", "/dist", ".cache", "*.tmp"]

----------------------------------------

TITLE: Build System Configuration
DESCRIPTION: Example of defining build system requirements in pyproject.toml

LANGUAGE: toml
CODE:
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

----------------------------------------

TITLE: Using PEP440 Version and VersionSpecifier in Rust
DESCRIPTION: This snippet demonstrates how to use the pep440_rs library to parse and compare version numbers and specifiers. It shows creating Version and VersionSpecifier objects from strings, checking if a version matches a specifier, and using multiple version specifiers.

LANGUAGE: rust
CODE:
use std::str::FromStr;
use pep440_rs::{parse_version_specifiers, Version, VersionSpecifier};

let version = Version::from_str("1.19").unwrap();
let version_specifier = VersionSpecifier::from_str("==1.*").unwrap();
assert!(version_specifier.contains(&version));
let version_specifiers = parse_version_specifiers(">=1.16, <2.0").unwrap();
assert!(version_specifiers.contains(&version));

----------------------------------------

TITLE: Generating Benchmark Graphs with UV Developer Tools
DESCRIPTION: Commands to generate visualization graphs from benchmark results using UV developer tools. Requires the Roboto Font for proper label rendering.

LANGUAGE: shell
CODE:
cargo run -p uv-dev --all-features render-benchmarks resolve-warm.json --title "Warm Resolution"
cargo run -p uv-dev --all-features render-benchmarks resolve-cold.json --title "Cold Resolution"
cargo run -p uv-dev --all-features render-benchmarks install-warm.json --title "Warm Installation"
cargo run -p uv-dev --all-features render-benchmarks install-cold.json --title "Cold Installation"

----------------------------------------

TITLE: Tracing Exports Commands
DESCRIPTION: Commands for analyzing concurrency using tracing-durations-export

LANGUAGE: shell
CODE:
RUST_LOG=uv=info TRACING_DURATIONS_FILE=target/traces/jupyter.ndjson cargo run --features tracing-durations-export --profile profiling -- pip compile scripts/requirements/jupyter.in

RUST_LOG=uv=info TRACING_DURATIONS_FILE=target/traces/jupyter.ndjson cargo run --features tracing-durations-export --bin uv-dev --profile profiling -- resolve jupyter

----------------------------------------

TITLE: Generating Requirements File with uv
DESCRIPTION: Command used to autogenerate the requirements file using uv, a Python package installer and resolver.

LANGUAGE: Shell
CODE:
uv pip compile scripts/requirements/flyte.in