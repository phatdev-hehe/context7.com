TITLE: Implementing Document Chunking with Camel DSL in Java
DESCRIPTION: Demonstrates how to use the Chunking DSL to tokenize documents by paragraph with specified token limits and overlap settings. The route reads from a Kafka topic, processes the chunks, and sends them to another Kafka topic.

LANGUAGE: java
CODE:
from("kafka:documents")
	.tokenize(tokenizer()
			.byParagraph()
			.maxTokens(1024)
			.maxOverlap(10)
			.using(LangChain4jTokenizerDefinition.TokenizerType.OPEN_AI)
			.end())
	.split().body()
	.to("kafka:ingestion");

----------------------------------------

TITLE: MNIST Image Recognition Implementation
DESCRIPTION: Complete Java implementation for handwritten digit recognition using TensorFlow Serving's Predict API

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.10.0@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-tensorflow-serving

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;
import javax.imageio.ImageIO;
import org.apache.camel.Exchange;
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.builder.RouteBuilder;
import org.tensorflow.framework.DataType;
import org.tensorflow.framework.TensorProto;
import org.tensorflow.framework.TensorShapeProto;
import org.tensorflow.framework.TensorShapeProto.Dim;
import com.google.protobuf.Int64Value;
import tensorflow.serving.Model.ModelSpec;
import tensorflow.serving.Predict.PredictRequest;
import tensorflow.serving.Predict.PredictResponse;

public class predict extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("file:data?noop=true&recursive=true&include=.*\.png")
            .process(this::toPredictRequest)   
            .to("tensorflow-serving:predict?modelName=mnist&modelVersion=1")
            .process(this::argmax)             
            .log("${headers.camelFileName} => ${body}");
    }

    void toPredictRequest(Exchange exchange) { 
        byte[] body = exchange.getMessage().getBody(byte[].class);
        List<Float> data = preprocess(body);
        TensorProto inputs = TensorProto.newBuilder()
                .setDtype(DataType.DT_FLOAT)
                .setTensorShape(TensorShapeProto.newBuilder()
                        .addDim(Dim.newBuilder().setSize(28))
                        .addDim(Dim.newBuilder().setSize(28)))
                .addAllFloatVal(data)
                .build();
        PredictRequest request = PredictRequest.newBuilder()
                .putInputs("keras_tensor", inputs)
                .build();
        exchange.getMessage().setBody(request);
    }

    List<Float> preprocess(byte[] data) {      
        try {
            BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));
            int width = image.getWidth();
            int height = image.getHeight();
            if (width != 28 || height != 28) {
                throw new RuntimeCamelException("Image size must be 28x28");
            }
            List<Float> normalised = new ArrayList<>(width * height);
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int rgb = image.getRGB(x, y);
                    normalised.add((rgb & 0xFF) / 255.0f);
                }
            }
            return normalised;
        } catch (IOException e) {
            throw new RuntimeCamelException("Error reading image", e);
        }
    }

    void argmax(Exchange exchange) {           
        PredictResponse response = exchange.getMessage().getBody(PredictResponse.class);
        TensorProto tensor = response.getOutputsOrThrow("output_0");
        int result = IntStream.range(0, tensor.getFloatValCount())
                .reduce((max, i) -> tensor.getFloatVal(max) > tensor.getFloatVal(i) ? max : i)
                .orElseThrow();
        exchange.getMessage().setBody(result);
    }
}

----------------------------------------

TITLE: Implementing WhatsApp Chatbot Route in Apache Camel
DESCRIPTION: Main route definition that handles incoming WhatsApp messages, processes them through an AI agent, and sends responses back. Uses webhook integration and JSON path processing for message handling.

LANGUAGE: java
CODE:
@Autowired
ConversationalAIAgent agent;

...

from("webhook:whatsapp:{{camel.component.whatsapp.phone-number-id}}")
   .log("${body}")
   .choice().when().jsonpath("$.entry[0].changes[0].value.messages", true)
       .setVariable("PhoneNumber", jsonpath("$.entry[0].changes[0].value.contacts[0].wa_id"))
       .setBody(jsonpath("$.entry[0].changes[0].value.messages[0].text.body"))
       .bean(agent)
       .convertBodyTo(TextMessageRequest.class)
       .to("whatsapp:{{camel.component.whatsapp.phone-number-id}}")
   .end();

----------------------------------------

TITLE: Using Camel Annotations with LangChain4j AI Service Method in Java
DESCRIPTION: Java code snippet demonstrating how to use Camel parameter binding annotations on a LangChain4j AI service method to customize the LLM prompt with dynamic and static values.

LANGUAGE: java
CODE:
@UserMessage("Given the text delimited by triple back ticks ```{body}```. What is the price of the car {carName} with equipment level {carLevel} ?")
@Handler
String getCarPrice(@Body String body, @Header("carName") String carName, @Bean(ref = "myBean", method = "getLevel") String carLevel);

----------------------------------------

TITLE: Comparing Classic URI and Type-Safe Endpoint DSL in Java
DESCRIPTION: This snippet demonstrates the difference between using classic URI strings and the new type-safe Endpoint DSL for configuring endpoints in Camel 3. The example shows how to set up a timer source and a SEDA destination with specific parameters.

LANGUAGE: java
CODE:
from("timer:click?period=3000&fixedRate=true")
    .to("seda:foo?blockWhenFull=true");

from(timer("click").period(3000).fixedRate(true))
    .to(seda("foo").blockWhenFull(true));

----------------------------------------

TITLE: Defining and Using Data Types in Camel 4 Java DSL
DESCRIPTION: Demonstrates how to declare a transformer, create a data type, and use it in a Camel route to transform a message body to base64 encoding.

LANGUAGE: java
CODE:
public class DemoRoute extends EndpointRouteBuilder {
    @Override
    public void configure() throws Exception {
        transformer().name("base64")
                .withDataFormat(dataFormat().base64().end());
        DataType base64 = new DataType("base64");


        from(timer("tick"))
                .setBody()
                .constant("Camel rocks!")
                .transform(base64)
                .to(log("info"));
    }
}

----------------------------------------

TITLE: Sending Raw Text Conversations to Camel Route
DESCRIPTION: Shell commands to copy and move transcript files for processing by the Camel route.

LANGUAGE: shell
CODE:
cd camel-quarkus-examples/data-extract-langchain4j/
cp -rf src/test/resources/transcripts/ target/transcripts-tmp
mv target/transcripts-tmp/*.json target/transcripts/

----------------------------------------

TITLE: Invoking Extraction Service in Camel Route
DESCRIPTION: Java code snippet showing how to use the extraction service in a Camel route using bean binding.

LANGUAGE: java
CODE:
@Override
protected RouteBuilder createRouteBuilder() {
...
  from("...")
    .bean(extractionService)
    .bean(prettyPrintCustomPojo);
...
}

----------------------------------------

TITLE: Implementing Camel Component Class in Java
DESCRIPTION: Java code for the main Camel Component class, extending DefaultComponent and creating endpoints.

LANGUAGE: java
CODE:
@Component("chuck")
public class ChuckComponent extends DefaultComponent {
    @Override
    protected Endpoint createEndpoint(final String uri, String remaining, final Map<String, Object> parameters) throws Exception {
        final ChuckConfiguration configuration = new ChuckConfiguration();
        //â€¦
    }
}

----------------------------------------

TITLE: Integrating Embeddings with Chunked Data in Camel
DESCRIPTION: Shows how to combine the Chunking DSL with embedding functionality, processing data through LangChain4j embeddings and storing the results in Qdrant vector database.

LANGUAGE: java
CODE:
from("kafka:ingestion")
	.to("langchain4j-embeddings:myEmbedding")
	.setHeader(Qdrant.Headers.ACTION).constant(QdrantAction.UPSERT)
	.transform(new DataType("qdrant:embeddings"))
	.toF("qdrant:%s", configuration.qdrant().collection().name());

----------------------------------------

TITLE: Implementing Speech to Text Processing with Camel DJL
DESCRIPTION: Java implementation for speech recognition and sentiment analysis using wav2vec 2.0 and DistilBERT models through Camel DJL component. The route processes audio files, converts speech to text, and performs sentiment analysis.

LANGUAGE: java
CODE:
// camel-k: dependency=camel:djl
//DEPS ai.djl.pytorch:pytorch-engine:0.29.0
//DEPS ai.djl.pytorch:pytorch-model-zoo:0.29.0

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import org.apache.camel.builder.RouteBuilder;
import ai.djl.MalformedModelException;
import ai.djl.Model;
import ai.djl.modality.audio.translator.SpeechRecognitionTranslator;
import ai.djl.util.ZipUtils;

public class speech_to_text extends RouteBuilder {

    static final String MODEL_URL = "https://resources.djl.ai/test-models/pytorch/wav2vec2.zip";
    static final String MODEL_NAME = "wav2vec2.ptl";

    @Override
    public void configure() throws Exception {
        loadSpeechToTextModel();

        from("file:data/inbox?include=.*\\.wav")
            .log("Processing: ${headers.camelFileName}")
            .to("djl:audio?model=SpeechToTextModel&translator=SpeechToTextTranslator")
            .setBody(simple("${body.toLowerCase()}"))
            .log("  => ${body}")
            .to("djl:nlp/sentiment_analysis?artifactId=distilbert")
            .log("  => ${body.best}");
    }

    void loadSpeechToTextModel() throws IOException, MalformedModelException, URISyntaxException {
        var model = Model.newInstance(MODEL_NAME);
        var modelDir = Files.createTempDirectory(MODEL_NAME);
        ZipUtils.unzip(new URI(MODEL_URL).toURL().openStream(), modelDir);
        model.load(modelDir);

        var context = getContext();
        context.getRegistry().bind("SpeechToTextModel", model);
        context.getRegistry().bind("SpeechToTextTranslator", new SpeechRecognitionTranslator());
    }
}

----------------------------------------

TITLE: Creating a Camel Route for Processing Debezium Events
DESCRIPTION: This Java class defines a Camel route that listens for changes captured by Debezium from a PostgreSQL database and inserts new records into a MongoDB database.

LANGUAGE: java
CODE:
import java.util.Map;

import org.apache.camel.builder.RouteBuilder;

public class DebeziumRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        from("debezium-postgres:my_connector")
        .log("${body}")
        .choice()
          .when(header("CamelDebeziumOperation").isEqualTo("c"))
              .convertBodyTo(Map.class)
              .to("mongodb:mydb?database={{mongodb.database}}&collection={{mongodb.collection}}&operation=insert");
    }
}

----------------------------------------

TITLE: Implementing Image to Text Processing with Camel DJL
DESCRIPTION: Java implementation for image processing using SSD and ResNet models through Camel DJL component. The route reads image files, performs object detection and classification, and processes results through WordNet for hypernym lookup.

LANGUAGE: java
CODE:
// camel-k: dependency=camel:djl
//DEPS ai.djl.pytorch:pytorch-engine:0.29.0
//DEPS ai.djl.pytorch:pytorch-model-zoo:0.29.0
//DEPS net.sf.extjwnl:extjwnl:2.0.5
//DEPS net.sf.extjwnl:extjwnl-data-wn31:1.2

import java.util.List;
import org.apache.camel.Exchange;
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.djl.DJLConstants;
import ai.djl.modality.Classifications;
import ai.djl.modality.cv.Image;
import net.sf.extjwnl.data.POS;
import net.sf.extjwnl.data.PointerUtils;
import net.sf.extjwnl.dictionary.Dictionary;

public class image_to_text extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("file:data/inbox?include=.*\\.(jpg|png)")
            .log("Processing: ${headers.camelFileName}")
            .to("djl:cv/object_detection?artifactId=ssd")
            .convertBodyTo(Image[].class)
            .split(body())
                .to("djl:cv/image_classification?artifactId=resnet")
                .process(this::extractClassName)
                .process(this::addHypernym)
                .log("  => ${body}");
    }

    void extractClassName(Exchange exchange) {
        var body = exchange.getMessage().getBody(Classifications.class);
        var className = body.best().getClassName().split(",")[0].split(" ", 2)[1];
        exchange.getMessage().setBody(className);
    }

    void addHypernym(Exchange exchange) throws Exception {
        var className = exchange.getMessage().getBody(String.class);
        var dic = Dictionary.getDefaultResourceInstance();
        var word = dic.getIndexWord(POS.NOUN, className);
        if (word == null) {
            throw new RuntimeCamelException("Word not found: " + className);
        }
        var hypernyms = PointerUtils.getDirectHypernyms(word.getSenses().get(0));
        var hypernym = hypernyms.stream()
                .map(h -> h.getSynset().getWords().get(0).getLemma())
                .findFirst().orElse(className);
        exchange.getMessage().setBody(List.of(className, hypernym));
    }
}

----------------------------------------

TITLE: Implementing Custom Data Type Transformer in Java
DESCRIPTION: Shows how to create a custom uppercase transformer and use it with a data type in a Camel route.

LANGUAGE: java
CODE:
public class DemoRoute extends EndpointRouteBuilder {
   @Override
   public void configure() throws Exception {
       transformer().name("uppercase")
                 .withJava(UppercaseTransformer.class);


       from(timer("tick"))
           .setBody()
               .constant("Camel rocks!")
           .transform(new DataType("uppercase"))
           .to(log("info"));
   }
}

LANGUAGE: java
CODE:
@DataTypeTransformer(name = "uppercase")
public class UppercaseTransformer extends Transformer {
   @Override
   public void transform(Message message,
                         DataType from,
                         DataType to) throws Exception {
      message.setBody(message.getBody(String.class)
                             .toUpperCase());
   }
}

----------------------------------------

TITLE: Setting Variable using JQ Expression in YAML DSL
DESCRIPTION: YAML DSL snippet demonstrating how to set a variable using a JQ expression. It extracts the alcohol percentage from a JSON structure, removes the '%' sign, and converts the result to a float.

LANGUAGE: yaml
CODE:
- setVariable:
    name: alc2
    expression:
      jq:
        expression: .alcohol | rtrimstr("%")
        source: beer2
        resultType: float

----------------------------------------

TITLE: Configuring Cloud Properties in Camel Application (YAML)
DESCRIPTION: Example of a Camel application configuration using cloud properties, demonstrating how to set up a timer route that uses a property value in the message body.

LANGUAGE: yaml
CODE:
- from:
    uri: "timer:yaml"
    parameters:
      period: "1000"
    steps:
      - setBody:
          simple: "Hello Camel from {{my-property}}"
      - log: "${body}"

----------------------------------------

TITLE: Configuring Data Types in Camel K Pipe YAML
DESCRIPTION: Shows how to configure input and output data types when referencing Kamelets in a Camel K Pipe definition.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Pipe
metadata:
 name: aws-s3-to-http
spec:
 integration:
   dependencies:
   - "camel:cloudevents"
 source:
   ref:
     kind: Kamelet
     apiVersion: camel.apache.org/v1
     name: aws-s3-source
   properties:
     bucketNameOrArn: "{{aws.s3.bucketNameOrArn}}"
     accessKey: "{{aws.s3.accessKey}}"
     secretKey: "{{aws.s3.secretKey}}"
   dataTypes:
     out:
       format: aws2-s3:application-cloudevents
 sink:
   ref:
     kind: Kamelet
     apiVersion: camel.apache.org/v1
     name: http-sink
   dataTypes:
     in:
       format: http:application-cloudevents
   properties:
     url: "{{http.sink.url}}"

----------------------------------------

TITLE: Configuring Kafka Idempotent Repository
DESCRIPTION: Example configuration for setting up a Kafka-based idempotent repository in Camel Kafka Connector, including repository type, expression type, topic configuration, and cache settings.

LANGUAGE: properties
CODE:
camel.idempotency.enabled=true
camel.idempotency.repository.type=kafka
camel.idempotency.expression.type=body
camel.idempotency.kafka.topic=my.idempotency.topic
camel.idempotency.kafka.bootstrap.servers=localhost:9092
camel.idempotency.kafka.max.cache.size=1500
camel.idempotency.kafka.poll.duration.ms=150

----------------------------------------

TITLE: Creating LangChain4j Chat Model in Java
DESCRIPTION: Java code to create a ChatLanguageModel using OllamaChatModel.builder(). It configures the model with specific parameters like base URL, model name, temperature, and output format.

LANGUAGE: java
CODE:
ChatLanguageModel model = OllamaChatModel.builder()
  .baseUrl("http://localhost:11434")
  .modelName("codellama")
  .temperature(0.0)
  .format("json")
  .timeout(Duration.ofMinutes(1L))
  .build();

----------------------------------------

TITLE: Running Camel Test with Route Dump and Coverage
DESCRIPTION: Shows how to use the new Camel Test features to dump routes (as YAML) and enable route coverage during test execution. This requires adding camel-yaml-io and camel-management JARs as dependencies.

LANGUAGE: bash
CODE:
$ mvn clean test -DCamelTestRouteDump=yaml -DCamelTestRouteCoverage=true

----------------------------------------

TITLE: Exporting Camel Application with JBang
DESCRIPTION: Command to export a Camel application using JBang with observability services dependency and camel-main runtime.

LANGUAGE: bash
CODE:
camel export PlatformHttpServer.java --dep camel:observability-services --dir ./app --runtime camel-main

----------------------------------------

TITLE: Interface-based AI Service Resolution in Camel Routes
DESCRIPTION: Demonstrates the improved approach of resolving AI services by interface without explicit injection. This new method simplifies the code and better aligns with Camel's integration-first philosophy.

LANGUAGE: java
CODE:
@ApplicationScoped
public class MyRoutes extends RouteBuilder {

  @Override
  public void configure() {
    from("...")
      .bean(MyAIService.class);
  }
}

----------------------------------------

TITLE: Using Camel JBang Infra to Start FTP Service
DESCRIPTION: Demonstrates how to use the new Camel JBang 'infra' command to start an FTP service for testing. The command returns a JSON response with service configuration details that can be used in Camel routes.

LANGUAGE: bash
CODE:
$ camel infra run ftp

Starting service ftp
{
  "getPort" : 52472,
  "getFtpRootDir" : "file://path/to/current/directory/target/ftp/camel-test-infra-test-directory/camel-test-infra-configuration-test-directory"
}

----------------------------------------

TITLE: Configuring Data Format DSL in Java
DESCRIPTION: Example showing how to access the new Data Format DSL builder API from RouteBuilder in Java DSL. This feature enables type-safe construction of Camel Data Formats.

LANGUAGE: java
CODE:
dataFormat()

----------------------------------------

TITLE: Defining Extraction Service Interface with LangChain4j in Java
DESCRIPTION: Java interface definition for CamelCustomPojoExtractor, which specifies the contract for extracting CustomPojo from text using LangChain4j annotations.

LANGUAGE: java
CODE:
interface CamelCustomPojoExtractor {
  @UserMessage(
    "Extract information about a customer from the text delimited by triple backticks: ```{{text}}```."
    + "The customerBirthday field should be formatted as YYYY-MM-DD."
    + "The summary field should concisely relate the customer main ask."
  )
  CustomPojo extractFromText(@V("text") String text);
}

----------------------------------------

TITLE: Configuring Source-less Integration in Camel K
DESCRIPTION: Demonstrates how to configure a Camel K Integration to use a pre-built container image without requiring source code. This allows running Camel Quarkus, Springboot, and Main runtimes from the Camel K operator.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  annotations:
    camel.apache.org/operator.id: camel-k
  name: test
spec:
  traits:
    container:
      image: docker.io/my-org/my-camel-app:1.0.0

----------------------------------------

TITLE: Enabling Micrometer Observation in Spring Boot Camel Application
DESCRIPTION: This snippet demonstrates how to enable Micrometer Observation in a Spring Boot Camel application using the @CamelObservation annotation. This automatically configures the CamelContext based on the classpath.

LANGUAGE: java
CODE:
@SpringBootApplication
@CamelObservation
public class ClientApplication {

    public static void main(String[] args) {
		SpringApplication.run(ClientApplication.class, args);
	}
}

----------------------------------------

TITLE: Configuring Amazon S3 Client with Minio in Apache Camel
DESCRIPTION: Demonstrates how to configure and create an Amazon S3 client using @PropertyInject and @BindToRegistry annotations with Minio configuration. The code shows integration between external configuration and programmatic AWS client setup.

LANGUAGE: java
CODE:
@BindToRegistry
public static AmazonS3 minioClient(@PropertyInject("minio") MinioConfig config) {

    var endpoint = new AwsClientBuilder.EndpointConfiguration(config.getAddress(), "US_EAST_1");
    var credentials = new BasicAWSCredentials(config.getAccessKey(), config.getSecretKey());
    var credentialsProvider = new AWSStaticCredentialsProvider(credentials);

    return AmazonS3ClientBuilder
        .standard()
        .withEndpointConfiguration(endpoint)
        .withCredentials(credentialsProvider)
        .withPathStyleAccessEnabled(true)
        .build();
}

----------------------------------------

TITLE: Configuring Language DSL in Java
DESCRIPTION: Example showing how to access the new Language DSL builder API from RouteBuilder in Java DSL. This feature enables type-safe construction of Camel Languages.

LANGUAGE: java
CODE:
expression()

----------------------------------------

TITLE: Implementing Content Based Routing with Camel DSL in Java
DESCRIPTION: This code snippet demonstrates how to implement the Enterprise Integration Pattern for content based routing using Camel DSL. It includes steps for message enrichment, logging, routing based on headers, and HL7 message acknowledgment.

LANGUAGE: java
CODE:
from("direct:hl7")
    .enrich("direct:label", aggregationStrategy)
    .to("log:org.drools.demo?level=DEBUG&showAll=true&multiline=true")
    .routingSlip(header("whereTo"))
    .transform(HL7.ack())
    ;

from("direct:label")
    .unmarshal().hl7()
    .to("atlasmap:atlasmap-mapping.adm").unmarshal().json()
    .process(kogitoDMNEvaluate) // <== Rules as DMN decisions
    .setHeader("topicsHeader", simple("${body[topic names]}")
    ;

----------------------------------------

TITLE: Defining a Cron Job in Camel K
DESCRIPTION: This code snippet demonstrates how to create a cron job in Camel K using the cron component. It sets up a route that executes a business logic method every 5 minutes, leveraging Kubernetes CronJob for efficient resource usage.

LANGUAGE: text
CODE:
from("cron:job?schedule=0/5+*+*+*+?")
  .to(this, "businessLogic")

----------------------------------------

TITLE: Implementing Mock Reset in Camel Tests with JUnit 5
DESCRIPTION: Example showing how to properly reset mock endpoints between test executions using JUnit 5's @BeforeEach annotation. This ensures a clean test environment for each test case.

LANGUAGE: java
CODE:
@BeforeEach
void reset() throws Exception {
    MockEndpoint mock = getMockEndpoint("mock:result");
    mock.reset();
}

----------------------------------------

TITLE: Listening to Knative Events and Forwarding to HTTP Endpoint in Groovy
DESCRIPTION: This Groovy code snippet shows how to listen for Knative events of type 'device-event' and forward them to an HTTP endpoint. This integration can scale automatically with the load as it is configured as a Knative Serving Service.

LANGUAGE: groovy
CODE:
from('knative:event/device-event')
  .to('http://myhost/webhook/random-id')

----------------------------------------

TITLE: Creating Templated Routes in Java DSL
DESCRIPTION: Demonstrates how to create a route from a template using Java DSL with template parameters.

LANGUAGE: java
CODE:
templatedRoute("someTemplate")
    .parameter("message", "Hello Camel templated route!");

----------------------------------------

TITLE: Model Status Check Implementation
DESCRIPTION: Java code demonstrating how to check TensorFlow model status using Camel routes

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.10.0@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-tensorflow-serving

import org.apache.camel.builder.RouteBuilder;

public class model_status extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("timer:model-status?repeatCount=1")
            .to("tensorflow-serving:model-status?modelName=mnist&modelVersion=1")
            .log("Status: ${body.getModelVersionStatus(0).state}");
    }
}

----------------------------------------

TITLE: Client Configuration Object
DESCRIPTION: JSON configuration for client authentication and authorization including OAuth2 settings and role-based access control.

LANGUAGE: json
CODE:
{
    "_id" : "XXX-XXX-XXX-XXX",
    "clientId" : "web-publisher",
    "resourceIds" : [],
    "secretRequired" : true,
    "clientSecret" : "$2a$10$oQBqS4ZOEiIGVNiZnB0nMuFw/n/Od57IG/uy4nFuOJxLtHE/Z5jDC",
    "scoped" : false,
    "scope" : [
        "read-foo"
    ],
    "authorizedGrantTypes" : [
        "refresh_token",
        "client_credentials"
    ],
    "registeredRedirectUri" : [],
    "authorities" : [
        {
            "role" : "ROLE_USER",
            "_class" : "org.springframework.security.core.authority.SimpleGrantedAuthority"
        },
        {
            "role" : "ROLE_PUBLISHER",
            "_class" : "org.springframework.security.core.authority.SimpleGrantedAuthority"
        }
    ],
    "accessTokenValiditySeconds" : 60,
    "refreshTokenValiditySeconds" : 14400,
    "autoApprove" : false
}

----------------------------------------

TITLE: Comparing Telemetry and Tracing Traits
DESCRIPTION: Commands to deploy Order integrations using both telemetry and tracing traits for comparison.

LANGUAGE: sh
CODE:
$ kamel run OrderService.java --name order \
   -d camel-jackson \
   -t telemetry.enabled=true \
   -t telemetry.sampler=on \
   -t telemetry.service-name=order-external-telemetry \
   -t ingress.enabled=true \
   -t ingress.host=order.local
Integration "order" updated

LANGUAGE: sh
CODE:
$ kamel run OrderService.java --name order-tracing \
   -d camel-jackson \
   -t tracing.enabled=true \
   -t tracing.sampler-type=const \
   -t tracing.sampler-param=1 \
   -t tracing.service-name=order-external-tracing \
   -t ingress.enabled=true \
   -t ingress.host=order-tracing.local
Integration "order-tracing" created

----------------------------------------

TITLE: Creating and Registering Extraction Service in Camel RouteBuilder
DESCRIPTION: Java code snippet within a RouteBuilder to create the extraction service using AiServices and bind it to the Camel registry.

LANGUAGE: java
CODE:
@Override
protected RouteBuilder createRouteBuilder() {
  ...
  CamelCustomPojoExtractor extractionService = AiServices.create(CamelCustomPojoExtractor.class, chatLanguageModel);
  this.context.getRegistry().bind("extractionService", extractionService);
  ...
}

----------------------------------------

TITLE: Configuring Hashicorp Vault Properties Function with Main Configuration Properties
DESCRIPTION: Defines credentials for Hashicorp Vault using main configuration properties in Apache Camel.

LANGUAGE: properties
CODE:
camel.vault.hashicorp.token = token
camel.vault.hashicorp.engine = engine
camel.vault.hashicorp.host = host
camel.vault.hashicorp.port = port
camel.vault.hashicorp.scheme = scheme

----------------------------------------

TITLE: Route Template Usage Examples
DESCRIPTION: Shows different ways to instantiate and use route templates using Java, XML, and Kamelet syntax

LANGUAGE: java
CODE:
TemplatedRouteBuilder.builder(context, "myTemplate")
    .parameter("name", "one")
    .parameter("greeting", "Hello")
    .add();

LANGUAGE: xml
CODE:
<templatedRoutes xmlns="http://camel.apache.org/schema/spring">
  <templatedRoute routeTemplateRef="myTemplate">
    <parameter name="name" value="one"/>
    <parameter name="greeting" value="Hello"/>
  </templatedRoute>
</templatedRoutes>

LANGUAGE: java
CODE:
from("direct:setMyBody")
    .to("kamelet:myTemplate?name=one&greeting=Hello");

----------------------------------------

TITLE: Classification API Implementation
DESCRIPTION: Java implementation showing how to use TensorFlow Serving's Classification API with the half_plus_two model

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.10.0@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-tensorflow-serving

import org.apache.camel.builder.RouteBuilder;
import org.tensorflow.example.Example;
import org.tensorflow.example.Feature;
import org.tensorflow.example.Features;
import org.tensorflow.example.FloatList;
import tensorflow.serving.InputOuterClass.ExampleList;
import tensorflow.serving.InputOuterClass.Input;

public class classify extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("timer:classify?repeatCount=1")
            .setBody(constant(createInput("x", 1.0f)))
            .to("tensorflow-serving:classify?modelName=half_plus_two&modelVersion=123&signatureName=classify_x_to_y")
            .log("Result: ${body.result}");
    }

    Input createInput(String key, float f) {  
        Feature feature = Feature.newBuilder()
                .setFloatList(FloatList.newBuilder().addValue(f))
                .build();
        Features features = Features.newBuilder()
                .putFeature(key, feature)
                .build();
        Example example = Example.newBuilder()
                .setFeatures(features)
                .build();
        ExampleList exampleList = ExampleList.newBuilder()
                .addExamples(example)
                .build();
        return Input.newBuilder()
                .setExampleList(exampleList)
                .build();
    }
}

----------------------------------------

TITLE: Implementing Basic Camel Route Definition
DESCRIPTION: Core route definition for the API Gateway showing the main processing flow including authentication, path processing, and metrics collection.

LANGUAGE: java
CODE:
routeDefinition
  .streamCaching()
  .setHeader(...) //core headers
  .process(authenticationProcessor)
  .choice()
      .when(...) //check execution of the authentication processor
      .process(pathProcessor) //evaluates the path
      .toF(toEndpoint) //proxy to the deployed backend
      .removeHeader(...) //remove some core headers
      .process(metricsProcessor) //process metrics

  //api was not authenticated (ex.: expired token)
  .otherwise()
      .setHeader(...) //core error headers
      .toF(apiGatewayErrorEndpoint) //proxy to default error endpoint
      .removeHeader(...) //remove some core headers
      .process(metricsProcessor) //process metrics
      .end()
      .setId(routeID);

----------------------------------------

TITLE: Setting up ObservationRegistry for Metrics and Tracing in Java
DESCRIPTION: This snippet demonstrates how to configure an ObservationRegistry with basic metrics and tracing capabilities using Micrometer Core, Micrometer Observation, and Micrometer Tracing libraries.

LANGUAGE: java
CODE:
// Micrometer Core JAR
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
// Micrometer Observation JAR
import io.micrometer.core.instrument.observation.DefaultMeterObservationHandler;
import io.micrometer.observation.ObservationRegistry;
// Micrometer Tracing JAR
import io.micrometer.tracing.Tracer;

// [Tracing]
// Skipped the whole setup of a Micrometer Tracing tracer
// you can check the https://micrometer.io/docs/tracing docs
// for examples of Brave and OpenTelemetry Tracer setup
io.micrometer.tracing.Tracer tracer = ...; // <1>

// [Metrics]
MeterRegistry meterRegistry = new SimpleMeterRegistry(); // <2>

// Setting up ObservationRegistry
ObservationRegistry registry = ObservationRegistry.create(); // <3>
// Adding metrics support
registry.observationConfig().observationHandler(new DefaultMeterObservationHandler(meterRegistry)); // <4>
// Adding basic tracing support
registry.observationConfig().observationHandler(new DefaultTracingObservationHandler(tracer)); // <5>

----------------------------------------

TITLE: Configuring HTTPS Server with SSL in Camel K
DESCRIPTION: Example of running a Camel K integration with SSL configuration using mounted certificate files from a Kubernetes Secret.

LANGUAGE: bash
CODE:
kamel run PlatformHttpsServer.java -p quarkus.http.ssl.certificate.file=/etc/ssl/my-self-signed-ssl/server.crt \
                                   -p quarkus.http.ssl.certificate.key-file=/etc/ssl/my-self-signed-ssl/server.key \
                                   --resource secret:my-self-signed-ssl@/etc/ssl/my-self-signed-ssl \
                                   -t container.port=8443 --dev

----------------------------------------

TITLE: Model Registration and Worker Scaling
DESCRIPTION: Camel route for registering a MNIST model on TorchServe and configuring its worker processes

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.10.0@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-torchserve

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.torchserve.TorchServeConstants;
import org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions;

public class register_model extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("timer:register?repeatCount=1")
            .to("torchserve:management/register?url=https://torchserve.pytorch.org/mar_files/mnist_v2.mar")
            .log("Status: ${body}")
            .to("direct:scale-worker");

        from("direct:scale-worker")
            .setHeader(TorchServeConstants.SCALE_WORKER_OPTIONS,
                constant(ScaleWorkerOptions.builder().minWorker(1).maxWorker(2).build()))
            .to("torchserve:management/scale-worker?modelName=mnist_v2")
            .log("Status: ${body}");
    }
}

----------------------------------------

TITLE: Creating Templated Routes in YAML DSL
DESCRIPTION: Demonstrates templated route configuration using YAML DSL syntax.

LANGUAGE: yaml
CODE:
- templated-route:
    route-template-ref: "someTemplate"
    parameters:
      - name: "message"
        value: "Hello Camel templated route!"

----------------------------------------

TITLE: Smooks EDI Processing Configuration
DESCRIPTION: XML configuration for Smooks to parse EDI documents, bind data to beans, and route segments to different endpoints

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<smooks-resource-list
        xmlns="https://www.smooks.org/xsd/smooks-2.0.xsd"
        xmlns:jb="https://www.smooks.org/xsd/smooks/javabean-1.6.xsd"
        xmlns:edi="https://www.smooks.org/xsd/smooks/edi-2.0.xsd"
        xmlns:camel="https://www.smooks.org/xsd/smooks/camel-1.5.xsd"
        xmlns:ftl="https://www.smooks.org/xsd/smooks/freemarker-2.1.xsd"
        xmlns:core="https://www.smooks.org/xsd/smooks/smooks-core-1.6.xsd">

    <core:filterSettings terminateOnException="false"/>
    <edi:parser segmentTerminator="~%WSP*; %NL;%WSP*;" dataElementSeparator="*"/>
    <!-- Additional configuration omitted for brevity -->
</smooks-resource-list>

----------------------------------------

TITLE: Displaying Camel Service Information with JBang
DESCRIPTION: This bash snippet demonstrates the use of 'camel get service' command to display detailed information about Camel services, including protocol and endpoint details.

LANGUAGE: bash
CODE:
$ camel get service
  PID   NAME            COMPONENT  DIR  ROUTE   PROTOCOL  SERVICE                           TOTAL  ENDPOINT
 75937  MyRouteBuilder  activemq   in   route1  jms       failover://tcp://localhost:61616      0  activemq://test.MyQueue

----------------------------------------

TITLE: Configuring Dynamic Router Channel in Java RouteBuilder
DESCRIPTION: Demonstrates how to set up a route that sends messages through a Dynamic Router channel using a RouteBuilder in Apache Camel.

LANGUAGE: java
CODE:
from("direct:start").to("dynamic-router://test");

----------------------------------------

TITLE: MNIST Image Classification Inference
DESCRIPTION: Camel route that performs inference on PNG images using a deployed MNIST model through TorchServe

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.10.0@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-torchserve

import org.apache.camel.builder.RouteBuilder;

public class predictions extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("file:data?noop=true&recursive=true&include=.*\.png")
            .to("torchserve:inference/predictions?modelName=mnist_v2")
            .log("${headers.camelFileName} => ${body}");
    }
}

----------------------------------------

TITLE: Maven Project Creation Command for Camel Quarkus
DESCRIPTION: Command to create a new Camel Quarkus project using Maven

LANGUAGE: shell
CODE:
mvn quarkus:create

----------------------------------------

TITLE: Configuring Camel Routes with Multicast and Exception Handling
DESCRIPTION: Demonstrates setting up Camel routes with multicast pattern, exception handling, and parallel processing. Includes a main route with two child routes where one path throws an exception and another succeeds.

LANGUAGE: java
CODE:
@Override
public void configure() throws Exception {
    onException(Exception.class)
        .useOriginalMessage()
        .handled(true)
        .log("Exception handler invoked")
        .transform().constant("{\"data\" : \"err\"}")
        .end();

    from("jetty:http://localhost:8081/myapi?httpMethodRestrict=GET")
        .log("received request")
        .log("Entering multicast")
        .multicast(new SimpleFlowMergeAggregator())
        .parallelProcessing().to("direct:A", "direct:B")
        .end()
        .log("Aggregated results ${body}")
        .log("Another log")
        .transform(simple("{\"result\" : \"success\"}"))
        .end();

    from("direct:A")
        .log("Executing PATH_1 - exception path")
        .transform(constant("DATA_FROM_PATH_1"))
        .log("Starting exception throw")
        .throwException(new Exception("USER INITIATED EXCEPTION"))
        .log("PATH_1")
        .end();

    from("direct:B")
        .log("Executing PATH_2 - success path")
        .delayer(1000)
        .transform(constant("DATA_FROM_PATH_2"))
        .log("PATH_2")
        .end();
}

----------------------------------------

TITLE: Lambda Expression Route Definition
DESCRIPTION: Example of using lambda expressions to define Camel routes with the new syntax

LANGUAGE: java
CODE:
public class MyConfiguration {
    @BindToRegistry
    public LambdaEndpointRouteBuilder myRoute() {
        return rb -> rb.from(rb.kafka("cheese")).to(rb.jms("queue:foo"));
    }
}

----------------------------------------

TITLE: Manual AI Service Injection in Camel Routes
DESCRIPTION: Shows the traditional approach of explicitly injecting an AI service using @Inject annotation in a Camel route builder class. This represents the old way of handling AI service dependencies.

LANGUAGE: java
CODE:
@ApplicationScoped
public class MyRoutes extends RouteBuilder {

  @Inject
  MyAIService myAiService;

  @Override
  public void configure() {
    from("...")
      .bean(myAiService);
  }
}

----------------------------------------

TITLE: Defining a Master Route for Telegram Bot in Camel K
DESCRIPTION: This code snippet demonstrates how to create a master route in Camel K to ensure that only one instance of the route is active at any time. It uses the 'master' prefix to create a named lock for the Telegram bot consumer.

LANGUAGE: text
CODE:
from('master:mylock:telegram:bots')
  .to('log:info')

----------------------------------------

TITLE: Running Camel CDC Pipeline
DESCRIPTION: Maven command to compile and run the Camel CDC application, which uses the Debezium PostgreSQL Component for event-driven consumption.

LANGUAGE: sh
CODE:
mvn clean compile exec:java -f ./camel-cdc/pom.xml

----------------------------------------

TITLE: OAuth MTLS Implementation - Java/Camel
DESCRIPTION: Apache Camel route implementation for OAuth MTLS validation using certificate binding processor.

LANGUAGE: java
CODE:
from(...) //receive the API request from the client application
    .process(CertificateBindingProcessor.class) //compare the SHA-256 thumbprint of the client certificate and the cnf.x5t#S256 member of the access token
    .choice() //check the result of the processor
    .when(...) //if the the SHA-256 thumbprint and the cnf.x5t#S256 member was matched
        .setHeader(...) //set the headers for requesting the backend
        .recipientList(...); //request the backend
    .otherwise()//if the the SHA-256 thumbprint and the cnf.x5t#S256 member was not matched
        .setHeader(...) //set the error status code to 403
        .setBody(...);

----------------------------------------

TITLE: Basic Multicast Aggregation Strategy Implementation
DESCRIPTION: Initial implementation of an aggregation strategy that combines results from multiple paths into a list. This version may stop processing if the first exchange fails.

LANGUAGE: java
CODE:
public class SimpleFlowMergeAggregator implements AggregationStrategy {
    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleFlowMergeAggregator.class.getName());
    @Override
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        LOGGER.info("Inside aggregator " + newExchange.getIn().getBody());
        if(oldExchange == null) {
            String data = newExchange.getIn().getBody(String.class);
            List<String> aggregatedDataList = new ArrayList<>();
            aggregatedDataList.add(data);
            newExchange.getIn().setBody(aggregatedDataList);
            return newExchange;
        }

        List<String> oldData = oldExchange.getIn().getBody(List.class);
        oldData.add(newExchange.getIn().getBody(String.class));
        oldExchange.getIn().setBody(oldData);

        return oldExchange;
    }
}

----------------------------------------

TITLE: Configuring Beans with Builder Class in YAML
DESCRIPTION: Demonstrates how to configure beans using a builder class in YAML format. The example shows a Customer bean being built using a CustomerBuilder class with various properties set.

LANGUAGE: yaml
CODE:
- beans:
    - name: myCustomer
      type: com.mycompany.Customer
      builderClass: com.mycompany.CustomerBuilder
      properties:
         name: "Acme"
         street: "Somestreet 42"
         zip: 90210
         gold: true
- from:
    uri: "timer:yaml"
    parameters:
      period: "5000"
    steps:
      - bean:
          ref: myCustomer
          method: summary
      - log: "${body}"

----------------------------------------

TITLE: AS2 Receive Purchase Order Route in Camel
DESCRIPTION: Camel route configuration for receiving EDI purchase orders via AS2 protocol and placing them on a JMS queue

LANGUAGE: yaml
CODE:
- routeConfiguration:
    id: as2Error
    onException:
      - onException:
          handled:
            constant: true
          exception:
            - java.lang.Exception
          steps:
            - script:
                groovy: |
                  httpContext = exchangeProperties['CamelAs2.interchange']
                  httpContext.setAttribute(org.apache.camel.component.as2.api.AS2Header.DISPOSITION_TYPE,
                                           org.apache.camel.component.as2.api.entity.AS2DispositionType.FAILED)

- route:
    id: receivePurchaseOrder
    routeConfigurationId: as2Error
    from:
      uri: as2:server/listen
      parameters:
        serverPortNumber: 8081
        requestUriPattern: /mycorp/orders
      steps:
        - to: jms:queue:edi

----------------------------------------

TITLE: Configuring Java Test Class for Camel Debugging
DESCRIPTION: Java code for a test class that enables JMX and adds a delay to allow the debugger to attach. It demonstrates how to set up a Camel test for textual debugging.

LANGUAGE: java
CODE:
class MainTest extends CamelMainTestSupport {
	@Test
	void myTest() throws Exception {
		Thread.sleep(2000); // to let time to Debugger to attach and install breakpoints
		template.asyncSendBody("direct:demo", ""); // Take care to start the route in an async way
		NotifyBuilder notify = new NotifyBuilder(context)
			.whenCompleted(1).whenBodiesDone("Bye World").create();
		assertTrue(
			notify.matches(60, TimeUnit.SECONDS), "1 message should be completed"
		);
	}

	@Override
	protected boolean useJmx() {
		return true;
	}
}

----------------------------------------

TITLE: Spring Boot Lambda Route Configuration
DESCRIPTION: Implementation of a Camel route using LambdaRouteBuilder within a Spring Boot configuration class using @Bean annotation. Shows integration between Kafka and JMS endpoints.

LANGUAGE: java
CODE:
@Bean
public LambdaRouteBuilder myRoute() {
    return rb -> rb.from("kafka:cheese").to("jms:cheese");
}

----------------------------------------

TITLE: Configuring Autoscaling KameletBinding with KEDA in Camel K
DESCRIPTION: This YAML snippet demonstrates how to create an autoscaling KameletBinding in Camel K using KEDA. It shows the configuration for a Kafka source with the KEDA trait enabled via an annotation.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: kafka-to-sink
  annotations:
    trait.camel.apache.org/keda.enabled: "true"
spec:
  source:
    ref:
      apiVersion: camel.apache.org/v1alpha1
      kind: Kamelet
      name: kafka-source
    properties:
      bootstrapServers: "<-- bootstrap servers -->"
      consumerGroup: my-group
      topic: "<-- the topic -->"
      user: "<-- user -->"
      password: "<-- pwd -->"
  sink:
    # ...

----------------------------------------

TITLE: Attaching Jolokia Agent and Starting Hawtio
DESCRIPTION: Commands to attach the Jolokia agent to a running Camel route and launch Hawtio v3 for monitoring.

LANGUAGE: console
CODE:
camel jolokia hello
camel hawtio --version=3.0.1

----------------------------------------

TITLE: Implementing Order Service in Camel K
DESCRIPTION: Java code for the Order service integration using Camel K, which handles placing orders and notifying the Inventory service.

LANGUAGE: java
CODE:
import java.util.HashMap;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.Exchange;
import org.apache.camel.component.jackson.JacksonDataFormat;
import org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy;

public class OrderService extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        restConfiguration()
            .enableCORS(true)
            .bindingMode(RestBindingMode.json);

        rest()
            .post("/place")
                .to("direct:placeorder");

        JacksonDataFormat jacksonDataFormat = new JacksonDataFormat();
        jacksonDataFormat.setUnmarshalType(Order.class);

        from("direct:placeorder")
            .log("-----IN ${headers}")
            .marshal(jacksonDataFormat)
            .log("inputBody --> ${body}")
            .to("http://inventory/notify/order?bridgeEndpoint=true")
            .removeHeaders("*")
            .log("responseBody from inventory --> ${body}")
            .setHeader(Exchange.CONTENT_TYPE, constant("application/json"))
            .setBody(simple("{\"inventory\":${body}}"))
            .unmarshal().json()
        ;
    }

    private static class Order implements java.io.Serializable{
        private static final long serialVersionUID = 1L;
        private Integer orderId;
        private Integer itemId;
        private Integer quantity;

        private String orderItemName;
        private Integer price;

        public void setOrderId(Integer orderId){
            this.orderId=orderId;
        }
        public void setItemId(Integer itemId){
            this.itemId=itemId;
        }
        public void setQuantity(Integer quantity){
            this.quantity=quantity;
        }
        public void setOrderItemName(String orderItemName){
            this.orderItemName=orderItemName;
        }
        public void setPrice(Integer price){
            this.price=price;
        }
        public Integer getOrderId(){
            return this.orderId;
        }
        public Integer getItemId(){
            return this.itemId;
        }
        public Integer getQuantity(){
            return this.quantity;
        }
        public String getOrderItemName(){
            return this.orderItemName;
        }
        public Integer getPrice(){
            return this.price;
        }

    }
}

----------------------------------------

TITLE: Defining Input Type for Camel Route Contract
DESCRIPTION: Shows how to specify an input data type for a Camel route, creating a contract for incoming messages.

LANGUAGE: java
CODE:
public class DemoRoute extends EndpointRouteBuilder {
   @Override
   public void configure() throws Exception {
       from(timer("tick"))
           .setBody()
               .constant("Camel rocks!")
           .to(direct("ce-outbound"));


       from(direct("ce-outbound"))
           .inputType("application-cloudevents+json")
           .to(log("info"));
   }
}

----------------------------------------

TITLE: Defining Lambda Route in Camel
DESCRIPTION: Example of using the new LambdaRouteBuilder to define a Camel route using Java lambda style syntax. This allows for simple, single-route definitions.

LANGUAGE: java
CODE:
rb -> rb.from("timer:foo").log("Hello Lambda");

----------------------------------------

TITLE: Configuring Knative to S3 Integration Using KameletBinding
DESCRIPTION: YAML configuration demonstrating how to set up a data pipeline from Knative/Kafka to an S3 bucket using Camel K's KameletBinding. The configuration specifies source and sink endpoints along with necessary AWS credentials.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: events-to-s3
spec:
  source:
    ref:
      apiVersion: messaging.knative.dev/v1
      kind: Channel
      name: messages
      # Or a Strimzi "KafkaTopic", if you prefer
  sink:
    ref:
      kind: Kamelet
      apiVersion: camel.apache.org/v1alpha1
      name: aws-s3-streaming-upload-sink
    properties:
      bucketNameOrArn: "my-bucket"
      accessKey: "<your-key>"
      # ...

----------------------------------------

TITLE: VS Code Task Configuration for Camel Debug
DESCRIPTION: Task configuration in VS Code that launches the Quarkus application with camel-debug profile enabled.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run Camel application with debug Profile",
			"type": "shell",
			"command": "mvn",
			"args": [
				"compile",
				"quarkus:dev",
				"-Pcamel.debug"
			],
			"problemMatcher": "$camel.debug.problemMatcher",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true
		}
	]
}

----------------------------------------

TITLE: Custom Type Converter for WhatsApp Messages
DESCRIPTION: TypeConverter implementation that converts String messages to TextMessageRequest objects for WhatsApp API compatibility. Handles the creation of properly formatted message objects with recipient information.

LANGUAGE: java
CODE:
@Converter
@Component
public class CamelWhatsAppTypeConverters implements TypeConverters {

	@Converter
	public static TextMessageRequest toTextMessageRequest(String message, Exchange exchange) {
		String phoneNumber = exchange.getVariable("PhoneNumber", String.class);

		TextMessageRequest responseMessage = new TextMessageRequest();
		responseMessage.setTo(phoneNumber);
		responseMessage.setText(new TextMessage());
		responseMessage.getText().setBody(message);

		return responseMessage;
	}
}

----------------------------------------

TITLE: Adding LangChain4j Ollama Dependency in Maven
DESCRIPTION: XML snippet to add the langchain4j-ollama dependency to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>dev.langchain4j</groupId>
  <artifactId>langchain4j-ollama</artifactId>
  <version>${langchain.version}</version>
</dependency>

----------------------------------------

TITLE: Subscribing to Dynamic Router in Java
DESCRIPTION: Creates a subscription to the Dynamic Router that accepts exchanges with even number message bodies. It specifies the subscription details including ID, channel, priority, destination URI, and predicate.

LANGUAGE: java
CODE:
// Create a subscription that accepts an exchange
// when the message body contains an even number
DynamicRouterControlMessage evenSubscribeMsg =
    new DynamicRouterControlMessage(
        ControlMessageType.SUBSCRIBE,
        "evenNumberSubscription", "test", 2, "jms:even",
        body().regex("^\\d*[02468]$"));
template.sendBody("dynamic-router:control", evenSubscribeMsg);

----------------------------------------

TITLE: Beer Source Kamelet Definition
DESCRIPTION: A Kamelet that generates random beer events at specified intervals using an external API

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1alpha1
kind: Kamelet
metadata:
  name: beer-source
  labels:
    camel.apache.org/kamelet.type: "source"
spec:
  definition:
    title: "Beer Source"
    description: "Retrieve a random beer from catalog"
    properties:
      period:
        title: Period
        description: The interval between two events
        type: integer
        default: 1000
  types:
    out:
      mediaType: application/json
  flow:
    from:
      uri: timer:tick
      parameters:
        period: "#property:period"
      steps:
      - to: "https://random-data-api.com/api/beer/random_beer"
      - to: "kamelet:sink"

----------------------------------------

TITLE: Defining a Camel Route with Kamelets in YAML
DESCRIPTION: YAML configuration for a Camel route using Kamelets. This example demonstrates a route that produces messages at a periodic interval and publishes them to a JMS broker using the AMQP 1.0 protocol.

LANGUAGE: yaml
CODE:
- route:
    from:
      uri: "kamelet:timer-source"
      parameters:
        period: 1000
        message: "Hello Camel JBang"
    steps:
      - log: "${body}"
      - to:
          uri: "kamelet:jms-amqp-10-sink"
          parameters:
            remoteURI: amqp://localhost:61616
            destinationName: test-queue

----------------------------------------

TITLE: Configuring Quarkus Dev Services for PostgreSQL and MongoDB
DESCRIPTION: These properties configure Quarkus Dev Services to automatically start and manage PostgreSQL and MongoDB containers for local development and testing.

LANGUAGE: properties
CODE:
#Quarkus postgresql database devservices
quarkus.datasource.devservices.enabled=true
quarkus.datasource.devservices.port=5432
quarkus.datasource.devservices.db-name=my_db
quarkus.datasource.devservices.username=my_username
quarkus.datasource.devservices.password=my_password
quarkus.datasource.devservices.command=postgres -c wal_level=logical

# MongoDB dev services
quarkus.mongodb.devservices.enabled=true
quarkus.mongodb.devservices.port=27017

----------------------------------------

TITLE: Running Camel with Spring Boot using JBang
DESCRIPTION: Demonstrates how to use the --runtime option with Camel JBang to specify Spring Boot as the runtime platform.

LANGUAGE: bash
CODE:
$ camel run foo.camel.yaml --runtime=spring-boot

----------------------------------------

TITLE: Transferring MQTT Events to Knative Broker in Groovy
DESCRIPTION: This Groovy code snippet demonstrates how to transfer events from an MQTT broker to a Knative event broker using Camel K. It uses the 'paho' component to connect to the MQTT broker and the 'knative' component to send events to the Knative broker.

LANGUAGE: groovy
CODE:
from('paho:mytopic?brokerUrl=tcp://broker-address:1883&clientId=knative-bridge')
  .to('knative:event/device-event')

----------------------------------------

TITLE: Declaring Dependencies in Camel JBang Java File
DESCRIPTION: Shows how to declare dependencies using JBang style comments in a Camel Java file. The example includes dependencies for Camel BOM, endpoint DSL, Kubernetes, and AWS S3 components.

LANGUAGE: java
CODE:
//DEPS org.apache.camel:camel-bom:4.3.0@pom
//DEPS org.apache.camel:camel-endpointdsl
//DEPS org.apache.camel:camel-kubernetes
//DEPS org.apache.camel:camel-aws2-s3

import org.apache.camel.builder.endpoint.EndpointRouteBuilder;

public class foo extends EndpointRouteBuilder {

    @Override
    public void configure() {
        from(timer("trigger").delay(1000).repeatCount(1))
            // something that may use Java APIs from Kubernetes
    }
}

----------------------------------------

TITLE: Configuring MQTT Endpoint with Endpoint DSL in Java
DESCRIPTION: Demonstrates how to use Endpoint DSL to configure a MQTT endpoint in a POJO class using FluentProducerTemplate. This allows for type-safe endpoint configuration as Java fields.

LANGUAGE: Java
CODE:
public class MyPojo {

    @Produce
    private FluentProducerTemplate producer;

    private final EndpointProducerBuilder mqtt = paho("sensor").clientId("myClient").userName("scott").password("tiger");

    public void sendToSensor(String data) {
        producer.withBody(data).to(mqtt).send();
    }

}

----------------------------------------

TITLE: Implementing REST Endpoint with Camel Route Builder
DESCRIPTION: Creates a simple REST endpoint using Camel's RouteBuilder that returns a 'Hello' message with a name parameter from the header. The route also logs the information.

LANGUAGE: java
CODE:
import org.apache.camel.builder.RouteBuilder;

public class PlatformHttpServer extends RouteBuilder {
 @Override
 public void configure() throws Exception {
   from("platform-http:/hello?httpMethodRestrict=GET")
     .setBody(simple("Hello ${header.name}"))
     .to("log:info");
 }
}

----------------------------------------

TITLE: Extending Test Coverage with Additional Mocked Scenarios in Java
DESCRIPTION: Shows how to use the mocked bean to test different scenarios and improve test coverage.

LANGUAGE: java
CODE:
@Test
void augustShouldIssueSecondSemester() {
  when(monthBean.month()).thenReturn(8);
  given().get("/semester").then().statusCode(200).body(is("SECOND semester"));
}

@Test
void exceptionShouldIssueHttp500() {
  doThrow(new IllegalArgumentException("Simulating an exception")).when(monthBean).month();
  given().get("/semester").then().statusCode(500);
}

----------------------------------------

TITLE: Configuring PostgreSQL Datasource in Camel K
DESCRIPTION: Example showing how to configure a JDBC Datasource in Camel K using both build-time and runtime properties with the kamel run command.

LANGUAGE: bash
CODE:
kamel run PostgresDBAutoDatasource.java --dev \
                                        --build-property quarkus.datasource.camel.db-kind=postgresql \
                                        -p quarkus.datasource.camel.jdbc.url=jdbc:postgresql://postgres:5432/test \
                                        -p quarkus.datasource.camel.username=postgresadmin \
                                        -p quarkus.datasource.camel.password=admin123 \
                                        -d mvn:io.quarkus:quarkus-jdbc-postgresql:1.13.7.Final

----------------------------------------

TITLE: Configuring Google Secret Manager Auto-Reload in Camel
DESCRIPTION: Properties configuration for enabling automatic Camel context reload when Google Secret Manager values are updated. Includes project ID, refresh settings, and PubSub subscription configuration.

LANGUAGE: properties
CODE:
camel.vault.gcp.projectId= projectId
camel.vault.gcp.refreshEnabled=true
camel.vault.gcp.refreshPeriod=60000
camel.vault.gcp.secrets=hello*
camel.vault.gcp.subscriptionName=subscriptionName
camel.main.context-reload-enabled = true

----------------------------------------

TITLE: Configuring Camel K REST API Integration
DESCRIPTION: YAML DSL configuration for a REST API backed by PostgreSQL database. Includes endpoints for CRUD operations on customers.

LANGUAGE: yaml
CODE:
# camel-k: dependency=mvn:io.quarkus:quarkus-jdbc-postgresql
# camel-k: build-property=quarkus.datasource.camel.db-kind=postgresql
# camel-k: config=secret:my-datasource
# camel-k: trait=service.node-port=true

- rest:
    get:
      - to: "direct:get"
        path: "/customers/{name}"
      - to: "direct:getall"
        path: "/customers/"
    post:
      - to: "direct:post"
        path: "/customers/"
    delete:
      - to: "direct:delete"
        path: "/customers/{name}"
...

----------------------------------------

TITLE: Configuring Maven Compiler Plugin for Parameter Names
DESCRIPTION: XML configuration for the Maven compiler plugin to preserve parameter names in the bytecode.

LANGUAGE: xml
CODE:
<plugin>
 <groupId>org.apache.maven.plugins</groupId>
 <artifactId>maven-compiler-plugin</artifactId>
 <configuration>
  <compilerArgs>
   <arg>-parameters</arg>
  </compilerArgs>
 </configuration>
</plugin>

----------------------------------------

TITLE: Creating ArgoCD Application for Camel K Integration
DESCRIPTION: Creates an ArgoCD application for the Camel K integration, specifying the Git repository and target namespace.

LANGUAGE: bash
CODE:
argocd app create my-ck-it-prod --repo https://github.com/squakez/camelk-gitops-example.git --path overlays/prod --dest-server https://kubernetes.default.svc --dest-namespace prod

----------------------------------------

TITLE: Configuring Azure Key Vault Auto-Reload in Camel
DESCRIPTION: Properties configuration for enabling automatic Camel context reload when Azure Key Vault secrets are updated. Includes Event Hub connection settings, Azure Blob storage configuration for checkpointing.

LANGUAGE: properties
CODE:
camel.vault.azure.refreshEnabled=true
camel.vault.azure.refreshPeriod=60000
camel.vault.azure.secrets=Secret
camel.vault.azure.eventhubConnectionString=eventhub_conn_string
camel.vault.azure.blobAccountName=blob_account_name
camel.vault.azure.blobContainerName=blob_container_name
camel.vault.azure.blobAccessKey=blob_access_key
camel.main.context-reload-enabled = true

----------------------------------------

TITLE: Defining API Service Interface in Java
DESCRIPTION: Java interface for the API service, defining the method to call the random jokes endpoint.

LANGUAGE: java
CODE:
public interface ApiService {
    void randomJoke(Exchange exchange, AsyncCallback callback);
}

----------------------------------------

TITLE: Querying Camel Catalog Status
DESCRIPTION: Example of kubectl command output showing Camel catalog status with runtime version information

LANGUAGE: json
CODE:
$ kubectl get camelcatalog
NAME                   RUNTIME PROVIDER   RUNTIME VERSION   RUNTIME CAMEL VERSION   PHASE
camel-catalog-2.16.0   quarkus            2.16.0            3.20.1                  Ready

----------------------------------------

TITLE: Creating Camel-K Integration Resource in YAML
DESCRIPTION: Example of a Kubernetes resource definition for Camel-K integration. Shows how to configure a simple integration flow using timer-source and log-sink Kamelets with custom parameters.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: demo
spec:
  flows:
    - from:
        uri: 'kamelet:timer-source'
        steps:
          - to:
              uri: 'kamelet:log-sink'
              parameters:
                showStreams: true
        parameters:
          period: 3000
          message: hello

----------------------------------------

TITLE: AWS Secret Manager Environment Configuration
DESCRIPTION: Environment variable configuration for AWS Secret Manager authentication.

LANGUAGE: bash
CODE:
export $CAMEL_VAULT_AWS_USE_DEFAULT_CREDENTIALS_PROVIDER=accessKey\nexport $CAMEL_VAULT_AWS_SECRET_KEY=secretKey\nexport $CAMEL_VAULT_AWS_REGION=region

----------------------------------------

TITLE: Setting Up WireMock Server for Unit Testing in Java
DESCRIPTION: Java code to set up a WireMock server for unit testing, mocking the Chuck Norris API responses.

LANGUAGE: java
CODE:
    private static WireMockServer wireMockServer;
 
    @BeforeAll
    public static void startServer() {
        port = AvailablePortFinder.getNextAvailable();
        wireMockServer = new WireMockServer(port);
        wireMockServer.start();
        setupStubs();
    }

    public static void setupStubs() {
        wireMockServer.stubFor(get(urlEqualTo("/jokes/random"))
            .willReturn(aResponse()
                .withHeader("Content-Type", "application/json; charset=UTF-8")
                .withStatus(HttpURLConnection.HTTP_OK)
                .withBodyFile("json/random-joke.json")));
    }

----------------------------------------

TITLE: Implementing Camel Endpoint and Producer Classes in Java
DESCRIPTION: Java code for the Camel Endpoint and Producer classes, extending DefaultEndpoint and DefaultAsyncProducer respectively.

LANGUAGE: java
CODE:
@UriEndpoint(firstVersion = "3.0.0", scheme = "chuck", title = "Chuck", syntax = "chuck:type", label = "chuck", producerOnly = true)
public class ChuckEndpoint extends DefaultEndpoint {
    @UriParam
    private ChuckConfiguration configuration;
    //â€¦
    @Override
    protected void doStart() throws Exception {
        //â€¦
    }
    @Override
    protected void doStop() throws Exception {
        //â€¦
    }
    @Override
    public Producer createProducer() throws Exception {
        return new ChuckProducer(this);
    }
    @Override
    public Consumer createConsumer(Processor processor) throws Exception {
        throw new UnsupportedOperationException("No support for consumers");
    }
}

public class ChuckProducer extends DefaultAsyncProducer {
    @Override
    public boolean process(Exchange exchange, AsyncCallback callback) {
        //â€¦
        return false;
    }
}

----------------------------------------

TITLE: Simulating Traffic with Apache Benchmark
DESCRIPTION: Command to use Apache Benchmark (ab) to simulate traffic to the Camel K Integration endpoint.

LANGUAGE: bash
CODE:
ab -n 10000 http://192.168.49.2:31501/hello

----------------------------------------

TITLE: Configuring Log4j2 for Camel Component Testing
DESCRIPTION: Properties file configuration for Log4j2, used for logging during component testing.

LANGUAGE: properties
CODE:
appender.out.type = Console
appender.out.name = out
appender.out.layout.type = PatternLayout
appender.out.layout.pattern = %d [%15.15t] %highlight{%-5p} %-30.30c - %m%n
rootLogger.level = INFO
rootLogger.appenderRef.out.ref = out

loggers = mine
logger.mine.name = org.apache.camel.component.chuck
logger.mine.level = INFO

----------------------------------------

TITLE: Simple Camel HTTP REST Endpoint
DESCRIPTION: Java implementation of a basic Camel route that creates an HTTP endpoint responding with a greeting message. Uses platform-http component for handling GET requests.

LANGUAGE: java
CODE:
import org.apache.camel.builder.RouteBuilder;

public class PlatformHttpServer extends RouteBuilder {
  @Override
  public void configure() throws Exception {
    from("platform-http:/hello?httpMethodRestrict=GET").setBody(simple("Hello ${header.name}"));
  }
}

----------------------------------------

TITLE: Kubernetes Secret Configuration for Camel Cloud Properties
DESCRIPTION: Kubernetes Secret configuration example to provide cloud properties for a Camel application, showing how to define a secret with a custom property.

LANGUAGE: yaml
CODE:
apiVersion: v1
data:
  my-property: Q2FtZWwgNC44
kind: Secret
metadata:
  name: my-secret
type: Opaque

----------------------------------------

TITLE: Creating Directory Structure for GitOps Project
DESCRIPTION: Sets up the directory structure for a Camel K GitOps project using Kustomize base and overlay approach.

LANGUAGE: bash
CODE:
mkdir -p my-ck-gitops
mkdir -p my-ck-gitops/base
mkdir -p my-ck-gitops/overlays/dev
mkdir -p my-ck-gitops/overlays/prod
cd my-ck-gitops

----------------------------------------

TITLE: Configuring Maven Profile for Camel Debug
DESCRIPTION: Maven profile configuration that conditionally includes camel-debug dependency when the camel.debug property is set to true. This keeps the debug dependency separate from production builds.

LANGUAGE: xml
CODE:
<profiles>
    <profile>
        <id>camel.debug</id>
        <activation>
            <property>
                <name>camel.debug</name>
                <value>true</value>
            </property>
        </activation>
        <dependencies>
            <dependency>
                 <groupId>org.apache.camel</groupId>
                <artifactId>camel-debug</artifactId>
            </dependency>
        </dependencies>
    </profile>
</profiles>

----------------------------------------

TITLE: Defining Maven POM for Camel Component in XML
DESCRIPTION: XML configuration for the Maven Project Object Model (POM) file, defining project structure and dependencies for the Camel component.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
<modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.apache.camel</groupId>
        <artifactId>components</artifactId>
        <version>3.1.0-SNAPSHOT</version>
    </parent>

    <artifactId>camel-chuck</artifactId>
    <packaging>jar</packaging>
    <name>Camel :: Chuck</name>
    <description>Camel Chuck Norris API</description>

    <dependencies>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-support</artifactId>
        </dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

----------------------------------------

TITLE: Invoking AI Service in Camel Route
DESCRIPTION: Camel route configuration to consume files, extract content, and invoke the AI service.

LANGUAGE: java
CODE:
from("file:target/transcripts")
  .setBody(jsonpath("$.content"))
  .bean(customPojoExtractionService)

----------------------------------------

TITLE: Configuring Camel Debugger Launch in VS Code
DESCRIPTION: JSON configuration for setting up the Apache Camel debugger launch in VS Code. It specifies the debugger type, request mode, and process ID to attach to.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"type": "apache.camel",
			"request": "attach",
			"attach_pid": "400335",
			"name": "Apache Camel Debugger"
		}
	],
	"compounds": []
}

----------------------------------------

TITLE: Defining a Camel Route with Bean Invocation in Java
DESCRIPTION: Demonstrates a simple Camel route that uses a bean to determine the current semester based on the month.

LANGUAGE: java
CODE:
from("platform-http:/semester").
choice().
  when(simple("${bean:monthBean} <= 6")).
  setBody(constant("FIRST semester")).
otherwise().
  setBody(constant("SECOND semester")).
end();

----------------------------------------

TITLE: Comparing Microprofile vs Micrometer Metrics in Prometheus Format
DESCRIPTION: Example showing the difference in metric naming and structure between Microprofile and Micrometer implementations. Demonstrates changes in context and route metrics format.

LANGUAGE: prometheus
CODE:
# Microprofile metrics
# HELP application_camel_context_exchanges_total The total number of exchanges for a route or Camel Context
# TYPE application_camel_context_exchanges_total counter
application_camel_context_exchanges_total{camelContext="camel-1"} 0.0
# HELP application_camel_route_exchanges_total The total number of exchanges for a route or Camel Context
# TYPE application_camel_route_exchanges_total counter
application_camel_route_exchanges_total{camelContext="camel-1",routeId="route1"} 0.0
application_camel_route_exchanges_total{camelContext="camel-1",routeId="route2"} 0.0

# Micrometer metrics
# TYPE CamelExchangesTotal counter
# HELP CamelExchangesTotal Total number of processed exchanges
CamelExchangesTotal_total{camelContext="camel-1",routeId="route2",serviceName="MicrometerRoutePolicyService"} 0.0
CamelExchangesTotal_total{camelContext="camel-1",routeId="route1",serviceName="MicrometerRoutePolicyService"} 0.0

----------------------------------------

TITLE: Running Maven Tests and Build for Camel Component in Bash
DESCRIPTION: Shell commands to run unit tests, code style checks, and integration tests for the Camel component using Maven.

LANGUAGE: sh
CODE:
$ mvn clean install -Psourcecheck
$ mvn clean test -Pint

----------------------------------------

TITLE: Installing Camel K Operator
DESCRIPTION: Commands to install the Camel K operator and verify its status.

LANGUAGE: sh
CODE:
$ kamel install

LANGUAGE: sh
CODE:
$ kubectl get pods -l name=camel-k-operator
NAME                                READY   STATUS    RESTARTS   AGE
camel-k-operator-5b897ddcdd-4qwqb   1/1     Running   0          50s

----------------------------------------

TITLE: Configuring VS Code Launch Configuration for Camel Debugging
DESCRIPTION: JSON configuration in launch.json to set up the VS Code debugger for attaching to the Camel application through Jolokia. It specifies the debugger type and the Jolokia JMX URL.

LANGUAGE: json
CODE:
{
    "name": "Attach Camel Debugger",
    "type": "apache.camel",
    "request": "attach",
    "attach_jmx_url": "service:jmx:jolokia://localhost:20002/jolokia/"
}

----------------------------------------

TITLE: Finalizing Camel Component Integration with Git in Bash
DESCRIPTION: Shell commands for rebasing the project, building, committing changes, and pushing to a new branch for the Camel component.

LANGUAGE: sh
CODE:
$ git remote add upstream git@github.com:apache/camel.git
$ git pull --rebase upstream master

$ cd ../.. 
$ mvn clean install -Pfastinstall

$ git checkout -b camel-chuck
$ git add .
$ git commit -m "camel-chuck component"
$ git push

----------------------------------------

TITLE: Implementing Basic Camel Route in Java
DESCRIPTION: Creates a simple Camel route that prints 'Hello World!' using a timer component. The route executes once and terminates.

LANGUAGE: java
CODE:
import org.apache.camel.builder.RouteBuilder;

@ApplicationScoped
public class CamelRoute extends RouteBuilder {

    @Override
    public void configure() {
        from("timer:hello?delay=-1&repeatCount=1")
                .setBody().constant("Hello World!")
                .to("log:hello");
    }
}

----------------------------------------

TITLE: Running Camel K Integration in Development Mode
DESCRIPTION: Executes the Camel K integration in development mode with resource limits and ConfigMap configuration.

LANGUAGE: bash
CODE:
kamel run my-route.yaml --config configmap:my-cm -t container.limit-cpu=0.1 -t container.limit-memory=256Mi

----------------------------------------

TITLE: Rebuilding Website with Maven (Skipping Theme)
DESCRIPTION: Maven command to rebuild the website content without rebuilding the UI theme.

LANGUAGE: shell
CODE:
$ mvn package -Dskip.theme

----------------------------------------

TITLE: Implementing Mocked Bean Tests with @InjectMock in Java
DESCRIPTION: Demonstrates how to use @InjectMock to create a mock of the MonthBean and control its behavior in tests.

LANGUAGE: java
CODE:
@QuarkusTest
public class SemesterRouteTest {
  @InjectMock
  MonthBean monthBean;

  @Test
  void januaryShouldIssueFirstSemester() {
    when(monthBean.month()).thenReturn(1);
    given().get("/semester").then().statusCode(200).body(is("FIRST semester"));
  }
}

----------------------------------------

TITLE: Quarkus Devfile Configuration with Camel Debug Settings
DESCRIPTION: OpenShift devfile configuration that sets up the development environment with Camel debug profile and Jolokia port exposure. Includes command definitions and container configurations.

LANGUAGE: yaml
CODE:
commands:
- exec:
    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository compile
    component: tools
    workingDir: ${PROJECT_SOURCE}
  id: init-compile
- exec:
    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
      -Djava.util.logging.manager=org.jboss.logmanager.LogManager
    component: tools
    group:
      isDefault: true
      kind: run
    hotReloadCapable: true
    workingDir: ${PROJECT_SOURCE}
  id: dev-run
- exec:
    commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
      -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT} -Pcamel.debug
    component: tools
    group:
      isDefault: true
      kind: debug
    hotReloadCapable: true
    workingDir: ${PROJECT_SOURCE}
  id: dev-debug
components:
- container:
    args:
    - tail
    - -f
    - /dev/null
    endpoints:
    - name: port-8080-tcp
      protocol: tcp
      targetPort: 8080
    - name: port-jolokia
      protocol: http
      targetPort: 7878
    env:
    - name: DEBUG_PORT
      value: "5858"
    image: registry.access.redhat.com/ubi8/openjdk-21:1.19-1
    memoryLimit: 1024Mi
    mountSources: true
    volumeMounts:
    - name: m2
      path: /home/user/.m2
  name: tools
- name: m2
  volume:
    size: 3Gi

----------------------------------------

TITLE: Defining Sourceless Camel K Integration
DESCRIPTION: YAML configuration for deploying an externally built Camel application using Camel K operator. Specifies the container image location and basic integration parameters.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  annotations:
    camel.apache.org/operator.id: camel-k
  name: test
spec:
  traits:
    container:
      image: docker.io/my-org/my-camel-app:1.0.0

----------------------------------------

TITLE: Token Introspection Implementation - Java/Camel
DESCRIPTION: Apache Camel route implementation for token introspection validation using HTTP4 component.

LANGUAGE: java
CODE:
from(...) //receive the API request from the client application
    .setHeader(...) //set the headers for requesting the inspection endpoint
    .setBody(simple("client_id=...&amp;client_secret=...&amp;token=...") //set the client authentication information and the access token
    .to("http4://.../introspect") //send the inspection request to the inspection endpoint of Keycloak
    .choice() //check the response of token inspection
    .when(...) //if access token was active
        .setHeader(...) //set the headers for requesting the backend
        .recipientList(...); //request the backend
    .otherwise() //if access token was inactive
        .setHeader(...) //set the error status code to 401
        .setBody(...);

----------------------------------------

TITLE: Configuring Debezium PostgreSQL Connector in application.properties
DESCRIPTION: This configuration sets up the Debezium PostgreSQL connector with various properties such as offset storage, database connection details, and table inclusion list.

LANGUAGE: properties
CODE:
#Camel Debezium Properties
camel.component.debezium-postgres.offset-storage=org.apache.kafka.connect.storage.FileOffsetBackingStore
camel.component.debezium-postgres.offset-storage-file-name=/tmp/offset.dat
camel.component.debezium-postgres.database-server-name=my_db_server
camel.component.debezium-postgres.database-hostname=localhost
camel.component.debezium-postgres.database-dbname=my_db
camel.component.debezium-postgres.database-user=my_username
camel.component.debezium-postgres.database-password=my_password
camel.component.debezium-postgres.database-port=5432
camel.component.debezium-postgres.plugin-name=pgoutput
camel.component.debezium-postgres.schema-include-list=public
camel.component.debezium-postgres.table-include-list=public.customer
camel.component.debezium-postgres.offset-flush-interval-ms=10000

----------------------------------------

TITLE: Creating an Initial Quarkus Test for Camel Route in Java
DESCRIPTION: Sets up a basic test using @QuarkusTest and RestAssured to verify the Camel route's behavior.

LANGUAGE: java
CODE:
@QuarkusTest
public class SemesterRouteTest {
  @Test
  void runningThisTestInOctoberShouldIssueSecondSemester() {
    given().get("/semester").then().statusCode(200).body(is("SECOND semester"));
  }
}

----------------------------------------

TITLE: Creating Camel Routes with Java and XML DSL in VS Code
DESCRIPTION: New VS Code commands for creating Camel Route files using either Java DSL or XML DSL. The commands automatically create *.java or *.camel.xml files in the active workspace using Apache Camel JBang.

LANGUAGE: plaintext
CODE:
Camel: Create a Camel Route using Java DSL
Camel: Create a Camel Route using XML DSL

----------------------------------------

TITLE: Defining Camel Quarkus 3.15.2 Release Metadata in YAML
DESCRIPTION: YAML frontmatter defining release metadata for Camel Quarkus version 3.15.2. Specifies the release URL, dates, version info, type, milestone, and JDK compatibility requirements.

LANGUAGE: yaml
CODE:
url: "/releases/q-3.15.2/"
date: 2025-01-21
eol: 2025-09-10
type: release-note
version: 3.15.2
title: "Camel Quarkus release 3.15.2"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 70
kind: lts
jdk: [17,21]

----------------------------------------

TITLE: Environment Variable Configuration in Camel Quarkus
DESCRIPTION: Shows how to use environment variables in property configurations with default values

LANGUAGE: properties
CODE:
environment-variable = a-value-with-environment-variable-${USERNAME}
environment-variable-or-default = ${UNEXISTING_ENV_VAR:a-default-value}

----------------------------------------

TITLE: Consuming Eventbridge Events with AWS SQS in Camel
DESCRIPTION: This Camel route consumes events from an AWS SQS queue that is targeted by the Eventbridge rule. It logs the body of each message received.

LANGUAGE: java
CODE:
public class MyRouteBuilder extends EndpointRouteBuilder {

    @Override
    public void configure() throws Exception {

        from(aws2Sqs("{{sqs-queue-name}}").deleteAfterRead(true))
        .log("${body}");
    }
}

----------------------------------------

TITLE: Configuring Granite3 Dense Model in Quarkus LangChain4J
DESCRIPTION: This configuration sets the model ID for the Quarkus LangChain4J Ollama chat model to use the Granite3 Dense model. It demonstrates how easily the underlying LLM can be switched in a Camel Quarkus application.

LANGUAGE: properties
CODE:
quarkus.langchain4j.ollama.chat-model.model-id = granite3-dense

----------------------------------------

TITLE: YAML Release Configuration for Camel Quarkus 3.10.0
DESCRIPTION: YAML front matter configuration defining the release metadata for Camel Quarkus version 3.10.0. Specifies the release URL, date, version, title, and JDK compatibility requirements.

LANGUAGE: yaml
CODE:
url: "/releases/q-3.10.0/"
date: 2024-04-30
type: release-note
version: 3.10.0
title: "Camel Quarkus release 3.10.0"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 57
jdk: [17,21]

----------------------------------------

TITLE: Configuring Camel Debug Adapter in Emacs
DESCRIPTION: Lisp code to register the Camel debug provider and create a debug template in Emacs. This configuration allows Emacs to use the Camel Debug Adapter for debugging Camel routes.

LANGUAGE: lisp
CODE:
(dap-register-debug-provider
 "camel"
 (lambda (conf)
   (plist-put conf :host "localhost")
   conf))

(dap-register-debug-template "Camel Attach"
                             (list :type "camel"
                                   :request "attach"
                                   :port 1099
                                   :dap-server-path '("java" "-jar" "PATH/TO/camel-dap-server-0.4.0.jar")
                                   :name "Run Configuration"))

----------------------------------------

TITLE: Complex Property Expression with Environment Variables
DESCRIPTION: Demonstrates combining property expressions with environment variables and default values

LANGUAGE: properties
CODE:
default-value = a-default-value-resolved-via-a-property-expression
envvar-or-default-via-property-expression = ${UNEXISTING_ENV_VAR:${default-value}}

----------------------------------------

TITLE: Defining Kamelets 4.0.0-M1 Release Metadata in YAML
DESCRIPTION: YAML frontmatter defining metadata for the Kamelets 4.0.0-M1 release, including version information, release date, and JDK requirements.

LANGUAGE: yaml
CODE:
url: "/releases/kamelets-4.0.0-M1/"
date: 2023-03-06
type: release-note
version: "4.0.0-M1"
title: "Kamelets 4.0.0-M1"
preview: ""
changelog: ""
category: "camel-kamelets"
jdk: [17]

----------------------------------------

TITLE: Vimspector Debug Configuration
DESCRIPTION: JSON configuration for vimspector debugger settings including source paths and connection details.

LANGUAGE: json
CODE:
{
  "configurations": {
    "Camel Debug Adapter - Attach": {
      "adapter": "cust_camel-debug-adapter",
      "configuration": {
        "request": "attach",
        "sourcePaths": [ "${workspaceRoot}/src/main/java" ],
        "hostName": "localhost",
        "port": "${JVMDebugPort}",
        "stepFilters": {
          "skipClasses": [ "$$JDK" ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Windup XML Rule for Removed Components
DESCRIPTION: XML rule definition that checks for usage of removed camel-linkedin component in Maven projects. The rule generates a warning message when the deprecated component is found.

LANGUAGE: xml
CODE:
<rule id="xml-removed-components-00000">
    <when>
        <project>
            <artifact groupId="org.apache.camel" artifactId="camel-linkedin" />
        </project>
    </when>
    <perform>
        <hint title="`org.apache.camel:camel-linkedin` artifact has been removed" effort="7" category-id="mandatory" >
            <message>`org.apache.camel:camel-linkedin` artifact has been removed in Apache Camel 3 so it won't be available</message>
            <link href="/manual/camel-3-migration-guide.html#_removed_components" title="Camel 3 - Migration Guide: Removed components" />
        </hint>
    </perform>
</rule>

----------------------------------------

TITLE: YAKS BDD Test Specification
DESCRIPTION: Gherkin-based BDD test specification that sets up infrastructure, tests the fruit service, and verifies AWS S3 storage outcomes.

LANGUAGE: gherkin
CODE:
Feature: Camel K Fruit Store

  Background:
    Given URL: http://localhost:8080

  Scenario: Create infrastructure
    # Start AWS S3 container
    Given Enable service S3
    Given start LocalStack container

    # Create Camel K integration
    Given Camel K integration property file aws-s3-credentials.properties
    When load Camel K integration fruit-service.groovy
    Then Camel K integration fruit-service should print Started route1 (platform-http:///fruits)

  Scenario: Verify fruit service
    # Invoke Camel K service
    Given HTTP request body: yaks:readFile('pineapple.json')
    And HTTP request header Content-Type="application/json"
    When send POST /fruits
    Then receive HTTP 200 OK

    # Verify uploaded S3 file
    Given New global Camel context
    Given load to Camel registry amazonS3Client.groovy
    Given Camel exchange message header CamelAwsS3Key="fruit.json"
    Given receive Camel exchange from("aws2-s3://medium-sugar?amazonS3Client=#amazonS3Client&deleteAfterRead=true") with body: yaks:readFile('pineapple.json')

----------------------------------------

TITLE: Basic Property Configuration in Camel Quarkus
DESCRIPTION: Demonstrates basic property definition in application.properties file

LANGUAGE: properties
CODE:
basic=a-basic-value

----------------------------------------

TITLE: Configuring Route with Path Parameters in YAML
DESCRIPTION: Example of setting path parameters in the same way as query parameters (key: value) in Karavan's YAML configuration. This change enhances consistency in parameter handling and simplifies DSL design.

LANGUAGE: yaml
CODE:
- route:
    from:
      uri: activemq
      parameters:
        destinationType: topic
        destinationName: topic1

----------------------------------------

TITLE: Configuring LSP Settings for Camel Language Server in Sublime Text
DESCRIPTION: JSON configuration for setting up the Camel Language Server in Sublime Text's LSP plugin. Specifies the Java command to run the LSP server and enables support for both XML and Java file types.

LANGUAGE: json
CODE:
{
	"clients":
	{
		"Camel":
		{
			"command":
			[
				"java",
				"-jar",
				"PATH/TO/camel-lsp-server-1.6.0.jar"
			],
			"enabled": true,
			"languages": [
				{
					"selector": "text.xml",
					"priority_selector": "text.xml",
				},
				{
					"selector": "source.java",
					"priority_selector": "source.java",
				}
			],
		},
	},
}

----------------------------------------

TITLE: Programmatic Configuration Access in Camel Quarkus
DESCRIPTION: Demonstrates how to access configuration values programmatically using ConfigProvider

LANGUAGE: java
CODE:
String basicPropertyFromConfigProvider = ConfigProvider.getConfig().getValue("basic", String.class);

----------------------------------------

TITLE: Configuring Kafka Resume Strategy in Camel
DESCRIPTION: Demonstrates how to configure a custom resume strategy for the Camel Kafka component using the resumeStrategy configuration. The strategy can be defined in the registry and referenced by name.

LANGUAGE: java
CODE:
resumeStrategy=#beanNameOnRegistry

----------------------------------------

TITLE: Kamelet Main Example GitHub Path
DESCRIPTION: Reference path to the Kamelet main example in the Apache Camel examples repository

LANGUAGE: plaintext
CODE:
https://github.com/apache/camel-examples/tree/main/examples/kamelet-main

----------------------------------------

TITLE: Defining a Simple Bean in Java
DESCRIPTION: Java code snippet showing a simple bean definition with a method that returns a static string value.

LANGUAGE: java
CODE:
@Named("myBean")
@ApplicationScoped
public class MyBean {
  String getLevel() {
    return "HIGH";
  }
}

----------------------------------------

TITLE: Initializing Emacs Package Configuration for Camel LSP
DESCRIPTION: Basic Emacs configuration to enable MELPA package repository and initialize LSP mode for XML files. Sets up package management and hooks for LSP integration.

LANGUAGE: lisp
CODE:
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
(custom-set-variables
 '(package-selected-packages '(lsp-mode)))
(custom-set-faces)

(require 'lsp-mode)
(add-hook 'nxml-mode-hook #'lsp)

----------------------------------------

TITLE: Installing Camel CLI via JBang
DESCRIPTION: Commands to install and verify Camel CLI installation using JBang package manager

LANGUAGE: console
CODE:
jbang app install camel@apache/camel

$ camel --version
4.10.0

----------------------------------------

TITLE: Injecting Kafka Service with Camel test-infra
DESCRIPTION: Example showing how to inject an abstract Kafka service into a test class using JUnit 5's @RegisterExtension annotation. The service instance provides methods for resolving URLs, ports, and authentication parameters needed for testing.

LANGUAGE: java
CODE:
@RegisterExtension
public static KafkaService service = KafkaServiceFactory.createService();

----------------------------------------

TITLE: Token Introspection Response - JSON
DESCRIPTION: Example of a successful token introspection response showing token details and validation status.

LANGUAGE: json
CODE:
{
  "active": true,
  "client_id": "l238j323ds-23ij4",
  "username": "jdoe",
  "scope": "read write dolphin",
  "sub": "Z5O3upPC88QrAjx00dis",
  "aud": "https://protected.example.net/resource",
  "iss": "https://server.example.com/",
  "exp": 1419356238,
  "iat": 1419350238,
  "extension_field": "twenty-seven"
}

----------------------------------------

TITLE: VS Code Launch Configuration for Camel Debugging
DESCRIPTION: Launch configuration for VS Code that enables remote debugging of Camel routes through Jolokia. Specifies the connection details for the debug session.

LANGUAGE: yaml
CODE:
{
    "name": "Jolokia attach",
    "type": "apache.camel",
    "request": "attach",
    "attach_jmx_url": "service:jmx:jolokia://localhost:20002/jolokia/"
}

----------------------------------------

TITLE: Configuring Tasks for Quarkus Debug in VS Code
DESCRIPTION: Example configuration for tasks.json to enable Camel debugging in a Quarkus application. This configuration provides completion support for quarkus:dev command.

LANGUAGE: json
CODE:
{
  ".vscode/tasks.json": {
    // Configuration would be shown through completion
  }
}

----------------------------------------

TITLE: Installing Camel CLI
DESCRIPTION: Command to install Camel CLI using JBang package manager

LANGUAGE: console
CODE:
jbang app install camel@apache/camel

----------------------------------------

TITLE: Eventbridge Event Pattern JSON
DESCRIPTION: This JSON snippet defines the event pattern for S3 bucket-related events. It specifies the source as 'aws.s3' and lists various S3 bucket operations to monitor.

LANGUAGE: json
CODE:
{
  "source": [
    "aws.s3"
  ],
  "detail": {
    "eventSource": [
      "s3.amazonaws.com"
    ],
    "eventName": [
      "DeleteBucket",
      "DeleteBucketCors",
      "DeleteBucketLifecycle",
      "DeleteBucketPolicy",
      "DeleteBucketReplication",
      "DeleteBucketTagging",
      "DeleteBucketWebsite",
      "CreateBucket",
      "PutBucketAcl",
      "PutBucketCors",
      "PutBucketLifecycle",
      "PutBucketPolicy",
      "PutBucketLogging",
      "PutBucketNotification",
      "PutBucketReplication",
      "PutBucketTagging",
      "PutBucketRequestPayment",
      "PutBucketVersioning",
      "PutBucketWebsite",
      "PutBucketEncryption",
      "DeleteBucketEncryption",
      "DeleteBucketPublicAccessBlock",
      "PutBucketPublicAccessBlock"
    ]
  }
}

----------------------------------------

TITLE: Configuring Camel K Integration with Modeline Options in Java
DESCRIPTION: This Java code snippet demonstrates how to use modeline options to configure a Camel K integration directly in the source file. It shows how to specify dependencies and enable the Quarkus trait without using command-line arguments.

LANGUAGE: java
CODE:
// camel-k: dependency=mvn:org.my:lib:1.0.0 dependency=mvn:org.my:otherlib:2.0.0 trait=quarkus.enabled=true

// ...
// your routes here

----------------------------------------

TITLE: Token Introspection Request Example - HTTP
DESCRIPTION: Example of an HTTP POST request for token introspection, demonstrating the required headers and payload format.

LANGUAGE: http
CODE:
POST /introspect HTTP/1.1
Host: server.example.com
Accept: application/json
Content-Type: application/x-www-form-urlencoded

token=2YotnFZFEjr1zCsicMWpAA

----------------------------------------

TITLE: Calculating Git Statistics using Bash Commands
DESCRIPTION: Shell commands to calculate total number of commits and unique committers in Git repository for 2023. Uses git shortlog with date filtering and awk/wc for counting.

LANGUAGE: bash
CODE:
#1 git shortlog -ns --since 2023-01-01 --until 2024-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'
#2 git shortlog --since 2023-01-01 --until 2024-01-01 -ns | wc -l

----------------------------------------

TITLE: JSON Structured Logging Format
DESCRIPTION: Example of structured JSON log output suitable for processing with tools like FluentD or Logstash. Includes timestamp, logger details, thread information, and message content.

LANGUAGE: json
CODE:
{"timestamp":"2021-05-10T11:28:26.99Z","sequence":99,"loggerClassName":"org.jboss.logging.Logger","loggerName":"io.quarkus","level":"INFO","message":"Installed features: [camel-bean, camel-core, camel-java-joor-dsl, camel-k-core, camel-k-runtime, camel-log, camel-support-common, camel-timer, cdi]","threadName":"main","threadId":1,"mdc":{},"ndc":"","hostName":"basic-5b57bcf589-kbzvp","processName":"io.quarkus.bootstrap.runner.QuarkusEntryPoint","processId":1}

----------------------------------------

TITLE: Creating an Eventbridge Rule in Camel
DESCRIPTION: This snippet demonstrates how to create an Eventbridge rule using Camel routes. It sets up a rule named 's3-events-rule' with a specified event pattern and targets an SQS queue.

LANGUAGE: java
CODE:
public class MyRouteBuilder extends EndpointRouteBuilder {

    @Override
    public void configure() throws Exception {

        from(timer("fire").repeatCount("1"))
        .setHeader(EventbridgeConstants.RULE_NAME, constant("s3-events-rule"))
        .to(aws2Eventbridge("default")
        		.operation(EventbridgeOperations.putRule)
        		.eventPatternFile("file:src/main/resources/eventpattern.json"))
        .process(new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setHeader(EventbridgeConstants.RULE_NAME, "s3-events-rule");
                Target target = Target.builder().id("sqs-queue").arn("arn:aws:sqs:eu-west-1:780410022477:camel-connector-test")
                        .build();
                List<Target> targets = new ArrayList<Target>();
                targets.add(target);
                exchange.getIn().setHeader(EventbridgeConstants.TARGETS, targets);
            }
        })
        .to(aws2Eventbridge("default")
        		.operation(EventbridgeOperations.putTargets))
        .log("All set, enjoy!");
    }
}

----------------------------------------

TITLE: Hugo Shortcode Block Structure
DESCRIPTION: Demonstrates the use of Hugo's div shortcode with nested content blocks for structuring community page sections.

LANGUAGE: html
CODE:
{{< div "box" >}}

<a href="/community/support/" class="icon" title="Community support">{{< icon "support" "Question bubble" >}}</a>

{{< div "content" >}}

## Support

If you are experiencing problems using Camel, there are several channels available to seek help from the community.
<p>
<a class="button dark" href="/community/support/">Read More</a>
</p>

{{< /div >}}

{{< /div >}}

----------------------------------------

TITLE: Configuring Camel Quarkus Debug Profile in pom.xml
DESCRIPTION: This XML snippet demonstrates the configuration for a Camel Quarkus debug profile in a pom.xml file. It helps set up a Camel on Quarkus application to use the Camel Route Textual debugger.

LANGUAGE: XML
CODE:
<profile>
    <id>camel-debug</id>
    <!-- Add Camel Quarkus debug configuration here -->
</profile>

----------------------------------------

TITLE: Configuring Launch for Apache Camel Debugging in VS Code
DESCRIPTION: JSON configuration for setting up a launch configuration of type 'apache.camel' in the .vscode/launch.json file. This enables JMX connection support for debugging Camel applications in VS Code.

LANGUAGE: json
CODE:
{
  "type": "apache.camel"
}

----------------------------------------

TITLE: Creating a Kamelet Binding
DESCRIPTION: Shows how to create a Kamelet binding that links a github-source Kamelet to a Knative channel, specifying required properties.

LANGUAGE: shell
CODE:
kn source kamelet binding create github-pull-requests \
      --kamelet github-source \
      --channel github-prs \
      --property oauthToken=xxx \
      --property repoName=camel \
      --property repoOwner=apache \
      --property type=pullRequest

----------------------------------------

TITLE: Running Kafka Connector and Consuming Messages
DESCRIPTION: Commands for running the standalone Kafka connector and consuming messages using kafkacat to verify idempotency behavior.

LANGUAGE: bash
CODE:
> $KAFKA_HOME/bin/connect-standalone.sh $KAFKA_HOME/config/connect-standalone.properties s3-source.properties

> kafkacat -b localhost:9092 -t s3.source.topic
% Auto-selecting Consumer mode (use -P or -C to override)
% Reached end of topic s3.source.topic [0] at offset 0
Camel-Kafka-connector rocks
% Reached end of topic s3.source.topic [0] at offset 1

> kafkacat -b localhost:9092 -t my.idempotency.topic -f 'Value:%s\nKey:%k\n'
% Auto-selecting Consumer mode (use -P or -C to override)
Value:add
Key:Camel-Kafka-connector rocks

----------------------------------------

TITLE: Accessing Apache Camel GitHub Repository
DESCRIPTION: GitHub repository URL for Apache Camel where public contributors can fork the project and submit pull requests.

LANGUAGE: plaintext
CODE:
https://github.com/apache/camel/

----------------------------------------

TITLE: Building and Installing Camel Kafka Connector
DESCRIPTION: Commands for building the Camel Kafka Connector project and installing the AWS2-S3 connector package in the Kafka Broker plugin path.

LANGUAGE: bash
CODE:
> cd <ckc_project>
> mvn clean package
> cp <ckc_project>/connectors/camel-aws2-s3-kafka-connector/target/camel-aws2-s3-kafka-connector-0.7.0-SNAPSHOT-package.zip /home/connectors/
> cd /home/connectors/
> unzip camel-aws2-s3-kafka-connector-0.7.0-SNAPSHOT-package.zip

----------------------------------------

TITLE: Installing Vimspector Plugin Configuration
DESCRIPTION: Vim configuration for installing and setting up vimspector plugin with key mappings for debugging.

LANGUAGE: viml
CODE:
call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'puremourning/vimspector'
call plug#end()

let g:vimspector_enable_mappings = 'HUMAN'

nnoremap <Leader>dd :call vimspector#Launch()<CR>
nnoremap <Leader>dt :call vimspector#ToggleBreakpoint()<CR>
nnoremap <Leader>dc :call vimspector#Continue()<CR>
nnoremap <Leader>de :call vimspector#Reset()<CR>

----------------------------------------

TITLE: AWS Lambda Test Payload
DESCRIPTION: JSON payload for testing the deployed AWS Lambda function.

LANGUAGE: json
CODE:
{
 "name": "Ravishankar"
}

----------------------------------------

TITLE: Creating a New Blog Post
DESCRIPTION: Hugo command to create a new blog post using the blog archetype.

LANGUAGE: shell
CODE:
$ yarn hugo new --kind blog blog/YYYY/MM/PostName/index.md

----------------------------------------

TITLE: Setting Up AWS2-S3 Source Connector with Idempotency
DESCRIPTION: Configuration for AWS2-S3 Source Connector with idempotency enabled, including AWS credentials, bucket configuration, and Kafka topic settings.

LANGUAGE: properties
CODE:
name=CamelAWS2S3SourceConnector
connector.class=org.apache.camel.kafkaconnector.aws2s3.CamelAws2s3SourceConnector
key.converter=org.apache.kafka.connect.storage.StringConverter
value.converter=org.apache.kafka.connect.converters.ByteArrayConverter

camel.source.maxPollDuration=10000

topics=s3.source.topic

camel.source.path.bucketNameOrArn=camel-kafka-connector

camel.source.endpoint.deleteAfterRead=false

camel.component.aws2-s3.access-key=xxxx
camel.component.aws2-s3.secret-key=yyyy
camel.component.aws2-s3.region=eu-west-1

camel.idempotency.enabled=true
camel.idempotency.repository.type=kafka
camel.idempotency.expression.type=body
camel.idempotency.kafka.topic=my.idempotency.topic

----------------------------------------

TITLE: Configuring Hashicorp Vault Properties Function with Environment Variables
DESCRIPTION: Sets up environment variables for authenticating with Hashicorp Vault in Apache Camel.

LANGUAGE: bash
CODE:
export $CAMEL_VAULT_HASHICORP_TOKEN=token
export $CAMEL_VAULT_HASHICORP_ENGINE=engine
export $CAMEL_VAULT_HASHICORP_HOST=host
export $CAMEL_VAULT_HASHICORP_PORT=port
export $CAMEL_VAULT_HASHICORP_SCHEME=http/https

----------------------------------------

TITLE: Creating Project Structure for Camel Component in Bash
DESCRIPTION: Shell commands to create the necessary directory structure for a new Camel component project.

LANGUAGE: sh
CODE:
$ mkdir -p camel-chuck/src/main/java/org/apache/camel/component/chuck \
    && mkdir -p camel-chuck/src/main/docs/chuck-component.adoc \
    && mkdir -p camel-chuck/src/test/java/org/apache/camel/component/chuck \
    && mkdir -p camel-chuck/src/test/resources \
    && cd camel-chuck

----------------------------------------

TITLE: Camel Debug Adapter Configuration
DESCRIPTION: JSON configuration for the Camel debug adapter in vimspector.

LANGUAGE: json
CODE:
{
  "adapters": {
    "cust_camel-debug-adapter": {
         "command": [
        "java",
        "-jar",
        "/home/camel-dap-server-0.4.0.jar"
         ]
    }
  }
}

----------------------------------------

TITLE: Adding a Processor for Java Debugging in Camel K Integration
DESCRIPTION: This code snippet demonstrates how to add a Processor to a Camel route to enable setting a breakpoint for Java debugging. It inserts a simple println statement that can be used as a breakpoint location.

LANGUAGE: java
CODE:
.process(new Processor(){
  @Override
  public void process(Exchange exchange) throws Exception {
    System.out.println("can be breakpoint on this line");
  }
})

----------------------------------------

TITLE: Spring Boot Application Dockerfile
DESCRIPTION: Dockerfile configuration for packaging a Spring Boot Camel application. Uses Eclipse Temurin Java 17 base image and configures the application jar for execution.

LANGUAGE: dockerfile
CODE:
FROM eclipse-temurin:17
COPY --chown=185 target/my-csb-1.0.0.jar /deployments/my-camel-app.jar
CMD java -jar /deployments/my-camel-app.jar

----------------------------------------

TITLE: Accessing Multi-field Secrets in Camel Route
DESCRIPTION: XML configuration demonstrating how to access specific fields from multi-field secrets with default value fallback.

LANGUAGE: xml
CODE:
<camelContext>\n    <route>\n        <from uri="direct:start"/>\n        <log message="Username is {{gcp:database/username:admin}}"/>\n    </route>\n</camelContext>

----------------------------------------

TITLE: Defining Production-Specific Integration Settings
DESCRIPTION: Creates a YAML file with production-specific settings for the Camel K integration, including image and resource limits.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  annotations:
    camel.apache.org/operator.id:
  name: my-route
spec:
  traits:
    container:
      image: 10.110.251.124/default/camel-k-kit-cijrbp8vl1rc73dg99h0@sha256:038254c5c3d627eb230a1df2d6a140fb54d704f7d14443396e7273ee53d2ce3e
      limitCPU: "1"
      limitMemory: 1024Mi

----------------------------------------

TITLE: Configuring Kustomize for Base and Development Overlay
DESCRIPTION: Sets up Kustomize configuration for the base and development overlay, including ConfigMap customization.

LANGUAGE: bash
CODE:
cd base/
kustomize create --resources my-it.yaml
kustomize edit add configmap my-cm --from-literal=my-configmap-file="I am a default environment" --behavior create --disableNameSuffixHash
cd ../overlays/dev/
kustomize create --resources ../../base
kustomize edit add configmap my-cm --from-literal=my-configmap-file="I am a development environment" --behavior replace

----------------------------------------

TITLE: Mounting Kubernetes Secret in Deployment Specification
DESCRIPTION: Example of how to mount a Kubernetes Secret as a volume in a deployment specification, allowing Camel to access cloud configuration properties.

LANGUAGE: yaml
CODE:
    spec:
      containers:
...
        volumeMounts:
          - name: secret-volume
            readOnly: true
            mountPath: "/etc/camel/conf.d/_secrets"
      volumes:
      - name: secret-volume
        secret:
          secretName: my-secret

----------------------------------------

TITLE: Enhanced Multicast Aggregation Strategy with Error Handling
DESCRIPTION: Improved implementation that handles partial failures by swapping the base exchange when encountering successful paths after initial failures.

LANGUAGE: java
CODE:
public class SimpleFlowMergeAggregator implements AggregationStrategy {
    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleFlowMergeAggregator.class.getName());
    @Override
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        LOGGER.info("Inside aggregator " + newExchange.getIn().getBody());
        if(oldExchange == null) {
            String data = newExchange.getIn().getBody(String.class);
            List<String> aggregatedDataList = new ArrayList<>();
            aggregatedDataList.add(data);
            newExchange.getIn().setBody(aggregatedDataList);
            return newExchange;
        }

        if(hadException(oldExchange)) {
            if(!hadException(newExchange)) {
                LOGGER.info("Found new exchange with success. swapping the base exchange");
                List<String> oldData = oldExchange.getIn().getBody(List.class);
                oldData.add(newExchange.getIn().getBody(String.class));
                newExchange.getIn().setBody(oldData);
                return newExchange;
            }
        }

        List<String> oldData = oldExchange.getIn().getBody(List.class);
        oldData.add(newExchange.getIn().getBody(String.class));
        oldExchange.getIn().setBody(oldData);

        return oldExchange;
    }

    private boolean hadException(Exchange exchange) {
        if(exchange.isFailed()) {
            return true;
        }
        if(exchange.isRollbackOnly()) {
            return true;
        }
        if(exchange.isRollbackOnlyLast()) {
            return true;
        }
        if(((ExtendedExchange)exchange).isErrorHandlerHandledSet()
                && ((ExtendedExchange)exchange).isErrorHandlerHandled()) {
            return true;
        }
        return false;
    }
}

----------------------------------------

TITLE: Defining Camel K Route in YAML
DESCRIPTION: Creates a simple Camel K route using YAML DSL, which reads from a ConfigMap and logs the content.

LANGUAGE: yaml
CODE:
- from:
    uri: "timer:yaml"
    parameters:
      period: "1000"
    steps:
      - setBody:
          simple: resource:classpath:my-configmap-file
      - to: "log:info"

----------------------------------------

TITLE: GCP Secret Manager Environment Configuration
DESCRIPTION: Environment variable configuration for Google Cloud Secret Manager authentication.

LANGUAGE: bash
CODE:
export $CAMEL_VAULT_GCP_SERVICE_ACCOUNT_KEY=file:////path/to/service.accountkey\nexport $CAMEL_VAULT_GCP_PROJECT_ID=projectId

----------------------------------------

TITLE: Installing Camel K with Maven Proxy Settings
DESCRIPTION: Bash command to install Camel K with custom Maven settings from a ConfigMap. This configures Camel K to use the specified Maven proxy.

LANGUAGE: bash
CODE:
kamel install --maven-settings configmap:my-maven-proxy/settings.xml

----------------------------------------

TITLE: Defining Chuck Norris API Model in Java
DESCRIPTION: Java class representing the model for the Chuck Norris API response, using Jackson annotations for JSON parsing.

LANGUAGE: java
CODE:
@JsonIgnoreProperties(ignoreUnknown = true)
public class RandomJoke {
    @JsonProperty("id")
    private String id;
    @JsonProperty("url")
    private String url;
    @JsonProperty("value")
    private String value;
    â€¦
}

----------------------------------------

TITLE: Ollama API Request/Response Example with Structured Output
DESCRIPTION: Example showing the API request to Ollama with JSON schema format specification and corresponding response for extracting customer information from conversation text. Demonstrates how structured output constrains LLM responses to match a specific JSON schema.

LANGUAGE: json
CODE:
{
  "model" : "granite3-dense",
  "messages" : [ {
    "role" : "user",
    "content" : "Extract information about a customer from the text delimited by triple backticks: ```Operator: Hello, how may I help you ?\nCustomer: Hello, I'm calling because I need to declare an accident on my main vehicle.\nOperator: Ok, can you please give me your name ?\nCustomer: My name is Sarah London.\nOperator: Could you please give me your birth date ?\nCustomer: 1986, July the 10th.\nOperator: Ok, I've got your contract and I'm happy to share with you that we'll be able to reimburse all expenses linked to this accident.\nCustomer: Oh great, many thanks.```.The summary field should concisely relate the customer main ask."
  } ],
  "options" : {
    "temperature" : 0.0,
    "top_k" : 40,
    "top_p" : 0.9
  },
  "format" : {
    "type" : "object",
    "properties" : {
      "customerSatisfied" : {
        "type" : "boolean"
      },
      "customerName" : {
        "type" : "string"
      },
      "customerBirthday" : {
        "type" : "object",
        "properties" : {
          "year" : {
            "type" : "integer"
          },
          "month" : {
            "type" : "integer"
          },
          "day" : {
            "type" : "integer"
          }
        },
        "required" : [ "year", "month", "day" ]
      },
      "summary" : {
        "type" : "string"
      }
    },
    "required" : [ "customerSatisfied", "customerName", "customerBirthday", "summary" ]
  },
  "stream" : false
}

----------------------------------------

TITLE: Configuring AWS Secrets Manager Auto-Reload in Camel
DESCRIPTION: Properties configuration for enabling automatic Camel context reload when AWS Secrets Manager values are updated. Defines refresh period, secret tracking patterns, and context reload settings.

LANGUAGE: properties
CODE:
camel.vault.aws.refreshEnabled=true
camel.vault.aws.refreshPeriod=60000
camel.vault.aws.secrets=Secret
camel.main.context-reload-enabled = true

----------------------------------------

TITLE: ConfigProperty Annotation Usage in Camel Quarkus
DESCRIPTION: Shows how to inject configuration values using the @ConfigProperty annotation

LANGUAGE: java
CODE:
@ConfigProperty(name = "basic")
String basicPropertyFromAnnotation;

----------------------------------------

TITLE: Deploying OSS Nexus as Maven Proxy in Kubernetes
DESCRIPTION: YAML configuration to deploy Sonatype Nexus as a Maven proxy in Kubernetes. This includes a Service and a Deployment for the Nexus repository manager.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: nexus
spec:
  selector:
    app: nexus
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus
spec:
  selector:
    matchLabels:
      app: nexus
  template:
    metadata:
      labels:
        app: nexus
    spec:
      containers:
        - name: nexus
          image: sonatype/nexus3
          ports:
            - containerPort: 8081
              name: 8081-tcp
          livenessProbe:
            httpGet:
              path: /service/rest/v1/status
              port: 8081
            initialDelaySeconds: 90
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /service/rest/v1/status
              port: 8081
            initialDelaySeconds: 90
            periodSeconds: 3
          volumeMounts:
            - name: nexus-data
              mountPath: /nexus-data
      volumes:
        - name: nexus-data
          emptyDir: {}

----------------------------------------

TITLE: API Definition Configuration in JSON
DESCRIPTION: JSON configuration for defining an API including endpoint details, security settings, throttling policies, and error handling parameters.

LANGUAGE: json
CODE:
{
    "_id" : "XXX-XXX-XXX-XXX",
    "endpoint" : "remote.domain.com:8080",
    "endpointType" : "HTTPS",
    "name" : "Friendly API Name",
    "secured" : true,
    "context" : "context-name",
    "swagger" : true,
    "swaggerEndpoint" : "https://remote.domain.com:8080/v2/api-docs",
    "blockIfInError" : true,
    "maxAllowedFailedCalls" : 10,
    "unblockAfter" : true,
    "unblockAfterMinutes" : 2,
    "throttlingPolicy" : {
        "maxCallsAllowed" : "100",
        "periodForMaxCalls" : "60000",
        "applyPerPath" : true
    }
}

----------------------------------------

TITLE: Adding Quarkus LangChain4j BOM in XML
DESCRIPTION: XML snippet demonstrating how to add the Quarkus LangChain4j Bill of Materials (BOM) to align dependencies in a project's pom.xml file.

LANGUAGE: xml
CODE:
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>io.quarkiverse.langchain4j</groupId>
      <artifactId>quarkus-langchain4j-bom</artifactId>
      <version>${quarkus-langchain4j.version}</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: Named AI Service Interface Definition
DESCRIPTION: Definition of an AI service interface using @Named annotation for name-based resolution, along with LangChain4j specific annotations.

LANGUAGE: java
CODE:
@ApplicationScoped
@Named("myBeanName")
@RegisterAiService
public interface AiServiceResolvedByName {

    @UserMessage("My prompt")
    @Handler
    String chatByName(String input);
}

----------------------------------------

TITLE: Retrieving GCP Secrets in Camel Route
DESCRIPTION: XML configuration showing how to retrieve secrets from Google Cloud Secret Manager using the gcp prefix in a Camel route.

LANGUAGE: xml
CODE:
<camelContext>\n    <route>\n        <from uri="direct:start"/>\n        <log message="Username is {{gcp:username}}"/>\n    </route>\n</camelContext>

----------------------------------------

TITLE: Implementing a Bean for Month Determination in Java
DESCRIPTION: Defines a CDI bean named 'monthBean' that returns the current month as an integer value.

LANGUAGE: java
CODE:
@ApplicationScoped
@Named("monthBean")
@RegisterForReflection
public class MonthBean {
  public int month() {
    return LocalDateTime.now().getMonth().getValue();
  }
}

----------------------------------------

TITLE: Configuring CDC Pipeline with KafkaConnect
DESCRIPTION: cURL commands to configure the CDC pipeline using KafkaConnect, including setting up Debezium source and JMS sink tasks.

LANGUAGE: sh
CODE:
# debezium source task (topic name == serverName.schemaName.tableName)
curl -sX POST -H "Content-Type: application/json" localhost:7070/connectors -d @connect-cdc/src/main/connectors/dbz-source.json

# jms sink tasks (powered by sjms2 component)
curl -sX POST -H "Content-Type: application/json" localhost:7070/connectors -d @connect-cdc/src/main/connectors/json-jms-sink.json
curl -sX POST -H "Content-Type: application/json" localhost:7070/connectors -d @connect-cdc/src/main/connectors/xml-jms-sink.json

# status check
curl -s localhost:7070/connectors | jq
curl -s localhost:7070/connectors/dbz-source/status | jq
curl -s localhost:7070/connectors/json-jms-sink/status | jq
curl -s localhost:7070/connectors/xml-jms-sink/status | jq

----------------------------------------

TITLE: Sample MyBean Class for Camel Application (Java)
DESCRIPTION: This Java class defines a simple bean with 'hello' and 'bye' methods, used in the Camel route for demonstration purposes. It shows how to create a basic component that can be used in a Camel route.

LANGUAGE: java
CODE:
package org.apache.camel.example;

public class MyBean {

    private String hi;

    public MyBean(String hi) {
        this.hi = hi;
    }

    public String hello() {
        return hi + " Begin ? ";

    }
     public String bye() {
        return hi + " End ? ";
}
}

----------------------------------------

TITLE: Registering AI Service with Quarkus LangChain4j
DESCRIPTION: Java code snippet showing how to register an AI service using Quarkus LangChain4j annotations.

LANGUAGE: java
CODE:
@RegisterAiService
@ApplicationScoped
public interface CustomPojoExtractionService {
...
  @Handler
  CustomPojo extractFromText(String text);
...
}

----------------------------------------

TITLE: Retrieving a Secret from Hashicorp Vault in Camel XML DSL
DESCRIPTION: Demonstrates how to retrieve a secret from Hashicorp Vault using Camel's XML DSL.

LANGUAGE: xml
CODE:
<camelContext>
    <route>
        <from uri="direct:start"/>
        <to uri="{{hashicorp:route}}"/>
    </route>
</camelContext>

----------------------------------------

TITLE: Retrieving AWS Secrets in Camel Route
DESCRIPTION: XML configuration showing how to retrieve secrets from AWS Secret Manager using the aws prefix in a Camel route.

LANGUAGE: xml
CODE:
<camelContext>\n    <route>\n        <from uri="direct:start"/>\n        <log message="Username is {{aws:username}}"/>\n    </route>\n</camelContext>

----------------------------------------

TITLE: Generating Test Events by Creating S3 Bucket in Camel
DESCRIPTION: This Camel route creates an S3 bucket to generate a test event for the Eventbridge rule. It uses a timer to trigger the bucket creation once.

LANGUAGE: java
CODE:
public class MyRouteBuilder extends EndpointRouteBuilder {

    @Override
    public void configure() throws Exception {

    	from(timer("fire").repeatCount("1"))
    	.setBody(constant("Camel rocks"))
    	.to(aws2S3("{{bucketName}}").keyName("firstfile"));
    }
}

----------------------------------------

TITLE: Stopping a Running Camel Integration with Camel CLI
DESCRIPTION: Shows how to use the Camel CLI to stop a specific running Camel integration by providing its name or process ID.

LANGUAGE: bash
CODE:
camel stop dude

----------------------------------------

TITLE: Compiling and Running Camel Quarkus Route
DESCRIPTION: Shell commands to clone the repository, compile the project, and run the Camel Quarkus route.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/camel-quarkus-examples.git
cd camel-quarkus-examples/
git checkout camel-quarkus-main
cd data-extract-langchain4j/
mvn clean package -DskipTests
java -jar target/quarkus-app/quarkus-run.jar

----------------------------------------

TITLE: Retrieving a Versioned Secret with Default Value in Camel XML DSL
DESCRIPTION: Shows how to retrieve a specific version of a secret with a default value using Camel's XML DSL.

LANGUAGE: xml
CODE:
<camelContext>
    <route>
        <from uri="direct:start"/>
        <log message="Username is {{hashicorp:database/username:admin@2}}"/>
    </route>
</camelContext>

----------------------------------------

TITLE: Listing Running Camel Processes with Camel CLI
DESCRIPTION: Demonstrates how to use the Camel CLI to list all running Camel processes, showing their PID, name, status, and runtime duration.

LANGUAGE: bash
CODE:
camel ps

----------------------------------------

TITLE: Configuring Azure Key Vault Properties Function with Environment Variables
DESCRIPTION: Sets up environment variables for authenticating with Azure Key Vault in Apache Camel.

LANGUAGE: bash
CODE:
export $CAMEL_VAULT_AZURE_TENANT_ID=tenantId
export $CAMEL_VAULT_AZURE_CLIENT_ID=clientId
export $CAMEL_VAULT_AZURE_CLIENT_SECRET=clientSecret
export $CAMEL_VAULT_AZURE_VAULT_NAME=vaultName

----------------------------------------

TITLE: Parameterized Camel Route with Config Property
DESCRIPTION: Enhanced version of the Camel route that uses MicroProfile Config to accept a command line parameter for the greeting subject

LANGUAGE: java
CODE:
import javax.enterprise.context.ApplicationScoped;
import org.apache.camel.builder.RouteBuilder;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@ApplicationScoped
public class CamelRoute extends RouteBuilder {

    @ConfigProperty(name = "greeted.subject", defaultValue = "World")
    String greetedSubject;

    @Override
    public void configure() {
        from("timer:hello?delay=-1")
                .setBody().constant("Hello " + greetedSubject + "!")
                .to("log:hello");
    }
}

----------------------------------------

TITLE: VS Code Launch Configuration for Camel Debug
DESCRIPTION: Launch configuration that combines starting the application and attaching the Camel debugger.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Run with Camel Debugger",
			"type": "apache.camel",
			"request": "attach",
			"preLaunchTask": "Run Camel application with debug Profile"
		}
	]
}

----------------------------------------

TITLE: Implementing Inventory Service in Camel K
DESCRIPTION: Java code for the Inventory service integration using Camel K, which handles product inventory management.

LANGUAGE: java
CODE:
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.component.jackson.JacksonDataFormat;
import java.text.SimpleDateFormat;
import org.apache.camel.Exchange;
import java.util.Date;
import java.util.Map;


public class InventoryService extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        restConfiguration()
            .enableCORS(true)
            .bindingMode(RestBindingMode.json);

        rest()
            .post("/notify/order/place")
                .to("direct:notify");

        JacksonDataFormat invDataFormat = new JacksonDataFormat();
        invDataFormat.setUnmarshalType(InventoryNotification.class);

        from("direct:notify")
            .log("notifyorder--> ${body}")
            .setHeader(Exchange.CONTENT_TYPE, constant("application/json"))
            .bean(InventoryNotification.class, "getInventoryNotification(${body['orderId']},${body['itemId']},${body['quantity']} )")
            .marshal(invDataFormat)
            .log("Inventory Notified ${body}")
            .convertBodyTo(String.class)
        ;
    }

    private static class InventoryNotification {
        private Integer orderId;
        private Integer itemId;
        private Integer quantity;
        private String department;
        private Date datetime;

        public static InventoryNotification getInventoryNotification(Integer orderId, Integer itemId, Integer quantity ){
            InventoryNotification invenNotification  = new InventoryNotification();
            invenNotification.setOrderId(orderId);
            invenNotification.setItemId(itemId);
            invenNotification.setQuantity(quantity);
            invenNotification.setDepartment("inventory");
            SimpleDateFormat formatter= new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
            invenNotification.setDatetime(new Date(System.currentTimeMillis()));
            return invenNotification;
        }


        public void setOrderId(Integer orderId){
            this.orderId=orderId;
        }
        public void setItemId(Integer itemId){
            this.itemId=itemId;
        }
        public void setQuantity(Integer quantity){
            this.quantity=quantity;
        }
        public Integer getOrderId(){
            return this.orderId;
        }
        public Integer getItemId(){
            return this.itemId;
        }
        public Integer getQuantity(){
            return this.quantity;
        }
        public String getDepartment() {
            return department;
        }
        public void setDepartment(String department) {
            this.department = department;
        }
        public Date getDatetime() {
            return datetime;
        }
        public void setDatetime(Date datetime) {
            this.datetime = datetime;
        }
    }
}

----------------------------------------

TITLE: Running CodeLlama Model in Docker
DESCRIPTION: Command to run a CodeLlama model from a Docker container locally, exposing it on port 11434.

LANGUAGE: bash
CODE:
docker run -p 11434:11434 langchain4j/ollama-codellama:latest

----------------------------------------

TITLE: Configuring Kustomize for Production Overlay
DESCRIPTION: Sets up Kustomize configuration for the production overlay, including namespace and ConfigMap customization.

LANGUAGE: bash
CODE:
cd ../../overlays/prod/
kustomize create --resources ../../base/
kustomize edit add configmap my-cm --from-literal=my-configmap-file="I am a production environment" --behavior replace
kustomize edit set namespace prod

----------------------------------------

TITLE: Configuring Lightweight Mode in Camel Quarkus
DESCRIPTION: Configuration property to enable lightweight mode in Camel Quarkus. Lightweight mode removes route model references after startup to free memory, but prevents adding new routes after startup.

LANGUAGE: properties
CODE:
camel.main.lightweight=true

----------------------------------------

TITLE: Configuring Optional Property Placeholder in Camel
DESCRIPTION: Demonstrates the syntax for defining optional property placeholders in Camel configurations. The '?' prefix indicates an optional placeholder that won't cause errors if the value is not found.

LANGUAGE: properties
CODE:
{{?myBufferSize}}

----------------------------------------

TITLE: Running Database and Artemis Broker Setup Scripts
DESCRIPTION: Shell commands to set up the database, query the table, produce a stream of changes, and start the Artemis broker for the CDC pipeline.

LANGUAGE: sh
CODE:
./run.sh --database
./run.sh --query
./run.sh --stream

./run.sh --artemis
# status check
ps -ef | grep "[A]rtemis" | wc -l

----------------------------------------

TITLE: Defining Custom POJO for Data Extraction in Java
DESCRIPTION: Java class definition for CustomPojo, which represents the structure of the data to be extracted from unstructured text.

LANGUAGE: java
CODE:
static class CustomPojo {
  private boolean customerSatisfied;
  private String customerName;
  private LocalDate customerBirthday;
  private String summary;
}

----------------------------------------

TITLE: Adding Production Settings as Kustomize Patch
DESCRIPTION: Adds the production-specific settings as a patch to the Kustomize configuration.

LANGUAGE: bash
CODE:
kustomize edit add patch --path settings.yaml

----------------------------------------

TITLE: Starting Camel Quarkus Application - New Method
DESCRIPTION: Command to start a Camel Quarkus application in JVM mode using the new Fast JAR format introduced in version 1.7.0.

LANGUAGE: sh
CODE:
$ java -jar target/quarkus-app/quarkus-run.jar

----------------------------------------

TITLE: Installing Karavan Serverless on Kubernetes
DESCRIPTION: Commands to clone the Karavan repository and deploy it to Kubernetes using kubectl. This snippet shows how to install Karavan serverless mode in the default namespace.

LANGUAGE: shell
CODE:
git clone --depth 1  https://github.com/apache/camel-karavan
cd camel-karavan/karavan-demo/serverless
kubectl apply -k karavan -n default

----------------------------------------

TITLE: Creating a Prometheus Alert Rule for Camel K
DESCRIPTION: YAML configuration to create a PrometheusRule custom resource for alerting on Camel K Integration failures.

LANGUAGE: yaml
CODE:
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: alert-rules
  name: camel-k-alert
spec:
  groups:
  - name: camel-k.rules
    rules:
    - alert: CamelKAlert
      expr: application_camel_route_exchanges_failed_total > 0

----------------------------------------

TITLE: Customizing Camel Context for Unit Testing in Java
DESCRIPTION: Java method to customize the Camel context for unit testing, setting up the component with a mock server URL.

LANGUAGE: java
CODE:
    @Override
    protected CamelContext createCamelContext() throws Exception {
        final CamelContext context = super.createCamelContext();
        context.disableJMX();
        final ChuckComponent component = new ChuckComponent();
        component.setBaseUrl("http://localhost:" + port);
        context.addComponent("chuck", component);
        return context;
    }

----------------------------------------

TITLE: Retrieving Karavan Service URL
DESCRIPTION: Command to get the URL for accessing the Karavan service in Minikube, including example output showing the service endpoint information.

LANGUAGE: shell
CODE:
minikube service camel-karavan --url

----------------------------------------

TITLE: Property Expression Configuration in Camel Quarkus
DESCRIPTION: Demonstrates property expressions where one property references another

LANGUAGE: properties
CODE:
embedded = resolved-via-a
property-expression = a-value-${embedded}-property-expression

----------------------------------------

TITLE: Installing Camel-K with CPU Constraints
DESCRIPTION: Command to install Camel-K with specific CPU and memory resource constraints on the operator deployment.

LANGUAGE: shell
CODE:
kamel install --operator-resources requests.cpu=256m --operator-resources limits.cpu=500m --operator-resources limits.memory=512Mi ...

----------------------------------------

TITLE: Running All Checks
DESCRIPTION: Command to run all website checks, including lengthy ones, in a production environment.

LANGUAGE: shell
CODE:
$ CAMEL_ENV=production yarn checks

----------------------------------------

TITLE: Configuring Public Authentication for Karavan Deployment in YAML
DESCRIPTION: This snippet shows how to configure a Kubernetes Deployment for Karavan with public authentication (no authentication required).

LANGUAGE: yaml
CODE:
kind: Deployment
...
        image: ghcr.io/apache/camel-karavan:3.18.3

----------------------------------------

TITLE: Unicode Character Configuration in Properties
DESCRIPTION: Shows how to use Unicode characters in property values

LANGUAGE: properties
CODE:
unicode = a-value-with-unicode-character-(\u221A9=3)

----------------------------------------

TITLE: Sample Camel Route Java Class
DESCRIPTION: Example Java class implementing a Camel route builder with timer and bean components.

LANGUAGE: java
CODE:
package org.apache.camel.example;

public class MyRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("timer:foo").routeId("foo")
            .bean("myBean", "hello")
            .log("${body}")
            .bean("myBean", "bye")
            .log("${body}");
    }
}

----------------------------------------

TITLE: Defining Resource Limits for Camel-K Operator
DESCRIPTION: YAML configuration for setting CPU and memory resource limits and requests for the Camel-K operator pod.

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: "4"
    memory: 3Gi
  requests:
    cpu: 500m
    memory: 512Mi

----------------------------------------

TITLE: Creating a New Security Advisory
DESCRIPTION: Hugo command to create a new security advisory using the security-advisory archetype.

LANGUAGE: shell
CODE:
$ yarn run hugo new --kind security-advisory security/CVE-YYYY-NNNNN

----------------------------------------

TITLE: Creating a Periodic Task Using Timer in Camel K
DESCRIPTION: This code snippet shows how to create a periodic task in Camel K using the timer component. It demonstrates setting up a route that executes a business logic method every 2 seconds.

LANGUAGE: text
CODE:
from("timer:task?period=2000")
  .to(this, "businessLogic")

----------------------------------------

TITLE: Configuring Camel Main Duration in Properties
DESCRIPTION: Application properties configuration to make the application exit after processing one message

LANGUAGE: properties
CODE:
camel.main.durationMaxMessages = 1

----------------------------------------

TITLE: Defining JDBC DataSource in application.properties
DESCRIPTION: Illustrates how to configure a JDBC DataSource using Spring Boot-style configuration in the application.properties file.

LANGUAGE: properties
CODE:
spring.datasource.url= jdbc:sqlserver://db.example.net:1433;databaseName=test_db
spring.datasource.username=user
spring.datasource.password=password
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver

----------------------------------------

TITLE: Exporting Camel K Integration Configuration
DESCRIPTION: Exports the Camel K integration configuration to a YAML file for use with Kustomize.

LANGUAGE: bash
CODE:
kamel run my-route.yaml --config configmap:my-cm -t container.limit-cpu=0.1 -t container.limit-memory=256Mi -o yaml > base/my-it.yaml

----------------------------------------

TITLE: Rebuilding Antora Documentation
DESCRIPTION: Commands to rebuild the Antora UI theme and documentation for live preview.

LANGUAGE: shell
CODE:
$ (cd antora-ui-camel && yarn build) && yarn antora  --clean --fetch antora-playbook.yml

----------------------------------------

TITLE: Gateway Setup and Token Request Commands
DESCRIPTION: Command line instructions for setting up and testing the API Gateway including Docker deployment and OAuth token requests.

LANGUAGE: bash
CODE:
$ sudo docker-compose up -d

$ curl -X POST https://localhost:8080/oauth/token -H 'Authorization: Basic d2ViLXB1Ymxpc2hlcjp3ZWItY2xpZW50LXNlY3JldA==' -H 'Content-Type: multipart/form-data;' -F grant_type=client_credentials -F 'response_type=access_token'

$ curl -X POST "http://localhost:8080/route/simple-rest" -H "accept: application/json" -H "Content-Type: application/json" -d "<your-api>"

----------------------------------------

TITLE: Configuring Logging Levels in Quarkus Style
DESCRIPTION: Shows how to set logging levels for specific packages using Quarkus-style configuration in the application.properties file.

LANGUAGE: properties
CODE:
quarkus.log.category."org.apache.kafka".level = DEBUG
quarkus.log.category."com.foo.something".level = TRACE

----------------------------------------

TITLE: Configuring VS Code Launch for Camel Debugging in JSON
DESCRIPTION: JSON configuration for a VS Code launch configuration that attaches the Camel Debugger to a running test. It references the previously created VS Code task as a pre-launch task.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Start test and attach Camel Debugger",
			"type": "apache.camel",
			"request": "attach",
			"preLaunchTask": "Launch Camel test with Maven with camel.debug profile"
		}
	]
}

----------------------------------------

TITLE: Syncing ArgoCD Application
DESCRIPTION: Synchronizes the ArgoCD application to deploy the Camel K integration to the production environment.

LANGUAGE: bash
CODE:
argocd app sync my-ck-it-prod

----------------------------------------

TITLE: Release Metadata Configuration in YAML
DESCRIPTION: YAML frontmatter defining metadata for Camel 2.25.4 release including release date, end-of-life date, version details, and JDK compatibility.

LANGUAGE: yaml
CODE:
---
date: 2021-05-28
eol: 2021-12-31
draft: false
type: release-note
version: 2.25.4
title: "Release 2.25.4"
preview: "New patch release 2.25.4"
apiBreaking: ""
knownIssues: ""
jiraVersionId: 12349511
category: camel
kind: legacy
jdk: [8]
---

----------------------------------------

TITLE: Configuring VS Code Launch for Camel Debug
DESCRIPTION: JSON configuration for a VS Code launch configuration that attaches the Camel debugger to the running test. It uses the previously defined task as a pre-launch task.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Start test and attach Camel Debugger",
			"type": "apache.camel",
			"request": "attach",
			"preLaunchTask": "Start test with camel.debug profile"
		}
	]
}

----------------------------------------

TITLE: Defining a Database Bean in Camel YAML DSL
DESCRIPTION: This YAML snippet shows how to define a database bean using Camel's YAML DSL, demonstrating property configuration with environment variable support.

LANGUAGE: yaml
CODE:
- beans:
    - name: DemoDatabase
      type: "#class:org.apache.commons.dbcp2.BasicDataSource"
      properties:
        driverClassName: org.postgresql.Driver
        username: "{{env:DEMO_DATASOURCE_USERNAME:scott}}"
        password: "{{env:DEMO_DATASOURCE_PASSWORD:tiger}}"
        url: "{{env:DEMO_DATASOURCE_URL:postgresql://localhost:5432}}"

----------------------------------------

TITLE: Describing a Specific Kamelet
DESCRIPTION: Demonstrates how to use the kn CLI to display detailed information about a specific Kamelet (github-source in this example).

LANGUAGE: shell
CODE:
kn source kamelet describe github-source

----------------------------------------

TITLE: Bean Component Method Reference
DESCRIPTION: New syntax for referring to bean methods using double colon notation in the Bean component

LANGUAGE: java
CODE:
".to(\"bean:myBean::myMethod\")"

----------------------------------------

TITLE: Defining Camel Route in MyRouteBuilder
DESCRIPTION: Java code implementing a simple Camel route in the MyRouteBuilder class. This route uses a timer component and calls methods from MyBean.

LANGUAGE: java
CODE:
package org.apache.camel.example;

import org.apache.camel.builder.RouteBuilder;

public class MyRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("timer:foo").routeId("foo")
            .bean("myBean", "hello")
            .log("${body}")
            .bean("myBean", "bye")
            .log("${body}");
    }
}

----------------------------------------

TITLE: Creating Templated Routes in XML DSL
DESCRIPTION: Illustrates templated route creation using standard XML DSL with namespace configuration.

LANGUAGE: xml
CODE:
<templatedRoutes xmlns="http://camel.apache.org/schema/spring">
    <templatedRoute routeTemplateRef="someTemplate">
        <parameter name="message" value="Hello Camel templated route!"/>
    </templatedRoute>
</templatedRoutes>

----------------------------------------

TITLE: Adding a Processor for Breakpoint in Camel K Java Integration
DESCRIPTION: This code snippet demonstrates how to add a Processor to a Camel route to enable setting a breakpoint during route execution. It's a common technique for Java debugging of Camel routes, not specific to Camel K.

LANGUAGE: java
CODE:
.process(new Processor(){
  @Override
  public void process(Exchange exchange) throws Exception {
    System.out.println("can be breakpoint on this line");
  }
})

----------------------------------------

TITLE: Updating Order Integration without Telemetry
DESCRIPTION: Command to update the Order integration without collecting traces.

LANGUAGE: sh
CODE:
kamel run OrderService.java --name order \
   -d camel-jackson \
   -t ingress.enabled=true \
   -t ingress.host=order.local
Integration "order" updated

----------------------------------------

TITLE: Configuring Camel Quarkus Release Metadata in YAML
DESCRIPTION: YAML frontmatter configuration block defining metadata for Camel Quarkus release 2.8.0. Specifies release version, date, JDK requirements, and categorization details.

LANGUAGE: yaml
CODE:
url: "/releases/q-2.8.0/"
date: 2022-04-12
type: release-note
version: 2.8.0
title: "Camel Quarkus release 2.8.0"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 25
jdk: [11]

----------------------------------------

TITLE: Creating Templated Routes in Spring XML
DESCRIPTION: Shows the creation of a templated route using Spring XML DSL configuration.

LANGUAGE: xml
CODE:
<camelContext>
    <templatedRoute routeTemplateRef="someTemplate">
        <parameter name="message" value="Hello Camel templated route!"/>
    </templatedRoute>
</camelContext>

----------------------------------------

TITLE: Creating Camel Routes with YAML DSL in VS Code
DESCRIPTION: New VS Code command feature that enables creation of Camel Route files using YAML DSL. Creates *.camel.yaml files automatically in the active workspace using Apache Camel JBang.



----------------------------------------

TITLE: Generating Integration Traces
DESCRIPTION: Command to place an order and generate traces for the integrations.

LANGUAGE: sh
CODE:
$ curl  http://order.local/place -d '{"orderId":1, "itemId":5, "quantity":1, "orderItemName":"best product", "price":99}' -H "Content-Type: application/json"
{"inventory":"{\"orderId\":1,\"itemId\":5,\"quantity\":1,\"department\":\"inventory\",\"datetime\":1678293274691}"}

----------------------------------------

TITLE: Configuring Camel-K 1.3.0 Release Note Front Matter in YAML
DESCRIPTION: YAML front matter block defining metadata for a Camel-K 1.3.0 release note page. Specifies the release version, publication date, JDK compatibility, and other page properties.

LANGUAGE: yaml
CODE:
url: "/releases/k-1.3.0/"
date: 2020-12-29
type: release-note
version: "1.3.0"
title: "Camel-K 1.3.0"
preview: ""
changelog: ""
category: "camel-k"
milestone: 11
jdk: [11]

----------------------------------------

TITLE: Initializing YAML Frontmatter for Blog Post
DESCRIPTION: YAML frontmatter defining metadata for the blog post, including title, date, authors, categories, and preview text.

LANGUAGE: yaml
CODE:
---
title: "New release of VS Code Debug Adapter for Apache Camel 0.2.0"
date: 2022-05-04
authors: [apupier]
categories: ["Tooling", "Releases"]
preview: "New release of VS Code Debug Adapter for Apache Camel 0.2.0. Improve guidance and provide a JBang-based command."
---

----------------------------------------

TITLE: Configuring Traits in YAML - New Format
DESCRIPTION: Example showing the new simplified format for configuring traits in Camel K version 1.10.0 and later

LANGUAGE: yaml
CODE:
traits:
  container:
    enabled: true
    name: my-integration

----------------------------------------

TITLE: Configuring Maven Profile for Camel Debug Dependencies
DESCRIPTION: Maven profile configuration that adds camel-debug and camel-quarkus-management dependencies when the camel.debug property is enabled.

LANGUAGE: xml
CODE:
<profiles>
    <profile>
        <id>camel.debug</id>
        <activation>
            <property>
                <name>camel.debug</name>
                <value>true</value>
            </property>
        </activation>
        <dependencies>
          <dependency>
             <groupId>org.apache.camel.quarkus</groupId>
             <artifactId>camel-quarkus-management</artifactId>
        	 </dependency>
            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-debug</artifactId>
                <version>3.16.0</version>
            </dependency>
        </dependencies>
    </profile>
</profiles>

----------------------------------------

TITLE: Installing Jaeger Instance
DESCRIPTION: Commands to install a Jaeger instance using the AllInOne image and verify its status.

LANGUAGE: sh
CODE:
$ kubectl apply -f - << EOF
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: instance
EOF

LANGUAGE: sh
CODE:
$ kubectl get jaeger
NAME       STATUS    VERSION   STRATEGY   STORAGE   AGE
instance   Running   1.42.0    allinone   memory    8s

----------------------------------------

TITLE: Sublime Project Configuration for Camel Debugging (JSON)
DESCRIPTION: This JSON configuration sets up the Sublime Text project for Camel debugging. It specifies the debugger configuration, including the type (camel), request type (attach), and port number for attaching to the Camel debugger.

LANGUAGE: json
CODE:
{
    "folders":
    [
        {
            "path": ".",
        }
    ],
    "debugger_configurations":
    [

        {
            "type": "camel",
            "request": "attach",
            "port": 1099,
            "name": "Attach to Camel Debugger",

        }
    ]
}

----------------------------------------

TITLE: Configuring Camel Kafka Connector Properties
DESCRIPTION: Shows configuration properties format for Camel Kafka Connector including connector class, sink/source properties, converters and transformers settings

LANGUAGE: properties
CODE:
connector.class=org.apache.camel.kafkaconnector.ComponentName
camel.sink.*=value
camel.source.*=value
key.converter=converterClass
value.converter=converterClass
transforms.*.type=transformerType

----------------------------------------

TITLE: Configuring Multi-Platform Build in Camel K
DESCRIPTION: Command to configure Camel K builder to support multiple platforms (AMD64 and ARM64) using the builder.platforms trait configuration parameter.

LANGUAGE: bash
CODE:
kamel run test.yaml -t builder.platforms=linux/arm64 -t builder.platforms=linux/amd64

----------------------------------------

TITLE: VS Code Camel K Task Configuration - New Format
DESCRIPTION: Updated task configuration format using the new 'resources' array attribute that supports multiple Camel K file specifications.

LANGUAGE: json
CODE:
"tasks": [
		{
			"type": "camel-k",
			"resources": ["path/to/file.xx"],
			(...)
		},

----------------------------------------

TITLE: Configuring Camel Debug Adapter in Sublime Text (Python)
DESCRIPTION: This code snippet defines a Camel adapter configuration class for Sublime Text's debugger. It specifies the adapter type, documentation link, and installation method using OpenVsx. The start method sets up the command to run the Camel DAP server JAR file.

LANGUAGE: python
CODE:
from __future__ import annotations
from ..typecheck import *

from .import util
from .. import dap
from .. import core

import sublime
import re

class Camel(dap.AdapterConfiguration):

    type = 'camel'
    docs = 'https://github.com/camel-tooling/camel-debug-adapter#debug-adapter-for-apache-camel'

    installer = util.OpenVsxInstaller (
        type='camel',
        repo='redhat/vscode-debug-adapter-apache-camel'
    )

    async def start(self, log: core.Logger, configuration: dap.ConfigurationExpanded):
        install_path = util.vscode.install_path(self.type)
        command = [
            'java',
            '-jar',
            f'{install_path}/extension/jars/camel-dap-server.jar'
        ]
        return dap.StdioTransport(log, command)

----------------------------------------

TITLE: Configuring Camel Kafka Connector Properties
DESCRIPTION: Demonstrates the use of Camel Kafka Connector properties in a configuration file. It shows how properties are structured and the potential for validation and auto-completion in the VS Code extension.

LANGUAGE: properties
CODE:
camel.(source|sink).(endpoint|path).*

LANGUAGE: properties
CODE:
connector.class

LANGUAGE: properties
CODE:
camel.(source|sink).url

----------------------------------------

TITLE: Installing Camel K with JDK 17 Base Image
DESCRIPTION: This snippet shows how to install Camel K with a JDK 17 base image, which is required for running Camel 4 integrations. It uses the eclipse-temurin:17 image as an example.

LANGUAGE: bash
CODE:
kamel install --skip-operator-setup --base-image eclipse-temurin:17 --force

----------------------------------------

TITLE: Configuring Beans and Routes in XML DSL
DESCRIPTION: Demonstrates the unified XML DSL approach in Camel 4 where beans and routes can be declared in the same XML file using the <camel> root tag. Shows how to configure a bean with properties and reference it in a route.

LANGUAGE: xml
CODE:
<camel>

    <bean name="greeter" type="com.foo.Greeter">
        <properties>
            <property key="message" value="Hello World" />
        </properties>
    </bean>

    <route id="my-route">
        <from uri="direct:start"/>
        <bean ref="greeter"/>
        <to uri="mock:finish"/>
    </route>

</camel>

----------------------------------------

TITLE: VS Code Camel K Task Configuration - Old Format
DESCRIPTION: Example of the deprecated task configuration format using the 'resource' attribute for specifying Camel K files.

LANGUAGE: json
CODE:
"tasks": [
		{
			"type": "camel-k",
			"resource": "path/to/file.xx",
			(...)
		},

----------------------------------------

TITLE: Configuring OIDC Authentication for Karavan Deployment in YAML
DESCRIPTION: This snippet shows how to configure a Kubernetes Deployment for Karavan with OpenID Connect (OIDC) authentication, referencing the OIDC settings from a Secret.

LANGUAGE: yaml
CODE:
kind: Deployment
...
        - name: OIDC_FRONTEND_URL
            valueFrom:
            secretKeyRef:
                key: oidc-frontend-url
                name: karavan
        - name: OIDC_SERVER_URL
            valueFrom:
            secretKeyRef:
                key: oidc-server-url
                name: karavan
        - name: OIDC_SECRET
            valueFrom:
            secretKeyRef:
                key: oidc-secret
                name: karavan
        image: ghcr.io/apache/camel-karavan-oidc:3.18.3

----------------------------------------

TITLE: Running Camel 4 with Camel K using YAML
DESCRIPTION: This snippet demonstrates how to run a Camel 4 integration using Camel K with the new runtime version 3.2.0. It shows the command to run a YAML file and view the logs, which confirm the use of Camel 4.0.0.

LANGUAGE: bash
CODE:
kamel run test.yaml -t camel.runtime-version=3.2.0
kamel logs test

----------------------------------------

TITLE: Configuring Camel Main to Dump Routes as XML
DESCRIPTION: Demonstrates how to configure Camel Main to dump all routes as XML during startup, which is useful for diagnostics when using multiple DSLs.

LANGUAGE: properties
CODE:
camel.main.dump-routes = true

----------------------------------------

TITLE: Running Camel K Integration with Local JAR Dependency
DESCRIPTION: Demonstrates how to run a Camel K integration with a local JAR file dependency using the kamel CLI.

LANGUAGE: bash
CODE:
kamel run MyIntegration.java -d file://path/to/my-integration.jar

----------------------------------------

TITLE: Maven Build Log Format
DESCRIPTION: Example of structured logging format for Maven build messages in the Camel K operator, showing download activity from a repository.

LANGUAGE: json
CODE:
{"level":"info","ts":1620393185.321101,"logger":"camel-k.maven.build","msg":"Downloading from repository-000: http://my.repository.com:8081/artifactory/fuse-brno/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/2.2.4/shrinkwrap-resolver-bom-2.2.4.pom"}

----------------------------------------

TITLE: Configuring OIDC Authentication Secret for Karavan in YAML
DESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret for Karavan's OpenID Connect (OIDC) authentication, setting up the OIDC secret, server URL, and frontend URL.

LANGUAGE: yaml
CODE:
kind: Secret
apiVersion: v1
metadata:
    name: karavan
type: Opaque
stringData:
    oidc-secret: XXXXX
    oidc-server-url: https://server/auth/realms/karavan
    oidc-frontend-url: https://server/auth
....

----------------------------------------

TITLE: Installing coc-camel Extension in Vim/Nvim using vim-plug
DESCRIPTION: Configuration snippet for installing coc.nvim and coc-camel extensions using vim-plug plugin manager. Requires Java Development Kit 11+ and yarn to be installed.

LANGUAGE: vim
CODE:
" Initialize plugin system

call plug#begin()

" Shorthand notation; fetches https://github.com/neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Shorthand notation; fetches Camel Ls
Plug 'camel-tooling/coc-camel', {'do': 'yarn install --frozen-lockfile && yarn build'}

call plug#end()

----------------------------------------

TITLE: Installing Camel JBang using JBang
DESCRIPTION: Command to install Camel JBang using JBang's app install feature. This allows easy installation of Camel JBang from the Apache Camel repository.

LANGUAGE: shell
CODE:
jbang app install CamelJBang@apache/camel

----------------------------------------

TITLE: Querying IntegrationKit Root Images in Camel K
DESCRIPTION: Shows how to use kubectl to query and display the root images of IntegrationKits in Camel K. This feature helps users understand the base image hierarchy for their integrations.

LANGUAGE: shell
CODE:
kubectl get ik

----------------------------------------

TITLE: Displaying Registry Error Condition in YAML
DESCRIPTION: This YAML snippet demonstrates how registry errors are now exposed in the status conditions of Camel K resources. It shows an example of an integration kit in an error state due to a registry connection timeout.

LANGUAGE: yaml
CODE:
  status:
    conditions:
...
    - lastTransitionTime: "2023-09-29T13:53:17Z"
      lastUpdateTime: "2023-09-29T13:57:50Z"
      message: 'integration kit default/kit-ckbddjd5rv6c73cr99fg is in state "Error".
        Failure: Get "https://1.2.3.4/v2/": dial tcp 1.2.3.4:443: i/o timeout; Get
        "http://1.2.3.4/v2/": dial tcp 1.2.3.4:80: i/o timeout'
      reason: IntegrationKitAvailable
      status: "False"
      type: IntegrationKitAvailable
...
    phase: Error

----------------------------------------

TITLE: Configuring Traits in YAML - Legacy Format
DESCRIPTION: Example showing the old format for configuring traits in Camel K before version 1.10.0

LANGUAGE: yaml
CODE:
traits:
  container:
    configuration:
      enabled: true
      name: my-integration

----------------------------------------

TITLE: Quarkus Mandrel Container Image Reference
DESCRIPTION: Container image reference for Quarkus Mandrel 22.2.0.0 Final with Java 11 support used in Camel K builds.

LANGUAGE: text
CODE:
quay.io/quarkus/ubi-quarkus-mandrel:22.2.0.0-Final-java11

----------------------------------------

TITLE: Configuring IntegrationPlatform for Maven Proxy
DESCRIPTION: YAML configuration for the IntegrationPlatform resource in Camel K. This specifies the Maven settings to be used from a ConfigMap.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: IntegrationPlatform
...
spec:
  build:
    maven:
      settings:
        configMapKeyRef:
          key: settings.xml
          name: my-maven-proxy

----------------------------------------

TITLE: Running Camel JBang Debug with Variables
DESCRIPTION: Command to run Camel JBang debugger with exchange variables displayed. This allows for inspection of variables during route execution.

LANGUAGE: bash
CODE:
camel debug * --show-exchange-variables

----------------------------------------

TITLE: Accessing MicroProfile Metrics Endpoint
DESCRIPTION: Command to curl the MicroProfile metrics endpoint exposed by the Camel K Integration.

LANGUAGE: bash
CODE:
curl -i http://192.168.49.2:31501/q/metrics

----------------------------------------

TITLE: Configuring Jackson Dataformat Endpoint in Camel K XML
DESCRIPTION: Example showing how to configure a Jackson dataformat unmarshal endpoint in Camel K. The framework now automatically adds the camel:jackson dependency when this endpoint is used.

LANGUAGE: xml
CODE:
<to uri="dataformat:jackson:unmarshal"/>

----------------------------------------

TITLE: Creating Kubernetes ConfigMap for Maven Settings
DESCRIPTION: Bash command to create a Kubernetes ConfigMap containing the Maven settings XML file. This ConfigMap can be referenced in Camel K configurations.

LANGUAGE: bash
CODE:
kubectl create cm my-maven-proxy --from-file settings.xml

----------------------------------------

TITLE: Configuring Postgres for CDC in Shell
DESCRIPTION: Shell commands to configure PostgreSQL for Change Data Capture by enabling transaction log access and setting up replication slots.

LANGUAGE: sh
CODE:
# postgresql.conf: configure replication slot
wal_level = logical
max_wal_senders = 1
max_replication_slots = 1
# pg_hba.conf: allow localhost replication to debezium user
local   cdcdb       cdcadmin                                trust
host    cdcdb       cdcadmin        127.0.0.1/32            trust
host    cdcdb       cdcadmin        ::1/128                 trust

----------------------------------------

TITLE: Running the Quarkus Application in Dev Mode
DESCRIPTION: This command starts the Quarkus application in development mode, which includes starting the configured Dev Services containers.

LANGUAGE: shell
CODE:
mvn quarkus:dev

----------------------------------------

TITLE: Running Camel K Integration with Prometheus Trait Enabled
DESCRIPTION: Command to run a Camel K REST API example with the Prometheus trait enabled for metric exposure.

LANGUAGE: bash
CODE:
kamel run https://raw.githubusercontent.com/apache/camel-k-examples/main/generic-examples/rest/RestDSL.java --dev -t prometheus.enabled=true

----------------------------------------

TITLE: Configuring Maven Proxy Settings in XML
DESCRIPTION: XML configuration for Maven settings to use a proxy repository. This configuration sets up a mirror that redirects all Maven requests to a specified proxy URL.

LANGUAGE: xml
CODE:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
    <mirrors>
        <mirror>
            <id>camel-k-maven-repository-manager</id>
            <name>Maven Repository Manager</name>
            <url>http://my-company-maven-repository-proxy/</url>
            <mirrorOf>*</mirrorOf>
        </mirror>
    </mirrors>
</settings>

----------------------------------------

TITLE: Configuring Security Contact Information for Apache Camel
DESCRIPTION: Security.txt file configuration that defines security contact details, encryption key location, and security policy for the Apache Camel project. This follows the security.txt standard format for providing security-related information.

LANGUAGE: txt
CODE:
type: security
url: /.well-known/security.txt
outputs: txt
canonical: https://camel.apache.com/.well-known/security.txt
contact: mailto:security@apache.org
encryption: https://www.apache.org/security/KEYS.txt
policy: https://www.apache.org/security/

----------------------------------------

TITLE: Listing Available Kamelets
DESCRIPTION: Shows how to use the kn CLI with the Kamelet plugin to list all available Kamelets in the cluster.

LANGUAGE: shell
CODE:
kn source kamelet list

----------------------------------------

TITLE: Configuring Native Executable Handler for AWS Lambda
DESCRIPTION: Handler configuration for deploying Quarkus Native executable to AWS Lambda.

LANGUAGE: shell
CODE:
not.used.in.provided.runtime

----------------------------------------

TITLE: Port Forwarding Prometheus, Grafana, and AlertManager Services in Kubernetes
DESCRIPTION: Commands to port-forward Prometheus, Grafana, and AlertManager services from a Kubernetes cluster to local ports for access.

LANGUAGE: bash
CODE:
kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090
kubectl --namespace monitoring port-forward svc/grafana 3000
kubectl --namespace monitoring port-forward svc/alertmanager-main 9093

----------------------------------------

TITLE: Dumping Camel K Cluster Status
DESCRIPTION: Command to generate a comprehensive log file containing cluster state, routes, operator status, and other debugging information

LANGUAGE: bash
CODE:
kamel dump status.log

----------------------------------------

TITLE: Creating Symbolic Link for Kamelet Plugin
DESCRIPTION: Demonstrates how to create a symbolic link for the Kamelet source plugin in the kn plugins directory.

LANGUAGE: shell
CODE:
cd ~/.config/kn/plugins
ln -s /the/path/to/my/kn-source-kamelet kn-source-kamelet

----------------------------------------

TITLE: Running Camel with Quarkus using JBang
DESCRIPTION: Shows how to use the --runtime option with Camel JBang to specify Quarkus as the runtime platform.

LANGUAGE: bash
CODE:
$ camel run foo.camel.yaml --runtime=quarkus

----------------------------------------

TITLE: Running Quarkus Application in Dev Mode
DESCRIPTION: Command to run the Quarkus application in development mode, enabling live coding.

LANGUAGE: shell
CODE:
./mvnw compile quarkus:dev

----------------------------------------

TITLE: Configuring Maven Profile for Camel Debug in XML
DESCRIPTION: XML configuration for adding camel-debug dependency to the Maven project using a profile. This profile is activated when the camel.debug property is set to true.

LANGUAGE: xml
CODE:
<profiles>
    <profile>
        <id>camel.debug</id>
        <activation>
            <property>
                <name>camel.debug</name>
                <value>true</value>
            </property>
        </activation>
        <dependencies>
            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-debug</artifactId>
            </dependency>
        </dependencies>
    </profile>
</profiles>

----------------------------------------

TITLE: Defining Camel URI Using Java String Text-Blocks
DESCRIPTION: Demonstrates how to use Java String text-blocks to define a Camel URI in the Java DSL. This feature allows for more readable and maintainable URI definitions, especially for complex configurations.

LANGUAGE: java
CODE:
from("""debezium-postgres:customerEvents
        ?databasePassword={{myPassword}}
        &databaseDbname=myDB
        &databaseHostname=myHost
        &pollIntervalMs=2000
        &queryFetchSize=100""")
    .to("kafka:cheese");

----------------------------------------

TITLE: Binding Kamelet Source to Kafka Topic
DESCRIPTION: Command to bind an earthquake source Kamelet to a Strimzi Kafka topic using fully qualified reference

LANGUAGE: bash
CODE:
kamel bind earthquake-source kafka.strimzi.io/v1beta1:KafkaTopic:mytopic

----------------------------------------

TITLE: Maven Development Command for Camel Quarkus
DESCRIPTION: Command for enabling live coding feature in Camel Quarkus development, which allows for shorter development iterations

LANGUAGE: shell
CODE:
mvn compile quarkus:dev

----------------------------------------

TITLE: YAML Front Matter for Camel Karaf 4.8.1 Release Note
DESCRIPTION: YAML metadata block defining properties for the Camel Karaf 4.8.1 release note documentation. Specifies release version, date, JDK requirements, and categorization details.

LANGUAGE: yaml
CODE:
url: "/releases/karaf-4.8.1/"
date: 2024-07-19
type: release-note
version: "4.8.1"
title: "Camel Karaf release 4.8.1"
preview: ""
changelog: ""
category: "camel-karaf"
milestone: 2
jdk: [17,21]

----------------------------------------

TITLE: Binding Kamelet Source to Knative Channel
DESCRIPTION: Command to bind an earthquake data source Kamelet to a Knative channel named 'earthquakes' for event streaming

LANGUAGE: bash
CODE:
kamel bind earthquake-source channel:earthquakes

----------------------------------------

TITLE: Configuring Connection Close Header in HTTP Components
DESCRIPTION: Shows how to add a Connection Close header to HTTP requests in AHC, HTTP, HTTP4, and Jetty components.

LANGUAGE: Java
CODE:
Camel-AHC
Camel-HTTP Camel-HTTP4 Camel-Jetty now
support a connectionClose parameter to allow explicitly adding a
Connection Close header to HTTP request

----------------------------------------

TITLE: Setting up Kafka and KafkaConnect for CDC
DESCRIPTION: Shell commands to set up a Kafka cluster, start KafkaConnect in distributed mode, and check the status of the components.

LANGUAGE: sh
CODE:
./run.sh --kafka
# status check
ps -ef | grep "[Q]uorumPeerMain" | wc -l
ps -ef | grep "[K]afka" | wc -l

./run.sh --connect
# status check
ps -ef | grep "[C]onnectDistributed" | wc -l
tail -n100 /tmp/kafka/logs/connect.log
/tmp/kafka/bin/kafka-topics.sh --zookeeper localhost:2180 --list
curl localhost:7070/connector-plugins | jq

----------------------------------------

TITLE: Starting Minikube Cluster with Maximum Cores
DESCRIPTION: Command to start a new Minikube cluster with maximum permissible cores and maximum memory, including the registry addon.

LANGUAGE: shell
CODE:
minikube start --addons registry --cpus 4 --memory=3GB

----------------------------------------

TITLE: YAML Integration Configuration Structure
DESCRIPTION: Basic YAML structure for Integration CRD files used in Karavan, showing the expected kind:Integration format

LANGUAGE: yaml
CODE:
*.yaml with kind:Integration

----------------------------------------

TITLE: Configuring Camel Quarkus Release Metadata in YAML
DESCRIPTION: YAML front matter defining the release metadata for Camel Quarkus 3.0.0-M1, including version number, release date, JDK requirements, and categorization details.

LANGUAGE: yaml
CODE:
url: "/releases/q-3.0.0-M1/"
date: 2023-03-17
type: release-note
version: 3.0.0-M1
title: "Camel Quarkus release 3.0.0-M1"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 39
jdk: [17]

----------------------------------------

TITLE: Deleting Minikube Cluster
DESCRIPTION: Command to delete the Minikube cluster to reinstate the environment and avoid using previously built integration images.

LANGUAGE: shell
CODE:
minikube delete

----------------------------------------

TITLE: Implementing Camel LSP Client Configuration
DESCRIPTION: Detailed LSP client configuration for Camel, including server version management, dependency handling, and client registration. Implements connection handling and server download functionality.

LANGUAGE: lisp
CODE:
;;; lsp-camel.el --- LSP Camel server integration        -*- lexical-binding: t; -*-


;;; Code:

(require 'lsp-mode)

(defgroup lsp-camel nil
 "LSP support for Camel, using camel-language-server"
 :group 'lsp-mode
 :tag "Language Server"
 :package-version '(lsp-mode . "8.0.0"))

(defconst lsp-camel-jar-version "1.5.0")

(defconst lsp-camel-jar-name (format "camel-lsp-server-%s.jar" lsp-camel-jar-version))

(defcustom lsp-camel-jar-file (f-join lsp-server-install-dir "camells" lsp-camel-jar-name)
 "Camel Language server jar command."
 :type 'string
 :group 'lsp-camel
 :type 'file
 :package-version '(lsp-mode . "8.0.0"))

(defcustom lsp-camel-jar-download-url
 (format "https://repo1.maven.org/maven2/com/github/camel-tooling/camel-lsp-server/%s/%s" lsp-camel-jar-version lsp-camel-jar-name)
 "Automatic download url for lsp-camel."
 :type 'string
 :group 'lsp-camel
 :package-version '(lsp-mode . "8.0.0"))

(lsp-dependency
'camells
'(:system lsp-camel-jar-file)
`(:download :url lsp-camel-jar-download-url
			:store-path lsp-camel-jar-file))

(defcustom lsp-camel-server-command `("java" "-jar" , lsp-camel-jar-file)
 "Camel server command."
 :type '(repeat string)
 :group 'lsp-camel
 :package-version '(lsp-mode . "8.0.0"))

(defun lsp-camel--create-connection ()
 (lsp-stdio-connection
  (lambda () lsp-camel-server-command)
  (lambda () (f-exists? lsp-camel-jar-file))))

(lsp-register-client
(make-lsp-client :new-connection (lsp-camel--create-connection)
				 :activation-fn (lsp-activate-on "xml")
				 :priority 0
				 :server-id 'camells
				 :add-on? t
				 :multi-root t
				 :initialized-fn (lambda (workspace)
							   (with-lsp-workspace workspace
								 (lsp--set-configuration (lsp-configuration-section "camel"))))
				 :download-server-fn (lambda (_client callback error-callback _update?)
							   (lsp-package-ensure 'camells callback error-callback))))

(lsp-consistency-check lsp-camel)

(provide 'lsp-camel)
;;; lsp-camel.el ends here

----------------------------------------

TITLE: Installing Camel-K Operator
DESCRIPTION: Command to set up the Camel-K environment by installing the operator (Kamel).

LANGUAGE: shell
CODE:
kamel install

----------------------------------------

TITLE: Defining YAML Front Matter for Camel-K 1.5.1 Release Notes
DESCRIPTION: YAML front matter block defining metadata for the Camel-K 1.5.1 release documentation page. Specifies version, release date, type, title, and JDK requirements.

LANGUAGE: yaml
CODE:
url: "/releases/k-1.5.1/"
date: 2021-08-31
type: release-note
version: "1.5.1"
title: "Camel-K 1.5.1"
preview: ""
changelog: ""
category: "camel-k"
milestone: 24
jdk: [11]

----------------------------------------

TITLE: Running Sample Integration in Dev Mode
DESCRIPTION: Command to run a sample Camel-K integration in development mode with an environment variable.

LANGUAGE: shell
CODE:
kamel run --env MY_ENV_VAR="hello world" Env.java --dev

----------------------------------------

TITLE: Kamelets Release Metadata Configuration
DESCRIPTION: YAML configuration defining release metadata for Kamelets version 4.10.1, including release date, version number, category and JDK compatibility requirements.

LANGUAGE: yaml
CODE:
url: "/releases/kamelets-4.10.1/"
date: 2025-03-10
type: release-note
version: "4.10.1"
title: "Kamelets 4.10.1"
preview: ""
changelog: ""
category: "camel-kamelets"
jdk: [17,21]

----------------------------------------

TITLE: Implementing MyBean Class for Camel Route Example
DESCRIPTION: Java code defining the MyBean class used in the Camel route example. This class provides methods that will be called from the Camel route.

LANGUAGE: java
CODE:
package org.apache.camel.example;

public class MyBean {

    private String hi;

    public MyBean(String hi) {
        this.hi = hi;
    }

    public String hello() {
        return hi + " Begin ? ";

    }
     public String bye() {
        return hi + " End ? ";
}
}

----------------------------------------

TITLE: Starting Minikube Cluster with Minimum Cores
DESCRIPTION: Command to start a new Minikube cluster with minimum permissible cores and maximum memory, including the registry addon.

LANGUAGE: shell
CODE:
minikube start --addons registry --cpus 2 --memory=3GB

----------------------------------------

TITLE: Configuring Vulnerable XSLT Route in Apache Camel XML
DESCRIPTION: This XML snippet demonstrates a simple Camel route that could be vulnerable to the CVE-2014-0003 exploit. It receives an HTTP request, applies an XSLT transformation, and stores the result in a file. An attacker could potentially exploit this route by submitting a message containing malicious XML entities.

LANGUAGE: xml
CODE:
<route>
  <from uri="servlet:///hello"/>
  <to uri="xslt:file:/tmp/transform.xsl" />
  <to uri="file:/tmp/output" />
</route>

----------------------------------------

TITLE: Cloud-Ready File Processing Integration in Java
DESCRIPTION: A Camel route that processes files from input directory, filters based on content, and routes to different output directories

LANGUAGE: java
CODE:
import org.apache.camel.builder.RouteBuilder;

public class MyJBangRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("file:/tmp/input")
            .convertBodyTo(String.class)
            .log("Processing file ${headers.CamelFileName} with content: ${body}")
            /*
            .filter(simple("${body} !contains 'checked'"))
                .log("WARN not checked: ${body}")
                .to("file:/tmp/discarded")
            .end()
            .to("file:/tmp/output");
            */
            .choice()
                .when(simple("${body} !contains 'checked'"))
                    .log("WARN not checked!")
                    .to("file:/tmp/discarded")
                .otherwise()
                    .to("file:/tmp/output")
            .end();
    }
}

----------------------------------------

TITLE: Downloading Camel Debug Adapter Server JAR
DESCRIPTION: Shell command to download the Camel Debug Adapter server JAR file from Maven Central repository. This JAR is required for the debug adapter to function.

LANGUAGE: sh
CODE:
cd /home
curl -LO https://repo1.maven.org/maven2/com/github/camel-tooling/camel-dap-server/0.4.0/camel-dap-server-0.4.0.jar

----------------------------------------

TITLE: Configuring VS Code Task for Camel Application
DESCRIPTION: VS Code task configuration to start the Camel application with debug profile enabled. Runs as a background task using Maven command.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run Camel application with debug Profile",
			"type": "shell",
			"command": "mvn",
			"args": [
				"camel:run",
				"-Pcamel.debug"
			],
			"problemMatcher": {
				"owner": "camel",
				"pattern": {
					"regexp": "^.*$"
				},
				"severity": "error",
				"source": "maven",
				"background": {
					"activeOnStart": true,
					"beginsPattern": "^.*$",
					"endsPattern": "^.*$"
				}
			},
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true
		}
	]
}

----------------------------------------

TITLE: Cloning Apache Camel Git Repository
DESCRIPTION: Git command to clone the Apache Camel repository for project developers. This method requires SSH and is only accessible to authorized contributors.

LANGUAGE: shell
CODE:
git clone https://gitbox.apache.org/repos/asf/camel.git

----------------------------------------

TITLE: Checking Camel K Runtime Version
DESCRIPTION: Commands to check the Camel version used by the Camel K runtime in the cluster

LANGUAGE: bash
CODE:
$ kamel version -a -v | grep Runtime
$ kubectl get camelcatalog camel-catalog-1.15.2 -o yaml | grep camel\.version

----------------------------------------

TITLE: Accessing Apache Camel GitHub Repository
DESCRIPTION: The URL for the Apache Camel GitHub repository, where users can view the mirrored source code and submit pull requests.

LANGUAGE: markdown
CODE:
https://github.com/apache/camel/

----------------------------------------

TITLE: Configuring VS Code Launch Configuration for Camel Debug
DESCRIPTION: VS Code launch configuration that combines starting the Camel application and attaching the debugger. Uses the apache.camel debug adapter.

LANGUAGE: json
CODE:
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Run with Camel Debugger",
			"type": "apache.camel",
			"request": "attach",
			"preLaunchTask": "Run Camel application with debug Profile"
		}
	]
}

----------------------------------------

TITLE: AWS Secret Manager Properties Configuration
DESCRIPTION: Main configuration properties for AWS Secret Manager authentication.

LANGUAGE: properties
CODE:
camel.vault.aws.accessKey = accessKey\ncamel.vault.aws.secretKey = secretKey\ncamel.vault.aws.region = region

----------------------------------------

TITLE: Creating ConfigMap for Development Environment
DESCRIPTION: Creates a ConfigMap with a test message for the development environment using kubectl.

LANGUAGE: bash
CODE:
kubectl create cm my-cm --from-literal my-configmap-file="I am a development environment"

----------------------------------------

TITLE: Setting Page Title with YAML Frontmatter
DESCRIPTION: YAML frontmatter block that sets the page title metadata to 'Sitemap'

LANGUAGE: yaml
CODE:
---
title: "Sitemap"
---

----------------------------------------

TITLE: Installing Karavan Cloud Application using Karavan CLI
DESCRIPTION: Command to install Karavan Cloud Application on Kubernetes using the new Karavan CLI. It simplifies the setup process by generating resource YAML files and configuring the environment with a single command.

LANGUAGE: bash
CODE:
jbang org.apache.camel.karavan:karavan-cli:3.21.0 install --git-repository=$REPO --git-password=$PASWORD --git-username=$USERNAME  --node-port=30777

----------------------------------------

TITLE: Configuring Maven Profile for Camel Debug
DESCRIPTION: Maven profile configuration to include camel-debug dependency only during development. The profile is activated when camel.debug property is set to true.

LANGUAGE: xml
CODE:
<profiles>
    <profile>
        <id>camel.debug</id>
        <activation>
            <property>
                <name>camel.debug</name>
                <value>true</value>
            </property>
        </activation>
        <dependencies>
            <dependency>
                 <groupId>org.apache.camel</groupId>
                <artifactId>camel-debug</artifactId>
            </dependency>
        </dependencies>
    </profile>
</profiles>

----------------------------------------

TITLE: VS Code YAML Schema Configuration
DESCRIPTION: JSON configuration for mapping Camel YAML schema to specific file patterns in VS Code settings

LANGUAGE: json
CODE:
{
	"yaml.schemas": {
		"https://raw.githubusercontent.com/apache/camel/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/camel-yaml-dsl.json" : "/pattern-defined-in-settings*.yaml"
	}
}

----------------------------------------

TITLE: VS Code YAML Schema Configuration
DESCRIPTION: JSON configuration for mapping Camel YAML schema to specific file patterns in VS Code settings

LANGUAGE: json
CODE:
{
	"yaml.schemas": {
		"https://raw.githubusercontent.com/apache/camel/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/camel-yaml-dsl.json" : "/pattern-defined-in-settings*.yaml"
	}
}

----------------------------------------

TITLE: Starting Camel Quarkus Application - Legacy Method
DESCRIPTION: Command to start a Camel Quarkus application in JVM mode using the pre-1.7.0 method with the runner jar.

LANGUAGE: sh
CODE:
$ java -jar target/*-runner.jar

----------------------------------------

TITLE: Calculating Git Commits and Contributors for Apache Camel in 2019
DESCRIPTION: These bash commands calculate the total number of commits and unique contributors to the Apache Camel project during 2019 using Git shortlog.

LANGUAGE: bash
CODE:
#1 git shortlog -ns --since 2019-01-01 --until 2020-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'
#2 git shortlog --since 2019-01-01 --until 2020-01-01 -ns | wc -l

----------------------------------------

TITLE: Docker Pipe Usage Example
DESCRIPTION: Example showing how to use docker-pipe.sh script to enable Docker commands within a container while avoiding Docker-in-Docker issues. Demonstrates setup, container execution, and cleanup process.

LANGUAGE: shell
CODE:
$ support/docker-pipe.sh tmp &
$ docker run -v "$PWD/tmp":"$PWD/tmp" \
  -v "$PWD/tmp/docker":/usr/bin/docker" \
  ...
root@62ace315af17:...# docker run ...
root@62ace315af17:...# exit
$ tmp/teardown.sh

----------------------------------------

TITLE: Configuring Camel Debug Profile with Jolokia in Maven POM
DESCRIPTION: Maven profile configuration that enables Camel debugging capabilities with Jolokia agent integration for Quarkus applications. Includes dependency management and plugin configuration for the debug profile.

LANGUAGE: xml
CODE:
        <profile>
            <id>camel.debug</id>
            <activation>
                <property>
                    <name>camel.debug</name>
                    <value>true</value>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.apache.camel.quarkus</groupId>
                    <artifactId>camel-quarkus-debug</artifactId>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.7.1</version>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                      <artifactItem>
                                        <groupId>org.jolokia</groupId>
                                        <artifactId>jolokia-agent-jvm</artifactId>
                                        <version>2.0.3</version>
                                        <type>jar</type>
                                        <classifier>javaagent</classifier>
                                      </artifactItem>
                                    </artifactItems>
                                    <stripVersion>true</stripVersion>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>${quarkus.platform.group-id}</groupId>
                        <artifactId>quarkus-maven-plugin</artifactId>
                        <configuration>
                            <jvmArgs>-Dcamel.main.shutdownTimeout=30 -Dquarkus.camel.source-location-enabled=true -javaagent:target/dependency/jolokia-agent-jvm-javaagent.jar=port=7878,host=localhost</jvmArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

----------------------------------------

TITLE: Running Camel K with Hybrid JVM/Native Profile
DESCRIPTION: Command to run a Camel application with both JVM and Native build profiles, allowing JVM mode operation while native compilation completes in the background.

LANGUAGE: bash
CODE:
$ kamel run -t quarkus.package-type=fast-jar -t quarkus.package-type=native ...

----------------------------------------

TITLE: Clean Build with Maven
DESCRIPTION: Maven command to perform a clean build of the website, removing all previously generated content.

LANGUAGE: shell
CODE:
$ mvn clean package

----------------------------------------

TITLE: Git Commands for Camel Statistics Analysis
DESCRIPTION: Shell commands used to calculate total commit count and unique committer count for the Apache Camel project during 2022. The first command sums up all commit counts, while the second command counts unique committers.

LANGUAGE: shell
CODE:
#1 git shortlog -ns --since 2022-01-01 --until 2023-01-01 | cut -c1-7 | awk '{ SUM += $1} END { print SUM }'
#2 git shortlog --since 2022-01-01 --until 2023-01-01 -ns | wc -l

----------------------------------------

TITLE: Configuring VS Code Task for Camel Debugging in JSON
DESCRIPTION: JSON configuration for a VS Code task that launches a Camel test with Maven using the camel.debug profile. It sets up the necessary environment variables and problem matcher for Camel debugging.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Launch Camel test with Maven with camel.debug profile",
			"type": "shell",
			"command": "mvn",
			"args": [
				"test",
				"-Dtest=*",
				"-Pcamel.debug"
			],
			"options": {
				"env": {
					"CAMEL_DEBUGGER_SUSPEND": "true"
				}
			},
			"problemMatcher": "$camel.debug.problemMatcher",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true
		}
	]
}

----------------------------------------

TITLE: Configuring VS Code Task for Camel Debugging in JSON
DESCRIPTION: JSON configuration for a VS Code task that launches a Camel test with Maven using the camel.debug profile. It sets up the necessary environment variables and problem matcher for Camel debugging.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Launch Camel test with Maven with camel.debug profile",
			"type": "shell",
			"command": "mvn",
			"args": [
				"test",
				"-Dtest=*",
				"-Pcamel.debug"
			],
			"options": {
				"env": {
					"CAMEL_DEBUGGER_SUSPEND": "true"
				}
			},
			"problemMatcher": "$camel.debug.problemMatcher",
			"presentation": {
				"reveal": "always"
			},
			"isBackground": true
		}
	]
}

----------------------------------------

TITLE: Listing Kamelet Bindings
DESCRIPTION: Demonstrates how to list created Kamelet bindings using the kn CLI.

LANGUAGE: shell
CODE:
kn source kamelet binding list

----------------------------------------

TITLE: Building with Maven
DESCRIPTION: Maven command to build the entire website from scratch.

LANGUAGE: shell
CODE:
$ mvn package

----------------------------------------

TITLE: Sample JSON Fruit Model Object
DESCRIPTION: JSON structure representing a fruit model object with properties like id, name, category, nutrition, status, price and tags.

LANGUAGE: json
CODE:
{
  "id": 1000,
  "name": "Pineapple",
  "category":{
    "id": "1",
    "name":"tropical"
  },
  "nutrition":{
    "calories": 50,
    "sugar": 9
  },
  "status": "AVAILABLE",
  "price": 1.59,
  "tags": ["sweet"]
}

----------------------------------------

TITLE: Creating a New Release Note
DESCRIPTION: Hugo command to create a new release note using the release-note archetype.

LANGUAGE: shell
CODE:
$ yarn run hugo new --kind release-note releases/release-x.y.z.md

----------------------------------------

TITLE: Configuring Camel Unit Test with Extended Timeout in Java
DESCRIPTION: Java code for a Camel unit test class extending CamelMainTestSupport. It demonstrates setting up a longer timeout for debugging purposes using NotifyBuilder.

LANGUAGE: java
CODE:
class MainTest extends CamelMainTestSupport {
	@Test
	void myTest() throws Exception {
		NotifyBuilder notify = new NotifyBuilder(context)
			.whenCompleted(1).whenBodiesDone("Bye World").create();
		assertTrue(
			notify.matches(90, TimeUnit.SECONDS), "1 message should be completed"
		);
	}
}

----------------------------------------

TITLE: Displaying Knative Source Commands
DESCRIPTION: Shows how to use the kn CLI to display available commands for managing event sources.

LANGUAGE: shell
CODE:
kn source -h

----------------------------------------

TITLE: Defining log4j2 Version in camel-dependencies BOM
DESCRIPTION: This XML snippet shows the definition of the log4j2 version in the camel-dependencies Bill of Materials (BOM). It specifies the version of log4j used for building and testing Apache Camel releases.

LANGUAGE: xml
CODE:
<log4j2-version>2.13.3</log4j2-version>

----------------------------------------

TITLE: Building the Antora Camel UI Theme
DESCRIPTION: Commands to build the Antora UI theme for the Camel website.

LANGUAGE: shell
CODE:
$ cd antora-ui-camel
$ yarn build

----------------------------------------

TITLE: Modifying Rest DSL Configuration
DESCRIPTION: XML snippet showing the modified Rest DSL configuration for Camel on Quarkus.

LANGUAGE: xml
CODE:
<restConfiguration bindingMode="json"
                   contextPath="rest" port="8080"
                   apiContextPath="api-docs"
                   enableCORS="true"
                   inlineRoutes="false">

    <!-- we want json output in pretty mode -->
    <dataFormatProperty key="prettyPrint" value="true"/>

    <!-- setup openapi api descriptions -->
    <apiProperty key="base.path" value="rest"/>
    <apiProperty key="api.version" value="1.2.3"/>
    <apiProperty key="api.title" value="User Services"/>
    <apiProperty key="api.description" value="Camel Rest Example with OpenApi that provides an User REST service"/>
    <apiProperty key="api.contact.name" value="The Apache Camel team"/>

</restConfiguration>

----------------------------------------

TITLE: Component Subset Configuration in JSON Format
DESCRIPTION: JSON configuration file format for defining a subset of components to be used in the Karavan component palette. The file should match the format of 'camel catalog component --json' output.

LANGUAGE: json
CODE:
// Format should match: camel catalog component --json

----------------------------------------

TITLE: Building Quarkus Native Executable
DESCRIPTION: Commands to build a native executable of the Quarkus application, including options for using docker for cross-platform builds.

LANGUAGE: shell
CODE:
./mvnw package -Pnative

LANGUAGE: shell
CODE:
./mvnw package -Pnative -Dquarkus.native.container-build=true

----------------------------------------

TITLE: Cloning the Apache Camel Website Repository
DESCRIPTION: Git command to clone the Apache Camel website project repository.

LANGUAGE: shell
CODE:
$ git clone https://github.com/apache/camel-website.git

----------------------------------------

TITLE: Running Camel K Kotlin Routes with JBang
DESCRIPTION: Example command showing how to run a Camel K route written in Kotlin directly from GitHub using JBang

LANGUAGE: bash
CODE:
camel run https://github.com/apache/camel-k/blob/main/examples/languages/routes.kts

----------------------------------------

TITLE: Installing Node.js with nvm on Windows
DESCRIPTION: Commands to install nvm and Node.js version 20 on Windows systems using Chocolatey.

LANGUAGE: shell
CODE:
> choco install nvm
> nvm install 20
> nvm use 20

----------------------------------------

TITLE: Camel K Integration Route Definition
DESCRIPTION: Groovy-based Camel K route that processes HTTP requests and routes fruits to different AWS S3 buckets based on sugar content.

LANGUAGE: groovy
CODE:
from('platform-http:/fruits')
    .log('received fruit ${body}')
    .unmarshal().json()
    .removeHeaders("*")
    .setHeader("CamelAwsS3Key", constant("fruit.json"))
    .choice()
        .when().simple('${body[nutrition][sugar]} <= 5')
            .setHeader("CamelAwsS3BucketName", constant("low-sugar"))
        .when().simple('${body[nutrition][sugar]} > 5 && ${body[nutrition][sugar]} <= 10')
            .setHeader("CamelAwsS3BucketName", constant("medium-sugar"))
        .otherwise()
            .setHeader("CamelAwsS3BucketName", constant("high-sugar"))
    .end()
    .marshal().json()
    .log('sending ${body}')
    .to("aws2-s3://noop?$parameters")

----------------------------------------

TITLE: Building Quarkus JVM Application
DESCRIPTION: Commands to package the Quarkus application as a JVM application, including options for creating an uber-jar.

LANGUAGE: shell
CODE:
./mvnw clean package

LANGUAGE: shell
CODE:
./mvnw package -Dquarkus.package.type=uber-jar

----------------------------------------

TITLE: Configuring Hugo Frontmatter Template with Go Template
DESCRIPTION: Template code for generating frontmatter metadata in Hugo content files. Uses Go templating to format the title by replacing hyphens with spaces and setting basic metadata fields like date and draft status.

LANGUAGE: yaml
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
---

----------------------------------------

TITLE: Configuring Micrometer Observation with Apache Camel in Java
DESCRIPTION: This code snippet shows how to set up Micrometer Observation with Apache Camel using the camel-observation component. It demonstrates configuring MicrometerObservationTracer and registering it with the CamelContext.

LANGUAGE: java
CODE:
// Camel
CamelContext context = ...;
MicrometerObservationTracer micrometerObservationTracer = new MicrometerObservationTracer();

// Micrometer Core
MeterRegistry meterRegistry = new SimpleMeterRegistry();

// Micrometer Tracing
Tracer tracer = ...;
Propagator propagator = ...;

// Micrometer Observation setup
ObservationRegistry observationRegistry = ObservationRegistry.create();
observationRegistry.observationConfig().observationHandler(new DefaultMeterObservationHandler(meterRegistry));
observationRegistry.observationConfig().observationHandler(
    new ObservationHandler.FirstMatchingCompositeObservationHandler(
        new PropagatingSenderTracingObservationHandler<>(tracer, propagator),
        new PropagatingReceiverTracingObservationHandler<>(tracer, propagator),
        new DefaultTracingObservationHandler(tracer)
    )
);

// Camel
// Setting up Micrometer Observation Tracer
micrometerObservationTracer.setObservationRegistry(observationRegistry);
micrometerObservationTracer.setTracer(tracer);
micrometerObservationTracer.init(context);

----------------------------------------

TITLE: Configuring Basic Authentication Secret for Karavan in YAML
DESCRIPTION: This snippet demonstrates how to create a Kubernetes Secret for Karavan's basic authentication, setting up the master password.

LANGUAGE: yaml
CODE:
kind: Secret
apiVersion: v1
metadata:
    name: karavan
type: Opaque
stringData:
    master-password: karavan
...

----------------------------------------

TITLE: Creating SSL Certificate Secret in Kubernetes
DESCRIPTION: Command to create a Kubernetes Secret containing SSL certificate files for HTTPS configuration.

LANGUAGE: bash
CODE:
kubectl create secret generic my-self-signed-ssl --from-file=server.key --from-file=server.crt

----------------------------------------

TITLE: Building and Running Camel Application
DESCRIPTION: Commands to build and run the Camel application using Maven and Java.

LANGUAGE: bash
CODE:
cd app
mvn clean package
java -jar target/PlatformHttpServer-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Configuring Basic Authentication for Karavan Deployment in YAML
DESCRIPTION: This snippet shows how to configure a Kubernetes Deployment for Karavan with basic authentication, referencing the master password from a Secret.

LANGUAGE: yaml
CODE:
kind: Deployment
...
        - name: MASTER_PASSWORD
            valueFrom:
            secretKeyRef:
            key: master-password
            name: karavan
        image: ghcr.io/apache/camel-karavan-basic:3.18.3

----------------------------------------

TITLE: Displaying Formatted Camel K Logs
DESCRIPTION: Example of formatted log output showing timestamp, log level, thread name and message. Uses Quarkus logging format pattern '%d{HH:mm:ss} %-5p (%t) %s%e%n'.

LANGUAGE: text
CODE:
[1] 11:21:59 INFO  (main) Apache Camel 3.9.0 (camel-1) started in 74ms (build:0ms init:58ms start:16ms)
[1] 11:21:59 INFO  (main) camel-k-integration 1.5.0-SNAPSHOT on JVM (powered by Quarkus 1.13.0.Final) started in 1.362s.

----------------------------------------

TITLE: Configuring YAML Front Matter for Camel Quarkus v1.5.0 Release Note
DESCRIPTION: YAML front matter configuration block that defines metadata for the Camel Quarkus 1.5.0 release documentation page. Specifies version information, release date, type, required JDK version, and categorization details.

LANGUAGE: yaml
CODE:
url: "/releases/q-1.5.0/"
date: 2020-12-01
type: release-note
version: 1.5.0
title: "Camel Quarkus release 1.5.0"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 9
jdk: [11]

----------------------------------------

TITLE: Defining YAML Front Matter for Kamelets 0.9.0 Release Note
DESCRIPTION: YAML front matter block containing metadata for a Kamelets 0.9.0 release note page. Specifies the URL path, publication date, content type, version number, title, and JDK requirements.

LANGUAGE: yaml
CODE:
---
url: "/releases/kamelets-0.9.0/"
date: 2022-09-05
type: release-note
version: "0.9.0"
title: "Kamelets 0.9.0"
preview: ""
changelog: ""
category: "camel-kamelets"
jdk: [11]
---

----------------------------------------

TITLE: Comparing Simple and Compiled Simple Expressions in Apache Camel
DESCRIPTION: Demonstrates the syntax difference between Simple and Compiled Simple (csimple) expressions in Apache Camel, highlighting the performance improvement of csimple for dynamic Object-Graph Navigation Language (OGNL) method calls.

LANGUAGE: XML
CODE:
<simple>${exchangeProperty.user.getName} != null && ${exchangeProperty.user.getAge} > 11</simple>

LANGUAGE: XML
CODE:
<csimple>${exchangeProperty.user} != null &&
             ${exchangeProperty.user.getName()} != null &&
             ${exchangeProperty.user.getAge()} > 11</csimple>

----------------------------------------

TITLE: Running Quarkus in Dev Mode
DESCRIPTION: Command to run a Quarkus application in development mode, which enables features like the Dev Console.

LANGUAGE: shell
CODE:
$ mvn clean compile quarkus:dev

----------------------------------------

TITLE: Configuring Kamelets 0.3.0 Release Metadata in YAML
DESCRIPTION: YAML front matter defining the metadata for Kamelets version 0.3.0 release notes. Specifies the URL path, date, version, title and other configuration parameters.

LANGUAGE: yaml
CODE:
url: "/releases/kamelets-0.3.0/"
date: 2021-07-01
type: release-note
version: "0.3.0"
title: "Kamelets 0.3.0"
preview: ""
changelog: ""
category: "camel-kamelets"
jdk: [11]

----------------------------------------

TITLE: Plain Camel YAML Route Definition
DESCRIPTION: Example of a basic Camel route definition using YAML DSL, showing timer integration with logging

LANGUAGE: yaml
CODE:
- from:
    uri: "timer:yaml"
    parameters:
      period: "1000"
    steps:
      - set-body:
          constant: "Hello Camel K from yaml"
      - to: "log:info"

----------------------------------------

TITLE: Escaped Simple Expression in Properties
DESCRIPTION: Shows how to properly escape Camel Simple expressions in property files

LANGUAGE: properties
CODE:
date-expression = $${date:now}

----------------------------------------

TITLE: YAML Front Matter for Camel-K Runtime 1.8.0 Release Notes
DESCRIPTION: YAML metadata block defining the release note properties including version, date, and JDK requirements for Camel-K Runtime 1.8.0.

LANGUAGE: yaml
CODE:
url: "/releases/k-runtime-1.8.0/"
date: 2021-07-09
type: release-note
version: "1.8.0"
title: "Camel-K Runtime release 1.8.0"
preview: ""
changelog: ""
category: "camel-k-runtime"
milestone: 12
jdk: [11]

----------------------------------------

TITLE: Implementing Rest DSL with OpenAPI Contract-First Approach
DESCRIPTION: Demonstrates how to use the contract-first approach in Rest DSL by specifying an OpenAPI specification file in Java DSL.

LANGUAGE: java
CODE:
public void configure() throws Exception {
    rest().openApi("petstore-v3.json");
}

----------------------------------------

TITLE: Windup XML Test Rule Definition
DESCRIPTION: Test rule that verifies the camel-linkedin removal detection rule works correctly by checking for exactly one hint message.

LANGUAGE: xml
CODE:
<rule id="xml-removed-components-00000-test">
    <when>
        <not>
            <iterable-filter size="1">
                <hint-exists message="`org.apache.camel:camel-linkedin` artifact has been removed in Apache Camel 3 so it won't be available"/>
            </iterable-filter>
        </not>
    </when>
    <perform>
        <fail message="[xml-removed-components] 'camel-linkedin' dependency removed hint was not found!" />
    </perform>
</rule>

----------------------------------------

TITLE: Release Statistics Table in Markdown
DESCRIPTION: A markdown table showing major Camel 3 releases sorted by number of issues solved, including release version, date, total issues, and release type.

LANGUAGE: markdown
CODE:
| Release | Date       | Total | Type        |
| ------- | ---------- | ----- | ----------- |
| 3.0.0   | 28/11/2019 | 306   | Major **      |
| 3.1.0   | 27/02/2020 | 289   | Minor       |
| 3.5.0   | 04/09/2020 | 243   | Minor       |
| 3.15.0  | 04/02/2022 | 218   | Minor       |
| 3.10.0  | 20/05/2021 | 211   | Minor       |
| 3.12.0  | 04/10/2021 | 205   | Minor       |
| 3.7.0   | 16/12/2020 | 185   | Minor (LTS) |
| 3.8.0   | 13/02/2021 | 166   | Minor       |
| 3.9.0   | 28/03/2021 | 162   | Minor       |
| 3.2.0   | 06/04/2020 | 160   | Minor       |
| 3.6.0   | 20/09/2020 | 152   | Minor       |
| 3.3.0   | 15/05/2020 | 148   | Minor       |
| 3.4.0   | 18/06/2020 | 148   | Minor       |
| 3.13.0  | 12/11/2021 | 118   | Minor       |
| 3.14.0  | 16/12/2021 | 114   | Minor (LTS) |
| 3.11.0  | 28/06/2021 | 102   | Minor (LTS) |

----------------------------------------

TITLE: Vulnerable File Moving Route in Apache Camel
DESCRIPTION: This code snippet demonstrates a simple Apache Camel route that moves files from one directory to another. It illustrates the vulnerability where a maliciously crafted filename can be interpreted as a Simple language expression, potentially leading to code execution.

LANGUAGE: java
CODE:
from("file:c:/tmp/in")
  .to("file:/c:/tmp/out");

----------------------------------------

TITLE: Initializing Security Advisory Frontmatter in YAML
DESCRIPTION: YAML frontmatter template for creating security advisory pages in Apache Camel documentation. The template includes fields for CVE information, dates, severity levels, and affected/fixed versions. Uses Hugo-style template variables for dynamic content insertion.

LANGUAGE: yaml
CODE:
---
title: "Apache Camel Security Advisory - {{ .Name | title }}"
url: /security/{{ .Name }}.html
date: {{ .Date }}
draft: true
type: security-advisory
cve: {{ .Name }}
severity: 
summary: ""
description: ""
mitigation: ""
credit: ""
affected: 
fixed: 
---

----------------------------------------

TITLE: Cloud Secret Property Reference
DESCRIPTION: Example showing how to reference cloud-based secrets in Camel routes using property placeholders

LANGUAGE: xml
CODE:
<camelContext>
    <route>
        <from uri="direct:start"/>
        <log message="Username is {{aws:username}}"/>
    </route>
</camelContext>

----------------------------------------

TITLE: Running Multiple Camel Routes via CLI
DESCRIPTION: Example showing how to run multiple route definitions in different DSL formats using Camel JBang CLI

LANGUAGE: shell
CODE:
camel run route1.java route2.xml route3.yaml

----------------------------------------

TITLE: Configuring Local Antora Content Source
DESCRIPTION: YAML configuration to use a local git repository as the content source for Antora documentation builds.

LANGUAGE: yaml
CODE:
content:
  sources:
    - url: ../camel
      branches: HEAD
      start_paths:
        # manual
        - docs/user-manual

----------------------------------------

TITLE: Generating Release Note Front Matter with Hugo Templates
DESCRIPTION: YAML front matter template that uses Hugo template syntax to automatically generate release note metadata. Includes dynamic date calculations, version extraction from filename, and configurable release properties.

LANGUAGE: yaml
CODE:
---
date: {{ dateFormat "2006-01-02" .Date }}
# EOL date, default 1 year from release date
eol: {{ ((time .Date).AddDate 1 0 0).Format "2006-01-02" }}
draft: true
type: release-note
version: "{{ replace .File.BaseFileName "release-" "" }}"
title: "Release {{ replace .File.BaseFileName "release-" "" }}"
preview: ""
apiBreaking: ""
knownIssues: ""
jiraVersionId: ""
category: "camel"
# kind can be lts or legacy (for 2.x)
# kind:
jdk: [8,11]
---

----------------------------------------

TITLE: Implementing Camel Component Integration Test in Java
DESCRIPTION: Java class for integration testing of the Camel component, using CamelTestSupport and defining a test route.

LANGUAGE: java
CODE:
public class ChuckComponentTest extends CamelTestSupport {
    @Test
    public void testRandomJoke() throws Exception {
        MockEndpoint mock = getMockEndpoint("mock:result");
        mock.expectedMinimumMessageCount(1);
        mock.expectedBodyReceived().body(RandomJoke.class);
        template.sendBody("direct:test", "");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                from("direct:test")
                  .to("chuck:jokes")
                  .log("${body}")
                  .to("mock:result");
            }
        };
    }
}

----------------------------------------

TITLE: Installing Node.js with nvm on Linux/Mac
DESCRIPTION: Commands to install nvm and Node.js version 20 on Linux or Mac systems.

LANGUAGE: shell
CODE:
$ touch ~/.bash_profile
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.7/install.sh | bash
$ source ~/.nvm/nvm.sh
$ nvm install 20
$ nvm use 20

----------------------------------------

TITLE: Frontmatter Template for Camel Kafka Connector Release Notes
DESCRIPTION: Hugo frontmatter template that defines metadata for a Camel Kafka Connector release note page. Includes dynamic version number extraction from filename, URL generation, and basic page metadata like title and JDK compatibility.

LANGUAGE: markdown
CODE:
---
url: "/releases/ckc-{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}/"
date: {{ .Date }}
draft: true
type: release-note
version: "{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
title: "Camel Kafka Connector release {{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
preview: ""
changelog: ""
category: "camel-kafka-connector"
jdk: [8,11]
---

----------------------------------------

TITLE: Vulnerable XSLT Route Configuration in Apache Camel
DESCRIPTION: Example of a vulnerable Camel route configuration that processes HTTP requests through XSLT transformation. This configuration could allow attackers to exploit XXE vulnerabilities through external entity resolution in XML messages.

LANGUAGE: xml
CODE:
<route>
  <from uri="servlet:///hello"/>
  <to uri="xslt:file:/tmp/transform.xsl" />
  <to uri="file:/tmp/output" />
</route>

----------------------------------------

TITLE: Cloning Apache Camel Git Repository
DESCRIPTION: Command for project developers to directly clone the Apache Camel repository from Apache GitBox. Requires SSH installation and developer credentials.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/camel.git

----------------------------------------

TITLE: Defining Hugo Frontmatter for Camel-K Runtime Release Notes
DESCRIPTION: This YAML snippet defines the frontmatter for a Hugo-based release note page. It includes dynamically generated fields for URL, version, and title based on the file name. It also sets metadata such as date, draft status, and JDK version.

LANGUAGE: yaml
CODE:
---
url: "/releases/k-runtime-{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}/"
date: {{ .Date }}
draft: true
type: release-note
version: "{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
title: "Camel-K Runtime release {{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
preview: ""
changelog: ""
category: "camel-k-runtime"
milestone:
jdk: [11]
---

----------------------------------------

TITLE: Defining YAML Front Matter for Blog Page
DESCRIPTION: This YAML snippet defines the front matter for a blog page. It sets the title of the page to "Blog". This configuration is typically used in static site generators or content management systems to provide metadata for the page.

LANGUAGE: yaml
CODE:
---
title: "Blog"
---

----------------------------------------

TITLE: Querying Chuck Norris API with cURL in Bash
DESCRIPTION: Demonstrates how to make a GET request to the Chuck Norris API using cURL and format the JSON response with jq.

LANGUAGE: sh
CODE:
$ curl https://api.chucknorris.io/jokes/random | jq

----------------------------------------

TITLE: Generating Security Configuration with Hugo Templates
DESCRIPTION: This snippet demonstrates how to use Hugo templating to generate security-related configuration settings. It includes fields for canonical URL, contact information, encryption, policy, and an expiration date set to one year from the current date.

LANGUAGE: hugo
CODE:
Canonical: {{ $.Params.canonical }}
Contact: {{ $.Params.contact }}
Encryption: {{ $.Params.encryption }}
Policy: {{ $.Params.policy }}
Expires: {{ now.UTC.AddDate 1 0 0 | time.Format "2006-01-02T15:04:05Z07:00" }}

----------------------------------------

TITLE: Configuring Robots.txt for Apache Camel Website
DESCRIPTION: This robots.txt file allows all user agents to access the website and specifies multiple sitemap locations. It uses Hugo templating to dynamically insert the site's base URL.

LANGUAGE: plaintext
CODE:
User-agent: *

Sitemap: {{.Site.BaseURL}}sitemap.xml
Sitemap: {{.Site.BaseURL}}sitemap-camel-k.xml
Sitemap: {{.Site.BaseURL}}sitemap-components.xml
Sitemap: {{.Site.BaseURL}}sitemap-manual.xml

----------------------------------------

TITLE: Tekton Pipeline Configuration for CICD
DESCRIPTION: Defines a complete CI/CD pipeline including tasks for code checkout, deployment to development, testing, and promotion to production.

LANGUAGE: yaml
CODE:
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-cicd
spec:
  description: |
    CICD pipeline for a microservice
  params:
  - name: repo-url
    type: string
    description: The git repo URL to clone from.
...

----------------------------------------

TITLE: Previewing the Website Locally
DESCRIPTION: Command to start a local web server for previewing the built website.

LANGUAGE: shell
CODE:
$ yarn preview

----------------------------------------

TITLE: Maven Dependencies for Camel Quarkus Command Line App
DESCRIPTION: Required Maven dependencies for building a Camel Quarkus command line application including main, timer, and log components

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.camel.quarkus</groupId>
    <artifactId>camel-quarkus-main</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.camel.quarkus</groupId>
    <artifactId>camel-quarkus-log</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.camel.quarkus</groupId>
    <artifactId>camel-quarkus-timer</artifactId>
</dependency>

----------------------------------------

TITLE: Building the Website Content
DESCRIPTION: Command to build the full Apache Camel website content.

LANGUAGE: shell
CODE:
$ yarn build

----------------------------------------

TITLE: Configuring Kamelets with Environment Variables in Apache Camel
DESCRIPTION: This snippet demonstrates how to configure Kamelets using environment variables in Apache Camel 4.9. It shows two equivalent ways to set the 'bucketNameOrArn' option for the AWS S3 source Kamelet.

LANGUAGE: properties
CODE:
CAMEL_KAMELET_AWS_S3_SOURCE_BUCKETNAMEORARN = myBucket
CAMEL_KAMELET_AWS_S3_SOURCE_BUCKET_NAME_OR_ARN = myBucket

----------------------------------------

TITLE: Running Apache HTTP Server in Docker Container
DESCRIPTION: Docker command to run Apache HTTP server with local configuration files and website content. Mounts the built website and support configuration files to test .htaccess changes in a production-like environment.

LANGUAGE: shell
CODE:
docker run --rm -p 80:80 -p 443:443 \
  -v "$PWD/public":/usr/local/apache2/htdocs/:Z \
  -v "$PWD/support/http":/support:Z \
  httpd:2.4 /bin/bash -c "cp /support/* /usr/local/apache2/conf/ && httpd-foreground"

----------------------------------------

TITLE: Specifying Data Types in Kamelet YAML Definition
DESCRIPTION: Demonstrates how to expose supported input/output data types in a Kamelet YAML specification.

LANGUAGE: yaml
CODE:
apiVersion: camel.apache.org/v1
kind: Kamelet
metadata:
 name: aws-s3-source
spec:
 properties:
   # ...
 dataTypes:
   out:
     default: binary
     types:
       binary:
         format: "application-octet-stream"
         description: Default binary representation of the source.
         mediaType: application/octet-stream
       cloudevents:
         format: "aws2-s3:application-cloudevents"
         description: Data type sets CloudEvent headers on the message.
# ...

----------------------------------------

TITLE: Setting up Camel Quarkus Debug Environment
DESCRIPTION: This process involves creating a Camel route using Java DSL, converting it to a Camel Quarkus project, building the native application, and configuring debug settings in VS Code. The setup requires GraalVM (JDK 20+), Maven 3.9.3+, and the Extension Pack for Apache Camel.

LANGUAGE: json
CODE:
{
  ".vscode/tasks.json": {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "Build Native",
        "type": "shell",
        "command": "mvn package -Pnative"
      }
    ]
  }
}

----------------------------------------

TITLE: Viewing Trait Conditions in Camel K Integration
DESCRIPTION: Illustrates the new feature of exposing trait conditions in the Integration resource. This helps developers troubleshoot issues by providing more detailed information about trait configurations and statuses.

LANGUAGE: yaml
CODE:
...
    - firstTruthyTime: "2024-01-05T14:59:28Z"
      lastTransitionTime: "2024-01-05T14:59:28Z"
      lastUpdateTime: "2024-01-05T14:59:31Z"
      message: 'explicitly disabled by the platform: container image was not built
        via Camel K operator'
      reason: jvmTraitConfiguration
      status: "True"
      type: TraitInfo
...

----------------------------------------

TITLE: Sample Camel Route Builder (Java)
DESCRIPTION: This Java class extends RouteBuilder to define a simple Camel route. It creates a timer-based route that calls methods on MyBean and logs the results. This demonstrates how to structure a basic Camel route for debugging purposes.

LANGUAGE: java
CODE:
package org.apache.camel.example;

import org.apache.camel.builder.RouteBuilder;

public class MyRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("timer:foo").routeId("foo")
            .bean("myBean", "hello")
            .log("${body}")
            .bean("myBean", "bye")
            .log("${body}");
    }
}

----------------------------------------

TITLE: Configuring Kamelet Version in YAML
DESCRIPTION: This YAML snippet demonstrates how to specify a particular version of a Kamelet when using it in a Pipe or Integration. It shows the syntax for setting the 'kameletVersion' parameter.

LANGUAGE: yaml
CODE:
- from:
    uri: "kamelet:my-kamelet?kameletVersion=v2"
    steps:
      - to: "log:info"

----------------------------------------

TITLE: Installing Camel CLI with JBang
DESCRIPTION: Commands to install and use the Camel CLI tool using JBang for running Camel applications from terminal.

LANGUAGE: bash
CODE:
jbang app install camel@apache/camel

----------------------------------------

TITLE: Creating and Running Camel Applications with JBang
DESCRIPTION: Commands to initialize and run Camel applications using the Camel CLI, including running examples from GitHub and enabling live reload development mode.

LANGUAGE: bash
CODE:
camel init hello.java
camel run hello.java
camel run https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java
camel init https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java
camel run * --dev

----------------------------------------

TITLE: Pulling Camel K Nightly Release Docker Image
DESCRIPTION: Shows the command to pull the latest nightly release Docker image of Camel K for testing purposes.

LANGUAGE: bash
CODE:
docker pull testcamelk/camel-k:1.9.0-nightly

----------------------------------------

TITLE: Configuring Camel-K Runtime 1.10.0 Release Metadata
DESCRIPTION: YAML front matter metadata configuration for Camel-K Runtime 1.10.0 release notes documentation. Specifies version, date, type, and runtime requirements.

LANGUAGE: yaml
CODE:
url: "/releases/k-runtime-1.10.0/"
date: 2021-11-15
type: release-note
version: "1.10.0"
title: "Camel-K Runtime release 1.10.0"
preview: ""
changelog: ""
category: "camel-k-runtime"
milestone: 14
jdk: [11]

----------------------------------------

TITLE: Configuring Camel-K Runtime Release Metadata in YAML
DESCRIPTION: YAML frontmatter configuration specifying the release details for Camel-K Runtime version 1.5.0. Includes URL path, release date, version number, and JDK version requirements.

LANGUAGE: yaml
CODE:
url: "/releases/k-runtime-1.5.0/"
date: 2020-12-01T13:01:58+01:00
type: release-note
version: "1.5.0"
title: "Camel-K Runtime release 1.5.0"
preview: ""
changelog: ""
category: "camel-k-runtime"
milestone: 7
jdk: [11]

----------------------------------------

TITLE: Defining Camel Quarkus Release Metadata in YAML
DESCRIPTION: YAML frontmatter defining metadata for Camel Quarkus release 3.12.0 including version, release date, JDK compatibility, and release category information.

LANGUAGE: yaml
CODE:
url: "/releases/q-3.12.0/"
date: 2024-06-27
type: release-note
version: 3.12.0
title: "Camel Quarkus release 3.12.0"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 60
jdk: [17,21]

----------------------------------------

TITLE: Configuring Camel Quarkus 2.5.0 Release Metadata
DESCRIPTION: YAML frontmatter metadata for the Camel Quarkus 2.5.0 release documentation page. Specifies release details including version, date, JDK requirements, and page categorization.

LANGUAGE: yaml
CODE:
url: "/releases/q-2.5.0/"
date: 2021-11-26
type: release-note
version: 2.5.0
title: "Camel Quarkus release 2.5.0"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone: 21
jdk: [11]

----------------------------------------

TITLE: YAML Frontmatter for Camel-K 2.4.0 Release Notes
DESCRIPTION: YAML metadata block defining the properties of the Camel-K 2.4.0 release documentation page. Specifies the URL path, release date, version information, and JDK requirements.

LANGUAGE: yaml
CODE:
url: "/releases/k-2.4.0/"
date: 2024-08-07
type: release-note
version: "2.4.0"
title: "Camel-K 2.4.0"
preview: ""
changelog: ""
category: "camel-k"
milestone: 49
jdk: [17]

----------------------------------------

TITLE: YAML Front Matter for Kamelets 4.10.2 Release Notes
DESCRIPTION: YAML metadata block defining release information for Kamelets version 4.10.2. Specifies release date, version, category and JDK compatibility requirements.

LANGUAGE: yaml
CODE:
url: "/releases/kamelets-4.10.2/"
date: 2025-03-10
type: release-note
version: "4.10.2"
title: "Kamelets 4.10.2"
preview: ""
changelog: ""
category: "camel-kamelets"
jdk: [17,21]

----------------------------------------

TITLE: Defining Markdown Front Matter for News Page
DESCRIPTION: Sets up the markdown front matter metadata and main header for an Apache Camel news page using standard markdown syntax.

LANGUAGE: markdown
CODE:
---
title: "News"
---

# Apache Camel news

----------------------------------------

TITLE: Generating Front Matter for Camel Quarkus Release Notes in Hugo
DESCRIPTION: This snippet creates the YAML front matter for a Camel Quarkus release note. It dynamically generates the URL, version, and title based on the file name. It also sets other metadata such as date, draft status, type, and JDK version.

LANGUAGE: yaml
CODE:
---
url: "/releases/q-{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}/"
date: {{ .Date }}
draft: true
type: release-note
version: "{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
title: "Camel Quarkus release {{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
preview: ""
changelog: ""
category: "camel-quarkus"
milestone:
jdk: [11]
---

----------------------------------------

TITLE: Generating Camel-K Release Note Front Matter with Hugo
DESCRIPTION: This snippet defines the front matter for a Camel-K release note using Hugo templating. It dynamically generates the URL, version, and title based on the file name, and sets up other metadata fields.

LANGUAGE: yaml
CODE:
---
url: "/releases/k-{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}/"
date: {{ .Date }}
draft: true
type: release-note
version: "{{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
title: "Camel-K release {{ replace (replaceRE ".*/release-(.*).md" "$1" .File.Path) "_" "." }}"
preview: ""
changelog: ""
category: "camel-k"
milestone:
jdk: [11]
---

----------------------------------------

TITLE: Defining Hugo Front Matter for Camel Blog Post
DESCRIPTION: This YAML-like snippet defines the front matter for a Hugo blog post in the Camel project. It includes fields for title, date, draft status, authors, categories, and preview.

LANGUAGE: yaml
CODE:
---
title: "{{ .Name | title }}"
date: {{ .Date }}
draft: true
authors: ["YOUR GITHUB USERNAME"]
categories: ["CATEGORY FOR THE BLOG POST"]
preview: ""
---

----------------------------------------

TITLE: Displaying Camel Route Information with JBang
DESCRIPTION: This bash snippet shows how to use the 'camel get route' command to display information about Camel routes, including their status and message counts.

LANGUAGE: bash
CODE:
$ camel get route
  PID   NAME            ID      FROM                     REMOTE  STATUS   AGE  COVER  MSG/S  TOTAL  FAIL  INFLIGHT  MEAN  MIN  MAX  LAST  DELTA  SINCE-LAST
 75937  MyRouteBuilder  route1  activemq://test.MyQueue    x     Started  20s    0/1   0.00      0     0         0          0    0                    -/-/-
 75937  MyRouteBuilder  route2  file://test                x     Started  20s    0/1   0.00      0     0         0          0    0                    -/-/-

----------------------------------------

TITLE: Transforming OSGi Blueprint XML to Camel XML DSL
DESCRIPTION: Using camel-jbang to transform an OSGi Blueprint XML file to Camel 4 XML DSL format.

LANGUAGE: shell
CODE:
camel transform route pom.xml --format=xml

----------------------------------------

TITLE: Binding Kamelet Source to Logger
DESCRIPTION: Development command to bind earthquake source Kamelet to a logger for debugging purposes

LANGUAGE: bash
CODE:
kamel bind earthquake-source log:info?showHeaders=true

----------------------------------------

TITLE: Minio Configuration Properties in Apache Camel
DESCRIPTION: Shows the application.properties configuration for Minio settings, including address, access key, and secret key configurations used by the MinioConfig POJO.

LANGUAGE: properties
CODE:
camel.beans.minio.address = http://my-minio.com
camel.beans.minio.access-key = ...
camel.beans.minio.secret-key = ...

----------------------------------------

TITLE: Composing Mentor Application Email for Google Summer of Code 2020
DESCRIPTION: This snippet provides a template for Camel committers to apply as mentors for Google Summer of Code 2020. It includes the required email format, recipients, subject line, and content for the application.

LANGUAGE: plaintext
CODE:
To: private@camel.apache.org
cc: mentors@community.apache.org
subject: GSoC 2020 mentor request for <mentor name>

Camel PMC,

please acknowledge my request to become a mentor for Google Summer of
Code 2020 projects for Apache Camel.

I would like to receive the mentor invite to <mentor email address>