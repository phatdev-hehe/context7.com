TITLE: Implementing Command Classes for List Operations
DESCRIPTION: Three command implementations for model-based testing of a List class. Each command implements the ICommand interface and handles push, pop, and size operations, including precondition checks and state updates for the model.

LANGUAGE: typescript
CODE:
class PushCommand implements fc.Command<Model, List> {
  constructor(readonly value: number) {}
  check = (m: Readonly<Model>) => true;
  run(m: Model, r: List): void {
    r.push(this.value); // impact the system
    ++m.num; // impact the model
  }
  toString = () => `push(${this.value})`;
}
class PopCommand implements fc.Command<Model, List> {
  check(m: Readonly<Model>): boolean {
    // should not call pop on empty list
    return m.num > 0;
  }
  run(m: Model, r: List): void {
    assert.equal(typeof r.pop(), 'number');
    --m.num;
  }
  toString = () => 'pop';
}
class SizeCommand implements fc.Command<Model, List> {
  check = (m: Readonly<Model>) => true;
  run(m: Model, r: List): void {
    assert.equal(r.size(), m.num);
  }
  toString = () => 'size';
}

----------------------------------------

TITLE: Testing for Prototype Pollution Using fast-check
DESCRIPTION: A test that uses fast-check and @fast-check/poisoning to detect prototype pollution vulnerabilities, specifically targeting CVE-2018-3721 in lodash's merge function.

LANGUAGE: typescript
CODE:
import fc from 'fast-check';
import { assertNoPoisoning, restoreGlobals } from '@fast-check/poisoning';
import _ from 'lodash';

test('CVE-2018-3721', () => {
  fc.assert(
    fc
      .property(fc.object(), fc.object(), (instance, other) => {
        const clone = _.cloneDeep(instance); // no direct side-effects to instances coming out of fast-check
        _.merge(clone, other);
        assertNoPoisoning();
      })
      .afterEach(restoreGlobals),
  );
});

----------------------------------------

TITLE: Basic String Containment Properties with fast-check
DESCRIPTION: Example demonstrating property-based testing with fast-check to verify string containment properties. Shows how to use fc.assert with fc.property and string arbitraries.

LANGUAGE: js
CODE:
import fc from 'fast-check';

// Code under test
const contains = (text, pattern) => text.indexOf(pattern) >= 0;

// Properties
describe('properties', () => {
  // string text always contains itself
  it('should always contain itself', () => {
    fc.assert(
      fc.property(fc.string(), (text) => {
        return contains(text, text);
      }),
    );
  });

  // string a + b + c always contains b, whatever the values of a, b and c
  it('should always contain its substrings', () => {
    fc.assert(
      fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {
        // Alternatively: no return statement and direct usage of expect or assert
        return contains(a + b + c, b);
      }),
    );
  });
});

----------------------------------------

TITLE: Property-Based Test for Sorting Algorithm Using fast-check
DESCRIPTION: Implementation of a property-based test for a sorting function using fast-check. This test verifies that for any array of integers, the sorted result has elements in ascending order by checking that each element is less than or equal to the next element.

LANGUAGE: javascript
CODE:
test('should sort numeric elements from the smallest to the largest one', () => {
  fc.assert(
    fc.property(fc.array(fc.integer()), (data) => {
      const sortedData = sortNumbersAscending(data);
      for (let i = 1; i < data.length; ++i) {
        expect(sortedData[i - 1]).toBeLessThanOrEqual(sortedData[i]);
      }
    }),
  );
});

----------------------------------------

TITLE: Importing fast-check Library in JavaScript Test File
DESCRIPTION: Code snippet showing how to import the fast-check library in a JavaScript test file. This is the first step in implementing property-based tests with fast-check.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';

----------------------------------------

TITLE: Basic Property Testing Example with Mocha in JavaScript
DESCRIPTION: This example demonstrates how to integrate fast-check with Mocha to test string containment properties. It shows two test cases: one checking that a string always contains itself, and another verifying that a concatenated string contains its middle part.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';

// Code under test
const contains = (text, pattern) => text.indexOf(pattern) >= 0;

// Properties
describe('properties', () => {
  // string text always contains itself
  it('should always contain itself', () => {
    fc.assert(fc.property(fc.string(), (text) => contains(text, text)));
  });
  // string a + b + c always contains b, whatever the values of a, b and c
  it('should always contain its substrings', () => {
    fc.assert(
      fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {
        // Alternatively: no return statement and direct usage of expect or assert
        return contains(a + b + c, b);
      }),
    );
  });
});

----------------------------------------

TITLE: Running Model-Based Tests Against the List Implementation
DESCRIPTION: This snippet demonstrates how to execute model-based tests using the fc.commands arbitrary to generate command sequences and fc.modelRun to apply them to the system under test. It defines the possible commands and sets up the initial model and real system states.

LANGUAGE: typescript
CODE:
// define the possible commands and their inputs
const allCommands = [
  fc.integer().map((v) => new PushCommand(v)),
  fc.constant(new PopCommand()),
  fc.constant(new SizeCommand()),
];
// run everything
fc.assert(
  fc.property(fc.commands(allCommands, { size: '+1' }), (cmds) => {
    const s = () => ({ model: { num: 0 }, real: new List() });
    fc.modelRun(s, cmds);
  }),
);

----------------------------------------

TITLE: Installing fast-check with npm/yarn
DESCRIPTION: Command to install fast-check as a development dependency in an existing project using npm or yarn.

LANGUAGE: bash
CODE:
npm install --save-dev fast-check

----------------------------------------

TITLE: Using schedule Method to Control Promise Resolution Order
DESCRIPTION: Example demonstrating how to use the scheduler's schedule method to control the resolution order of Promises, even when the original unscheduled Promises would resolve in a different order.

LANGUAGE: typescript
CODE:
// Let suppose:
// - s        : Scheduler
// - shortTask: Promise   - Very quick operation
// - longTask : Promise   - Relatively long operation

shortTask.then(() => {
  // not impacted by the scheduler
  // as it is directly using the original promise
});

const scheduledShortTask = s.schedule(shortTask);
const scheduledLongTask = s.schedule(longTask);

// Even if in practice, shortTask is quicker than longTask
// If the scheduler selected longTask to end first,
// it will wait longTask to end, then once ended it will resolve scheduledLongTask,
// while scheduledShortTask will still be pending until scheduled.
await s.waitOne();

----------------------------------------

TITLE: Selecting from Multiple Arbitraries with fc.oneof in JavaScript
DESCRIPTION: Randomly selects one arbitrary from a list to generate values. Supports weighted selection and depth control for recursive structures. The first arbitrary is privileged for cross-shrinking and depth constraints.

LANGUAGE: javascript
CODE:
fc.oneof(fc.string(), fc.boolean());
// Note: Equivalent to:
//       fc.oneof(
//         { arbitrary: fc.string(), weight: 1 },
//         { arbitrary: fc.boolean(), weight: 1 },
//       )
// Examples of generated values: false, "x ", "\"AXf", "x%", true…

fc.oneof(fc.string(), fc.boolean(), fc.nat());
// Note: Equivalent to:
//       fc.oneof(
//         { arbitrary: fc.string(), weight: 1 },
//         { arbitrary: fc.boolean(), weight: 1 },
//         { arbitrary: fc.nat(), weight: 1 },
//       )
// Examples of generated values: "a:m[nG+", 2147483628, "le@o|g4", 1039477336, 1961824130…

fc.oneof({ arbitrary: fc.string(), weight: 5 }, { arbitrary: fc.boolean(), weight: 2 });
// Examples of generated values: "y", "u F(AR", true, ">,?4", false…

// fc.oneof fits very well with recursive stuctures built using fc.letrec.
// Examples of such recursive structures are available with fc.letrec.

----------------------------------------

TITLE: Converting Random Tests to Property-Based Tests with fc.property
DESCRIPTION: A more robust test using fast-check's property-based testing approach. It generates arbitrary user data in a structured way that ensures reproducibility and enables shrinking for easier debugging.

LANGUAGE: javascript
CODE:
test('sort users by ascending age', () => {
  fc.assert(
    fc.property(
      fc
        .record({
          firstName: firstNameArb(),
          lastName: lastNameArb(),
          birthDate: birthDateArb(),
        })
        .chain((userA) =>
          fc.record({
            userA: fc.constant(userA),
            userB: fc.record({
              firstName: firstNameArb(),
              lastName: lastNameArb(),
              birthDate: birthDateArb({ strictlyOlderThan: userA.birthDate }),
            }),
          }),
        ),
      ({ userA, userB }) => {
        expect(sortByAge([userA, userB])).toEqual([userA, userB]);
        expect(sortByAge([userB, userA])).toEqual([userA, userB]);
      },
    ),
  );
});

----------------------------------------

TITLE: Example-Based Testing of Sorting Function in JavaScript
DESCRIPTION: Traditional unit tests for a sorting function using specific examples. These tests verify that the sortNumbersAscending function correctly handles already sorted arrays, randomly ordered arrays, and descending ordered arrays.

LANGUAGE: javascript
CODE:
test('should keep an already sorted array sorted', () => {
  expect(sortNumbersAscending([1, 2, 3])).toEqual([1, 2, 3]);
});
test('should sort a randomly ordered array in ascending order', () => {
  expect(sortNumbersAscending([3, 1, 2])).toEqual([1, 2, 3]);
});
test('should sort a descending ordered array in ascending order', () => {
  expect(sortNumbersAscending([3, 1, 2])).toEqual([1, 2, 3]);
});

----------------------------------------

TITLE: Implementing Advanced Synchronous Property with Hooks in fast-check
DESCRIPTION: Extended syntax for defining synchronous properties with beforeEach and afterEach hooks for setup and teardown operations. Both hooks are optional and can call previously defined hook functions.

LANGUAGE: javascript
CODE:
fc.property(...arbitraries, (...args) => {})
  .beforeEach((previousBeforeEach) => {})
  .afterEach((previousAfterEach) => {});

----------------------------------------

TITLE: Example Property Using Pre-condition in fast-check
DESCRIPTION: Example of a property that tests a 'crop' function using the fc.pre() method to filter out invalid entries. The property checks that crop(label, maxLength) returns the label unchanged when label.length <= maxLength.

LANGUAGE: javascript
CODE:
fc.property(fc.nat(), fc.string(), (maxLength, label) => {
  fc.pre(label.length <= maxLength); // any label such label.length > maxLength, will be dropped
  return crop(label, maxLength) === label; // true is success, false is failure
});

----------------------------------------

TITLE: Implementing an Asynchronous Queue Test with fast-check and Jest
DESCRIPTION: This code demonstrates how to test a queue implementation using asynchronous property-based testing. It verifies that a queue resolves promises in the order they were called, using fc.asyncProperty and Jest's testing framework. The test includes the queue implementation that ensures sequential processing of asynchronous calls.

LANGUAGE: javascript
CODE:
const { test } = require('@jest/globals');
const fc = require('fast-check');
const { queue } = require('./queue.js'); // refer to the section "connector" for the code

test('should resolve in call order', async () => {
  await fc.assert(
    fc.asyncProperty(fc.scheduler(), async (s) => {
      // Arrange
      const pendingQueries = [];
      const seenAnswers = [];
      const call = jest.fn().mockImplementation((v) => Promise.resolve(v));

      // Act
      const queued = queue(s.scheduleFunction(call));
      pendingQueries.push(queued(1).then((v) => seenAnswers.push(v)));
      pendingQueries.push(queued(2).then((v) => seenAnswers.push(v)));
      await s.waitFor(Promise.all(pendingQueries));

      // Assert
      expect(seenAnswers).toEqual([1, 2]);
    }),
  );
});

// Code under test: should rather be imported from another file
function queue(fun) {
  let lastQuery = Promise.resolve();
  return (...args) => {
    const currentQuery = fun(...args);
    const returnedQuery = lastQuery.then(() => currentQuery);
    lastQuery = currentQuery;
    return returnedQuery;
  };
}

----------------------------------------

TITLE: Defining Basic Synchronous Property in fast-check
DESCRIPTION: Basic syntax for defining a synchronous property in fast-check using arbitrary generators and a predicate function. The predicate can either throw in case of failure or return boolean values to indicate success or failure.

LANGUAGE: javascript
CODE:
fc.property(...arbitraries, (...args) => {});

----------------------------------------

TITLE: Generating Basic Tree Structures with fc.letrec in JavaScript
DESCRIPTION: Demonstrates how to set up a basic recursive tree structure using fc.letrec, with leaf nodes containing natural numbers and internal nodes containing left and right children. The example shows recommended depth control practices to avoid excessively deep structures.

LANGUAGE: javascript
CODE:
// Setup the tree structure:
const { tree } = fc.letrec((tie) => ({
  // Warning: In version 2.x and before, there is no automatic control over the depth of the generated data-structures.
  // As a consequence to avoid your data-structures to be too deep, it is highly recommended to add the constraint `depthFactor`
  // onto your usages of `option` and `oneof` and to put the arbitrary without recursion first.
  // In version 3.x, `depthSize` (previously `depthFactor`) and `withCrossShrink` will be enabled by default.
  tree: fc.oneof({ depthSize: 'small', withCrossShrink: true }, tie('leaf'), tie('node')),
  node: fc.record({
    left: tie('tree'),
    right: tie('tree'),
  }),
  leaf: fc.nat(),
}));
// Use the arbitrary:
tree;
// Examples of generated values:
// • 1948660480
// • {"left":2147483625,"right":28}
// • {__proto__:null,"left":{__proto__:null,"left":21,"right":2147483628},"right":2147483619}
// • 423794071
// • 27
// • …

----------------------------------------

TITLE: Generating Tuples with Fast-Check
DESCRIPTION: Demonstrates how to create tuples (fixed-length arrays) by aggregating values from multiple arbitrary generators. Shows examples with single and multiple value generators.

LANGUAGE: javascript
CODE:
fc.tuple(fc.nat());
// Examples of generated values: [15], [1564085383], [2147483642], [1564562962], [891386821]…

fc.tuple(fc.nat(), fc.string());
// Examples of generated values: [17,"n"], [1187149108,"{}"], [302474255,"!!]"], [2147483618,"$#"], [21,"lv V!\""]…

----------------------------------------

TITLE: Using assert Runner in TypeScript
DESCRIPTION: The assert runner executes a property and throws an error in case of failure. It has overloaded signatures to support both synchronous and asynchronous properties.

LANGUAGE: typescript
CODE:
function assert<Ts>(property: IProperty<Ts>, params?: Parameters<Ts>): void;
function assert<Ts>(property: IAsyncProperty<Ts>, params?: Parameters<Ts>): Promise<void>;

----------------------------------------

TITLE: Configuring Object Generation with Medium Depth in JavaScript
DESCRIPTION: This snippet demonstrates how to use fc.object() to generate complex objects with medium depth. It sets maxDepth to 1000 to override the default value. The generated objects contain nested structures with arrays, objects, and various primitive values.

LANGUAGE: javascript
CODE:
fc.object({
  depthSize: 'medium',
  maxDepth: 1000,
});
// Note: For the moment, we have to specify maxDepth to avoid falling back onto its default value

----------------------------------------

TITLE: Manual Property Test Implementation with Jest
DESCRIPTION: A property-based test using manual integration between fast-check and Jest. This shows how to use fc.assert and fc.property directly within a standard Jest test without using the connector library.

LANGUAGE: javascript
CODE:
const { test } = require('@jest/globals');
const fc = require('fast-check');

test('should detect the substring', () => {
  fc.assert(
    fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {
      const text = a + b + c;
      expect(isSubtring(text, b)).toBe(true);
    }),
  );
});

// Code under test: should rather be imported from another file
function isSubtring(text, pattern) {
  return text.includes(pattern);
}

----------------------------------------

TITLE: Alternative Implementation of Scheduled Mocked Server Functions
DESCRIPTION: An alternative approach to scheduling mocked server calls that combines both scheduling the server receipt and the function execution. This implementation uses the scheduler's scheduleFunction for the actual API call after scheduling when the server receives the call.

LANGUAGE: typescript
CODE:
const scheduleMockedServerFunction = <TArgs extends unknown[], TOut>(
  s: Scheduler,
  f: (...args: TArgs) => Promise<TOut>,
) => {
  const scheduledF = s.scheduleFunction(f);
  return (...args: TArgs) => {
    return s.schedule(Promise.resolve('Server received the call')).then(() => scheduledF(...args));
  };
};

----------------------------------------

TITLE: Using Scheduler with Built-in act Integration
DESCRIPTION: Shows how to configure the scheduler with a global act function that automatically wraps all scheduled tasks. This simplified approach achieves the same result as manually wrapping each task but requires less boilerplate code.

LANGUAGE: javascript
CODE:
fc.assert(
  fc.asyncProperty(fc.scheduler({ act }), async s => () {
    // Pushing tasks into the scheduler ...
    // ....................................
    await s.waitAll();
  }))

----------------------------------------

TITLE: Basic Synchronous Property Test with Jest Connector
DESCRIPTION: A simple property-based test using the @fast-check/jest connector to verify that a substring is properly detected within a text. This demonstrates the basic structure of a property test using the connector's simplified API.

LANGUAGE: javascript
CODE:
const { test, fc } = require('@fast-check/jest');

test.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {
  const text = a + b + c;
  expect(isSubtring(text, b)).toBe(true);
});

// Code under test: should rather be imported from another file
function isSubtring(text, pattern) {
  return text.includes(pattern);
}

----------------------------------------

TITLE: Generating Boolean Values with FastCheck
DESCRIPTION: Shows how to use the fc.boolean() function to generate random boolean values (true or false) for property-based testing. This is a core primitive arbitrary in FastCheck available since version 0.0.6.

LANGUAGE: javascript
CODE:
fc.boolean();
// Examples of generated values: true, false…

----------------------------------------

TITLE: Implementing Scheduled Mocked Server Functions in TypeScript
DESCRIPTION: Creates a wrapper function that simulates delayed server responses by scheduling when a mocked server receives calls. This allows testing race conditions in API calls by controlling when requests are processed, rather than processing them in the order they were made.

LANGUAGE: typescript
CODE:
const scheduleMockedServerFunction = <TArgs extends unknown[], TOut>(
  s: Scheduler,
  f: (...args: TArgs) => Promise<TOut>,
) => {
  return (...args: TArgs) => {
    return s.schedule(Promise.resolve('Server received the call')).then(() => f(...args));
  };
};

const newAddTodo = scheduleMockedServerFunction(s, (label) => mockedApi.addTodo(label));
// With newAddTodo = s.scheduleFunction((label) => mockedApi.addTodo(label))
// The mockedApi would have received todo-1 first, followed by todo-2
// When each of those calls resolve would have been the responsibility of s
// In the contrary, with scheduleMockedServerFunction, the mockedApi might receive todo-2 first.
newAddTodo('todo-1'); // .then
newAddTodo('todo-2'); // .then

----------------------------------------

TITLE: Using scheduleSequence Helper in fastcheck for Ordered Execution
DESCRIPTION: Example demonstrating how to use the scheduleSequence helper to run tasks in order. This ensures that items in a sequence are executed sequentially while allowing interleaving between sequences.

LANGUAGE: js
CODE:
const { task } = s.scheduleSequence([
  async () => {
    // 1st item:
    // Runnning something for the 1st item.
  },
  async () => {
    // 2nd item:
    // Runnning something for the 2nd item.
    // Will never start before the end of `await firstItem()`.
    // Will have to be scheduled by the runner to run, in other words, it may start
    // very long after the 1st item.
  },
]);

// The sequence also provides a `task` that can be awaited in order to know when all items
// of the sequence have been fully executed. It also provides other values such as done or
// faulty if you want to know bugs that may have occurred during the sechduling of it.

----------------------------------------

TITLE: Fibonacci Property-Based Test with Node.js Test Runner
DESCRIPTION: A complete example showing how to create a property-based test for a Fibonacci implementation using fast-check with the Node.js test runner. The test verifies that the implementation follows the rule fibo(n) = fibo(n-1) + fibo(n-2).

LANGUAGE: js
CODE:
const assert = require('node:assert');
const { test } = require('node:test');
const fc = require('fast-check');

test('should follow the rule: fibo(n) = fibo(n-1) + fibo(n-2)', () => {
  fc.assert(
    fc.property(fc.integer({ min: 2, max: 78 }), (n) => {
      assert.equal(fibo(n), fibo(n - 1) + fibo(n - 2));
    }),
  );
});

// Code under test: should rather be imported from another file
function fibo(n) {
  // Note: n must be in the range 0 (included) to 78 (included)
  let a = 0;
  if (n === 0) {
    return a;
  }
  let b = 1;
  for (let i = 1; i !== n; ++i) {
    const c = a + b;
    a = b;
    b = c;
  }
  return b;
}

----------------------------------------

TITLE: Creating a Custom Reporter in FastCheck (JavaScript)
DESCRIPTION: Demonstrates how to implement a custom reporter for fc.assert that recreates the default reporter behavior. The reporter function receives the test results and throws an error with the formatted message when tests fail.

LANGUAGE: javascript
CODE:
fc.assert(
  // You can either use it with `fc.property`
  // or `fc.asyncProperty`
  fc.property(...),
  {
    reporter(out) {
      // Let's say we want to re-create the default reporter of `assert`
      if (out.failed) {
        // `defaultReportMessage` is an utility that make you able to have the exact
        // same report as the one that would have been generated by `assert`
        throw new Error(fc.defaultReportMessage(out));
      }
    }
  }
)

----------------------------------------

TITLE: Generating Record Objects with FastCheck
DESCRIPTION: The record arbitrary creates structured objects based on a model that defines the arbitrary for each property. It allows specifying required keys and controlling the object prototype.

LANGUAGE: javascript
CODE:
fc.record({
  id: fc.uuid({ version: 4 }),
  age: fc.nat(99),
});

LANGUAGE: javascript
CODE:
fc.record(
  {
    id: fc.uuid({ version: 4 }),
    age: fc.nat(99),
  },
  { requiredKeys: [] },
);

LANGUAGE: javascript
CODE:
fc.record(
  {
    id: fc.uuid({ version: 4 }),
    name: fc.constantFrom('Paul', 'Luis', 'Jane', 'Karen'),
    age: fc.nat(99),
    birthday: fc.date({ min: new Date('1970-01-01T00:00:00.000Z'), max: new Date('2100-12-31T23:59:59.999Z') }),
  },
  { requiredKeys: ['id'] },
);

LANGUAGE: javascript
CODE:
fc.record(
  {
    id: fc.uuid({ version: 4 }),
    age: fc.nat(99),
  },
  { requiredKeys: [] },
);

LANGUAGE: javascript
CODE:
fc.record(
  {
    id: fc.uuid({ version: 4 }),
    age: fc.nat(99),
  },
  { noNullPrototype: true },
);

----------------------------------------

TITLE: Generating Trees with Unintended Deep Structures in JavaScript using fc.letrec
DESCRIPTION: Shows how omitting shared depth identifiers can lead to unexpectedly deep structures even with maxDepth constraints. When depth identifiers aren't shared, each branch's depth is controlled independently, potentially creating deeper overall structures.

LANGUAGE: javascript
CODE:
fc.letrec((tie) => ({
  node: fc.record({
    value: fc.nat(),
    left: fc.option(tie('node'), { maxDepth: 1 }),
    right: fc.option(tie('node'), { maxDepth: 1 }),
  }),
})).node;
// ...If we don't specify it, the maximal number of right in a given path will be limited to 1, but may include intermediate left.
//    Thus the resulting trees might be deeper than 1.
// Examples of generated values:
// • {__proto__:null,"value":14,"left":{__proto__:null,"value":1703987241,"left":null,"right":{"value":643118365,"left":null,"right":null}},"right":{__proto__:null,"value":1029204262,"left":{__proto__:null,"value":1968117159,"left":null,"right":null},"right":null}}
// • {__proto__:null,"value":26,"left":{__proto__:null,"value":1662273887,"left":null,"right":{__proto__:null,"value":525337883,"left":null,"right":null}},"right":{__proto__:null,"value":797448699,"left":{"value":657617990,"left":null,"right":null},"right":null}}
// • {__proto__:null,"value":2121842454,"left":null,"right":{"value":1835255719,"left":{__proto__:null,"value":1989636808,"left":null,"right":null},"right":null}}
// • {"value":1438784023,"left":{__proto__:null,"value":24,"left":null,"right":{__proto__:null,"value":420442369,"left":null,"right":null}},"right":{"value":9,"left":{__proto__:null,"value":1424795296,"left":null,"right":null},"right":null}}
// • {__proto__:null,"value":1331332801,"left":null,"right":{__proto__:null,"value":1001840875,"left":{__proto__:null,"value":1327656949,"left":null,"right":null},"right":null}}
// • …

----------------------------------------

TITLE: Generating Uint8Array Values with fast-check
DESCRIPTION: Creates arbitrary Uint8Array instances with configurable value ranges and length. Supports options for min/max values (default range 0-255), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.uint8Array();
// Examples of generated values:
// • Uint8Array.from([146,85,17,121,55,177])
// • Uint8Array.from([])
// • Uint8Array.from([10,89])
// • Uint8Array.from([103,180,114,14,118,92,72,6,30])
// • Uint8Array.from([83,73,147,245,64,203,161,246,99])
// • …

fc.uint8Array({ max: 42, minLength: 1 });
// Examples of generated values:
// • Uint8Array.from([16])
// • Uint8Array.from([13,11,41,33,31,7,28,4,17,38,19])
// • Uint8Array.from([15,11,30,9,12])
// • Uint8Array.from([5,14,37])
// • Uint8Array.from([28,3,6,15,0,4,6,17,38,1,40])
// • …

----------------------------------------

TITLE: Model-Based Testing with Commands in Fast-Check
DESCRIPTION: Demonstrates how to implement model-based testing using fc.commands() to test state machines. This approach uses command classes that define pre-conditions and execution logic to check a system against a model.

LANGUAGE: javascript
CODE:
type Model = { /* stuff */ };
type Real  = { /* stuff */ };

class CommandA extends Command { /* stuff */ };
class CommandB extends Command { /* stuff */ };
// other commands

const CommandsArbitrary = fc.commands([
  fc.constant(new CommandA()),        // no custom parameters
  fc.nat().map(s => new CommandB(s)), // with custom parameter
  // other commands
]);

fc.assert(
  fc.property(
    CommandsArbitrary,
    cmds => {
      const s = () => ({ // initial state builder
          model: /* new model */,
          real:  /* new system instance */
      });
      fc.modelRun(s, cmds);
    }
  )
);

----------------------------------------

TITLE: Running fast-check in Fuzzing Mode
DESCRIPTION: Demonstrates how to use the neverFailingPredicate wrapper with fast-check to perform fuzzing. Sets a large number of test runs and ensures the test won't stop even when failures are detected.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';

fc.configureGlobal({ numRuns: 1_000_000 });

test('fuzz predicate against arbitraries', () => {
  fc.assert(fc.property(...arbitraries, neverFailingPredicate(predicate)));
});

----------------------------------------

TITLE: Basic String Generation in JavaScript with fastcheck
DESCRIPTION: Examples of generating strings with different configurations using fastcheck. Shows basic usage, length constraints, and various character unit types.

LANGUAGE: javascript
CODE:
fc.string();
// Examples of generated values: "JT>\"C9k", "h]iD\"27;", "S", "n\\Ye", ""…

fc.string({ maxLength: 3 });
// Note: Any string containing up to 3 (included) characters
// Examples of generated values: "", "ref", "?D", "key", "}"…

fc.string({ minLength: 3 });
// Note: Any string containing at least 3 (included) characters
// Examples of generated values: "Pv-^X_t", "bind", "?DM", "iEjK.b?^O", "}~}S"…

fc.string({ minLength: 4, maxLength: 6 });
// Note: Any string containing between 4 (included) and 6 (included) characters
// Examples of generated values: "Trxlyb", "&&@%4", "s@IO", "0\"zM", "}#\"$"…

fc.string({ unit: 'grapheme' });
// Note: Any string made only of printable graphemes possibly made of multiple code points.
// With 'grapheme', minLength (resp. maxLength) refers to length in terms of graphemes (visual entities).
// As an example, "\u{0061}\u{0300}" has a length of 1 in this context, as it corresponds to the visual entity: "à".
// Examples of generated values: "length", "🡓𑨭", "🚌ﾱॶ🥄ၜ㏹", "key", "callஈcall"…

fc.string({ unit: 'grapheme-composite' });
// Note: Any string made only of printable graphemes.
// With 'grapheme-composite', minLength (resp. maxLength) refers to length in terms of code points (equivalent to visual entities for this type).
// Examples of generated values: "🭃𖼰𱍊alleef", "#", "𝕃ᖺꏪ🪓ሪ㋯𑼓𘠴𑑖", "", "\"isP"…

fc.string({ unit: 'grapheme-ascii' });
// Note: Any string made only of printable ascii characters.
// With 'grapheme-composite', minLength (resp. maxLength) refers to length in terms of code units aka chars (equivalent to code points and visual entities for this type).
// Examples of generated values: "+", "y\\m4", ")H", "}q% b'", "ZvT`W"…

fc.string({ unit: 'binary' });
// Note: Results in strings made of any possible combinations of code points no matter how they join between each others (except half surrogate pairs).
// With 'binary', minLength (resp. maxLength) refers to length in terms of code points (not in terms of visual entities).
// As an example, "\u{0061}\u{0300}" has a length of 2 in this context, even if it corresponds to a single visual entity: "à".
// Examples of generated values: "length", "𒇖ᴣ󠓋򹕎󥰆󕃝󗅛񞙢򂓥񋂐", "", "󹶇񺓯𢊊񦺖", "key"…

fc.string({ unit: 'binary-ascii' });
// Note: Results in strings made of any possible combinations of ascii characters (in 0000-007F range).
// With 'binary-ascii', minLength (resp. maxLength) refers to length in terms of code units aka chars (equivalent to code points for this type).
// Examples of generated values: "c\\3\f\u0000\u001f\u00047", "M\u0006\fD!U\u000fXss", "", "s\u0000", "\n\u0006tkK"…

fc.string({ unit: fc.constantFrom('Hello', 'World') });
// Note: With a custom arbitrary passed as unit, minLength (resp. maxLength) refers to length in terms of unit values.
// As an example, "HelloWorldHello" has a length of 3 in this context.
// Examples of generated values: "", "Hello", "HelloWorld", "HelloWorldHello", "WorldWorldHelloWorldHelloWorld"…

----------------------------------------

TITLE: Basic Usage of uniqueArray with Natural Numbers
DESCRIPTION: Generates an array of unique natural numbers between 0 and 99. The resulting array will have random length and contain only unique values.

LANGUAGE: javascript
CODE:
fc.uniqueArray(fc.nat(99));

----------------------------------------

TITLE: Using the Improved Faker Integration in Tests
DESCRIPTION: Example of how to use the improved Faker integration in tests. Each generator function now receives a scoped Faker instance, eliminating side effects and improving test reliability.

LANGUAGE: typescript
CODE:
test('produce a string containing the first and the last name', () => {
  fc.assert(
    fc.property(
      fakerToArb((faker) => faker.person.firstName),
      fakerToArb((faker) => faker.person.lastName),
      (firstName, lastName) => {
        const formatted = format(firstName, lastName);
        expect(formatted).toContain(firstName);
        expect(formatted).toContain(lastName);
      },
    ),
  );
});

----------------------------------------

TITLE: Generating Date Values with fc.date() in JavaScript
DESCRIPTION: Demonstrates various ways to generate random date values using fastcheck's date arbitrary. The examples show basic usage, setting minimum/maximum date ranges, and excluding invalid dates.

LANGUAGE: javascript
CODE:
fc.date();
// Examples of generated values:
// • new Date("-102261-04-16T03:19:33.548Z")
// • new Date("1970-01-01T00:00:00.004Z")
// • new Date("+111995-07-24T19:09:16.732Z")
// • new Date("-058362-10-19T15:40:37.384Z")
// • new Date("+208885-10-19T22:12:53.768Z")
// • …

fc.date({ min: new Date('2000-01-01T00:00:00.000Z') });
// Examples of generated values:
// • new Date("+199816-07-04T12:57:41.796Z")
// • new Date("2000-01-01T00:00:00.039Z")
// • new Date("2000-01-01T00:00:00.047Z")
// • new Date("2000-01-01T00:00:00.003Z")
// • new Date("+275760-09-12T23:59:59.982Z")
// • …

fc.date({ max: new Date('2000-01-01T00:00:00.000Z') });
// Examples of generated values:
// • new Date("-201489-02-25T08:12:55.332Z")
// • new Date("1969-12-31T23:59:59.994Z")
// • new Date("1970-01-01T00:00:00.006Z")
// • new Date("1970-01-01T00:00:00.019Z")
// • new Date("-271821-04-20T00:00:00.033Z")
// • …

fc.date({ min: new Date('2000-01-01T00:00:00.000Z'), max: new Date('2000-12-31T23:59:59.999Z') });
// Examples of generated values:
// • new Date("2000-05-15T03:02:40.263Z")
// • new Date("2000-10-22T03:00:45.936Z")
// • new Date("2000-02-25T19:00:10.679Z")
// • new Date("2000-12-31T23:59:59.997Z")
// • new Date("2000-01-04T14:12:03.484Z")
// • …

fc.date({ noInvalidDate: true });
// Examples of generated values:
// • new Date("-043663-07-08T11:17:34.486Z")
// • new Date("-169183-12-11T00:28:46.358Z")
// • new Date("1969-12-31T23:59:59.988Z")
// • new Date("1969-12-31T23:59:59.984Z")
// • new Date("-271821-04-20T00:00:00.033Z")
// • …

----------------------------------------

TITLE: Testing User Sorting with Random Data in JavaScript
DESCRIPTION: A simple test that generates random user data to verify that users are correctly sorted by age. This approach uses random generation but lacks reproducibility and shrinking capabilities.

LANGUAGE: javascript
CODE:
test('sort users by ascending age', () => {
  const userA = {
    firstName: firstName(),
    lastName: lastName(),
    birthDate: birthDate(),
  };
  const userB = {
    firstName: firstName(),
    lastName: lastName(),
    birthDate: birthDate({ strictlyOlderThan: userA.birthDate }),
  };
  expect(sortByAge([userA, userB])).toEqual([userA, userB]);
  expect(sortByAge([userB, userA])).toEqual([userA, userB]);
});

----------------------------------------

TITLE: Generating 32-bit Floating Point Values with FastCheck
DESCRIPTION: Generate 32-bit floating point values using fc.float(). Supports configurable ranges, exclusion of bounds, and options to exclude NaN, infinity values, or integers. Always produces valid 32-bit floating point values.

LANGUAGE: javascript
CODE:
fc.float();
// Note: All possible 32-bit floating point values (including -∞, +∞ and NaN but also -0)
// Examples of generated values: -1.1428610944376996e+35, -4.923316419364955e-39, 7.923675937604457e-9, 1.0574891476389556e+24, -0.012089259922504425…

fc.float({ min: 0 });
// Note: All possible positive 32-bit floating point values (including +∞ and NaN)
// Examples of generated values: 722749030400, 9.80908925027372e-45, 4.549913925362434e+24, 4.32932694138799e-7, 3.4028224522648084e+38…

fc.float({ noDefaultInfinity: true, noNaN: true });
// Note: All possible finite 32-bit floating point values
// Examples of generated values: 0.0030062051955610514, 5.605193857299268e-45, 3.4028212353202322e+38, -2.802596928649634e-45, -160112.453125…

fc.float({ noDefaultInfinity: true, min: Number.NEGATIVE_INTEGER, max: Number.POSITIVE_INTEGER });
// Note: Same as fc.float(), noDefaultInfinity just tells that defaults for min and max
// should not be set to -∞ and +∞. It does not forbid the user to explicitely set them to -∞ and +∞.
// Examples of generated values: -5.435122013092041, 1981086548623360, -2.2481372319305137e-9, -2.5223372357846707e-44, 5.606418179297701e-30…

fc.float({ min: 0, max: 1, maxExcluded: true });
// Note: All possible 32-bit floating point values between 0 (included) and 1 (excluded)
// Examples of generated values: 3.2229864679470793e-44, 2.4012229232976108e-20, 1.1826533935374394e-27, 0.9999997615814209, 3.783505853677006e-44…

fc.float({ noInteger: true });
// Note: All possible 32-bit floating point values but no integer
// Examples of generated values: -7.006492321624085e-45, 1.4734616113175924e-21, 8.407790785948902e-45, 1.5815058151957828e-9, Number.POSITIVE_INFINITY…

fc.noBias(fc.integer({ min: 0, max: (1 << 24) - 1 }).map((v) => v / (1 << 24)));
// Note: `fc.float` does not uniformly distribute the generated values in the requested range.
// If you really want a uniform distribution of 32-bit floating point numbers in range 0 (included)
// and 1 (excluded), you may want to use the arbitrary defined right above.
// Examples of generated values: 0.06896239519119263, 0.5898661017417908, 0.7715556621551514, 0.4010099768638611, 0.8638045787811279…

----------------------------------------

TITLE: Generating BigInt Values with fastcheck in JavaScript
DESCRIPTION: Examples of using fc.bigInt() to generate arbitrary bigint values. The function supports multiple signatures and can generate values within specified ranges. All examples show both the function call and sample generated values.

LANGUAGE: javascript
CODE:
fc.bigInt();
// Examples of generated values:
// • 40519302182168582469083131396737815984915854610111397506754347703341259198524n
// • 23951610212595764539175455250207245555782767082407094676187361741043426472154n
// • 30295980883260580261886608760731577493472838495202972700546280276253358609031n
// • -11868238563800054718695098172873792117821728883208728506070757173361404354997n
// • 35n
// • …

fc.bigInt({ min: 0n, max: 12345678901234567890n });
// Note: All possible bigint values between `0n` (included) and `12345678901234567890n` (included)
// Examples of generated values: 10743587536809719502n, 12345678901234567887n, 1n, 18n, 3991213889543870829n…

fc.bigInt({ min: -3000n, max: 100n });
// Note: All possible bigint values between `-3000n` (included) and `100n` (included)
// Examples of generated values: 1n, -2n, -1064n, 0n, -147n…

fc.bigInt({ min: 1n << 64n });
// Note: Any possible bigint value greater or equal to `1n << 64n`
// Examples of generated values:
// • 18446744073709551637n
// • 46981635298839638819090544091451527470150794541406966757340574520618867005787n
// • 18446744073709551630n
// • 56018523185942628466562775307785743268387645013311767424219309719910490250614n
// • 18446744073709551631n
// • …

----------------------------------------

TITLE: Implementing a Command with Custom toString for Better Error Reporting in Fast-Check
DESCRIPTION: This code demonstrates how to implement a command for model-based testing that captures context during execution for better error reporting. The GoToTrackCommand shows how to store track name information when the command runs to produce more readable output.

LANGUAGE: javascript
CODE:
class GoToTrackCommand {
  constructor(trackPosition) {
    this.trackPosition = trackPosition;
  }
  check(m) {
    return m.allTracks.length !== 0;
  }
  run(m, r) {
    this.trackName = m.allTracks[this.trackPosition % m.allTracks.length];
    // execute 'go to track' on the system (r) and impact the model (m) if needed
  }
  toString() {
    return `go to track '${this.trackName}'`;
  }
}

----------------------------------------

TITLE: Generating Dictionary Objects with FastCheck
DESCRIPTION: The dictionary arbitrary creates objects with keys and values generated by specified arbitraries. It supports configurations for minimum/maximum keys, size constraints, and prototype options.

LANGUAGE: javascript
CODE:
fc.dictionary(fc.string(), fc.string());

LANGUAGE: javascript
CODE:
fc.dictionary(fc.string(), fc.nat());

LANGUAGE: javascript
CODE:
fc.dictionary(fc.string(), fc.nat(), { minKeys: 2 });

LANGUAGE: javascript
CODE:
fc.dictionary(fc.string(), fc.string(), { noNullPrototype: true });

----------------------------------------

TITLE: Using createDepthIdentifier for Shared Depth Control in JavaScript with fc.letrec
DESCRIPTION: Demonstrates using fc.createDepthIdentifier() to create a depth identifier that's shared across all nodes. This approach avoids potential collisions with manually specified identifiers and ensures consistent depth limits throughout the structure.

LANGUAGE: javascript
CODE:
// Setup the depth identifier shared across all nodes:
const depthIdentifier = fc.createDepthIdentifier();
// Use the arbitrary:
fc.letrec((tie) => ({
  node: fc.record({
    value: fc.nat(),
    left: fc.option(tie('node'), { maxDepth: 1, depthIdentifier }),
    right: fc.option(tie('node'), { maxDepth: 1, depthIdentifier }),
  }),
})).node;
// Note: Calling `createDepthIdentifier` is another way to pass a value for `depthIdentifier`. Compared to the string-based
// version, demo-ed in the snippet above, it has the benefit to never collide with other identifiers manually specified.
// Examples of generated values:
// • {__proto__:null,"value":2147483645,"left":{"value":9,"left":null,"right":null},"right":null}
// • {__proto__:null,"value":7,"left":null,"right":{__proto__:null,"value":96999551,"left":null,"right":null}}
// • {"value":3,"left":{__proto__:null,"value":1312350013,"left":null,"right":null},"right":null}
// • {"value":2051975271,"left":{"value":2147483645,"left":null,"right":null},"right":{"value":1305755095,"left":null,"right":null}}
// • {"value":2,"left":{"value":1530374940,"left":null,"right":null},"right":null}
// • …

----------------------------------------

TITLE: Basic Object Generation in JavaScript using fastcheck
DESCRIPTION: Demonstrates using fc.object() without parameters to generate random JavaScript objects with default settings. The generated objects contain various nested structures with primitive values.

LANGUAGE: javascript
CODE:
fc.object();

----------------------------------------

TITLE: Generating Strings Matching Regular Expressions with stringMatching in Fast-Check
DESCRIPTION: The stringMatching function generates random strings that match a given regular expression pattern. It accepts a regex parameter and an optional size configuration for controlling the length of generated values.

LANGUAGE: javascript
CODE:
fc.stringMatching(/\s(html|php|css|java(script)?)\s/);
// Note: The regex does not contain ^ or $ assertions, so extra text could be added before and after the match
// Examples of generated values: "ca\rjava 4&", "K7c<:(\"T\"a\njavascript &IsEnetter", "NXlk\tjava\fto", "e\u000bjavascript\fname", "> java\t2zy:}g"…

LANGUAGE: javascript
CODE:
fc.stringMatching(/^rgb\((?:\d|[1-9]\d|1\d\d|2[0-5]\d),(?:\d|[1-9]\d|1\d\d|2[0-5]\d),(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\)$/);
// Note: Regex matching RGB colors
// Examples of generated values: "rgb(237,6,11)", "rgb(143,160,247)", "rgb(257,213,251)", "rgb(4,185,33)", "rgb(253,230,211)"…

LANGUAGE: javascript
CODE:
fc.stringMatching(/^[0-9a-f]{8}-[0-9a-f]{4}-[12345][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/);
// Note: Regex matching UUID
// Examples of generated values:
// • "fd606aa1-b53b-1c7b-9e2f-1e2c1ff1b8e9"
// • "e74cec0b-bd5a-4dba-96a9-edbfa9c1a198"
// • "fcccdcf3-908e-5179-adce-7ebae72c12dc"
// • "0eab1fab-5bc2-336c-9ccb-a3fecbe72ee2"
// • "bb3073ee-2283-2538-ba0c-1b976ebb9610"
// • …

LANGUAGE: javascript
CODE:
fc.stringMatching(
  /^(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)$/,
);
// Note: Regex matching IP v4, we rather recommend you to rely on `fc.ipV4()`
// Examples of generated values: "226.4.220.240", "206.2.148.227", "247.32.128.41", "165.252.212.135", "18.225.51.96"…

----------------------------------------

TITLE: Generating Natural Numbers with FastCheck
DESCRIPTION: Generate positive integer values (including zero) using fc.nat(). Both zero and the specified upper bound are included in the set of possible values. Default upper bound is 2147483647.

LANGUAGE: javascript
CODE:
fc.nat();
// Note: All possible integers between `0` (included) and `2147483647` (included)
// Examples of generated values: 2, 5, 2147483618, 225111650, 1108701149…

fc.nat(1000);
// Note: All possible integers between `0` (included) and `1000` (included)
// Examples of generated values: 2, 8, 4, 270, 0…

fc.nat({ max: 1000 });
// Note: All possible integers between `0` (included) and `1000` (included)
// Examples of generated values: 917, 60, 599, 696, 7…

----------------------------------------

TITLE: Using mapToConstant() in Fast-Check for Non-Contiguous Value Ranges in JavaScript
DESCRIPTION: The mapToConstant() function generates non-contiguous ranges of values by mapping integer values to constants. It takes multiple mapping configurations, each specifying a number of integer values to cover and a build function that creates values from those integers.

LANGUAGE: javascript
CODE:
fc.mapToConstant(
  { num: 26, build: (v) => String.fromCharCode(v + 0x61) },
  { num: 10, build: (v) => String.fromCharCode(v + 0x30) },
);
// Examples of generated values: "6", "8", "d", "9", "r"…

----------------------------------------

TITLE: Loading Dependencies with CommonJS in Node
DESCRIPTION: Example of CommonJS (CJS) syntax used in Node.js for importing dependencies using the require function.

LANGUAGE: javascript
CODE:
const dep1 = require('dep1');
const dep2 = require('dep2');

----------------------------------------

TITLE: Using constant() in Fast-Check for Fixed Value Generation in JavaScript
DESCRIPTION: The constant() function creates an arbitrary that always produces the same value. It takes a single parameter which is the value to be produced, and can handle any JavaScript data type.

LANGUAGE: javascript
CODE:
fc.constant(1);
// Examples of generated values: 1…

fc.constant({});
// Examples of generated values: {}…

----------------------------------------

TITLE: Using constantFrom() in Fast-Check for Random Selection in JavaScript
DESCRIPTION: The constantFrom() function creates an arbitrary that randomly selects from a list of provided values. It considers the first value as the default value for shrinking purposes and requires at least one value to be provided.

LANGUAGE: javascript
CODE:
fc.constantFrom(1, 2, 3);
// Examples of generated values: 1, 3, 2…

fc.constantFrom(1, 'string', {});
// Examples of generated values: 1, "string", {}…

----------------------------------------

TITLE: Generating ULID Values with fc.ulid()
DESCRIPTION: Generates Universally Unique Lexicographically Sortable Identifier (ULID) values. This function requires no parameters and returns ULID strings that are time-sorted, case-insensitive, URL-safe, and have no ambiguous characters.

LANGUAGE: javascript
CODE:
fc.ulid();
// Examples of generated values:
// • "7AVDFZJAXCM0F25E3SZZZZZZYZ"
// • "7ZZZZZZZYP5XN60H51ZZZZZZZP"
// • "2VXXEMQ2HWRSNWMP9PZZZZZZZA"
// • "15RQ23H1M8YB80EVPD2EG8W7K1"
// • "6QV4RKC7C8ZZZZZZZFSF7PWQF5"
// • …

----------------------------------------

TITLE: Generating Web URL Path Segments with fastcheck
DESCRIPTION: Generate individual segments of web URL paths with the fc.webSegment() arbitrary. These can be combined to form complete paths and support size parameter for complexity control.

LANGUAGE: javascript
CODE:
fc.webSegment();
// Examples of generated values: "*lej@(", "", "+Y", "1FBtTF1GX", "V:%F2%96%A2%A1$PV4Yq"…

----------------------------------------

TITLE: Using statistics Runner in TypeScript
DESCRIPTION: The statistics runner helps analyze the distribution of generated values, which is valuable for evaluating the coverage of custom arbitraries.

LANGUAGE: typescript
CODE:
function statistics<Ts>(
  generator: IRawProperty<Ts, boolean> | Arbitrary<Ts>,
  classify: (v: Ts) => string | string[],
  params?: number | Parameters<Ts>,
): void;

----------------------------------------

TITLE: Testing Zod Email Validator Performance with Fast-Check
DESCRIPTION: This code demonstrates how to test for performance issues in Zod's email validator using fast-check. It measures execution time for validating email addresses and fails if the time exceeds a specified threshold, helping to identify potential ReDOS vulnerabilities.

LANGUAGE: javascript
CODE:
import { z } from 'zod'; // eg.: 3.22.2 is vulnerable
import fc from 'fast-check';
import { isMainThread } from 'node:worker_threads';
import { assert, propertyFor } from '@fast-check/worker';
const property = propertyFor(new URL(import.meta.url));

const timeLimitMs = 1_000;
const validator = z.string().email();
await assert(
  property(fc.emailAddress(), (...inputs) => {
    const startTime = performance.now();
    try {
      algorithm(...inputs);
    } catch (err) {}
    const endTime = performance.now();
    const delayMs = endTime - startTime;
    if (delayMs > timeLimitMs) {
      throw new Error(`The computation of algorithm(...inputs) took ${delayMs}ms`);
    }
  }),
  {
    // we want to stop immediately on failure to report issues asap, drop it to have shrinking
    endOnFailure: true,
    // we want to kill the predicate if it takes more than {interruptAfterTimeLimit}ms
    interruptAfterTimeLimit: 60_000,
    // and mark the run as failed
    markInterruptAsFailure: true,
    // fuzzing implies possibly running for longer than usual tests (when we want to look for the issues, not in CI)
    numRuns: 1_000_000,
  },
);

----------------------------------------

TITLE: Configuring Proper Recursive Structure with letrec and oneof in TypeScript
DESCRIPTION: Example showing the correct way to define recursive structures using letrec, ensuring that the first arbitrary in oneof is a leaf node to prevent infinite recursion. This pattern is important for proper depth management in FastCheck.

LANGUAGE: typescript
CODE:
const { tree } = fc.letrec((tie) => ({
  tree: fc.oneof(tie('leaf'), tie('node')), // Good!!!
  node: fc.record({ left: tie('tree'), right: tie('tree') }),
  leaf: fc.nat(),
}));

// And not:
// const { tree } = fc.letrec((tie) => ({
//   tree: fc.oneof(tie('node'), tie('leaf')), // BAD!!!
//   node: fc.record({ left: tie('tree'), right: tie('tree') }),
//   leaf: fc.nat(),
// }));

----------------------------------------

TITLE: Replaying Failed Model-Based Tests in Fast-Check
DESCRIPTION: This code example shows how to replay a failed model-based test by using the replayPath parameter with fc.commands and the seed/path parameters with fc.assert. It compares the original test code with the modified replay version.

LANGUAGE: typescript
CODE:
// Original code
fc.assert(
  fc.property(
    fc.commands(/* array of commands */),
    checkEverythingIsOk
  )
);

// Replay code: straight to the minimal counterexample.
// It only replays the minimal counterexample.
fc.assert(
  fc.property(
    fc.commands(
      /* array of commands */,
      { replayPath: 'AAAAABAAE:VF' }
    ),
    checkEverythingIsOk
  ),
  { seed: 670108017, path: '96:5', endOnFailure: true }
);

----------------------------------------

TITLE: Generating Float32Array with Fast-Check
DESCRIPTION: The float32Array generator creates Float32Array instances with configurable length and value constraints. It supports options for minimum/maximum values, handling of infinity and NaN values, and controlling array size.

LANGUAGE: javascript
CODE:
fc.float32Array();
// Examples of generated values:
// • Float32Array.from([])
// • Float32Array.from([-12.122719764709473,-8057332.5,-8.5333065779299e-31,4.203895392974451e-45,-1.401298464324817e-45,2.5223372357846707e-44,-0.15196290612220764,-3.4028190042551758e+38,3.741597751304629e-28,1.401298464324817e-44])
// • Float32Array.from([-3.24799757855888e-21])
// • Float32Array.from([-13627700375715840,-2.4350556445205305e+37,-1.392195136951102e-9,-2374.965087890625,4.244262896690998e-8,-5.161676815695077e-19,-0.20675736665725708])
// • Float32Array.from([1.7366975231216193e-20,-2977645988174364700,2.589363879539297e+31,1.8031471498217155e-12,4.5007039497195254e+25])
// • …

fc.float32Array({ minLength: 1 });
// Examples of generated values:
// • Float32Array.from([2.0374531922717765e-11])
// • Float32Array.from([30.016468048095703,2.1674793240938824e+30])
// • Float32Array.from([-2.6624670822171524e-44,-8.629187158980245e+32,-3.4028226550889045e+38,-3.0828566215145976e-44,-170087472,90606641152,2.449428132964808e-27,6.091665951650796e-23])
// • Float32Array.from([3.4028190042551758e+38])
// • Float32Array.from([-3.4028190042551758e+38])
// • …

----------------------------------------

TITLE: Detecting Prototype Poisoning with @fast-check/poisoning
DESCRIPTION: Integration of @fast-check/poisoning with fast-check to detect and prevent prototype poisoning vulnerabilities during property testing, with safety configuration.

LANGUAGE: js
CODE:
import fc from 'fast-check';
import { assertNoPoisoning, restoreGlobals } from '@fast-check/poisoning';

const ignoredRootRegex = /^(__coverage__|console)$/;
function poisoningAfterEach() {
  try {
    assertNoPoisoning({ ignoredRootRegex });
  } catch (err) {
    restoreGlobals({ ignoredRootRegex });
    throw err;
  }
}
fc.configureGlobal({ afterEach: poisoningAfterEach });

test('should detect the substring', () => {
  fc.assert(
    fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {
      expect(isSubstring(a + b + c, b)).toBe(true);
    }),
  );
});

----------------------------------------

TITLE: Converting Zod Validators to Fast-check Arbitraries
DESCRIPTION: Shows how to use the zod-fast-check library to convert Zod schema validators into fast-check arbitraries. The example defines a User schema with first and last name fields, then tests that the full name contains both components.

LANGUAGE: javascript
CODE:
import * as z from 'zod';
import * as fc from 'fast-check';
import { ZodFastCheck } from 'zod-fast-check';

const User = z.object({ firstName: z.string(), lastName: z.string() });
const userArbitrary = ZodFastCheck().inputOf(User);

test("User's full name always contains their first and last names", () => {
  fc.assert(
    fc.property(userArbitrary, (user) => {
      const parsedUser = User.parse(user);
      const fullName = `${parsedUser.firstName} ${parsedUser.lastName}`;
      expect(fullName).toContain(user.firstName);
      expect(fullName).toContain(user.lastName);
    }),
  );
});

----------------------------------------

TITLE: Generating Multiple UUID Versions
DESCRIPTION: Generates UUID values from a selection of versions. This example shows generating UUIDs that can be either version 4 or version 7. The version parameter accepts an array of version numbers to allow more variety in the generated values.

LANGUAGE: javascript
CODE:
fc.uuid({ version: [4, 7] });
// Examples of generated values:
// • "ffffffe8-4e61-40c1-8000-001d7f621812"
// • "0000001f-b6dc-7d7d-b40c-08568ae90153"
// • "0000000b-0002-4000-9003-de96d8957794"
// • "8b8e8b89-251e-78e7-8000-000000000000"
// • "ffffffe5-000d-4000-bfff-fff496517cc4"
// • …

----------------------------------------

TITLE: Using emailAddress Generator in FastCheck
DESCRIPTION: Demonstrates how to use the emailAddress generator in FastCheck to create random valid email addresses. The function can be used with default settings or with a size parameter to control the length of generated emails. Examples show both default usage and size-constrained usage.

LANGUAGE: javascript
CODE:
fc.emailAddress();
// Examples of generated values:
// • "4@fgqcru.ca"
// • "#!iy8*vt.~#p{nam.y|na.f.afac|.t%^$v*+2di1e.43g@jcc.hl"
// • "fo/2p~zq.kn'e&bfa|1`@9fqau6rah8.8i81fxjk.ox"
// • "==.vra&~to=z.vdc^.=kf/'a$'2sr^.6j6gsw6^&az'.#$}mba.x!|}a@4.wk"
// • "8ic6`_g00syk.}r~b3{0t/7?.!51q'.0yxj2.8wj`f?v-lr}.t6%?z*1$i2+b@cjybzi.pr"
// • …

fc.emailAddress({ size: '-1' });
// Note: Generate smaller email addresses compared to default. As default size is 'small' (if unchanged), it is equivalent to 'xsmall'
// Examples of generated values: "k.wh@l7.pc", "u@j.ag", "p.ag@1f.bj", "d@4.yd", "!@is8.gb"…

----------------------------------------

TITLE: Installing fast-check with npm or yarn
DESCRIPTION: Command to add fast-check to your project dependencies using npm or yarn. This is the first step to integrate property-based testing in your Node.js project.

LANGUAGE: bash
CODE:
npm install --save-dev fast-check

----------------------------------------

TITLE: Using .map to Transform FastCheck Arbitraries in JavaScript
DESCRIPTION: The .map method transforms values produced by an arbitrary using a mapper function. It allows changing the type or structure of generated values while maintaining the underlying generation pattern.

LANGUAGE: javascript
CODE:
fc.nat(1024).map((n) => n * n);
// Note: Produce only square values
// Examples of generated values: 36, 24336, 49, 186624, 1038361…

LANGUAGE: javascript
CODE:
fc.nat().map((n) => String(n));
// Note: Change the type of the produced value from number to string
// Examples of generated values: "2147483619", "12", "468194571", "14", "5"…

LANGUAGE: javascript
CODE:
fc.tuple(fc.integer(), fc.integer()).map((t) => (t[0] < t[1] ? [t[0], t[1]] : [t[1], t[0]]));
// Note: Generate a range [min, max]
// Examples of generated values: [-1915878961,27], [-1997369034,-1], [-1489572084,-370560927], [-2133384365,28], [-1695373349,657254252]…

LANGUAGE: javascript
CODE:
fc.string().map((s) => `[${s.length}] -> ${s}`);
// Examples of generated values: "[3] -> ref", "[8] -> xeE:81|z", "[9] -> B{1Z\\sxWa", "[3] -> key", "[1] -> _"…

----------------------------------------

TITLE: Shrinking Custom Values in Fast-Check with Object Prototype Issue Example
DESCRIPTION: Demonstrates how Fast-Check automatically shrinks failing examples to simpler cases. This example shows a bug with object prototype properties in a lookup function.

LANGUAGE: javascript
CODE:
function buildQuickLookup(values) {
  const fastValues = Object.fromEntries(values.map((value) => [value, true]));
  return { has: (value) => value in fastValues };
}

fc.assert(
  fc.property(fc.array(fc.string()), fc.string(), (allValues, lookForValue) => {
    // Arrange
    const expectedResult = allValues.includes(lookForValue);

    // Act
    const cache = buildQuickLookup(allValues);

    // Assert
    return cache.has(lookForValue) === expectedResult;
  }),
  {
    examples: [
      // the user definable corner case to reduce
      [[], '__proto__'],
    ],
  },
);

----------------------------------------

TITLE: Defining the SchedulerSequenceItem Type in TypeScript
DESCRIPTION: Type definition for items that can be used in scheduler sequences. It accepts either an object with builder and label properties or a function returning a Promise.

LANGUAGE: typescript
CODE:
type SchedulerSequenceItem<TMetadata> =
  | { builder: () => Promise<any>; label: string; metadata?: TMetadata }
  | (() => Promise<any>);

----------------------------------------

TITLE: Configuring Generation Size and Depth in fc.anything()
DESCRIPTION: Demonstrates how to control the size and depth of generated structures using the depthSize and maxDepth parameters. This affects how complex and nested the generated objects can be.

LANGUAGE: javascript
CODE:
fc.anything({
  depthSize: 'medium',
  maxDepth: 1000,
});
// Note: For the moment, we have to specify maxDepth to avoid falling back onto its default value
// Examples of generated values:
// • [true,true,null,-5.6688453874368936e+48,false,2014694191684145,"LV$%~%",undefined,"_`qj6\"kX[",""]
// • {"`?f\"vcr":{"XW71":{"zXAq\"Z5Q":true,"@qs0m!":[5.120009133889531e-261,{"o3i[OWP`=F":{"":4.068510532307745e+281}},2487404948730847],";TuQtZ&=7m":{"\'($":null," bkaeV":{"":true,"Aw9+YG]!":-6.879800144762926e+244,"n?L!B#R)n":"g5","\'mq.#%I":1.3221798495494814e-101,"}E==:3Bp^T":-7996608749108864,"m":2.6223863023846673e-44,"w|q":3.70106922442221e-186},"!-V+{4":"\\","jwvaZ8":{"zB!nm|":7757208992281711,"h":-4.149080249381332e+195,"aiDLh":"","(Hs)$P*P":1.190747970776708e+91,"%?nT~X[N~\\":undefined,"`.r,*R;I":true},["":-6523958486123735,undefined,1.2305151888129762e-204,8115823674866317,null,false,4.434127565304523e-183]}},".sfPOsH*41":[-5.01979880119724e-255,"i",-1.4081703508890424e+232,{"m!?ZW`":"Y{P?$jVp","zq$@`":"fP>v)%C","sE,":[undefined,2467017295150935,[false,1063781909072521],"/>V;[_hAQG","[q:F",1.7094514624379897e+303,"",4.022046823766959e-77,true,false]},undefined,null,-5117919068097772,-1.0529463229722598e-11]}}
// • ""
// • "Y}q^/9i*"
// • 3467734424335213
// • …

----------------------------------------

TITLE: Creating a Simple List Class for Model-Based Testing
DESCRIPTION: A basic implementation of a List class that supports push, pop, and size operations. This serves as the system under test in the model-based testing example.

LANGUAGE: typescript
CODE:
class List {
  data: number[] = [];
  push = (v: number) => this.data.push(v);
  pop = () => this.data.pop()!;
  size = () => this.data.length;
}

----------------------------------------

TITLE: Initializing Fast-Check Tutorial Project Using npm/yarn
DESCRIPTION: Commands to create a tutorial project using a template, navigate to the project directory, and install dependencies. Uses degit to clone the template without Git history.

LANGUAGE: bash
CODE:
npx degit dubzzz/fast-check/website/templates/fast-check-tutorial fast-check-tutorial
cd fast-check-tutorial
npm i

----------------------------------------

TITLE: Configuring fast-check for Infinite Runs
DESCRIPTION: Sets up fast-check to run tests infinitely by configuring the numRuns setting to positive infinity, effectively turning fast-check into a fuzzer that continuously generates test cases.

LANGUAGE: javascript
CODE:
fc.configureGlobal({ numRuns: Number.POSITIVE_INFINITY });

----------------------------------------

TITLE: Integrating lorem-ipsum with fast-check in JavaScript
DESCRIPTION: Example of wrapping the lorem-ipsum library as a fast-check arbitrary. This approach replaces the built-in random number generator with a fast-check controlled one to ensure reproducibility of the generated text.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';
import { loremIpsum } from 'lorem-ipsum';

const loremArb = fc
  .noShrink(
    fc.infiniteStream(
      // Arbitrary generating 32-bit floating point numbers
      // between 0 (included) and 1 (excluded) (uniform distribution)
      fc.noBias(fc.integer({ min: 0, max: (1 << 24) - 1 }).map((v) => v / (1 << 24))),
    ),
  )
  .map((s) => {
    const rng = () => s.next().value; // prng like Math.random but controlled by fast-check
    return loremIpsum({ random: rng });
  });

----------------------------------------

TITLE: Default sparseArray Usage in JavaScript
DESCRIPTION: Shows the default behavior of sparseArray when called with only a natural number arbitrary and no additional options. The resulting arrays can be of any length and can contain any number of elements.

LANGUAGE: javascript
CODE:
fc.sparseArray(fc.nat());

----------------------------------------

TITLE: Using jsonValue Arbitrary Generator in JavaScript
DESCRIPTION: Demonstrates the jsonValue generator which creates JSON-compatible values with various configuration options including depth control and string character customization.

LANGUAGE: javascript
CODE:
fc.jsonValue();
// Examples of generated values:
// • true
// • {"a":false,"&{v%":true,"O}u&;O":"ef","^69fY8G[M":false,"^%":null,"iC":-2.11992523062418e-82,"F%]8l0g6|":null}
// • [{"^":true,"1Y??Vih":-379313284684773500000,"_5zzvjCE":"B","B561n_":"2","eqHZM9R":null},1.2791945048214157e-72]
// • false
// • [null,true,true,"`l+$I","kSros",null]
// • …

fc.jsonValue({ noUnicodeString: false });
// Examples of generated values:
// • ["򴾼󹤷𡅤񤱓򛗡"]
// • {"􎵔򲁼򀎈𸝔􃌅􊿛񹙦":[false],"򨊗𤮈𡈡󵑑񗀏򏗔𙔔𐸵񇘼":556603.8398649627,"􏿽\u000b򸑽":{"񐀞󴕃󙉅񂊠𴛐󻕀㢋񦔘":true,"񊈒􋚭󷪙𫪀󌧶񉝒𱣆":null,"":5.539268054957889e+74,"򦹷":"񜝍⌳򻍜񇓷񖋦","񥸱񥊔򦹗":4.847354156832373e-25,"񜂑򹏁󞦐":"𻬫𳤲󵹃򕏧񁃵","𓧎𖰦":false,"󛻳򏜚񃛷񌛑𝜀󞅤񪉺":false}}
// • [null,["󿦼񌅡󯻾𝀹򲓋񁆺񐿏󃢰",-2.4628931920258706e-282,null,false,2.681696006505804e-238,"򢰮"]]
// • "򐐩"
// • []
// • …

fc.jsonValue({ maxDepth: 0 });
// Examples of generated values: true, null, false, "prototype", "L4)5M"…

fc.jsonValue({ maxDepth: 1 });
// Examples of generated values:
// • 1.1084525170506737e-156
// • [null,"co",null]
// • [null,null]
// • [null,"_",-4.808983581881553e-305,1.3122779113832298e-87,"<tiQ8",null]
// • true
// • …

fc.statistics(fc.jsonValue(), (v) => {
  function size(n) {
    if (Array.isArray(n)) return 1 + n.reduce((acc, child) => acc + size(child), 0);
    if (typeof n === 'object' && n) return 1 + Object.values(n).reduce((acc, child) => acc + size(child), 0);
    return 1;
  }
  const s = size(v);
  let lower = 1;
  const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);
  while (next(lower) <= s) {
    lower = next(lower);
  }
  return `${lower} to ${next(lower) - 1} items`;
});
// Computed statistics for 10k generated values:
// For size = "xsmall":
// • 1 to 4 items..100.00%
// For size = "small":
// • 1 to 4 items....43.79%
// • 10 to 49 items..38.40%
// • 5 to 9 items....17.64%
// • 50 to 99 items...0.17%
// For size = "medium":
// • 50 to 99 items......35.09%
// • 1 to 4 items........33.88%
// • 10 to 49 items......20.48%
// • 100 to 499 items....10.15%
// • 500 to 999 items.....0.36%

fc.statistics(fc.jsonValue({ maxDepth: 2 }), (v) => {
  function size(n) {
    if (Array.isArray(n)) return 1 + n.reduce((acc, child) => acc + size(child), 0);
    if (typeof n === 'object' && n) return 1 + Object.values(n).reduce((acc, child) => acc + size(child), 0);
    return 1;
  }
  const s = size(v);
  let lower = 1;
  const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);
  while (next(lower) <= s) {
    lower = next(lower);
  }
  return `${lower} to ${next(lower) - 1} items`;
});
// Computed statistics for 10k generated values:
// For size = "xsmall":
// • 1 to 4 items..100.00%
// For size = "small":
// • 1 to 4 items....44.64%
// • 5 to 9 items....34.00%
// • 10 to 49 items..21.36%
// For size = "medium":
// • 1 to 4 items......34.60%
// • 50 to 99 items....33.01%
// • 10 to 49 items....26.56%
// • 100 to 499 items...4.49%
// • 5 to 9 items.......1.34%

----------------------------------------

TITLE: Example of Using statistics Runner in JavaScript
DESCRIPTION: A practical example showing how to use the statistics runner to analyze the distribution of string lengths generated by the string arbitrary.

LANGUAGE: javascript
CODE:
fc.statistics(
  fc.string(), // source arbitrary
  (v) => `${v.length} characters`, // classifier
  { numRuns: 100_000 }, // extra parameters
);
// Possible output:
// >  0 characters...9.65%
// >  2 characters...9.56%
// >  1 characters...9.41%
// >  3 characters...9.30%
// >  6 characters...9.04%
// >  9 characters...8.92%
// >  7 characters...8.90%
// >  8 characters...8.90%
// >  10 characters..8.86%
// >  4 characters...8.79%
// >  5 characters...8.68%

----------------------------------------

TITLE: Migrating from unicodeJson to json with stringUnit parameter
DESCRIPTION: Update pattern for replacing the deprecated unicodeJson and unicodeJsonValue arbitraries with the consolidated json and jsonValue arbitraries that accept stringUnit configuration.

LANGUAGE: diff
CODE:
--fc.unicodeJson();
++fc.json({ stringUnit: 'binary' }); // or 'grapheme'

--fc.unicodeJsonValue();
++fc.jsonValue({ stringUnit: 'binary' }); // or 'grapheme'

----------------------------------------

TITLE: Detecting Concurrent Queries Using Boolean Flags in JavaScript
DESCRIPTION: This code replaces the original implementation with a more robust version that monitors concurrent calls by using boolean flags to track query state. It detects when a scheduled call is invoked before previous calls have resolved.

LANGUAGE: javascript
CODE:
//...
const scheduledCall = s.scheduleFunction(call);
const queued = queue(scheduledCall);
//...
expect(concurrentQueriesDetected).toBe(false);
//...

LANGUAGE: javascript
CODE:
//...
const scheduledCall = s.scheduleFunction(call);
let concurrentQueriesDetected = false;
let queryPending = false;
const monitoredScheduledCall = (...args) => {
  concurrentQueriesDetected ||= queryPending;
  queryPending = true;
  return scheduledCall(...args).finally(() => (queryPending = false));
};
const queued = queue(monitoredScheduledCall);
//...
expect(concurrentQueriesDetected).toBe(false);
//...

----------------------------------------

TITLE: Generating JSON Data with fc.json()
DESCRIPTION: Creates JSON-compatible string representations that can be parsed with JSON.parse(). Supports generation of primitives and complex nested objects with configurable depth and string character options.

LANGUAGE: javascript
CODE:
fc.json();
// Examples of generated values:
// • "[\"oU6LT>'\",{\"QZ#YUZNw\":null,\"#\":null,\")>*\":{\"q&B1cUDn=\":\"CZTPpisxH\",\"u`)})\":\"_a-\",\"\":null},\"dY~Dn>k\":true,\"=nC#&uS5l%\":\"0\\\"j-o,JV\",\"TX[OKj\":-1.7084671585468263e+151,\"\\\"\":true,\"@(:<LUW\":\"s-JYYB\"},[]]"
// • \"al[->g\""
// • "null"
// • "-5e-323"
// • "[null,-1.5485504457576672e+192,null,{},-1.417727947024272e-287,null,null,null]"
// • …

fc.json({ noUnicodeString: false });
// Examples of generated values:
// • "{}"
// • "[{\"󜁳򁿳򎗯􈤘񖇅\":null,\"򈷩𫨹􏥃򤵪񥉨񢦜꣙\":[null,\"򉲨򛨰𜥲񆠉򁀿񇆾􀤯񾱄\"],\"__def\":\"񥛡\",\"𴂏򰷳𩪎񡨫\":true,\"\\u0012􏿺\":\"\",\"􍥚󛂾𓴒\":false},[3.5931489320423776e+139,[true,\"󌘅񪜆󗛃󎩻𙹖򞠚򺳵񨶖\",false,{\"􊆪򓔝򘥬𔧥󴓌򩁆\":null,\"\":\"󌽡𗀥󚨿󊭹򎻎񀓜򧅘򏜣󨓚񯄈\",\"𽸧򽂵񯆎񷡰𑴵񞱒\":[true,\"򀲑򿒦\",true,\"􊔹񒚡𣉟𳡸񮋳󳝶\",false,-4.119935921393037e+259,null,-8.9364525362984475e+248]},\"򸀿󳿴񥘡򪠾򃰧򣖏\",\"󱝇򹢖𬂏񠤫󴕠򒐧\"]],[false,-6.0502670401327095e+112,1.1096547717393745e-177,null,null,null,false,[null,\"󘳑㨦𭦄񱹂𚃜򅅪󪃗򟓓󊕝򠗺\",1.288654068889961e-213,null,1.6406299790913147e-206]]]" 
// • "\"򁤇𫍯􏿬\\u0004񞋰\\u0005򟱉򳟔󽐾\""
// • "[null,[{\"壏\":true,\"𮀳񠍞󗈌\":\"耕򰶤䰅𸬣\",\"\":null,\"𘥣񯙝𖹟󗨟𯵽򿈤􊇦󣌙󸫨󸅔\":true,\"󒾠򈄕󬀘𚨶󍋤񃞜𮢌􇶸񏭘\":null,\"񮹷񀚤󷅓󰪼􀆌𥰂𫃩𧆔𹷹󭼜\":true,\"󛶋򣄚񼇏򡭇󹃤󢁬𞲢\":-4.059178361848322e-91,\"򉁀򠾫𓦞𑬞󵫽򏥷񹺏􌗈\":true},null],[3.6448982683876056e+131]]"
// • "[null,false]"
// • …

fc.json({ maxDepth: 0 });
// Examples of generated values: "null", "\"T\"", "-1.6050118268310372e-215", "true", "\"Ep\""…

fc.json({ maxDepth: 1 });
// Examples of generated values: "{\"V~<\\\"#}\":\"apply\"}", "{\"DZ&2@~yE\":4.016561322014934e-232}", "null", "true", "{}"…

fc.json({ depthSize: 'medium' });
// Examples of generated values:
// • "4.4e-323"
// • "[\"v!56\",true,{\"n.Z-KP\":\"WeB\",\"%sT\":true,\"+vJj71IB1\":\"p\\\"9|V\\\".\",\"B~U)!j6>:0\":\"?]2R)hy\",\"<C\":5.763682596504741e-124,\"g\":5.506486779037679e+86,\"^\":false,\"0beh\":null},null,true,false,null]"
// • "5e-323"
// • "{\"valueOf\":{\"hCu2[\":{\"}\\\"}t\":{\"rC,RK\":false,\"|sD.+@+\":\"K?e5tLzu\"},\"*4 80r\":{\"=c8x 3^\":\"\",\"bv2;Pdc\":266593828340.0835,\"&F{b*Ow:tH\":3.854574422896131e-236,\"\":-3.136445144286352e-152,\"7 a[$t.f[\":null,\"S\":true,\"VdF\":\"zr}U[\"},\"suNX+*`0y\":null,\"GO*sBjC8G1\":{\"Bx5_>&C'l\":\"<\",\"8qI\":1.5292990047864634e-116,\"hKPYD5\":-1.7059350714655333e+80,\";-{\":false,\"-0/PeWhX)3\":\"-}|\",\"\":null,\"!\":\"H0(|XlzFMY\",\"peo`:V\":\"%#BLcJMT\",\"T+FOe$\":true,\"Z7\":null},\"zCA'ft\\\\l^J\":[null]}},\";oU_&9\":{\"b\":{\"\":null,\"%C\":\"+Lf\",\"%6>\":1.7976931348623147e+308,\"}vi!#D[G\\\\\":null,\"g.q&2evf\":\"C^tirM8d?,\",\"4t4aCG\":true,\"$n\\\"\":\"(IbE\"},\"|Bt[MInNOk\":null,\"#&$gzzy\":null,\"bd7cNTL\":[null,\"D\",null,1.627654078166552e+223,null,null,\"g\",\"gr\",-1.137436331927833e+42,-3.0030877534684717e+142],\" j]\":{\"hlI1\":null,\"e1$j@B\":null,\"-!\":\"7<!94\",\"fM@\":-4.396133099620614e-146,\"RwN]?%U@b7\":null,\"KB\":true,\"k=z<\":1.8766725492972305e-96,\"\":null,\"~b1>42%\":null,\"G\":null},\":v FiA\":\"k\",\"VlI okG\":0,\"f\":null,\"%w*B}\":true,\"\":\"apply\"},\"l\":[7.6086682491958856e-146,{\"5\":\"\",\"Y)s.a\":null,\"0y]0ca@qm2\":\"inPS~K2q{\",\"S*Z*f&=\":null,\"-=u\":false,\"v.P\":-7.067638177674602e+76},\"$~1<?Pv_\",null,[2.219624217009348e-22,-9.770861754123764e+110,true,null,\"/.1Q%v\",null,null],true,1.2718114310572915e+272,true,true]}"
// • "{\"L|hZ\":{\"~(\":\"4jKldvae;X\",\"NU(b\":null,\"\":4.163017031290256e+162,\"K\\\"F\":null,\"o<|c\":true,\"< bZ] \":false,\"wS,Riq}CV4\":-5.298684866824531e+64},\"3md/a<_r{\\\"\":{},\"-Rcc`3_\":[true,\"xuY=Hd6 \",{\"5e(_%d9^0d\":null,\"^q#$iu\":null},1.973826918030355e-291,{\"k\":-2.1122181366513202e+135,\"fYxj@\":-1.351657689147719e-183,\"2<+2nm%\":6.329905233731848e-285,\"4y.!XKqc\":null,\"CSaX}b\":\"`J_fU\",\"nc\":null,\"OXR>\":\"^xW!\"}],\"\":{\"d1}%eQ=\":{\":\":false,\"bO9,.DM\":false}},\"4iK-j!9hx\":{\"xK^[~mT\":null,\"l2$7G5(\":{\"4%' 15&pK\":true,\"[$@Y`\":\"5EHH_d.@|\",\"\":\"\\\\\",\"E~[./|O3\":-9.129273010709225e+288},\"K\\\\;/4elg|$\":null,\"jr\":-1.0758585287978389e-274,\"~@S\":\"\",\",*I)0\":\"]\\\";7\",\"-!:NF\":true,\"(Dp\":\")\\\");3Fd\",\"(:^0XUcye2\":null}}"
// • …

----------------------------------------

TITLE: Generating Int32Array Values with fast-check
DESCRIPTION: Creates arbitrary Int32Array instances with configurable value ranges and length. Supports options for min/max values (default range -0x80000000 to 0x7fffffff), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.int32Array();
// Examples of generated values:
// • Int32Array.from([581737874,363728213,1849261841,2086900089,-739607497,-1663538255])
// • Int32Array.from([])
// • Int32Array.from([-959081718,-1066774951])
// • Int32Array.from([1932414823,-1904516172,-1076953230,327779854,-2127205258,-1298673572,503994952,-1638200570,-1729271522])
// • Int32Array.from([-1151637165,-722646711,-1773418861,-1345402891,161175616,-1982117429,68362401,-1837239306,-204728221])
// • …

fc.int32Array({ min: 0, minLength: 1 });
// Examples of generated values:
// • Int32Array.from([1785106343,925226031,718971773,1586792878,400900346,1689947645,96279688,1693807166,438809160,1047878745,2063128540])
// • Int32Array.from([1155662778,398052668,504460415,572805240])
// • Int32Array.from([2147483628])
// • Int32Array.from([688082383,20,17,896059968,1869735049,922750045,18])
// • Int32Array.from([1794203980,11,13,1308253671,3])
// • …

----------------------------------------

TITLE: Advanced Hexadecimal Character Arbitrary Implementation
DESCRIPTION: A more sophisticated implementation of the hexa arbitrary with bidirectional mapping functions for proper shrinking behavior.

LANGUAGE: typescript
CODE:
function hexa(): fc.Arbitrary<string> {
  return fc.integer({ min: 0, max: 15 }).map(
    (n) => items[n],
    (c) => items.indexOf(c),
  );
}

// hexaString unchanged!

----------------------------------------

TITLE: sparseArray with Increased Size Parameter in JavaScript
DESCRIPTION: Demonstrates how to use the size parameter to generate larger arrays than the default configuration would allow. This affects both the number of elements and the total length of the array.

LANGUAGE: javascript
CODE:
fc.sparseArray(fc.nat(), { size: '+1' });

----------------------------------------

TITLE: Generating Float64Array with Fast-Check
DESCRIPTION: The float64Array generator creates Float64Array instances with configurable parameters. It supports options for controlling value ranges, handling of special values like infinity and NaN, and configuring array length.

LANGUAGE: javascript
CODE:
fc.float64Array();
// Examples of generated values:
// • Float64Array.from([])
// • Float64Array.from([-301377788.37725013,-1.7149147913092319e-97,8e-323,1e-323,-4e-323,-2.057106358614005e-7,3.7791002743330725e-63,5e-323,7e-323,-2.7469348785639148e+224])
// • Float64Array.from([-1.1619421936685911e-164])
// • Float64Array.from([-7.651385650429631e+128,-8.869426164279998e-72,4.233071733934197e-64,-0.000002350752021139201,7.038756466481596e-175,126806475960244.08,1.1085581712589228e+178])
// • Float64Array.from([3.477655531645621e-163,8.482885727970808e+246,8.005016653709244e+200,-1.6308036504155555e+224,-1.8149570511597214e-122])
// • …

fc.float64Array({ minLength: 1 });
// Examples of generated values:
// • Float64Array.from([1.179182805455725e-90])
// • Float64Array.from([33830772.59796326,4.4e-323])
// • Float64Array.from([4.4e-323,-2.0609982364042263e+263,8.629895099097848e+77,1.4155962948371038e-248,-1.9599359241539372e+245,5.117175856556106e-218,3.0325723805645807e-84,-1.7976931348623147e+308])
// • Float64Array.from([1.7976931348623147e+308])
// • Float64Array.from([-1.7976931348623147e+308])
// • …

----------------------------------------

TITLE: Complete FakerFirstNameBuilder Implementation with Context Probing in TypeScript
DESCRIPTION: A comprehensive implementation of FakerFirstNameBuilder that uses a Symbol to mark its own generated values. This approach correctly differentiates between values generated by this arbitrary and those from other sources, enabling proper context-aware shrinking.

LANGUAGE: typescript
CODE:
const ctxProbe = Symbol();
const strArb = fc.string({ minLength: 1 });

class FakerFirstNameBuilder extends fc.Arbitrary<string> {
  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<string> {
    const randomizer = { next: () => mrng.nextDouble(), seed: () => {} };
    const customFaker = new Faker({ locale: base, randomizer });
    return new fc.Value(customFaker.person.firstName(), ctxProbe);
  }
  canShrinkWithoutContext(value: unknown): value is string {
    return false;
  }
  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {
    if (context !== ctxProbe || strArb.canShrinkWithoutContext(value)) {
      return strArb.shrink(value, context);
    }
    return fc.Stream.nil();
  }
}

----------------------------------------

TITLE: Configuring Global and Local Size Settings in Fast-check Tests
DESCRIPTION: This example demonstrates how to override the global size setting to 'medium' and customize the local size for specific string generators. The test verifies that a concatenated string always contains its substring, with different size settings for different parts.

LANGUAGE: javascript
CODE:
// Override the global size to medium.
fc.configureGlobal({ baseSize: 'medium' });

// Override the local size of the second string only.
// Size 'medium' will be used by a and c, while b will be 'large' (=medium+1).
test('should always contain its substrings', () => {
  fc.assert(
    fc.property(fc.string(), fc.string({ size: '+1' }), fc.string(), (a, b, c) => {
      expect(contains(a + b + c, b)).toBe(true);
    }),
  );
});

----------------------------------------

TITLE: Advanced Base64 Character Arbitrary Implementation
DESCRIPTION: A more sophisticated implementation of the base64 arbitrary using custom mapping functions for character generation and validation.

LANGUAGE: typescript
CODE:
function base64Mapper(v: number) {
  if (v < 26) return String.fromCharCode(v + 65); // A-Z
  if (v < 52) return String.fromCharCode(v + 97 - 26); // a-z
  if (v < 62) return String.fromCharCode(v + 48 - 52); // 0-9
  return v === 62 ? '+' : '/'; // 43, 47
}

function base64Unmapper(s: unknown) {
  if (typeof s !== 'string' || s.length !== 1) {
    throw new Error('Invalid entry');
  }
  const v = s.charCodeAt(0);
  if (v >= 65 && v <= 90) return v - 65; // A-Z
  if (v >= 97 && v <= 122) return v - 97 + 26; // a-z
  if (v >= 48 && v <= 57) return v - 48 + 52; // 0-9
  return v === 43 ? 62 : v === 47 ? 63 : -1; // +/
}

function base64(): fc.Arbitrary<string> {
  return integer({ min: 0, max: 63 }).map(base64Mapper, base64Unmapper);
}

----------------------------------------

TITLE: Using .chain for Flat-Mapping FastCheck Arbitraries in JavaScript
DESCRIPTION: The .chain method creates a new arbitrary by applying a function that returns an arbitrary based on a generated value. This enables dependent arbitrary generation but has limited shrinking capabilities.

LANGUAGE: javascript
CODE:
fc.nat().chain((min) => fc.tuple(fc.constant(min), fc.integer({ min, max: 0xffffffff })));
// Note: Produce a valid range
// Examples of generated values: [1211945858,4294967292], [1068058184,2981851306], [2147483626,2147483645], [1592081894,1592081914], [2147483623,2147483639]…

----------------------------------------

TITLE: Configuring Vitest for Fast-Check Global Settings
DESCRIPTION: Example of setting up Vitest configuration to include a setup file for Fast-Check global settings. Uses the setupFiles option to specify the file to be executed before tests.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    // ...
    setupFiles: ['./vitest.setup.js'],
  },
});

----------------------------------------

TITLE: Generating Falsy Values with Fast-Check
DESCRIPTION: Demonstrates how to use fc.falsy() to generate falsy values (false, null, undefined, 0, '', NaN) for property-based testing. The withBigInt option can be included to also generate 0n in the output.

LANGUAGE: javascript
CODE:
fc.falsy();
// Examples of generated values: null, 0, false, undefined, ""…

fc.falsy({ withBigInt: true });
// Examples of generated values: null, Number.NaN, false, undefined, 0n…

----------------------------------------

TITLE: Updating date Arbitrary Configuration in Fast-Check
DESCRIPTION: Shows how to update the date arbitrary to handle invalid dates in version 4. In v4, date can generate Invalid Date instances by default, requiring the noInvalidDate parameter to be set to true to maintain previous behavior.

LANGUAGE: diff
CODE:
-fc.date();
+fc.date({ noInvalidDate: true });

----------------------------------------

TITLE: Generating Web URLs with fastcheck
DESCRIPTION: Generate complete web URLs following RFC 3986 and WHATWG URL Standard. Offers extensive configuration options including custom schemes, fragments, query parameters, and authority settings.

LANGUAGE: javascript
CODE:
fc.webUrl();
// Examples of generated values: "https://1e.pl/", "https://s.snp", "https://h.ot", "https://copze7.wrc/N/", "http://ay84wia.bi/%05/_"…

fc.webUrl({
  validSchemes: ['ftp', 'ftps'],
});
// Examples of generated values:
// • "ftps://iq7rvu2my.tm/%F0%91%B3%981V&Hq"
// • "ftp://7eee69dc78fg.nec"
// • "ftp://hye.rbh9r2.hb"
// • "ftp://hmakevcba.uis/~%F3%BC%B3%B2"
// • "ftps://xb1.5787e.cew/d"
// • …

fc.webUrl({
  withFragments: true,
  withQueryParameters: true,
});
// Examples of generated values:
// • "https://db.oaurut3lxuey.yc#%F4%84%8D%9Ep%F3%87%81%B8.$/3n7%F3%A7%8F%BB"
// • "http://91kpzb6.x4tmjg.pa//y/%F4%8A%8E%83///?Z7R)=W%F3%A2%95%B1h14"
// • "http://hqydzxt3ihu.db/m/A/M/o/6/?e#%F3%B9%93%B65%F1%B9%A7%B1mx:pU_m"
// • "https://74gl.fp601objrmhm.rx/svxJFoL#"
// • "http://7.qxq?;Y:f@HiK#ref"
// • …

fc.webUrl({ size: '-1' });
// Note: Generate smaller urls compared to default. As default size is 'small' (if unchanged), it is equivalent to 'xsmall'
// Examples of generated values: "https://pi.ca", "https://j.3ch.hy/", "https://5c.f.lbi/", "https://px.hw", "https://dcf.qr"…

----------------------------------------

TITLE: Using the new fc.noBias function in TypeScript
DESCRIPTION: Example showing how to use the new fc.noBias function which replaces the deprecated Arbitrary.prototype.noBias method. This function is used to create arbitraries that don't bias toward edge cases during generation.

LANGUAGE: typescript
CODE:
fc.noBias(anyArbitrary);

----------------------------------------

TITLE: Setting Up Fast-Check Global Configuration in Jest
DESCRIPTION: Implementation of the Jest setup file that configures Fast-Check global settings. This file is loaded before test execution to apply consistent settings across all tests.

LANGUAGE: javascript
CODE:
const fc = require('fast-check');
fc.configureGlobal({ numRuns: 10 });

----------------------------------------

TITLE: Sharing Settings Across Tests with configureGlobal
DESCRIPTION: Demonstrates how to use configureGlobal to set shared settings across multiple tests, eliminating the need to specify the same settings repeatedly. The numRuns parameter is set once and applied to all tests.

LANGUAGE: javascript
CODE:
fc.configureGlobal({ numRuns: 10 });

test('test #1', () => {
  fc.assert(myProp1);
});
test('test #2', () => {
  fc.assert(myProp2);
});
test('test #3', () => {
  fc.assert(myProp3);
});

----------------------------------------

TITLE: Configuring Jest Setup for Fast-Check Global Settings
DESCRIPTION: Example of configuring Jest to use Fast-Check global settings across all test files. This approach uses Jest's setupFiles configuration to apply settings without repeating code in each test file.

LANGUAGE: javascript
CODE:
module.exports = {
  setupFiles: ['./jest.setup.js'],
};

----------------------------------------

TITLE: Configuring Object Generator with All Options in FastCheck
DESCRIPTION: Example of configuring the fc.object() method with all possible options enabled. This configuration allows generating complex objects with BigInt, boxed values, Date objects, Maps, null prototype objects, specialized string representations, Sets, TypedArrays, sparse arrays, and Unicode strings.

LANGUAGE: javascript
CODE:
fc.object({
  withBigInt: true,
  withBoxedValues: true,
  withDate: true,
  withMap: true,
  withNullPrototype: true,
  withObjectString: true,
  withSet: true,
  withTypedArray: true,
  withSparseArray: true,
  withUnicodeString: true,
});

----------------------------------------

TITLE: Running Fast-Check Tests in Worker Threads
DESCRIPTION: Using @fast-check/worker to run property test predicates in dedicated worker threads, allowing for better isolation and the ability to terminate long-running synchronous tests.

LANGUAGE: js
CODE:
import { test, expect } from '@jest/globals';
import fc from 'fast-check';
import { isMainThread } from 'node:worker_threads';
import { assert, propertyFor } from '@fast-check/worker';

const property = propertyFor(new URL(import.meta.url)); // or propertyFor(pathToFileURL(__filename)) in commonjs
const isSubstringProperty = property(fc.string(), fc.string(), fc.string(), (a, b, c) => {
  expect(isSubstring(a + b + c, b)).toBe(true);
});

if (isMainThread) {
  test('should detect the substring', async () => {
    await assert(isSubstringProperty, { timeout: 1000 });
  });
}

----------------------------------------

TITLE: Generating Arbitrary Functions with func in JavaScript
DESCRIPTION: Creates functions that produce values from a specified arbitrary. Takes an arbitrary as input and generates functions that return values from that arbitrary based on the function arguments. The generated function uses a hash of its arguments to select values from a pre-generated array.

LANGUAGE: javascript
CODE:
fc.func(fc.nat());
// Examples of generated values:
// • function(...args) {
//     // With hash and stringify coming from fast-check
//     const outs = [18];
//     return outs[hash('-2147483647' + stringify(args)) % outs.length];
//   }
// • function(...args) {
//     // With hash and stringify coming from fast-check
//     const outs = [1044253015,881466391,1911917064,3,2147483643,11,1097098198];
//     return outs[hash('-2147483643' + stringify(args)) % outs.length];
//   }
// • function(...args) {
//     // With hash and stringify coming from fast-check
//     const outs = [1644861079,2004697269];
//     return outs[hash('-31' + stringify(args)) % outs.length];
//   }
// • function(...args) {
//     // With hash and stringify coming from fast-check
//     const outs = [1192604909,672581076,1502245668,31791972,1761768821,396996837,676877520,1919262427,641285424];
//     return outs[hash('-493007294' + stringify(args)) % outs.length];
//   }
// • function(...args) {
//     // With hash and stringify coming from fast-check
//     const outs = [624842423,32338439,1321248893,980127887,850807339,1583851385,1093421004,1758229721,464930963];
//     return outs[hash('-2147483642' + stringify(args)) % outs.length];
//   }
// • …

----------------------------------------

TITLE: Legacy Custom Reporter Implementation in FastCheck (JavaScript)
DESCRIPTION: Shows the previous approach to creating custom reporters before the reporter/asyncReporter options were available. This manually handles both synchronous and asynchronous property checks.

LANGUAGE: js
CODE:
const throwIfFailed = (out) => {
  if (out.failed) {
    throw new Error(fc.defaultReportMessage(out));
  }
};
const myCustomAssert = (property, parameters) => {
  const out = fc.check(property, parameters);

  if (property.isAsync()) {
    return out.then((runDetails) => {
      throwIfFailed(runDetails);
    });
  }
  throwIfFailed(out);
};

----------------------------------------

TITLE: Customizing Object Keys in fastcheck
DESCRIPTION: Shows how to generate objects with specific keys by providing a custom key arbitrary. In this example, keys are limited to 'a', 'b', and 'c' using fc.constantFrom().

LANGUAGE: javascript
CODE:
fc.object({
  key: fc.constantFrom('a', 'b', 'c'),
});

----------------------------------------

TITLE: Increasing FastCheck Test Verbosity
DESCRIPTION: How to increase the verbosity level of FastCheck tests to get more detailed information about test execution and failures for better debugging.

LANGUAGE: js
CODE:
test('should sort numeric elements from the smallest to the largest one', () => {
  fc.assert(
    fc.property(fc.array(fc.integer()), (data) => {
      /* code of the predicate */
    }),
    { verbose: 2 }, // <-- added
  );
});

----------------------------------------

TITLE: Comparing Previous and New Stringifier Output in TypeScript
DESCRIPTION: Demonstrates the refined serializer output in fastcheck v4, showing how objects created with Object.create(null) are now stringified differently compared to previous versions.

LANGUAGE: typescript
CODE:
stringify(Object.create(null)); // 'Object.create(null)'
stringify(Object.assign(Object.create(null), { a: 1 })); // 'Object.assign(Object.create(null),{"a":1})'

LANGUAGE: typescript
CODE:
stringify(Object.create(null)); // '{__proto__:null}'
stringify(Object.assign(Object.create(null), { a: 1 })); // '{__proto__:null,"a":1}'

----------------------------------------

TITLE: Using Fast-Check with Vitest Test Runner
DESCRIPTION: Examples of property-based testing with Vitest using the @fast-check/vitest package, showing both array and object parameter styles for property tests.

LANGUAGE: js
CODE:
import { test, fc } from '@fast-check/vitest';

test.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {
  return (a + b + c).includes(b);
});

test.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {
  return (a + b + c).includes(b);
});

----------------------------------------

TITLE: Verbose FastCheck Test Output
DESCRIPTION: Example of verbose FastCheck test output when verbosity is set to 2, showing detailed execution summary with test attempts and their results.

LANGUAGE: txt
CODE:
**FAIL**  sort.test.mjs > should sort numeric elements from the smallest to the largest one
Error: Property failed after 1 tests
{ seed: -1819918769, path: "0:...:3", endOnFailure: true }
Counterexample: [[2,1000000000]]
Shrunk 66 time(s)
Got error: AssertionError: expected 1000000000 to be less than or equal to 2

Stack trace: AssertionError: expected 1000000000 to be less than or equal to 2
    at C:\dev\fast-check\website\templates\fast-check-tutorial\sort.test.mjs:10:35
    ...
    at runTest (file:///C:/dev/fast-check/node_modules/@vitest/runner/dist/index.js:444:15)

Execution summary:
× [[2147483632,-1868311174,2,-14,-1309756521,948824737,2147483631,1352827217]]
. √ [[]]
. × [[-1309756521,948824737,2147483631,1352827217]]
. . √ [[2147483631,1352827217]]
. . × [[948824737,2147483631,1352827217]]
. . . √ [[2147483631,1352827217]]
. . . √ [[0,2147483631,1352827217]]
. . . × [[474412369,2147483631,1352827217]]
. . . . √ [[2147483631,1352827217]]
. . . . × [[237206185,2147483631,1352827217]]
. . . . . √ [[2147483631,1352827217]]
. . . . . √ [[118603093,2147483631,1352827217]]
. . . . . × [[177904639,2147483631,1352827217]]
...
. . . . . ... . . × [[2,1000000000]]
. . . . . ... . . . √ [[1000000000]]
. . . . . ... . . . √ [[1,1000000000]]
. . . . . ... . . . √ [[2]]
. . . . . ... . . . √ [[2,999999999]]

----------------------------------------

TITLE: Generating Maximum Safe Natural Numbers with FastCheck
DESCRIPTION: Generate any possible positive integer within JavaScript's safe integer range using fc.maxSafeNat(). The range spans from 0 (included) to Number.MAX_SAFE_INTEGER (included).

LANGUAGE: javascript
CODE:
fc.maxSafeNat();
// Examples of generated values: 8974418498592146, 7152466311278303, 7682568104547082, 5480146126393191, 6062166945524051…

----------------------------------------

TITLE: Removing Generation Bias with fc.noBias in JavaScript
DESCRIPTION: Removes bias from an arbitrary to create a more equi-probable distribution of generated values. Especially useful for numeric types where certain ranges are normally favored.

LANGUAGE: javascript
CODE:
fc.noBias(fc.nat());
// Note: Compared to fc.nat() alone, the generated values are evenly distributed in
// the range 0 to 0x7fffffff making small values much more unlikely.
// Examples of generated values: 394798768, 980149687, 1298483622, 1164017931, 646759550…

----------------------------------------

TITLE: Using Fast-Check with Jest Test Runner
DESCRIPTION: Examples of property-based testing with Jest using the @fast-check/jest package, showing both array and object parameter styles for property tests.

LANGUAGE: js
CODE:
import { test, fc } from '@fast-check/jest';

test.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {
  return (a + b + c).includes(b);
});

test.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {
  return (a + b + c).includes(b);
});

----------------------------------------

TITLE: Modifying Test to Re-run with Specific Seed and Path
DESCRIPTION: How to modify a FastCheck test to re-run it with a specific seed and path to reproduce a previous failure without going through all intermediate test cases.

LANGUAGE: js
CODE:
test('should sort numeric elements from the smallest to the largest one', () => {
  fc.assert(
    fc.property(fc.array(fc.integer()), (data) => {
      /* code of the predicate */
    }),
    { seed: -1819918769, path: '0:...:3', endOnFailure: true }, // <-- added
  );
});

----------------------------------------

TITLE: Implementing a Single Batch of Calls with Integers in fastcheck
DESCRIPTION: Code snippet showing how to implement a single batch of calls using integer identifiers with the queue helper. This approach uses sequential integers for easier debugging.

LANGUAGE: js
CODE:
const queued = queue(s.scheduleFunction(call));
for (let id = 0; id !== numCalls; ++id) {
  expectedAnswers.push(id);
  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));
}
await s.waitFor(Promise.all(pendingQueries));

----------------------------------------

TITLE: Using @fast-check/worker for Timeout Protection
DESCRIPTION: Implementation using @fast-check/worker to safely handle potentially infinite synchronous code execution. This setup allows testing to be interrupted if the code takes too long to execute.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';
import { assert, propertyFor } from '@fast-check/worker';
const property = propertyFor(new URL(import.meta.url));

const timeLimitMs = 1_000; // TODO: specify a limit based on the algorithm
const arbitraries = []; // TODO: our arbitraries or generators for random data
await assert(
  property(...arbitraries, (rawString) => {
    const startTime = performance.now();
    try {
      validator.parse(rawString);
    } catch (err) {}
    const endTime = performance.now();
    const delayMs = endTime - startTime;
    if (delayMs > timeLimitMs) {
      throw new Error(`The computation of validator.parse took ${delayMs}ms`);
    }
  }),
);

----------------------------------------

TITLE: Using Context for Logging in Fast-Check Tests
DESCRIPTION: Shows how to use fc.context() to create a logging context that will attach logs to the counterexample in case of test failure. This helps with debugging failed property-based tests.

LANGUAGE: javascript
CODE:
fc.context();
// The produced value - let's call it ctx - can be used as a logger that will be specific to this run (and only this run).
// It can be called as follow: ctx.log('My log')

----------------------------------------

TITLE: Filtering Arbitrary Values with .filter Method in JavaScript
DESCRIPTION: Applies a predicate function to values from an arbitrary, only keeping those that pass the test. Useful for creating arbitraries with specific constraints.

LANGUAGE: javascript
CODE:
fc.integer().filter((n) => n % 2 === 0);
// Note: Only produce even integer values
// Examples of generated values: -1582642274, 2147483644, 30, -902884124, -20…

fc.integer().filter((n) => n % 2 !== 0);
// Note: Only produce odd integer values
// Examples of generated values: 925226031, -1112273465, 29, -1459401265, 21…

fc.string().filter((s) => s[0] < s[1]);
// Note: Only produce strings with `s[0] < s[1]`
// Examples of generated values: "Aa]tp>", "apply", "?E%a$n x", "#l\"/L\"x&S{", "argument"…

----------------------------------------

TITLE: FastCheck Property Test Predicate Implementation
DESCRIPTION: Example of a FastCheck test predicate that verifies a sorting function by checking if each element is less than or equal to the next element in the sorted array.

LANGUAGE: js
CODE:
(data) => {
  const sortedData = sortNumbersAscending(data);
  for (let i = 1; i < data.length; ++i) {
    expect(sortedData[i - 1]).toBeLessThanOrEqual(sortedData[i]);
  }
};

----------------------------------------

TITLE: Basic sparseArray Usage in JavaScript
DESCRIPTION: Demonstrates the basic use of the sparseArray function with a natural number arbitrary and a maximum length constraint. The resulting array will contain natural numbers with random holes in the array.

LANGUAGE: javascript
CODE:
fc.sparseArray(fc.nat(), { maxLength: 20 });

----------------------------------------

TITLE: Limiting Shrinking with fc.limitShrink in JavaScript
DESCRIPTION: Caps the number of shrunk values an arbitrary can produce. Like noShrink, recommended only for specific cases when creating complex arbitraries.

LANGUAGE: javascript
CODE:
fc.limitShrink(fc.nat(), 3);
// Examples of generated values: 487640477, 1460784921, 1601237202, 1623804274, 5…

----------------------------------------

TITLE: Testing Asynchronous Function Execution Order in JavaScript
DESCRIPTION: This code shows how asynchronous execution works with the fireCall function, demonstrating that the call is executed after the synchronous code completes. The console logs illustrate the execution sequence.

LANGUAGE: javascript
CODE:
console.log('before fireCall');
fireCall(async () => console.log('call'));
console.log('after fireCall');

// Results:
// >  before fireCall
// >  after fireCall
// >  call

----------------------------------------

TITLE: FastCheck Error Message Excerpt
DESCRIPTION: Key part of the FastCheck error message showing the counterexample data that failed the test.

LANGUAGE: txt
CODE:
Counterexample: [[2,1000000000]]

----------------------------------------

TITLE: Disabling Shrinking with fc.noShrink in JavaScript
DESCRIPTION: Disables shrinking capabilities of an arbitrary. Generally not recommended except for complex arbitrary creation, as shrinking helps find minimal counterexamples.

LANGUAGE: javascript
CODE:
fc.noShrink(fc.nat());
// Examples of generated values: 1395148595, 7, 1743838935, 879259091, 2147483640…

----------------------------------------

TITLE: Generating Web Authority Values with fastcheck
DESCRIPTION: Generate web authority values following RFC 3986. Supports options to include IP addresses (v4, v4 extended, v6), port numbers, and user information in the generated values.

LANGUAGE: javascript
CODE:
fc.webAuthority();
// Examples of generated values: "23ks1pf.mgz", "7-ngin.sv", "peybeb.f9ia-gsmr.na", "9a1hmsddb-cm.iit", "xhlstwb.44ctb2efxk.fc"…

fc.webAuthority({
  withIPv4: true,
});
// Examples of generated values: "i.fb", "237.196.254.199", "7.166.63.117", "wz0zysek.zb", "252.149.163.184"…

fc.webAuthority({
  withIPv4Extended: true,
});
// Examples of generated values: "109.013506422", "119.0234.250.04", "df.el", "v.we", "64.020"…

fc.webAuthority({
  withIPv4: true,
  withIPv4Extended: true,
  withIPv6: true,
  withPort: true,
});
// Examples of generated values: "0rog.cod:63367", "02.0x57fdd:45172", "0247.0332.0315.0x7a", "2498828715:50719", "169.3.232.223"…

----------------------------------------

TITLE: Generating BigUint64Array with Fast-Check
DESCRIPTION: The bigUint64Array generator creates BigUint64Array instances containing unsigned BigInt values. It supports specifying minimum and maximum values along with array length constraints.

LANGUAGE: javascript
CODE:
fc.bigUint64Array();
// Examples of generated values:
// • BigUint64Array.from([])
// • BigUint64Array.from([5117275114603473262n,4394569470798804304n,6920020017401806060n,5258603306780069742n,15799194364432350385n,15072217045501931685n,9890565973553172882n,1706618215611458822n])
// • BigUint64Array.from([8447847048858851281n])
// • BigUint64Array.from([3878267431246446816n,18446744073709551614n,17n])
// • BigUint64Array.from([18446744073709551606n,7n,11n,14792271127527525943n,17496620028939466016n,14087698165858284533n,1059307009916302871n])
// • …
fc.bigUint64Array({ max: 42n, minLength: 1 });
// Examples of generated values:
// • BigUint64Array.from([5n,38n,18n,24n,14n,0n,31n,38n])
// • BigUint64Array.from([4n,1n,0n])
// • BigUint64Array.from([13n,1n,41n,1n,15n,0n])
// • BigUint64Array.from([1n])
// • BigUint64Array.from([7n,32n,23n,23n,10n,9n,24n,29n,11n,21n])
// • …

----------------------------------------

TITLE: Generating Optional Values with fc.option in JavaScript
DESCRIPTION: Creates an arbitrary that sometimes generates nil values (null by default) instead of values from the source arbitrary. The frequency parameter controls how often nil values appear.

LANGUAGE: javascript
CODE:
fc.option(fc.nat());
// Examples of generated values: 28, 18, 2001121804, 2147483643, 12456933…

fc.option(fc.nat(), { freq: 2 });
// Examples of generated values: null, 1230277526, 10, 1854085942, 5…

fc.option(fc.nat(), { freq: 2, nil: Number.NaN });
// Examples of generated values: Number.NaN, 292454282, 990664982, 703789134, 278848986…

fc.option(fc.string(), { nil: undefined });
// Examples of generated values: "p:s", "", "ot(RM", "|", "2MyPDrq6"…

// fc.option fits very well with recursive stuctures built using fc.letrec.
// Examples of such recursive structures are available with fc.letrec.

----------------------------------------

TITLE: Integrating fast-check Scheduler for Race Condition Testing
DESCRIPTION: A template showing how to update a test to use fast-check's scheduler for detecting race conditions, wrapping the existing test in fc.assert and fc.asyncProperty.

LANGUAGE: javascript
CODE:
test('should resolve in call order', async () => {
  await fc.assert(fc.asyncProperty(fc.scheduler(), async (s) => { // <-- added
    // ...unchanged code...
  }));                                                            // <-- added
});

----------------------------------------

TITLE: Generating IPv6 Addresses with fastcheck
DESCRIPTION: Generate valid IPv6 addresses using the fc.ipV6() arbitrary. This creates addresses in various valid IPv6 formats, including compressed notations and mixed IPv4-IPv6 formats.

LANGUAGE: javascript
CODE:
fc.ipV6();
// Examples of generated values:
// • "::470:6:192b:ffae:17:2:f"
// • "b1:9:16:0d:3:0157:2.0.3.0"
// • "::54.250.196.255"
// • "b12d:062:04:352:3f:2f:e5a6:4"
// • "::1f58:4b90:7.75.163.156"
// • …

----------------------------------------

TITLE: Generating Infinite Streams with infiniteStream in fastcheck
DESCRIPTION: Creates an infinite Stream of values generated by the provided arbitrary. The Stream implements IterableIterator<T> and includes helpful methods for stream manipulation.

LANGUAGE: javascript
CODE:
fc.infiniteStream(fc.nat(9));
// Examples of generated values: Stream(…)…

----------------------------------------

TITLE: Generating Uint16Array Values with fast-check
DESCRIPTION: Creates arbitrary Uint16Array instances with configurable value ranges and length. Supports options for min/max values (default range 0-65535), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.uint16Array();
// Examples of generated values:
// • Uint16Array.from([22507,50336,29220])
// • Uint16Array.from([3,56136])
// • Uint16Array.from([2769,5763,11647,10948,13743,23390,60319,8480])
// • Uint16Array.from([10545,40641,64196])
// • Uint16Array.from([10645,45125,552,37585,55875])
// • …

fc.uint16Array({ max: 42, minLength: 1 });
// Examples of generated values:
// • Uint16Array.from([40,10,16,0,0,41])
// • Uint16Array.from([22,28])
// • Uint16Array.from([24])
// • Uint16Array.from([38])
// • Uint16Array.from([1])
// • …

----------------------------------------

TITLE: Sequential Call Queueing with Immediate Result Collection in JavaScript
DESCRIPTION: Code snippet showing a loop that adds expected answers and creates pending queries by calling a queued function and collecting the results in an array. Each call is immediately queued without any delay mechanism.

LANGUAGE: javascript
CODE:
for (let id = 0; id !== numCalls; ++id) {
  expectedAnswers.push(id);
  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));
}

----------------------------------------

TITLE: Configuring Mocha to Use Fast-Check Global Settings
DESCRIPTION: Demonstrates how to integrate Fast-Check global settings with Mocha using the --file parameter to specify a setup file that will be executed before tests.

LANGUAGE: javascript
CODE:
const fc = require('fast-check');
fc.configureGlobal({ numRuns: 10 });

----------------------------------------

TITLE: Generating multiple UUID versions with fast-check
DESCRIPTION: Demonstrates how to use the new uuid arbitrary to generate UUIDs with multiple versions. This example shows generating both UUID v4 and v7.

LANGUAGE: javascript
CODE:
fc.uuid({ version: [4, 7] });

----------------------------------------

TITLE: Implementing BigInt Arbitrary Functions
DESCRIPTION: Custom implementation of the removed bigIntN, bigUintN, and bigUint arbitraries using the core fc.bigInt arbitrary with appropriate constraints for value ranges.

LANGUAGE: typescript
CODE:
function bigIntN(n: number): fc.Arbitrary<bigint> {
  return fc.bigInt({ min: 1n << BigInt(n - 1), max: (1n << BigInt(n - 1)) - 1n });
}

function bigUintN(n: number): fc.Arbitrary<bigint> {
  return fc.bigInt({ min: 0n, max: (1n << BigInt(n)) - 1n });
}

function bigUint(max: bigint = (1n << 256n) - 1n): fc.Arbitrary<bigint> {
  return fc.bigInt({ min: 0n, max });
}

----------------------------------------

TITLE: Using uniqueArray with Default SameValue Comparator
DESCRIPTION: Demonstrates the default SameValue comparison algorithm which treats -0 and 0 as different values, and considers NaN equal to itself.

LANGUAGE: javascript
CODE:
fc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN));

----------------------------------------

TITLE: Providing Custom Examples in Fast-Check Single Parameter Properties
DESCRIPTION: Shows how to define specific test examples for a property with a single parameter in Fast-Check. These examples will be executed before the automatically generated values.

LANGUAGE: typescript
CODE:
// For a one parameter property
fc.assert(fc.property(fc.nat(), myCheckFunction), {
  examples: [
    [0], // first example I want to test
    [Number.MAX_SAFE_INTEGER],
  ],
});

----------------------------------------

TITLE: Demonstrating YAML Parsing Space Handling Issues
DESCRIPTION: Illustrates issues with adding or removing spaces during YAML parsing and stringification, showing differences between the original and parsed-then-stringified content.

LANGUAGE: javascript
CODE:
YAML.parse(YAML.stringify([{ k: `!""""""""""""""""""""""""""#"\\ '` }]));
//=> [{k: `!""""""""""""""""""""""""""#"\\'`}]

----------------------------------------

TITLE: Providing Custom Examples in Fast-Check Single Parameter Properties
DESCRIPTION: Shows how to define specific test examples for a property with a single parameter in Fast-Check. These examples will be executed before the automatically generated values.

LANGUAGE: typescript
CODE:
// For a one parameter property
fc.assert(fc.property(fc.nat(), myCheckFunction), {
  examples: [
    [0], // first example I want to test
    [Number.MAX_SAFE_INTEGER],
  ],
});

----------------------------------------

TITLE: Using Timeout Option with Async Property in Fast-Check
DESCRIPTION: This snippet demonstrates how to apply a 1-second timeout to an asynchronous property test that extracts dependencies from a package registry. The timeout limits each individual execution of the predicate, and if exceeded, the test is reported as a failure. This only works with asynchronous properties.

LANGUAGE: typescript
CODE:
await fc.assert(
  fc.asyncProperty(packagesArb, fc.nat(), async (packages, selectedSeed) => {
    // Arrange
    const allPackagesNames = Array.from(packages.keys());
    const selectedPackage = allPackagesNames[allPackagesNames.length % selectedSeed];

    // Act
    const registry = new FakeRegistry(packages);
    const dependencies = await extractAllDependenciesFor(selectedPackage, registry);

    // Assert
    for (const dependency of dependencies) {
      expect(allPackagesNames).toContain(dependency.name);
    }
  }),
  { timeout: 1000 },
);

----------------------------------------

TITLE: Generating Query Parameters with fastcheck
DESCRIPTION: Generate query parameters (the optional part after ? in a URI) with the fc.webQueryParameters() arbitrary. Supports size parameter for controlling complexity.

LANGUAGE: javascript
CODE:
fc.webQueryParameters();
// Examples of generated values: "argumentsp", "zB)MCS9r*", "=gcJbW:1", "RmE9%F1%A6%BE%968y:2", "1=eJ@5ic1"…

----------------------------------------

TITLE: Demonstrating left-pad Inconsistent Unicode Handling
DESCRIPTION: Illustrates inconsistent treatment of Unicode characters outside the BMP (Basic Multilingual Plane) in the left-pad library, affecting string length calculations.

LANGUAGE: javascript
CODE:
leftPad('a\u{1f431}b', 4, 'x'); //=> 'a\u{1f431}b'  -- in: 3 code points, out: 3 code points
leftPad('abc', 4, '\u{1f431}'); //=> '\u{1f431}abc' -- in: 3 code points, out: 4 code points

----------------------------------------

TITLE: Generating Integer Comparison Functions with compareFunc in JavaScript
DESCRIPTION: Creates a comparison function that takes two parameters and returns an integer. Returns zero when inputs are equivalent, negative when first input is less than second, and positive when first input is greater than second. Uses hash values to determine comparison results.

LANGUAGE: javascript
CODE:
fc.compareFunc();
// Examples of generated values:
// • function(a, b) {
//     // With hash and stringify coming from fast-check
//     const cmp = (hA, hB) => hA - hB;
//     const hA = hash('-1057705109' + stringify(a)) % 2425734305;
//     const hB = hash('-1057705109' + stringify(b)) % 2425734305;
//     return cmp(hA, hB);
//   }
// • function(a, b) {
//     // With hash and stringify coming from fast-check
//     const cmp = (hA, hB) => hA - hB;
//     const hA = hash('-13' + stringify(a)) % 20;
//     const hB = hash('-13' + stringify(b)) % 20;
//     return cmp(hA, hB);
//   }
// • function(a, b) {
//     // With hash and stringify coming from fast-check
//     const cmp = (hA, hB) => hA - hB;
//     const hA = hash('2004846960' + stringify(a)) % 2464093828;
//     const hB = hash('2004846960' + stringify(b)) % 2464093828;
//     return cmp(hA, hB);
//   }
// • function(a, b) {
//     // With hash and stringify coming from fast-check
//     const cmp = (hA, hB) => hA - hB;
//     const hA = hash('1384924905' + stringify(a)) % 2242944706;
//     const hB = hash('1384924905' + stringify(b)) % 2242944706;
//     return cmp(hA, hB);
//   }
// • function(a, b) {
//     // With hash and stringify coming from fast-check
//     const cmp = (hA, hB) => hA - hB;
//     const hA = hash('-741474720' + stringify(a)) % 555135046;
//     const hB = hash('-741474720' + stringify(b)) % 555135046;
//     return cmp(hA, hB);
//   }
// • …

----------------------------------------

TITLE: Using the new fc.limitShrink function in TypeScript
DESCRIPTION: Example demonstrating the new fc.limitShrink function introduced in version 3.20.0. This function allows limiting the number of shrink values for a given arbitrary, providing more granular control over shrinking capabilities.

LANGUAGE: typescript
CODE:
fc.limitShrink(anyArbitrary, 4); // here we limit the shrinker of anyArbitrary to produce at most 4 values

----------------------------------------

TITLE: Migrating from .noBias to fc.noBias
DESCRIPTION: Demonstration of the change from the deprecated .noBias() method to the new standalone fc.noBias() function, which provides the same functionality in a more modular way.

LANGUAGE: diff
CODE:
--myArbitrary.noBias();
++fc.noBias(myArbitrary);

----------------------------------------

TITLE: Generating Domain Names with fastcheck
DESCRIPTION: Generate valid domain names with extensions according to RFC 1034, RFC 1123, and WHATWG URL Standard. Supports optional size parameter to control the length and complexity of generated domains.

LANGUAGE: javascript
CODE:
fc.domain();
// Examples of generated values: "6i1.ws", "p.s.snp", "r.sc", "gkamh0qv6l.krzi6l5r.nwr", "ewargum4.oe"…

fc.domain({ size: '-1' });
// Note: Generate smaller domain name compared to default. As default size is 'small' (if unchanged), it is equivalent to 'xsmall'
// Examples of generated values: "9.pi.ca", "hs3.gzh", "wa5.6.pr", "b.mle", "xwh.t3o.qfy"…

fc.domain({ size: '+1' });
// Note: Generate larger domain name compared to default. As default size is 'small' (if unchanged), it is equivalent to 'medium'
// Examples of generated values:
// • "9.p423dsmckvsr8zq9pz4g7m7d-er6s2isixposz852w-6ucuyt6dpd1xom5qw.m13i-0v7it7r-idhdv3r81ih0rkr21vcm03ckml1kinrycchs--xe.7r9699vi87mam0n2n1yiheo5m66b43olq60v4uq0nx2njzln8s9.kcan-6s50hi299hkxwogui-sr-qqag7qk77rp.7.oyydbar"
// • "hsqw8csm6fqkxx-m8bfki5x9ha3b1xwkcrb8434om2a6k.iggl02udkofh9ejc82r0n9d1j3iiebb03htjchbcm4.vrpz5ykhbgw9w70ngv5fibddr0.h4z59i4jgozqyweaiqmsnb1g-xyukd1p56b9rube6bygqql-bix8c1hhe9zl.jzh73innxd9by63zqpgapervfj2tfay9a1yzo1.yvyad"
// • "wa1rmog9vzegsnc0s08c9mw8xhtzi.lczv51ng2.qgrbojlaweyi0dssmu5ynrdo4m2rph-zrmmkmexuives2-33kbu8r5flthpuew1.0hvuvunrwxm46ep19q0g.91z9lzm0o3bk8khhqdfb32lloo.l0ul57f3i6ez24u47taregkn6c95mrx.drgcjivmedhkk"
// • "b.p3avihxjt2f0nz5gyxygckr4zni-1zbz.jnd6n4mvgwhur1.8xvmpgmb9e2lmo0kzqlr3tcqfntktx.9.4j.93gqwgsv-6xdg25i715sg7jul6xbwla.mcnlem"
// • "xwtcyt3pynja1mmoeot1l2x7ue82lbhjuddrogn5ubwjnua.macf28a2x600a9zg25z17rrqgohj89j0ik0cqg91jg4kvhd6-y6.i8syilcl23id4vjxrhyszp8o5ps5h.agm3iek7um94do2ijyt7b6diwqi1i2si-c5xwup.qtgn3lyouk4f7ft57780y7usr0kxox.g.vn"
// • …

----------------------------------------

TITLE: Demonstrating Jest's toEqual Asymmetric Behavior with Sets
DESCRIPTION: Illustrates a bug in Jest's toEqual matcher where equality checking is not symmetric when comparing Sets containing primitive booleans versus Boolean objects.

LANGUAGE: javascript
CODE:
const s1 = new Set([false, true]);
const s2 = new Set([new Boolean(true), new Boolean(true)]);

expect(s1).not.toEqual(s2); // success
expect(s2).not.toEqual(s1); // failure

----------------------------------------

TITLE: Scheduling Function Calls with Promises in TypeScript
DESCRIPTION: Advanced recipe for scheduling function calls that return Promises, allowing control over when the calls are executed in the test sequence.

LANGUAGE: typescript
CODE:
const scheduleCall = <T>(s: Scheduler, f: () => Promise<T>) => {
  s.schedule(Promise.resolve('Start the call')).then(() => f());
};

// Calling doStuff will be part of the task scheduled in s
scheduleCall(s, () => doStuff());

----------------------------------------

TITLE: Implementing Unicode Character Mapping in TypeScript
DESCRIPTION: Implementation of a Unicode character generator that maps around surrogate pairs to produce valid Unicode characters from the Basic Multilingual Plane (BMP).

LANGUAGE: typescript
CODE:
const gapSize = 0xdfff + 1 - 0xd800;
function unicodeMapper(v: number) {
  if (v < 0xd800) return v;
  return v + gapSize;
}
function unicode(): Arbitrary<string> {
  return integer({ min: 0, max: 0xffff - gapSize }).map((v) => String.fromCodePoint(unicodeMapper(v)));
}

function unicodeString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {
  return fc.string({ ...constraints, unit: unicode() });
}

----------------------------------------

TITLE: Generating Int16Array Values with fast-check
DESCRIPTION: Creates arbitrary Int16Array instances with configurable value ranges and length. Supports options for min/max values (default range -32768 to 32767), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.int16Array();
// Examples of generated values:
// • Int16Array.from([7570,-29355,-239,4473,-969,-5199])
// • Int16Array.from([])
// • Int16Array.from([4874,-12711])
// • Int16Array.from([-12441,-7244,32626,1550,-5002,20572,-9656,-29946,-5858])
// • Int16Array.from([-5805,-14007,18067,18421,-10176,-13877,-24415,29686,-26525])
// • …

fc.int16Array({ min: 0, minLength: 1 });
// Examples of generated values:
// • Int16Array.from([4007,21551,9085,2478,16634,3581,7304,29246,12872,23641,22492])
// • Int16Array.from([954,19772,29823,20600])
// • Int16Array.from([32767])
// • Int16Array.from([19919,1,14,19008,25737,3165,3])
// • Int16Array.from([24908,7,7,24039,1])
// • …

----------------------------------------

TITLE: Demonstrating Longest Common Substring Bug with Unicode in javascript-algorithms
DESCRIPTION: Shows improper handling of Unicode characters outside the BMP (Basic Multilingual Plane) in the longest common substring algorithm, causing incorrect substring identification.

LANGUAGE: javascript
CODE:
longestCommonSubstr('𐌵𐌵**ABC', '𐌵𐌵--ABC'); //=> "𐌵𐌵"
// expected to be "ABC"

----------------------------------------

TITLE: Alternative Approach Using waitAll for Scheduled Operations
DESCRIPTION: Demonstrates an alternative approach using waitAll instead of waitFor to wait for all scheduled operations. This approach requires that all promises are already scheduled when waitAll is called.

LANGUAGE: js
CODE:
const queued = queue(s.scheduleFunction(call));
queued(1).then((v) => seenAnswers.push(v));
queued(2).then((v) => seenAnswers.push(v));
await s.waitAll();

----------------------------------------

TITLE: Implementing Hexadecimal Character Arbitraries in Version 4
DESCRIPTION: Implementation of replacements for the removed hexa and hexaString arbitraries, using integer and custom mapping functions to generate hexadecimal characters.

LANGUAGE: typescript
CODE:
function hexa(): fc.Arbitrary<string> {
  const items = '0123456789abcdef';
  return fc.integer({ min: 0, max: 15 }).map((n) => items[n]);
}

function hexaString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {
  return fc.string({ ...constraints, unit: hexa() });
}

----------------------------------------

TITLE: Implementing Full Unicode Character Arbitraries in Version 4
DESCRIPTION: Implementation of replacements for the removed fullUnicode and fullUnicodeString arbitraries, using the string arbitrary with the 'binary' unit configuration.

LANGUAGE: typescript
CODE:
function fullUnicode(): fc.Arbitrary<string> {
  return fc.string({ unit: 'binary', minLength: 1, maxLength: 1 });
}

function fullUnicodeString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {
  return fc.string({ ...constraints, unit: 'binary' });
}

----------------------------------------

TITLE: Installing fast-check for Manual Jest Integration
DESCRIPTION: Command to install only the core fast-check library for manual integration with Jest without using the connector package.

LANGUAGE: bash
CODE:
npm install --save-dev fast-check

----------------------------------------

TITLE: Demonstrating Knutt Morris Pratt Implementation Bug in javascript-algorithms
DESCRIPTION: Shows a bug in the Knutt Morris Pratt algorithm implementation where empty string was not considered a substring of empty string, contrary to expected string matching behavior.

LANGUAGE: javascript
CODE:
knuthMorrisPratt('', ''); //=> -1
knuthMorrisPratt('a', 'a'); //=> 0

----------------------------------------

TITLE: Generating Uint8ClampedArray Values with fast-check
DESCRIPTION: Creates arbitrary Uint8ClampedArray instances with configurable value ranges and length. Supports options for min/max values (default range 0-255), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.uint8ClampedArray();
// Examples of generated values:
// • Uint8ClampedArray.from([111,195,177,66])
// • Uint8ClampedArray.from([122,171,50,200,198])
// • Uint8ClampedArray.from([118,94,97,138,117])
// • Uint8ClampedArray.from([53,190,83])
// • Uint8ClampedArray.from([121])
// • …

fc.uint8ClampedArray({ max: 42, minLength: 1 });
// Examples of generated values:
// • Uint8ClampedArray.from([1,0,26,2])
// • Uint8ClampedArray.from([18,2,27,0,37])
// • Uint8ClampedArray.from([29,1,33,5,40,40,14,10,15,22,39,11])
// • Uint8ClampedArray.from([1,14,26,2])
// • Uint8ClampedArray.from([0,5,4,0])
// • …

----------------------------------------

TITLE: Restricting UUID Versions in Version 4
DESCRIPTION: Shows how to restrict the UUID arbitrary to only generate versions 1-5, as v4 now includes versions 6-8 by default.

LANGUAGE: diff
CODE:
--fc.uuid();
++fc.uuid({ version: [1, 2, 3, 4, 5] });

----------------------------------------

TITLE: Supporting Shrinking with Mapped Arbitraries in Fast-Check
DESCRIPTION: Shows how to define unmapper functions for mapped arbitraries to support shrinking custom values. This example demonstrates splitting a string back into an array for proper shrinking.

LANGUAGE: javascript
CODE:
fc.assert(
  fc.property(
    fc.array(fc.string()).map(
      (arr) => arr.join(','),
      (raw) => {
        // unmapper is supposed to handle not supported values by throwing
        if (typeof raw !== 'string') throw new Error('Unsupported');
        // remaining is supported
        return raw.split(',');
      },
    ),
    myCheckFunction,
  ),
  {
    examples: [
      // the user definable corner case to reduce
      ['__,proto,__'],
    ],
  },
);

----------------------------------------

TITLE: Using Fast-Check with AVA Test Runner
DESCRIPTION: Example of property-based testing with AVA using the @fast-check/ava package, demonstrating a simple test for substring detection.

LANGUAGE: js
CODE:
import { testProp, fc } from '@fast-check/ava';

testProp('should detect the substring', [fc.string(), fc.string(), fc.string()], (t, a, b, c) => {
  t.true((a + b + c).includes(b));
});

----------------------------------------

TITLE: Testing Multiple Asynchronous Function Calls with JavaScript
DESCRIPTION: This code tests how multiple calls to the fireCall function are executed, showing that the naive implementation doesn't handle subsequent calls properly. The console logs demonstrate execution order problems with the second call.

LANGUAGE: javascript
CODE:
function runOne() {
  return new Promise((resolve) => {
    console.log('before fireCall');
    fireCall(async () => {
      console.log('call');
      resolve();
    });
    console.log('after fireCall');
  });
}
await runOne();
await runOne();

// Results:
// >  before fireCall
// >  call
// >  after fireCall
// >  before fireCall
// >  after fireCall
// >  call

----------------------------------------

TITLE: Running Deno tests from Command Line
DESCRIPTION: A simple bash command to execute Deno tests. This command runs all test files in the current directory and its subdirectories.

LANGUAGE: bash
CODE:
deno test

----------------------------------------

TITLE: Configuring Dictionary Arbitrary with Null Prototype Protection
DESCRIPTION: Example of configuring the dictionary arbitrary to ensure objects inherit from the usual Object prototype. In v4, dictionary may generate objects with null prototypes by default, requiring explicit configuration to maintain v3 behavior.

LANGUAGE: typescript
CODE:
fc.dictionary(fc.string(), fc.string(), {
  noNullPrototype: true,
  // other contraints (if any)...
});

----------------------------------------

TITLE: Generating IPv4 Addresses with fastcheck
DESCRIPTION: Generate valid IPv4 addresses using the fc.ipV4() arbitrary. This function creates random IP addresses in the standard dot notation format.

LANGUAGE: javascript
CODE:
fc.ipV4();
// Examples of generated values: "149.2.84.39", "255.251.100.5", "151.253.2.4", "93.3.251.97", "121.3.113.229"…

----------------------------------------

TITLE: Defining TypeSpec Models for Person, Address, and Car
DESCRIPTION: TypeSpec model definitions for a Person with related Address and Car models, showing constraint annotations and relationships between models.

LANGUAGE: tsp
CODE:
model Person {
  /** The person's first name. */
  firstName: string;

  /** The person's last name. */
  lastName: string;

  /** Age in years which must be equal to or greater than zero. */
  @minValue(0) age: int32;

  /** Person address */
  address: Address;

  /** List of nick names */
  nickNames?: string[];

  /** List of cars person owns */
  cars?: Car[];
}

/** Represents an address */
model Address {
  street: string;
  city: string;
  country: string;
}
model Car {
  /** Kind of car */
  kind: "ev" | "ice";

  /** Brand of the car */
  brand: string;

  /** Model of the car */
  `model`: string;
}

----------------------------------------

TITLE: Non-Synchronous Function Call Queueing Implementation in JavaScript
DESCRIPTION: This snippet demonstrates a simple implementation of asynchronous function queueing that doesn't execute calls synchronously. Instead, each call is queued and executed only after the previous one has resolved.

LANGUAGE: javascript
CODE:
let previous = Promise.resolve();
function fireCall(call) {
  previous = previous.then(() => call());
}

----------------------------------------

TITLE: Using sample Runner in TypeScript
DESCRIPTION: The sample runner extracts examples of values that would be generated by an arbitrary, which is useful when creating custom arbitraries.

LANGUAGE: typescript
CODE:
function sample<Ts>(generator: IRawProperty<Ts, boolean> | Arbitrary<Ts>, params?: number | Parameters<Ts>): Ts[];

----------------------------------------

TITLE: Custom Random Number Generator Usage in fastcheck
DESCRIPTION: This example shows how to pass a custom random number generator to fastcheck's assert function. In v3, these custom generators must implement the new API with 'clone', 'unsafeNext', and 'unsafeJump' methods as required by pure-rand.

LANGUAGE: typescript
CODE:
fc.assert(..., {randomType: (seed) => myRandomForSeed(seed)})

----------------------------------------

TITLE: Implementing assert using check in JavaScript
DESCRIPTION: Example showing how to implement the assert function using the check function. This demonstrates handling the output of check and throwing appropriate errors.

LANGUAGE: javascript
CODE:
function assert(property, params) {
  // In this example we only support synchronous properties.
  // To support both of them, you could use `property.isAsync()` and `asyncDefaultReportMessage`.
  const out = fc.check(property, params);
  if (out.failed) {
    throw new Error(fc.defaultReportMessage(out), { cause: out.errorInstance });
  }
}

----------------------------------------

TITLE: Providing Custom Examples in Fast-Check Multi-Parameter Properties
DESCRIPTION: Demonstrates how to define specific test examples for a property with multiple parameters in Fast-Check. Each example must provide values for all parameters.

LANGUAGE: typescript
CODE:
// For a multiple parameters property
fc.assert(fc.property(fc.string(), fc.string(), fc.string(), myCheckFunction), {
  examples: [
    // Manual case 1
    [
      'replace value coming from 1st fc.string',
      'replace value coming from 2nd fc.string',
      'replace value coming from 3rd fc.string',
    ],
  ],
});

----------------------------------------

TITLE: Implementing recursive dictionary with hardcoded depthIdentifier in JavaScript
DESCRIPTION: Creates a recursive dictionary structure using a hardcoded string as the depthIdentifier to limit recursion depth. This allows better control of how deep the structure can go by binding recursive levels together with the same identifier.

LANGUAGE: javascript
CODE:
const recursive2 = fc.letrec((tie) => ({
  self: fc.dictionary(
    fc.string(),
    fc.oneof({ depthIdentifier: 'id', maxDepth: 1 }, tie('leaf'), tie('self')),
    { depthIdentifier: 'id' }, // we bind the two recursive levels together by referencing the same depthIdentifier
  ),
  leaf: fc.nat(),
})).self;

----------------------------------------

TITLE: Basic Usage of fc.anything() in JavaScript
DESCRIPTION: Demonstrates the basic usage of fc.anything() to generate random entities without any configuration options. This generates a mix of objects, arrays, primitives, and null values.

LANGUAGE: javascript
CODE:
fc.anything();
// Examples of generated values:
// • {"iWE$U_3M":-1.1761153457907281e+64,"L8Yr[Em":false,"\":5S":false,"o*&t(b":"{e~\\gX0Ed","oZ":null,"1_0O9":"foL+as'","":[1.0463183151057806e-218,null,true,"`","/|iF"],"Y":"x\"","YP$;D_Cs":-2.406148264784688e+274,"c!lltdK:(_":"bD'arF"}
// • {"3O":[undefined,false,[true,-3.9051738307924134e-153,4.149228362205894e-119,false,false,true,false," D%}6m0",2.799370866495145e-203,-4.091042595321496e+221]],".J":[{"Og*S":"","I9?z([s":-1.1821534452382826e-198},1.7790896502987502e+276,true,-2.376179675473729e-295,true,true,undefined],"~MS":"key"}
// • "ref"
// • null
// • {"key":{},"MTvN8AE0gi":[3405288540635877,"P]z!2",true,-2.387521190971066e-60,null,-3698869638931618,";|s%~j+NA",-6.1815138747104425e-266,{}]}
// • …

----------------------------------------

TITLE: Generating Random-Length Arrays with Fast-Check
DESCRIPTION: Shows how to generate arrays containing values from an arbitrary generator with configurable parameters including minimum/maximum length and size controls. Includes examples with different configuration options.

LANGUAGE: javascript
CODE:
fc.array(fc.nat());
// Examples of generated values:
// • [1811605556]
// • [773390791,2091685325,1242440672]
// • []
// • [1782327935,900193957,2005682058,1190044745,1361174456,1816521832]
// • [2039519833,1820186979,1716322482,1252099479,313246778,1462590114,1981305846,1755169295]
// • …

fc.array(fc.nat(), { minLength: 3 });
// Examples of generated values:
// • [30,1812443734,26]
// • [536894957,149319825,1808423364,1511394264]
// • [1265639866,1672446215,356045957,1686054822,2086860087]
// • [2147483618,2147483620,1209289481]
// • [946187936,1504050852,144134225,2105232789,194205091,171397027,437743867,328587192,403202026,943599425,272125438]
// • …

fc.array(fc.nat(), { maxLength: 3 });
// Examples of generated values: [], [536894957], [1265639866,1672446215], [2147483618,2147483620], [1396071052,413181514,728831399]…

fc.array(fc.nat(), { minLength: 5, maxLength: 7 });
// Examples of generated values:
// • [2013730136,353952753,1490777806,634915573,1978586276]
// • [11,2147483643,1549284389,2,2085769824,1046376312]
// • [131262217,28,2008543832,464574638,2147483621]
// • [29,1410245876,741880759,944485652,27]
// • [1558059373,1486409544,138880328,1775525007,1289633061]
// • …

fc.array(fc.nat(), { maxLength: 50, size: 'max' });
// Note: By specifying size to "max", we enforce the fact that we want generated values to have between
// 0 and 50 items. In other words, we want to use the full range of specified lengths.
// Note: If not defined, by default, the size is "=" except if there is a maxLength provided and the
// global setting defaultSizeToMaxWhenMaxSpecified explicitely set to true. In such case it will
// automatically be defaulted to "max".
// Examples of generated values:
// • [2013730136,353952753,1490777806,634915573,1978586276,205766418,1175483977,32404726,52946578,1069691063,626810743,719356509,1263272304,1824194201,1899370697,1015020872,1705828766,1764355915]
// • [11,2147483643,1549284389,2,2085769824]
// • [131262217,28,2008543832,464574638]
// • [29,1410245876,741880759,944485652,27,15]
// • [1558059373,1486409544,138880328,1775525007,1289633061,2110277820,2132428886,243113350,370748226,1289875763,1926931276,777271555,200391383,382812004,767046802,1658449850,471365442,258979782,1763577358,875799138,1041944829,769854926,874760332,442170309,91717126,113325162,88812665,1097842037,804561500,1870859458,853896552,50228752,492015973]
// • …

fc.array(fc.nat(), { maxLength: 100000, size: '+1' });
// Note: From a specification point of view, the algorithm is supposed to handle up to 100,000 items.
// But, even if I want to test the algorithm on large entries I don't want to spend hours in it (it may
// not scale linearly...). By setting size to "+1" I tell fast-check that I want values larger than usual
// ones (~10x factor). If I wanted even larger ones I could have used "+2" (~100x factor), "+3" (~1000x factor)
// or "+4" (~10000x factor). On the opposite, if I wanted smaller arrays I could have used "-1" (~10x smaller)...
// Note: Size could also have been set explicitely to "=" to say: "I want the size used by default no matter the
// specified maxLength". If not defined, by default, the size is "=" except if there is a maxLength provided
// and the global setting defaultSizeToMaxWhenMaxSpecified explicitely set to true. In such case it will
// automatically be defaulted to "max".
// Examples of generated values:
// • [1499459057,110432617,339543317,591661354,869690762,903936065,24,2147483618,18,1350034659]
// • [1850529194,1877982582,756109358,26,5,10,28,933512138,3,2147483647,143549967,151486834]
// • [186214456,1304129127,236610033,1770333983,677229078,1874153157,647904631,2015875422,839334870,46102013,1303893735,1699495931,10156178,336616013,2094724689,1925510000,1437440576,355042345,2143594345,1734467233,1593448698,574044973,1111310760,76274244,1956358794,1928061897,1318184432,782455007,1247892810,249565393,857651507,1873602460,57966219,752962298,880822188,823737098,280536251,79820007,677389259,1771811403,734630420,1012881515,314976648,466444542,72628732,941152314,390898317,957018849,235229362,2043578224,1280394640,658661493,1592383816,1940643736,832534240,1299579948,954930320,205824052,1320157423,1943789311,2145245274,456558002,1177939177,472568424,90595308,390737624,1775798785,1141982866,1634207099,216091479]
// • [754990229,2147483617,2020328162,8653370]
// • [956688959,1282167266,1451864941]
// • …

fc.letrec((tie) => ({
  self: fc.record({
    value: fc.nat(),
    children: fc.oneof(
      { depthSize: 'small', depthIdentifier: 'id:self' },
      fc.constant([]),
      fc.array(tie('self'), { depthIdentifier: 'id:self' }),
    ),
  }),
})).self;
// Note: We define a recursive tree structure with children defaulting to the empty array with an higher probability
// as we go deeper (thanks to `fc.oneof`) and also as we tend to generate lots of items (thanks to `depthIdentifier`
// passed to `fc.array` and being the same value as the one passed to `fc.oneof`).
// Note: For the moment, `fc.array` cannot stop the recursion alone and need to be combined with `fc.oneof` or any other
// helper being able to fallback to base cases with an higher probability as we go deeper in the recursion.
// Examples of generated values:
// • {"value":424778306,"children":[]}
// • {__proto__:null,"value":27,"children":[{__proto__:null,"value":314632820,"children":[]},{__proto__:null,"value":2142687698,"children":[]},{__proto__:null,"value":1909847367,"children":[]},{"value":1255067999,"children":[]},{__proto__:null,"value":56407905,"children":[]},{"value":1877308594,"children":[]},{"value":853104761,"children":[]},{__proto__:null,"value":365629946,"children":[]},{"value":1657598129,"children":[]},{"value":110427542,"children":[]}]}
// • {__proto__:null,"value":7,"children":[]}
// • {"value":2147483619,"children":[]}
// • {__proto__:null,"value":15,"children":[{"value":1009275606,"children":[]},{__proto__:null,"value":1086795967,"children":[{"value":1715614519,"children":[]}]}]}
// • …

----------------------------------------

TITLE: Alternative Property Implementation Using Filter and Expect in fast-check
DESCRIPTION: Alternative implementation of the crop function test using .filter() to handle preconditions and expect() for assertions. It demonstrates using record() to group related arbitrary values.

LANGUAGE: javascript
CODE:
fc.property(
  fc
    .record({
      maxLength: fc.nat(),
      label: fc.string(),
    })
    .filter(({ maxLength, label }) => label.length <= maxLength),
  ({ maxLength, label }) => {
    expect(crop(label, maxLength)).toBe(label);
  },
);

----------------------------------------

TITLE: Generated Fast-Check Arbitraries from TypeSpec Models
DESCRIPTION: JavaScript code generated by typespec-fast-check, showing Fast-Check arbitraries for the Person, Address, and Car models with properly defined constraints and relationships.

LANGUAGE: js
CODE:
// Generated from TypeSpec using `typespec-fast-check`

import fc from 'fast-check';

export const Car = fc.record({
  /** Kind of car */
  kind: fc.constantFrom('ev', 'ice'),
  /** Brand of the car */
  brand: fc.string(),
  /** Model of the car */
  model: fc.string(),
});

/** Represents an address */
export const Address = fc.record({
  street: fc.string(),
  city: fc.string(),
  country: fc.string(),
});

export const Person = fc.record(
  {
    /** The person's first name. */
    firstName: fc.string(),
    /** The person's last name. */
    lastName: fc.string(),
    /** Age in years which must be equal to or greater than zero. */
    age: fc.nat(),
    /** Person address */
    address: Address,
    /** List of nick names */
    nickNames: fc.array(fc.string()),
    /** List of cars person owns */
    cars: fc.array(Car),
  },
  {
    requiredKeys: ['firstName', 'lastName', 'age', 'address'],
  },
);

----------------------------------------

TITLE: Adding Scheduler to Queue Function
DESCRIPTION: Demonstrates how to modify an asynchronous function call to use FastCheck's scheduler, which allows controlling the execution order for race condition testing.

LANGUAGE: js
CODE:
const queued = queue(s.scheduleFunction(call));

----------------------------------------

TITLE: Generating UUID Values with fc.uuid()
DESCRIPTION: Generates Universally Unique Identifier (UUID) values. This function can be called without parameters to generate UUIDs with versions 1-8, or with a version parameter to specify which UUID version(s) to generate.

LANGUAGE: javascript
CODE:
fc.uuid();
// Examples of generated values:
// • "4ebb3995-0009-1000-8b20-2254b7902e27"
// • "ffffffef-50fb-40b5-aa9f-05640000001d"
// • "87a8e397-ffec-8fff-8000-001a00000004"
// • "17983d5d-001b-1000-98d3-6afba08e1e61"
// • "7da15579-001d-1000-a6b3-4d71cf6e5de5"
// • …

----------------------------------------

TITLE: Generating Maximum Safe Integers with FastCheck
DESCRIPTION: Generate any possible integer within JavaScript's safe integer range using fc.maxSafeInteger(). The range spans from Number.MIN_SAFE_INTEGER (included) to Number.MAX_SAFE_INTEGER (included).

LANGUAGE: javascript
CODE:
fc.maxSafeInteger();
// Examples of generated values: 4, -6906426479593829, -9007199254740981, 1468597314308129, -31…

----------------------------------------

TITLE: Generating Maximum Safe Integers with FastCheck
DESCRIPTION: Generate any possible integer within JavaScript's safe integer range using fc.maxSafeInteger(). The range spans from Number.MIN_SAFE_INTEGER (included) to Number.MAX_SAFE_INTEGER (included).

LANGUAGE: javascript
CODE:
fc.maxSafeInteger();
// Examples of generated values: 4, -6906426479593829, -9007199254740981, 1468597314308129, -31…

----------------------------------------

TITLE: Generating Base64 Strings with fc.base64String()
DESCRIPTION: Creates valid base64 strings with a length that's always a multiple of 4, padded with '=' characters when needed. Supports configuration for minimum and maximum length constraints.

LANGUAGE: javascript
CODE:
fc.base64String();
// Examples of generated values: "", "J7B8AB/V89==", "3H9Pr5M=", "bv6z", "V/GSu73r"…

fc.base64String({ maxLength: 8 });
// Note: Any base64 string containing up to 8 (included) characters
// Examples of generated values: "f3A+nr==", "37/7", "", "wC9q", "BLop9YK="…

fc.base64String({ minLength: 8 });
// Note: Any base64 string containing at least 8 (included) characters
// Examples of generated values: "f3A+nrd9UefIFrD27/==", "7/7+S88//DE/6M9QPAFg", "9refalueODsnam==", "toString", "callerkeyC8="…

fc.base64String({ minLength: 4, maxLength: 12 });
// Note: Any base64 string containing between 4 (included) and 12 (included) characters
// Examples of generated values: "YQ7D/IU8fE+2", "tjhMHtq9", "property", "9lm8Vx7bBF==", "roto"…

----------------------------------------

TITLE: Statistics of Web Paths without Size Parameter
DESCRIPTION: Shows how the default webPath arbitrary in previous versions never produced paths starting with '//' when using default size. This code example demonstrates statistical analysis of the generated paths.

LANGUAGE: typescript
CODE:
fc.statistics(fc.webPath(), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });
// without //..100.00%

----------------------------------------

TITLE: Replacing Raw Asynchronous Calls with Scheduled Versions
DESCRIPTION: Shows how to replace a direct asynchronous queue call with a scheduled version using FastCheck's scheduler. This is a key pattern when integrating a scheduler into existing tests.

LANGUAGE: js
CODE:
const queued = queue(call);

----------------------------------------

TITLE: Generating Version-Specific UUID Values
DESCRIPTION: Generates UUID values of a specific version. This example shows generating version 4 UUIDs, which are randomly generated. The version parameter accepts a single version number to restrict generation to that specific UUID format.

LANGUAGE: javascript
CODE:
fc.uuid({ version: 4 });
// Examples of generated values:
// • "00000009-2401-464f-bd6c-b85100000018"
// • "ffffffea-ffe7-4fff-af56-be4ec6ccfa3c"
// • "00000013-6705-4bdd-bfe3-0669d6ee4e9a"
// • "ed7479b3-cef8-4562-bc9c-0b0d8b2be3ae"
// • "58dbd17a-7152-4770-8d89-9485fffffff6"
// • …

----------------------------------------

TITLE: Generating Extended IPv4 Addresses with fastcheck
DESCRIPTION: Generate extended IPv4 addresses including all formats supported by the WhatWG standard. This includes hexadecimal and octal representations like 0x6f.9.

LANGUAGE: javascript
CODE:
fc.ipV4Extended();
// Examples of generated values: "0x7.249.0xfe.0x79", "07.0x7b.1.0x6", "0xa5.0265.22.27", "0xd4.0xfd.15664", "0x1ed7207"…

----------------------------------------

TITLE: Generating URI Fragments with fastcheck
DESCRIPTION: Generate URI fragments (the optional part after # in a URI) with the fc.webFragments() arbitrary. Supports size parameter to control the complexity of the fragments.

LANGUAGE: javascript
CODE:
fc.webFragments();
// Examples of generated values: "", "kg%00au@b%08cg", "a", "?x%F1%80%9F%8Cti.k", "%F0%A1%85%AFR%F1%8F%B1%86rQ"…

----------------------------------------

TITLE: Implementing a Single Batch of Calls with Array in fastcheck
DESCRIPTION: Alternative implementation using an array of natural numbers instead of sequential integers. This approach provides more flexibility with input generation.

LANGUAGE: js
CODE:
// ids being the result of fc.array(fc.nat(), {minLength: 1})
const queued = queue(s.scheduleFunction(call));
for (const id of ids) {
  expectedAnswers.push(id);
  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));
}
await s.waitFor(Promise.all(pendingQueries));

----------------------------------------

TITLE: Extended Type Generation with fc.anything()
DESCRIPTION: Shows how to enable generation of additional data types like BigInt, boxed values, Date objects, Map, Set, typed arrays and other complex structures by configuring the appropriate options.

LANGUAGE: javascript
CODE:
fc.anything({
  withBigInt: true,
  withBoxedValues: true,
  withDate: true,
  withMap: true,
  withNullPrototype: true,
  withObjectString: true,
  withSet: true,
  withTypedArray: true,
  withSparseArray: true,
  withUnicodeString: true,
});
// Examples of generated values:
// • {}
// • Float32Array.from([])
// • "񝾎򹬲񗑉󖑪"
// • [,,,,,,,,,,,,"𧴘񕠬򺀇򼗤򡎴򞪞󥻸򰮤򐑑",,"𰭜󈟛򐠛񣘮񺠢􏍎𕾴𐺫񪎯񢔆",,-5.3675543270540993e-284,[new Number(1657701218649805)],,[new Date("+220046-10-23T23:52:55.336Z"),new Number(2.1773262360012777e-144)],null,,new Boolean(false),,,undefined]
// • [,,,false,new Number(-1.599410877348038e+79),,43191232019149202439704040983801711618185659722841871029570904665841503300146n,,,,,undefined,-464687703824889,,,,,,,,,,,new String("򵠣󈱷󘠦񱵴"),,,,false,-1.2182093470461338e-165]
// • …

----------------------------------------

TITLE: FastCheck Test Failure Output
DESCRIPTION: Example of a FastCheck test failure output showing the counterexample that caused the test to fail, along with seed information for reproducibility.

LANGUAGE: txt
CODE:
**FAIL**  sort.test.mjs > should sort numeric elements from the smallest to the largest one
Error: Property failed after 1 tests
{ seed: -1819918769, path: "0:...:3", endOnFailure: true }
Counterexample: [[2,1000000000]]
Shrunk 66 time(s)
Got error: AssertionError: expected 1000000000 to be less than or equal to 2

----------------------------------------

TITLE: Setting CommonJS as Default Package Type
DESCRIPTION: Package.json configuration to declare the package as CommonJS format, making .js files interpreted as CommonJS modules by default.

LANGUAGE: json
CODE:
{
  "type": "commonjs"
}

----------------------------------------

TITLE: Scheduled Asynchronous Call Queueing with Promise Chaining in JavaScript
DESCRIPTION: Alternative implementation using the scheduler API to trigger queries asynchronously. This approach schedules each call with a resolved promise, adds the ID to expected answers only when the call is about to be fired, and then collects the result.

LANGUAGE: javascript
CODE:
for (let id = 0; id !== numCalls; ++id) {
  pendingQueries.push(
    s
      .schedule(Promise.resolve(`Fire the call for ${id}`))
      .then(() => {
        expectedAnswers.push(id);
        return queued(id);
      })
      .then((v) => seenAnswers.push(v)),
  );
}

----------------------------------------

TITLE: Generating Double-Precision Floating Point Values with FastCheck
DESCRIPTION: Generate double-precision floating point values using fc.double(). Supports configurable ranges, exclusion of bounds, and options to exclude NaN, infinity values, or integers. Provides a wider range than fc.float().

LANGUAGE: javascript
CODE:
fc.double();
// Note: All possible floating point values (including -∞, +∞ and NaN but also -0)
// Examples of generated values: 6.978211330273434e+123, 2.6272140589206812e-53, 947075901019127, -1.3737004055555409e-182, -4.4e-323…

fc.double({ min: 0 });
// Note: All possible positive floating point values (including +∞ and NaN)
// Examples of generated values: 8.762813623312512e-262, 5.0929130565593696e-226, 1.3411163978818024e+222, 8845029414547763, 8.4e-323…

fc.double({ noDefaultInfinity: true, noNaN: true });
// Note: All possible finite floating point values
// Examples of generated values: -3.0862366688503372e+144, -1.7384136409372626e-212, 1.7976931348623153e+308, 2.5e-323, -1.1800479468035008e+224…

fc.double({ noDefaultInfinity: true, min: Number.NEGATIVE_INTEGER, max: Number.POSITIVE_INTEGER });
// Note: Same as fc.double(), noDefaultInfinity just tells that defaults for min and max
// should not be set to -∞ and +∞. It does not forbid the user to explicitely set them to -∞ and +∞.
// Examples of generated values: 7.593633990222606e-236, -5.74664305820822e+216, -1.243100551492039e-161, 1.7976931348623143e+308, -1.7976931348623157e+308…

fc.double({ min: 0, max: 1, maxExcluded: true });
// Note: All possible floating point values between 0 (included) and 1 (excluded)
// Examples of generated values: 4.801635255684817e-73, 4.882602580683884e-55, 0.9999999999999998, 0.9999999999999991, 2.5e-323…

fc.double({ noInteger: true });
// Note: All possible floating point values but no integer
// Examples of generated values: 9.4e-323, 4503599627370491.5, -1.8524776326185756e-119, 2.5e-323, -5e-323…

fc.noBias(
  fc
    .tuple(fc.integer({ min: 0, max: (1 << 26) - 1 }), fc.integer({ min: 0, max: (1 << 27) - 1 }))
    .map((v) => (v[0] * Math.pow(2, 27) + v[1]) * Math.pow(2, -53)),
);
// Note: `fc.double` does not uniformly distribute the generated values in the requested range.
// If you really want a uniform distribution of 64-bit floating point numbers in range 0 (included)
// and 1 (excluded), you may want to use the arbitrary defined right above.
// Examples of generated values: 0.5424979085274226, 0.8984809917404123, 0.577376440989232, 0.8433714130130558, 0.48219857913738606…

----------------------------------------

TITLE: Configuring Object Keys with fc.anything()
DESCRIPTION: Shows how to customize the keys used in generated objects by providing a specific arbitrary for keys. In this example, only 'a', 'b', and 'c' will be used as property names.

LANGUAGE: javascript
CODE:
fc.anything({
  key: fc.constantFrom('a', 'b', 'c'),
});
// Note: Generated objects will come with keys in ['a', 'b', 'c']
// Examples of generated values:
// • [true,true,null,-5.6688453874368936e+48,false,2014694191684145,"LV$%~%",undefined,"_`qj6\"kX[",""]
// • {"b":{"c":6997371217031069,"b":8609382555061735,"a":5.120009133889531e-261}}
// • ""
// • "Y}q^/9i*"
// • 3467734424335213
// • …

----------------------------------------

TITLE: Defining a Model Type for List Testing
DESCRIPTION: A simplified model representing the state of the List class being tested. The model only tracks the size of the list as a number property.

LANGUAGE: typescript
CODE:
type Model = { num: number };

----------------------------------------

TITLE: Configuring Per-Test Settings in Fast-Check
DESCRIPTION: Example showing how to configure individual settings for each test using the optional parameters argument in fc.assert. Each test is configured with the same numRuns setting, demonstrating the redundancy that can be optimized.

LANGUAGE: javascript
CODE:
test('test #1', () => {
  fc.assert(myProp1, { numRuns: 10 });
});
test('test #2', () => {
  fc.assert(myProp2, { numRuns: 10 });
});
test('test #3', () => {
  fc.assert(myProp3, { numRuns: 10 });
});

----------------------------------------

TITLE: Generating Int8Array Values with fast-check
DESCRIPTION: Creates arbitrary Int8Array instances with configurable value ranges and length. Supports options for min/max values, minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.int8Array();
// Examples of generated values:
// • Int8Array.from([122,3,-124])
// • Int8Array.from([75,-49,-14])
// • Int8Array.from([-125])
// • Int8Array.from([-38,57,44,43])
// • Int8Array.from([-5,3,-122,-7,-59,-122])
// • …

fc.int8Array({ min: 0, minLength: 1 });
// Examples of generated values:
// • Int8Array.from([94,100,90,3,30,8,19,78])
// • Int8Array.from([1,123,4,3,0,48,125,86,2,91])
// • Int8Array.from([5,58])
// • Int8Array.from([126,5,100,127,123])
// • Int8Array.from([97,6,121])
// • …

----------------------------------------

TITLE: Advanced @fast-check/jest usage with custom parameters and variants
DESCRIPTION: Demonstrates advanced features of @fast-check/jest including custom parameters, test skipping, and using it.prop. Shows how to specify a seed for reproducible tests and use different jest variants.

LANGUAGE: javascript
CODE:
import { it, test, fc } from '@fast-check/jest';

// With custom `fc.Parameters`, here { seed: 4242 }
test.prop([fc.nat(), fc.nat()], { seed: 4242 })('should replay the test for the seed 4242', (a, b) => {
  return a + b === b + a;
});

// With .skip
test.skip.prop([fc.string()])('should be skipped', (text) => {
  return text.length === [...text].length;
});

// With it version
describe('with it', () => {
  it.prop([fc.nat(), fc.nat()])('should run too', (a, b) => {
    return a + b === b + a;
  });
});

----------------------------------------

TITLE: Controlling Object Nesting Level in fastcheck
DESCRIPTION: Shows how to set maxDepth to 1 to allow for one level of nested objects. This creates objects that can contain other objects as values, but those nested objects cannot contain further nested structures.

LANGUAGE: javascript
CODE:
fc.object({
  maxDepth: 1,
});

----------------------------------------

TITLE: Generating Int8Array Values with fast-check
DESCRIPTION: Creates arbitrary Int8Array instances with configurable value ranges and length. Supports options for min/max values, minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.int8Array();
// Examples of generated values:
// • Int8Array.from([122,3,-124])
// • Int8Array.from([75,-49,-14])
// • Int8Array.from([-125])
// • Int8Array.from([-38,57,44,43])
// • Int8Array.from([-5,3,-122,-7,-59,-122])
// • …

fc.int8Array({ min: 0, minLength: 1 });
// Examples of generated values:
// • Int8Array.from([94,100,90,3,30,8,19,78])
// • Int8Array.from([1,123,4,3,0,48,125,86,2,91])
// • Int8Array.from([5,58])
// • Int8Array.from([126,5,100,127,123])
// • Int8Array.from([97,6,121])
// • …

----------------------------------------

TITLE: Testing Import Performance: Standard Import in Jest
DESCRIPTION: A Jest test case demonstrating the current recommended import method for fast-check, requiring the entire library. This test takes approximately 0.67 seconds to execute, showing the performance cost of the full import.

LANGUAGE: javascript
CODE:
const fc = require('fast-check');
test('empty test in spec file with recommended import for fast-check', () => {
  fc; // no-op, just doing so to avoid bundlers from ignoring the import
});
// spec file execution took ~0.67s (4 runs: 0.677, 0.656, 0.7, 0.656)

----------------------------------------

TITLE: Using subarray() in Fast-Check for Ordered Subarray Generation in JavaScript
DESCRIPTION: The subarray() function generates values corresponding to possible sub-arrays of an original array, maintaining the original order. It supports options for minimum and maximum length constraints of the generated subarrays.

LANGUAGE: javascript
CODE:
fc.subarray([1, 42, 48, 69, 75, 92]);
// Examples of generated values: [], [1,48,69,75,92], [48], [1,42,75], [1,48,75,92]…

fc.subarray([1, 42, 48, 69, 75, 92], { minLength: 5 });
// Examples of generated values: [1,42,48,69,75], [1,42,48,69,92], [1,42,48,75,92], [42,48,69,75,92], [1,42,69,75,92]…

fc.subarray([1, 42, 48, 69, 75, 92], { maxLength: 5 });
// Examples of generated values: [48,75], [1], [], [48,92], [69,75]…

fc.subarray([1, 42, 48, 69, 75, 92], { minLength: 2, maxLength: 3 });
// Examples of generated values: [48,75], [48,69,92], [42,75], [69,92], [1,42]…

----------------------------------------

TITLE: Simplified Property-Based Testing with fc.gen()
DESCRIPTION: Shows how to use fc.gen() to incorporate property-based testing into conventional tests. This approach allows generating random values from arbitraries directly within test predicates, with important caveats about deterministic order and function stability.

LANGUAGE: javascript
CODE:
fc.gen();
// The produced value is a function able to generate random values from arbitraries within the tests themselves.
//
// It takes from 1 to N parameters:
// - the first parameter is a function able to return an arbitrary — ⚠️ this function must be a static function and not be recreated from one run to another
// - and its parameters as second, third...
//
// It can be called as follow:
// - g(fc.nat) — building a random value during the predicate using the arbitrary fc.nat()
// - g(fc.nat, {max: 10}) — same but using fc.nat({max: 10})
//
// ⚠️ But DO NOT USE: g(() => fc.nat({max: 10})).
// In the case right above, neither the builder of arbitrary nor the arbitrary itself are stable references. It would make shrinking impossible.
// If you do need to create a dedicated builder, define it outside of `fc.assert` and use it in your predicate as `g(myBuilder, ...parametersForMyBuilder)`.

----------------------------------------

TITLE: Limiting Object Depth in fastcheck
DESCRIPTION: Demonstrates setting maxDepth to 0 to generate flat objects without nested structures. This creates objects containing only primitive values with no nested objects or arrays.

LANGUAGE: javascript
CODE:
fc.object({
  maxDepth: 0,
});

----------------------------------------

TITLE: Generating Uint32Array Values with fast-check
DESCRIPTION: Creates arbitrary Uint32Array instances with configurable value ranges and length. Supports options for min/max values (default range 0 to 0xffffffff), minimum and maximum length, and size control for value generation.

LANGUAGE: javascript
CODE:
fc.uint32Array();
// Examples of generated values:
// • Uint32Array.from([3829422059,2425734304,2138206756])
// • Uint32Array.from([19,1046862664])
// • Uint32Array.from([3669232337,2464093827,3748932991,1057761988,4236064175,4122041182,1618733983,882909472])
// • Uint32Array.from([269035825,2242944705,2375219908])
// • Uint32Array.from([755444117,555135045,2658796072,3505820369,3087063619])
// • …

fc.uint32Array({ max: 42, minLength: 1 });
// Examples of generated values:
// • Uint32Array.from([40,10,16,0,0,41])
// • Uint32Array.from([22,28])
// • Uint32Array.from([24])
// • Uint32Array.from([38])
// • Uint32Array.from([1])
// • …

----------------------------------------

TITLE: Generating Integer Values with FastCheck
DESCRIPTION: Generate any possible integer in a specified range using fc.integer(). Both the lower and upper bounds are included in the set of possible values. Default range is from -2147483648 to 2147483647.

LANGUAGE: javascript
CODE:
fc.integer();
// Note: All possible integers between `-2147483648` (included) and `2147483647` (included)
// Examples of generated values: -1064811759, -2147483638, 2032841726, 930965475, -1…

fc.integer({ min: -99, max: 99 });
// Note: All possible integers between `-99` (included) and `99` (included)
// Examples of generated values: 33, -94, 5, -2, 97…

fc.integer({ min: 65536 });
// Note: All possible integers between `65536` (included) and `2147483647` (included)
// Examples of generated values: 487771549, 1460850457, 1601368274, 1623935346, 65541…

----------------------------------------

TITLE: Generating Web Paths with fastcheck
DESCRIPTION: Generate web paths following RFC 3986 and WHATWG URL Standard. The size parameter allows control over the length and complexity of the generated paths.

LANGUAGE: javascript
CODE:
fc.webPath();
// Examples of generated values: "/X/x///1/j//6/@/", "", "/B/~", "/'//"%F4%87%81%B9/B/~/e//P//", "/HzDG-&&)E"…

fc.webPath({ size: '+1' });
// Examples of generated values:
// • "/%F1%B7%93%81h&kpL/%F3%96%AA%BFeLb6of/4%F3%B3%80%85%F2%B2%94%B4(t02U/S6y/u_M24BC_%F1%B0%A2%A6t//0bR0co%E2%BD%BB"
// • "/Fxamq,9/%F1%BE%A9%95t=P6-LPgL"
// • "/P.=*%F2%97%A8%93~0i%F2%9A%AC%83/4Rwg0&nSQ/W/Y/+lr!w-kJL/wOq)Xw0KZ"
// • "/@H%F4%8A%91%BFZR:%F2%BA%A7%96O4/%F3%98%90%B8y%F1%B6%96%83+uv%F2%9F%B0%BFf/+/.F%F0%B1%89%88aE%F1%88%A7%BA/~/"
// • "/Bubfb"
// • …

----------------------------------------

TITLE: Generating Integer Values with FastCheck
DESCRIPTION: Generate any possible integer in a specified range using fc.integer(). Both the lower and upper bounds are included in the set of possible values. Default range is from -2147483648 to 2147483647.

LANGUAGE: javascript
CODE:
fc.integer();
// Note: All possible integers between `-2147483648` (included) and `2147483647` (included)
// Examples of generated values: -1064811759, -2147483638, 2032841726, 930965475, -1…

fc.integer({ min: -99, max: 99 });
// Note: All possible integers between `-99` (included) and `99` (included)
// Examples of generated values: 33, -94, 5, -2, 97…

fc.integer({ min: 65536 });
// Note: All possible integers between `65536` (included) and `2147483647` (included)
// Examples of generated values: 487771549, 1460850457, 1601368274, 1623935346, 65541…

----------------------------------------

TITLE: sparseArray with Element Count Constraints in JavaScript
DESCRIPTION: Creates sparse arrays with natural numbers, limited to a maximum length of 20 and containing between 1 and 3 actual elements. This controls both the density and total size of the array.

LANGUAGE: javascript
CODE:
fc.sparseArray(fc.nat(), { maxLength: 20, minNumElements: 1, maxNumElements: 3 });

----------------------------------------

TITLE: Converting jsverify Arbitraries to Fast-check with jsverify-to-fast-check
DESCRIPTION: Demonstrates how to use the jsverify-to-fast-check migration utility to convert existing jsverify arbitraries into fast-check arbitraries, making transition between libraries easier.

LANGUAGE: javascript
CODE:
import { jsc2fc } from 'jsverify-to-fast-check';
import * as jsc from 'jsverify';
import * as fc from 'fast-check';

// Here is an old arbitrary you prefer not to migrate for the moment
const jscArbitrary = jsc.bless({
  generator: jsc.generator.bless(() => {
    switch (jsc.random(0, 2)) {
      case 0:
        return 'foo';
      case 1:
        return 'bar';
      case 2:
        return 'quux';
    }
  }),
});

// It can easily converted into an arbitrary for fast-check using jsc2fc
const fcArbitrary = jsc2fc(jscArbitrary);

----------------------------------------

TITLE: Loading Dependencies with AMD in Browser
DESCRIPTION: Example of Asynchronous Module Definition (AMD) syntax used in browsers for loading dependencies before ES Modules.

LANGUAGE: javascript
CODE:
requirejs(['dep1', 'dep2'], function (dep1, dep2) {
  // This function is called when dep1.js and dep2.js
  // and their dependencies are loaded.
});

----------------------------------------

TITLE: Improved Shrinking with Context Validation in TypeScript
DESCRIPTION: An enhanced implementation that checks if the string arbitrary can shrink the value before attempting to do so. This version handles cases where values might not be valid inputs for the string arbitrary's shrink method.

LANGUAGE: typescript
CODE:
const strArb = fc.string({ minLength: 1 });

class FakerFirstNameBuilder extends fc.Arbitrary<string> {
  // generate() {...}
  // canShrinkWithoutContext() {...}
  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {
    if (context !== undefined || strArb.canShrinkWithoutContext(value)) {
      return strArb.shrink(value, context);
    }
    return fc.Stream.nil();
  }
}

----------------------------------------

TITLE: Creating Multiple Identical Values with fc.clone in JavaScript
DESCRIPTION: Generates tuples containing multiple instances of the same value. Each instance is independent, so they might not be strictly equal in terms of reference.

LANGUAGE: javascript
CODE:
fc.clone(fc.nat(), 2);
// Examples of generated values: [1395148595,1395148595], [7,7], [1743838935,1743838935], [879259091,879259091], [2147483640,2147483640]…

fc.clone(fc.nat(), 3);
// Examples of generated values:
// • [163289042,163289042,163289042]
// • [287842615,287842615,287842615]
// • [1845341787,1845341787,1845341787]
// • [1127181441,1127181441,1127181441]
// • [5,5,5]
// • …

----------------------------------------

TITLE: Using uniqueArray with Custom Comparator Function
DESCRIPTION: Implements a custom comparison function that considers values equal if their absolute values are the same. This causes 1 and -1 to be treated as duplicates, as well as 0 and -0.

LANGUAGE: javascript
CODE:
fc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN), { comparator: (a, b) => Math.abs(a) === Math.abs(b) });

----------------------------------------

TITLE: Generating BigInt64Array with Fast-Check
DESCRIPTION: The bigInt64Array generator creates BigInt64Array instances containing BigInt values. It supports configuration of minimum and maximum values as well as array length constraints.

LANGUAGE: javascript
CODE:
fc.bigInt64Array();
// Examples of generated values:
// • BigInt64Array.from([7780786618611046569n])
// • BigInt64Array.from([3321688158611740109n,5336242056478727470n,-620335768501958405n])
// • BigInt64Array.from([])
// • BigInt64Array.from([7655040194619891365n,-609033188233272247n,-3377172262367663000n,-6575651731349736555n,-194007844161260784n,2956209257781779103n])
// • BigInt64Array.from([-463701052756207261n,7371548932979131799n,-7877987368304813406n,8509643815846265359n,-6285842279948105755n,-7977810195168624590n,-8632461560578801824n,-764227837462381748n])
// • …
fc.bigInt64Array({ min: 0n, minLength: 1 });
// Examples of generated values:
// • BigInt64Array.from([5794385668286753317n,9223372036854775800n])
// • BigInt64Array.from([7250361649856044302n,4310753745190106570n,5393690158673113485n,6842387272625948355n,4514914117086513826n,4933290198875114684n,4355527851938090954n,5722670493121068189n,7946781874214666176n,5681273141705345352n,3400318954538433694n,9140895324085985125n])
// • BigInt64Array.from([7017002079469492577n,8064792390940992730n,5210011569993732916n,7871654509320106441n,5389875796080866293n,842396779505087393n,3513990769024304909n,7624709996764891089n,8471604102740905558n,2981767532172910000n,2216100277924575184n,3375835224553658028n])
// • BigInt64Array.from([1n,6n,10n])
// • BigInt64Array.from([2317294315139044277n,2480040720574581119n,7841528177112379523n])
// • …

----------------------------------------

TITLE: Basic Shrinking Implementation for FakerFirstNameBuilder in TypeScript
DESCRIPTION: A simple implementation of the shrink method for FakerFirstNameBuilder that delegates shrinking to fast-check's string arbitrary. This basic approach assumes any first name can be shrunk by the string arbitrary.

LANGUAGE: typescript
CODE:
const strArb = fc.string({ minLength: 1 });

class FakerFirstNameBuilder extends fc.Arbitrary<string> {
  // generate() {...}
  // canShrinkWithoutContext() {...}
  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {
    return strArb.shrink(value, context);
  }
}

----------------------------------------

TITLE: Defining Asynchronous Property in fast-check
DESCRIPTION: Syntax for defining asynchronous properties using asyncProperty() with arbitraries and an async predicate function. This allows testing asynchronous code in property-based tests.

LANGUAGE: javascript
CODE:
fc.asyncProperty(...arbitraries, async (...args) => {});

----------------------------------------

TITLE: Using uniqueArray with SameValueZero Comparator
DESCRIPTION: Uses the SameValueZero comparison algorithm which treats -0 and 0 as the same value, and considers NaN equal to itself. This is similar to how Set and Map comparisons work.

LANGUAGE: javascript
CODE:
fc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN), { comparator: 'SameValueZero' });

----------------------------------------

TITLE: Waiting for Scheduled Operations with waitFor
DESCRIPTION: Shows how to wait for scheduled operations to complete using the waitFor method with Promise.all. This approach collects pending queries and waits until all promises are resolved.

LANGUAGE: js
CODE:
const queued = queue(s.scheduleFunction(call));
pendingQueries.push(queued(1).then((v) => seenAnswers.push(v)));
pendingQueries.push(queued(2).then((v) => seenAnswers.push(v)));
await s.waitFor(Promise.all(pendingQueries));

----------------------------------------

TITLE: React Warning Message for Missing Act Wrapper
DESCRIPTION: An example of the warning message displayed when React state updates are not properly wrapped in act() during testing. This message indicates that code causing React state updates should be wrapped in act() to ensure testing behavior matches browser behavior.

LANGUAGE: txt
CODE:
Warning: An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act

----------------------------------------

TITLE: Deprecated Arbitrary.prototype.noBias method in TypeScript
DESCRIPTION: Example of the deprecated Arbitrary.prototype.noBias method that should no longer be used starting from version 3.20.0. This method was used to disable biased generation for arbitraries.

LANGUAGE: typescript
CODE:
anyArbitrary.noBias();

----------------------------------------

TITLE: Using scheduleSequence with React Components
DESCRIPTION: Example demonstrating how to use scheduleSequence to test a React component with different user IDs in a specified order, ensuring operations complete sequentially.

LANGUAGE: jsx
CODE:
// Let suppose:
// - s: Scheduler

const initialUserId = '001';
const otherUserId1 = '002';
const otherUserId2 = '003';

// render profile for user {initialUserId}
// Note: api calls to get back details for one user are also scheduled
const { rerender } = render(<UserProfilePage userId={initialUserId} />);

s.scheduleSequence([
  async () => rerender(<UserProfilePage userId={otherUserId1} />),
  async () => rerender(<UserProfilePage userId={otherUserId2} />),
]);

await s.waitAll();
// expect to see profile for user otherUserId2

----------------------------------------

TITLE: Using uniqueArray with Custom Selector Function
DESCRIPTION: Generates an array of unique records where the uniqueness is determined by the 'id' field. The selector function extracts the id property for comparison, ensuring no two entries have the same id.

LANGUAGE: javascript
CODE:
fc.uniqueArray(
  fc.record({
    id: fc.nat(),
    name: fc.constantFrom('Anna', 'Paul'),
  }),
  { selector: (entry) => entry.id },
);

----------------------------------------

TITLE: Advanced Faker Integration with Simplified First Name Example
DESCRIPTION: A simplified version of the advanced integration that focuses specifically on generating first names. This example is part of the discussion on adding shrinking capabilities to the Faker integration.

LANGUAGE: typescript
CODE:
class FakerFirstNameBuilder extends fc.Arbitrary<string> {
  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<string> {
    const randomizer = { next: () => mrng.nextDouble(), seed: () => {} };
    const customFaker = new Faker({ locale: base, randomizer });
    return new fc.Value(customFaker.person.firstName(), undefined);
  }
  canShrinkWithoutContext(value: unknown): value is string {
    return false;
  }
  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {
    return fc.Stream.nil();
  }
}

----------------------------------------

TITLE: Statistics of Web Paths in Version 3.18.0
DESCRIPTION: Shows how in version 3.18.0, the default webPath arbitrary can now produce paths starting with '//' without requiring size parameter adjustments. Demonstrates the improved statistical distribution.

LANGUAGE: typescript
CODE:
fc.statistics(fc.webPath(), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });
// without //..79.75%
// with //.....20.25%

----------------------------------------

TITLE: Manipulating Character Case with mixedCase in Fast-Check
DESCRIPTION: The mixedCase function generates strings with randomly toggled character cases based on an underlying string arbitrary. It allows custom case toggling logic and supports proper shrinking through the untoggleAll option.

LANGUAGE: javascript
CODE:
fc.mixedCase(fc.array(fc.constantFrom('a', 'b', 'c')).map((cs) => cs.join('')));
// Examples of generated values: "cAcCcCCC", "", "CBCbCAbA", "AAcaABab", "Cc"…

LANGUAGE: javascript
CODE:
fc.mixedCase(fc.constant('hello world'));
// Examples of generated values: "HEllO wOrLd", "hElLo WoRLD", "hELlo woRlD", "helLO WOrLd", "HEllo wOrld"…

LANGUAGE: javascript
CODE:
fc.mixedCase(fc.constant('hello world'), {
  toggleCase: (rawChar) => `UP(${rawChar})`,
  // untoggleAll is optional, we use it in this example to show how to use all the options together
  untoggleAll: (toggledString) => toggleString.replace(/UP\((.)\/g, '$1'),
});
// Examples of generated values:
// • "UP(h)elUP(l)o UP(w)UP(o)rUP(l)UP(d)"
// • "UP(h)eUP(l)UP(l)UP(o) UP(w)oUP(r)UP(l)UP(d)"
// • "UP(h)UP(e)lUP(l)UP(o)UP( )UP(w)UP(o)UP(r)ld"
// • "UP(h)elUP(l)oUP( )UP(w)orUP(l)UP(d)"
// • "helUP(l)o UP(w)orlUP(d)"
// • …

LANGUAGE: javascript
CODE:
fc.mixedCase(fc.constant('🐱🐢🐱🐢🐱🐢'), {
  toggleCase: (rawChar) => (rawChar === '🐱' ? '🐯' : '🐇'),
});
// Examples of generated values: "🐯🐇🐱🐢🐯🐢", "🐱🐇🐱🐇🐯🐇", "🐱🐢🐯🐢🐱🐢", "🐱🐢🐱🐇🐯🐢", "🐱🐢🐯🐢🐱🐇"…

----------------------------------------

TITLE: Scheduling Native JavaScript Timers with Jest
DESCRIPTION: Implements a custom act function that handles native JavaScript timers (setTimeout, setInterval) within the scheduler. This utility works with Jest's fake timers to ensure timer callbacks are properly scheduled and executed in order during testing.

LANGUAGE: typescript
CODE:
// You should call: `jest.useFakeTimers()` at the beginning of your test

// The function below automatically schedules tasks for pending timers.
// It detects any timer added when tasks get resolved by the scheduler (via the act pattern).

// Instead of calling `await s.waitFor(p)`, you can call `await s.waitFor(p, buildWrapWithTimersAct(s))`.
// Instead of calling `await s.waitAll()`, you can call `await s.waitAll(buildWrapWithTimersAct(s))`.

function buildWrapWithTimersAct(s: fc.Scheduler) {
  let timersAlreadyScheduled = false;

  function scheduleTimersIfNeeded() {
    if (timersAlreadyScheduled || jest.getTimerCount() === 0) {
      return;
    }
    timersAlreadyScheduled = true;
    s.schedule(Promise.resolve('advance timers')).then(() => {
      timersAlreadyScheduled = false;
      jest.advanceTimersToNextTimer();
      scheduleTimersIfNeeded();
    });
  }

  return async function wrapWithTimersAct(f: () => Promise<unknown>) {
    try {
      await f();
    } finally {
      scheduleTimersIfNeeded();
    }
  };
}

----------------------------------------

TITLE: Configuring Web Crawler Access and Sitemap for Fast-Check Website in robots.txt
DESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire fast-check.dev website without restrictions and specifies the location of the site's XML sitemap. The empty 'Disallow:' directive indicates no paths are restricted from crawling.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

Sitemap: https://fast-check.dev/sitemap.xml

----------------------------------------

TITLE: Statistics of Web Paths with Increased Size Parameter
DESCRIPTION: Demonstrates how increasing the size parameter in previous versions allowed the generation of paths starting with '//'. This shows the statistical distribution when using the '+1' size option.

LANGUAGE: typescript
CODE:
fc.statistics(fc.webPath({ size: '+1' }), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });
// without //..92.67%
// with //......7.33%

----------------------------------------

TITLE: Naive Implementation of Synchronous First Call in JavaScript
DESCRIPTION: This implementation attempts to make the first call execute synchronously while queuing subsequent calls. It handles the first call differently than follow-up calls but still has issues with subsequent calls.

LANGUAGE: javascript
CODE:
let previous = undefined;
function fireCall(call) {
  if (previous === undefined) {
    previous = call();
  } else {
    previous = previous.then(() => call());
  }
}

----------------------------------------

TITLE: Building Recursive Tree Structures using fc.memo in JavaScript
DESCRIPTION: This example demonstrates how to create and use a recursive tree structure using the `fc.memo` function. It defines tree nodes with left and right branches and leaf nodes with natural numbers, limiting the maximum depth to control recursion.

LANGUAGE: javascript
CODE:
// Setup the tree structure:
const tree = fc.memo((n) => fc.oneof(leaf(), node(n)));
const node = fc.memo((n) => {
  if (n <= 1) return fc.record({ left: leaf(), right: leaf() });
  return fc.record({ left: tree(), right: tree() }); // tree() is equivalent to tree(n-1)
});
const leaf = fc.nat;
// Use the arbitrary:
tree(2);
// Note: Only produce trees having a maximal depth of 2
// Examples of generated values:
// • 24
// • {"left":{__proto__:null,"left":1696460155,"right":2147483646},"right":135938859}
// • 9
// • {"left":27,"right":{"left":2147483633,"right":2147483631}}
// • {"left":29,"right":{"left":2,"right":367441398}}
// • …

----------------------------------------

TITLE: Migrating from stringOf to string with unit parameter
DESCRIPTION: Example of replacing the deprecated stringOf function with the more flexible string function that accepts a unit parameter for character generation control.

LANGUAGE: diff
CODE:
-fc.stringOf(fc.constantFrom('Hello', 'World'));
+fc.string({ unit: fc.constantFrom('Hello', 'World') });

----------------------------------------

TITLE: Filtering Integer Values from Double Arbitrary (Previous Method)
DESCRIPTION: Shows the previous approach to filtering out integer values from double arbitrary before version 3.18.0. This uses the filter method to exclude integer values based on Number.isInteger check.

LANGUAGE: typescript
CODE:
fc.double().filter((value) => !Number.isInteger(value)); // Before version 3.18.0

----------------------------------------

TITLE: Using check Runner in TypeScript
DESCRIPTION: The check runner is similar to assert but returns a RunDetails object instead of throwing. This gives the caller more control over handling test results.

LANGUAGE: typescript
CODE:
function check<Ts>(property: IProperty<Ts>, params?: Parameters<Ts>): RunDetails<Ts>;
function check<Ts>(property: IAsyncProperty<Ts>, params?: Parameters<Ts>): Promise<RunDetails<Ts>>;

----------------------------------------

TITLE: Analyzing Size Distribution of N-ary Trees with fc.statistics in JavaScript
DESCRIPTION: Demonstrates generating and analyzing arbitrary-branching tree structures using fc.letrec and oneof. The example uses fc.statistics to measure the size distribution of trees where each node can have any number of children, showing how different settings affect the structure sizes.

LANGUAGE: javascript
CODE:
fc.statistics(
  fc.letrec((tie) => ({
    node: fc.record({
      value: fc.nat(),
      children: fc.oneof(
        { depthIdentifier: 'node' },
        fc.constant([]),
        fc.array(tie('node'), { depthIdentifier: 'node' }),
      ),
    }),
  })).node,
  (v) => {
    function size(n) {
      if (n === null) return 0;
      else return 1 + n.children.reduce((acc, child) => acc + size(child), 0);
    }
    const s = size(v);
    let lower = 1;
    const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);
    while (next(lower) <= s) {
      lower = next(lower);
    }
    return `${lower} to ${next(lower) - 1} items`;
  },
);
// Computed statistics for 10k generated values:
// For size = "xsmall":
// • 1 to 4 items..100.00%
// For size = "small":
// • 1 to 4 items....60.16%
// • 10 to 49 items..23.99%
// • 5 to 9 items....15.83%
// • 50 to 99 items...0.02%
// For size = "medium":
// • 1 to 4 items......51.31%
// • 50 to 99 items....26.41%
// • 10 to 49 items....16.16%
// • 100 to 499 items...5.93%
// • 5 to 9 items.......0.14%

----------------------------------------

TITLE: Implementing ASCII and ASCII String Arbitraries in Version 4
DESCRIPTION: Implementation of replacement functions for the removed ascii and asciiString arbitraries, using the new unified string arbitrary with the 'binary-ascii' unit configuration.

LANGUAGE: typescript
CODE:
function ascii(): fc.Arbitrary<string> {
  return fc.string({ unit: 'binary-ascii', minLength: 1, maxLength: 1 });
}

function asciiString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {
  return fc.string({ ...constraints, unit: 'binary-ascii' });
}

----------------------------------------

TITLE: Rendering Interactive Testing Playground Component
DESCRIPTION: Renders the interactive playground component where users can test and identify bugs in the sleigh packing algorithm using fast-check.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Using fc.pre as an Assertion Function in TypeScript
DESCRIPTION: An example showing how fc.pre now properly acts as an assertion function in TypeScript 3.16.0, refining types automatically after the assertion without requiring additional type assertions. This eliminates the need for 'as' or '!' operators after using fc.pre.

LANGUAGE: typescript
CODE:
// entries: {value: T}
const match = entries.find((e) => e.value === needle);
fc.pre(match !== undefined);
// ✅ Now (≥3.16.0): match: {value: T}
// ❌ Previous (<3.16.0): match: {value: T} | undefined

----------------------------------------

TITLE: Default Failure Report Format in FastCheck (txt)
DESCRIPTION: Example of the default failure report format shown when a property-based test fails in FastCheck, displaying the test name, failure information, counterexample, and shrinking details.

LANGUAGE: txt
CODE:
**FAIL**  sort.test.mjs > should sort numeric elements from the smallest to the largest one
Error: Property failed after 1 tests
{ seed: -1819918769, path: "0:...:3", endOnFailure: true }
Counterexample: [[2,1000000000]]
Shrunk 66 time(s)
Got error: AssertionError: expected 1000000000 to be less than or equal to 2

----------------------------------------

TITLE: Analyzing Size Distribution of Binary Trees with fc.statistics in JavaScript
DESCRIPTION: Shows how to use fc.statistics to analyze the size distribution of generated binary tree structures. The example implements a size function to count nodes and categorizes trees into size ranges, showing the impact of different FastCheck size settings on generated structures.

LANGUAGE: javascript
CODE:
fc.statistics(
  fc.letrec((tie) => ({
    node: fc.record({
      value: fc.nat(),
      left: fc.option(tie('node')),
      right: fc.option(tie('node')),
    }),
  })).node,
  (v) => {
    function size(n) {
      if (n === null) return 0;
      else return 1 + size(n.left) + size(n.right);
    }
    const s = size(v);
    let lower = 1;
    const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);
    while (next(lower) <= s) {
      lower = next(lower);
    }
    return `${lower} to ${next(lower) - 1} items`;
  },
);
// Computed statistics for 10k generated values:
// For size = "xsmall":
// • 5 to 9 items....42.99%
// • 10 to 49 items..39.82%
// • 1 to 4 items....17.19%
// For size = "small":
// • 10 to 49 items..85.95%
// • 5 to 9 items.....5.35%
// • 1 to 4 items.....4.35%
// • 50 to 99 items...4.35%
// For size = "medium":
// • 100 to 499 items..83.03%
// • 50 to 99 items....10.05%
// • 1 to 4 items.......3.78%
// • 10 to 49 items.....2.93%
// • 5 to 9 items.......0.14%

----------------------------------------

TITLE: Configuring Record Arbitrary with Null Prototype Protection
DESCRIPTION: Example of configuring the record arbitrary to ensure all generated objects have the usual Object prototype, which became optional in v4.

LANGUAGE: typescript
CODE:
fc.record(recordModel, {
  noNullPrototype: true,
  // other contraints (if any)...
});

----------------------------------------

TITLE: Fully Optimized Base32 Decoding Function in TypeScript
DESCRIPTION: The final optimized implementation that computes powers incrementally as it iterates, eliminating redundant Math.pow calls and further improving performance. This version reached 2,198,923 ops/sec, a significant improvement over the original implementation.

LANGUAGE: typescript
CODE:
let sum = 0;
for (let index = 0, base = 1; index !== normalizedBase32str.length; ++index, base *= 32) {
  const char = normalizedBase32str[normalizedBase32str.length - index - 1];
  const symbol = decodeSymbolLookupTable[char];
  sum += symbol * base;
}
return sum;

----------------------------------------

TITLE: Customizing Object Serialization with toStringMethod in FastCheck (TypeScript)
DESCRIPTION: Demonstrates how to define a custom string representation for objects in FastCheck using the toStringMethod property, which is used to properly report complex objects in test results.

LANGUAGE: ts
CODE:
Object.defineProperties(myInstanceWithoutCustomToString, {
  [fc.toStringMethod]: { value: () => 'my-value' },
});
// here your instance defines a custom serializer
// that will be used by fast-check whenever needed

----------------------------------------

TITLE: Creating Binary Trees with Controlled Depth in JavaScript using fc.letrec
DESCRIPTION: Shows how to create a binary tree structure with optional left and right child nodes. The example uses the maxDepth parameter to control recursion depth and demonstrates using depthIdentifier to share depth constraints between branches.

LANGUAGE: javascript
CODE:
fc.letrec((tie) => ({
  node: fc.record({
    value: fc.nat(),
    left: fc.option(tie('node'), { maxDepth: 1, depthIdentifier: 'tree' }),
    right: fc.option(tie('node'), { maxDepth: 1, depthIdentifier: 'tree' }),
  }),
})).node;
// Note: You can limit the depth of the generated structrures by using the constraint `maxDepth` (see `option` and `oneof`).
//   On the example above we need to specify `depthIdentifier` to share the depth between left and right branches...
// Examples of generated values:
// • {__proto__:null,"value":2147483632,"left":{__proto__:null,"value":1485877161,"left":null,"right":null},"right":{__proto__:null,"value":685791529,"left":null,"right":null}}
// • {__proto__:null,"value":1056088736,"left":null,"right":{__proto__:null,"value":2147483623,"left":null,"right":null}}
// • {"value":1227733267,"left":{"value":21,"left":null,"right":null},"right":{"value":2147483644,"left":null,"right":null}}
// • {"value":17,"left":null,"right":{"value":12,"left":null,"right":null}}
// • {"value":17,"left":{__proto__:null,"value":12,"left":null,"right":null},"right":{__proto__:null,"value":591157184,"left":null,"right":null}}
// • …

----------------------------------------

TITLE: FastCheck Seed and Path Information
DESCRIPTION: The seed and path information provided by FastCheck for reproducing a test failure, essential for debugging purposes.

LANGUAGE: js
CODE:
{ seed: -1819918769, path: "0:...:3", endOnFailure: true }

----------------------------------------

TITLE: Rendering Interactive Testing Components for Email Validation Challenge
DESCRIPTION: JSX code that renders the interactive playground component for testing the email validation regex, a form for submitting answers, and a comments section from Bluesky.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

LANGUAGE: jsx
CODE:
<FormOfTheDay />

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3ldifkvx77k2n" />

----------------------------------------

TITLE: Intermediate For-Loop Base32 Decoding in TypeScript
DESCRIPTION: An improved implementation that eliminates array allocations by using a for-loop instead of split and map operations. This version improved performance from 677,844 ops/sec to 809,730, but still had redundant power calculations.

LANGUAGE: typescript
CODE:
let sum = 0;
for (let index = 0; index !== normalizedBase32str.length; ++index) {
  const char = normalizedBase32str[index];
  const symbol = decodeSymbolLookupTable[char];
  sum += symbol * Math.pow(32, normalizedBase32str.length - 1 - i);
}
return sum;

----------------------------------------

TITLE: FastCheck Assertion Error Message
DESCRIPTION: The specific assertion error that occurred during test execution, indicating the expectation that failed.

LANGUAGE: txt
CODE:
AssertionError: expected 1000000000 to be less than or equal to 2

----------------------------------------

TITLE: Importing and Using DocCardList Component in MDX
DESCRIPTION: This snippet imports the DocCardList component from the theme and renders it in the MDX file. DocCardList likely displays a list of documentation cards related to combiners.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Simplified Property-Based Testing with fc.gen in JavaScript
DESCRIPTION: A streamlined approach using fast-check's 'gen' feature which simplifies property-based testing. This method maintains the benefits of property-based testing while making the code more readable and similar to regular tests.

LANGUAGE: javascript
CODE:
test('sort users by ascending age', () => {
  fc.assert(
    fc.property(fc.gen(), (g) => {
      const userA = {
        firstName: g(firstName),
        lastName: g(lastName),
        birthDate: g(birthDate),
      };
      const userB = {
        firstName: g(firstName),
        lastName: g(lastName),
        birthDate: g(birthDate, { strictlyOlderThan: userA.birthDate }),
      };
      expect(sortByAge([userA, userB])).toEqual([userA, userB]);
      expect(sortByAge([userB, userA])).toEqual([userA, userB]);
    }),
  );
});

----------------------------------------

TITLE: Array Join Operation for String Concatenation in TypeScript
DESCRIPTION: Original implementation using array join to concatenate computed string values. This approach creates unnecessary array allocations and is less performant than direct string concatenation.

LANGUAGE: typescript
CODE:
return [compute(a), compute(b), compute(c)].join('');

----------------------------------------

TITLE: Basic Property Test Example in TypeScript
DESCRIPTION: A simple property test that verifies a string is always a substring of itself when concatenated with other strings. This example demonstrates the basic usage pattern with the testProp function and arbitraries.

LANGUAGE: typescript
CODE:
import { testProp, fc } from '@fast-check/ava';

// for all a, b, c strings
// b is a substring of a + b + c
testProp('should detect the substring', [fc.string(), fc.string(), fc.string()], (t, a, b, c) => {
  t.true((a + b + c).includes(b));
});

----------------------------------------

TITLE: ESM Directory Package.json Configuration
DESCRIPTION: Nested package.json configuration used in the ESM directory to override the parent's CommonJS type and declare files in this directory as ES Modules.

LANGUAGE: json
CODE:
{
  "type": "module"
}

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components used for the interactive testing playground and submission form for the day's challenge about email validation.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Original String Padding Implementation with Array Allocation in TypeScript
DESCRIPTION: The original implementation of the string padding function that relies on creating and filling an array, which causes unnecessary memory allocations. This version was less efficient, especially when padding strings to a fixed length.

LANGUAGE: typescript
CODE:
function pad(value: string, constLength: number) {
  return (
    Array(constLength - value.length)
      .fill('0')
      .join('') + value
  );
}

----------------------------------------

TITLE: Using AVA Modifiers with fast-check Tests
DESCRIPTION: Demonstration of AVA's test modifiers such as .skip with fast-check property tests. The example includes a test with a specific seed for reproducibility and a skipped test.

LANGUAGE: typescript
CODE:
import { testProp, fc } from '@fast-check/ava';

testProp(
  'should replay the test for the seed 4242',
  [fc.nat(), fc.nat()],
  (t, a, b) => {
    t.is(a + b, b + a);
  },
  { seed: 4242 },
);

testProp.skip('should be skipped', [fc.string()], (t, text) => {
  t.is([...text].length, text.length);
});

----------------------------------------

TITLE: Using shuffledSubarray() in Fast-Check for Randomized Subarray Generation in JavaScript
DESCRIPTION: The shuffledSubarray() function generates values corresponding to possible sub-arrays of an original array with randomly ordered elements. It supports options for minimum and maximum length constraints of the generated subarrays.

LANGUAGE: javascript
CODE:
fc.shuffledSubarray([1, 42, 48, 69, 75, 92]);
// Examples of generated values: [69,92], [92,69,42,75], [48,69,92,75,42,1], [1,42], [75]…

fc.shuffledSubarray([1, 42, 48, 69, 75, 92], { minLength: 5 });
// Examples of generated values: [48,1,92,69,75,42], [42,1,92,75,69], [69,75,92,48,1], [92,42,48,75,69], [1,69,75,92,42]…

fc.shuffledSubarray([1, 42, 48, 69, 75, 92], { maxLength: 5 });
// Examples of generated values: [48,1,92], [], [75,1,69,92], [42], [75,1,69,48,42]…

fc.shuffledSubarray([1, 42, 48, 69, 75, 92], { minLength: 2, maxLength: 3 });
// Examples of generated values: [1,92], [92,75], [1,48], [42,75], [48,69]…

----------------------------------------

TITLE: Root Package.json for Dual CJS/ESM Support
DESCRIPTION: Complete package.json configuration for supporting both CommonJS and ES Modules, using the exports field to define conditional entry points based on module type.

LANGUAGE: json
CODE:
{
  "type": "commonjs",
  "main": "lib/fast-check.js",
  "module": "lib/esm/fast-check.js",
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "require": {
        "types": "./lib/fast-check.d.ts",
        "default": "./lib/fast-check.js"
      },
      "import": {
        "types": "./lib/esm/fast-check.d.ts",
        "default": "./lib/esm/fast-check.js"
      }
    }
  },
  "types": "lib/fast-check.d.ts"
}

----------------------------------------

TITLE: Using the new ULID arbitrary in fast-check
DESCRIPTION: Demonstrates how to use the newly introduced 'ulid' arbitrary function to generate ULID (Universally Unique Lexicographically Sortable Identifier) strings, with examples of possible output values.

LANGUAGE: javascript
CODE:
fc.ulid();
// Examples of generated values:
// • "7AVDFZJAXCM0F25E3SZZZZZZYZ"
// • "7ZZZZZZZYP5XN60H51ZZZZZZZP"
// • "2VXXEMQ2HWRSNWMP9PZZZZZZZA"
// • "15RQ23H1M8YB80EVPD2EG8W7K1"
// • "6QV4RKC7C8ZZZZZZZFSF7PWQF5"
// • …

----------------------------------------

TITLE: Customizing Test Execution Context with TypeScript
DESCRIPTION: Example of customizing the test execution context in @fast-check/ava using TypeScript typing. This allows for type-safe context access in property tests.

LANGUAGE: typescript
CODE:
import { fc, testProp as anyTestProp, PropertyTestInterface } from '@fast-check/ava';

type TestContext = {
  state: string;
};

const testProp = anyTestProp as PropertyTestInterface<TestContext>;

testProp('should reach terminal state', [fc.string()], (t, received) => {
  // here t is typed as ExecutionContext<TestContext>
  console.log(t.context.state); // logs 'uninitialized'
  // ... omitted for brevity
});

----------------------------------------

TITLE: Detecting Race Conditions with Controlled Scheduling in JavaScript
DESCRIPTION: A test demonstrating how @fast-check/vitest can detect race conditions by using a scheduler to control the timing and order of promise resolutions, ensuring functions execute in the expected sequence.

LANGUAGE: javascript
CODE:
test('queued calls are resolved in proper order', async ({ g }) => {
  // Arrange
  const s = g(fc.scheduler);
  const sourceFun = (v) => Promise.resolve(v);
  const queuedFun = queue(s.scheduleFunction(sourceFun));

  // Act
  const onSuccess = vi.fn();
  const p1 = queuedFun(1).then(onSuccess);
  const p2 = queuedFun(2).then(onSuccess);
  const p3 = queuedFun(3).then(onSuccess);
  await s.waitFor(Promise.all([p1, p2, p3]));

  // Assert
  expect(onSuccess).toHaveBeenNthCalledWith(1, 1);
  expect(onSuccess).toHaveBeenNthCalledWith(2, 2);
  expect(onSuccess).toHaveBeenNthCalledWith(3, 3);
});

----------------------------------------

TITLE: Package Configuration for Multi-Target Distribution
DESCRIPTION: Example of a package.json configuration for targeting different environments including Node.js, bundlers, and browsers.

LANGUAGE: json
CODE:
{
  "main": "lib/target-for-node.js",
  "module": "lib/target-for-bundler.js",
  "browser": "lib/target-for-browser.js"
}

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports the AdventPlaygroundOfTheDay and FormOfTheDay React components which are used to provide the interactive testing interface for the day's challenge.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Testing React Promise State with fast-check Scheduler
DESCRIPTION: Updated test example using fast-check's scheduler for race condition detection in React code. The test demonstrates how to specify act wrappers at the task definition level, providing granular control over how promises are scheduled and resolved.

LANGUAGE: javascript
CODE:
test('should update to the value of the last promise', async () => {
  await fc.assert(
    fc.asyncProperty(fc.scheduler(), async (s) => {
      const promise1 = s.schedule(Promise.resolve(1), undefined, undefined, act);
      const promise2 = s.schedule(Promise.resolve(2), undefined, undefined, act);

      const { result, rerender } = renderHook((p) => usePromiseAsState(p), {
        initialProps: promise1,
      });
      rerender(promise2);
      expect(result.current).toBe(undefined);

      await s.waitAll();
      expect(result.current).toBe(2);
    }),
  );
});

----------------------------------------

TITLE: Implementing Fast-Check Global Settings in Vitest
DESCRIPTION: Example of the Vitest setup file that configures Fast-Check global settings using ES modules import syntax. This file applies settings consistently across all tests.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';
fc.configureGlobal({ numRuns: 10 });

----------------------------------------

TITLE: Integrating Faker with @fast-check/vitest for Realistic Random Data
DESCRIPTION: Example showing how to integrate Faker library with @fast-check/vitest's controlled randomness, allowing for realistic test data generation without sacrificing reproducibility.

LANGUAGE: typescript
CODE:
import { Faker, base } from '@faker-js/faker';

test('the name of your test', ({ g }) => {
  const faker = new Faker({
    locale: base,
    randomizer: {
      next: () => g(fc.nat, { max: 0xffffffff }) / 0x100000000,
      seed: () => {},
    },
  });
  // Your test...
});

----------------------------------------

TITLE: Creating Minified Browser Bundle for Fast-Check
DESCRIPTION: Command to generate a minified browser-compatible bundle of Fast-Check using Browserify and Terser for improved performance.

LANGUAGE: bash
CODE:
npx -p browserify -p terser -c "browserify node_modules/fast-check/lib/fast-check.js --s fastcheck | terser -c -m > node_modules/fast-check/lib/bundle.js"

----------------------------------------

TITLE: Using grapheme unit with string arbitrary in fast-check
DESCRIPTION: Example of using the new 'grapheme' unit constraint with the string arbitrary to generate strings composed of graphemes (visual entities) rather than just ASCII characters.

LANGUAGE: typescript
CODE:
fc.string({ unit: 'grapheme' });

----------------------------------------

TITLE: Generating Test Data with @effect/schema Integration in TypeScript
DESCRIPTION: Demonstrates how to generate random values that conform to an Effect Schema. The example creates a Person schema with validation rules, then uses it to generate arbitraries for property-based testing with fast-check.

LANGUAGE: typescript
CODE:
import * as Arbitrary from '@effect/schema/Arbitrary';
import * as S from '@effect/schema/Schema';
import * as fc from 'fast-check';

const Person = S.struct({
  name: S.string,
  age: S.string.pipe(S.compose(S.NumberFromString), S.int()),
});
const isPerson = S.is(Person);
const personArbitrary = Arbitrary.make(Person)(fc);

test('Only generating valid Person', () => {
  fc.assert(
    fc.property(personArbitrary, (person) => {
      expect(isPerson(person)).toBe(true);
    }),
  );
});

----------------------------------------

TITLE: Rendering Interactive Components for PBT Challenge in React
DESCRIPTION: Renders three React components: the interactive playground for testing the compression algorithm, a form for submitting answers, and a component to display comments from Bluesky.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

## Your answer

<FormOfTheDay />

## Comments

<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3ldawlb3pe223" />

----------------------------------------

TITLE: Using Fast-Check with Browser via Skypack CDN
DESCRIPTION: Example of importing Fast-Check in a browser environment using an ESM-compatible CDN (Skypack) as an alternative to the removed browser bundle.

LANGUAGE: html
CODE:
<script type="module">
  import fc from 'https://cdn.skypack.dev/fast-check';
  // code...
</script>

----------------------------------------

TITLE: Rendering Form Component for User Answers
DESCRIPTION: JSX component that renders a form allowing users to submit their answers to the property-based testing challenge.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Implementing Worker-Based Property Testing with fast-check
DESCRIPTION: Example demonstrating how to use @fast-check/worker to run property tests in dedicated worker threads. The code shows how to define properties that can safely test code that might cause infinite loops by using worker isolation with configurable timeouts.

LANGUAGE: javascript
CODE:
import { test } from '@jest/globals';
import fc from 'fast-check';
import { isMainThread } from 'node:worker_threads';
import { assert, propertyFor } from '@fast-check/worker';

const property = propertyFor(new URL(import.meta.url)); // or propertyFor(pathToFileURL(__filename)) in commonjs
const p1 = property(fc.nat(), fc.nat(), (start, end) => {
  // starting a possibly infinite loop
  for (let i = start; i !== end; ++i) {
    // doing stuff...
  }
});

if (isMainThread) {
  test('should assess p1', async () => {
    await assert(p1, { timeout: 1000 });
  });
}

----------------------------------------

TITLE: Updating Record Arbitrary Configuration for Version 4
DESCRIPTION: Shows how to migrate from the deprecated withDeletedKeys flag to the new requiredKeys parameter in the record arbitrary. Also demonstrates setting noNullPrototype to maintain consistent object prototypes.

LANGUAGE: diff
CODE:
fc.record(recordModel, {
-  withDeletedKeys: true,
+  requiredKeys: [],
});
fc.record(recordModel, {
-  withDeletedKeys: false,
});

----------------------------------------

TITLE: JSX Component for Answer Submission Form
DESCRIPTION: A React component that renders a form for submitting answers to the day's challenge. This allows participants to provide their solution after testing the routing algorithm.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Installing Fast-Check 2.0.0 with Package Managers
DESCRIPTION: Commands to upgrade Fast-Check to version 2.0.0 using either Yarn or npm package managers.

LANGUAGE: bash
CODE:
# For yarn users
yarn add fast-check@^2.0.0 --dev
# For npm users
npm install fast-check@2.0.0 --save-dev

----------------------------------------

TITLE: Advanced Property Testing Configuration with Vitest
DESCRIPTION: Advanced usage of property-based testing with custom parameters like seeds and using various test modifiers such as .only, .skip, .todo, and .concurrent. Shows compatibility with both test and it syntaxes.

LANGUAGE: javascript
CODE:
import { it, test, fc } from '@fast-check/vitest';

test.prop([fc.nat(), fc.nat()], { seed: 4242 })('should replay the test for the seed 4242', (a, b) => {
  return a + b === b + a;
});

test.skip.prop([fc.string()])('should be skipped', (text) => {
  return text.length === [...text].length;
});

describe('with it', () => {
  it.prop([fc.nat(), fc.nat()])('should run too', (a, b) => {
    return a + b === b + a;
  });
});

----------------------------------------

TITLE: Implementing Base64 Character Arbitrary in Version 4
DESCRIPTION: Implementation of a replacement for the removed base64 arbitrary using constantFrom to generate base64 characters.

LANGUAGE: typescript
CODE:
function base64(): fc.Arbitrary<string> {
  return fc.constantFrom(...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/');
}

// We preserved fc.base64String() as it goes further than just a simple string of base64 characters.

----------------------------------------

TITLE: JSX Component for Interactive Testing Playground
DESCRIPTION: A React component that renders the interactive playground for testing the routing algorithm. This allows users to write and execute their fast-check tests against the implementation.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Migrating Miscellaneous Arbitrary Signatures in FastCheck
DESCRIPTION: Examples of updating various arbitrary function signatures including commands, option, json, lorem, and numeric types from positional parameters to object-based configuration.

LANGUAGE: javascript
CODE:
commands(commandArbs, maxCommands) ➜ commands(commandArbs, maxCommands)
option(arb, freq) ➜ option(arb, {freq})
json(maxDepth) ➜ json({maxDepth})
unicodeJson(maxDepth) ➜ unicodeJson({maxDepth})
lorem(maxWordsCount) ➜ lorem({maxWordsCount})
lorem(maxWordsCount, sentencesMode) ➜ lorem({maxWordsCount, mode})
double(max) ➜ double({max})
double(min, max) ➜ double({min, max})
float(max) ➜ float({max})
float(min, max) ➜ float({min, max})
integer(max) ➜ integer({max})
integer(min, max) ➜ integer({min, max})

----------------------------------------

TITLE: Rendering Form Component for Challenge Answers
DESCRIPTION: Renders a form component where users can submit their answers to the property-based testing challenge after finding issues with the elves' implementation.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Installing @fast-check/vitest with npm
DESCRIPTION: Installation command for adding @fast-check/vitest to a project's development dependencies. Note that vitest is required as a peer dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @fast-check/vitest

----------------------------------------

TITLE: Implementing Character Arbitrary in Version 4
DESCRIPTION: Implementation of a replacement for the removed char arbitrary using the new unified string arbitrary with the 'grapheme-ascii' unit configuration.

LANGUAGE: typescript
CODE:
function char(): fc.Arbitrary<string> {
  return fc.string({ unit: 'grapheme-ascii', minLength: 1, maxLength: 1 });
}

// We preserved fc.string().

----------------------------------------

TITLE: Rendering Interactive Components for Advent of PBT Challenge
DESCRIPTION: Renders the interactive playground component for testing the algorithm and the form component for submitting answers to the day's challenge.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Migrating Subarray Arbitrary Signatures in FastCheck
DESCRIPTION: Examples of updating subarray-related arbitrary function signatures from positional parameters to object-based configuration. These changes can be applied in FastCheck 2.4.0 or later.

LANGUAGE: javascript
CODE:
shuffledSubarray(originalArray, minLength, maxLength) ➜ shuffledSubarray(originalArray, {minLength, maxLength})
subarray(originalArray, minLength, maxLength) ➜ subarray(originalArray, {minLength, maxLength})

----------------------------------------

TITLE: Using the JavaScript API to manage published files
DESCRIPTION: Examples of using the JavaScript API to compute files that would be published or remove unpublished files. The API provides functions to determine which files would be part of the bundle and to delete unwanted files.

LANGUAGE: javascript
CODE:
import { computePublishedFiles, removeNonPublishedFiles } from '@fast-check/packaged';

// Compute the list of all files that would be part of the bundle
// if we attempted to publish the packge defined at .
const publishedFilesRoot = await computePublishedFiles('.');

// Compute the list of all files that would be part of the bundle
// if we attempted to publish the packge defined at ./sub-directory
const publishedFilesSubDirectory = await computePublishedFiles('./sub-directory');

// Run the deletion of unwanted files
const { kept, removed } = await removeNonPublishedFiles('.', { dryRun: false, keepNodeModules: false });
// kept and removed are arrays of strings
// they may contain files or directories

----------------------------------------

TITLE: Implementing 16-bit Character Arbitraries in Version 4
DESCRIPTION: Implementation of replacements for the removed char16bits and string16bits arbitraries, using the native string arbitrary with custom unit configuration.

LANGUAGE: typescript
CODE:
function char16bits(): fc.Arbitrary<string> {
  return fc.nat({ max: 0xffff }).map((n) => String.fromCharCode(n));
}

function string16bits(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {
  return fc.string({ ...constraints, unit: char16bits() });
}

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Import statements for React components used in the Advent of Property-Based Testing challenge page, including the interactive playground and form components.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Disabling Shrinking in fast-check for Performance Testing
DESCRIPTION: Configuration to disable shrinking in fast-check when the goal is to quickly identify inputs causing performance issues without spending time on shrinking the failure case.

LANGUAGE: javascript
CODE:
fc.assert(property, { endOnFailure: true });
// with the number of entries and shrinker together:
// fc.assert(property, { numRuns: 1_000_000, endOnFailure: true });

----------------------------------------

TITLE: Including Interactive Challenge Components in Markdown
DESCRIPTION: JSX components embedded in the markdown document that provide the interactive playground for testing the letter deduplication function and submitting answers to the challenge.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

LANGUAGE: jsx
CODE:
<FormOfTheDay />

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lccobp64fc24" />

----------------------------------------

TITLE: Running the packaged utility via CLI with package managers
DESCRIPTION: Command-line examples showing how to execute the packaged utility using npm, pnpm, or yarn. This command cleans a package by removing files that won't be included in the npm bundle.

LANGUAGE: bash
CODE:
# With npm
npx -p @fast-check/packaged packaged
# With pnpm
pnpm --package=@fast-check/packaged dlx packaged
# With yarn
yarn dlx -p @fast-check/packaged packaged

----------------------------------------

TITLE: Advanced Unicode Character Mapping with Bidirectional Conversion
DESCRIPTION: Enhanced implementation of Unicode character generation that includes both mapping and unmapping functions for bidirectional conversion, enabling shrinking capabilities.

LANGUAGE: typescript
CODE:
const gapSize = 0xdfff + 1 - 0xd800;
function unicodeMapper(v: number) {
  if (v < 0xd800) return v;
  return v + gapSize;
}
function unicodeUnmapper(v: number) {
  if (v < 0xd800) return v;
  if (v <= 0xdfff) return -1;
  return v - gapSize;
}
function unicode(): Arbitrary<string> {
  return integer({ min: 0, max: 0xffff - gapSize }).map(
    (v) => String.fromCodePoint(unicodeMapper(v)),
    (s) => {
      if (typeof s !== 'string') throw new Error('Invalid');
      if (s.length !== 1) throw new Error('Invalid');
      return unicodeUnmapper(s.codePointAt(0));
    },
  );
}

// unicodeString unchanged!

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components used to create an interactive property-based testing playground and a form for submitting answers to the day's challenge.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: React Promise State Custom Hook Implementation
DESCRIPTION: Implementation of a custom React hook called usePromiseAsState that takes a promise and translates its resolved value into a state. The hook manages state updates when promises resolve and includes cleanup to prevent updates after unmounting.

LANGUAGE: javascript
CODE:
// Take a promise and translate it into a state
function usePromiseAsState(promise) {
  const [value, setValue] = useState(undefined);

  useEffect(() => {
    let canceled = false;
    setValue(undefined);
    promise.then(
      (value) => !canceled && setValue(value),
      () => {},
    );
    return () => (canceled = true);
  }, [promise]);

  return value;
}

----------------------------------------

TITLE: Running Jest with seed display for reproducible tests
DESCRIPTION: Shell command to run Jest with the --show-seed option, which ensures Jest will print the seed used for property-based tests (requires Jest ≥29.2.0).

LANGUAGE: sh
CODE:
jest --show-seed

----------------------------------------

TITLE: Migrating from uuidV to uuid with version parameter
DESCRIPTION: Migration pattern for replacing the deprecated uuidV function with the updated uuid function that accepts a version parameter for specifying the UUID version.

LANGUAGE: diff
CODE:
--fc.uuidV(4);
++fc.uuid({ version: 4 });

----------------------------------------

TITLE: Rendering Bluesky Comments Integration for Discussion
DESCRIPTION: Renders a component that integrates comments from Bluesky social platform, allowing users to discuss the challenge with a URL parameter to the specific post.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lca65jr4vc2n" />

----------------------------------------

TITLE: Testing React Promise State with Act Wrapper
DESCRIPTION: A test example demonstrating how to properly use act() when working with promises in React testing. The test verifies that a custom hook updates to the value of the last promise passed to it.

LANGUAGE: javascript
CODE:
test('should update to the value of the last promise', async () => {
  let resolve1 = null;
  let resolve2 = null;
  const promise1 = new Promise((r) => (resolve1 = r));
  const promise2 = new Promise((r) => (resolve2 = r));

  const { result, rerender } = renderHook((p) => usePromiseAsState(p), {
    initialProps: promise1,
  });
  rerender(promise2);
  expect(result.current).toBe(undefined);

  await act(async () => {
    resolve1(1);
  });
  expect(result.current).toBe(undefined);

  await act(async () => {
    resolve2(2);
  });
  expect(result.current).toBe(2);
});

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components needed for the interactive challenge playground and form submission. These components allow users to test their property-based tests against the elves' implementation.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Migrating Array Arbitrary Signatures in FastCheck
DESCRIPTION: Examples of updating array-related arbitrary function signatures from positional parameters to object-based configuration. These changes can be applied in FastCheck 2.4.0 or later.

LANGUAGE: javascript
CODE:
array(arb, maxLength) ➜ array(arb, {maxLength})
array(arb, minLength, maxLength) ➜ array(arb, {minLength, maxLength})

----------------------------------------

TITLE: Type Definition Changes for CommandWrapper
DESCRIPTION: Shows the removal of Symbol-based typings from CommandWrapper in TypeScript definitions. While these methods still exist in JavaScript, they are no longer exposed in the TypeScript typings.

LANGUAGE: typescript
CODE:
export declare class CommandWrapper<Model extends object, Real, RunResult, CheckAsync extends boolean>
  implements ICommand<Model, Real, RunResult, CheckAsync>
{
  readonly cmd: ICommand<Model, Real, RunResult, CheckAsync>;
-  [toStringMethod]?: () => string;
-  [asyncToStringMethod]?: () => Promise<string>;
  hasRan: boolean;
  constructor(cmd: ICommand<Model, Real, RunResult, CheckAsync>);
  check(m: Readonly<Model>): CheckAsync extends false ? boolean : Promise<boolean>;
  run(m: Model, r: Real): RunResult;
  clone(): CommandWrapper<Model, Real, RunResult, CheckAsync>;
  toString(): string;
}

----------------------------------------

TITLE: String Arbitrary with Grapheme Unit
DESCRIPTION: Example of using the string arbitrary with the grapheme unit option, which benefited from the performance optimizations in this release.

LANGUAGE: typescript
CODE:
fc.assert(fc.property(fc.string({ unit: 'grapheme' }), (s) => true));

----------------------------------------

TITLE: Creating IP v4 Generator Using stringMatching Arbitrary in fast-check
DESCRIPTION: New simplified approach to creating an IP v4 generator using the stringMatching arbitrary with a regular expression pattern that defines a valid IP v4 format.

LANGUAGE: javascript
CODE:
const ipV4Arbitrary = fc.stringMatching(
  /^(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)\.(?:\d|[1-9]\d|1\d\d|2[0-5]\d)$/,
);

----------------------------------------

TITLE: Building a Browser Bundle for Fast-Check Locally
DESCRIPTION: Command to create a browser-compatible bundle of Fast-Check using Browserify, recreating the functionality that was previously included in version 1.x.

LANGUAGE: bash
CODE:
npx -p browserify browserify node_modules/fast-check/lib/fast-check.js --s fastcheck > node_modules/fast-check/lib/bundle.js

----------------------------------------

TITLE: Demonstrating JavaScript Object Prototype Inheritance
DESCRIPTION: This snippet demonstrates how all JavaScript objects inherit from the Object prototype by default, showing the __proto__ property and inherited methods like 'toString'.

LANGUAGE: typescript
CODE:
const instance = {};
instance.__proto__; // Object
'toString' in instance; // true

----------------------------------------

TITLE: Entries with Start Field for Optimized Search
DESCRIPTION: Modified entries structure with an added 'start' field to mark the starting index for each range, enabling more efficient lookup in mapToConstant.

LANGUAGE: typescript
CODE:
const entries = [
  { start: 0, num: 26, build: (v) => String.fromCharCode(v + 0x61) },
  { start: 26, num: 10, build: (v) => String.fromCharCode(v + 0x30) },
];

----------------------------------------

TITLE: Creating custom string arbitrary with specific characters in fast-check
DESCRIPTION: Example of defining a custom string unit that generates strings made only of '0' and '1' characters with a minimum length of 1, showcasing the flexibility of the new string arbitrary implementation.

LANGUAGE: typescript
CODE:
fc.string({ unit: fc.constantFrom('0', '1'), minLength: 1 });

----------------------------------------

TITLE: Non-compiling constantFrom Example in Fast-Check 1.x
DESCRIPTION: Example of fc.constantFrom usage that didn't compile properly in version 1.x due to typing issues with tuples.

LANGUAGE: ts
CODE:
fc.constantFrom(false, null, undefined, 0);

----------------------------------------

TITLE: Vulnerable Prototype Pollution Example in JavaScript
DESCRIPTION: Illustrates a prototype pollution vulnerability where a JSON payload with __proto__ property can affect unrelated objects by adding properties to the Object prototype.

LANGUAGE: javascript
CODE:
// Vulnerable piece of code that may impact...
const maliciousPayload = '{"__proto__": {"isAdmin": true}}';
merge({}, JSON.parse(maliciousPayload));

// ...a totally unrelated piece of code anywhere else
const newUser = {};
newUser.isAdmin; // true

----------------------------------------

TITLE: Using the Basic Faker Integration in Tests
DESCRIPTION: Example of how to use the basic Faker integration in a test that verifies a string contains both first and last names. This demonstrates the usage pattern but inherits the limitations of the basic integration.

LANGUAGE: typescript
CODE:
test('produce a string containing the first and the last name', () => {
  fc.assert(
    fc.property(fakerToArb(faker.person.firstName), fakerToArb(faker.person.lastName), (firstName, lastName) => {
      const formatted = format(firstName, lastName);
      expect(formatted).toContain(firstName);
      expect(formatted).toContain(lastName);
    }),
  );
});

----------------------------------------

TITLE: Migration from uuidV to uuid with version parameter in fast-check
DESCRIPTION: Shows how to migrate from the deprecated uuidV arbitrary to the new uuid arbitrary with version specification. This change is introduced in fast-check 3.21.0.

LANGUAGE: diff
CODE:
--- fc.uuidV(4)
+++ fc.uuid({ version: 4 })

----------------------------------------

TITLE: Migrating from with_deleted_keys to withDeletedKeys in fc.record
DESCRIPTION: Replacing the kebab-case attribute 'with_deleted_keys' with its camel-case version 'withDeletedKeys' in fc.record configurations.

LANGUAGE: diff
CODE:
  fc.record(
    {
      first_name: fc.string(),
      last_name: fc.string(),
      age: fc.nat(),
    }, {
---    with_deleted_keys: true
+++    withDeletedKeys: true
    })

----------------------------------------

TITLE: TypeScript Import with .js Extension for ESM Compatibility
DESCRIPTION: Example of importing TypeScript files with .js extension in the import statement to ensure ESM compatibility during compilation.

LANGUAGE: typescript
CODE:
import { a } from './other-file.js'; // ← it's another TS file but we import it with the JS extension

----------------------------------------

TITLE: Basic Integration of Faker with fast-check
DESCRIPTION: A naive integration approach that converts a Faker generator into a fast-check arbitrary by seeding Faker with random integers. This approach works but has limitations regarding performance, distribution, and side effects.

LANGUAGE: typescript
CODE:
import { faker } from '@faker-js/faker';
import fc from 'fast-check';

function fakerToArb<TValue>(generator: () => TValue): fc.Arbitrary<TValue> {
  return fc.noShrink(fc.integer()).map((seed) => {
    faker.seed(seed);
    return generator();
  });
}

----------------------------------------

TITLE: Testing Import Performance: Targeted Import in Jest
DESCRIPTION: A Jest test case demonstrating a more targeted import approach for fast-check, importing only the 'assert' functionality. This test takes approximately 0.47 seconds to execute, showing a significant performance improvement over the full import.

LANGUAGE: javascript
CODE:
const { assert } = require('fast-check/assert');
test('empty test in spec file with recommended import for fast-check', () => {
  assert; // no-op, just doing so to avoid bundlers from ignoring the import
});
// spec file execution took ~0.47s (4 runs: 0.473, 0.475, 0.474, 0.473)

----------------------------------------

TITLE: Using AVA Hooks with fast-check Tests
DESCRIPTION: Example of using AVA's before/after hooks with fast-check property tests. The hooks allow for setup and teardown operations like database connections.

LANGUAGE: typescript
CODE:
import { testProp, fc } from '@fast-check/ava';

testProp.before((t) => {
  connectToDatabase();
});

testProp();
// ... omitted for brevity

testProp.after((t) => {
  closeDatabaseConnection();
});

----------------------------------------

TITLE: Improved Faker Integration API Signature
DESCRIPTION: An updated API signature that passes a scoped Faker instance to the generator function, addressing the global side effects issue. This is the placeholder for the recommended integration approach.

LANGUAGE: typescript
CODE:
function fakerToArb<TValue>(generator: (faker: Faker) => TValue): fc.Arbitrary<TValue> {
  throw new Error('Not implemented yet');
}

----------------------------------------

TITLE: Using the new fc.noShrink function in TypeScript
DESCRIPTION: Example showing how to use the new fc.noShrink function which replaces the deprecated Arbitrary.prototype.noShrink method. This function creates arbitraries that don't shrink upon failure.

LANGUAGE: typescript
CODE:
fc.noShrink(anyArbitrary);

----------------------------------------

TITLE: Generating Invalid Dates with fast-check
DESCRIPTION: Configures the date arbitrary to include invalid dates in the test generation. In JavaScript, an invalid date is still a date object that can cause issues if not handled properly.

LANGUAGE: typescript
CODE:
fc.date({ noInvalidDate: false });
// in v3, you'll have to set the option explicitly to false

----------------------------------------

TITLE: Using Custom fast-check Parameters in Tests
DESCRIPTION: Example showing how to pass custom parameters to fast-check through testProp. This allows configuration of test behavior such as limiting the number of test runs.

LANGUAGE: typescript
CODE:
import { testProp, fc } from '@fast-check/ava';

testProp(
  'should detect the substring',
  [fc.string(), fc.string(), fc.string()],
  (t, a, b, c) => {
    t.true((a + b + c).includes(b));
  },
  { numRuns: 10 }, // Example of parameters
);

----------------------------------------

TITLE: Recommended Implementation of Faker Integration with fast-check
DESCRIPTION: A full implementation of the recommended Faker integration that extends fast-check's Arbitrary class. This implementation connects Faker with fast-check's random generator to ensure efficient and well-distributed value generation without side effects.

LANGUAGE: typescript
CODE:
import { Faker, Randomizer, base } from '@faker-js/faker';
import fc from 'fast-check';

class FakerBuilder<TValue> extends fc.Arbitrary<TValue> {
  constructor(private readonly generator: (faker: Faker) => TValue) {
    super();
  }
  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<TValue> {
    const randomizer: Randomizer = {
      next: (): number => mrng.nextDouble(),
      seed: () => {}, // no-op, no support for updates of the seed, could even throw
    };
    const customFaker = new Faker({ locale: base, randomizer });
    return new fc.Value(this.generator(customFaker), undefined);
  }
  canShrinkWithoutContext(value: unknown): value is TValue {
    return false;
  }
  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<TValue>> {
    return fc.Stream.nil();
  }
}

function fakerToArb<TValue>(generator: (faker: Faker) => TValue): fc.Arbitrary<TValue> {
  return new FakerBuilder(generator);
}

----------------------------------------

TITLE: Using the New noInteger Option for Double Arbitrary
DESCRIPTION: Demonstrates the new simplified approach in version 3.18.0 to exclude integer values from double arbitrary. This uses the new noInteger option for a more optimized implementation.

LANGUAGE: typescript
CODE:
fc.double({ noInteger: true }); // Starting at version 3.18.0

----------------------------------------

TITLE: Configuring Worker Isolation Levels in fast-check
DESCRIPTION: Example showing how to customize the isolation level of workers when using @fast-check/worker. The isolation level controls how workers are shared or isolated between property test runs, with options for file-level, property-level, or predicate-level isolation.

LANGUAGE: javascript
CODE:
const property = propertyFor(new URL(import.meta.url), { isolationLevel: 'predicate' });
// Other values:
// - "file": Re-use workers cross properties (default)
// - "property": Re-use workers for each run of the predicate. Not shared across properties!
// - "predicate": One worker per run of the predicate

----------------------------------------

TITLE: Installing @fast-check/ava using npm
DESCRIPTION: Command to install the @fast-check/ava package as a development dependency. This package requires AVA to be installed to work properly.

LANGUAGE: bash
CODE:
npm install --save-dev @fast-check/ava

----------------------------------------

TITLE: Decomposing Floating-Point Values with Loop-Based Algorithm in TypeScript
DESCRIPTION: The original implementation for decomposing a floating-point number into its significand and exponent components using a loop to iterate through possible exponent values. This approach was less efficient as it required checking up to 253 values to extract the components.

LANGUAGE: typescript
CODE:
export function decomposeFloat(f: number): { exponent: number; significand: number } {
  // 1 => significand 0b1   - exponent 1 (will be preferred)
  //   => significand 0b0.1 - exponent 2
  const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;
  for (let exponent = -126; exponent !== 128; ++exponent) {
    const powExponent = 2 ** exponent;
    const maxForExponent = maxSignificand * powExponent;
    if (Math.abs(f) <= maxForExponent) {
      return { exponent, significand: f / powExponent };
    }
  }
  return { exponent: Number.NaN, significand: Number.NaN };
}

----------------------------------------

TITLE: Implementing recursive dictionary with createDepthIdentifier() in JavaScript
DESCRIPTION: Creates a recursive dictionary structure using fc.createDepthIdentifier() to generate a unique identifier. This approach manages recursion depth by sharing the same depthIdentifier object across multiple recursive levels.

LANGUAGE: javascript
CODE:
const depthIdentifier = fc.createDepthIdentifier();
const recursive2 = fc.letrec((tie) => ({
  self: fc.dictionary(
    fc.string(),
    fc.oneof({ depthIdentifier, maxDepth: 1 }, tie('leaf'), tie('self')),
    { depthIdentifier }, // we bind the two recursive levels together by referencing the same depthIdentifier
  ),
  leaf: fc.nat(),
})).self;

----------------------------------------

TITLE: Using One-time Random Mode with Vitest
DESCRIPTION: Demonstrates the one-time random mode which extends Vitest's test functions to add controlled randomness while maintaining reproducibility. The example shows how to generate random strings for test data and configure global seed settings.

LANGUAGE: javascript
CODE:
import { test, fc } from '@fast-check/vitest';
import { expect } from 'vitest';

// You can provide a fixed seed to force a replay by adding this line:
// >>  fc.configureGlobal({ seed })
// Eventually you can disable shrinking capabilities with:
// >>  fc.configureGlobal({ endOnFailure: false })
// >>  // or combine it with the one above if you need both

test('test relying on randomness', ({ g }) => {
  // Arrange
  const user = {
    firstName: g(fc.string),
    lastName: g(fc.string),
  };

  // Act
  const displayName = computeDisplayName(user);

  // Assert
  expect(displayName).toContain(user.firstName);
});

test('test not relying on randomness', () => {
  // your test
});

----------------------------------------

TITLE: Type Definition Changes for CommandsIterable
DESCRIPTION: Illustrates the removal of the cloneMethod symbol from CommandsIterable TypeScript typings. This change affects the type definitions while the underlying JavaScript functionality remains.

LANGUAGE: typescript
CODE:
export declare class CommandsIterable<Model extends object, Real, RunResult, CheckAsync extends boolean = false>
  implements Iterable<CommandWrapper<Model, Real, RunResult, CheckAsync>>
{
  readonly commands: CommandWrapper<Model, Real, RunResult, CheckAsync>[];
  readonly metadataForReplay: () => string;
  constructor(commands: CommandWrapper<Model, Real, RunResult, CheckAsync>[], metadataForReplay: () => string);
  [Symbol.iterator](): Iterator<CommandWrapper<Model, Real, RunResult, CheckAsync>>;
-  [cloneMethod](): CommandsIterable<Model, Real, RunResult, CheckAsync>;
  toString(): string;
}

----------------------------------------

TITLE: Optimized Floating-Point Decomposition Using Bit Manipulation in TypeScript
DESCRIPTION: An optimized implementation for decomposing floating-point numbers that uses direct bit manipulation instead of loops. This approach significantly improves performance by directly extracting the sign bit, exponent bits, and significand bits from the binary representation of the float.

LANGUAGE: typescript
CODE:
const f32 = new Float32Array(1);
const u32 = new Uint32Array(f32.buffer, f32.byteOffset);

function bitCastFloatToUInt32(f: number): number {
  f32[0] = f;
  return u32[0];
}

export function decomposeFloat(f: number): { exponent: number; significand: number } {
  const bits = bitCastFloatToUInt32(f);
  const signBit = bits >>> 31;
  const exponentBits = (bits >>> 23) & 0xff;
  const significandBits = bits & 0x7fffff;

  const exponent = exponentBits === 0 ? -126 : exponentBits - 127;
  let significand = exponentBits === 0 ? 0 : 1;
  significand += significandBits / 2 ** 23;
  significand *= signBit === 0 ? 1 : -1;

  return { exponent, significand };
}

----------------------------------------

TITLE: Testing Import Performance: No Imports in Jest
DESCRIPTION: A Jest test case with no imports from fast-check, serving as a baseline measurement for performance benchmarking. This test takes approximately 0.44 seconds to execute.

LANGUAGE: javascript
CODE:
test('empty test in spec file without any import', () => {});
// spec file execution took ~0.44s (4 runs: 0.436, 0.44, 0.441, 0.443)

----------------------------------------

TITLE: Installing @fast-check/jest with npm
DESCRIPTION: Command to install the @fast-check/jest package as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev @fast-check/jest

----------------------------------------

TITLE: Migrating from .noShrink to fc.noShrink
DESCRIPTION: Demonstration of the change from the deprecated .noShrink() method to the new standalone fc.noShrink() function, preparing code for Fast-check v4 compatibility.

LANGUAGE: diff
CODE:
--myArbitrary.noShrink();
++fc.noShrink(myArbitrary);

----------------------------------------

TITLE: Using ULID Arbitrary in Property-Based Testing with fast-check
DESCRIPTION: Example of using the fast-check ULID arbitrary in property-based tests. This code shows the basic usage of the ULID generator, whose performance was significantly improved in version 3.12.0, doubling its throughput from 1,774 ops/sec to 3,447 ops/sec.

LANGUAGE: typescript
CODE:
fc.assert(fc.property(fc.ulid(), (_unused) => true));

----------------------------------------

TITLE: Error Output from Detecting ReDOS in Zod
DESCRIPTION: The output from running the performance test against Zod's email validator shows a failed test case with a pathological input that took over 1600ms to process, exceeding the 1000ms threshold. This confirms the presence of a ReDOS vulnerability.

LANGUAGE: text
CODE:
Error: Property failed after 1233 tests
{ seed: 2051841007, path: "1232:5:1:2:12:18:24:30:36", endOnFailure: true }
Counterexample: ["aaaaaakeyconstructorcall1nl=constructorcalle.&g//{%fvf|&q+!v7@npd.z3n5vfs0ivqopytanq2ye37swpycij2a0.v6usxu6qfov9sb9rmown92tk6omw7ujl4-pa274fnbgnx0l9xdn18rq.nmsvklo9r3a-frz-2.gxqagvl7h2c5.imvj9wk-tw1rv8a.i.q3
hpcqgdugnhc8ydfjvvcfci4k1adqgnssmkecpqmiabqux08cfrh3su5zkf.binumohcqsyzjjetfbuntgknunsjeklecfoirjngvpzi"]
Shrunk 8 time(s)
Got error: The computation took 1667.1613000035286ms

----------------------------------------

TITLE: Creating a Never-Failing Predicate Wrapper for Fuzzing
DESCRIPTION: Implements a wrapper function that prevents predicates from failing by catching errors and reporting them to log files. This enables continuous fuzzing without interruption when errors are encountered.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';
import fs from 'fs';
import process from 'process';

let failureId = 0;
function reportFailure(inputs, error) {
  const fileName = `failure-pid${process.pid}-${++failureId}.log`;
  const fileContent = `Counterexample: ${fc.stringify(inputs)}\n\nError: ${error}`;
  fs.writeFile(fileName, fileContent);
}

function neverFailingPredicate(predicate) {
  return (...inputs) => {
    try {
      const out = predicate(...inputs);
      if (out === false) {
        reportFailure(inputs, undefined);
      }
    } catch (err) {
      reportFailure(inputs, err);
    }
  };
}

----------------------------------------

TITLE: Demonstrating query-string Array Formatting Bug with null Values
DESCRIPTION: Shows inconsistent handling of null values in arrays when using bracket format in the query-string library, resulting in parse results not matching the stringified input.

LANGUAGE: javascript
CODE:
m.stringify({ bar: ['a', null, 'b'] }, { arrayFormat: 'bracket' }); //=> "bar[]=a&bar&bar[]=b"
m.parse('bar[]=a&bar&bar[]=b', { arrayFormat: 'bracket' }); //=> {bar: [null, 'b']}

----------------------------------------

TITLE: Optimized String Padding Implementation in TypeScript
DESCRIPTION: An optimized version of the string padding function that avoids array allocations by directly building the padding string with a loop. This implementation reduced execution time by a factor of 2, improving performance across various input scenarios.

LANGUAGE: typescript
CODE:
function pad(value: string, constLength: number) {
  let extraPadding = '';
  while (value.length + extraPadding.length < constLength) {
    extraPadding += '0';
  }
  return extraPadding + value;
}

----------------------------------------

TITLE: Generating Both Valid and Invalid Inputs for Testing
DESCRIPTION: Example of how to generate a mix of valid and invalid inputs to test both normal and edge cases. This approach helps find vulnerabilities that might only occur with invalid or malformed inputs.

LANGUAGE: javascript
CODE:
fc.oneof(fc.emailAddress(), fc.fullUnicodeString());

----------------------------------------

TITLE: Enriching Existing Global Settings in Fast-Check
DESCRIPTION: Shows how to add new options to existing global settings using readConfigureGlobal. This technique preserves previously configured settings while adding or overriding specific options.

LANGUAGE: javascript
CODE:
fc.configureGlobal({ ...fc.readConfigureGlobal(), ...myNewOptions });

----------------------------------------

TITLE: Demonstrating Rabin Karp Algorithm Bugs in javascript-algorithms
DESCRIPTION: Illustrates integer overflow and rounding issues in the Rabin Karp string matching algorithm implementation, resulting in incorrect substring detection for certain character combinations.

LANGUAGE: javascript
CODE:
rabinKarp("^ !/'#'pp", " !/'#'pp") //=> -1
// expected to be 2

rabinKarp("a\u{10000}", "\u{10000}") //=> -1
// After 1st fix: issues with unicode characters outside BMP plan
rabinKarp("a耀a","耀a"))                //=> 1
rabinKarp("\u0000耀\u0000","耀\u0000")) //=> -1
// After 2nd fix

----------------------------------------

TITLE: Deprecated Arbitrary.prototype.noShrink method in TypeScript
DESCRIPTION: Example of the deprecated Arbitrary.prototype.noShrink method that should no longer be used starting from version 3.20.0. This method was used to disable shrinking for arbitraries.

LANGUAGE: typescript
CODE:
anyArbitrary.noShrink();

----------------------------------------

TITLE: Increasing Test Run Count in fast-check
DESCRIPTION: Code showing how to increase the number of test runs in fast-check to improve the chances of finding rare vulnerabilities. This is useful for stable projects where issues might be harder to detect.

LANGUAGE: javascript
CODE:
fc.assert(property, { numRuns: 1_000_000 });

----------------------------------------

TITLE: Adding Fast-Check Badge in HTML (For-The-Badge Style)
DESCRIPTION: HTML code for adding a badge with for-the-badge styling that indicates your project is tested with fast-check. Creates a larger, more prominent badge with proper accessibility attributes.

LANGUAGE: html
CODE:
<a href="https://fast-check.dev/" target="_blank" rel="noopener"
  ><img
    alt="Tested with fast-check"
    src="https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=for-the-badge&logoSize=auto&labelColor=%231b1b1d"
/></a>

----------------------------------------

TITLE: Rendering Documentation Card List in JSX
DESCRIPTION: This code snippet imports and renders a DocCardList component, which is a UI element that displays a list of documentation cards for navigation purposes in the fast-check documentation.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Creating Objects with Null Prototype in JavaScript
DESCRIPTION: Demonstrates how to create an object with no prototype in JavaScript using Object.create(null). Such objects don't inherit methods like toString or hasOwnProperty from Object.prototype.

LANGUAGE: javascript
CODE:
const instance = Object.create(null);

----------------------------------------

TITLE: Configuring fast-check for Large Input Sizes
DESCRIPTION: Code snippet showing how to configure fast-check to generate larger inputs, which is essential for detecting many ReDoS vulnerabilities that only manifest with sufficiently large inputs.

LANGUAGE: javascript
CODE:
fc.configureGlobal({ baseSize: 'xlarge' });

----------------------------------------

TITLE: Adding Fast-Check Badge in HTML (Plastic Style)
DESCRIPTION: HTML code for adding a badge with plastic styling that indicates your project is tested with fast-check. Includes proper accessibility attributes.

LANGUAGE: html
CODE:
<a href="https://fast-check.dev/" target="_blank" rel="noopener"
  ><img
    alt="Tested with fast-check"
    src="https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=plastic&logoSize=auto&labelColor=%231b1b1d"
/></a>

----------------------------------------

TITLE: Using fast-check in HTML via CDN
DESCRIPTION: Example of importing fast-check directly in an HTML file using a CDN.

LANGUAGE: html
CODE:
<!-- html file -->
<script type="module">
  import fc from 'https://cdn.skypack.dev/fast-check';
  // code...
</script>

----------------------------------------

TITLE: Configuring Dictionary Arbitrary with Null Prototype Objects
DESCRIPTION: Configures the dictionary arbitrary to generate objects with null prototype. This enables testing with prototype-less objects that behave differently from standard objects.

LANGUAGE: typescript
CODE:
fc.dictionary(
  fc.string(), // the keys
  fc.nat(), // the values
  { noNullPrototype: false },
);
// in v3, you'll have to set the option explicitly to false

----------------------------------------

TITLE: Testing Zod's Email Validator for ReDoS Vulnerability
DESCRIPTION: Implementation of the ReDoS detection approach specifically for Zod's email validator. This test identifies the CVE-2023-4316 vulnerability by generating email addresses and checking if validation takes too long.

LANGUAGE: javascript
CODE:
import { z } from 'zod'; // eg.: 3.22.2 is vulnerable
import fc from 'fast-check';

const timeLimitMs = 1_000;
const validator = z.string().email();
fc.assert(
  fc.property(fc.emailAddress(), (rawString) => {
    const startTime = performance.now();
    try {
      validator.parse(rawString);
    } catch (err) {}
    const endTime = performance.now();
    const delayMs = endTime - startTime;
    if (delayMs > timeLimitMs) {
      throw new Error(`The computation of validator.parse took ${delayMs}ms`);
    }
  }),
);

----------------------------------------

TITLE: Importing fast-check in Deno
DESCRIPTION: Example of importing fast-check from a CDN in Deno without local installation.

LANGUAGE: ts
CODE:
// deno
import fc from 'https://cdn.skypack.dev/fast-check';

----------------------------------------

TITLE: Using stringUnit Constraint in JSON Generation
DESCRIPTION: Example of using the new stringUnit constraint to specify the type of characters in generated JSONs. This feature was extended to json, object, and anything arbitraries in version 3.23.0.

LANGUAGE: typescript
CODE:
fc.json({ stringUnit: 'grapheme' });

----------------------------------------

TITLE: Configuring Record Arbitrary with Null Prototype Objects
DESCRIPTION: Configures the record arbitrary to generate objects with null prototype. This allows testing with prototype-less record objects that don't inherit Object methods.

LANGUAGE: typescript
CODE:
fc.record(
  {
    keyA: fc.nat(), // the keys for our records (here: keyA and keyB)
    keyB: fc.string(), // and associated values (here: nat and string)
  },
  { noNullPrototype: false },
);
// in v3, you'll have to set the option explicitly to false

----------------------------------------

TITLE: Rendering Documentation Card List with JSX in Markdown
DESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme and uses it to generate a visual list of documentation pages. This is a common pattern in Docusaurus documentation to create an index or table of contents for a section.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Adding Fast-Check Badge in Markdown (Plastic Style)
DESCRIPTION: Markdown code for adding a badge with plastic styling that indicates your project is tested with fast-check.

LANGUAGE: markdown
CODE:
[![Tested with fast-check](https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=plastic&logoSize=auto&labelColor=%231b1b1d)](https://fast-check.dev/)

----------------------------------------

TITLE: Basic Testing Setup for ReDoS Detection with fast-check
DESCRIPTION: A skeleton implementation showing how to use fast-check to detect inputs that cause excessive computation time in algorithms. This sets up a property-based test with a time limit check.

LANGUAGE: javascript
CODE:
import fc from 'fast-check';

const timeLimitMs = 1_000; // TODO: specify a limit based on the algorithm
const arbitraries = []; // TODO: our arbitraries or generators for random data
fc.assert(
  fc.property(...arbitraries, (...inputs) => {
    const startTime = performance.now();
    try {
      algorithm(...inputs);
    } catch (err) {}
    const endTime = performance.now();
    const delayMs = endTime - startTime;
    if (delayMs > timeLimitMs) {
      throw new Error(`The computation of algorithm(...inputs) took ${delayMs}ms`);
    }
  }),
);

----------------------------------------

TITLE: Array-Based Base32 Decoding Function in TypeScript
DESCRIPTION: Original implementation for decoding Base32 strings that splits the string into an array of characters and uses reduce with Math.pow calculations. This approach had excessive memory allocations and redundant computations.

LANGUAGE: typescript
CODE:
const symbols = normalizedBase32str.split('').map((char) => decodeSymbolLookupTable[char]);
return symbols.reduce((prev, curr, i) => prev + curr * Math.pow(32, symbols.length - 1 - i), 0);

----------------------------------------

TITLE: Adding Fast-Check Badge in Markdown (Flat-Square Style)
DESCRIPTION: Markdown code for adding a badge with flat-square styling that indicates your project is tested with fast-check.

LANGUAGE: markdown
CODE:
[![Tested with fast-check](https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=flat-square&logoSize=auto&labelColor=%231b1b1d)](https://fast-check.dev/)

----------------------------------------

TITLE: Implementing a Tic-Tac-Toe Win Possibility Check in TypeScript
DESCRIPTION: Function signature for checking whether a player can still win in a Tic-Tac-Toe game. It takes a 2D array representing the current board state and a player symbol, returning a boolean indicating if the specified player still has a chance to win the game.

LANGUAGE: typescript
CODE:
canStillWinTheGame(board: ('🎄' | '🎁' | null)[][], player: '🎄' | '🎁'): boolean;

----------------------------------------

TITLE: Optimized String Concatenation in TypeScript
DESCRIPTION: Improved implementation that uses direct string concatenation instead of array join operations. This approach nearly doubled performance, reaching 4,884,371 ops/sec compared to 2,507,281 ops/sec in the original implementation.

LANGUAGE: typescript
CODE:
return compute(a) + compute(b) + compute(c);

----------------------------------------

TITLE: JavaScript Sort Example Illustrating String Representation Issue
DESCRIPTION: Example showing how JavaScript's default sort behavior works on string representations of numbers, causing unexpected sorting results.

LANGUAGE: js
CODE:
[1, 10, 2].sort()

----------------------------------------

TITLE: React Component Imports for Advent of PBT Challenge
DESCRIPTION: Import statements for React components used in the challenge interface, including the interactive playground and form components for the day's challenge.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Setting Random Value Generation Source in fast-check Workers
DESCRIPTION: Example demonstrating how to configure the source of random value generation when using @fast-check/worker. This allows handling non-serializable values by generating them directly within the worker thread instead of the main thread.

LANGUAGE: javascript
CODE:
const property = propertyFor(new URL(import.meta.url), { randomSource: 'worker' });
// Other values:
// - "main-thread": The main thread will be responsible to generate the random values and send them to the worker thread. It unfortunately cannot send any value that cannot be serialized between threads. (default)
// - "worker": The worker is responsible to generate its own values based on the instructions provided by the main thread. Switching to a worker mode allows to support non-serializable values, unfortunately it drops all shrinking. capabilities.

----------------------------------------

TITLE: Rendering DocCardList Component in JSX for Fast-check Tutorials Page
DESCRIPTION: This code renders a DocCardList component from the Docusaurus theme to display a list of tutorial cards. The component is imported and then used without props to automatically display all child pages in the tutorials section.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Running Tests in Fast-Check Tutorial Project
DESCRIPTION: Command to execute tests in the fast-check tutorial project using npm or yarn. The project uses Vitest as the test runner.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: JSX Component for Displaying Social Comments
DESCRIPTION: A React component that embeds comments from Bluesky social network related to the challenge. The component takes a URL parameter pointing to the specific post to display.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3ld3k72yxt222" />

----------------------------------------

TITLE: Using Full Property-based Testing Mode with Vitest
DESCRIPTION: Shows how to use the full property-based testing mode with test.prop. This example demonstrates testing with arrays of arbitrary generators and with named parameters, supporting both synchronous and asynchronous tests.

LANGUAGE: javascript
CODE:
import { test, fc } from '@fast-check/vitest';

// for all a, b, c strings
// b is a substring of a + b + c
test.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {
  return (a + b + c).includes(b);
});

// same property but using named values
test.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {
  return (a + b + c).includes(b);
});

----------------------------------------

TITLE: Including DocCardList Component in MDX
DESCRIPTION: MDX code block that imports and renders the DocCardList component, which likely displays a list of tutorial sections or related documentation pages.

LANGUAGE: mdx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Installing fast-check as a Development Dependency with Bun
DESCRIPTION: Command to install fast-check as a development dependency in a Bun project. This is the first step to start using property-based testing with the Bun test runner.

LANGUAGE: bash
CODE:
bun install -D fast-check

----------------------------------------

TITLE: Importing Custom React Components for the Advent of PBT Challenge
DESCRIPTION: Imports two custom React components used for the interactive challenge: AdventPlaygroundOfTheDay for testing the algorithm and FormOfTheDay for submitting answers.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Setting up worker-based runner in CommonJS
DESCRIPTION: Experimental feature for CommonJS that enables killing long-running synchronous code like infinite loops. Shows initialization of the worker-based runner with a file path URL.

LANGUAGE: javascript
CODE:
const { init, fc } = require('@fast-check/jest/worker');
const { pathToFileURL } = require('node:url');

const { test, expect } = init(pathToFileURL(__filename));
// can also be passed options such as isolationLevel: init(pathToFileURL(__filename), {})

test.prop([fc.constant(null)])('should pass', (value) => {
  expect(value).toBe(null);
});

----------------------------------------

TITLE: Rendering Bluesky Comments Component
DESCRIPTION: Renders a component that displays comments from Bluesky social network related to the challenge, with a specific URL parameter.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3ldnepa4pi22n" />

----------------------------------------

TITLE: Wrapping Scheduler Tasks with React's act Function Manually
DESCRIPTION: Demonstrates how to manually wrap scheduled tasks with React's act function to ensure state updates occur within the proper context. This approach explicitly wraps each waitOne call with act to properly handle React component testing.

LANGUAGE: javascript
CODE:
fc.assert(
  fc.asyncProperty(fc.scheduler(), async s => () {
    // Pushing tasks into the scheduler ...
    // ....................................
    while (s.count() !== 0) {
      await act(async () => {
        // This construct is mostly needed when you want to test stuff in React
        // In the context of act from React, using waitAll would not have worked
        // as some scheduled tasks are triggered after waitOne resolved
        // and because of act (effects...)
        await s.waitOne();
      });
    }
  }))

----------------------------------------

TITLE: Importing Components for Advent of PBT Challenge
DESCRIPTION: This code imports components used for the Advent of Property-Based Testing challenge, including the playground component for the day's challenge and a comments component from Bluesky.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Basic property-based testing with @fast-check/jest
DESCRIPTION: Example showing how to use test.prop for property-based testing with both array-style and named parameters, demonstrating substring verification.

LANGUAGE: javascript
CODE:
import { test, fc } from '@fast-check/jest';

// for all a, b, c strings
// b is a substring of a + b + c
test.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {
  return (a + b + c).includes(b);
});

// Or the exact same test but based on named parameters
test.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {
  return (a + b + c).includes(b);
});

----------------------------------------

TITLE: Importing Components for Advent PBT Challenge in React
DESCRIPTION: Imports custom React components 'AdventPlaygroundOfTheDay' and 'FormOfTheDay' for the interactive challenge, as well as 'BlueskyComments' for displaying comments from Bluesky.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Using scheduleFunction to Control API Call Resolution
DESCRIPTION: Example showing how to use scheduleFunction to control when API calls resolve, allowing for testing race conditions in sequences of asynchronous operations.

LANGUAGE: typescript
CODE:
// Let suppose:
// - s             : Scheduler
// - getUserDetails: (uid: string) => Promise - API call to get details for a User

const getUserDetailsScheduled = s.scheduleFunction(getUserDetails);

getUserDetailsScheduled('user-001')
  // What happened under the hood?
  // - A call to getUserDetails('user-001') has been triggered
  // - The promise returned by the call to getUserDetails('user-001') has been registered to the scheduler
  .then((dataUser001) => {
    // This block will only be executed when the scheduler
    // will schedule this Promise
  });

// Unlock one of the scheduled Promise registered on s
// Not necessarily the first one that resolves
await s.waitOne();

----------------------------------------

TITLE: Rendering Interactive Components for Path Simplification Challenge
DESCRIPTION: These components render the interactive testing playground and answer form for the path simplification challenge, along with a comment section powered by Bluesky.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

LANGUAGE: jsx
CODE:
<FormOfTheDay />

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lcpc5prxxs2p" />

----------------------------------------

TITLE: Configuring Global Settings for Depth-Size Relationship in FastCheck
DESCRIPTION: Code snippet showing how to configure FastCheck globally to enable the depth-size relationship feature in v2. This setting ensures recursive structures respect size constraints properly.

LANGUAGE: typescript
CODE:
fc.configureGlobal({ baseSize: 'small' });
// 'small' is the default value when not specified
// but needs to be for v2 if you want to force its usage on depths

----------------------------------------

TITLE: Rendering Form Component for Challenge Submission
DESCRIPTION: Renders a form component that allows participants to submit their answers to the day's property-based testing challenge.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Rendering Form Component for Answer Submission
DESCRIPTION: Renders the form component where users can submit their findings about bugs in the sleigh packing algorithm.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Rendering Bluesky Comments Component with URL Parameter
DESCRIPTION: Renders a component that displays comments from Bluesky social platform for the specific challenge post, using a URL parameter to identify the post.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lcf7uosakk24" />

----------------------------------------

TITLE: Using expectType and expectTypeAssignable in TypeScript
DESCRIPTION: Demonstrates how to use the expectType and expectTypeAssignable functions from @fast-check/expect-type to verify TypeScript types at compile time. These functions perform compile-time type checks only and have no runtime impact.

LANGUAGE: typescript
CODE:
import { expectType, expectTypeAssignable } from '@fast-check/expect-type';
// your code or you own imports

expectType<number>()(f(1, 2), 'expect the output of f when passed 1 and 2 to be number');
expectTypeAssignable<number>()(f(1, 2), 'expect the output of f when passed 1 and 2 to be assignable to number');

----------------------------------------

TITLE: Rendering Bluesky Social Media Comments Component
DESCRIPTION: JSX component that embeds comments from Bluesky social media platform related to the challenge, with a specific URL pointing to the discussion thread.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lcwssaif5c24" />

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components used for the interactive playground and form submission in the Advent of Property-Based Testing challenge.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Generating Card List Component in Docusaurus for FastCheck Advanced Documentation
DESCRIPTION: This code snippet imports and implements the DocCardList component from Docusaurus theme to automatically generate a list of documentation cards for advanced FastCheck topics. The component will display all markdown pages that are children of this section.

LANGUAGE: mdx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Adding Fast-Check Badge in HTML (Flat-Square Style)
DESCRIPTION: HTML code for adding a badge with flat-square styling that indicates your project is tested with fast-check. Includes proper accessibility attributes.

LANGUAGE: html
CODE:
<a href="https://fast-check.dev/" target="_blank" rel="noopener"
  ><img
    alt="Tested with fast-check"
    src="https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=flat-square&logoSize=auto&labelColor=%231b1b1d"
/></a>

----------------------------------------

TITLE: Rendering BlueskyComments Component
DESCRIPTION: Renders a component that displays comments from Bluesky social platform related to the challenge, allowing for community discussion and feedback.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lchq7y5wps2t" />

----------------------------------------

TITLE: Rendering BlueskyComments Component for Discussion
DESCRIPTION: Renders a component that displays or links to comments and discussion about the challenge from Bluesky, with a URL parameter pointing to the specific post.

LANGUAGE: jsx
CODE:
<BlueskyComments url="https://bsky.app/profile/fast-check.dev/post/3lcz2znz7f222" />

----------------------------------------

TITLE: Importing and Rendering DocCardList Component in MDX
DESCRIPTION: This code imports and renders the DocCardList component from the Docusaurus theme to automatically generate a list of documentation cards for the children pages in this section.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Adding Fast-Check Badge in HTML (Default Style)
DESCRIPTION: HTML code for adding a badge that indicates your project is tested with fast-check. Includes target blank to open in new tab and proper accessibility attributes.

LANGUAGE: html
CODE:
<a href="https://fast-check.dev/" target="_blank" rel="noopener"
  ><img
    alt="Tested with fast-check"
    src="https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?flat&logoSize=auto&labelColor=%231b1b1d"
/></a>

----------------------------------------

TITLE: Rendering Interactive Challenge Components in JSX
DESCRIPTION: Renders the interactive playground component for the challenge where users can test their property-based tests.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Rendering Interactive Components for PBT Challenge
DESCRIPTION: JSX code that renders the interactive components for the Property-Based Testing challenge, including the playground, answer form, and social media comments section.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Importing and Rendering DocCardList Component in MDX
DESCRIPTION: This snippet demonstrates how to import and use the DocCardList component within an MDX documentation file. The component automatically renders a list of child documentation pages related to fake data arbitraries.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Rendering Documentation Card List in React for Fast-Check Migration Guides
DESCRIPTION: This code snippet imports and renders a DocCardList component, which automatically displays cards for all migration guide pages in the documentation hierarchy.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components for the interactive challenge playground and the form for submitting answers.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';

----------------------------------------

TITLE: Rendering Answer Submission Form Component in JSX
DESCRIPTION: Renders the form component that allows users to submit their answers to the challenge.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Rendering DocCardList Component in MDX for Fast-check Configuration
DESCRIPTION: This snippet imports and renders a DocCardList component within an MDX file. The DocCardList component displays a grid of cards, likely representing configuration options for the fast-check library.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Running Tests in Bun
DESCRIPTION: Command to execute the test suite in Bun. This runs all the tests including the property-based tests implemented with fast-check.

LANGUAGE: bash
CODE:
bun test

----------------------------------------

TITLE: Rendering Answer Submission Form Component in React
DESCRIPTION: Renders a form component that allows users to submit their solution to the challenge after finding the bug.

LANGUAGE: jsx
CODE:
<FormOfTheDay />

----------------------------------------

TITLE: Rendering Interactive Challenge Components in React
DESCRIPTION: Renders the interactive playground component where users can test their property-based tests against the hidden implementation.

LANGUAGE: jsx
CODE:
<AdventPlaygroundOfTheDay />

----------------------------------------

TITLE: Adding Fast-Check Badge in Markdown (Default Style)
DESCRIPTION: Markdown code for adding a badge that indicates your project is tested with fast-check. This uses the default flat style for the badge with blue coloring on a dark background.

LANGUAGE: markdown
CODE:
[![Tested with fast-check](https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?flat&logoSize=auto&labelColor=%231b1b1d)](https://fast-check.dev/)

----------------------------------------

TITLE: Global Configuration for fast-check in Jest
DESCRIPTION: Setup file that configures fast-check globally to interrupt property tests after a specified time limit. This ensures property tests don't exceed Jest's default timeout of 5 seconds.

LANGUAGE: javascript
CODE:
const fc = require('fast-check');
fc.configureGlobal({ interruptAfterTimeLimit: 5_000 });

----------------------------------------

TITLE: Importing React Components for Advent of PBT Challenge
DESCRIPTION: Imports custom React components for the interactive challenge, including the playground interface and form submission component for the day's challenge.

LANGUAGE: jsx
CODE:
import {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';
import BlueskyComments from './BlueskyComments'

----------------------------------------

TITLE: Optimized Dichotomic Search Implementation
DESCRIPTION: Improved implementation using dichotomic (binary) search to locate the correct build function, achieving logarithmic complexity instead of linear.

LANGUAGE: typescript
CODE:
function buildForChoiceIndex(choiceIndex: number) {
  let min = 0;
  let max = entries.length;
  while (max - min > 1) {
    const mid = Math.floor((min + max) / 2);
    if (choiceIndex < entries[mid].from) {
      max = mid;
    } else {
      min = mid;
    }
  }
  return entries[min].build(choiceIndex - entries[min].start + entries[min].num);
}

----------------------------------------

TITLE: Adding Fast-Check Badge in Markdown (For-The-Badge Style)
DESCRIPTION: Markdown code for adding a badge with for-the-badge styling that indicates your project is tested with fast-check. This version creates a larger, more prominent badge.

LANGUAGE: markdown
CODE:
[![Tested with fast-check](https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?style=for-the-badge&logoSize=auto&labelColor=%231b1b1d)](https://fast-check.dev/)

----------------------------------------

TITLE: Installing fast-check for Jest Integration
DESCRIPTION: Command to install the necessary libraries for integrating fast-check with Jest using the connector approach. This installs both the core fast-check library and the Jest connector package.

LANGUAGE: bash
CODE:
npm install --save-dev fast-check @fast-check/jest

----------------------------------------

TITLE: Original Linear Search Implementation in mapToConstant
DESCRIPTION: The initial implementation of the build function lookup in mapToConstant using linear search, which had poor performance for large entries arrays.

LANGUAGE: typescript
CODE:
function buildForChoiceIndex(choiceIndex: number) {
  let idx = -1;
  let numSkips = 0;
  while (choiceIndex >= numSkips) {
    numSkips += entries[++idx].num;
  }
  return entries[idx].build(choiceIndex - numSkips + entries[idx].num);
}

----------------------------------------

TITLE: Running Tests with npm/yarn in Javascript Project
DESCRIPTION: Command to run tests locally in a JavaScript project using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Rendering Document Card List in MDX
DESCRIPTION: A code block that imports and renders a DocCardList component to display a list of documentation cards. This component is used to show the available guides for setting up fast-check with different test runners.

LANGUAGE: mdx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Creating Character Generator with mapToConstant
DESCRIPTION: Example of using mapToConstant to create an arbitrary that generates characters from a-z and numbers 0-9. This demonstrates a core building block used in string generation.

LANGUAGE: typescript
CODE:
fc.mapToConstant(
  { num: 26, build: (v) => String.fromCharCode(v + 0x61) },
  { num: 10, build: (v) => String.fromCharCode(v + 0x30) },
);
// Examples of generated values: "6", "8", "d", "9", "r"…

----------------------------------------

TITLE: Setting up worker-based runner in ES Modules
DESCRIPTION: Experimental feature for ES Modules that enables killing long-running synchronous code. Shows initialization of the worker-based runner with import.meta.url and includes the required await keyword.

LANGUAGE: javascript
CODE:
import { init, fc } from '@fast-check/jest/worker';

const { test, expect } = await init(new URL(import.meta.url));
// can also be passed options such as isolationLevel: init(new URL(import.meta.url), {})

test.prop([fc.constant(null)])('should pass', (value) => {
  expect(value).toBe(null);
});

----------------------------------------

TITLE: Rendering Documentation Card List with Docusaurus in JSX
DESCRIPTION: This code imports the DocCardList component from Docusaurus theme and renders it to display a list of documentation cards. It's used to create a navigation interface for the quick start tutorial.

LANGUAGE: jsx
CODE:
import DocCardList from '@theme/DocCardList';

<DocCardList />

----------------------------------------

TITLE: Setting Up the fast-check Development Environment
DESCRIPTION: Commands to clone the repository, install dependencies, and build the project to begin local development.

LANGUAGE: bash
CODE:
git clone https://github.com/dubzzz/fast-check.git && cd fast-check
pnpm install
pnpm --filter fast-check build    #compile the code in packages/fast-check/src, build the packages/fast-check/lib content

----------------------------------------

TITLE: Importing Main Functions from @fast-check/poisoning
DESCRIPTION: The package provides two main functions: assertNoPoisoning to detect modifications to JavaScript defaults/prototypes, and restoreGlobals to revert any detected changes back to their original state.

LANGUAGE: markdown
CODE:
- `assertNoPoisoning`: assert that the defaults known when first importing the package in your code have not been changed
- `restoreGlobals`: restore the defaults so that any change that could have been detected by `assertNoPoisoning` will be resolved

----------------------------------------

TITLE: Testing a New Arbitrary in fast-check
DESCRIPTION: Example test code for implementing a new arbitrary, including unit tests and integration tests with various assertions to ensure proper behavior.

LANGUAGE: js
CODE:
import * as fc from 'fast-check';
import { myArbitrary } from '../../../../src/arbitrary/MyArbitrary';
import {
  assertProduceCorrectValues,
  assertProduceSameValueGivenSameSeed,
  assertProduceValuesShrinkableWithoutContext,
  assertShrinkProducesSameValueWithoutInitialContext,
  assertShrinkProducesStrictlySmallerValue,
} from './__test-helpers__/NextArbitraryAssertions';

describe('myArbitrary', () => {
  // Tests in isolation!
  // You may want to check that generate, canShrinkWithoutContext and shrink
  // are working as expecting given mocked or stubbed data (see our usage of spies).
});

describe('myArbitrary (integration)', () => {
  // Tests in real life!
  // In this section we assess that the arbitrary will work as expected by calling it with a real random generator
  // and without mocking any of its underlyings. In order to do that we have an already predefined set of helpers.
  // Among those helpers only some are really compulsory as they will ensure that the arbitrary does not break the
  // rules. The other ones tend to have the best possible version of the arbitrary by ensuring the shrinker will
  // always shrink towards strictly smaller values or that user defined values can be shrunk.

  type Extra = /* Typing for the extra props received by myArbitraryBuilder */;
  const extraParameters: fc.Arbitrary<Extra> = /* Arbitrary producing values for myArbitraryBuilder */;

  const isCorrect = (value: /* Type of the value */, extra: Extra) => {
    // Returns true if the value is correct given extra
    // Returs false or throws (possibly via expect) if value is invalid
  };

  const isStrictlySmaller = (vNew: /* Type of the value */, vOld: /* Type of the value */, extra: Extra) => {
    // Returns true if the vNew is really strictly smaller than vOld
    // Returs false or throws (possibly via expect) otherwise
  };

  const myArbitraryBuilder = (extra: Extra) => convertToNext(myArbitrary(extra));

  it('should produce the same values given the same seed', () => {
    assertProduceSameValueGivenSameSeed(myArbitraryBuilder, { extraParameters });
  });

  it('should only produce correct values', () => {
    assertProduceCorrectValues(myArbitraryBuilder, isCorrect, { extraParameters });
  });

  // OPTIONAL STEP
  it('should produce values seen as shrinkable without any context', () => {
    assertProduceValuesShrinkableWithoutContext(myArbitraryBuilder, { extraParameters });
  });

  // OPTIONAL STEP
  it('should be able to shrink to the same values without initial context', () => {
    assertShrinkProducesSameValueWithoutInitialContext(myArbitraryBuilder, { extraParameters });
  });

  // OPTIONAL STEP
  it('should preserve strictly smaller ordering in shrink', () => {
    assertShrinkProducesStrictlySmallerValue(myArbitraryBuilder, isStrictlySmaller, { extraParameters });
  });
});

----------------------------------------

TITLE: Running Node.js Tests
DESCRIPTION: Command to execute tests using the Node.js test runner. This command will run all test files in your project that the test runner can discover.

LANGUAGE: bash
CODE:
node --test