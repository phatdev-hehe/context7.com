TITLE: Using optional chaining in JavaScript
DESCRIPTION: Demonstrates the new optional chaining (?.) operator for safely accessing nested object properties without explicit null checks.

LANGUAGE: javascript
CODE:
// Error prone-version, could throw.
const nameLength = db.user.name.length;

// Less error-prone, but harder to read.
let nameLength;
if (db && db.user && db.user.name)
  nameLength = db.user.name.length;

// Still checks for errors and is much more readable.
const nameLength = db?.user?.name?.length;

----------------------------------------

TITLE: Demonstrating Logical Assignment Operators in JavaScript
DESCRIPTION: Examples showing the syntax and behavior of logical AND (&&=), OR (||=), and nullish coalescing (??=) assignment operators, including their short-circuit evaluation semantics.

LANGUAGE: javascript
CODE:
// As an additional review, here is the semantics of logical and:
x && y
// → y when x is truthy
// → x when x is not truthy

// First, logical and assignment. The two lines following this
// comment block are equivalent.
// Note that like existing compound assignment operators, more complex
// left-hand sides are only evaluated once.
x &&= y;
x && (x = y);

// The semantics of logical or:
x || y
// → x when x is truthy
// → y when x is not truthy

// Similarly, logical or assignment:
x ||= y;
x || (x = y);

// The semantics of nullish coalescing operator:
x ?? y
// → y when x is nullish (null or undefined)
// → x when x is not nullish

// Finally, nullish coalescing assignment:
x ??= y;
x ?? (x = y);

----------------------------------------

TITLE: Using Promise.all for Parallel Stylesheet Loading
DESCRIPTION: Demonstrates how to use Promise.all to load multiple stylesheets in parallel and render a new UI only when all requests succeed, with error handling for failures.

LANGUAGE: javascript
CODE:
const promises = [
  fetch('/component-a.css'),
  fetch('/component-b.css'),
  fetch('/component-c.css'),
];
try {
  const styleResponses = await Promise.all(promises);
  enableStyles(styleResponses);
  renderNewUi();
} catch (reason) {
  displayError(reason);
}

----------------------------------------

TITLE: Running JavaScript in V8 (C++)
DESCRIPTION: A hello world example that demonstrates how to execute a JavaScript string in V8 and print the result.

LANGUAGE: C++
CODE:
g++ -I. -Iinclude samples/hello-world.cc -o hello_world -fno-rtti -fuse-ld=lld -lv8_monolith -lv8_libbase -lv8_libplatform -ldl -Lout.gn/x64.release.sample/obj/ -pthread -std=c++20 -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX

----------------------------------------

TITLE: Lazy Loading SPA Implementation
DESCRIPTION: Complete example of using dynamic import for lazy-loading modules in a single-page application.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<meta charset="utf-8">
<title>My library</title>
<nav>
  <a href="books.html" data-entry-module="books">Books</a>
  <a href="movies.html" data-entry-module="movies">Movies</a>
  <a href="video-games.html" data-entry-module="video-games">Video Games</a>
</nav>
<main>This is a placeholder for the content that will be loaded on-demand.</main>
<script>
  const main = document.querySelector('main');
  const links = document.querySelectorAll('nav > a');
  for (const link of links) {
    link.addEventListener('click', async (event) => {
      event.preventDefault();
      try {
        const module = await import(`/${link.dataset.entryModule}.mjs`);
        // The module exports a function named `loadPageInto`.
        module.loadPageInto(main);
      } catch (error) {
        main.textContent = error.message;
      }
    });
  }
</script>

----------------------------------------

TITLE: Using Array.prototype.flatMap
DESCRIPTION: Shows the more efficient flatMap() method that combines mapping and flattening in a single operation.

LANGUAGE: javascript
CODE:
[2, 3, 4].flatMap(duplicate); // 🚀
// → [2, 2, 3, 3, 4, 4]

----------------------------------------

TITLE: Using Promise.any for Racing Multiple Endpoints
DESCRIPTION: Demonstrates Promise.any usage to race multiple endpoint requests and handle the first successful response, with AggregateError handling if all promises fail.

LANGUAGE: javascript
CODE:
const promises = [
  fetch('/endpoint-a').then(() => 'a'),
  fetch('/endpoint-b').then(() => 'b'),
  fetch('/endpoint-c').then(() => 'c'),
];
try {
  const first = await Promise.any(promises);
  // Any of the promises was fulfilled.
  console.log(first);
  // → e.g. 'b'
} catch (error) {
  // All of the promises were rejected.
  console.assert(error instanceof AggregateError);
  // Log the rejection values:
  console.log(error.errors);
  // → [
  //     <TypeError: Failed to fetch /endpoint-a>,
  //     <TypeError: Failed to fetch /endpoint-b>,
  //     <TypeError: Failed to fetch /endpoint-c>
  //   ]
}

----------------------------------------

TITLE: Using findLast and findLastIndex in JavaScript
DESCRIPTION: Illustrates the use of findLast and findLastIndex methods to search for elements from the end of an array. These methods behave like find and findIndex but start the search from the end of the array.

LANGUAGE: javascript
CODE:
const inputArray = [{v:1}, {v:2}, {v:3}, {v:4}, {v:5}];
inputArray.findLast((element) => element.v % 2 === 0);
// → {v:4}
inputArray.findLast((element) => element.v % 7 === 0);
// → undefined
inputArray.findLastIndex((element) => element.v % 2 === 0);
// → 3
inputArray.findLastIndex((element) => element.v % 7 === 0);
// → -1

----------------------------------------

TITLE: Optional Array Indexing in JavaScript
DESCRIPTION: This snippet demonstrates using the optional chaining operator for array indexing.

LANGUAGE: javascript
CODE:
// If the `usersArray` is `null` or `undefined`,
// then `userName` gracefully evaluates to `undefined`.
const userIndex = 42;
const userName = usersArray?.[userIndex].name;

----------------------------------------

TITLE: Async/Await URL Fetching in JavaScript
DESCRIPTION: Improved version of the URL fetching function using ES2017 async/await syntax, demonstrating cleaner asynchronous code without callback chains.

LANGUAGE: javascript
CODE:
async function logFetch(url) {
  try {
    const response = await fetch(url);
    console.log(await response.text());
  } catch (err) {
    console.log('fetch failed', err);
  }
}

----------------------------------------

TITLE: Combining Optional Chaining with Nullish Coalescing in JavaScript
DESCRIPTION: This snippet shows how to combine the optional chaining operator with the nullish coalescing operator for safe deep property access with default values.

LANGUAGE: javascript
CODE:
const object = { id: 123, names: { first: 'Alice', last: 'Smith' }};

{ // With lodash:
  const firstName = _.get(object, 'names.first');
  // → 'Alice'

  const middleName = _.get(object, 'names.middle', '(no middle name)');
  // → '(no middle name)'
}

{ // With optional chaining and nullish coalescing:
  const firstName = object?.names?.first ?? '(no first name)';
  // → 'Alice'

  const middleName = object?.names?.middle ?? '(no middle name)';
  // → '(no middle name)'
}

----------------------------------------

TITLE: String.matchAll with Named Capture Groups
DESCRIPTION: Shows advanced usage of String.matchAll with named capture groups to extract structured information from GitHub repository references.

LANGUAGE: javascript
CODE:
const string = 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev';
const regex = /\b(?<owner>[a-z0-9]+)\/(?<repo>[a-z0-9\.]+)\b/g;
for (const match of string.matchAll(regex)) {
  console.log(`${match[0]} at ${match.index} with '${match.input}'`);
  console.log(`→ owner: ${match.groups.owner}`);
  console.log(`→ repo: ${match.groups.repo}`);
}

----------------------------------------

TITLE: Modern Error Handling with Error Causes
DESCRIPTION: Example demonstrating the new error causes feature where errors can be chained using the cause property in the Error constructor options. This shows how to properly handle different error sources and access their original causes.

LANGUAGE: javascript
CODE:
function doWork() {
  try {
    doSomeWork();
  } catch (err) {
    throw new Error('Some work failed', { cause: err });
  }
  try {
    doMoreWork();
  } catch (err) {
    throw new Error('More work failed', { cause: err });
  }
}

try {
  doWork();
} catch (err) {
  switch(err.message) {
    case 'Some work failed':
      handleSomeWorkFailure(err.cause);
      break;
    case 'More work failed':
      handleMoreWorkFailure(err.cause);
      break;
  }
}

----------------------------------------

TITLE: Basic Module Export Example
DESCRIPTION: Demonstrates how to export functions and constants from a JavaScript module using named exports.

LANGUAGE: javascript
CODE:
// 📁 lib.mjs
export const repeat = (string) => `${string} ${string}`;
export function shout(string) {
  return `${string.toUpperCase()}!`;
}

----------------------------------------

TITLE: Using top-level await for resource initialization in JavaScript
DESCRIPTION: This snippet shows how top-level await can be used to initialize a database connection when a module is loaded.

LANGUAGE: javascript
CODE:
const connection = await dbConnector();

----------------------------------------

TITLE: Creating Iterator from Object with Iterator.from()
DESCRIPTION: Shows using the static from() method to create an iterator from various objects. The example creates an iterator from NodeList and finds a specific post.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

console.log(Iterator.from(posts).find((x) => x.textContent.includes('V8')).textContent);

----------------------------------------

TITLE: Using Nullish Coalescing for Default Values in JavaScript
DESCRIPTION: This snippet demonstrates the use of the new nullish coalescing operator (??) to handle default values. It correctly handles all cases, including falsy values that are not null or undefined.

LANGUAGE: javascript
CODE:
function Component(props) {
  const enable = props.enabled ?? true;
  // …
}

----------------------------------------

TITLE: Implementing Object Rest and Spread Properties in JavaScript
DESCRIPTION: This snippet demonstrates the use of object rest properties for destructuring assignment and spread properties for object literals in ES2018.

LANGUAGE: javascript
CODE:
// Rest properties for object destructuring assignment:
const person = {
    firstName: 'Sebastian',
    lastName: 'Markbåge',
    country: 'USA',
    state: 'CA',
};
const { firstName, lastName, ...rest } = person;
console.log(firstName); // Sebastian
console.log(lastName); // Markbåge
console.log(rest); // { country: 'USA', state: 'CA' }

// Spread properties for object literals:
const personCopy = { firstName, lastName, ...rest };
console.log(personCopy);
// { firstName: 'Sebastian', lastName: 'Markbåge', country: 'USA', state: 'CA' }

----------------------------------------

TITLE: Creating and Using Intl.ListFormat for Conjunctions in English
DESCRIPTION: Demonstrates how to create an Intl.ListFormat instance for conjunctions in English and format lists of different lengths.

LANGUAGE: javascript
CODE:
const lf = new Intl.ListFormat('en');
lf.format(['Frank']);
// → 'Frank'
lf.format(['Frank', 'Christine']);
// → 'Frank and Christine'
lf.format(['Frank', 'Christine', 'Flora']);
// → 'Frank, Christine, and Flora'
lf.format(['Frank', 'Christine', 'Flora', 'Harrison']);
// → 'Frank, Christine, Flora, and Harrison'

----------------------------------------

TITLE: Using Intl.RelativeTimeFormat in Spanish
DESCRIPTION: This example shows how to use Intl.RelativeTimeFormat with the Spanish language to format relative time expressions.

LANGUAGE: javascript
CODE:
const rtf = new Intl.RelativeTimeFormat('es');

rtf.format(3.14, 'second');
// → 'dentro de 3,14 segundos'

rtf.format(-15, 'minute');
// → 'hace 15 minutos'

rtf.format(8, 'hour');
// → 'dentro de 8 horas'

rtf.format(-2, 'day');
// → 'hace 2 días'

rtf.format(3, 'week');
// → 'dentro de 3 semanas'

rtf.format(-5, 'month');
// → 'hace 5 meses'

rtf.format(2, 'quarter');
// → 'dentro de 2 trimestres'

rtf.format(-42, 'year');
// → 'hace 42 años'

----------------------------------------

TITLE: Nullish Coalescing with DOM API in JavaScript
DESCRIPTION: This snippet shows how nullish coalescing can be used with DOM APIs that may return null. It provides a concise way to handle default values when querying the DOM.

LANGUAGE: javascript
CODE:
// Concise nullish coalescing
const link = document.querySelector('link') ?? document.createElement('link');

// Default assignment destructure with boilerplate
const {
  link = document.createElement('link'),
} = {
  link: document.querySelector('link') || undefined
};

----------------------------------------

TITLE: Combining Optional Chaining and Nullish Coalescing in JavaScript
DESCRIPTION: This snippet demonstrates how nullish coalescing can be used in combination with optional chaining to provide default values in complex object structures.

LANGUAGE: javascript
CODE:
// Optional chaining and nullish coalescing in tandem
const link = obj.deep?.container.link ?? document.createElement('link');

// Default assignment destructure with optional chaining
const {
  link = document.createElement('link'),
} = (obj.deep?.container || {});

----------------------------------------

TITLE: Using Promise.allSettled for Multiple API Calls
DESCRIPTION: Illustrates using Promise.allSettled to handle multiple independent API calls and perform an action after all calls are complete, regardless of their success or failure.

LANGUAGE: javascript
CODE:
const promises = [
  fetch('/api-call-1'),
  fetch('/api-call-2'),
  fetch('/api-call-3'),
];
// Imagine some of these requests fail, and some succeed.

await Promise.allSettled(promises);
// All API calls have finished (either failed or succeeded).
removeLoadingIndicator();

----------------------------------------

TITLE: Short-Circuiting with Optional Chaining in JavaScript
DESCRIPTION: This snippet demonstrates the short-circuiting property of the optional chaining operator.

LANGUAGE: javascript
CODE:
// `age` is incremented only if `db` and `user` are defined.
db?.user?.grow(++age);

----------------------------------------

TITLE: Service Worker Cache Implementation
DESCRIPTION: Complete service worker implementation showing install and fetch event handlers for resource caching. Demonstrates both cache creation and cache-first fetching strategy.

LANGUAGE: javascript
CODE:
// sw.js
self.addEventListener('install', (event) => {
  async function buildCache() {
    const cache = await caches.open(cacheName);
    return cache.addAll([
      '/main.css',
      '/main.mjs',
      '/offline.html',
    ]);
  }
  event.waitUntil(buildCache());
});

self.addEventListener('fetch', (event) => {
  async function cachedFetch(event) {
    const cache = await caches.open(cacheName);
    let response = await cache.match(event.request);
    if (response) return response;
    response = await fetch(event.request);
    cache.put(event.request, response.clone());
    return response;
  }
  event.respondWith(cachedFetch(event));
});

----------------------------------------

TITLE: Basic Object.fromEntries Usage in JavaScript
DESCRIPTION: Shows the basic usage of Object.fromEntries to convert an array of entries back into an object, demonstrating the inverse operation of Object.entries.

LANGUAGE: javascript
CODE:
const object = { x: 42, y: 50 };
const entries = Object.entries(object);
// → [['x', 42], ['y', 50]]

const result = Object.fromEntries(entries);
// → { x: 42, y: 50 }

----------------------------------------

TITLE: Demonstrating Object Rest/Spread Properties in JavaScript
DESCRIPTION: This snippet shows how to use object rest properties for destructuring assignment and spread properties for object literals. It demonstrates the new syntax introduced in V8 v6.0 as an alternative to Object.assign().

LANGUAGE: javascript
CODE:
// Rest properties for object destructuring assignment:
const person = {
  firstName: 'Sebastian',
  lastName: 'Markbåge',
  country: 'USA',
  state: 'CA',
};
const { firstName, lastName, ...rest } = person;
console.log(firstName); // Sebastian
console.log(lastName); // Markbåge
console.log(rest); // { country: 'USA', state: 'CA' }

// Spread properties for object literals:
const personCopy = { firstName, lastName, ...rest };
console.log(personCopy);
// { firstName: 'Sebastian', lastName: 'Markbåge', country: 'USA', state: 'CA' }

----------------------------------------

TITLE: Using String.prototype.replaceAll in JavaScript
DESCRIPTION: Shows how to use the new replaceAll string method to replace all occurrences of a substring without using regular expressions.

LANGUAGE: javascript
CODE:
const queryString = 'q=query+string+parameters';

// Works, but requires escaping inside regular expressions.
queryString.replace(/\+/g, ' ');
// → 'q=query string parameters'

// Simpler!
queryString.replaceAll('+', ' ');
// → 'q=query string parameters'

----------------------------------------

TITLE: Compact Notation with Intl.NumberFormat in JavaScript
DESCRIPTION: Demonstrates the use of compact notation for formatting large numbers in a more human-friendly way.

LANGUAGE: javascript
CODE:
{
  // Test standard notation.
  const formatter = new Intl.NumberFormat('en', {
    notation: 'standard', // This is the implied default.
  });
  formatter.format(1234.56);
  // → '1,234.56'
  formatter.format(123456);
  // → '123,456'
  formatter.format(123456789);
  // → '123,456,789'
}

{
  // Test compact notation.
  const formatter = new Intl.NumberFormat('en', {
    notation: 'compact',
  });
  formatter.format(1234.56);
  // → '1.2K'
  formatter.format(123456);
  // → '123K'
  formatter.format(123456789);
  // → '123M'
}

----------------------------------------

TITLE: Traditional hasOwnProperty Usage in JavaScript
DESCRIPTION: Shows the traditional way of safely checking object property ownership using Object.prototype.hasOwnProperty with Function.prototype.call

LANGUAGE: javascript
CODE:
const hasOwnProperty = Object.prototype.hasOwnProperty;

if (hasOwnProperty.call(object, 'foo')) {
  // `object` has property `foo`.
}

----------------------------------------

TITLE: Using Promise.prototype.finally in JavaScript
DESCRIPTION: Shows the new Promise.finally() method for handling cleanup after a promise settles, regardless of whether it was fulfilled or rejected.

LANGUAGE: javascript
CODE:
Promise.prototype.finally()

----------------------------------------

TITLE: Using Object.hasOwn in JavaScript
DESCRIPTION: Demonstrates the usage of the new Object.hasOwn method, which serves as an easier alternative to Object.prototype.hasOwnProperty.call for checking own properties of objects.

LANGUAGE: javascript
CODE:
Object.hasOwn({ prop: 42 }, 'prop')
// → true

----------------------------------------

TITLE: Demonstrating Array Rest and Spread Elements in JavaScript
DESCRIPTION: This snippet shows how to use array rest elements for destructuring assignment and spread elements for array literals in ES2015.

LANGUAGE: javascript
CODE:
// Rest elements for array destructuring assignment:
const primes = [2, 3, 5, 7, 11];
const [first, second, ...rest] = primes;
console.log(first); // 2
console.log(second); // 3
console.log(rest); // [5, 7, 11]

// Spread elements for array literals:
const primesCopy = [first, second, ...rest];
console.log(primesCopy); // [2, 3, 5, 7, 11]

----------------------------------------

TITLE: JSON.stringify Enhanced Behavior with Lone Surrogates
DESCRIPTION: Shows the improved behavior where JSON.stringify properly escapes lone surrogates, producing valid Unicode output that can be safely represented in UTF-8.

LANGUAGE: javascript
CODE:
JSON.stringify('\uD800');
// → '"\\ud800"'

----------------------------------------

TITLE: Practical Example of Logical Assignment with DOM Manipulation
DESCRIPTION: Demonstration of logical OR assignment operator usage in DOM manipulation, showing both correct implementation and potential buggy implementation that could cause focus loss.

LANGUAGE: javascript
CODE:
// Display a default message if it doesn't override anything.
// Only assigns to innerHTML if it's empty. Doesn't cause inner
// elements of msgElement to lose focus.
function setDefaultMessage() {
  msgElement.innerHTML ||= '<p>No messages<p>';
}

// Display a default message if it doesn't override anything.
// Buggy! May cause inner elements of msgElement to
// lose focus every time it's called.
function setDefaultMessageBuggy() {
  msgElement.innerHTML = msgElement.innerHTML || '<p>No messages<p>';
}

----------------------------------------

TITLE: Using Ternary Operator for Nested Property Access in JavaScript
DESCRIPTION: This snippet demonstrates using the ternary operator for nested property access, which is less error-prone but reduces readability.

LANGUAGE: javascript
CODE:
const nameLength =
  (db
    ? (db.user
      ? (db.user.name
        ? db.user.name.length
        : undefined)
      : undefined)
    : undefined);

----------------------------------------

TITLE: Module Import Example
DESCRIPTION: Shows how to import named exports from another module and use them.

LANGUAGE: javascript
CODE:
// 📁 main.mjs
import {repeat, shout} from './lib.mjs';
repeat('hello');
// → 'hello hello'
shout('Modules in action');
// → 'MODULES IN ACTION!'

----------------------------------------

TITLE: Formatting Numbers with Units using Intl.NumberFormat in JavaScript
DESCRIPTION: Illustrates how to format numbers with localized units of measurement using the style and unit options.

LANGUAGE: javascript
CODE:
const formatter = new Intl.NumberFormat('en', {
  style: 'unit',
  unit: 'kilobyte',
});
formatter.format(1.234);
// → '1.234 kB'
formatter.format(123.4);
// → '123.4 kB'

----------------------------------------

TITLE: Demonstrating private class fields in JavaScript
DESCRIPTION: Shows how to define and use private class fields in JavaScript using the new # syntax. Private fields are not accessible outside the class.

LANGUAGE: javascript
CODE:
class IncreasingCounter {
  #count = 0;
  get value() {
    console.log('Getting the current value!');
    return this.#count;
  }
  increment() {
    this.#count++;
  }
}

const counter = new IncreasingCounter();
counter.#count;
// → SyntaxError
counter.#count = 42;
// → SyntaxError

----------------------------------------

TITLE: Demonstrating new top-level await behavior in JavaScript modules
DESCRIPTION: This snippet shows how top-level await can now be used directly in modules without wrapping in an async function.

LANGUAGE: javascript
CODE:
await Promise.resolve(console.log('🎉'));
// → 🎉

----------------------------------------

TITLE: Mixing Logical Operators with Nullish Coalescing in JavaScript
DESCRIPTION: This snippet shows how to correctly mix nullish coalescing with other logical operators. Explicit parentheses are required to avoid ambiguity and ensure correct operator precedence.

LANGUAGE: javascript
CODE:
// Explicit parentheses groups are required to mix
(lhs && middle) ?? rhs;
lhs && (middle ?? rhs);

(lhs ?? middle) && rhs;
lhs ?? (middle && rhs);

(lhs || middle) ?? rhs;
lhs || (middle ?? rhs);

(lhs ?? middle) || rhs;
lhs ?? (middle || rhs);

----------------------------------------

TITLE: Using JSON.parse for Performance Optimization
DESCRIPTION: Demonstrates how to embed JSON data using JSON.parse for improved performance with large objects, including proper string escaping.

LANGUAGE: javascript
CODE:
const data = {
  LineTerminators: '\n\r  ',
};

const json = JSON.stringify(data);

const jsStringLiteral = JSON.stringify(json);
const program = `const data = JSON.parse(${jsStringLiteral});`;

saveToDisk(filePath, program);

----------------------------------------

TITLE: Comparing Object Spread Properties with Object.assign() in JavaScript
DESCRIPTION: This snippet shows how object spread properties can be used as an alternative to Object.assign() for shallow cloning and merging objects.

LANGUAGE: javascript
CODE:
// Shallow-clone an object:
const data = { x: 42, y: 27, label: 'Treasure' };
// The old way:
const clone1 = Object.assign({}, data);
// The new way:
const clone2 = { ...data };
// Either results in:
// { x: 42, y: 27, label: 'Treasure' }

// Merge two objects:
const defaultSettings = { logWarnings: false, logErrors: false };
const userSettings = { logErrors: true };
// The old way:
const settings1 = Object.assign({}, defaultSettings, userSettings);
// The new way:
const settings2 = { ...defaultSettings, ...userSettings };
// Either results in:
// { logWarnings: false, logErrors: true }

----------------------------------------

TITLE: Modern String.matchAll Implementation
DESCRIPTION: Demonstrates the new String.matchAll method that simplifies getting full match information using a for-of loop.

LANGUAGE: javascript
CODE:
const string = 'Magic hex numbers: DEADBEEF CAFE';
const regex = /\b\p{ASCII_Hex_Digit}+\b/gu;
for (const match of string.matchAll(regex)) {
  console.log(match);
}

// Output:
//
// [ 'DEADBEEF', index: 19, input: 'Magic hex numbers: DEADBEEF CAFE' ]
// [ 'CAFE',     index: 28, input: 'Magic hex numbers: DEADBEEF CAFE' ]

----------------------------------------

TITLE: WeakMap and WeakSet Usage Example
DESCRIPTION: Shows how WeakMap and WeakSet allow objects to be garbage collected even when referenced as keys.

LANGUAGE: javascript
CODE:
const wm = new WeakMap();
{
  const ref = {};
  const metaData = 'foo';
  wm.set(ref, metaData);
  wm.get(ref);
}

const ws = new WeakSet();
{
  const ref = {};
  ws.add(ref);
  ws.has(ref);
}

----------------------------------------

TITLE: Implementing Arrow Functions in JavaScript
DESCRIPTION: Demonstrates the usage of ES2015 Arrow Functions for streamlined code compared to traditional function syntax, showing array mapping example.

LANGUAGE: javascript
CODE:
const data = [0, 1, 3];
// Code without Arrow Functions
const convertedData = data.map(function(value) { return value * 2; });
console.log(convertedData);
// Code with Arrow Functions
const convertedData = data.map(value => value * 2);
console.log(convertedData);

----------------------------------------

TITLE: Converting Iterator to Array with .toArray()
DESCRIPTION: Demonstrates converting iterator values to an array using toArray() helper. The example shows converting limited blog posts to an array.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

const arr = posts.values().take(10).toArray();

----------------------------------------

TITLE: Mapping Iterator Values with .map()
DESCRIPTION: Demonstrates using the map() helper to transform iterator values. The example shows mapping blog post elements to their text content.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

for (const post of posts.values().map((x) => x.textContent)) {
  console.log(post);
}

----------------------------------------

TITLE: Building a Custom Plural Formatter with Intl.PluralRules in JavaScript
DESCRIPTION: Shows how to create a custom formatter function using Intl.PluralRules. This example demonstrates combining the API with a Map of suffixes to format numbers with the correct plural form for 'cat' in English.

LANGUAGE: javascript
CODE:
const suffixes = new Map([
  // Note: in real-world scenarios, you wouldn't hardcode the plurals
  // like this; they'd be part of your translation files.
  ['one',   'cat'],
  ['other', 'cats'],
]);
const pr = new Intl.PluralRules('en-US');
const formatCats = (n) => {
  const rule = pr.select(n);
  const suffix = suffixes.get(rule);
  return `${n} ${suffix}`;
};

formatCats(1);   // '1 cat'
formatCats(0);   // '0 cats'
formatCats(0.5); // '0.5 cats'
formatCats(1.5); // '1.5 cats'
formatCats(2);   // '2 cats'

----------------------------------------

TITLE: WebAssembly Streaming Compilation Example in JavaScript
DESCRIPTION: Demonstrates how to use the WebAssembly streaming compilation API in combination with the fetch() API. This allows compilation to start while the WebAssembly module is still being downloaded.

LANGUAGE: javascript
CODE:
const module = await WebAssembly.compileStreaming(fetch('foo.wasm'));

----------------------------------------

TITLE: Combining Array.map and flat
DESCRIPTION: Demonstrates the traditional approach of mapping and then flattening an array in separate steps.

LANGUAGE: javascript
CODE:
[2, 3, 4].map(duplicate).flat(); // 🐌
// → [2, 2, 3, 3, 4, 4]

----------------------------------------

TITLE: Using Optional Chaining Operator for Property Access in JavaScript
DESCRIPTION: This snippet introduces the optional chaining operator (?.) for safer and more readable nested property access.

LANGUAGE: javascript
CODE:
// Still checks for errors and is much more readable.
const nameLength = db?.user?.name?.length;

----------------------------------------

TITLE: Object.assign Usage Example
DESCRIPTION: Demonstrates how to use Object.assign to merge objects and their properties in JavaScript.

LANGUAGE: javascript
CODE:
const target = { a: 'Hello, ' };
const source = { b: 'world!' };
// Merge the objects.
Object.assign(target, source);
console.log(target.a + target.b);

----------------------------------------

TITLE: Getting Currency Names in Simplified Chinese using Intl.DisplayNames
DESCRIPTION: This snippet demonstrates how to retrieve currency names in Simplified Chinese using ISO-4217 3-letter currency codes with the Intl.DisplayNames API.

LANGUAGE: javascript
CODE:
const currencyNames = new Intl.DisplayNames(['zh-Hans'], {type: 'currency'});
currencyNames.of('USD');
// → '美元'
currencyNames.of('EUR');
// → '欧元'
currencyNames.of('JPY');
// → '日元'
currencyNames.of('CNY');
// → '人民币'

----------------------------------------

TITLE: Demonstrating Number MAX_SAFE_INTEGER
DESCRIPTION: Shows the limitation of Number.MAX_SAFE_INTEGER in JavaScript and how incrementing beyond this limit leads to precision loss.

LANGUAGE: javascript
CODE:
const max = Number.MAX_SAFE_INTEGER;
// → 9_007_199_254_740_991

max + 1;
// → 9_007_199_254_740_992 ✅

max + 2;
// → 9_007_199_254_740_992 ❌

----------------------------------------

TITLE: Dynamic Module Import with Promises
DESCRIPTION: Example of dynamic import using Promise-based syntax.

LANGUAGE: html
CODE:
<script type="module">
  const moduleSpecifier = './utils.mjs';
  import(moduleSpecifier)
    .then((module) => {
      module.default();
      // → logs 'Hi from the default export!'
      module.doStuff();
      // → logs 'Doing stuff…'
    });
</script>

----------------------------------------

TITLE: Illustrating Common Pitfalls with String#replace in JavaScript
DESCRIPTION: Example demonstrating the challenges and potential errors when using String#replace for global substring replacement, especially with special characters.

LANGUAGE: javascript
CODE:
const queryString = 'q=query+string+parameters';

queryString.replace('+', ' ');
// → 'q=query string+parameters' ❌
// Only the first occurrence gets replaced.

queryString.replace(/+/, ' ');
// → SyntaxError: invalid regular expression ❌
// As it turns out, `+` is a special character within regexp patterns.

queryString.replace(/\+/, ' ');
// → 'q=query string+parameters' ❌
// Escaping special regexp characters makes the regexp valid, but
// this still only replaces the first occurrence of `+` in the string.

queryString.replace(/\+/g, ' ');
// → 'q=query string parameters' ✅
// Escaping special regexp characters AND using the `g` flag makes it work.

----------------------------------------

TITLE: Optional Dynamic Property Access in JavaScript
DESCRIPTION: This snippet shows how to use the optional chaining operator for dynamic property access.

LANGUAGE: javascript
CODE:
// Extends the capabilities of the static property access
// with a dynamically generated property name.
const optionName = 'optional setting';
const optionLength = db?.user?.preferences?.[optionName].length;

----------------------------------------

TITLE: Comparing JavaScript Object Literal vs JSON.parse
DESCRIPTION: Demonstrates the performance difference between using a JavaScript object literal and JSON.parse for large data structures. JSON.parse is generally faster for objects 10 kB or larger.

LANGUAGE: javascript
CODE:
const data = { foo: 42, bar: 1337 }; // 🐌

LANGUAGE: javascript
CODE:
const data = JSON.parse('{"foo":42,"bar":1337}'); // 🚀

----------------------------------------

TITLE: BigInt Type Checking and Comparison
DESCRIPTION: Shows type checking and comparison operations between BigInt and Number types, including strict and abstract equality.

LANGUAGE: javascript
CODE:
typeof 123;
// → 'number'
typeof 123n;
// → 'bigint'

42n === BigInt(42);
// → true
42n == 42;
// → true

----------------------------------------

TITLE: Manual SIMD Implementation of Array Multiplication in Rust
DESCRIPTION: This Rust function uses SIMD intrinsics to manually implement array multiplication, demonstrating how to use the std::arch::wasm32 namespace for fine-grained control over SIMD instructions.

LANGUAGE: rust
CODE:
#![feature(wasm_simd)]

use std::arch::wasm32::*;

pub unsafe fn multiply_arrays(out: &mut [i32], in_a: &[i32], in_b: &[i32]) {
  in_a.chunks(4)
    .zip(in_b.chunks(4))
    .zip(out.chunks_mut(4))
    .for_each(|((a, b), dst)| {
      let a = v128_load(a.as_ptr() as *const v128);
      let b = v128_load(b.as_ptr() as *const v128);
      let prod = i32x4_mul(a, b);
      v128_store(dst.as_mut_ptr() as *mut v128, prod);
    });
}

----------------------------------------

TITLE: Initializing an entropy pool using static block in JavaScript
DESCRIPTION: This snippet demonstrates how to use a static initialization block to initialize an entropy pool for a pseudo-random number generator class.

LANGUAGE: javascript
CODE:
class MyPRNG {
  constructor(seed) {
    if (seed === undefined) {
      if (MyPRNG.entropyPool.length === 0) {
        throw new Error('Entropy pool exhausted');
      }
      seed = MyPRNG.entropyPool.pop();
    }
    this.seed = seed;
  }

  getRandom() { … }

  static entropyPool = [];
  static {
    for (let i = 0; i < 512; i++) {
      this.entropyPool.push(probeEntropySource());
    }
  }
}

----------------------------------------

TITLE: Using multiple static blocks and fields in JavaScript
DESCRIPTION: This snippet illustrates how multiple static blocks and fields are evaluated in textual order within a class definition.

LANGUAGE: javascript
CODE:
class C {
  static field1 = console.log('field 1');
  static {
    console.log('static block 1');
  }
  static field2 = console.log('field 2');
  static {
    console.log('static block 2');
  }
}
// → field 1
//   static block 1
//   field 2
//   static block 2

----------------------------------------

TITLE: Static Public and Private Properties
DESCRIPTION: Demonstrates usage of static public and private properties and methods in a class.

LANGUAGE: javascript
CODE:
class FakeMath {
  static PI = 22 / 7;
  static #totallyRandomNumber = 4;
  static #computeRandomNumber() {
    return FakeMath.#totallyRandomNumber;
  }
  static random() {
    console.log('I heard you like random numbers…');
    return FakeMath.#computeRandomNumber();
  }
}

----------------------------------------

TITLE: Basic Numeric Literals With Separators
DESCRIPTION: Example showing the same numbers using underscores as thousand separators for improved readability.

LANGUAGE: javascript
CODE:
1_000_000_000_000
    1_019_436_871.42

----------------------------------------

TITLE: ES2015 Class Implementation
DESCRIPTION: Shows traditional ES2015 class implementation with constructor and prototype methods.

LANGUAGE: javascript
CODE:
class IncreasingCounter {
  constructor() {
    this._count = 0;
  }
  get value() {
    console.log('Getting the current value!');
    return this._count;
  }
  increment() {
    this._count++;
  }
}

----------------------------------------

TITLE: Using Array.prototype.flat with Default Depth
DESCRIPTION: Demonstrates using the flat() method with its default depth of 1, showing how it flattens only one level of nesting.

LANGUAGE: javascript
CODE:
array.flat();
// → [1, 2, [3]]

// …is equivalent to:
array.flat(1);
// → [1, 2, [3]]

----------------------------------------

TITLE: Creating V8 Custom Startup Snapshot
DESCRIPTION: Demonstrates creating a custom V8 snapshot by calling v8::V8::CreateSnapshotDataBlob with JavaScript code to be embedded. The snapshot captures the V8 heap state after executing the provided script.

LANGUAGE: cpp
CODE:
v8::V8::CreateSnapshotDataBlob(javascript_code)

----------------------------------------

TITLE: Implementing RegExp Match Indices in JavaScript
DESCRIPTION: Demonstrates the new RegExp match indices feature that provides start and end positions of captured groups using the /d flag. Returns an array of indices accessible through the .indices property on match objects.

LANGUAGE: javascript
CODE:
const re = /(a)(b)/d;      // Note the /d flag.
const m = re.exec('ab');
console.log(m.indices[0]); // Index 0 is the whole match.
// → [0, 2]
console.log(m.indices[1]); // Index 1 is the 1st capture group.
// → [0, 1]
console.log(m.indices[2]); // Index 2 is the 2nd capture group.
// → [1, 2]

----------------------------------------

TITLE: Exporting namespace object in JavaScript modules
DESCRIPTION: Shows the new syntax for re-exporting all properties within a namespace from another module.

LANGUAGE: javascript
CODE:
export * as utils from './utils.mjs';

----------------------------------------

TITLE: Implementing Error Cause Chaining in JavaScript
DESCRIPTION: Shows how to use the new Error cause feature that allows chaining errors by passing an options bag with a cause property to the Error constructor.

LANGUAGE: javascript
CODE:
const parentError = new Error('parent');
const error = new Error('parent', { cause: parentError });
console.log(error.cause === parentError);
// → true

----------------------------------------

TITLE: Defining Module Exports in JavaScript
DESCRIPTION: Example of a JavaScript module with default and named exports.

LANGUAGE: javascript
CODE:
// Default export
export default () => {
  console.log('Hi from the default export!');
};

// Named export `doStuff`
export const doStuff = () => {
  console.log('Doing stuff…');
};

----------------------------------------

TITLE: Implementing Legacy Global This Detection in JavaScript
DESCRIPTION: A naive implementation showing how global this was traditionally accessed across different environments. This approach checks for various global object identifiers but is not recommended due to potential issues.

LANGUAGE: javascript
CODE:
const getGlobalThis = () => {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof self !== 'undefined') return self;
  if (typeof window !== 'undefined') return window;
  if (typeof global !== 'undefined') return global;
  // Note: this might still return the wrong result!
  if (typeof this !== 'undefined') return this;
  throw new Error('Unable to locate global `this`');
};
const theGlobalThis = getGlobalThis();

----------------------------------------

TITLE: Using FinalizationRegistry in JavaScript
DESCRIPTION: This snippet demonstrates the use of FinalizationRegistry in JavaScript, which allows registering callbacks to be invoked after an object is garbage collected.

LANGUAGE: javascript
CODE:
const registry = new FinalizationRegistry((heldValue) => {
  console.log(heldValue);
});

(function () {
  const garbage = {};
  registry.register(garbage, 42);
  // The second argument is the "held" value which gets passed
  // to the finalizer when the first argument is garbage collected.
})();

----------------------------------------

TITLE: Module Script Tag Implementation
DESCRIPTION: Shows how to include JavaScript modules in HTML with fallback for non-supporting browsers.

LANGUAGE: html
CODE:
<script type="module" src="main.mjs"></script>
<script nomodule src="fallback.js"></script>

----------------------------------------

TITLE: Demonstrating Bound Callback Pattern in JavaScript
DESCRIPTION: Shows the improved performance pattern using Function.prototype.bind for callbacks, comparing traditional callback usage with the bound callback pattern that now has equivalent performance.

LANGUAGE: javascript
CODE:
doSomething(callback, someObj);

LANGUAGE: javascript
CODE:
doSomething(callback.bind(someObj));

----------------------------------------

TITLE: Private Fields with Object.create
DESCRIPTION: Shows how private fields behave with objects created using Object.create or prototype manipulation.

LANGUAGE: javascript
CODE:
const a = new A();
const o = Object.create(a);
A.test(o); // false, private field is inherited and not owned
A.test(o.__proto__); // true

const o2 = {};
Object.setPrototypeOf(o2, a);
A.test(o2); // false, private field is inherited and not owned
A.test(o2.__proto__); // true

----------------------------------------

TITLE: Initializing and Using TypedArray in JavaScript
DESCRIPTION: This snippet demonstrates how to create an ArrayBuffer and use a TypedArray (Int16Array) to access and modify its contents.

LANGUAGE: javascript
CODE:
const buffer = new ArrayBuffer(32);
const array = new Int16Array(buffer);

for (let i = 0; i < array.length; i++) {
  array[i] = i * i;
}

console.log(array);
// → [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]

----------------------------------------

TITLE: Implementing Interceptors in V8 (C++)
DESCRIPTION: An example of how to implement a named property interceptor in V8.

LANGUAGE: C++
CODE:
void JsHttpRequestProcessor::MapGet(v8::Local<v8::String> name,
                                    const v8::PropertyCallbackInfo<Value>& info) {
  map<string, string> *obj = UnwrapMap(info.Holder());
  string key = ObjectToString(name);
  map<string, string>::iterator iter = obj->find(key);
  if (iter == obj->end()) return;
  const string &value = (*iter).second;
  info.GetReturnValue().Set(v8::String::NewFromUtf8(
      value.c_str(), v8::String::kNormalString, value.length()));
}

----------------------------------------

TITLE: Implementing Class Static Initialization Blocks in JavaScript - V8 9.4
DESCRIPTION: Demonstrates the new class static initialization blocks feature that allows executing code during class evaluation. This feature is available by default in V8 9.4 without requiring the --harmony-class-static-blocks flag.

LANGUAGE: javascript
CODE:
class C {
  // This block will run when the class itself is evaluated
  static { console.log("C's static block"); }
}

----------------------------------------

TITLE: Basic Atomics.waitAsync Usage Example in JavaScript
DESCRIPTION: Demonstrates the fundamental usage of Atomics.waitAsync with a SharedArrayBuffer, showing how to handle both immediate and promise-based results.

LANGUAGE: javascript
CODE:
const sab = new SharedArrayBuffer(16);
const i32a = new Int32Array(sab);
const result = Atomics.waitAsync(i32a, 0, 0, 1000);

if (result.value === 'not-equal') {
  // The value in the SharedArrayBuffer was not the expected one.
} else {
  result.value instanceof Promise; // true
  result.value.then(
    (value) => {
      if (value == 'ok') { /* notified */ }
      else { /* value is 'timed-out' */ }
    });
}

// In this thread, or in another thread:
Atomics.notify(i32a, 0);

----------------------------------------

TITLE: Traditional Error Handling with Custom Error Class
DESCRIPTION: Example showing the traditional approach of handling errors by catching and rethrowing with a custom error class to add context. This demonstrates the limitations of the old approach where custom error classes needed to be created.

LANGUAGE: javascript
CODE:
function doWork() {
  try {
    doSomeWork();
  } catch (err) {
    throw new CustomError('Some work failed', err);
  }
  doMoreWork();
}

try {
  doWork();
} catch (err) {
  // Is |err| coming from |doSomeWork| or |doMoreWork|?
}

----------------------------------------

TITLE: Stream Processing with Async Iteration
DESCRIPTION: Modern implementation of stream processing using async iteration with for-await-of loop.

LANGUAGE: javascript
CODE:
const http = require('http');

http.createServer(async (req, res) => {
  try {
    let body = '';
    req.setEncoding('utf8');
    for await (const chunk of req) {
      body += chunk;
    }
    res.write(body);
    res.end();
  } catch {
    res.statusCode = 500;
    res.end();
  }
}).listen(1337);

----------------------------------------

TITLE: Creating Intl.DisplayNames for Region Names in JavaScript
DESCRIPTION: This snippet demonstrates how to create an Intl.DisplayNames object to get region names in English using ISO-3166 2-letter country codes.

LANGUAGE: javascript
CODE:
const regionNames = new Intl.DisplayNames(['en'], { type: 'region' });
regionNames.of('US');
// → 'United States'
regionNames.of('BA');
// → 'Bosnia & Herzegovina'
regionNames.of('MM');
// → 'Myanmar (Burma)'

----------------------------------------

TITLE: Demonstrating Private Brand Checks in JavaScript
DESCRIPTION: This snippet showcases the new private brand checks feature in V8 9.1, which extends the 'in' operator to work with private fields' #-names. It demonstrates how to check for the presence of a private field in an object.

LANGUAGE: javascript
CODE:
class A {
  static test(obj) {
    console.log(#foo in obj);
  }

  #foo = 0;
}

A.test(new A()); // true
A.test({}); // false

----------------------------------------

TITLE: Proxy Apply Trap Example
DESCRIPTION: Shows how to create a proxy with an apply trap that gets called when the proxy is used as a function.

LANGUAGE: javascript
CODE:
function foo(…) { … }
const g = new Proxy({ … }, {
  apply: foo,
});
g(1, 2);

----------------------------------------

TITLE: Using V8 Deprecation Macros in C++
DESCRIPTION: Example of using V8_DEPRECATED macro to safely deprecate and rename a function in V8's public API. This demonstrates the proper way to maintain backwards compatibility while evolving the API.

LANGUAGE: cpp
CODE:
// Adding new function
void bar();

// Deprecating old function
V8_DEPRECATED("Use bar instead") void foo();


----------------------------------------

TITLE: Basic Proxy Usage with Get Trap
DESCRIPTION: Demonstrates creating a proxy object that logs property access attempts by implementing a get trap handler.

LANGUAGE: javascript
CODE:
const target = {};
const callTracer = new Proxy(target, {
  get: (target, name, receiver) => {
    console.log(`get was called for: ${name}`);
    return target[name];
  }
});

callTracer.property = 'value';
console.log(callTracer.property);
// get was called for: property
// value

----------------------------------------

TITLE: Demonstrating Updated Function.prototype.toString Behavior in JavaScript
DESCRIPTION: Shows the difference between old and new Function.prototype.toString() implementation. The new behavior preserves comments and whitespace from the original function declaration, while the old behavior stripped them out.

LANGUAGE: javascript
CODE:
// Note the comment between the `function` keyword
// and the function name, as well as the space following
// the function name.
function /* a comment */ foo () {}

// Previously, in V8:
foo.toString();
// → 'function foo() {}'
//             ^ no comment
//                ^ no space

// Now:
foo.toString();
// → 'function /* comment */ foo () {}'

----------------------------------------

TITLE: Using Import Attributes with Static Import
DESCRIPTION: Demonstrates the new 'with' syntax for importing JSON modules using import attributes. The example shows how to import a JSON file and access its contents.

LANGUAGE: javascript
CODE:
// main.mjs
//
// New 'with' syntax.
import json from './foo.json' with { type: 'json' };
console.log(json.answer); // 42

----------------------------------------

TITLE: Using Async/Await Syntax
DESCRIPTION: Modern implementation using async/await syntax that makes asynchronous code appear more synchronous and easier to understand.

LANGUAGE: javascript
CODE:
async function handler() {
  await validateParams();
  const dbResults = await dbQuery();
  const results = await serviceCall(dbResults);
  console.log(results);
  return results;
}

----------------------------------------

TITLE: JavaScript RegExp Capturing Groups in Lookaround Assertions
DESCRIPTION: Illustrates the difference in capture group behavior between lookahead and lookbehind assertions.

LANGUAGE: javascript
CODE:
/h(?=(\w)+)/.exec('hodor');  // ['h', 'r']
/(?<=(\w)+)r/.exec('hodor'); // ['r', 'h']

----------------------------------------

TITLE: WeakRef Implementation with FinalizationRegistry
DESCRIPTION: Complete implementation using WeakRef and FinalizationRegistry to properly manage event listener cleanup and prevent memory leaks.

LANGUAGE: javascript
CODE:
const gListenersRegistry = new FinalizationRegistry(({ socket, wrapper }) => {
  socket.removeEventListener('message', wrapper);
});

function addWeakListener(socket, listener) {
  const weakRef = new WeakRef(listener);
  const wrapper = (ev) => { weakRef.deref()?.(ev); };
  gListenersRegistry.register(listener, { socket, wrapper });
  socket.addEventListener('message', wrapper);
}

class MovingAvg {
  constructor(socket) {
    this.events = [];
    this.listener = (ev) => { this.events.push(ev); };
    addWeakListener(socket, this.listener);
  }
}

----------------------------------------

TITLE: Dynamic Import with Assertions
DESCRIPTION: Shows how to use import assertions with dynamic import() syntax.

LANGUAGE: javascript
CODE:
const jsonModule = await import('./foo.json', {
  assert: { type: 'json' }
});
console.log(jsonModule.default.answer); // 42

----------------------------------------

TITLE: Using Array.prototype.findIndex in JavaScript
DESCRIPTION: Shows how to use the findIndex method to find the index of the first element in an array that satisfies a given condition. Returns the index if found, or -1 if not found.

LANGUAGE: javascript
CODE:
inputArray.findIndex((element) => element.v % 2 === 0);
// → 1
inputArray.findIndex((element) => element.v % 7 === 0);
// → -1

----------------------------------------

TITLE: Basic Stack Trace Example - JavaScript
DESCRIPTION: Example showing a formatted stack trace from a ReferenceError in V8

LANGUAGE: text
CODE:
ReferenceError: FAIL is not defined
   at Constraint.execute (deltablue.js:525:2)
   at Constraint.recalculate (deltablue.js:424:21)
   at Planner.addPropagate (deltablue.js:701:6)
   at Constraint.satisfy (deltablue.js:184:15)
   at Planner.incrementalAdd (deltablue.js:591:21)
   at Constraint.addConstraint (deltablue.js:162:10)
   at Constraint.BinaryConstraint (deltablue.js:346:7)
   at Constraint.EqualityConstraint (deltablue.js:515:38)
   at chainTest (deltablue.js:807:6)
   at deltaBlue (deltablue.js:879:2)

----------------------------------------

TITLE: Using Intl.PluralRules for English Pluralization in JavaScript
DESCRIPTION: Demonstrates how to use the Intl.PluralRules API to determine the correct plural form for numbers in English. This snippet shows the basic usage of the API without any formatting.

LANGUAGE: javascript
CODE:
const pr = new Intl.PluralRules('en-US');
pr.select(0);   // 'other' (e.g. '0 cats')
pr.select(0.5); // 'other' (e.g. '0.5 cats')
pr.select(1);   // 'one'   (e.g. '1 cat')
pr.select(1.5); // 'other' (e.g. '0.5 cats')
pr.select(2);   // 'other' (e.g. '0.5 cats')

----------------------------------------

TITLE: Basic Intl.NumberFormat Usage in JavaScript
DESCRIPTION: Demonstrates creating a formatter instance and using the format and formatToParts methods for locale-aware number formatting.

LANGUAGE: javascript
CODE:
const formatter = new Intl.NumberFormat('en');
formatter.format(987654.321);
// → '987,654.321'
formatter.formatToParts(987654.321);
// → [
// →   { type: 'integer', value: '987' },
// →   { type: 'group', value: ',' },
// →   { type: 'integer', value: '654' },
// →   { type: 'decimal', value: '.' },
// →   { type: 'fraction', value: '321' }
// → ]

----------------------------------------

TITLE: Traditional Private Field Error Handling
DESCRIPTION: Shows the traditional try-catch approach for handling non-existent private fields.

LANGUAGE: javascript
CODE:
class D {
  use(obj) {
    try {
      obj.#foo;
    } catch {
      // Fallback for the case obj didn't have #foo
    }
  }
  #foo = 0;
}

----------------------------------------

TITLE: JavaScript Array Sort with toString Example
DESCRIPTION: Shows how Array.prototype.sort handles objects with custom toString implementations when no comparison function is provided.

LANGUAGE: javascript
CODE:
const array = [4, 2, 5, 3, 1];

array.push({
  toString() {
    // Arbitrary code goes here, e.g. `array.push(1);`.
    return '42';
  }
});

// Sort without a comparison function.
array.sort();

----------------------------------------

TITLE: DateTime Formatting with Style Options
DESCRIPTION: Demonstrates the new timeStyle and dateStyle options in Intl.DateTimeFormat API.

LANGUAGE: javascript
CODE:
const dtf = new Intl.DateTimeFormat('de', {
  timeStyle: 'medium',
  dateStyle: 'short'
});
dtf.format(Date.now());
// → '19.06.19, 13:33:37'

----------------------------------------

TITLE: Creating and Using Intl.Locale Instance
DESCRIPTION: Demonstrates how to create a new Intl.Locale instance with specific locale preferences and access various locale properties. The example shows accessing language, calendar, hour cycle, region information, and string representation of the locale.

LANGUAGE: javascript
CODE:
const locale = new Intl.Locale('es-419-u-hc-h12', {
  calendar: 'gregory'
});
locale.language;
// → 'es'
locale.calendar;
// → 'gregory'
locale.hourCycle;
// → 'h12'
locale.region;
// → '419'
locale.toString();
// → 'es-419-u-ca-gregory-hc-h12'

----------------------------------------

TITLE: Creating Holes in Arrays and Transitioning to HOLEY Elements Kind in JavaScript
DESCRIPTION: Shows how creating holes in an array by assigning to an index beyond its length transitions the elements kind from PACKED to HOLEY.

LANGUAGE: JavaScript
CODE:
const array = [1, 2, 3, 4.56, 'x'];
// elements kind: PACKED_ELEMENTS
array.length; // 5
array[9] = 1; // array[5] until array[8] are now holes
// elements kind: HOLEY_ELEMENTS

----------------------------------------

TITLE: Object Transformation using Object.fromEntries in JavaScript
DESCRIPTION: Demonstrates how to transform objects by combining Object.fromEntries with array methods like filter and map to modify object properties and values.

LANGUAGE: javascript
CODE:
const object = { x: 42, y: 50, abc: 9001 };
const result = Object.fromEntries(
  Object.entries(object)
    .filter(([ key, value ]) => key.length === 1)
    .map(([ key, value ]) => [ key, value * 2 ])
);
// → { x: 84, y: 100 }

----------------------------------------

TITLE: Demonstrating Object.entries API Usage in JavaScript
DESCRIPTION: Shows how to use Object.entries to convert an object into an array of key-value pairs.

LANGUAGE: javascript
CODE:
const object = { x: 42, y: 50 };
const entries = Object.entries(object);
// → [['x', 42], ['y', 50]]

----------------------------------------

TITLE: Set notation with intersection operator in RegExp `v` flag
DESCRIPTION: Shows how to use the intersection operator (`&&`) to match characters that belong to multiple Unicode properties simultaneously.

LANGUAGE: javascript
CODE:
const re = /[\p{Script_Extensions=Greek}&&\p{Letter}]/v;
// U+03C0 GREEK SMALL LETTER PI
re.test('π'); // → true
// U+1018A GREEK ZERO SIGN
re.test('𐆊'); // → false

----------------------------------------

TITLE: Private Brand Checks Basic Usage
DESCRIPTION: Shows how to use private brand checks to test for private field existence within a class context.

LANGUAGE: javascript
CODE:
class A {
  static test(obj) {
    console.log(#foo in obj);
  }
  #foo = 0;
}

A.test(new A()); // true
A.test({}); // false

class B {
  #foo = 0;
}

A.test(new B()); // false; it's not the same #foo

----------------------------------------

TITLE: Basic Array Spread Operation Example
DESCRIPTION: Demonstrates basic usage of spread operator to combine multiple arrays into a new array.

LANGUAGE: javascript
CODE:
const a = [2, 3];
const b = [5, 6, 7];
const result = [1, ...a, 4, ...b];
// → [1, 2, 3, 4, 5, 6, 7]

----------------------------------------

TITLE: Basic String.matchAll Usage with Hex Numbers
DESCRIPTION: Demonstrates basic usage of String.match to find hexadecimal numbers in a string. Shows the limitation of only getting substrings without additional match information.

LANGUAGE: javascript
CODE:
const string = 'Magic hex numbers: DEADBEEF CAFE';
const regex = /\b\p{ASCII_Hex_Digit}+\b/gu;
for (const match of string.match(regex)) {
  console.log(match);
}

// Output:
//
// 'DEADBEEF'
// 'CAFE'

----------------------------------------

TITLE: Using Intl.PluralRules in JavaScript
DESCRIPTION: Demonstrates the new Intl.PluralRules API for handling internationalized pluralization rules.

LANGUAGE: javascript
CODE:
Intl.PluralRules

----------------------------------------

TITLE: Detecting SIMD Support and Loading Appropriate Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the wasm-feature-detect library to check for SIMD support in the browser and dynamically load the appropriate WebAssembly module.

LANGUAGE: javascript
CODE:
import { simd } from 'wasm-feature-detect';

(async () => {
  const hasSIMD = await simd();
  const module = await (
    hasSIMD
      ? import('./module-with-simd.js')
      : import('./module-without-simd.js')
  );
  // …now use `module` as you normally would
})();

----------------------------------------

TITLE: Basic Strong Reference Example
DESCRIPTION: Demonstrates how objects are strongly referenced in JavaScript, preventing garbage collection while references exist.

LANGUAGE: javascript
CODE:
const ref = { x: 42, y: 51 };

----------------------------------------

TITLE: Using Intl.RelativeTimeFormat with Auto Numeric Option
DESCRIPTION: This example shows how to use Intl.RelativeTimeFormat with the 'auto' numeric option to get more natural language output for certain time expressions.

LANGUAGE: javascript
CODE:
const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

rtf.format(-1, 'day');
// → 'yesterday'

rtf.format(0, 'day');
// → 'today'

rtf.format(1, 'day');
// → 'tomorrow'

rtf.format(-1, 'week');
// → 'last week'

rtf.format(0, 'week');
// → 'this week'

rtf.format(1, 'week');
// → 'next week'

----------------------------------------

TITLE: Getting declaration position using RegExp in JavaScript
DESCRIPTION: This function uses a regular expression to find the position of a variable declaration in a given source code string.

LANGUAGE: javascript
CODE:
function getDeclarationPosition(source) {
  const re = /(let|const|var)\s+([a-zA-Z_$][0-9a-zA-Z_$]*)/;
  const match = re.exec(source);
  if (!match) return -1;
  return match.index;
}

----------------------------------------

TITLE: Promise-based URL Fetching in JavaScript
DESCRIPTION: Example of a traditional Promise-based function that fetches a URL and logs its response text, using .then() chains and error handling with .catch().

LANGUAGE: javascript
CODE:
function logFetch(url) {
  return fetch(url)
    .then(response => response.text())
    .then(text => {
      console.log(text);
    }).catch(err => {
      console.error('fetch failed', err);
    });
}

----------------------------------------

TITLE: Handling Special Replacement Patterns in String#replaceAll
DESCRIPTION: Examples showing how to handle special replacement patterns when using String#replaceAll, including a workaround using a replacer function.

LANGUAGE: javascript
CODE:
'xyz'.replaceAll('y', '$$');
// → 'x$z' (not 'x$$z')

'xyz'.replaceAll('y', () => '$$');
// → 'x$$z'

----------------------------------------

TITLE: Testing All Values with .every()
DESCRIPTION: Shows using every() helper to test if all iterator values meet a condition. The example checks if all posts contain 'V8' in the title.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

posts.values().every((x) => x.textContent.includes('V8'));

----------------------------------------

TITLE: Demonstrating Prototype Chain Lookup in JavaScript
DESCRIPTION: This code snippet demonstrates how properties are looked up in the prototype chain. It creates two objects, sets one as the prototype of the other, and accesses a property from the prototype.

LANGUAGE: javascript
CODE:
const o1 = { foo: 99 };
const o2 = {};
Object.setPrototypeOf(o2, o1);
o2.foo;
// → 99

----------------------------------------

TITLE: Using Spread Operator for Array Merging in JavaScript
DESCRIPTION: Demonstrates how the spread operator simplifies array merging compared to the concat method. It shows both the old approach using concat and the new approach using the spread operator.

LANGUAGE: javascript
CODE:
// Merging arrays
// Code without spread operator
const inner = [3, 4];
const merged = [0, 1, 2].concat(inner, [5]);

// Code with spread operator
const inner = [3, 4];
const merged = [0, 1, 2, ...inner, 5];

----------------------------------------

TITLE: Using Intl.Locale in JavaScript
DESCRIPTION: Demonstrates the usage of Intl.Locale to create and manipulate locale objects, extracting various locale-specific preferences.

LANGUAGE: javascript
CODE:
const locale = new Intl.Locale('es-419-u-hc-h12', {
  calendar: 'gregory'
});
locale.language;
// → 'es'
locale.calendar;
// → 'gregory'
locale.hourCycle;
// → 'h12'
locale.region;
// → '419'
locale.toString();
// → 'es-419-u-ca-gregory-hc-h12'

----------------------------------------

TITLE: Full API Definition for Intl.DisplayNames in JavaScript
DESCRIPTION: This code block outlines the full API for Intl.DisplayNames, including the constructor and prototype method signatures.

LANGUAGE: javascript
CODE:
Intl.DisplayNames(locales, options)
Intl.DisplayNames.prototype.of( code )

----------------------------------------

TITLE: Demonstrating trimStart() and trimEnd() in JavaScript
DESCRIPTION: This snippet shows the usage of the new trimStart() and trimEnd() methods introduced in ES2019, along with the existing trim() method from ES5. It demonstrates how these methods remove whitespace from the beginning, end, or both sides of a string.

LANGUAGE: javascript
CODE:
const string = '  hello world  ';
string.trimStart();
// → 'hello world  '
string.trimEnd();
// → '  hello world'
string.trim(); // ES5
// → 'hello world'

----------------------------------------

TITLE: Basic Super Property Access Example
DESCRIPTION: Demonstrates basic class inheritance and super property access using class syntax. Shows how a derived class B can access properties from its parent class A using the super keyword.

LANGUAGE: javascript
CODE:
class A { }
A.prototype.x = 100;

class B extends A {
  m() {
    return super.x;
  }
}
const b = new B();
b.m();

----------------------------------------

TITLE: Embedding JSON Data into JavaScript Programs
DESCRIPTION: Shows how to create a valid JavaScript program by embedding JSON data using JSON.stringify, taking advantage of JSON being a subset of ECMAScript.

LANGUAGE: javascript
CODE:
const data = {
  LineTerminators: '\n\r  ',
  // Note: the string contains 4 characters: '\n\r\u2028\u2029'.
};

const jsObjectLiteral = JSON.stringify(data);

const program = `const data = ${jsObjectLiteral};`;

saveToDisk(filePath, program);

----------------------------------------

TITLE: Filtering Iterator Values with .filter()
DESCRIPTION: Shows how to use filter() helper to select specific iterator values based on a condition. The example filters blog posts containing 'V8' in their title.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

for (const post of posts.values().filter((x) => x.textContent.includes('V8'))) {
  console.log(post);
}

----------------------------------------

TITLE: Illustrating Lexical Closures in JavaScript
DESCRIPTION: This example demonstrates how inner functions can reference variables from outer functions, necessitating heap allocation for certain variables.

LANGUAGE: javascript
CODE:
function make_f(d) { // ← declaration of `d`
  return function inner(a, b) {
    const c = a + b + d; // ← reference to `d`
    return c;
  };
}

const f = make_f(10);

function g() {
  return f(1, 2);
}

----------------------------------------

TITLE: Optimized FiberNode Initialization for V8
DESCRIPTION: This snippet demonstrates how to optimize the FiberNode class to avoid V8's performance cliff by ensuring Double representation from the start.

LANGUAGE: javascript
CODE:
class FiberNode {
  constructor() {
    // Force `Double` representation from the start.
    this.actualStartTime = Number.NaN;
    // Later, you can still initialize to the value you want:
    this.actualStartTime = 0;
    Object.preventExtensions(this);
  }
}

const node1 = new FiberNode();
const node2 = new FiberNode();

----------------------------------------

TITLE: Demonstrating Endianness with DataView in JavaScript
DESCRIPTION: This snippet illustrates how DataView allows for specifying endianness when reading and writing data, which is useful for handling data from external sources.

LANGUAGE: javascript
CODE:
const buffer = new ArrayBuffer(32);
const view = new DataView(buffer);

view.setInt32(0, 0x8BADF00D, true); // Little-endian write.
console.log(view.getInt32(0, false)); // Big-endian read.
// Expected output: 0x0DF0AD8B (233876875)

----------------------------------------

TITLE: JavaScript Function Receiving 64-bit Integer from WebAssembly
DESCRIPTION: This JavaScript code defines a function that receives a 64-bit integer from WebAssembly and logs it.

LANGUAGE: javascript
CODE:
mergeInto(LibraryManager.library, {
  send_i64_to_js: function(value) {
    console.log("JS received: 0x" + value.toString(16));
  }
});

----------------------------------------

TITLE: Optimizing Array Access in JavaScript
DESCRIPTION: An example of a performance issue discovered in Babel where accessing the last element of an array could lead to slow property lookups. This snippet demonstrates the problematic code pattern that was optimized.

LANGUAGE: javascript
CODE:
value = items[items.length - 1];

----------------------------------------

TITLE: Demonstrating Function Call Stack in JavaScript
DESCRIPTION: This snippet shows how function calls are managed on the machine stack, illustrating the concept with functions 'f' and 'g'.

LANGUAGE: javascript
CODE:
function f(a, b) {
  const c = a + b;
  return c;
}

function g() {
  return f(1, 2);
  // The return instruction pointer of `f` now points here
  // (because when `f` `return`s, it returns here).
}

----------------------------------------

TITLE: Demonstrating Function Name Inference in JavaScript
DESCRIPTION: This snippet shows how function names are inferred for computed property names in ES2015, specifically for the Symbol.iterator method of a class.

LANGUAGE: javascript
CODE:
class Container {
  ...
  [Symbol.iterator]() { ... }
  ...
}
const c = new Container;
console.log(c[Symbol.iterator].name);
// → '[Symbol.iterator]'

----------------------------------------

TITLE: Defining a Class with Private and Public Fields in JavaScript
DESCRIPTION: Example of a class definition using both private (#a) and public (b) fields, demonstrating the syntax for class field declarations.

LANGUAGE: javascript
CODE:
class A {
  #a = 0;
  b = this.#a;
}

----------------------------------------

TITLE: Implementing Proxies in JavaScript (ES2015)
DESCRIPTION: This snippet demonstrates the creation and use of Proxies in JavaScript, including defining custom handlers for property access and the use of the Reflect API for default behavior.

LANGUAGE: javascript
CODE:
const target = {};
const handler = {
  get(target, name='world') {
    return `Hello, ${name}!`;
  }
};

const foo = new Proxy(target, handler);
foo.bar;
// → 'Hello, bar!'

const debugMe = new Proxy({}, {
  get(target, name, receiver) {
    console.log(`Debug: get called for field: ${name}`);
    return Reflect.get(target, name, receiver);
  },
  set(target, name, value, receiver) {
    console.log(`Debug: set called for field: ${name}, and value: ${value}`);
    return Reflect.set(target, name, value, receiver);
  }
});

debugMe.name = 'John Doe';
// Debug: set called for field: name, and value: John Doe
const title = `Mr. ${debugMe.name}`; // → 'Mr. John Doe'
// Debug: get called for field: name

----------------------------------------

TITLE: Explicit Comparison for Default Values in JavaScript
DESCRIPTION: This snippet shows a more explicit way to handle default values, comparing the 'enabled' property directly to false. This approach correctly handles all cases, including when 'enabled' is explicitly set to false.

LANGUAGE: javascript
CODE:
function Component(props) {
  const enable = props.enabled !== false;
  // …
}

----------------------------------------

TITLE: Demonstrating Relative Indexing with 'at' Method in JavaScript
DESCRIPTION: This snippet shows how to use the new 'at' method for relative indexing on arrays in JavaScript. It demonstrates accessing the last element of an array using a negative index.

LANGUAGE: JavaScript
CODE:
[1,2,3].at(-1)

----------------------------------------

TITLE: Demonstrating AssignmentExpression as Function Argument in JavaScript
DESCRIPTION: This snippet shows how an AssignmentExpression can be used as a function argument, assigning a value to a variable and passing that value to the function simultaneously.

LANGUAGE: javascript
CODE:
function simple(a) {
  console.log('The argument was ' + a);
}
simple(x = 1);
// → Logs "The argument was 1".
x;
// → 1

----------------------------------------

TITLE: JavaScript RegExp Back References in Lookbehind
DESCRIPTION: Demonstrates how back references work differently in lookbehind assertions due to reverse matching direction.

LANGUAGE: javascript
CODE:
/(?<=(o)d\1)r/.exec('hodor'); // null
/(?<=\1d(o))r/.exec('hodor'); // ['r', 'o']

----------------------------------------

TITLE: Prototype Chain Example
DESCRIPTION: Shows how objects form a prototype chain for property lookup, demonstrating the relationship between __proto__ and prototype properties.

LANGUAGE: javascript
CODE:
b ->
 b.__proto__ === B.prototype ->
  B.prototype.__proto__ === A.prototype ->
   A.prototype.__proto__ === Object.prototype ->
    Object.prototype.__proto__ === null

----------------------------------------

TITLE: Demonstrating Holes in JavaScript Arrays
DESCRIPTION: This snippet shows how deleting an array element creates a hole, and how prototype lookup works for holey arrays. It demonstrates the difference between packed and holey elements in V8.

LANGUAGE: javascript
CODE:
const o = ['a', 'b', 'c'];
console.log(o[1]);          // Prints 'b'.

delete o[1];                // Introduces a hole in the elements store.
console.log(o[1]);          // Prints 'undefined'; property 1 does not exist.
o.__proto__ = {1: 'B'};     // Define property 1 on the prototype.

console.log(o[0]);          // Prints 'a'.
console.log(o[1]);          // Prints 'B'.
console.log(o[2]);          // Prints 'c'.
console.log(o[3]);          // Prints undefined

----------------------------------------

TITLE: Installing and Activating Latest Upstream Emscripten SDK
DESCRIPTION: Commands to install and activate the latest upstream version of the Emscripten SDK, which uses the LLVM WebAssembly backend.

LANGUAGE: bash
CODE:
emsdk install latest-upstream
emsdk activate latest-upstream

----------------------------------------

TITLE: Converting Callbacks to Promise Chains
DESCRIPTION: Refactored version of the callback code using promise chaining for better readability and maintainability.

LANGUAGE: javascript
CODE:
function handler() {
  return validateParams()
    .then(dbQuery)
    .then(serviceCall)
    .then(result => {
      console.log(result);
      return result;
    });
}

----------------------------------------

TITLE: New Object.hasOwn Method Usage in JavaScript
DESCRIPTION: Demonstrates the new Object.hasOwn method which provides a more straightforward way to check if an object has a specific own property

LANGUAGE: javascript
CODE:
if (Object.hasOwn(object, 'foo')) {
  // `object` has property `foo`.
}

----------------------------------------

TITLE: Demonstrating Strong References in JavaScript
DESCRIPTION: This snippet shows how strong references in JavaScript prevent objects from being garbage collected as long as they are reachable through the global scope.

LANGUAGE: javascript
CODE:
const globalRef = {
  callback() { console.log('foo'); }
};
// As long as globalRef is reachable through the global scope,
// neither it nor the function in its callback property will be collected.

----------------------------------------

TITLE: Using Intl.RelativeTimeFormat API
DESCRIPTION: Shows how to use the new Intl.RelativeTimeFormat API for localized formatting of relative time expressions with various time units.

LANGUAGE: javascript
CODE:
// Create a relative time formatter for the English language that does
// not always have to use numeric value in the output.
const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

rtf.format(-1, 'day');
// → 'yesterday'

rtf.format(0, 'day');
// → 'today'

rtf.format(1, 'day');
// → 'tomorrow'

rtf.format(-1, 'week');
// → 'last week'

rtf.format(0, 'week');
// → 'this week'

rtf.format(1, 'week');
// → 'next week'

----------------------------------------

TITLE: Demonstrating higher-order builtin optimization in JavaScript
DESCRIPTION: Shows how TurboFan can now optimize higher-order builtin function calls like Function.prototype.call.bind() to be as performant as direct method calls.

LANGUAGE: javascript
CODE:
const charCodeAt = Function.prototype.call.bind(String.prototype.charCodeAt);

charCodeAt(string, 8);

----------------------------------------

TITLE: Using Object Spread in Redux (ES2015+)
DESCRIPTION: Example of using object spread syntax in a Redux reducer function. This demonstrates a common ES2015+ pattern that would typically require transpilation.

LANGUAGE: javascript
CODE:
function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return { ...state, visibilityFilter: action.filter };
    default:
      return state;
  }
}

----------------------------------------

TITLE: Demonstrating Rest Operator Usage in JavaScript
DESCRIPTION: This snippet compares a function using the traditional arguments object with one using the new rest operator to concatenate strings. The rest operator simplifies the syntax and improves readability.

LANGUAGE: javascript
CODE:
// Without rest operator
function concat() {
  var args = Array.prototype.slice.call(arguments, 1);
  return args.join('');
}

// With rest operator
function concatWithRest(...strings) {
  return strings.join('');
}

----------------------------------------

TITLE: Stacking Optional Chaining Operators in JavaScript
DESCRIPTION: This snippet shows how multiple optional chaining operators can be used in a sequence of property accesses.

LANGUAGE: javascript
CODE:
// An optional chain may be followed by another optional chain.
const firstNameLength = db.users?.[42]?.names.first.length;

----------------------------------------

TITLE: Using the RegExp `v` flag in JavaScript
DESCRIPTION: Demonstrates how to use the new `v` flag with a regular expression. The `v` flag enables Unicode sets mode and cannot be combined with the `u` flag.

LANGUAGE: javascript
CODE:
const re = /…/v;

----------------------------------------

TITLE: Explaining Big O Notation for Hash Table Insertion
DESCRIPTION: This snippet demonstrates the time complexity of hash table insertions, showing average case O(1) and worst case O(n) for n insertions potentially leading to O(n²) complexity.

LANGUAGE: text
CODE:
On average, inserting a new entry is very efficient at 𝒪(1). However, hash collisions could lead to a worst case of 𝒪(n). That means that inserting n entries can take up to 𝒪(n²).

----------------------------------------

TITLE: Using Object.fromEntries in JavaScript
DESCRIPTION: Demonstrates the new Object.fromEntries API that converts an array of key-value pairs back into an object.

LANGUAGE: javascript
CODE:
const result = Object.fromEntries(entries);
// → { x: 42, y: 50 }

----------------------------------------

TITLE: Using DataView for Fine-Grained Data Access in JavaScript
DESCRIPTION: This example shows how to use DataView to perform more granular data access on an ArrayBuffer, including setting and getting values of different types.

LANGUAGE: javascript
CODE:
const buffer = new ArrayBuffer(32);
const view = new DataView(buffer);

const person = { age: 42, height: 1.76 };

view.setUint8(0, person.age);
view.setFloat64(1, person.height);

console.log(view.getUint8(0)); // Expected output: 42
console.log(view.getFloat64(1)); // Expected output: 1.76

----------------------------------------

TITLE: Demonstrating TurboFan Escape Analysis with Higher-Order Functions
DESCRIPTION: Example showing how V8's improved escape analysis handles local function contexts for higher-order functions, particularly when variables from surrounding context escape to local closure.

LANGUAGE: javascript
CODE:
function mapAdd(a, x) {
  return a.map(y => y + x);
}

----------------------------------------

TITLE: Formatting numbers with units using Intl.NumberFormat in JavaScript
DESCRIPTION: Demonstrates the new functionality in Intl.NumberFormat for formatting numbers with units of measurement. This example creates a formatter for meters per second and applies it to a large number.

LANGUAGE: javascript
CODE:
const formatter = new Intl.NumberFormat('en', {
  style: 'unit',
  unit: 'meter-per-second',
});
formatter.format(299792458);
// → '299,792,458 m/s'

----------------------------------------

TITLE: MovingAvg Class Implementation
DESCRIPTION: Initial implementation of a class that tracks websocket events for latency calculations, demonstrating potential memory leaks.

LANGUAGE: javascript
CODE:
class MovingAvg {
  constructor(socket) {
    this.events = [];
    this.socket = socket;
    this.listener = (ev) => { this.events.push(ev); };
    socket.addEventListener('message', this.listener);
  }

  compute(n) {
    // Compute the simple moving average for the last n events.
    // …
  }
}

----------------------------------------

TITLE: Demonstrating WebAssembly Bulk Memory Operations
DESCRIPTION: Examples of new WebAssembly instructions for bulk memory operations, including memory.copy, memory.fill, and table.copy. These instructions allow efficient manipulation of large memory regions.

LANGUAGE: wasm
CODE:
;; Copy 500 bytes from source 1000 to destination 0.
(memory.copy (i32.const 0) (i32.const 1000) (i32.const 500))

;; Fill 1000 bytes starting at 100 with the value `123`.
(memory.fill (i32.const 100) (i32.const 123) (i32.const 1000))

;; Copy 10 table elements from source 5 to destination 15.
(table.copy (i32.const 15) (i32.const 5) (i32.const 10))

----------------------------------------

TITLE: Recursive List Sum with Tail Call in C
DESCRIPTION: Example showing recursive linked list sum implementation with tail call optimization reducing stack space from O(n) to O(1).

LANGUAGE: c
CODE:
int sum(List* list, int acc) {
  if (list == nullptr) return acc;
  return sum(list->next, acc + list->val);
}

----------------------------------------

TITLE: Original V8 Bytecode for Private Method Brand Initialization
DESCRIPTION: Original bytecode for initializing the private brand symbol for classes with private methods, using a runtime call.

LANGUAGE: cpp
CODE:
LdaImmutableCurrentContextSlot [3]
Star r1

Mov <this>, r0
Mov <context>, r2
CallRuntime [AddPrivateBrand], r0-r2

----------------------------------------

TITLE: Implementing Stable Sort with Array of Objects in JavaScript
DESCRIPTION: Demonstrates sorting an array of dog objects by rating while maintaining alphabetical order within same ratings. Shows how stable sort preserves relative ordering of equal elements.

LANGUAGE: javascript
CODE:
// Note how the array is pre-sorted alphabetically by `name`.
const doggos = [
  { name: 'Abby',   rating: 12 },
  { name: 'Bandit', rating: 13 },
  { name: 'Choco',  rating: 14 },
  { name: 'Daisy',  rating: 12 },
  { name: 'Elmo',   rating: 12 },
  { name: 'Falco',  rating: 13 },
  { name: 'Ghost',  rating: 14 },
];
// Sort the dogs by `rating` in descending order.
// (This updates `doggos` in place.)
doggos.sort((a, b) => b.rating - a.rating);

----------------------------------------

TITLE: Simulating Little-Endian DataView Reads with Uint8Array in JavaScript
DESCRIPTION: This code defines a JavaScript wrapper that simulates DataView behavior for little-endian 32-bit unsigned integer reads using Uint8Array.

LANGUAGE: javascript
CODE:
function LittleEndian(buffer) { // Simulate little-endian DataView reads.
  this.uint8View_ = new Uint8Array(buffer);
}

LittleEndian.prototype.getUint32 = function(byteOffset) {
  return this.uint8View_[byteOffset] |
    (this.uint8View_[byteOffset + 1] << 8) |
    (this.uint8View_[byteOffset + 2] << 16) |
    (this.uint8View_[byteOffset + 3] << 24);
};

----------------------------------------

TITLE: Using V8 Code Caching API
DESCRIPTION: Demonstrates how to use V8's API for producing and consuming code cache data to optimize JavaScript compilation. The code shows the key API methods for generating cache data during initial compilation and consuming it in subsequent runs.

LANGUAGE: cpp
CODE:
v8::ScriptCompiler::kProduceCodeCache // Option to produce cache data
v8::ScriptCompiler::Source::GetCachedData() // Retrieve cache data
v8::ScriptCompiler::kConsumeCodeCache // Option to consume cache data

----------------------------------------

TITLE: TypedArray Sort Usage
DESCRIPTION: Shows the TypedArray.prototype.sort implementation that has been optimized for both default sorting and custom comparison function scenarios.

LANGUAGE: javascript
CODE:
typedArray.sort(compareFunction)

----------------------------------------

TITLE: Handling Object Layout Changes During Concurrent Marking in C++
DESCRIPTION: This code snippet demonstrates how the main thread handles object layout changes safely during concurrent marking by ensuring the object is marked black and pushed to a bailout worklist.

LANGUAGE: cpp
CODE:
atomic_color_transition(object, white, grey);
if (atomic_color_transition(object, grey, black)) {
  // The object will be revisited on the main thread during draining
  // of the bailout worklist.
  bailout_worklist.push(object);
}
unsafe_object_layout_change(object);

----------------------------------------

TITLE: JavaScript Function Coverage Example
DESCRIPTION: Sample code demonstrating basic function coverage tracking with a simple function definition and execution.

LANGUAGE: javascript
CODE:
function f() {
  console.log('Hello World');
}

f();

----------------------------------------

TITLE: Decompiled WebAssembly Code Example
DESCRIPTION: Example of how wasm-decompile transforms the WebAssembly code into a more readable format with inferred struct types and familiar expression syntax.

LANGUAGE: c
CODE:
function dot(a:{ a:float, b:float, c:float },
             b:{ a:float, b:float, c:float }):float {
  return a.a * b.a + a.b * b.b + a.c * b.c
}

----------------------------------------

TITLE: TurboFan Optimization with for-of Loops
DESCRIPTION: Example showing code that can now be optimized by TurboFan compiler, including for-of loops and object property access.

LANGUAGE: javascript
CODE:
const sequence = ['First', 'Second', 'Third'];
for (const value of sequence) {
  // This scope is now optimizable.
  const object = {a: 'Hello, ', b: 'world!', c: value};
  console.log(object.a + object.b + object.c);
}

----------------------------------------

TITLE: Torque Load Implementation for FixedDoubleArray
DESCRIPTION: Shows the implementation of element loading operation for FixedDoubleArray in V8's Torque language, handling floating point numbers and bailout cases.

LANGUAGE: torque
CODE:
Load<FastDoubleElements>(
    context: Context, sortState: FixedArray, elements: HeapObject,
    index: Smi): Object {
  try {
    const elems: FixedDoubleArray = UnsafeCast<FixedDoubleArray>(elements);
    const value: float64 =
        LoadDoubleWithHoleCheck(elems, index) otherwise Bailout;
    return AllocateHeapNumberWithValue(value);
  }
  label Bailout {
    // The pre-processing step removed all holes by compacting all elements
    // at the start of the array. Finding a hole means the cmp function or
    // ToString changes the array.
    return Failure(sortState);
  }
}

----------------------------------------

TITLE: Using BigInt for Large Integer Operations
DESCRIPTION: Demonstrates how BigInt handles large integer arithmetic accurately by using the 'n' suffix or BigInt() constructor.

LANGUAGE: javascript
CODE:
BigInt(Number.MAX_SAFE_INTEGER) + 2n;
// → 9_007_199_254_740_993n ✅

1234567890123456789n * 123n;
// → 151851850485185185047n ✅

----------------------------------------

TITLE: IIFE Pattern for Force Compilation
DESCRIPTION: Examples of immediately-invoked function expressions (IIFE) and how parentheses affect compilation. Shows both lazy and eager compilation patterns.

LANGUAGE: javascript
CODE:
(function foo() {
  // …
})();

const foo = function() {
  // Lazily skipped
};
const bar = (function() {
  // Eagerly compiled
});

----------------------------------------

TITLE: Initializing Peak Object Constructor
DESCRIPTION: Example JavaScript constructor showing basic property assignment that V8 uses to demonstrate slack tracking behavior.

LANGUAGE: javascript
CODE:
function Peak(name, height) {
  this.name = name;
  this.height = height;
}

const m1 = new Peak('Matterhorn', 4478);

----------------------------------------

TITLE: Array Destructuring Example in JavaScript
DESCRIPTION: Demonstrates the optimized array destructuring syntax for variable swapping, which now performs as efficiently as traditional temporary variable assignment.

LANGUAGE: javascript
CODE:
[a, b] = [b, a]

----------------------------------------

TITLE: Ignition bytecode for add42 function
DESCRIPTION: Ignition bytecode generated for the add42 function implementation.

LANGUAGE: Assembly
CODE:
25 02             Ldar a0          ;; Load the first argument to the accumulator
40 2a 00          AddSmi [42]      ;; Add 42 to it
ab                Return           ;; Return the accumulator

----------------------------------------

TITLE: Dynamic Code Loading with JSPI
DESCRIPTION: Implementation of dynamic code loading using JSPI to handle Promise-based module loading and function resolution.

LANGUAGE: JavaScript
CODE:
EM_ASYNC_JS(fooFun, resolveFun, (), {
  console.log('loading promise42');
  LoadedModule = (await WebAssembly.instantiateStreaming(fetch('p42.wasm'))).instance;
  return addFunction(LoadedModule.exports['provide42']);
});

----------------------------------------

TITLE: Simple RegExp Pattern Example in JavaScript
DESCRIPTION: Demonstrates a simple regular expression pattern matching non-underscore characters, used to illustrate bytecode peephole optimization. The pattern matches consecutive characters until it encounters an underscore.

LANGUAGE: javascript
CODE:
const re = /[^_]*/;
const str = 'a0b*c_ef';
re.exec(str);
// → matches 'a0b*c'

----------------------------------------

TITLE: TurboFan optimized code for add42 call with argument mismatch (without adaptor frame)
DESCRIPTION: TurboFan-generated optimized assembly code for calling add42 with mismatched arguments, without using the arguments adaptor frame.

LANGUAGE: Assembly
CODE:
movq rdi,0x35ac082126ad    ;; Load the function object <JSFunction add42>
;; Push receiver and arguments 1, 2 and 3 (reversed)
push 0x6
push 0x4
push 0x2
movq rcx,0x35ac082030d1    ;; <JSGlobal Object>
push rcx
movl rax,0x3               ;; Save the arguments count in rax
movl rcx,[rdi+0x17]        ;; Load function object {Code} field in rcx
call rcx                   ;; Finally, call the code object!

----------------------------------------

TITLE: BigInt64Array Implementation
DESCRIPTION: Demonstrates the usage of BigInt64Array for handling arrays of 64-bit integers with boundary checks.

LANGUAGE: javascript
CODE:
const view = new BigInt64Array(4);
// → [0n, 0n, 0n, 0n]
view.length;
// → 4
view[0];
// → 0n
view[0] = 42n;
view[0];
// → 42n

----------------------------------------

TITLE: Optional Catch Binding Implementation
DESCRIPTION: Shows how to use try-catch blocks without a parameter binding in the catch clause when the exception object isn't needed.

LANGUAGE: javascript
CODE:
try {
  doSomethingThatMightThrow();
} catch { // → Look mom, no binding!
  handleException();
}

----------------------------------------

TITLE: Demonstrating Destructuring in JavaScript (ES2015)
DESCRIPTION: This snippet shows various examples of destructuring assignment in JavaScript, including object and array destructuring, rest patterns, and default values.

LANGUAGE: javascript
CODE:
const o = {a: [1, 2, 3], b: {p: 4}, c: {q: 5}};
let {a: [x, y], b: {p}, c, d} = o;              // x=1, y=2, p=4, c={q: 5}
[x, y] = [y, x];                                // x=2, y=1
function f({a, b}) { return [a, b]; }
f({a: 4});                                      // [4, undefined]

const [x, y, ...r] = [1, 2, 3, 4];              // x=1, y=2, r=[3,4]

const {a: x, b: y = x} = {a: 4};                // x=4, y=4
// or…
const [x, y = 0, z = 0] = [1, 2];               // x=1, y=2, z=0

----------------------------------------

TITLE: Polymorphic Operations on Arrays with Different Elements Kinds in JavaScript
DESCRIPTION: Illustrates how calling a function with arrays of different elements kinds can lead to polymorphic operations, potentially impacting performance.

LANGUAGE: JavaScript
CODE:
const each = (array, callback) => {
  for (let index = 0; index < array.length; ++index) {
    const item = array[index];
    callback(item);
  }
};
const doSomething = (item) => console.log(item);

each([], () => {});

each(['a', 'b', 'c'], doSomething);

each([1.1, 2.2, 3.3], doSomething);

each([1, 2, 3], doSomething);

----------------------------------------

TITLE: Direct Chrome Perf Profiling
DESCRIPTION: Commands for profiling Chrome directly with Linux perf, including browser launch and data collection.

LANGUAGE: bash
CODE:
out/x64.release/chrome \
    --user-data-dir=`mktemp -d` \
    --no-sandbox --incognito --enable-benchmarking \
    --js-flags='--perf-prof --no-write-protect-code-memory --interpreted-frames-native-stack'

----------------------------------------

TITLE: Static Import with Assertions
DESCRIPTION: Shows how to import a JSON module using static import syntax with type assertion.

LANGUAGE: javascript
CODE:
import json from './foo.json' assert { type: 'json' };
console.log(json.answer); // 42

----------------------------------------

TITLE: Running Code Coverage Analysis Locally for Multiple Architectures in V8
DESCRIPTION: This command demonstrates how to run code coverage analysis locally for multiple architectures (x64 and arm) using the gcov.sh script in V8. It accumulates coverage results across different architecture-specific runs.

LANGUAGE: bash
CODE:
./tools/gcov.sh x64 arm

----------------------------------------

TITLE: Expected Result from Stable Sort
DESCRIPTION: Shows the expected output when using stable sort, where elements with equal ratings maintain their original relative ordering based on name.

LANGUAGE: javascript
CODE:
[
  { name: 'Choco',  rating: 14 },
  { name: 'Ghost',  rating: 14 },
  { name: 'Bandit', rating: 13 },
  { name: 'Falco',  rating: 13 },
  { name: 'Abby',   rating: 12 },
  { name: 'Daisy',  rating: 12 },
  { name: 'Elmo',   rating: 12 },
]

----------------------------------------

TITLE: Original V8 Bytecode for Class Field Initialization
DESCRIPTION: Bytecode generated by V8 for initializing class fields, using runtime calls for both private and public field assignments.

LANGUAGE: cpp
CODE:
LdaImmutableCurrentContextSlot [2]
Star r1

LdaZero
Star r2

Mov <this>, r0

CallRuntime [AddPrivateField], r0-r2

LdaConstant [0]
Star r1

LdaImmutableCurrentContextSlot [2]

LdaKeyedProperty <this>, [0]
Star r2

Mov <this>, r0

CallRuntime [CreateDataProperty], r0-r2

----------------------------------------

TITLE: Printing Output with d8 in Bash
DESCRIPTION: Demonstrates how to use d8 to run a JavaScript file that prints output using console.log.

LANGUAGE: bash
CODE:
$ cat test.js
console.log('Hello world!');

$ out.gn/x64.optdebug/d8 test.js
Hello world!

----------------------------------------

TITLE: Simplified Class Extension
DESCRIPTION: Shows simplified class inheritance using modern class fields syntax without constructor.

LANGUAGE: javascript
CODE:
class Cat extends Animal {
  likesBaths = false;
  meow() {
    console.log('Meow!');
  }
}

----------------------------------------

TITLE: Demonstrating for-in Shadowing in JavaScript
DESCRIPTION: JavaScript code example showing how non-enumerable properties on an object should shadow enumerable properties from the prototype chain in a for-in loop.

LANGUAGE: javascript
CODE:
var o = {
  __proto__ : {b: 3},
  a: 1
};
Object.defineProperty(o, 'b', {});

for (var k in o) console.log(k);

----------------------------------------

TITLE: Creating and Using Array-Like Objects in JavaScript
DESCRIPTION: Shows how to create and use array-like objects, and demonstrates calling array methods on them using Array.prototype methods.

LANGUAGE: JavaScript
CODE:
const arrayLike = {};
arrayLike[0] = 'a';
arrayLike[1] = 'b';
arrayLike[2] = 'c';
arrayLike.length = 3;

Array.prototype.forEach.call(arrayLike, (value, index) => {
  console.log(`${ index }: ${ value }`);
});
// This logs '0: a', then '1: b', and finally '2: c'.

----------------------------------------

TITLE: Date Range Formatting with Intl.DateTimeFormat
DESCRIPTION: Shows usage of new formatRange and formatRangeToParts methods for locale-specific date range formatting.

LANGUAGE: javascript
CODE:
const start = new Date('2019-05-07T09:20:00');
// → 'May 7, 2019'
const end = new Date('2019-05-09T16:00:00');
// → 'May 9, 2019'
const fmt = new Intl.DateTimeFormat('en', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
const output = fmt.formatRange(start, end);
// → 'May 7 – 9, 2019'
const parts = fmt.formatRangeToParts(start, end);
// → [
// →   { 'type': 'month',   'value': 'May',  'source': 'shared' },
// →   { 'type': 'literal', 'value': ' ',    'source': 'shared' },
// →   { 'type': 'day',     'value': '7',    'source': 'startRange' },
// →   { 'type': 'literal', 'value': ' – ',  'source': 'shared' },
// →   { 'type': 'day',     'value': '9',    'source': 'endRange' },
// →   { 'type': 'literal', 'value': ', ',   'source': 'shared' },
// →   { 'type': 'year',    'value': '2019', 'source': 'shared' },
// → ]

----------------------------------------

TITLE: Running Chrome with Memory Statistics
DESCRIPTION: Command line flag to enable V8 heap statistics tracking in Chrome 54 or newer

LANGUAGE: bash
CODE:
--trace-gc-object-stats

----------------------------------------

TITLE: Defining a JavaScript builtin in Torque
DESCRIPTION: This snippet shows how to define a JavaScript builtin (ArraySlice) in Torque with implicit and explicit parameters.

LANGUAGE: torque
CODE:
javascript builtin ArraySlice(
    (implicit context: Context)(receiver: Object, ...arguments): Object {
  // …
}

----------------------------------------

TITLE: Stream Processing with Event Listeners
DESCRIPTION: Traditional Node.js stream processing using event listeners for handling data chunks.

LANGUAGE: javascript
CODE:
const http = require('http');

http.createServer((req, res) => {
  let body = '';
  req.setEncoding('utf8');
  req.on('data', (chunk) => {
    body += chunk;
  });
  req.on('end', () => {
    res.write(body);
    res.end();
  });
}).listen(1337);

----------------------------------------

TITLE: Updating V8 Source and Dependencies
DESCRIPTION: Updates the local V8 repository with latest changes and syncs dependencies using git pull and gclient sync commands.

LANGUAGE: bash
CODE:
git pull && gclient sync

----------------------------------------

TITLE: Handling Complex Pluralization Rules for Welsh using Intl.PluralRules in JavaScript
DESCRIPTION: Illustrates the use of Intl.PluralRules for languages with more complex pluralization rules, such as Welsh. This example shows how to handle six different plural forms.

LANGUAGE: javascript
CODE:
const suffixes = new Map([
  ['zero',  'cathod'],
  ['one',   'gath'],
  // Note: the `two` form happens to be the same as the `'one'`
  // form for this word specifically, but that is not true for
  // all words in Welsh.
  ['two',   'gath'],
  ['few',   'cath'],
  ['many',  'chath'],
  ['other', 'cath'],
]);
const pr = new Intl.PluralRules('cy');
const formatWelshCats = (n) => {
  const rule = pr.select(n);
  const suffix = suffixes.get(rule);
  return `${n} ${suffix}`;
};

formatWelshCats(0);   // '0 cathod'
formatWelshCats(1);   // '1 gath'
formatWelshCats(1.5); // '1.5 cath'
formatWelshCats(2);   // '2 gath'
formatWelshCats(3);   // '3 cath'
formatWelshCats(6);   // '6 chath'
formatWelshCats(42);  // '42 cath'

----------------------------------------

TITLE: EnumerateObjectProperties Generator Implementation in JavaScript
DESCRIPTION: Example implementation of the EnumerateObjectProperties generator function from the ECMAScript specification. Demonstrates how property enumeration should work according to the spec.

LANGUAGE: javascript
CODE:
function* EnumerateObjectProperties(obj) {
  const visited = new Set();
  for (const key of Reflect.ownKeys(obj)) {
    if (typeof key === 'symbol') continue;
    const desc = Reflect.getOwnPropertyDescriptor(obj, key);
    if (desc && !visited.has(key)) {
      visited.add(key);
      if (desc.enumerable) yield key;
    }
  }
  const proto = Reflect.getPrototypeOf(obj);
  if (proto === null) return;
  for (const protoKey of EnumerateObjectProperties(proto)) {
    if (!visited.has(protoKey)) yield protoKey;
  }
}

----------------------------------------

TITLE: Using Enhanced Language Display Options in Intl.DisplayNames
DESCRIPTION: Shows usage of the new languageDisplay option in Intl.DisplayNames API with 'standard' and 'dialect' settings for language name formatting

LANGUAGE: javascript
CODE:
const jaDialectLanguageNames = new Intl.DisplayNames(['ja'], { type: 'language' });
const jaStandardLanguageNames = new Intl.DisplayNames(['ja'], { type: 'language' , languageDisplay: 'standard'});
jaDialectLanguageNames.of('en-US')  // "アメリカ英語"
jaDialectLanguageNames.of('en-AU')  // "オーストラリア英語"
jaDialectLanguageNames.of('en-GB')  // "イギリス英語"

jaStandardLanguageNames.of('en-US') // "英語 (アメリカ合衆国)"
jaStandardLanguageNames.of('en-AU') // "英語 (オーストラリア)"
jaStandardLanguageNames.of('en-GB') // "英語 (イギリス)"

----------------------------------------

TITLE: Implementing DataView getUint32 Method in V8 Torque
DESCRIPTION: This snippet shows the implementation of the DataView getUint32 method written in V8 Torque, a language that compiles to CodeStubAssembler for optimized performance.

LANGUAGE: torque
CODE:
macro LoadDataViewUint32(buffer: JSArrayBuffer, offset: intptr,
                    requested_little_endian: bool,
                    signed: constexpr bool): Number {
  let data_pointer: RawPtr = buffer.backing_store;

  let b0: uint32 = LoadUint8(data_pointer, offset);
  let b1: uint32 = LoadUint8(data_pointer, offset + 1);
  let b2: uint32 = LoadUint8(data_pointer, offset + 2);
  let b3: uint32 = LoadUint8(data_pointer, offset + 3);
  let result: uint32;

  if (requested_little_endian) {
    result = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
  } else {
    result = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;
  }

  return convert<Number>(result);
}

----------------------------------------

TITLE: Setting up v8gen alias in Bash
DESCRIPTION: This snippet shows how to create a Bash alias for the 'v8gen' convenience script, which is used for generating V8 build files.

LANGUAGE: bash
CODE:
alias v8gen=/path/to/v8/tools/dev/v8gen.py

----------------------------------------

TITLE: Hashbang grammar example in JavaScript
DESCRIPTION: Shows the new support for hashbang (#!) at the beginning of JavaScript files, which is treated as a single-line comment.

LANGUAGE: javascript
CODE:
#!/usr/bin/env node
console.log(42);

----------------------------------------

TITLE: Configuring V8 Isolate with Custom Snapshot
DESCRIPTION: Shows how to configure a new V8 isolate to initialize contexts from a custom startup snapshot using v8::Isolate::CreateParams. This allows contexts to be created with pre-initialized state from the snapshot.

LANGUAGE: cpp
CODE:
v8::Isolate::CreateParams params;
params.snapshot_blob = custom_snapshot;

----------------------------------------

TITLE: WebAssembly BigInt Integration
DESCRIPTION: Demonstrates the integration between WebAssembly I64 values and JavaScript BigInts, including function calls and type checking.

LANGUAGE: webassembly
CODE:
(module
  (func $add (param $x i64) (param $y i64) (result i64)
    local.get $x
    local.get $y
    i64.add)
  (export "add" (func $add)))

LANGUAGE: javascript
CODE:
WebAssembly.instantiateStreaming(fetch('i64.wasm'))
  .then(({ module, instance }) => {
    instance.exports.add(12n, 30n);
    // → 42n
    instance.exports.add(12, 30);
    // → TypeError: parameters are not of type BigInt
  });

----------------------------------------

TITLE: Testing a CSA builtin in V8
DESCRIPTION: This code snippet demonstrates how to write a test case for the 'GetStringLength' CSA builtin using V8's testing framework, checking both string and non-string inputs.

LANGUAGE: cpp
CODE:
TEST(GetStringLength) {
  HandleAndZoneScope scope;
  Isolate* isolate = scope.main_isolate();
  Heap* heap = isolate->heap();
  Zone* zone = scope.main_zone();

  StubTester tester(isolate, zone, Builtins::kGetStringLength);
  Handle<String> input_string(
      isolate->factory()->
        NewStringFromAsciiChecked("Oktoberfest"));
  Handle<Object> result1 = tester.Call(input_string);
  CHECK_EQ(11, Handle<Smi>::cast(result1)->value());

  Handle<Object> result2 =
      tester.Call(factory->undefined_value());
  CHECK(result2->IsUndefined(isolate));
}

----------------------------------------

TITLE: Running Octane Benchmark Comparison
DESCRIPTION: Example of running Octane benchmark comparison with noopt flag to disable TurboFan optimization

LANGUAGE: bash
CODE:
$ test/benchmarks/csuite/csuite.py -r 1 octane compare out.gn/x64.release/d8 \
  -x "--noopt"

----------------------------------------

TITLE: Using formatToParts with Intl.RelativeTimeFormat
DESCRIPTION: This snippet demonstrates how to use the formatToParts method of Intl.RelativeTimeFormat to get access to individual parts of the formatted output.

LANGUAGE: javascript
CODE:
const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });

rtf.format(-1, 'day');
// → 'yesterday'

rtf.formatToParts(-1, 'day');
// → [{ type: 'literal', value: 'yesterday' }]

rtf.format(3, 'week');
// → 'in 3 weeks'

rtf.formatToParts(3, 'week');
// → [{ type: 'literal', value: 'in ' },
//    { type: 'integer', value: '3', unit: 'week' },
//    { type: 'literal', value: ' weeks' }]

----------------------------------------

TITLE: Demonstrating for-in Proxy Behavior in JavaScript
DESCRIPTION: Example showing how for-in behaves differently across browsers when iterating over a Proxy object with custom traps defined. Illustrates the flexibility allowed by the ECMAScript specification.

LANGUAGE: javascript
CODE:
const proxy = new Proxy({ a: 1, b: 1},
  {
    getPrototypeOf(target) {
    console.log('getPrototypeOf');
    return null;
  },
  ownKeys(target) {
    console.log('ownKeys');
    return Reflect.ownKeys(target);
  },
  getOwnPropertyDescriptor(target, prop) {
    console.log('getOwnPropertyDescriptor name=' + prop);
    return Reflect.getOwnPropertyDescriptor(target, prop);
  }
});

----------------------------------------

TITLE: Generated ARM assembly for CSA builtin
DESCRIPTION: This is the resulting 32-bit ARM assembly code generated by the CSA for the 'GetStringLength' builtin, as output by mksnapshot with the --print-code option.

LANGUAGE: asm
CODE:
  tst r0, #1
  beq +28 -> not_string
  ldr r1, [r0, #-1]
  ldrb r1, [r1, #+7]
  cmp r1, #128
  bge +12 -> not_string
  ldr r0, [r0, #+7]
  bx lr
not_string:
  ldr r0, [r10, #+16]
  bx lr

----------------------------------------

TITLE: Multi-value Function Implementation in WebAssembly
DESCRIPTION: Shows how to implement and use multi-value function returns in WebAssembly, including JavaScript interaction.

LANGUAGE: webassembly
CODE:
(func $swap (param i32 i32) (result i32 i32)
  (local.get 1) (local.get 0)
)

LANGUAGE: javascript
CODE:
instance.exports.swap(1, 2);
// → [2, 1]

LANGUAGE: javascript
CODE:
new WebAssembly.Instance(module, {
  imports: {
    swap: (x, y) => [y, x],
  },
});

LANGUAGE: webassembly
CODE:
(func $main (result i32 i32)
  i32.const 0
  i32.const 1
  call $swap
)

----------------------------------------

TITLE: Defining JSArrayBuffer Class for External Buffers with Sandbox in C++
DESCRIPTION: This code snippet shows how the JSArrayBuffer class is modified to handle external buffers with the V8 Sandbox. It uses external_ptr_t to reference the buffer through a pointer table indirection, providing memory safety guarantees.

LANGUAGE: cpp
CODE:
class JSArrayBuffer: public JSObject {
  private:
    external_ptr_t buffer_;
};

----------------------------------------

TITLE: Implementing a CSA builtin in V8
DESCRIPTION: This code demonstrates how to implement the 'GetStringLength' builtin using the CodeStubAssembler in V8. It checks if the input is a string and returns its length, or undefined if not a string.

LANGUAGE: cpp
CODE:
TF_BUILTIN(GetStringLength, CodeStubAssembler) {
  Label not_string(this);

  Node* const maybe_string = Parameter(Descriptor::kInputObject);

  GotoIf(TaggedIsSmi(maybe_string), &not_string);

  GotoIfNot(IsString(maybe_string), &not_string);

  Return(LoadStringLength(maybe_string));

  BIND(&not_string);

  Return(UndefinedConstant());
}

----------------------------------------

TITLE: Running V8 Tests Manually with run-tests.py in Bash
DESCRIPTION: This snippet shows how to run V8 tests manually using the 'run-tests.py' script. It includes examples for running all tests and specific test cases.

LANGUAGE: bash
CODE:
tools/run-tests.py --outdir=out/ia32.release

LANGUAGE: bash
CODE:
tools/run-tests.py --outdir=ia32.release cctest/test-heap/SymbolTable/* mjsunit/delete-in-eval

----------------------------------------

TITLE: Configuring Intl.RelativeTimeFormat with Options
DESCRIPTION: This snippet demonstrates how to create an Intl.RelativeTimeFormat instance with specific options and use it to format special cases.

LANGUAGE: javascript
CODE:
const rtf = new Intl.RelativeTimeFormat('en', {
  localeMatcher: 'best fit', // other values: 'lookup'
  style: 'long', // other values: 'short' or 'narrow'
  numeric: 'always', // other values: 'auto'
});

rtf.format(-1, 'day');
// → '1 day ago'

rtf.format(0, 'day');
// → 'in 0 days'

rtf.format(1, 'day');
// → 'in 1 day'

rtf.format(-1, 'week');
// → '1 week ago'

rtf.format(0, 'week');
// → 'in 0 weeks'

rtf.format(1, 'week');
// → 'in 1 week'

----------------------------------------

TITLE: Class Definition with Constructor Initialization - JavaScript
DESCRIPTION: Traditional class definition approach showing animal and cat classes with constructor-based property initialization

LANGUAGE: javascript
CODE:
class Animal {
  constructor(name) {
    this.name = name;
  }
}

class Cat extends Animal {
  constructor(name) {
    super(name);
    this.likesBaths = false;
  }
  meow() {
    console.log('Meow!');
  }
}

----------------------------------------

TITLE: Using Unicode Escape Sequences for Identifiers in JavaScript
DESCRIPTION: This snippet shows how Unicode escape sequences can be used to create identifiers that would otherwise be reserved words, and how this is handled differently in async and non-async functions.

LANGUAGE: javascript
CODE:
function old() {
  var \u0061wait;
}

async function modern() {
  var \u0061wait; // Syntax error
}

----------------------------------------

TITLE: V8 Heap Objects - Metadata Types
DESCRIPTION: References to V8's heap object types used for bytecode metadata storage, including ConstantPoolArray for storing constants and SourcePositionTable for source mapping.

LANGUAGE: cpp
CODE:
ConstantPoolArray
SourcePositionTable

----------------------------------------

TITLE: Defining an abstract type in Torque
DESCRIPTION: This snippet shows how to define abstract types for 31-bit and 32-bit signed integers in Torque.

LANGUAGE: torque
CODE:
type int32 generates 'TNode<Int32T>' constexpr 'int32_t';
type int31 extends int32 generates 'TNode<Int32T>' constexpr 'int31_t';

----------------------------------------

TITLE: WebAssembly Number Addition Function in C++
DESCRIPTION: A simple WebAssembly function written in C++ that adds two double precision floating point numbers. Used to demonstrate JS-to-Wasm call optimizations.

LANGUAGE: cpp
CODE:
double addNumbers(double x, double y) {
  return x + y;
}

----------------------------------------

TITLE: Optimized V8 Bytecode for Public Field Initialization
DESCRIPTION: Improved bytecode for initializing public fields, using the DefineNamedOwnProperty bytecode for better performance.

LANGUAGE: cpp
CODE:
LdaImmutableCurrentContextSlot [2]

GetKeyedProperty <this>, [2]

DefineNamedOwnProperty <this>, [0], [4]

----------------------------------------

TITLE: Array Multiplication Function in C++
DESCRIPTION: This C++ function multiplies elements of two input arrays and stores the results in an output array. It demonstrates how the compiler can autovectorize the loop when SIMD is enabled.

LANGUAGE: cpp
CODE:
void multiply_arrays(int* out, int* in_a, int* in_b, int size) {
  for (int i = 0; i < size; i++) {
    out[i] = in_a[i] * in_b[i];
  }
}

----------------------------------------

TITLE: Ignition bytecode for modified add42 function
DESCRIPTION: Ignition bytecode generated for the modified add42 function that modifies its argument.

LANGUAGE: Assembly
CODE:
25 02             Ldar a0       ;; Load the first argument to the accumulator
40 2a 00          AddSmi [42]   ;; Add 42 to it
26 02             Star a0       ;; Store accumulator in the first argument slot
ab                Return        ;; Return the accumulator

----------------------------------------

TITLE: Adding Int32Add1 to machine-operator.cc
DESCRIPTION: Adds the Int32Add1 operator to the machine operator list in machine-operator.cc

LANGUAGE: diff
CODE:
diff --git a/src/compiler/machine-operator.cc b/src/compiler/machine-operator.cc
index 16e838c2aa..fdd6d951f0 100644
--- a/src/compiler/machine-operator.cc
+++ b/src/compiler/machine-operator.cc
@@ -136,6 +136,7 @@ MachineType AtomicOpType(Operator const* op) {
 #define MACHINE_PURE_OP_LIST(V)                                               \
   PURE_BINARY_OP_LIST_32(V)                                                   \
   PURE_BINARY_OP_LIST_64(V)                                                   \
+  V(Int32Add1, Operator::kNoProperties, 1, 0, 1)                              \
   V(Word32Clz, Operator::kNoProperties, 1, 0, 1)                              \
   V(Word64Clz, Operator::kNoProperties, 1, 0, 1)                              \
   V(Word32ReverseBytes, Operator::kNoProperties, 1, 0, 1)                     \

----------------------------------------

TITLE: Skipping Iterator Values with .drop()
DESCRIPTION: Shows using drop() helper to skip a specified number of iterator values. The example demonstrates skipping the first 10 blog posts.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

for (const post of posts.values().drop(10)) {
  console.log(post);
}

----------------------------------------

TITLE: Async Generator Function (ES2015+)
DESCRIPTION: Example of an async generator function using proposed async iteration syntax. This demonstrates advanced ES2015+ features that are challenging to transpile efficiently.

LANGUAGE: javascript
CODE:
async function* readLines(path) {
  let file = await fileOpen(path);
  try {
    while (!file.EOF) {
      yield await file.readLine();
    }
  } finally {
    await file.close();
  }
}

----------------------------------------

TITLE: Basic JavaScript Array Sorting Example
DESCRIPTION: Demonstrates basic usage of Array.prototype.sort with a custom comparison function that sorts numbers in ascending order.

LANGUAGE: javascript
CODE:
const array = [4, 2, 5, 3, 1];

function compare(a, b) {
  // Arbitrary code goes here, e.g. `array.push(1);`.
  return a - b;
}

// A "typical" sort call.
array.sort(compare);

----------------------------------------

TITLE: Reading File Contents in d8 JavaScript Shell
DESCRIPTION: Shows how to use the read() function in d8 to store the contents of a file into a variable.

LANGUAGE: javascript
CODE:
d8> const license = read('LICENSE');
d8> license
"This license applies to all parts of V8 that are not externally
maintained libraries.  The externally maintained libraries used by V8
are:
… (etc.)"

----------------------------------------

TITLE: Optimized Assembly Code for Object Creation
DESCRIPTION: Assembly code generated by V8 showing optimized object allocation with inline property initialization and map transitions.

LANGUAGE: asm
CODE:
43  mov ecx,[ebx+0x5dfa4]
49  lea edi,[ecx+0x1c]
4c  cmp [ebx+0x5dfa8],edi       ;; hey GC, can we have 28 (0x1c) bytes please?
52  jna 0x36ec4a5a  <+0x11a>

58  lea edi,[ecx+0x1c]
5b  mov [ebx+0x5dfa4],edi       ;; okay GC, we took it. KThxbye.
61  add ecx,0x1                 ;; hells yes. ecx is my new object.
64  mov edi,0x46647295          ;; object: 0x46647295 <Map(HOLEY_ELEMENTS)>
69  mov [ecx-0x1],edi           ;; Store the INITIAL MAP.
6c  mov edi,0x56f821a1          ;; object: 0x56f821a1 <FixedArray[0]>
71  mov [ecx+0x3],edi           ;; Store the PROPERTIES backing store (empty)
74  mov [ecx+0x7],edi           ;; Store the ELEMENTS backing store (empty)
77  mov edi,0x56f82329          ;; object: 0x56f82329 <undefined>
7c  mov [ecx+0xb],edi           ;; in-object property 1 <-- undefined
7f  mov [ecx+0xf],edi           ;; in-object property 2 <-- undefined
82  mov [ecx+0x13],edi          ;; in-object property 3 <-- undefined
85  mov [ecx+0x17],edi          ;; in-object property 4 <-- undefined

----------------------------------------

TITLE: Creating a Sparse Array with Dictionary Elements in JavaScript
DESCRIPTION: This example demonstrates how V8 switches to dictionary mode for very sparse arrays to save memory. It creates an array with a single element at a high index.

LANGUAGE: javascript
CODE:
const sparseArray = [];
sparseArray[9999] = 'foo'; // Creates an array with dictionary elements.

----------------------------------------

TITLE: Configuring V8 for TurboFan-only WebAssembly Compilation
DESCRIPTION: Command-line flags to configure V8 to use only the TurboFan compiler for WebAssembly, disabling Liftoff and tiering.

LANGUAGE: shell
CODE:
--no-liftoff --no-wasm-tier-up

----------------------------------------

TITLE: Declaring Builtin in V8 Definition List
DESCRIPTION: Demonstrates how to declare a new CodeStubAssembler builtin with JavaScript linkage in the BUILTIN_LIST_BASE macro

LANGUAGE: cpp
CODE:
#define BUILTIN_LIST_BASE(CPP, API, TFJ, TFC, TFS, TFH, ASM, DBG)              \
  TFJ(MathIs42, 1, kX)

----------------------------------------

TITLE: Flattening Mapped Values with .flatMap()
DESCRIPTION: Demonstrates flatMap() helper for mapping and flattening iterator values. The example shows extracting and flattening tags from blog posts.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

for (const tag of posts.values().flatMap((x) => x.querySelectorAll('.tag').values())) {
    console.log(tag.textContent);
}

----------------------------------------

TITLE: Transpiled Redux Reducer (ES5)
DESCRIPTION: Babel-transpiled ES5 version of the Redux reducer, showing the complexity added by transpilation, including a custom _extends function to polyfill Object.assign.

LANGUAGE: javascript
CODE:
'use strict';

var _extends = Object.assign || function(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};

function todoApp() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return _extends({}, state, { visibilityFilter: action.filter });
    default:
      return state;
  }
}

----------------------------------------

TITLE: WebAssembly Fibonacci Implementation with Tail Calls
DESCRIPTION: Recursive Fibonacci implementation in WebAssembly text format using return_call instruction for tail call optimization.

LANGUAGE: wasm
CODE:
(func $fib_rec (param $n i32) (param $a i32) (param $b i32) (result i32)
  (if (i32.eqz (local.get $n))
    (then (return (local.get $a)))
    (else
      (return_call $fib_rec
        (i32.sub (local.get $n) (i32.const 1))
        (local.get $b)
        (i32.add (local.get $a) (local.get $b))
      )
    )
  )
)

(func $fib (param $n i32) (result i32)
  (call $fib_rec (local.get $n) (i32.const 0) (i32.const 1))
)

----------------------------------------

TITLE: Adding kX64Int32Add1 to instruction-scheduler-x64.cc
DESCRIPTION: Adds the kX64Int32Add1 instruction to the x64 instruction scheduler in instruction-scheduler-x64.cc

LANGUAGE: diff
CODE:
diff --git a/src/compiler/backend/x64/instruction-scheduler-x64.cc b/src/compiler/backend/x64/instruction-scheduler-x64.cc
index 79eda7e78d..3667a84577 100644
--- a/src/compiler/backend/x64/instruction-scheduler-x64.cc
+++ b/src/compiler/backend/x64/instruction-scheduler-x64.cc
@@ -13,6 +13,7 @@ bool InstructionScheduler::SchedulerSupported() { return true; }
 int InstructionScheduler::GetTargetInstructionFlags(
     const Instruction* instr) const {
   switch (instr->arch_opcode()) {
+    case kX64Int32Add1:
     case kX64Add:
     case kX64Add32:
     case kX64And:

----------------------------------------

TITLE: Performance Testing Positive Point Instances in JavaScript
DESCRIPTION: This snippet creates Point instances with positive coordinates and measures the performance of repeatedly calling the dotProduct method.

LANGUAGE: javascript
CODE:
let a = new Point(1, 1);
let b = new Point(2, 2);
let dotProduct;

console.time('snippet1');
for (let i = 0; i < 10e6; i++) {
  dotProduct = a.dotProduct(b);
}
console.timeEnd('snippet1');

----------------------------------------

TITLE: BigInt TypedArray Usage Example
DESCRIPTION: Demonstrates the usage of new BigInt64Array TypedArray, showing how it exclusively works with BigInt values and throws errors for regular numbers.

LANGUAGE: javascript
CODE:
> const big_array = new BigInt64Array(1);
> big_array[0] = 123n;  // OK
> big_array[0]
123n
> big_array[0] = 456;
TypeError: Cannot convert 456 to a BigInt
> big_array[0] = BigInt(456);  // OK

----------------------------------------

TITLE: Optimized Pseudocode After GC-aware Optimization
DESCRIPTION: This shows the result of optimizing the previous pseudocode example, demonstrating how WasmGC allows for more aggressive optimizations that eliminate allocations and simplify the function.

LANGUAGE: csharp
CODE:
func foo() {
  return 10;
}

----------------------------------------

TITLE: Demonstrating RegExp Unicode Flag in JavaScript
DESCRIPTION: This snippet shows the usage of the new RegExp Unicode flag 'u' in V8 v5.0. It demonstrates how the flag enables matching of Unicode codepoints and improves handling of emoji and other Unicode characters in regular expressions.

LANGUAGE: javascript
CODE:
/😊{2}/.test('😊😊');
// false

/😊{2}/u.test('😊😊');
// true

/\u{76}\u{38}/u.test('v8');
// true

/\u{1F60A}/u.test('😊');
// true

----------------------------------------

TITLE: Defining an enum in Torque
DESCRIPTION: This example demonstrates how to define an enum in Torque.

LANGUAGE: torque
CODE:
extern enum LanguageMode extends Smi {
  kStrict,
  kSloppy
}

----------------------------------------

TITLE: Demonstrating RegExp Subclassing Performance Impact
DESCRIPTION: Illustrates how RegExp subclassing forces execution to take the slow path due to requiring more generic handling, resulting in reduced performance.

LANGUAGE: javascript
CODE:
class SlowRegExp extends RegExp {}
new SlowRegExp(".", "g").exec('');  // Slow path.

----------------------------------------

TITLE: Testing Any Value with .some()
DESCRIPTION: Demonstrates using some() helper to test if any iterator value meets a condition. The example checks for posts containing 'Iterators' in the title.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

posts.values().some((x) => x.textContent.includes('Iterators'));

----------------------------------------

TITLE: Using WebAssembly Streaming API in JavaScript
DESCRIPTION: This snippet demonstrates how to use the WebAssembly streaming API to compile and instantiate a WebAssembly module. It fetches a 'fibonacci.wasm' file, instantiates it, and calls an exported 'fibonacci' function.

LANGUAGE: javascript
CODE:
(async () => {
  const fetchPromise = fetch('fibonacci.wasm');
  const { instance } = await WebAssembly.instantiateStreaming(fetchPromise);
  const result = instance.exports.fibonacci(42);
  console.log(result);
})();

----------------------------------------

TITLE: Code Review Upload
DESCRIPTION: Command to upload code for review

LANGUAGE: bash
CODE:
git cl upload

----------------------------------------

TITLE: Defining a Non-Configurable Array Element in JavaScript
DESCRIPTION: This snippet shows how defining an array element with a custom descriptor forces V8 to use slow elements. It creates a non-configurable property on an array.

LANGUAGE: javascript
CODE:
const array = [];
Object.defineProperty(array, 0, {value: 'fixed' configurable: false});
console.log(array[0]);      // Prints 'fixed'.
array[0] = 'other value';   // Cannot override index 0.
console.log(array[0]);      // Still prints 'fixed'.

----------------------------------------

TITLE: Compiling WebAssembly Block with Liftoff
DESCRIPTION: Example showing how Liftoff handles compilation of a WebAssembly block with control flow. It illustrates state snapshots, register deduplication, and state merging at block boundaries.

LANGUAGE: WebAssembly
CODE:
block
  local.get 0
  if
    ...
  end
end

----------------------------------------

TITLE: Displaying Stack Trace with GDB JIT Compilation Interface in V8
DESCRIPTION: This snippet demonstrates a more informative stack trace produced by GDB when GDB JIT Compilation Interface is enabled. It shows source file and line number information for some of the previously unknown frames.

LANGUAGE: shell
CODE:
#6  0x082857fc in v8::internal::Runtime_SetProperty (args=...) at src/runtime.cc:3758
#7  0xf5cae28e in ?? ()
#8  0xf5cc3a0a in loop () at test.js:6
#9  0xf5cc38f4 in test.js () at test.js:13
#10 0xf5cbef19 in ?? ()
#11 0xf5cb09a2 in ?? ()
#12 0x0809e1f9 in v8::internal::Invoke (construct=false, func=..., receiver=..., argc=0, args=0x0,
    has_pending_exception=0xffffd44f) at src/execution.cc:97

----------------------------------------

TITLE: Updating Local Repository
DESCRIPTION: Commands for keeping local repository up-to-date with remote changes

LANGUAGE: bash
CODE:
git pull
gclient sync

----------------------------------------

TITLE: Original StringsStorage Hash Function Implementation
DESCRIPTION: The original problematic hash function implementation for numeric strings in V8's StringsStorage that caused performance issues due to hash collisions.

LANGUAGE: cpp
CODE:
int32_t OriginalHash(const std::string& numeric_string) {
  int kValueBits = 24;

  int32_t mask = (1 << kValueBits) - 1; /* 0xffffff */
  return (numeric_string.length() << kValueBits) | (numeric_string & mask);
}

----------------------------------------

TITLE: Basic Numeric Literals Without Separators
DESCRIPTION: Example showing large numeric literals without separators, demonstrating readability challenges.

LANGUAGE: javascript
CODE:
1000000000000
   1019436871.42

----------------------------------------

TITLE: Defining a garbage-collected C++ class with Oilpan
DESCRIPTION: Demonstrates how to define a C++ class managed by Oilpan, including inheritance from GarbageCollected, implementing the Trace method, and using the Member smart pointer for managed references.

LANGUAGE: cpp
CODE:
class LinkedNode final : public GarbageCollected<LinkedNode> {
 public:
  LinkedNode(LinkedNode* next, int value) : next_(next), value_(value) {}
  void Trace(Visitor* visitor) const {
    visitor->Trace(next_);
  }
 private:
  Member<LinkedNode> next_;
  int value_;
};

LinkedNode* CreateNodes() {
  LinkedNode* first_node = MakeGarbageCollected<LinkedNode>(nullptr, 1);
  LinkedNode* second_node = MakeGarbageCollected<LinkedNode>(first_node, 2);
  return second_node;
}

----------------------------------------

TITLE: Generating V8 build files with specific arguments using gn
DESCRIPTION: This command generates build files for V8 with specific arguments, including release mode, arm64 simulator, and using goma for compilation.

LANGUAGE: bash
CODE:
gn gen out/foo --args='is_debug=false target_cpu="x64" v8_target_cpu="arm64" use_goma=true'

----------------------------------------

TITLE: Running d8 with Runtime Call Stats for V8 Performance Metrics
DESCRIPTION: This command uses the d8 command-line JavaScript shell to run a JavaScript file with Runtime Call Stats enabled, providing V8-internal performance metrics.

LANGUAGE: bash
CODE:
d8 --runtime-call-stats foo.js

----------------------------------------

TITLE: Expected Property Calculation in V8
DESCRIPTION: C++ implementation showing how V8 calculates the expected number of properties for a new object, including prototype chain analysis and extra slack space.

LANGUAGE: cpp
CODE:
int JSFunction::CalculateExpectedNofProperties(Isolate* isolate,
                                               Handle<JSFunction> function) {
  int expected_nof_properties = 0;
  for (PrototypeIterator iter(isolate, function, kStartAtReceiver);
       !iter.IsAtEnd(); iter.Advance()) {
    Handle<JSReceiver> current =
        PrototypeIterator::GetCurrent<JSReceiver>(iter);
    if (!current->IsJSFunction()) break;
    Handle<JSFunction> func = Handle<JSFunction>::cast(current);

    // The super constructor should be compiled for the number of expected
    // properties to be available.
    Handle<SharedFunctionInfo> shared(func->shared(), isolate);
    IsCompiledScope is_compiled_scope(shared->is_compiled_scope(isolate));
    if (is_compiled_scope.is_compiled() ||
        Compiler::Compile(func, Compiler::CLEAR_EXCEPTION,
                          &is_compiled_scope)) {
      DCHECK(shared->is_compiled());
      int count = shared->expected_nof_properties();
      // Check that the estimate is sensible.
      if (expected_nof_properties <= JSObject::kMaxInObjectProperties - count) {
        expected_nof_properties += count;
      } else {
        return JSObject::kMaxInObjectProperties;
      }
    } else {
      // In case there was a compilation error proceed iterating in case there
      // will be a builtin function in the prototype chain that requires
      // certain number of in-object properties.
      continue;
    }
  }
  // In-object slack tracking will reclaim redundant inobject space
  // later, so we can afford to adjust the estimate generously,
  // meaning we over-allocate by at least 8 slots in the beginning.
  if (expected_nof_properties > 0) {
    expected_nof_properties += 8;
    if (expected_nof_properties > JSObject::kMaxInObjectProperties) {
      expected_nof_properties = JSObject::kMaxInObjectProperties;
    }
  }
  return expected_nof_properties;
}

----------------------------------------

TITLE: Implementing JSArray::fizzbuzz() with a Subtle Memory Corruption Bug in C++
DESCRIPTION: This snippet demonstrates a hypothetical JavaScript engine vulnerability in the implementation of JSArray::fizzbuzz(). The function replaces array values divisible by 3, 5, or both with 'fizz', 'buzz', or 'fizzbuzz' respectively. However, it contains a subtle bug that can lead to memory corruption due to side effects during number conversion.

LANGUAGE: cpp
CODE:
 1. for (int index = 0; index < length_; index++) {
 2.     JSValue js_value = buffer_[index];
 3.     int value = ToNumber(js_value).int_value();
 4.     if (value % 15 == 0)
 5.         buffer_[index] = JSString("fizzbuzz");
 6.     else if (value % 5 == 0)
 7.         buffer_[index] = JSString("buzz");
 8.     else if (value % 3 == 0)
 9.         buffer_[index] = JSString("fizz");
10. }

----------------------------------------

TITLE: Implementing Write Barrier for Incremental Marking in C++
DESCRIPTION: This code snippet shows the implementation of a write barrier used in incremental marking. It checks object colors and updates the marking worklist when necessary.

LANGUAGE: cpp
CODE:
// Called after `object.field = value`.
write_barrier(object, field_offset, value) {
  if (color(object) == black && color(value) == white) {
    set_color(value, grey);
    marking_worklist.push(value);
  }
}

----------------------------------------

TITLE: Unsafe JSON Import Example
DESCRIPTION: Demonstrates an unsafe way to import JSON that could lead to security vulnerabilities.

LANGUAGE: javascript
CODE:
import json from './foo.json';

----------------------------------------

TITLE: Updating DEPS File
DESCRIPTION: Commands to update the node-ci DEPS file with the new Node.js commit hash and create a CL.

LANGUAGE: bash
CODE:
git checkout -b update-deps
gclient setdep --var=node_revision=<merged-commit-hash>
git add DEPS
git commit -m 'Update Node'
git cl upload

----------------------------------------

TITLE: Common JavaScript Performance APIs mentioned
DESCRIPTION: Core JavaScript methods that were optimized as part of V8's performance improvements, including Object.create and Function.prototype.bind.

LANGUAGE: javascript
CODE:
Object.create
Function.prototype.bind

----------------------------------------

TITLE: Traditional try-catch with Required Binding
DESCRIPTION: Example showing the traditional way of using try-catch where a binding parameter was mandatory in the catch clause, even if unused.

LANGUAGE: javascript
CODE:
try {
  doSomethingThatMightThrow();
} catch (exception) {
  //     ^
  // We must name the binding, even if we don't use it!
  handleException();
}

----------------------------------------

TITLE: Tracking Object Retention Path in V8 JavaScript
DESCRIPTION: Example demonstrating how to use %DebugTrackRetainingPath to track why an object is not being garbage collected. Creates a closure that retains an object reference.

LANGUAGE: javascript
CODE:
function foo() {
  const x = { bar: 'bar' };
  %DebugTrackRetainingPath(x);
  return () => { return x; }
}
const closure = foo();
gc();

----------------------------------------

TITLE: Pushing Node.js Changes
DESCRIPTION: Command to push local changes to your Node.js fork on GitHub.

LANGUAGE: bash
CODE:
git push <your-user-name> $BRANCH_NAME

----------------------------------------

TITLE: Retrieving Object Hash Code in JavaScript (V8 internal)
DESCRIPTION: This function retrieves the hash code for a JavaScript object key. If the hash code doesn't exist, it generates a new random hash and stores it on the object using a private symbol.

LANGUAGE: javascript
CODE:
function GetObjectHash(key) {
  let hash = key[hashCodeSymbol];
  if (IS_UNDEFINED(hash)) {
    hash = (MathRandom() * 0x40000000) | 0;
    if (hash === 0) hash = 1;
    key[hashCodeSymbol] = hash;
  }
  return hash;
}

----------------------------------------

TITLE: Invalid destructor access in Oilpan-managed class
DESCRIPTION: Shows an example of invalid access to other heap objects in a destructor, which is not allowed in Oilpan and caught by a Clang plugin.

LANGUAGE: cpp
CODE:
class GCed : public GarbageCollected<GCed> {
 public:
  void DoSomething();
  void Trace(Visitor* visitor) {
    visitor->Trace(other_);
  }
  ~GCed() {
    other_->DoSomething();  // error: Finalizer '~GCed' accesses
                            // potentially finalized field 'other_'.
  }
 private:
  Member<GCed> other_;
};

----------------------------------------

TITLE: Demonstrating ES2016 Exponentiation Operator in JavaScript
DESCRIPTION: This snippet showcases the usage of the new ES2016 exponentiation operator, which provides an infix notation to replace Math.pow. It demonstrates both basic exponentiation and the compound assignment operator.

LANGUAGE: javascript
CODE:
let n = 3**3; // n == 27
n **= 2; // n == 729

----------------------------------------

TITLE: Installing Perf Dependencies
DESCRIPTION: Commands for installing necessary dependencies and building Linux perf from source.

LANGUAGE: bash
CODE:
sudo apt-get install linux-generic-lts-wily;
sudo apt-get install libdw-dev libunwind8-dev systemtap-sdt-dev libaudit-dev \
   libslang2-dev binutils-dev liblzma-dev;
cd some/directory;
git clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git;
cd tip/tools/perf;
make

----------------------------------------

TITLE: Implementing Value Decompression in C++
DESCRIPTION: Code for decompressing 32-bit compressed values back into 64-bit pointers using a base address and sign extension.

LANGUAGE: cpp
CODE:
int32_t compressed_tagged;

// Common code for both pointer and Smi cases
int64_t uncompressed_tagged = int64_t(compressed_tagged);
if (uncompressed_tagged & 1) {
  // pointer case
  uncompressed_tagged += base;
}

----------------------------------------

TITLE: Displaying error for invalid variable names using RegExp match indices in JavaScript
DESCRIPTION: This function uses RegExp match indices to highlight and display an error message for invalid variable names that are JavaScript reserved words.

LANGUAGE: javascript
CODE:
function displayError(text, message) {
  const re = /\b(continue|function|break|for|if)\b/d;
  const match = text.match(re);
  // Index `1` corresponds to the first capture group.
  const [start, end] = match.indices[1];
  const error = ' '.repeat(start) + // Adjust the caret position.
    '^' +
    '-'.repeat(end - start - 1) +   // Append the underline.
    ' ' + message;                  // Append the message.
  console.log(text);
  console.log(error);
}

const code = 'const function = foo;'; // faulty code
displayError(code, 'Invalid variable name');

----------------------------------------

TITLE: Illustrating Function Preparsing in V8
DESCRIPTION: This code example demonstrates how V8 preparses functions and only fully parses and compiles them when called.

LANGUAGE: javascript
CODE:
// This is the top-level scope.
function outer() {
  // preparsed
  function inner() {
    // preparsed
  }
}

outer(); // Fully parses and compiles `outer`, but not `inner`.

----------------------------------------

TITLE: Creating Multiple Optimized Closures in V8
DESCRIPTION: This JavaScript code extends the previous example by creating multiple closures that point to the same optimized code object. It demonstrates how V8 handles multiple functions sharing the same optimized code.

LANGUAGE: javascript
CODE:
const f2 = g();
f2(0);

----------------------------------------

TITLE: Initializing ICU in V8 Embedded Applications
DESCRIPTION: Required initialization code for applications embedding V8 that need ICU support. Safe to call even if ICU is not compiled in.

LANGUAGE: cpp
CODE:
v8::V8::InitializeICU();

----------------------------------------

TITLE: Proxy Construction Performance Test
DESCRIPTION: Test script demonstrating proxy construction performance with a class constructor target.

LANGUAGE: javascript
CODE:
function MyClass() {}
MyClass.prototype = {};
const P = new Proxy(MyClass, {});
function run() {
  return new P();
}
const N = 1e5;
console.time('run');
for (let i = 0; i < N; ++i) {
  run();
}
console.timeEnd('run');

----------------------------------------

TITLE: Demonstrating RegExp dotAll mode in JavaScript
DESCRIPTION: Shows how to use the 's' flag to enable dotAll mode in regular expressions, allowing the '.' to match any character including line terminators.

LANGUAGE: javascript
CODE:
/foo.bar/su.test('foo\nbar'); // true

----------------------------------------

TITLE: Emscripten Memory Access Pattern
DESCRIPTION: Shows the traditional way Emscripten handles memory access using signed shift operations, which can cause problems with addresses above 2GB.

LANGUAGE: javascript
CODE:
HEAP32[(ptr + offset) >> 2]

----------------------------------------

TITLE: Implementing Int32Add1 for x64 in instruction-selector-x64.cc
DESCRIPTION: Implements the Int32Add1 instruction for x64 architecture in instruction-selector-x64.cc

LANGUAGE: diff
CODE:
diff --git a/src/compiler/backend/x64/instruction-selector-x64.cc b/src/compiler/backend/x64/instruction-selector-x64.cc
index 2324e119a6..4b55671243 100644
--- a/src/compiler/backend/x64/instruction-selector-x64.cc
+++ b/src/compiler/backend/x64/instruction-selector-x64.cc
@@ -841,6 +841,11 @@ void InstructionSelector::VisitWord32ReverseBytes(Node* node) {
   Emit(kX64Bswap32, g.DefineSameAsFirst(node), g.UseRegister(node->InputAt(0)));
 }

+void InstructionSelector::VisitInt32Add1(Node* node) {
+  X64OperandGenerator g(this);
+  Emit(kX64Int32Add1, g.DefineSameAsFirst(node), g.UseRegister(node->InputAt(0)));
+}
+

----------------------------------------

TITLE: Viewing V8 Builtins in GDB Stack Traces
DESCRIPTION: This snippet shows how builtins are visible in GDB stack traces. It demonstrates the output of the 'bt' command, revealing the builtin function in the call stack.

LANGUAGE: gdb
CODE:
(gdb) bt
#0  0x00007ffff7ac8784 in Builtins_RegExpPrototypeExec ()
#1  0x00007ffff78f5066 in Builtins_ArgumentsAdaptorTrampoline ()
#2  0x000039751d2825b1 in ?? ()
#3  0x000037ef23a0fa59 in ?? ()
#4  0x0000000000000000 in ?? ()

----------------------------------------

TITLE: Dynamically Loaded Module Provider
DESCRIPTION: Simple WebAssembly module that provides a function returning the value 42, designed to be loaded dynamically.

LANGUAGE: C
CODE:
// This is a simple provider of forty-two
#include <emscripten.h>

EMSCRIPTEN_KEEPALIVE long provide42(){
  return 42l;
}

----------------------------------------

TITLE: Getting variable position using RegExp match indices in JavaScript
DESCRIPTION: This function demonstrates the use of RegExp match indices to find the exact position of a variable name in a declaration statement.

LANGUAGE: javascript
CODE:
function getVariablePosition(source) {
  // Notice the `d` flag, which enables `match.indices`
  const re = /(let|const|var)\s+([a-zA-Z_$][0-9a-zA-Z_$]*)/d;
  const match = re.exec(source);
  if (!match) return undefined;
  return match.indices[2];
}
getVariablePosition('let foo');
// → [4, 7]

----------------------------------------

TITLE: Implementing the Core Sparkplug Compiler Loop in C++
DESCRIPTION: The main loop of the Sparkplug compiler, which iterates over bytecode and compiles it directly to machine code in a single pass without an intermediate representation.

LANGUAGE: cpp
CODE:
// The Sparkplug compiler (abridged).
for (; !iterator.done(); iterator.Advance()) {
  VisitSingleBytecode();
}

----------------------------------------

TITLE: Triggering Flake Bisect
DESCRIPTION: Example command for triggering a flake bisect analysis on a specific test revision

LANGUAGE: bash
CODE:
bb add v8/try.triggered/v8_flako -p 'to_revision="deadbeef"' -p 'test_name="MyTest"' ...

----------------------------------------

TITLE: Navigating to V8 Source Directory
DESCRIPTION: Changes the current working directory to the V8 source location.

LANGUAGE: bash
CODE:
cd /path/to/v8

----------------------------------------

TITLE: TurboFan optimized code for add42 call
DESCRIPTION: TurboFan-generated optimized assembly code for calling the add42 function.

LANGUAGE: Assembly
CODE:
movq rdi,0x1a8e082126ad    ;; Load the function object <JSFunction add42>
push 0x6                   ;; Push SMI 3 as argument
movq rcx,0x1a8e082030d1    ;; <JSGlobal Object>
push rcx                   ;; Push receiver (the global proxy object)
movl rax,0x1               ;; Save the arguments count in rax
movl rcx,[rdi+0x17]        ;; Load function object {Code} field in rcx
call rcx                   ;; Finally, call the code object!

----------------------------------------

TITLE: Adding Int32Add1 to machine-operator.h
DESCRIPTION: Declares the Int32Add1 operator in the machine operator header file

LANGUAGE: diff
CODE:
diff --git a/src/compiler/machine-operator.h b/src/compiler/machine-operator.h
index a2b9fce0ee..f95e75a445 100644
--- a/src/compiler/machine-operator.h
+++ b/src/compiler/machine-operator.h
@@ -265,6 +265,8 @@ class V8_EXPORT_PRIVATE MachineOperatorBuilder final
   const Operator* Word32PairShr();
   const Operator* Word32PairSar();

+  const Operator* Int32Add1();
+
   const Operator* Int32Add();
   const Operator* Int32AddWithOverflow();
   const Operator* Int32Sub();

----------------------------------------

TITLE: Running Debug Code Coverage Analysis Locally for Multiple Architectures in V8
DESCRIPTION: This command shows how to run a Debug build code coverage analysis locally for multiple architectures (x64, arm, and arm64) using the gcov.sh script in V8. It uses an environment variable to specify the build type.

LANGUAGE: bash
CODE:
BUILD_TYPE=Debug ./tools/gcov.sh x64 arm arm64

----------------------------------------

TITLE: JavaScript Block Coverage Example
DESCRIPTION: Example showing block-level coverage tracking of conditional expressions.

LANGUAGE: javascript
CODE:
function f(a) {
  return a ? b : c;
}

f(true);

----------------------------------------

TITLE: Using named capture groups with RegExp match indices in JavaScript
DESCRIPTION: This function demonstrates how to use named capture groups in combination with RegExp match indices to get the position of a variable identifier.

LANGUAGE: javascript
CODE:
function getVariablePosition(source) {
  const re = /(?<keyword>let|const|var)\s+(?<id>[a-zA-Z_$][0-9a-zA-Z_$]*)/d;
  const match = re.exec(source);
  if (!match) return -1;
  return match.indices.groups.id;
}
getVariablePosition('let foo');

----------------------------------------

TITLE: Performance Testing Negative Point Instances in JavaScript
DESCRIPTION: This snippet creates Point instances with negative coordinates and measures the performance of repeatedly calling the dotProduct method, demonstrating a performance regression compared to positive coordinates.

LANGUAGE: javascript
CODE:
a = new Point(-1, -1);
b = new Point(-2, -2);
console.time('snippet2');
for (let i = 0; i < 10e6; i++) {
  dotProduct = a.dotProduct(b);
}
console.timeEnd('snippet2');

----------------------------------------

TITLE: Template literal revision example in JavaScript
DESCRIPTION: Illustrates the loosened restrictions on escape sequences in template literals, enabling new use cases such as writing a LaTeX processor.

LANGUAGE: javascript
CODE:
const latex = (strings) => {
  // …
};

const document = latex`
\newcommand{\fun}{\textbf{Fun!}}
\newcommand{\unicode}{\textbf{Unicode!}}
\newcommand{\xerxes}{\textbf{King!}}
Breve over the h goes \u{h}ere // Illegal token!
`;

----------------------------------------

TITLE: Loading External Scripts in d8
DESCRIPTION: Illustrates how to use the load() function in d8 to run another JavaScript file in the current context.

LANGUAGE: bash
CODE:
$ cat util.js
function greet(name) {
  return 'Hello, ' + name;
}

$ d8
d8> load('util.js');
d8> greet('World!');
"Hello, World!"

----------------------------------------

TITLE: Git Checkout Command for V8 v5.7
DESCRIPTION: Command to checkout V8 version 5.7 branch for development and testing purposes.

LANGUAGE: bash
CODE:
git checkout -b 5.7 -t branch-heads/5.7

----------------------------------------

TITLE: Implementing Lazy Unlinking in V8 (x64 Assembly)
DESCRIPTION: This C++ code generates x64 assembly instructions for implementing lazy unlinking of deoptimized functions in V8. It includes steps to check if a function is marked for deoptimization and jump to a builtin if needed.

LANGUAGE: cpp
CODE:
Label current;
// Load effective address of current instruction into rcx.
__ leaq(rcx, Operand(&current));
__ bind(&current);

int pc = __ pc_offset();
int offset = Code::kKindSpecificFlags1Offset - (Code::kHeaderSize + pc);

// Test if the bit is set, that is, if the code is marked for deoptimization.
__ testl(Operand(rcx, offset),
         Immediate(1 << Code::kMarkedForDeoptimizationBit));
// Jump to builtin if it is.
__ j(not_zero, /* handle to builtin code here */, RelocInfo::CODE_TARGET);

----------------------------------------

TITLE: Array Sort with Getters and Setters Example
DESCRIPTION: Demonstrates implementation-defined behavior when sorting arrays with accessor properties across different JavaScript engines.

LANGUAGE: javascript
CODE:
const array = [0, 1, 2];

Object.defineProperty(array, '0', {
  get() { console.log('get 0'); return 0; },
  set(v) { console.log('set 0'); }
});

Object.defineProperty(array, '1', {
  get() { console.log('get 1'); return 1; },
  set(v) { console.log('set 1'); }
});

array.sort();

----------------------------------------

TITLE: Building V8 Monolith for iOS
DESCRIPTION: Execute the ninja command to build the monolithic V8 library for iOS. This generates a libv8_monolith.a file containing all V8 libraries and the V8 snapshot.

LANGUAGE: bash
CODE:
ninja -C out/release-ios v8_monolith

----------------------------------------

TITLE: Using Arguments Object vs. Rest Parameters in JavaScript
DESCRIPTION: Compares the use of the arguments object with ES2015 rest parameters, showing how rest parameters provide a more optimizable array.

LANGUAGE: JavaScript
CODE:
const logArgs = function() {
  Array.prototype.forEach.call(arguments, (value, index) => {
    console.log(`${ index }: ${ value }`);
  });
};
logArgs('a', 'b', 'c');

const logArgs = (...args) => {
  args.forEach((value, index) => {
    console.log(`${ index }: ${ value }`);
  });
};
logArgs('a', 'b', 'c');

----------------------------------------

TITLE: Unicode properties of strings with RegExp `v` flag
DESCRIPTION: Shows how to use Unicode properties of strings, which can match multi-character strings. The example uses the `RGI_Emoji` property to match emojis consisting of multiple code points.

LANGUAGE: javascript
CODE:
const re = /^\p{RGI_Emoji}$/v;

// Match an emoji that consists of just 1 code point:
re.test('⚽'); // '\u26BD'
// → true ✅

// Match an emoji that consists of multiple code points:
re.test('👨🏾‍⚕️'); // '\u{1F468}\u{1F3FE}\u200D\u2695\uFE0F'
// → true ✅

----------------------------------------

TITLE: Optimizing a JavaScript Function in V8
DESCRIPTION: This JavaScript code creates a closure and optimizes it by calling it multiple times. It then creates many closures that will use the previously optimized code, demonstrating how V8 handles optimized functions.

LANGUAGE: javascript
CODE:
function g() {
  return (i) => i;
}

// Create a closure.
const f1 = g();
// Optimize f1.
for (var i = 0; i < 1000; i++) f1(0);

----------------------------------------

TITLE: Connecting to gdbserver from Host for Debugging
DESCRIPTION: Commands to set up port forwarding and connect to gdbserver on the Android device for debugging.

LANGUAGE: bash
CODE:
adb forward tcp:5039 tcp:5039
gdb $D8
gdb> target remote :5039

----------------------------------------

TITLE: Checking V8 API Changes with Git
DESCRIPTION: Git command to view API changes between V8 versions 6.6 and 6.7 in the include/v8.h file.

LANGUAGE: git
CODE:
git log branch-heads/6.6..branch-heads/6.7 include/v8.h

----------------------------------------

TITLE: Defining JSArrayBuffer Class Before Sandbox Implementation in C++
DESCRIPTION: This code snippet shows the definition of the JSArrayBuffer class before the implementation of the V8 Sandbox. It contains raw pointers and sizes that could be corrupted to create arbitrary read/write primitives.

LANGUAGE: cpp
CODE:
class JSArrayBuffer: public JSObject {
  private:
    byte* buffer_;
    size_t size_;
};

----------------------------------------

TITLE: Building V8 and running tests using gm
DESCRIPTION: This command builds V8 for x64 architecture in release mode and runs the tests immediately after building.

LANGUAGE: bash
CODE:
gm x64.release.check

----------------------------------------

TITLE: Disabling warnings as errors for V8 build on Arm64 Linux
DESCRIPTION: Sets a GN argument to prevent treating warnings as errors when building V8 with system Clang on Arm64 Linux.

LANGUAGE: bash
CODE:
treat_warnings_as_errors=false

----------------------------------------

TITLE: Using Intl.supportedValuesOf() for Enumeration in JavaScript
DESCRIPTION: This snippet demonstrates the usage of the new Intl.supportedValuesOf() function introduced in V8 v9.9. It shows how to retrieve supported identifiers for various Intl API categories.

LANGUAGE: javascript
CODE:
Intl.supportedValuesOf('calendar')
// ['buddhist', 'chinese', 'coptic', 'dangi', ...]

Intl.supportedValuesOf('collation')
// ['big5han', 'compat', 'dict', 'emoji', ...]

Intl.supportedValuesOf('currency')
// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]

Intl.supportedValuesOf('numberingSystem')
// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]

Intl.supportedValuesOf('timeZone')
// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]

Intl.supportedValuesOf('unit')
// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]

----------------------------------------

TITLE: Comparing new trimming methods with non-standard aliases in JavaScript
DESCRIPTION: This snippet compares the new trimStart() and trimEnd() methods with their non-standard aliases trimLeft() and trimRight(). It also includes the standard trim() method for reference. The code demonstrates that the new methods and their aliases produce the same results.

LANGUAGE: javascript
CODE:
const string = '  hello world  ';
string.trimStart();
// → 'hello world  '
string.trimLeft();
// → 'hello world  '
string.trimEnd();
// → '  hello world'
string.trimRight();
// → '  hello world'
string.trim(); // ES5
// → 'hello world'

----------------------------------------

TITLE: Custom Error Implementation - JavaScript
DESCRIPTION: Example of implementing a custom error with stack trace capture

LANGUAGE: javascript
CODE:
function MyError() {
  Error.captureStackTrace(this, MyError);
  // Any other initialization goes here.
}

----------------------------------------

TITLE: RegExp Bytecode Structure Example
DESCRIPTION: Example bytecode array representing the pattern /12|ab/y, showing the structure of RegExp instructions.

LANGUAGE: javascript
CODE:
const code = [
  {opcode: 'FORK', forkPc: 4},
  {opcode: 'CONSUME', char: '1'},
  {opcode: 'CONSUME', char: '2'},
  {opcode: 'JMP', jmpPc: 6},
  {opcode: 'CONSUME', char: 'a'},
  {opcode: 'CONSUME', char: 'b'},
  {opcode: 'ACCEPT'}
];

----------------------------------------

TITLE: Configuring V8 build to use GCC on Arm64 Linux
DESCRIPTION: Sets GN arguments to disable Clang and use GCC for building V8 on Arm64 Linux.

LANGUAGE: bash
CODE:
is_clang=false

----------------------------------------

TITLE: Checking V8 API Changes
DESCRIPTION: Git command to view API changes between V8 versions 8.6 and 8.7 in the v8.h file.

LANGUAGE: bash
CODE:
git log branch-heads/8.6..branch-heads/8.7 include/v8.h

----------------------------------------

TITLE: Checking Out V8 v9.6 Branch Using Git
DESCRIPTION: Command to checkout the V8 v9.6 branch for experimenting with new features.

LANGUAGE: shell
CODE:
git checkout -b 9.6 -t branch-heads/9.6

----------------------------------------

TITLE: Adding I32Add1 opcode to wasm-opcodes.h
DESCRIPTION: Adds the new I32Add1 instruction to the FOREACH_SIMPLE_OPCODE section in wasm-opcodes.h

LANGUAGE: diff
CODE:
diff --git a/src/wasm/wasm-opcodes.h b/src/wasm/wasm-opcodes.h
index 6970c667e7..867cbf451a 100644
--- a/src/wasm/wasm-opcodes.h
+++ b/src/wasm/wasm-opcodes.h
@@ -96,6 +96,7 @@ bool IsJSCompatibleSignature(const FunctionSig* sig, bool hasBigIntFeature);

 // Expressions with signatures.
 #define FOREACH_SIMPLE_OPCODE(V)  \
+  V(I32Add1, 0xee, i_i)           \
   V(I32Eqz, 0x45, i_i)            \
   V(I32Eq, 0x46, i_ii)            \
   V(I32Ne, 0x47, i_ii)            \

----------------------------------------

TITLE: Running V8 tests for the most recent GN build
DESCRIPTION: This command runs V8 tests for the most recently compiled GN build.

LANGUAGE: bash
CODE:
tools/run-tests.py --gn

----------------------------------------

TITLE: Setting GN arguments for V8 optdebug build on Arm64 Linux
DESCRIPTION: Configures GN arguments for an optimized debug build of V8 on Arm64 Linux with backtraces and slow dchecks enabled.

LANGUAGE: bash
CODE:
is_debug=true
v8_enable_backtrace=true
v8_enable_slow_dchecks=true

----------------------------------------

TITLE: Checking V8 API Changes Using Git
DESCRIPTION: This bash command shows how to use git to get a list of API changes between V8 versions 8.3 and 8.4.

LANGUAGE: bash
CODE:
git log branch-heads/8.3..branch-heads/8.4 include/v8.h

----------------------------------------

TITLE: Creating Symbol with Description
DESCRIPTION: Demonstrates how to create a Symbol with a description parameter

LANGUAGE: javascript
CODE:
const symbol = Symbol('foo');

----------------------------------------

TITLE: Implementing Stub-Linked HeapNumber Builtin in Torque
DESCRIPTION: Defines a stub-linked builtin for handling HeapNumber case separately, demonstrating code reuse and optimization.

LANGUAGE: torque
CODE:
namespace math {
  builtin HeapNumberIs42(implicit context: Context)(heapNumber: HeapNumber):
      Boolean {
    return Convert<float64>(heapNumber) == 42 ? True : False;
  }

  javascript builtin MathIs42(implicit context: Context)(
      receiver: Object, x: Object): Boolean {
    const number: Number = ToNumber_Inline(x);
    typeswitch (number) {
      case (smi: Smi): {
        return smi == 42 ? True : False;
      }
      case (heapNumber: HeapNumber): {
        return HeapNumberIs42(heapNumber);
      }
    }
  }
}

----------------------------------------

TITLE: Setting GN arguments for V8 release build on Arm64 Linux
DESCRIPTION: Configures GN arguments for a release build of V8 on Arm64 Linux.

LANGUAGE: bash
CODE:
is_debug=false

----------------------------------------

TITLE: Creating Arrays with Holes vs. Packed Arrays in JavaScript
DESCRIPTION: Demonstrates how different ways of creating arrays can lead to holey or packed elements kinds, affecting potential optimizations.

LANGUAGE: JavaScript
CODE:
const array = new Array(3);
array[0] = 'a';
array[1] = 'b';
array[2] = 'c';

const array = ['a', 'b', 'c'];
// elements kind: PACKED_ELEMENTS

const array = [];
// …
array.push(someValue);
// …
array.push(someOtherValue);

----------------------------------------

TITLE: Adding Int32Add1 to opcodes.h
DESCRIPTION: Adds Int32Add1 to the list of machine unary operations in opcodes.h

LANGUAGE: diff
CODE:
diff --git a/src/compiler/opcodes.h b/src/compiler/opcodes.h
index ce24a0bd3f..2c8c5ebaca 100644
--- a/src/compiler/opcodes.h
+++ b/src/compiler/opcodes.h
@@ -506,6 +506,7 @@
   V(Float64LessThanOrEqual)

 #define MACHINE_UNOP_32_LIST(V) \
+  V(Int32Add1)                  \
   V(Word32Clz)                  \
   V(Word32Ctz)                  \
   V(Int32AbsWithOverflow)       \

----------------------------------------

TITLE: Custom Stack Trace Collection - JavaScript
DESCRIPTION: API for capturing stack traces in custom error objects

LANGUAGE: javascript
CODE:
Error.captureStackTrace(error, constructorOpt)

----------------------------------------

TITLE: Installing Linux Build Dependencies
DESCRIPTION: Executes the build dependency installation script specifically for Linux systems.

LANGUAGE: bash
CODE:
./build/install-build-deps.sh

----------------------------------------

TITLE: JavaScript Object Destructuring Example
DESCRIPTION: Demonstrates object destructuring syntax and its desugared equivalent form, highlighting the performance improvements made in V8 v7.8.

LANGUAGE: javascript
CODE:
const {x, y} = object;

LANGUAGE: javascript
CODE:
const x = object.x;
const y = object.y;

----------------------------------------

TITLE: Accessing Symbol Description Using toString()
DESCRIPTION: Shows the legacy way of accessing a Symbol's description by using toString() method and string manipulation

LANGUAGE: javascript
CODE:
const symbol = Symbol('foo');
symbol.toString();
// → 'Symbol(foo)'
symbol.toString().slice(7, -1); // 🤔
// → 'foo'

----------------------------------------

TITLE: Implementing Math.is42 Builtin in Torque
DESCRIPTION: Defines a JavaScript-accessible builtin that checks if a value equals 42. Handles both Smi and HeapNumber cases using Torque's type system.

LANGUAGE: torque
CODE:
namespace math {
  javascript builtin MathIs42(
      context: Context, receiver: Object, x: Object): Boolean {
    const number: Number = ToNumber_Inline(x);
    typeswitch (number) {
      case (smi: Smi): {
        return smi == 42 ? True : False;
      }
      case (heapNumber: HeapNumber): {
        return Convert<float64>(heapNumber) == 42 ? True : False;
      }
    }
  }
}

----------------------------------------

TITLE: Adding I32Add1 opcode name to wasm-opcodes.cc
DESCRIPTION: Adds a name for the new I32Add1 opcode in wasm-opcodes.cc

LANGUAGE: diff
CODE:
diff --git a/src/wasm/wasm-opcodes.cc b/src/wasm/wasm-opcodes.cc
index 5ed664441d..2d4e9554fe 100644
--- a/src/wasm/wasm-opcodes.cc
+++ b/src/wasm/wasm-opcodes.cc
@@ -75,6 +75,7 @@ const char* WasmOpcodes::OpcodeName(WasmOpcode opcode) {
     // clang-format off

     // Standard opcodes
+    CASE_I32_OP(Add1, "add1")
     CASE_INT_OP(Eqz, "eqz")
     CASE_ALL_OP(Eq, "eq")
     CASE_I64x2_OP(Eq, "eq")

----------------------------------------

TITLE: Running SunSpider Baseline Benchmark
DESCRIPTION: Example command showing how to create baseline measurements for the SunSpider benchmark suite

LANGUAGE: bash
CODE:
$ test/benchmarks/csuite/csuite.py sunspider baseline out.gn/master/d8
Wrote ./_results/master.
Run sunspider again with compare mode to see results.

----------------------------------------

TITLE: Formatting BigInt with Locale Support
DESCRIPTION: Demonstrates new locale-aware formatting capabilities for BigInt values using both toLocaleString method and Intl.NumberFormat API.

LANGUAGE: javascript
CODE:
12345678901234567890n.toLocaleString('en'); // 🐌
// → '12,345,678,901,234,567,890'
12345678901234567890n.toLocaleString('de'); // 🐌
// → '12.345.678.901.234.567.890'

LANGUAGE: javascript
CODE:
const nf = new Intl.NumberFormat('fr');
nf.format(12345678901234567890n); // 🚀
// → '12 345 678 901 234 567 890'
nf.formatToParts(123456n); // 🚀
// → [
// →   { type: 'integer', value: '123' },
// →   { type: 'group', value: ' ' },
// →   { type: 'integer', value: '456' }
// → ]

----------------------------------------

TITLE: Compiling V8 Source Code
DESCRIPTION: Commands for compiling V8 source code using gm.py script. Includes options for both regular compilation and compilation with immediate testing.

LANGUAGE: bash
CODE:
tools/dev/gm.py x64.release

LANGUAGE: bash
CODE:
tools/dev/gm.py x64.release.check

----------------------------------------

TITLE: Compiling with Non-trapping Float-to-Int Conversions in C++
DESCRIPTION: Compiler flag to enable non-trapping float-to-int conversions, which can improve performance for certain code patterns.

LANGUAGE: cpp
CODE:
-mnontrapping-fptoint

----------------------------------------

TITLE: Fetching V8 Source Code
DESCRIPTION: Commands to create directory, fetch V8 source code and navigate to the correct directory. Includes all branches and dependencies.

LANGUAGE: bash
CODE:
mkdir ~/v8
cd ~/v8
fetch v8
cd v8

----------------------------------------

TITLE: CSuite Benchmark Runner Command Structure
DESCRIPTION: Basic command structure for running benchmarks using CSuite, showing required arguments for benchmark type, mode, binary path, and optional flags

LANGUAGE: bash
CODE:
test/benchmarks/csuite/csuite.py
    (sunspider | kraken | octane)
    (baseline | compare)
    <path to d8 binary>
    [-x "<optional extra d8 command-line flags>"]

----------------------------------------

TITLE: String.prototype.matchAll Implementation Example
DESCRIPTION: Shows how to use the new String.prototype.matchAll API for iterating through regex matches with capture groups.

LANGUAGE: javascript
CODE:
const string = 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev';
const regex = /\b(?<owner>[a-z0-9]+)\/(?<repo>[a-z0-9\.]+)\b/g;

for (const match of string.matchAll(regex)) {
  console.log(`${match[0]} at ${match.index} with '${match.input}'`);
  console.log(`→ owner: ${match.groups.owner}`);
  console.log(`→ repo: ${match.groups.repo}`);
}

----------------------------------------

TITLE: Using Symbol.prototype.description Getter
DESCRIPTION: Demonstrates the new ergonomic way to access a Symbol's description using the description getter property

LANGUAGE: javascript
CODE:
const symbol = Symbol('foo');
symbol.description;
// → 'foo'

----------------------------------------

TITLE: Running V8 Tests with gm in Bash
DESCRIPTION: This snippet demonstrates how to run V8 tests using the 'gm' command for different build targets and test suites. It includes examples for running all tests and specific test cases.

LANGUAGE: bash
CODE:
gm x64.release.check
gm x64.optdebug.check  # recommended: reasonably fast, with DCHECKs.
gm ia32.check
gm release.check
gm check  # builds and tests all default platforms

LANGUAGE: bash
CODE:
gm x64.release test262
gm x64.debug mjsunit/regress/regress-123

----------------------------------------

TITLE: Demonstrating Intl.Locale Extensions in JavaScript
DESCRIPTION: This snippet showcases the new properties added to the Intl.Locale object in V8 v9.9, including calendars, collations, hourCycles, numberingSystems, timeZones, textInfo, and weekInfo.

LANGUAGE: javascript
CODE:
const arabicEgyptLocale = new Intl.Locale('ar-EG')
// ar-EG
arabicEgyptLocale.calendars
// ['gregory', 'coptic', 'islamic', 'islamic-civil', 'islamic-tbla']
arabicEgyptLocale.collations
// ['compat', 'emoji', 'eor']
arabicEgyptLocale.hourCycles
// ['h12']
arabicEgyptLocale.numberingSystems
// ['arab']
arabicEgyptLocale.timeZones
// ['Africa/Cairo']

arabicEgyptLocale.textInfo
// { direction: 'rtl' }
japaneseLocale.textInfo
// { direction: 'ltr' }
chineseTaiwanLocale.textInfo
// { direction: 'ltr' }

arabicEgyptLocale.weekInfo
// {firstDay: 6, weekend: [5, 6], minimalDays: 1}

----------------------------------------

TITLE: Installing Sourcery G++ Lite on Host and Target
DESCRIPTION: Bash script to download and install Sourcery G++ Lite cross-compiler suite for ARM/Android development.

LANGUAGE: bash
CODE:
#!/bin/sh

sudo mkdir /opt/codesourcery
cd /opt/codesourcery
sudo chown "$USERNAME" .
chmod g+ws .
umask 2
wget http://www.codesourcery.com/sgpp/lite/arm/portal/package4571/public/arm-none-linux-gnueabi/arm-2009q1-203-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2
tar -xvf arm-2009q1-203-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2

----------------------------------------

TITLE: Demonstrating Use-After-Free in C++
DESCRIPTION: This snippet shows a simple example of a use-after-free vulnerability in C++, where a deleted object is accessed after being freed.

LANGUAGE: cpp
CODE:
auto* foo = new Foo();
delete foo;
// The memory location pointed to by foo is not representing
// a Foo object anymore, as the object has been deleted (freed).
foo->Process();

----------------------------------------

TITLE: Array Destructuring (ES2015+)
DESCRIPTION: Example of using array destructuring to extract the first element of an array. This demonstrates a concise ES2015+ syntax that V8 has optimized.

LANGUAGE: javascript
CODE:
function fn() {
  var [c] = data;
  return c;
}

----------------------------------------

TITLE: Implementing Intl.DisplayNames v2 Calendar and DateTime Fields in JavaScript
DESCRIPTION: Demonstrates the new calendar and dateTimeField type support in Intl.DisplayNames API for internationalized display names

LANGUAGE: javascript
CODE:
const esCalendarNames = new Intl.DisplayNames(['es'], { type: 'calendar' });
const frDateTimeFieldNames = new Intl.DisplayNames(['fr'], { type: 'dateTimeField' });
esCalendarNames.of('roc');  // "calendario de la República de China"
frDateTimeFieldNames.of('month'); // "mois"

----------------------------------------

TITLE: Module Namespace Exports - JavaScript
DESCRIPTION: Demonstration of the new module namespace export syntax

LANGUAGE: javascript
CODE:
export * as utils from './utils.mjs';

// Equivalent to:
import * as utils from './utils.mjs';
export { utils };

----------------------------------------

TITLE: Symbol.prototype.description with Undefined Description
DESCRIPTION: Shows how the description getter returns undefined for Symbols created without a description

LANGUAGE: javascript
CODE:
const symbol = Symbol();
symbol.description;
// → undefined

----------------------------------------

TITLE: Running V8 Profiler with d8 Shell (Windows)
DESCRIPTION: Command to run the V8 profiler using the d8 shell on Windows. It generates a v8.log file containing profiling data.

LANGUAGE: bash
CODE:
build\Release\d8 --prof script.js

----------------------------------------

TITLE: Array Access (ES5)
DESCRIPTION: Equivalent ES5 code for accessing the first element of an array. This represents the baseline performance that V8 aims to match with ES2015+ features.

LANGUAGE: javascript
CODE:
function fn() {
  var c = data[0];
  return c;
}

----------------------------------------

TITLE: Enabling Unsafe Fast JS Calls in V8
DESCRIPTION: Command line flag to enable the experimental unsafe fast JS calls feature in V8.

LANGUAGE: bash
CODE:
--turbo-fast-api-calls

----------------------------------------

TITLE: Enabling WebAssembly threads in Chrome
DESCRIPTION: Shows how to enable WebAssembly threads feature in Chrome using the chrome://flags interface.

LANGUAGE: plaintext
CODE:
chrome://flags/#enable-webassembly-threads

----------------------------------------

TITLE: Configuring Multiple Target OSes in .gclient
DESCRIPTION: Example of configuring .gclient for building on both Android and Unix platforms.

LANGUAGE: python
CODE:
target_os = ['android', 'unix']  # Multiple target OSes.

----------------------------------------

TITLE: Syncing ICU Dependencies in V8
DESCRIPTION: Command to check out a suitable version of ICU into the third_party/icu directory using gclient

LANGUAGE: bash
CODE:
gclient sync

----------------------------------------

TITLE: Basic D8 Profiling Example
DESCRIPTION: Basic example of using linux-perf-d8.py to profile JavaScript code execution in d8.

LANGUAGE: bash
CODE:
tools/profiling/linux-perf-d8.py out/x64.release/d8 path/to/test.js;

----------------------------------------

TITLE: Implementing Promise.any with Error Handling in JavaScript
DESCRIPTION: Demonstrates the usage of Promise.any combinator that resolves when any of the input promises fulfills, with AggregateError handling for rejection cases.

LANGUAGE: javascript
CODE:
const promises = [
  fetch('/endpoint-a').then(() => 'a'),
  fetch('/endpoint-b').then(() => 'b'),
  fetch('/endpoint-c').then(() => 'c'),
];
try {
  const first = await Promise.any(promises);
  // Any of the promises was fulfilled.
  console.log(first);
  // → e.g. 'b'
} catch (error) {
  // All of the promises were rejected.
  console.assert(error instanceof AggregateError);
  // Log the rejection values:
  console.log(error.errors);
}

----------------------------------------

TITLE: Implementing Promise.any with Error Handling in JavaScript
DESCRIPTION: Demonstrates the usage of Promise.any combinator that resolves when any of the input promises fulfills, with AggregateError handling for rejection cases.

LANGUAGE: javascript
CODE:
const promises = [
  fetch('/endpoint-a').then(() => 'a'),
  fetch('/endpoint-b').then(() => 'b'),
  fetch('/endpoint-c').then(() => 'c'),
];
try {
  const first = await Promise.any(promises);
  // Any of the promises was fulfilled.
  console.log(first);
  // → e.g. 'b'
} catch (error) {
  // All of the promises were rejected.
  console.assert(error instanceof AggregateError);
  // Log the rejection values:
  console.log(error.errors);
}

----------------------------------------

TITLE: JavaScript Object.assign Implementation
DESCRIPTION: Reference to Object.assign optimization using CodeStubAssembler technology, improving performance for operations like those in React-Redux applications.

LANGUAGE: javascript
CODE:
Object.assign(target, source)

----------------------------------------

TITLE: JavaScript RegExp Lookahead Examples
DESCRIPTION: Demonstrates the usage of lookahead assertions in regular expressions to match digits followed or not followed by a percent sign.

LANGUAGE: javascript
CODE:
/\d+(?=%)/.exec('100% of US presidents have been male'); // ['100']
/\d+(?!%)/.exec('that's all 44 of them');                // ['44']

----------------------------------------

TITLE: Building V8 with Profiling Enable
DESCRIPTION: Commands to build V8 with profiling support enabled using GN build system.

LANGUAGE: bash
CODE:
echo 'enable_profiling = true' >> out/x64.release/args.gn
autoninja -C out/x64.release

----------------------------------------

TITLE: JSON.stringify Surrogate Handling - JavaScript
DESCRIPTION: Example showing the improved JSON.stringify behavior for handling lone surrogates

LANGUAGE: javascript
CODE:
// Old behavior:
JSON.stringify('\uD800');
// → '"�"'

// New behavior:
JSON.stringify('\uD800');
// → '"\\ud800"'

----------------------------------------

TITLE: Building V8 release version for x64 architecture using gm
DESCRIPTION: This command uses the 'gm' script to build a release version of V8 for the x64 architecture.

LANGUAGE: bash
CODE:
gm x64.release

----------------------------------------

TITLE: Preprocessing V8 Profiler Log for Web UI
DESCRIPTION: Command to preprocess the V8 profiler log file for use with the web UI, resolving C++ symbols and generating a JSON file.

LANGUAGE: bash
CODE:
$V8_PATH/tools/linux-tick-processor --preprocess > v8.json

----------------------------------------

TITLE: Creating New Branch
DESCRIPTION: Recommended command for creating new local branches

LANGUAGE: bash
CODE:
git new-branch fix-bug-1234

----------------------------------------

TITLE: Checking out V8 version 5.9 using Git
DESCRIPTION: This Git command allows developers with an active V8 checkout to experiment with the new features in V8 5.9 by creating a new branch tracking the 5.9 release.

LANGUAGE: shell
CODE:
git checkout -b 5.9 -t branch-heads/5.9

----------------------------------------

TITLE: Customizing Object.prototype.toString Output in JavaScript (ES2015)
DESCRIPTION: This snippet shows how to use Symbol.toStringTag to customize the output of Object.prototype.toString for user-defined types in JavaScript.

LANGUAGE: javascript
CODE:
class Custom {
  get [Symbol.toStringTag]() {
    return 'Custom';
  }
}
Object.prototype.toString.call(new Custom);
// → '[object Custom]'
String(new Custom);
// → '[object Custom]'

----------------------------------------

TITLE: Implementing Private Methods and Accessors in JavaScript Classes
DESCRIPTION: This code snippet shows the syntax for implementing private methods and accessors in JavaScript classes, which are only accessible within the class itself.

LANGUAGE: javascript
CODE:
class Component {
  #privateMethod() {
    console.log("I'm only callable inside Component!");
  }
  get #privateAccessor() { return 42; }
  set #privateAccessor(x) { }
}

----------------------------------------

TITLE: Member Access Optimization Example
DESCRIPTION: Example showing how compiler optimization fails to optimize base pointer loads efficiently.

LANGUAGE: cpp
CODE:
void foo(GCed*);
void bar(GCed*);

void baz(Member<GCed> m) {
  foo(m.get());
  bar(m.get());
}

LANGUAGE: asm
CODE:
baz(Member<GCed>):
  movsxd rbx, edi
  add rbx, rbx
  mov rdi, qword ptr [rip + base]
  and rdi, rbx
  call foo(GCed*)
  and rbx, qword ptr [rip + base] # extra load
  mov rdi, rbx
  jmp bar(GCed*)

----------------------------------------

TITLE: Checking out V8 version 5.8 using Git
DESCRIPTION: Command to checkout V8 version 5.8 branch for developers with an active V8 checkout. This allows experimentation with new features in V8 5.8.

LANGUAGE: bash
CODE:
git checkout -b 5.8 -t branch-heads/5.8

----------------------------------------

TITLE: Implementing Symbol.toPrimitive in JavaScript
DESCRIPTION: Shows how to implement the @@toPrimitive symbol to customize object-to-primitive value conversions. The example demonstrates different conversion behaviors based on the hint parameter (string, number, or default).

LANGUAGE: javascript
CODE:
(function(){
  'use strict';
  class V8 {
    [Symbol.toPrimitive](hint) {
      if (hint === 'string') {
        console.log('string');
        return 'V8';
      } else if (hint === 'number') {
        console.log('number');
        return 8;
      } else {
        console.log('default:' + hint);
        return 8;
      }
    }
  }

  const engine = new V8();
  console.log(Number(engine));
  console.log(String(engine));
}());

----------------------------------------

TITLE: Configuring GN Build for iOS
DESCRIPTION: Set up GN build files with specific configuration for iOS. This includes setting the deployment target, architecture, and various V8-specific options for optimized iOS builds.

LANGUAGE: python
CODE:
ios_deployment_target = 10
is_component_build = false
is_debug = false
target_cpu = "arm64"                  # "x64" for a simulator build.
target_os = "ios"
use_custom_libcxx = false             # Use Xcode's libcxx.
v8_enable_i18n_support = false        # Produces a smaller binary.
v8_monolithic = true                  # Enable the v8_monolith target.
v8_use_external_startup_data = false  # The snaphot is included in the binary.
v8_enable_pointer_compression = false # Unsupported on iOS.

----------------------------------------

TITLE: Git Config for Branch Heads Access
DESCRIPTION: Git configuration line to add branch-heads access when not using depot_tools.

LANGUAGE: plaintext
CODE:
fetch = +refs/branch-heads/*:refs/remotes/branch-heads/*

----------------------------------------

TITLE: Detecting JSPI API Version in JavaScript
DESCRIPTION: These functions check which version of the JSPI API is enabled in the browser by testing for the presence of specific WebAssembly properties.

LANGUAGE: javascript
CODE:
function oldAPI(){
  return WebAssembly.Suspender!=undefined
}

function newAPI(){
  return WebAssembly.Suspending!=undefined
}

----------------------------------------

TITLE: Checking Out V8 v5.3 Branch (Git)
DESCRIPTION: Git command to check out the V8 version 5.3 branch for developers with an active V8 checkout. This allows experimentation with new features in V8 5.3.

LANGUAGE: bash
CODE:
git checkout -b 5.3 -t branch-heads/5.3

----------------------------------------

TITLE: Defining ObjectLiteral Grammar with CoverInitializedName
DESCRIPTION: This grammar snippet shows how ObjectLiteral is used as a cover grammar for ObjectAssignmentPattern, allowing for constructs that can't occur in actual object literals.

LANGUAGE: grammar
CODE:
ObjectLiteral :
  ...
  { PropertyDefinitionList }

PropertyDefinition :
  ...
  CoverInitializedName

CoverInitializedName :
  IdentifierReference Initializer

Initializer :
  = AssignmentExpression

----------------------------------------

TITLE: JavaScript Vector Addition Using WebAssembly Function
DESCRIPTION: Demonstrates calling a WebAssembly function from JavaScript to perform vector addition. Includes performance measurement code and shows the usage of typed arrays for numerical computations.

LANGUAGE: javascript
CODE:
const addNumbers = instance.exports.addNumbers;

function vectorSum(len, v1, v2) {
  const result = new Float64Array(len);
  for (let i = 0; i < len; i++) {
    result[i] = addNumbers(v1[i], v2[i]);
  }
  return result;
}

const N = 100_000_000;
const v1 = new Float64Array(N);
const v2 = new Float64Array(N);
for (let i = 0; i < N; i++) {
  v1[i] = Math.random();
  v2[i] = Math.random();
}

// Warm up.
for (let i = 0; i < 5; i++) {
  vectorSum(N, v1, v2);
}

// Measure.
console.time();
const result = vectorSum(N, v1, v2);
console.timeEnd();

----------------------------------------

TITLE: Implementing Inspector Message Sending in C++
DESCRIPTION: Shows how to send inspector messages from the embedder to V8 using the SendInspectorMessage callback function. This implementation is part of d8's InspectorClient.

LANGUAGE: cpp
CODE:
static void SendInspectorMessage(
    const v8::FunctionCallbackInfo<v8::Value>& args) {
  // [...] Create a StringView that Inspector can understand.
  session->dispatchProtocolMessage(message_view);
}

----------------------------------------

TITLE: Optimized Point Class Definition in JavaScript
DESCRIPTION: This snippet shows an optimized version of the Point class where the isNegative property is always initialized in the constructor, addressing the performance regression identified using Indicium.

LANGUAGE: javascript
CODE:
class Point {
  constructor(x, y) {
    this.isNegative = x < 0 || y < 0;
    this.x = x;
    this.y = y;
  }

  dotProduct(other) {
    return this.x * other.x + this.y * other.y;
  }
}

----------------------------------------

TITLE: Referencing Original Hash Seed Mitigation Commit Message
DESCRIPTION: This snippet shows part of the commit message for the initial hash seed mitigation, highlighting the limitation of the solution for precompiled V8 snapshots.

LANGUAGE: text
CODE:
This version only solves the issue for those that compile V8 themselves or those that do not use snapshots. A snapshot-based precompiled V8 will still have predictable string hash codes.

----------------------------------------

TITLE: Branch Reference Format for Beta/Stable Releases
DESCRIPTION: Example of the branch naming convention used for Beta and Stable releases in V8's repository

LANGUAGE: plaintext
CODE:
refs/branch-heads/12.1

----------------------------------------

TITLE: Configuring V8 for Liftoff-only WebAssembly Compilation
DESCRIPTION: Command-line flags to configure V8 to use only the Liftoff compiler for WebAssembly, disabling tiering up to TurboFan.

LANGUAGE: shell
CODE:
--liftoff --no-wasm-tier-up

----------------------------------------

TITLE: Modified Array Iterator Prototype Example
DESCRIPTION: Shows how to modify the array iterator prototype to affect iteration behavior globally.

LANGUAGE: javascript
CODE:
Object.getPrototypeOf([][Symbol.iterator]()).next = function() {
  return { done: true };
}
const arr = [1, 2, 3];
const result = [...arr];
// → []

----------------------------------------

TITLE: Illustrating Automatic Semicolon Insertion (ASI) in JavaScript
DESCRIPTION: This code demonstrates how ASI can interfere with the interpretation of 'await' in async functions, potentially leading to unexpected behavior.

LANGUAGE: javascript
CODE:
async function too_few_semicolons() {
  let
  await 0;
}

----------------------------------------

TITLE: Setting Up V8 Remote for Testing
DESCRIPTION: Commands to add your main V8 checkout as a remote repository and checkout your branch for testing changes.

LANGUAGE: bash
CODE:
cd v8
git remote add v8 <your-v8-dir>/.git
git fetch v8
git checkout v8/<your-branch>
cd ..

----------------------------------------

TITLE: Installing cquery for V8 Development
DESCRIPTION: Commands to clone, build and install cquery from source. Includes initialization of submodules and cmake configuration.

LANGUAGE: bash
CODE:
git clone https://github.com/cquery-project/cquery "$CQUERY_DIR"
cd "$CQUERY_DIR"
git submodule update --init
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
make install -j8

----------------------------------------

TITLE: Iterator Implementation Example
DESCRIPTION: Shows how V8 previously implemented spread operations using iterators internally.

LANGUAGE: javascript
CODE:
function(arr) {
  const result = [];
  const iterator = arr[Symbol.iterator]();
  const next = iterator.next;
  for ( ; ; ) {
    const iteratorResult = next.call(iterator);
    if (iteratorResult.done) break;
    result.push(iteratorResult.value);
  }
  return result;
}

----------------------------------------

TITLE: Manual Array Clone Implementation
DESCRIPTION: Shows a traditional ES5-style array cloning function using a for loop with pre-allocation.

LANGUAGE: javascript
CODE:
function clone(arr) {
  // Pre-allocate the correct number of elements, to avoid
  // having to grow the array.
  const result = new Array(arr.length);
  for (let i = 0; i < arr.length; i++) {
    result[i] = arr[i];
  }
  return result;
}

----------------------------------------

TITLE: Creating Global Variable in Iframe Content
DESCRIPTION: This code snippet shows the content of the iframe (iframe.html) that creates a global variable. This variable will be kept alive due to the memory leak in the main window.

LANGUAGE: javascript
CODE:
// iframe.html:
class Leak {};
window.globalVariable = new Leak();

----------------------------------------

TITLE: Exploiting the JSArray::fizzbuzz() Vulnerability in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to exploit the vulnerability in the JSArray::fizzbuzz() implementation. It creates an array with a malicious object that, when converted to a number, shrinks the array and causes an out-of-bounds write.

LANGUAGE: javascript
CODE:
let array = new Array(100);
let evil = { [Symbol.toPrimitive]() { array.length = 1; return 15; } };
array.push(evil);
// At index 100, the @@toPrimitive callback of |evil| is invoked in
// line 3 above, shrinking the array to length 1 and reallocating its
// backing buffer. The subsequent write (line 5) goes out-of-bounds.
array.fizzbuzz();

----------------------------------------

TITLE: Creating 404 Page Content in Markdown
DESCRIPTION: Defines the content of the 404 error page using Markdown. It includes a header and a brief message informing the user that the requested page could not be found.

LANGUAGE: markdown
CODE:
# 404: document not found

Sorry, we couldn't find that page.

----------------------------------------

TITLE: Object Body Initialization with Slack Tracking
DESCRIPTION: C++ code showing how V8 initializes object bodies during slack tracking, including filler map usage for unused properties.

LANGUAGE: cpp
CODE:
void Factory::InitializeJSObjectBody(Handle<JSObject> obj, Handle<Map> map,
                                     int start_offset) {

  // <lines removed>

  bool in_progress = map->IsInobjectSlackTrackingInProgress();
  Object filler;
  if (in_progress) {
    filler = *one_pointer_filler_map();
  } else {
    filler = *undefined_value();
  }
  obj->InitializeBody(*map, start_offset, *undefined_value(), filler);
  if (in_progress) {
    map->FindRootMap(isolate()).InobjectSlackTrackingStep(isolate());
  }

  // <lines removed>
}

----------------------------------------

TITLE: Set Spread Operation Example
DESCRIPTION: Demonstrates spreading a Set object into an array while maintaining insertion order.

LANGUAGE: javascript
CODE:
const s = new Set();
s.add('V8');
s.add('TurboFan');
const result = [...s];
// → ['V8', 'TurboFan']

----------------------------------------

TITLE: Installing and Running V8.dev Website
DESCRIPTION: Commands for setting up a local development environment for the V8 website. Includes steps for cloning, installing Node.js dependencies, and running various build commands.

LANGUAGE: bash
CODE:
nvm use

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npm run watch

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: 64-bit Arm Debug Features Example
DESCRIPTION: Example using Arm64 Debug instruction with tracing capabilities.

LANGUAGE: cpp
CODE:
// Start tracing and log disassembly and register values.
__ Debug("start tracing", 42, TRACE_ENABLE | LOG_ALL);

int64_t bad_frame_pointer = -1L;  // Bad frame pointer, should fail if it is used.
__ Mov(x13, bad_frame_pointer);
__ Mov(x12, StackFrame::TypeToMarker(type));
__ Mov(x11, ExternalReference::Create(IsolateAddressId::kCEntryFPAddress,
                                      masm->isolate()));
__ Ldr(x10, MemOperand(x11));

__ Push(x13, x12, xzr, x10);

// Stop tracing.
__ Debug("stop tracing", 42, TRACE_DISABLE);

----------------------------------------

TITLE: StringsStorage GetEntry Implementation
DESCRIPTION: The core function responsible for managing string storage in V8's heap snapshot generation, showing how hash values are used for lookup and insertion.

LANGUAGE: cpp
CODE:
base::HashMap::Entry* StringsStorage::GetEntry(const char* str, int len) {
  uint32_t hash = ComputeStringHash(str, len);
  return names_.LookupOrInsert(const_cast<char*>(str), hash);
}

----------------------------------------

TITLE: Problematic Code After Sandbox Introduction in C++
DESCRIPTION: This code snippet demonstrates a potential issue that arises after introducing the V8 Sandbox. It assumes that the number of in-object properties is less than the total number of properties, which may not hold true if an attacker corrupts these values, leading to out-of-bounds access.

LANGUAGE: cpp
CODE:
std::vector<std::string> JSObject::GetPropertyNames() {
    int num_properties = TotalNumberOfProperties();
    std::vector<std::string> properties(num_properties);

    for (int i = 0; i < NumberOfInObjectProperties(); i++) {
        properties[i] = GetNameOfInObjectProperty(i);
    }

    // Deal with the other types of properties
    // ...

----------------------------------------

TITLE: Transpiled Async Generator (ES5)
DESCRIPTION: Babel-transpiled ES5 version of the async generator function, showing the significant code size increase and complexity introduced by transpilation.

LANGUAGE: javascript
CODE:
"use strict";

var _asyncGenerator = function() {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function(resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };
        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;
        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function(arg) {
            resume('next', arg);
          }, function(arg) {
            resume('throw', arg);
          });
        } else {
          settle(result.done ? 'return' : 'normal', result.value);
        }
      } catch (err) {
        settle('throw', err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case 'return':
          front.resolve({
            value: value,
            done: true
          });
          break;
        case 'throw':
          front.reject(value);
          break;
        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }
      front = front.next;
      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }
    this._invoke = send;
    if (typeof gen.return !== 'function') {
      this.return = undefined;
    }
  }
  if (typeof Symbol === 'function' && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
      return this;
    };
  }
  AsyncGenerator.prototype.next = function(arg) {
    return this._invoke('next', arg);
  };
  AsyncGenerator.prototype.throw = function(arg) {
    return this._invoke('throw', arg);
  };
  AsyncGenerator.prototype.return = function(arg) {
    return this._invoke('return', arg);
  };
  return {
    wrap: function wrap(fn) {
      return function() {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function await (value) {
      return new AwaitValue(value);
    }
  };
}();

var readLines = function () {
  var _ref = _asyncGenerator.wrap(regeneratorRuntime.mark(function _callee(path) {
    var file;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _asyncGenerator.await(fileOpen(path));

          case 2:
            file = _context.sent;
            _context.prev = 3;

          case 4:
            if (file.EOF) {
              _context.next = 11;
              break;
            }

            _context.next = 7;
            return _asyncGenerator.await(file.readLine());

          case 7:
            _context.next = 9;
            return _context.sent;

          case 9:
            _context.next = 4;
            break;

          case 11:
            _context.prev = 11;
            _context.next = 14;
            return _asyncGenerator.await(file.close());

          case 14:
            return _context.finish(11);

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[3,, 11, 15]]);
  }));

  return function readLines(_x) {
    return _ref.apply(this, arguments);
  };
}();

----------------------------------------

TITLE: Demonstrating RegExp Performance Impact of Property Modifications
DESCRIPTION: Shows how adding properties to RegExp instances or prototypes forces execution to take the slow path, degrading performance. Fast path execution requires unmodified RegExp instances and prototypes.

LANGUAGE: javascript
CODE:
const re = /./g;
re.exec('');  // Fast path.
re.new_property = 'slow';
RegExp.prototype.new_property = 'also slow';
re.exec('');  // Slow path.

----------------------------------------

TITLE: BigInt Internal Memory Structure
DESCRIPTION: Pseudo-code representation showing how BigInts are stored in memory using a sign bit and multiple digits for arbitrary precision.

LANGUAGE: javascript
CODE:
{
  type: 'BigInt',
  sign: 0,
  num_digits: 3,
  digits: [0x12…, 0x34…, 0x56…],
}

----------------------------------------

TITLE: Accessing Command-line Arguments in d8 JavaScript
DESCRIPTION: Shows how to pass command-line arguments to JavaScript code in d8 and access them using the arguments object.

LANGUAGE: bash
CODE:
out.gn/x64.optdebug/d8 -- hi

LANGUAGE: javascript
CODE:
d8> arguments[0]
"hi"

----------------------------------------

TITLE: Creating Try Jobs
DESCRIPTION: Commands for creating and managing try jobs for testing changes

LANGUAGE: bash
CODE:
git cl try
git cl try --revision=1234
git cl try --bot=v8_mac_rel
git cl try-results

----------------------------------------

TITLE: React FiberNode Class with Timestamp Initialization
DESCRIPTION: This code shows the React FiberNode class constructor, initializing a timestamp field and preventing extensions.

LANGUAGE: javascript
CODE:
class FiberNode {
  constructor() {
    this.actualStartTime = 0;
    Object.preventExtensions(this);
  }
}

const node1 = new FiberNode();
const node2 = new FiberNode();

----------------------------------------

TITLE: Updating Inspector Test Expectations in Bash
DESCRIPTION: This snippet shows how to regenerate the expectations file for inspector tests using the 'run-tests.py' script.

LANGUAGE: bash
CODE:
tools/run-tests.py --regenerate-expected-files --outdir=ia32.release inspector/debugger/set-instrumentation-breakpoint

----------------------------------------

TITLE: Generating V8 build files using gn
DESCRIPTION: This command uses 'gn' to generate build files for V8, opening an editor for specifying build arguments.

LANGUAGE: bash
CODE:
gn args out/foo

----------------------------------------

TITLE: Sample Hello World Implementation in C++
DESCRIPTION: Reference to a hello world program demonstrating basic usage of Oilpan's standalone version for managed C++ objects. The program shows how to use Oilpan without dealing with V8 as a whole.

LANGUAGE: text
CODE:
Reference to sample at: samples/cppgc/hello-world.cc

----------------------------------------

TITLE: Implementing Write Barrier for Concurrent Marking in C++
DESCRIPTION: This code snippet shows the modified write barrier implementation for concurrent marking, using atomic operations and removing the source object color check.

LANGUAGE: cpp
CODE:
// Called after atomic_relaxed_write(&object.field, value);
write_barrier(object, field_offset, value) {
  if (color(value) == white && atomic_color_transition(value, white, grey)) {
    marking_worklist.push(value);
  }
}

----------------------------------------

TITLE: Interactive Input in d8 JavaScript Shell
DESCRIPTION: Demonstrates the use of readline() function in d8 for interactive text input.

LANGUAGE: javascript
CODE:
d8> const greeting = readline();
Welcome
d8> greeting
"Welcome"

----------------------------------------

TITLE: Non-backtracking RegExp Algorithm Implementation
DESCRIPTION: JavaScript implementation of the non-backtracking algorithm that uses breadth-first traversal of the automaton.

LANGUAGE: javascript
CODE:
let ip = 0;
let pcs = followEpsilons([0]);

while (true) {
  if (pcs === 'ACCEPT') return true;
  if (ip >= input.length) return false;

  pcs = pcs.filter(pc => code[pc].char === input[ip]);
  pcs = pcs.map(pc => pc + 1);
  pcs = followEpsilons(pcs);

  ++ip;
}

----------------------------------------

TITLE: Updating Bytecode Expectations in Bash
DESCRIPTION: This snippet demonstrates how to update bytecode expectations by building and running the 'generate-bytecode-expectations' tool.

LANGUAGE: bash
CODE:
gm x64.release generate-bytecode-expectations

LANGUAGE: bash
CODE:
out/x64.release/generate-bytecode-expectations --rebaseline

----------------------------------------

TITLE: Defining JSArrayBuffer Class with Sandbox-Compatible Types in C++
DESCRIPTION: This code snippet demonstrates how the JSArrayBuffer class is modified to use sandbox-compatible types. It replaces raw pointers and sizes with sandbox_ptr_t and sandbox_size_t, which prevent arbitrary memory access outside the sandbox.

LANGUAGE: cpp
CODE:
class JSArrayBuffer: public JSObject {
  private:
    sandbox_ptr_t buffer_;
    sandbox_size_t size_;
};

----------------------------------------

TITLE: Backtracking RegExp Algorithm Implementation
DESCRIPTION: JavaScript implementation of the backtracking algorithm used by Irregexp engine, showing how it processes bytecode instructions.

LANGUAGE: javascript
CODE:
let ip = 0; // Input position.
let pc = 0; // Program counter: index of the next instruction.
const stack = []; // Backtrack stack.
while (true) {
  const inst = code[pc];
  switch (inst.opcode) {
    case 'CONSUME':
      if (ip < input.length && input[ip] === inst.char) {
        // Input matches what we expect: Continue.
        ++ip;
        ++pc;
      } else if (stack.length > 0) {
        // Wrong input character, but we can backtrack.
        const back = stack.pop();
        ip = back.ip;
        pc = back.pc;
      } else {
        // Wrong character, cannot backtrack.
        return false;
      }
      break;
    case 'FORK':
      // Save alternative for backtracking later.
      stack.push({ip: ip, pc: inst.forkPc});
      ++pc;
      break;
    case 'JMP':
      pc = inst.jmpPc;
      break;
    case 'ACCEPT':
      return true;
  }
}

----------------------------------------

TITLE: Optimized JavaScript Code After Escape Analysis
DESCRIPTION: The same function after V8's escape analysis optimization, where the object allocation has been eliminated and replaced with direct value access.

LANGUAGE: javascript
CODE:
function foo(a, b) {
  const object_a = a;
  const object_b = b;
  return object_a + object_b;
}

----------------------------------------

TITLE: Configuring .gclient for iOS Target
DESCRIPTION: Update the .gclient configuration file to include iOS as a target operating system. This enables fetching additional tools needed for iOS cross-compilation.

LANGUAGE: python
CODE:
# [... other contents of .gclient such as the 'solutions' variable ...]
target_os = ['ios']

----------------------------------------

TITLE: Processing V8 Profiler Log (Windows)
DESCRIPTION: Command to process the V8 profiler log file on Windows using the tick processor script.

LANGUAGE: bash
CODE:
tools\windows-tick-processor.bat v8.log

----------------------------------------

TITLE: Implementing Fibonacci with JSPI Promise Integration
DESCRIPTION: Example showing how to implement a Fibonacci calculation using JSPI to handle Promise-based addition operations between WebAssembly and JavaScript.

LANGUAGE: C
CODE:
long promiseFib(long x) {
 if (x == 0)
   return 0;
 if (x == 1)
   return 1;
 return promiseAdd(promiseFib(x - 1), promiseFib(x - 2));
}
// promise an addition
EM_ASYNC_JS(long, promiseAdd, (long x, long y), {
  return Promise.resolve(x+y);
});

----------------------------------------

TITLE: Comparing Integer and Floating-Point Operations
DESCRIPTION: This code demonstrates the performance difference between integer and floating-point operations in loops.

LANGUAGE: javascript
CODE:
for (let i = 0; i < 1000; ++i) {
  // fast 🚀
}

for (let i = 0.1; i < 1000.1; ++i) {
  // slow 🐌
}

----------------------------------------

TITLE: Processing V8 Profiler Log (macOS)
DESCRIPTION: Command to process the V8 profiler log file on macOS using the tick processor script.

LANGUAGE: bash
CODE:
tools/mac-tick-processor v8.log

----------------------------------------

TITLE: Inspector Protocol Coverage Communication
DESCRIPTION: Example of coverage data collection via V8 Inspector Protocol, showing the protocol messages for starting, collecting and stopping coverage.

LANGUAGE: json
CODE:
{ "id": 26, "method": "Profiler.startPreciseCoverage",
            "params": { "callCount": false, "detailed": true }}
{ "id": 32, "method":"Profiler.takePreciseCoverage" }
{ "id": 32, "result": { "result": [{
  "functions": [
    {
      "functionName": "fib",
      "isBlockCoverage": true,    // Block granularity.
      "ranges": [ // An array of nested ranges.
        {
          "startOffset": 50,  // Byte offset, inclusive.
          "endOffset": 224,   // Byte offset, exclusive.
          "count": 1
        }, {
          "startOffset": 97,
          "endOffset": 107,
          "count": 0
        }, {
          "startOffset": 134,
          "endOffset": 144,
          "count": 0
        }, {
          "startOffset": 192,
          "endOffset": 223,
          "count": 0
        },
      ]},
      "scriptId": "199",
      "url": "file:///coverage-fib.html"
    }
  ]
}}

{"id":37,"method":"Profiler.stopPreciseCoverage"}

----------------------------------------

TITLE: Pointer Compression Implementation
DESCRIPTION: Core compression function that converts 64-bit pointers to 32-bit compressed values by right-shifting.

LANGUAGE: cpp
CODE:
uint32_t Compress(void* ptr) {
  return ((uintptr_t)ptr) >> 1;
}

LANGUAGE: asm
CODE:
mov rax, rdi
shr rax

----------------------------------------

TITLE: Correct Array Iteration Methods in JavaScript
DESCRIPTION: Shows correct ways to iterate over arrays using traditional for loop, for-of loop, and forEach method.

LANGUAGE: JavaScript
CODE:
for (let index = 0; index < items.length; index++) {
  const item = items[index];
  doSomething(item);
}

for (const item of items) {
  doSomething(item);
}

items.forEach((item) => {
  doSomething(item);
});

----------------------------------------

TITLE: Pushing V8 Binaries to Android Device
DESCRIPTION: Series of adb commands to create a directory and push V8 binaries to an Android device.

LANGUAGE: bash
CODE:
adb shell 'mkdir -p /data/local/tmp/v8/bin'
adb push out.gn/arm.release/d8 /data/local/tmp/v8/bin
adb push out.gn/arm.release/icudtl.dat /data/local/tmp/v8/bin
adb push out.gn/arm.release/snapshot_blob.bin /data/local/tmp/v8/bin

----------------------------------------

TITLE: PC-Relative Call Implementation
DESCRIPTION: Example of a program counter relative call instruction used for calling Code objects within the same CODE_SPACE.

LANGUAGE: x64 assembly
CODE:
call <offset>

----------------------------------------

TITLE: Compiling Simple WebAssembly Function with Liftoff
DESCRIPTION: Example of how Liftoff compiles a simple WebAssembly function that adds two parameters. It demonstrates Liftoff's single-pass compilation approach, register allocation, and code generation strategy.

LANGUAGE: WebAssembly
CODE:
(func (param i32) (param i32) (result i32)
  local.get 0
  local.get 1
  i32.add)

----------------------------------------

TITLE: Mixin Pattern with Super
DESCRIPTION: Shows a complex case using mixins that leads to megamorphic access sites, which can result in slower super property access.

LANGUAGE: javascript
CODE:
function createMixin(base) {
  class Mixin extends base {
    m() { return super.m() + 1; }
    //                ^ this access site is megamorphic
  }
  return Mixin;
}

class Base {
  m() { return 0; }
}

const myClass = createMixin(
  createMixin(
    createMixin(
      createMixin(
        createMixin(Base)
      )
    )
  )
);
(new myClass()).m();

----------------------------------------

TITLE: Viewing V8 API Changes Between Versions
DESCRIPTION: This Git command allows users to see the list of commits that modified the V8 API between two versions (A.B and X.Y) by examining changes in header files within the include directory.

LANGUAGE: bash
CODE:
git log branch-heads/A.B..branch-heads/X.Y include/v8*.h

----------------------------------------

TITLE: Disabling WebAssembly Output in Emscripten
DESCRIPTION: Compiler flag to disable WebAssembly output and use JavaScript output instead, which is useful for compatibility with older browsers.

LANGUAGE: bash
CODE:
-s WASM=0

----------------------------------------

TITLE: Configuring GN Args for Android ARM Build
DESCRIPTION: GN build configuration for an Android ARM release build, specifying target OS, CPU, and build settings.

LANGUAGE: python
CODE:
target_os = "android"      # These lines need to be changed manually
target_cpu = "arm"         # as v8gen.py assumes a simulator build.
v8_target_cpu = "arm"
is_component_build = false

----------------------------------------

TITLE: Root Register Based Object Loading
DESCRIPTION: Improved implementation showing how to load a constant address using the root register for isolate-independence.

LANGUAGE: x64 assembly
CODE:
REX.W movq rax,[kRootRegister + <offset>]

----------------------------------------

TITLE: Displaying Full Feature Support in HTML
DESCRIPTION: HTML markup showing how to display full feature support across Chrome, Firefox, Safari, Node.js, and Babel using the feature-support custom element.

LANGUAGE: html
CODE:
<feature-support chrome="71"
                 firefox="65"
                 safari="12"
                 nodejs="12"
                 babel="yes"></feature-support>

----------------------------------------

TITLE: Direct D8 Perf Profiling
DESCRIPTION: Low-level commands for directly using Linux perf with d8, including recording and post-processing steps.

LANGUAGE: bash
CODE:
perf record --call-graph=fp --clockid=mono --freq=max \
    --output=perf.data
    out/x64.release/d8 \
      --perf-prof --no-write-protect-code-memory \
      --interpreted-frames-native-stack \
    test.js;
perf inject --jit --input=perf.data --output=perf.data.jitted;
perf report --input=perf.data.jitted;

----------------------------------------

TITLE: Listing available gn arguments for V8 build
DESCRIPTION: This command lists all available 'gn' arguments for configuring the V8 build.

LANGUAGE: bash
CODE:
gn args out/foo --list

----------------------------------------

TITLE: Chromiumdash API Endpoints
DESCRIPTION: API endpoints for retrieving V8 version information and branch details from Chromiumdash, including milestone and release data

LANGUAGE: plaintext
CODE:
https://chromiumdash.appspot.com/fetch_milestones
https://chromiumdash.appspot.com/fetch_releases

----------------------------------------

TITLE: New JSPI API Suspending Class Declaration in WebIDL
DESCRIPTION: Declaration of the new WebAssembly.Suspending class in WebIDL, which takes a JavaScript function as an argument in its constructor.

LANGUAGE: webidl
CODE:
interface Suspending{
  constructor (Function fun);
}

----------------------------------------

TITLE: Compiling C to Standalone WebAssembly with Emscripten
DESCRIPTION: This command uses Emscripten to compile the C file 'add.c' into a standalone WebAssembly file 'add.wasm' with optimization level 3.

LANGUAGE: bash
CODE:
emcc -O3 add.c -o add.wasm

----------------------------------------

TITLE: Setting GN arguments for V8 debug build on Arm64 Linux
DESCRIPTION: Configures GN arguments for a debug build of V8 on Arm64 Linux with backtraces, slow dchecks, and disabled optimized debug.

LANGUAGE: bash
CODE:
is_debug=true
v8_enable_backtrace=true
v8_enable_slow_dchecks=true
v8_optimized_debug=false

----------------------------------------

TITLE: Unlock Method Implementation in JavaScript
DESCRIPTION: Implements the unlock mechanism for releasing the mutex and notifying waiting threads.

LANGUAGE: javascript
CODE:
unlock() {
  const oldValue = Atomics.compareExchange(this.i32a, AsyncLock.INDEX,
                      /* old value >>> */  AsyncLock.LOCKED,
                      /* new value >>> */  AsyncLock.UNLOCKED);
  if (oldValue != AsyncLock.LOCKED) {
    throw new Error('Tried to unlock while not holding the mutex');
  }
  Atomics.notify(this.i32a, AsyncLock.INDEX, 1);
}

----------------------------------------

TITLE: Map Class Implementation in C++
DESCRIPTION: C++ helper class for accessing V8 heap objects with pointer compression support.

LANGUAGE: cpp
CODE:
class Map {
 public:
  inline DescriptorArray instance_descriptors(const Isolate* isolate) const {
    uintptr_t field_address = FieldAddress(ptr_, kInstanceDescriptorsOffset);
    uint32_t compressed_da = *reinterpret_cast<uint32_t*>(field_address);
    uintptr_t base = reinterpret_cast<uintptr_t>(isolate);
    uintptr_t da = DecompressTagged(base, compressed_value);
    return DescriptorArray(da);
  }
};

----------------------------------------

TITLE: Configuring Git Branch Settings
DESCRIPTION: Optional Git configuration commands for branch tracking setup

LANGUAGE: bash
CODE:
git config branch.autosetupmerge always
git config branch.autosetuprebase always

----------------------------------------

TITLE: Synchronous Lock Implementation in JavaScript
DESCRIPTION: Implements a blocking lock method using Atomics.compareExchange and Atomics.wait for worker threads.

LANGUAGE: javascript
CODE:
lock() {
  while (true) {
    const oldValue = Atomics.compareExchange(this.i32a, AsyncLock.INDEX,
                        /* old value >>> */  AsyncLock.UNLOCKED,
                        /* new value >>> */  AsyncLock.LOCKED);
    if (oldValue == AsyncLock.UNLOCKED) {
      return;
    }
    Atomics.wait(this.i32a, AsyncLock.INDEX,
                 AsyncLock.LOCKED); // <<< expected value at start
  }
}

----------------------------------------

TITLE: Chaining AssignmentExpressions in JavaScript
DESCRIPTION: This example demonstrates how AssignmentExpressions can be chained, assigning the same value to multiple variables in a single statement.

LANGUAGE: javascript
CODE:
x = y = 5;
x; // 5
y; // 5

----------------------------------------

TITLE: Compiling clang for V8 on Arm64 Linux
DESCRIPTION: Builds clang locally from the V8 checkout, using system GCC and CMake, without Android or Fuchsia support.

LANGUAGE: bash
CODE:
./tools/clang/scripts/build.py --without-android --without-fuchsia \
                               --host-cc=gcc --host-cxx=g++ \
                               --gcc-toolchain=/usr \
                               --use-system-cmake --disable-asserts

----------------------------------------

TITLE: Configuring .gclient for Android Build in Python
DESCRIPTION: Add 'android' to the target_os list in the .gclient configuration file to include Android-specific components in the checkout.

LANGUAGE: python
CODE:
target_os = ['android']  # Add this to get Android stuff checked out.

----------------------------------------

TITLE: Unstable Sort Result Example
DESCRIPTION: Demonstrates how an unstable sort implementation might reorder elements with equal ratings differently, breaking the original alphabetical ordering.

LANGUAGE: javascript
CODE:
[
  { name: 'Ghost',  rating: 14 }, // 😢
  { name: 'Choco',  rating: 14 }, // 😢
  { name: 'Bandit', rating: 13 },
  { name: 'Falco',  rating: 13 },
  { name: 'Abby',   rating: 12 },
  { name: 'Daisy',  rating: 12 },
  { name: 'Elmo',   rating: 12 },
]

----------------------------------------

TITLE: Loading Embedded Address in x64 Assembly
DESCRIPTION: Example of loading an embedded address into register rbx using direct value embedding, which was the initial non-shareable implementation.

LANGUAGE: x64 assembly
CODE:
REX.W movq rbx,0x56526afd0f70

----------------------------------------

TITLE: Defining a Torque macro for printing 'Hello World'
DESCRIPTION: This snippet demonstrates how to define a simple Torque macro that prints 'Hello World'.

LANGUAGE: torque
CODE:
@export
macro PrintHelloWorld(): void {
  Print('Hello world!');
}

----------------------------------------

TITLE: Configuring Android Logging for d8
DESCRIPTION: GN build configuration to enable logging to stdout for easier debugging on Android.

LANGUAGE: python
CODE:
v8_android_log_stdout = true

----------------------------------------

TITLE: Super in Object Literals
DESCRIPTION: Demonstrates super property access within object literal methods, showing how it works similarly to class methods.

LANGUAGE: javascript
CODE:
const myproto = {
  __proto__: { 'x': 100 },
  m() { return super.x; }
};
const o = { __proto__: myproto };
o.m(); // returns 100

----------------------------------------

TITLE: C++ Hello World Program for WebAssembly
DESCRIPTION: This C++ code defines a simple 'hello world' program that can be compiled to WebAssembly and run in various Wasm runtimes.

LANGUAGE: cpp
CODE:
// hello.cpp
#include <stdio.h>

int main() {
  printf("hello, world!\n");
  return 0;
}

----------------------------------------

TITLE: Storing Properties in JavaScript Objects (V8 internal)
DESCRIPTION: This code snippet demonstrates how different types of properties are stored in V8's internal representation of JavaScript objects. Array-like indices are stored in the elements backing store, while string or symbol keys are stored in the properties backing store.

LANGUAGE: javascript
CODE:
const x = {};
x[1] = 'bar';      // ← stored in elements
x['foo'] = 'bar';  // ← stored in properties

----------------------------------------

TITLE: Testing Stub-Linkage Builtin
DESCRIPTION: Unit test implementation for testing the MathIsHeapNumber42 stub-linkage builtin

LANGUAGE: cpp
CODE:
TEST(MathIsHeapNumber42) {
  HandleAndZoneScope scope;
  Isolate* isolate = scope.main_isolate();
  Heap* heap = isolate->heap();
  Zone* zone = scope.main_zone();

  StubTester tester(isolate, zone, Builtins::kMathIs42);
  Handle<Object> result1 = tester.Call(Handle<Smi>(Smi::FromInt(0), isolate));
  CHECK(result1->BooleanValue());
}

----------------------------------------

TITLE: Optimized V8 Bytecode for Private Field Initialization
DESCRIPTION: Improved bytecode for initializing private fields, using the new DefineKeyedOwnProperty bytecode instead of runtime calls.

LANGUAGE: cpp
CODE:
LdaImmutableCurrentContextSlot [2]
Star0

LdaZero
DefineKeyedOwnProperty <this>, r0, [0]

----------------------------------------

TITLE: Using a Torque macro in a C++ test case
DESCRIPTION: This C++ code shows how to use a Torque-defined macro in a test case using the CodeAssemblerTester.

LANGUAGE: cpp
CODE:
TEST(HelloWorld) {
  Isolate* isolate(CcTest::InitIsolateOnce());
  CodeAssemblerTester asm_tester(isolate, 0);
  TestTorqueAssembler m(asm_tester.state());
  {
    m.PrintHelloWorld();
    m.Return(m.UndefinedConstant());
  }
  FunctionTester ft(asm_tester.GenerateCode(), 0);
  ft.Call();
}

----------------------------------------

TITLE: Setting PATH for compatible ninja binary in V8 compilation
DESCRIPTION: Modifies the PATH environment variable to use the system's ninja installation instead of the one in depot_tools.

LANGUAGE: bash
CODE:
export PATH=$PATH:/path/to/depot_tools

----------------------------------------

TITLE: Transitioning Array Elements Kinds with Special Values in JavaScript
DESCRIPTION: Demonstrates how adding special values like -0, NaN, and Infinity to an array can cause transitions in elements kinds.

LANGUAGE: JavaScript
CODE:
const array = [3, 2, 1, +0];
// PACKED_SMI_ELEMENTS
array.push(-0);
// PACKED_DOUBLE_ELEMENTS

const array = [3, 2, 1];
// PACKED_SMI_ELEMENTS
array.push(NaN, Infinity);
// PACKED_DOUBLE_ELEMENTS

----------------------------------------

TITLE: Increasing V8 Heap Limit in C++
DESCRIPTION: V8 embedders can use the ResourceConstraints API to increase the heap limit. The set_max_old_space_size function is used to set a new maximum size for the old space in the V8 heap.

LANGUAGE: cpp
CODE:
set_max_old_space_size

----------------------------------------

TITLE: Implementing Stub-Linkage Builtin MathIsHeapNumber42
DESCRIPTION: Implementation of a TFS (stub linkage) builtin that specifically handles the HeapNumber case for checking equality with 42

LANGUAGE: cpp
CODE:
TF_BUILTIN(MathIsHeapNumber42, MathBuiltinsAssembler) {
  Node* const x = Parameter(Descriptor::kX);
  CSA_ASSERT(this, IsHeapNumber(x));
  Node* const value = LoadHeapNumberValue(x);
  Node* const is_42 = Float64Equal(value, Float64Constant(42));
  Return(SelectBooleanConstant(is_42));
}

----------------------------------------

TITLE: Checking out V8 version 7.7 using Git in Bash
DESCRIPTION: Provides the Git command for developers with an active V8 checkout to experiment with the new features in V8 v7.7.

LANGUAGE: bash
CODE:
git checkout -b 7.7 -t branch-heads/7.7

----------------------------------------

TITLE: Incorrect Array Iteration Leading to Out-of-Bounds Access in JavaScript
DESCRIPTION: Demonstrates an incorrect way of iterating over an array that leads to reading beyond the array's length, which can cause performance issues.

LANGUAGE: JavaScript
CODE:
// Don't do this!
for (let i = 0, item; (item = items[i]) != null; i++) {
  doSomething(item);
}

----------------------------------------

TITLE: Defining a struct in Torque
DESCRIPTION: This example demonstrates how to define a struct with generics in Torque.

LANGUAGE: torque
CODE:
@export
struct PromiseResolvingFunctions {
  resolve: JSFunction;
  reject: JSFunction;
}

struct ConstantIterator<T: type> {
  macro Empty(): bool {
    return false;
  }
  macro Next(): T labels _NoMore {
    return this.value;
  }

  value: T;
}

----------------------------------------

TITLE: Checking Out V8 Version 8.7
DESCRIPTION: Git command to checkout V8 version 8.7 for experimentation with new features.

LANGUAGE: bash
CODE:
git checkout -b 8.7 -t branch-heads/8.7

----------------------------------------

TITLE: Locating V8 Branch for Chrome Version in Git
DESCRIPTION: This snippet demonstrates how to construct the URL for finding a particular V8 branch corresponding to a Chrome version in the Git repository. It uses a placeholder X.Y to represent the version number.

LANGUAGE: bash
CODE:
https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/X.Y

----------------------------------------

TITLE: Custom Math.random Implementation in JavaScript
DESCRIPTION: A deterministic implementation of Math.random that uses bitwise operations to generate pseudo-random numbers. This implementation updates a seed variable stored in ScriptContext on each call.

LANGUAGE: javascript
CODE:
let seed;
Math.random = (function() {
  return function () {
    seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;
    seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;
    seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;
    seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;
    seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;
    seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;
    return (seed & 0xfffffff) / 0x10000000;
  };
})();

----------------------------------------

TITLE: Compiling specific V8 targets using ninja
DESCRIPTION: This command compiles a specific V8 target (d8) using ninja.

LANGUAGE: bash
CODE:
ninja -C out/x64.release d8

----------------------------------------

TITLE: Defining a bitfield struct in Torque
DESCRIPTION: This snippet shows how to define a bitfield struct in Torque.

LANGUAGE: torque
CODE:
bitfield struct DebuggerHints extends uint31 {
  side_effect_state: int32: 2 bit;
  debug_is_blackboxed: bool: 1 bit;
  computed_debug_is_blackboxed: bool: 1 bit;
  debugging_id: int32: 20 bit;
}

----------------------------------------

TITLE: Generated x64 assembly for CSA builtin
DESCRIPTION: This is the resulting x64 assembly code generated by the CSA for the 'GetStringLength' builtin, as output by mksnapshot with the --print-code option.

LANGUAGE: asm
CODE:
  test al,0x1
  jz not_string
  movq rbx,[rax-0x1]
  cmpb [rbx+0xb],0x80
  jnc not_string
  movq rax,[rax+0xf]
  retl
not_string:
  movq rax,[r13-0x60]
  retl

----------------------------------------

TITLE: Example RegExp Matching Patterns
DESCRIPTION: Demonstrates different ways a RegExp pattern can match a string, showing why backtracking can become exponential.

LANGUAGE: javascript
CODE:
'aaa'           'aa', 'a'           'aa', ''
'a', 'aa'       'a', 'a', 'a'       'a', 'a', ''
…

----------------------------------------

TITLE: Compiling V8 using ninja
DESCRIPTION: This command compiles V8 using ninja, assuming build files were generated in the 'x64.release' folder.

LANGUAGE: bash
CODE:
ninja -C out/x64.release

----------------------------------------

TITLE: Worker Thread Object Visiting During Concurrent Marking in C++
DESCRIPTION: This code snippet shows how a worker thread safely visits an object during concurrent marking by creating a snapshot and using atomic operations to ensure consistency.

LANGUAGE: cpp
CODE:
snapshot = [];
hidden_class = atomic_relaxed_load(&object.hidden_class);
for (field_offset in pointer_field_offsets(hidden_class)) {
  pointer = atomic_relaxed_load(object + field_offset);
  snapshot.add(field_offset, pointer);
}
if (atomic_color_transition(object, grey, black)) {
  visit_pointers(snapshot);
}

----------------------------------------

TITLE: Creating V8 Code Cache API Call
DESCRIPTION: New V8 API introduced for requesting code caches independent of compile requests, replacing the previous approach of coupling cache generation with compilation requests.

LANGUAGE: javascript
CODE:
ScriptCompiler::CreateCodeCache

----------------------------------------

TITLE: Vulnerable JavaScript Array Access Example
DESCRIPTION: Example of potentially vulnerable code that could be exploited by Spectre through speculative execution of out-of-bounds array access.

LANGUAGE: javascript
CODE:
if (condition) {
  return a[i];
}

----------------------------------------

TITLE: V8 Git Log Command for API Changes
DESCRIPTION: Command to view API changes between V8 versions 8.8 and 8.9 in the v8.h header file.

LANGUAGE: bash
CODE:
git log branch-heads/8.8..branch-heads/8.9 include/v8.h

----------------------------------------

TITLE: Configuring V8 JIT-less Mode
DESCRIPTION: Command line flags to disable JIT compilation in V8. The --jitless flag disables all runtime allocation of executable memory, while --no-opt only disables the TurboFan optimizing compiler.

LANGUAGE: shell
CODE:
--jitless
--no-opt

----------------------------------------

TITLE: Configuring 404 Page Front Matter in YAML
DESCRIPTION: Defines the metadata for the 404 error page using YAML front matter. It sets the title, permalink, exclusion from sitemap, and specifies the layout template to use.

LANGUAGE: yaml
CODE:
---
title: Document not found
permalink: /404.html
excludeFromSitemap: true
layout: layouts/base.njk
---

----------------------------------------

TITLE: Poisoned JavaScript Array Access Mitigation
DESCRIPTION: Protected version of array access code using the poison register technique to prevent speculative execution leaks. The poison value masks potentially leaked data during mis-speculation while maintaining normal program behavior.

LANGUAGE: javascript
CODE:
let poison = 1;
// …
if (condition) {
  poison *= condition;
  return a[i] * poison;
}

----------------------------------------

TITLE: HTML Script Tag Implementation
DESCRIPTION: Example of traditional synchronous script loading in HTML that demonstrates the previous script streaming behavior before the optimization.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
<head>
  <script src="main.js"></script>
</head>
...

----------------------------------------

TITLE: V8 for-in Implementation in C++
DESCRIPTION: Pseudo-C++ code illustrating how V8 implements the for-in loop internally, showing the preparation of keys to iterate over and the iteration logic.

LANGUAGE: cpp
CODE:
// For-In Prepare:
FixedArray* keys = nullptr;
Map* original_map = object->map();
if (original_map->HasEnumCache()) {
  if (object->HasNoElements()) {
    keys = original_map->GetCachedEnumKeys();
  } else {
    keys = object->GetCachedEnumKeysWithElements();
  }
} else {
  keys = object->GetEnumKeys();
}

// For-In Body:
for (size_t i = 0; i < keys->length(); i++) {
  // For-In Next:
  String* key = keys[i];
  if (!object->HasProperty(key) continue;
  EVALUATE_FOR_IN_BODY();
}

----------------------------------------

TITLE: String Spread Operation Example
DESCRIPTION: Shows how spread operator can be used to convert a string into an array of its Unicode code points.

LANGUAGE: javascript
CODE:
const str = 'こんにちは';
const result = [...str];
// → ['こ', 'ん', 'に', 'ち', 'は']

----------------------------------------

TITLE: Initializing WebAssembly Passive Data Segments
DESCRIPTION: Demonstration of defining and initializing passive data segments in WebAssembly using memory.init instruction. This allows copying constant data into linear memory or table regions.

LANGUAGE: wasm
CODE:
;; Define a passive data segment.
(data $hello passive "Hello WebAssembly")

;; Copy "Hello" into memory at address 10.
(memory.init (i32.const 10) (i32.const 0) (i32.const 5))

;; Copy "WebAssembly" into memory at address 1000.
(memory.init (i32.const 1000) (i32.const 6) (i32.const 11))

----------------------------------------

TITLE: Epsilon Transition Following Implementation
DESCRIPTION: Helper function that follows epsilon transitions in the non-backtracking RegExp algorithm implementation.

LANGUAGE: javascript
CODE:
function followEpsilons(pcs) {
  const visitedPcs = new Set();
  const result = [];

  while (pcs.length > 0) {
    const pc = pcs.pop();

    if (visitedPcs.has(pc)) continue;
    visitedPcs.add(pc);

    const inst = code[pc];
    switch (inst.opcode) {
      case 'CONSUME':
        result.push(pc);
        break;
      case 'FORK':
        pcs.push(pc + 1, inst.forkPc);
        break;
      case 'JMP':
        pcs.push(inst.jmpPc);
        break;
      case 'ACCEPT':
        return 'ACCEPT';
    }
  }

  return result;
}

----------------------------------------

TITLE: Creating Memory Leak with Unregistered Event Listener in JavaScript
DESCRIPTION: This code snippet demonstrates a memory leak caused by forgetting to unregister an event listener. It creates an iframe, adds a load event listener, and then removes the iframe without removing the listener, causing the iframe window to leak.

LANGUAGE: javascript
CODE:
// Main window:
const iframe = document.createElement('iframe');
iframe.src = 'iframe.html';
document.body.appendChild(iframe);
iframe.addEventListener('load', function() {
  const localVariable = iframe.contentWindow;
  function leakingListener() {
    // Do something with `localVariable`.
    if (localVariable) {}
  }
  document.body.addEventListener('my-debug-event', leakingListener);
  document.body.removeChild(iframe);
  // BUG: forgot to unregister `leakingListener`.
});

----------------------------------------

TITLE: Variable Index Access Optimization Example
DESCRIPTION: Demonstrates how TurboFan's escape analysis can eliminate array allocations and optimize variable index access for local arrays with known length.

LANGUAGE: javascript
CODE:
function sum(...args) {
  let total = 0;
  for (let i = 0; i < args.length; ++i)
    total += args[i];
  return total;
}

function sum2(x, y) {
  return sum(x, y);
}

----------------------------------------

TITLE: Micro-benchmark for Testing V8 Function Optimization
DESCRIPTION: This JavaScript code is a micro-benchmark that creates many closures and triggers garbage collection cycles. It's used to measure the performance impact of V8's optimized function handling.

LANGUAGE: javascript
CODE:
function g() {
  return (i) => i + 1;
}

// Create an initial closure and optimize.
var f = g();

f(0);
f(0);
%OptimizeFunctionOnNextCall(f);
f(0);

// Create 2M closures; those will get the previously optimized code.
var a = [];
for (var i = 0; i < 2000000; i++) {
  var h = g();
  h();
  a.push(h);
}

// Now cause scavenges; all of them are slow.
for (var i = 0; i < 1000; i++) {
  new Array(50000);
}

----------------------------------------

TITLE: Demonstrating Division Operator vs RegExp Literal in JavaScript
DESCRIPTION: This snippet shows how the forward slash (/) can be interpreted differently based on context in JavaScript, either as a division operator or the start of a RegExp literal.

LANGUAGE: javascript
CODE:
const x = 10 / 5;
const r = /foo/;

----------------------------------------

TITLE: Checking out V8 version 7.0 using Git
DESCRIPTION: Git command to checkout V8 version 7.0 for developers with an active V8 checkout.

LANGUAGE: shell
CODE:
git checkout -b 7.0 -t branch-heads/7.0

----------------------------------------

TITLE: Demonstrating Getter Behavior with Prototype Chain in JavaScript
DESCRIPTION: This code snippet shows how getters work with the prototype chain. It defines an object with a getter, creates another object with that as its prototype, and demonstrates that the getter uses the correct 'this' value.

LANGUAGE: javascript
CODE:
const o1 = { x: 10, get foo() { return this.x; } };
const o2 = { x: 50 };
Object.setPrototypeOf(o2, o1);
o2.foo;
// → 50

----------------------------------------

TITLE: Using CPEAAPL in AssignmentExpression and ArrowFunction Productions
DESCRIPTION: This grammar snippet shows how CPEAAPL is used in the production rules for AssignmentExpression and ArrowFunction, allowing for ambiguity resolution.

LANGUAGE: grammar
CODE:
AssignmentExpression :
  ConditionalExpression
  ArrowFunction
  ...

ArrowFunction :
  ArrowParameters => ConciseBody

ArrowParameters :
  BindingIdentifier
  CPEAAPL

PrimaryExpression :
  ...
  CPEAAPL

----------------------------------------

TITLE: Checking Out V8 v6.7 Branch
DESCRIPTION: Git command to create and checkout a new local branch tracking the remote v6.7 branch for testing new features.

LANGUAGE: git
CODE:
git checkout -b 6.7 -t branch-heads/6.7

----------------------------------------

TITLE: Enabling WebAssembly in V8 Command Line
DESCRIPTION: Command to enable WebAssembly support in V8's d8 shell by using the --expose_wasm flag.

LANGUAGE: shell
CODE:
d8 --expose_wasm

----------------------------------------

TITLE: Using Array.prototype.includes in JavaScript
DESCRIPTION: This snippet demonstrates the usage of the new Array.prototype.includes method, which is a stage 3 proposal for ES2016. It shows how to check for the presence of elements in arrays, returning boolean values.

LANGUAGE: javascript
CODE:
[1, 2, 3].includes(3); // true
['apple', 'banana', 'cherry'].includes('apple'); // true
['apple', 'banana', 'cherry'].includes('peach'); // false

----------------------------------------

TITLE: Checking out V8 v5.4 branch using Git
DESCRIPTION: Command to checkout the V8 v5.4 branch for developers with an active V8 checkout. This allows experimentation with new features in V8 v5.4.

LANGUAGE: bash
CODE:
git checkout -b 5.4 -t branch-heads/5.4

----------------------------------------

TITLE: Enabling WebAssembly in Chrome Canary
DESCRIPTION: Chrome URL flag to enable experimental WebAssembly support in Chrome Canary browser.

LANGUAGE: url
CODE:
chrome://flags#enable-webassembly

----------------------------------------

TITLE: Implementing specialMax function using ES5 syntax in JavaScript
DESCRIPTION: This snippet demonstrates how to implement a specialMax function that returns 0 for no arguments and uses Math.max.apply() for multiple arguments. It uses ES5 syntax with the arguments object.

LANGUAGE: javascript
CODE:
// Like Math.max, but returns 0 instead of -∞ for no arguments.
function specialMax(...args) {
  if (args.length === 0) return 0;
  return Math.max.apply(Math, args);
}

----------------------------------------

TITLE: Enabling WebAssembly Dynamic Tiering in Chrome via Command Line
DESCRIPTION: This command line flag enables the WebAssembly Dynamic Tiering feature in Chrome for local testing. It allows developers to experiment with the performance impact of dynamic tiering on their web applications.

LANGUAGE: bash
CODE:
--enable-blink-features=WebAssemblyDynamicTiering

----------------------------------------

TITLE: Ignition bytecode for function call
DESCRIPTION: Ignition bytecode generated for the add42 function call example.

LANGUAGE: Assembly
CODE:
0d              LdaUndefined              ;; Load undefined into the accumulator
26 f9           Star r2                   ;; Store it in register r2
13 01 00        LdaGlobal [1]             ;; Load global pointed by const 1 (add42)
26 fa           Star r1                   ;; Store it in register r1
0c 03           LdaSmi [3]                ;; Load small integer 3 into the accumulator
26 f8           Star r3                   ;; Store it in register r3
5f fa f9 02     CallNoFeedback r1, r2-r3  ;; Invoke call

----------------------------------------

TITLE: PromiseHook API Implementation Reference
DESCRIPTION: API for implementing promise lifecycle hooks in V8, providing functionality for async context propagation and promise tracking. Includes init, resolve, before, and after lifecycle hooks.

LANGUAGE: cpp
CODE:
PromiseHook

----------------------------------------

TITLE: TurboFan optimized code for add42 call with argument mismatch (with adaptor frame)
DESCRIPTION: TurboFan-generated optimized assembly code for calling add42 with mismatched arguments, using the arguments adaptor frame.

LANGUAGE: Assembly
CODE:
movq rdi,0x4250820fff1    ;; Load the function object <JSFunction add42>
;; Push receiver and arguments SMIs 1, 2 and 3
movq rcx,0x42508080dd5    ;; <JSGlobal Object>
push rcx
push 0x2
push 0x4
push 0x6
movl rax,0x3              ;; Save the arguments count in rax
movl rbx,0x1              ;; Save the formal parameters count in rbx
movq r10,0x564ed7fdf840   ;; <ArgumentsAdaptorTrampoline>
call r10                  ;; Call the ArgumentsAdaptorTrampoline

----------------------------------------

TITLE: String Trimming Methods Usage
DESCRIPTION: Demonstrates the new trimStart() and trimEnd() string methods along with the existing trim() method for removing whitespace.

LANGUAGE: javascript
CODE:
const string = '  hello world  ';
string.trimStart();
// → 'hello world  '
string.trimEnd();
// → '  hello world'
string.trim();
// → 'hello world'

----------------------------------------

TITLE: TurboFan optimized epilogue (with adaptor frame)
DESCRIPTION: TurboFan-generated optimized assembly code for the function epilogue when using the arguments adaptor frame.

LANGUAGE: Assembly
CODE:
movq rsp,rbp   ;; Clean callee frame
pop rbp
ret 0x8        ;; Pops a single argument (the receiver)

----------------------------------------

TITLE: Intl.ListFormat Usage - JavaScript
DESCRIPTION: Demonstration of the Intl.ListFormat API for locale-aware list formatting

LANGUAGE: javascript
CODE:
const lf = new Intl.ListFormat('en');
lf.format(['Frank']);
// → 'Frank'
lf.format(['Frank', 'Christine']);
// → 'Frank and Christine'
lf.format(['Frank', 'Christine', 'Flora']);
// → 'Frank, Christine, and Flora'
lf.format(['Frank', 'Christine', 'Flora', 'Harrison']);
// → 'Frank, Christine, Flora, and Harrison'

----------------------------------------

TITLE: Enabling Ignition Interpreter in Embedded V8 (JavaScript)
DESCRIPTION: Command-line flag to enable the new Ignition interpreter in embedded versions of V8. This interpreter brings memory savings for JIT'ed code and allows for future optimizations in startup performance.

LANGUAGE: javascript
CODE:
--ignition

----------------------------------------

TITLE: Using Numeric Separators in JavaScript
DESCRIPTION: Examples of using the new numeric separator feature in JavaScript to improve readability of large numeric literals. Underscores can be used as separators to group digits.

LANGUAGE: javascript
CODE:
1000000000000
   1019436871.42

LANGUAGE: javascript
CODE:
1_000_000_000_000
    1_019_436_871.42

----------------------------------------

TITLE: Creating Templates for Global Objects in V8 (C++)
DESCRIPTION: An example of creating a template for the global object and setting built-in global functions.

LANGUAGE: C++
CODE:
v8::Local<v8::ObjectTemplate> global = v8::ObjectTemplate::New(isolate);
global->Set(v8::String::NewFromUtf8(isolate, "log"),
            v8::FunctionTemplate::New(isolate, LogCallback));

v8::Persistent<v8::Context> context =
    v8::Context::New(isolate, nullptr, global);

----------------------------------------

TITLE: Retrieving V8 API changes using Git in Bash
DESCRIPTION: Shows the Git command to list API changes between V8 versions 7.6 and 7.7 by examining the include/v8.h file.

LANGUAGE: bash
CODE:
git log branch-heads/7.6..branch-heads/7.7 include/v8.h

----------------------------------------

TITLE: Implementing Accessors for Static Global Variables in V8 (C++)
DESCRIPTION: An example of how to implement accessors for static global variables in V8.

LANGUAGE: C++
CODE:
void XGetter(v8::Local<v8::String> property,
              const v8::PropertyCallbackInfo<Value>& info) {
  info.GetReturnValue().Set(x);
}

void XSetter(v8::Local<v8::String> property, v8::Local<v8::Value> value,
             const v8::PropertyCallbackInfo<void>& info) {
  x = value->Int32Value();
}

v8::Local<v8::ObjectTemplate> global_templ = v8::ObjectTemplate::New(isolate);
global_templ->SetAccessor(v8::String::NewFromUtf8(isolate, "x"),
                          XGetter, XSetter);
v8::Persistent<v8::Context> context =
    v8::Context::v8::New(isolate, nullptr, global_templ);

----------------------------------------

TITLE: V8 Checkout Command for Version 8.9
DESCRIPTION: Git command to checkout and experiment with V8 version 8.9 features using branch-heads.

LANGUAGE: bash
CODE:
git checkout -b 8.9 -t branch-heads/8.9

----------------------------------------

TITLE: Sample JavaScript Test Function
DESCRIPTION: Example JavaScript code demonstrating function optimization with V8's native syntax.

LANGUAGE: javascript
CODE:
// Our optimized function.
function add(a, b) {
  return a + b;
}

// Typical cheat code enabled by --allow-natives-syntax.
%PrepareFunctionForOptimization(add);

// Give the optimizing compiler type feedback so it'll speculate `a` and `b` are
// numbers.
add(1, 3);

// And force it to optimize.
%OptimizeFunctionOnNextCall(add);
add(5, 7);

----------------------------------------

TITLE: Building V8 debug version and running specific tests
DESCRIPTION: This command builds V8 for x64 architecture in debug mode and runs specific mjsunit and cctest tests.

LANGUAGE: bash
CODE:
gm x64.debug mjsunit/foo cctest/test-bar/*

----------------------------------------

TITLE: Memory Address Range Check Example
DESCRIPTION: Example showing how V8 implements range checks for string maps, where an object is considered a string if its map has a compressed address between 0xdd and 0x49d.

LANGUAGE: C++
CODE:
// String map address range check
// address >= 0xdd && address <= 0x49d

----------------------------------------

TITLE: Running V8 Presubmit Checks using Git
DESCRIPTION: Command to run the presubmit checks before code submission. This uses cpplint.py from Google's depot_tools to verify code style compliance.

LANGUAGE: bash
CODE:
git cl presubmit

----------------------------------------

TITLE: Listing available V8 build configurations using v8gen
DESCRIPTION: These commands list available build configurations for V8, including bot configurations from a specific master.

LANGUAGE: bash
CODE:
v8gen list

v8gen list -m client.v8

----------------------------------------

TITLE: Compile-Time Memory Address Reference Example
DESCRIPTION: Example showing how V8 uses hardcoded memory addresses for core objects like 'undefined', where its compressed address is set to 0x61.

LANGUAGE: C++
CODE:
cage_base + StaticRoot::kUndefined

----------------------------------------

TITLE: Bypassing vpython for V8 compilation on Arm64 Linux
DESCRIPTION: Sets an environment variable to use the system's Python installation instead of vpython when running depot_tools commands.

LANGUAGE: bash
CODE:
export VPYTHON_BYPASS="manually managed python not supported by chrome operations"

----------------------------------------

TITLE: Generating ARM Release Build with v8gen.py
DESCRIPTION: Command to generate an ARM release build configuration using v8gen.py script.

LANGUAGE: bash
CODE:
tools/dev/v8gen.py arm.release

----------------------------------------

TITLE: Defining a Simple C Function for WebAssembly Export
DESCRIPTION: This C code defines a simple function 'add' that adds two integers. It uses the EMSCRIPTEN_KEEPALIVE macro to ensure the function is exported in the WebAssembly module.

LANGUAGE: c
CODE:
// add.c
#include <emscripten.h>

EMSCRIPTEN_KEEPALIVE
int add(int x, int y) {
  return x + y;
}

----------------------------------------

TITLE: Starting gdbserver for Remote Debugging on Android
DESCRIPTION: Command to start gdbserver on an Android device for remote debugging of d8.

LANGUAGE: bash
CODE:
bullhead:/data/local/tmp/v8/bin $ gdbserver :5039 $D8 <arguments>

----------------------------------------

TITLE: Updating Object Properties with Different Representations
DESCRIPTION: This snippet illustrates how V8 handles updates to object properties with Smi and HeapNumber representations.

LANGUAGE: javascript
CODE:
const o = {
  x: 42,  // Smi
  y: 4.2, // HeapNumber
};

o.x += 10;
// → o.x is now 52
o.y += 1;
// → o.y is now 5.2

----------------------------------------

TITLE: C Vector Dot Product Implementation
DESCRIPTION: Sample C code implementing a dot product function for 3D vectors using a struct, demonstrating the original high-level code before WebAssembly compilation.

LANGUAGE: c
CODE:
typedef struct { float x, y, z; } vec3;

float dot(const vec3 *a, const vec3 *b) {
    return a->x * b->x +
           a->y * b->y +
           a->z * b->z;
}

----------------------------------------

TITLE: VSCode Additional Settings Configuration
DESCRIPTION: Additional VSCode settings for improved development experience, including search exclusions and bracket handling.

LANGUAGE: json
CODE:
"editor.autoClosingBrackets": false

LANGUAGE: json
CODE:
"files.exclude": {
  "**/.vscode": true
},
"search.exclude": {
  "**/out*": true,
  "**/build*": true
}

----------------------------------------

TITLE: JavaScript Point Class Example
DESCRIPTION: Example JavaScript code demonstrating object field layout before and after pointer compression.

LANGUAGE: javascript
CODE:
function Point(x, y) {
  this.x = x;
  this.y = y;
}
const p = new Point(3.1, 5.3);

----------------------------------------

TITLE: Java Code Demonstrating Type Checking and Casting
DESCRIPTION: This Java code snippet shows a common pattern of type checking and casting, which can be optimized in WasmGC due to its type-aware optimizations.

LANGUAGE: java
CODE:
if (ref instanceof Type) {
  foo((Type) ref); // This downcast can be eliminated.
}

----------------------------------------

TITLE: Running V8 Profiler with d8 Shell (Other Platforms)
DESCRIPTION: Command to run the V8 profiler using the d8 shell on non-Windows platforms. It generates a v8.log file containing profiling data.

LANGUAGE: bash
CODE:
out/ia32.release/d8 --prof script.js

----------------------------------------

TITLE: Pointer Decompression Implementation
DESCRIPTION: Decompression function that restores full 64-bit pointers from compressed 32-bit values using sign extension and masking.

LANGUAGE: cpp
CODE:
void* Decompress(uint32_t compressed) {
  uintptr_t intermediate =
      (uintptr_t)((int32_t)compressed) << 1;
  return (void*)(intermediate & base);
}

LANGUAGE: asm
CODE:
movsxd rax, edi
add rax, rax
and rax, qword ptr [rip + base]

----------------------------------------

TITLE: Example Review Request Format in Markdown
DESCRIPTION: Demonstrates the recommended format for specifying reviewer responsibilities in a code review request email.

LANGUAGE: markdown
CODE:
- larry: bitmap changes
- sergey: process hacks
- everybody else: FYI

----------------------------------------

TITLE: Running V8 Microbenchmarks with run_perf.py in Bash
DESCRIPTION: This snippet demonstrates how to run V8 microbenchmarks using the 'run_perf.py' script. It includes examples for running all tests and filtering specific tests.

LANGUAGE: bash
CODE:
tools/run_perf.py --arch x64 --binary-override-path out/x64.release/d8 test/js-perf-test/JSTests.json

LANGUAGE: bash
CODE:
tools/run_perf.py --arch x64 --binary-override-path out/x64.release/d8 --filter JSTests/TypedArrays test/js-perf-test/JSTests.json

----------------------------------------

TITLE: Basic Pointer Access with Member Class
DESCRIPTION: Example showing typical pointer access patterns that need to be supported by the compression scheme.

LANGUAGE: cpp
CODE:
void* ptr = member.get();
if (ptr == nullptr) { /* ... * }

----------------------------------------

TITLE: Stack Trace Formatting - JavaScript
DESCRIPTION: API for customizing stack trace formatting

LANGUAGE: javascript
CODE:
Error.prepareStackTrace(error, structuredStackTrace)

----------------------------------------

TITLE: Enabling Tracing in d8 with Configuration File
DESCRIPTION: This bash command demonstrates how to enable tracing in d8 using the --enable-tracing flag and specifying a trace configuration file with the --trace-config option.

LANGUAGE: bash
CODE:
d8 --enable-tracing --trace-config=traceconfig.json

----------------------------------------

TITLE: Adding Dynamic Property to Peak Object
DESCRIPTION: Example showing how adding a new property affects the hidden class structure. This demonstrates how V8 handles property additions after object creation.

LANGUAGE: javascript
CODE:
m2.cost = "one arm, one leg";

----------------------------------------

TITLE: Adding kX64Int32Add1 to instruction-codes-x64.h
DESCRIPTION: Adds the kX64Int32Add1 opcode to the x64-specific instruction codes in instruction-codes-x64.h

LANGUAGE: diff
CODE:
diff --git a/src/compiler/backend/x64/instruction-codes-x64.h b/src/compiler/backend/x64/instruction-codes-x64.h
index 9b8be0e0b5..7f5faeb87b 100644
--- a/src/compiler/backend/x64/instruction-codes-x64.h
+++ b/src/compiler/backend/x64/instruction-codes-x64.h
@@ -12,6 +12,7 @@ namespace compiler {
 // X64-specific opcodes that specify which assembly sequence to emit.
 // Most opcodes specify a single instruction.
 #define TARGET_ARCH_OPCODE_LIST(V)        \
+  V(X64Int32Add1)                         \
   V(X64Add)                               \
   V(X64Add32)                             \
   V(X64And)                               \

----------------------------------------

TITLE: Implementing MWC1616 PRNG in C++
DESCRIPTION: This snippet shows the implementation of the MWC1616 (multiply with carry) pseudo-random number generator algorithm previously used in V8. It uses 64 bits of internal state split into two 32-bit variables.

LANGUAGE: cpp
CODE:
uint32_t state0 = 1;
uint32_t state1 = 2;
uint32_t mwc1616() {
  state0 = 18030 * (state0 & 0xFFFF) + (state0 >> 16);
  state1 = 30903 * (state1 & 0xFFFF) + (state1 >> 16);
  return state0 << 16 + (state1 & 0xFFFF);
}

----------------------------------------

TITLE: Adding a test for I32Add1 in test-run-wasm.cc
DESCRIPTION: Adds a simple test for the new I32Add1 instruction in test-run-wasm.cc

LANGUAGE: diff
CODE:
diff --git a/test/cctest/wasm/test-run-wasm.cc b/test/cctest/wasm/test-run-wasm.cc
index 26df61ceb8..b1ee6edd71 100644
--- a/test/cctest/wasm/test-run-wasm.cc
+++ b/test/cctest/wasm/test-run-wasm.cc
@@ -28,6 +28,15 @@ namespace test_run_wasm {
 #define RET(x) x, kExprReturn
 #define RET_I8(x) WASM_I32V_2(x), kExprReturn

+#define WASM_I32_ADD1(x) x, kExprI32Add1
+
+WASM_EXEC_TEST(Int32Add1) {
+  WasmRunner<int32_t> r(execution_tier);
+  // 10 + 1
+  BUILD(r, WASM_I32_ADD1(WASM_I32V_1(10)));
+  CHECK_EQ(11, r.Call());
+}
+
 WASM_EXEC_TEST(Int32Const) {
   WasmRunner<int32_t> r(execution_tier);
   const int32_t kExpectedValue = 0x11223344;

----------------------------------------

TITLE: Displaying Mixed Feature Support in HTML
DESCRIPTION: HTML markup showing how to display mixed feature support status across different platforms using the feature-support custom element.

LANGUAGE: html
CODE:
<feature-support chrome="partial"
                 firefox="yes"
                 safari="yes"
                 nodejs="no"
                 babel="yes"></feature-support>

----------------------------------------

TITLE: Implementing kX64Int32Add1 in code-generator-x64.cc
DESCRIPTION: Implements the kX64Int32Add1 instruction in the x64 code generator in code-generator-x64.cc

LANGUAGE: diff
CODE:
diff --git a/src/compiler/backend/x64/code-generator-x64.cc b/src/compiler/backend/x64/code-generator-x64.cc
index 6c828d6bc4..260c8619f2 100644
--- a/src/compiler/backend/x64/code-generator-x64.cc
+++ b/src/compiler/backend/x64/code-generator-x64.cc
@@ -744,6 +744,11 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
   InstructionCode opcode = instr->opcode();
   ArchOpcode arch_opcode = ArchOpcodeField::decode(opcode);
   switch (arch_opcode) {
+    case kX64Int32Add1: {
+      DCHECK_EQ(i.OutputRegister(), i.InputRegister(0));
+      __ addl(i.InputRegister(0), Immediate(1));
+      break;
+    }
     case kArchCallCodeObject: {
       if (HasImmediateInput(instr, 0)) {
         Handle<Code> code = i.InputCode(0);

----------------------------------------

TITLE: Using Array.prototype.flat with Infinite Depth
DESCRIPTION: Shows how to completely flatten a nested array structure by passing Infinity as the depth parameter.

LANGUAGE: javascript
CODE:
// Flatten recursively until the array contains no more nested arrays:
array.flat(Infinity);
// → [1, 2, 3]

----------------------------------------

TITLE: Optimized V8 Bytecode for Private Method Brand Initialization
DESCRIPTION: Improved bytecode for initializing the private brand symbol, using DefineKeyedOwnProperty instead of a runtime call in most cases.

LANGUAGE: cpp
CODE:
LdaImmutableCurrentContextSlot [3]
Star0

Ldar <context>
DefineKeyedOwnProperty <this>, r0, [0]

----------------------------------------

TITLE: Demonstrating String#replace Behavior in JavaScript
DESCRIPTION: Examples showing how String#replace works with strings and regular expressions, highlighting its limitations for global substring replacement.

LANGUAGE: javascript
CODE:
'abc'.replace('b', '_');
// → 'a_c'

'🍏🍋🍊🍓'.replace('🍏', '🥭');
// → '🥭🍋🍊🍓'

'aabbcc'.replace('b', '_');
// → 'aa_bcc'

'🍏🍏🍋🍋🍊🍊🍓🍓'.replace('🍏', '🥭');
// → '🥭🍏🍋🍋🍊🍊🍓🍓'

'aabbcc'.replace(/b/g, '_');
// → 'aa__cc'

'🍏🍏🍋🍋🍊🍊🍓🍓'.replace(/🍏/g, '🥭');
// → '🥭🥭🍋🍋🍊🍊🍓🍓'

----------------------------------------

TITLE: AsyncLock Class Definition in JavaScript
DESCRIPTION: Defines the basic structure of an AsyncLock class that implements a mutex using SharedArrayBuffer and Atomics.

LANGUAGE: javascript
CODE:
class AsyncLock {
  static INDEX = 0;
  static UNLOCKED = 0;
  static LOCKED = 1;

  constructor(sab) {
    this.sab = sab;
    this.i32a = new Int32Array(sab);
  }

  lock() {
    /* … */
  }

  unlock() {
    /* … */
  }

  executeLocked(f) {
    /* … */
  }
}

----------------------------------------

TITLE: Builtins Constant Pool Loading
DESCRIPTION: Two-step process to load heap constants through the builtins constant pool for isolate-independence.

LANGUAGE: x64 assembly
CODE:
REX.W movq rax,[kRootRegister + <offset>]
REX.W movq rax,[rax + 0x1d7]

----------------------------------------

TITLE: Octal Numeric Literal With Separator
DESCRIPTION: Example showing numeric separator usage in octal number format, though practical applications are limited.

LANGUAGE: javascript
CODE:
// A numeric separator in an octal integer literal: 🤷‍♀️
0o123_456

----------------------------------------

TITLE: Public Class Fields Implementation
DESCRIPTION: Demonstrates modern class implementation using public class fields syntax.

LANGUAGE: javascript
CODE:
class IncreasingCounter {
  _count = 0;
  get value() {
    console.log('Getting the current value!');
    return this._count;
  }
  increment() {
    this._count++;
  }
}

----------------------------------------

TITLE: Checking Out V8 Branch in Git
DESCRIPTION: This command shows how developers with an active V8 checkout can use Git to experiment with new features in a specific V8 version. It creates a new branch based on the remote branch-heads/X.Y.

LANGUAGE: bash
CODE:
git checkout -b X.Y -t branch-heads/X.Y

----------------------------------------

TITLE: Sign Display Options with Intl.NumberFormat in JavaScript
DESCRIPTION: Demonstrates various sign display options for formatting numbers, including always showing the sign and accounting format for currency.

LANGUAGE: javascript
CODE:
const formatter = new Intl.NumberFormat('en', {
  style: 'unit',
  unit: 'percent',
  signDisplay: 'always',
});
formatter.format(-12.34);
// → '-12.34%'
formatter.format(12.34);
// → '+12.34%'
formatter.format(0);
// → '+0%'
formatter.format(-0);
// → '-0%'

const formatter = new Intl.NumberFormat('en', {
  style: 'currency',
  currency: 'USD',
  signDisplay: 'exceptZero',
  currencySign: 'accounting',
});
formatter.format(-12.34);
// → '($12.34)'
formatter.format(12.34);
// → '+$12.34'
formatter.format(0);
// → '$0.00'
formatter.format(-0);
// → '($0.00)'

----------------------------------------

TITLE: Secure Cross-Origin Import
DESCRIPTION: Demonstrates secure cross-origin JSON module import using assertions.

LANGUAGE: javascript
CODE:
// Fails if evil.com responds with a non-JSON MIME type.
import data from 'https://evil.com/data.json' assert { type: 'json' };

----------------------------------------

TITLE: Demonstrating A/B Testing Impact on Code Caching
DESCRIPTION: Example showing how non-deterministic code execution can affect code caching efficiency. Random branching between A and B functions prevents reliable caching of executed code.

LANGUAGE: javascript
CODE:
if (Math.random() > 0.5) {
  A();
} else {
  B();
}

----------------------------------------

TITLE: Demonstrating scope and super in static blocks in JavaScript
DESCRIPTION: This example shows the scope behavior of static initialization blocks and how to use 'super' to access the superclass's static properties.

LANGUAGE: javascript
CODE:
var y = 'outer y';
class A {
  static fieldA = 'A.fieldA';
}
class B extends A {
  static fieldB = 'B.fieldB';
  static {
    let x = super.fieldA;
    // → 'A.fieldA'
    var y = this.fieldB;
    // → 'B.fieldB'
  }
}
// Since static blocks are their own `var` scope, `var`s do not hoist!
y;
// → 'outer y'

----------------------------------------

TITLE: Importing namespace object in JavaScript modules
DESCRIPTION: Demonstrates the existing syntax for importing all exports from a module as a namespace object.

LANGUAGE: javascript
CODE:
import * as utils from './utils.mjs';

----------------------------------------

TITLE: V8 Heap Objects - BytecodeArray
DESCRIPTION: Reference to BytecodeArray object type used in V8's Ignition bytecode compiler. This object stores the compiled bytecode and associated metadata for JavaScript function execution.

LANGUAGE: cpp
CODE:
BytecodeArray

----------------------------------------

TITLE: ES2019 try-catch with Optional Binding
DESCRIPTION: Example demonstrating the new ES2019 feature where catch clause can be used without a binding parameter when the exception object is not needed in the exception handling code.

LANGUAGE: javascript
CODE:
try {
  doSomethingThatMightThrow();
} catch { // → No binding!
  handleException();
}

----------------------------------------

TITLE: Behavior of document.all with Logical Operators in JavaScript
DESCRIPTION: This snippet demonstrates the special behavior of document.all with different logical operators. It shows how document.all is treated as falsy with || but not nullish with ??.

LANGUAGE: javascript
CODE:
document.all || true; // => true
document.all ?? true; // => HTMLAllCollection[]

----------------------------------------

TITLE: Implementing StreamedSource API in V8
DESCRIPTION: Reference to V8's StreamedSource API implementation that enables background parsing of JavaScript source files. This API allows V8 to parse JavaScript code as it streams from the network.

LANGUAGE: cpp
CODE:
StreamedSource

----------------------------------------

TITLE: ECMAScript hasOwnProperty Algorithm
DESCRIPTION: Specification algorithm showing the implementation of Object.prototype.hasOwnProperty method with abstract operations.

LANGUAGE: text
CODE:
Object.prototype.hasOwnProperty(V)

1. Let P be ? ToPropertyKey(V).
2. Let O be ? ToObject(this value).
3. Return ? HasOwnProperty(O, P).

----------------------------------------

TITLE: Optional Method Calls in JavaScript
DESCRIPTION: This snippet demonstrates using the optional chaining operator for method calls.

LANGUAGE: javascript
CODE:
// Extends the interface with an optional method, which is present
// only for admin users.
const adminOption = db?.user?.validateAdminAndGetPrefs?.().option;

----------------------------------------

TITLE: TurboFan optimized epilogue (without adaptor frame)
DESCRIPTION: TurboFan-generated optimized assembly code for the function epilogue without using the arguments adaptor frame.

LANGUAGE: Assembly
CODE:
movq rcx,[rbp-0x18]        ;; Load the argument count (from callee frame) to rcx
movq rsp,rbp               ;; Pop out callee frame
pop rbp
cmpq rcx,0x0               ;; Compare arguments count with formal parameter count
jg 0x35ac000840c6  <+0x86>
;; If arguments count is smaller (or equal) than the formal parameter count:
ret 0x8                    ;; Return as usual (parameter count is statically known)
;; If we have more arguments in the stack than formal parameters:
pop r10                    ;; Save the return address
leaq rsp,[rsp+rcx*8+0x8]   ;; Pop all arguments according to rcx
push r10                   ;; Recover the return address
retl

----------------------------------------

TITLE: Demonstrating Legacy Identifier Usage in JavaScript
DESCRIPTION: This snippet shows how 'await' can be used as an identifier in non-async functions but is disallowed in async functions.

LANGUAGE: javascript
CODE:
function old() {
  var await;
}

async function modern() {
  var await; // Syntax error
}

----------------------------------------

TITLE: Using in Operator with Regular Properties
DESCRIPTION: Demonstrates the basic usage of 'in' operator for checking property existence in objects and their prototype chain.

LANGUAGE: javascript
CODE:
const o1 = {'foo': 0};
console.log('foo' in o1); // true
const o2 = {};
console.log('foo' in o2); // false
const o3 = Object.create(o1);
console.log('foo' in o3); // true

----------------------------------------

TITLE: Example JavaScript function call
DESCRIPTION: Simple JavaScript function definition and call used to explain V8's function call process.

LANGUAGE: JavaScript
CODE:
function add42(x) {
  return x + 42;
}
add42(3);

----------------------------------------

TITLE: Checking V8 API changes using Git
DESCRIPTION: Git command to view API changes between V8 versions 6.9 and 7.0 in the include/v8.h file.

LANGUAGE: shell
CODE:
git log branch-heads/6.9..branch-heads/7.0 include/v8.h

----------------------------------------

TITLE: Half-Constructed Object Example
DESCRIPTION: Illustrates a case where an object has only some of its private fields during construction.

LANGUAGE: javascript
CODE:
let halfConstructed;
class F {
  m() {
    console.log(#x in this); // true
    console.log(#y in this); // false
  }
  #x = 0;
  #y = (() => {
    halfConstructed = this;
    throw 'error';
  })();
}

try {
  new F();
} catch {}

halfConstructed.m();

----------------------------------------

TITLE: Measuring performance impact of removing arguments adaptor frame
DESCRIPTION: Micro-benchmark to measure the performance impact of removing the arguments adaptor frame for function calls with mismatched argument counts.

LANGUAGE: JavaScript
CODE:
console.time();
function f(x, y, z) {}
for (let i = 0; i <  N; i++) {
  f(1, 2, 3, 4, 5);
}
console.timeEnd();

----------------------------------------

TITLE: Fibonacci Implementation in C with Emscripten
DESCRIPTION: C implementation of Fibonacci sequence using tail recursion, compatible with Emscripten compilation to WebAssembly.

LANGUAGE: c
CODE:
#include <stdio.h>

unsigned fib_rec(unsigned n, unsigned a, unsigned b) {
  if (n == 0) {
    return a;
  }
  return fib_rec(n - 1, b, a + b);
}

unsigned fib(unsigned n) {
  return fib_rec(n, 0, 1);
}

int main() {
  for (unsigned i = 0; i < 10; i++) {
    printf("fib(%d): %d\n", i, fib(i));
  }

  printf("fib(1000000): %d\n", fib(1000000));
}

----------------------------------------

TITLE: Traditional Promise Chain Implementation
DESCRIPTION: Example showing promise-based data fetching with duplicate cleanup code in then() and catch() blocks.

LANGUAGE: javascript
CODE:
const fetchAndDisplay = ({ url, element }) => {
  showLoadingSpinner();
  fetch(url)
    .then((response) => response.text())
    .then((text) => {
      element.textContent = text;
      hideLoadingSpinner();
    })
    .catch((error) => {
      element.textContent = error.message;
      hideLoadingSpinner();
    });
};

fetchAndDisplay({
  url: someUrl,
  element: document.querySelector('#output')
});

----------------------------------------

TITLE: Emscripten Build Command for 4GB Support
DESCRIPTION: Command line example showing how to build an Emscripten project with support for up to 4GB of memory.

LANGUAGE: shell
CODE:
emcc -s ALLOW_MEMORY_GROWTH -s MAXIMUM_MEMORY=4GB

----------------------------------------

TITLE: Mutual Recursion Example with Tail Calls in C
DESCRIPTION: Implementation of even/odd number checking using mutual recursion with tail calls and the musttail attribute.

LANGUAGE: c
CODE:
#include <stdio.h>
#include <stdbool.h>

bool is_odd(unsigned n);
bool is_even(unsigned n);

bool is_odd(unsigned n) {
  if (n == 0) {
    return false;
  }
  __attribute__((__musttail__))
  return is_even(n - 1);
}

bool is_even(unsigned n) {
  if (n == 0) {
    return true;
  }
  __attribute__((__musttail__))
  return is_odd(n - 1);
}

int main() {
  printf("is_even(1000000): %d\n", is_even(1000000));
}

----------------------------------------

TITLE: Manual SIMD Implementation of Array Multiplication in C++
DESCRIPTION: This C++ function uses SIMD intrinsics to manually implement array multiplication, demonstrating how to use the wasm_simd128.h header for fine-grained control over SIMD instructions.

LANGUAGE: cpp
CODE:
#include <wasm_simd128.h>

void multiply_arrays(int* out, int* in_a, int* in_b, int size) {
  for (int i = 0; i < size; i += 4) {
    v128_t a = wasm_v128_load(&in_a[i]);
    v128_t b = wasm_v128_load(&in_b[i]);
    v128_t prod = wasm_i32x4_mul(a, b);
    wasm_v128_store(&out[i], prod);
  }
}

----------------------------------------

TITLE: Signed Shift Operation Overflow Example
DESCRIPTION: Demonstrates how signed shift operations overflow at 2GB, showing both successful and failing cases.

LANGUAGE: javascript
CODE:
// Just below 2GB is ok, this prints 536870911
console.log((2 * 1024 * 1024 * 1024 - 4) >> 2);
// 2GB overflows and we get -536870912 :(
console.log((2 * 1024 * 1024 * 1024) >> 2);

----------------------------------------

TITLE: Modern Private Field Checking
DESCRIPTION: Demonstrates the new private brand check approach for testing private field existence.

LANGUAGE: javascript
CODE:
class E {
  use(obj) {
    if (#foo in obj) {
      obj.#foo;
    } else {
      // Fallback for the case obj didn't have #foo
    }
  }
  #foo = 0;
}

----------------------------------------

TITLE: Array Multiplication Function in Rust
DESCRIPTION: This Rust function multiplies elements of two input slices and stores the results in an output slice. It demonstrates how the compiler can autovectorize the loop when SIMD is enabled.

LANGUAGE: rust
CODE:
pub fn multiply_arrays(out: &mut [i32], in_a: &[i32], in_b: &[i32]) {
  in_a.iter()
    .zip(in_b)
    .zip(out)
    .for_each(|((a, b), dst)| {
        *dst = a * b;
    });
}

----------------------------------------

TITLE: V8 Enumerable Key Collection in C++
DESCRIPTION: C++ code demonstrating how V8 collects enumerable keys for an object, including walking up the prototype chain and handling the enum cache.

LANGUAGE: cpp
CODE:
FixedArray* JSObject::GetEnumKeys() {
  // Get the receiver's enum keys.
  FixedArray* keys = this->GetOwnEnumKeys();
  // Walk up the prototype chain.
  for (JSObject* object : GetPrototypeIterator()) {
     // Append non-duplicate keys to the list.
     keys = keys->UnionOfKeys(object->GetOwnEnumKeys());
  }
  return keys;
}

FixedArray* JSObject::GetOwnEnumKeys() {
  FixedArray* keys;
  if (this->HasEnumCache()) {
    keys = this->map()->GetCachedEnumKeys();
  } else {
    keys = this->GetEnumPropertyKeys();
  }
  if (this->HasFastProperties()) this->map()->FillEnumCache(keys);
  return object->GetElementsAccessor()->PrependElementIndices(object, keys);
}

FixedArray* FixedArray::UnionOfKeys(FixedArray* other) {
  int length = this->length();
  FixedArray* result = FixedArray::Allocate(length + other->length());
  this->CopyTo(result, 0);
  int insertion_index = length;
  for (int i = 0; i < other->length(); i++) {
    String* key = other->get(i);
    if (other->IndexOf(key) == -1) {
      result->set(insertion_index, key);
      insertion_index++;
    }
  }
  result->Shrink(insertion_index);
  return result;
}

----------------------------------------

TITLE: Default Export Example
DESCRIPTION: Demonstrates how to use default exports in a module.

LANGUAGE: javascript
CODE:
// 📁 lib.mjs
export default function(string) {
  return `${string.toUpperCase()}!`;
}

----------------------------------------

TITLE: Legalized WebAssembly Module for JavaScript Compatibility
DESCRIPTION: This WebAssembly module shows how the previous module would be 'legalized' to use two 32-bit parameters instead of one 64-bit parameter for JavaScript compatibility.

LANGUAGE: wasm
CODE:
(module
  (func $send_i64 (param $x_low i32) (param $x_high i32)
    (local $x i64) ;; the real value the rest of the code will use
    ;; code to combine $x_low and $x_high into $x
    ..))

----------------------------------------

TITLE: Formatting Ordinal Numbers with Intl.PluralRules in JavaScript
DESCRIPTION: Demonstrates how to use Intl.PluralRules with the 'ordinal' type option to format ordinal numbers in English. This example creates a formatter function that adds the correct ordinal suffix to numbers.

LANGUAGE: javascript
CODE:
const pr = new Intl.PluralRules('en-US', {
  type: 'ordinal'
});
const suffixes = new Map([
  ['one',   'st'],
  ['two',   'nd'],
  ['few',   'rd'],
  ['other', 'th'],
]);
const formatOrdinals = (n) => {
  const rule = pr.select(n);
  const suffix = suffixes.get(rule);
  return `${n}${suffix}`;
};

formatOrdinals(0);   // '0th'
formatOrdinals(1);   // '1st'
formatOrdinals(2);   // '2nd'
formatOrdinals(3);   // '3rd'
formatOrdinals(4);   // '4th'
formatOrdinals(11);  // '11th'
formatOrdinals(21);  // '21st'
formatOrdinals(42);  // '42nd'
formatOrdinals(103); // '103rd'

----------------------------------------

TITLE: Limiting Iterator Values with .take()
DESCRIPTION: Demonstrates using take() helper to limit the number of values from an iterator. The example shows selecting the first 10 blog posts.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

for (const post of posts.values().take(10)) {
  console.log(post);
}

----------------------------------------

TITLE: Unsigned Shift Operation Solution
DESCRIPTION: Shows the correct way to handle large memory addresses using unsigned shift operations.

LANGUAGE: javascript
CODE:
// This gives us 536870912, as we want!
console.log((2 * 1024 * 1024 * 1024) >>> 2);

----------------------------------------

TITLE: Security Risk Example
DESCRIPTION: Shows how cross-origin imports without assertions can be dangerous.

LANGUAGE: javascript
CODE:
// Executes JS if evil.com responds with a
// JavaScript MIME type (e.g. `text/javascript`)!
import data from 'https://evil.com/data.json';

----------------------------------------

TITLE: Reducing Iterator Values with .reduce()
DESCRIPTION: Shows using reduce() helper to combine iterator values into a single result. The example counts posts with a specific tag.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

const tagLists = posts.values().flatMap((x) => x.querySelectorAll('.tag').values());

const tags = tagLists.map((x) => x.textContent);

const count = tags.reduce((sum , value) => sum + (value === 'security' ? 1 : 0), 0);
console.log(count);

----------------------------------------

TITLE: Optimized StringsStorage Hash Function
DESCRIPTION: The improved hash function that reduces collisions by rotating the hash value left by 2 bits, creating gaps between consecutive numeric values.

LANGUAGE: cpp
CODE:
int32_t NewHash(const std::string& numeric_string) {
  return OriginalHash(numeric_string) << 2;
}

----------------------------------------

TITLE: Static Module Import in HTML
DESCRIPTION: Demonstration of static import syntax using a module script in HTML.

LANGUAGE: html
CODE:
<script type="module">
  import * as module from './utils.mjs';
  module.default();
  // → logs 'Hi from the default export!'
  module.doStuff();
  // → logs 'Doing stuff…'
</script>

----------------------------------------

TITLE: Iterating with Side Effects using .forEach()
DESCRIPTION: Shows using forEach() helper for iteration with side effects. The example collects unique publication dates from blog posts.

LANGUAGE: javascript
CODE:
const posts = document.querySelectorAll('li:not(header li)');

const dates = new Set();
const forEach = posts.values().forEach((x) => dates.add(x.querySelector('time')));
console.log(dates);

----------------------------------------

TITLE: Illustrating Template Literal Syntax in JavaScript
DESCRIPTION: This code demonstrates the use of template literals in JavaScript, showing how the interpretation of backticks and curly braces can depend on the context.

LANGUAGE: javascript
CODE:
const what1 = 'temp';
const what2 = 'late';
const t = `I am a ${ what1 + what2 }`;

if (0 == 1) {
}`not very useful`;

----------------------------------------

TITLE: WebAssembly Module with 64-bit Integer Parameter
DESCRIPTION: This WebAssembly module defines a function that takes a 64-bit integer parameter.

LANGUAGE: wasm
CODE:
(module
  (func $send_i64 (param $x i64)
    ..))

----------------------------------------

TITLE: Set notation with difference operator in RegExp `v` flag
DESCRIPTION: Demonstrates the use of set notation with the difference operator (`--`) to match all Greek symbols except for specific characters.

LANGUAGE: javascript
CODE:
/[\p{Script_Extensions=Greek}--π]/v.test('π'); // → false

/[\p{Script_Extensions=Greek}--[αβγ]]/v.test('α'); // → false
/[\p{Script_Extensions=Greek}--[α-γ]]/v.test('β'); // → false

----------------------------------------

TITLE: Equivalent export syntax in JavaScript modules
DESCRIPTION: Provides an equivalent two-step process for the new export syntax, first importing and then exporting the namespace object.

LANGUAGE: javascript
CODE:
import * as utils from './utils.mjs';
export { utils };

----------------------------------------

TITLE: Creating AggregateError Instance
DESCRIPTION: Shows how to programmatically construct an AggregateError object for handling multiple errors in Promise.any rejections.

LANGUAGE: javascript
CODE:
const aggregateError = new AggregateError([errorA, errorB, errorC], 'Stuff went wrong!');

----------------------------------------

TITLE: Custom Iterator Example
DESCRIPTION: Demonstrates how to modify an array's iteration behavior by defining a custom Symbol.iterator.

LANGUAGE: javascript
CODE:
const arr = [1, 2, 3];
arr[Symbol.iterator] = function() {
  return { next: function() { return { done: true }; } };
};
const result = [...arr];
// → []

----------------------------------------

TITLE: Incorrect Array Maximum Function with Out-of-Bounds Access in JavaScript
DESCRIPTION: Shows an incorrect implementation of a function to find the maximum value in an array, which reads beyond the array's length.

LANGUAGE: JavaScript
CODE:
function Maximum(array) {
  let max = 0;
  for (let i = 0; i <= array.length; i++) { // BAD COMPARISON!
    if (array[i] > max) max = array[i];
  }
  return max;
}

----------------------------------------

TITLE: Basic Class Instance Usage Example
DESCRIPTION: Demonstrates basic usage of an IncreasingCounter class instance showing value access and increment operations.

LANGUAGE: javascript
CODE:
const counter = new IncreasingCounter();
counter.value;
// logs 'Getting the current value!'
// → 0
counter.increment();
counter.value;
// logs 'Getting the current value!'
// → 1

----------------------------------------

TITLE: Implementing MathIs42 Builtin
DESCRIPTION: Complete implementation of a CodeStubAssembler builtin that checks if a value equals 42, handling both Smi and HeapNumber cases

LANGUAGE: cpp
CODE:
TF_BUILTIN(MathIs42, MathBuiltinsAssembler) {
  Node* const context = Parameter(Descriptor::kContext);
  Node* const x = Parameter(Descriptor::kX);

  Node* const number = CallBuiltin(Builtins::kToNumber, context, x);

  VARIABLE(var_result, MachineRepresentation::kTagged);

  Label if_issmi(this), if_isheapnumber(this), out(this);

  Branch(TaggedIsSmi(number), &if_issmi, &if_isheapnumber);

  BIND(&if_issmi);
  {
    var_result.Bind(SelectBooleanConstant(SmiEqual(number, SmiConstant(42))));
    Goto(&out);
  }

  BIND(&if_isheapnumber);
  {
    CSA_ASSERT(this, IsHeapNumber(number));
    Node* const value = LoadHeapNumberValue(number);
    Node* const is_42 = Float64Equal(value, Float64Constant(42));
    var_result.Bind(SelectBooleanConstant(is_42));
    Goto(&out);
  }

  BIND(&out);
  {
    Node* const result = var_result.value();
    CSA_ASSERT(this, IsBoolean(result));
    Return(result);
  }
}

----------------------------------------

TITLE: Dynamic Module Import with Async/Await
DESCRIPTION: Example of dynamic import using async/await syntax for cleaner code.

LANGUAGE: html
CODE:
<script type="module">
  (async () => {
    const moduleSpecifier = './utils.mjs';
    const module = await import(moduleSpecifier)
    module.default();
    // → logs 'Hi from the default export!'
    module.doStuff();
    // → logs 'Doing stuff…'
  })();
</script>

----------------------------------------

TITLE: Defining CoverParenthesizedExpressionAndArrowParameterList Grammar
DESCRIPTION: This grammar snippet shows the production rules for CPEAAPL, which is used to parse both arrow function parameters and parenthesized expressions.

LANGUAGE: grammar
CODE:
CPEAAPL :
  ( Expression )
  ( Expression , )
  ( )
  ( ... BindingIdentifier )
  ( ... BindingPattern )
  ( Expression , ... BindingIdentifier )
  ( Expression , ... BindingPattern )

----------------------------------------

TITLE: Using top-level await for dynamic dependency pathing in JavaScript
DESCRIPTION: This snippet demonstrates how top-level await can be used to dynamically import language-specific strings based on the user's browser language.

LANGUAGE: javascript
CODE:
const strings = await import(`/i18n/${navigator.language}`);

----------------------------------------

TITLE: Demonstrating Error-Prone Property Access in JavaScript
DESCRIPTION: This snippet shows traditional ways of accessing nested properties, which can be error-prone or hard to read.

LANGUAGE: javascript
CODE:
// Error prone-version, could throw.
const nameLength = db.user.name.length;

// Less error-prone, but harder to read.
let nameLength;
if (db && db.user && db.user.name)
  nameLength = db.user.name.length;

----------------------------------------

TITLE: Implementing specialMax function using ES2015 spread operator in JavaScript
DESCRIPTION: This snippet shows an optimized version of the specialMax function using ES2015 features. It uses the spread operator (...) to pass arguments directly to Math.max, improving performance in V8 v5.6.

LANGUAGE: javascript
CODE:
function specialMax(...args) {
  if (args.length === 0) return 0;
  return Math.max(...args);
}

----------------------------------------

TITLE: Listing V8 Branch Heads with Git
DESCRIPTION: Git command to list available V8 branch-heads when using depot_tools.

LANGUAGE: bash
CODE:
git branch --remotes | grep branch-heads/

----------------------------------------

TITLE: Implementing AdvanceUntil for Efficient Character Stream Processing in V8
DESCRIPTION: A templatized function that provides direct access to the underlying character stream data without breaking abstractions, improving scanning performance.

LANGUAGE: C++
CODE:
template <typename Char>
template <typename ScannerT>
inline bool Utf16CharacterStream::AdvanceUntil(
    ScannerT* scanner,
    std::function<bool(Char)> check_action) {
  while (true) {
    // ... implementation details ...
  }
}

----------------------------------------

TITLE: Defining Point Class and Performance Testing in JavaScript
DESCRIPTION: This snippet defines a Point class with a constructor and dotProduct method, then creates instances and runs performance tests on the dotProduct method with different input values.

LANGUAGE: javascript
CODE:
class Point {
  constructor(x, y) {
    if (x < 0 || y < 0) {
      this.isNegative = true;
    }
    this.x = x;
    this.y = y;
  }

  dotProduct(other) {
    return this.x * other.x + this.y * other.y;
  }
}

let a = new Point(1, 1);
let b = new Point(2, 2);
let dotProduct;

// warmup
for (let i = 0; i < 10e5; i++) {
  dotProduct = a.dotProduct(b);
}

console.time('snippet1');
for (let i = 0; i < 10e6; i++) {
  dotProduct = a.dotProduct(b);
}
console.timeEnd('snippet1');

a = new Point(-1, -1);
b = new Point(-2, -2);
console.time('snippet2');
for (let i = 0; i < 10e6; i++) {
  dotProduct = a.dotProduct(b);
}
console.timeEnd('snippet2');

----------------------------------------

TITLE: Demonstrating Variable Reference Ambiguity in JavaScript
DESCRIPTION: This snippet shows how the meaning of a partial expression in JavaScript can be ambiguous, complicating variable tracking in the preparser.

LANGUAGE: javascript
CODE:
function f(d) {
  function g() {
    const a = ({ d }

----------------------------------------

TITLE: Using new.target in JavaScript Constructor Functions
DESCRIPTION: Demonstrates the use of new.target to determine whether a function was called as a constructor with the 'new' keyword. It shows how to throw an error if the function is called without 'new' and how it works when called correctly.

LANGUAGE: javascript
CODE:
function myFunction() {
  if (new.target === undefined) {
    throw 'Try out calling it with new.';
  }
  console.log('Works!');
}

// Breaks:
myFunction();

// Works:
const a = new myFunction();

----------------------------------------

TITLE: Running V8 Debug Command with Retention Tracking
DESCRIPTION: Command line example showing how to run V8 (d8) with the necessary flags to enable retention path tracking and the resulting output showing the retaining path from root to object.

LANGUAGE: bash
CODE:
$ out/x64.release/d8 --allow-natives-syntax --track-retaining-path --expose-gc test.js
#################################################
Retaining path for 0x245c59f0c1a1:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 6: 0x245c59f0c1a1 <Object map = 0x2d919f0d729>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 5: 0x245c59f0c169 <FixedArray[5]>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 4: 0x245c59f0c219 <JSFunction (sfi = 0x1fbb02e2d7f1)>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 3: 0x1fbb02e2d679 <FixedArray[5]>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 2: 0x245c59f0c139 <FixedArray[4]>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Distance from root 1: 0x1fbb02e03d91 <FixedArray[279]>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Root: (Isolate)
-------------------------------------------------

----------------------------------------

TITLE: Implementing Inspector Message Reception in C++
DESCRIPTION: Demonstrates how to handle messages sent from V8 to the embedder by implementing message forwarding to JavaScript through a callback function.

LANGUAGE: cpp
CODE:
void Send(const v8_inspector::StringView& string) {
  // [...] String transformations.
  // Grab the global property called 'receive' from the current context.
  Local<String> callback_name =
      v8::String::NewFromUtf8(isolate_, "receive", v8::NewStringType::kNormal)
          .ToLocalChecked();
  Local<Context> context = context_.Get(isolate_);
  Local<Value> callback =
      context->Global()->Get(context, callback_name).ToLocalChecked();
  // And call it to pass the message on to JS.
  if (callback->IsFunction()) {
    // [...]
    MaybeLocal<Value> result = Local<Function>::Cast(callback)->Call(
        context, Undefined(isolate_), 1, args);
  }
}

----------------------------------------

TITLE: Setting Breakpoints for V8 Builtins in GDB
DESCRIPTION: This snippet demonstrates how to set temporary and regular breakpoints in GDB to debug V8 builtins. It shows the process of setting a breakpoint at Isolate::Init and then at a specific builtin function.

LANGUAGE: gdb
CODE:
(gdb) tb i::Isolate::Init
Temporary breakpoint 1 at 0x7ffff706742b: i::Isolate::Init. (2 locations)
(gdb) r
Thread 1 "d8" hit Temporary breakpoint 1, 0x00007ffff7c55bc0 in Isolate::Init
(gdb) br Builtins_RegExpPrototypeExec
Breakpoint 2 at 0x7ffff7ac8784
(gdb) c
Thread 1 "d8" hit Breakpoint 2, 0x00007ffff7ac8784 in Builtins_RegExpPrototypeExec ()

----------------------------------------

TITLE: Using Different Styles with Intl.DisplayNames in JavaScript
DESCRIPTION: This snippet demonstrates the usage of different style options (long, short, narrow) when creating Intl.DisplayNames objects for language names.

LANGUAGE: javascript
CODE:
const longLanguageNames = new Intl.DisplayNames(['en'], { type: 'language' });
longLanguageNames.of('en-US');
// → 'American English'
const shortLanguageNames = new Intl.DisplayNames(['en'], { type: 'language', style: 'short' });
shortLanguageNames.of('en-US');
// → 'US English'
const narrowLanguageNames = new Intl.DisplayNames(['en'], { type: 'language', style: 'narrow' });
narrowLanguageNames.of('en-US');
// → 'US English'

----------------------------------------

TITLE: Implementing Array Float Clamping in JavaScript
DESCRIPTION: Example function that clamps negative values in a Float32Array to zero, used to demonstrate performance differences between scalar and SIMD implementations in WebAssembly.

LANGUAGE: javascript
CODE:
function clampZero(f32array) {
  for (let i = 0; i < f32array.length; ++i) {
    if (f32array[i] < 0) {
      f32array[i] = 0;
    }
  }
}

----------------------------------------

TITLE: Illustrating Pointer Compression Structure in V8
DESCRIPTION: This code block represents the structure of a compressed pointer in V8's pointer compression scheme. It shows how a 64-bit pointer is split into two 32-bit halves: a base and an index.

LANGUAGE: plaintext
CODE:
            |----- 32 bits -----|----- 32 bits -----|
Pointer:    |________base_______|_______index_______|

----------------------------------------

TITLE: 32-bit Arm Debug Features Example
DESCRIPTION: Example using Arm32 stop instruction with debugging features.

LANGUAGE: cpp
CODE:
__ stop(al, 123);
__ mov(r0, r0);
__ mov(r0, r0);
__ mov(r0, r0);
__ mov(r0, r0);
__ mov(r0, r0);
__ stop(al, 0x1);
__ mov(r1, r1);
__ mov(r1, r1);
__ mov(r1, r1);
__ mov(r1, r1);
__ mov(r1, r1);

----------------------------------------

TITLE: Demonstrating Array.prototype.flatMap Usage in JavaScript
DESCRIPTION: Demonstrates the new Array.prototype.flatMap method which maps each element using a mapping function and flattens the result into a new array

LANGUAGE: javascript
CODE:
[2, 3, 4].flatMap((x) => [x, x * 2]);
// → [2, 4, 3, 6, 4, 8]

----------------------------------------

TITLE: Enabling GC Object Statistics in V8 Tracing
DESCRIPTION: This bash command shows the necessary flags to enable GC Object Statistics in V8 tracing. It uses --track_gc_object_stats to track GC object stats and --noincremental-marking to disable incremental marking.

LANGUAGE: bash
CODE:
--track_gc_object_stats --noincremental-marking

----------------------------------------

TITLE: Checking V8 API Changes Using Git
DESCRIPTION: Command to view API changes between V8 versions 9.5 and 9.6 using Git.

LANGUAGE: shell
CODE:
git log branch-heads/9.5..branch-heads/9.6 include/v8*.h

----------------------------------------

TITLE: Using String#replaceAll for Global Substring Replacement in JavaScript
DESCRIPTION: Examples demonstrating the usage of the new String#replaceAll method for straightforward global substring replacement without regular expressions.

LANGUAGE: javascript
CODE:
'aabbcc'.replaceAll('b', '_');
// → 'aa__cc'

'🍏🍏🍋🍋🍊🍊🍓🍓'.replaceAll('🍏', '🥭');
// → '🥭🥭🍋🍋🍊🍊🍓🍓'

const queryString = 'q=query+string+parameters';
queryString.replaceAll('+', ' ');
// → 'q=query string parameters'

----------------------------------------

TITLE: Creating and Using Intl.RelativeTimeFormat in English
DESCRIPTION: This snippet demonstrates how to create an Intl.RelativeTimeFormat instance for English and use it to format various relative time expressions.

LANGUAGE: javascript
CODE:
const rtf = new Intl.RelativeTimeFormat('en');

rtf.format(3.14, 'second');
// → 'in 3.14 seconds'

rtf.format(-15, 'minute');
// → '15 minutes ago'

rtf.format(8, 'hour');
// → 'in 8 hours'

rtf.format(-2, 'day');
// → '2 days ago'

rtf.format(3, 'week');
// → 'in 3 weeks'

rtf.format(-5, 'month');
// → '5 months ago'

rtf.format(2, 'quarter');
// → 'in 2 quarters'

rtf.format(-42, 'year');
// → '42 years ago'

----------------------------------------

TITLE: Running V8 tests for a specific build
DESCRIPTION: This command runs V8 tests for a specific build output directory.

LANGUAGE: bash
CODE:
tools/run-tests.py --outdir out/foo

----------------------------------------

TITLE: Named Capture Groups in Regular Expressions
DESCRIPTION: Shows the usage of named capture groups in regular expressions, allowing developers to reference captured groups by name instead of by index.

LANGUAGE: javascript
CODE:
const pattern = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/u;
const result = pattern.exec('2017-12-15');
// result.groups.year === '2017'
// result.groups.month === '12'
// result.groups.day === '15'

----------------------------------------

TITLE: Using Intl.ListFormat in Chinese
DESCRIPTION: Demonstrates the usage of Intl.ListFormat with Chinese language, showing how list formatting adapts to different languages.

LANGUAGE: javascript
CODE:
const lf = new Intl.ListFormat('zh');
lf.format(['永鋒']);
// → '永鋒'
lf.format(['永鋒', '新宇']);
// → '永鋒和新宇'
lf.format(['永鋒', '新宇', '芳遠']);
// → '永鋒、新宇和芳遠'
lf.format(['永鋒', '新宇', '芳遠', '澤遠']);
// → '永鋒、新宇、芳遠和澤遠'

----------------------------------------

TITLE: Original JavaScript Code with Object Allocation
DESCRIPTION: Example showing a function where an object is created but doesn't escape the function scope, making it a candidate for escape analysis optimization.

LANGUAGE: javascript
CODE:
function foo(a, b) {
  const object = { a, b };
  return object.a + object.b;
  // Note: `object` does not escape.
}

----------------------------------------

TITLE: Using Spread Operator to Replace Apply in JavaScript Function Calls
DESCRIPTION: Shows how the spread operator can be used to pass an array of arguments to a function, replacing the need for the apply method. It compares the old approach using apply with the new approach using the spread operator.

LANGUAGE: javascript
CODE:
// Function parameters stored in an array
// Code without spread operator
function myFunction(a, b, c) {
  console.log(a);
  console.log(b);
  console.log(c);
}
const argsInArray = ['Hi ', 'Spread ', 'operator!'];
myFunction.apply(null, argsInArray);

// Code with spread operator
function myFunction (a,b,c) {
  console.log(a);
  console.log(b);
  console.log(c);
}

const argsInArray = ['Hi ', 'Spread ', 'operator!'];
myFunction(...argsInArray);

----------------------------------------

TITLE: Accessing V8 Branch Head URL Format
DESCRIPTION: URL pattern for accessing V8 branch heads in the Chromium repository.

LANGUAGE: plaintext
CODE:
https://chromium.googlesource.com/v8/v8.git/+/branch-heads/<minor-version>

----------------------------------------

TITLE: C Function Calling JavaScript with 64-bit Integer
DESCRIPTION: This C code defines a function that sends a 64-bit integer to JavaScript.

LANGUAGE: c
CODE:
#include <stdint.h>

extern void send_i64_to_js(int64_t);

int main() {
  send_i64_to_js(0xABCD12345678ULL);
}

----------------------------------------

TITLE: Using Default Parameters in JavaScript Functions (ES2015)
DESCRIPTION: This snippet illustrates the use of default parameters in JavaScript function definitions, comparing the new ES2015 syntax with the older ES5 approach.

LANGUAGE: javascript
CODE:
function sublist(list, start, end) {
  if (typeof start === 'undefined') start = 0;
  if (typeof end === 'undefined') end = list.length;
  ...
}

function sublist(list, start = 0, end = list.length) { … }
sublist([1, 2, 3], 1);
// sublist([1, 2, 3], 1, 3)

function vector([x, y, z] = []) { … }

----------------------------------------

TITLE: Demonstrating Nested Array Structure
DESCRIPTION: Shows the structure of a nested array with multiple levels of depth, annotated with comments to highlight the different array levels.

LANGUAGE: javascript
CODE:
const array = [1, [2, [3]]];
//            ^^^^^^^^^^^^^ outer array
//                ^^^^^^^^  inner array
//                    ^^^   innermost array

----------------------------------------

TITLE: Running Build Hooks and Tests
DESCRIPTION: Commands to run gclient hooks and execute tests with parallel jobs.

LANGUAGE: bash
CODE:
gclient runhooks
JOBS=`nproc` make test

----------------------------------------

TITLE: Demonstrating Smi and Double Elements in JavaScript Arrays
DESCRIPTION: This example shows different types of fast elements in V8: Smi (small integer) packed, Smi holey, Double packed, and Double holey. It illustrates how V8 optimizes arrays based on their content.

LANGUAGE: javascript
CODE:
const a1 = [1,   2, 3];  // Smi Packed
const a2 = [1,    , 3];  // Smi Holey, a2[1] reads from the prototype
const b1 = [1.1, 2, 3];  // Double Packed
const b2 = [1.1,  , 3];  // Double Holey, b2[1] reads from the prototype

----------------------------------------

TITLE: Profiling V8 on Android Device
DESCRIPTION: Series of commands to compile, push, and profile a V8 binary on an Android device, then process the profile data on the host.

LANGUAGE: bash
CODE:
adb shell cp /data/local/tmp/v8/bin/d8 /data/local/tmp/v8/bin/d8-version.under.test
cp out.gn/arm.release/d8 ./d8-version.under.test

adb push benchmarks /data/local/tmp
adb shell cd /data/local/tmp/benchmarks; ../v8/bin/d8-version.under.test run.js --prof
adb shell /data/local/tmp/v8/bin/d8-version.under.test benchmark.js --prof
adb pull /data/local/tmp/benchmarks/v8.log ./

cp out/x64.release/d8 .  # only required once
cp out/x64.release/natives_blob.bin .  # only required once
cp out/x64.release/snapshot_blob.bin .  # only required once
tools/linux-tick-processor --nm=$(pwd)/third_party/android_ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-nm

----------------------------------------

TITLE: Disabling Untrusted Code Mitigations in V8 JavaScript Engine
DESCRIPTION: This snippet shows how to disable the untrusted code mitigations in V8 at runtime. This may be used if you fully trust the JavaScript and WebAssembly code being executed and want to avoid potential performance impacts.

LANGUAGE: javascript
CODE:
--no-untrusted-code-mitigations

----------------------------------------

TITLE: Setting up gm alias in Bash
DESCRIPTION: This snippet shows how to create a Bash alias for the 'gm' convenience script, which is used for building V8.

LANGUAGE: bash
CODE:
alias gm=/path/to/v8/tools/dev/gm.py

----------------------------------------

TITLE: Using Modern globalThis in JavaScript
DESCRIPTION: The recommended way to access global this using the new globalThis property, which provides a unified mechanism across all JavaScript environments.

LANGUAGE: javascript
CODE:
const theGlobalThis = globalThis;

----------------------------------------

TITLE: Async/Await Implementation with finally
DESCRIPTION: Modern implementation using async/await syntax with try/catch/finally blocks for cleaner code structure.

LANGUAGE: javascript
CODE:
const fetchAndDisplay = async ({ url, element }) => {
  showLoadingSpinner();
  try {
    const response = await fetch(url);
    const text = await response.text();
    element.textContent = text;
  } catch (error) {
    element.textContent = error.message;
  } finally {
    hideLoadingSpinner();
  }
};

----------------------------------------

TITLE: Adding New Bytecode Expectations Test in Bash
DESCRIPTION: This snippet provides steps to add a new bytecode expectations test, including building the necessary tool and generating the golden file.

LANGUAGE: bash
CODE:
gm x64.release generate-bytecode-expectations

LANGUAGE: bash
CODE:
out/x64.release/generate-bytecode-expectations --raw-js testcase.js --output=test/cctest/interpreter/bytecode-expectations/testname.golden

----------------------------------------

TITLE: Creating and Using Handle Scopes in V8 (C++)
DESCRIPTION: An example of how to properly return a local handle from a function using EscapableHandleScope.

LANGUAGE: C++
CODE:
Local<Array> NewPointArray(int x, int y, int z) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();

  v8::EscapableHandleScope handle_scope(isolate);

  v8::Local<v8::Array> array = v8::Array::New(isolate, 3);

  if (array.IsEmpty())
    return v8::Local<v8::Array>();

  array->Set(0, Integer::New(isolate, x));
  array->Set(1, Integer::New(isolate, y));
  array->Set(2, Integer::New(isolate, z));

  return handle_scope.Escape(array);
}

----------------------------------------

TITLE: V8 Command Line Flag Configuration - Bash
DESCRIPTION: Command line flags for configuring stack trace limits in V8 and Chrome

LANGUAGE: bash
CODE:
--stack-trace-limit <value>

LANGUAGE: bash
CODE:
--js-flags='--stack-trace-limit <value>'

----------------------------------------

TITLE: Checking V8 API changes in Git
DESCRIPTION: Shows the Git command to view API changes between V8 versions 7.8 and 7.9 in the v8.h header file.

LANGUAGE: shell
CODE:
git log branch-heads/7.8..branch-heads/7.9 include/v8.h

----------------------------------------

TITLE: Private Class Fields Implementation
DESCRIPTION: Shows implementation using private class fields with # syntax for true privacy.

LANGUAGE: javascript
CODE:
class IncreasingCounter {
  #count = 0;
  get value() {
    console.log('Getting the current value!');
    return this.#count;
  }
  increment() {
    this.#count++;
  }
}

----------------------------------------

TITLE: Compiling and Running C++ in WebAssembly Runtimes
DESCRIPTION: These bash commands demonstrate how to compile C++ to WebAssembly using Emscripten and then run it in different WebAssembly runtimes like wasmer, wasmtime, and wavm.

LANGUAGE: bash
CODE:
$ emcc hello.cpp -O3 -o hello.wasm
$ wasmer run hello.wasm
hello, world!
$ wasmtime hello.wasm
hello, world!
$ wavm run hello.wasm
hello, world!

----------------------------------------

TITLE: Function.prototype.toString Enhancement Example
DESCRIPTION: Demonstrates the updated Function.prototype.toString() behavior that now preserves whitespace and comments in function definitions.

LANGUAGE: javascript
CODE:
// Note the comment between the `function` keyword
// and the function name, as well as the space following
// the function name.
function /* a comment */ foo () {}

// Previously:
foo.toString();
// → 'function foo() {}'
//             ^ no comment
//                ^ no space

// Now:
foo.toString();
// → 'function /* comment */ foo () {}'

----------------------------------------

TITLE: Configuring Chromium for CPU Profiling
DESCRIPTION: Command to launch Chromium with necessary flags for CPU profiling. Disables sandbox, uses fresh profile, enables incognito mode, and configures V8 profiling flags.

LANGUAGE: bash
CODE:
./Chromium --no-sandbox --user-data-dir=`mktemp -d` --incognito --js-flags='--prof'

----------------------------------------

TITLE: Retrieving Language Names in Traditional Chinese with Intl.DisplayNames
DESCRIPTION: This example shows how to get language names in Traditional Chinese using Unicode's language identifier grammar with the Intl.DisplayNames API.

LANGUAGE: javascript
CODE:
const languageNames = new Intl.DisplayNames(['zh-Hant'], { type: 'language' });
languageNames.of('fr');
// → '法文'
languageNames.of('zh');
// → '中文'
languageNames.of('de');
// → '德文'

----------------------------------------

TITLE: Enabling Untrusted Code Mitigations in V8 JavaScript Engine
DESCRIPTION: This snippet demonstrates how to enable the untrusted code mitigations flag in V8. The flag helps protect against speculative side-channel attacks by implementing address masking and index masking in JIT-compiled code.

LANGUAGE: javascript
CODE:
--untrusted-code-mitigations

----------------------------------------

TITLE: Starting Chrome with Clean User Profile for Tracing
DESCRIPTION: This bash command starts a new Chrome browser session with a clean user profile and extensions disabled, which is recommended for accurate tracing of WebAssembly code caching events.

LANGUAGE: bash
CODE:
google-chrome --user-data-dir="$(mktemp -d)" --disable-extensions

----------------------------------------

TITLE: Improved case-insensitive matching with RegExp `v` flag
DESCRIPTION: Illustrates how the `v` flag provides more consistent behavior for case-insensitive matching compared to the `u` flag.

LANGUAGE: javascript
CODE:
const re1 = /\p{Lowercase_Letter}/giv;
const re2 = /[^\P{Lowercase_Letter}]/giv;

const string = 'aAbBcC4#';

string.replaceAll(re1, 'X');
// → 'XXXXXX4#'

string.replaceAll(re2, 'X');
// → 'XXXXXX4#'

----------------------------------------

TITLE: Generating V8 build files for a specific bot configuration
DESCRIPTION: This command generates build files for V8 based on a specific bot configuration from the client.v8 waterfall.

LANGUAGE: bash
CODE:
v8gen -b 'V8 Linux64 - debug builder' -m client.v8 foo

----------------------------------------

TITLE: Async Generator Fibonacci Implementation
DESCRIPTION: Example of async generators and iteration using a Fibonacci sequence implementation.

LANGUAGE: javascript
CODE:
async function* fibonacciSequence() {
  for (let a = 0, b = 1;;) {
    yield a;
    const c = a + b;
    a = b;
    b = c;
  }
}

async function fibonacci(id, n) {
  for await (const value of fibonacciSequence()) {
    if (n-- === 0) return value;
  }
}

----------------------------------------

TITLE: Using RegExp Unicode Flag with Single Character Matcher in JavaScript
DESCRIPTION: This snippet demonstrates how the RegExp Unicode flag 'u' affects the behavior of the single character matcher (.) in regular expressions. It shows improved matching of Unicode symbols beyond the Basic Multilingual Plane.

LANGUAGE: javascript
CODE:
const string = 'the 🅛 train';

/the\s.\strain/.test(string);
// false

/the\s.\strain/u.test(string);
// true

----------------------------------------

TITLE: Configuring Universal User-Agent Access in robots.txt
DESCRIPTION: This snippet sets the User-agent directive to allow access for all user agents. It's a common configuration in robots.txt files to specify crawling permissions for web robots.

LANGUAGE: plaintext
CODE:
User-agent: *

----------------------------------------

TITLE: Implementing Intl.DisplayNames API in JavaScript
DESCRIPTION: Demonstrates the usage of Intl.DisplayNames API for displaying translated names of languages, regions, scripts, and currencies. The API simplifies the process of handling translations by delegating the translation data maintenance to the runtime.

LANGUAGE: javascript
CODE:
const zhLanguageNames = new Intl.DisplayNames(['zh-Hant'], { type: 'language' });
const enRegionNames = new Intl.DisplayNames(['en'], { type: 'region' });
const itScriptNames = new Intl.DisplayNames(['it'], { type: 'script' });
const deCurrencyNames = new Intl.DisplayNames(['de'], {type: 'currency'});

zhLanguageNames.of('fr');
// → '法文'
enRegionNames.of('US');
// → 'United States'
itScriptNames.of('Latn');
// → 'latino'
deCurrencyNames.of('JPY');
// → 'Japanischer Yen'

----------------------------------------

TITLE: Implementing a Polyfill for the 'at' Method in JavaScript
DESCRIPTION: This code snippet provides a polyfill implementation of the 'at' method for Arrays, TypedArrays, and Strings in JavaScript. It handles both positive and negative indices, converts the input to an integer, and returns undefined for out-of-bounds access.

LANGUAGE: javascript
CODE:
function at(n) {
  // Convert the argument to an integer
  n = Math.trunc(n) || 0;
  // Allow negative indexing from the end
  if (n < 0) n += this.length;
  // Out-of-bounds access returns undefined
  if (n < 0 || n >= this.length) return undefined;
  // Otherwise, this is just normal property access
  return this[n];
}

----------------------------------------

TITLE: Various Numeric Literal Examples With Separators
DESCRIPTION: Comprehensive examples showing numeric separator usage in different number formats including decimal, binary, hexadecimal, and BigInt literals.

LANGUAGE: javascript
CODE:
// A decimal integer literal with its digits grouped per thousand:
1_000_000_000_000
// A decimal literal with its digits grouped per thousand:
1_000_000.220_720
// A binary integer literal with its bits grouped per octet:
0b01010110_00111000
// A binary integer literal with its bits grouped per nibble:
0b0101_0110_0011_1000
// A hexadecimal integer literal with its digits grouped by byte:
0x40_76_38_6A_73
// A BigInt literal with its digits grouped per thousand:
4_642_473_943_484_686_707n

----------------------------------------

TITLE: Private Fields in Subclasses
DESCRIPTION: Demonstrates how private fields are inherited in subclass instances as own-properties.

LANGUAGE: javascript
CODE:
class SubA extends A {};
A.test(new SubA()); // true

----------------------------------------

TITLE: Checking Out V8 Version 8.4 Using Git
DESCRIPTION: This bash command demonstrates how to check out V8 version 8.4 for experimentation using git.

LANGUAGE: bash
CODE:
git checkout -b 8.4 -t branch-heads/8.4

----------------------------------------

TITLE: Setting CPU Frequency Governor in Linux
DESCRIPTION: Command to set CPU frequency scaling governor to performance mode using the cpu.sh tool

LANGUAGE: bash
CODE:
sudo tools/cpu.sh fast

----------------------------------------

TITLE: Transpiled Array Destructuring (ES5)
DESCRIPTION: Babel-transpiled ES5 version of array destructuring, showing the complexity added by transpilation. V8's optimizations aim to make the ES2015+ version perform comparably to this.

LANGUAGE: javascript
CODE:
'use strict';

var _slicedToArray = function() {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i['return']) _i['return']();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  return function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError('Invalid attempt to destructure non-iterable instance');
    }
  };
}();

function fn() {
  var _data = data,
      _data2 = _slicedToArray(_data, 1),
      c = _data2[0];

  return c;
}

----------------------------------------

TITLE: Inserting Debug Break in TurboFan
DESCRIPTION: C++ code showing how to insert a debug breakpoint in TurboFan's code generator.

LANGUAGE: cpp
CODE:
void CodeGenerator::AssembleCode() {
  // ...

  // Check if we're optimizing, then look-up the name of the current function and
  // insert a breakpoint.
  if (info->IsOptimizing()) {
    AllowHandleDereference allow_handle_dereference;
    if (info->shared_info()->PassesFilter("add")) {
      tasm()->DebugBreak();
    }
  }

  // ...
}

----------------------------------------

TITLE: Accessing Symbol description in JavaScript
DESCRIPTION: Demonstrates the new description property added to Symbol.prototype, providing a more ergonomic way to access a Symbol's description.

LANGUAGE: javascript
CODE:
Symbol.prototype.description

----------------------------------------

TITLE: Compiling V8 for Arm Simulator
DESCRIPTION: Commands to compile V8 with Arm simulator support for both 32-bit and 64-bit architectures.

LANGUAGE: bash
CODE:
gm arm64.debug # For a 64-bit build or...
gm arm.debug   # ... for a 32-bit build.

----------------------------------------

TITLE: Basic Object Property Check in JavaScript
DESCRIPTION: Demonstrates the usage of Object.prototype.hasOwnProperty method to check for object properties.

LANGUAGE: javascript
CODE:
const o = { foo: 1 };
o.hasOwnProperty('foo'); // true
o.hasOwnProperty('bar'); // false

----------------------------------------

TITLE: Processing V8 Profiler Log (Linux)
DESCRIPTION: Command to process the V8 profiler log file on Linux using the tick processor script.

LANGUAGE: bash
CODE:
tools/linux-tick-processor v8.log

----------------------------------------

TITLE: Fetching V8 Build Dependencies
DESCRIPTION: Downloads all necessary build dependencies for V8 using gclient sync command. For Google employees, includes additional authentication step using gsutil.py for Google Storage access.

LANGUAGE: bash
CODE:
gclient sync

LANGUAGE: bash
CODE:
gsutil.py config

----------------------------------------

TITLE: Loading and Running Standalone WebAssembly in Node.js
DESCRIPTION: This JavaScript code demonstrates how to load and instantiate a standalone WebAssembly module in Node.js, then call an exported function from it.

LANGUAGE: javascript
CODE:
// load-add.js
const binary = require('fs').readFileSync('add.wasm');

WebAssembly.instantiate(binary).then(({ instance }) => {
  console.log(instance.exports.add(40, 2));
});

----------------------------------------

TITLE: Chrome Memory Tracking Command
DESCRIPTION: Command to enable memory tracking in Chrome Canary for integration with Chrome's tracing infrastructure

LANGUAGE: bash
CODE:
--track-gc-object-stats

----------------------------------------

TITLE: Using Dynamic Module Import in JavaScript
DESCRIPTION: Demonstrates the new import() syntax for dynamically loading modules at runtime based on conditions. This is a stage 3 feature introduced in V8 v6.3.

LANGUAGE: javascript
CODE:
import(moduleSpecifier)

----------------------------------------

TITLE: Unlinking Deoptimized Code in V8 CompileLazyDeoptimizedCode Builtin
DESCRIPTION: This C++ code demonstrates how the CompileLazyDeoptimizedCode builtin in V8 unlinks deoptimized code from a JavaScript function and sets it to the interpreter trampoline.

LANGUAGE: cpp
CODE:
// Field read to obtain the SharedFunctionInfo.
__ movq(rcx, FieldOperand(rdi, JSFunction::kSharedFunctionInfoOffset));

// Field read to obtain the code object.
__ movq(rcx, FieldOperand(rcx, SharedFunctionInfo::kCodeOffset));

// Update the code field of the function with the trampoline.
__ movq(FieldOperand(rdi, JSFunction::kCodeOffset), rcx);
// Write barrier to protect the field.
__ RecordWriteField(rdi, JSFunction::kCodeOffset, rcx, r15,
                    kDontSaveFPRegs, OMIT_REMEMBERED_SET, OMIT_SMI_CHECK);

----------------------------------------

TITLE: V8 EnumCache Key Retrieval in C++
DESCRIPTION: C++ code showing how V8 retrieves enumerable keys from the enum cache, including handling of indexed properties.

LANGUAGE: cpp
CODE:
FixedArray* JSObject::GetCachedEnumKeysWithElements() {
  FixedArray* keys = object->map()->GetCachedEnumKeys();
  return object->GetElementsAccessor()->PrependElementIndices(object, keys);
}

FixedArray* Map::GetCachedEnumKeys() {
  // Get the enumerable property keys from a possibly shared enum cache
  FixedArray* keys_cache = descriptors()->enum_cache()->keys_cache();
  if (enum_length() == keys_cache->length()) return keys_cache;
  return keys_cache->CopyUpTo(enum_length());
}

FixedArray* FastElementsAccessor::PrependElementIndices(
      JSObject* object, FixedArray* property_keys) {
  Assert(object->HasFastElements());
  FixedArray* elements = object->elements();
  int nof_indices = CountElements(elements)
  FixedArray* result = FixedArray::Allocate(property_keys->length() + nof_indices);
  int insertion_index = 0;
  for (int i = 0; i < elements->length(); i++) {
    if (!HasElement(elements, i)) continue;
    result[insertion_index++] = String::FromInt(i);
  }
  // Insert property keys at the end.
  property_keys->CopyTo(result, nof_indices - 1);
  return result;
}

----------------------------------------

TITLE: Demonstrating WebAssembly i64 Type Error in JavaScript
DESCRIPTION: This code snippet shows the error message thrown when trying to call a WebAssembly function that returns an i64 type from JavaScript.

LANGUAGE: javascript
CODE:
TypeError: Wasm function signature contains illegal type

----------------------------------------

TITLE: Configuring V8 build to use system Clang on Arm64 Linux
DESCRIPTION: Sets GN arguments to use the system's Clang installation for building V8 on Arm64 Linux.

LANGUAGE: bash
CODE:
clang_base_path="/usr"
clang_use_chrome_plugins=false

----------------------------------------

TITLE: Nullish Coalescing Examples in JavaScript
DESCRIPTION: This snippet shows various examples of using the nullish coalescing operator with different types of values, demonstrating how it handles falsy values that are not nullish.

LANGUAGE: javascript
CODE:
false ?? true;   // => false
0 ?? 1;          // => 0
'' ?? 'default'; // => ''

null ?? [];      // => []
undefined ?? []; // => []

----------------------------------------

TITLE: Modified add42 function with argument modification
DESCRIPTION: Modified version of add42 function that modifies its argument, used to explain stale data issues with the arguments adaptor frame.

LANGUAGE: JavaScript
CODE:
function add42(x) {
  x += 42;
  return x;
}

----------------------------------------

TITLE: Demonstrating Array.prototype.flat Usage in JavaScript
DESCRIPTION: Shows how to use the new Array.prototype.flat method to flatten nested arrays either one level deep or recursively to any depth

LANGUAGE: javascript
CODE:
// Flatten one level:
const array = [1, [2, [3]]];
array.flat();
// → [1, 2, [3]]

// Flatten recursively until the array contains no more nested arrays:
array.flat(Infinity);
// → [1, 2, 3]

----------------------------------------

TITLE: Stack Trace Limit Configuration - JavaScript
DESCRIPTION: Setting to control the maximum number of stack frames collected

LANGUAGE: javascript
CODE:
Error.stackTraceLimit

----------------------------------------

TITLE: Authenticating with Build Bot CLI
DESCRIPTION: Command to authenticate with a google.com account before running flake bisects

LANGUAGE: bash
CODE:
bb auth-login

----------------------------------------

TITLE: ECMAScript HasOwnProperty Abstract Operation
DESCRIPTION: Specification algorithm detailing the HasOwnProperty abstract operation implementation.

LANGUAGE: text
CODE:
HasOwnProperty(O, P)

1. Assert: Type(O) is Object.
2. Assert: IsPropertyKey(P) is true.
3. Let desc be ? O.[[GetOwnProperty]](P).
4. If desc is undefined, return false.
5. Return true.

----------------------------------------

TITLE: Embedded Builtins Code Generation
DESCRIPTION: Example of the generated embedded.cc file containing builtin metadata and machine code as byte directives.

LANGUAGE: cpp
CODE:
V8_EMBEDDED_TEXT_HEADER(v8_Default_embedded_blob_)
__asm__(".byte 0x65,0x6d,0xcd,0x37,0xa8,0x1b,0x25,0x7e\n"
[snip metadata]

__asm__(V8_ASM_LABEL("Builtins_RecordWrite"));
__asm__(".byte 0x55,0x48,0x89,0xe5,0x6a,0x18,0x48,0x83\n"
[snip builtins code]

----------------------------------------

TITLE: Using OR Operator for Default Values in JavaScript
DESCRIPTION: This snippet demonstrates a common bug when using the OR operator (||) for default values. It fails to handle falsy values correctly, always defaulting to true even when 'enabled' is explicitly set to false.

LANGUAGE: javascript
CODE:
function Component(props) {
  const enable = props.enabled || true;
  // …
}

----------------------------------------

TITLE: Defining UpdateExpression Grammar in ECMAScript
DESCRIPTION: This grammar snippet shows the production rules for UpdateExpression, demonstrating how finite lookahead can be used to determine the correct production.

LANGUAGE: grammar
CODE:
UpdateExpression :
  LeftHandSideExpression
  LeftHandSideExpression ++
  LeftHandSideExpression --
  ++ UnaryExpression
  -- UnaryExpression

----------------------------------------

TITLE: Demonstrating GC Object Allocation and Field Access in Pseudocode
DESCRIPTION: This pseudocode example shows allocation of GC objects and field access, demonstrating how higher-level representations in WasmGC enable more aggressive optimizations compared to WasmMVP.

LANGUAGE: csharp
CODE:
func foo() {
  let x = allocate<T>(); // Allocate a GC object.
  x.val = 10;            // Set a field to 10.
  let y = allocate<T>(); // Allocate another object.
  y.val = x.val;         // This must be 10.
  return y.val;          // This must also be 10.
}

----------------------------------------

TITLE: WebAssembly Text Format (WAT) Dot Product
DESCRIPTION: The WebAssembly text format (.wat) representation of the dot product function after compilation, showing low-level memory operations and function structure.

LANGUAGE: wasm
CODE:
(func $dot (type 0) (param i32 i32) (result f32)
  (f32.add
    (f32.add
      (f32.mul
        (f32.load
          (local.get 0))
        (f32.load
          (local.get 1)))
      (f32.mul
        (f32.load offset=4
          (local.get 0))
        (f32.load offset=4
          (local.get 1))))
    (f32.mul
      (f32.load offset=8
        (local.get 0))
      (f32.load offset=8
        (local.get 1)))))

----------------------------------------

TITLE: Retrieving Script Names in English with Intl.DisplayNames
DESCRIPTION: This example shows how to get script names in English using ISO-15924 4-letter script codes with the Intl.DisplayNames API.

LANGUAGE: javascript
CODE:
const scriptNames = new Intl.DisplayNames(['en'], { type: 'script' });
scriptNames.of('Latn');
// → 'Latin'
scriptNames.of('Arab');
// → 'Arabic'
scriptNames.of('Kana');
// → 'Katakana'

----------------------------------------

TITLE: Basic JSON Module Example
DESCRIPTION: Demonstrates a simple JSON file that will be imported as a module.

LANGUAGE: json
CODE:
{ "answer": 42 }

----------------------------------------

TITLE: Traditional RegExp.exec Loop Implementation
DESCRIPTION: Shows the traditional way of getting full match information using RegExp.exec in a while loop, which is more verbose but provides additional match details.

LANGUAGE: javascript
CODE:
const string = 'Magic hex numbers: DEADBEEF CAFE';
const regex = /\b\p{ASCII_Hex_Digit}+\b/gu;
let match;
while (match = regex.exec(string)) {
  console.log(match);
}

// Output:
//
// [ 'DEADBEEF', index: 19, input: 'Magic hex numbers: DEADBEEF CAFE' ]
// [ 'CAFE',     index: 28, input: 'Magic hex numbers: DEADBEEF CAFE' ]

----------------------------------------

TITLE: Running V8 Merge Script
DESCRIPTION: Command for using the automated merge script to merge a specific revision to a branch, demonstrating the merge_to_branch_gerrit.py usage.

LANGUAGE: shell
CODE:
https://source.chromium.org/chromium/chromium/src/+/main:v8/tools/release/merge_to_branch_gerrit.py --branch 12.3 -r af3cf11

----------------------------------------

TITLE: Displaying Stack Trace without GDB JIT Compilation Interface in V8
DESCRIPTION: This snippet shows a typical backtrace in GDB when GDB JIT Compilation Interface is disabled. Frames corresponding to dynamically generated code are marked with '??'.

LANGUAGE: shell
CODE:
#8  0x08281674 in v8::internal::Runtime_SetProperty (args=...) at src/runtime.cc:3758
#9  0xf5cae28e in ?? ()
#10 0xf5cc3a0a in ?? ()
#11 0xf5cc38f4 in ?? ()
#12 0xf5cbef19 in ?? ()
#13 0xf5cb09a2 in ?? ()
#14 0x0809e0a5 in v8::internal::Invoke (construct=false, func=..., receiver=..., argc=0, args=0x0,
    has_pending_exception=0xffffd46f) at src/execution.cc:97

----------------------------------------

TITLE: Processing V8 Profiler Log for Web Applications
DESCRIPTION: Command to process the V8 profiler log file generated from profiling a web application using the tick processor script.

LANGUAGE: bash
CODE:
v8/tools/linux-tick-processor v8.log

----------------------------------------

TITLE: Setting Merge Request Attributes in V8 Tracker
DESCRIPTION: Example showing how to set the Merge-Request attribute with Chrome Milestone and hardware-specific information in the V8 issue tracker.

LANGUAGE: text
CODE:
Merge-Request: 123\nHW: MIPS,LoongArch64

----------------------------------------

TITLE: Triggering Heap Snapshot in Node.js
DESCRIPTION: Shows how to programmatically generate a V8 heap snapshot in Node.js applications using the v8 module.

LANGUAGE: javascript
CODE:
require('v8').writeHeapSnapshot();

----------------------------------------

TITLE: Demonstrating Incorrect Behavior with TypedArrays on Prototype Chain in JavaScript
DESCRIPTION: This code snippet illustrates a scenario where V8 previously had incorrect behavior when TypedArrays were on the prototype chain. It shows how stores to out-of-bounds keys of a TypedArray should be ignored, but were not in previous versions.

LANGUAGE: javascript
CODE:
v = {};
v.__proto__ = new Int32Array(1);
v[2] = 123;
return v[2]; // Should return undefined

----------------------------------------

TITLE: Async Stack Trace Example - JavaScript
DESCRIPTION: Example of async stack traces showing await locations

LANGUAGE: text
CODE:
ReferenceError: FAIL is not defined
    at bar (<anonymous>)
    at async foo (<anonymous>)

----------------------------------------

TITLE: Checking out V8 version 7.9 branch
DESCRIPTION: Demonstrates the Git command to checkout the V8 version 7.9 branch for local experimentation.

LANGUAGE: shell
CODE:
git checkout -b 7.9 -t branch-heads/7.9

----------------------------------------

TITLE: Creating and Transitioning Array Elements Kinds in JavaScript
DESCRIPTION: Demonstrates how creating an array and adding different types of elements changes its elements kind in V8. Shows transitions from PACKED_SMI_ELEMENTS to PACKED_DOUBLE_ELEMENTS to PACKED_ELEMENTS.

LANGUAGE: JavaScript
CODE:
const array = [1, 2, 3];
// elements kind: PACKED_SMI_ELEMENTS
array.push(4.56);
// elements kind: PACKED_DOUBLE_ELEMENTS
array.push('x');
// elements kind: PACKED_ELEMENTS

----------------------------------------

TITLE: Adding I32Add1 to wasm-compiler.cc
DESCRIPTION: Implements the I32Add1 instruction in the TurboFan graph builder in wasm-compiler.cc

LANGUAGE: diff
CODE:
diff --git a/src/compiler/wasm-compiler.cc b/src/compiler/wasm-compiler.cc
index f666bbb7c1..1d93601584 100644
--- a/src/compiler/wasm-compiler.cc
+++ b/src/compiler/wasm-compiler.cc
@@ -713,6 +713,8 @@ Node* WasmGraphBuilder::Unop(wasm::WasmOpcode opcode, Node* input,
   const Operator* op;
   MachineOperatorBuilder* m = mcgraph()->machine();
   switch (opcode) {
+    case wasm::kExprI32Add1:
+      return graph()->NewNode(m->Int32Add1(), input);
     case wasm::kExprI32Eqz:
       op = m->Word32Equal();
       return graph()->NewNode(op, input, mcgraph()->Int32Constant(0));