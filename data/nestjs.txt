TITLE: NestJS Application Bootstrap
DESCRIPTION: Main application bootstrap file that creates and initializes a NestJS application instance using NestFactory. Sets up HTTP listener on specified port with fallback to 3000.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Implementing Basic Authorization Guard in NestJS
DESCRIPTION: Basic implementation of an AuthGuard class that implements CanActivate interface to handle request authorization. The guard validates requests and determines if they should proceed based on authorization logic.

LANGUAGE: typescript
CODE:
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const request = context.switchToHttp().getRequest();
    return validateRequest(request);
  }
}

----------------------------------------

TITLE: Defining Cat Interface in NestJS
DESCRIPTION: Defines the Cat interface with basic properties for name, age, and breed to ensure type safety when working with cat objects.

LANGUAGE: typescript
CODE:
export interface Cat {
  name: string;
  age: number;
  breed: string;
}

----------------------------------------

TITLE: Configuring Auth Service with JWT
DESCRIPTION: Implementation of AuthService with JWT token generation and user authentication logic

LANGUAGE: typescript
CODE:
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService
  ) {}

  async signIn(username: string, pass: string): Promise<{ access_token: string }> {
    const user = await this.usersService.findOne(username);
    if (user?.password !== pass) {
      throw new UnauthorizedException();
    }
    const payload = { sub: user.userId, username: user.username };
    return {
      access_token: await this.jwtService.signAsync(payload),
    };
  }
}

----------------------------------------

TITLE: NestJS Express Platform Integration
DESCRIPTION: Example of creating a NestJS application with explicit Express platform typing for access to Express-specific features.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create<NestExpressApplication>(AppModule);

----------------------------------------

TITLE: Throwing HttpException in NestJS Controller
DESCRIPTION: Demonstrates how to throw a built-in HttpException with a custom message and status code in a NestJS controller method.

LANGUAGE: typescript
CODE:
@Get()
async findAll() {
  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
}

----------------------------------------

TITLE: Injecting a Service into a Controller in NestJS
DESCRIPTION: This code shows how to inject a service (CatsService) into a controller (CatsController) using constructor-based dependency injection in NestJS. The controller uses the injected service to handle HTTP GET requests.

LANGUAGE: typescript
CODE:
import { Controller, Get } from '@nestjs/common';
import { CatsService } from './cats.service';
import { Cat } from './interfaces/cat.interface';

@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @Get()
  async findAll(): Promise<Cat[]> {
    return this.catsService.findAll();
  }
}

----------------------------------------

TITLE: Setting Up Global Validation
DESCRIPTION: Bootstrap code showing how to apply ValidationPipe globally in a NestJS application

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Implementing Auth Guard
DESCRIPTION: Custom authentication guard implementation for protecting routes using JWT verification

LANGUAGE: typescript
CODE:
import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { jwtConstants } from './constants';
import { Request } from 'express';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);
    if (!token) {
      throw new UnauthorizedException();
    }
    try {
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtConstants.secret
      });
      request['user'] = payload;
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}

----------------------------------------

TITLE: Implementing Complete RolesGuard with Metadata in NestJS
DESCRIPTION: Advanced implementation of RolesGuard that uses Reflector to access route metadata and perform role-based authorization. This guard checks user roles against required roles for each route.

LANGUAGE: typescript
CODE:
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Roles } from './roles.decorator';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const roles = this.reflector.get(Roles, context.getHandler());
    if (!roles) {
      return true;
    }
    const request = context.switchToHttp().getRequest();
    const user = request.user;
    return matchRoles(roles, user.roles);
  }
}

----------------------------------------

TITLE: CASL Ability Factory Implementation
DESCRIPTION: Creates a factory class to generate CASL ability instances for user authorization checks.

LANGUAGE: typescript
CODE:
type Subjects = InferSubjects<typeof Article | typeof User> | 'all';

export type AppAbility = Ability<[Action, Subjects]>;

@Injectable()
export class CaslAbilityFactory {
  createForUser(user: User) {
    const { can, cannot, build } = new AbilityBuilder<
      Ability<[Action, Subjects]>
    >(Ability as AbilityClass<AppAbility>);

    if (user.isAdmin) {
      can(Action.Manage, 'all');
    } else {
      can(Action.Read, 'all');
    }

    can(Action.Update, Article, { authorId: user.id });
    cannot(Action.Delete, Article, { isPublished: true });

    return build({
      detectSubjectType: (item) =>
        item.constructor as ExtractSubjectType<Subjects>,
    });
  }
}

----------------------------------------

TITLE: Creating a Global Module in NestJS
DESCRIPTION: Shows how to create a global module using the @Global() decorator. Global modules provide providers that are available throughout the application without needing to import the module.

LANGUAGE: typescript
CODE:
import { Module, Global } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Global()
@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService],
})
export class CatsModule {}

----------------------------------------

TITLE: Creating and running a new NestJS project
DESCRIPTION: Series of commands to create a new NestJS project, navigate to its directory, and start the development server.

LANGUAGE: bash
CODE:
$ nest new my-nest-project
$ cd my-nest-project
$ npm run start:dev

----------------------------------------

TITLE: Full Resource Controller Example in NestJS
DESCRIPTION: A comprehensive example showing a controller with multiple routes for different HTTP methods, including POST, GET, PUT, and DELETE.

LANGUAGE: typescript
CODE:
import { Controller, Get, Query, Post, Body, Put, Param, Delete } from '@nestjs/common';
import { CreateCatDto, UpdateCatDto, ListAllEntities } from './dto';

@Controller('cats')
export class CatsController {
  @Post()
  create(@Body() createCatDto: CreateCatDto) {
    return 'This action adds a new cat';
  }

  @Get()
  findAll(@Query() query: ListAllEntities) {
    return `This action returns all cats (limit: ${query.limit} items)`;
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return `This action returns a #${id} cat`;
  }

  @Put(':id')
  update(@Param('id') id: string, @Body() updateCatDto: UpdateCatDto) {
    return `This action updates a #${id} cat`;
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return `This action removes a #${id} cat`;
  }
}

----------------------------------------

TITLE: Basic Parameter Validation with ParseIntPipe in NestJS
DESCRIPTION: Example of binding ParseIntPipe to a route parameter to ensure numeric input validation.

LANGUAGE: typescript
CODE:
@Get(':id')
async findOne(@Param('id', ParseIntPipe) id: number) {
  return this.catsService.findOne(id);
}

----------------------------------------

TITLE: Creating Role-Based Guard in NestJS
DESCRIPTION: Implementation of a RolesGuard that handles role-based access control. This basic template shows the structure of a role-based guard that can be extended with specific authorization logic.

LANGUAGE: typescript
CODE:
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class RolesGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    return true;
  }
}

----------------------------------------

TITLE: Implementing Controller with Dependency Injection in NestJS
DESCRIPTION: Creates a CatsController that uses dependency injection to receive the CatsService. Implements POST and GET endpoints for creating and retrieving cats.

LANGUAGE: typescript
CODE:
import { Controller, Get, Post, Body } from '@nestjs/common';
import { CreateCatDto } from './dto/create-cat.dto';
import { CatsService } from './cats.service';
import { Cat } from './interfaces/cat.interface';

@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @Post()
  async create(@Body() createCatDto: CreateCatDto) {
    this.catsService.create(createCatDto);
  }

  @Get()
  async findAll(): Promise<Cat[]> {
    return this.catsService.findAll();
  }
}

----------------------------------------

TITLE: Defining Role Enum in TypeScript
DESCRIPTION: Creates a basic Role enumeration to define user roles in the system.

LANGUAGE: typescript
CODE:
export enum Role {
  User = 'user',
  Admin = 'admin',
}

----------------------------------------

TITLE: Defining a Feature Module in NestJS
DESCRIPTION: Creates a CatsModule to group related components. Demonstrates how to use the @Module decorator to define controllers and providers for a specific feature.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {}

----------------------------------------

TITLE: Implementing Users Service
DESCRIPTION: Implementation of a basic UsersService with mock user data and user lookup functionality

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';

export type User = any;

@Injectable()
export class UsersService {
  private readonly users = [
    {
      userId: 1,
      username: 'john',
      password: 'changeme',
    },
    {
      userId: 2,
      username: 'maria',
      password: 'guess',
    },
  ];

  async findOne(username: string): Promise<User | undefined> {
    return this.users.find(user => user.username === username);
  }
}

----------------------------------------

TITLE: Unit Testing NestJS Controller and Service
DESCRIPTION: Example of unit testing a CatsController and CatsService using Jest in NestJS. It demonstrates how to create a test suite, mock dependencies, and test controller methods.

LANGUAGE: typescript
CODE:
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

describe('CatsController', () => {
  let catsController: CatsController;
  let catsService: CatsService;

  beforeEach(() => {
    catsService = new CatsService();
    catsController = new CatsController(catsService);
  });

  describe('findAll', () => {
    it('should return an array of cats', async () => {
      const result = ['test'];
      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);

      expect(await catsController.findAll()).toBe(result);
    });
  });
});

----------------------------------------

TITLE: End-to-End Testing in NestJS
DESCRIPTION: Example of end-to-end testing in NestJS using Supertest. It demonstrates how to create a test module, override providers, create a NestJS application instance, and test HTTP endpoints.

LANGUAGE: typescript
CODE:
import * as request from 'supertest';
import { Test } from '@nestjs/testing';
import { CatsModule } from '../../src/cats/cats.module';
import { CatsService } from '../../src/cats/cats.service';
import { INestApplication } from '@nestjs/common';

describe('Cats', () => {
  let app: INestApplication;
  let catsService = { findAll: () => ['test'] };

  beforeAll(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    })
      .overrideProvider(CatsService)
      .useValue(catsService)
      .compile();

    app = moduleRef.createNestApplication();
    await app.init();
  });

  it(`/GET cats`, () => {
    return request(app.getHttpServer())
      .get('/cats')
      .expect(200)
      .expect({
        data: catsService.findAll(),
      });
  });

  afterAll(async () => {
    await app.close();
  });
});

----------------------------------------

TITLE: Implementing RolesGuard
DESCRIPTION: Guard class that enforces role-based access control by comparing user roles against required roles.

LANGUAGE: typescript
CODE:
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (!requiredRoles) {
      return true;
    }
    const { user } = context.switchToHttp().getRequest();
    return requiredRoles.some((role) => user.roles?.includes(role));
  }
}

----------------------------------------

TITLE: Dependency Injection in NestJS Modules
DESCRIPTION: Illustrates how to inject providers into a module class. This can be useful for module-level configuration or initialization.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {
  constructor(private catsService: CatsService) {}
}

----------------------------------------

TITLE: Docker Configuration for NestJS
DESCRIPTION: Dockerfile configuration for containerizing a NestJS application, including build and runtime steps.

LANGUAGE: bash
CODE:
# Use the official Node.js image as the base image
FROM node:20

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install the application dependencies
RUN npm install

# Copy the rest of the application files
COPY . .

# Build the NestJS application
RUN npm run build

# Expose the application port
EXPOSE 3000

# Command to run the application
CMD ["node", "dist/main"]

----------------------------------------

TITLE: ValidationPipe Interface Definition
DESCRIPTION: TypeScript interface showing the configuration options available for ValidationPipe

LANGUAGE: typescript
CODE:
export interface ValidationPipeOptions extends ValidatorOptions {
  transform?: boolean;
  disableErrorMessages?: boolean;
  exceptionFactory?: (errors: ValidationError[]) => any;
}

----------------------------------------

TITLE: Defining a Basic Controller in NestJS
DESCRIPTION: Shows how to create a simple controller with a GET route using the @Controller and @Get decorators.

LANGUAGE: typescript
CODE:
import { Controller, Get } from '@nestjs/common';

@Controller('cats')
export class CatsController {
  @Get()
  findAll(): string {
    return 'This action returns all cats';
  }
}

----------------------------------------

TITLE: Using TypeORM Repository in NestJS Service
DESCRIPTION: Injects and uses a TypeORM repository in a NestJS service class to perform database operations.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from './user.entity';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
  ) {}

  findAll(): Promise<User[]> {
    return this.usersRepository.find();
  }

  findOne(id: number): Promise<User | null> {
    return this.usersRepository.findOneBy({ id });
  }

  async remove(id: number): Promise<void> {
    await this.usersRepository.delete(id);
  }
}

----------------------------------------

TITLE: Generating Auth Module Components
DESCRIPTION: Commands to generate the authentication module, controller, and service using NestJS CLI

LANGUAGE: bash
CODE:
$ nest g module auth
$ nest g controller auth
$ nest g service auth

----------------------------------------

TITLE: Implementing a Response Mapping Interceptor in NestJS
DESCRIPTION: This example demonstrates how to create an interceptor that transforms the response data. It wraps the response in a 'data' property using RxJS operators.

LANGUAGE: typescript
CODE:
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

export interface Response<T> {
  data: T;
}

@Injectable()
export class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {
  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {
    return next.handle().pipe(map(data => ({ data })));
  }
}

----------------------------------------

TITLE: Hashing a Password with bcrypt in TypeScript
DESCRIPTION: This snippet demonstrates how to hash a password using the bcrypt package in TypeScript. It uses a salt rounds value of 10 for the hashing process.

LANGUAGE: typescript
CODE:
import * as bcrypt from 'bcrypt';

const saltOrRounds = 10;
const password = 'random_password';
const hash = await bcrypt.hash(password, saltOrRounds);

----------------------------------------

TITLE: Setting Up Multiple Simultaneous Servers in NestJS
DESCRIPTION: This snippet demonstrates how to create a NestJS application that listens on multiple ports simultaneously, including both HTTP and HTTPS servers. It uses the ExpressAdapter and native Node.js http and https modules.

LANGUAGE: typescript
CODE:
const httpsOptions = {
  key: fs.readFileSync('./secrets/private-key.pem'),
  cert: fs.readFileSync('./secrets/public-certificate.pem'),
};

const server = express();
const app = await NestFactory.create(AppModule, new ExpressAdapter(server));
await app.init();

const httpServer = http.createServer(server).listen(3000);
const httpsServer = https.createServer(httpsOptions, server).listen(443);

----------------------------------------

TITLE: Creating a WebSocket Gateway in NestJS
DESCRIPTION: Example of creating a basic WebSocket gateway with a custom port and namespace in NestJS.

LANGUAGE: typescript
CODE:
@WebSocketGateway(80, { namespace: 'events' })

----------------------------------------

TITLE: Importing a Feature Module in NestJS Root Module
DESCRIPTION: Shows how to import a feature module (CatsModule) into the root AppModule. This is essential for including the feature module's functionality in the application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsModule } from './cats/cats.module';

@Module({
  imports: [CatsModule],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing User Service with Prisma Client
DESCRIPTION: NestJS service implementation for User model using Prisma Client for database operations.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { User, Prisma } from '@prisma/client';

@Injectable()
export class UsersService {
  constructor(private prisma: PrismaService) {}

  async user(userWhereUniqueInput: Prisma.UserWhereUniqueInput): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: userWhereUniqueInput,
    });
  }

  async users(params: {
    skip?: number;
    take?: number;
    cursor?: Prisma.UserWhereUniqueInput;
    where?: Prisma.UserWhereInput;
    orderBy?: Prisma.UserOrderByWithRelationInput;
  }): Promise<User[]> {
    const { skip, take, cursor, where, orderBy } = params;
    return this.prisma.user.findMany({
      skip,
      take,
      cursor,
      where,
      orderBy,
    });
  }

  async createUser(data: Prisma.UserCreateInput): Promise<User> {
    return this.prisma.user.create({
      data,
    });
  }

  async updateUser(params: {
    where: Prisma.UserWhereUniqueInput;
    data: Prisma.UserUpdateInput;
  }): Promise<User> {
    const { where, data } = params;
    return this.prisma.user.update({
      data,
      where,
    });
  }

  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise<User> {
    return this.prisma.user.delete({
      where,
    });
  }
}

----------------------------------------

TITLE: Implementing AuthService for User Authentication
DESCRIPTION: Create an AuthService to handle user validation and JWT token generation.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService
  ) {}

  async validateUser(username: string, pass: string): Promise<any> {
    const user = await this.usersService.findOne(username);
    if (user && user.password === pass) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }

  async login(user: any) {
    const payload = { username: user.username, sub: user.userId };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }
}

----------------------------------------

TITLE: Binding ValidationPipe to WebSocket Message Handler in NestJS
DESCRIPTION: This snippet demonstrates how to use the ValidationPipe with WebSocket message handlers in NestJS. It shows the usage of @UsePipes decorator to apply a ValidationPipe that throws a WsException for validation errors. The example includes both TypeScript and JavaScript versions of the code.

LANGUAGE: typescript
CODE:
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))
@SubscribeMessage('events')
handleEvent(client: Client, data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}

LANGUAGE: javascript
CODE:
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}

----------------------------------------

TITLE: Creating Prisma Service in NestJS
DESCRIPTION: Implementation of PrismaService to manage Prisma Client instance in NestJS.

LANGUAGE: typescript
CODE:
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}

----------------------------------------

TITLE: Applying Global Middleware in NestJS
DESCRIPTION: This snippet demonstrates how to apply global middleware in a NestJS application. It shows using the use() method of the INestApplication instance to bind the logger middleware to every registered route.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.use(logger);
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Installing NestJS CLI globally with npm
DESCRIPTION: Command to install the NestJS CLI globally using npm. This allows you to use the 'nest' command from any directory.

LANGUAGE: bash
CODE:
$ npm install -g @nestjs/cli

----------------------------------------

TITLE: Creating Composite Auth Decorator in NestJS
DESCRIPTION: Demonstrates how to create a composite @Auth() decorator using applyDecorators. This combines multiple decorators related to authentication into a single, reusable decorator.

LANGUAGE: typescript
CODE:
import { applyDecorators } from '@nestjs/common';

export function Auth(...roles: Role[]) {
  return applyDecorators(
    SetMetadata('roles', roles),
    UseGuards(AuthGuard, RolesGuard),
    ApiBearerAuth(),
    ApiUnauthorizedResponse({ description: 'Unauthorized' }),
  );
}

----------------------------------------

TITLE: Module Registration for Providers in NestJS
DESCRIPTION: Demonstrates how to register providers and controllers in a NestJS module using the @Module decorator.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats/cats.controller';
import { CatsService } from './cats/cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring CSRF Protection Plugin for Fastify
DESCRIPTION: Implementation of @fastify/csrf-protection plugin in Fastify-based NestJS applications. Requires a storage plugin to be initialized before registration.

LANGUAGE: typescript
CODE:
import fastifyCsrf from '@fastify/csrf-protection';
// ...
// somewhere in your initialization file after registering some storage plugin
await app.register(fastifyCsrf);

----------------------------------------

TITLE: Configuring AuthModule with JWT
DESCRIPTION: Set up the AuthModule to include JWT functionality and necessary dependencies.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalStrategy } from './local.strategy';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { jwtConstants } from './constants';

@Module({
  imports: [
    UsersModule,
    PassportModule,
    JwtModule.register({
      secret: jwtConstants.secret,
      signOptions: { expiresIn: '60s' },
    }),
  ],
  providers: [AuthService, LocalStrategy],
  exports: [AuthService],
})
export class AuthModule {}

----------------------------------------

TITLE: Creating POST Route in NestJS Controller
DESCRIPTION: Shows how to define a POST route in a controller and use the @HttpCode decorator to set a custom status code.

LANGUAGE: typescript
CODE:
import { Controller, Get, Post, HttpCode } from '@nestjs/common';

@Controller('cats')
export class CatsController {
  @Post()
  @HttpCode(204)
  create() {
    return 'This action adds a new cat';
  }

  @Get()
  findAll(): string {
    return 'This action returns all cats';
  }
}

----------------------------------------

TITLE: Dynamic ConfigModule Implementation
DESCRIPTION: Creating a dynamic ConfigModule with a register method that returns a DynamicModule object.

LANGUAGE: typescript
CODE:
import { DynamicModule, Module } from '@nestjs/common';
import { ConfigService } from './config.service';

@Module({})
export class ConfigModule {
  static register(): DynamicModule {
    return {
      module: ConfigModule,
      providers: [ConfigService],
      exports: [ConfigService],
    };
  }
}

----------------------------------------

TITLE: Implementing a Logging Interceptor in NestJS
DESCRIPTION: This snippet demonstrates how to create a basic logging interceptor that logs the execution time of a request. It uses the NestInterceptor interface and RxJS operators.

LANGUAGE: typescript
CODE:
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    console.log('Before...');

    const now = Date.now();
    return next
      .handle()
      .pipe(
        tap(() => console.log(`After... ${Date.now() - now}ms`)),
      );
  }
}

----------------------------------------

TITLE: Using Route Parameters in NestJS Controller
DESCRIPTION: Demonstrates how to use route parameters in a controller method with the @Param decorator.

LANGUAGE: typescript
CODE:
@Get(':id')
findOne(@Param('id') id: string): string {
  return `This action returns a #${id} cat`;
}

----------------------------------------

TITLE: Basic ConfigModule Setup
DESCRIPTION: Basic setup of ConfigModule in the root AppModule to enable configuration management.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [ConfigModule.forRoot()],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Request-Scoped Provider in NestJS
DESCRIPTION: Demonstrates how to configure a service with REQUEST scope using the @Injectable decorator.

LANGUAGE: typescript
CODE:
import { Injectable, Scope } from '@nestjs/common';

@Injectable({ scope: Scope.REQUEST })
export class CatsService {}

----------------------------------------

TITLE: Configuring MongooseModule in a feature module
DESCRIPTION: Example of importing MongooseModule in a feature module (CatsModule) and registering a model.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';
import { Cat, CatSchema } from './schemas/cat.schema';

@Module({
  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }])],
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {}

----------------------------------------

TITLE: Implementing a Timeout Interceptor in NestJS
DESCRIPTION: This interceptor demonstrates how to handle request timeouts using RxJS operators. It throws a RequestTimeoutException if the request takes longer than 5 seconds.

LANGUAGE: typescript
CODE:
import { Injectable, NestInterceptor, ExecutionContext, CallHandler, RequestTimeoutException } from '@nestjs/common';
import { Observable, throwError, TimeoutError } from 'rxjs';
import { catchError, timeout } from 'rxjs/operators';

@Injectable()
export class TimeoutInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      timeout(5000),
      catchError(err => {
        if (err instanceof TimeoutError) {
          return throwError(() => new RequestTimeoutException());
        }
        return throwError(() => err);
      }),
    );
  };
};

----------------------------------------

TITLE: Global Pipe Registration in NestJS
DESCRIPTION: Example of registering a validation pipe globally in a NestJS application.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Custom ParseIntPipe Implementation in NestJS
DESCRIPTION: Simple implementation of a transformation pipe that converts string input to integers.

LANGUAGE: typescript
CODE:
import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';

@Injectable()
export class ParseIntPipe implements PipeTransform<string, number> {
  transform(value: string, metadata: ArgumentMetadata): number {
    const val = parseInt(value, 10);
    if (isNaN(val)) {
      throw new BadRequestException('Validation failed');
    }
    return val;
  }
}

----------------------------------------

TITLE: Using ConfigurableModuleBuilder for Dynamic Modules
DESCRIPTION: Example of using ConfigurableModuleBuilder to create a configurable dynamic module.

LANGUAGE: typescript
CODE:
import { ConfigurableModuleBuilder } from '@nestjs/common';
import { ConfigModuleOptions } from './interfaces/config-module-options.interface';

export const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =
  new ConfigurableModuleBuilder<ConfigModuleOptions>().build();

----------------------------------------

TITLE: Initializing Swagger in NestJS Application
DESCRIPTION: Bootstrap code showing how to initialize and configure Swagger in a NestJS application using SwaggerModule and DocumentBuilder.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const config = new DocumentBuilder()
    .setTitle('Cats example')
    .setDescription('The cats API description')
    .setVersion('1.0')
    .addTag('cats')
    .build();
  const documentFactory = () => SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, documentFactory);

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Importing UsersModule in AuthModule
DESCRIPTION: Demonstration of importing UsersModule into AuthModule, making UsersService available for injection.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersModule } from '../users/users.module';

@Module({
  imports: [UsersModule],
  providers: [AuthService],
  exports: [AuthService],
})
export class AuthModule {}

----------------------------------------

TITLE: Retrieving Provider Instances with ModuleRef in NestJS
DESCRIPTION: Shows how to use the ModuleRef.get() method to retrieve an instance of a provider within the current module. This example demonstrates retrieving a Service instance in the onModuleInit lifecycle hook.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService implements OnModuleInit {
  private service: Service;
  constructor(private moduleRef: ModuleRef) {}

  onModuleInit() {
    this.service = this.moduleRef.get(Service);
  }
}

----------------------------------------

TITLE: Parameter Validation Example
DESCRIPTION: Class demonstrating parameter validation using class-validator decorators

LANGUAGE: typescript
CODE:
import { IsNumberString } from 'class-validator';

export class FindOneParams {
  @IsNumberString()
  id: string;
}

----------------------------------------

TITLE: Implementing Class-based Middleware in NestJS
DESCRIPTION: This snippet demonstrates how to create a class-based middleware in NestJS. It shows the implementation of a LoggerMiddleware class that logs a message for each request and then calls the next middleware function.

LANGUAGE: typescript
CODE:
import { Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    console.log('Request...');
    next();
  }
}

----------------------------------------

TITLE: Creating a Basic Validation DTO
DESCRIPTION: Example DTO class with validation decorators for email and password fields

LANGUAGE: typescript
CODE:
import { IsEmail, IsNotEmpty } from 'class-validator';

export class CreateUserDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  password: string;
}

----------------------------------------

TITLE: Implementing a Dynamic Module in NestJS
DESCRIPTION: Demonstrates how to create a dynamic module that can be configured at runtime. This example shows a DatabaseModule with a forRoot method for flexible configuration.

LANGUAGE: typescript
CODE:
import { Module, DynamicModule } from '@nestjs/common';
import { createDatabaseProviders } from './database.providers';
import { Connection } from './connection.provider';

@Module({
  providers: [Connection],
  exports: [Connection],
})
export class DatabaseModule {
  static forRoot(entities = [], options?): DynamicModule {
    const providers = createDatabaseProviders(options, entities);
    return {
      module: DatabaseModule,
      providers: providers,
      exports: providers,
    };
  }
}

----------------------------------------

TITLE: Implementing Tenant Context Strategy in NestJS
DESCRIPTION: Implementation of a context strategy for handling multi-tenant applications with durable providers.

LANGUAGE: typescript
CODE:
import {
  HostComponentInfo,
  ContextId,
  ContextIdFactory,
  ContextIdStrategy,
} from '@nestjs/core';
import { Request } from 'express';

const tenants = new Map<string, ContextId>();

export class AggregateByTenantContextIdStrategy implements ContextIdStrategy {
  attach(contextId: ContextId, request: Request) {
    const tenantId = request.headers['x-tenant-id'] as string;
    let tenantSubTreeId: ContextId;

    if (tenants.has(tenantId)) {
      tenantSubTreeId = tenants.get(tenantId);
    } else {
      tenantSubTreeId = ContextIdFactory.create();
      tenants.set(tenantId, tenantSubTreeId);
    }

    return (info: HostComponentInfo) =>
      info.isTreeDurable ? tenantSubTreeId : contextId;
  }
}

----------------------------------------

TITLE: Accessing Request Object in NestJS Controller
DESCRIPTION: Demonstrates how to inject and use the request object in a controller method using the @Req decorator.

LANGUAGE: typescript
CODE:
import { Controller, Get, Req } from '@nestjs/common';
import { Request } from 'express';

@Controller('cats')
export class CatsController {
  @Get()
  findAll(@Req() request: Request): string {
    return 'This action returns all cats';
  }
}

----------------------------------------

TITLE: NestJS Testing with Test Class
DESCRIPTION: Example of using the @nestjs/testing package's Test class to create a testing module for more robust unit testing in NestJS. It shows how to create a test module, compile it, and retrieve instances for testing.

LANGUAGE: typescript
CODE:
import { Test } from '@nestjs/testing';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

describe('CatsController', () => {
  let catsController: CatsController;
  let catsService: CatsService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
        controllers: [CatsController],
        providers: [CatsService],
      }).compile();

    catsService = moduleRef.get(CatsService);
    catsController = moduleRef.get(CatsController);
  });

  describe('findAll', () => {
    it('should return an array of cats', async () => {
      const result = ['test'];
      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);

      expect(await catsController.findAll()).toBe(result);
    });
  });
});

----------------------------------------

TITLE: Configuring Dynamic ConfigModule
DESCRIPTION: Example of importing and configuring a dynamic ConfigModule in the AppModule.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ConfigModule } from './config/config.module';

@Module({
  imports: [ConfigModule.register({ folder: './config' })],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Protected Routes with Guards
DESCRIPTION: Set up protected routes using LocalAuthGuard and JwtAuthGuard in the AppController.

LANGUAGE: typescript
CODE:
import { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from './auth/jwt-auth.guard';
import { LocalAuthGuard } from './auth/local-auth.guard';
import { AuthService } from './auth/auth.service';

@Controller()
export class AppController {
  constructor(private authService: AuthService) {}

  @UseGuards(LocalAuthGuard)
  @Post('auth/login')
  async login(@Request() req) {
    return this.authService.login(req.user);
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  getProfile(@Request() req) {
    return req.user;
  }
}

----------------------------------------

TITLE: Applying Exception Filter in NestJS Controller
DESCRIPTION: Shows how to apply a custom exception filter to a specific controller method using the @UseFilters decorator.

LANGUAGE: typescript
CODE:
@Post()
@UseFilters(new HttpExceptionFilter())
async create(@Body() createCatDto: CreateCatDto) {
  throw new ForbiddenException();
}

----------------------------------------

TITLE: Catch-All Exception Filter in NestJS
DESCRIPTION: Implements a catch-all exception filter that handles all types of exceptions and provides a consistent response format.

LANGUAGE: typescript
CODE:
import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';

@Catch()
export class CatchEverythingFilter implements ExceptionFilter {
  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}

  catch(exception: unknown, host: ArgumentsHost): void {
    const { httpAdapter } = this.httpAdapterHost;
    const ctx = host.switchToHttp();

    const httpStatus =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const responseBody = {
      statusCode: httpStatus,
      timestamp: new Date().toISOString(),
      path: httpAdapter.getRequestUrl(ctx.getRequest()),
    };

    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);
  }
}

----------------------------------------

TITLE: Configuring ValidationPipe Options
DESCRIPTION: Example showing how to configure ValidationPipe with custom options

LANGUAGE: typescript
CODE:
app.useGlobalPipes(
  new ValidationPipe({
    whitelist: true,
    transform: true,
    disableErrorMessages: true,
  }),
);

----------------------------------------

TITLE: Applying Middleware in NestJS AppModule
DESCRIPTION: This code snippet shows how to apply middleware in a NestJS application module. It demonstrates configuring the LoggerMiddleware for specific routes using the MiddlewareConsumer in the AppModule.

LANGUAGE: typescript
CODE:
import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes('cats');
  }
}

----------------------------------------

TITLE: Configuring GraphQLModule with Playground Disabled
DESCRIPTION: Example of configuring the GraphQLModule with additional options to disable the playground and debug mode.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      playground: false,
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Enabling CORS in NestJS using create() method options
DESCRIPTION: This snippet shows how to enable CORS in a NestJS application using the create() method's options object. It sets the cors property to true for default settings and uses a fallback port of 3000.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule, { cors: true });
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Global Exception Filter in NestJS
DESCRIPTION: Demonstrates how to set up a global exception filter in the main.ts file of a NestJS application.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalFilters(new HttpExceptionFilter());
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Re-exporting Modules in NestJS
DESCRIPTION: Shows how to re-export an imported module, making it available to other modules that import this one. This is useful for creating aggregator modules.

LANGUAGE: typescript
CODE:
@Module({
  imports: [CommonModule],
  exports: [CommonModule],
})
export class CoreModule {}

----------------------------------------

TITLE: Creating Parameterized User Decorator in NestJS
DESCRIPTION: Demonstrates how to create a custom @User() decorator that accepts a parameter to extract specific properties from the user object. This allows for more flexible usage of the decorator.

LANGUAGE: typescript
CODE:
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const User = createParamDecorator(
  (data: string, ctx: ExecutionContext) => {
    const request = ctx.switchToHttp().getRequest();
    const user = request.user;

    return data ? user?.[data] : user;
  },
);

----------------------------------------

TITLE: Global Cache Configuration with Redis
DESCRIPTION: Example of configuring cache module with Redis store and multiple storage options.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CacheModule, CacheStore } from '@nestjs/cache-manager';
import { AppController } from './app.controller';
import { createKeyv } from '@keyv/redis';
import { Keyv } from 'keyv';
import { CacheableMemory } from 'cacheable';

@Module({
  imports: [
    CacheModule.registerAsync({
      useFactory: async () => ({
        stores: [
          new Keyv({
            store: new CacheableMemory({ ttl: 60000, lruSize: 5000 }),
          }),
          createKeyv('redis://localhost:6379'),
        ],
      }),
    }),
  ],
  controllers: [AppController],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Post Service with Prisma Client
DESCRIPTION: NestJS service implementation for Post model using Prisma Client for database operations.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { Post, Prisma } from '@prisma/client';

@Injectable()
export class PostsService {
  constructor(private prisma: PrismaService) {}

  async post(postWhereUniqueInput: Prisma.PostWhereUniqueInput): Promise<Post | null> {
    return this.prisma.post.findUnique({
      where: postWhereUniqueInput,
    });
  }

  async posts(params: {
    skip?: number;
    take?: number;
    cursor?: Prisma.PostWhereUniqueInput;
    where?: Prisma.PostWhereInput;
    orderBy?: Prisma.PostOrderByWithRelationInput;
  }): Promise<Post[]> {
    const { skip, take, cursor, where, orderBy } = params;
    return this.prisma.post.findMany({
      skip,
      take,
      cursor,
      where,
      orderBy,
    });
  }

  async createPost(data: Prisma.PostCreateInput): Promise<Post> {
    return this.prisma.post.create({
      data,
    });
  }

  async updatePost(params: {
    where: Prisma.PostWhereUniqueInput;
    data: Prisma.PostUpdateInput;
  }): Promise<Post> {
    const { data, where } = params;
    return this.prisma.post.update({
      data,
      where,
    });
  }

  async deletePost(where: Prisma.PostWhereUniqueInput): Promise<Post> {
    return this.prisma.post.delete({
      where,
    });
  }
}

----------------------------------------

TITLE: Environment File Example
DESCRIPTION: Sample .env file structure showing environment variable definitions.

LANGUAGE: json
CODE:
DATABASE_USER=test
DATABASE_PASSWORD=test

----------------------------------------

TITLE: Using String-based Token for Custom Provider in NestJS
DESCRIPTION: This snippet demonstrates how to use a string-based token for a custom provider in NestJS. It shows associating a string token 'CONNECTION' with a pre-existing connection object imported from an external file.

LANGUAGE: typescript
CODE:
import { connection } from './connection';

@Module({
  providers: [
    {
      provide: 'CONNECTION',
      useValue: connection,
    },
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Controller Implementation with ClassSerializerInterceptor
DESCRIPTION: Shows how to use ClassSerializerInterceptor in a controller method to automatically handle entity serialization. Returns a UserEntity instance with sensitive data that will be excluded in the response.

LANGUAGE: typescript
CODE:
@UseInterceptors(ClassSerializerInterceptor)
@Get()
findOne(): UserEntity {
  return new UserEntity({
    id: 1,
    firstName: 'John',
    lastName: 'Doe',
    password: 'password',
  });
}

----------------------------------------

TITLE: Complete HTTP Service Implementation with Error Handling
DESCRIPTION: Full example of a service implementation using HttpService with RxJS operators for error handling and response transformation.

LANGUAGE: typescript
CODE:
import { catchError, firstValueFrom } from 'rxjs';

@Injectable()
export class CatsService {
  private readonly logger = new Logger(CatsService.name);
  constructor(private readonly httpService: HttpService) {}

  async findAll(): Promise<Cat[]> {
    const { data } = await firstValueFrom(
      this.httpService.get<Cat[]>('http://localhost:3000/cats').pipe(
        catchError((error: AxiosError) => {
          this.logger.error(error.response.data);
          throw 'An error happened!';
        }),
      ),
    );
    return data;
  }
}

----------------------------------------

TITLE: Using Custom Provider with useValue in NestJS
DESCRIPTION: This example shows how to use a custom provider with the useValue syntax in NestJS. It demonstrates injecting a mock CatsService for testing purposes by associating the CatsService token with a mock implementation.

LANGUAGE: typescript
CODE:
import { CatsService } from './cats.service';

const mockCatsService = {
  /* mock implementation
  ...
  */
};

@Module({
  imports: [CatsModule],
  providers: [
    {
      provide: CatsService,
      useValue: mockCatsService,
    },
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Using Class Provider with useClass in NestJS
DESCRIPTION: This snippet demonstrates the use of useClass syntax for custom providers in NestJS. It shows how to dynamically determine which class to use for a provider based on the current environment.

LANGUAGE: typescript
CODE:
const configServiceProvider = {
  provide: ConfigService,
  useClass:
    process.env.NODE_ENV === 'development'
      ? DevelopmentConfigService
      : ProductionConfigService,
};

@Module({
  providers: [configServiceProvider],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Local Authentication Strategy
DESCRIPTION: Create a LocalStrategy class that extends PassportStrategy to implement username/password authentication.

LANGUAGE: typescript
CODE:
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from './auth.service';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super();
  }

  async validate(username: string, password: string): Promise<any> {
    const user = await this.authService.validateUser(username, password);
    if (!user) {
      throw new UnauthorizedException();
    }
    return user;
  }
}

----------------------------------------

TITLE: Implementing REST API Routes in NestJS Controller
DESCRIPTION: NestJS controller implementation with REST API routes using User and Post services.

LANGUAGE: typescript
CODE:
import { Controller, Get, Param, Post, Body, Put, Delete } from '@nestjs/common';
import { UsersService } from './users.service';
import { PostsService } from './posts.service';
import { User as UserModel, Post as PostModel } from '@prisma/client';

@Controller()
export class AppController {
  constructor(
    private readonly userService: UsersService,
    private readonly postService: PostsService,
  ) {}

  @Get('post/:id')
  async getPostById(@Param('id') id: string): Promise<PostModel> {
    return this.postService.post({ id: Number(id) });
  }

  @Get('feed')
  async getPublishedPosts(): Promise<PostModel[]> {
    return this.postService.posts({
      where: { published: true },
    });
  }

  @Get('filtered-posts/:searchString')
  async getFilteredPosts(
    @Param('searchString') searchString: string,
  ): Promise<PostModel[]> {
    return this.postService.posts({
      where: {
        OR: [
          {
            title: { contains: searchString },
          },
          {
            content: { contains: searchString },
          },
        ],
      },
    });
  }

  @Post('post')
  async createDraft(
    @Body() postData: { title: string; content?: string; authorEmail: string },
  ): Promise<PostModel> {
    const { title, content, authorEmail } = postData;
    return this.postService.createPost({
      title,
      content,
      author: {
        connect: { email: authorEmail },
      },
    });
  }

  @Post('user')
  async signupUser(
    @Body() userData: { name?: string; email: string },
  ): Promise<UserModel> {
    return this.userService.createUser(userData);
  }

  @Put('publish/:id')
  async publishPost(@Param('id') id: string): Promise<PostModel> {
    return this.postService.updatePost({
      where: { id: Number(id) },
      data: { published: true },
    });
  }

  @Delete('post/:id')
  async deletePost(@Param('id') id: string): Promise<PostModel> {
    return this.postService.deletePost({ id: Number(id) });
  }
}

----------------------------------------

TITLE: Installing Passport Dependencies
DESCRIPTION: Install the required Passport packages and type definitions for implementing local authentication strategy.

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/passport passport passport-local
$ npm install --save-dev @types/passport-local

----------------------------------------

TITLE: Registering Providers in a NestJS Module
DESCRIPTION: This snippet demonstrates how to register providers (services and controllers) in a NestJS module using the @Module decorator. It shows the basic structure of a module with controllers and providers arrays.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats/cats.controller';
import { CatsService } from './cats/cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class AppModule {}

----------------------------------------

TITLE: Creating Custom Paginated Response Decorator in NestJS
DESCRIPTION: Shows how to create a custom decorator for PaginatedDto responses in NestJS OpenAPI, making it reusable across the application.

LANGUAGE: typescript
CODE:
export const ApiPaginatedResponse = <TModel extends Type<any>>(
  model: TModel,
) => {
  return applyDecorators(
    ApiExtraModels(PaginatedDto, model),
    ApiOkResponse({
      schema: {
        allOf: [
          { $ref: getSchemaPath(PaginatedDto) },
          {
            properties: {
              results: {
                type: 'array',
                items: { $ref: getSchemaPath(model) },
              },
            },
          },
        ],
      },
    }),
  );
};

----------------------------------------

TITLE: YAML Configuration Example
DESCRIPTION: Sample YAML configuration file structure and its loader implementation.

LANGUAGE: yaml
CODE:
http:
  host: 'localhost'
  port: 8080

db:
  postgres:
    url: 'localhost'
    port: 5432
    database: 'yaml-db'

  sqlite:
    database: 'sqlite.db'

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import * as yaml from 'js-yaml';
import { join } from 'path';

const YAML_CONFIG_FILENAME = 'config.yaml';

export default () => {
  return yaml.load(
    readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),
  ) as Record<string, any>;
};

----------------------------------------

TITLE: Auto-caching Controller Implementation
DESCRIPTION: Example of using CacheInterceptor to automatically cache controller responses.

LANGUAGE: typescript
CODE:
@Controller()
@UseInterceptors(CacheInterceptor)
export class AppController {
  @Get()
  findAll(): string[] {
    return [];
  }
}

----------------------------------------

TITLE: CASL Integration Setup
DESCRIPTION: Installation and basic setup of CASL authorization library in NestJS project.

LANGUAGE: bash
CODE:
$ npm i @casl/ability

----------------------------------------

TITLE: Applying Middleware to Specific Request Methods in NestJS
DESCRIPTION: This snippet demonstrates how to apply middleware to specific HTTP request methods in NestJS. It shows configuring the LoggerMiddleware for GET requests to the 'cats' route using the RequestMethod enum.

LANGUAGE: typescript
CODE:
import { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes({ path: 'cats', method: RequestMethod.GET });
  }
}

----------------------------------------

TITLE: Defining Mongoose Schema using NestJS decorators
DESCRIPTION: Example of creating a Mongoose schema for a Cat model using NestJS decorators.

LANGUAGE: typescript
CODE:
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';

export type CatDocument = HydratedDocument<Cat>;

@Schema()
export class Cat {
  @Prop()
  name: string;

  @Prop()
  age: number;

  @Prop()
  breed: string;
}

export const CatSchema = SchemaFactory.createForClass(Cat);

----------------------------------------

TITLE: Configuring GraphQLModule for Code-First Approach
DESCRIPTION: Setting up the GraphQLModule for a code-first approach with automatic schema generation.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
}),

----------------------------------------

TITLE: Using oneOf, anyOf, allOf in Swagger for NestJS
DESCRIPTION: Shows how to use oneOf, anyOf, and allOf keywords to combine schemas in Swagger documentation for NestJS, including handling polymorphic arrays.

LANGUAGE: typescript
CODE:
@ApiProperty({
  oneOf: [
    { $ref: getSchemaPath(Cat) },
    { $ref: getSchemaPath(Dog) },
  ],
})
pet: Cat | Dog;

type Pet = Cat | Dog;

@ApiProperty({
  type: 'array',
  items: {
    oneOf: [
      { $ref: getSchemaPath(Cat) },
      { $ref: getSchemaPath(Dog) },
    ],
  },
})
pets: Pet[];

----------------------------------------

TITLE: Defining TypeORM Entity in NestJS
DESCRIPTION: Defines a TypeORM entity class representing a database table using decorators.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ default: true })
  isActive: boolean;
}

----------------------------------------

TITLE: Custom Configuration Factory
DESCRIPTION: Example of a custom configuration factory function that returns a typed configuration object.

LANGUAGE: typescript
CODE:
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  database: {
    host: process.env.DATABASE_HOST,
    port: parseInt(process.env.DATABASE_PORT, 10) || 5432
  }
});

----------------------------------------

TITLE: Configuring GraphQLModule with Apollo Driver in NestJS
DESCRIPTION: TypeScript code to import and configure the GraphQLModule using the Apollo driver in a NestJS application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Redis-based Socket.IO Adapter in NestJS Application
DESCRIPTION: TypeScript code snippet demonstrating how to create and configure a RedisIoAdapter instance in a NestJS application. This setup enables the use of Redis for WebSocket communication.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
const redisIoAdapter = new RedisIoAdapter(app);
await redisIoAdapter.connectToRedis();

app.useWebSocketAdapter(redisIoAdapter);

----------------------------------------

TITLE: Implementing Custom Logger Service
DESCRIPTION: Shows how to create a custom logger service implementing the LoggerService interface with all required methods.

LANGUAGE: typescript
CODE:
import { LoggerService, Injectable } from '@nestjs/common';

@Injectable()
export class MyLogger implements LoggerService {
  log(message: any, ...optionalParams: any[]) {}
  fatal(message: any, ...optionalParams: any[]) {}
  error(message: any, ...optionalParams: any[]) {}
  warn(message: any, ...optionalParams: any[]) {}
  debug?(message: any, ...optionalParams: any[]) {}
  verbose?(message: any, ...optionalParams: any[]) {}
}

----------------------------------------

TITLE: Binding Validation Pipe to MessagePattern in NestJS Microservices
DESCRIPTION: This snippet demonstrates how to bind a ValidationPipe to a method using the @MessagePattern decorator in a NestJS microservice. It uses RpcException for error handling and includes a simple accumulate function that sums an array of numbers.

LANGUAGE: typescript
CODE:
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}

LANGUAGE: javascript
CODE:
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))
@MessagePattern({ cmd: 'sum' })
accumulate(data) {
  return (data || []).reduce((a, b) => a + b);
}

----------------------------------------

TITLE: Configuring GraphQLModule for Schema-First Approach
DESCRIPTION: Setting up the GraphQLModule for a schema-first approach with automatic TypeScript definition generation.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  typePaths: ['./**/*.graphql'],
  definitions: {
    path: join(process.cwd(), 'src/graphql.ts'),
    outputAs: 'class',
  },
}),

----------------------------------------

TITLE: Implementing JWT Authentication Strategy
DESCRIPTION: Create a JwtStrategy class that extends PassportStrategy to implement JWT-based authentication.

LANGUAGE: typescript
CODE:
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';
import { jwtConstants } from './constants';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: jwtConstants.secret,
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, username: payload.username };
  }
}

----------------------------------------

TITLE: Installing NestJS Swagger Module
DESCRIPTION: Command to install the @nestjs/swagger package as a project dependency.

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/swagger

----------------------------------------

TITLE: Installing NestJS Config Package
DESCRIPTION: Installation command for the @nestjs/config package which is required for configuration management.

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/config

----------------------------------------

TITLE: Injecting Mongoose Model in NestJS Service
DESCRIPTION: Example of injecting and using a Mongoose model in a NestJS service.

LANGUAGE: typescript
CODE:
import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Cat } from './schemas/cat.schema';
import { CreateCatDto } from './dto/create-cat.dto';

@Injectable()
export class CatsService {
  constructor(@InjectModel(Cat.name) private catModel: Model<Cat>) {}

  async create(createCatDto: CreateCatDto): Promise<Cat> {
    const createdCat = new this.catModel(createCatDto);
    return createdCat.save();
  }

  async findAll(): Promise<Cat[]> {
    return this.catModel.find().exec();
  }
}

----------------------------------------

TITLE: Creating a New NestJS Project with CLI
DESCRIPTION: Creates a new NestJS project using the 'nest new' command. This command initializes a new project folder, populates it with configuration files, and sets up the basic project structure.

LANGUAGE: bash
CODE:
$ nest new <name> [options]
$ nest n <name> [options]

----------------------------------------

TITLE: Configuring Helmet Middleware for Express
DESCRIPTION: Basic implementation of Helmet middleware in a NestJS application using Express.

LANGUAGE: typescript
CODE:
import helmet from 'helmet';
// somewhere in your initialization file
app.use(helmet());

----------------------------------------

TITLE: Enabling Subscriptions with Apollo Driver in NestJS
DESCRIPTION: Configuration to enable GraphQL subscriptions using the Apollo driver in NestJS. It shows how to set up the module with subscription handlers and switch to the graphql-ws package.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  installSubscriptionHandlers: true,
}),

// Using graphql-ws package
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  subscriptions: {
    'graphql-ws': true
  },
}),

----------------------------------------

TITLE: Using Factory Provider with useFactory in NestJS
DESCRIPTION: This example shows how to use the useFactory syntax for custom providers in NestJS. It demonstrates creating a provider dynamically using a factory function that can inject other providers and accept optional arguments.

LANGUAGE: typescript
CODE:
const connectionProvider = {
  provide: 'CONNECTION',
  useFactory: (optionsProvider: MyOptionsProvider, optionalProvider?: string) => {
    const options = optionsProvider.get();
    return new DatabaseConnection(options);
  },
  inject: [MyOptionsProvider, { token: 'SomeOptionalProvider', optional: true }],
};

@Module({
  providers: [
    connectionProvider,
    MyOptionsProvider,
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Creating a NestJS Standalone Application
DESCRIPTION: This snippet demonstrates how to create a basic NestJS standalone application using NestFactory.createApplicationContext(). It sets up the application context without any network listeners.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  // your application logic here ...
}
bootstrap();

----------------------------------------

TITLE: Implementing Middleware with Fastify in NestJS
DESCRIPTION: TypeScript code showing how to implement middleware using Fastify's raw request and response objects in NestJS.

LANGUAGE: typescript
CODE:
import { Injectable, NestMiddleware } from '@nestjs/common';
import { FastifyRequest, FastifyReply } from 'fastify';

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  use(req: FastifyRequest['raw'], res: FastifyReply['raw'], next: () => void) {
    console.log('Request...');
    next();
  }
}

----------------------------------------

TITLE: Running NestJS Application Commands
DESCRIPTION: CLI commands for starting the NestJS application in different modes including development with watch mode.

LANGUAGE: bash
CODE:
$ npm run start
$ npm run start:dev

----------------------------------------

TITLE: Configuring TypeORM Connection in NestJS
DESCRIPTION: Configures a TypeORM database connection in the NestJS application module using the TypeOrmModule.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [],
      synchronize: true,
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Enabling CORS in NestJS using enableCors() method
DESCRIPTION: This snippet demonstrates how to enable CORS in a NestJS application using the enableCors() method on the Nest application object. It allows for optional configuration and uses a fallback port of 3000.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.enableCors();
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Configuring Helmet with Apollo Server CSP
DESCRIPTION: Configuration of Helmet with specific Content Security Policy settings for Apollo Server compatibility.

LANGUAGE: typescript
CODE:
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: {
    directives: {
      imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],
      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],
      manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],
      frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],
    },
  },
}));

----------------------------------------

TITLE: StreamableFile Implementation in NestJS
DESCRIPTION: Improved file streaming implementation using NestJS's StreamableFile class, which preserves interceptor functionality while streaming files.

LANGUAGE: typescript
CODE:
import { Controller, Get, StreamableFile } from '@nestjs/common';
import { createReadStream } from 'fs';
import { join } from 'path';

@Controller('file')
export class FileController {
  @Get()
  getFile(): StreamableFile {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    return new StreamableFile(file);
  }
}

----------------------------------------

TITLE: Exporting Custom Providers in NestJS Modules
DESCRIPTION: This example shows how to export custom providers from a NestJS module. It demonstrates exporting a custom provider using its token, making it visible to other modules that import this module.

LANGUAGE: typescript
CODE:
const connectionFactory = {
  provide: 'CONNECTION',
  useFactory: (optionsProvider: OptionsProvider) => {
    const options = optionsProvider.get();
    return new DatabaseConnection(options);
  },
  inject: [OptionsProvider],
};

@Module({
  providers: [connectionFactory],
  exports: ['CONNECTION'],
})
export class AppModule {}

----------------------------------------

TITLE: Using Alias Provider with useExisting in NestJS
DESCRIPTION: This snippet demonstrates the use of useExisting syntax to create alias providers in NestJS. It shows how to create an alias for an existing provider, allowing two different ways to access the same provider instance.

LANGUAGE: typescript
CODE:
@Injectable()
class LoggerService {
  /* implementation details */
}

const loggerAliasProvider = {
  provide: 'AliasedLoggerService',
  useExisting: LoggerService,
};

@Module({
  providers: [LoggerService, loggerAliasProvider],
})
export class AppModule {}

----------------------------------------

TITLE: Using Sequelize Model in NestJS Service
DESCRIPTION: Injects and uses a Sequelize model in a NestJS service class to perform database operations.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { User } from './user.model';

@Injectable()
export class UsersService {
  constructor(
    @InjectModel(User)
    private userModel: typeof User,
  ) {}

  async findAll(): Promise<User[]> {
    return this.userModel.findAll();
  }

  findOne(id: string): Promise<User> {
    return this.userModel.findOne({
      where: {
        id,
      },
    });
  }

  async remove(id: string): Promise<void> {
    const user = await this.findOne(id);
    await user.destroy();
  }
}

----------------------------------------

TITLE: Installing NestJS CLI and Creating New Project
DESCRIPTION: Commands to install the NestJS CLI globally and create a new NestJS project. The CLI will scaffold a new project with core files and supporting modules.

LANGUAGE: bash
CODE:
$ npm i -g @nestjs/cli
$ nest new project-name

----------------------------------------

TITLE: Implementing a Declarative Cron Job in NestJS
DESCRIPTION: Example of creating a cron job using the @Cron() decorator in a NestJS service.

LANGUAGE: typescript
CODE:
import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  @Cron('45 * * * * *')
  handleCron() {
    this.logger.debug('Called when the current second is 45');
  }
}

----------------------------------------

TITLE: Exporting Providers from a NestJS Module
DESCRIPTION: Demonstrates how to export providers from a module, making them available to other modules that import this one. This is crucial for creating shared services across modules.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService]
})
export class CatsModule {}

----------------------------------------

TITLE: Configuring Helmet Plugin for Fastify
DESCRIPTION: Basic implementation of Helmet as a Fastify plugin in a NestJS application.

LANGUAGE: typescript
CODE:
import helmet from '@fastify/helmet'
// somewhere in your initialization file
await app.register(helmet)

----------------------------------------

TITLE: Using ParseFilePipe for File Validation in NestJS
DESCRIPTION: Example of using ParseFilePipe with custom validators for file validation in NestJS.

LANGUAGE: typescript
CODE:
@Post('file')
uploadFileAndPassValidation(
  @Body() body: SampleDto,
  @UploadedFile(
    new ParseFilePipe({
      validators: [
        // ... Set of file validator instances here
      ]
    })
  )
  file: Express.Multer.File,
) {
  return {
    body,
    file: file.buffer.toString(),
  };
}

----------------------------------------

TITLE: Optional Provider Injection in NestJS
DESCRIPTION: Demonstrates how to implement optional dependency injection using @Optional decorator for cases where dependencies might not always need to be resolved.

LANGUAGE: typescript
CODE:
import { Injectable, Optional, Inject } from '@nestjs/common';

@Injectable()
export class HttpService<T> {
  constructor(@Optional() @Inject('HTTP_OPTIONS') private httpClient: T) {}
}

----------------------------------------

TITLE: Configuring OAuth2 Authentication in NestJS
DESCRIPTION: Shows how to implement OAuth2 authentication with scope definition using @ApiOAuth2 decorator and DocumentBuilder setup.

LANGUAGE: typescript
CODE:
@ApiOAuth2(['pets:write'])
@Controller('cats')
export class CatsController {}

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addOAuth2();

----------------------------------------

TITLE: Dispatching Events in NestJS
DESCRIPTION: Example of emitting an event using EventEmitter2 in a NestJS service

LANGUAGE: typescript
CODE:
this.eventEmitter.emit(
  'order.created',
  new OrderCreatedEvent({
    orderId: 1,
    payload: {},
  }),
);

----------------------------------------

TITLE: Custom Exception in NestJS
DESCRIPTION: Shows how to create a custom exception class that extends the base HttpException in NestJS.

LANGUAGE: typescript
CODE:
export class ForbiddenException extends HttpException {
  constructor() {
    super('Forbidden', HttpStatus.FORBIDDEN);
  }
}

----------------------------------------

TITLE: Implementing Command Handler in NestJS CQRS
DESCRIPTION: Example of implementing a command handler for the KillDragon command in CQRS pattern

LANGUAGE: typescript
CODE:
@CommandHandler(KillDragonCommand)
export class KillDragonHandler implements ICommandHandler<KillDragonCommand> {
  constructor(private repository: HeroesRepository) {}

  async execute(command: KillDragonCommand) {
    const { heroId, dragonId } = command;
    const hero = this.repository.findOneById(+heroId);

    hero.killEnemy(dragonId);
    await this.repository.persist(hero);

    return {
      actionId: crypto.randomUUID(),
    }
  }
}

----------------------------------------

TITLE: Injecting Repository in NestJS Service
DESCRIPTION: This code demonstrates how to inject an entity repository into a NestJS service using the @InjectRepository() decorator.

LANGUAGE: typescript
CODE:
@Injectable()
export class PhotoService {
  constructor(
    @InjectRepository(Photo)
    private readonly photoRepository: EntityRepository<Photo>,
  ) {}
}

----------------------------------------

TITLE: Using SchedulerRegistry for Dynamic Cron Jobs in NestJS
DESCRIPTION: Example of using SchedulerRegistry to dynamically manage cron jobs in NestJS.

LANGUAGE: typescript
CODE:
constructor(private schedulerRegistry: SchedulerRegistry) {}

addCronJob(name: string, seconds: string) {
  const job = new CronJob(`${seconds} * * * * *`, () => {
    this.logger.warn(`time (${seconds}) for job ${name} to run!`);
  });

  this.schedulerRegistry.addCronJob(name, job);
  job.start();

  this.logger.warn(
    `job ${name} added for each minute at ${seconds} seconds!`,
  );
}

----------------------------------------

TITLE: Implementing Author Resolver (Code-First)
DESCRIPTION: Creates a resolver class for the Author type, defining query and field resolver methods. Shows usage of @Resolver, @Query, and @ResolveField decorators.

LANGUAGE: typescript
CODE:
@Resolver(() => Author)
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query(() => Author, { name: 'author' })
  async getAuthor(@Args('id', { type: () => Int }) id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField('posts', () => [Post])
  async getPosts(@Parent() author: Author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}

----------------------------------------

TITLE: Generated REST API Controller in TypeScript
DESCRIPTION: This snippet shows the structure of a generated controller file for a REST API in NestJS. It includes CRUD operations for a 'users' resource.

LANGUAGE: typescript
CODE:
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }

  @Get()
  findAll() {
    return this.usersService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.usersService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {
    return this.usersService.update(+id, updateUserDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.usersService.remove(+id);
  }
}

----------------------------------------

TITLE: Implementing Message Pattern Handler
DESCRIPTION: Example of a controller implementing a message pattern handler for request-response communication.

LANGUAGE: typescript
CODE:
import { Controller } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';

@Controller()
export class MathController {
  @MessagePattern({ cmd: 'sum' })
  accumulate(data: number[]): number {
    return (data || []).reduce((a, b) => a + b);
  }
}

----------------------------------------

TITLE: Cache Manager Injection in NestJS
DESCRIPTION: Example of injecting and using the cache manager in a service or controller.

LANGUAGE: typescript
CODE:
constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}

LANGUAGE: typescript
CODE:
const value = await this.cacheManager.get('key');

LANGUAGE: typescript
CODE:
await this.cacheManager.set('key', 'value');

----------------------------------------

TITLE: Implementing Event Handler in NestJS CQRS
DESCRIPTION: Shows how to implement an event handler for the HeroKilledDragon event

LANGUAGE: typescript
CODE:
@EventsHandler(HeroKilledDragonEvent)
export class HeroKilledDragonHandler implements IEventHandler<HeroKilledDragonEvent> {
  constructor(private repository: HeroesRepository) {}

  handle(event: HeroKilledDragonEvent) {
    // Business logic
  }
}

----------------------------------------

TITLE: Configuring RabbitMQ Transporter in NestJS Microservice
DESCRIPTION: Sets up the RabbitMQ transporter with connection options for a NestJS microservice.

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.RMQ,
  options: {
    urls: ['amqp://localhost:5672'],
    queue: 'cats_queue',
    queueOptions: {
      durable: false
    },
  },
});

----------------------------------------

TITLE: Defining Mongoose Schema for Cat Model
DESCRIPTION: Creates a Mongoose schema for the Cat model in NestJS.

LANGUAGE: typescript
CODE:
import * as mongoose from 'mongoose';

export const CatSchema = new mongoose.Schema({
  name: String,
  age: Number,
  breed: String,
});

----------------------------------------

TITLE: Using CronExpression Enum in NestJS
DESCRIPTION: Example of using the CronExpression enum for common cron patterns in NestJS.

LANGUAGE: typescript
CODE:
import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  @Cron(CronExpression.EVERY_30_SECONDS)
  handleCron() {
    this.logger.debug('Called every 30 seconds');
  }
}

----------------------------------------

TITLE: WebSocket Throttler Guard Implementation
DESCRIPTION: Custom throttler guard implementation for WebSocket connections with specific WebSocket client handling

LANGUAGE: typescript
CODE:
@Injectable()
export class WsThrottlerGuard extends ThrottlerGuard {
  async handleRequest(requestProps: ThrottlerRequest): Promise<boolean> {
    const {
      context,
      limit,
      ttl,
      throttler,
      blockDuration,
      getTracker,
      generateKey,
    } = requestProps;

    const client = context.switchToWs().getClient();
    const tracker = client._socket.remoteAddress;
    const key = generateKey(context, tracker, throttler.name);
    const { totalHits, timeToExpire, isBlocked, timeToBlockExpire } =
      await this.storageService.increment(
        key,
        ttl,
        limit,
        blockDuration,
        throttler.name,
      );

    const getThrottlerSuffix = (name: string) =>
      name === 'default' ? '' : `-${name}`;

    if (isBlocked) {
      await this.throwThrottlingException(context, {
        limit,
        ttl,
        key,
        tracker,
        totalHits,
        timeToExpire,
        isBlocked,
        timeToBlockExpire,
      });
    }

    return true;
  }
}

----------------------------------------

TITLE: Configuring Cache Module in NestJS
DESCRIPTION: Basic setup of CacheModule in the application's root module.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CacheModule } from '@nestjs/cache-manager';
import { AppController } from './app.controller';

@Module({
  imports: [CacheModule.register()],
  controllers: [AppController],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Method-Scoped Guard in NestJS Microservice
DESCRIPTION: Example showing how to implement a method-scoped guard using @UseGuards decorator with a message pattern in a NestJS microservice. The code demonstrates a simple accumulation endpoint protected by an AuthGuard.

LANGUAGE: typescript
CODE:
@UseGuards(AuthGuard)
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}

LANGUAGE: typescript
CODE:
@UseGuards(AuthGuard)
@MessagePattern({ cmd: 'sum' })
accumulate(data) {
  return (data || []).reduce((a, b) => a + b);
}

----------------------------------------

TITLE: Uploading Multiple Files in NestJS
DESCRIPTION: Handling multiple file uploads using FilesInterceptor and UploadedFiles decorator in NestJS.

LANGUAGE: typescript
CODE:
@Post('upload')
@UseInterceptors(FilesInterceptor('files'))
uploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {
  console.log(files);
}

----------------------------------------

TITLE: Defining Sequelize Model for Cat Entity
DESCRIPTION: Creates a Sequelize model for the Cat entity using decorators from sequelize-typescript. Defines table columns and their types.

LANGUAGE: typescript
CODE:
import { Table, Column, Model } from 'sequelize-typescript';

@Table
export class Cat extends Model {
  @Column
  name: string;

  @Column
  age: number;

  @Column
  breed: string;
}

----------------------------------------

TITLE: Implementing CatsService with Mongoose in NestJS
DESCRIPTION: Creates a CatsService that uses the injected CAT_MODEL to perform database operations in NestJS.

LANGUAGE: typescript
CODE:
import { Model } from 'mongoose';
import { Injectable, Inject } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';
import { CreateCatDto } from './dto/create-cat.dto';

@Injectable()
export class CatsService {
  constructor(
    @Inject('CAT_MODEL')
    private catModel: Model<Cat>,
  ) {}

  async create(createCatDto: CreateCatDto): Promise<Cat> {
    const createdCat = new this.catModel(createCatDto);
    return createdCat.save();
  }

  async findAll(): Promise<Cat[]> {
    return this.catModel.find().exec();
  }
}

----------------------------------------

TITLE: Installing NestJS CLI and Creating New Project
DESCRIPTION: Commands to install the NestJS CLI globally and create a new project using npm.

LANGUAGE: bash
CODE:
$ npm i -g @nestjs/cli
$ nest new project-name

----------------------------------------

TITLE: Implementing Memory Health Check in NestJS
DESCRIPTION: Adds a memory usage health check using MemoryHealthIndicator in the HealthController.

LANGUAGE: typescript
CODE:
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private memory: MemoryHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),
    ]);
  }
}

----------------------------------------

TITLE: Configuring MQTT Transporter in NestJS
DESCRIPTION: Sets up the MQTT transporter for a NestJS microservice, specifying the transport type and connection URL.

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.MQTT,
  options: {
    url: 'mqtt://localhost:1883',
  },
});

----------------------------------------

TITLE: Explicitly setting types for generics in Swagger for NestJS
DESCRIPTION: Shows how to explicitly set types for generics when TypeScript metadata is not sufficient for Swagger to generate proper documentation.

LANGUAGE: typescript
CODE:
@ApiBody({ type: [CreateUserDto] })
createBulk(@Body() usersDto: CreateUserDto[])

----------------------------------------

TITLE: Implementing Code-First Mutation in NestJS GraphQL
DESCRIPTION: Demonstrates how to create a mutation using the @Mutation() decorator in a NestJS resolver. This mutation upvotes a post by its ID and returns the updated Post entity.

LANGUAGE: typescript
CODE:
@Mutation(() => Post)
async upvotePost(@Args({ name: 'postId', type: () => Int }) postId: number) {
  return this.postsService.upvoteById({ id: postId });
}

----------------------------------------

TITLE: Implementing Async HTTP Module Configuration
DESCRIPTION: Examples of configuring the HTTP module asynchronously using factory functions and dependency injection.

LANGUAGE: typescript
CODE:
HttpModule.registerAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    timeout: configService.get('HTTP_TIMEOUT'),
    maxRedirects: configService.get('HTTP_MAX_REDIRECTS'),
  }),
  inject: [ConfigService],
});

----------------------------------------

TITLE: Creating Repository Provider for Cat Model
DESCRIPTION: Defines a provider for the Cat repository, which can be injected into services to perform database operations.

LANGUAGE: typescript
CODE:
import { Cat } from './cat.entity';

export const catsProviders = [
  {
    provide: 'CATS_REPOSITORY',
    useValue: Cat,
  },
];

----------------------------------------

TITLE: Implementing GraphQL Query with Guards and Pipes in NestJS
DESCRIPTION: Demonstrates how to create a GraphQL query handler with authentication guard and parameter parsing pipe.

LANGUAGE: typescript
CODE:
@Query('author')
@UseGuards(AuthGuard)
async getAuthor(@Args('id', ParseIntPipe) id: number) {
  return this.authorsService.findOneById(id);
}

----------------------------------------

TITLE: Configuring Sequelize Connection in NestJS
DESCRIPTION: Configures a Sequelize database connection in the NestJS application module using the SequelizeModule.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';

@Module({
  imports: [
    SequelizeModule.forRoot({
      dialect: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      models: [],
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing Route Constraints with Fastify in NestJS
DESCRIPTION: Demonstration of how to use Fastify's route constraints feature in NestJS using the @RouteConstraints decorator.

LANGUAGE: typescript
CODE:
@RouteConstraints({ version: '1.2.x' })
newFeature() {
  return 'This works only for version >= 1.2.x';
}

----------------------------------------

TITLE: Custom resolveType Function for GraphQL Interface in TypeScript
DESCRIPTION: This snippet illustrates how to provide a custom resolveType function for a GraphQL interface. It uses the resolveType property in the @InterfaceType() decorator options to determine the concrete type based on the returned object's properties.

LANGUAGE: typescript
CODE:
@InterfaceType({
  resolveType(book) {
    if (book.colors) {
      return ColoringBook;
    }
    return TextBook;
  },
})
export abstract class Book {
  @Field(() => ID)
  id: string;

  @Field()
  title: string;
}

----------------------------------------

TITLE: Reading Cookies in NestJS Route Handler with Express
DESCRIPTION: Demonstrate how to read cookies from the request object in a NestJS route handler using Express.

LANGUAGE: typescript
CODE:
@Get()
findAll(@Req() request: Request) {
  console.log(request.cookies); // or "request.cookies['cookieKey']"
  // or console.log(request.signedCookies);
}

----------------------------------------

TITLE: Defining GraphQL Input Type in NestJS
DESCRIPTION: Shows how to create an input type for GraphQL mutations using the @InputType() decorator. This input type is used to pass complex objects as arguments to mutations.

LANGUAGE: typescript
CODE:
import { InputType, Field } from '@nestjs/graphql';

@InputType()
export class UpvotePostInput {
  @Field()
  postId: number;
}

----------------------------------------

TITLE: Implementing HTTP Service in NestJS Service
DESCRIPTION: Example of injecting and using HttpService in a NestJS service class to make HTTP requests.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(private readonly httpService: HttpService) {}

  findAll(): Observable<AxiosResponse<Cat[]>> {
    return this.httpService.get('http://localhost:3000/cats');
  }
}

----------------------------------------

TITLE: Defining Photo entity using TypeORM in NestJS
DESCRIPTION: This code defines a Photo entity using TypeORM decorators. It specifies the table structure with columns for id, name, description, filename, views, and publication status.

LANGUAGE: typescript
CODE:
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Photo {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ length: 500 })
  name: string;

  @Column('text')
  description: string;

  @Column()
  filename: string;

  @Column('int')
  views: number;

  @Column()
  isPublished: boolean;
}

----------------------------------------

TITLE: Custom UUID Scalar Implementation
DESCRIPTION: Implementation of a custom UUID scalar type with validation and parsing logic.

LANGUAGE: typescript
CODE:
const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

function validate(uuid: unknown): string | never {
  if (typeof uuid !== 'string' || !regex.test(uuid)) {
    throw new Error('invalid uuid');
  }
  return uuid;
}

export const CustomUuidScalar = new GraphQLScalarType({
  name: 'UUID',
  description: 'A simple UUID parser',
  serialize: (value) => validate(value),
  parseValue: (value) => validate(value),
  parseLiteral: (ast) => validate(ast.value),
});

----------------------------------------

TITLE: Creating Photo repository provider in NestJS
DESCRIPTION: This code defines a provider for the Photo repository. It uses the DATA_SOURCE to create and provide the repository for the Photo entity.

LANGUAGE: typescript
CODE:
import { DataSource } from 'typeorm';
import { Photo } from './photo.entity';

export const photoProviders = [
  {
    provide: 'PHOTO_REPOSITORY',
    useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),
    inject: ['DATA_SOURCE'],
  },
];

----------------------------------------

TITLE: Accessing RabbitMQ Context in NestJS Message Handler
DESCRIPTION: Demonstrates how to access RabbitMQ context information in a NestJS message handler.

LANGUAGE: typescript
CODE:
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {
  console.log(`Pattern: ${context.getPattern()}`);
}

----------------------------------------

TITLE: Sharing Configuration in NestJS Hybrid Applications
DESCRIPTION: Demonstrates how to share configuration between the main HTTP application and microservices in a hybrid NestJS application. It shows how to use the inheritAppConfig option to inherit global pipes, interceptors, guards, and filters.

LANGUAGE: typescript
CODE:
const microservice = app.connectMicroservice<MicroserviceOptions>(
  {
    transport: Transport.TCP,
  },
  { inheritAppConfig: true },
);

----------------------------------------

TITLE: Enabling File Upload in NestJS OpenAPI
DESCRIPTION: Shows how to enable file upload for a specific method using @ApiBody and @ApiConsumes decorators in NestJS.

LANGUAGE: typescript
CODE:
@UseInterceptors(FileInterceptor('file'))
@ApiConsumes('multipart/form-data')
@ApiBody({
  description: 'List of cats',
  type: FileUploadDto,
})
uploadFile(@UploadedFile() file) {}

----------------------------------------

TITLE: Defining GraphQL Schema (Schema-First)
DESCRIPTION: Defines the GraphQL schema using SDL (Schema Definition Language) for the Author and Post types.

LANGUAGE: graphql
CODE:
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String!
  votes: Int
}

type Query {
  author(id: Int!): Author
}

----------------------------------------

TITLE: Importing HTTP Module in NestJS Module
DESCRIPTION: Basic module configuration to import HttpModule into a NestJS module.

LANGUAGE: typescript
CODE:
@Module({
  imports: [HttpModule],
  providers: [CatsService],
})
export class CatsModule {}

----------------------------------------

TITLE: Implementing HTTP Health Check in NestJS Controller
DESCRIPTION: Sets up a controller with an HTTP health check using the HttpHealthIndicator.

LANGUAGE: typescript
CODE:
import { Controller, Get } from '@nestjs/common';
import { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';

@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private http: HttpHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),
    ]);
  }
}

----------------------------------------

TITLE: Defining Prisma Models for User and Post
DESCRIPTION: Prisma schema definitions for User and Post models with their relationships.

LANGUAGE: prisma
CODE:
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

----------------------------------------

TITLE: Creating DatabaseModule in NestJS
DESCRIPTION: This code defines a DatabaseModule that exports the database providers, making them accessible to other parts of the application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { databaseProviders } from './database.providers';

@Module({
  providers: [...databaseProviders],
  exports: [...databaseProviders],
})
export class DatabaseModule {}

----------------------------------------

TITLE: Configuring Graceful Shutdown for Terminus in NestJS
DESCRIPTION: Sets up a graceful shutdown timeout for Terminus health checks in the HealthModule.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    TerminusModule.forRoot({
      gracefulShutdownTimeoutMs: 1000,
    }),
  ]
})
export class HealthModule {}

----------------------------------------

TITLE: Defining a Static UsersModule in TypeScript
DESCRIPTION: Example of a static module definition for UsersModule, which provides and exports UsersService.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';

@Module({
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}

----------------------------------------

TITLE: Implementing HMR in NestJS Entry File
DESCRIPTION: Main application file modifications to enable hot module replacement functionality in NestJS

LANGUAGE: typescript
CODE:
declare const module: any;

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(process.env.PORT ?? 3000);

  if (module.hot) {
    module.hot.accept();
    module.hot.dispose(() => app.close());
  }
}
bootstrap();

----------------------------------------

TITLE: Creating GraphQL-aware Authentication Guard in NestJS
DESCRIPTION: Implementation of a guard that handles GraphQL execution context for authentication purposes.

LANGUAGE: typescript
CODE:
import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';
import { GqlExecutionContext } from '@nestjs/graphql';

@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    const ctx = GqlExecutionContext.create(context);
    return true;
  }
}

----------------------------------------

TITLE: Creating Logger Module with Dependency Injection
DESCRIPTION: Demonstrates how to create a logger module that can be injected into other modules and services.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { MyLogger } from './my-logger.service';

@Module({
  providers: [MyLogger],
  exports: [MyLogger],
})
export class LoggerModule {}

----------------------------------------

TITLE: gRPC Controller Implementation
DESCRIPTION: NestJS controller implementing the gRPC service defined in the proto file using @GrpcMethod decorator

LANGUAGE: typescript
CODE:
@Controller()
export class HeroesController {
  @GrpcMethod('HeroesService', 'FindOne')
  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {
    const items = [
      { id: 1, name: 'John' },
      { id: 2, name: 'Doe' },
    ];
    return items.find(({ id }) => id === data.id);
  }
}

----------------------------------------

TITLE: Schema-First User Type Definition
DESCRIPTION: GraphQL schema definition for User type with Federation key directive

LANGUAGE: graphql
CODE:
type User @key(fields: "id") {
  id: ID!
  name: String!
}

extend type Query {
  getUser(id: ID!): User
}

----------------------------------------

TITLE: Installing TypeORM and MySQL dependencies in NestJS
DESCRIPTION: This command installs the necessary packages for using TypeORM with MySQL in a NestJS project.

LANGUAGE: bash
CODE:
$ npm install --save typeorm mysql2

----------------------------------------

TITLE: Implementing a Declarative Interval in NestJS
DESCRIPTION: Example of creating an interval using the @Interval() decorator in NestJS.

LANGUAGE: typescript
CODE:
@Interval(10000)
handleInterval() {
  this.logger.debug('Called every 10 seconds');
}

----------------------------------------

TITLE: Asynchronous Initialization with OnModuleInit Hook
DESCRIPTION: Shows how to use async/await with the OnModuleInit hook to perform asynchronous operations during module initialization. The method returns a Promise and awaits the completion of an asynchronous fetch operation.

LANGUAGE: typescript
CODE:
async onModuleInit(): Promise<void> {
  await this.fetch();
}

----------------------------------------

TITLE: Testing NestJS Service with ClsService
DESCRIPTION: Demonstrates how to set up and use ClsService in NestJS integration tests, including wrapping test calls with ClsService.runWith() to provide custom store values.

LANGUAGE: typescript
CODE:
describe('CatsService', () => {
  let service: CatsService
  let cls: ClsService
  const mockCatsRepository = createMock<CatsRepository>()

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        CatsService,
        {
          provide: CatsRepository
          useValue: mockCatsRepository
        }
      ],
      imports: [
        ClsModule
      ],
    }).compile()

    service = module.get(CatsService)
    cls = module.get(ClsService)
  })

  describe('getCatForUser', () => {
    it('retrieves cat based on user id', async () => {
      const expectedUserId = 42
      mocksCatsRepository.getForUser.mockImplementationOnce(
        (id) => ({ userId: id })
      )

      const cat = await cls.runWith(
        { userId: expectedUserId },
        () => service.getCatForUser()
      )

      expect(cat.userId).toEqual(expectedUserId)
    })
  })
})

----------------------------------------

TITLE: Handling WebSocket Events in NestJS
DESCRIPTION: Demonstrates how to create an event handler for WebSocket messages in a NestJS gateway.

LANGUAGE: typescript
CODE:
@SubscribeMessage('events')
handleEvent(@MessageBody() data: string): string {
  return data;
}

----------------------------------------

TITLE: Disabling Logger in NestJS
DESCRIPTION: Shows how to disable the built-in logger when creating a NestJS application instance.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule, {
  logger: false,
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Configuring Kafka Transport in NestJS Microservice
DESCRIPTION: Setting up the Kafka transport in a NestJS microservice using createMicroservice method.

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.KAFKA,
  options: {
    client: {
      brokers: ['localhost:9092'],
    }
  }
});

----------------------------------------

TITLE: Implementing CatsService with Sequelize Repository
DESCRIPTION: Creates a CatsService that injects the CATS_REPOSITORY and uses it to perform database operations. Demonstrates how to use the injected repository in a service method.

LANGUAGE: typescript
CODE:
import { Injectable, Inject } from '@nestjs/common';
import { CreateCatDto } from './dto/create-cat.dto';
import { Cat } from './cat.entity';

@Injectable()
export class CatsService {
  constructor(
    @Inject('CATS_REPOSITORY')
    private catsRepository: typeof Cat
  ) {}

  async findAll(): Promise<Cat[]> {
    return this.catsRepository.findAll<Cat>();
  }
}

----------------------------------------

TITLE: Creating TypeORM DataSource provider in NestJS
DESCRIPTION: This code defines a custom provider for establishing a database connection using TypeORM's DataSource. It sets up the connection parameters and entity locations.

LANGUAGE: typescript
CODE:
import { DataSource } from 'typeorm';

export const databaseProviders = [
  {
    provide: 'DATA_SOURCE',
    useFactory: async () => {
      const dataSource = new DataSource({
        type: 'mysql',
        host: 'localhost',
        port: 3306,
        username: 'root',
        password: 'root',
        database: 'test',
        entities: [
            __dirname + '/../**/*.entity{.ts,.js}',
        ],
        synchronize: true,
      });

      return dataSource.initialize();
    },
  },
];

----------------------------------------

TITLE: Registering Field Middleware in Object Type Definition
DESCRIPTION: Demonstrates how to register field middleware at the field level using the @Field decorator in a Recipe object type.

LANGUAGE: typescript
CODE:
@ObjectType()
export class Recipe {
  @Field({ middleware: [loggerMiddleware] })
  title: string;
}

----------------------------------------

TITLE: Defining Field-Level Complexity
DESCRIPTION: Example of setting complexity for a GraphQL field using the @Field decorator

LANGUAGE: typescript
CODE:
@Field({ complexity: 3 })
title: string;

----------------------------------------

TITLE: Customizing StreamableFile Response Headers in NestJS
DESCRIPTION: Examples of different approaches to customize response headers when streaming files, including using StreamableFile options, response object, and decorators.

LANGUAGE: typescript
CODE:
import { Controller, Get, StreamableFile, Res } from '@nestjs/common';
import { createReadStream } from 'fs';
import { join } from 'path';
import type { Response } from 'express';

@Controller('file')
export class FileController {
  @Get()
  getFile(): StreamableFile {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    return new StreamableFile(file, {
      type: 'application/json',
      disposition: 'attachment; filename="package.json"',
    });
  }

  @Get()
  getFileChangingResponseObjDirectly(@Res({ passthrough: true }) res: Response): StreamableFile {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    res.set({
      'Content-Type': 'application/json',
      'Content-Disposition': 'attachment; filename="package.json"',
    });
    return new StreamableFile(file);
  }

  @Get()
  @Header('Content-Type', 'application/json')
  @Header('Content-Disposition', 'attachment; filename="package.json"')
  getFileUsingStaticValues(): StreamableFile {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    return new StreamableFile(file);
  }
}

----------------------------------------

TITLE: Registering a WebSocket Gateway in NestJS Module
DESCRIPTION: Shows how to register a WebSocket gateway in a NestJS module.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { EventsGateway } from './events.gateway';

@Module({
  providers: [EventsGateway]
})
export class EventsModule {}

----------------------------------------

TITLE: Installing Mongoose dependencies in NestJS
DESCRIPTION: Command to install the required Mongoose packages for NestJS integration.

LANGUAGE: bash
CODE:
$ npm i @nestjs/mongoose mongoose

----------------------------------------

TITLE: Registering RabbitMQ Client with ClientsModule in NestJS
DESCRIPTION: Configures a RabbitMQ client using ClientsModule for dependency injection in NestJS.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.RMQ,
        options: {
          urls: ['amqp://localhost:5672'],
          queue: 'cats_queue',
          queueOptions: {
            durable: false
          },
        },
      },
    ]),
  ]
  ...
})

----------------------------------------

TITLE: Applying Field Middleware to Custom Field Resolver
DESCRIPTION: Shows how to bind field middleware to a custom field resolver using the @ResolveField decorator.

LANGUAGE: typescript
CODE:
@ResolveField(() => String, { middleware: [loggerMiddleware] })
title() {
  return 'Placeholder';
}

----------------------------------------

TITLE: Installing GraphQL Dependencies for NestJS
DESCRIPTION: Command to install required packages for using GraphQL with NestJS and Apollo Server.

LANGUAGE: bash
CODE:
$ npm i @nestjs/graphql @nestjs/apollo @apollo/server graphql

----------------------------------------

TITLE: Reading Cookies in NestJS Route Handler with Fastify
DESCRIPTION: Demonstrate how to read cookies from the request object in a NestJS route handler using Fastify.

LANGUAGE: typescript
CODE:
@Get()
findAll(@Req() request: FastifyRequest) {
  console.log(request.cookies); // or "request.cookies['cookieKey']"
}

----------------------------------------

TITLE: Injecting EntityManager in NestJS Service
DESCRIPTION: This code demonstrates how to inject and use the EntityManager in a NestJS service. It imports the necessary types from the driver package.

LANGUAGE: typescript
CODE:
import { EntityManager, MikroORM } from '@mikro-orm/sqlite';

@Injectable()
export class MyService {
  constructor(
    private readonly orm: MikroORM,
    private readonly em: EntityManager,
  ) {}
}

----------------------------------------

TITLE: Defining DatabaseModule in NestJS
DESCRIPTION: Creates a DatabaseModule to export database providers for use in other parts of the NestJS application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { databaseProviders } from './database.providers';

@Module({
  providers: [...databaseProviders],
  exports: [...databaseProviders],
})
export class DatabaseModule {}

----------------------------------------

TITLE: NestJS Controller with Static Template Rendering
DESCRIPTION: Controller implementation using @Render decorator for static template rendering

LANGUAGE: typescript
CODE:
import { Get, Controller, Render } from '@nestjs/common';

@Controller()
export class AppController {
  @Get()
  @Render('index')
  root() {
    return { message: 'Hello world!' };
  }
}

----------------------------------------

TITLE: Configuring RabbitMQ Message Options with RmqRecordBuilder in NestJS
DESCRIPTION: Demonstrates using RmqRecordBuilder to set custom options for RabbitMQ messages in NestJS.

LANGUAGE: typescript
CODE:
const message = ':cat:';
const record = new RmqRecordBuilder(message)
  .setOptions({
    headers: {
      ['x-version']: '1.0.0',
    },
    priority: 3,
  })
  .build();

this.client.send('replace-emoji', record).subscribe(...);

----------------------------------------

TITLE: Installing compression package for Express in NestJS
DESCRIPTION: Command to install the compression package for use with Express in a NestJS application.

LANGUAGE: bash
CODE:
$ npm i --save compression

----------------------------------------

TITLE: Using Input Type in NestJS GraphQL Mutation
DESCRIPTION: Demonstrates how to use a custom input type as an argument in a GraphQL mutation within a NestJS resolver.

LANGUAGE: typescript
CODE:
@Mutation(() => Post)
async upvotePost(
  @Args('upvotePostData') upvotePostData: UpvotePostInput,
) {}

----------------------------------------

TITLE: Accessing MQTT Context in NestJS MessagePattern
DESCRIPTION: Shows how to access the MQTT context within a message handler, including retrieving the topic and packet information.

LANGUAGE: typescript
CODE:
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: MqttContext) {
  console.log(`Topic: ${context.getTopic()}`);
  console.log(context.getPacket());
}

----------------------------------------

TITLE: NestJS CLI Configuration for Monorepo
DESCRIPTION: Example of a nest-cli.json file for a NestJS monorepo project, showing the structure and key configuration options for multiple applications.

LANGUAGE: javascript
CODE:
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "apps/my-project/src",
  "monorepo": true,
  "root": "apps/my-project",
  "compilerOptions": {
    "webpack": true,
    "tsConfigPath": "apps/my-project/tsconfig.app.json"
  },
  "projects": {
    "my-project": {
      "type": "application",
      "root": "apps/my-project",
      "entryFile": "main",
      "sourceRoot": "apps/my-project/src",
      "compilerOptions": {
        "tsConfigPath": "apps/my-project/tsconfig.app.json"
      }
    },
    "my-app": {
      "type": "application",
      "root": "apps/my-app",
      "entryFile": "main",
      "sourceRoot": "apps/my-app/src",
      "compilerOptions": {
        "tsConfigPath": "apps/my-app/tsconfig.app.json"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing WebSocket Guard with TypeScript in NestJS
DESCRIPTION: Example showing how to bind an authentication guard to a WebSocket message handler using the @UseGuards decorator. The handler responds to 'events' messages and returns a WsResponse object.

LANGUAGE: typescript
CODE:
@UseGuards(AuthGuard)
@SubscribeMessage('events')
handleEvent(client: Client, data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}

LANGUAGE: typescript
CODE:
@UseGuards(AuthGuard)
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}

----------------------------------------

TITLE: Creating Cat Model Provider in NestJS
DESCRIPTION: Defines a provider for the Cat model using the CatSchema and database connection in NestJS.

LANGUAGE: typescript
CODE:
import { Connection } from 'mongoose';
import { CatSchema } from './schemas/cat.schema';

export const catsProviders = [
  {
    provide: 'CAT_MODEL',
    useFactory: (connection: Connection) => connection.model('Cat', CatSchema),
    inject: ['DATABASE_CONNECTION'],
  },
];

----------------------------------------

TITLE: Configuring Fastify to Listen on All Interfaces
DESCRIPTION: TypeScript code showing how to configure Fastify to listen on all network interfaces instead of just localhost.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter(),
  );
  await app.listen(3000, '0.0.0.0');
}

----------------------------------------

TITLE: Implementing Multiple Responses in NestJS WebSocket Gateway
DESCRIPTION: Demonstrates how to send multiple responses for a single WebSocket event in NestJS.

LANGUAGE: typescript
CODE:
@SubscribeMessage('events')
handleEvent(@MessageBody() data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}

----------------------------------------

TITLE: Installing Suites for NestJS
DESCRIPTION: Command to install Suites packages for use with NestJS and Jest.

LANGUAGE: bash
CODE:
$ npm i -D @suites/unit @suites/di.nestjs @suites/doubles.jest

----------------------------------------

TITLE: Custom Date Scalar Implementation
DESCRIPTION: Implementation of a custom Date scalar type with parsing and serialization logic for GraphQL queries.

LANGUAGE: typescript
CODE:
import { Scalar, CustomScalar } from '@nestjs/graphql';
import { Kind, ValueNode } from 'graphql';

@Scalar('Date', () => Date)
export class DateScalar implements CustomScalar<number, Date> {
  description = 'Date custom scalar type';

  parseValue(value: number): Date {
    return new Date(value); // value from the client
  }

  serialize(value: Date): number {
    return value.getTime(); // value sent to the client
  }

  parseLiteral(ast: ValueNode): Date {
    if (ast.kind === Kind.INT) {
      return new Date(ast.value);
    }
    return null;
  }
}

----------------------------------------

TITLE: Implementing Disk Health Check in NestJS
DESCRIPTION: Adds a disk storage health check using DiskHealthIndicator in the HealthController.

LANGUAGE: typescript
CODE:
@Controller('health')
export class HealthController {
  constructor(
    private readonly health: HealthCheckService,
    private readonly disk: DiskHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.disk.checkStorage('storage', { path: '/', thresholdPercent: 0.5 }),
    ]);
  }
}

----------------------------------------

TITLE: Implementing Schema-First Mutation in NestJS GraphQL
DESCRIPTION: Shows how to implement a GraphQL mutation using the schema-first approach in NestJS. This mutation upvotes a post by its ID and interacts with a PostsService.

LANGUAGE: typescript
CODE:
@Mutation()
async upvotePost(@Args('postId') postId: number) {
  return this.postsService.upvoteById({ id: postId });
}

----------------------------------------

TITLE: Configuring Basic RouterModule with Single Module Prefix
DESCRIPTION: Shows how to register a RouterModule to apply a '/dashboard' prefix to all routes within the DashboardModule. The RouterModule is imported from @nestjs/core and configured in the application's root module.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    DashboardModule,
    RouterModule.register([
      {
        path: 'dashboard',
        module: DashboardModule,
      },
    ]),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Installing NestJS CLI and Creating Project
DESCRIPTION: Commands to install the NestJS CLI globally and create a new NestJS project named 'hello-prisma'.

LANGUAGE: bash
CODE:
$ npm install -g @nestjs/cli
$ nest new hello-prisma

----------------------------------------

TITLE: Configuring NestJS Application with FastifyAdapter
DESCRIPTION: TypeScript code to set up a NestJS application using Fastify as the HTTP provider. It demonstrates how to create the app with FastifyAdapter and start the server.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import {
  FastifyAdapter,
  NestFastifyApplication,
} from '@nestjs/platform-fastify';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter()
  );
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Implementing WebSocket Interceptor in NestJS (JavaScript)
DESCRIPTION: This snippet shows how to use a method-scoped interceptor with a WebSocket gateway in NestJS using JavaScript. It demonstrates the @UseInterceptors decorator and the structure of a message handler method in JavaScript syntax.

LANGUAGE: javascript
CODE:
@UseInterceptors(new TransformInterceptor())
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}

----------------------------------------

TITLE: Configuring Jest for Swagger Plugin (Jest < 29) in JSON
DESCRIPTION: Jest configuration for versions below 29 to use the Swagger plugin AST transformer.

LANGUAGE: json
CODE:
{
  "globals": {
    "ts-jest": {
      "astTransformers": {
        "before": ["<path to the file created above>"]
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Webpack Alias for NestJS GraphQL Model Shim
DESCRIPTION: This snippet demonstrates how to configure a webpack alias to replace GraphQL decorators with inert code using the NestJS GraphQL model shim. It resolves the '@nestjs/graphql' package to the shim location.

LANGUAGE: typescript
CODE:
resolve: { // see: https://webpack.js.org/configuration/resolve/
  alias: {
      "@nestjs/graphql": path.resolve(__dirname, "../node_modules/@nestjs/graphql/dist/extra/graphql-model-shim")
  }
}

----------------------------------------

TITLE: Implementing CatsService in NestJS
DESCRIPTION: TypeScript code for a NestJS service that combines CatsApiService and CatsDAL to fetch and save cat data.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(
    private catsApiService: CatsApiService,
    private catsDAL: CatsDAL
  ) {}

  async getAndSaveCat(id: number): Promise<Cat> {
    const cat = await this.catsApiService.getCatById(id);
    return this.catsDAL.saveCat(cat);
  }
}

----------------------------------------

TITLE: Using Parameterized User Decorator in NestJS Controller
DESCRIPTION: Illustrates how to use the parameterized @User() decorator to access specific user properties in a controller method. This allows for more targeted data extraction.

LANGUAGE: typescript
CODE:
@Get()
async findOne(@User('firstName') firstName: string) {
  console.log(`Hello ${firstName}`);
}

----------------------------------------

TITLE: Implementing GraphQL Interface in Object Type using TypeScript
DESCRIPTION: This code shows how to implement a GraphQL interface in an object type using the code-first approach. It uses the @ObjectType() decorator with the implements option to specify the interface being implemented.

LANGUAGE: typescript
CODE:
@ObjectType({
  implements: () => [Character],
})
export class Human implements Character {
  id: string;
  name: string;
}

----------------------------------------

TITLE: Configuring Prisma for SQLite Database
DESCRIPTION: Prisma schema configuration for using SQLite as the database provider.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

----------------------------------------

TITLE: Using Session Decorator with Express
DESCRIPTION: Alternative approach using @Session decorator to handle session data in route handlers

LANGUAGE: typescript
CODE:
@Get()
findAll(@Session() session: Record<string, any>) {
  session.visits = session.visits ? session.visits + 1 : 1;
}

----------------------------------------

TITLE: Configuring NecordModule in NestJS
DESCRIPTION: Module configuration for integrating Necord with NestJS application, including token and intents setup

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { NecordModule } from 'necord';
import { IntentsBitField } from 'discord.js';
import { AppService } from './app.service';

@Module({
  imports: [
    NecordModule.forRoot({
      token: process.env.DISCORD_TOKEN,
      intents: [IntentsBitField.Guilds],
      development: [process.env.DISCORD_DEVELOPMENT_GUILD_ID],
    }),
  ],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Using Custom Cookie Decorator in NestJS Route Handler
DESCRIPTION: Demonstrate the usage of the custom @Cookies() decorator in a NestJS route handler signature.

LANGUAGE: typescript
CODE:
@Get()
findAll(@Cookies('name') name: string) {}

----------------------------------------

TITLE: Implementing Logger Field Middleware in NestJS GraphQL
DESCRIPTION: Creates a simple field middleware that logs field values before sending them to the client. The middleware implements the FieldMiddleware interface and demonstrates the usage of MiddlewareContext and NextFn.

LANGUAGE: typescript
CODE:
import { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';

const loggerMiddleware: FieldMiddleware = async (
  ctx: MiddlewareContext,
  next: NextFn,
) => {
  const value = await next();
  console.log(value);
  return value;
};

----------------------------------------

TITLE: Using AllowedColor enum in NestJS GraphQL field decorator
DESCRIPTION: Demonstrates how to use the AllowedColor enum as a field type in a NestJS GraphQL object type.

LANGUAGE: typescript
CODE:
@Field(type => AllowedColor)
favoriteColor: AllowedColor;

----------------------------------------

TITLE: Running NestJS in Production Mode
DESCRIPTION: Commands to run a NestJS application in production mode with NODE_ENV environment variable set.

LANGUAGE: bash
CODE:
$ NODE_ENV=production node dist/main.js

----------------------------------------

TITLE: Installing @nestjs/serve-static Package
DESCRIPTION: This command installs the @nestjs/serve-static package, which is required to serve static content in a NestJS application.

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/serve-static

----------------------------------------

TITLE: Installing Terminus in NestJS
DESCRIPTION: Command to install the @nestjs/terminus package for health checks in a NestJS application.

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/terminus

----------------------------------------

TITLE: Installing Validation Dependencies in NestJS
DESCRIPTION: Commands to install required validation packages class-validator and class-transformer

LANGUAGE: bash
CODE:
$ npm i --save class-validator class-transformer

----------------------------------------

TITLE: Defining GraphQL Interface using Code-First Approach in TypeScript
DESCRIPTION: This snippet demonstrates how to create a GraphQL interface using the code-first approach in NestJS. It defines an abstract class with the @InterfaceType() decorator and includes fields with their respective types.

LANGUAGE: typescript
CODE:
import { Field, ID, InterfaceType } from '@nestjs/graphql';

@InterfaceType()
export abstract class Character {
  @Field(() => ID)
  id: string;

  @Field()
  name: string;
}

----------------------------------------

TITLE: Running NestJS Start Command
DESCRIPTION: Example of running the NestJS start command using npm scripts.

LANGUAGE: bash
CODE:
$ npm run start

----------------------------------------

TITLE: Creating Interface Resolver for GraphQL in NestJS
DESCRIPTION: This code demonstrates how to create an interface resolver in NestJS for GraphQL. It defines a resolver class for the Character interface with a field resolver for the 'friends' field, which will be shared across all object types implementing the interface.

LANGUAGE: typescript
CODE:
import { Resolver, ResolveField, Parent, Info } from '@nestjs/graphql';

@Resolver((type) => Character) // Reminder: Character is an interface
export class CharacterInterfaceResolver {
  @ResolveField(() => [Character])
  friends(
    @Parent() character, // Resolved object that implements Character
    @Info() { parentType }, // Type of the object that implements Character
    @Args('search', { type: () => String }) searchTerm: string,
  ) {
    // Get character's friends
    return [];
  }
}

----------------------------------------

TITLE: NestJS Linting and Formatting Commands
DESCRIPTION: Commands for running code linting with ESLint and formatting with Prettier in a NestJS project.

LANGUAGE: bash
CODE:
# Lint and autofix with eslint
$ npm run lint

# Format with prettier
$ npm run format

----------------------------------------

TITLE: Configuring HTTPS in NestJS Application
DESCRIPTION: This snippet demonstrates how to set up HTTPS options in a NestJS application using the NestFactory.create() method. It reads SSL certificate files and configures the application to listen on a specified port.

LANGUAGE: typescript
CODE:
const httpsOptions = {
  key: fs.readFileSync('./secrets/private-key.pem'),
  cert: fs.readFileSync('./secrets/public-certificate.pem'),
};
const app = await NestFactory.create(AppModule, {
  httpsOptions,
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Enabling Header Versioning in NestJS
DESCRIPTION: Shows how to enable Header versioning in a NestJS application. Header versioning uses a custom request header to specify the version.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.enableVersioning({
  type: VersioningType.HEADER,
  header: 'Custom-Header',
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Configuring Health Module with HTTP Support
DESCRIPTION: Configures the HealthModule to include HttpModule for HTTP health checks.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { TerminusModule } from '@nestjs/terminus';
import { HttpModule } from '@nestjs/axios';
import { HealthController } from './health.controller';

@Module({
  imports: [TerminusModule, HttpModule],
  controllers: [HealthController],
})
export class HealthModule {}

----------------------------------------

TITLE: Enabling Media Type Versioning in NestJS
DESCRIPTION: Illustrates how to enable Media Type versioning in a NestJS application. Media Type versioning uses the 'Accept' header of the request to specify the version.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.enableVersioning({
  type: VersioningType.MEDIA_TYPE,
  key: 'v=',
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Implementing Role-Check Middleware in NestJS GraphQL
DESCRIPTION: Demonstrates implementation of a field middleware that checks user roles against required field access roles defined in extensions metadata.

LANGUAGE: typescript
CODE:
export const checkRoleMiddleware: FieldMiddleware = async (
  ctx: MiddlewareContext,
  next: NextFn,
) => {
  const { info } = ctx;
  const { extensions } = info.parentType.getFields()[info.fieldName];

  /**
   * In a real-world application, the "userRole" variable
   * should represent the caller's (user) role (for example, "ctx.user.role").
   */
  const userRole = Role.USER;
  if (userRole === extensions.role) {
    // or just "return null" to ignore
    throw new ForbiddenException(
      `User does not have sufficient permissions to access "${info.fieldName}" field.`,
    );
  }
  return next();
};

----------------------------------------

TITLE: Handling Redis Context in Message Patterns
DESCRIPTION: Example of accessing Redis context information in message pattern handlers using decorators

LANGUAGE: typescript
CODE:
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RedisContext) {
  console.log(`Channel: ${context.getChannel()}`);
}

----------------------------------------

TITLE: Creating AllowedColor enum resolver in NestJS GraphQL
DESCRIPTION: Defines a resolver object for AllowedColor enum to map enum values to internal representations.

LANGUAGE: typescript
CODE:
export const allowedColorResolver: Record<keyof typeof AllowedColor, any> = {
  RED: '#f00',
};

----------------------------------------

TITLE: Configuring NestJS CLI for Swagger Plugin in JSON
DESCRIPTION: Configuration in nest-cli.json to enable the Swagger plugin with custom options.

LANGUAGE: json
CODE:
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "plugins": [
      {
        "name": "@nestjs/swagger",
        "options": {
          "classValidatorShim": false,
          "introspectComments": true
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Using Composite Auth Decorator in NestJS Controller
DESCRIPTION: Shows how to use the composite @Auth() decorator in a controller method. This simplifies the application of multiple authentication-related decorators.

LANGUAGE: typescript
CODE:
@Get('users')
@Auth('admin')
findAllUsers() {}

----------------------------------------

TITLE: Configuring Sentry Module in AppModule
DESCRIPTION: Integration of the Sentry module into the main NestJS application module configuration.

LANGUAGE: typescript
CODE:
import { Module } from "@nestjs/common";
import { SentryModule } from "@sentry/nestjs/setup";
import { AppController } from "./app.controller";
import { AppService } from "./app.service";

@Module({
  imports: [
    SentryModule.forRoot(),
    // ...other modules
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Creating a Custom Health Indicator in NestJS
DESCRIPTION: Implements a custom health indicator 'DogHealthIndicator' to demonstrate custom health checks.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { HealthIndicatorService } from '@nestjs/terminus';

export interface Dog {
  name: string;
  type: string;
}

@Injectable()
export class DogHealthIndicator {
  constructor(
    private readonly healthIndicatorService: HealthIndicatorService
  ) {}

  private dogs: Dog[] = [
    { name: 'Fido', type: 'goodboy' },
    { name: 'Rex', type: 'badboy' },
  ];

  async isHealthy(key: string){
    const indicator = this.healthIndicatorService.check(key);
    const badboys = this.dogs.filter(dog => dog.type === 'badboy');
    const isHealthy = badboys.length === 0;

    if (!isHealthy) {
      return indicator.down({ badboys: badboys.length });
    }

    return indicator.up();
  }
}

----------------------------------------

TITLE: Applying Multiple Versions in NestJS
DESCRIPTION: Shows how to apply multiple versions to a controller or route in NestJS using an array of version strings.

LANGUAGE: typescript
CODE:
@Controller({
  version: ['1', '2'],
})
export class CatsController {
  @Get('cats')
  findAll(): string {
    return 'This action returns all cats for version 1 or 2';
  }
}

----------------------------------------

TITLE: Enabling Shutdown Hooks in NestJS Application
DESCRIPTION: Demonstrates how to enable shutdown hooks in a NestJS application. The code creates an instance of the application, enables shutdown hooks, and starts listening on a specified port.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Starts listening for shutdown hooks
  app.enableShutdownHooks();

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Customizing schema name and description in Swagger for NestJS
DESCRIPTION: Demonstrates how to customize the schema name and add a description to the generated Swagger schema using the @ApiSchema decorator in NestJS.

LANGUAGE: typescript
CODE:
@ApiSchema({ name: 'CreateCatRequest' })
class CreateCatDto {}

@ApiSchema({ description: 'Description of the CreateCatDto schema' })
class CreateCatDto {}

----------------------------------------

TITLE: Defining Book class for GraphQL union in TypeScript
DESCRIPTION: Creates a Book class with a title field using NestJS GraphQL decorators for use in a union type.

LANGUAGE: typescript
CODE:
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Book {
  @Field()
  title: string;
}

----------------------------------------

TITLE: Installing WebSocket Dependencies in NestJS
DESCRIPTION: Command to install required packages for building WebSocket-based applications in NestJS.

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/websockets @nestjs/platform-socket.io

----------------------------------------

TITLE: Running NestJS Build Command
DESCRIPTION: Example of running the NestJS build command using npm scripts.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: Defining Return Models for NestJS OpenAPI
DESCRIPTION: Shows how to create a class with @ApiProperty decorators to specify a return model for a request in NestJS OpenAPI.

LANGUAGE: typescript
CODE:
export class Cat {
  @ApiProperty()
  id: number;

  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}

----------------------------------------

TITLE: Implementing Discord Event Handlers
DESCRIPTION: Service implementation showing how to handle Discord events using decorators like @Once and @On

LANGUAGE: typescript
CODE:
import { Injectable, Logger } from '@nestjs/common';
import { Context, On, Once, ContextOf } from 'necord';
import { Client } from 'discord.js';

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  @Once('ready')
  public onReady(@Context() [client]: ContextOf<'ready'>) {
    this.logger.log(`Bot logged in as ${client.user.username}`);
  }

  @On('warn')
  public onWarn(@Context() [message]: ContextOf<'warn'>) {
    this.logger.warn(message);
  }
}

----------------------------------------

TITLE: Configuring WS Adapter in NestJS Application
DESCRIPTION: TypeScript code showing how to use the WsAdapter in a NestJS application. This adapter enables the use of the ws library for WebSocket communication instead of Socket.IO.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.useWebSocketAdapter(new WsAdapter(app));

----------------------------------------

TITLE: Implementing OnApplicationShutdown Hook
DESCRIPTION: Shows how to implement the OnApplicationShutdown interface in a service class. The onApplicationShutdown method logs the received signal when the application is shutting down.

LANGUAGE: typescript
CODE:
@Injectable()
class UsersService implements OnApplicationShutdown {
  onApplicationShutdown(signal: string) {
    console.log(signal); // e.g. "SIGINT"
  }
}

----------------------------------------

TITLE: Configuring External Apollo Server Plugin
DESCRIPTION: Configuration example for using external Apollo Server plugins, specifically the ApolloServerOperationRegistry plugin.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  // ...
  plugins: [ApolloServerOperationRegistry({ /* options */})]
}),

----------------------------------------

TITLE: Creating ResultUnion type using createUnionType in NestJS GraphQL
DESCRIPTION: Defines a ResultUnion type composed of Author and Book classes using the createUnionType function from @nestjs/graphql.

LANGUAGE: typescript
CODE:
export const ResultUnion = createUnionType({
  name: 'ResultUnion',
  types: () => [Author, Book] as const,
});

----------------------------------------

TITLE: Installing Redis Dependencies for NestJS
DESCRIPTION: Command to install the ioredis package required for Redis-based microservices

LANGUAGE: bash
CODE:
$ npm i --save ioredis

----------------------------------------

TITLE: Registering Global Field Middleware in NestJS GraphQL
DESCRIPTION: Demonstrates how to register field middleware globally in the GraphQLModule configuration, applying it to all fields of object types.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  autoSchemaFile: 'schema.gql',
  buildSchemaOptions: {
    fieldMiddleware: [loggerMiddleware],
  },
})

----------------------------------------

TITLE: Advanced Plugin Configuration with Options
DESCRIPTION: Extended plugin configuration showing custom file suffixes and comment introspection settings.

LANGUAGE: javascript
CODE:
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "plugins": [
      {
        "name": "@nestjs/graphql",
        "options": {
          "typeFileNameSuffix": [".input.ts", ".args.ts"],
          "introspectComments": true
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Implementing Text Commands
DESCRIPTION: Example of implementing text-based commands using the @TextCommand decorator

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Context, TextCommand, TextCommandContext, Arguments } from 'necord';

@Injectable()
export class AppCommands {
  @TextCommand({
    name: 'ping',
    description: 'Responds with pong!',
  })
  public onPing(
    @Context() [message]: TextCommandContext,
    @Arguments() args: string[],
  ) {
    return message.reply('pong!');
  }
}

----------------------------------------

TITLE: Installing WS Library for NestJS WebSockets
DESCRIPTION: Bash command to install the @nestjs/platform-ws package, which provides the WsAdapter for using the ws library in NestJS WebSocket applications.

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/platform-ws

----------------------------------------

TITLE: Applying compression middleware in Express-based NestJS app
DESCRIPTION: Code snippet showing how to apply the compression middleware globally in a NestJS application using Express.

LANGUAGE: typescript
CODE:
import * as compression from 'compression';
// somewhere in your initialization file
app.use(compression());

----------------------------------------

TITLE: Accessing Handler and Controller Information in NestJS
DESCRIPTION: Demonstrates how to use the ExecutionContext to get information about the current handler and controller class.

LANGUAGE: typescript
CODE:
const methodKey = ctx.getHandler().name; // "create"
const className = ctx.getClass().name; // "CatsController"

----------------------------------------

TITLE: Defining ResultUnion in GraphQL SDL
DESCRIPTION: Declares Author and Book types and creates a ResultUnion using GraphQL Schema Definition Language.

LANGUAGE: graphql
CODE:
type Author {
  name: String!
}

type Book {
  title: String!
}

union ResultUnion = Author | Book

type Query {
  search: [ResultUnion!]!
}

----------------------------------------

TITLE: Configuring webpack with swc-loader for monorepo
DESCRIPTION: JavaScript configuration for webpack to use swc-loader in a monorepo setup.

LANGUAGE: javascript
CODE:
const swcDefaultConfig = require('@nestjs/cli/lib/compiler/defaults/swc-defaults').swcDefaultsFactory().swcOptions;

module.exports = {
  module: {
    rules: [
      {
        test: /\.ts$/,
        exclude: /node_modules/,
        use: {
          loader: 'swc-loader',
          options: swcDefaultConfig,
        },
      },
    ],
  },
};

----------------------------------------

TITLE: Creating Test Endpoint for Sentry
DESCRIPTION: Sample endpoint implementation to test Sentry error reporting functionality.

LANGUAGE: typescript
CODE:
@Get("debug-sentry")
getError() {
  throw new Error("My first Sentry error!");
}

----------------------------------------

TITLE: Setting Global QoS for MQTT Subscriptions in NestJS
DESCRIPTION: Configures a global Quality of Service (QoS) level for all MQTT subscriptions in a NestJS microservice.

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.MQTT,
  options: {
    url: 'mqtt://localhost:1883',
    subscribeOptions: {
      qos: 2
    },
  },
});

----------------------------------------

TITLE: Implementing Slash Commands
DESCRIPTION: Implementation of slash commands with options and validation using DTOs

LANGUAGE: typescript
CODE:
import { StringOption } from 'necord';

export class TextDto {
  @StringOption({
    name: 'text',
    description: 'Input your text here',
    required: true,
  })
  text: string;
}

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Context, SlashCommand, Options, SlashCommandContext } from 'necord';
import { TextDto } from './length.dto';

@Injectable()
export class AppCommands {
  @SlashCommand({
    name: 'length',
    description: 'Calculate the length of your text',
  })
  public async onLength(
    @Context() [interaction]: SlashCommandContext,
    @Options() { text }: TextDto,
  ) {
    return interaction.reply({
      content: `The length of your text is: ${text.length}`,
    });
  }
}

----------------------------------------

TITLE: Implementing Custom WebSocket Adapter in NestJS
DESCRIPTION: TypeScript code for a custom WebSocketAdapter implementation using the ws library. This adapter handles WebSocket connections, message routing, and server management in a NestJS application.

LANGUAGE: typescript
CODE:
import * as WebSocket from 'ws';
import { WebSocketAdapter, INestApplicationContext } from '@nestjs/common';
import { MessageMappingProperties } from '@nestjs/websockets';
import { Observable, fromEvent, EMPTY } from 'rxjs';
import { mergeMap, filter } from 'rxjs/operators';

export class WsAdapter implements WebSocketAdapter {
  constructor(private app: INestApplicationContext) {}

  create(port: number, options: any = {}): any {
    return new WebSocket.Server({ port, ...options });
  }

  bindClientConnect(server, callback: Function) {
    server.on('connection', callback);
  }

  bindMessageHandlers(
    client: WebSocket,
    handlers: MessageMappingProperties[],
    process: (data: any) => Observable<any>,
  ) {
    fromEvent(client, 'message')
      .pipe(
        mergeMap(data => this.bindMessageHandler(data, handlers, process)),
        filter(result => result),
      )
      .subscribe(response => client.send(JSON.stringify(response)));
  }

  bindMessageHandler(
    buffer,
    handlers: MessageMappingProperties[],
    process: (data: any) => Observable<any>,
  ): Observable<any> {
    const message = JSON.parse(buffer.data);
    const messageHandler = handlers.find(
      handler => handler.message === message.event,
    );
    if (!messageHandler) {
      return EMPTY;
    }
    return process(messageHandler.callback(message.data));
  }

  close(server) {
    server.close();
  }
}

----------------------------------------

TITLE: Specifying compression encodings in Fastify-based NestJS app
DESCRIPTION: Code snippet demonstrating how to specify preferred compression encodings (gzip and deflate) in a Fastify-based NestJS application.

LANGUAGE: typescript
CODE:
await app.register(compression, { encodings: ['gzip', 'deflate'] });

----------------------------------------

TITLE: Defining Field with Custom Role Metadata in TypeScript
DESCRIPTION: Shows how to attach custom role-based metadata to a GraphQL field using @Extensions decorator in NestJS.

LANGUAGE: typescript
CODE:
@Field()
@Extensions({ role: Role.ADMIN })
password: string;

----------------------------------------

TITLE: Multiple Resolver Schema Generation in NestJS GraphQL
DESCRIPTION: Shows how to generate a GraphQL schema from multiple resolver classes. Accepts an array of resolver class references to create a comprehensive schema.

LANGUAGE: typescript
CODE:
const schema = await gqlSchemaFactory.create([
  RecipesResolver,
  AuthorsResolver,
  PostsResolvers,
]);

----------------------------------------

TITLE: Installing Handlebars Template Engine
DESCRIPTION: Command to install the Handlebars template engine for HTML view rendering

LANGUAGE: bash
CODE:
$ npm install --save hbs

----------------------------------------

TITLE: Installing CQRS Module in NestJS
DESCRIPTION: Shows how to install and configure the CQRS module in a NestJS application

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/cqrs

----------------------------------------

TITLE: Registering MQTT Client with ClientsModule in NestJS
DESCRIPTION: Demonstrates how to register an MQTT client using the ClientsModule in NestJS, specifying the service name and connection options.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.MQTT,
        options: {
          url: 'mqtt://localhost:1883',
        }
      },
    ]),
  ]
  ...
})

----------------------------------------

TITLE: Updating NestJS Main Entry Point
DESCRIPTION: Configuration of the main.ts file to properly import Sentry instrumentation before other modules.

LANGUAGE: typescript
CODE:
// Import this first!
import "./instrument";

// Now import other modules
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
}

bootstrap();

----------------------------------------

TITLE: Extending BaseWsExceptionFilter in NestJS
DESCRIPTION: Shows how to create a custom exception filter by extending the BaseWsExceptionFilter. This allows for tailored exception handling while still leveraging the core functionality.

LANGUAGE: typescript
CODE:
import { Catch, ArgumentsHost } from '@nestjs/common';
import { BaseWsExceptionFilter } from '@nestjs/websockets';

@Catch()
export class AllExceptionsFilter extends BaseWsExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    super.catch(exception, host);
  }
}

----------------------------------------

TITLE: Setting Cookies in NestJS Response with Express
DESCRIPTION: Show how to attach a cookie to an outgoing response in a NestJS route handler using Express.

LANGUAGE: typescript
CODE:
@Get()
findAll(@Res({ passthrough: true }) response: Response) {
  response.cookie('key', 'value')
}

----------------------------------------

TITLE: Using Interceptors with GraphQL Mutations in NestJS
DESCRIPTION: Shows how to apply interceptors to GraphQL mutations for handling side effects or event processing.

LANGUAGE: typescript
CODE:
@Mutation()
@UseInterceptors(EventsInterceptor)
async upvotePost(@Args('postId') postId: number) {
  return this.postsService.upvoteById({ id: postId });
}

----------------------------------------

TITLE: Configurable Schema Generation in NestJS GraphQL
DESCRIPTION: Shows how to generate a schema with additional configuration options. Includes settings for schema validation and handling orphaned types that aren't explicitly referenced in the object graph.

LANGUAGE: typescript
CODE:
const schema = await gqlSchemaFactory.create([RecipesResolver], {
  skipCheck: true,
  orphanedTypes: [],
});

----------------------------------------

TITLE: Fastify MVC Setup
DESCRIPTION: Installation of required packages for Fastify MVC implementation

LANGUAGE: bash
CODE:
$ npm i --save @fastify/static @fastify/view handlebars

----------------------------------------

TITLE: Configuring Helmet CSP for Swagger UI
DESCRIPTION: Configuration for Content Security Policy when using Fastify and Helmet with Swagger UI.

LANGUAGE: typescript
CODE:
app.register(helmet, {
  contentSecurityPolicy: {
    directives: {
      defaultSrc: [`'self'`],
      styleSrc: [`'self'`, `'unsafe-inline'`],
      imgSrc: [`'self'`, 'data:', 'validator.swagger.io'],
      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],
    },
  },
});

// If you are not going to use CSP at all, you can use this:
app.register(helmet, {
  contentSecurityPolicy: false,
});

----------------------------------------

TITLE: Creating Custom Roles Decorator in NestJS
DESCRIPTION: Implementation of a custom Roles decorator using Reflector to attach role metadata to route handlers. This decorator allows specifying required roles for accessing specific routes.

LANGUAGE: typescript
CODE:
import { Reflector } from '@nestjs/core';

export const Roles = Reflector.createDecorator<string[]>();

----------------------------------------

TITLE: Installing SWC dependencies for NestJS
DESCRIPTION: Commands to install the necessary SWC packages for use with NestJS CLI.

LANGUAGE: bash
CODE:
$ npm i --save-dev @swc/cli @swc/core

----------------------------------------

TITLE: Handling WebSocket Events with Socket Instance in NestJS
DESCRIPTION: Example of handling WebSocket events with access to the Socket instance in NestJS.

LANGUAGE: typescript
CODE:
@SubscribeMessage('events')
handleEvent(
  @MessageBody() data: string,
  @ConnectedSocket() client: Socket,
): string {
  return data;
}

----------------------------------------

TITLE: Setting Cookies in NestJS Response with Fastify
DESCRIPTION: Show how to attach a cookie to an outgoing response in a NestJS route handler using Fastify.

LANGUAGE: typescript
CODE:
@Get()
findAll(@Res({ passthrough: true }) response: FastifyReply) {
  response.setCookie('key', 'value')
}

----------------------------------------

TITLE: Starting NestJS REPL from Command Line
DESCRIPTION: Command to start the NestJS application in REPL mode using npm.

LANGUAGE: bash
CODE:
$ npm run start -- --entryFile repl

----------------------------------------

TITLE: Defining Author Object Type (Code-First)
DESCRIPTION: Creates an Author object type using TypeScript decorators to generate the GraphQL schema. Demonstrates use of @ObjectType and @Field decorators.

LANGUAGE: typescript
CODE:
import { Field, Int, ObjectType } from '@nestjs/graphql';
import { Post } from './post';

@ObjectType()
export class Author {
  @Field(type => Int)
  id: number;

  @Field({ nullable: true })
  firstName?: string;

  @Field({ nullable: true })
  lastName?: string;

  @Field(type => [Post])
  posts: Post[];
}

----------------------------------------

TITLE: Custom Operation ID Configuration
DESCRIPTION: Example of customizing Swagger operation IDs using the operationIdFactory option.

LANGUAGE: typescript
CODE:
const options: SwaggerDocumentOptions =  {
  operationIdFactory: (
    controllerKey: string,
    methodKey: string
  ) => methodKey
};
const documentFactory = () => SwaggerModule.createDocument(app, config, options);

----------------------------------------

TITLE: Applying Versioning to Middleware in NestJS
DESCRIPTION: Demonstrates how to apply versioning to middleware in NestJS, configuring middleware for specific route versions.

LANGUAGE: typescript
CODE:
import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';
import { CatsController } from './cats/cats.controller';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes({ path: 'cats', method: RequestMethod.GET, version: '2' });
  }
}

----------------------------------------

TITLE: Customizing SWC builder options in nest-cli.json
DESCRIPTION: JSON configuration to customize SWC builder options, including specifying a custom .swcrc file path.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "builder": {
      "type": "swc",
      "options": {
        "swcrcPath": "infrastructure/.swcrc",
      }
    }
  }
}

----------------------------------------

TITLE: Using Custom User Decorator in NestJS Controller
DESCRIPTION: Shows how to use the custom @User() decorator in a controller method to access user information. This simplifies the process of extracting user data from the request object.

LANGUAGE: typescript
CODE:
@Get()
async findOne(@User() user: UserEntity) {
  console.log(user);
}

----------------------------------------

TITLE: Configuring Event Emitter Module in NestJS
DESCRIPTION: Setting up EventEmitterModule in the root AppModule of a NestJS application

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { EventEmitterModule } from '@nestjs/event-emitter';

@Module({
  imports: [
    EventEmitterModule.forRoot()
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Express MVC Configuration Setup
DESCRIPTION: Configuration of NestJS application with Express for MVC pattern, including static assets and view engine setup

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(
    AppModule,
  );

  app.useStaticAssets(join(__dirname, '..', 'public'));
  app.setBaseViewsDir(join(__dirname, '..', 'views'));
  app.setViewEngine('hbs');

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Defining a DTO with Swagger decorators in NestJS
DESCRIPTION: Shows how to define a Data Transfer Object (DTO) using Swagger decorators to provide additional metadata for API documentation generation.

LANGUAGE: typescript
CODE:
import { ApiProperty } from '@nestjs/swagger';

export class CreateCatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}

----------------------------------------

TITLE: Implementing Message Pattern Handler with Interceptor in TypeScript
DESCRIPTION: A TypeScript example showing how to apply an interceptor to a microservice message pattern handler. The handler implements an accumulate function that sums an array of numbers, wrapped with a TransformInterceptor.

LANGUAGE: typescript
CODE:
@UseInterceptors(new TransformInterceptor())
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}

----------------------------------------

TITLE: Enabling forceCloseConnections in NestJS Application Bootstrap
DESCRIPTION: This code snippet demonstrates how to enable the forceCloseConnections option when creating a NestJS application. It modifies the main.ts file to force the closure of connections, which is useful for scenarios with long-lived keep-alive connections.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    forceCloseConnections: true,
  });
  await app.listen(process.env.PORT ?? 3000);
}

bootstrap();

----------------------------------------

TITLE: Installing Sequelize Dependencies for NestJS
DESCRIPTION: Command to install Sequelize and related dependencies for a NestJS project. Includes both runtime and development dependencies.

LANGUAGE: bash
CODE:
$ npm install --save sequelize sequelize-typescript mysql2
$ npm install --save-dev @types/sequelize

----------------------------------------

TITLE: Excluding Routes from Global Prefix in NestJS
DESCRIPTION: This snippet demonstrates how to exclude specific routes from the global prefix. It uses an object with 'exclude' property to specify the path and HTTP method of the route to be excluded.

LANGUAGE: typescript
CODE:
app.setGlobalPrefix('v1', {
  exclude: [{ path: 'health', method: RequestMethod.GET }],
});

----------------------------------------

TITLE: Implementing Redirect Response with Fastify
DESCRIPTION: TypeScript code demonstrating how to properly implement a redirect response using Fastify in a NestJS controller.

LANGUAGE: typescript
CODE:
@Get()
index(@Res() res) {
  res.status(302).redirect('/login');
}

----------------------------------------

TITLE: Implementing Basic Authentication in NestJS
DESCRIPTION: Shows how to enable basic authentication using the @ApiBasicAuth decorator and corresponding DocumentBuilder setup.

LANGUAGE: typescript
CODE:
@ApiBasicAuth()
@Controller('cats')
export class CatsController {}

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addBasicAuth();

----------------------------------------

TITLE: Extending BaseRpcExceptionFilter in NestJS Microservices
DESCRIPTION: Demonstrates how to create a custom exception filter that extends the core BaseRpcExceptionFilter in NestJS microservices.

LANGUAGE: typescript
CODE:
import { Catch, ArgumentsHost } from '@nestjs/common';
import { BaseRpcExceptionFilter } from '@nestjs/microservices';

@Catch()
export class AllExceptionsFilter extends BaseRpcExceptionFilter {
  catch(exception: any, host: ArgumentsHost) {
    return super.catch(exception, host);
  }
}

----------------------------------------

TITLE: Comparing a Password with bcrypt Hash in TypeScript
DESCRIPTION: This snippet demonstrates how to compare a plain text password with a bcrypt hash to check if they match.

LANGUAGE: typescript
CODE:
const isMatch = await bcrypt.compare(password, hash);

----------------------------------------

TITLE: Creating Sequelize Instance Provider in NestJS
DESCRIPTION: Defines a custom provider for Sequelize instance in NestJS. Sets up database connection, adds models, and syncs database tables.

LANGUAGE: typescript
CODE:
import { Sequelize } from 'sequelize-typescript';
import { Cat } from '../cats/cat.entity';

export const databaseProviders = [
  {
    provide: 'SEQUELIZE',
    useFactory: async () => {
      const sequelize = new Sequelize({
        dialect: 'mysql',
        host: 'localhost',
        port: 3306,
        username: 'root',
        password: 'password',
        database: 'nest',
      });
      sequelize.addModels([Cat]);
      await sequelize.sync();
      return sequelize;
    },
  },
];

----------------------------------------

TITLE: Accessing HTTP Adapter Outside Application Context in NestJS
DESCRIPTION: Demonstrates how to obtain a reference to the HttpAdapter instance from outside the application context using the getHttpAdapter() method.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
const httpAdapter = app.getHttpAdapter();

----------------------------------------

TITLE: Passing Options to FastifyAdapter
DESCRIPTION: Example of how to pass options to the Fastify constructor through the FastifyAdapter in NestJS.

LANGUAGE: typescript
CODE:
new FastifyAdapter({ logger: true });

----------------------------------------

TITLE: Configuring Custom Provider Scope in NestJS
DESCRIPTION: Shows how to set up a custom provider with TRANSIENT scope using the provider registration object syntax.

LANGUAGE: typescript
CODE:
{
  provide: 'CACHE_MANAGER',
  useClass: CacheManager,
  scope: Scope.TRANSIENT,
}

----------------------------------------

TITLE: Defining DTO Class with Automatic Swagger Annotations in TypeScript
DESCRIPTION: Example of a CreateUserDto class that relies on the Swagger plugin for automatic property annotations.

LANGUAGE: typescript
CODE:
export class CreateUserDto {
  email: string;
  password: string;
  roles: RoleEnum[] = [];
  isEnabled?: boolean = true;
}

----------------------------------------

TITLE: Tagging Controllers in NestJS with OpenAPI
DESCRIPTION: Demonstrates how to attach a controller to a specific tag using the @ApiTags decorator in NestJS.

LANGUAGE: typescript
CODE:
@ApiTags('cats')
@Controller('cats')
export class CatsController {}

----------------------------------------

TITLE: Generic CI/CD PublishOptions Configuration
DESCRIPTION: Configuration object for publishing graphs with any CI/CD tool, showing required parameters and environment variables.

LANGUAGE: typescript
CODE:
const publishOptions = {
  apiKey: process.env.DEVTOOLS_API_KEY,
  repository: process.env.CI_PROJECT_NAME,
  owner: process.env.CI_PROJECT_ROOT_NAMESPACE,
  sha: process.env.CI_COMMIT_SHA,
  target: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA,
  trigger: process.env.CI_MERGE_REQUEST_DIFF_BASE_SHA ? 'pull' : 'push',
  branch: process.env.CI_COMMIT_BRANCH ?? process.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME,
};

----------------------------------------

TITLE: Configuring Webpack for HMR with CLI
DESCRIPTION: Webpack configuration file setup when using NestJS CLI. Includes HotModuleReplacementPlugin and other necessary plugins for hot reload functionality.

LANGUAGE: typescript
CODE:
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = function (options, webpack) {
  return {
    ...options,
    entry: ['webpack/hot/poll?100', options.entry],
    externals: [
      nodeExternals({
        allowlist: ['webpack/hot/poll?100'],
      }),
    ],
    plugins: [
      ...options.plugins,
      new webpack.HotModuleReplacementPlugin(),
      new webpack.WatchIgnorePlugin({
        paths: [/\.js$/, /\.d\.ts$/],
      }),
      new RunScriptWebpackPlugin({ name: options.output.filename, autoRestart: false }),
    ],
  };
};

----------------------------------------

TITLE: Binding Message Patterns to Specific Transports in NestJS
DESCRIPTION: Illustrates how to bind @MessagePattern decorators to specific transport strategies in a hybrid application. It includes examples for both NATS and TCP transports, showing how to handle different message patterns.

LANGUAGE: typescript
CODE:
@MessagePattern('time.us.*', Transport.NATS)
getDate(@Payload() data: number[], @Ctx() context: NatsContext) {
  console.log(`Subject: ${context.getSubject()}`); // e.g. "time.us.east"
  return new Date().toLocaleTimeString(...);
}
@MessagePattern({ cmd: 'time.us' }, Transport.TCP)
getTCPDate(@Payload() data: number[]) {
  return new Date().toLocaleTimeString(...);
}

----------------------------------------

TITLE: Using Route Config with Fastify in NestJS
DESCRIPTION: Example of how to use Fastify's route config feature in NestJS using the @RouteConfig decorator.

LANGUAGE: typescript
CODE:
@RouteConfig({ output: 'hello world' })
@Get()
index(@Req() req) {
  return req.routeConfig.output;
}

----------------------------------------

TITLE: Setting up Bearer Authentication in NestJS
DESCRIPTION: Demonstrates the implementation of bearer token authentication using @ApiBearerAuth decorator and DocumentBuilder configuration.

LANGUAGE: typescript
CODE:
@ApiBearerAuth()
@Controller('cats')
export class CatsController {}

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addBearerAuth();

----------------------------------------

TITLE: Configuring Jest for Swagger Plugin (Jest >= 29) in JSON
DESCRIPTION: Jest configuration for versions 29 and above to use the Swagger plugin AST transformer.

LANGUAGE: json
CODE:
{
  "transform": {
    "^.+\\.(t|j)s$": [
      "ts-jest",
      {
        "astTransformers": {
          "before": ["<path to the file created above>"]
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Defining a Basic Injectable Service in NestJS
DESCRIPTION: This snippet demonstrates how to create a basic injectable service in NestJS using the @Injectable() decorator. It defines a CatsService class with a private array of cats and a method to find all cats.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';

@Injectable()
export class CatsService {
  private readonly cats: Cat[] = [];

  findAll(): Cat[] {
    return this.cats;
  }
}

----------------------------------------

TITLE: Defining a Basic Injectable Service in NestJS
DESCRIPTION: This snippet demonstrates how to create a basic injectable service in NestJS using the @Injectable() decorator. It defines a CatsService class with a private array of cats and a method to find all cats.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';

@Injectable()
export class CatsService {
  private readonly cats: Cat[] = [];

  findAll(): Cat[] {
    return this.cats;
  }
}

----------------------------------------

TITLE: Setting Global Default Version in NestJS
DESCRIPTION: Shows how to set a global default version for all controllers and routes that don't have a specific version in NestJS.

LANGUAGE: typescript
CODE:
app.enableVersioning({
  // ...
  defaultVersion: '1'
  // or
  defaultVersion: ['1', '2']
  // or
  defaultVersion: VERSION_NEUTRAL
});

----------------------------------------

TITLE: Configuring Webpack Without CLI
DESCRIPTION: Complete webpack configuration for hot reload functionality without using NestJS CLI

LANGUAGE: typescript
CODE:
const webpack = require('webpack');
const path = require('path');
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = {
  entry: ['webpack/hot/poll?100', './src/main.ts'],
  target: 'node',
  externals: [
    nodeExternals({
      allowlist: ['webpack/hot/poll?100'],
    }),
  ],
  module: {
    rules: [
      {
        test: /.tsx?$/,
        use: 'ts-loader',
        exclude: /node_modules/,
      },
    ],
  },
  mode: 'development',
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  plugins: [new webpack.HotModuleReplacementPlugin(), new RunScriptWebpackPlugin({ name: 'server.js', autoRestart: false })],
  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'server.js',
  },
};

----------------------------------------

TITLE: Configuring Raw Body Access in NestJS Express Application
DESCRIPTION: Demonstrates how to enable raw body access when creating a NestJS application with Express adapter. Sets up the application with rawBody option enabled.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import type { NestExpressApplication } from '@nestjs/platform-express';
import { AppModule } from './app.module';

// in the "bootstrap" function
const app = await NestFactory.create<NestExpressApplication>(AppModule, {
  rawBody: true,
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Exception Response Structure in NestJS WebSocket
DESCRIPTION: Shows the structure of the exception message emitted by NestJS when a WsException is thrown. It includes a status and message field.

LANGUAGE: typescript
CODE:
{
  status: 'error',
  message: 'Invalid credentials.'
}

----------------------------------------

TITLE: Creating AST Transformer for ts-jest in JavaScript
DESCRIPTION: Configuration file for integrating the Swagger plugin with ts-jest for e2e tests.

LANGUAGE: javascript
CODE:
const transformer = require('@nestjs/swagger/plugin');

module.exports.name = 'nestjs-swagger-transformer';
module.exports.version = 1;

module.exports.factory = (cs) => {
  return transformer.before(
    {
      // @nestjs/swagger/plugin options (can be empty)
    },
    cs.program, // "cs.tsCompiler.program" for older versions of Jest (<= v27)
  );
};

----------------------------------------

TITLE: Applying Cookie Parser Middleware in NestJS
DESCRIPTION: Apply the cookie-parser middleware globally in a NestJS application using Express.

LANGUAGE: typescript
CODE:
import * as cookieParser from 'cookie-parser';
// somewhere in your initialization file
app.use(cookieParser());

----------------------------------------

TITLE: Accessing MQTT Packet Properties in NestJS MessagePattern
DESCRIPTION: Shows how to access custom properties from an MQTT packet within a NestJS message handler.

LANGUAGE: typescript
CODE:
@MessagePattern('replace-emoji')
replaceEmoji(@Payload() data: string, @Ctx() context: MqttContext): string {
  const { properties: { userProperties } } = context.getPacket();
  return userProperties['x-version'] === '1.0.0' ? '🐱' : '🐈';
}

----------------------------------------

TITLE: Accessing Lazy Loaded Service
DESCRIPTION: Shows how to obtain and use a service from a lazy loaded module using moduleRef.

LANGUAGE: typescript
CODE:
const { LazyModule } = await import('./lazy.module');
const moduleRef = await this.lazyModuleLoader.load(() => LazyModule);

const { LazyService } = await import('./lazy.service');
const lazyService = moduleRef.get(LazyService);

----------------------------------------

TITLE: Initializing Command Factory
DESCRIPTION: Bootstrap code showing how to initialize and run a nest-commander application with optional logging configuration.

LANGUAGE: typescript
CODE:
import { CommandFactory } from 'nest-commander';
import { AppModule } from './app.module';
import { LogService } './log.service';

async function bootstrap() {
  await CommandFactory.run(AppModule, new LogService());

  // or, if you only want to print Nest's warnings and errors
  await CommandFactory.run(AppModule, ['warn', 'error']);
}

bootstrap();

----------------------------------------

TITLE: Configuring Body Parser Size Limit in Express
DESCRIPTION: Shows how to configure the body parser size limit in Express to handle larger request bodies than the default 100kb limit.

LANGUAGE: typescript
CODE:
app.useBodyParser('json', { limit: '10mb' });

----------------------------------------

TITLE: Using Custom Paginated Response Decorator in NestJS
DESCRIPTION: Demonstrates how to use the custom @ApiPaginatedResponse decorator in a NestJS controller endpoint.

LANGUAGE: typescript
CODE:
@ApiPaginatedResponse(CatDto)
async findAll(): Promise<PaginatedDto<CatDto>> {}

----------------------------------------

TITLE: Comparing Bootstrap Times in Different Implementations
DESCRIPTION: Code examples showing different ways to bootstrap a Node.js application using Express, NestJS with HTTP server, NestJS standalone, and raw Node.js. Used for comparing startup performance.

LANGUAGE: typescript
CODE:
// #1 Express
import * as express from 'express';

async function bootstrap() {
  const app = express();
  app.get('/', (req, res) => res.send('Hello world!'));
  await new Promise<void>((resolve) => app.listen(3000, resolve));
}
bootstrap();

// #2 Nest (with @nestjs/platform-express)
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { logger: ['error'] });
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

// #3 Nest as a Standalone application (no HTTP server)
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { AppService } from './app.service';

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule, {
    logger: ['error'],
  });
  console.log(app.get(AppService).getHello());
}
bootstrap();

// #4 Raw Node.js script
async function bootstrap() {
  console.log('Hello world!');
}
bootstrap();

----------------------------------------

TITLE: Throwing WsException in NestJS WebSocket
DESCRIPTION: Demonstrates how to throw a WebSocket-specific exception in NestJS. The WsException is used instead of HttpException for WebSocket applications.

LANGUAGE: typescript
CODE:
throw new WsException('Invalid credentials.');

----------------------------------------

TITLE: Retrieving Providers from Static Modules in NestJS
DESCRIPTION: This snippet shows how to retrieve provider instances from static modules in a NestJS standalone application. It demonstrates both non-strict and strict mode retrieval using the get() and select() methods.

LANGUAGE: typescript
CODE:
const tasksService = app.get(TasksService);

LANGUAGE: typescript
CODE:
const tasksService = app.select(TasksModule).get(TasksService, { strict: true });

----------------------------------------

TITLE: Using Wildcards in MQTT Topics with NestJS
DESCRIPTION: Demonstrates the use of wildcards in MQTT topic subscriptions within a NestJS message handler.

LANGUAGE: typescript
CODE:
@MessagePattern('sensors/+/temperature/+')
getTemperature(@Ctx() context: MqttContext) {
  console.log(`Topic: ${context.getTopic()}`);
}

----------------------------------------

TITLE: Implementing Basic Command Class
DESCRIPTION: Complete example of a command class implementation with options parsing and command handling logic. Shows usage of @Command and @Option decorators with various parameter types.

LANGUAGE: typescript
CODE:
import { Command, CommandRunner, Option } from 'nest-commander';
import { LogService } from './log.service';

interface BasicCommandOptions {
  string?: string;
  boolean?: boolean;
  number?: number;
}

@Command({ name: 'basic', description: 'A parameter parse' })
export class BasicCommand extends CommandRunner {
  constructor(private readonly logService: LogService) {
    super()
  }

  async run(
    passedParam: string[],
    options?: BasicCommandOptions,
  ): Promise<void> {
    if (options?.boolean !== undefined && options?.boolean !== null) {
      this.runWithBoolean(passedParam, options.boolean);
    } else if (options?.number) {
      this.runWithNumber(passedParam, options.number);
    } else if (options?.string) {
      this.runWithString(passedParam, options.string);
    } else {
      this.runWithNone(passedParam);
    }
  }

  @Option({
    flags: '-n, --number [number]',
    description: 'A basic number parser',
  })
  parseNumber(val: string): number {
    return Number(val);
  }

  @Option({
    flags: '-s, --string [string]',
    description: 'A string return',
  })
  parseString(val: string): string {
    return val;
  }

  @Option({
    flags: '-b, --boolean [boolean]',
    description: 'A boolean parser',
  })
  parseBoolean(val: string): boolean {
    return JSON.parse(val);
  }

  runWithString(param: string[], option: string): void {
    this.logService.log({ param, string: option });
  }

  runWithNumber(param: string[], option: number): void {
    this.logService.log({ param, number: option });
  }

  runWithBoolean(param: string[], option: boolean): void {
    this.logService.log({ param, boolean: option });
  }

  runWithNone(param: string[]): void {
    this.logService.log({ param });
  }
}

----------------------------------------

TITLE: Implementing Pipe Order in NestJS Controller
DESCRIPTION: Shows the execution order of pipes in a NestJS controller. The GeneralValidationPipe runs first for query, params, and body objects, followed by RouteSpecificPipe in the same order.

LANGUAGE: typescript
CODE:
@UsePipes(GeneralValidationPipe)
@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @UsePipes(RouteSpecificPipe)
  @Patch(':id')
  updateCat(
    @Body() body: UpdateCatDTO,
    @Param() params: UpdateCatParams,
    @Query() query: UpdateCatQuery,
  ) {
    return this.catsService.updateCat(body, params, query);
  }
}

----------------------------------------

TITLE: Handling circular dependencies in Swagger documentation for NestJS
DESCRIPTION: Demonstrates how to handle circular dependencies when generating Swagger documentation in NestJS using a lazy function.

LANGUAGE: typescript
CODE:
@ApiProperty({ type: () => Node })
node: Node;

----------------------------------------

TITLE: Starting a NestJS Application with CLI
DESCRIPTION: Compiles and runs a NestJS application using the 'nest start' command. It supports various options for debugging, watching files, and specifying build configurations.

LANGUAGE: bash
CODE:
$ nest start <name> [options]

----------------------------------------

TITLE: Accessing WebSocket Server Instance in NestJS
DESCRIPTION: Demonstrates how to access the native WebSocket server instance in a NestJS gateway.

LANGUAGE: typescript
CODE:
@WebSocketServer()
server: Server;

----------------------------------------

TITLE: Throwing RpcException in NestJS Microservices
DESCRIPTION: Demonstrates how to throw an RpcException in a NestJS microservice. RpcException is used instead of HttpException for microservices.

LANGUAGE: typescript
CODE:
throw new RpcException('Invalid credentials.');

----------------------------------------

TITLE: Adding NPM Script for Development
DESCRIPTION: Package.json script configuration for running the application with hot reload enabled

LANGUAGE: json
CODE:
"start:dev": "nest build --webpack --webpackPath webpack-hmr.config.js --watch"

----------------------------------------

TITLE: Integration Testing CatsApiService with NestJS TestingModule
DESCRIPTION: Integration test for CatsApiService using NestJS TestingModule and nock for HTTP mocking.

LANGUAGE: typescript
CODE:
import { Test } from '@nestjs/testing';
import * as nock from 'nock';

describe('Cats Api Service Integration Test', () => {
  let catsApiService: CatsApiService;

  beforeAll(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    }).compile();

    catsApiService = moduleRef.get(CatsApiService);
  });

  afterEach(() => {
    nock.cleanAll();
  });

  it('should fetch cat by id using real HttpClient', async () => {
    const catFixture: Cat = { id: 1, name: 'Catty' };

    nock('https://api.cats.com')
      .get('/cats/1')
      .reply(200, catFixture);

    const cat = await catsApiService.getCatById(1);
    expect(cat).toEqual<Cat>(catFixture);
  });
});

----------------------------------------

TITLE: Implementing Guard Order in NestJS Controller
DESCRIPTION: Demonstrates the execution order of multiple guards in a NestJS controller. Guards are executed in the order they are bound, with Guard1 executing before Guard2, and both executing before Guard3.

LANGUAGE: typescript
CODE:
@UseGuards(Guard1, Guard2)
@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @UseGuards(Guard3)
  @Get()
  getCats(): Cats[] {
    return this.catsService.getCats();
  }
}

----------------------------------------

TITLE: Defining enums for Swagger in NestJS
DESCRIPTION: Demonstrates how to define and use enums in Swagger documentation for NestJS, including setting up enum properties and using them with query parameters.

LANGUAGE: typescript
CODE:
@ApiProperty({ enum: ['Admin', 'Moderator', 'User']})
role: UserRole;

export enum UserRole {
  Admin = 'Admin',
  Moderator = 'Moderator',
  User = 'User',
}

@ApiQuery({ name: 'role', enum: UserRole })
async filterByRole(@Query('role') role: UserRole = UserRole.User) {}

----------------------------------------

TITLE: Excluding Properties with Class-Transformer in TypeScript
DESCRIPTION: Demonstrates how to create a UserEntity class with property exclusion using the @Exclude decorator from class-transformer. Shows basic entity structure with a constructor for partial initialization.

LANGUAGE: typescript
CODE:
import { Exclude } from 'class-transformer';

export class UserEntity {
  id: number;
  firstName: string;
  lastName: string;

  @Exclude()
  password: string;

  constructor(partial: Partial<UserEntity>) {
    Object.assign(this, partial);
  }
}

----------------------------------------

TITLE: Excluding Properties with Class-Transformer in TypeScript
DESCRIPTION: Demonstrates how to create a UserEntity class with property exclusion using the @Exclude decorator from class-transformer. Shows basic entity structure with a constructor for partial initialization.

LANGUAGE: typescript
CODE:
import { Exclude } from 'class-transformer';

export class UserEntity {
  id: number;
  firstName: string;
  lastName: string;

  @Exclude()
  password: string;

  constructor(partial: Partial<UserEntity>) {
    Object.assign(this, partial);
  }
}

----------------------------------------

TITLE: Implementing OnModuleInit Hook in TypeScript
DESCRIPTION: Demonstrates how to implement the OnModuleInit interface in a service class to execute code during module initialization. The onModuleInit method logs a message when the module is initialized.

LANGUAGE: typescript
CODE:
import { Injectable, OnModuleInit } from '@nestjs/common';

@Injectable()
export class UsersService implements OnModuleInit {
  onModuleInit() {
    console.log(`The module has been initialized.`);
  }
}

----------------------------------------

TITLE: Retrieving Request and Response Objects in NestJS HTTP Context
DESCRIPTION: Shows how to use the switchToHttp() method of ArgumentsHost to get the request and response objects in an HTTP context.

LANGUAGE: typescript
CODE:
const ctx = host.switchToHttp();
const request = ctx.getRequest<Request>();
const response = ctx.getResponse<Response>();

----------------------------------------

TITLE: Initializing Prisma in NestJS Project
DESCRIPTION: Command to initialize Prisma in the NestJS project, creating initial setup files.

LANGUAGE: bash
CODE:
$ npx prisma init

----------------------------------------

TITLE: Configuring DevtoolsModule in AppModule
DESCRIPTION: Integration of DevtoolsModule into the application's root module with conditional activation based on environment.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    DevtoolsModule.register({
      http: process.env.NODE_ENV !== 'production',
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: NestJS AWS Lambda Handler Implementation
DESCRIPTION: Implementation of AWS Lambda handler using NestJS with serverless-express integration for HTTP endpoints.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import serverlessExpress from '@codegenie/serverless-express';
import { Callback, Context, Handler } from 'aws-lambda';
import { AppModule } from './app.module';

let server: Handler;

async function bootstrap(): Promise<Handler> {
  const app = await NestFactory.create(AppModule);
  await app.init();

  const expressApp = app.getHttpAdapter().getInstance();
  return serverlessExpress({ app: expressApp });
}

export const handler: Handler = async (
  event: any,
  context: Context,
  callback: Callback,
) => {
  server = server ?? (await bootstrap());
  return server(event, context, callback);
};

----------------------------------------

TITLE: Configuring enum schemas in Swagger for NestJS
DESCRIPTION: Shows how to configure enum schemas to make them reusable and avoid duplication in generated client-side code.

LANGUAGE: typescript
CODE:
export class CatDetail {
  @ApiProperty({ enum: CatBreed, enumName: 'CatBreed' })
  breed: CatBreed;
}

----------------------------------------

TITLE: Configuring CatsModule with MongoDB Integration in NestJS
DESCRIPTION: Sets up the CatsModule with necessary imports, controllers, and providers for MongoDB integration in NestJS.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';
import { catsProviders } from './cats.providers';
import { DatabaseModule } from '../database/database.module';

@Module({
  imports: [DatabaseModule],
  controllers: [CatsController],
  providers: [
    CatsService,
    ...catsProviders,
  ],
})
export class CatsModule {}

----------------------------------------

TITLE: Implementing ConfigService with Dynamic Options
DESCRIPTION: ConfigService implementation that uses injected options for dynamic configuration.

LANGUAGE: typescript
CODE:
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';
import { Injectable, Inject } from '@nestjs/common';
import { EnvConfig } from './interfaces';

@Injectable()
export class ConfigService {
  private readonly envConfig: EnvConfig;

  constructor(@Inject('CONFIG_OPTIONS') private options: Record<string, any>) {
    const filePath = `${process.env.NODE_ENV || 'development'}.env`;
    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);
    this.envConfig = dotenv.parse(fs.readFileSync(envFile));
  }

  get(key: string): string {
    return this.envConfig[key];
  }
}

----------------------------------------

TITLE: Configuring GraphPublisher in NestJS Bootstrap
DESCRIPTION: Sets up the main.ts bootstrap file to publish application graphs using GraphPublisher. Includes conditional logic for CI/CD vs regular application startup.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const shouldPublishGraph = process.env.PUBLISH_GRAPH === "true";

  const app = await NestFactory.create(AppModule, {
    snapshot: true,
    preview: shouldPublishGraph,
  });

  if (shouldPublishGraph) {
    await app.init();

    const publishOptions = { ... } // NOTE: this options object will vary depending on the CI/CD provider you're using
    const graphPublisher = new GraphPublisher(app);
    await graphPublisher.publish(publishOptions);

    await app.close();
  } else {
    await app.listen(process.env.PORT ?? 3000);
  }
}

----------------------------------------

TITLE: Displaying 'Cannot resolve dependency' Error in NestJS
DESCRIPTION: This snippet shows the typical error message when NestJS cannot resolve dependencies of a provider. It includes potential solutions and common causes of the error.

LANGUAGE: bash
CODE:
Nest can't resolve dependencies of the <provider> (?). Please make sure that the argument <unknown_token> at index [<index>] is available in the <module> context.

Potential solutions:
- Is <module> a valid NestJS module?
- If <unknown_token> is a provider, is it part of the current <module>?
- If <unknown_token> is exported from a separate @Module, is that module imported within <module>?
  @Module({
    imports: [ /* the Module containing <unknown_token> */ ]
  })

----------------------------------------

TITLE: Configuring NestJS Application with Error Handling
DESCRIPTION: Application configuration that enables graph snapshot and prevents automatic termination on errors for debugging purposes.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule, {
  snapshot: true,
  abortOnError: false,
});

----------------------------------------

TITLE: Resolving Circular Dependency for CommonService in TypeScript
DESCRIPTION: This snippet demonstrates how to use the forwardRef() function to resolve a circular dependency for the CommonService class in NestJS.

LANGUAGE: typescript
CODE:
@Injectable()
export class CommonService {
  constructor(
    @Inject(forwardRef(() => CatsService))
    private catsService: CatsService,
  ) {}
}

----------------------------------------

TITLE: Implementing ComplexityPlugin in NestJS
DESCRIPTION: Creates a plugin class that implements query complexity analysis using Apollo Server. Sets maximum complexity limits and uses field extensions and simple estimators to calculate query complexity.

LANGUAGE: typescript
CODE:
import { GraphQLSchemaHost } from '@nestjs/graphql';
import { Plugin } from '@nestjs/apollo';
import {
  ApolloServerPlugin,
  BaseContext,
  GraphQLRequestListener,
} from '@apollo/server';
import { GraphQLError } from 'graphql';
import {
  fieldExtensionsEstimator,
  getComplexity,
  simpleEstimator,
} from 'graphql-query-complexity';

@Plugin()
export class ComplexityPlugin implements ApolloServerPlugin {
  constructor(private gqlSchemaHost: GraphQLSchemaHost) {}

  async requestDidStart(): Promise<GraphQLRequestListener<BaseContext>> {
    const maxComplexity = 20;
    const { schema } = this.gqlSchemaHost;

    return {
      async didResolveOperation({ request, document }) {
        const complexity = getComplexity({
          schema,
          operationName: request.operationName,
          query: document,
          variables: request.variables,
          estimators: [
            fieldExtensionsEstimator(),
            simpleEstimator({ defaultComplexity: 1 }),
          ],
        });
        if (complexity > maxComplexity) {
          throw new GraphQLError(
            `Query is too complex: ${complexity}. Maximum allowed complexity: ${maxComplexity}`,
          );
        }
        console.log('Query Complexity:', complexity);
      },
    };
  }
}

----------------------------------------

TITLE: Injecting UsersService in AuthService
DESCRIPTION: Example of injecting UsersService into AuthService, showcasing dependency injection in NestJS.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';

@Injectable()
export class AuthService {
  constructor(private usersService: UsersService) {}
  /*
    Implementation that makes use of this.usersService
  */
}

----------------------------------------

TITLE: Resolving Circular Dependency for CommonService in JavaScript
DESCRIPTION: This snippet shows how to use the forwardRef() function to resolve a circular dependency for the CommonService class in NestJS using JavaScript syntax.

LANGUAGE: javascript
CODE:
@Injectable()
@Dependencies(forwardRef(() => CatsService))
export class CommonService {
  constructor(catsService) {
    this.catsService = catsService;
  }
}

----------------------------------------

TITLE: Installing gRPC Dependencies
DESCRIPTION: Commands to install required gRPC packages for NestJS microservices

LANGUAGE: bash
CODE:
$ npm i --save @grpc/grpc-js @grpc/proto-loader

----------------------------------------

TITLE: Configuring Fastify Secure Session
DESCRIPTION: Registration and configuration of fastify-secure-session plugin with encryption settings

LANGUAGE: typescript
CODE:
import secureSession from '@fastify/secure-session';

// somewhere in your initialization file
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
);
await app.register(secureSession, {
  secret: 'averylogphrasebiggerthanthirtytwochars',
  salt: 'mq9hDxBVDbspDR6n',
});

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: GitHub Actions workflow configuration for publishing NestJS application graphs on push to master and pull requests.

LANGUAGE: yaml
CODE:
name: Devtools

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  publish:
    if: github.actor!= 'dependabot[bot]'
    name: Publish graph
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo "COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >>\${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        shell: bash
        run: |
          echo "COMMIT_SHA=\${GITHUB_SHA}" >> \${GITHUB_ENV}
      - name: Publish
        run: PUBLISH_GRAPH=true npm run start
        env:
          DEVTOOLS_API_KEY: CHANGE_THIS_TO_YOUR_API_KEY
          REPOSITORY_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          TARGET_SHA: ${{ github.event.pull_request.base.sha }}

----------------------------------------

TITLE: Implementing ConfigModule with ConfigurableModuleClass
DESCRIPTION: Updated ConfigModule implementation using the ConfigurableModuleClass generated by ConfigurableModuleBuilder.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { ConfigService } from './config.service';
import { ConfigurableModuleClass } from './config.module-definition';

@Module({
  providers: [ConfigService],
  exports: [ConfigService],
})
export class ConfigModule extends ConfigurableModuleClass {}

----------------------------------------

TITLE: Defining GraphQL Interface using Schema-First Approach
DESCRIPTION: This snippet shows how to define a GraphQL interface using the schema-first approach. It uses SDL (Schema Definition Language) to declare the interface structure.

LANGUAGE: graphql
CODE:
interface Character {
  id: ID!
  name: String!
}

----------------------------------------

TITLE: Multiple Throttler Definitions Configuration
DESCRIPTION: Advanced configuration with multiple rate limiting rules for different time windows and limits

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ThrottlerModule.forRoot([
      {
        name: 'short',
        ttl: 1000,
        limit: 3,
      },
      {
        name: 'medium',
        ttl: 10000,
        limit: 20
      },
      {
        name: 'long',
        ttl: 60000,
        limit: 100
      }
    ]),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Using AsyncLocalStorage in NestJS Service
DESCRIPTION: Demonstrates how to inject and use AsyncLocalStorage in a NestJS service to access request-specific data without passing it explicitly.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(
    private readonly als: AsyncLocalStorage,
    private readonly catsRepository: CatsRepository,
  ) {}

  getCatForUser() {
    const userId = this.als.getStore()["userId"] as number;
    return this.catsRepository.getForUser(userId);
  }
}

----------------------------------------

TITLE: Configuring TLS Support for Microservices
DESCRIPTION: Example of configuring TLS encryption for secure microservice communication.

LANGUAGE: typescript
CODE:
import * as fs from 'fs';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { MicroserviceOptions, Transport } from '@nestjs/microservices';

async function bootstrap() {
  const key = fs.readFileSync('<pathToKeyFile>', 'utf8').toString();
  const cert = fs.readFileSync('<pathToCertFile>', 'utf8').toString();

  const app = await NestFactory.createMicroservice<MicroserviceOptions>(
    AppModule,
    {
      transport: Transport.TCP,
      options: {
        tlsOptions: {
          key,
          cert,
        },
      },
    },
  );

  await app.listen();
}
bootstrap();

----------------------------------------

TITLE: Applying Pipes to Custom Decorators in NestJS
DESCRIPTION: Shows how to apply pipes, such as ValidationPipe, to custom decorators in NestJS. This enables automatic validation of data extracted by custom decorators.

LANGUAGE: typescript
CODE:
@Get()
async findOne(
  @User(new ValidationPipe({ validateCustomDecorators: true }))
  user: UserEntity,
) {
  console.log(user);
}

----------------------------------------

TITLE: Configuring Brotli compression quality in Fastify-based NestJS app
DESCRIPTION: Example of how to configure Brotli compression quality using BROTLI_PARAM_QUALITY in a Fastify-based NestJS application.

LANGUAGE: typescript
CODE:
import { constants } from 'zlib';
// somewhere in your initialization file
await app.register(compression, { brotliOptions: { params: { [constants.BROTLI_PARAM_QUALITY]: 4 } } });

----------------------------------------

TITLE: Determining Application Context Type in NestJS
DESCRIPTION: Demonstrates how to use the getType() method of ArgumentsHost to determine the current application context type (HTTP, RPC, or GraphQL).

LANGUAGE: typescript
CODE:
if (host.getType() === 'http') {
  // do something that is only important in the context of regular HTTP requests (REST)
} else if (host.getType() === 'rpc') {
  // do something that is only important in the context of Microservice requests
} else if (host.getType<GqlContextType>() === 'graphql') {
  // do something that is only important in the context of GraphQL requests
}

----------------------------------------

TITLE: Implementing __resolveType for Schema-First GraphQL Interface in TypeScript
DESCRIPTION: This code demonstrates how to implement the __resolveType method for a schema-first GraphQL interface in NestJS. It creates a resolver class with a method to determine the concrete type of an interface instance.

LANGUAGE: typescript
CODE:
@Resolver('Character')
export class CharactersResolver {
  @ResolveField()
  __resolveType(value) {
    if ('age' in value) {
      return Person;
    }
    return null;
  }
}

----------------------------------------

TITLE: Asynchronous WebSocket Responses in NestJS
DESCRIPTION: Shows how to implement asynchronous responses using Observables in a NestJS WebSocket gateway.

LANGUAGE: typescript
CODE:
@SubscribeMessage('events')
onEvent(@MessageBody() data: unknown): Observable<WsResponse<number>> {
  const event = 'events';
  const response = [1, 2, 3];

  return from(response).pipe(
    map(data => ({ event, data })),
  );
}

----------------------------------------

TITLE: Creating AsyncLocalStorage Module in NestJS
DESCRIPTION: Defines an AlsModule that provides an instance of AsyncLocalStorage as a custom provider. This module can be imported and used throughout the application.

LANGUAGE: typescript
CODE:
@Module({
  providers: [
    {
      provide: AsyncLocalStorage,
      useValue: new AsyncLocalStorage(),
    },
  ],
  exports: [AsyncLocalStorage],
})
export class AlsModule {}

----------------------------------------

TITLE: Installing NestJS Devtools Integration Package
DESCRIPTION: Command to install the required Devtools integration package via npm.

LANGUAGE: bash
CODE:
$ npm i @nestjs/devtools-integration

----------------------------------------

TITLE: Configuring MQTT Client with User Properties in NestJS
DESCRIPTION: Sets up an MQTT client with predefined user properties using ClientProxyFactory in a NestJS module.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { ClientProxyFactory, Transport } from '@nestjs/microservices';

@Module({
  providers: [
    {
      provide: 'API_v1',
      useFactory: () =>
        ClientProxyFactory.create({
          transport: Transport.MQTT,
          options: {
            url: 'mqtt://localhost:1833',
            userProperties: { 'x-version': '1.0.0' },
          },
        }),
    },
  ],
})
export class ApiModule {}

----------------------------------------

TITLE: Uploading Single File in NestJS
DESCRIPTION: Example of how to handle single file upload in NestJS using FileInterceptor and UploadedFile decorator.

LANGUAGE: typescript
CODE:
@Post('upload')
@UseInterceptors(FileInterceptor('file'))
uploadFile(@UploadedFile() file: Express.Multer.File) {
  console.log(file);
}

----------------------------------------

TITLE: Webpack Configuration for Lazy Loading
DESCRIPTION: Required TypeScript configuration settings in tsconfig.json for enabling code splitting with Webpack.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "node"
  }
}

----------------------------------------

TITLE: Configuring Mercurius Driver for NestJS GraphQL
DESCRIPTION: Setting up the GraphQLModule with Mercurius driver for Fastify users in NestJS.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';

@Module({
  imports: [
    GraphQLModule.forRoot<MercuriusDriverConfig>({
      driver: MercuriusDriver,
      graphiql: true,
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Property-based Injection in NestJS
DESCRIPTION: Shows how to use property-based injection with @Inject decorator as an alternative to constructor-based injection for specific use cases.

LANGUAGE: typescript
CODE:
import { Injectable, Inject } from '@nestjs/common';

@Injectable()
export class HttpService<T> {
  @Inject('HTTP_OPTIONS')
  private readonly httpClient: T;
}

----------------------------------------

TITLE: Creating a Health Module in NestJS
DESCRIPTION: Defines a HealthModule that imports the TerminusModule for health check functionality.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { TerminusModule } from '@nestjs/terminus';

@Module({
  imports: [TerminusModule]
})
export class HealthModule {}

----------------------------------------

TITLE: Exporting Serialized Graph to File
DESCRIPTION: Code snippet for saving the application's dependency graph to a JSON file after initialization.

LANGUAGE: typescript
CODE:
await app.listen(process.env.PORT ?? 3000); // OR await app.init()
fs.writeFileSync('./graph.json', app.get(SerializedGraph).toString());

----------------------------------------

TITLE: Resolving Scoped Providers with ModuleRef in NestJS
DESCRIPTION: Illustrates how to use ModuleRef.resolve() method to dynamically resolve scoped providers (transient or request-scoped). This example resolves a TransientService in the onModuleInit lifecycle hook.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService implements OnModuleInit {
  private transientService: TransientService;
  constructor(private moduleRef: ModuleRef) {}

  async onModuleInit() {
    this.transientService = await this.moduleRef.resolve(TransientService);
  }
}

----------------------------------------

TITLE: Implementing File Size Validation Pipe in NestJS
DESCRIPTION: Custom pipe implementation for validating file size in NestJS file uploads.

LANGUAGE: typescript
CODE:
import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';

@Injectable()
export class FileSizeValidationPipe implements PipeTransform {
  transform(value: any, metadata: ArgumentMetadata) {
    // "value" is an object containing the file's attributes and metadata
    const oneKb = 1000;
    return value.size < oneKb;
  }
}

----------------------------------------

TITLE: Injecting LazyModuleLoader in NestJS Service
DESCRIPTION: Demonstrates how to inject the LazyModuleLoader class into a service using constructor dependency injection. Shows both TypeScript and JavaScript syntax variations.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(private lazyModuleLoader: LazyModuleLoader) {}
}

----------------------------------------

TITLE: NestJS CLI Plugin Configuration
DESCRIPTION: Configuration for enabling the GraphQL plugin in nest-cli.json with default settings.

LANGUAGE: javascript
CODE:
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "plugins": ["@nestjs/graphql"]
  }
}

----------------------------------------

TITLE: Building NestJS Library
DESCRIPTION: CLI command to build a specific library in the monorepo

LANGUAGE: bash
CODE:
$ nest build my-library

----------------------------------------

TITLE: Configuring Sentry Instrumentation
DESCRIPTION: Initial Sentry setup code that must be imported before any other modules. Configures tracing and profiling integrations with sample rates.

LANGUAGE: typescript
CODE:
const Sentry = require("@sentry/nestjs");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

// Ensure to call this before requiring any other modules!
Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    // Add our Profiling integration
    nodeProfilingIntegration(),
  ],

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling
  // This is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});

----------------------------------------

TITLE: Schema Generation with Custom Scalars in NestJS GraphQL
DESCRIPTION: Demonstrates how to include custom scalar types when generating a GraphQL schema. Takes both resolver classes and scalar classes as arguments.

LANGUAGE: typescript
CODE:
const schema = await gqlSchemaFactory.create(
  [RecipesResolver, AuthorsResolver, PostsResolvers],
  [DurationScalar, DateScalar],
);

----------------------------------------

TITLE: Installing NestJS CLI and Project Setup
DESCRIPTION: Initial setup commands to install NestJS CLI globally and create a new project

LANGUAGE: bash
CODE:
$ npm i -g @nestjs/cli
$ nest new project

----------------------------------------

TITLE: Dynamically Instantiating Custom Classes with ModuleRef in NestJS
DESCRIPTION: Shows how to use ModuleRef.create() method to dynamically instantiate a class that wasn't previously registered as a provider. This example creates an instance of CatsFactory in the onModuleInit lifecycle hook.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService implements OnModuleInit {
  private catsFactory: CatsFactory;
  constructor(private moduleRef: ModuleRef) {}

  async onModuleInit() {
    this.catsFactory = await this.moduleRef.create(CatsFactory);
  }
}

----------------------------------------

TITLE: Using OmitType in NestJS GraphQL
DESCRIPTION: This example shows how to use OmitType to create a new type (UpdateUserInput) by omitting specific properties from an existing type (CreateUserInput).

LANGUAGE: typescript
CODE:
@InputType()
export class UpdateUserInput extends OmitType(CreateUserInput, [
  'email',
] as const) {}

----------------------------------------

TITLE: Enabling URI Versioning in NestJS
DESCRIPTION: Demonstrates how to enable URI versioning in a NestJS application. URI versioning uses the version in the request URI, such as 'https://example.com/v1/route'.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
// or "app.enableVersioning()"
app.enableVersioning({
  type: VersioningType.URI,
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Configuring Entity Serialization in MikroORM
DESCRIPTION: This snippet demonstrates how to configure serialization options for a MikroORM entity, including hiding properties and custom serialization of relations.

LANGUAGE: typescript
CODE:
@Entity()
export class Book {
  @Property({ hidden: true }) // Equivalent of class-transformer's `@Exclude`
  hiddenField = Date.now();

  @Property({ persist: false }) // Similar to class-transformer's `@Expose()`. Will only exist in memory, and will be serialized.
  count?: number;

  @ManyToOne({
    serializer: (value) => value.name,
    serializedName: 'authorName',
  }) // Equivalent of class-transformer's `@Transform()`
  author: Author;
}

----------------------------------------

TITLE: Creating Input Type for User Creation in NestJS GraphQL
DESCRIPTION: This snippet defines a CreateUserInput class using TypeScript and NestJS decorators. It represents the structure for creating a new user with email, password, and firstName fields.

LANGUAGE: typescript
CODE:
@InputType()
class CreateUserInput {
  @Field()
  email: string;

  @Field()
  password: string;

  @Field()
  firstName: string;
}

----------------------------------------

TITLE: Listening to MQTT Server Events in NestJS
DESCRIPTION: Shows how to listen for internal events emitted by an MQTT server in NestJS.

LANGUAGE: typescript
CODE:
server.on<MqttEvents>('error', (err) => {
  console.error(err);
});

----------------------------------------

TITLE: Handlebars Template Example
DESCRIPTION: Basic HTML template using Handlebars syntax for rendering dynamic content

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>App</title>
  </head>
  <body>
    {{ "{{ message }}" }}
  </body>
</html>

----------------------------------------

TITLE: Configuring Request-Scoped Controller in NestJS
DESCRIPTION: Demonstrates how to set up a controller with REQUEST scope using the @Controller decorator options.

LANGUAGE: typescript
CODE:
@Controller({
  path: 'cats',
  scope: Scope.REQUEST,
})
export class CatsController {}

----------------------------------------

TITLE: Basic SDL Schema Generation with NestJS GraphQL
DESCRIPTION: Demonstrates the basic setup for generating a GraphQL SDL schema using NestJS's GraphQLSchemaBuilderModule. Creates an application instance and uses GraphQLSchemaFactory to generate a schema from a resolver.

LANGUAGE: typescript
CODE:
async function generateSchema() {
  const app = await NestFactory.create(GraphQLSchemaBuilderModule);
  await app.init();

  const gqlSchemaFactory = app.get(GraphQLSchemaFactory);
  const schema = await gqlSchemaFactory.create([RecipesResolver]);
  console.log(printSchema(schema));
}

----------------------------------------

TITLE: Configuring CSRF Protection Middleware for Express
DESCRIPTION: Implementation of csrf-csrf middleware in Express-based NestJS applications. Includes token generation, validation, and protection setup. Requires session middleware or cookie-parser to be initialized first.

LANGUAGE: typescript
CODE:
import { doubleCsrf } from 'csrf-csrf';
// ...
// somewhere in your initialization file
const {
  invalidCsrfTokenError, // This is provided purely for convenience if you plan on creating your own middleware.
  generateToken, // Use this in your routes to generate and provide a CSRF hash, along with a token cookie and token.
  validateRequest, // Also a convenience if you plan on making your own middleware.
  doubleCsrfProtection, // This is the default CSRF protection middleware.
} = doubleCsrf(doubleCsrfOptions);
app.use(doubleCsrfProtection);

----------------------------------------

TITLE: Configuring SWC builder in nest-cli.json
DESCRIPTION: JSON configuration to set SWC as the default builder in the NestJS CLI configuration file.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "builder": "swc"
  }
}

----------------------------------------

TITLE: Registering Custom Plugin in NestJS Module
DESCRIPTION: Example of registering the custom LoggingPlugin as a provider in a NestJS module.

LANGUAGE: typescript
CODE:
@Module({
  providers: [LoggingPlugin],
})
export class CommonModule {}

----------------------------------------

TITLE: Setting up Cookie Authentication in NestJS
DESCRIPTION: Demonstrates how to implement cookie-based authentication using @ApiCookieAuth decorator and DocumentBuilder configuration with optional session ID.

LANGUAGE: typescript
CODE:
@ApiCookieAuth()
@Controller('cats')
export class CatsController {}

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addCookieAuth('optional-session-id');

----------------------------------------

TITLE: Dynamic Template Rendering Controller
DESCRIPTION: Controller implementation for dynamic template rendering using @Res decorator

LANGUAGE: typescript
CODE:
import { Get, Controller, Res, Render } from '@nestjs/common';
import { Response } from 'express';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private appService: AppService) {}

  @Get()
  root(@Res() res: Response) {
    return res.render(
      this.appService.getViewName(),
      { message: 'Hello world!' },
    );
  }
}

----------------------------------------

TITLE: Implementing Dynamic Query-Level Complexity
DESCRIPTION: Example of implementing dynamic complexity calculation for a GraphQL query based on input arguments

LANGUAGE: typescript
CODE:
@Query({ complexity: (options: ComplexityEstimatorArgs) => options.args.count * options.childComplexity })
items(@Args('count') count: number) {
  return this.itemsService.getItems({ count });
}

----------------------------------------

TITLE: Enabling Subscriptions with Mercurius Driver in NestJS
DESCRIPTION: Configuration to enable GraphQL subscriptions using the Mercurius driver in NestJS. It shows basic setup and how to use a custom PubSub implementation.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot<MercuriusDriverConfig>({
  driver: MercuriusDriver,
  subscription: true,
}),

// Using custom PubSub implementation
GraphQLModule.forRoot<MercuriusDriverConfig>({
  driver: MercuriusDriver,
  subscription: {
    emitter: require('mqemitter-redis')({
      port: 6579,
      host: '127.0.0.1',
    }),
  },
});

----------------------------------------

TITLE: Using ContextIdFactory for Consistent Provider Instances in NestJS
DESCRIPTION: Demonstrates how to use ContextIdFactory to generate a context identifier, ensuring consistent instances across multiple resolve() calls. This example compares two resolved instances of TransientService.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService implements OnModuleInit {
  constructor(private moduleRef: ModuleRef) {}

  async onModuleInit() {
    const contextId = ContextIdFactory.create();
    const transientServices = await Promise.all([
      this.moduleRef.resolve(TransientService, contextId),
      this.moduleRef.resolve(TransientService, contextId),
    ]);
    console.log(transientServices[0] === transientServices[1]); // true
  }
}

----------------------------------------

TITLE: Starting NestJS application with SWC builder
DESCRIPTION: Command to start a NestJS application using the SWC builder for faster compilation.

LANGUAGE: bash
CODE:
$ nest start -b swc
# OR nest start --builder swc

----------------------------------------

TITLE: Docker Build and Run Commands
DESCRIPTION: Commands for building and running a Docker container for a NestJS application, including pushing to a registry.

LANGUAGE: bash
CODE:
docker build -t my-nestjs-app .
docker run -p 3000:3000 my-nestjs-app
docker login
docker tag my-nestjs-app your-dockerhub-username/my-nestjs-app
docker push your-dockerhub-username/my-nestjs-app

----------------------------------------

TITLE: Installing csrf-csrf Package for Express
DESCRIPTION: Command to install the csrf-csrf package for implementing CSRF protection in Express-based NestJS applications.

LANGUAGE: bash
CODE:
$ npm i csrf-csrf

----------------------------------------

TITLE: Configuring Event Emitter Options in NestJS
DESCRIPTION: Advanced configuration options for EventEmitterModule including wildcards, delimiters, and listener settings

LANGUAGE: typescript
CODE:
EventEmitterModule.forRoot({
  wildcard: false,
  delimiter: '.',
  newListener: false,
  removeListener: false,
  maxListeners: 10,
  verboseMemoryLeak: false,
  ignoreErrors: false,
});

----------------------------------------

TITLE: Installing GraphQL Query Complexity Package
DESCRIPTION: Command to install the graphql-query-complexity package as a project dependency

LANGUAGE: bash
CODE:
$ npm install --save graphql-query-complexity

----------------------------------------

TITLE: Defining AllowedColor enum in GraphQL SDL
DESCRIPTION: Declares the AllowedColor enum using GraphQL Schema Definition Language for schema-first approach.

LANGUAGE: graphql
CODE:
enum AllowedColor {
  RED
  GREEN
  BLUE
}

----------------------------------------

TITLE: Apollo Gateway Configuration
DESCRIPTION: Configuration for Apollo Gateway service that combines federated schemas

LANGUAGE: typescript
CODE:
import { IntrospectAndCompose } from '@apollo/gateway';
import { ApolloGatewayDriver, ApolloGatewayDriverConfig } from '@nestjs/apollo';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloGatewayDriverConfig>({
      driver: ApolloGatewayDriver,
      server: {
        cors: true,
      },
      gateway: {
        supergraphSdl: new IntrospectAndCompose({
          subgraphs: [
            { name: 'users', url: 'http://user-service/graphql' },
            { name: 'posts', url: 'http://post-service/graphql' },
          ],
        }),
      },
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring SWC with .swcrc file
DESCRIPTION: JSON configuration for SWC in a .swcrc file, including parser options and other settings.

LANGUAGE: json
CODE:
{
  "$schema": "https://swc.rs/schema.json",
  "sourceMaps": true,
  "jsc": {
    "parser": {
      "syntax": "typescript",
      "decorators": true,
      "dynamicImport": true
    },
    "baseUrl": "./"
  },
  "minify": false
}

----------------------------------------

TITLE: GitLab CI Pipeline Configuration
DESCRIPTION: GitLab CI/CD pipeline configuration for publishing NestJS application graphs, including dependency installation and graph publishing stages.

LANGUAGE: yaml
CODE:
image: node:16

stages:
  - build

cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

install_dependencies:
  stage: build
  script:
    - npm ci

publish_graph:
  stage: build
  needs:
    - install_dependencies
  script: npm run start
  variables:
    PUBLISH_GRAPH: 'true'
    DEVTOOLS_API_KEY: 'CHANGE_THIS_TO_YOUR_API_KEY'

----------------------------------------

TITLE: Installing compression package for Fastify in NestJS
DESCRIPTION: Command to install the @fastify/compress package for use with Fastify in a NestJS application.

LANGUAGE: bash
CODE:
$ npm i --save @fastify/compress

----------------------------------------

TITLE: Preventing Event Loss in NestJS
DESCRIPTION: Using EventEmitterReadinessWatcher to ensure events are not missed during application bootstrap

LANGUAGE: typescript
CODE:
await this.eventEmitterReadinessWatcher.waitUntilReady();
await this.eventEmitter.emit(
  'order.created',
  new OrderCreatedEvent({ orderId: 1, payload: {} }),
);

----------------------------------------

TITLE: Applying Directive on Query Handler in NestJS GraphQL
DESCRIPTION: Shows how to apply a built-in directive (@deprecated) on a query handler in a code-first approach.

LANGUAGE: typescript
CODE:
@Directive('@deprecated(reason: "This query will be removed in the next version")')
@Query(() => Author, { name: 'author' })
async getAuthor(@Args({ name: 'id', type: () => Int }) id: number) {
  return this.authorsService.findOneById(id);
}

----------------------------------------

TITLE: Installing MikroORM and NestJS dependencies
DESCRIPTION: This command installs the core MikroORM package, NestJS integration, and SQLite driver.

LANGUAGE: bash
CODE:
$ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/sqlite

----------------------------------------

TITLE: Resolving Circular Dependency with Forward Reference in JavaScript
DESCRIPTION: This snippet shows how to use the forwardRef() function to resolve a circular dependency between CatsService and CommonService in NestJS using JavaScript syntax.

LANGUAGE: javascript
CODE:
@Injectable()
@Dependencies(forwardRef(() => CommonService))
export class CatsService {
  constructor(commonService) {
    this.commonService = commonService;
  }
}

----------------------------------------

TITLE: Installing NestJS Event Emitter Package
DESCRIPTION: Command to install the @nestjs/event-emitter package using npm

LANGUAGE: shell
CODE:
$ npm i --save @nestjs/event-emitter

----------------------------------------

TITLE: Implementing Custom Transport Client in TypeScript
DESCRIPTION: Creates a custom client proxy class for handling communication with external services, including methods for connecting, publishing messages, and dispatching events.

LANGUAGE: typescript
CODE:
import { ClientProxy, ReadPacket, WritePacket } from '@nestjs/microservices';

class GoogleCloudPubSubClient extends ClientProxy {
  async connect(): Promise<any> {
    console.log('connect');
  }

  async close() {
    console.log('close');
  }

  async dispatchEvent(packet: ReadPacket<any>): Promise<any> {
    return console.log('event to dispatch: ', packet);
  }

  publish(
    packet: ReadPacket<any>,
    callback: (packet: WritePacket<any>) => void,
  ): Function {
    console.log('message:', packet);
    setTimeout(() => callback({ response: packet.data }), 5000);
    return () => console.log('teardown');
  }

  unwrap<T = never>(): T {
    throw new Error('Method not implemented.');
  }
}

----------------------------------------

TITLE: Installing Apollo Federation Dependencies
DESCRIPTION: Install required dependencies for implementing Apollo Federation in NestJS

LANGUAGE: bash
CODE:
$ npm install --save @apollo/subgraph

----------------------------------------

TITLE: Configuring Fastify Helmet with GraphQL CSP
DESCRIPTION: Configuration of Fastify Helmet with specific Content Security Policy settings for GraphQL playground compatibility.

LANGUAGE: typescript
CODE:
await app.register(fastifyHelmet, {
   contentSecurityPolicy: {
     directives: {
       defaultSrc: [`'self'`, 'unpkg.com'],
       styleSrc: [
         `'self'`,
         `'unsafe-inline'`,
         'cdn.jsdelivr.net',
         'fonts.googleapis.com',
         'unpkg.com',
       ],
       fontSrc: [`'self'`, 'fonts.gstatic.com', 'data:'],
       imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],
       scriptSrc: [
         `'self'`,
         `https: 'unsafe-inline'`,
         `cdn.jsdelivr.net`,
         `'unsafe-eval'`,
       ],
     },
   },
 });

// If you are not going to use CSP at all, you can use this:
await app.register(fastifyHelmet, {
  contentSecurityPolicy: false,
});

----------------------------------------

TITLE: Applying Role-Check Middleware to Field in NestJS
DESCRIPTION: Shows how to combine the @Extensions decorator with middleware registration on a GraphQL field.

LANGUAGE: typescript
CODE:
@Field({ middleware: [checkRoleMiddleware] })
@Extensions({ role: Role.ADMIN })
password: string;

----------------------------------------

TITLE: Configuring Entity Repository in NestJS Module
DESCRIPTION: This snippet shows how to use MikroOrmModule.forFeature() to register entity repositories in a NestJS module.

LANGUAGE: typescript
CODE:
@Module({
  imports: [MikroOrmModule.forFeature([Photo])],
  providers: [PhotoService],
  controllers: [PhotoController],
})
export class PhotoModule {}

----------------------------------------

TITLE: Creating Custom Directive Transformer in TypeScript
DESCRIPTION: Demonstrates how to create a custom directive transformer function for an 'upper' directive that converts string results to uppercase. It uses mapSchema to iterate through the schema and modify field resolvers.

LANGUAGE: typescript
CODE:
import { getDirective, MapperKind, mapSchema } from '@graphql-tools/utils';
import { defaultFieldResolver, GraphQLSchema } from 'graphql';

export function upperDirectiveTransformer(
  schema: GraphQLSchema,
  directiveName: string,
) {
  return mapSchema(schema, {
    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
      const upperDirective = getDirective(
        schema,
        fieldConfig,
        directiveName,
      )?.[0];

      if (upperDirective) {
        const { resolve = defaultFieldResolver } = fieldConfig;

        // Replace the original resolver with a function that *first* calls
        // the original resolver, then converts its result to upper case
        fieldConfig.resolve = async function (source, args, context, info) {
          const result = await resolve(source, args, context, info);
          if (typeof result === 'string') {
            return result.toUpperCase();
          }
          return result;
        };
        return fieldConfig;
      }
    },
  });
}

----------------------------------------

TITLE: Creating Event Listeners in NestJS
DESCRIPTION: Implementing event listeners using the @OnEvent decorator with various patterns including wildcards

LANGUAGE: typescript
CODE:
@OnEvent('order.created')
handleOrderCreatedEvent(payload: OrderCreatedEvent) {
  // handle and process "OrderCreatedEvent" event
}

LANGUAGE: typescript
CODE:
@OnEvent('order.*')
handleOrderEvents(payload: OrderCreatedEvent | OrderRemovedEvent | OrderUpdatedEvent) {
  // handle and process an event
}

LANGUAGE: typescript
CODE:
@OnEvent('**')
handleEverything(payload: any) {
  // handle and process an event
}

----------------------------------------

TITLE: Using Custom Decorator in NestJS Controller
DESCRIPTION: Demonstrates how to apply a custom decorator to a controller method.

LANGUAGE: typescript
CODE:
@Post()
@Roles(['admin'])
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}

----------------------------------------

TITLE: Using Wildcards in NATS Subject Patterns in NestJS
DESCRIPTION: Shows how to use wildcards in NATS subject patterns for flexible message routing in NestJS microservices.

LANGUAGE: typescript
CODE:
@MessagePattern('time.us.*')
getDate(@Payload() data: number[], @Ctx() context: NatsContext) {
  console.log(`Subject: ${context.getSubject()}`); // e.g. "time.us.east"
  return new Date().toLocaleTimeString(...);
}

----------------------------------------

TITLE: Installing CSRF Protection Package for Fastify
DESCRIPTION: Command to install the @fastify/csrf-protection package for implementing CSRF protection in Fastify-based NestJS applications.

LANGUAGE: bash
CODE:
$ npm i --save @fastify/csrf-protection

----------------------------------------

TITLE: Code-First User Entity Definition
DESCRIPTION: TypeScript class defining User entity with Federation decorators

LANGUAGE: typescript
CODE:
import { Directive, Field, ID, ObjectType } from '@nestjs/graphql';

@ObjectType()
@Directive('@key(fields: "id")')
export class User {
  @Field(() => ID)
  id: number;

  @Field()
  name: string;
}

----------------------------------------

TITLE: Mocking MikroORM Repository for Testing in NestJS
DESCRIPTION: This snippet demonstrates how to mock a MikroORM repository for testing purposes in a NestJS module using the getRepositoryToken() function.

LANGUAGE: typescript
CODE:
@Module({
  providers: [
    PhotoService,
    {
      // or when you have a custom repository: `provide: PhotoRepository`
      provide: getRepositoryToken(Photo), 
      useValue: mockedRepository,
    },
  ],
})
export class PhotoModule {}

----------------------------------------

TITLE: Using a Dynamic Module in NestJS
DESCRIPTION: Shows how to import and configure a dynamic module in another module. This example demonstrates importing the DatabaseModule with specific configuration.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { DatabaseModule } from './database/database.module';
import { User } from './users/entities/user.entity';

@Module({
  imports: [DatabaseModule.forRoot([User])],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring HTTP Module with Static Options
DESCRIPTION: Example of configuring the HTTP module with static options like timeout and maxRedirects.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    HttpModule.register({
      timeout: 5000,
      maxRedirects: 5,
    }),
  ],
  providers: [CatsService],
})
export class CatsModule {}

----------------------------------------

TITLE: Custom Error Handling Proxy in TypeScript
DESCRIPTION: Implements a custom client proxy that extends ClientTCP to provide custom error serialization, converting errors into RpcExceptions.

LANGUAGE: typescript
CODE:
import { ClientTcp, RpcException } from '@nestjs/microservices';

class ErrorHandlingProxy extends ClientTCP {
  serializeError(err: Error) {
    return new RpcException(err);
  }
}

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([{
      name: 'CustomProxy',
      customClass: ErrorHandlingProxy,
    }]),
  ]
})
export class AppModule

----------------------------------------

TITLE: Generating a Salt with bcrypt in TypeScript
DESCRIPTION: This snippet shows how to generate a salt using the bcrypt package in TypeScript.

LANGUAGE: typescript
CODE:
const salt = await bcrypt.genSalt();

----------------------------------------

TITLE: Implementing Custom GraphQL Driver in NestJS
DESCRIPTION: Shows how to create a custom GraphQL driver using express-graphql as an example.

LANGUAGE: typescript
CODE:
import { AbstractGraphQLDriver, GqlModuleOptions } from '@nestjs/graphql';
import { graphqlHTTP } from 'express-graphql';

class ExpressGraphQLDriver extends AbstractGraphQLDriver {
  async start(options: GqlModuleOptions<any>): Promise<void> {
    options = await this.graphQlFactory.mergeWithSchema(options);

    const { httpAdapter } = this.httpAdapterHost;
    httpAdapter.use(
      '/graphql',
      graphqlHTTP({
        schema: options.schema,
        graphiql: true,
      }),
    );
  }

  async stop() {}
}

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  driver: ExpressGraphQLDriver,
});

----------------------------------------

TITLE: Installing Necord Dependencies
DESCRIPTION: Command to install Necord and Discord.js packages required for Discord bot development

LANGUAGE: bash
CODE:
$ npm install necord discord.js

----------------------------------------

TITLE: Installing Prisma Client
DESCRIPTION: Command to install Prisma Client in the NestJS project for database access.

LANGUAGE: bash
CODE:
$ npm install @prisma/client

----------------------------------------

TITLE: Installing HTTP Module Dependencies
DESCRIPTION: Commands to install the required NestJS HTTP module and Axios packages.

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/axios axios

----------------------------------------

TITLE: Resolving Circular Dependency between Modules in TypeScript
DESCRIPTION: This snippet demonstrates how to use the forwardRef() function to resolve circular dependencies between CommonModule and CatsModule in NestJS.

LANGUAGE: typescript
CODE:
@Module({
  imports: [forwardRef(() => CatsModule)],
})
export class CommonModule {}

LANGUAGE: typescript
CODE:
@Module({
  imports: [forwardRef(() => CommonModule)],
})
export class CatsModule {}

----------------------------------------

TITLE: Configuring ServeStaticModule in AppModule
DESCRIPTION: This code snippet demonstrates how to import and configure the ServeStaticModule in the root AppModule. It sets up the module to serve static content from a specified directory.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';

@Module({
  imports: [
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'client'),
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Installing Redis and Socket.IO Adapter Dependencies in NestJS
DESCRIPTION: Command to install Redis, Socket.IO, and the Redis adapter for Socket.IO in a NestJS project. These packages are required for implementing a Redis-based Socket.IO adapter.

LANGUAGE: bash
CODE:
$ npm i --save redis socket.io @socket.io/redis-adapter

----------------------------------------

TITLE: Defining GraphQL Schema for Mutations
DESCRIPTION: Illustrates the GraphQL schema definition for mutations, including types for Author, Post, Query, and the upvotePost mutation.

LANGUAGE: graphql
CODE:
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String
  votes: Int
}

type Query {
  author(id: Int!): Author
}

type Mutation {
  upvotePost(postId: Int!): Post
}

----------------------------------------

TITLE: Initializing NestJS REPL Configuration
DESCRIPTION: Sets up the basic REPL configuration file for a NestJS application. Creates a bootstrap function that initializes the REPL with the application's root module.

LANGUAGE: typescript
CODE:
import { repl } from '@nestjs/core';
import { AppModule } from './src/app.module';

async function bootstrap() {
  await repl(AppModule);
}
bootstrap();

----------------------------------------

TITLE: Manual Message Acknowledgement in NestJS RabbitMQ Handler
DESCRIPTION: Shows how to manually acknowledge messages in a NestJS RabbitMQ message handler.

LANGUAGE: typescript
CODE:
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {
  const channel = context.getChannelRef();
  const originalMsg = context.getMessage();

  channel.ack(originalMsg);
}

----------------------------------------

TITLE: Implementing SSE Route Handler in NestJS
DESCRIPTION: Demonstrates how to create a Server-Sent Events endpoint in a NestJS controller using the @Sse() decorator. The handler returns an Observable that emits MessageEvent objects every second with a data payload.

LANGUAGE: typescript
CODE:
@Sse('sse')
sse(): Observable<MessageEvent> {
  return interval(1000).pipe(map((_) => ({ data: { hello: 'world' } })));
}

----------------------------------------

TITLE: Implementing Event Pattern Handler
DESCRIPTION: Example of implementing an event pattern handler for event-based messaging.

LANGUAGE: typescript
CODE:
@EventPattern('user_created')
async handleUserCreated(data: Record<string, unknown>) {
  // business logic
}

----------------------------------------

TITLE: Configuring Vitest for NestJS
DESCRIPTION: TypeScript configuration for setting up Vitest in a NestJS project, including SWC plugin and path aliases.

LANGUAGE: typescript
CODE:
import swc from 'unplugin-swc';
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    globals: true,
    root: './',
  },
  plugins: [
    swc.vite({
      module: { type: 'es6' },
    }),
  ],
  resolve: {
    alias: {
      'src': resolve(__dirname, './src'),
    },
  },
});

----------------------------------------

TITLE: Registering Redis Client Module in NestJS
DESCRIPTION: Configuration for registering Redis client using ClientsModule with transport and connection options

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.REDIS,
        options: {
          host: 'localhost',
          port: 6379,
        }
      },
    ]),
  ]
  ...
})

----------------------------------------

TITLE: Implementing Author Resolver (Schema-First)
DESCRIPTION: Creates a resolver class for the Author type using the schema-first approach. Demonstrates use of @Resolver, @Query, and @ResolveField decorators.

LANGUAGE: typescript
CODE:
@Resolver('Author')
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query('author')
  async getAuthor(@Args('id') id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField('posts')
  async getPosts(@Parent() author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}

----------------------------------------

TITLE: REPL Interactive Commands Example
DESCRIPTION: Demonstrates how to interact with services and controllers using the REPL interface, including retrieving instances and calling methods.

LANGUAGE: typescript
CODE:
> get(AppService).getHello()
'Hello World!'

> appController = get(AppController)
AppController { appService: AppService {} }
> await appController.getHello()
'Hello World!'

----------------------------------------

TITLE: Configuring Apollo Sandbox for NestJS GraphQL
DESCRIPTION: Setting up Apollo Sandbox as the GraphQL IDE for local development in NestJS.

LANGUAGE: typescript
CODE:
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      playground: false,
      plugins: [ApolloServerPluginLandingPageLocalDefault()],
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: MessageEvent Interface Definition
DESCRIPTION: TypeScript interface defining the structure of SSE MessageEvent objects according to the specification. Includes required data property and optional id, type, and retry properties.

LANGUAGE: typescript
CODE:
export interface MessageEvent {
  data: string | object;
  id?: string;
  type?: string;
  retry?: number;
}

----------------------------------------

TITLE: Implementing Message Pattern Handler for Kafka in NestJS
DESCRIPTION: Example of a message pattern handler for Kafka in a NestJS controller, including payload and context usage.

LANGUAGE: typescript
CODE:
@Controller()
export class HeroesController {
  @MessagePattern('hero.kill.dragon')
  killDragon(@Payload() message: KillDragonMessage, @Ctx() context: KafkaContext) {
    const dragonId = message.dragonId;
    const items = [
      { id: 1, name: 'Mythical Sword' },
      { id: 2, name: 'Key to Dungeon' },
    ];
    console.log(`Topic: ${context.getTopic()}`);
    return items;
  }
}

----------------------------------------

TITLE: Using Custom Directive in Code-First Approach
DESCRIPTION: Demonstrates how to apply the custom 'upper' directive in a code-first approach using the @Directive decorator on a field.

LANGUAGE: typescript
CODE:
@Directive('@upper')
@Field()
title: string;

----------------------------------------

TITLE: Installing NATS Package for NestJS
DESCRIPTION: Command to install the NATS package for use in a NestJS project.

LANGUAGE: bash
CODE:
$ npm i --save nats

----------------------------------------

TITLE: GraphQL Type Definitions Generator Configuration
DESCRIPTION: Configuration for generating TypeScript definitions from GraphQL schema with custom scalar type mappings.

LANGUAGE: typescript
CODE:
import { GraphQLDefinitionsFactory } from '@nestjs/graphql';
import { join } from 'path';

const definitionsFactory = new GraphQLDefinitionsFactory();

definitionsFactory.generate({
  typePaths: ['./src/**/*.graphql'],
  path: join(process.cwd(), 'src/graphql.ts'),
  outputAs: 'class',
  defaultScalarType: 'unknown',
  customScalarTypeMapping: {
    DateTime: 'Date',
    BigNumber: '_BigNumber',
  },
  additionalHeader: "import _BigNumber from 'bignumber.js'",
});

----------------------------------------

TITLE: REPL Watch Mode Configuration
DESCRIPTION: Configuration for running REPL in watch mode with history preservation, allowing for automatic code change reflection while maintaining command history.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const replServer = await repl(AppModule);
  replServer.setupHistory(".nestjs_repl_history", (err) => {
    if (err) {
      console.error(err);
    }
  });
}

----------------------------------------

TITLE: Using NestJS CLI command alias
DESCRIPTION: Example of using the alias 'n' for the 'new' command and the short-hand form '-d' for '--dry-run'.

LANGUAGE: bash
CODE:
$ nest n my-nest-project -d

----------------------------------------

TITLE: Basic File Streaming in NestJS Controller
DESCRIPTION: Basic implementation of file streaming using Node's createReadStream to pipe a file directly to the response object. Note that this approach bypasses post-controller interceptors.

LANGUAGE: typescript
CODE:
@Controller('file')
export class FileController {
  @Get()
  getFile(@Res() res: Response) {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    file.pipe(res);
  }
}

----------------------------------------

TITLE: Ignoring Global Prefix in NestJS Swagger
DESCRIPTION: Demonstrates how to ignore a global prefix for routes set through setGlobalPrefix() when creating a Swagger document.

LANGUAGE: typescript
CODE:
const document = SwaggerModule.createDocument(app, options, {
  ignoreGlobalPrefix: true,
});

----------------------------------------

TITLE: Configuring Custom Logger Levels
DESCRIPTION: Demonstrates how to enable specific logging levels in NestJS application configuration.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule, {
  logger: ['error', 'warn'],
});
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Handling NATS Messages with Context in NestJS
DESCRIPTION: Illustrates how to handle incoming NATS messages in a NestJS controller, accessing both payload data and NATS context information.

LANGUAGE: typescript
CODE:
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: NatsContext) {
  console.log(`Subject: ${context.getSubject()}`);
}

----------------------------------------

TITLE: Defining AllowedColor enum in TypeScript for NestJS GraphQL
DESCRIPTION: Creates an AllowedColor enum and registers it with NestJS GraphQL using registerEnumType function.

LANGUAGE: typescript
CODE:
export enum AllowedColor {
  RED,
  GREEN,
  BLUE,
}

registerEnumType(AllowedColor, {
  name: 'AllowedColor',
});

----------------------------------------

TITLE: Setting Up Source Maps Upload
DESCRIPTION: Command to initialize the Sentry Wizard for configuring source maps upload.

LANGUAGE: bash
CODE:
npx @sentry/wizard@latest -i sourcemaps

----------------------------------------

TITLE: Configuring Redis Wildcards Support
DESCRIPTION: Configuration to enable Redis wildcard subscriptions using psubscribe/pmessage

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice(AppModule, {
  transport: Transport.REDIS,
  options: {
    // Other options
    wildcards: true,
  },
});

----------------------------------------

TITLE: Configuring ScheduleModule in NestJS
DESCRIPTION: Importing and configuring the ScheduleModule in the root AppModule of a NestJS application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { ScheduleModule } from '@nestjs/schedule';

@Module({
  imports: [
    ScheduleModule.forRoot()
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Registering Kafka Client using ClientsModule in NestJS
DESCRIPTION: Configuring a Kafka client using ClientsModule in a NestJS module.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'HERO_SERVICE',
        transport: Transport.KAFKA,
        options: {
          client: {
            clientId: 'hero',
            brokers: ['localhost:9092'],
          },
          consumer: {
            groupId: 'hero-consumer'
          }
        }
      },
    ]),
  ]
  ...
})

----------------------------------------

TITLE: Defining Cat Interface for Mongoose Document
DESCRIPTION: Creates a Cat interface that extends Mongoose's Document interface for type safety in NestJS.

LANGUAGE: typescript
CODE:
import { Document } from 'mongoose';

export interface Cat extends Document {
  readonly name: string;
  readonly age: number;
  readonly breed: string;
}

----------------------------------------

TITLE: Listening to NATS Client Error Events in NestJS
DESCRIPTION: Shows how to listen for and handle error events from a NATS client in a NestJS application.

LANGUAGE: typescript
CODE:
this.client.on('error', (err) => {
  console.error(err);
});

----------------------------------------

TITLE: Implementing a GraphQL query using ResultUnion in NestJS
DESCRIPTION: Defines a search query that returns an array of ResultUnion types in a NestJS GraphQL resolver.

LANGUAGE: typescript
CODE:
@Query(() => [ResultUnion])
search(): Array<typeof ResultUnion> {
  return [new Author(), new Book()];
}

----------------------------------------

TITLE: Testing CatsHttpService with Suites in NestJS
DESCRIPTION: Unit test for CatsHttpService using Suites' TestBed.solitary() method to isolate and mock dependencies.

LANGUAGE: typescript
CODE:
import { TestBed, Mocked } from '@suites/unit';

describe('Cats Http Service Unit Test', () => {
  let catsHttpService: CatsHttpService;
  let httpClient: Mocked<HttpClient>;
  let logger: Mocked<Logger>;

  beforeAll(async () => {
    const { unit, unitRef } = await TestBed.solitary(CatsHttpService).compile();

    catsHttpService = unit;
    httpClient = unitRef.get(HttpClient);
    logger = unitRef.get(Logger);
  });

  it('should fetch cats from the API and log the operation', async () => {
    const catsFixtures: Cat[] = [{ id: 1, name: 'Catty' }, { id: 2, name: 'Mitzy' }];
    httpClient.get.mockResolvedValue({ data: catsFixtures });

    const cats = await catsHttpService.fetchCats();

    expect(logger.log).toHaveBeenCalledWith('Fetching cats from the API');
    expect(httpClient.get).toHaveBeenCalledWith('/cats');
    expect(cats).toEqual<Cat[]>(catsFixtures);
  });
});

----------------------------------------

TITLE: Bootstrap Command Line Application
DESCRIPTION: Main entry point code to bootstrap and run the command line application.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  await CommandFactory.run(AppModule);
}

bootstrap();

----------------------------------------

TITLE: Installing Prisma as a Development Dependency
DESCRIPTION: Command to install Prisma CLI as a development dependency in the NestJS project.

LANGUAGE: bash
CODE:
$ cd hello-prisma
$ npm install prisma --save-dev

----------------------------------------

TITLE: Configuring Custom Security Mechanism in NestJS
DESCRIPTION: Demonstrates how to implement a custom security mechanism using @ApiSecurity decorator and DocumentBuilder configuration. This shows the basic setup for a controller-level security definition.

LANGUAGE: typescript
CODE:
@ApiSecurity('basic')
@Controller('cats')
export class CatsController {}

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addSecurity('basic', {
  type: 'http',
  scheme: 'basic',
});

----------------------------------------

TITLE: Installing Cookie Parser for Express in NestJS
DESCRIPTION: Install the required packages for cookie handling with Express in a NestJS application.

LANGUAGE: shell
CODE:
$ npm i cookie-parser
$ npm i -D @types/cookie-parser

----------------------------------------

TITLE: Subscribing to MQTT Client Status Updates in NestJS
DESCRIPTION: Demonstrates how to subscribe to status updates from an MQTT client in NestJS.

LANGUAGE: typescript
CODE:
this.client.status.subscribe((status: MqttStatus) => {
  console.log(status);
});

----------------------------------------

TITLE: Implementing CatsDAL in NestJS
DESCRIPTION: TypeScript code for a NestJS data access layer using Prisma to save cat data.

LANGUAGE: typescript
CODE:
import { PrismaClient } from '@prisma/client';

@Injectable()
export class CatsDAL {
  constructor(private prisma: PrismaClient) {}

  async saveCat(cat: Cat): Promise<Cat> {
    return this.prisma.cat.create({data: cat});
  }
}

----------------------------------------

TITLE: Retrieving Providers from Dynamic Modules in NestJS
DESCRIPTION: This snippet illustrates how to retrieve provider instances from dynamic modules in a NestJS standalone application. It shows the process of registering a dynamic module and then selecting it to access its providers.

LANGUAGE: typescript
CODE:
export const dynamicConfigModule = ConfigModule.register({ folder: './config' });

@Module({
  imports: [dynamicConfigModule],
})
export class AppModule {}

LANGUAGE: typescript
CODE:
const configService = app.select(dynamicConfigModule).get(ConfigService, { strict: true });

----------------------------------------

TITLE: Configuring CatsModule with Sequelize Integration
DESCRIPTION: Sets up the CatsModule by importing the DatabaseModule, declaring controllers and providers, including the custom catsProviders.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';
import { catsProviders } from './cats.providers';
import { DatabaseModule } from '../database/database.module';

@Module({
  imports: [DatabaseModule],
  controllers: [CatsController],
  providers: [
    CatsService,
    ...catsProviders,
  ],
})
export class CatsModule {}

----------------------------------------

TITLE: Displaying 'Circular dependency' Error in NestJS
DESCRIPTION: This snippet demonstrates the error message that occurs when circular dependencies are detected in a NestJS application. It includes potential causes and a reference to the circular dependency documentation.

LANGUAGE: bash
CODE:
Nest cannot create the <module> instance.
The module at index [<index>] of the <module> "imports" array is undefined.

Potential causes:
- A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency
- The module at index [<index>] is of type "undefined". Check your import statements and the type of the module.

Scope [<module_import_chain>]
# example chain AppModule -> FooModule

----------------------------------------

TITLE: Implementing Queue Consumer
DESCRIPTION: Example of a consumer class that processes jobs from a BullMQ queue

LANGUAGE: typescript
CODE:
import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Job } from 'bullmq';

@Processor('audio')
export class AudioConsumer extends WorkerHost {
  async process(job: Job<any, any, string>): Promise<any> {
    switch (job.name) {
      case 'transcode': {
        let progress = 0;
        for (let i = 0; i < 100; i++) {
          await doSomething(job.data);
          progress += 1;
          await job.updateProgress(progress);
        }
        return {};
      }
    }
  }
}

----------------------------------------

TITLE: Subscribing to RabbitMQ Client Status Updates in NestJS
DESCRIPTION: Demonstrates how to subscribe to RabbitMQ client status updates in a NestJS application.

LANGUAGE: typescript
CODE:
this.client.status.subscribe((status: RmqStatus) => {
  console.log(status);
});

----------------------------------------

TITLE: Configuring Jest with SWC for NestJS
DESCRIPTION: JSON configuration to use SWC with Jest for testing NestJS applications.

LANGUAGE: json
CODE:
{
  "jest": {
    "transform": {
      "^.+\\.(t|j)s?$": ["@swc/jest"]
    }
  }
}

----------------------------------------

TITLE: Applying Versions to Individual Routes in NestJS
DESCRIPTION: Demonstrates how to apply versions to individual routes in a NestJS controller, overriding any controller-level versioning.

LANGUAGE: typescript
CODE:
import { Controller, Get, Version } from '@nestjs/common';

@Controller()
export class CatsController {
  @Version('1')
  @Get('cats')
  findAllV1(): string {
    return 'This action returns all cats for version 1';
  }

  @Version('2')
  @Get('cats')
  findAllV2(): string {
    return 'This action returns all cats for version 2';
  }
}

----------------------------------------

TITLE: Fastify MVC Configuration
DESCRIPTION: Configuration setup for NestJS with Fastify adapter, including static assets and view engine configuration

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { NestFastifyApplication, FastifyAdapter } from '@nestjs/platform-fastify';
import { AppModule } from './app.module';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter(),
  );
  app.useStaticAssets({
    root: join(__dirname, '..', 'public'),
    prefix: '/public/',
  });
  app.setViewEngine({
    engine: {
      handlebars: require('handlebars'),
    },
    templates: join(__dirname, '..', 'views'),
  });
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Proto Service Definition
DESCRIPTION: Example protocol buffer definition for a Hero service with FindOne RPC method

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package hero;

service HeroesService {
  rpc FindOne (HeroById) returns (Hero) {}
}

message HeroById {
  int32 id = 1;
}

message Hero {
  int32 id = 1;
  string name = 2;
}

----------------------------------------

TITLE: Configuring CQRS Module in AppModule
DESCRIPTION: Demonstrates how to import and configure the CQRS module in the root application module

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { CqrsModule } from '@nestjs/cqrs';

@Module({
  imports: [CqrsModule.forRoot()],
})
export class AppModule {}

----------------------------------------

TITLE: Listening to RabbitMQ Events in NestJS Client
DESCRIPTION: Shows how to listen for internal events emitted by the RabbitMQ client in NestJS.

LANGUAGE: typescript
CODE:
this.client.on('error', (err) => {
  console.error(err);
});

----------------------------------------

TITLE: Configuring Extended Query Parser in NestJS 11 with Express v5
DESCRIPTION: Shows how to configure the extended query parser in NestJS 11 to maintain support for nested objects and arrays in query parameters when using Express v5.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  app.set('query parser', 'extended');
  await app.listen(3000);
}
bootstrap();

----------------------------------------

TITLE: Injecting HTTP Adapter Host in NestJS Service
DESCRIPTION: Shows how to inject the HttpAdapterHost into a service using constructor injection, with examples in both TypeScript and JavaScript syntax.

LANGUAGE: typescript
CODE:
export class CatsService {
  constructor(private adapterHost: HttpAdapterHost) {}
}
@@switch
@Dependencies(HttpAdapterHost)
export class CatsService {
  constructor(adapterHost) {
    this.adapterHost = adapterHost;
  }
}

----------------------------------------

TITLE: JSON Logging Configuration
DESCRIPTION: Shows how to enable and configure JSON logging format in NestJS applications.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule, {
  logger: new ConsoleLogger({
    json: true,
  }),
});

----------------------------------------

TITLE: Resolving Circular Dependency with Forward Reference in TypeScript
DESCRIPTION: This snippet demonstrates how to use the forwardRef() function to resolve a circular dependency between CatsService and CommonService in NestJS.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(
    @Inject(forwardRef(() => CommonService))
    private commonService: CommonService,
  ) {}
}

----------------------------------------

TITLE: Basic GraphQL Author Model Without Plugin
DESCRIPTION: Example of a GraphQL Author model class with manual Field decorators before using the CLI plugin.

LANGUAGE: typescript
CODE:
@ObjectType()
export class Author {
  @Field(type => ID)
  id: number;

  @Field({ nullable: true })
  firstName?: string;

  @Field({ nullable: true })
  lastName?: string;

  @Field(type => [Post])
  posts: Post[];
}

----------------------------------------

TITLE: Configuring GraphQL Module Date Scalar Mode
DESCRIPTION: Configuration example showing how to set the date scalar mode to timestamp in the GraphQL module options.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  buildSchemaOptions: {
    dateScalarMode: 'timestamp',
  }
}),

----------------------------------------

TITLE: Creating NestJS Microservice Instance
DESCRIPTION: Example of creating a microservice instance using NestFactory with TCP transport.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { Transport, MicroserviceOptions } from '@nestjs/microservices';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.createMicroservice<MicroserviceOptions>(
    AppModule,
    {
      transport: Transport.TCP,
    },
  );
  await app.listen();
}
bootstrap();

----------------------------------------

TITLE: Implementing Graceful Shutdown for Multiple Servers in NestJS
DESCRIPTION: This code snippet shows how to implement graceful shutdown for multiple HTTP servers in a NestJS application. It creates a ShutdownObserver service that manages the shutdown process for all registered HTTP servers.

LANGUAGE: typescript
CODE:
@Injectable()
export class ShutdownObserver implements OnApplicationShutdown {
  private httpServers: http.Server[] = [];

  public addHttpServer(server: http.Server): void {
    this.httpServers.push(server);
  }

  public async onApplicationShutdown(): Promise<void> {
    await Promise.all(
      this.httpServers.map(
        (server) =>
          new Promise((resolve, reject) => {
            server.close((error) => {
              if (error) {
                reject(error);
              } else {
                resolve(null);
              }
            });
          }),
      ),
    );
  }
}

const shutdownObserver = app.get(ShutdownObserver);
shutdownObserver.addHttpServer(httpServer);
shutdownObserver.addHttpServer(httpsServer);

----------------------------------------

TITLE: Exposing Computed Properties with @Expose Decorator
DESCRIPTION: Example of using the @Expose decorator to create a computed property that combines firstName and lastName into a fullName getter.

LANGUAGE: typescript
CODE:
@Expose()
get fullName(): string {
  return `${this.firstName} ${this.lastName}`;
}

----------------------------------------

TITLE: Implementing an Exception Mapping Interceptor in NestJS
DESCRIPTION: This interceptor demonstrates how to catch and transform exceptions using RxJS operators. It converts all exceptions to BadGatewayExceptions.

LANGUAGE: typescript
CODE:
import {
  Injectable,
  NestInterceptor,
  ExecutionContext,
  BadGatewayException,
  CallHandler,
} from '@nestjs/common';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable()
export class ErrorsInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next
      .handle()
      .pipe(
        catchError(err => throwError(() => new BadGatewayException())),
      );
  }
}

----------------------------------------

TITLE: Using Custom WebSocket Adapter in NestJS Application
DESCRIPTION: TypeScript code demonstrating how to apply a custom WebSocket adapter (WsAdapter) to a NestJS application. This allows for customized WebSocket handling.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
app.useWebSocketAdapter(new WsAdapter(app));

----------------------------------------

TITLE: Using PickType in NestJS GraphQL
DESCRIPTION: This snippet demonstrates the use of PickType to create a new type (UpdateEmailInput) by selecting specific properties from an existing type (CreateUserInput).

LANGUAGE: typescript
CODE:
@InputType()
export class UpdateEmailInput extends PickType(CreateUserInput, [
  'email',
] as const) {}

----------------------------------------

TITLE: RpcException Error Response Structure in JSON
DESCRIPTION: Shows the structure of the error object returned by NestJS when an RpcException is thrown in a microservice.

LANGUAGE: json
CODE:
{
  "status": "error",
  "message": "Invalid credentials."
}

----------------------------------------

TITLE: Accessing Raw Body in Express Controller
DESCRIPTION: Shows how to access the raw request body in a NestJS controller using Express. Uses RawBodyRequest interface to expose the rawBody field on the request object.

LANGUAGE: typescript
CODE:
import { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';
import { Request } from 'express';

@Controller('cats')
class CatsController {
  @Post()
  create(@Req() req: RawBodyRequest<Request>) {
    const raw = req.rawBody; // returns a `Buffer`.
  }
}

----------------------------------------

TITLE: Accessing Raw Body in Fastify Controller
DESCRIPTION: Shows how to access the raw request body in a NestJS controller using Fastify. Uses RawBodyRequest interface with FastifyRequest type.

LANGUAGE: typescript
CODE:
import { Controller, Post, RawBodyRequest, Req } from '@nestjs/common';
import { FastifyRequest } from 'fastify';

@Controller('cats')
class CatsController {
  @Post()
  create(@Req() req: RawBodyRequest<FastifyRequest>) {
    const raw = req.rawBody; // returns a `Buffer`.
  }
}

----------------------------------------

TITLE: Defining Generic Paginated DTO in NestJS OpenAPI
DESCRIPTION: Shows how to define a generic PaginatedDto for use in NestJS OpenAPI responses.

LANGUAGE: typescript
CODE:
export class PaginatedDto<TData> {
  @ApiProperty()
  total: number;

  @ApiProperty()
  limit: number;

  @ApiProperty()
  offset: number;

  results: TData[];
}

----------------------------------------

TITLE: Creating Custom Decorator with SetMetadata in NestJS
DESCRIPTION: Demonstrates how to create a custom decorator using the SetMetadata decorator for more control over metadata.

LANGUAGE: typescript
CODE:
import { SetMetadata } from '@nestjs/common';

export const Roles = (...roles: string[]) => SetMetadata('roles', roles);

----------------------------------------

TITLE: Using IntersectionType in NestJS GraphQL
DESCRIPTION: This snippet demonstrates the use of IntersectionType to combine two types (CreateUserInput and AdditionalUserInfo) into a new type (UpdateUserInput).

LANGUAGE: typescript
CODE:
@InputType()
class CreateUserInput {
  @Field()
  email: string;

  @Field()
  password: string;
}

@ObjectType()
export class AdditionalUserInfo {
  @Field()
  firstName: string;

  @Field()
  lastName: string;
}

@InputType()
export class UpdateUserInput extends IntersectionType(
  CreateUserInput,
  AdditionalUserInfo,
) {}

----------------------------------------

TITLE: Implementing RpcExceptionFilter in NestJS Microservices
DESCRIPTION: Demonstrates how to create a custom exception filter for RpcExceptions in NestJS microservices. The filter must return an Observable.

LANGUAGE: typescript
CODE:
import { Catch, RpcExceptionFilter, ArgumentsHost } from '@nestjs/common';
import { Observable, throwError } from 'rxjs';
import { RpcException } from '@nestjs/microservices';

@Catch(RpcException)
export class ExceptionFilter implements RpcExceptionFilter<RpcException> {
  catch(exception: RpcException, host: ArgumentsHost): Observable<any> {
    return throwError(() => exception.getError());
  }
}

----------------------------------------

TITLE: Configuring Body Parser Size Limit in Fastify
DESCRIPTION: Shows how to configure the body parser size limit in Fastify to handle larger request bodies than the default 1MiB limit.

LANGUAGE: typescript
CODE:
const bodyLimit = 10_485_760; // 10MiB
app.useBodyParser('application/json', { bodyLimit });

----------------------------------------

TITLE: Implementing Basic Service Provider in NestJS
DESCRIPTION: Creates a basic CatsService with CRUD operations using the @Injectable decorator. The service maintains an array of cats and provides methods to create and retrieve cat records.

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';

@Injectable()
export class CatsService {
  private readonly cats: Cat[] = [];

  create(cat: Cat) {
    this.cats.push(cat);
  }

  findAll(): Cat[] {
    return this.cats;
  }
}

----------------------------------------

TITLE: Using ExceptionFilter with MessagePattern in NestJS Microservices
DESCRIPTION: Shows how to apply a custom exception filter to a method using the @UseFilters decorator in a NestJS microservice.

LANGUAGE: typescript
CODE:
@UseFilters(new ExceptionFilter())
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}

----------------------------------------

TITLE: Using MqttRecordBuilder for Message Configuration in NestJS
DESCRIPTION: Demonstrates the use of MqttRecordBuilder to set custom properties and QoS level for MQTT messages in NestJS.

LANGUAGE: typescript
CODE:
const userProperties = { 'x-version': '1.0.0' };
const record = new MqttRecordBuilder(':cat:')
  .setProperties({ userProperties })
  .setQoS(1)
  .build();
client.send('replace-emoji', record).subscribe(...);

----------------------------------------

TITLE: Applying Custom Directive Transformer in NestJS GraphQL Module
DESCRIPTION: Shows how to apply the custom directive transformer in the NestJS GraphQL module configuration using the transformSchema option.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  // ...
  transformSchema: (schema) => upperDirectiveTransformer(schema, 'upper'),
});

----------------------------------------

TITLE: Asset Configuration for Proto Files
DESCRIPTION: JSON configuration in nest-cli.json to handle .proto files in the build process

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "assets": ["**/*.proto"],
    "watchAssets": true
  }
}

----------------------------------------

TITLE: Webpack Configuration for NestJS Serverless
DESCRIPTION: Custom webpack configuration for optimizing NestJS serverless deployment by bundling dependencies and excluding lazy imports.

LANGUAGE: javascript
CODE:
module.exports = (options, webpack) => {
  const lazyImports = [
    '@nestjs/microservices/microservices-module',
    '@nestjs/websockets/socket-module',
  ];

  return {
    ...options,
    externals: [],
    plugins: [
      ...options.plugins,
      new webpack.IgnorePlugin({
        checkResource(resource) {
          if (lazyImports.includes(resource)) {
            try {
              require.resolve(resource);
            } catch (err) {
              return true;
            }
          }
          return false;
        },
      }),
    ],
  };
};

----------------------------------------

TITLE: Converting to Monorepo Mode in NestJS
DESCRIPTION: Commands to convert a standard mode NestJS project to monorepo mode by generating a new app within the existing project.

LANGUAGE: bash
CODE:
$ cd my-project
$ nest generate app my-app

----------------------------------------

TITLE: Defining Custom HTTP Responses in NestJS OpenAPI
DESCRIPTION: Illustrates how to define custom HTTP responses using the @ApiResponse decorator in NestJS, including status codes and descriptions.

LANGUAGE: typescript
CODE:
@Post()
@ApiResponse({ status: 201, description: 'The record has been successfully created.'})
@ApiResponse({ status: 403, description: 'Forbidden.'})
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}

----------------------------------------

TITLE: Automatic Plain Object Transformation with Type Specification
DESCRIPTION: Shows how to automatically transform plain objects to class instances using @SerializeOptions with type specification, enabling consistent serialization behavior across different return paths.

LANGUAGE: typescript
CODE:
@UseInterceptors(ClassSerializerInterceptor)
@SerializeOptions({ type: UserEntity })
@Get()
findOne(@Query() { id }: { id: number }): UserEntity {
  if (id === 1) {
    return {
      id: 1,
      firstName: 'John',
      lastName: 'Doe',
      password: 'password',
    };
  }

  return {
    id: 2,
    firstName: 'Kamil',
    lastName: 'Mysliwiec',
    password: 'password2',
  };
}

----------------------------------------

TITLE: Creating Custom Apollo Server Plugin in NestJS
DESCRIPTION: Implementation of a custom logging plugin using the @Plugin decorator from @nestjs/apollo. The plugin logs when requests start and when responses are about to be sent.

LANGUAGE: typescript
CODE:
import { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';
import { Plugin } from '@nestjs/apollo';

@Plugin()
export class LoggingPlugin implements ApolloServerPlugin {
  async requestDidStart(): Promise<GraphQLRequestListener<any>> {
    console.log('Request started');
    return {
      async willSendResponse() {
        console.log('Will send response');
      },
    };
  }
}

----------------------------------------

TITLE: Installing Kafka dependencies for NestJS
DESCRIPTION: Command to install the required Kafka package for NestJS microservices.

LANGUAGE: bash
CODE:
$ npm i --save kafkajs

----------------------------------------

TITLE: Using NestJS CLI with dry-run option
DESCRIPTION: Example of using the NestJS CLI 'new' command with the --dry-run option to preview the project creation without actually creating files.

LANGUAGE: bash
CODE:
$ nest new my-nest-project --dry-run

----------------------------------------

TITLE: Configuring Asset Distribution in NestJS CLI
DESCRIPTION: Examples of how to configure asset distribution in the nest-cli.json file, including simple glob patterns and more complex object configurations.

LANGUAGE: javascript
CODE:
"assets": ["**/*.graphql"],
"watchAssets": true,

LANGUAGE: javascript
CODE:
"assets": [
  { "include": "**/*.graphql", "exclude": "**/omitted.graphql", "watchAssets": true },
]

----------------------------------------

TITLE: Custom ValidationPipe Implementation in NestJS
DESCRIPTION: Implementation of a basic validation pipe that uses Zod schema validation.

LANGUAGE: typescript
CODE:
import { PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';
import { ZodSchema  } from 'zod';

export class ZodValidationPipe implements PipeTransform {
  constructor(private schema: ZodSchema) {}

  transform(value: unknown, metadata: ArgumentMetadata) {
    try {
      const parsedValue = this.schema.parse(value);
      return parsedValue;
    } catch (error) {
      throw new BadRequestException('Validation failed');
    }
  }
}

----------------------------------------

TITLE: Installing Dependencies Without CLI
DESCRIPTION: Command to install required packages for webpack configuration without using NestJS CLI

LANGUAGE: bash
CODE:
$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin

----------------------------------------

TITLE: Defining Author class for GraphQL union in TypeScript
DESCRIPTION: Creates an Author class with a name field using NestJS GraphQL decorators for use in a union type.

LANGUAGE: typescript
CODE:
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Author {
  @Field()
  name: string;
}

----------------------------------------

TITLE: Using @Client Decorator for Kafka in NestJS
DESCRIPTION: Configuring a Kafka client using the @Client decorator in a NestJS controller.

LANGUAGE: typescript
CODE:
@Client({
  transport: Transport.KAFKA,
  options: {
    client: {
      clientId: 'hero',
      brokers: ['localhost:9092'],
    },
    consumer: {
      groupId: 'hero-consumer'
    }
  }
})
client: ClientKafkaProxy;

----------------------------------------

TITLE: Adding a Library to NestJS Project with CLI
DESCRIPTION: Imports a library packaged as a NestJS library into the project using the 'nest add' command. This command runs the library's install schematic.

LANGUAGE: bash
CODE:
$ nest add <name> [options]

----------------------------------------

TITLE: Configuring Webpack in NestJS CLI
DESCRIPTION: Example of how to customize webpack configuration in a NestJS project by modifying the webpack.config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  externals: [],
};

LANGUAGE: javascript
CODE:
module.exports = function (options) {
  return {
    ...options,
    externals: [],
  };
};

----------------------------------------

TITLE: Starting NestJS Server with Multiple Swagger Specifications
DESCRIPTION: Command to start the NestJS server after configuring multiple Swagger specifications.

LANGUAGE: bash
CODE:
$ npm run start

----------------------------------------

TITLE: Creating Database Connection Provider in NestJS
DESCRIPTION: Defines an async provider to establish a MongoDB connection using Mongoose in NestJS.

LANGUAGE: typescript
CODE:
import * as mongoose from 'mongoose';

export const databaseProviders = [
  {
    provide: 'DATABASE_CONNECTION',
    useFactory: (): Promise<typeof mongoose> =>
      mongoose.connect('mongodb://localhost/nest'),
  },
];

----------------------------------------

TITLE: Registering AllowedColor enum resolver in NestJS GraphQLModule
DESCRIPTION: Shows how to register the AllowedColor enum resolver in the NestJS GraphQLModule configuration.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  resolvers: {
    AllowedColor: allowedColorResolver,
  },
});

----------------------------------------

TITLE: Configuring NATS Message Headers in NestJS
DESCRIPTION: Demonstrates how to set custom headers for NATS messages using NatsRecordBuilder in a NestJS application.

LANGUAGE: typescript
CODE:
import * as nats from 'nats';

// somewhere in your code
const headers = nats.headers();
headers.set('x-version', '1.0.0');

const record = new NatsRecordBuilder(':cat:').setHeaders(headers).build();
this.client.send('replace-emoji', record).subscribe(...);

----------------------------------------

TITLE: Installing and Deploying with Mau CLI
DESCRIPTION: Commands to install the Mau CLI tool and deploy a NestJS application to AWS using Mau platform.

LANGUAGE: bash
CODE:
$ npm install -g @nestjs/mau
$ mau deploy

----------------------------------------

TITLE: Installing NestJS CLI Commands
DESCRIPTION: Commands for installing the NestJS CLI globally and as a dev dependency in a project.

LANGUAGE: bash
CODE:
$ npm install -g @nestjs/cli
$ cd  /some/project/root/folder
$ npm install -D @nestjs/cli

----------------------------------------

TITLE: Generating Documentation with Compodoc in NestJS
DESCRIPTION: Command to generate project documentation using Compodoc. It requires npm 6 for npx support and uses the project's tsconfig.json file. The -s flag starts a server to view the documentation.

LANGUAGE: bash
CODE:
$ npx @compodoc/compodoc -p tsconfig.json -s

----------------------------------------

TITLE: Injecting ModuleRef in NestJS Service
DESCRIPTION: Demonstrates how to inject the ModuleRef class into a NestJS service using constructor injection. This allows the service to use ModuleRef methods for provider manipulation.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(private moduleRef: ModuleRef) {}
}

----------------------------------------

TITLE: Publishing Events for GraphQL Subscriptions in NestJS
DESCRIPTION: Demonstration of how to publish events for GraphQL subscriptions in NestJS. This example shows a mutation that triggers a subscription event.

LANGUAGE: typescript
CODE:
@Mutation(() => Comment)
async addComment(
  @Args('postId', { type: () => Int }) postId: number,
  @Args('comment', { type: () => Comment }) comment: CommentInput,
) {
  const newComment = this.commentsService.addComment({ id: postId, comment });
  pubSub.publish('commentAdded', { commentAdded: newComment });
  return newComment;
}

----------------------------------------

TITLE: Registering NATS Client with ClientsModule in NestJS
DESCRIPTION: Demonstrates how to register a NATS client using the ClientsModule in a NestJS module. It specifies the service name, transport type, and server options.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.NATS,
        options: {
          servers: ['nats://localhost:4222'],
        }
      },
    ]),
  ]
  ...
})

----------------------------------------

TITLE: Building NestJS Application
DESCRIPTION: Command to build a NestJS application by compiling TypeScript code into JavaScript in the dist directory.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: NestJS Package Scripts Configuration
DESCRIPTION: Standard package.json script configurations for building and running NestJS applications with various modes including development and debug.

LANGUAGE: typescript
CODE:
"build": "nest build",
"start": "nest start",
"start:dev": "nest start --watch",
"start:debug": "nest start --debug --watch"

----------------------------------------

TITLE: Installing Mongoose Dependencies for NestJS
DESCRIPTION: Command to install Mongoose package for use with NestJS.

LANGUAGE: shell
CODE:
$ npm install --save mongoose

----------------------------------------

TITLE: GraphQL Throttler Guard Implementation
DESCRIPTION: Custom throttler guard implementation for GraphQL requests with context handling

LANGUAGE: typescript
CODE:
@Injectable()
export class GqlThrottlerGuard extends ThrottlerGuard {
  getRequestResponse(context: ExecutionContext) {
    const gqlCtx = GqlExecutionContext.create(context);
    const ctx = gqlCtx.getContext();
    return { req: ctx.req, res: ctx.res };
  }
}

----------------------------------------

TITLE: Creating a POST endpoint with DTO in NestJS
DESCRIPTION: Demonstrates how to create a POST endpoint using a Data Transfer Object (DTO) in NestJS. The SwaggerModule will automatically generate API documentation for this endpoint.

LANGUAGE: typescript
CODE:
@Post()
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}

----------------------------------------

TITLE: Accessing NATS Message Headers in NestJS Controller
DESCRIPTION: Shows how to access custom headers from incoming NATS messages in a NestJS controller method.

LANGUAGE: typescript
CODE:
@MessagePattern('replace-emoji')
replaceEmoji(@Payload() data: string, @Ctx() context: NatsContext): string {
  const headers = context.getHeaders();
  return headers['x-version'] === '1.0.0' ? '🐱' : '🐈';
}

----------------------------------------

TITLE: Initializing NestJS Application with Devtools Snapshot
DESCRIPTION: Bootstrap configuration for enabling Devtools integration by setting the snapshot option to true. This allows the framework to collect metadata for visualization.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    snapshot: true,
  });
  await app.listen(process.env.PORT ?? 3000);
}

----------------------------------------

TITLE: NestJS Library Project Configuration
DESCRIPTION: Configuration entry in nest-cli.json for a library project, specifying build and compiler settings

LANGUAGE: javascript
CODE:
{
    "my-library": {
      "type": "library",
      "root": "libs/my-library",
      "entryFile": "index",
      "sourceRoot": "libs/my-library/src",
      "compilerOptions": {
        "tsConfigPath": "libs/my-library/tsconfig.lib.json"
      }
}

----------------------------------------

TITLE: NPM Script Without CLI
DESCRIPTION: Package.json script configuration for running the application with hot reload without NestJS CLI

LANGUAGE: json
CODE:
"start:dev": "webpack --config webpack.config.js --watch"

----------------------------------------

TITLE: Configuring Swagger property with additional options in NestJS
DESCRIPTION: Demonstrates how to use the @ApiProperty decorator with additional options to provide more detailed schema information for a property.

LANGUAGE: typescript
CODE:
@ApiProperty({
  description: 'The age of a cat',
  minimum: 1,
  default: 1,
})
age: number;

----------------------------------------

TITLE: Installing RabbitMQ Dependencies for NestJS
DESCRIPTION: Command to install required packages for RabbitMQ integration in NestJS.

LANGUAGE: bash
CODE:
$ npm i --save amqplib amqp-connection-manager

----------------------------------------

TITLE: Configuring Redis Cache Store with Keyv in NestJS 11
DESCRIPTION: Demonstrates how to configure a Redis cache store using the Keyv adapter in NestJS 11, replacing the previous redisStore configuration method.

LANGUAGE: typescript
CODE:
CacheModule.registerAsync({
  useFactory: async () => {
    return {
      stores: [
        new KeyvRedis('redis://localhost:6379'),
      ],
    };
  },
}),

----------------------------------------

TITLE: TypeScript Path Configuration for Libraries
DESCRIPTION: TSConfig paths configuration for library module resolution in the monorepo

LANGUAGE: javascript
CODE:
"paths": {
    "@app/my-library": [
        "libs/my-library/src"
    ],
    "@app/my-library/*": [
        "libs/my-library/src/*"
    ]
}

----------------------------------------

TITLE: Declaring Custom Directive in NestJS GraphQL Module
DESCRIPTION: Illustrates how to declare a custom directive in the NestJS GraphQL module configuration, including the transformer and the directive definition.

LANGUAGE: typescript
CODE:
GraphQLModule.forRoot({
  // ...,
  transformSchema: schema => upperDirectiveTransformer(schema, 'upper'),
  buildSchemaOptions: {
    directives: [
      new GraphQLDirective({
        name: 'upper',
        locations: [DirectiveLocation.FIELD_DEFINITION],
      }),
    ],
  },
}),

----------------------------------------

TITLE: Importing Library Module in NestJS Application
DESCRIPTION: Example of importing and using a library module in a NestJS application module

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { MyLibraryModule } from '@app/my-library';

@Module({
  imports: [MyLibraryModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Dropdown in Swagger Explorer Bar for Multiple Specifications
DESCRIPTION: Demonstrates how to set up a dropdown menu in the Swagger explorer bar to support multiple API specifications in a NestJS application.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { CatsModule } from './cats/cats.module';
import { DogsModule } from './dogs/dogs.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Main API options
  const options = new DocumentBuilder()
    .setTitle('Multiple Specifications Example')
    .setDescription('Description for multiple specifications')
    .setVersion('1.0')
    .build();

  // Create main API document
  const document = SwaggerModule.createDocument(app, options);

  // Setup main API Swagger UI with dropdown support
  SwaggerModule.setup('api', app, document, {
    explorer: true,
    swaggerOptions: {
      urls: [
        {
          name: '1. API',
          url: 'api/swagger.json',
        },
        {
          name: '2. Cats API',
          url: 'api/cats/swagger.json',
        },
        {
          name: '3. Dogs API',
          url: 'api/dogs/swagger.json',
        },
      ],
    },
    jsonDocumentUrl: '/api/swagger.json',
  });

  // Cats API options
  const catOptions = new DocumentBuilder()
    .setTitle('Cats Example')
    .setDescription('Description for the Cats API')
    .setVersion('1.0')
    .addTag('cats')
    .build();

  // Create Cats API document
  const catDocument = SwaggerModule.createDocument(app, catOptions, {
    include: [CatsModule],
  });

  // Setup Cats API Swagger UI
  SwaggerModule.setup('api/cats', app, catDocument, {
    jsonDocumentUrl: '/api/cats/swagger.json',
  });

  // Dogs API options
  const dogOptions = new DocumentBuilder()
    .setTitle('Dogs Example')
    .setDescription('Description for the Dogs API')
    .setVersion('1.0')
    .addTag('dogs')
    .build();

  // Create Dogs API document
  const dogDocument = SwaggerModule.createDocument(app, dogOptions, {
    include: [DogsModule],
  });

  // Setup Dogs API Swagger UI
  SwaggerModule.setup('api/dogs', app, dogDocument, {
    jsonDocumentUrl: '/api/dogs/swagger.json',
  });

  await app.listen(3000);
}

bootstrap();

----------------------------------------

TITLE: Accessing Underlying RabbitMQ Driver in NestJS Client
DESCRIPTION: Demonstrates how to access the underlying RabbitMQ driver instance in a NestJS client for advanced use cases.

LANGUAGE: typescript
CODE:
const managerRef =
  this.client.unwrap<import('amqp-connection-manager').AmqpConnectionManager>();

----------------------------------------

TITLE: Implementing Custom Health Indicator with HealthIndicatorService in NestJS 11
DESCRIPTION: Shows how to implement a custom health indicator using the new HealthIndicatorService API introduced in NestJS 11, which improves readability and testability.

LANGUAGE: typescript
CODE:
@Injectable()
export class DogHealthIndicator {
  constructor(
    private readonly httpService: HttpService,
    private readonly healthIndicatorService: HealthIndicatorService,
  ) {}

  async isHealthy(key: string) {
    const indicator = this.healthIndicatorService.check(key);

    try {
      const badboys = await this.getBadboys();
      const isHealthy = badboys.length === 0;

      if (!isHealthy) {
        return indicator.down({ badboys: badboys.length });
      }

      return indicator.up();
    } catch (error) {
      return indicator.down('Unable to retrieve dogs');
    }
  }

  private getBadboys() {
    // ...
  }
}

----------------------------------------

TITLE: Displaying NestJS CLI help information
DESCRIPTION: Command to show the available NestJS CLI commands and their usage information.

LANGUAGE: bash
CODE:
$ nest --help

----------------------------------------

TITLE: Defining File Upload DTO in NestJS OpenAPI
DESCRIPTION: Demonstrates how to define a FileUploadDto for handling file uploads in NestJS OpenAPI.

LANGUAGE: typescript
CODE:
class FileUploadDto {
  @ApiProperty({ type: 'string', format: 'binary' })
  file: any;
}

----------------------------------------

TITLE: Adding Global Parameters in NestJS Swagger
DESCRIPTION: Shows how to add global parameter definitions to all routes using DocumentBuilder in NestJS Swagger.

LANGUAGE: typescript
CODE:
const options = new DocumentBuilder().addGlobalParameters({
  name: 'tenantId',
  in: 'header',
});

----------------------------------------

TITLE: Swagger Document Options Interface
DESCRIPTION: TypeScript interface defining available options for customizing Swagger document generation.

LANGUAGE: typescript
CODE:
export interface SwaggerDocumentOptions {
  include?: Function[];
  extraModels?: Function[];
  ignoreGlobalPrefix?: boolean;
  deepScanRoutes?: boolean;
  operationIdFactory?: OperationIdFactory;
  linkNameFactory?: (
    controllerKey: string,
    methodKey: string,
    fieldKey: string
  ) => string;
  autoTagControllers?: boolean;
}

----------------------------------------

TITLE: Accessing RabbitMQ Message Properties in NestJS Handler
DESCRIPTION: Shows how to access custom message properties in a NestJS RabbitMQ message handler.

LANGUAGE: typescript
CODE:
@MessagePattern('replace-emoji')
replaceEmoji(@Payload() data: string, @Ctx() context: RmqContext): string {
  const { properties: { headers } } = context.getMessage();
  return headers['x-version'] === '1.0.0' ? '🐱' : '🐈';
}

----------------------------------------

TITLE: Installing NestJS Microservices Package
DESCRIPTION: Command to install the required NestJS microservices package using npm.

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/microservices

----------------------------------------

TITLE: Getting help for a specific NestJS CLI command
DESCRIPTION: Example of how to get detailed help for a specific NestJS CLI command, using 'generate' as an example.

LANGUAGE: bash
CODE:
$ nest generate --help

----------------------------------------

TITLE: Connecting Microservice to NestJS Application
DESCRIPTION: Demonstrates how to create a hybrid application by connecting a microservice to a NestJS application. It shows the process of creating the app, connecting a TCP microservice, and starting both the microservice and HTTP server.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
const microservice = app.connectMicroservice<MicroserviceOptions>({
  transport: Transport.TCP,
});

await app.startAllMicroservices();
await app.listen(3001);

----------------------------------------

TITLE: Defining raw schemas in Swagger for NestJS
DESCRIPTION: Shows how to define raw object schemas and complex types like nested arrays for Swagger documentation in NestJS.

LANGUAGE: typescript
CODE:
@ApiProperty({
  type: 'array',
  items: {
    type: 'array',
    items: {
      type: 'number',
    },
  },
})
coords: number[][];

@ApiProperty({
  type: 'object',
  properties: {
    name: {
      type: 'string',
      example: 'Error'
    },
    status: {
      type: 'number',
      example: 400
    }
  },
  required: ['name', 'status']
})
rawDefinition: Record<string, any>;

----------------------------------------

TITLE: Serverless Framework Configuration for NestJS
DESCRIPTION: YAML configuration for the Serverless Framework to deploy NestJS applications to AWS Lambda.

LANGUAGE: yaml
CODE:
service: serverless-example

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x

functions:
  main:
    handler: dist/main.handler
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'

----------------------------------------

TITLE: Defining DTO Class with Manual Swagger Annotations in TypeScript
DESCRIPTION: Example of a CreateUserDto class with manually added @ApiProperty decorators for Swagger documentation.

LANGUAGE: typescript
CODE:
export class CreateUserDto {
  @ApiProperty()
  email: string;

  @ApiProperty()
  password: string;

  @ApiProperty({ enum: RoleEnum, default: [], isArray: true })
  roles: RoleEnum[] = [];

  @ApiProperty({ required: false, default: true })
  isEnabled?: boolean = true;
}

----------------------------------------

TITLE: Creating Microservice with Custom Strategy in TypeScript
DESCRIPTION: Demonstrates how to initialize a NestJS microservice using a custom transport strategy instead of built-in transporters.

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(
  AppModule,
  {
    strategy: new GoogleCloudPubSubServer(),
  },
);

----------------------------------------

TITLE: Displaying NestJS Project Information with CLI
DESCRIPTION: Shows information about installed NestJS packages and system information using the 'nest info' command. This is useful for debugging and understanding the project setup.

LANGUAGE: bash
CODE:
$ nest info

----------------------------------------

TITLE: Using extra models in Swagger for NestJS
DESCRIPTION: Demonstrates how to define and use extra models that are not directly referenced in controllers for Swagger documentation in NestJS.

LANGUAGE: typescript
CODE:
@ApiExtraModels(ExtraModel)
export class CreateCatDto {}

const documentFactory = () =>
  SwaggerModule.createDocument(app, options, {
    extraModels: [ExtraModel],
  });

----------------------------------------

TITLE: Accessing Custom Metadata in NestJS Guard
DESCRIPTION: Shows how to inject Reflector and use it to access custom metadata in a guard.

LANGUAGE: typescript
CODE:
@Injectable()
export class RolesGuard {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const roles = this.reflector.get(Roles, context.getHandler());
    // ... implementation
  }
}

----------------------------------------

TITLE: Registering Custom Body Parser in Express
DESCRIPTION: Example of registering a custom body parser for text content in Express application.

LANGUAGE: typescript
CODE:
app.useBodyParser('text');

----------------------------------------

TITLE: Integrating Swagger Plugin with Webpack and ts-loader in JavaScript
DESCRIPTION: Configuration for using the Swagger plugin with a custom Webpack setup and ts-loader.

LANGUAGE: javascript
CODE:
getCustomTransformers: (program: any) => ({
  before: [require('@nestjs/swagger/plugin').before({}, program)]
}),

----------------------------------------

TITLE: Installing MQTT Package for NestJS
DESCRIPTION: Command to install the MQTT package for use with NestJS microservices.

LANGUAGE: bash
CODE:
$ npm i --save mqtt

----------------------------------------

TITLE: Generating NestJS Components with CLI
DESCRIPTION: Uses the 'nest generate' command to create various NestJS components such as controllers, services, modules, etc. This command supports different schematics and allows customization through options.

LANGUAGE: bash
CODE:
$ nest generate <schematic> <name> [options]
$ nest g <schematic> <name> [options]

----------------------------------------

TITLE: Using ClsService in NestJS Service
DESCRIPTION: Shows how to inject and use ClsService from the nestjs-cls package in a NestJS service to access request-specific data with improved type safety.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsService {
  constructor(
    private readonly cls: ClsService,
    private readonly catsRepository: CatsRepository,
  ) {}

  getCatForUser() {
    const userId = this.cls.get('userId');
    return this.catsRepository.getForUser(userId);
  }
}

----------------------------------------

TITLE: Generating a GraphQL resource using NestJS CLI
DESCRIPTION: This command demonstrates how to generate a GraphQL resource using the NestJS CLI, specifying the transport layer and CRUD entry points.

LANGUAGE: shell
CODE:
$ nest g resource users

> ? What transport layer do you use? GraphQL (code first)
> ? Would you like to generate CRUD entry points? Yes
> CREATE src/users/users.module.ts (224 bytes)
> CREATE src/users/users.resolver.spec.ts (525 bytes)
> CREATE src/users/users.resolver.ts (1109 bytes)
> CREATE src/users/users.service.spec.ts (453 bytes)
> CREATE src/users/users.service.ts (625 bytes)
> CREATE src/users/dto/create-user.input.ts (195 bytes)
> CREATE src/users/dto/update-user.input.ts (281 bytes)
> CREATE src/users/entities/user.entity.ts (187 bytes)
> UPDATE src/app.module.ts (312 bytes)

----------------------------------------

TITLE: Configuring Raw Body Access in NestJS Fastify Application
DESCRIPTION: Demonstrates how to enable raw body access when creating a NestJS application with Fastify adapter. Configures the application with FastifyAdapter and rawBody option.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import {
  FastifyAdapter,
  NestFastifyApplication,
} from '@nestjs/platform-fastify';
import { AppModule } from './app.module';

// in the "bootstrap" function
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
  {
    rawBody: true,
  },
);
await app.listen(process.env.PORT ?? 3000);

----------------------------------------

TITLE: Using PartialType for Optional Fields in NestJS TypeScript
DESCRIPTION: Demonstrates the use of PartialType() to create a new type with all properties from CreateCatDto set to optional.

LANGUAGE: typescript
CODE:
export class UpdateCatDto extends PartialType(CreateCatDto) {}

----------------------------------------

TITLE: Listening to MQTT Client Events in NestJS
DESCRIPTION: Demonstrates how to listen for internal events emitted by an MQTT client in NestJS.

LANGUAGE: typescript
CODE:
this.client.on('error', (err) => {
  console.error(err);
});

----------------------------------------

TITLE: Terminating a NestJS Standalone Application
DESCRIPTION: This snippet demonstrates how to properly terminate a NestJS standalone application by calling the close() method. This is important for scripts that need to close after execution, such as CRON jobs.

LANGUAGE: typescript
CODE:
async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  // application logic...
  await app.close();
}
bootstrap();

----------------------------------------

TITLE: Creating a DTO Class in TypeScript for NestJS
DESCRIPTION: Defines a CreateCatDto class with name, age, and breed properties, all decorated with @ApiProperty() for Swagger documentation.

LANGUAGE: typescript
CODE:
import { ApiProperty } from '@nestjs/swagger';

export class CreateCatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}

----------------------------------------

TITLE: Using PickType to Select Specific Properties in NestJS TypeScript
DESCRIPTION: Shows how to use PickType() to create a new type that only includes the 'age' property from CreateCatDto.

LANGUAGE: typescript
CODE:
export class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}

----------------------------------------

TITLE: Implementing ResultUnionResolver in NestJS GraphQL
DESCRIPTION: Creates a resolver class for ResultUnion with a __resolveType method to determine the correct type for union members.

LANGUAGE: typescript
CODE:
@Resolver('ResultUnion')
export class ResultUnionResolver {
  @ResolveField()
  __resolveType(value) {
    if (value.name) {
      return 'Author';
    }
    if (value.title) {
      return 'Book';
    }
    return null;
  }
}

----------------------------------------

TITLE: Configuring HTTPS with FastifyAdapter in NestJS
DESCRIPTION: This code snippet shows how to create a NestJS application with HTTPS support using the FastifyAdapter. It passes the HTTPS options to the FastifyAdapter constructor.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter({ https: httpsOptions }),
);

----------------------------------------

TITLE: Using PickType to Select Specific Properties in NestJS TypeScript
DESCRIPTION: Shows how to use PickType() to create a new type that only includes the 'age' property from CreateCatDto.

LANGUAGE: typescript
CODE:
export class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}

----------------------------------------

TITLE: Accessing Underlying MQTT Client Driver in NestJS
DESCRIPTION: Demonstrates how to access the underlying MQTT client driver instance for advanced use cases in NestJS.

LANGUAGE: typescript
CODE:
const mqttClient = this.client.unwrap<import('mqtt').MqttClient>();

----------------------------------------

TITLE: Sociable Testing CatsService with Suites in NestJS
DESCRIPTION: Sociable unit test for CatsService using Suites' TestBed.sociable() method, exposing CatsDAL and mocking CatsApiService.

LANGUAGE: typescript
CODE:
import { TestBed, Mocked } from '@suites/unit';
import { PrismaClient } from '@prisma/client';

describe('Cats Service Sociable Unit Test', () => {
  let catsService: CatsService;
  let prisma: Mocked<PrismaClient>;
  let catsApiService: Mocked<CatsApiService>;

  beforeAll(async () => {
    const { unit, unitRef } = await TestBed.sociable(CatsService)
      .expose(CatsDAL)
      .mock(CatsApiService)
      .final({ getCatById: async () => ({ id: 1, name: 'Catty' })})
      .compile();

    catsService = unit;
    prisma = unitRef.get(PrismaClient);
  });

  it('should get cat by id and save it', async () => {
    const catFixture: Cat = { id: 1, name: 'Catty' };
    prisma.cat.create.mockResolvedValue(catFixture);

    const savedCat = await catsService.getAndSaveCat(1);

    expect(prisma.cat.create).toHaveBeenCalledWith({ data: catFixture });
    expect(savedCat).toEqual(catFixture);
  });
});

----------------------------------------

TITLE: Accessing WebSocket Namespace in NestJS
DESCRIPTION: Shows how to access a specific WebSocket namespace in a NestJS gateway.

LANGUAGE: typescript
CODE:
@WebSocketServer({ namespace: 'my-namespace' })
namespace: Namespace;

----------------------------------------

TITLE: Registering Custom Body Parser in Fastify
DESCRIPTION: Example of registering a custom body parser for plain text content in Fastify application.

LANGUAGE: typescript
CODE:
app.useBodyParser('text/plain');

----------------------------------------

TITLE: Connecting Multiple Microservices in NestJS
DESCRIPTION: Shows how to connect multiple microservice instances to a NestJS application. This example connects both a TCP and a Redis microservice, demonstrating the flexibility of hybrid applications.

LANGUAGE: typescript
CODE:
const app = await NestFactory.create(AppModule);
// microservice #1
const microserviceTcp = app.connectMicroservice<MicroserviceOptions>({
  transport: Transport.TCP,
  options: {
    port: 3001,
  },
});
// microservice #2
const microserviceRedis = app.connectMicroservice<MicroserviceOptions>({
  transport: Transport.REDIS,
  options: {
    host: 'localhost',
    port: 6379,
  },
});

await app.startAllMicroservices();
await app.listen(3001);

----------------------------------------

TITLE: Adding Extensions to NestJS OpenAPI Requests
DESCRIPTION: Demonstrates how to add an Extension to a request using the @ApiExtension decorator in NestJS OpenAPI.

LANGUAGE: typescript
CODE:
@ApiExtension('x-foo', { hello: 'world' })

----------------------------------------

TITLE: Accessing Underlying MQTT Server Driver in NestJS
DESCRIPTION: Shows how to access the underlying MQTT server driver instance for advanced use cases in NestJS.

LANGUAGE: typescript
CODE:
const mqttClient = server.unwrap<import('mqtt').MqttClient>();

----------------------------------------

TITLE: Implementing CatsHttpService in NestJS
DESCRIPTION: TypeScript code for a NestJS service that fetches cat data from an API and logs the operation.

LANGUAGE: typescript
CODE:
@Injectable()
export class CatsHttpService {
  constructor(private httpClient: HttpClient, private logger: Logger) {}

  async fetchCats(): Promise<Cat[]> {
    this.logger.log('Fetching cats from the API');
    const response = await this.httpClient.get('/cats');
    return response.data;
  }
}

----------------------------------------

TITLE: Installing HMR Dependencies with NPM
DESCRIPTION: Command to install required webpack packages for hot module replacement functionality

LANGUAGE: bash
CODE:
$ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack

----------------------------------------

TITLE: Implementing Custom Transport Server in TypeScript
DESCRIPTION: Creates a custom transport server class that extends NestJS Server and implements CustomTransportStrategy interface. Includes basic methods for listening, closing connections, and handling events.

LANGUAGE: typescript
CODE:
import { CustomTransportStrategy, Server } from '@nestjs/microservices';

class GoogleCloudPubSubServer
  extends Server
  implements CustomTransportStrategy
{
  listen(callback: () => void) {
    callback();
  }

  close() {}

  on(event: string, callback: Function) {
    throw new Error('Method not implemented.');
  }

  unwrap<T = never>(): T {
    throw new Error('Method not implemented.');
  }
}

----------------------------------------

TITLE: Excluding Routes Using String in NestJS
DESCRIPTION: This snippet shows an alternative way to exclude routes from the global prefix by specifying the route as a string. This approach applies to every request method for the specified route.

LANGUAGE: typescript
CODE:
app.setGlobalPrefix('v1', { exclude: ['cats'] });

----------------------------------------

TITLE: Defining Multiple Files Upload DTO in NestJS OpenAPI
DESCRIPTION: Shows how to define a FilesUploadDto for handling multiple files upload in NestJS OpenAPI.

LANGUAGE: typescript
CODE:
class FilesUploadDto {
  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })
  files: any[];
}

----------------------------------------

TITLE: Accessing Underlying NATS Driver in NestJS
DESCRIPTION: Demonstrates how to access the underlying NATS driver instance for advanced usage in a NestJS application.

LANGUAGE: typescript
CODE:
const natsConnection = this.client.unwrap<import('nats').NatsConnection>();

----------------------------------------

TITLE: Generating a new resource using NestJS CLI
DESCRIPTION: This command uses the NestJS CLI to generate a new resource, creating all necessary files for CRUD operations.

LANGUAGE: shell
CODE:
$ nest g resource

----------------------------------------

TITLE: Defining an Asynchronous Provider in NestJS using TypeScript
DESCRIPTION: This snippet demonstrates how to create an asynchronous provider using the useFactory syntax. It returns a Promise that resolves to a connection object after an asynchronous createConnection operation.

LANGUAGE: typescript
CODE:
{
  provide: 'ASYNC_CONNECTION',
  useFactory: async () => {
    const connection = await createConnection(options);
    return connection;
  },
}

----------------------------------------

TITLE: Implementing PhotoService with repository injection in NestJS
DESCRIPTION: This service class demonstrates how to inject and use the Photo repository in a NestJS service. It includes a method to fetch all photos using the repository.

LANGUAGE: typescript
CODE:
import { Injectable, Inject } from '@nestjs/common';
import { Repository } from 'typeorm';
import { Photo } from './photo.entity';

@Injectable()
export class PhotoService {
  constructor(
    @Inject('PHOTO_REPOSITORY')
    private photoRepository: Repository<Photo>,
  ) {}

  async findAll(): Promise<Photo[]> {
    return this.photoRepository.find();
  }
}

----------------------------------------

TITLE: Configuring TypeScript Watching Options in tsconfig.json
DESCRIPTION: This snippet shows how to configure the TypeScript compiler options in tsconfig.json to use fixed polling interval for file watching. This can resolve issues with endless file change detection loops on Windows systems.

LANGUAGE: json
CODE:
  "watchOptions": {
    "watchFile": "fixedPollingInterval"
  }

----------------------------------------

TITLE: Using Short-hand API Response Decorators in NestJS
DESCRIPTION: Demonstrates the use of short-hand API response decorators that inherit from @ApiResponse in NestJS.

LANGUAGE: typescript
CODE:
@Post()
@ApiCreatedResponse({ description: 'The record has been successfully created.'})
@ApiForbiddenResponse({ description: 'Forbidden.'})
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}

----------------------------------------

TITLE: Defining Multiple DTO Classes for IntersectionType in NestJS TypeScript
DESCRIPTION: Creates two separate DTO classes, CreateCatDto and AdditionalCatInfo, to be used with IntersectionType().

LANGUAGE: typescript
CODE:
import { ApiProperty } from '@nestjs/swagger';

export class CreateCatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  breed: string;
}

export class AdditionalCatInfo {
  @ApiProperty()
  color: string;
}

----------------------------------------

TITLE: Installing and Running NestJS Documentation Project
DESCRIPTION: Commands to install project dependencies and start a local server for the NestJS documentation. This allows developers to view and work on the documentation locally.

LANGUAGE: bash
CODE:
$ npm install
$ npm run start

----------------------------------------

TITLE: Applying WebSocket Exception Filter in NestJS
DESCRIPTION: Illustrates how to apply a WebSocket exception filter to a specific message handler using the @UseFilters decorator. This example uses a method-scoped filter.

LANGUAGE: typescript
CODE:
@UseFilters(new WsExceptionFilter())
@SubscribeMessage('events')
onEvent(client, data: any): WsResponse<any> {
  const event = 'events';
  return { event, data };
}

----------------------------------------

TITLE: Implementing Redis-based Socket.IO Adapter in NestJS
DESCRIPTION: TypeScript code for creating a RedisIoAdapter class that extends IoAdapter. This adapter connects to Redis and creates an IO server with Redis integration for improved scalability in NestJS WebSocket applications.

LANGUAGE: typescript
CODE:
import { IoAdapter } from '@nestjs/platform-socket.io';
import { ServerOptions } from 'socket.io';
import { createAdapter } from '@socket.io/redis-adapter';
import { createClient } from 'redis';

export class RedisIoAdapter extends IoAdapter {
  private adapterConstructor: ReturnType<typeof createAdapter>;

  async connectToRedis(): Promise<void> {
    const pubClient = createClient({ url: `redis://localhost:6379` });
    const subClient = pubClient.duplicate();

    await Promise.all([pubClient.connect(), subClient.connect()]);

    this.adapterConstructor = createAdapter(pubClient, subClient);
  }

  createIOServer(port: number, options?: ServerOptions): any {
    const server = super.createIOServer(port, options);
    server.adapter(this.adapterConstructor);
    return server;
  }
}

----------------------------------------

TITLE: Building a NestJS Application with CLI
DESCRIPTION: Compiles a NestJS application or workspace into an output folder using the 'nest build' command. It handles path mapping, DTO annotations, and supports different builders like tsc, swc, or webpack.

LANGUAGE: bash
CODE:
$ nest build <name> [options]

----------------------------------------

TITLE: Defining array types for Swagger in NestJS
DESCRIPTION: Shows how to properly define array types for Swagger documentation in NestJS using the @ApiProperty decorator.

LANGUAGE: typescript
CODE:
@ApiProperty({ type: [String] })
names: string[];

----------------------------------------

TITLE: Configuring Multiple Swagger Specifications in NestJS
DESCRIPTION: Demonstrates how to set up multiple Swagger specifications for different modules in a NestJS application, exposing separate API documentations.

LANGUAGE: typescript
CODE:
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { CatsModule } from './cats/cats.module';
import { DogsModule } from './dogs/dogs.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  /**
   * createDocument(application, configurationOptions, extraOptions);
   *
   * createDocument method takes an optional 3rd argument "extraOptions"
   * which is an object with "include" property where you can pass an Array
   * of Modules that you want to include in that Swagger Specification
   * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which
   * will be exposed on two different SwaggerUI with two different endpoints.
   */

  const options = new DocumentBuilder()
    .setTitle('Cats example')
    .setDescription('The cats API description')
    .setVersion('1.0')
    .addTag('cats')
    .build();

  const catDocumentFactory = () =>
    SwaggerModule.createDocument(app, options, {
      include: [CatsModule],
    });
  SwaggerModule.setup('api/cats', app, catDocumentFactory);

  const secondOptions = new DocumentBuilder()
    .setTitle('Dogs example')
    .setDescription('The dogs API description')
    .setVersion('1.0')
    .addTag('dogs')
    .build();

  const dogDocumentFactory = () =>
    SwaggerModule.createDocument(app, secondOptions, {
      include: [DogsModule],
    });
  SwaggerModule.setup('api/dogs', app, dogDocumentFactory);

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

----------------------------------------

TITLE: Cloning NestJS TypeScript Starter Project
DESCRIPTION: Git commands to clone the official NestJS TypeScript starter repository, install dependencies, and start the application. This provides an alternative to using the CLI for project setup.

LANGUAGE: bash
CODE:
$ git clone https://github.com/nestjs/typescript-starter.git project
$ cd project
$ npm install
$ npm run start

----------------------------------------

TITLE: Creating Custom Decorators for GraphQL in NestJS
DESCRIPTION: Demonstrates how to create and use custom decorators in GraphQL resolvers.

LANGUAGE: typescript
CODE:
export const User = createParamDecorator(
  (data: unknown, ctx: ExecutionContext) =>
    GqlExecutionContext.create(ctx).getContext().user,
);

LANGUAGE: typescript
CODE:
@Mutation()
async upvotePost(
  @User() user: UserEntity,
  @Args('postId') postId: number,
) {}

----------------------------------------

TITLE: Checking Node.js internationalization support
DESCRIPTION: Command to check if the installed Node.js binary has internationalization support, which is required for the NestJS CLI.

LANGUAGE: bash
CODE:
node -p process.versions.icu

----------------------------------------

TITLE: Implementing Queue Producer
DESCRIPTION: Example of a service that produces jobs for a BullMQ queue

LANGUAGE: typescript
CODE:
import { Injectable } from '@nestjs/common';
import { Queue } from 'bullmq';
import { InjectQueue } from '@nestjs/bullmq';

@Injectable()
export class AudioService {
  constructor(@InjectQueue('audio') private audioQueue: Queue) {}

  async addJob() {
    const job = await this.audioQueue.add('transcode', {
      foo: 'bar'
    });
  }
}

----------------------------------------

TITLE: Configuring Hierarchical RouterModule with Parent-Child Relationships
DESCRIPTION: Demonstrates how to create a hierarchical routing structure where child modules inherit their parent's prefix. Shows configuration for AdminModule as parent with DashboardModule and MetricsModule as children.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    AdminModule,
    DashboardModule,
    MetricsModule,
    RouterModule.register([
      {
        path: 'admin',
        module: AdminModule,
        children: [
          {
            path: 'dashboard',
            module: DashboardModule,
          },
          {
            path: 'metrics',
            module: MetricsModule,
          },
        ],
      },
    ])
  ],
});

----------------------------------------

TITLE: Installing Cache Dependencies in NestJS
DESCRIPTION: Command to install required caching packages for NestJS applications.

LANGUAGE: bash
CODE:
$ npm install @nestjs/cache-manager cache-manager

----------------------------------------

TITLE: Configuring Redis Microservice in NestJS
DESCRIPTION: Setup code for creating a microservice instance with Redis transport, including host and port configuration

LANGUAGE: typescript
CODE:
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.REDIS,
  options: {
    host: 'localhost',
    port: 6379,
  },
});

----------------------------------------

TITLE: Installing NestJS Throttler Package
DESCRIPTION: Command to install the @nestjs/throttler package which provides rate limiting functionality

LANGUAGE: bash
CODE:
$ npm i --save @nestjs/throttler

----------------------------------------

TITLE: Configuring UsersModule for User Management
DESCRIPTION: Set up the UsersModule to provide and export the UsersService.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';

@Module({
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}

----------------------------------------

TITLE: Creating a Custom Cookie Decorator in NestJS
DESCRIPTION: Implement a custom decorator for convenient, declarative access to incoming cookies in NestJS applications.

LANGUAGE: typescript
CODE:
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const Cookies = createParamDecorator((data: string, ctx: ExecutionContext) => {
  const request = ctx.switchToHttp().getRequest();
  return data ? request.cookies?.[data] : request.cookies;
});

----------------------------------------

TITLE: Configuring Global Sentry Filter
DESCRIPTION: Configuration for adding the SentryGlobalFilter to capture unhandled errors automatically.

LANGUAGE: typescript
CODE:
import { Module } from "@nestjs/common";
import { APP_FILTER } from "@nestjs/core";
import { SentryGlobalFilter } from "@sentry/nestjs/setup";

@Module({
  providers: [
    {
      provide: APP_FILTER,
      useClass: SentryGlobalFilter,
    },
    // ..other providers
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Installing Fastify Cookie Plugin for NestJS
DESCRIPTION: Install the required package for cookie handling with Fastify in a NestJS application.

LANGUAGE: shell
CODE:
$ npm i @fastify/cookie

----------------------------------------

TITLE: Generating GraphQL TypeScript Definitions Script
DESCRIPTION: A script to generate TypeScript definitions from GraphQL schema files on demand.

LANGUAGE: typescript
CODE:
import { GraphQLDefinitionsFactory } from '@nestjs/graphql';
import { join } from 'path';

const definitionsFactory = new GraphQLDefinitionsFactory();
definitionsFactory.generate({
  typePaths: ['./src/**/*.graphql'],
  path: join(process.cwd(), 'src/graphql.ts'),
  outputAs: 'class',
});

----------------------------------------

TITLE: Basic Throttler Module Configuration
DESCRIPTION: Basic setup of ThrottlerModule with a single rate limiting rule setting TTL to 60 seconds and request limit to 10

LANGUAGE: typescript
CODE:
@Module({
  imports: [
     ThrottlerModule.forRoot({
      throttlers: [
        {
          ttl: 60000,
          limit: 10,
        },
      ],
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Enabling Auto-loading of Entities in MikroORM Configuration
DESCRIPTION: This code shows how to enable automatic loading of entities in the MikroORM configuration for NestJS. It uses the autoLoadEntities option.

LANGUAGE: typescript
CODE:
@Module({
  imports: [
    MikroOrmModule.forRoot({
      ...
      autoLoadEntities: true,
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Express Session Middleware
DESCRIPTION: Setup of express-session middleware with basic configuration options including secret, resave, and saveUninitialized flags

LANGUAGE: typescript
CODE:
import * as session from 'express-session';
// somewhere in your initialization file
app.use(
  session({
    secret: 'my-secret',
    resave: false,
    saveUninitialized: false,
  }),
);

----------------------------------------

TITLE: Implementing Global Exception Filter with Sentry
DESCRIPTION: Custom exception filter implementation that captures exceptions in Sentry using the SentryExceptionCaptured decorator.

LANGUAGE: typescript
CODE:
import { Catch, ExceptionFilter } from '@nestjs/common';
import { SentryExceptionCaptured } from '@sentry/nestjs';

@Catch()
export class YourCatchAllExceptionFilter implements ExceptionFilter {
  @SentryExceptionCaptured()
  catch(exception, host): void {
    // your implementation here
  }
}

----------------------------------------

TITLE: Configuring BullMQ Module
DESCRIPTION: Basic configuration for BullMQ module in NestJS application

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { BullModule } from '@nestjs/bullmq';

@Module({
  imports: [
    BullModule.forRoot({
      connection: {
        host: 'localhost',
        port: 6379,
      },
    }),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing GraphQL Exception Filter in NestJS
DESCRIPTION: Shows how to create an exception filter specifically for GraphQL applications.

LANGUAGE: typescript
CODE:
@Catch(HttpException)
export class HttpExceptionFilter implements GqlExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const gqlHost = GqlArgumentsHost.create(host);
    return exception;
  }
}

----------------------------------------

TITLE: Implementing a Caching Interceptor in NestJS
DESCRIPTION: This example shows how to create a basic caching interceptor that returns a cached response instead of calling the handler. It demonstrates stream overriding.

LANGUAGE: typescript
CODE:
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable, of } from 'rxjs';

@Injectable()
export class CacheInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const isCached = true;
    if (isCached) {
      return of([]);
    }
    return next.handle();
  }
}

----------------------------------------

TITLE: Using OmitType to Exclude Properties in NestJS TypeScript
DESCRIPTION: Demonstrates the use of OmitType() to create a new type that includes all properties from CreateCatDto except 'name'.

LANGUAGE: typescript
CODE:
export class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}

----------------------------------------

TITLE: Creating Version-Neutral Resources in NestJS
DESCRIPTION: Demonstrates how to create version-neutral controllers or routes in NestJS using the VERSION_NEUTRAL symbol.

LANGUAGE: typescript
CODE:
import { Controller, Get, VERSION_NEUTRAL } from '@nestjs/common';

@Controller({
  version: VERSION_NEUTRAL,
})
export class CatsController {
  @Get('cats')
  findAll(): string {
    return 'This action returns all cats regardless of version';
  }
}

----------------------------------------

TITLE: Exporting Database Providers in NestJS Module
DESCRIPTION: Creates a DatabaseModule that exports the Sequelize providers, making them accessible to other parts of the application.

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { databaseProviders } from './database.providers';

@Module({
  providers: [...databaseProviders],
  exports: [...databaseProviders],
})
export class DatabaseModule {}

----------------------------------------

TITLE: Installing Express Session Dependencies
DESCRIPTION: Commands to install express-session package and its TypeScript type definitions

LANGUAGE: shell
CODE:
$ npm i express-session
$ npm i -D @types/express-session

----------------------------------------

TITLE: Filtering Subscriptions in NestJS GraphQL
DESCRIPTION: Example of how to filter GraphQL subscriptions in NestJS. It demonstrates using a filter function to determine which events should be published to clients.

LANGUAGE: typescript
CODE:
@Subscription(() => Comment, {
  filter: (payload, variables) =>
    payload.commentAdded.title === variables.title,
})
commentAdded(@Args('title') title: string) {
  return pubSub.asyncIterableIterator('commentAdded');
}

----------------------------------------

TITLE: Installing Helmet for Express
DESCRIPTION: Command to install the Helmet security package for Express applications.

LANGUAGE: bash
CODE:
$ npm i --save helmet

----------------------------------------

TITLE: Subscribing to MQTT Server Status Updates in NestJS
DESCRIPTION: Shows how to subscribe to status updates from an MQTT server in NestJS.

LANGUAGE: typescript
CODE:
const server = app.connectMicroservice<MicroserviceOptions>(...);
server.status.subscribe((status: MqttStatus) => {
  console.log(status);
});

----------------------------------------

TITLE: Installing @nestjs/schedule Package
DESCRIPTION: Command to install the @nestjs/schedule package using npm.

LANGUAGE: bash
CODE:
$ npm install --save @nestjs/schedule

----------------------------------------

TITLE: Integration Testing CatsModule in NestJS
DESCRIPTION: Integration test to verify correct IoC container registration for CatsModule using NestJS TestingModule.

LANGUAGE: typescript
CODE:
import { Test, TestingModule } from '@nestjs/testing';
import { CatsModule } from './cats.module';
import { CatsService } from './cats.service';

describe('Cats Module Integration Test', () => {
  let moduleRef: TestingModule;

  beforeAll(async () => {
    moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    }).compile();
  });

  it('should resolve exported providers from the ioc container', () => {
    const catsService = moduleRef.get(CatsService);
    expect(catsService).toBeDefined();
  });
});

----------------------------------------

TITLE: Using Express Session with Request Object
DESCRIPTION: Example of accessing and modifying session data using the Request object in a route handler

LANGUAGE: typescript
CODE:
@Get()
findAll(@Req() request: Request) {
  request.session.visits = request.session.visits ? request.session.visits + 1 : 1;
}

----------------------------------------

TITLE: Implementing Code-First Subscription in NestJS with Apollo
DESCRIPTION: Example of creating a subscription using the code-first approach in NestJS. It uses the @Subscription() decorator and PubSub class to handle event subscriptions.

LANGUAGE: typescript
CODE:
const pubSub = new PubSub();

@Resolver(() => Author)
export class AuthorResolver {
  // ...
  @Subscription(() => Comment)
  commentAdded() {
    return pubSub.asyncIterableIterator('commentAdded');
  }
}

----------------------------------------

TITLE: Configuring Terminus Logging in NestJS
DESCRIPTION: Demonstrates how to configure custom logging for Terminus health checks in the HealthModule.

LANGUAGE: typescript
CODE:
@Module({
imports: [
  TerminusModule.forRoot({
    logger: TerminusLogger,
    errorLogStyle: 'pretty',
  }),
],
})
export class HealthModule {}

----------------------------------------

TITLE: Creating Custom User Decorator in NestJS
DESCRIPTION: Demonstrates how to create a custom @User() decorator to extract user information from the request object. This decorator can be reused across controllers for improved code readability.

LANGUAGE: typescript
CODE:
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const User = createParamDecorator(
  (data: unknown, ctx: ExecutionContext) => {
    const request = ctx.switchToHttp().getRequest();
    return request.user;
  },
);

----------------------------------------

TITLE: Implementing CatsApiService in NestJS
DESCRIPTION: TypeScript code for a NestJS service that fetches a cat by ID using HttpClient.

LANGUAGE: typescript
CODE:
import { HttpClient } from '@nestjs/axios';

@Injectable()
export class CatsApiService {
  constructor(private httpClient: HttpClient) {}

  async getCatById(id: number): Promise<Cat> {
    const response = await this.httpClient.get(`/cats/${id}`);
    return response.data;
  }
}

----------------------------------------

TITLE: Installing Fastify Session Package
DESCRIPTION: Command to install the Fastify secure session package

LANGUAGE: shell
CODE:
$ npm i @fastify/secure-session

----------------------------------------

TITLE: Decrypting AES-256-CTR Encrypted Text in TypeScript
DESCRIPTION: This snippet shows how to decrypt text that was encrypted using the AES-256-CTR algorithm. It uses the same key and initialization vector (IV) used for encryption.

LANGUAGE: typescript
CODE:
import { createDecipheriv } from 'crypto';

const decipher = createDecipheriv('aes-256-ctr', key, iv);
const decryptedText = Buffer.concat([
  decipher.update(encryptedText),
  decipher.final(),
]);

----------------------------------------

TITLE: Client-side SSE Event Handling
DESCRIPTION: JavaScript code showing how to establish an SSE connection using EventSource API and handle incoming messages. Creates a persistent connection to the server and logs parsed message data.

LANGUAGE: javascript
CODE:
const eventSource = new EventSource('/sse');
eventSource.onmessage = ({ data }) => {
  console.log('New message', JSON.parse(data));
};

----------------------------------------

TITLE: Creating a Custom Decorator with Reflector in NestJS
DESCRIPTION: Shows how to create a strongly-typed custom decorator using Reflector.createDecorator() method.

LANGUAGE: typescript
CODE:
import { Reflector } from '@nestjs/core';

export const Roles = Reflector.createDecorator<string[]>();

----------------------------------------

TITLE: Implementing TypeORM Database Health Check
DESCRIPTION: Adds a database health check using TypeOrmHealthIndicator in the HealthController.

LANGUAGE: typescript
CODE:
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private db: TypeOrmHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.db.pingCheck('database'),
    ]);
  }
}

----------------------------------------

TITLE: Using Session Decorator with Fastify
DESCRIPTION: Alternative approach using @Session decorator with Fastify's secure session implementation

LANGUAGE: typescript
CODE:
@Get()
findAll(@Session() session: secureSession.Session) {
  const visits = session.get('visits');
  session.set('visits', visits ? visits + 1 : 1);
}

----------------------------------------

TITLE: Encrypting Text with AES-256-CTR in TypeScript
DESCRIPTION: This snippet demonstrates how to encrypt text using the AES-256-CTR algorithm with Node.js crypto module. It generates a random initialization vector (IV) and derives a key from a password using scrypt.

LANGUAGE: typescript
CODE:
import { createCipheriv, randomBytes, scrypt } from 'crypto';
import { promisify } from 'util';

const iv = randomBytes(16);
const password = 'Password used to generate key';

// The key length is dependent on the algorithm.
// In this case for aes256, it is 32 bytes.
const key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;
const cipher = createCipheriv('aes-256-ctr', key, iv);

const textToEncrypt = 'Nest';
const encryptedText = Buffer.concat([
  cipher.update(textToEncrypt),
  cipher.final(),
]);

----------------------------------------

TITLE: Installing Sentry Dependencies for NestJS
DESCRIPTION: Commands to install the required Sentry SDK packages for NestJS integration including the optional profiling module.

LANGUAGE: bash
CODE:
$ npm install --save @sentry/nestjs @sentry/profiling-node

----------------------------------------

TITLE: Injecting Request Object in NestJS Service
DESCRIPTION: Shows how to inject and access the request object in a request-scoped service.

LANGUAGE: typescript
CODE:
import { Injectable, Scope, Inject } from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';

@Injectable({ scope: Scope.REQUEST })
export class CatsService {
  constructor(@Inject(REQUEST) private request: Request) {}
}

----------------------------------------

TITLE: Creating Roles Decorator
DESCRIPTION: Implements a custom decorator to specify required roles for route handlers using NestJS metadata.

LANGUAGE: typescript
CODE:
import { SetMetadata } from '@nestjs/common';
import { Role } from '../enums/role.enum';

export const ROLES_KEY = 'roles';
export const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);

----------------------------------------

TITLE: Implementing a Declarative Timeout in NestJS
DESCRIPTION: Example of creating a timeout using the @Timeout() decorator in NestJS.

LANGUAGE: typescript
CODE:
@Timeout(5000)
handleTimeout() {
  this.logger.debug('Called once after 5 seconds');
}

----------------------------------------

TITLE: Updating Express v5 Route Wildcards in NestJS 11
DESCRIPTION: Demonstrates how to update route wildcards to comply with Express v5 requirements in NestJS 11. The new syntax uses named wildcards instead of the asterisk (*) character.

LANGUAGE: typescript
CODE:
@Get('users/*splat')
findAll() {
  return 'This route will work in Express v5';
}

----------------------------------------

TITLE: Setting Database URL for SQLite
DESCRIPTION: Environment variable configuration for SQLite database URL in the .env file.

LANGUAGE: bash
CODE:
DATABASE_URL="file:./dev.db"

----------------------------------------

TITLE: Implementing AsyncLocalStorage Middleware in NestJS AppModule
DESCRIPTION: Configures a middleware in the AppModule to wrap the request handling with AsyncLocalStorage.run(). This makes the store available throughout the request lifecycle.

LANGUAGE: typescript
CODE:
@Module({
  imports: [AlsModule],
  providers: [CatsService],
  controllers: [CatsController],
})
export class AppModule implements NestModule {
  constructor(
    private readonly als: AsyncLocalStorage
  ) {}

  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply((req, res, next) => {
        const store = {
          userId: req.headers['x-user-id'],
        };
        this.als.run(store, () => next());
      })
      .forRoutes('*path');
  }
}

----------------------------------------

TITLE: Installing bcrypt Package for NestJS
DESCRIPTION: This shell command installs the bcrypt package and its TypeScript types for use in a NestJS project.

LANGUAGE: shell
CODE:
$ npm i bcrypt
$ npm i -D @types/bcrypt

----------------------------------------

TITLE: Obtaining LazyModuleLoader from Application Instance
DESCRIPTION: Shows how to get a reference to the LazyModuleLoader provider from the main application bootstrap file.

LANGUAGE: typescript
CODE:
const lazyModuleLoader = app.get(LazyModuleLoader);

----------------------------------------

TITLE: Pushing Branch to GitHub for NestJS Pull Request
DESCRIPTION: This snippet shows how to push a local branch to GitHub when preparing to submit a pull request for NestJS.

LANGUAGE: shell
CODE:
git push origin my-fix-branch

----------------------------------------

TITLE: Creating NestJS Library via CLI
DESCRIPTION: Command to generate a new library in a NestJS monorepo project using the CLI generator

LANGUAGE: bash
CODE:
$ nest g library my-library

----------------------------------------

TITLE: Cleaning Up After NestJS Pull Request Merge
DESCRIPTION: This set of snippets shows the process of cleaning up after a pull request has been merged. It includes deleting the remote branch, checking out master, deleting the local branch, and updating the local master.

LANGUAGE: shell
CODE:
git push origin --delete my-fix-branch

LANGUAGE: shell
CODE:
git checkout master -f

LANGUAGE: shell
CODE:
git branch -D my-fix-branch

LANGUAGE: shell
CODE:
git pull --ff upstream master

----------------------------------------

TITLE: Installing Multer Type Definitions in NestJS
DESCRIPTION: Command to install Multer type definitions for better type safety in NestJS file upload handling.

LANGUAGE: shell
CODE:
$ npm i -D @types/multer

----------------------------------------

TITLE: Defining Lazy-Loadable NestJS Module
DESCRIPTION: Example of a basic NestJS module structure that can be lazy loaded, showing provider definition and exports.

LANGUAGE: typescript
CODE:
@Module({
  providers: [LazyService],
  exports: [LazyService],
})
export class LazyModule {}

----------------------------------------

TITLE: Installing Compodoc in NestJS Project
DESCRIPTION: Command to install Compodoc as a dev dependency in a NestJS project. This should be run in the OS terminal within the project directory.

LANGUAGE: bash
CODE:
$ npm i -D @compodoc/compodoc

----------------------------------------

TITLE: Building NestJS Documentation Project
DESCRIPTION: Commands for building the NestJS documentation project. Includes options for regular build, watch mode for development, and production build. The build artifacts are stored in the dist/ directory.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npm run build:watch

LANGUAGE: bash
CODE:
npm run build:prod

----------------------------------------

TITLE: Creating a New Git Branch for NestJS Contribution
DESCRIPTION: This snippet shows how to create a new git branch for working on a NestJS contribution. It demonstrates checking out a new branch from the master branch.

LANGUAGE: shell
CODE:
git checkout -b my-fix-branch master