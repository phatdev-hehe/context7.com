TITLE: Using 'final' Keyword to Optimize Method Calls in Swift
DESCRIPTION: Demonstrates how to use the 'final' keyword on classes, methods, and properties to enable direct function calls instead of indirect calls through vtables, improving performance.

LANGUAGE: swift
CODE:
final class C {
  // No declarations in class 'C' can be overridden.
  var array1: [Int]
  func doSomething() { ... }
}

class D {
  final var array1: [Int] // 'array1' cannot be overridden by a computed property.
  var array2: [Int]      // 'array2' *can* be overridden by a computed property.
}

func usingC(_ c: C) {
  c.array1[i] = ... // Can directly access C.array without going through dynamic dispatch.
  c.doSomething()   // Can directly call C.doSomething without going through virtual dispatch.
}

func usingD(_ d: D) {
  d.array1[i] = ... // Can directly access D.array1 without going through dynamic dispatch.
  d.array2[i] = ... // Will access D.array2 through dynamic dispatch.
}

----------------------------------------

TITLE: Implementing Generic Array Function with Separator in Swift
DESCRIPTION: Demonstrates a generic function that creates an array from a sequence, inserting a separator between elements.

LANGUAGE: swift
CODE:
func array<S: SequenceType>(
  _ source: S,
  withSeparator separator: S.Iterator.Element
) -> [S.Iterator.Element] {
  var result: [S.Iterator.Element] = []
  var iterator = source.makeIterator()
  if let start = iterator.next() {
    result.append(start)
    while let next = iterator.next() {
      result.append(separator)
      result.append(next)
    }
  }
  return result
}

let s = String(array("Swift", withSeparator: "|"))
print(s)        // "S|w|i|f|t"

----------------------------------------

TITLE: Documenting Parameters in Swift Using Parameters Section
DESCRIPTION: This snippet demonstrates how to document function parameters using a 'Parameters' section in Swift documentation comments. It allows for describing multiple parameters in a structured format.

LANGUAGE: markdown
CODE:
- Parameters:
  - x: ...
  - y: ...
  - z: ...

----------------------------------------

TITLE: Casting Between Class Types in Swift
DESCRIPTION: This example demonstrates upcasting and downcasting between class types in Swift.

LANGUAGE: swift
CODE:
class SuperC {}
class C: SuperC {}
let c = C()
c is SuperC // true
(c as? SuperC) != nil // true

----------------------------------------

TITLE: Declaring Throwing Functions in Swift
DESCRIPTION: Examples of how to declare functions that can throw errors using the 'throws' keyword. Shows different function signatures including curried functions and closures.

LANGUAGE: swift
CODE:
func foo() -> Int {          // This function is not permitted to throw.
func bar() throws -> Int {   // This function is permitted to throw.

func baz() throws {

// Takes a 'callback' function that can throw.
// 'fred' itself can also throw.
func fred(_ callback: (UInt8) throws -> ()) throws {

// These are distinct types.
let a : () -> () -> ()
let b : () throws -> () -> ()
let c : () -> () throws -> ()
let d : () throws -> () throws -> ()

// Curried function with throws
func jerry(_ i: Int)(j: Int) throws -> Int {

----------------------------------------

TITLE: Defining a Generic Min Function in Swift
DESCRIPTION: Example of defining a generic 'min' function constrained to the Comparable protocol in Swift.

LANGUAGE: swift
CODE:
func min<T : Comparable>(x: T, y: T) -> T {
  if y < x { return y }
  return x
}

----------------------------------------

TITLE: Demonstrating Dynamic Dispatch in Swift Classes
DESCRIPTION: Shows how methods and properties in Swift classes use dynamic dispatch by default, which can impact performance. The example includes a base class A and subclass B with overridden members.

LANGUAGE: swift
CODE:
class A {
  var aProperty: [Int]
  func doSomething() { ... }
  dynamic doSomethingElse() { ... }
}

class B: A {
  override var aProperty {
    get { ... }
    set { ... }
  }

  override func doSomething() { ... }
}

func usingAnA(_ a: A) {
  a.doSomething()
  a.aProperty = ...
}

----------------------------------------

TITLE: Cloning Swift Repository and Dependencies
DESCRIPTION: Commands to clone the Swift repository and its dependencies using either SSH or HTTPS

LANGUAGE: Bash
CODE:
mkdir swift-project
cd swift-project

# Via SSH (recommended):
git clone git@github.com:swiftlang/swift.git swift
cd swift
utils/update-checkout --clone-with-ssh

# Via HTTPS:
git clone https://github.com/swiftlang/swift.git swift
cd swift
utils/update-checkout --clone

----------------------------------------

TITLE: Implementing Swift Result Builder Methods
DESCRIPTION: Comprehensive example of a result builder type showing all possible function-building methods. Includes methods for handling statement blocks, expressions, optional values, conditional statements, loops, and availability checks. Each method is documented with its specific purpose and role in the result building process.

LANGUAGE: swift
CODE:
@resultBuilder
struct ExampleResultBuilder {
  /// The type of individual statement expressions in the transformed function,
  /// which defaults to Component if buildExpression() is not provided.
  typealias Expression = ...

  /// The type of a partial result, which will be carried through all of the
  /// build functions.
  typealias Component = ...

  /// The type of the final returned result, which defaults to Component if
  /// buildFinalResult() is not provided.
  typealias Result = ...

  /// Required by every result builder to build combined results from
  /// statement blocks.
  static func buildBlock(_ components: Component...) -> Component { ... }

  /// If declared, provides contextual type information for statement
  /// expressions to translate them into partial results.
  static func buildExpression(_ expression: Expression) -> Component { ... }

  /// Enables support for `if` statements that do not have an `else`.
  static func buildOptional(_ component: Component?) -> Component { ... }

  /// With buildEither(second:), enables support for 'if-else' and 'switch'
  /// statements by folding conditional results into a single result.
  static func buildEither(first component: Component) -> Component { ... }

  /// With buildEither(first:), enables support for 'if-else' and 'switch'
  /// statements by folding conditional results into a single result.
  static func buildEither(second component: Component) -> Component { ... }

  /// Enables support for..in loops in a result builder by combining the
  /// results of all iterations into a single result.
  static func buildArray(_ components: [Component]) -> Component { ... }

  /// If declared, this will be called on the partial result of an 'if
  /// #available' block to allow the result builder to erase type
  /// information.
  static func buildLimitedAvailability(_ component: Component) -> Component { ... }

  /// If declared, this will be called on the partial result from the outermost
  /// block statement to produce the final returned result.
  static func buildFinalResult(_ component: Component) -> Result { ... }
}

----------------------------------------

TITLE: Importing C++ function with const reference parameter as Swift function
DESCRIPTION: Example of how a C++ function with a const reference parameter could be imported into Swift, showing both the original C++ code and the potential Swift import.

LANGUAGE: cpp
CODE:
void printInt(const int &value);

LANGUAGE: swift
CODE:
func printInt(_ value: Int)

----------------------------------------

TITLE: Optimizing Swift Code with 'private' and 'fileprivate' Access Control
DESCRIPTION: Shows how using 'private' and 'fileprivate' keywords can allow the compiler to infer 'final' and optimize method calls and property accesses within the same file.

LANGUAGE: swift
CODE:
private class E {
  func doSomething() { ... }
}

class F {
  fileprivate var myPrivateVar: Int
}

func usingE(_ e: E) {
  e.doSomething() // There is no sub class in the file that declares this class.
                  // The compiler can remove virtual calls to doSomething()
                  // and directly call E's doSomething method.
}

func usingF(_ f: F) -> Int {
  return f.myPrivateVar
}

----------------------------------------

TITLE: Defining Computed Variables in Swift
DESCRIPTION: Demonstrates how to create computed variables with custom getter and setter methods. Computed variables don't allocate storage but provide custom access behavior.

LANGUAGE: swift
CODE:
struct Rect {
  // Stored member variables
  var x, y, width, height : Int

  // A computed member variable
  var maxX : Int {
    get {
      return x + width
    }
    set(newMax) {
      x = newMax - width
    }
  }

  var maxY : Int {
    get {
      return y + height
    }
    set {
      y = value - height
    }
  }

  var area : Int {
    return self.width * self.height
  }
}

----------------------------------------

TITLE: Demonstrating Array Mutation Semantics in Swift
DESCRIPTION: This code snippet illustrates the copy-on-write behavior of Swift arrays, showing that modifying one array does not affect a copy of it.

LANGUAGE: swift
CODE:
var a = [1, 2, 3]
let b = a
a[1] = 42
print(b[1]) // prints "2"

----------------------------------------

TITLE: Implementing Copy-on-Write for Large Swift Values
DESCRIPTION: Demonstrates how to implement a custom copy-on-write wrapper to improve performance when working with large value types in Swift.

LANGUAGE: swift
CODE:
final class Ref<T> {
  var val: T
  init(_ v: T) { val = v }
}

struct Box<T> {
  var ref: Ref<T>
  init(_ x: T) { ref = Ref(x) }

  var value: T {
    get { return ref.val }
    set {
      if !isKnownUniquelyReferenced(&ref) {
        ref = Ref(newValue)
        return
      }
      ref.val = newValue
    }
  }
}

----------------------------------------

TITLE: Conditional Protocol Conformance in Swift
DESCRIPTION: Demonstration of conditional conformance where Array conforms to Equatable only when its elements are Equatable

LANGUAGE: Swift
CODE:
extension Array : Equatable where Element : Equatable { }

func ==<T : Equatable>(lhs: Array<T>, rhs: Array<T>) -> Bool { ... }

----------------------------------------

TITLE: Efficient Use of Value Types in Swift Arrays
DESCRIPTION: Demonstrates how using value types in Swift arrays can improve performance by avoiding NSArray bridging overhead and unnecessary retain/release operations.

LANGUAGE: swift
CODE:
// Don't use a class here.
struct PhonebookEntry {
  var name: String
  var number: [Int]
}

var a: [PhonebookEntry]

----------------------------------------

TITLE: Swapping Values and Finding Minimum in Swift
DESCRIPTION: Shows cases where second and later parameters are not labeled due to lack of distinct roles in the operation.

LANGUAGE: swift
CODE:
swap(&a, &b)                                                    // OK

let topOfPicture = min(topOfSquare, topOfTriangle, topOfCircle) // OK

----------------------------------------

TITLE: Swift Integration Example
DESCRIPTION: Example Swift code showing how to import and use C++ functions within a Swift structure.

LANGUAGE: swift
CODE:
import CxxTest

public struct CxxInterop {

    public func callCxxFunction(n: Int32) -> Int32 {
        return cxxFunction(n: n)
    }
}

print(CxxInterop().callCxxFunction(n: 7))

----------------------------------------

TITLE: Encapsulating Unsafe Behavior with '@safe' Attribute in Swift
DESCRIPTION: Shows how to use the '@safe' attribute to indicate that an entity encapsulates unsafe behavior to provide a safe interface.

LANGUAGE: swift
CODE:
@safe struct MyTemporaryBuffer<T> {
  private var storage: UnsafeBufferPointer<T>
}

----------------------------------------

TITLE: Defining a Differentiable Perceptron in Swift
DESCRIPTION: Example of defining a simple perceptron model conforming to the Differentiable protocol

LANGUAGE: Swift
CODE:
struct Perceptron: @memberwise Differentiable {
    var weight: SIMD2<Float> = .random(of: -1..<1)
    var bias: Float = 0

    @differentiable
    func callAsFunction(_ input: SIMD2<Float>) -> Float {
        (weight * input).sum() + bias
    }
}

----------------------------------------

TITLE: Replacing Subrange and Initializing From Count in Swift
DESCRIPTION: Demonstrates the use of argument labels to clarify the role of parameters beyond the first one in Swift method calls.

LANGUAGE: swift
CODE:
x.replaceSubrange(r, with: someElements)

p.initializeFrom(q, count: n)

----------------------------------------

TITLE: Defining Read-Only Property in Swift Class
DESCRIPTION: Demonstrates how to define a read-only property 'title' in a Swift class 'Window'. The property is computed and not writable.

LANGUAGE: swift
CODE:
class Window {

  var title: String { // title is not writable
    get {
      return somethingComputed()
    }
  }
}

----------------------------------------

TITLE: Demonstrating Basic Casting Operations in Swift
DESCRIPTION: This snippet shows basic usage of Swift's casting operators with integers and optionals.

LANGUAGE: swift
CODE:
let a: Int = 7
a is Int // true
a as? Int // Succeeds
a as! Int == a // true

----------------------------------------

TITLE: Defining TextOutputStream Protocol in Swift
DESCRIPTION: Core protocol definition for streaming text output, with String conformance for basic text appending functionality.

LANGUAGE: swift
CODE:
protocol TextOutputStream {
  func append(_ text: String)
}

extension String : TextOutputStream {
  func append(_ text: String)
}

----------------------------------------

TITLE: Defining an Enum with Associated Values in Swift
DESCRIPTION: This snippet defines an enum named MyQuickLookObject with a single case 'Rectangle' that has associated Float64 values. It includes documentation explaining the use of explicit coordinates.

LANGUAGE: Swift
CODE:
/// rdar://18457785
enum MyQuickLookObject {
  /// A rectangle.
  ///
  /// Uses explicit coordinates to avoid coupling a particular Cocoa type.
  case Rectangle(Float64, Float64, Float64, Float64)
}

----------------------------------------

TITLE: Importing Custom Reference Counted Types in C++ for Swift Interoperability
DESCRIPTION: This snippet demonstrates how to import a custom reference counted C++ type into Swift using the import_reference attribute. It shows the class definition and the required retain and release functions.

LANGUAGE: c++
CODE:
#define SWIFT_CXX_REF_MYREFOBJECT   \
    __attribute__((swift_attr("import_reference")))   \
    __attribute__((swift_attr("retain:incRef")))   \
    __attribute__((swift_attr("release:decRef")))

class SWIFT_CXX_REF_MYREFOBJECT MyReferenceObject {
private:
  int referenceCount; // the custom reference count.
};

/// Increment the reference count for the given object.
void incRef(MyReferenceObject *object);

/// Decrement the reference count for the given object. When it reaches zero,
/// the object is deallocated.
void decRef(MyReferenceObject *object);

----------------------------------------

TITLE: Defining a Generic Dictionary Class in Swift
DESCRIPTION: Example of defining a generic Dictionary class with a Hashable key constraint in Swift.

LANGUAGE: swift
CODE:
class Dictionary<Key : Hashable, Value> {
  // ...
}

----------------------------------------

TITLE: Defining Semantic Attribute in Swift
DESCRIPTION: Defines the syntax for the semantic attribute. This attribute specifies the high-level semantics of the function, which can be used by the optimizer for high-level optimizations.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[_semantics "' [A-Za-z._0-9]+ '"]'

----------------------------------------

TITLE: Casting with Optional Types in Swift
DESCRIPTION: This code shows how casting interacts with Swift's Optional types, including nested optionals.

LANGUAGE: swift
CODE:
let t: T
t is Optional<T> == true
t is Optional<Optional<T>> == true
Optional<T>.some(t) is T == true
Optional<Optional<T>>.some(.some(t)) is T == true

----------------------------------------

TITLE: Special Case Integer Initialization in Swift
DESCRIPTION: Illustrates the use of argument labels for special cases in integer initialization, such as interpreting bit patterns or truncating values.

LANGUAGE: swift
CODE:
// Normal case: result has same value as argument (traps on overflow)
Int(aUInt)

// Special: interprets the sign bit as a high bit, changes value
Int(bitPattern: aUInt)

// Special: keeps only the bits that fit, losing information
Int32(truncatingBitPattern: anInt64)

----------------------------------------

TITLE: Formatting Function Declarations in Swift Standard Library
DESCRIPTION: Demonstrates proper line breaking and indentation for long function declarations in the Swift standard library codebase.

LANGUAGE: Swift
CODE:
@inlinable
public func foobar<Result>(
  _ arg1: Result, 
  arg2: Int, 
  _ arg3: (Result, Element) throws -> Result
) rethrows -> Result {
  ...
}

----------------------------------------

TITLE: Defining Custom Error Types in Swift
DESCRIPTION: Example of defining a custom error type using an enum that conforms to the Error protocol. Shows how to create different error cases with associated values.

LANGUAGE: swift
CODE:
enum HomeworkError : Error {
    case Overworked
    case Impossible
    case EatenByCat(Cat)
    case StopStressingMeWithYourRules
}

----------------------------------------

TITLE: Defining RangeReplaceableCollectionType Protocol in Swift
DESCRIPTION: Defines the RangeReplaceableCollectionType protocol, which adds the capability to perform structural mutation on collections.

LANGUAGE: swift
CODE:
public protocol RangeReplaceableCollectionType : MutableCollectionType {
  mutating func replaceSubrange<
    C: CollectionType where C.Iterator.Element == Self.Iterator.Element
  >(
    _ subRange: Range<Index>, with newElements: C
  )
}

----------------------------------------

TITLE: Hello World in Embedded Swift
DESCRIPTION: Simple Hello World program in Embedded Swift and how to compile it.

LANGUAGE: swift
CODE:
print("Hello, embedded world!")

LANGUAGE: bash
CODE:
$ xcrun swiftc hello.swift -enable-experimental-feature Embedded -wmo
$ ./hello
Hello, embedded world!

----------------------------------------

TITLE: Superclass Delegation in Swift
DESCRIPTION: Demonstrates how to properly initialize a subclass by ensuring the superclass is initialized through superclass delegation. Shows the two-phase initialization pattern where subclass properties must be initialized before calling super.init().

LANGUAGE: swift
CODE:
class A {
  var x: Int

  init(x: Int) {
    self.x = x
  }
}

class B : A {
  var value: String

  init() {
    value = "Hello"
    super.init(5) // superclass delegation
  }
}

----------------------------------------

TITLE: Initializing Point2D Distance Example
DESCRIPTION: Example showing how an inlinable distance method on a Point2D struct needs to be careful about accessing internal implementation details that could change in future releases.

LANGUAGE: swift
CODE:
public struct Point2D {
  var x, y: Double
  public init(x: Double, y: Double) { /*...*/ }
}

extension Point2D {
  @inlinable public func distance(to other: Point2D) -> Double {
    let deltaX = self.x - other.x
    let deltaY = self.y - other.y
    return sqrt(deltaX*deltaX + deltaY*deltaY)
  }
}

----------------------------------------

TITLE: Defining BidirectionalIndexType Protocol in Swift
DESCRIPTION: Defines the BidirectionalIndexType protocol, which adds reverse traversal capability to indices.

LANGUAGE: swift
CODE:
protocol BidirectionalIndexType : ForwardIndexType {
  func predecessor() -> Self
}

----------------------------------------

TITLE: Implementing Weak Reference in Swift Closure
DESCRIPTION: Example of using the proposed @weak attribute in a Swift closure to create a weak reference to self.

LANGUAGE: Swift
CODE:
button2.setAction { if (weak(self)) { weak(self).swapIn() } }

----------------------------------------

TITLE: Defining CollectionType Protocol in Swift
DESCRIPTION: Defines the CollectionType protocol, which represents stable sequences with addressable positions.

LANGUAGE: swift
CODE:
protocol CollectionType : SequenceType {
  typealias Index : ForwardIndexType             // a position
  subscript(i: Index) -> Iterator.Element {get}

  var startIndex: Index {get}
  var endIndex: Index {get}
}

----------------------------------------

TITLE: Structuring Type Definitions in Swift Standard Library
DESCRIPTION: Shows the preferred order for defining members within a type declaration in the Swift standard library.

LANGUAGE: Swift
CODE:
struct Foo {
  var _storage: _Storage
  
  init(foo: Int, bar: Double) { ... }
}

extension Foo {
  class _Storage { /* even more lines */ }

  static func _createStorage(_ foo: Int, _ bar: Double) -> _Storage { ... }
}

extension Foo: Equatable {
  static func ==(left: Self, right: Self) -> Bool { ... }
}

extension Foo: Hashable {
  func hash(into hasher: inout Hasher) { ... }
}
 
extension Foo: Sequence {
  struct Iterator: IteratorProtocol { /* hundreds of lines */ }
  
  func makeIterator() -> Iterator { ... }
  ...
}

extension Foo: RandomAccessCollection {
  var count: Int { ... }
  ...
}

----------------------------------------

TITLE: Peer Delegation in Swift Extensions
DESCRIPTION: Shows how to implement peer delegation in Swift extensions, allowing one initializer to delegate to another peer initializer of the same type. Demonstrates proper initialization chain and constraints.

LANGUAGE: swift
CODE:
extension A {
  init fromString(s: String) {
    self.init(Int(s)) // peer delegation to init(Int)
  }
}

----------------------------------------

TITLE: Defining IteratorProtocol in Swift
DESCRIPTION: Defines the IteratorProtocol, which provides the core functionality for iterating over sequences.

LANGUAGE: swift
CODE:
protocol IteratorProtocol {
  typealias Element
  mutating func next() -> Element?
}

----------------------------------------

TITLE: Basic Thread Safety Race Condition Example in Swift
DESCRIPTION: Demonstrates a race condition bug where multiple threads can cause crashes by deallocating the same object simultaneously.

LANGUAGE: swift
CODE:
import Foundation

let queue = DispatchQueue.global(qos: .default)

class Bird {}
var single = Bird()

queue.async {
  while true { single = Bird() }
}
while true { single = Bird() }

----------------------------------------

TITLE: Restricted Protocol Definition in Swift
DESCRIPTION: Shows how to create a protocol with restricted conformance by using underscored requirements that become private API, preventing third-party conformance declarations.

LANGUAGE: swift
CODE:
public protocol CVarArgType {
  var _cVarArgEncoding: [Word] { get }
}

// Public API that uses CVaListPointer, so CVarArgType has to be public, too.
public func withVaList<R>(
  _ args: [CVarArgType],
  @noescape invoke body: (CVaListPointer) -> R
) -> R

----------------------------------------

TITLE: Strict Memory Safety Checking
DESCRIPTION: Swift 6.2 introduces an opt-in mode for strict checking of memory safety, enabled with the -strict-memory-safety compiler flag. This example shows a warning produced for using a memory-unsafe construct.

LANGUAGE: Swift
CODE:
func evilMalloc(size: Int) -> Int {
  // use of global function 'malloc' involves unsafe type 'UnsafeMutableRawPointer'
  return Int(bitPattern: malloc(size))
}

----------------------------------------

TITLE: Building Swift with Reduced Debug Symbols
DESCRIPTION: This command builds Swift with debug symbols enabled only for the compiler, reducing memory usage during the build process.

LANGUAGE: bash
CODE:
build-script --release --debug-swift

----------------------------------------

TITLE: Defining Dynamic Replacement and ObjC Replacement Attributes in Swift
DESCRIPTION: Specifies the syntax for dynamic replacement and ObjC replacement attributes. These attributes indicate which function this function is a replacement for.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[dynamic_replacement_for' identifier ']'
sil-function-attribute ::= '[objc_replacement_for' identifier ']'

----------------------------------------

TITLE: Implementing Analysis Invalidation Response in Swift
DESCRIPTION: This code snippet shows how an analysis can respond to invalidation messages in the Swift optimizer. It checks if any calls in the program were modified and clears the cache for the affected function.

LANGUAGE: swift
CODE:
    virtual void invalidate(SILFunction *F,
                            InvalidationKind K) override {
      if (K & InvalidationKind::Calls) {
        Storage[F].clear();
      }
    }

----------------------------------------

TITLE: Global Actor-Isolated Conformance Solution
DESCRIPTION: Shows how to isolate the entire protocol conformance to a global actor using @MainActor annotation on both the type and the protocol conformance.

LANGUAGE: swift
CODE:
@MainActor
struct MyData: @MainActor P {
  func f() { }
}

----------------------------------------

TITLE: Implementing Property Observers in Swift
DESCRIPTION: Shows how to add willSet and didSet observers to stored properties. These observers allow custom behavior before and after property value changes.

LANGUAGE: swift
CODE:
var backgroundColor : Color {
  didSet {
    refresh()
  }
}

var currentURL : URL {
  willSet(newValue) {
    if newValue != currentURL {
      cancelCurrentRequest()
    }
  }
  didSet {
    sendNewRequest(currentURL)
  }
}

var accountName : String {
  willSet {
    assert(value != "root")
  }
}

----------------------------------------

TITLE: Documenting Throwing Functions in Swift
DESCRIPTION: This snippet shows how to document functions marked as 'Throws' in Swift. It describes what kind of errors are thrown and in what situations using the 'Throws' field.

LANGUAGE: markdown
CODE:
- Throws: ...

----------------------------------------

TITLE: Demonstrating Ownership SSA in Swift SIL
DESCRIPTION: This code snippet shows how Ownership SSA works in SIL, including the use of @owned, @guaranteed, and lifetime-ending operations.

LANGUAGE: sil
CODE:
sil @stash_and_cast : $@convention(thin) (@owned Klass) -> @owned SuperKlass {
bb0(%kls1 : @owned $Klass): // Definition of %kls1

  // "Normal Use" kls1.
  // Definition of %kls2.
  %kls2 = copy_value %kls1 : $Klass

  // "Consuming Use" of %kls2 to store it into a global. Stores in ossa are
  // consuming since memory is generally assumed to have "owned"
  // semantics. After this instruction executes, we can no longer use %kls2
  // without triggering an ownership violation.
  store %kls2 to [init] %globalMem : $*Klass

  // "Consuming Use" of %kls1.
  // Definition of %kls1Casted.
  %kls1Casted = upcast %kls1 : $Klass to $SuperKlass

  // "Consuming Use" of %kls1Casted
  return %kls1Casted : $SuperKlass
}

----------------------------------------

TITLE: Importing Modules in Swift
DESCRIPTION: Demonstrates how to import entire modules and selectively import specific declarations from modules in Swift.

LANGUAGE: swift
CODE:
import Chess
import Foundation

import func Chess.createGreedyPlayer
import class Foundation.NSRegularExpression

----------------------------------------

TITLE: Implementing LED Blink Control in Embedded Swift
DESCRIPTION: Main Swift program that controls the Pico's built-in LED, demonstrating GPIO initialization and toggle functionality in an infinite loop. Uses SDK functions through bridging header.

LANGUAGE: swift
CODE:
@main
struct Main {
  static func main() {
    let led = UInt32(PICO_DEFAULT_LED_PIN)
    gpio_init(led)
    gpio_set_dir(led, /*out*/true)
    while true {
      gpio_put(led, true)
      sleep_ms(250)
      gpio_put(led, false)
      sleep_ms(250)
    }
  }
}

----------------------------------------

TITLE: Creating a Simple Swift Program for Android
DESCRIPTION: This Swift code snippet creates a simple 'Hello, Android' program that can be compiled and run on an Android device.

LANGUAGE: swift
CODE:
print("Hello, Android")

----------------------------------------

TITLE: Defining and Calling a Function with Trailing Closures in Swift
DESCRIPTION: This snippet demonstrates how to define a function that accepts multiple closure parameters and how to call it using trailing closure syntax. It showcases the omission of the argument label for the first trailing closure.

LANGUAGE: swift
CODE:
func animate(
  withDuration duration: Double, 
  animations: () -> Void, 
  completion: (() -> Void)? = nil
) { /* ... */ }

animate(withDuration: 0.3) /* `animations:` is unwritten. */ {
  // Animate something.
} completion: {
  // Completion handler.
}

----------------------------------------

TITLE: Searching and Indexing Swift Strings
DESCRIPTION: Demonstrates how to search within Swift strings and use string indices for access and slicing.

LANGUAGE: swift
CODE:
var s = "Strings are awesome"
// s : String = "Strings are awesome"
var r = s.find("awe")
// r : Range<StringIndex> = <"...are a̲w̲e̲some">
s[r.start]
// r0 : Character = Character("a")

----------------------------------------

TITLE: Handling Swift Strings as Value Types
DESCRIPTION: Illustrates how Swift strings behave as value types, with examples of passing strings to and from functions.

LANGUAGE: swift
CODE:
class Cave {
  // Utter something in the cave
  func say(_ msg: String) -> String {
    msg.addEcho()
    self.lastSound = msg
    return self.lastSound
  }

  var lastSound: String   // a Cave remembers the last sound made
}
var c = Cave()
// c: Cave = <Cave instance>
s = "Hey"
var t = c.say(s)
// t: String = "HeyHey"
s
// s: String = "Hey"
t.addEcho()
[s, c.lastSound, t]
// r0: [String] = ["Hey", "HeyHey", "HeyHeyHeyHey"]

----------------------------------------

TITLE: Building Swift Toolchain on macOS
DESCRIPTION: Command to build the Swift toolchain with optimizations, debug info, and assertions on macOS

LANGUAGE: Bash
CODE:
utils/build-script --skip-build-benchmarks \
  --swift-darwin-supported-archs "$(uname -m)" \
  --release-debuginfo --swift-disable-dead-stripping \
  --bootstrapping=hosttools

----------------------------------------

TITLE: Concrete Same-Type Requirements in Swift Extensions
DESCRIPTION: Example showing constrained extension with concrete type requirement

LANGUAGE: Swift
CODE:
extension Array where Element == String {
  func makeSentence() -> String {
    // uppercase first string, concatenate with spaces, add a period, whatever
  }
}

----------------------------------------

TITLE: Defining Mutating and Read-Only Methods in Swift Struct
DESCRIPTION: Shows how to define both mutating and read-only methods in a Swift struct 'Number'. The 'increment' method is mutating, while 'getValue' is read-only.

LANGUAGE: swift
CODE:
struct Number {
  init(x: Int) { name = x.toString() }

  func getValue() {              // read-only method
    return Int(name)
  }
  mutating func increment() {  // mutating method
    name = (Int(name)+1).toString()
  }
  var name: String
}

----------------------------------------

TITLE: Implementing Concurrent Closure Execution in Swift
DESCRIPTION: This snippet demonstrates how a function might implement concurrent execution of a @Sendable closure. It uses a task group to create multiple child tasks, each calling the provided closure concurrently.

LANGUAGE: swift
CODE:
func callConcurrently(
  _ closure: @escaping @Sendable () -> Void
) {
  Task {
    await withDiscardingTaskGroup { group in
      for _ in 0..<10 {
        group.addTask {
          closure()
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Disfavored Overloads in Swift
DESCRIPTION: Example showing how to use @_disfavoredOverload to adjust method resolution priority when dealing with ExpressibleByStringLiteral types.

LANGUAGE: swift
CODE:
extension LocalizedStringKey: ExpressibleByStringLiteral { ... }

extension Text {
  // We want `Text("foo")` to use this initializer:
  init(_ key: LocalizedStringKey) { ... }

  // But without @_disfavoredOverload, it would use this one instead,
  // because that lets it give the literal its default type:
  @_disfavoredOverload init<S: StringProtocol>(_ str: S) { ... }
}

----------------------------------------

TITLE: Using Try and Catch for Error Handling in Swift
DESCRIPTION: Demonstrates how to use 'try' to mark potentially throwing expressions and 'catch' to handle errors. Shows different patterns for catch clauses and error handling scopes.

LANGUAGE: swift
CODE:
func readStuff() throws {
    // loadFile can throw an error.  If so, it propagates out of readStuff.
    try loadFile("mystuff.txt")

    // This is a semantic error; the 'try' keyword is required
    // to indicate that it can throw.
    var y = stream.readFloat()

    // This is okay; the try covers the entire statement.
    try y += stream.readFloat()

    // This try applies to readBool().
    if try stream.readBool() {
    // This try applies to both of these calls.
    let x = try stream.readInt() + stream.readInt()
    }

    if let err = stream.getOutOfBandError() {
    // Of course, the programmer doesn't have to mark explicit throws.
    throw err
    }
}

// do statement with two catch clauses.
do {
    ...

} catch HomeworkError.Overworked {
    // a conditionally-executed catch clause

} catch _ {
    // a catch-all clause.
}

----------------------------------------

TITLE: Swift Access Level Declaration Examples
DESCRIPTION: Examples showing various access level modifiers in Swift

LANGUAGE: swift
CODE:
private(set) var someMember // Private setter, default getter access
internal(set) var anotherMember // Internal setter, default getter access
private extension SomeType // Extension with private access
public class MyClass // Public class declaration

----------------------------------------

TITLE: Demonstrating Protocol Usage as Type in Swift
DESCRIPTION: This snippet shows how a protocol without Self or associated type requirements can be used as a type in Swift. It defines an Animal protocol and conforming Dog and Cat structs, then demonstrates using Animal as an existential type.

LANGUAGE: swift
CODE:
protocol Animal {
    func makeNoise()
    static var species: String { get }
}
struct Dog: Animal {
    func makeNoise() { print("Woof") }
    static var species: String = "Canus familiaris"
}
struct Cat: Animal {
    func makeNoise() { print("Meow") }
    static var species: String = "Felis catus"
}

var animal: Animal // `Animal` is used here as a type.
animal = Dog()
animal.makeNoise() // Prints "Woof".
animal = Cat()
animal.makeNoise() // Prints "Meow".

----------------------------------------

TITLE: Running Tests with CMake
DESCRIPTION: Example of running Swift tests via CMake build command

LANGUAGE: shell
CODE:
cmake --build build/Ninja-ReleaseAssert/swift-macosx-x86_64 -- check-swift-macosx-x86_64

----------------------------------------

TITLE: Importing C++ class template as Swift generic struct
DESCRIPTION: Example of how a C++ class template could be imported as a Swift generic struct, showing both the original C++ code and the potential Swift import.

LANGUAGE: cpp
CODE:
template<typename T>
class ClassTemplate {};

LANGUAGE: swift
CODE:
struct ClassTemplate<T> {}

----------------------------------------

TITLE: Using swift_name Attribute for Custom Swift Names
DESCRIPTION: Demonstrates how to use the swift_name attribute to provide custom names for C/Objective-C declarations when imported into Swift.

LANGUAGE: objc
CODE:
__attribute__((swift_name("SpacecraftCoordinates")))
struct SPKSpacecraftCoordinates {
  double x, y, z, t; // space and time, of course
};

LANGUAGE: swift
CODE:
struct SpacecraftCoordinates {
  var x, y, z, t: Double
}

----------------------------------------

TITLE: Using ContiguousArray for Reference Types in Swift
DESCRIPTION: Shows how to use ContiguousArray instead of Array when working with reference types and NSArray bridging is not needed, potentially improving performance.

LANGUAGE: swift
CODE:
class C { ... }
var a: ContiguousArray<C> = [C(...), C(...), ..., C(...)]

----------------------------------------

TITLE: Enabling Type Checker Logging in Swift
DESCRIPTION: Command to enable logging in the Swift type checker, which will cause it to log its internal state as it solves constraints.

LANGUAGE: sh
CODE:
swiftc -Xfrontend -debug-constraints file.swift

----------------------------------------

TITLE: Importing Objective-C Methods as Swift Initializers
DESCRIPTION: Shows how Objective-C init methods and factory methods are translated into Swift initializers, including designated and convenience initializers.

LANGUAGE: objc
CODE:
@interface CorporateEmployee : NSObject
- (instancetype)initWithName:(NSString *)name manager:(nullable CorporateEmployee *)manager __attribute__((objc_designated_initializer));
- (instancetype)initCEOWithName:(NSString *)name;
- (instancetype)initTimCookHimself;
@end

LANGUAGE: swift
CODE:
class CorporateEmployee {
  init(name: String, manager: CorporateEmployee?)
  convenience init(ceoWithName: String)
  convenience init(timCookHimself: ())
}

----------------------------------------

TITLE: Using Defer for Cleanup Actions in Swift
DESCRIPTION: Example of using the 'defer' statement to set up cleanup actions that will be executed when the current scope is exited, regardless of how it exits.

LANGUAGE: swift
CODE:
if exists(filename) {
    let file = open(filename, O_READ)
    defer close(file)

    while let line = try file.readline() {
    ...
    }

    // close occurs here, at the end of the formal scope.
}

----------------------------------------

TITLE: Defining a Swift function with closure example
DESCRIPTION: This snippet demonstrates a Swift function 'example' that takes an Int and a generic type T as parameters, and returns a tuple of (Int, T). It creates a closure 'foo' that captures the 't' parameter.

LANGUAGE: swift
CODE:
func example<T>(i: Int, t: T) -> (Int, T) {
  let foo = { return ($0, t) }
  return foo(i)
}

----------------------------------------

TITLE: Defining MutableCollectionType Protocol in Swift
DESCRIPTION: Defines the MutableCollectionType protocol, which adds in-place element mutation capability to collections.

LANGUAGE: swift
CODE:
protocol MutableCollectionType : CollectionType {
  subscript(i: Index) -> Iterator.Element { get set }
}

----------------------------------------

TITLE: Initializing and Comparing Swift Strings
DESCRIPTION: Demonstrates basic string initialization and comparison in Swift, showcasing Unicode awareness and value semantics.

LANGUAGE: swift
CODE:
var s = "Yo"
// s: String = "Yo"

var n1 = "\u006E\u0303"
// n1 : String = "ñ"
var n2 = "\u00F1"
// n2 : String = "ñ"
n1 == n2
// r0 : Bool = true

n1.codePoints == n2.codePoints
// r0 : Bool = false

----------------------------------------

TITLE: Using Swift String in C++
DESCRIPTION: Demonstrates how to use Swift's String type in C++.

LANGUAGE: C++
CODE:
swift::String string = "Hello world";

string.hasPrefix("Hello"); // Implicit construction of swift::String.

void printSwiftString(const swift::String &swStr) {
  std::string str = std::to_string(swStr);
  std::cout << "swift string is " << str << "\n";
}

----------------------------------------

TITLE: Sending Parameter Solution in Swift
DESCRIPTION: Shows how to use the 'sending' parameter modifier to ensure exclusive access to a value across different concurrency domains.

LANGUAGE: swift
CODE:
class MyModel {
  static func perform(model: sending MyModel) {
    Task {
      model.update()
    }
  }

  func update() { ... }
}

----------------------------------------

TITLE: Swift UI Integration with C++
DESCRIPTION: Example of importing and using C++ code within a SwiftUI view component.

LANGUAGE: swift
CODE:
import SwiftUI
import CxxTest

struct ContentView: View {
    var body: some View {
        Text("CxxTest function result: \(cxxFunction(7))")
            .padding()
    }
}

----------------------------------------

TITLE: Implementing Complete and Subobject Initializers in Swift
DESCRIPTION: Shows an example of implementing both complete object and subobject initializers in a Swift class. The complete object initializer delegates to a subobject initializer.

LANGUAGE: swift
CODE:
class A {
  var title: String

  init() -> Self { // complete object initializer
    self.init(withTitle:"The Next Great American Novel")
  }

  init withTitle(title: String) { // subobject initializer
    self.title = title
  }
}

----------------------------------------

TITLE: Allocating Heap Memory with alloc_ref
DESCRIPTION: Allocates an object of reference type T on the heap. The object is initialized with retain count 1 but otherwise uninitialized.

LANGUAGE: swift
CODE:
%1 = alloc_ref [stack] $T
%1 = alloc_ref [tail_elems $E * %2 : Builtin.Word] $T
// $T must be a reference type
// %1 has type $T
// $E is the type of the tail-allocated elements
// %2 must be of a builtin integer type

----------------------------------------

TITLE: Defining ForwardIndexType Protocol in Swift
DESCRIPTION: Defines the ForwardIndexType protocol, which represents indices that can be compared and advanced.

LANGUAGE: swift
CODE:
protocol ForwardIndexType : Equatable {
  typealias Distance : SignedIntegerType
  func successor() -> Self
}

----------------------------------------

TITLE: Using Swift Optional in C++
DESCRIPTION: Demonstrates how to use Swift's Optional type in C++.

LANGUAGE: C++
CODE:
void printOptionalInt(const swift::Optional<int> &x) {
  if (x) {
    std::cout << ".some(" << x.value() << ")";
  } else {
    std::cout << ".none";
  }
}

----------------------------------------

TITLE: Struct Initializer Implementation in SIL
DESCRIPTION: Demonstrates the SIL implementation of both delegating and non-delegating struct initializers. Shows how struct initializers handle metatype arguments and memory allocation.

LANGUAGE: swift
CODE:
// the non-delegating init MyStruct.init(final:)
sil hidden [ossa] @$s4test8MyStructV5finalACSi_tcfC : $@convention(method) (<...>, @thin MyStruct.Type) -> MyStruct {
bb0(<...>, %meta : $@thin MyStruct.Type):
  %a = alloc_box ${ var MyStruct }, var, name "self"
  %b = mark_uninitialized [rootself] %a : ${ var MyStruct }
  %c = begin_borrow [lexical] %b : ${ var MyStruct }
  %d = project_box %c : ${ var MyStruct }, 0
  
  // ... initialize properties, etc ...
  
  %end = load [trivial] %d : $*MyStruct
  end_borrow %c : ${ var MyStruct }
  destroy_value %b : ${ var MyStruct }
  return %end : $MyStruct
}


// the delegating init MyStruct.init(delegates:)
sil hidden [ossa] @$s4test8MyStructV9delegatesACyt_tcfC : $@convention(method) (<...>, @thin MyStruct.Type) -> MyStruct {
bb0(<...>, %meta : $@thin MyStruct.Type):
  // Same allocation as the non-delegating:
  %a = alloc_box ${ var MyStruct }, var, name "self"
  %b = mark_uninitialized [rootself] %a : ${ var MyStruct }
  %c = begin_borrow [lexical] %b : ${ var MyStruct }
  %d = project_box %c : ${ var MyStruct }, 0
  
  // ... delegate to MyStruct.init(final:) ...
  
  %ctor = function_ref @$s4test8MyStructV5finalACSi_tcfC : $@convention(method) (Int, @thin MyStruct.Type) -> MyStruct
  %ret = apply %ctor(<...>, %meta) : $@convention(method) (Int, @thin MyStruct.Type) -> MyStruct
  
  assign %ret to %d : $*MyStruct
  %end = load [trivial] %d : $*MyStruct
  end_borrow %c : ${ var MyStruct }
  destroy_value %b : ${ var MyStruct }
  return %end : $MyStruct
}

----------------------------------------

TITLE: Implementing Recursive Protocol Constraints in Swift
DESCRIPTION: Example showing how associated types can be required to conform to their enclosing protocol through recursive constraints

LANGUAGE: Swift
CODE:
protocol Sequence {
  associatedtype Iterator : IteratorProtocol
  ...
  associatedtype SubSequence : Sequence   // currently ill-formed, but should be possible
}

----------------------------------------

TITLE: Importing Swift Module in C++
DESCRIPTION: Demonstrates how to import a Swift module in C++ using an include statement.

LANGUAGE: C++
CODE:
#include "MyModule-Swift.h"

----------------------------------------

TITLE: Implementing OptionSet in Swift
DESCRIPTION: Example of implementing an OptionSet-conforming struct in Swift, with usage demonstration.

LANGUAGE: Swift
CODE:
struct NSStringCompareOptions : OptionSet {
  var CaseInsensitiveSearch,
      LiteralSearch,
      BackwardsSearch,
      AnchoredSearch,
      NumericSearch,
      DiacriticInsensitiveSearch,
      WidthInsensitiveSearch,
      ForcedOrderingSearch,
      RegularExpressionSearch : Bool = false
}

var a = NSStringCompareOptions(CaseInsensitiveSearch: true,
                               BackwardsSearch: true)
var b = NSStringCompareOptions(WidthInsensitiveSearch: true,
                               BackwardsSearch: true)
var c = a & b
(a & b).any() // => true
c == NSStringCompareOptions(BackwardsSearch: true) // => true

----------------------------------------

TITLE: Calling Swift Function from C++
DESCRIPTION: Shows how to call a Swift function from C++ using the module namespace.

LANGUAGE: C++
CODE:
int main() {
  MyModule::myFunction(); // calls into Swift.
  return 0;
}

----------------------------------------

TITLE: Inserting and Checking Elements in Swift Collections
DESCRIPTION: Demonstrates the preferred syntax for inserting elements into a collection and checking if an element is contained, without using argument labels for the first parameter.

LANGUAGE: swift
CODE:
alligators.insert(fred)           // yes
if alligators.contains(george) {  // yes
  return
}

----------------------------------------

TITLE: Swift Protocol Conformance Access Control
DESCRIPTION: Demonstration of access control in protocol conformance contexts

LANGUAGE: swift
CODE:
public protocol Widget { }
private protocol ExtendedWidget: Widget { } // Valid: private protocol refining public protocol

----------------------------------------

TITLE: Using Guaranteed Lifetime Context in Swift
DESCRIPTION: Demonstrates the use of 'with' prefix for functions that execute a closure within a guaranteed lifetime context.

LANGUAGE: swift
CODE:
s.withCString {
  let fd = fopen($0)
  ...
} // don't use that pointer after the closing brace

----------------------------------------

TITLE: Swift Enum with Associated Values
DESCRIPTION: Shows how to create an enum with associated values (payload types), demonstrating pattern matching with variable binding in switch statements.

LANGUAGE: swift
CODE:
enum Pattern {
  case Solid(Color)
  case Outline(Color)
  case Checkers(Color, Color)
}

var p : Pattern = .Checkers(.Black, .White)
switch p {
case .Solid(var c):
  print("solid \(c)")
case .Outline(var c):
  print("outlined \(c)")
case .Checkers(var a, var b):
  print("checkered \(a) and \(b)")
}

----------------------------------------

TITLE: Using Unmanaged References to Avoid Reference Counting in Swift
DESCRIPTION: Shows how to use Unmanaged<T> to disable automatic reference counting for performance-critical code, with cautions about proper usage and lifetime management.

LANGUAGE: swift
CODE:
withExtendedLifetime(Head) {

  // Create an Unmanaged reference.
  var Ref: Unmanaged<Node> = Unmanaged.passUnretained(Head)

  // Use the unmanaged reference in a call/variable access. The use of
  // _withUnsafeGuaranteedRef allows the compiler to remove the ultimate
  // retain/release across the call/access.

  while let Next = Ref._withUnsafeGuaranteedRef { $0.next } {
    ...
    Ref = Unmanaged.passUnretained(Next)
  }
}

----------------------------------------

TITLE: Declaring Generic Swap Function in Swift
DESCRIPTION: Shows the acceptable use of single-character type parameter names in generic functions.

LANGUAGE: swift
CODE:
func swap<T>(lhs: inout T, rhs: inout T)

----------------------------------------

TITLE: Generic Struct with Function Property in Swift
DESCRIPTION: Example of a generic struct with a function property, demonstrating how the function type is lowered differently based on abstraction patterns.

LANGUAGE: swift
CODE:
struct Generator<T> {
  var fn : () -> T
}
var intGen : Generator<Int>

----------------------------------------

TITLE: Demonstrating Protocol Conformance Limitations in Swift
DESCRIPTION: This snippet shows that existential types cannot be used where protocol conformance is required, even if they represent that protocol. It defines a generic function that requires Animal conformance and shows it fails for the existential type.

LANGUAGE: swift
CODE:
func declareAnimalSpecies<T: Animal>(_ animal: T) {
    animal.makeNoise()
    print("My species is known as \(T.species)")
}

let dog = Dog()
declareAnimalSpecies(dog)
// Prints:
// "Woof"
// "My species is known as Canus familiaris"
declareAnimalSpecies(animal)
// error: protocol type 'Animal' cannot conform to 'Animal'...

----------------------------------------

TITLE: Declaring Stored Variables in Swift
DESCRIPTION: Shows how to declare stored variables with optional type annotation and initial value. Stored variables allocate storage in their containing context.

LANGUAGE: swift
CODE:
var count : Int
var count : Int = 10
var count = 10

----------------------------------------

TITLE: Basic String Literal Usage in Swift
DESCRIPTION: Example showing a simple string literal being used to set a window title, demonstrating how Swift handles string literal conversion to NSString.

LANGUAGE: swift
CODE:
window.setTitle("Welcome to Xcode")

----------------------------------------

TITLE: Accessing Swift Properties in C++
DESCRIPTION: Shows how to access Swift properties using getter and setter methods in C++.

LANGUAGE: C++
CODE:
void printWeatherInformation(const Weather::WeatherInformation &info) {
  std::cout << "Temperature (C): " << info.getTemperature() << "\n";
  std::cout << "Temperature (F): " << info.getTemperatureInFahrenheit() << "\n";
}

void updateWeather(Weather::WeatherInformation &info) {
  info.setTemperature(25);
}

----------------------------------------

TITLE: Type and Declaration Modifications in Swift
DESCRIPTION: Documents changes to declaration types, including class to struct conversions, operator changes, and protocol to enum conversions.

LANGUAGE: swift
CODE:
/* Moved Decls */
Class ClassToStruct -> Struct
InfixOperator ..*.. -> PrefixOperator
Protocol ProtocolToEnum -> Enum

----------------------------------------

TITLE: Defining a Custom Derivative for a Function
DESCRIPTION: Example of defining a custom derivative for the expf function using the @derivative attribute

LANGUAGE: Swift
CODE:
import Glibc

@derivative(of: expf)
func _(_ x: Float) -> (value: Float,
                       differential: @differentiable(linear) (Float) -> Float) {
    let y = expf(x)
    return (value: y, differential: { v in v * y })
}

----------------------------------------

TITLE: Importing Individual Declarations in Swift
DESCRIPTION: This snippet shows how to import specific declarations from modules in Swift, including importing multiple declarations and from submodules.

LANGUAGE: swift
CODE:
// Import only the Cocoa.NSWindow class
import class Cocoa.NSWindow

var w1 : NSWindow
var title : Cocoa.NSString

LANGUAGE: swift
CODE:
import func OpenGL.GL3.glDrawArrays, func OpenGL.GL3.Ext.glTextureRangeAPPLE
// Equivalent
import OpenGL.GL3.(func glDrawArrays, func Ext.glTextureRangeAPPLE)

----------------------------------------

TITLE: Basic Swift Differentiation Example
DESCRIPTION: Shows basic usage of the @differentiable attribute and gradient function with a simple cubed function example.

LANGUAGE: swift
CODE:
@differentiable
func cubed(_ x: Float) -> Float {
    return x * x * x
}

gradient(at: 4, of: { x in x * x * x })

----------------------------------------

TITLE: Measuring Distance Between Positions in Swift
DESCRIPTION: Shows how to add a preposition to the end of a function name to clarify the role of the first parameter when it might otherwise be unclear.

LANGUAGE: swift
CODE:
// origin of measurement is aPosition
aPosition.distanceTo(otherPosition)

----------------------------------------

TITLE: Documenting Return Values in Swift
DESCRIPTION: This snippet demonstrates how to document the return value of a function or method in Swift using the 'Returns' field. Multiple 'Returns' items can be specified, but only the last one will be shown in Xcode's QuickHelp.

LANGUAGE: markdown
CODE:
- Returns: ...

----------------------------------------

TITLE: ExpressibleByStringLiteral Protocol Definition
DESCRIPTION: Standard library protocol definition for types that can be initialized with string literals. Includes associated type requirements and initialization method.

LANGUAGE: swift
CODE:
public protocol ExpressibleByStringLiteral
  : ExpressibleByExtendedGraphemeClusterLiteral {

  /// A type that represents a string literal.
  ///
  /// Valid types for `StringLiteralType` are `String` and `StaticString`.
  associatedtype StringLiteralType: _ExpressibleByBuiltinStringLiteral

  /// Creates an instance initialized to the given string value.
  ///
  /// - Parameter value: The value of the new instance.
  init(stringLiteral value: StringLiteralType)
}

----------------------------------------

TITLE: TextOutputStreamable Protocol Definition
DESCRIPTION: Protocol for types that can write themselves to a text output stream, with CustomStringConvertible conformance.

LANGUAGE: swift
CODE:
protocol TextOutputStreamable : CustomStringConvertible {
  func writeTo<T: TextOutputStream>(_ target: [inout] T)

  func format() -> PrintRepresentation {
    return self
  }
}

----------------------------------------

TITLE: Demonstrating Abstraction Patterns in Swift
DESCRIPTION: Examples showing how different generic and concrete types result in different abstraction patterns, which affects how closures are represented and called.

LANGUAGE: swift
CODE:
struct Foo<T> {
  var value: T
  // Foo.value has abstraction pattern <T> T
}
struct Bar<T, U> {
  var value: (T) -> U
  // Bar.value has abstraction pattern <T, U> (T) -> U
}
struct Bas {
  var value: (Int) -> String
  // Bas.value has abstraction pattern (Int) -> String
}
let transform: (Int) -> String = { "\($0)" }
let foo = Foo<(Int) -> String>(value: transform)
let bar = Bar<Int, String>(value: transform)
let bas = Bas(value: transform)

----------------------------------------

TITLE: Overriding Variables in Swift Subclasses
DESCRIPTION: Demonstrates how to override variables in subclasses, including replacing computed variables with stored variables and adding new computed behavior.

LANGUAGE: swift
CODE:
class Base {
  var color : Color {
    return .Black
  }
}

class Colorful : Base {
  var color : Color
}

class MaybeColorful : Base {
  var color : Color {
    get {
      if randomBooleanValue() {
        return .Green
      } else {
        return super.color
      }
    }
    set {
      print("Sorry, we choose our own colors here.")
    }
  }
}

----------------------------------------

TITLE: Accessing Swift Array Elements with Integer Indices
DESCRIPTION: Demonstrates that Swift Array indices are plain integers and can be used directly if they are within the valid range.

LANGUAGE: swift
CODE:
0..<A.count

----------------------------------------

TITLE: Unicode Protocol Definition in Swift
DESCRIPTION: Protocol definition for Unicode string handling with associated types for different encodings and views

LANGUAGE: swift
CODE:
protocol Unicode 
  : Comparable, BidirectionalCollection where Element == Character {
  
  associatedtype Encoding : UnicodeEncoding
  var encoding: Encoding { get }
  
  associatedtype CodeUnits 
    : RandomAccessCollection where Element == Encoding.CodeUnit
  var codeUnits: CodeUnits { get }
  
  associatedtype UnicodeScalars 
    : BidirectionalCollection where Element == UnicodeScalar
  var unicodeScalars: UnicodeScalars { get }

  associatedtype ExtendedASCII 
    : BidirectionalCollection where Element == UInt32
  var extendedASCII: ExtendedASCII { get }

  var unicodeScalars: UnicodeScalars { get }
}

----------------------------------------

TITLE: Configuring and Building Swift C++ Interop Library
DESCRIPTION: Configures and builds the swiftCxx static library with C++ interoperability features. Sets up compilation flags, deployment versions, and dependencies while explicitly disabling C++ standard library inclusion.

LANGUAGE: cmake
CODE:
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../../cmake/modules)
include(StdlibOptions)

set(SWIFT_CXX_DEPS symlink_clang_headers)
if(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT)
  list(APPEND SWIFT_CXX_DEPS copy-legacy-layouts)
endif()

add_swift_target_library(swiftCxx STATIC NO_LINK_NAME IS_STDLIB IS_SWIFT_ONLY
    CxxConvertibleToBool.swift
    CxxConvertibleToCollection.swift
    CxxDictionary.swift
    CxxPair.swift
    CxxOptional.swift
    CxxSet.swift
    CxxRandomAccessCollection.swift
    CxxSequence.swift
    CxxVector.swift
    CxxSpan.swift
    UnsafeCxxIterators.swift

    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -cxx-interoperability-mode=default
    -enable-experimental-feature Span
    -enable-experimental-feature BuiltinModule
    -strict-memory-safety
    -Xcc -nostdinc++

    DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
    DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
    DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
    DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
    DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
    DEPENDS ${SWIFT_CXX_DEPS}
    MACCATALYST_BUILD_FLAVOR zippered
    INSTALL_IN_COMPONENT compiler
    INSTALL_WITH_SHARED)

add_subdirectory(libstdcxx)
add_subdirectory(std)
add_subdirectory(cxxshim)

----------------------------------------

TITLE: Basic Switch Pattern Matching in Swift
DESCRIPTION: Example showing basic pattern matching syntax using a switch statement with multiple cases and guards

LANGUAGE: swift
CODE:
switch (pair) {
case (var x, 0):
case (0, var y):
  return 1
case (var x, var y)
  return foo(x - 1, y) + foo(x, y - 1)
}

----------------------------------------

TITLE: Using Clonable in Swift
DESCRIPTION: Shows how to use the Clonable protocol for copying objects, demonstrating that structs are implicitly Clonable with default copy semantics.

LANGUAGE: swift
CODE:
var x : Baz
var y = x.clone()

// is equivalent to

var x : Baz
var y = x

----------------------------------------

TITLE: Enum Pattern Matching with Multiple Cases
DESCRIPTION: Example demonstrating pattern matching on enum values with grouped cases

LANGUAGE: swift
CODE:
switch (day) {
case .Terrible, .Horrible, .NoGood, .VeryBad:
  abort()
case .ActuallyPrettyReasonableWhenYouLookBackOnIt:
  continue
}

----------------------------------------

TITLE: Importing C Function with Keyword Name in Swift
DESCRIPTION: Demonstrates how a C function with a name that is a keyword in Swift is imported and can be called using backticks to escape the identifier.

LANGUAGE: C
CODE:
// C header.

// The name of this function is a keyword in Swift.
void func();

LANGUAGE: Swift
CODE:
// C header imported in Swift.

// The name of the function is still `func`, but it is escaped to make the
// keyword into an identifier.
func `func`()

LANGUAGE: Swift
CODE:
// Swift user.

func test() {
  // Call the C function declared above.
  `func`()
}

----------------------------------------

TITLE: Using Availability Attributes in Swift Standard Library
DESCRIPTION: Demonstrates proper use of @available attributes for ABI stability in the Swift standard library.

LANGUAGE: Swift
CODE:
extension String {
  @available(SwiftStdlib 5.2, *)
  public func blanch() { ... }

  @available(SwiftStdlib 5.2, *)
  public func roast() { ... }
}

@available(SwiftStdlib 6.3, *) // Or whatever
public struct FutureFeature {
  ...
}

----------------------------------------

TITLE: Defining SequenceType Protocol in Swift
DESCRIPTION: Defines the SequenceType protocol, which is the foundation for all sequence types in Swift.

LANGUAGE: swift
CODE:
protocol SequenceType {
  typealias Iterator : IteratorProtocol
  func makeIterator() -> Iterator
}

----------------------------------------

TITLE: Solution 2: Using Task with MainActor Isolation
DESCRIPTION: Shows an alternative solution using a Task with MainActor isolation to call the actor-isolated method from any concurrent context.

LANGUAGE: swift
CODE:
func runUpdate(model: MyModel) {
  Task { @MainActor in
    model.update()
  }
}

----------------------------------------

TITLE: Overriding Read-Write Variables in Swift
DESCRIPTION: Shows how to override read-write variables in subclasses, including adding computed behavior and using property observers with inherited variables.

LANGUAGE: swift
CODE:
class ColorBase {
  var color : Color {
    didSet {
      print("I've been painted \(color)!")
    }
  }
}

class BrightlyColored : ColorBase {
  var color : Color {
    get {
      return super.color
    }
    set(newColor) {
      // Prefer whichever color is brighter.
      if newColor.luminance > super.color.luminance {
        super.color = newColor
      } else {
        // Keep the old color.
      }
    }
  }
}

class TrackingColored : ColorBase {
  var prevColor : Color?

  var color : Color {
    willSet {
      prevColor = color
    }
  }
}

----------------------------------------

TITLE: Overloading and Type Inference Example in Swift
DESCRIPTION: Example demonstrating overloading and type inference with a 'negate' function in Swift.

LANGUAGE: swift
CODE:
func negate(_ x: Int) -> Int { return -x }
func negate(_ x: Double) -> Double { return -x }

func round(_ x: Double) -> Int { /* ... */ }
var pi: Double = 3.14159
var three = round(pi) // 'three' has type 'Int'

func identity<T>(_ x: T) -> T { return x }
var eFloat: Float = -identity(2.71828)  // numeric literal gets type 'Float'

----------------------------------------

TITLE: Demonstrating Struct Layout in Swift
DESCRIPTION: Examples of struct layouts in Swift, showing how fields are arranged and how they translate to LLVM types. Includes cases with padding and empty structs.

LANGUAGE: swift
CODE:
// LLVM <{ i64, i8 }>
struct S {
  var x: Int
  var y: UInt8
}

// LLVM <{ i8, [7 x i8], <{ i64, i8 }>, i8 }>
struct S2 {
  var x: UInt8
  var s: S
  var y: UInt8
}

// LLVM <{}>
struct Empty {}

// LLVM <{ i64, i64 }>
struct ContainsEmpty {
  var x: Int
  var y: Empty
  var z: Int
}

----------------------------------------

TITLE: Objective-C Class Reference Implementation
DESCRIPTION: Demonstrates how Objective-C code references and initializes a Swift stub class using objc_loadClassref.

LANGUAGE: objective-c
CODE:
[SwiftStubClass class]

LANGUAGE: c
CODE:
static Class *SwiftStubClassRef =
  (uintptr_t *)&_OBJC_CLASS_$_SwiftStubClassRef + 1;
Class SwiftStubClass = objc_loadClassref(&SwiftStubClassRef);
objc_msgSend(SwiftStubClass, @selector(class));

----------------------------------------

TITLE: Configuring Swift Driver Source Files and Build Settings in CMake
DESCRIPTION: Configures the build process for the Swift compiler driver as a static library. Specifies source files, dependencies, and target linking requirements. The driver component handles compilation process management and toolchain interactions.

LANGUAGE: cmake
CODE:
set(swiftDriver_sources
  Action.cpp
  Compilation.cpp
  DarwinToolChains.cpp
  Driver.cpp
  FrontendUtil.cpp
  Job.cpp
  PrettyStackTrace.cpp
  ToolChain.cpp
  ToolChains.cpp
  UnixToolChains.cpp
  WebAssemblyToolChains.cpp
  WindowsToolChains.cpp
  )

set(swiftDriver_targetDefines)

add_swift_host_library(swiftDriver STATIC
  ${swiftDriver_sources})
add_dependencies(swiftDriver
  SwiftOptions)
target_link_libraries(swiftDriver PRIVATE
  swiftAST
  swiftBasic
  swiftOption)

set_swift_llvm_is_available(swiftDriver)

----------------------------------------

TITLE: Accessing Collection Elements with Index in Swift
DESCRIPTION: Demonstrates how to access a collection element using an index in Swift. Unlike C++, Swift requires both the collection and the index to access an element.

LANGUAGE: swift
CODE:
C[I]

----------------------------------------

TITLE: Class Metadata Layout Structure
DESCRIPTION: Defines the memory layout for class metadata in Embedded Swift, including super pointer at offset 0, destructor pointer at offset 1, ivar destroyer at offset 2, and vtable at offset 3. This layout differs from full Swift's implementation.

LANGUAGE: swift
CODE:
offset 0: super pointer (null for root class)
offset 1: destructor pointer
offset 2: ivar destroyer
offset 3: vtable

----------------------------------------

TITLE: BaseInHead Extension Implementation
DESCRIPTION: Extends BaseInHead class with additional class and instance methods for category functionality.

LANGUAGE: swift
CODE:
extension BaseInHead {
  class func doItInCategory()
  func doItInCategory()
}

----------------------------------------

TITLE: Defining Read-Only and Writable Properties in Swift Extension
DESCRIPTION: Demonstrates how to define both read-only and writable properties in a Swift extension for the 'Number' struct. It also shows subscript definitions.

LANGUAGE: swift
CODE:
extension Number {
  var readOnlyValue: Int { return getValue()  }

  var writableValue: Int {
    get {
     return getValue()
    }
    set(x) {
      name = x.toString()
    }
  }

  subscript(n: Int) -> String { return name }
  subscript(n: String) -> Int {
    get {
      return 42
    }
    set(x) {
      name = x.toString()
    }
  }
}

----------------------------------------

TITLE: Configuring Swift Remote Mirror Library Build in CMake
DESCRIPTION: Defines the build configuration for the swiftRemoteMirror shared library. It specifies source files, link libraries, compile flags, and installation settings. The library is built without runtime dependencies and doesn't embed bitcode.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftRemoteMirror
                         SHARED DONT_EMBED_BITCODE NOSWIFTRT
                         SwiftRemoteMirror.cpp
                         LINK_LIBRARIES
                           swiftRemoteInspection
                         C_COMPILE_FLAGS
                           ${SWIFT_RUNTIME_CXX_FLAGS}
                           -DswiftRemoteMirror_EXPORTS
                         LINK_FLAGS
                           ${SWIFT_RUNTIME_LINK_FLAGS}
                         PREFIX_INCLUDE_DIRS
                           ${SWIFT_SOURCE_DIR}/include/swift/RemoteInspection/RuntimeHeaders
                         INCORPORATE_OBJECT_LIBRARIES swiftLLVMSupport
                         SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
                         DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_INSTALL_NAME_DIR}"
                         INSTALL_IN_COMPONENT
                           swift-remote-mirror

                         TARGET_SDKS NOT LINUX_STATIC)

----------------------------------------

TITLE: Initializer Inheritance Examples in Swift
DESCRIPTION: Demonstrates various scenarios of initializer inheritance in Swift subclasses, including cases where initializers are inherited and where they are not.

LANGUAGE: swift
CODE:
class B1 : A {
  var counter: Int

  init withTitle(title: String) { // subobject initializer
    counter = 0
    super.init(withTitle:title)
  }

  // inherits A's init()
}

class B2 : A {
  var counter: Int

  init withTitle(title: String) -> Self { // complete object initializer
    self.init(withTitle: title, initialCount: 0)
  }

  init withTitle(title: String) initialCount(Int) { // subobject initializer
    counter = initialCount
    super.init(withTitle:title)
  }

  // inherits A's init()
}

class B3 : A {
  var counter: Int

  init withInitialCount(initialCount: Int) { // subobject initializer
    counter = initialCount
    super.init(withTitle: "Unnamed")
  }

  init withStringCount(str: String) -> Self { // complete object initializer
    var initialCount = 0
    if let count = str.toInt() { initialCount = count }
    self.init(withInitialCount: initialCount)
  }

  // does not inherit A's init(), because init withTitle(String) is not
  // overridden.
}

----------------------------------------

TITLE: Implementing Generic Structs in Swift
DESCRIPTION: This snippet defines two generic structs in Swift. BarGenericSwiftStruct1 has a single generic type, while BarGenericSwiftStruct2 has two generic types with a protocol constraint.

LANGUAGE: Swift
CODE:
struct BarGenericSwiftStruct1<T> {
  init(t: T)
  func bar1InstanceFunc()
}
struct BarGenericSwiftStruct2<T, U> where T : BarProtocol {
  init(t: T, u: U)
  func bar2InstanceFunc()
}

----------------------------------------

TITLE: Importing C Function with Nullable and Non-nullable Pointers in Swift
DESCRIPTION: Illustrates how C functions with nullable and non-nullable pointer arguments are imported into Swift, using Clang's nullability annotations.

LANGUAGE: C
CODE:
// C header.

int fetch(int * _Nonnull ptr);

int fetch_or_zero(int * _Nullable ptr);

LANGUAGE: Swift
CODE:
// C header imported in Swift.

func fetch(_ ptr: UnsafeMutablePointer<CInt>) -> CInt

func fetch_or_zero(_ ptr: UnsafeMutablePointer<CInt>?) -> CInt

----------------------------------------

TITLE: Converting String Index Example in Swift
DESCRIPTION: Demonstrates two approaches for converting string indices in Swift - the canonical initializer-based approach and an alternate method using method chaining.

LANGUAGE: swift
CODE:
String.Index(s.utf16.startIndex.successor(), within: s) // canonical
s.utf16.startIndex.successor().samePosition(in: s)      // alternate

----------------------------------------

TITLE: Implementing ArrayOf<T> Generic Container in Swift
DESCRIPTION: Implements a generic ArrayOf<T> container using class inheritance to hide concrete implementing types. This allows for bridging NSArray to Swift while maintaining polymorphism and value semantics.

LANGUAGE: swift
CODE:
class ArrayOfImplBase<T> {
  var startIndex: Int { fatal() }
  var endIndex: Int { fatal() }

  func __getitem__(_ i: Int) -> T { fatal() }

  // For COW
  func _clone() -> Self { fatal() }
}

class ArrayOfImpl<T, ArrayT: Array where ArrayT.Element == T>
  : ArrayOfImplBase<T>
{
  var value: ArrayT
  var startIndex: Int { return value.startIndex }
  var endIndex: Int { return value.endIndex }
  func __getitem__(_ i: Int) -> T { return __getitem__(i) }

  // For COW
  func _clone() -> Self { return self(value) }
}

struct ArrayOf<T> : Array {
  var value: ArrayOfImplBase<T>

  var startIndex: Int { return value.startIndex }
  var endIndex: Int { return value.endIndex }
  func __getitem__(_ i: Int) -> T { return value.__getitem__(i) }

  init<ArrayT : Array where ArrayT.Element == T>(arr: ArrayT) {
    value = ArrayOfImpl<T, ArrayT>(arr)
  }
}

----------------------------------------

TITLE: Showing Tuple Type in Swift
DESCRIPTION: This snippet illustrates a tuple type in Swift, another example of a non-nominal type. It represents a tuple containing an Int and a String.

LANGUAGE: Swift
CODE:
(Int, String)

----------------------------------------

TITLE: Basic Swift Variable Ownership Example
DESCRIPTION: Demonstrates basic variable copying and ownership semantics in Swift

LANGUAGE: swift
CODE:
var x = [1,2,3]
var y = x

----------------------------------------

TITLE: Using Unowned Reference in Swift Closure
DESCRIPTION: Example of using the proposed @unowned attribute in a Swift closure to create an unowned reference to self.

LANGUAGE: Swift
CODE:
button1.setAction { unowned(self).tapOut() }

----------------------------------------

TITLE: Creating Swift Concurrency Library Target
DESCRIPTION: Defines the main Swift Concurrency library target, including source files, dependencies, compiler flags, and installation settings.

LANGUAGE: CMake
CODE:
add_swift_target_library(swift_Concurrency ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  ${SWIFT_RUNTIME_CONCURRENCY_C_SOURCES}
  ${SWIFT_RUNTIME_CONCURRENCY_EXECUTOR_SOURCES}
  ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_SOURCES}
  ${SWIFT_RUNTIME_CONCURRENCY_NONEMBEDDED_SWIFT_SOURCES}

  GYB_SOURCES
    TaskGroup+addTask.swift.gyb
    Task+startSynchronously.swift.gyb

  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  PRIVATE_LINK_LIBRARIES ${swift_concurrency_private_link_libraries}
  INCORPORATE_OBJECT_LIBRARIES_SHARED_ONLY
    ${swift_concurrency_incorporate_object_libraries_so}
  LINK_LIBRARIES ${swift_concurrency_link_libraries}

  C_COMPILE_FLAGS
    -Dswift_Concurrency_EXPORTS ${SWIFT_RUNTIME_CONCURRENCY_C_FLAGS}
    -I${SWIFT_SOURCE_DIR}/stdlib/include
  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -parse-stdlib
    ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_FLAGS}
  ${swift_concurrency_options}
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
  INSTALL_IN_COMPONENT stdlib
  MACCATALYST_BUILD_FLAVOR zippered
)

----------------------------------------

TITLE: Demonstrating Value Semantics Functions in Swift
DESCRIPTION: Example functions showing how value semantics behave with variable initialization, assignment, and mutation operations.

LANGUAGE: swift
CODE:
func f1() -> T {
   var x : T
   return x
}

func f2() -> T {
   var x : T
   var y = x
   return y
}

func f2a() -> T {
   var x : T
   var y : T
   y = x
   return y
}

func f3() -> T {
   var x : T
   var y = x
   y.mutate()
   return x
}

func f3a() -> T {
   var x : T
   var y : T
   y = x;
   y.mutate()
   return x
}

func g(_ x : T) { x.mutate() }

func f4() -> T {
   var x : T
   g(x)
   return x
}

----------------------------------------

TITLE: Defining ConditionallyBridgedToObjectiveC Protocol in Swift
DESCRIPTION: This code defines the ConditionallyBridgedToObjectiveC protocol, which extends BridgedToObjectiveC with conditional bridging capabilities.

LANGUAGE: swift
CODE:
protocol _ConditionallyBridgedToObjectiveC : _BridgedToObjectiveC {
    class func _isBridgedToObjectiveC() -> Bool
    class func _conditionallyBridgeFromObjectiveC(_: _ObjectiveCType) -> Self?
}

----------------------------------------

TITLE: Generic Collection Function Example in Swift
DESCRIPTION: Demonstrates potential issues with generic code operating on collections, showing why map() returns Array instead of Self.

LANGUAGE: swift
CODE:
func countFlattenedElements<
  S : SequenceType where S.Generator.Element == Set<Double>
>(_ sequence: S) -> Int {
  return sequence.map { $0.count }.reduce(0) { $0 + $1 }
}

----------------------------------------

TITLE: Modifying Swift Strings
DESCRIPTION: Shows how Swift strings can be mutated in place, demonstrating their mutable nature and value semantics.

LANGUAGE: swift
CODE:
extension String {
  func addEcho() {
    self += self
  }
}
s.addEcho()
s
// s: String = "YoYo"

----------------------------------------

TITLE: Explicit Capture Declaration in Swift Closure
DESCRIPTION: Example of using explicit capture declarations at the beginning of a Swift closure.

LANGUAGE: Swift
CODE:
button1.setAction {
  capture @unowned _V1 = self
  _V1.tapOut()
}

----------------------------------------

TITLE: SIL Representation of Async Function with Continuation
DESCRIPTION: SIL representation of the waitForCallback async function, showing how continuations are handled in SIL.

LANGUAGE: sil
CODE:
sil @waitForCallback : $@convention(thin) @async () -> Int {
entry:
  %cc = get_async_continuation $Int
  %closure = function_ref @waitForCallback_closure
    : $@convention(thin) (UnsafeContinuation<Int>) -> ()
  apply %closure(%cc)
  await_async_continuation %cc, resume resume_cc

resume_cc(%result : $Int):
  return %result
}

----------------------------------------

TITLE: MainActor Isolation for Static Property
DESCRIPTION: Solution showing how to isolate a static property to the main actor for concurrency safety.

LANGUAGE: swift
CODE:
class MyModel {
  @MainActor
  static let shared = MyModel() 
}

----------------------------------------

TITLE: CustomDebugStringConvertible Protocol Implementation
DESCRIPTION: Protocol for debug printing functionality with customizable text representation support for REPL and debugger output.

LANGUAGE: swift
CODE:
protocol CustomDebugStringConvertible {
  typealias DebugRepresentation : TextOutputStreamable = String

  func debugFormat() -> DebugRepresentation
}

----------------------------------------

TITLE: Unsafe Type Usage in Swift Function
DESCRIPTION: Shows a function using 'malloc', which involves the unsafe type 'UnsafeMutableRawPointer', triggering a memory safety warning.

LANGUAGE: swift
CODE:
func evilMalloc(size: Int) -> Int {
  // use of global function 'malloc' involves unsafe type 'UnsafeMutableRawPointer'
  return Int(bitPattern: malloc(size))
}

----------------------------------------

TITLE: Swift File Handle Implementation with Non-copyable Type
DESCRIPTION: Example implementation of a non-copyable File type that manages system file descriptors

LANGUAGE: swift
CODE:
moveonly struct File {
  var descriptor: Int32

  init(filename: String) throws {
    descriptor = Darwin.open(filename, O_RDONLY)

    // Abnormally exiting 'init' at any point prevents deinit
    // from being called.
    if descriptor == -1 { throw ... }
  }

  deinit {
    _ = Darwin.close(descriptor)
  }

  consuming func close() throws {
    if Darwin.fsync(descriptor) != 0 { throw ... }

    // This is a consuming function, so it has ownership of self.
    // It doesn't consume self in any other way, so it will
    // destroy it when it exits by calling deinit.  deinit
    // will then handle actually closing the descriptor.
  }
}

----------------------------------------

TITLE: Capturing Value in Swift Closure
DESCRIPTION: Example of using the proposed capture keyword to capture a specific property value in a Swift closure.

LANGUAGE: Swift
CODE:
button3.setAction { capture(self.model).addProfitStep() }

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Library in CMake
DESCRIPTION: Creates and configures the swiftSILOptimizer static library with necessary dependencies and LLVM integration. Sets up the library target, links against swiftSIL, and configures LLVM availability.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftSILOptimizer STATIC
  SILOptimizer.cpp)
target_link_libraries(swiftSILOptimizer PRIVATE
  swiftSIL)
set_swift_llvm_is_available(swiftSILOptimizer)

----------------------------------------

TITLE: Demonstrating Reference Semantics Functions in Swift
DESCRIPTION: Example functions showing how reference semantics behave with variable initialization, assignment, and mutation operations.

LANGUAGE: swift
CODE:
func f1(_ x: T) {
   x.mutate()
   return x
}

func f2(_ x: T) -> T {
   var y = x
   y.mutate()
   return x
}

func f2a(_ x: T) -> T {
   var y : T
   y = x
   y.mutate()
   return x
}

func g(_ x : T) { x.mutate() }

func f3(_ x: T) -> T {
   g(x)
   return x
}

----------------------------------------

TITLE: Configuring Swift Runtime Compile Flags in CMake
DESCRIPTION: Sets up compilation flags for the Swift runtime, including conditional flags for various runtime features like leak checking and crash reporting.

LANGUAGE: CMake
CODE:
set(swift_runtime_compile_flags ${SWIFT_RUNTIME_CORE_CXX_FLAGS})
set(swift_runtime_linker_flags ${SWIFT_RUNTIME_CORE_LINK_FLAGS})

if(SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS)
  list(APPEND swift_runtime_compile_flags
      "-DSWIFT_RUNTIME_CLOBBER_FREED_OBJECTS=1")
endif()

if(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT)
  list(APPEND swift_runtime_compile_flags
      "-DSWIFT_HAVE_CRASHREPORTERCLIENT=1")
endif()

set(swift_runtime_leaks_sources)
if(SWIFT_RUNTIME_ENABLE_LEAK_CHECKER)
  list(APPEND swift_runtime_compile_flags
       "-DSWIFT_RUNTIME_ENABLE_LEAK_CHECKER=1")
  set(swift_runtime_leaks_sources Leaks.mm)
endif()

----------------------------------------

TITLE: Defining Struct and Class Hierarchy in Swift
DESCRIPTION: Example code defining a struct and class hierarchy used to demonstrate key path layout.

LANGUAGE: swift
CODE:
struct A {
  var padding: (128 x UInt8)
  var b: B
}

class B {
  var padding: (240 x UInt8)
  var c: C
}

struct C {
  var padding: (384 x UInt8)
  var d: D
}

----------------------------------------

TITLE: Swift Protocol Inheritance
DESCRIPTION: Examples showing protocol inheritance and composition in Swift with multiple protocol conformance.

LANGUAGE: swift
CODE:
protocol VersionedDocument : Document {
  func version() -> Int
}

protocol PersistentDocument : VersionedDocument, Serializable {
  func saveToFile(_ filename : path)
}

----------------------------------------

TITLE: Cloning Swift and Related Repositories on Windows
DESCRIPTION: Batch script to clone multiple Swift-related repositories including LLVM, Swift, CoreMark, and various core libraries. It uses Git to clone specific branches and sets up the workspace structure.

LANGUAGE: Batch
CODE:
S:
git clone https://github.com/swiftlang/llvm-project --branch swift/main llvm-project
git clone -c core.autocrlf=input -c core.symlinks=true https://github.com/swiftlang/swift swift
git clone https://github.com/swiftlang/swift-cmark cmark
git clone https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
git clone https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
git clone https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest
git clone https://github.com/swiftlang/swift-tools-support-core swift-tools-support-core
git clone -c core.symlinks=true https://github.com/swiftlang/swift-llbuild swift-llbuild
git clone https://github.com/JPSim/Yams Yams
git clone https://github.com/swiftlang/swift-driver swift-driver
git clone https://github.com/apple/swift-argument-parser swift-argument-parser
git clone -c core.autocrlf=input https://github.com/swiftlang/swift-package-manager swift-package-manager
git clone https://github.com/swiftlang/indexstore-db indexstore-db

----------------------------------------

TITLE: Array Casting in Swift
DESCRIPTION: This snippet demonstrates how Swift handles casting of Array types, including the behavior of empty arrays.

LANGUAGE: swift
CODE:
func arrayCast<T,U>(source: Array<T>) -> Optional<Array<U>> {
  var result = Array<U>()
  for t in source {
    if let u = t as? U {
      result.append(u)
    } else {
      return nil
    }
  }
  return result
}

----------------------------------------

TITLE: Copying Memory with copy_addr
DESCRIPTION: Loads the value at address %0 and assigns a copy of it to address %1.

LANGUAGE: swift
CODE:
copy_addr [take] %0 to [init] %1 : $*T
// %0 and %1 must be of the same $*T address type

----------------------------------------

TITLE: Accessing Imported Declarations in Swift
DESCRIPTION: Shows how to use imported declarations with qualified and unqualified lookup in Swift.

LANGUAGE: swift
CODE:
func playChess(_ blackPlayer : Chess.Player, whitePlayer : Chess.Player) {
    var board = Board() // refers to Chess.Board
}

----------------------------------------

TITLE: Class Initializer Entry Points in SIL
DESCRIPTION: Shows the dual entry point system for class initializers in SIL, including both allocating and initializing entry points, with vtable implementation.

LANGUAGE: swift
CODE:
// MyClass.__allocating_init(final:)
sil hidden [exact_self_class] [ossa] @$s4test7MyClassC5finalACSi_tcfC : $@convention(method) (<...>, @thick MyClass.Type) -> @owned MyClass {
bb0(%0 : $Int, %1 : $@thick MyClass.Type):
  %2 = alloc_ref $MyClass
  // function_ref MyClass.init(final:)
  %3 = function_ref @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass
  %4 = apply %3(%0, %2) : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %5
  return %4 : $MyClass
}

// MyClass.init(final:)
sil hidden [ossa] @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass {
bb0(<...>, %1 : @owned $MyClass):
  %4 = mark_uninitialized [rootself] %1 : $MyClass
  
  // ... initialize MyClass ...
  
  %11 = copy_value %4 : $MyClass
  destroy_value %4 : $MyClass
  return %11 : $MyClass
}

----------------------------------------

TITLE: Accessing Struct Fields with struct_element_addr
DESCRIPTION: Given the address of a struct value in memory, derives the address of a physical field within the value.

LANGUAGE: swift
CODE:
%1 = struct_element_addr %0 : $*S, #S.field
// %0 must be of a struct type $S
// #S.field must be a physical 'var' field of $S
// %1 will be the address of the selected field of %0

----------------------------------------

TITLE: String-to-Pointer Conversion in Swift
DESCRIPTION: Shows how to create a temporary pointer from a String, providing access to the UTF-8 code units. The pointer is only valid during the function call.

LANGUAGE: swift
CODE:
func foo(bar: UnsafePointer<Int8>) { /*...*/ }
var x: String = "hello, world!"
foo(bar: x)

----------------------------------------

TITLE: Platform-Specific Random Number Generation APIs
DESCRIPTION: Details the underlying system calls used for random number generation across different platforms. Apple platforms use arc4random_buf(3), Linux and FreeBSD use getrandom(2) or /dev/urandom, Fuchsia uses getentropy(3), and Windows uses BCryptGenRandom. All implementations are thread-safe and automatically seeded with cryptographically secure capabilities where possible.

LANGUAGE: plaintext
CODE:
- Apple platforms: arc4random_buf(3)
- Linux/FreeBSD: getrandom(2) or /dev/urandom
- Fuchsia: getentropy(3)
- Windows: BCryptGenRandom

----------------------------------------

TITLE: Defining Comparison Operators in Swift Standard Library
DESCRIPTION: Implementations of relational and equality operators for Int type in the Swift standard library.

LANGUAGE: swift
CODE:
func <  (lhs : Int, rhs : Int) -> Bool
func >  (lhs : Int, rhs : Int) -> Bool
func <= (lhs : Int, rhs : Int) -> Bool
func >= (lhs : Int, rhs : Int) -> Bool
func == (lhs : Int, rhs : Int) -> Bool
func != (lhs : Int, rhs : Int) -> Bool

----------------------------------------

TITLE: Defining Dynamically Replaceable Function Attribute in Swift
DESCRIPTION: Defines the syntax for the dynamically replaceable function attribute. This attribute indicates that the function can be replaced at runtime with a different implementation.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[dynamically_replacable]'

----------------------------------------

TITLE: Configuring Objective-C Sources for Swift Stubs in CMake
DESCRIPTION: Defines Objective-C and Objective-C++ source files for Swift runtime stubs. These files handle Objective-C integration and reflection capabilities in the Swift runtime.

LANGUAGE: CMake
CODE:
set(swift_stubs_objc_sources
    Availability.mm
    FoundationHelpers.mm
    OptionalBridgingHelper.mm
    Reflection.mm
    SwiftNativeNSObject.mm
    SwiftNativeNSXXXBaseARC.m)

----------------------------------------

TITLE: Swift Required Initializer Example
DESCRIPTION: Shows how to implement required initializers for runtime type instantiation support

LANGUAGE: swift
CODE:
class View {
  @required init frame(Rect) {
    /* initialize view */
  }
}

func createView(_ viewClass: View.Type, frame: Rect) -> View {
  return viewClass(frame: frame) // okay
}

----------------------------------------

TITLE: Generating Array with Generic Function in Swift
DESCRIPTION: Example of a generic function that generates an array using a generator function. This demonstrates the need for indirect storage of generic values.

LANGUAGE: swift
CODE:
func generateArray<T>(n : Int, generator : () -> T) -> [T]

----------------------------------------

TITLE: Demonstrating String Pattern Matching in Swift
DESCRIPTION: Examples showing different string pattern matching operations using a unified API design

LANGUAGE: swift
CODE:
if let found = s.firstMatch(%"searchString") { ... }
if let found = s.firstMatch(someRegex) { ... }

for m in s.allMatches((%"searchString"), case: .insensitive) { ... }
for m in s.allMatches(someRegex) { ... }

let items = s.split(separatedBy: ", ")
let tokens = s.split(separatedBy: CharacterSet.whitespace)

----------------------------------------

TITLE: Defining Assignment Operator Pairs in Swift
DESCRIPTION: Example of how to define assignment operator pairs using the proposed syntax.

LANGUAGE: swift
CODE:
func op(X, Y) -> X

func op=(inout X, Y) -> Void

----------------------------------------

TITLE: Using defer for Clean-up Actions in Swift
DESCRIPTION: Example of using defer statement for clean-up actions in Swift.

LANGUAGE: swift
CODE:
if exists(filename) {
    let file = open(filename, O_READ)
    defer close(file)

    while let line = try file.readline() {
        // ...
    }

    // close occurs here, at the end of the formal scope.
}

----------------------------------------

TITLE: Importing Modules in Swift
DESCRIPTION: This snippet demonstrates how to import entire modules in Swift, including importing multiple modules and submodules.

LANGUAGE: swift
CODE:
import Cocoa

// Reference the NSArray type from Cocoa
var a1 : NSArray
// Same, but qualified
var a2 : Cocoa.NSArray

LANGUAGE: swift
CODE:
// Import the Cocoa.NSWindow module, *not* the NSWindow class from inside
// Cocoa
import Cocoa.NSWindow

// Reference the NSWindow type from Cocoa.NSWindow
var w1 : NSWindow
// Same, but qualified
var w2 : Cocoa.NSWindow.NSWindow

LANGUAGE: swift
CODE:
import Foundation, iAd, CoreGraphics

LANGUAGE: swift
CODE:
import OpenGL.(GL3, GL3.Ext)

----------------------------------------

TITLE: Swift Property Access with Custom Accessors
DESCRIPTION: Example showing custom property accessors with read and modify implementations

LANGUAGE: swift
CODE:
var x: String
var y: String
var first: String {
  read {
    if x < y { yield x }
    else { yield y }
  }
  modify {
    if x < y { yield &x }
    else { yield &y }
  }
}

----------------------------------------

TITLE: Defining BridgedToObjectiveC Protocol in Swift
DESCRIPTION: This snippet shows the definition of the BridgedToObjectiveC protocol, which specifies conversions between Swift types and Objective-C types.

LANGUAGE: swift
CODE:
protocol _BridgedToObjectiveC {
    typealias _ObjectiveCType: AnyObject
    func _bridgeToObjectiveC() -> _ObjectiveCType
    class func _forceBridgeFromObjectiveC(_: _ObjectiveCType) -> Self
}

----------------------------------------

TITLE: Incorrect Usage of withUnsafePointer in Swift
DESCRIPTION: Shows an incorrect pattern where a pointer is allowed to escape the withUnsafePointer closure, leading to undefined behavior.

LANGUAGE: swift
CODE:
var x = 42
let ptr = withUnsafePointer(to: &x) { $0 }
// Do something with ptr.

----------------------------------------

TITLE: ARC Loop Hoisting Example
DESCRIPTION: Demonstrates loop optimization by hoisting retain/release pairs out of a loop

LANGUAGE: sil
CODE:
bb0:
  retain %x                    
  apply %f(%x)
  apply %f(%x)
  release %x                   
  cond_br ..., bb1, bb2

bb2:
  return ...

----------------------------------------

TITLE: Defining Import Syntax in Swift
DESCRIPTION: This snippet defines the grammar for import declarations in Swift, including import kinds and the structure of import statements.

LANGUAGE: swift
CODE:
import-decl ::= 'import' import-item-list
import-item-list ::= import-item (',' import-item)*

import-item ::= import-kind? identifier-path
import-item ::= identifier-path '.' '(' import-item-list ')'

import-kind ::= 'module'

import-kind ::= 'class'
import-kind ::= 'enum'
import-kind ::= 'func'
import-kind ::= 'protocol'
import-kind ::= 'struct'
import-kind ::= 'typealias'
import-kind ::= 'var'
// ...

----------------------------------------

TITLE: Defining Weak Imported Function Attribute in Swift
DESCRIPTION: Defines the syntax for the weak imported function attribute. This attribute indicates that cross-module references to this function should always use weak linking.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[weak_imported]'

----------------------------------------

TITLE: Defining Thunk Attributes in Swift
DESCRIPTION: Defines the syntax for various thunk attributes. These attributes indicate that the function is a compiler-generated thunk of a specific type.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[' sil-function-thunk ']'
sil-function-thunk ::= 'thunk'
sil-function-thunk ::= 'signature_optimized_thunk'
sil-function-thunk ::= 'reabstraction_thunk'
sil-function-thunk ::= 'back_deployed_thunk'

----------------------------------------

TITLE: Swift Dependency Types Definition
DESCRIPTION: Definition of the four major dependency types in Swift's build system: top-level dependencies for module scope lookups, nominal dependencies for type usage, member dependencies for type member access, and dynamic-lookup for @objc member access through AnyObject.

LANGUAGE: swift
CODE:
- `top-level`: use of an unqualified name that is looked up at module scope
- `nominal`: use of a particular type, identified by mangled name
- `member`: providing or accessing specific members of a type
- `dynamic-lookup`: use of @objc members through AnyObject

----------------------------------------

TITLE: Implementing Clonable Classes in Swift
DESCRIPTION: Demonstrates how to implement Clonable for classes, including the use of the [clone] annotation for instance variables that should be cloned when copying.

LANGUAGE: swift
CODE:
class FooValue : Clonable  {}

class Bar {}

class Foo : Clonable {
    var count : Int
    var [clone] myValue : FooValue
    var somethingIJustReferTo : Bar
}

struct Baz {
    var [clone] partOfMyValue : Foo
    var anotherPart : Int
    var somethingIJustReferTo : Bar
}

----------------------------------------

TITLE: Multiple Repository Test Request
DESCRIPTION: Example showing how to test multiple pull requests across different Swift repositories simultaneously.

LANGUAGE: markdown
CODE:
Please test with following PR:\nhttps://github.com/apple/swift-lldb/pull/48\nhttps://github.com/swiftlang/swift-package-manager/pull/632\n\n@swift-ci Please test macOS platform

----------------------------------------

TITLE: Defining Transparent Function Attribute in Swift
DESCRIPTION: Specifies the syntax for the transparent function attribute. Transparent functions are always inlined and don't retain their source information when inlined.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[transparent]'

----------------------------------------

TITLE: Defining Without Actually Escaping Attribute in Swift
DESCRIPTION: Specifies the syntax for the without actually escaping attribute. This attribute indicates that the function is a thunk for closures that are not actually escaping.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[without_actually_escaping]'

----------------------------------------

TITLE: Representing Swift Existential Types in C++
DESCRIPTION: C++ class representation for Swift existential types like 'any Hashable', using an opaque existential storage mechanism.

LANGUAGE: c++
CODE:
class swift::OpaqueExistential {
  // approximate layout.
  alignas(8) char buffer[8*5]; // opaque existential is stored here (inline or boxed by Swift)
};
class swift::any<swift::Hashable>: public swift::OpaqueExistential {
};

----------------------------------------

TITLE: Defining Arithmetic Operators in Swift Standard Library
DESCRIPTION: Implementations of basic arithmetic operators for Int type in the Swift standard library.

LANGUAGE: swift
CODE:
func * (lhs: Int, rhs: Int) -> Int
func / (lhs: Int, rhs: Int) -> Int
func % (lhs: Int, rhs: Int) -> Int
func + (lhs: Int, rhs: Int) -> Int
func - (lhs: Int, rhs: Int) -> Int

----------------------------------------

TITLE: Creating Temporary Pointer using Inout-to-Pointer Conversion in Swift
DESCRIPTION: Demonstrates how to create a temporary pointer by passing an argument with & operator. The pointer is only valid for the duration of the function call.

LANGUAGE: swift
CODE:
func foo(bar: UnsafePointer<Int>) { /*...*/ }
var x: Int = 42
foo(bar: &x)

----------------------------------------

TITLE: Debugging Swift Compiler with LLDB
DESCRIPTION: Command to start debugging the Swift compiler using LLDB

LANGUAGE: Bash
CODE:
lldb -- /path/to/swift-frontend <args>

----------------------------------------

TITLE: Representing Swift Error Type in C++
DESCRIPTION: C++ class representation for Swift Error type, using a specific class that stores the pointer to the error.

LANGUAGE: c++
CODE:
class Error {
private:
  void *_opaquePointer; // Swift error instance pointer is stored here.:
};

----------------------------------------

TITLE: Swift Deinit Example
DESCRIPTION: Example demonstrating deinit sequencing behavior in Swift

LANGUAGE: swift
CODE:
class D {}
class D1 : D {}
class D2 : D {}

var GLOBAL_D : D = D1()

class C { deinit { GLOBAL_D = D2() } }

func main() {
  let c = C()
  let d = GLOBAL_D
  useC(c)
  useD(d)
}

----------------------------------------

TITLE: Defining Function Effects Attributes in Swift
DESCRIPTION: Specifies the syntax for function effects attributes. These attributes indicate the memory effects of the function.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[' sil-function-effects ']'
sil-function-effects ::= 'readonly'
sil-function-effects ::= 'readnone'
sil-function-effects ::= 'readwrite'
sil-function-effects ::= 'releasenone'

----------------------------------------

TITLE: Defining Availability Attribute in Swift
DESCRIPTION: Defines the syntax for the availability attribute. This attribute specifies the minimal OS version where the function is available.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[available' sil-version-tuple ']'
sil-version-tuple ::= [0-9]+ ('.' [0-9]+)*

----------------------------------------

TITLE: Defining Function Inlining Control Attributes in Swift
DESCRIPTION: Specifies the syntax for function inlining control attributes. These attributes control whether a function should be inlined or not.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[' sil-function-inlining ']'
sil-function-inlining ::= 'noinline'
sil-function-inlining ::= 'always_inline'

----------------------------------------

TITLE: Using Swift Generic Function in C++
DESCRIPTION: Shows how to use a Swift generic function in C++.

LANGUAGE: C++
CODE:
int main() {
  int x, y;
  Swapper::swapTwoValues(x, y); // ok.

  std::string s1, s2;
  Swapper::swapTwoValues(s1, s2);
  // error: no matching function for call to 'Swapper::swapTwoValues'
  // `because 'swift::isUsableInGenericContext<...>' evaluated to false`
  return 0;
}

----------------------------------------

TITLE: Building Swift-Inspect on Linux
DESCRIPTION: Command to build swift-inspect on Linux using Swift Package Manager. It includes parameters to locate necessary includes and libraries.

LANGUAGE: bash
CODE:
swift build -Xswiftc -I$(git rev-parse --show-toplevel)/include/swift/SwiftRemoteMirror -Xlinker -lswiftRemoteMirror

----------------------------------------

TITLE: Struct and Class Declarations with val/ref
DESCRIPTION: Demonstrates how val and ref can be used within struct and class declarations for instance variables.

LANGUAGE: swift
CODE:
struct Foo {
    var x: Int  // x is stored by-value
    val y: Int  // just like "var y: Int"
    ref z: Int  // allocate z on the heap

    var q: SomeClass          // q is a reference to SomeClass
    ref r: SomeClass          // just like "var r: SomeClass"
    val s: SomeClonableClass // clone() s when Foo is copied
}

----------------------------------------

TITLE: Defining C++ Types for Swift Interop
DESCRIPTION: Example header file demonstrating how to define C++ types that can be used in Swift. Shows vector type definition using std::vector.

LANGUAGE: C++
CODE:
// cxx-types.h (mapped to CxxTypes module in module.modulemap)
#include <algorithm>
#include <vector>

using V = std::vector<long>;

----------------------------------------

TITLE: Representing Resilient Boxed Swift Value Type in C++
DESCRIPTION: C++ class representation for resilient or opaque layout boxed Swift value types like SHA256, storing the value on the heap with a pointer.

LANGUAGE: c++
CODE:
class CryptoKit::SHA256 {
  ...
  uintptr_t pointer;         // Swift value is stored on the heap pointed by this pointer.
  alignas(8) char buffer[8];
};

----------------------------------------

TITLE: Initializing Opaque Result Types in Swift Properties and Functions
DESCRIPTION: Demonstrates the requirement for opaque type properties to have initializers or getters, and functions to have return statements. Shows valid and invalid declarations of properties and functions with opaque return types.

LANGUAGE: swift
CODE:
let x: some Equatable // error: property declares an opaque return type, but has no initializer expression from which to infer an underlying type
let y: some Equatable = 42 // OK
let z: some Equatable { // Also OK
  return "hello, " + "world!"
}

func foo() -> some Equatable { // error: function declares an opaque return type, but has no return statements in its body from which to infer an underlying type
  fatalError("Unimplemented")
}

func bar() -> some Equatable { // OK
  fatalError("Unimplemented")
  return 42
}

----------------------------------------

TITLE: Creating Protocol and Class Hierarchy
DESCRIPTION: Defines a base protocol and class hierarchy with FooProtocolBase, FooProtocolDerived, FooClassBase, and FooClassDerived implementing various methods and properties.

LANGUAGE: swift
CODE:
protocol FooProtocolBase {
  func fooProtoFunc()
  static func fooProtoClassFunc()
  var fooProperty1: Int32 { get set }
}

class FooClassDerived : FooClassBase, FooProtocolDerived {
  var fooProperty1: Int32
  func fooProtoFunc()
  class func fooProtoClassFunc()
}

----------------------------------------

TITLE: Demonstrating Swift's for...in Loop
DESCRIPTION: Shows a basic for...in loop structure in Swift, which can be used with various sequence types.

LANGUAGE: swift
CODE:
for x in s {
  doSomethingWith(x)
}

----------------------------------------

TITLE: Demonstrating Move-Only Wrapped Types in SIL
DESCRIPTION: This code snippet shows how move-only wrapped types are implemented and used in SIL, including the transformation process.

LANGUAGE: sil
CODE:
sil hidden [ossa] @doSomething : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @noImplicitCopy $Klass):
  %1 = copyable_to_moveonlywrapper [guaranteed] %0 : $@moveOnly Klass
  %2 = copy_value %1 : $@moveOnly Klass
  %3 = mark_unresolved_non_copyable_value [no_consume_or_assign] %2 : $@moveOnly Klass
  debug_value %3 : $@moveOnly Klass, let, name "x", argno 1
  %4 = begin_borrow %3 : $@moveOnly Klass
  %5 = function_ref @$s4test5KlassC11doSomethingyyF : $@convention(method) (@guaranteed Klass) -> ()
  %6 = moveonlywrapper_to_copyable [guaranteed] %4 : $@moveOnly Klass
  %7 = apply %5(%6) : $@convention(method) (@guaranteed Klass) -> ()
  end_borrow %4 : $@moveOnly Klass
  %9 = begin_borrow %3 : $@moveOnly Klass
  %10 = copy_value %9 : $@moveOnly Klass
  %11 = moveonlywrapper_to_copyable [owned] %10 : $@moveOnly Klass
  %12 = begin_borrow [lexical] %11 : $Klass
  debug_value %12 : $Klass, let, name "x2"
  end_borrow %9 : $@moveOnly Klass
  %15 = function_ref @$s4test5KlassC11doSomethingyyF : $@convention(method) (@guaranteed Klass) -> ()
  %16 = apply %15(%12) : $@convention(method) (@guaranteed Klass) -> ()
  end_borrow %12 : $Klass
  destroy_value %11 : $Klass
  destroy_value %3 : $@moveOnly Klass
  %20 = tuple ()
  return %20 : $()
}

----------------------------------------

TITLE: Generating Xcode Project for Swift
DESCRIPTION: Command to generate an Xcode project for editing Swift source code

LANGUAGE: Bash
CODE:
utils/generate-xcode <build dir>

----------------------------------------

TITLE: Declaring a Swift Function with Argument and Parameter Names
DESCRIPTION: Example of declaring a Swift function with different argument and parameter names. The argument name 'forAxis' is used at the call site, while 'axis' is used within the function body.

LANGUAGE: Swift
CODE:
func contentHuggingPriority(forAxis axis: UILayoutConstraintAxis) -> UILayoutPriority {
  // use 'axis' in the body
}

----------------------------------------

TITLE: Configuring Swift Differentiation Library Target
DESCRIPTION: Defines the main Swift differentiation library target with source files, dependencies, compilation flags, and platform-specific module requirements.

LANGUAGE: cmake
CODE:
add_swift_target_library(swift_Differentiation ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  Differentiable.swift
  DifferentialOperators.swift
  DifferentiationUtilities.swift
  AnyDifferentiable.swift
  ArrayDifferentiation.swift
  OptionalDifferentiation.swift

  "${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c"

  GYB_SOURCES
    FloatingPointDifferentiation.swift.gyb
    TgmathDerivatives.swift.gyb
    ${swiftDifferentiationSIMDFiles}

  SWIFT_MODULE_DEPENDS_OSX ${swiftDifferentiationDarwinDependencies}
  SWIFT_MODULE_DEPENDS_IOS ${swiftDifferentiationDarwinDependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swiftDifferentiationDarwinDependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swiftDifferentiationDarwinDependencies}
  SWIFT_MODULE_DEPENDS_XROS ${swiftDifferentiationDarwinDependencies}
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WASI WASILibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  C_COMPILE_FLAGS
    -Dswift_Differentiation_EXPORTS
  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -parse-stdlib
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
  INSTALL_IN_COMPONENT stdlib
  SWIFT_MODULE_DEPENDS_MACCATALYST ${swiftDifferentiationDarwinDependencies}
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Copy-on-Write Mutation Sequence in SIL
DESCRIPTION: Demonstrates a typical Copy-on-Write (COW) mutation sequence in SIL, including uniqueness check, conditional copying, and mutation.

LANGUAGE: sil
CODE:
(%uniq, %buffer) = begin_cow_mutation %immutable_buffer : $BufferClass
cond_br %uniq, bb_uniq, bb_not_unique
bb_uniq:
br bb_mutate(%buffer : $BufferClass)
bb_not_unique:
%copied_buffer = apply %copy_buffer_function(%buffer) : ...
br bb_mutate(%copied_buffer : $BufferClass)
bb_mutate(%mutable_buffer : $BufferClass):
%field = ref_element_addr %mutable_buffer : $BufferClass, #BufferClass.Field
store %value to %field : $ValueType
%new_immutable_buffer = end_cow_mutation %buffer : $BufferClass

----------------------------------------

TITLE: Defining Clang Node Owner Attribute in Swift
DESCRIPTION: Defines the syntax for the Clang node owner attribute. This attribute specifies the Clang node owner for the function.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[clang "' identifier '"]'

----------------------------------------

TITLE: Swift Reference Count Retrieval
DESCRIPTION: Function that returns a reference count for a native Swift object. Note that the returned value is random and only used for profiling.

LANGUAGE: swift
CODE:
@convention(c) (@unowned NativeObject) -> UInt

----------------------------------------

TITLE: Swift Constructor Delegation Example
DESCRIPTION: Demonstrates how one constructor can delegate to another constructor in Swift.

LANGUAGE: swift
CODE:
constructor(title : String, date : NSDate = NSDate()) {
    self.title = title
    self.date = date
}

constructor(date : NSDate = NSDate()) {
    /*self.*/constructor(title:"Task created on " + date.description(),
                       date:date)
}

----------------------------------------

TITLE: Setting Darwin Dependencies for Swift Differentiation
DESCRIPTION: Conditionally sets Darwin-related dependencies based on whether SDK overlay building is enabled.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swiftDifferentiationDarwinDependencies Darwin)
else()
set(swiftDifferentiationDarwinDependencies)
endif()

----------------------------------------

TITLE: Defining a SIL Global Variable with Static Initializer
DESCRIPTION: Example of how to define a global variable in SIL with a static initializer. The global variable is of type Int and is initialized with the value 27.

LANGUAGE: sil
CODE:
sil_global hidden @$S4test3varSiv : $Int {
  %0 = integer_literal $Builtin.Int64, 27
  %initval = struct $Int (%0 : $Builtin.Int64)
}

----------------------------------------

TITLE: Defining Exact Self Class Attribute in Swift
DESCRIPTION: Defines the syntax for the exact self class attribute. This attribute is used for designated initializers where the static type being allocated is known to be the type of the class defining the initializer.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[exact_self_class]'

----------------------------------------

TITLE: Valid Covariant Self Usage in Protocol
DESCRIPTION: Demonstrates valid usage of Self in covariant position (return type) within a protocol. Shows how Self can be safely substituted with the protocol type.

LANGUAGE: swift
CODE:
protocol Shape {
  func duplicate() -> Self
}

func duplicateShape(_ shape: Shape) -> Shape {
  return shape.duplicate // OK, produces a value of type 'Shape'
}

----------------------------------------

TITLE: Defining Basic Enums and Structs in Swift
DESCRIPTION: Defines basic enumeration and struct types including FooEnum1, FooEnum2, FooEnum3 with RawRepresentable conformance and associated properties.

LANGUAGE: swift
CODE:
struct FooEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}

var FooEnum1X: FooEnum1 { get }

----------------------------------------

TITLE: Demonstrating Metatype in Swift
DESCRIPTION: This code snippet shows a metatype in Swift, which is a non-nominal type. It represents the type of the Int type itself.

LANGUAGE: Swift
CODE:
Int.Type

----------------------------------------

TITLE: Using nonisolated(unsafe) for Static Variables
DESCRIPTION: Demonstration of using nonisolated(unsafe) to opt out of concurrency checking when external synchronization is handled manually.

LANGUAGE: swift
CODE:
  nonisolated(unsafe) static var value = 10

----------------------------------------

TITLE: Defining Pre-specialization Attribute in Swift
DESCRIPTION: Specifies the syntax for the pre-specialization attribute. This attribute indicates for which types specialized code should be generated.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[_specialize "' [A-Za-z._0-9]+ '"]'

----------------------------------------

TITLE: Swift Name Demangling Function Declaration
DESCRIPTION: Function for demangling Swift symbol names into human-readable strings. Takes a pointer to a mangled name and returns a Swift.String.

LANGUAGE: swift
CODE:
@convention(thin) (string: UnsafePointer<UInt8>,
                   length: UInt,
                   @out String) -> ()

----------------------------------------

TITLE: Resolving Ambiguity in Swift Module Imports
DESCRIPTION: Demonstrates how to resolve naming conflicts when importing multiple modules with similar declarations in Swift.

LANGUAGE: swift
CODE:
import Chess
import Xiangqi

if userGame == "chess" {
  Chess.playGame()
} else if userGame == "xiangqi" {
  Xiangqi.playGame()
}

----------------------------------------

TITLE: Configuring SIMD Files for Swift Differentiation
DESCRIPTION: Conditionally sets SIMD-related source files based on whether vector types are enabled in the Swift standard library build.

LANGUAGE: cmake
CODE:
if(SWIFT_STDLIB_ENABLE_VECTOR_TYPES)
set(swiftDifferentiationSIMDFiles SIMDDifferentiation.swift.gyb)
else()
set(swiftDifferentiationSIMDFiles)
endif()

----------------------------------------

TITLE: Demonstrating Swift Diagnostic Verifier Syntax
DESCRIPTION: Shows example syntax for using the Swift diagnostic verifier to check for expected errors, warnings, and fix-its in compiler tests.

LANGUAGE: swift
CODE:
let r : Int i = j // expected-error{{consecutive statements}} {{12-12=;}}

----------------------------------------

TITLE: Defining Build Configuration for Darwin and iOS in Swift
DESCRIPTION: This snippet shows how to define a more complex build configuration for Darwin and iOS targets. It includes separate configurations for macOS and iOS, demonstrating cross-compilation setup.

LANGUAGE: Swift
CODE:
[
  /* compiler */ (build: "x86_64-apple-macosx10.14", host: "x86_64-apple-macosx10.14"),
  /* runtime */  (build: "x86_64-apple-macosx10.14", host: "x86_64-apple-macosx10.14"),
  /* stdlib */   (build: "x86_64-apple-macosx10.14", host: "x86_64-apple-macosx10.14"),
  /* runtime */  (build: "x86_64-apple-macosx10.14", host: "armv7-apple-ios12.3"),
  /* stdlib */   (build: "x86_64-apple-macosx10.14", host: "armv7-apple-ios12.3"),
]

----------------------------------------

TITLE: Installing Swift Toolchain on macOS
DESCRIPTION: Commands for installing a built Swift toolchain into the system or user's directory on macOS, including installation of debug symbols.

LANGUAGE: shell
CODE:
  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C /
  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C ~/
  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C /
  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C ~/

----------------------------------------

TITLE: Configuring Swift Basic Library
DESCRIPTION: Defines the swiftBasic static library target with its source files, dependencies, and include directories.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftBasic STATIC
  Assertions.cpp
  BasicBridging.cpp
  BasicSourceInfo.cpp
  # ... [truncated source list]
  LLVM_LINK_COMPONENTS support targetparser)

----------------------------------------

TITLE: Implementing dynamicallyCall(withKeywordArguments:) in Swift
DESCRIPTION: The base implementation requirements for dynamicallyCall(withKeywordArguments:) method. Must be an instance method with an argument type conforming to ExpressibleByDictionaryLiteral protocol, where Key type conforms to ExpressibleByStringLiteral.

LANGUAGE: swift
CODE:
func dynamicallyCall(withKeywordArguments args: Dictionary<String, Any>) -> ReturnType

----------------------------------------

TITLE: Installing Visual Studio Components for Swift Development on Windows
DESCRIPTION: Batch script to download and install Visual Studio Community edition with necessary components for Swift development, including Python, Git, CMake, and specific Visual Studio workloads.

LANGUAGE: Batch
CODE:
curl.exe -sOL https://aka.ms/vs/16/release/vs_community.exe
vs_community ^
  --add Component.CPython3.x64 ^
  --add Microsoft.VisualStudio.Component.Git ^
  --add Microsoft.VisualStudio.Component.VC.ATL ^
  --add Microsoft.VisualStudio.Component.VC.CMake.Project ^
  --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 ^
  --add Microsoft.VisualStudio.Component.Windows10SDK ^
  --add Microsoft.VisualStudio.Component.Windows10SDK.17763
del /q vs_community.exe

----------------------------------------

TITLE: MainActor Isolation Solution in Swift
DESCRIPTION: Demonstrates how to fix concurrent access issues by isolating the class to the main actor, ensuring all access is serialized.

LANGUAGE: swift
CODE:
@MainActor
class MyModel {
  func perform() {
    Task {
      self.update()
    }
  }

  func update() { ... }
}

----------------------------------------

TITLE: Demonstrating Forward Scanning Rule in Swift 5.3+
DESCRIPTION: This snippet shows how the forward scanning rule introduced in Swift 5.3 matches trailing closures to function parameters from left to right, leading to more predictable behavior.

LANGUAGE: swift
CODE:
animate(withDuration: 0.3) {
  // Animate something.
} // `completion` has the default value `nil`.

----------------------------------------

TITLE: Defining Optimization Mode Attributes in Swift
DESCRIPTION: Defines the syntax for optimization mode attributes. These attributes specify how the function should be optimized, overriding command-line settings.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[' sil-function-optimization ']'
sil-function-inlining ::= 'Onone'
sil-function-inlining ::= 'Ospeed'
sil-function-inlining ::= 'Osize'

----------------------------------------

TITLE: Viewing Ninja Build Commands for Swift Standard Library
DESCRIPTION: This command displays the actual commands Ninja will use to build the i386 Swift standard library, useful for understanding the build process.

LANGUAGE: bash
CODE:
ninja -nv lib/swift/iphonesimulator/i386/libswiftCore.dylib

----------------------------------------

TITLE: Configuring and Building Swift Toolchain on Windows
DESCRIPTION: CMake command to configure and build the Swift toolchain on Windows. It sets various build options, compiler flags, and paths to dependencies.

LANGUAGE: CMake
CODE:
cmake -B "S:\b\1" ^
  -C S:\swift\cmake\caches\Windows-x86_64.cmake ^
  -D CMAKE_BUILD_TYPE=Release ^
  -D CMAKE_INSTALL_PREFIX=C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr ^
  -D CMAKE_C_COMPILER=cl ^
  -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy" ^
  -D CMAKE_CXX_COMPILER=cl ^
  -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy" ^
  -D CMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO" ^
  -D CMAKE_MT=mt ^
  -D CMAKE_SHARED_LINKER_FLAGS="/INCREMENTAL:NO" ^
  -D LLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-windows-msvc ^
  -D LLVM_ENABLE_PDB=YES ^
  -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=S:\cmark ^
  -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=S:\swift ^
  -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=S:\swift-corelibs-libdispatch ^
  -G Ninja ^
  -S S:\llvm-project\llvm

ninja -C S:\b\1

----------------------------------------

TITLE: Configuring Swift Compilation Flags
DESCRIPTION: Removes library evolution flag from standard compilation flags for non-resilient builds.

LANGUAGE: cmake
CODE:
string(REGEX REPLACE "-enable-library-evolution" ""
  SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS_NO_RESILIENCE
  "${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}")

----------------------------------------

TITLE: Allocating Stack Memory with alloc_stack
DESCRIPTION: Allocates uninitialized memory on the stack to contain a value of type T. The result is the address of the allocated memory.

LANGUAGE: swift
CODE:
%1 = alloc_stack $T
// %1 has type $*T

----------------------------------------

TITLE: Demonstrating Cocoa Array Bridging in Swift
DESCRIPTION: Code examples showing common use cases for array bridging between Swift and Cocoa, including passing Swift arrays to Cocoa methods and handling NSArray return values.

LANGUAGE: swift
CODE:
var a = [cocoaObject1, cocoaObject2]
someCocoaObject.takesAnNSArray(a)

func processViews(_ views: [AnyObject]) { ... }
var b = someNSWindow.views // views is an NSArray
processViews(b)

var c: [AnyObject] = someNSWindow.views

----------------------------------------

TITLE: Using Inout Parameters for Const Pointer Arguments in Swift
DESCRIPTION: Shows how to use inout parameters to pass scalar arguments to const pointer parameters, maintaining value identity.

LANGUAGE: Swift
CODE:
var mutex = pthread_mutex_create()
foo(&mutex)
foo(&mutex)
foo(&mutex)

----------------------------------------

TITLE: Declaring Function to Get Symbolic Type of Object in Swift
DESCRIPTION: Declares a function that takes an isa pointer and returns a SymbolicTypeReference. This function is used to build the symbolic type reference by walking backwards from instantiated to uninstantiated metadata, collecting generic parameters.

LANGUAGE: Swift
CODE:
func getSymbolicTypeOfObject(_ isa: void*) -> SymbolicTypeReference

----------------------------------------

TITLE: Raw Layout Examples in Swift
DESCRIPTION: Example showing different @_rawLayout type declarations with size and alignment specifications.

LANGUAGE: swift
CODE:
struct Weird {
    var x: Int32
    var y: Int8
}

@_rawLayout(like: Weird)
struct LikeWeird { }

@_rawLayout(likeArrayOf: Weird, count: 1)
struct LikeWeirdSingleArray { }

----------------------------------------

TITLE: Building Swift Standard Library for Android
DESCRIPTION: This bash command builds the Swift standard library for Android using the build script. It specifies the Android NDK path, Swift compiler path, and various build options.

LANGUAGE: bash
CODE:
$ NDK_PATH=path/to/android-ndk-r27c
$ SWIFT_PATH=path/to/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubuntu22.04/usr/bin
$ git checkout swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a
$ utils/build-script \
    -R \
    --android \
    --android-ndk $NDK_PATH \
    --android-arch aarch64 \
    --android-api-level 21 \
    --stdlib-deployment-targets=android-aarch64 \
    --native-swift-tools-path=$SWIFT_PATH \
    --native-clang-tools-path=$SWIFT_PATH \
    --build-swift-tools=0 \
    --build-llvm=0 \
    --skip-build-cmark

----------------------------------------

TITLE: Plaid Language State Definition Example
DESCRIPTION: Example code showing how the Plaid language defines typestates using a file system implementation pattern. Demonstrates state transitions between File, OpenFile, and ClosedFile states with associated methods.

LANGUAGE: plaid
CODE:
state File {
  val filename;
}

state OpenFile case of File = {
  val filePtr;
  method read() { ... }
  method close() { this <- ClosedFile; }
}

state ClosedFile case of File {
  method open() { this <- OpenFile; }
}

----------------------------------------

TITLE: Implementing dynamicallyCall(withArguments:) in Swift
DESCRIPTION: The base implementation requirements for dynamicallyCall(withArguments:) method. Must be an instance method with an argument type conforming to ExpressibleByArrayLiteral protocol. Return type can be any valid type.

LANGUAGE: swift
CODE:
func dynamicallyCall(withArguments args: Array<Any>) -> ReturnType

----------------------------------------

TITLE: Suppressing Unsafe Warnings with '@unsafe' Attribute in Swift
DESCRIPTION: Demonstrates the use of the '@unsafe' attribute to acknowledge that a type or conformance is unsafe, suppressing warnings.

LANGUAGE: swift
CODE:
struct MyType: @unsafe CustomStringConvertible {
  @unsafe var description: String {
    "I am unsafe!"
  }
}

----------------------------------------

TITLE: Demonstrating Debug Value Invalidation in Swift SIL
DESCRIPTION: Shows how an undefined debug value can be used to invalidate a previous debug value when a variable's value is no longer known.

LANGUAGE: swift
CODE:
debug_value %0 : $Int, var, name "x" // var x = a
...
debug_value undef : $Int, var, name "x" // x = <optimized out>

----------------------------------------

TITLE: Defining Canonical SIL Stage Override Attribute in Swift
DESCRIPTION: Specifies the syntax for the canonical SIL stage override attribute. This attribute indicates that the function is in canonical SIL form even if the module is still in raw SIL.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[canonical]'

----------------------------------------

TITLE: Building Swift with Limited Parallel Link Jobs
DESCRIPTION: This command builds Swift with a limited number of parallel link jobs, which can help reduce peak memory usage during the build process.

LANGUAGE: bash
CODE:
build-script --llvm-cmake-options=-DLLVM_PARALLEL_LINK_JOBS=1 --swift-cmake-options=-DSWIFT_PARALLEL_LINK_JOBS=1

----------------------------------------

TITLE: Defining Runtime Source Files
DESCRIPTION: Lists all Swift source files that make up the Runtime module implementation.

LANGUAGE: cmake
CODE:
set(RUNTIME_SOURCES
  Address.swift
  Backtrace.swift
  Backtrace+Codable.swift
  BacktraceFormatter.swift
  Base64.swift
  ByteSwapping.swift
  CachingMemoryReader.swift
  CompactBacktrace.swift
  CompactImageMap.swift
  Compression.swift
  Context.swift
  CoreSymbolication.swift
  Dwarf.swift
  EightByteBuffer.swift
  Elf.swift
  ElfImageCache.swift
  FramePointerUnwinder.swift
  Image.swift
  ImageMap.swift
  ImageMap+Darwin.swift
  ImageMap+Linux.swift
  ImageSource.swift
  Libc.swift
  LimitSequence.swift
  MemoryReader.swift
  OSReleaseScanner.swift
  ProcMapsScanner.swift
  Registers.swift
  Runtime.swift
  RichFrame.swift
  SymbolicatedBacktrace.swift
  Utils.swift
  Win32Extras.cpp

  get-cpu-context.${SWIFT_ASM_EXT}
)

----------------------------------------

TITLE: Linking Swift Core Library Dependencies in CMake
DESCRIPTION: Specifies the libraries and linking options for the swiftCore target. Includes platform-specific configurations and installation rules.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftCore
  PRIVATE
    swiftRuntime
    swiftLLVMSupport
    swiftDemangling
    swiftStdlibStubs
    swiftThreading
    $<$<NOT:$<PLATFORM_ID:Darwin>>:swiftrt$<$<PLATFORM_ID:Windows>:T>>
  PUBLIC
    swiftShims)

string(TOLOWER "${SwiftCore_OBJECT_FORMAT}" SwiftCore_OBJECT_FORMAT_lc)
if("${SwiftCore_OBJECT_FORMAT_lc}" STREQUAL "elf")
  target_link_libraries(swiftCore INTERFACE
    swiftrt)
elseif("${SwiftCore_OBJECT_FORMAT_lc}" STREQUAL "coff")
  if(BUILD_SHARED_LIBS)
    target_link_libraries(swiftCore INTERFACE
      swiftrt)
  else()
    target_link_libraries(swiftCore INTERFACE
      swiftrtT)
  endif()
endif()

target_link_options(swiftCore PUBLIC
  $<$<LINK_LANGUAGE:Swift>:-nostartfiles>)

if(NOT POLICY CMP0157)
  target_compile_options(swiftCore PRIVATE
    $<TARGET_OBJECTS:swiftRuntime>
    $<TARGET_OBJECTS:swiftLLVMSupport>
    $<TARGET_OBJECTS:swiftDemangling>
    $<TARGET_OBJECTS:swiftStdlibStubs>
    $<TARGET_OBJECTS:swiftThreading>)
endif()

if(NOT ANDROID AND NOT APPLE AND NOT LINUX AND NOT WIN32 AND UNIX)
  find_library(EXECINFO_LIBRARY execinfo)
  target_link_libraries(swiftCore PRIVATE "${EXECINFO_LIBRARY}")
endif()

if(APPLE AND BUILD_SHARED_LIBS)
  target_link_options(swiftCore PRIVATE "SHELL:-Xlinker -headerpad_max_install_names")
endif()

install(TARGETS swiftCore
  EXPORT SwiftCoreTargets
  COMPONENT SwiftCore_runtime
  ARCHIVE DESTINATION "${SwiftCore_INSTALL_LIBDIR}"
  LIBRARY DESTINATION "${SwiftCore_INSTALL_LIBDIR}"
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
emit_swift_interface(swiftCore)
install_swift_interface(swiftCore)

generate_plist("${CMAKE_PROJECT_NAME}" "${CMAKE_PROJECT_VERSION}" swiftCore)
embed_manifest(swiftCore)

include("${SwiftCore_VENDOR_MODULE_DIR}/swiftCore.cmake" OPTIONAL)

----------------------------------------

TITLE: Allocating Boxed Storage with alloc_box
DESCRIPTION: Allocates a reference-counted box on the heap large enough to hold a value of type T, along with retain count and metadata.

LANGUAGE: swift
CODE:
%1 = alloc_box $T
//   %1 has type $@box T

----------------------------------------

TITLE: Calling a Swift Function with Split Selector
DESCRIPTION: Example of how to call a Swift function using the proposed selector splitting syntax. The function 'moveRow' is called with two labeled arguments.

LANGUAGE: Swift
CODE:
tableView.moveRow(atIndex: i, toIndex: j)

----------------------------------------

TITLE: Using Inout Parameters for Non-Const Pointer Arguments in Swift
DESCRIPTION: Demonstrates the use of inout parameters for non-const pointer arguments, requiring initialization of variables.

LANGUAGE: Swift
CODE:
var s1 = 0.0, c1 = 0.0
sincos(0.5, &s1, &c1)

----------------------------------------

TITLE: Defining Build Configuration for Linux in Swift
DESCRIPTION: This snippet demonstrates how to define the build configuration for a Linux host using Swift. It specifies the build and host parameters for the compiler, runtime, and standard library components.

LANGUAGE: Swift
CODE:
[
  /* compiler */ (build: "x86_64-unknown-linux-gnu", host: "x86_64-unknown-linux-gnu"),
  /* runtime */  (build: "x86_64-unknown-linux-gnu", host: "x86_64-unknown-linux-gnu"),
  /* stdlib */   (build: "x86_64-unknown-linux-gnu", host: "x86_64-unknown-linux-gnu"),
]

----------------------------------------

TITLE: Output File Map Configuration in JSON
DESCRIPTION: Example JSON configuration showing the structure of a Swift output file map. This map specifies output locations for object files, dependencies, diagnostics and other build artifacts for each source file.

LANGUAGE: json
CODE:
{
  "/path/to/src/foo.swift": {
    "object": "/path/to/build/foo.o",
    "dependencies": "/path/to/build/foo.d",
    "swift-dependencies": "/path/to/build/foo.swiftdeps",
    "diagnostics": "/path/to/build/foo.dia"
  },
  "/path/to/src/bar.swift": {
    "object": "/path/to/build/bar.o",
    "dependencies": "/path/to/build/bar.d",
    "swift-dependencies": "/path/to/build/bar.swiftdeps",
    "diagnostics": "/path/to/build/bar.dia"
  },
  "": {
    "swift-dependencies": "/path/to/build/main-build-record.swiftdeps"
  }
}

----------------------------------------

TITLE: Swift RawRepresentable Enum Example
DESCRIPTION: Demonstrates how to create enums with raw values and conform to the RawRepresentable protocol, showing both implicit and explicit raw value assignments.

LANGUAGE: swift
CODE:
enum Color : Int {
  case Black   // = 0
  case Cyan    // = 1
  case Magenta // = 2
  case White   // = 3
}

enum Signal : Int32 {
  case SIGKILL = 9, SIGSEGV = 11
}

enum NSChangeDictionaryKey : String {
  case NSKeyValueChangeKindKey = "NSKeyValueChangeKindKey"
  case NSKeyValueChangeNewKey = "NSKeyValueChangeNewKey"
  case NSKeyValueChangeOldKey = "NSKeyValueChangeOldKey"
}

----------------------------------------

TITLE: Swift Protocol with Required Methods and Properties
DESCRIPTION: Defines a base protocol with required method and property declarations including documentation comments.

LANGUAGE: swift
CODE:
protocol FooProtocolBase {
  func fooProtoFunc()
  static func fooProtoClassFunc()
  var fooProperty1: Int32 { get set }
  var fooProperty2: Int32 { get set }
  var fooProperty3: Int32 { get }
}

----------------------------------------

TITLE: Array-to-Pointer Conversion in Swift
DESCRIPTION: Demonstrates converting an array to a temporary pointer that provides access to the array's elements. The pointer is only valid during the function call.

LANGUAGE: swift
CODE:
func foo(bar: UnsafePointer<Bool>) { /*...*/ }
var x: [Bool] = [true, false, true]
foo(bar: x)

----------------------------------------

TITLE: Printing Memory Contents in LLDB
DESCRIPTION: LLDB command to print memory contents as addresses, which provides automatic symbol lookups and pointer chasing.

LANGUAGE: lldb
CODE:
(lldb) x/5a `(Class)objc_getClass("NSString")`

----------------------------------------

TITLE: JVP Function Example
DESCRIPTION: Example of a JVP (Jacobian-vector product) function showing the forward-mode derivative transformation.

LANGUAGE: swift
CODE:
sil @jvp_f : $(Float) -> (Float, (Float) -> Float) {
bb0(%x):
  (%y1, %df_sin) = apply @jvp_sin(%x)
  (%y2, %df_cos) = apply @jvp_cos(%x)
  (%y3, %df_mul) = apply @jvp_mul(%y1, %y2)
  return (%y3, { %dx in
    %dy1 = apply %df_sin(%dx)
    %dy2 = apply %df_cos(%dx)
    %dy3 = apply %df_mul(%dy1, %dy2)
    return %dy3
  })
}

----------------------------------------

TITLE: Configuring LSP and Related Packages in Emacs
DESCRIPTION: This snippet configures company, lsp-mode, lsp-ui, helm-lsp, and lsp-treemacs packages for C++ development in Emacs. It sets up autocompletion, LSP hooks, and custom keybindings for improved functionality.

LANGUAGE: elisp
CODE:
(use-package company
  :ensure t
  :config
  ;; Enable completion-as-you-type behavior.
  ;; don't add any dely before trying to complete thing being typed
  ;; the call/response to gopls is asynchronous so this should have little
  ;; to no affect on edit latency
  (setq company-idle-delay 0.1)
  ;; start completing after a single character instead of 3
  (setq company-minimum-prefix-length 1)
  ;; align fields in completions
  (setq company-tooltip-align-annotations t)
  )
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (c-mode-common . lsp)
  :custom
  ;; Prevent lsp from inserting header decorators.
  (lsp-clients-clangd-args '("--header-insertion-decorators=0" "--header-insertion=never"))
  :init
  ;; Enable easy local renaming using LSP
  (bind-key "C-x l" 'lsp-rename)
  :config
  ;; The CAPF back-end provides a bridge to the standard
  ;; completion-at-point-functions facility, and thus works with any major mode
  ;; that defines a proper completion function.
  (setq lsp-completion-provider :capf)
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks))

(use-package lsp-ui :commands lsp-ui-mode)
(use-package helm-lsp :commands helm-lsp-workspace-symbol
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

----------------------------------------

TITLE: Demonstrating Nested Access in Swift SIL
DESCRIPTION: This snippet shows how nested access is represented in Swift SIL, including the outer and inner access scopes.

LANGUAGE: swift
CODE:
%var = alloc_stack $Int
%outerAccess  = begin_access [modify] %var : $*Int
%innerAccess  = begin_access [modify] %outerAccess : $*Int
%conflicting  = begin_access [modify] %outerAccess : $*Int
%f = function_ref @takesTwoInouts
apply %f(%innerAccess, %conflicting)
  : $@convention(thin) (@inout Int, @inout Int) -> ()
end_access %conflicting : $*Int
end_access %innerAccess : $*Int
end_access %outerAccess : $*Int

----------------------------------------

TITLE: Configuring Standard Swift Volatile Library Build
DESCRIPTION: Sets up the build target for the standard Swift Volatile library. It specifies the source file, compile flags, link flags, and installation component.

LANGUAGE: CMake
CODE:
add_swift_target_library(swift_Volatile ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  Volatile.swift

  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -parse-stdlib
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  INSTALL_IN_COMPONENT stdlib
)

----------------------------------------

TITLE: Storing to Memory with store
DESCRIPTION: Stores the value %0 to memory at address %1. T must be a loadable type.

LANGUAGE: swift
CODE:
store %0 to [init] %1 : $*T
// $T must be a loadable type

----------------------------------------

TITLE: Requesting Access to Dominance Analysis in Swift Optimizer
DESCRIPTION: This code snippet shows how to request access to the Dominance analysis in a Swift optimization pass. It demonstrates how passes can obtain analysis results from the pass manager.

LANGUAGE: swift
CODE:
    DominanceAnalysis* DA = getAnalysis<DominanceAnalysis>();

----------------------------------------

TITLE: Nested Generic Types in Swift
DESCRIPTION: Demonstration of nested generic type declarations which is currently restricted

LANGUAGE: Swift
CODE:
struct X<T> {
  struct Y<U> { }
}

----------------------------------------

TITLE: Implementing Inout Address Conversion for CMutablePointer in Swift
DESCRIPTION: Defines the CMutablePointer struct and its conformance to _BuiltinInOutAddressConvertible for inout address conversion.

LANGUAGE: Swift
CODE:
struct CMutablePointer<T>: _BuiltinInOutAddressConvertible {
  let ptr: Builtin.RawPointer

  typealias InOutType = T

  @_transparent
  static func _convertFromInOutAddress(_ p: Builtin.RawPointer)
  -> CMutablePointer {
    return CMutablePointer(p)
  }
}

----------------------------------------

TITLE: Documenting Individual Parameters in Swift Using Separate Fields
DESCRIPTION: This snippet shows how to document function parameters individually using separate 'Parameter' fields in Swift documentation comments. This method allows for more flexibility in parameter documentation placement.

LANGUAGE: markdown
CODE:
- Parameter x: ...
- Parameter y: ...

----------------------------------------

TITLE: Running Swift Program on Android Device
DESCRIPTION: This bash command uses adb to execute the compiled Swift program on an Android device, setting the necessary library path.

LANGUAGE: bash
CODE:
$ adb shell LD_LIBRARY_PATH=/data/local/tmp /data/local/tmp/hello

----------------------------------------

TITLE: Defining libFuzzer Entry Point in Swift
DESCRIPTION: This snippet shows how to define the entry point fuzzing function for libFuzzer in Swift. The function is annotated with @_cdecl("LLVMFuzzerTestOneInput") and takes a pointer to the input data and its length.

LANGUAGE: swift
CODE:
@_cdecl("LLVMFuzzerTestOneInput")
public func test(_ start: UnsafeRawPointer, _ count: Int) -> CInt {
  let bytes = UnsafeRawBufferPointer(start: start, count: count)
  // TODO: Test the code using the provided bytes.
  return 0
}

----------------------------------------

TITLE: Basic Actor-Isolated Protocol Conformance Example
DESCRIPTION: Demonstrates a basic example of a protocol conformance that causes an actor isolation error due to a @MainActor-isolated struct implementing a protocol method.

LANGUAGE: swift
CODE:
protocol P {
  func f()
}

@MainActor
struct MyData: P {
  func f() { }
}

----------------------------------------

TITLE: Running Tests Using Lit.py Directly
DESCRIPTION: Example of running Swift tests using LLVM's lit.py testing tool

LANGUAGE: shell
CODE:
% ${LLVM_SOURCE_ROOT}/utils/lit/lit.py -sv ${SWIFT_BUILD_DIR}/test-macosx-x86_64/Parse/

----------------------------------------

TITLE: Extension Initialization in Different Resilience Domain
DESCRIPTION: Example of initializer implementation in an extension that resides in a different resilience domain than the type definition, showing potential initialization challenges.

LANGUAGE: swift
CODE:
extension A {
  init(i: Int, j: Int) {
    x = i + j    // initialize x
  }
}

----------------------------------------

TITLE: Compiling Swift with libFuzzer
DESCRIPTION: This bash command demonstrates how to compile a Swift file with libFuzzer integration. It uses the -sanitize=fuzzer flag to link libFuzzer and enable code coverage, and -parse-as-library to omit the main symbol.

LANGUAGE: bash
CODE:
% swiftc -sanitize=fuzzer -parse-as-library myfile.swift

----------------------------------------

TITLE: Generic Function with val Constraint
DESCRIPTION: Example of using val as a generic constraint to ensure value semantics in a generic function.

LANGUAGE: swift
CODE:
func fill<T:val>(_ array:[T], x:T) {
  for i in 0...array.length {
    array[i] = x
  }
}

----------------------------------------

TITLE: Setting Up Stack Frame in x86-64 Assembly
DESCRIPTION: Demonstrates the typical non-leaf function setup for the stack frame on x86-64. It pushes the base pointer, sets up a new frame pointer, and allocates space for local variables.

LANGUAGE: x86_64
CODE:
push %rbp
mov  %rsp, %rbp
sub  <local-size>, %rsp

----------------------------------------

TITLE: Finished Message Format for Swift Compiler Tasks
DESCRIPTION: Example of a 'finished' message indicating task completion. Contains process ID, exit status, and optional process usage statistics.

LANGUAGE: json
CODE:
{
 "kind": "finished",
 "name": "compile",
 "pid": 12345,
 "exit-status": 0,
 "process": {
   "real_pid": 12345,
   "usage": {
     "utime": 22740,
     "stime": 91107,
     "maxrss": 7745536
   }
  }
}

----------------------------------------

TITLE: Conditional Swift Syntax Library Linking
DESCRIPTION: Conditionally links the Swift IDE Utils Bridging library when SWIFT_BUILD_SWIFT_SYNTAX is enabled.

LANGUAGE: cmake
CODE:
if (SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftIDE PRIVATE
    swiftIDEUtilsBridging
  )
endif()

----------------------------------------

TITLE: Destroying Memory with destroy_addr
DESCRIPTION: Destroys the value in memory at address %0.

LANGUAGE: swift
CODE:
destroy_addr %0 : $*T
// %0 must be of an address $*T type

----------------------------------------

TITLE: Defining Global Variables and Functions in Swift
DESCRIPTION: This snippet defines two global variables with getter-only properties and a global function. The variables are of type Int32, and the function takes an Int32 argument.

LANGUAGE: Swift
CODE:
var MY_MACRO: Int32 { get }
var MACRO_DUP: Int32 { get }
func doSomethingInHead(_ arg: Int32)

----------------------------------------

TITLE: Building Swift SDK for WebAssembly
DESCRIPTION: Command to build the Swift SDK for WebAssembly. This builds the Swift compiler for the host platform and then builds the Swift standard library for WebAssembly targets. The resulting SDK .artifactbundle is placed in the ../swift-sdk-generator/Bundles directory.

LANGUAGE: bash
CODE:
./utils/build-script --build-wasm-stdlib

----------------------------------------

TITLE: Deploying Swift Build Products to Android Device
DESCRIPTION: These bash commands use adb to push the compiled Swift standard library and other necessary files to an Android device for execution.

LANGUAGE: bash
CODE:
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftCore.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftAndroid.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftSwiftOnoneSupport.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftRemoteMirror.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_Concurrency.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_RegexParser.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_StringProcessing.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libdispatch.so /data/local/tmp
$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libBlocksRuntime.so /data/local/tmp
$ adb push /path/to/android-ndk-r27c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so /data/local/tmp
$ adb push hello /data/local/tmp

----------------------------------------

TITLE: Defining Binary Operator and Symmetric Function in Swift
DESCRIPTION: Demonstrates the use of 'lhs' and 'rhs' as acceptable parameter names for binary operators and symmetric binary functions.

LANGUAGE: swift
CODE:
func + (lhs: Int, rhs: Int) -> Int

func swap<T>(lhs: inout T, rhs: inout T)

----------------------------------------

TITLE: Unsafe Storage in Swift Struct
DESCRIPTION: Shows a struct definition with storage involving unsafe types, which triggers a memory safety warning.

LANGUAGE: swift
CODE:
// struct MyTemporaryBuffer has storage involving unsafe types
struct MyTemporaryBuffer<T> {
  private var storage: UnsafeBufferPointer<T>
}

----------------------------------------

TITLE: Compiling Swift Code for Android
DESCRIPTION: This bash command compiles a Swift source file targeting Android using the standalone Swift stdlib. It specifies the Android NDK path, Swift compiler path, and various compilation options.

LANGUAGE: bash
CODE:
$ NDK_PATH="path/to/android-ndk-r27c"
$ SWIFT_PATH=path/to/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubuntu22.04/usr/bin
$ $SWIFT_PATH/swiftc \
    -tools-directory ${NDK_PATH}/toolchains/llvm/prebuilt/linux-x86_64/bin/ \
    -target aarch64-unknown-linux-android21 \
    -sdk ${NDK_PATH}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
    -resource-dir build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift
    hello.swift

----------------------------------------

TITLE: Implementing Result Type with Initializers and Accessors in Swift
DESCRIPTION: Shows a proposed implementation of the Result type with initializers and accessor properties for its Success and Error cases.

LANGUAGE: swift
CODE:
extension Result {
  init(success: Wrapped) {
    self = .Success(success)
  }
  init(error: Error) {
    self = .Error(error)
  }

  var success: Wrapped? {
    switch self {
    case .Success(let success): return success
    case .Error: return nil
    }
  }
  var error: Error? {
    switch self {
    case .Success: return nil
    case .Error(let error): return error
    }
  }
}

----------------------------------------

TITLE: Listing Ninja Targets for Swift Standard Library
DESCRIPTION: This command lists all Ninja targets related to the Swift standard library for i386 architecture, useful for identifying specific build targets.

LANGUAGE: bash
CODE:
ninja -t targets | grep stdlib | grep i386

----------------------------------------

TITLE: Configuring Swift Distributed Library Target
DESCRIPTION: Defines the main library target with source files, platform-specific dependencies, compiler flags, and build settings.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftDistributed ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB IMPORTS_NON_OSSA 
  DistributedActor.cpp
  DistributedActor.swift
  DistributedActorSystem.swift
  DistributedAssertions.swift
  DistributedDefaultExecutor.swift
  DistributedMacros.swift
  DistributedMetadata.swift
  LocalTestingDistributedActorSystem.swift

  SWIFT_MODULE_DEPENDS_IOS ${swift_distributed_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_OSX ${swift_distributed_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swift_distributed_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_distributed_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK

  LINK_LIBRARIES ${swift_distributed_link_libraries}

  C_COMPILE_FLAGS
    -DswiftDistributed_EXPORTS
    -I${SWIFT_SOURCE_DIR}/stdlib/include

  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -parse-stdlib
    -strict-memory-safety

  LINK_FLAGS
    "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  SWIFT_MODULE_DEPENDS _Concurrency
  INSTALL_IN_COMPONENT stdlib
)

----------------------------------------

TITLE: IWYU Stub Script for Debugging
DESCRIPTION: Python script to intercept compilation commands and selectively use IWYU or Clang/Clang++ for debugging purposes.

LANGUAGE: python
CODE:
#!/usr/bin/env python3

# iwyu_stub.py

import os
import re
import subprocess
import sys

clang_path = "/usr/bin/clang"
clangxx_path = "/usr/bin/clang++"
project_dir = "/Users/username/swift-project/"
iwyu_bin_path = project_dir + "iwyu/build/bin/include-what-you-use"
log_dir = project_dir + "iwyu/logs/"

log_file = open(log_dir + "passthrough.log", "a+")

argv = sys.argv

def call_with_args(executable_path, args=argv):
    new_argv = args[:]
    new_argv[0] = executable_path
    log_file.write("# about to run:\n{}\n#---\n".format(' '.join(new_argv)))
    sys.exit(subprocess.call(new_argv))

# HACK: Relies on the compilation commands generated by CMake being
# of the form:
#
#   /path/to/compiler <other options> -c MyFile.ext
#
def try_using_iwyu(argv):
    return (argv[-2] == "-c") and ("/swift/" in argv[-1])

# Flag for quickly switching between IWYU and Clang for iteration.
# Useful for checking behavior for different include path combinations.
if argv[1] == "--forward-to-clangxx":
    call_with_args(clangxx_path, args=([argv[0]] + argv[2:]))

# Check that we are getting a compilation command.
if try_using_iwyu(argv):
  _, ext = os.path.splitext(argv[-1])
  if ext == ".m":
      call_with_args(clang_path)
  elif ext == ".mm":
      call_with_args(clangxx_path)
  elif ext in [".cxx", ".cc", ".cpp", ".c"]:
      call_with_args(iwyu_bin_path)
  log_file.write(
      "# Got a strange file extension.\n{}\n#---\n".format(' '.join(argv)))
  call_with_args(iwyu_bin_path)
else:
  # got something else, just forward to clang/clang++
  log_file.write(
      "# Not going to try using iwyu.\n{}\n#---\n".format(' '.join(argv)))
  _, ext = os.path.splitext(argv[-1])
  if ext == ".m" or ext == ".c":
      call_with_args(clang_path)
  else:
      call_with_args(clangxx_path)

----------------------------------------

TITLE: Example Type Name Stripping - C/Objective-C
DESCRIPTION: Examples of type name suffix stripping rules for C and Objective-C types

LANGUAGE: objective-c
CODE:
CFArrayRef -> CFArray
intptr_t -> intptr
Point2D -> Point

----------------------------------------

TITLE: Building Swift on OpenBSD with Specific Configurations
DESCRIPTION: Shell command to build Swift on OpenBSD using build-script with necessary flags and CMake options.

LANGUAGE: shell
CODE:
$ ./utils/build-script \
    --release \
    --skip-build-clang-tools-extra \
    --skip-build-compiler-rt \
    --extra-cmake-options="\
        -DCMAKE_DISABLE_FIND_PACKAGE_Backtrace=TRUE,\
        -DCMAKE_DISABLE_FIND_PACKAGE_LibXml2=TRUE,\
        -DLLVM_VERSION_SUFFIX='',\
        -DSWIFT_ENABLE_DISPATCH=OFF,\
        -DSWIFT_BUILD_SOURCEKIT=OFF,\
        -DSWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=OFF,\
        -DSWIFT_IMPLICIT_CONCURRENCY_IMPORT=OFF,\
        -DSWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=OFF,\
        -DSWIFT_USE_LINKER=lld,\
        -DCMAKE_INSTALL_DIR=/usr/local"

----------------------------------------

TITLE: Defining Performance Constraint Attributes in Swift
DESCRIPTION: Specifies the syntax for performance constraint attributes. These attributes define which type of runtime functions are allowed to be called from the function.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[' performance-constraint ']'
performance-constraint :: 'no_locks'
performance-constraint :: 'no_allocation'
sil-function-attribute ::= '[perf_constraint]'

----------------------------------------

TITLE: Swift Reference Registration Interface
DESCRIPTION: C interface for registering weak references with the Swift runtime.

LANGUAGE: C
CODE:
struct Reference {
  void *Referent; // must be non-null upon registration
  struct ReferenceQueue *Queue; // must be valid or null
  size_t Reserved[2];
};

void swift_registerReference(struct Reference *reference,
                             size_t flags);

----------------------------------------

TITLE: Example of Implicit Properties for Enum Cases in Swift
DESCRIPTION: Shows how enum cases with associated values could receive implicit properties based on their argument labels.

LANGUAGE: swift
CODE:
public enum Example {
  case init(foo: Int, alwaysPresent: String)
  case init(bar: Int, alwaysPresent: String)
}

/*implicit*/
internal extension Example {
  var foo: Int? { get }
  var bar: Int? { get }
  var alwaysPresent: String { get } // Not optional
}

----------------------------------------

TITLE: Printing SIL after Mandatory Passes in Swift
DESCRIPTION: Command to print the SIL (Swift Intermediate Language) after the mandatory optimization passes.

LANGUAGE: sh
CODE:
swiftc -emit-sil -Onone file.swift

----------------------------------------

TITLE: Partial apply of closure in SIL
DESCRIPTION: This snippet demonstrates the partial application of the 'foo' closure in SIL, showing one applied argument at index #0.

LANGUAGE: swift
CODE:
%closure = partial_apply @foo(#0: t)

----------------------------------------

TITLE: Defining Set Union Methods in Swift
DESCRIPTION: Illustrates the use of 'InPlace' suffix to denote the mutating member of a pair of related methods.

LANGUAGE: swift
CODE:
extension Set {
  func union(_ other: Set) -> Set
  mutating func unionInPlace(_ other: Set)
}

----------------------------------------

TITLE: Defining Higher-Order Functions in Swift
DESCRIPTION: Shows the use of 'body' as an acceptable name for a trailing closure argument in language extension-like constructs.

LANGUAGE: swift
CODE:
func map<U>(_ transformation: T->U) -> [U] // not this one

func forEach<S: SequenceType>(_ body: (S.Iterator.Element) -> ())

----------------------------------------

TITLE: Unsafe Function Usage in Swift
DESCRIPTION: Demonstrates the use of an unsafe global function 'unsafeBitCast' which triggers a strict memory safety warning.

LANGUAGE: swift
CODE:
func getPointee<T>(_ pointer: UnsafeMutablePointer<Int>, as type: T.Type) -> T {
  // reference to unsafe global function 'unsafeBitCast'
  return unsafeBitCast(pointer.pointee, to: type)
}

----------------------------------------

TITLE: Using Swift Structure in C++
DESCRIPTION: Demonstrates how to construct and use a Swift structure in C++.

LANGUAGE: C++
CODE:
int main() {
   auto weather = Weather::WeatherInformation::init(/*temperature=*/ 25);
}

----------------------------------------

TITLE: Declaring and Calling Function with UnsafeRawPointer Argument in Swift
DESCRIPTION: Demonstrates the flexibility of UnsafeRawPointer in accepting various types of pointers, inout expressions, and arrays as arguments.

LANGUAGE: Swift
CODE:
func zang(_ x: UnsafeRawPointer)

var x: Float = 0.0, y: Int = 0
var p: UnsafePointer<Float> = nil, q: UnsafePointer<Int> = nil
zang(nil)
zang(p)
zang(q)
zang(&x)
zang(&y)
let doubles = [1.0, 2.0, 3.0]
let ints = [1, 2, 3]
zang(doubles)
zang(ints)

zang([1.0, 2.0, 3.0] as [Double])
zang([1, 2, 3] as [Int])

----------------------------------------

TITLE: IWYU Run Script for Swift Project
DESCRIPTION: Bash script to prepare and run IWYU on the Swift project, filtering compilation commands and generating suggestions.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash

# iwyu_run.sh
set -eu

SWIFT_PROJECT_DIR="$HOME/swift-project"
SWIFT_BUILD_DIR="$SWIFT_PROJECT_DIR/build/Ninja-ReleaseAssert/swift-macosx-x86_64"

pushd "$SWIFT_BUILD_DIR"

if [ -f original_compile_commands.json ]; then
    mv original_compile_commands.json compile_commands.json
fi

# HACK: The additional include path needs to be added before other include
# paths, it doesn't seem to work if we add it at the end.
# It is ok to rely on the presence of `-D__STDC_LIMIT_MACROS` flag, since
# it is added by the LLVM CMake configuration for all compilation commands.
( EXTRA_CXX_INCLUDE_DIR="$(clang++ -print-resource-dir)/../../../include/c++/v1";
  cat compile_commands.json \
 | jq '[.[] | select(.file | test("\.mm" | "\.m") | not) | {directory: .directory, command: (.command + " -Wno-everything -ferror-limit=1"), file: .file}]' \
 | sed -e "s|-D__STDC_LIMIT_MACROS |-D__STDC_LIMIT_MACROS -I $EXTRA_CXX_INCLUDE_DIR |" \
) > filtered_compile_commands.json

mv compile_commands.json original_compile_commands.json
mv filtered_compile_commands.json compile_commands.json

mkdir -p "$SWIFT_PROJECT_DIR/iwyu/logs"

( PATH="$SWIFT_PROJECT_DIR/iwyu/build/bin:$PATH"; \
  "$SWIFT_PROJECT_DIR/iwyu/include-what-you-use/iwyu_tool.py" -p "$SWIFT_BUILD_DIR"
) | tee "$SWIFT_PROJECT_DIR/iwyu/logs/suggestions.log"

popd

----------------------------------------

TITLE: Setting Core Library Dependencies
DESCRIPTION: Defines the core library dependencies required for the distributed library.

LANGUAGE: cmake
CODE:
set(swift_distributed_link_libraries
  swiftCore)

----------------------------------------

TITLE: Listing Swift Snapshots
DESCRIPTION: Command to list available Swift snapshots chronologically. Each snapshot is displayed with an index number indicating its position in history relative to the current date.

LANGUAGE: bash
CODE:
# xcrun swift run swift_snapshot_tool list
[INFO] Starting to download snapshot information from github. 
[INFO] Finished downloading snapshot information from github. 
0 swift-DEVELOPMENT-SNAPSHOT-2024-09-06-a
1 swift-DEVELOPMENT-SNAPSHOT-2024-09-05-a
2 swift-DEVELOPMENT-SNAPSHOT-2024-09-04-a
3 swift-DEVELOPMENT-SNAPSHOT-2024-08-29-a
...

----------------------------------------

TITLE: Using Const Pointer Argument for CGColorCreate in Swift
DESCRIPTION: Demonstrates how to pass a Swift Array to a const pointer argument for the CGColorCreate function.

LANGUAGE: Swift
CODE:
let rgb = CGColorSpaceCreateCalibratedRGB()
let cyan = CGColorCreate(rgb, [0, 1, 1])

----------------------------------------

TITLE: C Bridging Header for Pico SDK
DESCRIPTION: Header file that enables Swift code to access C functions and variables from the Pico SDK by including necessary stdlib header.

LANGUAGE: c
CODE:
#pragma once

#include "pico/stdlib.h"

----------------------------------------

TITLE: SILFunctionType representation of closure
DESCRIPTION: This snippet shows the SILFunctionType representation of the 'foo' closure from the previous example, with two direct formal parameters and one direct formal result of tuple type.

LANGUAGE: swift
CODE:
SILFunctionType(foo): (#0: Int, #1: T) -> @out (Int, T)

----------------------------------------

TITLE: Initializing Optional with Associated Values in Swift
DESCRIPTION: Demonstrates how Optional currently provides initializers corresponding to its Some and None cases to improve usability.

LANGUAGE: swift
CODE:
extension Optional {
  init(_ value: Wrapped) {
    self = .Some(value)
  }

  init() {
    self = .None
  }
}

----------------------------------------

TITLE: Building Swift with Hosttools Bootstrapping Mode
DESCRIPTION: This command builds Swift using the 'hosttools' bootstrapping mode, which can speed up local development by using a pre-installed Swift toolchain.

LANGUAGE: bash
CODE:
utils/build-script --bootstrapping=hosttools

----------------------------------------

TITLE: Async Function with Continuation in Swift
DESCRIPTION: Example of an async function using withUnsafeContinuation to implement a primitive suspend point.

LANGUAGE: swift
CODE:
func waitForCallback() async -> Int {
  return await withUnsafeContinuation { cc in
    registerCallback { cc.resume($0) }
  }
}

----------------------------------------

TITLE: Annotating Array Count Method with @_semantics in Swift
DESCRIPTION: This snippet shows how to annotate an Array method with the @_semantics attribute to inform the optimizer that it reads the size of the array.

LANGUAGE: Swift
CODE:
@public @_semantics("array.count")
func getCount() -> Int {
  return _buffer.count
}

----------------------------------------

TITLE: Incorrect Temporary Pointer Usage in Swift
DESCRIPTION: Example of incorrect temporary pointer usage where the pointer is stored and outlives its valid scope, leading to undefined behavior.

LANGUAGE: swift
CODE:
var x = 42
let ptr = UnsafePointer(&x)
// Do something with ptr.

----------------------------------------

TITLE: Implementing Comparison Result Enum in Swift
DESCRIPTION: Defines a comparison result enumeration with ordered ascending, same, and descending cases using raw Int values.

LANGUAGE: swift
CODE:
enum FooComparisonResult : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }

  case orderedAscending
  case orderedSame
  case orderedDescending
}

----------------------------------------

TITLE: Swift Package Manifest Configuration
DESCRIPTION: Package manifest configuration for integrating C++ code into a Swift package, including necessary compiler flags and dependencies.

LANGUAGE: swift
CODE:
import PackageDescription

let package = Package(
    name: "CxxInterop",
    platforms: [.macOS(.v12)],
    products: [
        .library(
            name: "CxxTest",
            targets: ["CxxTest"]),
        .library(
            name: "CxxInterop",
            targets: ["CxxInterop"]),
    ],
    targets: [
        .target(
            name: "CxxTest",
            dependencies: []
        ),
        .executableTarget(
            name: "CxxInterop",
            dependencies: ["CxxTest"],
            path: "./Sources/CxxInterop",
            sources: [ "main.swift" ],
            swiftSettings: [.unsafeFlags([
                "-I", "Sources/CxxTest",
                "-cxx-interoperability-mode=default",
            ])]
        ),
    ]
)

----------------------------------------

TITLE: Swift @_transparent Attribute Example
DESCRIPTION: The @_transparent attribute marks a function to be treated as a primitive operation, requiring mandatory inlining before dataflow diagnostics. This snippet shows the basic syntax of the attribute.

LANGUAGE: swift
CODE:
@_transparent

----------------------------------------

TITLE: Configuring Swift Darwin Platform Library
DESCRIPTION: Sets up build configuration for the Swift Darwin platform library, including source files, compiler flags, and dependencies. Handles both regular and bootstrapping builds.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftDarwin ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}
    ${swiftDarwin_common_options}
    TARGET_SDKS "${swiftDarwin_target_sdks}"
    INSTALL_IN_COMPONENT sdk-overlay
    MACCATALYST_BUILD_FLAVOR "zippered"
    INSTALL_BINARY_SWIFTMODULE FALSE)

----------------------------------------

TITLE: Basic Generic List Implementation in C++
DESCRIPTION: Example of a generic linked list implementation in C++ using templates, showing basic template syntax with a generic type parameter T.

LANGUAGE: cpp
CODE:
template<typename T>
class List {
public:
  struct Node {
    T value;
    Node *next;
  };

  Node *first;
};

----------------------------------------

TITLE: Illustrating Enum Layout Strategies in Swift
DESCRIPTION: Examples of different enum layout strategies in Swift, including empty enums, single-case enums, C-like enums, and single-payload enums. Shows how enum cases are represented in memory.

LANGUAGE: swift
CODE:
enum Empty {} // => empty type

enum EmptyCase { case X }             // => empty type
enum DataCase { case Y(Int, Double) } // => LLVM <{ i64, double }>

enum EnumLike2 { // => LLVM i1
  case A         // => i1 0
  case B         // => i1 1
}

enum EnumLike8 { // => LLVM i3
  case A         // => i3 0
  case B         // => i3 1
  case C         // => i3 2
  case D         // etc.
  case E
  case F
  case G
  case H
}

enum CharOrSectionMarker { // => LLVM i32
  case Paragraph            // => i32 0x0020_0000
  case Char(UnicodeScalar)  // => i32 (zext i21 %Char to i32)
  case Chapter              // => i32 0x0020_0001
}

enum IntOrInfinity { // => LLVM <{ i64, i1 }>
  case NegInfinity    // => <{ i64, i1 }> {    0, 1 }
  case Int(Int)       // => <{ i64, i1 }> { %Int, 0 }
  case PosInfinity    // => <{ i64, i1 }> {    1, 1 }
}

----------------------------------------

TITLE: Configuring SourceKitSupport Unit Tests in CMake
DESCRIPTION: Sets up unit test configuration for SourceKitSupport module by adding test files and linking required libraries. Includes the ImmutableTextBufferTest.cpp test file and links against the SourceKitSupport library.

LANGUAGE: cmake
CODE:
add_swift_unittest(SourceKitSupportTests
  ImmutableTextBufferTest.cpp
  )

target_link_libraries(SourceKitSupportTests
  PRIVATE
  SourceKitSupport
  )

----------------------------------------

TITLE: Canonical SIL representation of closure arguments
DESCRIPTION: This snippet demonstrates the Canonical SIL representation of the 'foo' closure's arguments, matching the SILFunctionType with two direct SILFunctionArguments.

LANGUAGE: swift
CODE:
SILFunctionArguments: (#0: Int, #1: T) -> (Int, T)

----------------------------------------

TITLE: CIF Expand Opcode Structure
DESCRIPTION: Binary structure of the expand opcode containing extension and code fields.

LANGUAGE: text
CODE:
   7   6   5   4   3   2   1   0
 ┌───┬───┬───────────────────────┐
 │ 1 │ e │ code                  │  expand
 └───┴───┴───────────────────────┘

----------------------------------------

TITLE: Implementing Inout Writeback Conversion for ObjCInOut in Swift
DESCRIPTION: Defines the ObjCInOut struct and its conformance to _BuiltinInOutWritebackConvertible for inout writeback conversion.

LANGUAGE: Swift
CODE:
struct ObjCInOut<T: class>: _BuiltinInOutWritebackConvertible {
  let ptr: Builtin.RawPointer

  typealias InOutType = T!
  typealias WritebackType = Builtin.RawPointer

  @_transparent
  static func _createWriteback(ref: inout T!)
  -> Builtin.RawPointer {
    return unsafeBitCast(ref, Builtin.RawPointer.self)
  }

  @_transparent
  static func _commitWriteback(ref: inout T!,
                               value: Builtin.RawPointer) {
    ref = unsafeBitCast(value, T!.self)
  }

  @_transparent
  static func _convertFromWritebackAddress(_ value: Builtin.RawPointer) {
    return ObjCInOut(value)
  }
}

----------------------------------------

TITLE: Building Swift with Sccache
DESCRIPTION: This command builds Swift using sccache, a tool that provides caching for C and C++ build artifacts, potentially speeding up subsequent builds.

LANGUAGE: bash
CODE:
./swift/utils/build-script MY_ARGS --sccache

----------------------------------------

TITLE: Setting Up Compatibility Symbols Installation
DESCRIPTION: Configures the generation and installation of compatibility symbols file when SWIFT_NATIVE_SWIFT_TOOLS_PATH is defined. Creates custom commands for file generation and sets up proper build dependencies.

LANGUAGE: cmake
CODE:
if(SWIFT_NATIVE_SWIFT_TOOLS_PATH)
  set(syms_file "${CMAKE_BINARY_DIR}/share/swift/compatibility-symbols")

  add_custom_command_target(copy_compat_target
    COMMAND
      "${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-compatibility-symbols"
      --output-filename ${syms_file}
    OUTPUT
      ${syms_file}
    DEPENDS
      swift-compatibility-symbols
  )

  add_dependencies(swift-frontend "${copy_compat_target}")

  swift_install_in_component(
    FILES
      ${syms_file}
    DESTINATION
      "share/swift"
    COMPONENT
      compiler
  )
endif()

----------------------------------------

TITLE: Re-exporting Modules in Swift
DESCRIPTION: Illustrates how to re-export entire modules or specific declarations from modules in Swift.

LANGUAGE: swift
CODE:
@exported import AmericanCheckers

@exported import class AmericanCheckers.Board

----------------------------------------

TITLE: Internal _ExpressibleByBuiltinStringLiteral Protocol Definition
DESCRIPTION: Low-level protocol used by the Swift compiler for handling string literal construction, using builtin types for raw data manipulation.

LANGUAGE: swift
CODE:
public protocol _ExpressibleByBuiltinStringLiteral
  : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral {

  init(
      _builtinStringLiteral start: Builtin.RawPointer,
      utf8CodeUnitCount: Builtin.Word,
      isASCII: Builtin.Int1)
}

----------------------------------------

TITLE: Unsafe Concurrent Access Example in Swift
DESCRIPTION: Shows an example of code that creates a potential data race by accessing non-Sendable class state from multiple concurrent tasks.

LANGUAGE: swift
CODE:
class MyModel {
  var count: Int = 0

  func perform() {
    Task {
      self.update()
    }
  }

  func update() { count += 1 }
}

----------------------------------------

TITLE: Function Declaration in Swift
DESCRIPTION: Declares a function that takes an Int32 parameter and returns an Int32 value

LANGUAGE: swift
CODE:
func fooSubFunc1(_ a: Int32) -> Int32

----------------------------------------

TITLE: Defining Ownership SSA Attribute in Swift
DESCRIPTION: Defines the syntax for the Ownership SSA (OSSA) attribute. This attribute indicates that the function is in OSSA form.

LANGUAGE: swift
CODE:
sil-function-attribute ::= '[ossa]'

----------------------------------------

TITLE: Cloning Swift Repositories in Windows Command Prompt
DESCRIPTION: This snippet shows how to clone the necessary Swift repositories using git in the Windows command prompt. It assumes the sources are located at the root of the S: drive.

LANGUAGE: cmd
CODE:
S:
git clone https://github.com/apple/swift-llvm llvm
git clone https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
git clone https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
git clone https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest
git clone https://github.com/compnerd/swift-build swift-build

----------------------------------------

TITLE: Configuring Embedded Swift Standard Library Targets
DESCRIPTION: Sets up build targets for embedded platforms including various ARM, AArch64, RISC-V, and WebAssembly architectures based on LLVM target configuration.

LANGUAGE: cmake
CODE:
if(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB_CROSS_COMPILING)
  if(SWIFT_WASI_SYSROOT_PATH)
    list(APPEND EMBEDDED_STDLIB_TARGET_TRIPLES
      "wasm32    wasm32-unknown-wasip1  wasm32-unknown-wasip1"
    )
  else()
    if("ARM" IN_LIST LLVM_TARGETS_TO_BUILD)
      list(APPEND EMBEDDED_STDLIB_TARGET_TRIPLES
        "armv6    armv6-apple-none-macho    armv6-apple-none-macho"
        "armv6m   armv6m-apple-none-macho   armv6m-apple-none-macho"
        "armv7    armv7-apple-none-macho    armv7-apple-none-macho"
        "armv7m   armv7m-apple-none-macho   armv7m-apple-none-macho"
        "armv7em  armv7em-apple-none-macho  armv7em-apple-none-macho"
      )
    endif()
  endif()
endif()

----------------------------------------

TITLE: Setting Swift Include and Library Directories
DESCRIPTION: Defines variables for Swift include directories and library output directory. These are used in the configuration process.

LANGUAGE: cmake
CODE:
set(SWIFT_INCLUDE_DIRS ${SWIFT_INCLUDE_DIR} ${SWIFT_MAIN_INCLUDE_DIR} ${SWIFT_SHIMS_INCLUDE_DIR})
set(SWIFT_LIBRARY_DIRS ${SWIFT_LIBRARY_OUTPUT_INTDIR})

----------------------------------------

TITLE: Defining Additional Structs with Computed Properties in Swift
DESCRIPTION: Example code defining additional structs with computed properties and subscripts to demonstrate more complex key path scenarios.

LANGUAGE: swift
CODE:
struct D {
  var computed: E { get set }
}

struct E {
  subscript(b: B) -> F { get }
}

----------------------------------------

TITLE: Configuring Installation of Swift Stdlib Stubs in CMake
DESCRIPTION: Sets up installation rules for the swiftStdlibStubs target when building static libraries, exporting it as part of SwiftCoreTargets.

LANGUAGE: CMake
CODE:
if(NOT BUILD_SHARED_LIBS)
  install(TARGETS swiftStdlibStubs
    EXPORT SwiftCoreTargets
    COMPONENT SwiftCore_runtime)
endif()

----------------------------------------

TITLE: Lowered SIL representation of closure arguments
DESCRIPTION: This snippet shows the Lowered SIL representation of the 'foo' closure's arguments, including an indirect result argument at index #0 and shifted function parameter indices.

LANGUAGE: swift
CODE:
SILFunctionArguments: (#0: *T, #1: Int, #2: T) -> Int

----------------------------------------

TITLE: Module Name Clash Resolution in Swift
DESCRIPTION: This snippet illustrates how Swift resolves clashes between module names and local definitions or imported declarations.

LANGUAGE: swift
CODE:
import Foo // exports bas

class Foo {
  class func bar()
}

Foo.bar() // bar method from Foo class
Foo.bas() // bas method from Foo module

----------------------------------------

TITLE: License Header Template for C/C++ Files
DESCRIPTION: Standard license and copyright header template required for C and C++ source files in the project. Includes file description, copyright notice, and optional documentation section.

LANGUAGE: c
CODE:
//===-- subfolder/Filename.h - Very brief description -----------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains stuff that I am describing here in the header and will
/// be sure to keep up to date.
///
//===----------------------------------------------------------------------===//


----------------------------------------

TITLE: Inlined SIL Representation of Async Function
DESCRIPTION: Inlined version of the waitForCallback SIL function, showing how the closure is inlined into the main function body.

LANGUAGE: sil
CODE:
sil @waitForCallback : $@convention(thin) @async () -> Int {
entry:
  %cc = get_async_continuation $Int
  %registerCallback = function_ref @registerCallback
    : $@convention(thin) (@convention(thick) () -> ()) -> ()
  %callback_fn = function_ref @waitForCallback_callback
  %callback = partial_apply %callback_fn(%cc)
  apply %registerCallback(%callback)
  await_async_continuation %cc, resume resume_cc

resume_cc(%result : $Int):
  return %result
}

----------------------------------------

TITLE: Importing C Struct with Padding in Swift
DESCRIPTION: Shows how a C struct with padding is imported into Swift, demonstrating the differences in size and stride between C and Swift types.

LANGUAGE: C
CODE:
// C header.

struct CStructWithPadding {
  int16_t x;
  int8_t y;
};

LANGUAGE: Swift
CODE:
// C header imported in Swift.

struct CStructWithPadding {
  var x: Int16
  var y: Int8
}

LANGUAGE: Swift
CODE:
print(MemoryLayout<CStructWithPadding>.size) // 4
print(MemoryLayout<CStructWithPadding>.stride) // 4

----------------------------------------

TITLE: SIL Function with Basic Blocks and Ownership
DESCRIPTION: Example of a SIL function definition with basic blocks, arguments, and ownership annotations in Ownership SSA form.

LANGUAGE: sil
CODE:
sil [ossa] @baz : $@convention(thin) (@owned String, @guaranteed String) -> () {
bb0(%0 : @owned $String, %1 : @guaranteed $String):
  ...
}

----------------------------------------

TITLE: Custom Enum Definition in Swift
DESCRIPTION: Defines a custom enum FooSubEnum1 that conforms to RawRepresentable and Equatable protocols with UInt32 raw value type

LANGUAGE: swift
CODE:
struct FooSubEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}

----------------------------------------

TITLE: Demonstrating Box Storage Access in Swift SIL
DESCRIPTION: This snippet illustrates the access path for box storage in Swift SIL, showing the root, base, access, and address of a memory operation.

LANGUAGE: swift
CODE:
  %root    = alloc_box $S
  %base    = project_box %root : ${ var S }
  %access  = begin_access [read] [static] %base : $*S
  %address = struct_element_addr %access : $*S, #.field
  %value   = load [trivial] %address : $*Int64
  end_access %access : $*S

----------------------------------------

TITLE: Configuring and Building IWYU
DESCRIPTION: CMake commands to configure and build IWYU for the Swift project.

LANGUAGE: bash
CODE:
cmake -G Ninja \
  -DCMAKE_PREFIX_PATH=build/Ninja-ReleaseAssert/llvm-macosx-x86_64 \
  -DCMAKE_CXX_STANDARD=14 \
  -B build/Ninja-ReleaseAssert/iwyu-macosx-x86_64 \
  iwyu/src

cmake --build build/Ninja-ReleaseAssert/iwyu-macosx-x86_64

ln -sF build/Ninja-ReleaseAssert/llvm-macosx-x86_64/lib build/Ninja-ReleaseAssert/iwyu-macosx-x86_64/lib

----------------------------------------

TITLE: Defining Swift SIL Optimizer Source Files in CMake
DESCRIPTION: This CMake snippet specifies the source files to be included in the swiftSILOptimizer target. It lists several C++ files that implement different optimization techniques for Swift's SIL.

LANGUAGE: CMake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  CapturePropagation.cpp
  ClosureSpecializer.cpp
  CrossModuleOptimization.cpp
  DeadFunctionElimination.cpp
  GlobalPropertyOpt.cpp
  LetPropertiesOpts.cpp
  UsePrespecialized.cpp)

----------------------------------------

TITLE: Generating Swift Exports File
DESCRIPTION: Creates an exports file for Swift targets. It collects global properties SWIFT_EXPORTS and SWIFT_BUILDTREE_EXPORTS, combines them, and exports the targets to a file.

LANGUAGE: cmake
CODE:
set(SWIFT_EXPORTS_FILE ${swift_cmake_builddir}/SwiftExports.cmake)
get_property(SWIFT_EXPORTS GLOBAL PROPERTY SWIFT_EXPORTS)
get_property(SWIFT_BUILDTREE_EXPORTS GLOBAL PROPERTY SWIFT_BUILDTREE_EXPORTS)

set(SWIFT_CONFIG_EXPORTS ${SWIFT_EXPORTS} ${SWIFT_BUILDTREE_EXPORTS})
export(TARGETS ${SWIFT_CONFIG_EXPORTS} FILE ${SWIFT_EXPORTS_FILE})

----------------------------------------

TITLE: Running Tests Using Utils/Run-Test
DESCRIPTION: Example of running Swift tests in a specific directory using the run-test utility script

LANGUAGE: shell
CODE:
% ${swift_SOURCE_ROOT}/utils/run-test --build-dir ${SWIFT_BUILD_DIR} ${swift_SOURCE_ROOT}/test/Parse

----------------------------------------

TITLE: Configuring Swift Standard Library Unit Test Dependencies
DESCRIPTION: Sets up dependencies for Swift standard library unit tests based on build configuration. If SWIFT_BUILD_SDK_OVERLAY is enabled, it includes Darwin as a dependency.

LANGUAGE: CMake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_stdlib_unittest_darwin_dependencies Darwin)
else()
set(swift_stdlib_unittest_darwin_dependencies)
endif()

----------------------------------------

TITLE: Application of closure with opaque values in SIL
DESCRIPTION: This snippet shows the application of the closure with opaque values in SIL, demonstrating one applied argument.

LANGUAGE: swift
CODE:
%resultTuple = apply %closure(#0: i)

----------------------------------------

TITLE: Configuring Swift Source Download for OpenBSD
DESCRIPTION: JSON configuration file for downloading Swift source code with minimal dependencies for OpenBSD.

LANGUAGE: json
CODE:
{
  "ssh-clone-pattern": "git@github.com:%s.git",
  "https-clone-pattern": "https://github.com/%s.git",
  "default-branch-scheme": "main",
  "repos": {
    "cmark": { "remote": { "id": "swiftlang/swift-cmark" } },
    "llvm-project": { "remote": { "id": "swiftlang/llvm-project" } },
    "swift": { "remote": { "id": "swiftlang/swift" } }
  },
  "branch-schemes": {
    "main": {
      "aliases": [ "main", "swift/main" ],
      "repos": {
        "cmark": "main",
        "llvm-project": "stable/20211026",
        "swift": "main"
      }
    }
  }
}

----------------------------------------

TITLE: Compiling for Raspberry Pi Pico with Specific Options
DESCRIPTION: Command to compile for Raspberry Pi Pico with soft float ABI and short enums.

LANGUAGE: bash
CODE:
$ swiftc -target armv6m-none-none-eabi -enable-experimental-feature Embedded -wmo \
   -Xcc -mfloat-abi=soft -Xcc -fshort-enums \
  input1.swift input2.swift ... -c -o output.o

----------------------------------------

TITLE: Defining Class and Protocol with Same Name in Swift
DESCRIPTION: This snippet defines a class named SameName with a documentation comment, and an empty protocol with the same name plus 'Protocol' suffix.

LANGUAGE: Swift
CODE:
/// Awesome name.
class SameName {
}
protocol SameNameProtocol {
}

----------------------------------------

TITLE: Configuring Swift Target Library for Foundation Unit Test Extensions
DESCRIPTION: Defines a Swift target library 'swiftStdlibUnittestFoundationExtras' with specified source files, module dependencies, compilation flags, and installation settings. The library is part of the stdlib-experimental component and has a custom Darwin install name directory.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftStdlibUnittestFoundationExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed the first.  Module name is inferred from the
  # filename.
  StdlibUnittestFoundationExtras.swift
  UnavailableFoundationMethodThunks.mm

  SWIFT_MODULE_DEPENDS StdlibUnittest
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}")

----------------------------------------

TITLE: License Header Template for Swift Files
DESCRIPTION: Standard license and copyright header template required for all Swift source files in the project. Includes copyright notice and license information.

LANGUAGE: swift
CODE:
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//


----------------------------------------

TITLE: Translating Objective-C Properties to Swift
DESCRIPTION: Illustrates how Objective-C properties are imported into Swift, including special handling for boolean properties.

LANGUAGE: objc
CODE:
@property(getter=isContrivedExample) BOOL contrivedExample;
@property BOOL hasAnotherForm;

LANGUAGE: swift
CODE:
var isContrivedExample: Bool { get set }
var hasAnotherForm: Bool { get set }

----------------------------------------

TITLE: Using @_semantics Attribute in Swift Standard Library
DESCRIPTION: This code snippet demonstrates the use of the @_semantics attribute in the Swift standard library. It shows how the attribute is applied to the getCount() function of an Array to provide semantic information to the optimizer.

LANGUAGE: swift
CODE:
  @public @_semantics("array.count")
  func getCount() -> Int {
    return _buffer.count
   }

----------------------------------------

TITLE: Skipped Message Format for Swift Compiler Tasks
DESCRIPTION: Example of a 'skipped' message indicating a task that didn't need to run. Similar to began message but without PID information.

LANGUAGE: json
CODE:
{
 "kind": "skipped",
 "name": "compile",
 "inputs": ["/src/foo.swift"],
 "outputs": [
    {
      "type": "object",
      "path": "/build/foo.o"
    },
    {
      "type": "swiftmodule",
      "path": "/build/foo.swiftmodule"
    },
    {
      "type": "diagnostics",
      "path": "/build/foo.dia"
    }
 ],
 "command_executable": "swift",
 "command_arguments": ["-frontend", "-c", "-primary-file", "/src/foo.swift", "/src/bar.swift", "-emit-module-path", "/build/foo.swiftmodule", "-emit-diagnostics-path", "/build/foo.dia"]
}

----------------------------------------

TITLE: Derived Class Initialization in SIL
DESCRIPTION: Demonstrates how derived class initializers interact with super class initializers in SIL, showing memory management and initialization chain.

LANGUAGE: swift
CODE:
// MyDerivedClass.__allocating_init(final:)
sil hidden [exact_self_class] [ossa] @$s4test14MyDerivedClassC5finalACSi_tcfC : $@convention(method) (Int, @thick MyDerivedClass.Type) -> @owned MyDerivedClass {
  // ... calls $s4test14MyDerivedClassC5finalACSi_tcfc in the usual way ...
}

// MyDerivedClass.init(final:)
sil hidden [ossa] @$s4test14MyDerivedClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyDerivedClass) -> @owned MyDerivedClass {
bb0(%0 : $Int, %1 : @owned $MyDerivedClass):
  %2 = alloc_box ${ var MyDerivedClass }, let, name "self"
  %3 = mark_uninitialized [derivedself] %2 : ${ var MyDerivedClass }
  %4 = begin_borrow [lexical] %3 : ${ var MyDerivedClass }
  %5 = project_box %4 : ${ var MyDerivedClass }, 0
  debug_value %0 : $Int, let, name "y", argno 1
  store %1 to [init] %5 : $*MyDerivedClass
  
  // ... initialize self.y ...
  
  // perform the super call. notice the ownership transfer to the super.init.
  %14 = load [take] %5 : $*MyDerivedClass
  %15 = upcast %14 : $MyDerivedClass to $MyClass
  // function_ref MyClass.init(final:)
  %16 = function_ref @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %17
  %17 = apply %16(%0, %15) : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %18
  %18 = unchecked_ref_cast %17 : $MyClass to $MyDerivedClass
  store %18 to [init] %5 : $*MyDerivedClass       // id: %19
  
  // return as usual
  %20 = load [copy] %5 : $*MyDerivedClass
  end_borrow %4 : ${ var MyDerivedClass }
  destroy_value %3 : ${ var MyDerivedClass }
  return %20 : $MyDerivedClass
}

----------------------------------------

TITLE: Adding Source Files to swiftSILOptimizer Target in CMake
DESCRIPTION: This CMake command adds a list of C++ source files to the swiftSILOptimizer target. These files implement various analyses and optimizations for the Swift Intermediate Language (SIL) optimizer.

LANGUAGE: CMake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  ARCAnalysis.cpp
  AccessSummaryAnalysis.cpp
  AccessStorageAnalysis.cpp
  AliasAnalysis.cpp
  Analysis.cpp
  ArraySemantic.cpp
  BasicCalleeAnalysis.cpp
  CallerAnalysis.cpp
  ClassHierarchyAnalysis.cpp
  ClosureScope.cpp
  ColdBlockInfo.cpp
  DeadEndBlocksAnalysis.cpp
  DestructorAnalysis.cpp
  DifferentiableActivityAnalysis.cpp
  EpilogueARCAnalysis.cpp
  FunctionOrder.cpp
  IVAnalysis.cpp
  IsSelfRecursiveAnalysis.cpp
  LoopAnalysis.cpp
  LoopRegionAnalysis.cpp
  NonLocalAccessBlockAnalysis.cpp
  PassManagerVerifierAnalysis.cpp
  ProtocolConformanceAnalysis.cpp
  Reachability.cpp
  RegionAnalysis.cpp
  RCIdentityAnalysis.cpp
  SimplifyInstruction.cpp
  ValueTracking.cpp)

----------------------------------------

TITLE: Setting Swift CMake Installation Directory
DESCRIPTION: Defines the installation directory for Swift CMake packages and sets up the build directory path.

LANGUAGE: cmake
CODE:
set(SWIFT_INSTALL_PACKAGE_DIR lib${LLVM_LIBDIR_SUFFIX}/cmake/swift)
set(swift_cmake_builddir "${SWIFT_BINARY_DIR}/${SWIFT_INSTALL_PACKAGE_DIR}")

----------------------------------------

TITLE: Cycle Detection Output Example
DESCRIPTION: Example output from the Swift compiler showing a detected circular dependency in class inheritance.

LANGUAGE: text
CODE:
===CYCLE DETECTED===
 `--SuperclassTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7)
     `--InheritedTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7, 0)
         `--SuperclassTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7) (cyclic dependency)

----------------------------------------

TITLE: Lowered application of closure in SIL
DESCRIPTION: This snippet demonstrates the lowered application of the closure in SIL, showing two applied arguments including an indirect result.

LANGUAGE: swift
CODE:
%directResult = apply %closure(#0: %indirectResult: *T, #1: i)

----------------------------------------

TITLE: Compiling Swift Files for Embedded Target
DESCRIPTION: Basic command to compile Swift source files for an embedded target using the experimental Embedded feature.

LANGUAGE: bash
CODE:
$ swiftc -target <target triple> -enable-experimental-feature Embedded -wmo \
  input1.swift input2.swift ... -c -o output.o

----------------------------------------

TITLE: Class Extension Implementation
DESCRIPTION: Extension of BaseInHead class adding additional class and instance methods.

LANGUAGE: Swift
CODE:
extension BaseInHead {
  class func doItInCategory()
  func doItInCategory()
}

----------------------------------------

TITLE: Defining Error Types in Swift
DESCRIPTION: Example of defining an enum that conforms to the Error protocol in Swift.

LANGUAGE: swift
CODE:
enum HomeworkError : Error {
    case Overworked
    case Impossible
    case EatenByCat(Cat)
    case StopStressingMeWithYourRules
}

----------------------------------------

TITLE: Defining Type Manglings in Swift
DESCRIPTION: This snippet shows the grammar for mangling various types in Swift, including builtin types, function types, and generic types.

LANGUAGE: text
CODE:
type ::= 'Bb'                              // Builtin.BridgeObject
type ::= 'BB'                              // Builtin.UnsafeValueBuffer
type ::= 'Bf' natural '_'                  // Builtin.Float<n>
type ::= 'Bi' natural '_'                  // Builtin.Int<n>
type ::= 'BO'                              // Builtin.UnknownObject
type ::= 'Bo'                              // Builtin.NativeObject
type ::= 'Bp'                              // Builtin.RawPointer
type ::= 'Bv' natural type                 // Builtin.Vec<n>x<type>
type ::= 'Bw'                              // Builtin.Word
type ::= nominal-type
type ::= associated-type
type ::= 'a' context identifier            // Type alias (DWARF only)
type ::= 'b' type type                     // objc block function type
type ::= 'c' type type                     // C function pointer type
type ::= 'F' throws-annotation? type type  // function type
type ::= 'f' throws-annotation? type type  // uncurried function type
type ::= 'G' type <type>+ '_'              // generic type application
type ::= 'K' type type                     // @auto_closure function type
type ::= 'M' type                          // metatype without representation
type ::= 'XM' metatype-repr type           // metatype with representation
type ::= 'P' protocol-list '_'             // protocol type
type ::= 'PM' type                         // existential metatype without representation
type ::= 'XPM' metatype-repr type          // existential metatype with representation
type ::= archetype
type ::= 'R' type                          // inout
type ::= 'T' tuple-element* '_'            // tuple
type ::= 't' tuple-element* '_'            // variadic tuple
type ::= 'Xo' type                         // @unowned type
type ::= 'Xu' type                         // @unowned(unsafe) type
type ::= 'Xw' type                         // @weak type
type ::= 'XF' impl-function-type           // function implementation type
type ::= 'Xf' type type                    // @thin function type
type ::= 'Xb' type                         // SIL @box type

----------------------------------------

TITLE: Array Make Unique Implementation
DESCRIPTION: Implementation of makeUnique method with @makeunique attribute for copy-on-write optimization

LANGUAGE: swift
CODE:
struct Array<T> {
  var storage: ArrayStorage

  @makeunique
  mutating func makeUnique() {
    if (isUniquelyReferenced(&storage))
      return
    storage = storage.copy()
  }
}

----------------------------------------

TITLE: CIF Information Byte Structure
DESCRIPTION: Binary structure of the initial information byte containing version and machine word size encoding.

LANGUAGE: text
CODE:
   7   6   5   4   3   2   1   0
 ┌───────────────────────┬───────┐
 │ version               │ size  │
 └───────────────────────┴───────┘

----------------------------------------

TITLE: Demonstrating SROA with Debug Value Fragments in Swift SIL
DESCRIPTION: Illustrates how Scalar Replacement of Aggregates (SROA) uses fragments in debug values to represent split struct fields.

LANGUAGE: swift
CODE:
alloc_stack $Pair, var, name "pair"
// -->
alloc_stack $Int, var, name "pair", type $Pair, expr op_fragment:#Pair.a
alloc_stack $Int, var, name "pair", type $Pair, expr op_fragment:#Pair.b
// -->
alloc_stack $Builtin.Int64, var, name "pair", type $Pair, expr op_fragment:#Pair.a:op_fragment:#Int._value
alloc_stack $Builtin.Int64, var, name "pair", type $Pair, expr op_fragment:#Pair.b:op_fragment:#Int._value

----------------------------------------

TITLE: Creating C++ Module Definition
DESCRIPTION: Defines a module map file to expose C++ code to Swift, requiring C++ support and specifying the header file to include.

LANGUAGE: modulemap
CODE:
module CxxTest {
    header "CxxTest.hpp"
    requires cplusplus
}

----------------------------------------

TITLE: Configuring Swift SILGen Static Library in CMake
DESCRIPTION: This CMake configuration adds a Swift host library named 'swiftSILGen' as a static library. It specifies all the source files to be compiled, sets up target link libraries, and configures LLVM availability for the library.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftSILGen STATIC
  ArgumentSource.cpp
  Cleanup.cpp
  Condition.cpp
  FormalEvaluation.cpp
  ManagedValue.cpp
  ResultPlan.cpp
  RValue.cpp
  Scope.cpp
  SwitchEnumBuilder.cpp
  SILGen.cpp
  SILGenApply.cpp
  SILGenBackDeploy.cpp
  SILGenBridging.cpp
  SILGenBuilder.cpp
  SILGenBuiltin.cpp
  SILGenConcurrency.cpp
  SILGenConstructor.cpp
  SILGenConvert.cpp
  SILGenDecl.cpp
  SILGenDestructor.cpp
  SILGenDistributed.cpp
  SILGenDynamicCast.cpp
  SILGenEpilog.cpp
  SILGenExpr.cpp
  SILGenForeignError.cpp
  SILGenFunction.cpp
  SILGenGlobalVariable.cpp
  SILGenLazyConformance.cpp
  SILGenLocalArchetype.cpp
  SILGenLValue.cpp
  SILGenPack.cpp
  SILGenPattern.cpp
  SILGenPoly.cpp
  SILGenProlog.cpp
  SILGenRequests.cpp
  SILGenStmt.cpp
  SILGenThunk.cpp
  SILGenTopLevel.cpp
  SILGenType.cpp)
target_link_libraries(swiftSILGen PRIVATE
  swiftSerialization
  swiftSIL)

set_swift_llvm_is_available(swiftSILGen)

----------------------------------------

TITLE: Configuring Swift Standard Library Build Flags
DESCRIPTION: Sets up compilation flags for building the Swift standard library, including experimental features and optimizations.

LANGUAGE: CMake
CODE:
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "Macros")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "FreestandingMacros")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "Extern")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "BitwiseCopyable")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "ValueGenerics")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "AddressableParameters")
list(APPEND swift_stdlib_compile_flags "-enable-experimental-feature" "AddressableTypes")
list(APPEND swift_stdlib_compile_flags "-strict-memory-safety")

----------------------------------------

TITLE: Interface Dependencies Configuration
DESCRIPTION: Adds interface dependency for Clang dependency scanning functionality.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftClangImporter INTERFACE
  clangDependencyScanning)

----------------------------------------

TITLE: Demonstrating Access Path in Swift SIL
DESCRIPTION: This snippet shows an example of access path in Swift SIL, including the root, base, access, and address of a memory operation for a struct property access.

LANGUAGE: swift
CODE:
  %root    = alloc_ref $C
  %base    = ref_element_addr %root : $C, #C.prop
  %access  = begin_access [read] [static] %base : $*S
  %address = struct_element_addr %access : $*S, #.field
  %value   = load [trivial] %address : $*Int64
  end_access %access : $*S

----------------------------------------

TITLE: Configuring swift-ide-test Tool Build in CMake
DESCRIPTION: Defines the swift-ide-test tool, specifies its source files, and sets build options. Links required Swift libraries and optionally includes libxml2 if available.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-ide-test
  swift-ide-test.cpp
  ModuleAPIDiff.cpp
  XMLValidator.cpp
  SWIFT_COMPONENT tools
  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY
  HAS_SWIFT_MODULES
)
target_link_libraries(swift-ide-test
                      PRIVATE
                        swiftAST
                        swiftDriver
                        swiftFrontend
                        swiftIDE
                        swiftIDETool
                        swiftCompilerModules)

# If libxml2 is available, make it available for swift-ide-test.
if(LLVM_ENABLE_LIBXML2)
  target_link_libraries(swift-ide-test PRIVATE LibXml2::LibXml2)
  target_compile_definitions(swift-ide-test PRIVATE SWIFT_HAVE_LIBXML=1)
endif()

----------------------------------------

TITLE: Demonstrating Extension Binding Dependencies in Swift
DESCRIPTION: Code example showing how extension binding can depend on typealias resolution and require careful phase ordering.

LANGUAGE: swift
CODE:
struct B { }
typealias C = B.Inner
extension C { }
extension B { struct Inner { } }

----------------------------------------

TITLE: Base Class Definition with Class Methods
DESCRIPTION: Defines a base class 'BaseInHead' with both class and instance methods taking Int32 parameters.

LANGUAGE: swift
CODE:
class BaseInHead {
  class func doIt(_ arg: Int32)
  func doIt(_ arg: Int32)
}

----------------------------------------

TITLE: Configuring swift-serialize-diagnostics Tool in CMake for Swift Project
DESCRIPTION: This CMake configuration adds the swift-serialize-diagnostics tool to the Swift project. It specifies the source file, sets it as part of the 'tools' component, indicates it doesn't use Swift, and links it with the swiftLocalization library.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-serialize-diagnostics
  swift-serialize-diagnostics.cpp
  SWIFT_COMPONENT tools
  DOES_NOT_USE_SWIFT
)
target_link_libraries(swift-serialize-diagnostics PRIVATE
  swiftLocalization)

----------------------------------------

TITLE: Demonstrating Equivalent Debug Value Representations in Swift SIL
DESCRIPTION: Shows two equivalent ways of representing debug information for a variable in Swift SIL: directly in an alloc_stack instruction and using a separate debug_value instruction.

LANGUAGE: swift
CODE:
%0 = alloc_stack $T, var, name "value", loc "a.swift":4:2, scope 1
// equivalent to:
%0 = alloc_stack $T, loc "a.swift":4:2, scope 1
debug_value %0 : $*T, var, name "value", expr op_deref, loc "a.swift":4:2, scope 1

----------------------------------------

TITLE: Basic Variable Declarations with val/ref
DESCRIPTION: Shows basic declaration of variables using val and ref keywords for value and reference semantics respectively.

LANGUAGE: swift
CODE:
var x: Int  // x is stored by value
val y: Int  // just like "var y: Int"
ref z: Int  // z is allocated on the heap.

var q: SomeClass          // a reference to SomeClass
ref r: SomeClass          // just like "var r: SomeClass"
val s: SomeClonableClass // a unique value of SomeClonableClass type

----------------------------------------

TITLE: Encoding CBF End/Truncate Instruction
DESCRIPTION: Defines the bit layout for the end or truncate instruction in CBF, indicating the end of backtrace data or a truncated backtrace.

LANGUAGE: plaintext
CODE:
   7   6   5   4   3   2   1   0
 ┌───────────────────────────┬───┐
 │ 0   0   0   0   0   0   0 │ t │  end (or trunc if t is 1)
 └───────────────────────────┴───┘

----------------------------------------

TITLE: VJP Function Example
DESCRIPTION: Example of a VJP (vector-Jacobian product) function showing the reverse-mode derivative transformation.

LANGUAGE: swift
CODE:
sil @vjp_f : $(Float) -> (Float, (Float) -> Float) {
bb0(%x):
  (%y1, %pb_sin) = apply @vjp_sin(%x)
  (%y2, %pb_cos) = apply @vjp_cos(%x)
  (%y3, %pb_mul) = apply @vjp_mul(%y1, %y2)
  return (%y3, { %dy3 in
    (%dy1, %dy2) += %pb_mul(%dy3)
    (%dx) += %pb_cos(%dy2)
    (%dx) += %pb_sin(%dy1)
    return %dx
  })
}

----------------------------------------

TITLE: C++ Header Definition
DESCRIPTION: Header file defining the C++ function interface that will be exposed to Swift.

LANGUAGE: cpp
CODE:
#ifndef CxxTest_hpp
#define CxxTest_hpp

int cxxFunction(int n);

#endif

----------------------------------------

TITLE: Adding Swift Remote AST Library in CMake
DESCRIPTION: Adds the swiftRemoteAST library as a static library, specifies its source files, and sets up its public and private link libraries including swiftDemangling, swiftIRGen, and swiftSema.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftRemoteAST STATIC
  RemoteAST.cpp
  InProcessMemoryReader.cpp
  ${REMOTE_LIB_HEADERS})
target_link_libraries(swiftRemoteAST PUBLIC
  swiftDemangling)
target_link_libraries(swiftRemoteAST PRIVATE
  swiftIRGen
  swiftSema)

----------------------------------------

TITLE: Configuring Embedded Swift Standard Library
DESCRIPTION: Sets up build targets for the embedded version of the Swift standard library, with specific compile flags and configurations.

LANGUAGE: CMake
CODE:
if(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)
  add_custom_target(embedded-stdlib)
  add_dependencies(embedded-libraries embedded-stdlib)

  set(SWIFT_ENABLE_REFLECTION OFF)
  set(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT OFF)
  set(SWIFT_STDLIB_STABLE_ABI OFF)
  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP OFF)
  set(SWIFT_STDLIB_ENABLE_VECTOR_TYPES OFF)

  # ... (additional configuration)

  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})
    # ... (target-specific setup)
    add_swift_target_library_single(
      embedded-stdlib-${mod}
      swiftCore
      ONLY_SWIFTMODULE
      IS_STDLIB IS_STDLIB_CORE IS_FRAGILE
      ${SWIFTLIB_EMBEDDED_SOURCES}
      GYB_SOURCES ${SWIFTLIB_EMBEDDED_GYB_SOURCES}
      SWIFT_COMPILE_FLAGS
        ${swift_stdlib_compile_flags} -Xcc -ffreestanding -enable-experimental-feature Embedded
        -Xfrontend -enable-ossa-modules
      MODULE_DIR "${CMAKE_BINARY_DIR}/lib/swift/embedded"
      SDK "embedded"
      ARCHITECTURE "${arch}"
      FILE_DEPENDS ${swiftCore_common_dependencies}
      DEPENDS ${tooling_stdlib_deps}
      INSTALL_IN_COMPONENT stdlib
      )
    add_dependencies(embedded-stdlib embedded-stdlib-${mod})
  endforeach()
endif()

----------------------------------------

TITLE: Configuring Swift Threading Unit Tests in CMake
DESCRIPTION: Sets up the SwiftThreadingTests target with source files and links required libraries. The configuration is conditional based on the host SDK and architecture matching the primary variant. For Windows hosts, an additional Synchronization library is linked.

LANGUAGE: CMake
CODE:
if(("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "${SWIFT_PRIMARY_VARIANT_SDK}") AND
   ("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "${SWIFT_PRIMARY_VARIANT_ARCH}"))
  add_swift_unittest(SwiftThreadingTests IS_TARGET_TEST
    Mutex.cpp
    ConditionVariable.cpp
    Once.cpp
    LinuxUlock.cpp
    Fatal.cpp
    )

  target_link_libraries(SwiftThreadingTests
    PRIVATE
    swiftThreading${SWIFT_PRIMARY_VARIANT_SUFFIX}
    swiftCore${SWIFT_PRIMARY_VARIANT_SUFFIX}
    )

  if(SWIFT_HOST_VARIANT STREQUAL "windows")
    target_link_libraries(SwiftThreadingTests PRIVATE Synchronization)
  endif()
endif()

----------------------------------------

TITLE: Configuring swiftPrintAsClang Library in CMake
DESCRIPTION: Sets up the swiftPrintAsClang static library, specifying its source files, link dependencies, and additional configuration. It also adds a dependency on the copy_swiftToCxx_shims target.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftPrintAsClang STATIC
  ClangSyntaxPrinter.cpp
  DeclAndTypePrinter.cpp
  ModuleContentsWriter.cpp
  PrimitiveTypeMapping.cpp
  PrintAsClang.cpp
  PrintClangClassType.cpp
  PrintClangFunction.cpp
  PrintClangValueType.cpp
  PrintSwiftToClangCoreScaffold.cpp
  SwiftToClangInteropContext.cpp)
target_link_libraries(swiftPrintAsClang PRIVATE
  swiftAST
  swiftClangImporter
  swiftFrontend
  swiftIDE
  swiftIRGen)

add_dependencies(swiftPrintAsClang
  "copy_swiftToCxx_shims")

set_swift_llvm_is_available(swiftPrintAsClang)

----------------------------------------

TITLE: Demonstrating Complex Access Path in Swift SIL
DESCRIPTION: This snippet shows a complex access path involving tail address, indexing, and struct element access, with pointer conversions and phi nodes.

LANGUAGE: swift
CODE:
bb0:
  %base    = ref_tail_addr %ref : $A, $S
  %idxproj = index_addr %tail : $*S, %idx : $Builtin.Word
  %p0 = address_to_pointer %idxproj : $*S to $Builtin.RawPointer
  cond_br _, bb1, bb2

bb1:
  %pcopy = copy_value %p0 : $Builtin.RawPointer
  %adr1  = pointer_to_address [strict] %pcopy : $Builtin.RawPointer to $*S
  %p1    = address_to_pointer %adr1 : $*S to $Builtin.RawPointer
  br bb3(%p1 : $Builtin.RawPointer)

bb2:
  br bb3(%p0 : $Builtin.RawPointer)

bb3(%p3 : $Builtin.RawPointer):
  %adr3 = pointer_to_address [strict] %p3 : $Builtin.RawPointer to $*S
  %field = struct_element_addr %adr3 : $*S, $S.field0
  load %field : $*Int64

----------------------------------------

TITLE: Defining Generic Signature Manglings in Swift
DESCRIPTION: This snippet shows the grammar for mangling generic signatures in Swift, including generic parameters and requirements.

LANGUAGE: text
CODE:
generic-signature ::= (generic-param-count+)? ('R' requirement*)? 'r'
generic-param-count ::= 'z'       // zero parameters
generic-param-count ::= index     // N+1 parameters
requirement ::= type-param protocol-name // protocol requirement
requirement ::= type-param type          // base class requirement
                                           // type starts with [CS]
requirement ::= type-param 'z' type      // 'z'ame-type requirement

// Special type mangling for type params that saves the initial 'q' on
// generic params
type-param ::= generic-param-index       // generic parameter
type-param ::= 'w' generic-param-index assoc-type-name // associated type
type-param ::= 'W' generic-param-index assoc-type-name+ '_'

----------------------------------------

TITLE: Documenting Removed Class in Swift
DESCRIPTION: The class 'RemovedClass' has been removed from the 'SwiftFoo' module or file.

LANGUAGE: Swift
CODE:
// SwiftFoo: Class RemovedClass has been removed

----------------------------------------

TITLE: Launching LLDB with Local Swift Toolchain
DESCRIPTION: This command launches LLDB using a locally built Swift toolchain, setting necessary environment variables for debugging.

LANGUAGE: bash
CODE:
DYLD_LIBRARY_PATH=/Library/Developer/Toolchains/swift-LOCAL-YYYY-MM-DD.xctoolchain/usr/lib/swift/macosx DYLD_FRAMEWORK_PATH=/Applications/Xcode.app/Contents/Developer/Library/Frameworks /Library/Developer/Toolchains/swift-LOCAL-YYYY-MM-DD.xctoolchain/usr/bin/lldb

----------------------------------------

TITLE: Configuring Swift Core Library Build Options in CMake
DESCRIPTION: Sets target properties, compile definitions, and compile options for the swiftCore target. Includes configurations for different build types and platforms.

LANGUAGE: cmake
CODE:
set_target_properties(swiftCore PROPERTIES
  Swift_MODULE_NAME Swift
  LINKER_LANGUAGE CXX)

target_compile_definitions(swiftCore
  PRIVATE
    $<$<BOOL:${SwiftCore_ENABLE_REFLECTION}>:-DSWIFT_ENABLE_REFLECTION>
    $<$<BOOL:${SwiftCore_ENABLE_COMPACT_ABSOLUTE_FUNCTION_POINTERS}>:-DSWIFT_COMPACT_ABSOLUTE_FUNCTION_POINTER>
    $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_TARGET_LIBRARY_NAME=swiftCore>
  INTERFACE
    $<$<BOOL:${SwiftCore_ENABLE_VECTOR_TYPES}>:-DSWIFT_STDLIB_ENABLE_VECTOR_TYPES>)

target_compile_options(swiftCore PRIVATE
  "$<$<AND:$<COMPILE_LANGUAGE:Swift>,$<BOOL:${BUILD_SHARED_LIBS}>>:SHELL:-Xcc -DswiftCore_EXPORTS>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -enable-experimental-concise-pound-file>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-enable-experimental-feature AddressableParameters>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-enable-experimental-feature AddressableTypes>"
  $<$<COMPILE_LANGUAGE:Swift>:-parse-stdlib>
  $<$<COMPILE_LANGUAGE:Swift>:-nostdimport>
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -group-info-path -Xfrontend ${CMAKE_CURRENT_SOURCE_DIR}/GroupInfo.json>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-objc-attr-requires-foundation-module>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -require-explicit-availability=ignore>")
if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
  target_compile_options(swiftCore PRIVATE
    "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xllvm -sil-inline-generics>"
    "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xllvm -sil-partial-specialization>")
endif()

----------------------------------------

TITLE: Demonstrating Objective-C Initialization Problem
DESCRIPTION: Shows how Objective-C's automatic inheritance of init methods can lead to uninitialized instance variables in subclasses

LANGUAGE: objective-c
CODE:
@interface SuperClass
- initSuperClass
@end

@interface Subclass : Superclass
- (void)subclassMethod
@end

@implementation Subclass : Superclass
char* name;                      // never initialized

- (void)print { printf(name); } // oops
@end

mySubclassInstance = [[Subclass alloc] initSuperClass]

----------------------------------------

TITLE: Standard Library Support Table
DESCRIPTION: Markdown table detailing the support status of Swift standard library features in Embedded Swift

LANGUAGE: markdown
CODE:
| **Swift Standard Library Feature**                         | **Currently Supported In Embedded Swift?**          |
|------------------------------------------------------------|-----------------------------------------------------|
| Array (dynamic heap-allocated container)                   | Yes    |                                      
| Array slices                                               | Yes    |

----------------------------------------

TITLE: Defining JSON Descriptor Format for Swift Pass Pipelines
DESCRIPTION: This JSON structure defines the format for describing Swift compiler pass pipelines. It includes a pass manager ID, execution strategy, count, and a list of passes to run.

LANGUAGE: json
CODE:
[
  [
    "PASS_MANAGER_ID",
    "run_n_times"|"run_to_fixed_point",
    count,
    "PASS1", "PASS2", ...
  ],
  ...
]

----------------------------------------

TITLE: Configuring Remote Library Headers for Xcode in CMake
DESCRIPTION: Sets up header files for the Swift Remote library when building with Xcode. It glob-recurses header files, sets their properties, and organizes them into a source group.

LANGUAGE: CMake
CODE:
if(XCODE)
  file(GLOB_RECURSE REMOTE_LIB_HEADERS
    ${SWIFT_SOURCE_DIR}/include/swift/Remote/*.h
    ${SWIFT_SOURCE_DIR}/include/swift/Remote/*.def)

  set_source_files_properties(${REMOTE_LIB_HEADERS}
    PROPERTIES
    HEADER_FILE_ONLY true)
  source_group("libRemote Headers" FILES ${REMOTE_LIB_HEADERS})
else()
  set(REMOTE_LIB_HEADERS)
endif()

----------------------------------------

TITLE: Defining Swift Core Library Build Target
DESCRIPTION: Sets up the main build target for the Swift core library (swiftCore) with various options and dependencies.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftCore
                  ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}
                  ${swiftCore_common_options}
                  ${compile_flags_for_final_build}
                  FILE_DEPENDS
                    ${swiftCore_common_dependencies}
                  DEPENDS ${tooling_stdlib_deps}
                  INSTALL_IN_COMPONENT
                    stdlib
                  MACCATALYST_BUILD_FLAVOR
                    zippered
                 )

----------------------------------------

TITLE: Adding Dependencies to SwiftBasicTests in CMake
DESCRIPTION: Adds the generated GYB dependency targets to the SwiftBasicTests target, ensuring that the generated files are created before compiling the tests.

LANGUAGE: CMake
CODE:
add_dependencies(SwiftBasicTests "${gyb_dependency_targets}")

----------------------------------------

TITLE: Configuring Feature Merge Command
DESCRIPTION: Sets up a custom command to merge Swift and Clang features using Python script with specified dependencies.

LANGUAGE: cmake
CODE:
add_custom_command(
  OUTPUT
    ${features_file_dest}
  COMMAND
    $<TARGET_FILE:Python3::Interpreter> ${features_merger} -f ${features_file_swift_src} -p \"\" -f ${features_file_clang_src} -p clang- > ${features_file_dest}
  DEPENDS
    ${features_merger}
    ${features_file_swift_src}
    ${features_file_clang_src}
)

----------------------------------------

TITLE: Invalidating Analysis in Swift Optimizer
DESCRIPTION: This code snippet demonstrates how to invalidate analysis in the Swift optimizer. It shows how a pass can notify the pass manager that it has modified instructions in the current function, triggering invalidation of relevant analyses.

LANGUAGE: swift
CODE:
      if (Changed) {
        invalidateAnalysis(InvalidationKind::Instructions);
      }

----------------------------------------

TITLE: Configuring Swift Frontend Tool Unit Tests in CMake
DESCRIPTION: Adds a Swift unit test suite for the Frontend Tool and specifies the required source files. It then links the test suite with necessary Swift libraries.

LANGUAGE: CMake
CODE:
add_swift_unittest(SwiftFrontendToolTests
  FrontendToolTests.cpp
  ModuleLoadingTests.cpp)

target_link_libraries(SwiftFrontendToolTests
  PRIVATE
    swiftFrontend
    swiftFrontendTool)

----------------------------------------

TITLE: Analyzing Instruction Changes by Optimization Stage
DESCRIPTION: SQL query to determine which optimization stage added or removed the most instructions by summing the Delta field for module-level instruction counters.

LANGUAGE: SQL
CODE:
select sum(Delta), Stage
from Counters C where C.counter = 'inst' and C.kind = 'module'
group by Stage
order by sum(C.Delta);

----------------------------------------

TITLE: Generic Signature Changes in Swift
DESCRIPTION: Documents changes to generic signatures in Swift protocols and functions, including constraint modifications and type parameter changes.

LANGUAGE: swift
CODE:
/* Generic Signature Changes */
P1.P1Constraint(): <Self where Self : cake.P1, Self : cake.P2> to <Self where Self : cake.P1>
addingAnInverse(_:): <T> to <T where T : ~Copyable>
Protocol P3: <Self : cake.P1, Self : cake.P2> to <Self : cake.P1, Self : cake.P4>

----------------------------------------

TITLE: Configuring Clang Dependencies
DESCRIPTION: Links required Clang libraries to the Swift AST target, including core components like CodeGen, Frontend, Driver, and basic utilities.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftAST INTERFACE
  clangCodeGen
  clangIndex
  clangFormat
  clangToolingCore
  clangFrontendTool
  clangDependencyScanning
  clangFrontend
  clangDriver
  clangSerialization
  clangParse
  clangSema
  clangAnalysis
  clangEdit
  clangRewriteFrontend
  clangRewrite
  clangAST
  clangLex
  clangAPINotes
  clangBasic)

----------------------------------------

TITLE: Incremental Rebuild of Swift Compiler
DESCRIPTION: Command to perform an incremental rebuild of the Swift compiler using Ninja

LANGUAGE: Bash
CODE:
ninja -C ../build/Ninja-RelWithDebInfoAssert/swift-${platform}-$(uname -m) bin/swift-frontend

----------------------------------------

TITLE: Dumping SIL and Other Data in LLDB
DESCRIPTION: LLDB command to dump the SIL (Swift Intermediate Language) of the current function in the debugger.

LANGUAGE: lldb
CODE:
(lldb) p getFunction()->dump()

----------------------------------------

TITLE: Handling Array Mutation with Non-Const Pointer Arguments in Swift
DESCRIPTION: Shows how array mutation is handled when passing to non-const pointer arguments, including copy-on-write behavior.

LANGUAGE: Swift
CODE:
func loadFloatsFromData(_ data: NSData) {
  var a: [Float] = [0.0, 0.0, 0.0, 0.0]
  var b = a
  data.getBytes(&b, sizeof(Float.self) * b.count)
}

----------------------------------------

TITLE: Heap Object Memory Layout
DESCRIPTION: Specifies the memory layout for heap objects in Embedded Swift, with the isa pointer at offset 0, refcount at offset 1, followed by stored properties. This structure is fundamental for object management in memory.

LANGUAGE: swift
CODE:
offset 0: isa pointer (class metadata pointer)
offset 1: refcount
offset 2+: stored properties

----------------------------------------

TITLE: Defining Generic Dictionary Structure in Swift
DESCRIPTION: Illustrates the naming convention for type parameters in generic types, using descriptive role names instead of single letters.

LANGUAGE: swift
CODE:
struct Dictionary<Key, Value> { // *not* Dictionary<K, V>

----------------------------------------

TITLE: Defining Generic Dictionary Structure in Swift
DESCRIPTION: Illustrates the naming convention for type parameters in generic types, using descriptive role names instead of single letters.

LANGUAGE: swift
CODE:
struct Dictionary<Key, Value> { // *not* Dictionary<K, V>

----------------------------------------

TITLE: Basic Swift Type Symbol Mappings
DESCRIPTION: Mapping of mangled Swift basic type symbols to their demangled representations including builtin types, standard library types, and common type patterns.

LANGUAGE: swift
CODE:
_TtBf80_ ---> Builtin.FPIEEE80
_TtBi32_ ---> Builtin.Int32
_TtBw ---> Builtin.Word
_TtSa ---> Array
_TtSb ---> Bool
_TtSS ---> String

----------------------------------------

TITLE: Compiler Version Configuration
DESCRIPTION: Sets compiler version flag for ParseVersion.cpp when SWIFT_COMPILER_VERSION is defined.

LANGUAGE: cmake
CODE:
if(SWIFT_COMPILER_VERSION)
  set_property(SOURCE ParseVersion.cpp APPEND_STRING PROPERTY COMPILE_FLAGS
    " -DSWIFT_COMPILER_VERSION=\\\"${SWIFT_COMPILER_VERSION}\\\"")
endif()

----------------------------------------

TITLE: Building Swift Benchmarks with build-script
DESCRIPTION: Command to build Swift benchmarks for iOS, watchOS and tvOS platforms using build-script

LANGUAGE: bash
CODE:
$ swift/utils/build-script --ios --watchos --tvos

----------------------------------------

TITLE: Configuring Swift Reflection Tests for Darwin Variants in CMake
DESCRIPTION: This snippet sets up the SwiftReflectionTests target for Darwin variants of the Swift host. It adds the test file, includes necessary directories, defines compilation flags, and links required libraries.

LANGUAGE: CMake
CODE:
if(("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "${SWIFT_PRIMARY_VARIANT_SDK}") AND
   ("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "${SWIFT_PRIMARY_VARIANT_ARCH}"))
  if(SWIFT_HOST_VARIANT MATCHES "${SWIFT_DARWIN_VARIANTS}")
    add_swift_unittest(SwiftReflectionTests
      TypeRef.cpp)
    target_include_directories(SwiftReflectionTests BEFORE PRIVATE
      ${SWIFT_SOURCE_DIR}/stdlib/include)
    target_compile_definitions(SwiftReflectionTests PRIVATE
      SWIFT_INLINE_NAMESPACE=__runtime)
    target_link_libraries(SwiftReflectionTests
      PRIVATE
      swiftRemoteInspection${SWIFT_PRIMARY_VARIANT_SUFFIX})
  endif()
endif()

----------------------------------------

TITLE: Configuring Swift Project Build Structure with CMake
DESCRIPTION: CMake configuration that sets up the build structure by including the lib and bin subdirectories. This establishes the basic project organization for building Swift libraries and executables.

LANGUAGE: cmake
CODE:
add_subdirectory(lib)
add_subdirectory(bin)

----------------------------------------

TITLE: Implementing Instruction Deletion Notification Handler in Swift
DESCRIPTION: This code snippet shows how to implement a notification handler for instruction deletion in the Swift optimizer. It demonstrates how passes and analyses can receive and process notifications when instructions are deleted.

LANGUAGE: swift
CODE:
  virtual void handleNotification(swift::ValueBase *Value) override {
    llvm::errs()<<"SILCombine Deleting: " << Value<<"\n";
  }

----------------------------------------

TITLE: Loading from Memory with load
DESCRIPTION: Loads the value at address %0 from memory. T must be a loadable type.

LANGUAGE: swift
CODE:
%1 = load %0 : $*T
// %0 must be of a $*T address type for loadable type $T
// %1 will be of type $T

----------------------------------------

TITLE: Protocol Definition - AnotherObjcProt
DESCRIPTION: Defines an Objective-C compatible protocol with a single required method anotherFunctionFromProt(). The protocol is marked with @objc and @dynamic attributes.

LANGUAGE: swift
CODE:
@objc protocol AnotherObjcProt {
    @objc dynamic func anotherFunctionFromProt()
}

----------------------------------------

TITLE: Declaring Cursor-Based Refactoring in RefactoringKinds.def
DESCRIPTION: Shows how to declare a new cursor-based refactoring action for string localization in the RefactoringKinds.def file

LANGUAGE: cpp
CODE:
CURSOR_REFACTORING(LocalizeString, "Localize String", localize.string)

----------------------------------------

TITLE: Building Swift-Inspect with Local swift-argument-parser
DESCRIPTION: Command to build swift-inspect using CMake with a local copy of swift-argument-parser. It specifies the path to the ArgumentParser modules.

LANGUAGE: cmd
CODE:
cmake -b out -G Ninja -S . -D ArgumentParser_DIR=S:\swift-argument-parser\build\cmake\modules

----------------------------------------

TITLE: Demonstrating Reference Root to Base Def-Use Chain in Swift SIL
DESCRIPTION: This snippet shows a complex def-use chain from a reference root to an access base, involving upcasts, phi nodes, and bridge object conversions.

LANGUAGE: swift
CODE:
bb0:
  %root = alloc_ref $B
  cond_br _, bb1, bb2

bb1:
  %a1 = upcast %root : $B to $A
  br bb3(%a1 : $A)

bb2:
  %a2 = upcast %root : $B to $A
  br bb3(%a2 : $A)

bb3(%a : $A):
  %bridge = ref_to_bridge_object %a : $A, %bits : $Builtin.Word
  %ref = bridge_object_to_ref %bridge : $Builtin.BridgeObject to $A
  %base = ref_element_addr %ref : $A, #A.prop0

----------------------------------------

TITLE: CMake Configuration for Swift-Pico Integration
DESCRIPTION: CMake build configuration that sets up Swift compilation for Raspberry Pi Pico, including SDK initialization, compiler flags, and linking specifications.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.13)
include($ENV{PICO_SDK_PATH}/external/pico_sdk_import.cmake)

project(swift-blinky)
pico_sdk_init()
execute_process(COMMAND xcrun -f swiftc OUTPUT_VARIABLE SWIFTC OUTPUT_STRIP_TRAILING_WHITESPACE)

add_executable(swift-blinky)
add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o
    COMMAND
        ${SWIFTC}
        -target armv6m-none-none-eabi -Xcc -mfloat-abi=soft -Xcc -fshort-enums
        -Xfrontend -function-sections -enable-experimental-feature Embedded -wmo -parse-as-library
        $$\( echo '$<TARGET_PROPERTY:swift-blinky,INCLUDE_DIRECTORIES>' | tr '\;' '\\n' | sed -e 's/\\(.*\\)/-Xcc -I\\1/g' \)
        $$\( echo '${CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES}'             | tr ' '  '\\n' | sed -e 's/\\(.*\\)/-Xcc -I\\1/g' \)
        -import-bridging-header ${CMAKE_CURRENT_LIST_DIR}/BridgingHeader.h
        ${CMAKE_CURRENT_LIST_DIR}/Main.swift
        -c -o ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o
    DEPENDS
        ${CMAKE_CURRENT_LIST_DIR}/BridgingHeader.h
        ${CMAKE_CURRENT_LIST_DIR}/Main.swift
)
add_custom_target(swift-blinky-swiftcode DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o)

target_link_libraries(swift-blinky
    pico_stdlib hardware_uart hardware_gpio
    ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o
)
add_dependencies(swift-blinky swift-blinky-swiftcode)
pico_add_extra_outputs(swift-blinky)

----------------------------------------

TITLE: Demonstrating Debug Value with Custom Type in Swift SIL
DESCRIPTION: Shows how to specify a custom type for a debug value when the default type inference is not sufficient.

LANGUAGE: swift
CODE:
debug_value %0 : $*T, let, name "address", type $UnsafeRawPointer

----------------------------------------

TITLE: Importing FooHelper Components in Swift
DESCRIPTION: This snippet demonstrates how to import specific components from the FooHelper module in Swift. It includes an explicit import and an exported import for submodules.

LANGUAGE: Swift
CODE:
import FooHelper.FooHelperExplicit
@_exported import FooHelper.FooHelperSub

----------------------------------------

TITLE: Configuring UUID Dependencies
DESCRIPTION: Sets up UUID include paths and libraries based on the target platform. Special handling for Darwin (macOS), Windows, and other platforms.

LANGUAGE: cmake
CODE:
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(UUID_INCLUDE "")
  set(UUID_LIBRARIES "")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(UUID_INCLUDE "")
  set(UUID_LIBRARIES "rpcrt4.lib")
else()
  find_package(UUID REQUIRED)
  set(UUID_INCLUDE "${UUID_INCLUDE_DIRS}")
endif()

----------------------------------------

TITLE: Building Benchmarks with SwiftPM and LLBuild
DESCRIPTION: Command to build benchmarks using build-script with SwiftPM and LLBuild support

LANGUAGE: bash
CODE:
swift-source$ swift/utils/build-script --swiftpm --llbuild --install-swift --install-swiftpm --install-llbuild --toolchain-benchmarks

----------------------------------------

TITLE: Linking Swift Clang Importer Test Dependencies
DESCRIPTION: This snippet specifies the libraries to be linked with the SwiftClangImporterTests target. It includes dependencies on swiftClangImporter, swiftSema, swiftParse, and swiftAST, which are essential for testing the Clang importer functionality.

LANGUAGE: CMake
CODE:
target_link_libraries(SwiftClangImporterTests
    PRIVATE
    swiftClangImporter
    swiftSema
    swiftParse
    swiftAST
)

----------------------------------------

TITLE: Setting GYB Flags for CF Database
DESCRIPTION: Configures GYB (Generate Your Boilerplate) flags for processing the CF Database definition file.

LANGUAGE: cmake
CODE:
set(SWIFT_GYB_FLAGS "-DCFDatabaseFile=${SWIFT_SOURCE_DIR}/lib/ClangImporter/CFDatabase.def")

----------------------------------------

TITLE: Shell Function for Counting Instructions with Perf
DESCRIPTION: A shell function that uses perf to count instructions executed during compilation, useful for performance measurement and regression testing.

LANGUAGE: bash
CODE:
count_instructions() {
    perf stat -x , --log-fd 3    \
      -e instructions -r 10 "$@" \
      3>&1 2>/dev/null 1>&2 | cut -d , -f 1
}

----------------------------------------

TITLE: Linking Libraries for swift-scan-test
DESCRIPTION: Specifies the libraries to be linked with the swift-scan-test tool. It includes swiftBasic, swiftDependencyScanImpl, and libSwiftScan as private dependencies.

LANGUAGE: CMake
CODE:
target_link_libraries(swift-scan-test
                      PRIVATE
                      swiftBasic
                      swiftDependencyScanImpl
                      libSwiftScan)

----------------------------------------

TITLE: Defining Global Manglings in Swift
DESCRIPTION: This snippet shows the grammar for mangling global symbols in Swift, including type metadata, witness tables, and thunks.

LANGUAGE: text
CODE:
global ::= 't' type                    // standalone type (for DWARF)
global ::= 'M' type                   // type metadata (address point)
                                         // -- type starts with [BCOSTV]
global ::= 'Mf' type                   // 'full' type metadata (start of object)
global ::= 'MP' type                   // type metadata pattern
global ::= 'Ma' type                   // type metadata access function
global ::= 'ML' type                   // type metadata lazy cache variable
global ::= 'Mm' type                   // class metaclass
global ::= 'Mn' nominal-type           // nominal type descriptor
global ::= 'Mp' protocol               // protocol descriptor
global ::= 'MR' remote-reflection-record // metadata for remote mirrors
global ::= 'PA' .*                     // partial application forwarder
global ::= 'PAo' .*                    // ObjC partial application forwarder
global ::= 'w' value-witness-kind type // value witness
global ::= 'Wa' protocol-conformance   // protocol witness table accessor
global ::= 'WG' protocol-conformance   // generic protocol witness table
global ::= 'WI' protocol-conformance   // generic protocol witness table instantiation function
global ::= 'Wl' type protocol-conformance // lazy protocol witness table accessor
global ::= 'WL' protocol-conformance   // lazy protocol witness table cache variable
global ::= 'Wo' entity                 // witness table offset
global ::= 'WP' protocol-conformance   // protocol witness table
global ::= 'Wt' protocol-conformance identifier // associated type metadata accessor
global ::= 'WT' protocol-conformance identifier nominal-type // associated type witness table accessor
global ::= 'Wv' directness entity      // field offset
global ::= 'WV' type                   // value witness table
global ::= entity                      // some identifiable thing
global ::= 'TO' global                 // ObjC-as-swift thunk
global ::= 'To' global                 // swift-as-ObjC thunk
global ::= 'TD' global                 // dynamic dispatch thunk
global ::= 'Td' global                 // direct method reference thunk
global ::= 'TR' reabstract-signature   // reabstraction thunk helper function
global ::= 'Tr' reabstract-signature   // reabstraction thunk

----------------------------------------

TITLE: Testing Benchmark Execution Parameters
DESCRIPTION: Verifies benchmark execution with custom iteration counts, sample times, and output formatting including statistics and quantile reporting.

LANGUAGE: shell
CODE:
RUN: %Benchmark_O AngryPhonebook --num-iters=1 \
RUN:                             --sample-time=0.000001 --min-samples=7 \
RUN:              | %FileCheck %s --check-prefix NUMITERS1

----------------------------------------

TITLE: Configuring Library Compilation and Linking in CMake
DESCRIPTION: Sets compiler definitions and links required dependencies for the sourcekitdAPI library.

LANGUAGE: cmake
CODE:
target_compile_definitions(sourcekitdAPI PRIVATE
  sourcekitd_EXPORTS)
target_link_libraries(sourcekitdAPI PRIVATE
  swiftBasic
  SourceKitSupport)

----------------------------------------

TITLE: Implementing isApplicable for String Localization
DESCRIPTION: Implementation of the isApplicable function for string localization refactoring that checks if the cursor points to a valid string literal

LANGUAGE: cpp
CODE:
bool RefactoringActionLocalizeString::
isApplicable(ResolvedCursorInfo CursorInfo) {
  if (CursorInfo.Kind == CursorInfoKind::ExprStart) {
    if (auto *Literal = dyn_cast<StringLiteralExpr>(CursorInfo.TrailingExpr) {
      return !Literal->hasInterpolation(); // Not real API.
    }
  }
}

----------------------------------------

TITLE: Linking SourceKit C API in Swift
DESCRIPTION: Instructions for linking to the SourceKit C API using either the sourcekitd.framework or the in-process library libsourcekitdInProc.dylib. The in-process library is recommended for debugging purposes.

LANGUAGE: bash
CODE:
-lsourcekitdInProc

LANGUAGE: bash
CODE:
-framework sourcekitd

LANGUAGE: bash
CODE:
DYLD_INSERT_LIBRARIES=/path/to/libsourcekitdInProc.dylib DYLD_FORCE_FLAT_NAMESPACE=1 <...>

----------------------------------------

TITLE: Using Existential Types in Generic Structs in Swift
DESCRIPTION: This snippet shows how to refactor a generic struct to use an existential type instead of a generic parameter, which can be useful in certain scenarios.

LANGUAGE: swift
CODE:
// Instead of...
struct Habitat<T: Animal> {
    var animal: T
}
// ...consider:
struct Habitat {
    var animal: Animal
}

----------------------------------------

TITLE: Implementing a Simple Function Pass in Swift
DESCRIPTION: This code snippet demonstrates the structure of a simple function pass called CSE (Common Subexpression Elimination) in the Swift optimizer. It shows how to create a pass that inherits from SILFunctionTransform and implements the required methods.

LANGUAGE: swift
CODE:
  class CSE : public SILFunctionTransform {
    void run() override {
      // .. do stuff ..
    }

    StringRef getName() override {
      return "CSE";
    }
  };

----------------------------------------

TITLE: Per-Library Availability Checking in Swift
DESCRIPTION: Example of how library-specific version availability checking could work, showing both class declarations and conditional availability checks based on library versions rather than OS versions.

LANGUAGE: swift
CODE:
// Client code
@available(Magician 1.5)
class CrystalBallView : MagicView { /*...*/ }

func scareMySiblings() {
  if #available(Magician 1.2) {
    summonDemons()
  } else {
    print("BOO!!")
  }
}

----------------------------------------

TITLE: Analyzing Function Creation/Deletion by Pass
DESCRIPTION: SQL query to determine which optimization pass created or deleted the most functions by summing the Delta field for module-level function counters.

LANGUAGE: SQL
CODE:
select C.Transform, sum(C.Delta)
from Counters C
where C.counter = 'functions' and C.kind = 'module'
group by C.Transform;

----------------------------------------

TITLE: Swift Protocol Conformance Example
DESCRIPTION: Example demonstrating protocol conformance rules with public and non-public requirements in Swift.

LANGUAGE: Swift
CODE:
@public protocol P {
    @public func f() { g() }
    func g()
}

struct X : P { // OK, X is not @public, so neither is its
    func f() {}  // conformance to P, and therefore f
    func g() {}  // can be non-@public
}

----------------------------------------

TITLE: Encoding CBF Repeat Instruction
DESCRIPTION: Specifies the bit layout for the repeat instruction in CBF, used to efficiently represent repeated frames in the backtrace.

LANGUAGE: plaintext
CODE:
   7   6   5   4   3   2   1   0
 ┌────────────────┬───┬──────────┐
 │ 1   0   0   0  │ x │ count    │ repeat
 └────────────────┴───┴──────────┘

----------------------------------------

TITLE: Configuring Swift Remote AST Test Tool in CMake
DESCRIPTION: Sets up the swift-remoteast-test tool with necessary dependencies and build properties. It links against swiftFrontendTool and swiftRemoteAST libraries, and enables exports.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-remoteast-test
  swift-remoteast-test.cpp
  SWIFT_COMPONENT testsuite-tools
  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY
)
target_link_libraries(swift-remoteast-test
                      PRIVATE
                        swiftFrontendTool
                        swiftRemoteAST)
set_target_properties(swift-remoteast-test PROPERTIES ENABLE_EXPORTS 1)

# If building as part of clang, make sure the headers are installed.
if(NOT SWIFT_BUILT_STANDALONE)
  add_dependencies(swift-frontend clang-resource-headers)
endif()

----------------------------------------

TITLE: Defining Optional Source Files in CMake
DESCRIPTION: Specifies optional source files that may be included in the build depending on platform conditions.

LANGUAGE: cmake
CODE:
set(LLVM_OPTIONAL_SOURCES
  sourcekitdAPI-XPC.cpp
  sourcekitdAPI-InProc.cpp)

----------------------------------------

TITLE: Git Bisect Test Script
DESCRIPTION: A shell script for automated git bisection to find performance regressions, using instruction counting as the regression test.

LANGUAGE: bash
CODE:
#!/bin/sh
THRESHOLD=500000000
CURR=$(git describe)
utils/update-checkout --scheme main --reset-to-remote --clone --clean
git checkout ${CURR}
utils/update-checkout --scheme main --match-timestamp
git checkout ${CURR}
if utils/build-script -r
then
    V=$(count_instructions ../build/Ninja-ReleaseAssert/swift-linux-x86_64/bin/swiftc -c test.swift)
    if [ ${V} -gt ${THRESHOLD} ]
    then
        # Bad
        exit 1
    else
        # Good
        exit 0
    fi
else
    # Skip
    exit 125
fi

----------------------------------------

TITLE: Declaring FooHelper Enumerator Variables in Swift
DESCRIPTION: This snippet declares two computed properties, FooHelperUnnamedEnumeratorA1 and FooHelperUnnamedEnumeratorA2, both of type Int with get-only access. These likely represent enumerator values from FooHelper.

LANGUAGE: Swift
CODE:
var FooHelperUnnamedEnumeratorA1: Int { get }
var FooHelperUnnamedEnumeratorA2: Int { get }

----------------------------------------

TITLE: Testing List Format Output of Swift Benchmarks
DESCRIPTION: Verifies the format of benchmark list output, checking for proper test numbering, tags, and exclusion of skipped tests.

LANGUAGE: shell
CODE:
RUN: %Benchmark_O --list | %FileCheck %s \
RUN:                      --check-prefix LISTPRECOMMIT \
RUN:                      --check-prefix LISTTAGS

----------------------------------------

TITLE: Manually Compiling Swift Generics PDF
DESCRIPTION: Provides a series of commands to manually compile the Swift Generics PDF from TeX source. This method explicitly runs pdflatex and bibtex in the required sequence to generate the final document.

LANGUAGE: bash
CODE:
cd docs/Generics/
pdflatex generics
bibtex generics
pdflatex generics
pdflatex generics

----------------------------------------

TITLE: Querying Aggregate Times for Optimization Passes
DESCRIPTION: SQL query to compute the total duration for each optimization pass/transformation by summing the Duration field for module-level instruction counters.

LANGUAGE: SQL
CODE:
select C.Transform, sum(C.Duration)
from Counters C
where C.counter = 'inst' and C.kind = 'module'
group by C.Transform;

----------------------------------------

TITLE: Declaring Function to Instantiate Symbolic Type in Swift
DESCRIPTION: Declares a function that takes a SymbolicTypeReference and returns an array of FieldTypeDescriptor. This function is responsible for instantiating metadata for a given symbolic type reference.

LANGUAGE: Swift
CODE:
func instantiateSymbolicType(_ ref: SymbolicTypeReference) -> [FieldTypeDescriptor]

----------------------------------------

TITLE: Swift Stub Class Structure Implementation
DESCRIPTION: Defines the structure of a Swift stub class used for dynamically-generated classes. Contains dummy field for linker, one field for isa distinction, and initializer function pointer.

LANGUAGE: c
CODE:
uintptr_t dummy;
uintptr_t one;
SwiftMetadataInitializer initializer;

----------------------------------------

TITLE: Updating Swift Checkout Branch
DESCRIPTION: Command to update the working copy to a specific branch scheme using Swift's update-checkout utility

LANGUAGE: shell
CODE:
swift/utils/update-checkout --scheme [branch]

----------------------------------------

TITLE: Swift Inheritance Syntax Example
DESCRIPTION: Shows proposed syntax for explicitly inheriting init methods from superclass in Swift

LANGUAGE: swift
CODE:
@inherit init(x:y:z) // one possible syntax

----------------------------------------

TITLE: Mangling Generic Types
DESCRIPTION: Rules for mangling generic type names and parameters

LANGUAGE: text
CODE:
bound-generic-type ::= type 'y' (type* '_')* type* retroactive-conformance* 'G'
generic-signature ::= requirement* generic-param-marker 'l'     // one generic parameter
generic-signature ::= requirement* generic-param-marker* 'r' GENERIC-PARAM-COUNT* 'l'

----------------------------------------

TITLE: Configuring LLDB Module Import Test Tool Build
DESCRIPTION: CMake configuration that sets up the lldb-moduleimport-test build target. Specifies the source file and marks it as a Swift host tool for the testsuite-tools component. Links against required Swift libraries including AST, ASTSectionImporter, ClangImporter and Frontend.

LANGUAGE: cmake
CODE:
add_swift_host_tool(lldb-moduleimport-test
  lldb-moduleimport-test.cpp
  SWIFT_COMPONENT testsuite-tools
)
target_link_libraries(lldb-moduleimport-test
                      PRIVATE
                        swiftAST
                        swiftASTSectionImporter
                        swiftClangImporter
                        swiftFrontend)

----------------------------------------

TITLE: Configuring Swift Unit Test Subdirectories in CMake
DESCRIPTION: This CMake script includes various subdirectories for unit tests in the Swift project. It checks for the SWIFT_INCLUDE_TOOLS option and conditionally adds test directories for different components of the Swift compiler and related tools.

LANGUAGE: CMake
CODE:
include(AddSwiftUnittests)

if(SWIFT_INCLUDE_TOOLS)
  # We can't link C++ unit tests unless we build the tools.

  add_subdirectory(AST)
  add_subdirectory(Basic)
  add_subdirectory(ClangImporter)
  add_subdirectory(DependencyScan)
  add_subdirectory(Frontend)
  add_subdirectory(FrontendTool)
  add_subdirectory(Localization)
  add_subdirectory(IDE)
  add_subdirectory(Parse)
  add_subdirectory(Remangler)
  add_subdirectory(Sema)
  add_subdirectory(SIL)
  add_subdirectory(SILOptimizer)
  add_subdirectory(SwiftDemangle)

  add_subdirectory(Threading)

  if(SWIFT_BUILD_SDK_OVERLAY)
    # Runtime tests depend on symbols in StdlibUnittest.
    #
    # FIXME: cross-compile runtime unittests.
    add_subdirectory(runtime)
    add_subdirectory(Reflection)
  endif()

  if(SWIFT_BUILD_SOURCEKIT)
    add_subdirectory(SourceKit)
  endif()
endif()

----------------------------------------

TITLE: Creduce Test Script
DESCRIPTION: A shell script for use with creduce to automatically reduce test cases that exhibit performance regressions.

LANGUAGE: bash
CODE:
#!/bin/sh
INPUT=test.swift
OLD=${HOME}/old-toolchain/usr/bin/swift
NEW=${HOME}/new-toolchain/usr/bin/swift
THRESHOLD=50000000
VOLD=$(count_instructions ${OLD} -frontend -c ${INPUT})
VNEW=$(count_instructions ${NEW} -frontend -c ${INPUT})
VDIFF=$((${VNEW} - ${VOLD}))
if [ ${VDIFF} -gt ${THRESHOLD} ]
then
  # Interesting
  exit 0
else
  # Not interesting
  exit 1
fi

----------------------------------------

TITLE: Configuring Swift Demangling YAML Dump Tool Build
DESCRIPTION: CMake configuration that sets up the swift-demangle-yamldump tool build. Specifies the source file, LLVM component dependencies, and links against the swiftDemangling library.

LANGUAGE: cmake
CODE:
add_swift_host_tool(swift-demangle-yamldump
  swift-demangle-yamldump.cpp
  LLVM_LINK_COMPONENTS support
  SWIFT_COMPONENT testsuite-tools
  )
target_link_libraries(swift-demangle-yamldump
                      PRIVATE
                        swiftDemangling)

----------------------------------------

TITLE: Testing Contextual Refactoring
DESCRIPTION: Example of testing the contextual availability of refactoring actions using swift-refactor

LANGUAGE: swift
CODE:
func foo() {
  print("Hello World!")
}
// RUN: %refactor -source-filename %s -pos=2:14 | %FileCheck %s -check-prefix=CHECK-LOCALIZE-STRING
// CHECK-LOCALIZE-STRING: Localize String

----------------------------------------

TITLE: Creating Swift Runtime Core Library Target in CMake
DESCRIPTION: Defines the main Swift runtime core library target, including its sources, compile flags, and link flags.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftRuntimeCore OBJECT_LIBRARY
  ${swift_runtime_sources}
  ${swift_runtime_objc_sources}
  ${swift_runtime_leaks_sources}
  ${swift_runtime_threading_sources}
  C_COMPILE_FLAGS
    ${swift_runtime_library_compile_flags}
    ${swift_enable_backtracing}
  LINK_FLAGS ${swift_runtime_linker_flags}
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT never_install)

----------------------------------------

TITLE: Configuring LLVM for Android ARM Build on Windows
DESCRIPTION: This snippet demonstrates how to configure LLVM for an Android ARM build using CMake on Windows. It sets various parameters including the build type, toolchain file, and host triple.

LANGUAGE: cmd
CODE:
md S:\b\a\llvm
cd S:\b\a\llvm
cmake -C S:\swift-build\cmake\caches\android-armv7.cmake                                                        ^
  -G Ninja                                                                                                      ^
  -DCMAKE_BUILD_TYPE=Release                                                                                    ^
  -DCMAKE_TOOLCHAIN_FILE=S:\swift-build\cmake\toolchains\android.toolchain.cmake                                ^
  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr ^
  -DLLVM_HOST_TRIPLE=armv7-unknown-linux-androideabi                                                            ^
  S:/llvm

----------------------------------------

TITLE: Objective-C Initialization Fix Pattern
DESCRIPTION: Demonstrates the proper way to handle initialization in Objective-C subclasses by overriding superclass initializers

LANGUAGE: objective-c
CODE:
@implementation Subclass : Superclass
char* name;
- initSuperClass {
    [super initSuperClass];       // Don't forget the superclass
    name = "Tino";
}
- (void)print { printf(name); } // OK
@end

----------------------------------------

TITLE: Analyzing Instruction Changes by Pass and Stage
DESCRIPTION: SQL query to identify which optimization pass at which pipeline stage created or removed the most instructions, sorted by the absolute sum of Delta values.

LANGUAGE: SQL
CODE:
select C.Stage, C.Transform, sum(C.Delta)
from Counters C where C.counter = 'inst' and C.kind = 'module'
group by C.Stage, C.Transform
order by abs(sum(C.Delta));

----------------------------------------

TITLE: Nonisolated Method Solution
DESCRIPTION: Demonstrates how to make protocol conformance universally accessible by marking the implementing method as nonisolated.

LANGUAGE: swift
CODE:
@MainActor
struct MyData: P {
  nonisolated func f() { }
}

----------------------------------------

TITLE: Using C++ Types in Swift
DESCRIPTION: Demonstrates Swift code interacting with C++ types, including extending C++ types with Swift protocols, using STL algorithms, and Swift collection features.

LANGUAGE: Swift
CODE:
// main.swift
import CxxTypes
import CxxStdlib

// We can extend C++ types in Swift.
extension V : RandomAccessCollection {
  public var startIndex: Int { 0 }
  public var endIndex: Int { size() }
}

// Create a vector with some data.
var numbers = V(4)
std.fill(numbers.beginMutating(), numbers.endMutating(), 41)

// Transform it using C++.
std.transform(numbers.beginMutating(), numbers.endMutating(),
              numbers.beginMutating()) { (element: Int) in
  return element + 1
}

// Loop over it in Swift.
for (index, element) in numbers.enumerated() {
  print("v[\(index)] = \(element)")
}

// We can also use anything in RandomAccessCollection, such as map and zip.
let strings = numbers.map { "\($0)" }
for (s, n) in zip(strings, numbers) {
  print("\(s) = \(n)")
}

----------------------------------------

TITLE: Raw Representable Enums Definition in Swift
DESCRIPTION: Defines FooEnum1, FooEnum2, and FooEnum3 structs that conform to RawRepresentable and Equatable protocols with UInt32 raw values.

LANGUAGE: swift
CODE:
struct FooEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}

----------------------------------------

TITLE: Defining Simple Types in Swift Standard Library
DESCRIPTION: Definitions for basic types like Int, Float, Bool in the Swift standard library, implemented using builtin types.

LANGUAGE: swift
CODE:
// Void is just a type alias for the empty tuple.
typealias Void = ()

// Fixed size types are simple structs of the right size.
struct Int8  { value : Builtin.Int8 }
struct Int16 { value : Builtin.Int16 }
struct Int32 { value : Builtin.Int32 }
struct Int64 { value : Builtin.Int64 }
struct Int128 { value : Builtin.Int128 }

// Int is just an alias for the 64-bit integer type.
typealias Int = Int64

struct Float  { value : Builtin.FPIEEE32 }
struct Double { value : Builtin.FPIEEE64 }

// Bool is a simple enum.
enum Bool {
  true, false
}

// Allow true and false to be used unqualified.
var true = Bool.true
var false = Bool.false

----------------------------------------

TITLE: Defining Keyword Apply Syntax in Swift
DESCRIPTION: Specifies the syntax for keyword argument application in function calls. It defines the structure for function invocation with optional keyword arguments and provides examples of various call patterns.

LANGUAGE: Swift
CODE:
expr-apply ::= expr-postfix '(' (kw-arg (',' kw-arg)*)? ')'
kw-arg ::= (identifier ':')? expr

// Examples
foo()
foo(1, 2, 3)
foo(1, bar: 2, bas: 3)
foo!(1, bar: 2, bas: 3)
a.foo?(1, bar: 2, bas: 3)

----------------------------------------

TITLE: Configuring SourceKitSwiftLang Library in CMake
DESCRIPTION: This CMake code snippet defines the SourceKitSwiftLang library, specifying its source files, LLVM link components, and target link libraries. It includes various Swift and Clang dependencies necessary for the library's functionality.

LANGUAGE: CMake
CODE:
add_sourcekit_library(SourceKitSwiftLang
  CodeCompletionOrganizer.cpp
  SwiftASTManager.cpp
  SwiftCompile.cpp
  SwiftCompletion.cpp
  SwiftConformingMethodList.cpp
  SwiftDocSupport.cpp
  SwiftEditor.cpp
  SwiftEditorInterfaceGen.cpp
  SwiftIndexing.cpp
  SwiftLangSupport.cpp
  SwiftMangling.cpp
  SwiftSourceDocInfo.cpp
  SwiftSyntacticMacroExpansion.cpp
  SwiftTypeContextInfo.cpp
    LLVM_LINK_COMPONENTS ${LLVM_TARGETS_TO_BUILD}
      bitreader
      bitwriter
      coverage
      debuginfodwarf
      instrumentation
      ipo
      lto
      mc
      mcparser
      option
      objcarcopts
      profiledata
)
target_link_libraries(SourceKitSwiftLang PRIVATE
  SourceKitCore
  swiftDriver
  swiftFrontend
  swiftClangImporter
  swiftIDE
  swiftIDETool
  swiftAST
  swiftMarkup
  swiftParse
  swiftSIL
  swiftSILGen
  swiftSILOptimizer
  swiftIRGen
  swiftSema
  swiftBasic
  swiftSerialization
  swiftOption
  swiftSymbolGraphGen
  swiftRefactoring
  # Clang dependencies.
  clangIndex
  clangFormat
  clangToolingCore
  clangFrontendTool
  clangFrontend
  clangDriver
  clangCodeGen
  clangSerialization
  clangParse
  clangSema
  clangAnalysis
  clangEdit
  clangRewriteFrontend
  clangRewrite
  clangLex
  clangAST
  clangAPINotes
  clangBasic)
add_dependencies(SourceKitSwiftLang clang-tablegen-targets)

----------------------------------------

TITLE: Configuring Swift Remote Mirror Static Library in CMake
DESCRIPTION: Creates a static library target for Swift Remote Mirror and configures its dependencies and platform-specific settings. Links against the Swift demangling library and adds Windows-specific compiler definitions when building on Windows.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftRemoteMirror STATIC
  ${SWIFT_SOURCE_DIR}/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp)
target_link_libraries(swiftRemoteMirror PRIVATE
  swiftDemangling)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  target_compile_definitions(swiftRemoteMirror PRIVATE _LIB)
endif()

----------------------------------------

TITLE: Comparing Function Sizes Before and After Optimization
DESCRIPTION: SQL query to retrieve the number of instructions at the beginning and end of the optimization pipeline for each function.

LANGUAGE: SQL
CODE:
select MinOld.Id, MinOld.Old, MaxOld.Id, MaxOld.Old, MinOld.Symbol
from 
(
  select C.Id, C.Old, C.Symbol
  from Counters C where C.counter = 'inst' and C.kind = 'function_history'
  group by C.Symbol
  having C.Id = max(Id)
) as MaxOld,
(select C.Id, C.Old, C.Symbol
   from Counters C
   where C.counter = 'inst' and C.kind = 'function_history'
   group by C.Symbol
   having C.Id = min(Id)
) as MinOld
where MinOld.Symbol == MaxOld.Symbol;

----------------------------------------

TITLE: Preset Test Configuration
DESCRIPTION: Example showing how to configure and run a specific preset test on macOS platform.

LANGUAGE: markdown
CODE:
preset=buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx,single-thread\n@swift-ci Please test with preset macOS

----------------------------------------

TITLE: Defining Swift Runtime Source Files in CMake
DESCRIPTION: Defines the source files for the Swift runtime, including core runtime sources, Objective-C sources, and optional components like leak checking and backtracing.

LANGUAGE: CMake
CODE:
set(swift_runtime_objc_sources
    ErrorObject.mm
    SwiftObject.mm
    SwiftValue.mm
    ReflectionMirrorObjC.mm
    ObjCRuntimeGetImageNameFromClass.mm)

set(swift_runtime_sources
    ../CompatibilityOverride/CompatibilityOverride.cpp
    AnyHashableSupport.cpp
    Array.cpp
    AutoDiffSupport.cpp
    Bincompat.cpp
    BytecodeLayouts.cpp
    Casting.cpp
    CrashReporter.cpp
    Demangle.cpp
    DynamicCast.cpp
    Enum.cpp
    EnvironmentVariables.cpp
    ErrorObjectCommon.cpp
    ErrorObjectNative.cpp
    Errors.cpp
    ErrorDefaultImpls.cpp
    Exception.cpp
    Exclusivity.cpp
    ExistentialContainer.cpp
    Float16Support.cpp
    FoundationSupport.cpp
    FunctionReplacement.cpp
    GenericMetadataBuilder.cpp
    Heap.cpp
    HeapObject.cpp
    ImageInspectionCommon.cpp
    ImageInspectionMachO.cpp
    ImageInspectionELF.cpp
    ImageInspectionCOFF.cpp
    ImageInspectionStatic.cpp
    ImageInspectionWasm.cpp
    SymbolInfo.cpp
    KeyPaths.cpp
    KnownMetadata.cpp
    LibPrespecialized.cpp
    Metadata.cpp
    MetadataLookup.cpp
    Numeric.cpp
    Once.cpp
    Paths.cpp
    Portability.cpp
    ProtocolConformance.cpp
    RefCount.cpp
    ReflectionMirror.cpp
    RuntimeInvocationsTracking.cpp
    SwiftDtoa.cpp
    SwiftTLSContext.cpp
    ThreadingError.cpp
    Tracing.cpp
    AccessibleFunction.cpp
    Win32.cpp)

----------------------------------------

TITLE: Implementing AnyGenerator with Factory Initializer in Swift
DESCRIPTION: This code snippet demonstrates a pattern that cannot be directly implemented in Swift due to limitations with initializers. It shows an attempt to create an AnyGenerator class with a factory initializer that returns a specific implementation.

LANGUAGE: swift
CODE:
class AnyGenerator<Element> : GeneratorType {
  init<
    WrappedGenerator: GeneratorType
  where
    WrappedGenerator.Element == Element
  >(wrapped: WrappedGenerator) -> AnyGenerator {
    return AnyGeneratorImpl(wrapped)
  }
  // other generator stuff
}

class AnyGeneratorImpl<WrappedGenerator: GeneratorType> :
    AnyGenerator<WrappedGenerator.Element> {
  var wrapped: WrappedGenerator
  init(wrapped: WrappedGenerator) {
    self.wrapped = wrapped
  }
  // other generator stuff
}

----------------------------------------

TITLE: Defining CBF Information Byte Structure
DESCRIPTION: Specifies the bit layout for the initial information byte in the CBF format, including version and machine word size.

LANGUAGE: plaintext
CODE:
   7   6   5   4   3   2   1   0
 ┌───────────────────────┬───────┐
 │ version               │ size  │
 └───────────────────────┴───────┘

----------------------------------------

TITLE: Demonstrating Incorrect Usage of Constraint Type in Swift Function Parameter
DESCRIPTION: This code snippet shows an incorrect use of a constraint type 'Collection' as a function parameter type. It illustrates the error that the ExistentialAny diagnostic group would catch, as 'Collection' should be prefixed with 'any' to indicate it's an existential type.

LANGUAGE: swift
CODE:
func sillyFunction(collection: Collection) { // error
  // ...
}

----------------------------------------

TITLE: Proposed Naming Convention for Enum Cases in Swift
DESCRIPTION: Illustrates the proposed naming convention for enum cases, using lowercaseCamelCase for cases without associated values.

LANGUAGE: swift
CODE:
enum ComparisonResult {
  case descending, same, ascending
}

enum Bool {
  case true, false
}

enum Optional<Wrapped> {
  case nil
  case init(_ some: Wrapped)
}

----------------------------------------

TITLE: Base Protocol Definition
DESCRIPTION: Defines FooProtocolBase with required method and property declarations including documentation comments.

LANGUAGE: swift
CODE:
protocol FooProtocolBase {
  func fooProtoFunc()
  func fooProtoFuncWithExtraIndentation1()
  func fooProtoFuncWithExtraIndentation2()
  static func fooProtoClassFunc()
  var fooProperty1: Int32 { get set }
  var fooProperty2: Int32 { get set }
  var fooProperty3: Int32 { get }
}

----------------------------------------

TITLE: Test Configuration Settings in PowerShell
DESCRIPTION: Configuration file used by build.ps1 to override test statuses in LLVM test suite. Contains lists of tests marked as xfail (expected failure) or skip, organized by failure categories with references to GitHub issues.

LANGUAGE: powershell
CODE:
# build.ps1 overrides the status of each test in this file when LLVM tests are run with lit.

xfail lldb-api :: lang/cpp/unique-types4/TestUniqueTypes4.py
xfail lldb-shell :: Recognizer/verbose_trap.test
# Additional test entries follow similar pattern...

----------------------------------------

TITLE: Demonstrating Partial Undefined Debug Values with Fragments in Swift SIL
DESCRIPTION: Illustrates how fragments can be used with undefined debug values to represent partially undefined struct fields.

LANGUAGE: swift
CODE:
... // pair = ?
debug_value %0 : $Int, var, name "pair", type $Pair, expr op_fragment:#Pair.a // pair.a = x
debug_value %0 : $Int, var, name "pair", type $Pair, expr op_fragment:#Pair.b // pair.b = x
... // pair = (x, x)
debug_value undef : $Pair, var, name "pair", expr op_fragment:#Pair.a // pair.a = <optimized out>
... // pair = (?, x)
debug_value undef : $Pair, var, name "pair" // pair = <optimized out>
... // pair = ?
debug_value %1 : $Int, var, name "pair", type $Pair, expr op_fragment:#Pair.a // pair.a = y
... // pair = (y, ?)

----------------------------------------

TITLE: Example Type Name Matching - Swift
DESCRIPTION: Examples showing how type name matching works with different patterns and special cases

LANGUAGE: swift
CODE:
"specialViewController" matches "MySpecialViewController"
"viewController" matches "MySpecialViewController"
"viewControllerCreator" matches "MySpecialViewController"

----------------------------------------

TITLE: Documenting Removed Function in Swift
DESCRIPTION: The function 'removedFunction()' has been removed from the 'Foo' class or module. This change is documented in the 'Foo.h' header file.

LANGUAGE: Swift
CODE:
// Foo(Foo.h): Func removedFunction() has been removed

----------------------------------------

TITLE: Installing Swift Features File
DESCRIPTION: Configures the installation of the generated features file into the Swift share directory.

LANGUAGE: cmake
CODE:
swift_install_in_component(
  FILES
    ${features_file_dest}
  DESTINATION
    "share/swift"
  COMPONENT
    compiler
)

----------------------------------------

TITLE: Opening Ninja Target Dependencies in Browser
DESCRIPTION: This command opens a web browser to view dependencies and rules for a specific Ninja target, in this case, the i386 iPhone simulator standard library.

LANGUAGE: bash
CODE:
ninja -t browse swift-stdlib-iphonesimulator-i386

----------------------------------------

TITLE: Removed Type Alias Declaration
DESCRIPTION: Records the removal of TypeAlias AnimalAttributeName from APINotesTest.h

LANGUAGE: swift
CODE:
APINotesTest(APINotesTest.h): TypeAlias AnimalAttributeName has been removed

----------------------------------------

TITLE: Variable Macro Declarations in Swift
DESCRIPTION: Declaration of computed Int32 properties representing macro-like values with get-only access.

LANGUAGE: Swift
CODE:
var MY_MACRO: Int32 { get }
var MACRO_DUP: Int32 { get }

----------------------------------------

TITLE: Adding Swift Observation Library Target
DESCRIPTION: Defines the swiftObservation library target with source files, compilation flags, dependencies, and installation settings. Includes experimental macro features and specific module dependencies.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftObservation ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  Locking.cpp
  Locking.swift
  Observable.swift
  ObservationRegistrar.swift
  ObservationTracking.swift
  ThreadLocal.cpp
  ThreadLocal.swift

  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    "-enable-experimental-feature" "Macros"
    "-enable-experimental-feature" "ExtensionMacros"
    -Xfrontend -disable-implicit-string-processing-module-import

  C_COMPILE_FLAGS
    ${swift_runtime_library_compile_flags}
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  SWIFT_MODULE_DEPENDS _Concurrency
  INSTALL_IN_COMPONENT stdlib

  MACCATALYST_BUILD_FLAVOR "zippered"
)

----------------------------------------

TITLE: Adding Swift Localization Unit Tests in CMake
DESCRIPTION: Adds unit test files for Swift localization and configures the test target with necessary libraries and compile definitions.

LANGUAGE: CMake
CODE:
add_swift_unittest(swiftLocalizationTests
  DefToStringsConverterTests.cpp
  SerializationTests.cpp)

target_link_libraries(swiftLocalizationTests
  PRIVATE
    swiftLocalization)

target_compile_definitions(swiftLocalizationTests PRIVATE
  SWIFTLIB_DIR=\"${SWIFTLIB_DIR}\")

----------------------------------------

TITLE: Using Proposed Case Initializers for Result in Swift
DESCRIPTION: Demonstrates how the proposed case initializers would be used to construct and pattern match Result values.

LANGUAGE: swift
CODE:
let success = Result(success: 1)
let error = Result(error: SillyError.JazzHands)

switch result {
case Result(success: let success):
  ...
case Result(error: let error):
  ...
}

----------------------------------------

TITLE: CIF Framework Opcode Structure
DESCRIPTION: Binary structure of the framework opcode containing count field.

LANGUAGE: text
CODE:
   7   6   5   4   3   2   1   0
 ┌───────┬───────────────────────┐
 │ 0   1 │ count                 │  framewk
 └───────┴───────────────────────┘

----------------------------------------

TITLE: Configuring SourceKit Dependencies and Installation
DESCRIPTION: Sets up runtime dependencies for SourceKit including BlocksRuntime and dispatch libraries. Configures installation paths and components for different platforms.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_HOST_DISPATCH)
  if(SWIFT_HOST_VARIANT_SDK STREQUAL "WINDOWS")
    set(SOURCEKIT_RUNTIME_DIR bin)
  else()
    set(SOURCEKIT_RUNTIME_DIR lib)
  endif()
  add_dependencies(sourcekit-inproc BlocksRuntime dispatch)
  if("${SWIFT_HOST_VARIANT_SDK}" MATCHES "OSX|WINDOWS")
    swift_install_in_component(FILES
      $<TARGET_FILE:dispatch>
      $<TARGET_FILE:BlocksRuntime>
      DESTINATION ${SOURCEKIT_RUNTIME_DIR}
      COMPONENT sourcekit-inproc)
  endif()
endif()

----------------------------------------

TITLE: Proposed Case Initializer Syntax for Result Enum in Swift
DESCRIPTION: Illustrates the proposed syntax for declaring enum cases as initializers, using the Result type as an example.

LANGUAGE: swift
CODE:
enum Result<Wrapped> {
  case init(success: Wrapped)
  case init(error: Error)
}

----------------------------------------

TITLE: Comparison Result Enumeration Definition
DESCRIPTION: Defines FooComparisonResult enum with ascending, same, and descending ordering cases using Int raw values.

LANGUAGE: swift
CODE:
enum FooComparisonResult : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }
  case orderedAscending
  case orderedSame
  case orderedDescending
}

----------------------------------------

TITLE: Suppressing Memory Leaks in Swift Build and LLVM Table Generation
DESCRIPTION: This configuration suppresses memory leak warnings for specific functions in the Swift build process and LLVM table generation. It targets the buildCompilation function, the llvm::TableGenMain function, and the llvm-tblgen tool.

LANGUAGE: plaintext
CODE:
leak:*buildCompilation*
leak:*llvm::TableGenMain*
leak:llvm-tblgen

----------------------------------------

TITLE: Building Swift Toolchain on Linux
DESCRIPTION: Command to build the Swift toolchain with optimizations, debug info, and assertions on Linux

LANGUAGE: Bash
CODE:
utils/build-script --release-debuginfo

----------------------------------------

TITLE: Special Casing for Greek Sigma in Unicode
DESCRIPTION: Specifies the conditional mapping for the Greek capital letter sigma, handling its final form differently.

LANGUAGE: Unicode
CODE:
03A3; 03C2; 03A3; 03A3; Final_Sigma; # GREEK CAPITAL LETTER SIGMA

----------------------------------------

TITLE: Protocol and Class Definitions
DESCRIPTION: Declarations of a documented class SameName, protocol SameNameProtocol, and protocol Superproto with required method.

LANGUAGE: Swift
CODE:
/// Awesome name.
class SameName {
}
protocol SameNameProtocol {
}
protocol Superproto {
  func lala()
}

----------------------------------------

TITLE: Setting Up Legacy Layout Copying in CMake for Swift
DESCRIPTION: Defines a CMake function to copy legacy layout files from source to build directory. The function handles different SDK platforms, architectures, and bootstrapping scenarios, setting up proper dependencies and installation targets.

LANGUAGE: cmake
CODE:
function(add_layout_copying sdk arch bootstrapping)
  set(platform "${SWIFT_SDK_${sdk}_LIB_SUBDIR}")

  set(input "${SWIFT_SOURCE_DIR}/stdlib/toolchain/legacy_layouts/${platform}/layouts-${arch}.yaml")
  get_bootstrapping_path(lib_dir ${SWIFTLIB_DIR} "${bootstrapping}")
  set(output "${lib_dir}/${platform}/layouts-${arch}.yaml")

  if(NOT "${bootstrapping}" STREQUAL "")
    set(target_suffix "-bootstrapping${bootstrapping}")
  endif()
  set(copy_target "copy-legacy-layouts-${platform}-${arch}${target_suffix}")
  set(stdlib_target "swift-stdlib-${platform}-${arch}")

  if(EXISTS "${input}")
    add_custom_command(
      OUTPUT "${output}"
      DEPENDS "${input}"
      COMMAND "${CMAKE_COMMAND}" -E copy "${input}" "${output}")

    add_custom_target(
      "${copy_target}"
      DEPENDS "${output}"
      SOURCES "${input}")

    if(TARGET "${stdlib_target}")
      add_dependencies("${stdlib_target}" "${copy_target}")
    endif()

    swift_install_in_component(
      FILES "${input}"
      DESTINATION "lib/swift/${platform}/"
      COMPONENT compiler)
  else()
    add_custom_target("${copy_target}")
  endif()

  add_dependencies("copy-legacy-layouts" "${copy_target}")

endfunction()

----------------------------------------

TITLE: Building Swift Toolchain Locally
DESCRIPTION: This command builds a Swift toolchain locally, which can be used for debugging or when a nightly toolchain is not available.

LANGUAGE: bash
CODE:
./utils/build-toolchain com.yourname

----------------------------------------

TITLE: Configuring Swift Runtime Library Compilation Flags
DESCRIPTION: Adds include paths for Swift stdlib and core headers to the runtime library compilation flags.

LANGUAGE: cmake
CODE:
list(APPEND swift_runtime_library_compile_flags -I${SWIFT_SOURCE_DIR}/stdlib/include -I${SWIFT_SOURCE_DIR}/include)

----------------------------------------

TITLE: Checking C++ Interop Version in Clang Importer
DESCRIPTION: Example of how to check C++ interoperability version within the Clang Importer implementation to guard breaking changes.

LANGUAGE: cpp
CODE:
// Inside of Clang Importer (Impl is `ClangImporter::Impl`)
if (Impl.isCxxInteropCompatVersionAtLeast(version::getUpcomingCxxInteropCompatVersion())) {
  // ... breaking change ...
}

----------------------------------------

TITLE: Signalled Message Format for Swift Compiler Tasks
DESCRIPTION: Example of a 'signalled' message for abnormal task termination. Includes error details, signal information, and process statistics.

LANGUAGE: json
CODE:
{
 "kind": "signalled",
 "name": "compile",
 "pid": 12345,
 "error-message": "Segmentation fault: 11",
 "signal": 4,
 "process": {
   "real_pid": 12345,
   "usage": {
     "utime": 22740,
     "stime": 91107,
     "maxrss": 7745536
   }
  }
}

----------------------------------------

TITLE: Configuring Compiler Flags for Swift Concurrency Library
DESCRIPTION: Sets up compiler flags for building the Swift Concurrency library, including platform-specific settings and feature flags.

LANGUAGE: CMake
CODE:
set(SWIFT_RUNTIME_CONCURRENCY_C_FLAGS)
set(SWIFT_RUNTIME_CONCURRENCY_SWIFT_FLAGS -I${CMAKE_CURRENT_SOURCE_DIR}/InternalShims)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  list(APPEND swift_concurrency_private_link_libraries
    Synchronization
    mincore.lib # For QueryInterruptTime()
  )
endif()

if(NOT swift_concurrency_async_fp_mode)
  set(swift_concurrency_async_fp_mode "always")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  list(APPEND SWIFT_RUNTIME_CONCURRENCY_C_FLAGS
    "-fswift-async-fp=${swift_concurrency_async_fp_mode}")
  list(APPEND SWIFT_RUNTIME_CONCURRENCY_SWIFT_FLAGS
    "-Xfrontend"
    "-swift-async-frame-pointer=${swift_concurrency_async_fp_mode}")
else()
  list(APPEND SWIFT_RUNTIME_CONCURRENCY_C_FLAGS "-fswift-async-fp=never")
endif()

----------------------------------------

TITLE: Compiling Swift Generics PDF using make
DESCRIPTION: Uses the make command to compile the Swift Generics PDF from TeX source. This method runs pdflatex and bibtex in the correct order to generate the final document with bibliography, index, and cross-references.

LANGUAGE: bash
CODE:
cd docs/Generics/
make

----------------------------------------

TITLE: Class Inheritance and Protocol Conformance in Swift
DESCRIPTION: Shows a derived class that inherits from a base class and conforms to a protocol, implementing required methods and properties.

LANGUAGE: swift
CODE:
class FooClassDerived : FooClassBase, FooProtocolDerived {
  var fooProperty1: Int32
  var fooProperty2: Int32
  var fooProperty3: Int32 { get }
  func fooInstanceFunc0()
  func fooProtoFunc()
  class func fooProtoClassFunc()
}

----------------------------------------

TITLE: White Space Character Definitions
DESCRIPTION: Defines Unicode code point ranges for whitespace characters including spaces, line separators, and format controls.

LANGUAGE: unicode
CODE:
0009..000D    ; White_Space # Cc   [5] <control-0009>..<control-000D>
0020          ; White_Space # Zs       SPACE
0085          ; White_Space # Cc       <control-0085>
00A0          ; White_Space # Zs       NO-BREAK SPACE

----------------------------------------

TITLE: Configuring Package.el for MELPA in Emacs
DESCRIPTION: This snippet sets up package.el to use MELPA and GNU package archives. It should be included in the Emacs startup file and executed before any other code.

LANGUAGE: elisp
CODE:
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
(package-initialize)

----------------------------------------

TITLE: Language-Sensitive Casing for Lithuanian in Unicode
DESCRIPTION: Defines special casing rules for Lithuanian, handling the dot above in lowercase i when followed by accents.

LANGUAGE: Unicode
CODE:
0307; 0307; ; ; lt After_Soft_Dotted; # COMBINING DOT ABOVE

----------------------------------------

TITLE: Defining Protocol and Subclass in Swift
DESCRIPTION: This snippet defines a protocol named Superproto with a single method requirement, and a class MyLittleCFType that inherits from _CFObject.

LANGUAGE: Swift
CODE:
protocol Superproto {
  func lala()
}
class MyLittleCFType : _CFObject {
}

----------------------------------------

TITLE: Configuring Swift Build Environment
DESCRIPTION: Sets up initial CMake configuration including minimum version, policies, and module paths

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.19.6)

if(POLICY CMP0068)
  cmake_policy(SET CMP0068 OLD)
endif()

if(POLICY CMP0067)
  cmake_policy(SET CMP0067 NEW)
endif()

if(POLICY CMP0076)
  cmake_policy(SET CMP0076 NEW)
endif()

list(APPEND CMAKE_MODULE_PATH 
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

set(CMAKE_DISABLE_IN_SOURCE_BUILD YES)

----------------------------------------

TITLE: Example Cross Repository Test Request
DESCRIPTION: Example showing how to request testing of multiple related pull requests across Swift repositories using @swift-ci commands.

LANGUAGE: markdown
CODE:
Please test with following pull request:\nhttps://github.com/swiftlang/swift/pull/4574\n\n@swift-ci Please test Linux platform

----------------------------------------

TITLE: Conditional Printing in Swift
DESCRIPTION: This code snippet demonstrates a simple conditional statement in Swift. It initializes a constant 'x' with the value 42, then checks if 'x' is greater than 0. If the condition is true, it prints 'positive' to the console.

LANGUAGE: swift
CODE:
let x = 42
if x > 0 {
  print("positive")
}

----------------------------------------

TITLE: Adding Swift Stdlib Stubs Library Target in CMake
DESCRIPTION: Defines the swiftStdlibStubs library target, specifying sources, compilation flags, and installation components. This target represents the core Swift standard library stubs.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftStdlibStubs
                  OBJECT_LIBRARY
                    ${swift_stubs_sources}
                    ${swift_stubs_objc_sources}
                  GYB_SOURCES
                    ${swift_stubs_gyb_sources}
                  C_COMPILE_FLAGS
                    ${swift_stubs_c_compile_flags}
                  LINK_FLAGS
                    ${SWIFT_RUNTIME_CORE_LINK_FLAGS}
                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
                  INSTALL_IN_COMPONENT
                    stdlib)

----------------------------------------

TITLE: Configuring Swift B&I Build Detection
DESCRIPTION: Detects and configures build settings for Apple's B&I (Build and Integration) system, distinguishing between OS and Xcode builds.

LANGUAGE: cmake
CODE:
set(SWIFT_BNI_OS_BUILD FALSE)
set(SWIFT_BNI_XCODE_BUILD FALSE)
if(DEFINED ENV{RC_XBS})
  if((NOT DEFINED ENV{RC_XCODE} OR NOT "$ENV{RC_XCODE}") AND (NOT DEFINED ENV{RC_PLAYGROUNDS} OR NOT "$ENV{RC_PLAYGROUNDS}"))
    set(SWIFT_BNI_OS_BUILD TRUE)
  else()
    set(SWIFT_BNI_XCODE_BUILD TRUE)
  endif()
endif()

----------------------------------------

TITLE: C String Interoperability APIs
DESCRIPTION: String initialization and conversion methods for C string interoperability

LANGUAGE: swift
CODE:
extension String {
  init(cString nulTerminatedUTF8: UnsafePointer<CChar>)
  
  init<Encoding: UnicodeEncoding>(
    cString nulTerminatedCodeUnits: UnsafePointer<Encoding.CodeUnit>,
    encoding: Encoding)
    
  func withCString<Result>(
    _ body: (UnsafePointer<CChar>) throws -> Result) rethrows -> Result
}

----------------------------------------

TITLE: Building and Installing Swift Standard Library for Android on Windows
DESCRIPTION: This snippet shows the process of building and installing the Swift standard library for Android using CMake and Ninja on Windows. It includes setting the build type, install prefix, and various toolchain-related parameters.

LANGUAGE: cmd
CODE:
md S:\b\a\stdlib
cd S:\b\a\stdlib
cmake -C S:\swift-build\cmake\caches\android-armv7.cmake                                                              ^
  -C S:\swift-build\cmake\caches\swift-stdlib-android-armv7.cmake                                                     ^
  -G Ninja                                                                                                            ^
  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                   ^
  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr           ^
  -DCMAKE_TOOLCHAIN_FILE=S:\swift-build\cmake\toolchains\android.toolchain.cmake                                      ^
  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr       ^
  -DLLVM_DIR=S:/b/a/llvm/lib/cmake/llvm                                                                               ^
  -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin ^
  S:/swift
ninja
ninja install

----------------------------------------

TITLE: Creating Image Registration Objects for Different Object Formats in CMake
DESCRIPTION: Creates separate image registration object libraries for ELF, COFF, and WASM object formats, with specific compile flags and target SDKs.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftImageRegistrationObjectELF
                  OBJECT_LIBRARY IS_STDLIB IS_STDLIB_CORE
                  SwiftRT-ELF-WASM.cpp
                  C_COMPILE_FLAGS
                    ${SWIFT_RUNTIME_CORE_CXX_FLAGS}
                    ${swift_enable_backtracing}
                  C_COMPILE_FLAGS_LINUX -fno-lto
                  LINK_FLAGS ${SWIFT_RUNTIME_CORE_LINK_FLAGS}
                  TARGET_SDKS ${ELFISH_SDKS}
                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
                  INSTALL_IN_COMPONENT none)

add_swift_target_library(swiftImageRegistrationObjectCOFF
                  OBJECT_LIBRARY IS_STDLIB IS_STDLIB_CORE
                  SwiftRT-COFF.cpp
                  C_COMPILE_FLAGS
                    ${SWIFT_RUNTIME_CORE_CXX_FLAGS}
                    ${swift_enable_backtracing}
                  LINK_FLAGS ${SWIFT_RUNTIME_CORE_LINK_FLAGS}
                  TARGET_SDKS ${COFF_SDKS}
                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
                  INSTALL_IN_COMPONENT none)

add_swift_target_library(swiftImageRegistrationObjectWASM
                  OBJECT_LIBRARY IS_STDLIB IS_STDLIB_CORE
                  SwiftRT-ELF-WASM.cpp
                  C_COMPILE_FLAGS
                    ${SWIFT_RUNTIME_CORE_CXX_FLAGS}
                    ${swift_enable_backtracing}
                  LINK_FLAGS ${SWIFT_RUNTIME_CORE_LINK_FLAGS}
                  TARGET_SDKS ${WASM_SDKS}
                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
                  INSTALL_IN_COMPONENT none)

----------------------------------------

TITLE: Compiling Swift Generics PDF using latexmk
DESCRIPTION: Uses the latexmk command to compile the Swift Generics PDF from TeX source. This modern alternative runs pdflatex and bibtex until a fixed point is reached, ensuring all references are resolved.

LANGUAGE: bash
CODE:
cd docs/Generics/
latexmk -pdf generics.tex

----------------------------------------

TITLE: Demangling Swift Function with C Convention
DESCRIPTION: This snippet shows a Swift function mangling and its demangled form. The function takes no parameters and returns an Int, using the C calling convention.

LANGUAGE: Swift
CODE:
$s3tmp1fyySiyXzC9_ZTSPFmvEF ---> tmp.f(@convention(c, mangledCType: "_ZTSPFmvE") () -> Swift.Int) -> ()

----------------------------------------

TITLE: Defining Visarga Characters in Unicode
DESCRIPTION: Specifies Unicode code points for characters classified as Visarga in various Indic scripts.

LANGUAGE: Unicode
CODE:
0903          ; Visarga # Mc       DEVANAGARI SIGN VISARGA
0983          ; Visarga # Mc       BENGALI SIGN VISARGA
0A03          ; Visarga # Mc       GURMUKHI SIGN VISARGA
0A83          ; Visarga # Mc       GUJARATI SIGN VISARGA
0B03          ; Visarga # Mc       ORIYA SIGN VISARGA
0C03          ; Visarga # Mc       TELUGU SIGN VISARGA
0C83          ; Visarga # Mc       KANNADA SIGN VISARGA
0D03          ; Visarga # Mc       MALAYALAM SIGN VISARGA
0D83          ; Visarga # Mc       SINHALA SIGN VISARGAYA
0F7F          ; Visarga # Mc       TIBETAN SIGN RNAM BCAD

----------------------------------------

TITLE: Cloning and Checking Out IWYU Repository
DESCRIPTION: Commands to clone the IWYU repository and checkout the appropriate branch based on Clang version.

LANGUAGE: bash
CODE:
mkdir -p iwyu/src
git clone https://github.com/include-what-you-use/include-what-you-use.git iwyu/src
build/Ninja-ReleaseAssert/llvm-macosx-x86_64/bin/clang --version
git -C iwyu/src checkout clang_10

----------------------------------------

TITLE: Swift Test Configuration Directives
DESCRIPTION: Test configuration directives that mark specific Swift tests as expected failures (xfail) or skipped (skip) when running on Android aarch64 platform. Each directive specifies the test path and its override status.

LANGUAGE: text
CODE:
xfail Swift(android-aarch64) :: ClangImporter/availability_custom_domains.swift
xfail Swift(android-aarch64) :: ClangImporter/clang_builtin_pcm.swift
# ...additional test entries...
skip Swift(android-aarch64) :: Driver/parseable_output.swift
skip Swift(android-aarch64) :: Driver/parseable_output_unicode.swift

----------------------------------------

TITLE: Swift Lit Site Configuration Function
DESCRIPTION: Function to configure lit test site files for Swift test execution. Takes source path, destination path, and installed name as parameters.

LANGUAGE: cmake
CODE:
function(swift_configure_lit_site_cfg source_path destination_path installed_name)
  if (CMAKE_CFG_INTDIR STREQUAL ".")
    set(SWIFT_BUILD_MODE ".")
  else ()
    set(SWIFT_BUILD_MODE "%(build_mode)s")
  endif ()

  string(REPLACE ${CMAKE_CFG_INTDIR} ${SWIFT_BUILD_MODE} LLVM_TOOLS_DIR ${LLVM_TOOLS_BINARY_DIR})
  string(REPLACE ${CMAKE_CFG_INTDIR} ${SWIFT_BUILD_MODE} LLVM_LIBS_DIR  ${LLVM_LIBRARY_DIR})

  if (XCODE)
    string(REPLACE ${CMAKE_CFG_INTDIR} Debug LIT_SWIFTLIB_DIR ${SWIFTLIB_DIR})
  else ()
    set(LIT_SWIFTLIB_DIR ${SWIFTLIB_DIR})
  endif ()

  configure_file("${source_path}" "${destination_path}" @ONLY)

  if(NOT "${installed_name}" STREQUAL "")
    swift_install_in_component(FILES "${destination_path}"
                               RENAME "${installed_name}"
                               DESTINATION "share/swift/testsuite"
                               COMPONENT testsuite-tools)
  endif()
endfunction()

----------------------------------------

TITLE: Adding Swift Basic Unit Tests in CMake
DESCRIPTION: Configures the SwiftBasicTests target by specifying all the source files for the unit tests. This includes both manually written test files and generated test files.

LANGUAGE: CMake
CODE:
add_swift_unittest(SwiftBasicTests
  BlotMapVectorTest.cpp
  BlocklistTest.cpp
  CacheTest.cpp
  ClangImporterOptionsTest.cpp
  ClusteredBitVectorTest.cpp
  DemangleTest.cpp
  DiverseStackTest.cpp
  EditorPlaceholderTest.cpp
  EnumMapTest.cpp
  EncodedSequenceTest.cpp
  ExponentialGrowthAppendingBinaryByteStreamTests.cpp
  FileSystemTest.cpp
  FileTypes.cpp
  FixedBitSetTest.cpp
  FrozenMultiMapTest.cpp
  ImmutablePointerSetTest.cpp
  JSONSerialization.cpp
  OptionSetTest.cpp
  Options.cpp
  OwnedStringTest.cpp
  MultiMapCacheTest.cpp
  PointerIntEnumTest.cpp
  PrefixMapTest.cpp
  RangeTest.cpp
  SmallMapTest.cpp
  SourceManagerTest.cpp
  StableHasher.cpp
  STLExtrasTest.cpp
  StringExtrasTest.cpp
  SuccessorMapTest.cpp
  TaggedUnionTest.cpp
  ThreadSafeRefCntPointerTest.cpp
  TransformRangeTest.cpp
  TypeLookupError.cpp
  UnicodeTest.cpp
  ${generated_tests}
  )

----------------------------------------

TITLE: Minimal Freestanding Stdlib Test
DESCRIPTION: Example showing how to test the minimal freestanding stdlib on macho using a snapshot toolchain.

LANGUAGE: markdown
CODE:
preset=stdlib_S_standalone_minimal_macho_x86_64,build,test\n@swift-ci please test with toolchain and preset

----------------------------------------

TITLE: Regex Parser Configuration
DESCRIPTION: Adds compiler definition for regex parser when building within compiler.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER)
  target_compile_definitions(swiftParse
    PUBLIC
    SWIFT_BUILD_REGEX_PARSER_IN_COMPILER
  )
endif()

----------------------------------------

TITLE: Adding Optional Type Annotation in Swift
DESCRIPTION: Example of adding 'as Optional' to handle a value that has been made non-optional in an updated API.

LANGUAGE: swift
CODE:
// FIXME: example

----------------------------------------

TITLE: Mangling Functions
DESCRIPTION: Rules for mangling function names and signatures

LANGUAGE: text
CODE:
entity-spec ::= label-list type file-discriminator? 'fC'      // allocating constructor
entity-spec ::= label-list type file-discriminator? 'fc'      // non-allocating constructor
entity-spec ::= decl-name label-list function-signature generic-signature? 'F'    // function

----------------------------------------

TITLE: Configuring Swift C++ Standard Library Dependencies
DESCRIPTION: Sets up conditional dependencies for the C++ Standard Library overlay, including Darwin and Builtin_float dependencies based on build flags.

LANGUAGE: cmake
CODE:
set(swift_cxxstdlib_darwin_dependencies)
if(SWIFT_BUILD_STDLIB AND SWIFT_BUILD_SDK_OVERLAY)
  set(swift_cxxstdlib_darwin_dependencies Darwin)
endif()

set(swift_cxxstdlib_dependencies)
if(NOT DEFINED SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT OR NOT SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT)
  set(swift_cxxstdlib_dependencies _Builtin_float)
endif()

----------------------------------------

TITLE: Swift Type Complexity Error
DESCRIPTION: Example of a Swift compiler error message indicating that type expression nesting is too complex for the compiler to process. This typically occurs when there are too many nested generic parameters or type operations.

LANGUAGE: swift
CODE:
type metadata for ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((<<too complex>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

----------------------------------------

TITLE: Defining ID_Continue Characters
DESCRIPTION: Characters that can continue an identifier. Generated from ID_Start + Mn + Mc + Nd + Pc + Other_ID_Continue - Pattern_Syntax - Pattern_White_Space

LANGUAGE: Unicode
CODE:
0030..0039    ; ID_Continue
0041..005A    ; ID_Continue
005F          ; ID_Continue
0061..007A    ; ID_Continue
00AA          ; ID_Continue
00B5          ; ID_Continue
00B7          ; ID_Continue
00BA          ; ID_Continue
00C0..00D6    ; ID_Continue
00D8..00F6    ; ID_Continue
00F8..01BA    ; ID_Continue
01BB          ; ID_Continue
01BC..01BF    ; ID_Continue
01C0..01C3    ; ID_Continue
01C4..0293    ; ID_Continue
# ... (truncated for brevity)

----------------------------------------

TITLE: Building Swift with Local Toolchain in Hosttools Mode
DESCRIPTION: This command builds Swift using a locally built toolchain in 'hosttools' mode, useful for iterating on changes without installing a nightly toolchain.

LANGUAGE: bash
CODE:
TOOLCHAINS=com.yourname.YYYYMMDD ./utils/build-script --bootstrapping=hosttools

----------------------------------------

TITLE: Conditional Configuration of LLDB-check-expect in CMake for Swift
DESCRIPTION: This snippet conditionally configures and copies the 'lldb-check-expect' file if LLDB is enabled. It uses CMake's if statement, configure_file, and file commands with specific file permissions.

LANGUAGE: cmake
CODE:
if (LLDB_ENABLE)
  configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/lldb-check-expect.in
    ${CMAKE_CURRENT_BINARY_DIR}/lldb-check-expect
    @ONLY)

  file(COPY ${CMAKE_CURRENT_BINARY_DIR}/lldb-check-expect
    DESTINATION "${SWIFT_RUNTIME_OUTPUT_INTDIR}"
    FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
    GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
endif()

----------------------------------------

TITLE: Class Definition - PhotoBracketSettings
DESCRIPTION: Defines a photo settings class that inherits from PhotoSettings with multiple convenience initializers for different format types and settings.

LANGUAGE: swift
CODE:
@objc open class PhotoBracketSettings: PhotoSettings {
    @objc convenience init?(rawPixelFormatType: Int32, processedFormat: Int32)
    @objc convenience init?(number: Int32)
    @objc convenience init?(format: Int32)
    @objc init?(cake: Int32)
}

----------------------------------------

TITLE: Adding Swift Macro Library Function Definition in CMake
DESCRIPTION: Defines a CMake function that creates a new Swift macro library. Handles library creation, rpath configuration, and installation setup with platform-specific adjustments.

LANGUAGE: cmake
CODE:
function(add_swift_macro_library name)
  set(ASML_SOURCES ${ARGN})

  # Add the library.
  add_pure_swift_host_library(${name} SHARED
    PACKAGE_NAME Toolchain
    ${ASML_SOURCES})

  # If we don't have the Swift swift parser, bail out, because the above
  # add_pure_swift_host_library did nothing.
  if (NOT SWIFT_BUILD_SWIFT_SYNTAX)
    return()
  endif()

  # Add rpath to 'lib/{platform}'
  file(RELATIVE_PATH relpath_to_lib
    "${SWIFT_HOST_PLUGINS_DEST_DIR}"
    "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}"
  )
  _set_pure_swift_link_flags(${name} "${relpath_to_lib}")

  # Add rpath to 'lib/host'
  if(SWIFT_HOST_VARIANT_SDK MATCHES "LINUX|ANDROID|OPENBSD|FREEBSD")
    set_property(TARGET ${name}
      APPEND PROPERTY INSTALL_RPATH "$ORIGIN/..")
  endif()

  # Install into the plugin directory.
  set_target_properties(${name}
    PROPERTIES
      ARCHIVE_OUTPUT_DIRECTORY "${SWIFT_HOST_PLUGINS_DEST_DIR}"
      LIBRARY_OUTPUT_DIRECTORY "${SWIFT_HOST_PLUGINS_DEST_DIR}"
  )

  set(destination_dir "lib${LLVM_LIBDIR_SUFFIX}/swift/host/plugins")

  swift_install_in_component(TARGETS ${name}
    RUNTIME
      DESTINATION bin
      COMPONENT compiler
    LIBRARY
      DESTINATION "${destination_dir}"
      COMPONENT compiler
    ARCHIVE
      DESTINATION "${destination_dir}"
      COMPONENT compiler)

  # Export this macro plugin target.
  set_property(GLOBAL APPEND PROPERTY SWIFT_MACRO_PLUGINS ${name})
endfunction()

----------------------------------------

TITLE: macOS CMake Configuration for Windows Cross-compilation
DESCRIPTION: CMake configuration options for building Swift runtime on macOS targeting Windows. Specifies compiler settings, tool paths, and SDK targets.

LANGUAGE: bash
CODE:
--extra-cmake-options=-DSWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER=FALSE,\
-DCMAKE_AR=<path to llvm-ar>,\
-DCMAKE_RANLIB=<path to llvm-ranlib>,\
-DSWIFT_SDKS='OSX;WINDOWS'

----------------------------------------

TITLE: Configuring GYB Line Directives for Windows/Unix Systems
DESCRIPTION: Sets platform-specific line directive formatting for GYB code generation tool based on host system (Windows vs non-Windows).

LANGUAGE: cmake
CODE:
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(SWIFT_GYB_FLAGS --line-directive "^\"#line %(line)d \\\"%(file)s\\\"^\"")
else()
  set(SWIFT_GYB_FLAGS --line-directive "'#line" "%(line)d" "\"%(file)s\"'")
endif()

----------------------------------------

TITLE: Adding Swift Compiler Module in CMake
DESCRIPTION: Function to add a Swift compiler module target and register it globally. Creates a custom target and configures source files and dependencies.

LANGUAGE: cmake
CODE:
function(add_swift_compiler_module module)
  cmake_parse_arguments(ALSM
                        ""
                        ""
                        "DEPENDS;SOURCES"
                        ${ARGN})
  set(raw_sources ${ALSM_SOURCES} ${ALSM_UNPARSED_ARGUMENTS})

  set(target_name "SwiftModule${module}")

  add_custom_target(
      ${target_name}
      COMMENT "swift compiler module ${module}")

  swift_compiler_sources(${module} ${raw_sources})

  set_property(TARGET ${target_name} PROPERTY module_name ${module})
  set_property(TARGET ${target_name} PROPERTY module_depends ${ALSM_DEPENDS})

  get_property(modules GLOBAL PROPERTY swift_compiler_modules)
  set_property(GLOBAL PROPERTY swift_compiler_modules ${modules} ${module})
endfunction()

----------------------------------------

TITLE: Dependency Chain Example
DESCRIPTION: Example showing a chain of dependency requests in the Swift compiler's evaluation system.

LANGUAGE: text
CODE:
TypeCheckSourceFileRequest(File.swift) -> ... -> DirectLookupRequest(Foo, "bar")

----------------------------------------

TITLE: Defining Source Files for Swift Concurrency Library
DESCRIPTION: Lists the C++ and Swift source files that make up the Swift Concurrency library, including core functionality and various async sequence implementations.

LANGUAGE: CMake
CODE:
set(SWIFT_RUNTIME_CONCURRENCY_C_SOURCES
  ../CompatibilityOverride/CompatibilityOverride.cpp
  Actor.cpp
  AsyncLet.cpp
  Clock.cpp
  GlobalExecutor.cpp
  ConcurrencyHooks.cpp
  EmbeddedSupport.cpp
  Error.cpp
  ExecutorBridge.cpp
  ExecutorChecks.cpp
  Setup.cpp
  Task.cpp
  TaskAlloc.cpp
  TaskStatus.cpp
  TaskGroup.cpp
  TaskLocal.cpp
  ThreadingError.cpp
  TracingSignpost.cpp
  AsyncStream.cpp
  linker-support/magic-symbols-for-install-name.c
)

set(SWIFT_RUNTIME_CONCURRENCY_SWIFT_SOURCES
  Actor.swift
  AsyncLet.swift
  CheckedContinuation.swift
  Errors.swift
  Executor.swift
  ExecutorBridge.swift
  ExecutorAssertions.swift
  AsyncCompactMapSequence.swift
  AsyncDropFirstSequence.swift
  AsyncDropWhileSequence.swift
  AsyncFilterSequence.swift
  AsyncFlatMapSequence.swift
  AsyncIteratorProtocol.swift
  AsyncMapSequence.swift
  AsyncPrefixSequence.swift
  AsyncPrefixWhileSequence.swift
  AsyncSequence.swift
  AsyncThrowingCompactMapSequence.swift
  AsyncThrowingDropWhileSequence.swift
  AsyncThrowingFilterSequence.swift
  AsyncThrowingFlatMapSequence.swift
  AsyncThrowingMapSequence.swift
  AsyncThrowingPrefixWhileSequence.swift
  PartialAsyncTask.swift
  GlobalActor.swift
  GlobalConcurrentExecutor.swift
  MainActor.swift
  PriorityQueue.swift
  SourceCompatibilityShims.swift
  Task.swift
  Task+PriorityEscalation.swift
  Task+TaskExecutor.swift
  TaskCancellation.swift
  TaskGroup.swift
  TaskGroup+Embedded.swift
  DiscardingTaskGroup.swift
  TaskLocal.swift
  TaskSleep.swift
  AsyncStreamBuffer.swift
  AsyncStream.swift
  AsyncThrowingStream.swift
  Deque/_DequeBuffer.swift
  Deque/_DequeBufferHeader.swift
  Deque/_DequeSlot.swift
  Deque/_UnsafeWrappedBuffer.swift
  Deque/Compatibility.swift
  Deque/Deque+Storage.swift
  Deque/Deque+UnsafeHandle.swift
  Deque/Deque.swift
  Deque/Deque+Codable.swift
  Deque/Deque+Collection.swift
  Deque/Deque+CustomDebugStringConvertible.swift
  Deque/Deque+CustomReflectable.swift
  Deque/Deque+CustomStringConvertible.swift
  Deque/Deque+Equatable.swift
  Deque/Deque+ExpressibleByArrayLiteral.swift
  Deque/Deque+Extras.swift
  Deque/Deque+Hashable.swift
  Deque/Deque+Testing.swift
  Deque/UnsafeMutableBufferPointer+Utilities.swift
  Clock.swift
  ContinuousClock.swift
  SuspendingClock.swift
  TaskSleepDuration.swift
  DummyExecutor.swift
  CooperativeExecutor.swift
  PlatformExecutorDarwin.swift
  PlatformExecutorLinux.swift
  PlatformExecutorWindows.swift
)

----------------------------------------

TITLE: Swift Benchmark Template
DESCRIPTION: Template for creating new Swift benchmark tests with required structure and components

LANGUAGE: swift
CODE:
// YourTestName benchmark
//
// rdar://problem/00000000
import TestsUtils

public let benchmarks = [
  BenchmarkInfo(
    name: "YourTestName",
    runFunction: run_YourTestName,
    tags: [.regression])
]

@inline(never)
public func run_YourTestName(n: Int) {
    # Declare variables

    for i in 1...n {
        # Perform work

        # Verify work was done; break otherwise
    }

    # Assert with CheckResults that work was done
}

----------------------------------------

TITLE: Defining Special Case Folding for Latin Capital Letter I
DESCRIPTION: Specifies a special case folding for the Latin capital letter I, used in Turkic languages.

LANGUAGE: Unicode
CODE:
0049; T; 0131; # LATIN CAPITAL LETTER I

----------------------------------------

TITLE: Defining Grapheme_Extend Characters
DESCRIPTION: Characters that can extend a grapheme cluster. Generated from Me + Mn + Other_Grapheme_Extend

LANGUAGE: Unicode
CODE:
0300..036F    ; Grapheme_Extend
0483..0487    ; Grapheme_Extend
0488..0489    ; Grapheme_Extend
0591..05BD    ; Grapheme_Extend
05BF          ; Grapheme_Extend
05C1..05C2    ; Grapheme_Extend
05C4..05C5    ; Grapheme_Extend
05C7          ; Grapheme_Extend
0610..061A    ; Grapheme_Extend
064B..065F    ; Grapheme_Extend
0670          ; Grapheme_Extend
06D6..06DC    ; Grapheme_Extend
06DF..06E4    ; Grapheme_Extend
06E7..06E8    ; Grapheme_Extend
06EA..06ED    ; Grapheme_Extend
# ... (truncated for brevity)

----------------------------------------

TITLE: Viewing Allocation History in macOS
DESCRIPTION: Command to use the malloc_history tool on macOS to show the history of malloc and free calls for a particular pointer.

LANGUAGE: sh
CODE:
malloc_history YourProcessName 0x12345678

----------------------------------------

TITLE: Configuring Swift Standard Library Collection Unit Test Library in CMake
DESCRIPTION: Sets up the swiftStdlibCollectionUnittest library with source files, module dependencies, and compilation flags. This configuration is used to build the unit test library for Swift's standard library collections.

LANGUAGE: CMake
CODE:
set(swift_stdlib_unittest_compile_flags)

add_swift_target_library(swiftStdlibCollectionUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed the first.  Module name is inferred from the
  # filename.
  StdlibCollectionUnittest.swift

  CheckCollectionInstance.swift
  CheckCollectionType.swift
  CheckMutableCollectionType.swift
  CheckRangeReplaceableCollectionType.swift
  CheckRangeReplaceableSliceType.swift
  CheckSequenceInstance.swift
  CheckSequenceType.swift
  COWLoggingArray.swift
  LoggingWrappers.swift
  MinimalCollections.swift
  RangeSelection.swift
  WriteBackMutableSlice.swift

  SWIFT_MODULE_DEPENDS StdlibUnittest
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT
  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Cross-Compiling Swift-Inspect for Android on Windows
DESCRIPTION: Batch script to cross-compile swift-inspect for Android on Windows. It sets up environment variables and uses Swift Package Manager with specific parameters for Android compilation.

LANGUAGE: cmd
CODE:
set ANDROID_ARCH=aarch64
set ANDROID_API_LEVEL=29
set ANDROID_CLANG_VERSION=17.0.2
set ANDROID_NDK_ROOT=C:\Android\android-sdk\ndk\26.3.11579264
set SDKROOT_ANDROID=%LocalAppData%\Programs\Swift\Platforms\0.0.0\Android.platform\Developer\SDKs\Android.sdk
swift build --triple %ANDROID_ARCH%-unknown-linux-android%ANDROID_API_LEVEL% ^
    --sdk %ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\sysroot ^
    -Xswiftc -sdk -Xswiftc %SDKROOT_ANDROID% ^
    -Xswiftc -sysroot -Xswiftc %ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\sysroot ^
    -Xswiftc -I -Xswiftc %SDKROOT_ANDROID%\usr\include ^
    -Xswiftc -Xclang-linker -Xswiftc -resource-dir -Xswiftc -Xclang-linker -Xswiftc %ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\lib\clang\%ANDROID_CLANG_VERSION% ^
    -Xlinker -L%ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\lib\clang\%ANDROID_CLANG_VERSION%\lib\linux\%ANDROID_ARCH% ^
    -Xcc -I%SDKROOT_ANDROID%\usr\include\swift\SwiftRemoteMirror ^
    -Xlinker %SDKROOT_ANDROID%\usr\lib\swift\android\%ANDROID_ARCH%\libswiftRemoteMirror.so

----------------------------------------

TITLE: Configuring API Notes for C++ Standard Library
DESCRIPTION: Sets up directory and copy commands for C++ Standard Library API notes. Creates custom target for API notes installation and sets dependencies.

LANGUAGE: cmake
CODE:
set(output_dir "${SWIFTLIB_DIR}/apinotes")
add_custom_command_target(unused_var
    CUSTOM_TARGET_NAME CxxStdlib-apinotes
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir}"
    COMMAND ${CMAKE_COMMAND} "-E" "copy_if_different" "${CMAKE_CURRENT_SOURCE_DIR}/std.apinotes" "${output_dir}"
    COMMENT "Copying CxxStdlib API Notes to ${output_dir}"
    OUTPUT "${output_dir}/std.apinotes"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/std.apinotes")

----------------------------------------

TITLE: Building Swift SDK for WebAssembly without Compiler
DESCRIPTION: Commands to build the Swift standard library for WebAssembly using a pre-built Swift compiler. This process skips building LLVM, Swift, and CMark, focusing only on building the WebAssembly standard library. It requires specifying paths to pre-built Swift tools.

LANGUAGE: console
CODE:
$ SWIFT_TOOLS_PATH=path/to/swift-development-snapshot/usr/bin
$ ./utils/build-script \
    --skip-build-llvm \
    --skip-build-swift \
    --skip-build-cmark \
    --build-wasm-stdlib \
    --native-swift-tools-path="$SWIFT_TOOLS_PATH" \
    --native-clang-tools-path="$SWIFT_TOOLS_PATH" \
    --native-llvm-tools-path="$SWIFT_TOOLS_PATH"

----------------------------------------

TITLE: Defining Swift AST Library Sources
DESCRIPTION: Adds a static library target for Swift AST with an extensive list of source files covering various AST functionality including parsing, printing, verification, and requirement handling.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftAST STATIC
  AbstractSourceFileDepGraphFactory.cpp
  AccessNotes.cpp
  AccessRequests.cpp
  ActorIsolation.cpp
  ArgumentList.cpp
  [... truncated for brevity ...]
  USRGeneration.cpp

  LLVM_LINK_COMPONENTS
  ${SWIFTAST_LLVM_LINK_COMPONENTS}
  )

----------------------------------------

TITLE: Building Default SwiftCore Configuration
DESCRIPTION: Commands to build a standard library with default configuration, resulting in a static archive without optimizations for the current system. Includes installation to a staging directory.

LANGUAGE: sh
CODE:
cmake -B build -S . -G Ninja -DCMAKE_Swift_COMPILER=<swiftc>
cmake --build build
DESTDIR=/tmp/staging-dir cmake --install build --prefix /usr

----------------------------------------

TITLE: Creating Output Directory for Swift Migrator in CMake
DESCRIPTION: Adds a custom command to create the output directory for the Swift Migrator.

LANGUAGE: CMake
CODE:
add_custom_command(
    OUTPUT "${output_dir}"
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir}")

----------------------------------------

TITLE: Configuring swiftSIL Target Sources in CMake
DESCRIPTION: Adds source files to the swiftSIL target using CMake's target_sources command. Includes ParseTestSpecification.cpp and ParseSIL.cpp as private source files.

LANGUAGE: cmake
CODE:
target_sources(swiftSIL PRIVATE
  ParseTestSpecification.cpp
  ParseSIL.cpp)

----------------------------------------

TITLE: Adding SIL Utilities Subdirectory
DESCRIPTION: Includes the Utilities subdirectory in the build process for additional SIL-related utility components.

LANGUAGE: cmake
CODE:
add_subdirectory(Utilities)

----------------------------------------

TITLE: Defining Bidi_Mirrored Property for Unicode Characters
DESCRIPTION: This snippet shows the format used to define Unicode characters with the Bidi_Mirrored property. Each line contains a code point or range, followed by a comment describing the character.

LANGUAGE: Unicode
CODE:
0028          ; Bidi_Mirrored # Ps       LEFT PARENTHESIS
0029          ; Bidi_Mirrored # Pe       RIGHT PARENTHESIS
003C          ; Bidi_Mirrored # Sm       LESS-THAN SIGN
003E          ; Bidi_Mirrored # Sm       GREATER-THAN SIGN

----------------------------------------

TITLE: Defining Indic_Conjunct_Break Characters
DESCRIPTION: Characters used for determining conjunct breaks in Indic scripts. Generated from Grapheme_Cluster_Break, Indic_Syllabic_Category, Canonical_Combining_Class, and Script properties

LANGUAGE: Unicode
CODE:
094D          ; InCB; Linker
09CD          ; InCB; Linker
0ACD          ; InCB; Linker
0B4D          ; InCB; Linker
0C4D          ; InCB; Linker
0D4D          ; InCB; Linker

0915..0939    ; InCB; Consonant
0958..095F    ; InCB; Consonant
0978..097F    ; InCB; Consonant
0995..09A8    ; InCB; Consonant
09AA..09B0    ; InCB; Consonant
09B2          ; InCB; Consonant
09B6..09B9    ; InCB; Consonant
09DC..09DD    ; InCB; Consonant
09DF          ; InCB; Consonant
09F0..09F1    ; InCB; Consonant
# ... (truncated for brevity)

0300..036F    ; InCB; Extend
0483..0487    ; InCB; Extend
0488..0489    ; InCB; Extend
0591..05BD    ; InCB; Extend
05BF          ; InCB; Extend
05C1..05C2    ; InCB; Extend
05C4..05C5    ; InCB; Extend
05C7          ; InCB; Extend
0610..061A    ; InCB; Extend
064B..065F    ; InCB; Extend
0670          ; InCB; Extend
06D6..06DC    ; InCB; Extend
06DF..06E4    ; InCB; Extend
06E7..06E8    ; InCB; Extend
06EA..06ED    ; InCB; Extend
# ... (truncated for brevity)

----------------------------------------

TITLE: Translating Objective-C Enums to Swift
DESCRIPTION: Demonstrates how different types of Objective-C enums are imported into Swift, including @objc enums, error enums, and option set structs.

LANGUAGE: objc
CODE:
enum TimeOfDay __attribute__((enum_extensibility(open))) : long {
  TimeOfDayMorning,
  TimeOfDayAfternoon,
  TimeOfDayNight,
  TimeOfDayEvening = TimeOfDayNight
};

LANGUAGE: swift
CODE:
@objc enum TimeOfDay: Int {
  init?(rawValue: Int)
  var rawValue: Int { get }

  case morning
  case afternoon
  case night

  static var evening: TimeOfDay { get }
}

----------------------------------------

TITLE: Configuring SwiftPrivate Library Target in CMake
DESCRIPTION: Adds the SwiftPrivate library target with specified source files, dependencies, and build settings for various platforms.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftSwiftPrivate ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed the first.  Module name is inferred from the
  # filename.
  SwiftPrivate.swift

  IO.swift
  ShardedAtomicCounter.swift

  "${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c"

  GYB_SOURCES
    AtomicInt.swift.gyb

  SWIFT_MODULE_DEPENDS_OSX ${swift_swiftprivate_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_IOS ${swift_swiftprivate_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swift_swiftprivate_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_swiftprivate_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_swiftprivate_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_FREESTANDING "${SWIFT_FREESTANDING_TEST_DEPENDENCIES}"
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WASI WASILibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK
  SWIFT_COMPILE_FLAGS ${swift_swiftprivate_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered"
  )

----------------------------------------

TITLE: Main Executable Configuration
DESCRIPTION: Configures the main swift-inspect executable target with its source files and dependencies.

LANGUAGE: cmake
CODE:
add_executable(swift-inspect
  Sources/swift-inspect/Operations/DumpArray.swift
  Sources/swift-inspect/Operations/DumpCacheNodes.swift
  Sources/swift-inspect/Operations/DumpConcurrency.swift
  Sources/swift-inspect/Operations/DumpConformanceCache.swift
  Sources/swift-inspect/Operations/DumpGenericMetadata.swift
  Sources/swift-inspect/Operations/DumpRawMetadata.swift
  Sources/swift-inspect/AndroidRemoteProcess.swift
  Sources/swift-inspect/Backtrace.swift
  Sources/swift-inspect/DarwinRemoteProcess.swift
  Sources/swift-inspect/LinuxRemoteProcess.swift
  Sources/swift-inspect/main.swift
  Sources/swift-inspect/Process.swift
  Sources/swift-inspect/RemoteMirror+Extensions.swift
  Sources/swift-inspect/RemoteProcess.swift
  Sources/swift-inspect/String+Extensions.swift
  Sources/swift-inspect/Symbolication+Extensions.swift
  Sources/swift-inspect/WindowsRemoteProcess.swift
  Sources/swift-inspect/WinSDK+Extentions.swift)

----------------------------------------

TITLE: Compiling Swift with libFuzzer and Address Sanitizer
DESCRIPTION: This bash command shows how to compile a Swift file with both libFuzzer and Address Sanitizer. It combines multiple sanitizers using the -sanitize flag.

LANGUAGE: bash
CODE:
% swiftc -sanitize=fuzzer,address -parse-as-library myfile.swift

----------------------------------------

TITLE: Platform-Specific Library Configuration
DESCRIPTION: Defines platform-specific libraries and their configurations for Windows, Android, and Linux platforms.

LANGUAGE: cmake
CODE:
if(WIN32)
  add_library(SwiftInspectClientInterface INTERFACE)
  target_include_directories(SwiftInspectClientInterface INTERFACE
    Sources/SwiftInspectClientInterface)

  add_library(SwiftInspectClient SHARED
    Sources/SwiftInspectClient/SwiftInspectClient.cpp)
  target_link_libraries(SwiftInspectClient PRIVATE
    SwiftInspectClientInterface)
endif()

if (ANDROID)
  add_library(AndroidCLib STATIC
    Sources/AndroidCLib/heap.c)
  target_include_directories(AndroidCLib PUBLIC
    Sources/AndroidCLib/include)
  set_property(TARGET AndroidCLib PROPERTY POSITION_INDEPENDENT_CODE ON)
endif()

----------------------------------------

TITLE: Configuring Swift Markup Static Library with CMake
DESCRIPTION: Defines a static library target 'swiftMarkup' with source files and links it to the libcmark-gfm dependency. The library processes markup-related functionality through AST, LineList, and Markup components.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftMarkup STATIC
  AST.cpp
  LineList.cpp
  Markup.cpp)
target_link_libraries(swiftMarkup PRIVATE
  libcmark-gfm)

----------------------------------------

TITLE: Executing Layout Copying for Standard Build
DESCRIPTION: Iterates through all Swift SDKs and their architectures to set up layout copying for standard build configurations.

LANGUAGE: cmake
CODE:
foreach(sdk ${SWIFT_SDKS})
  foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES} ${SWIFT_SDK_${sdk}_MODULE_ARCHITECTURES})
    add_layout_copying(${sdk} ${arch} "")
  endforeach()
endforeach()

----------------------------------------

TITLE: Reproducing Apple Intel macOS Build
DESCRIPTION: Commands to reproduce a specific build configuration for Apple Intel macOS using predefined cache files and toolchain settings.

LANGUAGE: sh
CODE:
cmake -B build -S . -G Ninja \
    -DCMAKE_OSX_DEPLOYMENT_TARGET=15.3 \
    -DCMAKE_OSX_SYSROOT=macosx \
    -DCMAKE_Swift_COMPILER=<swiftc> \
    --toolchain cmake/caches/Vendors/Apple/Darwin.toolchain.cmake \
    -C cmake/caches/Vendors/Apple/x86_64-MacOSX.cmake
cmake --build build

----------------------------------------

TITLE: Defining Swift Migrator Library in CMake
DESCRIPTION: Adds the Swift Migrator library as a static host library, specifies its source files, and links it with the swiftIDE library.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftMigrator STATIC
  APIDiffMigratorPass.cpp
  EditorAdapter.cpp
  FixitApplyDiagnosticConsumer.cpp
  Migrator.cpp
  MigrationState.cpp
  OptionalTryMigratorPass.cpp
  RewriteBufferEditsReceiver.cpp)
target_link_libraries(swiftMigrator PRIVATE
  swiftIDE)

----------------------------------------

TITLE: Configuring Swift IDE Static Library with Source Files
DESCRIPTION: Defines a static library target 'swiftIDE' with a comprehensive list of source files handling various IDE functionalities like code completion, syntax analysis, and documentation processing.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftIDE STATIC
  AfterPoundExprCompletion.cpp
  APIDigesterData.cpp
  ArgumentCompletion.cpp
  CodeCompletion.cpp
  CodeCompletionCache.cpp
  CodeCompletionContext.cpp
  CodeCompletionDiagnostics.cpp
  CodeCompletionResult.cpp
  CodeCompletionResultBuilder.cpp
  CodeCompletionResultPrinter.cpp
  CodeCompletionResultType.cpp
  CodeCompletionString.cpp
  CodeCompletionStringPrinter.cpp
  CommentConversion.cpp
  CompletionLookup.cpp
  CompletionOverrideLookup.cpp
  ConformingMethodList.cpp
  CursorInfo.cpp
  ExprCompletion.cpp
  ExprContextAnalysis.cpp
  Formatting.cpp
  FuzzyStringMatcher.cpp
  IDEBridging.cpp
  IDERequests.cpp
  IDETypeChecking.cpp
  ImportDepth.cpp
  KeyPathCompletion.cpp
  ModuleInterfacePrinting.cpp
  PostfixCompletion.cpp
  REPLCodeCompletion.cpp
  SelectedOverloadInfo.cpp
  SourceEntityWalker.cpp
  SwiftSourceDocInfo.cpp
  SyntaxModel.cpp
  TypeCheckCompletionCallback.cpp
  TypeContextInfo.cpp
  UnresolvedMemberCompletion.cpp
  Utils.cpp
  )

----------------------------------------

TITLE: Configuring Swift Optimizer Source Files with CMake
DESCRIPTION: Defines the source files to be included in the Swift Optimizer module compilation. Lists multiple Swift source files that implement different optimization passes including memory management, performance improvements, and code transformations.

LANGUAGE: cmake
CODE:
swift_compiler_sources(Optimizer
  AssumeSingleThreaded.swift
  AsyncDemotion.swift
  BooleanLiteralFolding.swift
  CleanupDebugSteps.swift
  ClosureSpecialization.swift
  ComputeEscapeEffects.swift
  ComputeSideEffects.swift
  CopyToBorrowOptimization.swift
  DeadStoreElimination.swift
  DeinitDevirtualizer.swift
  DestroyHoisting.swift
  DiagnoseInfiniteRecursion.swift
  InitializeStaticGlobals.swift
  LetPropertyLowering.swift
  LifetimeDependenceDiagnostics.swift
  LifetimeDependenceInsertion.swift
  LifetimeDependenceScopeFixup.swift
  ObjectOutliner.swift
  ObjCBridgingOptimization.swift
  MergeCondFails.swift
  NamedReturnValueOptimization.swift
  RedundantLoadElimination.swift
  ReleaseDevirtualizer.swift
  SimplificationPasses.swift
  StackPromotion.swift
  StripObjectHeaders.swift
)

----------------------------------------

TITLE: Mapping Various Zero Digit Representations
DESCRIPTION: Defines the numeric value 0 for different zero digit characters across multiple scripts.

LANGUAGE: Unicode
CODE:
0030          ; 0.0 ; ; 0 # Nd       DIGIT ZERO
0660          ; 0.0 ; ; 0 # Nd       ARABIC-INDIC DIGIT ZERO
06F0          ; 0.0 ; ; 0 # Nd       EXTENDED ARABIC-INDIC DIGIT ZERO
07C0          ; 0.0 ; ; 0 # Nd       NKO DIGIT ZERO
0966          ; 0.0 ; ; 0 # Nd       DEVANAGARI DIGIT ZERO
09E6          ; 0.0 ; ; 0 # Nd       BENGALI DIGIT ZERO
# ... (additional zero representations omitted for brevity)

----------------------------------------

TITLE: Reading Unicode Age Property Ranges
DESCRIPTION: Defines code point ranges and their Unicode version introduction dates in a standardized format. Each line follows the pattern: range ; version # [count] description

LANGUAGE: Unicode
CODE:
0000..001F    ; 1.1 #  [32] <control-0000>..<control-001F>
0020..007E    ; 1.1 #  [95] SPACE..TILDE

----------------------------------------

TITLE: Building Foundation for Android on Windows
DESCRIPTION: This snippet shows how to build the Foundation framework for Android using CMake and Ninja on Windows. It includes setting paths for various dependencies such as libcurl, ICU, and libxml2.

LANGUAGE: cmd
CODE:
md S:\b\a\foundation
cd S:\b\a\foundation
cmake -C S:\swift-build\cmake\caches\android-armv7.cmake                                                                ^
  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk                    ^
  -C S:\swift-build\cmake\caches\android-armv7-swift-flags.cmake                                                        ^
  -G Ninja                                                                                                              ^
  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^
  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^
  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^
  -DCMAKE_TOOLCHAIN_FILE=S:\swift-build\cmake\toolchains\android.toolchain.cmake                                        ^
  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^
  -DCURL_LIBRARY=S:/b/a/Library/libcurl-development/usr/lib/libcurl.a                                                   ^
  -DCURL_INCLUDE_DIR=S:/b/a/Library/libcurl-development/usr/include                                                     ^
  -DICU_INCLUDE_DIR=S:/b/a/Library/icu-64/usr/include                                                                   ^
  -DICU_UC_LIBRARY=S:/b/a/Library/icu-64/usr/lib/libicuuc64.so                                                          ^
  -DICU_UC_LIBRARY_RELEASE=S:/b/a/Library/icu-64/usr/lib/libicuuc64.so                                                  ^
  -DICU_I18N_LIBRARY=S:/b/a/Library/icu-64/usr/lib/libiucin64.so                                                        ^
  -DICU_I18N_LIBRARY_RELEASE=S:/b/a/Library/icu-64/usr/lib/libicuin64.so                                                ^
  -DLIBXML2_LIBRARY=S:/b/a/Library/libxml2-development/usr/lib/libxml2.a                                                ^
  -DLIBXML2_INCLUDE_DIR=S:/b/a/Library/libxml2-development/usr/include/libxml2                                          ^
  -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=S:/swift-corelibs-libdispatch                                                 ^
  -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=S:/b/a/libdispatch                                                             ^
  S:/swift-corelibs-foundation
ninja

----------------------------------------

TITLE: Adding SwiftOnoneSupport Library Target in CMake
DESCRIPTION: Adds the main SwiftOnoneSupport library target with specified build types and installation component.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftSwiftOnoneSupport
  ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}
  ${swiftOnoneSupport_common_options}
  MACCATALYST_BUILD_FLAVOR "zippered"
  INSTALL_IN_COMPONENT stdlib)

----------------------------------------

TITLE: Swift Argument Parser Integration
DESCRIPTION: Configures and integrates the Swift ArgumentParser library as an external dependency using FetchContent.

LANGUAGE: cmake
CODE:
FetchContent_Declare(ArgumentParser
  GIT_REPOSITORY  https://github.com/apple/swift-argument-parser
  GIT_TAG         1.5.0
  GIT_SHALLOW     TRUE
  EXCLUDE_FROM_ALL
  FIND_PACKAGE_ARGS CONFIG)

block(SCOPE_FOR VARIABLES)
  set(BUILD_SHARED_LIBS OFF CACHE INTERNAL "Build as a shared library")
  set(BUILD_TESTING OFF CACHE INTERNAL "Skip building ArgumentParser tests")
  set(BUILD_EXAMPLES OFF CACHE INTERNAL "Skip building ArgumentParser examples")
  FetchContent_MakeAvailable(ArgumentParser)
endblock()

----------------------------------------

TITLE: Configuring Swift Reflection Test Library Build
DESCRIPTION: Adds Swift Reflection Test library target with platform-specific module dependencies and build configurations. Includes settings for various platforms like iOS, tvOS, watchOS, Linux, FreeBSD, OpenBSD, and Windows. Sets installation parameters and Darwin-specific naming conventions.

LANGUAGE: cmake
CODE:
if (SWIFT_INCLUDE_TESTS AND SWIFT_BUILD_DYNAMIC_STDLIB)
  add_swift_target_library(swiftSwiftReflectionTest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
    SwiftReflectionTest.swift
    SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    SWIFT_COMPILE_FLAGS_LINUX -Xcc -D_GNU_SOURCE
    SWIFT_MODULE_DEPENDS_OSX ${swift_reflection_test_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_IOS ${swift_reflection_test_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_TVOS ${swift_reflection_test_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_WATCHOS ${swift_reflection_test_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_XROS ${swift_reflection_test_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_ANDROID Android
    SWIFT_MODULE_DEPENDS_LINUX Glibc
    SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
    SWIFT_MODULE_DEPENDS_FREEBSD Glibc
    SWIFT_MODULE_DEPENDS_OPENBSD Glibc
    SWIFT_MODULE_DEPENDS_WINDOWS CRT
    INSTALL_IN_COMPONENT stdlib-experimental
    DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"

    TARGET_SDKS NOT LINUX_STATIC)

----------------------------------------

TITLE: Launching libFuzzer Process in Swift
DESCRIPTION: This bash command demonstrates how to launch the fuzzing process after compiling a Swift file with libFuzzer integration.

LANGUAGE: bash
CODE:
% ./myfile

----------------------------------------

TITLE: Configuring Swift Static Mirror Library in CMake
DESCRIPTION: Defines the Swift Static Mirror library as a static library and specifies its source files and LLVM component dependencies. It also links the library with the Swift Remote Inspection library.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftStaticMirror STATIC
   BinaryScanningTool.cpp
   ObjectFileContext.cpp
   LLVM_LINK_COMPONENTS object support)

 target_link_libraries(swiftStaticMirror PRIVATE
     swiftRemoteInspection)

----------------------------------------

TITLE: Removed Hash Functions from Swift Color Type
DESCRIPTION: Documentation of removed hash-related functionality from the Color type in Swift. The hash(into:) function and hashValue property have been deprecated and removed from the Color type implementation.

LANGUAGE: swift
CODE:
// Removed functionality:
// func Color.hash(into:)
// var Color.hashValue

----------------------------------------

TITLE: Installing Swift Migrator Data Files in CMake
DESCRIPTION: Installs the migrator data files in the specified component and destination.

LANGUAGE: CMake
CODE:
swift_install_in_component(FILES ${datafiles}
                           DESTINATION "lib/swift/migrator"
                           COMPONENT compiler)

----------------------------------------

TITLE: Configuring Swift Frontend Static Library
DESCRIPTION: Creates a static library named swiftFrontend with multiple source files handling frontend operations like argument conversion, diagnostics, and module interfaces. Links against core Swift compiler components and optionally includes syntax support.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftFrontend STATIC
  ArgsToFrontendInputsConverter.cpp
  ArgsToFrontendOptionsConverter.cpp
  ArgsToFrontendOutputsConverter.cpp
  CachedDiagnostics.cpp
  CachingUtils.cpp
  CASOutputBackends.cpp
  CompileJobCacheKey.cpp
  CompileJobCacheResult.cpp
  CompilerInvocation.cpp
  DependencyVerifier.cpp
  DiagnosticHelper.cpp
  DiagnosticVerifier.cpp
  Frontend.cpp
  FrontendInputsAndOutputs.cpp
  FrontendOptions.cpp
  MakeStyleDependencies.cpp
  ModuleInterfaceBuilder.cpp
  ModuleInterfaceLoader.cpp
  ModuleInterfaceSupport.cpp
  PrintingDiagnosticConsumer.cpp
  Serialization.cpp
  SerializedDiagnosticConsumer.cpp)

----------------------------------------

TITLE: Configuring Swift Optimizer Module Dependencies and Structure
DESCRIPTION: Defines the dependencies for the Swift Optimizer module and sets up the module structure by adding various subdirectories for different optimization components. Dependencies include Basic, AST, and SIL modules.

LANGUAGE: cmake
CODE:
set(dependencies)
list(APPEND dependencies Basic AST SIL)

add_swift_compiler_module(Optimizer DEPENDS ${dependencies})

add_subdirectory(Analysis)
add_subdirectory(DataStructures)
add_subdirectory(InstructionSimplification)
add_subdirectory(PassManager)
add_subdirectory(ModulePasses)
add_subdirectory(FunctionPasses)
add_subdirectory(TestPasses)
add_subdirectory(Utilities)

----------------------------------------

TITLE: Defining Large Number Values
DESCRIPTION: Maps characters to large numeric values (10 and above) across different numeral systems.

LANGUAGE: Unicode
CODE:
0BF0          ; 10.0 ; ; 10 # No       TAMIL NUMBER TEN
0D70          ; 10.0 ; ; 10 # No       MALAYALAM NUMBER TEN
1372          ; 10.0 ; ; 10 # No       ETHIOPIC NUMBER TEN
# ... (additional representations for large numbers omitted for brevity)

----------------------------------------

TITLE: Defining Special Casing for German es-zed in Unicode
DESCRIPTION: Specifies the special casing rules for the German es-zed character, mapping it to different forms in lowercase, titlecase, and uppercase.

LANGUAGE: Unicode
CODE:
00DF; 00DF; 0053 0073; 0053 0053; # LATIN SMALL LETTER SHARP S

----------------------------------------

TITLE: Building libdispatch for Android on Windows
DESCRIPTION: This snippet demonstrates how to build libdispatch for Android using CMake and Ninja on Windows. It includes setting various parameters such as the Android SDK path, Swift compiler, and toolchain file.

LANGUAGE: cmd
CODE:
md S:\b\a\libdispatch
cd S:\b\a\libdispatch
cmake -C S:\swift-build\cmake\caches\android-armv7.cmake                                                                ^
  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk                    ^
  -C S:\swift-build\cmake\caches\android-armv7-swift-flags.cmake                                                        ^
  -G Ninja                                                                                                              ^
  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^
  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^
  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^
  -DCMAKE_TOOLCHAIN_FILE=S:\swift-build\cmake\toolchains\android.toolchain.cmake                                        ^
  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^
  -DENABLE_SWIFT=YES                                                                                                    ^
  -DENABLE_TESTING=NO                                                                                                   ^
  S:/swift-corelibs-libdispatch
ninja

----------------------------------------

TITLE: Source File Collection for Swift String Processing
DESCRIPTION: Gathers all source files for the String Processing library using GLOB_RECURSE and normalizes their paths for CMake compatibility.

LANGUAGE: cmake
CODE:
file(GLOB_RECURSE _STRING_PROCESSING_SOURCES
  "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_StringProcessing/*.swift"
  "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_CUnicode/*.h"
  "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_CUnicode/*.c")
set(STRING_PROCESSING_SOURCES)
foreach(source ${_STRING_PROCESSING_SOURCES})
  file(TO_CMAKE_PATH "${source}" source)
  list(APPEND STRING_PROCESSING_SOURCES ${source})
endforeach()

----------------------------------------

TITLE: Configuring SourceKitD Library Linking in CMake
DESCRIPTION: Conditionally links either sourcekitdInProc or sourcekitd library based on the SWIFT_SOURCEKIT_USE_INPROC_LIBRARY flag. For non-Darwin systems, additional libraries are linked.

LANGUAGE: cmake
CODE:
if(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)
  target_link_libraries(sourcekitd-test PRIVATE sourcekitdInProc)
else()
  target_link_libraries(sourcekitd-test PRIVATE sourcekitd)
endif()
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_link_libraries(sourcekitd-test PRIVATE
    dispatch
    BlocksRuntime)
endif()

----------------------------------------

TITLE: Setting up Swift Diagnostic Database Generation
DESCRIPTION: Defines CMake custom commands and targets to generate Swift's diagnostic database. The process includes copying diagnostic files, converting definitions to strings, and serializing them into a database format. The generated files are then installed in the appropriate directory.

LANGUAGE: cmake
CODE:
set(diagnostic_witness "${CMAKE_BINARY_DIR}/share/swift/diagnostics/generated")

add_custom_command(
  OUTPUT
    ${diagnostic_witness}
  COMMAND
    ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/diagnostics/ ${CMAKE_BINARY_DIR}/share/swift/diagnostics/
  COMMAND
    "${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-def-to-strings-converter"
      --output-directory ${CMAKE_BINARY_DIR}/share/swift/diagnostics/
  COMMAND
    "${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-serialize-diagnostics"
      --input-file-path ${CMAKE_BINARY_DIR}/share/swift/diagnostics/en.strings
      --output-directory ${CMAKE_BINARY_DIR}/share/swift/diagnostics/
  COMMAND
    ${CMAKE_COMMAND} -E touch ${diagnostic_witness}
  DEPENDS
    swift-def-to-strings-converter
    swift-serialize-diagnostics
)

add_custom_target(diagnostic-database DEPENDS ${diagnostic_witness})

add_dependencies(swift-frontend diagnostic-database)

swift_install_in_component(
  DIRECTORY ${CMAKE_BINARY_DIR}/share/swift/diagnostics/
  DESTINATION "share/swift/diagnostics"
  COMPONENT compiler
  FILES_MATCHING
  PATTERN "*.db"
  PATTERN "*.yaml"
  PATTERN "*.strings"
)

----------------------------------------

TITLE: Installing Required Packages for Swift on OpenBSD
DESCRIPTION: Installs the necessary packages to build Swift on OpenBSD using pkg_add.

LANGUAGE: shell
CODE:
$ doas pkg_add bash cmake e2fsprogs git icu4c ninja py3-six python3

----------------------------------------

TITLE: Adding Swift Project Subdirectories in CMake
DESCRIPTION: This CMake snippet adds the 'API' and 'Service' subdirectories to the build process. It ensures that these components are included when building the Swift project.

LANGUAGE: CMake
CODE:
add_subdirectory(API)
add_subdirectory(Service)

----------------------------------------

TITLE: Configuring swiftSIL Target Sources in CMake
DESCRIPTION: Defines the source files to be compiled for the swiftSIL target. Includes utilities for basic blocks, dataflow analysis, dominance calculation, casting operations, liveness analysis, and various other SIL-related functionality.

LANGUAGE: cmake
CODE:
target_sources(swiftSIL PRIVATE
  BasicBlockUtils.cpp
  BitDataflow.cpp
  CalleeCache.cpp
  DebugUtils.cpp
  Dominance.cpp
  DynamicCasts.cpp
  FieldSensitivePrunedLiveness.cpp
  GenericSpecializationMangler.cpp
  InstructionUtils.cpp
  InstWrappers.cpp
  LoopInfo.cpp
  MemAccessUtils.cpp
  MemoryLocations.cpp
  OptimizationRemark.cpp
  OSSALifetimeCompletion.cpp
  OwnershipLiveness.cpp
  OwnershipUtils.cpp
  PrettyStackTrace.cpp
  Projection.cpp
  PrunedLiveness.cpp
  ScopedAddressUtils.cpp
  SILBridging.cpp
  SILInstructionWorklist.cpp
  SILRemarkStreamer.cpp
  Test.cpp
  ValueUtils.cpp
)

----------------------------------------

TITLE: Demonstrating Swift Method Argument Labels
DESCRIPTION: This snippet shows examples of Swift method names with argument labels, illustrating how they are typically written and used in the language.

LANGUAGE: Swift
CODE:
move(from:to:)

LANGUAGE: Swift
CODE:
add(to:)

LANGUAGE: Swift
CODE:
remove(from:)

----------------------------------------

TITLE: Declaration Removals in Swift
DESCRIPTION: Lists various declarations that have been removed from the codebase, including accessors, functions, variables, and associated types.

LANGUAGE: swift
CODE:
/* Removed Decls */
GlobalVarChangedToLet.Set()
RemoveSetters.Value.Set()
RemoveSetters.subscript(_:).Set()
RequirementChanges.removedType
Somestruct2.init(_:)
C4.foo()
Int.IntEnhancer()
RequirementChanges.removedFunc()
RequirementChanges.removedVar

----------------------------------------

TITLE: Setting Swift Library and Output Directories in CMake
DESCRIPTION: Defines the directories for the Swift library and the migrator output. These paths are used in subsequent commands.

LANGUAGE: CMake
CODE:
set(SWIFTLIB_DIR
    "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift")
set(output_dir "${SWIFTLIB_DIR}/migrator")

----------------------------------------

TITLE: Additional Dependencies and Conditional Build Configuration
DESCRIPTION: Sets up additional dependencies including generated files and tablegen targets, configures LLVM availability, and adds optional SwiftBridging subdirectory based on CXX interop flag.

LANGUAGE: cmake
CODE:
get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS)
add_dependencies(swiftClangImporter
  generated_sorted_cf_database
  ${CLANG_TABLEGEN_TARGETS})

set_swift_llvm_is_available(swiftClangImporter)

if(SWIFT_ENABLE_CXX_INTEROP_SWIFT_BRIDGING_HEADER)
  add_subdirectory(SwiftBridging)
endif()

----------------------------------------

TITLE: Compiling SIL Source Files in Swift
DESCRIPTION: This snippet defines the Swift source files to be compiled for the SIL (Swift Intermediate Language) component of the Swift compiler. It includes utility files for various compiler operations.

LANGUAGE: Swift
CODE:
swift_compiler_sources(SIL
  AccessUtils.swift
  SequenceUtilities.swift
  SmallProjectionPath.swift
  WalkUtils.swift
)

----------------------------------------

TITLE: Grapheme Break Property Definition
DESCRIPTION: A comprehensive listing of Unicode codepoints and their grapheme break property assignments used for determining text segmentation boundaries.

LANGUAGE: txt
CODE:
# Property:	Grapheme_Cluster_Break

#  All code points not explicitly listed for Grapheme_Cluster_Break
#  have the value Other (XX).

# @missing: 0000..10FFFF; Other

----------------------------------------

TITLE: Linking Core Swift Libraries
DESCRIPTION: Links essential Swift libraries required for IDE functionality, including AST, Clang importer, driver, parser, and semantic analysis components.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftIDE PRIVATE
  swiftAST
  swiftClangImporter
  swiftDriver
  swiftParse
  swiftSema)

----------------------------------------

TITLE: Grouped Variant Benchmark Naming Examples
DESCRIPTION: Examples showing how to structure benchmark families with consistent naming patterns across different variations and workload sizes.

LANGUAGE: text
CODE:
✅ Seq.dropFirst.Array
✅ Seq.dropLast.Range.lazy
✅ Seq.dropWhile.UnfoldSeq
✅ Seq.prefix.AnySeq.RangeIter.lazy
✅ Seq.prefixWhile.AnyCol.Array
✅ Seq.suffix.AnySeq.UnfoldSeq.lazy

✅ Existential.Array.ConditionalShift.Ref1
✅ Existential.Array.Mutating.Ref2
✅ Existential.Array.method.1x.Ref3
✅ Existential.Array.method.2x.Ref4
✅ Existential.Array.Shift.Val0
✅ Existential.MutatingAndNonMutating.Val1
✅ Existential.Mutating.Val2
✅ Existential.method.1x.Val3
✅ Existential.method.2x.Val4
✅ Existential.Pass2.method.1x.Ref1
✅ Existential.Pass2.method.2x.Ref2

✅ Set.isSubset.Int25
✅ Set.symmetricDifference.Int50

----------------------------------------

TITLE: Configuring CMake for Swift Threading Library
DESCRIPTION: This snippet sets up the CMake configuration for the Swift Threading library. It adds the cmake modules path, includes the AddSwiftStdlib module, and defines the swiftThreading target library with its source files.

LANGUAGE: cmake
CODE:
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/modules")
include(AddSwiftStdlib)

# This should *not* include ThreadSanitizer.cpp, as that is part of libswiftCore
add_swift_target_library(swiftThreading OBJECT_LIBRARY
  "${SWIFT_SOURCE_DIR}/lib/Threading/C11.cpp"
  "${SWIFT_SOURCE_DIR}/lib/Threading/Linux.cpp"
  "${SWIFT_SOURCE_DIR}/lib/Threading/Pthreads.cpp"
  "${SWIFT_SOURCE_DIR}/lib/Threading/Win32.cpp"
  INSTALL_IN_COMPONENT never_install)

----------------------------------------

TITLE: Configuring Swift Runtime Build Directories with CMake
DESCRIPTION: CMake configuration that adds the InProc subdirectory unconditionally and conditionally adds the XPC subdirectory if XPC support is available on the system via HAVE_XPC_H definition.

LANGUAGE: cmake
CODE:
add_subdirectory(InProc)
if (HAVE_XPC_H)
  add_subdirectory(XPC)
endif()

----------------------------------------

TITLE: Setting LLVM Common Dependencies in CMake
DESCRIPTION: Adds required LLVM and Clang tablegen targets as common dependencies for all Swift libraries to ensure proper build order.

LANGUAGE: cmake
CODE:
list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen clang-tablegen-targets)

----------------------------------------

TITLE: Enum Property Declarations in Swift
DESCRIPTION: Declares computed properties for FooSubEnum1 and an unrelated enumeration value

LANGUAGE: swift
CODE:
var FooSubEnum1X: FooSubEnum1 { get }
var FooSubEnum1Y: FooSubEnum1 { get }
var FooSubUnnamedEnumeratorA1: Int { get }

----------------------------------------

TITLE: Setting Swift LLVM Availability for IDE Tool in CMake
DESCRIPTION: Calls a custom function set_swift_llvm_is_available for the swiftIDETool target, likely to configure LLVM-related settings.

LANGUAGE: CMake
CODE:
set_swift_llvm_is_available(swiftIDETool)

----------------------------------------

TITLE: Type and Attribute Changes
DESCRIPTION: Documents changes in type definitions, attribute modifications and protocol conformances

LANGUAGE: swift
CODE:
/* Type Changes */
cake: Accessor Zoo.current.Get() has return type change from cake.Cat to cake.Dog
cake: AssociatedType AssociatedTypePro.T3 has default type change from cake.C1 to cake.C6

----------------------------------------

TITLE: Swift Syntax Build Configuration
DESCRIPTION: Conditionally adds swiftASTGen dependency when Swift Syntax building is enabled.

LANGUAGE: cmake
CODE:
if (SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftParse
    PRIVATE
    swiftASTGen
  )

  add_dependencies(swiftParse
    swiftASTGen
  )
endif()

----------------------------------------

TITLE: Creating Feature File Target
DESCRIPTION: Creates a custom target for feature file generation and adds it as a dependency to swiftOption.

LANGUAGE: cmake
CODE:
add_custom_target(swift-features-file DEPENDS ${features_file_dest})

add_dependencies(swiftOption swift-features-file)

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Sources in CMake
DESCRIPTION: CMake target_sources directive that specifies the C++ source files to be included in the swiftSILOptimizer target. These files implement various optimization passes, analyses, and transformations for Swift's intermediate language representation.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  AccessEnforcementSelection.cpp
  AccessMarkerElimination.cpp
  AlwaysEmitConformanceMetadataPreservation.cpp
  AddressLowering.cpp
  CapturePromotion.cpp
  ClosureLifetimeFixup.cpp
  ConsumeOperatorCopyableAddressesChecker.cpp
  ConsumeOperatorCopyableValuesChecker.cpp
  PhiStorageOptimizer.cpp
  ConstantPropagation.cpp
  DiagnoseUnnecessaryPreconcurrencyImports.cpp
  DebugInfoCanonicalizer.cpp
  DefiniteInitialization.cpp
  DIMemoryUseCollector.cpp
  DataflowDiagnostics.cpp
  DiagnoseInvalidEscapingCaptures.cpp
  DiagnoseLifetimeIssues.cpp
  DiagnoseStaticExclusivity.cpp
  DiagnoseUnreachable.cpp
  Differentiation.cpp
  FlowIsolation.cpp
  IRGenPrepare.cpp
  LexicalLifetimeEliminator.cpp
  LowerHopToActor.cpp
  MandatoryInlining.cpp
  MoveOnlyAddressCheckerTester.cpp
  MoveOnlyAddressCheckerUtils.cpp
  MoveOnlyBorrowToDestructureTester.cpp
  MoveOnlyBorrowToDestructureUtils.cpp
  MoveOnlyChecker.cpp
  MoveOnlyDiagnostics.cpp
  MoveOnlyObjectCheckerTester.cpp
  MoveOnlyObjectCheckerUtils.cpp
  MoveOnlyTempAllocationFromLetTester.cpp
  MoveOnlyTypeUtils.cpp
  MoveOnlyUtils.cpp
  MovedAsyncVarDebugInfoPropagator.cpp
  NestedSemanticFunctionCheck.cpp
  OptimizeHopToExecutor.cpp
  PerformanceDiagnostics.cpp
  PredictableMemOpt.cpp
  PMOMemoryUseCollector.cpp
  RawSILInstLowering.cpp
  ReferenceBindingTransform.cpp
  ThunkLowering.cpp
  SendNonSendable.cpp
  LowerTupleAddrConstructor.cpp
  SILGenCleanup.cpp
  YieldOnceCheck.cpp
  OSLogOptimization.cpp
  MoveOnlyWrappedTypeEliminator.cpp
  RegionAnalysisInvalidationTransform.cpp
  DiagnosticDeadFunctionElimination.cpp
  OwnershipModelEliminator.cpp)

----------------------------------------

TITLE: Defining Avagraha Characters in Unicode
DESCRIPTION: Specifies Unicode code points for characters classified as Avagraha (elision of initial a- in sandhi) in various Indic scripts.

LANGUAGE: Unicode
CODE:
093D          ; Avagraha # Lo       DEVANAGARI SIGN AVAGRAHA
09BD          ; Avagraha # Lo       BENGALI SIGN AVAGRAHA
0ABD          ; Avagraha # Lo       GUJARATI SIGN AVAGRAHA
0B3D          ; Avagraha # Lo       ORIYA SIGN AVAGRAHA
0C3D          ; Avagraha # Lo       TELUGU SIGN AVAGRAHA
0CBD          ; Avagraha # Lo       KANNADA SIGN AVAGRAHA
0D3D          ; Avagraha # Lo       MALAYALAM SIGN AVAGRAHA
0F85          ; Avagraha # Po       TIBETAN MARK PALUTA
17DC          ; Avagraha # Lo       KHMER SIGN AVAKRAHASANYA
1BBA          ; Avagraha # Lo       SUNDANESE AVAGRAHA

----------------------------------------

TITLE: Creating Header Dependencies Library
DESCRIPTION: Adds a library target for the generated header dependencies and ensures it depends on LLVM common dependencies.

LANGUAGE: cmake
CODE:
add_library(importedHeaderDependencies "${CMAKE_CURRENT_BINARY_DIR}/HeaderDependencies.cpp")
add_dependencies(importedHeaderDependencies ${LLVM_COMMON_DEPENDS})

----------------------------------------

TITLE: Special Character Usage in Swift Benchmark Names
DESCRIPTION: Examples demonstrating correct usage of special characters like '-', '!', and '?' in benchmark names for denoting control flow and type operations.

LANGUAGE: text
CODE:
✅ Array.append.Array.Int?
✅ Bridging.NSArray.as!.Array.NSString
✅ Flatten.Array.Tuple4.for-in.Reserve

----------------------------------------

TITLE: Configuring BlocksRuntime Stubs for Dynamic Stdlib Tests
DESCRIPTION: CMake configuration for creating BlocksRuntime stub library used in reflection tests when building dynamic standard library with tests enabled.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_DYNAMIC_STDLIB AND SWIFT_INCLUDE_TESTS)
  add_subdirectory(BlocksRuntimeStubs)
endif()

----------------------------------------

TITLE: Main Swift Frontend Tool Configuration
DESCRIPTION: Configures the main swift-frontend executable with dependencies and creates various tool symlinks

LANGUAGE: cmake
CODE:
add_swift_host_tool(swift-frontend
  driver.cpp
  SWIFT_COMPONENT compiler
  HAS_SWIFT_MODULES
)
target_link_libraries(swift-frontend
                      PUBLIC
                        swiftDriverTool
                        swiftCompilerModules)

----------------------------------------

TITLE: CIF Image Header Byte Structure
DESCRIPTION: Binary structure of the image header byte containing relative address flag and count fields.

LANGUAGE: text
CODE:
   7   6   5   4   3   2   1   0
 ┌───┬───┬───────────┬───────────┐
 │ r │ 0 │ acount    │ ecount    │
 └───┴───┴───────────┴───────────┘

----------------------------------------

TITLE: x86_64 NSString Hash Value Implementation
DESCRIPTION: Assembly code verification for NSString hash value calculation on x86_64 architecture. Checks for proper message sending and autorelease return value handling.

LANGUAGE: assembly
CODE:
// CHECK-x86_64-LABEL: _swift_stdlib_NSStringHashValue:
// CHECK-x86_64-NOT: ret
// CHECK-x86_64: movq    {{.*}}(%rip), %rsi ## Objc selector ref: decomposedStringWithCanonicalMapping
// CHECK-x86_64: movq    {{.*}}(%rip), [[MSG:%.*]] ## Objc message: -[%rdi decomposedStringWithCanonicalMapping]
// CHECK-x86_64: callq   *[[MSG]]
// CHECK-x86_64: movq    %rax, %rdi
// CHECK-x86_64: callq   {{.*}} ## symbol stub for: _objc_retainAutoreleasedReturnValue
// CHECK-x86_64: ret

----------------------------------------

TITLE: Adding Swift Parser Link Libraries Function
DESCRIPTION: Function to add required link libraries for the Swift parser, including swiftCore and macro plugins when Swift Syntax is enabled

LANGUAGE: cmake
CODE:
function(add_swift_parser_link_libraries target)
  if(SWIFT_BUILD_SWIFT_SYNTAX)
    target_link_libraries(${target}
                          PRIVATE swiftCore)

    get_property(SWIFT_MACRO_PLUGINS GLOBAL PROPERTY SWIFT_MACRO_PLUGINS)
    foreach(macrolib ${SWIFT_MACRO_PLUGINS})
      add_dependencies(${target} ${macrolib})
    endforeach()
    add_dependencies(${target} SwiftInProcPluginServer)
  endif()
endfunction()

----------------------------------------

TITLE: Linking Dependencies for Swift IDE Tool in CMake
DESCRIPTION: Specifies the libraries that swiftIDETool depends on using target_link_libraries. It links against various Swift and Clang libraries.

LANGUAGE: CMake
CODE:
target_link_libraries(swiftIDETool PRIVATE
  swiftAST
  swiftDriver
  swiftFrontend
  swiftFrontendTool
  clangAST
  clangFrontend)

----------------------------------------

TITLE: Mathematical Expression for Superclass Chain
DESCRIPTION: Mathematical notation defining the sequence of superclasses from a given class C to its root class, used to illustrate initialization state handling.

LANGUAGE: math
CODE:
superclasses(C) = {C, C_1, C_2, ..., C_n}

----------------------------------------

TITLE: Declaring Swift Helper Function with Int32 Parameter and Return Type
DESCRIPTION: This snippet defines a Swift function named 'fooHelperExplicitFrameworkFunc1' that takes a single Int32 parameter and returns an Int32 value. The function is likely intended to perform some helper operation on the input value.

LANGUAGE: swift
CODE:
func fooHelperExplicitFrameworkFunc1(_ a: Int32) -> Int32

----------------------------------------

TITLE: Configuring Swift Serialization Library in CMake
DESCRIPTION: Defines the swiftSerialization library, specifies its source files, LLVM components, and target dependencies. It also sets the LLVM availability for the library.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftSerialization STATIC
  Deserialization.cpp
  DeserializeSIL.cpp
  ModuleFile.cpp
  ModuleFileSharedCore.cpp
  ScanningLoaders.cpp
  Serialization.cpp
  SerializedModuleLoader.cpp
  SerializedSILLoader.cpp
  SerializeDoc.cpp
  SerializeSIL.cpp

  LLVM_LINK_COMPONENTS
    BitstreamReader
  )
target_link_libraries(swiftSerialization PRIVATE
  swiftClangImporter
  swiftOption
  swiftAST
  swiftSIL
  clangIndex)

set_swift_llvm_is_available(swiftSerialization)

----------------------------------------

TITLE: Setting Up Dependencies and Installation for Swift Compiler in CMake
DESCRIPTION: Adds the 'copy_apinotes' target as a dependency for the compiler and sets up installation of API notes.

LANGUAGE: CMake
CODE:
add_dependencies(compiler copy_apinotes)
swift_install_in_component(DIRECTORY "${output_dir}"
                           DESTINATION "lib/swift/"
                           COMPONENT compiler)

----------------------------------------

TITLE: Configuring Swift Index Static Library in CMake
DESCRIPTION: Defines a static library 'swiftIndex' with its source files and links it with required dependencies. The library includes core indexing functionality for Swift, utilizing components from the AST and IDE modules.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftIndex STATIC
  Index.cpp
  IndexDataConsumer.cpp
  IndexRecord.cpp
  IndexSymbol.cpp)
target_link_libraries(swiftIndex PRIVATE
  swiftAST
  swiftIDE)

----------------------------------------

TITLE: Defining Unicode Character Name Aliases
DESCRIPTION: Specifies formal name aliases for Unicode characters, organized by code point. Each entry includes the code point, alias, and type (e.g., control, abbreviation, correction).

LANGUAGE: Unicode
CODE:
0000;NULL;control
0000;NUL;abbreviation
0001;START OF HEADING;control
0001;SOH;abbreviation
0002;START OF TEXT;control
0002;STX;abbreviation
# ... (additional entries)

----------------------------------------

TITLE: Generate Sorted CF Database Target
DESCRIPTION: Creates a GYB target for generating the sorted CF database definition file with dependency on the source database.

LANGUAGE: cmake
CODE:
add_gyb_target(generated_sorted_cf_database
    SortedCFDatabase.def.gyb
    DEPENDS "${SWIFT_SOURCE_DIR}/lib/ClangImporter/CFDatabase.def")

----------------------------------------

TITLE: Configuring Build Options
DESCRIPTION: Sets up build configuration options including optimization levels, extra flags, and debug info generation

LANGUAGE: cmake
CODE:
set(SWIFT_EXTRA_BENCH_CONFIGS CACHE STRING
    "A semicolon separated list of benchmark configurations. \
Available configurations: <Optlevel>_SINGLEFILE, <Optlevel>_MULTITHREADED")

set(BENCHOPTS "-whole-module-optimization")

option(SWIFT_BENCHMARK_GENERATE_DEBUG_INFO
  "Produce debug info for benchmarks"
  TRUE)

----------------------------------------

TITLE: Configuring Darwin Dependencies for Swift SDK Overlay
DESCRIPTION: Conditionally sets up Darwin dependencies based on whether SWIFT_BUILD_SDK_OVERLAY is enabled.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_distributed_darwin_dependencies Darwin)
else()
set(swift_distributed_darwin_dependencies)
endif()

----------------------------------------

TITLE: SDK Target Properties Configuration
DESCRIPTION: Configures build properties for SDK-specific target variations of the library. Sets EXCLUDE_FROM_ALL property to FALSE for each valid SDK target to ensure they are included in the build.

LANGUAGE: cmake
CODE:
foreach(sdk ${SWIFT_SDKS})
  set(target_name "${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}")
  if(NOT TARGET "${target_name}")
    continue()
  endif()

  set_target_properties("${target_name}"
    PROPERTIES
      EXCLUDE_FROM_ALL FALSE)
endforeach()

----------------------------------------

TITLE: Executing Layout Copying for Bootstrapping Mode
DESCRIPTION: Sets up layout copying specifically for bootstrapping scenarios, handling both level 0 and level 1 bootstrapping configurations.

LANGUAGE: cmake
CODE:
if(BOOTSTRAPPING_MODE MATCHES "BOOTSTRAPPING.*")
  foreach(arch
          ${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCHITECTURES}
          ${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_MODULE_ARCHITECTURES})
    add_layout_copying( ${SWIFT_HOST_VARIANT_SDK} ${arch} "0")
  endforeach()

  add_layout_copying( ${SWIFT_HOST_VARIANT_SDK} ${SWIFT_HOST_VARIANT_ARCH} "1")
endif()

----------------------------------------

TITLE: Configuring and Installing CMakeConfig.h in Swift
DESCRIPTION: This snippet configures the CMakeConfig.h file from a template and installs it in the appropriate component. It uses the configure_file command to process the template and swift_install_in_component to install the file.

LANGUAGE: cmake
CODE:
configure_file(CMakeConfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/CMakeConfig.h
               ESCAPE_QUOTES @ONLY)
swift_install_in_component(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeConfig.h
                           DESTINATION "include/swift/Runtime"
                           COMPONENT testsuite-tools)

----------------------------------------

TITLE: Configuring Swift Refactoring Library in CMake
DESCRIPTION: This CMake configuration sets up the Swift Refactoring library. It specifies the source files, library type, and dependencies. The library is built as a static library and links against several Swift modules.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftRefactoring STATIC
  AddEquatableConformance.cpp
  AddExplicitCodableImplementation.cpp
  Async/AsyncConverter.cpp
  Async/AsyncHandlerDesc.cpp
  Async/AsyncRefactorings.cpp
  Async/CallbackClassifier.cpp
  Async/CallbackCondition.cpp
  Async/DeclCollector.cpp
  Async/DeclReferenceFinder.cpp
  Async/ReferenceCollector.cpp
  Async/ScopedDeclCollector.cpp
  Async/Utils.cpp
  CollapseNestedIfStmt.cpp
  ConvertGuardExprToIfLetExpr.cpp
  ConvertIfLetExprToGuardExpr.cpp
  ConvertStringConcatenationToInterpolation.cpp
  ConvertToComputedProperty.cpp
  ConvertToDoCatch.cpp
  ConvertToSwitchStmt.cpp
  ConvertToTernaryExpr.cpp
  ExpandMacro.cpp
  ExpandSwitchCases.cpp
  ExpandTernaryExpr.cpp
  ExtractExpr.cpp
  ExtractExprBase.cpp
  ExtractFunction.cpp
  ExtractRepeatedExpr.cpp
  FillProtocolStubs.cpp
  LocalizeString.cpp
  LocalRename.cpp
  MemberwiseInitLocalRefactoring.cpp
  MoveMembersToExtension.cpp
  Refactoring.cpp
  RefactoringAction.cpp
  ReplaceBodiesWithFatalError.cpp
  SimplifyNumberLiteral.cpp
  SyntacticRename.cpp
  SyntacticRenameRangeDetails.cpp
  TrailingClosure.cpp
  Utils.cpp
)

target_link_libraries(swiftRefactoring PRIVATE
  swiftAST
  swiftClangImporter
  swiftIDE
  swiftIndex
  swiftParse
  swiftSema)

if(SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftRefactoring PRIVATE
    swiftIDEUtilsBridging
  )
endif()

set_swift_llvm_is_available(swiftRefactoring)

----------------------------------------

TITLE: Option Set Structure Definition
DESCRIPTION: Defines FooRuncingOptions as an OptionSet with integer raw value and static option properties.

LANGUAGE: swift
CODE:
struct FooRuncingOptions : OptionSet {
  init(rawValue: Int)
  let rawValue: Int
  static var enableMince: FooRuncingOptions { get }
  static var enableQuince: FooRuncingOptions { get }
}

----------------------------------------

TITLE: Configuring Swift Symbol Graph Generator Static Library in CMake
DESCRIPTION: Defines the swiftSymbolGraphGen static library, specifies its source files, and sets up LLVM link components. It also configures the target to link with swiftAST, swiftIDE, and swiftMarkup libraries.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftSymbolGraphGen STATIC
  AvailabilityMixin.cpp
  DeclarationFragmentPrinter.cpp
  Edge.cpp
  JSON.cpp
  Symbol.cpp
  SymbolGraph.cpp
  SymbolGraphGen.cpp
  SymbolGraphASTWalker.cpp

  LLVM_LINK_COMPONENTS
  TargetParser
  )

target_link_libraries(swiftSymbolGraphGen PRIVATE
  swiftAST
  swiftIDE
  swiftMarkup)

----------------------------------------

TITLE: Installing Swift to C++ Components in CMake
DESCRIPTION: Configures the installation of Swift to C++ shim files using the swift_install_in_component command. It specifies the destination and component for installation.

LANGUAGE: CMake
CODE:
swift_install_in_component(FILES ${datafiles}
                           DESTINATION "lib/swift/swiftToCxx"
                           COMPONENT compiler)

----------------------------------------

TITLE: Configuring Swift Threading Static Library in CMake
DESCRIPTION: Defines a static host library named 'swiftThreading' for the Swift project. It includes various C++ source files implementing threading functionality for different platforms and features.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftThreading STATIC
  C11.cpp
  Linux.cpp
  Pthreads.cpp
  Win32.cpp
  Errors.cpp
  ThreadSanitizer.cpp)

----------------------------------------

TITLE: Dash Character Definitions
DESCRIPTION: Defines Unicode code point ranges for dash and hyphen characters.

LANGUAGE: unicode
CODE:
002D          ; Dash # Pd       HYPHEN-MINUS
058A          ; Dash # Pd       ARMENIAN HYPHEN
05BE          ; Dash # Pd       HEBREW PUNCTUATION MAQAF

----------------------------------------

TITLE: Setting Command Line Support Dependencies
DESCRIPTION: Configures command line support dependencies and related compilation flags based on SWIFT_STDLIB_HAS_COMMANDLINE setting.

LANGUAGE: cmake
CODE:
set(swift_private_libc_extras_incorporate_object_libraries)
if(SWIFT_STDLIB_HAS_COMMANDLINE)
  list(APPEND swift_private_libc_extras_flags "-D" "SWIFT_STDLIB_HAS_COMMANDLINE")
else()
  set(swift_private_libc_extras_incorporate_object_libraries "swiftCommandLineSupport")
endif()

----------------------------------------

TITLE: Bisecting Swift Snapshots
DESCRIPTION: Command to perform binary search between two Swift snapshots to identify when a change occurred. Requires a test script, workspace directory, and both good (passing) and bad (failing) snapshot tags.

LANGUAGE: bash
CODE:
xcrun swift run swift_snapshot_tool bisect --script $SCRIPT_NAME --workspace $DIR_TO_DOWNLOAD_TOOLCHAINS \
   --good-tag $OLDER_TAG_NAME_THAT_PASSES --bad-tag $NEWER_TAG_NAME_THAT_FAILS

----------------------------------------

TITLE: Copying Shim Headers in CMake
DESCRIPTION: Sets up custom commands to copy shim headers to output directories and creates a custom target for the copy operation.

LANGUAGE: CMake
CODE:
set(outputs)
foreach(input ${sources})
  add_custom_command(
      OUTPUT "${output_dir}/${input}"
      DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
      COMMAND
        "${CMAKE_COMMAND}" "-E" "copy_if_different"
        "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
        "${output_dir}/${input}"
      COMMENT "Copying ${input} to ${output_dir}")
  list(APPEND outputs "${output_dir}/${input}")

  add_custom_command(
    OUTPUT "${output_dir_static}/${input}"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
    COMMAND
      "${CMAKE_COMMAND}" "-E" "copy_if_different"
      "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
      "${output_dir_static}/${input}"
    COMMENT "Copying ${input} to ${output_dir_static}")
  list(APPEND outputs "${output_dir_static}/${input}")
endforeach()

# ... (additional code for module map copying)

add_custom_target("copy_shim_headers" ALL
    DEPENDS "${outputs}"
    COMMENT "Copying SwiftShims module to ${output_dir}")

----------------------------------------

TITLE: Configuring Swift Compatibility Packs Library in CMake
DESCRIPTION: Sets up the Swift Compatibility Packs library with specific compiler flags, deployment versions, and installation settings. It also includes a workaround to ensure the library builds for all supported SDKs.

LANGUAGE: CMake
CODE:
set(library_name "swiftCompatibilityPacks")

include_directories("include/" "${SWIFT_STDLIB_SOURCE_DIR}")

add_compile_definitions(SWIFT_COMPATIBILITY_PACKS)
add_swift_target_library("${library_name}" STATIC
  Metadata.cpp

  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}

  C_COMPILE_FLAGS
    ${CXX_COMPILE_FLAGS}
    "-D__STDC_WANT_LIB_EXT1__=1"
  LINK_FLAGS ${CXX_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

  MACCATALYST_BUILD_FLAVOR "zippered"

  INSTALL_IN_COMPONENT compiler
  INSTALL_WITH_SHARED)


# FIXME: We need a more flexible mechanism to add lipo targets generated by
# add_swift_target_library to the ALL target. Until then this hack is necessary
# to ensure these libraries build.
foreach(sdk ${SWIFT_SDKS})
  set(target_name "${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}")
  if(NOT TARGET "${target_name}")
    continue()
  endif()

  set_target_properties("${target_name}"
    PROPERTIES
      EXCLUDE_FROM_ALL FALSE)
endforeach()

----------------------------------------

TITLE: Creating SQL Table for Optimizer Counters
DESCRIPTION: SQL statement to create a table named 'Counters' for storing optimizer counter data. The table includes columns for various attributes like stage, transform, counter type, and values.

LANGUAGE: SQL
CODE:
CREATE TABLE Counters(
  Id INTEGER PRIMARY KEY AUTOINCREMENT,
  Stage TEXT NOT NULL,
  Transform TEXT NOT NULL,
  Kind TEXT,
  Counter TEXT NOT NULL,
  PassNum INT NOT NULL,
  Delta NUMBER,
  Old INT,
  New INT,
  Duration INT,
  Symbol TEXT NOT NULL DEFAULT '');

----------------------------------------

TITLE: Configuring Compiler Warnings for Swift Runtime
DESCRIPTION: Sets up compiler-specific warning flags for the Swift runtime, including enabling -Wall for non-MSVC compilers and adding specific warnings for global constructors and destructors.

LANGUAGE: CMake
CODE:
if(SWIFT_COMPILER_IS_MSVC_LIKE)
  list(APPEND compile_flags "/W3")
else()
  list(APPEND compile_flags "-Wall")
endif()

list(APPEND compile_flags
  # C++ code in the runtime and standard library should generally avoid
  # introducing static constructors or destructors.
  "-Wglobal-constructors"
  "-Wexit-time-destructors")

foreach(flag ${compile_flags})
  check_cxx_compiler_flag("${flag}" cxx_compiler_flag_${flag}_is_supported)
  if(cxx_compiler_flag_${flag}_is_supported)
    list(APPEND CXX_COMPILE_FLAGS "${flag}")
  endif()
endforeach()
unset(compile_flags)

----------------------------------------

TITLE: Creating Swift Compiler Modules Library
DESCRIPTION: Function to create a library target from Swift compiler modules. Handles compilation options, dependencies, and platform-specific configurations.

LANGUAGE: cmake
CODE:
function(add_swift_compiler_modules_library name)
  cmake_parse_arguments(ALS
                        ""
                        "BOOTSTRAPPING;SWIFT_EXEC"
                        "DEPENDS"
                        ${ARGN})

  set(swift_compile_options
      "-color-diagnostics"
      "-Xfrontend" "-validate-tbd-against-ir=none"
      "${cxx_interop_flag}"
      "-Xfrontend" "-disable-target-os-checking"
      "-Xcc" "-std=c++17"
      "-Xcc" "-DCOMPILED_WITH_SWIFT" "-Xcc" "-DSWIFT_TARGET"
      "-Xcc" "-UIBOutlet" "-Xcc" "-UIBAction" "-Xcc" "-UIBInspectable")
  # ... additional implementation

----------------------------------------

TITLE: Defining Base Class with Class and Instance Methods in Swift
DESCRIPTION: This snippet defines a base class named BaseInHead with a class method and an instance method, both taking an Int32 argument.

LANGUAGE: Swift
CODE:
class BaseInHead {
  class func doIt(_ arg: Int32)
  func doIt(_ arg: Int32)
}

----------------------------------------

TITLE: Configuring Swift AST Section Importer Library in CMake
DESCRIPTION: Sets up the Swift AST Section Importer as a static library, links it with necessary dependencies, and configures LLVM availability. The library is built from ASTSectionImporter.cpp and linked with swiftBasic and LLVM core components.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftASTSectionImporter STATIC
  ASTSectionImporter.cpp
  LLVM_LINK_COMPONENTS core)
target_link_libraries(swiftASTSectionImporter PRIVATE
  swiftBasic)

set_swift_llvm_is_available(swiftASTSectionImporter)

----------------------------------------

TITLE: Setting Up Swift Syntax Modules and Installation
DESCRIPTION: Defines the list of Swift Syntax modules to be built and configures their installation rules. Includes special handling for Windows platform.

LANGUAGE: cmake
CODE:
set(SWIFT_SYNTAX_MODULES
  SwiftBasicFormat
  SwiftIfConfig
  SwiftParser
  SwiftParserDiagnostics
  SwiftDiagnostics
  SwiftSyntax
  SwiftOperators
  SwiftSyntaxBuilder
  SwiftSyntaxMacros
  SwiftSyntaxMacroExpansion
  SwiftCompilerPluginMessageHandling
  SwiftIDEUtils
  SwiftRefactor
  SwiftLibraryPluginProvider
)

if(CMAKE_SYSTEM_NAME MATCHES Windows)
  swift_install_in_component(TARGETS ${SWIFT_SYNTAX_MODULES}
                             RUNTIME
                             DESTINATION "bin"
                             COMPONENT swift-syntax-lib)
else()
  swift_install_in_component(TARGETS ${SWIFT_SYNTAX_MODULES}
                             LIBRARY
                             DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/host"
                             COMPONENT swift-syntax-lib)
endif()

----------------------------------------

TITLE: Configuring Swift Option Library Build
DESCRIPTION: Defines and configures the Swift option static library build with its dependencies and linkage requirements.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftOption STATIC
  Options.cpp
  SanitizerOptions.cpp)
add_dependencies(swiftOption
  SwiftOptions)
target_link_libraries(swiftOption PRIVATE
  swiftBasic)

----------------------------------------

TITLE: Script Extensions Property Mapping File
DESCRIPTION: Maps Unicode code points to their allowed script values, showing which characters can be used across multiple writing systems. The file uses a simple format of code point followed by supported scripts and a comment describing the character.

LANGUAGE: txt
CODE:
00B7          ; Avst Cari Copt Dupl Elba Geor Glag Gong Goth Grek Hani Latn Lydi Mahj Perm Shaw #Po MIDDLE DOT
02BC          ; Beng Cyrl Deva Latn Lisu Thai Toto #Lm   MODIFIER LETTER APOSTROPHE
02C7          ; Bopo Latn                      # Lm      CARON

----------------------------------------

TITLE: Setting Darwin Dependencies for Swift Reflection Test
DESCRIPTION: Conditionally sets Darwin dependencies based on SDK overlay build flag. If SWIFT_BUILD_SDK_OVERLAY is enabled, adds Darwin as a dependency; otherwise, keeps dependencies empty.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_reflection_test_darwin_dependencies Darwin)
else()
set(swift_reflection_test_darwin_dependencies)
endif()

----------------------------------------

TITLE: Swift Xcode Project Generator Command Usage
DESCRIPTION: Displays the full command-line usage for the Swift Xcode project generator script. It includes all available options and arguments for customizing the project generation process.

LANGUAGE: sh
CODE:
USAGE: swift-xcodegen [<options>] <build-dir>

ARGUMENTS:
  <build-dir>             The path to the Ninja build directory to generate for

LLVM PROJECTS:
  --clang/--no-clang      Generate an xcodeproj for Clang (default: --no-clang)
  --clang-tools-extra/--no-clang-tools-extra
                          When generating a project for Clang, whether to include clang-tools-extra (default: --clang-tools-extra)
  --lldb/--no-lldb        Generate an xcodeproj for LLDB (default: --no-lldb)
  --llvm/--no-llvm        Generate an xcodeproj for LLVM (default: --no-llvm)

SWIFT TARGETS:
  --swift-targets/--no-swift-targets
                          Generate targets for Swift files, e.g ASTGen, SwiftCompilerSources. Note
                          this by default excludes the standard library, see '--stdlib-swift'. (default: --swift-targets)
  --swift-dependencies/--no-swift-dependencies
                          When generating Swift targets, add dependencies (e.g swift-syntax) to the
                          generated project. This makes build times slower, but improves syntax
                          highlighting for targets that depend on them. (default: --swift-dependencies)

RUNNABLE TARGETS:
  --runnable-build-dir <runnable-build-dir>
                          If specified, runnable targets will use this build directory. Useful for
                          configurations where a separate debug build directory is used.
  --runnable-targets/--no-runnable-targets
                          Whether to add runnable targets for e.g swift-frontend. This is useful
                          for debugging in Xcode. (default: --runnable-targets)
  --build-runnable-targets/--no-build-runnable-targets
                          If runnable targets are enabled, whether to add a build action for them.
                          If false, they will be added as freestanding schemes. (default: --build-runnable-targets)

PROJECT CONFIGURATION:
  --compiler-libs/--no-compiler-libs
                          Generate targets for compiler libraries (default: --compiler-libs)
  --compiler-tools/--no-compiler-tools
                          Generate targets for compiler tools (default: --compiler-tools)
  --docs/--no-docs        Add doc groups to the generated projects (default: --docs)
  --stdlib, --stdlib-cxx/--no-stdlib, --no-stdlib-cxx
                          Generate a target for C/C++ files in the standard library (default: --stdlib)
  --stdlib-swift/--no-stdlib-swift
                          Generate targets for Swift files in the standard library. This requires
                          using Xcode with a main development Swift snapshot, and as such is
                          disabled by default.

                          A development snapshot is necessary to avoid spurious build/live issues
                          due to the fact that the stdlib is built using the just-built Swift
                          compiler, which may support features not yet supported by the Swift
                          compiler in Xcode's toolchain. (default: --no-stdlib-swift)
  --test-folders/--no-test-folders
                          Add folder references for test files (default: --test-folders)
  --unittests/--no-unittests
                          Generate a target for the unittests (default: --unittests)
  --infer-args/--no-infer-args
                          Whether to infer build arguments for files that don't have any, based
                          on the build arguments of surrounding files. This is mainly useful for
                          files that aren't built in the default config, but are still useful to
                          edit (e.g sourcekitdAPI-InProc.cpp). (default: --infer-args)
  --prefer-folder-refs/--no-prefer-folder-refs
                          Whether to prefer folder references for groups containing non-source
                          files (default: --prefer-folder-refs)
  --buildable-folders/--no-buildable-folders
                          Requires Xcode 16: Enables the use of "buildable folders", allowing
                          folder references to be used for compatible targets. This allows new
                          source files to be added to a target without needing to regenerate the
                          project.

                          Only supported for targets that have no per-file build settings. This
                          unfortunately means some Clang targes such as 'lib/Basic' and 'stdlib'
                          cannot currently use buildable folders. (default: --buildable-folders)

  --runtimes-build-dir <runtimes-build-dir>
                          Experimental: The path to a build directory for the new 'Runtimes/'
                          stdlib CMake build. This creates a separate 'SwiftRuntimes' project, along
                          with a 'Swift+Runtimes' workspace.

                          Note: This requires passing '-DCMAKE_EXPORT_COMPILE_COMMANDS=YES' to
                          CMake.

MISC:
  --project-root-dir <project-root-dir>
                          The project root directory, which is the parent directory of the Swift repo.
                          By default this is inferred from the build directory path.
  --output-dir <output-dir>
                          The output directory to write the Xcode project to. Defaults to the project
                          root directory.
  --log-level <log-level> The log level verbosity (default: info) (values: debug, info, note, warning, error)
  --parallel/--no-parallel
                          Parallelize generation of projects (default: --parallel)
  -q, --quiet             Quiet output; equivalent to --log-level warning

OPTIONS:
  -h, --help              Show help information.

----------------------------------------

TITLE: Defining Source Files for Swift SIL Optimizer in CMake
DESCRIPTION: This CMake snippet specifies the source files to be included in the swiftSILOptimizer target. It lists multiple C++ files that are part of the Swift SIL Optimizer, focusing on ARC-related optimizations and utilities.

LANGUAGE: CMake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  ARCBBState.cpp
  ARCLoopOpts.cpp
  ARCMatchingSet.cpp
  ARCRegionState.cpp
  ARCSequenceOpts.cpp
  ARCSequenceOptUtils.cpp
  GlobalARCSequenceDataflow.cpp
  GlobalLoopARCSequenceDataflow.cpp
  RCStateTransition.cpp
  RCStateTransitionVisitors.cpp
  RefCountState.cpp)

----------------------------------------

TITLE: Initializing CMake Modules and Options for Swift Toolchain
DESCRIPTION: Sets up the CMake module path and includes necessary Swift-specific modules for stdlib options, stdlib addition, and compatibility libraries.

LANGUAGE: CMake
CODE:
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../cmake/modules)
include(StdlibOptions)
include(AddSwiftStdlib)
include(CompatibilityLibs)

set(CXX_COMPILE_FLAGS)
set(CXX_LINK_FLAGS)

----------------------------------------

TITLE: Basic Swift Hello World Example
DESCRIPTION: Minimal Swift program demonstrating the simplest possible application structure.

LANGUAGE: swift
CODE:
print("hello world")

----------------------------------------

TITLE: Setting Swift Version Information
DESCRIPTION: Extracts and configures version information from SWIFT_VERSION string, setting up major, minor, and patch version numbers for compilation.

LANGUAGE: cmake
CODE:
string(REGEX REPLACE "([0-9]+)\\.[0-9]+(\\.[0-9]+)?" "\\1" SWIFT_VERSION_MAJOR
  ${SWIFT_VERSION})
string(REGEX REPLACE "[0-9]+\\.([0-9]+)(\\.[0-9]+)?" "\\1" SWIFT_VERSION_MINOR
  ${SWIFT_VERSION})

----------------------------------------

TITLE: Configuring Swift Reflection Fuzzer in CMake
DESCRIPTION: Defines the swift-reflection-fuzzer target as a Swift fuzzer host tool, specifies its source file, LLVM link components, and Swift component. It also sets up the target's link libraries, including the swiftRemoteInspection library.

LANGUAGE: CMake
CODE:
add_swift_fuzzer_host_tool(swift-reflection-fuzzer
  swift-reflection-fuzzer.cpp
  LLVM_LINK_COMPONENTS support
  SWIFT_COMPONENT testsuite-tools
  )
target_link_libraries(swift-reflection-fuzzer
                      PRIVATE
                        swiftRemoteInspection)

----------------------------------------

TITLE: Core Foundation Base Declarations in Swift
DESCRIPTION: Defines core imports, macro-like variables, and base function declarations. Includes Foundation and CoreFoundation framework imports along with basic variable and function declarations.

LANGUAGE: swift
CODE:
import Foundation
import CoreFoundation
import Dispatch
var MY_MACRO: Int32 { get }
var MACRO_DUP: Int32 { get }
func doSomethingInHead(_ arg: Int32)

----------------------------------------

TITLE: Configuring Glibc Module Map
DESCRIPTION: Generates and installs Glibc module maps for supported platforms and architectures.

LANGUAGE: CMake
CODE:
handle_gyb_source_single(glibc_modulemap_target
    SOURCE "${glibc_modulemap_source}"
    OUTPUT "${glibc_modulemap_out}"
    FLAGS
        "-DCMAKE_SDK=${sdk}")

----------------------------------------

TITLE: Configuring WatchOS Architecture Exclusions
DESCRIPTION: Removes 64-bit architectures from WatchOS build targets since they don't support back-deployment.

LANGUAGE: cmake
CODE:
list(REMOVE_ITEM SWIFT_SDK_WATCHOS_ARCHITECTURES "arm64" "arm64e")

----------------------------------------

TITLE: Setting LLVM Availability Flag
DESCRIPTION: Sets the LLVM availability flag for the Swift IDE library.

LANGUAGE: cmake
CODE:
set_swift_llvm_is_available(swiftIDE)

----------------------------------------

TITLE: Importing Swift Frameworks for Testing, 3D Modeling, and Image Processing
DESCRIPTION: This code snippet imports three Swift frameworks: XCTest for unit testing, SceneKit.ModelIO for 3D model input/output operations, and CoreImage.CIFilterBuiltins for accessing built-in Core Image filters. These imports suggest the project involves automated testing, 3D scene manipulation, and image processing functionalities.

LANGUAGE: Swift
CODE:
XCTest
SceneKit.ModelIO
CoreImage.CIFilterBuiltins

----------------------------------------

TITLE: Configuring Swift Differentiation Unit Test Library with CMake
DESCRIPTION: Sets up a Swift target library for differentiation unit tests. It specifies build types, source files, module dependencies, installation components, and build-specific settings for different platforms.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftDifferentiationUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed first. Module name is inferred from the filename.
  GYB_SOURCES DifferentiationUnittest.swift.gyb

  SWIFT_MODULE_DEPENDS _Differentiation StdlibUnittest
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Running Swift Xcode Project Generator
DESCRIPTION: Demonstrates the basic command to run the Swift Xcode project generator script. It takes a build directory as an argument and creates an Xcode project file.

LANGUAGE: sh
CODE:
./swift-xcodegen <build dir>

----------------------------------------

TITLE: Configuring SIL Optimizer Sources in CMake
DESCRIPTION: Defines the source files to be compiled into the swiftSILOptimizer target. These files implement various components of Swift's automatic differentiation system, including adjoint value handling, differentiation invocation, and cloning operations.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  ADContext.cpp
  AdjointValue.cpp
  Common.cpp
  DifferentiationInvoker.cpp
  JVPCloner.cpp
  LinearMapInfo.cpp
  PullbackCloner.cpp
  TangentBuilder.cpp
  Thunk.cpp
  VJPCloner.cpp)

----------------------------------------

TITLE: Setting Source Files and Output Directories in CMake
DESCRIPTION: Defines a list of source files and sets output directories for Swift shims.

LANGUAGE: CMake
CODE:
set(sources
  AssertionReporting.h
  CoreFoundationShims.h
  EmbeddedShims.h
  FoundationShims.h
  GlobalObjects.h
  HeapObject.h
  KeyPath.h
  LibcOverlayShims.h
  LibcShims.h
  MetadataSections.h
  ObjCShims.h
  Random.h
  RefCount.h
  Reflection.h
  RuntimeShims.h
  RuntimeStubs.h
  SwiftStdbool.h
  SwiftStddef.h
  SwiftStdint.h
  System.h
  Target.h
  ThreadLocalStorage.h
  UnicodeData.h
  Visibility.h
  _SwiftConcurrency.h
  _SwiftDistributed.h
  _SynchronizationShims.h

  module.modulemap
  )
set(output_dir "${SWIFTLIB_DIR}/shims")
set(output_dir_static "${SWIFTSTATICLIB_DIR}/shims")

----------------------------------------

TITLE: Executing Swift Library Resync Script
DESCRIPTION: Command to synchronize Swift standard library source files using the Resync.cmake script. This is a temporary solution during the new standard library build implementation.

LANGUAGE: sh
CODE:
$ cmake -P Resync.cmake

----------------------------------------

TITLE: Installing Swift C++ Interop Support Files in CMake
DESCRIPTION: This snippet sets up installation rules for the C++ interop support header, modulemap files, and related components using the swift_install_in_component function.

LANGUAGE: CMake
CODE:
swift_install_in_component(FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging"
    "${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging.modulemap"
    DESTINATION "include/swift"
    COMPONENT compiler)
swift_install_in_component(FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/module.modulemap"
    DESTINATION "include"
    COMPONENT compiler)

----------------------------------------

TITLE: Configuring SwiftOnoneSupport for Windows in CMake
DESCRIPTION: Creates an empty import library for SwiftOnoneSupport on Windows to ensure the import library is generated even when no symbols are exported in Debug mode.

LANGUAGE: CMake
CODE:
if(WINDOWS IN_LIST SWIFT_SDKS)
  # When building in Debug mode, the standard library provides the symbols that
  # we need and as such SwiftOnoneSupport does not need to provide any exported
  # interfaces.  This results in the import library being elided.  However,
  # we explicitly link against the SwiftOnoneSupport library when building
  # programs in Debug mode, and need the import library to be generated even if
  # nothing is exported.  Because we will still generate the DLL, create an
  # empty import library.
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def
    "LIBRARY swiftSwiftOnoneSupport\n"
    "EXPORTS\n")
  foreach(architecture ${SWIFT_SDK_WINDOWS_ARCHITECTURES})
    target_sources(swiftSwiftOnoneSupport-windows-${architecture} PRIVATE
      ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def)
    set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def
      PROPERTIES HEADER_FILE_ONLY TRUE)
  endforeach()
endif()

----------------------------------------

TITLE: Configuring Swift Stdlib Tool Build
DESCRIPTION: Adds the swift-stdlib-tool as a host tool component to the Swift compiler build system. The tool is compiled from swift-stdlib-tool.cpp source file.

LANGUAGE: cmake
CODE:
add_swift_host_tool(swift-stdlib-tool
  swift-stdlib-tool.cpp
  SWIFT_COMPONENT compiler)

----------------------------------------

TITLE: Plaid Method State Transition Syntax
DESCRIPTION: Example showing Plaid's syntax for declaring typestate transitions on methods, demonstrating preconditions and postconditions for state changes.

LANGUAGE: plaid
CODE:
public void open() [ClosedFile>>OpenFile]

----------------------------------------

TITLE: Base Class and Function Declarations
DESCRIPTION: Definition of a base class with class and instance methods, along with a standalone function declaration.

LANGUAGE: Swift
CODE:
func doSomethingInHead(_ arg: Int32)
class BaseInHead {
  class func doIt(_ arg: Int32)
  func doIt(_ arg: Int32)
}

----------------------------------------

TITLE: Configuring Dependencies and Compile Flags for Swift String Processing
DESCRIPTION: Sets up the core dependencies and compile flags for the String Processing library. Includes conditional compilation for static stdlib builds and library evolution support.

LANGUAGE: cmake
CODE:
set(swift_string_processing_link_libraries
  swiftCore
  swift_RegexParser)

set(swift_string_processing_compile_flags)

list(APPEND swift_string_processing_compile_flags
  "-DRESILIENT_LIBRARIES")

if(SWIFT_BUILD_STATIC_STDLIB)
  list(APPEND swift_string_processing_compile_flags
    "-Xfrontend" "-public-autolink-library" "-Xfrontend" "swift_RegexParser")
endif()

----------------------------------------

TITLE: Swift Compatibility Library Target Configuration
DESCRIPTION: Configures the swiftCompatibility50 static library build target with platform-specific settings, compilation flags, and deployment version requirements.

LANGUAGE: cmake
CODE:
set(library_name "swiftCompatibility50")

add_swift_target_library("${library_name}" STATIC
  ProtocolConformance.cpp
  Overrides.cpp

  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}

  C_COMPILE_FLAGS
    ${CXX_COMPILE_FLAGS}
    "-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY"
  LINK_FLAGS ${CXX_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

  INSTALL_IN_COMPONENT compiler
  INSTALL_WITH_SHARED)

----------------------------------------

TITLE: Setting Frontend Dependencies and Link Libraries
DESCRIPTION: Configures build dependencies and links required libraries for the Swift frontend. Includes core components like AST, SIL, IRGen, and optional syntax support based on build configuration.

LANGUAGE: cmake
CODE:
add_dependencies(swiftFrontend
  SwiftOptions)
target_link_libraries(swiftFrontend PRIVATE
  swiftAPIDigester
  swiftAST
  swiftConstExtract
  swiftIDE
  swiftSIL
  swiftOption
  swiftSILGen
  swiftSILOptimizer
  swiftIRGen
  swiftLocalization
  swiftSema
  swiftSerialization
  swiftSymbolGraphGen)

if (SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftFrontend
    PRIVATE
    swiftASTGen
  )

  add_dependencies(swiftFrontend
    swiftASTGen
  )
endif()

set_swift_llvm_is_available(swiftFrontend)

----------------------------------------

TITLE: Empty Swift File Comment
DESCRIPTION: A single-line comment indicating that the file is empty. This serves as a placeholder or intentional marker for an empty Swift file.

LANGUAGE: Swift
CODE:
// Empty

----------------------------------------

TITLE: Defining swiftOSLogTestHelper Library Target
DESCRIPTION: Configures the swiftOSLogTestHelper shared library target with source files, platform dependencies, SDK settings, and installation parameters. Includes configuration for multiple Apple platforms and build settings.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftOSLogTestHelper
  IS_SDK_OVERLAY
  SHARED

  OSLogTestHelper.swift
  OSLogMessage.swift
  OSLogIntegerFormatting.swift
  OSLogStringAlignment.swift
  OSLogIntegerTypes.swift
  OSLogStringTypes.swift
  OSLogNSObjectType.swift
  OSLogFloatingPointTypes.swift
  OSLogSwiftProtocols.swift
  OSLogPrivacy.swift
  OSLogFloatFormatting.swift

  SWIFT_MODULE_DEPENDS_IOS ${swift_oslog_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_OSX ${swift_oslog_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swift_oslog_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_oslog_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_XROS ${swift_oslog_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_oslog_darwin_dependencies}
  TARGET_SDKS ALL_APPLE_PLATFORMS
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT never_install
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Running Unit Tests for swift_build_support Module
DESCRIPTION: Command to execute unit tests for the swift_build_support Python module from the command line. This ensures the module's functionality is working as expected.

LANGUAGE: sh
CODE:
$ python3 utils/swift_build_support/run_tests.py

----------------------------------------

TITLE: Configuring Private Dependencies for swiftIRGen
DESCRIPTION: Defines private dependencies for swiftIRGen, including core Swift compiler components like AST, SIL, and optimization libraries.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftIRGen PRIVATE
  swiftAST
  swiftLLVMPasses
  swiftSIL
  swiftSILGen
  swiftSILOptimizer)

----------------------------------------

TITLE: Configuring SwiftOnoneSupport Bootstrapping in CMake
DESCRIPTION: Sets up bootstrapping options and creates library targets for stage 0 and stage 1 bootstrapping of SwiftOnoneSupport when in Debug mode and BOOTSTRAPPING.

LANGUAGE: CMake
CODE:
if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND BOOTSTRAPPING_MODE STREQUAL "BOOTSTRAPPING")

  set(swiftOnoneSupport_common_bootstrapping_options
    SHARED
    ${swiftOnoneSupport_common_options}
    SDK ${SWIFT_HOST_VARIANT_SDK}
    ARCHITECTURE ${SWIFT_HOST_VARIANT_ARCH}
    INSTALL_IN_COMPONENT
      "never_install")

  # Bootstrapping - stage 0

  add_swift_target_library_single(swiftSwiftOnoneSupport-bootstrapping0 swiftSwiftOnoneSupport
    ${swiftOnoneSupport_common_bootstrapping_options}
    FILE_DEPENDS swiftCore-bootstrapping0
    BOOTSTRAPPING 0)

  # Bootstrapping - stage 1

  add_swift_target_library_single(swiftSwiftOnoneSupport-bootstrapping1 swiftSwiftOnoneSupport
    ${swiftOnoneSupport_common_bootstrapping_options}
    FILE_DEPENDS swiftCore-bootstrapping1
    BOOTSTRAPPING 1)

endif()

----------------------------------------

TITLE: Extended Integer Formatting Implementation
DESCRIPTION: Comprehensive example showing custom integer formatting with radix support, demonstrating advanced text formatting capabilities.

LANGUAGE: swift
CODE:
protocol CustomStringConvertibleInteger : ExpressibleByIntegerLiteral, Comparable, SignedNumber, CustomStringConvertible {
  func %(lhs: Self, rhs: Self) -> Self
  func /(lhs: Self, rhs: Self) -> Self
  constructor(x: Int)
  func toInt() -> Int

  func format(_ radix: Int = 10, fill: String = " ", width: Int = 0) -> RadixFormat<This> {
    return RadixFormat(this, radix: radix, fill: fill, width: width)
  }
}

----------------------------------------

TITLE: Extended Integer Formatting Implementation
DESCRIPTION: Comprehensive example showing custom integer formatting with radix support, demonstrating advanced text formatting capabilities.

LANGUAGE: swift
CODE:
protocol CustomStringConvertibleInteger : ExpressibleByIntegerLiteral, Comparable, SignedNumber, CustomStringConvertible {
  func %(lhs: Self, rhs: Self) -> Self
  func /(lhs: Self, rhs: Self) -> Self
  constructor(x: Int)
  func toInt() -> Int

  func format(_ radix: Int = 10, fill: String = " ", width: Int = 0) -> RadixFormat<This> {
    return RadixFormat(this, radix: radix, fill: fill, width: width)
  }
}

----------------------------------------

TITLE: Conditional Swift Syntax Build Setup in CMake
DESCRIPTION: Checks if swift-syntax should be built and verifies the source path exists. Sets up initial conditions for the build process.

LANGUAGE: CMake
CODE:
if(NOT SWIFT_BUILD_SWIFT_SYNTAX)
  return()
endif()
if(NOT EXISTS "${SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE}")
  message(SEND_ERROR "swift-syntax is required to build the Swift compiler. Please run update-checkout or specify SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE")
  return()
endif()

----------------------------------------

TITLE: Adding Swift Host Tool: swift-scan-test
DESCRIPTION: Adds the swift-scan-test tool to the Swift project build. It specifies the source file, LLVM components, and build options.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-scan-test
  swift-scan-test.cpp
  LLVM_LINK_COMPONENTS support
  SWIFT_COMPONENT tools
  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY
  DOES_NOT_USE_SWIFT
)

----------------------------------------

TITLE: Displaying Code Completion Results for Int Type in Swift
DESCRIPTION: This snippet shows the code completion suggestions for the Int type in Swift. It includes type aliases, literal types, and keywords that are relevant to the Int type.

LANGUAGE: Swift
CODE:
found code completion token ANY_METATYPE at offset 1969
Begin completions, 4 items
Decl[TypeAlias]/CurrNominal:        Stride[#Int#]; name=Stride
Decl[TypeAlias]/CurrNominal:        IntegerLiteralType[#Int#]; name=IntegerLiteralType
Keyword/None:                       Type[#Int.Type#]; name=Type
Keyword/CurrNominal:                self[#Int#]; name=self

----------------------------------------

TITLE: Setting Compilation Flags for Swift Stubs in CMake
DESCRIPTION: Configures C/C++ compilation flags for Swift runtime stubs. It includes core runtime flags, export definitions, and include paths for Swift headers.

LANGUAGE: CMake
CODE:
set(swift_stubs_c_compile_flags ${SWIFT_RUNTIME_CORE_CXX_FLAGS})
list(APPEND swift_stubs_c_compile_flags -DswiftCore_EXPORTS)
list(APPEND swift_stubs_c_compile_flags -I${SWIFT_SOURCE_DIR}/include -I${SWIFT_SOURCE_DIR}/stdlib/public)

----------------------------------------

TITLE: Configuring Swift Runtime Unit Test Library Build
DESCRIPTION: CMake configuration that sets up the swiftRuntimeUnittest library target with platform-specific module dependencies, compilation flags, and installation settings. Includes support for multiple platforms including Android, Linux, FreeBSD, OpenBSD, Cygwin, Haiku, and Windows.

LANGUAGE: cmake
CODE:
set(swift_stdlib_unittest_compile_flags)

add_swift_target_library(swiftRuntimeUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed the first.  Module name is inferred from the
  # filename.
  RuntimeUnittest.swift

  ExclusivityTests.cpp

  SWIFT_MODULE_DEPENDS StdlibUnittest
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT
  C_COMPILE_FLAGS -I${SWIFT_SOURCE_DIR}/stdlib/include
  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Configuring Swift Driver Sources and Libraries in CMake
DESCRIPTION: Sets up source files and common libraries required for building the Swift driver tool. Defines a list of source files and required library dependencies.

LANGUAGE: cmake
CODE:
set(driver_sources_and_options
                driver.cpp
                sil_opt_main.cpp
                sil_func_extractor_main.cpp
                sil_nm_main.cpp
                sil_llvm_gen_main.cpp
                sil_passpipeline_dumper_main.cpp
                swift_dependency_tool_main.cpp
                swift_llvm_opt_main.cpp
                autolink_extract_main.cpp
                modulewrap_main.cpp
                swift_api_digester_main.cpp
                swift_cache_tool_main.cpp
                swift_symbolgraph_extract_main.cpp
                swift_synthesize_interface_main.cpp
                swift_parse_test_main.cpp)

set(driver_common_libs
                swiftAPIDigester
                swiftDriver
                swiftFrontendTool
                swiftSymbolGraphGen
                LLVMBitstreamReader)

----------------------------------------

TITLE: Empty Swift File
DESCRIPTION: An empty Swift source file containing only a comment.

LANGUAGE: swift
CODE:
// Empty

----------------------------------------

TITLE: Configuring Swift Glibc Platform Library
DESCRIPTION: Sets up build configuration for the Swift Glibc platform library, including source files, compiler flags, and target SDKs.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftGlibc ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
    ${swift_platform_sources}
    POSIXError.swift

    GYB_SOURCES
      ${swift_platform_gyb_sources}
      Glibc.swift.gyb

    SWIFT_COMPILE_FLAGS
      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}
      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
      ${swift_platform_compile_flags}
    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
    TARGET_SDKS "${swiftGlibc_target_sdks}"
    INSTALL_IN_COMPONENT sdk-overlay
    DEPENDS glibc_modulemap)

----------------------------------------

TITLE: Installing Swift Vim Integration Files with CMake
DESCRIPTION: This CMake command installs Swift-related files for Vim editor integration. It copies the 'ftdetect' and 'syntax' directories to the Vim installation path, excluding hidden files.

LANGUAGE: CMake
CODE:
swift_install_in_component(DIRECTORY
                            ftdetect
                            syntax
                           DESTINATION "share/vim/vim73"
                           COMPONENT editor-integration
                           PATTERN ".*" EXCLUDE)

----------------------------------------

TITLE: Configuring RegexParser Integration in Swift Compiler with CMake
DESCRIPTION: CMake configuration that conditionally builds the regex parser library into the Swift compiler. When SWIFT_BUILD_REGEX_PARSER_IN_COMPILER is enabled, it collects Swift source files from the _RegexParser directory and builds them as a static library. Otherwise, it creates a dummy target for dependency management.

LANGUAGE: cmake
CODE:
add_subdirectory(Sources)

# If requested, build the regular expression parser into the compiler itself.
if(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER)
  file(GLOB_RECURSE _COMPILER_REGEX_PARSER_SOURCES
    "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_RegexParser/*.swift")
  set(COMPILER_REGEX_PARSER_SOURCES)
  foreach(source ${_COMPILER_REGEX_PARSER_SOURCES})
    file(TO_CMAKE_PATH "${source}" source)
    list(APPEND COMPILER_REGEX_PARSER_SOURCES ${source})
  endforeach()
  message(STATUS "Using Experimental String Processing library for _CompilerRegexParser (${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}).")

  add_pure_swift_host_library(_CompilerRegexParser STATIC
    "${COMPILER_REGEX_PARSER_SOURCES}"
  )
else()
  # Dummy target for dependencies
  add_custom_target(_CompilerRegexParser)
endif()

----------------------------------------

TITLE: Creating Swift Demangling Libraries
DESCRIPTION: Creates two object libraries: swiftDemangling for core demangling functionality and swiftDemanglingCR for crash reporter integration. Includes special handling for Linux LTO compatibility.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftDemangling OBJECT_LIBRARY
  ${swiftDemanglingSources}
  C_COMPILE_FLAGS
    -DswiftCore_EXPORTS
    ${swift_demangling_cflags}
  C_COMPILE_FLAGS_LINUX -fno-lto
  INSTALL_IN_COMPONENT never_install)

add_swift_target_library(swiftDemanglingCR OBJECT_LIBRARY
  ${swiftDemanglingCRSources}
  C_COMPILE_FLAGS
    -DswiftCore_EXPORTS
    ${swift_demangling_cflags}
  INSTALL_IN_COMPONENT never_install)

----------------------------------------

TITLE: Configuring Swift Scan Library Build
DESCRIPTION: Configures the core build settings for libSwiftScan including library name, source files, and dependencies. Sets up the shared library with necessary source files and links required Swift components.

LANGUAGE: cmake
CODE:
set(SWIFT_SCAN_LIB_NAME "_InternalSwiftScan")

set(LLVM_EXPORTED_SYMBOL_FILE
    ${CMAKE_CURRENT_SOURCE_DIR}/libSwiftScan.exports)

add_swift_host_library(libSwiftScan SHARED
  libSwiftScan.cpp
  c-include-check.c
  SwiftCaching.cpp
  HAS_SWIFT_MODULES)

add_dependencies(libSwiftScan
  clang
  swiftDependencyScan)

target_link_libraries(libSwiftScan PRIVATE
    swiftDependencyScan
    swiftDriverTool
    swiftStaticMirror
    swiftRemoteInspection
    swiftCompilerModules)

----------------------------------------

TITLE: Setting LLVM Availability for swiftIRGen
DESCRIPTION: Configures LLVM availability settings for the swiftIRGen library.

LANGUAGE: cmake
CODE:
set_swift_llvm_is_available(swiftIRGen)

----------------------------------------

TITLE: Configuring Darwin Dependencies
DESCRIPTION: Conditional setting of Darwin dependencies based on SDK overlay build flag

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_private_thread_extras_darwin_dependencies Darwin)
else()
set(swift_private_thread_extras_darwin_dependencies)
endif()

----------------------------------------

TITLE: Basic CMake Project Configuration
DESCRIPTION: Sets up the initial CMake project configuration including language support, C++ standards, and output directories.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.28)

project(swift-inspect
  LANGUAGES C CXX Swift)

include(FetchContent)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

----------------------------------------

TITLE: Building XCTest for Android on Windows
DESCRIPTION: This snippet demonstrates how to build XCTest for Android using CMake and Ninja on Windows. It includes setting various parameters such as the build type, install prefix, and paths to Foundation and libdispatch.

LANGUAGE: cmd
CODE:
md S:\b\a\xctest
cd S:\b\a\xctest
cmake -C S:\swift-build\cmake\caches\android-armv7.cmake                                                                ^
  -C S:\swift-build\cmake\caches\android-armv7-swift-flags.cmake                                                        ^
  -G Ninja                                                                                                              ^
  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^
  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^
  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^
  -DCMAKE_TOOLCHAIN_FILE=S:\swift-build\cmake\toolchains\android.toolchain.cmake                                        ^
  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^
  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/andrfoid.platform/Developer/SDKs/android.sdk                   ^
  -DXCTEST_PATH_TO_FOUNDATION_BUILD=S:/b/a/foundation                                                                   ^
  -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=S:/swift-corelibs-libdispatch                                                     ^
  -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=S:/b/a/libdispatch                                                                 ^
  -DENABLE_TESTING=NO                                                                                                   ^
  S:/swift-corelibs-foundation
ninja

----------------------------------------

TITLE: Defining Swift Classes with Various Initializers
DESCRIPTION: This snippet defines two Swift classes, Bar and __PrivFooSub, with multiple initializers. Bar inherits from NSObject, while __PrivFooSub inherits from the previously defined Foo class.

LANGUAGE: Swift
CODE:
class Bar : NSObject {
  init!()
  init!(__noArgs: ())
  init!(__oneArg arg: Int32)
  init!(__twoArgs arg: Int32, other arg2: Int32)
  init!(__ arg: Int32)
}
class __PrivFooSub : Foo {
  convenience init!(__oneArg arg: Int32)
  convenience init!(__twoArgs arg: Int32, other arg2: Int32)
  convenience init!(__ arg: Int32)
  init()
}

----------------------------------------

TITLE: Setting Platform-Specific Compile Flags for Swift Stdlib Stubs in CMake
DESCRIPTION: Applies platform-specific compile flags, such as enabling ARC for a specific Objective-C file on Apple platforms.

LANGUAGE: CMake
CODE:
if(APPLE)
  set_property(SOURCE SwiftNativeNSXXXBaseARC.m
               APPEND_STRING
               PROPERTY COMPILE_FLAGS "-fobjc-arc")
endif()

----------------------------------------

TITLE: Setting up ABI Checker Symlinks
DESCRIPTION: Creates symlinks for the ABI baseline data in the build directory to match toolchain paths. Includes path configuration and custom commands for symlink creation.

LANGUAGE: cmake
CODE:
set(SWIFTLIB_DIR "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift")
set(dest "${SWIFTLIB_DIR}/${framework}")
set(source "${CMAKE_CURRENT_SOURCE_DIR}/${framework}")

add_custom_command(OUTPUT "${dest}"
                   DEPENDS "${source}"
                   COMMAND "${CMAKE_COMMAND}" "-E" "${SWIFT_COPY_OR_SYMLINK}" "${source}" "${dest}"
                   COMMENT "Symlinking ABI checker baseline data to ${dest}")
add_custom_target("symlink_abi_checker_data" ALL
                  DEPENDS "${dest}"
                  COMMENT "Symlinking ABI checker baseline data to ${dest}")
if(TARGET swift-frontend)
  add_dependencies(swift-frontend symlink_abi_checker_data)
endif()

----------------------------------------

TITLE: Configuring swiftConstExtract Static Library in CMake
DESCRIPTION: This snippet adds a Swift host library named swiftConstExtract as a static library, specifies its source file, links it with required dependencies, and sets LLVM availability.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftConstExtract STATIC
  ConstExtract.cpp
  )
target_link_libraries(swiftConstExtract PRIVATE
  swiftClangImporter
  swiftAST)

set_swift_llvm_is_available(swiftConstExtract)

----------------------------------------

TITLE: Empty Swift File
DESCRIPTION: An empty Swift source file that contains only a comment indicating its empty state.

LANGUAGE: swift
CODE:
// Empty

----------------------------------------

TITLE: Configuring Swift Remote Inspection Library Build
DESCRIPTION: CMake configuration that sets up compilation flags and builds the swiftRemoteInspection static library. Includes conditional reflection support, runtime flags, and links against core Swift libraries like demangling and LLVM support.

LANGUAGE: cmake
CODE:
set(swiftRemoteInspection_C_COMPILE_FLAGS)
if(SWIFT_ENABLE_REFLECTION)
  list(APPEND swiftRemoteInspection_C_COMPILE_FLAGS -DSWIFT_ENABLE_REFLECTION)
endif()

add_swift_target_library(swiftRemoteInspection STATIC
  MetadataSource.cpp
  TypeLowering.cpp
  TypeRef.cpp
  TypeRefBuilder.cpp
  C_COMPILE_FLAGS
    ${SWIFT_RUNTIME_CXX_FLAGS}
    -DswiftCore_EXPORTS
    ${swiftRemoteInspection_C_COMPILE_FLAGS}
  LINK_FLAGS ${SWIFT_RUNTIME_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES
    swiftLLVMSupport swiftDemangling swiftDemanglingCR
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT dev)

----------------------------------------

TITLE: Grapheme Break Test Case with Combining Character
DESCRIPTION: A test case demonstrating break behavior with a combining diaeresis character.

LANGUAGE: text
CODE:
÷ 0020 × 0308 ÷ 0020 ÷	#  ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]

----------------------------------------

TITLE: Copying Swift Benchmark Files with CMake
DESCRIPTION: This snippet uses CMake's file(COPY) command to copy multiple benchmark-related files to the Swift binary directory. It sets specific file permissions for each copied file, ensuring proper access rights.

LANGUAGE: CMake
CODE:
file(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_GuardMalloc
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

file(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_RuntimeLeaksRunner
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

file(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_QuickCheck
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

file(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_DTrace
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_Driver
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/compare_perf_tests.py
     DESTINATION "${swift-bin-dir}"
     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

----------------------------------------

TITLE: Configuring Swift Private Libc Extras Build Flags
DESCRIPTION: Sets up conditional compilation flags based on Swift standard library features like environ and static print support.

LANGUAGE: cmake
CODE:
set(swift_private_libc_extras_flags)
if(SWIFT_STDLIB_HAS_ENVIRON)
  set(swift_private_libc_extras_flags "-D" "SWIFT_STDLIB_HAS_ENVIRON")
endif()

if(SWIFT_STDLIB_STATIC_PRINT)
  list(APPEND swift_private_libc_extras_flags "-D" "SWIFT_STDLIB_STATIC_PRINT")
endif()

----------------------------------------

TITLE: Swift Symbol Mangling Error
DESCRIPTION: Error message showing failure to re-mangle an extremely long symbol identifier in Swift. The symbol appears to be a complex type signature with multiple components.

LANGUAGE: swift
CODE:
Error: (pos) unable to re-mangle $sBf32__t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_tN

----------------------------------------

TITLE: Configuring Data Files for Swift Migrator in CMake
DESCRIPTION: Sets up a list of JSON data files for various Apple platforms and versions to be used by the Swift Migrator.

LANGUAGE: CMake
CODE:
set(datafiles
  macos4.json
  ios4.json
  tvos4.json
  watchos4.json
  overlay4.json
  macos42.json
  ios42.json
  tvos42.json
  watchos42.json
  overlay42.json
)

----------------------------------------

TITLE: Configuring and Building Swift Static Mirror Library with CMake
DESCRIPTION: This snippet sets up the Swift Static Mirror library build configuration. It defines the library name, sets up dependencies, links required libraries, and configures build properties. The library is built as a shared library with specific symbol exports and link options.

LANGUAGE: CMake
CODE:
# Use an 'internal' name, for now
set(SWIFT_SCAN_LIB_NAME "_InternalSwiftStaticMirror")

set(LLVM_EXPORTED_SYMBOL_FILE
    ${CMAKE_CURRENT_SOURCE_DIR}/libStaticMirror.exports)

add_swift_host_library(libStaticMirror SHARED
  libStaticMirror.cpp
  c-include-check.c
  LLVM_LINK_COMPONENTS object support
)
if(NOT SWIFT_BUILT_STANDALONE AND NOT CMAKE_C_COMPILER_ID MATCHES Clang)
  add_dependencies(libStaticMirror clang)
endif()

add_dependencies(libStaticMirror
    swiftStaticMirror)

target_link_libraries(libStaticMirror PRIVATE
    swiftStaticMirror
    swiftRemoteInspection)

set_target_properties(libStaticMirror
    PROPERTIES
    OUTPUT_NAME ${SWIFT_SCAN_LIB_NAME})

add_llvm_symbol_exports(libStaticMirror ${LLVM_EXPORTED_SYMBOL_FILE})

# Adds -dead_strip option
add_link_opts(libStaticMirror)

add_dependencies(static-mirror-lib libStaticMirror)

----------------------------------------

TITLE: Swift Generic Type Symbol Mappings
DESCRIPTION: Mapping of mangled Swift generic type symbols showing how generic type parameters and constraints are encoded in the symbol names.

LANGUAGE: swift
CODE:
_TtGSPSi_ ---> UnsafePointer<Int>
_TtGSpSi_ ---> UnsafeMutablePointer<Int>
_TtGSaSS_ ---> [String]
_TtGSqSS_ ---> String?
_TtGSQSS_ ---> String!

----------------------------------------

TITLE: Configuring swiftLLVMSupport Library in CMake for Swift Core
DESCRIPTION: This CMake snippet defines the swiftLLVMSupport library, sets its source files, compiler options, and installation rules. It conditionally adds a compiler definition based on the presence of ASL (Apple System Log) support and installs the library if not building shared libraries.

LANGUAGE: cmake
CODE:
add_library(swiftLLVMSupport OBJECT
  ErrorHandling.cpp
  Hashing.cpp
  MemAlloc.cpp
  SmallPtrSet.cpp
  SmallVector.cpp
  StringRef.cpp)
target_compile_options(swiftLLVMSupport
  PRIVATE
    $<$<BOOL:${SwiftCore_HAS_ASL}>:-DSWIFT_STDLIB_HAS_ASL>)

if(NOT BUILD_SHARED_LIBS)
  install(TARGETS swiftLLVMSupport
    EXPORT SwiftCoreTargets
    COMPONENT SwiftCore_runtime)
endif()

----------------------------------------

TITLE: Checking C++ Interop Version in Swift Context
DESCRIPTION: Example of how to check C++ interoperability version using LangOpts in Swift context to guard breaking changes.

LANGUAGE: cpp
CODE:
if (SwiftContext.LangOpts.isCxxInteropCompatVersionAtLeast(version::getUpcomingCxxInteropCompatVersion())) {
  // ... breaking change ...
}

----------------------------------------

TITLE: Swift Clang Importer Library Definition
DESCRIPTION: Defines the swiftClangImporter static library with its source files and configures private link dependencies.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftClangImporter STATIC
  CFTypeInfo.cpp
  ClangAdapter.cpp
  ClangClassTemplateNamePrinter.cpp
  ClangDerivedConformances.cpp
  ClangDiagnosticConsumer.cpp
  ClangImporter.cpp
  ClangImporterRequests.cpp
  ClangIncludePaths.cpp
  ClangModuleDependencyScanner.cpp
  ClangSourceBufferImporter.cpp
  SwiftDeclSynthesizer.cpp
  DWARFImporter.cpp
  ImportDecl.cpp
  ImportEnumInfo.cpp
  ImportMacro.cpp
  ImportName.cpp
  ImportType.cpp
  Serializability.cpp
  SwiftLookupTable.cpp
)
target_link_libraries(swiftClangImporter PRIVATE
  swiftAST
  swiftParse
  clangTooling
  LLVMBitstreamReader)

----------------------------------------

TITLE: Running SIL Bug Reducer with SIL Reduction in Shell
DESCRIPTION: This snippet demonstrates how to run the bug_reducer.py script with the --reduce-sil option to reduce both passes and the test case size.

LANGUAGE: shell
CODE:
./swift/utils/bug-reducer/bug_reducer.py \
    opt \
    --sdk=$(xcrun --sdk macosx --toolchain default --show-sdk-path) \
    --module-name=${MODULE_NAME} \
    --work-dir=${PWD}/bug_reducer \
    --module-cache=${PWD}/bug_reducer/module-cache \
    --reduce-sil \
    ${SWIFT_BUILD_DIR} \
    ${OUTPUT_SIB}

----------------------------------------

TITLE: Configuring Embedded Swift Volatile Library Build
DESCRIPTION: Sets up build targets for embedded versions of the Swift Volatile library. It iterates through specified target triples, creating custom targets for each architecture and module combination.

LANGUAGE: CMake
CODE:
if(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)
  add_custom_target(embedded-volatile)
  add_dependencies(embedded-libraries embedded-volatile)
  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})
    string(REGEX REPLACE "[ \t]+" ";" list "${entry}")
    list(GET list 0 arch)
    list(GET list 1 mod)
    list(GET list 2 triple)

    set(SWIFT_SDK_embedded_ARCH_${arch}_MODULE "${mod}")
    set(SWIFT_SDK_embedded_LIB_SUBDIR "embedded")
    set(SWIFT_SDK_embedded_ARCH_${arch}_TRIPLE "${triple}")
    add_swift_target_library_single(
      embedded-volatile-${mod}
      swift_Volatile
      ONLY_SWIFTMODULE
      IS_SDK_OVERLAY IS_FRAGILE

      Volatile.swift
      
      SWIFT_COMPILE_FLAGS
        -Xcc -ffreestanding -enable-experimental-feature Embedded
        -parse-stdlib
      C_COMPILE_FLAGS
        -ffreestanding
      MODULE_DIR "${CMAKE_BINARY_DIR}/lib/swift/embedded"
      SDK "embedded"
      ARCHITECTURE "${arch}"
      DEPENDS embedded-stdlib-${mod}
      INSTALL_IN_COMPONENT stdlib
      )
    add_dependencies(embedded-volatile embedded-volatile-${mod})
  endforeach()
endif()

----------------------------------------

TITLE: Grapheme Break Property Control Ranges
DESCRIPTION: Defines ranges of Control characters including basic controls, format characters, and surrogates.

LANGUAGE: unicode
CODE:
0000..0009    ; Control # Cc  [10] <control-0000>..<control-0009>
000B..000C    ; Control # Cc   [2] <control-000B>..<control-000C>
000E..001F    ; Control # Cc  [18] <control-000E>..<control-001F>

----------------------------------------

TITLE: Initializing CMake Configuration for Swift Benchmarks
DESCRIPTION: Sets up initial CMake configuration including minimum version requirement and custom module paths

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.19.6)

# Add path for custom CMake modules.
list(APPEND CMAKE_MODULE_PATH
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

# Load utility modules.
include(SwiftBenchmarkUtils)

----------------------------------------

TITLE: Conditional Darwin Dependencies for SwiftPrivate in CMake
DESCRIPTION: Sets Darwin dependencies for SwiftPrivate based on whether SDK overlay is being built.

LANGUAGE: CMake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_swiftprivate_darwin_dependencies Darwin)
else()
set(swift_swiftprivate_darwin_dependencies)
endif()

----------------------------------------

TITLE: Conditional Source File Inclusion in CMake
DESCRIPTION: Adds platform-specific source files based on the presence of XPC support on Apple platforms or in-process library configuration.

LANGUAGE: cmake
CODE:
if(APPLE AND HAVE_XPC_H)
  target_sources(sourcekitdAPI PRIVATE
    sourcekitdAPI-XPC.cpp)
elseif(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)
  target_sources(sourcekitdAPI PRIVATE
    sourcekitdAPI-InProc.cpp)
endif()

----------------------------------------

TITLE: Configuring Swift SDK Overlay Test Modules
DESCRIPTION: Conditional CMake configuration that determines which test modules and support libraries to build based on SDK overlay settings, reflection capabilities, and platform-specific requirements. Includes logic for DifferentiationUnittest, runtime tests, Unicode tests, and platform-specific components.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY
   OR (SWIFT_BUILD_TEST_SUPPORT_MODULES
       AND NOT SWIFT_BUILD_DYNAMIC_SDK_OVERLAY_default
       AND (SWIFT_ENABLE_REFLECTION
            OR NOT SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)))
  if(SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING)
    add_subdirectory(DifferentiationUnittest)
  endif()
  add_subdirectory(SwiftPrivate)
  add_subdirectory(RuntimeUnittest)
  add_subdirectory(StdlibUnicodeUnittest)
  add_subdirectory(StdlibCollectionUnittest)
  add_subdirectory(SwiftPrivateLibcExtras)
  add_subdirectory(SwiftPrivateThreadExtras)
  add_subdirectory(StdlibUnittest)
  add_subdirectory(OSLog)

  if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    add_subdirectory(StdlibUnittestFoundationExtras)
  endif()
  if (SWIFT_INCLUDE_TESTS AND (NOT CMAKE_SYSTEM_NAME STREQUAL "Windows"))
    add_subdirectory(SwiftReflectionTest)
  endif()
endif()

----------------------------------------

TITLE: Setting SwiftPrivate Compile Flags in CMake
DESCRIPTION: Defines compile flags for the SwiftPrivate library, including parsing the standard library and disabling access control.

LANGUAGE: CMake
CODE:
set(swift_swiftprivate_compile_flags
    "-parse-stdlib"
    "-Xfrontend" "-disable-access-control")

----------------------------------------

TITLE: Configuring Platform-Specific Export Symbols
DESCRIPTION: Sets the exported symbol file path based on the target platform, using a Darwin-specific file for macOS and a generic file for other platforms.

LANGUAGE: cmake
CODE:
if("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
  set(EXPORTED_SYMBOL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/sourcekitdInProc-darwin.exports")
else()
  set(EXPORTED_SYMBOL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/sourcekitdInProc.exports")
endif()

----------------------------------------

TITLE: Setting Darwin-Specific Properties for SourceKitD Test in CMake
DESCRIPTION: For Darwin systems, sets the install RPATH and adds a linker flag to export the main symbol. Also configures code coverage if SWIFT_ANALYZE_CODE_COVERAGE is set.

LANGUAGE: cmake
CODE:
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set_target_properties(sourcekitd-test PROPERTIES
    INSTALL_RPATH "@executable_path/../lib")
  target_link_options(sourcekitd-test PRIVATE
    "LINKER:-exported_symbol,_main")
endif()
if(SWIFT_ANALYZE_CODE_COVERAGE)
  set_property(TARGET sourcekitd-test APPEND_STRING PROPERTY
    LINK_FLAGS " -fprofile-instr-generate -fcoverage-mapping")
endif()

----------------------------------------

TITLE: Testing Error Handling Scenarios
DESCRIPTION: Validates error handling for invalid arguments, missing values, and incorrect parameter types.

LANGUAGE: shell
CODE:
RUN: not %Benchmark_O --bogus 2>&1 \
RUN:              | %FileCheck %s --check-prefix ARGPARSE

----------------------------------------

TITLE: Configuring Swift Runtime Compile Definitions
DESCRIPTION: Sets up compiler definitions for the runtime library, including feature flags, platform capabilities, and build configurations.

LANGUAGE: cmake
CODE:
target_compile_definitions(swiftRuntime
  PRIVATE
    -DSWIFT_RUNTIME
    -DSWIFT_TARGET_LIBRARY_NAME=swiftRuntimeCore
    $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>
    [... additional definitions omitted for brevity ...]

----------------------------------------

TITLE: Representing Resilient Inline-Allocated Swift Value Type in C++
DESCRIPTION: C++ class representation for resilient or opaque layout inline-allocated Swift value types like URL, using an opaque inline buffer with alignment considerations.

LANGUAGE: c++
CODE:
class Foundation::URL {
  ...
  uintptr_t pointer;         // pointer has alignment to compute buffer offset?
  alignas(N) char buffer[M]; // Swift value is stored here.
};

----------------------------------------

TITLE: Configuring Swift Man Page Installation in CMake
DESCRIPTION: CMake configuration that includes the SwiftManpage module and sets up the man page documentation for Swift. The configuration specifies the source file location, page header, base filename, man section number, and installation component.

LANGUAGE: cmake
CODE:
include(SwiftManpage)

manpage(
    SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/swift.pod"
    PAGE_HEADER "Swift Documentation"
    MAN_FILE_BASENAME swift
    MAN_SECTION 1
    INSTALL_IN_COMPONENT compiler)

----------------------------------------

TITLE: Executing SIL Bug Reducer in Python and Shell
DESCRIPTION: This snippet demonstrates how to invoke the bug_reducer.py script with various command-line arguments to reduce bugs in Swift Intermediate Language (SIL) files.

LANGUAGE: shell
CODE:
./swift/utils/bug-reducer/bug_reducer.py \
    opt \
    --sdk=$(xcrun --sdk macosx --toolchain default --show-sdk-path) \
    --module-name=${MODULE_NAME} \
    --work-dir=${PWD}/bug_reducer \
    --module-cache=${PWD}/bug_reducer/module-cache \
    ${SWIFT_BUILD_DIR} \
    ${SIB_FILE}

----------------------------------------

TITLE: Splitting Embedded and Normal Sources in CMake
DESCRIPTION: Defines a function to split source files into embedded and normal lists based on annotations.

LANGUAGE: CMake
CODE:
function(split_embedded_sources)
  cmake_parse_arguments(SPLIT1 "" "OUT_LIST_EMBEDDED;OUT_LIST_NORMAL" "EMBEDDED;NORMAL" ${ARGN})
  string(REPLACE "EMBEDDED" "NORMAL" ARGN2 "${ARGN}")
  cmake_parse_arguments(SPLIT2 "" "OUT_LIST_EMBEDDED;OUT_LIST_NORMAL" "EMBEDDED;NORMAL" ${ARGN2})
  set(${SPLIT1_OUT_LIST_EMBEDDED} "${SPLIT1_EMBEDDED}" PARENT_SCOPE)
  set(${SPLIT1_OUT_LIST_NORMAL} "${SPLIT2_NORMAL}" PARENT_SCOPE)
endfunction()

----------------------------------------

TITLE: Finding Pygments Lexer Directory
DESCRIPTION: Shell commands to locate the Pygments lexer installation directory

LANGUAGE: shell
CODE:
$ cd /Library/Python
$ find . -name lexers

----------------------------------------

TITLE: Platform-Specific Object File Configuration
DESCRIPTION: Configures platform-specific runtime object files based on the object format (ELF, COFF) and sets up their installation paths.

LANGUAGE: cmake
CODE:
string(TOLOWER "${SwiftCore_OBJECT_FORMAT}x" SwiftCore_OBJECT_FORMAT)
if("${SwiftCore_OBJECT_FORMAT}" STREQUAL "elfx")
  add_library(swiftrt OBJECT SwiftRT-ELF-WASM.cpp)
  [... configuration continues ...]
elseif("${SwiftCore_OBJECT_FORMAT}" STREQUAL "coffx")
  add_library(swiftrtT OBJECT SwiftRT-COFF.cpp)
  [... configuration continues ...]
endif()

----------------------------------------

TITLE: Configuring Swift Unicode Unit Test Library Build
DESCRIPTION: Defines a Swift target library for Unicode unit testing with platform-specific module dependencies and build configurations. Includes test files for various Unicode operations like collation, scalar properties, and text segmentation.

LANGUAGE: cmake
CODE:
set(swift_stdlib_unittest_compile_flags)

add_swift_target_library(swiftStdlibUnicodeUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  # This file should be listed the first.  Module name is inferred from the
  # filename.
  StdlibUnicodeUnittest.swift
  Collation.swift
  UnicodeScalarProperties.swift
  GraphemeBreaking.swift
  WordBreaking.swift

  SWIFT_MODULE_DEPENDS StdlibUnittest
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT
  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Including Client and Service Subdirectories in CMake Build
DESCRIPTION: CMake commands to include the Client and Service subdirectories in the build process. This enables CMake to process the CMakeLists.txt files in these subdirectories as part of the overall project build.

LANGUAGE: cmake
CODE:
add_subdirectory(Client)
add_subdirectory(Service)

----------------------------------------

TITLE: Defining Swift Stubs Sources in CMake
DESCRIPTION: Sets up variables containing source files for Swift runtime stubs, including C++ and Unicode-related files. These sources are used to build the core Swift runtime functionality.

LANGUAGE: CMake
CODE:
set(swift_stubs_sources
    Assert.cpp
    GlobalObjects.cpp
    LibcShims.cpp
    Random.cpp
    Stubs.cpp
    ThreadLocalStorage.cpp
    MathStubs.cpp
    Unicode/UnicodeData.cpp
    Unicode/UnicodeGrapheme.cpp
    Unicode/UnicodeNormalization.cpp
    Unicode/UnicodeScalarProps.cpp
    Unicode/UnicodeWord.cpp
)

----------------------------------------

TITLE: Configuring Darwin-Specific Framework Build
DESCRIPTION: Sets up the framework build configuration for macOS, including framework headers, module map, and application extension settings.

LANGUAGE: cmake
CODE:
add_sourcekit_framework(sourcekitdInProc
  ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h
  ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/plugin.h
  ${CMAKE_CURRENT_SOURCE_DIR}/CodeCompletionSwiftInterop.h
  ${sourcekitdInProc_args}
  MODULEMAP module.modulemap
  INSTALL_IN_COMPONENT sourcekit-inproc
  HAS_SWIFT_MODULES
)

----------------------------------------

TITLE: Commenting ABI Additions for x86_64 in Swift
DESCRIPTION: This comment indicates that the following code will contain ABI additions specifically for the x86_64 architecture. These additions are likely to be architecture-specific optimizations or implementations.

LANGUAGE: Swift
CODE:
// ABI additions for x86_64 only.

----------------------------------------

TITLE: Setting Swift Compiler Options
DESCRIPTION: Configures compiler options specifically for Swift code compilation, including module settings, optimization flags, and runtime compatibility options.

LANGUAGE: cmake
CODE:
add_compile_options(
  $<$<COMPILE_LANGUAGE:Swift>:-explicit-module-build>
  "$<$<COMPILE_LANGUAGE:Swift>:-nostdlibimport>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-library-level api>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-runtime-compatibility-version none>"
  "$<$<COMPILE_LANGUAGE:Swift>:-disable-autolinking-runtime-compatibility-dynamic-replacements>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-strict-memory-safety>"

----------------------------------------

TITLE: Setting Visual Studio Environment Variables for Windows Cross-compilation
DESCRIPTION: Configuration of Visual Studio environment variables required for Windows build targeting Windows 10 SDK revision 10.10.586. Sets the UCRT version, SDK directory, and Visual Studio installation path.

LANGUAGE: bash
CODE:
# Visual Studio 2015 does not have VCToolsInstallDir, use VCINSTALLDIR's value
export UCRTVersion=10.0.10586.0
export UniversalCRTSdkDir=".../Windows Kits/10"
export VCToolsInstallDir=".../Microsoft Visual Studio/2017/Community"

----------------------------------------

TITLE: Configuring Swift Project Subdirectories and Component Installation
DESCRIPTION: CMake configuration that handles subdirectory inclusion and component installation for Swift project. Sets up installation paths for Emacs integration files, API tools, and LLVM FileCheck utility.

LANGUAGE: cmake
CODE:
add_subdirectory(vim)
add_subdirectory(lldb)
add_subdirectory(api_checker)

swift_install_in_component(FILES swift-mode.el
                           DESTINATION "share/emacs/site-lisp"
                           COMPONENT editor-integration)

swift_install_in_component(PROGRAMS swift-api-dump.py
                           DESTINATION bin
                           COMPONENT tools)

# We install LLVM's FileCheck, if requested.
file(TO_CMAKE_PATH "${LLVM_BUILD_BINARY_DIR}/bin/FileCheck${CMAKE_EXECUTABLE_SUFFIX}" _SWIFT_UTILS_FILECHECK)
swift_install_in_component(PROGRAMS "${_SWIFT_UTILS_FILECHECK}"
                           DESTINATION bin
                           COMPONENT llvm-toolchain-dev-tools)

----------------------------------------

TITLE: Generating SIB File for SIL Bug Reducer in Shell
DESCRIPTION: This snippet shows how to generate a Swift Intermediate Bundle (SIB) file with performance optimizations disabled, which is used as input for the bug reducer.

LANGUAGE: shell
CODE:
${SWIFTC_CMDLINE} -emit-sib -Xllvm -disable-sil-optzns -O -o ${OUTPUT}.sib

----------------------------------------

TITLE: Configuring Embedded Swift Concurrency Library
DESCRIPTION: Sets up the build process for the embedded version of the Swift Concurrency library, including target creation and installation for various architectures.

LANGUAGE: CMake
CODE:
if(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB AND SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY)
  add_custom_target(embedded-concurrency)
  add_dependencies(embedded-libraries embedded-concurrency)

  set(SWIFT_ENABLE_REFLECTION OFF)
  set(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT OFF)
  set(SWIFT_STDLIB_STABLE_ABI OFF)
  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP OFF)
  set(SWIFT_CONCURRENCY_USES_DISPATCH FALSE)
  set(SWIFT_STDLIB_SINGLE_THREADED_CONCURRENCY TRUE)
  set(SWIFT_STDLIB_CONCURRENCY_TRACING FALSE)
  set(SWIFT_STDLIB_HAS_ENVIRON FALSE)
  set(SWIFT_STDLIB_HAS_ASL FALSE)

  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})
    string(REGEX REPLACE "[ \t]+" ";" list "${entry}")
    list(GET list 0 arch)
    list(GET list 1 mod)
    list(GET list 2 triple)

    # ... (architecture-specific setup)

    add_swift_target_library_single(
      embedded-concurrency-${mod}
      swift_Concurrency
      STATIC
      IS_STDLIB IS_FRAGILE

      ${SWIFT_RUNTIME_CONCURRENCY_C_SOURCES}
      ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_SOURCES}
      ${SWIFT_RUNTIME_CONCURRENCY_EMBEDDED_SWIFT_SOURCES}

      SWIFT_COMPILE_FLAGS
        ${extra_swift_compile_flags} -enable-experimental-feature Embedded
        -parse-stdlib -DSWIFT_CONCURRENCY_EMBEDDED
        -Xfrontend -emit-empty-object-file
        ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_FLAGS}
      C_COMPILE_FLAGS
        ${extra_c_compile_flags} ${SWIFT_RUNTIME_CONCURRENCY_C_FLAGS} -DSWIFT_CONCURRENCY_EMBEDDED=1 -DSWIFT_RUNTIME_EMBEDDED=1
      MODULE_DIR "${CMAKE_BINARY_DIR}/lib/swift/embedded"
      SDK "embedded"
      ARCHITECTURE "${mod}"
      DEPENDS embedded-stdlib-${mod}
      INSTALL_IN_COMPONENT stdlib
      )
    # ... (installation commands)

    add_swift_target_library_single(
      embedded-concurrency-default-executor-${mod}
      swift_ConcurrencyDefaultExecutor
      STATIC
      IS_FRAGILE

      CooperativeGlobalExecutor.cpp

      C_COMPILE_FLAGS ${extra_c_compile_flags}
      MODULE_DIR "${CMAKE_BINARY_DIR}/lib/swift/embedded"
      SDK "embedded"
      ARCHITECTURE "${mod}"
      DEPENDS embedded-stdlib-${mod}
      INSTALL_IN_COMPONENT stdlib
      )
    # ... (installation commands)
  endforeach()

  # ... (header file copying and installation)
endif()

----------------------------------------

TITLE: Basic Unknown Warning Group Example in Swift
DESCRIPTION: Demonstrates how Swift compiler responds to an unknown warning group specified in compilation flags. The compiler emits a warning when encountering an unrecognized warning group.

LANGUAGE: sh
CODE:
swiftc -Werror non_existing_group file.swift
<unknown>:0: warning: unknown warning group: 'non_existing_group'

----------------------------------------

TITLE: Demonstrating SROA with Tuple Fragments in Swift SIL
DESCRIPTION: Shows how Scalar Replacement of Aggregates (SROA) uses tuple fragments in debug values to represent split tuple elements.

LANGUAGE: swift
CODE:
alloc_stack $(Int, Int), var, name "pair"
// -->
alloc_stack $Int, var, name "pair", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):0
alloc_stack $Int, var, name "pair", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):1
// -->
alloc_stack $Builtin.Int64, var, name "pair", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):0:op_fragment:#Int._value
alloc_stack $Builtin.Int64, var, name "pair", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):1:op_fragment:#Int._value

----------------------------------------

TITLE: Setting Up SDK Architecture Dependencies
DESCRIPTION: Iterates through available SDKs and their architectures to establish dependencies between Swift Reflection Test variants and corresponding reflection test binaries. Excludes LINUX_STATIC SDK from the configuration.

LANGUAGE: cmake
CODE:
  foreach(SDK ${SWIFT_SDKS})
    if ("${SDK}" STREQUAL "LINUX_STATIC")
      continue()
    endif()

    foreach(ARCH ${SWIFT_SDK_${SDK}_ARCHITECTURES})
      set(VARIANT_SUFFIX "-${SWIFT_SDK_${SDK}_LIB_SUBDIR}-${ARCH}")
      add_dependencies("swiftSwiftReflectionTest${VARIANT_SUFFIX}"
        "swift-reflection-test${VARIANT_SUFFIX}")
    endforeach()
  endforeach()

----------------------------------------

TITLE: Installing Module Maps and API Notes
DESCRIPTION: Installs the module maps and API notes files to the specified data directory.

LANGUAGE: cmake
CODE:
install(FILES
  ucrt.modulemap
  vcruntime.apinotes
  vcruntime.modulemap
  winsdk.modulemap
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR})

----------------------------------------

TITLE: Configuring XPC Service Build Options in CMake
DESCRIPTION: Checks for XPC header availability and configures SourceKit XPC service build options. Sets default build behavior based on header presence and SWIFT_BUILD_SOURCEKIT flag.

LANGUAGE: cmake
CODE:
include(CheckIncludeFiles)
check_include_files("xpc/xpc.h" HAVE_XPC_H)

if(HAVE_XPC_H AND SWIFT_BUILD_SOURCEKIT)
  set(BUILD_SOURCEKIT_XPC_SERVICE_default TRUE)
else()
  set(BUILD_SOURCEKIT_XPC_SERVICE_default FALSE)
endif()

option(BUILD_SOURCEKIT_XPC_SERVICE
  "Whether or not the SourceKit XPC service should be built"
  ${BUILD_SOURCEKIT_XPC_SERVICE_default})

----------------------------------------

TITLE: Configuring and Building BlocksRuntimeStub Library for Swift Tests
DESCRIPTION: This CMake script configures and builds the BlocksRuntimeStub library for various Swift SDK and architecture combinations. It sets up the library as a shared library, configures output directories, and handles dependencies in unified builds.

LANGUAGE: CMake
CODE:
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../test/cmake/modules")

include(SwiftTestUtils)

foreach(SDK ${SWIFT_SDKS})
  foreach(ARCH ${SWIFT_SDK_${SDK}_ARCHITECTURES})
    get_swift_test_build_flavors(build_flavors "${SDK}")

    foreach(BUILD_FLAVOR ${build_flavors})
      get_swift_test_variant_suffix(VARIANT_SUFFIX "${SDK}" "${ARCH}" "${BUILD_FLAVOR}")

      set(test_bin_dir "${SWIFT_BINARY_DIR}/test${VARIANT_SUFFIX}")

      add_swift_target_library_single(
        BlocksRuntimeStub${VARIANT_SUFFIX}
        BlocksRuntimeStub
        SHARED NOSWIFTRT
        ARCHITECTURE ${ARCH}
        SDK ${SDK}
        INSTALL_IN_COMPONENT never_install
        BlocksRuntime.c
      )
      set_target_properties(BlocksRuntimeStub${VARIANT_SUFFIX} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${test_bin_dir}
        LIBRARY_OUTPUT_DIRECTORY ${test_bin_dir}
        RUNTIME_OUTPUT_DIRECTORY ${test_bin_dir}
        OUTPUT_NAME BlocksRuntime)

      # When built in a unified build, ensure that we add a dependency on the
      # compiler to serialize this behind the compiler.  Otherwise, we would
      # attempt to build this before the compiler is ready, which breaks the
      # build.
      if(NOT SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER AND NOT BUILD_STANDALONE AND
          TARGET clang)
        add_dependencies(BlocksRuntimeStub${VARIANT_SUFFIX} clang)
      endif()
    endforeach()
  endforeach()
endforeach()

----------------------------------------

TITLE: Configuring SourceKit-D Build Environment in CMake
DESCRIPTION: Sets up the build environment for SourceKit-D by defining source directories, configuring include paths, and adding subdirectories for various components. It also conditionally includes tools based on the availability of LibEdit and test configurations.

LANGUAGE: cmake
CODE:
set(SOURCEKITD_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/sourcekitd)

include_directories(
  ${SOURCEKITD_SOURCE_DIR}/include
)

add_swift_lib_subdirectory(sourcekitd)
if(LibEdit_FOUND AND LibEdit_HAS_UNICODE)
  add_swift_tool_subdirectory(sourcekitd-repl)
endif()
if(SWIFT_INCLUDE_TESTS OR SWIFT_INCLUDE_TEST_BINARIES)
  add_swift_tool_subdirectory(sourcekitd-test)
  add_swift_tool_subdirectory(complete-test)
endif()

----------------------------------------

TITLE: Suppressing Memory Safety Warnings
DESCRIPTION: Memory safety warnings can be suppressed by acknowledging the unsafe behavior using the unsafe keyword.

LANGUAGE: Swift
CODE:
func evilMalloc(size: Int) -> Int {
  return unsafe Int(bitPattern: malloc(size)) // no warning
}

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Source Files with CMake
DESCRIPTION: Defines the source files to be compiled into the swiftSILOptimizer target library. Includes optimizations for array properties, bounds checking, COW arrays, loop rotation, loop unrolling, loop-invariant code motion, and foreach loop unrolling.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  ArrayPropertyOpt.cpp
  BoundsCheckOpts.cpp
  COWArrayOpt.cpp
  LoopRotate.cpp
  LoopUnroll.cpp
  LICM.cpp
  ForEachLoopUnroll.cpp)

----------------------------------------

TITLE: Configuring SDK Overlay Dependencies
DESCRIPTION: Sets Darwin dependencies based on SDK overlay build configuration.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SDK_OVERLAY)
set(swift_private_libc_extras_darwin_dependencies Darwin)
else()
set(swift_private_libc_extras_darwin_dependencies)
endif()

----------------------------------------

TITLE: Importing SceneKit ModelIO and CoreImage CIFilterBuiltins in Swift
DESCRIPTION: This code snippet imports two Swift frameworks: SceneKit.ModelIO for 3D modeling functionality and CoreImage.CIFilterBuiltins for built-in image filters. These imports suggest the project may involve 3D asset manipulation and image processing tasks.

LANGUAGE: Swift
CODE:
// Empty
SceneKit.ModelIO
CoreImage.CIFilterBuiltins

----------------------------------------

TITLE: Configuring Compile Definitions for Swift Stdlib Stubs in CMake
DESCRIPTION: Sets compile definitions for the swiftStdlibStubs target, including conditional definitions for shared library builds, Unicode data support, and locale availability.

LANGUAGE: CMake
CODE:
target_compile_definitions(swiftStdlibStubs PRIVATE
  $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>
  $<$<BOOL:${SwiftCore_ENABLE_UNICODE_DATA}>:-DSWIFT_STDLIB_ENABLE_UNICODE_DATA>
  $<$<BOOL:${SwiftCore_HAS_LOCALE}>:-DSWIFT_STDLIB_HAS_LOCALE>)

----------------------------------------

TITLE: Sample Grapheme Break Test Case
DESCRIPTION: An example test case showing break opportunities between Unicode code points.

LANGUAGE: text
CODE:
÷ 0020 ÷ 0020 ÷	#  ÷ [0.2] SPACE (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]

----------------------------------------

TITLE: Adding Swift Compiler Module 'Basic' with CMake
DESCRIPTION: This snippet uses CMake to add a Swift compiler module named 'Basic'. It specifies the source files to be included in the module: SourceLoc.swift, StringParser.swift, and Utils.swift.

LANGUAGE: CMake
CODE:
add_swift_compiler_module(Basic
  SOURCES
    SourceLoc.swift
    StringParser.swift
    Utils.swift)

----------------------------------------

TITLE: Unsafe Variable Declaration in Swift
DESCRIPTION: Demonstrates the use of an unowned(unsafe) variable, which is not memory-safe and triggers a warning.

LANGUAGE: swift
CODE:
// use of an unowned(unsafe) variable is not memory-safe
unowned(unsafe) var parentNode: TreeNode<T>

----------------------------------------

TITLE: Non-Sendable Static Instance Example
DESCRIPTION: Example of a static variable with a non-Sendable type that would trigger concurrency checking warnings.

LANGUAGE: swift
CODE:
class MyModel {
  static let shared = MyModel()

  // mutable state
}

----------------------------------------

TITLE: Creating Swift Standard Library Build Targets in CMake
DESCRIPTION: Function to create build targets for different variants of the Swift standard library across different SDKs and architectures. Handles creation of aggregate targets and platform-specific configurations.

LANGUAGE: cmake
CODE:
function(swift_create_stdlib_targets name variant define_all_alias)
  if(NOT variant STREQUAL "")
    set(variant "-${variant}")
  endif()

  if(define_all_alias)
    add_custom_target(${name}${variant}-all)
    set_target_properties(${name}${variant}-all
      PROPERTIES
      FOLDER "Swift libraries/Aggregate")
  endif()

  foreach(sdk ${SWIFT_SDKS})
    add_custom_target(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant})
    set_target_properties(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant}
      PROPERTIES
      FOLDER "Swift libraries/Aggregate")

    foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})
      set(target_variant -${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch})

      add_custom_target(${name}${target_variant}${variant})
      set_target_properties(${name}${target_variant}${variant}
        PROPERTIES
        FOLDER "Swift libraries/Aggregate")
      if(define_all_alias)
        add_dependencies(${name}${variant}-all
          ${name}${target_variant}${variant})
      endif()
      add_dependencies(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant}
        ${name}${target_variant}${variant})
    endforeach()
  endforeach()

  if(NOT define_all_alias)
    set(ALL_keyword ALL)
  endif()

  if(SWIFT_PRIMARY_VARIANT_SDK IN_LIST SWIFT_SDKS)
    add_custom_target(${name}${variant}
      ${ALL_keyword}
      DEPENDS
      ${name}${SWIFT_PRIMARY_VARIANT_SUFFIX}${variant})
    set_target_properties(${name}${variant}
      PROPERTIES
      FOLDER "Swift libraries/Aggregate")
  else()
    message(WARNING "Primary variant ${SWIFT_PRIMARY_VARIANT_SDK} is not being built, not creating ${name}${variant} alias target for it.")
  endif()
endfunction()

----------------------------------------

TITLE: Setting Compiler Definitions and Options
DESCRIPTION: Configures compiler definitions and options for the swift_Concurrency target, including platform-specific settings and experimental features.

LANGUAGE: cmake
CODE:
target_compile_definitions(swift_Concurrency PRIVATE
  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_TARGET_LIBRARY_NAME=swift_Concurrency>
  $<$<AND:$<PLATFORM_ID:Windows>,$<COMPILE_LANGUAGE:C,CXX>>:-D_ENABLE_EXTENDED_ALIGNED_STORAGE=1>
  $<$<COMPILE_LANGUAGE:C,CXX>:-D__STDC_WANT_LIB_EXT1__=1>)
target_compile_options(swift_Concurrency PRIVATE
  $<$<COMPILE_LANGUAGE:Swift>:-parse-stdlib>
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-enable-experimental-feature IsolatedAny>"
  $<$<AND:$<PLATFORM_ID:Darwin>,$<COMPILE_LANGUAGE:C,CXX>>:-fswift-async-fp=always>
  "$<$<AND:$<PLATFORM_ID:Darwin>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xfrontend -swift-async-frame-pointer=always>"
  "$<$<AND:$<BOOL:${BUILD_SHARED_LIBS}>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xcc -Dswift_Concurrency_EXPORTS>")

----------------------------------------

TITLE: Including SourceKit Subdirectory in Swift Project
DESCRIPTION: This CMake command adds the SourceKit subdirectory to the build process. It ensures that the SourceKit component is compiled and integrated into the Swift project.

LANGUAGE: CMake
CODE:
add_subdirectory(SourceKit)

----------------------------------------

TITLE: Linking Libraries for Swift SIL Optimizer Tests in CMake
DESCRIPTION: Specifies the libraries to be linked privately with the SwiftSILOptimizerTests target, including core Swift components such as SIL Optimizer, IRGen, AST, and Frontend.

LANGUAGE: CMake
CODE:
target_link_libraries(SwiftSILOptimizerTests
   PRIVATE
   swiftSILOptimizer
   swiftIRGen
   swiftAST
   swiftFrontend
)

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Sources in CMake
DESCRIPTION: Adds source files to the swiftSILOptimizer target using CMake's target_sources command. The files primarily handle semantic ARC optimizations, ownership management, and borrow scope optimizations.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  SemanticARCOpts.cpp
  OwnershipLiveRange.cpp
  BorrowScopeOpts.cpp
  CopyValueOpts.cpp
  OwnedToGuaranteedPhiOpt.cpp
  Context.cpp
  SemanticARCOptVisitor.cpp
  OwnershipConversionElimination.cpp
  RedundantMoveValueElimination.cpp
  )

----------------------------------------

TITLE: Adding Swift Tool Subdirectories in CMake
DESCRIPTION: Configures build directories for various Swift tools and components. Includes core tools, testing utilities, and platform-specific components based on build configuration flags.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SOURCEKIT)
  list(APPEND LLVM_COMMON_DEPENDS generated_sourcekit_uids)
endif()

add_swift_tool_subdirectory(driver)
add_swift_tool_subdirectory(swift-compatibility-symbols)
add_swift_tool_subdirectory(swift-demangle)
add_swift_tool_subdirectory(swift-demangle-yamldump)
add_swift_tool_subdirectory(swift-def-to-strings-converter)
add_swift_tool_subdirectory(swift-serialize-diagnostics)
add_swift_tool_subdirectory(swift-ast-script)
add_swift_tool_subdirectory(swift-refactor)
add_swift_tool_subdirectory(libStaticMirror)
add_swift_tool_subdirectory(libMockPlugin)
add_swift_tool_subdirectory(swift-plugin-server)
add_swift_tool_subdirectory(swift-scan-test)

----------------------------------------

TITLE: Protocol Implementation Changes in Swift Library Evolution
DESCRIPTION: Demonstrates how protocol implementation behavior can change when recompiling client code after library updates. Shows potential issues with default implementations and protocol conformance.

LANGUAGE: swift
CODE:
// Library, version 1
protocol MagicType {}
protocol Wearable {}
func use<T: MagicType>(_ item: T) {}

LANGUAGE: swift
CODE:
// Client, version 1
struct Amulet : MagicType, Wearable {}
use(Amulet())

LANGUAGE: swift
CODE:
// Library, version 2
protocol MagicType {
  @available(dishwasherOS 2.0, *)
  func equip()
}
extension MagicType {
  @available(dishwasherOS 2.0, *)
  func equip() { print("Equipped.") }
}

protocol Wearable {}
extension Wearable where Self: MagicType {
  @available(dishwasherOS 2.0, *)
  func equip() { print("You put it on.") }
}

func use<T: MagicType>(_ item: T) { item.equip() }

----------------------------------------

TITLE: Installing Swift Builtin Float Library
DESCRIPTION: CMake installation configuration for the swift_Builtin_float library. Specifies installation paths for different components and sets up Swift interface generation and installation.

LANGUAGE: cmake
CODE:
install(TARGETS swift_Builtin_float
  ARCHIVE DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  LIBRARY DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
emit_swift_interface(swift_Builtin_float)
install_swift_interface(swift_Builtin_float)

embed_manifest(swift_Builtin_float)

----------------------------------------

TITLE: Adding Swift Regex Parser Library Target
DESCRIPTION: Defines the main library target with platform-specific dependencies, compilation flags, and installation settings.

LANGUAGE: cmake
CODE:
add_swift_target_library(swift_RegexParser ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  "${MATCHING_ENGINE_SOURCES}"

  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  LINK_LIBRARIES ${swift_matching_engine_link_libraries}

  C_COMPILE_FLAGS
    -Dswift_RegexParser_EXPORTS
  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS_NO_RESILIENCE}
    -Xfrontend -disable-implicit-string-processing-module-import
    -enable-experimental-feature AllowRuntimeSymbolDeclarations
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  INSTALL_IN_COMPONENT stdlib
  MACCATALYST_BUILD_FLAVOR "zippered"
)

----------------------------------------

TITLE: Adding Source Files to Swift Compiler Module
DESCRIPTION: Function to add source files to an existing Swift compiler module target. Resolves real paths and appends to the target's SOURCES property.

LANGUAGE: cmake
CODE:
function(swift_compiler_sources module)
  cmake_parse_arguments(LSS
                        ""
                        ""
                        ""
                        ${ARGN})
  set(raw_sources ${LSS_UNPARSED_ARGUMENTS})
  set(sources)
  foreach(raw_source ${raw_sources})
    get_filename_component(
      raw_source "${raw_source}" REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
    list(APPEND sources "${raw_source}")
  endforeach()

  set(target_name "SwiftModule${module}")
  set_property(TARGET "SwiftModule${module}" APPEND PROPERTY SOURCES ${sources})
endfunction()

----------------------------------------

TITLE: Resolving Capture Error with Explicit Value Capture in Swift
DESCRIPTION: This snippet shows how to resolve the capture error by explicitly capturing the value in the closure's capture list. This approach works for Sendable types when only the value at the point of capture is needed.

LANGUAGE: swift
CODE:
func capture() {
  var result = 0
  result += 1
  
  callConcurrently { [result] in
    print(result)
  }
}

----------------------------------------

TITLE: Setting Swift Language Version in Build Settings
DESCRIPTION: This snippet shows how to set the Swift language version in build settings using the -swift-version flag. This is necessary to opt-in to a specific language mode when using a Swift tools version that supports multiple language modes.

LANGUAGE: swift
CODE:
-swift-version X

----------------------------------------

TITLE: Configuring Source Files for Swift SIL Optimizer in CMake
DESCRIPTION: This CMake snippet specifies the source files to be included in the swiftSILOptimizer target. It lists a comprehensive set of C++ files that implement various optimization techniques and utilities for the Swift Intermediate Language (SIL).

LANGUAGE: CMake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  BasicBlockOptUtils.cpp
  CFGOptUtils.cpp
  CanonicalizeInstruction.cpp
  CanonicalizeOSSALifetime.cpp
  CanonicalizeBorrowScope.cpp
  CastOptimizer.cpp
  CheckedCastBrJumpThreading.cpp
  CompileTimeInterpolationUtils.cpp
  ConstantFolding.cpp
  ConstExpr.cpp
  Devirtualize.cpp
  DifferentiationMangler.cpp
  DistributedActor.cpp
  Existential.cpp
  GenericCloner.cpp
  Generics.cpp
  InstructionDeleter.cpp
  InstOptUtils.cpp
  KeyPathProjector.cpp
  LexicalDestroyFolding.cpp
  LoopUtils.cpp
  OptimizerStatsUtils.cpp
  RegionIsolation.cpp
  PartialApplyCombiner.cpp
  PartitionUtils.cpp
  PerformanceInlinerUtils.cpp
  ShrinkBorrowScope.cpp
  SILInliner.cpp
  SILIsolationInfo.cpp
  SILSSAUpdater.cpp
  SpecializationMangler.cpp
  StackNesting.cpp
  ValueLifetime.cpp
  VariableNameUtils.cpp
  OwnershipOptUtils.cpp
  OptimizerBridging.cpp)

----------------------------------------

TITLE: Building Swift Toolchain on Unix Systems
DESCRIPTION: Shell command for building a Swift toolchain using the build-toolchain script. The command creates a toolchain bundle with a specified prefix identifier.

LANGUAGE: shell
CODE:
  $ ./swift/utils/build-toolchain $BUNDLE_PREFIX

----------------------------------------

TITLE: Adding Core Subdirectory in CMake
DESCRIPTION: Includes the Core subdirectory in the CMake build process, allowing the build system to process CMakeLists.txt files in the Core directory.

LANGUAGE: cmake
CODE:
add_subdirectory(Core)

----------------------------------------

TITLE: Runtime Path Configuration
DESCRIPTION: Sets up runtime and installation paths for different platforms (Darwin, Linux, Android, etc). Configures RPATH settings to ensure proper library loading at runtime.

LANGUAGE: cmake
CODE:
if(SWIFT_BUILD_SWIFT_SYNTAX)
  if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)
    set_property(
      TARGET libSwiftScan
      APPEND PROPERTY INSTALL_RPATH "@loader_path/swift/host/compiler")
  elseif(SWIFT_HOST_VARIANT_SDK MATCHES "LINUX|ANDROID|OPENBSD|FREEBSD")
    set_property(
      TARGET libSwiftScan
      APPEND PROPERTY INSTALL_RPATH "$ORIGIN/swift/host/compiler")
  endif()
endif()

----------------------------------------

TITLE: Adding Swift SIL Unit Test Files in CMake
DESCRIPTION: This snippet adds the SILBitfieldTest.cpp file to the SwiftSILTests unit test suite using the add_swift_unittest CMake function.

LANGUAGE: CMake
CODE:
add_swift_unittest(SwiftSILTests
  SILBitfieldTest.cpp
)

----------------------------------------

TITLE: Foundation and CoreFoundation Imports in Swift
DESCRIPTION: Import statements for required Swift frameworks including Foundation, CoreFoundation, and Dispatch for system-level functionality.

LANGUAGE: Swift
CODE:
import Foundation
import CoreFoundation
import Dispatch

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Source Files with CMake
DESCRIPTION: CMake configuration that specifies the source files to be compiled into the swiftSILOptimizer target. Lists C++ implementation files for various SIL optimization passes including memory management, control flow, and code transformation optimizations.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  ARCCodeMotion.cpp
  AccessEnforcementDom.cpp
  AccessEnforcementOpts.cpp
  AccessEnforcementReleaseSinking.cpp 
  AccessEnforcementWMO.cpp
  AllocBoxToStack.cpp
  ArrayCountPropagation.cpp
  COWOpts.cpp
  CSE.cpp
  ConditionForwarding.cpp
  CopyForwarding.cpp
  CopyPropagation.cpp
  DeadCodeElimination.cpp
  DeadObjectElimination.cpp
  Devirtualizer.cpp
  DifferentiabilityWitnessDevirtualizer.cpp
  EagerSpecializer.cpp
  GenericSpecializer.cpp
  Outliner.cpp
  AssemblyVisionRemarkGenerator.cpp
  PartialApplySimplification.cpp
  PerformanceInliner.cpp
  PhiArgumentOptimizations.cpp
  PruneVTables.cpp
  RedundantOverflowCheckRemoval.cpp
  SILCodeMotion.cpp
  SILLowerAggregateInstrs.cpp
  SILMem2Reg.cpp
  SILSROA.cpp
  DestroyAddrHoisting.cpp
  SimplifyCFG.cpp
  Sink.cpp
  SpeculativeDevirtualizer.cpp
  StringOptimization.cpp
  TempLValueOpt.cpp
  TempRValueElimination.cpp)

----------------------------------------

TITLE: SDK-specific Target Configuration Loop
DESCRIPTION: Iterates through Swift SDKs to ensure library targets are included in the build. Sets EXCLUDE_FROM_ALL property to FALSE for each valid target to ensure they are built.

LANGUAGE: cmake
CODE:
foreach(sdk ${SWIFT_SDKS})
  set(target_name "${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}")
  if(NOT TARGET "${target_name}")
    continue()
  endif()

  set_target_properties("${target_name}"
    PROPERTIES
      EXCLUDE_FROM_ALL FALSE)
endforeach()

----------------------------------------

TITLE: Initializing CMake Project Configuration for Swift String Processing
DESCRIPTION: Sets up CMake project configuration with version requirements, build options, and Swift/C language support. Includes build number handling from environment variables and position-independent code settings.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.29)

set(CMAKE_POSITION_INDEPENDENT_CODE YES)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../cmake/modules")

if($ENV{BUILD_NUMBER})
  math(EXPR BUILD_NUMBER "$ENV{BUILD_NUMBER} % 65535")
  set(BUILD_NUMBER ".${BUILD_NUMBER}")
endif()
project(SwiftStringProcessing
  LANGUAGES Swift C
  VERSION 6.1.0${BUILD_NUMBER})

----------------------------------------

TITLE: Setting Swift Module Name Properties with CMake
DESCRIPTION: Sets the Swift module name for the RegexBuilder library to ensure proper module importing.

LANGUAGE: cmake
CODE:
set_target_properties(swiftRegexBuilder PROPERTIES
  Swift_MODULE_NAME RegexBuilder)

----------------------------------------

TITLE: Configuring Swift Regex Parser Library Dependencies
DESCRIPTION: Sets up core library dependencies for the Swift regex parsing engine.

LANGUAGE: cmake
CODE:
set(swift_matching_engine_link_libraries
  swiftCore)

----------------------------------------

TITLE: Configuring Swift Concurrency Library Build
DESCRIPTION: Main CMake configuration for building the Swift Concurrency library. Specifies source files, compiler flags, dependencies, and build settings for the swift_Concurrency target.

LANGUAGE: cmake
CODE:
add_library(swift_Concurrency
  Actor.cpp
  AsyncLet.cpp
  AsyncStream.cpp
  Clock.cpp
  ConcurrencyHooks.cpp
  EmbeddedSupport.cpp
  Error.cpp
  ExecutorBridge.cpp
  ExecutorChecks.cpp
  GlobalExecutor.cpp
  Setup.cpp
  Task.cpp
  TaskAlloc.cpp
  TaskGroup.cpp
  TaskLocal.cpp
  TaskStatus.cpp
  ThreadingError.cpp
  TracingSignpost.cpp
  "${PROJECT_SOURCE_DIR}/CompatibilityOverride/CompatibilityOverride.cpp"
  "${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c"
  Actor.swift
  AsyncCompactMapSequence.swift
  AsyncDropFirstSequence.swift
  AsyncDropWhileSequence.swift
  AsyncFilterSequence.swift
  AsyncFlatMapSequence.swift
  AsyncIteratorProtocol.swift
  AsyncLet.swift
  AsyncMapSequence.swift
  AsyncPrefixSequence.swift
  AsyncPrefixWhileSequence.swift
  AsyncSequence.swift
  AsyncStream.swift
  AsyncStreamBuffer.swift
  AsyncThrowingCompactMapSequence.swift
  AsyncThrowingDropWhileSequence.swift
  AsyncThrowingFilterSequence.swift
  AsyncThrowingFlatMapSequence.swift
  AsyncThrowingMapSequence.swift
  AsyncThrowingPrefixWhileSequence.swift
  AsyncThrowingStream.swift
  CheckedContinuation.swift
  Clock.swift
  ContinuousClock.swift
  CooperativeExecutor.swift
  Deque/_DequeBuffer.swift
  Deque/_DequeBufferHeader.swift
  Deque/_DequeSlot.swift
  Deque/_UnsafeWrappedBuffer.swift
  Deque/Compatibility.swift
  Deque/Deque.swift
  Deque/Deque+Codable.swift
  Deque/Deque+Collection.swift
  Deque/Deque+CustomDebugStringConvertible.swift
  Deque/Deque+CustomReflectable.swift
  Deque/Deque+CustomStringConvertible.swift
  Deque/Deque+Equatable.swift
  Deque/Deque+ExpressibleByArrayLiteral.swift
  Deque/Deque+Extras.swift
  Deque/Deque+Hashable.swift
  Deque/Deque+Storage.swift
  Deque/Deque+Testing.swift
  Deque/Deque+UnsafeHandle.swift
  Deque/UnsafeMutableBufferPointer+Utilities.swift
  DiscardingTaskGroup.swift
  DummyExecutor.swift
  Errors.swift
  Executor.swift
  ExecutorAssertions.swift
  ExecutorBridge.swift
  GlobalActor.swift
  GlobalConcurrentExecutor.swift
  MainActor.swift
  PartialAsyncTask.swift
  PlatformExecutorDarwin.swift
  PlatformExecutorLinux.swift
  PlatformExecutorWindows.swift
  PriorityQueue.swift
  SourceCompatibilityShims.swift
  SuspendingClock.swift
  Task.swift
  Task+PriorityEscalation.swift
  Task+TaskExecutor.swift
  TaskCancellation.swift
  TaskGroup.swift
  TaskGroup+Embedded.swift
  TaskLocal.swift
  TaskSleep.swift
  TaskSleepDuration.swift
  "${CMAKE_CURRENT_BINARY_DIR}/TaskGroup+addTask.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/Task+startSynchronously.swift")

----------------------------------------

TITLE: Defining Extraneous @preconcurrency Import Diagnostic in Swift
DESCRIPTION: This snippet demonstrates the concept of a diagnostic group in Swift that identifies unnecessary @preconcurrency import declarations. The diagnostic is experimental and currently disabled, aimed at improving code efficiency by highlighting redundant import statements.

LANGUAGE: Swift
CODE:
@preconcurrency import

----------------------------------------

TITLE: Creating API Notes for a System Module in Swift
DESCRIPTION: Instructions for adding API notes to a system module that doesn't have them yet. This involves creating a new .apinotes file and updating the CMakeLists.txt file.

LANGUAGE: plaintext
CODE:
To add API notes for a system module $MODULE that does not have them yet,
create a new source file $MODULE.apinotes and update CMakeLists.txt.
Updated API notes will be found by the build system during the next build.

----------------------------------------

TITLE: Platform-Specific Installation Configuration
DESCRIPTION: Handles platform-specific installation paths and settings for the library. Includes special handling for Windows vs other platforms, setting up symlinks and installation directories.

LANGUAGE: cmake
CODE:
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
swift_install_in_component(TARGETS libSwiftScan
  ARCHIVE DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}" COMPONENT compiler
  LIBRARY DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}" COMPONENT compiler
  RUNTIME DESTINATION "bin" COMPONENT compiler)
else()
  swift_install_in_component(TARGETS libSwiftScan
    ARCHIVE DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler" COMPONENT compiler
    LIBRARY DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler" COMPONENT compiler
    RUNTIME DESTINATION "bin" COMPONENT compiler)

----------------------------------------

TITLE: SIL Code Showing Memory Race Condition
DESCRIPTION: Low-level SIL code demonstrating how the race condition leads to object deallocation issues.

LANGUAGE: sil
CODE:
%10 = global_addr @singleton : $*Bird

bb:
    %49 = alloc_ref $Bird
    %51 = load %10 : $*Bird
    store %49 to %10 : $*Bird
    strong_release %51 : $Bird
    br bb

----------------------------------------

TITLE: Configuring SourceKit Complete Test Executable Build
DESCRIPTION: CMake configuration that defines build settings for the complete-test executable. Includes source files, link dependencies, platform-specific settings for Darwin/non-Darwin systems, and code coverage options.

LANGUAGE: cmake
CODE:
add_sourcekit_executable(complete-test
  complete-test.cpp
  LLVM_LINK_COMPONENTS option coverage lto
)
if(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)
  target_link_libraries(complete-test PRIVATE sourcekitdInProc)
else()
  target_link_libraries(complete-test PRIVATE sourcekitd)
endif()
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  target_link_libraries(complete-test PRIVATE
    dispatch
    BlocksRuntime)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set_target_properties(complete-test PROPERTIES
    INSTALL_RPATH "@executable_path/../lib")
  target_link_options(complete-test PRIVATE
    "LINKER:-exported_symbol,_main")
endif()
if(SWIFT_ANALYZE_CODE_COVERAGE)
  set_property(TARGET complete-test APPEND_STRING PROPERTY
    LINK_FLAGS " -fprofile-instr-generate -fcoverage-mapping")
endif()

add_dependencies(tools complete-test)
swift_install_in_component(TARGETS complete-test
  RUNTIME DESTINATION bin COMPONENT tools)

----------------------------------------

TITLE: Linking Libraries for Swift SIL Tests in CMake
DESCRIPTION: This snippet links the swiftSIL library to the SwiftSILTests target using the target_link_libraries CMake function. The PRIVATE keyword indicates that the library is only used internally by the target.

LANGUAGE: CMake
CODE:
target_link_libraries(SwiftSILTests
   PRIVATE
   swiftSIL
)

----------------------------------------

TITLE: Configuring Swift Syntax Build Prerequisites
DESCRIPTION: Checks if Swift Syntax should be built and verifies the source path exists. Sets up basic compiler and architecture settings for the build.

LANGUAGE: cmake
CODE:
if(NOT SWIFT_BUILD_SWIFT_SYNTAX)
  return()
endif()
if(NOT EXISTS "${SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE}")
  message(SEND_ERROR "swift-syntax is required to build the Swift compiler. Please run update-checkout or specify SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE")
  return()
endif()

# Build swift-syntax libraries with FetchContent.
set(CMAKE_SYSTEM_PROCESSOR ${SWIFT_HOST_VARIANT_ARCH})
set(CMAKE_OSX_ARCHITECTURES ${SWIFT_HOST_VARIANT_ARCH})
set(CMAKE_C_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})
set(CMAKE_CXX_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})
set(CMAKE_Swift_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})
set(BUILD_SHARED_LIBS ON)

----------------------------------------

TITLE: Collecting Regex Parser Source Files
DESCRIPTION: Recursively collects Swift source files from the _RegexParser directory and normalizes their paths for CMake.

LANGUAGE: cmake
CODE:
file(GLOB_RECURSE _MATCHING_ENGINE_SOURCES
  "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_RegexParser/*.swift")
set(MATCHING_ENGINE_SOURCES)
foreach(source ${_MATCHING_ENGINE_SOURCES})
  file(TO_CMAKE_PATH "${source}" source)
  list(APPEND MATCHING_ENGINE_SOURCES ${source})
endforeach()

----------------------------------------

TITLE: Configuring and Installing Swift Windows SDK Library with CMake
DESCRIPTION: This CMake snippet defines the swiftWinSDK library, sets its properties, links dependencies, and configures installation rules. It also includes steps for emitting and installing the Swift interface, as well as embedding a manifest.

LANGUAGE: CMake
CODE:
add_library(swiftWinSDK
  WinSDK.swift)
set_target_properties(swiftWinSDK PROPERTIES
  Swift_MODULE_NAME WinSDK)
target_compile_definitions(swiftCRT PRIVATE
  $<$<BOOL:${SwiftOverlay_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>)
target_link_libraries(swiftWinSDK PRIVATE
  ClangModules
  swiftCore)

install(TARGETS swiftWinSDK
  ARCHIVE DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  LIBRARY DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
emit_swift_interface(swiftWinSDK)
install_swift_interface(swiftWinSDK)

embed_manifest(swiftWinSDK)

----------------------------------------

TITLE: Swift Private Thread Extensions Library Target Configuration
DESCRIPTION: Defines the library target with source files, platform-specific module dependencies, compilation flags, and installation settings

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftSwiftPrivateThreadExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  SwiftPrivateThreadExtras.swift
  ThreadBarriers.swift

  "${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c"

  SWIFT_MODULE_DEPENDS_IOS ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_OSX ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_XROS ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_private_thread_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_FREESTANDING "${SWIFT_FREESTANDING_TEST_DEPENDENCIES}"
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WASI WASILibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Configuring Android Platform Library and Module Map
DESCRIPTION: Sets up build configuration for the Swift Android platform library and copies necessary module maps and headers.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftAndroid ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
    Android.swift
    ${swift_platform_sources}
    POSIXError.swift

    GYB_SOURCES
      ${swift_platform_gyb_sources}

    SWIFT_COMPILE_FLAGS
      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}
      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
      ${swift_platform_compile_flags}
    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
    TARGET_SDKS "ANDROID"
    INSTALL_IN_COMPONENT sdk-overlay
    DEPENDS android_modulemap)

----------------------------------------

TITLE: Configuring swiftShims Interface Library with CMake
DESCRIPTION: This snippet creates and configures the swiftShims interface library. It sets up include directories, compile definitions, and options for different languages and build types.

LANGUAGE: CMake
CODE:
add_library(swiftShims INTERFACE)
target_include_directories(swiftShims INTERFACE
  $<$<COMPILE_LANGUAGE:C,CXX>:$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}>>
  $<$<COMPILE_LANGUAGE:Swift>:$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/swift/shims>>)
target_compile_definitions(swiftShims INTERFACE
  $<$<AND:$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>,$<COMPILE_LANGUAGE:C,CXX>>:SWIFT_STATIC_STDLIB>)
target_compile_options(swiftShims INTERFACE
  "$<$<AND:$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xcc -DSWIFT_STATIC_STDLIB>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xcc -fmodule-map-file=\"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/module.modulemap>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/swift/shims/module.modulemap>\">"
)

install(TARGETS swiftShims
  EXPORT SwiftCoreTargets
  COMPONENT SwiftCore_development)

----------------------------------------

TITLE: Handling Recursion with Opaque Result Types in Swift
DESCRIPTION: Illustrates the rules for recursive functions with opaque return types, including the requirement for concrete type returns and prevention of infinite recursive types.

LANGUAGE: swift
CODE:
func foo(_ x: Int) -> some Equatable { // error: function declares an opaque return type, but has no return statements in its body from which to infer an underlying type
  // Not allowed because there aren't any non-recursive returns to infer the underlying type from.
  return foo(x+1)
}

struct EquatableWrapper<T: Equatable>: Equatable { var value: T }
func foo() -> some Equatable { // error: function opaque return type was inferred as 'EquatableWrapper<some Equatable>', which defines the opaque type in terms of itself
  // Not allowed because the use of EquatableWrapper creates an infinitely recursive underlying type: EquatableWrapper<EquatableWrapper<EquatableWrapper<...>>>...>
  return EquatableWrapper(value: foo())
}

func bar(_ x: Int) -> some Equatable { // OK, the underlying type can be inferred from the second return statement.
  if x > 0 {
    return bar(x-1)
  } else {
    return x
  }
}

----------------------------------------

TITLE: Using Dynamic Type for Protocol Types in Swift
DESCRIPTION: This snippet demonstrates an alternative approach using dynamic type checking to work with existential types where static properties are needed.

LANGUAGE: swift
CODE:
func declareAnimalSpeciesDynamically(_ animal: Animal) {
    animal.makeNoise()
    print("My species is known as \(type(of: animal).species)")
}

declareAnimalSpeciesDynamically(animal)
// Prints:
// "Meow"
// "My species is known as Felis catus"

----------------------------------------

TITLE: Configuring Swift Macro Library Build in CMake
DESCRIPTION: Adds a Swift macro library build target named 'SwiftMacros' with multiple source files and required Swift dependencies. The library includes various macro implementations for features like OptionSet, DebugDescription, and TaskLocal functionality.

LANGUAGE: cmake
CODE:
add_swift_macro_library(SwiftMacros
  OptionSetMacro.swift
  DebugDescriptionMacro.swift
  DistributedResolvableMacro.swift
  TaskMacro.swift
  SyntaxExtensions.swift
  TaskLocalMacro.swift
  SwiftifyImportMacro.swift
  SWIFT_DEPENDENCIES
    SwiftDiagnostics
    SwiftSyntax
    SwiftSyntaxBuilder
    SwiftSyntaxMacros
)

----------------------------------------

TITLE: Setting SourceKitD InProc Build Arguments
DESCRIPTION: Defines the core source files and LLVM components required for building the sourcekitdInProc library.

LANGUAGE: cmake
CODE:
set(sourcekitdInProc_args
  sourcekitdInProc.cpp
  CodeCompletionSwiftInterop.cpp
  LLVM_LINK_COMPONENTS support coverage
)

----------------------------------------

TITLE: Setting Swift Host Plugins Directory Path in CMake
DESCRIPTION: Defines the destination directory for host plugins/macros using CMake variables.

LANGUAGE: cmake
CODE:
set(SWIFT_HOST_PLUGINS_DEST_DIR ${SWIFT_HOST_LIBRARIES_DEST_DIR}/plugins)

----------------------------------------

TITLE: Swift Runtime Tests Target Configuration
DESCRIPTION: Sets up the main SwiftRuntimeTests target with source files, compiler definitions, and library dependencies.

LANGUAGE: cmake
CODE:
add_swift_unittest(SwiftRuntimeTests IS_TARGET_TEST
  Array.cpp
  CompatibilityOverrideRuntime.cpp
  CompatibilityOverrideConcurrency.cpp
  Concurrent.cpp
  Metadata.cpp
  Enum.cpp
  ExtendedExistential.cpp
  Heap.cpp
  PrebuiltStringMap.cpp
  Refcounting.cpp
  Stdlib.cpp
  StackAllocator.cpp
  TypeLayoutChecks.cpp
  ${PLATFORM_SOURCES}

----------------------------------------

TITLE: Configuring Swift AST Bridging Sources in CMake
DESCRIPTION: Defines the source files that comprise the swiftAST bridging layer. These files handle various aspects of the Swift AST including declarations, expressions, patterns, types, diagnostics, and generics bridging functionality.

LANGUAGE: cmake
CODE:
target_sources(swiftAST PRIVATE
  ASTContextBridging.cpp
  AvailabilityBridging.cpp
  DeclAttributeBridging.cpp
  DeclBridging.cpp
  DeclContextBridging.cpp
  DiagnosticsBridging.cpp
  ExprBridging.cpp
  GenericsBridging.cpp
  MiscBridging.cpp
  PatternBridging.cpp
  PluginBridging.cpp
  StmtBridging.cpp
  TypeAttributeBridging.cpp
  TypeReprBridging.cpp)

----------------------------------------

TITLE: Configuring Swift Sema Library in CMake
DESCRIPTION: Defines the swiftSema static library with its source files, sets compilation options based on compiler type and optimization flags, and specifies library dependencies.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftSema STATIC
  AssociatedTypeInference.cpp
  AsyncCallerExecutionMigration.cpp
  BuilderTransform.cpp
  Comment.cpp
  CSApply.cpp
  CSBindings.cpp
  CSSyntacticElement.cpp
  CSGen.cpp
  CSRanking.cpp
  CSSimplify.cpp
  CSSolver.cpp
  CSStep.cpp
  CSTrail.cpp
  CSFix.cpp
  CSDiagnostics.cpp
  CodeSynthesis.cpp
  CodeSynthesisDistributedActor.cpp
  ConstantnessSemaDiagnostics.cpp
  Constraint.cpp
  ConstraintGraph.cpp
  ConstraintLocator.cpp
  ConstraintSystem.cpp
  CompletionContextFinder.cpp
  DebuggerTestingTransform.cpp
  DerivedConformanceActor.cpp
  DerivedConformanceDistributedActor.cpp
  DerivedConformanceAdditiveArithmetic.cpp
  DerivedConformanceCaseIterable.cpp
  DerivedConformanceCodable.cpp
  DerivedConformanceCodingKey.cpp
  DerivedConformanceDifferentiable.cpp
  DerivedConformanceEquatableHashable.cpp
  DerivedConformanceComparable.cpp
  DerivedConformanceError.cpp
  DerivedConformanceRawRepresentable.cpp
  DerivedConformances.cpp
  ImportResolution.cpp
  InstrumenterSupport.cpp
  LookupVisibleDecls.cpp
  MiscDiagnostics.cpp
  OpenedExistentials.cpp
  PCMacro.cpp
  PlaygroundTransform.cpp
  PreCheckTarget.cpp
  ResilienceDiagnostics.cpp
  SourceLoader.cpp
  SyntacticElementTarget.cpp
  TypeOfReference.cpp
  TypeCheckAccess.cpp
  TypeCheckAttr.cpp
  TypeCheckAttrABI.cpp
  TypeCheckAvailability.cpp
  TypeCheckBitwise.cpp
  TypeCheckCaptures.cpp
  TypeCheckCircularity.cpp
  TypeCheckCodeCompletion.cpp
  TypeCheckConcurrency.cpp
  TypeCheckDistributed.cpp
  TypeCheckConstraints.cpp
  TypeCheckDecl.cpp
  TypeCheckDeclObjC.cpp
  TypeCheckDeclOverride.cpp
  TypeCheckDeclPrimary.cpp
  TypeCheckEffects.cpp
  TypeCheckExpr.cpp
  TypeCheckExprObjC.cpp
  TypeCheckGeneric.cpp
  TypeCheckInvertible.cpp
  TypeCheckMacros.cpp
  TypeCheckNameLookup.cpp
  TypeCheckPattern.cpp
  TypeCheckPropertyWrapper.cpp
  TypeCheckProtocol.cpp
  TypeCheckRegex.cpp
  TypeCheckRequestFunctions.cpp
  TypeCheckStmt.cpp
  TypeCheckStorage.cpp
  TypeCheckSwitchStmt.cpp
  TypeCheckType.cpp
  TypeCheckUnsafe.cpp
  TypeChecker.cpp
  IDETypeCheckingRequests.cpp)
if(SWIFT_FORCE_OPTIMIZED_TYPECHECKER)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" OR CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC")
    target_compile_options(swiftSema PRIVATE /O2 /Ob2)
  else()
    target_compile_options(swiftSema PRIVATE -O3)
  endif()
endif()

target_link_libraries(swiftSema PRIVATE
  swiftAST
  swiftParse
  swiftSerialization)

if (SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftSema PRIVATE
    swiftASTGen
    swiftMacroEvaluation)
endif()

set_swift_llvm_is_available(swiftSema)

----------------------------------------

TITLE: Conditionally Adding Swift Backtrace Subdirectory in CMake
DESCRIPTION: This CMake code snippet conditionally adds the swift-backtrace subdirectory to the build process if SWIFT_ENABLE_BACKTRACING is set. It's currently restricted to macOS builds as indicated by the comment.

LANGUAGE: CMake
CODE:
# Make this macOS only for now.
if(SWIFT_ENABLE_BACKTRACING)
  add_subdirectory(swift-backtrace)
endif()

----------------------------------------

TITLE: Installing libdispatch, Foundation, and XCTest for Android on Windows
DESCRIPTION: This snippet shows the commands to install libdispatch, Foundation, and XCTest after building them for Android on Windows. It uses the 'ninja install' command for each component.

LANGUAGE: cmd
CODE:
cd S:\b\a\libdispatch
ninja install

cd S:\b\a\foundation
ninja install

cd S:\b\a\xctest
ninja install

----------------------------------------

TITLE: Configuring OSLog Darwin Dependencies
DESCRIPTION: Sets up conditional dependencies for the OSLog test helper based on build flags. Includes Darwin, Concurrency, and String Processing modules when their respective features are enabled.

LANGUAGE: cmake
CODE:
set(swift_oslog_darwin_dependencies "")
if(SWIFT_BUILD_SDK_OVERLAY)
    list(APPEND swift_oslog_darwin_dependencies "Darwin")
endif()
if (SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY)
    list(APPEND swift_oslog_darwin_dependencies "_Concurrency")
endif()
if (SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING)
  list(APPEND swift_oslog_darwin_dependencies "_StringProcessing")
endif()

----------------------------------------

TITLE: Swift String Processing Library Target Configuration
DESCRIPTION: Defines the Swift String Processing library target with platform-specific dependencies, compile flags, and installation settings. Includes configurations for multiple operating systems and build types.

LANGUAGE: cmake
CODE:
add_swift_target_library(swift_StringProcessing ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  "${STRING_PROCESSING_SOURCES}"

  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  LINK_LIBRARIES ${swift_string_processing_link_libraries}

  C_COMPILE_FLAGS
    -Dswift_StringProcessing_EXPORTS
  SWIFT_COMPILE_FLAGS
    ${swift_string_processing_compile_flags}
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  SWIFT_MODULE_DEPENDS _RegexParser
  INSTALL_IN_COMPONENT stdlib
  MACCATALYST_BUILD_FLAVOR "zippered"
)

----------------------------------------

TITLE: Configuring Swift Remote Mirror Headers Installation with CMake
DESCRIPTION: Sets up a list of Swift Remote Mirror header files and configures their installation path and component designation. The headers are installed to the 'include/swift/SwiftRemoteMirror' directory as part of the 'swift-remote-mirror-headers' component.

LANGUAGE: cmake
CODE:
set(swift_remote_mirror_headers)
list(APPEND swift_remote_mirror_headers
       MemoryReaderInterface.h
       Platform.h
       SwiftRemoteMirror.h
       SwiftRemoteMirrorTypes.h
       module.modulemap)
swift_install_in_component(FILES
                             ${swift_remote_mirror_headers}
                           DESTINATION
                             "include/swift/SwiftRemoteMirror"
                           COMPONENT
                             swift-remote-mirror-headers)

----------------------------------------

TITLE: Declaring Protocol-Typed Variable in Swift
DESCRIPTION: This snippet demonstrates how to declare a variable of a protocol type in Swift. This creates an existential type, which is a non-nominal type that can hold any concrete type conforming to the protocol.

LANGUAGE: Swift
CODE:
let value: MyProtocol

----------------------------------------

TITLE: Configuring SDK Overlay Dependencies for Swift Backtrace
DESCRIPTION: Sets up variables for SDK overlays based on build configuration. Determines which overlays (Darwin, CRT, WinSDK, Glibc, Musl) to include depending on whether SWIFT_BUILD_SDK_OVERLAY is enabled.

LANGUAGE: CMake
CODE:
set(darwin)
set(wincrt_sdk)
set(glibc)
set(musl)

if(SWIFT_BUILD_SDK_OVERLAY)
  set(darwin Darwin)
  set(wincrt_sdk CRT WinSDK)
  set(glibc Glibc)
  set(musl Musl)
endif()

----------------------------------------

TITLE: Configuring Swift LLVM Passes Library in CMake
DESCRIPTION: Defines a static library named 'swiftLLVMPasses' with specified source files and LLVM components. It also links the 'swiftDemangling' library and sets up Swift LLVM availability.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftLLVMPasses STATIC
  LLVMSwiftAA.cpp
  LLVMSwiftRCIdentity.cpp
  LLVMARCOpts.cpp
  LLVMARCContract.cpp
  LLVMInlineTree.cpp
  LLVMMergeFunctions.cpp
  LLVMEmitAsyncEntryReturnMetadata.cpp

  LLVM_LINK_COMPONENTS
  analysis
  targetparser
  )
target_link_libraries(swiftLLVMPasses PRIVATE
  swiftDemangling)

set_swift_llvm_is_available(swiftLLVMPasses)

----------------------------------------

TITLE: Configuring Sphinx Documentation Build in CMake
DESCRIPTION: Sets up Sphinx documentation generator with custom paper size and creates a build target for HTML documentation. Includes error handling if sphinx-build is not found.

LANGUAGE: cmake
CODE:
add_subdirectory(tools)

find_program(SPHINX_EXECUTABLE
  NAMES sphinx-build
  HINTS $ENV{SPHINX_DIR}
  PATH_SUFFIXES bin
  DOC "Sphinx documentation generator")

SET(SWIFT_SPHINX_PAPER_SIZE "letter"
  CACHE STRING "Paper size for generated documentation")

SET(SPHINX_ARGS
  -D latex_elements.papersize=${SWIFT_SPHINX_PAPER_SIZE}
  -d ${CMAKE_BINARY_DIR}/doctrees)

if(SPHINX_EXECUTABLE)
  add_custom_target(docs_html ALL
    ${SPHINX_EXECUTABLE} ${SPHINX_ARGS} -b html
      . ${CMAKE_BINARY_DIR}/docs/html
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Building HTML documentation")
else()
  message(WARNING "Unable to find sphinx-build program. Not building docs")
endif()

----------------------------------------

TITLE: Configuring Library Dependencies
DESCRIPTION: Specifies the required library dependencies for sourcekitdInProc, including Swift language tools and SourceKit components.

LANGUAGE: cmake
CODE:
target_link_libraries(sourcekitdInProc PRIVATE
  SourceKitSwiftLang
  sourcekitdAPI
  sourcekitdService
  swiftIDETool)

----------------------------------------

TITLE: Configuring Swift Semantic Tests with CMake
DESCRIPTION: Sets up the Swift semantic analysis test suite (swiftSemaTests) with source files, required library dependencies, and compile-time definitions. Includes various test files for binding inference, constraint generation, simplification, and member lookup functionality.

LANGUAGE: cmake
CODE:
add_swift_unittest(swiftSemaTests
  SemaFixture.cpp
  BindingInferenceTests.cpp
  ConstraintGenerationTests.cpp
  ConstraintSimplificationTests.cpp
  ConstraintSystemDumpTests.cpp
  UnresolvedMemberLookupTests.cpp
  PlaceholderTypeInferenceTests.cpp
  SolutionFilteringTests.cpp
  KeypathFunctionConversionTests.cpp)

target_link_libraries(swiftSemaTests
  PRIVATE
    swiftAST
    swiftSema
    swiftSerialization)

target_compile_definitions(swiftSemaTests PRIVATE
  SWIFTLIB_DIR=\"${SWIFTLIB_DIR}\")

----------------------------------------

TITLE: Adding Swift Demangling Library in CMake
DESCRIPTION: Adds a static library named 'swiftDemangling' using add_swift_host_library. Specifies source files and applies the previously defined compile flags. This library is crucial for Swift symbol demangling functionality.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftDemangling STATIC
  Demangler.cpp
  Context.cpp
  ManglingUtils.cpp
  NodeDumper.cpp
  NodePrinter.cpp
  OldDemangler.cpp
  OldRemangler.cpp
  Punycode.cpp
  Remangler.cpp
  Errors.cpp
  CrashReporter.cpp)
target_compile_definitions(swiftDemangling PRIVATE
  ${swift_demangling_compile_flags})

----------------------------------------

TITLE: Configuring Swift Tablegen for Option Parsing in CMake
DESCRIPTION: This snippet sets up Swift tablegen to generate option parser definitions. It specifies the target definitions file, generates the options include file, and creates a public tablegen target for Swift options.

LANGUAGE: CMake
CODE:
set(LLVM_TARGET_DEFINITIONS Options.td)
swift_tablegen(Options.inc -gen-opt-parser-defs)
swift_add_public_tablegen_target(SwiftOptions)

----------------------------------------

TITLE: Derived Class Implementation
DESCRIPTION: Implements FooClassDerived inheriting from FooClassBase and conforming to FooProtocolDerived with property and method implementations.

LANGUAGE: swift
CODE:
class FooClassDerived : FooClassBase, FooProtocolDerived {
  var fooProperty1: Int32
  var fooProperty2: Int32
  var fooProperty3: Int32 { get }
  func fooInstanceFunc0()
  func fooInstanceFunc1(_ a: Int32)
  func fooInstanceFunc2(_ a: Int32, withB b: Int32)
  func fooBaseInstanceFuncOverridden()
  class func fooClassFunc0()
  init!()
  convenience init!(float f: Float)
}

----------------------------------------

TITLE: Configuring Dependencies for Swift RegexBuilder Library in CMake
DESCRIPTION: This snippet defines the libraries that the Swift RegexBuilder will link against, including swiftCore, swift_RegexParser, and swift_StringProcessing.

LANGUAGE: CMake
CODE:
set(swift_regex_builder_link_libraries
  swiftCore
  swift_RegexParser
  swift_StringProcessing)

----------------------------------------

TITLE: Defining Swift Synchronization Library Sources in CMake
DESCRIPTION: Sets up variables containing source file lists for the Swift Synchronization library, including atomic operations and platform-specific implementations.

LANGUAGE: CMake
CODE:
set(SWIFT_SYNCHRONIZATION_ATOMIC_SOURCES
  Atomics/Atomic.swift
  Atomics/AtomicBool.swift
  Atomics/AtomicFloats.swift
  Atomics/AtomicLazyReference.swift
  Atomics/AtomicMemoryOrderings.swift
  Atomics/AtomicOptional.swift
  Atomics/AtomicPointers.swift
  Atomics/AtomicRepresentable.swift
  Atomics/WordPair.swift
)

set(SWIFT_SYNCHRONIZATION_SOURCES
  ${SWIFT_SYNCHRONIZATION_ATOMIC_SOURCES}

  Cell.swift
)

set(SWIFT_SYNCHRONIZATION_GYB_SOURCES
  Atomics/AtomicIntegers.swift.gyb
  Atomics/AtomicStorage.swift.gyb
)

----------------------------------------

TITLE: Configuring Swift SIL Optimizer Sources in CMake
DESCRIPTION: Configures the source files for the swiftSILOptimizer target in CMake. Includes various analysis tools, debug info generators, and optimization passes implemented in C++.

LANGUAGE: cmake
CODE:
target_sources(swiftSILOptimizer PRIVATE
  AccessSummaryDumper.cpp
  AccessPathVerification.cpp
  AccessStorageAnalysisDumper.cpp
  AccessStorageDumper.cpp
  BasicCalleePrinter.cpp
  BasicInstructionPropertyDumper.cpp
  BugReducerTester.cpp
  CFGPrinter.cpp
  CallerAnalysisPrinter.cpp
  ComputeDominanceInfo.cpp
  ComputeLoopInfo.cpp
  ConstantEvaluatorTester.cpp
  ConstantEvaluableSubsetChecker.cpp
  EpilogueARCMatcherDumper.cpp
  EpilogueRetainReleaseMatcherDumper.cpp
  FunctionOrderPrinter.cpp
  IVInfoPrinter.cpp
  InstCount.cpp
  Link.cpp
  LoopCanonicalizer.cpp
  LoopInfoPrinter.cpp
  LoopRegionPrinter.cpp
  ModulePrinter.cpp
  RCIdentityDumper.cpp
  SerializeSILPass.cpp
  SILDebugInfoGenerator.cpp
  SILSkippingChecker.cpp
  SimplifyUnreachableContainingBlocks.cpp
  StripDebugInfo.cpp
  TestRunner.cpp
  OwnershipDumper.cpp
  OwnershipVerifierTextualErrorDumper.cpp)

----------------------------------------

TITLE: Valid Protocol Member Access in Swift
DESCRIPTION: Demonstrates three valid ways to access protocol members: through generic parameters, opaque result types, and protocol types. Shows proper usage of CustomStringConvertible protocol.

LANGUAGE: swift
CODE:
// An appropriately constrained generic parameter.
func foo<T: CustomStringConvertible>(arg: T) {
  let description: String = arg.description
}

do {
  // An appropriately constrained opaque result type.
  func foo() -> some CustomStringConvertible { true }

  let description: String = foo().description
}

// The protocol type.
func foo(arg: CustomStringConvertible) {
  let description: String = arg.description
}

----------------------------------------

TITLE: Configuring Interface Dependencies for swiftIRGen
DESCRIPTION: Specifies the interface dependencies for swiftIRGen, linking against Clang's CodeGen and AST libraries.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftIRGen INTERFACE
  clangCodeGen
  clangAST)

----------------------------------------

TITLE: Configuring Swift Demangling Library in CMake
DESCRIPTION: Sets up the swiftDemangling library target with source files, compile definitions, and include directories. Configures platform-specific options and handles conditional compilation for different build types.

LANGUAGE: CMake
CODE:
# FIXME: Refactor demangling library so that we aren't pulling sources from
#        the compiler.
add_library(swiftDemangling OBJECT
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Context.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Demangler.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/ManglingUtils.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/NodePrinter.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Punycode.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Remangler.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/NodeDumper.cpp"
  "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Errors.cpp")
target_compile_definitions(swiftDemangling PRIVATE
  $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>
  $<$<BOOL:${SwiftCore_ENABLE_OBJC_INTEROP}>:-DSWIFT_SUPPORT_OLD_MANGLING>
  $<$<BOOL:${SwiftCore_ENABLE_TYPE_PRINTING}>:-DSWIFT_STDLIB_HAS_TYPE_PRINTING>
  $<$<BOOL:${SwiftCore_ENABLE_CRASH_REPORTER_CLIENT}>:-DSWIFT_HAVE_CRASHREPORTERCLIENT>
  $<$<BOOL:${SwiftCore_HAS_ASL}>:-DSWIFT_STDLIB_HAS_ASL>)

target_compile_definitions(swiftDemangling PUBLIC
    $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_INLINE_NAMESPACE=__runtime>)

target_include_directories(swiftDemangling
  PRIVATE
    "${SwiftCore_SWIFTC_SOURCE_DIR}/include"
    "${PROJECT_BINARY_DIR}/include")

target_link_libraries(swiftDemangling PRIVATE swiftShims)

if(SwiftCore_ENABLE_CRASH_REPORTER_CLIENT)
  # We could likely pull the copy from the runtime sources
  add_library(swiftDemanglingCR OBJECT
    "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/CrashReporter.cpp")
  target_link_libraries(swiftDemanglingCR PRIVATE swiftShims)
endif()

if(SwiftCore_ENABLE_OBJC_INTEROP)
  target_sources(swiftDemangling PRIVATE
    "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/OldDemangler.cpp"
    "${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/OldRemangler.cpp")
endif()

if(LINUX OR BSD)
  target_compile_options(swiftDemangling PRIVATE -fno-lto)
endif()

if(NOT BUILD_SHARED_LIBS)
  install(TARGETS swiftDemangling
    EXPORT SwiftCoreTargets
    COMPONENT SwiftCore_runtime)
endif()

----------------------------------------

TITLE: Configuring Swift Frontend Bootstrapping
DESCRIPTION: Sets up bootstrapping levels 0 and 1 for the Swift frontend compiler, including necessary link libraries and symlinks

LANGUAGE: cmake
CODE:
add_swift_host_tool(swift-frontend-bootstrapping0
  driver.cpp
  SWIFT_COMPONENT no_component
  HAS_SWIFT_MODULES
  BOOTSTRAPPING 0
  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY
)
target_link_libraries(swift-frontend-bootstrapping0
                      PRIVATE
                        swiftDriverTool
                        swiftCompilerStub)

----------------------------------------

TITLE: Copying Swift C++ Interop Support Header in CMake
DESCRIPTION: This snippet creates a custom command to copy the 'bridging' support header to the Swift include directory. It also defines a custom target for this operation.

LANGUAGE: CMake
CODE:
add_custom_command(
    OUTPUT "${SWIFT_INCLUDE_DIR}/swift/bridging"
    DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging"
    COMMAND "${CMAKE_COMMAND}" "-E" "copy" "${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging" "${SWIFT_INCLUDE_DIR}/swift")

add_custom_target("copy_cxxInterop_support_header"
    DEPENDS "${SWIFT_INCLUDE_DIR}/swift/bridging"
    COMMENT "Copying C++ interop support header to ${SWIFT_INCLUDE_DIR}/swift")

----------------------------------------

TITLE: Configuring SourceKit Include Directories in CMake
DESCRIPTION: Sets up include directory path for SourceKit headers, ensuring they are added before other include paths using BEFORE flag.

LANGUAGE: cmake
CODE:
include_directories(BEFORE
  ${SWIFT_SOURCE_DIR}/tools/SourceKit/include
)

----------------------------------------

TITLE: Adding Swift SIL Optimizer Subdirectories
DESCRIPTION: Adds various subdirectories containing different optimization passes and utilities to the build system. Includes components for ARC, analysis, differentiation, transforms, and other optimization-related modules.

LANGUAGE: cmake
CODE:
add_subdirectory(ARC)
add_subdirectory(Analysis)
add_subdirectory(Differentiation)
add_subdirectory(FunctionSignatureTransforms)
add_subdirectory(IPO)
add_subdirectory(LoopTransforms)
add_subdirectory(Mandatory)
add_subdirectory(PassManager)
add_subdirectory(SILCombiner)
add_subdirectory(SemanticARC)
add_subdirectory(Transforms)
add_subdirectory(UtilityPasses)
add_subdirectory(Utils)

----------------------------------------

TITLE: Configuring Clang Dependencies and TableGen in CMake
DESCRIPTION: Sets up dependencies for Clang headers and configures TableGen for Swift Cache Tool options. Ensures proper build order and resource generation.

LANGUAGE: cmake
CODE:
if(NOT SWIFT_BUILT_STANDALONE)
  add_dependencies(swiftDriverTool clang-resource-headers)
endif()

set_swift_llvm_is_available(swiftDriverTool)

set(LLVM_TARGET_DEFINITIONS SwiftCacheToolOptions.td)
swift_tablegen(SwiftCacheToolOptions.inc -gen-opt-parser-defs)
swift_add_public_tablegen_target(SwiftCacheToolOptions)

add_dependencies(swiftDriverTool SwiftCacheToolOptions)

----------------------------------------

TITLE: Version Number and Build Configuration
DESCRIPTION: Handles build number configuration with Windows SxS compatibility limits (0-65535) and sets up project version information.

LANGUAGE: cmake
CODE:
if($ENV{BUILD_NUMBER})
  math(EXPR BUILD_NUMBER "$ENV{BUILD_NUMBER} % 65535")
  set(BUILD_NUMBER ".${BUILD_NUMBER}")
endif()
project(SwiftOverlay
  LANGUAGES C CXX Swift
  VERSION 6.1.0${BUILD_NUMBER})

----------------------------------------

TITLE: Defining Unicode Script Property Groups
DESCRIPTION: Defines the associations between Unicode codepoint ranges and their corresponding scripts using a semicolon-delimited format

LANGUAGE: unicode
CODE:
0000..001F    ; Common # Cc  [32] <control-0000>..<control-001F>

LANGUAGE: unicode
CODE:
0020          ; Common # Zs       SPACE

----------------------------------------

TITLE: Configuring Swift LLVM Support Object Library in CMake
DESCRIPTION: Defines an object library target 'swiftLLVMSupport' containing essential LLVM support components like error handling, hashing, memory allocation, and string utilities. The library is configured to never be installed as a component.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftLLVMSupport OBJECT_LIBRARY
    ErrorHandling.cpp
    Hashing.cpp
    MemAlloc.cpp
    SmallPtrSet.cpp
    SmallVector.cpp
    StringRef.cpp
  INSTALL_IN_COMPONENT
    never_install)

----------------------------------------

TITLE: Defining Compile Flags for Swift Backtrace
DESCRIPTION: Sets up compilation flags for the swift-backtrace target, including C++ interoperability mode, include directories, and feature disabling.

LANGUAGE: CMake
CODE:
set(BACKTRACING_COMPILE_FLAGS
  "-cxx-interoperability-mode=default"
  "-I${SWIFT_STDLIB_SOURCE_DIR}/public/RuntimeModule/modules"
  "-Xcc;-I${SWIFT_SOURCE_DIR}/include"
  "-Xcc;-I${CMAKE_BINARY_DIR}/include"
  "-disable-upcoming-feature;MemberImportVisibility")

----------------------------------------

TITLE: Defining Swift Parser Static Library
DESCRIPTION: Configures the swiftParse static library with its source files and core dependency on swiftAST library.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftParse STATIC
  Confusables.cpp
  Lexer.cpp
  ParseDecl.cpp
  ParseDeclName.cpp
  ParseExpr.cpp
  ParseGeneric.cpp
  ParseIfConfig.cpp
  ParsePattern.cpp
  Parser.cpp
  ParseRegex.cpp
  ParseRequests.cpp
  ParseStmt.cpp
  ParseType.cpp
  ParseVersion.cpp
  PersistentParserState.cpp)
target_link_libraries(swiftParse PRIVATE
  swiftAST
)

----------------------------------------

TITLE: Using Deprecated Function in Swift
DESCRIPTION: Demonstrates the use of a function annotated with @available for deprecation. When called, this function will trigger a deprecation warning.

LANGUAGE: swift
CODE:
@available(iOS, deprecated: 10.0)
func oldFunction() {
  // This function is deprecated and should not be used.
}

oldFunction() // 'oldFunction()' is deprecated

----------------------------------------

TITLE: Generating Revision Include Files
DESCRIPTION: Function to generate version control revision include files for components. Handles custom target creation and file generation based on VCS information.

LANGUAGE: cmake
CODE:
function(generate_revision_inc revision_inc_var name dir)
  if(SWIFT_APPEND_VC_REV)
    find_first_existing_vc_file("${dir}" ${name}_vc)
    set(dir_when_append_enabled ${dir})
  endif()

  set(version_inc "${CMAKE_CURRENT_BINARY_DIR}/${name}Revision.inc")

  set(generate_vcs_version_script "${LLVM_MAIN_SRC_DIR}/cmake/modules/GenerateVersionFromVCS.cmake")

  add_custom_command(OUTPUT "${version_inc}"
    DEPENDS "${${name}_vc}" "${generate_vcs_version_script}"
    COMMAND ${CMAKE_COMMAND} "-DNAMES=$<UPPER_CASE:${name}>"
                             "-D$<UPPER_CASE:${name}>_SOURCE_DIR=${dir_when_append_enabled}"
                             "-DHEADER_FILE=${version_inc}"
                             -P "${generate_vcs_version_script}")

  set_source_files_properties("${version_inc}"
    PROPERTIES GENERATED TRUE
               HEADER_FILE_ONLY TRUE)
  set(${revision_inc_var} ${version_inc} PARENT_SCOPE)
endfunction()

----------------------------------------

TITLE: Building Swift-Inspect on Windows
DESCRIPTION: Command to build swift-inspect on Windows using Swift Package Manager. It includes necessary parameters to locate required libraries.

LANGUAGE: cmd
CODE:
swift build -Xcc -I%SDKROOT%\usr\include\swift\SwiftRemoteMirror -Xlinker %SDKROOT%\usr\lib\swift\windows\x86_64\swiftRemoteMirror.lib

----------------------------------------

TITLE: Installing Swift Static Mirror Library Components with CMake
DESCRIPTION: This snippet configures the installation of the Swift Static Mirror library and its associated files. It specifies installation paths for different components of the library, including binaries, headers, and other required files.

LANGUAGE: CMake
CODE:
swift_install_in_component(TARGETS libStaticMirror
  ARCHIVE DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}" COMPONENT static-mirror-lib
  LIBRARY DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}" COMPONENT static-mirror-lib
  RUNTIME DESTINATION "bin" COMPONENT static-mirror-lib)
swift_install_in_component(DIRECTORY "${SWIFT_MAIN_INCLUDE_DIR}/swift-c/StaticMirror/"
                           DESTINATION "lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SCAN_LIB_NAME}"
                           COMPONENT static-mirror-lib)

----------------------------------------

TITLE: Generating Header Dependencies Source File
DESCRIPTION: Creates a C++ source file that includes all required Swift tool headers defined in the module map. This ensures proper compilation dependencies for the Swift compiler.

LANGUAGE: cmake
CODE:
file(GENERATE
  OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/HeaderDependencies.cpp"
  CONTENT "
#ifndef COMPILED_WITH_SWIFT
#define COMPILED_WITH_SWIFT
#endif

#include \"swift/Basic/BasicBridging.h\"
#include \"swift/AST/ASTBridging.h\"
#include \"swift/IDE/IDEBridging.h\"
#include \"swift/SIL/SILBridging.h\"
#include \"swift/SILOptimizer/OptimizerBridging.h\"
")

----------------------------------------

TITLE: Empty Swift Comment
DESCRIPTION: A single line comment indicating empty content.

LANGUAGE: swift
CODE:
// Empty

----------------------------------------

TITLE: Configuring ObservationMacros Library Build in CMake
DESCRIPTION: Adds a Swift macro library named ObservationMacros with source files and required Swift dependencies. The library includes three Swift source files and depends on SwiftDiagnostics, SwiftSyntaxBuilder, SwiftSyntax, and SwiftSyntaxMacros frameworks.

LANGUAGE: cmake
CODE:
add_swift_macro_library(ObservationMacros
  Availability.swift
  Extensions.swift
  ObservableMacro.swift
  SWIFT_DEPENDENCIES
    SwiftDiagnostics
    SwiftSyntaxBuilder
    SwiftSyntax
    SwiftSyntaxMacros
)

----------------------------------------

TITLE: Configuring Swift Backtrace Target Executable
DESCRIPTION: Adds the swift-backtrace executable target with specified sources, dependencies, and compile flags. Configures for macOS and Linux platforms.

LANGUAGE: CMake
CODE:
add_swift_target_executable(swift-backtrace BUILD_WITH_LIBEXEC
  ${BACKTRACING_SOURCES}

  SWIFT_MODULE_DEPENDS         ${runtime}

  SWIFT_MODULE_DEPENDS_OSX          ${darwin}
  SWIFT_MODULE_DEPENDS_WINDOWS      ${wincrt_sdk}
  SWIFT_MODULE_DEPENDS_LINUX        ${glibc}
  SWIFT_MODULE_DEPENDS_LINUX_STATIC ${musl}

  DEPLOYMENT_VERSION_OSX ${osx_deployment_target}

  INSTALL_IN_COMPONENT libexec
  COMPILE_FLAGS
    ${BACKTRACING_COMPILE_FLAGS}
    -parse-as-library

  TARGET_SDKS OSX LINUX)

----------------------------------------

TITLE: Configuring Swift Runtime Library Dependencies
DESCRIPTION: Defines the core library dependencies required by the Swift Runtime module.

LANGUAGE: cmake
CODE:
set(swift_runtime_link_libraries
  swiftCore
  swift_Concurrency
)

----------------------------------------

TITLE: Preconcurrency Conformance Solution
DESCRIPTION: Shows how to use @preconcurrency annotation to defer actor isolation checking to runtime instead of compile-time.

LANGUAGE: swift
CODE:
@MainActor
struct MyData: @preconcurrency P {
  func f() { }
}

----------------------------------------

TITLE: Configuring Swift API Digester Static Library Build
DESCRIPTION: Configures the build for swiftAPIDigester static library by adding source files and linking dependencies. The library includes ModuleAnalyzerNodes.cpp and ModuleDiagsConsumer.cpp source files, links against swiftIDE library, and configures LLVM availability.

LANGUAGE: cmake
CODE:
add_swift_host_library(swiftAPIDigester STATIC
  ModuleAnalyzerNodes.cpp
  ModuleDiagsConsumer.cpp)

target_link_libraries(swiftAPIDigester PRIVATE
  swiftIDE)

set_swift_llvm_is_available(swiftAPIDigester)

----------------------------------------

TITLE: Configuring Optional LLVM Sources in CMake
DESCRIPTION: Sets up optional source files for LLVM integration, including Objective-C and GYB sources. This allows for conditional compilation based on build configuration.

LANGUAGE: CMake
CODE:
set(LLVM_OPTIONAL_SOURCES
    ${swift_stubs_objc_sources}
    ${swift_stubs_gyb_sources})

----------------------------------------

TITLE: Configuring Swift Demangling Tool in CMake
DESCRIPTION: Sets up the swift-demangle tool with its source file, LLVM components, and Swift component. It also specifies the required link libraries for the tool.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-demangle
  swift-demangle.cpp
  LLVM_LINK_COMPONENTS support
  SWIFT_COMPONENT compiler
  )
target_link_libraries(swift-demangle
                      PRIVATE
                        swiftDemangling)

----------------------------------------

TITLE: Adding Swift Project Subdirectories in CMake
DESCRIPTION: Configures CMake to include three Swift-related subdirectories in the build process: ASTGen for AST generation, MacroEvaluation for macro processing, and SwiftIDEUtilsBridging for IDE utilities bridging.

LANGUAGE: cmake
CODE:
add_subdirectory(ASTGen)
add_subdirectory(MacroEvaluation)
add_subdirectory(SwiftIDEUtilsBridging)

----------------------------------------

TITLE: Configuring Embedded Swift Unicode Library Build in CMake
DESCRIPTION: This CMake script configures the build process for the embedded Swift Unicode library. It iterates through target triples, sets up compilation flags, and defines targets for building and installing the library components. The script handles different host variants and architectures, excluding Windows MSVC and AVR targets.

LANGUAGE: CMake
CODE:
# Embedded Swift Unicode library
if(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)
  add_custom_target(embedded-unicode)
  add_dependencies(embedded-libraries embedded-unicode)

  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})
    string(REGEX REPLACE "[ \t]+" ";" list "${entry}")
    list(GET list 0 arch)
    list(GET list 1 mod)
    list(GET list 2 triple)

    if("${mod}" MATCHES "-windows-msvc$")
      continue()
    endif()

    if("${arch}" MATCHES "avr")
      continue()
    endif()

    if (SWIFT_HOST_VARIANT STREQUAL "linux")
      set(extra_c_compile_flags -ffreestanding)
    elseif (SWIFT_HOST_VARIANT STREQUAL "macosx")
      set(extra_c_compile_flags -ffreestanding)
    endif()
    list(APPEND extra_c_compile_flags -nostdinc++)

    set(SWIFT_SDK_embedded_ARCH_${mod}_MODULE "${mod}")
    set(SWIFT_SDK_embedded_LIB_SUBDIR "embedded")
    set(SWIFT_SDK_embedded_ARCH_${mod}_TRIPLE "${triple}")

    add_swift_target_library_single(
      embedded-unicode-${mod}
      swiftUnicodeDataTables
      STATIC
      IS_FRAGILE

      UnicodeData.cpp
      UnicodeGrapheme.cpp
      UnicodeNormalization.cpp
      UnicodeScalarProps.cpp
      UnicodeWord.cpp

      C_COMPILE_FLAGS ${extra_c_compile_flags}
      MODULE_DIR "${CMAKE_BINARY_DIR}/lib/swift/embedded"
      SDK "embedded"
      ARCHITECTURE "${mod}"
      DEPENDS embedded-stdlib-${mod}
      INSTALL_IN_COMPONENT stdlib
      )
    swift_install_in_component(
      TARGETS embedded-unicode-${mod}
      DESTINATION "lib/swift/embedded/${mod}"
      COMPONENT "stdlib"
      )
    swift_install_in_component(
      FILES "${SWIFTLIB_DIR}/embedded/${mod}/libswiftUnicodeDataTables.a"
      DESTINATION "lib/swift/embedded/${mod}/"
      COMPONENT "stdlib"
      PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
      )
    set_property(TARGET embedded-unicode-${mod} PROPERTY OSX_ARCHITECTURES "${arch}")

    add_dependencies(embedded-unicode embedded-unicode-${mod})
  endforeach()
endif()

----------------------------------------

TITLE: Adding Swift Macro Source Directories in CMake
DESCRIPTION: Adds subdirectories containing Swift macro source code to the build system.

LANGUAGE: cmake
CODE:
add_subdirectory(Sources/SwiftMacros)
add_subdirectory(Sources/ObservationMacros)

----------------------------------------

TITLE: Parameter Type Changes in AnimalStatusDescriptor
DESCRIPTION: Lists parameter type changes in AnimalStatusDescriptor methods, primarily changing from String-based types to AnimalAttributeName-based types

LANGUAGE: swift
CODE:
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.addingAttributes(_:) has parameter 0 type change from [Swift.String : Any] to [APINotesTest.AnimalAttributeName : Any]
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.addingAttributesArray(_:) has parameter 0 type change from [Swift.String] to [APINotesTest.AnimalAttributeName]
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.addingOptionalAttributes(_:) has parameter 0 type change from [Swift.String : Any]? to [APINotesTest.AnimalAttributeName : Any]?
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.addingOptionalAttributesArray(_:) has parameter 0 type change from [Swift.String]? to [APINotesTest.AnimalAttributeName]?
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.animalStatusSingleAttribute(_:) has parameter 0 type change from Swift.String to APINotesTest.AnimalAttributeName
APINotesTest(APINotesTest.h): Func AnimalStatusDescriptor.animalStatusSingleOptionalAttribute(_:) has parameter 0 type change from Swift.String? to APINotesTest.AnimalAttributeName?

----------------------------------------

TITLE: Configuring Swift CMake Config File
DESCRIPTION: Uses the configure_file command to generate the SwiftConfig.cmake file from a template. This file likely contains the necessary configurations for using Swift in other CMake projects.

LANGUAGE: cmake
CODE:
configure_file(
  SwiftConfig.cmake.in
  ${swift_cmake_builddir}/SwiftConfig.cmake
  @ONLY)

----------------------------------------

TITLE: Linking Swift Regex Parser Dependencies
DESCRIPTION: Links the swift_RegexParser library with the swiftCore library as a private dependency.

LANGUAGE: cmake
CODE:
target_link_libraries(swift_RegexParser PRIVATE swiftCore)

----------------------------------------

TITLE: Adding Swift Runtime Target Library
DESCRIPTION: Configures the main Swift Runtime library target with platform-specific dependencies and build settings.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftRuntime ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  ${RUNTIME_SOURCES}

  SWIFT_MODULE_DEPENDS ${concurrency} ${cxxstdlib_overlay}

  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  PRIVATE_LINK_LIBRARIES ${swift_runtime_link_libraries}

  DEPLOYMENT_VERSION_OSX ${osx_deployment_target}

  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    ${RUNTIME_COMPILE_FLAGS}
    -parse-stdlib

  LINK_FLAGS
    ${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}

  INSTALL_IN_COMPONENT stdlib
  MACCATALYST_BUILD_FLAVOR "zippered"

  TARGET_SDKS OSX LINUX LINUX_STATIC
)

----------------------------------------

TITLE: Emoji Property Definitions
DESCRIPTION: Defines code point ranges and their associated emoji properties including Emoji, Emoji_Presentation, Emoji_Modifier, Emoji_Modifier_Base, Emoji_Component and Extended_Pictographic.

LANGUAGE: txt
CODE:
0023          ; Emoji                # E0.0   [1] (#️)       hash sign
002A          ; Emoji                # E0.0   [1] (*️)       asterisk
0030..0039    ; Emoji                # E0.0  [10] (0️..9️)    digit zero..digit nine

----------------------------------------

TITLE: Configuring Doxygen Documentation Build in CMake
DESCRIPTION: Configures Doxygen documentation generation with optional search engine integration. Sets up build targets and handles installation of generated documentation files.

LANGUAGE: cmake
CODE:
if (LLVM_ENABLE_DOXYGEN)
if (DOXYGEN_FOUND)
  set(abs_srcdir ${CMAKE_CURRENT_SOURCE_DIR})
  set(abs_builddir ${CMAKE_CURRENT_BINARY_DIR})

  if (HAVE_DOT)
    set(DOT ${LLVM_PATH_DOT})
  endif()

  if (LLVM_DOXYGEN_EXTERNAL_SEARCH)
    set(enable_searchengine "YES")
    set(searchengine_url "${LLVM_DOXYGEN_SEARCHENGINE_URL}")
    set(enable_server_based_search "YES")
    set(enable_external_search "YES")
    set(extra_search_mappings "${LLVM_DOXYGEN_SEARCH_MAPPINGS}")
  else()
    set(enable_searchengine "NO")
    set(searchengine_url "")
    set(enable_server_based_search "NO")
    set(enable_external_search "NO")
    set(extra_search_mappings "")
  endif()

  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in
    ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg @ONLY)

  set(abs_top_srcdir)
  set(abs_top_builddir)
  set(DOT)
  set(enable_searchengine)
  set(searchengine_url)
  set(enable_server_based_search)
  set(enable_external_search)
  set(extra_search_mappings)

  add_custom_target(doxygen-swift
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating swift doxygen documentation." VERBATIM)

  if(LLVM_BUILD_DOCS)
    add_dependencies(doxygen doxygen-swift)
  endif()

  add_dependencies(dev doxygen-swift)
  swift_install_in_component(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/doxygen/html"
                             DESTINATION "docs/html"
                             COMPONENT dev)
endif()
endif()

----------------------------------------

TITLE: Configuring Swift Compiler Options and Dependencies
DESCRIPTION: Establishes Swift compiler settings including explicit module building and standard library import controls. Sets up source directory paths and includes required Swift Core package.

LANGUAGE: cmake
CODE:
if(NOT PROJECT_IS_TOP_LEVEL)
  message(FATAL_ERROR "Swift StringProcessing must build as a standalone project")
endif()

set(${PROJECT_NAME}_SWIFTC_SOURCE_DIR
  "${PROJECT_SOURCE_DIR}/../../../"
  CACHE FILEPATH "Path to the root source directory of the Swift compiler")

find_package(SwiftCore)

include(AvailabilityMacros)

add_compile_options(
  $<$<COMPILE_LANGUAGE:Swift>:-explicit-module-build>
  $<$<COMPILE_LANGUAGE:Swift>:-nostdlibimport>
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-string-processing-module-import>")

----------------------------------------

TITLE: Creating Symlink for swift-api-dump.py in CMake
DESCRIPTION: Sets up a post-build symlink for swift-api-dump.py in the bin directory. This ensures the script is accessible in the build output directory.

LANGUAGE: CMake
CODE:
# Create a symlink for swift-api-dump.py in the bin directory
swift_create_post_build_symlink(swift-ide-test
  SOURCE "${SWIFT_SOURCE_DIR}/utils/swift-api-dump.py"
  DESTINATION "${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-api-dump.py"
  COMMENT "Creating development symlink for swift-api-dump.py.")

----------------------------------------

TITLE: Adding Dependency to swiftClangImporter in CMake
DESCRIPTION: This snippet adds a dependency on the 'copy_cxxInterop_support_header' target to the swiftClangImporter target, ensuring the support header is copied before building the importer.

LANGUAGE: CMake
CODE:
add_dependencies(swiftClangImporter
    "copy_cxxInterop_support_header")

----------------------------------------

TITLE: Removed Declarations
DESCRIPTION: Lists declarations that have been removed from the codebase including accessors, types and functions

LANGUAGE: swift
CODE:
/* Removed Decls */
cake: Accessor GlobalVarChangedToLet.Modify() has been removed
cake: Accessor GlobalVarChangedToLet.Set() has been removed
cake: AssociatedType RequirementChanges.removedType has been removed

----------------------------------------

TITLE: Configuring API Notes Sources and Output Directory in CMake
DESCRIPTION: Sets up the source files for API notes and defines the output directory where they will be copied.

LANGUAGE: CMake
CODE:
set(sources
  Dispatch.apinotes
  os.apinotes
)

set(output_dir "${SWIFTLIB_DIR}/apinotes")

----------------------------------------

TITLE: Configuring RegexBuilder Library Source Files with CMake
DESCRIPTION: Defines the source files that make up the swiftRegexBuilder library including core functionality files like CharacterClass, Anchor, Builder, Algorithms, Variadics, and DSL.

LANGUAGE: cmake
CODE:
add_library(swiftRegexBuilder
  CharacterClass.swift
  Anchor.swift
  Builder.swift
  Algorithms.swift
  Variadics.swift
  DSL.swift)

----------------------------------------

TITLE: Configuring and Copying LLDB-with-tools in CMake for Swift
DESCRIPTION: This snippet configures the 'lldb-with-tools' file and copies it to the Swift runtime output directory with specific file permissions. It uses CMake's configure_file and file commands.

LANGUAGE: cmake
CODE:
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/lldb-with-tools.in
  ${CMAKE_CURRENT_BINARY_DIR}/lldb-with-tools
  @ONLY)

file(COPY ${CMAKE_CURRENT_BINARY_DIR}/lldb-with-tools
  DESTINATION "${SWIFT_RUNTIME_OUTPUT_INTDIR}"
  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
  GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

----------------------------------------

TITLE: Word Break Property Definitions
DESCRIPTION: Defines code point ranges and their assigned word break property values including Double_Quote, Single_Quote, Hebrew_Letter, CR, LF, Newline, Extend, Regional_Indicator, Format, Katakana, ALetter, MidLetter, MidNum, MidNumLet, Numeric, ExtendNumLet, ZWJ and WSegSpace.

LANGUAGE: Unicode
CODE:
# Property:	Word_Break

#  All code points not explicitly listed for Word_Break
#  have the value Other (XX).

# @missing: 0000..10FFFF; Other

----------------------------------------

TITLE: Configuring Swift Optimizer Source Files
DESCRIPTION: CMake configuration that specifies source files for the Swift compiler's optimizer module. The swift_compiler_sources function is called with 'Optimizer' as the target and a list of Swift source files that implement various optimization patterns.

LANGUAGE: cmake
CODE:
swift_compiler_sources(Optimizer
  SimplifyAllocRefDynamic.swift
  SimplifyAllocStack.swift
  SimplifyApply.swift
  SimplifyBeginAndLoadBorrow.swift
  SimplifyBeginCOWMutation.swift
  SimplifyBranch.swift
  SimplifyBuiltin.swift
  SimplifyCheckedCast.swift
  SimplifyClassifyBridgeObject.swift
  SimplifyCondBranch.swift
  SimplifyCondFail.swift
  SimplifyConvertEscapeToNoEscape.swift
  SimplifyCopyValue.swift
  SimplifyDebugStep.swift
  SimplifyDestroyValue.swift
  SimplifyDestructure.swift
  SimplifyFixLifetime.swift
  SimplifyGlobalValue.swift
  SimplifyInitEnumDataAddr.swift
  SimplifyKeyPath.swift
  SimplifyLoad.swift
  SimplifyMisc.swift
  SimplifyPartialApply.swift
  SimplifyPointerToAddress.swift
  SimplifyRefCasts.swift
  SimplifyRetainReleaseValue.swift
  SimplifyStrongRetainRelease.swift
  SimplifyStructExtract.swift
  SimplifySwitchEnum.swift
  SimplifyTuple.swift
  SimplifyTupleExtract.swift
  SimplifyUncheckedEnumData.swift
  SimplifyValueToBridgeObject.swift
  SimplifyWitnessMethod.swift)

----------------------------------------

TITLE: Configuring libstdcxx Module Map for Swift Clang Importer
DESCRIPTION: This snippet copies the libstdcxx.modulemap file from the Swift source directory to the current binary directory. It ensures that the necessary module map is available for the Clang importer.

LANGUAGE: CMake
CODE:
configure_file(${SWIFT_SOURCE_DIR}/stdlib/public/Cxx/libstdcxx/libstdcxx.modulemap
  ${CMAKE_CURRENT_BINARY_DIR}/libstdcxx.modulemap COPYONLY)

----------------------------------------

TITLE: Configuring Swift Refactor Tool Build in CMake
DESCRIPTION: Defines the swift-refactor tool as a Swift host tool, specifying its source file, component category, and required LLVM link components. It also sets up the target link libraries for the tool, including various Swift modules.

LANGUAGE: CMake
CODE:
add_swift_host_tool(swift-refactor
  swift-refactor.cpp
  SWIFT_COMPONENT testsuite-tools
  LLVM_LINK_COMPONENTS support
)
target_link_libraries(swift-refactor
                      PRIVATE
                        swiftDriver
                        swiftFrontend
                        swiftIDE
                        swiftRefactoring)

----------------------------------------

TITLE: Adding Swift Compiler Subdirectories in CMake
DESCRIPTION: Configures the build system to include core Swift compiler components in dependency order. Starts with Basic utilities, followed by Abstract Syntax Tree (AST), Swift Intermediate Language (SIL), and finally the Optimizer module.

LANGUAGE: cmake
CODE:
add_subdirectory(Basic)
add_subdirectory(AST)
add_subdirectory(SIL)
add_subdirectory(Optimizer)

----------------------------------------

TITLE: Configuring Swift Runtime Sanitizer Flags
DESCRIPTION: Sets compiler and linker flags for Thread Sanitizer support in the Swift runtime when SWIFT_RUNTIME_USE_SANITIZERS is enabled.

LANGUAGE: cmake
CODE:
if(SWIFT_RUNTIME_USE_SANITIZERS)
  if("Thread" IN_LIST SWIFT_RUNTIME_USE_SANITIZERS)
    list(APPEND SWIFT_RUNTIME_CXX_FLAGS "-fsanitize=thread")
    list(APPEND SWIFT_RUNTIME_LINK_FLAGS "-fsanitize=thread")
    list(APPEND SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS "-sanitize=thread")
    list(APPEND SWIFT_RUNTIME_SWIFT_LINK_FLAGS "-fsanitize=thread")
  endif()
endif()

----------------------------------------

TITLE: Configuring Swift Immediate Static Library with CMake
DESCRIPTION: Defines the swiftImmediate static library with its source files, required LLVM components, and target link libraries. It includes core Swift components and various LLVM execution and optimization modules.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftImmediate STATIC
  SwiftMaterializationUnit.cpp
  Immediate.cpp
  LLVM_LINK_COMPONENTS
    executionengine
    linker
    mcjit
    orcjit
    orctargetprocess
    jitlink
    transformutils)
target_link_libraries(swiftImmediate PRIVATE
  swiftFrontend
  swiftIDE
  swiftIRGen
  swiftSILGen
  swiftSILOptimizer)

----------------------------------------

TITLE: Installing Swift Shim Header Files with CMake
DESCRIPTION: This snippet installs various Swift shim header files to a specified destination. It uses CMake's install command to copy the files to the appropriate directory.

LANGUAGE: CMake
CODE:
install(FILES
  AssertionReporting.h
  CoreFoundationShims.h
  EmbeddedShims.h
  FoundationShims.h
  GlobalObjects.h
  HeapObject.h
  KeyPath.h
  LibcOverlayShims.h
  LibcShims.h
  MetadataSections.h
  ObjCShims.h
  Random.h
  RefCount.h
  Reflection.h
  RuntimeShims.h
  RuntimeStubs.h
  SwiftStdbool.h
  SwiftStddef.h
  SwiftStdint.h
  System.h
  Target.h
  ThreadLocalStorage.h
  UnicodeData.h
  Visibility.h
  _SwiftConcurrency.h
  _SwiftDistributed.h
  _SynchronizationShims.h
  module.modulemap
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/swift/shims"
  COMPONENT SwiftCore_development)

----------------------------------------

TITLE: Adding Observation Library Directory in CMake
DESCRIPTION: Adds the Observation library source directory to the CMake build system using add_subdirectory command. This ensures the Observation support library is included in the build process.

LANGUAGE: cmake
CODE:
add_subdirectory(Sources/Observation)

----------------------------------------

TITLE: Language-Sensitive Casing for Turkish and Azeri in Unicode
DESCRIPTION: Specifies special casing rules for Turkish and Azeri languages, handling the dotted and dotless I characters.

LANGUAGE: Unicode
CODE:
0130; 0069; 0130; 0130; tr; # LATIN CAPITAL LETTER I WITH DOT ABOVE
0130; 0069; 0130; 0130; az; # LATIN CAPITAL LETTER I WITH DOT ABOVE

----------------------------------------

TITLE: Configure Swift Language Settings
DESCRIPTION: Sets up Swift compiler flags, C++ standard version, and enables required languages

LANGUAGE: cmake
CODE:
enable_language(C)
enable_language(CXX)

set(SWIFT_MIN_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD ${SWIFT_MIN_CXX_STANDARD} CACHE STRING "C++ standard to conform to")
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_EXTENSIONS NO)

----------------------------------------

TITLE: Defining Swift Benchmark Modules
DESCRIPTION: Declares the list of single-source and multi-source benchmark modules to be built

LANGUAGE: cmake
CODE:
set(SWIFT_BENCH_MODULES
    single-source/Ackermann
    single-source/AngryPhonebook
    # ... additional modules ...
)

set(SWIFT_MULTISOURCE_SWIFT_BENCHES
  multi-source/PrimsSplit
)

----------------------------------------

TITLE: Installing Swift Shims and Clang Headers in CMake
DESCRIPTION: Configures the installation of Swift shim headers, Clang headers, and related components using CMake's installation commands.

LANGUAGE: CMake
CODE:
swift_install_in_component(FILES ${sources}
                           DESTINATION "lib/swift/shims"
                           COMPONENT stdlib)

# ... (additional installation commands for static stdlib and Clang headers)

swift_install_in_component(DIRECTORY "${clang_headers_location}/"
                           DESTINATION "lib/swift/clang"
                           COMPONENT clang-builtin-headers
                           REGEX "\.\(h|modulemap\)$")

# ... (additional installation commands and symlink setups)

----------------------------------------

TITLE: CoreFoundation Type Definition
DESCRIPTION: Definition of a class intended to work with CoreFoundation types.

LANGUAGE: Swift
CODE:
class MyLittleCFType {
}

----------------------------------------

TITLE: Defining General Category Code Point Ranges
DESCRIPTION: Each line defines a range of Unicode code points and their General Category property. The format is: code point range ; category # count description

LANGUAGE: Plain Text
CODE:
0041..005A    ; Lu #  [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z

----------------------------------------

TITLE: Configuring Swift Command Line Support Library in CMake
DESCRIPTION: Configures and builds the swiftCommandLineSupport static library with necessary include directories, compiler definitions, and dependencies. The library is installed only when not building shared libraries.

LANGUAGE: cmake
CODE:
if(SwiftCore_ENABLE_COMMANDLINE_SUPPORT)
  add_library(swiftCommandLineSupport STATIC CommandLine.cpp)
  target_include_directories(swiftCommandLineSupport PRIVATE
    "${SwiftCore_SWIFTC_SOURCE_DIR}/include"
    "${PROJECT_BINARY_DIR}/include")
  target_compile_definitions(swiftCommandLineSupport PUBLIC
    -DSWIFT_STDLIB_HAS_COMMANDLINE)

  target_link_libraries(swiftCommandLineSupport PRIVATE
    swiftShims)

  if(NOT BUILD_SHARED_LIBS)
    install(TARGETS swiftCommandLineSupport
      EXPORT SwiftCoreTargets
      COMPONENT SwiftCore_runtime)
  endif()
endif()

----------------------------------------

TITLE: Building Swift C++ Standard Library Overlay
DESCRIPTION: Configures the main Swift C++ Standard Library overlay target with platform-specific dependencies, compilation flags, and deployment versions.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftCxxStdlib STATIC NO_LINK_NAME IS_STDLIB IS_SWIFT_ONLY
    std.swift
    Chrono.swift
    String.swift

    SWIFT_MODULE_DEPENDS Cxx ${swift_cxxstdlib_dependencies}
    SWIFT_MODULE_DEPENDS_IOS ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_OSX ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_TVOS ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_WATCHOS ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_XROS ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_cxxstdlib_darwin_dependencies}
    SWIFT_MODULE_DEPENDS_ANDROID Android

    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    -cxx-interoperability-mode=default
    -Xfrontend -module-interface-preserve-types-as-written
    -enable-experimental-feature AssumeResilientCxxTypes
    -strict-memory-safety
    -disable-upcoming-feature MemberImportVisibility

    SWIFT_COMPILE_FLAGS_LINUX
    ${SWIFT_SDK_LINUX_CXX_OVERLAY_SWIFT_COMPILE_FLAGS}

    DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
    DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
    DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
    DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
    DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
    TARGET_SDKS ALL_APPLE_PLATFORMS LINUX WINDOWS ANDROID
    MACCATALYST_BUILD_FLAVOR zippered
    INSTALL_IN_COMPONENT compiler
    INSTALL_WITH_SHARED
    DEPENDS libstdcxx-modulemap libcxxshim_modulemap CxxStdlib-apinotes)

----------------------------------------

TITLE: Preserving Canonical Equivalence for I with Dot in Unicode
DESCRIPTION: Defines the casing rules for the Latin capital letter I with dot above, ensuring canonical equivalence is maintained.

LANGUAGE: Unicode
CODE:
0130; 0069 0307; 0130; 0130; # LATIN CAPITAL LETTER I WITH DOT ABOVE

----------------------------------------

TITLE: Configuring CMake Version and Visibility Settings
DESCRIPTION: Sets up minimum CMake version requirements and configures symbol visibility settings for C and C++ components.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.26...3.29)

set(CMAKE_C_VISIBILITY_PRESET "hidden")
set(CMAKE_CXX_VISIBILITY_PRESET "hidden")
set(CMAKE_VISIBILITY_INLINES_HIDDEN YES)

----------------------------------------

TITLE: Expanding Swift Source Files with GYB in CMake
DESCRIPTION: Uses the gyb_expand function to generate Swift source files from GYB templates. These files include atomic operations, floating-point parsing, and various pointer types.

LANGUAGE: cmake
CODE:
gyb_expand(AtomicInt.swift.gyb AtomicInt.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(FloatingPointParsing.swift.gyb FloatingPointParsing.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(FloatingPointTypes.swift.gyb FloatingPointTypes.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(IntegerTypes.swift.gyb IntegerTypes.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(LegacyInt128.swift.gyb LegacyInt128.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(UnsafeBufferPointer.swift.gyb UnsafeBufferPointer.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(UnsafeRawBufferPointer.swift.gyb UnsafeRawBufferPointer.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

gyb_expand(Tuple.swift.gyb Tuple.swift
  FLAGS "-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}")

----------------------------------------

TITLE: Defining Swift Stdlib Stubs Library Sources in CMake
DESCRIPTION: Creates a library target 'swiftStdlibStubs' with various source files, including Unicode-related implementations. Conditionally includes Objective-C interop files based on the SwiftCore_ENABLE_OBJC_INTEROP flag.

LANGUAGE: CMake
CODE:
add_library(swiftStdlibStubs OBJECT
  Assert.cpp
  GlobalObjects.cpp
  LibcShims.cpp
  Random.cpp
  Stubs.cpp
  ThreadLocalStorage.cpp
  MathStubs.cpp
  Unicode/UnicodeData.cpp
  Unicode/UnicodeGrapheme.cpp
  Unicode/UnicodeNormalization.cpp
  Unicode/UnicodeScalarProps.cpp
  Unicode/UnicodeWord.cpp)

if(SwiftCore_ENABLE_OBJC_INTEROP)
  gyb_expand(SwiftNativeNSXXXBase.mm.gyb "SwiftNativeNSXXXBase.mm")
  target_sources(swiftStdlibStubs PRIVATE
    # ObjC files
    Availability.mm
    FoundationHelpers.mm
    OptionalBridgingHelper.mm
    Reflection.mm
    SwiftNativeNSObject.mm
    SwiftNativeNSXXXBaseARC.m
    "${CMAKE_CURRENT_BINARY_DIR}/SwiftNativeNSXXXBase.mm")
endif()

----------------------------------------

TITLE: Symlinking Clang Headers in CMake
DESCRIPTION: Creates custom commands and targets for symlinking Clang resource headers into Swift library directories.

LANGUAGE: CMake
CODE:
add_custom_command_target(unused_var
    COMMAND
      "${CMAKE_COMMAND}" "-E" "make_directory" "${SWIFTLIB_DIR}"
    COMMAND
      "${CMAKE_COMMAND}" "-E" "${SWIFT_COPY_OR_SYMLINK_DIR}"
      "${clang_headers_location}"
      "${SWIFTLIB_DIR}/clang"

    CUSTOM_TARGET_NAME "symlink_clang_headers"
    OUTPUT "${SWIFTLIB_DIR}/clang"
    COMMENT "Symlinking Clang resource headers into ${SWIFTLIB_DIR}/clang")

add_dependencies(copy_shim_headers symlink_clang_headers)

# ... (similar code for static library)

----------------------------------------

TITLE: Protocol and CoreFoundation Class Definition
DESCRIPTION: Defines a protocol 'Superproto' with a required method and a class 'MyLittleCFType' that inherits from _CFObject.

LANGUAGE: swift
CODE:
protocol Superproto {
  func lala()
}
class MyLittleCFType : _CFObject {
}

----------------------------------------

TITLE: Mapping Digits One to Nine
DESCRIPTION: Defines numeric values for digit characters representing 1 through 9 in various scripts.

LANGUAGE: Unicode
CODE:
0031          ; 1.0 ; ; 1 # Nd       DIGIT ONE
00B9          ; 1.0 ; ; 1 # No       SUPERSCRIPT ONE
0661          ; 1.0 ; ; 1 # Nd       ARABIC-INDIC DIGIT ONE
# ... (additional representations for digits 1-9 omitted for brevity)

----------------------------------------

TITLE: Adding libSwiftScan Tool Directory in CMake
DESCRIPTION: CMake command that adds the libSwiftScan tool directory to the build system. This enables the compilation and integration of the Swift scanning library into the main project.

LANGUAGE: cmake
CODE:
add_swift_tool_subdirectory(libSwiftScan)

----------------------------------------

TITLE: Configuring Swift Optimizer Source Files
DESCRIPTION: Defines the core source files to be included in the Swift compiler's optimizer module. Lists essential files for optimization functionality including context management, module passes, options configuration, and pass registration system.

LANGUAGE: swift
CODE:
swift_compiler_sources(Optimizer
  Context.swift
  ModulePassContext.swift
  Options.swift
  Passes.swift
  PassRegistration.swift)

----------------------------------------

TITLE: Adding Swift Target Library for Windows SDK Overlay
DESCRIPTION: This snippet defines the configuration for adding a Swift target library named 'swiftWinSDK'. It specifies the source file, compilation flags, link flags, target SDK, and installation component. The library is set up as an SDK overlay for Windows.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftWinSDK ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY
    WinSDK.swift

    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
    LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
    TARGET_SDKS WINDOWS
    INSTALL_IN_COMPONENT sdk-overlay)

----------------------------------------

TITLE: Defining Swift Core Library Sources in CMake
DESCRIPTION: Adds the main Swift Core library source files to the swiftCore target. Includes a wide range of Swift standard library components such as collections, strings, and runtime support.

LANGUAGE: cmake
CODE:
add_library(swiftCore
  Algorithm.swift
  ArrayBody.swift
  ArrayBuffer.swift
  ArrayBufferProtocol.swift
  ArrayCast.swift
  Array.swift
  ArrayShared.swift
  ArraySlice.swift
  ArrayType.swift
  ASCII.swift
  Assert.swift
  AssertCommon.swift
  BidirectionalCollection.swift
  Bitset.swift
  Bool.swift
  BridgeObjectiveC.swift
  BridgeStorage.swift
  BridgingBuffer.swift
  Builtin.swift
  BuiltinMath.swift
  Character.swift
  CocoaArray.swift
  Codable.swift
  Collection.swift
  CollectionAlgorithms.swift
  Comparable.swift
  CompilerProtocols.swift
  Sendable.swift
  ContiguousArray.swift
  ContiguouslyStored.swift
  ClosedRange.swift
  ContiguousArrayBuffer.swift
  CString.swift
  CTypes.swift
  DebuggerSupport.swift
  Dictionary.swift
  DictionaryBridging.swift
  DictionaryBuilder.swift
  DictionaryCasting.swift
  DictionaryStorage.swift
  DictionaryVariant.swift
  DiscontiguousSlice.swift
  DropWhile.swift
  Dump.swift
  EmptyCollection.swift
  EnumeratedSequence.swift
  Equatable.swift
  ErrorType.swift
  ExistentialCollection.swift
  Filter.swift
  FlatMap.swift
  Flatten.swift
  FloatingPoint.swift
  Hashable.swift
  AnyHashable.swift # ORDER DEPENDENCY
  Hasher.swift
  Hashing.swift
  HashTable.swift
  Identifiable.swift
  Indices.swift
  InlineArray.swift
  InputStream.swift
  IntegerParsing.swift
  Integers.swift
  Join.swift
  KeyPath.swift
  KeyValuePairs.swift
  LazyCollection.swift
  LazySequence.swift
  LegacyABI.swift
  LifetimeManager.swift
  Macros.swift
  ManagedBuffer.swift
  Map.swift
  MemoryLayout.swift
  UnicodeScalar.swift # ORDER DEPENDENCY: Must precede Mirrors.swift
  Mirrors.swift
  Misc.swift
  MutableCollection.swift
  NativeDictionary.swift
  NativeSet.swift
  NewtypeWrapper.swift
  NFC.swift
  NFD.swift
  ObjectIdentifier.swift
  Optional.swift
  OptionSet.swift
  OutputStream.swift
  Pointer.swift
  Policy.swift
  PrefixWhile.swift
  Prespecialize.swift
  Print.swift
  PtrAuth.swift
  Random.swift
  RandomAccessCollection.swift
  Range.swift
  RangeReplaceableCollection.swift
  RangeSet.swift
  RangeSetRanges.swift
  ReflectionMirror.swift
  Repeat.swift
  REPL.swift
  Result.swift
  Reverse.swift
  Runtime.swift
  RuntimeFunctionCounters.swift
  SipHash.swift
  Sequence.swift
  SequenceAlgorithms.swift
  Set.swift
  SetAlgebra.swift
  SetAnyHashableExtensions.swift
  SetBridging.swift
  SetBuilder.swift
  SetCasting.swift
  SetStorage.swift
  SetVariant.swift
  ShadowProtocols.swift
  Shims.swift
  Slice.swift
  SmallString.swift
  Sort.swift
  Span/Span.swift
  Span/RawSpan.swift
  Span/MutableSpan.swift
  Span/MutableRawSpan.swift
  StaticString.swift
  StaticPrint.swift
  Stride.swift
  StringHashable.swift  # ORDER DEPENDENCY: Must precede String.swift
  String.swift
  StringBreadcrumbs.swift
  StringBridge.swift
  StringCharacterView.swift
  StringComparable.swift
  StringComparison.swift
  StringCreate.swift
  StringGuts.swift
  StringGutsSlice.swift
  StringGutsRangeReplaceable.swift
  StringObject.swift
  StringProtocol.swift
  StringIndex.swift
  StringIndexConversions.swift
  StringIndexValidation.swift
  StringInterpolation.swift
  StringLegacy.swift
  StringNormalization.swift
  StringRangeReplaceableCollection.swift
  StringStorage.swift
  StringStorageBridge.swift
  StringSwitch.swift
  StringTesting.swift
  StringUnicodeScalarView.swift
  StringUTF16View.swift
  StringUTF8View.swift
  StringUTF8Validation.swift
  StringWordBreaking.swift
  Substring.swift
  SwiftNativeNSArray.swift
  SwiftSettings.swift
  TemporaryAllocation.swift
  ThreadLocalStorage.swift
  UIntBuffer.swift
  UnavailableStringAPIs.swift
  UnicodeData.swift
  UnicodeEncoding.swift
  UnicodeBreakProperty.swift
  UnicodeHelpers.swift
  UnicodeParser.swift
  UnicodeScalarProperties.swift
  CharacterProperties.swift # ORDER DEPENDENCY: UnicodeScalarProperties.swift
  UnicodeSPI.swift
  Unmanaged.swift
  UnmanagedOpaqueString.swift
  UnmanagedString.swift
  UnsafePointer.swift
  UnsafeRawPointer.swift
  UTFEncoding.swift
  UTF8.swift
  UTF16.swift
  UTF32.swift
  Unicode.swift # ORDER DEPENDENCY: must follow new unicode support
  StringGraphemeBreaking.swift # ORDER DEPENDENCY: Must follow UTF16.swift
  ValidUTF8Buffer.swift
  WriteBackMutableSlice.swift
  MigrationSupport.swift

  Availability.swift
  CollectionDifference.swift
  CollectionOfOne.swift
  Diffing.swift
  Duration.swift
  DurationProtocol.swift
  FloatingPointRandom.swift
  Instant.swift
  Int128.swift
  Mirror.swift
  PlaygroundDisplay.swift
  SwiftifyImport.swift
  CommandLine.swift
  SliceBuffer.swift
  StaticBigInt.swift
  UInt128.swift
  UnfoldSequence.swift
  UnsafeBufferPointerSlice.swift
  VarArgs.swift
  Zip.swift

  "${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c"
  "${CMAKE_CURRENT_BINARY_DIR}/AtomicInt.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/FloatingPointParsing.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/FloatingPointTypes.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/IntegerTypes.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/LegacyInt128.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/UnsafeBufferPointer.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/UnsafeRawBufferPointer.swift"
  "${CMAKE_CURRENT_BINARY_DIR}/Tuple.swift")

----------------------------------------

TITLE: Defining Swift Runtime Library Sources
DESCRIPTION: Configures the swiftRuntime object library with core runtime implementation files including memory management, metadata handling, and platform-specific functionality.

LANGUAGE: cmake
CODE:
add_library(swiftRuntime OBJECT
    "${PROJECT_SOURCE_DIR}/CompatibilityOverride/CompatibilityOverride.cpp"
    AnyHashableSupport.cpp
    Array.cpp
    AutoDiffSupport.cpp
    Bincompat.cpp
    BytecodeLayouts.cpp
    [... additional files omitted for brevity ...]
    Win32.cpp)

----------------------------------------

TITLE: Creating Output Directories in CMake
DESCRIPTION: Adds custom commands to create output directories for Swift shims.

LANGUAGE: CMake
CODE:
add_custom_command(
    OUTPUT "${output_dir}"
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir}")

add_custom_command(
    OUTPUT "${output_dir_static}"
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir_static}")

----------------------------------------

TITLE: Protocol and Class Declarations
DESCRIPTION: Declares a class 'SameName' with documentation comment and an empty protocol 'SameNameProtocol'.

LANGUAGE: swift
CODE:
/// Awesome name.
class SameName {
}
protocol SameNameProtocol {
}

----------------------------------------

TITLE: Defining Fractional Values
DESCRIPTION: Maps characters to specific fractional numeric values.

LANGUAGE: Unicode
CODE:
11FC0         ; 0.003125 ; ; 1/320 # No       TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH
11FD4         ; 0.003125 ; ; 1/320 # No       TAMIL FRACTION DOWNSCALING FACTOR KIIZH

0D58          ; 0.00625 ; ; 1/160 # No       MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH
11FC1         ; 0.00625 ; ; 1/160 # No       TAMIL FRACTION ONE ONE-HUNDRED-AND-SIXTIETH

11FC2         ; 0.0125 ; ; 1/80 # No       TAMIL FRACTION ONE EIGHTIETH

----------------------------------------

TITLE: Defining swiftSIL Target Sources in CMake
DESCRIPTION: CMake configuration that specifies the source files to be compiled for the swiftSIL target. Includes files implementing core SIL functionality like basic blocks, instructions, functions, types, and various runtime tables.

LANGUAGE: cmake
CODE:
target_sources(swiftSIL PRIVATE
  AbstractionPattern.cpp
  ApplySite.cpp
  Bridging.cpp
  Linker.cpp
  Notifications.cpp
  OperandOwnership.cpp
  SIL.cpp
  SILArgument.cpp
  SILBasicBlock.cpp
  SILBuilder.cpp
  SILConstants.cpp
  SILCoverageMap.cpp
  SILDebugInfoExpression.cpp
  SILDebugScope.cpp
  SILDeclRef.cpp
  SILDefaultOverrideTable.cpp
  SILDefaultWitnessTable.cpp
  SILDifferentiabilityWitness.cpp
  SILFunction.cpp
  SILFunctionBuilder.cpp
  SILFunctionType.cpp
  SILGlobalVariable.cpp
  SILInstruction.cpp
  SILInstructions.cpp
  SILLocation.cpp
  SILModule.cpp
  SILMoveOnlyDeinit.cpp
  SILPrinter.cpp
  SILProfiler.cpp
  SILSuccessor.cpp
  SILSymbolVisitor.cpp
  SILType.cpp
  SILTypeSubstitution.cpp
  SILUndef.cpp
  SILVTable.cpp
  SILValue.cpp
  SILWitnessTable.cpp
  TypeLowering.cpp
  ValueOwnership.cpp)

----------------------------------------

TITLE: Configuring Swift Dependency Scanning Libraries in CMake
DESCRIPTION: Defines two static libraries, swiftDependencyScanImpl and swiftDependencyScan, and sets up their source files and link dependencies. The libraries are part of the Swift project's dependency scanning functionality.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftDependencyScanImpl STATIC
  DependencyScanJSON.cpp
  StringUtils.cpp)

add_swift_host_library(swiftDependencyScan STATIC
  DependencyScanningTool.cpp
  ModuleDependencyCacheSerialization.cpp
  ModuleDependencyScanner.cpp
  ScanDependencies.cpp)

target_link_libraries(swiftDependencyScan INTERFACE
  clangBasic)

target_link_libraries(swiftDependencyScan PRIVATE
  swiftClangImporter
  swiftAST
  swiftSerialization)

target_link_libraries(swiftDependencyScan PUBLIC
  swiftDependencyScanImpl)

----------------------------------------

TITLE: Configuring Swift Synchronization Library Build in CMake
DESCRIPTION: Adds the Swift Synchronization library target with platform-specific sources, dependencies, and compilation flags. It also sets up installation and module dependencies for different platforms.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftSynchronization ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB IMPORTS_NON_OSSA 
  ${SWIFT_SYNCHRONIZATION_SOURCES}

  GYB_SOURCES
    ${SWIFT_SYNCHRONIZATION_GYB_SOURCES}

  SWIFT_SOURCES_DEPENDS_MACOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}
  SWIFT_SOURCES_DEPENDS_IOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}
  SWIFT_SOURCES_DEPENDS_TVOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}
  SWIFT_SOURCES_DEPENDS_WATCHOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}
  SWIFT_SOURCES_DEPENDS_VISIONOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}
  SWIFT_SOURCES_DEPENDS_LINUX
    ${SWIFT_SYNCHRONIZATION_LINUX_SOURCES}
  SWIFT_SOURCES_DEPENDS_LINUX_STATIC
    ${SWIFT_SYNCHRONIZATION_LINUX_SOURCES}
  SWIFT_SOURCES_DEPENDS_WASI
    ${SWIFT_SYNCHRONIZATION_WASM_SOURCES}
  SWIFT_SOURCES_DEPENDS_WINDOWS
    ${SWIFT_SYNCHRONIZATION_WINDOWS_SOURCES}
  SWIFT_SOURCES_DEPENDS_FREESTANDING
    Mutex/MutexUnavailable.swift

  SWIFT_MODULE_DEPENDS_OSX
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_IOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_TVOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_WATCHOS
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_XROS
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_MACCATALYST
    ${SWIFT_SYNCHRONIZATION_DARWIN_DEPENDENCIES}
  SWIFT_MODULE_DEPENDS_LINUX
    Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC
    Musl
  SWIFT_MODULE_DEPENDS_ANDROID
    Android
  SWIFT_MODULE_DEPENDS_WINDOWS
    WinSDK

  SWIFT_COMPILE_FLAGS
    ${SWIFT_SYNCHRNOIZATION_SWIFT_FLAGS}
  LINK_FLAGS
    "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"
  INSTALL_IN_COMPONENT
    stdlib
  MACCATALYST_BUILD_FLAVOR
    "zippered"
)

----------------------------------------

TITLE: Building SwiftCore as Dynamic Libraries
DESCRIPTION: Commands to build the SwiftCore runtimes as dynamic libraries using the BUILD_SHARED_LIBS option.

LANGUAGE: sh
CODE:
cmake -B build -S . -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_Swift_COMPILER=<swiftc>
cmake --build build

----------------------------------------

TITLE: Gathering Source Files for Swift RegexBuilder Library in CMake
DESCRIPTION: This code block recursively collects all Swift source files for the RegexBuilder library and normalizes their paths for CMake processing.

LANGUAGE: CMake
CODE:
file(GLOB_RECURSE _REGEX_BUILDER_SOURCES
  "${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/RegexBuilder/*.swift")
set(REGEX_BUILDER_SOURCES)
foreach(source ${_REGEX_BUILDER_SOURCES})
  file(TO_CMAKE_PATH "${source}" source)
  list(APPEND REGEX_BUILDER_SOURCES ${source})
endforeach()

----------------------------------------

TITLE: Extending Base Class with Additional Methods in Swift
DESCRIPTION: This snippet extends the BaseInHead class, adding a new class method and an instance method named doItInCategory.

LANGUAGE: Swift
CODE:
extension BaseInHead {
  class func doItInCategory()
  func doItInCategory()
}

----------------------------------------

TITLE: Defining Numeric Value for Tibetan Digit Half Zero
DESCRIPTION: Maps the Tibetan Digit Half Zero character to the numeric value -0.5.

LANGUAGE: Unicode
CODE:
0F33          ; -0.5 ; ; -1/2 # No       TIBETAN DIGIT HALF ZERO

----------------------------------------

TITLE: Configuring Swift to C++ Shim Files in CMake
DESCRIPTION: Sets up datafiles, output directory, and custom commands to copy Swift to C++ shim files to the build directory. It creates a custom target for copying these files.

LANGUAGE: CMake
CODE:
set(datafiles
    _SwiftCxxInteroperability.h
    _SwiftStdlibCxxOverlay.h
    experimental-interoperability-version.json
)

set(SWIFTLIB_DIR
    "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift")
set(output_dir "${SWIFTLIB_DIR}/swiftToCxx")

add_custom_command(
    OUTPUT "${output_dir}"
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir}")

set (outputs)

foreach(input ${datafiles})
  set(source "${CMAKE_CURRENT_SOURCE_DIR}/${input}")
  set(dest "${output_dir}/${input}")
  add_custom_command(OUTPUT
                       "${output_dir}/${input}"
                     DEPENDS
                       "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
                     COMMAND
                       "${CMAKE_COMMAND}" "-E" "copy" "${source}" "${dest}")
  list(APPEND outputs "${output_dir}/${input}")
endforeach()
list(APPEND outputs "${output_dir}")

add_custom_target("copy_swiftToCxx_shims"
    DEPENDS "${output_dir}" "${outputs}"
    COMMENT "Copying Swift to C++ shims to ${output_dir}")

----------------------------------------

TITLE: Configuring Swift Regex Parser Library Sources
DESCRIPTION: Defines a library target named swift_RegexParser with a comprehensive list of Swift source files organized into functional groups including regex parsing, printing, AST handling, and utility functions.

LANGUAGE: cmake
CODE:
add_library(swift_RegexParser
  Regex/TreeProtocols.swift
  Regex/Parse/DelimiterLexing.swift
  Regex/Parse/Source.swift
  Regex/Parse/CharacterPropertyClassification.swift
  Regex/Parse/LexicalAnalysis.swift
  Regex/Parse/SyntaxOptions.swift
  Regex/Parse/CaptureList.swift
  Regex/Parse/CompilerInterface.swift
  Regex/Parse/CaptureStructure.swift
  Regex/Parse/Parse.swift
  Regex/Parse/SourceLocation.swift
  Regex/Parse/Diagnostics.swift
  Regex/Parse/Sema.swift
  Regex/Printing/RenderRanges.swift
  Regex/Printing/PrettyPrinter.swift
  Regex/Printing/PrintAsCanonical.swift
  Regex/Printing/DumpAST.swift
  Regex/AST/ASTAction.swift
  Regex/AST/AST.swift
  Regex/AST/CustomCharClass.swift
  Regex/AST/Quantification.swift
  Regex/AST/Conditional.swift
  Regex/AST/MatchingOptions.swift
  Regex/AST/ASTProtocols.swift
  Regex/AST/Group.swift
  Regex/AST/Atom.swift
  Utility/TypeConstruction.swift
  Utility/Misc.swift
  Utility/AllScalars.swift
  Utility/Errors.swift
  Utility/MissingUnicode.swift)

----------------------------------------

TITLE: Setting Runtime Compile Flags
DESCRIPTION: Configures compiler flags for building the Runtime module, including C++ interoperability and include paths.

LANGUAGE: cmake
CODE:
set(RUNTIME_COMPILE_FLAGS
  "-cxx-interoperability-mode=default"
  "-Xfrontend;-experimental-spi-only-imports"
  "-Xcc;-I${SWIFT_SOURCE_DIR}/include"
  "-Xcc;-I${CMAKE_BINARY_DIR}/include"
  "-Xcc;-I${SWIFT_STDLIB_SOURCE_DIR}/public/RuntimeModule/modules"
  "-disable-upcoming-feature;MemberImportVisibility")

----------------------------------------

TITLE: Linking Required Dependencies for RegexBuilder
DESCRIPTION: Specifies the required library dependencies for swiftRegexBuilder, including RegexParser, StringProcessing, and Core Swift libraries.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftRegexBuilder PRIVATE
  swift_RegexParser
  swift_StringProcessing
  swiftCore)

----------------------------------------

TITLE: Configuring SwiftOnoneSupport Common Options in CMake
DESCRIPTION: Sets common build options for the SwiftOnoneSupport library, including source files, compile flags, and link flags.

LANGUAGE: CMake
CODE:
set(swiftOnoneSupport_common_options
  IS_STDLIB

  # This file should be listed the first.  Module name is inferred from the
  # filename.
  SwiftOnoneSupport.swift

  "${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c"

  SWIFT_COMPILE_FLAGS "-parse-stdlib" "-Xllvm" "-sil-inline-generics=false" "-Xfrontend" "-validate-tbd-against-ir=none" "-Xfrontend" "-check-onone-completeness" "-Xfrontend" "-disable-access-control" "-strict-memory-safety" "${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}" "${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}"
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}")

----------------------------------------

TITLE: Implementing Version-Specific Methods with Swift Availability Attributes
DESCRIPTION: Defines a class with methods using @available attributes to specify macOS version requirements and lifecycle states. Demonstrates different ways to mark methods as available, deprecated, or obsoleted for specific macOS versions.

LANGUAGE: Swift
CODE:
class MaybeAvailable {
  @available(macOS 10.1, *)
  class func method1()
  @available(macOS 10.1, *)
  func method1()
  @available(macOS 10.1, *)
  class func method2()
  @available(macOS 10.1, *)
  func method2()
  @available(macOS, deprecated: 10.10)
  class func method3()
  @available(macOS, deprecated: 10.10)
  func method3()
  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)
  class func method4()
  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)
  func method4()
}

----------------------------------------

TITLE: Defining Numeric_Type Property for Unicode Characters
DESCRIPTION: Specifies ranges of Unicode code points and their corresponding Numeric_Type values (Numeric, Digit, or Decimal). Characters not explicitly listed have the value None.

LANGUAGE: Unicode
CODE:
00BC..00BE    ; Numeric # No   [3] VULGAR FRACTION ONE QUARTER..VULGAR FRACTION THREE QUARTERS
09F4..09F9    ; Numeric # No   [6] BENGALI CURRENCY NUMERATOR ONE..BENGALI CURRENCY DENOMINATOR SIXTEEN
0B72..0B77    ; Numeric # No   [6] ORIYA FRACTION ONE QUARTER..ORIYA FRACTION THREE SIXTEENTHS
# ... (truncated for brevity)

00B2..00B3    ; Digit # No   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE
00B9          ; Digit # No       SUPERSCRIPT ONE
1369..1371    ; Digit # No   [9] ETHIOPIC DIGIT ONE..ETHIOPIC DIGIT NINE
# ... (truncated for brevity)

0030..0039    ; Decimal # Nd  [10] DIGIT ZERO..DIGIT NINE
0660..0669    ; Decimal # Nd  [10] ARABIC-INDIC DIGIT ZERO..ARABIC-INDIC DIGIT NINE
06F0..06F9    ; Decimal # Nd  [10] EXTENDED ARABIC-INDIC DIGIT ZERO..EXTENDED ARABIC-INDIC DIGIT NINE
# ... (truncated for brevity)

----------------------------------------

TITLE: Adding Static Swift Host Library for Localization
DESCRIPTION: Configures a static Swift host library named 'swiftLocalization' with the LocalizationFormat.cpp source file and links it with the LLVM support component.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftLocalization STATIC
  LocalizationFormat.cpp

  LLVM_LINK_COMPONENTS
    support)

----------------------------------------

TITLE: Adding String Processing Subcomponents
DESCRIPTION: Includes the core subcomponents of the String Processing library: RegexParser, StringProcessing core, and RegexBuilder modules.

LANGUAGE: cmake
CODE:
add_subdirectory(_RegexParser)
add_subdirectory(_StringProcessing)
add_subdirectory(RegexBuilder)

----------------------------------------

TITLE: Adding Swift RegexBuilder Library Target in CMake
DESCRIPTION: This snippet adds the SwiftRegexBuilder library target to the build system, specifying its sources, dependencies, compilation flags, and installation components.

LANGUAGE: CMake
CODE:
add_swift_target_library(swiftRegexBuilder ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  "${REGEX_BUILDER_SOURCES}"

  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT

  LINK_LIBRARIES ${swift_regex_builder_link_libraries}

  C_COMPILE_FLAGS
    -DswiftRegexBuilder_EXPORTS
  SWIFT_COMPILE_FLAGS
    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  LINK_FLAGS "${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}"

  SWIFT_MODULE_DEPENDS _StringProcessing
  INSTALL_IN_COMPONENT stdlib
)

----------------------------------------

TITLE: Adding Swift Private Libc Extras Library Target
DESCRIPTION: Defines the main library target with source files, module dependencies, compilation flags, and platform-specific configurations.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftSwiftPrivateLibcExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB
  SwiftPrivateLibcExtras.swift
  Subprocess.c
  Subprocess.swift

  "${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c"

  SWIFT_MODULE_DEPENDS SwiftPrivate
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS} ${swift_private_libc_extras_flags}
  SWIFT_MODULE_DEPENDS_OSX ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_IOS ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_TVOS ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_XROS ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_private_libc_extras_darwin_dependencies}
  SWIFT_MODULE_DEPENDS_FREESTANDING "${SWIFT_FREESTANDING_TEST_DEPENDENCIES}"
  SWIFT_MODULE_DEPENDS_ANDROID Android
  SWIFT_MODULE_DEPENDS_LINUX Glibc
  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl
  SWIFT_MODULE_DEPENDS_FREEBSD Glibc
  SWIFT_MODULE_DEPENDS_OPENBSD Glibc
  SWIFT_MODULE_DEPENDS_CYGWIN Glibc
  SWIFT_MODULE_DEPENDS_HAIKU Glibc
  SWIFT_MODULE_DEPENDS_WASI WASILibc
  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK
  INCORPORATE_OBJECT_LIBRARIES ${swift_private_libc_extras_incorporate_object_libraries}
  INSTALL_IN_COMPONENT stdlib-experimental
  DARWIN_INSTALL_NAME_DIR "${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}"
  MACCATALYST_BUILD_FLAVOR "zippered")

----------------------------------------

TITLE: Defining Swift Helper Function and Enum Structure
DESCRIPTION: Declares a helper function that takes and returns Int32, defines a custom enum with UInt32 raw values, and creates associated computed properties. The code demonstrates Swift's type system features including raw representable enums and computed properties.

LANGUAGE: Swift
CODE:
func fooHelperSubFunc1(_ a: Int32) -> Int32
struct FooHelperSubEnum1 : RawRepresentable, Equatable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
}
var FooHelperSubEnum1X: FooHelperSubEnum1 { get }
var FooHelperSubEnum1Y: FooHelperSubEnum1 { get }
var FooHelperSubUnnamedEnumeratorA1: Int { get }

----------------------------------------

TITLE: Defining Full Case Folding for Latin Small Letter Sharp S
DESCRIPTION: Specifies the full case folding mapping for the Latin small letter sharp S (ß) to "ss".

LANGUAGE: Unicode
CODE:
00DF; F; 0073 0073; # LATIN SMALL LETTER SHARP S

----------------------------------------

TITLE: Defining Swift IDE Tool Static Library in CMake
DESCRIPTION: Adds a static library named swiftIDETool using the add_swift_host_library function. The library is composed of several source files related to IDE functionality.

LANGUAGE: CMake
CODE:
add_swift_host_library(swiftIDETool STATIC
  CompileInstance.cpp
  CompilerInvocation.cpp
  IDEInspectionInstance.cpp
  DependencyChecking.cpp
  SyntacticMacroExpansion.cpp
  )

----------------------------------------

TITLE: Configuring Conditional Compilation Flags
DESCRIPTION: Sets up conditional compilation flags based on build configuration options including crash reporter support, ObjC interop, and type printing capabilities.

LANGUAGE: cmake
CODE:
set(swift_demangling_cflags)

if(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT)
  list(APPEND swift_demangling_cflags
    "-DSWIFT_HAVE_CRASHREPORTERCLIENT=1")
endif()

if(SWIFT_STDLIB_ENABLE_OBJC_INTEROP)
  list(APPEND swiftDemanglingSources
    "${SWIFT_SOURCE_DIR}/lib/Demangling/OldDemangler.cpp"
    "${SWIFT_SOURCE_DIR}/lib/Demangling/OldRemangler.cpp"
  )
  list(APPEND swift_demangling_cflags -DSWIFT_SUPPORT_OLD_MANGLING=1)
else()
  list(APPEND swift_demangling_cflags -DSWIFT_SUPPORT_OLD_MANGLING=0)
endif()

if(SWIFT_STDLIB_HAS_TYPE_PRINTING)
  list(APPEND swift_demangling_cflags -DSWIFT_STDLIB_HAS_TYPE_PRINTING)
endif()

----------------------------------------

TITLE: Swift Compatibility Library Target Configuration
DESCRIPTION: Defines and configures the swiftCompatibility51 static library target with platform-specific deployment versions, compiler flags, and installation settings.

LANGUAGE: cmake
CODE:
set(library_name "swiftCompatibility51")

add_swift_target_library("${library_name}" STATIC
  Overrides.cpp
  ProtocolConformance.cpp

  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}

  C_COMPILE_FLAGS
    ${CXX_COMPILE_FLAGS}
    "-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY"
  LINK_FLAGS ${CXX_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

  MACCATALYST_BUILD_FLAVOR "zippered"

  INSTALL_IN_COMPONENT compiler
  INSTALL_WITH_SHARED)

----------------------------------------

TITLE: Importing FooHelper Module in Swift
DESCRIPTION: Exports and makes available the FooHelper module functionality

LANGUAGE: swift
CODE:
@_exported import FooHelper

----------------------------------------

TITLE: Defining Case Folding for Latin Capital Letter A
DESCRIPTION: Specifies the common case folding mapping for the Latin capital letter A to its lowercase equivalent.

LANGUAGE: Unicode
CODE:
0041; C; 0061; # LATIN CAPITAL LETTER A

----------------------------------------

TITLE: Configuring Swift Macro Evaluation Library
DESCRIPTION: Defines a pure Swift host library named 'swiftMacroEvaluation' with static linking and C++ interoperability. It includes source files for macros, plugin hosting, and source management, along with various Swift compiler-related dependencies.

LANGUAGE: Swift
CODE:
add_pure_swift_host_library(swiftMacroEvaluation STATIC CXX_INTEROP
  Macros.swift
  PluginHost.swift
  SourceManager.swift

  DEPENDENCIES
    swiftAST
  SWIFT_DEPENDENCIES
    _CompilerSwiftCompilerPluginMessageHandling
    _CompilerSwiftDiagnostics
    _CompilerSwiftOperators
    _CompilerSwiftParser
    _CompilerSwiftSyntax
    _CompilerSwiftSyntaxMacroExpansion
    swiftASTGen
)

----------------------------------------

TITLE: Configuring Swift Command Line Support Library Build
DESCRIPTION: Defines a static library target for Swift command line support with specific compiler flags and build settings. The library is configured to not embed bitcode, exclude Swift runtime, and is marked to never be installed.

LANGUAGE: cmake
CODE:
add_swift_target_library(swiftCommandLineSupport
  STATIC DONT_EMBED_BITCODE NOSWIFTRT
  CommandLine.cpp
  C_COMPILE_FLAGS ${SWIFT_RUNTIME_CXX_FLAGS}
  LINK_FLAGS ${SWIFT_RUNTIME_LINK_FLAGS}
  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
  INSTALL_IN_COMPONENT never_install
  )

----------------------------------------

TITLE: Configuring Darwin Platform Settings for SourceKit
DESCRIPTION: Handles Darwin-specific configuration including deployment target detection, SDK selection, and platform-specific compiler flags. Sets up build parameters for iOS, iOS Simulator, and macOS targets.

LANGUAGE: cmake
CODE:
if("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
  if (NOT SOURCEKIT_DEPLOYMENT_TARGET)
    execute_process(COMMAND sw_vers -productVersion
                    OUTPUT_VARIABLE SOURCEKIT_DEPLOYMENT_TARGET
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX MATCH "[0-9]+\\.[0-9]+" SOURCEKIT_DEPLOYMENT_TARGET "${SOURCEKIT_DEPLOYMENT_TARGET}")
  endif()

  if (SOURCEKIT_DEPLOYMENT_OS MATCHES "^iphoneos")
    set(version_min_os "ios")
    set(triple_os "ios")
    set(SOURCEKIT_DEFAULT_TARGET_SDK "IOS")
  elseif (SOURCEKIT_DEPLOYMENT_OS MATCHES "^iphonesimulator")
    set(version_min_os "ios-simulator")
    set(triple_os "ios")
    set(SOURCEKIT_DEFAULT_TARGET_SDK "IOS_SIMULATOR")
  elseif (SOURCEKIT_DEPLOYMENT_OS MATCHES "^macosx")
    set(version_min_os "macosx")
    set(triple_os "macosx")
    set(SOURCEKIT_DEFAULT_TARGET_SDK "OSX")
  endif()

----------------------------------------

TITLE: Unicode Word Break Test Cases
DESCRIPTION: Test cases for the Unicode word break algorithm, showing expected break points between different character combinations.

LANGUAGE: Unicode
CODE:
÷ 0001 ÷ 0001 ÷ #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
÷ 0001 × 0308 ÷ 0001 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
÷ 0001 ÷ 000D ÷ #  ÷ [0.2] <START OF HEADING> (Other) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
÷ 0001 × 0308 ÷ 000D ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]

----------------------------------------

TITLE: Defining Grapheme_Base Characters
DESCRIPTION: Characters that can serve as a base for a grapheme cluster. Generated from [0..10FFFF] - Cc - Cf - Cs - Co - Cn - Zl - Zp - Grapheme_Extend

LANGUAGE: Unicode
CODE:
0020          ; Grapheme_Base
0021..0023    ; Grapheme_Base
0024          ; Grapheme_Base
0025..0027    ; Grapheme_Base
0028          ; Grapheme_Base
0029          ; Grapheme_Base
002A          ; Grapheme_Base
002B          ; Grapheme_Base
002C          ; Grapheme_Base
002D          ; Grapheme_Base
002E..002F    ; Grapheme_Base
0030..0039    ; Grapheme_Base
003A..003B    ; Grapheme_Base
003C..003E    ; Grapheme_Base
003F..0040    ; Grapheme_Base
# ... (truncated for brevity)

----------------------------------------

TITLE: Configuring Static Swift Library for AST Generation
DESCRIPTION: Defines a pure Swift static library named swiftASTGen with CXX interoperability. Includes multiple Swift source files for AST generation, parsing, and compiler functionality. Specifies dependencies on core compiler components and syntax parsing modules.

LANGUAGE: cmake
CODE:
add_pure_swift_host_library(swiftASTGen STATIC CXX_INTEROP
  ASTGen.swift
  ASTGen+CompilerBuildConfiguration.swift
  Availability.swift
  Bridge.swift
  BuiltinPound.swift
  CompilerBuildConfiguration.swift
  DeclAttrs.swift
  Decls.swift
  Diagnostics.swift
  DiagnosticsBridge.swift
  Exprs.swift
  Fingerprint.swift
  Generics.swift
  LexicalLookup.swift
  Literals.swift
  ParameterClause.swift
  Patterns.swift
  Regex.swift
  SourceFile.swift
  StableHasher.swift
  Stmts.swift
  TypeAttrs.swift
  Types.swift

  DEPENDENCIES
    swiftAST
  SWIFT_DEPENDENCIES
    _CompilerRegexParser
    _CompilerSwiftSyntax
    _CompilerSwiftIfConfig
    _CompilerSwiftLexicalLookup
    _CompilerSwiftOperators
    _CompilerSwiftSyntaxBuilder
    _CompilerSwiftParser
    _CompilerSwiftParserDiagnostics
    _CompilerSwiftDiagnostics
)

----------------------------------------

TITLE: Configuring and Adding Swift Builtin Float Library in CMake
DESCRIPTION: This CMake script configures and adds the swift_Builtin_float library target. It sets up system-specific compilation flags, defines source files, and specifies installation parameters. The script also handles conditional compilation based on the SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT variable.

LANGUAGE: CMake
CODE:
if(NOT DEFINED SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT OR NOT SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT)
  if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(BUILTIN_FLOAT_SWIFT_FLAGS -Xfrontend -module-abi-name -Xfrontend Darwin)
  else()
    set(BUILTIN_FLOAT_SWIFT_FLAGS)
  endif()

  add_swift_target_library(swift_Builtin_float
      ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}
      IS_SDK_OVERLAY
      
      linker-support/magic-symbols-for-install-name.c

      GYB_SOURCES
        float.swift.gyb

      SWIFT_COMPILE_FLAGS
        ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}
        ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}
        ${BUILTIN_FLOAT_SWIFT_FLAGS}

      LINK_FLAGS
        ${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}

      INSTALL_IN_COMPONENT stdlib
      MACCATALYST_BUILD_FLAVOR zippered)
endif()

----------------------------------------

TITLE: Configuring SourceKit Build Environment in CMake
DESCRIPTION: Sets up core build configuration for SourceKit including module paths, version strings, output directories, and platform-specific settings. Checks for required dependencies and configures build targets.

LANGUAGE: cmake
CODE:
include(CheckSymbolExists)

list(APPEND CMAKE_MODULE_PATH
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  message(SEND_ERROR "SourceKit cannot be built standalone")
endif()

set(SOURCEKIT_SWIFT_SWAP_COMPILER FALSE)
include(SwiftWindowsSupport)
swift_swap_compiler_if_needed("SourceKit")

----------------------------------------

TITLE: ARM64 NSString Hash Value Implementation
DESCRIPTION: Assembly code verification for NSString hash value calculation on ARM64 architecture. Validates the message sending sequence and proper handling of autorelease return values.

LANGUAGE: assembly
CODE:
// CHECK-arm64-LABEL: _swift_stdlib_NSStringHashValue:
// CHECK-arm64-NOT: ret
// CHECK-arm64: bl      {{.*}} ; Objc message: -[x0 decomposedStringWithCanonicalMapping]
// CHECK-arm64: mov      x29, x29
// CHECK-arm64: bl      {{.*}} ; symbol stub for: _objc_retainAutoreleasedReturnValue
// CHECK-arm64: ret

----------------------------------------

TITLE: Defining XID_Start Characters
DESCRIPTION: ID_Start modified for closure under NFKx. Ensures that if isIdentifier(string) then isIdentifier(NFKx(string))

LANGUAGE: Unicode
CODE:
0041..005A    ; XID_Start
0061..007A    ; XID_Start
00AA          ; XID_Start
00B5          ; XID_Start
00BA          ; XID_Start
00C0..00D6    ; XID_Start
00D8..00F6    ; XID_Start
00F8..01BA    ; XID_Start
01BB          ; XID_Start
01BC..01BF    ; XID_Start
01C0..01C3    ; XID_Start
01C4..0293    ; XID_Start
0294          ; XID_Start
0295..02AF    ; XID_Start
# ... (truncated for brevity)

----------------------------------------

TITLE: Configuring Swift Dependencies
DESCRIPTION: Links Swift-specific dependencies including swiftBasic and optional swiftASTGen based on build configuration.

LANGUAGE: cmake
CODE:
target_link_libraries(swiftAST
  PUBLIC swiftBasic
  PRIVATE swiftMarkup)

if (SWIFT_BUILD_SWIFT_SYNTAX)
  target_link_libraries(swiftAST
    PRIVATE swiftASTGen)
endif()

----------------------------------------

TITLE: Adding Swift Project Subdirectories in CMake
DESCRIPTION: Configures CMake to include three main project subdirectories: Core for core functionality, SwiftLang for Swift language implementation, and Support for supporting utilities.

LANGUAGE: cmake
CODE:
add_subdirectory(Core)
add_subdirectory(SwiftLang)
add_subdirectory(Support)

----------------------------------------

TITLE: Swift Mangling Error Message
DESCRIPTION: A compiler error message showing failure to re-mangle an extremely long symbol signature consisting of many function parameter types (t) repeated in sequence.

LANGUAGE: swift
CODE:
(pos) unable to re-mangle $sBf32__t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_t_tN

----------------------------------------

TITLE: Defining Bindu Characters in Unicode
DESCRIPTION: Specifies Unicode code points for characters classified as Bindu (nasalization) in various Indic scripts.

LANGUAGE: Unicode
CODE:
0900..0902    ; Bindu # Mn   [3] DEVANAGARI SIGN INVERTED CANDRABINDU..DEVANAGARI SIGN ANUSVARA
0981          ; Bindu # Mn       BENGALI SIGN CANDRABINDU
0982          ; Bindu # Mc       BENGALI SIGN ANUSVARA
09FC          ; Bindu # Lo       BENGALI LETTER VEDIC ANUSVARA
0A01..0A02    ; Bindu # Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
0A70          ; Bindu # Mn       GURMUKHI TIPPI
0A81..0A82    ; Bindu # Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
0B01          ; Bindu # Mn       ORIYA SIGN CANDRABINDU
0B02          ; Bindu # Mc       ORIYA SIGN ANUSVARA
0B82          ; Bindu # Mn       TAMIL SIGN ANUSVARA

----------------------------------------

TITLE: Running Swift build-script with CMAKE_EXPORT_COMPILATION_COMMANDS
DESCRIPTION: Command to build Swift project with compilation command export enabled.

LANGUAGE: bash
CODE:
swift/utils/build-script <other options> \
  --extra-cmake-options='-DCMAKE_EXPORT_COMPILATION_COMMANDS=ON'

----------------------------------------

TITLE: Configuring Windows VFS Overlay Generation in CMake
DESCRIPTION: Function to generate Windows VFS overlay configuration file by converting path variables to CMake format and configuring the template file. Used for Windows SDK builds.

LANGUAGE: cmake
CODE:
function(generate_windows_vfs_overlay)
  file(TO_CMAKE_PATH ${VCToolsInstallDir} VCToolsInstallDir)
  file(TO_CMAKE_PATH ${UniversalCRTSdkDir} UniversalCRTSdkDir)
  configure_file("${PROJECT_SOURCE_DIR}/cmake/WindowsVFS.yaml.in"
                 "${CMAKE_CURRENT_BINARY_DIR}/windows-vfs-overlay.yaml"
                 @ONLY)
endfunction()

----------------------------------------

TITLE: Adding SourceKit Library Sources in CMake
DESCRIPTION: Defines the main sourcekitdAPI library and its core source files.

LANGUAGE: cmake
CODE:
add_sourcekit_library(sourcekitdAPI
  CodeCompletionResultsArray.cpp
  CompactArray.cpp
  DocStructureArray.cpp
  DocSupportAnnotationArray.cpp
  RawData.cpp
  sourcekitdAPI-Common.cpp
  DeclarationsArray.cpp
  TokenAnnotationsArray.cpp
  ExpressionTypeArray.cpp
  VariableTypeArray.cpp
  UIDHandling.cpp)

----------------------------------------

TITLE: Testing Benchmark Selection and Filtering
DESCRIPTION: Tests the logic for filtering benchmarks based on names, indices and tags, including tag combinations and skip-tags functionality.

LANGUAGE: shell
CODE:
RUN: %Benchmark_O --list --tags=Dictionary,Array \
RUN:             | %FileCheck %s --check-prefix ANDTAGS

----------------------------------------

TITLE: Empty Swift File Comment
DESCRIPTION: A single-line comment indicating that the file is empty. This comment serves as a placeholder or reminder that no code has been written yet.

LANGUAGE: Swift
CODE:
// Empty

----------------------------------------

TITLE: Using Local Swift Compiler with SwiftPM
DESCRIPTION: Commands to use a locally built Swift compiler for building SwiftPM packages using the SWIFT_EXEC environment variable.

LANGUAGE: sh
CODE:
# Assuming the current working directory contains the package, build the\n# package using a custom compiler.\nSWIFT_EXEC=/path/to/swiftc swift build

----------------------------------------

TITLE: Creating Custom Target for Symlinking Migrator Data in CMake
DESCRIPTION: Adds a custom target that depends on the output directory and all symlinked data files.

LANGUAGE: CMake
CODE:
add_custom_target("symlink_migrator_data"
    DEPENDS "${output_dir}" "${outputs}"
    COMMENT "Symlinking migrator data to ${output_dir}")

----------------------------------------

TITLE: Configuring SourceKitD Framework Build in CMake for Swift
DESCRIPTION: Sets up the SourceKitD framework build configuration, including public headers, exported symbols, and framework creation. It also handles platform-specific settings and symlink creation for the Swift standard library.

LANGUAGE: CMake
CODE:
set(public_headers
  ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h
)

set(EXPORTED_SYMBOL_FILE "${CMAKE_CURRENT_SOURCE_DIR}/sourcekitd.exports")

# FIXME: If you delete sourcekitd.framework, the soft links inside it need
# a CMake reconfigure in order for them to be created.

add_sourcekit_framework(sourcekitd
  ${public_headers}
  sourcekitd.cpp
  LLVM_LINK_COMPONENTS support
  MODULEMAP module.modulemap
  INSTALL_IN_COMPONENT sourcekit-xpc-service
)
target_link_libraries(sourcekitd PRIVATE sourcekitdAPI)

if (SOURCEKIT_BUILT_STANDALONE)
  # Create the symlink necessary to find the swift stdlib.
  swift_create_post_build_symlink(sourcekitd
    IS_DIRECTORY
    SOURCE "${SWIFTLIB_DIR}"
    DESTINATION "${SOURCEKIT_LIBRARY_OUTPUT_INTDIR}/swift"
    COMMENT "Creating symlink necessary to find the swift stdlib.")
endif()

if("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
  if(SWIFT_COMPILER_VERSION)
    set_property(TARGET sourcekitd APPEND_STRING PROPERTY
                 LINK_FLAGS " -Wl,-current_version -Wl,${SWIFT_COMPILER_VERSION}")
  endif()
endif()

----------------------------------------

TITLE: Class Definition - ClangInterface
DESCRIPTION: Defines an Objective-C compatible class that inherits from NSObject and conforms to ObjcProt and NSObjectProtocol protocols. Includes a someFunction() method and default initializer.

LANGUAGE: swift
CODE:
@objc open class ClangInterface: NSObject, ObjcProt, NSObjectProtocol {
    @objc dynamic open func someFunction()
    @objc override dynamic init()
}

----------------------------------------

TITLE: Empty Swift File
DESCRIPTION: An empty Swift source file containing only a comment indicating emptiness.

LANGUAGE: swift
CODE:
// Empty

----------------------------------------

TITLE: Building Documentation with Sphinx
DESCRIPTION: Commands to verify Sphinx installation and build Swift documentation as HTML using make.

LANGUAGE: sh
CODE:
sphinx-build --version\nmake -C docs

----------------------------------------

TITLE: Setting Swift GYB Flags in CMake
DESCRIPTION: This code snippet sets the SWIFT_GYB_FLAGS variable differently based on whether the host system is Windows or not. It configures line directive formatting for GYB (Generate Your Boilerplate) tool used in Swift development.

LANGUAGE: CMake
CODE:
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(SWIFT_GYB_FLAGS --line-directive "^\"#line %(line)d \\\"%(file)s\\\"^\"")
else()
  set(SWIFT_GYB_FLAGS --line-directive "'#line" "%(line)d" "\"%(file)s\"'")
endif()

----------------------------------------

TITLE: Adding Swift Subdirectory to CMake Build
DESCRIPTION: CMake command to include the Swift subdirectory in the project's build structure. This directive tells CMake to process the CMakeLists.txt file found in the swift subdirectory.

LANGUAGE: cmake
CODE:
add_subdirectory(swift)

----------------------------------------

TITLE: Configuring Swift Reflection Dump Tool Build
DESCRIPTION: CMake configuration that sets up the swift-reflection-dump tool build target. Specifies the source file, required LLVM components, and links against the Static Mirror and Remote Inspection libraries.

LANGUAGE: cmake
CODE:
add_swift_host_tool(swift-reflection-dump
  swift-reflection-dump.cpp
  LLVM_LINK_COMPONENTS object support
  SWIFT_COMPONENT tools
)
target_link_libraries(swift-reflection-dump
                      PRIVATE
                        swiftStaticMirror
                        swiftRemoteInspection)

----------------------------------------

TITLE: Structuring RST Documentation Table of Contents for Swift
DESCRIPTION: ReStructuredText markup defining the documentation structure and navigation for Swift language documentation. Links to various sections including backtracing, generics, variables, SIL, optimization, and ABI documentation.

LANGUAGE: rst
CODE:
.. _contents:

Contents
========

.. toctree::
   :maxdepth: 1

   Backtracing
   Generics
   StoredAndComputedVariables
   SIL
   OptimizationTips
   ABI: TypeMetadata <ABI/TypeMetadata>
   ABI: TypeLayout <ABI/TypeLayout>
   ABI: Mangling <ABI/Mangling>

More ABI docs:

* :download:`ABI/KeyPaths.md`
* :download:`ABI/GenericSignature.md`

----------------------------------------

TITLE: Creating a Documented Struct in Swift
DESCRIPTION: This snippet defines a struct named FooSwiftStruct with detailed documentation comments. It includes a constructor and an instance method, both with their own documentation.

LANGUAGE: Swift
CODE:
/// FooSwiftStruct Aaa.
/**
 * Bbb.
 * Ccc.
 */
struct FooSwiftStruct {
  /// fooInstanceFunc Aaa.
  /**
   * Bbb
   */
  /**
   * Ccc.
   */
  func fooInstanceFunc()
  init()
}

----------------------------------------

TITLE: Copying Release-built Standard Library to Debug Build
DESCRIPTION: These commands copy a release-built Swift standard library to a debug build directory, which can significantly speed up the build process.

LANGUAGE: bash
CODE:
src=/path/to/build/Ninja-ReleaseAssert/swift-macosx-x86_64
dst=/path/to/build/Ninja-DebugAssert/swift-macosx-x86_64
cp -r $src/stdlib $dst/
cp -r $src/lib/swift/macosx $dst/lib/swift/
cp -r $src/lib/swift/shims $dst/lib/swift/

----------------------------------------

TITLE: Adding Swift Subdirectory to CMake Build
DESCRIPTION: CMake command to include the Swift subdirectory in the project's build structure. This directive tells CMake to process the CMakeLists.txt file found in the swift subdirectory.

LANGUAGE: cmake
CODE:
add_subdirectory(swift)

----------------------------------------

TITLE: Configuring Swift Demangle Fuzzer Host Tool in CMake
DESCRIPTION: This snippet configures the Swift demangle fuzzer as a host tool using CMake. It specifies the source file, LLVM components, and Swift component for the build. It also links the tool with the swiftDemangling library.

LANGUAGE: CMake
CODE:
add_swift_fuzzer_host_tool(swift-demangle-fuzzer
  swift-demangle-fuzzer.cpp
  LLVM_LINK_COMPONENTS support
  SWIFT_COMPONENT compiler
  )
target_link_libraries(swift-demangle-fuzzer
                      PRIVATE
                        swiftDemangling)

----------------------------------------

TITLE: Protocol Conformance Type Resolution Example
DESCRIPTION: Example demonstrating type resolution and associated type references in protocol conformance.

LANGUAGE: swift
CODE:
protocol P {
  typealias Assoc
}

struct X<T> : P {

}

func foo(_ x: X<Int>.Assoc) { }

----------------------------------------

TITLE: Defining a Protocol in Swift
DESCRIPTION: This snippet defines a simple protocol named BarProtocol in Swift. It requires conforming types to implement an instanceFunc() method.

LANGUAGE: Swift
CODE:
protocol BarProtocol {
  func instanceFunc()
}

----------------------------------------

TITLE: Running Swift Test Suite on Android Device
DESCRIPTION: This bash command runs the Swift test suite on an Android device using the build script. It specifies various options including the Android NDK path and architecture.

LANGUAGE: bash
CODE:
$ utils/build-script \
  -R \
  -T \
  --android \
  --android-ndk ~/android-ndk-r27c \
  --android-arch aarch64 \
  --android-api-level 21

----------------------------------------

TITLE: Memory Management Test Example
DESCRIPTION: Example showing how to test memory management in Swift execution tests using autoreleasepool

LANGUAGE: swift
CODE:
var CanaryCount = 0

class Canary {
  deinit { ++CanaryCount }
}

CanaryCount = 0
autoreleasepool {
  let canary = Canary()
}
assert(CanaryCount == 1, "canary was not released")

----------------------------------------

TITLE: Configuring Swift Runtime Long Tests in CMake
DESCRIPTION: This snippet sets up the Swift Runtime Long Tests, including platform-specific sources and libraries, and configures the test target with appropriate compile definitions and link libraries.

LANGUAGE: CMake
CODE:
if(("${SWIFT_HOST_VARIANT_SDK}" STREQUAL "${SWIFT_PRIMARY_VARIANT_SDK}") AND
   ("${SWIFT_HOST_VARIANT_ARCH}" STREQUAL "${SWIFT_PRIMARY_VARIANT_ARCH}"))

  set(PLATFORM_SOURCES)
  set(PLATFORM_TARGET_LINK_LIBRARIES)

  if(SWIFT_HOST_VARIANT MATCHES "${SWIFT_DARWIN_VARIANTS}")
#   Placeholder for Darwin Foundation tests (currently none)
#    find_library(FOUNDATION_LIBRARY Foundation)
#    list(APPEND PLATFORM_SOURCES
#      YourTestNameHere.mm
#      )
#    # We need to link swiftCore on Darwin because the runtime still relies on
#    # some stdlib hooks to implement SwiftObject.
#    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES
#      ${FOUNDATION_LIBRARY}
#      swiftStdlibUnittest${SWIFT_PRIMARY_VARIANT_SUFFIX}
#      )

    # Link the Objective-C runtime.
    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES "objc")
  elseif(SWIFT_HOST_VARIANT STREQUAL "linux")
    if(SWIFT_HOST_VARIANT_ARCH MATCHES "armv6|armv7|i686")
      list(APPEND PLATFORM_TARGET_LINK_LIBRARIES
        "atomic"
        )
    endif()
  elseif(SWIFT_HOST_VARIANT STREQUAL "freebsd")
    find_library(EXECINFO_LIBRARY execinfo)
    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES
      ${EXECINFO_LIBRARY}
      )
  elseif(SWIFT_HOST_VARIANT STREQUAL "windows")
    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES DbgHelp;Synchronization)
  endif()

  add_swift_unittest(SwiftRuntimeLongTests IS_TARGET_TEST
    LongRefcounting.cpp
    ../Stdlib.cpp
    ${PLATFORM_SOURCES}

    # The runtime tests link to internal runtime symbols, which aren't exported
    # from the swiftCore dylib, so we need to link to both the runtime archive
    # and the stdlib.
    $<TARGET_OBJECTS:swiftRuntimeCore${SWIFT_PRIMARY_VARIANT_SUFFIX}>
    $<TARGET_OBJECTS:swiftLLVMSupport${SWIFT_PRIMARY_VARIANT_SUFFIX}>
    $<TARGET_OBJECTS:swiftDemangling${SWIFT_PRIMARY_VARIANT_SUFFIX}>
    )

  # The local stdlib implementation provides definitions of the swiftCore
  # interfaces to avoid pulling in swiftCore itself.  Build the
  # SwiftRuntimeLongTests with swiftCore_EXPORTS to permit exporting the stdlib
  # interfaces.
  target_compile_definitions(SwiftRuntimeLongTests
                             PRIVATE
                               swiftCore_EXPORTS
                               SWIFT_INLINE_NAMESPACE=__runtime)

  # FIXME: cross-compile for all variants.
  target_link_libraries(SwiftRuntimeLongTests
    PRIVATE
    swiftCore${SWIFT_PRIMARY_VARIANT_SUFFIX}
    swiftThreading${SWIFT_PRIMARY_VARIANT_SUFFIX}
    ${PLATFORM_TARGET_LINK_LIBRARIES}
    ${swift_runtime_test_extra_libraries}
    )
endif()

----------------------------------------

TITLE: Swift Task Class Constructor Example
DESCRIPTION: Shows Swift constructor implementation with default parameters and instance variable initialization.

LANGUAGE: swift
CODE:
class Task {
    var title : String
    var date : NSDate

    constructor(title : String = "Task", date : NSDate = NSDate()) {
        self.title = title
        self.date = date
    }
}

----------------------------------------

TITLE: Defining FooHelper Function in Swift
DESCRIPTION: This snippet defines a function named fooHelperFunc1 that takes an Int32 parameter and returns an Int32. It's likely a wrapper or utility function for FooHelper operations.

LANGUAGE: Swift
CODE:
func fooHelperFunc1(_ a: Int32) -> Int32

----------------------------------------

TITLE: Configure Swift SDK Platform Support
DESCRIPTION: Sets up variables and options for building Swift on different platforms/SDKs including Darwin, Linux, Windows etc

LANGUAGE: cmake
CODE:
set(SWIFT_DARWIN_VARIANTS "^(macosx|iphoneos|iphonesimulator|appletvos|appletvsimulator|watchos|watchsimulator)")
set(SWIFT_DARWIN_PLATFORMS "IOS" "IOS_SIMULATOR" "TVOS" "TVOS_SIMULATOR" "WATCHOS" "WATCHOS_SIMULATOR" "OSX" "XROS" "XROS_SIMULATOR")

set(SWIFT_APPLE_PLATFORMS ${SWIFT_DARWIN_PLATFORMS})
if(SWIFT_FREESTANDING_FLAVOR STREQUAL "apple")
  list(APPEND SWIFT_APPLE_PLATFORMS "FREESTANDING")
  if(SWIFT_FREESTANDING_IS_DARWIN)
    list(APPEND SWIFT_DARWIN_PLATFORMS "FREESTANDING")
  endif()
endif()

----------------------------------------

TITLE: Swift File System Layout Example - Library
DESCRIPTION: Complex directory structure example for a Swift library with multiple source files, subdirectories and resources.

LANGUAGE: text
CODE:
mylib/
mylib.swift
a.swift
b.swift
UserManual.html
subdir/
c.swift
d.swift
e.png

----------------------------------------

TITLE: Platform-Specific Source and Library Configuration
DESCRIPTION: Configures platform-specific source files and library dependencies based on the host variant (Darwin, Linux, FreeBSD, Windows).

LANGUAGE: cmake
CODE:
set(PLATFORM_SOURCES)
set(PLATFORM_TARGET_LINK_LIBRARIES)
if(SWIFT_HOST_VARIANT MATCHES "${SWIFT_DARWIN_VARIANTS}")
  find_library(FOUNDATION_LIBRARY Foundation)
  list(APPEND PLATFORM_SOURCES
    weak.mm
    Refcounting.mm
  )
  list(APPEND PLATFORM_TARGET_LINK_LIBRARIES
    ${FOUNDATION_LIBRARY}
    swift_Concurrency${SWIFT_PRIMARY_VARIANT_SUFFIX}
    swiftStdlibUnittest${SWIFT_PRIMARY_VARIANT_SUFFIX}
  )

----------------------------------------

TITLE: Defining String Methods in Swift
DESCRIPTION: Example of String methods including both mutating and non-mutating versions for operations like uppercase and lowercase.

LANGUAGE: swift
CODE:
struct String {
  public func uppercase() -> String
  public mutating func uppercaseInPlace()

  public func lowercase() -> String
  public mutating func lowercaseInPlace()

  public func replace(
    _ pattern: String, with replacement: String) -> String
  public mutating func replaceInPlace(
    _ pattern: String, with replacement: String)

  public func trim() -> String
  public mutating func trimInPlace()
  ...
}

----------------------------------------

TITLE: Testing getObjCClassByMangledName Edge Cases in Swift
DESCRIPTION: Collection of test inputs that were found to cause issues when fuzzing the getObjCClassByMangledName method. Each case is tracked with a radar ticket for debugging and resolution.

LANGUAGE: swift
CODE:
# rdar://63485806
3…KySSyGSkySySSGiG3(KˇˇˇˇˇˇˇˇˇˇˇˇˇˇCwKySSiKySS
SSmSySyySGGSGyGSyySyySySSGGSGyS78iSLccSGSyySSySSGGccLcV1yVS~^§!zzzzzzzzzzzzhzzzzzSLzSEzzzzzzzzzzzzzzzzzxxxxx8K_S0ttnIx4_

----------------------------------------

TITLE: Defining XID_Continue Characters
DESCRIPTION: ID_Continue modified for closure under NFKx. Ensures that if isIdentifier(string) then isIdentifier(NFKx(string))

LANGUAGE: Unicode
CODE:
0030..0039    ; XID_Continue
0041..005A    ; XID_Continue
005F          ; XID_Continue
0061..007A    ; XID_Continue
00AA          ; XID_Continue
00B5          ; XID_Continue
00B7          ; XID_Continue
00BA          ; XID_Continue
00C0..00D6    ; XID_Continue
00D8..00F6    ; XID_Continue
00F8..01BA    ; XID_Continue
01BB          ; XID_Continue
01BC..01BF    ; XID_Continue
01C0..01C3    ; XID_Continue
01C4..0293    ; XID_Continue
# ... (truncated for brevity)

----------------------------------------

TITLE: Defining Option Subsets in Swift
DESCRIPTION: Example of defining option subsets as static functions in a Swift OptionSet struct.

LANGUAGE: Swift
CODE:
struct NSAlignmentOptions : OptionSet {
  var AlignMinXInward,
      AlignMinYInward,
      AlignMaxXInward,
      AlignMaxYInward,
      AlignWidthInward,
      AlignHeightInward : Bool = false

  // convenience combinations
  static func NSAlignAllEdgesInward() {
    return NSAlignmentOptions(AlignMinXInward: true,
                              AlignMaxXInward: true,
                              AlignMinYInward: true,
                              AlignMaxYInward: true)
  }
}

----------------------------------------

TITLE: Configuring SwiftDemangleTests Target in CMake
DESCRIPTION: Sets up the SwiftDemangleTests target with specific build properties and links it to the swiftDemangle library. The test is conditionally added only if the swiftDemangle target exists.

LANGUAGE: CMake
CODE:
if(TARGET swiftDemangle)
  add_swift_unittest(SwiftDemangleTests IS_TARGET_TEST
    DemangleTest.cpp
  )
  set_target_properties(SwiftDemangleTests
    PROPERTIES BUILD_WITH_INSTALL_RPATH On INSTALL_RPATH "${SWIFT_LIBRARY_OUTPUT_INTDIR}"
  )
  
  target_link_libraries(SwiftDemangleTests
    PRIVATE
    swiftDemangle
  )
endif()

----------------------------------------

TITLE: SIL Operations for Inout Retain and Release
DESCRIPTION: These SIL (Swift Intermediate Language) operations demonstrate how the proposed INOUT bit would be managed for class instances in the compiler's intermediate representation.

LANGUAGE: sil
CODE:
%former = inout_retain %b : $ClassType

inout_release %b : $ClassType, %former : $Builtin.Int1

strong_retain %b : $ClassType

copy_addr [inout] %a to [init] %b

----------------------------------------

TITLE: Defining Swift Type Aliases and Custom Types
DESCRIPTION: This snippet defines custom Swift types and type aliases, including a class that inherits from _CFObject and various type aliases for private types.

LANGUAGE: Swift
CODE:
class __PrivCFType : _CFObject {
}
@available(swift, obsoleted: 3, renamed: "__PrivCFType")
typealias __PrivCFTypeRef = __PrivCFType
typealias __PrivCFSub = __PrivCFType
@available(swift, obsoleted: 3, renamed: "__PrivCFSub")
typealias __PrivCFSubRef = __PrivCFSub
typealias __PrivInt = Int32

----------------------------------------

TITLE: Defining ID_Start Characters
DESCRIPTION: Characters that can start an identifier. Generated from Lu + Ll + Lt + Lm + Lo + Nl + Other_ID_Start - Pattern_Syntax - Pattern_White_Space

LANGUAGE: Unicode
CODE:
0041..005A    ; ID_Start
0061..007A    ; ID_Start
00AA          ; ID_Start
00B5          ; ID_Start
00BA          ; ID_Start
00C0..00D6    ; ID_Start
00D8..00F6    ; ID_Start
00F8..01BA    ; ID_Start
01BB          ; ID_Start
01BC..01BF    ; ID_Start
01C0..01C3    ; ID_Start
01C4..0293    ; ID_Start
0294          ; ID_Start
0295..02AF    ; ID_Start
# ... (truncated for brevity)

----------------------------------------

TITLE: Defining Option Set in Swift using Struct
DESCRIPTION: Proposed approach for defining an option set in Swift using a struct of Bools, which maps more naturally to a product type.

LANGUAGE: Swift
CODE:
struct NSStringCompareOptions {
  var CaseInsensitiveSearch,
      LiteralSearch,
      BackwardsSearch,
      AnchoredSearch,
      NumericSearch,
      DiacriticInsensitiveSearch,
      WidthInsensitiveSearch,
      ForcedOrderingSearch,
      RegularExpressionSearch : Bool = false
}

----------------------------------------

TITLE: Configuring Swift Frontend Unit Tests in CMake
DESCRIPTION: Adds unit test files to the SwiftFrontendTests target and specifies required library dependencies including swiftFrontend and swiftAST. Note: Contains a circular dependency between AST and Parse modules that needs to be addressed.

LANGUAGE: cmake
CODE:
add_swift_unittest(SwiftFrontendTests
  ArgParsingTest.cpp
  FeatureParsingTest.cpp
  IsFeatureEnabledTests.cpp
  StrictConcurrencyTests.cpp)

target_link_libraries(SwiftFrontendTests
  PRIVATE
    swiftFrontend
    # FIXME: Circular dependencies (AST <-> Parse)
    swiftAST)

----------------------------------------

TITLE: Demonstrating O(N) Performance Issue with COW in Swift
DESCRIPTION: This code snippet shows how current COW implementation can lead to unexpected O(N) performance for what should be O(1) operations.

LANGUAGE: swift
CODE:
x[0][0] = 1  // O(N) performance
anObject.title.append('.')  // O(N) performance

----------------------------------------

TITLE: Defining Swift Enums and OptionSets with Private Members
DESCRIPTION: This snippet defines Swift enums and OptionSets with both public and private members. It includes raw value representations and demonstrates the use of the @available attribute for renaming.

LANGUAGE: Swift
CODE:
struct E0 : Hashable, Equatable, RawRepresentable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
  typealias RawValue = UInt32
}
var __E0PrivA: E0 { get }
struct __PrivE1 : Hashable, Equatable, RawRepresentable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
  typealias RawValue = UInt32
}
var __PrivE1A: __PrivE1 { get }
struct __PrivE2 : Hashable, Equatable, RawRepresentable {
  init(_ rawValue: UInt32)
  init(rawValue: UInt32)
  var rawValue: UInt32
  typealias RawValue = UInt32
}
var __PrivE2A: __PrivE2 { get }
enum __PrivNSEnum : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case A
}
enum NSEnum : Int {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case __privA
  @available(swift, obsoleted: 3, renamed: "__privA")
  static var __PrivA: NSEnum { get }
  case B
}
struct __PrivNSOptions : OptionSet {
  init(rawValue: Int)
  let rawValue: Int
  typealias RawValue = Int
  typealias Element = __PrivNSOptions
  typealias ArrayLiteralElement = __PrivNSOptions
  static var A: __PrivNSOptions { get }
}
struct NSOptions : OptionSet {
  init(rawValue: Int)
  let rawValue: Int
  typealias RawValue = Int
  typealias Element = NSOptions
  typealias ArrayLiteralElement = NSOptions
  static var __privA: NSOptions { get }
  @available(swift, obsoleted: 3, renamed: "__privA")
  static var __PrivA: NSOptions { get }
  static var B: NSOptions { get }
}

----------------------------------------

TITLE: Defining Swift Compiler Sources for Optimizer Module
DESCRIPTION: This snippet defines the Swift source files that make up the Optimizer module of the Swift compiler. It includes various utility classes and algorithms used in code optimization.

LANGUAGE: Swift
CODE:
swift_compiler_sources(Optimizer
  BasicBlockRange.swift
  DeadEndBlocks.swift
  FunctionUses.swift
  InstructionRange.swift
  ReachableBlocks.swift
  Set.swift
  Stack.swift
  Worklist.swift)

----------------------------------------

TITLE: Defining Set Methods in Swift
DESCRIPTION: Example of Set methods including both mutating and non-mutating versions for operations like union and intersect.

LANGUAGE: swift
CODE:
struct Set<Element> {
  public func contains(_ x: Element) -> Bool                // x ∈ A, A ∋ x
  public func isSubsetOf(_ b: Set<Element>) -> Bool         // A ⊆ B
  public func isStrictSubsetOf(_ b: Set<Element>) -> Bool   // A ⊂ B
  public func isSupersetOf(_ b: Set<Element>) -> Bool       // A ⊇ B
  public func isStrictSupersetOf(_ b: Set<Element>) -> Bool // A ⊃ B
  ...
  public func union(_ b: Set<Element>) -> Set<Element>        // A ∪ B
  public mutating func unionInPlace(_ b: Set<Element>)        // A ∪= B

  public func intersect(_ b: Set<Element>) -> Set<Element>    // A ∩ B
  public mutating func intersectInPlace(_ b: Set<Element>)    // A ∩= B

  public func subtract(_ b: Set<Element>) -> Set<Element>     // A - B
  public mutating func subtractInPlace(_ b: Set<Element>)     // A -= B

  public func exclusiveOr(_ b: Set<Element>) -> Set<Element>  // A ⊕ B
  public mutating func exclusiveOrInPlace(_ b: Set<Element>)  // A ⊕= B
}

----------------------------------------

TITLE: Configuring Swift IDE Unit Tests with CMake
DESCRIPTION: This snippet adds a Swift unit test suite named 'SwiftIDETests' and specifies its source files. It then links the test suite with the 'swiftIDE' library.

LANGUAGE: CMake
CODE:
add_swift_unittest(SwiftIDETests
  CodeCompletionToken.cpp
  FuzzyStringMatcherTest.cpp
  Placeholders.cpp
  )
target_link_libraries(SwiftIDETests
  PRIVATE
  swiftIDE
)

----------------------------------------

TITLE: Demonstrating Debug Value with Deref Operation in Swift SIL
DESCRIPTION: Illustrates the use of op_deref in a debug value expression to indicate that the SSA value is a pointer that must be dereferenced.

LANGUAGE: swift
CODE:
%0 = alloc_stack $T
debug_value %0 : $*T, var, name "value", expr op_deref

----------------------------------------

TITLE: Defining Swift Structures with Private Members
DESCRIPTION: This snippet defines three Swift structures (S0, __PrivS1, and __PrivS2) with initializers and properties. It also includes a private function declaration and a private computed property.

LANGUAGE: Swift
CODE:
func __privTest()
struct S0 {
  init()
  init(__privValue: Int32)
  var __privValue: Int32
}
struct __PrivS1 {
  init()
  init(value: Int32)
  var value: Int32
}
struct __PrivS2 {
  init()
  init(value: Int32)
  var value: Int32
}
var __PrivAnonymousA: Int { get }

----------------------------------------

TITLE: Test Dependencies Configuration Function
DESCRIPTION: Function to gather test dependencies based on SDK type. Handles different dependencies for various platforms and build configurations.

LANGUAGE: cmake
CODE:
function(get_test_dependencies SDK result_var_name)
  set(deps)

  if(SWIFT_BUILD_STDLIB)
    list(APPEND deps SwiftUnitTests)
  endif()

  if(SWIFT_BUILD_SDK_OVERLAY OR SWIFT_BUILD_TEST_SUPPORT_MODULES)
    list(APPEND deps sdk-overlay)
  endif()

  set(deps_binaries)

  if (SWIFT_BUILD_LIBEXEC AND SWIFT_ENABLE_BACKTRACING)
    if (TARGET "swift-backtrace-${SDK}")
      list(APPEND deps_binaries
        "swift-backtrace-${SDK}")
    endif()
  endif()

  # Additional dependency logic...
  
  set("${result_var_name}" "${deps}" PARENT_SCOPE)
endfunction()

----------------------------------------

TITLE: Implementing Interior Pointer Conversion for Arrays in Swift
DESCRIPTION: Defines extension methods on Array to support interior pointer conversion for both const and mutable pointers.

LANGUAGE: Swift
CODE:
extension Array {
  @unsafe_interior_pointer_conversion
  func convertToConstPointer()
  -> (CConstPointer<T>, ArrayBuffer<T>) {
    return (CConstPointer(self.base), self.owner)
  }

  @unsafe_interior_pointer_conversion
  mutating func convertToMutablePointer()
  -> (CMutablePointer<T>, ArrayBuffer<T>) {
    self.makeUnique()
    return (CMutablePointer(self.base), self.owner)
  }
}

----------------------------------------

TITLE: Linking Swift AST Test Dependencies
DESCRIPTION: Specifies library dependencies for the SwiftASTTests target using CMake's target_link_libraries command. Links against swiftAST, swiftParse, and swiftSema libraries, with a note about circular dependencies.

LANGUAGE: cmake
CODE:
target_link_libraries(SwiftASTTests
   PRIVATE
   swiftAST
   # FIXME: Circular dependencies.
   swiftParse
   swiftSema
)

----------------------------------------

TITLE: Accessing Objective-C Instance Variables
DESCRIPTION: Example showing Objective-C ivar access syntax and type checking rules. The code demonstrates how ivar foo is accessed and type-checked against the static type of the base object.

LANGUAGE: Objective-C
CODE:
foo // ivar access example where foo must be declared in class C

----------------------------------------

TITLE: Implementing performChange for String Localization
DESCRIPTION: Implementation of the performChange method that handles the actual code transformation for string localization

LANGUAGE: cpp
CODE:
bool RefactoringActionLocalizeString::
performChange() {
  EditConsumer.insert(SM, Cursor.TrailingExpr->getStartLoc(), "NSLocalizedString(");
  EditConsumer.insertAfter(SM, Cursor.TrailingExpr->getEndLoc(), ", comment: \"\"");
  return false; // Return true if code change aborted.
}

----------------------------------------

TITLE: Creating Symlinks for OpenBSD Library Compatibility
DESCRIPTION: Creates symlinks to handle OpenBSD library naming conventions for LLVM compatibility.

LANGUAGE: shell
CODE:
$ doas ln -s /usr/lib/libc++abi.so.2.1 /usr/lib/libc++abi.so
$ doas ln -s /usr/lib/libc++.so.4.0 /usr/lib/libc++.so
$ doas ln -s /usr/lib/libc.so.96.0 /usr/lib/libc.so
$ doas ln -s /usr/lib/libm.so.10.1 /usr/lib/libm.so
$ doas ln -s /usr/local/lib/libicuuc.so.18.0 /usr/local/lib/libicuuc.so
$ doas ln -s /usr/lib/libpthread.so.26.1 /usr/lib/libpthread.so

----------------------------------------

TITLE: Configuring SourceKitSwiftLang Unit Tests in CMake
DESCRIPTION: Configures and links unit tests for the Swift source kit language component. Sets up test targets with required source files and links against SourceKitSwiftLang library. Defines SWIFTLIB_DIR compiler definition for test environment.

LANGUAGE: cmake
CODE:
if(NOT SWIFT_HOST_VARIANT MATCHES "${SWIFT_DARWIN_EMBEDDED_VARIANTS}")
  add_swift_unittest(SourceKitSwiftLangTests
    CursorInfoTest.cpp
    CloseTest.cpp
    EditingTest.cpp
    )
  target_link_libraries(SourceKitSwiftLangTests PRIVATE SourceKitSwiftLang)
  target_compile_definitions(SourceKitSwiftLangTests PRIVATE
    SWIFTLIB_DIR=\"${SWIFTLIB_DIR}\")
endif()

----------------------------------------

TITLE: Suppressing Unsafe Warnings with 'unsafe' Expression in Swift
DESCRIPTION: Shows how to use the 'unsafe' expression to acknowledge and suppress memory-unsafe code warnings.

LANGUAGE: swift
CODE:
func evilMalloc(size: Int) -> Int {
  return unsafe Int(bitPattern: malloc(size))
}

----------------------------------------

TITLE: Representing Swift Class Types in C++
DESCRIPTION: C++ class representation for Swift class types, using a base class with a pointer to the underlying Swift instance.

LANGUAGE: c++
CODE:
class BaseClass {
private:
  void *_opaquePointer; // Swift class instance pointer is stored here.
}; 
class Vehicle: public BaseClass {
public:
}

----------------------------------------

TITLE: Encoding CBF Omit Instruction
DESCRIPTION: Defines the bit layout for the omit instruction in CBF, used to indicate skipped frames in the backtrace.

LANGUAGE: plaintext
CODE:
   7   6   5   4   3   2   1   0
 ┌───────┬───┬───────────────────┐
 │ 0   1 │ x │ count             │ omit
 └───────┴───┴───────────────────┘

----------------------------------------

TITLE: Configuring Swift CRT Library in CMake
DESCRIPTION: Sets up the Swift CRT library with source files, compilation options, and dependencies. It also configures installation paths and generates Swift interface files.

LANGUAGE: CMake
CODE:
gyb_expand(tgmath.swift.gyb tgmath.swift)

add_library(swiftCRT
  tgmath.swift
  ucrt.swift
  Platform.swift
  POSIXError.swift
  TiocConstants.swift)
set_target_properties(swiftCRT PROPERTIES
  Swift_MODULE_NAME CRT)
target_compile_definitions(swiftCRT PRIVATE
  $<$<BOOL:${SwiftOverlay_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>)
target_compile_options(swiftCRT PRIVATE
  "SHELL:-Xcc -D_USE_MATH_DEFINES")
target_link_libraries(swiftCRT PRIVATE
  ClangModules
  swiftCore)

install(TARGETS swiftCRT
  ARCHIVE DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  LIBRARY DESTINATION "${SwiftOverlay_INSTALL_LIBDIR}"
  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
emit_swift_interface(swiftCRT)
install_swift_interface(swiftCRT)

embed_manifest(swiftCRT)

----------------------------------------

TITLE: Code Completion Response Format
DESCRIPTION: JSON response format for code completion results including descriptions, kinds, source text and other completion details

LANGUAGE: json
CODE:
{
    <key.results>: (array) [completion-result*]  // array of zero or more completion-result dictionaries
}

completion-result ::=
{
  <key.description>:    (string)    // Text to be displayed in code-completion window.
  <key.kind>:           (UID)       // UID for the declaration kind (function, class, etc.).
  <key.sourcetext>:     (string)    // Text to be inserted in source.
  <key.typename>:       (string)    // Text describing the type of the result.
  <key.doc.brief>:      (string)    // Brief documentation comment attached to the entity.
  <key.context>:        (UID)       // Semantic context of the code completion result.
  <key.num_bytes_to_erase>: (int64) // Number of bytes to the left of the cursor that should be erased before inserting this completion result.
}

----------------------------------------

TITLE: Representing Generic Non-Resilient Fixed-Layout Swift Value Type in C++
DESCRIPTION: C++ class representation for generic non-resilient fixed-layout Swift value types like Array<Int> or String?, using an opaque inline buffer.

LANGUAGE: c++
CODE:
class swift::Array<swift::Int> {
  ...
  alignas(8) char buffer[8]; // Swift value is stored here.
}

----------------------------------------

TITLE: Generic Find Function in C++
DESCRIPTION: Implementation of a generic find function in C++ that searches through a list for a given value. Shows template parameter usage and traversal of a templated data structure.

LANGUAGE: cpp
CODE:
template<typename T>
typename List<T>::Node *find(const List<T>&list, const T& value) {
  for (typename List<T>::Node *result = list.first; result; result = result->next)
    if (result->value == value)
      return result;

  return 0;
}

----------------------------------------

TITLE: Configuring Swift Builtin Float Library Build
DESCRIPTION: CMake configuration that creates and configures the swift_Builtin_float library. Sets up module name, compiler options, platform-specific settings, and links required dependencies.

LANGUAGE: cmake
CODE:
gyb_expand(float.swift.gyb float.swift)

add_library(swift_Builtin_float
  float.swift
  "${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c")
set_target_properties(swift_Builtin_float PROPERTIES
  Swift_MODULE_NAME _Builtin_float)
target_compile_options(swift_Builtin_float PRIVATE
  "$<$<PLATFORM_ID:Darwin>:SHELL:-Xfrontend -module-abi-name -Xfrontend Darwin>")
target_link_libraries(swift_Builtin_float PRIVATE
  $<$<PLATFORM_ID:Windows>:ClangModules>
  swiftCore)

----------------------------------------

TITLE: Demonstrating Heuristic for Skipping Parameters in Swift
DESCRIPTION: This snippet illustrates the heuristic used in the forward scanning rule for skipping parameters. It shows how the compiler decides which parameter to match an unlabeled trailing closure to based on whether subsequent parameters require arguments.

LANGUAGE: swift
CODE:
func showAlert(
  message: String,
  onPresentation: (() ->  Void)? = nil,
  onDismissal: () -> Void
) { /* ... */ }

// `onPresentation` does not require an argument, but `onDismissal` does, and
// there is no subsequent trailing closure labeled `onDismissal`.
// Therefore, the unlabeled trailing closure is matched to `onDismissal`.
showAlert(message: "Hello, World!") {
  // On dismissal action.
}

// Although `onPresentation` does not require an argument, there are no
// subsequent parameters that require an argument before the parameter whose
// label matches the next trailing closure (`onDismissal`).
// Therefore, the unlabeled trailing closure is matched to `onPresentation`.
showAlert(message: "Hello, World!") {
  // On presentation action.
} onDismissal: {
  // On dismissal action.
}

----------------------------------------

TITLE: Defining Custom Target for API Notes Copying in CMake
DESCRIPTION: Creates a custom target 'copy_apinotes' that depends on the copied files and output directory.

LANGUAGE: CMake
CODE:
add_custom_target("copy_apinotes" ALL
    DEPENDS "${outputs}" "${output_dir}"
    COMMENT "Copying API notes to ${output_dir}"
    SOURCES "${sources}")

----------------------------------------

TITLE: Swift Compiler Options Configuration
DESCRIPTION: Adds Swift-specific compiler options to disable implicit module imports for concurrency and string processing.

LANGUAGE: cmake
CODE:
add_compile_options(
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-concurrency-module-import>"
  "$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-string-processing-module-import>")

----------------------------------------

TITLE: Demonstrating Backward Scanning Rule in Swift (Pre-5.3)
DESCRIPTION: This snippet illustrates the backward scanning rule used in Swift versions prior to 5.3 for matching trailing closures. It shows how this can lead to unexpected behavior and compiler errors.

LANGUAGE: swift
CODE:
animate(withDuration: 0.3) {
  // Animate something?
  // The compiler matches this to the `completion` parameter.
}
// error: missing argument for parameter 'animations' in call

----------------------------------------

TITLE: Creating Custom Commands for Directory Creation and File Copying in CMake
DESCRIPTION: Sets up custom commands to create the output directory and copy API notes files if they've changed.

LANGUAGE: CMake
CODE:
add_custom_command(
    OUTPUT "${output_dir}"
    COMMAND ${CMAKE_COMMAND} "-E" "make_directory" "${output_dir}")
add_custom_command(
    OUTPUT ${outputs}
    DEPENDS ${inputs} "${output_dir}"
    COMMAND
      "${CMAKE_COMMAND}" "-E" "copy_if_different" ${inputs} "${output_dir}/")

----------------------------------------

TITLE: Defining Swift Compiler Sources for Optimizer Module
DESCRIPTION: This code snippet defines the source files that are part of the Swift compiler's Optimizer module. It uses the swift_compiler_sources function to specify the module name and list all the Swift files that should be included.

LANGUAGE: Swift
CODE:
swift_compiler_sources(Optimizer
  AccessUtilsTest.swift
  AddressUtils.swift
  BorrowUtils.swift
  SpecializationCloner.swift
  DiagnosticEngine.swift
  Devirtualization.swift
  EscapeUtils.swift
  ForwardingUtils.swift
  FunctionSignatureTransforms.swift
  GenericSpecialization.swift
  LifetimeDependenceUtils.swift
  LocalVariableUtils.swift
  OptUtils.swift
  OwnershipLiveness.swift
  PhiUpdater.swift
  SSAUpdater.swift
  StaticInitCloner.swift
  Test.swift
  Verifier.swift
)

----------------------------------------

TITLE: Configuring Swift Compiler for Strict Feature Name Checking
DESCRIPTION: Explains the default behavior of the Swift compiler when encountering unrecognized feature names with '-enable-upcoming-feature' or '-enable-experimental-feature' flags. It also mentions the option to enable a warning group for more detailed diagnostics about misspecified features.

LANGUAGE: markdown
CODE:
# Strict language feature enablement

By default, if an unrecognized feature name is specified with the
`-enable-upcoming-feature` or `-enable-experimental-feature` flags, the compiler
will ignore it without emitting a diagnostic since some projects must be
simultaneously compatible with multiple versions of the language and toolchain.
However, this warning group can be enabled to opt-in to detailed diagnostics
about misspecified features.

----------------------------------------

TITLE: Generating Input and Output File Lists in CMake
DESCRIPTION: Creates lists of input and output file paths for the API notes copying process.

LANGUAGE: CMake
CODE:
set(inputs)
set(outputs)
foreach(input ${sources})
  list(APPEND inputs "${CMAKE_CURRENT_SOURCE_DIR}/${input}")
  list(APPEND outputs "${output_dir}/${input}")
endforeach()

----------------------------------------

TITLE: Initializing Swift Core CMake Project
DESCRIPTION: Sets up the basic CMake project configuration for Swift Core with version information and language support. Includes visibility settings and position independent code requirements.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.29)

set(CMAKE_C_VISIBILITY_PRESET "hidden")
set(CMAKE_CXX_VISIBILITY_PRESET "hidden")
set(CMAKE_VISIBILITY_INLINES_HIDDEN YES)

set(CMAKE_POSITION_INDEPENDENT_CODE YES)

if($ENV{BUILD_NUMBER})
  math(EXPR BUILD_NUMBER "$ENV{BUILD_NUMBER} % 65535")
  set(BUILD_NUMBER ".${BUILD_NUMBER}")
endif()
project(SwiftCore
  LANGUAGES C CXX Swift
  VERSION 6.1.0${BUILD_NUMBER})

----------------------------------------

TITLE: Using Deprecated Protocol Requirements in Swift
DESCRIPTION: Demonstrates warnings when conforming to protocols with deprecated requirements. The warnings suggest alternative implementations to use instead.

LANGUAGE: swift
CODE:
struct S: Hashable {
  var hashValue: Int { // 'Hashable.hashValue' is deprecated as a protocol requirement; conform type 'S' to 'Hashable' by implementing 'hash(into:)' instead
    ...
  }
}
final class C: Executor {
  func enqueue(_ job: __owned Job) {} // 'Executor.enqueue(Job)' is deprecated as a protocol requirement; conform type 'C' to 'Executor' by implementing 'func enqueue(ExecutorJob)' instead
}

----------------------------------------

TITLE: Setting Windows SDK Environment Variables in CMake
DESCRIPTION: Converts Windows environment path variables to CMake-compatible paths for SDK directories and versions.

LANGUAGE: cmake
CODE:
file(TO_CMAKE_PATH "$ENV{WindowsSdkDir}" WindowsSdkDir)
file(TO_CMAKE_PATH "$ENV{WindowsSDKVersion}" WindowsSDKVersion)
file(TO_CMAKE_PATH "$ENV{UniversalCRTSdkDir}" UniversalCRTSdkDir)
file(TO_CMAKE_PATH "$ENV{UCRTVersion}" UCRTVersion)
file(TO_CMAKE_PATH "$ENV{VCToolsInstallDir}" VCToolsInstallDir)

----------------------------------------

TITLE: Using Renamed Deprecated Function in Swift
DESCRIPTION: Shows the use of a deprecated function that has been renamed. The warning includes information about the new function name to use instead.

LANGUAGE: swift
CODE:
@available(iOS, deprecated: 10.0, renamed: "newFunction")
func oldFunction() {
  // This function is deprecated and should not be used.
}

oldFunction() // 'oldFunction()' is deprecated: renamed to 'newFunction'

----------------------------------------

TITLE: Unsafe Static Variable Declaration
DESCRIPTION: Example of an unsafe static variable declaration that would trigger concurrency checking errors due to being nonisolated mutable state.

LANGUAGE: swift
CODE:
struct Constants {
  static var value = 10
}

----------------------------------------

TITLE: Actor Isolation Error Message
DESCRIPTION: Shows the compiler error message that occurs when protocol conformance crosses actor isolation boundaries, including suggested fixes.

LANGUAGE: swift
CODE:
| @MainActor
| struct MyData: P {
|        |- error: conformance of 'MyData' to protocol 'P' crosses into main actor-isolated code and can cause data races
|        |- note: isolate this conformance to the main actor with '@MainActor'
|        |- note: mark all declarations used in the conformance 'nonisolated'
|        `- note: turn data races into runtime errors with '@preconcurrency'
|   func f() { }
|        `- note: main actor-isolated instance method 'f()' cannot satisfy nonisolated requirement
| }

----------------------------------------

TITLE: Correct Pointer Usage with withUnsafePointer in Swift
DESCRIPTION: Demonstrates the proper way to work with pointers using withUnsafePointer, ensuring the pointer is only used within its valid scope.

LANGUAGE: swift
CODE:
var x = 42
withUnsafePointer(to: &x) { ptr in
  // Do something with ptr, but don't allow it to escape this closure!
}