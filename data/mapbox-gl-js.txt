TITLE: Tile and Bucket Structure in Mapbox GL JS
DESCRIPTION: Illustrates the structure of a Tile object and its buckets after vector tile data has been transferred to the main thread. Each bucket corresponds to a group of style layers and contains the necessary data for rendering.

LANGUAGE: javascript
CODE:
Tile
  |
  +- buckets[layer-id]: Bucket
  |    |
  |    + ArrayGroup {
  |        globalProperties: { zoom }
  |        layoutVertexArray,
  |        indexArray,
  |        indexArray2,
  |        layerData: {
  |          [style layer id]: {
  |            programConfiguration,
  |            paintVertexArray,
  |            paintPropertyStatistics
  |          }
  |          ...
  |        }
  |    }
  |
  +- buckets[...]: Bucket
        ...

----------------------------------------

TITLE: Implementing Mapbox GL Feature Filter
DESCRIPTION: Demonstrates how to use the featureFilter API to create and apply filters on map features. The example shows filtering for street features with specific class, admin level, and geometry type conditions.

LANGUAGE: javascript
CODE:
var ff = require('@mapbox/mapbox-gl-style-spec').featureFilter;

// will match a feature with class of street_limited,
// AND an admin_level less than or equal to 3,
// that's NOT a polygon.
var filter = [
    "all",
    ["==", "class", "street_limited"],
    ["<=", "admin_level", 3],
    ["!=", "$type", "Polygon"]
]

// will match a feature that has a class of
// wetland OR wetland_noveg.
// ["in", "class", "wetland", "wetland_noveg"]

// testFilter will be a function that returns a boolean
var testFilter = ff(filter);

// Layer feature that you're testing. Must have type
// and properties keys.
var feature = {
    type: 2,
    properties: {
       class: "street_limited",
       admin_level: 1
    }
};

// will return a boolean based on whether the feature matched the filter
return testFilter.filter({zoom: 0}, feature);

----------------------------------------

TITLE: GLSL Shader Color Variable Definition
DESCRIPTION: Example showing how to define and initialize a color variable using Mapbox pragmas. The code demonstrates the pattern of defining a high precision vec4 color variable and using it in the main shader function.

LANGUAGE: glsl
CODE:
#pragma mapbox: define highp vec4 color

main() {
    #pragma mapbox: initialize highp vec4 color
    ...
    gl_FragColor = color;
}

----------------------------------------

TITLE: GLSL Pragma Syntax Definition
DESCRIPTION: Shows the general syntax structure for Mapbox pragmas. The pattern includes precision qualifiers (lowp/mediump/highp) and supported data types (float/vec2/vec3/vec4).

LANGUAGE: glsl
CODE:
#pragma mapbox: (define|initialize) (lowp|mediump|highp) (float|vec2|vec3|vec4) {name}

----------------------------------------

TITLE: Validating Style JSON
DESCRIPTION: Command for validating style JSON files with options for JSON output and Mapbox Styles API compatibility checking.

LANGUAGE: bash
CODE:
$ gl-style-validate style.json

----------------------------------------

TITLE: Installing Mapbox GL Style Package
DESCRIPTION: Instructions for installing the Mapbox GL style specification package via npm, either as a local dependency or globally for CLI access.

LANGUAGE: bash
CODE:
npm install @mapbox/mapbox-gl-style-spec

----------------------------------------

TITLE: Map Features Usage - Version 0.32.0
DESCRIPTION: Example shows usage of map querying features with coordinates outside anti-meridian

LANGUAGE: javascript
CODE:
map.fitBounds(coordinates); // Now works correctly with coordinates outside Web Mercator bounds

----------------------------------------

TITLE: Updated EventEmitter Example - Version 0.31.0
DESCRIPTION: Example of using the new event emitter for map updates

LANGUAGE: javascript
CODE:
map.on('moveend', function() {
  // Event fires correctly timed with map movements
});

----------------------------------------

TITLE: Map Styling Properties - Version 0.30.0
DESCRIPTION: Demo of new style and schema configuration options

LANGUAGE: javascript
CODE:
map.setConfig({
  customProperty: value
});
map.setSchema({
  version: 8
});

----------------------------------------

TITLE: Using Style Composite CLI Tool
DESCRIPTION: Command for converting a non-composited style into a composite style for better label placement.

LANGUAGE: bash
CODE:
$ gl-style-composite style.json

----------------------------------------

TITLE: Migrating Style Versions
DESCRIPTION: Commands for migrating GL styles between versions, including an option for in-place migration using the sponge utility.

LANGUAGE: bash
CODE:
$ gl-style-migrate bright-v7.json > bright-v8.json
$ brew install moreutils
$ gl-style-migrate bright.json | sponge bright.json

----------------------------------------

TITLE: Formatting Style JSON
DESCRIPTION: Command for formatting style JSON files with standard indentation and sorted object keys.

LANGUAGE: bash
CODE:
$ gl-style-format style.json

----------------------------------------

TITLE: Creating Standalone Build
DESCRIPTION: Commands to create production-ready standalone build files for mapbox-gl.

LANGUAGE: bash
CODE:
npm run build-prod-min
npm run build-css

----------------------------------------

TITLE: Installing Development Environment on OSX
DESCRIPTION: Steps to set up the development environment on OSX including Xcode Command Line Tools and Node.js installation.

LANGUAGE: bash
CODE:
xcode-select --install

LANGUAGE: bash
CODE:
brew install node@20

LANGUAGE: bash
CODE:
git clone git@github.com:mapbox/mapbox-gl-js.git

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Development Environment on Linux
DESCRIPTION: Commands for setting up the development environment on Linux including git, Node.js, and required system dependencies.

LANGUAGE: bash
CODE:
sudo apt-get update
curl -sL https://deb.nodesource.com/setup_20.x | sudo bash -
sudo apt-get install build-essential git nodejs libglew-dev libxi-dev

LANGUAGE: bash
CODE:
git clone git@github.com:mapbox/mapbox-gl-js.git

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Development Environment on Windows
DESCRIPTION: Steps to set up the development environment on Windows with git and Node.js.

LANGUAGE: bash
CODE:
git clone git@github.com:mapbox/mapbox-gl-js.git

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Starting Debug Server
DESCRIPTION: Command to start the debug server with a Mapbox access token.

LANGUAGE: bash
CODE:
MAPBOX_ACCESS_TOKEN={YOUR_MAPBOX_ACCESS_TOKEN} npm run start-debug

----------------------------------------

TITLE: Running Full Test Suite in Node.js
DESCRIPTION: Command to run the complete integration test suite including render and query tests from the mapbox-gl-js directory.

LANGUAGE: bash
CODE:
npm run test-suite

----------------------------------------

TITLE: Running Specific Test Types
DESCRIPTION: Commands to run specific types of tests including render, query, and expression tests.

LANGUAGE: bash
CODE:
npm run test-render

npm run test-query

npm run test-expressions

----------------------------------------

TITLE: Running Subset of Tests
DESCRIPTION: Examples of running specific test subsets by passing directory parameters to the test-render script.

LANGUAGE: bash
CODE:
npm run test-render tests=circle-radius

npm run test-render tests=circle-radius/literal

----------------------------------------

TITLE: Running Tests in Browser Environment
DESCRIPTION: Commands to start test servers for running render and query tests in browser environment.

LANGUAGE: bash
CODE:
npm run watch-query

npm run watch-render

----------------------------------------

TITLE: Vector Tile Analysis Commands
DESCRIPTION: Commands for installing necessary tools and analyzing vector tile contents using vt2geojson utility.

LANGUAGE: bash
CODE:
npm install -g vt2geojson harp

harp server .

vt2geojson -z 14 -y 8803 -x 5374 http://localhost:9000/tiles/14-8803-5374.mvt

vt2geojson --layer poi_label -z 14 -y 8803 -x 5374 http://localhost:9000/tiles/14-8803-5374.mvt

----------------------------------------

TITLE: Installing Playwright Browser for Unit Tests in JavaScript
DESCRIPTION: This command installs the Chromium browser required for running unit tests using Playwright.

LANGUAGE: bash
CODE:
npx playwright install chromium

----------------------------------------

TITLE: Running Specific Unit Tests in JavaScript
DESCRIPTION: This command demonstrates how to run a specific unit test file in the Mapbox GL JS project.

LANGUAGE: bash
CODE:
npm run test-unit test/unit/ui/handler/scroll_zoom.test.js

----------------------------------------

TITLE: Running Specific Render Tests in JavaScript
DESCRIPTION: These commands show how to run specific render tests by providing a substring of the test name or category.

LANGUAGE: bash
CODE:
npm run test-render tests=background-color/default

LANGUAGE: bash
CODE:
npm run test-render tests=line

----------------------------------------

TITLE: Debugging Unit Tests with UI in JavaScript
DESCRIPTION: This command opens a UI for debugging unit tests by running them without headless mode.

LANGUAGE: bash
CODE:
npm run test-unit -- --no-browser.headless

----------------------------------------

TITLE: Executing Release Testing Server for Mapbox GL JS
DESCRIPTION: Command to start the release testing server and build required files for Mapbox GL JS testing.

LANGUAGE: Shell
CODE:
npm run start-release

----------------------------------------

TITLE: Accessing Mapbox GL JS Test Page URL
DESCRIPTION: URL to access the Mapbox GL JS release testing page after starting the server.

LANGUAGE: plaintext
CODE:
http://localhost:9966/test/release/index.html

----------------------------------------

TITLE: Adding New Test Pages in Mapbox GL JS Release Testing
DESCRIPTION: JavaScript code snippet showing where to add new test pages from online documentation in the release testing environment.

LANGUAGE: JavaScript
CODE:
pages = {
  // Add new pages here
}

----------------------------------------

TITLE: Specifying Local Debug Pages for Mapbox GL JS Testing
DESCRIPTION: File path for adding new test pages from the debug folder in the Mapbox GL JS release testing environment.

LANGUAGE: plaintext
CODE:
./local_release_page_list.txt