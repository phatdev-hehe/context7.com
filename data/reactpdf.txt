TITLE: Basic React-PDF Usage with Document and Page Components
DESCRIPTION: Demonstrates the basic usage of React-PDF with Document and Page components. This example shows how to load a PDF file and display its pages with pagination controls.

LANGUAGE: tsx
CODE:
import { useState } from 'react';
import { Document, Page } from 'react-pdf';

function MyApp() {
  const [numPages, setNumPages] = useState<number>();
  const [pageNumber, setPageNumber] = useState<number>(1);

  function onDocumentLoadSuccess({ numPages }: { numPages: number }): void {
    setNumPages(numPages);
  }

  return (
    <div>
      <Document file="somefile.pdf" onLoadSuccess={onDocumentLoadSuccess}>
        <Page pageNumber={pageNumber} />
      </Document>
      <p>
        Page {pageNumber} of {numPages}
      </p>
    </div>
  );
}

----------------------------------------

TITLE: Basic React-PDF Document and Page Implementation
DESCRIPTION: A typical implementation showing how to display a PDF document with React-PDF, including state management for tracking page numbers and total pages. The example demonstrates loading a PDF file and displaying a single page.

LANGUAGE: tsx
CODE:
import { useState } from 'react';
import { Document, Page } from 'react-pdf';

function MyApp() {
  const [numPages, setNumPages] = useState<number>();
  const [pageNumber, setPageNumber] = useState<number>(1);

  function onDocumentLoadSuccess({ numPages }: { numPages: number }): void {
    setNumPages(numPages);
  }

  return (
    <div>
      <Document file="somefile.pdf" onLoadSuccess={onDocumentLoadSuccess}>
        <Page pageNumber={pageNumber} />
      </Document>
      <p>
        Page {pageNumber} of {numPages}
      </p>
    </div>
  );
}

----------------------------------------

TITLE: Configuring PDF.js Worker with Import Method
DESCRIPTION: Sets up the PDF.js worker by importing it directly from the pdfjs-dist package. This approach is recommended for most cases and ensures the PDF rendering functionality works correctly.

LANGUAGE: typescript
CODE:
import { pdfjs } from 'react-pdf';

pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  'pdfjs-dist/build/pdf.worker.min.mjs',
  import.meta.url,
).toString();

----------------------------------------

TITLE: Setting Up PDF.js Worker Using Import Method in React
DESCRIPTION: Configures the PDF.js worker by importing it directly. This is the recommended approach for most applications to ensure PDF.js functionality works correctly.

LANGUAGE: typescript
CODE:
import { pdfjs } from 'react-pdf';

pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  'pdfjs-dist/build/pdf.worker.min.mjs',
  import.meta.url,
).toString();

----------------------------------------

TITLE: Adding Required Stylesheet for PDF Text Layer Support
DESCRIPTION: Imports the necessary CSS stylesheet to properly display the text layer in PDFs rendered by React-PDF, enabling text selection and search functionality.

LANGUAGE: typescript
CODE:
import 'react-pdf/dist/Page/TextLayer.css';

----------------------------------------

TITLE: Setting Up Document Options for cMap Support
DESCRIPTION: Configures a React-PDF Document component with options for cMap support, which is necessary for non-Latin character rendering. The example shows how to define and apply the options.

LANGUAGE: typescript
CODE:
// Outside of React component
const options = {
  cMapUrl: '/cmaps/',
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Setting Up Document Options for Standard Fonts
DESCRIPTION: Configures a React-PDF Document component with options for standard font support, which is necessary for PDFs using standard fonts. Shows how to define and apply the options object.

LANGUAGE: typescript
CODE:
// Outside of React component
const options = {
  standardFontDataUrl: '/standard_fonts/',
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Adding Required Stylesheet for PDF Annotation Layer Support
DESCRIPTION: Imports the necessary CSS stylesheet to properly display annotations such as links in PDFs rendered by React-PDF.

LANGUAGE: typescript
CODE:
import 'react-pdf/dist/Page/AnnotationLayer.css';

----------------------------------------

TITLE: Setting Standard Fonts URL Option for Document Component
DESCRIPTION: Configures the Document component with options for standard fonts URL to support PDFs using standard fonts.

LANGUAGE: tsx
CODE:
// Outside of React component
const options = {
  standardFontDataUrl: '/standard_fonts/',
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Using Legacy PDF.js Worker for Older Browser Support
DESCRIPTION: Configures React-PDF to use the legacy PDF.js worker for supporting older browsers. This is an alternative to the standard worker configuration and uses the legacy build path.

LANGUAGE: typescript
CODE:
pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  'pdfjs-dist/legacy/build/pdf.worker.min.mjs',
  import.meta.url,
).toString();

----------------------------------------

TITLE: Copying cMaps Files with Vite for Non-Latin Character Support
DESCRIPTION: Configures Vite to copy the necessary cMaps files for supporting PDFs with non-Latin characters. Uses vite-plugin-static-copy to handle file copying.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import { createRequire } from 'node:module';

import { defineConfig, normalizePath } from 'vite';
import { viteStaticCopy } from 'vite-plugin-static-copy';

const require = createRequire(import.meta.url);

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const cMapsDir = normalizePath(path.join(pdfjsDistPath, 'cmaps'));

export default defineConfig({
  plugins: [
    viteStaticCopy({
      targets: [
        {
          src: cMapsDir,
          dest: '',
        },
      ],
    }),
  ]
});

----------------------------------------

TITLE: Copying cMaps for Non-Latin Character Support
DESCRIPTION: A Node.js script to copy cMaps from the pdfjs-dist package to your project's output folder. This setup is necessary for properly displaying PDFs with non-Latin characters.

LANGUAGE: typescript
CODE:
import path from 'node:path';
import fs from 'node:fs';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const cMapsDir = path.join(pdfjsDistPath, 'cmaps');

fs.cpSync(cMapsDir, 'dist/cmaps/', { recursive: true });

----------------------------------------

TITLE: Copying cMaps Files with Webpack for Non-Latin Character Support
DESCRIPTION: Configures Webpack to copy the necessary cMaps files for supporting PDFs with non-Latin characters. Uses copy-webpack-plugin to handle file copying.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import CopyWebpackPlugin from 'copy-webpack-plugin';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const cMapsDir = path.join(pdfjsDistPath, 'cmaps');

module.exports = {
  plugins: [
    new CopyWebpackPlugin({
      patterns: [
        {
          from: cMapsDir,
          to: 'cmaps/'
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Webpack Configuration for cMaps in React-PDF
DESCRIPTION: Webpack configuration to copy cMaps from pdfjs-dist to your build output directory. Uses copy-webpack-plugin to ensure cMaps are available for proper PDF rendering with non-Latin characters.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import CopyWebpackPlugin from 'copy-webpack-plugin';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const cMapsDir = path.join(pdfjsDistPath, 'cmaps');

module.exports = {
  plugins: [
   new CopyWebpackPlugin({
     patterns: [
       {
         from: cMapsDir,
         to: 'cmaps/'
       },
     ],
   }),
  ],
};

----------------------------------------

TITLE: Setting cMap URL Option for Document Component
DESCRIPTION: Configures the Document component with options for cMap URL to support PDFs with non-Latin characters.

LANGUAGE: typescript
CODE:
// Outside of React component
const options = {
  cMapUrl: '/cmaps/',
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Setting cMap URL Option Using CDN for Document Component
DESCRIPTION: Configures the Document component with options for cMap URL using an external CDN to support PDFs with non-Latin characters.

LANGUAGE: tsx
CODE:
// Outside of React component
import { pdfjs } from 'react-pdf';

const options = {
  cMapUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/cmaps/`,
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Setting Standard Fonts URL Option Using CDN for Document Component
DESCRIPTION: Configures the Document component with options for standard fonts URL using an external CDN to support PDFs using standard fonts.

LANGUAGE: tsx
CODE:
// Outside of React component
import { pdfjs } from 'react-pdf';

const options = {
  standardFontDataUrl: `https://unpkg.com/pdfjs-dist@${pdfjs.version}/standard_fonts`,
};

// Inside of React component
<Document options={options} />;

----------------------------------------

TITLE: Copying Standard Fonts with Vite for Font Support
DESCRIPTION: Configures Vite to copy standard fonts files needed for PDFs using standard fonts. Uses vite-plugin-static-copy to handle file copying.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import { createRequire } from 'node:module';

import { defineConfig, normalizePath } from 'vite';
import { viteStaticCopy } from 'vite-plugin-static-copy';

const require = createRequire(import.meta.url);
const standardFontsDir = normalizePath(
  path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts')
);

export default defineConfig({
  plugins: [
    viteStaticCopy({
      targets: [
        {
          src: standardFontsDir,
          dest: '',
        },
      ],
    }),
  ]
});

----------------------------------------

TITLE: Copying Standard Fonts with Webpack for Font Support
DESCRIPTION: Configures Webpack to copy standard fonts files needed for PDFs using standard fonts. Uses copy-webpack-plugin to handle file copying.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import CopyWebpackPlugin from 'copy-webpack-plugin';

const standardFontsDir = path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts');

module.exports = {
  plugins: [
    new CopyWebpackPlugin({
      patterns: [
        {
          from: standardFontsDir,
          to: 'standard_fonts/'
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Copying Standard Fonts for PDF Support
DESCRIPTION: A Node.js script to copy standard fonts from the pdfjs-dist package to your project's output folder. This is needed for correctly displaying PDFs that use standard fonts.

LANGUAGE: typescript
CODE:
import path from 'node:path';
import fs from 'node:fs';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const standardFontsDir = path.join(pdfjsDistPath, 'standard_fonts');

fs.cpSync(standardFontsDir, 'dist/standard_fonts/', { recursive: true });

----------------------------------------

TITLE: Copying cMaps with Custom Script for Non-Latin Character Support
DESCRIPTION: A custom Node.js script to copy cMaps files for supporting PDFs with non-Latin characters when not using Webpack or Vite.

LANGUAGE: typescript
CODE:
import path from 'node:path';
import fs from 'node:fs';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const cMapsDir = path.join(pdfjsDistPath, 'cmaps');

fs.cpSync(cMapsDir, 'dist/cmaps/', { recursive: true });

----------------------------------------

TITLE: Copying Standard Fonts with Custom Script for Font Support
DESCRIPTION: A custom Node.js script to copy standard fonts files needed for PDFs using standard fonts when not using Webpack or Vite.

LANGUAGE: typescript
CODE:
import path from 'node:path';
import fs from 'node:fs';

const pdfjsDistPath = path.dirname(require.resolve('pdfjs-dist/package.json'));
const standardFontsDir = path.join(pdfjsDistPath, 'standard_fonts');

fs.cpSync(standardFontsDir, 'dist/standard_fonts/', { recursive: true });

----------------------------------------

TITLE: Configuring Next.js for React-PDF without Turbopack
DESCRIPTION: Next.js configuration for using React-PDF without Turbopack enabled. This webpack configuration resolves the canvas dependency to false since it's not needed for client-side rendering.

LANGUAGE: javascript
CODE:
module.exports = {
 webpack: (config) => {
   config.resolve.alias.canvas = false;

   return config;
 },
}

----------------------------------------

TITLE: Next.js Configuration for React-PDF Without Turbopack
DESCRIPTION: Configures Next.js to work with React-PDF by setting the canvas alias to false in the webpack configuration when not using Turbopack.

LANGUAGE: diff
CODE:
module.exports = {
+ webpack: (config) => {
+   config.resolve.alias.canvas = false;

+   return config;
+ },
}

----------------------------------------

TITLE: Configuring Next.js for React-PDF with Turbopack
DESCRIPTION: Next.js configuration for using React-PDF with Turbopack enabled. This requires creating an empty module and configuring Turbopack to resolve the canvas dependency to that module.

LANGUAGE: javascript
CODE:
module.exports = {
 experimental: {
   turbo: {
     resolveAlias: {
       canvas: './empty-module.ts',
     },
   },
 },
};

----------------------------------------

TITLE: Next.js Configuration for React-PDF With Turbopack
DESCRIPTION: Configures Next.js to work with React-PDF when using Turbopack by creating an empty module and setting the canvas alias to it.

LANGUAGE: diff
CODE:
module.exports = {
+ experimental: {
+   turbo: {
+     resolveAlias: {
+       canvas: './empty-module.ts',
+     },
+   },
+ },
};

----------------------------------------

TITLE: Vite Configuration for Standard Fonts in React-PDF
DESCRIPTION: Vite configuration to copy standard fonts from pdfjs-dist to your build output directory. Uses vite-plugin-static-copy to ensure standard fonts are available for proper PDF rendering.

LANGUAGE: javascript
CODE:
import path from 'node:path';
import { createRequire } from 'node:module';

import { defineConfig, normalizePath } from 'vite';
import { viteStaticCopy } from 'vite-plugin-static-copy';

const require = createRequire(import.meta.url);
const standardFontsDir = normalizePath(
  path.join(path.dirname(require.resolve('pdfjs-dist/package.json')), 'standard_fonts')
);

export default defineConfig({
  plugins: [
   viteStaticCopy({
     targets: [
       {
         src: standardFontsDir,
         dest: '',
       },
     ],
   }),
  ]
});

----------------------------------------

TITLE: Empty Module for Next.js with Turbopack
DESCRIPTION: Creates an empty TypeScript module to use as a replacement for canvas in Next.js with Turbopack.

LANGUAGE: typescript
CODE:
export default {};

----------------------------------------

TITLE: Next.js Configuration for React-PDF with Older Next.js Versions
DESCRIPTION: Disables swcMinify in Next.js configuration for compatibility with older versions of Next.js when using React-PDF.

LANGUAGE: diff
CODE:
module.exports = {
+ swcMinify: false,
}